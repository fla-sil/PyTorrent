{"info": {"author": "Gabriel Altay", "author_email": "gabriel.altay@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Fortran", "Programming Language :: Python", "Topic :: Education", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Scientific/Engineering :: Physics"], "description": "Description\r\n======================\r\nRabacus is a `Python <http://www.python.org>`_  package for performing \r\nanalytic radiative transfer calculations in simple geometries relevant to \r\ncosmology and astrophysics. It also contains tools to calculate cosmological\r\nquantities such as the power spectrum and mass function.  \r\n\r\n\r\nPrerequisites\r\n======================\r\n\r\nThe Rabacus package requires three other Python packages and a fortran \r\ncompiler, \r\n\r\n- `Scipy <http://www.scipy.org/scipylib/index.html>`_\r\n- `Numpy <http://www.numpy.org>`_ (version 1.7 or later)\r\n- `Quantities <https://pythonhosted.org/quantities>`_\r\n- Fortran compiler in your path.    \r\n\r\n\r\nInstalling prerequisites with pip\r\n------------------------------------\r\n\r\nA simple way to install Python packages is using the package manager \r\n`pip <https://pypi.python.org/pypi/pip>`_.  To check if you have\r\npip installed on your system, type ``pip`` at the command line, :: \r\n\r\n  pip\r\n\r\nIf this produces usage instructions then congratulations, you have pip\r\ninstalled.  If not, instructions for installing pip can be found \r\n`here <http://www.pip-installer.org/en/latest/installing.html>`_.\r\nTo check if the python packages are installed on your system, attempt \r\nto import them from the python command prompt, ::\r\n\r\n  >>> import scipy\r\n  >>> import numpy as np\r\n  >>> import quantities as pq\r\n\r\nIf any of these import commands produce an error message you will need \r\nto install the proper software before installing Rabacus. \r\nOnce you have access to pip, you can install any missing prerequisites \r\nusing the following commands, ::\r\n\r\n  sudo pip install scipy\r\n  sudo pip install numpy \r\n  sudo pip install quantities\r\n\r\nIf you do not have root access on your system you can pass the ``--user`` flag \r\nwhich will install the packages into a hidden folder called ``.local`` in \r\nyour home directory, ::\r\n\r\n  pip install --user scipy\r\n  pip install --user numpy \r\n  pip install --user quantities\r\n\r\n\r\nInstalling prerequisites on Debian (Ubuntu)\r\n---------------------------------------------\r\n\r\nOn Debian based systems (such as Ubuntu) you may prefer to install these \r\nprerequisites using the APT tool, ::\r\n \r\n  sudo apt-get install python-scipy python-numpy python-quantities\r\n\r\nTo increase the speed of execution, much of Rabacus is written in \r\nFortran 90 and then wrapped using the f2py tool that is part of numpy.  For \r\nthe installation to be successful, a fortran compiler must be in your \r\nexecutable path.  If you don't already have one, I recommend the \r\ngnu fortran compiler `gfortran <http://gcc.gnu.org/wiki/GFortran>`_.     \r\nOn Debian based systems (such as Ubuntu) you can install this \r\ncompiler using the APT tool, ::\r\n\r\n  sudo apt-get install gfortran\r\n\r\nInstallation\r\n======================\r\n\r\nWith the prequisites installed on your system, you are ready to\r\ninstall the Rabacus package itself.  \r\n\r\nSetting ``F90``  environment variable\r\n-------------------------------------\r\n\r\nRabacus makes use of OpenMP directives in the Fortran code base and so\r\nwe have to make sure the code is compiled correctly.  In order to do\r\nthis, you have to let the build system know what Fortran 90 compiler\r\nyou are going to be using.  The simplest way to do this is to set the\r\nenvironment variable ``F90`` before following the installation\r\ninstructions below.  Rabacus has been tested with the intel compiler and\r\nthe gnu gfortran compiler.  For other compilers you will have to\r\nfollow the `Manual Install` instructions below.\r\n\r\nTo use the gfortran compiler, type the following at the command line\r\n(in Bash) ::\r\n\r\n  export F90=gfortran\r\n\r\nTo use the intel compiler set :: \r\n\r\n  export F90=ifort\r\n\r\n\r\nSingle command install\r\n-------------------------\r\n\r\nIf you have made the appropriate sacrifices to the computer gods, you\r\nshould be able to install an OpenMP enabled version of Rabacus with a\r\nsingle comand line call to pip, ::\r\n\r\n  sudo pip install rabacus\r\n\r\nAs was the case for the prerequisites, if you do not have root access\r\non your system you can pass the ``--user`` flag which will install\r\nRabacus into a hidden folder called ``.local`` in your home directory,\r\n::\r\n\r\n  pip install --user rabacus\r\n\r\n\r\nIf the last two lines printed to the screen are, :: \r\n\r\n  Successfully installed rabacus \r\n  Cleaning up...\r\n\r\nthen congratulations you have a working copy of Rabacus. To double\r\ncheck, begin an ipython session and attempt an import, ::\r\n\r\n  import rabacus as ra\r\n\r\nPackages installed with pip can be uninstalled in the same way, ::\r\n\r\n  pip uninstall rabacus\r\n\r\n\r\nManual install\r\n------------------------\r\n\r\nIf the above process fails for any reason we can always download\r\nRabacus and manually invoke the setup script.  The first step is to\r\ndownload and untar the Rabacus tar.gz file from the PyPI site\r\n(https://pypi.python.org/pypi/rabacus) and change into the main\r\nRabacus directory, ::\r\n\r\n  gunzip rabacus-x.x.x.tar.gz\r\n  tar xvf rabacus-x.x.x.tar \r\n  cd rabacus-x.x.x\r\n\r\nNow we have direct access to the ``setup.py`` file which gives us a\r\nlot more freedom but it comes at the cost of slightly more complexity.\r\nFirst it's a good idea to see which fortran compilers are detected on\r\nyour machine.  The following command will list all of the fortan\r\ncompilers found on your system and all the compilers available for\r\nyour system but not found.  ::\r\n\r\n  f2py -c --help-fcompiler\r\n\r\nFor example on my machine I get the following, ::\r\n\r\n  Fortran compilers found:\r\n    --fcompiler=gnu95    GNU Fortran 95 compiler (4.8.1-10)\r\n    --fcompiler=intelem  Intel Fortran Compiler for 64-bit apps (14.0.2.144)\r\n  Compilers available for this platform, but not found:\r\n    --fcompiler=absoft   Absoft Corp Fortran Compiler\r\n    --fcompiler=compaq   Compaq Fortran Compiler\r\n    --fcompiler=g95      G95 Fortran Compiler\r\n    --fcompiler=gnu      GNU Fortran 77 compiler\r\n    --fcompiler=intel    Intel Fortran Compiler for 32-bit apps\r\n    --fcompiler=intele   Intel Fortran Compiler for Itanium apps\r\n    --fcompiler=lahey    Lahey/Fujitsu Fortran 95 Compiler\r\n    --fcompiler=nag      NAGWare Fortran 95 Compiler\r\n    --fcompiler=pathf95  PathScale Fortran Compiler\r\n    --fcompiler=pg       Portland Group Fortran Compiler\r\n    --fcompiler=vast     Pacific-Sierra Research Fortran 90 Compiler\r\n\r\nNow we decide which of the fortran compilers to use and which flags to\r\npass the build command.  Suppose you wanted to use the Intel compiler.\r\nEdit the ``setup.py`` file such that the variable ``f90_flags`` is a\r\nlist of compile flags and ``omp_lib`` is a list containing the linking\r\nflags.  For example, ::\r\n\r\n  f90_flags = [\"-openmp\", \"-fPIC\", \"-xHost\", \"-O3\", \"-ipo\", \r\n               \"-funroll-loops\", \"-heap-arrays\", \"-mcmodel=medium\"]  \r\n\r\n  omp_lib = [\"-liomp5\"]\r\n\r\nThese variables are already defined near the top of the ``setup.py``\r\nfile and will need to be overwritten.  Once this is done, we give the\r\nbuild command to the ``setup.py`` script, ::\r\n\r\n  python setup.py build --fcompiler=intelem\r\n\r\nAfter the package is built, give the install command to actually\r\ninstall it, ::\r\n\r\n  sudo python setup.py install --record rabacus_install_files.txt\r\n\r\nThe last part of the command is to allow for easy uninstall.  This\r\nprocess just involves deleting all installed files which will be\r\nlisted in the file ``rabacus_install_files.txt``. This can be\r\naccomplished using the following command, ::\r\n\r\n  cat rabacus_install_files.txt | xargs sudo rm -rf\r\n\r\nThe install can also be done locally for those without root permission\r\non their system by passing the ``--user`` flag to the install command,\r\n::\r\n\r\n  python setup.py install --user --record rabacus_install_files.txt\r\n\r\nNote that if you previously did an install of Rabacus that required\r\nthe ``sudo`` command you will likely need to delete the\r\n``rabacus.egg-info`` directory and some directories inside the\r\n``build`` directory as they will need to be modified but will be owned\r\nby ``root``.  If you are only doing a local install then this shoudn't\r\nbe necessary.  This procedure should work for any fortran compiler\r\nsupported by f2py (i.e. any compiler in the list returned when using\r\nthe ``--help-fcompiler`` flag.\r\n\r\n\r\nTesting install\r\n------------------------\r\n\r\nDetailed examples of using rabacus are available by following the link\r\nto the users guide below.  However, we present a short example with the \r\nexpected output below as a way to quickly test that a new installation \r\nhas basic functionality.  We first import rabacus and then create an\r\nobject that gives access to the meta galactic radiation background\r\ndescribed in \r\n`Haardt & Madau 2012\r\n<http://adsabs.harvard.edu/abs/2012ApJ...746..125H>`_.  Finally, we\r\nask for the photo-heating rate of He I at a redshift of 3.0.  :: \r\n\r\n  import rabacus as ra\r\n  hm12 = ra.HM12_Photorates_Table()\r\n  z = 3.0\r\n  print hm12.He1h(z)\r\n\r\nThe expected output from a working rabacus installation is given\r\nbelow.  Note that there may be differences in the last significant\r\nfigure due to different processor architectures. ::\r\n\r\n  3.39163517433e-12 eV/s\r\n\r\n\r\n\r\nAuthor\r\n=====================\r\nRabacus was written by Gabriel Altay and any questions can be directed \r\nto gabriel.altay@gmail.com\r\n\r\n\r\n\r\nProject URLs\r\n=====================\r\n\r\n* PyPI (https://pypi.python.org/pypi/rabacus) \r\n* documentation (http://pythonhosted.org//rabacus)\r\n* version control (https://github.com/galtay/rabacus)", "description_content_type": null, "docs_url": "https://pythonhosted.org/rabacus/", "download_url": "https://pypi.python.org/pypi/rabacus", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/galtay/rabacus", "keywords": "", "license": "Free BSD", "maintainer": "", "maintainer_email": "", "name": "rabacus", "package_url": "https://pypi.org/project/rabacus/", "platform": "linux", "project_url": "https://pypi.org/project/rabacus/", "project_urls": {"Download": "https://pypi.python.org/pypi/rabacus", "Homepage": "https://bitbucket.org/galtay/rabacus"}, "release_url": "https://pypi.org/project/rabacus/0.9.5/", "requires_dist": null, "requires_python": null, "summary": "Calculates analytic cosmological radiative transfer solutions in simplified geometries.", "version": "0.9.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p>Rabacus is a <a href=\"http://www.python.org\" rel=\"nofollow\">Python</a>  package for performing\nanalytic radiative transfer calculations in simple geometries relevant to\ncosmology and astrophysics. It also contains tools to calculate cosmological\nquantities such as the power spectrum and mass function.</p>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>The Rabacus package requires three other Python packages and a fortran\ncompiler,</p>\n<ul>\n<li><a href=\"http://www.scipy.org/scipylib/index.html\" rel=\"nofollow\">Scipy</a></li>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">Numpy</a> (version 1.7 or later)</li>\n<li><a href=\"https://pythonhosted.org/quantities\" rel=\"nofollow\">Quantities</a></li>\n<li>Fortran compiler in your path.</li>\n</ul>\n<div id=\"installing-prerequisites-with-pip\">\n<h3>Installing prerequisites with pip</h3>\n<p>A simple way to install Python packages is using the package manager\n<a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a>.  To check if you have\npip installed on your system, type <tt>pip</tt> at the command line,</p>\n<pre>pip\n</pre>\n<p>If this produces usage instructions then congratulations, you have pip\ninstalled.  If not, instructions for installing pip can be found\n<a href=\"http://www.pip-installer.org/en/latest/installing.html\" rel=\"nofollow\">here</a>.\nTo check if the python packages are installed on your system, attempt\nto import them from the python command prompt,</p>\n<pre>&gt;&gt;&gt; import scipy\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import quantities as pq\n</pre>\n<p>If any of these import commands produce an error message you will need\nto install the proper software before installing Rabacus.\nOnce you have access to pip, you can install any missing prerequisites\nusing the following commands,</p>\n<pre>sudo pip install scipy\nsudo pip install numpy\nsudo pip install quantities\n</pre>\n<p>If you do not have root access on your system you can pass the <tt><span class=\"pre\">--user</span></tt> flag\nwhich will install the packages into a hidden folder called <tt>.local</tt> in\nyour home directory,</p>\n<pre>pip install --user scipy\npip install --user numpy\npip install --user quantities\n</pre>\n</div>\n<div id=\"installing-prerequisites-on-debian-ubuntu\">\n<h3>Installing prerequisites on Debian (Ubuntu)</h3>\n<p>On Debian based systems (such as Ubuntu) you may prefer to install these\nprerequisites using the APT tool,</p>\n<pre>sudo apt-get install python-scipy python-numpy python-quantities\n</pre>\n<p>To increase the speed of execution, much of Rabacus is written in\nFortran 90 and then wrapped using the f2py tool that is part of numpy.  For\nthe installation to be successful, a fortran compiler must be in your\nexecutable path.  If you don\u2019t already have one, I recommend the\ngnu fortran compiler <a href=\"http://gcc.gnu.org/wiki/GFortran\" rel=\"nofollow\">gfortran</a>.\nOn Debian based systems (such as Ubuntu) you can install this\ncompiler using the APT tool,</p>\n<pre>sudo apt-get install gfortran\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>With the prequisites installed on your system, you are ready to\ninstall the Rabacus package itself.</p>\n<div id=\"setting-f90-environment-variable\">\n<h3>Setting <tt>F90</tt>  environment variable</h3>\n<p>Rabacus makes use of OpenMP directives in the Fortran code base and so\nwe have to make sure the code is compiled correctly.  In order to do\nthis, you have to let the build system know what Fortran 90 compiler\nyou are going to be using.  The simplest way to do this is to set the\nenvironment variable <tt>F90</tt> before following the installation\ninstructions below.  Rabacus has been tested with the intel compiler and\nthe gnu gfortran compiler.  For other compilers you will have to\nfollow the <cite>Manual Install</cite> instructions below.</p>\n<p>To use the gfortran compiler, type the following at the command line\n(in Bash)</p>\n<pre>export F90=gfortran\n</pre>\n<p>To use the intel compiler set</p>\n<pre>export F90=ifort\n</pre>\n</div>\n<div id=\"single-command-install\">\n<h3>Single command install</h3>\n<p>If you have made the appropriate sacrifices to the computer gods, you\nshould be able to install an OpenMP enabled version of Rabacus with a\nsingle comand line call to pip,</p>\n<pre>sudo pip install rabacus\n</pre>\n<p>As was the case for the prerequisites, if you do not have root access\non your system you can pass the <tt><span class=\"pre\">--user</span></tt> flag which will install\nRabacus into a hidden folder called <tt>.local</tt> in your home directory,</p>\n<pre>pip install --user rabacus\n</pre>\n<p>If the last two lines printed to the screen are,</p>\n<pre>Successfully installed rabacus\nCleaning up...\n</pre>\n<p>then congratulations you have a working copy of Rabacus. To double\ncheck, begin an ipython session and attempt an import,</p>\n<pre>import rabacus as ra\n</pre>\n<p>Packages installed with pip can be uninstalled in the same way,</p>\n<pre>pip uninstall rabacus\n</pre>\n</div>\n<div id=\"manual-install\">\n<h3>Manual install</h3>\n<p>If the above process fails for any reason we can always download\nRabacus and manually invoke the setup script.  The first step is to\ndownload and untar the Rabacus tar.gz file from the PyPI site\n(<a href=\"https://pypi.python.org/pypi/rabacus\" rel=\"nofollow\">https://pypi.python.org/pypi/rabacus</a>) and change into the main\nRabacus directory,</p>\n<pre>gunzip rabacus-x.x.x.tar.gz\ntar xvf rabacus-x.x.x.tar\ncd rabacus-x.x.x\n</pre>\n<p>Now we have direct access to the <tt>setup.py</tt> file which gives us a\nlot more freedom but it comes at the cost of slightly more complexity.\nFirst it\u2019s a good idea to see which fortran compilers are detected on\nyour machine.  The following command will list all of the fortan\ncompilers found on your system and all the compilers available for\nyour system but not found.</p>\n<pre>f2py -c --help-fcompiler\n</pre>\n<p>For example on my machine I get the following,</p>\n<pre>Fortran compilers found:\n  --fcompiler=gnu95    GNU Fortran 95 compiler (4.8.1-10)\n  --fcompiler=intelem  Intel Fortran Compiler for 64-bit apps (14.0.2.144)\nCompilers available for this platform, but not found:\n  --fcompiler=absoft   Absoft Corp Fortran Compiler\n  --fcompiler=compaq   Compaq Fortran Compiler\n  --fcompiler=g95      G95 Fortran Compiler\n  --fcompiler=gnu      GNU Fortran 77 compiler\n  --fcompiler=intel    Intel Fortran Compiler for 32-bit apps\n  --fcompiler=intele   Intel Fortran Compiler for Itanium apps\n  --fcompiler=lahey    Lahey/Fujitsu Fortran 95 Compiler\n  --fcompiler=nag      NAGWare Fortran 95 Compiler\n  --fcompiler=pathf95  PathScale Fortran Compiler\n  --fcompiler=pg       Portland Group Fortran Compiler\n  --fcompiler=vast     Pacific-Sierra Research Fortran 90 Compiler\n</pre>\n<p>Now we decide which of the fortran compilers to use and which flags to\npass the build command.  Suppose you wanted to use the Intel compiler.\nEdit the <tt>setup.py</tt> file such that the variable <tt>f90_flags</tt> is a\nlist of compile flags and <tt>omp_lib</tt> is a list containing the linking\nflags.  For example,</p>\n<pre>f90_flags = [\"-openmp\", \"-fPIC\", \"-xHost\", \"-O3\", \"-ipo\",\n             \"-funroll-loops\", \"-heap-arrays\", \"-mcmodel=medium\"]\n\nomp_lib = [\"-liomp5\"]\n</pre>\n<p>These variables are already defined near the top of the <tt>setup.py</tt>\nfile and will need to be overwritten.  Once this is done, we give the\nbuild command to the <tt>setup.py</tt> script,</p>\n<pre>python setup.py build --fcompiler=intelem\n</pre>\n<p>After the package is built, give the install command to actually\ninstall it,</p>\n<pre>sudo python setup.py install --record rabacus_install_files.txt\n</pre>\n<p>The last part of the command is to allow for easy uninstall.  This\nprocess just involves deleting all installed files which will be\nlisted in the file <tt>rabacus_install_files.txt</tt>. This can be\naccomplished using the following command,</p>\n<pre>cat rabacus_install_files.txt | xargs sudo rm -rf\n</pre>\n<p>The install can also be done locally for those without root permission\non their system by passing the <tt><span class=\"pre\">--user</span></tt> flag to the install command,</p>\n<pre>python setup.py install --user --record rabacus_install_files.txt\n</pre>\n<p>Note that if you previously did an install of Rabacus that required\nthe <tt>sudo</tt> command you will likely need to delete the\n<tt><span class=\"pre\">rabacus.egg-info</span></tt> directory and some directories inside the\n<tt>build</tt> directory as they will need to be modified but will be owned\nby <tt>root</tt>.  If you are only doing a local install then this shoudn\u2019t\nbe necessary.  This procedure should work for any fortran compiler\nsupported by f2py (i.e. any compiler in the list returned when using\nthe <tt><span class=\"pre\">--help-fcompiler</span></tt> flag.</p>\n</div>\n<div id=\"testing-install\">\n<h3>Testing install</h3>\n<p>Detailed examples of using rabacus are available by following the link\nto the users guide below.  However, we present a short example with the\nexpected output below as a way to quickly test that a new installation\nhas basic functionality.  We first import rabacus and then create an\nobject that gives access to the meta galactic radiation background\ndescribed in\n<a href=\"http://adsabs.harvard.edu/abs/2012ApJ...746..125H\" rel=\"nofollow\">Haardt &amp; Madau 2012</a>.  Finally, we\nask for the photo-heating rate of He I at a redshift of 3.0.</p>\n<pre>import rabacus as ra\nhm12 = ra.HM12_Photorates_Table()\nz = 3.0\nprint hm12.He1h(z)\n</pre>\n<p>The expected output from a working rabacus installation is given\nbelow.  Note that there may be differences in the last significant\nfigure due to different processor architectures.</p>\n<pre>3.39163517433e-12 eV/s\n</pre>\n</div>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Rabacus was written by Gabriel Altay and any questions can be directed\nto <a href=\"mailto:gabriel.altay%40gmail.com\">gabriel<span>.</span>altay<span>@</span>gmail<span>.</span>com</a></p>\n</div>\n<div id=\"project-urls\">\n<h2>Project URLs</h2>\n<ul>\n<li>PyPI (<a href=\"https://pypi.python.org/pypi/rabacus\" rel=\"nofollow\">https://pypi.python.org/pypi/rabacus</a>)</li>\n<li>documentation (<a href=\"http://pythonhosted.org//rabacus\" rel=\"nofollow\">http://pythonhosted.org//rabacus</a>)</li>\n<li>version control (<a href=\"https://github.com/galtay/rabacus\" rel=\"nofollow\">https://github.com/galtay/rabacus</a>)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2026136, "releases": {"0.9.0": [], "0.9.1": [], "0.9.2": [], "0.9.5": [{"comment_text": "", "digests": {"md5": "d9a0e1e8b726ceafadd4f30142960a3b", "sha256": "5936f4770610730a5e97ac9de93afb7a664903fd42b0ad408f454b19c254846c"}, "downloads": -1, "filename": "rabacus-0.9.5.tar.gz", "has_sig": false, "md5_digest": "d9a0e1e8b726ceafadd4f30142960a3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 403453, "upload_time": "2016-03-25T01:10:45", "upload_time_iso_8601": "2016-03-25T01:10:45.262231Z", "url": "https://files.pythonhosted.org/packages/e4/e1/e03cd0211d702596b3b98046d6db8dae5b9f940cdac8b8758556a713558d/rabacus-0.9.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d9a0e1e8b726ceafadd4f30142960a3b", "sha256": "5936f4770610730a5e97ac9de93afb7a664903fd42b0ad408f454b19c254846c"}, "downloads": -1, "filename": "rabacus-0.9.5.tar.gz", "has_sig": false, "md5_digest": "d9a0e1e8b726ceafadd4f30142960a3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 403453, "upload_time": "2016-03-25T01:10:45", "upload_time_iso_8601": "2016-03-25T01:10:45.262231Z", "url": "https://files.pythonhosted.org/packages/e4/e1/e03cd0211d702596b3b98046d6db8dae5b9f940cdac8b8758556a713558d/rabacus-0.9.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:09 2020"}