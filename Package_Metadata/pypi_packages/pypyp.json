{"info": {"author": "Shantanu Jain", "author_email": "hauntsaninja@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Utilities"], "description": "# pyp\n\n[![Build Status](https://travis-ci.org/hauntsaninja/pyp.svg?branch=master)](https://travis-ci.org/hauntsaninja/pyp)\n[![Coverage Status](https://coveralls.io/repos/github/hauntsaninja/pyp/badge.svg?branch=master)](https://coveralls.io/github/hauntsaninja/pyp?branch=master)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\nEasily run Python at the shell! Magical, but never mysterious.\n\n## Installation\n\nRun `pip install pypyp` <sup>(note the extra \"yp\"!)</sup>\n\n`pyp` requires Python 3.6 or above.\n\n## Examples\n\nThis section will walk you through the details of using `pyp`, and hopefully replace your needs\nfor many common shell utilities. For a cheatsheet / tldr, run `pyp --help`.\n\n`pyp` can easily be used to apply Python code to each line in the input. Just use one of the magic\nvariables `x`, `l`, `s` or `line` to refer to the current line.\n\n```\n# pyp like cut\nls | pyp 'x[:3]'\nps x | pyp 'line.split()[4]'\n```\n\n`pyp` can be used to easily apply Python code to the entire input as well. Use the magic variable\n`lines` for a list of rstripped lines or `stdin` for `sys.stdin`.\n\n```\n# pyp like wc -c\ncat /usr/share/dict/words | pyp 'len(stdin.read())'\n\n# pyp like awk\nseq 1 5 | pyp 'sum(map(int, lines))'\n```\n\n`pyp` will automatically import modules you use.\n\n```\n# pyp like sh\necho echo echo | pyp 'subprocess.run(lines[0], shell=True); pass'\n\n# pyp like jq\ncurl -s 'https://api.github.com/repos/hauntsaninja/pyp/commits?per_page=1' | pyp 'json.load(stdin)[0][\"commit\"][\"author\"]'\n\n# pyp like egrep\ncat /usr/share/dict/words | pyp 'x if re.search(\"(p|m)yth\", x) else None'\n```\n\nFor `collections`, `math`, `itertools`, `pathlib.Path`, `pprint.pp`, `pyp` will figure it out even\nif you don't use the qualified name.\n```\n# pyp like bc\npyp 'sqrt(5)'\n\n# pyp like ${x##*.}\nls | pyp 'Path(x).suffix'\n```\n\n`pyp` can give you access to loop indices using the magic variables `i`, `idx` or `index`.\n\n```\n# pyp like line numbers\ncat setup.py | pyp 'f\"{idx+1: >3} {x}\"'\n```\n\nNote so far you haven't had to call `print`! By default, `pyp` will print the last expression in\nyour code \u2014 except if it evaluates to `None`. And you can always explicitly call `print` yourself,\nin which case `pyp` will stay out of your way.\n\n```\n# pyp like grep\ncat /usr/share/dict/words | pyp 'x if \"python\" in x else None'\ncat /usr/share/dict/words | pyp 'if \"python\" in x: print(x); \"this won't print\"'\n```\n\n`pyp` will intelligently attempt to print dicts and iterables in a way that makes it easier to\ncompose with shell tools. Again, explicit printing will stop this magic, but `pyp` makes the\nfunction `pypprint` available if you do want to explicitly opt back in.\n\n```\n# pyp like tail\nls | pyp 'lines[-10:]'\n\n# pyp like sort\nls | pyp 'sorted(lines)'\nls | pyp 'print(f\"Sorting {len(lines)} lines\"); pypprint(sorted(lines))'\n\n# pyp like sort | uniq\nls | pyp 'sorted(set(lines))'\n```\n\n`pyp` lets you run snippets of Python before and after processing input. Note if you run into\ntrouble with semicolons and want a new line, you can just pass another string to `pyp`.\nYou can also always pipe `pyp` to `pyp`!\n\n```\n# pyp like anything!\nps aux | pyp -b 'd = defaultdict(list)' 'user, pid, *_ = x.split()' 'd[user].append(pid)' -a 'del d[\"root\"]' -a 'd'\n```\n\n`pyp` can be magical, but it doesn't have to be mysterious! Use `--explain` or `--script` to get a\nscript equivalent to what `pyp` will run. This can also be a useful starting point for more complex\nscripts.\n```\npyp --explain -b 'd = defaultdict(list)' 'user, pid, *_ = x.split()' 'd[user].append(pid)' -a 'del d[\"root\"]' -a 'd'\n\nfrom collections import defaultdict\nfrom pyp import pypprint\nimport sys\nd = defaultdict(list)\nfor x in sys.stdin:\n    x = x.rstrip('\\n')\n    (user, pid, *_) = x.split()\n    d[user].append(pid)\ndel d['root']\nif d is not None:\n    pypprint(d)\n```\n\n## How it works\n\n`pyp` will statically analyse the input code to detect unused variables. Based on what it finds,\nit will proceed to transform the AST of the input code as needed. We then compile and execute the\nresult, or if using `--explain`, unparse the AST back to source code.\n\n## Related projects\n\n### [Pyed Piper](https://code.google.com/archive/p/pyp/) aka  Python Power at the Prompt\n\n`pyp` takes inspiration (and the command name!) from here.\nHowever, Pyed Piper appears to be unmaintained, Python 2 only, and further away from Python syntax\nthan `pyp` aims to be.\n\n### [Pyped](https://github.com/ksamuel/Pyped)\n\nI discovered Pyped while making this project! It's actually very similar, probably similar enough\nthat I wouldn't have written this had I known. However, Pyped doesn't do the AST introspection\nand manipulation that we do. This means:\n- It's less magical! It relies on you to pass in flags to tell it what to do, when intention can\nbe inferred from the input.\n- It doesn't provide easy automatic printing, or smart printing of iterables and dicts.\n- It hardcodes a list of imports and installs some libraries on your system. This project's\nautomatic import will work for any library you use.\n- It doesn't have anything like `--explain`/`--script`.\n\nHowever,\n- It has some conveniences, like regex splitting of input, that you'd have to do for yourself here.\n- It supports Python 2 and early versions of Python 3.\n- It's been around for much longer.\n\n### [xonsh](https://xon.sh/)\n\n`xonsh` is a shell whose language is a superset of Python; this is more ambitious and pretty\ndifferent from `pyp`. `pyp` is easier to use for the one-liner piping use case, but if you need\nmore Python in your shell, check out `xonsh`.\n\n### [awk](https://www.gnu.org/software/gawk/manual/gawk.html)\n\nIf `awk` works for you, how did you end up here?\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hauntsaninja/pyp", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pypyp", "package_url": "https://pypi.org/project/pypyp/", "platform": "", "project_url": "https://pypi.org/project/pypyp/", "project_urls": {"Homepage": "https://github.com/hauntsaninja/pyp"}, "release_url": "https://pypi.org/project/pypyp/0.2/", "requires_dist": ["astunparse ; python_version < \"3.9\""], "requires_python": ">=3.6", "summary": "Easily run Python at the shell! Magical, but never mysterious.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyp</h1>\n<p><a href=\"https://travis-ci.org/hauntsaninja/pyp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c52d02168c59254b7d24bbce7486c9799ed483fe/68747470733a2f2f7472617669732d63692e6f72672f6861756e7473616e696e6a612f7079702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/hauntsaninja/pyp?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d74488f48b59e2afb40eb3e3535583996c18b5ef/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6861756e7473616e696e6a612f7079702f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://mypy-lang.org/\" rel=\"nofollow\"><img alt=\"Checked with mypy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0db8f5dcbf5f340f278004d5db3d16b4cdf33ba/687474703a2f2f7777772e6d7970792d6c616e672e6f72672f7374617469632f6d7970795f62616467652e737667\"></a></p>\n<p>Easily run Python at the shell! Magical, but never mysterious.</p>\n<h2>Installation</h2>\n<p>Run <code>pip install pypyp</code> <sup>(note the extra \"yp\"!)</sup></p>\n<p><code>pyp</code> requires Python 3.6 or above.</p>\n<h2>Examples</h2>\n<p>This section will walk you through the details of using <code>pyp</code>, and hopefully replace your needs\nfor many common shell utilities. For a cheatsheet / tldr, run <code>pyp --help</code>.</p>\n<p><code>pyp</code> can easily be used to apply Python code to each line in the input. Just use one of the magic\nvariables <code>x</code>, <code>l</code>, <code>s</code> or <code>line</code> to refer to the current line.</p>\n<pre><code># pyp like cut\nls | pyp 'x[:3]'\nps x | pyp 'line.split()[4]'\n</code></pre>\n<p><code>pyp</code> can be used to easily apply Python code to the entire input as well. Use the magic variable\n<code>lines</code> for a list of rstripped lines or <code>stdin</code> for <code>sys.stdin</code>.</p>\n<pre><code># pyp like wc -c\ncat /usr/share/dict/words | pyp 'len(stdin.read())'\n\n# pyp like awk\nseq 1 5 | pyp 'sum(map(int, lines))'\n</code></pre>\n<p><code>pyp</code> will automatically import modules you use.</p>\n<pre><code># pyp like sh\necho echo echo | pyp 'subprocess.run(lines[0], shell=True); pass'\n\n# pyp like jq\ncurl -s 'https://api.github.com/repos/hauntsaninja/pyp/commits?per_page=1' | pyp 'json.load(stdin)[0][\"commit\"][\"author\"]'\n\n# pyp like egrep\ncat /usr/share/dict/words | pyp 'x if re.search(\"(p|m)yth\", x) else None'\n</code></pre>\n<p>For <code>collections</code>, <code>math</code>, <code>itertools</code>, <code>pathlib.Path</code>, <code>pprint.pp</code>, <code>pyp</code> will figure it out even\nif you don't use the qualified name.</p>\n<pre><code># pyp like bc\npyp 'sqrt(5)'\n\n# pyp like ${x##*.}\nls | pyp 'Path(x).suffix'\n</code></pre>\n<p><code>pyp</code> can give you access to loop indices using the magic variables <code>i</code>, <code>idx</code> or <code>index</code>.</p>\n<pre><code># pyp like line numbers\ncat setup.py | pyp 'f\"{idx+1: &gt;3} {x}\"'\n</code></pre>\n<p>Note so far you haven't had to call <code>print</code>! By default, <code>pyp</code> will print the last expression in\nyour code \u2014 except if it evaluates to <code>None</code>. And you can always explicitly call <code>print</code> yourself,\nin which case <code>pyp</code> will stay out of your way.</p>\n<pre><code># pyp like grep\ncat /usr/share/dict/words | pyp 'x if \"python\" in x else None'\ncat /usr/share/dict/words | pyp 'if \"python\" in x: print(x); \"this won't print\"'\n</code></pre>\n<p><code>pyp</code> will intelligently attempt to print dicts and iterables in a way that makes it easier to\ncompose with shell tools. Again, explicit printing will stop this magic, but <code>pyp</code> makes the\nfunction <code>pypprint</code> available if you do want to explicitly opt back in.</p>\n<pre><code># pyp like tail\nls | pyp 'lines[-10:]'\n\n# pyp like sort\nls | pyp 'sorted(lines)'\nls | pyp 'print(f\"Sorting {len(lines)} lines\"); pypprint(sorted(lines))'\n\n# pyp like sort | uniq\nls | pyp 'sorted(set(lines))'\n</code></pre>\n<p><code>pyp</code> lets you run snippets of Python before and after processing input. Note if you run into\ntrouble with semicolons and want a new line, you can just pass another string to <code>pyp</code>.\nYou can also always pipe <code>pyp</code> to <code>pyp</code>!</p>\n<pre><code># pyp like anything!\nps aux | pyp -b 'd = defaultdict(list)' 'user, pid, *_ = x.split()' 'd[user].append(pid)' -a 'del d[\"root\"]' -a 'd'\n</code></pre>\n<p><code>pyp</code> can be magical, but it doesn't have to be mysterious! Use <code>--explain</code> or <code>--script</code> to get a\nscript equivalent to what <code>pyp</code> will run. This can also be a useful starting point for more complex\nscripts.</p>\n<pre><code>pyp --explain -b 'd = defaultdict(list)' 'user, pid, *_ = x.split()' 'd[user].append(pid)' -a 'del d[\"root\"]' -a 'd'\n\nfrom collections import defaultdict\nfrom pyp import pypprint\nimport sys\nd = defaultdict(list)\nfor x in sys.stdin:\n    x = x.rstrip('\\n')\n    (user, pid, *_) = x.split()\n    d[user].append(pid)\ndel d['root']\nif d is not None:\n    pypprint(d)\n</code></pre>\n<h2>How it works</h2>\n<p><code>pyp</code> will statically analyse the input code to detect unused variables. Based on what it finds,\nit will proceed to transform the AST of the input code as needed. We then compile and execute the\nresult, or if using <code>--explain</code>, unparse the AST back to source code.</p>\n<h2>Related projects</h2>\n<h3><a href=\"https://code.google.com/archive/p/pyp/\" rel=\"nofollow\">Pyed Piper</a> aka  Python Power at the Prompt</h3>\n<p><code>pyp</code> takes inspiration (and the command name!) from here.\nHowever, Pyed Piper appears to be unmaintained, Python 2 only, and further away from Python syntax\nthan <code>pyp</code> aims to be.</p>\n<h3><a href=\"https://github.com/ksamuel/Pyped\" rel=\"nofollow\">Pyped</a></h3>\n<p>I discovered Pyped while making this project! It's actually very similar, probably similar enough\nthat I wouldn't have written this had I known. However, Pyped doesn't do the AST introspection\nand manipulation that we do. This means:</p>\n<ul>\n<li>It's less magical! It relies on you to pass in flags to tell it what to do, when intention can\nbe inferred from the input.</li>\n<li>It doesn't provide easy automatic printing, or smart printing of iterables and dicts.</li>\n<li>It hardcodes a list of imports and installs some libraries on your system. This project's\nautomatic import will work for any library you use.</li>\n<li>It doesn't have anything like <code>--explain</code>/<code>--script</code>.</li>\n</ul>\n<p>However,</p>\n<ul>\n<li>It has some conveniences, like regex splitting of input, that you'd have to do for yourself here.</li>\n<li>It supports Python 2 and early versions of Python 3.</li>\n<li>It's been around for much longer.</li>\n</ul>\n<h3><a href=\"https://xon.sh/\" rel=\"nofollow\">xonsh</a></h3>\n<p><code>xonsh</code> is a shell whose language is a superset of Python; this is more ambitious and pretty\ndifferent from <code>pyp</code>. <code>pyp</code> is easier to use for the one-liner piping use case, but if you need\nmore Python in your shell, check out <code>xonsh</code>.</p>\n<h3><a href=\"https://www.gnu.org/software/gawk/manual/gawk.html\" rel=\"nofollow\">awk</a></h3>\n<p>If <code>awk</code> works for you, how did you end up here?</p>\n\n          </div>"}, "last_serial": 7193539, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "25aa7e7280b9495f6df2802c05f44d26", "sha256": "2291e1ca647727e44e2b5d46e72f2eeebd803353262e57df45f6115b350b58ad"}, "downloads": -1, "filename": "pypyp-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "25aa7e7280b9495f6df2802c05f44d26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8910, "upload_time": "2020-04-14T21:57:23", "upload_time_iso_8601": "2020-04-14T21:57:23.694999Z", "url": "https://files.pythonhosted.org/packages/f1/52/e602ac67e6c6b206b644cac1cfc4416f3d42ab582696164adb92486353dd/pypyp-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6e1d5463d163bb5826cb6336bf52f24", "sha256": "87d59e66cd17dcf1ca7657b2d03d20ac84a3bff6aada906dc7e94dc89cde1fcf"}, "downloads": -1, "filename": "pypyp-0.1.tar.gz", "has_sig": false, "md5_digest": "f6e1d5463d163bb5826cb6336bf52f24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8097, "upload_time": "2020-04-14T21:57:25", "upload_time_iso_8601": "2020-04-14T21:57:25.535183Z", "url": "https://files.pythonhosted.org/packages/d7/46/01908cdf51af4fb9fa2504999aebf6fd9d69d68a9b77461d6e486dff4251/pypyp-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "eb533ed17783d098995fe8cf9189349c", "sha256": "c62469c87fc60f6f0b2edad92b3a10082e01131b5b01d7e5b66a03741a1854d8"}, "downloads": -1, "filename": "pypyp-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "eb533ed17783d098995fe8cf9189349c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8929, "upload_time": "2020-04-14T22:05:09", "upload_time_iso_8601": "2020-04-14T22:05:09.821460Z", "url": "https://files.pythonhosted.org/packages/41/1e/a11277e4931bffa46588202860b4549fc41fcd2fca417511b58483166084/pypyp-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18887b778cff6b7f881a49ca34ac5b27", "sha256": "7579fd3627b1c6ae5afecc2f76ae19377474c6e57183843fbfd39e02b4b031e9"}, "downloads": -1, "filename": "pypyp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "18887b778cff6b7f881a49ca34ac5b27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8088, "upload_time": "2020-04-14T22:05:10", "upload_time_iso_8601": "2020-04-14T22:05:10.973935Z", "url": "https://files.pythonhosted.org/packages/e0/30/5a2f5f19ae093eb9756baf60826814f8e7e031e9804896b0b32412315a03/pypyp-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3419b9bd48e390d2c35c256902b8cdc2", "sha256": "837e3a9e7c679b2086ca306a79f24440b9dd48bb4e9f30a45ab3f6f5bd3deb29"}, "downloads": -1, "filename": "pypyp-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3419b9bd48e390d2c35c256902b8cdc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9384, "upload_time": "2020-05-08T01:41:11", "upload_time_iso_8601": "2020-05-08T01:41:11.617722Z", "url": "https://files.pythonhosted.org/packages/1e/0f/d1e6c20dc2a41d07ba6c5430aadab67b4b1ae10ee500bb58a11e06b40642/pypyp-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e1649b16116d237adfeb9f84ce563bf", "sha256": "cbf7e755bb41f7e1e9750cdab4ba388740fcf59d652e359cd99ba13f378411c3"}, "downloads": -1, "filename": "pypyp-0.2.tar.gz", "has_sig": false, "md5_digest": "9e1649b16116d237adfeb9f84ce563bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8585, "upload_time": "2020-05-08T01:41:14", "upload_time_iso_8601": "2020-05-08T01:41:14.549126Z", "url": "https://files.pythonhosted.org/packages/5c/2c/29d67f8f68ab5fc45ffd5955ae224cf261cab6d672f92f2cf0d4a70c5b75/pypyp-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3419b9bd48e390d2c35c256902b8cdc2", "sha256": "837e3a9e7c679b2086ca306a79f24440b9dd48bb4e9f30a45ab3f6f5bd3deb29"}, "downloads": -1, "filename": "pypyp-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3419b9bd48e390d2c35c256902b8cdc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9384, "upload_time": "2020-05-08T01:41:11", "upload_time_iso_8601": "2020-05-08T01:41:11.617722Z", "url": "https://files.pythonhosted.org/packages/1e/0f/d1e6c20dc2a41d07ba6c5430aadab67b4b1ae10ee500bb58a11e06b40642/pypyp-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e1649b16116d237adfeb9f84ce563bf", "sha256": "cbf7e755bb41f7e1e9750cdab4ba388740fcf59d652e359cd99ba13f378411c3"}, "downloads": -1, "filename": "pypyp-0.2.tar.gz", "has_sig": false, "md5_digest": "9e1649b16116d237adfeb9f84ce563bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8585, "upload_time": "2020-05-08T01:41:14", "upload_time_iso_8601": "2020-05-08T01:41:14.549126Z", "url": "https://files.pythonhosted.org/packages/5c/2c/29d67f8f68ab5fc45ffd5955ae224cf261cab6d672f92f2cf0d4a70c5b75/pypyp-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:56 2020"}