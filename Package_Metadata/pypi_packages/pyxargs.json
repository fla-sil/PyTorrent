{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: System :: Shells", "Topic :: System :: System Shells", "Topic :: Terminals", "Topic :: Utilities"], "description": "# pyxargs\n## Purpose\nThis began as a solution to the [encoding problem](https://en.wikipedia.org/wiki/Xargs#Encoding_problem) with [xargs](https://www.gnu.org/software/findutils/manual/html_node/find_html/xargs-options.html) [(additional reference)](http://man7.org/linux/man-pages/man1/xargs.1.html). It eventually grew as I found being able to quickly mix python code with command lines and files to be useful.\n\nMost of xargs functionality has been implemented, however the original focus of designing around the file input-mode (not to be confused with arg-file), both for its ease of use and fixing the encoding problem, remains. The goal is not to replace xargs for every use case but to target slightly different and more modern ones, therefore not all features are included, such as options for max-lines or max-args. This keeps things simple (both the user interface and codebase) while allowing for new features, no knowledge of xargs is required and you may even find pyxargs easier to use.\n\nGoing forward development will slow with no major features or changes planned, with the main focus being on having a clear and stable command line interface and documentation. However bugs are still planned to be fixed as soon as possible whenever they are discovered and any new & interesting pythonic features may be considered depending on usefulness and scope.\n## Command Line Interface\n```\nusage: pyxargs [options] command [initial-arguments ...]\n       pyxargs [options] -s \"command [initial-arguments ...]\" ...\n       pyxargs -h | --help | --examples | --version\n\nBuild and execute command lines or python code from standard input or file\npaths, a mostly complete implementation of xargs in python with some added\nfeatures. The default input mode (file) builds commands using filenames only\nand executes them in their respective directories, this is useful when dealing\nwith file paths containing multiple character encodings.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --examples            print example usage\n  -s                    support for multiple commands to be run sequentially\n                        by encapsulating in quotes (each its own string)\n  -b base-directory     default: os.getcwd()\n  -m input-mode         options are:\n                        file    = build commands from filenames and execute in\n                                  each subdirectory respectively (default)\n                        path    = build commands from file paths relative to\n                                  the base directory and execute in the base\n                                  directory\n                        abspath = build commands from file paths relative to\n                                  root and execute in the base directory\n                        dir     = build commands from directory names instead\n                                  of filenames\n                        stdin   = build commands from standard input and\n                                  execute in the base directory\n  --symlinks            follow symlinks when scanning directories\n  -0, --null            input items are terminated by a null character instead\n                        of by whitespace, sets input-mode=stdin\n  -d delim              input items are terminated by the specified delimiter\n                        instead of whitespace and trailing whitespace is\n                        removed, sets input-mode=stdin\n  -a arg-file           read input items from arg-file instead of standard\n                        input to build commands, sets input-mode=stdin\n  -E eof-str            ignores any input after eof-str, sets input-mode=stdin\n  -c max-chars          omits any command line exceeding max-chars, no limit\n                        by default\n  -I replace-str        replace occurrences of replace-str in the command(s)\n                        with input, default: {}\n  --resub pattern repl replace-str\n                        replace occurrences of replace-str in the command(s)\n                        with re.sub(patten, repl, input)\n  -r regex              only build commands from inputs matching regex\n  -o                    omit inputs matching regex instead\n  -f                    only match regex against filenames, ignoring full\n                        paths (if available)\n  --py                  executes command(s) as python code using exec()\n  --pyev                evaluates command(s) as python expression(s) using\n                        eval()\n  --import library [library ...]\n                        executes 'import <library>' for each library\n  --importstar library [library ...]\n                        executes 'from <library> import *' for each library\n  --pre \"code\" [\"code\" ...]\n                        runs exec(code) for each line of code before execution\n  --post \"code\" [\"code\" ...]\n                        runs exec(code) for each line of code after execution\n  -P max-procs          number of processes, default: 1\n  -p, --interactive     prompt the user before executing each command, only\n                        proceeds if response starts with 'y' or 'Y'\n  -n, --norun           prints commands without executing them\n  -v, --verbose         prints commands before executing them\n  -w, --csv             writes results to pyxargs-<yymmdd-hhmmss>.csv in\n                        os.getcwd()\n  --version             print version number\n```\n## Examples\n```\ncomparing usage with find & xargs\n    find ./ -name \"*\" -type f -print0 | xargs -0 -I {} echo {}\n    find ./ -name \"*\" -type f -print0 | pyxargs -0 -I {} echo {}\n    find ./ -name \"*\" -type f -print0 | pyxargs -0 echo {}\n    pyxargs -m path echo ./{}\n    pyxargs -m path --py \"print('./{}')\"\nnote: pyxargs requires a replace-str ({} in this example) to insert inputs,\ninputs are not appended in the absence of a replace-str like in xargs,\nthis also implies the equivalent of xargs --max-lines=1\n\nuse -- to separate options with multiple optional arguments from the command\n    pyxargs --pre \"print('spam')\" \"print('spam')\" -- echo {}\nor separate with another option (they are parsed with argparse)\n    pyxargs --pre \"print('this is fine too')\" -P 1 echo {}\nthe command takes all remaining arguments, so this will not work\n    pyxargs echo {} --pre \"print('this statement will be echoed')\"\nhowever pipes and redirects still work\n    pyxargs echo {} > spam.txt\n\nmultiple commands can be used as such\n    pyxargs -s \"echo No 1. {}\" \"echo And now... No 2. {}\"\n\nregular expressions can be used to filter and modify inputs\n    pyxargs -r \\.py --resub \\.py .txt {} echo {}\nthe original inputs can easily be used with the subsituted versions\n    pyxargs -r \\.py --resub \\.py .txt new echo {} new\n\nand now for something completely different, python code\n    pyxargs --pre \"n=0\" --post \"print(n,'files')\" --py n+=1\na best effort is made to avoid side effects by executing in its own namespace\n```\n## Links\n- https://github.com/elesiuta/pyxargs\n- https://pypi.org/project/pyxargs/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/elesiuta/pyxargs", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyxargs", "package_url": "https://pypi.org/project/pyxargs/", "platform": "", "project_url": "https://pypi.org/project/pyxargs/", "project_urls": {"Homepage": "https://github.com/elesiuta/pyxargs"}, "release_url": "https://pypi.org/project/pyxargs/1.2.8/", "requires_dist": null, "requires_python": "", "summary": "A mostly complete implementation of xargs in python with some added features", "version": "1.2.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyxargs</h1>\n<h2>Purpose</h2>\n<p>This began as a solution to the <a href=\"https://en.wikipedia.org/wiki/Xargs#Encoding_problem\" rel=\"nofollow\">encoding problem</a> with <a href=\"https://www.gnu.org/software/findutils/manual/html_node/find_html/xargs-options.html\" rel=\"nofollow\">xargs</a> <a href=\"http://man7.org/linux/man-pages/man1/xargs.1.html\" rel=\"nofollow\">(additional reference)</a>. It eventually grew as I found being able to quickly mix python code with command lines and files to be useful.</p>\n<p>Most of xargs functionality has been implemented, however the original focus of designing around the file input-mode (not to be confused with arg-file), both for its ease of use and fixing the encoding problem, remains. The goal is not to replace xargs for every use case but to target slightly different and more modern ones, therefore not all features are included, such as options for max-lines or max-args. This keeps things simple (both the user interface and codebase) while allowing for new features, no knowledge of xargs is required and you may even find pyxargs easier to use.</p>\n<p>Going forward development will slow with no major features or changes planned, with the main focus being on having a clear and stable command line interface and documentation. However bugs are still planned to be fixed as soon as possible whenever they are discovered and any new &amp; interesting pythonic features may be considered depending on usefulness and scope.</p>\n<h2>Command Line Interface</h2>\n<pre><code>usage: pyxargs [options] command [initial-arguments ...]\n       pyxargs [options] -s \"command [initial-arguments ...]\" ...\n       pyxargs -h | --help | --examples | --version\n\nBuild and execute command lines or python code from standard input or file\npaths, a mostly complete implementation of xargs in python with some added\nfeatures. The default input mode (file) builds commands using filenames only\nand executes them in their respective directories, this is useful when dealing\nwith file paths containing multiple character encodings.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --examples            print example usage\n  -s                    support for multiple commands to be run sequentially\n                        by encapsulating in quotes (each its own string)\n  -b base-directory     default: os.getcwd()\n  -m input-mode         options are:\n                        file    = build commands from filenames and execute in\n                                  each subdirectory respectively (default)\n                        path    = build commands from file paths relative to\n                                  the base directory and execute in the base\n                                  directory\n                        abspath = build commands from file paths relative to\n                                  root and execute in the base directory\n                        dir     = build commands from directory names instead\n                                  of filenames\n                        stdin   = build commands from standard input and\n                                  execute in the base directory\n  --symlinks            follow symlinks when scanning directories\n  -0, --null            input items are terminated by a null character instead\n                        of by whitespace, sets input-mode=stdin\n  -d delim              input items are terminated by the specified delimiter\n                        instead of whitespace and trailing whitespace is\n                        removed, sets input-mode=stdin\n  -a arg-file           read input items from arg-file instead of standard\n                        input to build commands, sets input-mode=stdin\n  -E eof-str            ignores any input after eof-str, sets input-mode=stdin\n  -c max-chars          omits any command line exceeding max-chars, no limit\n                        by default\n  -I replace-str        replace occurrences of replace-str in the command(s)\n                        with input, default: {}\n  --resub pattern repl replace-str\n                        replace occurrences of replace-str in the command(s)\n                        with re.sub(patten, repl, input)\n  -r regex              only build commands from inputs matching regex\n  -o                    omit inputs matching regex instead\n  -f                    only match regex against filenames, ignoring full\n                        paths (if available)\n  --py                  executes command(s) as python code using exec()\n  --pyev                evaluates command(s) as python expression(s) using\n                        eval()\n  --import library [library ...]\n                        executes 'import &lt;library&gt;' for each library\n  --importstar library [library ...]\n                        executes 'from &lt;library&gt; import *' for each library\n  --pre \"code\" [\"code\" ...]\n                        runs exec(code) for each line of code before execution\n  --post \"code\" [\"code\" ...]\n                        runs exec(code) for each line of code after execution\n  -P max-procs          number of processes, default: 1\n  -p, --interactive     prompt the user before executing each command, only\n                        proceeds if response starts with 'y' or 'Y'\n  -n, --norun           prints commands without executing them\n  -v, --verbose         prints commands before executing them\n  -w, --csv             writes results to pyxargs-&lt;yymmdd-hhmmss&gt;.csv in\n                        os.getcwd()\n  --version             print version number\n</code></pre>\n<h2>Examples</h2>\n<pre><code>comparing usage with find &amp; xargs\n    find ./ -name \"*\" -type f -print0 | xargs -0 -I {} echo {}\n    find ./ -name \"*\" -type f -print0 | pyxargs -0 -I {} echo {}\n    find ./ -name \"*\" -type f -print0 | pyxargs -0 echo {}\n    pyxargs -m path echo ./{}\n    pyxargs -m path --py \"print('./{}')\"\nnote: pyxargs requires a replace-str ({} in this example) to insert inputs,\ninputs are not appended in the absence of a replace-str like in xargs,\nthis also implies the equivalent of xargs --max-lines=1\n\nuse -- to separate options with multiple optional arguments from the command\n    pyxargs --pre \"print('spam')\" \"print('spam')\" -- echo {}\nor separate with another option (they are parsed with argparse)\n    pyxargs --pre \"print('this is fine too')\" -P 1 echo {}\nthe command takes all remaining arguments, so this will not work\n    pyxargs echo {} --pre \"print('this statement will be echoed')\"\nhowever pipes and redirects still work\n    pyxargs echo {} &gt; spam.txt\n\nmultiple commands can be used as such\n    pyxargs -s \"echo No 1. {}\" \"echo And now... No 2. {}\"\n\nregular expressions can be used to filter and modify inputs\n    pyxargs -r \\.py --resub \\.py .txt {} echo {}\nthe original inputs can easily be used with the subsituted versions\n    pyxargs -r \\.py --resub \\.py .txt new echo {} new\n\nand now for something completely different, python code\n    pyxargs --pre \"n=0\" --post \"print(n,'files')\" --py n+=1\na best effort is made to avoid side effects by executing in its own namespace\n</code></pre>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://github.com/elesiuta/pyxargs\" rel=\"nofollow\">https://github.com/elesiuta/pyxargs</a></li>\n<li><a href=\"https://pypi.org/project/pyxargs/\" rel=\"nofollow\">https://pypi.org/project/pyxargs/</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6556814, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "ef7e7de8c2ada6ab976830543fbaab8f", "sha256": "fd3af7803a61c8e27924f104120871b9b8423b7a03c8ede7ab3e03bec87be323"}, "downloads": -1, "filename": "pyxargs-0.10.0.tar.gz", "has_sig": false, "md5_digest": "ef7e7de8c2ada6ab976830543fbaab8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5242, "upload_time": "2019-07-23T18:31:15", "upload_time_iso_8601": "2019-07-23T18:31:15.334334Z", "url": "https://files.pythonhosted.org/packages/51/89/140dc425104010da0e2366b4a3ba908b7c2cc46ba75b8795aa7bb32ba164/pyxargs-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "4697d5c4cd8db320dec1d400ea3c7c22", "sha256": "4545fb0cd23e4484baf53f9227bfa5212d2976cff3f19cf195b0225208036328"}, "downloads": -1, "filename": "pyxargs-0.11.0.tar.gz", "has_sig": false, "md5_digest": "4697d5c4cd8db320dec1d400ea3c7c22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5314, "upload_time": "2019-07-24T05:01:58", "upload_time_iso_8601": "2019-07-24T05:01:58.695706Z", "url": "https://files.pythonhosted.org/packages/c4/11/ec2253ffe790ba0752dcd048bac8e6f76f8f948333b439047aede720ab34/pyxargs-0.11.0.tar.gz", "yanked": false}], "0.11.1": [{"comment_text": "", "digests": {"md5": "93c1d88e24a3bda49c3f8570af4a28fe", "sha256": "bf66e5d8a00fef3315087ed885eee4643cd48f1a756daeb2b59223e72c62b19a"}, "downloads": -1, "filename": "pyxargs-0.11.1.tar.gz", "has_sig": false, "md5_digest": "93c1d88e24a3bda49c3f8570af4a28fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5417, "upload_time": "2019-07-26T21:47:05", "upload_time_iso_8601": "2019-07-26T21:47:05.360447Z", "url": "https://files.pythonhosted.org/packages/c2/78/05c79b55c494e0553927b61ba5b58292c89bf57394d4afb8bc2becbbb901/pyxargs-0.11.1.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "cf58e9944eccea4f6933b0df18468a25", "sha256": "4ae946847501df5a2f6eddb31f684406c76555112ac6e36241eaa5e3fa4286b8"}, "downloads": -1, "filename": "pyxargs-0.9.1.tar.gz", "has_sig": false, "md5_digest": "cf58e9944eccea4f6933b0df18468a25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5068, "upload_time": "2019-07-23T00:54:47", "upload_time_iso_8601": "2019-07-23T00:54:47.661284Z", "url": "https://files.pythonhosted.org/packages/c9/14/7ff00bcd47bc2850531aa7a422a2269ee4337ed066cb04ba77fff71753b3/pyxargs-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "5b8f61143eb5f926419e2fb9dc983a6c", "sha256": "c49b873aab6c90be7c67ef65882a0e7323b607a2d9740051d4c7504deaf2030b"}, "downloads": -1, "filename": "pyxargs-0.9.2.tar.gz", "has_sig": false, "md5_digest": "5b8f61143eb5f926419e2fb9dc983a6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5073, "upload_time": "2019-07-23T01:14:21", "upload_time_iso_8601": "2019-07-23T01:14:21.978979Z", "url": "https://files.pythonhosted.org/packages/19/76/5b00d95c2963f29fd7377a1c25283ddbc8b5657982e7901398899a381fb7/pyxargs-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "3ee5e92d107048c5b42e63ab4b861954", "sha256": "b2392b4677139881e960ef119752640c234155ca20a6c692042a72dee0b5c5bb"}, "downloads": -1, "filename": "pyxargs-0.9.3.tar.gz", "has_sig": false, "md5_digest": "3ee5e92d107048c5b42e63ab4b861954", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5085, "upload_time": "2019-07-23T01:41:07", "upload_time_iso_8601": "2019-07-23T01:41:07.484352Z", "url": "https://files.pythonhosted.org/packages/3c/58/6a97dd942cac3aaf83eb4c105ba5c981e9cb566fde2ceed351e5924d016b/pyxargs-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "24224a1fbc7c6cccc0f3a99827fa48fc", "sha256": "cbffdac7c1fb63526b8fdd30a392b1b5ff6dcd9b2eec9e05a070bcb55a1bd476"}, "downloads": -1, "filename": "pyxargs-0.9.4.tar.gz", "has_sig": false, "md5_digest": "24224a1fbc7c6cccc0f3a99827fa48fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5086, "upload_time": "2019-07-23T13:56:34", "upload_time_iso_8601": "2019-07-23T13:56:34.852437Z", "url": "https://files.pythonhosted.org/packages/ef/a8/78500b0d731a207b97f1931022686d0bff0fb8a2cfeea0aad020ff7024e3/pyxargs-0.9.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4340edb9a3de377fa12abafc6070368c", "sha256": "c9fed061305cbdd885269ee7dff415b31c377b5e5748e7d95e7856c42e3e6a74"}, "downloads": -1, "filename": "pyxargs-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4340edb9a3de377fa12abafc6070368c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6166, "upload_time": "2020-01-08T17:00:14", "upload_time_iso_8601": "2020-01-08T17:00:14.058924Z", "url": "https://files.pythonhosted.org/packages/3b/af/bba778437160e73dddca6c0d00dec1a5fa97abe7a35595936f20dcbcd178/pyxargs-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "602615f1faa6b6955284467414cc6f6a", "sha256": "d9be6aa1a96e6031a1e8af6e2e0916e0384a4e08550b5ff1914cf626178230bf"}, "downloads": -1, "filename": "pyxargs-1.0.2.tar.gz", "has_sig": false, "md5_digest": "602615f1faa6b6955284467414cc6f6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6158, "upload_time": "2020-01-08T17:08:42", "upload_time_iso_8601": "2020-01-08T17:08:42.555556Z", "url": "https://files.pythonhosted.org/packages/ed/79/75a86042d1dc8b8d5613e6a49efa7101d015187daa01df08963f0c874170/pyxargs-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "3f7127dca43ec13af52f59e06d000984", "sha256": "36b3a3f52b01aa12f1c1011a0e1e46ac23ba662dc6ef7872b32b6fe8d13d167e"}, "downloads": -1, "filename": "pyxargs-1.0.4.tar.gz", "has_sig": false, "md5_digest": "3f7127dca43ec13af52f59e06d000984", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6152, "upload_time": "2020-01-08T18:16:12", "upload_time_iso_8601": "2020-01-08T18:16:12.791844Z", "url": "https://files.pythonhosted.org/packages/d3/32/5b7f74cae1b707c1aee003f266ca6c4c1aac1b1194e7254fc4da23f9715c/pyxargs-1.0.4.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "b4a58b5c477ff7a1b17bd2fcf169e69d", "sha256": "962ff73f95e929b822b35463b58c5d3b124f23463ec8cecd322dfb607cd852b1"}, "downloads": -1, "filename": "pyxargs-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b4a58b5c477ff7a1b17bd2fcf169e69d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6167, "upload_time": "2020-01-08T18:20:18", "upload_time_iso_8601": "2020-01-08T18:20:18.802375Z", "url": "https://files.pythonhosted.org/packages/64/9a/76d969be24a2e730f2907c4382fcfe984f3900ca6a6eccc465594b18d3b0/pyxargs-1.0.6.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "50bcf2c9e1ea38babbd0bf4ffe05d9ae", "sha256": "1613a76c56554d6788b17fcc4e8898ba6758b96a4330a3d8c710574a450be6aa"}, "downloads": -1, "filename": "pyxargs-1.0.8.tar.gz", "has_sig": false, "md5_digest": "50bcf2c9e1ea38babbd0bf4ffe05d9ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6420, "upload_time": "2020-01-26T05:26:13", "upload_time_iso_8601": "2020-01-26T05:26:13.996074Z", "url": "https://files.pythonhosted.org/packages/c5/26/a545a6a725accdf0ca5bd0d530ae7ad19b270742e573105fcd53137ef063/pyxargs-1.0.8.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8efb6720fc858a5b4a01555d09c3fd1c", "sha256": "d4abb87657496f6ce6ba20ef5d68ecd408ae73c3850af966cf3ae3f5fd078c38"}, "downloads": -1, "filename": "pyxargs-1.1.0.tar.gz", "has_sig": false, "md5_digest": "8efb6720fc858a5b4a01555d09c3fd1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6865, "upload_time": "2020-01-27T01:32:03", "upload_time_iso_8601": "2020-01-27T01:32:03.041930Z", "url": "https://files.pythonhosted.org/packages/16/14/caeab1581113b116f07be689f96ea9aa81657c95b4f03ca339f1a46c6db6/pyxargs-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "2e7ed64bf718ca722b925c65c78f3cc8", "sha256": "74a9abc650e897cd74432b9202754cb37f1a75fbaef64862e618af1cbbdfecb3"}, "downloads": -1, "filename": "pyxargs-1.2.0.tar.gz", "has_sig": false, "md5_digest": "2e7ed64bf718ca722b925c65c78f3cc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7338, "upload_time": "2020-01-27T18:33:34", "upload_time_iso_8601": "2020-01-27T18:33:34.215970Z", "url": "https://files.pythonhosted.org/packages/4a/85/9c9cd0eafdb1814714837cb2f8602b20f01dfacf1de55f537b23943db61e/pyxargs-1.2.0.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "b1a5a75c9b106da614cb5b2dd6d130c6", "sha256": "2e9c5579806f8554b01cd8b2b3a56aaa56e8db625066b43ad11b1c61fa7e2f23"}, "downloads": -1, "filename": "pyxargs-1.2.2.tar.gz", "has_sig": false, "md5_digest": "b1a5a75c9b106da614cb5b2dd6d130c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8065, "upload_time": "2020-01-28T06:23:10", "upload_time_iso_8601": "2020-01-28T06:23:10.397539Z", "url": "https://files.pythonhosted.org/packages/24/44/1be80da89a46d34057f6bf231a63a7dcba0b960b6af1d0a35c22598a2d95/pyxargs-1.2.2.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "b276b7da197c4a9d3d5a83457cf482b1", "sha256": "1f9fd374c0a31f8ce59531f6bbdcd73a67ae1386f0349678b3442213b1ef8cc3"}, "downloads": -1, "filename": "pyxargs-1.2.4.tar.gz", "has_sig": false, "md5_digest": "b276b7da197c4a9d3d5a83457cf482b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8660, "upload_time": "2020-01-29T18:12:00", "upload_time_iso_8601": "2020-01-29T18:12:00.849912Z", "url": "https://files.pythonhosted.org/packages/de/d6/363bceef6c19a5287e905a3449e56a996fb80797f379c8ef81071e4998e7/pyxargs-1.2.4.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "bb3c7a984d966755399f7841132af683", "sha256": "43f910c7ada9afb2076cebc044d0145a3675a31d253369abac12f81228671d37"}, "downloads": -1, "filename": "pyxargs-1.2.6.tar.gz", "has_sig": false, "md5_digest": "bb3c7a984d966755399f7841132af683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8736, "upload_time": "2020-01-29T21:05:23", "upload_time_iso_8601": "2020-01-29T21:05:23.109108Z", "url": "https://files.pythonhosted.org/packages/7a/26/92e6ec7a2b5e293fda7ad6d5c6de03e609bfdd0452f2215931e49b3bee8b/pyxargs-1.2.6.tar.gz", "yanked": false}], "1.2.8": [{"comment_text": "", "digests": {"md5": "4ed008756985350df985f82440f0da32", "sha256": "05a091c06a6b410b15311b42343d631b566fdf880a060924fe6141dfec8039ed"}, "downloads": -1, "filename": "pyxargs-1.2.8.tar.gz", "has_sig": false, "md5_digest": "4ed008756985350df985f82440f0da32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9104, "upload_time": "2020-02-02T05:18:33", "upload_time_iso_8601": "2020-02-02T05:18:33.656189Z", "url": "https://files.pythonhosted.org/packages/cb/9a/3baed147e2633a4dffdb2422d6ac8d5f1c83b4e86d6bd74c0ed504ec7216/pyxargs-1.2.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ed008756985350df985f82440f0da32", "sha256": "05a091c06a6b410b15311b42343d631b566fdf880a060924fe6141dfec8039ed"}, "downloads": -1, "filename": "pyxargs-1.2.8.tar.gz", "has_sig": false, "md5_digest": "4ed008756985350df985f82440f0da32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9104, "upload_time": "2020-02-02T05:18:33", "upload_time_iso_8601": "2020-02-02T05:18:33.656189Z", "url": "https://files.pythonhosted.org/packages/cb/9a/3baed147e2633a4dffdb2422d6ac8d5f1c83b4e86d6bd74c0ed504ec7216/pyxargs-1.2.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:05 2020"}