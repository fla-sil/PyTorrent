{"info": {"author": "Michael Kerrin", "author_email": "michael.kerrin@openapp.ie", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python"], "description": "================================\nzope.app.file webdav integration\n================================\n\n  >>> import z3c.etree\n  >>> from zope.app.file.file import File\n\n  >>> etree = z3c.etree.getEngine()\n\nCreate a content object called `textfile.txt` in the root folder.\n\n  >>> f = File('%s\\n' %('x' * 10) * 5, 'text/plain')\n  >>> getRootFolder()['testfile.txt'] = f\n\nGET\n===\n\nThe default view for the content object needs to be setup in order for WebDAV\nclients to be able to get the data for the DAV compliant resource.\n\n  >>> resp = http(\"\"\"\n  ... GET /testfile.txt HTTP/1.1\n  ... \"\"\", handle_errors = False)\n  >>> resp.getStatus()\n  200\n  >>> resp.getHeader('content-type')\n  'text/plain'\n  >>> resp.getHeader('content-length')\n  '55'\n  >>> print resp.getBody()\n  xxxxxxxxxx\n  xxxxxxxxxx\n  xxxxxxxxxx\n  xxxxxxxxxx\n  xxxxxxxxxx\n\nPUT\n===\n\n???\n\nPROPFIND\n========\n\nQuery the WebDAV data model for the file object. The following properties\ncurrently make up the data model for zope.file:\n\n+ {DAV:}creationdate\n\n+ {DAV:}displayname\n\n+ {DAV:}getcontentlength\n\n+ {DAV:}getcontenttype\n\n+ {DAV:}getlastmodified\n\n+ {DAV:}resourcetype\n\nQuery all properties on our test file.\n\n  >>> resp = webdav(\"\"\"\n  ... PROPFIND /testfile.txt HTTP/1.1\n  ... \"\"\", handle_errors = False)\n\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <creationdate />\n          <displayname />\n          <getlastmodified />\n          <getcontenttype>text/plain</getcontenttype>\n          <getcontentlength>55</getcontentlength>\n          <resourcetype />\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nThe `{DAV:}getetag` and `{DAV:}getcontentlanguage` properties are not defined\n(yet) on a file object.\n\n  >>> resp.getMSProperty('http://localhost/testfile.txt', '{DAV:}getetag')\n  Traceback (most recent call last):\n  ...\n  KeyError: \"'{DAV:}getetag' property not found for resource http://localhost/testfile.txt (200)\"\n  >>> resp.getMSProperty(\n  ...    'http://localhost/testfile.txt', '{DAV:}getcontentlanguage')\n  Traceback (most recent call last):\n  ...\n  KeyError: \"'{DAV:}getcontentlanguage' property not found for resource http://localhost/testfile.txt (200)\"\n\nPROPPATCH\n=========\n\nWe need to be logged in to update a property.\n\n  >>> reqbody = \"\"\"<propertyupdate xmlns=\"DAV:\">\n  ...  <set>\n  ...   <prop>\n  ...    <displayname>Test title</displayname>\n  ...   </prop>\n  ...  </set>\n  ... </propertyupdate>\"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Content-Type: application/xml\n  ... Content-Length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  401\n\nNow update the title of the file.\n\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-Type: application/xml\n  ... Content-Length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = False)\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <displayname />\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nRetrieve the displayname property using PROPFIND and notice the difference.\n\n  >>> reqbody = \"\"\"<propfind xmlns=\"DAV:\">\n  ...   <prop>\n  ...     <displayname />\n  ...   </prop>\n  ... </propfind>\n  ... \"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPFIND /testfile.txt HTTP/1.1\n  ... Content-type: application/xml\n  ... Content-Length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = False)\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <displayname>Test title</displayname>\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nThe `{DAV:}getcontentlength` property is a live property, and as such we\ncannot modify it.\n\n  >>> reqbody = \"\"\"<propertyupdate xmlns=\"DAV:\">\n  ...   <set>\n  ...     <prop>\n  ...       <getcontentlength>24</getcontentlength>\n  ...     </prop>\n  ...   </set>\n  ... </propertyupdate>\"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-type: application/xml \n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <getcontentlength />\n        </prop>\n        <status>HTTP/1.1 403 Forbidden</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nOpaque properties\n=================\n\nSet two dead properties on our resource.\n\n  >>> reqbody = \"\"\"<propertyupdate xmlns=\"DAV:\">\n  ...  <set>\n  ...    <prop>\n  ...      <E:prop1 xmlns:E=\"examplens:\">PROPERTY 1</E:prop1>\n  ...      <E:prop2 xmlns:E=\"examplens:\">PROPERTY 2</E:prop2>\n  ...    </prop>\n  ...  </set>\n  ... </propertyupdate>\n  ... \"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-type: application/xml\n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = True)\n\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <ns1:prop1 xmlns:ns1=\"examplens:\" />\n          <ns1:prop2 xmlns:ns1=\"examplens:\" />\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nQuery these new properties.\n\n  >>> reqbody = \"\"\"<propfind xmlns=\"DAV:\">\n  ...  <prop xmlns:E=\"examplens:\" >\n  ...    <E:prop1 />\n  ...    <E:prop2 />\n  ...  </prop>\n  ... </propfind>\n  ... \"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPFIND /testfile.txt HTTP/1.1\n  ... Content-type: application/xml\n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <E:prop1 xmlns:E=\"examplens:\">PROPERTY 1</E:prop1>\n          <E:prop2 xmlns:E=\"examplens:\">PROPERTY 2</E:prop2>\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nUpdate the first property and remove the second.\n\n  >>> reqbody = \"\"\"<propertyupdate xmlns=\"DAV:\">\n  ...  <set>\n  ...    <prop>\n  ...      <E:prop1 xmlns:E=\"examplens:\">Only opaque property</E:prop1>\n  ...    </prop>\n  ...  </set>\n  ...  <remove>\n  ...    <prop>\n  ...      <E:prop2 xmlns:E=\"examplens:\" />\n  ...    </prop>\n  ...  </remove>\n  ... </propertyupdate>\"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-type: application/xml\n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <E:prop1 xmlns:E=\"examplens:\" />\n          <E:prop2 xmlns:E=\"examplens:\" />\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nNow check that the opaque properties were updated successfully.\n\n  >>> reqbody = \"\"\"<propfind xmlns=\"DAV:\">\n  ...  <prop xmlns:E=\"examplens:\" >\n  ...    <E:prop1 />\n  ...    <E:prop2 />\n  ...  </prop>\n  ... </propfind>\n  ... \"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPFIND /testfile.txt HTTP/1.1\n  ... Content-type: application/xml\n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <ns1:prop1 xmlns:ns1=\"examplens:\">Only opaque property</ns1:prop1>\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n      <propstat>\n        <prop>\n          <ns1:prop2 xmlns:ns1=\"examplens:\" />\n        </prop>\n        <status>HTTP/1.1 404 Not Found</status>\n      </propstat>\n    </response>\n  </multistatus>\n\n\n=================================\nChanges in z3c.davapp.zopeappfile\n=================================", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://launchpad.net/z3c.dav", "keywords": null, "license": "ZPL", "maintainer": null, "maintainer_email": null, "name": "z3c.davapp.zopeappfile", "package_url": "https://pypi.org/project/z3c.davapp.zopeappfile/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.davapp.zopeappfile/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://launchpad.net/z3c.dav"}, "release_url": "https://pypi.org/project/z3c.davapp.zopeappfile/1.0b1/", "requires_dist": null, "requires_python": null, "summary": "Define the WebDAV data model for the  File and Image objects from the\n`zope.app.file' module.", "version": "1.0b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"zope-app-file-webdav-integration\">\n<h2>zope.app.file webdav integration</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; import z3c.etree\n&gt;&gt;&gt; from zope.app.file.file import File\n</pre>\n<pre>&gt;&gt;&gt; etree = z3c.etree.getEngine()\n</pre>\n</blockquote>\n<p>Create a content object called <cite>textfile.txt</cite> in the root folder.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; f = File('%s\\n' %('x' * 10) * 5, 'text/plain')\n&gt;&gt;&gt; getRootFolder()['testfile.txt'] = f\n</pre>\n</blockquote>\n<div id=\"get\">\n<h3>GET</h3>\n<p>The default view for the content object needs to be setup in order for WebDAV\nclients to be able to get the data for the DAV compliant resource.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(\"\"\"\n... GET /testfile.txt HTTP/1.1\n... \"\"\", handle_errors = False)\n&gt;&gt;&gt; resp.getStatus()\n200\n&gt;&gt;&gt; resp.getHeader('content-type')\n'text/plain'\n&gt;&gt;&gt; resp.getHeader('content-length')\n'55'\n&gt;&gt;&gt; print resp.getBody()\nxxxxxxxxxx\nxxxxxxxxxx\nxxxxxxxxxx\nxxxxxxxxxx\nxxxxxxxxxx\n</pre>\n</blockquote>\n</div>\n<div id=\"put\">\n<h3>PUT</h3>\n<p>???</p>\n</div>\n<div id=\"propfind\">\n<h3>PROPFIND</h3>\n<p>Query the WebDAV data model for the file object. The following properties\ncurrently make up the data model for zope.file:</p>\n<ul>\n<li>{DAV:}creationdate</li>\n<li>{DAV:}displayname</li>\n<li>{DAV:}getcontentlength</li>\n<li>{DAV:}getcontenttype</li>\n<li>{DAV:}getlastmodified</li>\n<li>{DAV:}resourcetype</li>\n</ul>\n<p>Query all properties on our test file.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPFIND /testfile.txt HTTP/1.1\n... \"\"\", handle_errors = False)\n</pre>\n<pre>&gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA\n&lt;multistatus xmlns=\"DAV:\"&gt;\n  &lt;response&gt;\n    &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;creationdate /&gt;\n        &lt;displayname /&gt;\n        &lt;getlastmodified /&gt;\n        &lt;getcontenttype&gt;text/plain&lt;/getcontenttype&gt;\n        &lt;getcontentlength&gt;55&lt;/getcontentlength&gt;\n        &lt;resourcetype /&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;\n    &lt;/propstat&gt;\n  &lt;/response&gt;\n&lt;/multistatus&gt;\n</pre>\n</blockquote>\n<p>The <cite>{DAV:}getetag</cite> and <cite>{DAV:}getcontentlanguage</cite> properties are not defined\n(yet) on a file object.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp.getMSProperty('http://localhost/testfile.txt', '{DAV:}getetag')\nTraceback (most recent call last):\n...\nKeyError: \"'{DAV:}getetag' property not found for resource http://localhost/testfile.txt (200)\"\n&gt;&gt;&gt; resp.getMSProperty(\n...    'http://localhost/testfile.txt', '{DAV:}getcontentlanguage')\nTraceback (most recent call last):\n...\nKeyError: \"'{DAV:}getcontentlanguage' property not found for resource http://localhost/testfile.txt (200)\"\n</pre>\n</blockquote>\n</div>\n<div id=\"proppatch\">\n<h3>PROPPATCH</h3>\n<p>We need to be logged in to update a property.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; reqbody = \"\"\"&lt;propertyupdate xmlns=\"DAV:\"&gt;\n...  &lt;set&gt;\n...   &lt;prop&gt;\n...    &lt;displayname&gt;Test title&lt;/displayname&gt;\n...   &lt;/prop&gt;\n...  &lt;/set&gt;\n... &lt;/propertyupdate&gt;\"\"\"\n&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPPATCH /testfile.txt HTTP/1.1\n... Content-Type: application/xml\n... Content-Length: %d\n...\n... %s\"\"\" %(len(reqbody), reqbody))\n&gt;&gt;&gt; resp.getStatus()\n401\n</pre>\n</blockquote>\n<p>Now update the title of the file.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPPATCH /testfile.txt HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... Content-Type: application/xml\n... Content-Length: %d\n...\n... %s\"\"\" %(len(reqbody), reqbody), handle_errors = False)\n&gt;&gt;&gt; resp.getStatus()\n207\n&gt;&gt;&gt; resp.getHeader('content-type')\n'application/xml'\n&gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA\n&lt;multistatus xmlns=\"DAV:\"&gt;\n  &lt;response&gt;\n    &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;displayname /&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;\n    &lt;/propstat&gt;\n  &lt;/response&gt;\n&lt;/multistatus&gt;\n</pre>\n</blockquote>\n<p>Retrieve the displayname property using PROPFIND and notice the difference.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; reqbody = \"\"\"&lt;propfind xmlns=\"DAV:\"&gt;\n...   &lt;prop&gt;\n...     &lt;displayname /&gt;\n...   &lt;/prop&gt;\n... &lt;/propfind&gt;\n... \"\"\"\n&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPFIND /testfile.txt HTTP/1.1\n... Content-type: application/xml\n... Content-Length: %d\n...\n... %s\"\"\" %(len(reqbody), reqbody), handle_errors = False)\n&gt;&gt;&gt; resp.getStatus()\n207\n&gt;&gt;&gt; resp.getHeader('content-type')\n'application/xml'\n&gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA\n&lt;multistatus xmlns=\"DAV:\"&gt;\n  &lt;response&gt;\n    &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;displayname&gt;Test title&lt;/displayname&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;\n    &lt;/propstat&gt;\n  &lt;/response&gt;\n&lt;/multistatus&gt;\n</pre>\n</blockquote>\n<p>The <cite>{DAV:}getcontentlength</cite> property is a live property, and as such we\ncannot modify it.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; reqbody = \"\"\"&lt;propertyupdate xmlns=\"DAV:\"&gt;\n...   &lt;set&gt;\n...     &lt;prop&gt;\n...       &lt;getcontentlength&gt;24&lt;/getcontentlength&gt;\n...     &lt;/prop&gt;\n...   &lt;/set&gt;\n... &lt;/propertyupdate&gt;\"\"\"\n&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPPATCH /testfile.txt HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... Content-type: application/xml\n... Content-length: %d\n...\n... %s\"\"\" %(len(reqbody), reqbody))\n&gt;&gt;&gt; resp.getStatus()\n207\n&gt;&gt;&gt; resp.getHeader('content-type')\n'application/xml'\n&gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA\n&lt;multistatus xmlns=\"DAV:\"&gt;\n  &lt;response&gt;\n    &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;getcontentlength /&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 403 Forbidden&lt;/status&gt;\n    &lt;/propstat&gt;\n  &lt;/response&gt;\n&lt;/multistatus&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"opaque-properties\">\n<h3>Opaque properties</h3>\n<p>Set two dead properties on our resource.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; reqbody = \"\"\"&lt;propertyupdate xmlns=\"DAV:\"&gt;\n...  &lt;set&gt;\n...    &lt;prop&gt;\n...      &lt;E:prop1 xmlns:E=\"examplens:\"&gt;PROPERTY 1&lt;/E:prop1&gt;\n...      &lt;E:prop2 xmlns:E=\"examplens:\"&gt;PROPERTY 2&lt;/E:prop2&gt;\n...    &lt;/prop&gt;\n...  &lt;/set&gt;\n... &lt;/propertyupdate&gt;\n... \"\"\"\n&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPPATCH /testfile.txt HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... Content-type: application/xml\n... Content-length: %d\n...\n... %s\"\"\" %(len(reqbody), reqbody), handle_errors = True)\n</pre>\n<pre>&gt;&gt;&gt; resp.getStatus()\n207\n&gt;&gt;&gt; resp.getHeader('content-type')\n'application/xml'\n&gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA\n&lt;multistatus xmlns=\"DAV:\"&gt;\n  &lt;response&gt;\n    &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;ns1:prop1 xmlns:ns1=\"examplens:\" /&gt;\n        &lt;ns1:prop2 xmlns:ns1=\"examplens:\" /&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;\n    &lt;/propstat&gt;\n  &lt;/response&gt;\n&lt;/multistatus&gt;\n</pre>\n</blockquote>\n<p>Query these new properties.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; reqbody = \"\"\"&lt;propfind xmlns=\"DAV:\"&gt;\n...  &lt;prop xmlns:E=\"examplens:\" &gt;\n...    &lt;E:prop1 /&gt;\n...    &lt;E:prop2 /&gt;\n...  &lt;/prop&gt;\n... &lt;/propfind&gt;\n... \"\"\"\n&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPFIND /testfile.txt HTTP/1.1\n... Content-type: application/xml\n... Content-length: %d\n...\n... %s\"\"\" %(len(reqbody), reqbody))\n&gt;&gt;&gt; resp.getStatus()\n207\n&gt;&gt;&gt; resp.getHeader('content-type')\n'application/xml'\n&gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA\n&lt;multistatus xmlns=\"DAV:\"&gt;\n  &lt;response&gt;\n    &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;E:prop1 xmlns:E=\"examplens:\"&gt;PROPERTY 1&lt;/E:prop1&gt;\n        &lt;E:prop2 xmlns:E=\"examplens:\"&gt;PROPERTY 2&lt;/E:prop2&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;\n    &lt;/propstat&gt;\n  &lt;/response&gt;\n&lt;/multistatus&gt;\n</pre>\n</blockquote>\n<p>Update the first property and remove the second.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; reqbody = \"\"\"&lt;propertyupdate xmlns=\"DAV:\"&gt;\n...  &lt;set&gt;\n...    &lt;prop&gt;\n...      &lt;E:prop1 xmlns:E=\"examplens:\"&gt;Only opaque property&lt;/E:prop1&gt;\n...    &lt;/prop&gt;\n...  &lt;/set&gt;\n...  &lt;remove&gt;\n...    &lt;prop&gt;\n...      &lt;E:prop2 xmlns:E=\"examplens:\" /&gt;\n...    &lt;/prop&gt;\n...  &lt;/remove&gt;\n... &lt;/propertyupdate&gt;\"\"\"\n&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPPATCH /testfile.txt HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... Content-type: application/xml\n... Content-length: %d\n...\n... %s\"\"\" %(len(reqbody), reqbody))\n&gt;&gt;&gt; resp.getStatus()\n207\n&gt;&gt;&gt; resp.getHeader('content-type')\n'application/xml'\n&gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA\n&lt;multistatus xmlns=\"DAV:\"&gt;\n  &lt;response&gt;\n    &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;E:prop1 xmlns:E=\"examplens:\" /&gt;\n        &lt;E:prop2 xmlns:E=\"examplens:\" /&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;\n    &lt;/propstat&gt;\n  &lt;/response&gt;\n&lt;/multistatus&gt;\n</pre>\n</blockquote>\n<p>Now check that the opaque properties were updated successfully.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; reqbody = \"\"\"&lt;propfind xmlns=\"DAV:\"&gt;\n...  &lt;prop xmlns:E=\"examplens:\" &gt;\n...    &lt;E:prop1 /&gt;\n...    &lt;E:prop2 /&gt;\n...  &lt;/prop&gt;\n... &lt;/propfind&gt;\n... \"\"\"\n&gt;&gt;&gt; resp = webdav(\"\"\"\n... PROPFIND /testfile.txt HTTP/1.1\n... Content-type: application/xml\n... Content-length: %d\n...\n... %s\"\"\" %(len(reqbody), reqbody))\n&gt;&gt;&gt; resp.getStatus()\n207\n&gt;&gt;&gt; resp.getHeader('content-type')\n'application/xml'\n&gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA\n&lt;multistatus xmlns=\"DAV:\"&gt;\n  &lt;response&gt;\n    &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;ns1:prop1 xmlns:ns1=\"examplens:\"&gt;Only opaque property&lt;/ns1:prop1&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;\n    &lt;/propstat&gt;\n    &lt;propstat&gt;\n      &lt;prop&gt;\n        &lt;ns1:prop2 xmlns:ns1=\"examplens:\" /&gt;\n      &lt;/prop&gt;\n      &lt;status&gt;HTTP/1.1 404 Not Found&lt;/status&gt;\n    &lt;/propstat&gt;\n  &lt;/response&gt;\n&lt;/multistatus&gt;\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes-in-z3c-davapp-zopeappfile\">\n<h2>Changes in z3c.davapp.zopeappfile</h2>\n</div>\n\n          </div>"}, "last_serial": 802011, "releases": {"1.0b": [{"comment_text": "", "digests": {"md5": "59f9eac3017ed7f2d09261b147f8b55b", "sha256": "46d8dfaa64b8c97436798275ecafb03aeaa3739b13ddc697ab7aaa2f541ef751"}, "downloads": -1, "filename": "z3c.davapp.zopeappfile-1.0b.tar.gz", "has_sig": false, "md5_digest": "59f9eac3017ed7f2d09261b147f8b55b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3835, "upload_time": "2007-07-07T20:09:23", "upload_time_iso_8601": "2007-07-07T20:09:23Z", "url": "https://files.pythonhosted.org/packages/9e/66/164cb4b03d63d3fe4234fd0ce5ca4a6c442c79f7194fbafcd85fc8e5f901/z3c.davapp.zopeappfile-1.0b.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "d485cc18881bdbbb7fd5ee6f3936dee3", "sha256": "41e2cef0c20715bb5c5b6a6808cb30fa58133b87f6f85a67f02bd0a273b6b7e7"}, "downloads": -1, "filename": "z3c.davapp.zopeappfile-1.0b1.tar.gz", "has_sig": false, "md5_digest": "d485cc18881bdbbb7fd5ee6f3936dee3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4825, "upload_time": "2008-02-27T18:26:55", "upload_time_iso_8601": "2008-02-27T18:26:55Z", "url": "https://files.pythonhosted.org/packages/dc/ce/0a2430cad5cbb0b02da38148e8e99e35cc81a72c0f76c950fb670e905034/z3c.davapp.zopeappfile-1.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d485cc18881bdbbb7fd5ee6f3936dee3", "sha256": "41e2cef0c20715bb5c5b6a6808cb30fa58133b87f6f85a67f02bd0a273b6b7e7"}, "downloads": -1, "filename": "z3c.davapp.zopeappfile-1.0b1.tar.gz", "has_sig": false, "md5_digest": "d485cc18881bdbbb7fd5ee6f3936dee3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4825, "upload_time": "2008-02-27T18:26:55", "upload_time_iso_8601": "2008-02-27T18:26:55Z", "url": "https://files.pythonhosted.org/packages/dc/ce/0a2430cad5cbb0b02da38148e8e99e35cc81a72c0f76c950fb670e905034/z3c.davapp.zopeappfile-1.0b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:07 2020"}