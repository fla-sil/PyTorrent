{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup"], "description": "pedantmark\n==========\n\n    Only two maybes I've thought of: Strict Markdown or Pedantic Markdown. \"Strict\" still doesn't seem right.\n\n    -- `John Gruber`_\n\n.. _`John Gruber`: https://twitter.com/gruber/status/507615356295200770)\n\nOk, let's call it **pedantmark**.\n\n**pedantmark** is (not only) a python binding for the GitHub's fork of CommonMark (cmark).\nIt has been enhanced by me (Hsiaoming Yang) to support custom renderers.\n\n.. note::\n   If you are a C pro, please help me to improve the C code in this repo.\n\nInstall\n-------\n\n**pedantmark** is available in Python 2.7 and 3.5+ for Linux and Mac,\nPython 3.5+ for Windows. Wheels are built by multibuild_.\n\nInstall wheels by pip::\n\n    $ pip install pedantmark\n\n.. _multibuild: https://github.com/matthew-brett/multibuild\n\n\nStandard Usage\n--------------\n\nThe C source code has serval built-in renderers. The simplest interface is\n``pedantmark.html(text, options)``, which will render text into HTML.\n\n.. code-block:: python\n\n    import pedantmark\n\n    text = '...'\n    html = pedantmark.html(text, options=[pedantmark.OPT_VALIDATE_UTF8])\n\nThe function ``pedantmark.html()`` accepts no extensions, but you can add\nextensions via ``pedantmark.markdown()``:\n\n.. code-block:: python\n\n    import pedantmark\n\n    text = '...'\n    html = pedantmark.markdown(\n        text,\n        options=[pedantmark.OPT_VALIDATE_UTF8],\n        extensions=['strikethrough', 'autolink', 'table'],\n        renderer='html',\n    )\n\nAvailable extensions: ``table``, ``autolink``, ``tagfilter``, ``strikethrough``.\nYou can enable them all with a shortcut::\n\n    pedantmark.markdown(..., extensions=pedantmark.EXTENSIONS)\n\nAvailable renderers: ``html``, ``xml``, ``man``, ``commonmark``, ``plaintext``,\nand ``latex``.\n\nCustom Renderer\n---------------\n\nBesides the native renderers, **pedantmark** has provided you a custom renderer,\nwhich you can customize the output yourself. Here is an example of pygments code\nhighlighting integration:\n\n.. code-block:: python\n\n    from pedantmark import HTMLRenderer, markdown\n    from pygments import highlight\n    from pygments.lexers import get_lexer_by_name\n    from pygments.formatters import html\n\n    class MyRenderer(HTMLRenderer):\n        def code_block(self, code, lang):\n            if lang:\n                # everything is in bytes\n                lang = lang.decode('utf-8')\n                code = code.decode('utf-8')\n                lexer = get_lexer_by_name(lang, stripall=True)\n                formatter = html.HtmlFormatter()\n                output = highlight(code, lexer, formatter)\n                # return bytes\n                return output.encode('utf-8')\n            return super(MyRenderer, self).code_block(code, lang)\n\n    text = '...'\n    markdown(text, renderer=MyRenderer())\n\nThe default ``HTMLRenderer`` has a built-in hook for code highlight, you don't need\nto subclass at all:\n\n.. code-block:: python\n\n    def add_code_highlight(code, lang):\n        lang = lang.decode('utf-8')\n        code = code.decode('utf-8')\n        lexer = get_lexer_by_name(lang, stripall=True)\n        formatter = html.HtmlFormatter()\n        output = highlight(code, lexer, formatter)\n        return output.encode('utf-8')\n\n    text = '...'\n    markdown(text, renderer=HTMLRenderer(highlight=add_code_highlight))\n\nAuthor & License\n----------------\n\nThis library is created by Hsiaming Yang, licensed under BSD.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lepture/pedantmark", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pedantmark", "package_url": "https://pypi.org/project/pedantmark/", "platform": "", "project_url": "https://pypi.org/project/pedantmark/", "project_urls": {"Homepage": "https://github.com/lepture/pedantmark"}, "release_url": "https://pypi.org/project/pedantmark/0.1/", "requires_dist": ["cffi (>=1.11.0)"], "requires_python": "", "summary": "Python binding of GitHub cmark with extensions and renderers", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<p>Only two maybes I\u2019ve thought of: Strict Markdown or Pedantic Markdown. \u201cStrict\u201d still doesn\u2019t seem right.</p>\n<p>\u2014<a href=\"https://twitter.com/gruber/status/507615356295200770)\" rel=\"nofollow\">John Gruber</a></p>\n</blockquote>\n<p>Ok, let\u2019s call it <strong>pedantmark</strong>.</p>\n<p><strong>pedantmark</strong> is (not only) a python binding for the GitHub\u2019s fork of CommonMark (cmark).\nIt has been enhanced by me (Hsiaoming Yang) to support custom renderers.</p>\n<div>\n<p>Note</p>\n<p>If you are a C pro, please help me to improve the C code in this repo.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p><strong>pedantmark</strong> is available in Python 2.7 and 3.5+ for Linux and Mac,\nPython 3.5+ for Windows. Wheels are built by <a href=\"https://github.com/matthew-brett/multibuild\" rel=\"nofollow\">multibuild</a>.</p>\n<p>Install wheels by pip:</p>\n<pre>$ pip install pedantmark\n</pre>\n</div>\n<div id=\"standard-usage\">\n<h2>Standard Usage</h2>\n<p>The C source code has serval built-in renderers. The simplest interface is\n<tt>pedantmark.html(text, options)</tt>, which will render text into HTML.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pedantmark</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">pedantmark</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">pedantmark</span><span class=\"o\">.</span><span class=\"n\">OPT_VALIDATE_UTF8</span><span class=\"p\">])</span>\n</pre>\n<p>The function <tt>pedantmark.html()</tt> accepts no extensions, but you can add\nextensions via <tt>pedantmark.markdown()</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pedantmark</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">pedantmark</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span>\n    <span class=\"n\">text</span><span class=\"p\">,</span>\n    <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">pedantmark</span><span class=\"o\">.</span><span class=\"n\">OPT_VALIDATE_UTF8</span><span class=\"p\">],</span>\n    <span class=\"n\">extensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'strikethrough'</span><span class=\"p\">,</span> <span class=\"s1\">'autolink'</span><span class=\"p\">,</span> <span class=\"s1\">'table'</span><span class=\"p\">],</span>\n    <span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"s1\">'html'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Available extensions: <tt>table</tt>, <tt>autolink</tt>, <tt>tagfilter</tt>, <tt>strikethrough</tt>.\nYou can enable them all with a shortcut:</p>\n<pre>pedantmark.markdown(..., extensions=pedantmark.EXTENSIONS)\n</pre>\n<p>Available renderers: <tt>html</tt>, <tt>xml</tt>, <tt>man</tt>, <tt>commonmark</tt>, <tt>plaintext</tt>,\nand <tt>latex</tt>.</p>\n</div>\n<div id=\"custom-renderer\">\n<h2>Custom Renderer</h2>\n<p>Besides the native renderers, <strong>pedantmark</strong> has provided you a custom renderer,\nwhich you can customize the output yourself. Here is an example of pygments code\nhighlighting integration:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pedantmark</span> <span class=\"kn\">import</span> <span class=\"n\">HTMLRenderer</span><span class=\"p\">,</span> <span class=\"n\">markdown</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygments</span> <span class=\"kn\">import</span> <span class=\"n\">highlight</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygments.lexers</span> <span class=\"kn\">import</span> <span class=\"n\">get_lexer_by_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygments.formatters</span> <span class=\"kn\">import</span> <span class=\"n\">html</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyRenderer</span><span class=\"p\">(</span><span class=\"n\">HTMLRenderer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">code_block</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">lang</span><span class=\"p\">:</span>\n            <span class=\"c1\"># everything is in bytes</span>\n            <span class=\"n\">lang</span> <span class=\"o\">=</span> <span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n            <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n            <span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">get_lexer_by_name</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"p\">,</span> <span class=\"n\">stripall</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">HtmlFormatter</span><span class=\"p\">()</span>\n            <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">highlight</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">formatter</span><span class=\"p\">)</span>\n            <span class=\"c1\"># return bytes</span>\n            <span class=\"k\">return</span> <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyRenderer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">code_block</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"p\">)</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n<span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"n\">MyRenderer</span><span class=\"p\">())</span>\n</pre>\n<p>The default <tt>HTMLRenderer</tt> has a built-in hook for code highlight, you don\u2019t need\nto subclass at all:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">add_code_highlight</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"p\">):</span>\n    <span class=\"n\">lang</span> <span class=\"o\">=</span> <span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n    <span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">get_lexer_by_name</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"p\">,</span> <span class=\"n\">stripall</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">HtmlFormatter</span><span class=\"p\">()</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">highlight</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">formatter</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n<span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"n\">HTMLRenderer</span><span class=\"p\">(</span><span class=\"n\">highlight</span><span class=\"o\">=</span><span class=\"n\">add_code_highlight</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"author-license\">\n<h2>Author &amp; License</h2>\n<p>This library is created by Hsiaming Yang, licensed under BSD.</p>\n</div>\n\n          </div>"}, "last_serial": 4529154, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "19d10cabfc8e7feb15822311fd542513", "sha256": "f818e21b6dff7d04f79aa9d6b2d5c9d0dde3edf3b9fd9b39ddcc2b2ff740367f"}, "downloads": -1, "filename": "pedantmark-0.1-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "19d10cabfc8e7feb15822311fd542513", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 140369, "upload_time": "2018-11-26T10:46:03", "upload_time_iso_8601": "2018-11-26T10:46:03.270477Z", "url": "https://files.pythonhosted.org/packages/4c/82/d2663ffbdd842008ee469ad9ae914e2f0bab26a3bc65006cc1880da042f4/pedantmark-0.1-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19d10cabfc8e7feb15822311fd542513", "sha256": "f818e21b6dff7d04f79aa9d6b2d5c9d0dde3edf3b9fd9b39ddcc2b2ff740367f"}, "downloads": -1, "filename": "pedantmark-0.1-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "19d10cabfc8e7feb15822311fd542513", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 140369, "upload_time": "2018-11-26T10:46:03", "upload_time_iso_8601": "2018-11-26T10:46:03.270477Z", "url": "https://files.pythonhosted.org/packages/4c/82/d2663ffbdd842008ee469ad9ae914e2f0bab26a3bc65006cc1880da042f4/pedantmark-0.1-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}], "timestamp": "Fri May  8 02:56:53 2020"}