{"info": {"author": "Reto Trappitsch", "author_email": "trappitsch1@llnl.gov", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# iniabu\nThis package can be used to query the solar system elemental and\nisotopic composition. It is based on various databases. Currently\navailable databases are\n * [Lodders et al. (2009)](https://doi.org/10.1007/978-3-540-88055-4_34)\n\n## Installation\nThe package can be installed via pip\n\n    pip install iniabu\n\nIf you want to upgrade to the newest version, type:\n\n    pip install iniabu --upgrade\n\nAlternatively, less preferred (should only be used if, for some\nreason, you cannot access pip), the software can be installed\nby running:\n\n    python setup.py\n\n## Using the package\n### Loading an instance\nOnce you have installed the class you can import it, as usual, in python\nby calling\n\n    import iniabu\n\nYou can now load your instance, e.g., as\n\n    ini = iniabu.IniAbu()\n\nOptionally, you can add an *fname* argument in this call and\nselect the database you would like to work with. By default\n*fname='lodders09'* is loaded. Optionally, you can load separate\ninstances with different databases.\n\n### A simple example\nIn order to calculate a delta value, you need to define\ntwo isotopes that you calculate your delta value for your\nmeasurement, e.g., you measured the isotopes <sup>29</sup>Si\nand <sup>28</sup>Si. The standard format\nto give the program an isotope is by passing a string, e.g.,\n'Si-28' for <sup>28</sup>Si. The required delta value can then\nbe found by calling:\n\n    measurement_value = 0.05\n    ini.delta_iso(measurement_value, 'Si-29', 'Si-28')\n\nHere, measurement_value is the measured value for which a\ndelta value comparing it to the Solar System average composition\nwill be calculated. The program then returns the delta value in\nper mille:\n\n    -14.957264957264904\n\nMore details can be found in the introduction of the docustring\nto the class. If you're using ipython you can call it up via\n\n    ini?\n\n### Nomenclature & Options\n**Isotopes** should be passed to the program in the form 'Fe56',\nwhere 'Fe' is the symbol for the given element and '56' is the\ntotal number of nucleons.\n\n**massf**: Some routines have a *massf* argument. By default\nthis is set to *False*. In this scenario, it is assumed that your\nisotope ratios are number ratios. If *massf = True*, the program\nassumes for this calculation that your value (and the return,\nwhere applicable) are in mass fractions.\n\n**mult**: Functions calculating delta values usually have a\n*mult* option. Delta values by themselves are not defined in\nterms of per mille or any other fraction. The multiplier, which\nis by default set to 1000 to return per mille, can be set to\nreturn anything else as well, e.g., *mult=100* would return\ndelta values in percent.\n\n### Available subroutines\n\nThe subroutines and data listed here are given by *name*. To\nthe function, type:\n\n    ini.name(...)\n\nand give the required arguments (if any). Docstrings are\navailable for all functions and can, from ipython, be called\nby:\n\n    ini.name?\n\nMost users will want to use the functions for ratios.\n\n#### Queries:\n\n* **query_ele** returns the information that is stored on\na given element.\n* **query_iso** returns the information that is stored on a\ngiven isotope.\n\n#### Functions for ratios:\n\n* **delta_iso** returns the delta value of two given isotopes\n* **delta_ele** returns the delta value of two given elements\n* **bracket_iso** returns the bracket notation of a given pair of isotope\n* **bracket_ele** returns the bracket notation of a given pair of elements\n\n#### General information\n\n* **data** holds all the read in information.\n* **aa, ele, zz** holds the information for every entry in the\ndatabase for the total number of nucleons (*aa*), the total\nnumber of protons (*zz*), and the element abbrevition (*ele*).\n* **atomp** holds the information on atom percentage, i.e.,\nhow many percent a given isotope makes up of an element.\n* **nn** holds the information on abundnace fraction of a given\nisotope with respect to the average solar system.\n\n### More information\nMore detailed information can be formed in the docstring of the\npython class file. If you are using ipython, you can query\nindividual commands, e.g., as:\n\n    ini.delta_iso?\n\n## Contact\nFeel free to contact me if you find a bug and would like to have\nit fixed. You can find my e-mail address below. \n\nPlease also let me know if you would like to have additional\nfunctionality added. I don't expect you to contribute directly \nto this code, but please feel free to do so and create a new pull\nrequest. Testing is all done manually at this point and I expect\nit it remain like that for the foreseeable future. Good luck :)\n\n## Release\n\nLLNL-CODE-799977  \n\nCopyright (c) 2019, Lawrence Livermore National Security,\nLLC. Produced at the Lawrence Livermore National Laboratory.  \nWritten by Reto Trappitsch  \ntrappitsch1@llnl.gov\n\nAll rights reserved.\n\nPlease also read this link \u2013 Our Disclaimer and GNU General\nPublic License.\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\n(as published by the Free Software Foundation) version 2,\ndated June 1991.\n\nThis program is distributed in the hope that it will be\nuseful, but WITHOUT ANY WARRANTY; without even the IMPLIED\nWARRANTY OF MERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE. See the terms and conditions of the GNU General\nPublic License for more details.\n\nYou should have received a copy of the GNU General Public\nLicense along with this program; if not, write to the Free\nSoftware Foundation, Inc., 59 Temple Place, Suite 330,\nBoston, MA 02111-1307 USA", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LLNL/iniabu", "keywords": "", "license": "GPL-2.0", "maintainer": "", "maintainer_email": "", "name": "iniabu", "package_url": "https://pypi.org/project/iniabu/", "platform": "", "project_url": "https://pypi.org/project/iniabu/", "project_urls": {"Homepage": "https://github.com/LLNL/iniabu"}, "release_url": "https://pypi.org/project/iniabu/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Solar System initial isotopic abundance reader.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>iniabu</h1>\n<p>This package can be used to query the solar system elemental and\nisotopic composition. It is based on various databases. Currently\navailable databases are</p>\n<ul>\n<li><a href=\"https://doi.org/10.1007/978-3-540-88055-4_34\" rel=\"nofollow\">Lodders et al. (2009)</a></li>\n</ul>\n<h2>Installation</h2>\n<p>The package can be installed via pip</p>\n<pre><code>pip install iniabu\n</code></pre>\n<p>If you want to upgrade to the newest version, type:</p>\n<pre><code>pip install iniabu --upgrade\n</code></pre>\n<p>Alternatively, less preferred (should only be used if, for some\nreason, you cannot access pip), the software can be installed\nby running:</p>\n<pre><code>python setup.py\n</code></pre>\n<h2>Using the package</h2>\n<h3>Loading an instance</h3>\n<p>Once you have installed the class you can import it, as usual, in python\nby calling</p>\n<pre><code>import iniabu\n</code></pre>\n<p>You can now load your instance, e.g., as</p>\n<pre><code>ini = iniabu.IniAbu()\n</code></pre>\n<p>Optionally, you can add an <em>fname</em> argument in this call and\nselect the database you would like to work with. By default\n<em>fname='lodders09'</em> is loaded. Optionally, you can load separate\ninstances with different databases.</p>\n<h3>A simple example</h3>\n<p>In order to calculate a delta value, you need to define\ntwo isotopes that you calculate your delta value for your\nmeasurement, e.g., you measured the isotopes <sup>29</sup>Si\nand <sup>28</sup>Si. The standard format\nto give the program an isotope is by passing a string, e.g.,\n'Si-28' for <sup>28</sup>Si. The required delta value can then\nbe found by calling:</p>\n<pre><code>measurement_value = 0.05\nini.delta_iso(measurement_value, 'Si-29', 'Si-28')\n</code></pre>\n<p>Here, measurement_value is the measured value for which a\ndelta value comparing it to the Solar System average composition\nwill be calculated. The program then returns the delta value in\nper mille:</p>\n<pre><code>-14.957264957264904\n</code></pre>\n<p>More details can be found in the introduction of the docustring\nto the class. If you're using ipython you can call it up via</p>\n<pre><code>ini?\n</code></pre>\n<h3>Nomenclature &amp; Options</h3>\n<p><strong>Isotopes</strong> should be passed to the program in the form 'Fe56',\nwhere 'Fe' is the symbol for the given element and '56' is the\ntotal number of nucleons.</p>\n<p><strong>massf</strong>: Some routines have a <em>massf</em> argument. By default\nthis is set to <em>False</em>. In this scenario, it is assumed that your\nisotope ratios are number ratios. If <em>massf = True</em>, the program\nassumes for this calculation that your value (and the return,\nwhere applicable) are in mass fractions.</p>\n<p><strong>mult</strong>: Functions calculating delta values usually have a\n<em>mult</em> option. Delta values by themselves are not defined in\nterms of per mille or any other fraction. The multiplier, which\nis by default set to 1000 to return per mille, can be set to\nreturn anything else as well, e.g., <em>mult=100</em> would return\ndelta values in percent.</p>\n<h3>Available subroutines</h3>\n<p>The subroutines and data listed here are given by <em>name</em>. To\nthe function, type:</p>\n<pre><code>ini.name(...)\n</code></pre>\n<p>and give the required arguments (if any). Docstrings are\navailable for all functions and can, from ipython, be called\nby:</p>\n<pre><code>ini.name?\n</code></pre>\n<p>Most users will want to use the functions for ratios.</p>\n<h4>Queries:</h4>\n<ul>\n<li><strong>query_ele</strong> returns the information that is stored on\na given element.</li>\n<li><strong>query_iso</strong> returns the information that is stored on a\ngiven isotope.</li>\n</ul>\n<h4>Functions for ratios:</h4>\n<ul>\n<li><strong>delta_iso</strong> returns the delta value of two given isotopes</li>\n<li><strong>delta_ele</strong> returns the delta value of two given elements</li>\n<li><strong>bracket_iso</strong> returns the bracket notation of a given pair of isotope</li>\n<li><strong>bracket_ele</strong> returns the bracket notation of a given pair of elements</li>\n</ul>\n<h4>General information</h4>\n<ul>\n<li><strong>data</strong> holds all the read in information.</li>\n<li><strong>aa, ele, zz</strong> holds the information for every entry in the\ndatabase for the total number of nucleons (<em>aa</em>), the total\nnumber of protons (<em>zz</em>), and the element abbrevition (<em>ele</em>).</li>\n<li><strong>atomp</strong> holds the information on atom percentage, i.e.,\nhow many percent a given isotope makes up of an element.</li>\n<li><strong>nn</strong> holds the information on abundnace fraction of a given\nisotope with respect to the average solar system.</li>\n</ul>\n<h3>More information</h3>\n<p>More detailed information can be formed in the docstring of the\npython class file. If you are using ipython, you can query\nindividual commands, e.g., as:</p>\n<pre><code>ini.delta_iso?\n</code></pre>\n<h2>Contact</h2>\n<p>Feel free to contact me if you find a bug and would like to have\nit fixed. You can find my e-mail address below.</p>\n<p>Please also let me know if you would like to have additional\nfunctionality added. I don't expect you to contribute directly\nto this code, but please feel free to do so and create a new pull\nrequest. Testing is all done manually at this point and I expect\nit it remain like that for the foreseeable future. Good luck :)</p>\n<h2>Release</h2>\n<p>LLNL-CODE-799977</p>\n<p>Copyright (c) 2019, Lawrence Livermore National Security,\nLLC. Produced at the Lawrence Livermore National Laboratory.<br>\nWritten by Reto Trappitsch<br>\n<a href=\"mailto:trappitsch1@llnl.gov\">trappitsch1@llnl.gov</a></p>\n<p>All rights reserved.</p>\n<p>Please also read this link \u2013 Our Disclaimer and GNU General\nPublic License.</p>\n<p>This program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\n(as published by the Free Software Foundation) version 2,\ndated June 1991.</p>\n<p>This program is distributed in the hope that it will be\nuseful, but WITHOUT ANY WARRANTY; without even the IMPLIED\nWARRANTY OF MERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE. See the terms and conditions of the GNU General\nPublic License for more details.</p>\n<p>You should have received a copy of the GNU General Public\nLicense along with this program; if not, write to the Free\nSoftware Foundation, Inc., 59 Temple Place, Suite 330,\nBoston, MA 02111-1307 USA</p>\n\n          </div>"}, "last_serial": 6342904, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "34d67e3c360e644786915d1f82540af2", "sha256": "5ad24ee2ded651038e057044ef77d537fac412ddd3d96eaddf90b056fab31ca6"}, "downloads": -1, "filename": "iniabu-0.3.0.tar.gz", "has_sig": false, "md5_digest": "34d67e3c360e644786915d1f82540af2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14004, "upload_time": "2019-12-20T23:42:37", "upload_time_iso_8601": "2019-12-20T23:42:37.434398Z", "url": "https://files.pythonhosted.org/packages/4f/ea/b1facc8a903516ee8d8f39df1703cd867dc886bc6cd7ea9b22cb860edef8/iniabu-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34d67e3c360e644786915d1f82540af2", "sha256": "5ad24ee2ded651038e057044ef77d537fac412ddd3d96eaddf90b056fab31ca6"}, "downloads": -1, "filename": "iniabu-0.3.0.tar.gz", "has_sig": false, "md5_digest": "34d67e3c360e644786915d1f82540af2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14004, "upload_time": "2019-12-20T23:42:37", "upload_time_iso_8601": "2019-12-20T23:42:37.434398Z", "url": "https://files.pythonhosted.org/packages/4f/ea/b1facc8a903516ee8d8f39df1703cd867dc886bc6cd7ea9b22cb860edef8/iniabu-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:57 2020"}