{"info": {"author": "Meteorix", "author_email": "lxhustauto@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# nlpc\n**nlpc** is a super fast c++ library which adopts dynamic programming(DP) algorithm to solve classic nlp problems as below .  \n  \n[The longest common subsequence](https://en.wikipedia.org/wiki/Longest_common_subsequence_problem) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).  \n  \n[The longest common substring](https://en.wikipedia.org/wiki/Longest_common_substring_problem) problem is to find the longest string (or strings) that is a substring (or are substrings) of two or more strings.  \n\nWe also support Chinese(or any UTF-8) string \n\n\nInstall\n-------\n\nTo install, simply do ``pip install nlpc`` to pull down the latest version from [PyPI](https://pypi.org/project/nlpc/).\n\n\nPython code example\n-------------------\n\n```python\nimport nlpc\n\n#  finding the longest common subsequence length of string A and string B\nA = 'We are shannonai'\nB = 'We like shannonai'\nnlpc.lcs(A, B)\n\"\"\"\n>>> nlpc.lcs(A, B)\n14\n\"\"\"\n\n#  finding the longest common subsequence length of string A and a list of string B\nA = 'We are shannonai'\nB = ['We like shannonai', 'We work in shannonai', 'We are not shannonai']\nnlpc.lcs_of_list(A, B)\n\"\"\"\n>>> nlpc.lcs_of_list(A, B)\n[14, 14, 16]\n\"\"\"\n\n# finding the longest common substring length of string A and string B\nA = 'We are shannonai'\nB = 'We like shannonai'\nnlpc.lcs2(A, B)\n\"\"\"\n>>> nlpc.lcs2(A, B)\n11\n\"\"\"\n\n#  finding the longest common substring length of string A and a list of string B\nA = 'We are shannonai'\nB = ['We like shannonai', 'We work in shannonai', 'We are not shannonai']\nnlpc.lcs2_of_list(A, B)\n\"\"\"\n>>> nlpc.lcs2_of_list(A, B)\n[11, 10, 10]\n\"\"\"", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Meteorix", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nlpc", "package_url": "https://pypi.org/project/nlpc/", "platform": "", "project_url": "https://pypi.org/project/nlpc/", "project_urls": {"Homepage": "https://github.com/Meteorix"}, "release_url": "https://pypi.org/project/nlpc/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "super fast cpp implementation of nlp functions", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nlpc</h1>\n<p><strong>nlpc</strong> is a super fast c++ library which adopts dynamic programming(DP) algorithm to solve classic nlp problems as below .</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Longest_common_subsequence_problem\" rel=\"nofollow\">The longest common subsequence</a> problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Longest_common_substring_problem\" rel=\"nofollow\">The longest common substring</a> problem is to find the longest string (or strings) that is a substring (or are substrings) of two or more strings.</p>\n<p>We also support Chinese(or any UTF-8) string</p>\n<h2>Install</h2>\n<p>To install, simply do <code>pip install nlpc</code> to pull down the latest version from <a href=\"https://pypi.org/project/nlpc/\" rel=\"nofollow\">PyPI</a>.</p>\n<h2>Python code example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nlpc</span>\n\n<span class=\"c1\">#  finding the longest common subsequence length of string A and string B</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"s1\">'We are shannonai'</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"s1\">'We like shannonai'</span>\n<span class=\"n\">nlpc</span><span class=\"o\">.</span><span class=\"n\">lcs</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">&gt;&gt;&gt; nlpc.lcs(A, B)</span>\n<span class=\"sd\">14</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\">#  finding the longest common subsequence length of string A and a list of string B</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"s1\">'We are shannonai'</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'We like shannonai'</span><span class=\"p\">,</span> <span class=\"s1\">'We work in shannonai'</span><span class=\"p\">,</span> <span class=\"s1\">'We are not shannonai'</span><span class=\"p\">]</span>\n<span class=\"n\">nlpc</span><span class=\"o\">.</span><span class=\"n\">lcs_of_list</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">&gt;&gt;&gt; nlpc.lcs_of_list(A, B)</span>\n<span class=\"sd\">[14, 14, 16]</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\"># finding the longest common substring length of string A and string B</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"s1\">'We are shannonai'</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"s1\">'We like shannonai'</span>\n<span class=\"n\">nlpc</span><span class=\"o\">.</span><span class=\"n\">lcs2</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">&gt;&gt;&gt; nlpc.lcs2(A, B)</span>\n<span class=\"sd\">11</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\">#  finding the longest common substring length of string A and a list of string B</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"s1\">'We are shannonai'</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'We like shannonai'</span><span class=\"p\">,</span> <span class=\"s1\">'We work in shannonai'</span><span class=\"p\">,</span> <span class=\"s1\">'We are not shannonai'</span><span class=\"p\">]</span>\n<span class=\"n\">nlpc</span><span class=\"o\">.</span><span class=\"n\">lcs2_of_list</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">&gt;&gt;&gt; nlpc.lcs2_of_list(A, B)</span>\n<span class=\"sd\">[11, 10, 10]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n\n          </div>"}, "last_serial": 5440309, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "46f604150c5cb9f31af8ff28b039bf86", "sha256": "225b43a3da56e315e4cd7f6d514ccd9597b64b197d57b4bdc29c777a24158e9b"}, "downloads": -1, "filename": "nlpc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "46f604150c5cb9f31af8ff28b039bf86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3795, "upload_time": "2019-06-24T11:48:52", "upload_time_iso_8601": "2019-06-24T11:48:52.166811Z", "url": "https://files.pythonhosted.org/packages/58/29/046155a1d3d52058d526df9e9eb8c29413f9ae3b16ce54a26fd42fc0d6d2/nlpc-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "46f604150c5cb9f31af8ff28b039bf86", "sha256": "225b43a3da56e315e4cd7f6d514ccd9597b64b197d57b4bdc29c777a24158e9b"}, "downloads": -1, "filename": "nlpc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "46f604150c5cb9f31af8ff28b039bf86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3795, "upload_time": "2019-06-24T11:48:52", "upload_time_iso_8601": "2019-06-24T11:48:52.166811Z", "url": "https://files.pythonhosted.org/packages/58/29/046155a1d3d52058d526df9e9eb8c29413f9ae3b16ce54a26fd42fc0d6d2/nlpc-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:12 2020"}