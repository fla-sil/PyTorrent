{"info": {"author": "Plone Foundation", "author_email": "Wouter.VandenHove@UGent.be", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python"], "description": "Introduction\n============\n\nAbout\n-----\nSimplePortlet is a product that lets the user create his own portlets in Plone.\nIt adds three content types called Portlet, Smart Folder Portlet and RSS Portlet..\nAdding these objects to a folder will display it as a portlet in either the left or right column.\nNext to a title, description and some rich content you can also control in which column it\nhas to show up, if it should show up in subfolders and whether it should be displayed at all.\nThe Smart Folder portlet shows additional result from a designated Smart Folder and the RSS Portlet\nallows you to pick a CMFSin channel (when installed).\n\nSimplePortlet is based on archetypes so that must be installed on your system.\n\n\nInstalling\n----------\nSee docs/INSTALL.txt for installation instructions.\n\n\nUsage\n-----\nAfter installation, two new classic portlets have been add to the plone-root:\n\n* 'here/portlet_simpleportlet/macros/portlet_left'\n\n* 'here/portlet_simpleportlet/macros/portlet_right'\n\nThese two new entries in the slots are the actual macros that display the user-defined portlets. They act as placeholders\nand at runtime they will check in the current folder (and parent folders to accomodate inheritance)\nto see if there are Portlets to display. So, removing these place-holders from the slot definitions\nwill also disable the displaying of custom Portlets! This is important.\n\nOf course, by changing the order in these slot properties, you can control where in the order\nthe custom portlets will be displayed.\n\n**Note**: a portlet with the same id as a portlet higher up the hierarchy will overrule it.\nThis enables you to turn off a Portlet that is defined higher in the tree.\nSimply create an empty portlet with the same id and set it not to display.\n\nTogether with SimplePortlet comes a layout editor that is presented as an extra tab on folders.\nThe tab is called 'portlets' and gives you a form to change how portlets are displayed\nfor that folder and subfolders. Portlets are inherited from higher folders.\nWith the layout editor you can overrule this inheritance by creating a local definition.\nThis definition is also active for subfolders because they inherit portlets\non their part (unless you turn it off for them as well).\n\nSo, each colum has his own set of options and lets you create a new order\nor definition for which portlets should be displayed. Simply type the name of\none of the available portlets in either of the text areas. One portlet per line!\n**Don't forget to include the user-defined portlets.**\n\nSimplePortlet only allows the use of so called friendly portlet names.\nSo instead of having to type 'here/portlet_about/macros/portlet' you can just type 'about'.\nAn administrator can add or alter these friendly names and their associated true paths\nin the properties tab of portlet_manager in ZMI. The id is the friendly name and the value\nis the full path. Make sure you add new properties as strings.\n\nDuring installation, SimplePortlet scans all folderish objects in search for portlets\nthat are in use and tries to register them in the portlet_manager tool. You can check\nthis out for yourself to see if the friendly names that SimplePortlet has come up with is\ngood enough for you.\n\nThe layout form only accepts these friendly names to protect users from typing in the\nwrong names which will break at least the current folder.\nWhen that does happen, you will have to go to that folder as an admininstrator\nin ZMI and change the properties for that folder (left_slots and right_slots).\n\n\nDevelopers\n----------\n    If you have a product that also has portlets then you can register them with the portlet_manager in your install script::\n\n        # register our portlets to SimpePortlet's portlet manager if it exists\n        try:\n            pm = self.portlet_manager\n        except:\n            pm = None\n        if not pm==None:\n            pm.registerPortlet('<friendlyName>', '<path like here/myportlets/macros/portlet>')\n                \n    In you uninstall script::\n        \n        #unregister portlets\n        try:\n            pm = self.portlet_manager\n        except:\n            pm = None\n        if not pm==None:\n            pm.unRegisterPortlet('<friendlyName>')\n\nI hope you will enjoy this product but use it at your own risk! Make a backup first!\n\n\nNote\n----\nUpon uninstalling, SimplePortlet will try to remove all references in each folder's left_slots and right_slots to SimplePortlet's\nportlets (see above for the two portlets). That means that when you install SimplePortlet again, you'll have to go\nto the folders that had a reference and restore them so that the custom portlets will be displayed again.\n\n\nCSS Styles\n----------\n(implemented by Osma Suominen, osma.suominen@mbconcert.fi)\nIt is possible to define a list of CSS styles for custom portlets. When creating/modifying a portlet the style can be chosen\nfrom the list. The idea is to have matching CSS class definitions in e.g. ploneCustom.css. To enable style selection, write the names\nof some CSS classes into a lines property called 'conf_portlet_styles' in portlet_manager (create it if it doesn't exist).\nThe entries can be either plain class names of the form class:visiblename so that you can have \"friendly\" style names for users.\nThe resulting portlet HTML code will start with <div class=\"portlet mystyle\"> when a style \"mystyle\" is selected.\n\nTopic display (implemented by clebeaupin, moved to separate type Topic Portlet by Osma Suominen)\nThe contents of topics may be listed in portlets. This requires AT Content Types or some other AT-based Topic type. You can choose\na topic and maximum number of entries to show.\n\n\nAuthors\n--------\n- Danny Bloemendaal -  danny.bloemendaal@companion.nl - _ender_@#plone.irc\n\nChangelog\n=========\n\n1.2 (2010-05-04)\n----------------\n\n- Eggification from old-style SimplePortlet v1.1.3 [aclarke]\n\n- Add MANIFEST.in [WouterVH]\n\n- Fixed default value for attribute show_more_link [batlock666]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/Products.SimplePortlet", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "Products.SimplePortlet", "package_url": "https://pypi.org/project/Products.SimplePortlet/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Products.SimplePortlet/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/Products.SimplePortlet"}, "release_url": "https://pypi.org/project/Products.SimplePortlet/1.2/", "requires_dist": null, "requires_python": null, "summary": "Portlets as content-types", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<div id=\"about\">\n<h3>About</h3>\n<p>SimplePortlet is a product that lets the user create his own portlets in Plone.\nIt adds three content types called Portlet, Smart Folder Portlet and RSS Portlet..\nAdding these objects to a folder will display it as a portlet in either the left or right column.\nNext to a title, description and some rich content you can also control in which column it\nhas to show up, if it should show up in subfolders and whether it should be displayed at all.\nThe Smart Folder portlet shows additional result from a designated Smart Folder and the RSS Portlet\nallows you to pick a CMFSin channel (when installed).</p>\n<p>SimplePortlet is based on archetypes so that must be installed on your system.</p>\n</div>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p>See docs/INSTALL.txt for installation instructions.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>After installation, two new classic portlets have been add to the plone-root:</p>\n<ul>\n<li>\u2018here/portlet_simpleportlet/macros/portlet_left\u2019</li>\n<li>\u2018here/portlet_simpleportlet/macros/portlet_right\u2019</li>\n</ul>\n<p>These two new entries in the slots are the actual macros that display the user-defined portlets. They act as placeholders\nand at runtime they will check in the current folder (and parent folders to accomodate inheritance)\nto see if there are Portlets to display. So, removing these place-holders from the slot definitions\nwill also disable the displaying of custom Portlets! This is important.</p>\n<p>Of course, by changing the order in these slot properties, you can control where in the order\nthe custom portlets will be displayed.</p>\n<p><strong>Note</strong>: a portlet with the same id as a portlet higher up the hierarchy will overrule it.\nThis enables you to turn off a Portlet that is defined higher in the tree.\nSimply create an empty portlet with the same id and set it not to display.</p>\n<p>Together with SimplePortlet comes a layout editor that is presented as an extra tab on folders.\nThe tab is called \u2018portlets\u2019 and gives you a form to change how portlets are displayed\nfor that folder and subfolders. Portlets are inherited from higher folders.\nWith the layout editor you can overrule this inheritance by creating a local definition.\nThis definition is also active for subfolders because they inherit portlets\non their part (unless you turn it off for them as well).</p>\n<p>So, each colum has his own set of options and lets you create a new order\nor definition for which portlets should be displayed. Simply type the name of\none of the available portlets in either of the text areas. One portlet per line!\n<strong>Don\u2019t forget to include the user-defined portlets.</strong></p>\n<p>SimplePortlet only allows the use of so called friendly portlet names.\nSo instead of having to type \u2018here/portlet_about/macros/portlet\u2019 you can just type \u2018about\u2019.\nAn administrator can add or alter these friendly names and their associated true paths\nin the properties tab of portlet_manager in ZMI. The id is the friendly name and the value\nis the full path. Make sure you add new properties as strings.</p>\n<p>During installation, SimplePortlet scans all folderish objects in search for portlets\nthat are in use and tries to register them in the portlet_manager tool. You can check\nthis out for yourself to see if the friendly names that SimplePortlet has come up with is\ngood enough for you.</p>\n<p>The layout form only accepts these friendly names to protect users from typing in the\nwrong names which will break at least the current folder.\nWhen that does happen, you will have to go to that folder as an admininstrator\nin ZMI and change the properties for that folder (left_slots and right_slots).</p>\n</div>\n<div id=\"developers\">\n<h3>Developers</h3>\n<blockquote>\n<p>If you have a product that also has portlets then you can register them with the portlet_manager in your install script:</p>\n<pre># register our portlets to SimpePortlet's portlet manager if it exists\ntry:\n    pm = self.portlet_manager\nexcept:\n    pm = None\nif not pm==None:\n    pm.registerPortlet('&lt;friendlyName&gt;', '&lt;path like here/myportlets/macros/portlet&gt;')\n</pre>\n<p>In you uninstall script:</p>\n<pre>#unregister portlets\ntry:\n    pm = self.portlet_manager\nexcept:\n    pm = None\nif not pm==None:\n    pm.unRegisterPortlet('&lt;friendlyName&gt;')\n</pre>\n</blockquote>\n<p>I hope you will enjoy this product but use it at your own risk! Make a backup first!</p>\n</div>\n<div id=\"note\">\n<h3>Note</h3>\n<p>Upon uninstalling, SimplePortlet will try to remove all references in each folder\u2019s left_slots and right_slots to SimplePortlet\u2019s\nportlets (see above for the two portlets). That means that when you install SimplePortlet again, you\u2019ll have to go\nto the folders that had a reference and restore them so that the custom portlets will be displayed again.</p>\n</div>\n<div id=\"css-styles\">\n<h3>CSS Styles</h3>\n<p>(implemented by Osma Suominen, <a href=\"mailto:osma.suominen%40mbconcert.fi\">osma<span>.</span>suominen<span>@</span>mbconcert<span>.</span>fi</a>)\nIt is possible to define a list of CSS styles for custom portlets. When creating/modifying a portlet the style can be chosen\nfrom the list. The idea is to have matching CSS class definitions in e.g. ploneCustom.css. To enable style selection, write the names\nof some CSS classes into a lines property called \u2018conf_portlet_styles\u2019 in portlet_manager (create it if it doesn\u2019t exist).\nThe entries can be either plain class names of the form class:visiblename so that you can have \u201cfriendly\u201d style names for users.\nThe resulting portlet HTML code will start with &lt;div class=\u201dportlet mystyle\u201d&gt; when a style \u201cmystyle\u201d is selected.</p>\n<p>Topic display (implemented by clebeaupin, moved to separate type Topic Portlet by Osma Suominen)\nThe contents of topics may be listed in portlets. This requires AT Content Types or some other AT-based Topic type. You can choose\na topic and maximum number of entries to show.</p>\n</div>\n<div id=\"authors\">\n<h3>Authors</h3>\n<ul>\n<li>Danny Bloemendaal -  <a href=\"mailto:danny.bloemendaal%40companion.nl\">danny<span>.</span>bloemendaal<span>@</span>companion<span>.</span>nl</a> - <a href=\"mailto:_ender_%40#plone.irc\">_ender_<span>@</span>#plone<span>.</span>irc</a></li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.2 (2010-05-04)</span></h2>\n<ul>\n<li>Eggification from old-style SimplePortlet v1.1.3 [aclarke]</li>\n<li>Add MANIFEST.in [WouterVH]</li>\n<li>Fixed default value for attribute show_more_link [batlock666]</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 785123, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "43842dadffeff91f132a5d67edaa1bd1", "sha256": "ad2dc262cb75f87a8b98784a9eef2379aa73fa362de2e07553a01e3d0bdd4d49"}, "downloads": -1, "filename": "Products.SimplePortlet-1.2.tar.gz", "has_sig": false, "md5_digest": "43842dadffeff91f132a5d67edaa1bd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34441, "upload_time": "2010-05-04T14:33:59", "upload_time_iso_8601": "2010-05-04T14:33:59.646646Z", "url": "https://files.pythonhosted.org/packages/22/3a/e4cf14ada7572f7180d9834cab4c9d4e6f00898df302e412a70c7fce5c6a/Products.SimplePortlet-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "43842dadffeff91f132a5d67edaa1bd1", "sha256": "ad2dc262cb75f87a8b98784a9eef2379aa73fa362de2e07553a01e3d0bdd4d49"}, "downloads": -1, "filename": "Products.SimplePortlet-1.2.tar.gz", "has_sig": false, "md5_digest": "43842dadffeff91f132a5d67edaa1bd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34441, "upload_time": "2010-05-04T14:33:59", "upload_time_iso_8601": "2010-05-04T14:33:59.646646Z", "url": "https://files.pythonhosted.org/packages/22/3a/e4cf14ada7572f7180d9834cab4c9d4e6f00898df302e412a70c7fce5c6a/Products.SimplePortlet-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:42 2020"}