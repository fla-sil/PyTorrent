{"info": {"author": "David Gomez-Peregrina, Pablo Marin-Garcia", "author_email": "david.gomez@mgviz.org, pmarin@kanteron.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": ".. contents::\n\nPyOpenCGA\n==========\n\nThis Python client package makes use of the comprehensive RESTful web services API implemented for the `OpenCGA`_ platform.\nOpenCGA is an open-source project that implements a high-performance, scalable and secure platform for Genomic data analysis and visualisation\n\nOpenCGA implements a secure and high performance platform for Big Data analysis and visualisation in current genomics.\nOpenCGA uses the most modern and advanced technologies to scale to petabytes of data. OpenCGA is designed and implemented to work with\nfew million genomes. It is built on top of three main components: Catalog, Variant and Alignment Storage and Analysis.\n\nMore info about this project in the `OpenCGA Docs`_\n\nInstallation\n------------\n\nCloning\n```````\nPyOpenCGA can be cloned in your local machine by executing in your terminal::\n\n   $ git clone https://github.com/opencb/opencga.git\n\nOnce you have downloaded the project you can install the library. We recommend to install it inside a `virtual environment`_::\n\n   $ cd opencga/tree/develop/opencga-client/src/main/python/pyOpenCGA\n   $ python setup.py install\n\nPip install\n```````````\nRun the following command in the shell::\n\n   $ pip install pyopencga\n\nUsage\n-----\n\nImport pyOpenCGA package\n````````````````````````\n\nThe first step is to import the ClientConfiguration and OpenCGAClient from pyOpenCGA:\n\n.. code-block:: python\n\n    >>> from pyopencga.opencga_config import ClientConfiguration\n    >>> from pyopencga.opencga_client import OpenCGAClient\n\nSetting up server host configuration\n````````````````````````````````````\n\nThe second step is to generate a ClientConfiguration instance by passing a configuration dictionary containing the host to point to or a client-configuration.yml file:\n\n.. code-block:: python\n\n    >>> config = ClientConfiguration('/opt/opencga/conf/client-configuration.yml')\n    >>> config = ClientConfiguration({\n            \"rest\": {\n                    \"host\": \"http://bioinfo.hpc.cam.ac.uk/opencga-demo\"\n            }\n        })\n\nLog in to OpenCGA host server\n`````````````````````````````\n\nWith this configuration you can initialize the OpenCGAClient, and log in:\n\n.. code-block:: python\n\n    >>> oc = OpenCGAClient(config)\n    >>> oc.login('user')\n\nFor scripting or using Jupyter Notebooks is preferable to load user credentials from an external JSON file.\n\nOnce you are logged in, it is mandatory to use the token of the session to propagate the access of the clients to the host server:\n\n.. code-block:: python\n\n    >>> token = oc.token\n    >>> print(token)\n    eyJhbGciOi...\n\n    >>> oc = OpenCGAClient(configuration=config_dict, token=token)\n\nExamples\n````````\n\nThe next step is to get an instance of the clients we may want to use:\n\n.. code-block:: python\n\n    >>> projects = oc.projects # Project client\n    >>> studies = oc.studies   # Study client\n    >>> samples = oc.samples # Sample client\n    >>> cohorts = oc.cohorts # Cohort client\n\nNow you can start asking to the OpenCGA RESTful service with pyOpenCGA:\n\n.. code-block:: python\n\n    >>> for project in projects.search(owner=user).results(): \n    ...    print(project['id'])\n    project1\n    project2\n    [...]\n\nThere are two different ways to access to the query response data:\n\n.. code-block:: python\n\n    >>> foo_client.method().results() # Iterates over all the results of all the QueryResults\n    >>> foo_client.method().responses # Returns the raw response of the QueryResponse\n\nData can be accessed specifying comma-separated IDs or a list of IDs:\n\n.. code-block:: python\n\n    >>> samples = 'NA12877,NA12878,NA12879'\n    >>> samples_list = ['NA12877','NA12878','NA12879']\n    >>> sc = oc.samples\n\n    >>> for result in sc.info(query_id=samples, study='user@project1:study1').results():\n    ...     print(result['id'], result['attributes']['OPENCGA_INDIVIDUAL']['disorders'])\n    NA12877 [{'id': 'OMIM6500', 'name': \"Chron's Disease\"}]\n    NA12878 []\n    NA12879 [{'id': 'OMIM6500', 'name': \"Chron's Disease\"}]\n\n    >>> for result in sc.info(query_id=samples_list, study='user@project1:study1').results():\n    ...     print(result['id'], result['attributes']['OPENCGA_INDIVIDUAL']['disorders'])\n    NA12877 [{'id': 'OMIM6500', 'name': \"Chron's Disease\"}]\n    NA12878 []\n    NA12879 [{'id': 'OMIM6500', 'name': \"Chron's Disease\"}]\n\nOptional filters and extra options can be added as key-value parameters (where the values can be a comma-separated string or a list).\n\nWhat can I ask for?\n```````````````````\nThe best way to know which data can be retrieved for each client check `OpenCGA web services`_ swagger.\n\n\n.. _OpenCGA: https://github.com/opencb/opencga\n.. _OpenCGA Docs: http://docs.opencb.org/display/opencga\n.. _virtual environment: https://help.dreamhost.com/hc/en-us/articles/115000695551-Installing-and-using-virtualenv-with-Python-3 \n.. _OpenCGA web services: http://bioinfodev.hpc.cam.ac.uk/opencga/webservices/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/opencb/opencga/tree/develop/opencga-client/src/main/python/pyOpenCGA", "keywords": "opencb opencga bioinformatics genomic database", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "pyopencga", "package_url": "https://pypi.org/project/pyopencga/", "platform": "", "project_url": "https://pypi.org/project/pyopencga/", "project_urls": {"Homepage": "https://github.com/opencb/opencga/tree/develop/opencga-client/src/main/python/pyOpenCGA"}, "release_url": "https://pypi.org/project/pyopencga/1.4.2.1/", "requires_dist": ["requests (>=2.7)", "pip (>=7.1.2)", "pathlib (>=1.0.1)", "pyyaml (>=3.12)"], "requires_python": "", "summary": "A REST client for OpenCGA REST web services", "version": "1.4.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#pyopencga\" id=\"id1\" rel=\"nofollow\">PyOpenCGA</a><ul>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#cloning\" id=\"id3\" rel=\"nofollow\">Cloning</a></li>\n<li><a href=\"#pip-install\" id=\"id4\" rel=\"nofollow\">Pip install</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" id=\"id5\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#import-pyopencga-package\" id=\"id6\" rel=\"nofollow\">Import pyOpenCGA package</a></li>\n<li><a href=\"#setting-up-server-host-configuration\" id=\"id7\" rel=\"nofollow\">Setting up server host configuration</a></li>\n<li><a href=\"#log-in-to-opencga-host-server\" id=\"id8\" rel=\"nofollow\">Log in to OpenCGA host server</a></li>\n<li><a href=\"#examples\" id=\"id9\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#what-can-i-ask-for\" id=\"id10\" rel=\"nofollow\">What can I ask for?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"pyopencga\">\n<h2><a href=\"#id1\" rel=\"nofollow\">PyOpenCGA</a></h2>\n<p>This Python client package makes use of the comprehensive RESTful web services API implemented for the <a href=\"https://github.com/opencb/opencga\" rel=\"nofollow\">OpenCGA</a> platform.\nOpenCGA is an open-source project that implements a high-performance, scalable and secure platform for Genomic data analysis and visualisation</p>\n<p>OpenCGA implements a secure and high performance platform for Big Data analysis and visualisation in current genomics.\nOpenCGA uses the most modern and advanced technologies to scale to petabytes of data. OpenCGA is designed and implemented to work with\nfew million genomes. It is built on top of three main components: Catalog, Variant and Alignment Storage and Analysis.</p>\n<p>More info about this project in the <a href=\"http://docs.opencb.org/display/opencga\" rel=\"nofollow\">OpenCGA Docs</a></p>\n<div id=\"installation\">\n<h3><a href=\"#id2\" rel=\"nofollow\">Installation</a></h3>\n<div id=\"cloning\">\n<h4><a href=\"#id3\" rel=\"nofollow\">Cloning</a></h4>\n<p>PyOpenCGA can be cloned in your local machine by executing in your terminal:</p>\n<pre>$ git clone https://github.com/opencb/opencga.git\n</pre>\n<p>Once you have downloaded the project you can install the library. We recommend to install it inside a <a href=\"https://help.dreamhost.com/hc/en-us/articles/115000695551-Installing-and-using-virtualenv-with-Python-3\" rel=\"nofollow\">virtual environment</a>:</p>\n<pre>$ cd opencga/tree/develop/opencga-client/src/main/python/pyOpenCGA\n$ python setup.py install\n</pre>\n</div>\n<div id=\"pip-install\">\n<h4><a href=\"#id4\" rel=\"nofollow\">Pip install</a></h4>\n<p>Run the following command in the shell:</p>\n<pre>$ pip install pyopencga\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Usage</a></h3>\n<div id=\"import-pyopencga-package\">\n<h4><a href=\"#id6\" rel=\"nofollow\">Import pyOpenCGA package</a></h4>\n<p>The first step is to import the ClientConfiguration and OpenCGAClient from pyOpenCGA:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyopencga.opencga_config</span> <span class=\"kn\">import</span> <span class=\"n\">ClientConfiguration</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyopencga.opencga_client</span> <span class=\"kn\">import</span> <span class=\"n\">OpenCGAClient</span>\n</pre>\n</div>\n<div id=\"setting-up-server-host-configuration\">\n<h4><a href=\"#id7\" rel=\"nofollow\">Setting up server host configuration</a></h4>\n<p>The second step is to generate a ClientConfiguration instance by passing a configuration dictionary containing the host to point to or a client-configuration.yml file:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ClientConfiguration</span><span class=\"p\">(</span><span class=\"s1\">'/opt/opencga/conf/client-configuration.yml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ClientConfiguration</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"rest\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://bioinfo.hpc.cam.ac.uk/opencga-demo\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"log-in-to-opencga-host-server\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Log in to OpenCGA host server</a></h4>\n<p>With this configuration you can initialize the OpenCGAClient, and log in:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">oc</span> <span class=\"o\">=</span> <span class=\"n\">OpenCGAClient</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">oc</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">)</span>\n</pre>\n<p>For scripting or using Jupyter Notebooks is preferable to load user credentials from an external JSON file.</p>\n<p>Once you are logged in, it is mandatory to use the token of the session to propagate the access of the clients to the host server:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">oc</span><span class=\"o\">.</span><span class=\"n\">token</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"n\">eyJhbGciOi</span><span class=\"o\">...</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">oc</span> <span class=\"o\">=</span> <span class=\"n\">OpenCGAClient</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"o\">=</span><span class=\"n\">config_dict</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"examples\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Examples</a></h4>\n<p>The next step is to get an instance of the clients we may want to use:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">projects</span> <span class=\"o\">=</span> <span class=\"n\">oc</span><span class=\"o\">.</span><span class=\"n\">projects</span> <span class=\"c1\"># Project client</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">studies</span> <span class=\"o\">=</span> <span class=\"n\">oc</span><span class=\"o\">.</span><span class=\"n\">studies</span>   <span class=\"c1\"># Study client</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">oc</span><span class=\"o\">.</span><span class=\"n\">samples</span> <span class=\"c1\"># Sample client</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cohorts</span> <span class=\"o\">=</span> <span class=\"n\">oc</span><span class=\"o\">.</span><span class=\"n\">cohorts</span> <span class=\"c1\"># Cohort client</span>\n</pre>\n<p>Now you can start asking to the OpenCGA RESTful service with pyOpenCGA:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">project</span> <span class=\"ow\">in</span> <span class=\"n\">projects</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">])</span>\n<span class=\"n\">project1</span>\n<span class=\"n\">project2</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<p>There are two different ways to access to the query response data:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo_client</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">()</span> <span class=\"c1\"># Iterates over all the results of all the QueryResults</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo_client</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">responses</span> <span class=\"c1\"># Returns the raw response of the QueryResponse</span>\n</pre>\n<p>Data can be accessed specifying comma-separated IDs or a list of IDs:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"s1\">'NA12877,NA12878,NA12879'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">samples_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'NA12877'</span><span class=\"p\">,</span><span class=\"s1\">'NA12878'</span><span class=\"p\">,</span><span class=\"s1\">'NA12879'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">oc</span><span class=\"o\">.</span><span class=\"n\">samples</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">query_id</span><span class=\"o\">=</span><span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"n\">study</span><span class=\"o\">=</span><span class=\"s1\">'user@project1:study1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'attributes'</span><span class=\"p\">][</span><span class=\"s1\">'OPENCGA_INDIVIDUAL'</span><span class=\"p\">][</span><span class=\"s1\">'disorders'</span><span class=\"p\">])</span>\n<span class=\"n\">NA12877</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'OMIM6500'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s2\">\"Chron's Disease\"</span><span class=\"p\">}]</span>\n<span class=\"n\">NA12878</span> <span class=\"p\">[]</span>\n<span class=\"n\">NA12879</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'OMIM6500'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s2\">\"Chron's Disease\"</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">query_id</span><span class=\"o\">=</span><span class=\"n\">samples_list</span><span class=\"p\">,</span> <span class=\"n\">study</span><span class=\"o\">=</span><span class=\"s1\">'user@project1:study1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'attributes'</span><span class=\"p\">][</span><span class=\"s1\">'OPENCGA_INDIVIDUAL'</span><span class=\"p\">][</span><span class=\"s1\">'disorders'</span><span class=\"p\">])</span>\n<span class=\"n\">NA12877</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'OMIM6500'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s2\">\"Chron's Disease\"</span><span class=\"p\">}]</span>\n<span class=\"n\">NA12878</span> <span class=\"p\">[]</span>\n<span class=\"n\">NA12879</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'OMIM6500'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s2\">\"Chron's Disease\"</span><span class=\"p\">}]</span>\n</pre>\n<p>Optional filters and extra options can be added as key-value parameters (where the values can be a comma-separated string or a list).</p>\n</div>\n<div id=\"what-can-i-ask-for\">\n<h4><a href=\"#id10\" rel=\"nofollow\">What can I ask for?</a></h4>\n<p>The best way to know which data can be retrieved for each client check <a href=\"http://bioinfodev.hpc.cam.ac.uk/opencga/webservices/\" rel=\"nofollow\">OpenCGA web services</a> swagger.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6168125, "releases": {"1.4.0": [{"comment_text": "", "digests": {"md5": "47f11a18d6408cfc5148c6871fd2205d", "sha256": "fd4374fbfd5854f2b7c8345fd0c852a0f693842ca7962433c454690fb8c7b844"}, "downloads": -1, "filename": "pyopencga-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "47f11a18d6408cfc5148c6871fd2205d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43799, "upload_time": "2019-05-23T00:39:01", "upload_time_iso_8601": "2019-05-23T00:39:01.586014Z", "url": "https://files.pythonhosted.org/packages/1b/f0/5c59e3b1d7859b8b83eb93eb871227bea7b7c40a70a7a4cb7a282108a6d8/pyopencga-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5112d8fbcf8d8f5f275be6645157f95a", "sha256": "af054d92635bcc728cf55809b28ea471c0fbca8b3b334fd096d144b83dd3fd8f"}, "downloads": -1, "filename": "pyopencga-1.4.0.tar.gz", "has_sig": false, "md5_digest": "5112d8fbcf8d8f5f275be6645157f95a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26646, "upload_time": "2019-05-23T00:39:04", "upload_time_iso_8601": "2019-05-23T00:39:04.488606Z", "url": "https://files.pythonhosted.org/packages/ac/63/573027d19d58ad9a03642776dcd3ac2cd77a86411396dc63d4a8de28bd4c/pyopencga-1.4.0.tar.gz", "yanked": false}], "1.4.2.1": [{"comment_text": "", "digests": {"md5": "a5fd61a23f3717ec5d778630ee58ef99", "sha256": "b55be47ea228a52da3f249017451b4200bf24b2e994131d094e7f5af04327ed6"}, "downloads": -1, "filename": "pyopencga-1.4.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "a5fd61a23f3717ec5d778630ee58ef99", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 43638, "upload_time": "2019-11-20T10:52:38", "upload_time_iso_8601": "2019-11-20T10:52:38.632905Z", "url": "https://files.pythonhosted.org/packages/a2/38/65359ceb1f349321ef589f07723a18fa132295edf195e4a6b8db7ea82044/pyopencga-1.4.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f80683156528f1e87c567c32bad00504", "sha256": "be478e9912141e7aa022521c73363f7c8d754640dace5f25deee5d4a6ff6e229"}, "downloads": -1, "filename": "pyopencga-1.4.2.1.tar.gz", "has_sig": false, "md5_digest": "f80683156528f1e87c567c32bad00504", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28376, "upload_time": "2019-11-20T10:52:40", "upload_time_iso_8601": "2019-11-20T10:52:40.345122Z", "url": "https://files.pythonhosted.org/packages/e3/76/8f77a309811cc0d5e0c3d6bf8d15ebf8d9a075c1a74f963854d4a6c228ac/pyopencga-1.4.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a5fd61a23f3717ec5d778630ee58ef99", "sha256": "b55be47ea228a52da3f249017451b4200bf24b2e994131d094e7f5af04327ed6"}, "downloads": -1, "filename": "pyopencga-1.4.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "a5fd61a23f3717ec5d778630ee58ef99", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 43638, "upload_time": "2019-11-20T10:52:38", "upload_time_iso_8601": "2019-11-20T10:52:38.632905Z", "url": "https://files.pythonhosted.org/packages/a2/38/65359ceb1f349321ef589f07723a18fa132295edf195e4a6b8db7ea82044/pyopencga-1.4.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f80683156528f1e87c567c32bad00504", "sha256": "be478e9912141e7aa022521c73363f7c8d754640dace5f25deee5d4a6ff6e229"}, "downloads": -1, "filename": "pyopencga-1.4.2.1.tar.gz", "has_sig": false, "md5_digest": "f80683156528f1e87c567c32bad00504", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28376, "upload_time": "2019-11-20T10:52:40", "upload_time_iso_8601": "2019-11-20T10:52:40.345122Z", "url": "https://files.pythonhosted.org/packages/e3/76/8f77a309811cc0d5e0c3d6bf8d15ebf8d9a075c1a74f963854d4a6c228ac/pyopencga-1.4.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:12 2020"}