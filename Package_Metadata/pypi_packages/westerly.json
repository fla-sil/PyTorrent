{"info": {"author": "Marco Biasini", "author_email": "mvbiasini@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Topic :: Software Development :: Code Generators"], "description": "# Westerly\n\n    A wind blows over the C\n    so strong that it moves 'const' you see\n    from the west to the east\n    some of 'em at least\n\nWesterly is a script to re-arrange `const` in your C/C++ source files to \nfollow east-const convention. Plenty of articles have been written about \nwhy you would want to do that, I'm not going to repeat the arguments here \nand will instead assume that you have arrived here because you are \nconvinced of the merits.\n\n## Installation\n\nYou can install westerly via pip:\n\n```bash\npip install westerly\n```\n\n## Usage\n\n\nOnce installed you can use the following command to run westerly on a \nsource file:\n\n```bash\nwesterly $file\n```\n\nBy default, the rewritten source will be written to stdout. To perform \nthe replacement in-place, pass the `--in-place` option:\n\n```bash\nwesterly --in-place $file\n```\n\nIt is highly recommended that you only run westerly on version-controlled \nsource-code, so you can go back in case something goes wrong. Westerly uses \na set of heuristics to determine which consts to move and where, it doesn't \nactually have a full understanding of C++ syntax. No heuristic is perfect. \n**You have been warned.**\n\nIt is also highly recommended to pass the changed code through \n`clang-format` (or `git clang-format`) as westerly will sometimes mess up \nformatting a bit. \n\n## Example\n\n```\n> cat example.ccp\nint main(int argc, const char *const *argv) {\n  auto const kUnusedStringLiteral = R\"cpp(\n       const int kFoo = 33;\n  )cpp\";\n  const std::vector<int> vector_of_ints{\n      1, 2, 3, 4, 5, 6,\n  };\n  const std::vector<const char*> vector_of_strings{\n      kUnusedStringLiteral,\n      kUnusedStringLiteral,\n  };\n\n  return argc < kAConstant ? 0 : -1;\n}\n```\n\n```\n> westerly example.cpp\nint main(int argc, char const *const *argv) {\n  auto const kUnusedStringLiteral = R\"cpp(\n       const int kFoo = 33;\n  )cpp\";\n  std::vector<int> const vector_of_ints{\n      1, 2, 3, 4, 5, 6,\n  };\n  std::vector<char const *> const vector_of_strings{\n      kUnusedStringLiteral,\n      kUnusedStringLiteral,\n  };\n\n  return argc < kAConstant ? 0 : -1;\n}\n```\n\n\n# FAQ\n\n## Why, oh why?\n\nBecause sometimes you have solved all business cases and all that there\nis left to do is to cleanup up code and make it consistent. Yes, seriously.\n\n## Why doesn't westerly have options to control spacing around const?\n\nI get it, you don't like the spaces westerly puts around `const`. You \nwould rather prefer to have it output `const&` instead of `const &`. You \nare not alone. Surrounding `const` with spaces on boths sides is just \nthe pragmatic choice as there is no danger of fusing `const` with \nsurrounding tokens by accident. As mentioned above, you should pass your \ncode through `clang-format` after running westerly, which has plenty of \noptions to configure spaces around `const`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/biasmv/westerly", "keywords": "", "license": "lgpl3", "maintainer": "", "maintainer_email": "", "name": "westerly", "package_url": "https://pypi.org/project/westerly/", "platform": "", "project_url": "https://pypi.org/project/westerly/", "project_urls": {"Homepage": "http://github.com/biasmv/westerly"}, "release_url": "https://pypi.org/project/westerly/0.1.1/", "requires_dist": ["pygments", "click"], "requires_python": "", "summary": "Turns west-const C/C++ source files into east-const", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Westerly</h1>\n<pre><code>A wind blows over the C\nso strong that it moves 'const' you see\nfrom the west to the east\nsome of 'em at least\n</code></pre>\n<p>Westerly is a script to re-arrange <code>const</code> in your C/C++ source files to\nfollow east-const convention. Plenty of articles have been written about\nwhy you would want to do that, I'm not going to repeat the arguments here\nand will instead assume that you have arrived here because you are\nconvinced of the merits.</p>\n<h2>Installation</h2>\n<p>You can install westerly via pip:</p>\n<pre>pip install westerly\n</pre>\n<h2>Usage</h2>\n<p>Once installed you can use the following command to run westerly on a\nsource file:</p>\n<pre>westerly <span class=\"nv\">$file</span>\n</pre>\n<p>By default, the rewritten source will be written to stdout. To perform\nthe replacement in-place, pass the <code>--in-place</code> option:</p>\n<pre>westerly --in-place <span class=\"nv\">$file</span>\n</pre>\n<p>It is highly recommended that you only run westerly on version-controlled\nsource-code, so you can go back in case something goes wrong. Westerly uses\na set of heuristics to determine which consts to move and where, it doesn't\nactually have a full understanding of C++ syntax. No heuristic is perfect.\n<strong>You have been warned.</strong></p>\n<p>It is also highly recommended to pass the changed code through\n<code>clang-format</code> (or <code>git clang-format</code>) as westerly will sometimes mess up\nformatting a bit.</p>\n<h2>Example</h2>\n<pre><code>&gt; cat example.ccp\nint main(int argc, const char *const *argv) {\n  auto const kUnusedStringLiteral = R\"cpp(\n       const int kFoo = 33;\n  )cpp\";\n  const std::vector&lt;int&gt; vector_of_ints{\n      1, 2, 3, 4, 5, 6,\n  };\n  const std::vector&lt;const char*&gt; vector_of_strings{\n      kUnusedStringLiteral,\n      kUnusedStringLiteral,\n  };\n\n  return argc &lt; kAConstant ? 0 : -1;\n}\n</code></pre>\n<pre><code>&gt; westerly example.cpp\nint main(int argc, char const *const *argv) {\n  auto const kUnusedStringLiteral = R\"cpp(\n       const int kFoo = 33;\n  )cpp\";\n  std::vector&lt;int&gt; const vector_of_ints{\n      1, 2, 3, 4, 5, 6,\n  };\n  std::vector&lt;char const *&gt; const vector_of_strings{\n      kUnusedStringLiteral,\n      kUnusedStringLiteral,\n  };\n\n  return argc &lt; kAConstant ? 0 : -1;\n}\n</code></pre>\n<h1>FAQ</h1>\n<h2>Why, oh why?</h2>\n<p>Because sometimes you have solved all business cases and all that there\nis left to do is to cleanup up code and make it consistent. Yes, seriously.</p>\n<h2>Why doesn't westerly have options to control spacing around const?</h2>\n<p>I get it, you don't like the spaces westerly puts around <code>const</code>. You\nwould rather prefer to have it output <code>const&amp;</code> instead of <code>const &amp;</code>. You\nare not alone. Surrounding <code>const</code> with spaces on boths sides is just\nthe pragmatic choice as there is no danger of fusing <code>const</code> with\nsurrounding tokens by accident. As mentioned above, you should pass your\ncode through <code>clang-format</code> after running westerly, which has plenty of\noptions to configure spaces around <code>const</code>.</p>\n\n          </div>"}, "last_serial": 6593459, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "76a734e9c090a28f8474d32cfe445f28", "sha256": "e2a9db51487f099db66ca0cfea7852b8f27eb05883d1b8ca9937de3202d11dd9"}, "downloads": -1, "filename": "westerly-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "76a734e9c090a28f8474d32cfe445f28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4495, "upload_time": "2020-02-08T11:31:50", "upload_time_iso_8601": "2020-02-08T11:31:50.405537Z", "url": "https://files.pythonhosted.org/packages/87/4b/028487c7ce555743c559889c628ad80e7f95d64f6cfb7a866774db2d0a6c/westerly-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0dd8715c251dbedc890c2d3fd2a84c76", "sha256": "20331e978f28124803d9d05e67356971964bf1487a885cad7addf4c58abfa756"}, "downloads": -1, "filename": "westerly-0.1.tar.gz", "has_sig": false, "md5_digest": "0dd8715c251dbedc890c2d3fd2a84c76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5901, "upload_time": "2020-02-08T11:31:52", "upload_time_iso_8601": "2020-02-08T11:31:52.855000Z", "url": "https://files.pythonhosted.org/packages/63/2b/2a8ca0cbd4ee00acc79417a3b46c3b7ff55f38f314458ae4d388547d8cc4/westerly-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c6414c7c80ba22755da6518a59727634", "sha256": "33e5c7a070c9fdd77b9e02ffdeceef9374f8674ee942655093f9e6dcbb84a49d"}, "downloads": -1, "filename": "westerly-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c6414c7c80ba22755da6518a59727634", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4750, "upload_time": "2020-02-08T11:38:42", "upload_time_iso_8601": "2020-02-08T11:38:42.440871Z", "url": "https://files.pythonhosted.org/packages/c6/15/ad0dfc31fcaf5ac37b1b8f74cb47d72b5f80e7d2c56c1f6c76027303e1a6/westerly-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9029a3a38bc3c9f9d1e2195d8c121c47", "sha256": "67d31587cd960fc65993988d79cdcc905ee91094196dd77a19a8dffd2cf9b9cc"}, "downloads": -1, "filename": "westerly-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9029a3a38bc3c9f9d1e2195d8c121c47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6093, "upload_time": "2020-02-08T11:38:43", "upload_time_iso_8601": "2020-02-08T11:38:43.902631Z", "url": "https://files.pythonhosted.org/packages/19/14/ef225c1290652649e865ec98671164a59e2ae6cec52c3d9589f55b25b0a7/westerly-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c6414c7c80ba22755da6518a59727634", "sha256": "33e5c7a070c9fdd77b9e02ffdeceef9374f8674ee942655093f9e6dcbb84a49d"}, "downloads": -1, "filename": "westerly-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c6414c7c80ba22755da6518a59727634", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4750, "upload_time": "2020-02-08T11:38:42", "upload_time_iso_8601": "2020-02-08T11:38:42.440871Z", "url": "https://files.pythonhosted.org/packages/c6/15/ad0dfc31fcaf5ac37b1b8f74cb47d72b5f80e7d2c56c1f6c76027303e1a6/westerly-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9029a3a38bc3c9f9d1e2195d8c121c47", "sha256": "67d31587cd960fc65993988d79cdcc905ee91094196dd77a19a8dffd2cf9b9cc"}, "downloads": -1, "filename": "westerly-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9029a3a38bc3c9f9d1e2195d8c121c47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6093, "upload_time": "2020-02-08T11:38:43", "upload_time_iso_8601": "2020-02-08T11:38:43.902631Z", "url": "https://files.pythonhosted.org/packages/19/14/ef225c1290652649e865ec98671164a59e2ae6cec52c3d9589f55b25b0a7/westerly-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:11 2020"}