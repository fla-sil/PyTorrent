{"info": {"author": "Pablo Recio", "author_email": "pablo@potatolondon.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# Django Hashbrown\n\n[![build-status-image]][travis]\n\nYet another dead simple feature switching library for Django.\n\nSupports Django 1.8, 1.9 & 1.10.\n\n## Installation\n\nDjango Hashbrown is [hosted on PyPI](https://pypi.python.org/pypi/django-hashbrown) so\nyou can just install it using either:\n\n\n    $ pip install django-hashbrown\n\nOr:\n\n\n    $ easy_install django-hashbrown\n\nIf you prefer to use the development version of it, you can clone the repository\nand build it manually:\n\n    $ git clone https://github.com/potatolondon/django-hashbrown.git\n    $ cd django-hashbrown\n    $ python setup.py install\n\n\n[build-status-image]: https://secure.travis-ci.org/potatolondon/django-hashbrown.png?branch=master\n[travis]: http://travis-ci.org/potatolondon/django-hashbrown?branch=master\n\n\n##\u00a0Usage\n\nThe main object to store feature switches data is `hashbrown.models.Switch`. This model has 4\nattributes:\n\n* `label` - Short name to identify each Switch\n* `description` - Longer description about what the switch is about\n* `globally_active` - Marks the tag as active all the time\n* `users` - M2M marking what users have the feature activated\n\n### Python\n\nThe simplest way to work with Hashbrown is to use `is_active` method:\n\n    import hashbrown\n\n    if hashbrown.is_active('things'):\n        do_something()\n    else:\n        do_something_else()\n\nIf the given switch doesn't exist it'll be created disabled by default. This\nway `Switch` objects will never be on the database until code that checks it\ngets executed.\n\nHashbrown switches can be linked to different users so only those people have\naccess to certain feature:\n\n    import hashbrown\n\n    if hashbrown.is_active('things', user_object):\n        do_something()\n    else:\n        do_something_else()\n\n### Django templates\n\nSame way, you can use the templatetag `ifswitch`:\n\n    {% load hashbrown_tags %}\n\n    {% ifswitch 'test' %}\n        hello world!\n    {% else %}\n        things!\n    {% endifswitch %}\n\nEven with the user:\n\n    {% load hashbrown_tags %}\n\n    {% ifswitch 'test' user %}\n        hello world!\n    {% else %}\n        things!\n    {% endifswitch %}\n\n## Configuration\n\nYou can prepare your switches before they get created in your settings,\nindicating that way either if it'll be enabled or disabled. You can add into\nyour `settings.py` something like:\n\n    HASHBROWN_SWITCH_DEFAULTS = {\n        'test': {\n            'globally_active': True\n        },\n        'things': {\n            'globally_active': False,\n            'description': 'This does some things'\n        }\n    }\n\nSo, when the switch \"test\" gets checked the first time, the switch will get\ncreated globally active, while \"things\" won't be active but it'll have a\ndescription.\n\n##\u00a0Testing\n\nAnother useful feature is the ability to mock switches in your tests, so\nyou can write tests for any case you are covering. It'll look something like:\n\n    from hashbrown.testutils import switches\n\n    @switches(my_flag=True)\n    def test_things(self):\n        # whatever you wanna test\n\n## Django management command\n\nDjango Hashbrown adds a 'switches' management command, which creates / deletes\nswitches defined in your HASHBROWN_SWITCH_DEFAULTS settings.\n\nTo create all switches listed in HASHBROWN_SWITCH_DEFAULTS:\n\n    python manage.py switches\n\nAny existing switches already in the database will not be updated.\n\nTo create all switches and delete any switches *not* listed in\nHASHBROWN_SWITCH_DEFAULTS:\n\n    python manage.py switches --delete\n\nYou will be prompted for confirmation before the switches are deleted. Use\n`--force` to delete the switches without confirmation.\n\n\n## Acknowledgements\n\nDjango Hashbrown is based and takes some pieces of code from Django Gargoyle\nhttps://github.com/disqus/gargoyle", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/potatolondon/django-hashbrown", "keywords": "django feature switching potato", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-hashbrown", "package_url": "https://pypi.org/project/django-hashbrown/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-hashbrown/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/potatolondon/django-hashbrown"}, "release_url": "https://pypi.org/project/django-hashbrown/0.7.0/", "requires_dist": null, "requires_python": null, "summary": "Yet another dead simple feature switching library for Django.", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Django Hashbrown<br><br>[![build-status-image]][travis]<br><br>Yet another dead simple feature switching library for Django.<br><br>Supports Django 1.8, 1.9 &amp; 1.10.<br><br>## Installation<br><br>Django Hashbrown is [hosted on PyPI](https://pypi.python.org/pypi/django-hashbrown) so<br>you can just install it using either:<br><br><br>    $ pip install django-hashbrown<br><br>Or:<br><br><br>    $ easy_install django-hashbrown<br><br>If you prefer to use the development version of it, you can clone the repository<br>and build it manually:<br><br>    $ git clone https://github.com/potatolondon/django-hashbrown.git<br>    $ cd django-hashbrown<br>    $ python setup.py install<br><br><br>[build-status-image]: https://secure.travis-ci.org/potatolondon/django-hashbrown.png?branch=master<br>[travis]: http://travis-ci.org/potatolondon/django-hashbrown?branch=master<br><br><br>##\u00a0Usage<br><br>The main object to store feature switches data is `hashbrown.models.Switch`. This model has 4<br>attributes:<br><br>* `label` - Short name to identify each Switch<br>* `description` - Longer description about what the switch is about<br>* `globally_active` - Marks the tag as active all the time<br>* `users` - M2M marking what users have the feature activated<br><br>### Python<br><br>The simplest way to work with Hashbrown is to use `is_active` method:<br><br>    import hashbrown<br><br>    if hashbrown.is_active('things'):<br>        do_something()<br>    else:<br>        do_something_else()<br><br>If the given switch doesn't exist it'll be created disabled by default. This<br>way `Switch` objects will never be on the database until code that checks it<br>gets executed.<br><br>Hashbrown switches can be linked to different users so only those people have<br>access to certain feature:<br><br>    import hashbrown<br><br>    if hashbrown.is_active('things', user_object):<br>        do_something()<br>    else:<br>        do_something_else()<br><br>### Django templates<br><br>Same way, you can use the templatetag `ifswitch`:<br><br>    {% load hashbrown_tags %}<br><br>    {% ifswitch 'test' %}<br>        hello world!<br>    {% else %}<br>        things!<br>    {% endifswitch %}<br><br>Even with the user:<br><br>    {% load hashbrown_tags %}<br><br>    {% ifswitch 'test' user %}<br>        hello world!<br>    {% else %}<br>        things!<br>    {% endifswitch %}<br><br>## Configuration<br><br>You can prepare your switches before they get created in your settings,<br>indicating that way either if it'll be enabled or disabled. You can add into<br>your `settings.py` something like:<br><br>    HASHBROWN_SWITCH_DEFAULTS = {<br>        'test': {<br>            'globally_active': True<br>        },<br>        'things': {<br>            'globally_active': False,<br>            'description': 'This does some things'<br>        }<br>    }<br><br>So, when the switch \"test\" gets checked the first time, the switch will get<br>created globally active, while \"things\" won't be active but it'll have a<br>description.<br><br>##\u00a0Testing<br><br>Another useful feature is the ability to mock switches in your tests, so<br>you can write tests for any case you are covering. It'll look something like:<br><br>    from hashbrown.testutils import switches<br><br>    @switches(my_flag=True)<br>    def test_things(self):<br>        # whatever you wanna test<br><br>## Django management command<br><br>Django Hashbrown adds a 'switches' management command, which creates / deletes<br>switches defined in your HASHBROWN_SWITCH_DEFAULTS settings.<br><br>To create all switches listed in HASHBROWN_SWITCH_DEFAULTS:<br><br>    python manage.py switches<br><br>Any existing switches already in the database will not be updated.<br><br>To create all switches and delete any switches *not* listed in<br>HASHBROWN_SWITCH_DEFAULTS:<br><br>    python manage.py switches --delete<br><br>You will be prompted for confirmation before the switches are deleted. Use<br>`--force` to delete the switches without confirmation.<br><br><br>## Acknowledgements<br><br>Django Hashbrown is based and takes some pieces of code from Django Gargoyle<br>https://github.com/disqus/gargoyle\n          </div>"}, "last_serial": 2694385, "releases": {"0.6": [{"comment_text": "", "digests": {"md5": "26d2027fb4596ace50d848c02f4d3aeb", "sha256": "a4d3c4b2d666f95998683ac75392a30886803e02d3fc26718e1fb866160f245b"}, "downloads": -1, "filename": "django-hashbrown-0.6.tar.gz", "has_sig": false, "md5_digest": "26d2027fb4596ace50d848c02f4d3aeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8873, "upload_time": "2014-10-22T15:05:17", "upload_time_iso_8601": "2014-10-22T15:05:17.805721Z", "url": "https://files.pythonhosted.org/packages/ac/ef/1dca10af418cf7dbd9a831f8b59136f8796bacde841073c026f34c26790d/django-hashbrown-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "03052609dd6aecc46193fdb678b48e01", "sha256": "c17f2a438bed2146d343738d79866b6b999385b448edc11a371fd2732eadbc0a"}, "downloads": -1, "filename": "django-hashbrown-0.6.1.tar.gz", "has_sig": false, "md5_digest": "03052609dd6aecc46193fdb678b48e01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8901, "upload_time": "2014-12-15T15:38:17", "upload_time_iso_8601": "2014-12-15T15:38:17.522222Z", "url": "https://files.pythonhosted.org/packages/f5/cb/8a7f0bed273fe6d70862faf0f757fcb8b3ccc52c5119a15a723f9c6f1e4b/django-hashbrown-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "a62143cd7bc106f0ca3479406fac627c", "sha256": "2f9ec762db1f2dafe550882f82158201b6be3c4aa9053259aac59e7419dc25ea"}, "downloads": -1, "filename": "django-hashbrown-0.7.0.tar.gz", "has_sig": false, "md5_digest": "a62143cd7bc106f0ca3479406fac627c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8859, "upload_time": "2017-03-09T15:30:33", "upload_time_iso_8601": "2017-03-09T15:30:33.679194Z", "url": "https://files.pythonhosted.org/packages/36/5b/a22f8580bdc82cc6c203ae670c7cfd7be1451e2b038693cb786a8f90146a/django-hashbrown-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a62143cd7bc106f0ca3479406fac627c", "sha256": "2f9ec762db1f2dafe550882f82158201b6be3c4aa9053259aac59e7419dc25ea"}, "downloads": -1, "filename": "django-hashbrown-0.7.0.tar.gz", "has_sig": false, "md5_digest": "a62143cd7bc106f0ca3479406fac627c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8859, "upload_time": "2017-03-09T15:30:33", "upload_time_iso_8601": "2017-03-09T15:30:33.679194Z", "url": "https://files.pythonhosted.org/packages/36/5b/a22f8580bdc82cc6c203ae670c7cfd7be1451e2b038693cb786a8f90146a/django-hashbrown-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:45 2020"}