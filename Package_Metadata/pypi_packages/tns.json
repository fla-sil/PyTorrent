{"info": {"author": "Grant Atkins", "author_email": "gatkins@cs.odu.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Text Processing :: Markup :: HTML"], "description": "# Top-news-selectors (tns)\n\nA static HTML site parser for parsing the top story titles and URIs for the following websites:\n\n- https://www.washingtonpost.com/\n- http://www.foxnews.com\n- http://abcnews.go.com/\n- https://www.nytimes.com/\n- https://www.usatoday.com/\n- https://www.cbsnews.com/\n- http://www.chicagotribune.com/\n- https://www.nbcnews.com/\n- http://www.latimes.com/\n- https://www.npr.org/\n- https://www.wsj.com/\n\nThis parser is built on [Beautifulsoup4](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) based on the CSS selectors found inside the respective HTML documents.\nThese selectors were chosen based on the selectors that were present during the 30 days for the month of **November 2016**.\n\nThis package has not been tested beyond the month of November 2016, 11/01/2016 - 11/30/2016.\nUse at your own risk when going beyond that range.\n\n## Install\n\nThis package is available via pip:\n\n```\n$ pip install tns\n```\n\n## Usage\n\n```python\n>>> from tns import SiteParser\n>>> html = open('npr.html').read()\n>>> parser = SiteParser(html)\n>>> parser.npr()\n{\n'hero_text': \"foo\",\n'hero_link': 'http://bar.com',\n'headlines': [{'splash_title': 'baz', 'link': 'http://qux.com'}]\n}\n>>> parser.washingtonpost()\n{'hero_text': '', 'hero_link': '', 'headlines': []}\n```\n\nThe keys `hero_text` and `hero_link` refer to the top most identified news post, often identified by a enlarged picture or text across the top of the page.\nHeadlines refer to the subsequent headlines after the hero article, where `splash_title` refers to the title found on the home page of the site not the actual title of the article.\n\nYou can see that the second function call with parser, `parser.washingtonpost()`, has zero entries because the document passed to SiteParser was not intended for that parser.\n\nEach of the sites are paired to a function:\n\n```python\n\"http://abcnews.go.com/\":          parser.abcnews()\n\"https://www.cbsnews.com/\":        parser.cbsnews()\n\"https://www.nbcnews.com/\":        parser.nbcnews()\n\"https://www.washingtonpost.com/\": parser.washingtonpost()\n\"https://www.npr.org/\":            parser.npr()\n\"http://www.latimes.com/\":         parser.latimes()\n\"https://www.usatoday.com/\":       parser.usatoday()\n\"https://www.wsj.com/\":            parser.wsj()\n\"https://www.nytimes.com/\":        parser.nytimes()\n\"http://www.foxnews.com\":          parser.foxnews()\n\"http://www.chicagotribune.com/\":  parser.chicagotribune()\n```\n\n## Debugging\n\nWhen the parser fails to find specific headlines or returns no headlines at all, this could be due to:\n\n- Iframes loading content dynamically\n- Headlines being injected via Javascript\n- The wrong parser is being used for the specified site\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/oduwsdl/top-news-selectors", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oduwsdl/top-news-selectors", "keywords": "html web tns odu memento", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tns", "package_url": "https://pypi.org/project/tns/", "platform": "", "project_url": "https://pypi.org/project/tns/", "project_urls": {"Download": "https://github.com/oduwsdl/top-news-selectors", "Homepage": "https://github.com/oduwsdl/top-news-selectors"}, "release_url": "https://pypi.org/project/tns/1.0.0/", "requires_dist": ["beautifulsoup4"], "requires_python": "", "summary": "Top News Selectors (tns): Top news parsing from select websites", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Top-news-selectors (tns)</p>\n<p>A static HTML site parser for parsing the top story titles and URIs for the following websites:</p>\n<ul>\n<li><a href=\"https://www.washingtonpost.com/\" rel=\"nofollow\">https://www.washingtonpost.com/</a></li>\n<li><a href=\"http://www.foxnews.com\" rel=\"nofollow\">http://www.foxnews.com</a></li>\n<li><a href=\"http://abcnews.go.com/\" rel=\"nofollow\">http://abcnews.go.com/</a></li>\n<li><a href=\"https://www.nytimes.com/\" rel=\"nofollow\">https://www.nytimes.com/</a></li>\n<li><a href=\"https://www.usatoday.com/\" rel=\"nofollow\">https://www.usatoday.com/</a></li>\n<li><a href=\"https://www.cbsnews.com/\" rel=\"nofollow\">https://www.cbsnews.com/</a></li>\n<li><a href=\"http://www.chicagotribune.com/\" rel=\"nofollow\">http://www.chicagotribune.com/</a></li>\n<li><a href=\"https://www.nbcnews.com/\" rel=\"nofollow\">https://www.nbcnews.com/</a></li>\n<li><a href=\"http://www.latimes.com/\" rel=\"nofollow\">http://www.latimes.com/</a></li>\n<li><a href=\"https://www.npr.org/\" rel=\"nofollow\">https://www.npr.org/</a></li>\n<li><a href=\"https://www.wsj.com/\" rel=\"nofollow\">https://www.wsj.com/</a></li>\n</ul>\n<p>This parser is built on [Beautifulsoup4](<a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\" rel=\"nofollow\">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a>) based on the CSS selectors found inside the respective HTML documents.\nThese selectors were chosen based on the selectors that were present during the 30 days for the month of <strong>November 2016</strong>.</p>\n<p>This package has not been tested beyond the month of November 2016, 11/01/2016 - 11/30/2016.\nUse at your own risk when going beyond that range.</p>\n<p>## Install</p>\n<p>This package is available via pip:</p>\n<p><tt>`\n$ pip install tns\n`</tt></p>\n<p>## Usage</p>\n<p><tt>`python\n&gt;&gt;&gt; from tns import SiteParser\n&gt;&gt;&gt; html = <span class=\"pre\">open('npr.html').read()</span>\n&gt;&gt;&gt; parser = SiteParser(html)\n&gt;&gt;&gt; parser.npr()\n{\n'hero_text': \"foo\",\n'hero_link': <span class=\"pre\">'http://bar.com',</span>\n'headlines': <span class=\"pre\">[{'splash_title':</span> 'baz', 'link': <span class=\"pre\">'http://qux.com'}]</span>\n}\n&gt;&gt;&gt; parser.washingtonpost()\n{'hero_text': '', 'hero_link': '', 'headlines': []}\n`</tt></p>\n<p>The keys <cite>hero_text</cite> and <cite>hero_link</cite> refer to the top most identified news post, often identified by a enlarged picture or text across the top of the page.\nHeadlines refer to the subsequent headlines after the hero article, where <cite>splash_title</cite> refers to the title found on the home page of the site not the actual title of the article.</p>\n<p>You can see that the second function call with parser, <cite>parser.washingtonpost()</cite>, has zero entries because the document passed to SiteParser was not intended for that parser.</p>\n<p>Each of the sites are paired to a function:</p>\n<p><tt>`python\n<span class=\"pre\">\"http://abcnews.go.com/\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.abcnews()\n<span class=\"pre\">\"https://www.cbsnews.com/\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.cbsnews()\n<span class=\"pre\">\"https://www.nbcnews.com/\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.nbcnews()\n<span class=\"pre\">\"https://www.washingtonpost.com/\":</span> parser.washingtonpost()\n<span class=\"pre\">\"https://www.npr.org/\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.npr()\n<span class=\"pre\">\"http://www.latimes.com/\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.latimes()\n<span class=\"pre\">\"https://www.usatoday.com/\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.usatoday()\n<span class=\"pre\">\"https://www.wsj.com/\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.wsj()\n<span class=\"pre\">\"https://www.nytimes.com/\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.nytimes()\n<span class=\"pre\">\"http://www.foxnews.com\":</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parser.foxnews()\n<span class=\"pre\">\"http://www.chicagotribune.com/\":</span>\u00a0 parser.chicagotribune()\n`</tt></p>\n<p>## Debugging</p>\n<p>When the parser fails to find specific headlines or returns no headlines at all, this could be due to:</p>\n<ul>\n<li>Iframes loading content dynamically</li>\n<li>Headlines being injected via Javascript</li>\n<li>The wrong parser is being used for the specified site</li>\n</ul>\n\n          </div>"}, "last_serial": 3549500, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8229415658d549f3377dfd0acc435867", "sha256": "a745237ef5a5662af7b9d3e0299a81c36afaeb85718982a8bec1b67c01cec0bf"}, "downloads": -1, "filename": "tns-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8229415658d549f3377dfd0acc435867", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7388, "upload_time": "2018-02-04T02:03:41", "upload_time_iso_8601": "2018-02-04T02:03:41.197255Z", "url": "https://files.pythonhosted.org/packages/76/61/64cc2486f92de0051560147b8df7b2b8ec4469e72096b6c9476a4419d788/tns-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7f5d5691175ec6e40bf86126a1616fd", "sha256": "7bd90549e71231a95675b2d76760bfc43ca9fb4b335fd762db8ddef17a51f4c9"}, "downloads": -1, "filename": "tns-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c7f5d5691175ec6e40bf86126a1616fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5297, "upload_time": "2018-02-04T02:03:42", "upload_time_iso_8601": "2018-02-04T02:03:42.028080Z", "url": "https://files.pythonhosted.org/packages/36/a8/d19acc83571840969a39fb8e18c1f8b444755bbebd7afb81c191d0787228/tns-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8229415658d549f3377dfd0acc435867", "sha256": "a745237ef5a5662af7b9d3e0299a81c36afaeb85718982a8bec1b67c01cec0bf"}, "downloads": -1, "filename": "tns-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8229415658d549f3377dfd0acc435867", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7388, "upload_time": "2018-02-04T02:03:41", "upload_time_iso_8601": "2018-02-04T02:03:41.197255Z", "url": "https://files.pythonhosted.org/packages/76/61/64cc2486f92de0051560147b8df7b2b8ec4469e72096b6c9476a4419d788/tns-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7f5d5691175ec6e40bf86126a1616fd", "sha256": "7bd90549e71231a95675b2d76760bfc43ca9fb4b335fd762db8ddef17a51f4c9"}, "downloads": -1, "filename": "tns-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c7f5d5691175ec6e40bf86126a1616fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5297, "upload_time": "2018-02-04T02:03:42", "upload_time_iso_8601": "2018-02-04T02:03:42.028080Z", "url": "https://files.pythonhosted.org/packages/36/a8/d19acc83571840969a39fb8e18c1f8b444755bbebd7afb81c191d0787228/tns-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:01 2020"}