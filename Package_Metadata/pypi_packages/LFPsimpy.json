{"info": {"author": "Justas Birgiolas", "author_email": "justas@asu.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.com/JustasB/LFPsimpy.svg?branch=master)](https://travis-ci.com/JustasB/LFPsimpy)\n[![codecov](https://codecov.io/gh/JustasB/LFPsimpy/branch/master/graph/badge.svg)](https://codecov.io/gh/JustasB/LFPsimpy)\n[![PyPI version](https://badge.fury.io/py/LFPsimpy.svg)](https://badge.fury.io/py/LFPsimpy)\n\n# LFPsimpy: A zero-model-modification, MPI-compatible Python package to compute Local Field Potentials of [NEURON simulator](https://neuron.yale.edu) models\n\n**Zero-modification:** With LFPsimpy, there is no need to modify or re-write a NEURON model to fit a particular pattern or style. Given an existing NEURON model (HOC/Python/cell/network), just add a few Python lines to specify the location and parameters of the LFP electrode. Then run the simulation and plot or further process the LFP signal.\n\n**Python-based:** The package is written in pure Python. Download the Python source code and modify or extend it using a familiar language. A small [.HOC file](https://www.neuron.yale.edu/neuron/static/new_doc/programming/hocsyntax.html) allows plotting the LFP signal using native NEURON graphs.\n\n**Multiple LFP algorithms:** `Line`, `Point`, and `RC` methods of [Parasuram et. al. (2016)]( http://journal.frontiersin.org/article/10.3389/fncom.2016.00065/abstract) are implemented. Extend the Python source code to use a custom algorithm.\n\n**Unlimited electrodes:** Place any number of LFP electrodes in arbitrary 3D locations to simulate multi-electrode arrays.\n\n**MPI-compatible:** The package works with single- and multi-process simulations. Rank 0 contains the electrode values of the whole model.\n\n# Requirements\n\nLFPsimpy requires a working version of NEURON 7.5+ either installed from a [package/installer](https://www.neuron.yale.edu/neuron/download) (easier) or [compiled](https://neurojustas.com/2018/03/27/tutorial-installing-neuron-simulator-with-python-on-ubuntu-linux/) (more challenging). Linux, Mac, and Windows versions are supported.\n\nYou must be able to run at least *one* of these commands in a terminal window without errors:\n - `nrniv -python`\n - Or `python -c 'from neuron import h'`\n\nIf you cannot run any of these commands, it indicates that there is something amiss with your NEURON installation. Search the error messages on the [NEURON forum](https://www.neuron.yale.edu/phpBB/) for help.\n\n# Installation\n\nInstallation depends on how you installed NEURON simulator (installed vs. compiled). \n\n## If you installed a downloaded NEURON package\nDownload and extract [this LFPsimpy ZIP file](https://github.com/JustasB/LFPsimpy/archive/master.zip) to a known folder. Then note the location of the `LFPsimpy` sub-folder.\n\nThen append the `LFPsimpy` parent folder location to your `$PYTHONPATH` environmental variable. E.g. `export PYTHONPATH=$PYTHONPATH:/path/to/LFPsimpy-master/`. Place the line in your shell startup file (e.g. `~/.bashrc`) to ensure the variable remains set after an OS restart.\n\n## If you compiled NEURON+Python\n\nTo install the library, simply type in `pip install lfpsimpy` in your terminal.\n\n\n# Usage\n\nTo use the library, first load your HOC or Python model in NEURON, insert LFP electrode(s), run simulation, and plot/process the electrode signal.\n\n```\n# Load your cell or network model\nfrom neuron import h\nrun_scripts_build_model_etc()\n\n# Load the LFP library\nfrom LFPsimpy import LfpElectrode\n\n# Place an LFP electrode\n# x,y,z in microns\n# sampling_period in ms. E.g. 0.1 => 10kHz\n# method: either 'Line', 'Point', or 'RC'. See: Parasuram et. al. (2016)\nle = LfpElectrode(x=100, y=50, z=0, sampling_period=0.1, method='Line')\n\n# Run the simulation\nh.tstop = 100 # <- important!\nh.run()\n\n# Plot/process LFP values\nle.times   # Contains the sampled LFP times\nle.values  # Contains the corresponding sampled LFP voltage values (nV)\n```\n\n**More examples** are described in [this Jupyter notebook](https://github.com/JustasB/hoc2swc/blob/master/examples.ipynb).\n\n# NEURON GUI plotting\nWhen using the NEURON GUI, after the electrode is inserted, you can plot the LFP electrode value with:\n\n`Graph > Current Axis > Plot What? > Objects > LfpElectrode[0].value`\nthen\n`In Tools > RunControl, set Points plotted/ms to 1/sampling_period`\n\n`Init & Run` will show the LFP value of the first inserted electrode\n\n# How It Works\nLFPsimpy is a Python re-implementation of [LFPsim](https://github.com/compneuro/LFPsim) described in [Parasuram et. al. (2016)]( http://journal.frontiersin.org/article/10.3389/fncom.2016.00065/abstract). The original publication estimated LFPs using three different methods and also did not require a NEURON model to be in a specific format. However, the original implementation is in HOC, is not MPI-compatible, and places restrictions on the number of electrodes that can be placed in a simulation. \n\nThis library encapsulates the three LFP estimation methods described in the paper and uses the more efficient NEURON's [`i_membrane_`](https://www.neuron.yale.edu/neuron/static/new_doc/simctrl/cvode.html#CVode.use_fast_imem) method. These changes allow arbitrary number of electrodes and allows computing the LFP in MPI-parallelized models.\n\n# Issues\nWhile NEURON allows running simulations past the `tstop` value, this library does not support this usage pattern. If `h.t` exceeds `h.tstop` a warning is shown and the LFP signal is not computed.\n\nIf you encounter an issue, first make sure it's not due to NEURON itself. If it is, please contact the [NEURON team](https://www.neuron.yale.edu/phpBB/). If the issue is with this library, please create an [issue on Github](https://github.com/JustasB/LFPsimpy/issues).\n\n# Contributing\n\nTo contribute, please open an issue first and discuss your plan for contributing. Then fork this repository and commit a pull-request with your changes.\n\n# Acknowledgements\nLFPsimpy is a Python re-implementation of [LFPsim](https://github.com/compneuro/LFPsim) described in [Parasuram et. al. (2016)]( http://journal.frontiersin.org/article/10.3389/fncom.2016.00065/abstract). When using LFPsimpy in research projects, please cite the original publication and this repository.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/justasb/LFPsimpy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "LFPsimpy", "package_url": "https://pypi.org/project/LFPsimpy/", "platform": "", "project_url": "https://pypi.org/project/LFPsimpy/", "project_urls": {"Homepage": "https://github.com/justasb/LFPsimpy"}, "release_url": "https://pypi.org/project/LFPsimpy/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Zero-model-modification, MPI-compatible Python package for computing NEURON simulator model local field potentials (LFPs)", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/JustasB/LFPsimpy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c9fde5db35ff592bf9197b04eeb17b1079f858a1/68747470733a2f2f7472617669732d63692e636f6d2f4a7573746173422f4c465073696d70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/JustasB/LFPsimpy\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8106a3407ceb2d5f6d7a3b601f2ad71475229cfd/68747470733a2f2f636f6465636f762e696f2f67682f4a7573746173422f4c465073696d70792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/LFPsimpy\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb0cb6e62ecb1613ca680d538821597e63f4e9fe/68747470733a2f2f62616467652e667572792e696f2f70792f4c465073696d70792e737667\"></a></p>\n<h1>LFPsimpy: A zero-model-modification, MPI-compatible Python package to compute Local Field Potentials of <a href=\"https://neuron.yale.edu\" rel=\"nofollow\">NEURON simulator</a> models</h1>\n<p><strong>Zero-modification:</strong> With LFPsimpy, there is no need to modify or re-write a NEURON model to fit a particular pattern or style. Given an existing NEURON model (HOC/Python/cell/network), just add a few Python lines to specify the location and parameters of the LFP electrode. Then run the simulation and plot or further process the LFP signal.</p>\n<p><strong>Python-based:</strong> The package is written in pure Python. Download the Python source code and modify or extend it using a familiar language. A small <a href=\"https://www.neuron.yale.edu/neuron/static/new_doc/programming/hocsyntax.html\" rel=\"nofollow\">.HOC file</a> allows plotting the LFP signal using native NEURON graphs.</p>\n<p><strong>Multiple LFP algorithms:</strong> <code>Line</code>, <code>Point</code>, and <code>RC</code> methods of <a href=\"http://journal.frontiersin.org/article/10.3389/fncom.2016.00065/abstract\" rel=\"nofollow\">Parasuram et. al. (2016)</a> are implemented. Extend the Python source code to use a custom algorithm.</p>\n<p><strong>Unlimited electrodes:</strong> Place any number of LFP electrodes in arbitrary 3D locations to simulate multi-electrode arrays.</p>\n<p><strong>MPI-compatible:</strong> The package works with single- and multi-process simulations. Rank 0 contains the electrode values of the whole model.</p>\n<h1>Requirements</h1>\n<p>LFPsimpy requires a working version of NEURON 7.5+ either installed from a <a href=\"https://www.neuron.yale.edu/neuron/download\" rel=\"nofollow\">package/installer</a> (easier) or <a href=\"https://neurojustas.com/2018/03/27/tutorial-installing-neuron-simulator-with-python-on-ubuntu-linux/\" rel=\"nofollow\">compiled</a> (more challenging). Linux, Mac, and Windows versions are supported.</p>\n<p>You must be able to run at least <em>one</em> of these commands in a terminal window without errors:</p>\n<ul>\n<li><code>nrniv -python</code></li>\n<li>Or <code>python -c 'from neuron import h'</code></li>\n</ul>\n<p>If you cannot run any of these commands, it indicates that there is something amiss with your NEURON installation. Search the error messages on the <a href=\"https://www.neuron.yale.edu/phpBB/\" rel=\"nofollow\">NEURON forum</a> for help.</p>\n<h1>Installation</h1>\n<p>Installation depends on how you installed NEURON simulator (installed vs. compiled).</p>\n<h2>If you installed a downloaded NEURON package</h2>\n<p>Download and extract <a href=\"https://github.com/JustasB/LFPsimpy/archive/master.zip\" rel=\"nofollow\">this LFPsimpy ZIP file</a> to a known folder. Then note the location of the <code>LFPsimpy</code> sub-folder.</p>\n<p>Then append the <code>LFPsimpy</code> parent folder location to your <code>$PYTHONPATH</code> environmental variable. E.g. <code>export PYTHONPATH=$PYTHONPATH:/path/to/LFPsimpy-master/</code>. Place the line in your shell startup file (e.g. <code>~/.bashrc</code>) to ensure the variable remains set after an OS restart.</p>\n<h2>If you compiled NEURON+Python</h2>\n<p>To install the library, simply type in <code>pip install lfpsimpy</code> in your terminal.</p>\n<h1>Usage</h1>\n<p>To use the library, first load your HOC or Python model in NEURON, insert LFP electrode(s), run simulation, and plot/process the electrode signal.</p>\n<pre><code># Load your cell or network model\nfrom neuron import h\nrun_scripts_build_model_etc()\n\n# Load the LFP library\nfrom LFPsimpy import LfpElectrode\n\n# Place an LFP electrode\n# x,y,z in microns\n# sampling_period in ms. E.g. 0.1 =&gt; 10kHz\n# method: either 'Line', 'Point', or 'RC'. See: Parasuram et. al. (2016)\nle = LfpElectrode(x=100, y=50, z=0, sampling_period=0.1, method='Line')\n\n# Run the simulation\nh.tstop = 100 # &lt;- important!\nh.run()\n\n# Plot/process LFP values\nle.times   # Contains the sampled LFP times\nle.values  # Contains the corresponding sampled LFP voltage values (nV)\n</code></pre>\n<p><strong>More examples</strong> are described in <a href=\"https://github.com/JustasB/hoc2swc/blob/master/examples.ipynb\" rel=\"nofollow\">this Jupyter notebook</a>.</p>\n<h1>NEURON GUI plotting</h1>\n<p>When using the NEURON GUI, after the electrode is inserted, you can plot the LFP electrode value with:</p>\n<p><code>Graph &gt; Current Axis &gt; Plot What? &gt; Objects &gt; LfpElectrode[0].value</code>\nthen\n<code>In Tools &gt; RunControl, set Points plotted/ms to 1/sampling_period</code></p>\n<p><code>Init &amp; Run</code> will show the LFP value of the first inserted electrode</p>\n<h1>How It Works</h1>\n<p>LFPsimpy is a Python re-implementation of <a href=\"https://github.com/compneuro/LFPsim\" rel=\"nofollow\">LFPsim</a> described in <a href=\"http://journal.frontiersin.org/article/10.3389/fncom.2016.00065/abstract\" rel=\"nofollow\">Parasuram et. al. (2016)</a>. The original publication estimated LFPs using three different methods and also did not require a NEURON model to be in a specific format. However, the original implementation is in HOC, is not MPI-compatible, and places restrictions on the number of electrodes that can be placed in a simulation.</p>\n<p>This library encapsulates the three LFP estimation methods described in the paper and uses the more efficient NEURON's <a href=\"https://www.neuron.yale.edu/neuron/static/new_doc/simctrl/cvode.html#CVode.use_fast_imem\" rel=\"nofollow\"><code>i_membrane_</code></a> method. These changes allow arbitrary number of electrodes and allows computing the LFP in MPI-parallelized models.</p>\n<h1>Issues</h1>\n<p>While NEURON allows running simulations past the <code>tstop</code> value, this library does not support this usage pattern. If <code>h.t</code> exceeds <code>h.tstop</code> a warning is shown and the LFP signal is not computed.</p>\n<p>If you encounter an issue, first make sure it's not due to NEURON itself. If it is, please contact the <a href=\"https://www.neuron.yale.edu/phpBB/\" rel=\"nofollow\">NEURON team</a>. If the issue is with this library, please create an <a href=\"https://github.com/JustasB/LFPsimpy/issues\" rel=\"nofollow\">issue on Github</a>.</p>\n<h1>Contributing</h1>\n<p>To contribute, please open an issue first and discuss your plan for contributing. Then fork this repository and commit a pull-request with your changes.</p>\n<h1>Acknowledgements</h1>\n<p>LFPsimpy is a Python re-implementation of <a href=\"https://github.com/compneuro/LFPsim\" rel=\"nofollow\">LFPsim</a> described in <a href=\"http://journal.frontiersin.org/article/10.3389/fncom.2016.00065/abstract\" rel=\"nofollow\">Parasuram et. al. (2016)</a>. When using LFPsimpy in research projects, please cite the original publication and this repository.</p>\n\n          </div>"}, "last_serial": 6260034, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7e67f763ab450c53e35b15128d53de22", "sha256": "2f9a0603897e9b8d7a120235fca71d80146c73214bb456c5d5b9bca141ebfdd0"}, "downloads": -1, "filename": "LFPsimpy-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "7e67f763ab450c53e35b15128d53de22", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 8723, "upload_time": "2019-12-02T03:22:38", "upload_time_iso_8601": "2019-12-02T03:22:38.882552Z", "url": "https://files.pythonhosted.org/packages/eb/17/2ea69320a8fd7c6433c0aa3853c710ab08b3bca762a9bbfba6675d5dc3cb/LFPsimpy-0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e7293d3fca81e573ea84aabb58be124", "sha256": "754eb0fcada1fd2436a61846ba6f98c8ed7586329d9046aa4dae591e885fcb97"}, "downloads": -1, "filename": "LFPsimpy-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3e7293d3fca81e573ea84aabb58be124", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7914, "upload_time": "2019-12-02T03:22:41", "upload_time_iso_8601": "2019-12-02T03:22:41.214327Z", "url": "https://files.pythonhosted.org/packages/aa/f9/7c04881d67610289a53eeb6e6cbd41ac587b0fb999245a8c1ab4644a3ad8/LFPsimpy-0.1-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b48f3034fa9943b84a570e18604c69fd", "sha256": "64ceec4c26534c7baa10c92bacbc066b1b47330be4a4fbe77093610de1c0ec2a"}, "downloads": -1, "filename": "LFPsimpy-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b48f3034fa9943b84a570e18604c69fd", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9469, "upload_time": "2019-12-08T00:18:14", "upload_time_iso_8601": "2019-12-08T00:18:14.280548Z", "url": "https://files.pythonhosted.org/packages/13/a1/a7cd0923cddac14c8d6cf7d8aff347ca4a6a19b224208311aab367e968fb/LFPsimpy-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49c9914af9fd4b9aeccd37e94012ecc4", "sha256": "301468619cf2c1b5a303239c1576f3025298b96cb29fc0189105b526841297e5"}, "downloads": -1, "filename": "LFPsimpy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49c9914af9fd4b9aeccd37e94012ecc4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8656, "upload_time": "2019-12-08T00:18:15", "upload_time_iso_8601": "2019-12-08T00:18:15.673254Z", "url": "https://files.pythonhosted.org/packages/b2/be/5026b892e318eec03fb3646ada3d10e97d2976c89e1f869f47d317028ff1/LFPsimpy-0.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b48f3034fa9943b84a570e18604c69fd", "sha256": "64ceec4c26534c7baa10c92bacbc066b1b47330be4a4fbe77093610de1c0ec2a"}, "downloads": -1, "filename": "LFPsimpy-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b48f3034fa9943b84a570e18604c69fd", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9469, "upload_time": "2019-12-08T00:18:14", "upload_time_iso_8601": "2019-12-08T00:18:14.280548Z", "url": "https://files.pythonhosted.org/packages/13/a1/a7cd0923cddac14c8d6cf7d8aff347ca4a6a19b224208311aab367e968fb/LFPsimpy-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49c9914af9fd4b9aeccd37e94012ecc4", "sha256": "301468619cf2c1b5a303239c1576f3025298b96cb29fc0189105b526841297e5"}, "downloads": -1, "filename": "LFPsimpy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49c9914af9fd4b9aeccd37e94012ecc4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8656, "upload_time": "2019-12-08T00:18:15", "upload_time_iso_8601": "2019-12-08T00:18:15.673254Z", "url": "https://files.pythonhosted.org/packages/b2/be/5026b892e318eec03fb3646ada3d10e97d2976c89e1f869f47d317028ff1/LFPsimpy-0.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:46:47 2020"}