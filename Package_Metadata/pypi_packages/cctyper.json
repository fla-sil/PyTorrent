{"info": {"author": "Jakob Russel", "author_email": "russel2620@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# CRISPRCasTyper\n\nDetect CRISPR-Cas genes and arrays, and predict the subtype based on both Cas genes and CRISPR repeat sequence.\n\n[CRISPRCasTyper and RepeatType are also available through a webserver](http://crisprcastyper.crispr.dk)\n\nThis software finds Cas genes with a large suite of HMMs, then groups these HMMs into operons, and predicts the subtype of the operons based on a scoring scheme.\nFurthermore, it finds CRISPR arrays with [minced](https://github.com/ctSkennerton/minced), and using a kmer-based machine learning approach (extreme gradient boosting trees) it predicts the subtype of the CRISPR arrays based on the consensus repeat. \nIt then connects the Cas operons and CRISPR arrays, producing as output:\n* CRISPR-Cas loci, with consensus subtype prediction based on both Cas genes (mostly) and CRISPR consensus repeats\n* Orphan Cas operons, and their predicted subtype\n* Orphan CRISPR arrays, and their predicted associated subtype\n\n#### It includes the following 39 subtypes/variants:\n* All the ones in the most recent Nature Reviews Microbiology (Makarova et al. 2020): [Evolutionary classification of CRISPR\u2013Cas systems: a burst of class 2 and derived variants](https://doi.org/10.1038/s41579-019-0299-x)\n* Updated type IV subtypes and variants based on: [Type IV CRISPR\u2013Cas systems are highly diverse and involved in competition between plasmids](https://doi.org/10.1093/nar/gkz1197)\n* Type V-K: [RNA-guided DNA insertion with CRISPR-associated transposases](https://doi.org/10.1126/science.aax9181)\n* Transposon associated type I-F: [Transposon-encoded CRISPR\u2013Cas systems direct RNA-guided DNA integration](https://doi.org/10.1038/s41586-019-1323-z)\n\n#### It can automatically draw gene maps of CRISPR-Cas systems and orphan Cas operons and CRISPR arrays\n<img src='img/plot.png' align=\"left\" height=\"200\" />\n\n#### Citation\nComing soon...\n\n# Table of contents\n1. [Quick start](#quick)\n2. [Installation](#install)\n3. [CRISPRCasTyper - How to](#cctyperhow)\n    * [Plotting](#plot)\n4. [RepeatType - How to](#repeattype)\n4. [RepeatType - Train](#repeattrain)\n\n## Quick start <a name=\"quick\"></a>\n\n```sh\nconda create -n cctyper -c conda-forge -c bioconda -c russel88 cctyper\nconda activate cctyper\ncctyper my.fasta my_output\n```\n\n## Installation <a name=\"install\"></a>\nCRISPRCasTyper can be installed either through conda or pip.\n\nIt is advised to use conda, since this installs CRISPRCasTyper and all dependencies, and downloads with database in one go.\n\n### Conda\nUse [miniconda](https://docs.conda.io/en/latest/miniconda.html) or [anaconda](https://www.anaconda.com/) to install.\n\nCreate the environment with CRISPRCasTyper and all dependencies and database\n```sh\nconda create -n cctyper -c conda-forge -c bioconda -c russel88 cctyper\n```\n\n### pip\nIf you have the dependencies (Python >= 3.8, HMMER >= 3.2, Prodigal >= 2.6, grep, sed) in your PATH you can install with pip\n\n```sh\npython -m pip install cctyper\n```\n\n#### When installing with pip, you need to download the database manually: \n```sh\n# Download and unpack\nsvn checkout https://github.com/Russel88/CRISPRCasTyper/trunk/data\ntar -xvzf data/Profiles.tar.gz\nmv Profiles/ data/\nrm data/Profiles.tar.gz\n\n# Tell CRISPRCasTyper where the data is:\n# either by setting an environment variable (has to done for each terminal session, or added to .bashrc):\nexport CCTYPER_DB=\"/path/to/data/\"\n# or by using the --db argument each time you run CRISPRCasTyper:\ncctyper input.fa output --db /path/to/data/\n```\n\n## CRISPRCasTyper - How to <a name=\"cctyperhow\"></a>\nCRISPRCasTyper takes as input a nucleotide fasta, and produces outputs with CRISPR-Cas predictions\n\n#### Activate environment\n```sh\nconda activate cctyper\n```\n\n#### Run with a nucleotide fasta as input\n```sh\ncctyper genome.fa my_output\n```\n\n#### If you have a complete circular genome\n```sh\ncctyper genome.fa my_output --circular\n```\n\n#### For metagenome assemblies and short contigs/plasmids/phages, change the prodigal mode\nThe default prodigal mode expects the input to be a single draft or complete genome\n```sh\ncctyper assembly.fa my_output --prodigal meta\n```\n\n#### Check the different options\n```sh\ncctyper -h\n```\n\n#### Output <a name=\"cctyperout\"></a>\n* **CRISPR_Cas.tab:**           CRISPR_Cas loci, with consensus subtype prediction\n    * Contig: Sequence accession\n    * Operon: Operon ID (Sequence accession @ NUMBER)\n    * Operon_Pos: [Start, End] of operon\n    * Prediction: Consenus prediction based on both Cas operon and CRISPR arrays\n    * CRISPRs: CRISPRs adjacent to Cas operon\n    * Distances: Distances to CRISPRs from Cas operon\n    * Prediction_Cas: Subtype prediction based on Cas operon\n    * Prediction_CRISPRs: Subtype prediction of CRISPRs based on CRISPR repeat sequences\n* **cas_operons.tab:**          All certain Cas operons\n    * Contig: Sequence accession\n    * Operon: Operon ID (Sequence accession @ NUMBER)\n    * Start: Start of operon\n    * End: End of operon\n    * Prediction: Subtype prediction\n    * Complete_Interference: Percent completion of the interference module(s). Can be a list if best_type is a list (Hybrid and Ambiguous)\n    * Complete_Adaptation: Percent completion of the adaptation module(s). Can be a list if best_type is a list (Hybrid and Ambiguous)\n    * Best_type: Subtype with the highest score. If the score is high then Prediction = Best_type\n    * Best_score: Score of the highest scoring subtype\n    * Genes: List of Cas genes\n    * Positions: List of Gene IDs for the genes\n    * E-values: List of E-values for the genes\n    * CoverageSeq: List of sequence coverages for the genes\n    * CoverageHMM: List of HMM coverages for the genes\n* **crisprs_all.tab:**          All CRISPR arrays\n    * Contig: Sequence accession\n    * CRISPR: CRISPR ID (Sequence accession _ NUMBER)\n    * Start: Start of CRISPR\n    * End: End of CRISPR\n    * Consensus_repeat: Consensus repeat sequence\n    * N_repeats: Number of repeats\n    * Prediction: Prediction of the associated subtype based on the repeat sequence\n    * Subtype: Subtype with highest prediction probability. Prediction = Subtype if Subtype_probability is high\n    * Subtype_probability: Probability of subtype prediction\n* **crisprs_orphan.tab:**       Orphan CRISPRs (those not in CRISPR_Cas.tab)\n    * Same columns as crisprs_all.tab\n* **cas_operons_orphan.tab:**   Orphan Cas operons (those not in CRISPR_Cas.tab)\n    * Same columns as cas_operons.tab\n* **CRISPR_Cas_putative.tab:**  Putative CRISPR_Cas loci, often lonely Cas genes next to a CRISPR array\n    * Same columns as CRISPR_Cas.tab\n* **cas_operons_putative.tab:** Putative Cas operons, mostly false positives, but also some ambiguous and partial systems\n    * Same columns as cas_operons.tab\n* **spacers/*.fa:**             Fasta files with all spacer sequences\n* **hmmer.tab:**                All HMM vs. ORF matches, unfiltered results\n    * Hmm: HMM name\n    * ORF: ORF name (Sequence accession _ Gene ID)\n    * tlen: ORF length\n    * qlen: HMM length\n    * Eval: E-value of alignment\n    * score: Alignment score\n    * start: ORF start\n    * end: ORF end\n    * Acc: Sequence accession\n    * Pos: Gene ID\n    * Cov_seq: Sequence coverage\n    * Cov_hmm: HMM coverage\n    * strand: Coding strand is like input (1) or reverse complement (-1)\n* **genes.tab**                 All genes and their positions\n    * Contig: Sequence accession\n    * Start: Start of ORF\n    * End: End of ORF\n    * Strand: Coding strand is like input (1) or reverse complement (-1)\n    * Pos: Gene ID\n* **arguments.tab:**            File with arguments given to CRISPRCasTyper\n* **hmmer.log**                 Error messages from HMMER (only produced if any errors were encountered)\n\n##### If run with `--keep_tmp` the following is also produced\n* **prodigal.log**              Log from prodigal\n* **proteins.faa**              Protein sequences\n* **hmmer/*.tab**               Alignment output from HMMER for each Cas HMM\n* **minced.out:**               CRISPR array output from minced\n\n#### Notes on output\nFiles are only created if there is any data. For example, the CRISPR_Cas.tab file is only created if there are any CRISPR-Cas loci. \n\n### Plotting <a name=\"plot\"></a>\nCRISPRCasTyper will automatically plot a map of the CRISPR-Cas loci, orphan Cas operons, and orphan CRISPR arrays.\n\nThese maps can be expanded (`--expand N`) by adding unknown genes and genes with alignment scores below the thresholds. This can help in identify potentially un-annotated genes in operons. You can generate new plots without having to re-run the entire pipeline by adding `--redo_typing` to the command. This will re-use the mappings and re-type the operons and re-make the plot, based on new thresholds and plot parameters.\n\nThe plot below is run with `--expand 5000`\n\n* Cas genes are in red.\n* Cas genes, with alignment scores below the thresholds, are in dark green\n* Unknown genes are in gray (the number matches the genes.tab file)\n* Arrays are in blue, with their predicted subtype association based on the consensus repeat sequence.\n\n<img src='img/plot2.png' align=\"left\" height=\"350\" />\n\n## RepeatType - How to <a name=\"repeattype\"></a>\nWith an input of CRISPR repeats (one per line, in a simple textfile) RepeatType will predict the subtype, based on the kmer composition of the repeat\n\n#### Activate environment\n```sh\nconda activate cctyper\n```\n\n#### Run with a simple textfile, containing only CRISPR repeats (in capital letters), one repeat per line.\n```sh\nrepeatType repeats.txt\n```\n\n#### Output <a name=\"repeattypeout\"></a>\nThe script prints:\n* Repeat sequence\n* Predicted subtype\n* Probability of prediction\n\n#### Notes on output\n* Predictions with probabilities below 0.75 are uncertain, and should be taken with a grain of salt.\n* The classifier was only trained on the subtypes for which there were enough (>20) repeats. It can therefore only predict subtypes of repeats associated with the following subtypes:\n    * I-A, I-B, I-C, I-D, I-E, I-F, I-G\n    * II-A, II-B, II-C\n    * III-A, III-B, III-C, III-D\n    * IV-A1, IV-A2, IV-A3\n    * V-A\n    * VI-B\n* This is the accuracy per subtype (on an unseen test dataset):\n    * **I-A**      0.60\n    * **I-B**      0.90\n    * **I-C**      0.98\n    * **I-D**      0.47\n    * **I-E**      1.00\n    * **I-F**      0.99\n    * **I-G**      0.83\n    * **II-A**     0.94\n    * **II-B**     1.00\n    * **II-C**     0.89\n    * **III-A**    0.89\n    * **III-B**    0.49\n    * **III-C**    0.60\n    * **III-D**    0.28\n    * **IV-A1**    0.79\n    * **IV-A2**    0.78\n    * **IV-A3**    0.98\n    * **V-A**      0.77\n    * **VI-B**     1.00\n\n## RepeatType - Train <a name=\"repeattrain\"></a>\nYou can train the repeat classifier with your own set of subtyped repeats. With a tab-delimeted input where 1. column contains the subtypes and 2. column contains the CRISPR repeat sequences, RepeatTrain will train a CRISPR repeat classifier that is directly usable for both RepeatType and CRISPRCasTyper.\n\n#### Train\n```sh\nrepeatTrain typed_repeats.tab my_classifier\n```\n\n#### Use new model in RepeatType\n```sh\nrepeatType repeats.txt --db my_classifier\n```\n\n#### Use new model in CRISPRCasTyper\nSave the original database files:\n```sh\nmv ${CCTYPER_DB}/type_dict.tab ${CCTYPER_DB}/type_dict_orig.tab\nmv ${CCTYPER_DB}/xgb_repeats.model ${CCTYPER_DB}/xgb_repeats_orig.model\n```\n\nMove the new model into the database folder\n```sh\nmv my_classifier/* ${CCTYPER_DB}/\n```\n\n##### CRISPRCasTyper and RepeatType will now use the new model for repeat prediction!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Russel88/CRISPRCasTyper/archive/v1.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Russel88/CRISPRCasTyper", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cctyper", "package_url": "https://pypi.org/project/cctyper/", "platform": "", "project_url": "https://pypi.org/project/cctyper/", "project_urls": {"Download": "https://github.com/Russel88/CRISPRCasTyper/archive/v1.1.0.tar.gz", "Homepage": "https://github.com/Russel88/CRISPRCasTyper"}, "release_url": "https://pypi.org/project/cctyper/1.1.0/", "requires_dist": null, "requires_python": ">=3.8", "summary": "CRISPRCasTyper: Automatic detection and subtyping of CRISPR-Cas operons", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CRISPRCasTyper</h1>\n<p>Detect CRISPR-Cas genes and arrays, and predict the subtype based on both Cas genes and CRISPR repeat sequence.</p>\n<p><a href=\"http://crisprcastyper.crispr.dk\" rel=\"nofollow\">CRISPRCasTyper and RepeatType are also available through a webserver</a></p>\n<p>This software finds Cas genes with a large suite of HMMs, then groups these HMMs into operons, and predicts the subtype of the operons based on a scoring scheme.\nFurthermore, it finds CRISPR arrays with <a href=\"https://github.com/ctSkennerton/minced\" rel=\"nofollow\">minced</a>, and using a kmer-based machine learning approach (extreme gradient boosting trees) it predicts the subtype of the CRISPR arrays based on the consensus repeat.\nIt then connects the Cas operons and CRISPR arrays, producing as output:</p>\n<ul>\n<li>CRISPR-Cas loci, with consensus subtype prediction based on both Cas genes (mostly) and CRISPR consensus repeats</li>\n<li>Orphan Cas operons, and their predicted subtype</li>\n<li>Orphan CRISPR arrays, and their predicted associated subtype</li>\n</ul>\n<h4>It includes the following 39 subtypes/variants:</h4>\n<ul>\n<li>All the ones in the most recent Nature Reviews Microbiology (Makarova et al. 2020): <a href=\"https://doi.org/10.1038/s41579-019-0299-x\" rel=\"nofollow\">Evolutionary classification of CRISPR\u2013Cas systems: a burst of class 2 and derived variants</a></li>\n<li>Updated type IV subtypes and variants based on: <a href=\"https://doi.org/10.1093/nar/gkz1197\" rel=\"nofollow\">Type IV CRISPR\u2013Cas systems are highly diverse and involved in competition between plasmids</a></li>\n<li>Type V-K: <a href=\"https://doi.org/10.1126/science.aax9181\" rel=\"nofollow\">RNA-guided DNA insertion with CRISPR-associated transposases</a></li>\n<li>Transposon associated type I-F: <a href=\"https://doi.org/10.1038/s41586-019-1323-z\" rel=\"nofollow\">Transposon-encoded CRISPR\u2013Cas systems direct RNA-guided DNA integration</a></li>\n</ul>\n<h4>It can automatically draw gene maps of CRISPR-Cas systems and orphan Cas operons and CRISPR arrays</h4>\n<img align=\"left\" height=\"200\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/513030d86d32ed262f4089f0d6bdf568e3f62828/696d672f706c6f742e706e67\">\n<h4>Citation</h4>\n<p>Coming soon...</p>\n<h1>Table of contents</h1>\n<ol>\n<li><a href=\"#quick\" rel=\"nofollow\">Quick start</a></li>\n<li><a href=\"#install\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#cctyperhow\" rel=\"nofollow\">CRISPRCasTyper - How to</a>\n<ul>\n<li><a href=\"#plot\" rel=\"nofollow\">Plotting</a></li>\n</ul>\n</li>\n<li><a href=\"#repeattype\" rel=\"nofollow\">RepeatType - How to</a></li>\n<li><a href=\"#repeattrain\" rel=\"nofollow\">RepeatType - Train</a></li>\n</ol>\n<h2>Quick start <a></a></h2>\n<pre>conda create -n cctyper -c conda-forge -c bioconda -c russel88 cctyper\nconda activate cctyper\ncctyper my.fasta my_output\n</pre>\n<h2>Installation <a></a></h2>\n<p>CRISPRCasTyper can be installed either through conda or pip.</p>\n<p>It is advised to use conda, since this installs CRISPRCasTyper and all dependencies, and downloads with database in one go.</p>\n<h3>Conda</h3>\n<p>Use <a href=\"https://docs.conda.io/en/latest/miniconda.html\" rel=\"nofollow\">miniconda</a> or <a href=\"https://www.anaconda.com/\" rel=\"nofollow\">anaconda</a> to install.</p>\n<p>Create the environment with CRISPRCasTyper and all dependencies and database</p>\n<pre>conda create -n cctyper -c conda-forge -c bioconda -c russel88 cctyper\n</pre>\n<h3>pip</h3>\n<p>If you have the dependencies (Python &gt;= 3.8, HMMER &gt;= 3.2, Prodigal &gt;= 2.6, grep, sed) in your PATH you can install with pip</p>\n<pre>python -m pip install cctyper\n</pre>\n<h4>When installing with pip, you need to download the database manually:</h4>\n<pre><span class=\"c1\"># Download and unpack</span>\nsvn checkout https://github.com/Russel88/CRISPRCasTyper/trunk/data\ntar -xvzf data/Profiles.tar.gz\nmv Profiles/ data/\nrm data/Profiles.tar.gz\n\n<span class=\"c1\"># Tell CRISPRCasTyper where the data is:</span>\n<span class=\"c1\"># either by setting an environment variable (has to done for each terminal session, or added to .bashrc):</span>\n<span class=\"nb\">export</span> <span class=\"nv\">CCTYPER_DB</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/data/\"</span>\n<span class=\"c1\"># or by using the --db argument each time you run CRISPRCasTyper:</span>\ncctyper input.fa output --db /path/to/data/\n</pre>\n<h2>CRISPRCasTyper - How to <a></a></h2>\n<p>CRISPRCasTyper takes as input a nucleotide fasta, and produces outputs with CRISPR-Cas predictions</p>\n<h4>Activate environment</h4>\n<pre>conda activate cctyper\n</pre>\n<h4>Run with a nucleotide fasta as input</h4>\n<pre>cctyper genome.fa my_output\n</pre>\n<h4>If you have a complete circular genome</h4>\n<pre>cctyper genome.fa my_output --circular\n</pre>\n<h4>For metagenome assemblies and short contigs/plasmids/phages, change the prodigal mode</h4>\n<p>The default prodigal mode expects the input to be a single draft or complete genome</p>\n<pre>cctyper assembly.fa my_output --prodigal meta\n</pre>\n<h4>Check the different options</h4>\n<pre>cctyper -h\n</pre>\n<h4>Output <a></a></h4>\n<ul>\n<li><strong>CRISPR_Cas.tab:</strong>           CRISPR_Cas loci, with consensus subtype prediction\n<ul>\n<li>Contig: Sequence accession</li>\n<li>Operon: Operon ID (Sequence accession @ NUMBER)</li>\n<li>Operon_Pos: [Start, End] of operon</li>\n<li>Prediction: Consenus prediction based on both Cas operon and CRISPR arrays</li>\n<li>CRISPRs: CRISPRs adjacent to Cas operon</li>\n<li>Distances: Distances to CRISPRs from Cas operon</li>\n<li>Prediction_Cas: Subtype prediction based on Cas operon</li>\n<li>Prediction_CRISPRs: Subtype prediction of CRISPRs based on CRISPR repeat sequences</li>\n</ul>\n</li>\n<li><strong>cas_operons.tab:</strong>          All certain Cas operons\n<ul>\n<li>Contig: Sequence accession</li>\n<li>Operon: Operon ID (Sequence accession @ NUMBER)</li>\n<li>Start: Start of operon</li>\n<li>End: End of operon</li>\n<li>Prediction: Subtype prediction</li>\n<li>Complete_Interference: Percent completion of the interference module(s). Can be a list if best_type is a list (Hybrid and Ambiguous)</li>\n<li>Complete_Adaptation: Percent completion of the adaptation module(s). Can be a list if best_type is a list (Hybrid and Ambiguous)</li>\n<li>Best_type: Subtype with the highest score. If the score is high then Prediction = Best_type</li>\n<li>Best_score: Score of the highest scoring subtype</li>\n<li>Genes: List of Cas genes</li>\n<li>Positions: List of Gene IDs for the genes</li>\n<li>E-values: List of E-values for the genes</li>\n<li>CoverageSeq: List of sequence coverages for the genes</li>\n<li>CoverageHMM: List of HMM coverages for the genes</li>\n</ul>\n</li>\n<li><strong>crisprs_all.tab:</strong>          All CRISPR arrays\n<ul>\n<li>Contig: Sequence accession</li>\n<li>CRISPR: CRISPR ID (Sequence accession _ NUMBER)</li>\n<li>Start: Start of CRISPR</li>\n<li>End: End of CRISPR</li>\n<li>Consensus_repeat: Consensus repeat sequence</li>\n<li>N_repeats: Number of repeats</li>\n<li>Prediction: Prediction of the associated subtype based on the repeat sequence</li>\n<li>Subtype: Subtype with highest prediction probability. Prediction = Subtype if Subtype_probability is high</li>\n<li>Subtype_probability: Probability of subtype prediction</li>\n</ul>\n</li>\n<li><strong>crisprs_orphan.tab:</strong>       Orphan CRISPRs (those not in CRISPR_Cas.tab)\n<ul>\n<li>Same columns as crisprs_all.tab</li>\n</ul>\n</li>\n<li><strong>cas_operons_orphan.tab:</strong>   Orphan Cas operons (those not in CRISPR_Cas.tab)\n<ul>\n<li>Same columns as cas_operons.tab</li>\n</ul>\n</li>\n<li><strong>CRISPR_Cas_putative.tab:</strong>  Putative CRISPR_Cas loci, often lonely Cas genes next to a CRISPR array\n<ul>\n<li>Same columns as CRISPR_Cas.tab</li>\n</ul>\n</li>\n<li><strong>cas_operons_putative.tab:</strong> Putative Cas operons, mostly false positives, but also some ambiguous and partial systems\n<ul>\n<li>Same columns as cas_operons.tab</li>\n</ul>\n</li>\n<li><strong>spacers/*.fa:</strong>             Fasta files with all spacer sequences</li>\n<li><strong>hmmer.tab:</strong>                All HMM vs. ORF matches, unfiltered results\n<ul>\n<li>Hmm: HMM name</li>\n<li>ORF: ORF name (Sequence accession _ Gene ID)</li>\n<li>tlen: ORF length</li>\n<li>qlen: HMM length</li>\n<li>Eval: E-value of alignment</li>\n<li>score: Alignment score</li>\n<li>start: ORF start</li>\n<li>end: ORF end</li>\n<li>Acc: Sequence accession</li>\n<li>Pos: Gene ID</li>\n<li>Cov_seq: Sequence coverage</li>\n<li>Cov_hmm: HMM coverage</li>\n<li>strand: Coding strand is like input (1) or reverse complement (-1)</li>\n</ul>\n</li>\n<li><strong>genes.tab</strong>                 All genes and their positions\n<ul>\n<li>Contig: Sequence accession</li>\n<li>Start: Start of ORF</li>\n<li>End: End of ORF</li>\n<li>Strand: Coding strand is like input (1) or reverse complement (-1)</li>\n<li>Pos: Gene ID</li>\n</ul>\n</li>\n<li><strong>arguments.tab:</strong>            File with arguments given to CRISPRCasTyper</li>\n<li><strong>hmmer.log</strong>                 Error messages from HMMER (only produced if any errors were encountered)</li>\n</ul>\n<h5>If run with <code>--keep_tmp</code> the following is also produced</h5>\n<ul>\n<li><strong>prodigal.log</strong>              Log from prodigal</li>\n<li><strong>proteins.faa</strong>              Protein sequences</li>\n<li><strong>hmmer/*.tab</strong>               Alignment output from HMMER for each Cas HMM</li>\n<li><strong>minced.out:</strong>               CRISPR array output from minced</li>\n</ul>\n<h4>Notes on output</h4>\n<p>Files are only created if there is any data. For example, the CRISPR_Cas.tab file is only created if there are any CRISPR-Cas loci.</p>\n<h3>Plotting <a></a></h3>\n<p>CRISPRCasTyper will automatically plot a map of the CRISPR-Cas loci, orphan Cas operons, and orphan CRISPR arrays.</p>\n<p>These maps can be expanded (<code>--expand N</code>) by adding unknown genes and genes with alignment scores below the thresholds. This can help in identify potentially un-annotated genes in operons. You can generate new plots without having to re-run the entire pipeline by adding <code>--redo_typing</code> to the command. This will re-use the mappings and re-type the operons and re-make the plot, based on new thresholds and plot parameters.</p>\n<p>The plot below is run with <code>--expand 5000</code></p>\n<ul>\n<li>Cas genes are in red.</li>\n<li>Cas genes, with alignment scores below the thresholds, are in dark green</li>\n<li>Unknown genes are in gray (the number matches the genes.tab file)</li>\n<li>Arrays are in blue, with their predicted subtype association based on the consensus repeat sequence.</li>\n</ul>\n<img align=\"left\" height=\"350\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3cff1358c2f94e67a1279de9205620c998c47e3/696d672f706c6f74322e706e67\">\n<h2>RepeatType - How to <a></a></h2>\n<p>With an input of CRISPR repeats (one per line, in a simple textfile) RepeatType will predict the subtype, based on the kmer composition of the repeat</p>\n<h4>Activate environment</h4>\n<pre>conda activate cctyper\n</pre>\n<h4>Run with a simple textfile, containing only CRISPR repeats (in capital letters), one repeat per line.</h4>\n<pre>repeatType repeats.txt\n</pre>\n<h4>Output <a></a></h4>\n<p>The script prints:</p>\n<ul>\n<li>Repeat sequence</li>\n<li>Predicted subtype</li>\n<li>Probability of prediction</li>\n</ul>\n<h4>Notes on output</h4>\n<ul>\n<li>Predictions with probabilities below 0.75 are uncertain, and should be taken with a grain of salt.</li>\n<li>The classifier was only trained on the subtypes for which there were enough (&gt;20) repeats. It can therefore only predict subtypes of repeats associated with the following subtypes:\n<ul>\n<li>I-A, I-B, I-C, I-D, I-E, I-F, I-G</li>\n<li>II-A, II-B, II-C</li>\n<li>III-A, III-B, III-C, III-D</li>\n<li>IV-A1, IV-A2, IV-A3</li>\n<li>V-A</li>\n<li>VI-B</li>\n</ul>\n</li>\n<li>This is the accuracy per subtype (on an unseen test dataset):\n<ul>\n<li><strong>I-A</strong>      0.60</li>\n<li><strong>I-B</strong>      0.90</li>\n<li><strong>I-C</strong>      0.98</li>\n<li><strong>I-D</strong>      0.47</li>\n<li><strong>I-E</strong>      1.00</li>\n<li><strong>I-F</strong>      0.99</li>\n<li><strong>I-G</strong>      0.83</li>\n<li><strong>II-A</strong>     0.94</li>\n<li><strong>II-B</strong>     1.00</li>\n<li><strong>II-C</strong>     0.89</li>\n<li><strong>III-A</strong>    0.89</li>\n<li><strong>III-B</strong>    0.49</li>\n<li><strong>III-C</strong>    0.60</li>\n<li><strong>III-D</strong>    0.28</li>\n<li><strong>IV-A1</strong>    0.79</li>\n<li><strong>IV-A2</strong>    0.78</li>\n<li><strong>IV-A3</strong>    0.98</li>\n<li><strong>V-A</strong>      0.77</li>\n<li><strong>VI-B</strong>     1.00</li>\n</ul>\n</li>\n</ul>\n<h2>RepeatType - Train <a></a></h2>\n<p>You can train the repeat classifier with your own set of subtyped repeats. With a tab-delimeted input where 1. column contains the subtypes and 2. column contains the CRISPR repeat sequences, RepeatTrain will train a CRISPR repeat classifier that is directly usable for both RepeatType and CRISPRCasTyper.</p>\n<h4>Train</h4>\n<pre>repeatTrain typed_repeats.tab my_classifier\n</pre>\n<h4>Use new model in RepeatType</h4>\n<pre>repeatType repeats.txt --db my_classifier\n</pre>\n<h4>Use new model in CRISPRCasTyper</h4>\n<p>Save the original database files:</p>\n<pre>mv <span class=\"si\">${</span><span class=\"nv\">CCTYPER_DB</span><span class=\"si\">}</span>/type_dict.tab <span class=\"si\">${</span><span class=\"nv\">CCTYPER_DB</span><span class=\"si\">}</span>/type_dict_orig.tab\nmv <span class=\"si\">${</span><span class=\"nv\">CCTYPER_DB</span><span class=\"si\">}</span>/xgb_repeats.model <span class=\"si\">${</span><span class=\"nv\">CCTYPER_DB</span><span class=\"si\">}</span>/xgb_repeats_orig.model\n</pre>\n<p>Move the new model into the database folder</p>\n<pre>mv my_classifier/* <span class=\"si\">${</span><span class=\"nv\">CCTYPER_DB</span><span class=\"si\">}</span>/\n</pre>\n<h5>CRISPRCasTyper and RepeatType will now use the new model for repeat prediction!</h5>\n\n          </div>"}, "last_serial": 7189653, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "62018fae4130a2a5acc1b1d55f5350a4", "sha256": "a4c76efd60394e6201fff9430b94ed8a4a86a705bf25d981537f6afa2f73d5ea"}, "downloads": -1, "filename": "cctyper-1.0.0-py3.8.egg", "has_sig": false, "md5_digest": "62018fae4130a2a5acc1b1d55f5350a4", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 54176, "upload_time": "2020-04-19T18:25:26", "upload_time_iso_8601": "2020-04-19T18:25:26.277166Z", "url": "https://files.pythonhosted.org/packages/9b/51/4d9abeb59862650d147c5bafe871c38b359bb614b8c1644eb76ebecd7b39/cctyper-1.0.0-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a2702a63c329789a8574b34fe87b98e", "sha256": "cfbaffdf6968452ec8fd59187cd5f2d89821b3ce9bcacacbecd309a48bf7a156"}, "downloads": -1, "filename": "cctyper-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6a2702a63c329789a8574b34fe87b98e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 26027, "upload_time": "2020-04-19T18:25:28", "upload_time_iso_8601": "2020-04-19T18:25:28.529031Z", "url": "https://files.pythonhosted.org/packages/1f/70/bb51fb8a2d71363ffba56d218c9aa7604ccf377bf5ddfc8835250b807764/cctyper-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "71f1eed65f6142539c3abd1b82116f37", "sha256": "209e1d4609db26f36e5a5ff7018ea4004d1d07bd5aa869c54a20ae017dbde93f"}, "downloads": -1, "filename": "cctyper-1.0.1-py3.8.egg", "has_sig": false, "md5_digest": "71f1eed65f6142539c3abd1b82116f37", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 54179, "upload_time": "2020-04-19T19:42:58", "upload_time_iso_8601": "2020-04-19T19:42:58.863800Z", "url": "https://files.pythonhosted.org/packages/f7/e8/6f474848cf4f8f174ffdef54bf6057ac57f3b6db0d99e02e955230b981bb/cctyper-1.0.1-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9ca1c7bde189f666de8a83f13b9dc85", "sha256": "e4f22c059e5edeeeaa8003e27dfec0e6f2101c492ee27d520b325b1a0e5cb69a"}, "downloads": -1, "filename": "cctyper-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b9ca1c7bde189f666de8a83f13b9dc85", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 26023, "upload_time": "2020-04-19T19:43:00", "upload_time_iso_8601": "2020-04-19T19:43:00.114878Z", "url": "https://files.pythonhosted.org/packages/27/8d/b73af5dfce0ef09397edda75d7a1dd800e45a601edf14b81a56d22b3082c/cctyper-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "371319b6040e668bae23efb112d9842a", "sha256": "1b26ecbd60a90fa6d1ddf297a3e258ee08b27f2ae2dcb16ab58e3916f6ffb9f9"}, "downloads": -1, "filename": "cctyper-1.0.2-py3.8.egg", "has_sig": false, "md5_digest": "371319b6040e668bae23efb112d9842a", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 55347, "upload_time": "2020-04-21T09:48:11", "upload_time_iso_8601": "2020-04-21T09:48:11.277412Z", "url": "https://files.pythonhosted.org/packages/0a/10/305b9968936842701d946224b32cc83706852f663de8037a86ddd693ae1d/cctyper-1.0.2-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bb1942f71b2e9dad105a1bb8bf4919f", "sha256": "c58f28668bc649733a9179e78f3d49c56c95fb551bdab9a3383c1630952e86ac"}, "downloads": -1, "filename": "cctyper-1.0.2.tar.gz", "has_sig": false, "md5_digest": "4bb1942f71b2e9dad105a1bb8bf4919f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 26528, "upload_time": "2020-04-21T09:48:12", "upload_time_iso_8601": "2020-04-21T09:48:12.598988Z", "url": "https://files.pythonhosted.org/packages/0e/fc/be8cf4cb775400960f8d0788b909125d03fc4302dd043b7cdda741d18e5d/cctyper-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b18e7249d5e8286a128853781d7be1b5", "sha256": "51a75bf3be298d1faa774d03a25c0a3710f37dbc2f45c5e26d043e5d9b2fe2ce"}, "downloads": -1, "filename": "cctyper-1.0.3-py3.8.egg", "has_sig": false, "md5_digest": "b18e7249d5e8286a128853781d7be1b5", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 55479, "upload_time": "2020-04-22T14:30:50", "upload_time_iso_8601": "2020-04-22T14:30:50.499497Z", "url": "https://files.pythonhosted.org/packages/53/6f/21341fa55ae1e09fcfdd8e9b9f35c5364d1d77905636fc91dd03997ca7fc/cctyper-1.0.3-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bb36959cc8abe81fb55b2aafe2dbd9b", "sha256": "e6c1430b5580c8cb65cd6f18a745a82784188020ffc41dc3d6b29044ca92dd00"}, "downloads": -1, "filename": "cctyper-1.0.3.tar.gz", "has_sig": false, "md5_digest": "4bb36959cc8abe81fb55b2aafe2dbd9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 26748, "upload_time": "2020-04-22T14:30:52", "upload_time_iso_8601": "2020-04-22T14:30:52.134038Z", "url": "https://files.pythonhosted.org/packages/ae/64/a9bf1c981bd059b62573798379ccd72fc414051a51490624dd6b616ad06b/cctyper-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "075c4f0144ad4bb7b5b3428177307dfb", "sha256": "45b97d5649cbfd33847fccd03746518743b5d09610589762f51cdc4fb7e00eee"}, "downloads": -1, "filename": "cctyper-1.0.4-py3.8.egg", "has_sig": false, "md5_digest": "075c4f0144ad4bb7b5b3428177307dfb", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 55888, "upload_time": "2020-04-22T15:36:53", "upload_time_iso_8601": "2020-04-22T15:36:53.845286Z", "url": "https://files.pythonhosted.org/packages/93/a6/25a99718baac00627faf89c78806aa737294053eb9af96759129b3d5d0ab/cctyper-1.0.4-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d8bda64d9123b9d3243134571c7aa4f", "sha256": "bc7c456052272f3caee568377450acc2ed62b64152d0c2f395ce6be3a970d5af"}, "downloads": -1, "filename": "cctyper-1.0.4.tar.gz", "has_sig": false, "md5_digest": "9d8bda64d9123b9d3243134571c7aa4f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 26944, "upload_time": "2020-04-22T15:36:55", "upload_time_iso_8601": "2020-04-22T15:36:55.239719Z", "url": "https://files.pythonhosted.org/packages/02/ea/554b5fd888c44251f822acc6e91bec660cd2d8fb55ae1d0f4165263c77f2/cctyper-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "dedb3cb7ba7dd936923c4681319574a7", "sha256": "9319c16121c4627eb3da4accd2f0e5c134abe76d28c21211ab412e3a252b37e1"}, "downloads": -1, "filename": "cctyper-1.0.5-py3.8.egg", "has_sig": false, "md5_digest": "dedb3cb7ba7dd936923c4681319574a7", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 55896, "upload_time": "2020-04-24T14:22:46", "upload_time_iso_8601": "2020-04-24T14:22:46.124244Z", "url": "https://files.pythonhosted.org/packages/eb/b0/3006d3387dac742b4dc6e0cda2aa239abfef559216f5033a8e5d07c28340/cctyper-1.0.5-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c4a982e14246a0973c09e4f1a0aa6da", "sha256": "8e5f062ec94cd6cddd1901d966997fbae894b5c31278538d09b49a66733216cb"}, "downloads": -1, "filename": "cctyper-1.0.5.tar.gz", "has_sig": false, "md5_digest": "0c4a982e14246a0973c09e4f1a0aa6da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 26913, "upload_time": "2020-04-24T14:22:47", "upload_time_iso_8601": "2020-04-24T14:22:47.503527Z", "url": "https://files.pythonhosted.org/packages/e8/7f/abc53daf1d9be62bfb21a721a897581790f0fcd62f10bf985532650711ec/cctyper-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "0db425123ad79156d7bf64ba20f540e4", "sha256": "5921267cd519021a0ce5f774f268765e2bf84dcb21abcc117420db6fe318a534"}, "downloads": -1, "filename": "cctyper-1.0.6-py3.8.egg", "has_sig": false, "md5_digest": "0db425123ad79156d7bf64ba20f540e4", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 55926, "upload_time": "2020-04-26T13:45:48", "upload_time_iso_8601": "2020-04-26T13:45:48.584307Z", "url": "https://files.pythonhosted.org/packages/c2/7d/59b01d58c88a5ad59b5cb75a821491cac6be9728fb65b5243c31c510deb3/cctyper-1.0.6-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "536ce23f5fe33251fdf002d86b1cbfb0", "sha256": "bd14e9df192ce14f1166687455c2c62a33fbf622f99621c3ef49c1193684ea28"}, "downloads": -1, "filename": "cctyper-1.0.6.tar.gz", "has_sig": false, "md5_digest": "536ce23f5fe33251fdf002d86b1cbfb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 26933, "upload_time": "2020-04-26T13:45:49", "upload_time_iso_8601": "2020-04-26T13:45:49.887772Z", "url": "https://files.pythonhosted.org/packages/d5/84/5a045203119785e2145e5ff2652e34a8f7581dd54f421ddc435bb5cc5465/cctyper-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "a329655685a547373aefa628978a5719", "sha256": "fc22d615d54aaa68c8e4c1b7691a233d02917a91172546ed8c6625378fdd292c"}, "downloads": -1, "filename": "cctyper-1.0.7-py3.8.egg", "has_sig": false, "md5_digest": "a329655685a547373aefa628978a5719", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 56134, "upload_time": "2020-05-01T09:09:03", "upload_time_iso_8601": "2020-05-01T09:09:03.972881Z", "url": "https://files.pythonhosted.org/packages/ba/bb/5fbddcc307dd2c31abe89bccbe3e11d51cf9e4ba9805c48187fda5b1c52b/cctyper-1.0.7-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d790d78919f4a991b25002b13a967aba", "sha256": "f7482d561640471e79d1a3e9c2c95b9ee4046de1f7f79659d64a75b8c77a526b"}, "downloads": -1, "filename": "cctyper-1.0.7.tar.gz", "has_sig": false, "md5_digest": "d790d78919f4a991b25002b13a967aba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 27120, "upload_time": "2020-05-01T09:09:05", "upload_time_iso_8601": "2020-05-01T09:09:05.512270Z", "url": "https://files.pythonhosted.org/packages/6f/10/38af362bbe42e9000af0f5e97a4225e3adf46acf988c98ad50bee7133a70/cctyper-1.0.7.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "797e475962ddab8172b376ed0bdfca4e", "sha256": "291956b1e1c5b2440c7ac3ca46b0b99875e140cbce0b69c8c71d10f20b5276ed"}, "downloads": -1, "filename": "cctyper-1.1.0-py3.8.egg", "has_sig": false, "md5_digest": "797e475962ddab8172b376ed0bdfca4e", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 57066, "upload_time": "2020-05-07T15:48:19", "upload_time_iso_8601": "2020-05-07T15:48:19.594896Z", "url": "https://files.pythonhosted.org/packages/14/b2/037c7f522d9abf42e73ece20dd8b5ef222135ddccaef5bacbe22699cc321/cctyper-1.1.0-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "01e733ca805bc8d262000ee66eb6e7bd", "sha256": "f456013d3cc9aadaefcbee937acbc2efeb532c6cd13e139b12d24a06d3257a95"}, "downloads": -1, "filename": "cctyper-1.1.0.tar.gz", "has_sig": false, "md5_digest": "01e733ca805bc8d262000ee66eb6e7bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 27576, "upload_time": "2020-05-07T15:48:20", "upload_time_iso_8601": "2020-05-07T15:48:20.945100Z", "url": "https://files.pythonhosted.org/packages/93/d3/e0db12a4b444707bb4e34c478173474cbbce454addc542ef71f88c6ca6ff/cctyper-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "797e475962ddab8172b376ed0bdfca4e", "sha256": "291956b1e1c5b2440c7ac3ca46b0b99875e140cbce0b69c8c71d10f20b5276ed"}, "downloads": -1, "filename": "cctyper-1.1.0-py3.8.egg", "has_sig": false, "md5_digest": "797e475962ddab8172b376ed0bdfca4e", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 57066, "upload_time": "2020-05-07T15:48:19", "upload_time_iso_8601": "2020-05-07T15:48:19.594896Z", "url": "https://files.pythonhosted.org/packages/14/b2/037c7f522d9abf42e73ece20dd8b5ef222135ddccaef5bacbe22699cc321/cctyper-1.1.0-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "01e733ca805bc8d262000ee66eb6e7bd", "sha256": "f456013d3cc9aadaefcbee937acbc2efeb532c6cd13e139b12d24a06d3257a95"}, "downloads": -1, "filename": "cctyper-1.1.0.tar.gz", "has_sig": false, "md5_digest": "01e733ca805bc8d262000ee66eb6e7bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 27576, "upload_time": "2020-05-07T15:48:20", "upload_time_iso_8601": "2020-05-07T15:48:20.945100Z", "url": "https://files.pythonhosted.org/packages/93/d3/e0db12a4b444707bb4e34c478173474cbbce454addc542ef71f88c6ca6ff/cctyper-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:05 2020"}