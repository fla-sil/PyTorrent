{"info": {"author": "Michael Hirsch, Ph.D.", "author_email": "scivision@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Scientific/Engineering :: Atmospheric Science"], "description": "# DASC all-sky camera utilities\n\n[![image](https://zenodo.org/badge/51016067.svg)](https://zenodo.org/badge/latestdoi/51016067)\n![ci_python](https://github.com/space-physics/dascutils/workflows/ci_python/badge.svg)\n\n[![PyPi versions](https://img.shields.io/pypi/pyversions/dascutils.svg)](https://pypi.python.org/pypi/dascutils)\n[![PyPi Download stats](http://pepy.tech/badge/dascutils)](http://pepy.tech/project/dascutils)\n\nUtilities for plotting, saving, analyzing the Poker Flat Research Range Digital All Sky Camera. (Other locations, too).\nThis program handles the corrupted FITS files due to the RAID array failure on 2013 data.\nThe raw data FITS contain one image per file.\n\n![DASC projected images](./dascutils/tests/data/dasc_projection_plot_pc.png)\n\n(plot above created with PlotProjectedImage.py)\n\n## Install\n\nMost people will find it useful to have the example scripts and the tests built into the Git repo.\n\n```sh\ngit clone https://github.com/space-physics/dascutils\n\npip install -e dascutils\n```\n\n## Usage\n\nTo use the API directly, like:\n\n```python\nimport dascutils as du\n\ndata = du.load('tests/PKR_DASC_0558_20151007_082351.743.FITS')\n```\n\nThis returns a dictionary of\n[xarray.DataArray](http://xarray.pydata.org/en/stable/generated/xarray.DataArray.html),\nwhich is like a \"smart\" Numpy array.\nThe images are index by wavelength if it was specified in the data file, or 'unknown' otherwise.\nThe images are in a 3-D stack: (time, x, y).\n`data.time` is the time of each image.\nalso several metadata parameters are included like the location of the camera.\n\nSave the data using lossless compression to HDF5 by\n\n```python\ndu.save_hdf5(data, \"foo.h5\")\n```\n\nNow we give several examples.\n\n### Download raw DASC files by time\n\nDownload Poker Flat Research Range \"PKR\" October 7, 2015 from 8:23 to 8:54 UTC to `~/data/`:\n\n```sh\npython dascutils/DownloadDASC.py PKR 2015-10-07T08:23 2015-10-07T08:54 ~/data\n```\n\n* `-w` four-letter wavelength in nanometers e.g. 0630\n\nAs usual, we assume UTC and do NOT specify the timezone.\n\n### convert FITS stack to HDF5\n\nIt is very tedious to download large amounts of DASC data in single FITS files.\nWe have tried to make this faster by multi-threading the download, but then the FTP server anti-leeching\nleaves us with broken downloads.\nAs an alternative in general, it's more convenient to have a single HDF5 file for a day rather than 10,000 FITS files.\nConvert a bunch of FITS files to HDF5 like:\n\n```sh\npython dascutils/ConvertDASC_FITS_to_HDF5.py ~/data/2015-10-07 ~/data/2015-10-07.h5\n```\n\n* `-t` start stop times to convert\n\n### Make movies from DASC raw data files\n\nPlay movie of all wavelengths in subplots for files in a directory, for example:\n\n```sh\npython dascutils/PlayMovie.py dascutils/tests/\n```\n\nadditional options include:\n\n* `-t` specify time limits e.g.  `-t 2014-01-02T02:30 2014-01-02T02:35`\n* `-w` choose only certain wavelength(s)\n\n### Spatial registration (plate scale)\n\nThe `dascutils/cal/` directory contains `AZ` and `EL` files corresponding to each pixel.\n\n```python\nimport dascutils as du\n\ndata = du.load('dascutils/tests/', azelfn='dascutils/cal/PKR_DASC_20110112')\n```\n\nnow `data` includes data variables `az` and `el`, same shape as the image(s), along with camera position in `lat` `lon` `alt_m`.\n\n* Be sure you know if you're using magnetic north or geographic north, or you'll see a rotation by the declination.\n* Note the date in the filename--perhaps the camera was moved since before or long after that date?\n\n### Map Projection\n\nA common task in auroral and airglow analysis is to project the image to an imaginary alttiude, that is, as if all the brightness were coming from that altitude.\nEach wavelength has a distinctive peak emission altitude due to the energies, kinetic reactions and vertical density profiles involved.\n\nIt takes considerable time to stretch the image stack pixels to fit a project geographic grid, so this is not enabled by default.\nIt will be enabled if the du.load(..., wavelength_altitude_km=) parameter is used.\nSee PlotProjectedImage.py for an example.\n\nSome analyses can be done far more rapidly by just projecting pixel(s) of interest rather than an entire 3-D image stack.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/space-physics/dascutils", "keywords": "aurora,scientific camera", "license": "", "maintainer": "", "maintainer_email": "", "name": "dascutils", "package_url": "https://pypi.org/project/dascutils/", "platform": "", "project_url": "https://pypi.org/project/dascutils/", "project_urls": {"Homepage": "https://github.com/space-physics/dascutils"}, "release_url": "https://pypi.org/project/dascutils/2.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Utilities for UAF Digital All-Sky Camera: reading and plotting", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DASC all-sky camera utilities</h1>\n<p><a href=\"https://zenodo.org/badge/latestdoi/51016067\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2f2b406efb3cd47848d1865a4ccac5a12391cd7/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f35313031363036372e737667\"></a>\n<img alt=\"ci_python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e043d9da5e2c84db21d003637c7eb9d298123431/68747470733a2f2f6769746875622e636f6d2f73706163652d706879736963732f646173637574696c732f776f726b666c6f77732f63695f707974686f6e2f62616467652e737667\"></p>\n<p><a href=\"https://pypi.python.org/pypi/dascutils\" rel=\"nofollow\"><img alt=\"PyPi versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4494b16103ced0e16d69e0a2f5d3adb02503d166/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646173637574696c732e737667\"></a>\n<a href=\"http://pepy.tech/project/dascutils\" rel=\"nofollow\"><img alt=\"PyPi Download stats\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2655b55b1bc6fcbffbac9aa3fa433d7ff1cf49f/687474703a2f2f706570792e746563682f62616467652f646173637574696c73\"></a></p>\n<p>Utilities for plotting, saving, analyzing the Poker Flat Research Range Digital All Sky Camera. (Other locations, too).\nThis program handles the corrupted FITS files due to the RAID array failure on 2013 data.\nThe raw data FITS contain one image per file.</p>\n<p><img alt=\"DASC projected images\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95a4d8596b20f225500a6e7c0b4c12cb934cf551/2e2f646173637574696c732f74657374732f646174612f646173635f70726f6a656374696f6e5f706c6f745f70632e706e67\"></p>\n<p>(plot above created with PlotProjectedImage.py)</p>\n<h2>Install</h2>\n<p>Most people will find it useful to have the example scripts and the tests built into the Git repo.</p>\n<pre>git clone https://github.com/space-physics/dascutils\n\npip install -e dascutils\n</pre>\n<h2>Usage</h2>\n<p>To use the API directly, like:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dascutils</span> <span class=\"k\">as</span> <span class=\"nn\">du</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">du</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'tests/PKR_DASC_0558_20151007_082351.743.FITS'</span><span class=\"p\">)</span>\n</pre>\n<p>This returns a dictionary of\n<a href=\"http://xarray.pydata.org/en/stable/generated/xarray.DataArray.html\" rel=\"nofollow\">xarray.DataArray</a>,\nwhich is like a \"smart\" Numpy array.\nThe images are index by wavelength if it was specified in the data file, or 'unknown' otherwise.\nThe images are in a 3-D stack: (time, x, y).\n<code>data.time</code> is the time of each image.\nalso several metadata parameters are included like the location of the camera.</p>\n<p>Save the data using lossless compression to HDF5 by</p>\n<pre><span class=\"n\">du</span><span class=\"o\">.</span><span class=\"n\">save_hdf5</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s2\">\"foo.h5\"</span><span class=\"p\">)</span>\n</pre>\n<p>Now we give several examples.</p>\n<h3>Download raw DASC files by time</h3>\n<p>Download Poker Flat Research Range \"PKR\" October 7, 2015 from 8:23 to 8:54 UTC to <code>~/data/</code>:</p>\n<pre>python dascutils/DownloadDASC.py PKR <span class=\"m\">2015</span>-10-07T08:23 <span class=\"m\">2015</span>-10-07T08:54 ~/data\n</pre>\n<ul>\n<li><code>-w</code> four-letter wavelength in nanometers e.g. 0630</li>\n</ul>\n<p>As usual, we assume UTC and do NOT specify the timezone.</p>\n<h3>convert FITS stack to HDF5</h3>\n<p>It is very tedious to download large amounts of DASC data in single FITS files.\nWe have tried to make this faster by multi-threading the download, but then the FTP server anti-leeching\nleaves us with broken downloads.\nAs an alternative in general, it's more convenient to have a single HDF5 file for a day rather than 10,000 FITS files.\nConvert a bunch of FITS files to HDF5 like:</p>\n<pre>python dascutils/ConvertDASC_FITS_to_HDF5.py ~/data/2015-10-07 ~/data/2015-10-07.h5\n</pre>\n<ul>\n<li><code>-t</code> start stop times to convert</li>\n</ul>\n<h3>Make movies from DASC raw data files</h3>\n<p>Play movie of all wavelengths in subplots for files in a directory, for example:</p>\n<pre>python dascutils/PlayMovie.py dascutils/tests/\n</pre>\n<p>additional options include:</p>\n<ul>\n<li><code>-t</code> specify time limits e.g.  <code>-t 2014-01-02T02:30 2014-01-02T02:35</code></li>\n<li><code>-w</code> choose only certain wavelength(s)</li>\n</ul>\n<h3>Spatial registration (plate scale)</h3>\n<p>The <code>dascutils/cal/</code> directory contains <code>AZ</code> and <code>EL</code> files corresponding to each pixel.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dascutils</span> <span class=\"k\">as</span> <span class=\"nn\">du</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">du</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'dascutils/tests/'</span><span class=\"p\">,</span> <span class=\"n\">azelfn</span><span class=\"o\">=</span><span class=\"s1\">'dascutils/cal/PKR_DASC_20110112'</span><span class=\"p\">)</span>\n</pre>\n<p>now <code>data</code> includes data variables <code>az</code> and <code>el</code>, same shape as the image(s), along with camera position in <code>lat</code> <code>lon</code> <code>alt_m</code>.</p>\n<ul>\n<li>Be sure you know if you're using magnetic north or geographic north, or you'll see a rotation by the declination.</li>\n<li>Note the date in the filename--perhaps the camera was moved since before or long after that date?</li>\n</ul>\n<h3>Map Projection</h3>\n<p>A common task in auroral and airglow analysis is to project the image to an imaginary alttiude, that is, as if all the brightness were coming from that altitude.\nEach wavelength has a distinctive peak emission altitude due to the energies, kinetic reactions and vertical density profiles involved.</p>\n<p>It takes considerable time to stretch the image stack pixels to fit a project geographic grid, so this is not enabled by default.\nIt will be enabled if the du.load(..., wavelength_altitude_km=) parameter is used.\nSee PlotProjectedImage.py for an example.</p>\n<p>Some analyses can be done far more rapidly by just projecting pixel(s) of interest rather than an entire 3-D image stack.</p>\n\n          </div>"}, "last_serial": 6923260, "releases": {"1.2.1": [{"comment_text": "", "digests": {"md5": "02d56f7b5d1b0ffa473da6b3f929ea2f", "sha256": "7d253708d8b6bc33a0c7a4b89a684fdd61f5c89a01c8cad700c2a4dd57df7ab0"}, "downloads": -1, "filename": "dascutils-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "02d56f7b5d1b0ffa473da6b3f929ea2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11541, "upload_time": "2018-05-23T23:10:53", "upload_time_iso_8601": "2018-05-23T23:10:53.424111Z", "url": "https://files.pythonhosted.org/packages/f6/47/522c570febf12d5831585b896bc548c9bf81ae97720ca8142e219484a071/dascutils-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68f4925c55899575d35f0de16b2e5aee", "sha256": "0df595f6038a0462c26ef18109970a36ca8a70c1b2c6c6d21d2c1e09220acd4e"}, "downloads": -1, "filename": "dascutils-1.2.1.tar.gz", "has_sig": false, "md5_digest": "68f4925c55899575d35f0de16b2e5aee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8175, "upload_time": "2018-05-23T23:10:54", "upload_time_iso_8601": "2018-05-23T23:10:54.520484Z", "url": "https://files.pythonhosted.org/packages/38/fc/699a6a5603c9f5862fb1bad9c2e4b61a994701447f634027c3011f774402/dascutils-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "f2800c40b08491add1e1b52878d07012", "sha256": "99120b97419d6913e53c1b65033f57815a0015368755460da311b61cb74cf911"}, "downloads": -1, "filename": "dascutils-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2800c40b08491add1e1b52878d07012", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11767, "upload_time": "2018-05-25T22:29:36", "upload_time_iso_8601": "2018-05-25T22:29:36.846499Z", "url": "https://files.pythonhosted.org/packages/84/66/c3e23380b2399d6cd8500659ffeaf3fdbc1f3d359840570cec60dfbc924e/dascutils-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6d5888751be09f5e8054da7ec0ce47e", "sha256": "b6309582355b2d38f86db51f01d11ed2bd8fb17c05d2a4eb40d1093084a0e288"}, "downloads": -1, "filename": "dascutils-1.3.0.tar.gz", "has_sig": false, "md5_digest": "f6d5888751be09f5e8054da7ec0ce47e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8442, "upload_time": "2018-05-25T22:29:38", "upload_time_iso_8601": "2018-05-25T22:29:38.077802Z", "url": "https://files.pythonhosted.org/packages/17/5b/2777207c4869f11f35c1698822ef5e5c928b5a9a769abd6a369604578d57/dascutils-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "a65ae88b7ce34ed10f4e04d1d7618b7a", "sha256": "24b2f229b775d170adf093428de3bbb14fd45d19a62eee7d4be7d9e8c727cd27"}, "downloads": -1, "filename": "dascutils-1.4.0.tar.gz", "has_sig": false, "md5_digest": "a65ae88b7ce34ed10f4e04d1d7618b7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 22116, "upload_time": "2018-08-10T20:56:14", "upload_time_iso_8601": "2018-08-10T20:56:14.274519Z", "url": "https://files.pythonhosted.org/packages/61/6b/7ceac0b0c3becd7f0060ce880f503c2dc1543dfed1322788048eae5cb971/dascutils-1.4.0.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "a1299ae046495f3a010661fec8973ebd", "sha256": "6b630e4404f814b2abfab2b1617ea140e56e7928b73e687694cbb7759927cc92"}, "downloads": -1, "filename": "dascutils-1.4.2.tar.gz", "has_sig": false, "md5_digest": "a1299ae046495f3a010661fec8973ebd", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 25362, "upload_time": "2018-10-10T19:51:44", "upload_time_iso_8601": "2018-10-10T19:51:44.140894Z", "url": "https://files.pythonhosted.org/packages/2d/62/3eed76324a102832909090728bda1248f32e59e9e6e6145c22103b4d4e90/dascutils-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "8270cabf61bb6ddce0445eac5a61ab77", "sha256": "4903f1be08a9c8d23e473c359aae2a6f474ee08b74e9c3cf5decdf4cf979dc61"}, "downloads": -1, "filename": "dascutils-1.4.3.tar.gz", "has_sig": false, "md5_digest": "8270cabf61bb6ddce0445eac5a61ab77", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 25348, "upload_time": "2018-12-31T19:09:47", "upload_time_iso_8601": "2018-12-31T19:09:47.133722Z", "url": "https://files.pythonhosted.org/packages/f8/cd/a7957a9f7256368b22b68f447c31f2049140b49e04ca037e53072fc0b57f/dascutils-1.4.3.tar.gz", "yanked": false}], "1.4.4": [{"comment_text": "", "digests": {"md5": "54cc49f7ef1256071211d6b801c89b1c", "sha256": "b1ca639b666c0a8a75bad2693d0399aebef159389da114933855cc555c5def78"}, "downloads": -1, "filename": "dascutils-1.4.4.tar.gz", "has_sig": false, "md5_digest": "54cc49f7ef1256071211d6b801c89b1c", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 15360, "upload_time": "2019-09-29T20:43:19", "upload_time_iso_8601": "2019-09-29T20:43:19.052764Z", "url": "https://files.pythonhosted.org/packages/fc/57/3c555e851aa2ff7c1882444efac250d2af08de01743d04d187453fa1380c/dascutils-1.4.4.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "6c108c2f7c66a0457a81bf3b42f53198", "sha256": "f47009dbea93ec84c866b1ee86bdcc1f1fd75f12fe3aeb0c15066e197fa89962"}, "downloads": -1, "filename": "dascutils-2.0.0.tar.gz", "has_sig": false, "md5_digest": "6c108c2f7c66a0457a81bf3b42f53198", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 15292, "upload_time": "2019-10-03T16:56:50", "upload_time_iso_8601": "2019-10-03T16:56:50.486779Z", "url": "https://files.pythonhosted.org/packages/24/ab/c44ab0338e045a39e465b87600f774509c9a56f31fc841ba836d0ae23585/dascutils-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "63ec723646fb72d31d2245467abc1601", "sha256": "5cba9e8a6ce105046528dab5ad3fd68940a57627df1781e0c76640c29926622b"}, "downloads": -1, "filename": "dascutils-2.0.1.tar.gz", "has_sig": false, "md5_digest": "63ec723646fb72d31d2245467abc1601", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19431, "upload_time": "2020-02-07T16:53:35", "upload_time_iso_8601": "2020-02-07T16:53:35.056910Z", "url": "https://files.pythonhosted.org/packages/74/2b/606f5f15cc0058937a9c905ca96b3c8aac203eedd6b5186e7e8badcf101a/dascutils-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "51f6c104444200da8e80c55597b90eb1", "sha256": "8448e5e22694661c5b585737d4dc7f0910fa42ecbb7056b52a8e5bf0ed455c4d"}, "downloads": -1, "filename": "dascutils-2.0.2.tar.gz", "has_sig": false, "md5_digest": "51f6c104444200da8e80c55597b90eb1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20173, "upload_time": "2020-02-20T18:52:11", "upload_time_iso_8601": "2020-02-20T18:52:11.021406Z", "url": "https://files.pythonhosted.org/packages/93/2e/1096ac7e78cafbefabedd71e6b39f81d85f4c5450f48446a73a6b33d9911/dascutils-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "69ffe6ce77cefd416f914ca9a640812b", "sha256": "2197d4883e3237be0687ca61747cc0f215b42021d0bf8031aa20d95074970824"}, "downloads": -1, "filename": "dascutils-2.0.3.tar.gz", "has_sig": false, "md5_digest": "69ffe6ce77cefd416f914ca9a640812b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20498, "upload_time": "2020-02-24T04:50:21", "upload_time_iso_8601": "2020-02-24T04:50:21.498786Z", "url": "https://files.pythonhosted.org/packages/2a/39/b26f488d950d4b6e1408fd4d35e83a647ae6542b9ee23424be51650300ea/dascutils-2.0.3.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "f3fe5f7091f0e31bc2141db6e4b0e57e", "sha256": "dd2a90a9ccac2fa94eee9680709e5aaffd24e176629feb96c45f69f85c29f73c"}, "downloads": -1, "filename": "dascutils-2.1.0.tar.gz", "has_sig": false, "md5_digest": "f3fe5f7091f0e31bc2141db6e4b0e57e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2742271, "upload_time": "2020-03-31T20:40:45", "upload_time_iso_8601": "2020-03-31T20:40:45.897718Z", "url": "https://files.pythonhosted.org/packages/88/52/59155a4cd2de6075e2a528a920301ef8a9ce1b4571ecad3a7dd53d28fe9e/dascutils-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f3fe5f7091f0e31bc2141db6e4b0e57e", "sha256": "dd2a90a9ccac2fa94eee9680709e5aaffd24e176629feb96c45f69f85c29f73c"}, "downloads": -1, "filename": "dascutils-2.1.0.tar.gz", "has_sig": false, "md5_digest": "f3fe5f7091f0e31bc2141db6e4b0e57e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2742271, "upload_time": "2020-03-31T20:40:45", "upload_time_iso_8601": "2020-03-31T20:40:45.897718Z", "url": "https://files.pythonhosted.org/packages/88/52/59155a4cd2de6075e2a528a920301ef8a9ce1b4571ecad3a7dd53d28fe9e/dascutils-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:38 2020"}