{"info": {"author": "System73 Engineering Team", "author_email": "opensource@system73.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "# tamarco-kafka\n\n[![Build Status](https://travis-ci.com/System73/tamarco-kafka.svg?branch=master)](https://travis-ci.com/System73/tamarco-kafka)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=System73_tamarco-kafka&metric=coverage)](https://sonarcloud.io/dashboard?id=System73_tamarco-kafka)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=System73_tamarco-kafka&metric=alert_status)](https://sonarcloud.io/dashboard?id=System73_tamarco-kafka)\n\nKafka resource for Tamarco microservice framework. It runs a confluent-kafka client in a thread.\n\nThis repository is a plugin for Tamarco, for more information go to [Tamarco main repository](https://github.com/System73/tamarco).\n\n## Settings\n\nThis resource depends on the following configuration:\n\n```yaml\n    system:\n        resources:\n            kafka:\n                bootstrap_servers: kafka:9092\n```\n\nThe bootstrap servers are the address of the members of a kafka cluster separated by coma.\n\n## Input and outputs\n\nThe inputs and outputs need to be declared in the resource.\n\n### Input\n\nThe input can be used with two different patterns, as decorator and as async stream.\n\nThis resource only supports balanced consumer groups with auto commit.\n\n#### Async stream\n\nThis usage case uses the input as asynchronous iterator to consume the metric stream.\n\n```python3\nclass MyMicroservice(Microservice):\n    name = \"input_example\"\n\n    metrics_input = KafkaInput(topic='metrics', codec=JsonCodec)\n    kafka = KafkaResource(inputs=[metrics_input])\n\n    @task\n    async def metrics_consumer(self):\n        async for metric in self.metrics_input:\n            self.logger.info(f'Consumed message from metrics topic: {metric}')\n```\n\n### Decorator\n\nThis usage case declares a function as handler of the messages, and the resource is going to open automatically a\ncoroutine to consume each message. \n\n```python3\nclass MyMicroservice(Microservice):\n    name = \"input_example\"\n\n    kafka = KafkaResource(inputs=[metrics_input])\n\n    @KafkaInput(resource=kafka, topic='metrics', codec=JsonCodec)\n    async def metrics_handler(self, message):\n        self.logger.info(f'Consumed message from metrics topic: {message}')\n```\n\n## Output\n\nIt is a Kafka producer very simple to use.\n\n```python3\nclass MyMicroservice(Microservice):\n    name = \"output_example\"\n    metrics_output = KafkaOutput(topic='metrics', codec=JsonCodec)\n    kafka = KafkaResource(outputs=[metrics_output])\n\n    @task_timer(interval=1000, autostart=True)\n    async def metrics_producer(self):\n        metrics_message = {'metrics': {'cat': 'MEOW'}}\n        await self.metrics_output.push(metrics_message)\n        self.logger.info(f'Produced message {metrics_message} to metrics topic')\n```\n\n## How to run the examples\n\nTo run them you just need to launch the docker-compose, install the requirements and run it.\n\n```python3\npip install -r examples/requirements.txt\ndocker-compose up -d\npython examples/microservice_stream_input.py\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/System73/tamarco-kafka", "keywords": "tamarco,kafka,microservices", "license": "", "maintainer": "", "maintainer_email": "", "name": "tamarco-kafka", "package_url": "https://pypi.org/project/tamarco-kafka/", "platform": "", "project_url": "https://pypi.org/project/tamarco-kafka/", "project_urls": {"Homepage": "https://github.com/System73/tamarco-kafka"}, "release_url": "https://pypi.org/project/tamarco-kafka/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Kafka resource for Tamarco microservice framework.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tamarco-kafka</h1>\n<p><a href=\"https://travis-ci.com/System73/tamarco-kafka\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d2c72ecec091cf9ec0eddbed6301e454ceefc56/68747470733a2f2f7472617669732d63692e636f6d2f53797374656d37332f74616d6172636f2d6b61666b612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://sonarcloud.io/dashboard?id=System73_tamarco-kafka\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b027a44802723664dddcca6f77454b8d5f8478e1/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d53797374656d37335f74616d6172636f2d6b61666b61266d65747269633d636f766572616765\"></a>\n<a href=\"https://sonarcloud.io/dashboard?id=System73_tamarco-kafka\" rel=\"nofollow\"><img alt=\"Quality Gate Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df809fe8e614c2ea6a9e89aad81b627de0693def/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d53797374656d37335f74616d6172636f2d6b61666b61266d65747269633d616c6572745f737461747573\"></a></p>\n<p>Kafka resource for Tamarco microservice framework. It runs a confluent-kafka client in a thread.</p>\n<p>This repository is a plugin for Tamarco, for more information go to <a href=\"https://github.com/System73/tamarco\" rel=\"nofollow\">Tamarco main repository</a>.</p>\n<h2>Settings</h2>\n<p>This resource depends on the following configuration:</p>\n<pre>    <span class=\"nt\">system</span><span class=\"p\">:</span>\n        <span class=\"nt\">resources</span><span class=\"p\">:</span>\n            <span class=\"nt\">kafka</span><span class=\"p\">:</span>\n                <span class=\"nt\">bootstrap_servers</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">kafka:9092</span>\n</pre>\n<p>The bootstrap servers are the address of the members of a kafka cluster separated by coma.</p>\n<h2>Input and outputs</h2>\n<p>The inputs and outputs need to be declared in the resource.</p>\n<h3>Input</h3>\n<p>The input can be used with two different patterns, as decorator and as async stream.</p>\n<p>This resource only supports balanced consumer groups with auto commit.</p>\n<h4>Async stream</h4>\n<p>This usage case uses the input as asynchronous iterator to consume the metric stream.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyMicroservice</span><span class=\"p\">(</span><span class=\"n\">Microservice</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"input_example\"</span>\n\n    <span class=\"n\">metrics_input</span> <span class=\"o\">=</span> <span class=\"n\">KafkaInput</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"n\">kafka</span> <span class=\"o\">=</span> <span class=\"n\">KafkaResource</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">metrics_input</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@task</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">metrics_consumer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">metric</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metrics_input</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Consumed message from metrics topic: </span><span class=\"si\">{</span><span class=\"n\">metric</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h3>Decorator</h3>\n<p>This usage case declares a function as handler of the messages, and the resource is going to open automatically a\ncoroutine to consume each message.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyMicroservice</span><span class=\"p\">(</span><span class=\"n\">Microservice</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"input_example\"</span>\n\n    <span class=\"n\">kafka</span> <span class=\"o\">=</span> <span class=\"n\">KafkaResource</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">metrics_input</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@KafkaInput</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"n\">kafka</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">metrics_handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Consumed message from metrics topic: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h2>Output</h2>\n<p>It is a Kafka producer very simple to use.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyMicroservice</span><span class=\"p\">(</span><span class=\"n\">Microservice</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"output_example\"</span>\n    <span class=\"n\">metrics_output</span> <span class=\"o\">=</span> <span class=\"n\">KafkaOutput</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"n\">kafka</span> <span class=\"o\">=</span> <span class=\"n\">KafkaResource</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">metrics_output</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@task_timer</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">autostart</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">metrics_producer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">metrics_message</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'metrics'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'cat'</span><span class=\"p\">:</span> <span class=\"s1\">'MEOW'</span><span class=\"p\">}}</span>\n        <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metrics_output</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">metrics_message</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Produced message </span><span class=\"si\">{</span><span class=\"n\">metrics_message</span><span class=\"si\">}</span><span class=\"s1\"> to metrics topic'</span><span class=\"p\">)</span>\n</pre>\n<h2>How to run the examples</h2>\n<p>To run them you just need to launch the docker-compose, install the requirements and run it.</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">r</span> <span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">requirements</span><span class=\"o\">.</span><span class=\"n\">txt</span>\n<span class=\"n\">docker</span><span class=\"o\">-</span><span class=\"n\">compose</span> <span class=\"n\">up</span> <span class=\"o\">-</span><span class=\"n\">d</span>\n<span class=\"n\">python</span> <span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">microservice_stream_input</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre>\n\n          </div>"}, "last_serial": 5890409, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9ecc49d4d1abc30bef0f5a60e9eaafa4", "sha256": "4f8bdef609aeff86dfbb47c3ebb8d26ed14744b622f466ead0cdf8c42e0c26db"}, "downloads": -1, "filename": "tamarco-kafka-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9ecc49d4d1abc30bef0f5a60e9eaafa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15458, "upload_time": "2019-09-26T12:36:36", "upload_time_iso_8601": "2019-09-26T12:36:36.282672Z", "url": "https://files.pythonhosted.org/packages/0a/86/3dd8fdca104969e84cd4427a16ae9c8daf4bc4ef1a58e037b4c1bc1d2aa7/tamarco-kafka-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ecc49d4d1abc30bef0f5a60e9eaafa4", "sha256": "4f8bdef609aeff86dfbb47c3ebb8d26ed14744b622f466ead0cdf8c42e0c26db"}, "downloads": -1, "filename": "tamarco-kafka-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9ecc49d4d1abc30bef0f5a60e9eaafa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15458, "upload_time": "2019-09-26T12:36:36", "upload_time_iso_8601": "2019-09-26T12:36:36.282672Z", "url": "https://files.pythonhosted.org/packages/0a/86/3dd8fdca104969e84cd4427a16ae9c8daf4bc4ef1a58e037b4c1bc1d2aa7/tamarco-kafka-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:14 2020"}