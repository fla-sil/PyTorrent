{"info": {"author": "Stephen Harris", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing"], "description": "# Py_Obfuscate\n\n[![Build Status](https://travis-ci.org/stephenharris/py_obfuscate.svg?branch=master)](https://travis-ci.org/stephenharris/py_obfuscate)\n\nA module for obfuscating a mysqldump file\n\nThis project is a partial-port of <a href=\"https://github.com/mavenlink/my_obfuscate\">My_Obfusicate</a>. Under the hood it mostly uses <a href=\"https://faker.readthedocs.io/en/stable/\">Faker</a> for generating fake data.\n\n## Example usage\nThis package exposes a `py_obfuscate` module which contains `Obfuscator` class with a very simple inteface.\nIt's `obfuscate` method expects two streams: a read string (e.g. the mysqldump file) and write stream (e.g. the file to write the obfuscated dump to).\n\n```\nobfuscatator.obfuscate(streamIn, streamOut)\n```\n\nAs a more practical example, create the file `obfuscate.py`\n\n```\nimport sys\nimport yaml\nimport py_obfuscate\n\nconfig = yaml.safe_load(open(\"obfuscator.yaml\"))\nobfuscatator = py_obfuscate.Obfuscator(config)\n\nsrc = sys.stdin\nout = sys.stdout\n\nobfuscatator.obfuscate(src, out)\n```\n\nNow create a config file (`obfuscate.yaml`), e.g.:\n\n```\ntables:\n  users:\n    name:\n      type: \"name\"\n    email:\n      type: \"email\"\n    accountno:\n      type: \"string\"\n      chars: \"1234567890\"\n      length: 10\n```\n\nYou should change this config to reflect the tables and columns you wish to obfuscate.\n\nNow you can run:\n\n```\nmysqldump -c --add-drop-table --hex-blob -u user -ppassword database | python obfuscate.py > obfuscated_dump.sql\n```\n\n**Note** that the `-c` option on mysqldump is *required* to use py_obfuscate. Additionally, the default behavior of mysqldump is to output special characters. This may cause trouble, so you can request hex-encoded blob content with `\u2013hex-blob`. If you get MySQL errors due to very long lines, try some combination of `\u2013max_allowed_packet=128M`, `\u2013single-transaction`, `\u2013skip-extended-insert`, and `\u2013quick`.\n\n## Configuration\n\nIn the above example we've used YAML as the configuration format; since you pass `py_obfuscate.Obfuscator` a config object (dictionary) you can\nuse any format you wish, so long as parses into the same structure. The basic structure is:\n\n```\nlocale: <local string (optional): defaults \"en_GB\">\ntables:\n  <table>:\n    truncate: <boolean - set to true to remove insert for this table. Defaults `false`>\n    <column>:\n      type: <type - how to obfusciate this column>\n      <type-specific-option>: <type-specific-option-value> \n```\n\nTables or columns which are ommitted from the config are ignored. Currently no warning is given.\n\n### Locale\n* **type:** string\n* **default:** `\"en_GB\"`\n\nThis is the locale string passed to <a href=\"https://faker.readthedocs.io/en/stable/\">Faker</a>. \n\n### Truncate\n\nSetting `truncate: true` for a table will remove the insert from the mysqldump.\n\n### Types\n\nThese are the following types supported:\n\n#### string \n\nOptions:\n* `chars` (string) The character list to choose from (defaults `\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_+-=[{]}/?|!@#$%^&*()``~\"`)\n* `length` (integer) The length of the string (defaults `10`)\n\n#### fixed \n\nOptions:\n* `value` (string|array) Replace column entries with this value or one of the values in the specified array (defaults `\"\"`)\n\n#### integer \n\nOptions:\n* `min` (string) Replace column entries with a random integer greater than or equal to this value (defaults `0`)\n* `max` (string) Replace column entries with a random integer less than or equal to this value (defaults `100`)\n\n#### email\n\n#### name\n\n#### first_name\n\n#### last_name\n\n#### username\n\n#### address\n\n#### street_address\n\n#### secondary_address\n\n#### city\n\n#### postcode\n\n#### company\n\n#### ip\n\n#### url\n\n#### sortcode\n\n#### bank_account\n\n#### mobile\n\n#### uk_landline\n\n#### null\n\n\n## Unit testes\n\n    python -m unittest discover -s py_obfuscate\n\n\n## License\n\nThis work is provided under the MIT License. See the included LICENSE file.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stephenharris/py_obfuscate", "keywords": "obfuscate mysqldump mysql", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-obfuscate", "package_url": "https://pypi.org/project/py-obfuscate/", "platform": "", "project_url": "https://pypi.org/project/py-obfuscate/", "project_urls": {"Homepage": "https://github.com/stephenharris/py_obfuscate"}, "release_url": "https://pypi.org/project/py-obfuscate/0.1.6/", "requires_dist": ["faker"], "requires_python": "", "summary": "A module for obfuscating a mysqldump file", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Py_Obfuscate</h1>\n<p><a href=\"https://travis-ci.org/stephenharris/py_obfuscate\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d53f4f346b15d630345f016110b2c804e4957151/68747470733a2f2f7472617669732d63692e6f72672f7374657068656e6861727269732f70795f6f62667573636174652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A module for obfuscating a mysqldump file</p>\n<p>This project is a partial-port of <a href=\"https://github.com/mavenlink/my_obfuscate\" rel=\"nofollow\">My_Obfusicate</a>. Under the hood it mostly uses <a href=\"https://faker.readthedocs.io/en/stable/\" rel=\"nofollow\">Faker</a> for generating fake data.</p>\n<h2>Example usage</h2>\n<p>This package exposes a <code>py_obfuscate</code> module which contains <code>Obfuscator</code> class with a very simple inteface.\nIt's <code>obfuscate</code> method expects two streams: a read string (e.g. the mysqldump file) and write stream (e.g. the file to write the obfuscated dump to).</p>\n<pre><code>obfuscatator.obfuscate(streamIn, streamOut)\n</code></pre>\n<p>As a more practical example, create the file <code>obfuscate.py</code></p>\n<pre><code>import sys\nimport yaml\nimport py_obfuscate\n\nconfig = yaml.safe_load(open(\"obfuscator.yaml\"))\nobfuscatator = py_obfuscate.Obfuscator(config)\n\nsrc = sys.stdin\nout = sys.stdout\n\nobfuscatator.obfuscate(src, out)\n</code></pre>\n<p>Now create a config file (<code>obfuscate.yaml</code>), e.g.:</p>\n<pre><code>tables:\n  users:\n    name:\n      type: \"name\"\n    email:\n      type: \"email\"\n    accountno:\n      type: \"string\"\n      chars: \"1234567890\"\n      length: 10\n</code></pre>\n<p>You should change this config to reflect the tables and columns you wish to obfuscate.</p>\n<p>Now you can run:</p>\n<pre><code>mysqldump -c --add-drop-table --hex-blob -u user -ppassword database | python obfuscate.py &gt; obfuscated_dump.sql\n</code></pre>\n<p><strong>Note</strong> that the <code>-c</code> option on mysqldump is <em>required</em> to use py_obfuscate. Additionally, the default behavior of mysqldump is to output special characters. This may cause trouble, so you can request hex-encoded blob content with <code>\u2013hex-blob</code>. If you get MySQL errors due to very long lines, try some combination of <code>\u2013max_allowed_packet=128M</code>, <code>\u2013single-transaction</code>, <code>\u2013skip-extended-insert</code>, and <code>\u2013quick</code>.</p>\n<h2>Configuration</h2>\n<p>In the above example we've used YAML as the configuration format; since you pass <code>py_obfuscate.Obfuscator</code> a config object (dictionary) you can\nuse any format you wish, so long as parses into the same structure. The basic structure is:</p>\n<pre><code>locale: &lt;local string (optional): defaults \"en_GB\"&gt;\ntables:\n  &lt;table&gt;:\n    truncate: &lt;boolean - set to true to remove insert for this table. Defaults `false`&gt;\n    &lt;column&gt;:\n      type: &lt;type - how to obfusciate this column&gt;\n      &lt;type-specific-option&gt;: &lt;type-specific-option-value&gt; \n</code></pre>\n<p>Tables or columns which are ommitted from the config are ignored. Currently no warning is given.</p>\n<h3>Locale</h3>\n<ul>\n<li><strong>type:</strong> string</li>\n<li><strong>default:</strong> <code>\"en_GB\"</code></li>\n</ul>\n<p>This is the locale string passed to <a href=\"https://faker.readthedocs.io/en/stable/\" rel=\"nofollow\">Faker</a>.</p>\n<h3>Truncate</h3>\n<p>Setting <code>truncate: true</code> for a table will remove the insert from the mysqldump.</p>\n<h3>Types</h3>\n<p>These are the following types supported:</p>\n<h4>string</h4>\n<p>Options:</p>\n<ul>\n<li><code>chars</code> (string) The character list to choose from (defaults <code>\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_+-=[{]}/?|!@#$%^&amp;*()``~\"</code>)</li>\n<li><code>length</code> (integer) The length of the string (defaults <code>10</code>)</li>\n</ul>\n<h4>fixed</h4>\n<p>Options:</p>\n<ul>\n<li><code>value</code> (string|array) Replace column entries with this value or one of the values in the specified array (defaults <code>\"\"</code>)</li>\n</ul>\n<h4>integer</h4>\n<p>Options:</p>\n<ul>\n<li><code>min</code> (string) Replace column entries with a random integer greater than or equal to this value (defaults <code>0</code>)</li>\n<li><code>max</code> (string) Replace column entries with a random integer less than or equal to this value (defaults <code>100</code>)</li>\n</ul>\n<h4>email</h4>\n<h4>name</h4>\n<h4>first_name</h4>\n<h4>last_name</h4>\n<h4>username</h4>\n<h4>address</h4>\n<h4>street_address</h4>\n<h4>secondary_address</h4>\n<h4>city</h4>\n<h4>postcode</h4>\n<h4>company</h4>\n<h4>ip</h4>\n<h4>url</h4>\n<h4>sortcode</h4>\n<h4>bank_account</h4>\n<h4>mobile</h4>\n<h4>uk_landline</h4>\n<h4>null</h4>\n<h2>Unit testes</h2>\n<pre><code>python -m unittest discover -s py_obfuscate\n</code></pre>\n<h2>License</h2>\n<p>This work is provided under the MIT License. See the included LICENSE file.</p>\n\n          </div>"}, "last_serial": 4458896, "releases": {"0.1.6": [{"comment_text": "", "digests": {"md5": "0b2b5a260f6479b3417441dd66abb197", "sha256": "99ade377b602e977781468e9eb979bdb35d84e4c58a91f05aca9a18eadf43e4b"}, "downloads": -1, "filename": "py_obfuscate-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0b2b5a260f6479b3417441dd66abb197", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10327, "upload_time": "2018-11-06T21:10:55", "upload_time_iso_8601": "2018-11-06T21:10:55.831505Z", "url": "https://files.pythonhosted.org/packages/7e/f7/5bb147ca9e5242bec4cfa7cb9212a849b06e241304f68b92df8a075f5848/py_obfuscate-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7253bb802d7e043ab563df5096d080e7", "sha256": "7fb008498f16d80fe793ad96525855732614d09c0378abbee1bfe6b2551b96b7"}, "downloads": -1, "filename": "py_obfuscate-0.1.6.tar.gz", "has_sig": false, "md5_digest": "7253bb802d7e043ab563df5096d080e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9815, "upload_time": "2018-11-06T21:10:57", "upload_time_iso_8601": "2018-11-06T21:10:57.906752Z", "url": "https://files.pythonhosted.org/packages/46/38/979afc68fffdcb5a96f02032ccf24946bf0691042d687386fef20dfacf41/py_obfuscate-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b2b5a260f6479b3417441dd66abb197", "sha256": "99ade377b602e977781468e9eb979bdb35d84e4c58a91f05aca9a18eadf43e4b"}, "downloads": -1, "filename": "py_obfuscate-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0b2b5a260f6479b3417441dd66abb197", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10327, "upload_time": "2018-11-06T21:10:55", "upload_time_iso_8601": "2018-11-06T21:10:55.831505Z", "url": "https://files.pythonhosted.org/packages/7e/f7/5bb147ca9e5242bec4cfa7cb9212a849b06e241304f68b92df8a075f5848/py_obfuscate-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7253bb802d7e043ab563df5096d080e7", "sha256": "7fb008498f16d80fe793ad96525855732614d09c0378abbee1bfe6b2551b96b7"}, "downloads": -1, "filename": "py_obfuscate-0.1.6.tar.gz", "has_sig": false, "md5_digest": "7253bb802d7e043ab563df5096d080e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9815, "upload_time": "2018-11-06T21:10:57", "upload_time_iso_8601": "2018-11-06T21:10:57.906752Z", "url": "https://files.pythonhosted.org/packages/46/38/979afc68fffdcb5a96f02032ccf24946bf0691042d687386fef20dfacf41/py_obfuscate-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:53 2020"}