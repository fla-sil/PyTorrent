{"info": {"author": "twenty5151", "author_email": "", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# koneko [![GPLv3 license](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0.txt)\n\nBrowse pixiv in the terminal using kitty's icat to display images (in the terminal!)\n\nGallery view, square medium\n![Gallery view_square_medium1](pics/gallery_view_square_medium1.png)\n![Gallery view_square_medium2](pics/gallery_view_square_medium2.png)\nGallery view, medium (non-square)\n![Gallery view](pics/gallery_view.png)\nImage view\n![Image_view](pics/image_view.png)\nArtist search (artist profile picture on the left, 3 previews on right)\n![artist_search](pics/artist_search.png)\nView artists you're following\n![following_users_view](pics/following_users_view.png)\n\nRequires [kitty](https://github.com/kovidgoyal/kitty) on Linux. It uses the magical `kitty +kitten icat` 'kitten' to display images. For more info see the [kitty documentation](https://sw.kovidgoyal.net/kitty/kittens/icat.html). Actually, `lscat.py` uses [pixcat](https://github.com/mirukana/pixcat), which is a Python API for icat.\n\n**Why the name Koneko?** Koneko (\u3053\u306d\u3053) means kitten, which is what `icat` is, a kitty `+kitten`\n\n\n# Features\nSee the [manual](#manual) for more details\n\n1. Artist illustrations gallery ([ex](https://www.pixiv.net/bookmark.php?type=user))\n    * Enter the post's coordinates to open it in image view. Coordinates are in the form `xy` where x is column and y is row.\n    * Next and previous pages\n2. Image view ([ex](https://www.pixiv.net/en/artworks/78823485))\n    * View an image in large resolution\n    * Browse through different images in a multi-image post.\n3. View artists you are following ([ex](https://www.pixiv.net/bookmark.php?type=user))\n4. Search for an artist ([ex](https://www.pixiv.net/search_user.php?nick=raika9&s_mode=s_usr))\n5. View new illustrations from all the artists you are following ([ex](https://www.pixiv.net/bookmark_new_illust.php))\n* Both gallery and image views can:\n    * Download an image([PixivUtil](https://github.com/Nandaka/PixivUtil2/) would be more suitable for batch download) in full resolution\n    * Open post in browser\n\n\n# Rationale\n* Terminal user interfaces are minimalist, fast, and doesn't load Javascript that slows down your entire browser or track you\n    * Image loading is *so* much faster, especially if you don't delete the cache\n\nI get 32 trackers on Pixiv. Plus, you have to disable ublock if you ever get logged out\n\n<a href=\"url\"><img src=\"pics/pixiv_ublock.png\" height=\"350\"></a>\n\nThe mobile app even directly tells you Google \"and our 198 partners\" \"collect and use data\"! See [prompt 1](https://raw.githubusercontent.com/twenty5151/koneko/master/pics/ads1.png), [prompt 2](https://raw.githubusercontent.com/twenty5151/koneko/master/pics/ads2.png) (Github can't render the images correctly for some reason) and this [list](#trackers)\n\n* TUIs make you cool\n* TUIs *with embedded pictures* make you even cooler\n* TUIs embedded with pictures of cute anime girls make you the coolest\n* Keyboard driven\n* Familiar, vim-like key sequences\n* I use arch btw\n\n\n# Installation\n**Note: koneko has not been uploaded to PyPI yet (until v0.4), so at the meantime use instructions from [manual installation](#manual-installation)**\nSee also: [manual installation](#manual-installation)\n\n0. Install [kitty](https://github.com/kovidgoyal/kitty)\n1. `pip install koneko` (or if you use [conda](#conda)...):\n2. Run `koneko`\n\nIf it crashes (it shouldn't), it might be because pip didn't 'install' the welcome pictures, *and* the script failed to download them for some reason. Try:\n\n```sh\nmkdir -p ~/.local/share/koneko/pics\ncurl -s https://raw.githubusercontent.com/twenty5151/koneko/master/pics/71471144_p0.png -o ~/.local/share/koneko/pics/71471144_p0.png\ncurl -s https://raw.githubusercontent.com/twenty5151/koneko/master/pics/79494300_p0.png -o ~/.local/share/koneko/pics/79494300_p0.png\n```\n\n# Usage\nThere are five modes of operation:\n1. View artist illustrations ([ex](https://www.pixiv.net/bookmark.php?type=user))\n2. View a post ([ex](https://www.pixiv.net/en/artworks/78823485))\n3. View the artists that you are following (or any other user ID) ([ex](https://www.pixiv.net/bookmark.php?type=user))\n4. Search for artist/user ([ex](https://www.pixiv.net/search_user.php?nick=raika9&s_mode=s_usr))\n5. View newest illustrations from artists you're following ([ex](https://www.pixiv.net/bookmark_new_illust.php))\n\nEnter digits 1-5 to proceed. If prompted, paste in an appropriate pixiv ID or url. See below for url examples.\n\nAlternatively, you can supply a pixiv url as a command line argument, bypassing the first interactive prompt. The pixiv url must be either the url of the artist's page, or a pixiv post. Example:\n\n```sh\nkoneko https://www.pixiv.net/en/users/2232374 # Mode 1\nkoneko https://www.pixiv.net/en/artworks/78823485 # Mode 2\nkoneko f https://www.pixiv.net/en/users/2232374 # Mode 3\nkoneko \"raika9\" # Mode 4\nkoneko 5 # Mode 5\n```\nFor more details refer to the [manual](#manual).\n\n# Roadmap\n\n## Features\n\n* Colored multi-image indicator in gallery view\n* For multi-image posts in image view, enter a number to jump to the post's page\n* Image view should preview the next few images in multi-image posts (but either it blocks the prompt or the prompt blocks)\n* Image and User views should use lscat.py to render so alternate renderers can be used\n* Option to use pillow or wand to edit numbers on pics\n* Support [ueberzug](https://github.com/seebye/ueberzug)\n\n## Speed\n\n* Display each image as soon as they finish downloading (but due to lscat limitations, only one page at a time). Requires \"integrating\" (read: basically rewriting) lscat.py and threaded download functions\n\n# FAQ\n* Pixiv keeps emailing me saying I've logged in, every time I use this app!\n\nThat's because cookies aren't stored so you log in everytime with a new session. Looking at [PixivUtil's cookie implementation](https://github.com/Nandaka/PixivUtil2/blob/master/PixivBrowserFactory.py), it would be easier to base this app on PixivUtil for downloads, than to write it myself (currently, it's based on the [pixivpy](https://github.com/upbit/pixivpy/) api). The problems with this, other than being a huge time and effort investment, is that koneko uses info from the requests, such as number of pages.\nI should probably fix this\n\n* What operating systems does it support?\n\nIt supports all OSes that kitty supports, which means Linux and macOS. It should work on macOS, but I don't have a test device. If you do, please contribute!\n\n\n## Image rendering with lscat\n\n**Note on terminology**: [lsix](https://github.com/hackerb9/lsix/) is the name of the original shell script I used, which uses sixel. I edited it to use icat and renamed it **lscat**. Then I rewrote it with python, which is named **lscat.py**. **lscat.py is the default renderer and the fastest.**\n\n**Note on installation**: if you edit it, you'll need to install it manually (or send a PR), see [manual installation](#manual-installation)\n\nYou might have problems with image positioning with lscat.py. I wrote it to fit my screen and my terminal size, so there is no functionality to adjust for different terminal size. There are also 'magic numbers' (numbers that just exist) around. If you encounter problems, there are four things you can do, in order of least to most effort:\n\n* Revert to the old lscat shell script.\n\n    1. In `show_artist_illusts()` (`utils.py`), change `renderer=\"lscat\"` to `renderer=\"lscat old\"`.\n    2. Note that Image and User views (mode 2, 3, 4) still use lscat. The responsible code are annotated with a `# LSCAT` comment.\n\n* Revert to the original lsix script. This would be more reliable than 1., because it has all the checks for terminal sizes. However, you cannot use kitty; xterm works.\n\n    1. Make sure you're cd'ed into the koneko dir, then `curl \"https://raw.githubusercontent.com/hackerb9/lsix/master/lsix\" -o legacy/lsix && chmod +x legacy/lsix`\n\n    2. In `show_artist_illusts()` (`utils.py`), change `renderer=\"lscat\"` to `renderer=\"lsix\"`.\n\n* Adjust the 'magic numbers'. They are commented in `lscat.py`.\n* You can contribute to `lscat.py` by checking terminal size and doing all the maths and send a PR\n\n| Feature  | lscat.py | legacy/lscat | [hackerb9/lsix](https://github.com/hackerb9/lsix/) |\n| --- | --- | --- | --- |\n| Speed  | :heavy_check_mark: | :x:\\* | :x:\\*\n| Reliability (eg, resizing the terminal) | :x: | :interrobang: | :heavy_check_mark:\n| Adaptability (eg, other terminals, tmux) | :x: | :x: | :interrobang:\n\n\\* lsix will appear faster because the images are much smaller. Once you scale them up, lsix will be the slowest.\n\n# Contributing\n* Fork it\n* Edit the files on your fork\n* Submit a pull request\n* If you want to, you can create an issue first. Ask any questions by opening a new issue.\n\n**NOTE:** running `koneko.py` with python or executing it will fail with an import error (circular import). Python imports are a mess, just use `python setup.py develop` when you want to test a change.\n\n## Priorities\n(As in, what I think I need help on and what you might want to focus on, not what will only be accepted. All PRs will be considered, regardless if it's important or not)\n\n1. Speed: if it's slower than going to pixiv then half of its purpose is gone\n    * The bottleneck is network IO and downloading images from pixiv\n2. Reliable rendering: There's no point in browsing a media-heavy site if the terminal is text-only and can't render the images well\n    * While it's working perfectly for my use case, it should work well for other reasonable cases (different terminal sizes, number+name for the gallery)\n\nFlowchart of modes and their connections:\n\n![UML](http://plantuml.com:80/plantuml/png/dPDD2y8m38Rl_HM5dZtejfk8YYY2Dy6BY1IDTHWtwGVYltVMhfkrAdWgIzuyUPUcGwMvrEQCX1W5Eww0ZgJEbTuAZWZorlNn-PaBwFdFQObONlD2RBajK8bFBO7BtR6Efmq1qLJaGrsPDKsjZIvb4u3BydGRem4I6A7zphgTtyXS77Ldu6f_oYkb-uNNhZtA5lnQp2H04ONuR0lnFCAq0mOD4ig4XR-Fp094pGud7pCZ0YDVcURYB2M1fPGo2NiIN9IjhE8nBv-alaKQjUjeqS5db3qkPfMN29gyBOUjRmJjuV-I8XpyOcHHN_znwuqBXqE6KEohHtG7)\n\nSimplified UML diagram of the classes:\n\n![UML](http://plantuml.com:80/plantuml/png/dLTDQzmm4BthLuYSaZOsz5h2aX1eAQHGAEsb5AFOogwxMij8ShOXpN-l9LdsQ2IdIs_nQDvyFBtHPA-rOSeC1q68QOtWT2yxlfU447QlZMAreRLWMjCxANjwTNL-SqaLRouscsT2wTlduFNYufnVa1T2FE16cLQRpxBX3chTHm0zZ0R_vuBmW4z23Dfya4B8uqamNzAVef77ha3vtjEsst7L6Xsv_TYrJSExdqKs6m0b_NzaGd3rTDVkkNLFgCWqv2kQW0uKkjbwsshh6KTKpitqEKNFbTFntwRgsPQF9Jb3h_XZou-HJVQygqJRxQjQIjNerDuDXs2q30h9cgezZ24G0Xq2c4lghC6YkFKCNuk8Tgnh1Azw9GzzHaoWsTjBMZ-nRkasXQRKleRVoegv9DN4EMelFGSTfidb_Iy-NbRmzIU492gAn0ka0gI81kditHbzimwhnqHIS-qdPZKXLXp8bvr3c3N5egI9E3F0wUoLl33d2dRE6-PaDNN4L48kdD4eAuAb-U8BfeLgjpiplp8RFATnFbewznBB9AVP5TT9vT_74ViYJtnk9stwjs04LSvfilhfdQ9F8sHDsQ6XyT27SQ3kzOXDxZMAJUuzaeD6Pi7P8_V3dxILyFkLCrNllcckT712Um7709UVX2zBp4hyQHqS6yHpCdv6V8Nhy5VNTjkeiFbI7i9nVczaUfgXsfrbeDFr3IDghcQbZ8J4tCIJN1Md8MF-yqMixESYrpnSow2_j1g7GbtREuAaWFZuA7jviUxJ6qBdQ4tFBdWvB-l4wYfeFx-oxOZqgzjpaS2KBCixu31s0wq0dnNbm2s0uyzluwBkd8HWY2ZtZ5yaZjaKkcQcj5ERetJvDqBnhk4AJ9G7tZBLp8EquXEUsumRWUcd3fR0WBp8J_07KyJ1ePxzPJXIIXkoZ4BEdDXdADdb7ZNqE7gCmXlnD5G2AugX1wE6QacNTxe9yQQDHl6VBqkWVwd7Chi22DiMCnR_1lW_JDH7kC2aVCmFKE3hH9BhKN7kzzXV)\n\n## Conda environment\n\n```sh\ngit clone -b 'v0.4' --depth 1 https://github.com/twenty5151/koneko.git\n\nconda create -n koneko\nconda activate koneko\nconda env list                  # make sure you're in the correct environment...\nconda install -n koneko pip     # and make sure pip is installed...\nwhich pip                       # and pip is in your conda directory\n\npip install koneko\n\n# Use anywhere:\nkoneko\n\n# To remove the conda env:\nconda remove --name koneko --all\n```\n\n## Manual installation\n```sh\n# Use the latest stable version (recommended)\n# Make sure the version number is the latest\ngit clone -b 'v0.3' --depth 1 https://github.com/twenty5151/koneko.git\n# Use the master branch for upcoming features:\ngit clone -b master https://github.com/twenty5151/koneko.git\n# Use the dev branch for latest features, fixes, and instability:\ngit clone -b dev https://github.com/twenty5151/koneko.git\n\n# Manually install without PyPI\n# Both will correctly copy the required pictures\ncd koneko\npip install .\n# or\npython setup.py install\n\n# On certain shells with implicit cd, typing `koneko` might cd into the dir\n# Instead of running the executable\ncd ~\n# Use anywhere:\nkoneko\n```\n\n## Unit tests\nUse `pytest testing.py -v`. For type checking use mypy: `mypy koneko.py --ignore-missing-imports -v`\n\n\nHere's a random shell command to get (but not download) and display any pixiv image url:\n```sh\ncurl -e 'https://www.pixiv.net' \"https://i.pximg.net/img-original/img/2019/12/21/20/13/12/78403815_p0.jpg\" | kitty +kitten icat --align left --place 800x480@0x5\n```\n\n# Manual\n\n```\nBrowse pixiv in the terminal using kitty's icat to display images (in the\nterminal!)\n\nUsage:\n  koneko       [<link> | <searchstr>]\n  koneko [1|a] <link_or_id>\n  koneko [2|i] <link_or_id>\n  koneko (3|f) <link_or_id>\n  koneko [4|s] <searchstr>\n  koneko [5|n]\n  koneko -h\n\nNotes:\n*  If you supply a link and want to go to mode 3, you must give the (3|f) argument,\n   otherwise your link would default to mode 1.\n*  It is assumed you won't need to search for an artist named '5' or 'n' from the\n   command line, because it would go to mode 5.\n\nOptional arguments (for specifying a mode):\n  1 a  Mode 1 (Artist gallery)\n  2 i  Mode 2 (Image view)\n  3 f  Mode 3 (Following artists)\n  4 s  Mode 4 (Search for artists)\n  5 n  Mode 5 (Newest works from following artists (\"illust follow\"))\n\nRequired arguments if a mode is specified:\n  <link>        Pixiv url, auto detect mode. Only works for modes 1, 2, and 4\n  <link_or_id>  Either pixiv url or artist ID or image ID\n  <searchstr>   String to search for artists\n\nOptions:\n  -h  Show this help\n```\n\n```\nArtist Gallery commands: (No need to press enter)\n    Using coordinates, where {digit1} is the row and {digit2} is the column\n    {digit1}{digit2}   -- display the image on row digit1 and column digit2\n    o{digit1}{digit2}  -- open pixiv image/post in browser\n    d{digit1}{digit2}  -- download image in large resolution\n\nUsing image number, where {number} is the nth image in order (see examples)\n    i{number}          -- display the image\n    O{number}          -- open pixiv image/post in browser.\n    D{number}          -- download image in large resolution.\n\n    n                  -- view the next page\n    p                  -- view the previous page\n    r                  -- delete all cached images, re-download and reload view\n    b                  -- go back to previous mode (either 3, 4, 5, or main screen)\n    h                  -- show this help\n    q                  -- quit (with confirmation)\n\nExamples:\n    i09   --->  Display the ninth image in image view (must have leading 0)\n    i10   --->  Display the tenth image in image view\n    O9    --->  Open the ninth image's post in browser\n    D9    --->  Download the ninth image, in large resolution\n\n    25    --->  Display the image on column 2, row 5 (index starts at 1)\n    d25   --->  Open the image on column 2, row 5 (index starts at 1) in browser\n    o25   --->  Download the image on column 2, row 5 (index starts at 1)\n```\n\n```\nImage view commands (No need to press enter):\n    b -- go back to the gallery\n    n -- view next image in post (only for posts with multiple pages)\n    p -- view previous image in post (same as above)\n    d -- download this image\n    o -- open pixiv post in browser\n    h -- show this help\n\n    q -- quit (with confirmation)\n```\n\n```\nUser view commands (No need to press enter):\n    n -- view next page\n    p -- view previous page\n    h -- show this help\n    q -- quit (with confirmation)\n```\n\n```\nIllust Follow Gallery commands: (No need to press enter)\n    Using coordinates, where {digit1} is the row and {digit2} is the column\n    {digit1}{digit2}   -- display the image on row digit1 and column digit2\n    o{digit1}{digit2}  -- open pixiv image/post in browser\n    d{digit1}{digit2}  -- download image in large resolution\n    a{digit1}{digit2}  -- view illusts by the artist of the selected image\n\nUsing image number, where {number} is the nth image in order (see examples)\n    i{number}          -- display the image\n    O{number}          -- open pixiv image/post in browser.\n    D{number}          -- download image in large resolution.\n    A{number}          -- view illusts by the artist of the selected image\n\n    n                  -- view the next page\n    p                  -- view the previous page\n    r                  -- delete all cached images, re-download and reload view\n    b                  -- go back to main screen\n    h                  -- show this help\n    q                  -- quit (with confirmation)\n\nExamples:\n    i09   --->  Display the ninth image in image view (must have leading 0)\n    i10   --->  Display the tenth image in image view\n    O9    --->  Open the ninth image's post in browser\n    D9    --->  Download the ninth image, in large resolution\n\n    25    --->  Display the image on column 2, row 5 (index starts at 1)\n    d25   --->  Open the image on column 2, row 5 (index starts at 1) in browser\n    o25   --->  Download the image on column 2, row 5 (index starts at 1)\n```\n\n## Trackers\nNine trackers in the Android app, according to [exodus](https://reports.exodus-privacy.eu.org/en/reports/jp.pxv.android/latest/):\n\n* Amazon Advertisement\n* AMoAd\n* Google Ads\n* Google CrashLytics\n* Google DoubleClick\n* Google Firebase Analytics\n* Integral Ad Science\n* Moat\n* Twitter MoPub\n\nAdvertisers from pixiv's [privacy policy](https://policies.pixiv.net/en.html#booth):\n\n* Qualaroo\n* DDAI\uff08Date Driven Advertising Initiative\uff09\n* YourAdChoices\n* Rubicon Project\n* i-Mobile Co., Ltd.\n* Akinasista Corporation\n* Axel Mark Inc.\n* AppLovin\n* Amazon Japan G.K.\n* AmoAd Inc.\n* AOL Platforms Japan K.K.\n* OpenX\n* Google Inc.\n* CRITEO K.K.\n* CyberAgent, Inc.\n* Geniee, Inc.\n* Supership Inc.\n* GMO AD Marketing Inc.\n* F@N Communications, Inc.\n* Facebook Inc.\n* Fluct, Inc.\n* Platform One Inc.\n* MicroAd Inc.\n* MoPub Inc.\n* Yahoo! Japan Corporation\n* United, Inc.\n* \u682a\u5f0f\u4f1a\u793eZucks\n* PubMatic, Inc.\n* Liftoff Mobile, Inc.\n* Mobfox US LLC\n* OneSignal\n* Smaato, Inc.\n* SMN\u682a\u5f0f\u4f1a\u793e\n* \u682a\u5f0f\u4f1a\u793e\u30a2\u30c9\u30a4\u30f3\u30c6\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/twenty5151/koneko", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "koneko", "package_url": "https://pypi.org/project/koneko/", "platform": "", "project_url": "https://pypi.org/project/koneko/", "project_urls": {"Homepage": "https://github.com/twenty5151/koneko"}, "release_url": "https://pypi.org/project/koneko/0.4/", "requires_dist": ["funcy (==1.14)", "docopt (==0.6.2)", "pixcat (==0.1.4)", "tqdm (==4.44.1)", "cytoolz (==0.10.1)", "PixivPy (==3.5.7)", "blessed (==1.17.4)", "colorama (==0.4.3)"], "requires_python": "", "summary": "Browse pixiv in the terminal", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>koneko <a href=\"https://www.gnu.org/licenses/gpl-3.0.txt\" rel=\"nofollow\"><img alt=\"GPLv3 license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></a></h1>\n<p>Browse pixiv in the terminal using kitty's icat to display images (in the terminal!)</p>\n<p>Gallery view, square medium\n<img alt=\"Gallery view_square_medium1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b966a896b6ebc9832cbc71b1fa02bddc470a1b6f/706963732f67616c6c6572795f766965775f7371756172655f6d656469756d312e706e67\">\n<img alt=\"Gallery view_square_medium2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec56e58d6512c012de4fc4de81e7ab45ccab7d91/706963732f67616c6c6572795f766965775f7371756172655f6d656469756d322e706e67\">\nGallery view, medium (non-square)\n<img alt=\"Gallery view\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2260f7dd0a3793052ea8a40c1d7e42df47a99ed/706963732f67616c6c6572795f766965772e706e67\">\nImage view\n<img alt=\"Image_view\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/182e2a8829690100cade7913643f82e9132bf296/706963732f696d6167655f766965772e706e67\">\nArtist search (artist profile picture on the left, 3 previews on right)\n<img alt=\"artist_search\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/317c8ff3c3deb1f3a962ded4d8b3be7d48611a10/706963732f6172746973745f7365617263682e706e67\">\nView artists you're following\n<img alt=\"following_users_view\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd74e81786340c626a34cd46c506363e089e3712/706963732f666f6c6c6f77696e675f75736572735f766965772e706e67\"></p>\n<p>Requires <a href=\"https://github.com/kovidgoyal/kitty\" rel=\"nofollow\">kitty</a> on Linux. It uses the magical <code>kitty +kitten icat</code> 'kitten' to display images. For more info see the <a href=\"https://sw.kovidgoyal.net/kitty/kittens/icat.html\" rel=\"nofollow\">kitty documentation</a>. Actually, <code>lscat.py</code> uses <a href=\"https://github.com/mirukana/pixcat\" rel=\"nofollow\">pixcat</a>, which is a Python API for icat.</p>\n<p><strong>Why the name Koneko?</strong> Koneko (\u3053\u306d\u3053) means kitten, which is what <code>icat</code> is, a kitty <code>+kitten</code></p>\n<h1>Features</h1>\n<p>See the <a href=\"#manual\" rel=\"nofollow\">manual</a> for more details</p>\n<ol>\n<li>Artist illustrations gallery (<a href=\"https://www.pixiv.net/bookmark.php?type=user\" rel=\"nofollow\">ex</a>)\n<ul>\n<li>Enter the post's coordinates to open it in image view. Coordinates are in the form <code>xy</code> where x is column and y is row.</li>\n<li>Next and previous pages</li>\n</ul>\n</li>\n<li>Image view (<a href=\"https://www.pixiv.net/en/artworks/78823485\" rel=\"nofollow\">ex</a>)\n<ul>\n<li>View an image in large resolution</li>\n<li>Browse through different images in a multi-image post.</li>\n</ul>\n</li>\n<li>View artists you are following (<a href=\"https://www.pixiv.net/bookmark.php?type=user\" rel=\"nofollow\">ex</a>)</li>\n<li>Search for an artist (<a href=\"https://www.pixiv.net/search_user.php?nick=raika9&amp;s_mode=s_usr\" rel=\"nofollow\">ex</a>)</li>\n<li>View new illustrations from all the artists you are following (<a href=\"https://www.pixiv.net/bookmark_new_illust.php\" rel=\"nofollow\">ex</a>)</li>\n</ol>\n<ul>\n<li>Both gallery and image views can:\n<ul>\n<li>Download an image(<a href=\"https://github.com/Nandaka/PixivUtil2/\" rel=\"nofollow\">PixivUtil</a> would be more suitable for batch download) in full resolution</li>\n<li>Open post in browser</li>\n</ul>\n</li>\n</ul>\n<h1>Rationale</h1>\n<ul>\n<li>Terminal user interfaces are minimalist, fast, and doesn't load Javascript that slows down your entire browser or track you\n<ul>\n<li>Image loading is <em>so</em> much faster, especially if you don't delete the cache</li>\n</ul>\n</li>\n</ul>\n<p>I get 32 trackers on Pixiv. Plus, you have to disable ublock if you ever get logged out</p>\n<p><a href=\"url\" rel=\"nofollow\"><img height=\"350\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3d25a194d71a021cddddd716ec949235ee23a8e/706963732f70697869765f75626c6f636b2e706e67\"></a></p>\n<p>The mobile app even directly tells you Google \"and our 198 partners\" \"collect and use data\"! See <a href=\"https://raw.githubusercontent.com/twenty5151/koneko/master/pics/ads1.png\" rel=\"nofollow\">prompt 1</a>, <a href=\"https://raw.githubusercontent.com/twenty5151/koneko/master/pics/ads2.png\" rel=\"nofollow\">prompt 2</a> (Github can't render the images correctly for some reason) and this <a href=\"#trackers\" rel=\"nofollow\">list</a></p>\n<ul>\n<li>TUIs make you cool</li>\n<li>TUIs <em>with embedded pictures</em> make you even cooler</li>\n<li>TUIs embedded with pictures of cute anime girls make you the coolest</li>\n<li>Keyboard driven</li>\n<li>Familiar, vim-like key sequences</li>\n<li>I use arch btw</li>\n</ul>\n<h1>Installation</h1>\n<p><strong>Note: koneko has not been uploaded to PyPI yet (until v0.4), so at the meantime use instructions from <a href=\"#manual-installation\" rel=\"nofollow\">manual installation</a></strong>\nSee also: <a href=\"#manual-installation\" rel=\"nofollow\">manual installation</a></p>\n<ol>\n<li>Install <a href=\"https://github.com/kovidgoyal/kitty\" rel=\"nofollow\">kitty</a></li>\n<li><code>pip install koneko</code> (or if you use <a href=\"#conda\" rel=\"nofollow\">conda</a>...):</li>\n<li>Run <code>koneko</code></li>\n</ol>\n<p>If it crashes (it shouldn't), it might be because pip didn't 'install' the welcome pictures, <em>and</em> the script failed to download them for some reason. Try:</p>\n<pre>mkdir -p ~/.local/share/koneko/pics\ncurl -s https://raw.githubusercontent.com/twenty5151/koneko/master/pics/71471144_p0.png -o ~/.local/share/koneko/pics/71471144_p0.png\ncurl -s https://raw.githubusercontent.com/twenty5151/koneko/master/pics/79494300_p0.png -o ~/.local/share/koneko/pics/79494300_p0.png\n</pre>\n<h1>Usage</h1>\n<p>There are five modes of operation:</p>\n<ol>\n<li>View artist illustrations (<a href=\"https://www.pixiv.net/bookmark.php?type=user\" rel=\"nofollow\">ex</a>)</li>\n<li>View a post (<a href=\"https://www.pixiv.net/en/artworks/78823485\" rel=\"nofollow\">ex</a>)</li>\n<li>View the artists that you are following (or any other user ID) (<a href=\"https://www.pixiv.net/bookmark.php?type=user\" rel=\"nofollow\">ex</a>)</li>\n<li>Search for artist/user (<a href=\"https://www.pixiv.net/search_user.php?nick=raika9&amp;s_mode=s_usr\" rel=\"nofollow\">ex</a>)</li>\n<li>View newest illustrations from artists you're following (<a href=\"https://www.pixiv.net/bookmark_new_illust.php\" rel=\"nofollow\">ex</a>)</li>\n</ol>\n<p>Enter digits 1-5 to proceed. If prompted, paste in an appropriate pixiv ID or url. See below for url examples.</p>\n<p>Alternatively, you can supply a pixiv url as a command line argument, bypassing the first interactive prompt. The pixiv url must be either the url of the artist's page, or a pixiv post. Example:</p>\n<pre>koneko https://www.pixiv.net/en/users/2232374 <span class=\"c1\"># Mode 1</span>\nkoneko https://www.pixiv.net/en/artworks/78823485 <span class=\"c1\"># Mode 2</span>\nkoneko f https://www.pixiv.net/en/users/2232374 <span class=\"c1\"># Mode 3</span>\nkoneko <span class=\"s2\">\"raika9\"</span> <span class=\"c1\"># Mode 4</span>\nkoneko <span class=\"m\">5</span> <span class=\"c1\"># Mode 5</span>\n</pre>\n<p>For more details refer to the <a href=\"#manual\" rel=\"nofollow\">manual</a>.</p>\n<h1>Roadmap</h1>\n<h2>Features</h2>\n<ul>\n<li>Colored multi-image indicator in gallery view</li>\n<li>For multi-image posts in image view, enter a number to jump to the post's page</li>\n<li>Image view should preview the next few images in multi-image posts (but either it blocks the prompt or the prompt blocks)</li>\n<li>Image and User views should use lscat.py to render so alternate renderers can be used</li>\n<li>Option to use pillow or wand to edit numbers on pics</li>\n<li>Support <a href=\"https://github.com/seebye/ueberzug\" rel=\"nofollow\">ueberzug</a></li>\n</ul>\n<h2>Speed</h2>\n<ul>\n<li>Display each image as soon as they finish downloading (but due to lscat limitations, only one page at a time). Requires \"integrating\" (read: basically rewriting) lscat.py and threaded download functions</li>\n</ul>\n<h1>FAQ</h1>\n<ul>\n<li>Pixiv keeps emailing me saying I've logged in, every time I use this app!</li>\n</ul>\n<p>That's because cookies aren't stored so you log in everytime with a new session. Looking at <a href=\"https://github.com/Nandaka/PixivUtil2/blob/master/PixivBrowserFactory.py\" rel=\"nofollow\">PixivUtil's cookie implementation</a>, it would be easier to base this app on PixivUtil for downloads, than to write it myself (currently, it's based on the <a href=\"https://github.com/upbit/pixivpy/\" rel=\"nofollow\">pixivpy</a> api). The problems with this, other than being a huge time and effort investment, is that koneko uses info from the requests, such as number of pages.\nI should probably fix this</p>\n<ul>\n<li>What operating systems does it support?</li>\n</ul>\n<p>It supports all OSes that kitty supports, which means Linux and macOS. It should work on macOS, but I don't have a test device. If you do, please contribute!</p>\n<h2>Image rendering with lscat</h2>\n<p><strong>Note on terminology</strong>: <a href=\"https://github.com/hackerb9/lsix/\" rel=\"nofollow\">lsix</a> is the name of the original shell script I used, which uses sixel. I edited it to use icat and renamed it <strong>lscat</strong>. Then I rewrote it with python, which is named <strong>lscat.py</strong>. <strong>lscat.py is the default renderer and the fastest.</strong></p>\n<p><strong>Note on installation</strong>: if you edit it, you'll need to install it manually (or send a PR), see <a href=\"#manual-installation\" rel=\"nofollow\">manual installation</a></p>\n<p>You might have problems with image positioning with lscat.py. I wrote it to fit my screen and my terminal size, so there is no functionality to adjust for different terminal size. There are also 'magic numbers' (numbers that just exist) around. If you encounter problems, there are four things you can do, in order of least to most effort:</p>\n<ul>\n<li>\n<p>Revert to the old lscat shell script.</p>\n<ol>\n<li>In <code>show_artist_illusts()</code> (<code>utils.py</code>), change <code>renderer=\"lscat\"</code> to <code>renderer=\"lscat old\"</code>.</li>\n<li>Note that Image and User views (mode 2, 3, 4) still use lscat. The responsible code are annotated with a <code># LSCAT</code> comment.</li>\n</ol>\n</li>\n<li>\n<p>Revert to the original lsix script. This would be more reliable than 1., because it has all the checks for terminal sizes. However, you cannot use kitty; xterm works.</p>\n<ol>\n<li>\n<p>Make sure you're cd'ed into the koneko dir, then <code>curl \"https://raw.githubusercontent.com/hackerb9/lsix/master/lsix\" -o legacy/lsix &amp;&amp; chmod +x legacy/lsix</code></p>\n</li>\n<li>\n<p>In <code>show_artist_illusts()</code> (<code>utils.py</code>), change <code>renderer=\"lscat\"</code> to <code>renderer=\"lsix\"</code>.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Adjust the 'magic numbers'. They are commented in <code>lscat.py</code>.</p>\n</li>\n<li>\n<p>You can contribute to <code>lscat.py</code> by checking terminal size and doing all the maths and send a PR</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>lscat.py</th>\n<th>legacy/lscat</th>\n<th><a href=\"https://github.com/hackerb9/lsix/\" rel=\"nofollow\">hackerb9/lsix</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Speed</td>\n<td>:heavy_check_mark:</td>\n<td>:x:*</td>\n<td>:x:*</td>\n</tr>\n<tr>\n<td>Reliability (eg, resizing the terminal)</td>\n<td>:x:</td>\n<td>:interrobang:</td>\n<td>:heavy_check_mark:</td>\n</tr>\n<tr>\n<td>Adaptability (eg, other terminals, tmux)</td>\n<td>:x:</td>\n<td>:x:</td>\n<td>:interrobang:</td>\n</tr></tbody></table>\n<p>* lsix will appear faster because the images are much smaller. Once you scale them up, lsix will be the slowest.</p>\n<h1>Contributing</h1>\n<ul>\n<li>Fork it</li>\n<li>Edit the files on your fork</li>\n<li>Submit a pull request</li>\n<li>If you want to, you can create an issue first. Ask any questions by opening a new issue.</li>\n</ul>\n<p><strong>NOTE:</strong> running <code>koneko.py</code> with python or executing it will fail with an import error (circular import). Python imports are a mess, just use <code>python setup.py develop</code> when you want to test a change.</p>\n<h2>Priorities</h2>\n<p>(As in, what I think I need help on and what you might want to focus on, not what will only be accepted. All PRs will be considered, regardless if it's important or not)</p>\n<ol>\n<li>Speed: if it's slower than going to pixiv then half of its purpose is gone\n<ul>\n<li>The bottleneck is network IO and downloading images from pixiv</li>\n</ul>\n</li>\n<li>Reliable rendering: There's no point in browsing a media-heavy site if the terminal is text-only and can't render the images well\n<ul>\n<li>While it's working perfectly for my use case, it should work well for other reasonable cases (different terminal sizes, number+name for the gallery)</li>\n</ul>\n</li>\n</ol>\n<p>Flowchart of modes and their connections:</p>\n<p><img alt=\"UML\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecf5548ffb64f96385e8dbfbdfaf64c5a45c1d32/687474703a2f2f706c616e74756d6c2e636f6d3a38302f706c616e74756d6c2f706e672f645044443279386d3338526c5f484d35645a74656a666b3859595932447936425931494454485774774756596c74564d68666b7241645767497a75795550556347774d767245514358315735457777305a674a45625475415a575a6f726c4e6e2d50614277466446514f624f4e6c44325242616a4b386246424f374274523645666d7131714c4a6147727350444b736a5a4976623475334279644752656d34493641377a706867547479585337374c647536665f6f596b622d754e4e685a7441356c6e5170324830344f4e7552306c6e46434171306d4f443469673458522d4670303934704775643770435a305944566355525942324d316650476f324e69494e39496a6845386e42762d616c614b516a556a65715335646233716b50664d4e32396779424f556a526d4a6a75562d49385870794f6348484e5f7a6e77757142587145364b456f6848744737\"></p>\n<p>Simplified UML diagram of the classes:</p>\n<p><img alt=\"UML\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0665373edc11297e3580490a4c1f5602d30c25e/687474703a2f2f706c616e74756d6c2e636f6d3a38302f706c616e74756d6c2f706e672f644c5444517a6d6d344274684c755953615a4f737a3568326158316541514847414573623541464f6f6777784d696a3853684f58704e2d6c394c64735132496449735f6e514476794642744850412d724f53654331713638514f7457543279786c6655343437516c5a4d417265524c574d6a4378414e6a77544e4c2d5371614c526f75736373543277546c6475464e5975666e566131543246453136634c51527078425833636854486d307a5a30525f7675426d57347a3233446679613442387571616d4e7a41566566373768613376746a45737374374c365873765f5459724a53457864714b73366d30625f4e7a61476433725444566b6b4e4c466743577176326b515730754b6b6a627773736868364b544b70697471454b4e466254466e7477526773505146394a6233685f585a6f752d484a56517967714a5278516a51496a4e657244754458733271333068396367657a5a3234473058713263346c67684336596b464b434e756b3854676e6831417a7739477a7a48616f5773546a424d5a2d6e526b61735851524b6c6552566f65677639444e34454d656c46475354666964625f49792d4e62526d7a495534393267416e306b6130674938316b64697448627a696d77686e714849532d7164505a4b584c5870386276723363334e35656749394533463077556f4c6c33336432645245362d5061444e4e344c34386b64443465417541622d55384266654c676a7069706c7038524641546e466265777a6e4242394156503554543976545f37345669594a746e6b397374776a7330344c537666696c6866645139463873484473513658795432375351336b7a4f5844785a4d414a55757a6165443650693750385f56336478494c79466b4c43724e6c6c63636b54373132556d37373039555658327a427034687951487153367948704364763656384e687935564e546a6b65694662493769396e56637a6155666758736672626544467233494467686351625a384a347443494a4e314d64384d462d79714d697845535972706e536f77325f6a316737476274524575416157465a7541376a766955784a367142645134744642645776422d6c347759666546782d6f784f5a71677a6a706153324b424369787533317330777130646e4e626d32733075797a6c7577426b6438485759325a745a3579615a6a614b6b6351636a35455265744a764471426e686b34414a394737745a424c703845717558455573756d525755636433665230574270384a5f30374b794a316550787a504a584949586b6f5a3442456444586441446462375a4e71453767436d586c6e4435473241756758317745365161634e5478653979515144486c365642716b5756776437436869323244694d436e525f316c575f4a4448376b43326156436d464b453368483942684b4e376b7a7a5856\"></p>\n<h2>Conda environment</h2>\n<pre>git clone -b <span class=\"s1\">'v0.4'</span> --depth <span class=\"m\">1</span> https://github.com/twenty5151/koneko.git\n\nconda create -n koneko\nconda activate koneko\nconda env list                  <span class=\"c1\"># make sure you're in the correct environment...</span>\nconda install -n koneko pip     <span class=\"c1\"># and make sure pip is installed...</span>\nwhich pip                       <span class=\"c1\"># and pip is in your conda directory</span>\n\npip install koneko\n\n<span class=\"c1\"># Use anywhere:</span>\nkoneko\n\n<span class=\"c1\"># To remove the conda env:</span>\nconda remove --name koneko --all\n</pre>\n<h2>Manual installation</h2>\n<pre><span class=\"c1\"># Use the latest stable version (recommended)</span>\n<span class=\"c1\"># Make sure the version number is the latest</span>\ngit clone -b <span class=\"s1\">'v0.3'</span> --depth <span class=\"m\">1</span> https://github.com/twenty5151/koneko.git\n<span class=\"c1\"># Use the master branch for upcoming features:</span>\ngit clone -b master https://github.com/twenty5151/koneko.git\n<span class=\"c1\"># Use the dev branch for latest features, fixes, and instability:</span>\ngit clone -b dev https://github.com/twenty5151/koneko.git\n\n<span class=\"c1\"># Manually install without PyPI</span>\n<span class=\"c1\"># Both will correctly copy the required pictures</span>\n<span class=\"nb\">cd</span> koneko\npip install .\n<span class=\"c1\"># or</span>\npython setup.py install\n\n<span class=\"c1\"># On certain shells with implicit cd, typing `koneko` might cd into the dir</span>\n<span class=\"c1\"># Instead of running the executable</span>\n<span class=\"nb\">cd</span> ~\n<span class=\"c1\"># Use anywhere:</span>\nkoneko\n</pre>\n<h2>Unit tests</h2>\n<p>Use <code>pytest testing.py -v</code>. For type checking use mypy: <code>mypy koneko.py --ignore-missing-imports -v</code></p>\n<p>Here's a random shell command to get (but not download) and display any pixiv image url:</p>\n<pre>curl -e <span class=\"s1\">'https://www.pixiv.net'</span> <span class=\"s2\">\"https://i.pximg.net/img-original/img/2019/12/21/20/13/12/78403815_p0.jpg\"</span> <span class=\"p\">|</span> kitty +kitten icat --align left --place 800x480@0x5\n</pre>\n<h1>Manual</h1>\n<pre><code>Browse pixiv in the terminal using kitty's icat to display images (in the\nterminal!)\n\nUsage:\n  koneko       [&lt;link&gt; | &lt;searchstr&gt;]\n  koneko [1|a] &lt;link_or_id&gt;\n  koneko [2|i] &lt;link_or_id&gt;\n  koneko (3|f) &lt;link_or_id&gt;\n  koneko [4|s] &lt;searchstr&gt;\n  koneko [5|n]\n  koneko -h\n\nNotes:\n*  If you supply a link and want to go to mode 3, you must give the (3|f) argument,\n   otherwise your link would default to mode 1.\n*  It is assumed you won't need to search for an artist named '5' or 'n' from the\n   command line, because it would go to mode 5.\n\nOptional arguments (for specifying a mode):\n  1 a  Mode 1 (Artist gallery)\n  2 i  Mode 2 (Image view)\n  3 f  Mode 3 (Following artists)\n  4 s  Mode 4 (Search for artists)\n  5 n  Mode 5 (Newest works from following artists (\"illust follow\"))\n\nRequired arguments if a mode is specified:\n  &lt;link&gt;        Pixiv url, auto detect mode. Only works for modes 1, 2, and 4\n  &lt;link_or_id&gt;  Either pixiv url or artist ID or image ID\n  &lt;searchstr&gt;   String to search for artists\n\nOptions:\n  -h  Show this help\n</code></pre>\n<pre><code>Artist Gallery commands: (No need to press enter)\n    Using coordinates, where {digit1} is the row and {digit2} is the column\n    {digit1}{digit2}   -- display the image on row digit1 and column digit2\n    o{digit1}{digit2}  -- open pixiv image/post in browser\n    d{digit1}{digit2}  -- download image in large resolution\n\nUsing image number, where {number} is the nth image in order (see examples)\n    i{number}          -- display the image\n    O{number}          -- open pixiv image/post in browser.\n    D{number}          -- download image in large resolution.\n\n    n                  -- view the next page\n    p                  -- view the previous page\n    r                  -- delete all cached images, re-download and reload view\n    b                  -- go back to previous mode (either 3, 4, 5, or main screen)\n    h                  -- show this help\n    q                  -- quit (with confirmation)\n\nExamples:\n    i09   ---&gt;  Display the ninth image in image view (must have leading 0)\n    i10   ---&gt;  Display the tenth image in image view\n    O9    ---&gt;  Open the ninth image's post in browser\n    D9    ---&gt;  Download the ninth image, in large resolution\n\n    25    ---&gt;  Display the image on column 2, row 5 (index starts at 1)\n    d25   ---&gt;  Open the image on column 2, row 5 (index starts at 1) in browser\n    o25   ---&gt;  Download the image on column 2, row 5 (index starts at 1)\n</code></pre>\n<pre><code>Image view commands (No need to press enter):\n    b -- go back to the gallery\n    n -- view next image in post (only for posts with multiple pages)\n    p -- view previous image in post (same as above)\n    d -- download this image\n    o -- open pixiv post in browser\n    h -- show this help\n\n    q -- quit (with confirmation)\n</code></pre>\n<pre><code>User view commands (No need to press enter):\n    n -- view next page\n    p -- view previous page\n    h -- show this help\n    q -- quit (with confirmation)\n</code></pre>\n<pre><code>Illust Follow Gallery commands: (No need to press enter)\n    Using coordinates, where {digit1} is the row and {digit2} is the column\n    {digit1}{digit2}   -- display the image on row digit1 and column digit2\n    o{digit1}{digit2}  -- open pixiv image/post in browser\n    d{digit1}{digit2}  -- download image in large resolution\n    a{digit1}{digit2}  -- view illusts by the artist of the selected image\n\nUsing image number, where {number} is the nth image in order (see examples)\n    i{number}          -- display the image\n    O{number}          -- open pixiv image/post in browser.\n    D{number}          -- download image in large resolution.\n    A{number}          -- view illusts by the artist of the selected image\n\n    n                  -- view the next page\n    p                  -- view the previous page\n    r                  -- delete all cached images, re-download and reload view\n    b                  -- go back to main screen\n    h                  -- show this help\n    q                  -- quit (with confirmation)\n\nExamples:\n    i09   ---&gt;  Display the ninth image in image view (must have leading 0)\n    i10   ---&gt;  Display the tenth image in image view\n    O9    ---&gt;  Open the ninth image's post in browser\n    D9    ---&gt;  Download the ninth image, in large resolution\n\n    25    ---&gt;  Display the image on column 2, row 5 (index starts at 1)\n    d25   ---&gt;  Open the image on column 2, row 5 (index starts at 1) in browser\n    o25   ---&gt;  Download the image on column 2, row 5 (index starts at 1)\n</code></pre>\n<h2>Trackers</h2>\n<p>Nine trackers in the Android app, according to <a href=\"https://reports.exodus-privacy.eu.org/en/reports/jp.pxv.android/latest/\" rel=\"nofollow\">exodus</a>:</p>\n<ul>\n<li>Amazon Advertisement</li>\n<li>AMoAd</li>\n<li>Google Ads</li>\n<li>Google CrashLytics</li>\n<li>Google DoubleClick</li>\n<li>Google Firebase Analytics</li>\n<li>Integral Ad Science</li>\n<li>Moat</li>\n<li>Twitter MoPub</li>\n</ul>\n<p>Advertisers from pixiv's <a href=\"https://policies.pixiv.net/en.html#booth\" rel=\"nofollow\">privacy policy</a>:</p>\n<ul>\n<li>Qualaroo</li>\n<li>DDAI\uff08Date Driven Advertising Initiative\uff09</li>\n<li>YourAdChoices</li>\n<li>Rubicon Project</li>\n<li>i-Mobile Co., Ltd.</li>\n<li>Akinasista Corporation</li>\n<li>Axel Mark Inc.</li>\n<li>AppLovin</li>\n<li>Amazon Japan G.K.</li>\n<li>AmoAd Inc.</li>\n<li>AOL Platforms Japan K.K.</li>\n<li>OpenX</li>\n<li>Google Inc.</li>\n<li>CRITEO K.K.</li>\n<li>CyberAgent, Inc.</li>\n<li>Geniee, Inc.</li>\n<li>Supership Inc.</li>\n<li>GMO AD Marketing Inc.</li>\n<li>F@N Communications, Inc.</li>\n<li>Facebook Inc.</li>\n<li>Fluct, Inc.</li>\n<li>Platform One Inc.</li>\n<li>MicroAd Inc.</li>\n<li>MoPub Inc.</li>\n<li>Yahoo! Japan Corporation</li>\n<li>United, Inc.</li>\n<li>\u682a\u5f0f\u4f1a\u793eZucks</li>\n<li>PubMatic, Inc.</li>\n<li>Liftoff Mobile, Inc.</li>\n<li>Mobfox US LLC</li>\n<li>OneSignal</li>\n<li>Smaato, Inc.</li>\n<li>SMN\u682a\u5f0f\u4f1a\u793e</li>\n<li>\u682a\u5f0f\u4f1a\u793e\u30a2\u30c9\u30a4\u30f3\u30c6</li>\n</ul>\n\n          </div>"}, "last_serial": 7107585, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "a48d9b79f469f80a56c6ae9a99952bba", "sha256": "608e5628569ac1b4f0d19499f0db01855fb60dd0edf3284f15bcbf6203ed109a"}, "downloads": -1, "filename": "koneko-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a48d9b79f469f80a56c6ae9a99952bba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50194, "upload_time": "2020-04-26T23:13:48", "upload_time_iso_8601": "2020-04-26T23:13:48.653125Z", "url": "https://files.pythonhosted.org/packages/ab/7b/5592af02b7ef9393e736b68fcc21965d7e56d2be3a7794d30a0fa7ea9740/koneko-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31adbe7dccf8eb223d4553e9a3ad8ddf", "sha256": "bb883de64313ced215fa1eab9d0a79f588c619268b07a49983fb5d5e011f97a7"}, "downloads": -1, "filename": "koneko-0.4.tar.gz", "has_sig": false, "md5_digest": "31adbe7dccf8eb223d4553e9a3ad8ddf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12184713, "upload_time": "2020-04-26T23:13:59", "upload_time_iso_8601": "2020-04-26T23:13:59.432523Z", "url": "https://files.pythonhosted.org/packages/ba/f6/1f3387204913ee7305b4987cffddc9c9f0b231657fc4d4bd281bf09e2c20/koneko-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a48d9b79f469f80a56c6ae9a99952bba", "sha256": "608e5628569ac1b4f0d19499f0db01855fb60dd0edf3284f15bcbf6203ed109a"}, "downloads": -1, "filename": "koneko-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a48d9b79f469f80a56c6ae9a99952bba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50194, "upload_time": "2020-04-26T23:13:48", "upload_time_iso_8601": "2020-04-26T23:13:48.653125Z", "url": "https://files.pythonhosted.org/packages/ab/7b/5592af02b7ef9393e736b68fcc21965d7e56d2be3a7794d30a0fa7ea9740/koneko-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31adbe7dccf8eb223d4553e9a3ad8ddf", "sha256": "bb883de64313ced215fa1eab9d0a79f588c619268b07a49983fb5d5e011f97a7"}, "downloads": -1, "filename": "koneko-0.4.tar.gz", "has_sig": false, "md5_digest": "31adbe7dccf8eb223d4553e9a3ad8ddf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12184713, "upload_time": "2020-04-26T23:13:59", "upload_time_iso_8601": "2020-04-26T23:13:59.432523Z", "url": "https://files.pythonhosted.org/packages/ba/f6/1f3387204913ee7305b4987cffddc9c9f0b231657fc4d4bd281bf09e2c20/koneko-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:02 2020"}