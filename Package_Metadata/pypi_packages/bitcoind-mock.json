{"info": {"author": "Sergi Delgado Segura", "author_email": "sergi.delgado.s@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# bitcoind mock\n\n[![tippin.me](https://badgen.net/badge/%E2%9A%A1%EF%B8%8Ftippin.me/@sr_gi/F0918E)](https://tippin.me/@sr_gi)\n\nbitcoind mock is an approach to simulate bitcoind for unit testing. It is specially useful for `Continuous integration \n(CI)` tools. \n\nThe mock provides a `JSON-RPC` interface with some of the RPC commands available in `bitcoind` along with a `zmq` \ninterface for transaction and block notification. The mock also provides additional endpoints to generate blocks on \ndemand (`/generate`) and to create forks (`/fork`).\n\nThe mock can be run either by `time`, where blocks will be generated in fix time intervals, or by `events` where a block\nwill be generated each time `/generate` is called.\n\nThis are the current partially covered commands:\n\n```\ndecoderawtransaction:   querying for the decoding of a raw transaction will return a dictionary with a single\n                        field: \"txid\".\n\nsendrawtransaction:     sending a rawtransaction will notify our mining simulator to include such transaction in\n                        a subsequent block (add it to mempool).\n\ngetrawtransaction:      requesting a rawtransaction from a txid will return a dictionary containing a single\n                        field: \"confirmations\", since rawtransactions are only queried to check whether a\n                        transaction has made it to a block or not.\n\ngetblockcount:          the block count represents the length of the longest chain.\n\ngetblock:               querying for a block will return a dictionary with three fields: \"tx\" representing a\n                        list of transactions, \"height\" representing the block height and \"hash\" representing the\n                        block hash.\n\ngetblockhash:           returns the hash of a block given its height.\n\ngetbestblockhash:       returns the hash of the block in the tip of the chain.\n\nhelp:                   help is only used as a sample command to test if bitcoind is running when bootstrapping.\n                        It will return a 200/OK with no data.\n```\n\n## Known limitations\n\n- The implemented commands do not return every single field that `bitcoind` would, only the most important ones (or the \nones that I've required so for my own unit tests).\n\n- The mock works well when interacting with via `python` but not if queried directly by `bitcoin-cli` (check [#1](https://github.com/sr-gi/bitcoind_mock/issues/1)).\n\n- `zmq` only notifies about blocks being mined, but not about transactions.\n\n- Requesting a fork while running the mock by `time` will not reset the timer for the block that will be mined on top of\nthe forked one.\n\n### Dependencies\n\nRefer to [DEPENCENCIES.md](DEPENDENCIES.md).\n\n### Installation\n\nYou can get the package from PyPi:\n\n`pip install bitcoind-mock`\n\nOr install it manually (refer to [INSTALL.md](INSTALL.md)).\n\n### Contributing\n\nIf you'd like to add / extend any command, feel free to send a PR. We can make this as complete as we'd like by joining \nefforts :smile:\n\nRefer to [CONTRIBUTING.md](CONTRIBUTING.md) for the style guidelines to follow.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sr-gi/bitcoind_mock", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bitcoind-mock", "package_url": "https://pypi.org/project/bitcoind-mock/", "platform": "", "project_url": "https://pypi.org/project/bitcoind-mock/", "project_urls": {"Homepage": "https://github.com/sr-gi/bitcoind_mock"}, "release_url": "https://pypi.org/project/bitcoind-mock/0.0.4/", "requires_dist": ["zmq", "networkx", "flask", "requests", "riemann-tx (==2.1.0)"], "requires_python": ">=3.6", "summary": "A tiny and non-exhaustive mock for bitcoind", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bitcoind mock</h1>\n<p><a href=\"https://tippin.me/@sr_gi\" rel=\"nofollow\"><img alt=\"tippin.me\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37461947a3b20f46b7767a6057bf36a481fe3d15/68747470733a2f2f62616467656e2e6e65742f62616467652f25453225394125413125454625423825384674697070696e2e6d652f4073725f67692f463039313845\"></a></p>\n<p>bitcoind mock is an approach to simulate bitcoind for unit testing. It is specially useful for <code>Continuous integration (CI)</code> tools.</p>\n<p>The mock provides a <code>JSON-RPC</code> interface with some of the RPC commands available in <code>bitcoind</code> along with a <code>zmq</code>\ninterface for transaction and block notification. The mock also provides additional endpoints to generate blocks on\ndemand (<code>/generate</code>) and to create forks (<code>/fork</code>).</p>\n<p>The mock can be run either by <code>time</code>, where blocks will be generated in fix time intervals, or by <code>events</code> where a block\nwill be generated each time <code>/generate</code> is called.</p>\n<p>This are the current partially covered commands:</p>\n<pre><code>decoderawtransaction:   querying for the decoding of a raw transaction will return a dictionary with a single\n                        field: \"txid\".\n\nsendrawtransaction:     sending a rawtransaction will notify our mining simulator to include such transaction in\n                        a subsequent block (add it to mempool).\n\ngetrawtransaction:      requesting a rawtransaction from a txid will return a dictionary containing a single\n                        field: \"confirmations\", since rawtransactions are only queried to check whether a\n                        transaction has made it to a block or not.\n\ngetblockcount:          the block count represents the length of the longest chain.\n\ngetblock:               querying for a block will return a dictionary with three fields: \"tx\" representing a\n                        list of transactions, \"height\" representing the block height and \"hash\" representing the\n                        block hash.\n\ngetblockhash:           returns the hash of a block given its height.\n\ngetbestblockhash:       returns the hash of the block in the tip of the chain.\n\nhelp:                   help is only used as a sample command to test if bitcoind is running when bootstrapping.\n                        It will return a 200/OK with no data.\n</code></pre>\n<h2>Known limitations</h2>\n<ul>\n<li>\n<p>The implemented commands do not return every single field that <code>bitcoind</code> would, only the most important ones (or the\nones that I've required so for my own unit tests).</p>\n</li>\n<li>\n<p>The mock works well when interacting with via <code>python</code> but not if queried directly by <code>bitcoin-cli</code> (check <a href=\"https://github.com/sr-gi/bitcoind_mock/issues/1\" rel=\"nofollow\">#1</a>).</p>\n</li>\n<li>\n<p><code>zmq</code> only notifies about blocks being mined, but not about transactions.</p>\n</li>\n<li>\n<p>Requesting a fork while running the mock by <code>time</code> will not reset the timer for the block that will be mined on top of\nthe forked one.</p>\n</li>\n</ul>\n<h3>Dependencies</h3>\n<p>Refer to <a href=\"DEPENDENCIES.md\" rel=\"nofollow\">DEPENCENCIES.md</a>.</p>\n<h3>Installation</h3>\n<p>You can get the package from PyPi:</p>\n<p><code>pip install bitcoind-mock</code></p>\n<p>Or install it manually (refer to <a href=\"INSTALL.md\" rel=\"nofollow\">INSTALL.md</a>).</p>\n<h3>Contributing</h3>\n<p>If you'd like to add / extend any command, feel free to send a PR. We can make this as complete as we'd like by joining\nefforts :smile:</p>\n<p>Refer to <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a> for the style guidelines to follow.</p>\n\n          </div>"}, "last_serial": 6459654, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0aa00daa82bd4afd1ef12038853f45a7", "sha256": "b9e0ece62cb290d2be5246d10c6222699196a7fdbf684951c75c49d53fedcd54"}, "downloads": -1, "filename": "bitcoind_mock-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0aa00daa82bd4afd1ef12038853f45a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20997, "upload_time": "2019-12-24T18:37:49", "upload_time_iso_8601": "2019-12-24T18:37:49.208112Z", "url": "https://files.pythonhosted.org/packages/4e/28/88812e602352de7144fe9453a64da6ee14a0cc7cb6f726ada7ebe1c1d828/bitcoind_mock-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20c408f8f5821d980fc288965cf99423", "sha256": "92fff0493dbb5b948588c8bc9251663c01dd3610168df66a9c97b107460abd8d"}, "downloads": -1, "filename": "bitcoind_mock-0.0.1.tar.gz", "has_sig": false, "md5_digest": "20c408f8f5821d980fc288965cf99423", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17247, "upload_time": "2019-12-24T18:37:51", "upload_time_iso_8601": "2019-12-24T18:37:51.567300Z", "url": "https://files.pythonhosted.org/packages/4e/75/c94cbb6eb66c52829d1a427ed9f41181428a40c89f0ca80273e5b6a26ac3/bitcoind_mock-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "af6fd9abe4579c01f9cb2ab40c161dd9", "sha256": "63b21f7f563af87e4ac5e03aec284db3fc5ea974882be4b0ac5b1c7caf304f51"}, "downloads": -1, "filename": "bitcoind_mock-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "af6fd9abe4579c01f9cb2ab40c161dd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18786, "upload_time": "2020-01-15T12:27:22", "upload_time_iso_8601": "2020-01-15T12:27:22.894532Z", "url": "https://files.pythonhosted.org/packages/5c/d8/fb915a2df56caffdc13cbd8de2e9ce2d01bb85c9d00a82a9a69478634138/bitcoind_mock-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0893cf05348c2e8293d770eb4ca3af4", "sha256": "99d1817fdd8acf0789fcf71925b7cab33fee9c6d94d5713a7e4ec631ca91759d"}, "downloads": -1, "filename": "bitcoind_mock-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c0893cf05348c2e8293d770eb4ca3af4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15424, "upload_time": "2020-01-15T12:27:24", "upload_time_iso_8601": "2020-01-15T12:27:24.441138Z", "url": "https://files.pythonhosted.org/packages/4c/13/c7561df2b49d30e56709d46885ea6fe53502f5df91d71234b2932156c850/bitcoind_mock-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "3a516a02b854a871e2a587a9c46790b0", "sha256": "dfd2446eefedc2c09ec90e1fa879521bc74e7d01a0cde0f410b97abb9fe3dd32"}, "downloads": -1, "filename": "bitcoind_mock-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3a516a02b854a871e2a587a9c46790b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18867, "upload_time": "2020-01-15T14:45:27", "upload_time_iso_8601": "2020-01-15T14:45:27.942808Z", "url": "https://files.pythonhosted.org/packages/fe/01/bd9c4c50021ab060ef822ae11775ecbb6e35355be77e0171db4e33df47d7/bitcoind_mock-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c42251d1cd30c862a98a9a1263fcf68", "sha256": "74a8e19579d6947ae83f8a626993261c27cb4fe1acda404199d9c0a235a6b7c6"}, "downloads": -1, "filename": "bitcoind_mock-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1c42251d1cd30c862a98a9a1263fcf68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15503, "upload_time": "2020-01-15T14:45:29", "upload_time_iso_8601": "2020-01-15T14:45:29.685371Z", "url": "https://files.pythonhosted.org/packages/d0/bf/2516ce10bb0049c3ed772ae52180014a7710b6901e07c01b348a2ae13388/bitcoind_mock-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "5ca8574767c6bf0d43dba6f7b848bd84", "sha256": "1c5a8d91e2678f07abf77e33edc397b8d72a21b89914561be02ec07503f5ebb8"}, "downloads": -1, "filename": "bitcoind_mock-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "5ca8574767c6bf0d43dba6f7b848bd84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18909, "upload_time": "2020-01-15T15:19:24", "upload_time_iso_8601": "2020-01-15T15:19:24.138214Z", "url": "https://files.pythonhosted.org/packages/00/98/6b11673a232b6f225cc7e6db046e1e475513ab35f7d3351c85fb63eba92f/bitcoind_mock-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdc60216918f9df8bc283cc6d7014369", "sha256": "4bd741fa16cd2a84a2e3cd8822e5be8b45fef6cc3185622a6f42ab3527e5813e"}, "downloads": -1, "filename": "bitcoind_mock-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cdc60216918f9df8bc283cc6d7014369", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15597, "upload_time": "2020-01-15T15:19:25", "upload_time_iso_8601": "2020-01-15T15:19:25.769771Z", "url": "https://files.pythonhosted.org/packages/74/5e/f9d1cfe7abd52487ed3efab753900ea2d788e3979aa5f5b9630d00ee44d9/bitcoind_mock-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5ca8574767c6bf0d43dba6f7b848bd84", "sha256": "1c5a8d91e2678f07abf77e33edc397b8d72a21b89914561be02ec07503f5ebb8"}, "downloads": -1, "filename": "bitcoind_mock-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "5ca8574767c6bf0d43dba6f7b848bd84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18909, "upload_time": "2020-01-15T15:19:24", "upload_time_iso_8601": "2020-01-15T15:19:24.138214Z", "url": "https://files.pythonhosted.org/packages/00/98/6b11673a232b6f225cc7e6db046e1e475513ab35f7d3351c85fb63eba92f/bitcoind_mock-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdc60216918f9df8bc283cc6d7014369", "sha256": "4bd741fa16cd2a84a2e3cd8822e5be8b45fef6cc3185622a6f42ab3527e5813e"}, "downloads": -1, "filename": "bitcoind_mock-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cdc60216918f9df8bc283cc6d7014369", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15597, "upload_time": "2020-01-15T15:19:25", "upload_time_iso_8601": "2020-01-15T15:19:25.769771Z", "url": "https://files.pythonhosted.org/packages/74/5e/f9d1cfe7abd52487ed3efab753900ea2d788e3979aa5f5b9630d00ee44d9/bitcoind_mock-0.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:18 2020"}