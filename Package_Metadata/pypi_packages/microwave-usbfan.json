{"info": {"author": "Fergus Symon", "author_email": "45412+fergofrog@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Communications", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Micro Wave USB Fan\nThis library is a pure Python reimplementation of the Jaycar RGB USB LED fan\n([GH1031](https://www.jaycar.com.au/programmable-usb-fan/p/GH1031)) protocol.\nCommunication occurs using USB HID reports as a transport. This library uses\n[hidapi](https://pypi.org/project/hidapi/) to do this across Linux, macOS,\nFreeBSD and Windows.\n\n## Installation\n```sh\npip install microwave-usbfan\n```\n\n## Example Implementation\n### Two Text Messages\n```python\nfrom usbfan import Device, Program, TextMessage\n\n# A program is made up of a list of Messages\n# A \"TextMessage\" is a subclass of the generic Message class \np = Program((TextMessage(\"Hello, World!\"),\n             TextMessage(\"How is everyone going?\"),))\n             \n# Open the device and program\nd = Device()\nd.program(p)\n```\n\n### Single Red Dot\n```python\nfrom usbfan import Colour, Column, Device, Message, Program\n\n# A generic \"Message\" is made up of 1 to 144 \"Column\" object\n# A \"Column\" has 11 boolean pixels and a \"Colour\"\ncolumns = [Column([True] + [False] * 10, Colour.red)]\nfor _ in range(7):\n    columns.append(Column([False] * 11, Colour.red))\np = Program((Message(columns),))\n\n# Open the device and program\nd = Device()\nd.program(p)\n```\n\n### Rainbow Message\n```python\nfrom usbfan import Colour, Column, Device, Message, Program, TextMessage\n\n# We can cycle the rainbow here and fill all 144 columns\nrainbow_colours = [Colour.red, Colour.yellow, Colour.green,\n                   Colour.cyan, Colour.blue, Colour.magenta]\nrainbow = [Column([True] * 11,\n                  rainbow_colours[i % len(rainbow_colours)])\n           for i in range(Message.MAX_COLUMNS)]\np = Program((\n    TextMessage(\"Here comes the rainbow!\"),\n    Message(rainbow),\n))\n\n# Open the device and program\nd = Device()\nd.program(p)\n```\n\n###  Mode Controls\nFor each message, you can define how it opens, what it does once displayed, and\nwhat it does when closing.\n\n```python\nfrom usbfan import Colour, Column, Device, Message, Program, TextMessage, \\\n    MessageStyle, OpenTransition, CloseTransition\n\n# We can cycle the rainbow here and fill all 144 columns\nrainbow_colours = [Colour.red, Colour.yellow, Colour.green,\n                   Colour.cyan, Colour.blue, Colour.magenta]\nrainbow = [Column([True] * 11,\n                  rainbow_colours[i % len(rainbow_colours)])\n           for i in range(Message.MAX_COLUMNS)]\np = Program((\n    TextMessage(\"Here comes the rainbow!\",\n                message_style=MessageStyle.Flash,\n                open_transition=OpenTransition.DownUp,\n                close_transition=CloseTransition.DownUp),\n    Message(rainbow,\n            message_style=MessageStyle.Clockwise,\n            open_transition=OpenTransition.FromMiddle,\n            close_transition=CloseTransition.ToMiddle),\n))\n\n# Open the device and program\nd = Device()\nd.program(p)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fergofrog/microwave_usb_fan", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "microwave-usbfan", "package_url": "https://pypi.org/project/microwave-usbfan/", "platform": "", "project_url": "https://pypi.org/project/microwave-usbfan/", "project_urls": {"Homepage": "https://github.com/fergofrog/microwave_usb_fan"}, "release_url": "https://pypi.org/project/microwave-usbfan/1.1/", "requires_dist": null, "requires_python": "", "summary": "Implementation of the Jaycar RGB USB LED fan (GH1031) protocol", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Micro Wave USB Fan</h1>\n<p>This library is a pure Python reimplementation of the Jaycar RGB USB LED fan\n(<a href=\"https://www.jaycar.com.au/programmable-usb-fan/p/GH1031\" rel=\"nofollow\">GH1031</a>) protocol.\nCommunication occurs using USB HID reports as a transport. This library uses\n<a href=\"https://pypi.org/project/hidapi/\" rel=\"nofollow\">hidapi</a> to do this across Linux, macOS,\nFreeBSD and Windows.</p>\n<h2>Installation</h2>\n<pre>pip install microwave-usbfan\n</pre>\n<h2>Example Implementation</h2>\n<h3>Two Text Messages</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">usbfan</span> <span class=\"kn\">import</span> <span class=\"n\">Device</span><span class=\"p\">,</span> <span class=\"n\">Program</span><span class=\"p\">,</span> <span class=\"n\">TextMessage</span>\n\n<span class=\"c1\"># A program is made up of a list of Messages</span>\n<span class=\"c1\"># A \"TextMessage\" is a subclass of the generic Message class </span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Program</span><span class=\"p\">((</span><span class=\"n\">TextMessage</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, World!\"</span><span class=\"p\">),</span>\n             <span class=\"n\">TextMessage</span><span class=\"p\">(</span><span class=\"s2\">\"How is everyone going?\"</span><span class=\"p\">),))</span>\n             \n<span class=\"c1\"># Open the device and program</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Device</span><span class=\"p\">()</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">program</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n<h3>Single Red Dot</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">usbfan</span> <span class=\"kn\">import</span> <span class=\"n\">Colour</span><span class=\"p\">,</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">Device</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">Program</span>\n\n<span class=\"c1\"># A generic \"Message\" is made up of 1 to 144 \"Column\" object</span>\n<span class=\"c1\"># A \"Column\" has 11 boolean pixels and a \"Colour\"</span>\n<span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Column</span><span class=\"p\">([</span><span class=\"kc\">True</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)]</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">):</span>\n    <span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Column</span><span class=\"p\">([</span><span class=\"kc\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">))</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Program</span><span class=\"p\">((</span><span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"p\">),))</span>\n\n<span class=\"c1\"># Open the device and program</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Device</span><span class=\"p\">()</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">program</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n<h3>Rainbow Message</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">usbfan</span> <span class=\"kn\">import</span> <span class=\"n\">Colour</span><span class=\"p\">,</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">Device</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">Program</span><span class=\"p\">,</span> <span class=\"n\">TextMessage</span>\n\n<span class=\"c1\"># We can cycle the rainbow here and fill all 144 columns</span>\n<span class=\"n\">rainbow_colours</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">,</span>\n                   <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">cyan</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">magenta</span><span class=\"p\">]</span>\n<span class=\"n\">rainbow</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Column</span><span class=\"p\">([</span><span class=\"kc\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n                  <span class=\"n\">rainbow_colours</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rainbow_colours</span><span class=\"p\">)])</span>\n           <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">MAX_COLUMNS</span><span class=\"p\">)]</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Program</span><span class=\"p\">((</span>\n    <span class=\"n\">TextMessage</span><span class=\"p\">(</span><span class=\"s2\">\"Here comes the rainbow!\"</span><span class=\"p\">),</span>\n    <span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"n\">rainbow</span><span class=\"p\">),</span>\n<span class=\"p\">))</span>\n\n<span class=\"c1\"># Open the device and program</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Device</span><span class=\"p\">()</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">program</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n<h3>Mode Controls</h3>\n<p>For each message, you can define how it opens, what it does once displayed, and\nwhat it does when closing.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">usbfan</span> <span class=\"kn\">import</span> <span class=\"n\">Colour</span><span class=\"p\">,</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">Device</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">Program</span><span class=\"p\">,</span> <span class=\"n\">TextMessage</span><span class=\"p\">,</span> \\\n    <span class=\"n\">MessageStyle</span><span class=\"p\">,</span> <span class=\"n\">OpenTransition</span><span class=\"p\">,</span> <span class=\"n\">CloseTransition</span>\n\n<span class=\"c1\"># We can cycle the rainbow here and fill all 144 columns</span>\n<span class=\"n\">rainbow_colours</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">,</span>\n                   <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">cyan</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"p\">,</span> <span class=\"n\">Colour</span><span class=\"o\">.</span><span class=\"n\">magenta</span><span class=\"p\">]</span>\n<span class=\"n\">rainbow</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Column</span><span class=\"p\">([</span><span class=\"kc\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n                  <span class=\"n\">rainbow_colours</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rainbow_colours</span><span class=\"p\">)])</span>\n           <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">MAX_COLUMNS</span><span class=\"p\">)]</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Program</span><span class=\"p\">((</span>\n    <span class=\"n\">TextMessage</span><span class=\"p\">(</span><span class=\"s2\">\"Here comes the rainbow!\"</span><span class=\"p\">,</span>\n                <span class=\"n\">message_style</span><span class=\"o\">=</span><span class=\"n\">MessageStyle</span><span class=\"o\">.</span><span class=\"n\">Flash</span><span class=\"p\">,</span>\n                <span class=\"n\">open_transition</span><span class=\"o\">=</span><span class=\"n\">OpenTransition</span><span class=\"o\">.</span><span class=\"n\">DownUp</span><span class=\"p\">,</span>\n                <span class=\"n\">close_transition</span><span class=\"o\">=</span><span class=\"n\">CloseTransition</span><span class=\"o\">.</span><span class=\"n\">DownUp</span><span class=\"p\">),</span>\n    <span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"n\">rainbow</span><span class=\"p\">,</span>\n            <span class=\"n\">message_style</span><span class=\"o\">=</span><span class=\"n\">MessageStyle</span><span class=\"o\">.</span><span class=\"n\">Clockwise</span><span class=\"p\">,</span>\n            <span class=\"n\">open_transition</span><span class=\"o\">=</span><span class=\"n\">OpenTransition</span><span class=\"o\">.</span><span class=\"n\">FromMiddle</span><span class=\"p\">,</span>\n            <span class=\"n\">close_transition</span><span class=\"o\">=</span><span class=\"n\">CloseTransition</span><span class=\"o\">.</span><span class=\"n\">ToMiddle</span><span class=\"p\">),</span>\n<span class=\"p\">))</span>\n\n<span class=\"c1\"># Open the device and program</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Device</span><span class=\"p\">()</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">program</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5405290, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "1afb8a4648fe4a2e357a38ea5eeeb86e", "sha256": "e431359d856f962fa00b23f225613994ee11b476c9798de3552730e1a8945476"}, "downloads": -1, "filename": "microwave-usbfan-1.0.tar.gz", "has_sig": false, "md5_digest": "1afb8a4648fe4a2e357a38ea5eeeb86e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155025, "upload_time": "2018-10-19T05:44:56", "upload_time_iso_8601": "2018-10-19T05:44:56.249776Z", "url": "https://files.pythonhosted.org/packages/44/ed/de2eac60d18c365ed5501ceadc7be1dc09b086a404213accf93dc61b5d47/microwave-usbfan-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0408731f5943e2c78d98928edb7d41c8", "sha256": "04ade1f5d25c20028f8211e0f9245e20b89690eb5836fe7f45ada5d36d356e98"}, "downloads": -1, "filename": "microwave-usbfan-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0408731f5943e2c78d98928edb7d41c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155149, "upload_time": "2019-06-14T10:11:32", "upload_time_iso_8601": "2019-06-14T10:11:32.587010Z", "url": "https://files.pythonhosted.org/packages/02/cc/4521e236ec6a75925ac2eb75d4da6c2b2afb6fc9797707f129632d2566fe/microwave-usbfan-1.0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "f76772fff158a4cbeb117666494029be", "sha256": "e24e3d8af10b533d5b7ffc791748f6c253236c27e971d8132678de9d1d669236"}, "downloads": -1, "filename": "microwave-usbfan-1.1.tar.gz", "has_sig": false, "md5_digest": "f76772fff158a4cbeb117666494029be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155877, "upload_time": "2019-06-16T00:37:45", "upload_time_iso_8601": "2019-06-16T00:37:45.697083Z", "url": "https://files.pythonhosted.org/packages/2a/62/d79f8844f086a5970ebe58cbb877481608989ad4e3cb5c393bf5063198d9/microwave-usbfan-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f76772fff158a4cbeb117666494029be", "sha256": "e24e3d8af10b533d5b7ffc791748f6c253236c27e971d8132678de9d1d669236"}, "downloads": -1, "filename": "microwave-usbfan-1.1.tar.gz", "has_sig": false, "md5_digest": "f76772fff158a4cbeb117666494029be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155877, "upload_time": "2019-06-16T00:37:45", "upload_time_iso_8601": "2019-06-16T00:37:45.697083Z", "url": "https://files.pythonhosted.org/packages/2a/62/d79f8844f086a5970ebe58cbb877481608989ad4e3cb5c393bf5063198d9/microwave-usbfan-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:53 2020"}