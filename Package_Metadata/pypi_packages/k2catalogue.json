{"info": {"author": "Simon Walker", "author_email": "s.r.walker101@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering :: Astronomy"], "description": "# k2catalogue\n        [![Build Status](https://travis-ci.org/mindriot101/k2catalogue.svg)](https://travis-ci.org/mindriot101/k2catalogue)[![Code Health](https://landscape.io/github/mindriot101/k2catalogue/master/landscape.svg)](https://landscape.io/github/mindriot101/k2catalogue/master)[![Documentation Status](https://readthedocs.org/projects/k2catalogue/badge/?version=latest)](https://readthedocs.org/projects/k2catalogue/?badge=latest)\n        \n        \n        Simple interactive query api for the K2 proposals list, based on the IPython console.\n        \n        ## Features\n        \n        * Open a simbad search around the EPIC object\n        * Get the proposals for an EPIC object\n        * Get the objects contained in a single proposal\n        * Get the objects observed during a campaign\n        * Visit the proposals page for a campaign\n        * View the proposal title and PI\n        * View the proposal pdf for a proposal\n        * Get the EPIC object magnitude, ra and dec if available\n        \n        ## Installation\n        \n        `pip install git+https://github.com/mindriot101/k2catalogue`\n        \n        ### Requirements:\n        \n        *all from pip*\n        \n        * requests\n        * sqlalchemy\n        * ipython\n        * vcrpy\n        * beautifulsoup4\n        \n        The first run may fail with \"table missing\" type errors. In this case the initial database must be created, with the `-s` flag: `k2cat-search -s`. This will create `database.sqlite` in the current directory. Subsequent runs do not need the `-s` flag unless you want to rebuild the database.\n        \n        ## Examples\n        \n        Fire up the interpreter with `k2cat-search` and try these:\n        \n        ```python\n        #\u00a0Get an object by epic id (using WASP-85 b as an example)\n        e = get_by_epicid(201862715)\n        print(e) #\u00a0=> <EPIC: 201862715>\n        \n        #\u00a0Open the simbad page for a radius of 5 arcmin around the target\n        e.simbad_query(radius=5.0)\n        #\u00a0... default browser opens, showing the SIMBAD details\n        \n        #\u00a0Show the proposals containing that object\n        print(e.proposals)\n        #\u00a0=> [<Proposal GO1041_SC: Hellier - \"Kepler K2 observatio...\">, <Proposal GO1032_SC: Van Grootel - \"K2 Observations of S...\">, <Proposal GO1054_LC: Sanchis-Ojeda - \"Using K2 to understa...\">, <Proposal GO1059_LC: Stello - \"Galactic Archaeology...\">, <Proposal GO1005_LC: Wang - \"Searching For Hot Ju...\">]\n        \n        # Let's look at proposal GO1041_SC\n        p = e.proposals[0] #\u00a0This may have a different index for you\n        print(p) #\u00a0=> <Proposal GO1041_SC: Hellier - \"Kepler K2 observatio...\">\n        \n        #\u00a0Where is the proposal pdf?\n        print(p.pdf_url) # => http://keplerscience.arc.nasa.gov/K2/docs/Campaigns/C1/GO1041_Hellier.pdf\n        \n        #\u00a0Let's open that pdf in a web browser\n        p.open_proposal()\n        #\u00a0... default browser opens, showing the proposal pdf\n        \n        #\u00a0Where are the proposal pdfs kept?\n        p.open_proposals_page()\n        #\u00a0... default browser opens, showing the list of proposals\n        \n        # Let's look at the proposal details\n        print('Proposal PI: {pi} and title: {title}'.format(\n              pi=p.pi, title=p.title))\n        # => Proposal PI: Hellier and title: Kepler K2 observations of the hot Jupiter WASP-85b\n        \n        # What other objects are in the same proposal?\n        print(p.objects)\n        #\u00a0=> [<EPIC: 201862715>] Ah just the one then.\n        \n        #\u00a0Which campaign is the proposal (or object) in?\n        print('Object campaign: {}, proposal campaign: {}'.format(e.campaign, p.campaign))\n        # => Object campaign: <Campaign: 1>, proposal campaign: <Campaign: 1>\n        \n        #\u00a0What about the object magnitude and coordinates?\n        print('WASP-85 b is located here: {ra} {dec} and is magnitude {mag}'.format(\n              ra=e.ra, dec=e.dec, mag=e.mag))\n        #\u00a0=> WASP-85 b is located here: 175.90838 6.563726 and is magnitude 10.247\n        ```\n        \n        ## Advanced usage\n        \n        The package uses SQLAlchemy for all of the database interactions, and the `session` object along with the database models `Campaign`, `EPIC` and `Proposal` are available to the user for more advanced queries.\n        For example the first example above (`get_by_epicid`) can be performed with the SQLAlchemy api:\n        \n        ```python\n        epicid = 201862715\n        e = session.query(EPIC).filter(EPIC.epic_id == epicid).first()\n        ```", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mindriot101/k2catalogue", "keywords": "astronomy kepler metadata", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "k2catalogue", "package_url": "https://pypi.org/project/k2catalogue/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/k2catalogue/", "project_urls": {"Homepage": "https://github.com/mindriot101/k2catalogue"}, "release_url": "https://pypi.org/project/k2catalogue/0.5.0/", "requires_dist": null, "requires_python": null, "summary": "K2 Catalogue Queryier", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # k2catalogue<br>        [![Build Status](https://travis-ci.org/mindriot101/k2catalogue.svg)](https://travis-ci.org/mindriot101/k2catalogue)[![Code Health](https://landscape.io/github/mindriot101/k2catalogue/master/landscape.svg)](https://landscape.io/github/mindriot101/k2catalogue/master)[![Documentation Status](https://readthedocs.org/projects/k2catalogue/badge/?version=latest)](https://readthedocs.org/projects/k2catalogue/?badge=latest)<br>        <br>        <br>        Simple interactive query api for the K2 proposals list, based on the IPython console.<br>        <br>        ## Features<br>        <br>        * Open a simbad search around the EPIC object<br>        * Get the proposals for an EPIC object<br>        * Get the objects contained in a single proposal<br>        * Get the objects observed during a campaign<br>        * Visit the proposals page for a campaign<br>        * View the proposal title and PI<br>        * View the proposal pdf for a proposal<br>        * Get the EPIC object magnitude, ra and dec if available<br>        <br>        ## Installation<br>        <br>        `pip install git+https://github.com/mindriot101/k2catalogue`<br>        <br>        ### Requirements:<br>        <br>        *all from pip*<br>        <br>        * requests<br>        * sqlalchemy<br>        * ipython<br>        * vcrpy<br>        * beautifulsoup4<br>        <br>        The first run may fail with \"table missing\" type errors. In this case the initial database must be created, with the `-s` flag: `k2cat-search -s`. This will create `database.sqlite` in the current directory. Subsequent runs do not need the `-s` flag unless you want to rebuild the database.<br>        <br>        ## Examples<br>        <br>        Fire up the interpreter with `k2cat-search` and try these:<br>        <br>        ```python<br>        #\u00a0Get an object by epic id (using WASP-85 b as an example)<br>        e = get_by_epicid(201862715)<br>        print(e) #\u00a0=&gt; &lt;EPIC: 201862715&gt;<br>        <br>        #\u00a0Open the simbad page for a radius of 5 arcmin around the target<br>        e.simbad_query(radius=5.0)<br>        #\u00a0... default browser opens, showing the SIMBAD details<br>        <br>        #\u00a0Show the proposals containing that object<br>        print(e.proposals)<br>        #\u00a0=&gt; [&lt;Proposal GO1041_SC: Hellier - \"Kepler K2 observatio...\"&gt;, &lt;Proposal GO1032_SC: Van Grootel - \"K2 Observations of S...\"&gt;, &lt;Proposal GO1054_LC: Sanchis-Ojeda - \"Using K2 to understa...\"&gt;, &lt;Proposal GO1059_LC: Stello - \"Galactic Archaeology...\"&gt;, &lt;Proposal GO1005_LC: Wang - \"Searching For Hot Ju...\"&gt;]<br>        <br>        # Let's look at proposal GO1041_SC<br>        p = e.proposals[0] #\u00a0This may have a different index for you<br>        print(p) #\u00a0=&gt; &lt;Proposal GO1041_SC: Hellier - \"Kepler K2 observatio...\"&gt;<br>        <br>        #\u00a0Where is the proposal pdf?<br>        print(p.pdf_url) # =&gt; http://keplerscience.arc.nasa.gov/K2/docs/Campaigns/C1/GO1041_Hellier.pdf<br>        <br>        #\u00a0Let's open that pdf in a web browser<br>        p.open_proposal()<br>        #\u00a0... default browser opens, showing the proposal pdf<br>        <br>        #\u00a0Where are the proposal pdfs kept?<br>        p.open_proposals_page()<br>        #\u00a0... default browser opens, showing the list of proposals<br>        <br>        # Let's look at the proposal details<br>        print('Proposal PI: {pi} and title: {title}'.format(<br>              pi=p.pi, title=p.title))<br>        # =&gt; Proposal PI: Hellier and title: Kepler K2 observations of the hot Jupiter WASP-85b<br>        <br>        # What other objects are in the same proposal?<br>        print(p.objects)<br>        #\u00a0=&gt; [&lt;EPIC: 201862715&gt;] Ah just the one then.<br>        <br>        #\u00a0Which campaign is the proposal (or object) in?<br>        print('Object campaign: {}, proposal campaign: {}'.format(e.campaign, p.campaign))<br>        # =&gt; Object campaign: &lt;Campaign: 1&gt;, proposal campaign: &lt;Campaign: 1&gt;<br>        <br>        #\u00a0What about the object magnitude and coordinates?<br>        print('WASP-85 b is located here: {ra} {dec} and is magnitude {mag}'.format(<br>              ra=e.ra, dec=e.dec, mag=e.mag))<br>        #\u00a0=&gt; WASP-85 b is located here: 175.90838 6.563726 and is magnitude 10.247<br>        ```<br>        <br>        ## Advanced usage<br>        <br>        The package uses SQLAlchemy for all of the database interactions, and the `session` object along with the database models `Campaign`, `EPIC` and `Proposal` are available to the user for more advanced queries.<br>        For example the first example above (`get_by_epicid`) can be performed with the SQLAlchemy api:<br>        <br>        ```python<br>        epicid = 201862715<br>        e = session.query(EPIC).filter(EPIC.epic_id == epicid).first()<br>        ```\n          </div>"}, "last_serial": 1407781, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "08091d52344a381e46d331039d631564", "sha256": "eb59b324358e42b8712bac3f1cc899865c967b424acf268e7aaffda434238882"}, "downloads": -1, "filename": "k2catalogue-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "08091d52344a381e46d331039d631564", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10808, "upload_time": "2015-02-03T13:48:51", "upload_time_iso_8601": "2015-02-03T13:48:51.163895Z", "url": "https://files.pythonhosted.org/packages/00/0f/b92f327613efb95912b059455a8a997214813d6aba289f245d080d183844/k2catalogue-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03d7c43f137873778f29e4e81184b799", "sha256": "bd1938aadae176932a18206d4467253726ec9c299dc3e0570836b33d1755ac73"}, "downloads": -1, "filename": "k2catalogue-0.5.0.tar.gz", "has_sig": false, "md5_digest": "03d7c43f137873778f29e4e81184b799", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6937, "upload_time": "2015-02-03T13:48:54", "upload_time_iso_8601": "2015-02-03T13:48:54.251263Z", "url": "https://files.pythonhosted.org/packages/0a/25/4425899dc184df2df2d4a4ad1b8378010a144b90d70de57dac7545ec5c04/k2catalogue-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "08091d52344a381e46d331039d631564", "sha256": "eb59b324358e42b8712bac3f1cc899865c967b424acf268e7aaffda434238882"}, "downloads": -1, "filename": "k2catalogue-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "08091d52344a381e46d331039d631564", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10808, "upload_time": "2015-02-03T13:48:51", "upload_time_iso_8601": "2015-02-03T13:48:51.163895Z", "url": "https://files.pythonhosted.org/packages/00/0f/b92f327613efb95912b059455a8a997214813d6aba289f245d080d183844/k2catalogue-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03d7c43f137873778f29e4e81184b799", "sha256": "bd1938aadae176932a18206d4467253726ec9c299dc3e0570836b33d1755ac73"}, "downloads": -1, "filename": "k2catalogue-0.5.0.tar.gz", "has_sig": false, "md5_digest": "03d7c43f137873778f29e4e81184b799", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6937, "upload_time": "2015-02-03T13:48:54", "upload_time_iso_8601": "2015-02-03T13:48:54.251263Z", "url": "https://files.pythonhosted.org/packages/0a/25/4425899dc184df2df2d4a4ad1b8378010a144b90d70de57dac7545ec5c04/k2catalogue-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:56 2020"}