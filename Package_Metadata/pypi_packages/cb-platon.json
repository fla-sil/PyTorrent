{"info": {"author": "Oliver Schwengers", "author_email": "oliver.schwengers@computational.bio.uni-giessen.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-brightgreen.svg)](https://github.com/oschwengers/platon/blob/master/LICENSE)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/cb-platon.svg)\n![GitHub release](https://img.shields.io/github/release/oschwengers/platon.svg)\n![PyPI](https://img.shields.io/pypi/v/cb-platon.svg)\n![PyPI - Status](https://img.shields.io/pypi/status/cb-platon.svg)\n![Conda](https://img.shields.io/conda/v/bioconda/platon.svg)\n![Conda](https://img.shields.io/conda/pn/bioconda/platon.svg)\n\n# Platon: identification and characterization of bacterial plasmid contigs from short-read draft assemblies.\n\n## Contents\n- [Description](#description)\n- [Input/Output](#inputoutput)\n- [Installation](#installation)\n  - [BioConda](#bioconda)\n  - [GitHub/Pip](#githubpip)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Mode](#mode)\n- [Database](#database)\n- [Dependencies](#dependencies)\n- [Citation](#citation)\n- [Issues](#issues)\n\n## Description\n**TL;DR**\nPlaton detects plasmid contigs within bacterial draft genomes from WGS short-read assemblies.\nTherefore, Platon analyzes the natural distribution biases of certain protein coding genes between\nchromosomes and plasmids. This analysis is complemented by comprehensive contig characterizations\nupon which several heuristics are applied.\n\nPlaton conducts three analysis steps:\n1. It predicts and searches coding sequences against a custom and pre-computed\ndatabase comprising marker protein sequences (**MPS**) and related replicon\ndistribution scores (**RDS**). These scores express the empirically measured\nfrequency biases of protein sequence distributions between plasmids and chromosomes\npre-computed on complete NCBI RefSeq replicons. Platon calculates the mean RDS for\neach contig and either classifies them as chromosome if the RDS is below a\nsensitivity cutoff determined to 95% sensitivity or as plasmid if the RDS is\nabove a specificity cutoff determined to 99.9% specificity.\nExact values for these thresholds have been computed based on Monte Carlo simulations of\nartifical replicon fragments created from complete RefSeq chromosome and plasmid sequences.\n2. Contigs passing the sensitivity filter get comprehensivley characterized.\nHereby, Platon tries to circularize the contig sequences, searches for rRNA,\nreplication, mobilization and conjugation genes, oriT sequences, incompatibility group\nDNA probes and finally performs a BLAST+ search against the NCBI plasmid database.\n3. Finally, to increase the overall sensitivity, Platon classifies all remaining contigs based on the gathered information\nby several heuristics.\n\n| ![Replicon distribution and alignment hit frequencies of MPS](rds-ratio-counts.web.png?raw=true) |\n| -- |\n| *Fig: Replicon distribution and alignment hit frequencies of MPS. Shown are summed plasmid and chromosome alignment hit frequencies per MPS plotted against plasmid/chromosome hit count ratios scaled to [-1 (chromosome), 1 (plasmid)]; Hue: normalized RDS values (min=-100, max=100), hit count outliers below 10-4 and above 1 are discarded for the sake of readability.* |\n\n## Input/Output\n\n### Input\nPlaton accepts draft assemblies in fasta format. If contigs have been assembled with\nSPAdes, Platon is able to extract the coverage information from the contig names.\n\n### Output\nFor each contig classified as plasmid sequence the following columns are printed\nto `STDOUT` as tab separated values:\n-   Contig ID\n-   Length\n-   Coverage\n-   \\# ORFs\n-   RDS\n-   Circularity\n-   Incompatibility Type(s)\n-   \\# Replication Genes\n-   \\# Mobilization Genes\n-   \\# OriT Sequences\n-   \\# Conjugation Genes\n-   \\# rRNA Genes\n-   \\# Plasmid Database Hits\n\nIn addition, Platon writes the following files into the output directory:\n-   `<prefix>`.plasmid.fasta: contigs classified as plasmids or plasmodal origin\n-   `<prefix>`.chromosome.fasta: contigs classified as chromosomal origin\n-   `<prefix>`.tsv: dense information as printed to STDOUT (see above)\n-   `<prefix>`.json: comprehensive results and information on each single plasmid contig.\nAll files are prefixed (`<prefix>`) as the input genome fasta file.\n\n## Installation\nPlaton can be installed in 2 different ways, though we advise to use Conda/BioConda.\n\nIn all cases, the custom database must be downloaded which we provide for download:\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3349651.svg)](https://doi.org/10.5281/zenodo.3349651)\n\n### BioConda\n1.  install Platon via [Conda](https://conda.io/docs/install/quick.html) and the [Bioconda](https://bioconda.github.io/) channel\n2.  download & extract the database\n\nExample:\n```\n$ conda install -c conda-forge -c bioconda -c defaults platon\n$ wget https://zenodo.org/record/3751774/files/db.tar.gz\n$ tar -xzf db.tar.gz\n$ rm db.tar.gz\n$ platon --db ./db genome.fasta\n```\n\n### GitHub/Pip\n1.  clone the the repository\n2.  install Platon & Python dependencies per pip\n3.  download & extract the database\n\nExample:\n```\n$ git clone git@github.com:oschwengers/platon.git\n$ cd platon\n$ python3 -m pip install .\n$ cd ..\n$ wget https://zenodo.org/record/3751774/files/db.tar.gz\n$ tar -xzf db.tar.gz\n$ rm db.tar.gz\n$ platon/bin/platon --db ./db genome.fasta\n```\n\nInfo: Just move the extracted database directory into the platon directory.\nPlaton will automatically recognise it and thus, the database path doesn't need\nto be specified:\n```\n$ ...\n$ mv db/ platon\n$ platon/bin/platon genome.fasta\n```\n\n## Usage\nUsage:\n```\nusage: platon [-h] [--db DB] [--threads THREADS] [--verbose] [--characterize]\n              [--output OUTPUT] [--version]\n              <genome>\n\nIdentification and characterization of bacterial plasmid contigs from short-read draft assemblies.\n\npositional arguments:\n  <genome>              draft genome in fasta format\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --db DB, -d DB        database path (default = <platon_path>/db)\n  --mode {sensitivity,accuracy,specificity}, -m {sensitivity,accuracy,specificity}\n                        applied filter mode: sensitivity: RDS only (>= 95%\n                        sensitivity); specificity: RDS only (>=99.9%\n                        specificity); accuracy: RDS & characterization\n                        heuristics (highest accuracy)\n  --threads THREADS, -t THREADS\n                        number of threads to use (default = number of\n                        available CPUs)\n  --verbose, -v         print verbose information\n  --characterize, -c    deactivate filters; characterize all contigs\n  --output OUTPUT, -o OUTPUT\n                        output directory (default = current working directory)\n  --version, -V         show program's version number and exit\n```\n\n## Examples\nSimple:\n```\n$ platon genome.fasta\n```\n\nExpert: writing results to `results` directory with verbose output using 8 threads:\n```\n$ platon -db ~/db --output results/ --verbose --threads 8 genome.fasta\n```\n\n## Mode\nPlaton provides 3 different modi controlling which filters will be used.\n`Accuracy` mode is the preset default.\n\n### Sensitivity\nIn the `sensitivity` mode Platon will classifiy all contigs with an `RDS` value *below*\nthe sensitivity threshold as chromosomal and all remaining contigs as plasmid.\nThis threshold was defined to account for 95% sensitivity and computed via Monte Carlo\nsimulations of artifical contigs resulting in an RDS=-7.7.\n-> use this mode to *exclude chromosomal* contigs.\n\n### Specificity\nIn the `specificity` mode Platon will classifiy all contigs with an `RDS` value *above*\nthe specificity threshold as plasmid and all remaining contigs as chromosomal.\nThis threshold was defined to account for 99.9% specificity and computed via Monte Carlo\nsimulations of artifical contigs resulting in an RDS=0.4.\n\n### Accuracy (default)\nIn the `accuracy` mode Platon will classifiy all contigs with:\n  - an `RDS` value *below* the sensitivity threshold as chromosomal\n  - an `RDS` value *above* the specificity threshold as plasmid\nand in addition all contigs as plasmid for which one of the following is true: it\n  - can be circularized\n  - has an incompatibility group sequence\n  - has a replication or mobilization HMM hit\n  - has an oriT hit\n  - has an RDS above the conservative score (0.1), a RefSeq plasmid hit and *no* rRNA hit\n\n\n## Database\nPlaton depends on a custom database based on MPS, RDS, RefSeq Plasmid database,\nPlasmidFinder db as well as manually curated MOB HMM models from MOBscan,\ncustom conjugation and replication HMM models and oriT sequences from MOB-suite.\nThis database based on UniProt UniRef90 release 2020_01 can be downloaded here:\n(zipped 1.4 Gb, unzipped 2.4 Gb)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3349651.svg)](https://doi.org/10.5281/zenodo.3349651)\n-   [https://zenodo.org/record/3751774/files/db.tar.gz](https://zenodo.org/record/3751774/files/db.tar.gz)\n\n## Dependencies\nPlaton was developed and tested in Python 3.5 and depends on BioPython (>=1.71).\n\nAdditionally, it depends on the following 3rd party executables:\n-   Prodigal (2.6.3) <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2848648> <https://github.com/hyattpd/Prodigal>\n-   Diamond (0.9.32) <https://pubmed.ncbi.nlm.nih.gov/25402007> <http://www.diamondsearch.org>\n-   Blast+ (2.7.1) <https://www.ncbi.nlm.nih.gov/pubmed/2231712> <https://blast.ncbi.nlm.nih.gov>\n-   MUMmer (4.0.0-beta2) <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC395750/> <https://github.com/gmarcais/mummer>\n-   HMMER (3.2.1) <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3695513/> <http://hmmer.org/>\n-   INFERNAL (1.1.2) <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3810854> <http://eddylab.org/infernal>\n\n## Citation\nA manuscript is submitted.\nTo temporarily cite our work, please transitionally refer to:\n> Schwengers O., Barth P., Falgenhauer L., Hain T., Chakraborty T., Goesmann A. (2020) Platon: identification and characterization of bacterial plasmid contigs in short-read draft assemblies exploiting protein-sequence-based replicon distribution scores. bioRxiv 2020.04.21.053082; doi: https://doi.org/10.1101/2020.04.21.053082\n\nAs Platon takes advantage of PlasmidFinder's incompatibility database, please also cite:\n> Carattoli A., Zankari E., Garcia-Fernandez A., Voldby Larsen M., Lund O., Villa L., Aarestrup F.M., Hasman H. (2014) PlasmidFinder and pMLST: in silico detection and typing of plasmids. Antimicrobial Agents and Chemotherapy, https://doi.org/10.1128/AAC.02412-14\n\nAs Platon takes advantage of MOBscan's MOB HMM profiles, please also cite:\n> Garcill\u00e1n-Barcia M. P., Redondo-Salvo S., Vielva L., de la Cruz F. (2020) MOBscan: Automated Annotation of MOB Relaxases. Methods in Molecular Biology, https://doi.org/10.1007/978-1-4939-9877-7_21\n\nAs Platon takes advantage of MOB-suite's oriT sequences, please also cite:\n> Robertson J., Nash J. H. E. (2018) MOB-suite: Software Tools for Clustering, Reconstruction and Typing of Plasmids From Draft Assemblies. Microbial Genomics, https://doi.org/10.1099/mgen.0.000206\n\n\n## Issues\nIf you run into any issues with Platon, we'd be happy to hear about it!\nPlease, start the pipeline with `-v` (verbose) and do not hesitate\nto file an issue including as much of the following as possible:\n- a detailed description of the issue\n- the platon cmd line output\n- the `<prefix>.json` file if possible\n- A reproducible example of the issue with a small dataset that you can share\n(helps us identify whether the issue is specific to a particular computer, operating system, and/or dataset).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oschwengers/platon", "keywords": "bioinformatics,plasmids,wgs", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "cb-platon", "package_url": "https://pypi.org/project/cb-platon/", "platform": "", "project_url": "https://pypi.org/project/cb-platon/", "project_urls": {"Bug Reports": "https://github.com/oschwengers/platon/issues", "Homepage": "https://github.com/oschwengers/platon", "Source": "https://github.com/oschwengers/platon"}, "release_url": "https://pypi.org/project/cb-platon/1.3.0/", "requires_dist": ["biopython (>=1.71)"], "requires_python": ">=3.5", "summary": "Platon: identification and characterization of bacterial plasmid contigs from short-read draft assemblies.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/oschwengers/platon/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83dd5b4e17218c9bc8817f75bdf5a93e37082902/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332d627269676874677265656e2e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08f4348d5b202f77d7bebe1659d88d93f54e52e6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f63622d706c61746f6e2e737667\">\n<img alt=\"GitHub release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce4236336dea605cfb61c8c69f0f6c3f24730de1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6f73636877656e676572732f706c61746f6e2e737667\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/048533582fcf931ea4da5be21697641b54e47a67/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63622d706c61746f6e2e737667\">\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/228fbfb5ac626fdd9425537a061c3d1db445fb2f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f63622d706c61746f6e2e737667\">\n<img alt=\"Conda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb4007bbc142b93331727e64da1948769f073180/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f762f62696f636f6e64612f706c61746f6e2e737667\">\n<img alt=\"Conda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15b78106aacae9b3115912e878e31fe9ad3dbabf/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f706e2f62696f636f6e64612f706c61746f6e2e737667\"></p>\n<h1>Platon: identification and characterization of bacterial plasmid contigs from short-read draft assemblies.</h1>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#inputoutput\" rel=\"nofollow\">Input/Output</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#bioconda\" rel=\"nofollow\">BioConda</a></li>\n<li><a href=\"#githubpip\" rel=\"nofollow\">GitHub/Pip</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#mode\" rel=\"nofollow\">Mode</a></li>\n<li><a href=\"#database\" rel=\"nofollow\">Database</a></li>\n<li><a href=\"#dependencies\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#citation\" rel=\"nofollow\">Citation</a></li>\n<li><a href=\"#issues\" rel=\"nofollow\">Issues</a></li>\n</ul>\n<h2>Description</h2>\n<p><strong>TL;DR</strong>\nPlaton detects plasmid contigs within bacterial draft genomes from WGS short-read assemblies.\nTherefore, Platon analyzes the natural distribution biases of certain protein coding genes between\nchromosomes and plasmids. This analysis is complemented by comprehensive contig characterizations\nupon which several heuristics are applied.</p>\n<p>Platon conducts three analysis steps:</p>\n<ol>\n<li>It predicts and searches coding sequences against a custom and pre-computed\ndatabase comprising marker protein sequences (<strong>MPS</strong>) and related replicon\ndistribution scores (<strong>RDS</strong>). These scores express the empirically measured\nfrequency biases of protein sequence distributions between plasmids and chromosomes\npre-computed on complete NCBI RefSeq replicons. Platon calculates the mean RDS for\neach contig and either classifies them as chromosome if the RDS is below a\nsensitivity cutoff determined to 95% sensitivity or as plasmid if the RDS is\nabove a specificity cutoff determined to 99.9% specificity.\nExact values for these thresholds have been computed based on Monte Carlo simulations of\nartifical replicon fragments created from complete RefSeq chromosome and plasmid sequences.</li>\n<li>Contigs passing the sensitivity filter get comprehensivley characterized.\nHereby, Platon tries to circularize the contig sequences, searches for rRNA,\nreplication, mobilization and conjugation genes, oriT sequences, incompatibility group\nDNA probes and finally performs a BLAST+ search against the NCBI plasmid database.</li>\n<li>Finally, to increase the overall sensitivity, Platon classifies all remaining contigs based on the gathered information\nby several heuristics.</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><img alt=\"Replicon distribution and alignment hit frequencies of MPS\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce94f9449ffbacf06416ba095815e4969082563f/7264732d726174696f2d636f756e74732e7765622e706e673f7261773d74727565\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Fig: Replicon distribution and alignment hit frequencies of MPS. Shown are summed plasmid and chromosome alignment hit frequencies per MPS plotted against plasmid/chromosome hit count ratios scaled to [-1 (chromosome), 1 (plasmid)]; Hue: normalized RDS values (min=-100, max=100), hit count outliers below 10-4 and above 1 are discarded for the sake of readability.</em></td>\n</tr></tbody></table>\n<h2>Input/Output</h2>\n<h3>Input</h3>\n<p>Platon accepts draft assemblies in fasta format. If contigs have been assembled with\nSPAdes, Platon is able to extract the coverage information from the contig names.</p>\n<h3>Output</h3>\n<p>For each contig classified as plasmid sequence the following columns are printed\nto <code>STDOUT</code> as tab separated values:</p>\n<ul>\n<li>Contig ID</li>\n<li>Length</li>\n<li>Coverage</li>\n<li># ORFs</li>\n<li>RDS</li>\n<li>Circularity</li>\n<li>Incompatibility Type(s)</li>\n<li># Replication Genes</li>\n<li># Mobilization Genes</li>\n<li># OriT Sequences</li>\n<li># Conjugation Genes</li>\n<li># rRNA Genes</li>\n<li># Plasmid Database Hits</li>\n</ul>\n<p>In addition, Platon writes the following files into the output directory:</p>\n<ul>\n<li><code>&lt;prefix&gt;</code>.plasmid.fasta: contigs classified as plasmids or plasmodal origin</li>\n<li><code>&lt;prefix&gt;</code>.chromosome.fasta: contigs classified as chromosomal origin</li>\n<li><code>&lt;prefix&gt;</code>.tsv: dense information as printed to STDOUT (see above)</li>\n<li><code>&lt;prefix&gt;</code>.json: comprehensive results and information on each single plasmid contig.\nAll files are prefixed (<code>&lt;prefix&gt;</code>) as the input genome fasta file.</li>\n</ul>\n<h2>Installation</h2>\n<p>Platon can be installed in 2 different ways, though we advise to use Conda/BioConda.</p>\n<p>In all cases, the custom database must be downloaded which we provide for download:\n<a href=\"https://doi.org/10.5281/zenodo.3349651\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6eb837112bccdd0a632fd40d863cdd6f36e6d261/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333334393635312e737667\"></a></p>\n<h3>BioConda</h3>\n<ol>\n<li>install Platon via <a href=\"https://conda.io/docs/install/quick.html\" rel=\"nofollow\">Conda</a> and the <a href=\"https://bioconda.github.io/\" rel=\"nofollow\">Bioconda</a> channel</li>\n<li>download &amp; extract the database</li>\n</ol>\n<p>Example:</p>\n<pre><code>$ conda install -c conda-forge -c bioconda -c defaults platon\n$ wget https://zenodo.org/record/3751774/files/db.tar.gz\n$ tar -xzf db.tar.gz\n$ rm db.tar.gz\n$ platon --db ./db genome.fasta\n</code></pre>\n<h3>GitHub/Pip</h3>\n<ol>\n<li>clone the the repository</li>\n<li>install Platon &amp; Python dependencies per pip</li>\n<li>download &amp; extract the database</li>\n</ol>\n<p>Example:</p>\n<pre><code>$ git clone git@github.com:oschwengers/platon.git\n$ cd platon\n$ python3 -m pip install .\n$ cd ..\n$ wget https://zenodo.org/record/3751774/files/db.tar.gz\n$ tar -xzf db.tar.gz\n$ rm db.tar.gz\n$ platon/bin/platon --db ./db genome.fasta\n</code></pre>\n<p>Info: Just move the extracted database directory into the platon directory.\nPlaton will automatically recognise it and thus, the database path doesn't need\nto be specified:</p>\n<pre><code>$ ...\n$ mv db/ platon\n$ platon/bin/platon genome.fasta\n</code></pre>\n<h2>Usage</h2>\n<p>Usage:</p>\n<pre><code>usage: platon [-h] [--db DB] [--threads THREADS] [--verbose] [--characterize]\n              [--output OUTPUT] [--version]\n              &lt;genome&gt;\n\nIdentification and characterization of bacterial plasmid contigs from short-read draft assemblies.\n\npositional arguments:\n  &lt;genome&gt;              draft genome in fasta format\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --db DB, -d DB        database path (default = &lt;platon_path&gt;/db)\n  --mode {sensitivity,accuracy,specificity}, -m {sensitivity,accuracy,specificity}\n                        applied filter mode: sensitivity: RDS only (&gt;= 95%\n                        sensitivity); specificity: RDS only (&gt;=99.9%\n                        specificity); accuracy: RDS &amp; characterization\n                        heuristics (highest accuracy)\n  --threads THREADS, -t THREADS\n                        number of threads to use (default = number of\n                        available CPUs)\n  --verbose, -v         print verbose information\n  --characterize, -c    deactivate filters; characterize all contigs\n  --output OUTPUT, -o OUTPUT\n                        output directory (default = current working directory)\n  --version, -V         show program's version number and exit\n</code></pre>\n<h2>Examples</h2>\n<p>Simple:</p>\n<pre><code>$ platon genome.fasta\n</code></pre>\n<p>Expert: writing results to <code>results</code> directory with verbose output using 8 threads:</p>\n<pre><code>$ platon -db ~/db --output results/ --verbose --threads 8 genome.fasta\n</code></pre>\n<h2>Mode</h2>\n<p>Platon provides 3 different modi controlling which filters will be used.\n<code>Accuracy</code> mode is the preset default.</p>\n<h3>Sensitivity</h3>\n<p>In the <code>sensitivity</code> mode Platon will classifiy all contigs with an <code>RDS</code> value <em>below</em>\nthe sensitivity threshold as chromosomal and all remaining contigs as plasmid.\nThis threshold was defined to account for 95% sensitivity and computed via Monte Carlo\nsimulations of artifical contigs resulting in an RDS=-7.7.\n-&gt; use this mode to <em>exclude chromosomal</em> contigs.</p>\n<h3>Specificity</h3>\n<p>In the <code>specificity</code> mode Platon will classifiy all contigs with an <code>RDS</code> value <em>above</em>\nthe specificity threshold as plasmid and all remaining contigs as chromosomal.\nThis threshold was defined to account for 99.9% specificity and computed via Monte Carlo\nsimulations of artifical contigs resulting in an RDS=0.4.</p>\n<h3>Accuracy (default)</h3>\n<p>In the <code>accuracy</code> mode Platon will classifiy all contigs with:</p>\n<ul>\n<li>an <code>RDS</code> value <em>below</em> the sensitivity threshold as chromosomal</li>\n<li>an <code>RDS</code> value <em>above</em> the specificity threshold as plasmid\nand in addition all contigs as plasmid for which one of the following is true: it</li>\n<li>can be circularized</li>\n<li>has an incompatibility group sequence</li>\n<li>has a replication or mobilization HMM hit</li>\n<li>has an oriT hit</li>\n<li>has an RDS above the conservative score (0.1), a RefSeq plasmid hit and <em>no</em> rRNA hit</li>\n</ul>\n<h2>Database</h2>\n<p>Platon depends on a custom database based on MPS, RDS, RefSeq Plasmid database,\nPlasmidFinder db as well as manually curated MOB HMM models from MOBscan,\ncustom conjugation and replication HMM models and oriT sequences from MOB-suite.\nThis database based on UniProt UniRef90 release 2020_01 can be downloaded here:\n(zipped 1.4 Gb, unzipped 2.4 Gb)\n<a href=\"https://doi.org/10.5281/zenodo.3349651\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6eb837112bccdd0a632fd40d863cdd6f36e6d261/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333334393635312e737667\"></a></p>\n<ul>\n<li><a href=\"https://zenodo.org/record/3751774/files/db.tar.gz\" rel=\"nofollow\">https://zenodo.org/record/3751774/files/db.tar.gz</a></li>\n</ul>\n<h2>Dependencies</h2>\n<p>Platon was developed and tested in Python 3.5 and depends on BioPython (&gt;=1.71).</p>\n<p>Additionally, it depends on the following 3rd party executables:</p>\n<ul>\n<li>Prodigal (2.6.3) <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2848648\" rel=\"nofollow\">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2848648</a> <a href=\"https://github.com/hyattpd/Prodigal\" rel=\"nofollow\">https://github.com/hyattpd/Prodigal</a></li>\n<li>Diamond (0.9.32) <a href=\"https://pubmed.ncbi.nlm.nih.gov/25402007\" rel=\"nofollow\">https://pubmed.ncbi.nlm.nih.gov/25402007</a> <a href=\"http://www.diamondsearch.org\" rel=\"nofollow\">http://www.diamondsearch.org</a></li>\n<li>Blast+ (2.7.1) <a href=\"https://www.ncbi.nlm.nih.gov/pubmed/2231712\" rel=\"nofollow\">https://www.ncbi.nlm.nih.gov/pubmed/2231712</a> <a href=\"https://blast.ncbi.nlm.nih.gov\" rel=\"nofollow\">https://blast.ncbi.nlm.nih.gov</a></li>\n<li>MUMmer (4.0.0-beta2) <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC395750/\" rel=\"nofollow\">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC395750/</a> <a href=\"https://github.com/gmarcais/mummer\" rel=\"nofollow\">https://github.com/gmarcais/mummer</a></li>\n<li>HMMER (3.2.1) <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3695513/\" rel=\"nofollow\">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3695513/</a> <a href=\"http://hmmer.org/\" rel=\"nofollow\">http://hmmer.org/</a></li>\n<li>INFERNAL (1.1.2) <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3810854\" rel=\"nofollow\">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3810854</a> <a href=\"http://eddylab.org/infernal\" rel=\"nofollow\">http://eddylab.org/infernal</a></li>\n</ul>\n<h2>Citation</h2>\n<p>A manuscript is submitted.\nTo temporarily cite our work, please transitionally refer to:</p>\n<blockquote>\n<p>Schwengers O., Barth P., Falgenhauer L., Hain T., Chakraborty T., Goesmann A. (2020) Platon: identification and characterization of bacterial plasmid contigs in short-read draft assemblies exploiting protein-sequence-based replicon distribution scores. bioRxiv 2020.04.21.053082; doi: <a href=\"https://doi.org/10.1101/2020.04.21.053082\" rel=\"nofollow\">https://doi.org/10.1101/2020.04.21.053082</a></p>\n</blockquote>\n<p>As Platon takes advantage of PlasmidFinder's incompatibility database, please also cite:</p>\n<blockquote>\n<p>Carattoli A., Zankari E., Garcia-Fernandez A., Voldby Larsen M., Lund O., Villa L., Aarestrup F.M., Hasman H. (2014) PlasmidFinder and pMLST: in silico detection and typing of plasmids. Antimicrobial Agents and Chemotherapy, <a href=\"https://doi.org/10.1128/AAC.02412-14\" rel=\"nofollow\">https://doi.org/10.1128/AAC.02412-14</a></p>\n</blockquote>\n<p>As Platon takes advantage of MOBscan's MOB HMM profiles, please also cite:</p>\n<blockquote>\n<p>Garcill\u00e1n-Barcia M. P., Redondo-Salvo S., Vielva L., de la Cruz F. (2020) MOBscan: Automated Annotation of MOB Relaxases. Methods in Molecular Biology, <a href=\"https://doi.org/10.1007/978-1-4939-9877-7_21\" rel=\"nofollow\">https://doi.org/10.1007/978-1-4939-9877-7_21</a></p>\n</blockquote>\n<p>As Platon takes advantage of MOB-suite's oriT sequences, please also cite:</p>\n<blockquote>\n<p>Robertson J., Nash J. H. E. (2018) MOB-suite: Software Tools for Clustering, Reconstruction and Typing of Plasmids From Draft Assemblies. Microbial Genomics, <a href=\"https://doi.org/10.1099/mgen.0.000206\" rel=\"nofollow\">https://doi.org/10.1099/mgen.0.000206</a></p>\n</blockquote>\n<h2>Issues</h2>\n<p>If you run into any issues with Platon, we'd be happy to hear about it!\nPlease, start the pipeline with <code>-v</code> (verbose) and do not hesitate\nto file an issue including as much of the following as possible:</p>\n<ul>\n<li>a detailed description of the issue</li>\n<li>the platon cmd line output</li>\n<li>the <code>&lt;prefix&gt;.json</code> file if possible</li>\n<li>A reproducible example of the issue with a small dataset that you can share\n(helps us identify whether the issue is specific to a particular computer, operating system, and/or dataset).</li>\n</ul>\n\n          </div>"}, "last_serial": 7186407, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "237185aebf721674ffc16200514a363f", "sha256": "89dfd8c438402a17ce0280817a88bf9794a924fd92ff84a71e33c238c4774eb7"}, "downloads": -1, "filename": "cb-platon-1.0.0.tar.gz", "has_sig": false, "md5_digest": "237185aebf721674ffc16200514a363f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11477, "upload_time": "2019-06-25T11:54:12", "upload_time_iso_8601": "2019-06-25T11:54:12.980587Z", "url": "https://files.pythonhosted.org/packages/55/38/7498120588cfb0a935e3aaac5d36f1beb9e90e1724a3088958471ecef077/cb-platon-1.0.0.tar.gz", "yanked": false}], "1.0.0rc1": [{"comment_text": "", "digests": {"md5": "eb25b7bb76a9b77c959bd98780df137c", "sha256": "150d20884229097995db19a40f43d2db5f6559a236e59a895f9fd717e2560043"}, "downloads": -1, "filename": "cb_platon-1.0.0rc1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eb25b7bb76a9b77c959bd98780df137c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 24009, "upload_time": "2019-06-14T12:49:41", "upload_time_iso_8601": "2019-06-14T12:49:41.301219Z", "url": "https://files.pythonhosted.org/packages/2e/6e/48b6df190f359c717c6fcdc74707b8d5cae2a4504c01e143fe6d9b4d75e7/cb_platon-1.0.0rc1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0247316f4b017476bf345b92da084a0e", "sha256": "1db01b8f75b07ec01d0b2eb971c9b9c63ff8cc36240f72fa482ba77787b5386e"}, "downloads": -1, "filename": "cb-platon-1.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "0247316f4b017476bf345b92da084a0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10888, "upload_time": "2019-06-14T12:49:43", "upload_time_iso_8601": "2019-06-14T12:49:43.997662Z", "url": "https://files.pythonhosted.org/packages/9c/e8/03ff51975d1a231870f6a89cb99770d4c041a9e0a0147f23d3931e0f627e/cb-platon-1.0.0rc1.tar.gz", "yanked": false}], "1.0.0rc2": [{"comment_text": "", "digests": {"md5": "fb1bbc7ab2f6faa10967442f5413d262", "sha256": "02cc22ea70a3998ee17e9c2dfe8021110fd87e55d0b102f8c25a451b9b4b2cfe"}, "downloads": -1, "filename": "cb-platon-1.0.0rc2.tar.gz", "has_sig": false, "md5_digest": "fb1bbc7ab2f6faa10967442f5413d262", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11480, "upload_time": "2019-06-25T11:27:30", "upload_time_iso_8601": "2019-06-25T11:27:30.691241Z", "url": "https://files.pythonhosted.org/packages/de/f6/c2f7ab7fbd4b39aac8e76cd39149aa80f7807503ca411cd0029f80f1a235/cb-platon-1.0.0rc2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "48f7172a95073d7fe4b4a5f8bd8f39f6", "sha256": "5502d79c4699d8cfb69e0ada29bfb4a78cf2ded7f17731a19e2c5a6449f64a69"}, "downloads": -1, "filename": "cb_platon-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48f7172a95073d7fe4b4a5f8bd8f39f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 25019, "upload_time": "2019-08-02T14:43:54", "upload_time_iso_8601": "2019-08-02T14:43:54.342694Z", "url": "https://files.pythonhosted.org/packages/ae/92/70a35f67cc981382c00dd32de90371e3f6ee93a82c2e917b09e69976851a/cb_platon-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28b917a1b64e2fa7587d9f42ebc701fb", "sha256": "a390511ada3cf786b5af83425c776146eaeac5c02b8123f6cb69cf0f2056802e"}, "downloads": -1, "filename": "cb-platon-1.1.0.tar.gz", "has_sig": false, "md5_digest": "28b917a1b64e2fa7587d9f42ebc701fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11957, "upload_time": "2019-08-02T14:43:55", "upload_time_iso_8601": "2019-08-02T14:43:55.936638Z", "url": "https://files.pythonhosted.org/packages/76/dd/d78954ac53a500ded3227649c7d31583384c0721139e012a1379a499ac4d/cb-platon-1.1.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "ca43956bfdf4f4c6579cf2b14de42713", "sha256": "dfbf9691f82e8fa82530b3f9cdf3b6f691ec1d2edbd986b8793007efca5d8aab"}, "downloads": -1, "filename": "cb_platon-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ca43956bfdf4f4c6579cf2b14de42713", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28051, "upload_time": "2020-04-20T14:22:04", "upload_time_iso_8601": "2020-04-20T14:22:04.301462Z", "url": "https://files.pythonhosted.org/packages/da/21/06ad98b08f9e417b05adf89ada782eb394cab4b0fc031542510a7d633d03/cb_platon-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4dbb186ecd4017576324f5de08c7360", "sha256": "70d6822c6d3aca9254614993d6da169c878db717ac7149c5ae115fbf75b1071c"}, "downloads": -1, "filename": "cb-platon-1.2.1.tar.gz", "has_sig": false, "md5_digest": "e4dbb186ecd4017576324f5de08c7360", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15502, "upload_time": "2020-04-20T14:22:05", "upload_time_iso_8601": "2020-04-20T14:22:05.466668Z", "url": "https://files.pythonhosted.org/packages/90/34/c9049ec5e5e98eb18bdd9634b8c9644c21610ea57835815c9f37f2b6ff8f/cb-platon-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "6107888992ec903141b35baccd6b9b47", "sha256": "16f2ef7cb079b42938b3a129c361f81b58e929c7c0ba1e00a98949c6a29cf28e"}, "downloads": -1, "filename": "cb_platon-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6107888992ec903141b35baccd6b9b47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28816, "upload_time": "2020-05-07T08:20:35", "upload_time_iso_8601": "2020-05-07T08:20:35.108259Z", "url": "https://files.pythonhosted.org/packages/57/9c/04a445e0389c2c235f65ca01ff4833e00f172524e7c23a879a3f3ab44291/cb_platon-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b037abada355214f80da1d993ba36f8", "sha256": "d2d3b24d67d5bc29d391cfce4ddd35e94897b8837ab3f7e109baaea90d218ec0"}, "downloads": -1, "filename": "cb-platon-1.3.0.tar.gz", "has_sig": false, "md5_digest": "5b037abada355214f80da1d993ba36f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15737, "upload_time": "2020-05-07T08:20:36", "upload_time_iso_8601": "2020-05-07T08:20:36.600888Z", "url": "https://files.pythonhosted.org/packages/c9/28/075cdcdea75765a4306ab6e4e4bb348fbaa9b21eeafc9a573d39a243d4d9/cb-platon-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6107888992ec903141b35baccd6b9b47", "sha256": "16f2ef7cb079b42938b3a129c361f81b58e929c7c0ba1e00a98949c6a29cf28e"}, "downloads": -1, "filename": "cb_platon-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6107888992ec903141b35baccd6b9b47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28816, "upload_time": "2020-05-07T08:20:35", "upload_time_iso_8601": "2020-05-07T08:20:35.108259Z", "url": "https://files.pythonhosted.org/packages/57/9c/04a445e0389c2c235f65ca01ff4833e00f172524e7c23a879a3f3ab44291/cb_platon-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b037abada355214f80da1d993ba36f8", "sha256": "d2d3b24d67d5bc29d391cfce4ddd35e94897b8837ab3f7e109baaea90d218ec0"}, "downloads": -1, "filename": "cb-platon-1.3.0.tar.gz", "has_sig": false, "md5_digest": "5b037abada355214f80da1d993ba36f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15737, "upload_time": "2020-05-07T08:20:36", "upload_time_iso_8601": "2020-05-07T08:20:36.600888Z", "url": "https://files.pythonhosted.org/packages/c9/28/075cdcdea75765a4306ab6e4e4bb348fbaa9b21eeafc9a573d39a243d4d9/cb-platon-1.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:09 2020"}