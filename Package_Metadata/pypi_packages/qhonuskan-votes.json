{"info": {"author": "Mirat Can Bayrak", "author_email": "miratcanbayrak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "===============\nQhonuskan-Votes\n===============\n\nEasy to use reddit like voting system for django models.\n\nFeatures\n--------\n\n*  Does not use GenericForeignKeys (which irritates me when making queries)\n   Has vote_buttons_for templatetag, that generates html code for your object\n   for vote buttons.\n\n*  Has, default_buttons.css which gives a shape your buttons as default, but\n   you can override.\n\n*  Has, voting_script template tag, it generates javascript code to make\n   ajax requests for voting. Automatically finds qhonuskan_votes views.\n\n*  voting_script tag also renders overridable show_not_authenticated_error\n   function, so you can use your own error windows (jquery-ui etc.) via\n   overriding it.\n\n*  Default buttons are pure css, there is no images. So it's lite.\n\nWhat's new?\n-----------\nversion 0.2\n'''''''''''\n* Defined ``get_version`` method to get project version in your code.\n* Lettuce tests are added for testing voting system.\n* Changed ``vote`` view name as ``qhonuskan_vote``. Prefix is required for\n  minimizing view name conflicts.\n* Moved templates to ``templates/qhonuskan`` directory.\n* Minimum Django version that we supported is 1.3.\n\n\nQuick Implementation Guide\n--------------------------\n\n1. Add qhonuskan_votes to your INSTALLED_APPS.\n\n   ::\n\n     INSTALLED_APPS = ('...',\n                       '...',\n                       'qhonuskan_votes')\n\n\n2. Add **VotesField**, and add **ObjectsWithScoresManager** to your model.\n\n   ::\n\n     from django.db import models\n     from qhonuskan_votes.models import VotesField\n\n     class MyModel(models.Model):\n         votes = VotesField()\n\t # Add objects before all other managers to avoid issues mention in http://stackoverflow.com/a/4455374/1462141\n\t objects = models.Manager()\n\n\t #For just a list of objects that are not ordered that can be customized.\n         objects_with_scores = ObjectsWithScoresManager()\n\n\t #For a objects ordered by score.\n\t sort_by_score = SortByScoresManager()\n         ...\n         ...\n\n3. Syncdb.\n4. Extend your urls [#]_.\n   ::\n\n     import qhonuskan_votes.urls\n     from django.conf.urls.defaults import *\n\n     urlpatterns = patterns('',\n       ...\n       ...\n       url(r'^votes/', include(qhonuskan_votes.urls)),\n     )\n\n5. Create the list in you view. Use\n\n   ::\n\n     #For a regular list of items without votes from your model use the following:\n     item_list_no_score = Items.objects.all()\n\n     #For a list with scores that can be customized with use the following:\n     item_list_unordered_with_scores = Items.objects_with_scores.all()\n     #to customize the order by a field unique to your model. So something like this:\n     item_list_unordered_with_scores = Items.objects_with_scores.all().order_by(-date_created)\n\n     #To obtain a list of items sorted by vote counts like (1,0,-1) like Reddit:\n     item_list_ordered__scores = Items.sort_by_score.all()\n\n\n6. Load qhonuskan_votes templatetags from your template. You will need STATIC_PREFIX too.\n\n   ::\n\n     {% load qhonuskan_votes static %}\n     {% get_static_prefix as STATIC_PREFIX %}\n\n\n7. Load default_buttons.css to give little shape to buttons\n\n   ::\n\n     <link href=\"{{STATIC_PREFIX}}default_buttons.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n8. After that line, if you wish you can override some properties\n\n   ::\n\n     <style type=\"text/css\">\n       div.vote_buttons {\n         width: 40px;\n         margin-right: 5px;\n         float: left;\n         border: 1px solid #666;\n       }\n     </style>\n\n9. Load jquery to your template\n\n   ::\n\n     <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\"></script>\n\n10. After all, you can add voting_script template tag to your head section.\nIt generates necessary javascript code for ajax requests.\n\n   ::\n\n     {% voting_script %}\n\n11. use vote_buttons_for_object template tag to create buttons.\n\n    ::\n\n      {% for object in objects %}\n        <div class=\"object\">\n          {% vote_buttons_for object %}\n            <div class=\"text\">\n              {{ object.text }}\n            </div>\n        </div>\n      {% endfor %}\n\nFor further information you can inspect example project at root of the repository.\n\nContribution\n------------\nYou liked this project? Nice. Let's start with provide your virtual\nenvironment. You can install all you need dependencies::\n\n    $ pip install -r requirements/development.txt\n\nWe have some important conditions during the development of the project:\n\n* We adopt PEP8 as Python style guide.\n* You can send us patch for reviewing changes, but if you fork the project\n  and open a pull request from github, that would be very easy for us.\n\n\nFootNotes\n---------\n.. [#] To use the views for up voting and down voting you include the urls.py in your\n       website's url patterns. You can serve qhonuskan_votes views wherever you\n       want. Javascript files updates automatically to find qhonuskan_votes views.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/linkfloyd/qhonuskan-votes", "keywords": null, "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "qhonuskan-votes", "package_url": "https://pypi.org/project/qhonuskan-votes/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/qhonuskan-votes/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/linkfloyd/qhonuskan-votes"}, "release_url": "https://pypi.org/project/qhonuskan-votes/0.2/", "requires_dist": null, "requires_python": null, "summary": "Easy to use reddit like voting system for django models.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Easy to use reddit like voting system for django models.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Does not use GenericForeignKeys (which irritates me when making queries)\nHas vote_buttons_for templatetag, that generates html code for your object\nfor vote buttons.</li>\n<li>Has, default_buttons.css which gives a shape your buttons as default, but\nyou can override.</li>\n<li>Has, voting_script template tag, it generates javascript code to make\najax requests for voting. Automatically finds qhonuskan_votes views.</li>\n<li>voting_script tag also renders overridable show_not_authenticated_error\nfunction, so you can use your own error windows (jquery-ui etc.) via\noverriding it.</li>\n<li>Default buttons are pure css, there is no images. So it\u2019s lite.</li>\n</ul>\n</div>\n<div id=\"what-s-new\">\n<h2>What\u2019s new?</h2>\n<h2 id=\"version-0-2\"><span class=\"section-subtitle\">version 0.2</span></h2>\n<ul>\n<li>Defined <tt>get_version</tt> method to get project version in your code.</li>\n<li>Lettuce tests are added for testing voting system.</li>\n<li>Changed <tt>vote</tt> view name as <tt>qhonuskan_vote</tt>. Prefix is required for\nminimizing view name conflicts.</li>\n<li>Moved templates to <tt>templates/qhonuskan</tt> directory.</li>\n<li>Minimum Django version that we supported is 1.3.</li>\n</ul>\n</div>\n<div id=\"quick-implementation-guide\">\n<h2>Quick Implementation Guide</h2>\n<ol>\n<li><p>Add qhonuskan_votes to your INSTALLED_APPS.</p>\n<pre>INSTALLED_APPS = ('...',\n                  '...',\n                  'qhonuskan_votes')\n</pre>\n</li>\n<li><p>Add <strong>VotesField</strong>, and add <strong>ObjectsWithScoresManager</strong> to your model.</p>\n<pre>from django.db import models\nfrom qhonuskan_votes.models import VotesField\n\nclass MyModel(models.Model):\n    votes = VotesField()\n    # Add objects before all other managers to avoid issues mention in http://stackoverflow.com/a/4455374/1462141\n    objects = models.Manager()\n\n    #For just a list of objects that are not ordered that can be customized.\n    objects_with_scores = ObjectsWithScoresManager()\n\n    #For a objects ordered by score.\n    sort_by_score = SortByScoresManager()\n    ...\n    ...\n</pre>\n</li>\n<li><p>Syncdb.</p>\n</li>\n<li><p>Extend your urls <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[1]</a>.</p>\n<pre>import qhonuskan_votes.urls\nfrom django.conf.urls.defaults import *\n\nurlpatterns = patterns('',\n  ...\n  ...\n  url(r'^votes/', include(qhonuskan_votes.urls)),\n)\n</pre>\n</li>\n<li><p>Create the list in you view. Use</p>\n<pre>#For a regular list of items without votes from your model use the following:\nitem_list_no_score = Items.objects.all()\n\n#For a list with scores that can be customized with use the following:\nitem_list_unordered_with_scores = Items.objects_with_scores.all()\n#to customize the order by a field unique to your model. So something like this:\nitem_list_unordered_with_scores = Items.objects_with_scores.all().order_by(-date_created)\n\n#To obtain a list of items sorted by vote counts like (1,0,-1) like Reddit:\nitem_list_ordered__scores = Items.sort_by_score.all()\n</pre>\n</li>\n<li><p>Load qhonuskan_votes templatetags from your template. You will need STATIC_PREFIX too.</p>\n<pre>{% load qhonuskan_votes static %}\n{% get_static_prefix as STATIC_PREFIX %}\n</pre>\n</li>\n<li><p>Load default_buttons.css to give little shape to buttons</p>\n<pre>&lt;link href=\"{{STATIC_PREFIX}}default_buttons.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n</pre>\n</li>\n<li><p>After that line, if you wish you can override some properties</p>\n<pre>&lt;style type=\"text/css\"&gt;\n  div.vote_buttons {\n    width: 40px;\n    margin-right: 5px;\n    float: left;\n    border: 1px solid #666;\n  }\n&lt;/style&gt;\n</pre>\n</li>\n<li><p>Load jquery to your template</p>\n<pre>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\"&gt;&lt;/script&gt;\n</pre>\n</li>\n</ol>\n<p>10. After all, you can add voting_script template tag to your head section.\nIt generates necessary javascript code for ajax requests.</p>\n<blockquote>\n<pre>{% voting_script %}\n</pre>\n</blockquote>\n<ol>\n<li><p>use vote_buttons_for_object template tag to create buttons.</p>\n<pre>{% for object in objects %}\n  &lt;div class=\"object\"&gt;\n    {% vote_buttons_for object %}\n      &lt;div class=\"text\"&gt;\n        {{ object.text }}\n      &lt;/div&gt;\n  &lt;/div&gt;\n{% endfor %}\n</pre>\n</li>\n</ol>\n<p>For further information you can inspect example project at root of the repository.</p>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>You liked this project? Nice. Let\u2019s start with provide your virtual\nenvironment. You can install all you need dependencies:</p>\n<pre>$ pip install -r requirements/development.txt\n</pre>\n<p>We have some important conditions during the development of the project:</p>\n<ul>\n<li>We adopt PEP8 as Python style guide.</li>\n<li>You can send us patch for reviewing changes, but if you fork the project\nand open a pull request from github, that would be very easy for us.</li>\n</ul>\n</div>\n<div id=\"footnotes\">\n<h2>FootNotes</h2>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>To use the views for up voting and down voting you include the urls.py in your\nwebsite\u2019s url patterns. You can serve qhonuskan_votes views wherever you\nwant. Javascript files updates automatically to find qhonuskan_votes views.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 1370238, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "39666b972b66eea13ad928fe4ac6bfca", "sha256": "f2b2425b502f2b3b743d985877cc88441db7fc3844246291a6d3adf1adc7259f"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.0.tar.gz", "has_sig": false, "md5_digest": "39666b972b66eea13ad928fe4ac6bfca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6372, "upload_time": "2012-02-28T00:10:38", "upload_time_iso_8601": "2012-02-28T00:10:38.491964Z", "url": "https://files.pythonhosted.org/packages/1e/8b/5fda0be941ba1c55fc64ab4c01fdba2fe9dbae1344c8e03af7edaf8c69e7/qhonuskan-votes-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "739be7e9aa80dafe45559adb169306bc", "sha256": "62849b7a9886e42b1f8541f0751788547265944e2a375fa0f44b37683f11ca55"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.1.tar.gz", "has_sig": false, "md5_digest": "739be7e9aa80dafe45559adb169306bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6755, "upload_time": "2012-02-28T00:44:52", "upload_time_iso_8601": "2012-02-28T00:44:52.836648Z", "url": "https://files.pythonhosted.org/packages/d7/4d/a5ab11fbf3ae7a322e7208137bc728b0fdc03488bc59749796635a7595c7/qhonuskan-votes-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fe462371d75859e5a24e36e8eed11cf4", "sha256": "7f38abb8e90fc5a2cdd03743bab7bf2cc0ef0ad545c684a49202f24d63c63783"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.2.tar.gz", "has_sig": false, "md5_digest": "fe462371d75859e5a24e36e8eed11cf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6767, "upload_time": "2012-03-27T11:53:31", "upload_time_iso_8601": "2012-03-27T11:53:31.577980Z", "url": "https://files.pythonhosted.org/packages/48/d0/a631ab46cc8c3bb9863b0f8158698bf3d63c44ba9d80dcd553235bd39b25/qhonuskan-votes-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b41c6ed4d53200ad32de5918f0fb7662", "sha256": "102c1599a8d76ed1b40e8093ef0017f7e6eabafb2501ec3ed57aab6286a2d0d3"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.3.linux-i686.exe", "has_sig": false, "md5_digest": "b41c6ed4d53200ad32de5918f0fb7662", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 73952, "upload_time": "2012-04-20T19:31:48", "upload_time_iso_8601": "2012-04-20T19:31:48.008357Z", "url": "https://files.pythonhosted.org/packages/bb/2c/8b527321aad6afa2482492697add28ad41e47092cc322016922b471a87e7/qhonuskan-votes-0.1.3.linux-i686.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf55535393b0011fd1ce65607ce4fa92", "sha256": "04014d0bf722f2714d3f262c4332d32759e1fcf203169c29ce38c09c00b48e61"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bf55535393b0011fd1ce65607ce4fa92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7188, "upload_time": "2012-04-20T19:31:44", "upload_time_iso_8601": "2012-04-20T19:31:44.732657Z", "url": "https://files.pythonhosted.org/packages/b1/e4/4d0e924746dc9b23434a465b289cada3c7176094f7c6a2bb2868671d0e93/qhonuskan-votes-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "f203ad456bea2b5533ba9d500c8f6311", "sha256": "9e2409b9228ff53ea5405469edc7fc8a45bee0a695384fcdcf5853584bcad6ca"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.4.tar.gz", "has_sig": false, "md5_digest": "f203ad456bea2b5533ba9d500c8f6311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7300, "upload_time": "2012-07-22T15:28:37", "upload_time_iso_8601": "2012-07-22T15:28:37.335813Z", "url": "https://files.pythonhosted.org/packages/6c/47/e42961299d9e41ce2ced49dc7b89db151bea7bef382e7c6270887df93b08/qhonuskan-votes-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "096ebd15cc48121db283a8aa6054207a", "sha256": "d9173a65d4112fdf6b24ce8f1d25568883cba33734af918010bb5de21ab89203"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.5.tar.gz", "has_sig": false, "md5_digest": "096ebd15cc48121db283a8aa6054207a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7299, "upload_time": "2012-08-24T10:38:40", "upload_time_iso_8601": "2012-08-24T10:38:40.704028Z", "url": "https://files.pythonhosted.org/packages/89/ef/b911bc27f460bffa8a57eb5b6c520ad7a0c0ff244869f82a4c6a86f53b74/qhonuskan-votes-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "e527d8679670d9734e1ca47f3c884fbf", "sha256": "898fa350491d42267018e4e52581a5664714ed68aa814380a271506dda76e9ae"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.6.tar.gz", "has_sig": false, "md5_digest": "e527d8679670d9734e1ca47f3c884fbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7303, "upload_time": "2012-08-24T10:53:56", "upload_time_iso_8601": "2012-08-24T10:53:56.071754Z", "url": "https://files.pythonhosted.org/packages/1e/be/88fd2e5cf180a093b2eb0bffdeda5f860315ef586d279971adf0c7fdf9b3/qhonuskan-votes-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "2865dea021dd5a2ae217c7fa5e25fabe", "sha256": "bd33816d7a742dc683d077176406547e597d9d6f6284a301ad3848dc0e5d8412"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.7.tar.gz", "has_sig": false, "md5_digest": "2865dea021dd5a2ae217c7fa5e25fabe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7315, "upload_time": "2012-08-24T11:21:07", "upload_time_iso_8601": "2012-08-24T11:21:07.368588Z", "url": "https://files.pythonhosted.org/packages/3e/86/36d21e43e92a7f8b2a78c8a6f0cedb67af5c35f61a04763a9e3c028895cb/qhonuskan-votes-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "e603aeb6465288ea939f69aed81ffe2b", "sha256": "2016982b2aa8ac814f44d09e9b7ffd58ba02d4a3967ccef4eaa7bd1b7b83230d"}, "downloads": -1, "filename": "qhonuskan-votes-0.1.8.tar.gz", "has_sig": false, "md5_digest": "e603aeb6465288ea939f69aed81ffe2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7968, "upload_time": "2013-03-09T11:24:10", "upload_time_iso_8601": "2013-03-09T11:24:10.197070Z", "url": "https://files.pythonhosted.org/packages/d1/18/4583619916ee22d23c7320436a4900895cabb7cf648074ccfdfbf07bb0c5/qhonuskan-votes-0.1.8.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "61eb375316d4273d8e8fba02626fae5a", "sha256": "4e906488c59473a13fd00afeb139b110e8af5a6fc7a50cb7f7c9e5bcce9007e5"}, "downloads": -1, "filename": "qhonuskan-votes-0.2.tar.gz", "has_sig": false, "md5_digest": "61eb375316d4273d8e8fba02626fae5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10839, "upload_time": "2013-05-12T13:31:17", "upload_time_iso_8601": "2013-05-12T13:31:17.059587Z", "url": "https://files.pythonhosted.org/packages/84/ba/a04495fbe8c8246bff5f0a10d37a077436e3b925801be77a6022097e5850/qhonuskan-votes-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61eb375316d4273d8e8fba02626fae5a", "sha256": "4e906488c59473a13fd00afeb139b110e8af5a6fc7a50cb7f7c9e5bcce9007e5"}, "downloads": -1, "filename": "qhonuskan-votes-0.2.tar.gz", "has_sig": false, "md5_digest": "61eb375316d4273d8e8fba02626fae5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10839, "upload_time": "2013-05-12T13:31:17", "upload_time_iso_8601": "2013-05-12T13:31:17.059587Z", "url": "https://files.pythonhosted.org/packages/84/ba/a04495fbe8c8246bff5f0a10d37a077436e3b925801be77a6022097e5850/qhonuskan-votes-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:41 2020"}