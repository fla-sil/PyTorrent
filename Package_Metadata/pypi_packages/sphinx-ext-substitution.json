{"info": {"author": "Richard Darst", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Sphinx", "Framework :: Sphinx :: Extension", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Sphinx extension for power substitutions\n========================================\n\n`Sphinx <https://www.sphinx-doc.org/>`__ (and `Docutils\n<http://docutils.sourceforge.net/>`__) provide a way to template\nvariables into your documentation, but it can be kind of limited.\nThis Sphinx extension provides a powerful way to manage a master set\nof documentation with local-specific variations.  **Logical\nmanagement** is a key design consideration: it's easy to make some\nvariable substitutions, but harder to keep them up to date when you\nmake a long-running fork!\n\nFeatures include:\n\n- Default values can also be included inline and replaced only if a\n  replacement value is defined.\n- Search paths for variable replacements: hierarchical variable\n  substitutions, group and then local customizations supported.\n- Multiple compilation mode: original, with substitutions, or both.\n  In the \"both\" mode, both the original and substituted are shown with\n  highlighting, so that you can easily compare the current original\n  values with your current substitute values.\n- Both role (inline) and directive (paragraph level) support.\n\n\n\nUsage examples\n--------------\n\nAs a role::\n\n  SSH to :sub:`(hostname) triton.aalto.fi`\n\nWe see the ReST role is named ``sub`` (which conflicts with\n\"subscript\", maybe we should change that) and an ID of ``hostname``.\nIf there is a file called ``hostname.rst`` in the search path or a\nfile with a ``.yaml`` extension with a ``hostname`` key in the search\npath, it will substitute that value into this place.  If this value\ndoesn't exist, it will use the original (or remove it if the original\nis empty).\n\nAs a directive::\n\n   .. sub:: ssh_clarification\n\nThis directive works analogously to the role, with an ID of\n``ssh_clarification``.  There is no default content in this example,\nwhich means that nothing is inserted unless a replacement is defined ,\nso in this case when used without content it can be used to add in an\nextra content in just some versions.  (There could be default content,\ntoo.)  If the directive had content, then it would work the same as\nthe first example.\n\nAs a reminder, in Docutils/Sphinx, a role is inline text and a\ndirective is a paragraph-level structure.\n\nThere are three run modes, controlled by the ``substitution_mode``\nconfiguration option:\n\n* ``replace``: Use the replacements if defined or else the original,\n  with no special markup.  This is the default mode and does what you\n  expect for normal use.\n\n* ``both``: Show *both* the ID, original value, and the replacement\n  value with distinguishing markup (HTML only).  This can be used to\n  compare your local version with the latest upstream. to see what\n  needs to be updated - or what substitutions are available and should\n  be used.\n\n* ``original``: Show only the original text without any replacements.\n\nFinally, there is a ``sub-list`` directive::\n\n  .. sub-list::\n\nThis directive is replaced with a table that contains all substitution\nIDs, original values, and replacements that have been used in the\ndocument.\n\n\nWhen searching for replacement values:\n\n1. First, each item in the search path (configuration option\n   ``substitute_path``) is searched.\n\n   a. If it's a file, load it as YAML (see below)\n\n   b. If it's a directory, go to step 2.\n\n2. List the directory and search for files to load.\n\n   a. First, load all ``*.rst`` files.  The ``*`` value is used as the\n      replacement ID.\n\n   b. Second, search for all ``*.yaml`` files.  Load them as YAML\n      data, which should be a mapping from keys to values.\n\n   c. All values are ``.strip()``\\ ped.\n\n3. Use the first-detected value for each ID.  Thus, earlier items in\n   the search path take precedence over later ones.\n\n\nYAML reminder::\n\n  ID1: this is the text for replacement id = ID1\n  ID2: |\n      This is a block text that preserves newlines.\n\n      The \"|\" character is what indicates that newlines should be\n      preserved.\n  ID3: >\n      Using the \">\" character removes all newlines and runs the block\n      text together.\n\n\nInstallation\n------------\nInstall the extension.  Currently not in any package managers, so::\n\n    pip install\n\nAdd the extension to your Sphinx ``conf.py`` file::\n\n    extensions = [\n        'sphinx_ext_substitution'\n    ]\n\nThere are no non-trivial dependencies besides PyYAML (which is listed\nas a dependency, but if you don't use the YAML feature it isn't\nneeded).  Sphinx and Docutils are obviously required - our goal is to\nsupport any reasonable version.\n\n\n\nConfiguration\n-------------\n\nCurrently there are two Sphinx variables defined:\n\n* ``substitute_mode``: One of ``replace`` (the default), ``original``,\n  or ``both``.  See above for the meaning of these values.\n\n* ``substitute_path`` is a path to search for replacement variables,\n  keyed by ID.  In Sphinx, this is a list of paths, but if given on\n  command with ``-D substitute_path=dir1:dir2``, you can\n  colon-separate paths as well.  Each file on this path that ends in\n  ``.rst`` or ``.yaml`` is searched for variables.  The default is\n  ``.``.\n\n* The environment variable ``SPHINX_EXT_SUBSTITUTION_PATH`` is used\n  *before* the ``substitute_path`` configuration option.  Both are\n  used if both are given (the env var takes precedence).  There is no\n  need for both, but it provides more flexible configuration for\n  integration to your build system.\n\n\n\nDevelopment and maintenance\n---------------------------\n\nMost functonality exists and this is now usable, but not extensively\nused yet.  Please send any changes or requests to us.  This was\ndeveloped as a first non-trivial Sphinx extension, so any refactorings\nto make things better are welcome.\n\nPrimary maintainer: Richard Darst, Aalto University.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NordicHPC/sphinx_ext_substitution", "keywords": "sphinx-extension", "license": "", "maintainer": "", "maintainer_email": "", "name": "sphinx-ext-substitution", "package_url": "https://pypi.org/project/sphinx-ext-substitution/", "platform": "", "project_url": "https://pypi.org/project/sphinx-ext-substitution/", "project_urls": {"Homepage": "https://github.com/NordicHPC/sphinx_ext_substitution"}, "release_url": "https://pypi.org/project/sphinx-ext-substitution/0.1.1/", "requires_dist": ["Sphinx", "docutils (<0.15)", "PyYAML"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*,", "summary": "Sphinx extension for substituting variables", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a> (and <a href=\"http://docutils.sourceforge.net/\" rel=\"nofollow\">Docutils</a>) provide a way to template\nvariables into your documentation, but it can be kind of limited.\nThis Sphinx extension provides a powerful way to manage a master set\nof documentation with local-specific variations.  <strong>Logical\nmanagement</strong> is a key design consideration: it\u2019s easy to make some\nvariable substitutions, but harder to keep them up to date when you\nmake a long-running fork!</p>\n<p>Features include:</p>\n<ul>\n<li>Default values can also be included inline and replaced only if a\nreplacement value is defined.</li>\n<li>Search paths for variable replacements: hierarchical variable\nsubstitutions, group and then local customizations supported.</li>\n<li>Multiple compilation mode: original, with substitutions, or both.\nIn the \u201cboth\u201d mode, both the original and substituted are shown with\nhighlighting, so that you can easily compare the current original\nvalues with your current substitute values.</li>\n<li>Both role (inline) and directive (paragraph level) support.</li>\n</ul>\n<div id=\"usage-examples\">\n<h2>Usage examples</h2>\n<p>As a role:</p>\n<pre>SSH to :sub:`(hostname) triton.aalto.fi`\n</pre>\n<p>We see the ReST role is named <tt>sub</tt> (which conflicts with\n\u201csubscript\u201d, maybe we should change that) and an ID of <tt>hostname</tt>.\nIf there is a file called <tt>hostname.rst</tt> in the search path or a\nfile with a <tt>.yaml</tt> extension with a <tt>hostname</tt> key in the search\npath, it will substitute that value into this place.  If this value\ndoesn\u2019t exist, it will use the original (or remove it if the original\nis empty).</p>\n<p>As a directive:</p>\n<pre>.. sub:: ssh_clarification\n</pre>\n<p>This directive works analogously to the role, with an ID of\n<tt>ssh_clarification</tt>.  There is no default content in this example,\nwhich means that nothing is inserted unless a replacement is defined ,\nso in this case when used without content it can be used to add in an\nextra content in just some versions.  (There could be default content,\ntoo.)  If the directive had content, then it would work the same as\nthe first example.</p>\n<p>As a reminder, in Docutils/Sphinx, a role is inline text and a\ndirective is a paragraph-level structure.</p>\n<p>There are three run modes, controlled by the <tt>substitution_mode</tt>\nconfiguration option:</p>\n<ul>\n<li><tt>replace</tt>: Use the replacements if defined or else the original,\nwith no special markup.  This is the default mode and does what you\nexpect for normal use.</li>\n<li><tt>both</tt>: Show <em>both</em> the ID, original value, and the replacement\nvalue with distinguishing markup (HTML only).  This can be used to\ncompare your local version with the latest upstream. to see what\nneeds to be updated - or what substitutions are available and should\nbe used.</li>\n<li><tt>original</tt>: Show only the original text without any replacements.</li>\n</ul>\n<p>Finally, there is a <tt><span class=\"pre\">sub-list</span></tt> directive:</p>\n<pre>.. sub-list::\n</pre>\n<p>This directive is replaced with a table that contains all substitution\nIDs, original values, and replacements that have been used in the\ndocument.</p>\n<p>When searching for replacement values:</p>\n<ol>\n<li>First, each item in the search path (configuration option\n<tt>substitute_path</tt>) is searched.<ol>\n<li>If it\u2019s a file, load it as YAML (see below)</li>\n<li>If it\u2019s a directory, go to step 2.</li>\n</ol>\n</li>\n<li>List the directory and search for files to load.<ol>\n<li>First, load all <tt>*.rst</tt> files.  The <tt>*</tt> value is used as the\nreplacement ID.</li>\n<li>Second, search for all <tt>*.yaml</tt> files.  Load them as YAML\ndata, which should be a mapping from keys to values.</li>\n<li>All values are <tt>.strip()</tt>ped.</li>\n</ol>\n</li>\n<li>Use the first-detected value for each ID.  Thus, earlier items in\nthe search path take precedence over later ones.</li>\n</ol>\n<p>YAML reminder:</p>\n<pre>ID1: this is the text for replacement id = ID1\nID2: |\n    This is a block text that preserves newlines.\n\n    The \"|\" character is what indicates that newlines should be\n    preserved.\nID3: &gt;\n    Using the \"&gt;\" character removes all newlines and runs the block\n    text together.\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the extension.  Currently not in any package managers, so:</p>\n<pre>pip install\n</pre>\n<p>Add the extension to your Sphinx <tt>conf.py</tt> file:</p>\n<pre>extensions = [\n    'sphinx_ext_substitution'\n]\n</pre>\n<p>There are no non-trivial dependencies besides PyYAML (which is listed\nas a dependency, but if you don\u2019t use the YAML feature it isn\u2019t\nneeded).  Sphinx and Docutils are obviously required - our goal is to\nsupport any reasonable version.</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Currently there are two Sphinx variables defined:</p>\n<ul>\n<li><tt>substitute_mode</tt>: One of <tt>replace</tt> (the default), <tt>original</tt>,\nor <tt>both</tt>.  See above for the meaning of these values.</li>\n<li><tt>substitute_path</tt> is a path to search for replacement variables,\nkeyed by ID.  In Sphinx, this is a list of paths, but if given on\ncommand with <tt><span class=\"pre\">-D</span> substitute_path=dir1:dir2</tt>, you can\ncolon-separate paths as well.  Each file on this path that ends in\n<tt>.rst</tt> or <tt>.yaml</tt> is searched for variables.  The default is\n<tt>.</tt>.</li>\n<li>The environment variable <tt>SPHINX_EXT_SUBSTITUTION_PATH</tt> is used\n<em>before</em> the <tt>substitute_path</tt> configuration option.  Both are\nused if both are given (the env var takes precedence).  There is no\nneed for both, but it provides more flexible configuration for\nintegration to your build system.</li>\n</ul>\n</div>\n<div id=\"development-and-maintenance\">\n<h2>Development and maintenance</h2>\n<p>Most functonality exists and this is now usable, but not extensively\nused yet.  Please send any changes or requests to us.  This was\ndeveloped as a first non-trivial Sphinx extension, so any refactorings\nto make things better are welcome.</p>\n<p>Primary maintainer: Richard Darst, Aalto University.</p>\n</div>\n\n          </div>"}, "last_serial": 6785364, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "67dfe9ff3605ffae6a3873af0aa1a7aa", "sha256": "bbf31a09bf2b48c2e409fa6e646f4146721e7b074872213f7e44d77054782c08"}, "downloads": -1, "filename": "sphinx_ext_substitution-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "67dfe9ff3605ffae6a3873af0aa1a7aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*,", "size": 11439, "upload_time": "2020-03-10T10:38:48", "upload_time_iso_8601": "2020-03-10T10:38:48.367566Z", "url": "https://files.pythonhosted.org/packages/5a/52/f58adc6300bf8008d695939ab77b0185640b34aeae699e8945265e4745cf/sphinx_ext_substitution-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fea1cd448f7e23bd61c06e2600a5941", "sha256": "23f8dace4fdf0722c1829b13e1c4212e4fca26658be000e0d463df4cb3639897"}, "downloads": -1, "filename": "sphinx_ext_substitution-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0fea1cd448f7e23bd61c06e2600a5941", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*,", "size": 9348, "upload_time": "2020-03-10T10:38:51", "upload_time_iso_8601": "2020-03-10T10:38:51.138429Z", "url": "https://files.pythonhosted.org/packages/c4/17/b9147807ac6f4d2c39e1f059c20dad2123e6c0d5317c7984a4337baa30b8/sphinx_ext_substitution-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b48b90bd8d8c63de4e313f343986e863", "sha256": "a388d6636f906ebd85d50716c29d75d6392b4aa7d5e75ddc71cd64c760a85ba3"}, "downloads": -1, "filename": "sphinx_ext_substitution-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b48b90bd8d8c63de4e313f343986e863", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*,", "size": 11464, "upload_time": "2020-03-10T14:26:53", "upload_time_iso_8601": "2020-03-10T14:26:53.562539Z", "url": "https://files.pythonhosted.org/packages/f6/25/6f751e47aba0ee492aa9888622c4e66eebf0700e0630817db9055ae97a94/sphinx_ext_substitution-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1826d9d7eec1467205ba41f9edcb110b", "sha256": "1746f6f7d1a0518bb2cceb55999fe5eb63ea9f777dc4f28e57cf9130a459631d"}, "downloads": -1, "filename": "sphinx_ext_substitution-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1826d9d7eec1467205ba41f9edcb110b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*,", "size": 9417, "upload_time": "2020-03-10T14:26:55", "upload_time_iso_8601": "2020-03-10T14:26:55.936740Z", "url": "https://files.pythonhosted.org/packages/de/7f/ff6bbad590920d53c25a36bf84c67d316e5463037eaaedba2fd1d895afc7/sphinx_ext_substitution-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b48b90bd8d8c63de4e313f343986e863", "sha256": "a388d6636f906ebd85d50716c29d75d6392b4aa7d5e75ddc71cd64c760a85ba3"}, "downloads": -1, "filename": "sphinx_ext_substitution-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b48b90bd8d8c63de4e313f343986e863", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*,", "size": 11464, "upload_time": "2020-03-10T14:26:53", "upload_time_iso_8601": "2020-03-10T14:26:53.562539Z", "url": "https://files.pythonhosted.org/packages/f6/25/6f751e47aba0ee492aa9888622c4e66eebf0700e0630817db9055ae97a94/sphinx_ext_substitution-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1826d9d7eec1467205ba41f9edcb110b", "sha256": "1746f6f7d1a0518bb2cceb55999fe5eb63ea9f777dc4f28e57cf9130a459631d"}, "downloads": -1, "filename": "sphinx_ext_substitution-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1826d9d7eec1467205ba41f9edcb110b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*,", "size": 9417, "upload_time": "2020-03-10T14:26:55", "upload_time_iso_8601": "2020-03-10T14:26:55.936740Z", "url": "https://files.pythonhosted.org/packages/de/7f/ff6bbad590920d53c25a36bf84c67d316e5463037eaaedba2fd1d895afc7/sphinx_ext_substitution-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:07 2020"}