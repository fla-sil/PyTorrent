{"info": {"author": "Izhar Firdaus", "author_email": "izhar@inigo-tech.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "Introduction\n============\n\nThis product provides URL routing capability to Plone content. Powered by the \nawesome traject library by Martijn Faassen and based on a similar library called\nmegrok.traject.\n\nNote: this is still a proof of concept, need more testing. \n\nWhat It Does\n=============\n\nBasically, this project allow your content to be a routing based app. For example,\nwith this product, you can have something like:\n\n* site/folder/myApp - a traject enabled content, resolved through graph \n  traversal\n* site/folder/myApp/models/1 - returns a SQLalchemy model object, resolved \n  through url routing\n\nEnabling routing for content type\n==================================\n\nHook this into ZCML::\n\n    <adapter factory=\"collective.trajectory.components.Traverser\"\n           for=\"myproduct.content.mycontent.MyContent\n                 zope.publisher.interfaces.IRequest\"/>\n\nwhere `myproduct.content.mycontent.MyContent` is the class of the content\ntype which will be the root of the URL routing.\n\nRegistering route patterns\n===========================\n\nRegistering patterns is pretty much like how its supposed to be done in\nnormal traject. However, the model class will need to be inherited from\n`collective.trajectory.components.Model`\n\n    from collective.trajectory.components import Model\n    from myproduct.content.mycontent import MyContent\n    import traject\n\n    class MyModel(Model):\n        def __init__(self, item_id):\n            self.item_id = item_id\n\n    def factory(item_id):\n        return MyModel(item_id)\n\n    def arguments(obj):\n        return {\n            'item_id': obj.item_id\n        }\n\n    pattern = u'models/:item_id'\n    traject.register(MyContent, pattern, factory)\n    traject.register_inverse(MyContent, MyModel, pattern, arguments)\n\n\nAdditional Info\n================\n\n* The returned models acquire attributess from your MyApp object through \n  Acquisition, so that templates behave as it should, and portal tools \n  available through current context.\n* Views are simply the standard plone browserviews, nothing fancy.\n\nChangelog\n=========\n\n0.1 (2011-10-03)\n----------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/collective.trajectory", "keywords": "traject plone routing", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.trajectory", "package_url": "https://pypi.org/project/collective.trajectory/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.trajectory/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/collective.trajectory"}, "release_url": "https://pypi.org/project/collective.trajectory/0.1/", "requires_dist": null, "requires_python": null, "summary": "Traject integration in Plone", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Introduction<br>============<br><br>This product provides URL routing capability to Plone content. Powered by the <br>awesome traject library by Martijn Faassen and based on a similar library called<br>megrok.traject.<br><br>Note: this is still a proof of concept, need more testing. <br><br>What It Does<br>=============<br><br>Basically, this project allow your content to be a routing based app. For example,<br>with this product, you can have something like:<br><br>* site/folder/myApp - a traject enabled content, resolved through graph <br>  traversal<br>* site/folder/myApp/models/1 - returns a SQLalchemy model object, resolved <br>  through url routing<br><br>Enabling routing for content type<br>==================================<br><br>Hook this into ZCML::<br><br>    &lt;adapter factory=\"collective.trajectory.components.Traverser\"<br>           for=\"myproduct.content.mycontent.MyContent<br>                 zope.publisher.interfaces.IRequest\"/&gt;<br><br>where `myproduct.content.mycontent.MyContent` is the class of the content<br>type which will be the root of the URL routing.<br><br>Registering route patterns<br>===========================<br><br>Registering patterns is pretty much like how its supposed to be done in<br>normal traject. However, the model class will need to be inherited from<br>`collective.trajectory.components.Model`<br><br>    from collective.trajectory.components import Model<br>    from myproduct.content.mycontent import MyContent<br>    import traject<br><br>    class MyModel(Model):<br>        def __init__(self, item_id):<br>            self.item_id = item_id<br><br>    def factory(item_id):<br>        return MyModel(item_id)<br><br>    def arguments(obj):<br>        return {<br>            'item_id': obj.item_id<br>        }<br><br>    pattern = u'models/:item_id'<br>    traject.register(MyContent, pattern, factory)<br>    traject.register_inverse(MyContent, MyModel, pattern, arguments)<br><br><br>Additional Info<br>================<br><br>* The returned models acquire attributess from your MyApp object through <br>  Acquisition, so that templates behave as it should, and portal tools <br>  available through current context.<br>* Views are simply the standard plone browserviews, nothing fancy.<br><br>Changelog<br>=========<br><br>0.1 (2011-10-03)<br>----------------<br><br>- Initial release\n          </div>"}, "last_serial": 788241, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "be7e229f90ec356dc9ff70454298da86", "sha256": "bf1dc97cf22347e556b33c99e125ebd7a044fd5b31ff78562593ac678ffbdc95"}, "downloads": -1, "filename": "collective.trajectory-0.1.tar.gz", "has_sig": false, "md5_digest": "be7e229f90ec356dc9ff70454298da86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7582, "upload_time": "2011-10-03T18:00:20", "upload_time_iso_8601": "2011-10-03T18:00:20.930992Z", "url": "https://files.pythonhosted.org/packages/32/d0/1591c3b00a00efed120a9f0a23151bd0e317c445fec2fbb52709815e8ca0/collective.trajectory-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be7e229f90ec356dc9ff70454298da86", "sha256": "bf1dc97cf22347e556b33c99e125ebd7a044fd5b31ff78562593ac678ffbdc95"}, "downloads": -1, "filename": "collective.trajectory-0.1.tar.gz", "has_sig": false, "md5_digest": "be7e229f90ec356dc9ff70454298da86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7582, "upload_time": "2011-10-03T18:00:20", "upload_time_iso_8601": "2011-10-03T18:00:20.930992Z", "url": "https://files.pythonhosted.org/packages/32/d0/1591c3b00a00efed120a9f0a23151bd0e317c445fec2fbb52709815e8ca0/collective.trajectory-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:45 2020"}