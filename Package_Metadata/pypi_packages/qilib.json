{"info": {"author": "QuantumInspire", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "[![Coverage Status](https://coveralls.io/repos/github/QuTech-Delft/qilib/badge.svg?branch=dev)](https://coveralls.io/github/QuTech-Delft/qilib?branch=dev)\n\n# QILib\n\nQuantum Library for the Quantum Inspire platform\n\n## Installation\n\nThe Quantum Inspire Library can be installed from PyPI via pip:\n\n```\n$ pip install qilib\n```\n\n### Installing from source\nClone the qilib repository from https://github.com/QuTech-Delft/qilib and install using pip:\n```\n$ git clone git@github.com:QuTech-Delft/qilib.git\n$ cd qilib\n$ python3 -m venv env\n$ . ./env/bin/activate\n(env) $ pip install .\n```\n\nFor development install in editable mode:\n```\n(env) $ pip install -e .[dev]\n```\n\n### Install Mongo database\nTo use the MongoDataSetIOReader and MongoDataSetIOWriter a mongodb needs to be installed.\nFor Windows, Linux or OS X follow the instructions [here](https://docs.mongodb.com/v3.2/administration/install-community/)\non how to install the database.\n\nAfter installing the database it has to be configured as [replica set](https://docs.mongodb.com/manual/replication/) by\ntyping:\n```\nmongod --replSet \"rs0\"\n```\nand from within the mongo shell initiate with:\n```\nrs.initiate()\n```\n\n## Testing\n\nRun all unittests and collect the code coverage:\n```\n(env) $ coverage run --source=\"./src/qilib\" -m unittest discover -s src/tests -t src\n(env) $ coverage report -m\n```\n###Type Checking\nFor static type checking, mypy can be used\n```\n(env) mypy --strict --ignore-missing-imports --allow-untyped-calls -p qilib\n```\n\n## Data set\nThe three main building blocks of the qilib data set are a DataArray, DataSet and a DataSetIO that provides a\nstorage backend for the DataSet.  \n\n### DataArray\nA DataArray is a wrapper around a numpy array and can be used as one. A data array can also have another, or multiple,\ndata arrays as setpoints. For example, in a 2D-scan, there will be a 1D DataArray for the x-axis variable specifying a discrete set of setpoints\nfor that variable, a 2D DataArray for the y-axis variable using the x-axis DataArray as its values and a 2D DataArray\nfor the measured value.\n\nThe DataArray constructor accepts either:\n+ pre-defined data (numpy arrays)\n+ array shapes (tuple)\n\nThe DataArray makes sure that the dimensions of the set arrays are correct with regards to the data array and vice\nversa. That means, e.g., trying to set a 1D array of 10 elements as the data array with a 1D setpoint array of 8\nelements will raise an error.\n\nAn example of a 2D measurement array, **z**, that is defined by the main setpoint array **x** and secondary setpoint\narray **y**:\n\n```\nimport numpy as np\nfrom qilib.data_set import DataArray\n\nx_size = 10\ny_size = 5\nx_points = np.array(range(x_size))\ny_points = np.tile(np.array(range(y_size)), [x_size, 1])\nx = DataArray(name=\"x\", label=\"x-axis\", unit=\"mV\", is_setpoint=True, preset_data=x_points)\ny = DataArray(name=\"y\", label=\"y-axis\", unit=\"mV\", is_setpoint=True, preset_data=y_points)\nz = DataArray(name=\"z\", label=\"z-axis\", unit=\"ma\", set_arrays=(x,y), shape=(x_size, y_size))\n\n```\n\n### DataSet\nA DataSet object encompasses DataArrays. A DataSet can have multiple measurement arrays sharing the same setpoints.\nIt is an error to have multiple measurement arrays with different setpoints in one DataSet.\n\nA DataSet can be incrementally updated with the `add_data()` method, which takes an index specification, a reference to\nthe array that is to be updated and the update data: `index, {array_name: update_data}}`. In case of multi dimensional\narrays whole rows, or rows of rows, can be updated together. For example:\n```\n# this sets a single element at the 3rd setpoint along the x-axis, 4th along the y-axis\ndataset.add_data((2,3), {'z': 0.23})\n\n# given that dataset is a 10 x 3 2D dataset:\n# this sets the entire y-axis data at the 5th setpoint along the x-axis\n# ie. the data specifies a value for each of the setpoints along the y-axis\ndataset.add_data(4, {'z': [0.23, 2.6, 0.42]})\n```\n\nDataSet specifications:\n+ The constructor may accept DataArrays for setpoints and data arrays. Multiple measurement arrays may be specified as\na sequence.\n+ The DataSet will raise errors on mismatches in array dimensions.\n+ The DataSet will only accept an array if its name does not equal that of any array already in the DataSet.\n+ Arrays can be read by the public property .data_arrays (a dict, key is the DataArray name, value the DataArray).\nIn addition, DataArrays are accessible as properties on the DataSet object (for example, an array with name 'x' added\nto a DataSet data_set can be access as data_set.x).\n+ Updates made to the DataSet will be sent to the underlying DataSetIOWriter if available.\n+ A DataSet can have one, or more, DataSetIOWriters.\n+ A DataSet can be instantiated with one DataSetIOReader but not both a DataSetIOWriter and a DataSetIOReader.\n\n### DataSetIOWriter\nA DataSet can be instantiated with a DataSetIOWriter that provides a storage backend. All changes made on the DataSet\nare pushed to the storage. There are two DataSetIOWriter implementation available, MemoryDataSetIOWriter and\nMongoDataSetIOWriter.\n\n#### MemoryDataSetIOWriter\nProvides an in-memory storage backend that can be used for live plotting of a measurement. All data is kept in memory\nand not stored on disc or in database. MemoryDataSetIOWriter should not be instantiated directly but created, along with\na MemoryDataSetIOReader, using the MemoryDataSetIOFactory. The Reader and Writer share a storage queue used to pass\nupdates from one DataSet to another.\n```\nio_reader, io_writer = MemoryDataSetIOFactory.get_reader_writer_pair()\ndata_set_consumer = DataSet(storage_reader=io_reader)\ndata_set_producer = DataSet(storage_writer=io_writer)\n```\n\n#### MongoDataSetIOWriter\nProvides a connection to a mongo database that needs to be pre-installed. All updates to a DataSet are stored in the\nmongodb database as events that are collapsed, to represent the complete DataSet, when the `finalize()` method is called\non the DataSet. Data can not be written to the database on a finalized DataSet.\n```\ndata_set_name = 'experiment_42'\nwriter = MongoDataSetIOWriter(name=data_set_name)\ndata_set = DataSet(storage_writer=writer, name=data_set_name)\n```\n\n### DataSetIOReader\nClasses that implement the DataSetIOReader interface allow a DataSet to subscribe to data, and data changes, in an\nunderlying storage. To sync from storage the `sync_from_storage(timeout)` method on a DataSet has to be called. There\nare two implementations of the DataSetIOReader, the MemoryDataSetIOReader and MongoDataSetIOReader.\n\n#### MemoryDataSetIOReader\nProvides a way to subscribe to data that is put on a storage queue by a paired MemoryDataSetIOWriter created by the\nMemoryDataSetIOFactory.\n\n#### MongoDataSetIOReader\nThe MongoDataSetIOReader creates a connection to a mongodb and subscribes to changes in the underlying document. To\nupdate a DataSet that has been instantiated with a MongoDataSetIOReader a call on the DataSet's `sync_from_storage(timeout)`\nmethod has to be made. To load a DataSet from the underlying mongodb a static method `load(name, document_id)` can be\ncalled with either the DataSet name or _id or both.\n\nIn the example below, a DataSet is instantiated with MongoDataSetIOReader, synced from storage and the data plotted:\n```\nconsumer_dataset = MongoDataSetIOReader.load(name='experiment_42')\nconsumer_dataset.sync_from_storage(-1)\nplot(consumer_dataset)\n\n```\n\n## Examples\n#### Plot and measure with MemoryDataSetIO\nIn this example a MemoryDataSetIOWriter and MemoryDataSetIOReader pair is created using the MemoryDataSetIOFactory.\nFake measuremet is run on separate thread, feeding fake measurement data to in-memory storage that the consumer data set\nsyncs from with the `sync_from_storage(timeout)` method.\n```python\nimport random\nimport threading\nimport time\n\nimport matplotlib.pyplot as plt\n\nfrom qilib.data_set import DataSet, DataArray\nfrom qilib.data_set.memory_data_set_io_factory import MemoryDataSetIOFactory\n\nx_dim = 100\ny_dim = 100\nstop_measuring = False\n\nio_reader, io_writer = MemoryDataSetIOFactory.get_reader_writer_pair()\ndata_set_consumer = DataSet(storage_reader=io_reader)\nsome_array = DataArray('some_array', 'label', shape=(x_dim, y_dim))\ndata_set_producer = DataSet(storage_writer=io_writer, data_arrays=some_array)\n\nplt.ion()\n\ndef plot_measured_data():\n    fig, ax = plt.subplots()\n    for i in range(20):\n        data_set_consumer.sync_from_storage(-1)\n        ax.imshow(data_set_consumer.some_array, cmap='hot', interpolation='nearest')\n        fig.canvas.draw()\n    return True\n\n\ndef measure_data():\n    while not stop_measuring:\n        for i in range(x_dim):\n            line = [i + j * random.random() for j in range(y_dim)]\n            data_set_producer.add_data(i, {'some_array': line})\n            time.sleep(0.02)\n\n\nmeasure_thread = threading.Thread(target=measure_data)\nmeasure_thread.start()\nstop_measuring = plot_measured_data()\nmeasure_thread.join()\n```\n#### Plot and measure with MongoDataSetIO\nIn this example one script creates a new DataSet with MongoDataSetIOWriter that stores a copy of the data set in a\nunderlying mongodb which needs to be pre-installed as described above. By instantiating the DataSet with a\nMongoDataSetWriter all updates and additions to the DataSet are reflected in the database. To fetch the data set from\nthe database the static method `load(name, document_id)` provided in MongoDataSetIOReader is used. The method returns a\nnew DataSet object that subscribes to all changes in the underlying data set and can be updated with the\n`sync_from_storage` method.\n\nIn one console run script __A__ and __B__ in another one. Make sure start script __A__ before __B__ as the former\ncreates the data set in the database that the latter attempts to load.\n\n##### A\n```python\nimport random\nfrom time import sleep\n\nimport numpy as np\n\nfrom qilib.data_set import DataSet, DataArray, MongoDataSetIOWriter\n\nx_dim = 100\ny_dim = 100\n\nmeasurements = DataArray(name=\"measurements\", label=\"a-data\", unit=\"ma\",\n                         preset_data=np.NaN * np.ones((x_dim, y_dim)))\n\n\nwriter = MongoDataSetIOWriter(name='experiment_42')\n\ndata_set = DataSet(storage_writer=writer, name='experiment_42', data_arrays=measurements)\n\nfor i in range(x_dim):\n    line = [i + j * random.random() for j in range(y_dim)]\n    data_set.add_data(i, {'measurements': line})\n    sleep(0.5)\n\ndata_set.finalize()\n```\n\n##### B\n```python\nimport matplotlib.pyplot as plt\n\nfrom qilib.data_set import MongoDataSetIOReader\n\n\nplt.ion()\n\nconsumer_data_set = MongoDataSetIOReader.load(name='experiment_42')\n\nfig, ax = plt.subplots()\n\nwhile not consumer_data_set.is_finalized:\n    consumer_data_set.sync_from_storage(0)\n    ax.imshow(consumer_data_set.measurements, cmap='hot', interpolation='nearest')\n    fig.canvas.draw()\n\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Other/Proprietary License", "maintainer": "", "maintainer_email": "", "name": "qilib", "package_url": "https://pypi.org/project/qilib/", "platform": "", "project_url": "https://pypi.org/project/qilib/", "project_urls": null, "release_url": "https://pypi.org/project/qilib/0.3.7/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Quantum Library for the Quantum Inspire platform", "version": "0.3.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://coveralls.io/github/QuTech-Delft/qilib?branch=dev\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf629e18cee1ae13a1fc17c4bdefbeac6b2ce7fe/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5175546563682d44656c66742f71696c69622f62616467652e7376673f6272616e63683d646576\"></a></p>\n<h1>QILib</h1>\n<p>Quantum Library for the Quantum Inspire platform</p>\n<h2>Installation</h2>\n<p>The Quantum Inspire Library can be installed from PyPI via pip:</p>\n<pre><code>$ pip install qilib\n</code></pre>\n<h3>Installing from source</h3>\n<p>Clone the qilib repository from <a href=\"https://github.com/QuTech-Delft/qilib\" rel=\"nofollow\">https://github.com/QuTech-Delft/qilib</a> and install using pip:</p>\n<pre><code>$ git clone git@github.com:QuTech-Delft/qilib.git\n$ cd qilib\n$ python3 -m venv env\n$ . ./env/bin/activate\n(env) $ pip install .\n</code></pre>\n<p>For development install in editable mode:</p>\n<pre><code>(env) $ pip install -e .[dev]\n</code></pre>\n<h3>Install Mongo database</h3>\n<p>To use the MongoDataSetIOReader and MongoDataSetIOWriter a mongodb needs to be installed.\nFor Windows, Linux or OS X follow the instructions <a href=\"https://docs.mongodb.com/v3.2/administration/install-community/\" rel=\"nofollow\">here</a>\non how to install the database.</p>\n<p>After installing the database it has to be configured as <a href=\"https://docs.mongodb.com/manual/replication/\" rel=\"nofollow\">replica set</a> by\ntyping:</p>\n<pre><code>mongod --replSet \"rs0\"\n</code></pre>\n<p>and from within the mongo shell initiate with:</p>\n<pre><code>rs.initiate()\n</code></pre>\n<h2>Testing</h2>\n<p>Run all unittests and collect the code coverage:</p>\n<pre><code>(env) $ coverage run --source=\"./src/qilib\" -m unittest discover -s src/tests -t src\n(env) $ coverage report -m\n</code></pre>\n<p>###Type Checking\nFor static type checking, mypy can be used</p>\n<pre><code>(env) mypy --strict --ignore-missing-imports --allow-untyped-calls -p qilib\n</code></pre>\n<h2>Data set</h2>\n<p>The three main building blocks of the qilib data set are a DataArray, DataSet and a DataSetIO that provides a\nstorage backend for the DataSet.</p>\n<h3>DataArray</h3>\n<p>A DataArray is a wrapper around a numpy array and can be used as one. A data array can also have another, or multiple,\ndata arrays as setpoints. For example, in a 2D-scan, there will be a 1D DataArray for the x-axis variable specifying a discrete set of setpoints\nfor that variable, a 2D DataArray for the y-axis variable using the x-axis DataArray as its values and a 2D DataArray\nfor the measured value.</p>\n<p>The DataArray constructor accepts either:</p>\n<ul>\n<li>pre-defined data (numpy arrays)</li>\n<li>array shapes (tuple)</li>\n</ul>\n<p>The DataArray makes sure that the dimensions of the set arrays are correct with regards to the data array and vice\nversa. That means, e.g., trying to set a 1D array of 10 elements as the data array with a 1D setpoint array of 8\nelements will raise an error.</p>\n<p>An example of a 2D measurement array, <strong>z</strong>, that is defined by the main setpoint array <strong>x</strong> and secondary setpoint\narray <strong>y</strong>:</p>\n<pre><code>import numpy as np\nfrom qilib.data_set import DataArray\n\nx_size = 10\ny_size = 5\nx_points = np.array(range(x_size))\ny_points = np.tile(np.array(range(y_size)), [x_size, 1])\nx = DataArray(name=\"x\", label=\"x-axis\", unit=\"mV\", is_setpoint=True, preset_data=x_points)\ny = DataArray(name=\"y\", label=\"y-axis\", unit=\"mV\", is_setpoint=True, preset_data=y_points)\nz = DataArray(name=\"z\", label=\"z-axis\", unit=\"ma\", set_arrays=(x,y), shape=(x_size, y_size))\n\n</code></pre>\n<h3>DataSet</h3>\n<p>A DataSet object encompasses DataArrays. A DataSet can have multiple measurement arrays sharing the same setpoints.\nIt is an error to have multiple measurement arrays with different setpoints in one DataSet.</p>\n<p>A DataSet can be incrementally updated with the <code>add_data()</code> method, which takes an index specification, a reference to\nthe array that is to be updated and the update data: <code>index, {array_name: update_data}}</code>. In case of multi dimensional\narrays whole rows, or rows of rows, can be updated together. For example:</p>\n<pre><code># this sets a single element at the 3rd setpoint along the x-axis, 4th along the y-axis\ndataset.add_data((2,3), {'z': 0.23})\n\n# given that dataset is a 10 x 3 2D dataset:\n# this sets the entire y-axis data at the 5th setpoint along the x-axis\n# ie. the data specifies a value for each of the setpoints along the y-axis\ndataset.add_data(4, {'z': [0.23, 2.6, 0.42]})\n</code></pre>\n<p>DataSet specifications:</p>\n<ul>\n<li>The constructor may accept DataArrays for setpoints and data arrays. Multiple measurement arrays may be specified as\na sequence.</li>\n<li>The DataSet will raise errors on mismatches in array dimensions.</li>\n<li>The DataSet will only accept an array if its name does not equal that of any array already in the DataSet.</li>\n<li>Arrays can be read by the public property .data_arrays (a dict, key is the DataArray name, value the DataArray).\nIn addition, DataArrays are accessible as properties on the DataSet object (for example, an array with name 'x' added\nto a DataSet data_set can be access as data_set.x).</li>\n<li>Updates made to the DataSet will be sent to the underlying DataSetIOWriter if available.</li>\n<li>A DataSet can have one, or more, DataSetIOWriters.</li>\n<li>A DataSet can be instantiated with one DataSetIOReader but not both a DataSetIOWriter and a DataSetIOReader.</li>\n</ul>\n<h3>DataSetIOWriter</h3>\n<p>A DataSet can be instantiated with a DataSetIOWriter that provides a storage backend. All changes made on the DataSet\nare pushed to the storage. There are two DataSetIOWriter implementation available, MemoryDataSetIOWriter and\nMongoDataSetIOWriter.</p>\n<h4>MemoryDataSetIOWriter</h4>\n<p>Provides an in-memory storage backend that can be used for live plotting of a measurement. All data is kept in memory\nand not stored on disc or in database. MemoryDataSetIOWriter should not be instantiated directly but created, along with\na MemoryDataSetIOReader, using the MemoryDataSetIOFactory. The Reader and Writer share a storage queue used to pass\nupdates from one DataSet to another.</p>\n<pre><code>io_reader, io_writer = MemoryDataSetIOFactory.get_reader_writer_pair()\ndata_set_consumer = DataSet(storage_reader=io_reader)\ndata_set_producer = DataSet(storage_writer=io_writer)\n</code></pre>\n<h4>MongoDataSetIOWriter</h4>\n<p>Provides a connection to a mongo database that needs to be pre-installed. All updates to a DataSet are stored in the\nmongodb database as events that are collapsed, to represent the complete DataSet, when the <code>finalize()</code> method is called\non the DataSet. Data can not be written to the database on a finalized DataSet.</p>\n<pre><code>data_set_name = 'experiment_42'\nwriter = MongoDataSetIOWriter(name=data_set_name)\ndata_set = DataSet(storage_writer=writer, name=data_set_name)\n</code></pre>\n<h3>DataSetIOReader</h3>\n<p>Classes that implement the DataSetIOReader interface allow a DataSet to subscribe to data, and data changes, in an\nunderlying storage. To sync from storage the <code>sync_from_storage(timeout)</code> method on a DataSet has to be called. There\nare two implementations of the DataSetIOReader, the MemoryDataSetIOReader and MongoDataSetIOReader.</p>\n<h4>MemoryDataSetIOReader</h4>\n<p>Provides a way to subscribe to data that is put on a storage queue by a paired MemoryDataSetIOWriter created by the\nMemoryDataSetIOFactory.</p>\n<h4>MongoDataSetIOReader</h4>\n<p>The MongoDataSetIOReader creates a connection to a mongodb and subscribes to changes in the underlying document. To\nupdate a DataSet that has been instantiated with a MongoDataSetIOReader a call on the DataSet's <code>sync_from_storage(timeout)</code>\nmethod has to be made. To load a DataSet from the underlying mongodb a static method <code>load(name, document_id)</code> can be\ncalled with either the DataSet name or _id or both.</p>\n<p>In the example below, a DataSet is instantiated with MongoDataSetIOReader, synced from storage and the data plotted:</p>\n<pre><code>consumer_dataset = MongoDataSetIOReader.load(name='experiment_42')\nconsumer_dataset.sync_from_storage(-1)\nplot(consumer_dataset)\n\n</code></pre>\n<h2>Examples</h2>\n<h4>Plot and measure with MemoryDataSetIO</h4>\n<p>In this example a MemoryDataSetIOWriter and MemoryDataSetIOReader pair is created using the MemoryDataSetIOFactory.\nFake measuremet is run on separate thread, feeding fake measurement data to in-memory storage that the consumer data set\nsyncs from with the <code>sync_from_storage(timeout)</code> method.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">qilib.data_set</span> <span class=\"kn\">import</span> <span class=\"n\">DataSet</span><span class=\"p\">,</span> <span class=\"n\">DataArray</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qilib.data_set.memory_data_set_io_factory</span> <span class=\"kn\">import</span> <span class=\"n\">MemoryDataSetIOFactory</span>\n\n<span class=\"n\">x_dim</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">y_dim</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">stop_measuring</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">io_reader</span><span class=\"p\">,</span> <span class=\"n\">io_writer</span> <span class=\"o\">=</span> <span class=\"n\">MemoryDataSetIOFactory</span><span class=\"o\">.</span><span class=\"n\">get_reader_writer_pair</span><span class=\"p\">()</span>\n<span class=\"n\">data_set_consumer</span> <span class=\"o\">=</span> <span class=\"n\">DataSet</span><span class=\"p\">(</span><span class=\"n\">storage_reader</span><span class=\"o\">=</span><span class=\"n\">io_reader</span><span class=\"p\">)</span>\n<span class=\"n\">some_array</span> <span class=\"o\">=</span> <span class=\"n\">DataArray</span><span class=\"p\">(</span><span class=\"s1\">'some_array'</span><span class=\"p\">,</span> <span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">x_dim</span><span class=\"p\">,</span> <span class=\"n\">y_dim</span><span class=\"p\">))</span>\n<span class=\"n\">data_set_producer</span> <span class=\"o\">=</span> <span class=\"n\">DataSet</span><span class=\"p\">(</span><span class=\"n\">storage_writer</span><span class=\"o\">=</span><span class=\"n\">io_writer</span><span class=\"p\">,</span> <span class=\"n\">data_arrays</span><span class=\"o\">=</span><span class=\"n\">some_array</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ion</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">plot_measured_data</span><span class=\"p\">():</span>\n    <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n        <span class=\"n\">data_set_consumer</span><span class=\"o\">.</span><span class=\"n\">sync_from_storage</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">data_set_consumer</span><span class=\"o\">.</span><span class=\"n\">some_array</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">'hot'</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'nearest'</span><span class=\"p\">)</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">measure_data</span><span class=\"p\">():</span>\n    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">stop_measuring</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x_dim</span><span class=\"p\">):</span>\n            <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">y_dim</span><span class=\"p\">)]</span>\n            <span class=\"n\">data_set_producer</span><span class=\"o\">.</span><span class=\"n\">add_data</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'some_array'</span><span class=\"p\">:</span> <span class=\"n\">line</span><span class=\"p\">})</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.02</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">measure_thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">measure_data</span><span class=\"p\">)</span>\n<span class=\"n\">measure_thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">stop_measuring</span> <span class=\"o\">=</span> <span class=\"n\">plot_measured_data</span><span class=\"p\">()</span>\n<span class=\"n\">measure_thread</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n</pre>\n<h4>Plot and measure with MongoDataSetIO</h4>\n<p>In this example one script creates a new DataSet with MongoDataSetIOWriter that stores a copy of the data set in a\nunderlying mongodb which needs to be pre-installed as described above. By instantiating the DataSet with a\nMongoDataSetWriter all updates and additions to the DataSet are reflected in the database. To fetch the data set from\nthe database the static method <code>load(name, document_id)</code> provided in MongoDataSetIOReader is used. The method returns a\nnew DataSet object that subscribes to all changes in the underlying data set and can be updated with the\n<code>sync_from_storage</code> method.</p>\n<p>In one console run script <strong>A</strong> and <strong>B</strong> in another one. Make sure start script <strong>A</strong> before <strong>B</strong> as the former\ncreates the data set in the database that the latter attempts to load.</p>\n<h5>A</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">qilib.data_set</span> <span class=\"kn\">import</span> <span class=\"n\">DataSet</span><span class=\"p\">,</span> <span class=\"n\">DataArray</span><span class=\"p\">,</span> <span class=\"n\">MongoDataSetIOWriter</span>\n\n<span class=\"n\">x_dim</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">y_dim</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"n\">measurements</span> <span class=\"o\">=</span> <span class=\"n\">DataArray</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"measurements\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"a-data\"</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">\"ma\"</span><span class=\"p\">,</span>\n                         <span class=\"n\">preset_data</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">NaN</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"n\">x_dim</span><span class=\"p\">,</span> <span class=\"n\">y_dim</span><span class=\"p\">)))</span>\n\n\n<span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">MongoDataSetIOWriter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'experiment_42'</span><span class=\"p\">)</span>\n\n<span class=\"n\">data_set</span> <span class=\"o\">=</span> <span class=\"n\">DataSet</span><span class=\"p\">(</span><span class=\"n\">storage_writer</span><span class=\"o\">=</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'experiment_42'</span><span class=\"p\">,</span> <span class=\"n\">data_arrays</span><span class=\"o\">=</span><span class=\"n\">measurements</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x_dim</span><span class=\"p\">):</span>\n    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">y_dim</span><span class=\"p\">)]</span>\n    <span class=\"n\">data_set</span><span class=\"o\">.</span><span class=\"n\">add_data</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'measurements'</span><span class=\"p\">:</span> <span class=\"n\">line</span><span class=\"p\">})</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">data_set</span><span class=\"o\">.</span><span class=\"n\">finalize</span><span class=\"p\">()</span>\n</pre>\n<h5>B</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">qilib.data_set</span> <span class=\"kn\">import</span> <span class=\"n\">MongoDataSetIOReader</span>\n\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ion</span><span class=\"p\">()</span>\n\n<span class=\"n\">consumer_data_set</span> <span class=\"o\">=</span> <span class=\"n\">MongoDataSetIOReader</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'experiment_42'</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">()</span>\n\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">consumer_data_set</span><span class=\"o\">.</span><span class=\"n\">is_finalized</span><span class=\"p\">:</span>\n    <span class=\"n\">consumer_data_set</span><span class=\"o\">.</span><span class=\"n\">sync_from_storage</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">consumer_data_set</span><span class=\"o\">.</span><span class=\"n\">measurements</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">'hot'</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'nearest'</span><span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6942119, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "9cb4c52b0afeb1bb06d5e0c11a6f5db7", "sha256": "9d68f6c6e93e23bb1e66f907e674ded2a8ec9624bd575f01bab59e7e67e20190"}, "downloads": -1, "filename": "qilib-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9cb4c52b0afeb1bb06d5e0c11a6f5db7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29127, "upload_time": "2019-08-08T13:06:03", "upload_time_iso_8601": "2019-08-08T13:06:03.954791Z", "url": "https://files.pythonhosted.org/packages/9d/6c/15d9e6af22d5b80b7283d2ea68ec7a837d7c896d0b9829fdbb5d63cc6cbc/qilib-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "19fd3231d71ff7164d6b70171121768a", "sha256": "659d862ff3f06a7b9b46ad71fc9fcb48a55a650ebb8287ea361c74660efcd908"}, "downloads": -1, "filename": "qilib-0.2.3.tar.gz", "has_sig": false, "md5_digest": "19fd3231d71ff7164d6b70171121768a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35393, "upload_time": "2019-09-16T11:50:35", "upload_time_iso_8601": "2019-09-16T11:50:35.533758Z", "url": "https://files.pythonhosted.org/packages/da/36/9624460d0b041b00f7e80429d8658be884a104cec0e709cfdc90f293493f/qilib-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "d4e3a9e53be05a9dad4f52d8a3336789", "sha256": "8290e61c997e266ffbafbc097f4257948f7987213dc15d6dbf113d0d99368f01"}, "downloads": -1, "filename": "qilib-0.2.4.tar.gz", "has_sig": false, "md5_digest": "d4e3a9e53be05a9dad4f52d8a3336789", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35388, "upload_time": "2019-09-24T11:56:44", "upload_time_iso_8601": "2019-09-24T11:56:44.473938Z", "url": "https://files.pythonhosted.org/packages/f7/4b/e4f03f55b33d2aaad66b7dce44188ba897d524e2144b34fa3e825f3ea549/qilib-0.2.4.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "d5022ac0c4177e161afa36a9b9e72829", "sha256": "352f243377cb122fa116b454e41c0b3d85c6fab6ea7cbef341aea9e73a8b9630"}, "downloads": -1, "filename": "qilib-0.3.1.tar.gz", "has_sig": false, "md5_digest": "d5022ac0c4177e161afa36a9b9e72829", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31937, "upload_time": "2019-10-10T15:02:44", "upload_time_iso_8601": "2019-10-10T15:02:44.990782Z", "url": "https://files.pythonhosted.org/packages/30/c9/ba1a3e54c12062ebca46324d803183e49b5b21efb1e4e46f8f7f199a72f3/qilib-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "b2800769d1f5aeb29e07b623bf5c9659", "sha256": "b032a6ddb45102d4caa8c654ffa0b88bcbd66c6c69cf2e50b5bce80c659ff942"}, "downloads": -1, "filename": "qilib-0.3.2.tar.gz", "has_sig": false, "md5_digest": "b2800769d1f5aeb29e07b623bf5c9659", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32962, "upload_time": "2019-11-21T12:07:46", "upload_time_iso_8601": "2019-11-21T12:07:46.092876Z", "url": "https://files.pythonhosted.org/packages/4c/2a/b300e6f32c05167714f8a3b1eae870c3161010859b98203502618593e2fe/qilib-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "0dbd2aa83ca434818d64ba3a078d7c46", "sha256": "8730ef025b3120585585c8b26922987b142d68478b41fdf2a4dfe1bda02d97b6"}, "downloads": -1, "filename": "qilib-0.3.3.tar.gz", "has_sig": false, "md5_digest": "0dbd2aa83ca434818d64ba3a078d7c46", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33574, "upload_time": "2019-12-19T10:27:59", "upload_time_iso_8601": "2019-12-19T10:27:59.401780Z", "url": "https://files.pythonhosted.org/packages/0f/f8/4d914b44bd2971bd4660a4214090f407a82e931f7f11f27be11afe16fe4d/qilib-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "f9a2beb28d7ffaf10f115de879d796fa", "sha256": "217fbb010ac0488d8fb924e509a5eefef632557bfa6ea38a1f5a19a990fea88d"}, "downloads": -1, "filename": "qilib-0.3.4.tar.gz", "has_sig": false, "md5_digest": "f9a2beb28d7ffaf10f115de879d796fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37460, "upload_time": "2019-12-20T13:58:27", "upload_time_iso_8601": "2019-12-20T13:58:27.408231Z", "url": "https://files.pythonhosted.org/packages/83/d5/f14639dc2b98b2e184dbb203a97a859f5054ce86028e70fa57d29cea8098/qilib-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "e7d98c2c71bd8e480194d6da48900dc6", "sha256": "5a168de2e21dd9d35c4ffcf5d9d11b10b81fb4e325da67e360b8a9993f4d21fe"}, "downloads": -1, "filename": "qilib-0.3.5.tar.gz", "has_sig": false, "md5_digest": "e7d98c2c71bd8e480194d6da48900dc6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 39013, "upload_time": "2020-02-19T09:31:24", "upload_time_iso_8601": "2020-02-19T09:31:24.459103Z", "url": "https://files.pythonhosted.org/packages/f9/d2/80ffbc61197bc0589546a6d054d1e14f82bb28f2844d671f2680515ab37c/qilib-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "7d5d4817674f930aeb2394129afc3ce9", "sha256": "200533767e061ff182bcf800c9d6b393789a19b6304f2fe8c2c6fd0330e90fa8"}, "downloads": -1, "filename": "qilib-0.3.6.tar.gz", "has_sig": false, "md5_digest": "7d5d4817674f930aeb2394129afc3ce9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34970, "upload_time": "2020-03-03T13:08:04", "upload_time_iso_8601": "2020-03-03T13:08:04.810818Z", "url": "https://files.pythonhosted.org/packages/64/48/3811e7d0587c82fb0a0c0e90a314b8d02882749a2b1d30b72d3583e00d7a/qilib-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "ffd614fd36410c6a143c04e8e7d91825", "sha256": "cfc1fadb6da6be286405681674d6cb9393229317e91acdf4205d17307598946e"}, "downloads": -1, "filename": "qilib-0.3.7.tar.gz", "has_sig": false, "md5_digest": "ffd614fd36410c6a143c04e8e7d91825", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 39292, "upload_time": "2020-04-03T09:15:08", "upload_time_iso_8601": "2020-04-03T09:15:08.443998Z", "url": "https://files.pythonhosted.org/packages/bb/df/65538f69f24053ac9f88ebd6ec19388346a5d947e73f508717e0a6d5345a/qilib-0.3.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ffd614fd36410c6a143c04e8e7d91825", "sha256": "cfc1fadb6da6be286405681674d6cb9393229317e91acdf4205d17307598946e"}, "downloads": -1, "filename": "qilib-0.3.7.tar.gz", "has_sig": false, "md5_digest": "ffd614fd36410c6a143c04e8e7d91825", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 39292, "upload_time": "2020-04-03T09:15:08", "upload_time_iso_8601": "2020-04-03T09:15:08.443998Z", "url": "https://files.pythonhosted.org/packages/bb/df/65538f69f24053ac9f88ebd6ec19388346a5d947e73f508717e0a6d5345a/qilib-0.3.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:35 2020"}