{"info": {"author": "Godson Gera", "author_email": "godson@lintelindia.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Communications", "Topic :: Internet", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "*****\ntxFCM\n*****\n|version| |license|\n\nTwisted Python client for FCM - Firebase Cloud Messaging (Android & iOS)\n\nFirebase Cloud Messaging (FCM) is the new version of GCM. It inherits the reliable and scalable GCM infrastructure, plus new features. GCM users are strongly recommended to upgrade to FCM.\n\nUsing FCM, you can notify a client app that new email or other data is available to sync. You can send notifications to drive user reengagement and retention. For use cases such as instant messaging, a message can transfer a payload of up to 4KB to a client app.\n\nFor more information, visit: https://firebase.google.com/docs/cloud-messaging/\n\n\nLinks\n=====\n\n- Project: https://github.com/linteltechnologies/txfcm\n- PyPi: https://pypi.python.org/pypi/txfcm/\n\n\nQuickstart\n==========\n\nInstall using pip:\n\n\n::\n\n    pip install txfcm\n\n    OR\n\n    pip install git+https://github.com/linteltechnologies/txfcm.git\n\ntxfcm supports Android and iOS.\n\nFeatures\n--------\n\n- All FCM functionality covered\n\n\n\nExamples\n--------\n\nSend notifications using the ``TXFCMNotification`` class:\n\n.. code-block:: python\n\n    # Send to single device.\n    from txfcm import TXFCMNotification\n    from twisted.internet import reactor\n\n    push_service = TXFCMNotification(api_key=\"<api-key>\")\n\n    # Your api-key can be gotten from:  https://console.firebase.google.com/project/<project-name>/settings/cloudmessaging\n\n    registration_id = \"<device registration_id>\"\n    message_title = \"Uber update\"\n    message_body = \"Hi john, your customized news for today is ready\"\n    result = push_service.notify_single_device(registration_id=registration_id, message_title=message_title, message_body=message_body)\n\n    # Send to multiple devices by passing a list of ids.\n    registration_ids = [\"<device registration_id 1>\", \"<device registration_id 2>\", ...]\n    message_title = \"Uber update\"\n    message_body = \"Hope you're having fun this weekend, don't forget to check today's news\"\n    df = push_service.notify_multiple_devices(registration_ids=registration_ids, message_title=message_title, message_body=message_body)\n\n    def got_result(result):\n        print result\n\n    df.addBoth(got_result)\n    reactor.run()\n\nSend a data message.\n\n.. code-block:: python\n\n    # With FCM, you can send two types of messages to clients:\n    # 1. Notification messages, sometimes thought of as \"display messages.\"\n    # 2. Data messages, which are handled by the client app.\n\n    # Client app is responsible for processing data messages. Data messages have only custom key-value pairs. (Python dict)\n    # Data messages let developers send up to 4KB of custom key-value pairs.\n\n    # Sending a notification with data message payload\n    data_message = {\n        \"Nick\" : \"Mario\",\n        \"body\" : \"great match!\",\n        \"Room\" : \"PortugalVSDenmark\"\n    }\n    # To multiple devices\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message_body, data_message=data_message)\n    # To a single device\n    result = push_service.notify_single_device(registration_id=registration_id, message_body=message_body, data_message=data_message)\n\n    # Sending a data message only payload, do NOT include message_body\n    # To multiple devices\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, data_message=data_message)\n    # To a single device\n    result = push_service.notify_single_device(registration_id=registration_id, data_message=data_message)\n\n    # Use notification messages when you want FCM to handle displaying a notification on your app's behalf.\n    # Use data messages when you just want to process the messages only in your app.\n    # txfcm can send a message including both notification and data payloads.\n    # In such cases, FCM handles displaying the notification payload, and the client app handles the data payload.\n\nSend a low priority message.\n\n.. code-block:: python\n\n    # The default is low_priority == False\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message, low_priority=True)\n\nSending a message to a topic.\n\n.. code-block:: python\n\n    # Send a message to devices subscribed to a topic.\n    result = push_service.notify_topic_subscribers(topic_name=\"news\", message_body=message)\n\n    # Conditional topic messaging\n    topic_condition = \"'TopicA' in topics && ('TopicB' in topics || 'TopicC' in topics)\"\n    result = push_service.notify_topic_subscribers(message_body=message, condition=topic_condition)\n    # FCM first evaluates any conditions in parentheses, and then evaluates the expression from left to right.\n    # In the above expression, a user subscribed to any single topic does not receive the message. Likewise,\n    # a user who does not subscribe to TopicA does not receive the message. These combinations do receive it:\n    # TopicA and TopicB\n    # TopicA and TopicC\n    # Conditions for topics support two operators per expression, and parentheses are supported.\n    # For more information, check: https://firebase.google.com/docs/cloud-messaging/topic-messaging\n\nOther argument options\n\n::\n\n\n    collapse_key (str, optional): Identifier for a group of messages\n        that can be collapsed so that only the last message gets sent\n        when delivery can be resumed. Defaults to `None`.\n    delay_while_idle (bool, optional): If `True` indicates that the\n        message should not be sent until the device becomes active.\n    time_to_live (int, optional): How long (in seconds) the message\n        should be kept in FCM storage if the device is offline. The\n        maximum time to live supported is 4 weeks. Defaults to ``None``\n        which uses the FCM default of 4 weeks.\n    low_priority (boolean, optional): Whether to send notification with\n        the low priority flag. Defaults to `False`.\n    restricted_package_name (str, optional): Package name of the\n        application where the registration IDs must match in order to\n        receive the message. Defaults to `None`.\n    dry_run (bool, optional): If `True` no message will be sent but\n        request will be tested.\n\nAccess response data.\n\n.. code-block:: python\n\n    # Response from FCM Server.\n    response['multicast_id'] #Unique ID (number) identifying the multicast message.\n    response['success'] #Number of messages that were processed without an error.\n    response['failure'] #Number of messages that could not be processed.\n    response['canonical_ids'] #Number of results that contain a canonical registration token.\n    response['results'] #Array of objects representing the status of the messages processed.\n\n    result = [{response dict},...]\n\n    # The response objects are listed in the same order as the request (i.e., for each registration ID in the request,\n    # its response is listed in the same index in the response).\n    # message_id: String specifying a unique ID for each successfully processed message.\n    # registration_id: Optional string specifying the canonical registration token for the client app that the message\n    # was processed and sent to. Sender should use this value as the registration token for future requests. Otherwise,\n    # the messages might be rejected.\n    # error: String specifying the error that occurred when processing the message for the recipient\n\n\nLicense\n-------\n\nThe MIT License (MIT).\n\n\n::\n\n    Copyright (c) 2016 Lintel Technologies Pvt Ltd ( http://lintel.in )\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n    is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\n    IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nCredits\n-------\n- Emmanuel Adegbite author of PyFCM\n- OperaSoftware's twisted-gcmclient.\n- `Lintel Technologies Pvt Ltd <http://lintel.in>`_\n\nMajority of code is taken from PyFCM few lines of twisted code from Opera software's twisted-gcmclient code.\n\n.. |version| image:: http://img.shields.io/pypi/v/txfcm.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/txfcm/\n\n.. |license| image:: http://img.shields.io/pypi/l/txfcm.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/txfcm/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/linteltechnologies/txfcm", "keywords": "firebase fcm apns ios gcm android push notifications", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "txFCM", "package_url": "https://pypi.org/project/txFCM/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/txFCM/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/linteltechnologies/txfcm"}, "release_url": "https://pypi.org/project/txFCM/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Twisted Python client for FCM - Firebase Cloud Messaging (Android & iOS)..", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/txfcm/\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45f141f24ec54c7dedc70d5e1766e9f8e42dc5e7/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f747866636d2e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.python.org/pypi/txfcm/\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a11674b4e8f008ac1fcf8c63862b5f740903810/687474703a2f2f696d672e736869656c64732e696f2f707970692f6c2f747866636d2e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>Twisted Python client for FCM - Firebase Cloud Messaging (Android &amp; iOS)</p>\n<p>Firebase Cloud Messaging (FCM) is the new version of GCM. It inherits the reliable and scalable GCM infrastructure, plus new features. GCM users are strongly recommended to upgrade to FCM.</p>\n<p>Using FCM, you can notify a client app that new email or other data is available to sync. You can send notifications to drive user reengagement and retention. For use cases such as instant messaging, a message can transfer a payload of up to 4KB to a client app.</p>\n<p>For more information, visit: <a href=\"https://firebase.google.com/docs/cloud-messaging/\" rel=\"nofollow\">https://firebase.google.com/docs/cloud-messaging/</a></p>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>Project: <a href=\"https://github.com/linteltechnologies/txfcm\" rel=\"nofollow\">https://github.com/linteltechnologies/txfcm</a></li>\n<li>PyPi: <a href=\"https://pypi.python.org/pypi/txfcm/\" rel=\"nofollow\">https://pypi.python.org/pypi/txfcm/</a></li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Install using pip:</p>\n<pre>pip install txfcm\n\nOR\n\npip install git+https://github.com/linteltechnologies/txfcm.git\n</pre>\n<p>txfcm supports Android and iOS.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>All FCM functionality covered</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Send notifications using the <tt>TXFCMNotification</tt> class:</p>\n<pre><span class=\"c1\"># Send to single device.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">txfcm</span> <span class=\"kn\">import</span> <span class=\"n\">TXFCMNotification</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n\n<span class=\"n\">push_service</span> <span class=\"o\">=</span> <span class=\"n\">TXFCMNotification</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;api-key&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Your api-key can be gotten from:  https://console.firebase.google.com/project/&lt;project-name&gt;/settings/cloudmessaging</span>\n\n<span class=\"n\">registration_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;device registration_id&gt;\"</span>\n<span class=\"n\">message_title</span> <span class=\"o\">=</span> <span class=\"s2\">\"Uber update\"</span>\n<span class=\"n\">message_body</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hi john, your customized news for today is ready\"</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_single_device</span><span class=\"p\">(</span><span class=\"n\">registration_id</span><span class=\"o\">=</span><span class=\"n\">registration_id</span><span class=\"p\">,</span> <span class=\"n\">message_title</span><span class=\"o\">=</span><span class=\"n\">message_title</span><span class=\"p\">,</span> <span class=\"n\">message_body</span><span class=\"o\">=</span><span class=\"n\">message_body</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Send to multiple devices by passing a list of ids.</span>\n<span class=\"n\">registration_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"&lt;device registration_id 1&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;device registration_id 2&gt;\"</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">message_title</span> <span class=\"o\">=</span> <span class=\"s2\">\"Uber update\"</span>\n<span class=\"n\">message_body</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hope you're having fun this weekend, don't forget to check today's news\"</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_multiple_devices</span><span class=\"p\">(</span><span class=\"n\">registration_ids</span><span class=\"o\">=</span><span class=\"n\">registration_ids</span><span class=\"p\">,</span> <span class=\"n\">message_title</span><span class=\"o\">=</span><span class=\"n\">message_title</span><span class=\"p\">,</span> <span class=\"n\">message_body</span><span class=\"o\">=</span><span class=\"n\">message_body</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">got_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">result</span>\n\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">addBoth</span><span class=\"p\">(</span><span class=\"n\">got_result</span><span class=\"p\">)</span>\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Send a data message.</p>\n<pre><span class=\"c1\"># With FCM, you can send two types of messages to clients:</span>\n<span class=\"c1\"># 1. Notification messages, sometimes thought of as \"display messages.\"</span>\n<span class=\"c1\"># 2. Data messages, which are handled by the client app.</span>\n\n<span class=\"c1\"># Client app is responsible for processing data messages. Data messages have only custom key-value pairs. (Python dict)</span>\n<span class=\"c1\"># Data messages let developers send up to 4KB of custom key-value pairs.</span>\n\n<span class=\"c1\"># Sending a notification with data message payload</span>\n<span class=\"n\">data_message</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"Nick\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Mario\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"body\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"great match!\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Room\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"PortugalVSDenmark\"</span>\n<span class=\"p\">}</span>\n<span class=\"c1\"># To multiple devices</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_multiple_devices</span><span class=\"p\">(</span><span class=\"n\">registration_ids</span><span class=\"o\">=</span><span class=\"n\">registration_ids</span><span class=\"p\">,</span> <span class=\"n\">message_body</span><span class=\"o\">=</span><span class=\"n\">message_body</span><span class=\"p\">,</span> <span class=\"n\">data_message</span><span class=\"o\">=</span><span class=\"n\">data_message</span><span class=\"p\">)</span>\n<span class=\"c1\"># To a single device</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_single_device</span><span class=\"p\">(</span><span class=\"n\">registration_id</span><span class=\"o\">=</span><span class=\"n\">registration_id</span><span class=\"p\">,</span> <span class=\"n\">message_body</span><span class=\"o\">=</span><span class=\"n\">message_body</span><span class=\"p\">,</span> <span class=\"n\">data_message</span><span class=\"o\">=</span><span class=\"n\">data_message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Sending a data message only payload, do NOT include message_body</span>\n<span class=\"c1\"># To multiple devices</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_multiple_devices</span><span class=\"p\">(</span><span class=\"n\">registration_ids</span><span class=\"o\">=</span><span class=\"n\">registration_ids</span><span class=\"p\">,</span> <span class=\"n\">data_message</span><span class=\"o\">=</span><span class=\"n\">data_message</span><span class=\"p\">)</span>\n<span class=\"c1\"># To a single device</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_single_device</span><span class=\"p\">(</span><span class=\"n\">registration_id</span><span class=\"o\">=</span><span class=\"n\">registration_id</span><span class=\"p\">,</span> <span class=\"n\">data_message</span><span class=\"o\">=</span><span class=\"n\">data_message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use notification messages when you want FCM to handle displaying a notification on your app's behalf.</span>\n<span class=\"c1\"># Use data messages when you just want to process the messages only in your app.</span>\n<span class=\"c1\"># txfcm can send a message including both notification and data payloads.</span>\n<span class=\"c1\"># In such cases, FCM handles displaying the notification payload, and the client app handles the data payload.</span>\n</pre>\n<p>Send a low priority message.</p>\n<pre><span class=\"c1\"># The default is low_priority == False</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_multiple_devices</span><span class=\"p\">(</span><span class=\"n\">registration_ids</span><span class=\"o\">=</span><span class=\"n\">registration_ids</span><span class=\"p\">,</span> <span class=\"n\">message_body</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">low_priority</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Sending a message to a topic.</p>\n<pre><span class=\"c1\"># Send a message to devices subscribed to a topic.</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_topic_subscribers</span><span class=\"p\">(</span><span class=\"n\">topic_name</span><span class=\"o\">=</span><span class=\"s2\">\"news\"</span><span class=\"p\">,</span> <span class=\"n\">message_body</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Conditional topic messaging</span>\n<span class=\"n\">topic_condition</span> <span class=\"o\">=</span> <span class=\"s2\">\"'TopicA' in topics &amp;&amp; ('TopicB' in topics || 'TopicC' in topics)\"</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">push_service</span><span class=\"o\">.</span><span class=\"n\">notify_topic_subscribers</span><span class=\"p\">(</span><span class=\"n\">message_body</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">topic_condition</span><span class=\"p\">)</span>\n<span class=\"c1\"># FCM first evaluates any conditions in parentheses, and then evaluates the expression from left to right.</span>\n<span class=\"c1\"># In the above expression, a user subscribed to any single topic does not receive the message. Likewise,</span>\n<span class=\"c1\"># a user who does not subscribe to TopicA does not receive the message. These combinations do receive it:</span>\n<span class=\"c1\"># TopicA and TopicB</span>\n<span class=\"c1\"># TopicA and TopicC</span>\n<span class=\"c1\"># Conditions for topics support two operators per expression, and parentheses are supported.</span>\n<span class=\"c1\"># For more information, check: https://firebase.google.com/docs/cloud-messaging/topic-messaging</span>\n</pre>\n<p>Other argument options</p>\n<pre>collapse_key (str, optional): Identifier for a group of messages\n    that can be collapsed so that only the last message gets sent\n    when delivery can be resumed. Defaults to `None`.\ndelay_while_idle (bool, optional): If `True` indicates that the\n    message should not be sent until the device becomes active.\ntime_to_live (int, optional): How long (in seconds) the message\n    should be kept in FCM storage if the device is offline. The\n    maximum time to live supported is 4 weeks. Defaults to ``None``\n    which uses the FCM default of 4 weeks.\nlow_priority (boolean, optional): Whether to send notification with\n    the low priority flag. Defaults to `False`.\nrestricted_package_name (str, optional): Package name of the\n    application where the registration IDs must match in order to\n    receive the message. Defaults to `None`.\ndry_run (bool, optional): If `True` no message will be sent but\n    request will be tested.\n</pre>\n<p>Access response data.</p>\n<pre><span class=\"c1\"># Response from FCM Server.</span>\n<span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'multicast_id'</span><span class=\"p\">]</span> <span class=\"c1\">#Unique ID (number) identifying the multicast message.</span>\n<span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'success'</span><span class=\"p\">]</span> <span class=\"c1\">#Number of messages that were processed without an error.</span>\n<span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'failure'</span><span class=\"p\">]</span> <span class=\"c1\">#Number of messages that could not be processed.</span>\n<span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'canonical_ids'</span><span class=\"p\">]</span> <span class=\"c1\">#Number of results that contain a canonical registration token.</span>\n<span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'results'</span><span class=\"p\">]</span> <span class=\"c1\">#Array of objects representing the status of the messages processed.</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"n\">response</span> <span class=\"nb\">dict</span><span class=\"p\">},</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># The response objects are listed in the same order as the request (i.e., for each registration ID in the request,</span>\n<span class=\"c1\"># its response is listed in the same index in the response).</span>\n<span class=\"c1\"># message_id: String specifying a unique ID for each successfully processed message.</span>\n<span class=\"c1\"># registration_id: Optional string specifying the canonical registration token for the client app that the message</span>\n<span class=\"c1\"># was processed and sent to. Sender should use this value as the registration token for future requests. Otherwise,</span>\n<span class=\"c1\"># the messages might be rejected.</span>\n<span class=\"c1\"># error: String specifying the error that occurred when processing the message for the recipient</span>\n</pre>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>The MIT License (MIT).</p>\n<pre>Copyright (c) 2016 Lintel Technologies Pvt Ltd ( http://lintel.in )\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\nmodify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</pre>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<ul>\n<li>Emmanuel Adegbite author of PyFCM</li>\n<li>OperaSoftware\u2019s twisted-gcmclient.</li>\n<li><a href=\"http://lintel.in\" rel=\"nofollow\">Lintel Technologies Pvt Ltd</a></li>\n</ul>\n<p>Majority of code is taken from PyFCM few lines of twisted code from Opera software\u2019s twisted-gcmclient code.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2455467, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "cd8a9bbd692fcd4c12ba636f219d67fa", "sha256": "3e8354c3947eaa3aa8feca14fdcaf745633533c34bc8d9c223f11674e500dd69"}, "downloads": -1, "filename": "txFCM-0.0.1.tar.gz", "has_sig": false, "md5_digest": "cd8a9bbd692fcd4c12ba636f219d67fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13346, "upload_time": "2016-11-11T17:23:11", "upload_time_iso_8601": "2016-11-11T17:23:11.035895Z", "url": "https://files.pythonhosted.org/packages/60/f3/269f8771ad868c2980ca73f789f64b1917a965b9cb619d7a612674c116c9/txFCM-0.0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "08230b2782aedfd211f38d20006c3370", "sha256": "da5a580452a440c91d21c440981e1ea904307aa703491c6d4016d34369b27aea"}, "downloads": -1, "filename": "txFCM-0.0.1.zip", "has_sig": false, "md5_digest": "08230b2782aedfd211f38d20006c3370", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19837, "upload_time": "2016-11-11T17:23:16", "upload_time_iso_8601": "2016-11-11T17:23:16.670645Z", "url": "https://files.pythonhosted.org/packages/3f/29/7cf5f3c2bfaf16c17abf196f539c3d00d7bfe4f7282d8ea3ae08177b9d4a/txFCM-0.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd8a9bbd692fcd4c12ba636f219d67fa", "sha256": "3e8354c3947eaa3aa8feca14fdcaf745633533c34bc8d9c223f11674e500dd69"}, "downloads": -1, "filename": "txFCM-0.0.1.tar.gz", "has_sig": false, "md5_digest": "cd8a9bbd692fcd4c12ba636f219d67fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13346, "upload_time": "2016-11-11T17:23:11", "upload_time_iso_8601": "2016-11-11T17:23:11.035895Z", "url": "https://files.pythonhosted.org/packages/60/f3/269f8771ad868c2980ca73f789f64b1917a965b9cb619d7a612674c116c9/txFCM-0.0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "08230b2782aedfd211f38d20006c3370", "sha256": "da5a580452a440c91d21c440981e1ea904307aa703491c6d4016d34369b27aea"}, "downloads": -1, "filename": "txFCM-0.0.1.zip", "has_sig": false, "md5_digest": "08230b2782aedfd211f38d20006c3370", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19837, "upload_time": "2016-11-11T17:23:16", "upload_time_iso_8601": "2016-11-11T17:23:16.670645Z", "url": "https://files.pythonhosted.org/packages/3f/29/7cf5f3c2bfaf16c17abf196f539c3d00d7bfe4f7282d8ea3ae08177b9d4a/txFCM-0.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:43:15 2020"}