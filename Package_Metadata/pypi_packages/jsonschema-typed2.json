{"info": {"author": "Connor Worley", "author_email": "connorbworley@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# JSON Schema-powered type annotations\n\nThe goal of this project is to use JSON Schema for type checking in Python.\n\nWhile there is not a perfect 1:1 mapping between concepts in JSON Schema and\nPython's typing system, there is enough of an isomorphism to warrant some\nexploration of the possibilities. Since a JSON document is generally\nrepresented as a ``dict`` in Python programs, this project looks specifically\nat interpreting JSON schema as\n[``TypedDict``](https://www.python.org/dev/peps/pep-0589/) definitions.\n\n**Warning:** there are bound to be some abuses of the [mypy plugin\nsystem](https://mypy.readthedocs.io/en/latest/extending_mypy.html) here. You\nhave been warned.\n\nThis leverages (and is inspired by) https://github.com/Julian/jsonschema.\n\n## Overview\n\nA JSON schema:\n\n```json\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$id\": \"http://foo.qwerty/some/schema#\",\n    \"title\": \"Foo Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": {\n            \"type\": \"string\"\n        },\n        \"awesome\": {\n            \"type\": \"number\"\n        }\n    },\n    \"required\": [\"title\"]\n}\n```\n\nA TypedDict:\n\n```python\nfrom jsonschema_typed.types import JSONSchema\n\ndata: JSONSchema['path/to/schema.json'] = dict(title='baz')\ndata['description'] = 'there is no description'  # TypedDict \"FooSchema\" has no key 'description'\ndata['awesome'] = 42\ndata['awesome'] = None  # Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"\n```\n\n## Installation\n\n```bash\npip install jsonschema-typed\n```\n\nor\n\n```bash\ngit clone git@github.com:erickpeirson/jsonschema-typed.git\ncd jsonschema-typed\npython setup.py install\n```\n\n## Requirements\n\nSo far I have only tried this with:\n\n- mypy==0.701\n- jsonschema==3.0.1\n\nBut probably older versions work. You could try it out and\n[let me know](https://github.com/erickpeirson/jsonschema-typed/issues).\n\n## Limitations\n\n- ``additionalProperties`` doesn't really have an equivalent in TypedDict. Yet.\n- Cases in which the root of the schema is anything other than an ``object``\n  are not terribly interesting for this project, so we ignore them for now.\n  Array values for ``type`` (e.g. ``\"type\": [\"object\", \"boolean\"]``) are\n  otherwise supported with ``Union``.\n- The ``default`` keyword is not supported; but see:\n   https://github.com/python/mypy/issues/6131.\n- Self-references (e.g. ``\"#\"``) can't really work properly until nested\n  forward-references are supported; see\n  https://github.com/python/mypy/issues/731.\n\nThere are probably others.\n\n\n## Approach\n\nSo far two approaches are attempted:\n\n1. Annotating a ``dict`` instance that will be a ``TypedDict`` that conforms to\n   the JSON Schema (as best we can enforce it).\n2. Using a dynamic base class that is typed as a ``TypedDict``.\n\nBoth examples below use the schema:\n\n```json\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$id\": \"http://foo.qwerty/some/schema#\",\n    \"title\": \"Foo Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": {\n            \"type\": \"string\"\n        },\n        \"awesome\": {\n            \"type\": \"number\"\n        }\n    }\n}\n```\n\n\n### First approach: annotating a ``dict``\n\nThis has the advantage of being fairly simple. It is implemented via\n``jsonschema_typed.plugin.JSONSchemaPlugin.get_type_analyze_hook``.\n\n```python\nfrom jsonschema_typed.types import JSONSchema\n\ndata: JSONSchema['path/to/schema.json'] = dict(title='baz')\nreveal_type(data)  # Revealed type is 'TypedDict('FooSchema', {'title'?: builtins.str, 'awesome'?: Union[builtins.int, builtins.float]})'\ndata['description'] = 'there is no description'  # TypedDict \"FooSchema\" has no key 'description'\ndata['awesome'] = 42\ndata['awesome'] = None  # Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"\n```\n\nHere is the mypy output:\n\n```\nmain.py:4: error: Revealed type is 'TypedDict('FooSchema', {'title'?: builtins.str, 'awesome'?: Union[builtins.int, builtins.float]})'\nmain.py:5: error: TypedDict \"FooSchema\" has no key 'description'\nmain.py:7: error: Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"\n```\n\nNote that the right-hand side can be a ``dict`` or a subclass of ``dict``, so\nyou could define a subclass like:\n\n```python\nclass Foo(dict):\n    \"\"\"Some domain logic on your object.\"\"\"\n\n    def do_something(self, arg: int) -> int:\n        \"\"\"Do something awesome.\"\"\"\n        return arg * self['awesome']\n\ndata: JSONSchema['schema/test.json'] = Foo(title='baz')\nreveal_type(data)  # Revealed type is 'TypedDict('FooSchema', {'title'?: builtins.str, 'awesome'?: Union[builtins.int, builtins.float]})'\ndata['description'] = 'there is no description'  # TypedDict \"FooSchema\" has no key 'description'\ndata['awesome'] = 42\ndata['awesome'] = None  # Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"\n```\n\nOf course this isn't quite consistent with PEP-589 which\n[states](https://www.python.org/dev/peps/pep-0589/#class-based-syntax) that:\n\n> Methods are not allowed, since the runtime type of a TypedDict object will\n> always be just dict (it is never a subclass of dict).\n\nSo use at your own risk.\n\n### Second approach: dynamic base class\n\nThis has the advantage of being able to add some runtime-functionality, e.g.\nuse ``jsonschema`` to actually validate data at runtime. It is implemented via\n``jsonschema_typed.plugin.JSONSchemaPlugin.get_dynamic_class_hook``.\n\nBut again, this isn't quite consistent with PEP-589 which\n[states](https://www.python.org/dev/peps/pep-0589/#class-based-syntax), so\nuse at your own risk.\n\n```python\nfrom jsonschema_typed.types import JSONSchemaBase\n\n\nBase = JSONSchemaBase('path/to/schema.json')\n\nclass Foo(Base):\n    \"\"\"All your base in one place.\"\"\"\n\n    def do_something(self, arg: int) -> int:\n        \"\"\"Do something awesome.\"\"\"\n        return arg * self['awesome']\n\n\ndata = Foo(title='baz')\nreveal_type(data)  # Revealed type is 'TypedDict('FooSchema', {'title'?: builtins.str, 'awesome'?: Union[builtins.int, builtins.float]})'\ndata['description'] = 'there is no description'  # TypedDict \"FooSchema\" has no key 'description'\ndata['awesome'] = 42\ndata['awesome'] = None  # Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"\n```\n\n## TODO\n\n- [ ] Decide whether to stick with just one approach (and which one)\n- [ ] Write some tests\n- [ ] Test against other versions of mypy + jsonschema", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/connorworley/jsonschema-typed", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jsonschema-typed2", "package_url": "https://pypi.org/project/jsonschema-typed2/", "platform": "", "project_url": "https://pypi.org/project/jsonschema-typed2/", "project_urls": {"Homepage": "https://github.com/connorworley/jsonschema-typed"}, "release_url": "https://pypi.org/project/jsonschema-typed2/0.3.1/", "requires_dist": null, "requires_python": "~=3.6", "summary": "", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JSON Schema-powered type annotations</h1>\n<p>The goal of this project is to use JSON Schema for type checking in Python.</p>\n<p>While there is not a perfect 1:1 mapping between concepts in JSON Schema and\nPython's typing system, there is enough of an isomorphism to warrant some\nexploration of the possibilities. Since a JSON document is generally\nrepresented as a <code>dict</code> in Python programs, this project looks specifically\nat interpreting JSON schema as\n<a href=\"https://www.python.org/dev/peps/pep-0589/\" rel=\"nofollow\"><code>TypedDict</code></a> definitions.</p>\n<p><strong>Warning:</strong> there are bound to be some abuses of the <a href=\"https://mypy.readthedocs.io/en/latest/extending_mypy.html\" rel=\"nofollow\">mypy plugin\nsystem</a> here. You\nhave been warned.</p>\n<p>This leverages (and is inspired by) <a href=\"https://github.com/Julian/jsonschema\" rel=\"nofollow\">https://github.com/Julian/jsonschema</a>.</p>\n<h2>Overview</h2>\n<p>A JSON schema:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"$schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://json-schema.org/draft-07/schema#\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"$id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://foo.qwerty/some/schema#\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Foo Schema\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"awesome\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"number\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"title\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>A TypedDict:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonschema_typed.types</span> <span class=\"kn\">import</span> <span class=\"n\">JSONSchema</span>\n\n<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">JSONSchema</span><span class=\"p\">[</span><span class=\"s1\">'path/to/schema.json'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'description'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'there is no description'</span>  <span class=\"c1\"># TypedDict \"FooSchema\" has no key 'description'</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"</span>\n</pre>\n<h2>Installation</h2>\n<pre>pip install jsonschema-typed\n</pre>\n<p>or</p>\n<pre>git clone git@github.com:erickpeirson/jsonschema-typed.git\n<span class=\"nb\">cd</span> jsonschema-typed\npython setup.py install\n</pre>\n<h2>Requirements</h2>\n<p>So far I have only tried this with:</p>\n<ul>\n<li>mypy==0.701</li>\n<li>jsonschema==3.0.1</li>\n</ul>\n<p>But probably older versions work. You could try it out and\n<a href=\"https://github.com/erickpeirson/jsonschema-typed/issues\" rel=\"nofollow\">let me know</a>.</p>\n<h2>Limitations</h2>\n<ul>\n<li><code>additionalProperties</code> doesn't really have an equivalent in TypedDict. Yet.</li>\n<li>Cases in which the root of the schema is anything other than an <code>object</code>\nare not terribly interesting for this project, so we ignore them for now.\nArray values for <code>type</code> (e.g. <code>\"type\": [\"object\", \"boolean\"]</code>) are\notherwise supported with <code>Union</code>.</li>\n<li>The <code>default</code> keyword is not supported; but see:\n<a href=\"https://github.com/python/mypy/issues/6131\" rel=\"nofollow\">https://github.com/python/mypy/issues/6131</a>.</li>\n<li>Self-references (e.g. <code>\"#\"</code>) can't really work properly until nested\nforward-references are supported; see\n<a href=\"https://github.com/python/mypy/issues/731\" rel=\"nofollow\">https://github.com/python/mypy/issues/731</a>.</li>\n</ul>\n<p>There are probably others.</p>\n<h2>Approach</h2>\n<p>So far two approaches are attempted:</p>\n<ol>\n<li>Annotating a <code>dict</code> instance that will be a <code>TypedDict</code> that conforms to\nthe JSON Schema (as best we can enforce it).</li>\n<li>Using a dynamic base class that is typed as a <code>TypedDict</code>.</li>\n</ol>\n<p>Both examples below use the schema:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"$schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://json-schema.org/draft-07/schema#\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"$id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://foo.qwerty/some/schema#\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Foo Schema\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"awesome\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"number\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>First approach: annotating a <code>dict</code></h3>\n<p>This has the advantage of being fairly simple. It is implemented via\n<code>jsonschema_typed.plugin.JSONSchemaPlugin.get_type_analyze_hook</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonschema_typed.types</span> <span class=\"kn\">import</span> <span class=\"n\">JSONSchema</span>\n\n<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">JSONSchema</span><span class=\"p\">[</span><span class=\"s1\">'path/to/schema.json'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"n\">reveal_type</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># Revealed type is 'TypedDict('FooSchema', {'title'?: builtins.str, 'awesome'?: Union[builtins.int, builtins.float]})'</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'description'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'there is no description'</span>  <span class=\"c1\"># TypedDict \"FooSchema\" has no key 'description'</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"</span>\n</pre>\n<p>Here is the mypy output:</p>\n<pre><code>main.py:4: error: Revealed type is 'TypedDict('FooSchema', {'title'?: builtins.str, 'awesome'?: Union[builtins.int, builtins.float]})'\nmain.py:5: error: TypedDict \"FooSchema\" has no key 'description'\nmain.py:7: error: Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"\n</code></pre>\n<p>Note that the right-hand side can be a <code>dict</code> or a subclass of <code>dict</code>, so\nyou could define a subclass like:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Some domain logic on your object.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Do something awesome.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span>\n\n<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">JSONSchema</span><span class=\"p\">[</span><span class=\"s1\">'schema/test.json'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"n\">reveal_type</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># Revealed type is 'TypedDict('FooSchema', {'title'?: builtins.str, 'awesome'?: Union[builtins.int, builtins.float]})'</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'description'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'there is no description'</span>  <span class=\"c1\"># TypedDict \"FooSchema\" has no key 'description'</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"</span>\n</pre>\n<p>Of course this isn't quite consistent with PEP-589 which\n<a href=\"https://www.python.org/dev/peps/pep-0589/#class-based-syntax\" rel=\"nofollow\">states</a> that:</p>\n<blockquote>\n<p>Methods are not allowed, since the runtime type of a TypedDict object will\nalways be just dict (it is never a subclass of dict).</p>\n</blockquote>\n<p>So use at your own risk.</p>\n<h3>Second approach: dynamic base class</h3>\n<p>This has the advantage of being able to add some runtime-functionality, e.g.\nuse <code>jsonschema</code> to actually validate data at runtime. It is implemented via\n<code>jsonschema_typed.plugin.JSONSchemaPlugin.get_dynamic_class_hook</code>.</p>\n<p>But again, this isn't quite consistent with PEP-589 which\n<a href=\"https://www.python.org/dev/peps/pep-0589/#class-based-syntax\" rel=\"nofollow\">states</a>, so\nuse at your own risk.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonschema_typed.types</span> <span class=\"kn\">import</span> <span class=\"n\">JSONSchemaBase</span>\n\n\n<span class=\"n\">Base</span> <span class=\"o\">=</span> <span class=\"n\">JSONSchemaBase</span><span class=\"p\">(</span><span class=\"s1\">'path/to/schema.json'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"All your base in one place.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Do something awesome.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"n\">reveal_type</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># Revealed type is 'TypedDict('FooSchema', {'title'?: builtins.str, 'awesome'?: Union[builtins.int, builtins.float]})'</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'description'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'there is no description'</span>  <span class=\"c1\"># TypedDict \"FooSchema\" has no key 'description'</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Argument 2 has incompatible type \"None\"; expected \"Union[int, float]\"</span>\n</pre>\n<h2>TODO</h2>\n<ul>\n<li>[ ] Decide whether to stick with just one approach (and which one)</li>\n<li>[ ] Write some tests</li>\n<li>[ ] Test against other versions of mypy + jsonschema</li>\n</ul>\n\n          </div>"}, "last_serial": 5892908, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e8920251312eb647e0b2744763b469ae", "sha256": "b2c6fa7d74d09f8193dc99b87e57d578c05dcefb658c2e0b418401a95dec83fa"}, "downloads": -1, "filename": "jsonschema-typed2-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e8920251312eb647e0b2744763b469ae", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 10219, "upload_time": "2019-09-03T23:06:39", "upload_time_iso_8601": "2019-09-03T23:06:39.917417Z", "url": "https://files.pythonhosted.org/packages/14/0f/8d51f35ba965c1ea7e4750d3a7f9f02495228a237f4740a4c7528163842a/jsonschema-typed2-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d7702761ae610d874e29429da1a9b8f3", "sha256": "d42ed39829c90bd45c33f97b79179227f826c8d96dbcf15bf746b3cf9131d687"}, "downloads": -1, "filename": "jsonschema-typed2-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d7702761ae610d874e29429da1a9b8f3", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 9678, "upload_time": "2019-09-17T18:39:45", "upload_time_iso_8601": "2019-09-17T18:39:45.163788Z", "url": "https://files.pythonhosted.org/packages/82/7e/4f782566539b609995c812ecba1af26cb0c6a727b925cc3557e7117b111b/jsonschema-typed2-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "72f8ed9cc39ea6cbd242f22b86bb8aa3", "sha256": "972a9a3e30e335901864a7b3e60d8a854ab9c5027652dfb015db8dd3f1a2f6fd"}, "downloads": -1, "filename": "jsonschema-typed2-0.3.0.tar.gz", "has_sig": false, "md5_digest": "72f8ed9cc39ea6cbd242f22b86bb8aa3", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 10593, "upload_time": "2019-09-17T21:38:17", "upload_time_iso_8601": "2019-09-17T21:38:17.396527Z", "url": "https://files.pythonhosted.org/packages/53/cd/ac67131f707cdf9beadb519445b93034ec2574b5ce54c436817031b4a9c9/jsonschema-typed2-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8c7f68459b071602dc055dbeeeb5026c", "sha256": "49ddf182427e6fd8e13e57846296b64124279d7cdd026e3fd8a674c932f38bd6"}, "downloads": -1, "filename": "jsonschema-typed2-0.3.1.tar.gz", "has_sig": false, "md5_digest": "8c7f68459b071602dc055dbeeeb5026c", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 10458, "upload_time": "2019-09-26T21:49:26", "upload_time_iso_8601": "2019-09-26T21:49:26.580510Z", "url": "https://files.pythonhosted.org/packages/24/a4/f656fe1d1d07cbc586a5867c26c3fb9cdf1681cde3cd3e3f8ccf7d065233/jsonschema-typed2-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c7f68459b071602dc055dbeeeb5026c", "sha256": "49ddf182427e6fd8e13e57846296b64124279d7cdd026e3fd8a674c932f38bd6"}, "downloads": -1, "filename": "jsonschema-typed2-0.3.1.tar.gz", "has_sig": false, "md5_digest": "8c7f68459b071602dc055dbeeeb5026c", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 10458, "upload_time": "2019-09-26T21:49:26", "upload_time_iso_8601": "2019-09-26T21:49:26.580510Z", "url": "https://files.pythonhosted.org/packages/24/a4/f656fe1d1d07cbc586a5867c26c3fb9cdf1681cde3cd3e3f8ccf7d065233/jsonschema-typed2-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:38 2020"}