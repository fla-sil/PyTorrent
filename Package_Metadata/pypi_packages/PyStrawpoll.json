{"info": {"author": "Vaibhav Yenamandra", "author_email": "vaibhav-y@users.noreply.github.com", "bugtrack_url": null, "classifiers": [], "description": "`PY-STRAWPOLL <https://github.com/vaibhav-y/py-strawpoll>`__\n============================================================\n\nPython wrapper for `Strawpoll's\nAPI <https://github.com/strawpoll/strawpoll/wiki/API>`__. Provides\nmethods for reading from and writing to strawpoll via its JSON api.\n\nAbout\n-----\n\npy-strawpoll provides the following:\n\n``StrawpollAPIReader`` class containing methods:\n\n-  ``from_json(string)``: Read a strawpoll into memory from its JSON\n   representation\n-  ``from_url(url)``: Read a strawpoll into memory from it's URL (uses\n   API endpoint to fetch)\n-  ``from_apiv2(poll_id)``: Read a strawpoll into memory via it's poll\n   id (uses API endpoint to fetch)\n-  ``total_votes()``\n-  ``normalize()``: Normalize a poll to the [0, 1] range\n-  ``votes_for(option_string)``: Get the raw count of votes for a\n   specific option string\n-  ``normalized_votes_for(option_string)``: Get the normalized votes for\n   a specific option string\n-  ``winner()``: Who won the poll?\n-  ``loser()``: Least favoured option\n-  ``to_clean_dict()``: Returns a python dictionary representation of\n   the poll. Ignores any atributes that are null\n\nUsage\n-----\n\nInstallation\n~~~~~~~~~~~~\n\n-  TODO: Create a PyPI package\n\nFetching a strawpoll\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from strawpoll import StrawpollAPIReader\n\n    json_string = '{\n      \"title\":\"What movie should we watch again?\",\n      \"options\":  [\n        \"Sucker punch \",\n        \"Pirates of carribian \",\n        \"Prison logic\",\"Witchhunter\"\n      ],\n      \"multi\":false,\n      \"permissive\": false,\n      \"captcha\": true\n    }'\n\n    # Fetch a poll through its API id\n    poll_a = StrawpollAPIReader.from_apiv2(1)\n\n    # Fetch a poll through its URL\n    poll_b = StrawpollAPIReader.from_url(\"https://strawpoll.me/1\")\n\n    # Fetch a poll from its JSON dump\n    poll_c = StrawpollAPIReader.from_json(json_string)\n\n    # These should be the same\n    if (poll_a == poll_b) and (poll_b == poll_c):\n      print \"Mirror images!\"\n\n    # Yada yada normalize your data\n    print poll_a.normalize()\n\nPosting a strawpoll\n~~~~~~~~~~~~~~~~~~~\n\n-  TODO: APIWriter still in the pipes\n\nChangelog\n---------\n\n`CHANGES.txt <./CHANGES.txt>`__", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/PyStrawpoll/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "PyStrawpoll", "package_url": "https://pypi.org/project/PyStrawpoll/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PyStrawpoll/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/PyStrawpoll/"}, "release_url": "https://pypi.org/project/PyStrawpoll/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "Python API wrapper for strawpoll (https://github.com/vaibhav-y/py-strawpoll)", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python wrapper for <a href=\"https://github.com/strawpoll/strawpoll/wiki/API\" rel=\"nofollow\">Strawpoll\u2019s\nAPI</a>. Provides\nmethods for reading from and writing to strawpoll via its JSON api.</p>\n<div id=\"about\">\n<h2>About</h2>\n<p>py-strawpoll provides the following:</p>\n<p><tt>StrawpollAPIReader</tt> class containing methods:</p>\n<ul>\n<li><tt>from_json(string)</tt>: Read a strawpoll into memory from its JSON\nrepresentation</li>\n<li><tt>from_url(url)</tt>: Read a strawpoll into memory from it\u2019s URL (uses\nAPI endpoint to fetch)</li>\n<li><tt>from_apiv2(poll_id)</tt>: Read a strawpoll into memory via it\u2019s poll\nid (uses API endpoint to fetch)</li>\n<li><tt>total_votes()</tt></li>\n<li><tt>normalize()</tt>: Normalize a poll to the [0, 1] range</li>\n<li><tt>votes_for(option_string)</tt>: Get the raw count of votes for a\nspecific option string</li>\n<li><tt>normalized_votes_for(option_string)</tt>: Get the normalized votes for\na specific option string</li>\n<li><tt>winner()</tt>: Who won the poll?</li>\n<li><tt>loser()</tt>: Least favoured option</li>\n<li><tt>to_clean_dict()</tt>: Returns a python dictionary representation of\nthe poll. Ignores any atributes that are null</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<ul>\n<li>TODO: Create a PyPI package</li>\n</ul>\n</div>\n<div id=\"fetching-a-strawpoll\">\n<h3>Fetching a strawpoll</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">strawpoll</span> <span class=\"kn\">import</span> <span class=\"n\">StrawpollAPIReader</span>\n\n<span class=\"n\">json_string</span> <span class=\"o\">=</span> <span class=\"s1\">'{</span>\n  <span class=\"s2\">\"title\"</span><span class=\"p\">:</span><span class=\"s2\">\"What movie should we watch again?\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"options\"</span><span class=\"p\">:</span>  <span class=\"p\">[</span>\n    <span class=\"s2\">\"Sucker punch \"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Pirates of carribian \"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Prison logic\"</span><span class=\"p\">,</span><span class=\"s2\">\"Witchhunter\"</span>\n  <span class=\"p\">],</span>\n  <span class=\"s2\">\"multi\"</span><span class=\"p\">:</span><span class=\"n\">false</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"permissive\"</span><span class=\"p\">:</span> <span class=\"n\">false</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"captcha\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n<span class=\"p\">}</span><span class=\"s1\">'</span>\n\n<span class=\"c1\"># Fetch a poll through its API id</span>\n<span class=\"n\">poll_a</span> <span class=\"o\">=</span> <span class=\"n\">StrawpollAPIReader</span><span class=\"o\">.</span><span class=\"n\">from_apiv2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fetch a poll through its URL</span>\n<span class=\"n\">poll_b</span> <span class=\"o\">=</span> <span class=\"n\">StrawpollAPIReader</span><span class=\"o\">.</span><span class=\"n\">from_url</span><span class=\"p\">(</span><span class=\"s2\">\"https://strawpoll.me/1\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fetch a poll from its JSON dump</span>\n<span class=\"n\">poll_c</span> <span class=\"o\">=</span> <span class=\"n\">StrawpollAPIReader</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">json_string</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># These should be the same</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poll_a</span> <span class=\"o\">==</span> <span class=\"n\">poll_b</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">poll_b</span> <span class=\"o\">==</span> <span class=\"n\">poll_c</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span> <span class=\"s2\">\"Mirror images!\"</span>\n\n<span class=\"c1\"># Yada yada normalize your data</span>\n<span class=\"nb\">print</span> <span class=\"n\">poll_a</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"posting-a-strawpoll\">\n<h3>Posting a strawpoll</h3>\n<ul>\n<li>TODO: APIWriter still in the pipes</li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p><a href=\"./CHANGES.txt\" rel=\"nofollow\">CHANGES.txt</a></p>\n</div>\n\n          </div>"}, "last_serial": 1710135, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7c32cb1abf32cab75381b272add1fb49", "sha256": "a150dae519537b12fc17940b8742ebfc5f515df6a3f6ec6c40f6a9db4e387bb7"}, "downloads": -1, "filename": "PyStrawpoll-0.1.0.zip", "has_sig": false, "md5_digest": "7c32cb1abf32cab75381b272add1fb49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5493, "upload_time": "2015-09-06T06:01:38", "upload_time_iso_8601": "2015-09-06T06:01:38.905991Z", "url": "https://files.pythonhosted.org/packages/b4/57/9387f3552faea65d2a558cdf7b29bf4e3a131a65ebc4718d1935f1724141/PyStrawpoll-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8ca98fceb0aa4fff0ddf59db01e739d7", "sha256": "aadce8278584dd51ad7fc98d4ea43184f2e94fed711a1fc177de3ee263bfddab"}, "downloads": -1, "filename": "PyStrawpoll-0.1.1.zip", "has_sig": false, "md5_digest": "8ca98fceb0aa4fff0ddf59db01e739d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6646, "upload_time": "2015-09-06T06:22:36", "upload_time_iso_8601": "2015-09-06T06:22:36.930288Z", "url": "https://files.pythonhosted.org/packages/bc/99/43fa42682e450e9a69671074c538a199d640bda4cd25c75a722660fa6eb2/PyStrawpoll-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f2863ee06a793b2926b08259dc1e97c8", "sha256": "66e2329d2046c30b1f2cf4bdd6df98683f6e6766879c1ba2a2a13317f0aa2d7b"}, "downloads": -1, "filename": "PyStrawpoll-0.1.2.zip", "has_sig": false, "md5_digest": "f2863ee06a793b2926b08259dc1e97c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6687, "upload_time": "2015-09-06T06:26:20", "upload_time_iso_8601": "2015-09-06T06:26:20.208927Z", "url": "https://files.pythonhosted.org/packages/54/9a/fba38fc0605d3286a824832ebfcf94fd6be1862a47dc6682ee40ca676fd1/PyStrawpoll-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "90f61c94fd1545c666a4efa08b75e871", "sha256": "2751e0989976d785699c71d26358ff7da527a68ee5646d350b8ff95dc3e7ad31"}, "downloads": -1, "filename": "PyStrawpoll-0.1.3.zip", "has_sig": false, "md5_digest": "90f61c94fd1545c666a4efa08b75e871", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6705, "upload_time": "2015-09-06T06:28:00", "upload_time_iso_8601": "2015-09-06T06:28:00.281808Z", "url": "https://files.pythonhosted.org/packages/6f/16/0e041bd055cfaf1f4ee4dfda8b63dd42ef32dcc729aca24c7366635cd3c0/PyStrawpoll-0.1.3.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "002599cf1531057dddbe66c731a52810", "sha256": "95b4efb83aa6bef788f03deda84ca77ac89dd7791c26a66dd8f9993883a39748"}, "downloads": -1, "filename": "PyStrawpoll-0.1.4.zip", "has_sig": false, "md5_digest": "002599cf1531057dddbe66c731a52810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6623, "upload_time": "2015-09-06T09:24:08", "upload_time_iso_8601": "2015-09-06T09:24:08.523838Z", "url": "https://files.pythonhosted.org/packages/87/29/4d756deedb95227963317ac4252398c40016936efb804d66ee69751d850a/PyStrawpoll-0.1.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "002599cf1531057dddbe66c731a52810", "sha256": "95b4efb83aa6bef788f03deda84ca77ac89dd7791c26a66dd8f9993883a39748"}, "downloads": -1, "filename": "PyStrawpoll-0.1.4.zip", "has_sig": false, "md5_digest": "002599cf1531057dddbe66c731a52810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6623, "upload_time": "2015-09-06T09:24:08", "upload_time_iso_8601": "2015-09-06T09:24:08.523838Z", "url": "https://files.pythonhosted.org/packages/87/29/4d756deedb95227963317ac4252398c40016936efb804d66ee69751d850a/PyStrawpoll-0.1.4.zip", "yanked": false}], "timestamp": "Fri May  8 02:55:54 2020"}