{"info": {"author": "Robert Collins", "author_email": "robertc@robertcollins.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: System :: Distributed Computing"], "description": "CRCache\n+++++++\n\nCopyright (c) 2013 crcache contributors\n\nLicensed under either the Apache License, Version 2.0 or the BSD 3-clause\nlicense at the users choice. A copy of both licenses are available in the\nproject source as Apache-2.0 and BSD. You may not use this file except in\ncompliance with one of these two licences.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under these licenses is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\nlicense you chose for the specific language governing permissions and\nlimitations under that license.\n\nOverview\n++++++++\n\ncrcache - Compute resource cache - is a command line tool that abstracts out\nobtaining, using and reusing computing resources. This permits separation of\nproject concerns (such as 'run dpkg-buildpackage') from environmental concerns\n(such as using a Debian wheezy chroot to run the command in).\n\ncrcache lets you write programs that need to scale to multiple machines without\ntying yourself to one particular provisioning system. For instance, running\ntests locally, in lxc containers or in a compute cloud can be done with one\ncrcache call, and the user can tell crcache where (and how) to obtain the\ncompute resource to run the test in. A simple configuration system and command\nline API make it easy to reconfigure at will.\n\nThe default configuration will run commands locally with no container or any\nother isolation::\n\n    $ crcache acquire\n    local\n    $ crcache run local echo foo\n    foo\n    $ crcache release local\n\nSee the manual on https://crcache.readthedocs.org/ or in the docs/ subdirectory\nof the source tree for configuration details.\n\nDifferences to \"Cloud\" APIs\n+++++++++++++++++++++++++++\n\ncrcache differs to cloud APIs (both cloud specific and vendor neutral) in a few\nkey ways:\n\n* It focuses on running simple commands within each resources, which gives a\n  simple programming model.\n\n* Programs that layer on it do not need to know about the whole cloud computing\n  model, instead that is a matter for configuration by the user.\n\n* It manages state locally, allowing mix-and-match across many clouds and/or\n  local facilities such as chroots and containers.\n\nInstallation\n++++++++++++\n\nPip is the easiest way to install crcache::\n\n    $ pip install crcache\n\nRequirements\n++++++++++++\n\ncrcache is intended to be widely portable. It should run (and if it doesn't,\nits a bug) on any platform as long as you have:\n\n* Python 2.6+ or 3.2+.\n\n* The 'extras' Python module.\n\n* The 'six' Python module.\n\nSome of the provider plugins for cr_cache may be less portable. When a provider\ndepends on things outside the standard library (or newer than the version range\nabove), it is placed in a separate tree, so that its installation is optional.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rbtcollins/crcache", "keywords": "testing compute cache", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "crcache", "package_url": "https://pypi.org/project/crcache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/crcache/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rbtcollins/crcache"}, "release_url": "https://pypi.org/project/crcache/0.0.1-next/", "requires_dist": null, "requires_python": null, "summary": "An API for obtaining and reusing computing resources.", "version": "0.0.1-next", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"crcache\">\n<h2>CRCache</h2>\n<p>Copyright (c) 2013 crcache contributors</p>\n<p>Licensed under either the Apache License, Version 2.0 or the BSD 3-clause\nlicense at the users choice. A copy of both licenses are available in the\nproject source as Apache-2.0 and BSD. You may not use this file except in\ncompliance with one of these two licences.</p>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under these licenses is distributed on an \u201cAS IS\u201d BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\nlicense you chose for the specific language governing permissions and\nlimitations under that license.</p>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>crcache - Compute resource cache - is a command line tool that abstracts out\nobtaining, using and reusing computing resources. This permits separation of\nproject concerns (such as \u2018run dpkg-buildpackage\u2019) from environmental concerns\n(such as using a Debian wheezy chroot to run the command in).</p>\n<p>crcache lets you write programs that need to scale to multiple machines without\ntying yourself to one particular provisioning system. For instance, running\ntests locally, in lxc containers or in a compute cloud can be done with one\ncrcache call, and the user can tell crcache where (and how) to obtain the\ncompute resource to run the test in. A simple configuration system and command\nline API make it easy to reconfigure at will.</p>\n<p>The default configuration will run commands locally with no container or any\nother isolation:</p>\n<pre>$ crcache acquire\nlocal\n$ crcache run local echo foo\nfoo\n$ crcache release local\n</pre>\n<p>See the manual on <a href=\"https://crcache.readthedocs.org/\" rel=\"nofollow\">https://crcache.readthedocs.org/</a> or in the docs/ subdirectory\nof the source tree for configuration details.</p>\n</div>\n<div id=\"differences-to-cloud-apis\">\n<h2>Differences to \u201cCloud\u201d APIs</h2>\n<p>crcache differs to cloud APIs (both cloud specific and vendor neutral) in a few\nkey ways:</p>\n<ul>\n<li>It focuses on running simple commands within each resources, which gives a\nsimple programming model.</li>\n<li>Programs that layer on it do not need to know about the whole cloud computing\nmodel, instead that is a matter for configuration by the user.</li>\n<li>It manages state locally, allowing mix-and-match across many clouds and/or\nlocal facilities such as chroots and containers.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Pip is the easiest way to install crcache:</p>\n<pre>$ pip install crcache\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>crcache is intended to be widely portable. It should run (and if it doesn\u2019t,\nits a bug) on any platform as long as you have:</p>\n<ul>\n<li>Python 2.6+ or 3.2+.</li>\n<li>The \u2018extras\u2019 Python module.</li>\n<li>The \u2018six\u2019 Python module.</li>\n</ul>\n<p>Some of the provider plugins for cr_cache may be less portable. When a provider\ndepends on things outside the standard library (or newer than the version range\nabove), it is placed in a separate tree, so that its installation is optional.</p>\n</div>\n\n          </div>"}, "last_serial": 1227656, "releases": {"0.0.1-next": []}, "urls": [], "timestamp": "Fri May  8 00:42:25 2020"}