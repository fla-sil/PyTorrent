{"info": {"author": "eduardomourar", "author_email": "eduardo_demoura@yahoo.com.br", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# functionapprest\n\n[![Build Status](https://travis-ci.com/eduardomourar/python-functionapprest.svg?branch=master)](https://travis-ci.com/eduardomourar/python-functionapprest) [![Latest Version](https://img.shields.io/pypi/v/functionapprest.svg)](https://pypi.python.org/pypi/functionapprest) [![Python Support](https://img.shields.io/pypi/pyversions/functionapprest.svg)](https://pypi.python.org/pypi/functionapprest)\n\nPython routing mini-framework for [MS Azure Functions](https://azure.microsoft.com/en-us/services/functions/) with optional JSON-schema validation.\n\n** This repository is based heavily on [lambdarest project](https://github.com/trustpilot/python-lambdarest)\n\n### Features\n\n* `functionapp_handler` function constructor with built-in dispatcher\n* Decorator to register functions to handle HTTP methods\n* Optional JSON-schema input validation using same decorator\n\n## Installation\n\nInstall the package from [PyPI](http://pypi.python.org/pypi/) using [pip](https://pip.pypa.io/):\n\n```bash\npip install functionapprest\n```\n\n## Getting Started\n\nThis module helps you to handle different HTTP methods in your Azure Functions.\n\n```python\nfrom functionapprest import functionapp_handler\n\n@functionapp_handler.handle('get')\ndef my_own_get(event):\n    return {'this': 'will be json dumped'}\n```\n\n## Advanced Usage\n\nOptionally you can validate an incoming JSON body against a JSON schema:\n\n```python\nmy_schema = {\n    '$schema': 'http://json-schema.org/draft-04/schema#',\n    'type': 'object',\n    'properties': {\n        'body':{\n            'type': 'object',\n            'properties': {\n                'foo': {\n                    'type': 'string'\n                }\n            }\n        }\n    }\n}\n\n@functionapp_handler.handle('get', path='/with-schema/', schema=my_schema)\ndef my_own_get(event):\n    return {'this': 'will be json dumped'}\n```\n\n### Query Params\n\nQuery params are also analyzed and validate with JSON schemas.\nQuery arrays are expected to be comma separated, all numbers are converted to floats.\n\n```python\nmy_schema = {\n    '$schema': 'http://json-schema.org/draft-04/schema#',\n    'type': 'object',\n    'properties': {\n        'query':{\n            'type': 'object',\n            'properties': {\n                'foo': {\n                    'type': 'array',\n                    'items': {\n                        'type': 'number'\n                    }\n                }\n            }\n        }\n    }\n}\n\n@functionapp_handler.handle('get', path='/with-params/', schema=my_schema)\ndef my_own_get(event):\n    return event.json['query']\n\n```\n\n### Routing\n\nYou can also specify which path to react on for individual handlers using the `path` param:\n\n```python\n@functionapp_handler.handle('get', path='/foo/bar/baz')\ndef my_own_get(event):\n    return {'this': 'will be json dumped'}\n```\n\nAnd you can specify path parameters as well, which will be passed as keyword arguments:\n\n```python\n@functionapp_handler.handle('get', path='/foo/<int:id>/')\ndef my_own_get(event, id):\n    return {'my-id': id}\n```\n\nOr use the proxy endpoint:\n```python\n@functionapp_handler.handle('get', path='/bar/<path:path>')\ndef my_own_get(event, path):\n    return {'path': path}\n```\n\n## Using within Function App\n\n**function.json**\n\n```json\n{\n  \"scriptFile\": \"handler.py\",\n  \"bindings\": [\n    {\n      \"authLevel\": \"anonymous\",\n      \"type\": \"httpTrigger\",\n      \"direction\": \"in\",\n      \"name\": \"req\",\n      \"methods\": [\n        \"get\"\n      ],\n      \"route\": \"products/{product_id}\"\n    },\n    {\n      \"type\": \"http\",\n      \"direction\": \"out\",\n      \"name\": \"$return\"\n    }\n  ]\n}\n```\n\n**handler.py**\n\n```python\nfrom functionapprest import functionapp_handler, Request\n\n@functionapp_handler.handle('get', path='/products/<path:product_id>/')\ndef list_products(req: Request, product_id):\n    query = req.json.get('query', {})\n    body = req.json.get('body', {})\n    headers = req.get('headers', {})\n    params = req.get('params', {})\n    response = {\n        'method': req.method,\n        'url': req.url,\n        'headers': headers,\n        'params': params,\n        'query': query,\n        'body': body\n    }\n    return response\n\nmain = functionapp_handler\n```\n\n## Tests\n\nYou can use pytest to run tests against your current Python version. To run tests for current python version run `pytest`\n\n\nSee [`setup.py`](setup.py) for test dependencies and install them with `pipenv install --dev`.\n\n## Contributors\neduardomourar", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eduardomourar/python-functionapprest", "keywords": "functionapp azure rest json schema jsonschema", "license": "", "maintainer": "", "maintainer_email": "", "name": "functionapprest", "package_url": "https://pypi.org/project/functionapprest/", "platform": "", "project_url": "https://pypi.org/project/functionapprest/", "project_urls": {"Homepage": "https://github.com/eduardomourar/python-functionapprest"}, "release_url": "https://pypi.org/project/functionapprest/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Micro framework for azure functions with optional json schema validation", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>functionapprest</h1>\n<p><a href=\"https://travis-ci.com/eduardomourar/python-functionapprest\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1e001794cd1098d564803712bc83cef4d3454b9/68747470733a2f2f7472617669732d63692e636f6d2f6564756172646f6d6f757261722f707974686f6e2d66756e6374696f6e617070726573742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/functionapprest\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c45b35771c254031d5011741e5a04825583bad0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66756e6374696f6e617070726573742e737667\"></a> <a href=\"https://pypi.python.org/pypi/functionapprest\" rel=\"nofollow\"><img alt=\"Python Support\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f0b3ae6d38dfbc1ce2b23849c451012cc174b4f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f66756e6374696f6e617070726573742e737667\"></a></p>\n<p>Python routing mini-framework for <a href=\"https://azure.microsoft.com/en-us/services/functions/\" rel=\"nofollow\">MS Azure Functions</a> with optional JSON-schema validation.</p>\n<p>** This repository is based heavily on <a href=\"https://github.com/trustpilot/python-lambdarest\" rel=\"nofollow\">lambdarest project</a></p>\n<h3>Features</h3>\n<ul>\n<li><code>functionapp_handler</code> function constructor with built-in dispatcher</li>\n<li>Decorator to register functions to handle HTTP methods</li>\n<li>Optional JSON-schema input validation using same decorator</li>\n</ul>\n<h2>Installation</h2>\n<p>Install the package from <a href=\"http://pypi.python.org/pypi/\" rel=\"nofollow\">PyPI</a> using <a href=\"https://pip.pypa.io/\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install functionapprest\n</pre>\n<h2>Getting Started</h2>\n<p>This module helps you to handle different HTTP methods in your Azure Functions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">functionapprest</span> <span class=\"kn\">import</span> <span class=\"n\">functionapp_handler</span>\n\n<span class=\"nd\">@functionapp_handler</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_own_get</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'this'</span><span class=\"p\">:</span> <span class=\"s1\">'will be json dumped'</span><span class=\"p\">}</span>\n</pre>\n<h2>Advanced Usage</h2>\n<p>Optionally you can validate an incoming JSON body against a JSON schema:</p>\n<pre><span class=\"n\">my_schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/draft-04/schema#'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'body'</span><span class=\"p\">:{</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@functionapp_handler</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/with-schema/'</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">my_schema</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_own_get</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'this'</span><span class=\"p\">:</span> <span class=\"s1\">'will be json dumped'</span><span class=\"p\">}</span>\n</pre>\n<h3>Query Params</h3>\n<p>Query params are also analyzed and validate with JSON schemas.\nQuery arrays are expected to be comma separated, all numbers are converted to floats.</p>\n<pre><span class=\"n\">my_schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/draft-04/schema#'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'query'</span><span class=\"p\">:{</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'array'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'number'</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@functionapp_handler</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/with-params/'</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">my_schema</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_own_get</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">[</span><span class=\"s1\">'query'</span><span class=\"p\">]</span>\n</pre>\n<h3>Routing</h3>\n<p>You can also specify which path to react on for individual handlers using the <code>path</code> param:</p>\n<pre><span class=\"nd\">@functionapp_handler</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/foo/bar/baz'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_own_get</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'this'</span><span class=\"p\">:</span> <span class=\"s1\">'will be json dumped'</span><span class=\"p\">}</span>\n</pre>\n<p>And you can specify path parameters as well, which will be passed as keyword arguments:</p>\n<pre><span class=\"nd\">@functionapp_handler</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/foo/&lt;int:id&gt;/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_own_get</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'my-id'</span><span class=\"p\">:</span> <span class=\"nb\">id</span><span class=\"p\">}</span>\n</pre>\n<p>Or use the proxy endpoint:</p>\n<pre><span class=\"nd\">@functionapp_handler</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/bar/&lt;path:path&gt;'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_own_get</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"n\">path</span><span class=\"p\">}</span>\n</pre>\n<h2>Using within Function App</h2>\n<p><strong>function.json</strong></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"scriptFile\"</span><span class=\"p\">:</span> <span class=\"s2\">\"handler.py\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"bindings\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"authLevel\"</span><span class=\"p\">:</span> <span class=\"s2\">\"anonymous\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"httpTrigger\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"direction\"</span><span class=\"p\">:</span> <span class=\"s2\">\"in\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"req\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"methods\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"get\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"products/{product_id}\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"direction\"</span><span class=\"p\">:</span> <span class=\"s2\">\"out\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$return\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>handler.py</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">functionapprest</span> <span class=\"kn\">import</span> <span class=\"n\">functionapp_handler</span><span class=\"p\">,</span> <span class=\"n\">Request</span>\n\n<span class=\"nd\">@functionapp_handler</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/products/&lt;path:product_id&gt;/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">list_products</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">product_id</span><span class=\"p\">):</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'query'</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'headers'</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'params'</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'method'</span><span class=\"p\">:</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span>\n        <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span>\n        <span class=\"s1\">'headers'</span><span class=\"p\">:</span> <span class=\"n\">headers</span><span class=\"p\">,</span>\n        <span class=\"s1\">'params'</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"p\">,</span>\n        <span class=\"s1\">'query'</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">,</span>\n        <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"n\">body</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"n\">functionapp_handler</span>\n</pre>\n<h2>Tests</h2>\n<p>You can use pytest to run tests against your current Python version. To run tests for current python version run <code>pytest</code></p>\n<p>See <a href=\"setup.py\" rel=\"nofollow\"><code>setup.py</code></a> for test dependencies and install them with <code>pipenv install --dev</code>.</p>\n<h2>Contributors</h2>\n<p>eduardomourar</p>\n\n          </div>"}, "last_serial": 5329480, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "503dc4246796715d8027f4a82510fa0a", "sha256": "6cdf38b738cd382ea2d41a4077820401d6f4f2588510821f708c31d6373f4131"}, "downloads": -1, "filename": "functionapprest-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "503dc4246796715d8027f4a82510fa0a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7649, "upload_time": "2019-02-21T20:40:10", "upload_time_iso_8601": "2019-02-21T20:40:10.940098Z", "url": "https://files.pythonhosted.org/packages/9b/bd/fb2fc161e062a58c8a34f1d08359e126bf8fa74e815883b5881afe09413e/functionapprest-0.0.1-py2.py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "367125b722e60381699f475ba8b0b7a8", "sha256": "44a4071378f338a74d4828e36d2c83a963a201ed3fd2a320c77a43dea42587d9"}, "downloads": -1, "filename": "functionapprest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "367125b722e60381699f475ba8b0b7a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8911, "upload_time": "2019-02-22T17:14:56", "upload_time_iso_8601": "2019-02-22T17:14:56.084320Z", "url": "https://files.pythonhosted.org/packages/70/01/b27fc9a3e458fe40f11f415dee726cdb1c86e07827807aeaab6d98a025d5/functionapprest-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "aa2b00a351cb21a077d25c288a55c560", "sha256": "fd288f993946a89e1f25ad40b17a3b40ca16f7d05a8e99930e44bcbe89da4e9e"}, "downloads": -1, "filename": "functionapprest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "aa2b00a351cb21a077d25c288a55c560", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9398, "upload_time": "2019-02-27T00:28:56", "upload_time_iso_8601": "2019-02-27T00:28:56.212424Z", "url": "https://files.pythonhosted.org/packages/76/f3/da34289157f83e144f7152c0d4d9bf3c5133fa8bcb4cda18121e704a912a/functionapprest-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c3b87848374f05a7ede5feb968e2011f", "sha256": "6a2f1ce221594a7af17c758726f00001355adc9f6ea6e1ddbd50f92c9175b113"}, "downloads": -1, "filename": "functionapprest-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c3b87848374f05a7ede5feb968e2011f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9503, "upload_time": "2019-02-28T00:43:25", "upload_time_iso_8601": "2019-02-28T00:43:25.412929Z", "url": "https://files.pythonhosted.org/packages/f0/66/84916e078a6b9f867fc46065a3ef0865b185f068d960019723e062c1472e/functionapprest-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "17176077dc5ec79f3a494f9573b4f78b", "sha256": "67133dd34a248cb23afa4dc8fd5b690ae021810b23f3b02c2fc1d93c1618086a"}, "downloads": -1, "filename": "functionapprest-0.2.0.tar.gz", "has_sig": false, "md5_digest": "17176077dc5ec79f3a494f9573b4f78b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9890, "upload_time": "2019-05-28T23:17:49", "upload_time_iso_8601": "2019-05-28T23:17:49.875938Z", "url": "https://files.pythonhosted.org/packages/af/20/3ffd89d5145dc11e0950062824cefd823ff826e90d05a025764819a96604/functionapprest-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17176077dc5ec79f3a494f9573b4f78b", "sha256": "67133dd34a248cb23afa4dc8fd5b690ae021810b23f3b02c2fc1d93c1618086a"}, "downloads": -1, "filename": "functionapprest-0.2.0.tar.gz", "has_sig": false, "md5_digest": "17176077dc5ec79f3a494f9573b4f78b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9890, "upload_time": "2019-05-28T23:17:49", "upload_time_iso_8601": "2019-05-28T23:17:49.875938Z", "url": "https://files.pythonhosted.org/packages/af/20/3ffd89d5145dc11e0950062824cefd823ff826e90d05a025764819a96604/functionapprest-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:41 2020"}