{"info": {"author": "Tim Fischer", "author_email": "t.fischer98@hotmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyCells\n\nWhilst being very bored recently I started playing around with simulating cellular automata once again.\nBut to challenge myself a bit more than usual I set three specific limitations that made this a bit harder\nthan I was used to:\n1. The simulation functions should be able to handle n-dimensional rules and states.\n2. The rules should be given as integers.\n3. The state should be represented as an integer, making use of the fact that the whole state consists of\n   a n-dimensional array of booleans that can be flattened.\n   \nAnother additional burden I put on to myself was to implement multiple unique styles of rules:\n1. Pattern based rules, such as the popular 110 or 30.\n2. Neighbor count based rules, such as Conway's Game of Life.\n\n\n## Usage\n\n### From PyPi\n1. run `pip install pycells`\n2. run `pycells` and check what options you have\n\n### From source\n1. clone this repo\n2. setup virtualenv using python `> 3.7` and `./requirements.txt`\n3. run `python simulate.py`\n\n\nI implemented both a cli and a file-based simulation configuration system. The cli is structured\nas follows:\n\n```\n$ python simulation.py\n\nUsage: simulate.py [OPTIONS]\n\n  Simulate n-dimensional cellular automata using some of the most common\n  methods.\n\nOptions:\n  -p, --preset [conway|elementary]\n                                  simulation preset to use\n  -f, --file FILENAME             file to load simulation config from\n  -d, --dimensions TEXT           dimensions of the simulation, format:\n                                  N[xN[xN[...]]\n  -m, --method [count|pattern]    simulation method\n  -r, --rule INTEGER              rule to simulate\n  -i, --iterations INTEGER        iterations to simulate\n  -n, --neighborhood-radius INTEGER\n                                  neighborhood radius to use\n  -o, --out FILE                  path to save the output to\n  --initial-state INTEGER         initial simulation state\n  --parallelize                   enabled parallel calculation of cells per\n                                  state transition\n  --scaling INTEGER               scaling to apply to output\n  --format [gif|png|npy|txt]      format to output as, this skips the default\n                                  which is to simply use the most suitable for\n                                  the given number of dimensions\n  --help                          Show this message and exit.\n```\n\nTo make use of file based configuration options simply write a YAML file that contains all\nthe necessary parameters. For some examples have a look in the `./examples` directory.\nIf you want to write binary numbers in these files I've added two tags to the yaml-parser\n`!b` and `!br` (reverse). Using these files is as simple as running:\n\n```\npython simulate.py -f examples/glider.yml\n```\n\nUsing the predefined presets is also similar, to use them simply make use of the `-p` option\nand fill in the rest of the undefined parameters:\n\n```\npython simulate.py -p conway -d 64x64 -i 32\n```\n\n## Notice\nThough this implementation can handle n-dimensional states as of now I have only implemented\ngraphical visualizations for 1D and 2D automata. If you want to create your own visualization\nyou can specify one of the text based formats (e.g. `txt`, `npy`).\n\n## Examples\n\n_1D pattern rule 772 radius=2_<br>\n![772](https://raw.githubusercontent.com/tim-fi/pycells/master/images/772.png)\n\n_2D pattern rule 12345678 radius=1_<br>\n![12345678](https://raw.githubusercontent.com/tim-fi/pycells/master/images/12345678.gif)\n\n_Conway's Game of Life (2D count rule 6152 radius=1)_<br>\n![conway](https://raw.githubusercontent.com/tim-fi/pycells/master/images/long_conway.gif)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tim-fi/pycells", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pycells", "package_url": "https://pypi.org/project/pycells/", "platform": "", "project_url": "https://pypi.org/project/pycells/", "project_urls": {"Homepage": "https://github.com/tim-fi/pycells"}, "release_url": "https://pypi.org/project/pycells/0.1.6/", "requires_dist": null, "requires_python": ">=3.7", "summary": "A small package for simulating simple cellular automata.", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyCells</h1>\n<p>Whilst being very bored recently I started playing around with simulating cellular automata once again.\nBut to challenge myself a bit more than usual I set three specific limitations that made this a bit harder\nthan I was used to:</p>\n<ol>\n<li>The simulation functions should be able to handle n-dimensional rules and states.</li>\n<li>The rules should be given as integers.</li>\n<li>The state should be represented as an integer, making use of the fact that the whole state consists of\na n-dimensional array of booleans that can be flattened.</li>\n</ol>\n<p>Another additional burden I put on to myself was to implement multiple unique styles of rules:</p>\n<ol>\n<li>Pattern based rules, such as the popular 110 or 30.</li>\n<li>Neighbor count based rules, such as Conway's Game of Life.</li>\n</ol>\n<h2>Usage</h2>\n<h3>From PyPi</h3>\n<ol>\n<li>run <code>pip install pycells</code></li>\n<li>run <code>pycells</code> and check what options you have</li>\n</ol>\n<h3>From source</h3>\n<ol>\n<li>clone this repo</li>\n<li>setup virtualenv using python <code>&gt; 3.7</code> and <code>./requirements.txt</code></li>\n<li>run <code>python simulate.py</code></li>\n</ol>\n<p>I implemented both a cli and a file-based simulation configuration system. The cli is structured\nas follows:</p>\n<pre><code>$ python simulation.py\n\nUsage: simulate.py [OPTIONS]\n\n  Simulate n-dimensional cellular automata using some of the most common\n  methods.\n\nOptions:\n  -p, --preset [conway|elementary]\n                                  simulation preset to use\n  -f, --file FILENAME             file to load simulation config from\n  -d, --dimensions TEXT           dimensions of the simulation, format:\n                                  N[xN[xN[...]]\n  -m, --method [count|pattern]    simulation method\n  -r, --rule INTEGER              rule to simulate\n  -i, --iterations INTEGER        iterations to simulate\n  -n, --neighborhood-radius INTEGER\n                                  neighborhood radius to use\n  -o, --out FILE                  path to save the output to\n  --initial-state INTEGER         initial simulation state\n  --parallelize                   enabled parallel calculation of cells per\n                                  state transition\n  --scaling INTEGER               scaling to apply to output\n  --format [gif|png|npy|txt]      format to output as, this skips the default\n                                  which is to simply use the most suitable for\n                                  the given number of dimensions\n  --help                          Show this message and exit.\n</code></pre>\n<p>To make use of file based configuration options simply write a YAML file that contains all\nthe necessary parameters. For some examples have a look in the <code>./examples</code> directory.\nIf you want to write binary numbers in these files I've added two tags to the yaml-parser\n<code>!b</code> and <code>!br</code> (reverse). Using these files is as simple as running:</p>\n<pre><code>python simulate.py -f examples/glider.yml\n</code></pre>\n<p>Using the predefined presets is also similar, to use them simply make use of the <code>-p</code> option\nand fill in the rest of the undefined parameters:</p>\n<pre><code>python simulate.py -p conway -d 64x64 -i 32\n</code></pre>\n<h2>Notice</h2>\n<p>Though this implementation can handle n-dimensional states as of now I have only implemented\ngraphical visualizations for 1D and 2D automata. If you want to create your own visualization\nyou can specify one of the text based formats (e.g. <code>txt</code>, <code>npy</code>).</p>\n<h2>Examples</h2>\n<p><em>1D pattern rule 772 radius=2</em><br>\n<img alt=\"772\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ab338f832befd39241a7924d87c4fca74e5b572/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74696d2d66692f707963656c6c732f6d61737465722f696d616765732f3737322e706e67\"></p>\n<p><em>2D pattern rule 12345678 radius=1</em><br>\n<img alt=\"12345678\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f471eeeb5f673aa2c6b67d9c4e29750f17b8efa/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74696d2d66692f707963656c6c732f6d61737465722f696d616765732f31323334353637382e676966\"></p>\n<p><em>Conway's Game of Life (2D count rule 6152 radius=1)</em><br>\n<img alt=\"conway\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4017f42d2503ae3218ac6a30fb4136b0fbf2bcae/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74696d2d66692f707963656c6c732f6d61737465722f696d616765732f6c6f6e675f636f6e7761792e676966\"></p>\n\n          </div>"}, "last_serial": 6735406, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "37cee57a838c04184fd7a99eb00c334b", "sha256": "dc1c50a6725016a1e405ba1006ebf1dbc237b374a96c28aa7f650f30e7d727d9"}, "downloads": -1, "filename": "pycells-0.1.1.tar.gz", "has_sig": false, "md5_digest": "37cee57a838c04184fd7a99eb00c334b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7201, "upload_time": "2020-02-29T22:24:32", "upload_time_iso_8601": "2020-02-29T22:24:32.994913Z", "url": "https://files.pythonhosted.org/packages/af/a9/79122d9beabf4eb9f7eb16aab4700ede16caa824d13c2efb635e3c0c3247/pycells-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "df8eb4aa87882514999bd6297f924007", "sha256": "91a8b5ded19cda9ae8463e1ce9c2782c85b8dd4e2acf101e591cb787e3cdf1ac"}, "downloads": -1, "filename": "pycells-0.1.2.tar.gz", "has_sig": false, "md5_digest": "df8eb4aa87882514999bd6297f924007", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8893, "upload_time": "2020-02-29T22:30:14", "upload_time_iso_8601": "2020-02-29T22:30:14.229989Z", "url": "https://files.pythonhosted.org/packages/9f/9b/2e441e6ae176bef3027e7406dc336bd3b01aa9932961849e996aa9057553/pycells-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "cb100ce8a38f898c9924c2cdb4b0a91b", "sha256": "c00f7de77b4cecedd235171d2c9f1042d34a5cde274ab22e5ee0dd584c4fcb0d"}, "downloads": -1, "filename": "pycells-0.1.3.tar.gz", "has_sig": false, "md5_digest": "cb100ce8a38f898c9924c2cdb4b0a91b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8924, "upload_time": "2020-02-29T22:38:12", "upload_time_iso_8601": "2020-02-29T22:38:12.496559Z", "url": "https://files.pythonhosted.org/packages/c1/26/414c82d74ff837fe561fe19fa06e902923083b98985f2c0e20407648b544/pycells-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "88321618a68a3258f4b4b28bb4e9040e", "sha256": "e417fd941e067fdc214cf0fff771369efb586bbf4a6a4082d7a03d522f3c04b7"}, "downloads": -1, "filename": "pycells-0.1.4.tar.gz", "has_sig": false, "md5_digest": "88321618a68a3258f4b4b28bb4e9040e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8986, "upload_time": "2020-02-29T22:41:50", "upload_time_iso_8601": "2020-02-29T22:41:50.517567Z", "url": "https://files.pythonhosted.org/packages/c8/8a/db1f27dc6339168d741bc345b0558d9538b76544f0c2567a135c002207ef/pycells-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "b23ff6f171f8a5364ab91d80d2bd4661", "sha256": "f773626624138707f0bcdfee4efffe5a352c39e8830b4baed1e8f1829790c248"}, "downloads": -1, "filename": "pycells-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b23ff6f171f8a5364ab91d80d2bd4661", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9339, "upload_time": "2020-03-02T16:53:16", "upload_time_iso_8601": "2020-03-02T16:53:16.913267Z", "url": "https://files.pythonhosted.org/packages/26/fa/eeba405bde3f2c857af2a5a20d39dafc0e89a0ae2d39bb688c70358c1d19/pycells-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "826802778e30eea1a23eb79694cbb3ef", "sha256": "75ee51f44a16966fe54a3b46f6a6760fe5f496f339d4a811a24bce03cb3cc8c2"}, "downloads": -1, "filename": "pycells-0.1.6.tar.gz", "has_sig": false, "md5_digest": "826802778e30eea1a23eb79694cbb3ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9517, "upload_time": "2020-03-02T18:49:12", "upload_time_iso_8601": "2020-03-02T18:49:12.699435Z", "url": "https://files.pythonhosted.org/packages/b1/54/bf0ba6b7bf1cb83c75c7aec04e0de8a229f1edcbba158970bbcfc557ca0c/pycells-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "826802778e30eea1a23eb79694cbb3ef", "sha256": "75ee51f44a16966fe54a3b46f6a6760fe5f496f339d4a811a24bce03cb3cc8c2"}, "downloads": -1, "filename": "pycells-0.1.6.tar.gz", "has_sig": false, "md5_digest": "826802778e30eea1a23eb79694cbb3ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9517, "upload_time": "2020-03-02T18:49:12", "upload_time_iso_8601": "2020-03-02T18:49:12.699435Z", "url": "https://files.pythonhosted.org/packages/b1/54/bf0ba6b7bf1cb83c75c7aec04e0de8a229f1edcbba158970bbcfc557ca0c/pycells-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:38 2020"}