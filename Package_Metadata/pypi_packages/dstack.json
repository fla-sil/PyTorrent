{"info": {"author": "swordhands", "author_email": "team@dstack.ai", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Visualization"], "description": "# dstack.ai\n\n## Installation\n\nThe **dstack** package and **command line tool** must be installed with either **pip** or **Conda**:\n\n```bash\npip install dstack\n```\n\nNote, *only* Python 3 is supported and if you use **pip**, it is highly recommended to use **virtualenv** to manage local environment. \n\n## Configuration\n\nBefore you can use **dstack package** in your code, you must run the **dstack command line** tool configure a **dstack profile** where you specify your [dstack.ai](https://dstack.ai) username and token.\n\nConfiguring **dstack profiles** separately from your code, allows you to make the code safe and not include plain secret tokens.\n\nConfiguring a **dstack profile** can be done by the following command:\n\n```bash\ndstack config --token <TOKEN> --user <USER>\n```\nor simply\n```bash\ndstack config\n```\nIn this case, the **dstack profile** name will be `default`. You can change it by including `--profile <PROFILE NAME>` in your command. This allows you to configure multiple profiles and refer to them from your code by their names.\n\nBy default, the configuration profile is stored locally, i.e. in your working directory: `<WORKING_DIRECTORY>/.dstack/config.yaml`\n\nIf you use proxy it would be useful to disable SSL certificate check. To do that use `--no-verify` option for selected profile in command line.\n\nSee [CLI Reference](https://docs.dstack.ai/cli-reference) to more information about command line tools or type `dstack config --help`.\n\n## Publishing simple plots\n\nOnce the **dstack profile** is configured, you can publish plots from your Python program or Jupyter notebook. Let's consider the simpliest example, line plot using [matplotlib](https://matplotlib.org/) library, but you can use [bokeh](https://docs.bokeh.org/en/latest/index.html) and [plotly](https://plot.ly) plots instead of matplotlib in the same way: \n```python\nimport matplotlib.pyplot as plt\nfrom dstack import push_frame\n\nfig = plt.figure()\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\n\npush_frame(\"simple\", fig, \"My first plot\")\n```\n\n## Publishing interactive plots\n\nIn some cases, you want to have plots that are interactive and that can change when the user change its parameters. Suppose you want to publish a line plot that depends on the value of the parameter `Coefficient` (slope).\n```python\nimport matplotlib.pyplot as plt\nfrom dstack import create_frame\n\ndef line_plot(a):\n    xs = range(0, 21)\n    ys = [a * x for x in xs]\n    fig = plt.figure()\n    plt.axis([0, 20, 0, 20])\n    plt.plot(xs, ys)\n    return fig\n\n\nframe = create_frame(\"line_plot\")\ncoeff = [0.5, 1.0, 1.5, 2.0]\n\nfor c in coeff:\n    frame.commit(line_plot(c), f\"Line plot with the coefficient of {c}\", Coefficient=c)\n\nframe.push()\n```\nIn case when parameter's name contains space characters, `params` dictionary argument must be used, e.g.:\n```python\nframe.commit(my_plot, \"My plot description\", params={\"My parameter\": 0.02})\n```  \nOf course, you can combine two approaches together, it can be especially useful in case of \ncomprehensive frames with multiple parameters. In this case parameters which are passed by named arguments\nwill be merged to `params` dictionary. So, the following line\n```python\nframe.commit(my_plot, \"My plot description\", params={\"My parameter\": 0.02}, other=True)\n```\nproduces the same result as this one:\n```python\nframe.commit(my_plot, \"My plot description\", params={\"My parameter\": 0.02, \"other\": True})\n```\nYou can use `push` with message to add information related \nto this particular revision: `push(\"Fix log scale\")`. Function `push_frame` can accept message as well.\n\n## Working with datasets\nThe **dstack**  package can be used not only publishing plots from popular visualizations packages,\nbit to publish [pandas](https://pandas.pydata.org/) data frame as well. How you can do it?\nIt can be done in the same way as in the case of plots by replacing plot to pandas data frame object.\nHere is an example:\n```python\nimport pandas as pd\nfrom dstack import push_frame\nraw_data = {\"first_name\": [\"John\", \"Donald\", \"Maryam\", \"Don\", \"Andrey\"], \n        \"last_name\": [\"Milnor\", \"Knuth\", \"Mirzakhani\", \"Zagier\", \"Okunkov\"], \n        \"birth_year\": [1931, 1938, 1977, 1951, 1969], \n        \"school\": [\"Princeton\", \"Stanford\", \"Stanford\", \"MPIM\", \"Princeton\"]}\ndf = pd.DataFrame(raw_data, columns = [\"first_name\", \"last_name\", \"birth_year\", \"school\"])\npush_frame(\"my_data\", df, \"DataFrame example\")\n```\nIn some cases you not only want to store dataset but retrieve it. You can `pull` data frame\nobject from the stack:\n```python\nimport pandas as pd\nfrom dstack import pull\ndf = pd.read_csv(pull(\"my_data\"))\n```\nAs in the case of plots you can use parameters for data frames too. You can also use\ndata frames and plots in the same frame (with certain parameters).\n\n## Documentation\n\nFor more details on the API and code samples, check out the [docs](https://docs.dstack.ai).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://dstack.ai", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "dstack", "package_url": "https://pypi.org/project/dstack/", "platform": "", "project_url": "https://pypi.org/project/dstack/", "project_urls": {"Homepage": "https://dstack.ai"}, "release_url": "https://pypi.org/project/dstack/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "An open-source library to publish plots", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dstack.ai</h1>\n<h2>Installation</h2>\n<p>The <strong>dstack</strong> package and <strong>command line tool</strong> must be installed with either <strong>pip</strong> or <strong>Conda</strong>:</p>\n<pre>pip install dstack\n</pre>\n<p>Note, <em>only</em> Python 3 is supported and if you use <strong>pip</strong>, it is highly recommended to use <strong>virtualenv</strong> to manage local environment.</p>\n<h2>Configuration</h2>\n<p>Before you can use <strong>dstack package</strong> in your code, you must run the <strong>dstack command line</strong> tool configure a <strong>dstack profile</strong> where you specify your <a href=\"https://dstack.ai\" rel=\"nofollow\">dstack.ai</a> username and token.</p>\n<p>Configuring <strong>dstack profiles</strong> separately from your code, allows you to make the code safe and not include plain secret tokens.</p>\n<p>Configuring a <strong>dstack profile</strong> can be done by the following command:</p>\n<pre>dstack config --token &lt;TOKEN&gt; --user &lt;USER&gt;\n</pre>\n<p>or simply</p>\n<pre>dstack config\n</pre>\n<p>In this case, the <strong>dstack profile</strong> name will be <code>default</code>. You can change it by including <code>--profile &lt;PROFILE NAME&gt;</code> in your command. This allows you to configure multiple profiles and refer to them from your code by their names.</p>\n<p>By default, the configuration profile is stored locally, i.e. in your working directory: <code>&lt;WORKING_DIRECTORY&gt;/.dstack/config.yaml</code></p>\n<p>If you use proxy it would be useful to disable SSL certificate check. To do that use <code>--no-verify</code> option for selected profile in command line.</p>\n<p>See <a href=\"https://docs.dstack.ai/cli-reference\" rel=\"nofollow\">CLI Reference</a> to more information about command line tools or type <code>dstack config --help</code>.</p>\n<h2>Publishing simple plots</h2>\n<p>Once the <strong>dstack profile</strong> is configured, you can publish plots from your Python program or Jupyter notebook. Let's consider the simpliest example, line plot using <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> library, but you can use <a href=\"https://docs.bokeh.org/en/latest/index.html\" rel=\"nofollow\">bokeh</a> and <a href=\"https://plot.ly\" rel=\"nofollow\">plotly</a> plots instead of matplotlib in the same way:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dstack</span> <span class=\"kn\">import</span> <span class=\"n\">push_frame</span>\n\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">])</span>\n\n<span class=\"n\">push_frame</span><span class=\"p\">(</span><span class=\"s2\">\"simple\"</span><span class=\"p\">,</span> <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"s2\">\"My first plot\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Publishing interactive plots</h2>\n<p>In some cases, you want to have plots that are interactive and that can change when the user change its parameters. Suppose you want to publish a line plot that depends on the value of the parameter <code>Coefficient</code> (slope).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dstack</span> <span class=\"kn\">import</span> <span class=\"n\">create_frame</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">line_plot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)</span>\n    <span class=\"n\">ys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">xs</span><span class=\"p\">]</span>\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">])</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">fig</span>\n\n\n<span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">create_frame</span><span class=\"p\">(</span><span class=\"s2\">\"line_plot\"</span><span class=\"p\">)</span>\n<span class=\"n\">coeff</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">coeff</span><span class=\"p\">:</span>\n    <span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">line_plot</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"sa\">f</span><span class=\"s2\">\"Line plot with the coefficient of </span><span class=\"si\">{</span><span class=\"n\">c</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">Coefficient</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">)</span>\n\n<span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">()</span>\n</pre>\n<p>In case when parameter's name contains space characters, <code>params</code> dictionary argument must be used, e.g.:</p>\n<pre><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">my_plot</span><span class=\"p\">,</span> <span class=\"s2\">\"My plot description\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"My parameter\"</span><span class=\"p\">:</span> <span class=\"mf\">0.02</span><span class=\"p\">})</span>\n</pre>\n<p>Of course, you can combine two approaches together, it can be especially useful in case of\ncomprehensive frames with multiple parameters. In this case parameters which are passed by named arguments\nwill be merged to <code>params</code> dictionary. So, the following line</p>\n<pre><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">my_plot</span><span class=\"p\">,</span> <span class=\"s2\">\"My plot description\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"My parameter\"</span><span class=\"p\">:</span> <span class=\"mf\">0.02</span><span class=\"p\">},</span> <span class=\"n\">other</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>produces the same result as this one:</p>\n<pre><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">my_plot</span><span class=\"p\">,</span> <span class=\"s2\">\"My plot description\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"My parameter\"</span><span class=\"p\">:</span> <span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s2\">\"other\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n</pre>\n<p>You can use <code>push</code> with message to add information related\nto this particular revision: <code>push(\"Fix log scale\")</code>. Function <code>push_frame</code> can accept message as well.</p>\n<h2>Working with datasets</h2>\n<p>The <strong>dstack</strong>  package can be used not only publishing plots from popular visualizations packages,\nbit to publish <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas</a> data frame as well. How you can do it?\nIt can be done in the same way as in the case of plots by replacing plot to pandas data frame object.\nHere is an example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dstack</span> <span class=\"kn\">import</span> <span class=\"n\">push_frame</span>\n<span class=\"n\">raw_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Donald\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Maryam\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Don\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Andrey\"</span><span class=\"p\">],</span> \n        <span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Milnor\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Knuth\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Mirzakhani\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Zagier\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Okunkov\"</span><span class=\"p\">],</span> \n        <span class=\"s2\">\"birth_year\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1931</span><span class=\"p\">,</span> <span class=\"mi\">1938</span><span class=\"p\">,</span> <span class=\"mi\">1977</span><span class=\"p\">,</span> <span class=\"mi\">1951</span><span class=\"p\">,</span> <span class=\"mi\">1969</span><span class=\"p\">],</span> \n        <span class=\"s2\">\"school\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Princeton\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Stanford\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Stanford\"</span><span class=\"p\">,</span> <span class=\"s2\">\"MPIM\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Princeton\"</span><span class=\"p\">]}</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">raw_data</span><span class=\"p\">,</span> <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"first_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"last_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"birth_year\"</span><span class=\"p\">,</span> <span class=\"s2\">\"school\"</span><span class=\"p\">])</span>\n<span class=\"n\">push_frame</span><span class=\"p\">(</span><span class=\"s2\">\"my_data\"</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s2\">\"DataFrame example\"</span><span class=\"p\">)</span>\n</pre>\n<p>In some cases you not only want to store dataset but retrieve it. You can <code>pull</code> data frame\nobject from the stack:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dstack</span> <span class=\"kn\">import</span> <span class=\"n\">pull</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">pull</span><span class=\"p\">(</span><span class=\"s2\">\"my_data\"</span><span class=\"p\">))</span>\n</pre>\n<p>As in the case of plots you can use parameters for data frames too. You can also use\ndata frames and plots in the same frame (with certain parameters).</p>\n<h2>Documentation</h2>\n<p>For more details on the API and code samples, check out the <a href=\"https://docs.dstack.ai\" rel=\"nofollow\">docs</a>.</p>\n\n          </div>"}, "last_serial": 7120854, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7fd404a5b90823727f349d638d7aad33", "sha256": "cca1869981f5ad84ce18249b4785b428eef892fc3c98aa3424fbcdeb1495191b"}, "downloads": -1, "filename": "dstack-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7fd404a5b90823727f349d638d7aad33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12193, "upload_time": "2020-02-27T13:02:46", "upload_time_iso_8601": "2020-02-27T13:02:46.771586Z", "url": "https://files.pythonhosted.org/packages/61/fe/4452a4febeb0d01808ab2e807f694578608938aa987267afaea87bbe5ae2/dstack-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5ca8b6d4e959cd3d27b1f2e0aead4f8d", "sha256": "a4e708f821171657a4c350cc7785e5e698b887056fdd58b03c180fd970f2a69f"}, "downloads": -1, "filename": "dstack-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5ca8b6d4e959cd3d27b1f2e0aead4f8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12220, "upload_time": "2020-03-06T16:10:15", "upload_time_iso_8601": "2020-03-06T16:10:15.720028Z", "url": "https://files.pythonhosted.org/packages/78/7c/d198877132215b19c3ee310fdbd16eaf594213d8840c22eda28ab3088f5b/dstack-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "95153217dff448207ba4818c29ebfeec", "sha256": "a7008600aeddb89197a2b2497b34d007cbf87831fd46611f1265d59a06ded7ae"}, "downloads": -1, "filename": "dstack-0.2.0.tar.gz", "has_sig": false, "md5_digest": "95153217dff448207ba4818c29ebfeec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12508, "upload_time": "2020-03-19T17:42:00", "upload_time_iso_8601": "2020-03-19T17:42:00.456834Z", "url": "https://files.pythonhosted.org/packages/31/18/2320277f62a04f4437b868d8ce09944617d658f2ab277529da38718e822f/dstack-0.2.0.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "2420d27c82159e87bdbf8793be295d9f", "sha256": "0822180a8388001adace2031de891f23460098abefb370769bf772e34a8ce84f"}, "downloads": -1, "filename": "dstack-0.2.5.tar.gz", "has_sig": false, "md5_digest": "2420d27c82159e87bdbf8793be295d9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13060, "upload_time": "2020-04-06T08:41:38", "upload_time_iso_8601": "2020-04-06T08:41:38.348617Z", "url": "https://files.pythonhosted.org/packages/00/16/4f18be19d78ec9aa28ee7d901a4158447ee2251dcb318d1bb885309281bf/dstack-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0f7e88887c125894db64552ed8693894", "sha256": "286d4357222a293af945b4aae1c7f35833520319f041b11192c3295d96e19534"}, "downloads": -1, "filename": "dstack-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0f7e88887c125894db64552ed8693894", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16729, "upload_time": "2020-04-28T14:40:46", "upload_time_iso_8601": "2020-04-28T14:40:46.330796Z", "url": "https://files.pythonhosted.org/packages/ba/9f/5a96041ba6d04bcdd124d6e85ce6a8e45ff9ac45867847ce0c26cf5596ec/dstack-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f7e88887c125894db64552ed8693894", "sha256": "286d4357222a293af945b4aae1c7f35833520319f041b11192c3295d96e19534"}, "downloads": -1, "filename": "dstack-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0f7e88887c125894db64552ed8693894", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16729, "upload_time": "2020-04-28T14:40:46", "upload_time_iso_8601": "2020-04-28T14:40:46.330796Z", "url": "https://files.pythonhosted.org/packages/ba/9f/5a96041ba6d04bcdd124d6e85ce6a8e45ff9ac45867847ce0c26cf5596ec/dstack-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:18 2020"}