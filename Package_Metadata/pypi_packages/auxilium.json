{"info": {"author": "sonntagsgesicht", "author_email": "sonntagsgesicht@icloud.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Education", "Topic :: Software Development"], "description": "\n\nPython library *auxilium*\n-------------------------\n\n.. image:: https://img.shields.io/codeship/5b8cc2e0-ac1d-0137-31a2-06d5e6117547/master.svg\n   :target: https://codeship.com//projects/362165\n   :alt: Codeship\n\n.. image:: https://travis-ci.org/sonntagsgesicht/auxilium.svg?branch=master\n   :target: https://travis-ci.org/sonntagsgesicht/auxilium\n   :alt: Travis ci\n\n.. image:: https://img.shields.io/readthedocs/auxilium\n   :target: http://auxilium.readthedocs.io\n   :alt: Read the Docs\n\n.. image:: https://img.shields.io/codefactor/grade/github/sonntagsgesicht/auxilium/master\n   :target: https://www.codefactor.io/repository/github/sonntagsgesicht/auxilium\n   :alt: CodeFactor Grade\n\n.. image:: https://img.shields.io/codeclimate/maintainability/sonntagsgesicht/auxilium\n   :target: https://codeclimate.com/github/sonntagsgesicht/auxilium/maintainability\n   :alt: Code Climate maintainability\n\n.. image:: https://img.shields.io/codecov/c/github/sonntagsgesicht/auxilium\n   :target: https://codecov.io/gh/sonntagsgesicht/auxilium\n   :alt: Codecov\n\n.. image:: https://img.shields.io/lgtm/grade/python/g/sonntagsgesicht/auxilium.svg\n   :target: https://lgtm.com/projects/g/sonntagsgesicht/auxilium/context:python/\n   :alt: lgtm grade\n\n.. image:: https://img.shields.io/lgtm/alerts/g/sonntagsgesicht/auxilium.svg\n   :target: https://lgtm.com/projects/g/sonntagsgesicht/auxilium/alerts/\n   :alt: total lgtm alerts\n\n.. image:: https://img.shields.io/github/license/sonntagsgesicht/auxilium\n   :target: https://github.com/sonntagsgesicht/auxilium/raw/master/LICENSE\n   :alt: GitHub\n\n.. image:: https://img.shields.io/github/release/sonntagsgesicht/auxilium?label=github\n   :target: https://github.com/sonntagsgesicht/auxilium/releases\n   :alt: GitHub release\n\n.. image:: https://img.shields.io/pypi/v/auxilium\n   :target: https://pypi.org/project/auxilium/\n   :alt: PyPI Version\n\n.. image:: https://img.shields.io/pypi/pyversions/auxilium\n   :target: https://pypi.org/project/auxilium/\n   :alt: PyPI - Python Version\n\n.. image:: https://img.shields.io/pypi/dm/auxilium\n   :target: https://pypi.org/project/auxilium/\n   :alt: PyPI Downloads\n\nA Python project for an automated test and deploy toolkit - 100% reusable.\n\n\nCode, Documentation and Tests\n-----------------------------\n\nModern software development comes as a triple of\n\n   .. image:: ../pix/code-test-doc.png\n      :alt: **code is for machines** // **tests links docs and code** // **docs are for humans**\n\n   * The **code** is the actual software program or library which can executed or invoked.\n\n   * The **documentation** should give an introducing the idea and mission, guide how to use it, describe functionality and features.\n\n   * Finally, intensive **tests** increases the confidence that the documented functionality is correctly implemented.\n\n\nTo support this **auxilium** is designed to build, to auto-doc, to test and to deploy\nsmall to medium size Python projects in **3 simple steps**.\n\n   1. copy your **source code** into a boilerplate project structure\n\n   2. write useful **documentation** in your python source code doc strings\n\n   3. add as many as possible **test cases** in a designated test directory structure\n\nOnce setup up, **auxilium** provides - out of the box - tools\nto build a ci/cd (continuous integration/continuous deployment) framework with\n\n   * conventions on how the project is structured, i.e. where to find source, test and doc files\n\n   * provides useful template structure of files which can be easy modified and extended\n\n   * keeps always a single source of truth for project information (like version number)\n\n   * sets up a clear and straight structure of the project as well as the corresponding documentation\n\n   * minimises the places to edit, e.g. for the documentation there are by default only thre files to edit\n\n   * comes with a shell script to trigger plenty test and analysis routines incl. drafting releases on github.com and distribute on pypi.org\n\n   * uses standard community tools like *unittest*, *pylint*, *coverage*, *sphinx* and more\n\n   * no detailed configurations of any tools are needed, so you can focus completely on coding your project\n\n   * demo of how to use the framework and various services to build true *ci/cd*; a full automated test and deploy pineline.\n\nMoreover, we recommend to use *pyenv* and *virtualenv* to test different python installations, too.\n\n\nQuick Start a Project\n---------------------\n\nOnce installed simply invoke :code:`auxilium create` and enter a few project details.\n\nThe whole project structure will be created. Full functioning incl. documentation gerneration, testing, etc..\n\n\n.. code-block:: bash\n\n    $ auxilium create\n\n    *** create new project ***\n    Please enter project details.\n\n    Enter project name  : unicorn\n    Enter project slogan: Always be a unicorn.\n    Enter author name   : dreamer\n    Enter author email  : dreamer@ho\n\n    Created project unicorn with these files:\n\n      unicorn/CHANGES.rst\n      unicorn/dev.py\n      unicorn/HOWTO.rst\n      unicorn/LICENSE\n      unicorn/MANIFEST.in\n      unicorn/README.rst\n      unicorn/requirements.txt\n      unicorn/setup.py\n      unicorn/upgrade_requirements.txt\n\n      unicorn/doc/.DS_Store\n\n      unicorn/doc/sphinx/.DS_Store\n      unicorn/doc/sphinx/conf.py\n      unicorn/doc/sphinx/doc.rst\n      unicorn/doc/sphinx/index.rst\n      unicorn/doc/sphinx/intro.rst\n      unicorn/doc/sphinx/logo.png\n      unicorn/doc/sphinx/releases.rst\n      unicorn/doc/sphinx/tutorial.rst\n\n      unicorn/test/__init__.py\n      unicorn/test/unittests.py\n\n      unicorn/unicorn/__init__.py\n\n    Consider a first full run via: 'cd unicorn; auxilium full;'\n\n\n\n\nDefault Structure of a Project\n------------------------------\n\nThe top level of the directory structure consists of three sub-dirs for source, doc and test files\nand some more or less standard project files. Assume the project is called *auxilium*.\n\n.. code-block:: bash\n\n   /unicorn (project root dir)\n\n      /unicorn (python source files)\n      /doc/sphinx (sphinx files)\n      /test/unittests (unittest files)\n\n      LICENSE (license to use)\n\n      CHANGES.rst (change history)\n      HOWTO.rst (user guide)\n      README.rst (introduction)\n\n      requirements.txt (pip dependencies)\n      upgrade_requirements.txt (pip dependencies which always have to be upgraded)\n\n      setup.py (configuration file to build a distribution)\n\nYour python source files can be structured as you like.\nOnly few information on your project is required\nand has to be found in\n\n.. code-block:: bash\n\n   /unicorn/unicorn/__init__.py\n\nMost of them are needed to setup the *pip* installation (using *setuptools*)\nas well as the sphinx configuration for generation a documentation.\nSee here how :code:`unicorn/unicorn/__init__.py` looks like.\n\n.. code-block:: python\n\n   # -*- coding: utf-8 -*-\n\n   # unicorn\n   # -------\n   # Always be a unicorn.\n   #\n   # Author:   dreamer\n   # Version:  0.1, copyright Thursday, 29 August 2019\n   # Website:  https://github.com/dreamer/unicorn\n   # License:  Apache License 2.0 (see LICENSE file)\n\n\n   import logging\n\n   logging.getLogger(__name__).addHandler(logging.NullHandler())\n\n   __doc__ = 'Always be a unicorn.'\n   __license__ = 'Apache License 2.0'\n\n   __author__ = 'dreamer'\n   __email__ = 'unicorn@home'\n   __url__ = 'https://github.com/' + __author__ + '/' + __name__\n\n   __date__ = 'Thursday, 29 August 2019'\n   __version__ = '0.1'\n   __dev_status__ = '3 - Alpha'\n\n   __dependencies__ = ()\n   __dependency_links__ = ()\n   __data__ = ()\n   __scripts__ = ()\n\n\nOn top level we have the following files\n\n.. code-block:: bash\n\n   /auxilium (project root dir)\n\n      LICENSE\n\n      CHANGES.rst\n      HOWTO.rst\n      README.rst\n\n      requirements.txt\n      upgrade_requirements.txt\n\n      setup.py\n\nWhich serve for\n\n   * **LICENSE** is the license how to use, change or distribute the project.\n\n   * **CHANGES.rst** will contain the whole change and release history\n\n   * **HOWTO.rst** gives a intro how to use your project. This will show up in your documentation as tutorial.\n\n   * **README.rst** is this page which show up on repository homepage at first. Moreover, this will show up in your documentation as introduction.\n\n   * **requirements.txt** are additional python packages, which are required for development and/or testing\n\n   * **upgrade_requirements.txt** are additional python packages (same as *requirements.txt*), which have to be upgraded, i.e. installed by :code:`pip` with the *--upgrade* option. Usually used for dev repos.\n\n   * **setup.py** configs the installation procedure with pip and the meta keywords of your project on pypi.org. Most of the entries are found in the project **__init__.py** file.\n\nThe structure of\n\n.. code-block:: bash\n\n   /auxilium (project root dir)\n\n      /auxilium (python source files)\n      /doc/sphinx (sphinx files)\n\n\nAutomated Documentation Generation\n----------------------------------\n\nThe documentation is located at\n\n.. code-block:: bash\n\n   /auxilium (project root dir)\n\n      /doc/sphinx (sphinx files)\n\n**auxilium** extracts all docs from the source code file and links to some top level *rst* files.\nSo usually no file under :code:`/doc/sphinx` requires to be edited.\n\nThe site-map of a documentation will look like this\n\n.. code-block:: bash\n\n   /index.rst\n      /intro.rst     -> README.rst\n      /tutorial.rst  -> HOWTO.rst\n      /doc.rst       -> api/* (generated by *sphinx-apidoc* via :code:`auxilium api`)\n      /releases.rst  -> CHANGES.rst\n\nSphinx has a configuration (*conf.py*) to build *html* and *latex* resp. *pdf* documentation.\nThe later requires a latex installation to work.\n\nAnd it can run *code-blocks* of code examples of your documentation.\n\nSince only **doc.rst** will not refer to a top level doc file of the project it is generated from the source code.\nSo here the work starts to write good python doc strings.\n\nBut if a more *sphinx* specific file reps. documentation is preferred.\nMay be in order to provide detailed insights into the project:\nSimply delete :code:`api/*` (if existing) and replace the contents of **doc.rst**.\n\n\nAutomated Test and Test Coverage Framework\n------------------------------------------\n\nTest are invoked by using *unittest discovery* script which searches by default for files\ncontaining :code:`unittest.TestCase` classes and process them.\n\nSame for measuring the test coverage using *coverage.py*\n\n.. todo add more test frameworks like **nosetest**, **tox**, **py.test**, **regtest**\n\n\n.. code-block:: bash\n\n   /auxilium (project root dir)\n\n      /test/unittests (unittest files)\n\n\n\nInstallation\n------------\n\nThe latest stable version can always be installed or updated via pip:\n\n.. code-block:: bash\n\n    $ pip install auxilium\n\n\n\nDevelopment Version\n-------------------\n\nThe latest development version can be installed directly from GitHub:\n\n.. code-block:: bash\n\n    $ pip install --upgrade git+https://github.com/sonntagsgesicht/auxilium.git\n\n\nContributions\n-------------\n\n.. _issues: https://github.com/sonntagsgesicht/auxilium/issues\n.. __: https://github.com/sonntagsgesicht/auxilium/pulls\n\nIssues_ and `Pull Requests`__ are always welcome.\n\n\nLicense\n-------\n\n.. __: https://github.com/sonntagsgesicht/auxilium/raw/master/LICENSE\n\nCode and documentation are available according to the Apache Software License (see LICENSE__).\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sonntagsgesicht/auxilium", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "auxilium", "package_url": "https://pypi.org/project/auxilium/", "platform": "any", "project_url": "https://pypi.org/project/auxilium/", "project_urls": {"Homepage": "https://github.com/sonntagsgesicht/auxilium"}, "release_url": "https://pypi.org/project/auxilium/0.1.3/", "requires_dist": ["pylint", "coverage", "bandit", "twine", "sphinx", "sphinx-rtd-theme", "flake8", "codecov"], "requires_python": "", "summary": "A Python project for an automated test and deploy toolkit - 100% reusable.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-library-auxilium\">\n<h2>Python library <em>auxilium</em></h2>\n<a href=\"https://codeship.com//projects/362165\" rel=\"nofollow\"><img alt=\"Codeship\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d67185e003eed131ac1471fe22c105a617144ff2/68747470733a2f2f696d672e736869656c64732e696f2f636f6465736869702f35623863633265302d616331642d303133372d333161322d3036643565363131373534372f6d61737465722e737667\"></a>\n<a href=\"https://travis-ci.org/sonntagsgesicht/auxilium\" rel=\"nofollow\"><img alt=\"Travis ci\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/744ae3c048cf9c33f5b9e5cd85a4e770180202e3/68747470733a2f2f7472617669732d63692e6f72672f736f6e6e74616773676573696368742f617578696c69756d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://auxilium.readthedocs.io\" rel=\"nofollow\"><img alt=\"Read the Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32d5da863b54c90c656694dd2a548d07722016dd/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f617578696c69756d\"></a>\n<a href=\"https://www.codefactor.io/repository/github/sonntagsgesicht/auxilium\" rel=\"nofollow\"><img alt=\"CodeFactor Grade\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb959d4ce224a0749e380fdbe73c1f9306720028/68747470733a2f2f696d672e736869656c64732e696f2f636f6465666163746f722f67726164652f6769746875622f736f6e6e74616773676573696368742f617578696c69756d2f6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/sonntagsgesicht/auxilium/maintainability\" rel=\"nofollow\"><img alt=\"Code Climate maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7550f668647cf68bf4eb22d74fdba343df050645/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6d61696e7461696e6162696c6974792f736f6e6e74616773676573696368742f617578696c69756d\"></a>\n<a href=\"https://codecov.io/gh/sonntagsgesicht/auxilium\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ba02e34fd279e321b6ee984fd6cf028484e290d/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f736f6e6e74616773676573696368742f617578696c69756d\"></a>\n<a href=\"https://lgtm.com/projects/g/sonntagsgesicht/auxilium/context:python/\" rel=\"nofollow\"><img alt=\"lgtm grade\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/050f483b5777a2f35bd5fee9ba7b7e3003551086/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f736f6e6e74616773676573696368742f617578696c69756d2e737667\"></a>\n<a href=\"https://lgtm.com/projects/g/sonntagsgesicht/auxilium/alerts/\" rel=\"nofollow\"><img alt=\"total lgtm alerts\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f0e8b9b8c620ec5a322cd1eb95370e8bb0b5d31/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f736f6e6e74616773676573696368742f617578696c69756d2e737667\"></a>\n<a href=\"https://github.com/sonntagsgesicht/auxilium/raw/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35fefa26deaa9ce85ff0f282d7a0d85076c7acc0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f736f6e6e74616773676573696368742f617578696c69756d\"></a>\n<a href=\"https://github.com/sonntagsgesicht/auxilium/releases\" rel=\"nofollow\"><img alt=\"GitHub release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7122204c7d4eedf8a2f01428776baa2f985cef16/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f736f6e6e74616773676573696368742f617578696c69756d3f6c6162656c3d676974687562\"></a>\n<a href=\"https://pypi.org/project/auxilium/\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f759518f69b06edb5ac7356522ebd1de6732142b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f617578696c69756d\"></a>\n<a href=\"https://pypi.org/project/auxilium/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee7b7f5eb79a71fb22630493794d8d23fc4ccd1f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f617578696c69756d\"></a>\n<a href=\"https://pypi.org/project/auxilium/\" rel=\"nofollow\"><img alt=\"PyPI Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b27bfad24309d1b54a7adc5464e7ff4f027e45c8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f617578696c69756d\"></a>\n<p>A Python project for an automated test and deploy toolkit - 100% reusable.</p>\n</div>\n<div id=\"code-documentation-and-tests\">\n<h2>Code, Documentation and Tests</h2>\n<p>Modern software development comes as a triple of</p>\n<blockquote>\n<img alt=\"**code is for machines** // **tests links docs and code** // **docs are for humans**\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de11721c28287c2be5aaf5a6ffa5adb187b68b67/2e2e2f7069782f636f64652d746573742d646f632e706e67\">\n<ul>\n<li>The <strong>code</strong> is the actual software program or library which can executed or invoked.</li>\n<li>The <strong>documentation</strong> should give an introducing the idea and mission, guide how to use it, describe functionality and features.</li>\n<li>Finally, intensive <strong>tests</strong> increases the confidence that the documented functionality is correctly implemented.</li>\n</ul>\n</blockquote>\n<p>To support this <strong>auxilium</strong> is designed to build, to auto-doc, to test and to deploy\nsmall to medium size Python projects in <strong>3 simple steps</strong>.</p>\n<blockquote>\n<ol>\n<li>copy your <strong>source code</strong> into a boilerplate project structure</li>\n<li>write useful <strong>documentation</strong> in your python source code doc strings</li>\n<li>add as many as possible <strong>test cases</strong> in a designated test directory structure</li>\n</ol>\n</blockquote>\n<p>Once setup up, <strong>auxilium</strong> provides - out of the box - tools\nto build a ci/cd (continuous integration/continuous deployment) framework with</p>\n<blockquote>\n<ul>\n<li>conventions on how the project is structured, i.e. where to find source, test and doc files</li>\n<li>provides useful template structure of files which can be easy modified and extended</li>\n<li>keeps always a single source of truth for project information (like version number)</li>\n<li>sets up a clear and straight structure of the project as well as the corresponding documentation</li>\n<li>minimises the places to edit, e.g. for the documentation there are by default only thre files to edit</li>\n<li>comes with a shell script to trigger plenty test and analysis routines incl. drafting releases on github.com and distribute on pypi.org</li>\n<li>uses standard community tools like <em>unittest</em>, <em>pylint</em>, <em>coverage</em>, <em>sphinx</em> and more</li>\n<li>no detailed configurations of any tools are needed, so you can focus completely on coding your project</li>\n<li>demo of how to use the framework and various services to build true <em>ci/cd</em>; a full automated test and deploy pineline.</li>\n</ul>\n</blockquote>\n<p>Moreover, we recommend to use <em>pyenv</em> and <em>virtualenv</em> to test different python installations, too.</p>\n</div>\n<div id=\"quick-start-a-project\">\n<h2>Quick Start a Project</h2>\n<p>Once installed simply invoke <code>auxilium create</code> and enter a few project details.</p>\n<p>The whole project structure will be created. Full functioning incl. documentation gerneration, testing, etc..</p>\n<pre>$ auxilium create\n\n*** create new project ***\nPlease enter project details.\n\nEnter project name  : unicorn\nEnter project slogan: Always be a unicorn.\nEnter author name   : dreamer\nEnter author email  : dreamer@ho\n\nCreated project unicorn with these files:\n\n  unicorn/CHANGES.rst\n  unicorn/dev.py\n  unicorn/HOWTO.rst\n  unicorn/LICENSE\n  unicorn/MANIFEST.in\n  unicorn/README.rst\n  unicorn/requirements.txt\n  unicorn/setup.py\n  unicorn/upgrade_requirements.txt\n\n  unicorn/doc/.DS_Store\n\n  unicorn/doc/sphinx/.DS_Store\n  unicorn/doc/sphinx/conf.py\n  unicorn/doc/sphinx/doc.rst\n  unicorn/doc/sphinx/index.rst\n  unicorn/doc/sphinx/intro.rst\n  unicorn/doc/sphinx/logo.png\n  unicorn/doc/sphinx/releases.rst\n  unicorn/doc/sphinx/tutorial.rst\n\n  unicorn/test/__init__.py\n  unicorn/test/unittests.py\n\n  unicorn/unicorn/__init__.py\n\nConsider a first full run via: <span class=\"s1\">'cd unicorn; auxilium full;'</span>\n</pre>\n</div>\n<div id=\"default-structure-of-a-project\">\n<h2>Default Structure of a Project</h2>\n<p>The top level of the directory structure consists of three sub-dirs for source, doc and test files\nand some more or less standard project files. Assume the project is called <em>auxilium</em>.</p>\n<pre>/unicorn <span class=\"o\">(</span>project root dir<span class=\"o\">)</span>\n\n   /unicorn <span class=\"o\">(</span>python <span class=\"nb\">source</span> files<span class=\"o\">)</span>\n   /doc/sphinx <span class=\"o\">(</span>sphinx files<span class=\"o\">)</span>\n   /test/unittests <span class=\"o\">(</span>unittest files<span class=\"o\">)</span>\n\n   LICENSE <span class=\"o\">(</span>license to use<span class=\"o\">)</span>\n\n   CHANGES.rst <span class=\"o\">(</span>change <span class=\"nb\">history</span><span class=\"o\">)</span>\n   HOWTO.rst <span class=\"o\">(</span>user guide<span class=\"o\">)</span>\n   README.rst <span class=\"o\">(</span>introduction<span class=\"o\">)</span>\n\n   requirements.txt <span class=\"o\">(</span>pip dependencies<span class=\"o\">)</span>\n   upgrade_requirements.txt <span class=\"o\">(</span>pip dependencies which always have to be upgraded<span class=\"o\">)</span>\n\n   setup.py <span class=\"o\">(</span>configuration file to build a distribution<span class=\"o\">)</span>\n</pre>\n<p>Your python source files can be structured as you like.\nOnly few information on your project is required\nand has to be found in</p>\n<pre>/unicorn/unicorn/__init__.py\n</pre>\n<p>Most of them are needed to setup the <em>pip</em> installation (using <em>setuptools</em>)\nas well as the sphinx configuration for generation a documentation.\nSee here how <code>unicorn/unicorn/__init__.py</code> looks like.</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"c1\"># unicorn</span>\n<span class=\"c1\"># -------</span>\n<span class=\"c1\"># Always be a unicorn.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Author:   dreamer</span>\n<span class=\"c1\"># Version:  0.1, copyright Thursday, 29 August 2019</span>\n<span class=\"c1\"># Website:  https://github.com/dreamer/unicorn</span>\n<span class=\"c1\"># License:  Apache License 2.0 (see LICENSE file)</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">NullHandler</span><span class=\"p\">())</span>\n\n<span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"s1\">'Always be a unicorn.'</span>\n<span class=\"n\">__license__</span> <span class=\"o\">=</span> <span class=\"s1\">'Apache License 2.0'</span>\n\n<span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s1\">'dreamer'</span>\n<span class=\"n\">__email__</span> <span class=\"o\">=</span> <span class=\"s1\">'unicorn@home'</span>\n<span class=\"n\">__url__</span> <span class=\"o\">=</span> <span class=\"s1\">'https://github.com/'</span> <span class=\"o\">+</span> <span class=\"n\">__author__</span> <span class=\"o\">+</span> <span class=\"s1\">'/'</span> <span class=\"o\">+</span> <span class=\"vm\">__name__</span>\n\n<span class=\"n\">__date__</span> <span class=\"o\">=</span> <span class=\"s1\">'Thursday, 29 August 2019'</span>\n<span class=\"n\">__version__</span> <span class=\"o\">=</span> <span class=\"s1\">'0.1'</span>\n<span class=\"n\">__dev_status__</span> <span class=\"o\">=</span> <span class=\"s1\">'3 - Alpha'</span>\n\n<span class=\"n\">__dependencies__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n<span class=\"n\">__dependency_links__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n<span class=\"n\">__data__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n<span class=\"n\">__scripts__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n</pre>\n<p>On top level we have the following files</p>\n<pre>/auxilium <span class=\"o\">(</span>project root dir<span class=\"o\">)</span>\n\n   LICENSE\n\n   CHANGES.rst\n   HOWTO.rst\n   README.rst\n\n   requirements.txt\n   upgrade_requirements.txt\n\n   setup.py\n</pre>\n<p>Which serve for</p>\n<blockquote>\n<ul>\n<li><strong>LICENSE</strong> is the license how to use, change or distribute the project.</li>\n<li><strong>CHANGES.rst</strong> will contain the whole change and release history</li>\n<li><strong>HOWTO.rst</strong> gives a intro how to use your project. This will show up in your documentation as tutorial.</li>\n<li><strong>README.rst</strong> is this page which show up on repository homepage at first. Moreover, this will show up in your documentation as introduction.</li>\n<li><strong>requirements.txt</strong> are additional python packages, which are required for development and/or testing</li>\n<li><strong>upgrade_requirements.txt</strong> are additional python packages (same as <em>requirements.txt</em>), which have to be upgraded, i.e. installed by <code>pip</code> with the <em>\u2013upgrade</em> option. Usually used for dev repos.</li>\n<li><strong>setup.py</strong> configs the installation procedure with pip and the meta keywords of your project on pypi.org. Most of the entries are found in the project <strong>__init__.py</strong> file.</li>\n</ul>\n</blockquote>\n<p>The structure of</p>\n<pre>/auxilium <span class=\"o\">(</span>project root dir<span class=\"o\">)</span>\n\n   /auxilium <span class=\"o\">(</span>python <span class=\"nb\">source</span> files<span class=\"o\">)</span>\n   /doc/sphinx <span class=\"o\">(</span>sphinx files<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"automated-documentation-generation\">\n<h2>Automated Documentation Generation</h2>\n<p>The documentation is located at</p>\n<pre>/auxilium <span class=\"o\">(</span>project root dir<span class=\"o\">)</span>\n\n   /doc/sphinx <span class=\"o\">(</span>sphinx files<span class=\"o\">)</span>\n</pre>\n<p><strong>auxilium</strong> extracts all docs from the source code file and links to some top level <em>rst</em> files.\nSo usually no file under <code>/doc/sphinx</code> requires to be edited.</p>\n<p>The site-map of a documentation will look like this</p>\n<pre>/index.rst\n   /intro.rst     -&gt; README.rst\n   /tutorial.rst  -&gt; HOWTO.rst\n   /doc.rst       -&gt; api/* <span class=\"o\">(</span>generated by *sphinx-apidoc* via :code:<span class=\"sb\">`</span>auxilium api<span class=\"sb\">`</span><span class=\"o\">)</span>\n   /releases.rst  -&gt; CHANGES.rst\n</pre>\n<p>Sphinx has a configuration (<em>conf.py</em>) to build <em>html</em> and <em>latex</em> resp. <em>pdf</em> documentation.\nThe later requires a latex installation to work.</p>\n<p>And it can run <em>code-blocks</em> of code examples of your documentation.</p>\n<p>Since only <strong>doc.rst</strong> will not refer to a top level doc file of the project it is generated from the source code.\nSo here the work starts to write good python doc strings.</p>\n<p>But if a more <em>sphinx</em> specific file reps. documentation is preferred.\nMay be in order to provide detailed insights into the project:\nSimply delete <code>api/*</code> (if existing) and replace the contents of <strong>doc.rst</strong>.</p>\n</div>\n<div id=\"automated-test-and-test-coverage-framework\">\n<h2>Automated Test and Test Coverage Framework</h2>\n<p>Test are invoked by using <em>unittest discovery</em> script which searches by default for files\ncontaining <code>unittest.TestCase</code> classes and process them.</p>\n<p>Same for measuring the test coverage using <em>coverage.py</em></p>\n<pre>/auxilium <span class=\"o\">(</span>project root dir<span class=\"o\">)</span>\n\n   /test/unittests <span class=\"o\">(</span>unittest files<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The latest stable version can always be installed or updated via pip:</p>\n<pre>$ pip install auxilium\n</pre>\n</div>\n<div id=\"development-version\">\n<h2>Development Version</h2>\n<p>The latest development version can be installed directly from GitHub:</p>\n<pre>$ pip install --upgrade git+https://github.com/sonntagsgesicht/auxilium.git\n</pre>\n</div>\n<div id=\"contributions\">\n<h2>Contributions</h2>\n<p><a href=\"https://github.com/sonntagsgesicht/auxilium/issues\" rel=\"nofollow\">Issues</a> and <a href=\"https://github.com/sonntagsgesicht/auxilium/pulls\" rel=\"nofollow\">Pull Requests</a> are always welcome.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Code and documentation are available according to the Apache Software License (see <a href=\"https://github.com/sonntagsgesicht/auxilium/raw/master/LICENSE\" rel=\"nofollow\">LICENSE</a>).</p>\n</div>\n\n          </div>"}, "last_serial": 5850338, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "aef7675dc4ad51a4e0af2395bb03eb5a", "sha256": "aaa7c3daab0af8870e3024e074df31743912d9ace0c2f04f86b6c6c0b9f7cbf6"}, "downloads": -1, "filename": "auxilium-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aef7675dc4ad51a4e0af2395bb03eb5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48654, "upload_time": "2019-08-29T00:06:50", "upload_time_iso_8601": "2019-08-29T00:06:50.703749Z", "url": "https://files.pythonhosted.org/packages/b4/57/3ffcfcc0af6449d0395adc6b1d5eb008a13637c876dac0e447d27bf1a990/auxilium-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "933815082a410e575f57368f3f64f0d8", "sha256": "52a863756de39c59e162607879095d24074db98e0a0d5d15a285fdce1bead13d"}, "downloads": -1, "filename": "auxilium-0.1.tar.gz", "has_sig": false, "md5_digest": "933815082a410e575f57368f3f64f0d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50018, "upload_time": "2019-08-29T00:06:53", "upload_time_iso_8601": "2019-08-29T00:06:53.340569Z", "url": "https://files.pythonhosted.org/packages/b7/5a/669067bc17d8fc2fe86fa6bdae10f08c01556f9ce6fafb180fcc3e7ec2b6/auxilium-0.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9b7fce9e8b89ff7d57c173638a0c8736", "sha256": "4b86d5c93ae97b9737a2deb3197176c1b7de18159aa61f42f6c518dc4d3760d4"}, "downloads": -1, "filename": "auxilium-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9b7fce9e8b89ff7d57c173638a0c8736", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49359, "upload_time": "2019-09-18T13:31:57", "upload_time_iso_8601": "2019-09-18T13:31:57.576638Z", "url": "https://files.pythonhosted.org/packages/80/81/7dddf4c08f285908896b4dca0733c8d19c1e17fb7b2650979ec445465a56/auxilium-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d4d53ad98f1b53ea8b10ce45f7d2c94", "sha256": "e9363caf71d3be1ea3eacf0490857f41899ad66b590eefc64dc4801f7510c759"}, "downloads": -1, "filename": "auxilium-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1d4d53ad98f1b53ea8b10ce45f7d2c94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50284, "upload_time": "2019-09-18T13:32:00", "upload_time_iso_8601": "2019-09-18T13:32:00.444984Z", "url": "https://files.pythonhosted.org/packages/e4/2f/64203ce8ea9abf0769668406e984738fae9c07f5d538ae0378d2517fc42b/auxilium-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b7fce9e8b89ff7d57c173638a0c8736", "sha256": "4b86d5c93ae97b9737a2deb3197176c1b7de18159aa61f42f6c518dc4d3760d4"}, "downloads": -1, "filename": "auxilium-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9b7fce9e8b89ff7d57c173638a0c8736", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49359, "upload_time": "2019-09-18T13:31:57", "upload_time_iso_8601": "2019-09-18T13:31:57.576638Z", "url": "https://files.pythonhosted.org/packages/80/81/7dddf4c08f285908896b4dca0733c8d19c1e17fb7b2650979ec445465a56/auxilium-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d4d53ad98f1b53ea8b10ce45f7d2c94", "sha256": "e9363caf71d3be1ea3eacf0490857f41899ad66b590eefc64dc4801f7510c759"}, "downloads": -1, "filename": "auxilium-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1d4d53ad98f1b53ea8b10ce45f7d2c94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50284, "upload_time": "2019-09-18T13:32:00", "upload_time_iso_8601": "2019-09-18T13:32:00.444984Z", "url": "https://files.pythonhosted.org/packages/e4/2f/64203ce8ea9abf0769668406e984738fae9c07f5d538ae0378d2517fc42b/auxilium-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:06 2020"}