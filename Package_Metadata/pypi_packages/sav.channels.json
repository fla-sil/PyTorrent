{"info": {"author": "Sander Voerman", "author_email": "sander@savoerman.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.8"], "description": "# Channels between coroutines\nA simple [Python] implementation of the [channel] synchronization\nconstruct for [async/await] applications.\n\nChannels are used for synchronization in the [CSP] concurrency model.\nThey are natively supported by languages that implement this model, such\nas [occam] and [Go]. Python has [asynchronous generators], which are\nsimilar to channels except that they require yielding instead of calling\nfrom one of the two endpoints. While this makes no difference in many\ncases, some problems are easier to solve if a data stream can be\naccessed from both ends by calling instead of yielding.\n\nThe `sav.channels` module implements channels as pairs of\nasynchronous generators. When an object is sent into one generator, it\nwill be yielded by the other generator, and vice-versa.\n\n\n## Installation\nThis module requires Python 3.8 or higher. Use `pip` to install it\nfrom the command line:\n\n```\npip install sav.channels\n```\n\nOr visit the online project pages on [GitHub] and [PyPI].\n\n\n## Example\n\n```python\nimport asyncio\nfrom sav import channels\n\na_receiver, a_sender = channels.create()\nb_receiver, b_sender = channels.create()\n\nasync def send_messages():\n    \"\"\"Send messages into multiple channels.\"\"\"\n    async with channels.open(a_sender), channels.open(b_sender):\n        await a_sender.asend('Hello Arnold.')\n        await b_sender.asend('Hello Bernard.')\n        await a_sender.asend('Goodbye Arnold.')\n        await b_sender.asend('Goodbye Bernard.')\n\nasync def show_messages(name, receiver):\n    \"\"\"Show messages from a single channel.\"\"\"\n    async for message in receiver:\n        print(f'Message for {name}: {message}')    \n\nasync def main():\n    \"\"\"Run both channels concurrently.\"\"\"\n    await asyncio.gather(send_messages(),\n                         show_messages('Arnold', a_receiver),\n                         show_messages('Bernard', b_receiver))\n\nasyncio.run(main())\n```\n\n## Documentation\nSee the [documentation] for further details.\n\nOr use [Sphinx] to build a local copy of the documentation from the package\nsource:\n\n```\ncd docs\nmake singlehtml\n```\n\n[Python]: https://www.python.org/\n[channel]: https://en.wikipedia.org/wiki/Channel_(programming)\n[async/await]: https://www.python.org/dev/peps/pep-0492/\n[CSP]: http://www.usingcsp.com/\n[occam]: http://www.wotug.org/occam/\n[Go]: https://tour.golang.org/concurrency/2\n[asynchronous generators]: https://www.python.org/dev/peps/pep-0525/\n[GitHub]: https://github.com/sandervoerman/channels\n[PyPI]: https://pypi.org/project/sav.channels/\n[documentation]: https://www.savoerman.nl/channels/\n[Sphinx]: https://www.sphinx-doc.org/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sandervoerman/channels", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sav.channels", "package_url": "https://pypi.org/project/sav.channels/", "platform": "", "project_url": "https://pypi.org/project/sav.channels/", "project_urls": {"Homepage": "https://github.com/sandervoerman/channels"}, "release_url": "https://pypi.org/project/sav.channels/0.5/", "requires_dist": null, "requires_python": ">=3.8", "summary": "Channels between coroutines", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Channels between coroutines</h1>\n<p>A simple <a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> implementation of the <a href=\"https://en.wikipedia.org/wiki/Channel_(programming)\" rel=\"nofollow\">channel</a> synchronization\nconstruct for <a href=\"https://www.python.org/dev/peps/pep-0492/\" rel=\"nofollow\">async/await</a> applications.</p>\n<p>Channels are used for synchronization in the <a href=\"http://www.usingcsp.com/\" rel=\"nofollow\">CSP</a> concurrency model.\nThey are natively supported by languages that implement this model, such\nas <a href=\"http://www.wotug.org/occam/\" rel=\"nofollow\">occam</a> and <a href=\"https://tour.golang.org/concurrency/2\" rel=\"nofollow\">Go</a>. Python has <a href=\"https://www.python.org/dev/peps/pep-0525/\" rel=\"nofollow\">asynchronous generators</a>, which are\nsimilar to channels except that they require yielding instead of calling\nfrom one of the two endpoints. While this makes no difference in many\ncases, some problems are easier to solve if a data stream can be\naccessed from both ends by calling instead of yielding.</p>\n<p>The <code>sav.channels</code> module implements channels as pairs of\nasynchronous generators. When an object is sent into one generator, it\nwill be yielded by the other generator, and vice-versa.</p>\n<h2>Installation</h2>\n<p>This module requires Python 3.8 or higher. Use <code>pip</code> to install it\nfrom the command line:</p>\n<pre><code>pip install sav.channels\n</code></pre>\n<p>Or visit the online project pages on <a href=\"https://github.com/sandervoerman/channels\" rel=\"nofollow\">GitHub</a> and <a href=\"https://pypi.org/project/sav.channels/\" rel=\"nofollow\">PyPI</a>.</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sav</span> <span class=\"kn\">import</span> <span class=\"n\">channels</span>\n\n<span class=\"n\">a_receiver</span><span class=\"p\">,</span> <span class=\"n\">a_sender</span> <span class=\"o\">=</span> <span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n<span class=\"n\">b_receiver</span><span class=\"p\">,</span> <span class=\"n\">b_sender</span> <span class=\"o\">=</span> <span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">send_messages</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Send messages into multiple channels.\"\"\"</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">a_sender</span><span class=\"p\">),</span> <span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">b_sender</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">a_sender</span><span class=\"o\">.</span><span class=\"n\">asend</span><span class=\"p\">(</span><span class=\"s1\">'Hello Arnold.'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">b_sender</span><span class=\"o\">.</span><span class=\"n\">asend</span><span class=\"p\">(</span><span class=\"s1\">'Hello Bernard.'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">a_sender</span><span class=\"o\">.</span><span class=\"n\">asend</span><span class=\"p\">(</span><span class=\"s1\">'Goodbye Arnold.'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">b_sender</span><span class=\"o\">.</span><span class=\"n\">asend</span><span class=\"p\">(</span><span class=\"s1\">'Goodbye Bernard.'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">show_messages</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Show messages from a single channel.\"\"\"</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">receiver</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Message for </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\">: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>    \n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Run both channels concurrently.\"\"\"</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"n\">send_messages</span><span class=\"p\">(),</span>\n                         <span class=\"n\">show_messages</span><span class=\"p\">(</span><span class=\"s1\">'Arnold'</span><span class=\"p\">,</span> <span class=\"n\">a_receiver</span><span class=\"p\">),</span>\n                         <span class=\"n\">show_messages</span><span class=\"p\">(</span><span class=\"s1\">'Bernard'</span><span class=\"p\">,</span> <span class=\"n\">b_receiver</span><span class=\"p\">))</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h2>Documentation</h2>\n<p>See the <a href=\"https://www.savoerman.nl/channels/\" rel=\"nofollow\">documentation</a> for further details.</p>\n<p>Or use <a href=\"https://www.sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a> to build a local copy of the documentation from the package\nsource:</p>\n<pre><code>cd docs\nmake singlehtml\n</code></pre>\n\n          </div>"}, "last_serial": 6185773, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "244b5cf8ffe36cba97660f4626342811", "sha256": "7197f5e41995b45f09bab0a6f4d99a24a8520ea7ef41eaae685bd5872c7730f6"}, "downloads": -1, "filename": "sav.channels-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "244b5cf8ffe36cba97660f4626342811", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3914, "upload_time": "2018-11-05T02:04:56", "upload_time_iso_8601": "2018-11-05T02:04:56.793572Z", "url": "https://files.pythonhosted.org/packages/3c/84/92a53975966c48a69d51befceefb86434e5f6b34b1a66baa67b77223c947/sav.channels-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab2e7bd5b84ec3632962c7f336532d28", "sha256": "c4f3433b5005874dce5053f42dd39e949423b1f98d2f6a8b46c6a7408c2c6e52"}, "downloads": -1, "filename": "sav.channels-0.1.tar.gz", "has_sig": false, "md5_digest": "ab2e7bd5b84ec3632962c7f336532d28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2902, "upload_time": "2018-11-05T02:04:57", "upload_time_iso_8601": "2018-11-05T02:04:57.998033Z", "url": "https://files.pythonhosted.org/packages/ee/28/2466c50833184ba25b51b044169857fe47883a75fa78310ec02e78b6f1d3/sav.channels-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3519e620b9f081af9a9278dbee708eaf", "sha256": "236eedf7a16fe68d7968a721784980567abd220b41db3d86d36728f26bc6c421"}, "downloads": -1, "filename": "sav.channels-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3519e620b9f081af9a9278dbee708eaf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5223, "upload_time": "2018-11-05T16:58:28", "upload_time_iso_8601": "2018-11-05T16:58:28.445500Z", "url": "https://files.pythonhosted.org/packages/61/fb/1bc7a98b9bd0fe91f363ee973528123fc8bdb79319d311469a45c225cf66/sav.channels-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e17772026abb505d246011159e3e775e", "sha256": "0d0d5d185c091dbc514a72445954d42dc052a2307b1bc559c5275ddf16aa7a88"}, "downloads": -1, "filename": "sav.channels-0.2.tar.gz", "has_sig": false, "md5_digest": "e17772026abb505d246011159e3e775e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3455, "upload_time": "2018-11-05T16:58:30", "upload_time_iso_8601": "2018-11-05T16:58:30.305339Z", "url": "https://files.pythonhosted.org/packages/c2/ed/03f835911504a9a51472f62e62507f3861283b71e62e4e8949cff7396daf/sav.channels-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "84e07a284ba51ccd8f7e84b60caa607b", "sha256": "4af692deab652b2cac819c9d66fd465da26c155407cf039c822c443a996f13e9"}, "downloads": -1, "filename": "sav.channels-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "84e07a284ba51ccd8f7e84b60caa607b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5662, "upload_time": "2019-01-17T18:19:04", "upload_time_iso_8601": "2019-01-17T18:19:04.250455Z", "url": "https://files.pythonhosted.org/packages/bd/1f/c99882c7009e60f0782eaf60aee1f8078b2a88ed737ed65eab2d8ee409ca/sav.channels-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5050bc444ac2560cd8509499f8b7f00d", "sha256": "89a4303e339925112f826dd88babf72d62dc66b25c8c67465710e7543902c88d"}, "downloads": -1, "filename": "sav.channels-0.3.tar.gz", "has_sig": false, "md5_digest": "5050bc444ac2560cd8509499f8b7f00d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4766, "upload_time": "2019-01-17T18:19:07", "upload_time_iso_8601": "2019-01-17T18:19:07.941315Z", "url": "https://files.pythonhosted.org/packages/fd/47/99ee2349160d0b925b9ea1ed8b3bba47b3f9e58ec3911aabb31e2fc839ff/sav.channels-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "793525573f88ec24db2810dc797a9492", "sha256": "22d0b213a29bb3b07b2fa2eaca81c33d99b3500b6a6dc49d0256322a74aaff5e"}, "downloads": -1, "filename": "sav.channels-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "793525573f88ec24db2810dc797a9492", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 7110, "upload_time": "2019-02-06T23:15:29", "upload_time_iso_8601": "2019-02-06T23:15:29.695438Z", "url": "https://files.pythonhosted.org/packages/a8/ff/73db9ec24063282577d6eee9dbef620cae5c310dd071d8c5f91391c1df77/sav.channels-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "348d3206d09f9caf9a9799eb137a0e86", "sha256": "6049e1d47bdc1a4f075ca079578ad6aaa36b65181784ff1b9c1c34d971e9b508"}, "downloads": -1, "filename": "sav.channels-0.4.tar.gz", "has_sig": false, "md5_digest": "348d3206d09f9caf9a9799eb137a0e86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5789, "upload_time": "2019-02-06T23:15:31", "upload_time_iso_8601": "2019-02-06T23:15:31.266788Z", "url": "https://files.pythonhosted.org/packages/47/43/92e41047efc65d478ede6e22a388e090485e12db92648aa440ce2bd3d7e3/sav.channels-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "33d7c3d8776d887fd18f37ce1d78f6bf", "sha256": "88791a924b0db964362b9671d0b7251ff52fc36d5c830b2d15e7038b7fdc7e1a"}, "downloads": -1, "filename": "sav.channels-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "33d7c3d8776d887fd18f37ce1d78f6bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 4631, "upload_time": "2019-11-23T08:00:47", "upload_time_iso_8601": "2019-11-23T08:00:47.910391Z", "url": "https://files.pythonhosted.org/packages/19/0d/80670b06b7ba62235dce58eeb120820f03945e6ea7a29929ec3e5e630c70/sav.channels-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0d487cf3929433553016e26b2d5386f", "sha256": "aaffa3baefd3821d44b77916febbedc44b78c010f0f9c5f409955bce55134ee3"}, "downloads": -1, "filename": "sav.channels-0.5.tar.gz", "has_sig": false, "md5_digest": "d0d487cf3929433553016e26b2d5386f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 3442, "upload_time": "2019-11-23T08:00:49", "upload_time_iso_8601": "2019-11-23T08:00:49.014466Z", "url": "https://files.pythonhosted.org/packages/7d/6c/54f2c1f586f85496c80542f443f8ce121d460c61b3bccf8b9d1ad61b8873/sav.channels-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33d7c3d8776d887fd18f37ce1d78f6bf", "sha256": "88791a924b0db964362b9671d0b7251ff52fc36d5c830b2d15e7038b7fdc7e1a"}, "downloads": -1, "filename": "sav.channels-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "33d7c3d8776d887fd18f37ce1d78f6bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 4631, "upload_time": "2019-11-23T08:00:47", "upload_time_iso_8601": "2019-11-23T08:00:47.910391Z", "url": "https://files.pythonhosted.org/packages/19/0d/80670b06b7ba62235dce58eeb120820f03945e6ea7a29929ec3e5e630c70/sav.channels-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0d487cf3929433553016e26b2d5386f", "sha256": "aaffa3baefd3821d44b77916febbedc44b78c010f0f9c5f409955bce55134ee3"}, "downloads": -1, "filename": "sav.channels-0.5.tar.gz", "has_sig": false, "md5_digest": "d0d487cf3929433553016e26b2d5386f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 3442, "upload_time": "2019-11-23T08:00:49", "upload_time_iso_8601": "2019-11-23T08:00:49.014466Z", "url": "https://files.pythonhosted.org/packages/7d/6c/54f2c1f586f85496c80542f443f8ce121d460c61b3bccf8b9d1ad61b8873/sav.channels-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:23 2020"}