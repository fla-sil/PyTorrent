{"info": {"author": "Levi Borodenko", "author_email": "Levi.borodenko@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "# SpectroGraphic\n_Turn any image into a sound whose spectrogram looks like the image!_\n\n![result](banner.png)\n\n<hr>\n\n#### What is this?\n\nMost sounds are intricate combinations of many acoustic waves each having different frequencies and intensities. A spectrogram is a way to represent sound by plotting time on the horizontal axis and the frequency spectrum on the vertical axis. Sort of like sheet music on steroids.\n\nWhat this tool does is, taking an image and simply interpreting it as a spectrogram. Therefore, by generating the corresponding sound, we have embedded our image in a spectrogram.\n\nThe game DOOM used a similar technique to [hide satanic figures inside its soundtrack](https://www.theverge.com/2016/5/31/11825606/doom-2016-soundtrack-satan-666-inverted-pentagram). Now everyone can do the same! \ud83d\ude0a\n\n#### Set-up\n\nGet the command-line tool `spectrographic` via `pip` by running `pip install spectrographic`. You can also simply use `spectrographic.py` from `stand-alone\\` as a command-line tool directly.\nFurthermore, make sure you meet all the dependencies inside the `requirements.txt`. Install them with `pip install requirements.txt`.\n\nAfter installation with `pip` one simply needs to run `spectrographic [...]` in the console and with the stand-alone script you have to use `python spectrographic.py [...]` inside the folder containing `spectrographic.py`.\n\nYou could also simply import the `SpectroGraphic` class from `spectrographic`. Check the doc-strings for detailed explanations and more features.\n\n#### Command-line tool usage\n```\nusage: spectrographic [-h] [--version] -i PATH_TO_IMAGE [-d DURATION] [-m MIN_FREQ] [-M MAX_FREQ] [-r RESOLUTION] [-c CONTRAST] [-p] [-s SAVE_FILE]\n\nTurn any image into sound.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -i PATH_TO_IMAGE, --image PATH_TO_IMAGE\n                        Path of image that we want to embed in a spectrogram.\n  -d DURATION, --duration DURATION\n                        Duration of generated sound.\n  -m MIN_FREQ, --min_freq MIN_FREQ\n                        Smallest frequency used for drawing the image.\n  -M MAX_FREQ, --max_freq MAX_FREQ\n                        Largest frequency used for drawing the image.\n  -r RESOLUTION, --resolution RESOLUTION\n                        Vertical resolution of the image in the spectrogram.\n  -c CONTRAST, --contrast CONTRAST\n                        Contrast of the image in the spectrogram.\n  -p, --play            Directly play the resulting sound.\n  -s SAVE_FILE, --save SAVE_FILE\n                        Path to .wav file in which to save the resulting sound.\n```\nThus, if you have the source image at `./source.png` and you want to generate a 10s long sound in the frequency range of 10kHz to 20kHz. You also want to save the resulting .wav-file as `sound.wav` and also play the resulting sound. Then you need to run:\n\n`spectrographic --image ./source.png --min_freq 10000 --max_freq 20000 --duration 10 --save sound.wav --play`\n\nor if you are using the stand-alone script:\n\n`python spectrographic.py --image ./source.png --min_freq 10000 --max_freq 20000 --duration 10 --save sound.wav --play`\n\n#### Contribute\n\nBug reports, fixes and additional features are always welcome! Make sure to run the tests with `python setup.py test` and write your own for new features. Thanks.", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LeviBorodenko/spectrographic", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "spectrographic", "package_url": "https://pypi.org/project/spectrographic/", "platform": "any", "project_url": "https://pypi.org/project/spectrographic/", "project_urls": {"Homepage": "https://github.com/LeviBorodenko/spectrographic"}, "release_url": "https://pypi.org/project/spectrographic/0.9.3/", "requires_dist": null, "requires_python": "", "summary": "Draw Images into Spectrograms", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SpectroGraphic</h1>\n<p><em>Turn any image into a sound whose spectrogram looks like the image!</em></p>\n<p><img alt=\"result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/046b0869a142ef2b244da6d2c4706fc12f01be2d/62616e6e65722e706e67\"></p>\n<hr>\n<h4>What is this?</h4>\n<p>Most sounds are intricate combinations of many acoustic waves each having different frequencies and intensities. A spectrogram is a way to represent sound by plotting time on the horizontal axis and the frequency spectrum on the vertical axis. Sort of like sheet music on steroids.</p>\n<p>What this tool does is, taking an image and simply interpreting it as a spectrogram. Therefore, by generating the corresponding sound, we have embedded our image in a spectrogram.</p>\n<p>The game DOOM used a similar technique to <a href=\"https://www.theverge.com/2016/5/31/11825606/doom-2016-soundtrack-satan-666-inverted-pentagram\" rel=\"nofollow\">hide satanic figures inside its soundtrack</a>. Now everyone can do the same! \ud83d\ude0a</p>\n<h4>Set-up</h4>\n<p>Get the command-line tool <code>spectrographic</code> via <code>pip</code> by running <code>pip install spectrographic</code>. You can also simply use <code>spectrographic.py</code> from <code>stand-alone\\</code> as a command-line tool directly.\nFurthermore, make sure you meet all the dependencies inside the <code>requirements.txt</code>. Install them with <code>pip install requirements.txt</code>.</p>\n<p>After installation with <code>pip</code> one simply needs to run <code>spectrographic [...]</code> in the console and with the stand-alone script you have to use <code>python spectrographic.py [...]</code> inside the folder containing <code>spectrographic.py</code>.</p>\n<p>You could also simply import the <code>SpectroGraphic</code> class from <code>spectrographic</code>. Check the doc-strings for detailed explanations and more features.</p>\n<h4>Command-line tool usage</h4>\n<pre><code>usage: spectrographic [-h] [--version] -i PATH_TO_IMAGE [-d DURATION] [-m MIN_FREQ] [-M MAX_FREQ] [-r RESOLUTION] [-c CONTRAST] [-p] [-s SAVE_FILE]\n\nTurn any image into sound.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -i PATH_TO_IMAGE, --image PATH_TO_IMAGE\n                        Path of image that we want to embed in a spectrogram.\n  -d DURATION, --duration DURATION\n                        Duration of generated sound.\n  -m MIN_FREQ, --min_freq MIN_FREQ\n                        Smallest frequency used for drawing the image.\n  -M MAX_FREQ, --max_freq MAX_FREQ\n                        Largest frequency used for drawing the image.\n  -r RESOLUTION, --resolution RESOLUTION\n                        Vertical resolution of the image in the spectrogram.\n  -c CONTRAST, --contrast CONTRAST\n                        Contrast of the image in the spectrogram.\n  -p, --play            Directly play the resulting sound.\n  -s SAVE_FILE, --save SAVE_FILE\n                        Path to .wav file in which to save the resulting sound.\n</code></pre>\n<p>Thus, if you have the source image at <code>./source.png</code> and you want to generate a 10s long sound in the frequency range of 10kHz to 20kHz. You also want to save the resulting .wav-file as <code>sound.wav</code> and also play the resulting sound. Then you need to run:</p>\n<p><code>spectrographic --image ./source.png --min_freq 10000 --max_freq 20000 --duration 10 --save sound.wav --play</code></p>\n<p>or if you are using the stand-alone script:</p>\n<p><code>python spectrographic.py --image ./source.png --min_freq 10000 --max_freq 20000 --duration 10 --save sound.wav --play</code></p>\n<h4>Contribute</h4>\n<p>Bug reports, fixes and additional features are always welcome! Make sure to run the tests with <code>python setup.py test</code> and write your own for new features. Thanks.</p>\n\n          </div>"}, "last_serial": 6356599, "releases": {"0.8.7": [{"comment_text": "", "digests": {"md5": "b948b1d787c08c91786bac190267beb8", "sha256": "7bb9b833ec717a861d9ddfb7ee4fa4408e6272ea5bb733676cda9f7ae72da090"}, "downloads": -1, "filename": "spectrographic-0.8.7.tar.gz", "has_sig": false, "md5_digest": "b948b1d787c08c91786bac190267beb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5617352, "upload_time": "2019-12-22T23:28:34", "upload_time_iso_8601": "2019-12-22T23:28:34.822228Z", "url": "https://files.pythonhosted.org/packages/ab/44/ff523b8a6e61d15dc4f5fb12dd762871a44731f057c93cbc16b5c8a12224/spectrographic-0.8.7.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "076af930036f5b66bd5e1e5b211be4b1", "sha256": "5e31a04e38e0df96fbd5a663c978bdb47b8a3973639b520c5ad100f1ad164b5c"}, "downloads": -1, "filename": "spectrographic-0.9.1.tar.gz", "has_sig": false, "md5_digest": "076af930036f5b66bd5e1e5b211be4b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5624895, "upload_time": "2019-12-22T23:28:41", "upload_time_iso_8601": "2019-12-22T23:28:41.007760Z", "url": "https://files.pythonhosted.org/packages/58/14/5d5fe5270d77df975f54c01fa2d6a23553ba886aa9d682a1c274ea485f94/spectrographic-0.9.1.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "fba1289a9e78e47418be248eea94c9f0", "sha256": "374f1eaeead348ee73147e7ba3ebf4ded8925c66dab2861b1f6572ab81a5a613"}, "downloads": -1, "filename": "spectrographic-0.9.3.tar.gz", "has_sig": false, "md5_digest": "fba1289a9e78e47418be248eea94c9f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5617336, "upload_time": "2019-12-24T20:34:51", "upload_time_iso_8601": "2019-12-24T20:34:51.109790Z", "url": "https://files.pythonhosted.org/packages/6c/cd/5ef7c8e1d53b1d0df1a6507b267ca3bbca889bcb83395d5ddb72d6b7080e/spectrographic-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fba1289a9e78e47418be248eea94c9f0", "sha256": "374f1eaeead348ee73147e7ba3ebf4ded8925c66dab2861b1f6572ab81a5a613"}, "downloads": -1, "filename": "spectrographic-0.9.3.tar.gz", "has_sig": false, "md5_digest": "fba1289a9e78e47418be248eea94c9f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5617336, "upload_time": "2019-12-24T20:34:51", "upload_time_iso_8601": "2019-12-24T20:34:51.109790Z", "url": "https://files.pythonhosted.org/packages/6c/cd/5ef7c8e1d53b1d0df1a6507b267ca3bbca889bcb83395d5ddb72d6b7080e/spectrographic-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:37 2020"}