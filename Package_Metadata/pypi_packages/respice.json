{"info": {"author": "Mischa Kr\u00fcger", "author_email": "makmanx64@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Education", "Intended Audience :: Science/Research", "Natural Language :: English", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)", "Topic :: Scientific/Engineering :: Physics"], "description": "respice\n=======\n\nNot super optimized, but extremely flexible and easy to use non-linear\ntransient electric circuit simulator\n\nPrerequisites\n-------------\n\nInstall necessary packages via\n\n.. code:: bash\n\n   pip3 install -r requirements.txt\n\nUsage\n-----\n\nCreate your circuit and simulate it!\n\n.. code:: python\n\n   from respice.analysis import Circuit\n   from respice.components import CurrentSourceDC, R\n\n\n   # Define components for our circuit.\n   R1 = R(100)\n   R2 = R(200)\n   R3 = R(100)\n   R4 = R(200)\n   R5 = R(100)\n   Isrc = CurrentSourceDC(0.1)\n\n   # Construct the circuit. All circuits are just\n   # Digraphs allowing multiple edges. On each edge\n   # one component.\n   wheatstone_bridge = Circuit()\n   wheatstone_bridge.add(0, 1, R1)\n   wheatstone_bridge.add(0, 2, R2)\n   wheatstone_bridge.add(1, 2, R3)\n   wheatstone_bridge.add(1, 3, R4)\n   wheatstone_bridge.add(2, 3, R5)\n   wheatstone_bridge.add(3, 0, Isrc)\n\n   # Simulate! 1000 steps with a time-step of 100ms\n   wheatstone_bridge.simulate(0.1, 1000)\n\nThe results are attached to each component instance in their\n``component.v`` and ``component.i`` members. Those contain the voltages\nand currents respectively for each time step as a list.\n\nCircuits are graphs (like mentioned in the snippet). More precisely, a\nDigraph allowing multiple edges from and to the same nodes. Each edge\nrepresents a single two-terminal component (like a resistor). Those are\nconnected to nodes, which are simple joints that can be arbitrarly named\nor identified (for example numbers like in the example above, but\nstrings, or even other objects are possible if necessary).\n\nExample Plotting\n----------------\n\n.. code:: python\n\n   from respice.examples import RC\n   from matplotlib import pyplot as plt\n\n\n   # Define an example RC circuit. The package respice.examples\n   # contains a few!\n   rc = RC(100, 100e-6, 10)  # 100Ohm, 100uF, 10V\n\n   dt = 0.01\n   cycles = 1000\n   rc.simulate(dt, cycles)\n\n   # Necessary for matplotlib.\n   x_vals = [dt * x for x in range(cycles)]\n\n   # Setup voltage and current plots.\n   plt.subplot(211)\n   plt.ylabel('V')\n   plt.plot(x_vals, rc.R.v)\n   plt.plot(x_vals, rc.C.v)\n   plt.legend([rc.R.name, rc.C.name])\n\n   plt.subplot(212)\n   plt.ylabel('I')\n   plt.plot(x_vals, rc.R.i)\n   plt.plot(x_vals, rc.C.i)\n   plt.legend([rc.R.name, rc.C.name])\n\n   # Display.\n   plt.show()\n\nSupports\n--------\n\n-  **MNA - Modified Nodal Analysis**\n\n   This is the algorithm employed by this software. So it\u2019s easily\n   possible to handle voltages as well as currents.\n\n-  **Multi-terminal components**\n\n   Components with more than just two terminals can be handled easily.\n   Whether each sub-branch of them is a current- or voltage-branch, or\n   whether they are current- or voltage-driven.\n\n-  **Mutual coupling**\n\n   Usually required by multi-terminal components, mutual coupling is\n   easily implementable. Each sub-branch in a component is automatically\n   receiving the voltages and currents of all other branches comprising\n   the component.\n\nThe Future\n----------\n\n-  **Incorporating interfaces for heat-dynamics**\n\n   Components are often depending on operation temperature. This can\n   highly change behaviour of the whole circuit. Implementing\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/Makman2/respice", "keywords": "electronics circuit simulation non-linear transient time-domain", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "respice", "package_url": "https://pypi.org/project/respice/", "platform": "any", "project_url": "https://pypi.org/project/respice/", "project_urls": {"Bug Tracker": "https://gitlab.com/Makman2/respice/issues", "Homepage": "https://gitlab.com/Makman2/respice", "Source Code": "https://gitlab.com/Makman2/respice/-/tree/master"}, "release_url": "https://pypi.org/project/respice/0.1/", "requires_dist": ["numpy (~=1.16.3)", "networkx (~=2.3.0)", "scipy (~=1.2.1)", "indexed (~=1.0)", "ordered-set (~=3.1.1)", "ordered-set-stubs (~=0.1.3)"], "requires_python": ">=3.7", "summary": "", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Not super optimized, but extremely flexible and easy to use non-linear\ntransient electric circuit simulator</p>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>Install necessary packages via</p>\n<pre>pip3 install -r requirements.txt\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create your circuit and simulate it!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">respice.analysis</span> <span class=\"kn\">import</span> <span class=\"n\">Circuit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">respice.components</span> <span class=\"kn\">import</span> <span class=\"n\">CurrentSourceDC</span><span class=\"p\">,</span> <span class=\"n\">R</span>\n\n\n<span class=\"c1\"># Define components for our circuit.</span>\n<span class=\"n\">R1</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">R2</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">R3</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">R4</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">R5</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">Isrc</span> <span class=\"o\">=</span> <span class=\"n\">CurrentSourceDC</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct the circuit. All circuits are just</span>\n<span class=\"c1\"># Digraphs allowing multiple edges. On each edge</span>\n<span class=\"c1\"># one component.</span>\n<span class=\"n\">wheatstone_bridge</span> <span class=\"o\">=</span> <span class=\"n\">Circuit</span><span class=\"p\">()</span>\n<span class=\"n\">wheatstone_bridge</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R1</span><span class=\"p\">)</span>\n<span class=\"n\">wheatstone_bridge</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">R2</span><span class=\"p\">)</span>\n<span class=\"n\">wheatstone_bridge</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">R3</span><span class=\"p\">)</span>\n<span class=\"n\">wheatstone_bridge</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">R4</span><span class=\"p\">)</span>\n<span class=\"n\">wheatstone_bridge</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">R5</span><span class=\"p\">)</span>\n<span class=\"n\">wheatstone_bridge</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Isrc</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Simulate! 1000 steps with a time-step of 100ms</span>\n<span class=\"n\">wheatstone_bridge</span><span class=\"o\">.</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p>The results are attached to each component instance in their\n<tt>component.v</tt> and <tt>component.i</tt> members. Those contain the voltages\nand currents respectively for each time step as a list.</p>\n<p>Circuits are graphs (like mentioned in the snippet). More precisely, a\nDigraph allowing multiple edges from and to the same nodes. Each edge\nrepresents a single two-terminal component (like a resistor). Those are\nconnected to nodes, which are simple joints that can be arbitrarly named\nor identified (for example numbers like in the example above, but\nstrings, or even other objects are possible if necessary).</p>\n</div>\n<div id=\"example-plotting\">\n<h2>Example Plotting</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">respice.examples</span> <span class=\"kn\">import</span> <span class=\"n\">RC</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n\n<span class=\"c1\"># Define an example RC circuit. The package respice.examples</span>\n<span class=\"c1\"># contains a few!</span>\n<span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">RC</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100e-6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># 100Ohm, 100uF, 10V</span>\n\n<span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>\n<span class=\"n\">cycles</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">cycles</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Necessary for matplotlib.</span>\n<span class=\"n\">x_vals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">dt</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">cycles</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Setup voltage and current plots.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">211</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'V'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x_vals</span><span class=\"p\">,</span> <span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x_vals</span><span class=\"p\">,</span> <span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">([</span><span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">])</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">212</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'I'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x_vals</span><span class=\"p\">,</span> <span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x_vals</span><span class=\"p\">,</span> <span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">([</span><span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Display.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"supports\">\n<h2>Supports</h2>\n<ul>\n<li><p><strong>MNA - Modified Nodal Analysis</strong></p>\n<p>This is the algorithm employed by this software. So it\u2019s easily\npossible to handle voltages as well as currents.</p>\n</li>\n<li><p><strong>Multi-terminal components</strong></p>\n<p>Components with more than just two terminals can be handled easily.\nWhether each sub-branch of them is a current- or voltage-branch, or\nwhether they are current- or voltage-driven.</p>\n</li>\n<li><p><strong>Mutual coupling</strong></p>\n<p>Usually required by multi-terminal components, mutual coupling is\neasily implementable. Each sub-branch in a component is automatically\nreceiving the voltages and currents of all other branches comprising\nthe component.</p>\n</li>\n</ul>\n</div>\n<div id=\"the-future\">\n<h2>The Future</h2>\n<ul>\n<li><p><strong>Incorporating interfaces for heat-dynamics</strong></p>\n<p>Components are often depending on operation temperature. This can\nhighly change behaviour of the whole circuit. Implementing</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7068010, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1b25710872c3bd28a582f7eccae375af", "sha256": "d24a8f38317ca0aa3101d4d2d82dd15eaa68f637fdcddaadf3937e3531aaa66e"}, "downloads": -1, "filename": "respice-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1b25710872c3bd28a582f7eccae375af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 34045, "upload_time": "2020-04-21T13:37:24", "upload_time_iso_8601": "2020-04-21T13:37:24.758427Z", "url": "https://files.pythonhosted.org/packages/d9/c5/20d3de789ea16a58a9df9f36e8163816e2905cc5b9420fcc599f7faea0bd/respice-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eccadf0daea883448128c5f4f98d89e", "sha256": "07d6bd63e9b9b97f82fb2fad44d34c7295dedb4889c4a07239f784ac7df5cdc6"}, "downloads": -1, "filename": "respice-0.1.tar.gz", "has_sig": false, "md5_digest": "7eccadf0daea883448128c5f4f98d89e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21331, "upload_time": "2020-04-21T13:37:27", "upload_time_iso_8601": "2020-04-21T13:37:27.346345Z", "url": "https://files.pythonhosted.org/packages/db/fd/4096c8980c733744c9ae9c1d130c4964a0e5aeb059c363245130c6230789/respice-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1b25710872c3bd28a582f7eccae375af", "sha256": "d24a8f38317ca0aa3101d4d2d82dd15eaa68f637fdcddaadf3937e3531aaa66e"}, "downloads": -1, "filename": "respice-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1b25710872c3bd28a582f7eccae375af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 34045, "upload_time": "2020-04-21T13:37:24", "upload_time_iso_8601": "2020-04-21T13:37:24.758427Z", "url": "https://files.pythonhosted.org/packages/d9/c5/20d3de789ea16a58a9df9f36e8163816e2905cc5b9420fcc599f7faea0bd/respice-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eccadf0daea883448128c5f4f98d89e", "sha256": "07d6bd63e9b9b97f82fb2fad44d34c7295dedb4889c4a07239f784ac7df5cdc6"}, "downloads": -1, "filename": "respice-0.1.tar.gz", "has_sig": false, "md5_digest": "7eccadf0daea883448128c5f4f98d89e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21331, "upload_time": "2020-04-21T13:37:27", "upload_time_iso_8601": "2020-04-21T13:37:27.346345Z", "url": "https://files.pythonhosted.org/packages/db/fd/4096c8980c733744c9ae9c1d130c4964a0e5aeb059c363245130c6230789/respice-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:46 2020"}