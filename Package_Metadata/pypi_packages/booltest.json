{"info": {"author": "Dusan Klinec", "author_email": "dusan.klinec@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Security"], "description": "BoolTest\n========\n\n|Build Status|\n\nBoolean PRNG tester - analysing statistical properties of PRNGs.\n\nRandomness tester based on our paper published at `Secrypt\n2017 <https://crocs.fi.muni.cz/public/papers/secrypt2017>`__\n\nHow does it work?\n-----------------\n\nBoolTest generates a set of boolean functions, computes the expected\nresult distribution when evaluated on truly random data and compares\nthis to the evaluation on the data being tested.\n\nPip installation\n----------------\n\nBoolTest is available via ``pip``:\n\n::\n\n    pip3 install booltest\n\nLocal installation\n------------------\n\nFrom the local dir:\n\n::\n\n    pip3 install --upgrade --find-links=. .\n\nThe engine\n----------\n\nBoolTest does the heavy lifting with the native python extension\n`bitarray\\_ph4 <https://github.com/ph4r05/bitarray>`__\n\nBitarray operations are performed effectively using fast operations\nimplemented in C.\n\nExperiments\n===========\n\nFirst launch\n------------\n\nThe following commands generate two different files, random and\nzero-filled. Both are tested, the difference between files should be\nevident.\n\n::\n\n    dd if=/dev/urandom of=random-file.bin bs=1024 count=$((1024*10))\n    dd if=/dev/zero of=zero-file.bin bs=1024 count=$((1024*10))\n\n    booltest --degree 2 --block 256 --combine-deg 2 --top 128 --tv $((1024*1024*10)) --rounds 0 random-file.bin\n    booltest --degree 2 --block 256 --combine-deg 2 --top 128 --tv $((1024*1024*10)) --rounds 0 zero-file.bin\n\n-  The BoolTest with the given parameters constructs all polynomials of\n   degree 2 from monomials {x\\_0, ..., x\\_{255}}\n-  Evaluates all polynomials on the input data (windowing), computes\n   zscore from the computed vs reference data\n-  Selects 128 best polynomials (abs(zscore))\n-  Phase 2: Take the best 128 polynomials and combine them by XOR to the\n   ``--combine-deg`` number of terms.\n-  The resulting polynomials are evaluated again and results printed\n   out.\n\nCommon testing parameters\n-------------------------\n\nWe usually use BoolTest with the following testing parameters:\n\n::\n\n    --top 128 --no-comb-and --only-top-comb --only-top-deg --no-term-map --topterm-heap --topterm-heap-k 256\n\nThe same can be done with the ``--default-params``\n\nOutput and p-values\n-------------------\n\nBoolTest returns zscores of the best distinguishers.\n\nIn order to obtain a p-value from the Z-score you need to compute a\nreference experiments, i.e., compute N BoolTest experiments on a random\ndata and observe the z-score distribution. Z-score is data-size\ninvariant but it depends on the BoolTest parameters ``(n, deg, k)``.\n\nThe most straightforward evaluation is to check whether z-score obtained\nfrom the real experiment has been observed in the reference runs. If\nnot, we can conclude the BoolTest rejects the null hypothesis with\npvalue ``1/N``.\n\nTo obtain lower alpha you need to perform more reference experiments, to\nobtain higher alpha integrate the z-score histogram from tails to mean\nto obtain desired percentage of the area under z-score histogram.\n\nThe file\n`pval\\_db.json <https://github.com/ph4r05/polynomial-distinguishers/blob/master/pval_db.json>`__\ncontains reference z-score -> pvalue mapping for N=20 000 reference\nruns.\n\nBoolTest now supports adding pvalue database as a parameter\n``--ref-db path-to-db.json`` If the database is not given, BoolTest\ntries to locate the default ``pval_db.json`` in the BoolTest\ninstallation directory and on the path.\n\nIf the database is found, BoolTest shows also OK/reject result for the\nbest distinguisher, given the reference database contains the data for\ngiven ``(n, deg, k)`` parameters.\n\nExample:\n\n::\n\n     - best poly zscore  -5.37867, expp: 0.0625, exp:   10240, obs:    9713, diff:  5.1464844 %, poly: [[64, 245, 207, 242]]\n    2019-12-13 20:25:17 PHX booltest.booltest_main[51363] INFO Ref samples: 40005, min-zscrore: 4.838657, max-zscore: 7.835336, best observed: 5.3786712268614005, rejected: False, alpha: 2.4996875390576178e-05\n\nHalving method\n--------------\n\nWe have implemented another evaluation method called halving, enabled\nwith commandline option ``--halving``. It needs twice more data than the\ndefault method, because of how it works:\n\n-  The input file is divided to two halves\n-  BoolTest runs as before on the first half, picks the best\n   distinguisher\n-  BoolTest runs the best distinguisher on the second half\n-  As the best distinguisher selected to the second half \"never seen\"\n   the second half and there is only one polynomial the p-value can be\n   directly computed due to independence.\n\nThe best distinguisher results are essentially following Binomial\ndistribution: ``Bi(number_of_blocks, probability_of_dist_eval_to_1)``.\n\nTo compute the p-value we run the Binomial test:\n``scipy.stats.binom_test(observed_ones, n=ntrials, p=dist_probab, alternative='two-sided')``\n\nThis method eliminates a need to have a ``pval_db.json`` database\ncomputed with the reference data for given parameters. The benefit is\nthe halving method gives directly a p-value, without a need to run\nreference computations. The downside is the method needs twice more data\nand can give weaker results than the original BoolTest evaluation.\n\nExample:\n\n::\n\n     - zscore[idx00]: -0.40825, observed: 00010200, expected: 00010240   idx:      0, poly: [[64, 245, 207, 242]]\n    2019-12-13 20:25:17 PHX booltest.booltest_main[51363] INFO Binomial dist, two-sided pval: 0.6868421673496484, pst: 0.0625, ntrials: 163840, succ: 10200\n\nJava random\n-----------\n\nAnalyze output of the ``java.util.Random``, use only polynomials in the\nspecified file. Analyze 100 MB of data:\n\n::\n\n    booltest --degree 2 --block 512 --combine-deg 2 --top 128 --tv $((1024*1024*100)) --rounds 0 \\\n      --poly-file data/polynomials/polynomials-randjava_seed0.txt \\\n      randjava_seed0.bin\n\nInput data\n----------\n\nBoolTest can test:\n\n-  Pregenerated data files\n-  Use the\n   `CryptoStreams <https://github.com/crocs-muni/CryptoStreams>`__\n   configuration files to generate input data on the fly, using\n   `CryptoStreams <https://github.com/crocs-muni/CryptoStreams>`__\n   (library contains plenty round-reduced cryptographic primitives)\n\nCluster computation (Metacentrum)\n---------------------------------\n\n-  Map / Reduce.\n-  The ``booltest/testjobs.py`` creates job files\n-  The ``booltest/testjobsproc.py`` processes result files\n-  BoolTest job is configured via JSON file. Result of a computation is\n   JSON file.\n-  The ``booltest/testjobsbase.py`` performs job aggregation, i.e., more\n   BoolTest runs in one shell script as job planning overhead is\n   non-negligible. Useful for fast running jobs.\n-  Works with PBSPro, qsub queueing algorithm\n\nExample - generate jobs from `CryptoStreams <https://github.com/crocs-muni/CryptoStreams>`__ configurations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    python ../booltest/booltest/testjobs.py  \\\n        --data-dir $RESDIR --job-dir $JOBDIR --result-dir=$RESDIR \\\n        --top 128 --matrix-size 1 10 100 --matrix-block 128 256 384 512 --matrix-deg 1 2 3 --matrix-comb-deg 1 2 3 \\\n        --no-comb-and --only-top-comb --only-top-deg --no-term-map --topterm-heap --topterm-heap-k 256 \\\n        --skip-finished --no-functions --ignore-existing \\\n        --generator-folder ../bool-cfggens/ --generator-path ../bool-cfggens/crypto-streams_v2.3-13-gff877be\n\nFor all `CryptoStreams <https://github.com/crocs-muni/CryptoStreams>`__\nconfiguration files located under ``../bool-cfggens/`` it generates\nBoolTest tests with parameters:\n\n::\n\n    input_size x block_size x deg x comb-deg\n    {1, 10, 100} x {128, 256, 384, 512} x {1, 2, 3} x {1, 2, 3}\n\n-  Command generates PBSPro shell scripts to ``$JOBDIR``, results are\n   placed into ``$RESDIR``.\n-  For one configuration file which is typically round reduced crypto\n   primitive it performs ``3*4*3*3 = 108 tests``.\n-  When using CryptoStreams config files the config files have to\n   specify the longest tested input, in this case, 100 MB.\n\nExample - analyze input files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    python ../booltest/booltest/testjobs.py  \\\n        --test-files ../card_prng/*.bin \\\n        --data-dir $RESDIR --job-dir $JOBDIR --result-dir=$RESDIR \\\n        --top 128 --matrix-size 1 10 100 --matrix-block 128 256 384 512 --matrix-deg 1 2 3 --matrix-comb-deg 1 2 3 \\\n        --no-comb-and --only-top-comb --only-top-deg --no-term-map --topterm-heap --topterm-heap-k 256 \\\n        --skip-finished --no-functions --ignore-existing \n\nThis example generates job to analyze input files (e.g., smartcard\ngenerated randomness)\n\nExample - reference statistics\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    python ../booltest/booltest/testjobs.py  \\\n        --data-dir $RESDIR --job-dir $JOBDIR --result-dir=$RESDIR \\\n        --generator-path --generator-path ../bool-cfggens/crypto-streams_v2.3-13-gff877be \\\n        --top 128 --matrix-size 10 --matrix-block 128 256 384 512 --matrix-deg 1 2 3 --matrix-comb-deg 1 2 3 \\\n        --no-comb-and --only-top-comb --only-top-deg --no-term-map --topterm-heap --topterm-heap-k 256 \\\n        --skip-finished --ref-only --test-rand-runs 1000 --skip-existing --counters-only --no-sac --no-rpcs --no-reinit\n\nComputes 1000 independent AES round 10 runs, each with different seed in\nthe counter mode. Tests BoolTest in various configurations.\n\nReference data\n--------------\n\nReference data extracted from the ``pval_db.json`` for standard\nparameters are displayed in the table below. The z-score distribution\ndoes not change with data length for random data.\n\nThe table shows minimal and maximal observed z-score with given number\nof samples for given BoolTest parameters run on a random data. If your\ntest gives z-score outside of the interval the null hypothesis is\nrejected with the given alpha.\n\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| block   | deg   | comb-deg   | samples   | alpha     | min        | max         | mean       | stddev     |\n+=========+=======+============+===========+===========+============+=============+============+============+\n| 128     | 1     | 1          | 40006     | 2.5e-05   | 1.791114   | 5.259500    | 2.829184   | 0.392369   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 128     | 1     | 2          | 40006     | 2.5e-05   | 3.248292   | 5.891956    | 3.969550   | 0.295748   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 128     | 1     | 3          | 40007     | 2.5e-05   | 4.148908   | 6.873527    | 4.785917   | 0.252568   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 128     | 2     | 1          | 40007     | 2.5e-05   | 2.970847   | 5.874507    | 3.892347   | 0.336373   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 128     | 2     | 2          | 40007     | 2.5e-05   | 4.318940   | 7.185170    | 5.283498   | 0.304000   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 128     | 2     | 3          | 40007     | 2.5e-05   | 4.861234   | 7.625240    | 5.768929   | 0.294646   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 128     | 3     | 1          | 40005     | 2.5e-05   | 3.927999   | 7.458227    | 4.708559   | 0.289679   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 128     | 3     | 2          | 40003     | 2.5e-05   | 5.773050   | 8.525327    | 6.559734   | 0.265691   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 128     | 3     | 3          | 40008     | 2.5e-05   | 6.708463   | 9.213692    | 7.617935   | 0.283725   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 1     | 1          | 40007     | 2.5e-05   | 2.032139   | 5.473894    | 3.043441   | 0.370599   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 1     | 2          | 40007     | 2.5e-05   | 3.223516   | 6.321811    | 3.969150   | 0.294976   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 1     | 3          | 40007     | 2.5e-05   | 4.139409   | 6.393366    | 4.787687   | 0.254152   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 2     | 1          | 40004     | 2.5e-05   | 3.371045   | 6.680122    | 4.220396   | 0.312306   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 2     | 2          | 40005     | 2.5e-05   | 4.838657   | 7.835336    | 5.659828   | 0.296378   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 2     | 3          | 40008     | 2.5e-05   | 5.225983   | 7.678057    | 6.050640   | 0.288560   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 3     | 1          | 40006     | 2.5e-05   | 4.432665   | 6.699031    | 5.129937   | 0.263808   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 3     | 2          | 40007     | 2.5e-05   | 6.376655   | 8.765264    | 7.140519   | 0.245438   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 256     | 3     | 3          | 40009     | 2.5e-05   | 7.434249   | 9.683502    | 8.246235   | 0.262657   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 1     | 1          | 40006     | 2.5e-05   | 2.228137   | 5.488184    | 3.164776   | 0.358101   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 1     | 2          | 40008     | 2.5e-05   | 3.214039   | 5.821200    | 3.969855   | 0.297057   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 1     | 3          | 40007     | 2.5e-05   | 4.125450   | 6.395214    | 4.787421   | 0.249821   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 2     | 1          | 40006     | 2.5e-05   | 3.555668   | 6.394131    | 4.402679   | 0.295179   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 2     | 2          | 40007     | 2.5e-05   | 5.022725   | 7.760645    | 5.858194   | 0.289895   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 2     | 3          | 40006     | 2.5e-05   | 5.338075   | 8.195091    | 6.201193   | 0.284553   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 3     | 1          | 40008     | 2.5e-05   | 4.626479   | 6.880511    | 5.362216   | 0.250799   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 3     | 2          | 40006     | 2.5e-05   | 6.757955   | 8.914936    | 7.452872   | 0.234911   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 384     | 3     | 3          | 40006     | 2.5e-05   | 7.785775   | 10.147881   | 8.587092   | 0.255603   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 1     | 1          | 40007     | 2.5e-05   | 2.317317   | 5.418879    | 3.244575   | 0.347515   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 1     | 2          | 40005     | 2.5e-05   | 3.182516   | 6.602836    | 3.970192   | 0.295726   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 1     | 3          | 40004     | 2.5e-05   | 4.184326   | 6.618015    | 4.788764   | 0.250334   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 2     | 1          | 40008     | 2.5e-05   | 3.742041   | 6.213365    | 4.529020   | 0.287930   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 2     | 2          | 40005     | 2.5e-05   | 5.088407   | 8.296912    | 5.994227   | 0.285201   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 2     | 3          | 40008     | 2.5e-05   | 5.521000   | 8.581706    | 6.303711   | 0.283522   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 3     | 1          | 40005     | 2.5e-05   | 4.878445   | 7.012645    | 5.522388   | 0.242736   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 3     | 2          | 40007     | 2.5e-05   | 6.978223   | 9.254703    | 7.668983   | 0.229045   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n| 512     | 3     | 3          | 40007     | 2.5e-05   | 8.052672   | 10.753842   | 8.816430   | 0.249750   |\n+---------+-------+------------+-----------+-----------+------------+-------------+------------+------------+\n\nReference z-score distributions\n-------------------------------\n\n|Z-score distribution plot for block length 128 bit| |Z-score\ndistribution plot for block length 256 bit| |Z-score distribution plot\nfor block length 384 bit| |Z-score distribution plot for block length\n512 bit|\n\nInstallation\n============\n\nScipy installation with pip\n---------------------------\n\n::\n\n    pip install pyopenssl\n    pip install pycrypto\n    pip install git+https://github.com/scipy/scipy.git\n    pip install --upgrade --find-links=. .\n\nVirtual environment\n-------------------\n\nIt is usually recommended to create a new python virtual environment for\nthe project:\n\n::\n\n    virtualenv ~/pyenv\n    source ~/pyenv/bin/activate\n    pip install --upgrade pip\n    pip install --upgrade --find-links=. .\n\nDeployments\n-----------\n\nFor various deployment information see\n`Deployments.md <DEPLOYMENTS.md>`__.\n\nPython 3.5+\n-----------\n\nBoolTest does not work with lower Python version. Use ``pyenv`` to\ninstall a new Python version. It internally downloads Python sources and\ninstalls it to ``~/.pyenv``.\n\n::\n\n    git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n    echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc\n    echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc\n    echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc\n    exec $SHELL\n    pyenv install 3.7.1\n    pyenv local 3.7.1\n\nThe recommended version is Python 3.5+\n\nSECRYPT 2017\n============\n\nFor SECRYPT 2017 related experiments check out\n`SECRYPT2017.md <SECRYPT2017.md>`__\n\n.. |Build Status| image:: https://travis-ci.org/ph4r05/polynomial-distinguishers.svg?branch=master\n   :target: https://travis-ci.org/ph4r05/polynomial-distinguishers\n.. |Z-score distribution plot for block length 128 bit| image:: docs/img/zscore-dists-128.png\n.. |Z-score distribution plot for block length 256 bit| image:: docs/img/zscore-dists-256.png\n.. |Z-score distribution plot for block length 384 bit| image:: docs/img/zscore-dists-384.png\n.. |Z-score distribution plot for block length 512 bit| image:: docs/img/zscore-dists-512.png", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ph4r05/polynomial-distinguishers", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "booltest", "package_url": "https://pypi.org/project/booltest/", "platform": "", "project_url": "https://pypi.org/project/booltest/", "project_urls": {"Homepage": "https://github.com/ph4r05/polynomial-distinguishers"}, "release_url": "https://pypi.org/project/booltest/0.6.7/", "requires_dist": null, "requires_python": "", "summary": "BoolTest: Polynomial randomness tester", "version": "0.6.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"booltest\">\n<h2>BoolTest</h2>\n<p><a href=\"https://travis-ci.org/ph4r05/polynomial-distinguishers\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41cb676aa0bd42c38a4872daee148fc0d01b624d/68747470733a2f2f7472617669732d63692e6f72672f7068347230352f706f6c796e6f6d69616c2d64697374696e67756973686572732e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Boolean PRNG tester - analysing statistical properties of PRNGs.</p>\n<p>Randomness tester based on our paper published at <a href=\"https://crocs.fi.muni.cz/public/papers/secrypt2017\" rel=\"nofollow\">Secrypt\n2017</a></p>\n<div id=\"how-does-it-work\">\n<h3>How does it work?</h3>\n<p>BoolTest generates a set of boolean functions, computes the expected\nresult distribution when evaluated on truly random data and compares\nthis to the evaluation on the data being tested.</p>\n</div>\n<div id=\"pip-installation\">\n<h3>Pip installation</h3>\n<p>BoolTest is available via <tt>pip</tt>:</p>\n<pre>pip3 install booltest\n</pre>\n</div>\n<div id=\"local-installation\">\n<h3>Local installation</h3>\n<p>From the local dir:</p>\n<pre>pip3 install --upgrade --find-links=. .\n</pre>\n</div>\n<div id=\"the-engine\">\n<h3>The engine</h3>\n<p>BoolTest does the heavy lifting with the native python extension\n<a href=\"https://github.com/ph4r05/bitarray\" rel=\"nofollow\">bitarray_ph4</a></p>\n<p>Bitarray operations are performed effectively using fast operations\nimplemented in C.</p>\n</div>\n</div>\n<div id=\"experiments\">\n<h2>Experiments</h2>\n<div id=\"first-launch\">\n<h3>First launch</h3>\n<p>The following commands generate two different files, random and\nzero-filled. Both are tested, the difference between files should be\nevident.</p>\n<pre>dd if=/dev/urandom of=random-file.bin bs=1024 count=$((1024*10))\ndd if=/dev/zero of=zero-file.bin bs=1024 count=$((1024*10))\n\nbooltest --degree 2 --block 256 --combine-deg 2 --top 128 --tv $((1024*1024*10)) --rounds 0 random-file.bin\nbooltest --degree 2 --block 256 --combine-deg 2 --top 128 --tv $((1024*1024*10)) --rounds 0 zero-file.bin\n</pre>\n<ul>\n<li>The BoolTest with the given parameters constructs all polynomials of\ndegree 2 from monomials {x_0, \u2026, x_{255}}</li>\n<li>Evaluates all polynomials on the input data (windowing), computes\nzscore from the computed vs reference data</li>\n<li>Selects 128 best polynomials (abs(zscore))</li>\n<li>Phase 2: Take the best 128 polynomials and combine them by XOR to the\n<tt><span class=\"pre\">--combine-deg</span></tt> number of terms.</li>\n<li>The resulting polynomials are evaluated again and results printed\nout.</li>\n</ul>\n</div>\n<div id=\"common-testing-parameters\">\n<h3>Common testing parameters</h3>\n<p>We usually use BoolTest with the following testing parameters:</p>\n<pre>--top 128 --no-comb-and --only-top-comb --only-top-deg --no-term-map --topterm-heap --topterm-heap-k 256\n</pre>\n<p>The same can be done with the <tt><span class=\"pre\">--default-params</span></tt></p>\n</div>\n<div id=\"output-and-p-values\">\n<h3>Output and p-values</h3>\n<p>BoolTest returns zscores of the best distinguishers.</p>\n<p>In order to obtain a p-value from the Z-score you need to compute a\nreference experiments, i.e., compute N BoolTest experiments on a random\ndata and observe the z-score distribution. Z-score is data-size\ninvariant but it depends on the BoolTest parameters <tt>(n, deg, k)</tt>.</p>\n<p>The most straightforward evaluation is to check whether z-score obtained\nfrom the real experiment has been observed in the reference runs. If\nnot, we can conclude the BoolTest rejects the null hypothesis with\npvalue <tt>1/N</tt>.</p>\n<p>To obtain lower alpha you need to perform more reference experiments, to\nobtain higher alpha integrate the z-score histogram from tails to mean\nto obtain desired percentage of the area under z-score histogram.</p>\n<p>The file\n<a href=\"https://github.com/ph4r05/polynomial-distinguishers/blob/master/pval_db.json\" rel=\"nofollow\">pval_db.json</a>\ncontains reference z-score -&gt; pvalue mapping for N=20 000 reference\nruns.</p>\n<p>BoolTest now supports adding pvalue database as a parameter\n<tt><span class=\"pre\">--ref-db</span> <span class=\"pre\">path-to-db.json</span></tt> If the database is not given, BoolTest\ntries to locate the default <tt>pval_db.json</tt> in the BoolTest\ninstallation directory and on the path.</p>\n<p>If the database is found, BoolTest shows also OK/reject result for the\nbest distinguisher, given the reference database contains the data for\ngiven <tt>(n, deg, k)</tt> parameters.</p>\n<p>Example:</p>\n<pre> - best poly zscore  -5.37867, expp: 0.0625, exp:   10240, obs:    9713, diff:  5.1464844 %, poly: [[64, 245, 207, 242]]\n2019-12-13 20:25:17 PHX booltest.booltest_main[51363] INFO Ref samples: 40005, min-zscrore: 4.838657, max-zscore: 7.835336, best observed: 5.3786712268614005, rejected: False, alpha: 2.4996875390576178e-05\n</pre>\n</div>\n<div id=\"halving-method\">\n<h3>Halving method</h3>\n<p>We have implemented another evaluation method called halving, enabled\nwith commandline option <tt><span class=\"pre\">--halving</span></tt>. It needs twice more data than the\ndefault method, because of how it works:</p>\n<ul>\n<li>The input file is divided to two halves</li>\n<li>BoolTest runs as before on the first half, picks the best\ndistinguisher</li>\n<li>BoolTest runs the best distinguisher on the second half</li>\n<li>As the best distinguisher selected to the second half \u201cnever seen\u201d\nthe second half and there is only one polynomial the p-value can be\ndirectly computed due to independence.</li>\n</ul>\n<p>The best distinguisher results are essentially following Binomial\ndistribution: <tt>Bi(number_of_blocks, probability_of_dist_eval_to_1)</tt>.</p>\n<p>To compute the p-value we run the Binomial test:\n<tt>scipy.stats.binom_test(observed_ones, n=ntrials, p=dist_probab, <span class=\"pre\">alternative='two-sided')</span></tt></p>\n<p>This method eliminates a need to have a <tt>pval_db.json</tt> database\ncomputed with the reference data for given parameters. The benefit is\nthe halving method gives directly a p-value, without a need to run\nreference computations. The downside is the method needs twice more data\nand can give weaker results than the original BoolTest evaluation.</p>\n<p>Example:</p>\n<pre> - zscore[idx00]: -0.40825, observed: 00010200, expected: 00010240   idx:      0, poly: [[64, 245, 207, 242]]\n2019-12-13 20:25:17 PHX booltest.booltest_main[51363] INFO Binomial dist, two-sided pval: 0.6868421673496484, pst: 0.0625, ntrials: 163840, succ: 10200\n</pre>\n</div>\n<div id=\"java-random\">\n<h3>Java random</h3>\n<p>Analyze output of the <tt>java.util.Random</tt>, use only polynomials in the\nspecified file. Analyze 100 MB of data:</p>\n<pre>booltest --degree 2 --block 512 --combine-deg 2 --top 128 --tv $((1024*1024*100)) --rounds 0 \\\n  --poly-file data/polynomials/polynomials-randjava_seed0.txt \\\n  randjava_seed0.bin\n</pre>\n</div>\n<div id=\"input-data\">\n<h3>Input data</h3>\n<p>BoolTest can test:</p>\n<ul>\n<li>Pregenerated data files</li>\n<li>Use the\n<a href=\"https://github.com/crocs-muni/CryptoStreams\" rel=\"nofollow\">CryptoStreams</a>\nconfiguration files to generate input data on the fly, using\n<a href=\"https://github.com/crocs-muni/CryptoStreams\" rel=\"nofollow\">CryptoStreams</a>\n(library contains plenty round-reduced cryptographic primitives)</li>\n</ul>\n</div>\n<div id=\"cluster-computation-metacentrum\">\n<h3>Cluster computation (Metacentrum)</h3>\n<ul>\n<li>Map / Reduce.</li>\n<li>The <tt>booltest/testjobs.py</tt> creates job files</li>\n<li>The <tt>booltest/testjobsproc.py</tt> processes result files</li>\n<li>BoolTest job is configured via JSON file. Result of a computation is\nJSON file.</li>\n<li>The <tt>booltest/testjobsbase.py</tt> performs job aggregation, i.e., more\nBoolTest runs in one shell script as job planning overhead is\nnon-negligible. Useful for fast running jobs.</li>\n<li>Works with PBSPro, qsub queueing algorithm</li>\n</ul>\n<div id=\"example-generate-jobs-from-cryptostreams-configurations\">\n<h4>Example - generate jobs from <a href=\"https://github.com/crocs-muni/CryptoStreams\" rel=\"nofollow\">CryptoStreams</a> configurations</h4>\n<pre>python ../booltest/booltest/testjobs.py  <span class=\"se\">\\\n</span>    --data-dir <span class=\"nv\">$RESDIR</span> --job-dir <span class=\"nv\">$JOBDIR</span> --result-dir<span class=\"o\">=</span><span class=\"nv\">$RESDIR</span> <span class=\"se\">\\\n</span>    --top <span class=\"m\">128</span> --matrix-size <span class=\"m\">1</span> <span class=\"m\">10</span> <span class=\"m\">100</span> --matrix-block <span class=\"m\">128</span> <span class=\"m\">256</span> <span class=\"m\">384</span> <span class=\"m\">512</span> --matrix-deg <span class=\"m\">1</span> <span class=\"m\">2</span> <span class=\"m\">3</span> --matrix-comb-deg <span class=\"m\">1</span> <span class=\"m\">2</span> <span class=\"m\">3</span> <span class=\"se\">\\\n</span>    --no-comb-and --only-top-comb --only-top-deg --no-term-map --topterm-heap --topterm-heap-k <span class=\"m\">256</span> <span class=\"se\">\\\n</span>    --skip-finished --no-functions --ignore-existing <span class=\"se\">\\\n</span>    --generator-folder ../bool-cfggens/ --generator-path ../bool-cfggens/crypto-streams_v2.3-13-gff877be\n</pre>\n<p>For all <a href=\"https://github.com/crocs-muni/CryptoStreams\" rel=\"nofollow\">CryptoStreams</a>\nconfiguration files located under <tt><span class=\"pre\">../bool-cfggens/</span></tt> it generates\nBoolTest tests with parameters:</p>\n<pre>input_size x block_size x deg x comb-deg\n{1, 10, 100} x {128, 256, 384, 512} x {1, 2, 3} x {1, 2, 3}\n</pre>\n<ul>\n<li>Command generates PBSPro shell scripts to <tt>$JOBDIR</tt>, results are\nplaced into <tt>$RESDIR</tt>.</li>\n<li>For one configuration file which is typically round reduced crypto\nprimitive it performs <tt>3*4*3*3 = 108 tests</tt>.</li>\n<li>When using CryptoStreams config files the config files have to\nspecify the longest tested input, in this case, 100 MB.</li>\n</ul>\n</div>\n<div id=\"example-analyze-input-files\">\n<h4>Example - analyze input files</h4>\n<pre>python ../booltest/booltest/testjobs.py  <span class=\"se\">\\\n</span>    --test-files ../card_prng/*.bin <span class=\"se\">\\\n</span>    --data-dir <span class=\"nv\">$RESDIR</span> --job-dir <span class=\"nv\">$JOBDIR</span> --result-dir<span class=\"o\">=</span><span class=\"nv\">$RESDIR</span> <span class=\"se\">\\\n</span>    --top <span class=\"m\">128</span> --matrix-size <span class=\"m\">1</span> <span class=\"m\">10</span> <span class=\"m\">100</span> --matrix-block <span class=\"m\">128</span> <span class=\"m\">256</span> <span class=\"m\">384</span> <span class=\"m\">512</span> --matrix-deg <span class=\"m\">1</span> <span class=\"m\">2</span> <span class=\"m\">3</span> --matrix-comb-deg <span class=\"m\">1</span> <span class=\"m\">2</span> <span class=\"m\">3</span> <span class=\"se\">\\\n</span>    --no-comb-and --only-top-comb --only-top-deg --no-term-map --topterm-heap --topterm-heap-k <span class=\"m\">256</span> <span class=\"se\">\\\n</span>    --skip-finished --no-functions --ignore-existing\n</pre>\n<p>This example generates job to analyze input files (e.g., smartcard\ngenerated randomness)</p>\n</div>\n<div id=\"example-reference-statistics\">\n<h4>Example - reference statistics</h4>\n<pre>python ../booltest/booltest/testjobs.py  <span class=\"se\">\\\n</span>    --data-dir <span class=\"nv\">$RESDIR</span> --job-dir <span class=\"nv\">$JOBDIR</span> --result-dir<span class=\"o\">=</span><span class=\"nv\">$RESDIR</span> <span class=\"se\">\\\n</span>    --generator-path --generator-path ../bool-cfggens/crypto-streams_v2.3-13-gff877be <span class=\"se\">\\\n</span>    --top <span class=\"m\">128</span> --matrix-size <span class=\"m\">10</span> --matrix-block <span class=\"m\">128</span> <span class=\"m\">256</span> <span class=\"m\">384</span> <span class=\"m\">512</span> --matrix-deg <span class=\"m\">1</span> <span class=\"m\">2</span> <span class=\"m\">3</span> --matrix-comb-deg <span class=\"m\">1</span> <span class=\"m\">2</span> <span class=\"m\">3</span> <span class=\"se\">\\\n</span>    --no-comb-and --only-top-comb --only-top-deg --no-term-map --topterm-heap --topterm-heap-k <span class=\"m\">256</span> <span class=\"se\">\\\n</span>    --skip-finished --ref-only --test-rand-runs <span class=\"m\">1000</span> --skip-existing --counters-only --no-sac --no-rpcs --no-reinit\n</pre>\n<p>Computes 1000 independent AES round 10 runs, each with different seed in\nthe counter mode. Tests BoolTest in various configurations.</p>\n</div>\n</div>\n<div id=\"reference-data\">\n<h3>Reference data</h3>\n<p>Reference data extracted from the <tt>pval_db.json</tt> for standard\nparameters are displayed in the table below. The z-score distribution\ndoes not change with data length for random data.</p>\n<p>The table shows minimal and maximal observed z-score with given number\nof samples for given BoolTest parameters run on a random data. If your\ntest gives z-score outside of the interval the null hypothesis is\nrejected with the given alpha.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>block</th>\n<th>deg</th>\n<th>comb-deg</th>\n<th>samples</th>\n<th>alpha</th>\n<th>min</th>\n<th>max</th>\n<th>mean</th>\n<th>stddev</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>128</td>\n<td>1</td>\n<td>1</td>\n<td>40006</td>\n<td>2.5e-05</td>\n<td>1.791114</td>\n<td>5.259500</td>\n<td>2.829184</td>\n<td>0.392369</td>\n</tr>\n<tr><td>128</td>\n<td>1</td>\n<td>2</td>\n<td>40006</td>\n<td>2.5e-05</td>\n<td>3.248292</td>\n<td>5.891956</td>\n<td>3.969550</td>\n<td>0.295748</td>\n</tr>\n<tr><td>128</td>\n<td>1</td>\n<td>3</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>4.148908</td>\n<td>6.873527</td>\n<td>4.785917</td>\n<td>0.252568</td>\n</tr>\n<tr><td>128</td>\n<td>2</td>\n<td>1</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>2.970847</td>\n<td>5.874507</td>\n<td>3.892347</td>\n<td>0.336373</td>\n</tr>\n<tr><td>128</td>\n<td>2</td>\n<td>2</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>4.318940</td>\n<td>7.185170</td>\n<td>5.283498</td>\n<td>0.304000</td>\n</tr>\n<tr><td>128</td>\n<td>2</td>\n<td>3</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>4.861234</td>\n<td>7.625240</td>\n<td>5.768929</td>\n<td>0.294646</td>\n</tr>\n<tr><td>128</td>\n<td>3</td>\n<td>1</td>\n<td>40005</td>\n<td>2.5e-05</td>\n<td>3.927999</td>\n<td>7.458227</td>\n<td>4.708559</td>\n<td>0.289679</td>\n</tr>\n<tr><td>128</td>\n<td>3</td>\n<td>2</td>\n<td>40003</td>\n<td>2.5e-05</td>\n<td>5.773050</td>\n<td>8.525327</td>\n<td>6.559734</td>\n<td>0.265691</td>\n</tr>\n<tr><td>128</td>\n<td>3</td>\n<td>3</td>\n<td>40008</td>\n<td>2.5e-05</td>\n<td>6.708463</td>\n<td>9.213692</td>\n<td>7.617935</td>\n<td>0.283725</td>\n</tr>\n<tr><td>256</td>\n<td>1</td>\n<td>1</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>2.032139</td>\n<td>5.473894</td>\n<td>3.043441</td>\n<td>0.370599</td>\n</tr>\n<tr><td>256</td>\n<td>1</td>\n<td>2</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>3.223516</td>\n<td>6.321811</td>\n<td>3.969150</td>\n<td>0.294976</td>\n</tr>\n<tr><td>256</td>\n<td>1</td>\n<td>3</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>4.139409</td>\n<td>6.393366</td>\n<td>4.787687</td>\n<td>0.254152</td>\n</tr>\n<tr><td>256</td>\n<td>2</td>\n<td>1</td>\n<td>40004</td>\n<td>2.5e-05</td>\n<td>3.371045</td>\n<td>6.680122</td>\n<td>4.220396</td>\n<td>0.312306</td>\n</tr>\n<tr><td>256</td>\n<td>2</td>\n<td>2</td>\n<td>40005</td>\n<td>2.5e-05</td>\n<td>4.838657</td>\n<td>7.835336</td>\n<td>5.659828</td>\n<td>0.296378</td>\n</tr>\n<tr><td>256</td>\n<td>2</td>\n<td>3</td>\n<td>40008</td>\n<td>2.5e-05</td>\n<td>5.225983</td>\n<td>7.678057</td>\n<td>6.050640</td>\n<td>0.288560</td>\n</tr>\n<tr><td>256</td>\n<td>3</td>\n<td>1</td>\n<td>40006</td>\n<td>2.5e-05</td>\n<td>4.432665</td>\n<td>6.699031</td>\n<td>5.129937</td>\n<td>0.263808</td>\n</tr>\n<tr><td>256</td>\n<td>3</td>\n<td>2</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>6.376655</td>\n<td>8.765264</td>\n<td>7.140519</td>\n<td>0.245438</td>\n</tr>\n<tr><td>256</td>\n<td>3</td>\n<td>3</td>\n<td>40009</td>\n<td>2.5e-05</td>\n<td>7.434249</td>\n<td>9.683502</td>\n<td>8.246235</td>\n<td>0.262657</td>\n</tr>\n<tr><td>384</td>\n<td>1</td>\n<td>1</td>\n<td>40006</td>\n<td>2.5e-05</td>\n<td>2.228137</td>\n<td>5.488184</td>\n<td>3.164776</td>\n<td>0.358101</td>\n</tr>\n<tr><td>384</td>\n<td>1</td>\n<td>2</td>\n<td>40008</td>\n<td>2.5e-05</td>\n<td>3.214039</td>\n<td>5.821200</td>\n<td>3.969855</td>\n<td>0.297057</td>\n</tr>\n<tr><td>384</td>\n<td>1</td>\n<td>3</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>4.125450</td>\n<td>6.395214</td>\n<td>4.787421</td>\n<td>0.249821</td>\n</tr>\n<tr><td>384</td>\n<td>2</td>\n<td>1</td>\n<td>40006</td>\n<td>2.5e-05</td>\n<td>3.555668</td>\n<td>6.394131</td>\n<td>4.402679</td>\n<td>0.295179</td>\n</tr>\n<tr><td>384</td>\n<td>2</td>\n<td>2</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>5.022725</td>\n<td>7.760645</td>\n<td>5.858194</td>\n<td>0.289895</td>\n</tr>\n<tr><td>384</td>\n<td>2</td>\n<td>3</td>\n<td>40006</td>\n<td>2.5e-05</td>\n<td>5.338075</td>\n<td>8.195091</td>\n<td>6.201193</td>\n<td>0.284553</td>\n</tr>\n<tr><td>384</td>\n<td>3</td>\n<td>1</td>\n<td>40008</td>\n<td>2.5e-05</td>\n<td>4.626479</td>\n<td>6.880511</td>\n<td>5.362216</td>\n<td>0.250799</td>\n</tr>\n<tr><td>384</td>\n<td>3</td>\n<td>2</td>\n<td>40006</td>\n<td>2.5e-05</td>\n<td>6.757955</td>\n<td>8.914936</td>\n<td>7.452872</td>\n<td>0.234911</td>\n</tr>\n<tr><td>384</td>\n<td>3</td>\n<td>3</td>\n<td>40006</td>\n<td>2.5e-05</td>\n<td>7.785775</td>\n<td>10.147881</td>\n<td>8.587092</td>\n<td>0.255603</td>\n</tr>\n<tr><td>512</td>\n<td>1</td>\n<td>1</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>2.317317</td>\n<td>5.418879</td>\n<td>3.244575</td>\n<td>0.347515</td>\n</tr>\n<tr><td>512</td>\n<td>1</td>\n<td>2</td>\n<td>40005</td>\n<td>2.5e-05</td>\n<td>3.182516</td>\n<td>6.602836</td>\n<td>3.970192</td>\n<td>0.295726</td>\n</tr>\n<tr><td>512</td>\n<td>1</td>\n<td>3</td>\n<td>40004</td>\n<td>2.5e-05</td>\n<td>4.184326</td>\n<td>6.618015</td>\n<td>4.788764</td>\n<td>0.250334</td>\n</tr>\n<tr><td>512</td>\n<td>2</td>\n<td>1</td>\n<td>40008</td>\n<td>2.5e-05</td>\n<td>3.742041</td>\n<td>6.213365</td>\n<td>4.529020</td>\n<td>0.287930</td>\n</tr>\n<tr><td>512</td>\n<td>2</td>\n<td>2</td>\n<td>40005</td>\n<td>2.5e-05</td>\n<td>5.088407</td>\n<td>8.296912</td>\n<td>5.994227</td>\n<td>0.285201</td>\n</tr>\n<tr><td>512</td>\n<td>2</td>\n<td>3</td>\n<td>40008</td>\n<td>2.5e-05</td>\n<td>5.521000</td>\n<td>8.581706</td>\n<td>6.303711</td>\n<td>0.283522</td>\n</tr>\n<tr><td>512</td>\n<td>3</td>\n<td>1</td>\n<td>40005</td>\n<td>2.5e-05</td>\n<td>4.878445</td>\n<td>7.012645</td>\n<td>5.522388</td>\n<td>0.242736</td>\n</tr>\n<tr><td>512</td>\n<td>3</td>\n<td>2</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>6.978223</td>\n<td>9.254703</td>\n<td>7.668983</td>\n<td>0.229045</td>\n</tr>\n<tr><td>512</td>\n<td>3</td>\n<td>3</td>\n<td>40007</td>\n<td>2.5e-05</td>\n<td>8.052672</td>\n<td>10.753842</td>\n<td>8.816430</td>\n<td>0.249750</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"reference-z-score-distributions\">\n<h3>Reference z-score distributions</h3>\n<p><img alt=\"Z-score distribution plot for block length 128 bit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0dfbd3f979e36fe1d74843434305803c4271252a/646f63732f696d672f7a73636f72652d64697374732d3132382e706e67\"> <img alt=\"Z-score distribution plot for block length 256 bit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e412bd26ed910405bebc0fa7790957696c15d81b/646f63732f696d672f7a73636f72652d64697374732d3235362e706e67\"> <img alt=\"Z-score distribution plot for block length 384 bit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d1334e978193bb2c4b36ca59faf354641d45b23/646f63732f696d672f7a73636f72652d64697374732d3338342e706e67\"> <img alt=\"Z-score distribution plot for block length 512 bit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13c79269d32f13f4eb610190f1fff993afd6b6a4/646f63732f696d672f7a73636f72652d64697374732d3531322e706e67\"></p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"scipy-installation-with-pip\">\n<h3>Scipy installation with pip</h3>\n<pre>pip install pyopenssl\npip install pycrypto\npip install git+https://github.com/scipy/scipy.git\npip install --upgrade --find-links=. .\n</pre>\n</div>\n<div id=\"virtual-environment\">\n<h3>Virtual environment</h3>\n<p>It is usually recommended to create a new python virtual environment for\nthe project:</p>\n<pre>virtualenv ~/pyenv\nsource ~/pyenv/bin/activate\npip install --upgrade pip\npip install --upgrade --find-links=. .\n</pre>\n</div>\n<div id=\"deployments\">\n<h3>Deployments</h3>\n<p>For various deployment information see\n<a href=\"DEPLOYMENTS.md\" rel=\"nofollow\">Deployments.md</a>.</p>\n</div>\n<div id=\"python-3-5\">\n<h3>Python 3.5+</h3>\n<p>BoolTest does not work with lower Python version. Use <tt>pyenv</tt> to\ninstall a new Python version. It internally downloads Python sources and\ninstalls it to <tt><span class=\"pre\">~/.pyenv</span></tt>.</p>\n<pre>git clone https://github.com/pyenv/pyenv.git ~/.pyenv\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\nexec $SHELL\npyenv install 3.7.1\npyenv local 3.7.1\n</pre>\n<p>The recommended version is Python 3.5+</p>\n</div>\n</div>\n<div id=\"secrypt-2017\">\n<h2>SECRYPT 2017</h2>\n<p>For SECRYPT 2017 related experiments check out\n<a href=\"SECRYPT2017.md\" rel=\"nofollow\">SECRYPT2017.md</a></p>\n</div>\n\n          </div>"}, "last_serial": 7156815, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b2c81b5363e9496d25ebd08ddfd6d8e4", "sha256": "4fb6f1079e39d42560efeab5f154474a17492bb19674d31f368ca8a38d692cb6"}, "downloads": -1, "filename": "booltest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b2c81b5363e9496d25ebd08ddfd6d8e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45811, "upload_time": "2017-11-11T17:59:26", "upload_time_iso_8601": "2017-11-11T17:59:26.689116Z", "url": "https://files.pythonhosted.org/packages/21/68/b02e841f9a290c71f7e59fdc5bd46497bbbfd0fd12349cc5ef97a3482f8d/booltest-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "31589eaf335e223cda954afff5b2f62e", "sha256": "b58e2268c242211dcca250650385bc0d8b547a5e8ae8c483d5c4097d2c353ca4"}, "downloads": -1, "filename": "booltest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "31589eaf335e223cda954afff5b2f62e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46481, "upload_time": "2017-11-11T18:48:14", "upload_time_iso_8601": "2017-11-11T18:48:14.279966Z", "url": "https://files.pythonhosted.org/packages/1b/ae/3dcfd3b034ba5ed417ee764ab8e0f51c7eb387c8e7a24ec8d61902078bfa/booltest-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0d0e7b6947d9dc7dc2ded68ffa083716", "sha256": "45278aebb360262bcd70a07f4545c91aa340f8c471f12ea660e92100da4b1a57"}, "downloads": -1, "filename": "booltest-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0d0e7b6947d9dc7dc2ded68ffa083716", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46773, "upload_time": "2017-11-11T21:16:29", "upload_time_iso_8601": "2017-11-11T21:16:29.413129Z", "url": "https://files.pythonhosted.org/packages/47/28/8eb659a3ee348a8f9ef328fe47cc2176a8b3f1472ef91749a9e7bdc51eca/booltest-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "90ca2a5e2daffa8ae09085622c41b538", "sha256": "db1bd96543829f14b97e89a69d2431544fe52e6e23973f87f9186cd71fc052d6"}, "downloads": -1, "filename": "booltest-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "90ca2a5e2daffa8ae09085622c41b538", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 73380, "upload_time": "2018-11-02T12:45:14", "upload_time_iso_8601": "2018-11-02T12:45:14.246275Z", "url": "https://files.pythonhosted.org/packages/20/a0/0c196143bfde739a44ff9632fb9d5ae4156800e0fcc059104de8ee2d6e8a/booltest-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da4e8b59f3d2d7360035fb15d2080de4", "sha256": "f731a1448c423b6728bb75be805eb1fc2bc998cbe57f0f544e961d1df2c7fc3e"}, "downloads": -1, "filename": "booltest-0.2.0.tar.gz", "has_sig": true, "md5_digest": "da4e8b59f3d2d7360035fb15d2080de4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75161, "upload_time": "2018-11-02T12:45:16", "upload_time_iso_8601": "2018-11-02T12:45:16.253625Z", "url": "https://files.pythonhosted.org/packages/cb/d8/869234853c8a54c9071b5cdcaab983af8940c5c5ae3fa68921a667c031df/booltest-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "780de9c6a1cc01dd464a87b1ab03304f", "sha256": "41a4922fb88f19df66c9a7e6bfd00704e31189d27baf6ce86a3306d3a662694b"}, "downloads": -1, "filename": "booltest-0.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "780de9c6a1cc01dd464a87b1ab03304f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8548165, "upload_time": "2019-12-13T11:41:14", "upload_time_iso_8601": "2019-12-13T11:41:14.039170Z", "url": "https://files.pythonhosted.org/packages/c0/1c/90399c4bddab9086a8f15e3494240e3586aed78d6ce0d71e96e758a7d9b4/booltest-0.3.0-py2.py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "24dc97049cd80ffd2edcbc11045464bc", "sha256": "de9bb79a9d3caf7c6edd7cf83be6d497f21c1cbcaf959e06467330187e859e5d"}, "downloads": -1, "filename": "booltest-0.4.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "24dc97049cd80ffd2edcbc11045464bc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8549773, "upload_time": "2019-12-13T19:44:24", "upload_time_iso_8601": "2019-12-13T19:44:24.534780Z", "url": "https://files.pythonhosted.org/packages/90/98/dae721b5075bbec21edc0360781ff34608e5dfdbe65604dba1a223a64ccd/booltest-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d3b8a92985ba38251aeb51d2465cfe1", "sha256": "8d8616dd5e269e9db8275298cefa27d7abdb79b284cd562e6d48b71301d5a54e"}, "downloads": -1, "filename": "booltest-0.4.0.tar.gz", "has_sig": true, "md5_digest": "0d3b8a92985ba38251aeb51d2465cfe1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8583492, "upload_time": "2019-12-13T19:44:51", "upload_time_iso_8601": "2019-12-13T19:44:51.253215Z", "url": "https://files.pythonhosted.org/packages/2b/31/44f0d47e8579e4dbac23467ed672934326cfd64d272979709064dd6185c3/booltest-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "4c8fabcd1f9b141b5fb29135beae7f0f", "sha256": "af55eab9ed4a765a802c6741af5f7f74bbc297a317f8a556f54f2c3710c9a9f7"}, "downloads": -1, "filename": "booltest-0.5.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4c8fabcd1f9b141b5fb29135beae7f0f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8551749, "upload_time": "2019-12-16T15:59:16", "upload_time_iso_8601": "2019-12-16T15:59:16.017410Z", "url": "https://files.pythonhosted.org/packages/31/49/54bbfd2f04527adbb49fa0c401c5d361980b15b70318251bf7e02b53c7fa/booltest-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a2fa31e5dfadbe01f6686e6730856ee", "sha256": "9fabfc5790961d9048c58da264e507771569bddbdbae94d2e474f55ce603162b"}, "downloads": -1, "filename": "booltest-0.5.0.tar.gz", "has_sig": true, "md5_digest": "0a2fa31e5dfadbe01f6686e6730856ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8586012, "upload_time": "2019-12-16T15:59:23", "upload_time_iso_8601": "2019-12-16T15:59:23.648530Z", "url": "https://files.pythonhosted.org/packages/e8/6f/22fbde3ff62b90369c7ea46cf07d420f22c082a2daf3886b6b71bc786941/booltest-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "237f86129d025eb8ee61ec63ce67eeb6", "sha256": "51ea6939f46920496b1f1dd61afe7ba94e4e86ddf0192f01eca689e243492659"}, "downloads": -1, "filename": "booltest-0.5.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "237f86129d025eb8ee61ec63ce67eeb6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8551593, "upload_time": "2019-12-16T22:28:29", "upload_time_iso_8601": "2019-12-16T22:28:29.627709Z", "url": "https://files.pythonhosted.org/packages/2c/00/e6ee2cdb7a9816e71f7d627887a1dd91ae64d5a3526a7703a48464d70d22/booltest-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aaa535c0f6a66593ea6b37ba0b4880d9", "sha256": "899e562ba05ec459f5ff4749a24703c57ce5f432f386a13cd41e0e4f75f99806"}, "downloads": -1, "filename": "booltest-0.5.1.tar.gz", "has_sig": true, "md5_digest": "aaa535c0f6a66593ea6b37ba0b4880d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8586001, "upload_time": "2019-12-16T22:28:48", "upload_time_iso_8601": "2019-12-16T22:28:48.294789Z", "url": "https://files.pythonhosted.org/packages/86/da/22fb7407e1ba3af03520e55867fde30a504cabd63ae734ae5f1ed334e6b3/booltest-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "1ab3a7172279c270341a1242c0f89617", "sha256": "0461704f172f257262d430418db408a48122589583e809fba3b356c90d350e01"}, "downloads": -1, "filename": "booltest-0.5.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1ab3a7172279c270341a1242c0f89617", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8553480, "upload_time": "2019-12-17T17:44:43", "upload_time_iso_8601": "2019-12-17T17:44:43.905198Z", "url": "https://files.pythonhosted.org/packages/c1/00/0fe9395cfe2634328f9a0bc6bbbebd822961411a858a1e34be6950aa9c06/booltest-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dfd4bb0e8c6b4b5d6a2d3ce41d4587ca", "sha256": "938c9c57a0fb52ae0abca05535954df32edb90e5cae5f6ed6875ea2b5d322981"}, "downloads": -1, "filename": "booltest-0.5.2.tar.gz", "has_sig": true, "md5_digest": "dfd4bb0e8c6b4b5d6a2d3ce41d4587ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8584658, "upload_time": "2019-12-17T17:44:10", "upload_time_iso_8601": "2019-12-17T17:44:10.773289Z", "url": "https://files.pythonhosted.org/packages/70/e7/db5300bd3c7c2e88ce9f09e7bad5d2fdd6b6849eee4e5be1d77b788f0e0c/booltest-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "344a4b0b21a9be37f9a094e603cbaa80", "sha256": "9d0cea143426548363f05458018d2c0a9b8910690df7463b85b59e4df20d91cc"}, "downloads": -1, "filename": "booltest-0.5.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "344a4b0b21a9be37f9a094e603cbaa80", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8552833, "upload_time": "2019-12-18T15:15:01", "upload_time_iso_8601": "2019-12-18T15:15:01.017943Z", "url": "https://files.pythonhosted.org/packages/13/75/1851010b795005984f9d1f34af038bc5427dd77bd06d9da7242497757fd5/booltest-0.5.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4822ce334f9b9e75cdea060864ed732", "sha256": "6faec086eeb79433c9dc115957b00064bd9ca3eb25449ac8465b1f00f3a9ec28"}, "downloads": -1, "filename": "booltest-0.5.3.tar.gz", "has_sig": true, "md5_digest": "d4822ce334f9b9e75cdea060864ed732", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8584915, "upload_time": "2019-12-18T15:15:13", "upload_time_iso_8601": "2019-12-18T15:15:13.015479Z", "url": "https://files.pythonhosted.org/packages/b6/21/dedfc64bf56f4e7d92587db5b2d11fe65df5faeab1c6b468339d5f36e000/booltest-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "b179bba8542dd2235e963ee2bf4dab31", "sha256": "d025c6bdbd1513b79eadb24a10aae762b6cc6980b04936649a109f4293b56453"}, "downloads": -1, "filename": "booltest-0.5.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "b179bba8542dd2235e963ee2bf4dab31", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8555171, "upload_time": "2019-12-20T20:01:16", "upload_time_iso_8601": "2019-12-20T20:01:16.110198Z", "url": "https://files.pythonhosted.org/packages/b8/0e/2f794fdd63bc6cc3e60ee115008425dfe060998f8e049ed5bb47811fe328/booltest-0.5.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "029d5b16e2e0e7eeac41c23dcdf4da8a", "sha256": "21b8c6e0d822ec5502cd7cbafd55ffc9a9f6fb4d7627c754dc37fafd0981023e"}, "downloads": -1, "filename": "booltest-0.5.4.tar.gz", "has_sig": true, "md5_digest": "029d5b16e2e0e7eeac41c23dcdf4da8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8586871, "upload_time": "2019-12-20T20:01:26", "upload_time_iso_8601": "2019-12-20T20:01:26.586462Z", "url": "https://files.pythonhosted.org/packages/61/65/f1ecc5af29d34f6486e5b1cd2b9ef52d37dc9f165ae472d40a6b2653410b/booltest-0.5.4.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "19ecd5c990232ed09ee3115ab4dbb4ce", "sha256": "325ca8b2257ecb449f2240cf3747d936c100d092faa22f123fd0182dd8f1231d"}, "downloads": -1, "filename": "booltest-0.6.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "19ecd5c990232ed09ee3115ab4dbb4ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8565049, "upload_time": "2020-02-05T13:45:21", "upload_time_iso_8601": "2020-02-05T13:45:21.669633Z", "url": "https://files.pythonhosted.org/packages/ab/b2/00ec621dc81846bfa76f229ce6515d9545fca4934b6b674e63fc7d4d90ad/booltest-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80a56f21754956549e217c4b11f30848", "sha256": "534da995e9a5f25aa136a21e297c551dde7486b93b370a9756d1c6529d1b7bc7"}, "downloads": -1, "filename": "booltest-0.6.0.tar.gz", "has_sig": true, "md5_digest": "80a56f21754956549e217c4b11f30848", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8593673, "upload_time": "2020-02-05T13:45:38", "upload_time_iso_8601": "2020-02-05T13:45:38.103491Z", "url": "https://files.pythonhosted.org/packages/af/f4/8fe1f00ac5546b8fdbcc45612b577b14523bb87a5f04eec641896c73d3b1/booltest-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "cf8145e4a8144f4bcbf3b661ea76c97e", "sha256": "605267eeedbd9905098e7e66ba1999d51be3baec9c41cd5f8c1bcf198a8eaf43"}, "downloads": -1, "filename": "booltest-0.6.1.tar.gz", "has_sig": true, "md5_digest": "cf8145e4a8144f4bcbf3b661ea76c97e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8593608, "upload_time": "2020-02-05T16:30:51", "upload_time_iso_8601": "2020-02-05T16:30:51.158122Z", "url": "https://files.pythonhosted.org/packages/fd/07/78182248499c16f7f7ccc7fd9e5948581769a682d2ce0da7b440d0945759/booltest-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "6ecd62e523b7a0613c4ea9994f529bb2", "sha256": "e99c21799b4f62d4dbfeef0269190d5130977f62819f84245c5b07de232e1466"}, "downloads": -1, "filename": "booltest-0.6.2.tar.gz", "has_sig": true, "md5_digest": "6ecd62e523b7a0613c4ea9994f529bb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8593601, "upload_time": "2020-02-05T16:48:23", "upload_time_iso_8601": "2020-02-05T16:48:23.913087Z", "url": "https://files.pythonhosted.org/packages/3e/fc/ce240b55f7c0e27897294c412fb64f3625b0316435d6ea3d13ca2feeb15a/booltest-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "bea3490825acc376b7d58524a37d1bb2", "sha256": "6b4bbe72c6e66ac505bc3ef2d8f65cda2b9db2eb333a2d76e78e93aa2da9622c"}, "downloads": -1, "filename": "booltest-0.6.3.tar.gz", "has_sig": true, "md5_digest": "bea3490825acc376b7d58524a37d1bb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8599569, "upload_time": "2020-02-18T09:24:18", "upload_time_iso_8601": "2020-02-18T09:24:18.163900Z", "url": "https://files.pythonhosted.org/packages/ed/c8/7b215d41d728d5fa0d3bacdcd353f58c20f63519c3c62961342950168059/booltest-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "e86a1c87924dc6cc9f23a1cefea7f27a", "sha256": "717a510a8f8cd5ccc0fd5346c38aff9d2bf5691c03e16439a992432e630e31bd"}, "downloads": -1, "filename": "booltest-0.6.4.tar.gz", "has_sig": true, "md5_digest": "e86a1c87924dc6cc9f23a1cefea7f27a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8599746, "upload_time": "2020-02-19T09:32:16", "upload_time_iso_8601": "2020-02-19T09:32:16.255031Z", "url": "https://files.pythonhosted.org/packages/8a/d2/363cf7652a48b875207cbf9d8ac1a49527ad0ee6f419d45ea03b037aacad/booltest-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "3738c380eafe888ff9788882097d66d1", "sha256": "d3e6933cc0c1642c40faaadc7f2beafb4b485d7f9bad8d200b9cdfc2d091ef60"}, "downloads": -1, "filename": "booltest-0.6.5.tar.gz", "has_sig": true, "md5_digest": "3738c380eafe888ff9788882097d66d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8599990, "upload_time": "2020-04-07T23:42:14", "upload_time_iso_8601": "2020-04-07T23:42:14.653613Z", "url": "https://files.pythonhosted.org/packages/61/e9/5610094dcdfb225e6704ecda050d049ef9950b9f81399800a198003a696e/booltest-0.6.5.tar.gz", "yanked": false}], "0.6.7": [{"comment_text": "", "digests": {"md5": "d77f7fea275d308c88abc6a8d48efed8", "sha256": "49c6de239f149caf803d391b9da94b57727a5b77782e86b6a5a232d61c8cbe71"}, "downloads": -1, "filename": "booltest-0.6.7.tar.gz", "has_sig": true, "md5_digest": "d77f7fea275d308c88abc6a8d48efed8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8553232, "upload_time": "2020-05-03T13:23:28", "upload_time_iso_8601": "2020-05-03T13:23:28.885610Z", "url": "https://files.pythonhosted.org/packages/c1/8e/726bc984fec55006a7533e83469cba9b88d1b98865fd6bac06f0dfbff214/booltest-0.6.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d77f7fea275d308c88abc6a8d48efed8", "sha256": "49c6de239f149caf803d391b9da94b57727a5b77782e86b6a5a232d61c8cbe71"}, "downloads": -1, "filename": "booltest-0.6.7.tar.gz", "has_sig": true, "md5_digest": "d77f7fea275d308c88abc6a8d48efed8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8553232, "upload_time": "2020-05-03T13:23:28", "upload_time_iso_8601": "2020-05-03T13:23:28.885610Z", "url": "https://files.pythonhosted.org/packages/c1/8e/726bc984fec55006a7533e83469cba9b88d1b98865fd6bac06f0dfbff214/booltest-0.6.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:43 2020"}