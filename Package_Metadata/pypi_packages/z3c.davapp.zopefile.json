{"info": {"author": "Michael Kerrin", "author_email": "michael.kerrin@openapp.ie", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python"], "description": "============================\nzope.file webdav integration\n============================\n\n  >>> import z3c.etree\n  >>> import zope.event\n  >>> from zope.lifecycleevent import ObjectCreatedEvent\n  >>> from zope.file.file import File\n\n  >>> etree = z3c.etree.getEngine()\n\nCreate a content object called `textfile.txt` in the root folder.\n\n  >>> f = File('text/plain', {'charset': 'ascii'})\n  >>> fp = f.open('w')\n  >>> fp.write('%s\\n' %('x' * 10) * 5)\n  >>> fp.close()\n\nEmit the `CreateObjectEvent' to generate lastmodified and created dates.\n\n  >>> zope.event.notify(ObjectCreatedEvent(f))\n  >>> getRootFolder()['testfile.txt'] = f\n\n\nPROPFIND\n========\n\nQuery the WebDAV data model for the file object. The following properties\ncurrently make up the data model for zope.file:\n\n+ {DAV:}creationdate\n\n+ {DAV:}displayname\n\n+ {DAV:}getcontentlength\n\n+ {DAV:}getcontenttype\n\n+ {DAV:}getlastmodified\n\n+ {DAV:}resourcetype\n\nQuery all properties on our test file.\n\n  >>> resp = webdav(\"\"\"\n  ... PROPFIND /testfile.txt HTTP/1.1\n  ... \"\"\", handle_errors = False)\n\n  >>> print resp.getBody() #doctest:+XMLDATA,+ELLIPSIS\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <creationdate>...</creationdate>\n          <displayname />\n          <getlastmodified>...</getlastmodified>\n          <getcontenttype>text/plain</getcontenttype>\n          <getcontentlength>55</getcontentlength>\n          <resourcetype />\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nThe `{DAV:}getetag` and `{DAV:}getcontentlanguage` properties are not defined\n(yet) on a file object.\n\n  >>> resp.getMSProperty('http://localhost/testfile.txt', '{DAV:}getetag')\n  Traceback (most recent call last):\n  ...\n  KeyError: \"'{DAV:}getetag' property not found for resource http://localhost/testfile.txt (200)\"\n  >>> resp.getMSProperty(\n  ...    'http://localhost/testfile.txt', '{DAV:}getcontentlanguage')\n  Traceback (most recent call last):\n  ...\n  KeyError: \"'{DAV:}getcontentlanguage' property not found for resource http://localhost/testfile.txt (200)\"\n\nPROPPATCH\n=========\n\nWe need to be logged in to update a property.\n\n  >>> reqbody = \"\"\"<propertyupdate xmlns=\"DAV:\">\n  ...  <set>\n  ...   <prop>\n  ...    <displayname>Test title</displayname>\n  ...   </prop>\n  ...  </set>\n  ... </propertyupdate>\"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Content-Type: application/xml\n  ... Content-Length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  401\n\nNow update the title of the file.\n\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-Type: application/xml\n  ... Content-Length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = False)\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <displayname />\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nRetrieve the displayname property using PROPFIND and notice the difference.\n\n  >>> reqbody = \"\"\"<propfind xmlns=\"DAV:\">\n  ...   <prop>\n  ...     <displayname />\n  ...   </prop>\n  ... </propfind>\n  ... \"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPFIND /testfile.txt HTTP/1.1\n  ... Content-type: application/xml\n  ... Content-Length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = False)\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <displayname>Test title</displayname>\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nThe `{DAV:}getcontentlength` property is a live property, and as such we\ncannot modify it.\n\n  >>> reqbody = \"\"\"<propertyupdate xmlns=\"DAV:\">\n  ...   <set>\n  ...     <prop>\n  ...       <getcontentlength>24</getcontentlength>\n  ...     </prop>\n  ...   </set>\n  ... </propertyupdate>\"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-type: application/xml \n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <getcontentlength />\n        </prop>\n        <status>HTTP/1.1 403 Forbidden</status>\n      </propstat>\n    </response>\n  </multistatus>\n\n\nOpaque properties\n=================\n\nSet two dead properties on our resource.\n\n  >>> reqbody = \"\"\"<propertyupdate xmlns=\"DAV:\">\n  ...  <set>\n  ...    <prop>\n  ...      <E:prop1 xmlns:E=\"examplens:\">PROPERTY 1</E:prop1>\n  ...      <E:prop2 xmlns:E=\"examplens:\">PROPERTY 2</E:prop2>\n  ...    </prop>\n  ...  </set>\n  ... </propertyupdate>\n  ... \"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-type: application/xml\n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = True)\n\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <ns1:prop1 xmlns:ns1=\"examplens:\" />\n          <ns1:prop2 xmlns:ns1=\"examplens:\" />\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nQuery these new properties.\n\n  >>> reqbody = \"\"\"<propfind xmlns=\"DAV:\">\n  ...  <prop xmlns:E=\"examplens:\" >\n  ...    <E:prop1 />\n  ...    <E:prop2 />\n  ...  </prop>\n  ... </propfind>\n  ... \"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPFIND /testfile.txt HTTP/1.1\n  ... Content-type: application/xml\n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <E:prop1 xmlns:E=\"examplens:\">PROPERTY 1</E:prop1>\n          <E:prop2 xmlns:E=\"examplens:\">PROPERTY 2</E:prop2>\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nUpdate the first property and remove the second.\n\n  >>> reqbody = \"\"\"<propertyupdate xmlns=\"DAV:\">\n  ...  <set>\n  ...    <prop>\n  ...      <E:prop1 xmlns:E=\"examplens:\">Only opaque property</E:prop1>\n  ...    </prop>\n  ...  </set>\n  ...  <remove>\n  ...    <prop>\n  ...      <E:prop2 xmlns:E=\"examplens:\" />\n  ...    </prop>\n  ...  </remove>\n  ... </propertyupdate>\"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPPATCH /testfile.txt HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-type: application/xml\n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <E:prop1 xmlns:E=\"examplens:\" />\n          <E:prop2 xmlns:E=\"examplens:\" />\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n    </response>\n  </multistatus>\n\nNow check that the opaque properties were updated successfully.\n\n  >>> reqbody = \"\"\"<propfind xmlns=\"DAV:\">\n  ...  <prop xmlns:E=\"examplens:\" >\n  ...    <E:prop1 />\n  ...    <E:prop2 />\n  ...  </prop>\n  ... </propfind>\n  ... \"\"\"\n  >>> resp = webdav(\"\"\"\n  ... PROPFIND /testfile.txt HTTP/1.1\n  ... Content-type: application/xml\n  ... Content-length: %d\n  ...\n  ... %s\"\"\" %(len(reqbody), reqbody))\n  >>> resp.getStatus()\n  207\n  >>> resp.getHeader('content-type')\n  'application/xml'\n  >>> print resp.getBody() #doctest:+XMLDATA\n  <multistatus xmlns=\"DAV:\">\n    <response>\n      <href>http://localhost/testfile.txt</href>\n      <propstat>\n        <prop>\n          <ns1:prop1 xmlns:ns1=\"examplens:\">Only opaque property</ns1:prop1>\n        </prop>\n        <status>HTTP/1.1 200 Ok</status>\n      </propstat>\n      <propstat>\n        <prop>\n          <ns1:prop2 xmlns:ns1=\"examplens:\" />\n        </prop>\n        <status>HTTP/1.1 404 Not Found</status>\n      </propstat>\n    </response>\n  </multistatus>\n\n\n==============================\nChanges in z3c.davapp.zopefile\n==============================", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://launchpad.net/z3c.dav", "keywords": null, "license": "ZPL", "maintainer": null, "maintainer_email": null, "name": "z3c.davapp.zopefile", "package_url": "https://pypi.org/project/z3c.davapp.zopefile/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.davapp.zopefile/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://launchpad.net/z3c.dav"}, "release_url": "https://pypi.org/project/z3c.davapp.zopefile/1.0b1/", "requires_dist": null, "requires_python": null, "summary": "Define the WebDAV data model for the  File and Image objects from the\n`zope.file' module.", "version": "1.0b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ============================<br>zope.file webdav integration<br>============================<br><br>  &gt;&gt;&gt; import z3c.etree<br>  &gt;&gt;&gt; import zope.event<br>  &gt;&gt;&gt; from zope.lifecycleevent import ObjectCreatedEvent<br>  &gt;&gt;&gt; from zope.file.file import File<br><br>  &gt;&gt;&gt; etree = z3c.etree.getEngine()<br><br>Create a content object called `textfile.txt` in the root folder.<br><br>  &gt;&gt;&gt; f = File('text/plain', {'charset': 'ascii'})<br>  &gt;&gt;&gt; fp = f.open('w')<br>  &gt;&gt;&gt; fp.write('%s\\n' %('x' * 10) * 5)<br>  &gt;&gt;&gt; fp.close()<br><br>Emit the `CreateObjectEvent' to generate lastmodified and created dates.<br><br>  &gt;&gt;&gt; zope.event.notify(ObjectCreatedEvent(f))<br>  &gt;&gt;&gt; getRootFolder()['testfile.txt'] = f<br><br><br>PROPFIND<br>========<br><br>Query the WebDAV data model for the file object. The following properties<br>currently make up the data model for zope.file:<br><br>+ {DAV:}creationdate<br><br>+ {DAV:}displayname<br><br>+ {DAV:}getcontentlength<br><br>+ {DAV:}getcontenttype<br><br>+ {DAV:}getlastmodified<br><br>+ {DAV:}resourcetype<br><br>Query all properties on our test file.<br><br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPFIND /testfile.txt HTTP/1.1<br>  ... \"\"\", handle_errors = False)<br><br>  &gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA,+ELLIPSIS<br>  &lt;multistatus xmlns=\"DAV:\"&gt;<br>    &lt;response&gt;<br>      &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;creationdate&gt;...&lt;/creationdate&gt;<br>          &lt;displayname /&gt;<br>          &lt;getlastmodified&gt;...&lt;/getlastmodified&gt;<br>          &lt;getcontenttype&gt;text/plain&lt;/getcontenttype&gt;<br>          &lt;getcontentlength&gt;55&lt;/getcontentlength&gt;<br>          &lt;resourcetype /&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;<br>      &lt;/propstat&gt;<br>    &lt;/response&gt;<br>  &lt;/multistatus&gt;<br><br>The `{DAV:}getetag` and `{DAV:}getcontentlanguage` properties are not defined<br>(yet) on a file object.<br><br>  &gt;&gt;&gt; resp.getMSProperty('http://localhost/testfile.txt', '{DAV:}getetag')<br>  Traceback (most recent call last):<br>  ...<br>  KeyError: \"'{DAV:}getetag' property not found for resource http://localhost/testfile.txt (200)\"<br>  &gt;&gt;&gt; resp.getMSProperty(<br>  ...    'http://localhost/testfile.txt', '{DAV:}getcontentlanguage')<br>  Traceback (most recent call last):<br>  ...<br>  KeyError: \"'{DAV:}getcontentlanguage' property not found for resource http://localhost/testfile.txt (200)\"<br><br>PROPPATCH<br>=========<br><br>We need to be logged in to update a property.<br><br>  &gt;&gt;&gt; reqbody = \"\"\"&lt;propertyupdate xmlns=\"DAV:\"&gt;<br>  ...  &lt;set&gt;<br>  ...   &lt;prop&gt;<br>  ...    &lt;displayname&gt;Test title&lt;/displayname&gt;<br>  ...   &lt;/prop&gt;<br>  ...  &lt;/set&gt;<br>  ... &lt;/propertyupdate&gt;\"\"\"<br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPPATCH /testfile.txt HTTP/1.1<br>  ... Content-Type: application/xml<br>  ... Content-Length: %d<br>  ...<br>  ... %s\"\"\" %(len(reqbody), reqbody))<br>  &gt;&gt;&gt; resp.getStatus()<br>  401<br><br>Now update the title of the file.<br><br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPPATCH /testfile.txt HTTP/1.1<br>  ... Authorization: Basic mgr:mgrpw<br>  ... Content-Type: application/xml<br>  ... Content-Length: %d<br>  ...<br>  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = False)<br>  &gt;&gt;&gt; resp.getStatus()<br>  207<br>  &gt;&gt;&gt; resp.getHeader('content-type')<br>  'application/xml'<br>  &gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA<br>  &lt;multistatus xmlns=\"DAV:\"&gt;<br>    &lt;response&gt;<br>      &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;displayname /&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;<br>      &lt;/propstat&gt;<br>    &lt;/response&gt;<br>  &lt;/multistatus&gt;<br><br>Retrieve the displayname property using PROPFIND and notice the difference.<br><br>  &gt;&gt;&gt; reqbody = \"\"\"&lt;propfind xmlns=\"DAV:\"&gt;<br>  ...   &lt;prop&gt;<br>  ...     &lt;displayname /&gt;<br>  ...   &lt;/prop&gt;<br>  ... &lt;/propfind&gt;<br>  ... \"\"\"<br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPFIND /testfile.txt HTTP/1.1<br>  ... Content-type: application/xml<br>  ... Content-Length: %d<br>  ...<br>  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = False)<br>  &gt;&gt;&gt; resp.getStatus()<br>  207<br>  &gt;&gt;&gt; resp.getHeader('content-type')<br>  'application/xml'<br>  &gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA<br>  &lt;multistatus xmlns=\"DAV:\"&gt;<br>    &lt;response&gt;<br>      &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;displayname&gt;Test title&lt;/displayname&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;<br>      &lt;/propstat&gt;<br>    &lt;/response&gt;<br>  &lt;/multistatus&gt;<br><br>The `{DAV:}getcontentlength` property is a live property, and as such we<br>cannot modify it.<br><br>  &gt;&gt;&gt; reqbody = \"\"\"&lt;propertyupdate xmlns=\"DAV:\"&gt;<br>  ...   &lt;set&gt;<br>  ...     &lt;prop&gt;<br>  ...       &lt;getcontentlength&gt;24&lt;/getcontentlength&gt;<br>  ...     &lt;/prop&gt;<br>  ...   &lt;/set&gt;<br>  ... &lt;/propertyupdate&gt;\"\"\"<br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPPATCH /testfile.txt HTTP/1.1<br>  ... Authorization: Basic mgr:mgrpw<br>  ... Content-type: application/xml <br>  ... Content-length: %d<br>  ...<br>  ... %s\"\"\" %(len(reqbody), reqbody))<br>  &gt;&gt;&gt; resp.getStatus()<br>  207<br>  &gt;&gt;&gt; resp.getHeader('content-type')<br>  'application/xml'<br>  &gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA<br>  &lt;multistatus xmlns=\"DAV:\"&gt;<br>    &lt;response&gt;<br>      &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;getcontentlength /&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 403 Forbidden&lt;/status&gt;<br>      &lt;/propstat&gt;<br>    &lt;/response&gt;<br>  &lt;/multistatus&gt;<br><br><br>Opaque properties<br>=================<br><br>Set two dead properties on our resource.<br><br>  &gt;&gt;&gt; reqbody = \"\"\"&lt;propertyupdate xmlns=\"DAV:\"&gt;<br>  ...  &lt;set&gt;<br>  ...    &lt;prop&gt;<br>  ...      &lt;E:prop1 xmlns:E=\"examplens:\"&gt;PROPERTY 1&lt;/E:prop1&gt;<br>  ...      &lt;E:prop2 xmlns:E=\"examplens:\"&gt;PROPERTY 2&lt;/E:prop2&gt;<br>  ...    &lt;/prop&gt;<br>  ...  &lt;/set&gt;<br>  ... &lt;/propertyupdate&gt;<br>  ... \"\"\"<br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPPATCH /testfile.txt HTTP/1.1<br>  ... Authorization: Basic mgr:mgrpw<br>  ... Content-type: application/xml<br>  ... Content-length: %d<br>  ...<br>  ... %s\"\"\" %(len(reqbody), reqbody), handle_errors = True)<br><br>  &gt;&gt;&gt; resp.getStatus()<br>  207<br>  &gt;&gt;&gt; resp.getHeader('content-type')<br>  'application/xml'<br>  &gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA<br>  &lt;multistatus xmlns=\"DAV:\"&gt;<br>    &lt;response&gt;<br>      &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;ns1:prop1 xmlns:ns1=\"examplens:\" /&gt;<br>          &lt;ns1:prop2 xmlns:ns1=\"examplens:\" /&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;<br>      &lt;/propstat&gt;<br>    &lt;/response&gt;<br>  &lt;/multistatus&gt;<br><br>Query these new properties.<br><br>  &gt;&gt;&gt; reqbody = \"\"\"&lt;propfind xmlns=\"DAV:\"&gt;<br>  ...  &lt;prop xmlns:E=\"examplens:\" &gt;<br>  ...    &lt;E:prop1 /&gt;<br>  ...    &lt;E:prop2 /&gt;<br>  ...  &lt;/prop&gt;<br>  ... &lt;/propfind&gt;<br>  ... \"\"\"<br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPFIND /testfile.txt HTTP/1.1<br>  ... Content-type: application/xml<br>  ... Content-length: %d<br>  ...<br>  ... %s\"\"\" %(len(reqbody), reqbody))<br>  &gt;&gt;&gt; resp.getStatus()<br>  207<br>  &gt;&gt;&gt; resp.getHeader('content-type')<br>  'application/xml'<br>  &gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA<br>  &lt;multistatus xmlns=\"DAV:\"&gt;<br>    &lt;response&gt;<br>      &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;E:prop1 xmlns:E=\"examplens:\"&gt;PROPERTY 1&lt;/E:prop1&gt;<br>          &lt;E:prop2 xmlns:E=\"examplens:\"&gt;PROPERTY 2&lt;/E:prop2&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;<br>      &lt;/propstat&gt;<br>    &lt;/response&gt;<br>  &lt;/multistatus&gt;<br><br>Update the first property and remove the second.<br><br>  &gt;&gt;&gt; reqbody = \"\"\"&lt;propertyupdate xmlns=\"DAV:\"&gt;<br>  ...  &lt;set&gt;<br>  ...    &lt;prop&gt;<br>  ...      &lt;E:prop1 xmlns:E=\"examplens:\"&gt;Only opaque property&lt;/E:prop1&gt;<br>  ...    &lt;/prop&gt;<br>  ...  &lt;/set&gt;<br>  ...  &lt;remove&gt;<br>  ...    &lt;prop&gt;<br>  ...      &lt;E:prop2 xmlns:E=\"examplens:\" /&gt;<br>  ...    &lt;/prop&gt;<br>  ...  &lt;/remove&gt;<br>  ... &lt;/propertyupdate&gt;\"\"\"<br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPPATCH /testfile.txt HTTP/1.1<br>  ... Authorization: Basic mgr:mgrpw<br>  ... Content-type: application/xml<br>  ... Content-length: %d<br>  ...<br>  ... %s\"\"\" %(len(reqbody), reqbody))<br>  &gt;&gt;&gt; resp.getStatus()<br>  207<br>  &gt;&gt;&gt; resp.getHeader('content-type')<br>  'application/xml'<br>  &gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA<br>  &lt;multistatus xmlns=\"DAV:\"&gt;<br>    &lt;response&gt;<br>      &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;E:prop1 xmlns:E=\"examplens:\" /&gt;<br>          &lt;E:prop2 xmlns:E=\"examplens:\" /&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;<br>      &lt;/propstat&gt;<br>    &lt;/response&gt;<br>  &lt;/multistatus&gt;<br><br>Now check that the opaque properties were updated successfully.<br><br>  &gt;&gt;&gt; reqbody = \"\"\"&lt;propfind xmlns=\"DAV:\"&gt;<br>  ...  &lt;prop xmlns:E=\"examplens:\" &gt;<br>  ...    &lt;E:prop1 /&gt;<br>  ...    &lt;E:prop2 /&gt;<br>  ...  &lt;/prop&gt;<br>  ... &lt;/propfind&gt;<br>  ... \"\"\"<br>  &gt;&gt;&gt; resp = webdav(\"\"\"<br>  ... PROPFIND /testfile.txt HTTP/1.1<br>  ... Content-type: application/xml<br>  ... Content-length: %d<br>  ...<br>  ... %s\"\"\" %(len(reqbody), reqbody))<br>  &gt;&gt;&gt; resp.getStatus()<br>  207<br>  &gt;&gt;&gt; resp.getHeader('content-type')<br>  'application/xml'<br>  &gt;&gt;&gt; print resp.getBody() #doctest:+XMLDATA<br>  &lt;multistatus xmlns=\"DAV:\"&gt;<br>    &lt;response&gt;<br>      &lt;href&gt;http://localhost/testfile.txt&lt;/href&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;ns1:prop1 xmlns:ns1=\"examplens:\"&gt;Only opaque property&lt;/ns1:prop1&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 200 Ok&lt;/status&gt;<br>      &lt;/propstat&gt;<br>      &lt;propstat&gt;<br>        &lt;prop&gt;<br>          &lt;ns1:prop2 xmlns:ns1=\"examplens:\" /&gt;<br>        &lt;/prop&gt;<br>        &lt;status&gt;HTTP/1.1 404 Not Found&lt;/status&gt;<br>      &lt;/propstat&gt;<br>    &lt;/response&gt;<br>  &lt;/multistatus&gt;<br><br><br>==============================<br>Changes in z3c.davapp.zopefile<br>==============================\n          </div>"}, "last_serial": 802012, "releases": {"1.0b1": [{"comment_text": "", "digests": {"md5": "36a6ddd749a38ebc78b88307933fd68c", "sha256": "194c583b263b03dbe733ecf60b7768ac9e4826d541039e0adce91db905cc18bf"}, "downloads": -1, "filename": "z3c.davapp.zopefile-1.0b1.tar.gz", "has_sig": false, "md5_digest": "36a6ddd749a38ebc78b88307933fd68c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5910, "upload_time": "2008-02-27T18:38:50", "upload_time_iso_8601": "2008-02-27T18:38:50Z", "url": "https://files.pythonhosted.org/packages/46/41/6caa70acc10d4811922a7ba1c72d90b4fe58c51964ba6cd577ea2fc5f74f/z3c.davapp.zopefile-1.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36a6ddd749a38ebc78b88307933fd68c", "sha256": "194c583b263b03dbe733ecf60b7768ac9e4826d541039e0adce91db905cc18bf"}, "downloads": -1, "filename": "z3c.davapp.zopefile-1.0b1.tar.gz", "has_sig": false, "md5_digest": "36a6ddd749a38ebc78b88307933fd68c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5910, "upload_time": "2008-02-27T18:38:50", "upload_time_iso_8601": "2008-02-27T18:38:50Z", "url": "https://files.pythonhosted.org/packages/46/41/6caa70acc10d4811922a7ba1c72d90b4fe58c51964ba6cd577ea2fc5f74f/z3c.davapp.zopefile-1.0b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:07 2020"}