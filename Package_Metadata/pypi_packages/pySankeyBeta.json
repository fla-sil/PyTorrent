{"info": {"author": "pierre-sassoulas", "author_email": "pierre.sassoulas@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Affero General Public License v3", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# pySankey\n\nUses matplotlib to create simple <a href=\"https://en.wikipedia.org/wiki/Sankey_diagram\">\nSankey diagrams</a> flowing only from left to right.\n\n[![PyPI version](https://badge.fury.io/py/pySankeyBeta.svg)](https://badge.fury.io/py/pySankeyBeta)\n[![Build Status](https://travis-ci.org/Pierre-Sassoulas/pySankey.svg?branch=master)](https://travis-ci.org/Pierre-Sassoulas/pySankey)\n[![Coverage Status](https://coveralls.io/repos/github/Pierre-Sassoulas/pySankey/badge.svg?branch=master)](https://coveralls.io/github/Pierre-Sassoulas/pySankey?branch=master)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n## Example\n\nWith fruits.txt :\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>true</th>\n      <th>predicted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>blueberry</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>lime</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>blueberry</td>\n      <td>lime</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>apple</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>lime</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>blueberry</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>orange</td>\n      <td>banana</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>apple</td>\n      <td>lime</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000 rows \u00d7 2 columns</p>\n</div>\n\nYou can generate a sankey's diagram with this code:\n\n```python\nimport pandas as pd\nfrom pysankey import sankey\n\ndf = pd.read_csv(\n    'pysankey/fruits.txt', sep=' ', names=['true', 'predicted']\n)\ncolorDict = {\n    'apple':'#f71b1b',\n    'blueberry':'#1b7ef7',\n    'banana':'#f3f71b',\n    'lime':'#12e23f',\n    'orange':'#f78c1b',\n    'kiwi':'#9BD937'\n}\n\nax = sankey(\n    df['true'], df['predicted'], aspect=20, colorDict=colorDict,\n    leftLabels=['banana','orange','blueberry','apple','lime'],\n    rightLabels=['orange','banana','blueberry','apple','lime','kiwi'],\n    fontsize=12\n)\nplt.show() # to display\nplt.savefig('fruit.png', bbox_inches='tight') # to save\n```\n\n![Fruity Alchemy](pysankey/fruit.png)\n\nYou could also use weight:\n\n```\n,customer,good,revenue\n0,John,fruit,5.5\n1,Mike,meat,11.0\n2,Betty,drinks,7.0\n3,Ben,fruit,4.0\n4,Betty,bread,2.0\n5,John,bread,2.5\n6,John,drinks,8.0\n7,Ben,bread,2.0\n8,Mike,bread,3.5\n9,John,meat,13.0\n```\n\n```python\nimport pandas as pd\nfrom pysankey import sankey\n\ndf = pd.read_csv(\n    'pysankey/customers-goods.csv', sep=',',\n    names=['id', 'customer', 'good', 'revenue']\n)\nweight = df['revenue'].values[1:].astype(float)\n\nax = sankey(\n      left=df['customer'].values[1:], right=df['good'].values[1:],\n      rightWeight=weight, leftWeight=weight, aspect=20, fontsize=20\n)\nplt.show() # to display\nplt.savefig('customers-goods.png', bbox_inches='tight') # to save\n```\n\n![Customer goods](pysankey/customers-goods.png)\n\nSimilar to seaborn, you can pass a matplotlib `Axes` to `sankey` function:\n```python\nimport pandas as pd\nfrom pysankey import sankey\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\n        'pysankey/fruits.txt',\n        sep=' ', names=['true', 'predicted']\n)\ncolorDict = {\n    'apple': '#f71b1b',\n    'blueberry': '#1b7ef7',\n    'banana': '#f3f71b',\n    'lime': '#12e23f',\n    'orange': '#f78c1b'\n}\n\nax1 = plt.axes()\n\nsankey(\n      df['true'], df['predicted'], aspect=20, colorDict=colorDict,\n      fontsize=12, ax=ax1\n)\n\nplt.show()\n```\n\n## Important informations\n\nUse of `figureName`, `closePlot`, `figSize` in `sankey()` is deprecated and will be remove in a future version.\nThis is done so matplotlib is used more transparently as this [issue](https://github.com/anazalea/pySankey/issues/26#issue-429312025) on the original github repo suggested.\n\nNow, `sankey` does less of the customization and let the user do it to their liking by returning a matplotlib `Axes` object, which mean the user also has access to the `Figure` to customise.\nThen they can choose what to do with it - showing it, saving it with much more flexibility.\n\n### Recommended changes to your code\n - To save a figure, one can simply do:\n  ```python\n    plt.savefig(\"<figureName>.png\", bbox_inches=\"tight\", dpi=150)\n  ```\n\n - The `closePlot` is not needed anymore because without `plt.show()` after `sankey()`, no plot is displayed.\n  You can still do `plt.close()` to be sure to not display this plot if you display other plots afterwards.\n\n- You can modify the sankey size by changing the one from the matplotlib figure.\n  ```python\n    plt.gcf().set_size_inches(figSize)\n  ```\n\n## Package development\n\n    pip3 install -e \".[test]\"\n\n### Lint\n\n\tpylint pysankey\n\n### Testing\n\n\tpython -m unittest\n\n### Coverage\n\n\tcoverage run -m unittest\n\tcoverage html\n\t# Open htmlcov/index.html in a navigator", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pierre-sassoulas/pySankey", "keywords": "", "license": "GNU General Public License v3.0", "maintainer": "", "maintainer_email": "", "name": "pySankeyBeta", "package_url": "https://pypi.org/project/pySankeyBeta/", "platform": "", "project_url": "https://pypi.org/project/pySankeyBeta/", "project_urls": {"Homepage": "https://github.com/pierre-sassoulas/pySankey"}, "release_url": "https://pypi.org/project/pySankeyBeta/1.2.2/", "requires_dist": null, "requires_python": "", "summary": "Make simple, pretty Sankey Diagrams (Beta version)", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pySankey</h1>\n<p>Uses matplotlib to create simple <a href=\"https://en.wikipedia.org/wiki/Sankey_diagram\" rel=\"nofollow\">\nSankey diagrams</a> flowing only from left to right.</p>\n<p><a href=\"https://badge.fury.io/py/pySankeyBeta\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bad11a8a5ae14a3224ae917d1b20531f4e73a7e9/68747470733a2f2f62616467652e667572792e696f2f70792f707953616e6b6579426574612e737667\"></a>\n<a href=\"https://travis-ci.org/Pierre-Sassoulas/pySankey\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d22686dd9940b082f58ae219a991815cef23faf1/68747470733a2f2f7472617669732d63692e6f72672f5069657272652d536173736f756c61732f707953616e6b65792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/Pierre-Sassoulas/pySankey?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/403495c7fba1ae265102f9b9d6e227b843f79eef/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5069657272652d536173736f756c61732f707953616e6b65792f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></a></p>\n<h2>Example</h2>\n<p>With fruits.txt :</p>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>true</th>\n      <th>predicted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>blueberry</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>lime</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>blueberry</td>\n      <td>lime</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>apple</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>lime</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>blueberry</td>\n      <td>orange</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>orange</td>\n      <td>banana</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>apple</td>\n      <td>lime</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000 rows \u00d7 2 columns</p>\n</div>\n<p>You can generate a sankey's diagram with this code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pysankey</span> <span class=\"kn\">import</span> <span class=\"n\">sankey</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span>\n    <span class=\"s1\">'pysankey/fruits.txt'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'true'</span><span class=\"p\">,</span> <span class=\"s1\">'predicted'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">colorDict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'apple'</span><span class=\"p\">:</span><span class=\"s1\">'#f71b1b'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'blueberry'</span><span class=\"p\">:</span><span class=\"s1\">'#1b7ef7'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'banana'</span><span class=\"p\">:</span><span class=\"s1\">'#f3f71b'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'lime'</span><span class=\"p\">:</span><span class=\"s1\">'#12e23f'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'orange'</span><span class=\"p\">:</span><span class=\"s1\">'#f78c1b'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'kiwi'</span><span class=\"p\">:</span><span class=\"s1\">'#9BD937'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">sankey</span><span class=\"p\">(</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'true'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'predicted'</span><span class=\"p\">],</span> <span class=\"n\">aspect</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">colorDict</span><span class=\"o\">=</span><span class=\"n\">colorDict</span><span class=\"p\">,</span>\n    <span class=\"n\">leftLabels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'banana'</span><span class=\"p\">,</span><span class=\"s1\">'orange'</span><span class=\"p\">,</span><span class=\"s1\">'blueberry'</span><span class=\"p\">,</span><span class=\"s1\">'apple'</span><span class=\"p\">,</span><span class=\"s1\">'lime'</span><span class=\"p\">],</span>\n    <span class=\"n\">rightLabels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'orange'</span><span class=\"p\">,</span><span class=\"s1\">'banana'</span><span class=\"p\">,</span><span class=\"s1\">'blueberry'</span><span class=\"p\">,</span><span class=\"s1\">'apple'</span><span class=\"p\">,</span><span class=\"s1\">'lime'</span><span class=\"p\">,</span><span class=\"s1\">'kiwi'</span><span class=\"p\">],</span>\n    <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">12</span>\n<span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span> <span class=\"c1\"># to display</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'fruit.png'</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">'tight'</span><span class=\"p\">)</span> <span class=\"c1\"># to save</span>\n</pre>\n<p><img alt=\"Fruity Alchemy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30891b65efed254dcc3561f959a5c93726e61729/707973616e6b65792f66727569742e706e67\"></p>\n<p>You could also use weight:</p>\n<pre><code>,customer,good,revenue\n0,John,fruit,5.5\n1,Mike,meat,11.0\n2,Betty,drinks,7.0\n3,Ben,fruit,4.0\n4,Betty,bread,2.0\n5,John,bread,2.5\n6,John,drinks,8.0\n7,Ben,bread,2.0\n8,Mike,bread,3.5\n9,John,meat,13.0\n</code></pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pysankey</span> <span class=\"kn\">import</span> <span class=\"n\">sankey</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span>\n    <span class=\"s1\">'pysankey/customers-goods.csv'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">,</span>\n    <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'customer'</span><span class=\"p\">,</span> <span class=\"s1\">'good'</span><span class=\"p\">,</span> <span class=\"s1\">'revenue'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'revenue'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">sankey</span><span class=\"p\">(</span>\n      <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'customer'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'good'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span>\n      <span class=\"n\">rightWeight</span><span class=\"o\">=</span><span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">leftWeight</span><span class=\"o\">=</span><span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">aspect</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">20</span>\n<span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span> <span class=\"c1\"># to display</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'customers-goods.png'</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">'tight'</span><span class=\"p\">)</span> <span class=\"c1\"># to save</span>\n</pre>\n<p><img alt=\"Customer goods\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/934d907077cbaaee69a24b1de889d8824288ec34/707973616e6b65792f637573746f6d6572732d676f6f64732e706e67\"></p>\n<p>Similar to seaborn, you can pass a matplotlib <code>Axes</code> to <code>sankey</code> function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pysankey</span> <span class=\"kn\">import</span> <span class=\"n\">sankey</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span>\n        <span class=\"s1\">'pysankey/fruits.txt'</span><span class=\"p\">,</span>\n        <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'true'</span><span class=\"p\">,</span> <span class=\"s1\">'predicted'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">colorDict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"s1\">'#f71b1b'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'blueberry'</span><span class=\"p\">:</span> <span class=\"s1\">'#1b7ef7'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'banana'</span><span class=\"p\">:</span> <span class=\"s1\">'#f3f71b'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'lime'</span><span class=\"p\">:</span> <span class=\"s1\">'#12e23f'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"s1\">'#f78c1b'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ax1</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"p\">()</span>\n\n<span class=\"n\">sankey</span><span class=\"p\">(</span>\n      <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'true'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'predicted'</span><span class=\"p\">],</span> <span class=\"n\">aspect</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">colorDict</span><span class=\"o\">=</span><span class=\"n\">colorDict</span><span class=\"p\">,</span>\n      <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax1</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h2>Important informations</h2>\n<p>Use of <code>figureName</code>, <code>closePlot</code>, <code>figSize</code> in <code>sankey()</code> is deprecated and will be remove in a future version.\nThis is done so matplotlib is used more transparently as this <a href=\"https://github.com/anazalea/pySankey/issues/26#issue-429312025\" rel=\"nofollow\">issue</a> on the original github repo suggested.</p>\n<p>Now, <code>sankey</code> does less of the customization and let the user do it to their liking by returning a matplotlib <code>Axes</code> object, which mean the user also has access to the <code>Figure</code> to customise.\nThen they can choose what to do with it - showing it, saving it with much more flexibility.</p>\n<h3>Recommended changes to your code</h3>\n<ul>\n<li>To save a figure, one can simply do:</li>\n</ul>\n<pre>  <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;figureName&gt;.png\"</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s2\">\"tight\"</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<p>The <code>closePlot</code> is not needed anymore because without <code>plt.show()</code> after <code>sankey()</code>, no plot is displayed.\nYou can still do <code>plt.close()</code> to be sure to not display this plot if you display other plots afterwards.</p>\n</li>\n<li>\n<p>You can modify the sankey size by changing the one from the matplotlib figure.</p>\n<pre>  <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">gcf</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">(</span><span class=\"n\">figSize</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h2>Package development</h2>\n<pre><code>pip3 install -e \".[test]\"\n</code></pre>\n<h3>Lint</h3>\n<pre><code>pylint pysankey\n</code></pre>\n<h3>Testing</h3>\n<pre><code>python -m unittest\n</code></pre>\n<h3>Coverage</h3>\n<pre><code>coverage run -m unittest\ncoverage html\n# Open htmlcov/index.html in a navigator\n</code></pre>\n\n          </div>"}, "last_serial": 6521423, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2f050156919f871cb23875256a9c1919", "sha256": "a0fcf485eb1643f94522563d78ba404a40af32788231a5d8486dbb18fff57eea"}, "downloads": -1, "filename": "pySankeyBeta-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2f050156919f871cb23875256a9c1919", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6395, "upload_time": "2018-12-12T22:12:55", "upload_time_iso_8601": "2018-12-12T22:12:55.605736Z", "url": "https://files.pythonhosted.org/packages/76/34/3c834f3c5063152e721a0cce496095fda7d06f7ddaa2dc056b7bbaca5fbd/pySankeyBeta-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b8309cdf2dbaf0139c9efccd09c1759e", "sha256": "a39f3fdddf7dfa461999879651f8b94d2cc9273bc72e42f6b426156ac2257af6"}, "downloads": -1, "filename": "pySankeyBeta-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b8309cdf2dbaf0139c9efccd09c1759e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 329174, "upload_time": "2018-12-12T22:36:43", "upload_time_iso_8601": "2018-12-12T22:36:43.121711Z", "url": "https://files.pythonhosted.org/packages/e9/12/4fcd90325d99914caf53a9bfd80db1892ca49925ebee9f5aaf1c431700b3/pySankeyBeta-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "19a091a07c6b0eb5dbefc0438e8791eb", "sha256": "3053320954ad5893ffc33f14fb9519b0a50928773bc1bf3f580f1856e0ae1898"}, "downloads": -1, "filename": "pySankeyBeta-1.0.2.tar.gz", "has_sig": false, "md5_digest": "19a091a07c6b0eb5dbefc0438e8791eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 329348, "upload_time": "2018-12-13T22:09:09", "upload_time_iso_8601": "2018-12-13T22:09:09.506308Z", "url": "https://files.pythonhosted.org/packages/20/37/d515e7fefc3c3c93d7a320dc1e50a07ee77246a07dac023712db94f716f0/pySankeyBeta-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bc18e67d226817c7e13688dbce49ac6a", "sha256": "1201bb3305de81ed2f152a7bea9e2ba1f530ece61a15c17d79bcd20a366a610d"}, "downloads": -1, "filename": "pySankeyBeta-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bc18e67d226817c7e13688dbce49ac6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 335991, "upload_time": "2018-12-13T22:35:01", "upload_time_iso_8601": "2018-12-13T22:35:01.457079Z", "url": "https://files.pythonhosted.org/packages/d6/b6/1cd515052f9c78a8258ae67c79ba1a856ba6f746ef7e022023fa78f0df86/pySankeyBeta-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "cf4c729c7bcb076992471a0520d99bd5", "sha256": "0eee2d4c7b58ebed622c171bc141b9d112644a1104fa703b7715bb417e863d3a"}, "downloads": -1, "filename": "pySankeyBeta-1.0.4.tar.gz", "has_sig": false, "md5_digest": "cf4c729c7bcb076992471a0520d99bd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 336493, "upload_time": "2019-01-04T07:50:22", "upload_time_iso_8601": "2019-01-04T07:50:22.319957Z", "url": "https://files.pythonhosted.org/packages/d3/5d/dc33ef5c130f4b45ac362d85ec2a5bb3d2aaea32fc7e159233b96a8c6724/pySankeyBeta-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "b618d7931099031c4496f89bffcdfde7", "sha256": "06acd4620a0c4797a3b9ff928bf9ba585a0247be076998ec407ddd23805494cb"}, "downloads": -1, "filename": "pySankeyBeta-1.0.5.tar.gz", "has_sig": false, "md5_digest": "b618d7931099031c4496f89bffcdfde7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 335875, "upload_time": "2019-04-22T16:48:02", "upload_time_iso_8601": "2019-04-22T16:48:02.084360Z", "url": "https://files.pythonhosted.org/packages/6f/79/ba21f5ad2e07371e7a22c78e8847722587b6f250fc92f09b214265080704/pySankeyBeta-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "1cfa664a239d4893f5eb937a15eee9a6", "sha256": "053b6928d51f99bc96a73a968aecce0d10ee4cd946ec7a7569bd07b056f059c1"}, "downloads": -1, "filename": "pySankeyBeta-1.0.6.tar.gz", "has_sig": false, "md5_digest": "1cfa664a239d4893f5eb937a15eee9a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 335888, "upload_time": "2019-06-30T18:34:34", "upload_time_iso_8601": "2019-06-30T18:34:34.485485Z", "url": "https://files.pythonhosted.org/packages/25/d6/8a162bd65ccf211eb59d682d8d44fc275f753e349175b7ede06317ab894e/pySankeyBeta-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "609248c6372cc9901cd6d7c4ef2ada95", "sha256": "d770272b2ed9c8a3bcd5f4688e308f0dcb96c8691db983e081b3a8d209c96e64"}, "downloads": -1, "filename": "pySankeyBeta-1.0.7.tar.gz", "has_sig": false, "md5_digest": "609248c6372cc9901cd6d7c4ef2ada95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 337179, "upload_time": "2019-06-30T19:04:31", "upload_time_iso_8601": "2019-06-30T19:04:31.100601Z", "url": "https://files.pythonhosted.org/packages/03/f2/2cce4b2eb3d5823cef18a83b79a2890193ab60998f0d99408deb0d5f6a38/pySankeyBeta-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "a9a35e4680bea71ccbf23e53e4ffae09", "sha256": "4cfef7733aab3732ccb80a55fd7390ea49ef16075ba56c2a10d2c4a775c19ba5"}, "downloads": -1, "filename": "pySankeyBeta-1.0.8.tar.gz", "has_sig": false, "md5_digest": "a9a35e4680bea71ccbf23e53e4ffae09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 536333, "upload_time": "2019-07-04T19:47:20", "upload_time_iso_8601": "2019-07-04T19:47:20.738984Z", "url": "https://files.pythonhosted.org/packages/d1/41/33916de416221f6c55ccc03c0030a55e4ff7ca54c1f5deeee7d15d342d76/pySankeyBeta-1.0.8.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d8b96b70df58aa1d5006294179bbed87", "sha256": "31a30a3f8cbae91b5723eabf219864ce159e0930f4f58c0546a15da2b7827d77"}, "downloads": -1, "filename": "pySankeyBeta-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d8b96b70df58aa1d5006294179bbed87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 537947, "upload_time": "2019-11-21T22:20:37", "upload_time_iso_8601": "2019-11-21T22:20:37.432061Z", "url": "https://files.pythonhosted.org/packages/3a/81/96e1a31c980a9d9965d3c4c1028a82d3d6420e4b5675f018262f5633be4c/pySankeyBeta-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "a3db7634584715b493daa12315e9cf27", "sha256": "90a9f1ffcf22cf6c4fdbd060229c37911e6114bd79bc42eeff9b58c0e5aaa803"}, "downloads": -1, "filename": "pySankeyBeta-1.2.0.tar.gz", "has_sig": false, "md5_digest": "a3db7634584715b493daa12315e9cf27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8126, "upload_time": "2020-01-25T20:28:51", "upload_time_iso_8601": "2020-01-25T20:28:51.431486Z", "url": "https://files.pythonhosted.org/packages/48/01/caea99979de8ff7496e4a332f28e4adbcf0f80ff43d6a78f3df7b05eb498/pySankeyBeta-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "77f5fc60be8afdc47b91ff161da835c9", "sha256": "59fcfeccae3df61fa6b7a226267a22dfed1b1158fea4d8d855cdeb9992bc6d9a"}, "downloads": -1, "filename": "pySankeyBeta-1.2.1.tar.gz", "has_sig": false, "md5_digest": "77f5fc60be8afdc47b91ff161da835c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8057, "upload_time": "2020-01-25T21:29:21", "upload_time_iso_8601": "2020-01-25T21:29:21.423771Z", "url": "https://files.pythonhosted.org/packages/fe/88/3c470c31fc0ba49829ead9d144f3684f63f4550f16b588f8a1362ea05a36/pySankeyBeta-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "e97ffca0663f51ff327c35c06a73a307", "sha256": "c17e578f29f4d34714f1fd9d9bf1285678ca9581b76543ed62b3069db68fee95"}, "downloads": -1, "filename": "pySankeyBeta-1.2.2.tar.gz", "has_sig": false, "md5_digest": "e97ffca0663f51ff327c35c06a73a307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8071, "upload_time": "2020-01-26T10:13:46", "upload_time_iso_8601": "2020-01-26T10:13:46.878788Z", "url": "https://files.pythonhosted.org/packages/75/b0/79292f807d4b896d8ea7e64fe202978f0167957b64c917e6e0d579c36ba4/pySankeyBeta-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e97ffca0663f51ff327c35c06a73a307", "sha256": "c17e578f29f4d34714f1fd9d9bf1285678ca9581b76543ed62b3069db68fee95"}, "downloads": -1, "filename": "pySankeyBeta-1.2.2.tar.gz", "has_sig": false, "md5_digest": "e97ffca0663f51ff327c35c06a73a307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8071, "upload_time": "2020-01-26T10:13:46", "upload_time_iso_8601": "2020-01-26T10:13:46.878788Z", "url": "https://files.pythonhosted.org/packages/75/b0/79292f807d4b896d8ea7e64fe202978f0167957b64c917e6e0d579c36ba4/pySankeyBeta-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:24 2020"}