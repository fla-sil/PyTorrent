{"info": {"author": "Maycon Oliveira", "author_email": "flayner5@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# taiga-bio - Package version of the [TaIGa](https://github.com/flayner2/taiga) program\n\nThis is a package version of the original TaIGa program. This was built to be available on Pypi and be easily installable\nby any Python package manager, and also to allow the user to import and make custom scripts from TaIGa's functionalities.\nFor better information, see the repo for the original [TaIGa](https://github.com/flayner2/taiga).\n\n## 1 How to run taiga-bio\n\nFrom a Python script of your choice (must be `>=Python 3.6`), do:\n\n```python\nfrom taiga.core import taxonomy\nfrom taiga.common import data_handlers\n\ntaxon_list = taxonomy.run_taiga(input_file, email)\ndf = data_handlers.create_df(taxon_list)\ndata_handlers.create_output(ouput_directory, df, taxon_list)\n\n```\n\nThis will run TaIGa's main function, which grabs a list of names from `input_file`, fetches for \ntheir taxonomic information on [NCBI's Taxonomy](https://www.ncbi.nlm.nih.gov/taxonomy), which \nneeds your `email` as a good practice, and returns a list of Taxon objects. It then calls the \n`create_df` function, which receives the list of Taxon objects and returns a DataFrame. Then, it \ncalls the `create_output` function, which outputs the results to the specified `output_directory`, \nwhich need not to be pre-created, using the DataFrame and the Taxon list. It needs the Taxon list\nto be able to create a file that lists Taxon objects missing critical information.\n\n## 2 Arguments\n\n```python\n\nrun_taiga(infile, email, gb_mode=0, tid=False, correction=False, retries=5, silent=False) -> List[Taxon]\n\n```\n\n### 2.1 Positional (required) Arguments:\n\n**[input file]**: This is the full path to the file you will use as an input for TaIGa. By default, TaIGa expects it to be a \nlist of organism names separated by line in a text-like file (`.txt`). You can change this behaviour so TaIGa would expect: a line \nseparated text file with a collection of Taxon IDs; a Genbank format file with multiple records, all from the same organism; \na Genbank format file with only one record; or a Genbank format file with multiple records from multiple organisms. Organism names \nrefer to any valid taxonomic level that is available on NCBI's Taxonomy database.\n\n**[user e-mail]**: This is just a valid e-mail of yours. Nothing will be sent to this e-mail, and neither TaIGa itself neither me \nwill ever use it for anything other than running TaIGa (in fact, I will never have access to this information. You may check the \ncode yourself to confirm this). TaIGa only requires this field because it is standard procedure to pass on this information when \nsending requests to Entrez. This is all TaIGa will use the e-mail for. You may pass on gibberish, if you so want, but I advise \nyou not to. TaIGa will run fine anyways, as long as you provide something to this argument field.\n\n### 2.2 Optional Arguments:\n\n**gb_mode [0, 1, 2, 3]**: *Default: 0*. This changes TaIGa's default input type to instead expect a Genbank format file. This \nargument exepects one numeric option from the available ones. Those are:\n\n- *0*: Acts the same as not passing the `--gb-mode` argument at all, not altering TaIGa's default behavior.\n- *1*: A Genbank format file containing multiple records from multiple, differently named organisms (eg. *Escherichia coli*, \n*Bos taurus*, *Mus musculus*, all in the same `.gb` or `.gbff` file).\n- *2*: A Genbank format file containing a single record (eg. an annotation for a *COX 1* gene for *Homo sapiens*).\n- *3*: A Genbank format file containing multiple records for a single organism (eg. many annotations for *Apis mellifera* genes).\n\n**tid**: This changes TaIGa's behaviour to, instead of expecting any sort of name-based input, to expect a text file with a list \nof valid Taxon IDs for a collection of organisms (or taxon levels). This is incompatible with the '-c' option, as TaIGa skips the \nspelling correction when run with Taxon IDs. \n\n**correction**: This enables TaIGa's name correcting functionality. The usefulness of this is discussed below. This is incompatible with \n'--tid'. See '--tid' above.\n\n**retries**: *Default: 5*. This sets the maximum number of retries TaIGa will do when fetching for taxonomic information for an \norganism. This can be very useful as Entrez will many times return broken responses.\n\n**silent**: This disables TaIGa's standard verbose mode, so TaIGa will automatically generate a log file called **TaIGa_run.log** inside\nthe current working directory. This log file will contain all information about that particular TaIGa run.\n\n## 3 Output files\n\nTo create the output files, you'll need to run the `create_output` function from the `taiga.common.data_handlers` module.\nIt expects an `output_folder`, a `df` and a `taxon_list` as arguments. To create those and output your results, run:\n\n```python\nfrom taiga.core import taxonomy\nfrom taiga.common import data_handlers\n\ntaxon_list = taxonomy.run_taiga(input_file, email)\ndf = data_handlers.create_df(taxon_list)\ndata_handlers.create_output(ouput_directory, df, taxon_list)\n\n```\n\nThe arguments are:\n\n- **[output directory]**: a string containing the path to the output directory, which doesn't need to be created yet.\n- **[df]**: the DataFrame returned by `taiga.core.taxonomy.run_taiga()`.\n- **[taxon_list]**: the list of Taxon objects returned by `taiga.core.taxonomy.run_taiga()`.\n\n### 3.1 TaIGa_result.csv\n\nAfter running successfuly, TaIGa will create the output files at the provided output path. If the output folder doesn't exist \n(or its parent folders), TaIGa will check it and create them for you. Do note that you still need to provide a valid path for \nTaIGa to run successfuly. Check it twice before running TaIGa. The created file will be named **TaIGa_result.csv**. This is \ndefault and can only be changed on the source code, which you can surely do if you know what you're doing. It will be a .csv \nformat file. To better visualize the results, import it to any spreadsheet viewer of yours.\n\nThe file will contain a number of rows equal to the number of input organisms. Each row will be named for the corresponding taxon.\nEach column will be a variable for a particular taxonomic information. The first two are always the organism's Taxon ID and Genome\nID (if it has one). The rest are the valid taxon rank names available on Taxonomy and their corresponding value for each organism.\nIf there's any missing value (eg., lack of a Genome ID or lack of a *tribe* for *Homo sapiens*), the value will be **N/A**.\n\n### 3.2 TaIGa_missing.txt\n\nTaIGa will also create a file named 'TaIGa_missing.txt'. This will be created regardless if TaIGa was able to run without issues or\nany missing information. If any organism happens to be missing one of the core informations TaIGa needs to be able to run (those\nbeing a valid `Name` or `Corrected Name`, `Taxon ID` and `Classification`), that organism will be outputed to this file within the \ncorrect class of missing information.\n\n## 4 Other functions\n\nTaIGa's `run_taiga()` function calls a bunch of other functions from `helpers`, `parsers`, `fetchers`, `retrievers` and\n`data_handlers` and uses the **Taxon** object from `data_models`. You could import those modules with something like:\n\n```python\nfrom taiga.common import fetchers, data_models\n\nanimal = data_models.Taxon()\nfetchers.fetch_taxonomic_info(email, animal, retries)\n\n```\n\nAll modules and functions are nicely documented and you can check their docstrings to see what they do exactly and how\nthey do it. I won't extend further on them simply because, as of now, they're not really meant to be executed alone.\nThey will probably work well and do their job if you execute them properly, but individually those are rather simple\nwrappers over some common [Biopython](https://biopython.org/) functionalities.\n\n## 5 Licensing \n\nTaIGa is licensed under the MIT license. You can check the information inside the LICENSE file. To make it short, I wanted it to be\nfree and open, so that anyone can contribute to it.\n\n## 6 Ending regards\n\nAs said in the introduction, the major inspiration for TaIGa's name is the cute romance anime character Taiga, from the japanese \nanimation ToraDora. I highly recommend it.\n\nAnd, as state before, this is simply a package version of the \"standalone\" original TaIGa python program, that you can\ncheck on [the original repo](https://github.com/flayner2/taiga). There, you will find a better documentation that, albeit\na bit different, is still relevant and might be helpful for this version.\n\nShare love and knowledge and, on top of all, respect people.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/flayner2/taiga-bio", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "taiga-bio", "package_url": "https://pypi.org/project/taiga-bio/", "platform": "", "project_url": "https://pypi.org/project/taiga-bio/", "project_urls": {"Homepage": "https://github.com/flayner2/taiga-bio"}, "release_url": "https://pypi.org/project/taiga-bio/1.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Set of tools to fetch taxonomic metadata for a list of organisms", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>taiga-bio - Package version of the <a href=\"https://github.com/flayner2/taiga\" rel=\"nofollow\">TaIGa</a> program</h1>\n<p>This is a package version of the original TaIGa program. This was built to be available on Pypi and be easily installable\nby any Python package manager, and also to allow the user to import and make custom scripts from TaIGa's functionalities.\nFor better information, see the repo for the original <a href=\"https://github.com/flayner2/taiga\" rel=\"nofollow\">TaIGa</a>.</p>\n<h2>1 How to run taiga-bio</h2>\n<p>From a Python script of your choice (must be <code>&gt;=Python 3.6</code>), do:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">taiga.core</span> <span class=\"kn\">import</span> <span class=\"n\">taxonomy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">taiga.common</span> <span class=\"kn\">import</span> <span class=\"n\">data_handlers</span>\n\n<span class=\"n\">taxon_list</span> <span class=\"o\">=</span> <span class=\"n\">taxonomy</span><span class=\"o\">.</span><span class=\"n\">run_taiga</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">data_handlers</span><span class=\"o\">.</span><span class=\"n\">create_df</span><span class=\"p\">(</span><span class=\"n\">taxon_list</span><span class=\"p\">)</span>\n<span class=\"n\">data_handlers</span><span class=\"o\">.</span><span class=\"n\">create_output</span><span class=\"p\">(</span><span class=\"n\">ouput_directory</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">taxon_list</span><span class=\"p\">)</span>\n</pre>\n<p>This will run TaIGa's main function, which grabs a list of names from <code>input_file</code>, fetches for\ntheir taxonomic information on <a href=\"https://www.ncbi.nlm.nih.gov/taxonomy\" rel=\"nofollow\">NCBI's Taxonomy</a>, which\nneeds your <code>email</code> as a good practice, and returns a list of Taxon objects. It then calls the\n<code>create_df</code> function, which receives the list of Taxon objects and returns a DataFrame. Then, it\ncalls the <code>create_output</code> function, which outputs the results to the specified <code>output_directory</code>,\nwhich need not to be pre-created, using the DataFrame and the Taxon list. It needs the Taxon list\nto be able to create a file that lists Taxon objects missing critical information.</p>\n<h2>2 Arguments</h2>\n<pre><span class=\"n\">run_taiga</span><span class=\"p\">(</span><span class=\"n\">infile</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">gb_mode</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tid</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">correction</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">retries</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Taxon</span><span class=\"p\">]</span>\n</pre>\n<h3>2.1 Positional (required) Arguments:</h3>\n<p><strong>[input file]</strong>: This is the full path to the file you will use as an input for TaIGa. By default, TaIGa expects it to be a\nlist of organism names separated by line in a text-like file (<code>.txt</code>). You can change this behaviour so TaIGa would expect: a line\nseparated text file with a collection of Taxon IDs; a Genbank format file with multiple records, all from the same organism;\na Genbank format file with only one record; or a Genbank format file with multiple records from multiple organisms. Organism names\nrefer to any valid taxonomic level that is available on NCBI's Taxonomy database.</p>\n<p><strong>[user e-mail]</strong>: This is just a valid e-mail of yours. Nothing will be sent to this e-mail, and neither TaIGa itself neither me\nwill ever use it for anything other than running TaIGa (in fact, I will never have access to this information. You may check the\ncode yourself to confirm this). TaIGa only requires this field because it is standard procedure to pass on this information when\nsending requests to Entrez. This is all TaIGa will use the e-mail for. You may pass on gibberish, if you so want, but I advise\nyou not to. TaIGa will run fine anyways, as long as you provide something to this argument field.</p>\n<h3>2.2 Optional Arguments:</h3>\n<p><strong>gb_mode [0, 1, 2, 3]</strong>: <em>Default: 0</em>. This changes TaIGa's default input type to instead expect a Genbank format file. This\nargument exepects one numeric option from the available ones. Those are:</p>\n<ul>\n<li><em>0</em>: Acts the same as not passing the <code>--gb-mode</code> argument at all, not altering TaIGa's default behavior.</li>\n<li><em>1</em>: A Genbank format file containing multiple records from multiple, differently named organisms (eg. <em>Escherichia coli</em>,\n<em>Bos taurus</em>, <em>Mus musculus</em>, all in the same <code>.gb</code> or <code>.gbff</code> file).</li>\n<li><em>2</em>: A Genbank format file containing a single record (eg. an annotation for a <em>COX 1</em> gene for <em>Homo sapiens</em>).</li>\n<li><em>3</em>: A Genbank format file containing multiple records for a single organism (eg. many annotations for <em>Apis mellifera</em> genes).</li>\n</ul>\n<p><strong>tid</strong>: This changes TaIGa's behaviour to, instead of expecting any sort of name-based input, to expect a text file with a list\nof valid Taxon IDs for a collection of organisms (or taxon levels). This is incompatible with the '-c' option, as TaIGa skips the\nspelling correction when run with Taxon IDs.</p>\n<p><strong>correction</strong>: This enables TaIGa's name correcting functionality. The usefulness of this is discussed below. This is incompatible with\n'--tid'. See '--tid' above.</p>\n<p><strong>retries</strong>: <em>Default: 5</em>. This sets the maximum number of retries TaIGa will do when fetching for taxonomic information for an\norganism. This can be very useful as Entrez will many times return broken responses.</p>\n<p><strong>silent</strong>: This disables TaIGa's standard verbose mode, so TaIGa will automatically generate a log file called <strong>TaIGa_run.log</strong> inside\nthe current working directory. This log file will contain all information about that particular TaIGa run.</p>\n<h2>3 Output files</h2>\n<p>To create the output files, you'll need to run the <code>create_output</code> function from the <code>taiga.common.data_handlers</code> module.\nIt expects an <code>output_folder</code>, a <code>df</code> and a <code>taxon_list</code> as arguments. To create those and output your results, run:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">taiga.core</span> <span class=\"kn\">import</span> <span class=\"n\">taxonomy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">taiga.common</span> <span class=\"kn\">import</span> <span class=\"n\">data_handlers</span>\n\n<span class=\"n\">taxon_list</span> <span class=\"o\">=</span> <span class=\"n\">taxonomy</span><span class=\"o\">.</span><span class=\"n\">run_taiga</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">data_handlers</span><span class=\"o\">.</span><span class=\"n\">create_df</span><span class=\"p\">(</span><span class=\"n\">taxon_list</span><span class=\"p\">)</span>\n<span class=\"n\">data_handlers</span><span class=\"o\">.</span><span class=\"n\">create_output</span><span class=\"p\">(</span><span class=\"n\">ouput_directory</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">taxon_list</span><span class=\"p\">)</span>\n</pre>\n<p>The arguments are:</p>\n<ul>\n<li><strong>[output directory]</strong>: a string containing the path to the output directory, which doesn't need to be created yet.</li>\n<li><strong>[df]</strong>: the DataFrame returned by <code>taiga.core.taxonomy.run_taiga()</code>.</li>\n<li><strong>[taxon_list]</strong>: the list of Taxon objects returned by <code>taiga.core.taxonomy.run_taiga()</code>.</li>\n</ul>\n<h3>3.1 TaIGa_result.csv</h3>\n<p>After running successfuly, TaIGa will create the output files at the provided output path. If the output folder doesn't exist\n(or its parent folders), TaIGa will check it and create them for you. Do note that you still need to provide a valid path for\nTaIGa to run successfuly. Check it twice before running TaIGa. The created file will be named <strong>TaIGa_result.csv</strong>. This is\ndefault and can only be changed on the source code, which you can surely do if you know what you're doing. It will be a .csv\nformat file. To better visualize the results, import it to any spreadsheet viewer of yours.</p>\n<p>The file will contain a number of rows equal to the number of input organisms. Each row will be named for the corresponding taxon.\nEach column will be a variable for a particular taxonomic information. The first two are always the organism's Taxon ID and Genome\nID (if it has one). The rest are the valid taxon rank names available on Taxonomy and their corresponding value for each organism.\nIf there's any missing value (eg., lack of a Genome ID or lack of a <em>tribe</em> for <em>Homo sapiens</em>), the value will be <strong>N/A</strong>.</p>\n<h3>3.2 TaIGa_missing.txt</h3>\n<p>TaIGa will also create a file named 'TaIGa_missing.txt'. This will be created regardless if TaIGa was able to run without issues or\nany missing information. If any organism happens to be missing one of the core informations TaIGa needs to be able to run (those\nbeing a valid <code>Name</code> or <code>Corrected Name</code>, <code>Taxon ID</code> and <code>Classification</code>), that organism will be outputed to this file within the\ncorrect class of missing information.</p>\n<h2>4 Other functions</h2>\n<p>TaIGa's <code>run_taiga()</code> function calls a bunch of other functions from <code>helpers</code>, <code>parsers</code>, <code>fetchers</code>, <code>retrievers</code> and\n<code>data_handlers</code> and uses the <strong>Taxon</strong> object from <code>data_models</code>. You could import those modules with something like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">taiga.common</span> <span class=\"kn\">import</span> <span class=\"n\">fetchers</span><span class=\"p\">,</span> <span class=\"n\">data_models</span>\n\n<span class=\"n\">animal</span> <span class=\"o\">=</span> <span class=\"n\">data_models</span><span class=\"o\">.</span><span class=\"n\">Taxon</span><span class=\"p\">()</span>\n<span class=\"n\">fetchers</span><span class=\"o\">.</span><span class=\"n\">fetch_taxonomic_info</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">animal</span><span class=\"p\">,</span> <span class=\"n\">retries</span><span class=\"p\">)</span>\n</pre>\n<p>All modules and functions are nicely documented and you can check their docstrings to see what they do exactly and how\nthey do it. I won't extend further on them simply because, as of now, they're not really meant to be executed alone.\nThey will probably work well and do their job if you execute them properly, but individually those are rather simple\nwrappers over some common <a href=\"https://biopython.org/\" rel=\"nofollow\">Biopython</a> functionalities.</p>\n<h2>5 Licensing</h2>\n<p>TaIGa is licensed under the MIT license. You can check the information inside the LICENSE file. To make it short, I wanted it to be\nfree and open, so that anyone can contribute to it.</p>\n<h2>6 Ending regards</h2>\n<p>As said in the introduction, the major inspiration for TaIGa's name is the cute romance anime character Taiga, from the japanese\nanimation ToraDora. I highly recommend it.</p>\n<p>And, as state before, this is simply a package version of the \"standalone\" original TaIGa python program, that you can\ncheck on <a href=\"https://github.com/flayner2/taiga\" rel=\"nofollow\">the original repo</a>. There, you will find a better documentation that, albeit\na bit different, is still relevant and might be helpful for this version.</p>\n<p>Share love and knowledge and, on top of all, respect people.</p>\n\n          </div>"}, "last_serial": 6883023, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1568d66519e74301c6d3840611e96ea8", "sha256": "339f7ea2aa826af3235e5004f97a850b553244028cba81e854c2918f0a6bdbcd"}, "downloads": -1, "filename": "taiga_bio-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1568d66519e74301c6d3840611e96ea8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14739, "upload_time": "2020-03-20T20:35:22", "upload_time_iso_8601": "2020-03-20T20:35:22.535076Z", "url": "https://files.pythonhosted.org/packages/21/95/506559022c13c22f9b99e33b62e6e3b3e0005d4980da3d82c6c72235abfa/taiga_bio-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48b6dffbd7bca58b6ad0a621f2ed9d7a", "sha256": "c2edbdac1e0dd1117f2b0c774a176b744e4f8e2bc379f2e128b363f0cbdd9d21"}, "downloads": -1, "filename": "taiga-bio-1.0.0.tar.gz", "has_sig": false, "md5_digest": "48b6dffbd7bca58b6ad0a621f2ed9d7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14783, "upload_time": "2020-03-20T20:35:24", "upload_time_iso_8601": "2020-03-20T20:35:24.830633Z", "url": "https://files.pythonhosted.org/packages/e2/82/7936f6eb7ce0328f3a2a59a098f0afe2ec36f8e37a1605e34aa630c0d46a/taiga-bio-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a4fb9379ac806cd0e66c27a9400e3c72", "sha256": "91304319331777afcfa3738225e5c5c71677d4fb91d503f88f74eafe3fd5a19d"}, "downloads": -1, "filename": "taiga_bio-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a4fb9379ac806cd0e66c27a9400e3c72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14699, "upload_time": "2020-03-20T20:41:10", "upload_time_iso_8601": "2020-03-20T20:41:10.853531Z", "url": "https://files.pythonhosted.org/packages/85/34/551e954386db905c835c869f141b79e61c80e23684bd7eedbd1adf7756a9/taiga_bio-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "589112b6bd6f3c27f917af79e20c1283", "sha256": "0651d108d0f66c73e0aa2f5d884a93b2f963d777ccbd6e6002c349326f3e69f0"}, "downloads": -1, "filename": "taiga-bio-1.0.1.tar.gz", "has_sig": false, "md5_digest": "589112b6bd6f3c27f917af79e20c1283", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14707, "upload_time": "2020-03-20T20:41:13", "upload_time_iso_8601": "2020-03-20T20:41:13.486184Z", "url": "https://files.pythonhosted.org/packages/c4/04/ed08fd7faf5765d0b0bfa13240ba3695a2c39f01eeb8ceb7d80fbed61733/taiga-bio-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3b0dd1f1b4a52a6cc37505673efba330", "sha256": "7464d5a9d13857e582c1875767df3100b3128b5cd18dfd8c4ba0931bda60e750"}, "downloads": -1, "filename": "taiga_bio-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3b0dd1f1b4a52a6cc37505673efba330", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14714, "upload_time": "2020-03-20T20:54:37", "upload_time_iso_8601": "2020-03-20T20:54:37.406946Z", "url": "https://files.pythonhosted.org/packages/cb/b8/73399e28318bfe285a19d4f5fd3cb9208c34504f1b44794be66239a83d41/taiga_bio-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1dad558a7633e035089c3cb2a402cf6", "sha256": "0b67ac48cfbb381b78097b241fbfc19daeab2d0df2c50184a7ac56b5cfbdc7ab"}, "downloads": -1, "filename": "taiga-bio-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d1dad558a7633e035089c3cb2a402cf6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14758, "upload_time": "2020-03-20T20:54:40", "upload_time_iso_8601": "2020-03-20T20:54:40.638812Z", "url": "https://files.pythonhosted.org/packages/96/c3/f234e9ad87c0a53690548c660eb6ccbbda9db34d228240c2a85191699561/taiga-bio-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "4d32b6857d8f1f8fb6516e9287f1e045", "sha256": "eb01f8ff7a868c498803837e607e215b7652ab09f5c4fa81735a384d84c6240d"}, "downloads": -1, "filename": "taiga_bio-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4d32b6857d8f1f8fb6516e9287f1e045", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14809, "upload_time": "2020-03-20T22:37:24", "upload_time_iso_8601": "2020-03-20T22:37:24.010734Z", "url": "https://files.pythonhosted.org/packages/42/4e/355cf16ed11fc4d936d407c5d4b27c36e0ba1fc2208927cd2b25082f4d92/taiga_bio-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24735ba11e22fd77175203fce556047a", "sha256": "0a6c0f544f6a84593a18ea3b1d4a10777ca6bf0376828d9cb3335a79598f0f48"}, "downloads": -1, "filename": "taiga-bio-1.0.3.tar.gz", "has_sig": false, "md5_digest": "24735ba11e22fd77175203fce556047a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14934, "upload_time": "2020-03-20T22:37:29", "upload_time_iso_8601": "2020-03-20T22:37:29.511047Z", "url": "https://files.pythonhosted.org/packages/4b/1d/8bf209c057ab6ee2569a5b2c318883d4daf0a7110a66a02044a625d7a11a/taiga-bio-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "96227077e29b88a9571aa38ba92af5c3", "sha256": "f7bb45596ea618589deca1f5b891bf3bd941220cad50255c962e3c20a9534d73"}, "downloads": -1, "filename": "taiga_bio-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "96227077e29b88a9571aa38ba92af5c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14919, "upload_time": "2020-03-25T17:53:06", "upload_time_iso_8601": "2020-03-25T17:53:06.227146Z", "url": "https://files.pythonhosted.org/packages/68/13/b3ecb385a68f419c83b287e5f78aa98ee3277395c4bb01880b0e1f314b9c/taiga_bio-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e6b74aa01d48c39c0a56e030096375a", "sha256": "aae126a72d2762d6051490fc100f24695a7bc1ea21aa63c271b62703c9373107"}, "downloads": -1, "filename": "taiga-bio-1.0.4.tar.gz", "has_sig": false, "md5_digest": "2e6b74aa01d48c39c0a56e030096375a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14531, "upload_time": "2020-03-25T17:52:49", "upload_time_iso_8601": "2020-03-25T17:52:49.998776Z", "url": "https://files.pythonhosted.org/packages/51/b4/abb44bf00a821f0fc0b384a51049677f3671ff272ca7f0564c2d7371e134/taiga-bio-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "96227077e29b88a9571aa38ba92af5c3", "sha256": "f7bb45596ea618589deca1f5b891bf3bd941220cad50255c962e3c20a9534d73"}, "downloads": -1, "filename": "taiga_bio-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "96227077e29b88a9571aa38ba92af5c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14919, "upload_time": "2020-03-25T17:53:06", "upload_time_iso_8601": "2020-03-25T17:53:06.227146Z", "url": "https://files.pythonhosted.org/packages/68/13/b3ecb385a68f419c83b287e5f78aa98ee3277395c4bb01880b0e1f314b9c/taiga_bio-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e6b74aa01d48c39c0a56e030096375a", "sha256": "aae126a72d2762d6051490fc100f24695a7bc1ea21aa63c271b62703c9373107"}, "downloads": -1, "filename": "taiga-bio-1.0.4.tar.gz", "has_sig": false, "md5_digest": "2e6b74aa01d48c39c0a56e030096375a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14531, "upload_time": "2020-03-25T17:52:49", "upload_time_iso_8601": "2020-03-25T17:52:49.998776Z", "url": "https://files.pythonhosted.org/packages/51/b4/abb44bf00a821f0fc0b384a51049677f3671ff272ca7f0564c2d7371e134/taiga-bio-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:22 2020"}