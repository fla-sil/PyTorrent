{"info": {"author": "Lukas Kuzmiak, nshadov", "author_email": "lukash@backstep.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# XOR tools\n\n## Description\n\nA set of tools for XOR encryption/decryption/key recovery (based on known plaintext). \n\n## Install\n\n```\ngit clone https://github.com/lukaskuzmiak/xor_tools.git\npython setup.py install\n```\n\n## Example Usage\n\nFirst, we create example XOR encrypted `samples/binary_pe32` file:\n\n```bash\nxor_encrypt_file -f samples/binary_pe32 -o encrypted.file -k \"secret\"\n```\n\nYou can also enter non-ascii keys as `-k \"\\xaa\\xbb\\xcc\\xdd\"`.\n\nTo recover the secret key `secret`, the second tool `xor_key_recovery` is used. We expect a PE binary to contain a phrase `This program cannot be run in DOS`. We don't know the key length, but after few tries with consecutive `-n 1`, `-n 2`, `-n 3` ... we finally try `-n 6`:\n\n```bash\nxor_key_recovery -f encrypted.file -o decrypted.file -p \"This program cannot be run in DOS\" -n 6\n\n[+] Found plaintext at position: 78\n[*] Key found: 736563726574\n[+] Saving decrypted file to: decrypted.file\n```\n\nYou can also enter non-ascii plaintext as `-p \"\\xaa\\xbb\\xcc\\xdd\"`.\n\n## How it works\n\nIt's quite easy to understand on example but it's not a formal proof though (or maybe because of it).\n\n### Prepare template\n\nFirst we need part of plaintext before being encrypted. Anything slightly longer than key length would be sufficient but to avoid false positives twice as long plaintext is preferred. We could in many cases guess it (like common phrases, strings etc.).\n\n```\nP[] = \"This program cannot be run in DOS\"\n```\n\nThe other thing we will need is secret key length -- we could also guess it or iterate over possible key lengths (n=3, n=4, n=5 ...).\n\n```\nkeylength = 6\n```\n\nNow, if we xor symbols from plaintext that are keylength apart, we receive:\n\n```\nT[1] = P[i] XOR P[i+k_len]\n```\n\nWe build template that way of first part of the string XORed with another symbols one keylength apart.\n\n### Surprising XOR cipher characteristics\n\nBecause in ciphertext symbols one keylength apart are XORed with the same secret key symbol we get:\n\n```\nC[i] = P[i] XOR Key[i]\nC[i+k_len] = P[i+k_len] XOR Key[i]\n```\n\nIf we XOR these two, we surprisingly (because of XOR characteristics) receive something independent from secret key used:\n\n```\nC[i] XOR C[i+k_len] = ( P[i] XOR Key[i] ) XOR ( P[i+k_len] XOR Key[i] ) =\n                    = ( P[i] XOR P[i+k_len] ) XOR ( Key[i] XOR Key[i] ) =\n                    = P[i] XOR P[i+k_len]\n```\n\nThis is exactly the same, as our template and it's independent from secret key.\n\n### Final blow\n\nNow, when we do this for whole ciphertext (eg. encrypted file) we look for our template.\nThis way, we've found place in ciphertext where our encrypted string is and w know what it's plaintext version is.\n\nFrom this place, it's trivial to extract secret key.\n\n## Bugs & Credits\n\nPlease submit bugs/propositions via GitHub.\n\nOriginal author: nshadov", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lukaskuzmiak/xor_tools", "keywords": "xor key recovery encrypt decrypt", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xor-tools", "package_url": "https://pypi.org/project/xor-tools/", "platform": "", "project_url": "https://pypi.org/project/xor-tools/", "project_urls": {"Homepage": "https://github.com/lukaskuzmiak/xor_tools"}, "release_url": "https://pypi.org/project/xor-tools/1.0.1/", "requires_dist": null, "requires_python": ">3.5.2", "summary": "XOR Tools", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>XOR tools</h1>\n<h2>Description</h2>\n<p>A set of tools for XOR encryption/decryption/key recovery (based on known plaintext).</p>\n<h2>Install</h2>\n<pre><code>git clone https://github.com/lukaskuzmiak/xor_tools.git\npython setup.py install\n</code></pre>\n<h2>Example Usage</h2>\n<p>First, we create example XOR encrypted <code>samples/binary_pe32</code> file:</p>\n<pre>xor_encrypt_file -f samples/binary_pe32 -o encrypted.file -k <span class=\"s2\">\"secret\"</span>\n</pre>\n<p>You can also enter non-ascii keys as <code>-k \"\\xaa\\xbb\\xcc\\xdd\"</code>.</p>\n<p>To recover the secret key <code>secret</code>, the second tool <code>xor_key_recovery</code> is used. We expect a PE binary to contain a phrase <code>This program cannot be run in DOS</code>. We don't know the key length, but after few tries with consecutive <code>-n 1</code>, <code>-n 2</code>, <code>-n 3</code> ... we finally try <code>-n 6</code>:</p>\n<pre>xor_key_recovery -f encrypted.file -o decrypted.file -p <span class=\"s2\">\"This program cannot be run in DOS\"</span> -n <span class=\"m\">6</span>\n\n<span class=\"o\">[</span>+<span class=\"o\">]</span> Found plaintext at position: <span class=\"m\">78</span>\n<span class=\"o\">[</span>*<span class=\"o\">]</span> Key found: <span class=\"m\">736563726574</span>\n<span class=\"o\">[</span>+<span class=\"o\">]</span> Saving decrypted file to: decrypted.file\n</pre>\n<p>You can also enter non-ascii plaintext as <code>-p \"\\xaa\\xbb\\xcc\\xdd\"</code>.</p>\n<h2>How it works</h2>\n<p>It's quite easy to understand on example but it's not a formal proof though (or maybe because of it).</p>\n<h3>Prepare template</h3>\n<p>First we need part of plaintext before being encrypted. Anything slightly longer than key length would be sufficient but to avoid false positives twice as long plaintext is preferred. We could in many cases guess it (like common phrases, strings etc.).</p>\n<pre><code>P[] = \"This program cannot be run in DOS\"\n</code></pre>\n<p>The other thing we will need is secret key length -- we could also guess it or iterate over possible key lengths (n=3, n=4, n=5 ...).</p>\n<pre><code>keylength = 6\n</code></pre>\n<p>Now, if we xor symbols from plaintext that are keylength apart, we receive:</p>\n<pre><code>T[1] = P[i] XOR P[i+k_len]\n</code></pre>\n<p>We build template that way of first part of the string XORed with another symbols one keylength apart.</p>\n<h3>Surprising XOR cipher characteristics</h3>\n<p>Because in ciphertext symbols one keylength apart are XORed with the same secret key symbol we get:</p>\n<pre><code>C[i] = P[i] XOR Key[i]\nC[i+k_len] = P[i+k_len] XOR Key[i]\n</code></pre>\n<p>If we XOR these two, we surprisingly (because of XOR characteristics) receive something independent from secret key used:</p>\n<pre><code>C[i] XOR C[i+k_len] = ( P[i] XOR Key[i] ) XOR ( P[i+k_len] XOR Key[i] ) =\n                    = ( P[i] XOR P[i+k_len] ) XOR ( Key[i] XOR Key[i] ) =\n                    = P[i] XOR P[i+k_len]\n</code></pre>\n<p>This is exactly the same, as our template and it's independent from secret key.</p>\n<h3>Final blow</h3>\n<p>Now, when we do this for whole ciphertext (eg. encrypted file) we look for our template.\nThis way, we've found place in ciphertext where our encrypted string is and w know what it's plaintext version is.</p>\n<p>From this place, it's trivial to extract secret key.</p>\n<h2>Bugs &amp; Credits</h2>\n<p>Please submit bugs/propositions via GitHub.</p>\n<p>Original author: nshadov</p>\n\n          </div>"}, "last_serial": 6621743, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "7b4cd60989e84ba8e2ce50574af9d242", "sha256": "aece764818850ab9223a25eacaccb29bfa03b6bf4204644ce47171fddc601272"}, "downloads": -1, "filename": "xor_tools-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7b4cd60989e84ba8e2ce50574af9d242", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 4186, "upload_time": "2020-02-13T08:03:18", "upload_time_iso_8601": "2020-02-13T08:03:18.315575Z", "url": "https://files.pythonhosted.org/packages/2d/06/5e61a496b83914a6972007cf63b501fdbeeb37bd69972b465c265f416ad3/xor_tools-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b4cd60989e84ba8e2ce50574af9d242", "sha256": "aece764818850ab9223a25eacaccb29bfa03b6bf4204644ce47171fddc601272"}, "downloads": -1, "filename": "xor_tools-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7b4cd60989e84ba8e2ce50574af9d242", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 4186, "upload_time": "2020-02-13T08:03:18", "upload_time_iso_8601": "2020-02-13T08:03:18.315575Z", "url": "https://files.pythonhosted.org/packages/2d/06/5e61a496b83914a6972007cf63b501fdbeeb37bd69972b465c265f416ad3/xor_tools-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:43 2020"}