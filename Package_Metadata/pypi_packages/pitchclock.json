{"info": {"author": "Aaron Hosford", "author_email": "hosford42@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Artistic Software", "Topic :: Multimedia :: Graphics", "Topic :: Multimedia :: Sound/Audio :: Analysis", "Topic :: Scientific/Engineering :: Visualization"], "description": ".. figure:: https://github.com/hosford42/pitchclock/raw/master/images/pitchclock.png\n   :alt: PitchClock Logo\n\n   PitchClock Logo\n\nPitchClock\n==========\n\nPitchClock is a Python library for generating `tone\nclock <https://en.wikipedia.org/wiki/Tone_Clock>`__ visualizations. Tone\nclocks were originally developed as a tool for atonal composition, but\ncan also be quite useful for visualizing tonal structures in classical\nand `Just Intonation <https://en.wikipedia.org/wiki/Just_intonation>`__\ntheory as well.\n\nLicense\n-------\n\nPitchClock is distributed under the permissive `MIT\nlicense <https://github.com/hosford42/pitchclock/blob/master/LICENSE.txt>`__.\n\nLinks:\n------\n\n-  Distribution: https://pypi.python.org/pypi/pitchclock\n-  Source: https://github.com/hosford42/pitchclock\n\nInstallation\n============\n\nThe latest stable distribution of PitchClock can be installed with pip:\n\n::\n\n    pip install pitchclock\n\nOr, if you prefer the current development version:\n\n::\n\n    pip install git+https://github.com/hosford42/pitchclock.git\n\nExample Usage\n-------------\n\nAs an example, let's compare the equal temperament major scale, versus\nthe just intonation scale it approximates, known as the `syntonic\ndiatonic\nscale <https://en.wikipedia.org/wiki/Syntonic_diatonic_scale>`__. Tone\nclocks are used for visualizing the *relationships*, i.e. the intervals,\nbetween the pitches, rather than the absolute pitches themselves. Thus\nthe typical approach is to label the pitches with the intervals from the\ntonic that produce them, and to place the tonic at the 12 o'clock\nposition. The equal temperament intervals are represented as the number\nof half-tones in the interval, enclosed within square brackets. The just\nintervals are represented as whole number frequency ratios. For this\ngraph, we will mark the equal temperament intervals with filled circles,\nthe just intervals with outlined circles, and the tonic with an angle\nmark. Here's the code to produce the graph:\n\n.. code:: python\n\n    from fractions import Fraction\n    from pitchclock import ETInterval, ToneClock\n\n    # The equal temperament scale, expressed as equal temperament\n    # intervals from the tonic.\n    et_major_scale = [ETInterval(s) for s in [0, 2, 4, 5, 7, 9, 11]]\n\n    # The just intonation scale, expressed as frequency ratios from \n    # the tonic.\n    ji_major_scale = [\n        Fraction(*pair) \n        for pair in [(1, 1), (9, 8), (5, 4), (4, 3), (3, 2), (5, 3), (15, 8)]\n    ]\n\n    # Here we create the clock, indicating which pitches to represent \n    # with each type of marking in the graph. \n    clock = ToneClock(\n        filled_dots=et_major_scale, \n        empty_dots=ji_major_scale, \n        angles=[et_major_scale[0], ji_major_scale[0]], \n        labels={p: p for p in et_major_scale + ji_major_scale}\n    )\n\n    # We make the radius a little bigger because there's a lot going\n    # on in this graph. A bigger radius means more space for details.\n    clock.style.radius *= 1.5\n\n    # Everything is quantized to quarter tones by default, but we are\n    # building this graph specifically to compare slight differences\n    # in pitch, so we turn it off. However, we leave it on for labels,\n    # because otherwise they will overlap for pitches that are very\n    # close neighbors. With quantization of labels left on, labels\n    # falling within the same quantum will be grouped together with\n    # commas to separate them.\n    clock.style.quantize_non_labels = False\n\n    # Save the clock as a PNG file. Currently, this is the only\n    # supported format. \n    clock.save('images/major_comparison.png')\n\nAnd here's the image it produces:\n\n.. figure:: https://github.com/hosford42/pitchclock/raw/master/images/major_comparison.png\n   :alt: Major Scale Comparison\n\n   Major Scale Comparison\n\nFrom this graph, it becomes immediately apparent that the intervals in\nthe syntonic scale that are most poorly approximated by the equal\ntemperament major scale are ``5/4``, ``5/3``, and ``15/8``, each of\nwhich is slightly flatter than the equal temperament pitch used to\napproximate it.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hosford42/pitchclock", "keywords": "music musical tone clock visualization just intonation tonal atonal key signature scale chord", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pitchclock", "package_url": "https://pypi.org/project/pitchclock/", "platform": "any", "project_url": "https://pypi.org/project/pitchclock/", "project_urls": {"Homepage": "https://github.com/hosford42/pitchclock"}, "release_url": "https://pypi.org/project/pitchclock/0.0.4/", "requires_dist": ["gizeh"], "requires_python": "", "summary": "Tone clock visualizations", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<img alt=\"PitchClock Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6cdef848e5ef1dbc15dcf48199b7ea46793277bf/68747470733a2f2f6769746875622e636f6d2f686f73666f726434322f7069746368636c6f636b2f7261772f6d61737465722f696d616765732f7069746368636c6f636b2e706e67\">\n<p>PitchClock Logo</p>\n</div>\n<div id=\"pitchclock\">\n<h2>PitchClock</h2>\n<p>PitchClock is a Python library for generating <a href=\"https://en.wikipedia.org/wiki/Tone_Clock\" rel=\"nofollow\">tone\nclock</a> visualizations. Tone\nclocks were originally developed as a tool for atonal composition, but\ncan also be quite useful for visualizing tonal structures in classical\nand <a href=\"https://en.wikipedia.org/wiki/Just_intonation\" rel=\"nofollow\">Just Intonation</a>\ntheory as well.</p>\n<div id=\"license\">\n<h3>License</h3>\n<p>PitchClock is distributed under the permissive <a href=\"https://github.com/hosford42/pitchclock/blob/master/LICENSE.txt\" rel=\"nofollow\">MIT\nlicense</a>.</p>\n</div>\n<div id=\"links\">\n<h3>Links:</h3>\n<ul>\n<li>Distribution: <a href=\"https://pypi.python.org/pypi/pitchclock\" rel=\"nofollow\">https://pypi.python.org/pypi/pitchclock</a></li>\n<li>Source: <a href=\"https://github.com/hosford42/pitchclock\" rel=\"nofollow\">https://github.com/hosford42/pitchclock</a></li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The latest stable distribution of PitchClock can be installed with pip:</p>\n<pre>pip install pitchclock\n</pre>\n<p>Or, if you prefer the current development version:</p>\n<pre>pip install git+https://github.com/hosford42/pitchclock.git\n</pre>\n<div id=\"example-usage\">\n<h3>Example Usage</h3>\n<p>As an example, let\u2019s compare the equal temperament major scale, versus\nthe just intonation scale it approximates, known as the <a href=\"https://en.wikipedia.org/wiki/Syntonic_diatonic_scale\" rel=\"nofollow\">syntonic\ndiatonic\nscale</a>. Tone\nclocks are used for visualizing the <em>relationships</em>, i.e. the intervals,\nbetween the pitches, rather than the absolute pitches themselves. Thus\nthe typical approach is to label the pitches with the intervals from the\ntonic that produce them, and to place the tonic at the 12 o\u2019clock\nposition. The equal temperament intervals are represented as the number\nof half-tones in the interval, enclosed within square brackets. The just\nintervals are represented as whole number frequency ratios. For this\ngraph, we will mark the equal temperament intervals with filled circles,\nthe just intervals with outlined circles, and the tonic with an angle\nmark. Here\u2019s the code to produce the graph:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fractions</span> <span class=\"kn\">import</span> <span class=\"n\">Fraction</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pitchclock</span> <span class=\"kn\">import</span> <span class=\"n\">ETInterval</span><span class=\"p\">,</span> <span class=\"n\">ToneClock</span>\n\n<span class=\"c1\"># The equal temperament scale, expressed as equal temperament</span>\n<span class=\"c1\"># intervals from the tonic.</span>\n<span class=\"n\">et_major_scale</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ETInterval</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]]</span>\n\n<span class=\"c1\"># The just intonation scale, expressed as frequency ratios from</span>\n<span class=\"c1\"># the tonic.</span>\n<span class=\"n\">ji_major_scale</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pair</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Here we create the clock, indicating which pitches to represent</span>\n<span class=\"c1\"># with each type of marking in the graph.</span>\n<span class=\"n\">clock</span> <span class=\"o\">=</span> <span class=\"n\">ToneClock</span><span class=\"p\">(</span>\n    <span class=\"n\">filled_dots</span><span class=\"o\">=</span><span class=\"n\">et_major_scale</span><span class=\"p\">,</span>\n    <span class=\"n\">empty_dots</span><span class=\"o\">=</span><span class=\"n\">ji_major_scale</span><span class=\"p\">,</span>\n    <span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">et_major_scale</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">ji_major_scale</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]],</span>\n    <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">et_major_scale</span> <span class=\"o\">+</span> <span class=\"n\">ji_major_scale</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># We make the radius a little bigger because there's a lot going</span>\n<span class=\"c1\"># on in this graph. A bigger radius means more space for details.</span>\n<span class=\"n\">clock</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">*=</span> <span class=\"mf\">1.5</span>\n\n<span class=\"c1\"># Everything is quantized to quarter tones by default, but we are</span>\n<span class=\"c1\"># building this graph specifically to compare slight differences</span>\n<span class=\"c1\"># in pitch, so we turn it off. However, we leave it on for labels,</span>\n<span class=\"c1\"># because otherwise they will overlap for pitches that are very</span>\n<span class=\"c1\"># close neighbors. With quantization of labels left on, labels</span>\n<span class=\"c1\"># falling within the same quantum will be grouped together with</span>\n<span class=\"c1\"># commas to separate them.</span>\n<span class=\"n\">clock</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">quantize_non_labels</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Save the clock as a PNG file. Currently, this is the only</span>\n<span class=\"c1\"># supported format.</span>\n<span class=\"n\">clock</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'images/major_comparison.png'</span><span class=\"p\">)</span>\n</pre>\n<p>And here\u2019s the image it produces:</p>\n<div>\n<img alt=\"Major Scale Comparison\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41a84b87b07c709e3a3c3b7d7ec2a99889fcf96a/68747470733a2f2f6769746875622e636f6d2f686f73666f726434322f7069746368636c6f636b2f7261772f6d61737465722f696d616765732f6d616a6f725f636f6d70617269736f6e2e706e67\">\n<p>Major Scale Comparison</p>\n</div>\n<p>From this graph, it becomes immediately apparent that the intervals in\nthe syntonic scale that are most poorly approximated by the equal\ntemperament major scale are <tt>5/4</tt>, <tt>5/3</tt>, and <tt>15/8</tt>, each of\nwhich is slightly flatter than the equal temperament pitch used to\napproximate it.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3199759, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "fd06691a5a2999073899029a5a50d626", "sha256": "e80d2c41486ec39f259789b9d2a12e016cd432251261741926d95ec2231cc245"}, "downloads": -1, "filename": "pitchclock-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fd06691a5a2999073899029a5a50d626", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10958, "upload_time": "2017-09-25T04:03:31", "upload_time_iso_8601": "2017-09-25T04:03:31.893151Z", "url": "https://files.pythonhosted.org/packages/68/9a/db2ce028c704d0cc94f8a67d9217519aabb26c1445ec46776b0e9f259a98/pitchclock-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db7943ce007d61671f22319d5d26e0ac", "sha256": "6602b943805c96f9d5f01fa34830518cfa0818b0eb79f510fe9f950bbc69c822"}, "downloads": -1, "filename": "pitchclock-0.0.2.tar.gz", "has_sig": false, "md5_digest": "db7943ce007d61671f22319d5d26e0ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9024, "upload_time": "2017-09-25T04:03:33", "upload_time_iso_8601": "2017-09-25T04:03:33.343098Z", "url": "https://files.pythonhosted.org/packages/60/60/c1a1314070b97d03021bf05466f6b936895e1a8992d1cbfba80875df37d4/pitchclock-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "86b36226d18cbcfd969724602b99cbcc", "sha256": "5c18df3c5e332766e743aaf6ed94ab8a85f12a7d17dad95b39a0f3a3e0b6f2da"}, "downloads": -1, "filename": "pitchclock-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "86b36226d18cbcfd969724602b99cbcc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11342, "upload_time": "2017-09-25T04:21:37", "upload_time_iso_8601": "2017-09-25T04:21:37.359308Z", "url": "https://files.pythonhosted.org/packages/9d/18/7a6bc6ee3892e5923a813fd4bda60233a5957fb316a7871b08114cf6643a/pitchclock-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e10383bae4573ad994aef39244d60b2", "sha256": "30e228edf936a506f30a2a847b67d48b5b2c3b754cd6e7d39cc9b057d13a4bc2"}, "downloads": -1, "filename": "pitchclock-0.0.3.tar.gz", "has_sig": false, "md5_digest": "8e10383bae4573ad994aef39244d60b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9350, "upload_time": "2017-09-25T04:21:38", "upload_time_iso_8601": "2017-09-25T04:21:38.940397Z", "url": "https://files.pythonhosted.org/packages/01/16/d4e49419c001b41fc0fe3d71fad84a0cd98283136ea15e37e4e0c905bbd7/pitchclock-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "f199443e2cfd2bc79957026389fecac1", "sha256": "4934ed0f1a277be4e859420371c374a579dd8a40e2fe37006b7969815af55650"}, "downloads": -1, "filename": "pitchclock-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f199443e2cfd2bc79957026389fecac1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11333, "upload_time": "2017-09-25T06:05:27", "upload_time_iso_8601": "2017-09-25T06:05:27.508233Z", "url": "https://files.pythonhosted.org/packages/42/20/862c96656b29a55b61a37415c8dd65f42be1bfb0c007b1b0b7bc4e977b01/pitchclock-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "478f19b0774a20dd00a5f2fc9bf19202", "sha256": "1a3f6017b13a2b3f0ecfadc2e3a18922b592aa41c8c6d841759b441631414456"}, "downloads": -1, "filename": "pitchclock-0.0.4.tar.gz", "has_sig": false, "md5_digest": "478f19b0774a20dd00a5f2fc9bf19202", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9323, "upload_time": "2017-09-25T06:05:28", "upload_time_iso_8601": "2017-09-25T06:05:28.921673Z", "url": "https://files.pythonhosted.org/packages/f2/b5/ab17b19025e45af261977205a378857b8d367f455d57597000e2ba301234/pitchclock-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f199443e2cfd2bc79957026389fecac1", "sha256": "4934ed0f1a277be4e859420371c374a579dd8a40e2fe37006b7969815af55650"}, "downloads": -1, "filename": "pitchclock-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f199443e2cfd2bc79957026389fecac1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11333, "upload_time": "2017-09-25T06:05:27", "upload_time_iso_8601": "2017-09-25T06:05:27.508233Z", "url": "https://files.pythonhosted.org/packages/42/20/862c96656b29a55b61a37415c8dd65f42be1bfb0c007b1b0b7bc4e977b01/pitchclock-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "478f19b0774a20dd00a5f2fc9bf19202", "sha256": "1a3f6017b13a2b3f0ecfadc2e3a18922b592aa41c8c6d841759b441631414456"}, "downloads": -1, "filename": "pitchclock-0.0.4.tar.gz", "has_sig": false, "md5_digest": "478f19b0774a20dd00a5f2fc9bf19202", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9323, "upload_time": "2017-09-25T06:05:28", "upload_time_iso_8601": "2017-09-25T06:05:28.921673Z", "url": "https://files.pythonhosted.org/packages/f2/b5/ab17b19025e45af261977205a378857b8d367f455d57597000e2ba301234/pitchclock-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:00 2020"}