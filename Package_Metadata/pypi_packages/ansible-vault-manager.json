{"info": {"author": "Guillaume GILL", "author_email": "guillaume.gill@smile.fr", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: System :: Installation/Setup", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "Introduction:\n=============\n\nThis tool is a manager to make easier and sharable ansible-vault integration.\nIt's almost a prerequisite to combine ansible-vault and CI/CD.\nWith it you don't need anymore to share vault passphrase with other people.\nYou can rotate them transparently for security good practices.\nYou can use \"keyring plugins\" to extend it and store passphrases on AWS SSM,\nBitwarden, or other secured storage system.\n\nHelp :\n======\n\n::\n\n    ansible-vault-manager-client --help\n\nImportant note :\n================\n\nThe name of executable ends with `-client` for a specific reason !\nSince ansible 2.5 ansible vault cares about this\nsuffix, so it's very important to keep it !\n\nhttps://github.com/ansible/ansible/blob/v2.8.6/lib/ansible/parsing/vault/__init__.py#L367\n\nExamples :\n==========\n\nCreate a new vaulted file :\n---------------------------\n::\n\n    ansible-vault-manager-client create --vault-path <dir where create new file>\n\nIt will ask you for filename, keyring plugin, keyring plugin options,\nand encryption password\n\nCreate a new vaulted file with generated password :\n---------------------------------------------------\n\n::\n\n    pwgen | ansible-vault-manager-client create monfichier   \\\n        --vault-path vault_vars/  \\\n        --plugin aws_ssm   \\\n        --plugin-param region=eu-west-1   \\\n        --plugin-param profile=customer   \\\n        --plugin-param path=/ansible/dev/   \\\n        --stdin-pwd\n\nAutomatic integration :\n-----------------------\n\nBefore run any ansible command (like `ansible-playbook`) you have to\ndeclare your identities list :\n\n::\n\n    # Check usable vault ids and add them to ansible env var\n    USABLE_IDS=$(ansible-vault-manager-client get-usable-ids --vault-path \"provisioning/inventory/vault_vars/\")\n    if [ \"$USABLE_IDS\" != \"\" ]; then\n        export ANSIBLE_VAULT_IDENTITY_LIST=\"$USABLE_IDS\"\n    fi\n\nBUGS :\n======\n\n* Action create not clean new file or remote vault if an error occurs\n\nInstallation :\n====================\n\nGlobal install :\n----------------\n\npip install ansible-vault-manager\n\nPipenv install :\n----------------\n\npipenv install ansible-vault-manager\n\n\nTODO :\n======\n\n* Implement actions rekey and encrypt\n* Make extensible via custom deported plugins added via a \"plugin path\"\n* Make native plugin Hashi Vault\n* Make native plugin S3\n* Make native plugin MultiPass\n* Make native plugin sshfs\n* Manage secured cache for credentials fetching\n\nGood practices :\n================\n\nIn any playbook, you can add this play to include all vaulted vars, ordered\nby ansible groups logic\nYou can create a non standard \"vault_vars\" dir in your inventory dir.\nAll files into, matching to hosts groups, will be included.\n\"with_fileglob\" permit to not fail if file not exists.\n\n::\n\n    - hosts:\n        - all\n      connection: local\n      tasks:\n        - name: Include vaulted vars\n          include_vars: \"{{ item }}\"\n          # prepend path to all groups, \"all\" group is not present in group_names, we force it\n          with_fileglob: \"{{ (group_names + ['all']) | map('regex_replace', '^(.*)$', inventory_dir + '/vault_vars/\\\\1') | list }}\"\n      tags:\n        - always\n\nIf you want, you could apply a similar process for \"hosts_vars\"\n\n::\n\n    - hosts:\n        - all\n      connection: local\n      tasks:\n        - name: Include vaulted vars\n          include_vars: \"{{ item }}\"\n          with_fileglob: \"{{ inventory_dir }}/hosts_vault_vars/{{ inventory_hostname }}\"\n      tags:\n        - always\n\nIn your regulars hosts_vars or group_vars, put ALL your vars !\nBut if it's a sensitive var to vault, original var should be equal\nto a new var.\n\nExample :\n\n::\n\n    group_vars/pp   <= This file is not encrypted, and you can search vars into\n    my_database_password: \"{{ vault_my_database_password }}\"\n\n    vault_vars/pp   <= This file is encrypted but you know it should contain vault_my_database_password\n    vault_my_database_password: xxxxxxxxx\n\n\nMetadata file informations :\n============================\n\nA metadata file is used to retrieve all passwords to decrypt vaulted files.\nIf you loose metadata, you can't know wich passwords where used to encrypt\nall vaulted files !!!\nWhen you create your first vaulted file a file named `_metadata.yml` is created\nat the root of \"vault-path\" location.\nThis name is important and the file follow a structure.\n\nDetailled structure\n-------------------\n\n::\n\n    # A list of all \"vault-id\" used to encrypt files in this directory (see. https://docs.ansible.com/ansible/latest/user_guide/vault.html#multiple-vault-passwords)\n    # In normal cases, you should never edit this section manually.\n    vault_ids:\n\n        # Plugin used to store password\n      - plugin: aws_ssm\n\n        # Config string specific to plugin to fetch password\n        id: customer-account:eu-west-1:/ansible/admins/b32b92b8-6ba8-4941-ba48-3b2e73998631:1\n\n        # Could be a list, but probably always one file. Each file should has its own password for security privileges reasons.\n        # This parameter is not mandatory, but usefull for debugging, or if you want change a password.\n        # Without it, you can't know which file is encrypted with this ID.\n        files:\n          - prod\n\n      - plugin: aws_ssm\n        id: customer-account:eu-west-1:/ansible/dev/4daf2729-7783-43a3-8e3c-9da1b127d8cf:1\n        files:\n          - webservers\n\n      - plugin: bitwarden\n        id: profile:organization:ansible-collection:12f5445a-7783-43a3-8e3c-9da1b127d8cf:1\n        files:\n          - subdir/all\n\n    # You can MANUALLY add this parameter is some use cases. It permit to include another metadata file (with the same format) and merge all vault_ids.\n    # It can be usefull if you share vaulted vars between multiples playbooks scopes\n    # This parameter contain a list of absolute or rlative path to current metadata dir\n    include:\n      - ../../../other_context/inventory/vault_vars/_metadata.yml\n      - /mnt/other_secure_place/my_metadata.yml\n\n\nPlugins doc :\n=============\n\nAWS System Manager (SSM parameter store) :\n------------------------------------------\n\nAWS SSM permit to store simple secured key/value parameters.\nYou can apply security policies based on key path, so you can\nsplit admin / devs / other permissions on vault credentials.\nAll parameters are versionned, AWS keep each versions of parameters.\n\n* profile: Boto profile used (AWS account)\n* region:  AWS region code where store parameters\n* path:    Path of parameter in SSM, usefull for security policies\n\nVault ID structure :\n`[account profile]:[AWS region]:[parameter path]:[version]`\n\n\nLocal (or remote locally mounted) filesystem :\n----------------------------------------------\n\nThis plugin provides a simple way to manage versionned password on\na local file path. You can use for exemple an sftp / sshfs mount point.\nBe carefull, basepath must be common for every users of vault !\n\n* basepath: Directory where vault passwords are stored\n\nVault ID structure :\n`[basepath]:[filename]:[version]`\n\nThe file `[basepath]/[filename].[version]` contains vault password\n\n\nBitwarden :\n-----------\n\nTODO\n\nVault ID structure :\n`[organization]:[collection]:[name]:[version]`\n\nMultipass Git :\n---------------\n\nMultipass is a derived version of https://www.passwordstore.org/ for multi-users.\nA set of scripts is available here : https://github.com/toringe/multi-pass\n\nTODO\n\nVault ID structure :\n`[passwords namespace]:[parameter path]:[commit_hash]`\n\nMulti Hashicorp Vault :\n-----------------------\n\nYou have to install and configure a vault agent, and use Token Helpers (https://www.vaultproject.io/docs/commands/token-helper.html)\nto permit access to multiples Hashicorp servers if necessary.\n\nTODO\n\nVault ID structure :\n`[vault instance]:[parameter path]:[version]`\n\nAWS S3 :\n--------\n\nTODO", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Smile-SA/ansible-vault-manager", "keywords": "", "license": "OSL", "maintainer": "", "maintainer_email": "", "name": "ansible-vault-manager", "package_url": "https://pypi.org/project/ansible-vault-manager/", "platform": "", "project_url": "https://pypi.org/project/ansible-vault-manager/", "project_urls": {"Homepage": "https://github.com/Smile-SA/ansible-vault-manager"}, "release_url": "https://pypi.org/project/ansible-vault-manager/0.2.6/", "requires_dist": null, "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "summary": "Python tool to manage Ansible vault-ids", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction:</h2>\n<p>This tool is a manager to make easier and sharable ansible-vault integration.\nIt\u2019s almost a prerequisite to combine ansible-vault and CI/CD.\nWith it you don\u2019t need anymore to share vault passphrase with other people.\nYou can rotate them transparently for security good practices.\nYou can use \u201ckeyring plugins\u201d to extend it and store passphrases on AWS SSM,\nBitwarden, or other secured storage system.</p>\n</div>\n<div id=\"help\">\n<h2>Help :</h2>\n<pre>ansible-vault-manager-client --help\n</pre>\n</div>\n<div id=\"important-note\">\n<h2>Important note :</h2>\n<p>The name of executable ends with <cite>-client</cite> for a specific reason !\nSince ansible 2.5 ansible vault cares about this\nsuffix, so it\u2019s very important to keep it !</p>\n<p><a href=\"https://github.com/ansible/ansible/blob/v2.8.6/lib/ansible/parsing/vault/__init__.py#L367\" rel=\"nofollow\">https://github.com/ansible/ansible/blob/v2.8.6/lib/ansible/parsing/vault/__init__.py#L367</a></p>\n</div>\n<div id=\"examples\">\n<h2>Examples :</h2>\n<div id=\"create-a-new-vaulted-file\">\n<h3>Create a new vaulted file :</h3>\n<pre>ansible-vault-manager-client create --vault-path &lt;dir where create new file&gt;\n</pre>\n<p>It will ask you for filename, keyring plugin, keyring plugin options,\nand encryption password</p>\n</div>\n<div id=\"create-a-new-vaulted-file-with-generated-password\">\n<h3>Create a new vaulted file with generated password :</h3>\n<pre>pwgen | ansible-vault-manager-client create monfichier   \\\n    --vault-path vault_vars/  \\\n    --plugin aws_ssm   \\\n    --plugin-param region=eu-west-1   \\\n    --plugin-param profile=customer   \\\n    --plugin-param path=/ansible/dev/   \\\n    --stdin-pwd\n</pre>\n</div>\n<div id=\"automatic-integration\">\n<h3>Automatic integration :</h3>\n<p>Before run any ansible command (like <cite>ansible-playbook</cite>) you have to\ndeclare your identities list :</p>\n<pre># Check usable vault ids and add them to ansible env var\nUSABLE_IDS=$(ansible-vault-manager-client get-usable-ids --vault-path \"provisioning/inventory/vault_vars/\")\nif [ \"$USABLE_IDS\" != \"\" ]; then\n    export ANSIBLE_VAULT_IDENTITY_LIST=\"$USABLE_IDS\"\nfi\n</pre>\n</div>\n</div>\n<div id=\"bugs\">\n<h2>BUGS :</h2>\n<ul>\n<li>Action create not clean new file or remote vault if an error occurs</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation :</h2>\n<div id=\"global-install\">\n<h3>Global install :</h3>\n<p>pip install ansible-vault-manager</p>\n</div>\n<div id=\"pipenv-install\">\n<h3>Pipenv install :</h3>\n<p>pipenv install ansible-vault-manager</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO :</h2>\n<ul>\n<li>Implement actions rekey and encrypt</li>\n<li>Make extensible via custom deported plugins added via a \u201cplugin path\u201d</li>\n<li>Make native plugin Hashi Vault</li>\n<li>Make native plugin S3</li>\n<li>Make native plugin MultiPass</li>\n<li>Make native plugin sshfs</li>\n<li>Manage secured cache for credentials fetching</li>\n</ul>\n</div>\n<div id=\"good-practices\">\n<h2>Good practices :</h2>\n<p>In any playbook, you can add this play to include all vaulted vars, ordered\nby ansible groups logic\nYou can create a non standard \u201cvault_vars\u201d dir in your inventory dir.\nAll files into, matching to hosts groups, will be included.\n\u201cwith_fileglob\u201d permit to not fail if file not exists.</p>\n<pre>- hosts:\n    - all\n  connection: local\n  tasks:\n    - name: Include vaulted vars\n      include_vars: \"{{ item }}\"\n      # prepend path to all groups, \"all\" group is not present in group_names, we force it\n      with_fileglob: \"{{ (group_names + ['all']) | map('regex_replace', '^(.*)$', inventory_dir + '/vault_vars/\\\\1') | list }}\"\n  tags:\n    - always\n</pre>\n<p>If you want, you could apply a similar process for \u201chosts_vars\u201d</p>\n<pre>- hosts:\n    - all\n  connection: local\n  tasks:\n    - name: Include vaulted vars\n      include_vars: \"{{ item }}\"\n      with_fileglob: \"{{ inventory_dir }}/hosts_vault_vars/{{ inventory_hostname }}\"\n  tags:\n    - always\n</pre>\n<p>In your regulars hosts_vars or group_vars, put ALL your vars !\nBut if it\u2019s a sensitive var to vault, original var should be equal\nto a new var.</p>\n<p>Example :</p>\n<pre>group_vars/pp   &lt;= This file is not encrypted, and you can search vars into\nmy_database_password: \"{{ vault_my_database_password }}\"\n\nvault_vars/pp   &lt;= This file is encrypted but you know it should contain vault_my_database_password\nvault_my_database_password: xxxxxxxxx\n</pre>\n</div>\n<div id=\"metadata-file-informations\">\n<h2>Metadata file informations :</h2>\n<p>A metadata file is used to retrieve all passwords to decrypt vaulted files.\nIf you loose metadata, you can\u2019t know wich passwords where used to encrypt\nall vaulted files !!!\nWhen you create your first vaulted file a file named <cite>_metadata.yml</cite> is created\nat the root of \u201cvault-path\u201d location.\nThis name is important and the file follow a structure.</p>\n<div id=\"detailled-structure\">\n<h3>Detailled structure</h3>\n<pre># A list of all \"vault-id\" used to encrypt files in this directory (see. https://docs.ansible.com/ansible/latest/user_guide/vault.html#multiple-vault-passwords)\n# In normal cases, you should never edit this section manually.\nvault_ids:\n\n    # Plugin used to store password\n  - plugin: aws_ssm\n\n    # Config string specific to plugin to fetch password\n    id: customer-account:eu-west-1:/ansible/admins/b32b92b8-6ba8-4941-ba48-3b2e73998631:1\n\n    # Could be a list, but probably always one file. Each file should has its own password for security privileges reasons.\n    # This parameter is not mandatory, but usefull for debugging, or if you want change a password.\n    # Without it, you can't know which file is encrypted with this ID.\n    files:\n      - prod\n\n  - plugin: aws_ssm\n    id: customer-account:eu-west-1:/ansible/dev/4daf2729-7783-43a3-8e3c-9da1b127d8cf:1\n    files:\n      - webservers\n\n  - plugin: bitwarden\n    id: profile:organization:ansible-collection:12f5445a-7783-43a3-8e3c-9da1b127d8cf:1\n    files:\n      - subdir/all\n\n# You can MANUALLY add this parameter is some use cases. It permit to include another metadata file (with the same format) and merge all vault_ids.\n# It can be usefull if you share vaulted vars between multiples playbooks scopes\n# This parameter contain a list of absolute or rlative path to current metadata dir\ninclude:\n  - ../../../other_context/inventory/vault_vars/_metadata.yml\n  - /mnt/other_secure_place/my_metadata.yml\n</pre>\n</div>\n</div>\n<div id=\"plugins-doc\">\n<h2>Plugins doc :</h2>\n<div id=\"aws-system-manager-ssm-parameter-store\">\n<h3>AWS System Manager (SSM parameter store) :</h3>\n<p>AWS SSM permit to store simple secured key/value parameters.\nYou can apply security policies based on key path, so you can\nsplit admin / devs / other permissions on vault credentials.\nAll parameters are versionned, AWS keep each versions of parameters.</p>\n<ul>\n<li>profile: Boto profile used (AWS account)</li>\n<li>region:  AWS region code where store parameters</li>\n<li>path:    Path of parameter in SSM, usefull for security policies</li>\n</ul>\n<p>Vault ID structure :\n<cite>[account profile]:[AWS region]:[parameter path]:[version]</cite></p>\n</div>\n<div id=\"local-or-remote-locally-mounted-filesystem\">\n<h3>Local (or remote locally mounted) filesystem :</h3>\n<p>This plugin provides a simple way to manage versionned password on\na local file path. You can use for exemple an sftp / sshfs mount point.\nBe carefull, basepath must be common for every users of vault !</p>\n<ul>\n<li>basepath: Directory where vault passwords are stored</li>\n</ul>\n<p>Vault ID structure :\n<cite>[basepath]:[filename]:[version]</cite></p>\n<p>The file <cite>[basepath]/[filename].[version]</cite> contains vault password</p>\n</div>\n<div id=\"bitwarden\">\n<h3>Bitwarden :</h3>\n<p>TODO</p>\n<p>Vault ID structure :\n<cite>[organization]:[collection]:[name]:[version]</cite></p>\n</div>\n<div id=\"multipass-git\">\n<h3>Multipass Git :</h3>\n<p>Multipass is a derived version of <a href=\"https://www.passwordstore.org/\" rel=\"nofollow\">https://www.passwordstore.org/</a> for multi-users.\nA set of scripts is available here : <a href=\"https://github.com/toringe/multi-pass\" rel=\"nofollow\">https://github.com/toringe/multi-pass</a></p>\n<p>TODO</p>\n<p>Vault ID structure :\n<cite>[passwords namespace]:[parameter path]:[commit_hash]</cite></p>\n</div>\n<div id=\"multi-hashicorp-vault\">\n<h3>Multi Hashicorp Vault :</h3>\n<p>You have to install and configure a vault agent, and use Token Helpers (<a href=\"https://www.vaultproject.io/docs/commands/token-helper.html\" rel=\"nofollow\">https://www.vaultproject.io/docs/commands/token-helper.html</a>)\nto permit access to multiples Hashicorp servers if necessary.</p>\n<p>TODO</p>\n<p>Vault ID structure :\n<cite>[vault instance]:[parameter path]:[version]</cite></p>\n</div>\n<div id=\"aws-s3\">\n<h3>AWS S3 :</h3>\n<p>TODO</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6736340, "releases": {"0.2.3": [{"comment_text": "", "digests": {"md5": "ffe44195e867a065740c00d89f3a8bbd", "sha256": "204e125aed401db60c98264a643e7eae323dc632349b792ed0baa486ba46939c"}, "downloads": -1, "filename": "ansible_vault_manager-0.2.3-py2-none-any.whl", "has_sig": false, "md5_digest": "ffe44195e867a065740c00d89f3a8bbd", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "size": 16612, "upload_time": "2019-11-07T16:58:54", "upload_time_iso_8601": "2019-11-07T16:58:54.569093Z", "url": "https://files.pythonhosted.org/packages/4a/32/af32116fe4dadb3d3280e0fd6a7eef98f061693a0686df512f00eb509f9a/ansible_vault_manager-0.2.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82530ebbb485231154afb4b1f4c570e9", "sha256": "3d74d4384daf73c033097323b9005591d18e51b63c5ee0541d70322f1b50d184"}, "downloads": -1, "filename": "ansible-vault-manager-0.2.3.tar.gz", "has_sig": false, "md5_digest": "82530ebbb485231154afb4b1f4c570e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "size": 11286, "upload_time": "2019-11-07T16:59:23", "upload_time_iso_8601": "2019-11-07T16:59:23.534145Z", "url": "https://files.pythonhosted.org/packages/75/85/7b01bbc237a88a964df0f4b4eb1f976c456170c677a9182fa434dd222ead/ansible-vault-manager-0.2.3.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "184885a8b1625e5ae65a4b28ceb16125", "sha256": "84904be117663a716ed5d8c6382775a871462ff41ef6390cf5d08dbb3f112ea8"}, "downloads": -1, "filename": "ansible-vault-manager-0.2.5.tar.gz", "has_sig": false, "md5_digest": "184885a8b1625e5ae65a4b28ceb16125", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "size": 11988, "upload_time": "2020-02-13T09:12:54", "upload_time_iso_8601": "2020-02-13T09:12:54.088307Z", "url": "https://files.pythonhosted.org/packages/29/e4/dc2c8c1ee4882c264000a1824072984137dcff39c6c755a2422ca6e2661b/ansible-vault-manager-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "861526b20465861cf96f7e1b0565cefc", "sha256": "2397608003f3469afbafe8dbc4838b028deebd73b1ece54d4f11d907c2074217"}, "downloads": -1, "filename": "ansible-vault-manager-0.2.6.tar.gz", "has_sig": false, "md5_digest": "861526b20465861cf96f7e1b0565cefc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "size": 9804, "upload_time": "2020-03-02T21:46:50", "upload_time_iso_8601": "2020-03-02T21:46:50.626687Z", "url": "https://files.pythonhosted.org/packages/3c/b2/44cda094757de3d2556dc7dba3db588d28e2d6a201a59176edb6e91205e8/ansible-vault-manager-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "861526b20465861cf96f7e1b0565cefc", "sha256": "2397608003f3469afbafe8dbc4838b028deebd73b1ece54d4f11d907c2074217"}, "downloads": -1, "filename": "ansible-vault-manager-0.2.6.tar.gz", "has_sig": false, "md5_digest": "861526b20465861cf96f7e1b0565cefc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "size": 9804, "upload_time": "2020-03-02T21:46:50", "upload_time_iso_8601": "2020-03-02T21:46:50.626687Z", "url": "https://files.pythonhosted.org/packages/3c/b2/44cda094757de3d2556dc7dba3db588d28e2d6a201a59176edb6e91205e8/ansible-vault-manager-0.2.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:02 2020"}