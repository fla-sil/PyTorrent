{"info": {"author": "LISTERINE", "author_email": "jon@jonathanferretti.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "DJ ARP Storm\n===============================\n\n.. image:: https://img.shields.io/pypi/v/dj_arp_storm.svg\n        :target: https://pypi.python.org/pypi/dj_arp_storm\n\n\nPlay network traffic as sound.\n\n\nInstall:\n~~~~~~~~\n.. code-block:: bash\n\n    $ pip install dj-arp-storm\n    $ git clone git@gitlab.com:LISTERINE/dj_as.git ~/.dj_as\n    # Install tshark. For ubuntu install tshark package, for arch, install wireshark-cli\n    $ sudo pacman -S wireshark-cli\n    $ sudo usermod -a -G wireshark <your-user-name>\n    # Log out and log in for group change to take effect\n\nUsage:\n~~~~~~\n.. code-block:: bash\n\n    $ dj_as\n\nConfiguration:\n~~~~~~~~~~~~~~\n\nPlease note that your callbacks will be imported into DJ ARP Storm, so before running the program, make sure you trust the contents of your ``dj.conf`` and ``callbacks.py`` files.\n\ndj.conf\n^^^^^^^\n``dj.conf`` holds the configuration values read by DJ ARP Storm.\n\ndj.conf Sections\n^^^^^^^^^^^^^^^^\n``[general]``\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThe general section settings control things like where sound assets are loaded from and how long to run.\nassets; ~/.dj_as/assets\ncallbacks; ~/.dj_as/callbacks.py\ndefault_interface; en3\ntimeout; 500\n\n    Options\n\n        :assets: The directory where sound folders are held.\n\n            - Default: ``~/.dj_as/assets``\n\n        :callbacks: The file that holds user created functions for playing sounds.\n\n            - Default: ``~/.dj_as/assets``\n\n        :default_interface: Which network interface to capture on.\n\n            - Default: ``auto`` (automatically select the system default gateway)\n            - ``select`` (prompts user to select from a list of interfaces)\n            - ``<eth0, en0, wlan0, etc...>`` (setting default_interface to the name of an interface like ``eth0`` will connect to that specific interface)\n\n        :timeout: The number of packets to process before quitting.\n\n            - Default: ``500``\n            - ``-1`` (run forever)\n\n``[arrangements]``\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThe arrangements section holds the names of the functions you want to be active.\n\ncallbacks.py\n^^^^^^^^^^^^\n``callbacks.py`` holds a class called ``Callbacks``. This where you can put functions that will react to packets. These callback functions should be instance methods that take a single parameter to pass in the latest packet. The callbacks must also be generators. This allows more complicated callbacks to be stateful. The packet passed in is a pyshark ``Packet`` object. https://github.com/KimiNewt/pyshark\n\nTake this method for example:\n\n.. code-block:: python\n\n    def ssh_drum(self, pkt):\n        while not self.has_port(pkt, 22, ptype=\"dstport\"):\n            pkt = yield\n        pkt = yield self.sounds.delay_play(self.sounds.sounds['drum']['snare-1.ogg'])\n\nThis simple method will check the latest packet ``pkt`` for a destination port of 22. Until it see this packet, DJ ARP Storm will yield new packets into it. Once a packet meeting this requirement is seen, it will play a snare sound.\n\nNow look at this more complicated example:\n\n.. code-block:: python\n\n    def handshake_scale(self, pkt):\n        while not self.has_flags(pkt, 2):\n            pkt = yield\n        pkt = yield self.sounds.play(self.sounds.sounds['violin']['b3.ogg'])\n        while not self.has_flags(pkt, 18):\n            pkt = yield\n        pkt = yield self.sounds.delay_play(self.sounds.sounds['violin']['a3.ogg'], 0.2)\n        while not int(pkt.tcp.flags, 16):\n            pkt = yield\n        pkt = yield self.sounds.delay_play(self.sounds.sounds['violin']['c-3.ogg'], 0.2)\n\nBy breaking it up into sections you can see it follows the same pattern as the ``ssh_drum`` method above: while not matching packet, get new packet; then play sound. This just has multiple layers in it. Once one layer has ben completed, it will start testing for the next. Just remember it will resume from where it left off the last time, and not start from the top again until it has completed all it's steps.\n\nIf you'd like to inspect the packets coming through try adding:\n\n.. code-block:: python\n\n    import pdb; pdb.set_trace()\n\nto your method and interrogate the packet with the python debugger.\n\nAssets:\n^^^^^^^\nAssets are the sound files that DJ ARP Storm will play in your callbacks. All sound files must be in .ogg format. The assets folder should be setup in the following hierarchy:\n\n::\n\n\n    Assets-|\n           |- first_instrument-|\n           |                   |- sound_1.ogg\n           |                   |- another_sound.ogg\n           |                   |...\n           |- instrument_2-|\n           |               |- sound_one.ogg\n           |               |- another_sound.ogg\n           |               |...\n           |...\n\n\nRecommendations:\n^^^^^^^^^^^^^^^^\nplace::\n\n    ServerAliveInterval 1\n\nin your ``/etc/ssh/ssh_config`` and open an ssh connection to get consistent traffic for a good tempo.\n\n\n=======\nHistory\n=======\n\n1.0b1 (2017-07-17)\n------------------\n\n* First release on PyPI.\n\n\n1.0b2 (2017-07-19)\n------------------\n\n* Removed bpf filters because pyshark is blocking\n* Shortened sound file names\n\n1.0b2 (2017-07-19)\n------------------\n\n* Updated license\n* Updated link to source\n\n1.0b3 (2017-07-20)\n------------------\n* Bug fixes\n\n\n1.0b4 (2017-07-21)\n------------------\n* Docs\n* New interface options\n* Suppress annoying output\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/LISTERINE/dj_arp_storm", "keywords": "dj_arp_storm", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dj-arp-storm", "package_url": "https://pypi.org/project/dj-arp-storm/", "platform": "", "project_url": "https://pypi.org/project/dj-arp-storm/", "project_urls": {"Homepage": "https://gitlab.com/LISTERINE/dj_arp_storm"}, "release_url": "https://pypi.org/project/dj-arp-storm/1.0b8/", "requires_dist": ["pyshark", "netifaces", "pygame", "configparser"], "requires_python": "", "summary": "play network traffic as sound", "version": "1.0b8", "yanked": false, "html_description": "<div class=\"project-description\">\n            DJ ARP Storm<br>===============================<br><br>.. image:: https://img.shields.io/pypi/v/dj_arp_storm.svg<br>        :target: https://pypi.python.org/pypi/dj_arp_storm<br><br><br>Play network traffic as sound.<br><br><br>Install:<br>~~~~~~~~<br>.. code-block:: bash<br><br>    $ pip install dj-arp-storm<br>    $ git clone git@gitlab.com:LISTERINE/dj_as.git ~/.dj_as<br>    # Install tshark. For ubuntu install tshark package, for arch, install wireshark-cli<br>    $ sudo pacman -S wireshark-cli<br>    $ sudo usermod -a -G wireshark &lt;your-user-name&gt;<br>    # Log out and log in for group change to take effect<br><br>Usage:<br>~~~~~~<br>.. code-block:: bash<br><br>    $ dj_as<br><br>Configuration:<br>~~~~~~~~~~~~~~<br><br>Please note that your callbacks will be imported into DJ ARP Storm, so before running the program, make sure you trust the contents of your ``dj.conf`` and ``callbacks.py`` files.<br><br>dj.conf<br>^^^^^^^<br>``dj.conf`` holds the configuration values read by DJ ARP Storm.<br><br>dj.conf Sections<br>^^^^^^^^^^^^^^^^<br>``[general]``<br>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"<br>The general section settings control things like where sound assets are loaded from and how long to run.<br>assets; ~/.dj_as/assets<br>callbacks; ~/.dj_as/callbacks.py<br>default_interface; en3<br>timeout; 500<br><br>    Options<br><br>        :assets: The directory where sound folders are held.<br><br>            - Default: ``~/.dj_as/assets``<br><br>        :callbacks: The file that holds user created functions for playing sounds.<br><br>            - Default: ``~/.dj_as/assets``<br><br>        :default_interface: Which network interface to capture on.<br><br>            - Default: ``auto`` (automatically select the system default gateway)<br>            - ``select`` (prompts user to select from a list of interfaces)<br>            - ``&lt;eth0, en0, wlan0, etc...&gt;`` (setting default_interface to the name of an interface like ``eth0`` will connect to that specific interface)<br><br>        :timeout: The number of packets to process before quitting.<br><br>            - Default: ``500``<br>            - ``-1`` (run forever)<br><br>``[arrangements]``<br>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"<br>The arrangements section holds the names of the functions you want to be active.<br><br>callbacks.py<br>^^^^^^^^^^^^<br>``callbacks.py`` holds a class called ``Callbacks``. This where you can put functions that will react to packets. These callback functions should be instance methods that take a single parameter to pass in the latest packet. The callbacks must also be generators. This allows more complicated callbacks to be stateful. The packet passed in is a pyshark ``Packet`` object. https://github.com/KimiNewt/pyshark<br><br>Take this method for example:<br><br>.. code-block:: python<br><br>    def ssh_drum(self, pkt):<br>        while not self.has_port(pkt, 22, ptype=\"dstport\"):<br>            pkt = yield<br>        pkt = yield self.sounds.delay_play(self.sounds.sounds['drum']['snare-1.ogg'])<br><br>This simple method will check the latest packet ``pkt`` for a destination port of 22. Until it see this packet, DJ ARP Storm will yield new packets into it. Once a packet meeting this requirement is seen, it will play a snare sound.<br><br>Now look at this more complicated example:<br><br>.. code-block:: python<br><br>    def handshake_scale(self, pkt):<br>        while not self.has_flags(pkt, 2):<br>            pkt = yield<br>        pkt = yield self.sounds.play(self.sounds.sounds['violin']['b3.ogg'])<br>        while not self.has_flags(pkt, 18):<br>            pkt = yield<br>        pkt = yield self.sounds.delay_play(self.sounds.sounds['violin']['a3.ogg'], 0.2)<br>        while not int(pkt.tcp.flags, 16):<br>            pkt = yield<br>        pkt = yield self.sounds.delay_play(self.sounds.sounds['violin']['c-3.ogg'], 0.2)<br><br>By breaking it up into sections you can see it follows the same pattern as the ``ssh_drum`` method above: while not matching packet, get new packet; then play sound. This just has multiple layers in it. Once one layer has ben completed, it will start testing for the next. Just remember it will resume from where it left off the last time, and not start from the top again until it has completed all it's steps.<br><br>If you'd like to inspect the packets coming through try adding:<br><br>.. code-block:: python<br><br>    import pdb; pdb.set_trace()<br><br>to your method and interrogate the packet with the python debugger.<br><br>Assets:<br>^^^^^^^<br>Assets are the sound files that DJ ARP Storm will play in your callbacks. All sound files must be in .ogg format. The assets folder should be setup in the following hierarchy:<br><br>::<br><br><br>    Assets-|<br>           |- first_instrument-|<br>           |                   |- sound_1.ogg<br>           |                   |- another_sound.ogg<br>           |                   |...<br>           |- instrument_2-|<br>           |               |- sound_one.ogg<br>           |               |- another_sound.ogg<br>           |               |...<br>           |...<br><br><br>Recommendations:<br>^^^^^^^^^^^^^^^^<br>place::<br><br>    ServerAliveInterval 1<br><br>in your ``/etc/ssh/ssh_config`` and open an ssh connection to get consistent traffic for a good tempo.<br><br><br>=======<br>History<br>=======<br><br>1.0b1 (2017-07-17)<br>------------------<br><br>* First release on PyPI.<br><br><br>1.0b2 (2017-07-19)<br>------------------<br><br>* Removed bpf filters because pyshark is blocking<br>* Shortened sound file names<br><br>1.0b2 (2017-07-19)<br>------------------<br><br>* Updated license<br>* Updated link to source<br><br>1.0b3 (2017-07-20)<br>------------------<br>* Bug fixes<br><br><br>1.0b4 (2017-07-21)<br>------------------<br>* Docs<br>* New interface options<br>* Suppress annoying output<br><br><br>\n          </div>"}, "last_serial": 3522502, "releases": {"1.0b1": [{"comment_text": "", "digests": {"md5": "cea474a394a9c042e2fe87c72b633af9", "sha256": "c03716ac2c0ef0e735963b5fbb710cae15d6285e386cbef38e8eb994e12ff10a"}, "downloads": -1, "filename": "dj_arp_storm-1.0b1.tar.gz", "has_sig": false, "md5_digest": "cea474a394a9c042e2fe87c72b633af9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13303, "upload_time": "2017-07-18T01:46:29", "upload_time_iso_8601": "2017-07-18T01:46:29.292088Z", "url": "https://files.pythonhosted.org/packages/7c/a3/ba21f1ca8c38eb371383af4a915434302008dc14cb65efe9d388faaef0a8/dj_arp_storm-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "afe3744e8d7dc54da0478f8c160603d2", "sha256": "de502850cbe4d576bd6199a74c245511a0d3ede259272e3719f518e910de2726"}, "downloads": -1, "filename": "dj_arp_storm-1.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "afe3744e8d7dc54da0478f8c160603d2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8581, "upload_time": "2017-07-20T03:36:52", "upload_time_iso_8601": "2017-07-20T03:36:52.036546Z", "url": "https://files.pythonhosted.org/packages/97/58/af3c16efd4d578ec6e421502129854aed84ab58447b79188696cb215e370/dj_arp_storm-1.0b2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1eb6f79d6fde654c2557fc303ecff9c2", "sha256": "3393377f152b068242299e280f855710e24d801a82085efb3f842bb90b877503"}, "downloads": -1, "filename": "dj_arp_storm-1.0b2.tar.gz", "has_sig": false, "md5_digest": "1eb6f79d6fde654c2557fc303ecff9c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15724, "upload_time": "2017-07-20T03:36:53", "upload_time_iso_8601": "2017-07-20T03:36:53.109341Z", "url": "https://files.pythonhosted.org/packages/a7/a9/f4c74ae88ef06845b588bd85c4485c0240fa58312a25bad9eaee9d461578/dj_arp_storm-1.0b2.tar.gz", "yanked": false}], "1.0b3": [{"comment_text": "", "digests": {"md5": "5f0ac864771e77cb4fe8c5b99923bcf3", "sha256": "67b63f99269de422d0af3ca6936068c6eb2abb915099cf112bbfcf733c7d2c3e"}, "downloads": -1, "filename": "dj_arp_storm-1.0b3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f0ac864771e77cb4fe8c5b99923bcf3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8708, "upload_time": "2017-07-20T12:26:41", "upload_time_iso_8601": "2017-07-20T12:26:41.306703Z", "url": "https://files.pythonhosted.org/packages/9d/ac/ced413abdb9b31f0ee8b7c19eb2cc3d1c80f52466198159a565f6e141b0f/dj_arp_storm-1.0b3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "998394a99e1e3c740c408cff5443999b", "sha256": "2c7a765d95b7028982d343146259ee5a1280899835cdef136d6e8b6f14363856"}, "downloads": -1, "filename": "dj_arp_storm-1.0b3.tar.gz", "has_sig": false, "md5_digest": "998394a99e1e3c740c408cff5443999b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16108, "upload_time": "2017-07-20T12:26:42", "upload_time_iso_8601": "2017-07-20T12:26:42.927508Z", "url": "https://files.pythonhosted.org/packages/12/74/b725d41f0a4ac9de085d90d8ba807a524704378d6da5c6331f11ae127835/dj_arp_storm-1.0b3.tar.gz", "yanked": false}], "1.0b4": [{"comment_text": "", "digests": {"md5": "18589e8144eac278bb45216c34c2e2a6", "sha256": "e2527035b06ae4972bcbf891f54fb8ee2318c974e2722fcc1c95ea40ecda7753"}, "downloads": -1, "filename": "dj_arp_storm-1.0b4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "18589e8144eac278bb45216c34c2e2a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10235, "upload_time": "2017-07-21T16:25:46", "upload_time_iso_8601": "2017-07-21T16:25:46.290535Z", "url": "https://files.pythonhosted.org/packages/61/94/1f87319916f58f9068d3de24571f6d33b4ec37b3c04690231adb22317e0c/dj_arp_storm-1.0b4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e99eb5788ea4c4eb55fd412c927a39e", "sha256": "d1aa17f19ba90c2c54a2edebbb0dcec33facc3a9daf6047e4b13e5078be75739"}, "downloads": -1, "filename": "dj_arp_storm-1.0b4.tar.gz", "has_sig": false, "md5_digest": "6e99eb5788ea4c4eb55fd412c927a39e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17597, "upload_time": "2017-07-21T16:25:48", "upload_time_iso_8601": "2017-07-21T16:25:48.126590Z", "url": "https://files.pythonhosted.org/packages/ae/e1/bf28426d6726121cc09ca5c59cb2bb728810d3cf8d370d4b9130386fc4ab/dj_arp_storm-1.0b4.tar.gz", "yanked": false}], "1.0b5": [{"comment_text": "", "digests": {"md5": "cd2b8ae3a8fa7f3a659f6586a5bbde31", "sha256": "1d454119aeebbe09741d987fb6c5274281920e52ae22c845417de7cd068dddfc"}, "downloads": -1, "filename": "dj_arp_storm-1.0b5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cd2b8ae3a8fa7f3a659f6586a5bbde31", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11408, "upload_time": "2018-01-23T03:12:54", "upload_time_iso_8601": "2018-01-23T03:12:54.833938Z", "url": "https://files.pythonhosted.org/packages/fb/93/dc7e3fc876bca5b95fd1934cab9735a1cff859cbb1db1e86d15e132a83b1/dj_arp_storm-1.0b5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cf195dc4188afdf89a66894daa2114b", "sha256": "67ee605c7c389418e71259625e4a35d5fd0f2cf949d4471b0ba460bc9bb15efe"}, "downloads": -1, "filename": "dj_arp_storm-1.0b5.tar.gz", "has_sig": false, "md5_digest": "7cf195dc4188afdf89a66894daa2114b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11257, "upload_time": "2018-01-23T03:12:55", "upload_time_iso_8601": "2018-01-23T03:12:55.978501Z", "url": "https://files.pythonhosted.org/packages/69/06/7dfdcf65f390f1a45ed95632903816e9f0518b4baa77d0919b5637e9df9c/dj_arp_storm-1.0b5.tar.gz", "yanked": false}], "1.0b6": [{"comment_text": "", "digests": {"md5": "21eb0c6d3b0367dc2fd3c6c770bacf28", "sha256": "ddc027b9c5d0956878104977788713465af58af4538c86d722211ea6a87f89ad"}, "downloads": -1, "filename": "dj_arp_storm-1.0b6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "21eb0c6d3b0367dc2fd3c6c770bacf28", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11635, "upload_time": "2018-01-24T13:55:19", "upload_time_iso_8601": "2018-01-24T13:55:19.852978Z", "url": "https://files.pythonhosted.org/packages/8f/dd/1986328876cbeafd33d5deb43c77aaa034a314545beb23316e806829a04c/dj_arp_storm-1.0b6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21ee9402e89b0973af7ce5e20369c852", "sha256": "e9679976a676986987210ce6845b77fba53bfaff7c06b3153ba50c198a6ffc78"}, "downloads": -1, "filename": "dj_arp_storm-1.0b6.tar.gz", "has_sig": false, "md5_digest": "21ee9402e89b0973af7ce5e20369c852", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57540, "upload_time": "2018-01-24T13:55:21", "upload_time_iso_8601": "2018-01-24T13:55:21.662472Z", "url": "https://files.pythonhosted.org/packages/c9/32/808eeebfcc679f7315a83dda41c760c444114fb06a31f9eb57f03e8ab4ed/dj_arp_storm-1.0b6.tar.gz", "yanked": false}], "1.0b7": [{"comment_text": "", "digests": {"md5": "8c88bab88bca90833cb075878db3e198", "sha256": "fac6680947a62f079e5d9d39a1436d07ba4fbc7c4b8760b7f328b93e4e1a869c"}, "downloads": -1, "filename": "dj_arp_storm-1.0b7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8c88bab88bca90833cb075878db3e198", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11633, "upload_time": "2018-01-24T14:40:08", "upload_time_iso_8601": "2018-01-24T14:40:08.387662Z", "url": "https://files.pythonhosted.org/packages/d2/8c/c62a23f0182bb478eabc7062ef73268029cba8989b7fa2bd0c8492e7f3be/dj_arp_storm-1.0b7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e1b219ca50ac321a085339588621fd9", "sha256": "be4bdd255f328e1d67b227cc733f0a21c5356592f061f81cb5bfd940b559a47b"}, "downloads": -1, "filename": "dj_arp_storm-1.0b7.tar.gz", "has_sig": false, "md5_digest": "5e1b219ca50ac321a085339588621fd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57541, "upload_time": "2018-01-24T14:40:10", "upload_time_iso_8601": "2018-01-24T14:40:10.293466Z", "url": "https://files.pythonhosted.org/packages/93/47/75cdfb2b1be82cef458fa9c99fe35014e59b479a2ffeaa1d0cfcb94054f0/dj_arp_storm-1.0b7.tar.gz", "yanked": false}], "1.0b8": [{"comment_text": "", "digests": {"md5": "2800c89104f68b3492ca70a5da61fe5e", "sha256": "2ba332ed70ed0938646caff9a0294649fe8a1cf77f9ad3cacd498f094395879d"}, "downloads": -1, "filename": "dj_arp_storm-1.0b8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2800c89104f68b3492ca70a5da61fe5e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11643, "upload_time": "2018-01-26T02:48:43", "upload_time_iso_8601": "2018-01-26T02:48:43.398697Z", "url": "https://files.pythonhosted.org/packages/a6/0b/bc1d0b8cfc7ed67833a9c860c3df84d7c6c739f0b4ed05299bc760f61d2a/dj_arp_storm-1.0b8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2292f9c7e389c5503b0086065400b054", "sha256": "20747c587d1d5518633a185c9237e4fb13f6aba51dff7911d959761e046645b3"}, "downloads": -1, "filename": "dj_arp_storm-1.0b8.tar.gz", "has_sig": false, "md5_digest": "2292f9c7e389c5503b0086065400b054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57542, "upload_time": "2018-01-26T02:48:44", "upload_time_iso_8601": "2018-01-26T02:48:44.486558Z", "url": "https://files.pythonhosted.org/packages/09/de/de02775f7c186db4aa96340f13aacbd36e33d585943f4862c9deba44a1a3/dj_arp_storm-1.0b8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2800c89104f68b3492ca70a5da61fe5e", "sha256": "2ba332ed70ed0938646caff9a0294649fe8a1cf77f9ad3cacd498f094395879d"}, "downloads": -1, "filename": "dj_arp_storm-1.0b8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2800c89104f68b3492ca70a5da61fe5e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11643, "upload_time": "2018-01-26T02:48:43", "upload_time_iso_8601": "2018-01-26T02:48:43.398697Z", "url": "https://files.pythonhosted.org/packages/a6/0b/bc1d0b8cfc7ed67833a9c860c3df84d7c6c739f0b4ed05299bc760f61d2a/dj_arp_storm-1.0b8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2292f9c7e389c5503b0086065400b054", "sha256": "20747c587d1d5518633a185c9237e4fb13f6aba51dff7911d959761e046645b3"}, "downloads": -1, "filename": "dj_arp_storm-1.0b8.tar.gz", "has_sig": false, "md5_digest": "2292f9c7e389c5503b0086065400b054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57542, "upload_time": "2018-01-26T02:48:44", "upload_time_iso_8601": "2018-01-26T02:48:44.486558Z", "url": "https://files.pythonhosted.org/packages/09/de/de02775f7c186db4aa96340f13aacbd36e33d585943f4862c9deba44a1a3/dj_arp_storm-1.0b8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:42 2020"}