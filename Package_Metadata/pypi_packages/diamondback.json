{"info": {"author": "Larry Turner", "author_email": "larry.turner@se.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "### Description\n\nDiamondback is a Python package which provides Digital Signal Processing ( DSP )\nsolutions, organized in the form of commons, filters, interfaces, models, and\ntransforms.\n\nDiamondback was designed to complement Artificial Intelligence ( AI ) frameworks,\nby defining components which analyze, filter, extract, model, and transform data\ninto forms which are useful in applications including pattern recognition,\nfeature extraction, and optimization.\n\nDiamondback was also designed to provide utility in the context of classical\nsignal processing solutions including communications, modeling, signal\nidentification and extraction, and noise cancellation.\n\nDocumentation is provided in HTML form, extracted from docstrings in the\ndiamondback package source, and a Jupyter notebook is provided to dynamically\nconstruct and exercise diamondback components to facilitate experimentation and\nvisualization.\n\n### Details\n\nAn extensible factory design pattern is expressed in many components, and a\nmix-in design pattern is extensively employed in property definition.  Complex\nor real types, in adaptive or static forms, are supported as appropriate.  Data\ncollections are consistently expressed in native types, including tuples, sets,\nlists, and dictionaries, with vector and matrix types expressed in numpy arrays.\n\nDiamondback is defined in subpackages :\n\n* [commons](https://larryturner.github.io/diamondback/diamondback.commons)\n\n* [filters](https://larryturner.github.io/diamondback/diamondback.filters)\n\n* [interfaces](https://larryturner.github.io/diamondback/diamondback.interfaces)\n\n* [models](https://larryturner.github.io/diamondback/diamondback.models)\n\n* [transforms](https://larryturner.github.io/diamondback/diamondback.transforms)\n\n#### [commons](https://larryturner.github.io/diamondback/diamondback.commons)\n\n**Log** is a singleton instance which formats and writes log entries, electively\nusing the logger package or directly to a specified stream. Log entries are\nprefaced with an ISO-8601 UTC datetime and log level, and enhancements\nare made to the formatting of datetime, exception, and collection data\ntypes.  Dynamic stream redirection and log level specification are\nsupported.\n\n**Serial** is a singleton instance which encodes and decodes an instance or\ncollection with JSON text, or base-64 encoded gzip JSON binary format.\n\n#### [filters](https://larryturner.github.io/diamondback/diamondback.filters)\n\n**ComplexBandPassFilter** instances adaptively extract or reject signals at a\nnormalized frequency of interest, and may be employed to dynamically track\nmagnitude and phase or demodulate signals.\n\n**ComplexExponentialFilter** instances synthesize complex exponential signals at\nnormalized frequencies of interest with contiguous phase.\n\n**ComplexFrequencyFilter** instances adaptively discriminate and estimate a\nnormalized frequency of a signal.\n\n**DerivativeFilter** instances estimate discrete derivative approximations at\nseveral filter orders, through extensible factory construction.\n\n**FirFilter** instances realize discrete difference equations of Finite Impulse\nResponse ( FIR ) form, in adaptive or static solutions.  A factory electively\nconstructs instances based on type, classification, normalized frequency, order,\ncascade count, and complement.  Filters may be readily extended to support new\ntypes and functionality, while retaining factory support.  Root extraction,\ngroup delay, and frequency response evaluation are defined.\n\n**GoertzelFilter** instances efficiently evaluate a Discrete Fourier Transform\n( DFT ) at a normalized frequency, based on a window filter and normalized\nfrequency.\n\n**IirFilter** instances realize discrete difference equations of Infinite Impulse\nResponse ( IIR ) form, in adaptive or static solutions.  A factory electively\nconstructs instances based on type, classification, normalized frequency, order,\ncascade count, and complement.  Filters may be readily extended to support new\ntypes and functionality, while retaining factory support.  Root extraction,\ngroup delay, and frequency response evaluation are defined.\n\n**IntegralFilter** instances estimate discrete integral approximations at several\nfilter orders, through extensible factory construction.\n\n**PidFilter** instances realize discrete difference equations of Proportional\nIntegral Derivative ( PID ) form.\n\n**PolynomialRateFilter** instances approximate a signal evaluated at an effective\nfrequency equal to the product of the normalized frequency and a rate greater\nthan or equal to one, supporting interpolation through localized polynomial\napproximation with no group delay.\n\n**PolyphaseRateFilter** instances approximate a signal evaluated at an effective\nfrequency equal to the product of the normalized frequency and a rate greater\nthan zero, supporting decimation and interpolation through construction and\napplication of a polyphase filter bank, a sequence of low pass filters with a\ncommon frequency response and a fractional sample difference in group delay.  An\nappropriate stride is determined to realize the specified effective frequency\nwithout bias and with group delay based on order.\n\n**RankFilter** instances define nonlinear morphological operators, which define\nfunctionality based on rank and order, including dilation, median, and erosion,\nand may be combined in sequences to support close and open.\n\n**WindowFilter** instances realize discrete window functions useful in Fourier\nanalysis, based on type, classification, order, and normalization, through\nextensible factory construction.\n\n#### [interfaces](https://larryturner.github.io/diamondback/diamondback.interfaces)\n\n**IA**, **IB**, **IClear**, **IEqual**, **IFrequency**, **IPhase**, **IQ**, **IRate**,\n**IReset**, and **IS** interfaces facilitate mix-in design.\n\n#### [models](https://larryturner.github.io/diamondback/diamondback.models)\n\n**DiversityModel** instances select and retain a state extracted to maximize the\nminimum distance between state members based on classification and order,\nthrough extensible factory construction.  An opportunistic unsupervised learning\nmodel typically improves condition and numerical accuracy and reduces storage\nrelative to alternative approaches including generalized linear inverse.\n\n**PrincipalComponentModel** instances are supervised learning models which\nanalyze an incident signal to learn a mean vector, standard deviation vector,\nand a collection of eigenvectors, and produce a reference signal which is a\ncandidate for dimension reduction, in which higher order dimensions are\ndiscarded, reducing the order of the reference signal, while preserving\nsignificant and often sufficient information.\n\n#### [transforms](https://larryturner.github.io/diamondback/diamondback.transforms)\n\n**ComplexTransform** is a singleton instance which converts a three-phase real\nsignal to a complex signal, or a complex signal to a three-phase real signal, in\nequivalent and reversible representations, based on a neutral condition.\n\n**FourierTransform** is a singleton instance which converts a real or complex\ndiscrete-time signal to a complex discrete-frequency signal, or a complex\ndiscrete-frequency signal to a real or complex discrete-time signal, in\nequivalent and reversible representations, based on a window filter and inverse.\n\n**PowerSpectrumTransform** is a singleton instance which converts a real or complex\ndiscrete-time signal to a real discrete-frequency signal which estimates a mean\npower density of the signal, based on a window filter.\n\n**WaveletTransform** instances realize a temporal spatial frequency transformation\nthrough construction and application of analysis and synthesis filters with\ncomplementary frequency responses, combined with downsampling and upsampling\noperations, in equivalent and reversible representations.  A factory constructs\ninstances based on type, classification, and order.  Filters may be readily\nextended to support new types and functionality, while retaining factory\nsupport.\n\n**ZTransform** is a singleton instance which converts continuous s-domain to\ndiscrete z-domain difference equations, based on a normalized frequency and\napplication of bilinear or impulse invariant methods.\t\n\n### Dependencies\n\nDiamondback depends upon external packages :\n\n* [jsonpickle](https://github.com/jsonpickle/jsonpickle)\n\n* [numpy](https://github.com/numpy/numpy)\n\n* [scipy](https://github.com/scipy/scipy)\n\n### Installation\n\nDiamondback is a public repository hosted at PyPI and GitHub.\n\n    pip install diamondback\n\n    pip install git+https://github.com/larryturner/diamondback.git\n\n\n### Demonstration\n\nA Jupyter notebook defines cells to create and exercise diamondback components.\nThe notebook serves as a simplified but useful introduction to and\ndemonstration of diamondback capabilities.\t\n\n    jupyter notebook .\\jupyter\\diamondback.ipynb\n\nRestart the kernel, as the first cell contains common definitions, find cells\nwhich exercise components of interest, and manipulate widgets to exercise and\nvisualize functionality.\n\n### Documentation\n\nDiamondback documentation is generated from the source, indexed, and searchable.\n\n[GitHub](https://larryturner.github.io/diamondback/)\n\n### Test\n\nA simple pytest solution is provided to exercise and verify diamondback\ncomponents.\n\n    py.test -v --capture=no .\\test\n\n### Author\n\n[Larry Turner](https://github.com/larryturner)\n\n### License\n\n[BSD-3C](https://github.com/larryturner/diamondback/blob/master/license)\n\n### Release\n\n[Version](https://github.com/larryturner/diamondback/blob/master/version)\n\nCopyright (c) 2018, Larry Turner, Schneider Electric.  All rights reserved.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/larryturner/diamondback", "keywords": "DSP,FFT,FIR,GZIP,IIR,JSON,PCA,PID,PSD,adaptive,complex,derivative,diversity,exponential,filter,fourier,frequency,goertzel,integral,log,model,polynomial,polyphase,power,serial,transform,wavelet", "license": "BSD-3C.  Copyright (c) 2018, Larry Turner, Schneider Electric.  All rights reserved.", "maintainer": "", "maintainer_email": "", "name": "diamondback", "package_url": "https://pypi.org/project/diamondback/", "platform": "", "project_url": "https://pypi.org/project/diamondback/", "project_urls": {"Homepage": "https://github.com/larryturner/diamondback"}, "release_url": "https://pypi.org/project/diamondback/1.0.10/", "requires_dist": ["jsonpickle (>=1.2)", "numpy (>=1.0.0)", "scipy (>=1.0.0)"], "requires_python": ">= 3.5", "summary": "Diamondback Digital Signal Processing ( DSP ) package including commons, filters, interfaces, models, and transforms.", "version": "1.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>### Description</p>\n<p>Diamondback is a Python package which provides Digital Signal Processing ( DSP )\nsolutions, organized in the form of commons, filters, interfaces, models, and\ntransforms.</p>\n<p>Diamondback was designed to complement Artificial Intelligence ( AI ) frameworks,\nby defining components which analyze, filter, extract, model, and transform data\ninto forms which are useful in applications including pattern recognition,\nfeature extraction, and optimization.</p>\n<p>Diamondback was also designed to provide utility in the context of classical\nsignal processing solutions including communications, modeling, signal\nidentification and extraction, and noise cancellation.</p>\n<p>Documentation is provided in HTML form, extracted from docstrings in the\ndiamondback package source, and a Jupyter notebook is provided to dynamically\nconstruct and exercise diamondback components to facilitate experimentation and\nvisualization.</p>\n<p>### Details</p>\n<p>An extensible factory design pattern is expressed in many components, and a\nmix-in design pattern is extensively employed in property definition.  Complex\nor real types, in adaptive or static forms, are supported as appropriate.  Data\ncollections are consistently expressed in native types, including tuples, sets,\nlists, and dictionaries, with vector and matrix types expressed in numpy arrays.</p>\n<p>Diamondback is defined in subpackages :</p>\n<ul>\n<li>[commons](<a href=\"https://larryturner.github.io/diamondback/diamondback.commons\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.commons</a>)</li>\n<li>[filters](<a href=\"https://larryturner.github.io/diamondback/diamondback.filters\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.filters</a>)</li>\n<li>[interfaces](<a href=\"https://larryturner.github.io/diamondback/diamondback.interfaces\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.interfaces</a>)</li>\n<li>[models](<a href=\"https://larryturner.github.io/diamondback/diamondback.models\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.models</a>)</li>\n<li>[transforms](<a href=\"https://larryturner.github.io/diamondback/diamondback.transforms\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.transforms</a>)</li>\n</ul>\n<p>#### [commons](<a href=\"https://larryturner.github.io/diamondback/diamondback.commons\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.commons</a>)</p>\n<p><strong>Log</strong> is a singleton instance which formats and writes log entries, electively\nusing the logger package or directly to a specified stream. Log entries are\nprefaced with an ISO-8601 UTC datetime and log level, and enhancements\nare made to the formatting of datetime, exception, and collection data\ntypes.  Dynamic stream redirection and log level specification are\nsupported.</p>\n<p><strong>Serial</strong> is a singleton instance which encodes and decodes an instance or\ncollection with JSON text, or base-64 encoded gzip JSON binary format.</p>\n<p>#### [filters](<a href=\"https://larryturner.github.io/diamondback/diamondback.filters\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.filters</a>)</p>\n<p><strong>ComplexBandPassFilter</strong> instances adaptively extract or reject signals at a\nnormalized frequency of interest, and may be employed to dynamically track\nmagnitude and phase or demodulate signals.</p>\n<p><strong>ComplexExponentialFilter</strong> instances synthesize complex exponential signals at\nnormalized frequencies of interest with contiguous phase.</p>\n<p><strong>ComplexFrequencyFilter</strong> instances adaptively discriminate and estimate a\nnormalized frequency of a signal.</p>\n<p><strong>DerivativeFilter</strong> instances estimate discrete derivative approximations at\nseveral filter orders, through extensible factory construction.</p>\n<p><strong>FirFilter</strong> instances realize discrete difference equations of Finite Impulse\nResponse ( FIR ) form, in adaptive or static solutions.  A factory electively\nconstructs instances based on type, classification, normalized frequency, order,\ncascade count, and complement.  Filters may be readily extended to support new\ntypes and functionality, while retaining factory support.  Root extraction,\ngroup delay, and frequency response evaluation are defined.</p>\n<p><strong>GoertzelFilter</strong> instances efficiently evaluate a Discrete Fourier Transform\n( DFT ) at a normalized frequency, based on a window filter and normalized\nfrequency.</p>\n<p><strong>IirFilter</strong> instances realize discrete difference equations of Infinite Impulse\nResponse ( IIR ) form, in adaptive or static solutions.  A factory electively\nconstructs instances based on type, classification, normalized frequency, order,\ncascade count, and complement.  Filters may be readily extended to support new\ntypes and functionality, while retaining factory support.  Root extraction,\ngroup delay, and frequency response evaluation are defined.</p>\n<p><strong>IntegralFilter</strong> instances estimate discrete integral approximations at several\nfilter orders, through extensible factory construction.</p>\n<p><strong>PidFilter</strong> instances realize discrete difference equations of Proportional\nIntegral Derivative ( PID ) form.</p>\n<p><strong>PolynomialRateFilter</strong> instances approximate a signal evaluated at an effective\nfrequency equal to the product of the normalized frequency and a rate greater\nthan or equal to one, supporting interpolation through localized polynomial\napproximation with no group delay.</p>\n<p><strong>PolyphaseRateFilter</strong> instances approximate a signal evaluated at an effective\nfrequency equal to the product of the normalized frequency and a rate greater\nthan zero, supporting decimation and interpolation through construction and\napplication of a polyphase filter bank, a sequence of low pass filters with a\ncommon frequency response and a fractional sample difference in group delay.  An\nappropriate stride is determined to realize the specified effective frequency\nwithout bias and with group delay based on order.</p>\n<p><strong>RankFilter</strong> instances define nonlinear morphological operators, which define\nfunctionality based on rank and order, including dilation, median, and erosion,\nand may be combined in sequences to support close and open.</p>\n<p><strong>WindowFilter</strong> instances realize discrete window functions useful in Fourier\nanalysis, based on type, classification, order, and normalization, through\nextensible factory construction.</p>\n<p>#### [interfaces](<a href=\"https://larryturner.github.io/diamondback/diamondback.interfaces\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.interfaces</a>)</p>\n<p><strong>IA</strong>, <strong>IB</strong>, <strong>IClear</strong>, <strong>IEqual</strong>, <strong>IFrequency</strong>, <strong>IPhase</strong>, <strong>IQ</strong>, <strong>IRate</strong>,\n<strong>IReset</strong>, and <strong>IS</strong> interfaces facilitate mix-in design.</p>\n<p>#### [models](<a href=\"https://larryturner.github.io/diamondback/diamondback.models\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.models</a>)</p>\n<p><strong>DiversityModel</strong> instances select and retain a state extracted to maximize the\nminimum distance between state members based on classification and order,\nthrough extensible factory construction.  An opportunistic unsupervised learning\nmodel typically improves condition and numerical accuracy and reduces storage\nrelative to alternative approaches including generalized linear inverse.</p>\n<p><strong>PrincipalComponentModel</strong> instances are supervised learning models which\nanalyze an incident signal to learn a mean vector, standard deviation vector,\nand a collection of eigenvectors, and produce a reference signal which is a\ncandidate for dimension reduction, in which higher order dimensions are\ndiscarded, reducing the order of the reference signal, while preserving\nsignificant and often sufficient information.</p>\n<p>#### [transforms](<a href=\"https://larryturner.github.io/diamondback/diamondback.transforms\" rel=\"nofollow\">https://larryturner.github.io/diamondback/diamondback.transforms</a>)</p>\n<p><strong>ComplexTransform</strong> is a singleton instance which converts a three-phase real\nsignal to a complex signal, or a complex signal to a three-phase real signal, in\nequivalent and reversible representations, based on a neutral condition.</p>\n<p><strong>FourierTransform</strong> is a singleton instance which converts a real or complex\ndiscrete-time signal to a complex discrete-frequency signal, or a complex\ndiscrete-frequency signal to a real or complex discrete-time signal, in\nequivalent and reversible representations, based on a window filter and inverse.</p>\n<p><strong>PowerSpectrumTransform</strong> is a singleton instance which converts a real or complex\ndiscrete-time signal to a real discrete-frequency signal which estimates a mean\npower density of the signal, based on a window filter.</p>\n<p><strong>WaveletTransform</strong> instances realize a temporal spatial frequency transformation\nthrough construction and application of analysis and synthesis filters with\ncomplementary frequency responses, combined with downsampling and upsampling\noperations, in equivalent and reversible representations.  A factory constructs\ninstances based on type, classification, and order.  Filters may be readily\nextended to support new types and functionality, while retaining factory\nsupport.</p>\n<p><strong>ZTransform</strong> is a singleton instance which converts continuous s-domain to\ndiscrete z-domain difference equations, based on a normalized frequency and\napplication of bilinear or impulse invariant methods.</p>\n<p>### Dependencies</p>\n<p>Diamondback depends upon external packages :</p>\n<ul>\n<li>[jsonpickle](<a href=\"https://github.com/jsonpickle/jsonpickle\" rel=\"nofollow\">https://github.com/jsonpickle/jsonpickle</a>)</li>\n<li>[numpy](<a href=\"https://github.com/numpy/numpy\" rel=\"nofollow\">https://github.com/numpy/numpy</a>)</li>\n<li>[scipy](<a href=\"https://github.com/scipy/scipy\" rel=\"nofollow\">https://github.com/scipy/scipy</a>)</li>\n</ul>\n<p>### Installation</p>\n<p>Diamondback is a public repository hosted at PyPI and GitHub.</p>\n<blockquote>\n<p>pip install diamondback</p>\n<p>pip install git+https://github.com/larryturner/diamondback.git</p>\n</blockquote>\n<p>### Demonstration</p>\n<p>A Jupyter notebook defines cells to create and exercise diamondback components.\nThe notebook serves as a simplified but useful introduction to and\ndemonstration of diamondback capabilities.</p>\n<blockquote>\njupyter notebook .jupyterdiamondback.ipynb</blockquote>\n<p>Restart the kernel, as the first cell contains common definitions, find cells\nwhich exercise components of interest, and manipulate widgets to exercise and\nvisualize functionality.</p>\n<p>### Documentation</p>\n<p>Diamondback documentation is generated from the source, indexed, and searchable.</p>\n<p>[GitHub](<a href=\"https://larryturner.github.io/diamondback/\" rel=\"nofollow\">https://larryturner.github.io/diamondback/</a>)</p>\n<p>### Test</p>\n<p>A simple pytest solution is provided to exercise and verify diamondback\ncomponents.</p>\n<blockquote>\npy.test -v \u2013capture=no .test</blockquote>\n<p>### Author</p>\n<p>[Larry Turner](<a href=\"https://github.com/larryturner\" rel=\"nofollow\">https://github.com/larryturner</a>)</p>\n<p>### License</p>\n<p>[BSD-3C](<a href=\"https://github.com/larryturner/diamondback/blob/master/license\" rel=\"nofollow\">https://github.com/larryturner/diamondback/blob/master/license</a>)</p>\n<p>### Release</p>\n<p>[Version](<a href=\"https://github.com/larryturner/diamondback/blob/master/version\" rel=\"nofollow\">https://github.com/larryturner/diamondback/blob/master/version</a>)</p>\n<p>Copyright (c) 2018, Larry Turner, Schneider Electric.  All rights reserved.</p>\n\n          </div>"}, "last_serial": 6979257, "releases": {"1.0.10": [{"comment_text": "", "digests": {"md5": "667a536c457c19bae2bb2066a924998b", "sha256": "05b0129b277bc17d6cf269d3522e0285018507ec1d714832a1a553c58484e0c7"}, "downloads": -1, "filename": "diamondback-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "667a536c457c19bae2bb2066a924998b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.5", "size": 72972, "upload_time": "2020-04-08T17:14:33", "upload_time_iso_8601": "2020-04-08T17:14:33.721704Z", "url": "https://files.pythonhosted.org/packages/29/4b/0efc074bf21370ab8e9a655312df07cc2cfb2f7140d88d55374da2507063/diamondback-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11fc1e54539da7ec1e2a90eaaceae3a4", "sha256": "b536e9a7528f38ada5a7c61587fc9c30e736448ce5f6672a2b104922bd13a0b1"}, "downloads": -1, "filename": "diamondback-1.0.10.tar.gz", "has_sig": false, "md5_digest": "11fc1e54539da7ec1e2a90eaaceae3a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 45412, "upload_time": "2020-04-08T17:14:34", "upload_time_iso_8601": "2020-04-08T17:14:34.797539Z", "url": "https://files.pythonhosted.org/packages/fc/70/32a144209674599ae893ad3e78dcd67f6e3167a468d21120491fdfa8834d/diamondback-1.0.10.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "fdf6b149ced5e145523cb8b13bbc6e00", "sha256": "e40849459e6128702282a485cb9cc361bb4b06533a786fdead1493aa9c75ac57"}, "downloads": -1, "filename": "diamondback-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "fdf6b149ced5e145523cb8b13bbc6e00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 84395, "upload_time": "2019-09-09T16:17:36", "upload_time_iso_8601": "2019-09-09T16:17:36.234784Z", "url": "https://files.pythonhosted.org/packages/73/d2/b06ae7ef02b6d63f66d80dd11457315c65be57397253b59d17c98d000a50/diamondback-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1903b69f21808a3febc3a4b326f6cae6", "sha256": "11afdd37eb2bc14a4e7e6e0ffb57b4edd62533a7db21a808916aafe96ccaadf6"}, "downloads": -1, "filename": "diamondback-1.0.6.tar.gz", "has_sig": false, "md5_digest": "1903b69f21808a3febc3a4b326f6cae6", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 43150, "upload_time": "2019-09-09T16:17:37", "upload_time_iso_8601": "2019-09-09T16:17:37.998973Z", "url": "https://files.pythonhosted.org/packages/b7/f2/65317b15c4fcb61411a3ab3f3b788426c74e911023b518522423f3a49534/diamondback-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "ca156d6c84260504744243a06d1a6fcb", "sha256": "0ead2bce58971f2cd4f72f67980e859cfbb0d6e6c77f24b7f08b4c41b230ee9a"}, "downloads": -1, "filename": "diamondback-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ca156d6c84260504744243a06d1a6fcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.5", "size": 72975, "upload_time": "2019-10-23T18:20:53", "upload_time_iso_8601": "2019-10-23T18:20:53.723130Z", "url": "https://files.pythonhosted.org/packages/74/70/8cc74c070ca0e8791626261ee1dc684ca40150e17aabe7d346c7b4a3368f/diamondback-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfdfecd1479a30c8118247b98c469f1e", "sha256": "77241b87ad505f677a0af560bd50111e550dc7bc44c7ca61429275b8a6e728bc"}, "downloads": -1, "filename": "diamondback-1.0.7.tar.gz", "has_sig": false, "md5_digest": "bfdfecd1479a30c8118247b98c469f1e", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 43223, "upload_time": "2019-10-23T18:20:55", "upload_time_iso_8601": "2019-10-23T18:20:55.742719Z", "url": "https://files.pythonhosted.org/packages/a8/d1/87cfd0d2cc37b39476449f4db739365cd0a41cd0ce03fed94aafdd8d3141/diamondback-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "dfe98319d4d787232fbb31cc19d99b0e", "sha256": "0daa2c152374aa7d954e6cded0d26b40458f314d06ec2f76e6a84527c8721261"}, "downloads": -1, "filename": "diamondback-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "dfe98319d4d787232fbb31cc19d99b0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.5", "size": 72958, "upload_time": "2020-01-09T20:04:21", "upload_time_iso_8601": "2020-01-09T20:04:21.218911Z", "url": "https://files.pythonhosted.org/packages/22/d5/ddb203f89275968c6b7c58e2e4e75b4ad82248aec5bc376af07d0ca7d296/diamondback-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b001b1401337a39902f2931560dd344", "sha256": "d8227f91a0ff329556a439c5ae546ff51fc52c4dfacbba6a4ce22408c7cf5172"}, "downloads": -1, "filename": "diamondback-1.0.8.tar.gz", "has_sig": false, "md5_digest": "2b001b1401337a39902f2931560dd344", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 43231, "upload_time": "2020-01-09T20:04:22", "upload_time_iso_8601": "2020-01-09T20:04:22.803868Z", "url": "https://files.pythonhosted.org/packages/42/61/5941e8c1555e7427ea1b0b29377b59fe8da7a058b4111922022b55203940/diamondback-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "2e92dff4a504c40015fc16cb8bbdc85e", "sha256": "026005254f301aebd887e8674733f93e942be85633e83790483d60745ce163c2"}, "downloads": -1, "filename": "diamondback-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2e92dff4a504c40015fc16cb8bbdc85e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.5", "size": 72961, "upload_time": "2020-01-13T21:18:35", "upload_time_iso_8601": "2020-01-13T21:18:35.421636Z", "url": "https://files.pythonhosted.org/packages/f7/1e/81bdc2f64ea3ffec6b0df76b8acc56174b83c3e0bf9d145d997c38d8d24e/diamondback-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10857d9bfd3cd5256e2814e6f8a6d909", "sha256": "65610f0828b30c350d3b5ca99494f7582f9f313349f0be0079bbefcacddd9e43"}, "downloads": -1, "filename": "diamondback-1.0.9.tar.gz", "has_sig": false, "md5_digest": "10857d9bfd3cd5256e2814e6f8a6d909", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 45400, "upload_time": "2020-01-13T21:18:37", "upload_time_iso_8601": "2020-01-13T21:18:37.501765Z", "url": "https://files.pythonhosted.org/packages/ca/c6/c9251006fc2b8afa175c60970ddde37d6414d77510a78905519dff6f7c9f/diamondback-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "667a536c457c19bae2bb2066a924998b", "sha256": "05b0129b277bc17d6cf269d3522e0285018507ec1d714832a1a553c58484e0c7"}, "downloads": -1, "filename": "diamondback-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "667a536c457c19bae2bb2066a924998b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.5", "size": 72972, "upload_time": "2020-04-08T17:14:33", "upload_time_iso_8601": "2020-04-08T17:14:33.721704Z", "url": "https://files.pythonhosted.org/packages/29/4b/0efc074bf21370ab8e9a655312df07cc2cfb2f7140d88d55374da2507063/diamondback-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11fc1e54539da7ec1e2a90eaaceae3a4", "sha256": "b536e9a7528f38ada5a7c61587fc9c30e736448ce5f6672a2b104922bd13a0b1"}, "downloads": -1, "filename": "diamondback-1.0.10.tar.gz", "has_sig": false, "md5_digest": "11fc1e54539da7ec1e2a90eaaceae3a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 45412, "upload_time": "2020-04-08T17:14:34", "upload_time_iso_8601": "2020-04-08T17:14:34.797539Z", "url": "https://files.pythonhosted.org/packages/fc/70/32a144209674599ae893ad3e78dcd67f6e3167a468d21120491fdfa8834d/diamondback-1.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:36 2020"}