{"info": {"author": "Jarry Shaw", "author_email": "jarryshaw@icloud.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Utilities"], "description": "# poseur\n\n[![PyPI - Downloads](https://pepy.tech/badge/poseur)](https://pepy.tech/count/poseur)\n[![PyPI - Version](https://img.shields.io/pypi/v/poseur.svg)](https://pypi.org/project/poseur)\n[![PyPI - Format](https://img.shields.io/pypi/format/poseur.svg)](https://pypi.org/project/poseur)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/poseur.svg)](https://pypi.org/project/poseur)\n\n[![Travis CI - Status](https://travis-ci.com/JarryShaw/poseur.svg)](https://travis-ci.org/JarryShaw/poseur)\n[![Codecov - Coverage](https://codecov.io/gh/JarryShaw/poseur/branch/master/graph/badge.svg)](https://codecov.io/gh/JarryShaw/poseur)\n![License](https://img.shields.io/github/license/jarryshaw/poseur.svg)\n[![LICENSE](https://img.shields.io/badge/license-Anti%20996-blue.svg)](https://github.com/996icu/996.ICU/blob/master/LICENSE)\n\n > Write *positional-only parameters* in Python 3.8 flavour, and let `poseur` worry about back-port issues :beer:\n\n&emsp; Since [PEP 570](https://www.python.org/dev/peps/pep-0570/), Python introduced *positional-only parameters*\nsyntax in version __3.8__. For those who wish to use *positional-only parameters* in their code, `poseur` provides an\nintelligent, yet imperfect, solution of a **backport compiler** by removing *positional-only parameters* syntax whilst\nintroducing a *decorator* for runtime checks, which guarantees you to always write *positional-only parameters* in Python\n3.8 flavour then compile for compatibility later.\n\n## Installation\n\n> Note that `poseur` only supports Python versions __since 3.3__ \ud83d\udc0d\n\n&emsp; For macOS users, `poseur` is now available through [Homebrew](https://brew.sh):\n\n```sh\nbrew tap jarryshaw/tap\nbrew install poseur\n# or simply, a one-liner\nbrew install jarryshaw/tap/poseur\n```\n\n&emsp; Simply run the following to install the current version from PyPI:\n\n```sh\npip install poseur\n```\n\n&emsp; Or install the latest version from the git repository:\n\n```sh\ngit clone https://github.com/JarryShaw/poseur.git\ncd poseur\npip install -e .\n# and to update at any time\ngit pull\n```\n\n## Basic Usage\n\n### CLI\n\n&emsp; It is fairly straightforward to use `poseur`:\n\n > context in `${...}` changes dynamically according to runtime environment\n\n```man\nusage: poseur [options] <python source files and folders...>\n\nBack-port compiler for Python 3.8 positional-only parameters.\n\npositional arguments:\n  SOURCE                python source files and folders to be converted (${CWD})\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -q, --quiet           run in quiet mode\n\narchive options:\n  duplicate original files in case there's any issue\n\n  -n, --no-archive      do not archive original files\n  -p PATH, --archive-path PATH\n                        path to archive original files (${CWD}/archive)\n\nconvert options:\n  compatibility configuration for none-unicode files\n\n  -c CODING, --encoding CODING\n                        encoding to open source files (${LOCALE_ENCODING})\n  -v VERSION, --python VERSION\n                        convert against Python version (${LATEST_VERSION})\n  -s SEP, --linesep SEP\n                        line separator to process source files (${OS_LINESEP})\n  -d, --dismiss         dismiss runtime checks for positional-only parameters\n  -nl, --no-linting     do not lint converted codes\n  -r VAR, --decorator VAR\n                        name of decorator for runtime checks (${DECORATOR})\n\n```\n\n&emsp; `poseur` will read then convert all *positional-only parameters* syntax in every Python\nfile under this path. In case there might be some problems with the conversion, `poseur` will\nduplicate all original files it is to modify into `archive` directory ahead of the process,\nif `-n` not set.\n\n&emsp; Besides, to keep consistency of API to users, `poseur` ships with a *decorator* for\nsuch functions to check positional-only parameters at runtime, if `-nl` not set.\n\n## Developer Reference\n\n### Environments\n\n`poseur` currently supports three environment arguments:\n\n- `POSEUR_QUIET` -- run in quiet mode (same as `--quiet` option in CLI)\n- `POSEUR_VERSION` -- convert against Python version (same as `--python` option in CLI)\n- `POSEUR_ENCODING` -- encoding to open source files (same as `--encoding` option in CLI)\n- `POSEUR_LINESEP` -- line separator to process source files (same as `--linesep` option in CLI)\n- `POSEUR_DISMISS` -- dismiss runtime checks for positional-only arguments (same as `--dismiss` option in CLI)\n- `POSEUR_LINTING` -- lint converted codes (same as `--linting` option in CLI)\n- `POSEUR_DECORATOR` -- name of decorator for runtime checks (same as `--decorator` option in CLI)\n\n### APIs\n\n#### `poseur` -- wrapper works for conversion\n\n```python\nposeur(filename)\n```\n\nArgs:\n\n- `filename` -- `str`, file to be converted\n\nEnvs:\n\n- `POSEUR_QUIET` -- run in quiet mode (same as `--quiet` option in CLI)\n- `POSEUR_ENCODING` -- encoding to open source files (same as `--encoding` option in CLI)\n- `POSEUR_VERSION`-- convert against Python version (same as `--python` option in CLI)\n- `POSEUR_LINESEP` -- line separator to process source files (same as `--linesep` option in CLI)\n- `POSEUR_DISMISS` -- dismiss runtime checks for positional-only arguments (same as `--dismiss` option in CLI)\n- `POSEUR_LINTING` -- lint converted codes (same as `--linting` option in CLI)\n- `POSEUR_DECORATOR` -- name of decorator for runtime checks (same as `--decorator` option in CLI)\n\nRaises:\n\n- `ConvertError `-- when `parso.ParserSyntaxError` raised\n\n#### `convert` -- the main conversion process\n\n```python\nconvert(string, source='<unknown>')\n```\n\nArgs:\n\n- `string` -- `str`, context to be converted\n- `source` -- `str`, source of the context\n\nEnvs:\n\n- `POSEUR_VERSION`-- convert against Python version (same as `--python` option in CLI)\n- `POSEUR_LINESEP` -- line separator to process source files (same as `--linesep` option in CLI)\n- `POSEUR_DISMISS` -- dismiss runtime checks for positional-only arguments (same as `--dismiss` option in CLI)\n- `POSEUR_LINTING` -- lint converted codes (same as `--linting` option in CLI)\n- `POSEUR_DECORATOR` -- name of decorator for runtime checks (same as `--decorator` option in CLI)\n\nReturns:\n\n- `str` -- converted string\n\nRaises:\n\n- `ConvertError `-- when `parso.ParserSyntaxError` raised\n\n#### `ConvertError` -- `poseur` internal exception\n\n```python\nclass ConvertError(SyntaxError):\n    pass\n```\n\n## Test\n\n&emsp; See [`test.py`](https://github.com/JarryShaw/poseur/blob/master/scripts/test.py).\n\n## Contribution\n\n&emsp; Contributions are very welcome, especially fixing bugs and providing test cases.\nNote that code must remain valid and reasonable.\n\n## See Also\n\n- [`babel`](https://github.com/jarryshaw/babel)\n- [`f2format`](https://github.com/jarryshaw/f2format)\n- [`walrus`](https://github.com/jarryshaw/walrus)\n- [`vermin`](https://github.com/netromdk/vermin)\n\n\n", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JarryShaw/poseur", "keywords": "positional-only parameters,back-port compiler", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "poseur-converter", "package_url": "https://pypi.org/project/poseur-converter/", "platform": "", "project_url": "https://pypi.org/project/poseur-converter/", "project_urls": {"Homepage": "https://github.com/JarryShaw/poseur"}, "release_url": "https://pypi.org/project/poseur-converter/0.3.4/", "requires_dist": ["parso (~=0.5.0)", "tbtrim (>=0.2.1)"], "requires_python": ">=3.3", "summary": "Back-port compiler for Python 3.8 positional-only parameter syntax.", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>poseur</h1>\n<p><a href=\"https://pepy.tech/count/poseur\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06d9a01fff8287d5f5e97530e421a665fb37de27/68747470733a2f2f706570792e746563682f62616467652f706f73657572\"></a>\n<a href=\"https://pypi.org/project/poseur\" rel=\"nofollow\"><img alt=\"PyPI - Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24b9ed4eae4e2cbf32ca03290e4ebf5d86098d3b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706f736575722e737667\"></a>\n<a href=\"https://pypi.org/project/poseur\" rel=\"nofollow\"><img alt=\"PyPI - Format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c442a50cbe4235998b292f1bb0acee8370de830/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f706f736575722e737667\"></a>\n<a href=\"https://pypi.org/project/poseur\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76da3e5448fbb2083e7a7e21b9218b7d7803f57e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f706f736575722e737667\"></a></p>\n<p><a href=\"https://travis-ci.org/JarryShaw/poseur\" rel=\"nofollow\"><img alt=\"Travis CI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b407a6282b88376626c77fda4d4ad7d909923c38/68747470733a2f2f7472617669732d63692e636f6d2f4a61727279536861772f706f736575722e737667\"></a>\n<a href=\"https://codecov.io/gh/JarryShaw/poseur\" rel=\"nofollow\"><img alt=\"Codecov - Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0af7f58b5945e859cd260f05554014677fdc4f2/68747470733a2f2f636f6465636f762e696f2f67682f4a61727279536861772f706f736575722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/924fc41e4d2efe46183dcefdd88a71d87f56f5bb/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a61727279736861772f706f736575722e737667\">\n<a href=\"https://github.com/996icu/996.ICU/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"LICENSE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/497459f5647e21d9f1011ef127da39a0f90d936f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d416e74692532303939362d626c75652e737667\"></a></p>\n<blockquote>\n<p>Write <em>positional-only parameters</em> in Python 3.8 flavour, and let <code>poseur</code> worry about back-port issues :beer:</p>\n</blockquote>\n<p>\u2003 Since <a href=\"https://www.python.org/dev/peps/pep-0570/\" rel=\"nofollow\">PEP 570</a>, Python introduced <em>positional-only parameters</em>\nsyntax in version <strong>3.8</strong>. For those who wish to use <em>positional-only parameters</em> in their code, <code>poseur</code> provides an\nintelligent, yet imperfect, solution of a <strong>backport compiler</strong> by removing <em>positional-only parameters</em> syntax whilst\nintroducing a <em>decorator</em> for runtime checks, which guarantees you to always write <em>positional-only parameters</em> in Python\n3.8 flavour then compile for compatibility later.</p>\n<h2>Installation</h2>\n<blockquote>\n<p>Note that <code>poseur</code> only supports Python versions <strong>since 3.3</strong> \ud83d\udc0d</p>\n</blockquote>\n<p>\u2003 For macOS users, <code>poseur</code> is now available through <a href=\"https://brew.sh\" rel=\"nofollow\">Homebrew</a>:</p>\n<pre>brew tap jarryshaw/tap\nbrew install poseur\n<span class=\"c1\"># or simply, a one-liner</span>\nbrew install jarryshaw/tap/poseur\n</pre>\n<p>\u2003 Simply run the following to install the current version from PyPI:</p>\n<pre>pip install poseur\n</pre>\n<p>\u2003 Or install the latest version from the git repository:</p>\n<pre>git clone https://github.com/JarryShaw/poseur.git\n<span class=\"nb\">cd</span> poseur\npip install -e .\n<span class=\"c1\"># and to update at any time</span>\ngit pull\n</pre>\n<h2>Basic Usage</h2>\n<h3>CLI</h3>\n<p>\u2003 It is fairly straightforward to use <code>poseur</code>:</p>\n<blockquote>\n<p>context in <code>${...}</code> changes dynamically according to runtime environment</p>\n</blockquote>\n<pre>usage: poseur [options] &lt;python source files and folders...&gt;\n\nBack-port compiler for Python 3.8 positional-only parameters.\n\npositional arguments:\n  SOURCE                python source files and folders to be converted (${CWD})\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -q, --quiet           run in quiet mode\n\narchive options:\n  duplicate original files in case there's any issue\n\n  -n, --no-archive      do not archive original files\n  -p PATH, --archive-path PATH\n                        path to archive original files (${CWD}/archive)\n\nconvert options:\n  compatibility configuration for none-unicode files\n\n  -c CODING, --encoding CODING\n                        encoding to open source files (${LOCALE_ENCODING})\n  -v VERSION, --python VERSION\n                        convert against Python version (${LATEST_VERSION})\n  -s SEP, --linesep SEP\n                        line separator to process source files (${OS_LINESEP})\n  -d, --dismiss         dismiss runtime checks for positional-only parameters\n  -nl, --no-linting     do not lint converted codes\n  -r VAR, --decorator VAR\n                        name of decorator for runtime checks (${DECORATOR})\n</pre>\n<p>\u2003 <code>poseur</code> will read then convert all <em>positional-only parameters</em> syntax in every Python\nfile under this path. In case there might be some problems with the conversion, <code>poseur</code> will\nduplicate all original files it is to modify into <code>archive</code> directory ahead of the process,\nif <code>-n</code> not set.</p>\n<p>\u2003 Besides, to keep consistency of API to users, <code>poseur</code> ships with a <em>decorator</em> for\nsuch functions to check positional-only parameters at runtime, if <code>-nl</code> not set.</p>\n<h2>Developer Reference</h2>\n<h3>Environments</h3>\n<p><code>poseur</code> currently supports three environment arguments:</p>\n<ul>\n<li><code>POSEUR_QUIET</code> -- run in quiet mode (same as <code>--quiet</code> option in CLI)</li>\n<li><code>POSEUR_VERSION</code> -- convert against Python version (same as <code>--python</code> option in CLI)</li>\n<li><code>POSEUR_ENCODING</code> -- encoding to open source files (same as <code>--encoding</code> option in CLI)</li>\n<li><code>POSEUR_LINESEP</code> -- line separator to process source files (same as <code>--linesep</code> option in CLI)</li>\n<li><code>POSEUR_DISMISS</code> -- dismiss runtime checks for positional-only arguments (same as <code>--dismiss</code> option in CLI)</li>\n<li><code>POSEUR_LINTING</code> -- lint converted codes (same as <code>--linting</code> option in CLI)</li>\n<li><code>POSEUR_DECORATOR</code> -- name of decorator for runtime checks (same as <code>--decorator</code> option in CLI)</li>\n</ul>\n<h3>APIs</h3>\n<h4><code>poseur</code> -- wrapper works for conversion</h4>\n<pre><span class=\"n\">poseur</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><code>filename</code> -- <code>str</code>, file to be converted</li>\n</ul>\n<p>Envs:</p>\n<ul>\n<li><code>POSEUR_QUIET</code> -- run in quiet mode (same as <code>--quiet</code> option in CLI)</li>\n<li><code>POSEUR_ENCODING</code> -- encoding to open source files (same as <code>--encoding</code> option in CLI)</li>\n<li><code>POSEUR_VERSION</code>-- convert against Python version (same as <code>--python</code> option in CLI)</li>\n<li><code>POSEUR_LINESEP</code> -- line separator to process source files (same as <code>--linesep</code> option in CLI)</li>\n<li><code>POSEUR_DISMISS</code> -- dismiss runtime checks for positional-only arguments (same as <code>--dismiss</code> option in CLI)</li>\n<li><code>POSEUR_LINTING</code> -- lint converted codes (same as <code>--linting</code> option in CLI)</li>\n<li><code>POSEUR_DECORATOR</code> -- name of decorator for runtime checks (same as <code>--decorator</code> option in CLI)</li>\n</ul>\n<p>Raises:</p>\n<ul>\n<li><code>ConvertError</code>-- when <code>parso.ParserSyntaxError</code> raised</li>\n</ul>\n<h4><code>convert</code> -- the main conversion process</h4>\n<pre><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'&lt;unknown&gt;'</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><code>string</code> -- <code>str</code>, context to be converted</li>\n<li><code>source</code> -- <code>str</code>, source of the context</li>\n</ul>\n<p>Envs:</p>\n<ul>\n<li><code>POSEUR_VERSION</code>-- convert against Python version (same as <code>--python</code> option in CLI)</li>\n<li><code>POSEUR_LINESEP</code> -- line separator to process source files (same as <code>--linesep</code> option in CLI)</li>\n<li><code>POSEUR_DISMISS</code> -- dismiss runtime checks for positional-only arguments (same as <code>--dismiss</code> option in CLI)</li>\n<li><code>POSEUR_LINTING</code> -- lint converted codes (same as <code>--linting</code> option in CLI)</li>\n<li><code>POSEUR_DECORATOR</code> -- name of decorator for runtime checks (same as <code>--decorator</code> option in CLI)</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li><code>str</code> -- converted string</li>\n</ul>\n<p>Raises:</p>\n<ul>\n<li><code>ConvertError</code>-- when <code>parso.ParserSyntaxError</code> raised</li>\n</ul>\n<h4><code>ConvertError</code> -- <code>poseur</code> internal exception</h4>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ConvertError</span><span class=\"p\">(</span><span class=\"ne\">SyntaxError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Test</h2>\n<p>\u2003 See <a href=\"https://github.com/JarryShaw/poseur/blob/master/scripts/test.py\" rel=\"nofollow\"><code>test.py</code></a>.</p>\n<h2>Contribution</h2>\n<p>\u2003 Contributions are very welcome, especially fixing bugs and providing test cases.\nNote that code must remain valid and reasonable.</p>\n<h2>See Also</h2>\n<ul>\n<li><a href=\"https://github.com/jarryshaw/babel\" rel=\"nofollow\"><code>babel</code></a></li>\n<li><a href=\"https://github.com/jarryshaw/f2format\" rel=\"nofollow\"><code>f2format</code></a></li>\n<li><a href=\"https://github.com/jarryshaw/walrus\" rel=\"nofollow\"><code>walrus</code></a></li>\n<li><a href=\"https://github.com/netromdk/vermin\" rel=\"nofollow\"><code>vermin</code></a></li>\n</ul>\n\n          </div>"}, "last_serial": 6167219, "releases": {"0.3.4": [{"comment_text": "", "digests": {"md5": "cd58c2c4fecad1181531f471cd520942", "sha256": "9aa95d38ab8153843c811e8ee259b418976c8845302da8239d99c0088d514ee6"}, "downloads": -1, "filename": "poseur_converter-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cd58c2c4fecad1181531f471cd520942", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 11158, "upload_time": "2019-11-20T06:53:23", "upload_time_iso_8601": "2019-11-20T06:53:23.311465Z", "url": "https://files.pythonhosted.org/packages/39/86/4d4944d82865d1fb43bd31049e98a3e54d520fd24fdd3e299538d7a715c3/poseur_converter-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c1ff1425bcc314a62f7b682ccb315a8", "sha256": "babfb29c344325c1b502debb59e1193fdb1ecda019fde8dae8afb6ad9aabe7ae"}, "downloads": -1, "filename": "poseur-converter-0.3.4.tar.gz", "has_sig": false, "md5_digest": "1c1ff1425bcc314a62f7b682ccb315a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 13400, "upload_time": "2019-11-20T06:53:25", "upload_time_iso_8601": "2019-11-20T06:53:25.272112Z", "url": "https://files.pythonhosted.org/packages/34/f5/c386826b142d17cf1275bee41111cbbdc189ea68c19410ff5e67418a35f0/poseur-converter-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd58c2c4fecad1181531f471cd520942", "sha256": "9aa95d38ab8153843c811e8ee259b418976c8845302da8239d99c0088d514ee6"}, "downloads": -1, "filename": "poseur_converter-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cd58c2c4fecad1181531f471cd520942", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 11158, "upload_time": "2019-11-20T06:53:23", "upload_time_iso_8601": "2019-11-20T06:53:23.311465Z", "url": "https://files.pythonhosted.org/packages/39/86/4d4944d82865d1fb43bd31049e98a3e54d520fd24fdd3e299538d7a715c3/poseur_converter-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c1ff1425bcc314a62f7b682ccb315a8", "sha256": "babfb29c344325c1b502debb59e1193fdb1ecda019fde8dae8afb6ad9aabe7ae"}, "downloads": -1, "filename": "poseur-converter-0.3.4.tar.gz", "has_sig": false, "md5_digest": "1c1ff1425bcc314a62f7b682ccb315a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 13400, "upload_time": "2019-11-20T06:53:25", "upload_time_iso_8601": "2019-11-20T06:53:25.272112Z", "url": "https://files.pythonhosted.org/packages/34/f5/c386826b142d17cf1275bee41111cbbdc189ea68c19410ff5e67418a35f0/poseur-converter-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:51:24 2020"}