{"info": {"author": "Box", "author_email": "oss@box.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: OS Independent", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n<!-- This file is auto generated. Do not edit it. Any modifications will be -->\n<!-- overwritten next time documentation is generated. The source for this file -->\n<!-- resides in <repo_root>/doc/sphinx directory. Modify there and execute -->\n<!-- `make all` in that directory. -->\n\n# wavectl\n\n[![CircleCI](https://circleci.com/gh/box/wavectl.svg?style=svg)](https://circleci.com/gh/box/wavectl) [![Project Status](http://opensource.box.com/badges/active.svg)](http://opensource.box.com/badges)\n\nA command line client for [Wavefront](https://www.wavefront.com) inspired by [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) and [git](https://git-scm.com/docs) command line tools.\n\n## Example Commands\n\nA short list of common usages. For more details [Use Cases](#example-use-cases) section.\n\n### Show one line summaries for Wavefront alerts\n\n``` \n  $ wavectl show alert\n  ID               NAME                                                                                     STATUS                              SEVERITY    \n  1523082347619    Kubernetes - Node Network Utilization - HIGH (Prod)                                      CHECKING                            WARN      \n  1523082347824    Kubernetes - Node Cpu Utilization - HIGH (Prod)                                          CHECKING                            WARN      \n  1523082348005    Kubernetes - Node Memory Swap Utilization - HIGH (Prod)                                  SNOOZED                             WARN      \n  ...\n```\n\n### Show json state of alerts\n\n``` \n  $ wavectl show -o json alert\n  {\n      \"additionalInformation\": \"This alert tracks the used network bandwidth percentage for all the compute-* (compute-master and compute-node) machines. If the cpu utilization exceeds 80%, this alert fires.\",\n      \"condition\": \"ts(proc.net.percent,server_type=\\\"compute-*\\\" and env=\\\"live\\\") > 80\",\n      \"displayExpression\": \"ts(proc.net.percent,server_type=\\\"compute-*\\\" and env=\\\"live\\\")\",\n      \"id\": \"1523082347619\",\n      \"minutes\": 2,\n      \"name\": \"Kubernetes - Node Network Utilization - HIGH (Prod)\",\n      \"resolveAfterMinutes\": 2,\n      \"severity\": \"WARN\",\n      \"tags\": {\n          \"customerTags\": [\n              \"kubernetes\",\n              \"skynet\"\n          ]\n      },\n      \"target\": \"pd: 05fe8ebacf8c44e881ea2f6e44dbf2d2\"\n  }\n  {\n      \"additionalInformation\": \"This alert tracks the used cpu percentage for all the compute-* (compute-master and compute-node) machines. If the cpu utilization exceeds 80%, this alert fires.\",\n  ...\n```\n\n### Modify a dashboard's json and write it back to Wavefront\n\n``` \n  $> vim ./metadata-dashboard.json    # Modify the json state of a dashboard\n  $> wavectl push ./metadata-dashboard.json  dashboard  # Write the new version to Wavefront\n\n  Replaced dashboard(s):\n  ID              NAME            DESCRIPTION                                \n  metadata-php    Metadata PHP    Monitors for Metadata in the PHP webapp\n```\n\n## Example Use Cases\n\n  - [Command line operations on your alerts, dashboards](doc/CommandLine.md)\n\n  - [Advanced grep in your alerts and dashboards](doc/AdvancedGrep.md)\n\n  - [Launch Wavefront GUI via `wavectl`](doc/BrowserIntegration.md)\n\n  - [Repetitive editing of alerts, dashboards](doc/RepetitiveEditing.md)\n\n  - [Git integration](doc/GitIntegration.md)\n\n  - [Easy configuration of `wavectl`](doc/WavectlConfig.md)\n\n## [Command Reference](doc/CommandReference.md)\n\n## Installation\n\n``` \n   pip install wavectl\n```\n\n## A note about Performance\n\n`wavectl`'s execution time depends on the number of alerts or dashboards you have in Wavefront. All [resource filtering](doc/CommandReference.md#resource-options) except the `--customerTag, -t` option is done on the client side. This enables the powerful regular expression matching on your results. But if your organization has thousands of alerts and dashboards, the data size may overwhelm the `wavectl` execution time.\n\nIf your organization has a lot of alerts and dashboards in Wavefront we strongly recommend to use `--customerTag` option in your commands. The filtering based on customerTag is done on the Wavefront server side. With `--customerTags` option, wavectl client will only receive data about alerts/dashboards if they are tagged with all of the specified tags. This reduces the data size processed by wavectl and results in faster execution.\n\n## Notes\n\nIf you could not find what you were looking for please consider [contributing](CONTRIBUTING.md). You could also take a look at [another](https://github.com/wavefrontHQ/ruby-client/blob/master/README-cli.md) CLI implementation for Wavefront. That one is written by Wavefront and mirrors their web api more closely. This `wavectl` CLI has evolved from our use cases.\n\n`wavectl` is designed to add automation, command line access to Wavefront data that is **human generated**. Initial examples are alerts and dashboards. We see those as more permanent, slow changing state in Wavefront. `wavectl` is not optimized to read, write time series data to Wavefront or any other data that is ingested by Wavefront at real time production workload scale.\n\n## Support\n\nNeed to contact us directly? Email oss@box.com and be sure to include the name of this project in the subject.\n\n## Copyright and License\n\nCopyright 2018 Box, Inc. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n``` \n  http://www.apache.org/licenses/LICENSE-2.0\n```\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/box/wavectl", "keywords": "Wavefront", "license": "Apache Software License, Version 2.0, http://www.apache.org/licenses/LICENSE-2.0", "maintainer": "", "maintainer_email": "", "name": "wavectl", "package_url": "https://pypi.org/project/wavectl/", "platform": "", "project_url": "https://pypi.org/project/wavectl/", "project_urls": {"Homepage": "https://github.com/box/wavectl"}, "release_url": "https://pypi.org/project/wavectl/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Command Line Client For Wavefront", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <br>&lt;!-- This file is auto generated. Do not edit it. Any modifications will be --&gt;<br>&lt;!-- overwritten next time documentation is generated. The source for this file --&gt;<br>&lt;!-- resides in &lt;repo_root&gt;/doc/sphinx directory. Modify there and execute --&gt;<br>&lt;!-- `make all` in that directory. --&gt;<br><br># wavectl<br><br>[![CircleCI](https://circleci.com/gh/box/wavectl.svg?style=svg)](https://circleci.com/gh/box/wavectl) [![Project Status](http://opensource.box.com/badges/active.svg)](http://opensource.box.com/badges)<br><br>A command line client for [Wavefront](https://www.wavefront.com) inspired by [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) and [git](https://git-scm.com/docs) command line tools.<br><br>## Example Commands<br><br>A short list of common usages. For more details [Use Cases](#example-use-cases) section.<br><br>### Show one line summaries for Wavefront alerts<br><br>``` <br>  $ wavectl show alert<br>  ID               NAME                                                                                     STATUS                              SEVERITY    <br>  1523082347619    Kubernetes - Node Network Utilization - HIGH (Prod)                                      CHECKING                            WARN      <br>  1523082347824    Kubernetes - Node Cpu Utilization - HIGH (Prod)                                          CHECKING                            WARN      <br>  1523082348005    Kubernetes - Node Memory Swap Utilization - HIGH (Prod)                                  SNOOZED                             WARN      <br>  ...<br>```<br><br>### Show json state of alerts<br><br>``` <br>  $ wavectl show -o json alert<br>  {<br>      \"additionalInformation\": \"This alert tracks the used network bandwidth percentage for all the compute-* (compute-master and compute-node) machines. If the cpu utilization exceeds 80%, this alert fires.\",<br>      \"condition\": \"ts(proc.net.percent,server_type=\\\"compute-*\\\" and env=\\\"live\\\") &gt; 80\",<br>      \"displayExpression\": \"ts(proc.net.percent,server_type=\\\"compute-*\\\" and env=\\\"live\\\")\",<br>      \"id\": \"1523082347619\",<br>      \"minutes\": 2,<br>      \"name\": \"Kubernetes - Node Network Utilization - HIGH (Prod)\",<br>      \"resolveAfterMinutes\": 2,<br>      \"severity\": \"WARN\",<br>      \"tags\": {<br>          \"customerTags\": [<br>              \"kubernetes\",<br>              \"skynet\"<br>          ]<br>      },<br>      \"target\": \"pd: 05fe8ebacf8c44e881ea2f6e44dbf2d2\"<br>  }<br>  {<br>      \"additionalInformation\": \"This alert tracks the used cpu percentage for all the compute-* (compute-master and compute-node) machines. If the cpu utilization exceeds 80%, this alert fires.\",<br>  ...<br>```<br><br>### Modify a dashboard's json and write it back to Wavefront<br><br>``` <br>  $&gt; vim ./metadata-dashboard.json    # Modify the json state of a dashboard<br>  $&gt; wavectl push ./metadata-dashboard.json  dashboard  # Write the new version to Wavefront<br><br>  Replaced dashboard(s):<br>  ID              NAME            DESCRIPTION                                <br>  metadata-php    Metadata PHP    Monitors for Metadata in the PHP webapp<br>```<br><br>## Example Use Cases<br><br>  - [Command line operations on your alerts, dashboards](doc/CommandLine.md)<br><br>  - [Advanced grep in your alerts and dashboards](doc/AdvancedGrep.md)<br><br>  - [Launch Wavefront GUI via `wavectl`](doc/BrowserIntegration.md)<br><br>  - [Repetitive editing of alerts, dashboards](doc/RepetitiveEditing.md)<br><br>  - [Git integration](doc/GitIntegration.md)<br><br>  - [Easy configuration of `wavectl`](doc/WavectlConfig.md)<br><br>## [Command Reference](doc/CommandReference.md)<br><br>## Installation<br><br>``` <br>   pip install wavectl<br>```<br><br>## A note about Performance<br><br>`wavectl`'s execution time depends on the number of alerts or dashboards you have in Wavefront. All [resource filtering](doc/CommandReference.md#resource-options) except the `--customerTag, -t` option is done on the client side. This enables the powerful regular expression matching on your results. But if your organization has thousands of alerts and dashboards, the data size may overwhelm the `wavectl` execution time.<br><br>If your organization has a lot of alerts and dashboards in Wavefront we strongly recommend to use `--customerTag` option in your commands. The filtering based on customerTag is done on the Wavefront server side. With `--customerTags` option, wavectl client will only receive data about alerts/dashboards if they are tagged with all of the specified tags. This reduces the data size processed by wavectl and results in faster execution.<br><br>## Notes<br><br>If you could not find what you were looking for please consider [contributing](CONTRIBUTING.md). You could also take a look at [another](https://github.com/wavefrontHQ/ruby-client/blob/master/README-cli.md) CLI implementation for Wavefront. That one is written by Wavefront and mirrors their web api more closely. This `wavectl` CLI has evolved from our use cases.<br><br>`wavectl` is designed to add automation, command line access to Wavefront data that is **human generated**. Initial examples are alerts and dashboards. We see those as more permanent, slow changing state in Wavefront. `wavectl` is not optimized to read, write time series data to Wavefront or any other data that is ingested by Wavefront at real time production workload scale.<br><br>## Support<br><br>Need to contact us directly? Email oss@box.com and be sure to include the name of this project in the subject.<br><br>## Copyright and License<br><br>Copyright 2018 Box, Inc. All rights reserved.<br><br>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at<br><br>``` <br>  http://www.apache.org/licenses/LICENSE-2.0<br>```<br><br>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.<br>\n          </div>"}, "last_serial": 3941977, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "887ea8b736409e661a15c56e1558245d", "sha256": "8723680a7826c9c957323a89b537ff4fd9c1dee4e2312737b33194c90289c1d6"}, "downloads": -1, "filename": "wavectl-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "887ea8b736409e661a15c56e1558245d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 1049, "upload_time": "2018-05-24T06:48:37", "upload_time_iso_8601": "2018-05-24T06:48:37.641216Z", "url": "https://files.pythonhosted.org/packages/0e/4e/d69bcc34e96092b4aa237ab65f03528ac8938ba1fee45952b906a8d73920/wavectl-0.0.1-py2-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ef9e2c6df9560c8a2585cf2b784527e7", "sha256": "25ce1a9148ff9e47ccdfd0cf7ed90f9b054ad2b37c1062273f718f975cef76e0"}, "downloads": -1, "filename": "wavectl-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ef9e2c6df9560c8a2585cf2b784527e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43940, "upload_time": "2018-06-08T06:23:24", "upload_time_iso_8601": "2018-06-08T06:23:24.983199Z", "url": "https://files.pythonhosted.org/packages/36/1b/2694c16798fcb440c99417eca5a475a6f9a6e22454facfd2c40a50c90a8a/wavectl-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef9e2c6df9560c8a2585cf2b784527e7", "sha256": "25ce1a9148ff9e47ccdfd0cf7ed90f9b054ad2b37c1062273f718f975cef76e0"}, "downloads": -1, "filename": "wavectl-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ef9e2c6df9560c8a2585cf2b784527e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43940, "upload_time": "2018-06-08T06:23:24", "upload_time_iso_8601": "2018-06-08T06:23:24.983199Z", "url": "https://files.pythonhosted.org/packages/36/1b/2694c16798fcb440c99417eca5a475a6f9a6e22454facfd2c40a50c90a8a/wavectl-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:59 2020"}