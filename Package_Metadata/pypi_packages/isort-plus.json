{"info": {"author": "Timothy Crosley", "author_email": "timothy.crosley@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": ".. image:: https://raw.github.com/timothycrosley/isort/master/logo.png\n    :alt: isort\n\n########\n\n.. image:: https://badge.fury.io/py/isort.svg\n    :target: https://badge.fury.io/py/isort\n    :alt: PyPI version\n\n.. image:: https://travis-ci.org/timothycrosley/isort.svg?branch=master\n    :target: https://travis-ci.org/timothycrosley/isort\n    :alt: Build Status\n\n\n.. image:: https://coveralls.io/repos/timothycrosley/isort/badge.svg?branch=release%2F2.6.0&service=github\n  :target: https://coveralls.io/github/timothycrosley/isort?branch=release%2F2.6.0\n  :alt: Coverage\n\n.. image:: https://img.shields.io/github/license/mashape/apistatus.svg\n    :target: https://pypi.org/project/hug/\n    :alt: License\n\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n   :alt: Join the chat at https://gitter.im/timothycrosley/isort\n   :target: https://gitter.im/timothycrosley/isort?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n\nisort your python imports for you so you don't have to.\n\nisort is a Python utility / library to sort imports alphabetically, and automatically separated into sections.\nIt provides a command line utility, Python library and `plugins for various editors <https://github.com/timothycrosley/isort/wiki/isort-Plugins>`_ to quickly sort all your imports.\nIt currently cleanly supports Python 2.7 - 3.6 without any dependencies.\n\n.. image:: https://raw.github.com/timothycrosley/isort/develop/example.gif\n   :alt: Example Usage\n\nBefore isort:\n\n.. code-block:: python\n\n    from my_lib import Object\n\n    print(\"Hey\")\n\n    import os\n\n    from my_lib import Object3\n\n    from my_lib import Object2\n\n    import sys\n\n    from third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14\n\n    import sys\n\n    from __future__ import absolute_import\n\n    from third_party import lib3\n\n    print(\"yo\")\n\nAfter isort:\n\n.. code-block:: python\n\n    from __future__ import absolute_import\n\n    import os\n    import sys\n\n    from third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,\n                             lib9, lib10, lib11, lib12, lib13, lib14, lib15)\n\n    from my_lib import Object, Object2, Object3\n\n    print(\"Hey\")\n    print(\"yo\")\n\nInstalling isort\n================\n\nInstalling isort is as simple as:\n\n.. code-block:: bash\n\n    pip install isort\n\nInstall isort with requirements.txt support:\n\n.. code-block:: bash\n\n    pip install isort[requirements]\n\nInstall isort with Pipfile support:\n\n.. code-block:: bash\n\n    pip install isort[pipfile]\n\nInstall isort with both formats support:\n\n.. code-block:: bash\n\n    pip install isort[requirements,pipfile]\n\nUsing isort\n===========\n\n**From the command line**:\n\n.. code-block:: bash\n\n    isort mypythonfile.py mypythonfile2.py\n\nor recursively:\n\n.. code-block:: bash\n\n    isort -rc .\n\n*which is equivalent to:*\n\n.. code-block:: bash\n\n    isort **/*.py\n\nor to see the proposed changes without applying them:\n\n.. code-block:: bash\n\n    isort mypythonfile.py --diff\n\nFinally, to atomically run isort against a project, only applying changes if they don't introduce syntax errors do:\n\n.. code-block:: bash\n\n    isort -rc --atomic .\n\n(Note: this is disabled by default as it keeps isort from being able to run against code written using a different version of Python)\n\n**From within Python**:\n\n.. code-block:: bash\n\n    from isort import SortImports\n\n    SortImports(\"pythonfile.py\")\n\nor:\n\n.. code-block:: bash\n\n    from isort import SortImports\n\n    new_contents = SortImports(file_contents=old_contents).output\n\n**From within Kate:**\n\n.. code-block:: bash\n\n    ctrl+[\n\nor:\n\n.. code-block:: bash\n\n    menu > Python > Sort Imports\n\nInstalling isort's Kate plugin\n==============================\n\nFor KDE 4.13+ / Pate 2.0+:\n\n.. code-block:: bash\n\n    wget https://raw.github.com/timothycrosley/isort/master/kate_plugin/isort_plugin.py --output-document ~/.kde/share/apps/kate/pate/isort_plugin.py\n    wget https://raw.github.com/timothycrosley/isort/master/kate_plugin/isort_plugin_ui.rc --output-document ~/.kde/share/apps/kate/pate/isort_plugin_ui.rc\n    wget https://raw.github.com/timothycrosley/isort/master/kate_plugin/katepart_isort.desktop --output-document ~/.kde/share/kde4/services/katepart_isort.desktop\n\nFor all older versions:\n\n.. code-block:: bash\n\n    wget https://raw.github.com/timothycrosley/isort/master/kate_plugin/isort_plugin_old.py --output-document ~/.kde/share/apps/kate/pate/isort_plugin.py\n\nYou will then need to restart kate and enable Python Plugins as well as the isort plugin itself.\n\nInstalling isort's for your preferred text editor\n=================================================\n\nSeveral plugins have been written that enable to use isort from within a variety of text-editors.\nYou can find a full list of them `on the isort wiki <https://github.com/timothycrosley/isort/wiki/isort-Plugins>`_.\nAdditionally, I will enthusiastically accept pull requests that include plugins for other text editors\nand add documentation for them as I am notified.\n\nHow does isort work?\n====================\n\nisort parses specified files for global level import lines (imports outside of try / except blocks, functions, etc..)\nand puts them all at the top of the file grouped together by the type of import:\n\n- Future\n- Python Standard Library\n- Third Party\n- Current Python Project\n- Explicitly Local (. before import, as in: ``from . import x``)\n- Custom Separate Sections (Defined by forced_separate list in configuration file)\n- Custom Sections (Defined by sections list in configuration file)\n\nInside of each section the imports are sorted alphabetically. isort automatically removes duplicate python imports,\nand wraps long from imports to the specified line length (defaults to 79).\n\nWhen will isort not work?\n=========================\n\nIf you ever have the situation where you need to have a try / except block in the middle of top-level imports or if\nyour import order is directly linked to precedence.\n\nFor example: a common practice in Django settings files is importing * from various settings files to form\na new settings file. In this case if any of the imports change order you are changing the settings definition itself.\n\nHowever, you can configure isort to skip over just these files - or even to force certain imports to the top.\n\nConfiguring isort\n=================\n\nIf you find the default isort settings do not work well for your project, isort provides several ways to adjust\nthe behavior.\n\nTo configure isort for a single user create a ``~/.isort.cfg`` file:\n\n.. code-block:: ini\n\n    [settings]\n    line_length=120\n    force_to_top=file1.py,file2.py\n    skip=file3.py,file4.py\n    known_future_library=future,pies\n    known_standard_library=std,std2\n    known_third_party=randomthirdparty\n    known_first_party=mylib1,mylib2\n    indent='    '\n    multi_line_output=3\n    length_sort=1\n    forced_separate=django.contrib,django.utils\n    default_section=FIRSTPARTY\n    no_lines_before=LOCALFOLDER\n\nAdditionally, you can specify project level configuration simply by placing a ``.isort.cfg`` file at the root of your\nproject. isort will look up to 25 directories up, from the file it is ran against, to find a project specific configuration.\n\nOr, if you prefer, you can add an isort section to your project's ``setup.cfg`` or ``tox.ini`` file with any desired settings.\n\nYou can then override any of these settings by using command line arguments, or by passing in override values to the\nSortImports class.\n\nFinally, as of version 3.0 isort supports editorconfig files using the standard syntax defined here:\nhttp://editorconfig.org/\n\nMeaning you place any standard isort configuration parameters within a .editorconfig file under the ``*.py`` section\nand they will be honored.\n\nFor a full list of isort settings and their meanings `take a look at the isort wiki <https://github.com/timothycrosley/isort/wiki/isort-Settings>`_.\n\nMulti line output modes\n=======================\n\nYou will notice above the \"multi_line_output\" setting. This setting defines how from imports wrap when they extend\npast the line_length limit and has 6 possible settings:\n\n**0 - Grid**\n\n.. code-block:: python\n\n    from third_party import (lib1, lib2, lib3,\n                             lib4, lib5, ...)\n\n**1 - Vertical**\n\n.. code-block:: python\n\n    from third_party import (lib1,\n                             lib2,\n                             lib3\n                             lib4,\n                             lib5,\n                             ...)\n\n**2 - Hanging Indent**\n\n.. code-block:: python\n\n    from third_party import \\\n        lib1, lib2, lib3, \\\n        lib4, lib5, lib6\n\n**3 - Vertical Hanging Indent**\n\n.. code-block:: python\n\n    from third_party import (\n        lib1,\n        lib2,\n        lib3,\n        lib4,\n    )\n\n**4 - Hanging Grid**\n\n.. code-block:: python\n\n    from third_party import (\n        lib1, lib2, lib3, lib4,\n        lib5, ...)\n\n**5 - Hanging Grid Grouped**\n\n.. code-block:: python\n\n    from third_party import (\n        lib1, lib2, lib3, lib4,\n        lib5, ...\n    )\n\n**6 - NOQA**\n\n.. code-block:: python\n\n    from third_party import lib1, lib2, lib3, ...  # NOQA\n\nAlternatively, you can set ``force_single_line`` to ``True`` (``-sl`` on the command line) and every import will appear on its\nown line:\n\n.. code-block:: python\n\n    from third_party import lib1\n    from third_party import lib2\n    from third_party import lib3\n    ...\n\nNote: to change the how constant indents appear - simply change the indent property with the following accepted formats:\n*   Number of spaces you would like. For example: 4 would cause standard 4 space indentation.\n*   Tab\n*   A verbatim string with quotes around it.\n\nFor example:\n\n.. code-block:: python\n\n    \"    \"\n\nis equivalent to 4.\n\nFor the import styles that use parentheses, you can control whether or not to\ninclude a trailing comma after the last import with the ``include_trailing_comma``\noption (defaults to ``False``).\n\nIntelligently Balanced Multi-line Imports\n=========================================\n\nAs of isort 3.1.0 support for balanced multi-line imports has been added.\nWith this enabled isort will dynamically change the import length to the one that produces the most balanced grid,\nwhile staying below the maximum import length defined.\n\nExample:\n\n.. code-block:: python\n\n    from __future__ import (absolute_import, division,\n                            print_function, unicode_literals)\n\nWill be produced instead of:\n\n.. code-block:: python\n\n    from __future__ import (absolute_import, division, print_function,\n                            unicode_literals)\n\nTo enable this set ``balanced_wrapping`` to ``True`` in your config or pass the ``-e`` option into the command line utility.\n\nCustom Sections and Ordering\n============================\n\nYou can change the section order with ``sections`` option from the default of:\n\n.. code-block:: ini\n\n    FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\n\nto your preference:\n\n.. code-block:: ini\n\n    sections=FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,LOCALFOLDER\n\nYou also can define your own sections and their order.\n\nExample:\n\n.. code-block:: ini\n\n    known_django=django\n    known_pandas=pandas,numpy\n    sections=FUTURE,STDLIB,DJANGO,THIRDPARTY,PANDAS,FIRSTPARTY,LOCALFOLDER\n\nwould create two new sections with the specified known modules.\n\nThe ``no_lines_before`` option will prevent the listed sections from being split from the previous section by an empty line.\n\nExample:\n\n.. code-block:: ini\n\n   sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\n   no_lines_before=LOCALFOLDER\n\nwould produce a section with both FIRSTPARTY and LOCALFOLDER modules combined.\n\nAuto-comment import sections\n============================\n\nSome projects prefer to have import sections uniquely titled to aid in identifying the sections quickly\nwhen visually scanning. isort can automate this as well. To do this simply set the ``import_heading_{section_name}``\nsetting for each section you wish to have auto commented - to the desired comment.\n\nFor Example:\n\n.. code-block:: ini\n\n    import_heading_stdlib=Standard Library\n    import_heading_firstparty=My Stuff\n\nWould lead to output looking like the following:\n\n.. code-block:: python\n\n    # Standard Library\n    import os\n    import sys\n\n    import django.settings\n\n    # My Stuff\n    import myproject.test\n\nOrdering by import length\n=========================\n\nisort also makes it easy to sort your imports by length, simply by setting the ``length_sort`` option to ``True``.\nThis will result in the following output style:\n\n.. code-block:: python\n\n    from evn.util import (\n        Pool,\n        Dict,\n        Options,\n        Constant,\n        DecayDict,\n        UnexpectedCodePath,\n    )\n\nSkip processing of imports (outside of configuration)\n=====================================================\n\nTo make isort ignore a single import simply add a comment at the end of the import line containing the text ``isort:skip``:\n\n.. code-block:: python\n\n    import module  # isort:skip\n\nor:\n\n.. code-block:: python\n\n    from xyz import (abc,  # isort:skip\n                     yo,\n                     hey)\n\nTo make isort skip an entire file simply add ``isort:skip_file`` to the module's doc string:\n\n.. code-block:: python\n\n    \"\"\" my_module.py\n        Best module ever\n\n       isort:skip_file\n    \"\"\"\n\n    import b\n    import a\n\nAdding an import to multiple files\n==================================\n\nisort makes it easy to add an import statement across multiple files, while being assured it's correctly placed.\n\nFrom the command line:\n\n.. code-block:: bash\n\n    isort -a \"from __future__ import print_function\" *.py\n\nfrom within Kate:\n\n.. code-block::\n\n    ctrl+]\n\nor:\n\n.. code-block::\n\n    menu > Python > Add Import\n\nRemoving an import from multiple files\n======================================\n\nisort also makes it easy to remove an import from multiple files, without having to be concerned with how it was originally\nformatted.\n\nFrom the command line:\n\n.. code-block:: bash\n\n    isort -r \"os.system\" *.py\n\nfrom within Kate:\n\n.. code-block::\n\n    ctrl+shift+]\n\nor:\n\n.. code-block::\n\n    menu > Python > Remove Import\n\nUsing isort to verify code\n==========================\n\nThe ``--check-only`` option\n---------------------------\n\nisort can also be used to used to verify that code is correctly formatted by running it with ``-c``.\nAny files that contain incorrectly sorted and/or formatted imports will be outputted to ``stderr``.\n\n.. code-block:: bash\n\n    isort **/*.py -c -vb\n\n    SUCCESS: /home/timothy/Projects/Open_Source/isort/isort_kate_plugin.py Everything Looks Good!\n    ERROR: /home/timothy/Projects/Open_Source/isort/isort/isort.py Imports are incorrectly sorted.\n\nOne great place this can be used is with a pre-commit git hook, such as this one by @acdha:\n\nhttps://gist.github.com/acdha/8717683\n\nThis can help to ensure a certain level of code quality throughout a project.\n\n\nGit hook\n--------\n\nisort provides a hook function that can be integrated into your Git pre-commit script to check\nPython code before committing.\n\nTo cause the commit to fail if there are isort errors (strict mode), include the following in\n``.git/hooks/pre-commit``:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n    import sys\n    from isort.hooks import git_hook\n\n    sys.exit(git_hook(strict=True))\n\nIf you just want to display warnings, but allow the commit to happen anyway, call ``git_hook`` without\nthe `strict` parameter.\n\nSetuptools integration\n----------------------\n\nUpon installation, isort enables a ``setuptools`` command that checks Python files\ndeclared by your project.\n\nRunning ``python setup.py isort`` on the command line will check the files\nlisted in your ``py_modules`` and ``packages``.  If any warning is found,\nthe command will exit with an error code:\n\n.. code-block:: bash\n\n    $ python setup.py isort\n\nAlso, to allow users to be able to use the command without having to install\nisort themselves, add isort to the setup_requires of your ``setup()`` like so:\n\n.. code-block:: python\n\n    setup(\n        name=\"project\",\n        packages=[\"project\"],\n\n        setup_requires=[\n            \"isort\"\n        ]\n    )\n\n\nWhy isort?\n==========\n\nisort simply stands for import sort. It was originally called \"sortImports\" however I got tired of typing the extra\ncharacters and came to the realization camelCase is not pythonic.\n\nI wrote isort because in an organization I used to work in the manager came in one day and decided all code must\nhave alphabetically sorted imports. The code base was huge - and he meant for us to do it by hand. However, being a\nprogrammer - I'm too lazy to spend 8 hours mindlessly performing a function, but not too lazy to spend 16\nhours automating it. I was given permission to open source sortImports and here we are :)\n\n--------------------------------------------\n\nThanks and I hope you find isort useful!\n\n~Timothy Crosley", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/orsinium/isort", "keywords": "Refactor,Python,Python2,Python3,Refactoring,Imports,Sort,Clean", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "isort-plus", "package_url": "https://pypi.org/project/isort-plus/", "platform": "", "project_url": "https://pypi.org/project/isort-plus/", "project_urls": {"Homepage": "https://github.com/orsinium/isort"}, "release_url": "https://pypi.org/project/isort-plus/5.1.3/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "isort fork this requirements.txt and Pipfile support", "version": "5.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"isort\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de1314311bff1e5e011ba3037b2e0ceae82261a7/68747470733a2f2f7261772e6769746875622e636f6d2f74696d6f74687963726f736c65792f69736f72742f6d61737465722f6c6f676f2e706e67\">\n<hr class=\"docutils\">\n<a href=\"https://badge.fury.io/py/isort\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dea84942c05ba8fb18b939375eed2f053931454c/68747470733a2f2f62616467652e667572792e696f2f70792f69736f72742e737667\"></a>\n<a href=\"https://travis-ci.org/timothycrosley/isort\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87dd4b30628a830d069ace04d949b019dcd75b40/68747470733a2f2f7472617669732d63692e6f72672f74696d6f74687963726f736c65792f69736f72742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/timothycrosley/isort?branch=release%2F2.6.0\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2aa4fb4e62e3f23c4deb6303f50aa5c5bada5f3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f74696d6f74687963726f736c65792f69736f72742f62616467652e7376673f6272616e63683d72656c65617365253246322e362e3026736572766963653d676974687562\"></a>\n<a href=\"https://pypi.org/project/hug/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36686084675cebbeff3809cb9d8291b8e6ebd672/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\"></a>\n<a href=\"https://gitter.im/timothycrosley/isort?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/timothycrosley/isort\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/454be82554a06af0fd3393415ef17b59d8550498/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\"></a>\n<p>isort your python imports for you so you don\u2019t have to.</p>\n<p>isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections.\nIt provides a command line utility, Python library and <a href=\"https://github.com/timothycrosley/isort/wiki/isort-Plugins\" rel=\"nofollow\">plugins for various editors</a> to quickly sort all your imports.\nIt currently cleanly supports Python 2.7 - 3.6 without any dependencies.</p>\n<img alt=\"Example Usage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c1c7d92ff42aa036f06381b606ff109a042bf7e/68747470733a2f2f7261772e6769746875622e636f6d2f74696d6f74687963726f736c65792f69736f72742f646576656c6f702f6578616d706c652e676966\">\n<p>Before isort:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_lib</span> <span class=\"kn\">import</span> <span class=\"n\">Object</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hey\"</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">my_lib</span> <span class=\"kn\">import</span> <span class=\"n\">Object3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">my_lib</span> <span class=\"kn\">import</span> <span class=\"n\">Object2</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"n\">lib15</span><span class=\"p\">,</span> <span class=\"n\">lib1</span><span class=\"p\">,</span> <span class=\"n\">lib2</span><span class=\"p\">,</span> <span class=\"n\">lib3</span><span class=\"p\">,</span> <span class=\"n\">lib4</span><span class=\"p\">,</span> <span class=\"n\">lib5</span><span class=\"p\">,</span> <span class=\"n\">lib6</span><span class=\"p\">,</span> <span class=\"n\">lib7</span><span class=\"p\">,</span> <span class=\"n\">lib8</span><span class=\"p\">,</span> <span class=\"n\">lib9</span><span class=\"p\">,</span> <span class=\"n\">lib10</span><span class=\"p\">,</span> <span class=\"n\">lib11</span><span class=\"p\">,</span> <span class=\"n\">lib12</span><span class=\"p\">,</span> <span class=\"n\">lib13</span><span class=\"p\">,</span> <span class=\"n\">lib14</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"n\">lib3</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"yo\"</span><span class=\"p\">)</span>\n</pre>\n<p>After isort:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">lib1</span><span class=\"p\">,</span> <span class=\"n\">lib2</span><span class=\"p\">,</span> <span class=\"n\">lib3</span><span class=\"p\">,</span> <span class=\"n\">lib4</span><span class=\"p\">,</span> <span class=\"n\">lib5</span><span class=\"p\">,</span> <span class=\"n\">lib6</span><span class=\"p\">,</span> <span class=\"n\">lib7</span><span class=\"p\">,</span> <span class=\"n\">lib8</span><span class=\"p\">,</span>\n                         <span class=\"n\">lib9</span><span class=\"p\">,</span> <span class=\"n\">lib10</span><span class=\"p\">,</span> <span class=\"n\">lib11</span><span class=\"p\">,</span> <span class=\"n\">lib12</span><span class=\"p\">,</span> <span class=\"n\">lib13</span><span class=\"p\">,</span> <span class=\"n\">lib14</span><span class=\"p\">,</span> <span class=\"n\">lib15</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">my_lib</span> <span class=\"kn\">import</span> <span class=\"n\">Object</span><span class=\"p\">,</span> <span class=\"n\">Object2</span><span class=\"p\">,</span> <span class=\"n\">Object3</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hey\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"yo\"</span><span class=\"p\">)</span>\n</pre>\n<div id=\"installing-isort\">\n<h2>Installing isort</h2>\n<p>Installing isort is as simple as:</p>\n<pre>pip install isort\n</pre>\n<p>Install isort with requirements.txt support:</p>\n<pre>pip install isort<span class=\"o\">[</span>requirements<span class=\"o\">]</span>\n</pre>\n<p>Install isort with Pipfile support:</p>\n<pre>pip install isort<span class=\"o\">[</span>pipfile<span class=\"o\">]</span>\n</pre>\n<p>Install isort with both formats support:</p>\n<pre>pip install isort<span class=\"o\">[</span>requirements,pipfile<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"using-isort\">\n<h2>Using isort</h2>\n<p><strong>From the command line</strong>:</p>\n<pre>isort mypythonfile.py mypythonfile2.py\n</pre>\n<p>or recursively:</p>\n<pre>isort -rc .\n</pre>\n<p><em>which is equivalent to:</em></p>\n<pre>isort **/*.py\n</pre>\n<p>or to see the proposed changes without applying them:</p>\n<pre>isort mypythonfile.py --diff\n</pre>\n<p>Finally, to atomically run isort against a project, only applying changes if they don\u2019t introduce syntax errors do:</p>\n<pre>isort -rc --atomic .\n</pre>\n<p>(Note: this is disabled by default as it keeps isort from being able to run against code written using a different version of Python)</p>\n<p><strong>From within Python</strong>:</p>\n<pre>from isort import SortImports\n\nSortImports<span class=\"o\">(</span><span class=\"s2\">\"pythonfile.py\"</span><span class=\"o\">)</span>\n</pre>\n<p>or:</p>\n<pre>from isort import SortImports\n\n<span class=\"nv\">new_contents</span> <span class=\"o\">=</span> SortImports<span class=\"o\">(</span><span class=\"nv\">file_contents</span><span class=\"o\">=</span>old_contents<span class=\"o\">)</span>.output\n</pre>\n<p><strong>From within Kate:</strong></p>\n<pre>ctrl+<span class=\"o\">[</span>\n</pre>\n<p>or:</p>\n<pre>menu &gt; Python &gt; Sort Imports\n</pre>\n</div>\n<div id=\"installing-isort-s-kate-plugin\">\n<h2>Installing isort\u2019s Kate plugin</h2>\n<p>For KDE 4.13+ / Pate 2.0+:</p>\n<pre>wget https://raw.github.com/timothycrosley/isort/master/kate_plugin/isort_plugin.py --output-document ~/.kde/share/apps/kate/pate/isort_plugin.py\nwget https://raw.github.com/timothycrosley/isort/master/kate_plugin/isort_plugin_ui.rc --output-document ~/.kde/share/apps/kate/pate/isort_plugin_ui.rc\nwget https://raw.github.com/timothycrosley/isort/master/kate_plugin/katepart_isort.desktop --output-document ~/.kde/share/kde4/services/katepart_isort.desktop\n</pre>\n<p>For all older versions:</p>\n<pre>wget https://raw.github.com/timothycrosley/isort/master/kate_plugin/isort_plugin_old.py --output-document ~/.kde/share/apps/kate/pate/isort_plugin.py\n</pre>\n<p>You will then need to restart kate and enable Python Plugins as well as the isort plugin itself.</p>\n</div>\n<div id=\"installing-isort-s-for-your-preferred-text-editor\">\n<h2>Installing isort\u2019s for your preferred text editor</h2>\n<p>Several plugins have been written that enable to use isort from within a variety of text-editors.\nYou can find a full list of them <a href=\"https://github.com/timothycrosley/isort/wiki/isort-Plugins\" rel=\"nofollow\">on the isort wiki</a>.\nAdditionally, I will enthusiastically accept pull requests that include plugins for other text editors\nand add documentation for them as I am notified.</p>\n</div>\n<div id=\"how-does-isort-work\">\n<h2>How does isort work?</h2>\n<p>isort parses specified files for global level import lines (imports outside of try / except blocks, functions, etc..)\nand puts them all at the top of the file grouped together by the type of import:</p>\n<ul>\n<li>Future</li>\n<li>Python Standard Library</li>\n<li>Third Party</li>\n<li>Current Python Project</li>\n<li>Explicitly Local (. before import, as in: <tt>from . import x</tt>)</li>\n<li>Custom Separate Sections (Defined by forced_separate list in configuration file)</li>\n<li>Custom Sections (Defined by sections list in configuration file)</li>\n</ul>\n<p>Inside of each section the imports are sorted alphabetically. isort automatically removes duplicate python imports,\nand wraps long from imports to the specified line length (defaults to 79).</p>\n</div>\n<div id=\"when-will-isort-not-work\">\n<h2>When will isort not work?</h2>\n<p>If you ever have the situation where you need to have a try / except block in the middle of top-level imports or if\nyour import order is directly linked to precedence.</p>\n<p>For example: a common practice in Django settings files is importing * from various settings files to form\na new settings file. In this case if any of the imports change order you are changing the settings definition itself.</p>\n<p>However, you can configure isort to skip over just these files - or even to force certain imports to the top.</p>\n</div>\n<div id=\"configuring-isort\">\n<h2>Configuring isort</h2>\n<p>If you find the default isort settings do not work well for your project, isort provides several ways to adjust\nthe behavior.</p>\n<p>To configure isort for a single user create a <tt><span class=\"pre\">~/.isort.cfg</span></tt> file:</p>\n<pre><span class=\"k\">[settings]</span>\n<span class=\"na\">line_length</span><span class=\"o\">=</span><span class=\"s\">120</span>\n<span class=\"na\">force_to_top</span><span class=\"o\">=</span><span class=\"s\">file1.py,file2.py</span>\n<span class=\"na\">skip</span><span class=\"o\">=</span><span class=\"s\">file3.py,file4.py</span>\n<span class=\"na\">known_future_library</span><span class=\"o\">=</span><span class=\"s\">future,pies</span>\n<span class=\"na\">known_standard_library</span><span class=\"o\">=</span><span class=\"s\">std,std2</span>\n<span class=\"na\">known_third_party</span><span class=\"o\">=</span><span class=\"s\">randomthirdparty</span>\n<span class=\"na\">known_first_party</span><span class=\"o\">=</span><span class=\"s\">mylib1,mylib2</span>\n<span class=\"na\">indent</span><span class=\"o\">=</span><span class=\"s\">'    '</span>\n<span class=\"na\">multi_line_output</span><span class=\"o\">=</span><span class=\"s\">3</span>\n<span class=\"na\">length_sort</span><span class=\"o\">=</span><span class=\"s\">1</span>\n<span class=\"na\">forced_separate</span><span class=\"o\">=</span><span class=\"s\">django.contrib,django.utils</span>\n<span class=\"na\">default_section</span><span class=\"o\">=</span><span class=\"s\">FIRSTPARTY</span>\n<span class=\"na\">no_lines_before</span><span class=\"o\">=</span><span class=\"s\">LOCALFOLDER</span>\n</pre>\n<p>Additionally, you can specify project level configuration simply by placing a <tt>.isort.cfg</tt> file at the root of your\nproject. isort will look up to 25 directories up, from the file it is ran against, to find a project specific configuration.</p>\n<p>Or, if you prefer, you can add an isort section to your project\u2019s <tt>setup.cfg</tt> or <tt>tox.ini</tt> file with any desired settings.</p>\n<p>You can then override any of these settings by using command line arguments, or by passing in override values to the\nSortImports class.</p>\n<p>Finally, as of version 3.0 isort supports editorconfig files using the standard syntax defined here:\n<a href=\"http://editorconfig.org/\" rel=\"nofollow\">http://editorconfig.org/</a></p>\n<p>Meaning you place any standard isort configuration parameters within a .editorconfig file under the <tt>*.py</tt> section\nand they will be honored.</p>\n<p>For a full list of isort settings and their meanings <a href=\"https://github.com/timothycrosley/isort/wiki/isort-Settings\" rel=\"nofollow\">take a look at the isort wiki</a>.</p>\n</div>\n<div id=\"multi-line-output-modes\">\n<h2>Multi line output modes</h2>\n<p>You will notice above the \u201cmulti_line_output\u201d setting. This setting defines how from imports wrap when they extend\npast the line_length limit and has 6 possible settings:</p>\n<p><strong>0 - Grid</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">lib1</span><span class=\"p\">,</span> <span class=\"n\">lib2</span><span class=\"p\">,</span> <span class=\"n\">lib3</span><span class=\"p\">,</span>\n                         <span class=\"n\">lib4</span><span class=\"p\">,</span> <span class=\"n\">lib5</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><strong>1 - Vertical</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">lib1</span><span class=\"p\">,</span>\n                         <span class=\"n\">lib2</span><span class=\"p\">,</span>\n                         <span class=\"n\">lib3</span>\n                         <span class=\"n\">lib4</span><span class=\"p\">,</span>\n                         <span class=\"n\">lib5</span><span class=\"p\">,</span>\n                         <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><strong>2 - Hanging Indent</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> \\\n    <span class=\"n\">lib1</span><span class=\"p\">,</span> <span class=\"n\">lib2</span><span class=\"p\">,</span> <span class=\"n\">lib3</span><span class=\"p\">,</span> \\\n    <span class=\"n\">lib4</span><span class=\"p\">,</span> <span class=\"n\">lib5</span><span class=\"p\">,</span> <span class=\"n\">lib6</span>\n</pre>\n<p><strong>3 - Vertical Hanging Indent</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">lib1</span><span class=\"p\">,</span>\n    <span class=\"n\">lib2</span><span class=\"p\">,</span>\n    <span class=\"n\">lib3</span><span class=\"p\">,</span>\n    <span class=\"n\">lib4</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>4 - Hanging Grid</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">lib1</span><span class=\"p\">,</span> <span class=\"n\">lib2</span><span class=\"p\">,</span> <span class=\"n\">lib3</span><span class=\"p\">,</span> <span class=\"n\">lib4</span><span class=\"p\">,</span>\n    <span class=\"n\">lib5</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><strong>5 - Hanging Grid Grouped</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">lib1</span><span class=\"p\">,</span> <span class=\"n\">lib2</span><span class=\"p\">,</span> <span class=\"n\">lib3</span><span class=\"p\">,</span> <span class=\"n\">lib4</span><span class=\"p\">,</span>\n    <span class=\"n\">lib5</span><span class=\"p\">,</span> <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>6 - NOQA</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"n\">lib1</span><span class=\"p\">,</span> <span class=\"n\">lib2</span><span class=\"p\">,</span> <span class=\"n\">lib3</span><span class=\"p\">,</span> <span class=\"o\">...</span>  <span class=\"c1\"># NOQA</span>\n</pre>\n<p>Alternatively, you can set <tt>force_single_line</tt> to <tt>True</tt> (<tt><span class=\"pre\">-sl</span></tt> on the command line) and every import will appear on its\nown line:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"n\">lib1</span>\n<span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"n\">lib2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">third_party</span> <span class=\"kn\">import</span> <span class=\"n\">lib3</span>\n<span class=\"o\">...</span>\n</pre>\n<p>Note: to change the how constant indents appear - simply change the indent property with the following accepted formats:\n*   Number of spaces you would like. For example: 4 would cause standard 4 space indentation.\n*   Tab\n*   A verbatim string with quotes around it.</p>\n<p>For example:</p>\n<pre><span class=\"s2\">\"    \"</span>\n</pre>\n<p>is equivalent to 4.</p>\n<p>For the import styles that use parentheses, you can control whether or not to\ninclude a trailing comma after the last import with the <tt>include_trailing_comma</tt>\noption (defaults to <tt>False</tt>).</p>\n</div>\n<div id=\"intelligently-balanced-multi-line-imports\">\n<h2>Intelligently Balanced Multi-line Imports</h2>\n<p>As of isort 3.1.0 support for balanced multi-line imports has been added.\nWith this enabled isort will dynamically change the import length to the one that produces the most balanced grid,\nwhile staying below the maximum import length defined.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span>\n                        <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span><span class=\"p\">)</span>\n</pre>\n<p>Will be produced instead of:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span>\n                        <span class=\"n\">unicode_literals</span><span class=\"p\">)</span>\n</pre>\n<p>To enable this set <tt>balanced_wrapping</tt> to <tt>True</tt> in your config or pass the <tt><span class=\"pre\">-e</span></tt> option into the command line utility.</p>\n</div>\n<div id=\"custom-sections-and-ordering\">\n<h2>Custom Sections and Ordering</h2>\n<p>You can change the section order with <tt>sections</tt> option from the default of:</p>\n<pre><span class=\"na\">FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER</span>\n</pre>\n<p>to your preference:</p>\n<pre><span class=\"na\">sections</span><span class=\"o\">=</span><span class=\"s\">FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,LOCALFOLDER</span>\n</pre>\n<p>You also can define your own sections and their order.</p>\n<p>Example:</p>\n<pre><span class=\"na\">known_django</span><span class=\"o\">=</span><span class=\"s\">django</span>\n<span class=\"na\">known_pandas</span><span class=\"o\">=</span><span class=\"s\">pandas,numpy</span>\n<span class=\"na\">sections</span><span class=\"o\">=</span><span class=\"s\">FUTURE,STDLIB,DJANGO,THIRDPARTY,PANDAS,FIRSTPARTY,LOCALFOLDER</span>\n</pre>\n<p>would create two new sections with the specified known modules.</p>\n<p>The <tt>no_lines_before</tt> option will prevent the listed sections from being split from the previous section by an empty line.</p>\n<p>Example:</p>\n<pre><span class=\"na\">sections</span><span class=\"o\">=</span><span class=\"s\">FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER</span>\n<span class=\"na\">no_lines_before</span><span class=\"o\">=</span><span class=\"s\">LOCALFOLDER</span>\n</pre>\n<p>would produce a section with both FIRSTPARTY and LOCALFOLDER modules combined.</p>\n</div>\n<div id=\"auto-comment-import-sections\">\n<h2>Auto-comment import sections</h2>\n<p>Some projects prefer to have import sections uniquely titled to aid in identifying the sections quickly\nwhen visually scanning. isort can automate this as well. To do this simply set the <tt>import_heading_{section_name}</tt>\nsetting for each section you wish to have auto commented - to the desired comment.</p>\n<p>For Example:</p>\n<pre><span class=\"na\">import_heading_stdlib</span><span class=\"o\">=</span><span class=\"s\">Standard Library</span>\n<span class=\"na\">import_heading_firstparty</span><span class=\"o\">=</span><span class=\"s\">My Stuff</span>\n</pre>\n<p>Would lead to output looking like the following:</p>\n<pre><span class=\"c1\"># Standard Library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">django.settings</span>\n\n<span class=\"c1\"># My Stuff</span>\n<span class=\"kn\">import</span> <span class=\"nn\">myproject.test</span>\n</pre>\n</div>\n<div id=\"ordering-by-import-length\">\n<h2>Ordering by import length</h2>\n<p>isort also makes it easy to sort your imports by length, simply by setting the <tt>length_sort</tt> option to <tt>True</tt>.\nThis will result in the following output style:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">evn.util</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Pool</span><span class=\"p\">,</span>\n    <span class=\"n\">Dict</span><span class=\"p\">,</span>\n    <span class=\"n\">Options</span><span class=\"p\">,</span>\n    <span class=\"n\">Constant</span><span class=\"p\">,</span>\n    <span class=\"n\">DecayDict</span><span class=\"p\">,</span>\n    <span class=\"n\">UnexpectedCodePath</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"skip-processing-of-imports-outside-of-configuration\">\n<h2>Skip processing of imports (outside of configuration)</h2>\n<p>To make isort ignore a single import simply add a comment at the end of the import line containing the text <tt>isort:skip</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">module</span>  <span class=\"c1\"># isort:skip</span>\n</pre>\n<p>or:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xyz</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">abc</span><span class=\"p\">,</span>  <span class=\"c1\"># isort:skip</span>\n                 <span class=\"n\">yo</span><span class=\"p\">,</span>\n                 <span class=\"n\">hey</span><span class=\"p\">)</span>\n</pre>\n<p>To make isort skip an entire file simply add <tt>isort:skip_file</tt> to the module\u2019s doc string:</p>\n<pre><span class=\"sd\">\"\"\" my_module.py\n    Best module ever\n\n   isort:skip_file\n\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">b</span>\n<span class=\"kn\">import</span> <span class=\"nn\">a</span>\n</pre>\n</div>\n<div id=\"adding-an-import-to-multiple-files\">\n<h2>Adding an import to multiple files</h2>\n<p>isort makes it easy to add an import statement across multiple files, while being assured it\u2019s correctly placed.</p>\n<p>From the command line:</p>\n<pre>isort -a <span class=\"s2\">\"from __future__ import print_function\"</span> *.py\n</pre>\n<p>from within Kate:</p>\n<pre>ctrl+]\n</pre>\n<p>or:</p>\n<pre>menu &gt; Python &gt; Add Import\n</pre>\n</div>\n<div id=\"removing-an-import-from-multiple-files\">\n<h2>Removing an import from multiple files</h2>\n<p>isort also makes it easy to remove an import from multiple files, without having to be concerned with how it was originally\nformatted.</p>\n<p>From the command line:</p>\n<pre>isort -r <span class=\"s2\">\"os.system\"</span> *.py\n</pre>\n<p>from within Kate:</p>\n<pre>ctrl+shift+]\n</pre>\n<p>or:</p>\n<pre>menu &gt; Python &gt; Remove Import\n</pre>\n</div>\n<div id=\"using-isort-to-verify-code\">\n<h2>Using isort to verify code</h2>\n<div id=\"the-check-only-option\">\n<h3>The <tt><span class=\"pre\">--check-only</span></tt> option</h3>\n<p>isort can also be used to used to verify that code is correctly formatted by running it with <tt><span class=\"pre\">-c</span></tt>.\nAny files that contain incorrectly sorted and/or formatted imports will be outputted to <tt>stderr</tt>.</p>\n<pre>isort **/*.py -c -vb\n\nSUCCESS: /home/timothy/Projects/Open_Source/isort/isort_kate_plugin.py Everything Looks Good!\nERROR: /home/timothy/Projects/Open_Source/isort/isort/isort.py Imports are incorrectly sorted.\n</pre>\n<p>One great place this can be used is with a pre-commit git hook, such as this one by @acdha:</p>\n<p><a href=\"https://gist.github.com/acdha/8717683\" rel=\"nofollow\">https://gist.github.com/acdha/8717683</a></p>\n<p>This can help to ensure a certain level of code quality throughout a project.</p>\n</div>\n<div id=\"git-hook\">\n<h3>Git hook</h3>\n<p>isort provides a hook function that can be integrated into your Git pre-commit script to check\nPython code before committing.</p>\n<p>To cause the commit to fail if there are isort errors (strict mode), include the following in\n<tt><span class=\"pre\">.git/hooks/pre-commit</span></tt>:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">isort.hooks</span> <span class=\"kn\">import</span> <span class=\"n\">git_hook</span>\n\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">git_hook</span><span class=\"p\">(</span><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<p>If you just want to display warnings, but allow the commit to happen anyway, call <tt>git_hook</tt> without\nthe <cite>strict</cite> parameter.</p>\n</div>\n<div id=\"setuptools-integration\">\n<h3>Setuptools integration</h3>\n<p>Upon installation, isort enables a <tt>setuptools</tt> command that checks Python files\ndeclared by your project.</p>\n<p>Running <tt>python setup.py isort</tt> on the command line will check the files\nlisted in your <tt>py_modules</tt> and <tt>packages</tt>.  If any warning is found,\nthe command will exit with an error code:</p>\n<pre>$ python setup.py isort\n</pre>\n<p>Also, to allow users to be able to use the command without having to install\nisort themselves, add isort to the setup_requires of your <tt>setup()</tt> like so:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"project\"</span><span class=\"p\">,</span>\n    <span class=\"n\">packages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"project\"</span><span class=\"p\">],</span>\n\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"isort\"</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"why-isort\">\n<h2>Why isort?</h2>\n<p>isort simply stands for import sort. It was originally called \u201csortImports\u201d however I got tired of typing the extra\ncharacters and came to the realization camelCase is not pythonic.</p>\n<p>I wrote isort because in an organization I used to work in the manager came in one day and decided all code must\nhave alphabetically sorted imports. The code base was huge - and he meant for us to do it by hand. However, being a\nprogrammer - I\u2019m too lazy to spend 8 hours mindlessly performing a function, but not too lazy to spend 16\nhours automating it. I was given permission to open source sortImports and here we are :)</p>\n<hr class=\"docutils\">\n<p>Thanks and I hope you find isort useful!</p>\n<p>~Timothy Crosley</p>\n</div>\n\n          </div>"}, "last_serial": 4050333, "releases": {"5.0.0": [{"comment_text": "", "digests": {"md5": "91711488a9a9b093746e8a20119964a2", "sha256": "f894da2867e7b8f88bd0d09bc2fd53296345fe73d22ed0d0b685655a9e123d0f"}, "downloads": -1, "filename": "isort-plus-5.0.0.tar.gz", "has_sig": false, "md5_digest": "91711488a9a9b093746e8a20119964a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 61876, "upload_time": "2018-06-27T11:38:03", "upload_time_iso_8601": "2018-06-27T11:38:03.518701Z", "url": "https://files.pythonhosted.org/packages/a5/59/ce9c82bec33a149e7e6d94babc49da28c50d3a3fec46880731e19d28072c/isort-plus-5.0.0.tar.gz", "yanked": false}], "5.1.0": [{"comment_text": "", "digests": {"md5": "485d017534e015d496f40a078def0cb7", "sha256": "7f11ebb07743ba8701ffa872120267e48822d7494df9a00d4c5c9e4945a1c545"}, "downloads": -1, "filename": "isort-plus-5.1.0.tar.gz", "has_sig": false, "md5_digest": "485d017534e015d496f40a078def0cb7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 62282, "upload_time": "2018-07-04T10:31:41", "upload_time_iso_8601": "2018-07-04T10:31:41.696152Z", "url": "https://files.pythonhosted.org/packages/23/ba/7573ef5836f4f8dc111183fc435770c9534e46494552ad4351b59ef06394/isort-plus-5.1.0.tar.gz", "yanked": false}], "5.1.1": [{"comment_text": "", "digests": {"md5": "5b638c37078048a3bb7e6ea7767ffc4b", "sha256": "607e7cb937f1be343323b42e21762cd8ee6c15318a4d998a92f033a388254cd8"}, "downloads": -1, "filename": "isort-plus-5.1.1.tar.gz", "has_sig": false, "md5_digest": "5b638c37078048a3bb7e6ea7767ffc4b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 62405, "upload_time": "2018-07-11T10:16:59", "upload_time_iso_8601": "2018-07-11T10:16:59.867566Z", "url": "https://files.pythonhosted.org/packages/6d/6f/36d2a5369f5b7ececf5970f4e2c03acab5b8f9b8f507aeedfd577c4373f9/isort-plus-5.1.1.tar.gz", "yanked": false}], "5.1.2": [{"comment_text": "", "digests": {"md5": "9f3a208a212e5097b16ce939420e732b", "sha256": "e7e445ac2b89aa0c8b10cf1e9530e1d62f896305398bf2566e2466e6dcfd7c2f"}, "downloads": -1, "filename": "isort-plus-5.1.2.tar.gz", "has_sig": false, "md5_digest": "9f3a208a212e5097b16ce939420e732b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 62401, "upload_time": "2018-07-11T10:22:22", "upload_time_iso_8601": "2018-07-11T10:22:22.544673Z", "url": "https://files.pythonhosted.org/packages/a3/b2/9c03cd9f25d8a5c07b98a02d47659c64f1daf9a94620a8cfba0aa65065e2/isort-plus-5.1.2.tar.gz", "yanked": false}], "5.1.3": [{"comment_text": "", "digests": {"md5": "6a9b062b18f17b1b794db4e9b702021f", "sha256": "ec7b3b7c090c51a266811bc540d6175d9c33633cdf08f71992d189af8d899833"}, "downloads": -1, "filename": "isort-plus-5.1.3.tar.gz", "has_sig": false, "md5_digest": "6a9b062b18f17b1b794db4e9b702021f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 62403, "upload_time": "2018-07-11T10:30:31", "upload_time_iso_8601": "2018-07-11T10:30:31.476752Z", "url": "https://files.pythonhosted.org/packages/44/bc/7e0b8d242450a6517f22f1ca60069c4807e61894293ccdafe4d291a4899e/isort-plus-5.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a9b062b18f17b1b794db4e9b702021f", "sha256": "ec7b3b7c090c51a266811bc540d6175d9c33633cdf08f71992d189af8d899833"}, "downloads": -1, "filename": "isort-plus-5.1.3.tar.gz", "has_sig": false, "md5_digest": "6a9b062b18f17b1b794db4e9b702021f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 62403, "upload_time": "2018-07-11T10:30:31", "upload_time_iso_8601": "2018-07-11T10:30:31.476752Z", "url": "https://files.pythonhosted.org/packages/44/bc/7e0b8d242450a6517f22f1ca60069c4807e61894293ccdafe4d291a4899e/isort-plus-5.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:58 2020"}