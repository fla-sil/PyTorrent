{"info": {"author": "eyeo GmbH", "author_email": "info@adblockplus.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "# AdMincer\n\nAdMincer is a command line tool for enriching datasets of screenshots used in\nML-based ad detection. It can probably be used with other object-detection\ndatasets, but ad detection is the main use case we're after.\n\n## Installation\n\nClone this repository, then:\n\n    $ cd admincer/\n    $ pip install .\n\n## Usage\n\nFrom the command line, run `$ admincer <command>` to get information on command\noptions and usage. The current available options are `place`, `extract`,\n`slice`, `find`, and `convert`.\n\n### Place\n\nThis command places fragment images into the regions of source images. It takes\na directory with source images that have regions marked on them and multiple\nmappings of region type to fragment directory:\n\n    $ admincer place -f ad=ads/dir -f label=labels:other/labels -n 5 source target\n\nThis will take images with marked regions from `source/`, place images from\n`ads/dir/` into the regions of type `ad` and images from `labels/` and\n`other/labels/` into the `label` regions. It will generate 5 images and store\nthem in `target/`.\n\nThe placements are performed in the order of region types on the command line.\nIn the example above first all `ad` regions will be placed and then all `label`\nregions.\n\n#### Region marking\n\nRegions of the images can be defined via a CSV file in the following format\n(the numbers are X and Y coordinates of the top left corner followed by the\nbottom right corner, and the headings in the first line are required):\n\n    image,xmin,ymin,xmax,ymax,label\n    image1.png,50,50,80,90,region_type1\n    image2.gif,10,10,20,20,region_type2\n\nThey can also be defined via TXT files of the same name as the image. The TXT\nfiles should be in the format commonly used with YOLO object detector. The\nnumbers are: `<object-class> <x> <y> <width> <height>`\nWhere:\n- `<object-class>` is an integer representing the box's label\n- `<x> <y>` are the float coordinates at the **center** of the rectangle\n- `<width> <height>` are the ratio of the box's width/height relative to the\n   size of the whole image, from (0.0 to 1.0].\n\nE.g. `<height> = <box_height> / <image_height>`\n\n    0 0.075 0.15 0.05 0.1\n    1 0.225 0.15 0.05 0.1\n\nIt's possible to provide names for the region type numbers via placing a file\nwith `.names` extension into the directory. It should simply contian the names\nin the successive lines:\n\n    region_type1\n    region_type2\n\nWhen the names file is provided it's also possible to mix CSV and TXT region\ndefinitions but not for the same image.\n\nNote: regions that extend beyond the boundaries of the image will be clipped.\n\n#### Resize modes\n\nWhen the fragments placed into the regions are not of the same size as the\nregions, there are several possible options for resizing them. The default\nis to scale the fragment to match the size of the region. Another option is to\ncut off the part of the fragment that doesn't fit and place the rest into the\npart of the region that it would cover. Yet another approach is to cut off some\nparts and pad the remaining image to the size of the region. These modes are\ncalled `scale`, `crop` and `pad` respectively and they can be configured via\n`--resize-mode` command line option. Example: \n\n    $ admincer place -f ad=ads/dir -f label=labels -r pad -r label=crop ...\n\nHere the first `-r` sets the default resize mode and the second one overrides\nit for `label` region type.\n\n### Extract\n\nThis command extracts the contents of marked regions from source images. It\ntakes a directory with source images with marked regions (see above) and\nmultiple mappings of region type to target directory:\n\n    $ admincer extract --target-dir ad=ads/dir -t label=labels source\n\nThis will load the images and region maps from `source` and will extract the\ncontents of the regions labeled `ad` and `label` into `ads/dir` and `labels`\ndirectories respectively.\n\n### Slice\n\nThis command produces viewport-sized square screenshots from page-sized tall\nrectangular screenshots. It remaps the regions of the original images to the\nproduced part (as long as sufficient part of the region is inside the part).\n\n    $ admincer slice --step=10 --min-part=50 source target\n\nIf additional `--no-empty` option is specified, slices that don't contain any\nregions will not be produced.\n\n### Find\n\nThis command finds source images that have regions of specific types and sizes.\nFor example the following command will find all images in `source` directory\nthat have regions of the type `ad` 100 pixels wide by 50 pixels high.\n\n    $ admincer find --region=ad:100x50 source\n\nThere's certain tolerance for size mismatches. Normally it's +25% and -20%.\nTolerance can be configured via an additional parameter of the region query:\n\n    $ admincer find -r ad:100x50:100 source\n\nHere height and width can be up to 100% larger and up to 50% smaller. In\ngeneral the tolerance value X allows the region to be X% larger than specified\nor the specification to be X% larger than the region.\n\nMultiple `--region`/`-r` options can be given. In this case images that contain\nat least one region matching each query will be found (i.e. multiple queries\nare combined using `and` operator).\n\n### Convert\n\nThis command will convert annotations from a CVAT-format .xml file into YOLO-\nformat .txt files, placing the .txt files alongside their images:\n\n    $ admincer convert source.xml\n\nMultiple .xml files can also be provided, either as a list, or by using shell\nexpansions:\n\n    $ admincer convert *.xml\n\nOptionally, a `--target-dir` can be specified. This will place the .txt\nannotations into the specified target directory, along with a `class.names`\nfile indicating the `<object-class>` order. If no `target-dir` is given,\n`class.names` will be written to the image directories.\n\n    $ admincer convert *.xml --target-dir path/to/target/\n\nAdditionally, the `-m` or `-c` flags may be given, which will either move or\ncopy the images to the `--target-dir`, respectively.\n\n**Notes:**\n- Each image's `name` tag in the .xml file should contain the image's path,\n  relative to the xml file.\n- A `.names` file may be provided. If multiple image folders are combined into\na `--target-dir`, their `.names` files will be combined and written to\n`<target_dir>/class.names`. If new labels are found, the `.names` file will\nbe overwritten to include all labels.\n\n## Questions\n\n- Fragment matching policy (current one allows scaling by 80% to 125%).\n- What to do if there are no valid candidate fragments for placement? Right now\n  we bomb out with an exception.\n- Do we want sampling with/without replacement? Or maybe some kind of\n  deterministic selection? Right now it's with replacement.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/eyeo/machine-learning/admincer/", "keywords": "ad-detection machine-learning dataset", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "admincer", "package_url": "https://pypi.org/project/admincer/", "platform": "", "project_url": "https://pypi.org/project/admincer/", "project_urls": {"Homepage": "https://gitlab.com/eyeo/machine-learning/admincer/"}, "release_url": "https://pypi.org/project/admincer/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "Tool for managing datasets for visual ad detection", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AdMincer</h1>\n<p>AdMincer is a command line tool for enriching datasets of screenshots used in\nML-based ad detection. It can probably be used with other object-detection\ndatasets, but ad detection is the main use case we're after.</p>\n<h2>Installation</h2>\n<p>Clone this repository, then:</p>\n<pre><code>$ cd admincer/\n$ pip install .\n</code></pre>\n<h2>Usage</h2>\n<p>From the command line, run <code>$ admincer &lt;command&gt;</code> to get information on command\noptions and usage. The current available options are <code>place</code>, <code>extract</code>,\n<code>slice</code>, <code>find</code>, and <code>convert</code>.</p>\n<h3>Place</h3>\n<p>This command places fragment images into the regions of source images. It takes\na directory with source images that have regions marked on them and multiple\nmappings of region type to fragment directory:</p>\n<pre><code>$ admincer place -f ad=ads/dir -f label=labels:other/labels -n 5 source target\n</code></pre>\n<p>This will take images with marked regions from <code>source/</code>, place images from\n<code>ads/dir/</code> into the regions of type <code>ad</code> and images from <code>labels/</code> and\n<code>other/labels/</code> into the <code>label</code> regions. It will generate 5 images and store\nthem in <code>target/</code>.</p>\n<p>The placements are performed in the order of region types on the command line.\nIn the example above first all <code>ad</code> regions will be placed and then all <code>label</code>\nregions.</p>\n<h4>Region marking</h4>\n<p>Regions of the images can be defined via a CSV file in the following format\n(the numbers are X and Y coordinates of the top left corner followed by the\nbottom right corner, and the headings in the first line are required):</p>\n<pre><code>image,xmin,ymin,xmax,ymax,label\nimage1.png,50,50,80,90,region_type1\nimage2.gif,10,10,20,20,region_type2\n</code></pre>\n<p>They can also be defined via TXT files of the same name as the image. The TXT\nfiles should be in the format commonly used with YOLO object detector. The\nnumbers are: <code>&lt;object-class&gt; &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt;</code>\nWhere:</p>\n<ul>\n<li><code>&lt;object-class&gt;</code> is an integer representing the box's label</li>\n<li><code>&lt;x&gt; &lt;y&gt;</code> are the float coordinates at the <strong>center</strong> of the rectangle</li>\n<li><code>&lt;width&gt; &lt;height&gt;</code> are the ratio of the box's width/height relative to the\nsize of the whole image, from (0.0 to 1.0].</li>\n</ul>\n<p>E.g. <code>&lt;height&gt; = &lt;box_height&gt; / &lt;image_height&gt;</code></p>\n<pre><code>0 0.075 0.15 0.05 0.1\n1 0.225 0.15 0.05 0.1\n</code></pre>\n<p>It's possible to provide names for the region type numbers via placing a file\nwith <code>.names</code> extension into the directory. It should simply contian the names\nin the successive lines:</p>\n<pre><code>region_type1\nregion_type2\n</code></pre>\n<p>When the names file is provided it's also possible to mix CSV and TXT region\ndefinitions but not for the same image.</p>\n<p>Note: regions that extend beyond the boundaries of the image will be clipped.</p>\n<h4>Resize modes</h4>\n<p>When the fragments placed into the regions are not of the same size as the\nregions, there are several possible options for resizing them. The default\nis to scale the fragment to match the size of the region. Another option is to\ncut off the part of the fragment that doesn't fit and place the rest into the\npart of the region that it would cover. Yet another approach is to cut off some\nparts and pad the remaining image to the size of the region. These modes are\ncalled <code>scale</code>, <code>crop</code> and <code>pad</code> respectively and they can be configured via\n<code>--resize-mode</code> command line option. Example:</p>\n<pre><code>$ admincer place -f ad=ads/dir -f label=labels -r pad -r label=crop ...\n</code></pre>\n<p>Here the first <code>-r</code> sets the default resize mode and the second one overrides\nit for <code>label</code> region type.</p>\n<h3>Extract</h3>\n<p>This command extracts the contents of marked regions from source images. It\ntakes a directory with source images with marked regions (see above) and\nmultiple mappings of region type to target directory:</p>\n<pre><code>$ admincer extract --target-dir ad=ads/dir -t label=labels source\n</code></pre>\n<p>This will load the images and region maps from <code>source</code> and will extract the\ncontents of the regions labeled <code>ad</code> and <code>label</code> into <code>ads/dir</code> and <code>labels</code>\ndirectories respectively.</p>\n<h3>Slice</h3>\n<p>This command produces viewport-sized square screenshots from page-sized tall\nrectangular screenshots. It remaps the regions of the original images to the\nproduced part (as long as sufficient part of the region is inside the part).</p>\n<pre><code>$ admincer slice --step=10 --min-part=50 source target\n</code></pre>\n<p>If additional <code>--no-empty</code> option is specified, slices that don't contain any\nregions will not be produced.</p>\n<h3>Find</h3>\n<p>This command finds source images that have regions of specific types and sizes.\nFor example the following command will find all images in <code>source</code> directory\nthat have regions of the type <code>ad</code> 100 pixels wide by 50 pixels high.</p>\n<pre><code>$ admincer find --region=ad:100x50 source\n</code></pre>\n<p>There's certain tolerance for size mismatches. Normally it's +25% and -20%.\nTolerance can be configured via an additional parameter of the region query:</p>\n<pre><code>$ admincer find -r ad:100x50:100 source\n</code></pre>\n<p>Here height and width can be up to 100% larger and up to 50% smaller. In\ngeneral the tolerance value X allows the region to be X% larger than specified\nor the specification to be X% larger than the region.</p>\n<p>Multiple <code>--region</code>/<code>-r</code> options can be given. In this case images that contain\nat least one region matching each query will be found (i.e. multiple queries\nare combined using <code>and</code> operator).</p>\n<h3>Convert</h3>\n<p>This command will convert annotations from a CVAT-format .xml file into YOLO-\nformat .txt files, placing the .txt files alongside their images:</p>\n<pre><code>$ admincer convert source.xml\n</code></pre>\n<p>Multiple .xml files can also be provided, either as a list, or by using shell\nexpansions:</p>\n<pre><code>$ admincer convert *.xml\n</code></pre>\n<p>Optionally, a <code>--target-dir</code> can be specified. This will place the .txt\nannotations into the specified target directory, along with a <code>class.names</code>\nfile indicating the <code>&lt;object-class&gt;</code> order. If no <code>target-dir</code> is given,\n<code>class.names</code> will be written to the image directories.</p>\n<pre><code>$ admincer convert *.xml --target-dir path/to/target/\n</code></pre>\n<p>Additionally, the <code>-m</code> or <code>-c</code> flags may be given, which will either move or\ncopy the images to the <code>--target-dir</code>, respectively.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>Each image's <code>name</code> tag in the .xml file should contain the image's path,\nrelative to the xml file.</li>\n<li>A <code>.names</code> file may be provided. If multiple image folders are combined into\na <code>--target-dir</code>, their <code>.names</code> files will be combined and written to\n<code>&lt;target_dir&gt;/class.names</code>. If new labels are found, the <code>.names</code> file will\nbe overwritten to include all labels.</li>\n</ul>\n<h2>Questions</h2>\n<ul>\n<li>Fragment matching policy (current one allows scaling by 80% to 125%).</li>\n<li>What to do if there are no valid candidate fragments for placement? Right now\nwe bomb out with an exception.</li>\n<li>Do we want sampling with/without replacement? Or maybe some kind of\ndeterministic selection? Right now it's with replacement.</li>\n</ul>\n\n          </div>"}, "last_serial": 7189344, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3d47ff990f172e14acbb4efbb18e8cb6", "sha256": "42c451c6a2b3ab7d840eb3cdf1b3fa8524ae68203a29d8e670e0831ccaaa0089"}, "downloads": -1, "filename": "admincer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3d47ff990f172e14acbb4efbb18e8cb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46947, "upload_time": "2019-09-26T14:08:17", "upload_time_iso_8601": "2019-09-26T14:08:17.328487Z", "url": "https://files.pythonhosted.org/packages/34/fa/1fda0068c30e9fc9a48f362d699d5760ef00fc946c963bdae5d7fea1f7de/admincer-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "662cfe348e61d353c444327e1b2f77db", "sha256": "52bd30c85e9d91e678ab688363d70cb14dd1f7ca2bddd6caaee0f1e46509197c"}, "downloads": -1, "filename": "admincer-1.1.0.tar.gz", "has_sig": false, "md5_digest": "662cfe348e61d353c444327e1b2f77db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51975, "upload_time": "2020-02-06T14:41:52", "upload_time_iso_8601": "2020-02-06T14:41:52.657627Z", "url": "https://files.pythonhosted.org/packages/d8/8a/c3240c628c018e1c82d14e03c9805f012678518370c0bb3d1a974ea95b5b/admincer-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "ea8c783dcd5d30d59084a8cb1ab53885", "sha256": "b6be6715f49262499a9f8345b872bc81e50347ebb7e782d0ce5de7884a288e88"}, "downloads": -1, "filename": "admincer-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ea8c783dcd5d30d59084a8cb1ab53885", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58322, "upload_time": "2020-05-07T15:10:34", "upload_time_iso_8601": "2020-05-07T15:10:34.655992Z", "url": "https://files.pythonhosted.org/packages/da/3c/b57dfbc35f240d4aad96235b826d2a618c84e62e00e349e7e4236927520a/admincer-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea8c783dcd5d30d59084a8cb1ab53885", "sha256": "b6be6715f49262499a9f8345b872bc81e50347ebb7e782d0ce5de7884a288e88"}, "downloads": -1, "filename": "admincer-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ea8c783dcd5d30d59084a8cb1ab53885", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58322, "upload_time": "2020-05-07T15:10:34", "upload_time_iso_8601": "2020-05-07T15:10:34.655992Z", "url": "https://files.pythonhosted.org/packages/da/3c/b57dfbc35f240d4aad96235b826d2a618c84e62e00e349e7e4236927520a/admincer-1.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:21 2020"}