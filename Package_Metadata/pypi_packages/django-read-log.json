{"info": {"author": "Mikkel Aleister Clausen", "author_email": "mac@magenta.dk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP"], "description": "Django-read-log\n---------------\nSimple app to log every time an object is displayed, can be used in combination with django-simple-history for a full audit solution.\nCurrently the standard generic class based views: **DetailView**, **UpdateView**, **DeleteView**, **ListView**\nare are supported out of the box, since the views deal with displaying objects as part of the functionality.\nFor DeleteView and UpdateView in most cases you want to display the object (GET request)\nbefore you allow the user to delete/update the object.\n\nOther custom views can most likely be supported see `Using django-read-log in combination with unsupported views`_\n\nFor each view the following data is stored in the audit model (ReadLog):\n\n:user: Who view the item, can be an anonymous user.\n:content_object: A reference to the viewed object using a generic foreign key, if you delete an object the log entry will still be present.\n:operation: What operation triggered the the log entry to be written(detail, list, update, delete).\n:logged_at: When was the object viewed.\n\nUsage\n=====\nEasy to use just in 3 simple steps\n\n1. add the app 'read_log' to INSTALLED_APPS in settings.py\n2. run the migration: python manage.py migrate read_log\n3. import and use the mixin\n\n.. code-block:: python\n\n    from read_log.view_mixins import ReadLogMixin\n    from test_read_log.models import TestModel\n\n    class TestDetailView(ReadLogMixin, DetailView):\n        model = TestModel\n\nCustomizing logged operations\n_____________________________\nBy default the following views maps to the following operations.\n\n:DetailView: detail\n:UpdateView: update\n:ListView: list\n:Delete: delete\n\nThis can be changed by setting the **log_operations** attribute to a string of you choice\n\n.. code-block:: python\n\n    from read_log.view_mixins import ReadLogMixin\n    from test_read_log.models import TestModel\n\n    class TestDetailView(ReadLogMixin, DetailView):\n        log_operation = 'my_choice'\n        model = TestModel\n\nUsing django-read-log in combination with unsupported views\n___________________________________________________________\nBecause the view mixin hooks into the **get_context_data** view function it should be possible to add the mixin to\nunsupported views as long as they either implement or inherit the get_context_data function\n(eg. from SingleObjectMixin or MultipleObjectMixin) and define the class attribute **'log_operation'** to the string\nyou want to have logged as the operations field.\n\nPresentation not included\n_________________________\nWhen audit is needed you normally want to limit the expose of data hench forth no presentation of the ReadLog\nis included and if you need a way to display the Readlog it is up to you to implement it.\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from read_log.models import ReadLog\n\n    admin.site.register(ReadLog)\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.django-rest-framework.org/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-read-log", "package_url": "https://pypi.org/project/django-read-log/", "platform": "", "project_url": "https://pypi.org/project/django-read-log/", "project_urls": {"Company": "https://www.magenta.dk/", "Homepage": "https://www.django-rest-framework.org/", "Source": "https://github.com/magenta-aps/django-read-log"}, "release_url": "https://pypi.org/project/django-read-log/0.80/", "requires_dist": ["django (>=2.2)"], "requires_python": ">=3.5", "summary": "Read log audit for django", "version": "0.80", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple app to log every time an object is displayed, can be used in combination with django-simple-history for a full audit solution.\nCurrently the standard generic class based views: <strong>DetailView</strong>, <strong>UpdateView</strong>, <strong>DeleteView</strong>, <strong>ListView</strong>\nare are supported out of the box, since the views deal with displaying objects as part of the functionality.\nFor DeleteView and UpdateView in most cases you want to display the object (GET request)\nbefore you allow the user to delete/update the object.</p>\n<p>Other custom views can most likely be supported see <a href=\"#using-django-read-log-in-combination-with-unsupported-views\" rel=\"nofollow\">Using django-read-log in combination with unsupported views</a></p>\n<p>For each view the following data is stored in the audit model (ReadLog):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>user:</th><td>Who view the item, can be an anonymous user.</td>\n</tr>\n<tr><th>content_object:</th><td>A reference to the viewed object using a generic foreign key, if you delete an object the log entry will still be present.</td>\n</tr>\n<tr><th>operation:</th><td>What operation triggered the the log entry to be written(detail, list, update, delete).</td>\n</tr>\n<tr><th>logged_at:</th><td>When was the object viewed.</td>\n</tr>\n</tbody>\n</table>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Easy to use just in 3 simple steps</p>\n<ol>\n<li>add the app \u2018read_log\u2019 to INSTALLED_APPS in settings.py</li>\n<li>run the migration: python manage.py migrate read_log</li>\n<li>import and use the mixin</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">read_log.view_mixins</span> <span class=\"kn\">import</span> <span class=\"n\">ReadLogMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">test_read_log.models</span> <span class=\"kn\">import</span> <span class=\"n\">TestModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestDetailView</span><span class=\"p\">(</span><span class=\"n\">ReadLogMixin</span><span class=\"p\">,</span> <span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">TestModel</span>\n</pre>\n<div id=\"customizing-logged-operations\">\n<h3>Customizing logged operations</h3>\n<p>By default the following views maps to the following operations.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>DetailView:</th><td>detail</td>\n</tr>\n<tr><th>UpdateView:</th><td>update</td>\n</tr>\n<tr><th>ListView:</th><td>list</td>\n</tr>\n<tr><th>Delete:</th><td>delete</td>\n</tr>\n</tbody>\n</table>\n<p>This can be changed by setting the <strong>log_operations</strong> attribute to a string of you choice</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">read_log.view_mixins</span> <span class=\"kn\">import</span> <span class=\"n\">ReadLogMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">test_read_log.models</span> <span class=\"kn\">import</span> <span class=\"n\">TestModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestDetailView</span><span class=\"p\">(</span><span class=\"n\">ReadLogMixin</span><span class=\"p\">,</span> <span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">log_operation</span> <span class=\"o\">=</span> <span class=\"s1\">'my_choice'</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">TestModel</span>\n</pre>\n</div>\n<div id=\"using-django-read-log-in-combination-with-unsupported-views\">\n<h3>Using django-read-log in combination with unsupported views</h3>\n<p>Because the view mixin hooks into the <strong>get_context_data</strong> view function it should be possible to add the mixin to\nunsupported views as long as they either implement or inherit the get_context_data function\n(eg. from SingleObjectMixin or MultipleObjectMixin) and define the class attribute <strong>\u2018log_operation\u2019</strong> to the string\nyou want to have logged as the operations field.</p>\n</div>\n<div id=\"presentation-not-included\">\n<h3>Presentation not included</h3>\n<p>When audit is needed you normally want to limit the expose of data hench forth no presentation of the ReadLog\nis included and if you need a way to display the Readlog it is up to you to implement it.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">read_log.models</span> <span class=\"kn\">import</span> <span class=\"n\">ReadLog</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">ReadLog</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7137580, "releases": {"0.80": [{"comment_text": "", "digests": {"md5": "0550016cb50d235c7aaf38e7814a6532", "sha256": "c4989bc7d478ce8e0bc5bba97892766d1bf23cc7269583da99b7e7e7140ddb9c"}, "downloads": -1, "filename": "django_read_log-0.80-py3-none-any.whl", "has_sig": false, "md5_digest": "0550016cb50d235c7aaf38e7814a6532", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6150, "upload_time": "2020-04-30T13:54:07", "upload_time_iso_8601": "2020-04-30T13:54:07.495418Z", "url": "https://files.pythonhosted.org/packages/5d/f6/1cb58685c7faac31559a2654a7992b83fcd129fe247ec2dacdfa29980e22/django_read_log-0.80-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21fb79b62c3664fa4967a49156ea875b", "sha256": "5a252c38b44173f73a23b5a95fba312ac353deb5569c3b997cb3011634d62b6d"}, "downloads": -1, "filename": "django-read-log-0.80.tar.gz", "has_sig": false, "md5_digest": "21fb79b62c3664fa4967a49156ea875b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4413, "upload_time": "2020-04-30T13:54:09", "upload_time_iso_8601": "2020-04-30T13:54:09.462949Z", "url": "https://files.pythonhosted.org/packages/e1/61/fbb21d4fafd232209d4f4644824fe746a64859686c1c1fb0e992fb4235de/django-read-log-0.80.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0550016cb50d235c7aaf38e7814a6532", "sha256": "c4989bc7d478ce8e0bc5bba97892766d1bf23cc7269583da99b7e7e7140ddb9c"}, "downloads": -1, "filename": "django_read_log-0.80-py3-none-any.whl", "has_sig": false, "md5_digest": "0550016cb50d235c7aaf38e7814a6532", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6150, "upload_time": "2020-04-30T13:54:07", "upload_time_iso_8601": "2020-04-30T13:54:07.495418Z", "url": "https://files.pythonhosted.org/packages/5d/f6/1cb58685c7faac31559a2654a7992b83fcd129fe247ec2dacdfa29980e22/django_read_log-0.80-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21fb79b62c3664fa4967a49156ea875b", "sha256": "5a252c38b44173f73a23b5a95fba312ac353deb5569c3b997cb3011634d62b6d"}, "downloads": -1, "filename": "django-read-log-0.80.tar.gz", "has_sig": false, "md5_digest": "21fb79b62c3664fa4967a49156ea875b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4413, "upload_time": "2020-04-30T13:54:09", "upload_time_iso_8601": "2020-04-30T13:54:09.462949Z", "url": "https://files.pythonhosted.org/packages/e1/61/fbb21d4fafd232209d4f4644824fe746a64859686c1c1fb0e992fb4235de/django-read-log-0.80.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:24 2020"}