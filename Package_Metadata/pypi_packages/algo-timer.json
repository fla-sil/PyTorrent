{"info": {"author": "Xiangzhuang Shen", "author_email": "datahonor@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Algorithm Timer\n\n## Overview\n\nAn easy-to-use algorithm timer.\n\n## Mechanism\nWe use a context-manager and `with` in Python to give an convinent way to test\na specific block of code. Just see the following examples.\n\nNote that we design this plot function here to test some algorithms' runing time and you can use it to test(and plot) the time of any block of code with minor change in source code(the `TimerPloter` class, specifically)\n\n## Eaxmples\n\n### Fibnacci\n\n```python\nfrom algotimer import Timer, TimerPloter\n\n\ndef fib(n):\n    if n <= 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef fibMemo(n):\n    cache = {1: 1, 2: 1}\n\n    def rec(n):\n        if n not in cache:\n            cache[n] = rec(n - 1) + rec(n - 2)\n        return cache[n]\n    return rec(n)\n\n\nif __name__ == '__main__':\n    with Timer('fib, 30') as t:\n        print('fib(30) = ', fib(30))\n\n    with Timer('fib, 35') as t:\n        print('fib(35) = ', fib(35))\n\n    with Timer('fibMemo, 30') as t:\n        print('fibMemo(30) = ', fibMemo(30))\n\n    with Timer('fibMemo, 35') as t:\n        print('fibMemo(35) = ', fibMemo(35))\n\n    ploter = TimerPloter()\n    ploter.plot()\n\n```\nThe output:\n```\nfib(30) =  832040\nfib, 30 Spends 0.217 s\nfib(35) =  9227465\nfib, 35 Spends 2.434 s\nfibMemo(30) =  832040\nfibMemo, 30 Spends 0.0 s\nfibMemo(35) =  9227465\nfibMemo, 35 Spends 0.0 s\n```\nAnd we get two files:\n`logging,csv` is the time data.\n\n```\nfib, 30, 0.217\nfib, 35, 2.434\nfibMemo, 30, 0.0\nfibMemo, 35, 0.0\n```\n\nAnd `Timer.png`, a plot of the data.\n![](https://github.com/shenxiangzhuang/algo-timer/raw/master/examples/fibnacci/Timer.png)\n\n\n\n\n### Classification\n```python\nfrom algotimer import Timer, TimerPloter\nfrom sklearn import datasets\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\n\niris = datasets.load_iris()\n\nwith Timer('GaussianNB, Train'):\n    gnb = GaussianNB()\n    clf = gnb.fit(iris.data, iris.target)\n\nwith Timer('GaussianNB, Test'):\n    y_pred = clf.predict(iris.data)\n    print(\"Number of mislabeled points out of a total %d points : %d\"\n        % (iris.data.shape[0], (iris.target != y_pred).sum()))\n\nwith Timer('KNN(K=3), Train'):\n    neigh = KNeighborsClassifier(n_neighbors=3)\n    clf = neigh.fit(iris.data, iris.target) \n\nwith Timer('KNN(K=3), Test'):\n    y_pred = clf.predict(iris.data)\n    print(\"Number of mislabeled points out of a total %d points : %d\"\n        % (iris.data.shape[0], (iris.target != y_pred).sum()))\n\nwith Timer('KNN(K=5), Train'):\n    neigh = KNeighborsClassifier(n_neighbors=5)\n    clf = neigh.fit(iris.data, iris.target) \n\nwith Timer('KNN(K=5), Test'):\n    y_pred = clf.predict(iris.data)\n    print(\"Number of mislabeled points out of a total %d points : %d\"\n        % (iris.data.shape[0], (iris.target != y_pred).sum()))\n\n# plot it\nploter = TimerPloter()\nploter.plot()\n```\n\nThe output:\n```\nGaussianNB, Train Spends 0.001 s\nNumber of mislabeled points out of a total 150 points : 6\nGaussianNB, Test Spends 0.001 s\nKNN(K=3), Train Spends 0.019 s\nNumber of mislabeled points out of a total 150 points : 6\nKNN(K=3), Test Spends 0.019 s\nKNN(K=5), Train Spends 0.001 s\nNumber of mislabeled points out of a total 150 points : 5\nKNN(K=5), Test Spends 0.01 \n```\n\nFile `logging.csv`:\n```\nGaussianNB, Train, 0.001\nGaussianNB, Test, 0.001\nKNN(K=3), Train, 0.019\nKNN(K=3), Test, 0.019\nKNN(K=5), Train, 0.001\nKNN(K=5), Test, 0.01\n```\n\nFile `Timer.png`\n![](https://github.com/shenxiangzhuang/algo-timer/raw/master/examples/classification/Timer.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shenxiangzhuang/algo-timer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "algo-timer", "package_url": "https://pypi.org/project/algo-timer/", "platform": "", "project_url": "https://pypi.org/project/algo-timer/", "project_urls": {"Homepage": "https://github.com/shenxiangzhuang/algo-timer"}, "release_url": "https://pypi.org/project/algo-timer/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "An easy-to-use algorithms timer.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Algorithm Timer</h1>\n<h2>Overview</h2>\n<p>An easy-to-use algorithm timer.</p>\n<h2>Mechanism</h2>\n<p>We use a context-manager and <code>with</code> in Python to give an convinent way to test\na specific block of code. Just see the following examples.</p>\n<p>Note that we design this plot function here to test some algorithms' runing time and you can use it to test(and plot) the time of any block of code with minor change in source code(the <code>TimerPloter</code> class, specifically)</p>\n<h2>Eaxmples</h2>\n<h3>Fibnacci</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algotimer</span> <span class=\"kn\">import</span> <span class=\"n\">Timer</span><span class=\"p\">,</span> <span class=\"n\">TimerPloter</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fibMemo</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">rec</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cache</span><span class=\"p\">:</span>\n            <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rec</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">rec</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">rec</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'fib, 30'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'fib(30) = '</span><span class=\"p\">,</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">))</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'fib, 35'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'fib(35) = '</span><span class=\"p\">,</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">35</span><span class=\"p\">))</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'fibMemo, 30'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'fibMemo(30) = '</span><span class=\"p\">,</span> <span class=\"n\">fibMemo</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">))</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'fibMemo, 35'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'fibMemo(35) = '</span><span class=\"p\">,</span> <span class=\"n\">fibMemo</span><span class=\"p\">(</span><span class=\"mi\">35</span><span class=\"p\">))</span>\n\n    <span class=\"n\">ploter</span> <span class=\"o\">=</span> <span class=\"n\">TimerPloter</span><span class=\"p\">()</span>\n    <span class=\"n\">ploter</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<p>The output:</p>\n<pre><code>fib(30) =  832040\nfib, 30 Spends 0.217 s\nfib(35) =  9227465\nfib, 35 Spends 2.434 s\nfibMemo(30) =  832040\nfibMemo, 30 Spends 0.0 s\nfibMemo(35) =  9227465\nfibMemo, 35 Spends 0.0 s\n</code></pre>\n<p>And we get two files:\n<code>logging,csv</code> is the time data.</p>\n<pre><code>fib, 30, 0.217\nfib, 35, 2.434\nfibMemo, 30, 0.0\nfibMemo, 35, 0.0\n</code></pre>\n<p>And <code>Timer.png</code>, a plot of the data.\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2774614ffb357a004aea4c1260863be5bb88dccd/68747470733a2f2f6769746875622e636f6d2f7368656e7869616e677a6875616e672f616c676f2d74696d65722f7261772f6d61737465722f6578616d706c65732f6669626e616363692f54696d65722e706e67\"></p>\n<h3>Classification</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algotimer</span> <span class=\"kn\">import</span> <span class=\"n\">Timer</span><span class=\"p\">,</span> <span class=\"n\">TimerPloter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.naive_bayes</span> <span class=\"kn\">import</span> <span class=\"n\">GaussianNB</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.neighbors</span> <span class=\"kn\">import</span> <span class=\"n\">KNeighborsClassifier</span>\n\n<span class=\"n\">iris</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_iris</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'GaussianNB, Train'</span><span class=\"p\">):</span>\n    <span class=\"n\">gnb</span> <span class=\"o\">=</span> <span class=\"n\">GaussianNB</span><span class=\"p\">()</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">gnb</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'GaussianNB, Test'</span><span class=\"p\">):</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Number of mislabeled points out of a total </span><span class=\"si\">%d</span><span class=\"s2\"> points : </span><span class=\"si\">%d</span><span class=\"s2\">\"</span>\n        <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span> <span class=\"o\">!=</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'KNN(K=3), Train'</span><span class=\"p\">):</span>\n    <span class=\"n\">neigh</span> <span class=\"o\">=</span> <span class=\"n\">KNeighborsClassifier</span><span class=\"p\">(</span><span class=\"n\">n_neighbors</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">neigh</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">)</span> \n\n<span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'KNN(K=3), Test'</span><span class=\"p\">):</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Number of mislabeled points out of a total </span><span class=\"si\">%d</span><span class=\"s2\"> points : </span><span class=\"si\">%d</span><span class=\"s2\">\"</span>\n        <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span> <span class=\"o\">!=</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'KNN(K=5), Train'</span><span class=\"p\">):</span>\n    <span class=\"n\">neigh</span> <span class=\"o\">=</span> <span class=\"n\">KNeighborsClassifier</span><span class=\"p\">(</span><span class=\"n\">n_neighbors</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">neigh</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">)</span> \n\n<span class=\"k\">with</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'KNN(K=5), Test'</span><span class=\"p\">):</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Number of mislabeled points out of a total </span><span class=\"si\">%d</span><span class=\"s2\"> points : </span><span class=\"si\">%d</span><span class=\"s2\">\"</span>\n        <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span> <span class=\"o\">!=</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()))</span>\n\n<span class=\"c1\"># plot it</span>\n<span class=\"n\">ploter</span> <span class=\"o\">=</span> <span class=\"n\">TimerPloter</span><span class=\"p\">()</span>\n<span class=\"n\">ploter</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<p>The output:</p>\n<pre><code>GaussianNB, Train Spends 0.001 s\nNumber of mislabeled points out of a total 150 points : 6\nGaussianNB, Test Spends 0.001 s\nKNN(K=3), Train Spends 0.019 s\nNumber of mislabeled points out of a total 150 points : 6\nKNN(K=3), Test Spends 0.019 s\nKNN(K=5), Train Spends 0.001 s\nNumber of mislabeled points out of a total 150 points : 5\nKNN(K=5), Test Spends 0.01 \n</code></pre>\n<p>File <code>logging.csv</code>:</p>\n<pre><code>GaussianNB, Train, 0.001\nGaussianNB, Test, 0.001\nKNN(K=3), Train, 0.019\nKNN(K=3), Test, 0.019\nKNN(K=5), Train, 0.001\nKNN(K=5), Test, 0.01\n</code></pre>\n<p>File <code>Timer.png</code>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8fb5e7fd0ae3b78fdc4b5024809d90987765277/68747470733a2f2f6769746875622e636f6d2f7368656e7869616e677a6875616e672f616c676f2d74696d65722f7261772f6d61737465722f6578616d706c65732f636c617373696669636174696f6e2f54696d65722e706e67\"></p>\n\n          </div>"}, "last_serial": 6185527, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "6f90c6e87b1d463ec05bfd153bc4e26f", "sha256": "cc1e3cb0fae1d21351e6199a7cd293b3a89cee92a5eed1dd4b5b06a264eb4348"}, "downloads": -1, "filename": "algo_timer-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6f90c6e87b1d463ec05bfd153bc4e26f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4145, "upload_time": "2019-11-23T06:10:17", "upload_time_iso_8601": "2019-11-23T06:10:17.836556Z", "url": "https://files.pythonhosted.org/packages/bd/35/82e9ae6124b21493a23aab6245a41c764d8e73a27990d9c9071dcb10a485/algo_timer-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "543803d50a744e4ddc8dca5a630231b1", "sha256": "3da0488fe6af84adf4501863ec5bcee5a5a3fdbcfa2d649abcda071313e7a635"}, "downloads": -1, "filename": "algo-timer-0.0.3.tar.gz", "has_sig": false, "md5_digest": "543803d50a744e4ddc8dca5a630231b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3182, "upload_time": "2019-11-23T06:10:20", "upload_time_iso_8601": "2019-11-23T06:10:20.082612Z", "url": "https://files.pythonhosted.org/packages/a7/a0/ae9c10b4ff923b78372f56bd82191a63a9712bc0288a953d59b369f174b0/algo-timer-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f90c6e87b1d463ec05bfd153bc4e26f", "sha256": "cc1e3cb0fae1d21351e6199a7cd293b3a89cee92a5eed1dd4b5b06a264eb4348"}, "downloads": -1, "filename": "algo_timer-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6f90c6e87b1d463ec05bfd153bc4e26f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4145, "upload_time": "2019-11-23T06:10:17", "upload_time_iso_8601": "2019-11-23T06:10:17.836556Z", "url": "https://files.pythonhosted.org/packages/bd/35/82e9ae6124b21493a23aab6245a41c764d8e73a27990d9c9071dcb10a485/algo_timer-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "543803d50a744e4ddc8dca5a630231b1", "sha256": "3da0488fe6af84adf4501863ec5bcee5a5a3fdbcfa2d649abcda071313e7a635"}, "downloads": -1, "filename": "algo-timer-0.0.3.tar.gz", "has_sig": false, "md5_digest": "543803d50a744e4ddc8dca5a630231b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3182, "upload_time": "2019-11-23T06:10:20", "upload_time_iso_8601": "2019-11-23T06:10:20.082612Z", "url": "https://files.pythonhosted.org/packages/a7/a0/ae9c10b4ff923b78372f56bd82191a63a9712bc0288a953d59b369f174b0/algo-timer-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:49 2020"}