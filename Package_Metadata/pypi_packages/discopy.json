{"info": {"author": "Alexis Toumi", "author_email": "alexis.toumi@cs.ox.ac.uk", "bugtrack_url": null, "classifiers": [], "description": "![snake equation](https://raw.githubusercontent.com/oxford-quantum-group/discopy/master/docs/imgs/snake-equation.png)\n\n# Distributional Compositional Python\n[![readthedocs](https://readthedocs.org/projects/discopy/badge/?version=master)](https://discopy.readthedocs.io/)\n[![Build Status](https://travis-ci.com/oxford-quantum-group/discopy.svg?branch=master)](https://travis-ci.com/oxford-quantum-group/discopy)\n[![codecov](https://codecov.io/gh/oxford-quantum-group/discopy/branch/master/graph/badge.svg)](https://codecov.io/gh/oxford-quantum-group/discopy)\n[![pylint Score](https://mperlet.github.io/pybadge/badges/9.77.svg)](https://www.pylint.org/)\n[![PyPI version](https://badge.fury.io/py/discopy.svg)](https://badge.fury.io/py/discopy)\n\n`discopy` computes natural language meaning in pictures.\n\n## Features\n\n### Diagrams & Recipes\n\nDiagrams are the core data structure of `discopy`, they are generated\nby the following grammar:\n\n```python\ndiagram ::= Box(name, dom=type, cod=type)\n    | diagram @ diagram\n    | diagram >> diagram\n    | Id(type)\n\ntype ::= Ty(name) | type.l | type.r | type @ type | Ty()\n```\n\n[String diagrams](https://ncatlab.org/nlab/show/string+diagram) (also known as [tensor networks](https://ncatlab.org/nlab/show/tensor+network) or [Penrose notation](https://en.wikipedia.org/wiki/Penrose_graphical_notation)) are a graphical calculus for computing with\n[monoidal categories](https://ncatlab.org/nlab/show/monoidal+category).\nFor example, if we take ingredients as types and cooking steps as boxes then a\ndiagram is a recipe:\n\n```python\nfrom discopy import Ty, Box, Id\n\negg, white, yolk = Ty('egg'), Ty('white'), Ty('yolk')\ncrack = Box('crack', egg, white @ yolk)\nmerge = lambda x: Box('merge', x @ x, x)\nswap = lambda x, y: Box('SWAP', x @ y, y @ x)\n\ncrack_two_eggs = crack @ crack\\\n    >> Id(white) @ swap(yolk, white) @ Id(yolk)\\\n    >> merge(white) @ merge(yolk)\ncrack_two_eggs.draw(path='docs/imgs/crack-eggs.png')\n```\n\n![crack two eggs](https://raw.githubusercontent.com/oxford-quantum-group/discopy/master/docs/imgs/crack-eggs.png)\n\n### Snakes & Sentences\n\nWires can be bended using two special kinds of boxes: **cups** and **caps**, which satisfy the **snake equations**, also called [triangle identities](https://ncatlab.org/nlab/show/triangle+identities).\n\n```python\nfrom discopy import Cup, Cap\n\nx = Ty('x')\nleft_snake = Id(x) @ Cap(x.r, x) >> Cup(x, x.r) @ Id(x)\nright_snake =  Cap(x, x.l) @ Id(x) >> Id(x) @ Cup(x.l, x)\nassert left_snake.normal_form() == Id(x) == right_snake.normal_form()\n```\n\n![snake equations, with types](https://raw.githubusercontent.com/oxford-quantum-group/discopy/master/docs/imgs/typed-snake-equation.png)\n\nIn particular, `discopy` can draw the grammatical structure of natural language sentences encoded as reductions in a [pregroup grammar](https://ncatlab.org/nlab/show/pregroup+grammar) (see Lambek, [From Word To Sentence (2008)](http://www.math.mcgill.ca/barr/lambek/pdffiles/2008lambek.pdf) for an  introduction).\n\n```python\nfrom discopy import pregroup, Word\n\ns, n = Ty('s'), Ty('n')\nAlice, Bob = Word('Alice', n), Word('Bob', n)\nloves = Word('loves', n.r @ s @ n.l)\n\nsentence = Alice @ loves @ Bob >> Cup(n, n.r) @ Id(s) @ Cup(n.l, n)\npregroup.draw(sentence, path='docs/imgs/alice-loves-bob.png')\n```\n\n![Alice loves Bob](https://raw.githubusercontent.com/oxford-quantum-group/discopy/master/docs/imgs/alice-loves-bob.png)\n\n### Functors & Rewrites\n\n**Monoidal functors** compute the meaning of a diagram, given an interpretation for each wire and for each box.\nIn particular, **tensor functors** evaluate a diagram as a tensor network using [numpy](https://numpy.org/).\nApplied to pregroup diagrams, `discopy` implements the\n**distributional compositional** (_DisCo_) models of\n[Clark, Coecke, Sadrzadeh (2008)](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.363.8703&rep=rep1&type=pdf).\n\n```python\nimport numpy as np\nfrom discopy import TensorFunctor\n\nF = TensorFunctor(\n    ob={s: 1, n: 2},\n    ar={Alice: [1, 0], loves: [[0, 1], [1, 0]], Bob: [0, 1]})\n\nassert F(sentence) == np.array(1)\n```\n\n**Free functors** (i.e. from diagrams to diagrams) can fill each box with a complex diagram,\nwhile **quivers** allow to construct functors from arbitrary python functions.\nThe result can then be simplified using `diagram.normalize()` to remove the snakes.\n\n```python\nfrom discopy import Functor, Quiver\n\ndef wiring(word):\n    if word.cod == n:  # word is a noun\n        return word\n    if word.cod == n.r @ s @ n.l:  # word is a transitive verb\n        return Cap(n.r, n) @ Cap(n, n.l)\\\n            >> Id(n.r) @ Box(word.name, n @ n, s) @ Id(n.l)\n\nW = Functor(ob={s: s, n: n}, ar=Quiver(wiring))\n\n\nrewrite_steps = W(sentence).normalize()\nsentence.to_gif(*rewrite_steps, path='autonomisation.gif', timestep=1000)\n```\n\n![autonomisation](docs/imgs/autonomisation.gif)\n\n\n## Getting Started\n\n```shell\npip install discopy\n```\n\n## Documentation\n\nThe documentation is hosted at [readthedocs.io](https://discopy.readthedocs.io/),\nyou can also checkout the [notebooks](notebooks/) for a demo!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/oxford-quantum-group/discopy/archive/0.2.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oxford-quantum-group/discopy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "discopy", "package_url": "https://pypi.org/project/discopy/", "platform": "", "project_url": "https://pypi.org/project/discopy/", "project_urls": {"Download": "https://github.com/oxford-quantum-group/discopy/archive/0.2.4.tar.gz", "Homepage": "https://github.com/oxford-quantum-group/discopy"}, "release_url": "https://pypi.org/project/discopy/0.2.4/", "requires_dist": null, "requires_python": "", "summary": "Distributional Compositional Python", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"snake equation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2f510525a54793603de1510ae4511bd27a25b0d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f78666f72642d7175616e74756d2d67726f75702f646973636f70792f6d61737465722f646f63732f696d67732f736e616b652d6571756174696f6e2e706e67\"></p>\n<h1>Distributional Compositional Python</h1>\n<p><a href=\"https://discopy.readthedocs.io/\" rel=\"nofollow\"><img alt=\"readthedocs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12e04f4c7444f7b2b52a68a8e8d92e3ce9103ba1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646973636f70792f62616467652f3f76657273696f6e3d6d6173746572\"></a>\n<a href=\"https://travis-ci.com/oxford-quantum-group/discopy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b1f7e1e9012297a876a0332a05366f665b1c4e7/68747470733a2f2f7472617669732d63692e636f6d2f6f78666f72642d7175616e74756d2d67726f75702f646973636f70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/oxford-quantum-group/discopy\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/187c128794c377d4cc3dce0852b51af6de5f5550/68747470733a2f2f636f6465636f762e696f2f67682f6f78666f72642d7175616e74756d2d67726f75702f646973636f70792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://www.pylint.org/\" rel=\"nofollow\"><img alt=\"pylint Score\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/863ff55a3dde814f138e1a4dd7a658bd69004083/68747470733a2f2f6d7065726c65742e6769746875622e696f2f707962616467652f6261646765732f392e37372e737667\"></a>\n<a href=\"https://badge.fury.io/py/discopy\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/847ef03d2dfcdac3787afd2751e5c622eee2bf6e/68747470733a2f2f62616467652e667572792e696f2f70792f646973636f70792e737667\"></a></p>\n<p><code>discopy</code> computes natural language meaning in pictures.</p>\n<h2>Features</h2>\n<h3>Diagrams &amp; Recipes</h3>\n<p>Diagrams are the core data structure of <code>discopy</code>, they are generated\nby the following grammar:</p>\n<pre><span class=\"n\">diagram</span> <span class=\"p\">:</span><span class=\"o\">:=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">cod</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n    <span class=\"o\">|</span> <span class=\"n\">diagram</span> <span class=\"o\">@</span> <span class=\"n\">diagram</span>\n    <span class=\"o\">|</span> <span class=\"n\">diagram</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">diagram</span>\n    <span class=\"o\">|</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n\n<span class=\"nb\">type</span> <span class=\"p\">:</span><span class=\"o\">:=</span> <span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"nb\">type</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">|</span> <span class=\"nb\">type</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">|</span> <span class=\"nb\">type</span> <span class=\"o\">@</span> <span class=\"nb\">type</span> <span class=\"o\">|</span> <span class=\"n\">Ty</span><span class=\"p\">()</span>\n</pre>\n<p><a href=\"https://ncatlab.org/nlab/show/string+diagram\" rel=\"nofollow\">String diagrams</a> (also known as <a href=\"https://ncatlab.org/nlab/show/tensor+network\" rel=\"nofollow\">tensor networks</a> or <a href=\"https://en.wikipedia.org/wiki/Penrose_graphical_notation\" rel=\"nofollow\">Penrose notation</a>) are a graphical calculus for computing with\n<a href=\"https://ncatlab.org/nlab/show/monoidal+category\" rel=\"nofollow\">monoidal categories</a>.\nFor example, if we take ingredients as types and cooking steps as boxes then a\ndiagram is a recipe:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">discopy</span> <span class=\"kn\">import</span> <span class=\"n\">Ty</span><span class=\"p\">,</span> <span class=\"n\">Box</span><span class=\"p\">,</span> <span class=\"n\">Id</span>\n\n<span class=\"n\">egg</span><span class=\"p\">,</span> <span class=\"n\">white</span><span class=\"p\">,</span> <span class=\"n\">yolk</span> <span class=\"o\">=</span> <span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"s1\">'egg'</span><span class=\"p\">),</span> <span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"s1\">'white'</span><span class=\"p\">),</span> <span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"s1\">'yolk'</span><span class=\"p\">)</span>\n<span class=\"n\">crack</span> <span class=\"o\">=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s1\">'crack'</span><span class=\"p\">,</span> <span class=\"n\">egg</span><span class=\"p\">,</span> <span class=\"n\">white</span> <span class=\"o\">@</span> <span class=\"n\">yolk</span><span class=\"p\">)</span>\n<span class=\"n\">merge</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s1\">'merge'</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">@</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">swap</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"s1\">'SWAP'</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">@</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">@</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">crack_two_eggs</span> <span class=\"o\">=</span> <span class=\"n\">crack</span> <span class=\"o\">@</span> <span class=\"n\">crack</span>\\\n    <span class=\"o\">&gt;&gt;</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">white</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">yolk</span><span class=\"p\">,</span> <span class=\"n\">white</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">yolk</span><span class=\"p\">)</span>\\\n    <span class=\"o\">&gt;&gt;</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">white</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">yolk</span><span class=\"p\">)</span>\n<span class=\"n\">crack_two_eggs</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'docs/imgs/crack-eggs.png'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"crack two eggs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9fb7d04bc2629b051e3048e3add590a9dbc487d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f78666f72642d7175616e74756d2d67726f75702f646973636f70792f6d61737465722f646f63732f696d67732f637261636b2d656767732e706e67\"></p>\n<h3>Snakes &amp; Sentences</h3>\n<p>Wires can be bended using two special kinds of boxes: <strong>cups</strong> and <strong>caps</strong>, which satisfy the <strong>snake equations</strong>, also called <a href=\"https://ncatlab.org/nlab/show/triangle+identities\" rel=\"nofollow\">triangle identities</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">discopy</span> <span class=\"kn\">import</span> <span class=\"n\">Cup</span><span class=\"p\">,</span> <span class=\"n\">Cap</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">left_snake</span> <span class=\"o\">=</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Cap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">Cup</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">right_snake</span> <span class=\"o\">=</span>  <span class=\"n\">Cap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Cup</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">left_snake</span><span class=\"o\">.</span><span class=\"n\">normal_form</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">right_snake</span><span class=\"o\">.</span><span class=\"n\">normal_form</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"snake equations, with types\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c87bc877b7e80f59058568ad5640707dd8fda0bb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f78666f72642d7175616e74756d2d67726f75702f646973636f70792f6d61737465722f646f63732f696d67732f74797065642d736e616b652d6571756174696f6e2e706e67\"></p>\n<p>In particular, <code>discopy</code> can draw the grammatical structure of natural language sentences encoded as reductions in a <a href=\"https://ncatlab.org/nlab/show/pregroup+grammar\" rel=\"nofollow\">pregroup grammar</a> (see Lambek, <a href=\"http://www.math.mcgill.ca/barr/lambek/pdffiles/2008lambek.pdf\" rel=\"nofollow\">From Word To Sentence (2008)</a> for an  introduction).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">discopy</span> <span class=\"kn\">import</span> <span class=\"n\">pregroup</span><span class=\"p\">,</span> <span class=\"n\">Word</span>\n\n<span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"s1\">'s'</span><span class=\"p\">),</span> <span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">)</span>\n<span class=\"n\">Alice</span><span class=\"p\">,</span> <span class=\"n\">Bob</span> <span class=\"o\">=</span> <span class=\"n\">Word</span><span class=\"p\">(</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">Word</span><span class=\"p\">(</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">loves</span> <span class=\"o\">=</span> <span class=\"n\">Word</span><span class=\"p\">(</span><span class=\"s1\">'loves'</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">@</span> <span class=\"n\">s</span> <span class=\"o\">@</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">)</span>\n\n<span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"n\">Alice</span> <span class=\"o\">@</span> <span class=\"n\">loves</span> <span class=\"o\">@</span> <span class=\"n\">Bob</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">Cup</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Cup</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">pregroup</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'docs/imgs/alice-loves-bob.png'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Alice loves Bob\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2f2157a3ca182936d241abeb29a520c8ea8f63b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f78666f72642d7175616e74756d2d67726f75702f646973636f70792f6d61737465722f646f63732f696d67732f616c6963652d6c6f7665732d626f622e706e67\"></p>\n<h3>Functors &amp; Rewrites</h3>\n<p><strong>Monoidal functors</strong> compute the meaning of a diagram, given an interpretation for each wire and for each box.\nIn particular, <strong>tensor functors</strong> evaluate a diagram as a tensor network using <a href=\"https://numpy.org/\" rel=\"nofollow\">numpy</a>.\nApplied to pregroup diagrams, <code>discopy</code> implements the\n<strong>distributional compositional</strong> (<em>DisCo</em>) models of\n<a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.363.8703&amp;rep=rep1&amp;type=pdf\" rel=\"nofollow\">Clark, Coecke, Sadrzadeh (2008)</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">discopy</span> <span class=\"kn\">import</span> <span class=\"n\">TensorFunctor</span>\n\n<span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">TensorFunctor</span><span class=\"p\">(</span>\n    <span class=\"n\">ob</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"n\">ar</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">Alice</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">loves</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"n\">Bob</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]})</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Free functors</strong> (i.e. from diagrams to diagrams) can fill each box with a complex diagram,\nwhile <strong>quivers</strong> allow to construct functors from arbitrary python functions.\nThe result can then be simplified using <code>diagram.normalize()</code> to remove the snakes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">discopy</span> <span class=\"kn\">import</span> <span class=\"n\">Functor</span><span class=\"p\">,</span> <span class=\"n\">Quiver</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">wiring</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">cod</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">:</span>  <span class=\"c1\"># word is a noun</span>\n        <span class=\"k\">return</span> <span class=\"n\">word</span>\n    <span class=\"k\">if</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">cod</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">@</span> <span class=\"n\">s</span> <span class=\"o\">@</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">:</span>  <span class=\"c1\"># word is a transitive verb</span>\n        <span class=\"k\">return</span> <span class=\"n\">Cap</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Cap</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">)</span>\\\n            <span class=\"o\">&gt;&gt;</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">@</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">)</span>\n\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">Functor</span><span class=\"p\">(</span><span class=\"n\">ob</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span><span class=\"p\">},</span> <span class=\"n\">ar</span><span class=\"o\">=</span><span class=\"n\">Quiver</span><span class=\"p\">(</span><span class=\"n\">wiring</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">rewrite_steps</span> <span class=\"o\">=</span> <span class=\"n\">W</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">()</span>\n<span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"n\">to_gif</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">rewrite_steps</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'autonomisation.gif'</span><span class=\"p\">,</span> <span class=\"n\">timestep</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"autonomisation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bbc1f9d1488037027e40826ad8f92604475004b0/646f63732f696d67732f6175746f6e6f6d69736174696f6e2e676966\"></p>\n<h2>Getting Started</h2>\n<pre>pip install discopy\n</pre>\n<h2>Documentation</h2>\n<p>The documentation is hosted at <a href=\"https://discopy.readthedocs.io/\" rel=\"nofollow\">readthedocs.io</a>,\nyou can also checkout the <a href=\"notebooks/\" rel=\"nofollow\">notebooks</a> for a demo!</p>\n\n          </div>"}, "last_serial": 6984701, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "eb58a0e40dea5ff350e43d4253fb8437", "sha256": "198ef4c7f58514e37eb4de2025019dadec90f46e9ae364725ca516e2cff97155"}, "downloads": -1, "filename": "discopy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "eb58a0e40dea5ff350e43d4253fb8437", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19414, "upload_time": "2019-12-03T18:44:30", "upload_time_iso_8601": "2019-12-03T18:44:30.814469Z", "url": "https://files.pythonhosted.org/packages/f7/f1/b1a19132822303af89ce215a0de1063e98b95cb5093a2f6e120f4836ab6d/discopy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c3833cb340c93d99d584f0b076835d18", "sha256": "3041ddb02a5e7cb1ace5f4b3109cbee9adafb294acebbcfb6bc955b5b977024a"}, "downloads": -1, "filename": "discopy-0.1.2-py3.7.egg", "has_sig": false, "md5_digest": "c3833cb340c93d99d584f0b076835d18", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 61821, "upload_time": "2019-12-13T19:32:24", "upload_time_iso_8601": "2019-12-13T19:32:24.441738Z", "url": "https://files.pythonhosted.org/packages/84/07/096c08d6d952e6518f8297a97e3ecd31cb542b6bef4d237437d009a8cdd8/discopy-0.1.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef9fdf99360af758413898a1473e0928", "sha256": "4f675410c61f4e67faa5a86259920804825243ddaa77833ae1b4c97e4af54d4f"}, "downloads": -1, "filename": "discopy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ef9fdf99360af758413898a1473e0928", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20113, "upload_time": "2019-12-13T19:12:42", "upload_time_iso_8601": "2019-12-13T19:12:42.612174Z", "url": "https://files.pythonhosted.org/packages/4a/0e/f760323a0dc40a86e1a3c549db2e32c549dcb6ac2ad0be3c5f31d6ace542/discopy-0.1.2.tar.gz", "yanked": false}], "0.1.2b0": [{"comment_text": "", "digests": {"md5": "24c281806237631374474f56f5b4ea31", "sha256": "adba0435c9d0ac0dbeed379bbf4e629bbe068af1af809e4b4b5cd5544fec011b"}, "downloads": -1, "filename": "discopy-0.1.2b0-py3.7.egg", "has_sig": false, "md5_digest": "24c281806237631374474f56f5b4ea31", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 61793, "upload_time": "2019-12-13T19:32:27", "upload_time_iso_8601": "2019-12-13T19:32:27.214786Z", "url": "https://files.pythonhosted.org/packages/6d/77/411463ccf1ad8da199299ce13772eab161bd64a606458eaf631f57da8fee/discopy-0.1.2b0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "242b17d62afb5ed26563677c985de9bd", "sha256": "8070cb9648dde2ab241718d24572662af00505d877c64a5a578c5a8fd600f581"}, "downloads": -1, "filename": "discopy-0.1.2b0.tar.gz", "has_sig": false, "md5_digest": "242b17d62afb5ed26563677c985de9bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21617, "upload_time": "2019-12-13T19:32:28", "upload_time_iso_8601": "2019-12-13T19:32:28.878567Z", "url": "https://files.pythonhosted.org/packages/d3/08/78cc9df02c65123f46c6ad79ceae0709494c5ce32abd35fa569cd6c90599/discopy-0.1.2b0.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "67012aaf673d79c2a6e8889dec296017", "sha256": "09c715d1ca85d86ae5d1899cf768f7c9420fbd37fa65ad9531ebc4bcef218e8f"}, "downloads": -1, "filename": "discopy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "67012aaf673d79c2a6e8889dec296017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21745, "upload_time": "2019-12-16T15:35:01", "upload_time_iso_8601": "2019-12-16T15:35:01.684099Z", "url": "https://files.pythonhosted.org/packages/38/c0/d1b8de61e19d6a05524c280e7b4bd5ec318e87973516dfc46922e1e78313/discopy-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "34a49a094607d0b8bbfeeb5b5e2780ab", "sha256": "ca6f71173e6e7be134ff3b0bfc760b4181145660b66b6280ed7d894c056314c6"}, "downloads": -1, "filename": "discopy-0.1.4.tar.gz", "has_sig": false, "md5_digest": "34a49a094607d0b8bbfeeb5b5e2780ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26280, "upload_time": "2020-01-08T09:07:48", "upload_time_iso_8601": "2020-01-08T09:07:48.178781Z", "url": "https://files.pythonhosted.org/packages/20/0e/131b5b38b022aba1b9a014d446505bdd29465969c4765697cf0757370165/discopy-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "e913fd9cf3b259c8d8e3de474a5d9fb0", "sha256": "9addb29db530e9c2098709b6a9fb8b755e76150c34496febfe18a47c36fba1da"}, "downloads": -1, "filename": "discopy-0.1.5.tar.gz", "has_sig": false, "md5_digest": "e913fd9cf3b259c8d8e3de474a5d9fb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23865, "upload_time": "2020-01-09T17:40:48", "upload_time_iso_8601": "2020-01-09T17:40:48.702781Z", "url": "https://files.pythonhosted.org/packages/81/38/fff5476db8befa63ecf8255d80f56c6581a369e098ba2dce6a6e33c1cff7/discopy-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "df5c548fc82301183fe0310a233b84cb", "sha256": "1e1c378d34aa63d57430a723017b0e7f2a94e67d33ddafd814dda28acc9b4c80"}, "downloads": -1, "filename": "discopy-0.1.6.tar.gz", "has_sig": false, "md5_digest": "df5c548fc82301183fe0310a233b84cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27530, "upload_time": "2020-01-17T10:44:40", "upload_time_iso_8601": "2020-01-17T10:44:40.103101Z", "url": "https://files.pythonhosted.org/packages/ef/6d/d41649252164e3eb686e790c2fa30ac6cd73b8ebb14770951bdb79363fec/discopy-0.1.6.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a89cd4b8dfe5b1f08cbd724a2c964a61", "sha256": "77b90e8259cbf27a33402c14f20ea57c0439b64f0c7e5d9b2670e2b73d0430dd"}, "downloads": -1, "filename": "discopy-0.2.tar.gz", "has_sig": false, "md5_digest": "a89cd4b8dfe5b1f08cbd724a2c964a61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31294, "upload_time": "2020-01-18T21:13:03", "upload_time_iso_8601": "2020-01-18T21:13:03.640273Z", "url": "https://files.pythonhosted.org/packages/bd/1c/f1a88caab49de0060e3bde146d364f33ed457037a5739d4b37e97721e7a5/discopy-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "78a640c6c4d320c41fdbdd419e082e4c", "sha256": "d7d311603da5e0088468704067535ceb7313027821f69df3f3110a5079134f62"}, "downloads": -1, "filename": "discopy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "78a640c6c4d320c41fdbdd419e082e4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31465, "upload_time": "2020-01-19T15:44:07", "upload_time_iso_8601": "2020-01-19T15:44:07.096755Z", "url": "https://files.pythonhosted.org/packages/e0/51/a29ded5856d2398428f8b417f90f67ba459196b16a4e149cda9ac1f61df6/discopy-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "bd1cc2a9a61cc9b36b511c57039e1cf9", "sha256": "d01304d797db1220d4273957b17c84841740f991d6713afdbaa0494d3a34bee6"}, "downloads": -1, "filename": "discopy-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bd1cc2a9a61cc9b36b511c57039e1cf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36127, "upload_time": "2020-02-06T14:50:11", "upload_time_iso_8601": "2020-02-06T14:50:11.474778Z", "url": "https://files.pythonhosted.org/packages/cb/52/881e2c55277b5a96282ccacbbe4ab4133d617bf0ea594f6e65557845e916/discopy-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "4cb18ecb2c0c64ade714de8b470c5f69", "sha256": "f7ce7554f4f0a911cffbf6a20df4933d2504f902585b6b9221cf18b32a141e16"}, "downloads": -1, "filename": "discopy-0.2.3.tar.gz", "has_sig": false, "md5_digest": "4cb18ecb2c0c64ade714de8b470c5f69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36830, "upload_time": "2020-02-11T15:35:29", "upload_time_iso_8601": "2020-02-11T15:35:29.425999Z", "url": "https://files.pythonhosted.org/packages/17/e3/6bdc8c11b914ec3c9ceaf4b7fa40ce90d74b7d0d7f3285bd3b4dc8e5ca52/discopy-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "fa46dbe9f8845f47b004a2c5bbc1e330", "sha256": "bedfbee0037235f618738a75c54dbc5ac60cacaf32ba1c174f782fac21df4856"}, "downloads": -1, "filename": "discopy-0.2.4.tar.gz", "has_sig": false, "md5_digest": "fa46dbe9f8845f47b004a2c5bbc1e330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38857, "upload_time": "2020-04-09T10:02:41", "upload_time_iso_8601": "2020-04-09T10:02:41.317317Z", "url": "https://files.pythonhosted.org/packages/09/8e/e6f47ca5b82f4c90675e63b57c5cb60b909473d8999114c1677f0cb3e6ba/discopy-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa46dbe9f8845f47b004a2c5bbc1e330", "sha256": "bedfbee0037235f618738a75c54dbc5ac60cacaf32ba1c174f782fac21df4856"}, "downloads": -1, "filename": "discopy-0.2.4.tar.gz", "has_sig": false, "md5_digest": "fa46dbe9f8845f47b004a2c5bbc1e330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38857, "upload_time": "2020-04-09T10:02:41", "upload_time_iso_8601": "2020-04-09T10:02:41.317317Z", "url": "https://files.pythonhosted.org/packages/09/8e/e6f47ca5b82f4c90675e63b57c5cb60b909473d8999114c1677f0cb3e6ba/discopy-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:13 2020"}