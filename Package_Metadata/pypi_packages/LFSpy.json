{"info": {"author": "Oliver Cook, Kiret Dhindsa, Thomas Mudway, Areeb Khawaja, Ron Harwood and Ranil Sonnadara", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Localized Feature Selection (LFS)\n\nFull documentation can be found at: [lfspy.readthedocs.io](https://lfspy.readthedocs.io)\n\nLocalized feature selection (LFS) is a supervised machine learning approach for embedding localized feature selection in classification. The sample space is partitioned into overlapping regions, and subsets of features are selected that are optimal for classification within each local region. As the size and membership of the feature subsets can vary across regions, LFS is able to adapt to local variation across the entire sample space.\n\nThis repository contains a python implementation of this method that is compatible with scikit-learn pipelines. For a Matlab version, refer to [https://github.com/armanfn/LFS](https://github.com/armanfn/LFS)\n\n### Statement of Need\n\nLFSpy offers an implementation of the Local Feature Selection (LFS) algorithm that is compatible with scikit-learn, one of the most widely used machine learning packages today. LFS combines classification with feature selection, and distinguishes itself by it flexibility in selecting a different subset of features for different data points based on what is most discriminative in local regions of the feature space. This means LFS overcomes a well-known weakness of many classification algorithms, i.e., classification for non-stationary data where the number of features is high relative to the number of samples. \n\n## Installation\n\n```bash\npip install lfspy\n```\n\n### Dependancies\nLFS requires:\n* Python 3\n* [NumPy](https://numpy.org/)>=1.14\n* [SciPy](https://www.scipy.org/)>=1.1\n* [Scikit-learn](https://scikit-learn.org/stable/index.html)>=0.18.2\n* [pytest](https://docs.pytest.org/en/latest/)>=5.0.0\n\n### Testing\nWe recommend running the provided test after installing LFSpy to ensure the results obtained match expected outputs.\n\n`pytest` may be installed either directly through pip (`pip install pytest`) or using the `test`\nextra (`pip install LFSpy[test]`).\n\n```bash\npytest --pyargs LFSpy\n```\n\nThis will output to console whether or not the results of LFSpy on two datasets (the sample dataset provided in this repository, and scikit-learn's Fisher Iris dataset) are exactly as expected.\n\nSo far, LFSpy has been tested on Windows 10 with and without Conda, and on Ubuntu. In all cases, results have been exactly the expected results.\n\n## Usage\nTo use LFSpy on its own:\n```python\nfrom LFSpy import LocalFeatureSelection\n\nlfs = LocalFeatureSelection()\nlfs.fit(training_data, training_labels)\npredicted_labels = lfs.predict(testing_data)\ntotal_error, class_error = lfs.score(testing_data, testing_labels)\n```\n\nTo use LFSpy as part of an sklearn pipeline:\n```python\nfrom LFS import LocalFeatureSelection\nfrom sklearn.pipeline import Pipeline\n\nlfs = LocalFeatureSelection()\npipeline = Pipeline([('lfs', lfs)])\npipeline.fit(training_data, training_labels)\npredicted_labels = pipeline.predict(testing_data)\ntotal_error, class_error = pipeline.score(testing_data, testing_labels)\n```\n\n### Tunable Parameters\n* `alpha`: (default: 19) the maximum number of selected features for each representative point\n* `gamma`: (default: 0.2) impurity level tolerance, controls proportion of out-of-class samples can be in local region\n* `tau`: (default: 2) number of passes through the training set\n* `sigma`: (default: 1) adjusts weightings for observations based on their distance, values greater than 1 result in lower weighting\n* `n_beta`: (default: 20) number of beta values to test, controls the relative weighting of intra-class vs. inter-class distance in the objective function\n* `nrrp`: (default: 2000) number of iterations for randomized rounding process\n* `knn`: (default: 1) number of nearest neighbours to compare for classification\n\n### Example\nThis example uses the sample data ([matlab_Data.mat](https://github.com/McMasterRS/LFSpy/blob/master/LFSpy/tests/matlab_Data.mat)) available in the [LFSpy/tests](https://github.com/McMasterRS/LFSpy/tree/master/LFSpy/tests) folder. The full example can be found in [example.py](https://github.com/McMasterRS/LFSpy/blob/master/example.py). On our test system, the fnial output prints the statement, \"LFS test accuracy: 0.7962962962962963\".\n\nThe code provided in [comparisons.py]{https://github.com/McMasterRS/LFSpy/blob/master/LFSpy/comparisons/comparisons.py) serve as additional examples of how to use LFSpy.\n\n```python\nimport numpy as np\nfrom scipy.io import loadmat\nfrom LFSpy import LocalFeatureSelection\nfrom sklearn.pipeline import Pipeline\n\nmat = loadmat('LFSpy/tests/matlab_Data')\nx_train = mat['Train'].T\ny_train = mat['TrainLables'][0]\nx_test = mat['Test'].T\ny_test = mat['TestLables'][0]\n\nprint('Training and testing an LFS model with default parameters.\\nThis may take a few minutes...')\nlfs = LocalFeatureSelection(rr_seed=777)\npipeline = Pipeline([('classifier', lfs)])\npipeline.fit(x_train, y_train)\ny_pred = pipeline.predict(x_test)\nscore = pipeline.score(x_test, y_test)\nprint('LFS test accuracy: {}'.format(score))\n```\n\n## Contribution Guidelines\n\nPlease see our [Contribution Guidelines](https://lfspy.readthedocs.io/en/latest/Community%20Guidelines.html) page.\n\n\n## Authors\n*  Oliver Cook\n*  Kiret Dhindsa\n*  Areeb Khawajaby\n*  Ron Harwood\n*  Thomas Mudway\n\n## Acknowledgments\n\n1. N. Armanfard, JP. Reilly, and M. Komeili, \"Local Feature Selection for Data Classification\", IEEE Trans. on Pattern Analysis and Machine Intelligence, vol. 38, no. 6, pp. 1217-1227, 2016.\n2. N. Armanfard, JP. Reilly, and M. Komeili, \"Logistic Localized Modeling of the Sample Space for Feature Selection and Classification\", IEEE Transactions on Neural Networks and Learning Systems, vol. 29, no. 5, pp. 1396-1413, 2018.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/McMasterRS/LFSpy/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "LFSpy", "package_url": "https://pypi.org/project/LFSpy/", "platform": "", "project_url": "https://pypi.org/project/LFSpy/", "project_urls": {"Homepage": "https://github.com/McMasterRS/LFSpy/"}, "release_url": "https://pypi.org/project/LFSpy/1.0.4/", "requires_dist": ["numpy (>=1.14)", "scipy (>=1.1)", "scikit-learn (>=0.18.2)", "pytest (>=5.0.0) ; extra == 'test'"], "requires_python": ">=3.6", "summary": "", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Localized Feature Selection (LFS)</h1>\n<p>Full documentation can be found at: <a href=\"https://lfspy.readthedocs.io\" rel=\"nofollow\">lfspy.readthedocs.io</a></p>\n<p>Localized feature selection (LFS) is a supervised machine learning approach for embedding localized feature selection in classification. The sample space is partitioned into overlapping regions, and subsets of features are selected that are optimal for classification within each local region. As the size and membership of the feature subsets can vary across regions, LFS is able to adapt to local variation across the entire sample space.</p>\n<p>This repository contains a python implementation of this method that is compatible with scikit-learn pipelines. For a Matlab version, refer to <a href=\"https://github.com/armanfn/LFS\" rel=\"nofollow\">https://github.com/armanfn/LFS</a></p>\n<h3>Statement of Need</h3>\n<p>LFSpy offers an implementation of the Local Feature Selection (LFS) algorithm that is compatible with scikit-learn, one of the most widely used machine learning packages today. LFS combines classification with feature selection, and distinguishes itself by it flexibility in selecting a different subset of features for different data points based on what is most discriminative in local regions of the feature space. This means LFS overcomes a well-known weakness of many classification algorithms, i.e., classification for non-stationary data where the number of features is high relative to the number of samples.</p>\n<h2>Installation</h2>\n<pre>pip install lfspy\n</pre>\n<h3>Dependancies</h3>\n<p>LFS requires:</p>\n<ul>\n<li>Python 3</li>\n<li><a href=\"https://numpy.org/\" rel=\"nofollow\">NumPy</a>&gt;=1.14</li>\n<li><a href=\"https://www.scipy.org/\" rel=\"nofollow\">SciPy</a>&gt;=1.1</li>\n<li><a href=\"https://scikit-learn.org/stable/index.html\" rel=\"nofollow\">Scikit-learn</a>&gt;=0.18.2</li>\n<li><a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>&gt;=5.0.0</li>\n</ul>\n<h3>Testing</h3>\n<p>We recommend running the provided test after installing LFSpy to ensure the results obtained match expected outputs.</p>\n<p><code>pytest</code> may be installed either directly through pip (<code>pip install pytest</code>) or using the <code>test</code>\nextra (<code>pip install LFSpy[test]</code>).</p>\n<pre>pytest --pyargs LFSpy\n</pre>\n<p>This will output to console whether or not the results of LFSpy on two datasets (the sample dataset provided in this repository, and scikit-learn's Fisher Iris dataset) are exactly as expected.</p>\n<p>So far, LFSpy has been tested on Windows 10 with and without Conda, and on Ubuntu. In all cases, results have been exactly the expected results.</p>\n<h2>Usage</h2>\n<p>To use LFSpy on its own:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">LFSpy</span> <span class=\"kn\">import</span> <span class=\"n\">LocalFeatureSelection</span>\n\n<span class=\"n\">lfs</span> <span class=\"o\">=</span> <span class=\"n\">LocalFeatureSelection</span><span class=\"p\">()</span>\n<span class=\"n\">lfs</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">training_data</span><span class=\"p\">,</span> <span class=\"n\">training_labels</span><span class=\"p\">)</span>\n<span class=\"n\">predicted_labels</span> <span class=\"o\">=</span> <span class=\"n\">lfs</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">testing_data</span><span class=\"p\">)</span>\n<span class=\"n\">total_error</span><span class=\"p\">,</span> <span class=\"n\">class_error</span> <span class=\"o\">=</span> <span class=\"n\">lfs</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">testing_data</span><span class=\"p\">,</span> <span class=\"n\">testing_labels</span><span class=\"p\">)</span>\n</pre>\n<p>To use LFSpy as part of an sklearn pipeline:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">LFS</span> <span class=\"kn\">import</span> <span class=\"n\">LocalFeatureSelection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n\n<span class=\"n\">lfs</span> <span class=\"o\">=</span> <span class=\"n\">LocalFeatureSelection</span><span class=\"p\">()</span>\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">([(</span><span class=\"s1\">'lfs'</span><span class=\"p\">,</span> <span class=\"n\">lfs</span><span class=\"p\">)])</span>\n<span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">training_data</span><span class=\"p\">,</span> <span class=\"n\">training_labels</span><span class=\"p\">)</span>\n<span class=\"n\">predicted_labels</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">testing_data</span><span class=\"p\">)</span>\n<span class=\"n\">total_error</span><span class=\"p\">,</span> <span class=\"n\">class_error</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">testing_data</span><span class=\"p\">,</span> <span class=\"n\">testing_labels</span><span class=\"p\">)</span>\n</pre>\n<h3>Tunable Parameters</h3>\n<ul>\n<li><code>alpha</code>: (default: 19) the maximum number of selected features for each representative point</li>\n<li><code>gamma</code>: (default: 0.2) impurity level tolerance, controls proportion of out-of-class samples can be in local region</li>\n<li><code>tau</code>: (default: 2) number of passes through the training set</li>\n<li><code>sigma</code>: (default: 1) adjusts weightings for observations based on their distance, values greater than 1 result in lower weighting</li>\n<li><code>n_beta</code>: (default: 20) number of beta values to test, controls the relative weighting of intra-class vs. inter-class distance in the objective function</li>\n<li><code>nrrp</code>: (default: 2000) number of iterations for randomized rounding process</li>\n<li><code>knn</code>: (default: 1) number of nearest neighbours to compare for classification</li>\n</ul>\n<h3>Example</h3>\n<p>This example uses the sample data (<a href=\"https://github.com/McMasterRS/LFSpy/blob/master/LFSpy/tests/matlab_Data.mat\" rel=\"nofollow\">matlab_Data.mat</a>) available in the <a href=\"https://github.com/McMasterRS/LFSpy/tree/master/LFSpy/tests\" rel=\"nofollow\">LFSpy/tests</a> folder. The full example can be found in <a href=\"https://github.com/McMasterRS/LFSpy/blob/master/example.py\" rel=\"nofollow\">example.py</a>. On our test system, the fnial output prints the statement, \"LFS test accuracy: 0.7962962962962963\".</p>\n<p>The code provided in [comparisons.py]{<a href=\"https://github.com/McMasterRS/LFSpy/blob/master/LFSpy/comparisons/comparisons.py\" rel=\"nofollow\">https://github.com/McMasterRS/LFSpy/blob/master/LFSpy/comparisons/comparisons.py</a>) serve as additional examples of how to use LFSpy.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.io</span> <span class=\"kn\">import</span> <span class=\"n\">loadmat</span>\n<span class=\"kn\">from</span> <span class=\"nn\">LFSpy</span> <span class=\"kn\">import</span> <span class=\"n\">LocalFeatureSelection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n\n<span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"n\">loadmat</span><span class=\"p\">(</span><span class=\"s1\">'LFSpy/tests/matlab_Data'</span><span class=\"p\">)</span>\n<span class=\"n\">x_train</span> <span class=\"o\">=</span> <span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"s1\">'Train'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"s1\">'TrainLables'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">x_test</span> <span class=\"o\">=</span> <span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"s1\">'Test'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"s1\">'TestLables'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Training and testing an LFS model with default parameters.</span><span class=\"se\">\\n</span><span class=\"s1\">This may take a few minutes...'</span><span class=\"p\">)</span>\n<span class=\"n\">lfs</span> <span class=\"o\">=</span> <span class=\"n\">LocalFeatureSelection</span><span class=\"p\">(</span><span class=\"n\">rr_seed</span><span class=\"o\">=</span><span class=\"mi\">777</span><span class=\"p\">)</span>\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">([(</span><span class=\"s1\">'classifier'</span><span class=\"p\">,</span> <span class=\"n\">lfs</span><span class=\"p\">)])</span>\n<span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">)</span>\n<span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'LFS test accuracy: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">))</span>\n</pre>\n<h2>Contribution Guidelines</h2>\n<p>Please see our <a href=\"https://lfspy.readthedocs.io/en/latest/Community%20Guidelines.html\" rel=\"nofollow\">Contribution Guidelines</a> page.</p>\n<h2>Authors</h2>\n<ul>\n<li>Oliver Cook</li>\n<li>Kiret Dhindsa</li>\n<li>Areeb Khawajaby</li>\n<li>Ron Harwood</li>\n<li>Thomas Mudway</li>\n</ul>\n<h2>Acknowledgments</h2>\n<ol>\n<li>N. Armanfard, JP. Reilly, and M. Komeili, \"Local Feature Selection for Data Classification\", IEEE Trans. on Pattern Analysis and Machine Intelligence, vol. 38, no. 6, pp. 1217-1227, 2016.</li>\n<li>N. Armanfard, JP. Reilly, and M. Komeili, \"Logistic Localized Modeling of the Sample Space for Feature Selection and Classification\", IEEE Transactions on Neural Networks and Learning Systems, vol. 29, no. 5, pp. 1396-1413, 2018.</li>\n</ol>\n\n          </div>"}, "last_serial": 7181990, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "48662ce1afe1158a71157194fecae2d1", "sha256": "216e5f869b6d96687f6551a96babea6991d9e68042d5fd1b26d7ec91e3077c98"}, "downloads": -1, "filename": "LFSpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48662ce1afe1158a71157194fecae2d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10283, "upload_time": "2019-11-26T19:51:40", "upload_time_iso_8601": "2019-11-26T19:51:40.217131Z", "url": "https://files.pythonhosted.org/packages/a3/42/bb7efc9a6f997e0be77c46141e1be6fe69eb2fd8c14bc65d4a31437e4784/LFSpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6f78e50f522426304b8b432ad443a9a", "sha256": "9cba04df33ce1a6c4bcb85c66ac7f9174e341f9e0f9c9ab147e7cc58a6f23a28"}, "downloads": -1, "filename": "LFSpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e6f78e50f522426304b8b432ad443a9a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8731, "upload_time": "2019-11-26T19:51:42", "upload_time_iso_8601": "2019-11-26T19:51:42.454843Z", "url": "https://files.pythonhosted.org/packages/c3/d5/5d0096ebdbcf862817b88f6f1c1a02ef39ba13fabaec9bab7e92c20207f9/LFSpy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "629216b2972bb0feb5e3577d5be17f6f", "sha256": "11d1eba726880bfb561e055bbd7954d88662be1013a0d57aad2546b7affca1b8"}, "downloads": -1, "filename": "LFSpy-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "629216b2972bb0feb5e3577d5be17f6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 225917, "upload_time": "2019-12-16T21:40:41", "upload_time_iso_8601": "2019-12-16T21:40:41.392639Z", "url": "https://files.pythonhosted.org/packages/c4/12/372ab54c2804802f39c07c95abde3448c48db721e68a5e687e4657637c00/LFSpy-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30e8c6c0df472abef5533b66fea77d2f", "sha256": "8426999880d1b71733508d7a38c7f6eefba3c1ed330b43171ff6936ac2f1b4bc"}, "downloads": -1, "filename": "LFSpy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "30e8c6c0df472abef5533b66fea77d2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 226091, "upload_time": "2019-12-16T21:40:43", "upload_time_iso_8601": "2019-12-16T21:40:43.302736Z", "url": "https://files.pythonhosted.org/packages/ea/5d/3d6c1b96049cebc5dfd1e7667cf3f7e45ef826b01afe1359b1bdd20688eb/LFSpy-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "de91352c7b448c0d6a0f2ace72b778c5", "sha256": "6c287ca5994bc5e02448436d5a7a25e29de3ebf796e816865ebfa0a820d55c04"}, "downloads": -1, "filename": "LFSpy-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "de91352c7b448c0d6a0f2ace72b778c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 226039, "upload_time": "2019-12-20T16:32:16", "upload_time_iso_8601": "2019-12-20T16:32:16.002656Z", "url": "https://files.pythonhosted.org/packages/71/63/74fca7f13f6e6d5472489df33ffc9ed2f36bf2b6a08d0b8d81b8956e0eaa/LFSpy-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc5f2610539f20e5cb2569e0126a18ae", "sha256": "5db6461f3caeaf1f6931833bfbdc82dc76978db40baff150f3f3a8c34e140da1"}, "downloads": -1, "filename": "LFSpy-1.0.2.tar.gz", "has_sig": false, "md5_digest": "fc5f2610539f20e5cb2569e0126a18ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 226221, "upload_time": "2019-12-20T16:32:17", "upload_time_iso_8601": "2019-12-20T16:32:17.621649Z", "url": "https://files.pythonhosted.org/packages/88/6a/c898817bb8cdf9effcc94ea9a86b21eb3fef5227094e3bc678ed2746e4c2/LFSpy-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "2e7c51abe4d2cef3350315e8ce7c5650", "sha256": "d3f0826a7613c429f7f2ce1a4b9565a6827e77d003acc5d809aafb47a66b4a07"}, "downloads": -1, "filename": "LFSpy-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2e7c51abe4d2cef3350315e8ce7c5650", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 226857, "upload_time": "2020-02-06T16:56:26", "upload_time_iso_8601": "2020-02-06T16:56:26.741827Z", "url": "https://files.pythonhosted.org/packages/67/6a/16af397ca14e59645367a97b14af64ce23ff9a36c390d2965f78dec26624/LFSpy-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be844c52efb4133cf986ad810947abad", "sha256": "0132ed375029e07f507589c22b219c57e14ade8f18bd9ea83689b3487459982d"}, "downloads": -1, "filename": "LFSpy-1.0.3.tar.gz", "has_sig": false, "md5_digest": "be844c52efb4133cf986ad810947abad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 227104, "upload_time": "2020-02-06T16:56:28", "upload_time_iso_8601": "2020-02-06T16:56:28.286303Z", "url": "https://files.pythonhosted.org/packages/ea/58/b38848fce0159fcad1ec043126582476abe5ea8851de57faa0615a9ccff9/LFSpy-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "df7a4487a554f2fdcd09fc97895bea45", "sha256": "6b63b4f68465dc3a44c083624d842c7ba6fd57980127165ce20dfa243e7bc29a"}, "downloads": -1, "filename": "LFSpy-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "df7a4487a554f2fdcd09fc97895bea45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 226507, "upload_time": "2020-05-06T17:54:55", "upload_time_iso_8601": "2020-05-06T17:54:55.727107Z", "url": "https://files.pythonhosted.org/packages/87/9d/d11152da455c318a1583a9af2730928f1e21d355bf1d79c44674af05ffbe/LFSpy-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dad8ce7fbc580f6436607537247626a0", "sha256": "3d34c60aec00eabaf74c288125f47d0355323eb308bd0b19355784e080129210"}, "downloads": -1, "filename": "LFSpy-1.0.4.tar.gz", "has_sig": false, "md5_digest": "dad8ce7fbc580f6436607537247626a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 226767, "upload_time": "2020-05-06T17:54:57", "upload_time_iso_8601": "2020-05-06T17:54:57.333376Z", "url": "https://files.pythonhosted.org/packages/52/78/a4342181d60f48a605870e7992940ef5227b7a90baf4f429dc998fb24a64/LFSpy-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df7a4487a554f2fdcd09fc97895bea45", "sha256": "6b63b4f68465dc3a44c083624d842c7ba6fd57980127165ce20dfa243e7bc29a"}, "downloads": -1, "filename": "LFSpy-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "df7a4487a554f2fdcd09fc97895bea45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 226507, "upload_time": "2020-05-06T17:54:55", "upload_time_iso_8601": "2020-05-06T17:54:55.727107Z", "url": "https://files.pythonhosted.org/packages/87/9d/d11152da455c318a1583a9af2730928f1e21d355bf1d79c44674af05ffbe/LFSpy-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dad8ce7fbc580f6436607537247626a0", "sha256": "3d34c60aec00eabaf74c288125f47d0355323eb308bd0b19355784e080129210"}, "downloads": -1, "filename": "LFSpy-1.0.4.tar.gz", "has_sig": false, "md5_digest": "dad8ce7fbc580f6436607537247626a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 226767, "upload_time": "2020-05-06T17:54:57", "upload_time_iso_8601": "2020-05-06T17:54:57.333376Z", "url": "https://files.pythonhosted.org/packages/52/78/a4342181d60f48a605870e7992940ef5227b7a90baf4f429dc998fb24a64/LFSpy-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:47 2020"}