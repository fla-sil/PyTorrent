{"info": {"author": "Dhyey Thumar", "author_email": "dhyeythumar@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# cv2module\n\nThis is a package is created to assist the smooth workflow with OpenCV by providing essentials functions such as creating Color Masks of any image/video feed or resizing and rotating it.\n\n\n## Installation\nProvided you already have NumPy and OpenCV installed, the `cv2module` a package can be simply installed using `pip`.\n```bash\n$ pip install cv2module\n```\n\n\n## What\u00e2\u20ac\u2122s In This Document\n- [Import and Usage](#import-and-usage)\n- [Resize Image](#resize-image)\n- [Rotate Image](#rotate-image)\n- [Generate Mask for Image](#generate-mask-for-image)\n- [Generate Mask for Video Feed](#generate-mask-for-video-feed)\n- [Future Development](#future-development)\n- [License](#license)\n\n\n## Import and Usage\n\n- **Import as given below**\n```python\nfrom cv2module import cmask\n```\n\n- **Parameters and returned values**\n```python\nhsv_range, mask, res = cmask(Image)\n```\nThis cmask function will return the HSV lower and upper bound, mask and the resultant image.\n\n<!-- **Note:**\n<p style=\"color:orange;\">\nHere mentioning width and height is Required or else it will takes the default values as (600, 400) and resizes the image.\n</p>\n<p style=\"color:red;\">\nSo take care when you are using the default dimensions, as they may lead to an error when performing any image operations [due to different sizes]. To avoid this simply mention the dimensions.\n</p> -->\n\n<p style=\"font-weigth:700; font-size:18px;color:\" align=\"center\">\n<br/>\n&bull; &bull; &bull; &bull;\n</p>\n\n\n## Resize Image\nTo resize an image in OpenCV, cv2.resize function is used. However, you have to use your intuitions in a selection of width and height to maintain the aspect ratio. And sometimes it is hard to predict so by using `cv2module.resize` function you can simply specify width or else you can also specify both (width and height). So the control is in your hands.\n\n**Example :**\n```python\nimage = cv2module.resize(ip_image, 500)\n```\n**Output :**\n<table>\n <tr>\n  <th>Original Image</th>\n  <th>Resized Image</th>\n </tr>\n <tr>\n  <td width=\"50%\"><img alt=\"input img\" src=\"https://github.com/Dhyeythumar/cv2module/blob/master/output/unresized_image.jpg\"></td>\n  <td width=\"50%\"><img alt=\"output img\" height=\"100%\" src=\"https://github.com/Dhyeythumar/cv2module/blob/master/output/resized_image.jpg\"></td>\n </tr>\n</table>\n\n<p style=\"font-weigth:700; font-size:18px;color:\" align=\"center\">\n<br/>\n&bull; &bull; &bull; &bull;\n</p>\n\n\n## Rotate Image\nTo rotate an image in OpenCV, cv2.getRotationMatrix2D and cv2.warpAffine is used. However, if you use these functions then you will lose some of the image parts. But by using `cv2module.rotate` you have the control over that loss.\n\n**Example :**\n```python\n    # loss = 0 means there is no loss of image while rotating it.\n    # loss = 1 means there is a loss of image while rotating it.\n    res = cv2module.rotate(ip_image, 40, loss=1)\n```\n\n```diff\n- The default value of the loss is 1 so it will crop out the image when it's been rotated.\n```\n\n**Output :**\n<table>\n <tr>\n  <th>loss = 0</th>\n  <th>loss = 1</th>\n </tr>\n <tr>\n  <td width=\"50%\" height=\"400px\" ><img alt=\"input img\" src=\"https://github.com/Dhyeythumar/cv2module/blob/master/output/rotate_without_loss.jpg\"></td>\n  <td width=\"50%\" height=\"400px\" align=\"center\"><img alt=\"output img\" height=\"100%\" src=\"https://github.com/Dhyeythumar/cv2module/blob/master/output/rotate_with_loss.jpg\"></td>\n </tr>\n</table>\n\n<p style=\"font-weigth:700; font-size:18px;color:\" align=\"center\">\n<br/>\n&bull; &bull; &bull; &bull;\n</p>\n\n\n## Generate Mask for Image\nSometimes it is hard to predict the HSV bound for a given image. So, this is an example of how to create a mask from a particular color from an image. See the code given below, here we are reading a watch image and attempting to create a mask for the yellow color. The cmask (color mask) function is been imported from the cv2module. This function will open a window with the sliders to set the HSV bounds of your choice.\n\n**Example :**\n```python\nimg = cv2.imread(\"../input/watch_image.jpg\", cv2.IMREAD_COLOR)\n\nhsv_range, mask, res = cmask(img)\n\nprint(hsv_range)\ncv2.imshow('Original frame', img)\ncv2.imshow('mask', mask)\ncv2.imshow('resultant', res)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\n```diff\n- When you are done with selecting the values:\n-   Click ESC or 'q' key to get the values.\n-   To save the mask and res image generated by the function click 's'.\n```\n\nTo view the full example [Refer](https://github.com/Dhyeythumar/cv2module/blob/master/examples/image_example.py).\n\n**Output :**\n<table>\n <tr>\n  <th>Input Image</th>\n  <th>Output Image</th>\n </tr>\n <tr>\n  <td width=\"50%\"><img alt=\"input img\" src=\"https://github.com/Dhyeythumar/cv2module/blob/master/input/watch_image.jpg\"></td>\n  <td width=\"50%\"><img alt=\"output img\" src=\"https://github.com/Dhyeythumar/cv2module/blob/master/output/resultant_watch_image.jpg\"></td>\n </tr>\n</table>\n\n<p style=\"font-weigth:700; font-size:18px;color:\" align=\"center\">\n<br/>\n&bull; &bull; &bull; &bull;\n</p>\n\n\n## Generate Mask for Video Feed\nSometimes it is hard to predict the HSV bound for a given video frame. So, this is an example of how to create a mask from a particular color from a video frame. See the code given below, here we are reading a live webcam frame and attempting to create a mask for the green color. For the very first frame, the cmask function will open a window with the sliders to set the HSV bounds of your choice [You can exit and get the values or can save the mask and resultant image]. \n\n**Example :**\n```python\nif((len(hsv_range) == 0) & (redo == 1)):\n    redo = 0\n    hsv_range, static_mask, static_res = cmask(frame)\nelse:\n    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n    lower_red = hsv_range[0]\n    upper_red = hsv_range[1]\n\n    mask = cv2.inRange(hsv, lower_red, upper_red)\n    res = cv2.bitwise_and(frame, frame, mask=mask)\n\n    cv2.imshow('frame', frame)\n    cv2.imshow('mask', mask)\n    cv2.imshow('res', res)\n```\n\n```diff\n- After this webcam feed will remain ON and you have two choices as:\n-   if you want to again create the mask for another frame then click 'r' to repeat.\n-   else click ESC or 'q' to exit.\n```\n\nTo view the full example [Refer](https://github.com/Dhyeythumar/cv2module/blob/master/examples/video_example.py).\n\n**Output :**<br/>\nThe following is the resultant video captured by webcam. In this I'm holding the mobile with the green color on the screen.\n<p align=\"center\">\n<img  alt=\"output video\" src=\"https://github.com/Dhyeythumar/cv2module/blob/master/output/result_video.gif\" width=\"50%\">\n</p>\n\n<p style=\"font-weigth:700; font-size:18px;color:\" align=\"center\">\n<br/>\n&bull; &bull; &bull; &bull;\n</p>\n\n\n## Future Development\nI am planning to create different functions for this `cv2module` such as cropping an image, creating a scanner, creating different haar cascades for different objects, etc.\n\n\n## License\nLicensed under the [MIT License](./LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Dhyeythumar/cv2module", "keywords": "cv2,color,mask", "license": "", "maintainer": "", "maintainer_email": "", "name": "cv2module", "package_url": "https://pypi.org/project/cv2module/", "platform": "", "project_url": "https://pypi.org/project/cv2module/", "project_urls": {"Homepage": "https://github.com/Dhyeythumar/cv2module"}, "release_url": "https://pypi.org/project/cv2module/0.1.2/", "requires_dist": ["opencv-python (>=4.2.0.32)", "numpy (>=1.18.1)"], "requires_python": "", "summary": "A package that provides various functions to assist the OpenCV workflow", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cv2module</h1>\n<p>This is a package is created to assist the smooth workflow with OpenCV by providing essentials functions such as creating Color Masks of any image/video feed or resizing and rotating it.</p>\n<h2>Installation</h2>\n<p>Provided you already have NumPy and OpenCV installed, the <code>cv2module</code> a package can be simply installed using <code>pip</code>.</p>\n<pre>$ pip install cv2module\n</pre>\n<h2>What\u00e2\u20ac\u2122s In This Document</h2>\n<ul>\n<li><a href=\"#import-and-usage\" rel=\"nofollow\">Import and Usage</a></li>\n<li><a href=\"#resize-image\" rel=\"nofollow\">Resize Image</a></li>\n<li><a href=\"#rotate-image\" rel=\"nofollow\">Rotate Image</a></li>\n<li><a href=\"#generate-mask-for-image\" rel=\"nofollow\">Generate Mask for Image</a></li>\n<li><a href=\"#generate-mask-for-video-feed\" rel=\"nofollow\">Generate Mask for Video Feed</a></li>\n<li><a href=\"#future-development\" rel=\"nofollow\">Future Development</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Import and Usage</h2>\n<ul>\n<li><strong>Import as given below</strong></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cv2module</span> <span class=\"kn\">import</span> <span class=\"n\">cmask</span>\n</pre>\n<ul>\n<li><strong>Parameters and returned values</strong></li>\n</ul>\n<pre><span class=\"n\">hsv_range</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">cmask</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"p\">)</span>\n</pre>\n<p>This cmask function will return the HSV lower and upper bound, mask and the resultant image.</p>\n\n<p align=\"center\">\n<br>\n\u2022 \u2022 \u2022 \u2022\n</p>\n<h2>Resize Image</h2>\n<p>To resize an image in OpenCV, cv2.resize function is used. However, you have to use your intuitions in a selection of width and height to maintain the aspect ratio. And sometimes it is hard to predict so by using <code>cv2module.resize</code> function you can simply specify width or else you can also specify both (width and height). So the control is in your hands.</p>\n<p><strong>Example :</strong></p>\n<pre><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2module</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">ip_image</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Output :</strong></p>\n<table>\n <tr>\n  <th>Original Image</th>\n  <th>Resized Image</th>\n </tr>\n <tr>\n  <td><img alt=\"input img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a6d724b41c25f0ad41e6fae42020b52d31c751a/68747470733a2f2f6769746875622e636f6d2f44687965797468756d61722f6376326d6f64756c652f626c6f622f6d61737465722f6f75747075742f756e726573697a65645f696d6167652e6a7067\"></td>\n  <td><img alt=\"output img\" height=\"100%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3135e5d21458e59af2ac062161fe74d1edbd3903/68747470733a2f2f6769746875622e636f6d2f44687965797468756d61722f6376326d6f64756c652f626c6f622f6d61737465722f6f75747075742f726573697a65645f696d6167652e6a7067\"></td>\n </tr>\n</table>\n<p align=\"center\">\n<br>\n\u2022 \u2022 \u2022 \u2022\n</p>\n<h2>Rotate Image</h2>\n<p>To rotate an image in OpenCV, cv2.getRotationMatrix2D and cv2.warpAffine is used. However, if you use these functions then you will lose some of the image parts. But by using <code>cv2module.rotate</code> you have the control over that loss.</p>\n<p><strong>Example :</strong></p>\n<pre>    <span class=\"c1\"># loss = 0 means there is no loss of image while rotating it.</span>\n    <span class=\"c1\"># loss = 1 means there is a loss of image while rotating it.</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">cv2module</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">ip_image</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"gd\">- The default value of the loss is 1 so it will crop out the image when it's been rotated.</span>\n</pre>\n<p><strong>Output :</strong></p>\n<table>\n <tr>\n  <th>loss = 0</th>\n  <th>loss = 1</th>\n </tr>\n <tr>\n  <td><img alt=\"input img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1da78767a363611d786c3e9543ae0b671731ac88/68747470733a2f2f6769746875622e636f6d2f44687965797468756d61722f6376326d6f64756c652f626c6f622f6d61737465722f6f75747075742f726f746174655f776974686f75745f6c6f73732e6a7067\"></td>\n  <td align=\"center\"><img alt=\"output img\" height=\"100%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c13199a78e624773a4fc27b1d9607cb254eab64f/68747470733a2f2f6769746875622e636f6d2f44687965797468756d61722f6376326d6f64756c652f626c6f622f6d61737465722f6f75747075742f726f746174655f776974685f6c6f73732e6a7067\"></td>\n </tr>\n</table>\n<p align=\"center\">\n<br>\n\u2022 \u2022 \u2022 \u2022\n</p>\n<h2>Generate Mask for Image</h2>\n<p>Sometimes it is hard to predict the HSV bound for a given image. So, this is an example of how to create a mask from a particular color from an image. See the code given below, here we are reading a watch image and attempting to create a mask for the yellow color. The cmask (color mask) function is been imported from the cv2module. This function will open a window with the sliders to set the HSV bounds of your choice.</p>\n<p><strong>Example :</strong></p>\n<pre><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s2\">\"../input/watch_image.jpg\"</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">IMREAD_COLOR</span><span class=\"p\">)</span>\n\n<span class=\"n\">hsv_range</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">cmask</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hsv_range</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'Original frame'</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'mask'</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'resultant'</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">destroyAllWindows</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"gd\">- When you are done with selecting the values:</span>\n<span class=\"gd\">-   Click ESC or 'q' key to get the values.</span>\n<span class=\"gd\">-   To save the mask and res image generated by the function click 's'.</span>\n</pre>\n<p>To view the full example <a href=\"https://github.com/Dhyeythumar/cv2module/blob/master/examples/image_example.py\" rel=\"nofollow\">Refer</a>.</p>\n<p><strong>Output :</strong></p>\n<table>\n <tr>\n  <th>Input Image</th>\n  <th>Output Image</th>\n </tr>\n <tr>\n  <td><img alt=\"input img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71a845b77e6b7011855255d926f1a5e7969af883/68747470733a2f2f6769746875622e636f6d2f44687965797468756d61722f6376326d6f64756c652f626c6f622f6d61737465722f696e7075742f77617463685f696d6167652e6a7067\"></td>\n  <td><img alt=\"output img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc38b12ce247b2b3611e010186d1fb1bf6f8539e/68747470733a2f2f6769746875622e636f6d2f44687965797468756d61722f6376326d6f64756c652f626c6f622f6d61737465722f6f75747075742f726573756c74616e745f77617463685f696d6167652e6a7067\"></td>\n </tr>\n</table>\n<p align=\"center\">\n<br>\n\u2022 \u2022 \u2022 \u2022\n</p>\n<h2>Generate Mask for Video Feed</h2>\n<p>Sometimes it is hard to predict the HSV bound for a given video frame. So, this is an example of how to create a mask from a particular color from a video frame. See the code given below, here we are reading a live webcam frame and attempting to create a mask for the green color. For the very first frame, the cmask function will open a window with the sliders to set the HSV bounds of your choice [You can exit and get the values or can save the mask and resultant image].</p>\n<p><strong>Example :</strong></p>\n<pre><span class=\"k\">if</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hsv_range</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">redo</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)):</span>\n    <span class=\"n\">redo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">hsv_range</span><span class=\"p\">,</span> <span class=\"n\">static_mask</span><span class=\"p\">,</span> <span class=\"n\">static_res</span> <span class=\"o\">=</span> <span class=\"n\">cmask</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">hsv</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_BGR2HSV</span><span class=\"p\">)</span>\n    <span class=\"n\">lower_red</span> <span class=\"o\">=</span> <span class=\"n\">hsv_range</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">upper_red</span> <span class=\"o\">=</span> <span class=\"n\">hsv_range</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">inRange</span><span class=\"p\">(</span><span class=\"n\">hsv</span><span class=\"p\">,</span> <span class=\"n\">lower_red</span><span class=\"p\">,</span> <span class=\"n\">upper_red</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">bitwise_and</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'frame'</span><span class=\"p\">,</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n    <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'mask'</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n    <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'res'</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"gd\">- After this webcam feed will remain ON and you have two choices as:</span>\n<span class=\"gd\">-   if you want to again create the mask for another frame then click 'r' to repeat.</span>\n<span class=\"gd\">-   else click ESC or 'q' to exit.</span>\n</pre>\n<p>To view the full example <a href=\"https://github.com/Dhyeythumar/cv2module/blob/master/examples/video_example.py\" rel=\"nofollow\">Refer</a>.</p>\n<p><strong>Output :</strong><br>\nThe following is the resultant video captured by webcam. In this I'm holding the mobile with the green color on the screen.</p>\n<p align=\"center\">\n<img alt=\"output video\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5e58d82c8cb119c83e70940c0b5cba03e256c69/68747470733a2f2f6769746875622e636f6d2f44687965797468756d61722f6376326d6f64756c652f626c6f622f6d61737465722f6f75747075742f726573756c745f766964656f2e676966\" width=\"50%\">\n</p>\n<p align=\"center\">\n<br>\n\u2022 \u2022 \u2022 \u2022\n</p>\n<h2>Future Development</h2>\n<p>I am planning to create different functions for this <code>cv2module</code> such as cropping an image, creating a scanner, creating different haar cascades for different objects, etc.</p>\n<h2>License</h2>\n<p>Licensed under the <a href=\"./LICENSE\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 6913216, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5d0eaa80a5dd37d6a006303156692281", "sha256": "39c8c6e32a5e3d5f9ac5e7c4a01b0415182250db5f9df855d5cc78a353cce242"}, "downloads": -1, "filename": "cv2module-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5d0eaa80a5dd37d6a006303156692281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6762, "upload_time": "2020-03-30T09:02:25", "upload_time_iso_8601": "2020-03-30T09:02:25.420224Z", "url": "https://files.pythonhosted.org/packages/9c/5f/c3182464e1e951ed9d3dc662484ee694f252dda4ae93a53ef715d989c356/cv2module-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05b06f20b0e561897e6c467b225e4d47", "sha256": "27df8091c7fd880e1e41f177675043ad400a78a2240203ddc9d41656f636bd30"}, "downloads": -1, "filename": "cv2module-0.1.tar.gz", "has_sig": false, "md5_digest": "05b06f20b0e561897e6c467b225e4d47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6484, "upload_time": "2020-03-30T09:02:27", "upload_time_iso_8601": "2020-03-30T09:02:27.888356Z", "url": "https://files.pythonhosted.org/packages/eb/71/5a93ddf408a0fbb378d62a96a0a94dfb7302b7607f5035d4c0a095af7381/cv2module-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1b67fa3d6c7ebf5bd767d9c83ad06f31", "sha256": "22b69398e593cba6c7ed5225547aa984fd122a1c7ce695386c0a19bbf5429633"}, "downloads": -1, "filename": "cv2module-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1b67fa3d6c7ebf5bd767d9c83ad06f31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6720, "upload_time": "2020-03-30T12:17:28", "upload_time_iso_8601": "2020-03-30T12:17:28.154314Z", "url": "https://files.pythonhosted.org/packages/b6/ff/5c3c00b249bb7ddb5c74c688d82c3a41b6946d51d84768e8dbef29bf6553/cv2module-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3ab1cf2bdcfdd1d07023666657be6c8", "sha256": "1f6dc54d3a0c9ff6a6731f0ba690551ae457c88e6e0fa99615bbcbfbdb4b62ed"}, "downloads": -1, "filename": "cv2module-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f3ab1cf2bdcfdd1d07023666657be6c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6471, "upload_time": "2020-03-30T12:17:29", "upload_time_iso_8601": "2020-03-30T12:17:29.574907Z", "url": "https://files.pythonhosted.org/packages/ac/20/de8dea36524c29251260c8db59d7d3637da34edfeca776d1c41b1de280c2/cv2module-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6cfa25be151f1153f6ac7bb270a988d6", "sha256": "0838f8268d7041f3cf2cd1806d51a6a34f3a7904a81c3db1f4ae481b62cb7a43"}, "downloads": -1, "filename": "cv2module-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6cfa25be151f1153f6ac7bb270a988d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6729, "upload_time": "2020-03-30T14:14:27", "upload_time_iso_8601": "2020-03-30T14:14:27.844446Z", "url": "https://files.pythonhosted.org/packages/d8/ef/fa3b54e14928a13dacffb347eadc16a4ab6e87b475c6d9468d67a42b2b59/cv2module-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3aa6de436bed49777d34c369017ac81", "sha256": "ccc930cde14a839afc839ce77acbf4117810273c925b6c9ee58793acee5b8b67"}, "downloads": -1, "filename": "cv2module-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a3aa6de436bed49777d34c369017ac81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6463, "upload_time": "2020-03-30T14:14:30", "upload_time_iso_8601": "2020-03-30T14:14:30.449008Z", "url": "https://files.pythonhosted.org/packages/71/3b/daf31d27cdad5f67fefb33beee342fcfb5adf1ebe95281dcd7c45f6c2043/cv2module-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6cfa25be151f1153f6ac7bb270a988d6", "sha256": "0838f8268d7041f3cf2cd1806d51a6a34f3a7904a81c3db1f4ae481b62cb7a43"}, "downloads": -1, "filename": "cv2module-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6cfa25be151f1153f6ac7bb270a988d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6729, "upload_time": "2020-03-30T14:14:27", "upload_time_iso_8601": "2020-03-30T14:14:27.844446Z", "url": "https://files.pythonhosted.org/packages/d8/ef/fa3b54e14928a13dacffb347eadc16a4ab6e87b475c6d9468d67a42b2b59/cv2module-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3aa6de436bed49777d34c369017ac81", "sha256": "ccc930cde14a839afc839ce77acbf4117810273c925b6c9ee58793acee5b8b67"}, "downloads": -1, "filename": "cv2module-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a3aa6de436bed49777d34c369017ac81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6463, "upload_time": "2020-03-30T14:14:30", "upload_time_iso_8601": "2020-03-30T14:14:30.449008Z", "url": "https://files.pythonhosted.org/packages/71/3b/daf31d27cdad5f67fefb33beee342fcfb5adf1ebe95281dcd7c45f6c2043/cv2module-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:15 2020"}