{"info": {"author": "Bocks", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: Free for non-commercial use", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# datasource-python\nPython SDK for all DataSource iterations\n\n\n## Installation\n\nInstall this package via pip:\n\n```python\npip install bocks_ds\n```\n\n\n## Usage\n\n### The Client\n\nImport this package and instantiate a client object.\n\n```python\nimport bocks_ds\n\nds_client = bocks_ds.Client(\"starfinder\") # provide the name of the datasource to access\n```\n\n#### Error Example:\n\n```python\ntry:\n    bad_client = Client(\"bad_client\")\nexcept DSTargetError as e:\n    print(e) # The target 'bad_client' provided in Client initialization is not in available target names:\\n['starfinder', 'pathfinder']\n```\n\n### Fetching Data\n\nThere are currently only two options to consider when fetching data: the type and the parameters.\n\nThe \"type\" can be thought of as a data table, though we will discuss some complexities later on.\n\n\n```python\nresponse = ds_client.armor.get(['name', 'price']) # 'armor' here is the query type\nif response.status_code == 200: # optional status check\n    data = response.json() # '.json()' gives the API data output we came for\n```\n\nNote that the `ds_client` will accept **any value** as an attribute, which it will then use to craft an API request. \n\n#### Error Example:\n\n```python\ntry:\n    client.bad_name.get(['name']).json()\nexcept DSQueryError as e:\n    print(e) # <Response 400> DataSource did not find table/field 'bad_name'.\n```\n\n### Refining Your Request\n\nThe API allows for active filtering of strings and integers within your request. To do this, you'll need to set arguments immediately prior to making the request. \n\nFor data values that return strings, you may refine with the terms `<value_name>_like` and `<value_name>_is`. For \"like\" queries, sequencing is not considered and the search is not case sensitive. For \"is\" queries, only exact, case-sensitive matches will be returned.\n\nFor data values that return integers, you may refine with the terms `<value_name>_min`, `<value_name>_max` and `<value_name>_equals`. These equate to \"greater than or eqal to\", \"less than or equal to\", and \"equal to\", respectively.\n\nFinally, it is often valuable to select an item specifically by its `ID`, which functions in a more direct manner than the queries for integers (see example below).\n\nAll arguments must be presented as a single dictionary, as seen in the examples below.\n\n```python\nclient.armor.set_arguments({\"name_like\":\"basic\"})\nresponse = ds_client.armor.get(['name', 'price'])\n```\n\n```python\nclient.armor.set_arguments({\"price_min\":200, \"price_max\":2000})\nresponse = ds_client.armor.get(['name', 'price'])\n```\n\n```python\nclient.armor.set_arguments({\"id\":1})\nresponse = ds_client.armor.get(['name', 'price'])\n```\n\nNote that these requests do not stack, but you can place all terms into a single dictionary to futher refine results. If `set_arguments` is called multiple times, the final call will overwrite previous calls.\n\n```python\nquery = {\"name_like\":\"basic\", \"price_min\":200, \"price_max\":2000}\nclient.armor.set_arguments(query)\nresponse = ds_client.armor.get(['name', 'price'])\n```\n\nAs a final note: all arguments are cleared when `get` is called.\n\n#### Error Example\n\n```python\ntry:\n    client.armor.set_arguments({\"name_min\":200})\n    erroneous_armor = client.armor.get(['name', 'price']) # Throws exception due to errors in response.json()\nexcept DSQueryError as e:\n    print(e) # <Response 400> ['Unknown argument \"name_min\" on field \"Query.armor\". Did you mean \"name_is\", \"name_like\", \"type_min\", \"bulk_min\", or \"level_min\"?']\n```\n\n### Fetching Nested Data\n\nAs mentioned previously, not all types match their data tables precisely. Some types include additional data from relationships with other tables. Documentation for these relationships is automatically generated in the API Documentation (such as at *docs.sfdatasource.com*).\n\nIn order to access nested data, it is required that you present a dictionary describing the data to fetch.\n\nWhere we previously provided a list of string field-names to query, we will now include a dictionary in that list, as seen in the examples below.\n\n```python\nquery = [\n    \"name\",\n    {\n        \"effect_ranges\": [\"name\", \"description\"],\n    }\n]\nall_spells = ds_client.spells.get(query)\n```\n\nThis logic is recursive, so in the event that a relationship target has it's own relationships you may do the following:\n\n```python\nquery = [\n    \"name\",\n    {\n        \"class_proficiencies\": ['name'],\n        \"class_features\": [\"name\", {\n            \"class_special_skills\": ['name']\n        }],\n    }\n]\nspells = client.classes.get(query)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bocks-ds/datasource-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bocks-ds", "package_url": "https://pypi.org/project/bocks-ds/", "platform": "", "project_url": "https://pypi.org/project/bocks-ds/", "project_urls": {"Homepage": "https://github.com/bocks-ds/datasource-python"}, "release_url": "https://pypi.org/project/bocks-ds/0.2.1/", "requires_dist": ["pycurl"], "requires_python": ">=3.6", "summary": "DataSource Python SDK", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>datasource-python</h1>\n<p>Python SDK for all DataSource iterations</p>\n<h2>Installation</h2>\n<p>Install this package via pip:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">bocks_ds</span>\n</pre>\n<h2>Usage</h2>\n<h3>The Client</h3>\n<p>Import this package and instantiate a client object.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bocks_ds</span>\n\n<span class=\"n\">ds_client</span> <span class=\"o\">=</span> <span class=\"n\">bocks_ds</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s2\">\"starfinder\"</span><span class=\"p\">)</span> <span class=\"c1\"># provide the name of the datasource to access</span>\n</pre>\n<h4>Error Example:</h4>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">bad_client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s2\">\"bad_client\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">DSTargetError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"c1\"># The target 'bad_client' provided in Client initialization is not in available target names:\\n['starfinder', 'pathfinder']</span>\n</pre>\n<h3>Fetching Data</h3>\n<p>There are currently only two options to consider when fetching data: the type and the parameters.</p>\n<p>The \"type\" can be thought of as a data table, though we will discuss some complexities later on.</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ds_client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">])</span> <span class=\"c1\"># 'armor' here is the query type</span>\n<span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span> <span class=\"c1\"># optional status check</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"c1\"># '.json()' gives the API data output we came for</span>\n</pre>\n<p>Note that the <code>ds_client</code> will accept <strong>any value</strong> as an attribute, which it will then use to craft an API request.</p>\n<h4>Error Example:</h4>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">bad_name</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">DSQueryError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;Response 400&gt; DataSource did not find table/field 'bad_name'.</span>\n</pre>\n<h3>Refining Your Request</h3>\n<p>The API allows for active filtering of strings and integers within your request. To do this, you'll need to set arguments immediately prior to making the request.</p>\n<p>For data values that return strings, you may refine with the terms <code>&lt;value_name&gt;_like</code> and <code>&lt;value_name&gt;_is</code>. For \"like\" queries, sequencing is not considered and the search is not case sensitive. For \"is\" queries, only exact, case-sensitive matches will be returned.</p>\n<p>For data values that return integers, you may refine with the terms <code>&lt;value_name&gt;_min</code>, <code>&lt;value_name&gt;_max</code> and <code>&lt;value_name&gt;_equals</code>. These equate to \"greater than or eqal to\", \"less than or equal to\", and \"equal to\", respectively.</p>\n<p>Finally, it is often valuable to select an item specifically by its <code>ID</code>, which functions in a more direct manner than the queries for integers (see example below).</p>\n<p>All arguments must be presented as a single dictionary, as seen in the examples below.</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">set_arguments</span><span class=\"p\">({</span><span class=\"s2\">\"name_like\"</span><span class=\"p\">:</span><span class=\"s2\">\"basic\"</span><span class=\"p\">})</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ds_client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">])</span>\n</pre>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">set_arguments</span><span class=\"p\">({</span><span class=\"s2\">\"price_min\"</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s2\">\"price_max\"</span><span class=\"p\">:</span><span class=\"mi\">2000</span><span class=\"p\">})</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ds_client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">])</span>\n</pre>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">set_arguments</span><span class=\"p\">({</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ds_client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">])</span>\n</pre>\n<p>Note that these requests do not stack, but you can place all terms into a single dictionary to futher refine results. If <code>set_arguments</code> is called multiple times, the final call will overwrite previous calls.</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"name_like\"</span><span class=\"p\">:</span><span class=\"s2\">\"basic\"</span><span class=\"p\">,</span> <span class=\"s2\">\"price_min\"</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s2\">\"price_max\"</span><span class=\"p\">:</span><span class=\"mi\">2000</span><span class=\"p\">}</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">set_arguments</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ds_client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">])</span>\n</pre>\n<p>As a final note: all arguments are cleared when <code>get</code> is called.</p>\n<h4>Error Example</h4>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">set_arguments</span><span class=\"p\">({</span><span class=\"s2\">\"name_min\"</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"p\">})</span>\n    <span class=\"n\">erroneous_armor</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">armor</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">])</span> <span class=\"c1\"># Throws exception due to errors in response.json()</span>\n<span class=\"k\">except</span> <span class=\"n\">DSQueryError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;Response 400&gt; ['Unknown argument \"name_min\" on field \"Query.armor\". Did you mean \"name_is\", \"name_like\", \"type_min\", \"bulk_min\", or \"level_min\"?']</span>\n</pre>\n<h3>Fetching Nested Data</h3>\n<p>As mentioned previously, not all types match their data tables precisely. Some types include additional data from relationships with other tables. Documentation for these relationships is automatically generated in the API Documentation (such as at <em>docs.sfdatasource.com</em>).</p>\n<p>In order to access nested data, it is required that you present a dictionary describing the data to fetch.</p>\n<p>Where we previously provided a list of string field-names to query, we will now include a dictionary in that list, as seen in the examples below.</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"effect_ranges\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"description\"</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">all_spells</span> <span class=\"o\">=</span> <span class=\"n\">ds_client</span><span class=\"o\">.</span><span class=\"n\">spells</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</pre>\n<p>This logic is recursive, so in the event that a relationship target has it's own relationships you may do the following:</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"class_proficiencies\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"class_features\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"class_special_skills\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span>\n        <span class=\"p\">}],</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">spells</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7019133, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5ebadd718d3329d52ca2cce93545abdf", "sha256": "cc4522d219d471beedda3acfb3d2c65411101f083c78bb4e89fa1f1dc877b9d8"}, "downloads": -1, "filename": "bocks_ds-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5ebadd718d3329d52ca2cce93545abdf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12686, "upload_time": "2020-04-14T17:43:08", "upload_time_iso_8601": "2020-04-14T17:43:08.655642Z", "url": "https://files.pythonhosted.org/packages/47/b5/97d95d24e8c33911602ba446a99632d561c1194ab86dedaa46309a0262f8/bocks_ds-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84591c2c8e1531d594693771440ac0ae", "sha256": "61f71757ddc88135d4f37783cd487d44c2693468c580dc925fd190328232f0a4"}, "downloads": -1, "filename": "bocks_ds-0.0.1.tar.gz", "has_sig": false, "md5_digest": "84591c2c8e1531d594693771440ac0ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5660, "upload_time": "2020-04-14T17:43:10", "upload_time_iso_8601": "2020-04-14T17:43:10.324313Z", "url": "https://files.pythonhosted.org/packages/62/96/ef5e87243a6417a49f140a5b369d6276d94fbbb0303c30dcfc3f175f8df4/bocks_ds-0.0.1.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9b16c6a4f6d00231d15368b047bf68ac", "sha256": "dfdb371539de1ec3580499ca4902ef405cd739c60d871bf696f9e3574b3c44af"}, "downloads": -1, "filename": "bocks_ds-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9b16c6a4f6d00231d15368b047bf68ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19358, "upload_time": "2020-04-14T18:21:53", "upload_time_iso_8601": "2020-04-14T18:21:53.509114Z", "url": "https://files.pythonhosted.org/packages/a9/5e/056ebb7e9022337a7010819a5e0652325f5d01178aa3e0007f2a346b45f0/bocks_ds-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eb6905a63cd35f0377a46a7286c1314", "sha256": "f0be2ede121ec1eddbae1d7348786d4ec663384145d08691bd4da31940f532bd"}, "downloads": -1, "filename": "bocks_ds-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7eb6905a63cd35f0377a46a7286c1314", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5727, "upload_time": "2020-04-14T18:21:54", "upload_time_iso_8601": "2020-04-14T18:21:54.772090Z", "url": "https://files.pythonhosted.org/packages/44/8b/051bf52b3e9d629e5cc36be980309d915cad7e92398111ad7640ae56a1b3/bocks_ds-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b16c6a4f6d00231d15368b047bf68ac", "sha256": "dfdb371539de1ec3580499ca4902ef405cd739c60d871bf696f9e3574b3c44af"}, "downloads": -1, "filename": "bocks_ds-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9b16c6a4f6d00231d15368b047bf68ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19358, "upload_time": "2020-04-14T18:21:53", "upload_time_iso_8601": "2020-04-14T18:21:53.509114Z", "url": "https://files.pythonhosted.org/packages/a9/5e/056ebb7e9022337a7010819a5e0652325f5d01178aa3e0007f2a346b45f0/bocks_ds-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eb6905a63cd35f0377a46a7286c1314", "sha256": "f0be2ede121ec1eddbae1d7348786d4ec663384145d08691bd4da31940f532bd"}, "downloads": -1, "filename": "bocks_ds-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7eb6905a63cd35f0377a46a7286c1314", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5727, "upload_time": "2020-04-14T18:21:54", "upload_time_iso_8601": "2020-04-14T18:21:54.772090Z", "url": "https://files.pythonhosted.org/packages/44/8b/051bf52b3e9d629e5cc36be980309d915cad7e92398111ad7640ae56a1b3/bocks_ds-0.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:50 2020"}