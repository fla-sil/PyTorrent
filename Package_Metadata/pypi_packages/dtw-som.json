{"info": {"author": "Maria Ines Silva", "author_email": "misilva73@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Education", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Visualization"], "description": "# DTW-SOM: Self-organizing map for time-series data\n\nThe method DTW-SOM (Dynamic Time Warping Self-Organizing Map) was built for the paper \n*Exploring time-series motifs through DTW-SOM*. In the [github repository](https://github.com/misilva73/dtw_som), you'll\n find all the work presented in the paper.\n\nDTW-SOM is a vanilla Self-Organizing Map with three main differences, namely (1) the use the Dynamic Time Warping \ndistance instead of the Euclidean distance, (2) the adoption of two new network initialization routines (a random sample \ninitialization and an anchor initialization) and (3) the adjustment of the Adaptation phase of the training to work with \nvariable-length time-series sequences.\n\nIn the paper, we argue that visually exploring time-series motifs computed by motif discovery algorithms can be useful\n to understand and debug results and we propose the use of DTW-SOM on the list of motif\u2019s centers to conduct these \nexplorations. We then test DTW-SOM in a synthetic motif dataset and a real time-series dataset called GunPoint. After an \nexploration of results, we conclude that DTW-SOM is capable of extracting relevant information from a set of motifs and \ndisplay it in a visualization that is space-efficient.\n\n## Github project structure\n\n    \u251c\u2500\u2500 notebooks          <- Jupyter notebooks use to test dtwsom and to run the anlsysis for the paper (including the plots)\n    \u251c\u2500\u2500 paper              <- Folder the the PDF and latex project for the paper\n    \u251c\u2500\u2500 src                <- Folder with the dtwsom module\n    \u251c\u2500\u2500 README.md          <- The top-level README for this project\n    \u251c\u2500\u2500 requirements.txt   <- The requirements file for reproducing the environment used in the paper\n\n## Prerequisites\n\nIn order to run the DTW-SOM package, you need the following packages:\n\n    dtaidistance==1.2.3\n    matplotlib==3.1.2\n    numpy==1.18.1\n    pyclustering==0.9.3.1\n    scipy==1.4.1\n\nIn addition to these, if you wish to run the notebooks in this repository, then you need the following packages:\n\n    jupyterlab==1.2.5\n    matplotlib==3.1.2\n    matrixprofile-ts==0.0.9\n\n## Installing\n\nThis packages is available on PyPI and thus can be directly installed with pip:\n\n```bash\npip install dtw_som\n```\n\nAlternatively, this package can installed from source by cloning this repository and installing it manually with the \ncommand:\n\n```bash\npython setup.py install\n```\n\n## Example Code\n\nImport packages and generate a dummy dataset with 2 clusters, a noisy sine curve and a noise line centered at 10:\n\n```python\nimport dtwsom\nimport math\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pyclustering.nnet.som import type_conn\n\n\ndef gen_noisy_sine_list(f0, fs, mean_dur, size):\n    final_list = []\n    for i in range(size):\n        dur = random.sample([mean_dur-1, mean_dur, mean_dur+1], 1)[0]\n        t = np.arange(dur)\n        sinusoid = np.sin(2*np.pi*t*(f0/fs))\n        noise = np.random.normal(0,0.3, dur)\n        noisy_sinusoid = noise + sinusoid\n        final_list.append(noisy_sinusoid)\n    return final_list\n\ndef gen_noisy_list(mean_dur, size):\n    final_list = []\n    for i in range(size):\n        dur = random.sample([mean_dur-1, mean_dur, mean_dur+1], 1)[0]\n        noise = np.random.normal(0,0.3, dur)+10\n        final_list.append(noise)\n    return final_list\n\n\nsin_dataset = gen_noisy_sine_list(1, 10, 25, 50) + gen_noisy_list(20, 50)\nrandom.shuffle(sin_dataset)\n```\n\nDefine and train the network:\n\n```python\nrows = 3\ncols = 3\nstructure = type_conn.grid_four\nnetwork = dtwsom.DtwSom(rows, cols, structure)\n\nnetwork.train(sin_dataset, 20)\n```\n\nAfter training, you can visualise the U-matrix the Winner matrix:\n\n```python\nnetwork.show_distance_matrix()\nnetwork.show_winner_matrix()\n```\n\nFinally, you can also visualize the each unit as a time-series:\n\n```python\nn_neurons = network._size\nfig, axs = plt.subplots(3,3,figsize=(20, 10), sharey=True)\nfor neuron_index in range(n_neurons):\n    col = math.floor(neuron_index/3)\n    row = neuron_index % 3\n    neuron_weights = network._weights[neuron_index]\n    axs[row, col].plot(np.arange(len(neuron_weights)), neuron_weights, label=str(neuron_index))\n    axs[row, col].set_ylabel(\"Neuron: \"+str(neuron_index))\nplt.show()\n```\n\nTo confirm the output of this example, check the following \n[notebook](https://github.com/misilva73/dtw_som/blob/master/notebooks/testing_dtwsom.ipynb).\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/misilva73/dtw_som", "keywords": "", "license": "GNU Public License", "maintainer": "", "maintainer_email": "", "name": "dtw-som", "package_url": "https://pypi.org/project/dtw-som/", "platform": "", "project_url": "https://pypi.org/project/dtw-som/", "project_urls": {"Homepage": "https://github.com/misilva73/dtw_som"}, "release_url": "https://pypi.org/project/dtw-som/1.0.7/", "requires_dist": ["scipy", "matplotlib", "numpy", "pyclustering", "dtaidistance"], "requires_python": ">=3.6", "summary": "DTW-SOM: Self-organizing map for time-series data", "version": "1.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DTW-SOM: Self-organizing map for time-series data</h1>\n<p>The method DTW-SOM (Dynamic Time Warping Self-Organizing Map) was built for the paper\n<em>Exploring time-series motifs through DTW-SOM</em>. In the <a href=\"https://github.com/misilva73/dtw_som\" rel=\"nofollow\">github repository</a>, you'll\nfind all the work presented in the paper.</p>\n<p>DTW-SOM is a vanilla Self-Organizing Map with three main differences, namely (1) the use the Dynamic Time Warping\ndistance instead of the Euclidean distance, (2) the adoption of two new network initialization routines (a random sample\ninitialization and an anchor initialization) and (3) the adjustment of the Adaptation phase of the training to work with\nvariable-length time-series sequences.</p>\n<p>In the paper, we argue that visually exploring time-series motifs computed by motif discovery algorithms can be useful\nto understand and debug results and we propose the use of DTW-SOM on the list of motif\u2019s centers to conduct these\nexplorations. We then test DTW-SOM in a synthetic motif dataset and a real time-series dataset called GunPoint. After an\nexploration of results, we conclude that DTW-SOM is capable of extracting relevant information from a set of motifs and\ndisplay it in a visualization that is space-efficient.</p>\n<h2>Github project structure</h2>\n<pre><code>\u251c\u2500\u2500 notebooks          &lt;- Jupyter notebooks use to test dtwsom and to run the anlsysis for the paper (including the plots)\n\u251c\u2500\u2500 paper              &lt;- Folder the the PDF and latex project for the paper\n\u251c\u2500\u2500 src                &lt;- Folder with the dtwsom module\n\u251c\u2500\u2500 README.md          &lt;- The top-level README for this project\n\u251c\u2500\u2500 requirements.txt   &lt;- The requirements file for reproducing the environment used in the paper\n</code></pre>\n<h2>Prerequisites</h2>\n<p>In order to run the DTW-SOM package, you need the following packages:</p>\n<pre><code>dtaidistance==1.2.3\nmatplotlib==3.1.2\nnumpy==1.18.1\npyclustering==0.9.3.1\nscipy==1.4.1\n</code></pre>\n<p>In addition to these, if you wish to run the notebooks in this repository, then you need the following packages:</p>\n<pre><code>jupyterlab==1.2.5\nmatplotlib==3.1.2\nmatrixprofile-ts==0.0.9\n</code></pre>\n<h2>Installing</h2>\n<p>This packages is available on PyPI and thus can be directly installed with pip:</p>\n<pre>pip install dtw_som\n</pre>\n<p>Alternatively, this package can installed from source by cloning this repository and installing it manually with the\ncommand:</p>\n<pre>python setup.py install\n</pre>\n<h2>Example Code</h2>\n<p>Import packages and generate a dummy dataset with 2 clusters, a noisy sine curve and a noise line centered at 10:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dtwsom</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyclustering.nnet.som</span> <span class=\"kn\">import</span> <span class=\"n\">type_conn</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">gen_noisy_sine_list</span><span class=\"p\">(</span><span class=\"n\">f0</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">mean_dur</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"n\">final_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n        <span class=\"n\">dur</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">([</span><span class=\"n\">mean_dur</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mean_dur</span><span class=\"p\">,</span> <span class=\"n\">mean_dur</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">dur</span><span class=\"p\">)</span>\n        <span class=\"n\">sinusoid</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">t</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">f0</span><span class=\"o\">/</span><span class=\"n\">fs</span><span class=\"p\">))</span>\n        <span class=\"n\">noise</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">dur</span><span class=\"p\">)</span>\n        <span class=\"n\">noisy_sinusoid</span> <span class=\"o\">=</span> <span class=\"n\">noise</span> <span class=\"o\">+</span> <span class=\"n\">sinusoid</span>\n        <span class=\"n\">final_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">noisy_sinusoid</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">final_list</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">gen_noisy_list</span><span class=\"p\">(</span><span class=\"n\">mean_dur</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"n\">final_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n        <span class=\"n\">dur</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">([</span><span class=\"n\">mean_dur</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mean_dur</span><span class=\"p\">,</span> <span class=\"n\">mean_dur</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">noise</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">dur</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">10</span>\n        <span class=\"n\">final_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">noise</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">final_list</span>\n\n\n<span class=\"n\">sin_dataset</span> <span class=\"o\">=</span> <span class=\"n\">gen_noisy_sine_list</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">gen_noisy_list</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">sin_dataset</span><span class=\"p\">)</span>\n</pre>\n<p>Define and train the network:</p>\n<pre><span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">structure</span> <span class=\"o\">=</span> <span class=\"n\">type_conn</span><span class=\"o\">.</span><span class=\"n\">grid_four</span>\n<span class=\"n\">network</span> <span class=\"o\">=</span> <span class=\"n\">dtwsom</span><span class=\"o\">.</span><span class=\"n\">DtwSom</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"p\">)</span>\n\n<span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">sin_dataset</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<p>After training, you can visualise the U-matrix the Winner matrix:</p>\n<pre><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">show_distance_matrix</span><span class=\"p\">()</span>\n<span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">show_winner_matrix</span><span class=\"p\">()</span>\n</pre>\n<p>Finally, you can also visualize the each unit as a time-series:</p>\n<pre><span class=\"n\">n_neurons</span> <span class=\"o\">=</span> <span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">_size</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">axs</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">sharey</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">neuron_index</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_neurons</span><span class=\"p\">):</span>\n    <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">neuron_index</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">neuron_index</span> <span class=\"o\">%</span> <span class=\"mi\">3</span>\n    <span class=\"n\">neuron_weights</span> <span class=\"o\">=</span> <span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">_weights</span><span class=\"p\">[</span><span class=\"n\">neuron_index</span><span class=\"p\">]</span>\n    <span class=\"n\">axs</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">neuron_weights</span><span class=\"p\">)),</span> <span class=\"n\">neuron_weights</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">neuron_index</span><span class=\"p\">))</span>\n    <span class=\"n\">axs</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s2\">\"Neuron: \"</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">neuron_index</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>To confirm the output of this example, check the following\n<a href=\"https://github.com/misilva73/dtw_som/blob/master/notebooks/testing_dtwsom.ipynb\" rel=\"nofollow\">notebook</a>.</p>\n\n          </div>"}, "last_serial": 7059293, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "3af40e352bbc71aafeda0d99a0f81981", "sha256": "73711176993cde2aff209c12f895de071e99f9e46f24ca61277abd9d6728dd8a"}, "downloads": -1, "filename": "dtw_som-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3af40e352bbc71aafeda0d99a0f81981", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8055, "upload_time": "2020-02-03T19:53:24", "upload_time_iso_8601": "2020-02-03T19:53:24.451892Z", "url": "https://files.pythonhosted.org/packages/29/8c/cc6879d711ae759f845fdae78e97c8f5c78a23c2c85ee4c39d14eb453b45/dtw_som-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c10dfb8f21494120c9abda31090311b2", "sha256": "d7807d68bfae3aa39b4446ffc25d5dc0dff2364ce265f496b69c8b5508fdc62d"}, "downloads": -1, "filename": "dtw-som-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c10dfb8f21494120c9abda31090311b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7782, "upload_time": "2020-02-03T19:53:26", "upload_time_iso_8601": "2020-02-03T19:53:26.762952Z", "url": "https://files.pythonhosted.org/packages/d3/c8/79cc6e53176220df831fe0222598a80d531709e8dc9637cd7e4083d42763/dtw-som-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "f1cd39d39beea4e262b614f0c8ac0dfb", "sha256": "15df7dcf9a21ea401f4f7ac11820f36915a9059ac842dc24e6a7945ee644a648"}, "downloads": -1, "filename": "dtw_som-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f1cd39d39beea4e262b614f0c8ac0dfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8032, "upload_time": "2020-02-03T20:05:31", "upload_time_iso_8601": "2020-02-03T20:05:31.810586Z", "url": "https://files.pythonhosted.org/packages/6d/e9/a3c5fabebbb26e1108ea6c007c0a91ea00dc083dc635b0f2bca74f3c497f/dtw_som-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e920a59e30d5ef4df3c784c34e1c3d5", "sha256": "ae978d32570cfa031ab4aeb1b24ce58cbd7cc0cbb7b1fca2df6e6a818b36ba0a"}, "downloads": -1, "filename": "dtw-som-1.0.3.tar.gz", "has_sig": false, "md5_digest": "5e920a59e30d5ef4df3c784c34e1c3d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7765, "upload_time": "2020-02-03T20:05:33", "upload_time_iso_8601": "2020-02-03T20:05:33.514703Z", "url": "https://files.pythonhosted.org/packages/0a/8d/444a5d721e34cab4a062fda2711ebfb479c6f0da630cac53930927301b0f/dtw-som-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "4cc86c3cc145bdde7e754a351c5ba1ae", "sha256": "38ca1e356a7ba7cabd59cd34223e2c68820fd2221c508399c18635ec24effa9a"}, "downloads": -1, "filename": "dtw_som-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4cc86c3cc145bdde7e754a351c5ba1ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8135, "upload_time": "2020-02-20T11:44:35", "upload_time_iso_8601": "2020-02-20T11:44:35.318801Z", "url": "https://files.pythonhosted.org/packages/90/0b/a88bbe16797f96182abbfd8ae283a80f82c29e06ad0c18cad55c2862bf8f/dtw_som-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22e87741205f4b8571bd8fb195c668ef", "sha256": "301dd302ba4bcb16ec68f66e803aa8acb4c374b648352dc6f3ad172cae4a3cba"}, "downloads": -1, "filename": "dtw-som-1.0.4.tar.gz", "has_sig": false, "md5_digest": "22e87741205f4b8571bd8fb195c668ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7855, "upload_time": "2020-02-20T11:44:36", "upload_time_iso_8601": "2020-02-20T11:44:36.973322Z", "url": "https://files.pythonhosted.org/packages/b9/9c/cfcb60208a1157955e797f0c221749b7855aab9b62fa5f730ddd2df36f73/dtw-som-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "9973114078193c0c62093a19e8378f63", "sha256": "ac163505ecc330b19c6ba13b332a95bc70262b4a91b2c67964581ddc33953e2d"}, "downloads": -1, "filename": "dtw_som-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "9973114078193c0c62093a19e8378f63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8130, "upload_time": "2020-03-15T13:57:30", "upload_time_iso_8601": "2020-03-15T13:57:30.256260Z", "url": "https://files.pythonhosted.org/packages/9f/f4/4daee5a5cab090e7e23ae59c52dbdff6384af45dc7624af5b577cc2fa8dd/dtw_som-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f333640576fd554c4d29ca5cd0fbf1e7", "sha256": "70b42d091d01a772c00000c787d7ab623df23f523631d3c70146a9c9c10629c0"}, "downloads": -1, "filename": "dtw-som-1.0.5.tar.gz", "has_sig": false, "md5_digest": "f333640576fd554c4d29ca5cd0fbf1e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7845, "upload_time": "2020-03-15T13:57:32", "upload_time_iso_8601": "2020-03-15T13:57:32.081821Z", "url": "https://files.pythonhosted.org/packages/d5/b6/1641e5da60a97fa61c1d1a64d46d9fb66e1eb4f2ad540ffc3f084b7aeebd/dtw-som-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "e089cfee9d6998570bd832380b49463b", "sha256": "c3f129b4674f147af2178cedd25366a20ebcd4d4662da9dd0eafebe0f1afc930"}, "downloads": -1, "filename": "dtw_som-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e089cfee9d6998570bd832380b49463b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8137, "upload_time": "2020-04-09T15:44:07", "upload_time_iso_8601": "2020-04-09T15:44:07.186116Z", "url": "https://files.pythonhosted.org/packages/a6/b1/cceba99f8f55f94e7b92fd9f84093d988fffd379ce0d3540e8edf04fe6d7/dtw_som-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b4c32c0128c2a07c03dce06005bbf08", "sha256": "536153a9c1e10f9723263bbbe00b2e6e38c024f7c14c9568e3ac8ea5205ef988"}, "downloads": -1, "filename": "dtw-som-1.0.6.tar.gz", "has_sig": false, "md5_digest": "1b4c32c0128c2a07c03dce06005bbf08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7853, "upload_time": "2020-04-09T15:44:08", "upload_time_iso_8601": "2020-04-09T15:44:08.593281Z", "url": "https://files.pythonhosted.org/packages/0e/88/9ecc1a7729db7f5ec89558c95ce563af8cdf4ce2847a17e66acc06e2eca6/dtw-som-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "f0a7019b0e9015a2c9cba4981c6f8ce7", "sha256": "388392dec34de0759c98e8da02777613f8588d1d0e42159dca8ce21e29cc058c"}, "downloads": -1, "filename": "dtw_som-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f0a7019b0e9015a2c9cba4981c6f8ce7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8385, "upload_time": "2020-04-20T11:05:01", "upload_time_iso_8601": "2020-04-20T11:05:01.509261Z", "url": "https://files.pythonhosted.org/packages/c7/72/20aab992f5815009ef59d008056f985fbae26881fa499d73730cc35acff4/dtw_som-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c27f37e33c7b3928c66b2a72c80607fe", "sha256": "5a349e24b6b404b62b45c9b80ede41240029eefe55f826ab9f84fd8914517015"}, "downloads": -1, "filename": "dtw-som-1.0.7.tar.gz", "has_sig": false, "md5_digest": "c27f37e33c7b3928c66b2a72c80607fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8119, "upload_time": "2020-04-20T11:05:02", "upload_time_iso_8601": "2020-04-20T11:05:02.793325Z", "url": "https://files.pythonhosted.org/packages/55/16/1c7240bac980cba5ae273d165eadd2e0174050f71c523cfb41f4baea6ea1/dtw-som-1.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f0a7019b0e9015a2c9cba4981c6f8ce7", "sha256": "388392dec34de0759c98e8da02777613f8588d1d0e42159dca8ce21e29cc058c"}, "downloads": -1, "filename": "dtw_som-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f0a7019b0e9015a2c9cba4981c6f8ce7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8385, "upload_time": "2020-04-20T11:05:01", "upload_time_iso_8601": "2020-04-20T11:05:01.509261Z", "url": "https://files.pythonhosted.org/packages/c7/72/20aab992f5815009ef59d008056f985fbae26881fa499d73730cc35acff4/dtw_som-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c27f37e33c7b3928c66b2a72c80607fe", "sha256": "5a349e24b6b404b62b45c9b80ede41240029eefe55f826ab9f84fd8914517015"}, "downloads": -1, "filename": "dtw-som-1.0.7.tar.gz", "has_sig": false, "md5_digest": "c27f37e33c7b3928c66b2a72c80607fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8119, "upload_time": "2020-04-20T11:05:02", "upload_time_iso_8601": "2020-04-20T11:05:02.793325Z", "url": "https://files.pythonhosted.org/packages/55/16/1c7240bac980cba5ae273d165eadd2e0174050f71c523cfb41f4baea6ea1/dtw-som-1.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:10 2020"}