{"info": {"author": "Mahdi Mohaveri", "author_email": "mmohaveri@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Utilities", "Typing :: Typed"], "description": "# Config-Man\n\nConfig-Man is a configuration manager for python projects. It helps you handle your project's runtime configurations in\nan easy and clean way. It also supports multiple config sources like **json file**, **environment variables**,\n**hard coded defaults**, etc.\n\n## Installation\n\nSimply install using pip:\n\n```bash\npip install config-man\n```\n\nKeep in mind that Config-Man uses [Python type annotations (PEP 484)](https://www.python.org/dev/peps/pep-0484/), and\n[f-Strings (PEP 498)](https://www.python.org/dev/peps/pep-0498/) so you'll need Python 3.6 or higher.\n\n## Usage\n\n### Defining config\n\nIn Config-Man, configuration is defined using a class subclassed from `configman.ConfigMan`.\nIn this class, configurations are static members with [type hints](https://docs.python.org/3/library/typing.html).\n\nCurrently Config-Man only supports primitives (bool, int, float, str) and subtypes of `configman.ConfigMan`:\n\n```python\nfrom configman import ConfigMan\n\n\nclass ServerConfig(ConfigMan):\n    port: int\n    log_level: str\n```\n\nFor creation of nested configs (for more organized code) simply do the following:\n\n```python\nfrom configman import ConfigMan\n\n\nclass LoggingConfig(ConfigMan):\n    log_level: str\n\n\nclass Config(ConfigMan):\n    port: int\n    logging: LoggingConfig\n```\n\nYou can add default values during definition simply by assigning a value to it:\n\n```python\nfrom configman import ConfigMan\n\n\nclass ServerConfig(ConfigMan):\n    port: int = 80\n    log_level: str = \"error\"\n```\n\n### Loading config\n\nFirst of all, you need to create an instance of your main config:\n\n```python\nconfig = Config()\n```\n\n#### Config Sources\n\nThen you need to tell it where to look for configurations. Config-Man supports multiple config sources. Currently it\nsupports hard-coded, environment variables, json config files and arguments. If there is a config source that you need\nand Config-Man does not support feel free to open an issue.\n\n##### 1. hard-coded\n\nApart from the default value you set during config definition, you can add an other default value during config load\nprocess simply by assigning the default value to it:\n\n```python\nconfig.port = 443\n```\n\n##### 2. Environment Variables\n\nConfig-Man can read configurations from environment variables.\n\nOne way to use env as a source is to assign a specific env to a config:\n\n```python\nconfig.set_env(\"logging.log_level\")\n```\n\nBy default all dots \".\" in a variable path will be replaced by double under scores \"\\_\\_\", So `logging.log_level` will\nbe filled by the value of `logging__log_level`.\n\nYou can also set a specific name for the env:\n\n```python\nconfig.set_env(\"logging.log_level\", \"LOG_LEVEL\")\n```\n\nAnother way is to tell Config-Man to load all possible configs from env\n\n```python\nconfig.set_auto_env()\n```\n\nIn order to avoid collisions between different programs, you can add a prefix to all envs (in auto_env):\n\n```python\nconfig.set_auto_env(\"MY_PROGRAM\")\n```\n\nNow when you load the config, Config-Man tries to read `MY_PROGRAM__PORT` and `MY_PROGRAM__logging__log_level` and put\ntheir values into the corresponding variables.\n\n##### 3. Config File\n\nCurrently Config-Man only supports json config files. You can set config file using:\n\n```python\nconfig.set_config_file(\"config.json\")\n```\n\n##### 4. Arguments\n\nYou can tell Config-Man to read a specific config from arguments using:\n\n```python\nimport argparse\n\nparser = argparse.ArgumentParser()\nconfig.set_arg(\"logging.log_level\", \"log_level\", parser)\n```\n\nConfig-Man automatically adds needed argument to parser. If necessary, you can also define `action`, `help`, and `required`.\n\n#### Loading Configs\n\nFinally you can load the config itself by calling:\n\n```python\nconfig.load()\n```\n\nBy default configs from file overrides config from env and config from args overrides everything else.\n\nIf you like to do things in a different way, you can run `load_from_env`, `load_from_file` and `load_from_args` by\nyourself in any order to desire.\n\n### Creating an empty config file\n\nIf you wish to create an empty config file, you can do so using `to_dict`:\n\n```python\nimport json\n\nconfig = Config()\n\nwith open(\"config.json\", \"w\") as f:\n    json.dump(f, config.to_dict(), indent=2)\n```\n\nThis way config.json will contain an empty config ready for you to fill.\n\n### Full example\n\n```python\nimport argparse\n\nfrom configman import ConfigMan\n\n\nclass LoggingConfig(ConfigMan):\n    log_level: str = \"error\"\n\n\nclass Config(ConfigMan):\n    port: int\n    logging: LoggingConfig\n\n\nconfig = Config()\nparser = argparse.ArgumentParser()\n\nconfig.port = 443\nconfig.set_auto_env(\"MY_PROGRAM\")\nconfig.set_env(\"logging.log_level\", \"LOG_LEVEL\")\nconfig.set_config_file(\"config.json\")\nconfig.set_arg(\"logging.log_level\", \"--log_level\", \"-l\", parser)\n\nargs = parser.parse_args()\n\nconfig.load(args)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mmohaveri/config-man", "keywords": "development configuration", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "config-man", "package_url": "https://pypi.org/project/config-man/", "platform": "", "project_url": "https://pypi.org/project/config-man/", "project_urls": {"Homepage": "https://github.com/mmohaveri/config-man"}, "release_url": "https://pypi.org/project/config-man/0.0.4/", "requires_dist": ["glom (>=19.10.0)"], "requires_python": ">=3.6", "summary": "An easy Python configuration manager with Typing support.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Config-Man</h1>\n<p>Config-Man is a configuration manager for python projects. It helps you handle your project's runtime configurations in\nan easy and clean way. It also supports multiple config sources like <strong>json file</strong>, <strong>environment variables</strong>,\n<strong>hard coded defaults</strong>, etc.</p>\n<h2>Installation</h2>\n<p>Simply install using pip:</p>\n<pre>pip install config-man\n</pre>\n<p>Keep in mind that Config-Man uses <a href=\"https://www.python.org/dev/peps/pep-0484/\" rel=\"nofollow\">Python type annotations (PEP 484)</a>, and\n<a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"nofollow\">f-Strings (PEP 498)</a> so you'll need Python 3.6 or higher.</p>\n<h2>Usage</h2>\n<h3>Defining config</h3>\n<p>In Config-Man, configuration is defined using a class subclassed from <code>configman.ConfigMan</code>.\nIn this class, configurations are static members with <a href=\"https://docs.python.org/3/library/typing.html\" rel=\"nofollow\">type hints</a>.</p>\n<p>Currently Config-Man only supports primitives (bool, int, float, str) and subtypes of <code>configman.ConfigMan</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configman</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigMan</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ServerConfig</span><span class=\"p\">(</span><span class=\"n\">ConfigMan</span><span class=\"p\">):</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</pre>\n<p>For creation of nested configs (for more organized code) simply do the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configman</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigMan</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LoggingConfig</span><span class=\"p\">(</span><span class=\"n\">ConfigMan</span><span class=\"p\">):</span>\n    <span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">(</span><span class=\"n\">ConfigMan</span><span class=\"p\">):</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">logging</span><span class=\"p\">:</span> <span class=\"n\">LoggingConfig</span>\n</pre>\n<p>You can add default values during definition simply by assigning a value to it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configman</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigMan</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ServerConfig</span><span class=\"p\">(</span><span class=\"n\">ConfigMan</span><span class=\"p\">):</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>\n    <span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"error\"</span>\n</pre>\n<h3>Loading config</h3>\n<p>First of all, you need to create an instance of your main config:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n</pre>\n<h4>Config Sources</h4>\n<p>Then you need to tell it where to look for configurations. Config-Man supports multiple config sources. Currently it\nsupports hard-coded, environment variables, json config files and arguments. If there is a config source that you need\nand Config-Man does not support feel free to open an issue.</p>\n<h5>1. hard-coded</h5>\n<p>Apart from the default value you set during config definition, you can add an other default value during config load\nprocess simply by assigning the default value to it:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">443</span>\n</pre>\n<h5>2. Environment Variables</h5>\n<p>Config-Man can read configurations from environment variables.</p>\n<p>One way to use env as a source is to assign a specific env to a config:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_env</span><span class=\"p\">(</span><span class=\"s2\">\"logging.log_level\"</span><span class=\"p\">)</span>\n</pre>\n<p>By default all dots \".\" in a variable path will be replaced by double under scores \"__\", So <code>logging.log_level</code> will\nbe filled by the value of <code>logging__log_level</code>.</p>\n<p>You can also set a specific name for the env:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_env</span><span class=\"p\">(</span><span class=\"s2\">\"logging.log_level\"</span><span class=\"p\">,</span> <span class=\"s2\">\"LOG_LEVEL\"</span><span class=\"p\">)</span>\n</pre>\n<p>Another way is to tell Config-Man to load all possible configs from env</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_auto_env</span><span class=\"p\">()</span>\n</pre>\n<p>In order to avoid collisions between different programs, you can add a prefix to all envs (in auto_env):</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_auto_env</span><span class=\"p\">(</span><span class=\"s2\">\"MY_PROGRAM\"</span><span class=\"p\">)</span>\n</pre>\n<p>Now when you load the config, Config-Man tries to read <code>MY_PROGRAM__PORT</code> and <code>MY_PROGRAM__logging__log_level</code> and put\ntheir values into the corresponding variables.</p>\n<h5>3. Config File</h5>\n<p>Currently Config-Man only supports json config files. You can set config file using:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_config_file</span><span class=\"p\">(</span><span class=\"s2\">\"config.json\"</span><span class=\"p\">)</span>\n</pre>\n<h5>4. Arguments</h5>\n<p>You can tell Config-Man to read a specific config from arguments using:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_arg</span><span class=\"p\">(</span><span class=\"s2\">\"logging.log_level\"</span><span class=\"p\">,</span> <span class=\"s2\">\"log_level\"</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">)</span>\n</pre>\n<p>Config-Man automatically adds needed argument to parser. If necessary, you can also define <code>action</code>, <code>help</code>, and <code>required</code>.</p>\n<h4>Loading Configs</h4>\n<p>Finally you can load the config itself by calling:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n</pre>\n<p>By default configs from file overrides config from env and config from args overrides everything else.</p>\n<p>If you like to do things in a different way, you can run <code>load_from_env</code>, <code>load_from_file</code> and <code>load_from_args</code> by\nyourself in any order to desire.</p>\n<h3>Creating an empty config file</h3>\n<p>If you wish to create an empty config file, you can do so using <code>to_dict</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"config.json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(),</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>This way config.json will contain an empty config ready for you to fill.</p>\n<h3>Full example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">configman</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigMan</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LoggingConfig</span><span class=\"p\">(</span><span class=\"n\">ConfigMan</span><span class=\"p\">):</span>\n    <span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"error\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">(</span><span class=\"n\">ConfigMan</span><span class=\"p\">):</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">logging</span><span class=\"p\">:</span> <span class=\"n\">LoggingConfig</span>\n\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">443</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_auto_env</span><span class=\"p\">(</span><span class=\"s2\">\"MY_PROGRAM\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_env</span><span class=\"p\">(</span><span class=\"s2\">\"logging.log_level\"</span><span class=\"p\">,</span> <span class=\"s2\">\"LOG_LEVEL\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_config_file</span><span class=\"p\">(</span><span class=\"s2\">\"config.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_arg</span><span class=\"p\">(</span><span class=\"s2\">\"logging.log_level\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--log_level\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-l\"</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">)</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6921317, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "aa42756d70045a3f016b89f0a8baa5ac", "sha256": "de2d7ddd99b9e62ce7c2fb12d257747f536aff117f61a14f5df073aada2f82bb"}, "downloads": -1, "filename": "config_man-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "aa42756d70045a3f016b89f0a8baa5ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6240, "upload_time": "2020-03-28T11:10:36", "upload_time_iso_8601": "2020-03-28T11:10:36.803435Z", "url": "https://files.pythonhosted.org/packages/dd/2e/e31a52527888df9c99dc4812718708da4fa7d3fbb39273681c2c85749221/config_man-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2874223183d7a85fe2dfc04a409b49b5", "sha256": "94a4eb548a41097bd378a403e1cbbbb7821be1fb93f2bc6a4e8798252162ebbc"}, "downloads": -1, "filename": "config-man-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2874223183d7a85fe2dfc04a409b49b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6673, "upload_time": "2020-03-28T11:10:38", "upload_time_iso_8601": "2020-03-28T11:10:38.529911Z", "url": "https://files.pythonhosted.org/packages/8b/4f/7636c8c98a7a79c2bc26d29b45d7664b76e7a0dfb92064da5febde3a4679/config-man-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a7a622f7389901766a819976587dd322", "sha256": "b8153fe3905a40648bcfc0a36cb44a98d67fa2239b0794e73be43ea46c681761"}, "downloads": -1, "filename": "config_man-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a7a622f7389901766a819976587dd322", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6271, "upload_time": "2020-03-31T16:00:14", "upload_time_iso_8601": "2020-03-31T16:00:14.248242Z", "url": "https://files.pythonhosted.org/packages/70/33/12dbdc2c0a028b5e245fcf45900234173755899bb5ad223e2be41e764959/config_man-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5525e93023be0912184460229edccc0d", "sha256": "d2b05e803baed98501b1cced066beaad013ecdee47a50495a027ee5f0b074041"}, "downloads": -1, "filename": "config-man-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5525e93023be0912184460229edccc0d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6721, "upload_time": "2020-03-31T16:00:16", "upload_time_iso_8601": "2020-03-31T16:00:16.902616Z", "url": "https://files.pythonhosted.org/packages/31/34/894f2c3a30842383de608993d6d5010b8b5a4b771cf81dbb0c4847e553e4/config-man-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "584337a2981bc3d843f9ef168690ec25", "sha256": "fc56fef26f4427eb8907407a433d0092f1afd783335b1f2b19352c9f5252b347"}, "downloads": -1, "filename": "config_man-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "584337a2981bc3d843f9ef168690ec25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6294, "upload_time": "2020-03-31T16:29:37", "upload_time_iso_8601": "2020-03-31T16:29:37.910896Z", "url": "https://files.pythonhosted.org/packages/a4/1a/8e847cf2365ef90897bf53291d41eb2c7b92f4cc28e1a67209d331beccf2/config_man-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "198a8c78b30541ec336b7fd52100804f", "sha256": "8965452785b2d0ce81fc45952143c7b12cc067c7d8add24ab121bcb581631cef"}, "downloads": -1, "filename": "config-man-0.0.4.tar.gz", "has_sig": false, "md5_digest": "198a8c78b30541ec336b7fd52100804f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6735, "upload_time": "2020-03-31T16:29:41", "upload_time_iso_8601": "2020-03-31T16:29:41.769518Z", "url": "https://files.pythonhosted.org/packages/fb/bb/ca8b932e0b81c13372058c35c0d8309625ba08c5e5722be4663682d5d7a7/config-man-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "584337a2981bc3d843f9ef168690ec25", "sha256": "fc56fef26f4427eb8907407a433d0092f1afd783335b1f2b19352c9f5252b347"}, "downloads": -1, "filename": "config_man-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "584337a2981bc3d843f9ef168690ec25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6294, "upload_time": "2020-03-31T16:29:37", "upload_time_iso_8601": "2020-03-31T16:29:37.910896Z", "url": "https://files.pythonhosted.org/packages/a4/1a/8e847cf2365ef90897bf53291d41eb2c7b92f4cc28e1a67209d331beccf2/config_man-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "198a8c78b30541ec336b7fd52100804f", "sha256": "8965452785b2d0ce81fc45952143c7b12cc067c7d8add24ab121bcb581631cef"}, "downloads": -1, "filename": "config-man-0.0.4.tar.gz", "has_sig": false, "md5_digest": "198a8c78b30541ec336b7fd52100804f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6735, "upload_time": "2020-03-31T16:29:41", "upload_time_iso_8601": "2020-03-31T16:29:41.769518Z", "url": "https://files.pythonhosted.org/packages/fb/bb/ca8b932e0b81c13372058c35c0d8309625ba08c5e5722be4663682d5d7a7/config-man-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:55 2020"}