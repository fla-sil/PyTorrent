{"info": {"author": "Jeff Terstriep", "author_email": "jefft@illinois.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: University of Illinois/NCSA Open Source License", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: GIS"], "description": "# Keras Spatial\nKeras Spatial includes data generators and tools designed to simplify \nthe preprocessing of spatial data for deep learning applications.\n\nKeras Spatial provides a data generator that reads samples directly\nfrom a raster data source and eliminates the need to create small, \nindividual raster files prior to model execution. The raster data \nsource may be local or remote service. Any necessary reprojections \nand scaling is handled automatically.\n\nCentral to the use of Keras Spatial is a GeoPandas GeoDataFrame which\ndefines a virtual sample set, a list of samples that drives the data\ngenerator. The dataframe can also be used to filter samples based\non different aspects such as the existance of nodata, handling \nimbalanced label distributions, and storing sample attributes used\nin normalization amoung other data augmentation functions.\n\nFeatures include:\n* Sample extraction from local or remote data sources -- no intermediate files\n* Automatic reprojection and resampling as needed\n* Sample augmentation using user-defined callback system\n* Flexible structure improves organization and data management\n\n## Installation\nTo install the package from PyPi repository you can execute the following command:\n\n```\npip install keras-spatial\n```\n\nor directly from GitHub\n\n```\n$ pip install git+https://github.com/IllinoisStateGeologicalSurvey/keras-spatial#egg=keras-spatial --process-dependency-links\n```\n\n## Quickstart\n\n1. Create a SpatialDataGen and set the source raster\n1. Create a geodataframe with 200x200 (in projection units) samples covering the spatial extent of the raster\n1. Create the generator producing arrays with shape [32, 128, 128, 1]\n1. Fit model\n\n```Python\nfrom keras_spatial.datagen import SpatialDataGenerator\n\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ngeodataframe = sdg.regular_grid(200, 200)\ngenerator = sdg.flow_from_dataframe(geodataframe, 128, 128, batch_size=32)\nmodel(generator, ...)\n```\n\n## Usage\n\nKeras Spatial provides a SpatialDataGenerator (SDG) modeled on the Keras \nImageDataGenerator. The SDG allows user to work in spatial coorindates rather\nthan pixels and easily integrate data from different coordinates systems. \nReprojection and resampling is handled automatically as needed. Because \nKeras Spatial is based on the rasterio package, raster data source may \neither local files or remote resources referenced by URL.\n\nBecause the SDG reads directly from larger raster data sources rather than\nsmall, preprocessed images files, SDG makes use of a GeoDataFrame to identify\neach sample area. The geometry associated with the datafame is expected to be\na polygon but extraction is done using a windowed read based on the bounds.\nAs with the ImageDataGenerator, the flow_from_dataframe method returns the \ngenerator that can be passed to the Keras model.\n\n### SpatialDataGenerator class\n\nThe SDG is similar to the ImageDataGenerator albeit missing the .flow and\nthe .flow_from_directory methods. SDG also moves more configutation\nand setting to the instance and with the .flow_from_dataframe having\nfew arguments.\n\n##### Arguments\n\n- source (path or url): raster source\n- width (int): array size produced by generator\n- height (int): array size produced by generator\n- indexes (int or tuple of ints): one or more raster bands to sampled\n- interleave (str): type of interleave 'band' or 'pixel' (default='pixel')\n- resampling (int): One of the values from rasterio.enums.Resampling \n(default=Resampling.nearest)\n\nRaises RasterioIOError when the source is set if the file or remote \nresource is not available.\n\n###### Examples\n\n```Python\nfrom keras_spatial import SpatialDataGenerator\n\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\nsdg.width, sdg.height = 128,128\n```\nThe source must be set prior to calling flow_from_dataframe.  Width and \nheight are also required but maybe passed as arguments to flow_from_dataframe.\n\nThe _indexes_ argument selects bands in a multiband raster. By default \nall bands are read and the _indexes_ argument is updated when the raster \n_source_ is set.\n\nIn multiband situations, if _interleave_ is set to 'band' the numpy array axes\nare moved to the following order [batch_size, bands, height, width].  This \ncan lead to incompatible shapes when using multiple SDG generators -- \nuse with care. The default interleave is 'pixel' which is compatible with\nTensorflow.\n\n```Python\n# file.tif is a 5 band raster\nsdg = SpatialDataGenerator('/path/to/file.tif')\ngen = sdg.flow_from_dataframe(df, 128, 128, batch_size=1)\nprint(next(gen).shape)\n> [1, 128, 128, 5]\nsdg.interleave = 'band'\ngen = sdg.flow_from_dataframe(df, 128, 128, batch_size=1)\nprint(next(gen.shape))\n> [1, 5, 200, 200]\n```\n\nBecause more than one SDG is expected to be used simultaneously and SDGs \nare expected to having matching spatial requirements, the SDG class \nprovides a profile attribute that can be easily share arguments across \ninstances as shown below. Note: source is not part of the profile.\n\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\nsdg2 = SpatialDataGenerator()\nsdg2.profile = sdg.profile\nsdg2.source = '/path/to/file2.tif'\n```\n\n### SpatialDataGenerator methods\n\n#### flow_from_dataframe\n```Python\nflow_from_dataframe(geodataframe, width, height, batch_size)\n```\n\nCreates a generator that returns a numpy ndarray of samples read from \nthe SDG source.\n\n##### Arguments\n- geodataframe (GeoDataFrame): a geodataframe with sample boundaries\n- width (int): width of array\n- height (int): height of array\n- batch_size (int): number of samples to returned by generator\n\n##### Returns\n\nA generator of numpy ndarrays of the shape [batch_size, height, width, bands].\n\n##### Example\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ngen = sdg.flow_from_dataframe(df, 128, 128)\narr = next(gen)\n```\n\n#### random_grid\n```Python\nrandom_grid(width, height, count, units='native')\n```\n\nCreates a geodataframe suitable to passing to the flow_from_dataframe \nmethod. The grid module provides a similar function using passed using \nspatial extents.\n\n##### Arguments\n- width (int): width in pixels\n- height (int): height in pixels\n- count (int): number of samples\n- units (str): units for width and height, either native or in pixels\n\n##### Returns\nA GeoDataFrame defining the polygon boundary of each sample.\n\n##### Example\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ndf = sdg.random_grid(200, 200, 1000)\n```\n\n#### regular_grid\n```Python\nregular_grid(width, height, overlap=0.0, units='native')\n```\n\nCreates a geodataframe suitable to passing to the flow_from_dataframe \nmethod. The sample module provides a similar function using passed using \nspatial extents.\n\n##### Arguments\n- width (int): width in pixels\n- height (int): width in pixels\n- overlap (float): percentage of overlap (default=0.0)\n- units (str): units for width and height, either native or in pixels\n\n##### Returns\nA GeoDataFrame defining the polygon boundary of each sample.\n\n##### Example\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ndf = sdg.regular_grid(200, 200)\n```\n\n## Full Example\n\n```python\nfrom keras_spatial import SpatialDataGenerator\nlabels = SpatialDataGenerator()\nlabels.source = '/path/to/labels.tif'\nlabels.width, labels.height = 128, 128\ndf = labels.regular_grid(200,200)\n\nsamples = SpatialDataGenerator()\nsamples.source = 'https://server.com/files/data.tif'\nsamples.width, samples.height = labels.width, label.height\n\ntrain_gen = zip(labels.flow_from_dataframe(df), patches.flow_from_dataframe(df))\nmodel(train_gen)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/IllinoisStateGeologicalSurvey/keras-spatial", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "keras-spatial", "package_url": "https://pypi.org/project/keras-spatial/", "platform": "any", "project_url": "https://pypi.org/project/keras-spatial/", "project_urls": {"Homepage": "https://github.com/IllinoisStateGeologicalSurvey/keras-spatial"}, "release_url": "https://pypi.org/project/keras-spatial/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "Keras Data Generator class for remote spatial data.", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Keras Spatial</h1>\n<p>Keras Spatial includes data generators and tools designed to simplify\nthe preprocessing of spatial data for deep learning applications.</p>\n<p>Keras Spatial provides a data generator that reads samples directly\nfrom a raster data source and eliminates the need to create small,\nindividual raster files prior to model execution. The raster data\nsource may be local or remote service. Any necessary reprojections\nand scaling is handled automatically.</p>\n<p>Central to the use of Keras Spatial is a GeoPandas GeoDataFrame which\ndefines a virtual sample set, a list of samples that drives the data\ngenerator. The dataframe can also be used to filter samples based\non different aspects such as the existance of nodata, handling\nimbalanced label distributions, and storing sample attributes used\nin normalization amoung other data augmentation functions.</p>\n<p>Features include:</p>\n<ul>\n<li>Sample extraction from local or remote data sources -- no intermediate files</li>\n<li>Automatic reprojection and resampling as needed</li>\n<li>Sample augmentation using user-defined callback system</li>\n<li>Flexible structure improves organization and data management</li>\n</ul>\n<h2>Installation</h2>\n<p>To install the package from PyPi repository you can execute the following command:</p>\n<pre><code>pip install keras-spatial\n</code></pre>\n<p>or directly from GitHub</p>\n<pre><code>$ pip install git+https://github.com/IllinoisStateGeologicalSurvey/keras-spatial#egg=keras-spatial --process-dependency-links\n</code></pre>\n<h2>Quickstart</h2>\n<ol>\n<li>Create a SpatialDataGen and set the source raster</li>\n<li>Create a geodataframe with 200x200 (in projection units) samples covering the spatial extent of the raster</li>\n<li>Create the generator producing arrays with shape [32, 128, 128, 1]</li>\n<li>Fit model</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_spatial.datagen</span> <span class=\"kn\">import</span> <span class=\"n\">SpatialDataGenerator</span>\n\n<span class=\"n\">sdg</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/file.tif'</span><span class=\"p\">)</span>\n<span class=\"n\">geodataframe</span> <span class=\"o\">=</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">regular_grid</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">flow_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">geodataframe</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h2>Usage</h2>\n<p>Keras Spatial provides a SpatialDataGenerator (SDG) modeled on the Keras\nImageDataGenerator. The SDG allows user to work in spatial coorindates rather\nthan pixels and easily integrate data from different coordinates systems.\nReprojection and resampling is handled automatically as needed. Because\nKeras Spatial is based on the rasterio package, raster data source may\neither local files or remote resources referenced by URL.</p>\n<p>Because the SDG reads directly from larger raster data sources rather than\nsmall, preprocessed images files, SDG makes use of a GeoDataFrame to identify\neach sample area. The geometry associated with the datafame is expected to be\na polygon but extraction is done using a windowed read based on the bounds.\nAs with the ImageDataGenerator, the flow_from_dataframe method returns the\ngenerator that can be passed to the Keras model.</p>\n<h3>SpatialDataGenerator class</h3>\n<p>The SDG is similar to the ImageDataGenerator albeit missing the .flow and\nthe .flow_from_directory methods. SDG also moves more configutation\nand setting to the instance and with the .flow_from_dataframe having\nfew arguments.</p>\n<h5>Arguments</h5>\n<ul>\n<li>source (path or url): raster source</li>\n<li>width (int): array size produced by generator</li>\n<li>height (int): array size produced by generator</li>\n<li>indexes (int or tuple of ints): one or more raster bands to sampled</li>\n<li>interleave (str): type of interleave 'band' or 'pixel' (default='pixel')</li>\n<li>resampling (int): One of the values from rasterio.enums.Resampling\n(default=Resampling.nearest)</li>\n</ul>\n<p>Raises RasterioIOError when the source is set if the file or remote\nresource is not available.</p>\n<h6>Examples</h6>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_spatial</span> <span class=\"kn\">import</span> <span class=\"n\">SpatialDataGenerator</span>\n\n<span class=\"n\">sdg</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/file.tif'</span><span class=\"p\">)</span>\n<span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"mi\">128</span>\n</pre>\n<p>The source must be set prior to calling flow_from_dataframe.  Width and\nheight are also required but maybe passed as arguments to flow_from_dataframe.</p>\n<p>The <em>indexes</em> argument selects bands in a multiband raster. By default\nall bands are read and the <em>indexes</em> argument is updated when the raster\n<em>source</em> is set.</p>\n<p>In multiband situations, if <em>interleave</em> is set to 'band' the numpy array axes\nare moved to the following order [batch_size, bands, height, width].  This\ncan lead to incompatible shapes when using multiple SDG generators --\nuse with care. The default interleave is 'pixel' which is compatible with\nTensorflow.</p>\n<pre><span class=\"c1\"># file.tif is a 5 band raster</span>\n<span class=\"n\">sdg</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.tif'</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">flow_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">interleave</span> <span class=\"o\">=</span> <span class=\"s1\">'band'</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">flow_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">]</span>\n</pre>\n<p>Because more than one SDG is expected to be used simultaneously and SDGs\nare expected to having matching spatial requirements, the SDG class\nprovides a profile attribute that can be easily share arguments across\ninstances as shown below. Note: source is not part of the profile.</p>\n<pre><span class=\"n\">sdg</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/file.tif'</span><span class=\"p\">)</span>\n<span class=\"n\">sdg2</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">()</span>\n<span class=\"n\">sdg2</span><span class=\"o\">.</span><span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">profile</span>\n<span class=\"n\">sdg2</span><span class=\"o\">.</span><span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/file2.tif'</span>\n</pre>\n<h3>SpatialDataGenerator methods</h3>\n<h4>flow_from_dataframe</h4>\n<pre><span class=\"n\">flow_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">geodataframe</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">)</span>\n</pre>\n<p>Creates a generator that returns a numpy ndarray of samples read from\nthe SDG source.</p>\n<h5>Arguments</h5>\n<ul>\n<li>geodataframe (GeoDataFrame): a geodataframe with sample boundaries</li>\n<li>width (int): width of array</li>\n<li>height (int): height of array</li>\n<li>batch_size (int): number of samples to returned by generator</li>\n</ul>\n<h5>Returns</h5>\n<p>A generator of numpy ndarrays of the shape [batch_size, height, width, bands].</p>\n<h5>Example</h5>\n<pre><span class=\"n\">sdg</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/file.tif'</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">flow_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span>\n</pre>\n<h4>random_grid</h4>\n<pre><span class=\"n\">random_grid</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">'native'</span><span class=\"p\">)</span>\n</pre>\n<p>Creates a geodataframe suitable to passing to the flow_from_dataframe\nmethod. The grid module provides a similar function using passed using\nspatial extents.</p>\n<h5>Arguments</h5>\n<ul>\n<li>width (int): width in pixels</li>\n<li>height (int): height in pixels</li>\n<li>count (int): number of samples</li>\n<li>units (str): units for width and height, either native or in pixels</li>\n</ul>\n<h5>Returns</h5>\n<p>A GeoDataFrame defining the polygon boundary of each sample.</p>\n<h5>Example</h5>\n<pre><span class=\"n\">sdg</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/file.tif'</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">random_grid</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<h4>regular_grid</h4>\n<pre><span class=\"n\">regular_grid</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">overlap</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">'native'</span><span class=\"p\">)</span>\n</pre>\n<p>Creates a geodataframe suitable to passing to the flow_from_dataframe\nmethod. The sample module provides a similar function using passed using\nspatial extents.</p>\n<h5>Arguments</h5>\n<ul>\n<li>width (int): width in pixels</li>\n<li>height (int): width in pixels</li>\n<li>overlap (float): percentage of overlap (default=0.0)</li>\n<li>units (str): units for width and height, either native or in pixels</li>\n</ul>\n<h5>Returns</h5>\n<p>A GeoDataFrame defining the polygon boundary of each sample.</p>\n<h5>Example</h5>\n<pre><span class=\"n\">sdg</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/file.tif'</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">sdg</span><span class=\"o\">.</span><span class=\"n\">regular_grid</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre>\n<h2>Full Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_spatial</span> <span class=\"kn\">import</span> <span class=\"n\">SpatialDataGenerator</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">()</span>\n<span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/labels.tif'</span>\n<span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">regular_grid</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">SpatialDataGenerator</span><span class=\"p\">()</span>\n<span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"s1\">'https://server.com/files/data.tif'</span>\n<span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">height</span>\n\n<span class=\"n\">train_gen</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">flow_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">),</span> <span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">flow_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">))</span>\n<span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">train_gen</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6176967, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "06685c5ace80f10f549ebeddbd8e3c55", "sha256": "b55ea7a5a1c37583339c8735c42c5a2004de31a262470796ee83006833ee1da0"}, "downloads": -1, "filename": "keras-spatial-1.0.0.tar.gz", "has_sig": false, "md5_digest": "06685c5ace80f10f549ebeddbd8e3c55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14083, "upload_time": "2019-11-04T05:47:06", "upload_time_iso_8601": "2019-11-04T05:47:06.455213Z", "url": "https://files.pythonhosted.org/packages/2b/54/61becacc2ea30febd340edb79585700121c9f9d4600e15c8da96fc9a74eb/keras-spatial-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "dfc67420d1902ec84d1b518037dbdec7", "sha256": "85abc80407c4a6b3331ea137f47992f88905fd41cc1285785caadfd83b5713b3"}, "downloads": -1, "filename": "keras-spatial-1.0.1.tar.gz", "has_sig": false, "md5_digest": "dfc67420d1902ec84d1b518037dbdec7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14120, "upload_time": "2019-11-04T14:23:30", "upload_time_iso_8601": "2019-11-04T14:23:30.248506Z", "url": "https://files.pythonhosted.org/packages/27/34/db6072e10b45d1e71b53db997af63f840c8589750c62a0afebb335c7cf83/keras-spatial-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "680afc6c893c95f465b2cf5f251b3474", "sha256": "c767aace7e342076909a6ce75fa6680fe963e11e546ed76ecb16758e6d29f5da"}, "downloads": -1, "filename": "keras-spatial-1.0.2.tar.gz", "has_sig": false, "md5_digest": "680afc6c893c95f465b2cf5f251b3474", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14398, "upload_time": "2019-11-04T17:55:55", "upload_time_iso_8601": "2019-11-04T17:55:55.836632Z", "url": "https://files.pythonhosted.org/packages/db/6c/216a863712661f23cdcd0d86a686243249fe61e410d6bc742d7ce2cfc125/keras-spatial-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "73235b1069ebc36ea694bc2051527b48", "sha256": "c7c7d8c06b709af3874d79a17df935e48dbeaafde6ce9b967731b802af7eef77"}, "downloads": -1, "filename": "keras-spatial-1.0.4.tar.gz", "has_sig": false, "md5_digest": "73235b1069ebc36ea694bc2051527b48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17820, "upload_time": "2019-11-21T19:40:37", "upload_time_iso_8601": "2019-11-21T19:40:37.496160Z", "url": "https://files.pythonhosted.org/packages/a9/3f/add83f6dba96fa9feab63c60589c497409857808076d049a27232823bf07/keras-spatial-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73235b1069ebc36ea694bc2051527b48", "sha256": "c7c7d8c06b709af3874d79a17df935e48dbeaafde6ce9b967731b802af7eef77"}, "downloads": -1, "filename": "keras-spatial-1.0.4.tar.gz", "has_sig": false, "md5_digest": "73235b1069ebc36ea694bc2051527b48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17820, "upload_time": "2019-11-21T19:40:37", "upload_time_iso_8601": "2019-11-21T19:40:37.496160Z", "url": "https://files.pythonhosted.org/packages/a9/3f/add83f6dba96fa9feab63c60589c497409857808076d049a27232823bf07/keras-spatial-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:09 2020"}