{"info": {"author": "Robert Collins", "author_email": "subunit-dev@lists.launchpad.net", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Testing"], "description": "\n  subunit: A streaming protocol for test results\n  Copyright (C) 2005-2013 Robert Collins <robertc@robertcollins.net>\n\n  Licensed under either the Apache License, Version 2.0 or the BSD 3-clause\n  license at the users choice. A copy of both licenses are available in the\n  project source as Apache-2.0 and BSD. You may not use this file except in\n  compliance with one of these two licences.\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under these licenses is distributed on an \"AS IS\" BASIS, WITHOUT\n  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n  license you chose for the specific language governing permissions and\n  limitations under that license.\n\n  See the COPYING file for full details on the licensing of Subunit.\n\n  subunit reuses iso8601 by Michael Twomey, distributed under an MIT style\n  licence - see python/iso8601/LICENSE for details.\n\nSubunit\n-------\n\nSubunit is a streaming protocol for test results.\n\nThere are two major revisions of the protocol. Version 1 was trivially human\nreadable but had significant defects as far as highly parallel testing was\nconcerned - it had no room for doing discovery and execution in parallel,\nrequired substantial buffering when multiplexing and was fragile - a corrupt\nbyte could cause an entire stream to be misparsed. Version 1.1 added\nencapsulation of binary streams which mitigated some of the issues but the\ncore remained.\n\nVersion 2 shares many of the good characteristics of Version 1 - it can be\nembedded into a regular text stream (e.g. from a build system) and it still\nmodels xUnit style test execution. It also fixes many of the issues with\nVersion 1 - Version 2 can be multiplexed without excessive buffering (in\ntime or space), it has a well defined recovery mechanism for dealing with\ncorrupted streams (e.g. where two processes write to the same stream\nconcurrently, or where the stream generator suffers a bug).\n\nMore details on both protocol version s can be found in the 'Protocol' section\nof this document.\n\nSubunit comes with command line filters to process a subunit stream and\nlanguage bindings for python, C, C++ and shell. Bindings are easy to write\nfor other languages.\n\nA number of useful things can be done easily with subunit:\n * Test aggregation: Tests run separately can be combined and then\n   reported/displayed together. For instance, tests from different languages\n   can be shown as a seamless whole, and tests running on multiple machines\n   can be aggregated into a single stream through a multiplexer.\n * Test archiving: A test run may be recorded and replayed later.\n * Test isolation: Tests that may crash or otherwise interact badly with each\n   other can be run seperately and then aggregated, rather than interfering\n   with each other or requiring an adhoc test->runner reporting protocol.\n * Grid testing: subunit can act as the necessary serialisation and\n   deserialiation to get test runs on distributed machines to be reported in\n   real time.\n\nSubunit supplies the following filters:\n * tap2subunit - convert perl's TestAnythingProtocol to subunit.\n * subunit2csv - convert a subunit stream to csv.\n * subunit2disk - export a subunit stream to files on disk.\n * subunit2pyunit - convert a subunit stream to pyunit test results.\n * subunit2gtk - show a subunit stream in GTK.\n * subunit2junitxml - convert a subunit stream to JUnit's XML format.\n * subunit-diff - compare two subunit streams.\n * subunit-filter - filter out tests from a subunit stream.\n * subunit-ls - list info about tests present in a subunit stream.\n * subunit-stats - generate a summary of a subunit stream.\n * subunit-tags - add or remove tags from a stream.\n\nIntegration with other tools\n----------------------------\n\nSubunit's language bindings act as integration with various test runners like\n'check', 'cppunit', Python's 'unittest'. Beyond that a small amount of glue\n(typically a few lines) will allow Subunit to be used in more sophisticated\nways.\n\nPython\n======\n\nSubunit has excellent Python support: most of the filters and tools are written\nin python and there are facilities for using Subunit to increase test isolation\nseamlessly within a test suite.\n\nThe most common way is to run an existing python test suite and have it output\nsubunit via the ``subunit.run`` module::\n\n  $ python -m subunit.run mypackage.tests.test_suite\n\nFor more information on the Python support Subunit offers , please see\n``pydoc subunit``, or the source in ``python/subunit/``\n\nC\n=\n\nSubunit has C bindings to emit the protocol. The 'check' C unit testing project\nhas included subunit support in their project for some years now. See\n'c/README' for more details.\n\nC++\n===\n\nThe C library is includable and usable directly from C++. A TestListener for\nCPPUnit is included in the Subunit distribution. See 'c++/README' for details.\n\nshell\n=====\n\nThere are two sets of shell tools. There are filters, which accept a subunit\nstream on stdin and output processed data (or a transformed stream) on stdout.\n\nThen there are unittest facilities similar to those for C : shell bindings\nconsisting of simple functions to output protocol elements, and a patch for\nadding subunit output to the 'ShUnit' shell test runner. See 'shell/README' for\ndetails.\n\nFilter recipes\n--------------\n\nTo ignore some failing tests whose root cause is already known::\n\n  subunit-filter --without 'AttributeError.*flavor'\n\n\nThe xUnit test model\n--------------------\n\nSubunit implements a slightly modified xUnit test model. The stock standard\nmodel is that there are tests, which have an id(), can be run, and when run\nstart, emit an outcome (like success or failure) and then finish.\n\nSubunit extends this with the idea of test enumeration (find out about tests\na runner has without running them), tags (allow users to describe tests in\nways the test framework doesn't apply any semantic value to), file attachments\n(allow arbitrary data to make analysing a failure easy) and timestamps.\n\nThe protocol\n------------\n\nVersion 2, or v2 is new and still under development, but is intended to\nsupercede version 1 in the very near future. Subunit's bundled tools accept\nonly version 2 and only emit version 2, but the new filters subunit-1to2 and\nsubunit-2to1 can be used to interoperate with older third party libraries.\n\nVersion 2\n=========\n\nVersion 2 is a binary protocol consisting of independent packets that can be\nembedded in the output from tools like make - as long as each packet has no\nother bytes mixed in with it (which 'make -j N>1' has a tendency of doing).\nVersion 2 is currently in draft form, and early adopters should be willing\nto either discard stored results (if protocol changes are made), or bulk\nconvert them back to v1 and then to a newer edition of v2.\n\nThe protocol synchronises at the start of the stream, after a packet, or\nafter any 0x0A byte. That is, a subunit v2 packet starts after a newline or\ndirectly after the end of the prior packet.\n\nSubunit is intended to be transported over a reliable streaming protocol such\nas TCP. As such it does not concern itself with out of order delivery of\npackets. However, because of the possibility of corruption due to either\nbugs in the sender, or due to mixed up data from concurrent writes to the same\nfd when being embedded, subunit strives to recover reasonably gracefully from\ndamaged data.\n\nA key design goal for Subunit version 2 is to allow processing and multiplexing\nwithout forcing buffering for semantic correctness, as buffering tends to hide\nhung or otherwise misbehaving tests. That said, limited time based buffering\nfor network efficiency is a good idea - this is ultimately implementator\nchoice. Line buffering is also discouraged for subunit streams, as dropping\ninto a debugger or other tool may require interactive traffic even if line\nbuffering would not otherwise be a problem.\n\nIn version two there are two conceptual events - a test status event and a file\nattachment event. Events may have timestamps, and the path of multiplexers that\nan event is routed through is recorded to permit sending actions back to the\nsource (such as new tests to run or stdin for driving debuggers and other\ninteractive input). Test status events are used to enumerate tests, to report\ntests and test helpers as they run. Tests may have tags, used to allow\ntunnelling extra meanings through subunit without requiring parsing of\narbitrary file attachments. Things that are not standalone tests get marked\nas such by setting the 'Runnable' flag to false. (For instance, individual\nassertions in TAP are not runnable tests, only the top level TAP test script\nis runnable).\n\nFile attachments are used to provide rich detail about the nature of a failure.\nFile attachments can also be used to encapsulate stdout and stderr both during\nand outside tests.\n\nMost numbers are stored in network byte order - Most Significant Byte first\nencoded using a variation of http://www.dlugosz.com/ZIP2/VLI.html. The first\nbyte's top 2 high order bits encode the total number of octets in the number.\nThis encoding can encode values from 0 to 2**30-1, enough to encode a\nnanosecond. Numbers that are not variable length encoded are still stored in\nMSB order.\n\n+--------+--------+---------+------------+\n| prefix | octets | max     | max        |\n+========+========+=========+============+\n| 00     |      1 |  2**6-1 |         63 |\n+--------+--------+---------+------------+\n| 01     |      2 | 2**14-1 |      16383 |\n+--------+--------+---------+------------+\n| 10     |      3 | 2**22-1 |    4194303 |\n+--------+--------+---------+------------+\n| 11     |      4 | 2**30-1 | 1073741823 |\n+--------+--------+---------+------------+\n\nAll variable length elements of the packet are stored with a length prefix\nnumber allowing them to be skipped over for consumers that don't need to\ninterpret them.\n\nUTF-8 strings are with no terminating NUL and should not have any embedded NULs\n(implementations SHOULD validate any such strings that they process and take\nsome remedial action (such as discarding the packet as corrupt).\n\nIn short the structure of a packet is:\n\n  PACKET := SIGNATURE FLAGS PACKET_LENGTH TIMESTAMP? TESTID? TAGS? MIME?\n            FILECONTENT? ROUTING_CODE? CRC32\n\nIn more detail...\n\nPackets are identified by a single byte signature - 0xB3, which is never legal\nin a UTF-8 stream as the first byte of a character. 0xB3 starts with the first\nbit set and the second not, which is the UTF-8 signature for a continuation\nbyte. 0xB3 was chosen as 0x73 ('s' in ASCII') with the top two bits replaced by\nthe 1 and 0 for a continuation byte.\n\nIf subunit packets are being embedded in a non-UTF-8 text stream, where 0x73 is\na legal character, consider either recoding the text to UTF-8, or using\nsubunit's 'file' packets to embed the text stream in subunit, rather than the\nother way around.\n\nFollowing the signature byte comes a 16-bit flags field, which includes a\n4-bit version field - if the version is not 0x2 then the packet cannot be\nread. It is recommended to signal an error at this point (e.g. by emitting\na synthetic error packet and returning to the top level loop to look for\nnew packets, or exiting with an error). If recovery is desired, treat the\npacket signature as an opaque byte and scan for a new synchronisation point.\nNB: Subunit V1 and V2 packets may legitimately included 0xB3 internally,\nas they are an 8-bit safe container format, so recovery from this situation\nmay involve an arbitrary number of false positives until an actual packet\nis encountered : and even then it may still be false, failing after passing\nthe version check due to coincidence.\n\nFlags are stored in network byte order too.\n\n+------------+------------+------------------------+\n| High byte               | Low byte               |\n+------------+------------+------------------------+\n| 15 14 13 12 11 10  9  8 | 7  6  5  4  3  2  1  0 |\n+------------+------------+------------------------+\n| VERSION    |      feature bits                   |\n+------------+-------------------------------------+\n\nValid version values are:\n0x2 - version 2\n\nFeature bits:\n\n+---------+-------------+---------------------------+\n| Bit 11  | mask 0x0800 | Test id present.          |\n+---------+-------------+---------------------------+\n| Bit 10  | mask 0x0400 | Routing code present.     |\n+---------+-------------+---------------------------+\n| Bit  9  | mask 0x0200 | Timestamp present.        |\n+---------+-------------+---------------------------+\n| Bit  8  | mask 0x0100 | Test is 'runnable'.       |\n+---------+-------------+---------------------------+\n| Bit  7  | mask 0x0080 | Tags are present.         |\n+---------+-------------+---------------------------+\n| Bit  6  | mask 0x0040 | File content is present.  |\n+---------+-------------+---------------------------+\n| Bit  5  | mask 0x0020 | File MIME type is present.|\n+---------+-------------+---------------------------+\n| Bit  4  | mask 0x0010 | EOF marker.               |\n+---------+-------------+---------------------------+\n| Bit  3  | mask 0x0008 | Must be zero in version 2.|\n+---------+-------------+---------------------------+\n\nTest status gets three bits:\nBit 2 | Bit 1 | Bit 0 - mask 0x0007 - A test status enum lookup:\n\n* 000 - undefined / no test\n* 001 - Enumeration / existence\n* 002 - In progress\n* 003 - Success\n* 004 - Unexpected Success\n* 005 - Skipped\n* 006 - Failed\n* 007 - Expected failure\n\nAfter the flags field is a number field giving the length in bytes for the\nentire packet including the signature and the checksum. This length must\nbe less than 4MiB - 4194303 bytes. The encoding can obviously record a larger\nnumber but one of the goals is to avoid requiring large buffers, or causing\nlarge latency in the packet forward/processing pipeline. Larger file\nattachments can be communicated in multiple packets, and the overhead in such a\n4MiB packet is approximately 0.2%.\n\nThe rest of the packet is a series of optional features as specified by the set\nfeature bits in the flags field. When absent they are entirely absent.\n\nForwarding and multiplexing of packets can be done without interpreting the\nremainder of the packet until the routing code and checksum (which are both at\nthe end of the packet). Additionally, routers can often avoid copying or moving\nthe bulk of the packet, as long as the routing code size increase doesn't force\nthe length encoding to take up a new byte (which will only happen to packets\nless than or equal to 16KiB in length) - large packets are very efficient to\nroute.\n\nTimestamp when present is a 32 bit unsigned integer for seconds, and a variable\nlength number for nanoseconds, representing UTC time since Unix Epoch in\nseconds and nanoseconds.\n\nTest id when present is a UTF-8 string. The test id should uniquely identify\nrunnable tests such that they can be selected individually. For tests and other\nactions which cannot be individually run (such as test\nfixtures/layers/subtests) uniqueness is not required (though being human\nmeaningful is highly recommended).\n\nTags when present is a length prefixed vector of UTF-8 strings, one per tag.\nThere are no restrictions on tag content (other than the restrictions on UTF-8\nstrings in subunit in general). Tags have no ordering.\n\nWhen a MIME type is present, it defines the MIME type for the file across all\npackets same file (routing code + testid + name uniquely identifies a file,\nreset when EOF is flagged). If a file never has a MIME type set, it should be\ntreated as application/octet-stream.\n\nFile content when present is a UTF-8 string for the name followed by the length\nin bytes of the content, and then the content octets.\n\nIf present routing code is a UTF-8 string. The routing code is used to\ndetermine which test backend a test was running on when doing data analysis,\nand to route stdin to the test process if interaction is required.\n\nMultiplexers SHOULD add a routing code if none is present, and prefix any\nexisting routing code with a routing code ('/' separated) if one is already\npresent. For example, a multiplexer might label each stream it is multiplexing\nwith a simple ordinal ('0', '1' etc), and given an incoming packet with route\ncode '3' from stream '0' would adjust the route code when forwarding the packet\nto be '0/3'.\n\nFollowing the end of the packet is a CRC-32 checksum of the contents of the\npacket including the signature.\n\nExample packets\n~~~~~~~~~~~~~~~\n\nTrivial test \"foo\" enumeration packet, with test id, runnable set,\nstatus=enumeration. Spaces below are to visually break up signature / flags /\nlength / testid / crc32\n\nb3 2901 0c 03666f6f 08555f1b\n\n\nVersion 1 (and 1.1)\n===================\n\nVersion 1 (and 1.1) are mostly human readable protocols.\n\nSample subunit wire contents\n----------------------------\n\nThe following::\n\n  test: test foo works\n  success: test foo works\n  test: tar a file.\n  failure: tar a file. [\n  ..\n   ]..  space is eaten.\n  foo.c:34 WARNING foo is not defined.\n  ]\n  a writeln to stdout\n\nWhen run through subunit2pyunit::\n\n  .F\n  a writeln to stdout\n\n  ========================\n  FAILURE: tar a file.\n  -------------------\n  ..\n  ]..  space is eaten.\n  foo.c:34 WARNING foo is not defined.\n\n\nSubunit v1 protocol description\n===============================\n\nThis description is being ported to an EBNF style. Currently its only partly in\nthat style, but should be fairly clear all the same. When in doubt, refer the\nsource (and ideally help fix up the description!). Generally the protocol is\nline orientated and consists of either directives and their parameters, or\nwhen outside a DETAILS region unexpected lines which are not interpreted by\nthe parser - they should be forwarded unaltered::\n\n    test|testing|test:|testing: test LABEL\n    success|success:|successful|successful: test LABEL\n    success|success:|successful|successful: test LABEL DETAILS\n    failure: test LABEL\n    failure: test LABEL DETAILS\n    error: test LABEL\n    error: test LABEL DETAILS\n    skip[:] test LABEL\n    skip[:] test LABEL DETAILS\n    xfail[:] test LABEL\n    xfail[:] test LABEL DETAILS\n    uxsuccess[:] test LABEL\n    uxsuccess[:] test LABEL DETAILS\n    progress: [+|-]X\n    progress: push\n    progress: pop\n    tags: [-]TAG ...\n    time: YYYY-MM-DD HH:MM:SSZ\n\n    LABEL: UTF8*\n    NAME: UTF8*\n    DETAILS ::= BRACKETED | MULTIPART\n    BRACKETED ::= '[' CR UTF8-lines ']' CR\n    MULTIPART ::= '[ multipart' CR PART* ']' CR\n    PART ::= PART_TYPE CR NAME CR PART_BYTES CR\n    PART_TYPE ::= Content-Type: type/sub-type(;parameter=value,parameter=value)\n    PART_BYTES ::= (DIGITS CR LF BYTE{DIGITS})* '0' CR LF\n\nunexpected output on stdout -> stdout.\nexit w/0 or last test completing -> error\n\nTags given outside a test are applied to all following tests\nTags given after a test: line and before the result line for the same test\napply only to that test, and inherit the current global tags.\nA '-' before a tag is used to remove tags - e.g. to prevent a global tag\napplying to a single test, or to cancel a global tag.\n\nThe progress directive is used to provide progress information about a stream\nso that stream consumer can provide completion estimates, progress bars and so\non. Stream generators that know how many tests will be present in the stream\nshould output \"progress: COUNT\". Stream filters that add tests should output\n\"progress: +COUNT\", and those that remove tests should output\n\"progress: -COUNT\". An absolute count should reset the progress indicators in\nuse - it indicates that two separate streams from different generators have\nbeen trivially concatenated together, and there is no knowledge of how many\nmore complete streams are incoming. Smart concatenation could scan each stream\nfor their count and sum them, or alternatively translate absolute counts into\nrelative counts inline. It is recommended that outputters avoid absolute counts\nunless necessary. The push and pop directives are used to provide local regions\nfor progress reporting. This fits with hierarchically operating test\nenvironments - such as those that organise tests into suites - the top-most\nrunner can report on the number of suites, and each suite surround its output\nwith a (push, pop) pair. Interpreters should interpret a pop as also advancing\nthe progress of the restored level by one step. Encountering progress\ndirectives between the start and end of a test pair indicates that a previous\ntest was interrupted and did not cleanly terminate: it should be implicitly\nclosed with an error (the same as when a stream ends with no closing test\ndirective for the most recently started test).\n\nThe time directive acts as a clock event - it sets the time for all future\nevents. The value should be a valid ISO8601 time.\n\nThe skip, xfail and uxsuccess outcomes are not supported by all testing\nenvironments. In Python the testttools (https://launchpad.net/testtools)\nlibrary is used to translate these automatically if an older Python version\nthat does not support them is in use. See the testtools documentation for the\ntranslation policy.\n\nskip is used to indicate a test was discovered but not executed. xfail is used\nto indicate a test that errored in some expected fashion (also know as \"TODO\"\ntests in some frameworks). uxsuccess is used to indicate and unexpected success\nwhere a test though to be failing actually passes. It is complementary to\nxfail.\n\nHacking on subunit\n------------------\n\nReleases\n========\n\n* Update versions in configure.ac and python/subunit/__init__.py.\n* Update NEWS.\n* Do a make distcheck, which will update Makefile etc.\n* Do a PyPI release: PYTHONPATH=../../python python ../../setup.py sdist bdist_wheel upload -s\n* Upload the regular one to LP.\n* Push a tagged commit.\n  git push -t origin master:master\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://launchpad.net/subunit", "keywords": "python test streaming", "license": "Apache-2.0 or BSD", "maintainer": "", "maintainer_email": "", "name": "python-subunit", "package_url": "https://pypi.org/project/python-subunit/", "platform": "", "project_url": "https://pypi.org/project/python-subunit/", "project_urls": {"Homepage": "http://launchpad.net/subunit"}, "release_url": "https://pypi.org/project/python-subunit/1.4.0/", "requires_dist": null, "requires_python": "", "summary": "Python implementation of subunit test streaming protocol", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<p>subunit: A streaming protocol for test results\nCopyright (C) 2005-2013 Robert Collins &lt;<a href=\"mailto:robertc%40robertcollins.net\">robertc<span>@</span>robertcollins<span>.</span>net</a>&gt;</p>\n<p>Licensed under either the Apache License, Version 2.0 or the BSD 3-clause\nlicense at the users choice. A copy of both licenses are available in the\nproject source as Apache-2.0 and BSD. You may not use this file except in\ncompliance with one of these two licences.</p>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under these licenses is distributed on an \u201cAS IS\u201d BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\nlicense you chose for the specific language governing permissions and\nlimitations under that license.</p>\n<p>See the COPYING file for full details on the licensing of Subunit.</p>\n<p>subunit reuses iso8601 by Michael Twomey, distributed under an MIT style\nlicence - see python/iso8601/LICENSE for details.</p>\n</blockquote>\n<div id=\"subunit\">\n<h2>Subunit</h2>\n<p>Subunit is a streaming protocol for test results.</p>\n<p>There are two major revisions of the protocol. Version 1 was trivially human\nreadable but had significant defects as far as highly parallel testing was\nconcerned - it had no room for doing discovery and execution in parallel,\nrequired substantial buffering when multiplexing and was fragile - a corrupt\nbyte could cause an entire stream to be misparsed. Version 1.1 added\nencapsulation of binary streams which mitigated some of the issues but the\ncore remained.</p>\n<p>Version 2 shares many of the good characteristics of Version 1 - it can be\nembedded into a regular text stream (e.g. from a build system) and it still\nmodels xUnit style test execution. It also fixes many of the issues with\nVersion 1 - Version 2 can be multiplexed without excessive buffering (in\ntime or space), it has a well defined recovery mechanism for dealing with\ncorrupted streams (e.g. where two processes write to the same stream\nconcurrently, or where the stream generator suffers a bug).</p>\n<p>More details on both protocol version s can be found in the \u2018Protocol\u2019 section\nof this document.</p>\n<p>Subunit comes with command line filters to process a subunit stream and\nlanguage bindings for python, C, C++ and shell. Bindings are easy to write\nfor other languages.</p>\n<dl>\n<dt>A number of useful things can be done easily with subunit:</dt>\n<dd><ul>\n<li>Test aggregation: Tests run separately can be combined and then\nreported/displayed together. For instance, tests from different languages\ncan be shown as a seamless whole, and tests running on multiple machines\ncan be aggregated into a single stream through a multiplexer.</li>\n<li>Test archiving: A test run may be recorded and replayed later.</li>\n<li>Test isolation: Tests that may crash or otherwise interact badly with each\nother can be run seperately and then aggregated, rather than interfering\nwith each other or requiring an adhoc test-&gt;runner reporting protocol.</li>\n<li>Grid testing: subunit can act as the necessary serialisation and\ndeserialiation to get test runs on distributed machines to be reported in\nreal time.</li>\n</ul>\n</dd>\n<dt>Subunit supplies the following filters:</dt>\n<dd><ul>\n<li>tap2subunit - convert perl\u2019s TestAnythingProtocol to subunit.</li>\n<li>subunit2csv - convert a subunit stream to csv.</li>\n<li>subunit2disk - export a subunit stream to files on disk.</li>\n<li>subunit2pyunit - convert a subunit stream to pyunit test results.</li>\n<li>subunit2gtk - show a subunit stream in GTK.</li>\n<li>subunit2junitxml - convert a subunit stream to JUnit\u2019s XML format.</li>\n<li>subunit-diff - compare two subunit streams.</li>\n<li>subunit-filter - filter out tests from a subunit stream.</li>\n<li>subunit-ls - list info about tests present in a subunit stream.</li>\n<li>subunit-stats - generate a summary of a subunit stream.</li>\n<li>subunit-tags - add or remove tags from a stream.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"integration-with-other-tools\">\n<h2>Integration with other tools</h2>\n<p>Subunit\u2019s language bindings act as integration with various test runners like\n\u2018check\u2019, \u2018cppunit\u2019, Python\u2019s \u2018unittest\u2019. Beyond that a small amount of glue\n(typically a few lines) will allow Subunit to be used in more sophisticated\nways.</p>\n<div id=\"python\">\n<h3>Python</h3>\n<p>Subunit has excellent Python support: most of the filters and tools are written\nin python and there are facilities for using Subunit to increase test isolation\nseamlessly within a test suite.</p>\n<p>The most common way is to run an existing python test suite and have it output\nsubunit via the <tt>subunit.run</tt> module:</p>\n<pre>$ python -m subunit.run mypackage.tests.test_suite\n</pre>\n<p>For more information on the Python support Subunit offers , please see\n<tt>pydoc subunit</tt>, or the source in <tt>python/subunit/</tt></p>\n</div>\n<div id=\"c\">\n<h3>C</h3>\n<p>Subunit has C bindings to emit the protocol. The \u2018check\u2019 C unit testing project\nhas included subunit support in their project for some years now. See\n\u2018c/README\u2019 for more details.</p>\n</div>\n<div id=\"id1\">\n<h3>C++</h3>\n<p>The C library is includable and usable directly from C++. A TestListener for\nCPPUnit is included in the Subunit distribution. See \u2018c++/README\u2019 for details.</p>\n</div>\n<div id=\"shell\">\n<h3>shell</h3>\n<p>There are two sets of shell tools. There are filters, which accept a subunit\nstream on stdin and output processed data (or a transformed stream) on stdout.</p>\n<p>Then there are unittest facilities similar to those for C : shell bindings\nconsisting of simple functions to output protocol elements, and a patch for\nadding subunit output to the \u2018ShUnit\u2019 shell test runner. See \u2018shell/README\u2019 for\ndetails.</p>\n</div>\n</div>\n<div id=\"filter-recipes\">\n<h2>Filter recipes</h2>\n<p>To ignore some failing tests whose root cause is already known:</p>\n<pre>subunit-filter --without 'AttributeError.*flavor'\n</pre>\n</div>\n<div id=\"the-xunit-test-model\">\n<h2>The xUnit test model</h2>\n<p>Subunit implements a slightly modified xUnit test model. The stock standard\nmodel is that there are tests, which have an id(), can be run, and when run\nstart, emit an outcome (like success or failure) and then finish.</p>\n<p>Subunit extends this with the idea of test enumeration (find out about tests\na runner has without running them), tags (allow users to describe tests in\nways the test framework doesn\u2019t apply any semantic value to), file attachments\n(allow arbitrary data to make analysing a failure easy) and timestamps.</p>\n</div>\n<div id=\"the-protocol\">\n<h2>The protocol</h2>\n<p>Version 2, or v2 is new and still under development, but is intended to\nsupercede version 1 in the very near future. Subunit\u2019s bundled tools accept\nonly version 2 and only emit version 2, but the new filters subunit-1to2 and\nsubunit-2to1 can be used to interoperate with older third party libraries.</p>\n<div id=\"version-2\">\n<h3>Version 2</h3>\n<p>Version 2 is a binary protocol consisting of independent packets that can be\nembedded in the output from tools like make - as long as each packet has no\nother bytes mixed in with it (which \u2018make -j N&gt;1\u2019 has a tendency of doing).\nVersion 2 is currently in draft form, and early adopters should be willing\nto either discard stored results (if protocol changes are made), or bulk\nconvert them back to v1 and then to a newer edition of v2.</p>\n<p>The protocol synchronises at the start of the stream, after a packet, or\nafter any 0x0A byte. That is, a subunit v2 packet starts after a newline or\ndirectly after the end of the prior packet.</p>\n<p>Subunit is intended to be transported over a reliable streaming protocol such\nas TCP. As such it does not concern itself with out of order delivery of\npackets. However, because of the possibility of corruption due to either\nbugs in the sender, or due to mixed up data from concurrent writes to the same\nfd when being embedded, subunit strives to recover reasonably gracefully from\ndamaged data.</p>\n<p>A key design goal for Subunit version 2 is to allow processing and multiplexing\nwithout forcing buffering for semantic correctness, as buffering tends to hide\nhung or otherwise misbehaving tests. That said, limited time based buffering\nfor network efficiency is a good idea - this is ultimately implementator\nchoice. Line buffering is also discouraged for subunit streams, as dropping\ninto a debugger or other tool may require interactive traffic even if line\nbuffering would not otherwise be a problem.</p>\n<p>In version two there are two conceptual events - a test status event and a file\nattachment event. Events may have timestamps, and the path of multiplexers that\nan event is routed through is recorded to permit sending actions back to the\nsource (such as new tests to run or stdin for driving debuggers and other\ninteractive input). Test status events are used to enumerate tests, to report\ntests and test helpers as they run. Tests may have tags, used to allow\ntunnelling extra meanings through subunit without requiring parsing of\narbitrary file attachments. Things that are not standalone tests get marked\nas such by setting the \u2018Runnable\u2019 flag to false. (For instance, individual\nassertions in TAP are not runnable tests, only the top level TAP test script\nis runnable).</p>\n<p>File attachments are used to provide rich detail about the nature of a failure.\nFile attachments can also be used to encapsulate stdout and stderr both during\nand outside tests.</p>\n<p>Most numbers are stored in network byte order - Most Significant Byte first\nencoded using a variation of <a href=\"http://www.dlugosz.com/ZIP2/VLI.html\" rel=\"nofollow\">http://www.dlugosz.com/ZIP2/VLI.html</a>. The first\nbyte\u2019s top 2 high order bits encode the total number of octets in the number.\nThis encoding can encode values from 0 to 2**30-1, enough to encode a\nnanosecond. Numbers that are not variable length encoded are still stored in\nMSB order.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>prefix</th>\n<th>octets</th>\n<th>max</th>\n<th>max</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>00</td>\n<td>1</td>\n<td>2**6-1</td>\n<td>63</td>\n</tr>\n<tr><td>01</td>\n<td>2</td>\n<td>2**14-1</td>\n<td>16383</td>\n</tr>\n<tr><td>10</td>\n<td>3</td>\n<td>2**22-1</td>\n<td>4194303</td>\n</tr>\n<tr><td>11</td>\n<td>4</td>\n<td>2**30-1</td>\n<td>1073741823</td>\n</tr>\n</tbody>\n</table>\n<p>All variable length elements of the packet are stored with a length prefix\nnumber allowing them to be skipped over for consumers that don\u2019t need to\ninterpret them.</p>\n<p>UTF-8 strings are with no terminating NUL and should not have any embedded NULs\n(implementations SHOULD validate any such strings that they process and take\nsome remedial action (such as discarding the packet as corrupt).</p>\n<p>In short the structure of a packet is:</p>\n<blockquote>\n<dl>\n<dt>PACKET := SIGNATURE FLAGS PACKET_LENGTH TIMESTAMP? TESTID? TAGS? MIME?</dt>\n<dd>FILECONTENT? ROUTING_CODE? CRC32</dd>\n</dl>\n</blockquote>\n<p>In more detail\u2026</p>\n<p>Packets are identified by a single byte signature - 0xB3, which is never legal\nin a UTF-8 stream as the first byte of a character. 0xB3 starts with the first\nbit set and the second not, which is the UTF-8 signature for a continuation\nbyte. 0xB3 was chosen as 0x73 (\u2018s\u2019 in ASCII\u2019) with the top two bits replaced by\nthe 1 and 0 for a continuation byte.</p>\n<p>If subunit packets are being embedded in a non-UTF-8 text stream, where 0x73 is\na legal character, consider either recoding the text to UTF-8, or using\nsubunit\u2019s \u2018file\u2019 packets to embed the text stream in subunit, rather than the\nother way around.</p>\n<p>Following the signature byte comes a 16-bit flags field, which includes a\n4-bit version field - if the version is not 0x2 then the packet cannot be\nread. It is recommended to signal an error at this point (e.g. by emitting\na synthetic error packet and returning to the top level loop to look for\nnew packets, or exiting with an error). If recovery is desired, treat the\npacket signature as an opaque byte and scan for a new synchronisation point.\nNB: Subunit V1 and V2 packets may legitimately included 0xB3 internally,\nas they are an 8-bit safe container format, so recovery from this situation\nmay involve an arbitrary number of false positives until an actual packet\nis encountered : and even then it may still be false, failing after passing\nthe version check due to coincidence.</p>\n<p>Flags are stored in network byte order too.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>High byte</td>\n<td>Low byte</td>\n</tr>\n<tr><td>15 14 13 12 11 10  9  8</td>\n<td>7  6  5  4  3  2  1  0</td>\n</tr>\n<tr><td>VERSION</td>\n<td>feature bits</td>\n</tr>\n</tbody>\n</table>\n<p>Valid version values are:\n0x2 - version 2</p>\n<p>Feature bits:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Bit 11</td>\n<td>mask 0x0800</td>\n<td>Test id present.</td>\n</tr>\n<tr><td>Bit 10</td>\n<td>mask 0x0400</td>\n<td>Routing code present.</td>\n</tr>\n<tr><td>Bit  9</td>\n<td>mask 0x0200</td>\n<td>Timestamp present.</td>\n</tr>\n<tr><td>Bit  8</td>\n<td>mask 0x0100</td>\n<td>Test is \u2018runnable\u2019.</td>\n</tr>\n<tr><td>Bit  7</td>\n<td>mask 0x0080</td>\n<td>Tags are present.</td>\n</tr>\n<tr><td>Bit  6</td>\n<td>mask 0x0040</td>\n<td>File content is present.</td>\n</tr>\n<tr><td>Bit  5</td>\n<td>mask 0x0020</td>\n<td>File MIME type is present.</td>\n</tr>\n<tr><td>Bit  4</td>\n<td>mask 0x0010</td>\n<td>EOF marker.</td>\n</tr>\n<tr><td>Bit  3</td>\n<td>mask 0x0008</td>\n<td>Must be zero in version 2.</td>\n</tr>\n</tbody>\n</table>\n<p>Test status gets three bits:\nBit 2 | Bit 1 | Bit 0 - mask 0x0007 - A test status enum lookup:</p>\n<ul>\n<li>000 - undefined / no test</li>\n<li>001 - Enumeration / existence</li>\n<li>002 - In progress</li>\n<li>003 - Success</li>\n<li>004 - Unexpected Success</li>\n<li>005 - Skipped</li>\n<li>006 - Failed</li>\n<li>007 - Expected failure</li>\n</ul>\n<p>After the flags field is a number field giving the length in bytes for the\nentire packet including the signature and the checksum. This length must\nbe less than 4MiB - 4194303 bytes. The encoding can obviously record a larger\nnumber but one of the goals is to avoid requiring large buffers, or causing\nlarge latency in the packet forward/processing pipeline. Larger file\nattachments can be communicated in multiple packets, and the overhead in such a\n4MiB packet is approximately 0.2%.</p>\n<p>The rest of the packet is a series of optional features as specified by the set\nfeature bits in the flags field. When absent they are entirely absent.</p>\n<p>Forwarding and multiplexing of packets can be done without interpreting the\nremainder of the packet until the routing code and checksum (which are both at\nthe end of the packet). Additionally, routers can often avoid copying or moving\nthe bulk of the packet, as long as the routing code size increase doesn\u2019t force\nthe length encoding to take up a new byte (which will only happen to packets\nless than or equal to 16KiB in length) - large packets are very efficient to\nroute.</p>\n<p>Timestamp when present is a 32 bit unsigned integer for seconds, and a variable\nlength number for nanoseconds, representing UTC time since Unix Epoch in\nseconds and nanoseconds.</p>\n<p>Test id when present is a UTF-8 string. The test id should uniquely identify\nrunnable tests such that they can be selected individually. For tests and other\nactions which cannot be individually run (such as test\nfixtures/layers/subtests) uniqueness is not required (though being human\nmeaningful is highly recommended).</p>\n<p>Tags when present is a length prefixed vector of UTF-8 strings, one per tag.\nThere are no restrictions on tag content (other than the restrictions on UTF-8\nstrings in subunit in general). Tags have no ordering.</p>\n<p>When a MIME type is present, it defines the MIME type for the file across all\npackets same file (routing code + testid + name uniquely identifies a file,\nreset when EOF is flagged). If a file never has a MIME type set, it should be\ntreated as application/octet-stream.</p>\n<p>File content when present is a UTF-8 string for the name followed by the length\nin bytes of the content, and then the content octets.</p>\n<p>If present routing code is a UTF-8 string. The routing code is used to\ndetermine which test backend a test was running on when doing data analysis,\nand to route stdin to the test process if interaction is required.</p>\n<p>Multiplexers SHOULD add a routing code if none is present, and prefix any\nexisting routing code with a routing code (\u2018/\u2019 separated) if one is already\npresent. For example, a multiplexer might label each stream it is multiplexing\nwith a simple ordinal (\u20180\u2019, \u20181\u2019 etc), and given an incoming packet with route\ncode \u20183\u2019 from stream \u20180\u2019 would adjust the route code when forwarding the packet\nto be \u20180/3\u2019.</p>\n<p>Following the end of the packet is a CRC-32 checksum of the contents of the\npacket including the signature.</p>\n<div id=\"example-packets\">\n<h4>Example packets</h4>\n<p>Trivial test \u201cfoo\u201d enumeration packet, with test id, runnable set,\nstatus=enumeration. Spaces below are to visually break up signature / flags /\nlength / testid / crc32</p>\n<p>b3 2901 0c 03666f6f 08555f1b</p>\n</div>\n</div>\n<div id=\"version-1-and-1-1\">\n<h3>Version 1 (and 1.1)</h3>\n<p>Version 1 (and 1.1) are mostly human readable protocols.</p>\n</div>\n</div>\n<div id=\"sample-subunit-wire-contents\">\n<h2>Sample subunit wire contents</h2>\n<p>The following:</p>\n<pre>test: test foo works\nsuccess: test foo works\ntest: tar a file.\nfailure: tar a file. [\n..\n ]..  space is eaten.\nfoo.c:34 WARNING foo is not defined.\n]\na writeln to stdout\n</pre>\n<p>When run through subunit2pyunit:</p>\n<pre>.F\na writeln to stdout\n\n========================\nFAILURE: tar a file.\n-------------------\n..\n]..  space is eaten.\nfoo.c:34 WARNING foo is not defined.\n</pre>\n<div id=\"subunit-v1-protocol-description\">\n<h3>Subunit v1 protocol description</h3>\n<p>This description is being ported to an EBNF style. Currently its only partly in\nthat style, but should be fairly clear all the same. When in doubt, refer the\nsource (and ideally help fix up the description!). Generally the protocol is\nline orientated and consists of either directives and their parameters, or\nwhen outside a DETAILS region unexpected lines which are not interpreted by\nthe parser - they should be forwarded unaltered:</p>\n<pre>test|testing|test:|testing: test LABEL\nsuccess|success:|successful|successful: test LABEL\nsuccess|success:|successful|successful: test LABEL DETAILS\nfailure: test LABEL\nfailure: test LABEL DETAILS\nerror: test LABEL\nerror: test LABEL DETAILS\nskip[:] test LABEL\nskip[:] test LABEL DETAILS\nxfail[:] test LABEL\nxfail[:] test LABEL DETAILS\nuxsuccess[:] test LABEL\nuxsuccess[:] test LABEL DETAILS\nprogress: [+|-]X\nprogress: push\nprogress: pop\ntags: [-]TAG ...\ntime: YYYY-MM-DD HH:MM:SSZ\n\nLABEL: UTF8*\nNAME: UTF8*\nDETAILS ::= BRACKETED | MULTIPART\nBRACKETED ::= '[' CR UTF8-lines ']' CR\nMULTIPART ::= '[ multipart' CR PART* ']' CR\nPART ::= PART_TYPE CR NAME CR PART_BYTES CR\nPART_TYPE ::= Content-Type: type/sub-type(;parameter=value,parameter=value)\nPART_BYTES ::= (DIGITS CR LF BYTE{DIGITS})* '0' CR LF\n</pre>\n<p>unexpected output on stdout -&gt; stdout.\nexit w/0 or last test completing -&gt; error</p>\n<p>Tags given outside a test are applied to all following tests\nTags given after a test: line and before the result line for the same test\napply only to that test, and inherit the current global tags.\nA \u2018-\u2018 before a tag is used to remove tags - e.g. to prevent a global tag\napplying to a single test, or to cancel a global tag.</p>\n<p>The progress directive is used to provide progress information about a stream\nso that stream consumer can provide completion estimates, progress bars and so\non. Stream generators that know how many tests will be present in the stream\nshould output \u201cprogress: COUNT\u201d. Stream filters that add tests should output\n\u201cprogress: +COUNT\u201d, and those that remove tests should output\n\u201cprogress: -COUNT\u201d. An absolute count should reset the progress indicators in\nuse - it indicates that two separate streams from different generators have\nbeen trivially concatenated together, and there is no knowledge of how many\nmore complete streams are incoming. Smart concatenation could scan each stream\nfor their count and sum them, or alternatively translate absolute counts into\nrelative counts inline. It is recommended that outputters avoid absolute counts\nunless necessary. The push and pop directives are used to provide local regions\nfor progress reporting. This fits with hierarchically operating test\nenvironments - such as those that organise tests into suites - the top-most\nrunner can report on the number of suites, and each suite surround its output\nwith a (push, pop) pair. Interpreters should interpret a pop as also advancing\nthe progress of the restored level by one step. Encountering progress\ndirectives between the start and end of a test pair indicates that a previous\ntest was interrupted and did not cleanly terminate: it should be implicitly\nclosed with an error (the same as when a stream ends with no closing test\ndirective for the most recently started test).</p>\n<p>The time directive acts as a clock event - it sets the time for all future\nevents. The value should be a valid ISO8601 time.</p>\n<p>The skip, xfail and uxsuccess outcomes are not supported by all testing\nenvironments. In Python the testttools (<a href=\"https://launchpad.net/testtools\" rel=\"nofollow\">https://launchpad.net/testtools</a>)\nlibrary is used to translate these automatically if an older Python version\nthat does not support them is in use. See the testtools documentation for the\ntranslation policy.</p>\n<p>skip is used to indicate a test was discovered but not executed. xfail is used\nto indicate a test that errored in some expected fashion (also know as \u201cTODO\u201d\ntests in some frameworks). uxsuccess is used to indicate and unexpected success\nwhere a test though to be failing actually passes. It is complementary to\nxfail.</p>\n</div>\n</div>\n<div id=\"hacking-on-subunit\">\n<h2>Hacking on subunit</h2>\n<h2 id=\"releases\"><span class=\"section-subtitle\">Releases</span></h2>\n<ul>\n<li>Update versions in configure.ac and python/subunit/__init__.py.</li>\n<li>Update NEWS.</li>\n<li>Do a make distcheck, which will update Makefile etc.</li>\n<li>Do a PyPI release: PYTHONPATH=../../python python ../../setup.py sdist bdist_wheel upload -s</li>\n<li>Upload the regular one to LP.</li>\n<li>Push a tagged commit.\ngit push -t origin master:master</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6811673, "releases": {"0.0": [{"comment_text": "", "digests": {"md5": "f934e412ed077d134e6894d48043ff65", "sha256": "f970d154b0644c840862b0bd3739cd9bc8ba3f2dc67581d9090cd977c42e8c8c"}, "downloads": -1, "filename": "python-subunit-0.0.tar.gz", "has_sig": true, "md5_digest": "f934e412ed077d134e6894d48043ff65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81144, "upload_time": "2013-08-23T21:55:44", "upload_time_iso_8601": "2013-08-23T21:55:44.235279Z", "url": "https://files.pythonhosted.org/packages/77/ba/78f66aad9fbb14082cfbb68e58c26f08611498835eaf7aa359959a641c83/python-subunit-0.0.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "f229babb45aeb646dac0a2fb2e82b1b2", "sha256": "40d166e1384d82d826135f924a2cc8f2e9d833acaa29616df432ec845ea87e23"}, "downloads": -1, "filename": "python-subunit-0.0.10.tar.gz", "has_sig": true, "md5_digest": "f229babb45aeb646dac0a2fb2e82b1b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57994, "upload_time": "2013-02-07T11:23:23", "upload_time_iso_8601": "2013-02-07T11:23:23.569261Z", "url": "https://files.pythonhosted.org/packages/7a/48/efb7d211c53380933b3195909c9d34170617a8ef69e385fd8e2b0b4c41e4/python-subunit-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "e9fd86b02143fa272ed86e6a6786d183", "sha256": "f6b6fd29512ec62a3226cc486ac175230406e57c4bf653abcea4b39adc06da4f"}, "downloads": -1, "filename": "python-subunit-0.0.11.tar.gz", "has_sig": true, "md5_digest": "e9fd86b02143fa272ed86e6a6786d183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81267, "upload_time": "2013-04-08T10:41:46", "upload_time_iso_8601": "2013-04-08T10:41:46.185955Z", "url": "https://files.pythonhosted.org/packages/0a/45/c360308b637b2eaabae31e541b67d4711778fe6cf72f1f2997cd81359641/python-subunit-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "04f1518800f6cdb5d87ca04731175755", "sha256": "2186662f871cbfb7957b356212e3c96f96946c41b538dc43f278df8798ed36de"}, "downloads": -1, "filename": "python-subunit-0.0.12.tar.gz", "has_sig": true, "md5_digest": "04f1518800f6cdb5d87ca04731175755", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81428, "upload_time": "2013-05-12T22:50:31", "upload_time_iso_8601": "2013-05-12T22:50:31.218313Z", "url": "https://files.pythonhosted.org/packages/10/b6/9cef2ccbaa906dc6eac4be4cccc9b0e3dc46532c9440aa7e841c22aa48af/python-subunit-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "9083b6ba6f32a754fce2c8c268cb0bd6", "sha256": "f21bb37a47d9f2978eec817f6c6c97ea2677572c68aa8e1b7975c1f049b47d38"}, "downloads": -1, "filename": "python-subunit-0.0.13.tar.gz", "has_sig": true, "md5_digest": "9083b6ba6f32a754fce2c8c268cb0bd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80490, "upload_time": "2013-06-16T20:04:03", "upload_time_iso_8601": "2013-06-16T20:04:03.109344Z", "url": "https://files.pythonhosted.org/packages/7f/3f/5ea170b0cbcd868b566b78b45eb31d3fafed31cf9b7d55918ca7e3b506c4/python-subunit-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "01072537aab0840029d81b7c4a99affa", "sha256": "98c9165d419a6cc5c8bcf894771de1bc74c627aff78a33752fb047354b3acc2d"}, "downloads": -1, "filename": "python-subunit-0.0.14.tar.gz", "has_sig": true, "md5_digest": "01072537aab0840029d81b7c4a99affa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81160, "upload_time": "2013-08-23T21:56:50", "upload_time_iso_8601": "2013-08-23T21:56:50.890262Z", "url": "https://files.pythonhosted.org/packages/4e/b4/409f05463e5c2d31cb798770acc3e4a9492fe4a771f64956bcd654610e43/python-subunit-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "65e43979f1156911a468fa76cc192c0a", "sha256": "3be52e3754e6033292851ea28745706fb5941d2f4f347833af46c0a895dba46d"}, "downloads": -1, "filename": "python-subunit-0.0.15.tar.gz", "has_sig": true, "md5_digest": "65e43979f1156911a468fa76cc192c0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81428, "upload_time": "2013-08-24T14:12:14", "upload_time_iso_8601": "2013-08-24T14:12:14.045590Z", "url": "https://files.pythonhosted.org/packages/42/e2/db4b705b2263de13e9991730fb9752734fc952ba667d6b96501f7bb7c5ab/python-subunit-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "c0ec919f8a1051de4ad89000f95324aa", "sha256": "11aae932485c10ed75af46ec11a1227f05e14f7eb3647372db49ec4a795094fa"}, "downloads": -1, "filename": "python-subunit-0.0.16.tar.gz", "has_sig": true, "md5_digest": "c0ec919f8a1051de4ad89000f95324aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82858, "upload_time": "2013-11-30T09:17:12", "upload_time_iso_8601": "2013-11-30T09:17:12.432288Z", "url": "https://files.pythonhosted.org/packages/90/4e/d0bac0e83cccfd4bb80e353280a01b0293715d049a2a93e5cf31c790a802/python-subunit-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "7221de32dd6698bce1134230437e84f8", "sha256": "26163d942dc2b66a63c8117288f7db32c5c81ba0a84c43de90cb76d2c03613ad"}, "downloads": -1, "filename": "python-subunit-0.0.17.tar.gz", "has_sig": true, "md5_digest": "7221de32dd6698bce1134230437e84f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87611, "upload_time": "2014-01-29T09:21:23", "upload_time_iso_8601": "2014-01-29T09:21:23.044461Z", "url": "https://files.pythonhosted.org/packages/45/6d/7a2c5115ddd7e6014df666b9ba291dc9b51a2113d40449dae51eb116bf84/python-subunit-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "c3f99c1fbc3e93f064d1e16fa78f70cd", "sha256": "65069b5c4b5082162b6181f4ee9821ab626719baad475ee6b25c6367d13d6017"}, "downloads": -1, "filename": "python-subunit-0.0.18.tar.gz", "has_sig": true, "md5_digest": "c3f99c1fbc3e93f064d1e16fa78f70cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87715, "upload_time": "2014-01-29T19:17:07", "upload_time_iso_8601": "2014-01-29T19:17:07.084629Z", "url": "https://files.pythonhosted.org/packages/21/5e/ba042e4b39141092e5755ec1e4c71195ee5c5786d599b567ac18d2c08967/python-subunit-0.0.18.tar.gz", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "d06ad4f9caffcde991e5382fe809fa1d", "sha256": "b28f88dcc42605ebe96e02f682c1f107770c77ba88eab99e6c1395a8141a343f"}, "downloads": -1, "filename": "python-subunit-0.0.19.tar.gz", "has_sig": true, "md5_digest": "d06ad4f9caffcde991e5382fe809fa1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94339, "upload_time": "2014-08-24T06:01:10", "upload_time_iso_8601": "2014-08-24T06:01:10.805615Z", "url": "https://files.pythonhosted.org/packages/54/78/e9979d287cad1fd2c039e213f7a9886786f5392feddd434194bde722edd4/python-subunit-0.0.19.tar.gz", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "b9da1ccdef389225fed195ee4d15b35b", "sha256": "93afa87c9ac9f2f32285e7063bf862f737633037625adabc53b9c0f84c994508"}, "downloads": -1, "filename": "python-subunit-0.0.20.tar.gz", "has_sig": true, "md5_digest": "b9da1ccdef389225fed195ee4d15b35b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94447, "upload_time": "2014-08-27T00:43:04", "upload_time_iso_8601": "2014-08-27T00:43:04.338788Z", "url": "https://files.pythonhosted.org/packages/04/ea/d215bd9a506a52e2f330d53cf41640f054935a90a1c4ca0d554a2abe8543/python-subunit-0.0.20.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "41e27823114008b7a18fc2b6653c1def", "sha256": "5b1a4d996263722a25093742b4e3e4f4bc03b445360eb9a4baf5c7bd1c4f7cda"}, "downloads": -1, "filename": "python-subunit-0.0.21.tar.gz", "has_sig": true, "md5_digest": "41e27823114008b7a18fc2b6653c1def", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94628, "upload_time": "2014-08-27T01:33:56", "upload_time_iso_8601": "2014-08-27T01:33:56.155165Z", "url": "https://files.pythonhosted.org/packages/10/bd/164d06ff324795a8ea8a4ba701ea55983f0e760dc5cd313f85903f9621b2/python-subunit-0.0.21.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "4d3ff1bb34aeec81247aea2bcc959b3c", "sha256": "68c014438539a2eae0e6ace83326c604bf6218ce75a315e6fd05835918ddb545"}, "downloads": -1, "filename": "python-subunit-0.0.6.tar.gz", "has_sig": true, "md5_digest": "4d3ff1bb34aeec81247aea2bcc959b3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31815, "upload_time": "2010-07-02T14:50:59", "upload_time_iso_8601": "2010-07-02T14:50:59.413886Z", "url": "https://files.pythonhosted.org/packages/20/92/e1687bdbefde3f290de7be36d9d4a3179c4e33bccd23cb406e230bdffb27/python-subunit-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "9be18534abbdbaf7b3eb4f4ad001899b", "sha256": "6992f19a11cf38aeb96cc7b6726906228d29ce9edc8e4b2009f96ca4e581af3d"}, "downloads": -1, "filename": "python-subunit-0.0.7.tar.gz", "has_sig": true, "md5_digest": "9be18534abbdbaf7b3eb4f4ad001899b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35012, "upload_time": "2011-06-12T07:45:08", "upload_time_iso_8601": "2011-06-12T07:45:08.612235Z", "url": "https://files.pythonhosted.org/packages/8d/f3/f882203f4daeac96629719a9c99d053fe3ba0bd25eb096b650befe86d1c0/python-subunit-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "6e82fd0a4839660842408900b18e7289", "sha256": "447a4cc8564cc4984d177f957b8d26752ee4de8a8db6a6c948a73383ed826d98"}, "downloads": -1, "filename": "python-subunit-0.0.8.tar.gz", "has_sig": true, "md5_digest": "6e82fd0a4839660842408900b18e7289", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41813, "upload_time": "2012-05-08T01:00:21", "upload_time_iso_8601": "2012-05-08T01:00:21.791083Z", "url": "https://files.pythonhosted.org/packages/4f/1b/fa175adb4321a28cb2232cce6e8bc1ce3a5fa9aa76dd463ee5f78c9acd73/python-subunit-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "cec81db7b4bcfea1a6c639144ac31bae", "sha256": "a6c89b5906250ac56c4199bdb07d1f15b2c9a68087c041de975f94e6289a6b3c"}, "downloads": -1, "filename": "python-subunit-0.0.9.tar.gz", "has_sig": true, "md5_digest": "cec81db7b4bcfea1a6c639144ac31bae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60608, "upload_time": "2012-12-17T08:23:52", "upload_time_iso_8601": "2012-12-17T08:23:52.106408Z", "url": "https://files.pythonhosted.org/packages/17/c6/89d632d9c4afbb1df1c605800c8d99b9f76a272ee12f6b4e6d715a006ece/python-subunit-0.0.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "86b58eb2059980271b092f9f4b2f1f84", "sha256": "eb7e4172a0164da8ca978d8cb46b70977fa9f064f8a5bc296eb3f6c1cb3298a7"}, "downloads": -1, "filename": "python-subunit-1.0.0.tar.gz", "has_sig": true, "md5_digest": "86b58eb2059980271b092f9f4b2f1f84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94886, "upload_time": "2014-11-18T21:40:43", "upload_time_iso_8601": "2014-11-18T21:40:43.881713Z", "url": "https://files.pythonhosted.org/packages/80/12/8c9969c7150e56ed97c937d33779ce9e2b49e729d54eb891ca0f50504a06/python-subunit-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d2c09c93346077ced675c9f718e6a0f1", "sha256": "d9a7606e9610828d68c1d2f0f5abbb421e34e518b8f4882c8b2e08176281bf88"}, "downloads": -1, "filename": "python-subunit-1.1.0.tar.gz", "has_sig": true, "md5_digest": "d2c09c93346077ced675c9f718e6a0f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94993, "upload_time": "2015-03-10T00:59:26", "upload_time_iso_8601": "2015-03-10T00:59:26.517124Z", "url": "https://files.pythonhosted.org/packages/1c/f5/2b7d99057e58e75027645f9eb71ea48d6b28a455dc9aa156c069130da27e/python-subunit-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bb666fe045f8d3989e78c7cd90d6d394", "sha256": "92d4e86e5fe6e9903f9cf4e1a378dc3e5f0b34138fadc110577e831c26ce46b4"}, "downloads": -1, "filename": "python_subunit-1.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "bb666fe045f8d3989e78c7cd90d6d394", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 112945, "upload_time": "2015-10-23T00:51:19", "upload_time_iso_8601": "2015-10-23T00:51:19.244235Z", "url": "https://files.pythonhosted.org/packages/75/00/f5829197ddfb9b8ff68b2995b5bb33519ec889282d45c27a7b98d2f40752/python_subunit-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3305455dfe22e2b8666531909c026a2f", "sha256": "fde9a22587c01766ef30721a38e2f1cd1c09af0f52e538b41a62983ffa1331fa"}, "downloads": -1, "filename": "python-subunit-1.2.0.tar.gz", "has_sig": true, "md5_digest": "3305455dfe22e2b8666531909c026a2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91129, "upload_time": "2015-10-23T00:51:09", "upload_time_iso_8601": "2015-10-23T00:51:09.407465Z", "url": "https://files.pythonhosted.org/packages/5e/21/7f9bcd20ef93e0f7ef2149e9976f2c6027cab87187f8fedf3c63fd59e2e2/python-subunit-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "efac6c2d0d16af3da0654ab77568fdc1", "sha256": "693f1bcb4fe4bd53438ee0b524c8280143e538d663fb92fb66bad05f744a0132"}, "downloads": -1, "filename": "python_subunit-1.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "efac6c2d0d16af3da0654ab77568fdc1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 104888, "upload_time": "2018-04-07T03:56:46", "upload_time_iso_8601": "2018-04-07T03:56:46.273409Z", "url": "https://files.pythonhosted.org/packages/ee/3a/b8a93e1f5b9a9f7e0a7630146f1c62878b6949ac5e4bac6ae2ae13fa9f83/python_subunit-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16d468a3aeafe6c60a0c3b2b9132d65b", "sha256": "9607edbee4c1e5a30ff88549ce8d9feb0b9bcbcb5e55033a9d76e86075465cbb"}, "downloads": -1, "filename": "python-subunit-1.3.0.tar.gz", "has_sig": true, "md5_digest": "16d468a3aeafe6c60a0c3b2b9132d65b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99309, "upload_time": "2018-04-07T03:56:22", "upload_time_iso_8601": "2018-04-07T03:56:22.847255Z", "url": "https://files.pythonhosted.org/packages/8d/5c/2f6c75495eac11ac3a58d924ab7532b77246c0cce8cddcef66783b38631b/python-subunit-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "4f125a929e65a778838ebc0a8187f1d5", "sha256": "40f34660c3da3e513cf2e59498a87ef04ebe2b5fe144fa25d476e1f888b19659"}, "downloads": -1, "filename": "python_subunit-1.4.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4f125a929e65a778838ebc0a8187f1d5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 106094, "upload_time": "2020-03-14T15:01:27", "upload_time_iso_8601": "2020-03-14T15:01:27.087777Z", "url": "https://files.pythonhosted.org/packages/88/de/be89fff5c30810afb101bdac2c8706764fafa8e950dc6ffa22092ad81035/python_subunit-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30f1ab20651d94442dd9a7f8c9e8d633", "sha256": "042039928120fbf392e8c983d60f3d8ae1b88f90a9f8fd7188ddd9c26cad1e48"}, "downloads": -1, "filename": "python-subunit-1.4.0.tar.gz", "has_sig": true, "md5_digest": "30f1ab20651d94442dd9a7f8c9e8d633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100059, "upload_time": "2020-03-14T15:01:23", "upload_time_iso_8601": "2020-03-14T15:01:23.677112Z", "url": "https://files.pythonhosted.org/packages/e4/57/c9d1130411945fee7de701366f238a6568d4e3a5ef8dda94cbdc63937c8d/python-subunit-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f125a929e65a778838ebc0a8187f1d5", "sha256": "40f34660c3da3e513cf2e59498a87ef04ebe2b5fe144fa25d476e1f888b19659"}, "downloads": -1, "filename": "python_subunit-1.4.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4f125a929e65a778838ebc0a8187f1d5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 106094, "upload_time": "2020-03-14T15:01:27", "upload_time_iso_8601": "2020-03-14T15:01:27.087777Z", "url": "https://files.pythonhosted.org/packages/88/de/be89fff5c30810afb101bdac2c8706764fafa8e950dc6ffa22092ad81035/python_subunit-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30f1ab20651d94442dd9a7f8c9e8d633", "sha256": "042039928120fbf392e8c983d60f3d8ae1b88f90a9f8fd7188ddd9c26cad1e48"}, "downloads": -1, "filename": "python-subunit-1.4.0.tar.gz", "has_sig": true, "md5_digest": "30f1ab20651d94442dd9a7f8c9e8d633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100059, "upload_time": "2020-03-14T15:01:23", "upload_time_iso_8601": "2020-03-14T15:01:23.677112Z", "url": "https://files.pythonhosted.org/packages/e4/57/c9d1130411945fee7de701366f238a6568d4e3a5ef8dda94cbdc63937c8d/python-subunit-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:09 2020"}