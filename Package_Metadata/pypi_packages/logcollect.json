{"info": {"author": "tumbler", "author_email": "zimbler@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "logcollect\n==========\n\nPython library for centralized log collecting\n\nProvides simple configuration for collecting python logs to ELK stack\nvia RabbitMQ.\n\nSupported message flow is following:\n\n::\n\n\n    python.logging\n          ||\n          \\/\n      logcollect\n          ||\n          \\/\n       RabbitMQ  \n          ||\n          \\/\n       Logstash\n          ||\n          \\/\n     ElasticSearch\n          ||\n          \\/\n        Kibana\n\nMechanics\n---------\n\nNative logging\n~~~~~~~~~~~~~~\n\n``logcollect.boot.default_config`` ensures that root logger has\ncorrectly configured amqp handler.\n\nDjango\n~~~~~~\n\n``logcollect.boot.django_dict_config`` modifies\n``django.conf.settings.LOGGING`` to ensure correct amqp handler for root\nlogger. It should be called in settings module after LOGGING definition.\n\nCelery\n~~~~~~\n\n``logcollect.boot.celery_config`` adds signal handler for\n``worker_process_init`` signal, and after that adds amqp handler to\n``task_logger`` base handler. If necessary, root logger can be also\nattached to amqp handler.\n\nTips for configuration\n----------------------\n\nLogstash\n~~~~~~~~\n\n.. code:: ruby\n\n\n    input {\n      rabbitmq {\n        exchange => \"logstash\"\n        queue => \"logstash\"\n        host => \"rabbitmq-host\"\n        type => \"amqp\"\n        durable => true\n        codec => \"json\"\n      }\n    }\n    output {\n      elasticsearch { host => localhost }\n      stdout { codec => rubydebug }\n    }\n\nlogcollect\n~~~~~~~~~~\n\nAll boot helpers have same parameters:\n\n-  broker\\_uri - celery-style RabbitMQ connection string, i.e.\n   ``amqp://guest@localhost//vhost``\n-  exchange, routing\\_key - message routing info for RabbitMQ\n-  durable - message delivery mode\n-  level - handler loglevel\n-  activity\\_identity - dict with \"process type info\"\n\nActivity Identity\n~~~~~~~~~~~~~~~~~\n\nAssuming we deployed two projects on same host: \"github\" and \"jenkins\".\nBoth have web backends and background workers. Activity identity helps\nto identify messages from these workers:\n\n+-----------+--------------+-----------------------------------------------------------+\n| Project   | Worker       | Activity identity                                         |\n+===========+==============+===========================================================+\n| github    | backend      | ``{\"project\": \"github\", \"application\": \"backend\"}``       |\n+-----------+--------------+-----------------------------------------------------------+\n| jenkins   | background   | ``{\"project\": \"jenkins\", \"application\": \"background\"}``   |\n+-----------+--------------+-----------------------------------------------------------+\n\n``loggername`` could be used for separating different parts of code\nwithin a worker. Hostnames and process PIDs are added automatically.\n\nCorrelation ID\n~~~~~~~~~~~~~~\n\nNot supported yet, but idea is marking log messages about same object\nwith ID information about this object.\n\nExamples\n--------\n\nNative python logging\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n     python test_native/native_logging.py\n\nDjango\n~~~~~~\n\n.. code:: sh\n\n     python test_django/manage.py test_log\n\nCelery\n~~~~~~\n\nFirst, start worker:\n\n.. code:: sh\n\n    celery worker -A test_celery.app.celery\n\nThen send a task to that worker:\n\n.. code:: sh\n\n    python test_celery/send_task.py\n\nRelated works\n-------------\n\nAMQPHandler and AMQPLogstashFormatter are copied from\n`python-logstash <https://github.com/vklochan/python-logstash>`__.\n\nSee also: \\* `RabbitMQ <https://github.com/rabbitmq/rabbitmq-server>`__\n\\* `Logstash <https://github.com/elastic/logstash>`__ \\*\n`Kibana <https://github.com/elastic/kibana>`__ \\*\n`Django <https://github.com/django/django>`__ \\*\n`Celery <https://github.com/celery/celery>`__", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rutube/logcollect/", "keywords": null, "license": "Beerware", "maintainer": null, "maintainer_email": null, "name": "logcollect", "package_url": "https://pypi.org/project/logcollect/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/logcollect/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/rutube/logcollect/"}, "release_url": "https://pypi.org/project/logcollect/0.14.0/", "requires_dist": null, "requires_python": null, "summary": "Helper for collecting logs to ELK stack via RabbitMQ", "version": "0.14.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python library for centralized log collecting</p>\n<p>Provides simple configuration for collecting python logs to ELK stack\nvia RabbitMQ.</p>\n<p>Supported message flow is following:</p>\n<pre>python.logging\n      ||\n      \\/\n  logcollect\n      ||\n      \\/\n   RabbitMQ\n      ||\n      \\/\n   Logstash\n      ||\n      \\/\n ElasticSearch\n      ||\n      \\/\n    Kibana\n</pre>\n<div id=\"mechanics\">\n<h2>Mechanics</h2>\n<div id=\"native-logging\">\n<h3>Native logging</h3>\n<p><tt>logcollect.boot.default_config</tt> ensures that root logger has\ncorrectly configured amqp handler.</p>\n</div>\n<div id=\"django\">\n<h3>Django</h3>\n<p><tt>logcollect.boot.django_dict_config</tt> modifies\n<tt>django.conf.settings.LOGGING</tt> to ensure correct amqp handler for root\nlogger. It should be called in settings module after LOGGING definition.</p>\n</div>\n<div id=\"celery\">\n<h3>Celery</h3>\n<p><tt>logcollect.boot.celery_config</tt> adds signal handler for\n<tt>worker_process_init</tt> signal, and after that adds amqp handler to\n<tt>task_logger</tt> base handler. If necessary, root logger can be also\nattached to amqp handler.</p>\n</div>\n</div>\n<div id=\"tips-for-configuration\">\n<h2>Tips for configuration</h2>\n<div id=\"logstash\">\n<h3>Logstash</h3>\n<pre><span class=\"n\">input</span> <span class=\"p\">{</span>\n  <span class=\"n\">rabbitmq</span> <span class=\"p\">{</span>\n    <span class=\"n\">exchange</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">\"logstash\"</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">\"logstash\"</span>\n    <span class=\"n\">host</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">\"rabbitmq-host\"</span>\n    <span class=\"n\">type</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">\"amqp\"</span>\n    <span class=\"n\">durable</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span>\n    <span class=\"n\">codec</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">\"json\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">output</span> <span class=\"p\">{</span>\n  <span class=\"n\">elasticsearch</span> <span class=\"p\">{</span> <span class=\"n\">host</span> <span class=\"o\">=&gt;</span> <span class=\"n\">localhost</span> <span class=\"p\">}</span>\n  <span class=\"n\">stdout</span> <span class=\"p\">{</span> <span class=\"n\">codec</span> <span class=\"o\">=&gt;</span> <span class=\"n\">rubydebug</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"id1\">\n<h3>logcollect</h3>\n<p>All boot helpers have same parameters:</p>\n<ul>\n<li>broker_uri - celery-style RabbitMQ connection string, i.e.\n<tt><span class=\"pre\">amqp://guest@localhost//vhost</span></tt></li>\n<li>exchange, routing_key - message routing info for RabbitMQ</li>\n<li>durable - message delivery mode</li>\n<li>level - handler loglevel</li>\n<li>activity_identity - dict with \u201cprocess type info\u201d</li>\n</ul>\n</div>\n<div id=\"activity-identity\">\n<h3>Activity Identity</h3>\n<p>Assuming we deployed two projects on same host: \u201cgithub\u201d and \u201cjenkins\u201d.\nBoth have web backends and background workers. Activity identity helps\nto identify messages from these workers:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Project</th>\n<th>Worker</th>\n<th>Activity identity</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>github</td>\n<td>backend</td>\n<td><tt>{\"project\": \"github\", \"application\": \"backend\"}</tt></td>\n</tr>\n<tr><td>jenkins</td>\n<td>background</td>\n<td><tt>{\"project\": \"jenkins\", \"application\": \"background\"}</tt></td>\n</tr>\n</tbody>\n</table>\n<p><tt>loggername</tt> could be used for separating different parts of code\nwithin a worker. Hostnames and process PIDs are added automatically.</p>\n</div>\n<div id=\"correlation-id\">\n<h3>Correlation ID</h3>\n<p>Not supported yet, but idea is marking log messages about same object\nwith ID information about this object.</p>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"native-python-logging\">\n<h3>Native python logging</h3>\n<pre>python test_native/native_logging.py\n</pre>\n</div>\n<div id=\"id2\">\n<h3>Django</h3>\n<pre>python test_django/manage.py test_log\n</pre>\n</div>\n<div id=\"id3\">\n<h3>Celery</h3>\n<p>First, start worker:</p>\n<pre>celery worker -A test_celery.app.celery\n</pre>\n<p>Then send a task to that worker:</p>\n<pre>python test_celery/send_task.py\n</pre>\n</div>\n</div>\n<div id=\"related-works\">\n<h2>Related works</h2>\n<p>AMQPHandler and AMQPLogstashFormatter are copied from\n<a href=\"https://github.com/vklochan/python-logstash\" rel=\"nofollow\">python-logstash</a>.</p>\n<p>See also: * <a href=\"https://github.com/rabbitmq/rabbitmq-server\" rel=\"nofollow\">RabbitMQ</a>\n* <a href=\"https://github.com/elastic/logstash\" rel=\"nofollow\">Logstash</a> *\n<a href=\"https://github.com/elastic/kibana\" rel=\"nofollow\">Kibana</a> *\n<a href=\"https://github.com/django/django\" rel=\"nofollow\">Django</a> *\n<a href=\"https://github.com/celery/celery\" rel=\"nofollow\">Celery</a></p>\n</div>\n\n          </div>"}, "last_serial": 2152769, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "fbcb58eb3648f54f7d0d12740d031420", "sha256": "f507b710a46c35172390d7a3914eb9dd145812f42b2dc5d09b7b1ea6162b68b4"}, "downloads": -1, "filename": "logcollect-0.10.0.tar.gz", "has_sig": false, "md5_digest": "fbcb58eb3648f54f7d0d12740d031420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5778, "upload_time": "2015-08-19T12:01:09", "upload_time_iso_8601": "2015-08-19T12:01:09.739986Z", "url": "https://files.pythonhosted.org/packages/f7/20/814dc578fd46cf03ab89d07201c0d861b4fc4c52e4d73e9afb12921c23bb/logcollect-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "0d4c74408d943bca9ee6b04b8a0f0b18", "sha256": "ecf7c7320d267717833cd6d574d71289d3bf860ff8029ae2060f4651eab7c763"}, "downloads": -1, "filename": "logcollect-0.11.0.tar.gz", "has_sig": false, "md5_digest": "0d4c74408d943bca9ee6b04b8a0f0b18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6934, "upload_time": "2015-08-21T11:41:55", "upload_time_iso_8601": "2015-08-21T11:41:55.854814Z", "url": "https://files.pythonhosted.org/packages/0e/dc/293fd22d4e9be6fccb331257f328692f21ba2bd289c1bd5dac3aa3813cc2/logcollect-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "b22457929aae61a165e8691c618cf797", "sha256": "e971fde05ad530933c49b57b6995be2e27755602df343634bb99fab719fe09d6"}, "downloads": -1, "filename": "logcollect-0.12.0.tar.gz", "has_sig": false, "md5_digest": "b22457929aae61a165e8691c618cf797", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7012, "upload_time": "2015-10-05T14:10:41", "upload_time_iso_8601": "2015-10-05T14:10:41.488728Z", "url": "https://files.pythonhosted.org/packages/80/68/7f595b302bddab89dc02828193eb5773ca68c1db95dbcaca500e2bcfec5e/logcollect-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "7dba30982899680914541be2c8faa46f", "sha256": "b70ce0f12460e3c32617831bb4ebb6123fcb0de25ed744e46b74d514288650bd"}, "downloads": -1, "filename": "logcollect-0.13.0.tar.gz", "has_sig": false, "md5_digest": "7dba30982899680914541be2c8faa46f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7115, "upload_time": "2016-03-15T12:55:37", "upload_time_iso_8601": "2016-03-15T12:55:37.933031Z", "url": "https://files.pythonhosted.org/packages/fe/ba/928ab6fadeffe5dd32cf85767811c20b76d2ad6ef48ffcfaa35be4c14859/logcollect-0.13.0.tar.gz", "yanked": false}], "0.13.1": [{"comment_text": "", "digests": {"md5": "c5c04fc2512fab3b5e99cda07d8b502f", "sha256": "aff1b58ceb6b3235869c9da73180efcc0df66758f7ced5b65754b3556be2c336"}, "downloads": -1, "filename": "logcollect-0.13.1.tar.gz", "has_sig": false, "md5_digest": "c5c04fc2512fab3b5e99cda07d8b502f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7099, "upload_time": "2016-04-08T12:04:10", "upload_time_iso_8601": "2016-04-08T12:04:10.458245Z", "url": "https://files.pythonhosted.org/packages/ce/33/13b770036334b853197602121c10727c78ab7f3b1f034817ea5f4b0ad029/logcollect-0.13.1.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "efbd52b98144445155939d666e7a50c4", "sha256": "cf61aa098cc10ffadd65cc49879cd5de6bfd308197e094b4fa9001048dc259f0"}, "downloads": -1, "filename": "logcollect-0.14.0.tar.gz", "has_sig": false, "md5_digest": "efbd52b98144445155939d666e7a50c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7125, "upload_time": "2016-06-06T10:30:16", "upload_time_iso_8601": "2016-06-06T10:30:16.409931Z", "url": "https://files.pythonhosted.org/packages/b6/f8/8d50c5114611fc2d60492f533a7c95ff5ca86e326904d7683632492aed49/logcollect-0.14.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "3bd4c506476d20b6227d4f8cbcd282fa", "sha256": "e5165593106ec1b52edf7cb434fe89a8b3b71286d8abf95d4e839f4a9d7d1db2"}, "downloads": -1, "filename": "logcollect-0.9.0.tar.gz", "has_sig": false, "md5_digest": "3bd4c506476d20b6227d4f8cbcd282fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5710, "upload_time": "2015-07-30T10:58:12", "upload_time_iso_8601": "2015-07-30T10:58:12.939086Z", "url": "https://files.pythonhosted.org/packages/8d/d2/50383b7cbbc21a1736f62ca3ed560c8ea88bab14526147cd001b9af334f1/logcollect-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "bb61eff29bb77febe66b1d070131d8eb", "sha256": "f2a801a6c44a9b877f4a58c984692b7e2453d4fd70ab4684e2eb896924c9740c"}, "downloads": -1, "filename": "logcollect-0.9.1.tar.gz", "has_sig": false, "md5_digest": "bb61eff29bb77febe66b1d070131d8eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5480, "upload_time": "2015-08-04T10:08:53", "upload_time_iso_8601": "2015-08-04T10:08:53.594140Z", "url": "https://files.pythonhosted.org/packages/3e/15/d451c5d55569494f3e1b08314278af10fd19ba1fda868c5bda7732c79a26/logcollect-0.9.1.tar.gz", "yanked": false}], "0.9.4": []}, "urls": [{"comment_text": "", "digests": {"md5": "efbd52b98144445155939d666e7a50c4", "sha256": "cf61aa098cc10ffadd65cc49879cd5de6bfd308197e094b4fa9001048dc259f0"}, "downloads": -1, "filename": "logcollect-0.14.0.tar.gz", "has_sig": false, "md5_digest": "efbd52b98144445155939d666e7a50c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7125, "upload_time": "2016-06-06T10:30:16", "upload_time_iso_8601": "2016-06-06T10:30:16.409931Z", "url": "https://files.pythonhosted.org/packages/b6/f8/8d50c5114611fc2d60492f533a7c95ff5ca86e326904d7683632492aed49/logcollect-0.14.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:24 2020"}