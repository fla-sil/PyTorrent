{"info": {"author": "Uros Jevremovic", "author_email": "jevremovic.uros91@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "SortedSet\n-------------\n\nImplementation of Immutable Sorted Set collection.\n\nYou can get it by downloading it directly or by typing:\n\n    $ pip install SortedSet\n\nAfter it is installed you can import it by typing:\n\n    >>> from SortedSet.sorted_set import SortedSet\n\nAs for the usage it is as simple as:\n\n    >>> SortedSet(['list_of_integer_data'])\n\nFor example\n\n    >>> SortedSet([1, 2, 5, 3, 3, 1])\n\nWould return the following\n\n    SortedSet([1, 2, 3, 5])\n\nSortedSet Operations\n-------------\n\n\nUnion\n-------------\n\nYou can add two SortedSets together either by using '+' operator,\ncalling .union() method on one of the sets and providing the other,\nor by using union operator '|'.\n\nTake for example these two SortedSets\n\n    >>> a = SortedSet([1, 2, 5, 3])\n    >>> b = SortedSet([2, 4, 6])\n\nWe could add them together by running any of these commands\n\n    >>> a + b\n    >>> a.union(b)\n    >>> a | b\n\nIn all three cases the result would be the SortedSet\n\n    SortedSet([1, 2, 3, 4, 5, 6])\n\nDifference\n-------------\n\nYou can subtract two SortedSets either calling .difference() method\non one of the sets and providing the other, or by using difference\noperator '-'. Be aware that ordering of SortedSets matters.\n\nTake for example the same two SortedSets we already used\n\n    >>> a = SortedSet([1, 2, 5, 3])\n    >>> b = SortedSet([2, 4, 6])\n\nWe can subtract them by running one of these two commands\n\n    >>> a - b\n    >>> a.difference(b)\n\nIn both cases the result would be the SortedSet\n\n    SortedSet([1, 3, 5])\n\nIf we were to switch the order of the operands\n\n    >>> b - a\n    >>> b.difference(a)\n\nWe would get entirely different result\n\n    SortedSet([4, 6])\n\nSymmetric Difference\n-------------\n\nYou can find unique members that are only contained in one of the\ntwo SortedSets either by calling .symmetric_difference() method\non one of the sets and providing the other, or by using symmetric\ndifference operator '^'.\n\n    >>> a = SortedSet([1, 2, 5, 3])\n    >>> b = SortedSet([2, 4, 6])\n    >>> a.symmetric_difference(b)\n    SortedSet([1, 3, 4, 5, 6])\n    >>> b ^ a\n    SortedSet([1, 3, 4, 5, 6])\n\nIntersection\n-------------\n\nYou can find unique members that are contained in both of the\ntwo SortedSets either by calling .intersection() method\non one of the sets and providing the other, or by using intersection\noperator '&'.\n\n    >>> a = SortedSet([1, 2, 5, 3])\n    >>> b = SortedSet([2, 4, 6])\n    >>> a.intersection(b)\n    SortedSet([2])\n    >>> b & a\n    SortedSet([2])\n\nSuperset, Subset and Disjoint\n-------------\n\nIt is also possible to check if one SortedSet is a superset\nor subset of another either by using .issuperset() and\n.issubset() methods or by using operators '>=' and '<='.\n\n    >>> a = SortedSet([1, 2])\n    >>> b = SortedSet([1, 2, 3])\n    >>> a.issuperset(b)\n    False\n    >>> a >= b\n    False\n    >>> a.issubset(b)\n    True\n    >>> a <= b\n    True\n\nYou can find out are two SortedSets disjoint, meaning that\nthey have no common members by running .isdisjoint() method\non one of the SortedSets.\n\n    >>> a = SortedSet([1, 3])\n    >>> b = SortedSet([6, 4, 8])\n    >>> a.isdisjoint(b)\n    True\n    >>> a = SortedSet([4, 3])\n    >>> b = SortedSet([6, 4, 8])\n    >>> b.isdisjoint(a)\n    False\n\nOther operations\n-------------\n\nOther supported operations are:\n\nlen()\ncontains()\ncomparison of two SortedSets for equality or inequality\naccess to SortedSet members by their index\n\n    >>> a = SortedSet([1, 3, 7, 5])\n    >>> len(a)\n    4\n    />>> a.contains(1)\n    True\n    >>> a.contains(31)\n    False\n    >>> b = SortedSet([2, 3])\n    >>> a == b\n    False\n    >>> c = SortedSet([3, 1, 5, 7])\n    >>> a == c\n    True\n    >>> a != b\n    True\n    >>> a[0]\n    1\n    >>> b[1]\n    3", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/urosjevremovic/SortedSetCollection", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "SortedSet", "package_url": "https://pypi.org/project/SortedSet/", "platform": "", "project_url": "https://pypi.org/project/SortedSet/", "project_urls": {"Homepage": "https://github.com/urosjevremovic/SortedSetCollection"}, "release_url": "https://pypi.org/project/SortedSet/1.0/", "requires_dist": null, "requires_python": "", "summary": "Implementation of Immutable Sorted Set collection", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>SortedSet</h2>\n<p>Implementation of Immutable Sorted Set collection.</p>\n<p>You can get it by downloading it directly or by typing:</p>\n<pre><code>$ pip install SortedSet\n</code></pre>\n<p>After it is installed you can import it by typing:</p>\n<pre><code>&gt;&gt;&gt; from SortedSet.sorted_set import SortedSet\n</code></pre>\n<p>As for the usage it is as simple as:</p>\n<pre><code>&gt;&gt;&gt; SortedSet(['list_of_integer_data'])\n</code></pre>\n<p>For example</p>\n<pre><code>&gt;&gt;&gt; SortedSet([1, 2, 5, 3, 3, 1])\n</code></pre>\n<p>Would return the following</p>\n<pre><code>SortedSet([1, 2, 3, 5])\n</code></pre>\n<h2>SortedSet Operations</h2>\n<h2>Union</h2>\n<p>You can add two SortedSets together either by using '+' operator,\ncalling .union() method on one of the sets and providing the other,\nor by using union operator '|'.</p>\n<p>Take for example these two SortedSets</p>\n<pre><code>&gt;&gt;&gt; a = SortedSet([1, 2, 5, 3])\n&gt;&gt;&gt; b = SortedSet([2, 4, 6])\n</code></pre>\n<p>We could add them together by running any of these commands</p>\n<pre><code>&gt;&gt;&gt; a + b\n&gt;&gt;&gt; a.union(b)\n&gt;&gt;&gt; a | b\n</code></pre>\n<p>In all three cases the result would be the SortedSet</p>\n<pre><code>SortedSet([1, 2, 3, 4, 5, 6])\n</code></pre>\n<h2>Difference</h2>\n<p>You can subtract two SortedSets either calling .difference() method\non one of the sets and providing the other, or by using difference\noperator '-'. Be aware that ordering of SortedSets matters.</p>\n<p>Take for example the same two SortedSets we already used</p>\n<pre><code>&gt;&gt;&gt; a = SortedSet([1, 2, 5, 3])\n&gt;&gt;&gt; b = SortedSet([2, 4, 6])\n</code></pre>\n<p>We can subtract them by running one of these two commands</p>\n<pre><code>&gt;&gt;&gt; a - b\n&gt;&gt;&gt; a.difference(b)\n</code></pre>\n<p>In both cases the result would be the SortedSet</p>\n<pre><code>SortedSet([1, 3, 5])\n</code></pre>\n<p>If we were to switch the order of the operands</p>\n<pre><code>&gt;&gt;&gt; b - a\n&gt;&gt;&gt; b.difference(a)\n</code></pre>\n<p>We would get entirely different result</p>\n<pre><code>SortedSet([4, 6])\n</code></pre>\n<h2>Symmetric Difference</h2>\n<p>You can find unique members that are only contained in one of the\ntwo SortedSets either by calling .symmetric_difference() method\non one of the sets and providing the other, or by using symmetric\ndifference operator '^'.</p>\n<pre><code>&gt;&gt;&gt; a = SortedSet([1, 2, 5, 3])\n&gt;&gt;&gt; b = SortedSet([2, 4, 6])\n&gt;&gt;&gt; a.symmetric_difference(b)\nSortedSet([1, 3, 4, 5, 6])\n&gt;&gt;&gt; b ^ a\nSortedSet([1, 3, 4, 5, 6])\n</code></pre>\n<h2>Intersection</h2>\n<p>You can find unique members that are contained in both of the\ntwo SortedSets either by calling .intersection() method\non one of the sets and providing the other, or by using intersection\noperator '&amp;'.</p>\n<pre><code>&gt;&gt;&gt; a = SortedSet([1, 2, 5, 3])\n&gt;&gt;&gt; b = SortedSet([2, 4, 6])\n&gt;&gt;&gt; a.intersection(b)\nSortedSet([2])\n&gt;&gt;&gt; b &amp; a\nSortedSet([2])\n</code></pre>\n<h2>Superset, Subset and Disjoint</h2>\n<p>It is also possible to check if one SortedSet is a superset\nor subset of another either by using .issuperset() and\n.issubset() methods or by using operators '&gt;=' and '&lt;='.</p>\n<pre><code>&gt;&gt;&gt; a = SortedSet([1, 2])\n&gt;&gt;&gt; b = SortedSet([1, 2, 3])\n&gt;&gt;&gt; a.issuperset(b)\nFalse\n&gt;&gt;&gt; a &gt;= b\nFalse\n&gt;&gt;&gt; a.issubset(b)\nTrue\n&gt;&gt;&gt; a &lt;= b\nTrue\n</code></pre>\n<p>You can find out are two SortedSets disjoint, meaning that\nthey have no common members by running .isdisjoint() method\non one of the SortedSets.</p>\n<pre><code>&gt;&gt;&gt; a = SortedSet([1, 3])\n&gt;&gt;&gt; b = SortedSet([6, 4, 8])\n&gt;&gt;&gt; a.isdisjoint(b)\nTrue\n&gt;&gt;&gt; a = SortedSet([4, 3])\n&gt;&gt;&gt; b = SortedSet([6, 4, 8])\n&gt;&gt;&gt; b.isdisjoint(a)\nFalse\n</code></pre>\n<h2>Other operations</h2>\n<p>Other supported operations are:</p>\n<p>len()\ncontains()\ncomparison of two SortedSets for equality or inequality\naccess to SortedSet members by their index</p>\n<pre><code>&gt;&gt;&gt; a = SortedSet([1, 3, 7, 5])\n&gt;&gt;&gt; len(a)\n4\n/&gt;&gt;&gt; a.contains(1)\nTrue\n&gt;&gt;&gt; a.contains(31)\nFalse\n&gt;&gt;&gt; b = SortedSet([2, 3])\n&gt;&gt;&gt; a == b\nFalse\n&gt;&gt;&gt; c = SortedSet([3, 1, 5, 7])\n&gt;&gt;&gt; a == c\nTrue\n&gt;&gt;&gt; a != b\nTrue\n&gt;&gt;&gt; a[0]\n1\n&gt;&gt;&gt; b[1]\n3\n</code></pre>\n\n          </div>"}, "last_serial": 3762259, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4b0fd824cc1de7df3730f02aaad6bbbc", "sha256": "fca4755c1636ed6d647d972bd81293c232be519ac751263a732ec888e49de3fe"}, "downloads": -1, "filename": "SortedSet-0.1.tar.gz", "has_sig": false, "md5_digest": "4b0fd824cc1de7df3730f02aaad6bbbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3048, "upload_time": "2018-04-13T14:30:50", "upload_time_iso_8601": "2018-04-13T14:30:50.850428Z", "url": "https://files.pythonhosted.org/packages/6c/73/0464b921b5dacef5280c81ddfc5b6a86ce6d61501c8537afdd5af753d636/SortedSet-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3b2b7434dbe296b7ea683946ac6bb236", "sha256": "bf469a99b602d4fb76b22f74c2579fe924252938956ae41b7e638642075ee738"}, "downloads": -1, "filename": "SortedSet-0.2.tar.gz", "has_sig": false, "md5_digest": "3b2b7434dbe296b7ea683946ac6bb236", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3051, "upload_time": "2018-04-13T14:34:17", "upload_time_iso_8601": "2018-04-13T14:34:17.221677Z", "url": "https://files.pythonhosted.org/packages/29/f7/cc5179ea37cc05041b3e18b0af5bfc9a930fd78e0a4b7f9ac3724cf076fd/SortedSet-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b1a03187d2f337ff278599f421af61bb", "sha256": "27064e28c7dd460f2004fb46a405b67b0d818d7bf43b722667cb273f8cd7e267"}, "downloads": -1, "filename": "SortedSet-0.3.tar.gz", "has_sig": false, "md5_digest": "b1a03187d2f337ff278599f421af61bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3063, "upload_time": "2018-04-13T14:47:27", "upload_time_iso_8601": "2018-04-13T14:47:27.315389Z", "url": "https://files.pythonhosted.org/packages/0d/c8/dc1b8e62daa85a5368cab997faf578c8e2e7564e1d9a16abf9aa2cc09f8a/SortedSet-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "7350ff29c6d8c522c5d8b70fde29c307", "sha256": "6e09963cb75d2dcf85a335010af7520fe1eb3d56b24830aeab718af267a7dae0"}, "downloads": -1, "filename": "SortedSet-0.4.tar.gz", "has_sig": false, "md5_digest": "7350ff29c6d8c522c5d8b70fde29c307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3063, "upload_time": "2018-04-13T14:51:15", "upload_time_iso_8601": "2018-04-13T14:51:15.720348Z", "url": "https://files.pythonhosted.org/packages/78/eb/b6c848441837ef7a866d4b88c11452a1e3e36677d75aa00045628714ce4e/SortedSet-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "b3b3aea9ed200ed5d2d61c8de25ae328", "sha256": "a7b22718d9a66115ba1be107c6942d98328f17195deaa671192648d7abc355a5"}, "downloads": -1, "filename": "SortedSet-0.5.tar.gz", "has_sig": false, "md5_digest": "b3b3aea9ed200ed5d2d61c8de25ae328", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3061, "upload_time": "2018-04-13T15:01:16", "upload_time_iso_8601": "2018-04-13T15:01:16.234393Z", "url": "https://files.pythonhosted.org/packages/85/27/043fc45b7653cb6eb022641c1ba0ef0780512090031c10af92b19c5f035f/SortedSet-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "42e3725ef388db7df6f9a64efcd9f573", "sha256": "fe9bfd1dcdf06e7b77d508de2190ac28731b474dfaaf682b251e968aafd692a9"}, "downloads": -1, "filename": "SortedSet-0.6.tar.gz", "has_sig": false, "md5_digest": "42e3725ef388db7df6f9a64efcd9f573", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3151, "upload_time": "2018-04-13T15:24:55", "upload_time_iso_8601": "2018-04-13T15:24:55.644556Z", "url": "https://files.pythonhosted.org/packages/24/14/940eb5839c9c6a71b58c68c2d699ea7aa21383c20f137578a84f92a5c63f/SortedSet-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "cb048553375792d21bee692639454b2c", "sha256": "a5ccaf9f17629a09a1a7165ff55ee872cc6718040104d780d28947f41ed12ed0"}, "downloads": -1, "filename": "SortedSet-0.7.tar.gz", "has_sig": false, "md5_digest": "cb048553375792d21bee692639454b2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3300, "upload_time": "2018-04-13T15:31:50", "upload_time_iso_8601": "2018-04-13T15:31:50.694982Z", "url": "https://files.pythonhosted.org/packages/82/7d/92b912ce5cd064b2e99dd50a0335199ea907e3784e81dfe0e6931c4933fe/SortedSet-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "acbe20a3386b338b77e0985fc291d3b1", "sha256": "df1e835299971a5fca4b5ea3f8eaaed2583b0e99894e15157cac5e110ab6649d"}, "downloads": -1, "filename": "SortedSet-0.8.tar.gz", "has_sig": false, "md5_digest": "acbe20a3386b338b77e0985fc291d3b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3307, "upload_time": "2018-04-13T15:35:25", "upload_time_iso_8601": "2018-04-13T15:35:25.076991Z", "url": "https://files.pythonhosted.org/packages/e2/e6/d759991dbc32419197c5a78a8b317b8f68c13ceb2a8187605ed027c7a008/SortedSet-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "f5379d536d2d58bee5e144fd6a648095", "sha256": "7b3e64fca981cd09b03ac9506b938cb36839468111e288a7054189ebf10568bb"}, "downloads": -1, "filename": "SortedSet-0.9.tar.gz", "has_sig": false, "md5_digest": "f5379d536d2d58bee5e144fd6a648095", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3308, "upload_time": "2018-04-13T15:36:14", "upload_time_iso_8601": "2018-04-13T15:36:14.969699Z", "url": "https://files.pythonhosted.org/packages/3c/ef/ea9295c998e0556b0420d3a2b87acd00be28fd3d5b8186787e54895155d3/SortedSet-0.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "d34545979aee910a49e6095c1899de02", "sha256": "0187d280ea066875670df569101a302f19aa0861a3afc7e038e79a6ed66cb605"}, "downloads": -1, "filename": "SortedSet-1.0.tar.gz", "has_sig": false, "md5_digest": "d34545979aee910a49e6095c1899de02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3306, "upload_time": "2018-04-13T15:40:08", "upload_time_iso_8601": "2018-04-13T15:40:08.367177Z", "url": "https://files.pythonhosted.org/packages/a2/9c/31506d0001d15f067818343d4f5029b1bfce15d678607e3d52afa414abe3/SortedSet-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d34545979aee910a49e6095c1899de02", "sha256": "0187d280ea066875670df569101a302f19aa0861a3afc7e038e79a6ed66cb605"}, "downloads": -1, "filename": "SortedSet-1.0.tar.gz", "has_sig": false, "md5_digest": "d34545979aee910a49e6095c1899de02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3306, "upload_time": "2018-04-13T15:40:08", "upload_time_iso_8601": "2018-04-13T15:40:08.367177Z", "url": "https://files.pythonhosted.org/packages/a2/9c/31506d0001d15f067818343d4f5029b1bfce15d678607e3d52afa414abe3/SortedSet-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:28 2020"}