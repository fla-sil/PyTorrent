{"info": {"author": "Daniel Llin Ferrero", "author_email": "texnh@llin.info", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)"], "description": "What is ZikT?\n=============\nZikT creates charts like pie charts and bar charts for LaTeX documents.\nTherefore, ZikT turns table data into TikZ_ code, that can be embedded or inputted in\nany LaTeX document. TikZ (and the underlying PGF) is a macro package for TeX_. You\ncan find beautiful examples for graphics created with TikZ on texample.net_.\n\nZikT can be used as Python library to create TikZ code for charts from you own Python\nstuff. ZikT can also be used as script that reads in CSV_ data, takes a chart\nspecification and prints out the resulting TikZ code to stdout. A sample usage of this\nscript on Linux is\n\n.. code-block:: bash\n\n\tzikt -l mydata.csv -r \"BarChart(additionalBarStyle='fill=red')\" > mychart.tex\n\n.. _TikZ: http://sourceforge.net/projects/pgf/\n\n.. _TeX: http://www.tug.org/\n\n.. _texample.net: http://www.texample.net/tikz/examples/\n\n.. _CSV: http://en.wikipedia.org/wiki/Comma-separated_values\n\nCurrently, ZikT supports these chart types:\n\n* bar charts\n* grouped bar charts\n* stacked bar charts\n* pie charts\n* plot charts\n\nZikT is in an early and experimental state and lacks a lot of important features like the\ncreation of a chart legend. Working features are for example a flexible way to specify\nlabels and automated axis labeling.\n\nFurther Information\n===================\n\nDo I need to know LaTeX to use ZikT?\n------------------------------------\nWell, some very basic knowledge to embed the TikZ code and to compile the document is needed.\nBut\u2015of cause\u2015you will need to know LaTeX if you want to write documents around your charts. :)\n\nDo I need to know TikZ/PGF to use ZikT?\n---------------------------------------\nNo. But if you do, you will have more options to style your charts and you will be able to\nmanipulate and extend ZikTs output manually.\n\nCan I use ZikT without programming Python?\n------------------------------------------\nI have written a simple command line front end for ZikT. It enables you to read in a CSV file and to\nprint out the charts TikZ code to stdout. This front end script is ``zikt.py`` which can be found \nwithin the ``zikt`` package.  \n\nIs there any further documentation?\n-----------------------------------\nI\u2019m working on a LaTeX based documentation but it is\nin an even earlier state than ZikT itself (surprise!).\nIt is currently not available with the package.\nIf you are intrested in this, let me know and maybe I will hurry up a little with the documentation.\n\nShort example for programmatic usage?\n-------------------------------------\nOkay.\n\n.. code-block:: python\n\n\tfrom zikt.tables import FloatTable\n\tfrom zikt.barchart import BarChart\n\t\n\tdata = [\n\t\t['A','B','C'],\n\t\t[2,12,-3]\n\t\t]\n\t\n\ttable = FloatTable(data)\n\t\n\tchart = BarChart()\n\t\n\tchartCode = chart.render(table)\n\t\n\tprint \"\\\\begin{tikzpicture}\"\n\tprint chartCode\n\tprint \"\\\\end{tikzpicture}\"\n\nPipe the output of this program into a file in a an empty directory. On Linux it may\n\n.. code-block:: bash\n\n\t./upper_script.py > diagram.tex\n\nThe TikZ output of ZikT depends on several color and TikZ definitions that are located\nin `zikt.sty`, delivered with the package in the `latex` sub package. As a convenience\nfunction, the `zikt` script can print it to stdout. So, the easiest option is to use a\n`zikt.sty` copy for each LaTeX document containing ZikT charts. Create that `zikt.sty`\nin your working directory. On Linux it may look like this:\n\n.. code-block:: bash\n\n\tzikt --printsty > zikt.sty\n\t\nLast but not least you need the surrounding document. Create `mydoc.tex` with something\nlike following content: \n\n.. code-block:: tex\n\n\t\\documentclass{scrartcl}\n\t\\usepackage{zikt}\n\t\\begin{document}\n\t \\input{diagram}\n\t\\end{document}\n\nCompile that file with a compatible LaTeX compiler.\nI would use `lualatex -interaction=nonstopmode mydoc.tex`.\nYou should have a very senseless `mydoc.pdf` then where\nyou can see a very basic ZikT bar chart.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/zikt/", "keywords": null, "license": "LGPL 3  (http://www.gnu.org/licenses/lgpl-3.0)", "maintainer": null, "maintainer_email": null, "name": "ZikT", "package_url": "https://pypi.org/project/ZikT/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ZikT/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://pypi.python.org/pypi/zikt/"}, "release_url": "https://pypi.org/project/ZikT/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Python lib for generating TikZ charts from table data", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-zikt\">\n<h2>What is ZikT?</h2>\n<p>ZikT creates charts like pie charts and bar charts for LaTeX documents.\nTherefore, ZikT turns table data into <a href=\"http://sourceforge.net/projects/pgf/\" rel=\"nofollow\">TikZ</a> code, that can be embedded or inputted in\nany LaTeX document. TikZ (and the underlying PGF) is a macro package for <a href=\"http://www.tug.org/\" rel=\"nofollow\">TeX</a>. You\ncan find beautiful examples for graphics created with TikZ on <a href=\"http://www.texample.net/tikz/examples/\" rel=\"nofollow\">texample.net</a>.</p>\n<p>ZikT can be used as Python library to create TikZ code for charts from you own Python\nstuff. ZikT can also be used as script that reads in <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\" rel=\"nofollow\">CSV</a> data, takes a chart\nspecification and prints out the resulting TikZ code to stdout. A sample usage of this\nscript on Linux is</p>\n<pre>zikt -l mydata.csv -r <span class=\"s2\">\"BarChart(additionalBarStyle='fill=red')\"</span> &gt; mychart.tex\n</pre>\n<p>Currently, ZikT supports these chart types:</p>\n<ul>\n<li>bar charts</li>\n<li>grouped bar charts</li>\n<li>stacked bar charts</li>\n<li>pie charts</li>\n<li>plot charts</li>\n</ul>\n<p>ZikT is in an early and experimental state and lacks a lot of important features like the\ncreation of a chart legend. Working features are for example a flexible way to specify\nlabels and automated axis labeling.</p>\n</div>\n<div id=\"further-information\">\n<h2>Further Information</h2>\n<div id=\"do-i-need-to-know-latex-to-use-zikt\">\n<h3>Do I need to know LaTeX to use ZikT?</h3>\n<p>Well, some very basic knowledge to embed the TikZ code and to compile the document is needed.\nBut\u2015of cause\u2015you will need to know LaTeX if you want to write documents around your charts. :)</p>\n</div>\n<div id=\"do-i-need-to-know-tikz-pgf-to-use-zikt\">\n<h3>Do I need to know TikZ/PGF to use ZikT?</h3>\n<p>No. But if you do, you will have more options to style your charts and you will be able to\nmanipulate and extend ZikTs output manually.</p>\n</div>\n<div id=\"can-i-use-zikt-without-programming-python\">\n<h3>Can I use ZikT without programming Python?</h3>\n<p>I have written a simple command line front end for ZikT. It enables you to read in a CSV file and to\nprint out the charts TikZ code to stdout. This front end script is <tt>zikt.py</tt> which can be found\nwithin the <tt>zikt</tt> package.</p>\n</div>\n<div id=\"is-there-any-further-documentation\">\n<h3>Is there any further documentation?</h3>\n<p>I\u2019m working on a LaTeX based documentation but it is\nin an even earlier state than ZikT itself (surprise!).\nIt is currently not available with the package.\nIf you are intrested in this, let me know and maybe I will hurry up a little with the documentation.</p>\n</div>\n<div id=\"short-example-for-programmatic-usage\">\n<h3>Short example for programmatic usage?</h3>\n<p>Okay.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zikt.tables</span> <span class=\"kn\">import</span> <span class=\"n\">FloatTable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zikt.barchart</span> <span class=\"kn\">import</span> <span class=\"n\">BarChart</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span><span class=\"s1\">'B'</span><span class=\"p\">,</span><span class=\"s1\">'C'</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">FloatTable</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">chart</span> <span class=\"o\">=</span> <span class=\"n\">BarChart</span><span class=\"p\">()</span>\n\n<span class=\"n\">chartCode</span> <span class=\"o\">=</span> <span class=\"n\">chart</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">begin</span><span class=\"si\">{tikzpicture}</span><span class=\"s2\">\"</span>\n<span class=\"nb\">print</span> <span class=\"n\">chartCode</span>\n<span class=\"nb\">print</span> <span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">end</span><span class=\"si\">{tikzpicture}</span><span class=\"s2\">\"</span>\n</pre>\n<p>Pipe the output of this program into a file in a an empty directory. On Linux it may</p>\n<pre>./upper_script.py &gt; diagram.tex\n</pre>\n<p>The TikZ output of ZikT depends on several color and TikZ definitions that are located\nin <cite>zikt.sty</cite>, delivered with the package in the <cite>latex</cite> sub package. As a convenience\nfunction, the <cite>zikt</cite> script can print it to stdout. So, the easiest option is to use a\n<cite>zikt.sty</cite> copy for each LaTeX document containing ZikT charts. Create that <cite>zikt.sty</cite>\nin your working directory. On Linux it may look like this:</p>\n<pre>zikt --printsty &gt; zikt.sty\n</pre>\n<p>Last but not least you need the surrounding document. Create <cite>mydoc.tex</cite> with something\nlike following content:</p>\n<pre><span class=\"k\">\\documentclass</span><span class=\"nb\">{</span>scrartcl<span class=\"nb\">}</span>\n<span class=\"k\">\\usepackage</span><span class=\"nb\">{</span>zikt<span class=\"nb\">}</span>\n<span class=\"k\">\\begin</span><span class=\"nb\">{</span>document<span class=\"nb\">}</span>\n <span class=\"k\">\\input</span><span class=\"nb\">{</span>diagram<span class=\"nb\">}</span>\n<span class=\"k\">\\end</span><span class=\"nb\">{</span>document<span class=\"nb\">}</span>\n</pre>\n<p>Compile that file with a compatible LaTeX compiler.\nI would use <cite>lualatex -interaction=nonstopmode mydoc.tex</cite>.\nYou should have a very senseless <cite>mydoc.pdf</cite> then where\nyou can see a very basic ZikT bar chart.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1417496, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e2cc4f0bdb7f9d964e1b7993da251343", "sha256": "a39df19e8184dcb855274ec0d83cebf66e0276f1e2c97817d0f64f3dbe90636e"}, "downloads": -1, "filename": "ZikT-0.1.tar.gz", "has_sig": false, "md5_digest": "e2cc4f0bdb7f9d964e1b7993da251343", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28713, "upload_time": "2014-04-22T15:33:32", "upload_time_iso_8601": "2014-04-22T15:33:32.947747Z", "url": "https://files.pythonhosted.org/packages/72/92/4733e8299df7726bb9dc85c9e4693c5048ac04963faf36506c121116b4b9/ZikT-0.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "67a7b3c6ad59b3b29cdcbf1a9b7c8c90", "sha256": "5158aee08a2000a255ca34a5c5c0837bba1b4a6ce6721d6402f25efb6ef61781"}, "downloads": -1, "filename": "ZikT-0.1.3.tar.gz", "has_sig": false, "md5_digest": "67a7b3c6ad59b3b29cdcbf1a9b7c8c90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29334, "upload_time": "2015-02-10T10:24:11", "upload_time_iso_8601": "2015-02-10T10:24:11.514656Z", "url": "https://files.pythonhosted.org/packages/51/fd/68a96706370ba82de3f94dfeeafada2a73607a536f5170b43ff52b45e275/ZikT-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "67a7b3c6ad59b3b29cdcbf1a9b7c8c90", "sha256": "5158aee08a2000a255ca34a5c5c0837bba1b4a6ce6721d6402f25efb6ef61781"}, "downloads": -1, "filename": "ZikT-0.1.3.tar.gz", "has_sig": false, "md5_digest": "67a7b3c6ad59b3b29cdcbf1a9b7c8c90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29334, "upload_time": "2015-02-10T10:24:11", "upload_time_iso_8601": "2015-02-10T10:24:11.514656Z", "url": "https://files.pythonhosted.org/packages/51/fd/68a96706370ba82de3f94dfeeafada2a73607a536f5170b43ff52b45e275/ZikT-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:18 2020"}