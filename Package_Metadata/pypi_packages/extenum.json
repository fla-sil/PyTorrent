{"info": {"author": "Tetsuya Morimoto", "author_email": "tetsuya dot morimoto at gmail dot com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "extenum\r\n=======\r\n\r\n|Build Status| |Latest Version| |Downloads| |License|\r\n\r\nExtended Enum classes for the Python 3 enum module.\r\n\r\nThe `enum <https://docs.python.org/3/library/enum.html>`__ module was\r\nadded since 3.4. That's good enough for simple use. The extenum is\r\nstrongly inspired by Java Enum style described in `Effective\r\nJava <http://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java>`__ and\r\nprovides additional feature.\r\n\r\nHow to install\r\n--------------\r\n\r\nNOTE: extenum supports Python 3 only.\r\n\r\n::\r\n\r\n    $ pip install extenum\r\n\r\nConstantSpecificEnum\r\n--------------------\r\n\r\n*ConstantSpecificEnum* class is inherited the standard Enum class and\r\nprovides the feature of constant specific method and function\r\noverloading for Enum members.\r\n\r\nRead `Effective\r\nJava <http://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java>`__ for\r\nmore detail.\r\n\r\nConstant specific method implementation\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nLet's try to create Enum class with *ConstantSpecificEnum*. To use a\r\nmethod as function overloading, add *@overload(CONSTANT)* decorator on\r\nthat method. The *overload* decorator is implicitly defined as well as\r\nyou'll see later in *ImplicitEnum* section.\r\n\r\n.. code:: python\r\n\r\n    >>> from extenum import ConstantSpecificEnum\r\n    >>> class Operation(ConstantSpecificEnum):\r\n    ...     PLUS = '+'\r\n    ...     MINUS = '-'\r\n    ...     TIMES = '*'\r\n    ...     DIVIDE = '/'\r\n    ...\r\n    ...     @overload(PLUS)\r\n    ...     def apply(self, x, y):\r\n    ...         return x + y\r\n    ...\r\n    ...     @overload(MINUS)\r\n    ...     def apply(self, x, y):\r\n    ...         return x - y\r\n    ...\r\n    ...     @overload(TIMES)\r\n    ...     def apply(self, x, y):\r\n    ...         return x * y\r\n    ...\r\n    ...     @overload(DIVIDE)\r\n    ...     def apply(self, x, y):\r\n    ...         return x / y\r\n    ...\r\n    >>> for name, const in Operation.__members__.items():\r\n    ...     print(name, ':', const.apply(2, 4))\r\n    ...\r\n    PLUS : 6\r\n    MINUS : -2\r\n    TIMES : 8\r\n    DIVIDE : 0.5\r\n\r\nStrategy enum pattern\r\n~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe strategy enum is more complex pattern based on constant specific\r\nmethod.\r\n\r\n.. code:: python\r\n\r\n    >>> from extenum import ConstantSpecificEnum\r\n    >>> class PayrollDay(ConstantSpecificEnum):\r\n    ...\r\n    ...     class PayType(ConstantSpecificEnum):\r\n    ...         WEEKDAY = 1\r\n    ...         WEEKEND = 2\r\n    ...\r\n    ...         @overload(WEEKDAY)\r\n    ...         def overtime_pay(self, hours, pay_rate):\r\n    ...             return 0 if hours <= 8 else (hours - 8) * pay_rate / 2\r\n    ...\r\n    ...         @overload(WEEKEND)\r\n    ...         def overtime_pay(self, hours, pay_rate):\r\n    ...             return hours * pay_rate / 2\r\n    ...\r\n    ...         def pay(self, hours_worked, pay_rate):\r\n    ...             base_pay = hours_worked * pay_rate\r\n    ...             overtime_pay = self.overtime_pay(hours_worked, pay_rate)\r\n    ...             return base_pay + overtime_pay\r\n    ...\r\n    ...     MONDAY = PayType.WEEKDAY\r\n    ...     TUESDAY = PayType.WEEKDAY\r\n    ...     WEDNESDAY = PayType.WEEKDAY\r\n    ...     THURSDAY = PayType.WEEKDAY\r\n    ...     FRIDAY = PayType.WEEKDAY\r\n    ...     SATURDAY = PayType.WEEKEND\r\n    ...     SUNDAY = PayType.WEEKEND\r\n    ...\r\n    ...     def pay(self, hours_worked, pay_rate):\r\n    ...         return self.value.pay(hours_worked, pay_rate)\r\n    ...\r\n    >>> PayrollDay.MONDAY.pay(10, 1000.0)\r\n    11000.0\r\n    >>> PayrollDay.WEDNESDAY.pay(8, 1000.0)\r\n    8000.0\r\n    >>> PayrollDay.SATURDAY.pay(10, 1000.0)\r\n    15000.0\r\n    >>> PayrollDay.SUNDAY.pay(8, 1000.0)\r\n    12000.0\r\n\r\nImplicitEnum\r\n------------\r\n\r\nBefore describing what *ImplicitEnum* class is, read good article\r\nwritten by Nick Coghlan as below.\r\n\r\n-  `Support for alternate declaration\r\n   syntaxes <http://python-notes.curiousefficiency.org/en/latest/python3/enum_creation.html#support-for-alternate-declaration-syntaxes>`__\r\n\r\nOK. I guess you've already understood why the standard enum module\r\nhaven't supported implicit declaration syntax.\r\n\r\nPut aside its needs for now, Nick indicates how to implement\r\n*ImplicitEnum*. So, let's try to implement it experimentally using the\r\nspecial method, ``__missing__`` in defaultdict and ``__prepare__`` in\r\nMetaclass.\r\n\r\n.. code:: python\r\n\r\n    >>> from extenum import ImplicitEnum\r\n    >>> class Color(ImplicitEnum):\r\n    ...     RED\r\n    ...     GREEN\r\n    ...     BLUE\r\n    ...\r\n    >>> for name, const in Color.__members__.items():\r\n    ...     print(name, ':', const.value)\r\n    ...\r\n    RED : 1\r\n    GREEN : 2\r\n    BLUE : 3\r\n\r\nIt works well if some constants are explicit and the rest are implicit.\r\n\r\n.. code:: python\r\n\r\n    >>> class Numbers(ImplicitEnum):\r\n    ...     ONE = 1\r\n    ...     TWO = 2\r\n    ...     THREE\r\n    ...\r\n    >>> Numbers.THREE.value\r\n    3\r\n\r\nHowever, it depends on the declaration order.\r\n\r\n.. code:: python\r\n\r\n    >>> class DuplicatedValues(ImplicitEnum):\r\n    ...     ONE\r\n    ...     TWO = 1\r\n    ...     THREE = 1\r\n    ...\r\n    >>> DuplicatedValues.ONE.value\r\n    1\r\n    >>> DuplicatedValues.TWO.value\r\n    1\r\n    >>> DuplicatedValues.THREE.value\r\n    1\r\n\r\nEnumSet\r\n-------\r\n\r\nEnumSet is one of the specialized implementation of Set interface for\r\nenumeration type, inspired by `Java\r\nEnumSet <http://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html>`__.\r\n\r\nIt provides utility functions to handle multiple Enum constants.\r\n\r\n.. code:: python\r\n\r\n    >>> from enum import Enum\r\n    >>> from extenum import EnumSet\r\n    >>> class Mode(Enum):\r\n    ...     READ = 4\r\n    ...     WRITE = 2\r\n    ...     EXECUTE = 1\r\n    ...\r\n    ...     @classmethod\r\n    ...     def set_of(cls, values):\r\n    ...         opts = EnumSet.none_of(cls)\r\n    ...         for value in values:\r\n    ...             opts.add(cls(value))\r\n    ...         return opts\r\n    ...\r\n    >>> Mode.set_of([4, 2])  # doctest: +SKIP\r\n    EnumSet({<Mode.READ: 4>, <Mode.WRITE: 2>})\r\n\r\nTo create EnumSet with all Enum members:\r\n\r\n.. code:: python\r\n\r\n    >>> EnumSet.all_of(Mode)  # doctest: +SKIP\r\n    EnumSet({<Mode.READ: 4>, <Mode.WRITE: 2>, <Mode.EXECUTE: 1>})\r\n\r\nOr, to create EnumSet with arbitrary Enum members:\r\n\r\n.. code:: python\r\n\r\n    >>> enumset = EnumSet.of(Mode.READ, Mode.EXECUTE)\r\n    >>> enumset  # doctest: +SKIP\r\n    EnumSet({<Mode.READ: 4>, <Mode.EXECUTE: 1>})\r\n    >>> enumset.update(EnumSet.of(Mode.READ, Mode.WRITE))\r\n    >>> enumset  # doctest: +SKIP\r\n    EnumSet({<Mode.READ: 4>, <Mode.WRITE: 2>, <Mode.EXECUTE: 1>})\r\n\r\n.. |Build Status| image:: https://travis-ci.org/t2y/extenum.svg?branch=master\r\n   :target: https://travis-ci.org/t2y/extenum/\r\n.. |Latest Version| image:: https://pypip.in/version/extenum/badge.svg\r\n   :target: https://pypi.python.org/pypi/extenum/\r\n.. |Downloads| image:: https://pypip.in/download/extenum/badge.svg\r\n   :target: https://pypi.python.org/pypi/extenum/\r\n.. |License| image:: https://pypip.in/license/extenum/badge.svg\r\n   :target: https://pypi.python.org/pypi/extenum/\r\n\r\nChangeLog\r\n---------\r\n\r\n0.8.0 (2015-03-15)\r\n~~~~~~~~~~~~~~~~~~\r\n\r\n-  added EnumSet\r\n\r\n0.7.0 (2015-03-06)\r\n~~~~~~~~~~~~~~~~~~\r\n\r\n-  removed RegisterFactory for simplicity\r\n\r\n0.6.0 (2015-03-05)\r\n~~~~~~~~~~~~~~~~~~\r\n\r\n-  added ImplicitEnum\r\n\r\n0.5.0 (2015-03-01)\r\n~~~~~~~~~~~~~~~~~~\r\n\r\n-  first release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/t2y/extenum", "keywords": "enum", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "extenum", "package_url": "https://pypi.org/project/extenum/", "platform": "unix,linux,osx,windows", "project_url": "https://pypi.org/project/extenum/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/t2y/extenum"}, "release_url": "https://pypi.org/project/extenum/0.8.0/", "requires_dist": null, "requires_python": null, "summary": "Extended Enum classes for the Python 3 enum module", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/t2y/extenum/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/894943f15b944c89dbdbf1168222554a92703b76/68747470733a2f2f7472617669732d63692e6f72672f7432792f657874656e756d2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/extenum/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84be47ec942d2552c8e2ae61bd0cbf174f9f641e/68747470733a2f2f70797069702e696e2f76657273696f6e2f657874656e756d2f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/extenum/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cabeabde70f47628da1d19cfca67feead917ad02/68747470733a2f2f70797069702e696e2f646f776e6c6f61642f657874656e756d2f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/extenum/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f39485b936d8b99bd94901e524bcaf6665cae17/68747470733a2f2f70797069702e696e2f6c6963656e73652f657874656e756d2f62616467652e737667\"></a></p>\n<p>Extended Enum classes for the Python 3 enum module.</p>\n<p>The <a href=\"https://docs.python.org/3/library/enum.html\" rel=\"nofollow\">enum</a> module was\nadded since 3.4. That\u2019s good enough for simple use. The extenum is\nstrongly inspired by Java Enum style described in <a href=\"http://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java\" rel=\"nofollow\">Effective\nJava</a> and\nprovides additional feature.</p>\n<div id=\"how-to-install\">\n<h2>How to install</h2>\n<p>NOTE: extenum supports Python 3 only.</p>\n<pre>$ pip install extenum\n</pre>\n</div>\n<div id=\"constantspecificenum\">\n<h2>ConstantSpecificEnum</h2>\n<p><em>ConstantSpecificEnum</em> class is inherited the standard Enum class and\nprovides the feature of constant specific method and function\noverloading for Enum members.</p>\n<p>Read <a href=\"http://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java\" rel=\"nofollow\">Effective\nJava</a> for\nmore detail.</p>\n<div id=\"constant-specific-method-implementation\">\n<h3>Constant specific method implementation</h3>\n<p>Let\u2019s try to create Enum class with <em>ConstantSpecificEnum</em>. To use a\nmethod as function overloading, add <em>@overload(CONSTANT)</em> decorator on\nthat method. The <em>overload</em> decorator is implicitly defined as well as\nyou\u2019ll see later in <em>ImplicitEnum</em> section.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">extenum</span> <span class=\"kn\">import</span> <span class=\"n\">ConstantSpecificEnum</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Operation</span><span class=\"p\">(</span><span class=\"n\">ConstantSpecificEnum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">PLUS</span> <span class=\"o\">=</span> <span class=\"s1\">'+'</span>\n<span class=\"o\">...</span>     <span class=\"n\">MINUS</span> <span class=\"o\">=</span> <span class=\"s1\">'-'</span>\n<span class=\"o\">...</span>     <span class=\"n\">TIMES</span> <span class=\"o\">=</span> <span class=\"s1\">'*'</span>\n<span class=\"o\">...</span>     <span class=\"n\">DIVIDE</span> <span class=\"o\">=</span> <span class=\"s1\">'/'</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@overload</span><span class=\"p\">(</span><span class=\"n\">PLUS</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@overload</span><span class=\"p\">(</span><span class=\"n\">MINUS</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">y</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@overload</span><span class=\"p\">(</span><span class=\"n\">TIMES</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@overload</span><span class=\"p\">(</span><span class=\"n\">DIVIDE</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">y</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">Operation</span><span class=\"o\">.</span><span class=\"n\">__members__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">':'</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"n\">PLUS</span> <span class=\"p\">:</span> <span class=\"mi\">6</span>\n<span class=\"n\">MINUS</span> <span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"n\">TIMES</span> <span class=\"p\">:</span> <span class=\"mi\">8</span>\n<span class=\"n\">DIVIDE</span> <span class=\"p\">:</span> <span class=\"mf\">0.5</span>\n</pre>\n</div>\n<div id=\"strategy-enum-pattern\">\n<h3>Strategy enum pattern</h3>\n<p>The strategy enum is more complex pattern based on constant specific\nmethod.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">extenum</span> <span class=\"kn\">import</span> <span class=\"n\">ConstantSpecificEnum</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">PayrollDay</span><span class=\"p\">(</span><span class=\"n\">ConstantSpecificEnum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">class</span> <span class=\"nc\">PayType</span><span class=\"p\">(</span><span class=\"n\">ConstantSpecificEnum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"n\">WEEKDAY</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>         <span class=\"n\">WEEKEND</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"nd\">@overload</span><span class=\"p\">(</span><span class=\"n\">WEEKDAY</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">def</span> <span class=\"nf\">overtime_pay</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hours</span><span class=\"p\">,</span> <span class=\"n\">pay_rate</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">hours</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">8</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"n\">hours</span> <span class=\"o\">-</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">pay_rate</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"nd\">@overload</span><span class=\"p\">(</span><span class=\"n\">WEEKEND</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">def</span> <span class=\"nf\">overtime_pay</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hours</span><span class=\"p\">,</span> <span class=\"n\">pay_rate</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"k\">return</span> <span class=\"n\">hours</span> <span class=\"o\">*</span> <span class=\"n\">pay_rate</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"k\">def</span> <span class=\"nf\">pay</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hours_worked</span><span class=\"p\">,</span> <span class=\"n\">pay_rate</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"n\">base_pay</span> <span class=\"o\">=</span> <span class=\"n\">hours_worked</span> <span class=\"o\">*</span> <span class=\"n\">pay_rate</span>\n<span class=\"o\">...</span>             <span class=\"n\">overtime_pay</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">overtime_pay</span><span class=\"p\">(</span><span class=\"n\">hours_worked</span><span class=\"p\">,</span> <span class=\"n\">pay_rate</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>             <span class=\"k\">return</span> <span class=\"n\">base_pay</span> <span class=\"o\">+</span> <span class=\"n\">overtime_pay</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"n\">MONDAY</span> <span class=\"o\">=</span> <span class=\"n\">PayType</span><span class=\"o\">.</span><span class=\"n\">WEEKDAY</span>\n<span class=\"o\">...</span>     <span class=\"n\">TUESDAY</span> <span class=\"o\">=</span> <span class=\"n\">PayType</span><span class=\"o\">.</span><span class=\"n\">WEEKDAY</span>\n<span class=\"o\">...</span>     <span class=\"n\">WEDNESDAY</span> <span class=\"o\">=</span> <span class=\"n\">PayType</span><span class=\"o\">.</span><span class=\"n\">WEEKDAY</span>\n<span class=\"o\">...</span>     <span class=\"n\">THURSDAY</span> <span class=\"o\">=</span> <span class=\"n\">PayType</span><span class=\"o\">.</span><span class=\"n\">WEEKDAY</span>\n<span class=\"o\">...</span>     <span class=\"n\">FRIDAY</span> <span class=\"o\">=</span> <span class=\"n\">PayType</span><span class=\"o\">.</span><span class=\"n\">WEEKDAY</span>\n<span class=\"o\">...</span>     <span class=\"n\">SATURDAY</span> <span class=\"o\">=</span> <span class=\"n\">PayType</span><span class=\"o\">.</span><span class=\"n\">WEEKEND</span>\n<span class=\"o\">...</span>     <span class=\"n\">SUNDAY</span> <span class=\"o\">=</span> <span class=\"n\">PayType</span><span class=\"o\">.</span><span class=\"n\">WEEKEND</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">pay</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hours_worked</span><span class=\"p\">,</span> <span class=\"n\">pay_rate</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">pay</span><span class=\"p\">(</span><span class=\"n\">hours_worked</span><span class=\"p\">,</span> <span class=\"n\">pay_rate</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">PayrollDay</span><span class=\"o\">.</span><span class=\"n\">MONDAY</span><span class=\"o\">.</span><span class=\"n\">pay</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mf\">1000.0</span><span class=\"p\">)</span>\n<span class=\"mf\">11000.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">PayrollDay</span><span class=\"o\">.</span><span class=\"n\">WEDNESDAY</span><span class=\"o\">.</span><span class=\"n\">pay</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mf\">1000.0</span><span class=\"p\">)</span>\n<span class=\"mf\">8000.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">PayrollDay</span><span class=\"o\">.</span><span class=\"n\">SATURDAY</span><span class=\"o\">.</span><span class=\"n\">pay</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mf\">1000.0</span><span class=\"p\">)</span>\n<span class=\"mf\">15000.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">PayrollDay</span><span class=\"o\">.</span><span class=\"n\">SUNDAY</span><span class=\"o\">.</span><span class=\"n\">pay</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mf\">1000.0</span><span class=\"p\">)</span>\n<span class=\"mf\">12000.0</span>\n</pre>\n</div>\n</div>\n<div id=\"implicitenum\">\n<h2>ImplicitEnum</h2>\n<p>Before describing what <em>ImplicitEnum</em> class is, read good article\nwritten by Nick Coghlan as below.</p>\n<ul>\n<li><a href=\"http://python-notes.curiousefficiency.org/en/latest/python3/enum_creation.html#support-for-alternate-declaration-syntaxes\" rel=\"nofollow\">Support for alternate declaration\nsyntaxes</a></li>\n</ul>\n<p>OK. I guess you\u2019ve already understood why the standard enum module\nhaven\u2019t supported implicit declaration syntax.</p>\n<p>Put aside its needs for now, Nick indicates how to implement\n<em>ImplicitEnum</em>. So, let\u2019s try to implement it experimentally using the\nspecial method, <tt>__missing__</tt> in defaultdict and <tt>__prepare__</tt> in\nMetaclass.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">extenum</span> <span class=\"kn\">import</span> <span class=\"n\">ImplicitEnum</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">ImplicitEnum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">RED</span>\n<span class=\"o\">...</span>     <span class=\"n\">GREEN</span>\n<span class=\"o\">...</span>     <span class=\"n\">BLUE</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">Color</span><span class=\"o\">.</span><span class=\"n\">__members__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">':'</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">RED</span> <span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">GREEN</span> <span class=\"p\">:</span> <span class=\"mi\">2</span>\n<span class=\"n\">BLUE</span> <span class=\"p\">:</span> <span class=\"mi\">3</span>\n</pre>\n<p>It works well if some constants are explicit and the rest are implicit.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Numbers</span><span class=\"p\">(</span><span class=\"n\">ImplicitEnum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">ONE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>     <span class=\"n\">TWO</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>     <span class=\"n\">THREE</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Numbers</span><span class=\"o\">.</span><span class=\"n\">THREE</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"mi\">3</span>\n</pre>\n<p>However, it depends on the declaration order.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">DuplicatedValues</span><span class=\"p\">(</span><span class=\"n\">ImplicitEnum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">ONE</span>\n<span class=\"o\">...</span>     <span class=\"n\">TWO</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>     <span class=\"n\">THREE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">DuplicatedValues</span><span class=\"o\">.</span><span class=\"n\">ONE</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">DuplicatedValues</span><span class=\"o\">.</span><span class=\"n\">TWO</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">DuplicatedValues</span><span class=\"o\">.</span><span class=\"n\">THREE</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"mi\">1</span>\n</pre>\n</div>\n<div id=\"enumset\">\n<h2>EnumSet</h2>\n<p>EnumSet is one of the specialized implementation of Set interface for\nenumeration type, inspired by <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html\" rel=\"nofollow\">Java\nEnumSet</a>.</p>\n<p>It provides utility functions to handle multiple Enum constants.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">extenum</span> <span class=\"kn\">import</span> <span class=\"n\">EnumSet</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Mode</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">READ</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"o\">...</span>     <span class=\"n\">WRITE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>     <span class=\"n\">EXECUTE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@classmethod</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">set_of</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"n\">opts</span> <span class=\"o\">=</span> <span class=\"n\">EnumSet</span><span class=\"o\">.</span><span class=\"n\">none_of</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"n\">opts</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">opts</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">set_of</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"n\">EnumSet</span><span class=\"p\">({</span><span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">})</span>\n</pre>\n<p>To create EnumSet with all Enum members:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EnumSet</span><span class=\"o\">.</span><span class=\"n\">all_of</span><span class=\"p\">(</span><span class=\"n\">Mode</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"n\">EnumSet</span><span class=\"p\">({</span><span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">EXECUTE</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">})</span>\n</pre>\n<p>Or, to create EnumSet with arbitrary Enum members:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">enumset</span> <span class=\"o\">=</span> <span class=\"n\">EnumSet</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">EXECUTE</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">enumset</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"n\">EnumSet</span><span class=\"p\">({</span><span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">EXECUTE</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">enumset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">EnumSet</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">enumset</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"n\">EnumSet</span><span class=\"p\">({</span><span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">EXECUTE</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>ChangeLog</h2>\n<div id=\"id1\">\n<h3>0.8.0 (2015-03-15)</h3>\n<ul>\n<li>added EnumSet</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.7.0 (2015-03-06)</h3>\n<ul>\n<li>removed RegisterFactory for simplicity</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.6.0 (2015-03-05)</h3>\n<ul>\n<li>added ImplicitEnum</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.5.0 (2015-03-01)</h3>\n<ul>\n<li>first release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1463177, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "f29869b20dc74777e733002bc6bbd74c", "sha256": "4d4233dbcd33817e53cad7101a6100953b31e831116cf65b890977c506f631b4"}, "downloads": -1, "filename": "extenum-0.5.0.tar.gz", "has_sig": false, "md5_digest": "f29869b20dc74777e733002bc6bbd74c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9348, "upload_time": "2015-02-28T16:50:03", "upload_time_iso_8601": "2015-02-28T16:50:03.894577Z", "url": "https://files.pythonhosted.org/packages/f8/e4/1754287788003f43402c56b8f00c5cc4f93091194b539d660dd88262d08a/extenum-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "f771b1cb1d5d2d1e97016fedfc766718", "sha256": "41372ccb72a77b58988373f17911b6fbe7a023124da1c69bacfc252e0c12c6ed"}, "downloads": -1, "filename": "extenum-0.6.0.tar.gz", "has_sig": false, "md5_digest": "f771b1cb1d5d2d1e97016fedfc766718", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11022, "upload_time": "2015-03-04T22:26:14", "upload_time_iso_8601": "2015-03-04T22:26:14.437703Z", "url": "https://files.pythonhosted.org/packages/ce/f5/557735c0298e0ce06b0b3acb4e3ddbe8eca56d13bf6415bdbcc7ec64898d/extenum-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "92add3c1e947cfb05aa112430c2f0a5e", "sha256": "28c9014bacfa95011a2a231a7f4998cebdd51f353dff3a61dd28739f0faac900"}, "downloads": -1, "filename": "extenum-0.7.0.tar.gz", "has_sig": false, "md5_digest": "92add3c1e947cfb05aa112430c2f0a5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11155, "upload_time": "2015-03-05T17:36:20", "upload_time_iso_8601": "2015-03-05T17:36:20.629755Z", "url": "https://files.pythonhosted.org/packages/3e/64/422425b2e4cfc90a154b620ddefadf39e49b9398339e021172cdfa9c4437/extenum-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "bd2e56d98d0e46f44701efd04bdda6f8", "sha256": "020dbc2273cf9f4d53ef730bf6c990870be58ba68428d17ad3a98008863e46c7"}, "downloads": -1, "filename": "extenum-0.8.0.tar.gz", "has_sig": false, "md5_digest": "bd2e56d98d0e46f44701efd04bdda6f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13052, "upload_time": "2015-03-15T01:16:38", "upload_time_iso_8601": "2015-03-15T01:16:38.091618Z", "url": "https://files.pythonhosted.org/packages/60/25/792b693119e08b09e8b502eb22e774646adfe49d51a7f3381f34d6cdcd37/extenum-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bd2e56d98d0e46f44701efd04bdda6f8", "sha256": "020dbc2273cf9f4d53ef730bf6c990870be58ba68428d17ad3a98008863e46c7"}, "downloads": -1, "filename": "extenum-0.8.0.tar.gz", "has_sig": false, "md5_digest": "bd2e56d98d0e46f44701efd04bdda6f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13052, "upload_time": "2015-03-15T01:16:38", "upload_time_iso_8601": "2015-03-15T01:16:38.091618Z", "url": "https://files.pythonhosted.org/packages/60/25/792b693119e08b09e8b502eb22e774646adfe49d51a7f3381f34d6cdcd37/extenum-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:32 2020"}