{"info": {"author": "Kale Kundert", "author_email": "kale@thekunderts.net", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "``debugtools`` --- Easily print useful debugging information\n============================================================\nThis package provides a handful of functions you can use to print debugging \ninformation.  There are basically two things that are useful about these \nfunctions.  First, they're only one or two letters each, so you can type them \nreally quickly while debugging.  Second, they append the name of the calling \nfunction to whatever you're printing, so you can easily see where each message \ncame from (and you don't have to hunt down print statements once you finish \ndebugging).\n\n.. image:: https://img.shields.io/pypi/v/debugtools.svg\n   :target: https://pypi.python.org/pypi/debugtools\n\n.. image:: https://img.shields.io/pypi/pyversions/debugtools.svg\n   :target: https://pypi.python.org/pypi/debugtools\n\n.. image:: https://img.shields.io/travis/kalekundert/debugtools.svg\n   :target: https://travis-ci.org/kalekundert/debugtools\n\n.. image:: https://img.shields.io/coveralls/kalekundert/debugtools.svg\n   :target: https://coveralls.io/github/kalekundert/debugtools?branch=master\n\nInstallation\n============\nYou can install ``debugtools`` using ``pip``::\n\n   $ pip install debugtools\n\nUsage\n=====\nI typically the following import at the beginning of any file that I'm likely \nto debug:\n\n.. code:: python\n\n   from debugtools import p, pp, pv\n\nThe ``p()`` function behaves just like ``print()``, except it appends the name \nof the calling function to whatever you're printing.  I often use it with no \narguments, just to see if a function is being called or not.\n\nThe ``pp()`` function is to ``pprint.pprint()`` as ``p()`` is to ``print()``.  \nThe ``pv()`` function calls ``pp()`` with the dictionary of variables in the \ncalling scope, so it's a good way to see what variables are defined in the \nfunction you're debugging.\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kalekundert/debugtools", "keywords": "debugtools", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "debugtools", "package_url": "https://pypi.org/project/debugtools/", "platform": "", "project_url": "https://pypi.org/project/debugtools/", "project_urls": {"Homepage": "https://github.com/kalekundert/debugtools"}, "release_url": "https://pypi.org/project/debugtools/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"debugtools-easily-print-useful-debugging-information\">\n<h2><tt>debugtools</tt> \u2014 Easily print useful debugging information</h2>\n<p>This package provides a handful of functions you can use to print debugging\ninformation.  There are basically two things that are useful about these\nfunctions.  First, they\u2019re only one or two letters each, so you can type them\nreally quickly while debugging.  Second, they append the name of the calling\nfunction to whatever you\u2019re printing, so you can easily see where each message\ncame from (and you don\u2019t have to hunt down print statements once you finish\ndebugging).</p>\n<a href=\"https://pypi.python.org/pypi/debugtools\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/debugtools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/14693e737974e18cb5b491e7768871c3c8468409/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6465627567746f6f6c732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/debugtools\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/debugtools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dfc3838ef0e7fba52cc5decb53e94d2bce275271/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6465627567746f6f6c732e737667\"></a>\n<a href=\"https://travis-ci.org/kalekundert/debugtools\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/kalekundert/debugtools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce3b247a7ba2630ced370047e0cff6cfc3eb3eb7/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6b616c656b756e646572742f6465627567746f6f6c732e737667\"></a>\n<a href=\"https://coveralls.io/github/kalekundert/debugtools?branch=master\" rel=\"nofollow\"><img alt=\"https://img.shields.io/coveralls/kalekundert/debugtools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78b5bc9b7876776e264f3ba9283e9f1167a4d1d4/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6b616c656b756e646572742f6465627567746f6f6c732e737667\"></a>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install <tt>debugtools</tt> using <tt>pip</tt>:</p>\n<pre>$ pip install debugtools\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>I typically the following import at the beginning of any file that I\u2019m likely\nto debug:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">debugtools</span> <span class=\"kn\">import</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">pp</span><span class=\"p\">,</span> <span class=\"n\">pv</span>\n</pre>\n<p>The <tt>p()</tt> function behaves just like <tt>print()</tt>, except it appends the name\nof the calling function to whatever you\u2019re printing.  I often use it with no\narguments, just to see if a function is being called or not.</p>\n<p>The <tt>pp()</tt> function is to <tt>pprint.pprint()</tt> as <tt>p()</tt> is to <tt>print()</tt>.\nThe <tt>pv()</tt> function calls <tt>pp()</tt> with the dictionary of variables in the\ncalling scope, so it\u2019s a good way to see what variables are defined in the\nfunction you\u2019re debugging.</p>\n</div>\n\n          </div>"}, "last_serial": 2647805, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a2db141460ce073bf52517c9649b50b3", "sha256": "4080671dfd67788e437bf1be0e9fa3dc8e20cb8935858e8f5b142629945a52a8"}, "downloads": -1, "filename": "debugtools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a2db141460ce073bf52517c9649b50b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7168, "upload_time": "2017-02-13T16:37:57", "upload_time_iso_8601": "2017-02-13T16:37:57.236456Z", "url": "https://files.pythonhosted.org/packages/ac/41/c0ff3f12e39124b0e8e558ad36dcc33dc3d200e37af6dd696eaaf7519209/debugtools-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "461f31be939ba606807edebc45ff5aa7", "sha256": "f8bed30c8e80d0d0da5af8745da07502692c36604e039ba93b25f560eb7cf5d9"}, "downloads": -1, "filename": "debugtools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "461f31be939ba606807edebc45ff5aa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8526, "upload_time": "2017-02-16T19:45:58", "upload_time_iso_8601": "2017-02-16T19:45:58.739694Z", "url": "https://files.pythonhosted.org/packages/ee/0c/0eb19bc45247f9a9ea09f47a8741ef9af67890090f6a13051d161caeef1d/debugtools-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "461f31be939ba606807edebc45ff5aa7", "sha256": "f8bed30c8e80d0d0da5af8745da07502692c36604e039ba93b25f560eb7cf5d9"}, "downloads": -1, "filename": "debugtools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "461f31be939ba606807edebc45ff5aa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8526, "upload_time": "2017-02-16T19:45:58", "upload_time_iso_8601": "2017-02-16T19:45:58.739694Z", "url": "https://files.pythonhosted.org/packages/ee/0c/0eb19bc45247f9a9ea09f47a8741ef9af67890090f6a13051d161caeef1d/debugtools-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:38 2020"}