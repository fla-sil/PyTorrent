{"info": {"author": "Salim Fadhley", "author_email": "salimfadhley@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Testing"], "description": "pybkick\n=======\n\nPush software to a pyboard quickly, without using USB Mass Storage mode.\n\nRationale\n---------\n\nPyboards are small microcomputers which can execute code written in Micropython, which is a Python3\ncompatible language which includes a small subset of the Python3 standard library. \n\nThe suggest way to deploy code to a PyBoard is to mount it as a USB Mass Storage device, and then edit\nfiles directly on the device, or simply copy over the relevant files from a PC. This approach can\nbe problematic because if the device is reset, it can cause the Mass Storage drive to be suddenly\nunmounted. At best this will cause confusion in the operating system.\n\nFurther problems can occur if the device needs to be factory reset - this will wipe the code on the device\nand will require everything to be re-copied, or possibly loosing work.\n\nIn short, using USB Mass Storage mode is a real pain. It would be much simpler to have something that was able\nto use the Serial mode connection to quickly copy code across without any kind of stateful connection. That\nis the goal of this project.  \n\nInstallation\n------------\n\nInstall using pip:\n\n    pip install pybkick\n\nBasic usage\n-----------\n\nIn this example, all my micropython code is in a single, flat directory called 'mpy' which is in the same directory\nas the script containing the following code:\n\n\tfrom pybkick import kick\n\t\n\tkick(\n\t\t# How do we connect to the pyboard?\n\t    port='/dev/ttyACM0',\n\t    \n\t    # Which files should we copy to the pyboard?\n\t    src=os.path.join(dirname(__file__), 'mpy'), \n\t)\n\nAdvanced usage\n--------------\n\nIn your setup.py file, add 'pybkick' to install_requires. You can also add a script which calls the kick function as an entry point. This will\ncreate a command-line utility that can automatically deploy your project to the pyboard.\n\nLimitations\n-----------\n\nThe kick function can only copy flat directories of files into the root directory of the pyboard. It cannot\ncurrently handle heirarchical directories or", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/salimfadhley/pybkick", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pybkick", "package_url": "https://pypi.org/project/pybkick/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pybkick/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/salimfadhley/pybkick"}, "release_url": "https://pypi.org/project/pybkick/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Python tools for pushing code onto a PyBoard.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            pybkick<br>=======<br><br>Push software to a pyboard quickly, without using USB Mass Storage mode.<br><br>Rationale<br>---------<br><br>Pyboards are small microcomputers which can execute code written in Micropython, which is a Python3<br>compatible language which includes a small subset of the Python3 standard library. <br><br>The suggest way to deploy code to a PyBoard is to mount it as a USB Mass Storage device, and then edit<br>files directly on the device, or simply copy over the relevant files from a PC. This approach can<br>be problematic because if the device is reset, it can cause the Mass Storage drive to be suddenly<br>unmounted. At best this will cause confusion in the operating system.<br><br>Further problems can occur if the device needs to be factory reset - this will wipe the code on the device<br>and will require everything to be re-copied, or possibly loosing work.<br><br>In short, using USB Mass Storage mode is a real pain. It would be much simpler to have something that was able<br>to use the Serial mode connection to quickly copy code across without any kind of stateful connection. That<br>is the goal of this project.  <br><br>Installation<br>------------<br><br>Install using pip:<br><br>    pip install pybkick<br><br>Basic usage<br>-----------<br><br>In this example, all my micropython code is in a single, flat directory called 'mpy' which is in the same directory<br>as the script containing the following code:<br><br>\tfrom pybkick import kick<br>\t<br>\tkick(<br>\t\t# How do we connect to the pyboard?<br>\t    port='/dev/ttyACM0',<br>\t    <br>\t    # Which files should we copy to the pyboard?<br>\t    src=os.path.join(dirname(__file__), 'mpy'), <br>\t)<br><br>Advanced usage<br>--------------<br><br>In your setup.py file, add 'pybkick' to install_requires. You can also add a script which calls the kick function as an entry point. This will<br>create a command-line utility that can automatically deploy your project to the pyboard.<br><br>Limitations<br>-----------<br><br>The kick function can only copy flat directories of files into the root directory of the pyboard. It cannot<br>currently handle heirarchical directories or\n          </div>"}, "last_serial": 1275311, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "215c968c1858c1dfd9e995c0fbaf9219", "sha256": "220fd6dfea9cb26cbe1c9d2a8187c1b2fe8b43475d94daffeb648da78963a832"}, "downloads": -1, "filename": "pybkick-0.0.1.tar.gz", "has_sig": false, "md5_digest": "215c968c1858c1dfd9e995c0fbaf9219", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5857, "upload_time": "2014-10-18T00:16:02", "upload_time_iso_8601": "2014-10-18T00:16:02.241977Z", "url": "https://files.pythonhosted.org/packages/24/96/6198527717c472d220a151a2f85eff925585d7c50bba0077a5200756c8e0/pybkick-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ddc827b10eece5267743881e985af4d7", "sha256": "0c151a592556d2067547d92300e632ea3fc4b2237c2a119d7a586e4681de16a4"}, "downloads": -1, "filename": "pybkick-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ddc827b10eece5267743881e985af4d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6903, "upload_time": "2014-10-18T23:11:06", "upload_time_iso_8601": "2014-10-18T23:11:06.749457Z", "url": "https://files.pythonhosted.org/packages/8d/bd/28d08c26bde84895278e2f70808beb519482d314641c32f146908cbb812a/pybkick-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ddc827b10eece5267743881e985af4d7", "sha256": "0c151a592556d2067547d92300e632ea3fc4b2237c2a119d7a586e4681de16a4"}, "downloads": -1, "filename": "pybkick-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ddc827b10eece5267743881e985af4d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6903, "upload_time": "2014-10-18T23:11:06", "upload_time_iso_8601": "2014-10-18T23:11:06.749457Z", "url": "https://files.pythonhosted.org/packages/8d/bd/28d08c26bde84895278e2f70808beb519482d314641c32f146908cbb812a/pybkick-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:11 2020"}