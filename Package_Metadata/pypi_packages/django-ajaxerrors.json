{"info": {"author": "Yaniv Aknin", "author_email": "yaniv+django.ajaxerrors@aknin.name", "bugtrack_url": null, "classifiers": [], "description": "django-ajaxerrors\r\n=================\r\n\r\nSimple Django middleware that makes it easy to view Django's technical error page for failed AJAX requests by automagically opening them in a different browser window.\r\n\r\nThe Problem\r\n-----------\r\nI reckon most if not all Django developers know about Django's useful debug-mode unhandled error page. However, when an AJAX request reaches a faulty view, the error page will not be rendered in your browser but instead be received by your AJAX error handler (assuming you even had one), which is almost always not what you want. This forces you you to find some other way to reach your traceback information. For example, before I wrote this package, I used to regularly open Chrome's developer tools, find the failed resource in the Resources tab, and then either read through the raw HTML (yuck) or copy and paste it to a file and double click it (tedious).\r\n\r\nSuggested Solution\r\n------------------\r\nSince the problem is really about ease of development, and since I (and I suspect many other Django developers) do most of my development work locally, I figured the solution can take advantage of the server being a full fledged desktop with a modern browser and a GUI. Enter ``ajaxerrors.middleware.ShowAJAXErrors``. This little middleware intercepts all unhandled view exceptions, pickles the technical error page and uses Python's webbrowser module to direct a new browser tab at a special URL that will serve (and delete) the previously stored page.\r\n\r\nAll this is only triggered if ``DEBUG`` is true and ``request.is_ajax()`` is true, so pretty much everything you're used to in your development flow should stay the same. Sweet.\r\n\r\nInstallation Instructions\r\n-------------------------\r\n1. Install like any other Python package with ``easy_install`` or ``pip``, or simply with:\r\n    python setup.py install\r\n\r\n2. Add ``ajaxerrors.middleware.ShowAJAXErrors`` to your MIDDLEWARE_CLASSES setting.\r\n\r\nYou can also find more info in the package's `readme <http://github.com/yaniv-aknin/django-ajaxerrors/blob/master/README.md>`_ file.\r\n\r\nContributing\r\n------------\r\ndjango-ajaxerrors is licensed under the MIT license, see the ``LICENSE`` file in this distribution if you're really interested in reading all them small letters.\r\n\r\nI'd really like to see this as a feature in Django some day, but first we should see if other people are interested and maybe add more stuff to this really simple utility. Anyway, feel free fork away and send me pull requests. I'll do my sane best to fix any bugs for as long as... well, at least until I lose interest.\r\n\r\nIf you'd like to discuss something about django-ajaxerrors or if you are otherwise curious about me, please find me at yaniv at aknin dot name, visit django-ajaxerrors' `GitHub page <http://github.com/yaniv-aknin/django-ajaxerrors>`_ or my smashing `Python-centric tech blog <http://tech.blog.aknin.name>`_.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/yaniv-aknin/django-ajaxerrors", "keywords": "django ajax middleware", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-ajaxerrors", "package_url": "https://pypi.org/project/django-ajaxerrors/", "platform": "", "project_url": "https://pypi.org/project/django-ajaxerrors/", "project_urls": {"Homepage": "http://github.com/yaniv-aknin/django-ajaxerrors"}, "release_url": "https://pypi.org/project/django-ajaxerrors/1.1/", "requires_dist": null, "requires_python": null, "summary": "Django middleware for unhandled AJAX errors", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple Django middleware that makes it easy to view Django\u2019s technical error page for failed AJAX requests by automagically opening them in a different browser window.</p>\n<div id=\"the-problem\">\n<h2>The Problem</h2>\n<p>I reckon most if not all Django developers know about Django\u2019s useful debug-mode unhandled error page. However, when an AJAX request reaches a faulty view, the error page will not be rendered in your browser but instead be received by your AJAX error handler (assuming you even had one), which is almost always not what you want. This forces you you to find some other way to reach your traceback information. For example, before I wrote this package, I used to regularly open Chrome\u2019s developer tools, find the failed resource in the Resources tab, and then either read through the raw HTML (yuck) or copy and paste it to a file and double click it (tedious).</p>\n</div>\n<div id=\"suggested-solution\">\n<h2>Suggested Solution</h2>\n<p>Since the problem is really about ease of development, and since I (and I suspect many other Django developers) do most of my development work locally, I figured the solution can take advantage of the server being a full fledged desktop with a modern browser and a GUI. Enter <tt>ajaxerrors.middleware.ShowAJAXErrors</tt>. This little middleware intercepts all unhandled view exceptions, pickles the technical error page and uses Python\u2019s webbrowser module to direct a new browser tab at a special URL that will serve (and delete) the previously stored page.</p>\n<p>All this is only triggered if <tt>DEBUG</tt> is true and <tt>request.is_ajax()</tt> is true, so pretty much everything you\u2019re used to in your development flow should stay the same. Sweet.</p>\n</div>\n<div id=\"installation-instructions\">\n<h2>Installation Instructions</h2>\n<ol>\n<li><dl>\n<dt>Install like any other Python package with <tt>easy_install</tt> or <tt>pip</tt>, or simply with:</dt>\n<dd>python setup.py install</dd>\n</dl>\n</li>\n<li>Add <tt>ajaxerrors.middleware.ShowAJAXErrors</tt> to your MIDDLEWARE_CLASSES setting.</li>\n</ol>\n<p>You can also find more info in the package\u2019s <a href=\"http://github.com/yaniv-aknin/django-ajaxerrors/blob/master/README.md\" rel=\"nofollow\">readme</a> file.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>django-ajaxerrors is licensed under the MIT license, see the <tt>LICENSE</tt> file in this distribution if you\u2019re really interested in reading all them small letters.</p>\n<p>I\u2019d really like to see this as a feature in Django some day, but first we should see if other people are interested and maybe add more stuff to this really simple utility. Anyway, feel free fork away and send me pull requests. I\u2019ll do my sane best to fix any bugs for as long as\u2026 well, at least until I lose interest.</p>\n<p>If you\u2019d like to discuss something about django-ajaxerrors or if you are otherwise curious about me, please find me at yaniv at aknin dot name, visit django-ajaxerrors\u2019 <a href=\"http://github.com/yaniv-aknin/django-ajaxerrors\" rel=\"nofollow\">GitHub page</a> or my smashing <a href=\"http://tech.blog.aknin.name\" rel=\"nofollow\">Python-centric tech blog</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 752571, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "fa1d79238b6738faedd67b82872f262c", "sha256": "b651b73a693529ea30f38f5a6b595163dbf90dffeb964b15a8f3b55af312740b"}, "downloads": -1, "filename": "django-ajaxerrors-1.0.tar.gz", "has_sig": false, "md5_digest": "fa1d79238b6738faedd67b82872f262c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5207, "upload_time": "2011-01-29T20:18:57", "upload_time_iso_8601": "2011-01-29T20:18:57.541589Z", "url": "https://files.pythonhosted.org/packages/75/46/ccfbc422d90379cad383129bc553d7f9b38a083603455fbdf81851c4cd3c/django-ajaxerrors-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "6b6d184345c1accbf56b65e44c8130e0", "sha256": "825d6457dc9213c8bb64f6eea31079053ca9321a70aa0b763397c87121457eea"}, "downloads": -1, "filename": "django-ajaxerrors-1.1.tar.gz", "has_sig": false, "md5_digest": "6b6d184345c1accbf56b65e44c8130e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5548, "upload_time": "2011-01-30T09:49:01", "upload_time_iso_8601": "2011-01-30T09:49:01.800021Z", "url": "https://files.pythonhosted.org/packages/80/82/eff594f12a6a501bd861d53c5f440e44df5da2c63acf8070406a32b90f9e/django-ajaxerrors-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6b6d184345c1accbf56b65e44c8130e0", "sha256": "825d6457dc9213c8bb64f6eea31079053ca9321a70aa0b763397c87121457eea"}, "downloads": -1, "filename": "django-ajaxerrors-1.1.tar.gz", "has_sig": false, "md5_digest": "6b6d184345c1accbf56b65e44c8130e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5548, "upload_time": "2011-01-30T09:49:01", "upload_time_iso_8601": "2011-01-30T09:49:01.800021Z", "url": "https://files.pythonhosted.org/packages/80/82/eff594f12a6a501bd861d53c5f440e44df5da2c63acf8070406a32b90f9e/django-ajaxerrors-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:44 2020"}