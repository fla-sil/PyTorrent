{"info": {"author": "Daniel Welch", "author_email": "dwelch2102@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Other Audience", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Database"], "description": "nflgame is an API to retrieve and read NFL Game Center JSON data. It can\nwork with real-time data, which can be used for fantasy football.\n\nnflgame works by parsing the same JSON data that powers NFL.com's live\nGameCenter. Therefore, nflgame can be used to report game statistics\nwhile a game is being played.\n\nThe package comes pre-loaded with game data from every pre- and regular\nseason game from 2009 up until the present (I try to update it every\nweek). Therefore, querying such data does not actually ping NFL.com.\n\nHowever, if you try to search for data in a game that is being currently\nplayed, the JSON data will be downloaded from NFL.com at each request\n(so be careful not to inspect for data too many times while a game is\nbeing played). If you ask for data for a particular game that hasn't\nbeen cached to disk but is no longer being played, it will be\nautomatically cached to disk so that no further downloads are required.\n\nHere's a quick teaser to find the top 5 running backs by rushing yards\nin the first week of the 2013 season:\n\n::\n\n    #!python\n    import nflgame\n\n    games = nflgame.games(2013, week=1)\n    players = nflgame.combine_game_stats(games)\n    for p in players.rushing().sort('rushing_yds').limit(5):\n        msg = '%s %d carries for %d yards and %d TDs'\n        print msg % (p, p.rushing_att, p.rushing_yds, p.rushing_tds)\n\nAnd the output is:\n\n::\n\n    L.McCoy 31 carries for 184 yards and 1 TDs\n    T.Pryor 13 carries for 112 yards and 0 TDs\n    S.Vereen 14 carries for 101 yards and 0 TDs\n    A.Peterson 18 carries for 93 yards and 2 TDs\n    R.Bush 21 carries for 90 yards and 0 TDs\n\nOr you could find the top 5 passing plays in the same time period:\n\n::\n\n    #!python\n    import nflgame\n\n    games = nflgame.games(2013, week=1)\n    plays = nflgame.combine_plays(games)\n    for p in plays.sort('passing_yds').limit(5):\n        print p\n\nAnd the output is:\n\n::\n\n    (DEN, DEN 22, Q4, 3 and 8) (4:42) (Shotgun) P.Manning pass short left to D.Thomas for 78 yards, TOUCHDOWN. Penalty on BAL-E.Dumervil, Defensive Offside, declined.\n    (DET, DET 23, Q3, 3 and 7) (5:58) (Shotgun) M.Stafford pass short middle to R.Bush for 77 yards, TOUCHDOWN.\n    (NYG, NYG 30, Q2, 1 and 10) (2:01) (No Huddle, Shotgun) E.Manning pass deep left to V.Cruz for 70 yards, TOUCHDOWN. Pass complete on a fly pattern.\n    (NO, NO 24, Q2, 2 and 6) (5:11) (Shotgun) D.Brees pass deep left to K.Stills to ATL 9 for 67 yards (R.McClain; R.Alford). Pass 24, YAC 43\n    (NYG, NYG 20, Q1, 1 and 10) (13:04) E.Manning pass short middle to H.Nicks pushed ob at DAL 23 for 57 yards (M.Claiborne). Pass complete on a slant pattern.\n\nIf you aren't a programmer, then the `tutorial for non\nprogrammers <https://github.com/BurntSushi/nflgame/wiki/Tutorial-for-non-programmers:-Installation-and-examples>`__\nis for you.\n\nIf you need help, please come visit us at IRC/FreeNode on channel\n``#nflgame``. If you've never used IRC before, then you can `use a web\nclient <http://webchat.freenode.net/?channels=%23nflgame>`__. (Enter any\nnickname you like, make sure the channel is ``#nflgame``, fill in the\ncaptcha and hit connect.)\n\nFailing IRC, the second fastest way to get help is to `open a new issue\non the tracker <https://github.com/BurntSushi/nflgame/issues/new>`__.\nThere are several active contributors to nflgame that watch the issue\ntracker. We tend to respond fairly quickly!\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danielwelch/nflgame", "keywords": "", "license": "UNLICENSE", "maintainer": "", "maintainer_email": "", "name": "nflgame3", "package_url": "https://pypi.org/project/nflgame3/", "platform": "ANY", "project_url": "https://pypi.org/project/nflgame3/", "project_urls": {"Homepage": "https://github.com/danielwelch/nflgame"}, "release_url": "https://pypi.org/project/nflgame3/0.1/", "requires_dist": ["beautifulsoup4", "httplib2", "pytz"], "requires_python": "", "summary": "An API to retrieve and read NFL Game Center JSON data. It can work with real-time data, which can be used for fantasy football. python 3 compatability branch", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>nflgame is an API to retrieve and read NFL Game Center JSON data. It can\nwork with real-time data, which can be used for fantasy football.</p>\n<p>nflgame works by parsing the same JSON data that powers NFL.com\u2019s live\nGameCenter. Therefore, nflgame can be used to report game statistics\nwhile a game is being played.</p>\n<p>The package comes pre-loaded with game data from every pre- and regular\nseason game from 2009 up until the present (I try to update it every\nweek). Therefore, querying such data does not actually ping NFL.com.</p>\n<p>However, if you try to search for data in a game that is being currently\nplayed, the JSON data will be downloaded from NFL.com at each request\n(so be careful not to inspect for data too many times while a game is\nbeing played). If you ask for data for a particular game that hasn\u2019t\nbeen cached to disk but is no longer being played, it will be\nautomatically cached to disk so that no further downloads are required.</p>\n<p>Here\u2019s a quick teaser to find the top 5 running backs by rushing yards\nin the first week of the 2013 season:</p>\n<pre>#!python\nimport nflgame\n\ngames = nflgame.games(2013, week=1)\nplayers = nflgame.combine_game_stats(games)\nfor p in players.rushing().sort('rushing_yds').limit(5):\n    msg = '%s %d carries for %d yards and %d TDs'\n    print msg % (p, p.rushing_att, p.rushing_yds, p.rushing_tds)\n</pre>\n<p>And the output is:</p>\n<pre>L.McCoy 31 carries for 184 yards and 1 TDs\nT.Pryor 13 carries for 112 yards and 0 TDs\nS.Vereen 14 carries for 101 yards and 0 TDs\nA.Peterson 18 carries for 93 yards and 2 TDs\nR.Bush 21 carries for 90 yards and 0 TDs\n</pre>\n<p>Or you could find the top 5 passing plays in the same time period:</p>\n<pre>#!python\nimport nflgame\n\ngames = nflgame.games(2013, week=1)\nplays = nflgame.combine_plays(games)\nfor p in plays.sort('passing_yds').limit(5):\n    print p\n</pre>\n<p>And the output is:</p>\n<pre>(DEN, DEN 22, Q4, 3 and 8) (4:42) (Shotgun) P.Manning pass short left to D.Thomas for 78 yards, TOUCHDOWN. Penalty on BAL-E.Dumervil, Defensive Offside, declined.\n(DET, DET 23, Q3, 3 and 7) (5:58) (Shotgun) M.Stafford pass short middle to R.Bush for 77 yards, TOUCHDOWN.\n(NYG, NYG 30, Q2, 1 and 10) (2:01) (No Huddle, Shotgun) E.Manning pass deep left to V.Cruz for 70 yards, TOUCHDOWN. Pass complete on a fly pattern.\n(NO, NO 24, Q2, 2 and 6) (5:11) (Shotgun) D.Brees pass deep left to K.Stills to ATL 9 for 67 yards (R.McClain; R.Alford). Pass 24, YAC 43\n(NYG, NYG 20, Q1, 1 and 10) (13:04) E.Manning pass short middle to H.Nicks pushed ob at DAL 23 for 57 yards (M.Claiborne). Pass complete on a slant pattern.\n</pre>\n<p>If you aren\u2019t a programmer, then the <a href=\"https://github.com/BurntSushi/nflgame/wiki/Tutorial-for-non-programmers:-Installation-and-examples\" rel=\"nofollow\">tutorial for non\nprogrammers</a>\nis for you.</p>\n<p>If you need help, please come visit us at IRC/FreeNode on channel\n<tt>#nflgame</tt>. If you\u2019ve never used IRC before, then you can <a href=\"http://webchat.freenode.net/?channels=%23nflgame\" rel=\"nofollow\">use a web\nclient</a>. (Enter any\nnickname you like, make sure the channel is <tt>#nflgame</tt>, fill in the\ncaptcha and hit connect.)</p>\n<p>Failing IRC, the second fastest way to get help is to <a href=\"https://github.com/BurntSushi/nflgame/issues/new\" rel=\"nofollow\">open a new issue\non the tracker</a>.\nThere are several active contributors to nflgame that watch the issue\ntracker. We tend to respond fairly quickly!</p>\n\n          </div>"}, "last_serial": 6620498, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b13ff2171c04d7cb67ec6acd38ffae81", "sha256": "083c269fdce1e3605e73ad2f2a22d87115ba73505461576ca982f1835c7880c2"}, "downloads": -1, "filename": "nflgame3-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b13ff2171c04d7cb67ec6acd38ffae81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32723194, "upload_time": "2016-08-11T23:29:14", "upload_time_iso_8601": "2016-08-11T23:29:14.724865Z", "url": "https://files.pythonhosted.org/packages/65/e9/806eb98711cfcc949a81f2c1cb03bb497bf12a637467e6b3c5445c98a6df/nflgame3-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b13ff2171c04d7cb67ec6acd38ffae81", "sha256": "083c269fdce1e3605e73ad2f2a22d87115ba73505461576ca982f1835c7880c2"}, "downloads": -1, "filename": "nflgame3-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b13ff2171c04d7cb67ec6acd38ffae81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32723194, "upload_time": "2016-08-11T23:29:14", "upload_time_iso_8601": "2016-08-11T23:29:14.724865Z", "url": "https://files.pythonhosted.org/packages/65/e9/806eb98711cfcc949a81f2c1cb03bb497bf12a637467e6b3c5445c98a6df/nflgame3-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:34 2020"}