{"info": {"author": "deginner", "author_email": "support@deginner.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Topic :: Software Development :: Libraries"], "description": "flask-bitjws |PyPi version| |Build Status| |Coverage| |Gitter|\n==============================================================\n\nFlask extension for `bitjws <https://github.com/g-p-g/bitjws>`__\nauthentication.\n\nInstall\n-------\n\nBy default it's expected that\n`secp256k1 <https://github.com/bitcoin/secp256k1>`__ is available, so\ninstall it before proceeding; make sure to run\n``./configure --enable-module-recovery``. If you're using some other\nlibrary that provides the functionality necessary for this, check the\n**Using a custom library** section of the bitjws README.\n\nFlask-bitjws can be installed by running:\n\n``pip install flask-bitjws``\n\nBuilding secp256k1\n''''''''''''''''''\n\nIn case you need to install the ``secp256k1`` C library, the following\nsequence of commands is recommended. If you already have ``secp256k1``,\nmake sure it was compiled from the expected git commit or it might fail\nto work due to API incompatibilities.\n\n::\n\n    git clone git://github.com/bitcoin/secp256k1.git libsecp256k1\n    cd libsecp256k1\n    git checkout d7eb1ae96dfe9d497a26b3e7ff8b6f58e61e400a\n    ./autogen.sh\n    ./configure --enable-module-recovery\n    make\n    sudo make install\n\nInitialization\n--------------\n\nInitialize a flask\\_bitjws Application\n''''''''''''''''''''''''''''''''''''''\n\nThe flask-bitjws package provides a Flask Application wrapper. To enable\nbitjws authentication, initialize FlaskBitjws with your flask app as the\nfirst argument.\n\n.. code:: Python\n\n    from flask import Flask\n    from flask_bitjws import FlaskBitjws\n\n    app = Flask(__name__)\n    FlaskBitjws(app)\n\nCustomizing LoginManager\n''''''''''''''''''''''''\n\n| Flask-bitjws uses\n`flask-login <https://github.com/maxcountryman/flask-login>`__ to manage\nuser login and authentication. By default,\n| the FlaskBitjws initialization will create a new LoginManager for you.\nIf you need to customize, you can alternately provide your own. Just be\naware that it's request\\_loader needs to be left as is.\n\n.. code:: Python\n\n    from flask import Flask\n    from flask_bitjws import FlaskBitjws\n    from flask.ext.login import LoginManager\n\n    # Your LoginManager\n    lm = LoginManager()\n\n    app = Flask(__name__)\n    FlaskBitjws(app, loginmanager=lm)\n\nInitialize with private key\n'''''''''''''''''''''''''''\n\nTo provide a private key for your server to use in signing, include a\nprivkey argument to Application.\\ **init**\\ ().\n\n.. code:: Python\n\n    from flask import Flask\n    from flask_bitjws import FlaskBitjws\n\n    # Your bitjws private key in WIF\n    privkey = \"KweY4PozGhtkGPMvvD7vk7nLiN6211XZ2QGxLBMginAQW7MBbgp8\"\n\n    app = Flask(__name__)\n    FlaskBitjws(app, privkey=privkey)\n\nUsage\n-----\n\nRequests\n''''''''\n\nFor all routes that require login (i.e. wrapped in @login\\_required),\nthe FlaskBitjws login manager will validate the bitjws headers and data,\nand match it up to a user.\n\nIf authentication is successful, the request will have two new\nattributes \"jws\\_payload\", and \"jws\\_header\".\n\nIf authentication fails, flask-login will return a 401 error.\n\n::\n\n    from flask import Flask\n    from flask_bitjws import FlaskBitjws\n\n    # Your bitjws private key in WIF\n    privkey = \"KweY4PozGhtkGPMvvD7vk7nLiN6211XZ2QGxLBMginAQW7MBbgp8\"\n\n    app = Flask(__name__)\n    FlaskBitjws(app, privkey=privkey)\n\n    @app.route('/user', methods=['POST'])\n    @login_required\n    def post_user():\n        # request.jws_payload should exist and have the deserialized JWT claimset\n        username = request.jws_payload.get('username')\n        # request.jws_header should exist and have the sender's public key\n        address = request.jws_header['kid']\n        user = {'username': username, 'address': address}\n        # return a bitjws signed and formatted response\n        return current_app.create_bitjws_response(user)\n\nResponses\n'''''''''\n\nWhen you're ready to respond, use the create\\_bitjws\\_response method to\nconstruct your response in bitjws format.\n\n::\n\n    response_object = {'can be': 'a dict', 'or any': 'valid json'}\n    return current_app.create_bitjws_response(response_object)\n\nYour Database\n-------------\n\nFlask-bitjws comes with an example, in-memory data store for users and\nnonces. Using this example \"database\" is extremely insecure and\nunstable. It is recommended to provide bindings to your own persistent\ndatabase for production use. This can be done by passing\n``FlaskBitjws.__init__`` two functions: get\\_last\\_nonce, and\nget\\_user\\_by\\_key. These should do pretty much what their names say.\n\nSQLAlchemy Example\n''''''''''''''''''\n\n::\n\n    def get_last_nonce(app, key, nonce):\n        \"\"\"\n        This method is only an example! Replace it with a real nonce database.\n\n        :param str key: the public key the nonce belongs to\n        :param int nonce: the latest nonce\n        \"\"\"\n        uk = ses.query(UserKey).filter(UserKey.key==key)\\\n                .filter(UserKey.last_nonce<nonce * 1000).first()\n        if not uk:\n            return None\n        lastnonce = copy.copy(uk.last_nonce)\n        # TODO Update DB record in same query as above, if possible\n        uk.last_nonce = nonce * 1000\n        try:\n            ses.commit()\n        except Exception as e:\n            print e\n            ses.rollback()\n            ses.flush()\n        return lastnonce\n\n\n    def get_user_by_key(app, key):\n        \"\"\"\n        This method is only an example! Replace it with a real user database.\n\n        :param str key: the public key the user belongs to\n        \"\"\"\n        user = ses.query(SLM_User).join(UserKey).filter(UserKey.key==key).first()\n        return user\n\n    FlaskBitjws(app, get_last_nonce=get_last_nonce,\n                get_user_by_key=get_user_by_key)\n\n.. |PyPi version| image:: https://img.shields.io/pypi/v/flask-bitjws.svg\n   :target: https://pypi.python.org/pypi/flask-bitjws/\n.. |Build Status| image:: https://travis-ci.org/deginner/flask-bitjws.svg?branch=master\n   :target: https://travis-ci.org/deginner/flask-bitjws\n.. |Coverage| image:: https://coveralls.io/repos/deginner/flask-bitjws/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/deginner/flask-bitjws?branch=master\n.. |Gitter| image:: https://badges.gitter.im/Join%20Chat.svg\n   :target: https://gitter.im/deginner/bitjws?utm_source=share-link&utm_medium=link&utm_campaign=share-link\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deginner/flask-bitjws", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Flask-bitjws", "package_url": "https://pypi.org/project/Flask-bitjws/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Flask-bitjws/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/deginner/flask-bitjws"}, "release_url": "https://pypi.org/project/Flask-bitjws/0.1.1.5/", "requires_dist": null, "requires_python": null, "summary": "A Flask extension for bitjws authentication.", "version": "0.1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            flask-bitjws |PyPi version| |Build Status| |Coverage| |Gitter|<br>==============================================================<br><br>Flask extension for `bitjws &lt;https://github.com/g-p-g/bitjws&gt;`__<br>authentication.<br><br>Install<br>-------<br><br>By default it's expected that<br>`secp256k1 &lt;https://github.com/bitcoin/secp256k1&gt;`__ is available, so<br>install it before proceeding; make sure to run<br>``./configure --enable-module-recovery``. If you're using some other<br>library that provides the functionality necessary for this, check the<br>**Using a custom library** section of the bitjws README.<br><br>Flask-bitjws can be installed by running:<br><br>``pip install flask-bitjws``<br><br>Building secp256k1<br>''''''''''''''''''<br><br>In case you need to install the ``secp256k1`` C library, the following<br>sequence of commands is recommended. If you already have ``secp256k1``,<br>make sure it was compiled from the expected git commit or it might fail<br>to work due to API incompatibilities.<br><br>::<br><br>    git clone git://github.com/bitcoin/secp256k1.git libsecp256k1<br>    cd libsecp256k1<br>    git checkout d7eb1ae96dfe9d497a26b3e7ff8b6f58e61e400a<br>    ./autogen.sh<br>    ./configure --enable-module-recovery<br>    make<br>    sudo make install<br><br>Initialization<br>--------------<br><br>Initialize a flask\\_bitjws Application<br>''''''''''''''''''''''''''''''''''''''<br><br>The flask-bitjws package provides a Flask Application wrapper. To enable<br>bitjws authentication, initialize FlaskBitjws with your flask app as the<br>first argument.<br><br>.. code:: Python<br><br>    from flask import Flask<br>    from flask_bitjws import FlaskBitjws<br><br>    app = Flask(__name__)<br>    FlaskBitjws(app)<br><br>Customizing LoginManager<br>''''''''''''''''''''''''<br><br>| Flask-bitjws uses<br>`flask-login &lt;https://github.com/maxcountryman/flask-login&gt;`__ to manage<br>user login and authentication. By default,<br>| the FlaskBitjws initialization will create a new LoginManager for you.<br>If you need to customize, you can alternately provide your own. Just be<br>aware that it's request\\_loader needs to be left as is.<br><br>.. code:: Python<br><br>    from flask import Flask<br>    from flask_bitjws import FlaskBitjws<br>    from flask.ext.login import LoginManager<br><br>    # Your LoginManager<br>    lm = LoginManager()<br><br>    app = Flask(__name__)<br>    FlaskBitjws(app, loginmanager=lm)<br><br>Initialize with private key<br>'''''''''''''''''''''''''''<br><br>To provide a private key for your server to use in signing, include a<br>privkey argument to Application.\\ **init**\\ ().<br><br>.. code:: Python<br><br>    from flask import Flask<br>    from flask_bitjws import FlaskBitjws<br><br>    # Your bitjws private key in WIF<br>    privkey = \"KweY4PozGhtkGPMvvD7vk7nLiN6211XZ2QGxLBMginAQW7MBbgp8\"<br><br>    app = Flask(__name__)<br>    FlaskBitjws(app, privkey=privkey)<br><br>Usage<br>-----<br><br>Requests<br>''''''''<br><br>For all routes that require login (i.e. wrapped in @login\\_required),<br>the FlaskBitjws login manager will validate the bitjws headers and data,<br>and match it up to a user.<br><br>If authentication is successful, the request will have two new<br>attributes \"jws\\_payload\", and \"jws\\_header\".<br><br>If authentication fails, flask-login will return a 401 error.<br><br>::<br><br>    from flask import Flask<br>    from flask_bitjws import FlaskBitjws<br><br>    # Your bitjws private key in WIF<br>    privkey = \"KweY4PozGhtkGPMvvD7vk7nLiN6211XZ2QGxLBMginAQW7MBbgp8\"<br><br>    app = Flask(__name__)<br>    FlaskBitjws(app, privkey=privkey)<br><br>    @app.route('/user', methods=['POST'])<br>    @login_required<br>    def post_user():<br>        # request.jws_payload should exist and have the deserialized JWT claimset<br>        username = request.jws_payload.get('username')<br>        # request.jws_header should exist and have the sender's public key<br>        address = request.jws_header['kid']<br>        user = {'username': username, 'address': address}<br>        # return a bitjws signed and formatted response<br>        return current_app.create_bitjws_response(user)<br><br>Responses<br>'''''''''<br><br>When you're ready to respond, use the create\\_bitjws\\_response method to<br>construct your response in bitjws format.<br><br>::<br><br>    response_object = {'can be': 'a dict', 'or any': 'valid json'}<br>    return current_app.create_bitjws_response(response_object)<br><br>Your Database<br>-------------<br><br>Flask-bitjws comes with an example, in-memory data store for users and<br>nonces. Using this example \"database\" is extremely insecure and<br>unstable. It is recommended to provide bindings to your own persistent<br>database for production use. This can be done by passing<br>``FlaskBitjws.__init__`` two functions: get\\_last\\_nonce, and<br>get\\_user\\_by\\_key. These should do pretty much what their names say.<br><br>SQLAlchemy Example<br>''''''''''''''''''<br><br>::<br><br>    def get_last_nonce(app, key, nonce):<br>        \"\"\"<br>        This method is only an example! Replace it with a real nonce database.<br><br>        :param str key: the public key the nonce belongs to<br>        :param int nonce: the latest nonce<br>        \"\"\"<br>        uk = ses.query(UserKey).filter(UserKey.key==key)\\<br>                .filter(UserKey.last_nonce&lt;nonce * 1000).first()<br>        if not uk:<br>            return None<br>        lastnonce = copy.copy(uk.last_nonce)<br>        # TODO Update DB record in same query as above, if possible<br>        uk.last_nonce = nonce * 1000<br>        try:<br>            ses.commit()<br>        except Exception as e:<br>            print e<br>            ses.rollback()<br>            ses.flush()<br>        return lastnonce<br><br><br>    def get_user_by_key(app, key):<br>        \"\"\"<br>        This method is only an example! Replace it with a real user database.<br><br>        :param str key: the public key the user belongs to<br>        \"\"\"<br>        user = ses.query(SLM_User).join(UserKey).filter(UserKey.key==key).first()<br>        return user<br><br>    FlaskBitjws(app, get_last_nonce=get_last_nonce,<br>                get_user_by_key=get_user_by_key)<br><br>.. |PyPi version| image:: https://img.shields.io/pypi/v/flask-bitjws.svg<br>   :target: https://pypi.python.org/pypi/flask-bitjws/<br>.. |Build Status| image:: https://travis-ci.org/deginner/flask-bitjws.svg?branch=master<br>   :target: https://travis-ci.org/deginner/flask-bitjws<br>.. |Coverage| image:: https://coveralls.io/repos/deginner/flask-bitjws/badge.svg?branch=master&amp;service=github<br>   :target: https://coveralls.io/github/deginner/flask-bitjws?branch=master<br>.. |Gitter| image:: https://badges.gitter.im/Join%20Chat.svg<br>   :target: https://gitter.im/deginner/bitjws?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link<br>\n          </div>"}, "last_serial": 1805115, "releases": {"0.0.3": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "bcc7be08925d5e2a6a346fa6cf4d805e", "sha256": "7dc547203166f3d164b6f56a3c0b57ee8550bb11c4c907409bd5291102c1a855"}, "downloads": -1, "filename": "Flask-bitjws-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bcc7be08925d5e2a6a346fa6cf4d805e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3948, "upload_time": "2015-10-28T15:34:02", "upload_time_iso_8601": "2015-10-28T15:34:02.004250Z", "url": "https://files.pythonhosted.org/packages/8f/3f/1a0fe080005a16fa8416800217c1ea9f96def95159b74d1547693e52d0a8/Flask-bitjws-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c86f1fa3ccd64da3a52af08e1022733f", "sha256": "6c75f43cc84286384a4a341bb3123e554ca2b889e67d246d9c5ad73ea0bad987"}, "downloads": -1, "filename": "flask-bitjws-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c86f1fa3ccd64da3a52af08e1022733f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5944, "upload_time": "2015-10-29T19:02:16", "upload_time_iso_8601": "2015-10-29T19:02:16.548485Z", "url": "https://files.pythonhosted.org/packages/37/4b/18d34568d78b3347bdf53b6edb9e506bb2183abbbf72007d06ef69c7c837/flask-bitjws-0.1.1.tar.gz", "yanked": false}], "0.1.1.3": [{"comment_text": "", "digests": {"md5": "9f704cf57e3e167d175956ba6fc107fd", "sha256": "43e6d523b48b0b82577c609bbdf9217a1fd0efee1b1b375d3b62768a0a93560c"}, "downloads": -1, "filename": "flask-bitjws-0.1.1.3.tar.gz", "has_sig": false, "md5_digest": "9f704cf57e3e167d175956ba6fc107fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6782, "upload_time": "2015-10-30T06:49:31", "upload_time_iso_8601": "2015-10-30T06:49:31.444312Z", "url": "https://files.pythonhosted.org/packages/7e/7b/a60a31be05bacd2962052ce230fdd2f05742441699f0c8cdb5f70bc43112/flask-bitjws-0.1.1.3.tar.gz", "yanked": false}], "0.1.1.4": [{"comment_text": "", "digests": {"md5": "8e638555ab615668ce1b2815bb16079a", "sha256": "5ae0e6bba99ec3c2448e4879b0a9a456f09564eb77b647e2b8cad7d29355e2ec"}, "downloads": -1, "filename": "flask-bitjws-0.1.1.4.tar.gz", "has_sig": false, "md5_digest": "8e638555ab615668ce1b2815bb16079a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6952, "upload_time": "2015-11-03T23:25:29", "upload_time_iso_8601": "2015-11-03T23:25:29.836381Z", "url": "https://files.pythonhosted.org/packages/19/86/535eab8ada50173b46040e80eb9ba034289328c9a92c36caa9a724b24fd3/flask-bitjws-0.1.1.4.tar.gz", "yanked": false}], "0.1.1.5": [{"comment_text": "", "digests": {"md5": "1cbbfa1d948dd4939b68d0f15bf68a31", "sha256": "a24fa255d32563a7537d45ff461800bcea2ac9ce7c813fd59186a8c7d5f3505c"}, "downloads": -1, "filename": "flask-bitjws-0.1.1.5.tar.gz", "has_sig": false, "md5_digest": "1cbbfa1d948dd4939b68d0f15bf68a31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7639, "upload_time": "2015-11-06T21:14:14", "upload_time_iso_8601": "2015-11-06T21:14:14.919707Z", "url": "https://files.pythonhosted.org/packages/81/f9/1200a572f2ddbc1016a4d524652432c68e12dbb065894016ee543cb5582c/flask-bitjws-0.1.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1cbbfa1d948dd4939b68d0f15bf68a31", "sha256": "a24fa255d32563a7537d45ff461800bcea2ac9ce7c813fd59186a8c7d5f3505c"}, "downloads": -1, "filename": "flask-bitjws-0.1.1.5.tar.gz", "has_sig": false, "md5_digest": "1cbbfa1d948dd4939b68d0f15bf68a31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7639, "upload_time": "2015-11-06T21:14:14", "upload_time_iso_8601": "2015-11-06T21:14:14.919707Z", "url": "https://files.pythonhosted.org/packages/81/f9/1200a572f2ddbc1016a4d524652432c68e12dbb065894016ee543cb5582c/flask-bitjws-0.1.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:04 2020"}