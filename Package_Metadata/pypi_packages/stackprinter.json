{"info": {"author": "cknd", "author_email": "ck-github@mailbox.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<img src=\"https://raw.githubusercontent.com/cknd/stackprinter/master/darkbg.png\" width=\"500\">\n\n# Better crash logs\n\nThis prints tracebacks / call stacks with code context and the values of nearby variables. It answers most of the questions I'd ask an interactive debugger: Where in the code did it happen, what's in the relevant local variables, and why was _that_ function called with _those_ arguments.\n\nBasically, it's a more helpful version of Python's built-in crash message. It will either print to the console or give you a string for logging.\n\n```bash\npip install stackprinter\n```\n\n### Before\n```\nTraceback (most recent call last):\n  File \"demo.py\", line 10, in <module>\n    dangerous_function(somelist + anotherlist)\n  File \"demo.py\", line 4, in dangerous_function\n    return sorted(blub, key=lambda xs: sum(xs))\n  File \"demo.py\", line 4, in <lambda>\n    return sorted(blub, key=lambda xs: sum(xs))\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n```\n\n### After\n```\nFile demo.py, line 10, in <module>\n    8         somelist = [[1,2], [3,4]]\n    9         anotherlist = [['5', 6]]\n--> 10        dangerous_function(somelist + anotherlist)\n    11    except:\n    ..................................................\n     somelist = [[1, 2], [3, 4]]\n     anotherlist = [['5', 6]]\n    ..................................................\n\nFile demo.py, line 4, in dangerous_function\n    3     def dangerous_function(blub):\n--> 4         return sorted(blub, key=lambda xs: sum(xs))\n    ..................................................\n     blub = [[1, 2], [3, 4], ['5', 6]]\n    ..................................................\n\nFile demo.py, line 4, in <lambda>\n    2\n    3     def dangerous_function(blub):\n--> 4         return sorted(blub, key=lambda xs: sum(xs))\n    5\n    ..................................................\n     xs = ['5', 6]\n    ..................................................\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n```\nBy default, it tries to be somewhat polite about screen space (showing only a few source lines & the function header, and only the variables in those lines, and only (?) 500 characters per variable). You can [configure](https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L82-L127) exactly how verbose things should be.\n\nIt outputs plain text by default, which is good for logging to text files. There's also a color mode for some reason \ud83c\udf08, which you can activate by a `style` keyword in any of the functions below. (The colors [track different variables](https://medium.com/@brianwill/making-semantic-highlighting-useful-9aeac92411df) instead of the language syntax.)\n\nI sometimes use this locally instead of a debugger, but mostly it helps me sleep when my code runs somewhere where the only debug tool is a log file (though it's not a fully-grown [error monitoring system](https://sentry.io/welcome/)).\n\n<img src=\"https://raw.githubusercontent.com/cknd/stackprinter/master/notebook.png\" width=\"500\">\n\n# Usage\n\n## Exception logging\nTo replace the default python crash printout, call `set_excepthook()` somewhere. This will print detailed stacktraces for any uncaught exception (to stderr, by default). You could also [make this permanent for your python installation](#making-it-stick).\n\n```python\nimport stackprinter\nstackprinter.set_excepthook(style='darkbg2')\n```\n\nFor more control, call [`show()`](https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L154-L162) or [`format()`](https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L28-L137) inside an `except` block. `show()` prints to stderr by default, `format()` returns a string, for custom logging.\n\n```python\ntry:\n    something()\nexcept:\n    # print the current exception to stderr:\n    stackprinter.show()\n\n    # ...or instead, get a string for logging:\n    logger.error(stackprinter.format())\n```\nOr pass specific exceptions explicitly:\n```python\ntry:\n    something()\nexcept RuntimeError as exc:\n    tb = stackprinter.format(exc)\n    logger.error('The front fell off.\\n' + tb)\n```\n\nFor all the config options, for now, [see the docstring of `format()`](https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L82-L127).\n\nIt's also possible to integrate this neatly with standard logging calls [through a bit of extra plumbing](https://github.com/cknd/stackprinter/blob/master/demo_logging.py).\n\n```\nconfigure_logging() # adds a custom log formatter, see link above\n# (...)\ntry:\n    something()\nexcept RuntimeError as e:\n    logger.exception('The front fell off.')\n```\n\n## Printing the current call stack\nTo see your own thread's current call stack, call `show` or `format` anywhere outside of exception handling.\n\n```python\nstackprinter.show() # or format()\n```\n\n## Printing the stack of another thread\nTo inspect the call stack of any other running thread:\n\n```python\nthread = threading.Thread(target=something)\nthread.start()\n# (...)\nstackprinter.show(thread) # or format(thread)\n```\n\n## Tracing a piece of code\n\nMore for curiosity than anything else, you can watch a piece of code execute step-by-step, printing a trace of all calls & returns 'live' as they are happening. Slows everything down though, of course.\n```python\nwith stackprinter.TracePrinter(style='darkbg2'):\n    dosomething()\n```\n\nor\n```python\ntp = stackprinter.TracePrinter(style='darkbg2')\ntp.enable()\ndosomething()\n# (...) +1 million lines\ntp.disable()\n```\n<img src=\"https://raw.githubusercontent.com/cknd/stackprinter/master/trace.png\" width=\"300\">\n\n## Making it stick\n\nTo permanently replace the crash message for your python installation, you *could* put a file `sitecustomize.py` into the `site-packages` directory under one of the paths revealed by `python -c \"import site; print(site.PREFIXES)\"`, with contents like this:\n\n```python\n    # in e.g. some_virtualenv/lib/python3.x/site-packages/sitecustomize.py:\n    import stackprinter\n    stackprinter.set_excepthook(style='darkbg2')\n```\n\nThat would give you colorful tracebacks automatically every time, even in the REPL.\n\n(You could do a similar thing for IPython, [but they have their own method](https://ipython.readthedocs.io/en/stable/interactive/tutorial.html?highlight=startup#configuration), where the file goes into `~/.ipython/profile_default/startup` instead, and also I don't want to talk about what this module does to set an excepthook under IPython.)\n\n# How it works\n\nBasically, this is a frame formatter. For each [frame on the call stack](https://en.wikipedia.org/wiki/Call_stack), it grabs the source code to find out which source lines reference which variables. Then it displays code and variables in the neighbourhood of the last executed line.\n\nSince this already requires a map of where each variable occurs in the code, it was difficult not to also implement the whole semantic highlighting color thing seen in the screenshots. The colors are ANSI escape codes now, but it should be fairly straightforward\u2122 to render the underlying data without any 1980ies terminal technology. Say, a foldable and clickable HTML page with downloadable pickled variables. For now you'll have to pipe the ANSI strings through [ansi2html](https://github.com/ralphbean/ansi2html/) or something.\n\nThe format and everything is inspired by the excellent [`ultratb`](https://ipython.readthedocs.io/en/stable/api/generated/IPython.core.ultratb.html) in IPython. One day I'd like to contribute the whole \"find out which variables in `locals` and `globals` are nearby in the source and print only those\" machine over there, after trimming its complexity a bit.\n\n# Caveats\n\nThis displays variable values as they are _at the time of formatting_. In\nmulti-threaded programs, variables can change while we're busy walking\nthe stack & printing them. So, if nothing seems to make sense, consider that\nyour exception and the traceback messages are from slightly different times.\nSadly, there is no responsible way to freeze all other threads as soon\nas we want to inspect some thread's call stack (...or is there?)\n\n# Docs\n\n\\*coughs\\*\n\nFor now, just look at all the doc strings, [e.g. those of `format()`](https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L28-L137)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cknd/stackprinter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "stackprinter", "package_url": "https://pypi.org/project/stackprinter/", "platform": "", "project_url": "https://pypi.org/project/stackprinter/", "project_urls": {"Homepage": "https://github.com/cknd/stackprinter"}, "release_url": "https://pypi.org/project/stackprinter/0.2.3/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Debug-friendly stack traces, with variable values and semantic highlighting", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c264dcebc4e89ac331bab541f2763acfb4fc21d2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f636b6e642f737461636b7072696e7465722f6d61737465722f6461726b62672e706e67\" width=\"500\">\n<h1>Better crash logs</h1>\n<p>This prints tracebacks / call stacks with code context and the values of nearby variables. It answers most of the questions I'd ask an interactive debugger: Where in the code did it happen, what's in the relevant local variables, and why was <em>that</em> function called with <em>those</em> arguments.</p>\n<p>Basically, it's a more helpful version of Python's built-in crash message. It will either print to the console or give you a string for logging.</p>\n<pre>pip install stackprinter\n</pre>\n<h3>Before</h3>\n<pre><code>Traceback (most recent call last):\n  File \"demo.py\", line 10, in &lt;module&gt;\n    dangerous_function(somelist + anotherlist)\n  File \"demo.py\", line 4, in dangerous_function\n    return sorted(blub, key=lambda xs: sum(xs))\n  File \"demo.py\", line 4, in &lt;lambda&gt;\n    return sorted(blub, key=lambda xs: sum(xs))\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n</code></pre>\n<h3>After</h3>\n<pre><code>File demo.py, line 10, in &lt;module&gt;\n    8         somelist = [[1,2], [3,4]]\n    9         anotherlist = [['5', 6]]\n--&gt; 10        dangerous_function(somelist + anotherlist)\n    11    except:\n    ..................................................\n     somelist = [[1, 2], [3, 4]]\n     anotherlist = [['5', 6]]\n    ..................................................\n\nFile demo.py, line 4, in dangerous_function\n    3     def dangerous_function(blub):\n--&gt; 4         return sorted(blub, key=lambda xs: sum(xs))\n    ..................................................\n     blub = [[1, 2], [3, 4], ['5', 6]]\n    ..................................................\n\nFile demo.py, line 4, in &lt;lambda&gt;\n    2\n    3     def dangerous_function(blub):\n--&gt; 4         return sorted(blub, key=lambda xs: sum(xs))\n    5\n    ..................................................\n     xs = ['5', 6]\n    ..................................................\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n</code></pre>\n<p>By default, it tries to be somewhat polite about screen space (showing only a few source lines &amp; the function header, and only the variables in those lines, and only (?) 500 characters per variable). You can <a href=\"https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L82-L127\" rel=\"nofollow\">configure</a> exactly how verbose things should be.</p>\n<p>It outputs plain text by default, which is good for logging to text files. There's also a color mode for some reason \ud83c\udf08, which you can activate by a <code>style</code> keyword in any of the functions below. (The colors <a href=\"https://medium.com/@brianwill/making-semantic-highlighting-useful-9aeac92411df\" rel=\"nofollow\">track different variables</a> instead of the language syntax.)</p>\n<p>I sometimes use this locally instead of a debugger, but mostly it helps me sleep when my code runs somewhere where the only debug tool is a log file (though it's not a fully-grown <a href=\"https://sentry.io/welcome/\" rel=\"nofollow\">error monitoring system</a>).</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6fe453b33b8a6ec4cb8f17b6309ff7cbfa052217/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f636b6e642f737461636b7072696e7465722f6d61737465722f6e6f7465626f6f6b2e706e67\" width=\"500\">\n<h1>Usage</h1>\n<h2>Exception logging</h2>\n<p>To replace the default python crash printout, call <code>set_excepthook()</code> somewhere. This will print detailed stacktraces for any uncaught exception (to stderr, by default). You could also <a href=\"#making-it-stick\" rel=\"nofollow\">make this permanent for your python installation</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">stackprinter</span>\n<span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">set_excepthook</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">'darkbg2'</span><span class=\"p\">)</span>\n</pre>\n<p>For more control, call <a href=\"https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L154-L162\" rel=\"nofollow\"><code>show()</code></a> or <a href=\"https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L28-L137\" rel=\"nofollow\"><code>format()</code></a> inside an <code>except</code> block. <code>show()</code> prints to stderr by default, <code>format()</code> returns a string, for custom logging.</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">something</span><span class=\"p\">()</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"c1\"># print the current exception to stderr:</span>\n    <span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># ...or instead, get a string for logging:</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">())</span>\n</pre>\n<p>Or pass specific exceptions explicitly:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">something</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">RuntimeError</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n    <span class=\"n\">tb</span> <span class=\"o\">=</span> <span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'The front fell off.</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">+</span> <span class=\"n\">tb</span><span class=\"p\">)</span>\n</pre>\n<p>For all the config options, for now, <a href=\"https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L82-L127\" rel=\"nofollow\">see the docstring of <code>format()</code></a>.</p>\n<p>It's also possible to integrate this neatly with standard logging calls <a href=\"https://github.com/cknd/stackprinter/blob/master/demo_logging.py\" rel=\"nofollow\">through a bit of extra plumbing</a>.</p>\n<pre><code>configure_logging() # adds a custom log formatter, see link above\n# (...)\ntry:\n    something()\nexcept RuntimeError as e:\n    logger.exception('The front fell off.')\n</code></pre>\n<h2>Printing the current call stack</h2>\n<p>To see your own thread's current call stack, call <code>show</code> or <code>format</code> anywhere outside of exception handling.</p>\n<pre><span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span> <span class=\"c1\"># or format()</span>\n</pre>\n<h2>Printing the stack of another thread</h2>\n<p>To inspect the call stack of any other running thread:</p>\n<pre><span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">something</span><span class=\"p\">)</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># (...)</span>\n<span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">)</span> <span class=\"c1\"># or format(thread)</span>\n</pre>\n<h2>Tracing a piece of code</h2>\n<p>More for curiosity than anything else, you can watch a piece of code execute step-by-step, printing a trace of all calls &amp; returns 'live' as they are happening. Slows everything down though, of course.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">TracePrinter</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">'darkbg2'</span><span class=\"p\">):</span>\n    <span class=\"n\">dosomething</span><span class=\"p\">()</span>\n</pre>\n<p>or</p>\n<pre><span class=\"n\">tp</span> <span class=\"o\">=</span> <span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">TracePrinter</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">'darkbg2'</span><span class=\"p\">)</span>\n<span class=\"n\">tp</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n<span class=\"n\">dosomething</span><span class=\"p\">()</span>\n<span class=\"c1\"># (...) +1 million lines</span>\n<span class=\"n\">tp</span><span class=\"o\">.</span><span class=\"n\">disable</span><span class=\"p\">()</span>\n</pre>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d53a6ebc66ad457d767a1aaa480f0c2c00bc922d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f636b6e642f737461636b7072696e7465722f6d61737465722f74726163652e706e67\" width=\"300\">\n<h2>Making it stick</h2>\n<p>To permanently replace the crash message for your python installation, you <em>could</em> put a file <code>sitecustomize.py</code> into the <code>site-packages</code> directory under one of the paths revealed by <code>python -c \"import site; print(site.PREFIXES)\"</code>, with contents like this:</p>\n<pre>    <span class=\"c1\"># in e.g. some_virtualenv/lib/python3.x/site-packages/sitecustomize.py:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">stackprinter</span>\n    <span class=\"n\">stackprinter</span><span class=\"o\">.</span><span class=\"n\">set_excepthook</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">'darkbg2'</span><span class=\"p\">)</span>\n</pre>\n<p>That would give you colorful tracebacks automatically every time, even in the REPL.</p>\n<p>(You could do a similar thing for IPython, <a href=\"https://ipython.readthedocs.io/en/stable/interactive/tutorial.html?highlight=startup#configuration\" rel=\"nofollow\">but they have their own method</a>, where the file goes into <code>~/.ipython/profile_default/startup</code> instead, and also I don't want to talk about what this module does to set an excepthook under IPython.)</p>\n<h1>How it works</h1>\n<p>Basically, this is a frame formatter. For each <a href=\"https://en.wikipedia.org/wiki/Call_stack\" rel=\"nofollow\">frame on the call stack</a>, it grabs the source code to find out which source lines reference which variables. Then it displays code and variables in the neighbourhood of the last executed line.</p>\n<p>Since this already requires a map of where each variable occurs in the code, it was difficult not to also implement the whole semantic highlighting color thing seen in the screenshots. The colors are ANSI escape codes now, but it should be fairly straightforward\u2122 to render the underlying data without any 1980ies terminal technology. Say, a foldable and clickable HTML page with downloadable pickled variables. For now you'll have to pipe the ANSI strings through <a href=\"https://github.com/ralphbean/ansi2html/\" rel=\"nofollow\">ansi2html</a> or something.</p>\n<p>The format and everything is inspired by the excellent <a href=\"https://ipython.readthedocs.io/en/stable/api/generated/IPython.core.ultratb.html\" rel=\"nofollow\"><code>ultratb</code></a> in IPython. One day I'd like to contribute the whole \"find out which variables in <code>locals</code> and <code>globals</code> are nearby in the source and print only those\" machine over there, after trimming its complexity a bit.</p>\n<h1>Caveats</h1>\n<p>This displays variable values as they are <em>at the time of formatting</em>. In\nmulti-threaded programs, variables can change while we're busy walking\nthe stack &amp; printing them. So, if nothing seems to make sense, consider that\nyour exception and the traceback messages are from slightly different times.\nSadly, there is no responsible way to freeze all other threads as soon\nas we want to inspect some thread's call stack (...or is there?)</p>\n<h1>Docs</h1>\n<p>*coughs*</p>\n<p>For now, just look at all the doc strings, <a href=\"https://github.com/cknd/stackprinter/blob/master/stackprinter/__init__.py#L28-L137\" rel=\"nofollow\">e.g. those of <code>format()</code></a></p>\n\n          </div>"}, "last_serial": 5332114, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "85fb011c63db8ab06d107c09da2a91c7", "sha256": "71192949afd6e9f7bf806f1e037706a95de8cb51483d4be93c7077cf7de2d27a"}, "downloads": -1, "filename": "stackprinter-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "85fb011c63db8ab06d107c09da2a91c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22832, "upload_time": "2019-01-05T16:30:46", "upload_time_iso_8601": "2019-01-05T16:30:46.928188Z", "url": "https://files.pythonhosted.org/packages/7a/b3/8124101b1359e3fb852194260c8dedf08958cd88370e8ec9b296a9901e14/stackprinter-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d4a12140fc0c6c8b13711ffd7316684", "sha256": "6bd23ed44a27c9a2141d9c41bb7ec94b357d3f4be311de45997ca2bb05954d72"}, "downloads": -1, "filename": "stackprinter-0.1.tar.gz", "has_sig": false, "md5_digest": "4d4a12140fc0c6c8b13711ffd7316684", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19680, "upload_time": "2019-01-05T16:30:49", "upload_time_iso_8601": "2019-01-05T16:30:49.197219Z", "url": "https://files.pythonhosted.org/packages/d9/32/ec857f11f069a456b3ec133179e6359ed594313366b59f43aa56694bb375/stackprinter-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ffe823ab0b00552dfbe43003cba16e29", "sha256": "f3f53d1db8015d8d2f10c1d3f3c1b0b9926a253d85ecda53995967c79d7aa1c5"}, "downloads": -1, "filename": "stackprinter-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ffe823ab0b00552dfbe43003cba16e29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22943, "upload_time": "2019-01-05T17:06:10", "upload_time_iso_8601": "2019-01-05T17:06:10.575625Z", "url": "https://files.pythonhosted.org/packages/07/c1/e92714a3d9283f96899cee3a238c52b20688985cea7915cb74549d34e595/stackprinter-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d554c241c21af117a37d0d04d753489e", "sha256": "f89a9b41257e33150a29f17d88313c90a080ba051d8fde788f7774ae392d13bc"}, "downloads": -1, "filename": "stackprinter-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d554c241c21af117a37d0d04d753489e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19776, "upload_time": "2019-01-05T17:06:12", "upload_time_iso_8601": "2019-01-05T17:06:12.159455Z", "url": "https://files.pythonhosted.org/packages/c2/4e/42ab405d2dd68172bf0accec25f554f7d0c1c16817be95b502b7f46cb6f2/stackprinter-0.1.1.tar.gz", "yanked": false}], "0.1.1.post1": [{"comment_text": "", "digests": {"md5": "ffa6b6ea8e496fad5d08aeb3e3a031d5", "sha256": "3fd305ce99b48d86f883a050be3c4b71a5459ba37a842bafe20e480627c05216"}, "downloads": -1, "filename": "stackprinter-0.1.1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "ffa6b6ea8e496fad5d08aeb3e3a031d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23047, "upload_time": "2019-01-05T18:46:12", "upload_time_iso_8601": "2019-01-05T18:46:12.049848Z", "url": "https://files.pythonhosted.org/packages/34/9a/e1cde52afa38b90a29fa738f80f06cbbb2bb8303e5f754d427aae8b1aea5/stackprinter-0.1.1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae1c77230cac7203fabb61a9c2f9e50a", "sha256": "a439e9dfdf65849fea55d84a2158bd329d8725e0e5a8ca89f170f078aeaf1b24"}, "downloads": -1, "filename": "stackprinter-0.1.1.post1.tar.gz", "has_sig": false, "md5_digest": "ae1c77230cac7203fabb61a9c2f9e50a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19866, "upload_time": "2019-01-05T18:46:13", "upload_time_iso_8601": "2019-01-05T18:46:13.660162Z", "url": "https://files.pythonhosted.org/packages/df/7b/88a6ad646af7ad9a22ca08bb568d92a594cc7da63b2945458ca0ec7ee7cd/stackprinter-0.1.1.post1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f83e60651529c5f274365aa6b3d1ac61", "sha256": "586ee6edc66358404f17b65e8b66fb635101f972a10fd81ad0ecc76d4b44f2c7"}, "downloads": -1, "filename": "stackprinter-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f83e60651529c5f274365aa6b3d1ac61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22975, "upload_time": "2019-01-05T18:50:55", "upload_time_iso_8601": "2019-01-05T18:50:55.248016Z", "url": "https://files.pythonhosted.org/packages/8a/d0/c3c4ef5de20224c388742d1ce7723851eee6f1d13624e9ca9d3a90013643/stackprinter-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63165f841c109eba776a0d8afc104998", "sha256": "8ed90c439ce127777185767261fb9a144655ceda0c113b8090d612b8ad47d982"}, "downloads": -1, "filename": "stackprinter-0.1.2.tar.gz", "has_sig": false, "md5_digest": "63165f841c109eba776a0d8afc104998", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19862, "upload_time": "2019-01-05T18:50:56", "upload_time_iso_8601": "2019-01-05T18:50:56.859542Z", "url": "https://files.pythonhosted.org/packages/0c/1f/866fae84059269b329fc8a0d94f337cce6e11daf2012a805df86decf72cb/stackprinter-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "7902cb5823a549ee0c7dcff275fa1a84", "sha256": "90345a7ad11dc5ed9cbc42b535abd5e56a93c19a9ed8f56e891ec9b92de82849"}, "downloads": -1, "filename": "stackprinter-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7902cb5823a549ee0c7dcff275fa1a84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23093, "upload_time": "2019-01-08T23:52:05", "upload_time_iso_8601": "2019-01-08T23:52:05.602777Z", "url": "https://files.pythonhosted.org/packages/b3/bd/724de5d7412f38c30fa2f567e6365496f0cc28656679e53b9625a5d15b2d/stackprinter-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88a246f67533245f42b90bdfe4da7a91", "sha256": "1088c5579fd2a1ba42bb372a135733d0069f388fa0bc9fbbde0369ca4941f7d7"}, "downloads": -1, "filename": "stackprinter-0.1.3.tar.gz", "has_sig": false, "md5_digest": "88a246f67533245f42b90bdfe4da7a91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19993, "upload_time": "2019-01-08T23:52:07", "upload_time_iso_8601": "2019-01-08T23:52:07.632901Z", "url": "https://files.pythonhosted.org/packages/7f/bc/66ff8b966a7d9159ca067891b3fa910cfe6817556c4cc47ba5401e4c1bab/stackprinter-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "9eb209e5214c672b2336d9d85c88fe3b", "sha256": "9ee8bf2213b8df3d44935f164db00e57dee6a8f3b4a28e149ced76330ff56469"}, "downloads": -1, "filename": "stackprinter-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9eb209e5214c672b2336d9d85c88fe3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23201, "upload_time": "2019-02-12T11:22:27", "upload_time_iso_8601": "2019-02-12T11:22:27.102128Z", "url": "https://files.pythonhosted.org/packages/5b/a6/3517a73a6e58d27d4f877b22696456719d1958b68343a5815f364ff5a492/stackprinter-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c2089ab6893db4e564af332516b00d5", "sha256": "436a6880baa359f60d59f9f95dd71a803e679e53b3907cc13953fa24b8ef531d"}, "downloads": -1, "filename": "stackprinter-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4c2089ab6893db4e564af332516b00d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20124, "upload_time": "2019-02-12T11:22:28", "upload_time_iso_8601": "2019-02-12T11:22:28.569466Z", "url": "https://files.pythonhosted.org/packages/68/ff/ac85b236a73013d7490efa4d220bba0d3b83789f689da30add20380caf6c/stackprinter-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "e6e3a5717dde7c622c36e00b54bf306a", "sha256": "3a5bd9c5e427430c8c2ffc4f2e4d5d254f624c77ede49a497ab6b4f151a2bb68"}, "downloads": -1, "filename": "stackprinter-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e6e3a5717dde7c622c36e00b54bf306a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24595, "upload_time": "2019-04-22T14:59:19", "upload_time_iso_8601": "2019-04-22T14:59:19.009579Z", "url": "https://files.pythonhosted.org/packages/76/ff/e0f3ebad0c7ffa89856ba0065f31f47e0ffb936a59faa53799f45547df58/stackprinter-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "477e470469cc7bb92aacf3d731f025bc", "sha256": "7e488dc94feeb6c473ecb27e9ed69e0b8bcf2e7e0c90857e78fa1c0edd7d2915"}, "downloads": -1, "filename": "stackprinter-0.1.5.tar.gz", "has_sig": false, "md5_digest": "477e470469cc7bb92aacf3d731f025bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22145, "upload_time": "2019-04-22T14:59:20", "upload_time_iso_8601": "2019-04-22T14:59:20.848701Z", "url": "https://files.pythonhosted.org/packages/dd/a9/691e60dc2a5a7feec2a50c24c739220dfd12adc3768d8690bac0e63810f0/stackprinter-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "d1889c1e46d734648be85b24b6b5007d", "sha256": "8b4e2b879b510f2af560de13899437fdf090eefa543958ef793f918817268064"}, "downloads": -1, "filename": "stackprinter-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d1889c1e46d734648be85b24b6b5007d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26296, "upload_time": "2019-04-28T13:27:41", "upload_time_iso_8601": "2019-04-28T13:27:41.838782Z", "url": "https://files.pythonhosted.org/packages/b4/50/86afcf78be53ff71493648c0725ba7916bdb7aa74a844f48c52d40e7ea47/stackprinter-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f16857edd20c5f39f6e11bcc3b06f72d", "sha256": "f8ad6f5aada8578669afc50c45f775d3ccb0481dcfb0c6097db81c1d8c39f72f"}, "downloads": -1, "filename": "stackprinter-0.1.6.tar.gz", "has_sig": false, "md5_digest": "f16857edd20c5f39f6e11bcc3b06f72d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24075, "upload_time": "2019-04-28T13:27:45", "upload_time_iso_8601": "2019-04-28T13:27:45.310056Z", "url": "https://files.pythonhosted.org/packages/04/cf/4c16c422821e96200cd7ca7e2b3d42f5ba62ff45126e136ec468c9e96f65/stackprinter-0.1.6.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "31639039248ff3b8e66e76f616961783", "sha256": "d6f7928c1e5239cd23b5b21c63029596edbf82332d53fb1ddcd6e5d949764cf9"}, "downloads": -1, "filename": "stackprinter-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "31639039248ff3b8e66e76f616961783", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26656, "upload_time": "2019-05-01T09:56:00", "upload_time_iso_8601": "2019-05-01T09:56:00.516669Z", "url": "https://files.pythonhosted.org/packages/64/ad/97599287c2ab993328adef81df2755f9d41804d52f8a25f2df623a919427/stackprinter-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca2bfe74c183b8abfdec732d4c79a0b3", "sha256": "8793b326270585bcec165cf03cedcfa6ef71ad8ed8ca8644fbcff9a3732b9a98"}, "downloads": -1, "filename": "stackprinter-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ca2bfe74c183b8abfdec732d4c79a0b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 24787, "upload_time": "2019-05-01T09:56:02", "upload_time_iso_8601": "2019-05-01T09:56:02.991692Z", "url": "https://files.pythonhosted.org/packages/5b/df/2979c94a81a8af54e8605f8c372c2b030a9c952eb628f9df306ec419831a/stackprinter-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7aa3c18e092cccabe3aae97f4555b584", "sha256": "9028d181b88936ed7a5be0edee1291235a16ef9791824fb6c69eba0fc13287bc"}, "downloads": -1, "filename": "stackprinter-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7aa3c18e092cccabe3aae97f4555b584", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26612, "upload_time": "2019-05-18T12:12:10", "upload_time_iso_8601": "2019-05-18T12:12:10.666998Z", "url": "https://files.pythonhosted.org/packages/7e/69/de6b9612c4d8ded14b98d9fff957be2e3121edd6d94e0f8d1a12199f30c4/stackprinter-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "888f5368db87780bad9517dff31ce1c6", "sha256": "6faebbc1898351b58ea2cf4341be379f2085428953a203f6ff155181a15cd4fd"}, "downloads": -1, "filename": "stackprinter-0.2.1.tar.gz", "has_sig": false, "md5_digest": "888f5368db87780bad9517dff31ce1c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 24686, "upload_time": "2019-05-18T12:12:13", "upload_time_iso_8601": "2019-05-18T12:12:13.091017Z", "url": "https://files.pythonhosted.org/packages/1b/ab/65792bbd83d43ea829f3566664c95c4f108ff820c709075621a7aa4b7aa7/stackprinter-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "5746249932835b767bc81d3abcda8311", "sha256": "2398cdb54b3d9edfffed9518cb83d0af8ef43f62c34c792e493a09f2be2b1612"}, "downloads": -1, "filename": "stackprinter-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5746249932835b767bc81d3abcda8311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27042, "upload_time": "2019-05-18T17:09:56", "upload_time_iso_8601": "2019-05-18T17:09:56.301382Z", "url": "https://files.pythonhosted.org/packages/63/78/5eebf787ab91820f248717154de99186195517cd1726ece990a593a1915b/stackprinter-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07407c6da2053bc06b86c131e6a81fca", "sha256": "94c4de205496177123e08c61df0caca9f034ae6dd820aa2885e1ab673da014dd"}, "downloads": -1, "filename": "stackprinter-0.2.2.tar.gz", "has_sig": false, "md5_digest": "07407c6da2053bc06b86c131e6a81fca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 25368, "upload_time": "2019-05-18T17:09:58", "upload_time_iso_8601": "2019-05-18T17:09:58.411660Z", "url": "https://files.pythonhosted.org/packages/de/23/c91d2ba566beaafa71dcece05d9df365a6f7991d064140dbf26808cdadf4/stackprinter-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c635ee8b023b39f01184654ea984244e", "sha256": "a21590e1c8fc4aad1e97e89df2bcf86dcaf55f47b1bbb4dfd209361d28fd9d68"}, "downloads": -1, "filename": "stackprinter-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c635ee8b023b39f01184654ea984244e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27218, "upload_time": "2019-05-29T12:40:47", "upload_time_iso_8601": "2019-05-29T12:40:47.484418Z", "url": "https://files.pythonhosted.org/packages/3e/35/996a248820825e1081267d17ea1ca2d089e4f3bbe509c91e8503437c1260/stackprinter-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87c201f75705dfbdc5cfb01ee4103ee2", "sha256": "8d050d86f98d1a054da125733c998fed6020c1e078628d616c75701496ebd0b8"}, "downloads": -1, "filename": "stackprinter-0.2.3.tar.gz", "has_sig": false, "md5_digest": "87c201f75705dfbdc5cfb01ee4103ee2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 25460, "upload_time": "2019-05-29T12:40:49", "upload_time_iso_8601": "2019-05-29T12:40:49.536023Z", "url": "https://files.pythonhosted.org/packages/a9/78/ea47d14a449c0a7ec7d2437551f76e28bf7d31c42407aadbe182d16e77e8/stackprinter-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c635ee8b023b39f01184654ea984244e", "sha256": "a21590e1c8fc4aad1e97e89df2bcf86dcaf55f47b1bbb4dfd209361d28fd9d68"}, "downloads": -1, "filename": "stackprinter-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c635ee8b023b39f01184654ea984244e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27218, "upload_time": "2019-05-29T12:40:47", "upload_time_iso_8601": "2019-05-29T12:40:47.484418Z", "url": "https://files.pythonhosted.org/packages/3e/35/996a248820825e1081267d17ea1ca2d089e4f3bbe509c91e8503437c1260/stackprinter-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87c201f75705dfbdc5cfb01ee4103ee2", "sha256": "8d050d86f98d1a054da125733c998fed6020c1e078628d616c75701496ebd0b8"}, "downloads": -1, "filename": "stackprinter-0.2.3.tar.gz", "has_sig": false, "md5_digest": "87c201f75705dfbdc5cfb01ee4103ee2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 25460, "upload_time": "2019-05-29T12:40:49", "upload_time_iso_8601": "2019-05-29T12:40:49.536023Z", "url": "https://files.pythonhosted.org/packages/a9/78/ea47d14a449c0a7ec7d2437551f76e28bf7d31c42407aadbe182d16e77e8/stackprinter-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:49 2020"}