{"info": {"author": "Th\u00e9o (Lattay) Cavignac", "author_email": "theo.cavignac@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Goal\nProtex aims at providing a flexible, extensible and interfaced way to remove\nTeX macros from a TeX/LaTeX document while keeping the mapping of position from\ncleaned text to source. This should make it easier to apply different language\ncheckers to the plain text and convert the plain text position to source\npositions.\nWhen possible the resulting file should also be a reasonably readable text file\n(no big blanks, no strange holes...).\n\n# Non-goal\n\nThis project won't try to parse TeX in a complex way. The cleaning has to be\nextensible, but nor recursive, neither Turing complete as TeX is itself.\n\n# Principle\n\nA command prototype set is first built from the default *commands.json*,\nupdated by the user *~/.commands.json* (if it exists) and then all the\n*commands.json* files found in the file tree from root to the current\ndirectory.\n\nA command prototype tell the parser how many arguments at maximum take the\ncommand and how to use them. There are four sections in *commands.json* files.\nThe three below consist in a list of special prototype:\n* `print_name`: the command take no argument and is replace by its name (ex: `\\phi`, `\\sum`)\n* `print_one`: the command take one argument and print it unchanged\n* `discard`: the command take up to 100 arguments and print nothing\nThe fourth section is `other` and have a mapping as value. The\nmapping is of the form `{<command_name>: [<# max args>, <template>]}`.\nThe template is a string where everything will be printed as is but:\n\n* `%0` will be replace with the command name\n* `%1` will be replaced with the first argument (and so on for `%2`, `%3` etc without limit)\n* `%%` will be replaced with a raw `%`\n* `%` followed by anything else will not be replaced\n\nWhen parsing the TeX source, the argument collection end as soon as one of\nthose conditions is fulfilled:\n\n* the max number of arguments have been reached\n* the next token is a blank\n* the next token is a \"word\" of more than one letter (a word a sequence of\n  contiguous everything that is neither whitespace nor a special thing in TeX\n  (comments, commands, curly brackets, square bracket), be carefull,\n  punctuation like \".\" is a valid one letter word that can be the last argument\n  of a command)\n* the last argument was a non bracketed one letter \"word\"\n\nThose rules can seem a bit convoluted but if you have a valid TeX document and\nvalid command prototypes, the result should be what you expect.\n\n# Installation\n\nFrom source: in the folder of this README run `pip install .` in a terminal.\nWith pip directly: run `pip install -U protex`\n\n# Usage\n\nSee the command line help by running `protex` or `python -m protex`.\n\n# Notes\n\nThe requirements.txt is only for development and test, not for normal usage.\nThere are no dependencies at all.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "protex", "package_url": "https://pypi.org/project/protex/", "platform": "", "project_url": "https://pypi.org/project/protex/", "project_urls": null, "release_url": "https://pypi.org/project/protex/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Clean Latex sources without loosing track of positions", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Goal</h1>\n<p>Protex aims at providing a flexible, extensible and interfaced way to remove\nTeX macros from a TeX/LaTeX document while keeping the mapping of position from\ncleaned text to source. This should make it easier to apply different language\ncheckers to the plain text and convert the plain text position to source\npositions.\nWhen possible the resulting file should also be a reasonably readable text file\n(no big blanks, no strange holes...).</p>\n<h1>Non-goal</h1>\n<p>This project won't try to parse TeX in a complex way. The cleaning has to be\nextensible, but nor recursive, neither Turing complete as TeX is itself.</p>\n<h1>Principle</h1>\n<p>A command prototype set is first built from the default <em>commands.json</em>,\nupdated by the user <em>~/.commands.json</em> (if it exists) and then all the\n<em>commands.json</em> files found in the file tree from root to the current\ndirectory.</p>\n<p>A command prototype tell the parser how many arguments at maximum take the\ncommand and how to use them. There are four sections in <em>commands.json</em> files.\nThe three below consist in a list of special prototype:</p>\n<ul>\n<li>\n<p><code>print_name</code>: the command take no argument and is replace by its name (ex: <code>\\phi</code>, <code>\\sum</code>)</p>\n</li>\n<li>\n<p><code>print_one</code>: the command take one argument and print it unchanged</p>\n</li>\n<li>\n<p><code>discard</code>: the command take up to 100 arguments and print nothing\nThe fourth section is <code>other</code> and have a mapping as value. The\nmapping is of the form <code>{&lt;command_name&gt;: [&lt;# max args&gt;, &lt;template&gt;]}</code>.\nThe template is a string where everything will be printed as is but:</p>\n</li>\n<li>\n<p><code>%0</code> will be replace with the command name</p>\n</li>\n<li>\n<p><code>%1</code> will be replaced with the first argument (and so on for <code>%2</code>, <code>%3</code> etc without limit)</p>\n</li>\n<li>\n<p><code>%%</code> will be replaced with a raw <code>%</code></p>\n</li>\n<li>\n<p><code>%</code> followed by anything else will not be replaced</p>\n</li>\n</ul>\n<p>When parsing the TeX source, the argument collection end as soon as one of\nthose conditions is fulfilled:</p>\n<ul>\n<li>the max number of arguments have been reached</li>\n<li>the next token is a blank</li>\n<li>the next token is a \"word\" of more than one letter (a word a sequence of\ncontiguous everything that is neither whitespace nor a special thing in TeX\n(comments, commands, curly brackets, square bracket), be carefull,\npunctuation like \".\" is a valid one letter word that can be the last argument\nof a command)</li>\n<li>the last argument was a non bracketed one letter \"word\"</li>\n</ul>\n<p>Those rules can seem a bit convoluted but if you have a valid TeX document and\nvalid command prototypes, the result should be what you expect.</p>\n<h1>Installation</h1>\n<p>From source: in the folder of this README run <code>pip install .</code> in a terminal.\nWith pip directly: run <code>pip install -U protex</code></p>\n<h1>Usage</h1>\n<p>See the command line help by running <code>protex</code> or <code>python -m protex</code>.</p>\n<h1>Notes</h1>\n<p>The requirements.txt is only for development and test, not for normal usage.\nThere are no dependencies at all.</p>\n\n          </div>"}, "last_serial": 5437820, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fee9185d20a4554be5c19ec898f5766d", "sha256": "635377d541560b44434f666be949d66d6c6f3e41e3e2a5cb60a08349d48d1e13"}, "downloads": -1, "filename": "protex-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fee9185d20a4554be5c19ec898f5766d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13640, "upload_time": "2019-06-23T16:59:19", "upload_time_iso_8601": "2019-06-23T16:59:19.630876Z", "url": "https://files.pythonhosted.org/packages/ea/e1/2cf419bde2978b6cb7bb25f154e8d4f717397284c02b6499259f12acbd97/protex-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d5bb6136237f88a949832c82bc14fc6", "sha256": "5fa627e5091f20d70072a18c0f3271c318e33d20b1e1d4d3099256bcddf46539"}, "downloads": -1, "filename": "protex-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0d5bb6136237f88a949832c82bc14fc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12472, "upload_time": "2019-06-23T16:59:22", "upload_time_iso_8601": "2019-06-23T16:59:22.008231Z", "url": "https://files.pythonhosted.org/packages/a4/4d/0582836be6a19d0dce97c7d129308643615e57e4b695824e3cf25926eece/protex-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fee9185d20a4554be5c19ec898f5766d", "sha256": "635377d541560b44434f666be949d66d6c6f3e41e3e2a5cb60a08349d48d1e13"}, "downloads": -1, "filename": "protex-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fee9185d20a4554be5c19ec898f5766d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13640, "upload_time": "2019-06-23T16:59:19", "upload_time_iso_8601": "2019-06-23T16:59:19.630876Z", "url": "https://files.pythonhosted.org/packages/ea/e1/2cf419bde2978b6cb7bb25f154e8d4f717397284c02b6499259f12acbd97/protex-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d5bb6136237f88a949832c82bc14fc6", "sha256": "5fa627e5091f20d70072a18c0f3271c318e33d20b1e1d4d3099256bcddf46539"}, "downloads": -1, "filename": "protex-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0d5bb6136237f88a949832c82bc14fc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12472, "upload_time": "2019-06-23T16:59:22", "upload_time_iso_8601": "2019-06-23T16:59:22.008231Z", "url": "https://files.pythonhosted.org/packages/a4/4d/0582836be6a19d0dce97c7d129308643615e57e4b695824e3cf25926eece/protex-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:38 2020"}