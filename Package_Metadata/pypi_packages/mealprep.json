{"info": {"author": "luhuayue", "author_email": "luhuayueapp@163.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "mealprep\n================\n\n![build mealprep\npackage](https://github.com/UBC-MDS/mealprep/workflows/build%20mealprep%20package/badge.svg)\n![Release](https://github.com/UBC-MDS/mealprep/workflows/Release/badge.svg)\n[![codecov](https://codecov.io/gh/UBC-MDS/mealprep/branch/master/graph/badge.svg)](https://codecov.io/gh/UBC-MDS/mealprep)\n[![Documentation\nStatus](https://readthedocs.org/projects/mealprep/badge/?version=latest)](https://mealprep.readthedocs.io/en/latest/?badge=latest)\n\nMealprep offers a toolkit, made with care, to help users save time in\nthe data preprocessing kitchen.\n\n## Overview\n\nRecognizing that the preparation step of a data science project often\nrequires the most time and effort, `mealprep` aims to help data science\nchefs of all specialties master their recipes of analysis. This package\ntackles pesky tasks such as classifying columns as categorical or\nnumeric ingredients, straining NA values and outliers, and automating a\npreprocessing recipe pipeline.\n\n## Functions\n\n`find_fruits_veg()`: This function will drop rows with NAs and find the\nindices of columns with all numeric values or categorical values based\non the specification.\n\n`find_missing_ingredients()`: For each column with missing values, this\nfunction will create a reference list of row indices, sum the number,\nand calculate the proportion of missing values.\n\n`find_bad_apples()`: This function uses a univariate approach to outlier\ndetection. For each column with outliers (values that are 2 or more\nstandard deviations from the mean), this function will create a\nreference list of row indices with outliers, and the total number of\noutliers in that column.\n\n`make_recipe()`: This function is used to quickly apply the following\ncommon data preprocessing techniques with one line of code: split the\ndataset into a training set and testing set, apply standard scaling to\nnumeric features, apply one-hot-encoding to categorical features, fit\nand transform training data, and fit testing data.\n\n## Mealprep and Python\u2019s Ecosystem\n\n**mealprep** complements many of the existing packages in the Python\necosystem around the theme of data preprocessing. When preparing a\ndataframe for a machine learning preprocessing pipeline, it is time\nconsuming to manually note which columns are categorical and numerical,\nparticularly for large datasets. The\n[pandas](https://pypi.org/project/pandas/) function `df.select_dtypes()`\ncomes close by allowing users to select columns with data corresponding\nto specific data types however the output of this function is a pandas\ndataframe. `find_fruits_veg()` aims to fill this void by producing a\nlist of columns corresponding to the categorical and numerical groups.\n\nIn terms of missing values, [pandas](https://pypi.org/project/pandas/)\npackage\u2019s `isna()` function converts all elements of a pandas.dataframe\nor pandas.series to boolean values representing if they are missing\nvalues. The package\n[autoimpute](https://autoimpute.readthedocs.io/en/latest/) provides a\nsuite of tools to fill missing values in a dataset through multiple\nunivariate, multivariate and time series methods. The gap between these\npackages is that neither provides you a summary of the missing values\nincluding the list of indices where they occur.\n`find_missing_ingredients()` augments these tools by providing a summary\ndataframe detailing which columns have missing values, as well as their\ncount and proportion.\n\nThe [pandas](https://pypi.org/project/pandas/) package\u2019s `describe()`\nfunction is a staple in the data wrangling process because it returns\nseveral summary statistics for each numeric column in a dataframe, such\nas the mean, standard deviation, minimum, and maximum. Viewing these\nstatistics together is helpful for detecting outliers. However, the\noutput of this function does not tell you which rows of data these\noutliers are found in, or how many outliers are present in the\ndataframe. Packages like the\n[PyOD](https://pyod.readthedocs.io/en/latest/) toolkit and other\nfunctions that use clustering methods consider all variables at once to\ndetect outliers for multivariate data.\n[PyOD](https://pyod.readthedocs.io/en/latest/) provides over 20\nalgorithms to select from in detecting these outliers, which is handy\nfor large multivariate datasets where you know you want to consider all\nfeatures in detecting outliers, but can be a bit extreme for initial\ndata exploration. The **mealprep** `find_bad_apples()` function lives\nhappily in the space between [pandas](https://pypi.org/project/pandas/)\nand [PyOD](https://pyod.readthedocs.io/en/latest/)-type solutions for\noutlier detection, where it provides more information than the\n[pandas](https://pypi.org/project/pandas/) `describe()` function to\npoint out datapoints which need further investigation, but does not\nconsider all variables at once like the\n[PyOD](https://pyod.readthedocs.io/en/latest/)-type functions do.\n\nLastly, there are many great tools in the data science ecosystem for\npre-processing data such as [scikit-learn\npreprocessing](https://scikit-learn.org/stable/modules/preprocessing.html)\nin Python. However, you may find yourself frequently writing the same\nlengthy code for common preprocessing tasks (e.g scale numeric features\nand one hot encode categorical features). `preprocess_recipe()` provides\na *shortcut function* to apply your favourite recipes quickly to\npreprocess data in one line of code.\n\n## Installation:\n\n    pip install -i https://test.pypi.org/simple/ mealprep\n\n## Examples\n\n### `find_fruits_veg()`\n\nFind the column indices for either numerical or categorical variables in\nyour dataframe with the `find_fruits_veg()` function. The example below\nshows how to use find\\_fruits\\_veg() to find the index of the\ncategorical column in a toy dataframe.\n\nFirst, load the required packages.\n\n``` python\nfrom mealprep.mealprep import find_fruits_veg\nimport pandas as pd\n```\n\nIf you don\u2019t already have a dataframe to work with, run this code to set\nup a toy dataframe (`df`) for testing.\n\n``` python\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['a', 'b']})\ndf\n```\n\n    ##    col1 col2\n    ## 0     1    a\n    ## 1     2    b\n\nThen, apply the `find_fruits_veg()` function to the dataframe.\n\n``` python\nfind_fruits_veg(df, type_of_out = 'categ')\n```\n\n    ## [1]\n\n### `find_missing_ingredients()`\n\nBefore launching into a new data analysis, running the function\n`find_missing_ingredients()` on a dataframe of interest will produce a\nreport on each column with missing values.\n\nFirst, load the required packages\n\n``` python\nfrom mealprep.mealprep import find_missing_ingredients\nimport pandas as pd\nimport numpy as np\n```\n\nIf you don\u2019t already have a dataframe to work with, run this code to set\nup a toy dataframe (`df`) for testing.\n\n``` python\ntest1= {'column1': ['a', 'b', 'c', 'd'],\n       'column2': [1, 2, np.NaN, 3],\n       'column3': [np.NaN] * 4}\n   \ndf = pd.DataFrame(test1)\ndf\n```\n\n    ##   column1  column2  column3\n    ## 0       a      1.0      NaN\n    ## 1       b      2.0      NaN\n    ## 2       c      NaN      NaN\n    ## 3       d      3.0      NaN\n\nThen, apply the `find_missing_ingredients()` function to the dataframe.\n\n``` python\nfind_missing_ingredients(df)\n```\n\n    ##   Column name  NaN count NaN proportion   NaN indices\n    ## 0     column2          1          25.0%           [2]\n    ## 1     column3          4         100.0%  [0, 1, 2, 3]\n\n### `find_bad_apples()`\n\nFind the outliers in your data by applying the `find_bad_apples()`\nfunction to your dataframe.\n\nFirst, load the required packages.\n\n``` python\nfrom mealprep.mealprep import find_bad_apples\nimport pandas as pd\n```\n\nIf you don\u2019t already have a dataframe to work with, run this code to set\nup a toy dataframe (`df`) for testing.\n\n``` python\ndf = pd.DataFrame({'A' : [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n                             1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n                    'B' : [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-100,\n                             1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,100],\n                    'C' : [1,1,1,1,1,19,1,1,1,1,1,1,1,1,19,1,1,1,1,\n                             1,1,1,1,1,1,1,19,1,1,1,1,1,1,1,1]})\ndf\n```\n\n    ##     A    B   C\n    ## 0   1    1   1\n    ## 1   1    1   1\n    ## 2   1    1   1\n    ## 3   1    1   1\n    ## 4   1    1   1\n    ## 5   1    1  19\n    ## 6   1    1   1\n    ## 7   1    1   1\n    ## 8   1    1   1\n    ## 9   1    1   1\n    ## 10  1    1   1\n    ## 11  1    1   1\n    ## 12  1    1   1\n    ## 13  1    1   1\n    ## 14  1    1  19\n    ## 15  1    1   1\n    ## 16  1    1   1\n    ## 17  1 -100   1\n    ## 18  1    1   1\n    ## 19  1    1   1\n    ## 20  1    1   1\n    ## 21  1    1   1\n    ## 22  1    1   1\n    ## 23  1    1   1\n    ## 24  1    1   1\n    ## 25  1    1   1\n    ## 26  1    1  19\n    ## 27  1    1   1\n    ## 28  1    1   1\n    ## 29  1    1   1\n    ## 30  1    1   1\n    ## 31  1    1   1\n    ## 32  1    1   1\n    ## 33  1    1   1\n    ## 34  1  100   1\n\nThen, apply the `find_bad_apples()` function to the dataframe.\n\n``` python\nfind_bad_apples(df)\n```\n\n    ##   Variable      Indices Total Outliers\n    ## 0        B     [17, 34]              2\n    ## 1        C  [5, 14, 26]              3\n\n### `make_recipe()`\n\nDo you find yourself constantly applying the same data preprocessing\ntechniques time and time again? `make_recipe` can help by applying your\nfavourite preprocessing recipes in only a few lines of code.\n\nBelow `make_recipe` applies the following common recipe in only one line\nof code:\n\n1.  Split data into training, validation, and testing\n2.  Standardise and scale numeric features\n3.  One hot encode categorical features\n\nFirst, load the required packages.\n\n``` python\nfrom mealprep.mealprep import make_recipe\nimport pandas as pd\nimport numpy as np\nfrom vega_datasets import data\n```\n\nIf you don\u2019t already have a dataframe to work with, run this code to\nload the classic `mtcars` dataset for testing.\n\n``` python\ndf = pd.read_json(data.cars.url).drop(columns=[\"Year\"])\nX = df.drop(columns=[\"Name\"])\ny = df[[\"Name\"]]\n    \ndf.info()\n```\n\n    ## <class 'pandas.core.frame.DataFrame'>\n    ## RangeIndex: 406 entries, 0 to 405\n    ## Data columns (total 8 columns):\n    ##  #   Column            Non-Null Count  Dtype  \n    ## ---  ------            --------------  -----  \n    ##  0   Name              406 non-null    object \n    ##  1   Miles_per_Gallon  398 non-null    float64\n    ##  2   Cylinders         406 non-null    int64  \n    ##  3   Displacement      406 non-null    float64\n    ##  4   Horsepower        400 non-null    float64\n    ##  5   Weight_in_lbs     406 non-null    int64  \n    ##  6   Acceleration      406 non-null    float64\n    ##  7   Origin            406 non-null    object \n    ## dtypes: float64(4), int64(2), object(2)\n    ## memory usage: 25.5+ KB\n\nThen, use `make_recipe` to quickly apply split your data and apply your\nfavourite preprocessing techniques\\!\n\n``` python\nX_train, X_valid, X_test, y_train, y_valid, y_test = make_recipe(\n    X=X, y=y, recipe=\"ohe_and_standard_scaler\", \n    splits_to_return=\"train_test\")\n\nX_train.head()\n```\n\n    ##    Miles_per_Gallon  Cylinders  Displacement  ...  x0_Europe  x0_Japan  x0_USA\n    ## 0          0.564509  -0.846151     -0.910090  ...        0.0       0.0     1.0\n    ## 1          0.883582  -0.846151     -0.910090  ...        0.0       0.0     1.0\n    ## 2          1.126078  -0.846151     -0.815709  ...        0.0       1.0     0.0\n    ## 3         -1.094674   0.308177      0.524498  ...        0.0       0.0     1.0\n    ## 4          0.794242  -0.846151     -0.995032  ...        1.0       0.0     0.0\n    ## \n    ## [5 rows x 9 columns]\n\n### Documentation\n\nThe official documentation is hosted on Read the Docs:\n<https://mealprep.readthedocs.io/en/latest/>\n\n### Credits\n\nThis package was created with Cookiecutter and the\nUBC-MDS/cookiecutter-ubc-mds project template, modified from the\n[pyOpenSci/cookiecutter-pyopensci](https://github.com/pyOpenSci/cookiecutter-pyopensci)\nproject template and the\n[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage).\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/UBC-MDS/mealprep", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mealprep", "package_url": "https://pypi.org/project/mealprep/", "platform": "", "project_url": "https://pypi.org/project/mealprep/", "project_urls": {"Documentation": "https://mealprep.readthedocs.io", "Homepage": "https://github.com/UBC-MDS/mealprep", "Repository": "https://github.com/UBC-MDS/mealprep"}, "release_url": "https://pypi.org/project/mealprep/1.0.15/", "requires_dist": ["pandas (>=1.0.1,<2.0.0)", "vega_datasets (>=0.8.0,<0.9.0)", "sklearn (>=0.0,<0.1)", "flake8 (>=3.7.9,<4.0.0)", "codecov (>=2.0.16,<3.0.0)", "python-semantic-release (>=4.10.0,<5.0.0)", "sphinxcontrib-napoleon (>=0.7,<0.8)"], "requires_python": ">=3.6.1,<4.0.0", "summary": "Python package that ease the pain in pre-processing like outlier finding, numerical/categorical data and etc.", "version": "1.0.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mealprep</h1>\n<p><img alt=\"build mealprep package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca5ced16343584874c52a8d75b4c3142ae989cb5/68747470733a2f2f6769746875622e636f6d2f5542432d4d44532f6d65616c707265702f776f726b666c6f77732f6275696c642532306d65616c707265702532307061636b6167652f62616467652e737667\">\n<img alt=\"Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1579b1354c9cf46c6646cce5862fb778a195f858/68747470733a2f2f6769746875622e636f6d2f5542432d4d44532f6d65616c707265702f776f726b666c6f77732f52656c656173652f62616467652e737667\">\n<a href=\"https://codecov.io/gh/UBC-MDS/mealprep\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da1de2978ca5239e4086fa8ccb9c50089570cef1/68747470733a2f2f636f6465636f762e696f2f67682f5542432d4d44532f6d65616c707265702f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://mealprep.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3998032838a1df678419b039a0163f67b5d2e9cd/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d65616c707265702f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>Mealprep offers a toolkit, made with care, to help users save time in\nthe data preprocessing kitchen.</p>\n<h2>Overview</h2>\n<p>Recognizing that the preparation step of a data science project often\nrequires the most time and effort, <code>mealprep</code> aims to help data science\nchefs of all specialties master their recipes of analysis. This package\ntackles pesky tasks such as classifying columns as categorical or\nnumeric ingredients, straining NA values and outliers, and automating a\npreprocessing recipe pipeline.</p>\n<h2>Functions</h2>\n<p><code>find_fruits_veg()</code>: This function will drop rows with NAs and find the\nindices of columns with all numeric values or categorical values based\non the specification.</p>\n<p><code>find_missing_ingredients()</code>: For each column with missing values, this\nfunction will create a reference list of row indices, sum the number,\nand calculate the proportion of missing values.</p>\n<p><code>find_bad_apples()</code>: This function uses a univariate approach to outlier\ndetection. For each column with outliers (values that are 2 or more\nstandard deviations from the mean), this function will create a\nreference list of row indices with outliers, and the total number of\noutliers in that column.</p>\n<p><code>make_recipe()</code>: This function is used to quickly apply the following\ncommon data preprocessing techniques with one line of code: split the\ndataset into a training set and testing set, apply standard scaling to\nnumeric features, apply one-hot-encoding to categorical features, fit\nand transform training data, and fit testing data.</p>\n<h2>Mealprep and Python\u2019s Ecosystem</h2>\n<p><strong>mealprep</strong> complements many of the existing packages in the Python\necosystem around the theme of data preprocessing. When preparing a\ndataframe for a machine learning preprocessing pipeline, it is time\nconsuming to manually note which columns are categorical and numerical,\nparticularly for large datasets. The\n<a href=\"https://pypi.org/project/pandas/\" rel=\"nofollow\">pandas</a> function <code>df.select_dtypes()</code>\ncomes close by allowing users to select columns with data corresponding\nto specific data types however the output of this function is a pandas\ndataframe. <code>find_fruits_veg()</code> aims to fill this void by producing a\nlist of columns corresponding to the categorical and numerical groups.</p>\n<p>In terms of missing values, <a href=\"https://pypi.org/project/pandas/\" rel=\"nofollow\">pandas</a>\npackage\u2019s <code>isna()</code> function converts all elements of a pandas.dataframe\nor pandas.series to boolean values representing if they are missing\nvalues. The package\n<a href=\"https://autoimpute.readthedocs.io/en/latest/\" rel=\"nofollow\">autoimpute</a> provides a\nsuite of tools to fill missing values in a dataset through multiple\nunivariate, multivariate and time series methods. The gap between these\npackages is that neither provides you a summary of the missing values\nincluding the list of indices where they occur.\n<code>find_missing_ingredients()</code> augments these tools by providing a summary\ndataframe detailing which columns have missing values, as well as their\ncount and proportion.</p>\n<p>The <a href=\"https://pypi.org/project/pandas/\" rel=\"nofollow\">pandas</a> package\u2019s <code>describe()</code>\nfunction is a staple in the data wrangling process because it returns\nseveral summary statistics for each numeric column in a dataframe, such\nas the mean, standard deviation, minimum, and maximum. Viewing these\nstatistics together is helpful for detecting outliers. However, the\noutput of this function does not tell you which rows of data these\noutliers are found in, or how many outliers are present in the\ndataframe. Packages like the\n<a href=\"https://pyod.readthedocs.io/en/latest/\" rel=\"nofollow\">PyOD</a> toolkit and other\nfunctions that use clustering methods consider all variables at once to\ndetect outliers for multivariate data.\n<a href=\"https://pyod.readthedocs.io/en/latest/\" rel=\"nofollow\">PyOD</a> provides over 20\nalgorithms to select from in detecting these outliers, which is handy\nfor large multivariate datasets where you know you want to consider all\nfeatures in detecting outliers, but can be a bit extreme for initial\ndata exploration. The <strong>mealprep</strong> <code>find_bad_apples()</code> function lives\nhappily in the space between <a href=\"https://pypi.org/project/pandas/\" rel=\"nofollow\">pandas</a>\nand <a href=\"https://pyod.readthedocs.io/en/latest/\" rel=\"nofollow\">PyOD</a>-type solutions for\noutlier detection, where it provides more information than the\n<a href=\"https://pypi.org/project/pandas/\" rel=\"nofollow\">pandas</a> <code>describe()</code> function to\npoint out datapoints which need further investigation, but does not\nconsider all variables at once like the\n<a href=\"https://pyod.readthedocs.io/en/latest/\" rel=\"nofollow\">PyOD</a>-type functions do.</p>\n<p>Lastly, there are many great tools in the data science ecosystem for\npre-processing data such as <a href=\"https://scikit-learn.org/stable/modules/preprocessing.html\" rel=\"nofollow\">scikit-learn\npreprocessing</a>\nin Python. However, you may find yourself frequently writing the same\nlengthy code for common preprocessing tasks (e.g scale numeric features\nand one hot encode categorical features). <code>preprocess_recipe()</code> provides\na <em>shortcut function</em> to apply your favourite recipes quickly to\npreprocess data in one line of code.</p>\n<h2>Installation:</h2>\n<pre><code>pip install -i https://test.pypi.org/simple/ mealprep\n</code></pre>\n<h2>Examples</h2>\n<h3><code>find_fruits_veg()</code></h3>\n<p>Find the column indices for either numerical or categorical variables in\nyour dataframe with the <code>find_fruits_veg()</code> function. The example below\nshows how to use find_fruits_veg() to find the index of the\ncategorical column in a toy dataframe.</p>\n<p>First, load the required packages.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mealprep.mealprep</span> <span class=\"kn\">import</span> <span class=\"n\">find_fruits_veg</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n</pre>\n<p>If you don\u2019t already have a dataframe to work with, run this code to set\nup a toy dataframe (<code>df</code>) for testing.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">'col1'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">'col2'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">]})</span>\n<span class=\"n\">df</span>\n</pre>\n<pre><code>##    col1 col2\n## 0     1    a\n## 1     2    b\n</code></pre>\n<p>Then, apply the <code>find_fruits_veg()</code> function to the dataframe.</p>\n<pre><span class=\"n\">find_fruits_veg</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">type_of_out</span> <span class=\"o\">=</span> <span class=\"s1\">'categ'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>## [1]\n</code></pre>\n<h3><code>find_missing_ingredients()</code></h3>\n<p>Before launching into a new data analysis, running the function\n<code>find_missing_ingredients()</code> on a dataframe of interest will produce a\nreport on each column with missing values.</p>\n<p>First, load the required packages</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mealprep.mealprep</span> <span class=\"kn\">import</span> <span class=\"n\">find_missing_ingredients</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</pre>\n<p>If you don\u2019t already have a dataframe to work with, run this code to set\nup a toy dataframe (<code>df</code>) for testing.</p>\n<pre><span class=\"n\">test1</span><span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'column1'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">],</span>\n       <span class=\"s1\">'column2'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">NaN</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n       <span class=\"s1\">'column3'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">NaN</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n   \n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">test1</span><span class=\"p\">)</span>\n<span class=\"n\">df</span>\n</pre>\n<pre><code>##   column1  column2  column3\n## 0       a      1.0      NaN\n## 1       b      2.0      NaN\n## 2       c      NaN      NaN\n## 3       d      3.0      NaN\n</code></pre>\n<p>Then, apply the <code>find_missing_ingredients()</code> function to the dataframe.</p>\n<pre><span class=\"n\">find_missing_ingredients</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<pre><code>##   Column name  NaN count NaN proportion   NaN indices\n## 0     column2          1          25.0%           [2]\n## 1     column3          4         100.0%  [0, 1, 2, 3]\n</code></pre>\n<h3><code>find_bad_apples()</code></h3>\n<p>Find the outliers in your data by applying the <code>find_bad_apples()</code>\nfunction to your dataframe.</p>\n<p>First, load the required packages.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mealprep.mealprep</span> <span class=\"kn\">import</span> <span class=\"n\">find_bad_apples</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n</pre>\n<p>If you don\u2019t already have a dataframe to work with, run this code to set\nup a toy dataframe (<code>df</code>) for testing.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">'A'</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                             <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                    <span class=\"s1\">'B'</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n                             <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">],</span>\n                    <span class=\"s1\">'C'</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                             <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]})</span>\n<span class=\"n\">df</span>\n</pre>\n<pre><code>##     A    B   C\n## 0   1    1   1\n## 1   1    1   1\n## 2   1    1   1\n## 3   1    1   1\n## 4   1    1   1\n## 5   1    1  19\n## 6   1    1   1\n## 7   1    1   1\n## 8   1    1   1\n## 9   1    1   1\n## 10  1    1   1\n## 11  1    1   1\n## 12  1    1   1\n## 13  1    1   1\n## 14  1    1  19\n## 15  1    1   1\n## 16  1    1   1\n## 17  1 -100   1\n## 18  1    1   1\n## 19  1    1   1\n## 20  1    1   1\n## 21  1    1   1\n## 22  1    1   1\n## 23  1    1   1\n## 24  1    1   1\n## 25  1    1   1\n## 26  1    1  19\n## 27  1    1   1\n## 28  1    1   1\n## 29  1    1   1\n## 30  1    1   1\n## 31  1    1   1\n## 32  1    1   1\n## 33  1    1   1\n## 34  1  100   1\n</code></pre>\n<p>Then, apply the <code>find_bad_apples()</code> function to the dataframe.</p>\n<pre><span class=\"n\">find_bad_apples</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<pre><code>##   Variable      Indices Total Outliers\n## 0        B     [17, 34]              2\n## 1        C  [5, 14, 26]              3\n</code></pre>\n<h3><code>make_recipe()</code></h3>\n<p>Do you find yourself constantly applying the same data preprocessing\ntechniques time and time again? <code>make_recipe</code> can help by applying your\nfavourite preprocessing recipes in only a few lines of code.</p>\n<p>Below <code>make_recipe</code> applies the following common recipe in only one line\nof code:</p>\n<ol>\n<li>Split data into training, validation, and testing</li>\n<li>Standardise and scale numeric features</li>\n<li>One hot encode categorical features</li>\n</ol>\n<p>First, load the required packages.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mealprep.mealprep</span> <span class=\"kn\">import</span> <span class=\"n\">make_recipe</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vega_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">data</span>\n</pre>\n<p>If you don\u2019t already have a dataframe to work with, run this code to\nload the classic <code>mtcars</code> dataset for testing.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_json</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">cars</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Year\"</span><span class=\"p\">])</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Name\"</span><span class=\"p\">])</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[[</span><span class=\"s2\">\"Name\"</span><span class=\"p\">]]</span>\n    \n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span>\n</pre>\n<pre><code>## &lt;class 'pandas.core.frame.DataFrame'&gt;\n## RangeIndex: 406 entries, 0 to 405\n## Data columns (total 8 columns):\n##  #   Column            Non-Null Count  Dtype  \n## ---  ------            --------------  -----  \n##  0   Name              406 non-null    object \n##  1   Miles_per_Gallon  398 non-null    float64\n##  2   Cylinders         406 non-null    int64  \n##  3   Displacement      406 non-null    float64\n##  4   Horsepower        400 non-null    float64\n##  5   Weight_in_lbs     406 non-null    int64  \n##  6   Acceleration      406 non-null    float64\n##  7   Origin            406 non-null    object \n## dtypes: float64(4), int64(2), object(2)\n## memory usage: 25.5+ KB\n</code></pre>\n<p>Then, use <code>make_recipe</code> to quickly apply split your data and apply your\nfavourite preprocessing techniques!</p>\n<pre><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_valid</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_valid</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">make_recipe</span><span class=\"p\">(</span>\n    <span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">recipe</span><span class=\"o\">=</span><span class=\"s2\">\"ohe_and_standard_scaler\"</span><span class=\"p\">,</span> \n    <span class=\"n\">splits_to_return</span><span class=\"o\">=</span><span class=\"s2\">\"train_test\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">X_train</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<pre><code>##    Miles_per_Gallon  Cylinders  Displacement  ...  x0_Europe  x0_Japan  x0_USA\n## 0          0.564509  -0.846151     -0.910090  ...        0.0       0.0     1.0\n## 1          0.883582  -0.846151     -0.910090  ...        0.0       0.0     1.0\n## 2          1.126078  -0.846151     -0.815709  ...        0.0       1.0     0.0\n## 3         -1.094674   0.308177      0.524498  ...        0.0       0.0     1.0\n## 4          0.794242  -0.846151     -0.995032  ...        1.0       0.0     0.0\n## \n## [5 rows x 9 columns]\n</code></pre>\n<h3>Documentation</h3>\n<p>The official documentation is hosted on Read the Docs:\n<a href=\"https://mealprep.readthedocs.io/en/latest/\" rel=\"nofollow\">https://mealprep.readthedocs.io/en/latest/</a></p>\n<h3>Credits</h3>\n<p>This package was created with Cookiecutter and the\nUBC-MDS/cookiecutter-ubc-mds project template, modified from the\n<a href=\"https://github.com/pyOpenSci/cookiecutter-pyopensci\" rel=\"nofollow\">pyOpenSci/cookiecutter-pyopensci</a>\nproject template and the\n<a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a>.</p>\n\n          </div>"}, "last_serial": 6889716, "releases": {"1.0.10": [{"comment_text": "", "digests": {"md5": "0e3218f1f9cba533ef47188f678ce870", "sha256": "a3c0fe4646e0a3099ee1ac377167be65127212f7d2999fe28d4a39caea39ae53"}, "downloads": -1, "filename": "mealprep-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "0e3218f1f9cba533ef47188f678ce870", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9442, "upload_time": "2020-03-14T05:33:51", "upload_time_iso_8601": "2020-03-14T05:33:51.157776Z", "url": "https://files.pythonhosted.org/packages/37/de/2f3c1db373a09579c3ca3d785208bf7617457890d70548b96f1fdefdc86e/mealprep-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "970341732972461ae7300465e09f55be", "sha256": "4b9820d6151e3a0ebdf722d490f21a6cc4f75717f51687c5386530856b797567"}, "downloads": -1, "filename": "mealprep-1.0.10.tar.gz", "has_sig": false, "md5_digest": "970341732972461ae7300465e09f55be", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 11682, "upload_time": "2020-03-14T05:33:52", "upload_time_iso_8601": "2020-03-14T05:33:52.550400Z", "url": "https://files.pythonhosted.org/packages/a9/93/ba51c6923a90a3403232547204bb966d2b0de82961a520801bfb0d649918/mealprep-1.0.10.tar.gz", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "e01a56ae42d7848c604d90235506c135", "sha256": "e66c7ae27eb167ab7539ce252feb02ffb224cfdf799b824a6e0eebe688d232bc"}, "downloads": -1, "filename": "mealprep-1.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "e01a56ae42d7848c604d90235506c135", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9425, "upload_time": "2020-03-16T22:58:19", "upload_time_iso_8601": "2020-03-16T22:58:19.634792Z", "url": "https://files.pythonhosted.org/packages/2c/fb/0ed6467a7102abb368e5c65af8dfefb4a0c7797c2b2ef7c5d9f515729b9c/mealprep-1.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7164350ccc0762a1512696e8b7706f26", "sha256": "1e850637d8fcc41e87e3b124cd88f1c6bba3c2c2e38400ec6273aba9a49bb390"}, "downloads": -1, "filename": "mealprep-1.0.11.tar.gz", "has_sig": false, "md5_digest": "7164350ccc0762a1512696e8b7706f26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 11137, "upload_time": "2020-03-16T22:58:20", "upload_time_iso_8601": "2020-03-16T22:58:20.987413Z", "url": "https://files.pythonhosted.org/packages/ce/ba/3d49e5e89f2bfb506b09b91bf1efdc56708f1b81a537626b14a698f36ee8/mealprep-1.0.11.tar.gz", "yanked": false}], "1.0.12": [{"comment_text": "", "digests": {"md5": "5200533dd441e44d63d777c2f6801a51", "sha256": "73533c2793b97e44db1fa620586b26c37f4ed7add08d78258f02da07a5518ddb"}, "downloads": -1, "filename": "mealprep-1.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "5200533dd441e44d63d777c2f6801a51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9500, "upload_time": "2020-03-25T21:09:10", "upload_time_iso_8601": "2020-03-25T21:09:10.210547Z", "url": "https://files.pythonhosted.org/packages/e0/db/b7a52f936a9a4043e7edba9cc0ff7788df06484ffe7c9bce7b4ea622ec24/mealprep-1.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6f63ea1d9911d56c8fd61cdebb0b0ba", "sha256": "4a14701c36f45b84ac0ffb65a0e26270fc2d6a228a78dce370f35db4044eee53"}, "downloads": -1, "filename": "mealprep-1.0.12.tar.gz", "has_sig": false, "md5_digest": "e6f63ea1d9911d56c8fd61cdebb0b0ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 11785, "upload_time": "2020-03-25T21:09:11", "upload_time_iso_8601": "2020-03-25T21:09:11.711060Z", "url": "https://files.pythonhosted.org/packages/2f/03/ae06ec7c724069415192fce5f7a23fff6f634f25b57377a204e2ce1fed57/mealprep-1.0.12.tar.gz", "yanked": false}], "1.0.13": [{"comment_text": "", "digests": {"md5": "cdcb19419169ea69faaff1eb4e617f70", "sha256": "5445225db5521ab7b665719d78ff006e3f1d6992b20e1192ece76d0a0f3eb108"}, "downloads": -1, "filename": "mealprep-1.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "cdcb19419169ea69faaff1eb4e617f70", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9798, "upload_time": "2020-03-26T03:07:02", "upload_time_iso_8601": "2020-03-26T03:07:02.640444Z", "url": "https://files.pythonhosted.org/packages/61/4e/e6c00ca925b2cb6837c69354ddd10550ba10e48fae4fde886ae3b03742b3/mealprep-1.0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a799a54e8f115d4c659bc0bd2cc94c0", "sha256": "ccc7ae73f7d993f6a39d4fe592602a15ac41054fa7f1117cc37eb157154a7462"}, "downloads": -1, "filename": "mealprep-1.0.13.tar.gz", "has_sig": false, "md5_digest": "9a799a54e8f115d4c659bc0bd2cc94c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 13537, "upload_time": "2020-03-26T03:07:04", "upload_time_iso_8601": "2020-03-26T03:07:04.133288Z", "url": "https://files.pythonhosted.org/packages/0f/78/3c812d6a5fa51c1c5a67aeaf28fde95044b9ef289db12b598cb7a05aa2b5/mealprep-1.0.13.tar.gz", "yanked": false}], "1.0.14": [{"comment_text": "", "digests": {"md5": "cb3e6cd9fb1aab2c0aa5c5f9c5a13a65", "sha256": "a32e5d7b4facfe92db9a693612c593002be5b1c1157b60b57ef73c68b72d06db"}, "downloads": -1, "filename": "mealprep-1.0.14-py3-none-any.whl", "has_sig": false, "md5_digest": "cb3e6cd9fb1aab2c0aa5c5f9c5a13a65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9790, "upload_time": "2020-03-26T17:09:53", "upload_time_iso_8601": "2020-03-26T17:09:53.347107Z", "url": "https://files.pythonhosted.org/packages/cc/f5/e8c5a306253696e57a1eb99aaa9b600395f61f2d975cfb36bcceb3a8f738/mealprep-1.0.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6383f91fd3e82cdf0960b76f2b06d34b", "sha256": "ee6650110d41bb3cd1c75bbf565781aeea1452c0c726d0848f35ad638126f117"}, "downloads": -1, "filename": "mealprep-1.0.14.tar.gz", "has_sig": false, "md5_digest": "6383f91fd3e82cdf0960b76f2b06d34b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 13521, "upload_time": "2020-03-26T17:09:54", "upload_time_iso_8601": "2020-03-26T17:09:54.709440Z", "url": "https://files.pythonhosted.org/packages/9b/ef/83c95384c701398ef67b6ba6740a4f6c56e262b51e2e40f48c062eefe4c4/mealprep-1.0.14.tar.gz", "yanked": false}], "1.0.15": [{"comment_text": "", "digests": {"md5": "f67dbbfb91e35db3360581dcf5dd7ff9", "sha256": "e71084c7a862297549c72c9dc28269e9a00af3045a2f6a5569d925f25cb4cdd7"}, "downloads": -1, "filename": "mealprep-1.0.15-py3-none-any.whl", "has_sig": false, "md5_digest": "f67dbbfb91e35db3360581dcf5dd7ff9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9791, "upload_time": "2020-03-26T17:16:59", "upload_time_iso_8601": "2020-03-26T17:16:59.592173Z", "url": "https://files.pythonhosted.org/packages/79/ba/933f6c7d9dd1b62207245b04459b3750bf3bfdcb8d6756602a96073ac42c/mealprep-1.0.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b518379185424e5bf1dd20b79b294e4", "sha256": "1acb481676edad42bc6bc1fecd62ccb8a9d56773bc4425e8817e893834a49800"}, "downloads": -1, "filename": "mealprep-1.0.15.tar.gz", "has_sig": false, "md5_digest": "9b518379185424e5bf1dd20b79b294e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 13521, "upload_time": "2020-03-26T17:17:00", "upload_time_iso_8601": "2020-03-26T17:17:00.782783Z", "url": "https://files.pythonhosted.org/packages/3b/44/dc4b849f013dc105bb074f8b06dd23d5b9cdee397e3830c41d6116fac4f4/mealprep-1.0.15.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f67dbbfb91e35db3360581dcf5dd7ff9", "sha256": "e71084c7a862297549c72c9dc28269e9a00af3045a2f6a5569d925f25cb4cdd7"}, "downloads": -1, "filename": "mealprep-1.0.15-py3-none-any.whl", "has_sig": false, "md5_digest": "f67dbbfb91e35db3360581dcf5dd7ff9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9791, "upload_time": "2020-03-26T17:16:59", "upload_time_iso_8601": "2020-03-26T17:16:59.592173Z", "url": "https://files.pythonhosted.org/packages/79/ba/933f6c7d9dd1b62207245b04459b3750bf3bfdcb8d6756602a96073ac42c/mealprep-1.0.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b518379185424e5bf1dd20b79b294e4", "sha256": "1acb481676edad42bc6bc1fecd62ccb8a9d56773bc4425e8817e893834a49800"}, "downloads": -1, "filename": "mealprep-1.0.15.tar.gz", "has_sig": false, "md5_digest": "9b518379185424e5bf1dd20b79b294e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 13521, "upload_time": "2020-03-26T17:17:00", "upload_time_iso_8601": "2020-03-26T17:17:00.782783Z", "url": "https://files.pythonhosted.org/packages/3b/44/dc4b849f013dc105bb074f8b06dd23d5b9cdee397e3830c41d6116fac4f4/mealprep-1.0.15.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:43 2020"}