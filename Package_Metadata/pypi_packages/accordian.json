{"info": {"author": "Joe Cross", "author_email": "joe.mcross@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://img.shields.io/travis/numberoverzero/accordian/master.svg?style=flat-square\n    :target: https://travis-ci.org/numberoverzero/accordian\n.. image:: https://img.shields.io/pypi/v/accordian.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/accordian\n.. image:: https://img.shields.io/github/issues-raw/numberoverzero/accordian.svg?style=flat-square\n    :target: https://github.com/numberoverzero/accordian/issues\n\n\nEvent dispatch in Python 3.8 using asyncio\n\nInstallation\n------------\n\n``pip install accordian``\n\nGetting Started\n---------------\n::\n\n    import asyncio\n    from accordian import signal\n    my_event = signal(\"my_event\")\n\n    @my_event.connect\n    async def pow(x, y):\n        await asyncio.sleep(0.1)\n        print(f\"pow({x}, {y})\")\n        return x ** y\n\n    @my_event.connect\n    async def diff(x, y):\n        await asyncio.sleep(0.2)\n        print(f\"diff({x}, {y})\")\n        return max(x, y) - min(x, y)\n\n\n    # create events without blocking\n    async def create():\n        my_event.send(4, 6)\n        my_event.send(0, 1)\n    asyncio.run(create())\n\n\n    # or block and collect results from all receivers\n    async def collect():\n        results = await my_event.join(10, 3)\n        assert set(results) == {1000, 7}\n    asyncio.run(collect())\n\n\n    # signals without receivers return no results\n    async def empty():\n        sig = signal(\"unknown\")\n        results = await sig.join(1, \"foo\", None)\n        assert results == []\n    asyncio.run(empty())\n\nNamespaces\n==========\n\nBy default, ``accordian.signal`` creates signals in a global namespace.  You can create your own namespaces to\ngroup signals together.  Here, a processor is passed the region and stage to create deployment tasks::\n\n    from accordian import Namespace\n    regions = {\"east\": Namespace(), \"west\": Namespace()}\n\n\n    @regions[\"east\"].signal(\"dev\").connect\n    async def deploy_east_dev(s3_url, creds):\n        ...\n\n    @regions[\"east\"].signal(\"prod\").connect\n    async def deploy_east_prod(s3_url, creds):\n        # remove pre-prod feature flags\n        await sanitize_prod(s3_url, \"east\")\n        ...\n\n    @regions[\"west\"].signal(\"prod\").connect\n    async def deploy_west_prod(s3_url, creds):\n        # legacy region shims\n        await patch_west_bundle(s3_url)\n        await sanitize_prod(s3_url, \"west\")\n        ...\n\n\n    async def deploy(region, stage):\n        s3_url = await bundle_for_region(region, stage)\n        creds = await creds_for_region(region, stage)\n        signal = regions[region].signal(stage)\n\n        # create the deployment task without waiting\n        signal.send(s3_url, creds)\n\n\n    # create deployment tasks\n    asyncio.run(deploy(\"east\", \"dev\"))\n    asyncio.run(deploy(\"west\", \"prod\"))\n\n\n    # wait for deployments to complete\n    async def wait_for_tasks():\n        running = asyncio.all_tasks()\n        await asyncio.wait(running)\n    asyncio.run(wait_for_tasks())\n\nContributing\n------------\n\nContributions welcome!  Please make sure ``tox`` passes before submitting a PR.\n\nDevelopment\n-----------\n\nTo set up a virtualenv and run the test suite::\n\n    git clone https://github.com/numberoverzero/accordian.git\n    make venv\n    make\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/numberoverzero/accordian/", "keywords": "async asyncio dispatch", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "accordian", "package_url": "https://pypi.org/project/accordian/", "platform": "any", "project_url": "https://pypi.org/project/accordian/", "project_urls": {"Homepage": "http://github.com/numberoverzero/accordian/"}, "release_url": "https://pypi.org/project/accordian/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Event dispatch in Python 3.8 using asyncio", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/numberoverzero/accordian\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/numberoverzero/accordian/master.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/547a467f6a470e34e8f355cf8ee7d855a85a0fee/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6e756d6265726f7665727a65726f2f6163636f726469616e2f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.python.org/pypi/accordian\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/accordian.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acbf12bfe7c62521b6bd591b5e0388b3d3e54142/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6163636f726469616e2e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/numberoverzero/accordian/issues\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/issues-raw/numberoverzero/accordian.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f398cde2fa48731624a00a530db57fdcc4a7e574/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f6e756d6265726f7665727a65726f2f6163636f726469616e2e7376673f7374796c653d666c61742d737175617265\"></a>\n<p>Event dispatch in Python 3.8 using asyncio</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install accordian</tt></p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<pre>import asyncio\nfrom accordian import signal\nmy_event = signal(\"my_event\")\n\n@my_event.connect\nasync def pow(x, y):\n    await asyncio.sleep(0.1)\n    print(f\"pow({x}, {y})\")\n    return x ** y\n\n@my_event.connect\nasync def diff(x, y):\n    await asyncio.sleep(0.2)\n    print(f\"diff({x}, {y})\")\n    return max(x, y) - min(x, y)\n\n\n# create events without blocking\nasync def create():\n    my_event.send(4, 6)\n    my_event.send(0, 1)\nasyncio.run(create())\n\n\n# or block and collect results from all receivers\nasync def collect():\n    results = await my_event.join(10, 3)\n    assert set(results) == {1000, 7}\nasyncio.run(collect())\n\n\n# signals without receivers return no results\nasync def empty():\n    sig = signal(\"unknown\")\n    results = await sig.join(1, \"foo\", None)\n    assert results == []\nasyncio.run(empty())\n</pre>\n<div id=\"namespaces\">\n<h3>Namespaces</h3>\n<p>By default, <tt>accordian.signal</tt> creates signals in a global namespace.  You can create your own namespaces to\ngroup signals together.  Here, a processor is passed the region and stage to create deployment tasks:</p>\n<pre>from accordian import Namespace\nregions = {\"east\": Namespace(), \"west\": Namespace()}\n\n\n@regions[\"east\"].signal(\"dev\").connect\nasync def deploy_east_dev(s3_url, creds):\n    ...\n\n@regions[\"east\"].signal(\"prod\").connect\nasync def deploy_east_prod(s3_url, creds):\n    # remove pre-prod feature flags\n    await sanitize_prod(s3_url, \"east\")\n    ...\n\n@regions[\"west\"].signal(\"prod\").connect\nasync def deploy_west_prod(s3_url, creds):\n    # legacy region shims\n    await patch_west_bundle(s3_url)\n    await sanitize_prod(s3_url, \"west\")\n    ...\n\n\nasync def deploy(region, stage):\n    s3_url = await bundle_for_region(region, stage)\n    creds = await creds_for_region(region, stage)\n    signal = regions[region].signal(stage)\n\n    # create the deployment task without waiting\n    signal.send(s3_url, creds)\n\n\n# create deployment tasks\nasyncio.run(deploy(\"east\", \"dev\"))\nasyncio.run(deploy(\"west\", \"prod\"))\n\n\n# wait for deployments to complete\nasync def wait_for_tasks():\n    running = asyncio.all_tasks()\n    await asyncio.wait(running)\nasyncio.run(wait_for_tasks())\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions welcome!  Please make sure <tt>tox</tt> passes before submitting a PR.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To set up a virtualenv and run the test suite:</p>\n<pre>git clone https://github.com/numberoverzero/accordian.git\nmake venv\nmake\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7006970, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "26cf86d45cc50f86f3dfbaa941e40a8a", "sha256": "6b30890707f28a707086fcd0459cbe6f5eed70c19a4d2cabe939913ef9611f34"}, "downloads": -1, "filename": "accordian-0.2.0.tar.gz", "has_sig": false, "md5_digest": "26cf86d45cc50f86f3dfbaa941e40a8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1985, "upload_time": "2015-07-06T03:16:29", "upload_time_iso_8601": "2015-07-06T03:16:29.455378Z", "url": "https://files.pythonhosted.org/packages/a6/fe/a2f44d50775d23d6e4ca45d21c999352c5316d19985cc88e7afb04421738/accordian-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "afd0f843872f20d33e0f69aa66482fd1", "sha256": "d784b701dfd63a80211d90cdb39c308b041c2f431a3074f459cecd70473d4a06"}, "downloads": -1, "filename": "accordian-0.2.1.tar.gz", "has_sig": false, "md5_digest": "afd0f843872f20d33e0f69aa66482fd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4394, "upload_time": "2015-07-06T04:18:35", "upload_time_iso_8601": "2015-07-06T04:18:35.510924Z", "url": "https://files.pythonhosted.org/packages/b1/52/ab4fddc3460bb758cce0749220fbe8d7d1ba3d7d49758873e8a1fdb473b3/accordian-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "076cfe3fcfbe94db17b9d081cfe397a1", "sha256": "7b5f21e205a153b2f8aa80cd4adb9d275dc38301ee206cb9fbddf6b636934df1"}, "downloads": -1, "filename": "accordian-0.3.0.tar.gz", "has_sig": false, "md5_digest": "076cfe3fcfbe94db17b9d081cfe397a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3810, "upload_time": "2015-08-28T11:11:17", "upload_time_iso_8601": "2015-08-28T11:11:17.432222Z", "url": "https://files.pythonhosted.org/packages/f2/3a/4b7645892f1fcc6a758d7b293170368d7df796abfd45cab7dd591acdf35d/accordian-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "c2a565128205728fb74afa6ddb56b86a", "sha256": "7d6e0a7f2327dcc2ce499da263e0e40d129d9034604c6d66d3532243cc53fddf"}, "downloads": -1, "filename": "accordian-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c2a565128205728fb74afa6ddb56b86a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3840, "upload_time": "2016-01-01T21:07:33", "upload_time_iso_8601": "2016-01-01T21:07:33.144684Z", "url": "https://files.pythonhosted.org/packages/d1/0b/96d6b39e898a26d11254d8cde8412be10269cb79d5e7b7cfe299ab11e204/accordian-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "a26bd099185b40ab8a7fb83138bf39da", "sha256": "590b40612f59136ecef6968439903f6cee2f34287818473d81b3d524445a86b2"}, "downloads": -1, "filename": "accordian-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a26bd099185b40ab8a7fb83138bf39da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3750, "upload_time": "2020-04-13T00:34:20", "upload_time_iso_8601": "2020-04-13T00:34:20.496858Z", "url": "https://files.pythonhosted.org/packages/26/91/04c3de96c0ef6d7c3e0088b2eb0ae8357acf483e8a0c6cabfb75bfb8e565/accordian-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0b708384f77b697656b39bd24699362", "sha256": "2dcf0323d25284171862f750dbbbdef11fdd32b9a8814eaaf5c2f51679b0ed3f"}, "downloads": -1, "filename": "accordian-0.4.0.tar.gz", "has_sig": false, "md5_digest": "c0b708384f77b697656b39bd24699362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3239, "upload_time": "2020-04-13T00:34:21", "upload_time_iso_8601": "2020-04-13T00:34:21.387178Z", "url": "https://files.pythonhosted.org/packages/dd/13/f3152ac04e7681cc6131d981565c7d440147a358ed0d1a4c1e7609faf8d3/accordian-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a26bd099185b40ab8a7fb83138bf39da", "sha256": "590b40612f59136ecef6968439903f6cee2f34287818473d81b3d524445a86b2"}, "downloads": -1, "filename": "accordian-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a26bd099185b40ab8a7fb83138bf39da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3750, "upload_time": "2020-04-13T00:34:20", "upload_time_iso_8601": "2020-04-13T00:34:20.496858Z", "url": "https://files.pythonhosted.org/packages/26/91/04c3de96c0ef6d7c3e0088b2eb0ae8357acf483e8a0c6cabfb75bfb8e565/accordian-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0b708384f77b697656b39bd24699362", "sha256": "2dcf0323d25284171862f750dbbbdef11fdd32b9a8814eaaf5c2f51679b0ed3f"}, "downloads": -1, "filename": "accordian-0.4.0.tar.gz", "has_sig": false, "md5_digest": "c0b708384f77b697656b39bd24699362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3239, "upload_time": "2020-04-13T00:34:21", "upload_time_iso_8601": "2020-04-13T00:34:21.387178Z", "url": "https://files.pythonhosted.org/packages/dd/13/f3152ac04e7681cc6131d981565c7d440147a358ed0d1a4c1e7609faf8d3/accordian-0.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:46 2020"}