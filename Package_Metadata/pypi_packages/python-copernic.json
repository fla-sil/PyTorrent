{"info": {"author": "Amirouche Boubekki", "author_email": "amirouche@hyper.dev", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "# [copernic](https://github.com/amirouche/copernic): awesome data store\n\n![data](https://raw.githubusercontent.com/amirouche/copernic/master/data.jpg)\n\n## Abstract\n\ncopernic is web application that is (mostly) implemented with Python\nprogramming language.  It is supported by a database that is a quad\nstore versioned in a direct-acyclic-graph.  It is possible to do time\ntraveling queries at any point in history while still being efficient\nto query and modify the latest version.  The versioned quad store is\nimplemented using a novel approach dubbed generic tuple\nstore. copernic goal is to demonstrate that versioned databases allow\nto implement workflows that ease cooperation.\n\n## Keywords\n\n- data management system\n- data science\n- distributed version control system\n- knowledge base\n- open data\n- quality assurance\n- reproducible science\n- python programming language\n\n## Introduction\n\nVersioning in production systems is a trick everybody knows about\nwhether it is through backup, logging systems and ad-hoc [audit\ntrails](https://code.djangoproject.com/wiki/AuditTrail).  It allows to\ninspect, debug and in worst cases rollback to previous states. There\nis not need to explain the great importance of versioning in software\nmanagement as tools like git, mercurial, and fossil have shaped modern\ncomputing.\n\nHaving the power of multiple branch versioning open the door to\nmanyfold applications.  Like, it allows to implement a mechanic\nsimilar to github's pull requests and gitlab's merge requests in many\nproducts.  That very mechanic is explicit about the actual human\nworkflow in entreprise settings, in particular, when a person\nvalidates a change made by another person.\n\nThe *versioned quad store* make the implementation of such mechanics\nmore systematic and less error prone as the implementation can be\nshared across various tools and organisations.\n\ncopernic takes the path of versioning data and apply the\nchange-request mechanic to collaborate around the making of a\nknowledge base, similar in spirit to\n[WikiData](https://wikidata.org/) and inspired from existing data\nmanagement systems like CKAN.\n\nThe use of a version control system to store [open\ndata](https://en.wikipedia.org/wiki/Open_data) is a good thing as it\ndraws a clear path for reproducible science. But none, meets all the\nexpectations. **copernic aims to replace the use of git and make\npractical cooperation around the creation, publication, storage,\nre-use and maintenance of knowledge bases that are possibly bigger\nthan memory.** Resource Description Framework (RDF) offers a good\ncanvas for cooperation around open data but there is no solution that\nis good enough according to [Collaborative Open Data versioning: a\npragmatic approach using Linked Data, by Canova *et\nal.*](https://core.ac.uk/download/pdf/76527782.pdf)\n\ncopernic use a novel approach to store quads in an [ordered key-value\nstore](https://en.wikipedia.org/wiki/Ordered_Key-Value_Store). It use\n[FoundationDB](https://www.foundationdb.org/) database storage engine\nto deliver a pragmatic versatile ACID-compliant versioned quad store\nwhere people can cooperate around the making of the future of\nknowledge.  It also rely on a new algorithm to query versioned tuples\nbased on a topological graph ordering of changes. copernic only stores\nchanges between versions. copernic does not rely on the theory of\npatches introduced by Darcs but re-use some its vocabulary.  copernic\nis the future.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/amirouche/copernic", "keywords": "", "license": "Cooperative Software License", "maintainer": "", "maintainer_email": "", "name": "python-copernic", "package_url": "https://pypi.org/project/python-copernic/", "platform": "", "project_url": "https://pypi.org/project/python-copernic/", "project_urls": {"Homepage": "https://github.com/amirouche/copernic"}, "release_url": "https://pypi.org/project/python-copernic/0.0.0/", "requires_dist": null, "requires_python": "", "summary": "Awesome Data Distribution.", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># [copernic](<a href=\"https://github.com/amirouche/copernic\" rel=\"nofollow\">https://github.com/amirouche/copernic</a>): awesome data store</p>\n<p>![data](<a href=\"https://raw.githubusercontent.com/amirouche/copernic/master/data.jpg\" rel=\"nofollow\">https://raw.githubusercontent.com/amirouche/copernic/master/data.jpg</a>)</p>\n<p>## Abstract</p>\n<p>copernic is web application that is (mostly) implemented with Python\nprogramming language.  It is supported by a database that is a quad\nstore versioned in a direct-acyclic-graph.  It is possible to do time\ntraveling queries at any point in history while still being efficient\nto query and modify the latest version.  The versioned quad store is\nimplemented using a novel approach dubbed generic tuple\nstore. copernic goal is to demonstrate that versioned databases allow\nto implement workflows that ease cooperation.</p>\n<p>## Keywords</p>\n<ul>\n<li>data management system</li>\n<li>data science</li>\n<li>distributed version control system</li>\n<li>knowledge base</li>\n<li>open data</li>\n<li>quality assurance</li>\n<li>reproducible science</li>\n<li>python programming language</li>\n</ul>\n<p>## Introduction</p>\n<p>Versioning in production systems is a trick everybody knows about\nwhether it is through backup, logging systems and ad-hoc [audit\ntrails](<a href=\"https://code.djangoproject.com/wiki/AuditTrail\" rel=\"nofollow\">https://code.djangoproject.com/wiki/AuditTrail</a>).  It allows to\ninspect, debug and in worst cases rollback to previous states. There\nis not need to explain the great importance of versioning in software\nmanagement as tools like git, mercurial, and fossil have shaped modern\ncomputing.</p>\n<p>Having the power of multiple branch versioning open the door to\nmanyfold applications.  Like, it allows to implement a mechanic\nsimilar to github\u2019s pull requests and gitlab\u2019s merge requests in many\nproducts.  That very mechanic is explicit about the actual human\nworkflow in entreprise settings, in particular, when a person\nvalidates a change made by another person.</p>\n<p>The <em>versioned quad store</em> make the implementation of such mechanics\nmore systematic and less error prone as the implementation can be\nshared across various tools and organisations.</p>\n<p>copernic takes the path of versioning data and apply the\nchange-request mechanic to collaborate around the making of a\nknowledge base, similar in spirit to\n[WikiData](<a href=\"https://wikidata.org/\" rel=\"nofollow\">https://wikidata.org/</a>) and inspired from existing data\nmanagement systems like CKAN.</p>\n<p>The use of a version control system to store [open\ndata](<a href=\"https://en.wikipedia.org/wiki/Open_data\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Open_data</a>) is a good thing as it\ndraws a clear path for reproducible science. But none, meets all the\nexpectations. <strong>copernic aims to replace the use of git and make\npractical cooperation around the creation, publication, storage,\nre-use and maintenance of knowledge bases that are possibly bigger\nthan memory.</strong> Resource Description Framework (RDF) offers a good\ncanvas for cooperation around open data but there is no solution that\nis good enough according to [Collaborative Open Data versioning: a\npragmatic approach using Linked Data, by Canova <em>et\nal.</em>](<a href=\"https://core.ac.uk/download/pdf/76527782.pdf\" rel=\"nofollow\">https://core.ac.uk/download/pdf/76527782.pdf</a>)</p>\n<p>copernic use a novel approach to store quads in an [ordered key-value\nstore](<a href=\"https://en.wikipedia.org/wiki/Ordered_Key-Value_Store\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Ordered_Key-Value_Store</a>). It use\n[FoundationDB](<a href=\"https://www.foundationdb.org/\" rel=\"nofollow\">https://www.foundationdb.org/</a>) database storage engine\nto deliver a pragmatic versatile ACID-compliant versioned quad store\nwhere people can cooperate around the making of the future of\nknowledge.  It also rely on a new algorithm to query versioned tuples\nbased on a topological graph ordering of changes. copernic only stores\nchanges between versions. copernic does not rely on the theory of\npatches introduced by Darcs but re-use some its vocabulary.  copernic\nis the future.</p>\n\n          </div>"}, "last_serial": 6648757, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "d562645f44f4cfe866d068cea4bb1600", "sha256": "9891659e015c089a66552cfe3ca695666d44f3a2c9ace24955f45fa0009965ba"}, "downloads": -1, "filename": "python-copernic-0.0.0.tar.gz", "has_sig": false, "md5_digest": "d562645f44f4cfe866d068cea4bb1600", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3008, "upload_time": "2020-02-17T20:22:02", "upload_time_iso_8601": "2020-02-17T20:22:02.411950Z", "url": "https://files.pythonhosted.org/packages/62/25/ef8c89dd5cb4151436c642b805978bd1fcf8336070224fc4ad1f1f538f31/python-copernic-0.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d562645f44f4cfe866d068cea4bb1600", "sha256": "9891659e015c089a66552cfe3ca695666d44f3a2c9ace24955f45fa0009965ba"}, "downloads": -1, "filename": "python-copernic-0.0.0.tar.gz", "has_sig": false, "md5_digest": "d562645f44f4cfe866d068cea4bb1600", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3008, "upload_time": "2020-02-17T20:22:02", "upload_time_iso_8601": "2020-02-17T20:22:02.411950Z", "url": "https://files.pythonhosted.org/packages/62/25/ef8c89dd5cb4151436c642b805978bd1fcf8336070224fc4ad1f1f538f31/python-copernic-0.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:15 2020"}