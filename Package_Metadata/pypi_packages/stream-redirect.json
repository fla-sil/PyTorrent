{"info": {"author": "Greg Hellings", "author_email": "greg.hellings@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Testing"], "description": "![Check Pull Request](https://github.com/greg-hellings/stream-redirect/workflows/Check%20Pull%20Request/badge.svg)\n\nstdout\\_redirect\n----------------\n\nWhat?\n-----\n\nA Python library to collect and redirect code from stdout (and/or stderr) and\ncollect it into program-accessible locations.\n\nTested and working on Linux, Mac OS, and Windows!\n\nHow?\n----\n\n`pip install -U stream-redirect`\n\n```python\nfrom stream_redirect import Redirect\n\nr = Redirect(stdout=True, stderr=True)\nwith r:\n    print(\"This will be captured\")\n    os.system(\"echo This will also be captured\")\n    some_c_module.method_that_writes(\"This willl be, too\")\n\nprint(\"Captured stdout: \", r.stdout)\nprint(\"Captured stderr: \", r.stderr)\n```\n\nConstruction\n============\n\nRedirect accepts three arguments:\n\n* `stdout` - Default **True**. Capture stdout to the \"stdout\" property\n* `stderr` - Default **False**. Capture stderr to the \"stderr\" property\n* `python_only` - Default **False**. Only capture the output of Python code and\n  not the output of system calls and C libraries. This behavior mimics the built\n  in context manager (discussed below) and is useful when you just want to drop\n  in this to replace that one in versions of Python where it doesn't exist\n\nUsage\n=====\n\nIf you only want to silence output you can do\n```python\nwith Redirect():\n   pass\n```\n\nHowever, if you wish to inspect the results of the run, you need to create and read\nthe context manager outside of the `with` invocation, as the object created during\nthe call is only accessible within the body of the `with` block.\n\nWhy?\n----\n\n# Isn't there already a standard module for this?\n\nIt's true that the standard library includes a context decorator that\n[already redirects stdout](https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout)\nfor most normal uses. But this is not sufficient. It fails on at least a few\nscenarios.\n\n### It is new\n\nThe built-in module won't help you on Python 2.7 or Python 3.0-3.3 (where it does\nnot exist).\n\nThis module will do so\n\n### It doesn't capture system calls\n\nThe above module doesn't capture system calls\n\n```\nIn [1]: import io, os, contextlib\n\nIn [2]: s = io.StringIO()\n\nIn [3]: with contextlib.redirect_stdout(s):\n   ...:     os.system(\"echo Hello world\")\n   ...:\nHello world\n\nIn [4]: print(\"Captured output: \", s.getvalue())\nCaptured output:\n```\n\nThis module will do so\n\n### It doesn't capture output from the C library\n\nIf an extension module written in C writes output, the built-in context wrapper\nwill not capture it.\n\nThis module will do so\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/greg-hellings/stream_redirect", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "stream-redirect", "package_url": "https://pypi.org/project/stream-redirect/", "platform": "", "project_url": "https://pypi.org/project/stream-redirect/", "project_urls": {"Homepage": "https://github.com/greg-hellings/stream_redirect"}, "release_url": "https://pypi.org/project/stream-redirect/0.1.2/", "requires_dist": ["six"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Collect and redirect stdout and stderr from a python program", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Check Pull Request\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d9b26c50b54c5b9c4c677ca7d42dbfb9787c5a0/68747470733a2f2f6769746875622e636f6d2f677265672d68656c6c696e67732f73747265616d2d72656469726563742f776f726b666c6f77732f436865636b25323050756c6c253230526571756573742f62616467652e737667\"></p>\n<h2>stdout_redirect</h2>\n<h2>What?</h2>\n<p>A Python library to collect and redirect code from stdout (and/or stderr) and\ncollect it into program-accessible locations.</p>\n<p>Tested and working on Linux, Mac OS, and Windows!</p>\n<h2>How?</h2>\n<p><code>pip install -U stream-redirect</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stream_redirect</span> <span class=\"kn\">import</span> <span class=\"n\">Redirect</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Redirect</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This will be captured\"</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">\"echo This will also be captured\"</span><span class=\"p\">)</span>\n    <span class=\"n\">some_c_module</span><span class=\"o\">.</span><span class=\"n\">method_that_writes</span><span class=\"p\">(</span><span class=\"s2\">\"This willl be, too\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Captured stdout: \"</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Captured stderr: \"</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n</pre>\n<h1>Construction</h1>\n<p>Redirect accepts three arguments:</p>\n<ul>\n<li><code>stdout</code> - Default <strong>True</strong>. Capture stdout to the \"stdout\" property</li>\n<li><code>stderr</code> - Default <strong>False</strong>. Capture stderr to the \"stderr\" property</li>\n<li><code>python_only</code> - Default <strong>False</strong>. Only capture the output of Python code and\nnot the output of system calls and C libraries. This behavior mimics the built\nin context manager (discussed below) and is useful when you just want to drop\nin this to replace that one in versions of Python where it doesn't exist</li>\n</ul>\n<h1>Usage</h1>\n<p>If you only want to silence output you can do</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Redirect</span><span class=\"p\">():</span>\n   <span class=\"k\">pass</span>\n</pre>\n<p>However, if you wish to inspect the results of the run, you need to create and read\nthe context manager outside of the <code>with</code> invocation, as the object created during\nthe call is only accessible within the body of the <code>with</code> block.</p>\n<h2>Why?</h2>\n<h1>Isn't there already a standard module for this?</h1>\n<p>It's true that the standard library includes a context decorator that\n<a href=\"https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout\" rel=\"nofollow\">already redirects stdout</a>\nfor most normal uses. But this is not sufficient. It fails on at least a few\nscenarios.</p>\n<h3>It is new</h3>\n<p>The built-in module won't help you on Python 2.7 or Python 3.0-3.3 (where it does\nnot exist).</p>\n<p>This module will do so</p>\n<h3>It doesn't capture system calls</h3>\n<p>The above module doesn't capture system calls</p>\n<pre><code>In [1]: import io, os, contextlib\n\nIn [2]: s = io.StringIO()\n\nIn [3]: with contextlib.redirect_stdout(s):\n   ...:     os.system(\"echo Hello world\")\n   ...:\nHello world\n\nIn [4]: print(\"Captured output: \", s.getvalue())\nCaptured output:\n</code></pre>\n<p>This module will do so</p>\n<h3>It doesn't capture output from the C library</h3>\n<p>If an extension module written in C writes output, the built-in context wrapper\nwill not capture it.</p>\n<p>This module will do so</p>\n\n          </div>"}, "last_serial": 6628427, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c1a44937ec6e24e0a391f665cd2510d0", "sha256": "e0396c5030586cbba2388548a1bac3d4ce333cf26dd783ea0a86bd4df7bf8bdf"}, "downloads": -1, "filename": "stream_redirect-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c1a44937ec6e24e0a391f665cd2510d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16871, "upload_time": "2020-02-14T05:41:43", "upload_time_iso_8601": "2020-02-14T05:41:43.559472Z", "url": "https://files.pythonhosted.org/packages/c3/4d/4a5918e9455aeaa2d811a6814550cc009a3218deb9721741596144185899/stream_redirect-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d949a313bed72ee650485a2baa10d75c", "sha256": "6a491c6dbfe3fc74880a6cc73d6a9e16d006baf2015affd1641599e8fb22da21"}, "downloads": -1, "filename": "stream-redirect-0.1.tar.gz", "has_sig": false, "md5_digest": "d949a313bed72ee650485a2baa10d75c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 3945, "upload_time": "2020-02-14T05:41:46", "upload_time_iso_8601": "2020-02-14T05:41:46.126424Z", "url": "https://files.pythonhosted.org/packages/3e/64/7be20d0417bfd1f9a3eede829a962064df6ebbea818ea2493badf3d15611/stream-redirect-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "906abab843e56aae4fea76d6539bd8a5", "sha256": "5c817bc07da094cc99cdc81610fe86313f05fcbda32ab52931a6d702e987cde5"}, "downloads": -1, "filename": "stream_redirect-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "906abab843e56aae4fea76d6539bd8a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16894, "upload_time": "2020-02-14T05:44:47", "upload_time_iso_8601": "2020-02-14T05:44:47.527573Z", "url": "https://files.pythonhosted.org/packages/10/1e/a488929380d63cfaf938e991935a4c8ab57f6dffe08ca216a2b61d551cf2/stream_redirect-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c219aafab4de045c494bcb7e5b48ea5c", "sha256": "89e28af6f6e07e714c16d5b8969f3955f3ed861361d67ced1735b4b9a617d549"}, "downloads": -1, "filename": "stream-redirect-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c219aafab4de045c494bcb7e5b48ea5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4211, "upload_time": "2020-02-14T05:44:48", "upload_time_iso_8601": "2020-02-14T05:44:48.916193Z", "url": "https://files.pythonhosted.org/packages/0a/7c/654bbe807c1929f1092bcde4e919a6132c99f277aad9698b24040f609383/stream-redirect-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "52821570fa080469081e4491ff2b5d30", "sha256": "77b7a1fc015d9a1c031fa5e4d6a364c41878215d7116e33c99b329af7a30dde7"}, "downloads": -1, "filename": "stream_redirect-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "52821570fa080469081e4491ff2b5d30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16895, "upload_time": "2020-02-14T05:48:51", "upload_time_iso_8601": "2020-02-14T05:48:51.416743Z", "url": "https://files.pythonhosted.org/packages/84/30/a6fb293077c627971976aa5ea23b21a9830ae5f2669a8ba285cf74602b32/stream_redirect-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eca779e9830b322a415c6fdc0a0683cd", "sha256": "66b96d71e82d23136d5d7614f53c5014116f3528da2457f3e36d4f31cc7a1b98"}, "downloads": -1, "filename": "stream-redirect-0.1.2.tar.gz", "has_sig": false, "md5_digest": "eca779e9830b322a415c6fdc0a0683cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4205, "upload_time": "2020-02-14T05:48:52", "upload_time_iso_8601": "2020-02-14T05:48:52.712442Z", "url": "https://files.pythonhosted.org/packages/71/f7/2a49c28dc5a2b3734f1a8a15c4e98ed0b855e83d31e6bd78ecc8c14550b2/stream-redirect-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "52821570fa080469081e4491ff2b5d30", "sha256": "77b7a1fc015d9a1c031fa5e4d6a364c41878215d7116e33c99b329af7a30dde7"}, "downloads": -1, "filename": "stream_redirect-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "52821570fa080469081e4491ff2b5d30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16895, "upload_time": "2020-02-14T05:48:51", "upload_time_iso_8601": "2020-02-14T05:48:51.416743Z", "url": "https://files.pythonhosted.org/packages/84/30/a6fb293077c627971976aa5ea23b21a9830ae5f2669a8ba285cf74602b32/stream_redirect-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eca779e9830b322a415c6fdc0a0683cd", "sha256": "66b96d71e82d23136d5d7614f53c5014116f3528da2457f3e36d4f31cc7a1b98"}, "downloads": -1, "filename": "stream-redirect-0.1.2.tar.gz", "has_sig": false, "md5_digest": "eca779e9830b322a415c6fdc0a0683cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4205, "upload_time": "2020-02-14T05:48:52", "upload_time_iso_8601": "2020-02-14T05:48:52.712442Z", "url": "https://files.pythonhosted.org/packages/71/f7/2a49c28dc5a2b3734f1a8a15c4e98ed0b855e83d31e6bd78ecc8c14550b2/stream-redirect-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:18 2020"}