{"info": {"author": "Bruno Binet", "author_email": "bruno.binet@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "Reverse-ssh-manager\n==================\n\nReverse-ssh-manager allows to manage reverse ssh connections through a web\napplication.\n\nIt also provide a Dockerfile to easily run Reverse-ssh-manager in a docker\ncontainer.\n\n\nInstall\n-------\n\nYou can install `reverse-ssh-manager` in a virtualenv (with `virtualenvwrapper`\nand `pip`)::\n\n    $ mkvirtualenv reverse-ssh-manager\n    (reverse-ssh-manager) $ pip install reverse-ssh-manager\n\nOr if you want to contribute some patches to `reverse-ssh-manager`::\n\n    $ git clone git@github.com:bbinet/reverse-ssh-manager.git\n    $ cd reverse-ssh-manager/\n    $ mkvirtualenv reverse-ssh-manager\n    (reverse-ssh-manager) $ python setup.py develop\n\nThen, do the following steps::\n\n    (reverse-ssh-manager) $ pip install nodeenv\n    (reverse-ssh-manager) $ nodeenv -p --prebuilt\n    (reverse-ssh-manager) $ npm install -g bower gulp\n    (reverse-ssh-manager) $ npm install\n    (reverse-ssh-manager) $ bower install\n    (reverse-ssh-manager) $ gulp\n\n\nConfigure\n---------\n\nCreate a configuration file that looks like::\n\n    $ cat path/to/config.cfg\n\n    [bottle]\n    host = 0.0.0.0\n    port = 8080\n    debug = true\n\nNote that the `[bottle]` section is optional, the defaults are::\n\n    [bottle]\n    host = localhost\n    port = 8888\n    server = wsgiref\n    debug = false\n\n\nRun\n---\n\nRun the reverse-ssh-manager server by running the following command::\n\n    (reverse-ssh-manager) $ reverse-ssh-manager path/to/config.cfg\n\nThen visit http://localhost:8888/, it should display a web interface to manage\nreverse ssh tunnels.\n\n\nRelease\n-------\n\nTo make a new release, do the following steps::\n\n    (reverse-ssh-manager) $ npm install\n    (reverse-ssh-manager) $ bower install\n    (reverse-ssh-manager) $ gulp\n    (reverse-ssh-manager) $ deactivate\n    $ vi setup.py  # bump version\n    $ git add setup.py\n    $ git commit -m \"bump version to X.X.X\"\n    $ git tag vX.X.X\n    $ python setup.py sdist bdist_wheel upload\n    $ git push --tags\n\n\nDocker\n------\n\nBuild\n~~~~~\n\nTo create the image `bbinet/rsm`, execute the following command::\n\n    docker build -t bbinet/rsm .\n\nYou can now push the new image to the public registry::\n\n    docker push bbinet/rsm\n\nRun\n~~~\n\nThen, when starting your rsm container, you will want to bind ports `22` and\n`80` from the rsm container to a host external port.\n\nYou also need to provide a read-only `authorized_keys` file that will be use to\nallow some users to create ssh tunnels using their public ssh key.\n\nNote that psutil won't be able to get pids of running ssh connection unless you\nspecify option `--cap-add SYS_PTRACE` with docker run.\n\nFor example:\n\n    $ docker pull bbinet/rsm\n\n    $ docker run --name rsm \\\n        -v authorized_keys:/config/authorized_keys:ro \\\n        -p 22:22 \\\n        --cap-add SYS_PTRACE \\\n        bbinet/rsm\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bbinet/reverse-ssh-manager", "keywords": "ssh", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "reverse-ssh-manager", "package_url": "https://pypi.org/project/reverse-ssh-manager/", "platform": "", "project_url": "https://pypi.org/project/reverse-ssh-manager/", "project_urls": {"Homepage": "https://github.com/bbinet/reverse-ssh-manager"}, "release_url": "https://pypi.org/project/reverse-ssh-manager/1.2/", "requires_dist": null, "requires_python": "", "summary": "reverse-ssh-manager allows to manage reverse ssh connections through a web application", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Reverse-ssh-manager<br>==================<br><br>Reverse-ssh-manager allows to manage reverse ssh connections through a web<br>application.<br><br>It also provide a Dockerfile to easily run Reverse-ssh-manager in a docker<br>container.<br><br><br>Install<br>-------<br><br>You can install `reverse-ssh-manager` in a virtualenv (with `virtualenvwrapper`<br>and `pip`)::<br><br>    $ mkvirtualenv reverse-ssh-manager<br>    (reverse-ssh-manager) $ pip install reverse-ssh-manager<br><br>Or if you want to contribute some patches to `reverse-ssh-manager`::<br><br>    $ git clone git@github.com:bbinet/reverse-ssh-manager.git<br>    $ cd reverse-ssh-manager/<br>    $ mkvirtualenv reverse-ssh-manager<br>    (reverse-ssh-manager) $ python setup.py develop<br><br>Then, do the following steps::<br><br>    (reverse-ssh-manager) $ pip install nodeenv<br>    (reverse-ssh-manager) $ nodeenv -p --prebuilt<br>    (reverse-ssh-manager) $ npm install -g bower gulp<br>    (reverse-ssh-manager) $ npm install<br>    (reverse-ssh-manager) $ bower install<br>    (reverse-ssh-manager) $ gulp<br><br><br>Configure<br>---------<br><br>Create a configuration file that looks like::<br><br>    $ cat path/to/config.cfg<br><br>    [bottle]<br>    host = 0.0.0.0<br>    port = 8080<br>    debug = true<br><br>Note that the `[bottle]` section is optional, the defaults are::<br><br>    [bottle]<br>    host = localhost<br>    port = 8888<br>    server = wsgiref<br>    debug = false<br><br><br>Run<br>---<br><br>Run the reverse-ssh-manager server by running the following command::<br><br>    (reverse-ssh-manager) $ reverse-ssh-manager path/to/config.cfg<br><br>Then visit http://localhost:8888/, it should display a web interface to manage<br>reverse ssh tunnels.<br><br><br>Release<br>-------<br><br>To make a new release, do the following steps::<br><br>    (reverse-ssh-manager) $ npm install<br>    (reverse-ssh-manager) $ bower install<br>    (reverse-ssh-manager) $ gulp<br>    (reverse-ssh-manager) $ deactivate<br>    $ vi setup.py  # bump version<br>    $ git add setup.py<br>    $ git commit -m \"bump version to X.X.X\"<br>    $ git tag vX.X.X<br>    $ python setup.py sdist bdist_wheel upload<br>    $ git push --tags<br><br><br>Docker<br>------<br><br>Build<br>~~~~~<br><br>To create the image `bbinet/rsm`, execute the following command::<br><br>    docker build -t bbinet/rsm .<br><br>You can now push the new image to the public registry::<br><br>    docker push bbinet/rsm<br><br>Run<br>~~~<br><br>Then, when starting your rsm container, you will want to bind ports `22` and<br>`80` from the rsm container to a host external port.<br><br>You also need to provide a read-only `authorized_keys` file that will be use to<br>allow some users to create ssh tunnels using their public ssh key.<br><br>Note that psutil won't be able to get pids of running ssh connection unless you<br>specify option `--cap-add SYS_PTRACE` with docker run.<br><br>For example:<br><br>    $ docker pull bbinet/rsm<br><br>    $ docker run --name rsm \\<br>        -v authorized_keys:/config/authorized_keys:ro \\<br>        -p 22:22 \\<br>        --cap-add SYS_PTRACE \\<br>        bbinet/rsm<br>\n          </div>"}, "last_serial": 3153820, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "850e58074f2ad1a0fdd4d26a89223716", "sha256": "b6d9d2eaf4f0e8518acbbeddf279f714dca6eac5c9c9a38654a5632a8dc41413"}, "downloads": -1, "filename": "reverse_ssh_manager-1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "850e58074f2ad1a0fdd4d26a89223716", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 225326, "upload_time": "2017-09-06T15:17:51", "upload_time_iso_8601": "2017-09-06T15:17:51.458359Z", "url": "https://files.pythonhosted.org/packages/2b/f4/6e5608f00dc2ca671c1a5719ed05b47a5c815d7118957f46b96d89ef66ec/reverse_ssh_manager-1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa860d265a8d9f3b220d4435741fd6a0", "sha256": "c64f581c3d35c314bbc69fa85ff97e3132dc751f3933f03640d4a76d45995ef1"}, "downloads": -1, "filename": "reverse-ssh-manager-1.2.tar.gz", "has_sig": false, "md5_digest": "fa860d265a8d9f3b220d4435741fd6a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224621, "upload_time": "2017-09-06T15:17:47", "upload_time_iso_8601": "2017-09-06T15:17:47.045844Z", "url": "https://files.pythonhosted.org/packages/0c/8c/d68cac99fd3771e29a8a993cb5f0c0379259aabc62de27937d2aab215b50/reverse-ssh-manager-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "850e58074f2ad1a0fdd4d26a89223716", "sha256": "b6d9d2eaf4f0e8518acbbeddf279f714dca6eac5c9c9a38654a5632a8dc41413"}, "downloads": -1, "filename": "reverse_ssh_manager-1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "850e58074f2ad1a0fdd4d26a89223716", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 225326, "upload_time": "2017-09-06T15:17:51", "upload_time_iso_8601": "2017-09-06T15:17:51.458359Z", "url": "https://files.pythonhosted.org/packages/2b/f4/6e5608f00dc2ca671c1a5719ed05b47a5c815d7118957f46b96d89ef66ec/reverse_ssh_manager-1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa860d265a8d9f3b220d4435741fd6a0", "sha256": "c64f581c3d35c314bbc69fa85ff97e3132dc751f3933f03640d4a76d45995ef1"}, "downloads": -1, "filename": "reverse-ssh-manager-1.2.tar.gz", "has_sig": false, "md5_digest": "fa860d265a8d9f3b220d4435741fd6a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224621, "upload_time": "2017-09-06T15:17:47", "upload_time_iso_8601": "2017-09-06T15:17:47.045844Z", "url": "https://files.pythonhosted.org/packages/0c/8c/d68cac99fd3771e29a8a993cb5f0c0379259aabc62de27937d2aab215b50/reverse-ssh-manager-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:18 2020"}