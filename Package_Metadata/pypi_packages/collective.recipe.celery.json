{"info": {"author": "Thomas Buchberger", "author_email": "t.buchberger@4teamwork.ch", "bugtrack_url": null, "classifiers": ["Framework :: Buildout :: Recipe", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. contents::\n\nIntroduction\n============\n\nThis recipe installs Celery and creates a ``celeryconfig.py`` module with\nthe specified configuration options. It helps managing multiple configurations\n(e.g. development and production) using buildout.\n\nYou can use it in a part like this::\n\n    [celery]\n    recipe = collective.recipe.celery\n    broker-transport = sqlakombu.transport.Transport\n    broker-host = sqlite:///celery_broker.db\n    result-backend = database\n    result-dburi = sqlite:///celery_results.db\n    imports = myapp.tasks\n    eggs =\n        kombu-sqlalchemy\n        myapp\n\nSupported options\n=================\n\nGeneral options\n---------------\n\neggs\n    A list of additional eggs you want to make available to Celery. Use this to\n    add additional dependencies such as ``kombu-sqlalchemy`` or the module(s)\n    containing your task definitions.\n\nscripts\n    Controls which scripts are generated. If the option is omitted, then all\n    scripts will be generated. If no value is given, then script generation is\n    disabled.\n\nconfig-path\n    The location of the directory containing the ``celeryconfig.py`` module. By\n    default the config module is created in the part directory.\n    You can use this in other parts to include the config module::\n\n        [celery]\n        recipe = collective.recipe.celery\n\n        [myapp]\n        recipe = zc.recipe.egg\n        eggs = myapp\n        extra-paths = ${celery:config-path}\n\nCelery options\n--------------\n\nThe following configuration options are supported. See Celery documentation for\nmore details.\n\nbroker-transport\n    The Kombu transport to use. You can use a custom transport class name, or\n    select one of the built-in transports: ``amqplib``, ``pika``, ``redis``, \n    ``beanstalk``, ``sqlalchemy``, ``django``, ``mongodb``, ``couchdb``.\n\nbroker-host\n    The hostname of the broker.\n\nbroker-port\n    The port number of the broker.\n\nbroker-user\n    The username to connect as.\n\nbroker-password\n    The password to connect with.\n\nbroker-vhost\n    The virtual host.\n\nresult-backend\n    The backend used to store task results. Can be one of ``database``,\n    ``cache``, ``mongodb``, ``redis``, ``tyrant`` or ``amqp``.\n\nresult-dburi\n    Connection string for the database result backend.\n\nimports\n    A list of modules to import when the celery daemon starts. Specify one\n    module per line.\n\nceleryd-log-file\n    The filename where the celery daemon logs messages to.\n\nceleryd-log-level\n    The log level, can be one of ``DEBUG``, ``INFO``, ``WARNING``, ``ERROR`` or\n    ``CRITICAL``.\n\nceleryd-concurrency\n    The number of concurrent worker processes/threads/green threads, executing\n    tasks.\n\nadditional-config\n    Any additional configuration directives can be added using the\n    ``additional-config`` option.\n    \n    Example::\n    \n        additional-config =\n            CELERY_TASK_PUBLISH_RETRY=True\n            CELERY_TASK_PUBLISH_RETRY_POLICY={\"max_retries\": 2,\n                                              \"interval_start\": 10,\n                                              \"interval_step\": 0,\n                                              \"interval_max\": 10}\n\nChangelog\n=========\n\n1.0 (2011-08-15)\n----------------\n\n- Initial release. \n  [buchi]\n\nExample usage\n=============\n\nWe'll start by creating a buildout that uses the recipe::\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = celery\n    ... index = %(server)s/index\n    ... find-links = %(server)s\n    ... \n    ... [celery]\n    ... recipe = collective.recipe.celery\n    ... broker-transport = sqlakombu.transport.Transport\n    ... broker-host = sqlite:///celery_broker.db\n    ... result-backend = database\n    ... result-dburi = sqlite:///celery_results.db\n    ... imports = myapp.tasks\n    ... \"\"\"% dict(server=link_server))\n\nRunning the buildout gives us::\n\n    >>> print system(buildout)\n    Installing celery.\n    celery: Creating directory /sample-buildout/parts/celery.\n    celery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\n    Getting distribution for 'celery'.\n    Got celery 2.3.1.\n    Generated script '/sample-buildout/bin/celeryctl'.\n    Generated script '/sample-buildout/bin/celeryd'.\n    <BLANKLINE>\n\nCheck that we have the celery scripts::\n\n    >>> ls(sample_buildout, 'bin')\n    -  buildout\n    -  celeryctl\n    -  celeryd\n\nCheck that we got a celery config file::\n\n    >>> ls(sample_buildout, 'parts', 'celery')\n    - celeryconfig.py\n\nIf we run the celeryd script, it prints out the config data::\n\n    >>> print(system(join(sample_buildout, 'bin', 'celeryd')))\n    BROKER_HOST='sqlite:///celery_broker.db'\n    BROKER_TRANSPORT='sqlakombu.transport.Transport'\n    CELERY_IMPORTS=('myapp.tasks',)\n    CELERY_RESULT_BACKEND='database'\n    CELERY_RESULT_DBURI='sqlite:///celery_results.db'\n    <BLANKLINE>\n\nWe can include additional eggs using the eggs option::\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = celery\n    ... index = %(server)s/index\n    ... find-links = %(server)s\n    ... \n    ... [celery]\n    ... recipe = collective.recipe.celery\n    ... eggs =\n    ...     other\n    ... \"\"\"% dict(server=link_server))\n\n    >>> print system(buildout),\n    Uninstalling celery.\n    Installing celery.\n    celery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\n    Getting distribution for 'other'.\n    Got other 1.0.\n    Generated script '/sample-buildout/bin/celeryctl'.\n    Generated script '/sample-buildout/bin/celeryd'.\n\nWe can control which scripts are generated using the scripts option.\nIf no value is given, then script generation is disabled::\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = celery\n    ... index = %(server)s/index\n    ... find-links = %(server)s\n    ... \n    ... [celery]\n    ... recipe = collective.recipe.celery\n    ... scripts =\n    ... \"\"\"% dict(server=link_server))\n\n    >>> print system(buildout),\n    Uninstalling celery.\n    Installing celery.\n    celery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\n\n    >>> ls(sample_buildout, 'bin')\n    -  buildout\n\nLet's create the celeryd script only::\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = celery\n    ... index = %(server)s/index\n    ... find-links = %(server)s\n    ... \n    ... [celery]\n    ... recipe = collective.recipe.celery\n    ... scripts =\n    ...     celeryd\n    ... \"\"\"% dict(server=link_server))\n\n    >>> print system(buildout),\n    Uninstalling celery.\n    Installing celery.\n    celery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\n    Generated script '/sample-buildout/bin/celeryd'.\n\n    >>> ls(sample_buildout, 'bin')\n    -  buildout\n    -  celeryd\n\nThe supported configuration directives may be of various types including\nstrings, integers and tuples::\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = celery\n    ... index = %(server)s/index\n    ... find-links = %(server)s\n    ... \n    ... [celery]\n    ... recipe = collective.recipe.celery\n    ... broker-port = 8080\n    ... broker-user = guest\n    ... imports =\n    ...     myapp.tasks\n    ...     other.tasks\n    ... \"\"\"% dict(server=link_server))\n\n    >>> print system(buildout),\n    Uninstalling celery.\n    Installing celery.\n    celery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\n    Generated script '/sample-buildout/bin/celeryctl'.\n    Generated script '/sample-buildout/bin/celeryd'.\n\nLet's verify the generated config data::\n\n    >>> cat(sample_buildout, 'parts', 'celery', 'celeryconfig.py')\n    BROKER_PORT = 8080\n    BROKER_USER = 'guest'\n    CELERY_IMPORTS = ('myapp.tasks', 'other.tasks')\n    <BLANKLINE>\n\nThe recipe supports a limited set of celery's configuration directives. Any\nadditional directives can be added using the additional-config option::\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = celery\n    ... index = %(server)s/index\n    ... find-links = %(server)s\n    ... \n    ... [celery]\n    ... recipe = collective.recipe.celery\n    ... additional-config =\n    ...     CELERY_TASK_PUBLISH_RETRY = True\n    ...     CELERY_TASK_PUBLISH_RETRY_POLICY = {\"max_retries\": 2,\n    ...                                         \"interval_start\": 10,\n    ...                                         \"interval_step\": 0,\n    ...                                         \"interval_max\": 10}\n    ... \"\"\"% dict(server=link_server))\n\n    >>> print system(buildout),\n    Uninstalling celery.\n    Installing celery.\n    celery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\n    Generated script '/sample-buildout/bin/celeryctl'.\n    Generated script '/sample-buildout/bin/celeryd'.\n\nLet's verify the generated config data::\n\n    >>> cat(sample_buildout, 'parts', 'celery', 'celeryconfig.py')\n    CELERY_TASK_PUBLISH_RETRY = True\n    CELERY_TASK_PUBLISH_RETRY_POLICY = {\"max_retries\": 2,\n    \"interval_start\": 10,\n    \"interval_step\": 0,\n    \"interval_max\": 10}\n    <BLANKLINE>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/collective/collective.recipe.celery", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.recipe.celery", "package_url": "https://pypi.org/project/collective.recipe.celery/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.recipe.celery/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/collective/collective.recipe.celery"}, "release_url": "https://pypi.org/project/collective.recipe.celery/1.0/", "requires_dist": null, "requires_python": null, "summary": "A buildout recipe to install and configure Celery", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id2\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#supported-options\" id=\"id3\" rel=\"nofollow\">Supported options</a><ul>\n<li><a href=\"#general-options\" id=\"id4\" rel=\"nofollow\">General options</a></li>\n<li><a href=\"#celery-options\" id=\"id5\" rel=\"nofollow\">Celery options</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id6\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#example-usage\" id=\"id7\" rel=\"nofollow\">Example usage</a></li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Introduction</a></h2>\n<p>This recipe installs Celery and creates a <tt>celeryconfig.py</tt> module with\nthe specified configuration options. It helps managing multiple configurations\n(e.g. development and production) using buildout.</p>\n<p>You can use it in a part like this:</p>\n<pre>[celery]\nrecipe = collective.recipe.celery\nbroker-transport = sqlakombu.transport.Transport\nbroker-host = sqlite:///celery_broker.db\nresult-backend = database\nresult-dburi = sqlite:///celery_results.db\nimports = myapp.tasks\neggs =\n    kombu-sqlalchemy\n    myapp\n</pre>\n</div>\n<div id=\"supported-options\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Supported options</a></h2>\n<div id=\"general-options\">\n<h3><a href=\"#id4\" rel=\"nofollow\">General options</a></h3>\n<dl>\n<dt>eggs</dt>\n<dd>A list of additional eggs you want to make available to Celery. Use this to\nadd additional dependencies such as <tt><span class=\"pre\">kombu-sqlalchemy</span></tt> or the module(s)\ncontaining your task definitions.</dd>\n<dt>scripts</dt>\n<dd>Controls which scripts are generated. If the option is omitted, then all\nscripts will be generated. If no value is given, then script generation is\ndisabled.</dd>\n<dt>config-path</dt>\n<dd><p>The location of the directory containing the <tt>celeryconfig.py</tt> module. By\ndefault the config module is created in the part directory.\nYou can use this in other parts to include the config module:</p>\n<pre>[celery]\nrecipe = collective.recipe.celery\n\n[myapp]\nrecipe = zc.recipe.egg\neggs = myapp\nextra-paths = ${celery:config-path}\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"celery-options\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Celery options</a></h3>\n<p>The following configuration options are supported. See Celery documentation for\nmore details.</p>\n<dl>\n<dt>broker-transport</dt>\n<dd>The Kombu transport to use. You can use a custom transport class name, or\nselect one of the built-in transports: <tt>amqplib</tt>, <tt>pika</tt>, <tt>redis</tt>,\n<tt>beanstalk</tt>, <tt>sqlalchemy</tt>, <tt>django</tt>, <tt>mongodb</tt>, <tt>couchdb</tt>.</dd>\n<dt>broker-host</dt>\n<dd>The hostname of the broker.</dd>\n<dt>broker-port</dt>\n<dd>The port number of the broker.</dd>\n<dt>broker-user</dt>\n<dd>The username to connect as.</dd>\n<dt>broker-password</dt>\n<dd>The password to connect with.</dd>\n<dt>broker-vhost</dt>\n<dd>The virtual host.</dd>\n<dt>result-backend</dt>\n<dd>The backend used to store task results. Can be one of <tt>database</tt>,\n<tt>cache</tt>, <tt>mongodb</tt>, <tt>redis</tt>, <tt>tyrant</tt> or <tt>amqp</tt>.</dd>\n<dt>result-dburi</dt>\n<dd>Connection string for the database result backend.</dd>\n<dt>imports</dt>\n<dd>A list of modules to import when the celery daemon starts. Specify one\nmodule per line.</dd>\n<dt>celeryd-log-file</dt>\n<dd>The filename where the celery daemon logs messages to.</dd>\n<dt>celeryd-log-level</dt>\n<dd>The log level, can be one of <tt>DEBUG</tt>, <tt>INFO</tt>, <tt>WARNING</tt>, <tt>ERROR</tt> or\n<tt>CRITICAL</tt>.</dd>\n<dt>celeryd-concurrency</dt>\n<dd>The number of concurrent worker processes/threads/green threads, executing\ntasks.</dd>\n<dt>additional-config</dt>\n<dd><p>Any additional configuration directives can be added using the\n<tt><span class=\"pre\">additional-config</span></tt> option.</p>\n<p>Example:</p>\n<pre>additional-config =\n    CELERY_TASK_PUBLISH_RETRY=True\n    CELERY_TASK_PUBLISH_RETRY_POLICY={\"max_retries\": 2,\n                                      \"interval_start\": 10,\n                                      \"interval_step\": 0,\n                                      \"interval_max\": 10}\n</pre>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Changelog</a></h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.0 (2011-08-15)</span></h2>\n<ul>\n<li>Initial release.\n[buchi]</li>\n</ul>\n</div>\n<div id=\"example-usage\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Example usage</a></h2>\n<p>We\u2019ll start by creating a buildout that uses the recipe:</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = celery\n... index = %(server)s/index\n... find-links = %(server)s\n...\n... [celery]\n... recipe = collective.recipe.celery\n... broker-transport = sqlakombu.transport.Transport\n... broker-host = sqlite:///celery_broker.db\n... result-backend = database\n... result-dburi = sqlite:///celery_results.db\n... imports = myapp.tasks\n... \"\"\"% dict(server=link_server))\n</pre>\n<p>Running the buildout gives us:</p>\n<pre>&gt;&gt;&gt; print system(buildout)\nInstalling celery.\ncelery: Creating directory /sample-buildout/parts/celery.\ncelery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\nGetting distribution for 'celery'.\nGot celery 2.3.1.\nGenerated script '/sample-buildout/bin/celeryctl'.\nGenerated script '/sample-buildout/bin/celeryd'.\n&lt;BLANKLINE&gt;\n</pre>\n<p>Check that we have the celery scripts:</p>\n<pre>&gt;&gt;&gt; ls(sample_buildout, 'bin')\n-  buildout\n-  celeryctl\n-  celeryd\n</pre>\n<p>Check that we got a celery config file:</p>\n<pre>&gt;&gt;&gt; ls(sample_buildout, 'parts', 'celery')\n- celeryconfig.py\n</pre>\n<p>If we run the celeryd script, it prints out the config data:</p>\n<pre>&gt;&gt;&gt; print(system(join(sample_buildout, 'bin', 'celeryd')))\nBROKER_HOST='sqlite:///celery_broker.db'\nBROKER_TRANSPORT='sqlakombu.transport.Transport'\nCELERY_IMPORTS=('myapp.tasks',)\nCELERY_RESULT_BACKEND='database'\nCELERY_RESULT_DBURI='sqlite:///celery_results.db'\n&lt;BLANKLINE&gt;\n</pre>\n<p>We can include additional eggs using the eggs option:</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = celery\n... index = %(server)s/index\n... find-links = %(server)s\n...\n... [celery]\n... recipe = collective.recipe.celery\n... eggs =\n...     other\n... \"\"\"% dict(server=link_server))\n\n&gt;&gt;&gt; print system(buildout),\nUninstalling celery.\nInstalling celery.\ncelery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\nGetting distribution for 'other'.\nGot other 1.0.\nGenerated script '/sample-buildout/bin/celeryctl'.\nGenerated script '/sample-buildout/bin/celeryd'.\n</pre>\n<p>We can control which scripts are generated using the scripts option.\nIf no value is given, then script generation is disabled:</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = celery\n... index = %(server)s/index\n... find-links = %(server)s\n...\n... [celery]\n... recipe = collective.recipe.celery\n... scripts =\n... \"\"\"% dict(server=link_server))\n\n&gt;&gt;&gt; print system(buildout),\nUninstalling celery.\nInstalling celery.\ncelery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\n\n&gt;&gt;&gt; ls(sample_buildout, 'bin')\n-  buildout\n</pre>\n<p>Let\u2019s create the celeryd script only:</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = celery\n... index = %(server)s/index\n... find-links = %(server)s\n...\n... [celery]\n... recipe = collective.recipe.celery\n... scripts =\n...     celeryd\n... \"\"\"% dict(server=link_server))\n\n&gt;&gt;&gt; print system(buildout),\nUninstalling celery.\nInstalling celery.\ncelery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\nGenerated script '/sample-buildout/bin/celeryd'.\n\n&gt;&gt;&gt; ls(sample_buildout, 'bin')\n-  buildout\n-  celeryd\n</pre>\n<p>The supported configuration directives may be of various types including\nstrings, integers and tuples:</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = celery\n... index = %(server)s/index\n... find-links = %(server)s\n...\n... [celery]\n... recipe = collective.recipe.celery\n... broker-port = 8080\n... broker-user = guest\n... imports =\n...     myapp.tasks\n...     other.tasks\n... \"\"\"% dict(server=link_server))\n\n&gt;&gt;&gt; print system(buildout),\nUninstalling celery.\nInstalling celery.\ncelery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\nGenerated script '/sample-buildout/bin/celeryctl'.\nGenerated script '/sample-buildout/bin/celeryd'.\n</pre>\n<p>Let\u2019s verify the generated config data:</p>\n<pre>&gt;&gt;&gt; cat(sample_buildout, 'parts', 'celery', 'celeryconfig.py')\nBROKER_PORT = 8080\nBROKER_USER = 'guest'\nCELERY_IMPORTS = ('myapp.tasks', 'other.tasks')\n&lt;BLANKLINE&gt;\n</pre>\n<p>The recipe supports a limited set of celery\u2019s configuration directives. Any\nadditional directives can be added using the additional-config option:</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = celery\n... index = %(server)s/index\n... find-links = %(server)s\n...\n... [celery]\n... recipe = collective.recipe.celery\n... additional-config =\n...     CELERY_TASK_PUBLISH_RETRY = True\n...     CELERY_TASK_PUBLISH_RETRY_POLICY = {\"max_retries\": 2,\n...                                         \"interval_start\": 10,\n...                                         \"interval_step\": 0,\n...                                         \"interval_max\": 10}\n... \"\"\"% dict(server=link_server))\n\n&gt;&gt;&gt; print system(buildout),\nUninstalling celery.\nInstalling celery.\ncelery: Generated config file /sample-buildout/parts/celery/celeryconfig.py.\nGenerated script '/sample-buildout/bin/celeryctl'.\nGenerated script '/sample-buildout/bin/celeryd'.\n</pre>\n<p>Let\u2019s verify the generated config data:</p>\n<pre>&gt;&gt;&gt; cat(sample_buildout, 'parts', 'celery', 'celeryconfig.py')\nCELERY_TASK_PUBLISH_RETRY = True\nCELERY_TASK_PUBLISH_RETRY_POLICY = {\"max_retries\": 2,\n\"interval_start\": 10,\n\"interval_step\": 0,\n\"interval_max\": 10}\n&lt;BLANKLINE&gt;\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6573701, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "36aa5e1ea0dc7e730fc906911c3284b2", "sha256": "dbc42e203b3f735520a6f5c2ce7a4e6a3d64ea41917c39ef6b0195ba6c08e0b8"}, "downloads": -1, "filename": "collective.recipe.celery-1.0.tar.gz", "has_sig": false, "md5_digest": "36aa5e1ea0dc7e730fc906911c3284b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17380, "upload_time": "2011-08-15T15:54:57", "upload_time_iso_8601": "2011-08-15T15:54:57.686586Z", "url": "https://files.pythonhosted.org/packages/17/a6/a64c016b63f32e7191246d9b8537634221545945331b75b50edf79c4fc81/collective.recipe.celery-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36aa5e1ea0dc7e730fc906911c3284b2", "sha256": "dbc42e203b3f735520a6f5c2ce7a4e6a3d64ea41917c39ef6b0195ba6c08e0b8"}, "downloads": -1, "filename": "collective.recipe.celery-1.0.tar.gz", "has_sig": false, "md5_digest": "36aa5e1ea0dc7e730fc906911c3284b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17380, "upload_time": "2011-08-15T15:54:57", "upload_time_iso_8601": "2011-08-15T15:54:57.686586Z", "url": "https://files.pythonhosted.org/packages/17/a6/a64c016b63f32e7191246d9b8537634221545945331b75b50edf79c4fc81/collective.recipe.celery-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:56 2020"}