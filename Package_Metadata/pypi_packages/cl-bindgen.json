{"info": {"author": "Stuart Dilts", "author_email": "stuart.dilts@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "# cl-bindgen\n\nA command line tool and library for creating Common Lisp language bindings\nfrom C header files\n\nFeatures:\n+ Generates CFFI bindings for function declarations, enums, variables, unions,\n  and structures.\n+ Handles nested and anonymous structures, unions, and enums.\n+ Warns when it cannot produce a correct binding.\n+ Documentation comments from the C source files are lispified and\n  included with the generated bindings when available.\n+ Provides a powerful way to customize how names are translated into\n  lisp symbols.\n\n## Installation\ncl-bindgen requires `libclang`, which is not installed with the other Python\ndependencies and not available on PyPi. It is recommended to install it first before installing\ncl-bindgen. Use your distribution's package manager to install it.\n\nOnce `libclang` is installed, you can then install `cl-bindgen` from\nsource or from PyPI.\n\nFrom PyPI:\n``` bash\npip install cl-bindgen\n```\nFrom source:\n``` bash\ngit clone --depth=1 https://github.com/sdilts/cl-bindgen\ncd cl-bindgen\npip install --user .\n```\n## Processing individual files\nTo process individual files, use the `f` command and specify one or\nmore files to process. By default, output will be printed to\nstdout, but the output file can be specified with the `-o` option. To see\na full list of options, run `cl-bindgen f -h`.\n\n``` bash\n# Process test.h and print the results to stdout:\ncl-bindgen f test.h\n# Process the files test1.h, test2.h, and place the output in output.lisp:\ncl-bindgen f -o output.lisp test1.h test2.h\n```\n\n## Batch file processing\ncl-bindgen can use a yaml file to process many header\nfiles with a single invocation. Use the `b` command\nto specify one or more batch files to process:\n\n``` bash\ncl-bindgen b my_library.yaml\n```\n\n### Batch file format\nBatch files use the YAML format. Multiple documents can be contained in each input file.\n\nRequired Fields:\n+ `output` : where to place the generated code\n+ `files` : a list of files to process\n\nOptional Fields:\n+ `package` : The name of the Common Lisp package of the generated file\n+ `arguments` : Arguments to pass to clang\n+ `force` : Ignore errors while parsing. Valid values are `True` or `False`\n\nTo see example batch files, look in the\n[examples](https://github.com/sdilts/cl-bindgen/tree/master/examples)\ndirectory.\n\n## Handling Include Directories and Clang Arguments\n\nIf you need to specify additional command line arguments to the clang\nprocessor, you can use the `-a` option, and list any clang arguments after.\n\n``` bash\ncl-bindgen b batch_file.yaml -a -I include_dir1 -I include_dir2\n# Use -- to stop collecting clang arguments:\ncl-bindgen f -a `pkg-config --cflags mylibrary` -- header.h\n```\n\nIf a header file isn't found while processing the input files,\ncl-bindgen will halt and produce no output. This is to avoid producing\nincorrect bindings: while bindings can still be produced when header\nfiles are missing, they are likely to be incorrect. To ignore missing\nheader files and other fatal errors, the `-f` flag can be used:\n\n``` bash\ncl-bindgen b -f batch_file.yaml\ncl-bindgen f -f header.c\n```\n\n### System Include Directories\n\ncl-bindgen doesn't currently know where to find system include\ndirectories. This will cause any file that includes standard headers to\nnot be processed without specifying the `-f` option.\n\nTo find the system include directory, run the following command, and\nreplace `$ANY_C_FILE` with any C file.\n```bash\nclang -### $ANY_C_FILE\n```\nFind `\"-resource-dir\"` in the produced output. There should be a\nfile path listed right after. For example, `\"/usr/lib64/clang/9.0.1/\"`.\nAdd `include` to the end of the path to get the system include\ndirectory.\n\n## Customizing the behavior of cl-bindgen\ncl-bindgen attempts to provide a reasonable interface that is usable\nin most cases. However, if you need to customize how C names are\nconverted into lisp names or embed cl-bindgen into another\napplication, cl-bindgen is available as a library.\n\nThe `cl_bindgen` package is broken up into three modules: the `processfile`,\n`mangler` and `util` modules. The `processfile` module provides the\nfunctions to generate the lisp bindings, the `mangler` module provides\nfunctions to convert C names into lisp names, and the `util` module\nprovides functions to use batch files and cl-bingen's command line\ninterface.\n\n### The `processfile` Module\n\nThis module exports two functions: `process_file` and `process_files`,\nwhich work on a single header file or many, respectively. Both\nfunctions take two arguments: the file(s) to be processed and an\n`ProcessOptions` object.\n\nThe `ProcessOptions`class is the way to specify how the\nprocessing functions generate their output. It has the following\nfields:\n\n+ `typedef_mangers`, `enum_manglers`, `type_manglers`, `name_manglers`\n  and `constant_manglers` : See the [mangler module section](#the-mangler-module)\n  for what these do.\n+ `output` : The path of the file where the output is\n  placed. `\":stdout\"` or `\":stderr\"` can be specified to use standard\n  out or standard error.\n+ `package` : If not `None`, this specifies the package the the\n  generated output should be placed in.\n+ `arguments` : The command line arguments that should be given to the\n  clang processor.\n+ `force` : If true, then ignore errors while parsing the input files.\n\n### The `mangler` Module\n\ncl-bindgen uses a set of classes called manglers to translate C\nnames so that they follow lisp naming conventions. Each mangler class\nprovides one or more transformations to a symbol. For example, the\n`UnderscoreMangler` class converts underscores (`_`) into dashes\n(`-`). A series of manglers are applied to each C name to make it\nfollow lisp naming conventions.\n\nTo maximize customization, a list of manglers is associated with each\ntype of name that can be converted. enums, variable names, typedefs,\nconstants, and record types all use a different set of manglers.\n\nBuilt-in manglers:\n+ `UnderscoreMangler` : Converts underscores to dashes.\n+ `ConstantMangler` : Converts a string to follow Common Lisp's constant style\n  recomendation.\n+ `KeywordMangler` : Adds a `:` to the beginning of a string to make it a symbol.\n   Doesn't perform any action if the string has a package prefix.\n+ `RegexSubMangler` : Substitutes the substring matched by a regex with the given string.\n\n#### Mangler Interface\n\nMangler classes follow a simple interface:\n+ `can_mangle(string)`: returns true if the mangler can perform its\n  operations on the given string\n+ `mangle(string)`: returns a string with the desired transformations\n  applied.\n\n### The `util` Module\n\nThe `util` module provides two functions: `process_batch_file` and\n`dispatch_from_arguments`.\n\n+ `process_batch_file(batch_file, options)` : Processes the given\n  batch file using `options` as the default options.\n+ `dispatch_from_arguments(arguments, options)` : Uses the provided\n  command line arguments to perform the actions of cl-bindgen using\n  `options` as the default options.\n\n### Examples\n\nThe best example of how to use cl-bindgen as a library is to look at its main\nfunction found in\n[cl\\_bindgen/\\_\\_main\\_\\_.py](https://github.com/sdilts/cl-bindgen/blob/master/cl_bindgen/__main__.py).\nIn it, cl-bindgen's default options are set, then passed to `dispatch_from_arguments`\nto run the utility.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/sdilts/cl-bindgen/archive/1.1.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sdilts/cl-bindgen", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cl-bindgen", "package_url": "https://pypi.org/project/cl-bindgen/", "platform": "", "project_url": "https://pypi.org/project/cl-bindgen/", "project_urls": {"Download": "https://github.com/sdilts/cl-bindgen/archive/1.1.2.tar.gz", "Homepage": "https://github.com/sdilts/cl-bindgen"}, "release_url": "https://pypi.org/project/cl-bindgen/1.1.2/", "requires_dist": null, "requires_python": "", "summary": "A command line tool and library for creating Common Lisp language bindings from C header files", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cl-bindgen</h1>\n<p>A command line tool and library for creating Common Lisp language bindings\nfrom C header files</p>\n<p>Features:</p>\n<ul>\n<li>Generates CFFI bindings for function declarations, enums, variables, unions,\nand structures.</li>\n<li>Handles nested and anonymous structures, unions, and enums.</li>\n<li>Warns when it cannot produce a correct binding.</li>\n<li>Documentation comments from the C source files are lispified and\nincluded with the generated bindings when available.</li>\n<li>Provides a powerful way to customize how names are translated into\nlisp symbols.</li>\n</ul>\n<h2>Installation</h2>\n<p>cl-bindgen requires <code>libclang</code>, which is not installed with the other Python\ndependencies and not available on PyPi. It is recommended to install it first before installing\ncl-bindgen. Use your distribution's package manager to install it.</p>\n<p>Once <code>libclang</code> is installed, you can then install <code>cl-bindgen</code> from\nsource or from PyPI.</p>\n<p>From PyPI:</p>\n<pre>pip install cl-bindgen\n</pre>\n<p>From source:</p>\n<pre>git clone --depth<span class=\"o\">=</span><span class=\"m\">1</span> https://github.com/sdilts/cl-bindgen\n<span class=\"nb\">cd</span> cl-bindgen\npip install --user .\n</pre>\n<h2>Processing individual files</h2>\n<p>To process individual files, use the <code>f</code> command and specify one or\nmore files to process. By default, output will be printed to\nstdout, but the output file can be specified with the <code>-o</code> option. To see\na full list of options, run <code>cl-bindgen f -h</code>.</p>\n<pre><span class=\"c1\"># Process test.h and print the results to stdout:</span>\ncl-bindgen f test.h\n<span class=\"c1\"># Process the files test1.h, test2.h, and place the output in output.lisp:</span>\ncl-bindgen f -o output.lisp test1.h test2.h\n</pre>\n<h2>Batch file processing</h2>\n<p>cl-bindgen can use a yaml file to process many header\nfiles with a single invocation. Use the <code>b</code> command\nto specify one or more batch files to process:</p>\n<pre>cl-bindgen b my_library.yaml\n</pre>\n<h3>Batch file format</h3>\n<p>Batch files use the YAML format. Multiple documents can be contained in each input file.</p>\n<p>Required Fields:</p>\n<ul>\n<li><code>output</code> : where to place the generated code</li>\n<li><code>files</code> : a list of files to process</li>\n</ul>\n<p>Optional Fields:</p>\n<ul>\n<li><code>package</code> : The name of the Common Lisp package of the generated file</li>\n<li><code>arguments</code> : Arguments to pass to clang</li>\n<li><code>force</code> : Ignore errors while parsing. Valid values are <code>True</code> or <code>False</code></li>\n</ul>\n<p>To see example batch files, look in the\n<a href=\"https://github.com/sdilts/cl-bindgen/tree/master/examples\" rel=\"nofollow\">examples</a>\ndirectory.</p>\n<h2>Handling Include Directories and Clang Arguments</h2>\n<p>If you need to specify additional command line arguments to the clang\nprocessor, you can use the <code>-a</code> option, and list any clang arguments after.</p>\n<pre>cl-bindgen b batch_file.yaml -a -I include_dir1 -I include_dir2\n<span class=\"c1\"># Use -- to stop collecting clang arguments:</span>\ncl-bindgen f -a <span class=\"sb\">`</span>pkg-config --cflags mylibrary<span class=\"sb\">`</span> -- header.h\n</pre>\n<p>If a header file isn't found while processing the input files,\ncl-bindgen will halt and produce no output. This is to avoid producing\nincorrect bindings: while bindings can still be produced when header\nfiles are missing, they are likely to be incorrect. To ignore missing\nheader files and other fatal errors, the <code>-f</code> flag can be used:</p>\n<pre>cl-bindgen b -f batch_file.yaml\ncl-bindgen f -f header.c\n</pre>\n<h3>System Include Directories</h3>\n<p>cl-bindgen doesn't currently know where to find system include\ndirectories. This will cause any file that includes standard headers to\nnot be processed without specifying the <code>-f</code> option.</p>\n<p>To find the system include directory, run the following command, and\nreplace <code>$ANY_C_FILE</code> with any C file.</p>\n<pre>clang -### <span class=\"nv\">$ANY_C_FILE</span>\n</pre>\n<p>Find <code>\"-resource-dir\"</code> in the produced output. There should be a\nfile path listed right after. For example, <code>\"/usr/lib64/clang/9.0.1/\"</code>.\nAdd <code>include</code> to the end of the path to get the system include\ndirectory.</p>\n<h2>Customizing the behavior of cl-bindgen</h2>\n<p>cl-bindgen attempts to provide a reasonable interface that is usable\nin most cases. However, if you need to customize how C names are\nconverted into lisp names or embed cl-bindgen into another\napplication, cl-bindgen is available as a library.</p>\n<p>The <code>cl_bindgen</code> package is broken up into three modules: the <code>processfile</code>,\n<code>mangler</code> and <code>util</code> modules. The <code>processfile</code> module provides the\nfunctions to generate the lisp bindings, the <code>mangler</code> module provides\nfunctions to convert C names into lisp names, and the <code>util</code> module\nprovides functions to use batch files and cl-bingen's command line\ninterface.</p>\n<h3>The <code>processfile</code> Module</h3>\n<p>This module exports two functions: <code>process_file</code> and <code>process_files</code>,\nwhich work on a single header file or many, respectively. Both\nfunctions take two arguments: the file(s) to be processed and an\n<code>ProcessOptions</code> object.</p>\n<p>The <code>ProcessOptions</code>class is the way to specify how the\nprocessing functions generate their output. It has the following\nfields:</p>\n<ul>\n<li><code>typedef_mangers</code>, <code>enum_manglers</code>, <code>type_manglers</code>, <code>name_manglers</code>\nand <code>constant_manglers</code> : See the <a href=\"#the-mangler-module\" rel=\"nofollow\">mangler module section</a>\nfor what these do.</li>\n<li><code>output</code> : The path of the file where the output is\nplaced. <code>\":stdout\"</code> or <code>\":stderr\"</code> can be specified to use standard\nout or standard error.</li>\n<li><code>package</code> : If not <code>None</code>, this specifies the package the the\ngenerated output should be placed in.</li>\n<li><code>arguments</code> : The command line arguments that should be given to the\nclang processor.</li>\n<li><code>force</code> : If true, then ignore errors while parsing the input files.</li>\n</ul>\n<h3>The <code>mangler</code> Module</h3>\n<p>cl-bindgen uses a set of classes called manglers to translate C\nnames so that they follow lisp naming conventions. Each mangler class\nprovides one or more transformations to a symbol. For example, the\n<code>UnderscoreMangler</code> class converts underscores (<code>_</code>) into dashes\n(<code>-</code>). A series of manglers are applied to each C name to make it\nfollow lisp naming conventions.</p>\n<p>To maximize customization, a list of manglers is associated with each\ntype of name that can be converted. enums, variable names, typedefs,\nconstants, and record types all use a different set of manglers.</p>\n<p>Built-in manglers:</p>\n<ul>\n<li><code>UnderscoreMangler</code> : Converts underscores to dashes.</li>\n<li><code>ConstantMangler</code> : Converts a string to follow Common Lisp's constant style\nrecomendation.</li>\n<li><code>KeywordMangler</code> : Adds a <code>:</code> to the beginning of a string to make it a symbol.\nDoesn't perform any action if the string has a package prefix.</li>\n<li><code>RegexSubMangler</code> : Substitutes the substring matched by a regex with the given string.</li>\n</ul>\n<h4>Mangler Interface</h4>\n<p>Mangler classes follow a simple interface:</p>\n<ul>\n<li><code>can_mangle(string)</code>: returns true if the mangler can perform its\noperations on the given string</li>\n<li><code>mangle(string)</code>: returns a string with the desired transformations\napplied.</li>\n</ul>\n<h3>The <code>util</code> Module</h3>\n<p>The <code>util</code> module provides two functions: <code>process_batch_file</code> and\n<code>dispatch_from_arguments</code>.</p>\n<ul>\n<li><code>process_batch_file(batch_file, options)</code> : Processes the given\nbatch file using <code>options</code> as the default options.</li>\n<li><code>dispatch_from_arguments(arguments, options)</code> : Uses the provided\ncommand line arguments to perform the actions of cl-bindgen using\n<code>options</code> as the default options.</li>\n</ul>\n<h3>Examples</h3>\n<p>The best example of how to use cl-bindgen as a library is to look at its main\nfunction found in\n<a href=\"https://github.com/sdilts/cl-bindgen/blob/master/cl_bindgen/__main__.py\" rel=\"nofollow\">cl_bindgen/__main__.py</a>.\nIn it, cl-bindgen's default options are set, then passed to <code>dispatch_from_arguments</code>\nto run the utility.</p>\n\n          </div>"}, "last_serial": 6845064, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "30e96b7e5ba20925cf4628028f3550de", "sha256": "7f13aa27a51ae34ae395cb7f8ec6404aa20012eedaaa40c67b8c4f49a685fa68"}, "downloads": -1, "filename": "cl_bindgen-1.0.1.tar.gz", "has_sig": false, "md5_digest": "30e96b7e5ba20925cf4628028f3550de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12655, "upload_time": "2020-02-05T20:27:44", "upload_time_iso_8601": "2020-02-05T20:27:44.791713Z", "url": "https://files.pythonhosted.org/packages/18/2f/473097dce24c88d3c236823259cc4c16b59dd2fd54165914e4fd2b1bebc6/cl_bindgen-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "a389c912e367c792ca1b185094e97053", "sha256": "73336f103052e8cf417e0b78e8a106a9465e5d7460ac30889f20be7f9e06b8e1"}, "downloads": -1, "filename": "cl_bindgen-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a389c912e367c792ca1b185094e97053", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12622, "upload_time": "2020-02-05T21:05:09", "upload_time_iso_8601": "2020-02-05T21:05:09.179676Z", "url": "https://files.pythonhosted.org/packages/ef/16/8c7d2d7a0d4eb1f818ba4c7b2e52f986878b52b918ca3ccab1ec8e4e8adb/cl_bindgen-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "56402d02033823951eb0f9953de206cc", "sha256": "57a5ac750eab3c7c2792d5fb945ff7d4e09c774c8ae6dec6e055450c7dc59594"}, "downloads": -1, "filename": "cl_bindgen-1.0.3.tar.gz", "has_sig": false, "md5_digest": "56402d02033823951eb0f9953de206cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12981, "upload_time": "2020-02-06T18:55:34", "upload_time_iso_8601": "2020-02-06T18:55:34.754437Z", "url": "https://files.pythonhosted.org/packages/e8/43/c07b187cd835e4ca130ff76e84be12127a9ce90a6334fcd583eaab51b290/cl_bindgen-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "066ad38121ec5a90f86798a092c6e687", "sha256": "98dcc526e2b2bea5ed43e24a20ec5f9b1bcef94ee538773ef339658197605035"}, "downloads": -1, "filename": "cl_bindgen-1.1.0.tar.gz", "has_sig": false, "md5_digest": "066ad38121ec5a90f86798a092c6e687", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14856, "upload_time": "2020-02-27T01:51:20", "upload_time_iso_8601": "2020-02-27T01:51:20.706716Z", "url": "https://files.pythonhosted.org/packages/5a/31/a30839ebf07c47d9fc62eefc5e02d7ff55e4adea6bf8d1aa94537179caa3/cl_bindgen-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "213abf8ee885c0be02fb069bc40ed8fe", "sha256": "d92c117bfb69a64013a8f3efe7ee2fb0e72e00ed2f959b656b2ba33b14bca833"}, "downloads": -1, "filename": "cl_bindgen-1.1.1.tar.gz", "has_sig": false, "md5_digest": "213abf8ee885c0be02fb069bc40ed8fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14853, "upload_time": "2020-02-27T02:33:52", "upload_time_iso_8601": "2020-02-27T02:33:52.108846Z", "url": "https://files.pythonhosted.org/packages/ea/06/b314724da332d82a9f05a3940e68add2438289b96b258164083036c0d71c/cl_bindgen-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "dca8a0898cdc6192bfb2ba3cda107a8b", "sha256": "fc89d8946463171bd009904301178081fe6d0a6be0b9dce594ba6f1aeec66c5f"}, "downloads": -1, "filename": "cl_bindgen-1.1.2.tar.gz", "has_sig": false, "md5_digest": "dca8a0898cdc6192bfb2ba3cda107a8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15386, "upload_time": "2020-03-19T18:37:16", "upload_time_iso_8601": "2020-03-19T18:37:16.323815Z", "url": "https://files.pythonhosted.org/packages/8e/db/f1dc7ececb4ba4b5a1a10f285e3f135c287d0e3b999db7a38ade9524df51/cl_bindgen-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dca8a0898cdc6192bfb2ba3cda107a8b", "sha256": "fc89d8946463171bd009904301178081fe6d0a6be0b9dce594ba6f1aeec66c5f"}, "downloads": -1, "filename": "cl_bindgen-1.1.2.tar.gz", "has_sig": false, "md5_digest": "dca8a0898cdc6192bfb2ba3cda107a8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15386, "upload_time": "2020-03-19T18:37:16", "upload_time_iso_8601": "2020-03-19T18:37:16.323815Z", "url": "https://files.pythonhosted.org/packages/8e/db/f1dc7ececb4ba4b5a1a10f285e3f135c287d0e3b999db7a38ade9524df51/cl_bindgen-1.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:07 2020"}