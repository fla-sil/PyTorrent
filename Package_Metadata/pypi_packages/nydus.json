{"info": {"author": "DISQUS", "author_email": "opensource@disqus.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: System Administrators", "Operating System :: OS Independent", "Topic :: Software Development"], "description": "Nydus\n=====\n\nGeneric database utilities, including connection clustering and routing so you can scale like a pro.\n\nThe following example creates a Redis connection cluster which will distribute reads and writes based on a simple modulus lookup of the hashed key:\n\n.. code:: python\n\n    from nydus.db import create_cluster\n\n    redis = create_cluster({\n        'backend': 'nydus.db.backends.redis.Redis',\n        'router': 'nydus.db.routers.keyvalue.PartitionRouter',\n        'hosts': {\n            0: {'db': 0},\n            1: {'db': 1},\n            2: {'db': 2},\n        }\n    })\n\n    res = redis.incr('foo')\n\n    assert res == 1\n\n\nnydus.db.create_cluster\n-----------------------\n\nThe create_cluster function is a simple helper to configure a ``Cluster`` based on a simple dict config.\n\nThere are two required keyword arguments:\n\n* ``backend``: full path to the backend class, which should extend ``nydus.db.backends.BaseConnection``.\n\n* ``hosts``: a dictionary, where the key is an ordered numeric value, and the result is a dict of connection options.\n\n  (the keys are numeric values simply for readability in configuration)\n\n* ``defaults``: a dictionary of default settings for all hosts to inherit from.\n\nOptionally, you may also specify a value for ``router``, which is the full path to the router class,\nwhich must extend ``nydus.db.routers.BaseRouter``.\n\nDistributed Queries\n-------------------\n\nIn some cases you may want to execute a query on many nodes (in parallel). Nydus has built-in support for this when any routing function\nreturns a cluster of nodes:\n\n.. code:: python\n\n    from nydus.db import create_cluster\n    >>>\n    # by not specifying a router all queries are executed on all hosts\n    redis = create_cluster({\n        'backend': 'nydus.db.backends.redis.Redis',\n        'hosts': {\n            0: {'db': 0},\n            1: {'db': 1},\n            2: {'db': 2},\n        }\n    })\n    >>>\n    # map the query over all connections returned by the default router\n    res = redis.incr('foo')\n    >>>\n    assert type(res) == list\n    assert len(res) == 3\n\nYou can also map many queries (utilizing an internal queue) over connections (again, returned by the router):\n\n.. code:: python\n\n    with redis.map() as conn:\n        results = [conn.incr(k) for k in keys]\n\nAs of release 0.5.0, the map() function now supports pipelines, and the included Redis backend will pipeline commands\nwherever possible.\n\nRedis\n-----\n\nNydus was originally designed as a toolkit to expand on the usage of Redis at DISQUS. While it does provide\na framework for building clusters that are not Redis, much of the support has gone into providing utilities\nfor routing and querying on Redis clusters.\n\nYou can configure the Redis client for a connection by specifying it's full path:\n\n.. code:: python\n\n    redis = create_cluster({\n        'backend': 'nydus.db.backends.redis.Redis',\n        'hosts': {\n            0: {'db': 0},\n        },\n    })\n\nThe available host options are:\n\n* host\n* port\n* db\n* timeout\n* password\n* identifier\n\nThe Redis client also supports pipelines via the map command. This means that all commands will hit servers at most\nas of once:\n\n.. code:: python\n\n    with redis.map() as conn:\n        conn.set('a', 1)\n        conn.incr('a')\n        results = [conn.get('a'), conn.get('b')]\n    results['a'] == 2\n    results['b'] == None\n\nSimple Partition Router\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are also several options for builtin routing. The easiest is a simple partition router, which is just a simple\nhash on the key:\n\n.. code:: python\n\n    redis = create_cluster({\n        'backend': 'nydus.db.backends.redis.Redis',\n        'router': 'nydus.db.routers.keyvalue.PartitionRouter',\n        'hosts': {\n            0: {'db': 0},\n        },\n    })\n\nConsistent Hashing Router\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn improvement upon hashing, Nydus provides a Ketama-based consistent hashing router:\n\n.. code:: python\n\n    redis = create_cluster({\n        'backend': 'nydus.db.backends.redis.Redis',\n        'router': 'nydus.db.routers.keyvalue.ConsistentHashingRouter',\n        'hosts': {\n            0: {'db': 0},\n        },\n    })\n\nRound Robin Router\n~~~~~~~~~~~~~~~~~~\n\nAn additional option for distributing queries is the round robin router:\n\n.. code:: python\n\n    redis = create_cluster({\n        'backend': 'nydus.db.backends.redis.Redis',\n        'router': 'nydus.db.routers.RoundRobinRouter',\n        'hosts': {\n            0: {'db': 0},\n        },\n    })\n\nPycassa\n-------\n\nBasic connection management for pycassa (Cassandra) clusters is supported, but we use a non-standard syntax\nfor creating clusters as routing behavior and per-connection options are not useful in this context:\n\n.. code:: python\n\n    pycassa = create_cluster({\n        'backend': 'nydus.db.backends.pycassa.Pycassa',\n        'hosts': ['localhost'],\n        'keyspace': 'test',\n    })\n\n.. note:: Pycassa handles routing of hosts internally, which means things like ``map`` have no affect.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/disqus/nydus", "keywords": null, "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "nydus", "package_url": "https://pypi.org/project/nydus/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/nydus/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/disqus/nydus"}, "release_url": "https://pypi.org/project/nydus/0.11.0/", "requires_dist": null, "requires_python": null, "summary": "Connection utilities", "version": "0.11.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Generic database utilities, including connection clustering and routing so you can scale like a pro.</p>\n<p>The following example creates a Redis connection cluster which will distribute reads and writes based on a simple modulus lookup of the hashed key:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nydus.db</span> <span class=\"kn\">import</span> <span class=\"n\">create_cluster</span>\n\n<span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">create_cluster</span><span class=\"p\">({</span>\n    <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.backends.redis.Redis'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'router'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.routers.keyvalue.PartitionRouter'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n        <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n        <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<div id=\"nydus-db-create-cluster\">\n<h2>nydus.db.create_cluster</h2>\n<p>The create_cluster function is a simple helper to configure a <tt>Cluster</tt> based on a simple dict config.</p>\n<p>There are two required keyword arguments:</p>\n<ul>\n<li><p><tt>backend</tt>: full path to the backend class, which should extend <tt>nydus.db.backends.BaseConnection</tt>.</p>\n</li>\n<li><p><tt>hosts</tt>: a dictionary, where the key is an ordered numeric value, and the result is a dict of connection options.</p>\n<p>(the keys are numeric values simply for readability in configuration)</p>\n</li>\n<li><p><tt>defaults</tt>: a dictionary of default settings for all hosts to inherit from.</p>\n</li>\n</ul>\n<p>Optionally, you may also specify a value for <tt>router</tt>, which is the full path to the router class,\nwhich must extend <tt>nydus.db.routers.BaseRouter</tt>.</p>\n</div>\n<div id=\"distributed-queries\">\n<h2>Distributed Queries</h2>\n<p>In some cases you may want to execute a query on many nodes (in parallel). Nydus has built-in support for this when any routing function\nreturns a cluster of nodes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nydus.db</span> <span class=\"kn\">import</span> <span class=\"n\">create_cluster</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"c1\"># by not specifying a router all queries are executed on all hosts</span>\n<span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">create_cluster</span><span class=\"p\">({</span>\n    <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.backends.redis.Redis'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n        <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n        <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"c1\"># map the query over all connections returned by the default router</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"k\">assert</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">list</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre>\n<p>You can also map many queries (utilizing an internal queue) over connections (again, returned by the router):</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">]</span>\n</pre>\n<p>As of release 0.5.0, the map() function now supports pipelines, and the included Redis backend will pipeline commands\nwherever possible.</p>\n</div>\n<div id=\"redis\">\n<h2>Redis</h2>\n<p>Nydus was originally designed as a toolkit to expand on the usage of Redis at DISQUS. While it does provide\na framework for building clusters that are not Redis, much of the support has gone into providing utilities\nfor routing and querying on Redis clusters.</p>\n<p>You can configure the Redis client for a connection by specifying it\u2019s full path:</p>\n<pre><span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">create_cluster</span><span class=\"p\">({</span>\n    <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.backends.redis.Redis'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</pre>\n<p>The available host options are:</p>\n<ul>\n<li>host</li>\n<li>port</li>\n<li>db</li>\n<li>timeout</li>\n<li>password</li>\n<li>identifier</li>\n</ul>\n<p>The Redis client also supports pipelines via the map command. This means that all commands will hit servers at most\nas of once:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)]</span>\n<span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"kc\">None</span>\n</pre>\n<div id=\"simple-partition-router\">\n<h3>Simple Partition Router</h3>\n<p>There are also several options for builtin routing. The easiest is a simple partition router, which is just a simple\nhash on the key:</p>\n<pre><span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">create_cluster</span><span class=\"p\">({</span>\n    <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.backends.redis.Redis'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'router'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.routers.keyvalue.PartitionRouter'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"consistent-hashing-router\">\n<h3>Consistent Hashing Router</h3>\n<p>An improvement upon hashing, Nydus provides a Ketama-based consistent hashing router:</p>\n<pre><span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">create_cluster</span><span class=\"p\">({</span>\n    <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.backends.redis.Redis'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'router'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.routers.keyvalue.ConsistentHashingRouter'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"round-robin-router\">\n<h3>Round Robin Router</h3>\n<p>An additional option for distributing queries is the round robin router:</p>\n<pre><span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">create_cluster</span><span class=\"p\">({</span>\n    <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.backends.redis.Redis'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'router'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.routers.RoundRobinRouter'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</pre>\n</div>\n</div>\n<div id=\"pycassa\">\n<h2>Pycassa</h2>\n<p>Basic connection management for pycassa (Cassandra) clusters is supported, but we use a non-standard syntax\nfor creating clusters as routing behavior and per-connection options are not useful in this context:</p>\n<pre><span class=\"n\">pycassa</span> <span class=\"o\">=</span> <span class=\"n\">create_cluster</span><span class=\"p\">({</span>\n    <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'nydus.db.backends.pycassa.Pycassa'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'localhost'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'keyspace'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</pre>\n<div>\n<p>Note</p>\n<p>Pycassa handles routing of hosts internally, which means things like <tt>map</tt> have no affect.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1518849, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "97141cdb9e4b36f617bef4d7e46b9bac", "sha256": "12369b051c8306b58547226d63e2bf6dc86d59acc3a363723bc084a7581cb40f"}, "downloads": -1, "filename": "nydus-0.1.tar.gz", "has_sig": false, "md5_digest": "97141cdb9e4b36f617bef4d7e46b9bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10654, "upload_time": "2011-08-15T20:13:53", "upload_time_iso_8601": "2011-08-15T20:13:53.859670Z", "url": "https://files.pythonhosted.org/packages/65/c6/9eec85c4aae7f44867f8071cc3802463d52ac19ff73aa89d3207a595b885/nydus-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cc4f7fcf795b0dc5da4414fcb217f8fa", "sha256": "fcc2e03042573e420badcc6719b59e548c923cc41bc97d5a72ab21a627a39a98"}, "downloads": -1, "filename": "nydus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cc4f7fcf795b0dc5da4414fcb217f8fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10646, "upload_time": "2011-08-15T20:59:49", "upload_time_iso_8601": "2011-08-15T20:59:49.517896Z", "url": "https://files.pythonhosted.org/packages/aa/b1/55c57063037de28558a269510996d5fff084b45d1d114550f42fd0905c39/nydus-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "de858f7d04689fd8207d3ec045468d39", "sha256": "70762717dd95f619c04dbf33eef57e98e6d79d59cafdfe211fb6f254f29b5fa7"}, "downloads": -1, "filename": "nydus-0.1.2.tar.gz", "has_sig": false, "md5_digest": "de858f7d04689fd8207d3ec045468d39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10674, "upload_time": "2011-08-16T20:46:31", "upload_time_iso_8601": "2011-08-16T20:46:31.477850Z", "url": "https://files.pythonhosted.org/packages/e1/01/057f582061134613b6ace70136a85cf8f6941db6fc505b6146c738e5d1ef/nydus-0.1.2.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "678932aaf1a1a0fdcbc0ddccaef49409", "sha256": "013f0cdc920dfc34befb8637102bc80410c2f5bcb676d903bd690fa9720a9a16"}, "downloads": -1, "filename": "nydus-0.10.0.tar.gz", "has_sig": false, "md5_digest": "678932aaf1a1a0fdcbc0ddccaef49409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25739, "upload_time": "2012-10-30T01:05:58", "upload_time_iso_8601": "2012-10-30T01:05:58.090975Z", "url": "https://files.pythonhosted.org/packages/77/65/079c7346de7ff074d97a355466ce8cebe23e2df5d796d2ca0bdb003ebecf/nydus-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "8d2b3705a182a01d517519c0ae2be6b3", "sha256": "0eaca95861469d21ae1d87f431f6bf24337ea9bd52a043f8cadaf7f420d54ef0"}, "downloads": -1, "filename": "nydus-0.10.1.tar.gz", "has_sig": false, "md5_digest": "8d2b3705a182a01d517519c0ae2be6b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25762, "upload_time": "2012-10-30T07:26:46", "upload_time_iso_8601": "2012-10-30T07:26:46.107878Z", "url": "https://files.pythonhosted.org/packages/70/9f/e8e3c2a9ca177916d7c5d96a7c60ba3222b130ac674d3a3636430221a71f/nydus-0.10.1.tar.gz", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "4e2128e2cd14744cff8e2cba2b86d9d0", "sha256": "e9a725b029f35853f5f768f6c5dab86bf5a92a4935280915edf3f53f745a53bb"}, "downloads": -1, "filename": "nydus-0.10.2.tar.gz", "has_sig": false, "md5_digest": "4e2128e2cd14744cff8e2cba2b86d9d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25839, "upload_time": "2012-10-30T21:33:31", "upload_time_iso_8601": "2012-10-30T21:33:31.541651Z", "url": "https://files.pythonhosted.org/packages/65/34/0c960c23774511e8af9491e45ab082c1472025787c0420f921bffa553d8e/nydus-0.10.2.tar.gz", "yanked": false}], "0.10.3": [{"comment_text": "", "digests": {"md5": "be885ecac0a507ebffd08b3f7bdae18d", "sha256": "d2c52d2ba0f97b6c3b8ad942b54cf44361b741141909146490b3eeaaedd89668"}, "downloads": -1, "filename": "nydus-0.10.3.tar.gz", "has_sig": false, "md5_digest": "be885ecac0a507ebffd08b3f7bdae18d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25824, "upload_time": "2012-11-01T20:39:48", "upload_time_iso_8601": "2012-11-01T20:39:48.815070Z", "url": "https://files.pythonhosted.org/packages/29/96/920eb52b1ffaab970998ede1ec24c948da0238f17424b807f57aecd6d9cf/nydus-0.10.3.tar.gz", "yanked": false}], "0.10.4": [{"comment_text": "", "digests": {"md5": "ca596a882eb2d83803dad7b21341ba0d", "sha256": "bc048e8361e1373e8c04efc1eb40d6fae7551362c48cf36a32ebdc736323e644"}, "downloads": -1, "filename": "nydus-0.10.4.tar.gz", "has_sig": false, "md5_digest": "ca596a882eb2d83803dad7b21341ba0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27693, "upload_time": "2013-03-02T22:37:30", "upload_time_iso_8601": "2013-03-02T22:37:30.251534Z", "url": "https://files.pythonhosted.org/packages/3a/5c/29b73b5eacbd624b7c0cf3449e90189fa85052af13f75a95a8abd8e1e0a1/nydus-0.10.4.tar.gz", "yanked": false}], "0.10.5": [{"comment_text": "", "digests": {"md5": "ee6d383f15f60bc9983b7e390dc4402b", "sha256": "4586b2411d02849706835f28ac083b80b1f839dc866a7c6bd6272f01823c76cb"}, "downloads": -1, "filename": "nydus-0.10.5.tar.gz", "has_sig": false, "md5_digest": "ee6d383f15f60bc9983b7e390dc4402b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27678, "upload_time": "2013-03-14T17:51:11", "upload_time_iso_8601": "2013-03-14T17:51:11.801057Z", "url": "https://files.pythonhosted.org/packages/cd/7a/8d38c2576a5f3f14ee1a5dfabc794772343595fe48c6bf88b51ab36e027b/nydus-0.10.5.tar.gz", "yanked": false}], "0.10.6": [{"comment_text": "", "digests": {"md5": "97821cc8569784e054098bdbbafd9210", "sha256": "91399657ac3b2b4e576a18ab1bbd869a238b094bf5f94600876405c0b714b025"}, "downloads": -1, "filename": "nydus-0.10.6.tar.gz", "has_sig": false, "md5_digest": "97821cc8569784e054098bdbbafd9210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27928, "upload_time": "2013-04-29T17:18:37", "upload_time_iso_8601": "2013-04-29T17:18:37.003644Z", "url": "https://files.pythonhosted.org/packages/67/5c/1d2e28b32ebca18431d15bbe5c1180453855a0c800beeb487b9a06055055/nydus-0.10.6.tar.gz", "yanked": false}], "0.10.7": [{"comment_text": "", "digests": {"md5": "89ed21582f9cff79a8bca74854b05a64", "sha256": "e06e58dc74c62c0dbee15f4eb1af0d935426add37269f0079afb93d5eaf4d69b"}, "downloads": -1, "filename": "nydus-0.10.7.tar.gz", "has_sig": false, "md5_digest": "89ed21582f9cff79a8bca74854b05a64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28017, "upload_time": "2014-04-29T03:20:07", "upload_time_iso_8601": "2014-04-29T03:20:07.885187Z", "url": "https://files.pythonhosted.org/packages/ab/1a/e20e2869ce40fc7bb684b6a1fab729a7acd02132ddbc37cda4c9ed8e2884/nydus-0.10.7.tar.gz", "yanked": false}], "0.10.8": [{"comment_text": "", "digests": {"md5": "16ae2f106968db0ee6ee0b3d94ec7d55", "sha256": "32b3219614f7b3d50bda2a5b8fecab29e1dea7446f2f22e628b2ba7782bffa68"}, "downloads": -1, "filename": "nydus-0.10.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "16ae2f106968db0ee6ee0b3d94ec7d55", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 36311, "upload_time": "2014-08-13T17:51:36", "upload_time_iso_8601": "2014-08-13T17:51:36.671633Z", "url": "https://files.pythonhosted.org/packages/54/88/5be2b8f9c7df9b1555632119b1628d806b6c241a7f942331ce2f68212637/nydus-0.10.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a0b8ea435193ea46f3981967b21f1ee", "sha256": "d182d9a5e2e4a2a1836595549a089c4fc508da43d3f2d71787d65735b6276a6f"}, "downloads": -1, "filename": "nydus-0.10.8.tar.gz", "has_sig": false, "md5_digest": "7a0b8ea435193ea46f3981967b21f1ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28194, "upload_time": "2014-08-13T17:51:33", "upload_time_iso_8601": "2014-08-13T17:51:33.670170Z", "url": "https://files.pythonhosted.org/packages/bc/fe/30f337a55c28dcef92f07a967da13404b4a4e2e991fb5ff170efb5b11ed7/nydus-0.10.8.tar.gz", "yanked": false}], "0.10.9": [], "0.11.0": [{"comment_text": "", "digests": {"md5": "d7a69e5afd9f7606a61168791484d4c3", "sha256": "e7d12023160ec829a4394592a24162c96fe6ab1ea6c38a1543279595ae39cd45"}, "downloads": -1, "filename": "nydus-0.11.0.tar.gz", "has_sig": false, "md5_digest": "d7a69e5afd9f7606a61168791484d4c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28247, "upload_time": "2015-04-23T23:33:32", "upload_time_iso_8601": "2015-04-23T23:33:32.537371Z", "url": "https://files.pythonhosted.org/packages/45/2c/15635d5e23cc920a2880cb0e0301ab1b57d92559c41b07b250137cb3b08c/nydus-0.11.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "75f1fad7f565e02146d7b198e66d3580", "sha256": "5ae76148f4c88555568bfe42ea5551c5fff08d1be7fe4c5123ec9db035adf54b"}, "downloads": -1, "filename": "nydus-0.2.0.tar.gz", "has_sig": false, "md5_digest": "75f1fad7f565e02146d7b198e66d3580", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15858, "upload_time": "2012-01-18T19:34:53", "upload_time_iso_8601": "2012-01-18T19:34:53.708581Z", "url": "https://files.pythonhosted.org/packages/d6/4a/33cfea1c2be260781e2f6dffa01dbfa5df018abb6920e3f2370d039a52b4/nydus-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "de9493131f685036bd72ea511024f9db", "sha256": "1559c1808b25f235f88e749b3acea2534141c4dfdaf0ac4b8cb92652258ed0c0"}, "downloads": -1, "filename": "nydus-0.3.0.tar.gz", "has_sig": false, "md5_digest": "de9493131f685036bd72ea511024f9db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16138, "upload_time": "2012-01-26T03:03:04", "upload_time_iso_8601": "2012-01-26T03:03:04.679480Z", "url": "https://files.pythonhosted.org/packages/b5/f9/b34342bba3ba15cf0144620beda79098d2b4ae8529e7abb17b1fca06bb00/nydus-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "abbd7c259cd1dcc05ca839c937fa1fdd", "sha256": "ef56f0612e2c034cd415b93f8fa752109bf9ee0136616fe0c24bb81202671de6"}, "downloads": -1, "filename": "nydus-0.4.0.tar.gz", "has_sig": false, "md5_digest": "abbd7c259cd1dcc05ca839c937fa1fdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17149, "upload_time": "2012-02-17T02:03:00", "upload_time_iso_8601": "2012-02-17T02:03:00.647481Z", "url": "https://files.pythonhosted.org/packages/b5/db/9e2d40f33f1ad8b18b8cb131cf725b633b23ad2d1ca98d065d9ea882f4ea/nydus-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "80016eabb9eebf8b19c14958bd4f50bb", "sha256": "d394c870e8416f8909d4557143e629c7e139394da9a89103420295241f146583"}, "downloads": -1, "filename": "nydus-0.4.1.tar.gz", "has_sig": false, "md5_digest": "80016eabb9eebf8b19c14958bd4f50bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17179, "upload_time": "2012-02-18T00:06:40", "upload_time_iso_8601": "2012-02-18T00:06:40.270642Z", "url": "https://files.pythonhosted.org/packages/bb/a2/0b5b472e169365f59ccb4e8f4e85c65072470fcb379b63452c6f21f701d8/nydus-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "0b14b10d7a3ab4506fa2d24f4d271ac3", "sha256": "d95e95fd25b1ad2404cdb7082ec4343d4e04d9e321a691c25dd4e34a4027d1ac"}, "downloads": -1, "filename": "nydus-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0b14b10d7a3ab4506fa2d24f4d271ac3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19022, "upload_time": "2012-02-22T06:03:44", "upload_time_iso_8601": "2012-02-22T06:03:44.300398Z", "url": "https://files.pythonhosted.org/packages/b7/6a/59f305cca761d2755c101e548fa74ebe95111a8cd04dfe207f1a00abb107/nydus-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "36c84242053af3f75e9b6b05c6966744", "sha256": "bb5d0108a99096f54c80dadcadb3bf9639ae8cffb770cf756b0a6406b46cb4f1"}, "downloads": -1, "filename": "nydus-0.6.0.tar.gz", "has_sig": false, "md5_digest": "36c84242053af3f75e9b6b05c6966744", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20180, "upload_time": "2012-02-24T02:05:18", "upload_time_iso_8601": "2012-02-24T02:05:18.523901Z", "url": "https://files.pythonhosted.org/packages/4e/7c/a8fd095001938014e69226eb5b2760e43973680033595afab40e07cbcbd6/nydus-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "8ed81989683f89543569c6c2938fb60a", "sha256": "e7bda4bd615abc921dfe6d0d55a8982cd0f406f0a085c9ab5924843f22398fc1"}, "downloads": -1, "filename": "nydus-0.6.1.tar.gz", "has_sig": false, "md5_digest": "8ed81989683f89543569c6c2938fb60a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20205, "upload_time": "2012-02-24T02:31:32", "upload_time_iso_8601": "2012-02-24T02:31:32.294074Z", "url": "https://files.pythonhosted.org/packages/2a/d9/304d95ea8748d29c94f2f8ba5c699074eb02ed8dea04eb472ed24f102bbc/nydus-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "4ee10cf860d1b53255546980e01353d4", "sha256": "dedd2fbdf3e6407462e9d1b8a96f5ab7792496f6eb378c37f872760f95dc398f"}, "downloads": -1, "filename": "nydus-0.6.2.tar.gz", "has_sig": false, "md5_digest": "4ee10cf860d1b53255546980e01353d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19427, "upload_time": "2012-02-26T05:52:56", "upload_time_iso_8601": "2012-02-26T05:52:56.493111Z", "url": "https://files.pythonhosted.org/packages/4d/b4/a87131795496ce73c8d8308def611d91ff568a3f7fff361103ebb0da2014/nydus-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "51ffac0e85c6898fd1496c6056bdc0c3", "sha256": "dac4ebf8b7c90f1a5c9c54463a8962cf1cb8a2e5731e9e9e8afce96b42b1a1f3"}, "downloads": -1, "filename": "nydus-0.6.3.tar.gz", "has_sig": false, "md5_digest": "51ffac0e85c6898fd1496c6056bdc0c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20310, "upload_time": "2012-02-26T06:20:13", "upload_time_iso_8601": "2012-02-26T06:20:13.786809Z", "url": "https://files.pythonhosted.org/packages/0f/95/80e272e89026e76fe6fbe7cba7383d28a00b8169f81ca38e6803f417824e/nydus-0.6.3.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "a3cd46cab11785e69ce75d3f931f5e1d", "sha256": "b78b1b8aa50c6f2d8cf356c8cf65ade5824bb2dd962bcc276f69b688e77666fb"}, "downloads": -1, "filename": "nydus-0.7.0.tar.gz", "has_sig": false, "md5_digest": "a3cd46cab11785e69ce75d3f931f5e1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21158, "upload_time": "2012-03-15T22:01:17", "upload_time_iso_8601": "2012-03-15T22:01:17.823657Z", "url": "https://files.pythonhosted.org/packages/42/01/84e88945002a709d3f0c010c5f33a8e7d5b1c718799dbfb585d19b8274f7/nydus-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "af83c549c24b01d0f3623e032ac1aad1", "sha256": "19c773ce948777a65fc1da2b58cdb43af2da044dc1ac3bf101f329d3356ee6b9"}, "downloads": -1, "filename": "nydus-0.7.1.tar.gz", "has_sig": false, "md5_digest": "af83c549c24b01d0f3623e032ac1aad1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20643, "upload_time": "2012-03-26T23:59:46", "upload_time_iso_8601": "2012-03-26T23:59:46.944252Z", "url": "https://files.pythonhosted.org/packages/b1/81/ce339a88e1e7be989515d8eb304d194c4b9936f2f87d115c6c9a4c448b19/nydus-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "df16804b4ba18c5857526c97f1d8b922", "sha256": "87bf82952e73d5dc80c38a70afad963ea28679b888b057c66c9a336ea6d5e9c1"}, "downloads": -1, "filename": "nydus-0.7.2.tar.gz", "has_sig": false, "md5_digest": "df16804b4ba18c5857526c97f1d8b922", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20475, "upload_time": "2012-03-27T00:29:58", "upload_time_iso_8601": "2012-03-27T00:29:58.002510Z", "url": "https://files.pythonhosted.org/packages/0f/82/40f0af094b308a06ad60b8477767c1358d3c01dec92fc0200126e57708a4/nydus-0.7.2.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "029acd21e64c6313b3b46fa013c837fa", "sha256": "58fa410f24822cf56fa06e95fd9eccb794d378760bcc88662c1849aa2b513da6"}, "downloads": -1, "filename": "nydus-0.8.0.tar.gz", "has_sig": false, "md5_digest": "029acd21e64c6313b3b46fa013c837fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22404, "upload_time": "2012-04-12T23:08:55", "upload_time_iso_8601": "2012-04-12T23:08:55.232594Z", "url": "https://files.pythonhosted.org/packages/49/23/5ae3406ba871611c9545e49893b013da7cdad6a43ca8fd884d3ac8c0a44c/nydus-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "f3def39ca2f98e35df7599a256aaf22c", "sha256": "07f2a3bebb2ca95db6a59d125fa516ba9ba0d1f36f765997f02c5b16b7b08766"}, "downloads": -1, "filename": "nydus-0.8.1.tar.gz", "has_sig": false, "md5_digest": "f3def39ca2f98e35df7599a256aaf22c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22438, "upload_time": "2012-04-17T20:53:07", "upload_time_iso_8601": "2012-04-17T20:53:07.909233Z", "url": "https://files.pythonhosted.org/packages/68/87/3fc2164ed975641a2f0db46a3e535aa35cb05dda5c91c6f33ef61ee1025f/nydus-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "474394bae15ebe592fbb9d529be086e2", "sha256": "caf2d7fbb4cfa50cd81f49214b9ade9aff2edc877f2a9aca17bf0571c74695ab"}, "downloads": -1, "filename": "nydus-0.8.2.tar.gz", "has_sig": false, "md5_digest": "474394bae15ebe592fbb9d529be086e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22471, "upload_time": "2012-05-11T01:26:25", "upload_time_iso_8601": "2012-05-11T01:26:25.009354Z", "url": "https://files.pythonhosted.org/packages/cc/99/3820d4f2d541aad5977e1c54fdabacb6d1cebb695847ecc57f6577233612/nydus-0.8.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "dd8cf5c350a2bb0c991f9bb512fecc2e", "sha256": "4f755b592a4c2c8cd5f76804c23c853a073986e6d4eb5870725964cf7c165b6c"}, "downloads": -1, "filename": "nydus-0.9.0.tar.gz", "has_sig": false, "md5_digest": "dd8cf5c350a2bb0c991f9bb512fecc2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23376, "upload_time": "2012-05-18T23:53:06", "upload_time_iso_8601": "2012-05-18T23:53:06.186231Z", "url": "https://files.pythonhosted.org/packages/dd/90/03a6a389991378949b3a1c9eca38a7f404c6fcf0aea04940229ed38b9ddc/nydus-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7a69e5afd9f7606a61168791484d4c3", "sha256": "e7d12023160ec829a4394592a24162c96fe6ab1ea6c38a1543279595ae39cd45"}, "downloads": -1, "filename": "nydus-0.11.0.tar.gz", "has_sig": false, "md5_digest": "d7a69e5afd9f7606a61168791484d4c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28247, "upload_time": "2015-04-23T23:33:32", "upload_time_iso_8601": "2015-04-23T23:33:32.537371Z", "url": "https://files.pythonhosted.org/packages/45/2c/15635d5e23cc920a2880cb0e0301ab1b57d92559c41b07b250137cb3b08c/nydus-0.11.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:00 2020"}