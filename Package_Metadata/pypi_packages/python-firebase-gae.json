{"info": {"author": "Oshane Bailey", "author_email": "b4.oshany@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2"], "description": "Python Firebase with Google Appengine Support\n=============================================\n\nPython interface to the Firebase's REST API\n\n.. image:: https://travis-ci.org/ozgur/python-firebase.png?branch=master\n   :target: https://travis-ci.org/ozgur/python-firebase\n\nThis package is a forked version of `Ozgur's python-firebase (the official python firebase module)`_ with few modifications to allow firebase to work on Google Appenigne.\n\n.. _`Ozgur's python-firebase (the official python firebase module)`: https://github.com/ozgur/python-firebase\n\nInstallation\n-----------------\n\npython-firebase highly makes use of the **requests** library so before you begin, you need to have that package installed.\n\n.. code-block:: bash\n\n    $ sudo pip install requests==1.1.0\n    $ sudo pip install python-firebase\n\nGetting Started\n------------------\n\nYou can fetch any of your data in JSON format by appending '.json' to the end of the URL in which your data resides and, then send an HTTPS request through your browser. Like all other REST specific APIs, Firebase offers a client to update(PATCH, PUT), create(POST), or remove(DELETE) his stored data along with just to fetch it.\n\nThe library provides all the correspoding methods for those actions in both synchoronous and asynchronous manner. You can just start an asynchronous GET request with your callback function, and the method\n\n\nTo fetch all the users in your storage simply do the following:\n\n.. code-block:: python\n\n    from firebase import firebase\n    firebase = firebase.FirebaseApplication('https://your_storage.firebaseio.com', None)\n    result = firebase.get('/users', None, params={'print': 'pretty'}, headers={'X_FANCY_HEADER': 'very fancy'})\n    print result\n    {'1': 'John Doe', '2': 'Jane Doe'}\n\nThe second argument of **get** method is the name of the snapshot. Thus, if you leave it NULL, you get the data in the URL **/users.json**. Besides, if you set it to **1**, you get the data in the url **/users/1.json**. In other words, you get the user whose ID equals to 1.\n\n.. code-block:: python\n\n    from firebase import firebase\n    firebase = firebase.FirebaseApplication('https://your_storage.firebaseio.com', None)\n    result = firebase.get('/users', '1', params={'print': 'pretty'}, headers={'X_FANCY_HEADER': 'very fancy'})\n    print result\n    {'1': 'John Doe'}\n\nYou can also provide extra query parameters that will be appended to the url or extra key-value pairs sent in the HTTP header.\n\n.. code-block:: python\n\n    from firebase import firebase\n    firebase = firebase.FirebaseApplication('https://your_storage.firebaseio.com', None)\n    result = firebase.get('/users/2', None, {'print': 'pretty'}, {'X_FANCY_HEADER': 'VERY FANCY'})\n    print result\n    {'2': 'Jane Doe'}\n\nCreating new data requires a POST or PUT request. Assuming you don't append **print=silent** to the url, if you use POST the returning value becomes the name of the snapshot, if PUT you get the data you just sent. If print=silent is provided, you get just NULL because the backend never sends an output.\n\n.. code-block:: python\n\n    from firebase import firebase\n    firebase = firebase.FirebaseApplication('https://your_storage.firebaseio.com', None)\n    new_user = 'Ozgur Vatansever'\n\n    result = firebase.post('/users', new_user, {'print': 'pretty'}, {'X_FANCY_HEADER': 'VERY FANCY'})\n    print result\n    {u'name': u'-Io26123nDHkfybDIGl7'}\n\n    result = firebase.post('/users', new_user, {'print': 'silent'}, {'X_FANCY_HEADER': 'VERY FANCY'})\n    print result == None\n    True\n\nDeleting data is relatively easy compared to other actions. You just set the url and that's all. Backend sends no output as a result of a delete operation.\n\n.. code-block:: python\n\n    from firebase import firebase\n    firebase = firebase.FirebaseApplication('https://your_storage.firebaseio.com', None)\n    firebase.delete('/users', '1')\n    # John Doe goes away.\n\nAuthentication\n------------------\n\nAuthentication in Firebase is nothing but to simply creating a token that conforms to the JWT standarts and, putting it into the querystring with the name **auth**. The library creates that token for you so you never end up struggling with constructing a valid token on your own. If the data has been protected against write/read operations with some security rules, the backend sends an appropriate error message back to the client with the status code **403 Forbidden**.\n\n.. code-block:: python\n\n    from firebase import firebase\n    firebase = firebase.FirebaseApplication('https://your_storage.firebaseio.com', authentication=None)\n    result = firebase.get('/users', None, {'print': 'pretty'})\n    print result\n    {'error': 'Permission denied.'}\n\n    authentication = firebase.FirebaseAuthentication('THIS_IS_MY_SECRET', 'ozgurvt@gmail.com', extra={'id': 123})\n    firebase.authentication = authentication\n    print authentication.extra\n    {'admin': False, 'debug': False, 'email': 'ozgurvt@gmail.com', 'id': 123, 'provider': 'password'}\n\n    user = authentication.get_user()\n    print user.firebase_auth_token\n    \"eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJhZG1pbiI6IGZhbHNlLCAiZGVidWciOiBmYWxzZSwgIml\n    hdCI6IDEzNjE5NTAxNzQsICJkIjogeyJkZWJ1ZyI6IGZhbHNlLCAiYWRtaW4iOiBmYWxzZSwgInByb3ZpZGVyIjog\n    InBhc3N3b3JkIiwgImlkIjogNSwgImVtYWlsIjogIm96Z3VydnRAZ21haWwuY29tIn0sICJ2IjogMH0.lq4IRVfvE\n    GQklslOlS4uIBLSSJj88YNrloWXvisRgfQ\"\n\n    result = firebase.get('/users', None, {'print': 'pretty'})\n    print result\n    {'1': 'John Doe', '2': 'Jane Doe'}\n\n\nConcurrency\n------------------\n\nThe interface heavily depends on the standart **multiprocessing** library when concurrency comes in. While creating an asynchronous call, an on-demand process pool is created and, the async method is executed by one of the idle process inside the pool. The pool remains alive until the main process dies. So every time you trigger an async call, you always use the same pool. When the method returns, the pool process ships the returning value back to the main process within the callback function provided.\n\n.. code-block:: python\n\n     import json\n     from firebase import firebase\n     from firebase import jsonutil\n\n    firebase = firebase.FirebaseApplication('https://your_storage.firebaseio.com', authentication=None)\n\n    def log_user(response):\n        with open('/tmp/users/%s.json' % response.keys()[0], 'w') as users_file:\n            users_file.write(json.dumps(response, cls=jsonutil.JSONEncoder))\n\n    firebase.get_async('/users', None, {'print': 'pretty'}, callback=log_user)\n\n\nTODO\n---------\n\n* Async calls must deliver exceptions raised back to the main process.\n* More regression/stress tests on asynchronous calls.\n* Docs must be generated.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://ozgur.github.com/python-firebase/", "keywords": "firebase python gae google appengine", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "python-firebase-gae", "package_url": "https://pypi.org/project/python-firebase-gae/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/python-firebase-gae/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://ozgur.github.com/python-firebase/"}, "release_url": "https://pypi.org/project/python-firebase-gae/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Python interface to the Firebase's REST API.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python interface to the Firebase\u2019s REST API</p>\n<a href=\"https://travis-ci.org/ozgur/python-firebase\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ozgur/python-firebase.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12e53c01fe8b8bc334a4325e4c6751675eb7ca6d/68747470733a2f2f7472617669732d63692e6f72672f6f7a6775722f707974686f6e2d66697265626173652e706e673f6272616e63683d6d6173746572\"></a>\n<p>This package is a forked version of <a href=\"https://github.com/ozgur/python-firebase\" rel=\"nofollow\">Ozgur\u2019s python-firebase (the official python firebase module)</a> with few modifications to allow firebase to work on Google Appenigne.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>python-firebase highly makes use of the <strong>requests</strong> library so before you begin, you need to have that package installed.</p>\n<pre>$ sudo pip install <span class=\"nv\">requests</span><span class=\"o\">==</span><span class=\"m\">1</span>.1.0\n$ sudo pip install python-firebase\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>You can fetch any of your data in JSON format by appending \u2018.json\u2019 to the end of the URL in which your data resides and, then send an HTTPS request through your browser. Like all other REST specific APIs, Firebase offers a client to update(PATCH, PUT), create(POST), or remove(DELETE) his stored data along with just to fetch it.</p>\n<p>The library provides all the correspoding methods for those actions in both synchoronous and asynchronous manner. You can just start an asynchronous GET request with your callback function, and the method</p>\n<p>To fetch all the users in your storage simply do the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">firebase</span> <span class=\"kn\">import</span> <span class=\"n\">firebase</span>\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">FirebaseApplication</span><span class=\"p\">(</span><span class=\"s1\">'https://your_storage.firebaseio.com'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'print'</span><span class=\"p\">:</span> <span class=\"s1\">'pretty'</span><span class=\"p\">},</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'X_FANCY_HEADER'</span><span class=\"p\">:</span> <span class=\"s1\">'very fancy'</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">result</span>\n<span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">:</span> <span class=\"s1\">'Jane Doe'</span><span class=\"p\">}</span>\n</pre>\n<p>The second argument of <strong>get</strong> method is the name of the snapshot. Thus, if you leave it NULL, you get the data in the URL <strong>/users.json</strong>. Besides, if you set it to <strong>1</strong>, you get the data in the url <strong>/users/1.json</strong>. In other words, you get the user whose ID equals to 1.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">firebase</span> <span class=\"kn\">import</span> <span class=\"n\">firebase</span>\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">FirebaseApplication</span><span class=\"p\">(</span><span class=\"s1\">'https://your_storage.firebaseio.com'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'print'</span><span class=\"p\">:</span> <span class=\"s1\">'pretty'</span><span class=\"p\">},</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'X_FANCY_HEADER'</span><span class=\"p\">:</span> <span class=\"s1\">'very fancy'</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">result</span>\n<span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">}</span>\n</pre>\n<p>You can also provide extra query parameters that will be appended to the url or extra key-value pairs sent in the HTTP header.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">firebase</span> <span class=\"kn\">import</span> <span class=\"n\">firebase</span>\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">FirebaseApplication</span><span class=\"p\">(</span><span class=\"s1\">'https://your_storage.firebaseio.com'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/users/2'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'print'</span><span class=\"p\">:</span> <span class=\"s1\">'pretty'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'X_FANCY_HEADER'</span><span class=\"p\">:</span> <span class=\"s1\">'VERY FANCY'</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">result</span>\n<span class=\"p\">{</span><span class=\"s1\">'2'</span><span class=\"p\">:</span> <span class=\"s1\">'Jane Doe'</span><span class=\"p\">}</span>\n</pre>\n<p>Creating new data requires a POST or PUT request. Assuming you don\u2019t append <strong>print=silent</strong> to the url, if you use POST the returning value becomes the name of the snapshot, if PUT you get the data you just sent. If print=silent is provided, you get just NULL because the backend never sends an output.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">firebase</span> <span class=\"kn\">import</span> <span class=\"n\">firebase</span>\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">FirebaseApplication</span><span class=\"p\">(</span><span class=\"s1\">'https://your_storage.firebaseio.com'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">new_user</span> <span class=\"o\">=</span> <span class=\"s1\">'Ozgur Vatansever'</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"n\">new_user</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'print'</span><span class=\"p\">:</span> <span class=\"s1\">'pretty'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'X_FANCY_HEADER'</span><span class=\"p\">:</span> <span class=\"s1\">'VERY FANCY'</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">result</span>\n<span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'-Io26123nDHkfybDIGl7'</span><span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"n\">new_user</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'print'</span><span class=\"p\">:</span> <span class=\"s1\">'silent'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'X_FANCY_HEADER'</span><span class=\"p\">:</span> <span class=\"s1\">'VERY FANCY'</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Deleting data is relatively easy compared to other actions. You just set the url and that\u2019s all. Backend sends no output as a result of a delete operation.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">firebase</span> <span class=\"kn\">import</span> <span class=\"n\">firebase</span>\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">FirebaseApplication</span><span class=\"p\">(</span><span class=\"s1\">'https://your_storage.firebaseio.com'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"c1\"># John Doe goes away.</span>\n</pre>\n</div>\n<div id=\"authentication\">\n<h2>Authentication</h2>\n<p>Authentication in Firebase is nothing but to simply creating a token that conforms to the JWT standarts and, putting it into the querystring with the name <strong>auth</strong>. The library creates that token for you so you never end up struggling with constructing a valid token on your own. If the data has been protected against write/read operations with some security rules, the backend sends an appropriate error message back to the client with the status code <strong>403 Forbidden</strong>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">firebase</span> <span class=\"kn\">import</span> <span class=\"n\">firebase</span>\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">FirebaseApplication</span><span class=\"p\">(</span><span class=\"s1\">'https://your_storage.firebaseio.com'</span><span class=\"p\">,</span> <span class=\"n\">authentication</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'print'</span><span class=\"p\">:</span> <span class=\"s1\">'pretty'</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">result</span>\n<span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"s1\">'Permission denied.'</span><span class=\"p\">}</span>\n\n<span class=\"n\">authentication</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">FirebaseAuthentication</span><span class=\"p\">(</span><span class=\"s1\">'THIS_IS_MY_SECRET'</span><span class=\"p\">,</span> <span class=\"s1\">'ozgurvt@gmail.com'</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">})</span>\n<span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">authentication</span> <span class=\"o\">=</span> <span class=\"n\">authentication</span>\n<span class=\"nb\">print</span> <span class=\"n\">authentication</span><span class=\"o\">.</span><span class=\"n\">extra</span>\n<span class=\"p\">{</span><span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'debug'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'ozgurvt@gmail.com'</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s1\">'provider'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">}</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">authentication</span><span class=\"o\">.</span><span class=\"n\">get_user</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">firebase_auth_token</span>\n<span class=\"s2\">\"eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJhZG1pbiI6IGZhbHNlLCAiZGVidWciOiBmYWxzZSwgIml</span>\n<span class=\"n\">hdCI6IDEzNjE5NTAxNzQsICJkIjogeyJkZWJ1ZyI6IGZhbHNlLCAiYWRtaW4iOiBmYWxzZSwgInByb3ZpZGVyIjog</span>\n<span class=\"n\">InBhc3N3b3JkIiwgImlkIjogNSwgImVtYWlsIjogIm96Z3VydnRAZ21haWwuY29tIn0sICJ2IjogMH0</span><span class=\"o\">.</span><span class=\"n\">lq4IRVfvE</span>\n<span class=\"n\">GQklslOlS4uIBLSSJj88YNrloWXvisRgfQ</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'print'</span><span class=\"p\">:</span> <span class=\"s1\">'pretty'</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">result</span>\n<span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">:</span> <span class=\"s1\">'Jane Doe'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"concurrency\">\n<h2>Concurrency</h2>\n<p>The interface heavily depends on the standart <strong>multiprocessing</strong> library when concurrency comes in. While creating an asynchronous call, an on-demand process pool is created and, the async method is executed by one of the idle process inside the pool. The pool remains alive until the main process dies. So every time you trigger an async call, you always use the same pool. When the method returns, the pool process ships the returning value back to the main process within the callback function provided.</p>\n<pre> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n <span class=\"kn\">from</span> <span class=\"nn\">firebase</span> <span class=\"kn\">import</span> <span class=\"n\">firebase</span>\n <span class=\"kn\">from</span> <span class=\"nn\">firebase</span> <span class=\"kn\">import</span> <span class=\"n\">jsonutil</span>\n\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">FirebaseApplication</span><span class=\"p\">(</span><span class=\"s1\">'https://your_storage.firebaseio.com'</span><span class=\"p\">,</span> <span class=\"n\">authentication</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">log_user</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/users/</span><span class=\"si\">%s</span><span class=\"s1\">.json'</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">users_file</span><span class=\"p\">:</span>\n        <span class=\"n\">users_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">jsonutil</span><span class=\"o\">.</span><span class=\"n\">JSONEncoder</span><span class=\"p\">))</span>\n\n<span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">get_async</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'print'</span><span class=\"p\">:</span> <span class=\"s1\">'pretty'</span><span class=\"p\">},</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">log_user</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Async calls must deliver exceptions raised back to the main process.</li>\n<li>More regression/stress tests on asynchronous calls.</li>\n<li>Docs must be generated.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2296794, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "dd8941afd4aafeb9909cecef34b8937e", "sha256": "50bfd42a1386c334c5b289e31222a196c270a0db117c6ebcda6fc7bd75f1681a"}, "downloads": -1, "filename": "python-firebase-gae-1.0.0.tar.gz", "has_sig": false, "md5_digest": "dd8941afd4aafeb9909cecef34b8937e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10212, "upload_time": "2016-08-22T18:11:32", "upload_time_iso_8601": "2016-08-22T18:11:32.690746Z", "url": "https://files.pythonhosted.org/packages/fb/fe/17a93a651cb5f96558499a6a4ed001d601b255d301f5e8f6be5bb2954261/python-firebase-gae-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "1df04c3708d52374da962e9c1a890540", "sha256": "3f78cf416a2775b788af31abeffcfcd82bfbdf2ee400916e62b1a5ca3868cc72"}, "downloads": -1, "filename": "python-firebase-gae-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1df04c3708d52374da962e9c1a890540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10243, "upload_time": "2016-08-22T22:24:20", "upload_time_iso_8601": "2016-08-22T22:24:20.345950Z", "url": "https://files.pythonhosted.org/packages/d5/31/d75ebc9fbed6bd7e4ea8e45ffde3e9287a739ec668556610fb74e806935d/python-firebase-gae-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1df04c3708d52374da962e9c1a890540", "sha256": "3f78cf416a2775b788af31abeffcfcd82bfbdf2ee400916e62b1a5ca3868cc72"}, "downloads": -1, "filename": "python-firebase-gae-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1df04c3708d52374da962e9c1a890540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10243, "upload_time": "2016-08-22T22:24:20", "upload_time_iso_8601": "2016-08-22T22:24:20.345950Z", "url": "https://files.pythonhosted.org/packages/d5/31/d75ebc9fbed6bd7e4ea8e45ffde3e9287a739ec668556610fb74e806935d/python-firebase-gae-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:38 2020"}