{"info": {"author": "deathbeds", "author_email": "tony.fast@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: IPython", "Framework :: Jupyter", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3.6"], "description": "\n`pidgin` is a collection of IPython magics for creating computable essays.\n\n[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/deathbeds/pidgin/master?filepath=readme.ipynb)\n\n\n```python\n    if __name__ == '__main__': \n        %load_ext pidgin\n```\n\n# Markdown Mode\n\n\n```python\n    %pidgin markdown \n```\n\n\n```python\n---\nWith `pidgin.markdown`, code cells accept markdown.  Any indented code blocks are executed.\n\n    foo = 42\n    print(f\"foo is {foo}\")\n\n> Accepting the `pidgin.markdown` convetion means the author agrees to indent all their code at least once; and sometimes more in nested lists. \n\n---\n```\n\n\n---\nWith `pidgin.markdown`, code cells accept markdown.  Any indented code blocks are executed.\n\n    foo = 42\n    print(f\"foo is {foo}\")\n\n> Accepting the `pidgin.markdown` convetion means the author agrees to indent all their code at least once; and sometimes more in nested lists. \n\n---\n\n\n    foo is 42\n\n\n# Template Mode\n\nWith templates real data can be inserted into the computational essay. An author should desire their notebook restart and run all during template mode.\n\n\n```python\n\n    %pidgin template\nSkipping the first line suppresses the markdown output.\n```\n\n\n```python\n---\nIn template mode, `jinja2` may be invoked to template markdown and code.  We already know that `foo` is 42, but can test that assertion with\n\n    assert foo is {{foo}} is 42\n    {% for i in range(3) %}print({{i}})\n    {% endfor %}\n---\n```\n\n\n---\nIn template mode, `jinja2` may be invoked to template markdown and code.  We already know that `foo` is 42, but can test that assertion with\n\n    assert foo is 42 is 42\n    print(0)\n    print(1)\n    print(2)\n\n---\n\n\n    0\n    1\n    2\n\n\n\n```python\n# Turning off magics\n\n    %pidgin --off template markdown\n```\n\n\n# Turning off magics\n\n    %pidgin --off template markdown\n\n\n## Yaml\n\nStart code with `---`\n\n\n```python\n    %pidgin conventions\n```\n\n\n```python\n    ---\n    a: 42\n```\n\n\n```python\n    assert a == 42\n```\n\n## Graphviz\n\nStart code with `graph` or `digraph`\n\n    !conda install -y graphviz\n\n\n```python\n    graph { {Ipython Julia R}--Jupyter}\n```\n\n\n      File \"<ipython-input-9-1661b3d05729>\", line 1\n        graph { {Ipython Julia R}--Jupyter}\n              ^\n    SyntaxError: invalid syntax\n\n\n\n# Notebooks as source\n\npidgin uses notebooks as source; line numbers are retained so that the notebook source produces semi-sane tracebacks.\n\n\n```python\n    from pidgin import markdown, template, conventions\n```\n\nThe pidgin loader allows an author to import notebooks directly as source.  This means all of the pidgin documents are importable.\n\n\n```python\n    %%pidgin markdown template conventions\n    import readme\n```\n\n\n```python\n    assert all(file.__file__.endswith('.ipynb') for file in (markdown, template, conventions))\n```\n\n#### Everything Should Compute\n\nConvert a document into other formats; Restart, Run All, `nbconvert`.\n\n\n```python\n%%pidgin markdown template\nUse pidgin a cell magic to temporarily employ any convetions.\n\n    if __name__ == '__main__':\n        !jupyter nbconvert --to markdown readme.ipynb\n```\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deathbeds/pidgin", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "pidgin", "package_url": "https://pypi.org/project/pidgin/", "platform": "", "project_url": "https://pypi.org/project/pidgin/", "project_urls": {"Homepage": "https://github.com/deathbeds/pidgin"}, "release_url": "https://pypi.org/project/pidgin/0.0.1/", "requires_dist": ["dataclasses", "CommonMark", "pyyaml", "ipython", "nbconvert", "hypothesis", "graphviz", "importnb"], "requires_python": ">=3.6", "summary": "Conventions for writing code in the notebook.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><code>pidgin</code> is a collection of IPython magics for creating computable essays.</p>\n<p><a href=\"https://mybinder.org/v2/gh/deathbeds/pidgin/master?filepath=readme.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86eb116bc9e98bea90d9454762d384d9cae5055c/68747470733a2f2f6d7962696e6465722e6f72672f62616467652e737667\"></a></p>\n<pre>    <span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span> \n        <span class=\"o\">%</span><span class=\"n\">load_ext</span> <span class=\"n\">pidgin</span>\n</pre>\n<h1>Markdown Mode</h1>\n<pre>    <span class=\"o\">%</span><span class=\"n\">pidgin</span> <span class=\"n\">markdown</span> \n</pre>\n<pre><span class=\"o\">---</span>\n<span class=\"n\">With</span> <span class=\"err\">`</span><span class=\"n\">pidgin</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"err\">`</span><span class=\"p\">,</span> <span class=\"n\">code</span> <span class=\"n\">cells</span> <span class=\"n\">accept</span> <span class=\"n\">markdown</span><span class=\"o\">.</span>  <span class=\"n\">Any</span> <span class=\"n\">indented</span> <span class=\"n\">code</span> <span class=\"n\">blocks</span> <span class=\"n\">are</span> <span class=\"n\">executed</span><span class=\"o\">.</span>\n\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"foo is </span><span class=\"si\">{</span><span class=\"n\">foo</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;</span> <span class=\"n\">Accepting</span> <span class=\"n\">the</span> <span class=\"err\">`</span><span class=\"n\">pidgin</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"err\">`</span> <span class=\"n\">convetion</span> <span class=\"n\">means</span> <span class=\"n\">the</span> <span class=\"n\">author</span> <span class=\"n\">agrees</span> <span class=\"n\">to</span> <span class=\"n\">indent</span> <span class=\"nb\">all</span> <span class=\"n\">their</span> <span class=\"n\">code</span> <span class=\"n\">at</span> <span class=\"n\">least</span> <span class=\"n\">once</span><span class=\"p\">;</span> <span class=\"ow\">and</span> <span class=\"n\">sometimes</span> <span class=\"n\">more</span> <span class=\"ow\">in</span> <span class=\"n\">nested</span> <span class=\"n\">lists</span><span class=\"o\">.</span> \n\n<span class=\"o\">---</span>\n</pre>\n<hr>\n<p>With <code>pidgin.markdown</code>, code cells accept markdown.  Any indented code blocks are executed.</p>\n<pre><code>foo = 42\nprint(f\"foo is {foo}\")\n</code></pre>\n<blockquote>\n<p>Accepting the <code>pidgin.markdown</code> convetion means the author agrees to indent all their code at least once; and sometimes more in nested lists.</p>\n</blockquote>\n<hr>\n<pre><code>foo is 42\n</code></pre>\n<h1>Template Mode</h1>\n<p>With templates real data can be inserted into the computational essay. An author should desire their notebook restart and run all during template mode.</p>\n<pre>    <span class=\"o\">%</span><span class=\"n\">pidgin</span> <span class=\"n\">template</span>\n<span class=\"n\">Skipping</span> <span class=\"n\">the</span> <span class=\"n\">first</span> <span class=\"n\">line</span> <span class=\"n\">suppresses</span> <span class=\"n\">the</span> <span class=\"n\">markdown</span> <span class=\"n\">output</span><span class=\"o\">.</span>\n</pre>\n<pre><span class=\"o\">---</span>\n<span class=\"n\">In</span> <span class=\"n\">template</span> <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"err\">`</span><span class=\"n\">jinja2</span><span class=\"err\">`</span> <span class=\"n\">may</span> <span class=\"n\">be</span> <span class=\"n\">invoked</span> <span class=\"n\">to</span> <span class=\"n\">template</span> <span class=\"n\">markdown</span> <span class=\"ow\">and</span> <span class=\"n\">code</span><span class=\"o\">.</span>  <span class=\"n\">We</span> <span class=\"n\">already</span> <span class=\"n\">know</span> <span class=\"n\">that</span> <span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"err\">`</span> <span class=\"ow\">is</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"n\">but</span> <span class=\"n\">can</span> <span class=\"n\">test</span> <span class=\"n\">that</span> <span class=\"n\">assertion</span> <span class=\"k\">with</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">foo</span> <span class=\"ow\">is</span> <span class=\"p\">{{</span><span class=\"n\">foo</span><span class=\"p\">}}</span> <span class=\"ow\">is</span> <span class=\"mi\">42</span>\n    <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">%</span><span class=\"p\">}</span><span class=\"nb\">print</span><span class=\"p\">({{</span><span class=\"n\">i</span><span class=\"p\">}})</span>\n    <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">endfor</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"o\">---</span>\n</pre>\n<hr>\n<p>In template mode, <code>jinja2</code> may be invoked to template markdown and code.  We already know that <code>foo</code> is 42, but can test that assertion with</p>\n<pre><code>assert foo is 42 is 42\nprint(0)\nprint(1)\nprint(2)\n</code></pre>\n<hr>\n<pre><code>0\n1\n2\n</code></pre>\n<pre><span class=\"c1\"># Turning off magics</span>\n\n    <span class=\"o\">%</span><span class=\"n\">pidgin</span> <span class=\"o\">--</span><span class=\"n\">off</span> <span class=\"n\">template</span> <span class=\"n\">markdown</span>\n</pre>\n<h1>Turning off magics</h1>\n<pre><code>%pidgin --off template markdown\n</code></pre>\n<h2>Yaml</h2>\n<p>Start code with <code>---</code></p>\n<pre>    <span class=\"o\">%</span><span class=\"n\">pidgin</span> <span class=\"n\">conventions</span>\n</pre>\n<pre>    <span class=\"o\">---</span>\n    <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"mi\">42</span>\n</pre>\n<pre>    <span class=\"k\">assert</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n</pre>\n<h2>Graphviz</h2>\n<p>Start code with <code>graph</code> or <code>digraph</code></p>\n<pre><code>!conda install -y graphviz\n</code></pre>\n<pre>    <span class=\"n\">graph</span> <span class=\"p\">{</span> <span class=\"p\">{</span><span class=\"n\">Ipython</span> <span class=\"n\">Julia</span> <span class=\"n\">R</span><span class=\"p\">}</span><span class=\"o\">--</span><span class=\"n\">Jupyter</span><span class=\"p\">}</span>\n</pre>\n<pre><code>  File \"&lt;ipython-input-9-1661b3d05729&gt;\", line 1\n    graph { {Ipython Julia R}--Jupyter}\n          ^\nSyntaxError: invalid syntax\n</code></pre>\n<h1>Notebooks as source</h1>\n<p>pidgin uses notebooks as source; line numbers are retained so that the notebook source produces semi-sane tracebacks.</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">pidgin</span> <span class=\"kn\">import</span> <span class=\"n\">markdown</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">conventions</span>\n</pre>\n<p>The pidgin loader allows an author to import notebooks directly as source.  This means all of the pidgin documents are importable.</p>\n<pre>    <span class=\"o\">%%</span><span class=\"n\">pidgin</span> <span class=\"n\">markdown</span> <span class=\"n\">template</span> <span class=\"n\">conventions</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">readme</span>\n</pre>\n<pre>    <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"vm\">__file__</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">'.ipynb'</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">markdown</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">conventions</span><span class=\"p\">))</span>\n</pre>\n<h4>Everything Should Compute</h4>\n<p>Convert a document into other formats; Restart, Run All, <code>nbconvert</code>.</p>\n<pre><span class=\"o\">%%</span><span class=\"n\">pidgin</span> <span class=\"n\">markdown</span> <span class=\"n\">template</span>\n<span class=\"n\">Use</span> <span class=\"n\">pidgin</span> <span class=\"n\">a</span> <span class=\"n\">cell</span> <span class=\"n\">magic</span> <span class=\"n\">to</span> <span class=\"n\">temporarily</span> <span class=\"n\">employ</span> <span class=\"nb\">any</span> <span class=\"n\">convetions</span><span class=\"o\">.</span>\n\n    <span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n        <span class=\"err\">!</span><span class=\"n\">jupyter</span> <span class=\"n\">nbconvert</span> <span class=\"o\">--</span><span class=\"n\">to</span> <span class=\"n\">markdown</span> <span class=\"n\">readme</span><span class=\"o\">.</span><span class=\"n\">ipynb</span>\n</pre>\n\n          </div>"}, "last_serial": 3857807, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c03fee31b823ae8b82652e9f6d275dfb", "sha256": "fcd84acaca8e13f8489d0c66b25868c144f4c102b60fb995fd20d542013b3a74"}, "downloads": -1, "filename": "pidgin-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c03fee31b823ae8b82652e9f6d275dfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17800, "upload_time": "2018-05-13T02:58:12", "upload_time_iso_8601": "2018-05-13T02:58:12.500537Z", "url": "https://files.pythonhosted.org/packages/74/19/ee91d430425c3fba62dbcba0cb7e9d37f61c3075e19313cb27bf7adc67f3/pidgin-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7b8b21111c15bdc49128a43bc59c3c4", "sha256": "7da890dfc843d41c76542063c551ab81d4de9ba8af44d7d917efb7612721a3a5"}, "downloads": -1, "filename": "pidgin-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d7b8b21111c15bdc49128a43bc59c3c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10548, "upload_time": "2018-05-13T02:58:13", "upload_time_iso_8601": "2018-05-13T02:58:13.691342Z", "url": "https://files.pythonhosted.org/packages/1b/95/c6ac236ce3d9e3a3f174db1c161b4c7acab53baad7c2aaf129b4fe8d7b81/pidgin-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c03fee31b823ae8b82652e9f6d275dfb", "sha256": "fcd84acaca8e13f8489d0c66b25868c144f4c102b60fb995fd20d542013b3a74"}, "downloads": -1, "filename": "pidgin-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c03fee31b823ae8b82652e9f6d275dfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17800, "upload_time": "2018-05-13T02:58:12", "upload_time_iso_8601": "2018-05-13T02:58:12.500537Z", "url": "https://files.pythonhosted.org/packages/74/19/ee91d430425c3fba62dbcba0cb7e9d37f61c3075e19313cb27bf7adc67f3/pidgin-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7b8b21111c15bdc49128a43bc59c3c4", "sha256": "7da890dfc843d41c76542063c551ab81d4de9ba8af44d7d917efb7612721a3a5"}, "downloads": -1, "filename": "pidgin-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d7b8b21111c15bdc49128a43bc59c3c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10548, "upload_time": "2018-05-13T02:58:13", "upload_time_iso_8601": "2018-05-13T02:58:13.691342Z", "url": "https://files.pythonhosted.org/packages/1b/95/c6ac236ce3d9e3a3f174db1c161b4c7acab53baad7c2aaf129b4fe8d7b81/pidgin-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:57 2020"}