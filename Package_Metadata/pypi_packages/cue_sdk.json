{"info": {"author": "10se1ucgo", "author_email": "the10se1ucgo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: Microsoft :: Windows", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: System :: Hardware"], "description": "cue\\_sdk\r\n========\r\n\r\nPython wrapper for the CUE SDK\r\n\r\n`On PyPi`_\r\n\r\nInstallation\r\n============\r\n\r\nUse pip\r\n\r\n.. code:: sh\r\n\r\n    $ pip install cue_sdk\r\n\r\nUsage example\r\n=============\r\n\r\n.. code:: python\r\n\r\n    >>> from cue_sdk import *\r\n    # Load CUE DLL. Provide path to DLL yourself.\r\n    >>> Corsair = CUESDK(\"CUESDK.x64_2013.dll\")\r\n    # Gives us exclusive access to controling the lighting and turns everything off.\r\n    >>> Corsair.RequestControl(CAM.ExclusiveLightingControl)\r\n    True\r\n    # Sets the color of the H key to white.\r\n    >>> Corsair.SetLedsColors(CorsairLedColor(CLK.H, 255, 255, 255))\r\n    True\r\n    # Sets the color of the A and B key to green\r\n    >>> Corsair.SetLedsColors([CorsairLedColor(CLK.A, 0, 255, 0), CorsairLedColor(CLK.B, 0, 255, 0)])\r\n    True\r\n    # Define a callback function for SetLedsColorsAsync\r\n    >>> def example_callback(context, result, error):\r\n    ...     assert context == \"test123\"\r\n    ...     print(context, result, error)\r\n    ...\r\n    # Asynchronously set the color of the E key to white. Pass in a callback and an arbitrary context.\r\n    >>> Corsair.SetLedsColorsAsync(CorsairLedColor(CLK.E, 255, 255, 255), example_callback, \"test123\")\r\n    True\r\n    # (Note: The >>> appears before the result because it's async.)\r\n    >>> test123 True CE.Success\r\n    # Returns number of Corsair devices.\r\n    >>> Corsair.GetDeviceCount()\r\n    1\r\n    # Takes zero-based index of device and returns a namedtuple with the device info.\r\n    >>> Corsair.GetDeviceInfo(0)\r\n    CorsairDeviceInfo(type=<CDT.Keyboard: 2>, model='K70 RGB', physicalLayout=<CPL.US: 1>, logicalLayout=<CLL.NA: 2>, capsMask=<CDC.Lighting: 1>)\r\n    # Returns a named tuple with the led positions + count of the keyboard.\r\n    >>> Corsair.GetLedPositions(0) \r\n    CorsairLedPositions(numberOfLed=111, pLedPosition=(CorsairLedPosition(ledId=<CLK.Escape: 1>, top=29.0, left=7.0, height=13.0, width=13.0), ...))\r\n    # Returns the led id (CLK enum) for the key name. Relative to logical layout (e.g. on an AZERTY keyboard it will return Q, not A)\r\n    >>> Corsair.GetLedIdForKeyName('a')\r\n    <CLK.A: 38>\r\n    # Performs protocol handshake and returns details. Already called when the CUE class is initialized, no need to call for it yourself. \r\n    >>> Corsair.PerformProtocolHandshake()\r\n    CorsairProtocolDetails(sdkVersion='1.15.28', serverVersion='1.16.42', sdkProtocolVersion=2, serverProtocolVersion=2, breakingChanges=False)\r\n    # Protocol details are stored here when called handshake is performed on init.\r\n    >>> Corsair.ProtocolDetails\r\n    CorsairProtocolDetails(sdkVersion='1.15.28', serverVersion='1.16.42', sdkProtocolVersion=2, serverProtocolVersion=2, breakingChanges=False)\r\n    # Release control back to CUE.\r\n    >>> Corsair.ReleaseControl(CAM.ExclusiveLightingControl)\r\n    True\r\n\r\n.. _On PyPi: https://pypi.python.org/pypi/cue_sdk/", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/10se1ucgo/cue_sdk", "keywords": "Corsair CUE Strafe Void Scimitar K95 K70 K65 M65 Sabre RGB Keyboard Mouse", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "cue_sdk", "package_url": "https://pypi.org/project/cue_sdk/", "platform": "", "project_url": "https://pypi.org/project/cue_sdk/", "project_urls": {"Homepage": "https://github.com/10se1ucgo/cue_sdk"}, "release_url": "https://pypi.org/project/cue_sdk/2.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python wrapper for the CUE SDK", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"cue-sdk\">\n<h2>cue_sdk</h2>\n<p>Python wrapper for the CUE SDK</p>\n<p><a href=\"https://pypi.python.org/pypi/cue_sdk/\" rel=\"nofollow\">On PyPi</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use pip</p>\n<pre>$ pip install cue_sdk\n</pre>\n</div>\n<div id=\"usage-example\">\n<h2>Usage example</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">cue_sdk</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"c1\"># Load CUE DLL. Provide path to DLL yourself.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span> <span class=\"o\">=</span> <span class=\"n\">CUESDK</span><span class=\"p\">(</span><span class=\"s2\">\"CUESDK.x64_2013.dll\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Gives us exclusive access to controling the lighting and turns everything off.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">RequestControl</span><span class=\"p\">(</span><span class=\"n\">CAM</span><span class=\"o\">.</span><span class=\"n\">ExclusiveLightingControl</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"c1\"># Sets the color of the H key to white.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">SetLedsColors</span><span class=\"p\">(</span><span class=\"n\">CorsairLedColor</span><span class=\"p\">(</span><span class=\"n\">CLK</span><span class=\"o\">.</span><span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n<span class=\"c1\"># Sets the color of the A and B key to green</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">SetLedsColors</span><span class=\"p\">([</span><span class=\"n\">CorsairLedColor</span><span class=\"p\">(</span><span class=\"n\">CLK</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">CorsairLedColor</span><span class=\"p\">(</span><span class=\"n\">CLK</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)])</span>\n<span class=\"kc\">True</span>\n<span class=\"c1\"># Define a callback function for SetLedsColorsAsync</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">example_callback</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">assert</span> <span class=\"n\">context</span> <span class=\"o\">==</span> <span class=\"s2\">\"test123\"</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"c1\"># Asynchronously set the color of the E key to white. Pass in a callback and an arbitrary context.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">SetLedsColorsAsync</span><span class=\"p\">(</span><span class=\"n\">CorsairLedColor</span><span class=\"p\">(</span><span class=\"n\">CLK</span><span class=\"o\">.</span><span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">example_callback</span><span class=\"p\">,</span> <span class=\"s2\">\"test123\"</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"c1\"># (Note: The &gt;&gt;&gt; appears before the result because it's async.)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">test123</span> <span class=\"kc\">True</span> <span class=\"n\">CE</span><span class=\"o\">.</span><span class=\"n\">Success</span>\n<span class=\"c1\"># Returns number of Corsair devices.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">GetDeviceCount</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span>\n<span class=\"c1\"># Takes zero-based index of device and returns a namedtuple with the device info.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">GetDeviceInfo</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">CorsairDeviceInfo</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=&lt;</span><span class=\"n\">CDT</span><span class=\"o\">.</span><span class=\"n\">Keyboard</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">'K70 RGB'</span><span class=\"p\">,</span> <span class=\"n\">physicalLayout</span><span class=\"o\">=&lt;</span><span class=\"n\">CPL</span><span class=\"o\">.</span><span class=\"n\">US</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">logicalLayout</span><span class=\"o\">=&lt;</span><span class=\"n\">CLL</span><span class=\"o\">.</span><span class=\"n\">NA</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">capsMask</span><span class=\"o\">=&lt;</span><span class=\"n\">CDC</span><span class=\"o\">.</span><span class=\"n\">Lighting</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"c1\"># Returns a named tuple with the led positions + count of the keyboard.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">GetLedPositions</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">CorsairLedPositions</span><span class=\"p\">(</span><span class=\"n\">numberOfLed</span><span class=\"o\">=</span><span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"n\">pLedPosition</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">CorsairLedPosition</span><span class=\"p\">(</span><span class=\"n\">ledId</span><span class=\"o\">=&lt;</span><span class=\"n\">CLK</span><span class=\"o\">.</span><span class=\"n\">Escape</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mf\">29.0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">7.0</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mf\">13.0</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">13.0</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">))</span>\n<span class=\"c1\"># Returns the led id (CLK enum) for the key name. Relative to logical layout (e.g. on an AZERTY keyboard it will return Q, not A)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">GetLedIdForKeyName</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">CLK</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"mi\">38</span><span class=\"o\">&gt;</span>\n<span class=\"c1\"># Performs protocol handshake and returns details. Already called when the CUE class is initialized, no need to call for it yourself.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">PerformProtocolHandshake</span><span class=\"p\">()</span>\n<span class=\"n\">CorsairProtocolDetails</span><span class=\"p\">(</span><span class=\"n\">sdkVersion</span><span class=\"o\">=</span><span class=\"s1\">'1.15.28'</span><span class=\"p\">,</span> <span class=\"n\">serverVersion</span><span class=\"o\">=</span><span class=\"s1\">'1.16.42'</span><span class=\"p\">,</span> <span class=\"n\">sdkProtocolVersion</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">serverProtocolVersion</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">breakingChanges</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># Protocol details are stored here when called handshake is performed on init.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">ProtocolDetails</span>\n<span class=\"n\">CorsairProtocolDetails</span><span class=\"p\">(</span><span class=\"n\">sdkVersion</span><span class=\"o\">=</span><span class=\"s1\">'1.15.28'</span><span class=\"p\">,</span> <span class=\"n\">serverVersion</span><span class=\"o\">=</span><span class=\"s1\">'1.16.42'</span><span class=\"p\">,</span> <span class=\"n\">sdkProtocolVersion</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">serverProtocolVersion</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">breakingChanges</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># Release control back to CUE.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Corsair</span><span class=\"o\">.</span><span class=\"n\">ReleaseControl</span><span class=\"p\">(</span><span class=\"n\">CAM</span><span class=\"o\">.</span><span class=\"n\">ExclusiveLightingControl</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2233754, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "687efa7da9a0ce5d13898a2ddba049aa", "sha256": "c03f7d6d846a20cdfeca49c7243ef7ed466a394c77288fb5166dff641d1db26d"}, "downloads": -1, "filename": "cue_sdk-1.0.zip", "has_sig": false, "md5_digest": "687efa7da9a0ce5d13898a2ddba049aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7344, "upload_time": "2016-01-23T20:53:00", "upload_time_iso_8601": "2016-01-23T20:53:00.228438Z", "url": "https://files.pythonhosted.org/packages/f3/69/b7b3f2c39869ce558ccb38323fe0e0b14ecd7869dca641faa38f28fac762/cue_sdk-1.0.zip", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "d453d88310252e2966771fe78d30fec8", "sha256": "158fc1946b166bc82090a8c65a0b8955c66148134e23310325301f2351744ae5"}, "downloads": -1, "filename": "cue_sdk-2.0.zip", "has_sig": false, "md5_digest": "d453d88310252e2966771fe78d30fec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9566, "upload_time": "2016-06-19T23:43:30", "upload_time_iso_8601": "2016-06-19T23:43:30.954660Z", "url": "https://files.pythonhosted.org/packages/7b/1b/e53ea5d4b84a5e2157af91c89591a8940385adf7594e1083de1fe4303fc1/cue_sdk-2.0.zip", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "e019737b6da64df597eef388e0de2945", "sha256": "af601f362b6ad98a543201979e5e3e6c62c94ef1398dad8311b0fabb7b036442"}, "downloads": -1, "filename": "cue_sdk-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e019737b6da64df597eef388e0de2945", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10417, "upload_time": "2016-07-20T19:29:59", "upload_time_iso_8601": "2016-07-20T19:29:59.244824Z", "url": "https://files.pythonhosted.org/packages/de/d5/a390d2d83d4ae54fa74dd55e27f0785327e91bad77799b760f8ac4967866/cue_sdk-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2569bd7d59133a3ecbe432e759dca8ea", "sha256": "8514052c159145837f018a9a3ef354b12d83d54fd25c0dfe28c64d762cd4ee05"}, "downloads": -1, "filename": "cue_sdk-2.1.0.zip", "has_sig": false, "md5_digest": "2569bd7d59133a3ecbe432e759dca8ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14757, "upload_time": "2016-07-20T19:30:02", "upload_time_iso_8601": "2016-07-20T19:30:02.579360Z", "url": "https://files.pythonhosted.org/packages/7b/c4/18c35210834842f6c1078ae01a6cd60b5a56ffefbf6423478cb84d5ebe27/cue_sdk-2.1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e019737b6da64df597eef388e0de2945", "sha256": "af601f362b6ad98a543201979e5e3e6c62c94ef1398dad8311b0fabb7b036442"}, "downloads": -1, "filename": "cue_sdk-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e019737b6da64df597eef388e0de2945", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10417, "upload_time": "2016-07-20T19:29:59", "upload_time_iso_8601": "2016-07-20T19:29:59.244824Z", "url": "https://files.pythonhosted.org/packages/de/d5/a390d2d83d4ae54fa74dd55e27f0785327e91bad77799b760f8ac4967866/cue_sdk-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2569bd7d59133a3ecbe432e759dca8ea", "sha256": "8514052c159145837f018a9a3ef354b12d83d54fd25c0dfe28c64d762cd4ee05"}, "downloads": -1, "filename": "cue_sdk-2.1.0.zip", "has_sig": false, "md5_digest": "2569bd7d59133a3ecbe432e759dca8ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14757, "upload_time": "2016-07-20T19:30:02", "upload_time_iso_8601": "2016-07-20T19:30:02.579360Z", "url": "https://files.pythonhosted.org/packages/7b/c4/18c35210834842f6c1078ae01a6cd60b5a56ffefbf6423478cb84d5ebe27/cue_sdk-2.1.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:41:26 2020"}