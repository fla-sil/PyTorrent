{"info": {"author": "Filipe Waitman", "author_email": "filwaitman@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "# Django Hybrid Property\n\n## TODO: \n- travis\n- codecov\n\nThis is a (pretty basic) implementation of the [SQLAlchemy Hybrid Attributes](https://docs.sqlalchemy.org/en/13/orm/extensions/hybrid.html) for Django - more precisely `hybrid_property` and `hybrid_method`.\n\n\n## Example of basic usage:\n```python\nfrom django.db import models\nfrom django_hybrid_attributes import hybrid_method, hybrid_property, HybridQuerySet\n\n\nclass User(models.Model):\n    first_name = models.CharField(max_length=63)\n    last_name = models.CharField(max_length=63)\n    some_value = models.PositiveSmallIntegerField()\n    objects = HybridQuerySet.as_manager()\n\n    @hybrid_property\n    def full_name(self):\n        return f'{self.first_name} {self.last_name}'\n\n    @full_name.expression\n    def full_name(cls, through=''):\n        return models.functions.Concat(f'{through}first_name', models.Value(' '), f'{through}last_name')\n\n    @hybrid_method\n    def some_value_plus_n(self, n):\n        return self.some_value + n\n\n    @some_value_plus_n.expression\n    def some_value_plus_n(cls, n, through=''):\n        return models.F(f'{through}some_value') + models.Value(n)\n\n\nuser1 = User.objects.create(first_name='Filipe', last_name='Waitman', some_value=10)\nuser2 = User.objects.create(first_name='Agent', last_name='Smith', some_value=5)\n\n# Compatible with regular django .filter() - so this won't break your existing code\nassert User.objects.filter(first_name='Filipe').count() == 1\nassert User.objects.filter(models.Q(last_name='Waitman')).count() == 1\n\n# hybrid_property/hybrid_method functions are common properties/methods\nassert user1.full_name == 'Filipe Waitman'\nassert user2.some_value_plus_n(10) == 15\n\n# hybrid_property/hybrid_method expressions are translated to Q() objects, annotated, and filtered accordingly\nassert User.objects.filter(User.full_name == 'Filipe Waitman').count() == 1\nassert User.objects.filter(User.full_name == 'FILIPE WAITMAN').count() == 0\nassert User.objects.filter(User.full_name != 'FILIPE WAITMAN').count() == 2\nassert User.objects.filter(User.full_name.i() == 'FILIPE WAITMAN').count() == 1  # .i() ignores case, so iexact is applied\nassert User.objects.filter(User.full_name.i().l('contains') == 'WAIT').count() == 1  # icontains is applied\nassert User.objects.filter(User.some_value_plus_n(20) < 25).count() == 0\nassert User.objects.filter(User.some_value_plus_n(20) > 25).count() == 1\nassert User.objects.filter(User.some_value_plus_n(20) >= 25).count() == 2\n\n# `.e()` returns the equivalent Django expression so you can use it as you wish\nqs = User.objects.annotate(value_plus_3=User.some_value_plus_n(3).e())\nassert [x.value_plus_3 for x in qs.order_by('value_plus_3')] == [8, 13]\n```\n\nFor another examples, please refer to the tests folder.\n\n## Features:\n- Filter support using Python magic methods. Examples:\n```python\nKlass.objects.filter(Klass.my_hybrid_property == 'value')  # lookup=exact\nKlass.objects.filter(Klass.my_hybrid_property.i() == 'value')  # lookup=iexact\nKlass.objects.filter(Klass.my_hybrid_property != 'value')  # lookup=exact, queryset_method=exclude\nKlass.objects.filter(~Klass.my_hybrid_property == 'value')  # lookup=exact, queryset_method=exclude\nKlass.objects.filter(Klass.my_hybrid_property > 'value')  # lookup=gt\nKlass.objects.filter(Klass.my_hybrid_property < 'value')  # lookup=lt\nKlass.objects.filter(Klass.my_hybrid_property >= 'value')  # lookup=gte\nKlass.objects.filter(Klass.my_hybrid_property <= 'value')  # lookup=lte\n```\n\n- Support of all django lookups via `l()` attribute. Examples:\n```python\nKlass.objects.filter(Klass.my_hybrid_property.l('istartswith') == 'value')\nKlass.objects.filter(Klass.my_hybrid_property.i().l('startswith') == 'value')  # lookup=istartswith\nKlass.objects.filter(Klass.my_hybrid_property.l('contains') == 'value')\nKlass.objects.filter(Klass.my_hybrid_property.l('date__year') == 'value')\n```\n\n- Relations support via `t()` attribute. Examples:\n```python\nKlass.objects.filter(Parent.my_hybrid_property.t('parent') == 'value')\nKlass.objects.filter(GrandParent.my_hybrid_property.t('parent__grandparent') > 'value')\nKlass.objects.filter(Child.my_hybrid_property.t('children') < 'value')\n```\n\n- Raw expressions (for you to use it whatever you want) via `.e()` attribute. Examples:\n```python\nKlass.objects.annotate(my_method_result=Klass.my_hybrid_method().e())\n```\n\n- Custom alias via `.a()` attribute (so you can reference the annotated expression later on). Examples:\n```python\nKlass.objects.filter(Klass.my_hybrid_property.a('_expr_alias') > 'value').order_by('_expr_alias')\n```\n\n- Test/script helper to ensure hybrid expressions are sane compared to its properties/methods. Examples:\n```python\nfrom django_hybrid_attributes.test_utils import assert_hybrid_attributes_are_consistent, HybridTestCaseMixin\n\n\nclass MyTestCase(HybridTestCaseMixin, YourBaseTestcase):\n    def test_expressions_are_sane(self):\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_property)\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_method_without_args)\n\n        # In order to pass arguments to your function, pass them as args/kwargs in the assert call:\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_method_with_args, 1)\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_method_with_args, n=1)\n\n        # By default this will compare return of expression/function for all instances (Klass.objects.all()).\n        # In order to run for a subset of results use the `queryset` param:\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_property, queryset=Klass.objects.filter(id=1))\n\n        # You can also use it as a helper (outside of tests scope) of some sort (HybridTestCaseMixin is not required):\n        assert_hybrid_attributes_are_consistent(Klass.my_hybrid_property)\n```\n\n- No dark magic: under the hood, all it does is to `annotate()` an expression to a queryset and `filter/exclude()` using this annotation.\n\n\n## FAQ\n\n### Q: Why do I need this project? Couldn't I use `Klass.objects.annotate(whatever=<expression>).filter(whatever=<value>)`?\nA: You don't need this project. And you could use this approach.\nThat being said, I still see some reasons to use this project, such as:\n- Cleaner and more concise code;\n- Support for relations via `.t()/.through()`;\n- Better code placement (method and its expression lives alongside each other, instead of spread over 2 different files (models.py and managers.py))\n\n### Q: Why is this `.t()` needed? Couldn't I use `through` parameter directly?\nA: You could do that for hybrid_methods (and you can, nothing stops you from doing this). However, this wouldn't work for hybrid_properties for obvious reasons. =P\n\n### Q: SQLAlchemy creates automatically the `.expression` function for the simplest cases. Does this project do it as well?\nA: No, I didn't find a decent (meaning: non-smelly) way of doing this using Django structure (yet). Suggestions are welcome.\n\n### Q: Why is there that amount of abbreviations in the code?\nA: I don't like code abbreviations either. However, Django querysets are rather way too long which makes them hard to read anyway. This is an attempt to make them a bit shorter.\nStill, if you don't buy it, you can use the non-abbreviated aliases:\n- `.a()` --> `.alias()`\n- `.e()` --> `.expression()`\n- `.i()` --> `.ignore_case_in_lookup()`\n- `.l()` --> `.lookup()`\n- `.t()` --> `.through()`\n\n\n## Limitations and known issues\n\n* `.expression()` must return a plain Django expression (at least for now).\nIt means that if, for instance, an expression depends on a prior annotation, at least the prior annotation must be done out of the `.expression()` attribute (which might be a bad design as the logic would be kind of segmented).\n\n* There's no interface to call `.distinct()` for the expressions. So `Klass.my_property.t('this__duplicates__rows')` might return duplicated rows (specially on reverse relationships via `.t()`)\n\n\n## Contributing\n\nPlease [open issues](https://github.com/filwaitman/django-hybrid-attributes/issues) if you see one, or [create a pull request](https://github.com/filwaitman/django-hybrid-attributes/pulls) when possible.  \nIn case of a pull request, please consider the following:\n- Respect the line length (132 characters)\n- Keep the great test coverage of this project\n- Run `tox` locally so you can see if everything is green (including linter and other python versions)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-hybrid-attributes", "package_url": "https://pypi.org/project/django-hybrid-attributes/", "platform": "", "project_url": "https://pypi.org/project/django-hybrid-attributes/", "project_urls": {"Source": "https://github.com/filwaitman/django-hybrid-attributes"}, "release_url": "https://pypi.org/project/django-hybrid-attributes/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A Django plugin for mimicking the power of SQLAlchemy hybrid_property and hybrid_method", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Hybrid Property</h1>\n<h2>TODO:</h2>\n<ul>\n<li>travis</li>\n<li>codecov</li>\n</ul>\n<p>This is a (pretty basic) implementation of the <a href=\"https://docs.sqlalchemy.org/en/13/orm/extensions/hybrid.html\" rel=\"nofollow\">SQLAlchemy Hybrid Attributes</a> for Django - more precisely <code>hybrid_property</code> and <code>hybrid_method</code>.</p>\n<h2>Example of basic usage:</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_hybrid_attributes</span> <span class=\"kn\">import</span> <span class=\"n\">hybrid_method</span><span class=\"p\">,</span> <span class=\"n\">hybrid_property</span><span class=\"p\">,</span> <span class=\"n\">HybridQuerySet</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">63</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">63</span><span class=\"p\">)</span>\n    <span class=\"n\">some_value</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">PositiveSmallIntegerField</span><span class=\"p\">()</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">HybridQuerySet</span><span class=\"o\">.</span><span class=\"n\">as_manager</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@hybrid_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">full_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n    <span class=\"nd\">@full_name</span><span class=\"o\">.</span><span class=\"n\">expression</span>\n    <span class=\"k\">def</span> <span class=\"nf\">full_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">functions</span><span class=\"o\">.</span><span class=\"n\">Concat</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">through</span><span class=\"si\">}</span><span class=\"s1\">first_name'</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">),</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">through</span><span class=\"si\">}</span><span class=\"s1\">last_name'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@hybrid_method</span>\n    <span class=\"k\">def</span> <span class=\"nf\">some_value_plus_n</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">some_value</span> <span class=\"o\">+</span> <span class=\"n\">n</span>\n\n    <span class=\"nd\">@some_value_plus_n</span><span class=\"o\">.</span><span class=\"n\">expression</span>\n    <span class=\"k\">def</span> <span class=\"nf\">some_value_plus_n</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">through</span><span class=\"si\">}</span><span class=\"s1\">some_value'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">user1</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'Filipe'</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s1\">'Waitman'</span><span class=\"p\">,</span> <span class=\"n\">some_value</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">user2</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'Agent'</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s1\">'Smith'</span><span class=\"p\">,</span> <span class=\"n\">some_value</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compatible with regular django .filter() - so this won't break your existing code</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'Filipe'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s1\">'Waitman'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># hybrid_property/hybrid_method functions are common properties/methods</span>\n<span class=\"k\">assert</span> <span class=\"n\">user1</span><span class=\"o\">.</span><span class=\"n\">full_name</span> <span class=\"o\">==</span> <span class=\"s1\">'Filipe Waitman'</span>\n<span class=\"k\">assert</span> <span class=\"n\">user2</span><span class=\"o\">.</span><span class=\"n\">some_value_plus_n</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">15</span>\n\n<span class=\"c1\"># hybrid_property/hybrid_method expressions are translated to Q() objects, annotated, and filtered accordingly</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">full_name</span> <span class=\"o\">==</span> <span class=\"s1\">'Filipe Waitman'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">full_name</span> <span class=\"o\">==</span> <span class=\"s1\">'FILIPE WAITMAN'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">full_name</span> <span class=\"o\">!=</span> <span class=\"s1\">'FILIPE WAITMAN'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">full_name</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'FILIPE WAITMAN'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>  <span class=\"c1\"># .i() ignores case, so iexact is applied</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">full_name</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"s1\">'contains'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'WAIT'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>  <span class=\"c1\"># icontains is applied</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">some_value_plus_n</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">25</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">some_value_plus_n</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">some_value_plus_n</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">25</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># `.e()` returns the equivalent Django expression so you can use it as you wish</span>\n<span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">value_plus_3</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">some_value_plus_n</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">e</span><span class=\"p\">())</span>\n<span class=\"k\">assert</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value_plus_3</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'value_plus_3'</span><span class=\"p\">)]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]</span>\n</pre>\n<p>For another examples, please refer to the tests folder.</p>\n<h2>Features:</h2>\n<ul>\n<li>Filter support using Python magic methods. Examples:</li>\n</ul>\n<pre><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span> <span class=\"o\">==</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=exact</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=iexact</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span> <span class=\"o\">!=</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=exact, queryset_method=exclude</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span> <span class=\"o\">==</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=exact, queryset_method=exclude</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span> <span class=\"o\">&gt;</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=gt</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span> <span class=\"o\">&lt;</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=lt</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span> <span class=\"o\">&gt;=</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=gte</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span> <span class=\"o\">&lt;=</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=lte</span>\n</pre>\n<ul>\n<li>Support of all django lookups via <code>l()</code> attribute. Examples:</li>\n</ul>\n<pre><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"s1\">'istartswith'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"s1\">'startswith'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>  <span class=\"c1\"># lookup=istartswith</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"s1\">'contains'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"s1\">'date__year'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Relations support via <code>t()</code> attribute. Examples:</li>\n</ul>\n<pre><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Parent</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">GrandParent</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s1\">'parent__grandparent'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Child</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s1\">'children'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Raw expressions (for you to use it whatever you want) via <code>.e()</code> attribute. Examples:</li>\n</ul>\n<pre><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">my_method_result</span><span class=\"o\">=</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_method</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">e</span><span class=\"p\">())</span>\n</pre>\n<ul>\n<li>Custom alias via <code>.a()</code> attribute (so you can reference the annotated expression later on). Examples:</li>\n</ul>\n<pre><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s1\">'_expr_alias'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'_expr_alias'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Test/script helper to ensure hybrid expressions are sane compared to its properties/methods. Examples:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_hybrid_attributes.test_utils</span> <span class=\"kn\">import</span> <span class=\"n\">assert_hybrid_attributes_are_consistent</span><span class=\"p\">,</span> <span class=\"n\">HybridTestCaseMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTestCase</span><span class=\"p\">(</span><span class=\"n\">HybridTestCaseMixin</span><span class=\"p\">,</span> <span class=\"n\">YourBaseTestcase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_expressions_are_sane</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertHybridAttributesAreConsistent</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertHybridAttributesAreConsistent</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_method_without_args</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># In order to pass arguments to your function, pass them as args/kwargs in the assert call:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertHybridAttributesAreConsistent</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_method_with_args</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertHybridAttributesAreConsistent</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_method_with_args</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># By default this will compare return of expression/function for all instances (Klass.objects.all()).</span>\n        <span class=\"c1\"># In order to run for a subset of results use the `queryset` param:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertHybridAttributesAreConsistent</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># You can also use it as a helper (outside of tests scope) of some sort (HybridTestCaseMixin is not required):</span>\n        <span class=\"n\">assert_hybrid_attributes_are_consistent</span><span class=\"p\">(</span><span class=\"n\">Klass</span><span class=\"o\">.</span><span class=\"n\">my_hybrid_property</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>No dark magic: under the hood, all it does is to <code>annotate()</code> an expression to a queryset and <code>filter/exclude()</code> using this annotation.</li>\n</ul>\n<h2>FAQ</h2>\n<h3>Q: Why do I need this project? Couldn't I use <code>Klass.objects.annotate(whatever=&lt;expression&gt;).filter(whatever=&lt;value&gt;)</code>?</h3>\n<p>A: You don't need this project. And you could use this approach.\nThat being said, I still see some reasons to use this project, such as:</p>\n<ul>\n<li>Cleaner and more concise code;</li>\n<li>Support for relations via <code>.t()/.through()</code>;</li>\n<li>Better code placement (method and its expression lives alongside each other, instead of spread over 2 different files (models.py and managers.py))</li>\n</ul>\n<h3>Q: Why is this <code>.t()</code> needed? Couldn't I use <code>through</code> parameter directly?</h3>\n<p>A: You could do that for hybrid_methods (and you can, nothing stops you from doing this). However, this wouldn't work for hybrid_properties for obvious reasons. =P</p>\n<h3>Q: SQLAlchemy creates automatically the <code>.expression</code> function for the simplest cases. Does this project do it as well?</h3>\n<p>A: No, I didn't find a decent (meaning: non-smelly) way of doing this using Django structure (yet). Suggestions are welcome.</p>\n<h3>Q: Why is there that amount of abbreviations in the code?</h3>\n<p>A: I don't like code abbreviations either. However, Django querysets are rather way too long which makes them hard to read anyway. This is an attempt to make them a bit shorter.\nStill, if you don't buy it, you can use the non-abbreviated aliases:</p>\n<ul>\n<li><code>.a()</code> --&gt; <code>.alias()</code></li>\n<li><code>.e()</code> --&gt; <code>.expression()</code></li>\n<li><code>.i()</code> --&gt; <code>.ignore_case_in_lookup()</code></li>\n<li><code>.l()</code> --&gt; <code>.lookup()</code></li>\n<li><code>.t()</code> --&gt; <code>.through()</code></li>\n</ul>\n<h2>Limitations and known issues</h2>\n<ul>\n<li>\n<p><code>.expression()</code> must return a plain Django expression (at least for now).\nIt means that if, for instance, an expression depends on a prior annotation, at least the prior annotation must be done out of the <code>.expression()</code> attribute (which might be a bad design as the logic would be kind of segmented).</p>\n</li>\n<li>\n<p>There's no interface to call <code>.distinct()</code> for the expressions. So <code>Klass.my_property.t('this__duplicates__rows')</code> might return duplicated rows (specially on reverse relationships via <code>.t()</code>)</p>\n</li>\n</ul>\n<h2>Contributing</h2>\n<p>Please <a href=\"https://github.com/filwaitman/django-hybrid-attributes/issues\" rel=\"nofollow\">open issues</a> if you see one, or <a href=\"https://github.com/filwaitman/django-hybrid-attributes/pulls\" rel=\"nofollow\">create a pull request</a> when possible.<br>\nIn case of a pull request, please consider the following:</p>\n<ul>\n<li>Respect the line length (132 characters)</li>\n<li>Keep the great test coverage of this project</li>\n<li>Run <code>tox</code> locally so you can see if everything is green (including linter and other python versions)</li>\n</ul>\n\n          </div>"}, "last_serial": 6979583, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0297ce84a1abac3ed3123cd8b090698d", "sha256": "4cdea4426215e79dd5bf1db4548660814e9988cdfd447bea7e7dc24c395c75cd"}, "downloads": -1, "filename": "django_hybrid_attributes-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0297ce84a1abac3ed3123cd8b090698d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10270, "upload_time": "2020-04-08T17:57:20", "upload_time_iso_8601": "2020-04-08T17:57:20.680318Z", "url": "https://files.pythonhosted.org/packages/ea/7c/7729b4215ccfc234941b3b8a36bd11022118064134d0da37f36501c4a1bc/django_hybrid_attributes-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dede64cfdb36e3fca0da96d173e694d", "sha256": "259ff8927095a0a0a5aa44aeed7d2cdacdc6a0a880ddf92378681b3beeab3043"}, "downloads": -1, "filename": "django-hybrid-attributes-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7dede64cfdb36e3fca0da96d173e694d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8775, "upload_time": "2020-04-08T17:57:23", "upload_time_iso_8601": "2020-04-08T17:57:23.110709Z", "url": "https://files.pythonhosted.org/packages/2c/a6/0ce7693560b8e7b01203dd5a29fdd993ee6b6fa512b0c778d4b6be7392ec/django-hybrid-attributes-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0297ce84a1abac3ed3123cd8b090698d", "sha256": "4cdea4426215e79dd5bf1db4548660814e9988cdfd447bea7e7dc24c395c75cd"}, "downloads": -1, "filename": "django_hybrid_attributes-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0297ce84a1abac3ed3123cd8b090698d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10270, "upload_time": "2020-04-08T17:57:20", "upload_time_iso_8601": "2020-04-08T17:57:20.680318Z", "url": "https://files.pythonhosted.org/packages/ea/7c/7729b4215ccfc234941b3b8a36bd11022118064134d0da37f36501c4a1bc/django_hybrid_attributes-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dede64cfdb36e3fca0da96d173e694d", "sha256": "259ff8927095a0a0a5aa44aeed7d2cdacdc6a0a880ddf92378681b3beeab3043"}, "downloads": -1, "filename": "django-hybrid-attributes-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7dede64cfdb36e3fca0da96d173e694d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8775, "upload_time": "2020-04-08T17:57:23", "upload_time_iso_8601": "2020-04-08T17:57:23.110709Z", "url": "https://files.pythonhosted.org/packages/2c/a6/0ce7693560b8e7b01203dd5a29fdd993ee6b6fa512b0c778d4b6be7392ec/django-hybrid-attributes-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:40 2020"}