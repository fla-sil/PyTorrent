{"info": {"author": "Danny Zhu", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Topic :: Documentation", "Topic :: Documentation :: Sphinx", "Topic :: Software Development :: Documentation"], "description": "##########################################\n rstfmt: a formatter for reStructuredText\n##########################################\n\n*Not to be confused with* rustfmt_.\n\n*Highly experimental and unstable. Do not depend on this yet.*\n\n*************\n Description\n*************\n\nrstfmt is a tool for automatically formatting reStructuredText_ files in\na consistent way.\n\nLike Black_ and gofmt_, the motivation is to provide a format that is\nreasonable and minimally configurable to prevent teams from wasting time\non style discussions (or individuals on manually doing formatting, for\nthat matter).\n\nCurrently, rstfmt is in an *extremely* early stage of development. Not\nall reST constructs are covered and the interface or formatting may\nchange at any time without warning.\n\nTo get a feel for the output of rstfmt, see `the sample file\n<sample.rst>`__.\n\n*******\n Usage\n*******\n\n.. code:: sh\n\n   # Install.\n   pip install git+https://github.com/dzhu/rstfmt\n\n   # Install from PyPI (but releases there may be out-of-date).\n   pip install rstfmt\n\n   # Read a file from stdin and write the formatted version to stdout.\n   rstfmt\n\n   # Format the given files, printing all output to stdout.\n   rstfmt <file>...\n\n   # Format the given files in place.\n   rstfmt -i <file>...\n\n   # Wrap paragraphs to the given line length (default 72).\n   rstfmt -w <width>\n\nLike Black's blackd_, there is also a daemon that provides formatting\nvia HTTP requests to avoid the cost of starting and importing everything\non every run.\n\n.. code:: sh\n\n   # Install.\n   pip install https://github.com/dzhu/rstfmt[d]\n\n   # Start the daemon (binds to localhost:5219 by default).\n   rstfmtd --bind-host=<host> --bind-port=<port>\n\n   # Print the formatted version of a file.\n   curl http://locahost:5219 --data-binary @<file>\n\n   # Specify the line length (default 72).\n   curl -H 'X-Line-Length: 72' http://locahost:5219 --data-binary @<file>\n\n   # Mimic the standalone tool: read from stdin, write to stdout, exit with\n   # a nonzero status code if there are errors.\n   curl -fsS http://locahost:5219 --data-binary @/dev/stdin\n\nWith editors\n============\n\nThe default behavior of reading from stdin and writing to stdout should\nintegrate well with other systems, such as on-save hooks in editors. For\nexample, here's a configuration for reformatter.el_, including both\nstandalone and daemon modes:\n\n.. code:: lisp\n\n   ;; Run the standalone tool.\n   (reformatter-define rstfmt\n     :program \"rstfmt\")\n   (add-hook 'rst-mode-hook #'rstfmt-on-save-mode)\n\n   ;; Query the daemon.\n   (reformatter-define client-rstfmt\n     :program \"curl\"\n     :args '(\"-fsS\" \"http://localhost:5219\" \"--data-binary\" \"@/dev/stdin\"))\n   (add-hook 'rst-mode-hook #'client-rstfmt-on-save-mode)\n\n.. _black: https://github.com/psf/black\n\n.. _blackd: https://github.com/psf/black#blackd\n\n.. _docutils: https://docutils.sourceforge.io/\n\n.. _gofmt: https://blog.golang.org/gofmt\n\n.. _pandoc: https://pandoc.org/\n\n.. _reformatter.el: https://github.com/purcell/reformatter.el\n\n.. _restructuredtext: https://docutils.sourceforge.io/docs/user/rst/quickstart.html\n\n.. _rustfmt: https://github.com/rust-lang/rustfmt\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dzhu/rstfmt", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rstfmt", "package_url": "https://pypi.org/project/rstfmt/", "platform": "", "project_url": "https://pypi.org/project/rstfmt/", "project_urls": {"Homepage": "https://github.com/dzhu/rstfmt"}, "release_url": "https://pypi.org/project/rstfmt/0.0.2/", "requires_dist": ["black (==19.10b0)", "sphinx (>=2.4.0)", "aiohttp (>=3.3.2) ; extra == 'd'"], "requires_python": ">=3.6", "summary": "A formatter for reStructuredText", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Not to be confused with</em> <a href=\"https://github.com/rust-lang/rustfmt\" rel=\"nofollow\">rustfmt</a>.</p>\n<p><em>Highly experimental and unstable. Do not depend on this yet.</em></p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>rstfmt is a tool for automatically formatting <a href=\"https://docutils.sourceforge.io/docs/user/rst/quickstart.html\" rel=\"nofollow\">reStructuredText</a> files in\na consistent way.</p>\n<p>Like <a href=\"https://github.com/psf/black\" rel=\"nofollow\">Black</a> and <a href=\"https://blog.golang.org/gofmt\" rel=\"nofollow\">gofmt</a>, the motivation is to provide a format that is\nreasonable and minimally configurable to prevent teams from wasting time\non style discussions (or individuals on manually doing formatting, for\nthat matter).</p>\n<p>Currently, rstfmt is in an <em>extremely</em> early stage of development. Not\nall reST constructs are covered and the interface or formatting may\nchange at any time without warning.</p>\n<p>To get a feel for the output of rstfmt, see <a href=\"sample.rst\" rel=\"nofollow\">the sample file</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"c1\"># Install.\n</span>pip install git+https://github.com/dzhu/rstfmt\n\n<span class=\"c1\"># Install from PyPI (but releases there may be out-of-date).\n</span>pip install rstfmt\n\n<span class=\"c1\"># Read a file from stdin and write the formatted version to stdout.\n</span>rstfmt\n\n<span class=\"c1\"># Format the given files, printing all output to stdout.\n</span>rstfmt &lt;file&gt;...\n\n<span class=\"c1\"># Format the given files in place.\n</span>rstfmt -i &lt;file&gt;...\n\n<span class=\"c1\"># Wrap paragraphs to the given line length (default 72).\n</span>rstfmt -w &lt;width&gt;\n</pre>\n<p>Like Black\u2019s <a href=\"https://github.com/psf/black#blackd\" rel=\"nofollow\">blackd</a>, there is also a daemon that provides formatting\nvia HTTP requests to avoid the cost of starting and importing everything\non every run.</p>\n<pre><span class=\"c1\"># Install.\n</span>pip install https://github.com/dzhu/rstfmt<span class=\"o\">[</span>d<span class=\"o\">]</span>\n\n<span class=\"c1\"># Start the daemon (binds to localhost:5219 by default).\n</span>rstfmtd --bind-host<span class=\"o\">=</span>&lt;host&gt; --bind-port<span class=\"o\">=</span>&lt;port&gt;\n\n<span class=\"c1\"># Print the formatted version of a file.\n</span>curl http://locahost:5219 --data-binary @&lt;file&gt;\n\n<span class=\"c1\"># Specify the line length (default 72).\n</span>curl -H <span class=\"s1\">'X-Line-Length: 72'</span> http://locahost:5219 --data-binary @&lt;file&gt;\n\n<span class=\"c1\"># Mimic the standalone tool: read from stdin, write to stdout, exit with\n# a nonzero status code if there are errors.\n</span>curl -fsS http://locahost:5219 --data-binary @/dev/stdin\n</pre>\n<div id=\"with-editors\">\n<h3>With editors</h3>\n<p>The default behavior of reading from stdin and writing to stdout should\nintegrate well with other systems, such as on-save hooks in editors. For\nexample, here\u2019s a configuration for <a href=\"https://github.com/purcell/reformatter.el\" rel=\"nofollow\">reformatter.el</a>, including both\nstandalone and daemon modes:</p>\n<pre><span class=\"c1\">;; Run the standalone tool.</span>\n<span class=\"p\">(</span><span class=\"nv\">reformatter-define</span> <span class=\"nv\">rstfmt</span>\n  <span class=\"ss\">:program</span> <span class=\"s\">\"rstfmt\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'rst-mode-hook</span> <span class=\"nf\">#'</span><span class=\"nv\">rstfmt-on-save-mode</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Query the daemon.</span>\n<span class=\"p\">(</span><span class=\"nv\">reformatter-define</span> <span class=\"nv\">client-rstfmt</span>\n  <span class=\"ss\">:program</span> <span class=\"s\">\"curl\"</span>\n  <span class=\"ss\">:args</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">\"-fsS\"</span> <span class=\"s\">\"http://localhost:5219\"</span> <span class=\"s\">\"--data-binary\"</span> <span class=\"s\">\"@/dev/stdin\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'rst-mode-hook</span> <span class=\"nf\">#'</span><span class=\"nv\">client-rstfmt-on-save-mode</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7057856, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2121c39ea363798c28ddfdbf830ca878", "sha256": "f2f97ea419e2d06aed434d9946d23468adcf3a86e71beddc64a4f0fbb8d8c1f6"}, "downloads": -1, "filename": "rstfmt-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2121c39ea363798c28ddfdbf830ca878", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10779, "upload_time": "2020-04-14T08:00:00", "upload_time_iso_8601": "2020-04-14T08:00:00.396415Z", "url": "https://files.pythonhosted.org/packages/93/3e/d7fae59fe9425f0919615d9a8d1ac344341d7b8f9c02cf0d3e2e69eb8a35/rstfmt-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "44cae4bc66a19ada2dee44d25f756ad6", "sha256": "19169f6bfb70a10fcb0a6fec872c8b651acc35ec9648de11dd24ba7b9e958fa9"}, "downloads": -1, "filename": "rstfmt-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "44cae4bc66a19ada2dee44d25f756ad6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13361, "upload_time": "2020-04-20T06:11:37", "upload_time_iso_8601": "2020-04-20T06:11:37.255362Z", "url": "https://files.pythonhosted.org/packages/4f/5d/3de0558dd5a48452a4bb279ea2959dd7a2101bd02c7bd67da5d0dcbc6962/rstfmt-0.0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "44cae4bc66a19ada2dee44d25f756ad6", "sha256": "19169f6bfb70a10fcb0a6fec872c8b651acc35ec9648de11dd24ba7b9e958fa9"}, "downloads": -1, "filename": "rstfmt-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "44cae4bc66a19ada2dee44d25f756ad6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13361, "upload_time": "2020-04-20T06:11:37", "upload_time_iso_8601": "2020-04-20T06:11:37.255362Z", "url": "https://files.pythonhosted.org/packages/4f/5d/3de0558dd5a48452a4bb279ea2959dd7a2101bd02c7bd67da5d0dcbc6962/rstfmt-0.0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:00:32 2020"}