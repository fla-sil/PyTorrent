{"info": {"author": "Ariane Mora", "author_email": "ariane.n.mora@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# sciviso\n\n## A wrapper to format all plots the same \n\nShared functions:\n\n```\n# Builds the plot\nchart.plot()\n\n# Saves to svg\nchart.save_svg([directory, filename])\n\n# Saves to png\nchart.save_png([directory, filename], dpi=100)\n\n# Returns svg string \nchart.get_svg()\n```\n\n## Barchart\n\nStandard seaborn wrapper. See documentation.\n```\nbarchart = Barchart(df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', hue=None, order=None,\n                 hue_order=None)\n```\n\n## Boxplot\nWrapper to create a box plot with option for annotating statistics.\n\n```\nboxplot = Boxplot(df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', \n                    hue=None, order=None, hue_order=None)\n\n# Also you can use the boxplot class to format data for the boxplot from a standard dataframe\nboxplot.format_data_for_boxplot(df: pd.DataFrame, conditions: list, filter_column=None, filter_values=None):\n\n# Here we create a new dataframe with the columns: Conditions, Samples, Values\n\"\"\"\nConditions: for each of the conditions that the user specified we check if that is in a c\nolumn of the dataframe, if it is then that column's values are added to values and labelled with that condition\nSamples: original name of the column\nValues: value from that column for each row\n\ne.g. df.columns = 'gender,      control_s1,     control_s2,     drug_1,     drug_2'\n     df.values = [['female',    12              11              9           8],\n                  ['male',      10              19              5           4]]\nI could format it to a boxplot with conditions=['control', 'drug'], filter_column='gender', ['female']\n\n\"\"\"\n```\n\n## Heatmap\n\nWrapper on seaborns clustermap. See that for details.\n```\nheatmap = Heatmap(df: pd.DataFrame, chart_columns: list, row_index: str, title='', xlabel='', ylabel='',\n                 cluster_rows=True, cluster_cols=True, row_colours=None, vmin=None, vmax=None)\n\n\n```\n## Scatterplot\nScatter with optional annotation & regression (toDo.)\n```\nscatter = Scatterplot(self, df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', colour=None,\n                 points_to_annotate=None, annotation_label=None, add_correlation=False, correlation='Spearman')\n```\n\n## Violinplot\nVery similar to the box plot just without the stats annotation. You can use the boxplot formatter to format the data\nfor the violin plot.\n\n```\nviolinplot = Violinplot(self, df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', hue=None, order=None,\n                 hue_order=None, showfliers=False, add_dots=False)\n```\n\n## Volcanoplot\nVolcano plot with annotation of selected values or all the top values.\n\n```\nvolcano = Volcanoplot(self, df: pd.DataFrame, log_fc: str, p_val: str, label_column: str, title='',\n                 xlabel='', ylabel='', invert=False, p_val_cutoff=0.05,\n                 log_fc_cuttoff=2, label_big_sig=False, colours=None, offset=0, values_to_label=None)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ArianeMora/sciviso", "keywords": "util", "license": "GPL3", "maintainer": "", "maintainer_email": "", "name": "sciviso", "package_url": "https://pypi.org/project/sciviso/", "platform": "", "project_url": "https://pypi.org/project/sciviso/", "project_urls": {"Bug Tracker": "https://github.com/ArianeMora/sciviso/issues", "Documentation": "https://github.com/ArianeMora/sciviso", "Homepage": "https://github.com/ArianeMora/sciviso", "Source Code": "https://github.com/ArianeMora/sciviso"}, "release_url": "https://pypi.org/project/sciviso/1.0.0/", "requires_dist": ["sciutil", "pandas", "numpy", "matplotlib", "statannot", "seaborn"], "requires_python": ">=3.6", "summary": "sciviso: Wrapper for common visualisations for sci constellation.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sciviso</h1>\n<h2>A wrapper to format all plots the same</h2>\n<p>Shared functions:</p>\n<pre><code># Builds the plot\nchart.plot()\n\n# Saves to svg\nchart.save_svg([directory, filename])\n\n# Saves to png\nchart.save_png([directory, filename], dpi=100)\n\n# Returns svg string \nchart.get_svg()\n</code></pre>\n<h2>Barchart</h2>\n<p>Standard seaborn wrapper. See documentation.</p>\n<pre><code>barchart = Barchart(df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', hue=None, order=None,\n                 hue_order=None)\n</code></pre>\n<h2>Boxplot</h2>\n<p>Wrapper to create a box plot with option for annotating statistics.</p>\n<pre><code>boxplot = Boxplot(df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', \n                    hue=None, order=None, hue_order=None)\n\n# Also you can use the boxplot class to format data for the boxplot from a standard dataframe\nboxplot.format_data_for_boxplot(df: pd.DataFrame, conditions: list, filter_column=None, filter_values=None):\n\n# Here we create a new dataframe with the columns: Conditions, Samples, Values\n\"\"\"\nConditions: for each of the conditions that the user specified we check if that is in a c\nolumn of the dataframe, if it is then that column's values are added to values and labelled with that condition\nSamples: original name of the column\nValues: value from that column for each row\n\ne.g. df.columns = 'gender,      control_s1,     control_s2,     drug_1,     drug_2'\n     df.values = [['female',    12              11              9           8],\n                  ['male',      10              19              5           4]]\nI could format it to a boxplot with conditions=['control', 'drug'], filter_column='gender', ['female']\n\n\"\"\"\n</code></pre>\n<h2>Heatmap</h2>\n<p>Wrapper on seaborns clustermap. See that for details.</p>\n<pre><code>heatmap = Heatmap(df: pd.DataFrame, chart_columns: list, row_index: str, title='', xlabel='', ylabel='',\n                 cluster_rows=True, cluster_cols=True, row_colours=None, vmin=None, vmax=None)\n\n\n</code></pre>\n<h2>Scatterplot</h2>\n<p>Scatter with optional annotation &amp; regression (toDo.)</p>\n<pre><code>scatter = Scatterplot(self, df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', colour=None,\n                 points_to_annotate=None, annotation_label=None, add_correlation=False, correlation='Spearman')\n</code></pre>\n<h2>Violinplot</h2>\n<p>Very similar to the box plot just without the stats annotation. You can use the boxplot formatter to format the data\nfor the violin plot.</p>\n<pre><code>violinplot = Violinplot(self, df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', hue=None, order=None,\n                 hue_order=None, showfliers=False, add_dots=False)\n</code></pre>\n<h2>Volcanoplot</h2>\n<p>Volcano plot with annotation of selected values or all the top values.</p>\n<pre><code>volcano = Volcanoplot(self, df: pd.DataFrame, log_fc: str, p_val: str, label_column: str, title='',\n                 xlabel='', ylabel='', invert=False, p_val_cutoff=0.05,\n                 log_fc_cuttoff=2, label_big_sig=False, colours=None, offset=0, values_to_label=None)\n</code></pre>\n\n          </div>"}, "last_serial": 7037253, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3a0a97f907b34db49282168c4a5ad872", "sha256": "e8f724835f1b89531de85245be8804cf78516cd0fd59dfac53aab258b50c58c2"}, "downloads": -1, "filename": "sciviso-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a0a97f907b34db49282168c4a5ad872", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40926, "upload_time": "2020-04-17T04:01:36", "upload_time_iso_8601": "2020-04-17T04:01:36.809026Z", "url": "https://files.pythonhosted.org/packages/ed/ea/465286ef483e089cbd940514e3e076e28f0dad9462b201405237018e39bd/sciviso-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c96b3e2319f1a81befcf3a70fab4b19", "sha256": "d121ef4bb0008da3c01f71be10b1b1f4994f80f193f0af0c7f9ef54d577f5465"}, "downloads": -1, "filename": "sciviso-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6c96b3e2319f1a81befcf3a70fab4b19", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22358, "upload_time": "2020-04-17T04:01:39", "upload_time_iso_8601": "2020-04-17T04:01:39.074469Z", "url": "https://files.pythonhosted.org/packages/3a/7f/db587535db918a7bed295285cadd27c8e2e01d8b62afc942708b2ade9b7b/sciviso-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a0a97f907b34db49282168c4a5ad872", "sha256": "e8f724835f1b89531de85245be8804cf78516cd0fd59dfac53aab258b50c58c2"}, "downloads": -1, "filename": "sciviso-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a0a97f907b34db49282168c4a5ad872", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40926, "upload_time": "2020-04-17T04:01:36", "upload_time_iso_8601": "2020-04-17T04:01:36.809026Z", "url": "https://files.pythonhosted.org/packages/ed/ea/465286ef483e089cbd940514e3e076e28f0dad9462b201405237018e39bd/sciviso-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c96b3e2319f1a81befcf3a70fab4b19", "sha256": "d121ef4bb0008da3c01f71be10b1b1f4994f80f193f0af0c7f9ef54d577f5465"}, "downloads": -1, "filename": "sciviso-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6c96b3e2319f1a81befcf3a70fab4b19", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22358, "upload_time": "2020-04-17T04:01:39", "upload_time_iso_8601": "2020-04-17T04:01:39.074469Z", "url": "https://files.pythonhosted.org/packages/3a/7f/db587535db918a7bed295285cadd27c8e2e01d8b62afc942708b2ade9b7b/sciviso-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:12 2020"}