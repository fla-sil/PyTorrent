{"info": {"author": "Paul Gazzillo", "author_email": "paul@pgazz.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Topic :: Utilities"], "description": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [The Kmax Tool Suite](#the-kmax-tool-suite)\n  - [Tools](#tools)\n  - [Contributors](#contributors)\n  - [Setup](#setup)\n  - [Quick Start](#quick-start)\n  - [Use Cases](#use-cases)\n    - [A Compilation Unit not Built by `allyesconfig`](#a-compilation-unit-not-built-by-allyesconfig)\n    - [A Compilation Unit not Built by `defconfig` or `allnoconfig`](#a-compilation-unit-not-built-by-defconfig-or-allnoconfig)\n    - [An Architecture-Specific Compilation Unit](#an-architecture-specific-compilation-unit)\n  - [Advanced Usage](#advanced-usage)\n  - [Troubleshooting](#troubleshooting)\n  - [Generating Formulas for Linux](#generating-formulas-for-linux)\n  - [Kmax](#kmax)\n    - [Simple example](#simple-example)\n    - [Example on Linux](#example-on-linux)\n  - [Kclause](#kclause)\n    - [Example](#example)\n    - [Building kconfig_extract](#building-kconfig_extract)\n    - [Other uses](#other-uses)\n      - [Get a list of all visible configs](#get-a-list-of-all-visible-configs)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n# The Kmax Tool Suite\n\n## Tools\n\nThe Kmax Tool Suite (kmaxtools) contains a set of tools for performing\nautomated reasoning on Kconfig and Kbuild constraints.  It consists of\nthe following tools:\n\n- `klocalizer` takes the name of a compilation unit and automatically\n  generates a `.config` file that, when compiled, will include the\n  given compilation unit.  It uses the logical models from `kclause` and `kmax`\n- `kclause` \"compiles\"\n  [Kconfig](https://www.kernel.org/doc/html/latest/kbuild/kconfig-language.html)\n  constraints into logical formulas.  `kconfig_extractor` uses Linux's\n  own Kconfig parser to perform an extraction of the syntax of\n  configuration option names, types, dependencies, etc.\n- `kmax` collects configuration information from [Kbuild\n  Makefiles](https://www.kernel.org/doc/html/latest/kbuild/makefiles.html).\n  It determines, for each compilation unit, a symbolic Boolean\n  expression that represents the conditions under which the file gets\n  compiled and linked into the final program.  Its algorithm is\n  described [here](https://paulgazzillo.com/papers/esecfse17.pdf) and\n  the original implementation can be found\n  [here](https://github.com/paulgazz/kmax/releases/tag/v1.0).\n\n## Contributors\n\n- [Paul Gazzillo](https://paulgazzillo.com) -- creator and developer\n- [ThanhVu Nguyen](https://cse.unl.edu/~tnguyen/) -- developer and z3 integration into `kmax`\n- Jeho Oh -- developer and kclause's Kconfig logical formulas\n- [Julia Lawall](https://pages.lip6.fr/Julia.Lawall/) -- ideation, evaluation\n\n## Setup\n\n`kmaxtools` is currently written for python 2.\n\nThere are two ways to install kmaxtools.\n\n1.  The latest release can be installed via `pip`\n\n        pip install kmaxtools\n\n    Upgrade with\n\n        pip install -U kmaxtools\n    \n2.  Install from the source repository:\n\n        git clone https://github.com/paulgazz/kmax.git\n        cd kmax\n        sudo python setup.py install\n\n    Or use the `--prefix` argument for different installation directory without `sudo`.\n\n    Please see [setup.py] for any dependencies if `setup.py` script does\n    not work.  It may be necessary to install these manually via `pip`, e.g.,\n\n        pip install enum34\n        pip install regex\n        pip install z3-solver\n        pip install dd\n        pip install networkx==2.2\n\n## Quick Start\n\nThe fastest way to get started is to use formulas already extracted for your version of Linux, which you can download here: <https://kmaxtools.opentheblackbox.net/formulas>\n\n    cd /path/to/linux/\n    wget https://kmaxtools.opentheblackbox.net/formulas/kmax-formulas_linux-v5.4.tar.bz2\n    tar -xvf kmax-formulas_linux-v5.4.tar.bz2\n\nThis contains a `.kmax` directory containing the Kconfig and Kbuild\nformulas for each architecture.  If a version is not available\n[here](https://kmaxtools.opentheblackbox.net/formulas) submit an issue to request\nthe formulas be generated and uplodated or see below for directions on\ngenerating these formulas.\n\nRun klocalizer for a given compilation unit, e.g.,\n\n    klocalizer drivers/usb/storage/alauda.o\n\nThis will search each architecture for constraint satisfiability,\nstopping once one is found (or no architecture's constraints are\nsatisfiable).  `klocalizer` writes this configuration to `.config` and\nprints the architectures, e.g., `x86_64`, to standard out.\n\nTo build the compilation unit using the generated `.config`, use\n[make.cross](https://github.com/fengguang/lkp-tests/blob/master/sbin/make.cross).\nFirst set any defaults for the `.config` file:\n\n    make.cross ARCH=x86_64 olddefconfig\n\nThen build the compilation unit:\n\n    make.cross ARCH=x86_64 drivers/usb/storage/alauda.o\n\nIf you cannot get a configuration or it is still not buildable, see the [Troubleshooting](#troubleshooting) section.\n\n## Use Cases\n\n### A compilation unit not built by allyesconfig\n\nWhile `allyesconfig` strives to enable all options, some have conflicting dependencies or are mutually exclusive choices.  For instance, `fs/squashfs/decompressor_multi.o` is not compiled when using `allyesconfig`:\n\n    make allyesconfig\n    make fs/squashfs/decompressor_multi.o\n    \n`make` fails:\n\n    make[3]: *** No rule to make target 'fs/squashfs/decompressor_multi.o'.  Stop.\n\nLet us take a look at the unit's Kbuild dependencies:\n\n    klocalizer --view fs/squashfs/decompressor_multi.o\n\nThe output in part is\n\n    fs/squashfs/decompressor_multi.o\n    [And(CONFIG_SQUASHFS, CONFIG_SQUASHFS_DECOMP_MULTI)]\n\nThe unit is not included in `allyesconfig` because it on both `CONFIG_SQUASHFS` and `CONFIG_SQUASHFS_DECOMP_MULTI`.  The latter is disabled by default, being mutually exclusive with `SQUASHFS_DECOMP_SINGLE` which is selected by allyesconfig:\n\n    make allyesconfig\n    egrep \"(CONFIG_SQUASHFS|CONFIG_SQUASHFS_DECOMP_SINGLE|CONFIG_SQUASHFS_DECOMP_MULTI)( |=)\" .config\n\n`grep` shows us the relevant settings:\n\n    CONFIG_SQUASHFS=y\n    CONFIG_SQUASHFS_DECOMP_SINGLE=y\n    # CONFIG_SQUASHFS_DECOMP_MULTI is not set\n\n`klocalizer` can find a configuration that includes the unit:\n\n    klocalizer fs/squashfs/decompressor_multi.o\n    egrep \"(CONFIG_SQUASHFS|CONFIG_SQUASHFS_DECOMP_SINGLE|CONFIG_SQUASHFS_DECOMP_MULTI)( |=)\" .config\n\n`grep` shows us what `klocalizer` set:\n\n    CONFIG_SQUASHFS=y\n    CONFIG_SQUASHFS_DECOMP_MULTI=y\n    # CONFIG_SQUASHFS_DECOMP_SINGLE is not set\n\nFinally, building the configuration \n\n    make olddefconfig\n    make fs/squashfs/decompressor_multi.o\n\ngives us\n\n      CC      fs/squashfs/decompressor_multi.o\n\n\n### A compilation unit not built by defconfig or allnoconfig\n\nA kernel user or developer may want a smaller kernel that includes a specific compilation unit, rather than having to build `allyesconfig`.  For instance, `drivers/infiniband/core/cgroup.o` is not built by default:\n\n    make defconfig\n    make drivers/infiniband/core/cgroup.o\n    \nThe output contains\n\n    make[2]: *** No rule to make target 'drivers/infiniband/core/cgroup.o'.  Stop.\n\n`klocalizer` can look for a configuration containing the compilation unit that closely matches a given configuration without it by successively removing conflicting constraints until the configuration is valid:\n\n    make defconfig\n    klocalizer --approximate .config drivers/infiniband/core/cgroup.o\n\nNow when building the configuration, the compilation unit is included:\n\n    make olddefconfig\n    make drivers/infiniband/core/cgroup.o\n\nThe output contains:\n\n      CC      drivers/infiniband/core/cgroup.o\n\n\n### An architecture-specific compilation unit not built by allyesconfig\n\nSometimes a compilation unit is only available for certain architectures.   Compiling `drivers/block/ps3disk.o` won't compile on an `x86` machine.\n\n    make allyesconfig\n    klocalizer drivers/block/ps3disk.o\n\nIts output contains\n\n    make[3]: *** No rule to make target 'drivers/block/ps3disk.o'.  Stop.\n\n`klocalizer --view drivers/block/ps3disk.o` shows us that it depends on `CONFIG_PS3_DISK`.  It turns out that this configuration option in turn depends on, among others options, the powerpc architecture.\n\n`klocalizer` can try the constraints from each architecture:\n\n    klocalizer drivers/block/ps3disk.o\n\nIt tells us that `powerpc` is a satisfying architecture.  We can use `make.cross` to cross-compile for `powerpc`.\n\n    make.cross ARCH=powerpc olddefconfig\n    make.cross ARCH=powerpc drivers/block/ps3disk.o\n    \nIts output contains\n\n      CC      drivers/block/ps3disk.o\n\nWe can combine several `klocalizer` features to build an `allnoconfig` kernel that adds in the `ps3disk.o` compilation unit and sets all `tristate` options to modules.\n    \n    make.cross ARCH=powerpc allnoconfig\n    klocalizer -a powerpc --match .config --modules --define CONFIG_MODULES drivers/block/ps3disk.o\n    make.cross ARCH=powerpc olddefconfig\n    make.cross ARCH=powerpc drivers/block/ps3disk.o\n\nIts output contains\n\n      CC [M]  drivers/block/ps3disk.o\n\n\n### An Architecture-Specific Compilation Unit\n\n\n## Advanced Usage\n\nBy default, `klocalizer` checks each architecture's Kconfig\nconstraints against the Kbuild constraints for the given compilation\nunit.  The following are examples of how to customize this process.\n\n- Controlling the search of architectures\n\n    Use `-a` to only search a specific architecture.\n\n        klocalizer -a x86_64 drivers/usb/storage/alauda.o\n\n    Specify multiple `-a` arguments to search the given architectures in given order.\n\n        klocalizer -a x86_64 -a sparc drivers/watchdog/cpwd.o\n\n    Specify `-a` and `-all` to search all architectures, trying the ones given in `-a` first.\n\n        klocalizer -a x86_64 -a arm --all drivers/watchdog/cpwd.o\n\n- Generating an arbitrary configuration for an architecture\n\n    Pass a single architecture name without the compilation unit to\n    generate an arbitrary configuration for that architecture.  Passing\n    multiple architectures is not supported.\n\n        klocalizer -a x86_64 drivers/watchdog/cpwd.o\n\n- Finding all architectures in which the compilation can be configured\n\n    klocalizer --report-all \n\n- Setting additional configuration options\n\n    Multiple `--define` and `--undefine` arguments can be used to force\n    configurations on or off when searching for constraints.\n\n        klocalizer --define CONFIG_USB --define CONFIG_FS --undefine CONFIG_SOUND drivers/usb/storage/alauda.o\n\n    Note that this can prevent finding a valid configuration.\n\n        klocalizer -a x86_64 --undefine CONFIG_USB drivers/usb/storage/alauda.o  # no configuration possible because alauda depends on USB\n\n- Investigating unsatisfied constraints\n\n    Use `--show-unsat-core` to see what constraints are causing the issue:\n\n        klocalizer --show-unsat-core -a x86_64 --undefine CONFIG_USB drivers/usb/storage/alauda.o  # no configuration possible because alauda depends on USB\n\n- Closely match a given configuration\n\nKlocalizer will attempt to match a given configuration, while still\nmaintaing the configuration options necessary to build the given\ncompilation unit.  This works by passing it an existing configuration,\ne.g., `allnoconfig`, with the `--approximate` flag.\n\n    make allnoconfig\n    mv .config allnoconfig\n    klocalizer --approximate allnoconfig drivers/usb/storage/alauda.o\n\n  klocalizer with specific file\n\n- Viewing the Kbuild constraints\n\n    View the Kbuild constraints for a compilation unit and each of\n    its subdirectories with\n\n        klocalizer --view-kbuild drivers/usb/storage/alauda.o\n\n- Building as modules instead of built-in\n\n    Use the `--modules` flag to set any tristate options to `m` instead of\n    `y`.  Be sure to enable the `CONFIG_MODULES` option as well.\n\n        klocalizer --modules --define CONFIG_MODULES drivers/usb/storage/alauda.o\n        make olddefconfig\n        make drivers/block/ps3disk.o\n\n- Using new formulas\n\n    Override the default formulas with the following:\n\n        klocalizer --kmax-formula kmax --kclause-formulas kclause drivers/watchdog/cpwd.o\n\n- Generating multiple configurations\n\n        klocalizer -a x86_64 --random-seed 7849 --sample 8 --sample-prefix config\n\n## Troubleshooting\n\n- `klocalizer` requires the formulas from `kmax` and\n  `kclause`. [Download](https://kmaxtools.opentheblackbox.net/formulas) these\n  first or generate them (see below).\n\n- Use the `CONFIG_` prefix on variables when referring to them in user constraints.\n\n- Use the `.o` ending for compilation units (though `klocalizer` will change it automatically.)\n\n- The extracted formulas may not be exact.  No resulting configuration is a sign that the formulas are overconstrained.  A resulting configuration that does not include the desired compilation unit mean the formulas may be underconstrained.\n\n- Compilation unit not buildable.  There are several possible reasons:\n\n    1. The compilation unit has already been compiled.  First clean with\n       \n            make clean\n\n    2. While most compilation units can be built individually with make, some cannot.  In these cases, build the parent directory instead, e.g.,\n    \n            klocalizer drivers/char/ipmi/ipmi_devintf.o  # finds it buildable in x86_64\n            make.cross ARCH=x86_64 olddefconfig\n            make.cross ARCH=x86_64 drivers/char/ipmi/\n            \n    3. Composites do not correspond to source files and are not built directly via `make`.  Instead they are composed of other compilation units.  For instance, `drivers/block/zram/zram.o` is comprised of `zcomp.o` and `zram_drv.o`.  After finding a satisfying configuration, build the parent directory to see the source files that comprise it built.\n    \n            klocalizer --approximate .config drivers/block/zram/zram.o\n            make olddefconfig\n            make drivers/block/zram/\n        \n    4. The configuration causes the unit to be built, but it has a compile-time error.\n    \n            klocalizer drivers/block/amiflop.o  # finds it buildable in \n            make.cross ARCH=m68k olddefconfig\n            make.cross ARCH=m68k drivers/block/amiflop.o  # Makefile sees it, but causes compiler error.\n        \n    5. Klocalizer's formulas were wrong in some cases\n\n- If the unit's configuration constraints depend  on - `CONFIG_BROKEN`, then `klocalizer`, by default, which detect it and stop searching, because the compilation unit may not be (easily) compilable.\n    \n        klocalizer drivers/watchdog/pnx833x_wdt.o  # stops after finding a dependency on `CONFIG_BROKEN`\n\n    To get a configuration anyway, use `--allow-config-broken`\n\n        klocalizer --allow-config-broken drivers/watchdog/pnx833x_wdt.o  # finds dependency on mips\n        make.cross ARCH=mips olddefconfig\n        make.cross ARCH=mips drivers/watchdog/pnx833x_wdt.o  # won't be included in the build, due to CONFIG_BROKEN\n\n## Generating Formulas for Linux\n\nThis requires cloning the kmax repository, since there are helper\nscripts to generate the formulas for Linux.  These commands and\nscripts are intended to be run from the root of your Linux source\ntree.\n\nTo get the formulas for compilation units defined in the Kbuild files,\nwe first need a list of all the top-level source directories for each\narchitecture.  The script uses a hacky Makefile to do this.  Then\ncalls kmaxall with all of the top-level directories.  This is a memory\nintensive operation.  The next script calls kclause on each of the\narchitectures, as named in the arch/ directory.\n\n    cd /path/to/linux\n    mkdir -p .kmax/\n    /usr/bin/time bash /path/to/kmax/scripts/kmaxlinux.sh\n    /usr/bin/time bash /path/to/kmax/scripts/kclauselinux.sh\n    bash /path/to/kmax/scripts/packageformulaslinux.sh\n    \n## Kmax\n\n### Simple example\n\nThis will run Kmax on the example from the\n[paper](https://paulgazzillo.com/papers/esecfse17.pdf) on Kmax.\n\n    kmax tests/paper_example\n\nThis will output the list of configuration conditions for each compilation unit file in the example Kbuild file.  By default, Kmax to treat configuration options as Boolean options (as opposed to Kconfig tristate options).  Pass `-T` for experimental support for tristate.\n\n    unit_pc tests/kbuild/fork.o 1\n    unit_pc tests/kbuild/probe_32.o (CONFIG_A && CONFIG_B)\n    unit_pc tests/kbuild/probe_64.o ((! CONFIG_A) && CONFIG_B)\n\nThe `unit_pc` lines have the [format](docs/unit_pc.md) of compilation unit name followed by the Boolean expression, in C-style syntax.  The Boolean expression describes the constraints that must be satisfied for the compilation unit to be included.  Use `-z` to emit the z3 formulas in smtlib2 format.\n\n### Example on Linux\n\nThere is a script that will run Kmax on all Kbuild Makefiles from a project, e.g., the Linux kernel source code.\n\nFirst get the Linux source and prepare its build system.\n\n    wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.3.11.tar.xz\n    tar -xvf linux-5.3.11.tar.xz\n    cd linux-5.3.11\n    make defconfig # any config will work here.  it's just to setup the build system.\n\nTo try Kmax on a particular Kbuild Makefile, use the `kbuildplus.py` tool:\n\n    kmax ipc/\n    \nThis will run Kmax on a single Kbuild Makefile, and show the symbolic configurations for each compilation unit and subdirectory.  Kmax can also recursively analyze Kbuild Makefiles by following subdirectories, use the `kmaxdriver.py` which uses `kbuildplus.py` to process each Kbuild Makefile and recursively process those in subdirectories.  `-g` means collect the symbolic constraints.\n\n    kmaxall -g net/\n    \nKmax includes a Makefile hack to get all the top-level Linux directories.  Combined with `kmaxall` this command will collect the symbolic constraints for the whole (x86) source, saving them into `unit_pc`.  Be sure to change `/path/to/kmax` to your kmax installation to get the Makefile shunt.\n\n    kmaxall -g $(make CC=cc ARCH=x86 -f /path/to/kmax/scripts/makefile_override alldirs) | tee kmax\n\n## Kclause\n\n### Example\n\nKclause extracts a logical model from Kconfig.  It works in two stages:\n\n1. The `kconfig_extractor` tool uses the Kconfig parser shipped with Linux to extract configuration variables dependencies to an intermediate language.\n\n2. The `kclause` tool takes this intermediate language and generates a z3 formula.\n\n\nFirst compile `kconfig_extractor`\n\n    make -C kconfig_extractor\n\nThen, from the root of a Linux source tree, run the following:\n\n    /path/to/kmax/kconfig_extractor/kconfig_extractor --extract -e ARCH=x86_64 -e SRCARCH=x86 -e KERNELVERSION=kcu -e srctree=./ -e CC=cc Kconfig > kconfig_extract\n    kclause --remove-orphaned-nonvisible < kconfig_extract > kclause\n\n### Building kconfig_extract\n\n    make -C /path/to/kmax/kconfig_extractor/\n\n### Other uses\n\n#### Get a list of all visible configs\n\n    # all the configs that have a prompt condition\n    grep \"^prompt \" kconfig.kclause | cut -f2 -d\\  | sort | uniq | tee visible.txt\n\n    # all the configs\n    grep \"^config \" kconfig.kclause | cut -f2 -d\\  | sort | uniq | tee configs.txt\n    \n    # the visibles should be a subset of the configs\n    diff configs.txt visible.txt  | grep \">\"", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paulgazz/kmax", "keywords": "makefile kconfig kbuild configurations kmax kclause klocalizer", "license": "GPLv2+", "maintainer": "", "maintainer_email": "", "name": "kmaxtools", "package_url": "https://pypi.org/project/kmaxtools/", "platform": "", "project_url": "https://pypi.org/project/kmaxtools/", "project_urls": {"Homepage": "https://github.com/paulgazz/kmax"}, "release_url": "https://pypi.org/project/kmaxtools/2.0rc32/", "requires_dist": null, "requires_python": "", "summary": "Tools for working with symbolic  constraints from Kbuild Makefile.", "version": "2.0rc32", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li><a href=\"#the-kmax-tool-suite\" rel=\"nofollow\">The Kmax Tool Suite</a>\n<ul>\n<li><a href=\"#tools\" rel=\"nofollow\">Tools</a></li>\n<li><a href=\"#contributors\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#setup\" rel=\"nofollow\">Setup</a></li>\n<li><a href=\"#quick-start\" rel=\"nofollow\">Quick Start</a></li>\n<li><a href=\"#use-cases\" rel=\"nofollow\">Use Cases</a>\n<ul>\n<li><a href=\"#a-compilation-unit-not-built-by-allyesconfig\" rel=\"nofollow\">A Compilation Unit not Built by <code>allyesconfig</code></a></li>\n<li><a href=\"#a-compilation-unit-not-built-by-defconfig-or-allnoconfig\" rel=\"nofollow\">A Compilation Unit not Built by <code>defconfig</code> or <code>allnoconfig</code></a></li>\n<li><a href=\"#an-architecture-specific-compilation-unit\" rel=\"nofollow\">An Architecture-Specific Compilation Unit</a></li>\n</ul>\n</li>\n<li><a href=\"#advanced-usage\" rel=\"nofollow\">Advanced Usage</a></li>\n<li><a href=\"#troubleshooting\" rel=\"nofollow\">Troubleshooting</a></li>\n<li><a href=\"#generating-formulas-for-linux\" rel=\"nofollow\">Generating Formulas for Linux</a></li>\n<li><a href=\"#kmax\" rel=\"nofollow\">Kmax</a>\n<ul>\n<li><a href=\"#simple-example\" rel=\"nofollow\">Simple example</a></li>\n<li><a href=\"#example-on-linux\" rel=\"nofollow\">Example on Linux</a></li>\n</ul>\n</li>\n<li><a href=\"#kclause\" rel=\"nofollow\">Kclause</a>\n<ul>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"#building-kconfig_extract\" rel=\"nofollow\">Building kconfig_extract</a></li>\n<li><a href=\"#other-uses\" rel=\"nofollow\">Other uses</a>\n<ul>\n<li><a href=\"#get-a-list-of-all-visible-configs\" rel=\"nofollow\">Get a list of all visible configs</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h1>The Kmax Tool Suite</h1>\n<h2>Tools</h2>\n<p>The Kmax Tool Suite (kmaxtools) contains a set of tools for performing\nautomated reasoning on Kconfig and Kbuild constraints.  It consists of\nthe following tools:</p>\n<ul>\n<li><code>klocalizer</code> takes the name of a compilation unit and automatically\ngenerates a <code>.config</code> file that, when compiled, will include the\ngiven compilation unit.  It uses the logical models from <code>kclause</code> and <code>kmax</code></li>\n<li><code>kclause</code> \"compiles\"\n<a href=\"https://www.kernel.org/doc/html/latest/kbuild/kconfig-language.html\" rel=\"nofollow\">Kconfig</a>\nconstraints into logical formulas.  <code>kconfig_extractor</code> uses Linux's\nown Kconfig parser to perform an extraction of the syntax of\nconfiguration option names, types, dependencies, etc.</li>\n<li><code>kmax</code> collects configuration information from <a href=\"https://www.kernel.org/doc/html/latest/kbuild/makefiles.html\" rel=\"nofollow\">Kbuild\nMakefiles</a>.\nIt determines, for each compilation unit, a symbolic Boolean\nexpression that represents the conditions under which the file gets\ncompiled and linked into the final program.  Its algorithm is\ndescribed <a href=\"https://paulgazzillo.com/papers/esecfse17.pdf\" rel=\"nofollow\">here</a> and\nthe original implementation can be found\n<a href=\"https://github.com/paulgazz/kmax/releases/tag/v1.0\" rel=\"nofollow\">here</a>.</li>\n</ul>\n<h2>Contributors</h2>\n<ul>\n<li><a href=\"https://paulgazzillo.com\" rel=\"nofollow\">Paul Gazzillo</a> -- creator and developer</li>\n<li><a href=\"https://cse.unl.edu/%7Etnguyen/\" rel=\"nofollow\">ThanhVu Nguyen</a> -- developer and z3 integration into <code>kmax</code></li>\n<li>Jeho Oh -- developer and kclause's Kconfig logical formulas</li>\n<li><a href=\"https://pages.lip6.fr/Julia.Lawall/\" rel=\"nofollow\">Julia Lawall</a> -- ideation, evaluation</li>\n</ul>\n<h2>Setup</h2>\n<p><code>kmaxtools</code> is currently written for python 2.</p>\n<p>There are two ways to install kmaxtools.</p>\n<ol>\n<li>\n<p>The latest release can be installed via <code>pip</code></p>\n<pre><code>pip install kmaxtools\n</code></pre>\n<p>Upgrade with</p>\n<pre><code>pip install -U kmaxtools\n</code></pre>\n</li>\n<li>\n<p>Install from the source repository:</p>\n<pre><code>git clone https://github.com/paulgazz/kmax.git\ncd kmax\nsudo python setup.py install\n</code></pre>\n<p>Or use the <code>--prefix</code> argument for different installation directory without <code>sudo</code>.</p>\n<p>Please see [setup.py] for any dependencies if <code>setup.py</code> script does\nnot work.  It may be necessary to install these manually via <code>pip</code>, e.g.,</p>\n<pre><code>pip install enum34\npip install regex\npip install z3-solver\npip install dd\npip install networkx==2.2\n</code></pre>\n</li>\n</ol>\n<h2>Quick Start</h2>\n<p>The fastest way to get started is to use formulas already extracted for your version of Linux, which you can download here: <a href=\"https://kmaxtools.opentheblackbox.net/formulas\" rel=\"nofollow\">https://kmaxtools.opentheblackbox.net/formulas</a></p>\n<pre><code>cd /path/to/linux/\nwget https://kmaxtools.opentheblackbox.net/formulas/kmax-formulas_linux-v5.4.tar.bz2\ntar -xvf kmax-formulas_linux-v5.4.tar.bz2\n</code></pre>\n<p>This contains a <code>.kmax</code> directory containing the Kconfig and Kbuild\nformulas for each architecture.  If a version is not available\n<a href=\"https://kmaxtools.opentheblackbox.net/formulas\" rel=\"nofollow\">here</a> submit an issue to request\nthe formulas be generated and uplodated or see below for directions on\ngenerating these formulas.</p>\n<p>Run klocalizer for a given compilation unit, e.g.,</p>\n<pre><code>klocalizer drivers/usb/storage/alauda.o\n</code></pre>\n<p>This will search each architecture for constraint satisfiability,\nstopping once one is found (or no architecture's constraints are\nsatisfiable).  <code>klocalizer</code> writes this configuration to <code>.config</code> and\nprints the architectures, e.g., <code>x86_64</code>, to standard out.</p>\n<p>To build the compilation unit using the generated <code>.config</code>, use\n<a href=\"https://github.com/fengguang/lkp-tests/blob/master/sbin/make.cross\" rel=\"nofollow\">make.cross</a>.\nFirst set any defaults for the <code>.config</code> file:</p>\n<pre><code>make.cross ARCH=x86_64 olddefconfig\n</code></pre>\n<p>Then build the compilation unit:</p>\n<pre><code>make.cross ARCH=x86_64 drivers/usb/storage/alauda.o\n</code></pre>\n<p>If you cannot get a configuration or it is still not buildable, see the <a href=\"#troubleshooting\" rel=\"nofollow\">Troubleshooting</a> section.</p>\n<h2>Use Cases</h2>\n<h3>A compilation unit not built by allyesconfig</h3>\n<p>While <code>allyesconfig</code> strives to enable all options, some have conflicting dependencies or are mutually exclusive choices.  For instance, <code>fs/squashfs/decompressor_multi.o</code> is not compiled when using <code>allyesconfig</code>:</p>\n<pre><code>make allyesconfig\nmake fs/squashfs/decompressor_multi.o\n</code></pre>\n<p><code>make</code> fails:</p>\n<pre><code>make[3]: *** No rule to make target 'fs/squashfs/decompressor_multi.o'.  Stop.\n</code></pre>\n<p>Let us take a look at the unit's Kbuild dependencies:</p>\n<pre><code>klocalizer --view fs/squashfs/decompressor_multi.o\n</code></pre>\n<p>The output in part is</p>\n<pre><code>fs/squashfs/decompressor_multi.o\n[And(CONFIG_SQUASHFS, CONFIG_SQUASHFS_DECOMP_MULTI)]\n</code></pre>\n<p>The unit is not included in <code>allyesconfig</code> because it on both <code>CONFIG_SQUASHFS</code> and <code>CONFIG_SQUASHFS_DECOMP_MULTI</code>.  The latter is disabled by default, being mutually exclusive with <code>SQUASHFS_DECOMP_SINGLE</code> which is selected by allyesconfig:</p>\n<pre><code>make allyesconfig\negrep \"(CONFIG_SQUASHFS|CONFIG_SQUASHFS_DECOMP_SINGLE|CONFIG_SQUASHFS_DECOMP_MULTI)( |=)\" .config\n</code></pre>\n<p><code>grep</code> shows us the relevant settings:</p>\n<pre><code>CONFIG_SQUASHFS=y\nCONFIG_SQUASHFS_DECOMP_SINGLE=y\n# CONFIG_SQUASHFS_DECOMP_MULTI is not set\n</code></pre>\n<p><code>klocalizer</code> can find a configuration that includes the unit:</p>\n<pre><code>klocalizer fs/squashfs/decompressor_multi.o\negrep \"(CONFIG_SQUASHFS|CONFIG_SQUASHFS_DECOMP_SINGLE|CONFIG_SQUASHFS_DECOMP_MULTI)( |=)\" .config\n</code></pre>\n<p><code>grep</code> shows us what <code>klocalizer</code> set:</p>\n<pre><code>CONFIG_SQUASHFS=y\nCONFIG_SQUASHFS_DECOMP_MULTI=y\n# CONFIG_SQUASHFS_DECOMP_SINGLE is not set\n</code></pre>\n<p>Finally, building the configuration</p>\n<pre><code>make olddefconfig\nmake fs/squashfs/decompressor_multi.o\n</code></pre>\n<p>gives us</p>\n<pre><code>  CC      fs/squashfs/decompressor_multi.o\n</code></pre>\n<h3>A compilation unit not built by defconfig or allnoconfig</h3>\n<p>A kernel user or developer may want a smaller kernel that includes a specific compilation unit, rather than having to build <code>allyesconfig</code>.  For instance, <code>drivers/infiniband/core/cgroup.o</code> is not built by default:</p>\n<pre><code>make defconfig\nmake drivers/infiniband/core/cgroup.o\n</code></pre>\n<p>The output contains</p>\n<pre><code>make[2]: *** No rule to make target 'drivers/infiniband/core/cgroup.o'.  Stop.\n</code></pre>\n<p><code>klocalizer</code> can look for a configuration containing the compilation unit that closely matches a given configuration without it by successively removing conflicting constraints until the configuration is valid:</p>\n<pre><code>make defconfig\nklocalizer --approximate .config drivers/infiniband/core/cgroup.o\n</code></pre>\n<p>Now when building the configuration, the compilation unit is included:</p>\n<pre><code>make olddefconfig\nmake drivers/infiniband/core/cgroup.o\n</code></pre>\n<p>The output contains:</p>\n<pre><code>  CC      drivers/infiniband/core/cgroup.o\n</code></pre>\n<h3>An architecture-specific compilation unit not built by allyesconfig</h3>\n<p>Sometimes a compilation unit is only available for certain architectures.   Compiling <code>drivers/block/ps3disk.o</code> won't compile on an <code>x86</code> machine.</p>\n<pre><code>make allyesconfig\nklocalizer drivers/block/ps3disk.o\n</code></pre>\n<p>Its output contains</p>\n<pre><code>make[3]: *** No rule to make target 'drivers/block/ps3disk.o'.  Stop.\n</code></pre>\n<p><code>klocalizer --view drivers/block/ps3disk.o</code> shows us that it depends on <code>CONFIG_PS3_DISK</code>.  It turns out that this configuration option in turn depends on, among others options, the powerpc architecture.</p>\n<p><code>klocalizer</code> can try the constraints from each architecture:</p>\n<pre><code>klocalizer drivers/block/ps3disk.o\n</code></pre>\n<p>It tells us that <code>powerpc</code> is a satisfying architecture.  We can use <code>make.cross</code> to cross-compile for <code>powerpc</code>.</p>\n<pre><code>make.cross ARCH=powerpc olddefconfig\nmake.cross ARCH=powerpc drivers/block/ps3disk.o\n</code></pre>\n<p>Its output contains</p>\n<pre><code>  CC      drivers/block/ps3disk.o\n</code></pre>\n<p>We can combine several <code>klocalizer</code> features to build an <code>allnoconfig</code> kernel that adds in the <code>ps3disk.o</code> compilation unit and sets all <code>tristate</code> options to modules.</p>\n<pre><code>make.cross ARCH=powerpc allnoconfig\nklocalizer -a powerpc --match .config --modules --define CONFIG_MODULES drivers/block/ps3disk.o\nmake.cross ARCH=powerpc olddefconfig\nmake.cross ARCH=powerpc drivers/block/ps3disk.o\n</code></pre>\n<p>Its output contains</p>\n<pre><code>  CC [M]  drivers/block/ps3disk.o\n</code></pre>\n<h3>An Architecture-Specific Compilation Unit</h3>\n<h2>Advanced Usage</h2>\n<p>By default, <code>klocalizer</code> checks each architecture's Kconfig\nconstraints against the Kbuild constraints for the given compilation\nunit.  The following are examples of how to customize this process.</p>\n<ul>\n<li>\n<p>Controlling the search of architectures</p>\n<p>Use <code>-a</code> to only search a specific architecture.</p>\n<pre><code>  klocalizer -a x86_64 drivers/usb/storage/alauda.o\n</code></pre>\n<p>Specify multiple <code>-a</code> arguments to search the given architectures in given order.</p>\n<pre><code>  klocalizer -a x86_64 -a sparc drivers/watchdog/cpwd.o\n</code></pre>\n<p>Specify <code>-a</code> and <code>-all</code> to search all architectures, trying the ones given in <code>-a</code> first.</p>\n<pre><code>  klocalizer -a x86_64 -a arm --all drivers/watchdog/cpwd.o\n</code></pre>\n</li>\n<li>\n<p>Generating an arbitrary configuration for an architecture</p>\n<p>Pass a single architecture name without the compilation unit to\ngenerate an arbitrary configuration for that architecture.  Passing\nmultiple architectures is not supported.</p>\n<pre><code>  klocalizer -a x86_64 drivers/watchdog/cpwd.o\n</code></pre>\n</li>\n<li>\n<p>Finding all architectures in which the compilation can be configured</p>\n<p>klocalizer --report-all</p>\n</li>\n<li>\n<p>Setting additional configuration options</p>\n<p>Multiple <code>--define</code> and <code>--undefine</code> arguments can be used to force\nconfigurations on or off when searching for constraints.</p>\n<pre><code>  klocalizer --define CONFIG_USB --define CONFIG_FS --undefine CONFIG_SOUND drivers/usb/storage/alauda.o\n</code></pre>\n<p>Note that this can prevent finding a valid configuration.</p>\n<pre><code>  klocalizer -a x86_64 --undefine CONFIG_USB drivers/usb/storage/alauda.o  # no configuration possible because alauda depends on USB\n</code></pre>\n</li>\n<li>\n<p>Investigating unsatisfied constraints</p>\n<p>Use <code>--show-unsat-core</code> to see what constraints are causing the issue:</p>\n<pre><code>  klocalizer --show-unsat-core -a x86_64 --undefine CONFIG_USB drivers/usb/storage/alauda.o  # no configuration possible because alauda depends on USB\n</code></pre>\n</li>\n<li>\n<p>Closely match a given configuration</p>\n</li>\n</ul>\n<p>Klocalizer will attempt to match a given configuration, while still\nmaintaing the configuration options necessary to build the given\ncompilation unit.  This works by passing it an existing configuration,\ne.g., <code>allnoconfig</code>, with the <code>--approximate</code> flag.</p>\n<pre><code>make allnoconfig\nmv .config allnoconfig\nklocalizer --approximate allnoconfig drivers/usb/storage/alauda.o\n</code></pre>\n<p>klocalizer with specific file</p>\n<ul>\n<li>\n<p>Viewing the Kbuild constraints</p>\n<p>View the Kbuild constraints for a compilation unit and each of\nits subdirectories with</p>\n<pre><code>  klocalizer --view-kbuild drivers/usb/storage/alauda.o\n</code></pre>\n</li>\n<li>\n<p>Building as modules instead of built-in</p>\n<p>Use the <code>--modules</code> flag to set any tristate options to <code>m</code> instead of\n<code>y</code>.  Be sure to enable the <code>CONFIG_MODULES</code> option as well.</p>\n<pre><code>  klocalizer --modules --define CONFIG_MODULES drivers/usb/storage/alauda.o\n  make olddefconfig\n  make drivers/block/ps3disk.o\n</code></pre>\n</li>\n<li>\n<p>Using new formulas</p>\n<p>Override the default formulas with the following:</p>\n<pre><code>  klocalizer --kmax-formula kmax --kclause-formulas kclause drivers/watchdog/cpwd.o\n</code></pre>\n</li>\n<li>\n<p>Generating multiple configurations</p>\n<pre><code>  klocalizer -a x86_64 --random-seed 7849 --sample 8 --sample-prefix config\n</code></pre>\n</li>\n</ul>\n<h2>Troubleshooting</h2>\n<ul>\n<li>\n<p><code>klocalizer</code> requires the formulas from <code>kmax</code> and\n<code>kclause</code>. <a href=\"https://kmaxtools.opentheblackbox.net/formulas\" rel=\"nofollow\">Download</a> these\nfirst or generate them (see below).</p>\n</li>\n<li>\n<p>Use the <code>CONFIG_</code> prefix on variables when referring to them in user constraints.</p>\n</li>\n<li>\n<p>Use the <code>.o</code> ending for compilation units (though <code>klocalizer</code> will change it automatically.)</p>\n</li>\n<li>\n<p>The extracted formulas may not be exact.  No resulting configuration is a sign that the formulas are overconstrained.  A resulting configuration that does not include the desired compilation unit mean the formulas may be underconstrained.</p>\n</li>\n<li>\n<p>Compilation unit not buildable.  There are several possible reasons:</p>\n<ol>\n<li>\n<p>The compilation unit has already been compiled.  First clean with</p>\n<pre><code> make clean\n</code></pre>\n</li>\n<li>\n<p>While most compilation units can be built individually with make, some cannot.  In these cases, build the parent directory instead, e.g.,</p>\n<pre><code> klocalizer drivers/char/ipmi/ipmi_devintf.o  # finds it buildable in x86_64\n make.cross ARCH=x86_64 olddefconfig\n make.cross ARCH=x86_64 drivers/char/ipmi/\n</code></pre>\n</li>\n<li>\n<p>Composites do not correspond to source files and are not built directly via <code>make</code>.  Instead they are composed of other compilation units.  For instance, <code>drivers/block/zram/zram.o</code> is comprised of <code>zcomp.o</code> and <code>zram_drv.o</code>.  After finding a satisfying configuration, build the parent directory to see the source files that comprise it built.</p>\n<pre><code> klocalizer --approximate .config drivers/block/zram/zram.o\n make olddefconfig\n make drivers/block/zram/\n</code></pre>\n</li>\n<li>\n<p>The configuration causes the unit to be built, but it has a compile-time error.</p>\n<pre><code> klocalizer drivers/block/amiflop.o  # finds it buildable in \n make.cross ARCH=m68k olddefconfig\n make.cross ARCH=m68k drivers/block/amiflop.o  # Makefile sees it, but causes compiler error.\n</code></pre>\n</li>\n<li>\n<p>Klocalizer's formulas were wrong in some cases</p>\n</li>\n</ol>\n</li>\n<li>\n<p>If the unit's configuration constraints depend  on - <code>CONFIG_BROKEN</code>, then <code>klocalizer</code>, by default, which detect it and stop searching, because the compilation unit may not be (easily) compilable.</p>\n<pre><code>  klocalizer drivers/watchdog/pnx833x_wdt.o  # stops after finding a dependency on `CONFIG_BROKEN`\n</code></pre>\n<p>To get a configuration anyway, use <code>--allow-config-broken</code></p>\n<pre><code>  klocalizer --allow-config-broken drivers/watchdog/pnx833x_wdt.o  # finds dependency on mips\n  make.cross ARCH=mips olddefconfig\n  make.cross ARCH=mips drivers/watchdog/pnx833x_wdt.o  # won't be included in the build, due to CONFIG_BROKEN\n</code></pre>\n</li>\n</ul>\n<h2>Generating Formulas for Linux</h2>\n<p>This requires cloning the kmax repository, since there are helper\nscripts to generate the formulas for Linux.  These commands and\nscripts are intended to be run from the root of your Linux source\ntree.</p>\n<p>To get the formulas for compilation units defined in the Kbuild files,\nwe first need a list of all the top-level source directories for each\narchitecture.  The script uses a hacky Makefile to do this.  Then\ncalls kmaxall with all of the top-level directories.  This is a memory\nintensive operation.  The next script calls kclause on each of the\narchitectures, as named in the arch/ directory.</p>\n<pre><code>cd /path/to/linux\nmkdir -p .kmax/\n/usr/bin/time bash /path/to/kmax/scripts/kmaxlinux.sh\n/usr/bin/time bash /path/to/kmax/scripts/kclauselinux.sh\nbash /path/to/kmax/scripts/packageformulaslinux.sh\n</code></pre>\n<h2>Kmax</h2>\n<h3>Simple example</h3>\n<p>This will run Kmax on the example from the\n<a href=\"https://paulgazzillo.com/papers/esecfse17.pdf\" rel=\"nofollow\">paper</a> on Kmax.</p>\n<pre><code>kmax tests/paper_example\n</code></pre>\n<p>This will output the list of configuration conditions for each compilation unit file in the example Kbuild file.  By default, Kmax to treat configuration options as Boolean options (as opposed to Kconfig tristate options).  Pass <code>-T</code> for experimental support for tristate.</p>\n<pre><code>unit_pc tests/kbuild/fork.o 1\nunit_pc tests/kbuild/probe_32.o (CONFIG_A &amp;&amp; CONFIG_B)\nunit_pc tests/kbuild/probe_64.o ((! CONFIG_A) &amp;&amp; CONFIG_B)\n</code></pre>\n<p>The <code>unit_pc</code> lines have the <a href=\"docs/unit_pc.md\" rel=\"nofollow\">format</a> of compilation unit name followed by the Boolean expression, in C-style syntax.  The Boolean expression describes the constraints that must be satisfied for the compilation unit to be included.  Use <code>-z</code> to emit the z3 formulas in smtlib2 format.</p>\n<h3>Example on Linux</h3>\n<p>There is a script that will run Kmax on all Kbuild Makefiles from a project, e.g., the Linux kernel source code.</p>\n<p>First get the Linux source and prepare its build system.</p>\n<pre><code>wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.3.11.tar.xz\ntar -xvf linux-5.3.11.tar.xz\ncd linux-5.3.11\nmake defconfig # any config will work here.  it's just to setup the build system.\n</code></pre>\n<p>To try Kmax on a particular Kbuild Makefile, use the <code>kbuildplus.py</code> tool:</p>\n<pre><code>kmax ipc/\n</code></pre>\n<p>This will run Kmax on a single Kbuild Makefile, and show the symbolic configurations for each compilation unit and subdirectory.  Kmax can also recursively analyze Kbuild Makefiles by following subdirectories, use the <code>kmaxdriver.py</code> which uses <code>kbuildplus.py</code> to process each Kbuild Makefile and recursively process those in subdirectories.  <code>-g</code> means collect the symbolic constraints.</p>\n<pre><code>kmaxall -g net/\n</code></pre>\n<p>Kmax includes a Makefile hack to get all the top-level Linux directories.  Combined with <code>kmaxall</code> this command will collect the symbolic constraints for the whole (x86) source, saving them into <code>unit_pc</code>.  Be sure to change <code>/path/to/kmax</code> to your kmax installation to get the Makefile shunt.</p>\n<pre><code>kmaxall -g $(make CC=cc ARCH=x86 -f /path/to/kmax/scripts/makefile_override alldirs) | tee kmax\n</code></pre>\n<h2>Kclause</h2>\n<h3>Example</h3>\n<p>Kclause extracts a logical model from Kconfig.  It works in two stages:</p>\n<ol>\n<li>\n<p>The <code>kconfig_extractor</code> tool uses the Kconfig parser shipped with Linux to extract configuration variables dependencies to an intermediate language.</p>\n</li>\n<li>\n<p>The <code>kclause</code> tool takes this intermediate language and generates a z3 formula.</p>\n</li>\n</ol>\n<p>First compile <code>kconfig_extractor</code></p>\n<pre><code>make -C kconfig_extractor\n</code></pre>\n<p>Then, from the root of a Linux source tree, run the following:</p>\n<pre><code>/path/to/kmax/kconfig_extractor/kconfig_extractor --extract -e ARCH=x86_64 -e SRCARCH=x86 -e KERNELVERSION=kcu -e srctree=./ -e CC=cc Kconfig &gt; kconfig_extract\nkclause --remove-orphaned-nonvisible &lt; kconfig_extract &gt; kclause\n</code></pre>\n<h3>Building kconfig_extract</h3>\n<pre><code>make -C /path/to/kmax/kconfig_extractor/\n</code></pre>\n<h3>Other uses</h3>\n<h4>Get a list of all visible configs</h4>\n<pre><code># all the configs that have a prompt condition\ngrep \"^prompt \" kconfig.kclause | cut -f2 -d\\  | sort | uniq | tee visible.txt\n\n# all the configs\ngrep \"^config \" kconfig.kclause | cut -f2 -d\\  | sort | uniq | tee configs.txt\n\n# the visibles should be a subset of the configs\ndiff configs.txt visible.txt  | grep \"&gt;\"\n</code></pre>\n\n          </div>"}, "last_serial": 6447767, "releases": {"2.0rc13": [{"comment_text": "", "digests": {"md5": "862017807d8db16ec4a2470f81ff3d67", "sha256": "5156b5620d9c4d0aa711a1d6159ab17d8a66bc55806e3a6deac61c94d4f62a1c"}, "downloads": -1, "filename": "kmaxtools-2.0rc13.tar.gz", "has_sig": false, "md5_digest": "862017807d8db16ec4a2470f81ff3d67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101843, "upload_time": "2019-12-03T07:44:35", "upload_time_iso_8601": "2019-12-03T07:44:35.313284Z", "url": "https://files.pythonhosted.org/packages/3d/5d/1ebcc99401d381e64949ec3efc11ac5683c17eaf951d80f48f0381fbb849/kmaxtools-2.0rc13.tar.gz", "yanked": false}], "2.0rc14": [{"comment_text": "", "digests": {"md5": "92cb6f6b57ceee15cd2abff8b46d5036", "sha256": "683cfe8a6b7b163d4595ced8d5af8beef2dbdd49c1936d322113e33686a9bd33"}, "downloads": -1, "filename": "kmaxtools-2.0rc14.tar.gz", "has_sig": false, "md5_digest": "92cb6f6b57ceee15cd2abff8b46d5036", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102665, "upload_time": "2019-12-06T06:17:12", "upload_time_iso_8601": "2019-12-06T06:17:12.961187Z", "url": "https://files.pythonhosted.org/packages/0d/86/fe57b9ea0414be3e8b4067d2de7bc2431d70bdadbb6645316c9fafb3b02a/kmaxtools-2.0rc14.tar.gz", "yanked": false}], "2.0rc15": [{"comment_text": "", "digests": {"md5": "38b9d1f125d5872d6cc2b1ad057de54d", "sha256": "ec1efa0353bb1ccb0038dc192c3fddab6fdb9520c3046158c107b2b5a98cf810"}, "downloads": -1, "filename": "kmaxtools-2.0rc15.tar.gz", "has_sig": false, "md5_digest": "38b9d1f125d5872d6cc2b1ad057de54d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104785, "upload_time": "2019-12-06T20:04:25", "upload_time_iso_8601": "2019-12-06T20:04:25.274918Z", "url": "https://files.pythonhosted.org/packages/d4/d8/88e488cfeef1b77d76c690025349a4b41fc38a34a836362f094020c0705d/kmaxtools-2.0rc15.tar.gz", "yanked": false}], "2.0rc16": [{"comment_text": "", "digests": {"md5": "0a121cabea8345d8103d03d49bc2da70", "sha256": "68de31921887f6fa03303c8acdab6be3cddfc4ab8b9dffb74e2f96fc884d572a"}, "downloads": -1, "filename": "kmaxtools-2.0rc16.tar.gz", "has_sig": false, "md5_digest": "0a121cabea8345d8103d03d49bc2da70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105033, "upload_time": "2019-12-06T23:54:22", "upload_time_iso_8601": "2019-12-06T23:54:22.015299Z", "url": "https://files.pythonhosted.org/packages/54/01/660575eb30ea55c6cabf626e3f88c08a1a97104baec6fd31f1d71b93a799/kmaxtools-2.0rc16.tar.gz", "yanked": false}], "2.0rc17": [{"comment_text": "", "digests": {"md5": "443939cad115775a6fd57c91d47dd299", "sha256": "54b67855c03ad4e82e9f9ce5a175eb3d2818aacbbf12686895dc17130dc9fa34"}, "downloads": -1, "filename": "kmaxtools-2.0rc17.tar.gz", "has_sig": false, "md5_digest": "443939cad115775a6fd57c91d47dd299", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106080, "upload_time": "2019-12-10T23:44:06", "upload_time_iso_8601": "2019-12-10T23:44:06.508277Z", "url": "https://files.pythonhosted.org/packages/16/a0/5ad582eb28f34b475ca21a95a266f08b19a7323179d8eb442a0168470752/kmaxtools-2.0rc17.tar.gz", "yanked": false}], "2.0rc18": [{"comment_text": "", "digests": {"md5": "0740e21594cad87c718be3d0cd9d76ed", "sha256": "3c336bd181f77f9282e25e3dc78e9b2265299a2d7853d0ae57d65dbdd32281ba"}, "downloads": -1, "filename": "kmaxtools-2.0rc18.tar.gz", "has_sig": false, "md5_digest": "0740e21594cad87c718be3d0cd9d76ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106543, "upload_time": "2019-12-11T01:52:56", "upload_time_iso_8601": "2019-12-11T01:52:56.632121Z", "url": "https://files.pythonhosted.org/packages/d3/cc/653625815e2ad3fd7d5784ffba0b42ba2d575261336db56040ad192678ec/kmaxtools-2.0rc18.tar.gz", "yanked": false}], "2.0rc19": [{"comment_text": "", "digests": {"md5": "9451055c96b240f7e2cfa98677a7f5f1", "sha256": "0c0b44599944a7f228c00b20f98533463012d272fed368ed02e1b50748de21a6"}, "downloads": -1, "filename": "kmaxtools-2.0rc19.tar.gz", "has_sig": false, "md5_digest": "9451055c96b240f7e2cfa98677a7f5f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106088, "upload_time": "2019-12-12T07:18:04", "upload_time_iso_8601": "2019-12-12T07:18:04.646070Z", "url": "https://files.pythonhosted.org/packages/65/fc/585a3862edcb8945ba84bdd636b535f93ba3bea6416fa2cf1540de921830/kmaxtools-2.0rc19.tar.gz", "yanked": false}], "2.0rc20": [{"comment_text": "", "digests": {"md5": "e7b3e9bd99a44597cfd733d9f70210da", "sha256": "264ea02711735446252d2748db41c0e88d242b57b10111064db1cb9f43b44d51"}, "downloads": -1, "filename": "kmaxtools-2.0rc20.tar.gz", "has_sig": false, "md5_digest": "e7b3e9bd99a44597cfd733d9f70210da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109943, "upload_time": "2019-12-17T21:27:06", "upload_time_iso_8601": "2019-12-17T21:27:06.293584Z", "url": "https://files.pythonhosted.org/packages/02/de/828616b8a5ac61410ce787b1d21ba3346d19fdaae9402a3ab4f2f059ee95/kmaxtools-2.0rc20.tar.gz", "yanked": false}], "2.0rc21": [{"comment_text": "", "digests": {"md5": "57a522a1aeeac714f3b762219350b4b7", "sha256": "733d775b734a2bca008e4ffd5855f7f6a75683f6cdd21191fa4d09ea06c86ab9"}, "downloads": -1, "filename": "kmaxtools-2.0rc21.tar.gz", "has_sig": false, "md5_digest": "57a522a1aeeac714f3b762219350b4b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109994, "upload_time": "2019-12-18T07:17:52", "upload_time_iso_8601": "2019-12-18T07:17:52.593783Z", "url": "https://files.pythonhosted.org/packages/07/c7/0c428f203467de9553ff39f0d31355ac516e6ab5dd844a6f763f66972716/kmaxtools-2.0rc21.tar.gz", "yanked": false}], "2.0rc22": [{"comment_text": "", "digests": {"md5": "dd14717cf3fd6ed9fe75908731d23cfc", "sha256": "6a96bcff791d66df9fc6a7dbcc1ed929da778b4eed63dcb0ec9300df51507ac4"}, "downloads": -1, "filename": "kmaxtools-2.0rc22.tar.gz", "has_sig": false, "md5_digest": "dd14717cf3fd6ed9fe75908731d23cfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110111, "upload_time": "2019-12-18T08:01:02", "upload_time_iso_8601": "2019-12-18T08:01:02.275412Z", "url": "https://files.pythonhosted.org/packages/6e/0e/026a422a14384370966bcd0b3d97a5c835a2f4c38ea51289a3e04355d91b/kmaxtools-2.0rc22.tar.gz", "yanked": false}], "2.0rc23": [{"comment_text": "", "digests": {"md5": "40fc37e358c473327624cf81a6909aad", "sha256": "b5faaed7114391a7dbf661cbe6fa9dc330de729d259624ebb3e9e3482975c89a"}, "downloads": -1, "filename": "kmaxtools-2.0rc23.tar.gz", "has_sig": false, "md5_digest": "40fc37e358c473327624cf81a6909aad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110148, "upload_time": "2019-12-18T08:51:04", "upload_time_iso_8601": "2019-12-18T08:51:04.485146Z", "url": "https://files.pythonhosted.org/packages/64/21/c6a2e67c78091dcd6c204d678c7ba1c09fcb1564334fa9f428293ce94a10/kmaxtools-2.0rc23.tar.gz", "yanked": false}], "2.0rc24": [{"comment_text": "", "digests": {"md5": "d5efc1f5978601b337e19c7ff00c9c6f", "sha256": "b1bac5a6b3cf6747ce0f2e963abe78451cdd367202a9ff36dc7181322994d256"}, "downloads": -1, "filename": "kmaxtools-2.0rc24.tar.gz", "has_sig": false, "md5_digest": "d5efc1f5978601b337e19c7ff00c9c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110260, "upload_time": "2019-12-21T18:47:00", "upload_time_iso_8601": "2019-12-21T18:47:00.260635Z", "url": "https://files.pythonhosted.org/packages/0a/68/48814176ccadef4170b0718c3044964205613326446c39f84e441e0a2cdd/kmaxtools-2.0rc24.tar.gz", "yanked": false}], "2.0rc25": [{"comment_text": "", "digests": {"md5": "5cc6f4648522b850c2ba55c1f6c05480", "sha256": "73bd228ba911865063aed4c6ff6abb7a110b19f3332fd4193dcf1e93ea1de387"}, "downloads": -1, "filename": "kmaxtools-2.0rc25.tar.gz", "has_sig": false, "md5_digest": "5cc6f4648522b850c2ba55c1f6c05480", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270200, "upload_time": "2019-12-23T07:56:29", "upload_time_iso_8601": "2019-12-23T07:56:29.247720Z", "url": "https://files.pythonhosted.org/packages/1b/2c/721fade4645cddc5c752556a20f113dc11a2c15e2f80c279e8a71a226a6b/kmaxtools-2.0rc25.tar.gz", "yanked": false}], "2.0rc26": [{"comment_text": "", "digests": {"md5": "328a55f060107fc960937bc14764a94a", "sha256": "604bdc876818b40061cae3c812ca241c2858dfcc34f708d00a1a8546e98a7f44"}, "downloads": -1, "filename": "kmaxtools-2.0rc26.tar.gz", "has_sig": false, "md5_digest": "328a55f060107fc960937bc14764a94a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270202, "upload_time": "2019-12-23T08:26:05", "upload_time_iso_8601": "2019-12-23T08:26:05.334319Z", "url": "https://files.pythonhosted.org/packages/4c/16/7e829f34c96d07251fb4081563d2224f6fd562096f75b99ffe54373a16ea/kmaxtools-2.0rc26.tar.gz", "yanked": false}], "2.0rc27": [{"comment_text": "", "digests": {"md5": "70c6073decde269f80dc07d361023d1e", "sha256": "d3151595876fcaf1a60b5e8a5398e8a92254400482c3dc0ffe821684bc4e047d"}, "downloads": -1, "filename": "kmaxtools-2.0rc27.tar.gz", "has_sig": false, "md5_digest": "70c6073decde269f80dc07d361023d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 184792, "upload_time": "2020-01-01T19:55:09", "upload_time_iso_8601": "2020-01-01T19:55:09.445798Z", "url": "https://files.pythonhosted.org/packages/bd/77/74c05be23ff1a96b9d03c02eaf045951a2be9a4280107d29d50275c71559/kmaxtools-2.0rc27.tar.gz", "yanked": false}], "2.0rc28": [{"comment_text": "", "digests": {"md5": "2a6dfed6f76fc1016746c34145a5475f", "sha256": "f6d27590dec04ad153551abb3e68bbdaea850a8e27629d30857296b9561e3d8a"}, "downloads": -1, "filename": "kmaxtools-2.0rc28.tar.gz", "has_sig": false, "md5_digest": "2a6dfed6f76fc1016746c34145a5475f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191819, "upload_time": "2020-01-01T20:25:28", "upload_time_iso_8601": "2020-01-01T20:25:28.294063Z", "url": "https://files.pythonhosted.org/packages/95/15/f75136df61b4b1efa22fd25063f8fcc631508fee2c0d1f489d7db33b20f8/kmaxtools-2.0rc28.tar.gz", "yanked": false}], "2.0rc29": [{"comment_text": "", "digests": {"md5": "32d8c88178ec2fce61420e29b74e27c1", "sha256": "5936089085cf1a229ebd69970ce89f9112cb04f95e92059189df0530a0f8c82a"}, "downloads": -1, "filename": "kmaxtools-2.0rc29.tar.gz", "has_sig": false, "md5_digest": "32d8c88178ec2fce61420e29b74e27c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 197231, "upload_time": "2020-01-01T20:28:25", "upload_time_iso_8601": "2020-01-01T20:28:25.816077Z", "url": "https://files.pythonhosted.org/packages/55/ab/698fd532e970608e968d376fd13723f42efcd3d8c206a52cc4923a9eaaa2/kmaxtools-2.0rc29.tar.gz", "yanked": false}], "2.0rc30": [{"comment_text": "", "digests": {"md5": "f0bf8318436ed4f8a69b4085f13bdc7a", "sha256": "8a6a76f6670653d40943e23f1cbb0a72336c89d5f8d43b366e586684d795553f"}, "downloads": -1, "filename": "kmaxtools-2.0rc30.tar.gz", "has_sig": false, "md5_digest": "f0bf8318436ed4f8a69b4085f13bdc7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203451, "upload_time": "2020-01-01T20:34:32", "upload_time_iso_8601": "2020-01-01T20:34:32.101399Z", "url": "https://files.pythonhosted.org/packages/27/4b/0dd0afbda85e30d2937e84ef9ebdf2fc4b27af4fe83fe124ce6dd21c0211/kmaxtools-2.0rc30.tar.gz", "yanked": false}], "2.0rc31": [{"comment_text": "", "digests": {"md5": "7f5ad9af2dab26a5437d7cb23fe01a16", "sha256": "f21fa0122eb23358ba8addd8728bdbe991110bf5218001fe722c8f832318acb4"}, "downloads": -1, "filename": "kmaxtools-2.0rc31.tar.gz", "has_sig": false, "md5_digest": "7f5ad9af2dab26a5437d7cb23fe01a16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203493, "upload_time": "2020-01-01T20:59:53", "upload_time_iso_8601": "2020-01-01T20:59:53.261140Z", "url": "https://files.pythonhosted.org/packages/1a/56/15be7f7da87230f4671b961c95f1b9f76090e30e99c99863127a3ac99e8c/kmaxtools-2.0rc31.tar.gz", "yanked": false}], "2.0rc32": [{"comment_text": "", "digests": {"md5": "e849247b7ee5559f835fe5c0cff9765d", "sha256": "0ae1be83658f58d98bb3f7bf2fef7ea0f376dbb6761f9b8dbaaabeec72adfb22"}, "downloads": -1, "filename": "kmaxtools-2.0rc32.tar.gz", "has_sig": false, "md5_digest": "e849247b7ee5559f835fe5c0cff9765d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203604, "upload_time": "2020-01-13T23:04:22", "upload_time_iso_8601": "2020-01-13T23:04:22.718017Z", "url": "https://files.pythonhosted.org/packages/f6/6d/22477e7bf0860eea5fcb3060634af5ba303afa82d907b6136a7b24b0c0ee/kmaxtools-2.0rc32.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e849247b7ee5559f835fe5c0cff9765d", "sha256": "0ae1be83658f58d98bb3f7bf2fef7ea0f376dbb6761f9b8dbaaabeec72adfb22"}, "downloads": -1, "filename": "kmaxtools-2.0rc32.tar.gz", "has_sig": false, "md5_digest": "e849247b7ee5559f835fe5c0cff9765d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203604, "upload_time": "2020-01-13T23:04:22", "upload_time_iso_8601": "2020-01-13T23:04:22.718017Z", "url": "https://files.pythonhosted.org/packages/f6/6d/22477e7bf0860eea5fcb3060634af5ba303afa82d907b6136a7b24b0c0ee/kmaxtools-2.0rc32.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:17 2020"}