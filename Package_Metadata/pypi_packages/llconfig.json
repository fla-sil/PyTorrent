{"info": {"author": "Heureka.cz", "author_email": "vyvoj@heureka.cz", "bugtrack_url": null, "classifiers": [], "description": "llconfig\n========\n\nLightweight layered configuration library.\n\nAll you need is Python >= 3.5 (and a keyboard).\n\n------\n\n## Basic concept\n\nThere is a `Config` object holding several layers of configuration keys and their values (= configuration directives).\nFrom top to bottom:\n\n1. Override layer = holds runtime directive overrides, if any.\n2. Env layer = directives loaded from environment variables are kept in this layer, if any.\n3. File layer = directives loaded from configuration file(s) are kept in this layer, if any.\n4. Default layer = holds a default value for **every** initialized directive.\n\n## Learn by example\n\nThe behavior is best shown on following example:\n\n```python\nfrom llconfig import Config\n\nc = Config('local/override.cnf.py', '/etc/my_app/conf.d', env_prefix='MY_', config_files_env_var='CONFIG')\nc.init('PORT', int, 80)\nc.load()  # recommended, but not required (see docstrings)\nc['PORT']\n```\n\nThe returned value is `80`, given that there is no `MY_PORT` env\nvariable, no `MY_CONFIG` env variable and no `PORT = 1234` line in any of `local/override.cnf.py` or\n`/etc/my_app/conf.d/*.cnf.py` configuration files.\n\n### Search process\n\nFirst, the override layer is searched, but there is no runtime override (no `c['PORT'] = 1234`) in this example.\n\nThe environment layer is searched next. If there is an env variable called `MY_PORT`, its value is taken\nand **converted** using `int` function (this is necessary otherwise it wouldn't be possible to load anything\nelse than `str` from env variables).\n\nThen, if the env variable is not present, the file layer is searched. There can be multiple files in this layer\n(forming sub-layers) and all of them must be Python-executable. File sub-layers are processed in following order:\n\n1. Files loaded from `MY_CONFIG` env variable. Its value is splitted using `:` (colon) as a delimiter and\n   each part is handled the same way as if it would be passed to constructor (see bellow). The handling\n   preserves order (so the leftmost part is always handled first).\n2. Files passed to constructor (`local/override.cnf.py` and `/etc/my_app/conf.d` in this example). If there\n   is a path pointing to directory instead of simple file, the **directory is expanded** (non-recursively). The\n   expansion lists all files in given directory using `expansion_glob_pattern` attribute **sorted by file name\n   in reverse order** (you can change this behavior by extending this class and overriding `_expand_dir`\n   method). The expanded files are used as separate sub-layers in place of original directory.\n\nWhen all of the file sub-layers are created, each configuration file **is executed** and each file's global\nnamespace is searched for the `PORT` directive (still preserving the order). If found, the directive is returned\nas is (without conversion).\n\nThe default layer is searched as a last resort. As it contains values from directives' `init`, there is always a\ndefault value (unless a search for non-initialized directive is performed). The default value is returned as is.\n\n## Directive initialization\n\nDirective is initialized using `init` method. It takes directive name, converter function (see bellow) and\na default value (which is `None` by default). It is recommended to name directives using upper-case only.\n**Any directive you want to use must be initialized,** otherwise it is ignored (unknown env variables, unknown\ndirectives in configuration files, etc.).\n\nThis means that once you initialize a directive you can safely use it without `KeyError`s or without calling\n`c.get('PORT', 'default')`. There will always be at least the default value.\n\n## Converters\n\nConverters are arbitrary callables taking single `str` argument and returning anything. The converter is called\nonly for conversion from env variable. There are some predefined converters available in `llconfig.converters`,\nbut it is easy to create own. For example:\n\n```python\nfrom llconfig import Config\nfrom llconfig.converters import json, bool_like\nfrom pathlib import Path\n\nc = Config()\nc.init('PORT', int)  # \"443\" => 443\nc.init('HOSTNAME', str)  # \"localhost\" => \"localhost\"\nc.init('DEBUG', bool_like)  # \"off\" => False\nc.init('DEBUG_2', bool)  # BEWARE: \"0\" => True \nc.init('FLEXIBLE', json)  # '{\"hello\": 1}' => {\"hello\": 1}\nc.init('PICTURES', lambda raw: [Path(p) for p in raw.split(':')])  # \"a.jpg:b.jpg\" => [Path(\"a.jpg\"), Path(\"b.jpg\")]\n```\n\nAny exception raised during conversion is re-raised as a `ValueError`.\n\n## Getting the values out\n\nThe `Config` object implements a mapping protocol, so you can use it as if it was a `dict`. In addition, there is a\n`get_namespace` method [taken from Flask framework](http://flask.pocoo.org/docs/1.0/api/#flask.Config.get_namespace)\nwith exact same behavior (see their docs for more examples).\n\n```python\nfrom llconfig import Config\n\nc = Config()\nc.init('DB_HOST', str, 'localhost')\nc.init('DB_PORT', int, 3306)\nc.init('DB_USER', str)\n\nc['DB_HOST']  # => 'localhost'\nc['DB_USER']  # => None\n\nc.get_namespace('DB_')  # => {'host': 'localhost', 'port': 3306, 'user': None}\nc['DB_':]  # syntactic sugar - does the same as `c.get_namespace('DB_')`\n\ndict(c)  # => {'DB_HOST': 'localhost', 'DB_PORT': 3306, 'DB_USER': None}\n```\n\n## Security\n\n**In short: do not use this library in untrusted environment,** unless you completely understand how it works and\nwhat possible attack vectors are. The main concern is that each file forming the file layer is executed. There\nis also a possibility to load files using `config_files_env_var` environment variable (`APP_CONFIG` by default),\nunless disabled. On top of that, you can compromise your application using badly written converter.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/heureka/llconfig", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "llconfig", "package_url": "https://pypi.org/project/llconfig/", "platform": "", "project_url": "https://pypi.org/project/llconfig/", "project_urls": {"Homepage": "https://github.com/heureka/llconfig"}, "release_url": "https://pypi.org/project/llconfig/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Lightweight layered configuration library.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>llconfig</h1>\n<p>Lightweight layered configuration library.</p>\n<p>All you need is Python &gt;= 3.5 (and a keyboard).</p>\n<hr>\n<h2>Basic concept</h2>\n<p>There is a <code>Config</code> object holding several layers of configuration keys and their values (= configuration directives).\nFrom top to bottom:</p>\n<ol>\n<li>Override layer = holds runtime directive overrides, if any.</li>\n<li>Env layer = directives loaded from environment variables are kept in this layer, if any.</li>\n<li>File layer = directives loaded from configuration file(s) are kept in this layer, if any.</li>\n<li>Default layer = holds a default value for <strong>every</strong> initialized directive.</li>\n</ol>\n<h2>Learn by example</h2>\n<p>The behavior is best shown on following example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">llconfig</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"s1\">'local/override.cnf.py'</span><span class=\"p\">,</span> <span class=\"s1\">'/etc/my_app/conf.d'</span><span class=\"p\">,</span> <span class=\"n\">env_prefix</span><span class=\"o\">=</span><span class=\"s1\">'MY_'</span><span class=\"p\">,</span> <span class=\"n\">config_files_env_var</span><span class=\"o\">=</span><span class=\"s1\">'CONFIG'</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'PORT'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>  <span class=\"c1\"># recommended, but not required (see docstrings)</span>\n<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'PORT'</span><span class=\"p\">]</span>\n</pre>\n<p>The returned value is <code>80</code>, given that there is no <code>MY_PORT</code> env\nvariable, no <code>MY_CONFIG</code> env variable and no <code>PORT = 1234</code> line in any of <code>local/override.cnf.py</code> or\n<code>/etc/my_app/conf.d/*.cnf.py</code> configuration files.</p>\n<h3>Search process</h3>\n<p>First, the override layer is searched, but there is no runtime override (no <code>c['PORT'] = 1234</code>) in this example.</p>\n<p>The environment layer is searched next. If there is an env variable called <code>MY_PORT</code>, its value is taken\nand <strong>converted</strong> using <code>int</code> function (this is necessary otherwise it wouldn't be possible to load anything\nelse than <code>str</code> from env variables).</p>\n<p>Then, if the env variable is not present, the file layer is searched. There can be multiple files in this layer\n(forming sub-layers) and all of them must be Python-executable. File sub-layers are processed in following order:</p>\n<ol>\n<li>Files loaded from <code>MY_CONFIG</code> env variable. Its value is splitted using <code>:</code> (colon) as a delimiter and\neach part is handled the same way as if it would be passed to constructor (see bellow). The handling\npreserves order (so the leftmost part is always handled first).</li>\n<li>Files passed to constructor (<code>local/override.cnf.py</code> and <code>/etc/my_app/conf.d</code> in this example). If there\nis a path pointing to directory instead of simple file, the <strong>directory is expanded</strong> (non-recursively). The\nexpansion lists all files in given directory using <code>expansion_glob_pattern</code> attribute <strong>sorted by file name\nin reverse order</strong> (you can change this behavior by extending this class and overriding <code>_expand_dir</code>\nmethod). The expanded files are used as separate sub-layers in place of original directory.</li>\n</ol>\n<p>When all of the file sub-layers are created, each configuration file <strong>is executed</strong> and each file's global\nnamespace is searched for the <code>PORT</code> directive (still preserving the order). If found, the directive is returned\nas is (without conversion).</p>\n<p>The default layer is searched as a last resort. As it contains values from directives' <code>init</code>, there is always a\ndefault value (unless a search for non-initialized directive is performed). The default value is returned as is.</p>\n<h2>Directive initialization</h2>\n<p>Directive is initialized using <code>init</code> method. It takes directive name, converter function (see bellow) and\na default value (which is <code>None</code> by default). It is recommended to name directives using upper-case only.\n<strong>Any directive you want to use must be initialized,</strong> otherwise it is ignored (unknown env variables, unknown\ndirectives in configuration files, etc.).</p>\n<p>This means that once you initialize a directive you can safely use it without <code>KeyError</code>s or without calling\n<code>c.get('PORT', 'default')</code>. There will always be at least the default value.</p>\n<h2>Converters</h2>\n<p>Converters are arbitrary callables taking single <code>str</code> argument and returning anything. The converter is called\nonly for conversion from env variable. There are some predefined converters available in <code>llconfig.converters</code>,\nbut it is easy to create own. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">llconfig</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">llconfig.converters</span> <span class=\"kn\">import</span> <span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"n\">bool_like</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'PORT'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>  <span class=\"c1\"># \"443\" =&gt; 443</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'HOSTNAME'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>  <span class=\"c1\"># \"localhost\" =&gt; \"localhost\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">,</span> <span class=\"n\">bool_like</span><span class=\"p\">)</span>  <span class=\"c1\"># \"off\" =&gt; False</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG_2'</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">)</span>  <span class=\"c1\"># BEWARE: \"0\" =&gt; True </span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'FLEXIBLE'</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"p\">)</span>  <span class=\"c1\"># '{\"hello\": 1}' =&gt; {\"hello\": 1}</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'PICTURES'</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">raw</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">raw</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">':'</span><span class=\"p\">)])</span>  <span class=\"c1\"># \"a.jpg:b.jpg\" =&gt; [Path(\"a.jpg\"), Path(\"b.jpg\")]</span>\n</pre>\n<p>Any exception raised during conversion is re-raised as a <code>ValueError</code>.</p>\n<h2>Getting the values out</h2>\n<p>The <code>Config</code> object implements a mapping protocol, so you can use it as if it was a <code>dict</code>. In addition, there is a\n<code>get_namespace</code> method <a href=\"http://flask.pocoo.org/docs/1.0/api/#flask.Config.get_namespace\" rel=\"nofollow\">taken from Flask framework</a>\nwith exact same behavior (see their docs for more examples).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">llconfig</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'DB_HOST'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s1\">'localhost'</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'DB_PORT'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"mi\">3306</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'DB_USER'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'DB_HOST'</span><span class=\"p\">]</span>  <span class=\"c1\"># =&gt; 'localhost'</span>\n<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'DB_USER'</span><span class=\"p\">]</span>  <span class=\"c1\"># =&gt; None</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get_namespace</span><span class=\"p\">(</span><span class=\"s1\">'DB_'</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; {'host': 'localhost', 'port': 3306, 'user': None}</span>\n<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'DB_'</span><span class=\"p\">:]</span>  <span class=\"c1\"># syntactic sugar - does the same as `c.get_namespace('DB_')`</span>\n\n<span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; {'DB_HOST': 'localhost', 'DB_PORT': 3306, 'DB_USER': None}</span>\n</pre>\n<h2>Security</h2>\n<p><strong>In short: do not use this library in untrusted environment,</strong> unless you completely understand how it works and\nwhat possible attack vectors are. The main concern is that each file forming the file layer is executed. There\nis also a possibility to load files using <code>config_files_env_var</code> environment variable (<code>APP_CONFIG</code> by default),\nunless disabled. On top of that, you can compromise your application using badly written converter.</p>\n\n          </div>"}, "last_serial": 6350447, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5c310e86b53ad694bccac5a5cc6db11e", "sha256": "1671ac3d73819c036af1f133072484fb103ac79f5215a788fd4df4447830bddf"}, "downloads": -1, "filename": "llconfig-1.0.0-py3.6.egg", "has_sig": false, "md5_digest": "5c310e86b53ad694bccac5a5cc6db11e", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 6419, "upload_time": "2018-07-25T12:43:52", "upload_time_iso_8601": "2018-07-25T12:43:52.335580Z", "url": "https://files.pythonhosted.org/packages/60/92/0a5f03218a20ba81a1f5b918aaaef947201d8b7eb3f8365cc1a6a90f22f2/llconfig-1.0.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ff8a70655475fd7be24127342a10519", "sha256": "97d23ebd5f6c7f25f2c485078f5fae063d9ce3c62a4341e75b42fbe10c5516d5"}, "downloads": -1, "filename": "llconfig-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ff8a70655475fd7be24127342a10519", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6602, "upload_time": "2018-07-25T12:43:51", "upload_time_iso_8601": "2018-07-25T12:43:51.147416Z", "url": "https://files.pythonhosted.org/packages/5b/9e/2d2899a0a870fddb97493559c4f60e9421ed60160397d463ff3fa9e9fb47/llconfig-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06356d3809e218a7601d277836a1417c", "sha256": "13a2e7e9491eea316e1b4bfcce6a57437732d6411332bd220be32f4c3826b3b7"}, "downloads": -1, "filename": "llconfig-1.0.0.tar.gz", "has_sig": false, "md5_digest": "06356d3809e218a7601d277836a1417c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6203, "upload_time": "2018-07-25T12:43:53", "upload_time_iso_8601": "2018-07-25T12:43:53.066198Z", "url": "https://files.pythonhosted.org/packages/da/8d/0809818f6938617e6aab8c2fd259f3aab8092ec62c8e1c4a74a906409234/llconfig-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6c7c8b76e7338ae2169e983df324d82b", "sha256": "a9d1326e67be41178684d0720de3f1d06ae0873d91e9d006712a79db041cded4"}, "downloads": -1, "filename": "llconfig-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6c7c8b76e7338ae2169e983df324d82b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7544, "upload_time": "2019-12-23T11:06:11", "upload_time_iso_8601": "2019-12-23T11:06:11.431982Z", "url": "https://files.pythonhosted.org/packages/44/4b/8062ba893134edf1a6fe3625354096d546a96649a1daccc186b7d1a64482/llconfig-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d15b8ce443a664b457dbd5546d3a43a", "sha256": "b94f47f86e0a98095a848d7b6f79da43415248f454b414ac4dbf1f69f40dacff"}, "downloads": -1, "filename": "llconfig-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5d15b8ce443a664b457dbd5546d3a43a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6280, "upload_time": "2019-12-23T11:06:13", "upload_time_iso_8601": "2019-12-23T11:06:13.340089Z", "url": "https://files.pythonhosted.org/packages/85/f3/d29850f17ff29d650b760bc60c5aa575b218e988206e55014bd12fe528d3/llconfig-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c7c8b76e7338ae2169e983df324d82b", "sha256": "a9d1326e67be41178684d0720de3f1d06ae0873d91e9d006712a79db041cded4"}, "downloads": -1, "filename": "llconfig-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6c7c8b76e7338ae2169e983df324d82b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7544, "upload_time": "2019-12-23T11:06:11", "upload_time_iso_8601": "2019-12-23T11:06:11.431982Z", "url": "https://files.pythonhosted.org/packages/44/4b/8062ba893134edf1a6fe3625354096d546a96649a1daccc186b7d1a64482/llconfig-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d15b8ce443a664b457dbd5546d3a43a", "sha256": "b94f47f86e0a98095a848d7b6f79da43415248f454b414ac4dbf1f69f40dacff"}, "downloads": -1, "filename": "llconfig-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5d15b8ce443a664b457dbd5546d3a43a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6280, "upload_time": "2019-12-23T11:06:13", "upload_time_iso_8601": "2019-12-23T11:06:13.340089Z", "url": "https://files.pythonhosted.org/packages/85/f3/d29850f17ff29d650b760bc60c5aa575b218e988206e55014bd12fe528d3/llconfig-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:57 2020"}