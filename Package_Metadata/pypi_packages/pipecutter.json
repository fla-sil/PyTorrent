{"info": {"author": "Stefan Binder", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# pipecutter <!-- omit in toc -->\n[![PyPI version](http://img.shields.io/pypi/v/pipecutter.svg?style=flat-square&color=blue)](https://pypi.python.org/pypi/pipecutter/) [![Python versions](https://img.shields.io/pypi/pyversions/pipecutter.svg?style=flat-square&color=blue)]() [![build status](http://img.shields.io/travis/binste/pipecutter/master.svg?style=flat)](https://travis-ci.org/binste/pipecutter) [![coverage](https://img.shields.io/codecov/c/github/binste/pipecutter/master.svg?style=flat)](https://codecov.io/gh/binste/pipecutter?branch=master)\n\npipecutter provides a few tools for luigi such that it works better with data science libraries and environments such as pandas, scikit-learn, and Jupyter notebooks.\n\n# Table of contents <!-- omit in toc -->\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Debug in an interactive environment](#debug-in-an-interactive-environment)\n  - [Targets](#targets)\n  - [Full example](#full-example)\n\n# Installation\n```bash\npip install pipecutter\n```\n\nPython 3.6+ is required. pipecutter follows [semantic versioning](https://semver.org/).\n\n# Usage\npipecutter currently provides\n\n* a more convenient way to run and debug luigi tasks in interactive environments such as Jupyter notebooks\n* some luigi targets for saving pandas dataframes to parquet, scikit-learn models with joblib, ...\n\n## Debug in an interactive environment\nWith luigi, you can already run tasks in a Python script/Jupyter notebook/Python console by using the `luigi.build` function (probably with `local_scheduler=True` as arugment). However, if the tasks throws an exception this will be caught by luigi and you are not able to drop into a post mortem debugging session. `pipecutter.run` is a light wrapper around `luigi.build` which disables this exception handling.\n\n```python\nIn [1]: import luigi\nIn [2]: import pipecutter\n\nIn [3]: class TaskWhichFails(luigi.Task):\n   ...:     def run(self):\n   ...:         raise Exception(\"Something is wrong\")\n\n# Traceback below is shortened for readability\nIn [4]: pipecutter.run(TaskWhichFails())\n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\n<ipython-input-5-a970d52d810a> in <module>\n----> 1 pipecutter.run(TaskWhichFails())\n\n...\n\n<ipython-input-3-4e27674090fa> in run(self)\n      1 class TaskWhichFails(luigi.Task):\n      2     def run(self):\n----> 3         raise Exception\n\nException: Something is wrong\n\n# Drop straight into the debugger\nIn [5]: %debug\n> <ipython-input-6-e7528a27d82e>(3)run()\n      1 class TaskWhichFails(luigi.Task):\n      2     def run(self):\n----> 3         raise Exception\n      4\nipdb>\n```\nThis should reduce the barrier for already using luigi tasks while developing a model and thereby making it easier to move into production later on.\n\nAdditionally, you can print the dependencies of tasks with `pipecutter.print_tree` (wrapper around `luigi.tools.deps_tree.print_tree`) or build a graphviz Graph with `pipecutter.build_graph` which you can save as .png, .pdf, etc. or directly view in your Jupyter notebook. See the Full Example for a screenshot of how this looks. The `build_graph` function requires you to have [graphviz installed](https://graphviz.readthedocs.io/en/stable/manual.html#installation).\n\n## Targets\nIn `pipecutter.targets` you find a few targets which build on luigi's `LocalTarget` but additionally have a `load` and a `dump` method. A convenient way to name the targets is hereby to use the `task_id` in the name, which is unique with respect to the task name and its passed in parameters.\n\n```python\nimport luigi\nimport pipecutter\nfrom pipecutter.targets import JoblibTarget\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nclass TrainModel(luigi.Task):\n    n_estimators = luigi.IntParameter()\n\n    def output(self):\n        return JoblibTarget(self.task_id + \".joblib\")\n\n    def run(self):\n        model = RandomForestClassifier(n_estimators=self.n_estimators)\n        self.output().dump(model)\n\n\npipecutter.run(TrainModel(n_estimators=100))\n# -> Produces a file called TrainModel_100_0b0ec0cdea.joblib\n```\n\nIf you use `task_id` in the filename the above task can be written more concise with the `pipecutter.targets.outputs` decorator which adds the `output` method. By default it puts the files in a folder called `data`. This can be adjusted by the optional `folder` argument.\n\n```python\nfrom pipeline.targets import outputs\n\n\n@outputs(JoblibTarget)\nclass TrainModel(luigi.Task):\n    n_estimators = luigi.IntParameter()\n\n    def run(self):\n        model = RandomForestClassifier(n_estimators=self.n_estimators)\n        self.output().dump(model)\n```\n\n## Full example\n```python\nimport luigi\nimport pandas as pd\nimport numpy as np\nimport pipecutter\nfrom luigi.util import requires\nfrom pipecutter.targets import outputs, JoblibTarget, ParquetTarget\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n@outputs(ParquetTarget)\nclass PrepareData(luigi.Task):\n    drop_missings = luigi.BoolParameter()\n\n    def run(self):\n        train_df = pd.DataFrame.from_dict({\"A\": [0, 1, np.nan], \"B\": [5, 1, 2], \"label\": [0, 1, 1]})\n        if self.drop_missings:\n            train_df = train_df.dropna()\n\n        self.output().dump(train_df)\n\n\n@requires(PrepareData)\n@outputs(JoblibTarget)\nclass TrainModel(luigi.Task):\n    n_estimators = luigi.IntParameter()\n\n    def run(self):\n        train_df = self.input().load()\n        X, y = train_df.drop(\"label\", axis=1), train_df[\"label\"]\n\n        model = RandomForestClassifier(n_estimators=self.n_estimators)\n        model.fit(X, y)\n\n        self.output().dump(model)\n\n\ntrain_model = TrainModel(n_estimators=100, drop_missings=True)\npipecutter.build_graph(train_model)\n```\n\nThe last command can be used to visualize the dependency tree, which is especially useful if your pipelines are more complex. It returns a `graphviz.Digraph` object which will render in a Jupyter Notebook as\n\n![build graph example](https://raw.githubusercontent.com/binste/pipecutter/master/images/build_graph_example.png)\n\nFinally, run the tasks with:\n```\npipecutter.run(train_model)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/binste/pipecutter", "keywords": "luigi,spotify,pipeline,plumber,workflow,batch,dependency resolution,jupyter,interactive,targets", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pipecutter", "package_url": "https://pypi.org/project/pipecutter/", "platform": "", "project_url": "https://pypi.org/project/pipecutter/", "project_urls": {"Homepage": "https://github.com/binste/pipecutter"}, "release_url": "https://pypi.org/project/pipecutter/2.0.0/", "requires_dist": ["pandas (>=0.21)", "joblib (>=0.11)", "luigi (>=2.8.5)", "pyarrow", "black ; extra == 'dev'", "graphviz ; extra == 'graphviz'", "pytest ; extra == 'test'", "flake8 ; extra == 'test'", "mypy ; extra == 'test'", "black ; extra == 'test'"], "requires_python": ">=3.6,<3.8", "summary": "pipecutter provides a few tools for luigi such that it works better with data science libraries and environments such as pandas, scikit-learn, and Jupyter notebooks.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pipecutter </h1>\n<p><a href=\"https://pypi.python.org/pypi/pipecutter/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/571c5dc0c96434636791391d73497803eb8d36ff/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f706970656375747465722e7376673f7374796c653d666c61742d73717561726526636f6c6f723d626c7565\"></a> <a href=\"\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17ddbb86df6eeb1231058136082617c038441a7d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f706970656375747465722e7376673f7374796c653d666c61742d73717561726526636f6c6f723d626c7565\"></a> <a href=\"https://travis-ci.org/binste/pipecutter\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b51aa079025d3e2f026beea936edeab0bae516e/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f62696e7374652f706970656375747465722f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://codecov.io/gh/binste/pipecutter?branch=master\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/108b017437db42d316361f5f22f6cc6f160299b6/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f62696e7374652f706970656375747465722f6d61737465722e7376673f7374796c653d666c6174\"></a></p>\n<p>pipecutter provides a few tools for luigi such that it works better with data science libraries and environments such as pandas, scikit-learn, and Jupyter notebooks.</p>\n<h1>Table of contents </h1>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#debug-in-an-interactive-environment\" rel=\"nofollow\">Debug in an interactive environment</a></li>\n<li><a href=\"#targets\" rel=\"nofollow\">Targets</a></li>\n<li><a href=\"#full-example\" rel=\"nofollow\">Full example</a></li>\n</ul>\n</li>\n</ul>\n<h1>Installation</h1>\n<pre>pip install pipecutter\n</pre>\n<p>Python 3.6+ is required. pipecutter follows <a href=\"https://semver.org/\" rel=\"nofollow\">semantic versioning</a>.</p>\n<h1>Usage</h1>\n<p>pipecutter currently provides</p>\n<ul>\n<li>a more convenient way to run and debug luigi tasks in interactive environments such as Jupyter notebooks</li>\n<li>some luigi targets for saving pandas dataframes to parquet, scikit-learn models with joblib, ...</li>\n</ul>\n<h2>Debug in an interactive environment</h2>\n<p>With luigi, you can already run tasks in a Python script/Jupyter notebook/Python console by using the <code>luigi.build</code> function (probably with <code>local_scheduler=True</code> as arugment). However, if the tasks throws an exception this will be caught by luigi and you are not able to drop into a post mortem debugging session. <code>pipecutter.run</code> is a light wrapper around <code>luigi.build</code> which disables this exception handling.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">luigi</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">pipecutter</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"k\">class</span> <span class=\"nc\">TaskWhichFails</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Something is wrong\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Traceback below is shortened for readability</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">pipecutter</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">TaskWhichFails</span><span class=\"p\">())</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">Exception</span>                                 <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">a970d52d810a</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">pipecutter</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">TaskWhichFails</span><span class=\"p\">())</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"mf\">4e27674090</span><span class=\"n\">fa</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n      <span class=\"mi\">1</span> <span class=\"k\">class</span> <span class=\"nc\">TaskWhichFails</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n      <span class=\"mi\">2</span>     <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">3</span>         <span class=\"k\">raise</span> <span class=\"ne\">Exception</span>\n\n<span class=\"ne\">Exception</span><span class=\"p\">:</span> <span class=\"n\">Something</span> <span class=\"ow\">is</span> <span class=\"n\">wrong</span>\n\n<span class=\"c1\"># Drop straight into the debugger</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">debug</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"o\">-</span><span class=\"n\">e7528a27d82e</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"n\">run</span><span class=\"p\">()</span>\n      <span class=\"mi\">1</span> <span class=\"k\">class</span> <span class=\"nc\">TaskWhichFails</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n      <span class=\"mi\">2</span>     <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">3</span>         <span class=\"k\">raise</span> <span class=\"ne\">Exception</span>\n      <span class=\"mi\">4</span>\n<span class=\"n\">ipdb</span><span class=\"o\">&gt;</span>\n</pre>\n<p>This should reduce the barrier for already using luigi tasks while developing a model and thereby making it easier to move into production later on.</p>\n<p>Additionally, you can print the dependencies of tasks with <code>pipecutter.print_tree</code> (wrapper around <code>luigi.tools.deps_tree.print_tree</code>) or build a graphviz Graph with <code>pipecutter.build_graph</code> which you can save as .png, .pdf, etc. or directly view in your Jupyter notebook. See the Full Example for a screenshot of how this looks. The <code>build_graph</code> function requires you to have <a href=\"https://graphviz.readthedocs.io/en/stable/manual.html#installation\" rel=\"nofollow\">graphviz installed</a>.</p>\n<h2>Targets</h2>\n<p>In <code>pipecutter.targets</code> you find a few targets which build on luigi's <code>LocalTarget</code> but additionally have a <code>load</code> and a <code>dump</code> method. A convenient way to name the targets is hereby to use the <code>task_id</code> in the name, which is unique with respect to the task name and its passed in parameters.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">luigi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pipecutter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pipecutter.targets</span> <span class=\"kn\">import</span> <span class=\"n\">JoblibTarget</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TrainModel</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"n\">n_estimators</span> <span class=\"o\">=</span> <span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">IntParameter</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">JoblibTarget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_id</span> <span class=\"o\">+</span> <span class=\"s2\">\".joblib\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_estimators</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">pipecutter</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">TrainModel</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"c1\"># -&gt; Produces a file called TrainModel_100_0b0ec0cdea.joblib</span>\n</pre>\n<p>If you use <code>task_id</code> in the filename the above task can be written more concise with the <code>pipecutter.targets.outputs</code> decorator which adds the <code>output</code> method. By default it puts the files in a folder called <code>data</code>. This can be adjusted by the optional <code>folder</code> argument.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pipeline.targets</span> <span class=\"kn\">import</span> <span class=\"n\">outputs</span>\n\n\n<span class=\"nd\">@outputs</span><span class=\"p\">(</span><span class=\"n\">JoblibTarget</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TrainModel</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"n\">n_estimators</span> <span class=\"o\">=</span> <span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">IntParameter</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_estimators</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</pre>\n<h2>Full example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">luigi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pipecutter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">luigi.util</span> <span class=\"kn\">import</span> <span class=\"n\">requires</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pipecutter.targets</span> <span class=\"kn\">import</span> <span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">JoblibTarget</span><span class=\"p\">,</span> <span class=\"n\">ParquetTarget</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n\n\n<span class=\"nd\">@outputs</span><span class=\"p\">(</span><span class=\"n\">ParquetTarget</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">PrepareData</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"n\">drop_missings</span> <span class=\"o\">=</span> <span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">BoolParameter</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">train_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span><span class=\"s2\">\"A\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"s2\">\"B\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s2\">\"label\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]})</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">drop_missings</span><span class=\"p\">:</span>\n            <span class=\"n\">train_df</span> <span class=\"o\">=</span> <span class=\"n\">train_df</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">train_df</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@requires</span><span class=\"p\">(</span><span class=\"n\">PrepareData</span><span class=\"p\">)</span>\n<span class=\"nd\">@outputs</span><span class=\"p\">(</span><span class=\"n\">JoblibTarget</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TrainModel</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"n\">n_estimators</span> <span class=\"o\">=</span> <span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">IntParameter</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">train_df</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n        <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">train_df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"s2\">\"label\"</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">train_df</span><span class=\"p\">[</span><span class=\"s2\">\"label\"</span><span class=\"p\">]</span>\n\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_estimators</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">train_model</span> <span class=\"o\">=</span> <span class=\"n\">TrainModel</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">drop_missings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">pipecutter</span><span class=\"o\">.</span><span class=\"n\">build_graph</span><span class=\"p\">(</span><span class=\"n\">train_model</span><span class=\"p\">)</span>\n</pre>\n<p>The last command can be used to visualize the dependency tree, which is especially useful if your pipelines are more complex. It returns a <code>graphviz.Digraph</code> object which will render in a Jupyter Notebook as</p>\n<p><img alt=\"build graph example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8198c7c65e34e4e277a9f94081c5f5cceaf42cd/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f62696e7374652f706970656375747465722f6d61737465722f696d616765732f6275696c645f67726170685f6578616d706c652e706e67\"></p>\n<p>Finally, run the tasks with:</p>\n<pre><code>pipecutter.run(train_model)\n</code></pre>\n\n          </div>"}, "last_serial": 6521288, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "da967e3248c18e591318b8da4bc405d5", "sha256": "9b16dc57695c98f21dd5f8d243feee132686bddac25a971c3e517b852384cefe"}, "downloads": -1, "filename": "pipecutter-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "da967e3248c18e591318b8da4bc405d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 4046, "upload_time": "2020-01-03T10:26:12", "upload_time_iso_8601": "2020-01-03T10:26:12.186607Z", "url": "https://files.pythonhosted.org/packages/38/19/dc584560f4e0d51bef0bcfb1c6ab7438cdbf221fbcfc8962aa01c17e9de5/pipecutter-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c623274b3a45e45b3602d5ce3e8b00e", "sha256": "ea656ca80a4b27cd4f36949c17ee68b6e95e68596a09dce2abddb72e5fe4f2b4"}, "downloads": -1, "filename": "pipecutter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3c623274b3a45e45b3602d5ce3e8b00e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 2614, "upload_time": "2020-01-03T10:26:14", "upload_time_iso_8601": "2020-01-03T10:26:14.606205Z", "url": "https://files.pythonhosted.org/packages/77/45/956c043180450943550ad281dab0f894d0f3467a735f916f513365c15607/pipecutter-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "eca5ee8b85488523caa5c9fceececa1c", "sha256": "9ff2bdf50e3d2f2a57b4771ba53fb80717eb5747f350cfda0c2b45561fff60bc"}, "downloads": -1, "filename": "pipecutter-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "eca5ee8b85488523caa5c9fceececa1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 4044, "upload_time": "2020-01-03T10:32:03", "upload_time_iso_8601": "2020-01-03T10:32:03.171753Z", "url": "https://files.pythonhosted.org/packages/56/7b/93deb829813abdc541241bdebe95ba55987e449d4be02b9f10b557429c0c/pipecutter-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a8066866bda70006639bb8c4522337b", "sha256": "db109155b44f1d34a393d75868300e85c682261d2e0723aa27fbcac7ec01c4fd"}, "downloads": -1, "filename": "pipecutter-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1a8066866bda70006639bb8c4522337b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 2555, "upload_time": "2020-01-03T10:32:05", "upload_time_iso_8601": "2020-01-03T10:32:05.133872Z", "url": "https://files.pythonhosted.org/packages/92/80/c707c80dbc899a35f8745fb7993abe8b8709103986b4b47627e1cf3d8d04/pipecutter-0.1.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "1d1729fda1bee009e8415a7670ca5de1", "sha256": "d2bfdf5f09ce209bfbda28f9f5838e9276433411ece7160d93f865aca03cf515"}, "downloads": -1, "filename": "pipecutter-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d1729fda1bee009e8415a7670ca5de1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 5309, "upload_time": "2020-01-05T19:38:30", "upload_time_iso_8601": "2020-01-05T19:38:30.927902Z", "url": "https://files.pythonhosted.org/packages/77/37/605303a5bb36000a20acbce7efb4f68de4395170f796a0d8571f472aa323/pipecutter-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6268dd09bf0f301087ce383fea491c23", "sha256": "a7f780fad5741129f64735b7277905002098421575109c88b2e62b8745e051ac"}, "downloads": -1, "filename": "pipecutter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6268dd09bf0f301087ce383fea491c23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 4109, "upload_time": "2020-01-05T19:38:34", "upload_time_iso_8601": "2020-01-05T19:38:34.018874Z", "url": "https://files.pythonhosted.org/packages/06/6c/5cb026439367bd92fb9f72b9f980ea828f8c7ec66b778bc884c32cab745d/pipecutter-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "bcb6df273e86dd9e84b502e3c787f3e1", "sha256": "62a48b82eb003660fcec8c9a6a432af4a5d24e401299fdcd33093d958853ac95"}, "downloads": -1, "filename": "pipecutter-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bcb6df273e86dd9e84b502e3c787f3e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 5383, "upload_time": "2020-01-11T13:03:36", "upload_time_iso_8601": "2020-01-11T13:03:36.649945Z", "url": "https://files.pythonhosted.org/packages/55/c3/4d0a4669cc130a19a2fc1a051540e9e7c934500fc6a13dd177e90c642d44/pipecutter-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4710d80e0d96f878742b39e718255652", "sha256": "3f022bfb6fc962d0e36bb318ab6caaf4d7747d861513b6c765e35f8c8cd459a7"}, "downloads": -1, "filename": "pipecutter-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4710d80e0d96f878742b39e718255652", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 4278, "upload_time": "2020-01-11T13:03:41", "upload_time_iso_8601": "2020-01-11T13:03:41.150415Z", "url": "https://files.pythonhosted.org/packages/ba/f5/0dfc287d9847693108e4e22f7356a5bac6a1c67ae66f7a334a29a10464cb/pipecutter-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "420b5df6f22f2a68973d645596316622", "sha256": "46cccd9a0c9567725acfdf591c1ae594d182c8b626f3caf8fc7d6a7a23f1598e"}, "downloads": -1, "filename": "pipecutter-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "420b5df6f22f2a68973d645596316622", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 6014, "upload_time": "2020-01-18T16:30:44", "upload_time_iso_8601": "2020-01-18T16:30:44.186792Z", "url": "https://files.pythonhosted.org/packages/56/fa/e4f48b2d755374669b7544de1c9d0a6ffd0422e6b0eca25a12451136dd50/pipecutter-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec14b870ef00fa919dd83bde28b73e6b", "sha256": "256a89fd1296392539b0f9919b556be410263f5008e2b71daac2e3f392cec0f0"}, "downloads": -1, "filename": "pipecutter-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ec14b870ef00fa919dd83bde28b73e6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 4976, "upload_time": "2020-01-18T16:30:52", "upload_time_iso_8601": "2020-01-18T16:30:52.150977Z", "url": "https://files.pythonhosted.org/packages/16/eb/d210848a78f81c63afa1ede9f70dd8600031f245215d3e94d36154c9b5f8/pipecutter-1.2.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "dda8a663906cd8f831b20a35c016afad", "sha256": "90445c92548ff8ec7eb9b78cba826c3fd7b9ad71b14b2e72f851641168b3788e"}, "downloads": -1, "filename": "pipecutter-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dda8a663906cd8f831b20a35c016afad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 7133, "upload_time": "2020-01-26T08:55:39", "upload_time_iso_8601": "2020-01-26T08:55:39.454616Z", "url": "https://files.pythonhosted.org/packages/bb/bf/fd3282c5cc8e1eaaab30d1d1b10d74c44684ec1a99d03990391757fa2b5a/pipecutter-2.0.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dda8a663906cd8f831b20a35c016afad", "sha256": "90445c92548ff8ec7eb9b78cba826c3fd7b9ad71b14b2e72f851641168b3788e"}, "downloads": -1, "filename": "pipecutter-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dda8a663906cd8f831b20a35c016afad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 7133, "upload_time": "2020-01-26T08:55:39", "upload_time_iso_8601": "2020-01-26T08:55:39.454616Z", "url": "https://files.pythonhosted.org/packages/bb/bf/fd3282c5cc8e1eaaab30d1d1b10d74c44684ec1a99d03990391757fa2b5a/pipecutter-2.0.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:21 2020"}