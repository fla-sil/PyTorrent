{"info": {"author": "UNKNOWN", "author_email": "di@sferos.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Programming Language :: Python", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "What's Dilla?\n======\nGeneral-purpose testing tool\n* Django custom management command\n* Random data generator\n* i.e. models.SlugField() will get corporis_maxime_architecto_689 value, not hwegid24#!@#1ty51794t\n* images (see Screenshots)\n\n\nWhy would I need that?\n========================\nLet's say you wrote your blog application (oh yeah, your favorite!) in Django. Unit tests went fine, and everything runs extremely fast, even those ORM-generated ultra-long queries. You've added several categorized posts and it's still stable as a rock. You're quite sure the app is efficient and ready to for live deployment. Right? Wrong.\n\nDilla would add hundreds of categories, posts and even photos to your app in seconds. After it's done you migh re-consider your deployment plans.\n\nHowTos  \n=======\n\n* Add Dilla to INSTALLED_APPS tuple\n\nINSTALLED_APPS = ( ...\n   'dilla',\n)\n\n* Check if it works\n $ ./manage.py help dilla\nUsage: manage.py dilla [options] appname [appname ...]\n\n...\n* Make sure you're running development environment. You don't want to have your production db filled with junk, do you?\n* Review your models. Maybe there are some, that you wouldn't like to be populated by Dilla?\n\nclass BlogConfiguration(models.Model):\n...\n   class Dilla:\n      skip_model = True\n      # or you might want to skip specified fields\n      # skip_fields = ('hash', 'user',)\n\n* Want Dilla to generate images for you? Just let it know.\n\nclass BlogPostImage:\n   # example: sorl-thumbnail field\n   image = ImageWithThumbnailsField(\"Blog post image\", upload_to='images/%Y/%m/%d', \n        thumbnail={'size': THUMB_SET[0] }, height_field = 'height', width_field = 'width',\n        extra_thumbnails=THUMB_SET[1]\n        )\n\n...\n\n   class Dilla:\n        image_fields = ('image', )\n        generate_images = True\n        image_resolution = '640x480'      \n\n* Run 200 iterations on your app model\n  $ ./manage.py dilla blog -i 200\nYou're done. Expect funny data. Profile your queries etc.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/django-dilla/", "keywords": "django,data,random,testing", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-dilla", "package_url": "https://pypi.org/project/django-dilla/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-dilla/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/django-dilla/"}, "release_url": "https://pypi.org/project/django-dilla/r17/", "requires_dist": null, "requires_python": null, "summary": "General-purpose testing tool that populates your Django models with random data.", "version": "r17", "yanked": false, "html_description": "<div class=\"project-description\">\n            What's Dilla?<br>======<br>General-purpose testing tool<br>* Django custom management command<br>* Random data generator<br>* i.e. models.SlugField() will get corporis_maxime_architecto_689 value, not hwegid24#!@#1ty51794t<br>* images (see Screenshots)<br><br><br>Why would I need that?<br>========================<br>Let's say you wrote your blog application (oh yeah, your favorite!) in Django. Unit tests went fine, and everything runs extremely fast, even those ORM-generated ultra-long queries. You've added several categorized posts and it's still stable as a rock. You're quite sure the app is efficient and ready to for live deployment. Right? Wrong.<br><br>Dilla would add hundreds of categories, posts and even photos to your app in seconds. After it's done you migh re-consider your deployment plans.<br><br>HowTos  <br>=======<br><br>* Add Dilla to INSTALLED_APPS tuple<br><br>INSTALLED_APPS = ( ...<br>   'dilla',<br>)<br><br>* Check if it works<br> $ ./manage.py help dilla<br>Usage: manage.py dilla [options] appname [appname ...]<br><br>...<br>* Make sure you're running development environment. You don't want to have your production db filled with junk, do you?<br>* Review your models. Maybe there are some, that you wouldn't like to be populated by Dilla?<br><br>class BlogConfiguration(models.Model):<br>...<br>   class Dilla:<br>      skip_model = True<br>      # or you might want to skip specified fields<br>      # skip_fields = ('hash', 'user',)<br><br>* Want Dilla to generate images for you? Just let it know.<br><br>class BlogPostImage:<br>   # example: sorl-thumbnail field<br>   image = ImageWithThumbnailsField(\"Blog post image\", upload_to='images/%Y/%m/%d', <br>        thumbnail={'size': THUMB_SET[0] }, height_field = 'height', width_field = 'width',<br>        extra_thumbnails=THUMB_SET[1]<br>        )<br><br>...<br><br>   class Dilla:<br>        image_fields = ('image', )<br>        generate_images = True<br>        image_resolution = '640x480'      <br><br>* Run 200 iterations on your app model<br>  $ ./manage.py dilla blog -i 200<br>You're done. Expect funny data. Profile your queries etc.\n          </div>"}, "last_serial": 802904, "releases": {"0.2beta": [], "r17": []}, "urls": [], "timestamp": "Fri May  8 00:36:34 2020"}