{"info": {"author": "Oliver Cope", "author_email": "oliver@redgecko.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Database", "Topic :: Database :: Front-Ends", "Topic :: Software Development"], "description": "An interface for using plain SQL, in files.\n=============================================\n\nDoes writing complex queries in an ORM feel like driving with the handbrake on?\nEmbrace SQL! Put your SQL queries in regular ``.sql`` files, and embrace will\nload them.\n\nUsage::\n\n    import embrace\n\n    # Connect to your database, using any db-api connector.\n    # If python supports it, so does embrace.\n    conn = psycopg2.connect(\"postgresql:///mydb\")\n\n    # Create a module populated with queries from a collection of *.sql files:\n    queries = embrace.module(\"resources/sql\")\n\n    # Run a query\n    users = queries.list_users(conn, order_by='created_at')\n\nYour query would be specified like this::\n\n    -- :name list_users :many\n    select * from users where active = :active order by :identifier:order_by\n\n\nEmbrace returns rows using the underlying db-api cursor. Most db-api\nlibraries have cursor types that return dicts or namedtuples. For example in\nPostgresql you could do this::\n\n    conn = psycopg2.connect(\n        \"postgresql:///mydb\",\n        cursor_factory=psycopg2.extras.NamedTupleCursor)\n    )\n\nWhat is the format of a query SQL file?\n----------------------------------------\n\nEmbrace-SQL tries to stick close to the format used by HugSQL and PugSQL.\nSQL files normally contain special comments to specify the query name and\nresult type, and an SQL query:\n\n::\n\n    -- :name get_user_count\n    -- :result :scalar\n    SELECT count(1) FROM users\n\nIf a result type is omitted, it will default to ``cursor``. Also, the result type\ncan be included directly after the name:\n\n::\n\n    -- :name get_user_count :scalar\n\nIf ``:name`` is omitted, it will default to the filename without the file extension.\n\nA single file may contain multiple queries, separated by a structured SQL\ncomment. For example to create two query objects accessible as\n``queries.list_users()`` and ``queries.get_user_by_id()``:\n\n::\n\n    -- :name list_users :many\n    select * from users\n\n    -- :name get_user_by_id :one\n    select * from users where id=:id\n\nBut if you *don't* have the separating comment, embrace-sql can run\nmultiple statements in a single query call, returning the result from just the last one.\n\nWhy? Because it makes this possible in MySQL:\n\n::\n\n    -- :result :column\n    insert into users (name, email) values (:name, :email);\n    select last_insert_id();\n\n\nWhat can queries return?\n------------------------------\n\nThe following result types are supported:\n\n========================= ======================================================\n``:affected``, ``:n``     The number of rows affected\n\n``:first``                The first row, as returned by ``cursor.fetchone()``,\n                          or ``None`` if no row is found.\n\n``:one``, ``:1``          A single row, as returned by ``cursor.fetchone()``,\n                          usually as a tuple (but most db-api modules have\n                          extensions allowing you to access rows as dicts or\n                          named tuples.\n\n                          If no row is generated by the query,\n                          ``embrace.exceptions.NoResultFound`` will be raised.\n                          If more than one row is generated by the query,\n                          ``embrace.exceptions.MultipleResultsFound`` will be\n                          raised.\n\n``exactly-one`, ``:=1``   Synonyms for ``:one``, retained for compatibility\n\n``:one-or-none``          As ``one``, but returns None if no row is returned by\n                          the query.\n\n``:many``, ``:*``         An iterator over a number of rows. Each row will be\n                          the value returned by ``cursor.fetchone()``, usually\n                          a tuple.\n\n``:cursor``, ``:raw``     The cursor object.\n\n``:scalar``               The value of the first column of the  first row\n                          returned by the query.\n\n                          If no row is generated by the query, a\n                          ``NoResultFound`` will be raised.\n\n``:column``               An iterator over the values in the first column\n                          returned.\n========================= ======================================================\n\nYou can override the return type specified by the query from Python code by\nusing one of the following methods on the ``Query`` object:\n\n    - ``affected``\n    - ``one``\n    - ``exactlyone``\n    - ``many``\n    - ``cursor``\n    - ``scalar``\n    - ``column``\n\n\n\nHow do parameters work?\n------------------------\n\nPlaceholders inserted using the ``:name`` syntax are escaped by the db-api\ndriver:\n\n::\n\n    -- Outputs `select * from user where name = 'o''brien'`;\n    select * from users where name = :name\n\nYou can interpolate lists and tuples too:\n\n``:tuple:`` creates a placeholder like this ``(?, ?, ?)``\n\n``:value*:`` creates a placeholder like this ``?, ?, ?``\n\n``:tuple*`` creates a placeholder like this ``(?, ?, ?), (?, ?, ?), \u2026``\n(useful for multiple insert queries)\n\n::\n\n    -- Call this with `queries.insert_foo(data=(1, 2, 3))`\n    INSERT INTO foo (a, b, c) VALUES :tuple:data\n\n    -- Call this with `queries.get_matching_users(names=(\"carolyn\", \"douglas\"))`\n    SELECT * from users WHERE name in (:values*:names)\n\n\nYou can escape identifiers with ``:identifier:``, like this:\n\n::\n\n    -- Outputs `select * from \"some random table\"`\n    select * from :identifier:table_name\n\nYou can pass through raw sql too. This leaves you open to SQL injection attacks if you allow user input into such parameters:\n\n::\n\n    -- Outputs `select * from users order by name desc`\n    select * from users order by :raw:order_clause\n\n\nHow do I handle connections? Transactions?\n------------------------------------------\n\nEmbrace doesn't handle connections for you. You must open and maintain\nconnection objects outside of EmbraceSQL. For PostgreSQL you can use\n``psycopg2.extras.connection_pooling`` to help do this efficiently. Once you\nhave a connection object, you must pass it every time you call a query.\n\nFor convenience you can run queries inside a transaction with the following syntax:\n\n::\n\n    with queries.transaction(conn) as q:\n        q.increment_counter()\n\nThe transaction will be commited when the with block exits, or rolled back if\nan exception occurred.\n\n\nHow do I reload queries when the underlying files change?\n---------------------------------------------------------\n\nPass auto_reload=True when constructing a module:\n\n::\n\n    m = module('resources/sql', auto_reload=True)\n\n\nExceptions\n----------\n\nExceptions raised from the underlying db-api connection are wrapped in\nexception classes from ``embrace.exceptions``, with PEP-249 compliant names.\nYou can use this to catch exceptions, for example:\n\n::\n\n    try:\n        queries.execute(\"SELECT 1.0 / 0.0\")\n    except embrace.exceptions.DataError:\n        pass\n\nThe original exception will be available in the ``__cause__`` attribute of the\nembrace exception object.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://hg.sr.ht/~olly/embrace-sql", "keywords": "sql hugsql pugsql orm anti-orm files", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "embrace", "package_url": "https://pypi.org/project/embrace/", "platform": "", "project_url": "https://pypi.org/project/embrace/", "project_urls": {"Homepage": "https://hg.sr.ht/~olly/embrace-sql"}, "release_url": "https://pypi.org/project/embrace/2.1.0/", "requires_dist": ["sqlparse", "wrapt"], "requires_python": "", "summary": "Embrace SQL keeps your SQL queries in SQL files. An anti-ORM inspired by HugSQL and PugSQL", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Does writing complex queries in an ORM feel like driving with the handbrake on?\nEmbrace SQL! Put your SQL queries in regular <tt>.sql</tt> files, and embrace will\nload them.</p>\n<p>Usage:</p>\n<pre>import embrace\n\n# Connect to your database, using any db-api connector.\n# If python supports it, so does embrace.\nconn = psycopg2.connect(\"postgresql:///mydb\")\n\n# Create a module populated with queries from a collection of *.sql files:\nqueries = embrace.module(\"resources/sql\")\n\n# Run a query\nusers = queries.list_users(conn, order_by='created_at')\n</pre>\n<p>Your query would be specified like this:</p>\n<pre>-- :name list_users :many\nselect * from users where active = :active order by :identifier:order_by\n</pre>\n<p>Embrace returns rows using the underlying db-api cursor. Most db-api\nlibraries have cursor types that return dicts or namedtuples. For example in\nPostgresql you could do this:</p>\n<pre>conn = psycopg2.connect(\n    \"postgresql:///mydb\",\n    cursor_factory=psycopg2.extras.NamedTupleCursor)\n)\n</pre>\n<div id=\"what-is-the-format-of-a-query-sql-file\">\n<h2>What is the format of a query SQL file?</h2>\n<p>Embrace-SQL tries to stick close to the format used by HugSQL and PugSQL.\nSQL files normally contain special comments to specify the query name and\nresult type, and an SQL query:</p>\n<pre>-- :name get_user_count\n-- :result :scalar\nSELECT count(1) FROM users\n</pre>\n<p>If a result type is omitted, it will default to <tt>cursor</tt>. Also, the result type\ncan be included directly after the name:</p>\n<pre>-- :name get_user_count :scalar\n</pre>\n<p>If <tt>:name</tt> is omitted, it will default to the filename without the file extension.</p>\n<p>A single file may contain multiple queries, separated by a structured SQL\ncomment. For example to create two query objects accessible as\n<tt>queries.list_users()</tt> and <tt>queries.get_user_by_id()</tt>:</p>\n<pre>-- :name list_users :many\nselect * from users\n\n-- :name get_user_by_id :one\nselect * from users where id=:id\n</pre>\n<p>But if you <em>don\u2019t</em> have the separating comment, embrace-sql can run\nmultiple statements in a single query call, returning the result from just the last one.</p>\n<p>Why? Because it makes this possible in MySQL:</p>\n<pre>-- :result :column\ninsert into users (name, email) values (:name, :email);\nselect last_insert_id();\n</pre>\n</div>\n<div id=\"what-can-queries-return\">\n<h2>What can queries return?</h2>\n<p>The following result types are supported:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><tt>:affected</tt>, <tt>:n</tt></td>\n<td>The number of rows affected</td>\n</tr>\n<tr><td><tt>:first</tt></td>\n<td>The first row, as returned by <tt>cursor.fetchone()</tt>,\nor <tt>None</tt> if no row is found.</td>\n</tr>\n<tr><td><tt>:one</tt>, <tt>:1</tt></td>\n<td><p>A single row, as returned by <tt>cursor.fetchone()</tt>,\nusually as a tuple (but most db-api modules have\nextensions allowing you to access rows as dicts or\nnamed tuples.</p>\n<p>If no row is generated by the query,\n<tt>embrace.exceptions.NoResultFound</tt> will be raised.\nIf more than one row is generated by the query,\n<tt>embrace.exceptions.MultipleResultsFound</tt> will be\nraised.</p>\n</td>\n</tr>\n<tr><td><tt><span class=\"pre\">exactly-one`,</span> <span class=\"pre\">``:=1</span></tt></td>\n<td>Synonyms for <tt>:one</tt>, retained for compatibility</td>\n</tr>\n<tr><td><tt><span class=\"pre\">:one-or-none</span></tt></td>\n<td>As <tt>one</tt>, but returns None if no row is returned by\nthe query.</td>\n</tr>\n<tr><td><tt>:many</tt>, <tt>:*</tt></td>\n<td>An iterator over a number of rows. Each row will be\nthe value returned by <tt>cursor.fetchone()</tt>, usually\na tuple.</td>\n</tr>\n<tr><td><tt>:cursor</tt>, <tt>:raw</tt></td>\n<td>The cursor object.</td>\n</tr>\n<tr><td><tt>:scalar</tt></td>\n<td><p>The value of the first column of the  first row\nreturned by the query.</p>\n<p>If no row is generated by the query, a\n<tt>NoResultFound</tt> will be raised.</p>\n</td>\n</tr>\n<tr><td><tt>:column</tt></td>\n<td>An iterator over the values in the first column\nreturned.</td>\n</tr>\n</tbody>\n</table>\n<p>You can override the return type specified by the query from Python code by\nusing one of the following methods on the <tt>Query</tt> object:</p>\n<blockquote>\n<ul>\n<li><tt>affected</tt></li>\n<li><tt>one</tt></li>\n<li><tt>exactlyone</tt></li>\n<li><tt>many</tt></li>\n<li><tt>cursor</tt></li>\n<li><tt>scalar</tt></li>\n<li><tt>column</tt></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"how-do-parameters-work\">\n<h2>How do parameters work?</h2>\n<p>Placeholders inserted using the <tt>:name</tt> syntax are escaped by the db-api\ndriver:</p>\n<pre>-- Outputs `select * from user where name = 'o''brien'`;\nselect * from users where name = :name\n</pre>\n<p>You can interpolate lists and tuples too:</p>\n<p><tt>:tuple:</tt> creates a placeholder like this <tt><span class=\"pre\">(?,</span> <span class=\"pre\">?,</span> <span class=\"pre\">?)</span></tt></p>\n<p><tt>:value*:</tt> creates a placeholder like this <tt><span class=\"pre\">?,</span> <span class=\"pre\">?,</span> ?</tt></p>\n<p><tt>:tuple*</tt> creates a placeholder like this <tt><span class=\"pre\">(?,</span> <span class=\"pre\">?,</span> <span class=\"pre\">?),</span> <span class=\"pre\">(?,</span> <span class=\"pre\">?,</span> <span class=\"pre\">?),</span> \u2026</tt>\n(useful for multiple insert queries)</p>\n<pre>-- Call this with `queries.insert_foo(data=(1, 2, 3))`\nINSERT INTO foo (a, b, c) VALUES :tuple:data\n\n-- Call this with `queries.get_matching_users(names=(\"carolyn\", \"douglas\"))`\nSELECT * from users WHERE name in (:values*:names)\n</pre>\n<p>You can escape identifiers with <tt>:identifier:</tt>, like this:</p>\n<pre>-- Outputs `select * from \"some random table\"`\nselect * from :identifier:table_name\n</pre>\n<p>You can pass through raw sql too. This leaves you open to SQL injection attacks if you allow user input into such parameters:</p>\n<pre>-- Outputs `select * from users order by name desc`\nselect * from users order by :raw:order_clause\n</pre>\n</div>\n<div id=\"how-do-i-handle-connections-transactions\">\n<h2>How do I handle connections? Transactions?</h2>\n<p>Embrace doesn\u2019t handle connections for you. You must open and maintain\nconnection objects outside of EmbraceSQL. For PostgreSQL you can use\n<tt>psycopg2.extras.connection_pooling</tt> to help do this efficiently. Once you\nhave a connection object, you must pass it every time you call a query.</p>\n<p>For convenience you can run queries inside a transaction with the following syntax:</p>\n<pre>with queries.transaction(conn) as q:\n    q.increment_counter()\n</pre>\n<p>The transaction will be commited when the with block exits, or rolled back if\nan exception occurred.</p>\n</div>\n<div id=\"how-do-i-reload-queries-when-the-underlying-files-change\">\n<h2>How do I reload queries when the underlying files change?</h2>\n<p>Pass auto_reload=True when constructing a module:</p>\n<pre>m = module('resources/sql', auto_reload=True)\n</pre>\n</div>\n<div id=\"exceptions\">\n<h2>Exceptions</h2>\n<p>Exceptions raised from the underlying db-api connection are wrapped in\nexception classes from <tt>embrace.exceptions</tt>, with PEP-249 compliant names.\nYou can use this to catch exceptions, for example:</p>\n<pre>try:\n    queries.execute(\"SELECT 1.0 / 0.0\")\nexcept embrace.exceptions.DataError:\n    pass\n</pre>\n<p>The original exception will be available in the <tt>__cause__</tt> attribute of the\nembrace exception object.</p>\n</div>\n\n          </div>"}, "last_serial": 6980111, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "401e1a130f8a5cb7bb1282323b71125e", "sha256": "02d747684e92a38983366d55333e1bc841ed5293c26b36721c736c7922bd5bdb"}, "downloads": -1, "filename": "embrace-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "401e1a130f8a5cb7bb1282323b71125e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10904, "upload_time": "2020-02-10T12:30:15", "upload_time_iso_8601": "2020-02-10T12:30:15.029533Z", "url": "https://files.pythonhosted.org/packages/91/1c/9143fcef339e8026abc7d278a1a10afb64352f14315d7b85d954d9dd0844/embrace-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a9c9f8678e00546f92daae4c1d1fa82", "sha256": "3433928e47f7c822645d18842612ac643db7e355d1a6cf2614a0e61b465d9286"}, "downloads": -1, "filename": "embrace-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5a9c9f8678e00546f92daae4c1d1fa82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6412, "upload_time": "2020-02-10T12:30:17", "upload_time_iso_8601": "2020-02-10T12:30:17.355808Z", "url": "https://files.pythonhosted.org/packages/f9/57/1403da8ece6e28038c6096fa12b47c86e6a732c6e09074ed4216ba9d9884/embrace-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "488bcf650cff2adefeed91ef8afe4c40", "sha256": "272733770f26f65c4bd6d6962bb86cc8849de87f5f78ff766cd0e1ef1cf24d91"}, "downloads": -1, "filename": "embrace-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "488bcf650cff2adefeed91ef8afe4c40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13720, "upload_time": "2020-02-17T13:20:53", "upload_time_iso_8601": "2020-02-17T13:20:53.379321Z", "url": "https://files.pythonhosted.org/packages/1a/ed/78f922b87b3c069a623defd01d8e31d79cb9c164e24526cc1c056d54a88d/embrace-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c07f029c34d4c399f4d4b7c14357d0e", "sha256": "aaaa6b6a4d3486b83db6b6f289a9cc46daab35c4ef4981aac97e06268638d63e"}, "downloads": -1, "filename": "embrace-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7c07f029c34d4c399f4d4b7c14357d0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9298, "upload_time": "2020-02-17T13:20:55", "upload_time_iso_8601": "2020-02-17T13:20:55.150781Z", "url": "https://files.pythonhosted.org/packages/c9/ac/6662b6671ae81f25b8ad39749dd13b7500c321d612f87d3dd9ae662b1fcd/embrace-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "921f2462c1345aeae34066e7c7d2d7d8", "sha256": "bb4f279d60a3ebb74dfffc7d756b63e9ef21f98c0ecc1e9cbb97bfe7f13a5029"}, "downloads": -1, "filename": "embrace-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "921f2462c1345aeae34066e7c7d2d7d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15128, "upload_time": "2020-02-28T11:46:01", "upload_time_iso_8601": "2020-02-28T11:46:01.798496Z", "url": "https://files.pythonhosted.org/packages/19/ad/bb877aa0a0e5b9fc0cb63062aa806e2c3227dbf7440cb3a5e192872680cf/embrace-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "050d1d62fcc1172d47c3b391b05810ad", "sha256": "d1ce76af0966ea0226e446ffa1ef326edc848914b70c7e5ef24b9a16860a027a"}, "downloads": -1, "filename": "embrace-1.1.0.tar.gz", "has_sig": false, "md5_digest": "050d1d62fcc1172d47c3b391b05810ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11978, "upload_time": "2020-02-28T11:46:03", "upload_time_iso_8601": "2020-02-28T11:46:03.599598Z", "url": "https://files.pythonhosted.org/packages/e6/d6/e6a877cdf993e8567dcdf9bf082f7c56bcbbb90a0463a1251571964977bf/embrace-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "25d6e19da6049dff065893386ef7f5fe", "sha256": "8b232c2a05b37b9edc215bf9c8f55e60a06a46adadbb00014832a96bc02128e4"}, "downloads": -1, "filename": "embrace-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25d6e19da6049dff065893386ef7f5fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15394, "upload_time": "2020-03-09T08:36:50", "upload_time_iso_8601": "2020-03-09T08:36:50.636179Z", "url": "https://files.pythonhosted.org/packages/9f/60/0555e2909a76f696d4af3686e8128eb50cc9070f806dbc666919ee076925/embrace-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "021c5eedd73f099b4727b6b94b105c87", "sha256": "de752b94d92c2594d7c339cbeb90fbd6ddfb0fc0982c013c43b85e55b36add5d"}, "downloads": -1, "filename": "embrace-1.2.0.tar.gz", "has_sig": false, "md5_digest": "021c5eedd73f099b4727b6b94b105c87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12262, "upload_time": "2020-03-09T08:36:52", "upload_time_iso_8601": "2020-03-09T08:36:52.145130Z", "url": "https://files.pythonhosted.org/packages/e6/31/e8832f01ee859758b8b8c200a94fef2ea43624b44e5abfdcc4536a3a8372/embrace-1.2.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "4d82d2badc52798917698b424e681d32", "sha256": "d22e598872ea2969a5e084f6d1c84a3940d1e58fb5f11193681dfbeecc607e89"}, "downloads": -1, "filename": "embrace-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4d82d2badc52798917698b424e681d32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15812, "upload_time": "2020-03-12T11:04:41", "upload_time_iso_8601": "2020-03-12T11:04:41.946778Z", "url": "https://files.pythonhosted.org/packages/d7/b2/cfd8b11101cdd86b4af7b8a27996394211204eb5f195e3acdbd550922242/embrace-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee77df9b1e9fb1cd13c3f520f5fed823", "sha256": "37a5533bb43d4a645df402297d5832ce8974f3da94d091818bf3b75600981893"}, "downloads": -1, "filename": "embrace-2.0.0.tar.gz", "has_sig": false, "md5_digest": "ee77df9b1e9fb1cd13c3f520f5fed823", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12677, "upload_time": "2020-03-12T11:04:43", "upload_time_iso_8601": "2020-03-12T11:04:43.230788Z", "url": "https://files.pythonhosted.org/packages/5c/85/583e61102606c90d25ccc720536278db59c9a7d277afdde5533ec7bc63ba/embrace-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "06d4341828e89cc081516b2b6278b6e7", "sha256": "c73c94a5f578a5a09c8788a3261d41cfcb608d46dff721bc905125e32f2c70b2"}, "downloads": -1, "filename": "embrace-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "06d4341828e89cc081516b2b6278b6e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16901, "upload_time": "2020-04-08T19:32:48", "upload_time_iso_8601": "2020-04-08T19:32:48.251287Z", "url": "https://files.pythonhosted.org/packages/73/44/3f6b410b14b5bead79d374b53823d5fb96dbf1ad538a51483cb9aa923299/embrace-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6104c74832e457a10d41a2e1ce4cfe9e", "sha256": "98e7517870e27da4cc035f9d5955946cc0954ba21a731041eddd243bfeda62cb"}, "downloads": -1, "filename": "embrace-2.1.0.tar.gz", "has_sig": false, "md5_digest": "6104c74832e457a10d41a2e1ce4cfe9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13470, "upload_time": "2020-04-08T19:32:50", "upload_time_iso_8601": "2020-04-08T19:32:50.150939Z", "url": "https://files.pythonhosted.org/packages/16/4e/bfefba700c5b6bde814065d2fb7937d8ae20516ac47020bb55d3187de977/embrace-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06d4341828e89cc081516b2b6278b6e7", "sha256": "c73c94a5f578a5a09c8788a3261d41cfcb608d46dff721bc905125e32f2c70b2"}, "downloads": -1, "filename": "embrace-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "06d4341828e89cc081516b2b6278b6e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16901, "upload_time": "2020-04-08T19:32:48", "upload_time_iso_8601": "2020-04-08T19:32:48.251287Z", "url": "https://files.pythonhosted.org/packages/73/44/3f6b410b14b5bead79d374b53823d5fb96dbf1ad538a51483cb9aa923299/embrace-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6104c74832e457a10d41a2e1ce4cfe9e", "sha256": "98e7517870e27da4cc035f9d5955946cc0954ba21a731041eddd243bfeda62cb"}, "downloads": -1, "filename": "embrace-2.1.0.tar.gz", "has_sig": false, "md5_digest": "6104c74832e457a10d41a2e1ce4cfe9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13470, "upload_time": "2020-04-08T19:32:50", "upload_time_iso_8601": "2020-04-08T19:32:50.150939Z", "url": "https://files.pythonhosted.org/packages/16/4e/bfefba700c5b6bde814065d2fb7937d8ae20516ac47020bb55d3187de977/embrace-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:39 2020"}