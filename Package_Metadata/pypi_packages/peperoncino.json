{"info": {"author": "Junki Ishikawa", "author_email": "69guitar1015@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# peperoncino: A library for easy data processing for pandas\n\n## Install\n\n```\n$ pip install peperoncino\n```\n\n## How to use\n\n### Processing DataFrame\n```python\nimport peperoncino as pp\n\npipeline = pp.Pipeline(\n    # query data\n    pp.Query(\"bar <= 3\"),\n    # assign new feature\n    pp.Assign(hoge=\"foo * bar\"),\n    # generate combination feature\n    pp.Combinations([\"foo\", \"baz\"], [\"*\", \"/\"]),\n    # target encoding\n    pp.TargetEncoding([\"baz\"], \"y\", ref=0),\n    # select features\n    pp.Select(\n        [\"hoge\", \"*_foo_baz\", \"TARGET_ENC_baz_BY_y\", \"y\"],\n        lackable_cols=[\"y\"],\n    )\n)\n\n# execute the processing\ntrain_df, val_df, test_df = \\\n    pipeline.process([train_df, val_df, test_df])\n```\n\n### Predefined processings\n\n| name | description |\n| :--- | :---------- |\n| `ApplyColumn` | Apply a function to a column. |\n| `AsCategory` | Assign `category` dtype to columns. |\n| `Assign` | Assign a feature by a formula. |\n| `Combinations` | Create combination features. |\n| `DropColumns` | Drop columns. |\n| `DropDuplicates` | Drop duplicate rows. |\n| `Pipeline` | Chain processings. |\n| `Query` | Query rows by a given condition. |\n| `RenameCOlumns` | Rename columns. |\n| `Select` | Select columns. |\n| `StatsEncoding` | Encode columns by statistical values of another column. |\n| `TargetEncoding` | Target Encoding with smoothing. |\n\n### Define processing\nAll processings are subclass of `pp.BaseProcessing`.  \nAll you need is define the `_process(self, dfs: List[pd.DataFrame]) -> List[pd.DataFrame]` function.\n\n```python\nclass ExampleProcessing(pp.BaseProcessing):\n    def _process(self, dfs: List[pd.DataFrame]) -> List[pd.DataFrame]:\n        return [df + 1 for df in dfs]\n```\n\nIf your processing doesn't depent on each other data frames, then use `pp.SeparatedProcessing`.\n\n```python\nclass ExampleProcessing(pp.SeparatedProcessing):\n    def sep_process(self, df: pd.DataFrame) -> pd.DataFrame:\n        return df * 2\n```\n\nIf you need to merge all dataframes and then apply your processing, use `pp.MergedProcessing`.\n\n```python\nclass ExampleProcessing(pp.SeparatedProcessing):\n    def simul_process(self, df: pd.DataFrame) -> pd.DataFrame:\n        return df.assign(col1_mean=df['col1'].mean())\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "peperoncino", "package_url": "https://pypi.org/project/peperoncino/", "platform": "", "project_url": "https://pypi.org/project/peperoncino/", "project_urls": null, "release_url": "https://pypi.org/project/peperoncino/0.0.5/", "requires_dist": ["numpy (>=1.17,<2.0)", "pandas (>=0.25.3,<0.26.0)", "pyyaml (>=5.1,<6.0)"], "requires_python": ">=3.\uff17,<4.0", "summary": "peperoncino: A library for easy data processing for pandas", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>peperoncino: A library for easy data processing for pandas</h1>\n<h2>Install</h2>\n<pre><code>$ pip install peperoncino\n</code></pre>\n<h2>How to use</h2>\n<h3>Processing DataFrame</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">peperoncino</span> <span class=\"k\">as</span> <span class=\"nn\">pp</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n    <span class=\"c1\"># query data</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"s2\">\"bar &lt;= 3\"</span><span class=\"p\">),</span>\n    <span class=\"c1\"># assign new feature</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"n\">hoge</span><span class=\"o\">=</span><span class=\"s2\">\"foo * bar\"</span><span class=\"p\">),</span>\n    <span class=\"c1\"># generate combination feature</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">Combinations</span><span class=\"p\">([</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"baz\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/\"</span><span class=\"p\">]),</span>\n    <span class=\"c1\"># target encoding</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">TargetEncoding</span><span class=\"p\">([</span><span class=\"s2\">\"baz\"</span><span class=\"p\">],</span> <span class=\"s2\">\"y\"</span><span class=\"p\">,</span> <span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"c1\"># select features</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">Select</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"hoge\"</span><span class=\"p\">,</span> <span class=\"s2\">\"*_foo_baz\"</span><span class=\"p\">,</span> <span class=\"s2\">\"TARGET_ENC_baz_BY_y\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">],</span>\n        <span class=\"n\">lackable_cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"y\"</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># execute the processing</span>\n<span class=\"n\">train_df</span><span class=\"p\">,</span> <span class=\"n\">val_df</span><span class=\"p\">,</span> <span class=\"n\">test_df</span> <span class=\"o\">=</span> \\\n    <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">([</span><span class=\"n\">train_df</span><span class=\"p\">,</span> <span class=\"n\">val_df</span><span class=\"p\">,</span> <span class=\"n\">test_df</span><span class=\"p\">])</span>\n</pre>\n<h3>Predefined processings</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">name</th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>ApplyColumn</code></td>\n<td align=\"left\">Apply a function to a column.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>AsCategory</code></td>\n<td align=\"left\">Assign <code>category</code> dtype to columns.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Assign</code></td>\n<td align=\"left\">Assign a feature by a formula.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Combinations</code></td>\n<td align=\"left\">Create combination features.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DropColumns</code></td>\n<td align=\"left\">Drop columns.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DropDuplicates</code></td>\n<td align=\"left\">Drop duplicate rows.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Pipeline</code></td>\n<td align=\"left\">Chain processings.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Query</code></td>\n<td align=\"left\">Query rows by a given condition.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>RenameCOlumns</code></td>\n<td align=\"left\">Rename columns.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Select</code></td>\n<td align=\"left\">Select columns.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>StatsEncoding</code></td>\n<td align=\"left\">Encode columns by statistical values of another column.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>TargetEncoding</code></td>\n<td align=\"left\">Target Encoding with smoothing.</td>\n</tr></tbody></table>\n<h3>Define processing</h3>\n<p>All processings are subclass of <code>pp.BaseProcessing</code>.<br>\nAll you need is define the <code>_process(self, dfs: List[pd.DataFrame]) -&gt; List[pd.DataFrame]</code> function.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleProcessing</span><span class=\"p\">(</span><span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">BaseProcessing</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dfs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">df</span> <span class=\"ow\">in</span> <span class=\"n\">dfs</span><span class=\"p\">]</span>\n</pre>\n<p>If your processing doesn't depent on each other data frames, then use <code>pp.SeparatedProcessing</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleProcessing</span><span class=\"p\">(</span><span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">SeparatedProcessing</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sep_process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n</pre>\n<p>If you need to merge all dataframes and then apply your processing, use <code>pp.MergedProcessing</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleProcessing</span><span class=\"p\">(</span><span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">SeparatedProcessing</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">simul_process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">col1_mean</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'col1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 6439762, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d08d0417be3e2e1f4f8eed63e77bff06", "sha256": "aa3f9eeed32cc665868c21fc2843a7a1eec6e5b0de7ef79ddc5443706eb5e95d"}, "downloads": -1, "filename": "peperoncino-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d08d0417be3e2e1f4f8eed63e77bff06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.\uff17,<4.0", "size": 12236, "upload_time": "2019-11-16T14:03:59", "upload_time_iso_8601": "2019-11-16T14:03:59.675856Z", "url": "https://files.pythonhosted.org/packages/9c/28/da491faa758425154e496559a1bce073ff7dfd677323e4f360c4830d9529/peperoncino-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7a81084ddbf3953d53120a46dc7d6e1", "sha256": "3367bc9fd61f63f9c5c3d4796232586da048ee9227a9b52db6c43b4c2099db38"}, "downloads": -1, "filename": "peperoncino-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b7a81084ddbf3953d53120a46dc7d6e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.\uff17,<4.0", "size": 7243, "upload_time": "2019-11-16T14:04:01", "upload_time_iso_8601": "2019-11-16T14:04:01.961837Z", "url": "https://files.pythonhosted.org/packages/12/e1/b127d4f7a4fd930f2a9023aa5246f8ca188793f8d739e6244c881667df95/peperoncino-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "783078640f2a45991d63f2be5c42a9e6", "sha256": "ba9afc3aac17e56e136d16b13d3ebcd622931165bb638a292761b57f46d453a9"}, "downloads": -1, "filename": "peperoncino-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "783078640f2a45991d63f2be5c42a9e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.\uff17,<4.0", "size": 14883, "upload_time": "2019-11-18T05:22:21", "upload_time_iso_8601": "2019-11-18T05:22:21.690013Z", "url": "https://files.pythonhosted.org/packages/b3/f1/20b069f3078152de6279b68103a7173cafbc09b94c02548afbb2d9ad2513/peperoncino-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60d4c71fdab79e8426b266009e3630f5", "sha256": "c87ffc042f71c07a998d537cebdffc65f0f565d3e67c3aaf7f3b5ed5cc073190"}, "downloads": -1, "filename": "peperoncino-0.0.2.tar.gz", "has_sig": false, "md5_digest": "60d4c71fdab79e8426b266009e3630f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.\uff17,<4.0", "size": 9986, "upload_time": "2019-11-18T05:22:22", "upload_time_iso_8601": "2019-11-18T05:22:22.932899Z", "url": "https://files.pythonhosted.org/packages/11/48/d39186a05c98123d358504713cfdcf4a79632467a98a5ade0d75b998589c/peperoncino-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "2477bfc321a8e65eff01fef263953bef", "sha256": "c6912cb6ca92f34a5aed56bc385e08f36884f132c0ba282ef96eadf55e309ab1"}, "downloads": -1, "filename": "peperoncino-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2477bfc321a8e65eff01fef263953bef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.\uff17,<4.0", "size": 15326, "upload_time": "2019-11-18T16:23:56", "upload_time_iso_8601": "2019-11-18T16:23:56.832420Z", "url": "https://files.pythonhosted.org/packages/76/eb/efb84a581217e0b63dc0bac6d797eb90a912540070b4601c20b62163a875/peperoncino-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba4ed6f3034c1f820e1eea484f98bfaf", "sha256": "cc1e206d8f8cf44aff4b23d5a1abe4136568c16b36ee65366c3786e6e5890822"}, "downloads": -1, "filename": "peperoncino-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ba4ed6f3034c1f820e1eea484f98bfaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.\uff17,<4.0", "size": 9910, "upload_time": "2019-11-18T16:23:58", "upload_time_iso_8601": "2019-11-18T16:23:58.376129Z", "url": "https://files.pythonhosted.org/packages/d1/3b/18a9c4f6ac1ca97b170d8c87d76b104a2994f26e19cc996413489cc99315/peperoncino-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "3e4b6c587f33b561d68e35713fdc4ca6", "sha256": "c019a0422a371b38de126d1de072f805a547fe676e82b38f7605e8172aa92fc4"}, "downloads": -1, "filename": "peperoncino-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3e4b6c587f33b561d68e35713fdc4ca6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.\uff17,<4.0", "size": 15431, "upload_time": "2020-01-12T13:37:00", "upload_time_iso_8601": "2020-01-12T13:37:00.678242Z", "url": "https://files.pythonhosted.org/packages/17/0d/b8c96148f06d30dee8861225ea6204d112cbea45fbd880a4312e709033af/peperoncino-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42009a63501a98150de9ebd2fdffca69", "sha256": "f7cc3fb2a4e18278544dedd5590c798f89b01825d76baf1c8cf3e407bcedb1fc"}, "downloads": -1, "filename": "peperoncino-0.0.5.tar.gz", "has_sig": false, "md5_digest": "42009a63501a98150de9ebd2fdffca69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.\uff17,<4.0", "size": 10063, "upload_time": "2020-01-12T13:37:02", "upload_time_iso_8601": "2020-01-12T13:37:02.288217Z", "url": "https://files.pythonhosted.org/packages/a9/33/ed4e3b05e0df6fa5ffccdde07b9a00113eedf3ca2492fac0f3d28ee326b1/peperoncino-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3e4b6c587f33b561d68e35713fdc4ca6", "sha256": "c019a0422a371b38de126d1de072f805a547fe676e82b38f7605e8172aa92fc4"}, "downloads": -1, "filename": "peperoncino-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3e4b6c587f33b561d68e35713fdc4ca6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.\uff17,<4.0", "size": 15431, "upload_time": "2020-01-12T13:37:00", "upload_time_iso_8601": "2020-01-12T13:37:00.678242Z", "url": "https://files.pythonhosted.org/packages/17/0d/b8c96148f06d30dee8861225ea6204d112cbea45fbd880a4312e709033af/peperoncino-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42009a63501a98150de9ebd2fdffca69", "sha256": "f7cc3fb2a4e18278544dedd5590c798f89b01825d76baf1c8cf3e407bcedb1fc"}, "downloads": -1, "filename": "peperoncino-0.0.5.tar.gz", "has_sig": false, "md5_digest": "42009a63501a98150de9ebd2fdffca69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.\uff17,<4.0", "size": 10063, "upload_time": "2020-01-12T13:37:02", "upload_time_iso_8601": "2020-01-12T13:37:02.288217Z", "url": "https://files.pythonhosted.org/packages/a9/33/ed4e3b05e0df6fa5ffccdde07b9a00113eedf3ca2492fac0f3d28ee326b1/peperoncino-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:25 2020"}