{"info": {"author": "Isaac Bernat", "author_email": "isaac.bernat@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Documentation", "Topic :: Software Development", "Topic :: Software Development :: Bug Tracking", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Version Control", "Topic :: Utilities"], "description": "Pycrastinate\r\n=======================\r\n**TODO less, DO more**: *Keep your code clean without changing the way you code.*\r\n\r\nTired of `TODO` from people who have not touched that code in years? What about `FIXME`?\r\n\r\nPycrastinate is a **language-agnostic** tool that helps you keep your codebase (whether it is legacy or new) under control in a transparent way.\r\n\r\nUsage\r\n============\r\nTry it out\r\n----------------\r\nIt simply works out of the box! If you want to run it within another python script do the following:\r\n\r\n*from pycrastinate import pycrastinate*\r\n\r\n*pycrastinate(\"full_path_to_your_config_file/config_name.py\")*\r\n\r\nIf you want to run it as a command line tool just run `python pycrastinate.py path_to_your_config/config.py` inside its root directory and experience the magic. You can get sample config.py and config_not_git.py files from https://github.com/isaacbernat/pycrastinate\r\n\r\nDive in\r\n----------------\r\nPycrastinate was featured in a 25-minute talk in PyCon Sweden 2014. There you can find the PDF and the original version http://2014.pycon.se/ . The slides include real life use-case examples.\r\n\r\nTune it\r\n----------------\r\nCreate your own config file. Change the `root_paths` for whichever paths hold the files you want to analyse, the `file_sufixes` to include only those that you want (e.g. only python files), the `tokens` that should be considered (e.g. `TODO`), their case-sensitivity, etc. and then store it on the root path for pycrastinate. The config name must not have any \".\" besides de final \".py\" and you can use it by running `python pycrastinate.py your_config_name`\r\n\r\nMaster it\r\n----------------\r\nIt is highly encouraged to read at least the succint github documentation and check the slides from PyCon Sweden 2014 if you plan to use pycrastinate seriously.\r\n\r\n\r\nFor more documentation see the homepage.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/isaacbernat/pycrastinate", "keywords": "todo,fixme,xxx,comments,extract,clean,report,creep,git", "license": "None", "maintainer": "", "maintainer_email": "", "name": "pycrastinate", "package_url": "https://pypi.org/project/pycrastinate/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pycrastinate/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/isaacbernat/pycrastinate"}, "release_url": "https://pypi.org/project/pycrastinate/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Keep your TODO, FIXME, etc. under control by triggering actions, generating reports, date/author/custom filtering, automated e-mails and more", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pycrastinate\">\n<h2>Pycrastinate</h2>\n<p><strong>TODO less, DO more</strong>: <em>Keep your code clean without changing the way you code.</em></p>\n<p>Tired of <cite>TODO</cite> from people who have not touched that code in years? What about <cite>FIXME</cite>?</p>\n<p>Pycrastinate is a <strong>language-agnostic</strong> tool that helps you keep your codebase (whether it is legacy or new) under control in a transparent way.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"try-it-out\">\n<h3>Try it out</h3>\n<p>It simply works out of the box! If you want to run it within another python script do the following:</p>\n<p><em>from pycrastinate import pycrastinate</em></p>\n<p><em>pycrastinate(\u201cfull_path_to_your_config_file/config_name.py\u201d)</em></p>\n<p>If you want to run it as a command line tool just run <cite>python pycrastinate.py path_to_your_config/config.py</cite> inside its root directory and experience the magic. You can get sample config.py and config_not_git.py files from <a href=\"https://github.com/isaacbernat/pycrastinate\" rel=\"nofollow\">https://github.com/isaacbernat/pycrastinate</a></p>\n</div>\n<div id=\"dive-in\">\n<h3>Dive in</h3>\n<p>Pycrastinate was featured in a 25-minute talk in PyCon Sweden 2014. There you can find the PDF and the original version <a href=\"http://2014.pycon.se/\" rel=\"nofollow\">http://2014.pycon.se/</a> . The slides include real life use-case examples.</p>\n</div>\n<div id=\"tune-it\">\n<h3>Tune it</h3>\n<p>Create your own config file. Change the <cite>root_paths</cite> for whichever paths hold the files you want to analyse, the <cite>file_sufixes</cite> to include only those that you want (e.g. only python files), the <cite>tokens</cite> that should be considered (e.g. <cite>TODO</cite>), their case-sensitivity, etc. and then store it on the root path for pycrastinate. The config name must not have any \u201c.\u201d besides de final \u201c.py\u201d and you can use it by running <cite>python pycrastinate.py your_config_name</cite></p>\n</div>\n<div id=\"master-it\">\n<h3>Master it</h3>\n<p>It is highly encouraged to read at least the succint github documentation and check the slides from PyCon Sweden 2014 if you plan to use pycrastinate seriously.</p>\n<p>For more documentation see the homepage.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1125736, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4bde7fc47d0943478ff88959073994aa", "sha256": "067d0ff17252d527a50689405dbf1ba96380ef174e7ba2e05dc065fc8bbec0e0"}, "downloads": -1, "filename": "pycrastinate-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4bde7fc47d0943478ff88959073994aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5671, "upload_time": "2014-06-15T19:20:57", "upload_time_iso_8601": "2014-06-15T19:20:57.795263Z", "url": "https://files.pythonhosted.org/packages/3e/df/c9c62c9aecb23824576ac46d996c2f1f5996c1ba6efa9ce4f844e21ed76e/pycrastinate-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4bde7fc47d0943478ff88959073994aa", "sha256": "067d0ff17252d527a50689405dbf1ba96380ef174e7ba2e05dc065fc8bbec0e0"}, "downloads": -1, "filename": "pycrastinate-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4bde7fc47d0943478ff88959073994aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5671, "upload_time": "2014-06-15T19:20:57", "upload_time_iso_8601": "2014-06-15T19:20:57.795263Z", "url": "https://files.pythonhosted.org/packages/3e/df/c9c62c9aecb23824576ac46d996c2f1f5996c1ba6efa9ce4f844e21ed76e/pycrastinate-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:48 2020"}