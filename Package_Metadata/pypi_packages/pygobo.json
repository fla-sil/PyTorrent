{"info": {"author": "Alex Mi\u0142owski", "author_email": "alex@milowski.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Property Graphs for Open Biological Ontologies\nProperty Graphs library for Open Biological and Biomedical Ontologies (OBO) in\nPython. This library supports reading OBO formatted ontologies into python\ndata structures. It also supports generation of cypher statements to load\nthe ontology into a property graph database like RedisGraph.\n\n## Using the command-line interface\n\nThe module can be invoked directly and provides a set of basic commands that\nallow parsing, inspection, cypher statement generation, and loading ontologies.\n\nThe invocation is:\n\n```sh\npython -m pygobo {operation} {file ...}?\n```\n\nwhere `operation` is one of:\n\n   * `parse` - parse the ontology syntax\n   * `cypher` - generate cypher create/merge statements\n   * `load` - load the ontology into a property graph database\n   * `structure` - output the general structure of the ontology\n\nThe operations can be scoped via the `--scope` option that takes the values:\n\n   * `all` - all the components\n   * `ontology` - only the top-level ontology metadata\n   * `term` - only the ontology terms\n   * `xref` - only the cross references\n   * `typedef` - only the type definitions.\n\nThe scope option can be used multiple times to display different items.\n\nIf the file is omitted, the command will read from stdin. Otherwise, each\nfile specified will be read and operated on in the order they are specified.\n\n## Loading ontology property graphs\n\nThe module currently supports loading ontologies directly into [RedisGraph](https://github.com/RedisGraph/RedisGraph).\n\nThe following options can be specified for connecting to the database:\n\n * `--host {name}|{ip}` - the host of the database, defaults to 0.0.0.0\n * `--port {port}` - the port, defaults to 6379\n * `--password {password}` - the database password, default is no password\n * `--graph {key}` - the graph key, defaults to \"obo\"\n\nAdding the `--show-query` option will allow you to see the Cypher statements as\nthey are executed.\n\nThe `--scope` option will limit the loading to a specific aspect of the\nontology but the order is presumed to be: ontology, term, xref, typedef. If you\nviolate this ordering, the cypher statements may fail.\n\n## API\n\n### OBOParser\n\nAn ontology can be easily loaded from a stream source:\n\n```python\nfrom pygobo import OBOParser\nparser = OBOParser()\nwith open('ontology.obo','r') as input:\n   ontology = parser.parse(input)\n```\n\n### Ontology\n\nAn ontology is a simple class with the following fields:\n\n * `metadata` - a dictionary of ontology metadata\n * `terms` - a dictionary of ontology terms\n * `typedefs` - a dictionary of ontology type definitions\n\nSome property values are structured dictionaries, some are tuples, and some\nare simple values.\n\n### Generating Cypher\n\nOnce an ontology is loaded, the `query_generate` function can be used\nto generate cypher load statements. The usage is:\n\n```python\nfor query in query_generate(ontology,scope=['ontology']):\n   print(query)\n   print(';')\n```\n\nThe `scope` keyword argument is a list of scope values. The values are the\nsame as the command-line interface (see above).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alexmilowski/pygobo", "keywords": "obo ontology property graph", "license": "", "maintainer": "", "maintainer_email": "", "name": "pygobo", "package_url": "https://pypi.org/project/pygobo/", "platform": "", "project_url": "https://pypi.org/project/pygobo/", "project_urls": {"Homepage": "https://github.com/alexmilowski/pygobo"}, "release_url": "https://pypi.org/project/pygobo/0.1.1/", "requires_dist": ["lark-parser", "redis", "redisgraph"], "requires_python": ">=3.6", "summary": "Property Graphs for Open Biological and Biomedical Ontologies", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Property Graphs for Open Biological Ontologies</h1>\n<p>Property Graphs library for Open Biological and Biomedical Ontologies (OBO) in\nPython. This library supports reading OBO formatted ontologies into python\ndata structures. It also supports generation of cypher statements to load\nthe ontology into a property graph database like RedisGraph.</p>\n<h2>Using the command-line interface</h2>\n<p>The module can be invoked directly and provides a set of basic commands that\nallow parsing, inspection, cypher statement generation, and loading ontologies.</p>\n<p>The invocation is:</p>\n<pre>python -m pygobo <span class=\"o\">{</span>operation<span class=\"o\">}</span> <span class=\"o\">{</span>file ...<span class=\"o\">}</span>?\n</pre>\n<p>where <code>operation</code> is one of:</p>\n<ul>\n<li><code>parse</code> - parse the ontology syntax</li>\n<li><code>cypher</code> - generate cypher create/merge statements</li>\n<li><code>load</code> - load the ontology into a property graph database</li>\n<li><code>structure</code> - output the general structure of the ontology</li>\n</ul>\n<p>The operations can be scoped via the <code>--scope</code> option that takes the values:</p>\n<ul>\n<li><code>all</code> - all the components</li>\n<li><code>ontology</code> - only the top-level ontology metadata</li>\n<li><code>term</code> - only the ontology terms</li>\n<li><code>xref</code> - only the cross references</li>\n<li><code>typedef</code> - only the type definitions.</li>\n</ul>\n<p>The scope option can be used multiple times to display different items.</p>\n<p>If the file is omitted, the command will read from stdin. Otherwise, each\nfile specified will be read and operated on in the order they are specified.</p>\n<h2>Loading ontology property graphs</h2>\n<p>The module currently supports loading ontologies directly into <a href=\"https://github.com/RedisGraph/RedisGraph\" rel=\"nofollow\">RedisGraph</a>.</p>\n<p>The following options can be specified for connecting to the database:</p>\n<ul>\n<li><code>--host {name}|{ip}</code> - the host of the database, defaults to 0.0.0.0</li>\n<li><code>--port {port}</code> - the port, defaults to 6379</li>\n<li><code>--password {password}</code> - the database password, default is no password</li>\n<li><code>--graph {key}</code> - the graph key, defaults to \"obo\"</li>\n</ul>\n<p>Adding the <code>--show-query</code> option will allow you to see the Cypher statements as\nthey are executed.</p>\n<p>The <code>--scope</code> option will limit the loading to a specific aspect of the\nontology but the order is presumed to be: ontology, term, xref, typedef. If you\nviolate this ordering, the cypher statements may fail.</p>\n<h2>API</h2>\n<h3>OBOParser</h3>\n<p>An ontology can be easily loaded from a stream source:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pygobo</span> <span class=\"kn\">import</span> <span class=\"n\">OBOParser</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">OBOParser</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'ontology.obo'</span><span class=\"p\">,</span><span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nb\">input</span><span class=\"p\">:</span>\n   <span class=\"n\">ontology</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n</pre>\n<h3>Ontology</h3>\n<p>An ontology is a simple class with the following fields:</p>\n<ul>\n<li><code>metadata</code> - a dictionary of ontology metadata</li>\n<li><code>terms</code> - a dictionary of ontology terms</li>\n<li><code>typedefs</code> - a dictionary of ontology type definitions</li>\n</ul>\n<p>Some property values are structured dictionaries, some are tuples, and some\nare simple values.</p>\n<h3>Generating Cypher</h3>\n<p>Once an ontology is loaded, the <code>query_generate</code> function can be used\nto generate cypher load statements. The usage is:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">query</span> <span class=\"ow\">in</span> <span class=\"n\">query_generate</span><span class=\"p\">(</span><span class=\"n\">ontology</span><span class=\"p\">,</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'ontology'</span><span class=\"p\">]):</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">';'</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>scope</code> keyword argument is a list of scope values. The values are the\nsame as the command-line interface (see above).</p>\n\n          </div>"}, "last_serial": 7086021, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fe22bec1c28adb8ea76109ab1bc76d09", "sha256": "4373f5537d66bc708b1eda1240f91776a48cc7e9fd05e1ea38bc67bfacbabe93"}, "downloads": -1, "filename": "pygobo-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fe22bec1c28adb8ea76109ab1bc76d09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7269, "upload_time": "2020-04-23T16:38:12", "upload_time_iso_8601": "2020-04-23T16:38:12.495064Z", "url": "https://files.pythonhosted.org/packages/d6/0f/5c5c0fa57bb07bd9676ab48b18fb58dcb7846824bb44ec797bc9d8abbf33/pygobo-0.1.0-py3-none-any.whl", "yanked": true}, {"comment_text": "", "digests": {"md5": "f25bd3d23ad427415ffdc64fbfbb0c00", "sha256": "608f400501e75f0a5a2b1f4d24966d90d33436489ae40e47e4fa77f91ede2f7a"}, "downloads": -1, "filename": "pygobo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f25bd3d23ad427415ffdc64fbfbb0c00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6164, "upload_time": "2020-04-23T16:38:14", "upload_time_iso_8601": "2020-04-23T16:38:14.530386Z", "url": "https://files.pythonhosted.org/packages/44/3e/a4ebebd5fb3b84d04c1b333718b57648e14683a5f7e06d4c98caeac838fc/pygobo-0.1.0.tar.gz", "yanked": true}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7d55603b41b533d5911007b2856de30b", "sha256": "2a9a34484ce034c7bfca4c421ffb9b12f37895d6f152b1c83ecc50b977e9266c"}, "downloads": -1, "filename": "pygobo-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d55603b41b533d5911007b2856de30b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8345, "upload_time": "2020-04-23T17:07:13", "upload_time_iso_8601": "2020-04-23T17:07:13.718236Z", "url": "https://files.pythonhosted.org/packages/b8/f5/f52f4017ccbb5b6d10fc12b7dea254741389b2d025a55ebe11447cf62c23/pygobo-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fdd84376594d9e1d2fb0858fb4fc050", "sha256": "09d610ecca6c2f4ac10c4040ea10168eea12110ecc3313216e4e95f036b117ff"}, "downloads": -1, "filename": "pygobo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1fdd84376594d9e1d2fb0858fb4fc050", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8463, "upload_time": "2020-04-23T17:07:15", "upload_time_iso_8601": "2020-04-23T17:07:15.307374Z", "url": "https://files.pythonhosted.org/packages/0d/7d/e4a67d360e30660281e96188d7fc546fafcdea50bbbb7e0cf652e01f827c/pygobo-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d55603b41b533d5911007b2856de30b", "sha256": "2a9a34484ce034c7bfca4c421ffb9b12f37895d6f152b1c83ecc50b977e9266c"}, "downloads": -1, "filename": "pygobo-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d55603b41b533d5911007b2856de30b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8345, "upload_time": "2020-04-23T17:07:13", "upload_time_iso_8601": "2020-04-23T17:07:13.718236Z", "url": "https://files.pythonhosted.org/packages/b8/f5/f52f4017ccbb5b6d10fc12b7dea254741389b2d025a55ebe11447cf62c23/pygobo-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fdd84376594d9e1d2fb0858fb4fc050", "sha256": "09d610ecca6c2f4ac10c4040ea10168eea12110ecc3313216e4e95f036b117ff"}, "downloads": -1, "filename": "pygobo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1fdd84376594d9e1d2fb0858fb4fc050", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8463, "upload_time": "2020-04-23T17:07:15", "upload_time_iso_8601": "2020-04-23T17:07:15.307374Z", "url": "https://files.pythonhosted.org/packages/0d/7d/e4a67d360e30660281e96188d7fc546fafcdea50bbbb7e0cf652e01f827c/pygobo-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:48 2020"}