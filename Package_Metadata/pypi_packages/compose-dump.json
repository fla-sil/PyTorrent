{"info": {"author": "Frank Sachsenheim", "author_email": "funkyfuture@riseup.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: System Administrators", "License :: OSI Approved :: ISC License (ISCL)", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Topic :: System :: Archiving :: Backup"], "description": "Overview\n========\n\n::\n\n    This piece of code is tested with only a small number of use-cases yet.\n    You are invited to contribute.\n\n\n``compose-dump`` let's you backup and (not yet) restore `Docker Compose`_\n-projects. Like ``docker-compose`` this tool operates usually in a project-\nfolder. It's intended to be a simple tool for usage within a broader\nbackup-logic. The extent of a backup can be controlled by content scopes and\nservices.\n\nMain features\n-------------\n\n- Archives Docker Compose projects.\n- Optionally include configuration with all its referenced files.\n- Optionally include volumes of specified services.\n- Store dumps in a directory, as archive on disk or as archive to the standard\n  output.\n\n\nSee planned features below.\n\nInstallation\n------------\n\nWith `pipsi`_ (recommended to avoid library version conflicts)::\n\n    $ pipsi install compose-dump\n\nOr with `pip`_::\n\n    $ pip install compose-dump\n\nTo install an editable development instance::\n\n    $ cd compose-dump\n    $ pipsi install -e .  # or use `pip`\n\nUsage\n-----\n\nExamples\n~~~~~~~~\n\nFully dump a compose-project from ``project_path`` to ``/var/backups/compose``::\n\n    $ cd project_path\n    $ compose-dump backup -t /var/backups/compose\n\nWrite a gzip-compressed archive to a remote host via ssh::\n\n    $ cd project_path\n    $ compose-dump backup -x gz | ssh user@host \"cat - > ~/backup.tar.gz\"\n\nOnly dump configuration and data from container-volumes of the service ``web``::\n\n    $ compose-dump backup --config --volumes web\n\nBackup all projects with a ``docker-compose.yml`` to ``/var/backups/compose``::\n\n    $ find . -name \"docker-compose.yml\" -type f -execdir compose-dump backup -t /var/backups/compose \\;\n\nCommand line reference::\n\n    $ compose-dump\n    $ compose-dump backup --help\n\nBackup structure\n~~~~~~~~~~~~~~~~\n\nAny data that is located outside the project's scope is ignored. In\nparticular this are mounted volumes that are not in the project-path or below\nand volumes in ``volumes_from``-referenced containers. Consider this not as\na limitation, but as a feature to endorse good practices; handle these\nobjects in your broader backup-logic.\n\nThe resulting dump is structured this way:\n\n::\n\n    + <hostname>_<project_name>__<shorted_path_hash>___<date>_<time>  # that's the default\n      - Manifest.yml\n      + config\n        - <config_files>\u2026  # Usually docker-compose.yml and its referenced files\n        - <build_contexts>\u2026\n      + volumes\n        + mounted\n          <host path relative to project path>\u2026\n        + project\n          <project volume in a tar archive>\u2026\n        + services\n          + <service>\u2026\n            <service volume in a tar archive>\u2026\n\nContributing\n------------\n\nFork it, report issues and open pull requests at\nhttps://github.com/funkyfuture/compose-dump .\n\nTesting\n~~~~~~~\n\nThe integration tests require a docker client on the test machine. To\nkeep the temporary directories that contain integration tests' results,\ninvoke ``pytest`` with the ``--keep-results`` option.\n\nBefore opening a pull request, make sure you run tests against all supported\ndependencies with ``make test-all``.\n\nYou are free to hate me for relying mainly on integration tests. But\nkeep it to yourself, the world's already filled up with hatred. I\nsuggest anyone with such sentiment uses this dark energy to implement\nimprovements.\n\nStyle notes\n~~~~~~~~~~~\n\nThe code may seem cumbersome when it comes to paths. This is caused by\nanticipation of the `file system path protocol`_ that comes with\nPython 3.6 and later. The rule of thumb here is: Always use\n:class:`pathlib.Path` objects to represent paths, convert values for function\ncalls with :func:`str`, convert results to ``Path`` instances. Until 3.6's\nreign has come.\n\nTODO / Known issues / Caveats\n-----------------------------\n\ngeneral\n~~~~~~~\n\n- make use of compose config hashes\n- docs: point to environment variables regarding tls config\n- make use of mypy\n\nbackup\n~~~~~~\n\nYou may run into issues if a volume's archive delivered by the Docker daemon\nis larger than the available memory. Thus you should avoid such scenarios on\nproduction systems. This does not apply for mounted volumes. If you can't\navoid such cases, please open an issue.\n\n- test volumes defined in extended services\n- filter volumes\n- only pause actually affected services\n- backup-configuration from a file in a project's folder\n- maybe:\n\n  - respect .dockerignore\n  - .backupignore\n  - read config from stdin\n\nrestore\n~~~~~~~\n\n-  implement an automated restoration of a project-dump\n-  read from stdin\n\n\n.. _`Docker Compose`: https://docs.docker.com/compose/\n.. _`file system path protocol`: https://www.python.org/dev/peps/pep-0519/\n.. _`pip`: https://packaging.python.org/installing/#use-pip-for-installing\n.. _`pipsi`: https://github.com/mitsuhiko/pipsi\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://compose-dump.rtfd.io/", "keywords": "docker-compose backup archiving", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "compose-dump", "package_url": "https://pypi.org/project/compose-dump/", "platform": "any", "project_url": "https://pypi.org/project/compose-dump/", "project_urls": {"Homepage": "http://compose-dump.rtfd.io/"}, "release_url": "https://pypi.org/project/compose-dump/0.1b4/", "requires_dist": null, "requires_python": "", "summary": "Backup tool for Docker Compose projects", "version": "0.1b4", "yanked": false, "html_description": "<div class=\"project-description\">\n            Overview<br>========<br><br>::<br><br>    This piece of code is tested with only a small number of use-cases yet.<br>    You are invited to contribute.<br><br><br>``compose-dump`` let's you backup and (not yet) restore `Docker Compose`_<br>-projects. Like ``docker-compose`` this tool operates usually in a project-<br>folder. It's intended to be a simple tool for usage within a broader<br>backup-logic. The extent of a backup can be controlled by content scopes and<br>services.<br><br>Main features<br>-------------<br><br>- Archives Docker Compose projects.<br>- Optionally include configuration with all its referenced files.<br>- Optionally include volumes of specified services.<br>- Store dumps in a directory, as archive on disk or as archive to the standard<br>  output.<br><br><br>See planned features below.<br><br>Installation<br>------------<br><br>With `pipsi`_ (recommended to avoid library version conflicts)::<br><br>    $ pipsi install compose-dump<br><br>Or with `pip`_::<br><br>    $ pip install compose-dump<br><br>To install an editable development instance::<br><br>    $ cd compose-dump<br>    $ pipsi install -e .  # or use `pip`<br><br>Usage<br>-----<br><br>Examples<br>~~~~~~~~<br><br>Fully dump a compose-project from ``project_path`` to ``/var/backups/compose``::<br><br>    $ cd project_path<br>    $ compose-dump backup -t /var/backups/compose<br><br>Write a gzip-compressed archive to a remote host via ssh::<br><br>    $ cd project_path<br>    $ compose-dump backup -x gz | ssh user@host \"cat - &gt; ~/backup.tar.gz\"<br><br>Only dump configuration and data from container-volumes of the service ``web``::<br><br>    $ compose-dump backup --config --volumes web<br><br>Backup all projects with a ``docker-compose.yml`` to ``/var/backups/compose``::<br><br>    $ find . -name \"docker-compose.yml\" -type f -execdir compose-dump backup -t /var/backups/compose \\;<br><br>Command line reference::<br><br>    $ compose-dump<br>    $ compose-dump backup --help<br><br>Backup structure<br>~~~~~~~~~~~~~~~~<br><br>Any data that is located outside the project's scope is ignored. In<br>particular this are mounted volumes that are not in the project-path or below<br>and volumes in ``volumes_from``-referenced containers. Consider this not as<br>a limitation, but as a feature to endorse good practices; handle these<br>objects in your broader backup-logic.<br><br>The resulting dump is structured this way:<br><br>::<br><br>    + &lt;hostname&gt;_&lt;project_name&gt;__&lt;shorted_path_hash&gt;___&lt;date&gt;_&lt;time&gt;  # that's the default<br>      - Manifest.yml<br>      + config<br>        - &lt;config_files&gt;\u2026  # Usually docker-compose.yml and its referenced files<br>        - &lt;build_contexts&gt;\u2026<br>      + volumes<br>        + mounted<br>          &lt;host path relative to project path&gt;\u2026<br>        + project<br>          &lt;project volume in a tar archive&gt;\u2026<br>        + services<br>          + &lt;service&gt;\u2026<br>            &lt;service volume in a tar archive&gt;\u2026<br><br>Contributing<br>------------<br><br>Fork it, report issues and open pull requests at<br>https://github.com/funkyfuture/compose-dump .<br><br>Testing<br>~~~~~~~<br><br>The integration tests require a docker client on the test machine. To<br>keep the temporary directories that contain integration tests' results,<br>invoke ``pytest`` with the ``--keep-results`` option.<br><br>Before opening a pull request, make sure you run tests against all supported<br>dependencies with ``make test-all``.<br><br>You are free to hate me for relying mainly on integration tests. But<br>keep it to yourself, the world's already filled up with hatred. I<br>suggest anyone with such sentiment uses this dark energy to implement<br>improvements.<br><br>Style notes<br>~~~~~~~~~~~<br><br>The code may seem cumbersome when it comes to paths. This is caused by<br>anticipation of the `file system path protocol`_ that comes with<br>Python 3.6 and later. The rule of thumb here is: Always use<br>:class:`pathlib.Path` objects to represent paths, convert values for function<br>calls with :func:`str`, convert results to ``Path`` instances. Until 3.6's<br>reign has come.<br><br>TODO / Known issues / Caveats<br>-----------------------------<br><br>general<br>~~~~~~~<br><br>- make use of compose config hashes<br>- docs: point to environment variables regarding tls config<br>- make use of mypy<br><br>backup<br>~~~~~~<br><br>You may run into issues if a volume's archive delivered by the Docker daemon<br>is larger than the available memory. Thus you should avoid such scenarios on<br>production systems. This does not apply for mounted volumes. If you can't<br>avoid such cases, please open an issue.<br><br>- test volumes defined in extended services<br>- filter volumes<br>- only pause actually affected services<br>- backup-configuration from a file in a project's folder<br>- maybe:<br><br>  - respect .dockerignore<br>  - .backupignore<br>  - read config from stdin<br><br>restore<br>~~~~~~~<br><br>-  implement an automated restoration of a project-dump<br>-  read from stdin<br><br><br>.. _`Docker Compose`: https://docs.docker.com/compose/<br>.. _`file system path protocol`: https://www.python.org/dev/peps/pep-0519/<br>.. _`pip`: https://packaging.python.org/installing/#use-pip-for-installing<br>.. _`pipsi`: https://github.com/mitsuhiko/pipsi<br>\n          </div>"}, "last_serial": 3622772, "releases": {"0.1b1": [{"comment_text": "", "digests": {"md5": "af758cbb8255ad4819bec07e8e2cddc5", "sha256": "b13fb19734943a80ffa323e3a8bf2960ca0e4ad43a64b2449739a38ac442604e"}, "downloads": -1, "filename": "compose_dump-0.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "af758cbb8255ad4819bec07e8e2cddc5", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14037, "upload_time": "2016-12-04T20:51:53", "upload_time_iso_8601": "2016-12-04T20:51:53.354072Z", "url": "https://files.pythonhosted.org/packages/e0/5d/7e3469a610e6110bdd1f4f1df897dc622b65d3bb302b03afbb0da959841f/compose_dump-0.1b1-py3-none-any.whl", "yanked": false}], "0.1b2": [{"comment_text": "", "digests": {"md5": "46fbc8fb1b9e53e5765c5d0b1f7063dd", "sha256": "8d4acc38ab85da78a62bf26d11fd632f5015b0021456b4bd57da24aeb31528c4"}, "downloads": -1, "filename": "compose_dump-0.1b2-py3-none-any.whl", "has_sig": false, "md5_digest": "46fbc8fb1b9e53e5765c5d0b1f7063dd", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14322, "upload_time": "2017-02-11T00:24:10", "upload_time_iso_8601": "2017-02-11T00:24:10.898438Z", "url": "https://files.pythonhosted.org/packages/f6/50/ff2abd5913b066cfe9d3b7953d35274742faee46eb1ec2b1bf42a8cd8cc7/compose_dump-0.1b2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a77f84a58e3ec450fe9e8fc4840be56", "sha256": "f3530e1c157d00ebef79764e3da1cda017f48054778436b163db5e85bfdb712d"}, "downloads": -1, "filename": "compose-dump-0.1b2.tar.gz", "has_sig": false, "md5_digest": "9a77f84a58e3ec450fe9e8fc4840be56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10035, "upload_time": "2017-02-11T00:24:03", "upload_time_iso_8601": "2017-02-11T00:24:03.966913Z", "url": "https://files.pythonhosted.org/packages/d5/a8/3c2ed3c4037fc9767856966789ab75ed2b21f57046648a996a6b303fbdc1/compose-dump-0.1b2.tar.gz", "yanked": false}], "0.1b3": [{"comment_text": "", "digests": {"md5": "cecbccd5c07d7e1b5ef1a70ff8f4c62f", "sha256": "56cfd70b491b0f97d271926c74d5f107466160919058fe575ec03d4c5af4f3da"}, "downloads": -1, "filename": "compose_dump-0.1b3-py3-none-any.whl", "has_sig": false, "md5_digest": "cecbccd5c07d7e1b5ef1a70ff8f4c62f", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14340, "upload_time": "2017-05-08T17:03:25", "upload_time_iso_8601": "2017-05-08T17:03:25.284491Z", "url": "https://files.pythonhosted.org/packages/22/d5/0637c5f9dd7671ef83eb667b208af6ece9b56f2275b6715b5cf67ccea266/compose_dump-0.1b3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0f87f0171a336bdc4eb88451e4dadfd", "sha256": "3e9a0d5620b667a71eafb9352b48a961b093f5879a89aa66b123f04be1d46811"}, "downloads": -1, "filename": "compose-dump-0.1b3.tar.gz", "has_sig": false, "md5_digest": "a0f87f0171a336bdc4eb88451e4dadfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10008, "upload_time": "2017-05-08T17:02:57", "upload_time_iso_8601": "2017-05-08T17:02:57.450533Z", "url": "https://files.pythonhosted.org/packages/83/de/ba92946c653c03c74040b6020b03e2afeacd3a59dbdd03ff3953d390197f/compose-dump-0.1b3.tar.gz", "yanked": false}], "0.1b4": [{"comment_text": "", "digests": {"md5": "05641d39749408d26347a77cde39902f", "sha256": "633591eddb612b6d552055f2bf29c58bade0a040fffc68fad7f6e0d653d75d34"}, "downloads": -1, "filename": "compose_dump-0.1b4-py3-none-any.whl", "has_sig": false, "md5_digest": "05641d39749408d26347a77cde39902f", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14520, "upload_time": "2018-02-27T19:22:37", "upload_time_iso_8601": "2018-02-27T19:22:37.540598Z", "url": "https://files.pythonhosted.org/packages/a4/09/f4bf338a50652bb535cd8c1b02f12c824e2afa2fa59302efaa47c4901792/compose_dump-0.1b4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46496ac13192ed6c35d2e73202253a97", "sha256": "a177b9880f02843ee2c44b93539180b2bcc93c73045c29eef77b878955a5d295"}, "downloads": -1, "filename": "compose-dump-0.1b4.tar.gz", "has_sig": false, "md5_digest": "46496ac13192ed6c35d2e73202253a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10129, "upload_time": "2018-02-27T19:22:35", "upload_time_iso_8601": "2018-02-27T19:22:35.944250Z", "url": "https://files.pythonhosted.org/packages/d7/30/b77adb3ba4612f5d7a2c059004d594f8b856ad113e00a8bcbcf1e8269b4d/compose-dump-0.1b4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "05641d39749408d26347a77cde39902f", "sha256": "633591eddb612b6d552055f2bf29c58bade0a040fffc68fad7f6e0d653d75d34"}, "downloads": -1, "filename": "compose_dump-0.1b4-py3-none-any.whl", "has_sig": false, "md5_digest": "05641d39749408d26347a77cde39902f", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14520, "upload_time": "2018-02-27T19:22:37", "upload_time_iso_8601": "2018-02-27T19:22:37.540598Z", "url": "https://files.pythonhosted.org/packages/a4/09/f4bf338a50652bb535cd8c1b02f12c824e2afa2fa59302efaa47c4901792/compose_dump-0.1b4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46496ac13192ed6c35d2e73202253a97", "sha256": "a177b9880f02843ee2c44b93539180b2bcc93c73045c29eef77b878955a5d295"}, "downloads": -1, "filename": "compose-dump-0.1b4.tar.gz", "has_sig": false, "md5_digest": "46496ac13192ed6c35d2e73202253a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10129, "upload_time": "2018-02-27T19:22:35", "upload_time_iso_8601": "2018-02-27T19:22:35.944250Z", "url": "https://files.pythonhosted.org/packages/d7/30/b77adb3ba4612f5d7a2c059004d594f8b856ad113e00a8bcbcf1e8269b4d/compose-dump-0.1b4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:12 2020"}