{"info": {"author": "Kent Watsen", "author_email": "kent@watsen.net", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: ISC License (ISCL)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# xiax: eXtract or Insert artwork And sourcecode to/from Xml\n\nFree software provided by Kent Watsen (Watsen Networks)\n\n\n## Purpose\n\nTo aid in the construction (and deconstruction) of submittable `xml2rfc`\nv2 [RFC 7749] and v3 [RFC 7991] documents.\n\n  * For authors     : automates common steps.\n  * For reviewers   : ensures correctness and facilitates validations.\n  * For copyeditors : provides safety net for making changes.\n\n```\n  +----------+              +----------+     pack      +---------+\n  |          |    prime     |          | ------------> |         |\n  |  source  | -----------> |  primed  |               |  ready  |\n  |          |              |          | <------------ |         |\n  +----------+              +----------+     unpack    +---------+\n                              |      ^\n                              |      |\n                              +------+\n                              validate\n```\n\n## Installation\n\n    `pip install xiax`\n\n  * Developed on Python 3.7\n  * Tested on Python 3.6, 3.5, 3.4, and 2.7.\n\n## Usage\n\n```\nusage: xiax [-h] [-v] [-d] [-f] source [destination]\n\neXtract or Insert artwork And sourcecode to/from Xml\n\npositional arguments:\n  source         source XML document to extract from or insert into.\n  destination    destination file or directory. If unspecified, then\n                 the current working directory is assumed.\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --version  show version number and exit.\n  -d, --debug    print verbose output to stdout.\n  -f, --force    allow existing files to be overwritten.\n\nExit status code: 0 on success, non-0 on error.  \nDebug output goes to stdout. Error output goes to stderr.\n\n```\n\n\n## Auto-sensing Mode:\n\nThe \"source\" XML file is scanned for an XML comment beginning with the\nstring \"##xiax-block-v1:\".  If this string is found, then extraction\nproceeds, else insertion proceeds.\n\nReferring to the diagram above:\n\n - \"insertion\" refers to both priming and packing.\n - \"extraction\" refers only to unpacking.\n\n\n## Insertion:\n\nInsert local file content from `<artwork>` and `<sourcecode>` elements\ninto \"source\", saving the resulting \"packed\" XML file into as described\nbelow.\n\nThe \"source\" parameter must refer to an XML file containing the `<rfc>`\nelement.  \n\nIf the \"destination\" parameter ends with \".xml\", the argument is used \nto determined both the destination directory, as well as the draft's \nrevision number.  For instance, \"./foo-03.xml\" would set the current\nworking directory to be the destination directory, and \"03\" as the\nrevision number to be used.\n\nIf the \"destination\" parameter is present, but does not end with \".xml\",\nthen the argument is used only to determined the destination directory.\nThe system will try to determine the draft revision number as the next\nlogical `git tag` (see [Git Tagging] below) and, if that doesn't work,\nwill assume \"-00\".  The determined revision number is placed into the\n\"source\" filename, either by replacing \"latest\" with it (if found), or\nby appending it (e.g., both \"foo.xml\" and \"foo-latest.xml\" might result\nin foo-00.xml).\n\nIf the \"destination\" parameter is not provided, then the current working\ndirectory is used (same as if \"./\" had been passed).\n\nIn the source XML file, the `<rfc>` element `docName` attribute may\ninclude the suffix \"-latest\", which will be replaced with the determined\nrevision number.  This is recommended.  The `<rfc>` element should also\ndefined the \"xiax\" prefix (e.g., `xmlns:xiax=\"https://watsen.net/xiax\"`).\n\nIn the source XML file, only `<artwork>` and `<sourcecode>` elements\nhaving a `xiax:src` (for \"source') or `xiax:gen` (for \"generate\")\nattribute are processed (it is an error if both attributes appear for\nthe same element).  Both attributes take a URI, but the URI must specify\na local file under the draft document's directory.\n\nValid \"xiax:src\" attribute examples:\n  - xiax:src=\"ietf-foobar@YYYY-MM-DD.yang\"\n  - xiax:src=\"images/ex-ascii-art.txt\"\n  - xiax:src=\"file:ietf-foobar@YYYY-MM-DD.yang\"\n  - xiax:src=\"file:images/ex-ascii-art.txt\"\n  \nInvalid \"src\" attribute examples:\n  - xiax:src=\"/ex-ascii-art.txt\"\n  - xiax:src=\"c:/ex-ascii-art.txt\"\n  - xiax:src=\"a/../../ex-ascii-art.txt\"\n  - xiax:src=\"file:///ex-ascii-art.txt\"\n  - xiax:src=\"file://c/ex-ascii-art.txt\"\n  - xiax:src=\"file:a/../../ex-ascii-art.txt\"\n\nNotes:\n  * The `xiax:gen` and `xiax:val` attributes have the same pattern.\n  * Any strings containing \"YYYY-MM-DD\" (either in the \"source\" \n    XML file, or in the linked filename or content) will be updated\n    to have the value of the current.\n\nIt is an error if there is preexisting content for the `<artwork>` or \n`<sourcecode>` element.  A solution for inserting \"fallback\" content\nwhile preserving an `xml2rfc` \"src\" attribute to binary (i.e., SVG)\ncontent has yet to be defined.\n\nIn addition to the `xiax:src` and `xiax:gen` attributes, an optional\n`xiax:val` (for \"validate\") attribute may be specified, to define\nparameters for validating the `<artwork>` and `<sourcecode>` element's\ncontent.  Additionally, a `xiax:markers` attribute may be specified\nto wrap the content with the `<CODE BEGINS>` and `<CODE ENDS>` tags\ndescribed in RFC 8407 Section 3.2.\n\nAdditionally, `xiax` will automatically fold any content containing\na line exceeding 69 characters, using the algortihm defined in\ndraft-ietf-netmod-artwork-folding.  (Note: this logic isn't\nimplemented yet).\n\nThe result of the insertion process is the creation of the determined\ndestination XML file in which all `xiax:` prefixed attrbutes in the\n`<rfc>`, `<artwork>`, and `<sourcecode>` elements have been removed,\nand an XML comment beginning with the string \"##xiax-block-v1:\" is\nadded to the end of the XML file.\n \nIt is an error for the destination file to already exist, unless the\n\"force\" flag is specified, in which case the destination file will be\noverwritten. \n\nThe source XML file is never modified.\n\n\n## Extraction:\n\nExtract the content of `<artwork>` and `<sourcecode>` elements, having\nan entry in the \"xiax-block\" comment into the specified extraction\ndirectory.  <!-- Also extract elements having the \"originalSrc\"\nattribute set? -->\n\nIf the \"destination\" parameter ends with \".xml\", the argument is used \nto determined both the extraction directory, as well as the unpacked\ndraft name.  Note: the \"unpacked\" (or \"primed\") XML file is extracted\nonly when the destination parameter ends with \".xml\".\n\nIf the \"destination\" parameter is present, but does not end with \".xml\",\nthen the argument is used only to determined the extraction directory\n(the unpacked draft XML file will not be saved).\n\nIf the \"destination\" parameter is not provided, then the current working\ndirectory is used as the extraction directory.  This is the same as if\n\"./\" were passed.\n\nOnly `<artwork>` and `<sourcecode>` elements having entries in the\n\"xiax-block\" are extracted.  The extracted files are relative to the \nextraction directory.  Subdirectories will be created as needed.\n\nIn addition to the element's content being extracted, all the additional\nfiles used to generate and validate the content are also extracted.\nThis not only includes the files referenced by the `xiax:gen` and\n`xiax:val` attributes, but also any additional local files files\nreferenced by those files.\n\nIt is an error if any file already exists, unless the \"force\" flag is\nspecified, in which case the file will be overwritten. \n\nIt is planned to implement the ability to automatically validate the\n`xiax:src` and `xiax:gen` content, but this is somewhat dependent on\ninput from users, as it may be sufficient the know that the validations\nran authomatically during \"insertion\" and that they may be manually\nrun after the extraction.\n\nThe source XML file is never modified.\n\n\n## Round-tripping\n\nIt is possible to run `xiax` in a loop:\n\n```\n  # xiax -f -s packed-00.xml -d unpacked-00.xml\n  # xiax -f -s unpacked-00.xml -d packed-00.xml\n```\n\n\n## Git Tagging\n\nGit tags should (assuming `git` is being used as the SCM) be used to \ntag milestones.  In the context of authoring documents, the milestones \nare the published versions of the draft in progress.\n\nBy example, assuming that draft-<foo>-03 has already been published, \nwhich implies that 02, 01, and 00 were published before as well, than \n`get tag` should produce the following result in the working directory:\n\n```\n# git tag\ndraft-<foo>-00\ndraft-<foo>-01\ndraft-<foo>-02\ndraft-<foo>-03\n```\n\n\n## Special Support\n\nTypically the \"source\" parameter specifies an `xml2rfc` XML file but, in\norder to support the development of the \"generate\" and \"validate\" files,\nthese XML files MAY be passed as the \"source\" parameter instead, in which\ncase `xiax` just processes the single file.\n\nIf the \"source\" parameter specifies a \"generate\" file, the \"destination\"\nparameter, if passed, will be ignored, as the generated content is sent\nto STDOUT.\n\nIf the \"source\" parameter specifies a \"validate\" file, the \"destination\"\nparameter must specify the relative path to the file to be validated.\n\nRunning `xiax` this way must occur from the draft document's top-level\ndirectory (the current working directory is the document's directory).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kwatsen/xiax", "keywords": "ietf,rfc,artwork,sourcecode,extraction,insertion,folding,unfolding", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "xiax", "package_url": "https://pypi.org/project/xiax/", "platform": "", "project_url": "https://pypi.org/project/xiax/", "project_urls": {"Homepage": "https://github.com/kwatsen/xiax"}, "release_url": "https://pypi.org/project/xiax/0.6.0/", "requires_dist": null, "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "summary": "Extract or insert artwork/sourcecode from/to an `xml2rfc` XML document.", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>xiax: eXtract or Insert artwork And sourcecode to/from Xml</h1>\n<p>Free software provided by Kent Watsen (Watsen Networks)</p>\n<h2>Purpose</h2>\n<p>To aid in the construction (and deconstruction) of submittable <code>xml2rfc</code>\nv2 [RFC 7749] and v3 [RFC 7991] documents.</p>\n<ul>\n<li>For authors     : automates common steps.</li>\n<li>For reviewers   : ensures correctness and facilitates validations.</li>\n<li>For copyeditors : provides safety net for making changes.</li>\n</ul>\n<pre><code>  +----------+              +----------+     pack      +---------+\n  |          |    prime     |          | ------------&gt; |         |\n  |  source  | -----------&gt; |  primed  |               |  ready  |\n  |          |              |          | &lt;------------ |         |\n  +----------+              +----------+     unpack    +---------+\n                              |      ^\n                              |      |\n                              +------+\n                              validate\n</code></pre>\n<h2>Installation</h2>\n<pre><code>`pip install xiax`\n</code></pre>\n<ul>\n<li>Developed on Python 3.7</li>\n<li>Tested on Python 3.6, 3.5, 3.4, and 2.7.</li>\n</ul>\n<h2>Usage</h2>\n<pre><code>usage: xiax [-h] [-v] [-d] [-f] source [destination]\n\neXtract or Insert artwork And sourcecode to/from Xml\n\npositional arguments:\n  source         source XML document to extract from or insert into.\n  destination    destination file or directory. If unspecified, then\n                 the current working directory is assumed.\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --version  show version number and exit.\n  -d, --debug    print verbose output to stdout.\n  -f, --force    allow existing files to be overwritten.\n\nExit status code: 0 on success, non-0 on error.  \nDebug output goes to stdout. Error output goes to stderr.\n\n</code></pre>\n<h2>Auto-sensing Mode:</h2>\n<p>The \"source\" XML file is scanned for an XML comment beginning with the\nstring \"##xiax-block-v1:\".  If this string is found, then extraction\nproceeds, else insertion proceeds.</p>\n<p>Referring to the diagram above:</p>\n<ul>\n<li>\"insertion\" refers to both priming and packing.</li>\n<li>\"extraction\" refers only to unpacking.</li>\n</ul>\n<h2>Insertion:</h2>\n<p>Insert local file content from <code>&lt;artwork&gt;</code> and <code>&lt;sourcecode&gt;</code> elements\ninto \"source\", saving the resulting \"packed\" XML file into as described\nbelow.</p>\n<p>The \"source\" parameter must refer to an XML file containing the <code>&lt;rfc&gt;</code>\nelement.</p>\n<p>If the \"destination\" parameter ends with \".xml\", the argument is used\nto determined both the destination directory, as well as the draft's\nrevision number.  For instance, \"./foo-03.xml\" would set the current\nworking directory to be the destination directory, and \"03\" as the\nrevision number to be used.</p>\n<p>If the \"destination\" parameter is present, but does not end with \".xml\",\nthen the argument is used only to determined the destination directory.\nThe system will try to determine the draft revision number as the next\nlogical <code>git tag</code> (see [Git Tagging] below) and, if that doesn't work,\nwill assume \"-00\".  The determined revision number is placed into the\n\"source\" filename, either by replacing \"latest\" with it (if found), or\nby appending it (e.g., both \"foo.xml\" and \"foo-latest.xml\" might result\nin foo-00.xml).</p>\n<p>If the \"destination\" parameter is not provided, then the current working\ndirectory is used (same as if \"./\" had been passed).</p>\n<p>In the source XML file, the <code>&lt;rfc&gt;</code> element <code>docName</code> attribute may\ninclude the suffix \"-latest\", which will be replaced with the determined\nrevision number.  This is recommended.  The <code>&lt;rfc&gt;</code> element should also\ndefined the \"xiax\" prefix (e.g., <code>xmlns:xiax=\"https://watsen.net/xiax\"</code>).</p>\n<p>In the source XML file, only <code>&lt;artwork&gt;</code> and <code>&lt;sourcecode&gt;</code> elements\nhaving a <code>xiax:src</code> (for \"source') or <code>xiax:gen</code> (for \"generate\")\nattribute are processed (it is an error if both attributes appear for\nthe same element).  Both attributes take a URI, but the URI must specify\na local file under the draft document's directory.</p>\n<p>Valid \"xiax:src\" attribute examples:</p>\n<ul>\n<li>xiax:src=\"<a href=\"mailto:ietf-foobar@YYYY-MM-DD.yang\">ietf-foobar@YYYY-MM-DD.yang</a>\"</li>\n<li>xiax:src=\"images/ex-ascii-art.txt\"</li>\n<li>xiax:src=\"file:<a href=\"mailto:ietf-foobar@YYYY-MM-DD.yang\">ietf-foobar@YYYY-MM-DD.yang</a>\"</li>\n<li>xiax:src=\"file:images/ex-ascii-art.txt\"</li>\n</ul>\n<p>Invalid \"src\" attribute examples:</p>\n<ul>\n<li>xiax:src=\"/ex-ascii-art.txt\"</li>\n<li>xiax:src=\"c:/ex-ascii-art.txt\"</li>\n<li>xiax:src=\"a/../../ex-ascii-art.txt\"</li>\n<li>xiax:src=\"file:///ex-ascii-art.txt\"</li>\n<li>xiax:src=\"file://c/ex-ascii-art.txt\"</li>\n<li>xiax:src=\"file:a/../../ex-ascii-art.txt\"</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>The <code>xiax:gen</code> and <code>xiax:val</code> attributes have the same pattern.</li>\n<li>Any strings containing \"YYYY-MM-DD\" (either in the \"source\"\nXML file, or in the linked filename or content) will be updated\nto have the value of the current.</li>\n</ul>\n<p>It is an error if there is preexisting content for the <code>&lt;artwork&gt;</code> or\n<code>&lt;sourcecode&gt;</code> element.  A solution for inserting \"fallback\" content\nwhile preserving an <code>xml2rfc</code> \"src\" attribute to binary (i.e., SVG)\ncontent has yet to be defined.</p>\n<p>In addition to the <code>xiax:src</code> and <code>xiax:gen</code> attributes, an optional\n<code>xiax:val</code> (for \"validate\") attribute may be specified, to define\nparameters for validating the <code>&lt;artwork&gt;</code> and <code>&lt;sourcecode&gt;</code> element's\ncontent.  Additionally, a <code>xiax:markers</code> attribute may be specified\nto wrap the content with the <code>&lt;CODE BEGINS&gt;</code> and <code>&lt;CODE ENDS&gt;</code> tags\ndescribed in RFC 8407 Section 3.2.</p>\n<p>Additionally, <code>xiax</code> will automatically fold any content containing\na line exceeding 69 characters, using the algortihm defined in\ndraft-ietf-netmod-artwork-folding.  (Note: this logic isn't\nimplemented yet).</p>\n<p>The result of the insertion process is the creation of the determined\ndestination XML file in which all <code>xiax:</code> prefixed attrbutes in the\n<code>&lt;rfc&gt;</code>, <code>&lt;artwork&gt;</code>, and <code>&lt;sourcecode&gt;</code> elements have been removed,\nand an XML comment beginning with the string \"##xiax-block-v1:\" is\nadded to the end of the XML file.</p>\n<p>It is an error for the destination file to already exist, unless the\n\"force\" flag is specified, in which case the destination file will be\noverwritten.</p>\n<p>The source XML file is never modified.</p>\n<h2>Extraction:</h2>\n<p>Extract the content of <code>&lt;artwork&gt;</code> and <code>&lt;sourcecode&gt;</code> elements, having\nan entry in the \"xiax-block\" comment into the specified extraction\ndirectory.  </p>\n<p>If the \"destination\" parameter ends with \".xml\", the argument is used\nto determined both the extraction directory, as well as the unpacked\ndraft name.  Note: the \"unpacked\" (or \"primed\") XML file is extracted\nonly when the destination parameter ends with \".xml\".</p>\n<p>If the \"destination\" parameter is present, but does not end with \".xml\",\nthen the argument is used only to determined the extraction directory\n(the unpacked draft XML file will not be saved).</p>\n<p>If the \"destination\" parameter is not provided, then the current working\ndirectory is used as the extraction directory.  This is the same as if\n\"./\" were passed.</p>\n<p>Only <code>&lt;artwork&gt;</code> and <code>&lt;sourcecode&gt;</code> elements having entries in the\n\"xiax-block\" are extracted.  The extracted files are relative to the\nextraction directory.  Subdirectories will be created as needed.</p>\n<p>In addition to the element's content being extracted, all the additional\nfiles used to generate and validate the content are also extracted.\nThis not only includes the files referenced by the <code>xiax:gen</code> and\n<code>xiax:val</code> attributes, but also any additional local files files\nreferenced by those files.</p>\n<p>It is an error if any file already exists, unless the \"force\" flag is\nspecified, in which case the file will be overwritten.</p>\n<p>It is planned to implement the ability to automatically validate the\n<code>xiax:src</code> and <code>xiax:gen</code> content, but this is somewhat dependent on\ninput from users, as it may be sufficient the know that the validations\nran authomatically during \"insertion\" and that they may be manually\nrun after the extraction.</p>\n<p>The source XML file is never modified.</p>\n<h2>Round-tripping</h2>\n<p>It is possible to run <code>xiax</code> in a loop:</p>\n<pre><code>  # xiax -f -s packed-00.xml -d unpacked-00.xml\n  # xiax -f -s unpacked-00.xml -d packed-00.xml\n</code></pre>\n<h2>Git Tagging</h2>\n<p>Git tags should (assuming <code>git</code> is being used as the SCM) be used to\ntag milestones.  In the context of authoring documents, the milestones\nare the published versions of the draft in progress.</p>\n<p>By example, assuming that draft-&lt;foo&gt;-03 has already been published,\nwhich implies that 02, 01, and 00 were published before as well, than\n<code>get tag</code> should produce the following result in the working directory:</p>\n<pre><code># git tag\ndraft-&lt;foo&gt;-00\ndraft-&lt;foo&gt;-01\ndraft-&lt;foo&gt;-02\ndraft-&lt;foo&gt;-03\n</code></pre>\n<h2>Special Support</h2>\n<p>Typically the \"source\" parameter specifies an <code>xml2rfc</code> XML file but, in\norder to support the development of the \"generate\" and \"validate\" files,\nthese XML files MAY be passed as the \"source\" parameter instead, in which\ncase <code>xiax</code> just processes the single file.</p>\n<p>If the \"source\" parameter specifies a \"generate\" file, the \"destination\"\nparameter, if passed, will be ignored, as the generated content is sent\nto STDOUT.</p>\n<p>If the \"source\" parameter specifies a \"validate\" file, the \"destination\"\nparameter must specify the relative path to the file to be validated.</p>\n<p>Running <code>xiax</code> this way must occur from the draft document's top-level\ndirectory (the current working directory is the document's directory).</p>\n\n          </div>"}, "last_serial": 4866125, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "ff05f7a8b11aa700812fafa7035c6aea", "sha256": "16040e9a67e1c9faa8eb23733d94b818251ef7184167d2f6e97d44be200761e7"}, "downloads": -1, "filename": "xiax-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ff05f7a8b11aa700812fafa7035c6aea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 4311, "upload_time": "2019-01-31T05:13:45", "upload_time_iso_8601": "2019-01-31T05:13:45.871517Z", "url": "https://files.pythonhosted.org/packages/ad/07/070998172677a9225414789e797c1bb61699815faa91dd873a5850d031b5/xiax-0.0.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "7a802e2da2658391f448984c7cf7f480", "sha256": "8ce2409a933422cb02e101c0ce58ff313331189d8406c5efa3d6f5299fab2310"}, "downloads": -1, "filename": "xiax-0.5.3.tar.gz", "has_sig": false, "md5_digest": "7a802e2da2658391f448984c7cf7f480", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 16494, "upload_time": "2019-02-14T23:03:23", "upload_time_iso_8601": "2019-02-14T23:03:23.160136Z", "url": "https://files.pythonhosted.org/packages/57/77/b9bf2171a1592e56bc53027b2cb7cf4ab50ca38f9b5a918dd24bcd8b0b27/xiax-0.5.3.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "7bbb78d08dc1a2d1b3da687c29d7ffeb", "sha256": "4be7d8895d484167e1d86c03cda7e307d14140eeb85ecdaf7434a4553773cfc8"}, "downloads": -1, "filename": "xiax-0.6.0.tar.gz", "has_sig": false, "md5_digest": "7bbb78d08dc1a2d1b3da687c29d7ffeb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 20670, "upload_time": "2019-02-25T18:51:49", "upload_time_iso_8601": "2019-02-25T18:51:49.988140Z", "url": "https://files.pythonhosted.org/packages/fc/9a/5a320d8c1bee38ae32ceb88f196db52de535a7f052cdba0d32cab148f774/xiax-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7bbb78d08dc1a2d1b3da687c29d7ffeb", "sha256": "4be7d8895d484167e1d86c03cda7e307d14140eeb85ecdaf7434a4553773cfc8"}, "downloads": -1, "filename": "xiax-0.6.0.tar.gz", "has_sig": false, "md5_digest": "7bbb78d08dc1a2d1b3da687c29d7ffeb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 20670, "upload_time": "2019-02-25T18:51:49", "upload_time_iso_8601": "2019-02-25T18:51:49.988140Z", "url": "https://files.pythonhosted.org/packages/fc/9a/5a320d8c1bee38ae32ceb88f196db52de535a7f052cdba0d32cab148f774/xiax-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:30 2020"}