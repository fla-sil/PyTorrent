{"info": {"author": "Thibaut Le Page", "author_email": "thilp@thilp.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Umwelt\n\n[dataclasses]: https://docs.python.org/3/library/dataclasses.html\n[pydantic]: https://pydantic-docs.helpmanual.io/\n\nDescribe a configuration schema with [dataclasses][] or [pydantic][] and\nload values from the environment, in a static-typing-friendly way.\n\n## Examples\n\n### Flat\n\n```python\n>>> os.environ[\"APP_HOSTS\"] = '[\"b.org\",\"sky.net\"]'\n>>> os.environ[\"APP_TOKEN\"] = \"very secret\"\n```\n\n```python\nfrom typing import Sequence\nfrom pydantic import SecretStr\nimport umwelt\n\nclass MyConfig:\n    hosts: Sequence[str]\n    token: SecretStr\n    replicas: int = 2\n\nconfig = umwelt.new(MyConfig, prefix=\"app\")\n```\n\n```python\n>>> dataclasses.is_dataclass(config)\nTrue\n>>> config.hosts\n[\"b.org\", \"sky.net\"]\n>>> config.token\nSecretStr('**********')\n>>> config.replicas\n2\n```\n\n### Nested\n\n```python\n>>> os.environ[\"APP_DB_PORT\"] = \"32\"\n```\n\n```python\nfrom __future__ import annotations  # for forward-references\nfrom pydantic import UrlStr\nimport umwelt\n\nclass MyConfig:\n    db: DbConfig\n    host: UrlStr = \"http://b.org\"\n\n@umwelt.subconfig\nclass DbConfig:\n    port: int\n    debug: bool = False\n\nconfig = umwelt.new(MyConfig, prefix=\"app\")\n```\n\n```python\n>>> config.host\n\"http://b.org\"\n>>> config.db.port\n32\n```\n\n## Install\n\n```shell script\n$ pip install umwelt\n```\n\n## Features\n\n### umwelt.new\n\n`umwelt.new` expects one positional argument: the config class to fill.\nUmwelt will convert it into a [dataclass][dataclasses] if it's not one already.\n\n`umwelt.new` also accepts named arguments:\n- **`source`** (by default `os.environ`) is a `Mapping[str, str]` from which\nvalues are extracted.\n- **`prefix`** can be a string or a callable. As a string, it is prepended to\nthe config field's name. As a callable, it receives the config field's name and\nits result is the source key name.\n- **`decoder`** is a callable expecting a type and a string, and returns a\nconversion of that string in that type, or in a type that pydantic can convert\nin that type.\nFor example, when umwelt's default `decoder` is called with (`List[Set[int]]`,\n`\"[[1]]\"`), it simply decodes the string from JSON and hence returns a list of\n_lists_, which pydantic properly converts into a list of _sets_. \n\n### @umwelt.subconfig\n\n`@umwelt.subconfig` tags classes so that, when they appear as field annotations\nin another config class, `umwelt.new` doesn't instantiate them from a single\n`source` value, but rather from one `source` value _per class field_.\n\nExample:\n\n```python\nclass Point:                              # no @subconfig\n    def __init__(self, s: str):           # string input\n        self.x, self.y = s.split(\",\", 1)  # arbitrary implementation\n\nclass MyConf:\n    point: Point\n\nconf = umwelt.new(MyConf, source={\"POINT\": \"1,2\"})  # one source entry\nconf.point  # <Point at 0x7f07b1d04750>\n```\n\n`conf.point` is an instance of _Point_, built by passing the input value `\"1,2\"`\ndirectly to `Point.__new__`.\nThere is only one `source` key: `POINT`.\n\nNow compare with `@umwelt.subconfig`:\n\n```python\n@umwelt.subconfig\nclass Point:\n    x: int\n    y: int\n\nclass MyConf:\n    point: Point\n\nconf = umwelt.new(MyConf, source={\"POINT_X\": \"1\", \"POINT_Y\": \"2\"})\nconf.point  # Point(x=1, y=2)\n```\n\n`conf.point` is still an instance of _Point_ (_Point_ has been made a\ndataclass by Umwelt, hence the automatic `__str__` implementation).\nThere are **two** `source` keys: `POINT_X` and `POINT_Y`, each corresponding to\na field of the _Point_ class.\n\n## Comparison with Ecological\n\nI've used [Ecological][] for a long time.\nToday, a large part of Ecological's codebase implements features already found\nin [dataclasses][] and [pydantic][], which are more mature.\nI believe Ecological's design can be dramatically simplified _and_ improved by\nenforcing a strict separation of concerns:\n\n- class scaffolding is the responsibility of [dataclasses][] (which, compared\n  to metaclasses, is simpler, more introspectable, and comes with helpers like\n  `asdict`);\n- type coercion and validation is the responsibility of [pydantic][] (which has\n  more features, e.g. nested data types, JSON Schema, serialization, etc.);\n- mapping a [pydantic][] schema (the configuration class) to a string-to-string\n  dict (like `os.environ`) is the responsibility of Umwelt.\n\nSome compatibility-breaking decisions prevent from doing this in Ecological:\n\n- Don't autoload configuration values, especially not at class definition time.\n  Instead, offer just one function (`umwelt.new`) that loads the configuration\n  when it is called.\n- Don't tie variable prefixes to configuration classes, as that doesn't play\n  well with nested configurations.\n\n[ecological]: https://github.com/jmcs/ecological\n[autoloading]: https://github.com/jmcs/ecological/issues/20\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thilp/umwelt", "keywords": "", "license": "MIT", "maintainer": "Thibaut Le Page", "maintainer_email": "thilp@thilp.net", "name": "umwelt", "package_url": "https://pypi.org/project/umwelt/", "platform": "", "project_url": "https://pypi.org/project/umwelt/", "project_urls": {"Homepage": "https://github.com/thilp/umwelt", "Repository": "https://github.com/thilp/umwelt"}, "release_url": "https://pypi.org/project/umwelt/2019.8.2/", "requires_dist": ["pydantic (>=0.17,<1)"], "requires_python": ">=3.6,<4.0", "summary": "Configure your program via environment variables, validated by pydantic.", "version": "2019.8.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Umwelt</h1>\n<p>Describe a configuration schema with <a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">dataclasses</a> or <a href=\"https://pydantic-docs.helpmanual.io/\" rel=\"nofollow\">pydantic</a> and\nload values from the environment, in a static-typing-friendly way.</p>\n<h2>Examples</h2>\n<h3>Flat</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"APP_HOSTS\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'[\"b.org\",\"sky.net\"]'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"APP_TOKEN\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"very secret\"</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Sequence</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">SecretStr</span>\n<span class=\"kn\">import</span> <span class=\"nn\">umwelt</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">:</span>\n    <span class=\"n\">hosts</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n    <span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"n\">SecretStr</span>\n    <span class=\"n\">replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">umwelt</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">MyConfig</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"app\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">is_dataclass</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">hosts</span>\n<span class=\"p\">[</span><span class=\"s2\">\"b.org\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sky.net\"</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">token</span>\n<span class=\"n\">SecretStr</span><span class=\"p\">(</span><span class=\"s1\">'**********'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">replicas</span>\n<span class=\"mi\">2</span>\n</pre>\n<h3>Nested</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"APP_DB_PORT\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"32\"</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>  <span class=\"c1\"># for forward-references</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">UrlStr</span>\n<span class=\"kn\">import</span> <span class=\"nn\">umwelt</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">:</span>\n    <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">DbConfig</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">UrlStr</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://b.org\"</span>\n\n<span class=\"nd\">@umwelt</span><span class=\"o\">.</span><span class=\"n\">subconfig</span>\n<span class=\"k\">class</span> <span class=\"nc\">DbConfig</span><span class=\"p\">:</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">umwelt</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">MyConfig</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"app\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">host</span>\n<span class=\"s2\">\"http://b.org\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">port</span>\n<span class=\"mi\">32</span>\n</pre>\n<h2>Install</h2>\n<pre>$ pip install umwelt\n</pre>\n<h2>Features</h2>\n<h3>umwelt.new</h3>\n<p><code>umwelt.new</code> expects one positional argument: the config class to fill.\nUmwelt will convert it into a <a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">dataclass</a> if it's not one already.</p>\n<p><code>umwelt.new</code> also accepts named arguments:</p>\n<ul>\n<li><strong><code>source</code></strong> (by default <code>os.environ</code>) is a <code>Mapping[str, str]</code> from which\nvalues are extracted.</li>\n<li><strong><code>prefix</code></strong> can be a string or a callable. As a string, it is prepended to\nthe config field's name. As a callable, it receives the config field's name and\nits result is the source key name.</li>\n<li><strong><code>decoder</code></strong> is a callable expecting a type and a string, and returns a\nconversion of that string in that type, or in a type that pydantic can convert\nin that type.\nFor example, when umwelt's default <code>decoder</code> is called with (<code>List[Set[int]]</code>,\n<code>\"[[1]]\"</code>), it simply decodes the string from JSON and hence returns a list of\n<em>lists</em>, which pydantic properly converts into a list of <em>sets</em>.</li>\n</ul>\n<h3>@umwelt.subconfig</h3>\n<p><code>@umwelt.subconfig</code> tags classes so that, when they appear as field annotations\nin another config class, <code>umwelt.new</code> doesn't instantiate them from a single\n<code>source</code> value, but rather from one <code>source</code> value <em>per class field</em>.</p>\n<p>Example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">:</span>                              <span class=\"c1\"># no @subconfig</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>           <span class=\"c1\"># string input</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\",\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># arbitrary implementation</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConf</span><span class=\"p\">:</span>\n    <span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"n\">Point</span>\n\n<span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">umwelt</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">MyConf</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"POINT\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1,2\"</span><span class=\"p\">})</span>  <span class=\"c1\"># one source entry</span>\n<span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">point</span>  <span class=\"c1\"># &lt;Point at 0x7f07b1d04750&gt;</span>\n</pre>\n<p><code>conf.point</code> is an instance of <em>Point</em>, built by passing the input value <code>\"1,2\"</code>\ndirectly to <code>Point.__new__</code>.\nThere is only one <code>source</code> key: <code>POINT</code>.</p>\n<p>Now compare with <code>@umwelt.subconfig</code>:</p>\n<pre><span class=\"nd\">@umwelt</span><span class=\"o\">.</span><span class=\"n\">subconfig</span>\n<span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">:</span>\n    <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConf</span><span class=\"p\">:</span>\n    <span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"n\">Point</span>\n\n<span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">umwelt</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">MyConf</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"POINT_X\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"POINT_Y\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2\"</span><span class=\"p\">})</span>\n<span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">point</span>  <span class=\"c1\"># Point(x=1, y=2)</span>\n</pre>\n<p><code>conf.point</code> is still an instance of <em>Point</em> (<em>Point</em> has been made a\ndataclass by Umwelt, hence the automatic <code>__str__</code> implementation).\nThere are <strong>two</strong> <code>source</code> keys: <code>POINT_X</code> and <code>POINT_Y</code>, each corresponding to\na field of the <em>Point</em> class.</p>\n<h2>Comparison with Ecological</h2>\n<p>I've used <a href=\"https://github.com/jmcs/ecological\" rel=\"nofollow\">Ecological</a> for a long time.\nToday, a large part of Ecological's codebase implements features already found\nin <a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">dataclasses</a> and <a href=\"https://pydantic-docs.helpmanual.io/\" rel=\"nofollow\">pydantic</a>, which are more mature.\nI believe Ecological's design can be dramatically simplified <em>and</em> improved by\nenforcing a strict separation of concerns:</p>\n<ul>\n<li>class scaffolding is the responsibility of <a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">dataclasses</a> (which, compared\nto metaclasses, is simpler, more introspectable, and comes with helpers like\n<code>asdict</code>);</li>\n<li>type coercion and validation is the responsibility of <a href=\"https://pydantic-docs.helpmanual.io/\" rel=\"nofollow\">pydantic</a> (which has\nmore features, e.g. nested data types, JSON Schema, serialization, etc.);</li>\n<li>mapping a <a href=\"https://pydantic-docs.helpmanual.io/\" rel=\"nofollow\">pydantic</a> schema (the configuration class) to a string-to-string\ndict (like <code>os.environ</code>) is the responsibility of Umwelt.</li>\n</ul>\n<p>Some compatibility-breaking decisions prevent from doing this in Ecological:</p>\n<ul>\n<li>Don't autoload configuration values, especially not at class definition time.\nInstead, offer just one function (<code>umwelt.new</code>) that loads the configuration\nwhen it is called.</li>\n<li>Don't tie variable prefixes to configuration classes, as that doesn't play\nwell with nested configurations.</li>\n</ul>\n\n          </div>"}, "last_serial": 5722835, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ad8d8cd36a92490a2e1d2fde35fe8d84", "sha256": "f47db5e090f988a88f5e4a75d6519b61adb90d3d10bd4a528f55c2eaeb359e80"}, "downloads": -1, "filename": "umwelt-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ad8d8cd36a92490a2e1d2fde35fe8d84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3457, "upload_time": "2019-08-18T14:36:04", "upload_time_iso_8601": "2019-08-18T14:36:04.579681Z", "url": "https://files.pythonhosted.org/packages/6a/8d/21e95668f5d44e1930b00717b7359ae276c4da27ab43de98064e79523dd8/umwelt-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06a59715959e91ff4d002c1d03835be8", "sha256": "dc1a080d7f239f767582f78ade6054179fa992c0efeac54459eafc7e6a59ce84"}, "downloads": -1, "filename": "umwelt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "06a59715959e91ff4d002c1d03835be8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 2544, "upload_time": "2019-08-18T14:36:06", "upload_time_iso_8601": "2019-08-18T14:36:06.933870Z", "url": "https://files.pythonhosted.org/packages/2c/aa/e66f2fe7db1dc5e4f79e06eff1cbe8672128b8ad316a4e87e9cf6a8c05b7/umwelt-0.1.0.tar.gz", "yanked": false}], "2019.8.1": [{"comment_text": "", "digests": {"md5": "ec15fb7bdcc00b61644741a0005c092b", "sha256": "8d93527aee7bab5c30f2601647404d245953b0bd5b6f2003398f3fdf423cb09f"}, "downloads": -1, "filename": "umwelt-2019.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ec15fb7bdcc00b61644741a0005c092b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5823, "upload_time": "2019-08-20T22:19:14", "upload_time_iso_8601": "2019-08-20T22:19:14.285875Z", "url": "https://files.pythonhosted.org/packages/8f/c0/802797bc29f5a0f6b7a1b0387584064c5199658dd72db71fd2cc1afb89e5/umwelt-2019.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "338ccf9b76c6cb1f0162af5c2edb6525", "sha256": "fada1c46375e6c88533f44de178bae1fbe716d22beb7e8883d1b0b5a90ca4b90"}, "downloads": -1, "filename": "umwelt-2019.8.1.tar.gz", "has_sig": false, "md5_digest": "338ccf9b76c6cb1f0162af5c2edb6525", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5469, "upload_time": "2019-08-20T22:19:16", "upload_time_iso_8601": "2019-08-20T22:19:16.128219Z", "url": "https://files.pythonhosted.org/packages/be/d4/4d0739beb822cf4d6fd89d232684f7abbbfdedbf09412177b5982a26b263/umwelt-2019.8.1.tar.gz", "yanked": false}], "2019.8.2": [{"comment_text": "", "digests": {"md5": "92dc3d5760a614b5fcb46ab7fb75b32a", "sha256": "4e6b8c9aa33324fab9807975051548953f7cc524af5301059028e2f1fc91cf0e"}, "downloads": -1, "filename": "umwelt-2019.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "92dc3d5760a614b5fcb46ab7fb75b32a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6159, "upload_time": "2019-08-23T21:13:39", "upload_time_iso_8601": "2019-08-23T21:13:39.090357Z", "url": "https://files.pythonhosted.org/packages/d3/dc/2fcaa9d72457c2bbcbe0aa6897d3443848044b7d7bcc0ef089b328ed30b2/umwelt-2019.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eae743b4d26b12b2447f38ca92d9c548", "sha256": "72c2c095e3b4aa059fb0082d0e70f117641782b4a35459f6a6fdeef85c873dbf"}, "downloads": -1, "filename": "umwelt-2019.8.2.tar.gz", "has_sig": false, "md5_digest": "eae743b4d26b12b2447f38ca92d9c548", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5863, "upload_time": "2019-08-23T21:13:40", "upload_time_iso_8601": "2019-08-23T21:13:40.829380Z", "url": "https://files.pythonhosted.org/packages/e7/1a/e85037f106b8f6035262b8bd50046c6a0a0a5e56dd6e23b6c32bb378578a/umwelt-2019.8.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92dc3d5760a614b5fcb46ab7fb75b32a", "sha256": "4e6b8c9aa33324fab9807975051548953f7cc524af5301059028e2f1fc91cf0e"}, "downloads": -1, "filename": "umwelt-2019.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "92dc3d5760a614b5fcb46ab7fb75b32a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6159, "upload_time": "2019-08-23T21:13:39", "upload_time_iso_8601": "2019-08-23T21:13:39.090357Z", "url": "https://files.pythonhosted.org/packages/d3/dc/2fcaa9d72457c2bbcbe0aa6897d3443848044b7d7bcc0ef089b328ed30b2/umwelt-2019.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eae743b4d26b12b2447f38ca92d9c548", "sha256": "72c2c095e3b4aa059fb0082d0e70f117641782b4a35459f6a6fdeef85c873dbf"}, "downloads": -1, "filename": "umwelt-2019.8.2.tar.gz", "has_sig": false, "md5_digest": "eae743b4d26b12b2447f38ca92d9c548", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5863, "upload_time": "2019-08-23T21:13:40", "upload_time_iso_8601": "2019-08-23T21:13:40.829380Z", "url": "https://files.pythonhosted.org/packages/e7/1a/e85037f106b8f6035262b8bd50046c6a0a0a5e56dd6e23b6c32bb378578a/umwelt-2019.8.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:01 2020"}