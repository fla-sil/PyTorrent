{"info": {"author": "Muff2n", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "<pre>\n _________________\n< I like connect4 >\n -----------------\n   \\\n   \\   _//| .-~~~-.\n     _/oo  }       }-@\n    ('')_  }       |\n     `--'| { }--{  }\n          //_/  /_/\n</pre>\n\n[Image origination](https://github.com/sckott/cowsay)\n\n# Intro\nUsing reinforcement learning to train an agent to play Connect4 as well as it can. I use a recursive neural network as a value approximator which also outputs a policy of the likely best move in a position. This is combined with a Monte Carlo Marcov Chain tree search to plan the best move.\n\nThis repo is a self-project to learn about reinforcement learning. I hope that other people might also be able to learn from my work. I welcome constructive criticism on absolutely anything from how I could have improved the Machine Learning, python programming, project layout, etc.\n\n# Installation\n`pip install oinkoink`\n\nAlternatively checkout the repo and include the path to project base in your PYTHONPATH. If you checkout the repo you will also have all the misc scripts that I have used, in `oinkoink/scripts`. Be warned that these were Hacked (with a capital H) together. If you use this approach you will need to call the `oinkoink/main.py` script directly when running.\n\n# Usage\n`oinkoink -m [mode] [mode options]`\n\nThere are two modes that can be used. To play a game vs the AI use:\n\n`oinkoink -m game [-n network_file -s simulations]`\n\nThe default simulations is 800, this is the number of positions the AI will analyse before making a move.\nIf a network file is not provided, a pre-trained one provided in `oinkoink/data/example_net.pth` is used. If you change any of the network parameters specified in `oinkoink/neural/config.py:NetConfig` you will need to train your own.\n\n![Gameplay](connect4.png)\n\nTo run a self-play training loop use:\n\n`oinkoink -m training [-c config.py]`\n\nIt is strongly recommended to create a config for yourself following the example of `oinkoink/data/example_config.py`. It is especially important to specify a working directory, everything else can use the default values found in `oinkoink/neural/config.py`.\n\nPlaying a game will run the network on the CPU - typically fast enough. The training loop will make use of a Cuda enabled GPU, and can use multiple processes. A generation of training (game creation + training) takes ~50min using the default settings on my machine [Benchmarks](https://openbenchmarking.org/user/muff2n). The game generation is quite CPU intensive, it is not required to have an amazing GPU. Though you will need to scale down the number of processes/threads if your GPU runs into memory issues.\n\n# Acknowledgements\nThis project is a re-implementation of Deepmind's paper [A general reinforcement learning algorithm that\nmasters chess, shogi and Go through self-play](https://deepmind.com/documents/260/alphazero_preprint.pdf). This is a personal project, so the code isn't commented, etc. as it would be for a group project, and having an understanding of that paper will make things much clearer for a reader.\n\nAnother resource that has covered this that I found useful was [an Oracle blog on medium](https://medium.com/oracledevs/lessons-from-implementing-alphazero-7e36e9054191). This is what I used as a rough guide to follow in selecting Connect4 as a reasonable game, and a few of the changes.\n\nOther useful resources are:\n* [PascalPons' Github](https://github.com/PascalPons/connect4/tree/a0fcfe9e4eacd6194da8ae138a8e554f381be9e0) for having an efficient computational solution for Connect4. I really wish I had seen this before I wrote my own (inferior) implementation.\n* [John's Connect Four Playground](https://tromp.github.io/c4/c4.html).\n* [The dataset I used for evaluation](http://archive.ics.uci.edu/ml/datasets/connect-4).\n* [A lecture series by David Silver on Reinforcement Learning](http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching.html).\n\nFinally I should acknowledge the less glamarous but probably most imporant role that StackOverflow has played.\n\n# Conventions\nA position is scored 1 if it is a win for the first player to move in a game of Connect4 ('player_o') and value 0 if the second player will win ('player_x'). Game tree nodes store the absolute position evaluation, but when querying the node for the value, it will return the relative value to the player querying (i.e. a value of 1 means the player to move will win).\n\n# Notes\nI differ from Deepmind's paper in the following ways:\n* My training is synchronous, it runs after a generation of training games. All the games from the previous max (20, gen/2) generations are used.\n* I 'cheat' and augment my training data with positions reflected in the vertical axis, using the symmetrical nature of connect4.\n* I don't use parallel MCTS, relying instead on parallelising the game playing.\n* I select moves based upon value, rather than visit count.\n** During the exploration moves at the start, I select proportional to the squared value of possible moves, rather than softmax of visit counts.\n* Lots of parameters are different from their suggested values (it is a different game after all).\n\nUser vs AI gameplay has not been optimised in any way; the point of this project is the training process. This functionality has been included for fun.\n\n# Verification of the neural network\n\nAs a test, I trained the network on the evaluation set to see if it was capable of learning the positions. Results are in this [Jupyter Notebook](oinkoink/scripts/verify.ipynb)\n\n# Training\nThe evaluation datasets are found in `oinkoink/data`. The 8ply file has all the positions from the UCI repo, converted into pytorch tensors. I use the RMSE of the position values outputted from my model compared to the theoretical values.\n\nBecause the network also outputs move probabilities, I generated a 7ply dataset where I solve for 'weak' winning moves using the 8ply dataset. Weak because any move the leads to a theoretically winning position is counted as correct, even if it is not the fastest win available. The evaluation loop also tests on these 7ply positions, and as well as the RMSE of the values, it finds the Cross Entropy Loss of the network policy.\n\nHere are the results of an example training run with the default parameters from `oinkoink/neural/config.py` except where overridden by `oinkoink/data/example_config.py` and:\n* Learning Rate was 0.01 (5 training epochs) for 104 generations, then dropped to  0.001 (still 5 epochs per generation)\n<p align=\"center\"><img width=\"50%\" src=\"8ply.png\" /></p>\n<p align=\"center\"><img width=\"50%\" src=\"7ply.png\" /></p>\n\nAnd the results of different generations playing each other, from all 49 possible 2 ply positions, playing both first and second player in each position (98 games). The results represent Row vs Column in W-D-L and return (1 * W + 0.5 * D + 0 * L). The final column shows the average the return over all matches a generation played (5 in total):\n\n| Generation |            40 | 60            | 80            | 100           | 120           | Mean Return |\n|------------|---------------|---------------|---------------|---------------|---------------|-------------|\n|         20 | 19-11-16 0.25 | 16-5-77 0.19  | 19-9-70 0.24  | 14-4-80 0.16  | 5-6-87 0.08   |        0.18 |\n|         40 |               | 30-18-50 0.40 | 21-14-63 0.29 | 27-11-60 0.33 | 30-8-60 0.35  |        0.42 |\n|         60 |               |               | 27-17-54 0.36 | 34-14-50 0.42 | 32-12-54 0.39 |        0.52 |\n|         80 |               |               |               | 39-15-44 0.47 | 33-19-46 0.43 |        0.60 |\n|        100 |               |               |               |               | 34-16-48 0.43 |        0.61 |\n|        120 |               |               |               |               |               |        0.67 |\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/muff2n/connect4", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "oinkoink", "package_url": "https://pypi.org/project/oinkoink/", "platform": "", "project_url": "https://pypi.org/project/oinkoink/", "project_urls": {"Homepage": "http://github.com/muff2n/connect4"}, "release_url": "https://pypi.org/project/oinkoink/1.0.1/", "requires_dist": ["anytree", "matplotlib", "numpy", "pandas", "scipy", "torch", "visdom", "coverage ; extra == 'test'"], "requires_python": ">=3.7", "summary": "A Reinforcement Learning agent plays connect4", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre> _________________\n&lt; I like connect4 &gt;\n -----------------\n   \\\n   \\   _//| .-~~~-.\n     _/oo  }       }-@\n    ('')_  }       |\n     `--'| { }--{  }\n          //_/  /_/\n</pre>\n<p><a href=\"https://github.com/sckott/cowsay\" rel=\"nofollow\">Image origination</a></p>\n<h1>Intro</h1>\n<p>Using reinforcement learning to train an agent to play Connect4 as well as it can. I use a recursive neural network as a value approximator which also outputs a policy of the likely best move in a position. This is combined with a Monte Carlo Marcov Chain tree search to plan the best move.</p>\n<p>This repo is a self-project to learn about reinforcement learning. I hope that other people might also be able to learn from my work. I welcome constructive criticism on absolutely anything from how I could have improved the Machine Learning, python programming, project layout, etc.</p>\n<h1>Installation</h1>\n<p><code>pip install oinkoink</code></p>\n<p>Alternatively checkout the repo and include the path to project base in your PYTHONPATH. If you checkout the repo you will also have all the misc scripts that I have used, in <code>oinkoink/scripts</code>. Be warned that these were Hacked (with a capital H) together. If you use this approach you will need to call the <code>oinkoink/main.py</code> script directly when running.</p>\n<h1>Usage</h1>\n<p><code>oinkoink -m [mode] [mode options]</code></p>\n<p>There are two modes that can be used. To play a game vs the AI use:</p>\n<p><code>oinkoink -m game [-n network_file -s simulations]</code></p>\n<p>The default simulations is 800, this is the number of positions the AI will analyse before making a move.\nIf a network file is not provided, a pre-trained one provided in <code>oinkoink/data/example_net.pth</code> is used. If you change any of the network parameters specified in <code>oinkoink/neural/config.py:NetConfig</code> you will need to train your own.</p>\n<p><img alt=\"Gameplay\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c5b594ac2056442584bafb0d1e360d07e48294d/636f6e6e656374342e706e67\"></p>\n<p>To run a self-play training loop use:</p>\n<p><code>oinkoink -m training [-c config.py]</code></p>\n<p>It is strongly recommended to create a config for yourself following the example of <code>oinkoink/data/example_config.py</code>. It is especially important to specify a working directory, everything else can use the default values found in <code>oinkoink/neural/config.py</code>.</p>\n<p>Playing a game will run the network on the CPU - typically fast enough. The training loop will make use of a Cuda enabled GPU, and can use multiple processes. A generation of training (game creation + training) takes ~50min using the default settings on my machine <a href=\"https://openbenchmarking.org/user/muff2n\" rel=\"nofollow\">Benchmarks</a>. The game generation is quite CPU intensive, it is not required to have an amazing GPU. Though you will need to scale down the number of processes/threads if your GPU runs into memory issues.</p>\n<h1>Acknowledgements</h1>\n<p>This project is a re-implementation of Deepmind's paper <a href=\"https://deepmind.com/documents/260/alphazero_preprint.pdf\" rel=\"nofollow\">A general reinforcement learning algorithm that\nmasters chess, shogi and Go through self-play</a>. This is a personal project, so the code isn't commented, etc. as it would be for a group project, and having an understanding of that paper will make things much clearer for a reader.</p>\n<p>Another resource that has covered this that I found useful was <a href=\"https://medium.com/oracledevs/lessons-from-implementing-alphazero-7e36e9054191\" rel=\"nofollow\">an Oracle blog on medium</a>. This is what I used as a rough guide to follow in selecting Connect4 as a reasonable game, and a few of the changes.</p>\n<p>Other useful resources are:</p>\n<ul>\n<li><a href=\"https://github.com/PascalPons/connect4/tree/a0fcfe9e4eacd6194da8ae138a8e554f381be9e0\" rel=\"nofollow\">PascalPons' Github</a> for having an efficient computational solution for Connect4. I really wish I had seen this before I wrote my own (inferior) implementation.</li>\n<li><a href=\"https://tromp.github.io/c4/c4.html\" rel=\"nofollow\">John's Connect Four Playground</a>.</li>\n<li><a href=\"http://archive.ics.uci.edu/ml/datasets/connect-4\" rel=\"nofollow\">The dataset I used for evaluation</a>.</li>\n<li><a href=\"http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching.html\" rel=\"nofollow\">A lecture series by David Silver on Reinforcement Learning</a>.</li>\n</ul>\n<p>Finally I should acknowledge the less glamarous but probably most imporant role that StackOverflow has played.</p>\n<h1>Conventions</h1>\n<p>A position is scored 1 if it is a win for the first player to move in a game of Connect4 ('player_o') and value 0 if the second player will win ('player_x'). Game tree nodes store the absolute position evaluation, but when querying the node for the value, it will return the relative value to the player querying (i.e. a value of 1 means the player to move will win).</p>\n<h1>Notes</h1>\n<p>I differ from Deepmind's paper in the following ways:</p>\n<ul>\n<li>My training is synchronous, it runs after a generation of training games. All the games from the previous max (20, gen/2) generations are used.</li>\n<li>I 'cheat' and augment my training data with positions reflected in the vertical axis, using the symmetrical nature of connect4.</li>\n<li>I don't use parallel MCTS, relying instead on parallelising the game playing.</li>\n<li>I select moves based upon value, rather than visit count.\n** During the exploration moves at the start, I select proportional to the squared value of possible moves, rather than softmax of visit counts.</li>\n<li>Lots of parameters are different from their suggested values (it is a different game after all).</li>\n</ul>\n<p>User vs AI gameplay has not been optimised in any way; the point of this project is the training process. This functionality has been included for fun.</p>\n<h1>Verification of the neural network</h1>\n<p>As a test, I trained the network on the evaluation set to see if it was capable of learning the positions. Results are in this <a href=\"oinkoink/scripts/verify.ipynb\" rel=\"nofollow\">Jupyter Notebook</a></p>\n<h1>Training</h1>\n<p>The evaluation datasets are found in <code>oinkoink/data</code>. The 8ply file has all the positions from the UCI repo, converted into pytorch tensors. I use the RMSE of the position values outputted from my model compared to the theoretical values.</p>\n<p>Because the network also outputs move probabilities, I generated a 7ply dataset where I solve for 'weak' winning moves using the 8ply dataset. Weak because any move the leads to a theoretically winning position is counted as correct, even if it is not the fastest win available. The evaluation loop also tests on these 7ply positions, and as well as the RMSE of the values, it finds the Cross Entropy Loss of the network policy.</p>\n<p>Here are the results of an example training run with the default parameters from <code>oinkoink/neural/config.py</code> except where overridden by <code>oinkoink/data/example_config.py</code> and:</p>\n<ul>\n<li>Learning Rate was 0.01 (5 training epochs) for 104 generations, then dropped to  0.001 (still 5 epochs per generation)</li>\n</ul>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3c927f2d945576c776af116506e189eed3d8a95/38706c792e706e67\" width=\"50%\"></p>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70464c3321845f77cb4befeaea8c0bdf6a4eb9c8/37706c792e706e67\" width=\"50%\"></p>\n<p>And the results of different generations playing each other, from all 49 possible 2 ply positions, playing both first and second player in each position (98 games). The results represent Row vs Column in W-D-L and return (1 * W + 0.5 * D + 0 * L). The final column shows the average the return over all matches a generation played (5 in total):</p>\n<table>\n<thead>\n<tr>\n<th>Generation</th>\n<th>40</th>\n<th>60</th>\n<th>80</th>\n<th>100</th>\n<th>120</th>\n<th>Mean Return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20</td>\n<td>19-11-16 0.25</td>\n<td>16-5-77 0.19</td>\n<td>19-9-70 0.24</td>\n<td>14-4-80 0.16</td>\n<td>5-6-87 0.08</td>\n<td>0.18</td>\n</tr>\n<tr>\n<td>40</td>\n<td></td>\n<td>30-18-50 0.40</td>\n<td>21-14-63 0.29</td>\n<td>27-11-60 0.33</td>\n<td>30-8-60 0.35</td>\n<td>0.42</td>\n</tr>\n<tr>\n<td>60</td>\n<td></td>\n<td></td>\n<td>27-17-54 0.36</td>\n<td>34-14-50 0.42</td>\n<td>32-12-54 0.39</td>\n<td>0.52</td>\n</tr>\n<tr>\n<td>80</td>\n<td></td>\n<td></td>\n<td></td>\n<td>39-15-44 0.47</td>\n<td>33-19-46 0.43</td>\n<td>0.60</td>\n</tr>\n<tr>\n<td>100</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>34-16-48 0.43</td>\n<td>0.61</td>\n</tr>\n<tr>\n<td>120</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>0.67</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 5540348, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "81a0d3e06f6c38d8a87b6d86a1a6a4b1", "sha256": "ecec0a8be1f00060123cf77243c131f2ea58869fc3a558deda8a361c2b0ecde8"}, "downloads": -1, "filename": "oinkoink-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "81a0d3e06f6c38d8a87b6d86a1a6a4b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1763899, "upload_time": "2019-06-24T09:27:38", "upload_time_iso_8601": "2019-06-24T09:27:38.920274Z", "url": "https://files.pythonhosted.org/packages/ef/f4/245fea50239e5744bad9fcf8a9ce3e07341dab1032781abc288a58103c31/oinkoink-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec2ecabb8b000bf2571ad6b7fa70423d", "sha256": "90b543d46dc7055159a4acd762427c7ea2d84abe1619800403f1a03d8d8c8f2b"}, "downloads": -1, "filename": "oinkoink-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ec2ecabb8b000bf2571ad6b7fa70423d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1318697, "upload_time": "2019-06-24T09:27:51", "upload_time_iso_8601": "2019-06-24T09:27:51.771450Z", "url": "https://files.pythonhosted.org/packages/cc/8e/f560bc7126280c880332367ab89ac5577a88d2015ab93b1063b1ec31d5a3/oinkoink-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b29dece6a2efe729d46e18c553b5ffe0", "sha256": "e4b726c9c39e2fc7752b9c20fe712d7a1ca9acf81f7616748b2d22e5c5a6b2b9"}, "downloads": -1, "filename": "oinkoink-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b29dece6a2efe729d46e18c553b5ffe0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1764453, "upload_time": "2019-07-16T12:45:45", "upload_time_iso_8601": "2019-07-16T12:45:45.904561Z", "url": "https://files.pythonhosted.org/packages/03/60/a99fc920b26a3735a29a412e94da10667cb1f382e92e13102b39a7d6a1f5/oinkoink-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18688b7c12082de5ef207b7563ea3012", "sha256": "711c48b3594532d0eeb8f4482528d87e9386220e90b01e2409b1b1513de3fd43"}, "downloads": -1, "filename": "oinkoink-1.0.1.tar.gz", "has_sig": false, "md5_digest": "18688b7c12082de5ef207b7563ea3012", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1319834, "upload_time": "2019-07-16T12:46:04", "upload_time_iso_8601": "2019-07-16T12:46:04.734297Z", "url": "https://files.pythonhosted.org/packages/56/ea/22d1ab74b54686dce861e67efbd8b6084d0c2426a3e11e9a25bdbc3df2f3/oinkoink-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b29dece6a2efe729d46e18c553b5ffe0", "sha256": "e4b726c9c39e2fc7752b9c20fe712d7a1ca9acf81f7616748b2d22e5c5a6b2b9"}, "downloads": -1, "filename": "oinkoink-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b29dece6a2efe729d46e18c553b5ffe0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1764453, "upload_time": "2019-07-16T12:45:45", "upload_time_iso_8601": "2019-07-16T12:45:45.904561Z", "url": "https://files.pythonhosted.org/packages/03/60/a99fc920b26a3735a29a412e94da10667cb1f382e92e13102b39a7d6a1f5/oinkoink-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18688b7c12082de5ef207b7563ea3012", "sha256": "711c48b3594532d0eeb8f4482528d87e9386220e90b01e2409b1b1513de3fd43"}, "downloads": -1, "filename": "oinkoink-1.0.1.tar.gz", "has_sig": false, "md5_digest": "18688b7c12082de5ef207b7563ea3012", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1319834, "upload_time": "2019-07-16T12:46:04", "upload_time_iso_8601": "2019-07-16T12:46:04.734297Z", "url": "https://files.pythonhosted.org/packages/56/ea/22d1ab74b54686dce861e67efbd8b6084d0c2426a3e11e9a25bdbc3df2f3/oinkoink-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:48 2020"}