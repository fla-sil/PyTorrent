{"info": {"author": "David Ojeda", "author_email": "david.ojeda@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "============\npoetry2conda\n============\n\n.. image:: https://img.shields.io/pypi/v/poetry2conda.svg\n    :target: https://pypi.org/project/poetry2conda/\n.. image:: https://img.shields.io/pypi/l/poetry2conda.svg\n    :target: https://pypi.org/project/poetry2conda/\n\nA script to convert a Python project declared on a pyproject.toml to a conda\nenvironment.\n\nThis is not an attempt to move away from pyproject.toml to conda. It is a tool\nto help teams maintain a single file for dependencies when there are\ncollaborators that prefer regular Python/PyPI and others that prefer conda.\n\nFeatures\n--------\n\n- Set conda channels for each dependency.\n- Rename conda dependencies.\n- Convert tilde and caret dependencies to regular version specifiers.\n- Handle pure pip dependencies.\n\nInstallation\n------------\n\nYou will be able to install poetry2conda by running:\n\n.. code-block:: bash\n\n    $ pip install poetry2conda\n\nUsage\n-----\n\nThe most straightforward use-case for poetry2conda is to convert a pyproject.toml\nthat uses poetry. This can be achieved by adding the following section to your\npyproject.toml:\n\n.. code-block:: toml\n\n    [tool.poetry.dependencies]\n    foo = \"^1.2.3\"\n    # ...\n\n    [tool.poetry2conda]\n    name = \"some-name-env\"\n\nThen, use the command line to create a conda environment file:\n\n.. code-block:: bash\n\n    $ poetry2conda pyproject.toml environment.yaml\n\n    # or if you want to see the contents but not write the file:\n    $ poetry2conda pyproject.toml -\n\nThis will create a yaml file like:\n\n.. code-block:: yaml\n\n    name: some-name-env\n    dependencies:\n      - foo>=1.2.3,<2.0.0\n      # ...\n\nSometimes, a dependency is handled differently on conda. For this case,\nthe section ``tool.poetry2conda.dependencies`` can be used to inform on specific\nchannels, or package names.\n\nFor example, if a dependency should be installed from a specific channel, like\nconda-forge, declare it as follows:\n\n\n.. code-block:: toml\n\n    [tool.poetry.dependencies]\n    foo = \"^1.2.3\"\n    # ...\n\n    [tool.poetry2conda]\n    name = \"my-env-with-channels\"\n\n    [tool.poetry2conda.dependencies]\n    foo = { channel = \"conda-forge\" }\n\nAfter conversion, the yaml file will look like:\n\n.. code-block:: yaml\n\n    name: my-env-with-channels\n    dependencies:\n      - conda-forge::foo>=1.2.3,<2.0.0\n      # ...\n\nSometimes, a package on PyPI does not have the same name on conda\n(why? why not? confusion!). For example, ``tables`` and ``pytables``,\n``docker`` and ``docker-py``. To change the name when converting to a conda\nenvironment file, you can set it as:\n\n.. code-block:: toml\n\n    [tool.poetry.dependencies]\n    docker = \"^4.2.0\"\n    # ...\n\n    [tool.poetry2conda]\n    name = \"another-example\"\n\n    [tool.poetry2conda.dependencies]\n    docker = { name = \"docker-py\" }\n\nThe converted yaml file will look like:\n\n.. code-block:: yaml\n\n    name: another-example\n    dependencies:\n      - docker-py>=4.2.0,<5.0.0\n      # ...\n\nWhen a package does not exist on conda, declare it on the pip channel:\n\n.. code-block:: toml\n\n\n    [tool.poetry.dependencies]\n    quetzal-client = \"^0.5.2\"\n    # ...\n\n    [tool.poetry2conda]\n    name = \"example-with-pip\"\n\n    [tool.poetry2conda.dependencies]\n    quetzal-client = { channel = \"pip\" }\n\nWhich would give:\n\n.. code-block:: yaml\n\n    name: example-with-pip\n    dependencies:\n      - pip\n      - pip:\n        - quetzal-client>=0.5.2,<0.6.0\n\n\nNot all poetry dependency types are supported, only regular ones and git\ndependencies:\n\n.. code-block:: toml\n\n\n    [tool.poetry.dependencies]\n    my_private_lib = { git = \"https://github.com/company/repo.git\", tag = \"v1.2.3\" }\n    # ...\n\n    [tool.poetry2conda]\n    name = \"example-with-git\"\n\nThis is handled like a pure pip dependency:\n\n.. code-block:: yaml\n\n    name: example-with-git\n    dependencies:\n      - pip\n      - pip:\n        - git+https://github.com/company/repo.git@v1.2.3#egg=my_private_lib\n\nPackages with extras are supported on a pyproject.toml, but conda does not\nsupport extras. For the moment, this information is dropped:\n\n.. code-block:: toml\n\n\n    [tool.poetry.dependencies]\n    dask = { extras = [\"bag\"], version = \"^2.15.0\" }\n    # ...\n\n    [tool.poetry2conda]\n    name = \"example-with-extras\"\n\nWhich will be translated to:\n\n.. code-block:: yaml\n\n    name: example-with-extras\n    dependencies:\n      - dask>=2.15.0,<3.0.0\n\n\nContribute\n----------\n\n- Issue Tracker: https://github.com/dojeda/poetry2conda/issues\n- Source Code: https://github.com/dojeda/poetry2conda\n\n\nLicense\n-------\n\nThe project is licensed under the BSD license.\n\n\n\nWhy poetry2conda?\n-----------------\n\nThis part is an opinion.\n\nPython is a great language with great libraries, but environment management has\nbeen notoriously bad. Bad enough to have its own `XKCD comic <https://xkcd.com>`_:\n\n.. image:: https://imgs.xkcd.com/comics/python_environment.png\n  :alt: Python environment bankrupcty.\n  :width: 50%\n  :align: center\n\nThere is a lack of agreement on how and where to declare dependencies.\n``setup.py`` contains abstract dependencies (but only apply to packages), and\n``requirements.txt`` file has concrete dependencies\n(with version specifications). But development dependencies go somewhere else in\n``requirements-dev.txt`` and testing dependencies in ``requirements-test.txt``.\nBecause dependencies are now declared in two or more\nseparate files, this is a burden. Some people read and parse ``requirements-*.txt``\nfiles on their ``setup.py``. Others say that this is a bad practice.\n\nThen, there is the environment management problem. ``virtualenv`` was created a\nlong time ago to isolate environments so you one does end up with the\ndependencies of another project. I do not know why, this was not enough,\n``venv`` was created. And then some other ones that can handle different Python\nversions.\n\nAt some point on this story, a new generation of clever developers brought\nideas from other package managers to improve on how packages, environments, etc.\nshould be managed. ``requirements.txt`` were replaced (in theory) by\n``Pipfile`` and ``Pipfile.lock``. New tools were created to manage packages and\nenvironments, such as Pipenv and poetry, tackling even more problems such as\nvirtual environments, Python versions, and many other distribution problems.\n\nDependencies, environemnts, package managers... this confused a lot of people\n(including me).\n\nEventually, I decided to give the\n`PEP 5128 <https://www.python.org/dev/peps/pep-0518/>`_ and poetry a try.\nIt was not easy: a new markup language, TOML (Tom's Obvious Markup Language,\nwhich has this strange old man smell, like naphtalene, because it looks like\na new INI file). I encountered many new problems with poetry.\nI abandoned many times but always came back because at least it helps me\ndefine my dependencies in only file. After two or three tries, I decided to\nmigrate my code base to poetry and drop the requirement and setup files.\n\nBut wait...\n\nTo add a bit of entropy to the Python situation, a company called Continuum\nAnalytics (later renamed Anaconda) created a *different* Python distribution a\nnd package management, Anaconda (and its less obese brother, Miniconda).\nI think they were tired of the current Python situation, and they were right.\nThey replaced all of the virtual environment problems with their own\nenvironments and they distribute their own packages without using the current\nPython package authority, PyPI. This worked\nwell, in my opinion, because Anaconda distributes compiled versions of some\npackages, giving massive performance improvements in some cases (like NumPy),\nbecause it is easier to setup on Windows,\nbut more importantly because Anaconda was targeted for the\n*scientific computing community* (e.g. data scientists).\n\nCool! I should migrate to conda then! Alas, some people (like me),\nwho used Python before Anaconda ever existed, tried it and got confused.\n\nI have three main problems with conda: First, not all packages are distributed\nby Anaconda, so you eventually need to mix conda and pip to work together. It is\ndifficult to summarize how many problems I have encountered when mixing these\ntwo. Second, every single day I use conda, I ran into problems: maybe something\nwas installed on the root environment (this also happens without conda),\nmaybe I wrote a command the wrong way (errors are often misleading),\nmaybe the command syntax changed recently,\nmaybe my network is slow and that explains why adding a new dependency takes\nages (among other examples). I can go on. Third, I said to myself, if you are\ngoing to use conda, you should go all the way and write packages for their conda\nrepositories. Oh boy, I tried\nthat and it is very complicated and the documentation is so confusing.\nI eventually managed to do it, but I have PTSD.\n\nSo to summarize, I am not convinced by Anaconda, buy I have colleagues or\ncollaborators that do use it. I don't understand why (yes, apparently tensorflow\nis faster with anaconda, sigh...). But I have to admit that conda is not going\nto go anywhere.\n\nThis leaves me in an uncomfortable situation: I want to use poetry, but I don't\nlike forcing others to use it to. And by others I mean my conda friends. I\nsearched for some tool to auto-convert from one to another. Dephell does this,\nbut it does not address all of my use-cases. There is an open issue for some\nof them. I saw that changing dephell was going to be a complicated endeavor,\nso I decided to just write a new tool to do it.\n\nSo that's why poetry2conda exists.\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dojeda/poetry2conda", "keywords": "poetry,anaconda", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "poetry2conda", "package_url": "https://pypi.org/project/poetry2conda/", "platform": "", "project_url": "https://pypi.org/project/poetry2conda/", "project_urls": {"Homepage": "https://github.com/dojeda/poetry2conda", "Repository": "https://github.com/dojeda/poetry2conda"}, "release_url": "https://pypi.org/project/poetry2conda/0.2.0/", "requires_dist": ["toml (>=0.10.0,<0.11.0)", "semantic_version (>=2.8.4,<3.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "Convert pyproject.toml to environment.yaml", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/poetry2conda/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/poetry2conda.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01055b839dfd516acfad57ac85d51f4b254522f3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706f6574727932636f6e64612e737667\"></a>\n<a href=\"https://pypi.org/project/poetry2conda/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/poetry2conda.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e33c76ffdef7d2e7089da76ff068036ee1d08a34/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f706f6574727932636f6e64612e737667\"></a>\n<p>A script to convert a Python project declared on a pyproject.toml to a conda\nenvironment.</p>\n<p>This is not an attempt to move away from pyproject.toml to conda. It is a tool\nto help teams maintain a single file for dependencies when there are\ncollaborators that prefer regular Python/PyPI and others that prefer conda.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Set conda channels for each dependency.</li>\n<li>Rename conda dependencies.</li>\n<li>Convert tilde and caret dependencies to regular version specifiers.</li>\n<li>Handle pure pip dependencies.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You will be able to install poetry2conda by running:</p>\n<pre>$ pip install poetry2conda\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The most straightforward use-case for poetry2conda is to convert a pyproject.toml\nthat uses poetry. This can be achieved by adding the following section to your\npyproject.toml:</p>\n<pre><span class=\"k\">[tool.poetry.dependencies]</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"s\">\"^1.2.3\"</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">[tool.poetry2conda]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"some-name-env\"</span>\n</pre>\n<p>Then, use the command line to create a conda environment file:</p>\n<pre>$ poetry2conda pyproject.toml environment.yaml\n\n<span class=\"c1\"># or if you want to see the contents but not write the file:\n</span>$ poetry2conda pyproject.toml -\n</pre>\n<p>This will create a yaml file like:</p>\n<pre><span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">some-name-env</span>\n<span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">foo&gt;=1.2.3,&lt;2.0.0</span>\n  <span class=\"c1\"># ...</span>\n</pre>\n<p>Sometimes, a dependency is handled differently on conda. For this case,\nthe section <tt>tool.poetry2conda.dependencies</tt> can be used to inform on specific\nchannels, or package names.</p>\n<p>For example, if a dependency should be installed from a specific channel, like\nconda-forge, declare it as follows:</p>\n<pre><span class=\"k\">[tool.poetry.dependencies]</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"s\">\"^1.2.3\"</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">[tool.poetry2conda]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"my-env-with-channels\"</span>\n\n<span class=\"k\">[tool.poetry2conda.dependencies]</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"s\">\"conda-forge\"</span> <span class=\"p\">}</span>\n</pre>\n<p>After conversion, the yaml file will look like:</p>\n<pre><span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">my-env-with-channels</span>\n<span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">conda-forge::foo&gt;=1.2.3,&lt;2.0.0</span>\n  <span class=\"c1\"># ...</span>\n</pre>\n<p>Sometimes, a package on PyPI does not have the same name on conda\n(why? why not? confusion!). For example, <tt>tables</tt> and <tt>pytables</tt>,\n<tt>docker</tt> and <tt><span class=\"pre\">docker-py</span></tt>. To change the name when converting to a conda\nenvironment file, you can set it as:</p>\n<pre><span class=\"k\">[tool.poetry.dependencies]</span>\n<span class=\"n\">docker</span> <span class=\"o\">=</span> <span class=\"s\">\"^4.2.0\"</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">[tool.poetry2conda]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"another-example\"</span>\n\n<span class=\"k\">[tool.poetry2conda.dependencies]</span>\n<span class=\"n\">docker</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"docker-py\"</span> <span class=\"p\">}</span>\n</pre>\n<p>The converted yaml file will look like:</p>\n<pre><span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">another-example</span>\n<span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">docker-py&gt;=4.2.0,&lt;5.0.0</span>\n  <span class=\"c1\"># ...</span>\n</pre>\n<p>When a package does not exist on conda, declare it on the pip channel:</p>\n<pre><span class=\"k\">[tool.poetry.dependencies]</span>\n<span class=\"n\">quetzal-client</span> <span class=\"o\">=</span> <span class=\"s\">\"^0.5.2\"</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">[tool.poetry2conda]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"example-with-pip\"</span>\n\n<span class=\"k\">[tool.poetry2conda.dependencies]</span>\n<span class=\"n\">quetzal-client</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"s\">\"pip\"</span> <span class=\"p\">}</span>\n</pre>\n<p>Which would give:</p>\n<pre><span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">example-with-pip</span>\n<span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">pip</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">pip</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">quetzal-client&gt;=0.5.2,&lt;0.6.0</span>\n</pre>\n<p>Not all poetry dependency types are supported, only regular ones and git\ndependencies:</p>\n<pre><span class=\"k\">[tool.poetry.dependencies]</span>\n<span class=\"n\">my_private_lib</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">git</span> <span class=\"o\">=</span> <span class=\"s\">\"https://github.com/company/repo.git\"</span><span class=\"p\">,</span> <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"s\">\"v1.2.3\"</span> <span class=\"p\">}</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">[tool.poetry2conda]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"example-with-git\"</span>\n</pre>\n<p>This is handled like a pure pip dependency:</p>\n<pre><span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">example-with-git</span>\n<span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">pip</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">pip</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">git+https://github.com/company/repo.git@v1.2.3#egg=my_private_lib</span>\n</pre>\n<p>Packages with extras are supported on a pyproject.toml, but conda does not\nsupport extras. For the moment, this information is dropped:</p>\n<pre><span class=\"k\">[tool.poetry.dependencies]</span>\n<span class=\"n\">dask</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">extras</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bag\"</span><span class=\"p\">],</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"^2.15.0\"</span> <span class=\"p\">}</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">[tool.poetry2conda]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"example-with-extras\"</span>\n</pre>\n<p>Which will be translated to:</p>\n<pre><span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">example-with-extras</span>\n<span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">dask&gt;=2.15.0,&lt;3.0.0</span>\n</pre>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<ul>\n<li>Issue Tracker: <a href=\"https://github.com/dojeda/poetry2conda/issues\" rel=\"nofollow\">https://github.com/dojeda/poetry2conda/issues</a></li>\n<li>Source Code: <a href=\"https://github.com/dojeda/poetry2conda\" rel=\"nofollow\">https://github.com/dojeda/poetry2conda</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The project is licensed under the BSD license.</p>\n</div>\n<div id=\"why-poetry2conda\">\n<h2>Why poetry2conda?</h2>\n<p>This part is an opinion.</p>\n<p>Python is a great language with great libraries, but environment management has\nbeen notoriously bad. Bad enough to have its own <a href=\"https://xkcd.com\" rel=\"nofollow\">XKCD comic</a>:</p>\n<img alt=\"Python environment bankrupcty.\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e2445d5dbe1222a935a2502dadc7e056dac35f3/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f707974686f6e5f656e7669726f6e6d656e742e706e67\" width=\"50%\">\n<p>There is a lack of agreement on how and where to declare dependencies.\n<tt>setup.py</tt> contains abstract dependencies (but only apply to packages), and\n<tt>requirements.txt</tt> file has concrete dependencies\n(with version specifications). But development dependencies go somewhere else in\n<tt><span class=\"pre\">requirements-dev.txt</span></tt> and testing dependencies in <tt><span class=\"pre\">requirements-test.txt</span></tt>.\nBecause dependencies are now declared in two or more\nseparate files, this is a burden. Some people read and parse <tt><span class=\"pre\">requirements-*.txt</span></tt>\nfiles on their <tt>setup.py</tt>. Others say that this is a bad practice.</p>\n<p>Then, there is the environment management problem. <tt>virtualenv</tt> was created a\nlong time ago to isolate environments so you one does end up with the\ndependencies of another project. I do not know why, this was not enough,\n<tt>venv</tt> was created. And then some other ones that can handle different Python\nversions.</p>\n<p>At some point on this story, a new generation of clever developers brought\nideas from other package managers to improve on how packages, environments, etc.\nshould be managed. <tt>requirements.txt</tt> were replaced (in theory) by\n<tt>Pipfile</tt> and <tt>Pipfile.lock</tt>. New tools were created to manage packages and\nenvironments, such as Pipenv and poetry, tackling even more problems such as\nvirtual environments, Python versions, and many other distribution problems.</p>\n<p>Dependencies, environemnts, package managers\u2026 this confused a lot of people\n(including me).</p>\n<p>Eventually, I decided to give the\n<a href=\"https://www.python.org/dev/peps/pep-0518/\" rel=\"nofollow\">PEP 5128</a> and poetry a try.\nIt was not easy: a new markup language, TOML (Tom\u2019s Obvious Markup Language,\nwhich has this strange old man smell, like naphtalene, because it looks like\na new INI file). I encountered many new problems with poetry.\nI abandoned many times but always came back because at least it helps me\ndefine my dependencies in only file. After two or three tries, I decided to\nmigrate my code base to poetry and drop the requirement and setup files.</p>\n<p>But wait\u2026</p>\n<p>To add a bit of entropy to the Python situation, a company called Continuum\nAnalytics (later renamed Anaconda) created a <em>different</em> Python distribution a\nnd package management, Anaconda (and its less obese brother, Miniconda).\nI think they were tired of the current Python situation, and they were right.\nThey replaced all of the virtual environment problems with their own\nenvironments and they distribute their own packages without using the current\nPython package authority, PyPI. This worked\nwell, in my opinion, because Anaconda distributes compiled versions of some\npackages, giving massive performance improvements in some cases (like NumPy),\nbecause it is easier to setup on Windows,\nbut more importantly because Anaconda was targeted for the\n<em>scientific computing community</em> (e.g. data scientists).</p>\n<p>Cool! I should migrate to conda then! Alas, some people (like me),\nwho used Python before Anaconda ever existed, tried it and got confused.</p>\n<p>I have three main problems with conda: First, not all packages are distributed\nby Anaconda, so you eventually need to mix conda and pip to work together. It is\ndifficult to summarize how many problems I have encountered when mixing these\ntwo. Second, every single day I use conda, I ran into problems: maybe something\nwas installed on the root environment (this also happens without conda),\nmaybe I wrote a command the wrong way (errors are often misleading),\nmaybe the command syntax changed recently,\nmaybe my network is slow and that explains why adding a new dependency takes\nages (among other examples). I can go on. Third, I said to myself, if you are\ngoing to use conda, you should go all the way and write packages for their conda\nrepositories. Oh boy, I tried\nthat and it is very complicated and the documentation is so confusing.\nI eventually managed to do it, but I have PTSD.</p>\n<p>So to summarize, I am not convinced by Anaconda, buy I have colleagues or\ncollaborators that do use it. I don\u2019t understand why (yes, apparently tensorflow\nis faster with anaconda, sigh\u2026). But I have to admit that conda is not going\nto go anywhere.</p>\n<p>This leaves me in an uncomfortable situation: I want to use poetry, but I don\u2019t\nlike forcing others to use it to. And by others I mean my conda friends. I\nsearched for some tool to auto-convert from one to another. Dephell does this,\nbut it does not address all of my use-cases. There is an open issue for some\nof them. I saw that changing dephell was going to be a complicated endeavor,\nso I decided to just write a new tool to do it.</p>\n<p>So that\u2019s why poetry2conda exists.</p>\n</div>\n\n          </div>"}, "last_serial": 7161936, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2f708e4a0cdc02614a22910847608e5f", "sha256": "5fec52b609cf28d4c98f48416260d356294ecdf0fe544a025deb0424c12f32dc"}, "downloads": -1, "filename": "poetry2conda-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2f708e4a0cdc02614a22910847608e5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 9077, "upload_time": "2020-04-18T12:46:27", "upload_time_iso_8601": "2020-04-18T12:46:27.701047Z", "url": "https://files.pythonhosted.org/packages/39/ab/b51f308198766c77048ff5b0e82cc7e74fc83848f91315e12e98a12eebf5/poetry2conda-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a51cbf731f9505977966158fb993bb11", "sha256": "f7b9b68779acba33969324f4fd1b852522b0528396da681e34d3892f38fe26b1"}, "downloads": -1, "filename": "poetry2conda-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a51cbf731f9505977966158fb993bb11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 9421, "upload_time": "2020-04-18T12:46:30", "upload_time_iso_8601": "2020-04-18T12:46:30.373931Z", "url": "https://files.pythonhosted.org/packages/69/8d/1a5b210da59909e921b553cd56943d355add38381c08ead448095dea79bb/poetry2conda-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a61328a179be3f993c98c5a9a03bbce1", "sha256": "e435c2033e3ab1ed5cb811310530ca7c3da54b361e4d276b3cbc652c0a3520c1"}, "downloads": -1, "filename": "poetry2conda-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a61328a179be3f993c98c5a9a03bbce1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 9209, "upload_time": "2020-05-04T07:36:04", "upload_time_iso_8601": "2020-05-04T07:36:04.962674Z", "url": "https://files.pythonhosted.org/packages/55/4c/4b2e4353ec7cece3bd2aa275f3f223db7ecc2218a68673d2fd75f6dfd21b/poetry2conda-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e7c234a7664613e051fa77292f358d7", "sha256": "82bb61c94fff4cfe032ba3e75d7639ad9978b52a3a2caf03d6115150778d9716"}, "downloads": -1, "filename": "poetry2conda-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3e7c234a7664613e051fa77292f358d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 9619, "upload_time": "2020-05-04T07:36:06", "upload_time_iso_8601": "2020-05-04T07:36:06.545280Z", "url": "https://files.pythonhosted.org/packages/ba/41/3f3a63796ab43048bef07c77bd07761b97cf44a5ca0e5a94d26b2447e683/poetry2conda-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a61328a179be3f993c98c5a9a03bbce1", "sha256": "e435c2033e3ab1ed5cb811310530ca7c3da54b361e4d276b3cbc652c0a3520c1"}, "downloads": -1, "filename": "poetry2conda-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a61328a179be3f993c98c5a9a03bbce1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 9209, "upload_time": "2020-05-04T07:36:04", "upload_time_iso_8601": "2020-05-04T07:36:04.962674Z", "url": "https://files.pythonhosted.org/packages/55/4c/4b2e4353ec7cece3bd2aa275f3f223db7ecc2218a68673d2fd75f6dfd21b/poetry2conda-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e7c234a7664613e051fa77292f358d7", "sha256": "82bb61c94fff4cfe032ba3e75d7639ad9978b52a3a2caf03d6115150778d9716"}, "downloads": -1, "filename": "poetry2conda-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3e7c234a7664613e051fa77292f358d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 9619, "upload_time": "2020-05-04T07:36:06", "upload_time_iso_8601": "2020-05-04T07:36:06.545280Z", "url": "https://files.pythonhosted.org/packages/ba/41/3f3a63796ab43048bef07c77bd07761b97cf44a5ca0e5a94d26b2447e683/poetry2conda-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:04 2020"}