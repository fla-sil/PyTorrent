{"info": {"author": "Jonathan Lipps", "author_email": "jlipps@cloudgrey.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Test.ai Classifier - Python Client\n\nThe code in this directory defines a client library for use with the [gRPC-based Test.ai classifier server](https://github.com/testdotai/appium-classifier-plugin).\n\n## Installation & Setup\n\n```\npip install testai_classifier\n```\n\n## Usage\n\nThis package exposes a `ClassifierClient` class:\n\n```py\nfrom testai_classifier import ClassifierClient\n```\n\nYou can use it to attempt to match images to a semantic label:\n\n```py\ndef classify():\n    client = ClassifierClient(HOST, PORT)\n    # assume cart_img and menu_img are byte streams as delivered by file.read()\n    # define a mapping between ids and image data\n    data = {'cart': cart_img, 'menu': menu_img}\n\n    # define which label we are looking to match\n    label = 'cart'\n\n    # attempt to match the images with the label\n    # confidence is from 0.0 to 1.0 -- any matches with lower than the specified\n    # confidence are not returned.\n    # allow_weaker_matches specifies whether to return matches that are above\n    # the confidence threshold but whose most confident match was a *different*\n    # label\n    res = client.classify_images(label, data, confidence=0.0, allow_weaker_matches=True)\n\n    # res looks like:\n    # {'cart': {'label': 'cart', 'confidence': 0.9, 'confidence_for_hint': 0.9},\n    #  'menu': {'label': 'menu', 'confidence': 0.9, 'confidence_for_hint': 0.2}}\n\n    # always close the client connection\n    client.close()\n```\n\nYou can also use it in conjunction with a Selenium Python client driver object, to find elements in a web page based on the label:\n\n```py\ndef find_elements():\n    client = ClassifierClient(HOST, PORT)\n\n    driver.get(\"https://test.ai\")\n    els = client.find_elements_matching_label(driver, \"twitter\")\n    els[0].click()\n    assert driver.current_url == \"https://twitter.com/testdotai\"\n\n    client.close()\n```\n\n## Development\n\n* `make install` - install deps (requires Pipenv)\n* `make protogen` - generate python client helpers from .proto file\n* `make clean` - reset generated files\n* `make build` - run setup.py to generate publishable files\n* `make test` - run test suite (also `make unit-test` and `make se-test`)\n* `make publish` - publish to pypi (also `make publish-test`)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/testdotai/classifier-client-python", "keywords": "selenium appium ai ml", "license": "", "maintainer": "", "maintainer_email": "", "name": "testai-classifier", "package_url": "https://pypi.org/project/testai-classifier/", "platform": "", "project_url": "https://pypi.org/project/testai-classifier/", "project_urls": {"Homepage": "https://github.com/testdotai/classifier-client-python"}, "release_url": "https://pypi.org/project/testai-classifier/1.1.0/", "requires_dist": ["grpcio"], "requires_python": ">=3.7", "summary": "This is a client for the Test.ai classifier RPC server, which allows direct use of the classifier via a Python API and also provides a helper method for use with Selenium.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Test.ai Classifier - Python Client</h1>\n<p>The code in this directory defines a client library for use with the <a href=\"https://github.com/testdotai/appium-classifier-plugin\" rel=\"nofollow\">gRPC-based Test.ai classifier server</a>.</p>\n<h2>Installation &amp; Setup</h2>\n<pre><code>pip install testai_classifier\n</code></pre>\n<h2>Usage</h2>\n<p>This package exposes a <code>ClassifierClient</code> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testai_classifier</span> <span class=\"kn\">import</span> <span class=\"n\">ClassifierClient</span>\n</pre>\n<p>You can use it to attempt to match images to a semantic label:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">classify</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ClassifierClient</span><span class=\"p\">(</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">)</span>\n    <span class=\"c1\"># assume cart_img and menu_img are byte streams as delivered by file.read()</span>\n    <span class=\"c1\"># define a mapping between ids and image data</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'cart'</span><span class=\"p\">:</span> <span class=\"n\">cart_img</span><span class=\"p\">,</span> <span class=\"s1\">'menu'</span><span class=\"p\">:</span> <span class=\"n\">menu_img</span><span class=\"p\">}</span>\n\n    <span class=\"c1\"># define which label we are looking to match</span>\n    <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">'cart'</span>\n\n    <span class=\"c1\"># attempt to match the images with the label</span>\n    <span class=\"c1\"># confidence is from 0.0 to 1.0 -- any matches with lower than the specified</span>\n    <span class=\"c1\"># confidence are not returned.</span>\n    <span class=\"c1\"># allow_weaker_matches specifies whether to return matches that are above</span>\n    <span class=\"c1\"># the confidence threshold but whose most confident match was a *different*</span>\n    <span class=\"c1\"># label</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">classify_images</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">confidence</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">allow_weaker_matches</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># res looks like:</span>\n    <span class=\"c1\"># {'cart': {'label': 'cart', 'confidence': 0.9, 'confidence_for_hint': 0.9},</span>\n    <span class=\"c1\">#  'menu': {'label': 'menu', 'confidence': 0.9, 'confidence_for_hint': 0.2}}</span>\n\n    <span class=\"c1\"># always close the client connection</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>You can also use it in conjunction with a Selenium Python client driver object, to find elements in a web page based on the label:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">find_elements</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ClassifierClient</span><span class=\"p\">(</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">)</span>\n\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"https://test.ai\"</span><span class=\"p\">)</span>\n    <span class=\"n\">els</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">find_elements_matching_label</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"s2\">\"twitter\"</span><span class=\"p\">)</span>\n    <span class=\"n\">els</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">current_url</span> <span class=\"o\">==</span> <span class=\"s2\">\"https://twitter.com/testdotai\"</span>\n\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Development</h2>\n<ul>\n<li><code>make install</code> - install deps (requires Pipenv)</li>\n<li><code>make protogen</code> - generate python client helpers from .proto file</li>\n<li><code>make clean</code> - reset generated files</li>\n<li><code>make build</code> - run setup.py to generate publishable files</li>\n<li><code>make test</code> - run test suite (also <code>make unit-test</code> and <code>make se-test</code>)</li>\n<li><code>make publish</code> - publish to pypi (also <code>make publish-test</code>)</li>\n</ul>\n\n          </div>"}, "last_serial": 6340341, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "3b436b950024f8492fb44c77af682935", "sha256": "26518487abbcbc757d81e564700fa055fc8b77afac8e00f5428769b29e34b713"}, "downloads": -1, "filename": "testai_classifier-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b436b950024f8492fb44c77af682935", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10430, "upload_time": "2019-12-20T17:25:47", "upload_time_iso_8601": "2019-12-20T17:25:47.597964Z", "url": "https://files.pythonhosted.org/packages/87/a4/07d541a38a2efe49bb4994d98816f8a1ad03ae865c8cbee282bed65632cd/testai_classifier-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30bee048f5feda023b9bdc9b77ee7154", "sha256": "e8813787be96f0fd3eaa8281d78674ffe646c78f10793090132070fb43f84436"}, "downloads": -1, "filename": "testai_classifier-1.1.0.tar.gz", "has_sig": false, "md5_digest": "30bee048f5feda023b9bdc9b77ee7154", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5882, "upload_time": "2019-12-20T17:25:49", "upload_time_iso_8601": "2019-12-20T17:25:49.707895Z", "url": "https://files.pythonhosted.org/packages/9e/c3/765b8a01e396ea234c1c1fc6c68a39581bd4e7d3b5a8af1e67fcf7456129/testai_classifier-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b436b950024f8492fb44c77af682935", "sha256": "26518487abbcbc757d81e564700fa055fc8b77afac8e00f5428769b29e34b713"}, "downloads": -1, "filename": "testai_classifier-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b436b950024f8492fb44c77af682935", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10430, "upload_time": "2019-12-20T17:25:47", "upload_time_iso_8601": "2019-12-20T17:25:47.597964Z", "url": "https://files.pythonhosted.org/packages/87/a4/07d541a38a2efe49bb4994d98816f8a1ad03ae865c8cbee282bed65632cd/testai_classifier-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30bee048f5feda023b9bdc9b77ee7154", "sha256": "e8813787be96f0fd3eaa8281d78674ffe646c78f10793090132070fb43f84436"}, "downloads": -1, "filename": "testai_classifier-1.1.0.tar.gz", "has_sig": false, "md5_digest": "30bee048f5feda023b9bdc9b77ee7154", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5882, "upload_time": "2019-12-20T17:25:49", "upload_time_iso_8601": "2019-12-20T17:25:49.707895Z", "url": "https://files.pythonhosted.org/packages/9e/c3/765b8a01e396ea234c1c1fc6c68a39581bd4e7d3b5a8af1e67fcf7456129/testai_classifier-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:40 2020"}