{"info": {"author": "Marcos Rosa", "author_email": "marcos.cantor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Topic :: Software Development :: Build Tools"], "description": "+<a href=\"#\"><img src=\"https://user-images.githubusercontent.com/16294901/37826760-892cd0de-2e73-11e8-8ea1-2afc390c2ac0.png\" height=\"300\" align=\"right\"></a>\n# This is a very important project.\n# Sucuri\nSimple and efficient template engine for Python projects inspired by [PugJS](https://pugjs.org)\n\n## Instaling\nInstall and update using [pip](https://pip.pypa.io/en/stable/quickstart/):\n> pip install sucuri\n\n## Creating a Sucuri Template\n- Example of code:\n```\nhtml\n    body\n        h1 Title\n        a(href='#') This is my link\n```\nAs can be seen in the code example above, the sucuri development requires tabulation standardization. We do not determine the number of spaces, but it is necessary to keep the same number of spaces on the left in the whole code, because this quantity will inform if a certain TAG of the HTML will be contained within another one or not. With this, in the example above we will have the following HTML code:\n```\n<html>\n    <body>\n        <h1>Title</h1>\n        <a href=\"#\">This is my link</a>\n    </body>\n</html>\n```\n\n## Using\nTo use sucuri, you need to import the sucuri package into your Python file, the example below is an application that uses the sucuri to render in the [Flask](http://flask.pocoo.org/):\n```\nfrom sucuri import rendering\nfrom flask import Flask, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    template = rendering.template('template.suc')\n \u00a0 \u00a0return render_template_string(template)\n```\n\nAs can be seen in the example above, the template in the example is loaded from a file named `template.suc` which is in the project's root directory, however it could be in any project directory, such as `templates/template.suc` if you include a folder to group the templates. At the first access to the archive, it will take care of storing it in memory, thus making access to information less costly and more efficient. \n\n### Text\nIn sucuri, texts are described in two ways. It can be written after the declaration of the tag such as:\n```\nh1 Title\n```\nResult:\n```\n<h1>Title</h1>\n```\nOr you can type in more than one line using the `|` on the lines that are not the same as the tag, see example:\n```\nh3 Hello!\n    | Text\n    | with\n    | more than\n    | one line\n```\nResult:\n```\n<h3>Hello!\n    Text\n    with\n    more than\n    one line\n</h3>\n```\n\n### Attributes\nJust as in HTML the attributes in the sucuri must be separated by space and unlike the PugJS must be in a row only and can not be separated by commas. They must necessarily be enclosed in parentheses. See examples of the use of attributes below:\n```\na(href='google.com') Google\na(class='button' href='google.com') Google\ndiv(class='div-class')\n```\n- Result:\n```\n<a href=\"google.com\">Google</a>\n<a class=\"button\" href=\"google.com\">Google</a>\n<div class=\"div-class\"></div>\n```\n\n### Rendering of data\nWe already know (seen in the text above) that we can only use the `template('template_name')` function with a simple `.suc` file, however it is possible to pass information through a JSON to the template and the sucuri will automatically render the data in the proper location, see the example below:\n- Sucuri file:\n```\nhtml\n    body\n        h1 Hello {a}\n            | Title\n            | More\n        a(href='#') This is my link\n        h3 {b}\n```\n- Python example with data:\n```\nfrom flask import Flask, render_template_string\nfrom sucuri import rendering\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    template = rendering.template('template_data.suc',{\"a\": 1, \"b\": \"Hello!\"})\n    return render_template_string(template)\n```\n- Result:\n```\n<html>\n    <body>\n        <h1>Hello 1\n        Title\n        More\n        </h1>\n        <a href=\"#\">This is my link</a>\n        <h3>Hello!</h3>\n    </body>\n</html>\n```\n\n### Injecting template\nCode reuse can be done through injected templates. This facility makes reuse of the code very efficient and enables the creation of code components. In the sucuri the identification of an injection occurs through an `include` at the beginning of the .suc file and its use is carried out using the `+` symbol before the name of the file that was imported. See the example below using this feature:\n- Sucuri file (`template_include.suc`):\n```\ninclude inc/link\ninclude inc/list\n\nhtml\n    body\n        h1 Hello\n            | Title\n            | More\n        +link\n        h3 Oh Yeahh\n        +list\n```\n- File inside the folder `inc` called `link.suc` (`inc/link.suc`):\n```\na(href='#') {text}\n```\n- File inside the folder `inc` called `list.suc` (`inc/list.suc`):\n```\nul\n    li A\n    li B\n```\n- Python example:\n```\nfrom flask import Flask, render_template_string\nfrom sucuri import rendering\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    template = rendering.template('template_include.suc',{\"text\": \"Hello! I'm here!\"})\n    return render_template_string(template)\n```\n- Result:\n```\n<html>\n    <body>\n        <h1>Hello\n        Title\n        More\n        </h1>\n        <a href=\"#\">Hello! I'm here!</a>\n        <h3>Oh Yeahh</h3>\n        <ul>\n            <li>A</li>\n            <li>B</li>\n        </ul>\n    </body>\n</html>\n```\n\n### Condition (if)\n\nIt is possible to use conditional statements within Sucuri. Conditions are using the same form as Python's. Hence, the main operators are ```==``` and ```!=```. See an example below:\n- Main file\n```\nfrom flask import Flask, render_template_string\nfrom sucuri import rendering\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    template = rendering.template('template_if.suc',{\"x\": 1, \"y\": 3})\n    return render_template_string(template)\n```\n- Sucuri file (`template_if.suc`):\n```\ninclude inc/if\n\nhtml\n    body\n        h1 Hello\n            | Title\n            | More\n        +if\n```\n\n- File inside the folder `inc` called `if.suc` (`inc/if.suc`):\n```\n<if x != y>\nh2 The condition is True\n<endif>\n```\n- Result:\n```\n<html>\n    <body>\n        <h1>Hello\n            Title\n            More\n        </h1>\n        <h2> The condtition is True </h2>\n    </body>\n</html>\n```\n\n### Loop (for)\nSucuri has a loop in collections of objects, so it is necessary to use the object that has this characteristic as a parameter and to use the information in that collection. See the example below:\n- Main file\n```\nfrom flask import Flask, render_template_string\nfrom sucuri import rendering\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    template = rendering.template('template.suc',{\"text\": \"Hello! I'm here!\", \"var\":[1, 2, 3, 4]})\n    return render_template_string(template)\n```\n- Sucuri file (`template_include.suc`):\n```\ninclude inc/link\ninclude inc/list\n\nhtml\n    body\n        h1 Hello\n            | Title\n            | More\n        +link\n        h1 Test\n        +list\n```\n- File inside the folder `inc` called `link.suc` (`inc/link.suc`):\n```\na(href='#') {text}\n```\n- File inside the folder `inc` called `list.suc` (`inc/list.suc`):\n```\nul\n    <for a in var>\n    li Value #a\n    h1 test\n    ul\n        <for w in var>\n        li Another #w\n        <endfor>\n    <endfor>\n```\n- Result:\n```\n<html>\n    <body>\n        <h1>Hello\n            Title\n            More\n        </h1>\n        <a href=\"#\">Hello! I'm here!</a>\n        <h1>Test</h1>\n        <ul>\n            <li>Value 1</li>\n            <h1>test</h1>\n            <ul>\n                <li>Another 1</li>\n                <li>Another 2</li>\n                <li>Another 3</li>\n                <li>Another 4</li>\n            </ul>\n            <li>Value 2</li>\n            <h1>test</h1>\n            <ul>\n                <li>Another 1</li>\n                <li>Another 2</li>\n                <li>Another 3</li>\n                <li>Another 4</li>\n            </ul>\n            <li>Value 3</li>\n            <h1>test</h1>\n            <ul>\n                <li>Another 1</li>\n                <li>Another 2</li>\n                <li>Another 3</li>\n                <li>Another 4</li>\n            </ul>\n            <li>Value 4</li>\n            <h1>test</h1>\n            <ul>\n                <li>Another 1</li>\n                <li>Another 2</li>\n                <li>Another 3</li>\n                <li>Another 4</li>\n            </ul>\n        </ul>\n    </body>\n</html>\n```\n\n### Lists\n\nIt is possible to generate unordered bullet list (```<ul>```) and checkboxex with Sucuri. This requires that the Python list given as argument is only a one dimension list for unordered lists and two (the list of the items and the list of the checked items) for the checkboxes. See an example below:\n- Main file\n```\nfrom flask import Flask, render_template_string\nfrom sucuri import rendering\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    template = rendering.template('template_list.suc',{\"items\": [1, \"two\", 3, \"Five\"], \"checked\": [1, \"Five\"]})\n    return render_template_string(template)\n```\n- Sucuri file (`template_list.suc`):\n```\n\nhtml\n    body\n        h1 Hello\n        list(items)\n        list(items checked)\n```\n\n- Result:\n```\n<html>\n    <body>\n        <h1>Hello</h1>\n        <ul>\n            <li> 1 </li>\n            <li> two </li>\n            <li> 3 </li>\n            <li> Five </li>\n        </ul>\n        <input type=\"checkbox\" id=\"ck-1\" checked=\"checked\">1\n        <input type=\"checkbox\" id=\"ck-two\">two\n        <input type=\"checkbox\" id=\"ck-3\">3\n        <input type=\"checkbox\" id=\"ck-Five\" checked=\"checked\">Five\n    </body>\n</html>\n```\n\n`list()` also takes the optional argument `class`, which can be used to set the class of unordered lists like so:\n\n- Main file\n```\nfrom flask import Flask, render_template_string\nfrom sucuri import rendering\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    template = rendering.template('template_list_with_classes.suc',{\"items\": [1, \"two\", 3, \"Five\"]})\n    return render_template_string(template)\n```\n- Sucuri file (`template_list_with_classes.suc`):\n```\nstyle static/css/list\n\nhtml\n    body\n        h1 Hello\n        list(items class=\"ul-squares\")\n```\n\n- Result:\n```\n<html>\n    <body>\n        <h1>Hello</h1>\n        <ul class=\"ul-squares\">\n            <li> 1 </li>\n            <li> two </li>\n            <li> 3 </li>\n            <li> Five </li>\n        </ul>\n    </body>\n</html>\n```\n### Injecting Style (css) or Script (js)\nTo inject style or script into your html, the sucuri uses the style command that should come before the commands that will translate the html, in this case along with the import of the file however with the `style` tag for `css` and the `script` tag for `js` files.\n- Sucuri file (`template.suc`):\n```\ninclude inc/link\ninclude inc/list\nstyle static/css/style\nscript static/js/script\n\nhtml\n    body\n        h1 Hello\n            | Title\n            | More\n        +link\n        h1 Test\n        +list\n```\n\n- Include List:\n```\nstyle static/css/list\nul\n    <for a in var>\n    li Value #a\n    h1(class='h1-red') test\n    ul\n        <for w in var>\n        li Another #w\n        <endfor>\n    <endfor>\n```\n\n- `style` static/css/style.css\n```\nh1 {\n    color: blue;\n}\n```\n\n- `style` static/css/list.css\n```\n.h1-red {\n    color: red;\n}\n```\n\n- `script` static/js/script.js\n```\nfunction example() {\n    console.log('test');\n}\n```\n\n- Result:\n```\n<html>\n   <head></head>\n   <body>\n      <h1>Hello\n         Title\n         More\n      </h1>\n      <a href=\"#\">Hello! I'm here!</a>\n      <h1>Test</h1>\n      <ul>\n         <li>Value 1</li>\n         <h1 class=\"h1-red\">test</h1>\n         <ul>\n            <li>Another 1</li>\n            <li>Another 2</li>\n            <li>Another 3</li>\n            <li>Another 4</li>\n         </ul>\n         <li>Value 2</li>\n         <h1 class=\"h1-red\">test</h1>\n         <ul>\n            <li>Another 1</li>\n            <li>Another 2</li>\n            <li>Another 3</li>\n            <li>Another 4</li>\n         </ul>\n         <li>Value 3</li>\n         <h1 class=\"h1-red\">test</h1>\n         <ul>\n            <li>Another 1</li>\n            <li>Another 2</li>\n            <li>Another 3</li>\n            <li>Another 4</li>\n         </ul>\n         <li>Value 4</li>\n         <h1 class=\"h1-red\">test</h1>\n         <ul>\n            <li>Another 1</li>\n            <li>Another 2</li>\n            <li>Another 3</li>\n            <li>Another 4</li>\n         </ul>\n      </ul>\n      <style>h1 {\n         color: blue;\n         }.h1-red {\n         color: red;\n         }\n      </style>\n      <script>function example() {\n         console.log('test');\n         }\n      </script>\n   </body>\n</html>\n```\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marcosstefani/sucuri", "keywords": "template engine python", "license": "", "maintainer": "", "maintainer_email": "", "name": "sucuri", "package_url": "https://pypi.org/project/sucuri/", "platform": "", "project_url": "https://pypi.org/project/sucuri/", "project_urls": {"Homepage": "https://github.com/marcosstefani/sucuri"}, "release_url": "https://pypi.org/project/sucuri/0.2.6/", "requires_dist": null, "requires_python": ">=3", "summary": "Simple and efficient Template Engine for Python projects", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            +&lt;a href=\"#\"&gt;&lt;img src=\"https://user-images.githubusercontent.com/16294901/37826760-892cd0de-2e73-11e8-8ea1-2afc390c2ac0.png\" height=\"300\" align=\"right\"&gt;&lt;/a&gt;<br># This is a very important project.<br># Sucuri<br>Simple and efficient template engine for Python projects inspired by [PugJS](https://pugjs.org)<br><br>## Instaling<br>Install and update using [pip](https://pip.pypa.io/en/stable/quickstart/):<br>&gt; pip install sucuri<br><br>## Creating a Sucuri Template<br>- Example of code:<br>```<br>html<br>    body<br>        h1 Title<br>        a(href='#') This is my link<br>```<br>As can be seen in the code example above, the sucuri development requires tabulation standardization. We do not determine the number of spaces, but it is necessary to keep the same number of spaces on the left in the whole code, because this quantity will inform if a certain TAG of the HTML will be contained within another one or not. With this, in the example above we will have the following HTML code:<br>```<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;Title&lt;/h1&gt;<br>        &lt;a href=\"#\"&gt;This is my link&lt;/a&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br>```<br><br>## Using<br>To use sucuri, you need to import the sucuri package into your Python file, the example below is an application that uses the sucuri to render in the [Flask](http://flask.pocoo.org/):<br>```<br>from sucuri import rendering<br>from flask import Flask, render_template_string<br><br>app = Flask(__name__)<br><br>@app.route(\"/\")<br>def index():<br>    template = rendering.template('template.suc')<br> \u00a0 \u00a0return render_template_string(template)<br>```<br><br>As can be seen in the example above, the template in the example is loaded from a file named `template.suc` which is in the project's root directory, however it could be in any project directory, such as `templates/template.suc` if you include a folder to group the templates. At the first access to the archive, it will take care of storing it in memory, thus making access to information less costly and more efficient. <br><br>### Text<br>In sucuri, texts are described in two ways. It can be written after the declaration of the tag such as:<br>```<br>h1 Title<br>```<br>Result:<br>```<br>&lt;h1&gt;Title&lt;/h1&gt;<br>```<br>Or you can type in more than one line using the `|` on the lines that are not the same as the tag, see example:<br>```<br>h3 Hello!<br>    | Text<br>    | with<br>    | more than<br>    | one line<br>```<br>Result:<br>```<br>&lt;h3&gt;Hello!<br>    Text<br>    with<br>    more than<br>    one line<br>&lt;/h3&gt;<br>```<br><br>### Attributes<br>Just as in HTML the attributes in the sucuri must be separated by space and unlike the PugJS must be in a row only and can not be separated by commas. They must necessarily be enclosed in parentheses. See examples of the use of attributes below:<br>```<br>a(href='google.com') Google<br>a(class='button' href='google.com') Google<br>div(class='div-class')<br>```<br>- Result:<br>```<br>&lt;a href=\"google.com\"&gt;Google&lt;/a&gt;<br>&lt;a class=\"button\" href=\"google.com\"&gt;Google&lt;/a&gt;<br>&lt;div class=\"div-class\"&gt;&lt;/div&gt;<br>```<br><br>### Rendering of data<br>We already know (seen in the text above) that we can only use the `template('template_name')` function with a simple `.suc` file, however it is possible to pass information through a JSON to the template and the sucuri will automatically render the data in the proper location, see the example below:<br>- Sucuri file:<br>```<br>html<br>    body<br>        h1 Hello {a}<br>            | Title<br>            | More<br>        a(href='#') This is my link<br>        h3 {b}<br>```<br>- Python example with data:<br>```<br>from flask import Flask, render_template_string<br>from sucuri import rendering<br><br>app = Flask(__name__)<br><br>@app.route(\"/\")<br>def index():<br>    template = rendering.template('template_data.suc',{\"a\": 1, \"b\": \"Hello!\"})<br>    return render_template_string(template)<br>```<br>- Result:<br>```<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;Hello 1<br>        Title<br>        More<br>        &lt;/h1&gt;<br>        &lt;a href=\"#\"&gt;This is my link&lt;/a&gt;<br>        &lt;h3&gt;Hello!&lt;/h3&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br>```<br><br>### Injecting template<br>Code reuse can be done through injected templates. This facility makes reuse of the code very efficient and enables the creation of code components. In the sucuri the identification of an injection occurs through an `include` at the beginning of the .suc file and its use is carried out using the `+` symbol before the name of the file that was imported. See the example below using this feature:<br>- Sucuri file (`template_include.suc`):<br>```<br>include inc/link<br>include inc/list<br><br>html<br>    body<br>        h1 Hello<br>            | Title<br>            | More<br>        +link<br>        h3 Oh Yeahh<br>        +list<br>```<br>- File inside the folder `inc` called `link.suc` (`inc/link.suc`):<br>```<br>a(href='#') {text}<br>```<br>- File inside the folder `inc` called `list.suc` (`inc/list.suc`):<br>```<br>ul<br>    li A<br>    li B<br>```<br>- Python example:<br>```<br>from flask import Flask, render_template_string<br>from sucuri import rendering<br><br>app = Flask(__name__)<br><br>@app.route(\"/\")<br>def index():<br>    template = rendering.template('template_include.suc',{\"text\": \"Hello! I'm here!\"})<br>    return render_template_string(template)<br>```<br>- Result:<br>```<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;Hello<br>        Title<br>        More<br>        &lt;/h1&gt;<br>        &lt;a href=\"#\"&gt;Hello! I'm here!&lt;/a&gt;<br>        &lt;h3&gt;Oh Yeahh&lt;/h3&gt;<br>        &lt;ul&gt;<br>            &lt;li&gt;A&lt;/li&gt;<br>            &lt;li&gt;B&lt;/li&gt;<br>        &lt;/ul&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br>```<br><br>### Condition (if)<br><br>It is possible to use conditional statements within Sucuri. Conditions are using the same form as Python's. Hence, the main operators are ```==``` and ```!=```. See an example below:<br>- Main file<br>```<br>from flask import Flask, render_template_string<br>from sucuri import rendering<br><br>app = Flask(__name__)<br><br>@app.route(\"/\")<br>def index():<br>    template = rendering.template('template_if.suc',{\"x\": 1, \"y\": 3})<br>    return render_template_string(template)<br>```<br>- Sucuri file (`template_if.suc`):<br>```<br>include inc/if<br><br>html<br>    body<br>        h1 Hello<br>            | Title<br>            | More<br>        +if<br>```<br><br>- File inside the folder `inc` called `if.suc` (`inc/if.suc`):<br>```<br>&lt;if x != y&gt;<br>h2 The condition is True<br>&lt;endif&gt;<br>```<br>- Result:<br>```<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;Hello<br>            Title<br>            More<br>        &lt;/h1&gt;<br>        &lt;h2&gt; The condtition is True &lt;/h2&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br>```<br><br>### Loop (for)<br>Sucuri has a loop in collections of objects, so it is necessary to use the object that has this characteristic as a parameter and to use the information in that collection. See the example below:<br>- Main file<br>```<br>from flask import Flask, render_template_string<br>from sucuri import rendering<br><br>app = Flask(__name__)<br><br>@app.route(\"/\")<br>def index():<br>    template = rendering.template('template.suc',{\"text\": \"Hello! I'm here!\", \"var\":[1, 2, 3, 4]})<br>    return render_template_string(template)<br>```<br>- Sucuri file (`template_include.suc`):<br>```<br>include inc/link<br>include inc/list<br><br>html<br>    body<br>        h1 Hello<br>            | Title<br>            | More<br>        +link<br>        h1 Test<br>        +list<br>```<br>- File inside the folder `inc` called `link.suc` (`inc/link.suc`):<br>```<br>a(href='#') {text}<br>```<br>- File inside the folder `inc` called `list.suc` (`inc/list.suc`):<br>```<br>ul<br>    &lt;for a in var&gt;<br>    li Value #a<br>    h1 test<br>    ul<br>        &lt;for w in var&gt;<br>        li Another #w<br>        &lt;endfor&gt;<br>    &lt;endfor&gt;<br>```<br>- Result:<br>```<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;Hello<br>            Title<br>            More<br>        &lt;/h1&gt;<br>        &lt;a href=\"#\"&gt;Hello! I'm here!&lt;/a&gt;<br>        &lt;h1&gt;Test&lt;/h1&gt;<br>        &lt;ul&gt;<br>            &lt;li&gt;Value 1&lt;/li&gt;<br>            &lt;h1&gt;test&lt;/h1&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt;Another 1&lt;/li&gt;<br>                &lt;li&gt;Another 2&lt;/li&gt;<br>                &lt;li&gt;Another 3&lt;/li&gt;<br>                &lt;li&gt;Another 4&lt;/li&gt;<br>            &lt;/ul&gt;<br>            &lt;li&gt;Value 2&lt;/li&gt;<br>            &lt;h1&gt;test&lt;/h1&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt;Another 1&lt;/li&gt;<br>                &lt;li&gt;Another 2&lt;/li&gt;<br>                &lt;li&gt;Another 3&lt;/li&gt;<br>                &lt;li&gt;Another 4&lt;/li&gt;<br>            &lt;/ul&gt;<br>            &lt;li&gt;Value 3&lt;/li&gt;<br>            &lt;h1&gt;test&lt;/h1&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt;Another 1&lt;/li&gt;<br>                &lt;li&gt;Another 2&lt;/li&gt;<br>                &lt;li&gt;Another 3&lt;/li&gt;<br>                &lt;li&gt;Another 4&lt;/li&gt;<br>            &lt;/ul&gt;<br>            &lt;li&gt;Value 4&lt;/li&gt;<br>            &lt;h1&gt;test&lt;/h1&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt;Another 1&lt;/li&gt;<br>                &lt;li&gt;Another 2&lt;/li&gt;<br>                &lt;li&gt;Another 3&lt;/li&gt;<br>                &lt;li&gt;Another 4&lt;/li&gt;<br>            &lt;/ul&gt;<br>        &lt;/ul&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br>```<br><br>### Lists<br><br>It is possible to generate unordered bullet list (```&lt;ul&gt;```) and checkboxex with Sucuri. This requires that the Python list given as argument is only a one dimension list for unordered lists and two (the list of the items and the list of the checked items) for the checkboxes. See an example below:<br>- Main file<br>```<br>from flask import Flask, render_template_string<br>from sucuri import rendering<br><br>app = Flask(__name__)<br><br>@app.route(\"/\")<br>def index():<br>    template = rendering.template('template_list.suc',{\"items\": [1, \"two\", 3, \"Five\"], \"checked\": [1, \"Five\"]})<br>    return render_template_string(template)<br>```<br>- Sucuri file (`template_list.suc`):<br>```<br><br>html<br>    body<br>        h1 Hello<br>        list(items)<br>        list(items checked)<br>```<br><br>- Result:<br>```<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;Hello&lt;/h1&gt;<br>        &lt;ul&gt;<br>            &lt;li&gt; 1 &lt;/li&gt;<br>            &lt;li&gt; two &lt;/li&gt;<br>            &lt;li&gt; 3 &lt;/li&gt;<br>            &lt;li&gt; Five &lt;/li&gt;<br>        &lt;/ul&gt;<br>        &lt;input type=\"checkbox\" id=\"ck-1\" checked=\"checked\"&gt;1<br>        &lt;input type=\"checkbox\" id=\"ck-two\"&gt;two<br>        &lt;input type=\"checkbox\" id=\"ck-3\"&gt;3<br>        &lt;input type=\"checkbox\" id=\"ck-Five\" checked=\"checked\"&gt;Five<br>    &lt;/body&gt;<br>&lt;/html&gt;<br>```<br><br>`list()` also takes the optional argument `class`, which can be used to set the class of unordered lists like so:<br><br>- Main file<br>```<br>from flask import Flask, render_template_string<br>from sucuri import rendering<br><br>app = Flask(__name__)<br><br>@app.route(\"/\")<br>def index():<br>    template = rendering.template('template_list_with_classes.suc',{\"items\": [1, \"two\", 3, \"Five\"]})<br>    return render_template_string(template)<br>```<br>- Sucuri file (`template_list_with_classes.suc`):<br>```<br>style static/css/list<br><br>html<br>    body<br>        h1 Hello<br>        list(items class=\"ul-squares\")<br>```<br><br>- Result:<br>```<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;Hello&lt;/h1&gt;<br>        &lt;ul class=\"ul-squares\"&gt;<br>            &lt;li&gt; 1 &lt;/li&gt;<br>            &lt;li&gt; two &lt;/li&gt;<br>            &lt;li&gt; 3 &lt;/li&gt;<br>            &lt;li&gt; Five &lt;/li&gt;<br>        &lt;/ul&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br>```<br>### Injecting Style (css) or Script (js)<br>To inject style or script into your html, the sucuri uses the style command that should come before the commands that will translate the html, in this case along with the import of the file however with the `style` tag for `css` and the `script` tag for `js` files.<br>- Sucuri file (`template.suc`):<br>```<br>include inc/link<br>include inc/list<br>style static/css/style<br>script static/js/script<br><br>html<br>    body<br>        h1 Hello<br>            | Title<br>            | More<br>        +link<br>        h1 Test<br>        +list<br>```<br><br>- Include List:<br>```<br>style static/css/list<br>ul<br>    &lt;for a in var&gt;<br>    li Value #a<br>    h1(class='h1-red') test<br>    ul<br>        &lt;for w in var&gt;<br>        li Another #w<br>        &lt;endfor&gt;<br>    &lt;endfor&gt;<br>```<br><br>- `style` static/css/style.css<br>```<br>h1 {<br>    color: blue;<br>}<br>```<br><br>- `style` static/css/list.css<br>```<br>.h1-red {<br>    color: red;<br>}<br>```<br><br>- `script` static/js/script.js<br>```<br>function example() {<br>    console.log('test');<br>}<br>```<br><br>- Result:<br>```<br>&lt;html&gt;<br>   &lt;head&gt;&lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;h1&gt;Hello<br>         Title<br>         More<br>      &lt;/h1&gt;<br>      &lt;a href=\"#\"&gt;Hello! I'm here!&lt;/a&gt;<br>      &lt;h1&gt;Test&lt;/h1&gt;<br>      &lt;ul&gt;<br>         &lt;li&gt;Value 1&lt;/li&gt;<br>         &lt;h1 class=\"h1-red\"&gt;test&lt;/h1&gt;<br>         &lt;ul&gt;<br>            &lt;li&gt;Another 1&lt;/li&gt;<br>            &lt;li&gt;Another 2&lt;/li&gt;<br>            &lt;li&gt;Another 3&lt;/li&gt;<br>            &lt;li&gt;Another 4&lt;/li&gt;<br>         &lt;/ul&gt;<br>         &lt;li&gt;Value 2&lt;/li&gt;<br>         &lt;h1 class=\"h1-red\"&gt;test&lt;/h1&gt;<br>         &lt;ul&gt;<br>            &lt;li&gt;Another 1&lt;/li&gt;<br>            &lt;li&gt;Another 2&lt;/li&gt;<br>            &lt;li&gt;Another 3&lt;/li&gt;<br>            &lt;li&gt;Another 4&lt;/li&gt;<br>         &lt;/ul&gt;<br>         &lt;li&gt;Value 3&lt;/li&gt;<br>         &lt;h1 class=\"h1-red\"&gt;test&lt;/h1&gt;<br>         &lt;ul&gt;<br>            &lt;li&gt;Another 1&lt;/li&gt;<br>            &lt;li&gt;Another 2&lt;/li&gt;<br>            &lt;li&gt;Another 3&lt;/li&gt;<br>            &lt;li&gt;Another 4&lt;/li&gt;<br>         &lt;/ul&gt;<br>         &lt;li&gt;Value 4&lt;/li&gt;<br>         &lt;h1 class=\"h1-red\"&gt;test&lt;/h1&gt;<br>         &lt;ul&gt;<br>            &lt;li&gt;Another 1&lt;/li&gt;<br>            &lt;li&gt;Another 2&lt;/li&gt;<br>            &lt;li&gt;Another 3&lt;/li&gt;<br>            &lt;li&gt;Another 4&lt;/li&gt;<br>         &lt;/ul&gt;<br>      &lt;/ul&gt;<br>      &lt;style&gt;h1 {<br>         color: blue;<br>         }.h1-red {<br>         color: red;<br>         }<br>      &lt;/style&gt;<br>      &lt;script&gt;function example() {<br>         console.log('test');<br>         }<br>      &lt;/script&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br>```<br><br><br>\n          </div>"}, "last_serial": 4776059, "releases": {"0.1.7": [{"comment_text": "", "digests": {"md5": "0ba8d0028f0ccfee1beea6c71fcfc908", "sha256": "a6df6f6f4f2b04679d2d051a2ee95ea03ce1b9e6f0434167b0f96c50ec802b3f"}, "downloads": -1, "filename": "sucuri-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ba8d0028f0ccfee1beea6c71fcfc908", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 3264, "upload_time": "2018-03-21T14:52:23", "upload_time_iso_8601": "2018-03-21T14:52:23.240998Z", "url": "https://files.pythonhosted.org/packages/d5/08/75910dec0712c1fe4731132b9109241d988b10a1a14446ef23b51267552e/sucuri-0.1.7-py2.py3-none-any.whl", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "9304d949e29efb13872d39c772db935d", "sha256": "aa4a89a154d58f5d57d37d099d0c06931b1a2cbfdc57d260854a6683394c24de"}, "downloads": -1, "filename": "sucuri-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9304d949e29efb13872d39c772db935d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 5465, "upload_time": "2018-03-22T23:56:16", "upload_time_iso_8601": "2018-03-22T23:56:16.996260Z", "url": "https://files.pythonhosted.org/packages/2f/ff/c372544baf44399dd0639cf4fadb4f3ebea5678ebda99eaa286da124f881/sucuri-0.1.8-py2.py3-none-any.whl", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "5cf8387d783ee052ce43a95be7d06455", "sha256": "35f062a3ac7ca071e12b1a9d02dd5959942ea421e52cf0ee9f616d6f413cab38"}, "downloads": -1, "filename": "sucuri-0.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5cf8387d783ee052ce43a95be7d06455", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 5867, "upload_time": "2018-03-23T03:58:36", "upload_time_iso_8601": "2018-03-23T03:58:36.934398Z", "url": "https://files.pythonhosted.org/packages/c4/21/56032080acbef4fd717fee52a2edde392e7453efad81bd81b6a8ba0fc134/sucuri-0.1.9-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d92c279df9a4d0d748de4905953d6e96", "sha256": "d919305545c24254528ff19d871b8c5ba284a0f0eda20dedffdc9c289cbcefb8"}, "downloads": -1, "filename": "sucuri-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d92c279df9a4d0d748de4905953d6e96", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 6578, "upload_time": "2018-03-24T00:50:49", "upload_time_iso_8601": "2018-03-24T00:50:49.664936Z", "url": "https://files.pythonhosted.org/packages/1e/f1/67052d96b94c5a3bac0e0ebf86217f38948793b0d96ce18a4351a051c60e/sucuri-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "263ef427afed313b4b7900977c91511c", "sha256": "39b429c8f72a2ab82b08384e34863e5730156be011d9a33364320c080df6f52f"}, "downloads": -1, "filename": "sucuri-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "263ef427afed313b4b7900977c91511c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 8126, "upload_time": "2018-04-03T19:33:33", "upload_time_iso_8601": "2018-04-03T19:33:33.618579Z", "url": "https://files.pythonhosted.org/packages/c5/7e/8151b379083d7af07636e0546a748d13324daab446f5255acf730af83c9a/sucuri-0.2.1-py2.py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "835308a0b1ea623d11a5c599a1e05f9a", "sha256": "006c91a82caeeb7858c5b6db1db622671d63b954f4ceaed4b08fcac453a1aa97"}, "downloads": -1, "filename": "sucuri-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "835308a0b1ea623d11a5c599a1e05f9a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 9345, "upload_time": "2018-04-25T01:33:53", "upload_time_iso_8601": "2018-04-25T01:33:53.994863Z", "url": "https://files.pythonhosted.org/packages/17/7b/74283ac489cf1b165f3da165aec1c52c0613808a84561e8f6eb12de9b656/sucuri-0.2.2-py2.py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "f1a4d29373070ad4416074fcf0472998", "sha256": "172eb52b46ac46fe7247fdb13c6c2956c0691ac78c7425a0714c8a120d9018d6"}, "downloads": -1, "filename": "sucuri-0.2.4.tar.gz", "has_sig": false, "md5_digest": "f1a4d29373070ad4416074fcf0472998", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 9883, "upload_time": "2018-07-22T22:58:32", "upload_time_iso_8601": "2018-07-22T22:58:32.839015Z", "url": "https://files.pythonhosted.org/packages/a0/e1/7e7803019ef918b42cedfa678aacc1bed78b9b026aaded74021edb376594/sucuri-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d14378c26dfd1b5ca13dcc7eda63b4fe", "sha256": "0f646cb364bbb7f707fa2000beac90e65512df88fdaa811fbc8985504ef8bb61"}, "downloads": -1, "filename": "sucuri-0.2.5.tar.gz", "has_sig": false, "md5_digest": "d14378c26dfd1b5ca13dcc7eda63b4fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 14239, "upload_time": "2018-11-03T15:04:26", "upload_time_iso_8601": "2018-11-03T15:04:26.343049Z", "url": "https://files.pythonhosted.org/packages/f6/41/1979448a7af3998d9983b6d55517881a336c31da52359b38f75c2e332fc8/sucuri-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "634bcd4c6f4c13e846cda48ed7cbe0db", "sha256": "ee2fe0d1bb6d49ec60a426c854ccc41343811a8f2c75301000beae8cca090b86"}, "downloads": -1, "filename": "sucuri-0.2.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "634bcd4c6f4c13e846cda48ed7cbe0db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 8869, "upload_time": "2019-02-04T00:11:23", "upload_time_iso_8601": "2019-02-04T00:11:23.123649Z", "url": "https://files.pythonhosted.org/packages/a6/50/e7faef495c6e7f6ff2116296dc3c76f5be0e29d5e3d4e8d089f8f93e7ea7/sucuri-0.2.6-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "634bcd4c6f4c13e846cda48ed7cbe0db", "sha256": "ee2fe0d1bb6d49ec60a426c854ccc41343811a8f2c75301000beae8cca090b86"}, "downloads": -1, "filename": "sucuri-0.2.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "634bcd4c6f4c13e846cda48ed7cbe0db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 8869, "upload_time": "2019-02-04T00:11:23", "upload_time_iso_8601": "2019-02-04T00:11:23.123649Z", "url": "https://files.pythonhosted.org/packages/a6/50/e7faef495c6e7f6ff2116296dc3c76f5be0e29d5e3d4e8d089f8f93e7ea7/sucuri-0.2.6-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:00:34 2020"}