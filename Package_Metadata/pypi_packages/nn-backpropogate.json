{"info": {"author": "Aryan Khandelwal", "author_email": "nk28agra@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Neural-Networks\nContains Python Code for implemenation of various logic gates using BackPropogation in python\nExample Implementation of AND Gate using this Module\n## Code \n>import NeuralNetwork  \n>b=NeuralNetwork.BackPropogate(\"and\")  \n>b.selectEpochs(10000)  \n>b.setLearningRate(0.1)  \n>b.train()  \n>b.print(\"oo\")  \n>b.showerror()  \n>b.plot()  \n\n#### Print can take any of four parameter:-\n* ow1-Output Weights1 Array\n* ow2-Output Weights2 Array\n* ob-Output Biases Array\n* oo-Our Final Output \n### Functions it includes-\n* sigmoid\n* drivative\n* train -Train Different Gates Model\n* showerror -Show Error Percentage from Expected Output\n* plot :- Plot different Grpahs for you\n* print :- Print can take 4 inputs depending on which it provides output\n* selectEpochs :- To select the number of epochs(Default :-1000)\n* setLearningRate :- To select the learning rate of your Model(Default-0.1)\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aryan29/", "keywords": "backpropogation,neuralnetwork,logicgates", "license": "", "maintainer": "", "maintainer_email": "", "name": "nn-backpropogate", "package_url": "https://pypi.org/project/nn-backpropogate/", "platform": "", "project_url": "https://pypi.org/project/nn-backpropogate/", "project_urls": {"Homepage": "https://github.com/aryan29/"}, "release_url": "https://pypi.org/project/nn-backpropogate/0.0.1/", "requires_dist": ["math", "numpy", "matplotlib"], "requires_python": "", "summary": "adding number", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Neural-Networks\nContains Python Code for implemenation of various logic gates using BackPropogation in python\nExample Implementation of AND Gate using this Module\n## Code\n&gt;import NeuralNetwork\n&gt;b=NeuralNetwork.BackPropogate(\u201cand\u201d)\n&gt;b.selectEpochs(10000)\n&gt;b.setLearningRate(0.1)\n&gt;b.train()\n&gt;b.print(\u201coo\u201d)\n&gt;b.showerror()\n&gt;b.plot()</p>\n<p>#### Print can take any of four parameter:-\n* ow1-Output Weights1 Array\n* ow2-Output Weights2 Array\n* ob-Output Biases Array\n* oo-Our Final Output\n### Functions it includes-\n* sigmoid\n* drivative\n* train -Train Different Gates Model\n* showerror -Show Error Percentage from Expected Output\n* plot :- Plot different Grpahs for you\n* print :- Print can take 4 inputs depending on which it provides output\n* selectEpochs :- To select the number of epochs(Default :-1000)\n* setLearningRate :- To select the learning rate of your Model(Default-0.1)</p>\n\n          </div>"}, "last_serial": 6163852, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5af7000f3b337f5ede816c5e965e0419", "sha256": "a85b14578682cd9ba8b97d721738bd949121fa6ea425d6cf81d18e0912f3cd57"}, "downloads": -1, "filename": "nn_backpropogate-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5af7000f3b337f5ede816c5e965e0419", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3059, "upload_time": "2019-11-19T18:19:16", "upload_time_iso_8601": "2019-11-19T18:19:16.401392Z", "url": "https://files.pythonhosted.org/packages/01/2c/385d2094c1e1d5d76c8ba29a62bb5c347ae2cc0fed0a99bd312861ebb8ea/nn_backpropogate-0.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5af7000f3b337f5ede816c5e965e0419", "sha256": "a85b14578682cd9ba8b97d721738bd949121fa6ea425d6cf81d18e0912f3cd57"}, "downloads": -1, "filename": "nn_backpropogate-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5af7000f3b337f5ede816c5e965e0419", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3059, "upload_time": "2019-11-19T18:19:16", "upload_time_iso_8601": "2019-11-19T18:19:16.401392Z", "url": "https://files.pythonhosted.org/packages/01/2c/385d2094c1e1d5d76c8ba29a62bb5c347ae2cc0fed0a99bd312861ebb8ea/nn_backpropogate-0.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:04 2020"}