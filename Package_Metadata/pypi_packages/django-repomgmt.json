{"info": {"author": "Soren Hansen", "author_email": "sorhanse@cisco.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Software Development", "Topic :: System :: Archiving :: Packaging"], "description": "python-django-repomgmt\n\nThis Django app implements everything you need to create APT repositories,\nbuildd infrastructure as well as automatic package building.\n\nIt expects access to an OpenStack Compute cloud to perform builds and uses\nreprepro on the backend to manage the APT repositories, process incoming,\netc.\n\nSetting it up should be fairly simple.\n\nYou need Django, django-tastypie, django-celery, sbuild and devscripts\ninstalled.\n\nThese are the configuration options you need to add to your settings.py:\n\nAPT_REPO_BASE_URL\n\n    The base URL by which your repositories will be reachable.\n\n    E.g. if set to http://apt.example.com/, it's assumed that\n    your web server is configured to expose e.g. the \"cisco\" repository\n    under http://apt.example.com/cisco\n\nPOST_MK_SBUILD_CUSTOMISATION\n\n    An argv to be executed in the schroot after mk-sbuild is done.\n\n    E.g. to avoid using a proxy for a apt.example.com, you can do\n    something like:\n\n    POST_MK_SBUILD_CUSTOMISATION = ['bash', '-c', 'echo \\'Acquire::HTTP::Proxy::apt.example.com \"DIRECT\";\\' > /etc/apt/apt.conf.d/99noproxy']\n\nBASE_URL\n\n    The base URL of the repomgmt app. This is used to construct URLs\n    where build nodes can fetch their puppet manifest.\n\nBASE_TARBALL_URL\n\n    A URL where the generated tarballs can be found. The tarballs generally\n    land in /var/lib/schroot/tarballs, so you should configure a web server to\n    serve that directory at this URL.\n\nBASE_REPO_DIR\n\n    The base directory where the repositories should be kept.\n    Each repository will be represented by a subdirectory here.\n\nIt is also expected that django-celery is already configured. This should be as simple as adding something like this near the end of your settings.py:\n\n    INSTALLED_APPS += (\"djcelery\", )\n    import djcelery\n    djcelery.setup_loader()\n\n    BROKER_URL = 'amqp://guest:guest@localhost:5672/'\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/sorenh/python-django-repomgmt", "keywords": "django apt repository buildd", "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "django-repomgmt", "package_url": "https://pypi.org/project/django-repomgmt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-repomgmt/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/sorenh/python-django-repomgmt"}, "release_url": "https://pypi.org/project/django-repomgmt/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "APT repo management, buildd, etc.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>python-django-repomgmt</p>\n<p>This Django app implements everything you need to create APT repositories,\nbuildd infrastructure as well as automatic package building.</p>\n<p>It expects access to an OpenStack Compute cloud to perform builds and uses\nreprepro on the backend to manage the APT repositories, process incoming,\netc.</p>\n<p>Setting it up should be fairly simple.</p>\n<p>You need Django, django-tastypie, django-celery, sbuild and devscripts\ninstalled.</p>\n<p>These are the configuration options you need to add to your settings.py:</p>\n<p>APT_REPO_BASE_URL</p>\n<blockquote>\n<p>The base URL by which your repositories will be reachable.</p>\n<p>E.g. if set to <a href=\"http://apt.example.com/\" rel=\"nofollow\">http://apt.example.com/</a>, it\u2019s assumed that\nyour web server is configured to expose e.g. the \u201ccisco\u201d repository\nunder <a href=\"http://apt.example.com/cisco\" rel=\"nofollow\">http://apt.example.com/cisco</a></p>\n</blockquote>\n<p>POST_MK_SBUILD_CUSTOMISATION</p>\n<blockquote>\n<p>An argv to be executed in the schroot after mk-sbuild is done.</p>\n<p>E.g. to avoid using a proxy for a apt.example.com, you can do\nsomething like:</p>\n<p>POST_MK_SBUILD_CUSTOMISATION = [\u2018bash\u2019, \u2018-c\u2019, \u2018echo \u2018Acquire::HTTP::Proxy::apt.example.com \u201cDIRECT\u201d;\u2019 &gt; /etc/apt/apt.conf.d/99noproxy\u2019]</p>\n</blockquote>\n<p>BASE_URL</p>\n<blockquote>\nThe base URL of the repomgmt app. This is used to construct URLs\nwhere build nodes can fetch their puppet manifest.</blockquote>\n<p>BASE_TARBALL_URL</p>\n<blockquote>\nA URL where the generated tarballs can be found. The tarballs generally\nland in /var/lib/schroot/tarballs, so you should configure a web server to\nserve that directory at this URL.</blockquote>\n<p>BASE_REPO_DIR</p>\n<blockquote>\nThe base directory where the repositories should be kept.\nEach repository will be represented by a subdirectory here.</blockquote>\n<p>It is also expected that django-celery is already configured. This should be as simple as adding something like this near the end of your settings.py:</p>\n<blockquote>\n<p>INSTALLED_APPS += (\u201cdjcelery\u201d, )\nimport djcelery\ndjcelery.setup_loader()</p>\n<p>BROKER_URL = \u2018amqp://guest:guest@localhost:5672/\u2019</p>\n</blockquote>\n\n          </div>"}, "last_serial": 790461, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "de641602aee484badde2860f15aa9456", "sha256": "39dbd8cb1b9bd080625d48429a74f5e9f28fa67487c211ccd2b04d42566f4c43"}, "downloads": -1, "filename": "django-repomgmt-0.1.tar.gz", "has_sig": false, "md5_digest": "de641602aee484badde2860f15aa9456", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104691, "upload_time": "2012-11-02T11:05:44", "upload_time_iso_8601": "2012-11-02T11:05:44.576135Z", "url": "https://files.pythonhosted.org/packages/5f/c5/80919b49fad974a2dcf834e920081126730202f11635342efc71179484bc/django-repomgmt-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cf21ff11e7c864c9af112d3bc8cbb6ed", "sha256": "12e5f6865ee8aa2a7ff28165c6f38da7b3bfe346ba2c473626941bbd95fc3360"}, "downloads": -1, "filename": "django-repomgmt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cf21ff11e7c864c9af112d3bc8cbb6ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106379, "upload_time": "2012-11-02T13:05:44", "upload_time_iso_8601": "2012-11-02T13:05:44.931673Z", "url": "https://files.pythonhosted.org/packages/d8/a9/c500e6bb90e13ff2a0e583e601dd84be56cfce27d142ac66531977ea0e5b/django-repomgmt-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cf21ff11e7c864c9af112d3bc8cbb6ed", "sha256": "12e5f6865ee8aa2a7ff28165c6f38da7b3bfe346ba2c473626941bbd95fc3360"}, "downloads": -1, "filename": "django-repomgmt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cf21ff11e7c864c9af112d3bc8cbb6ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106379, "upload_time": "2012-11-02T13:05:44", "upload_time_iso_8601": "2012-11-02T13:05:44.931673Z", "url": "https://files.pythonhosted.org/packages/d8/a9/c500e6bb90e13ff2a0e583e601dd84be56cfce27d142ac66531977ea0e5b/django-repomgmt-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:16 2020"}