{"info": {"author": "Anton Bulakh", "author_email": "necauqua@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Communications :: Chat", "Topic :: Utilities"], "description": "# tinybot\nThis is a small and simple library for quickly building Telegram Bots with Python.\n\nIt is made to be dynamic and independent of the Telegram Bot API.\nIt means that whenever a new Telegram API method or callback is added,\nthere is no need to update this library, all calls are dynamic and you can send whatever you like to Telegram.\n\n## Installation\nIt is published on PyPI so to use it simply install it with pip.\n```\n$ pip install tinybot\n```\n\n## Example\nActually working little bot (from which this library was originated) can be found [here](https://github.com/necauqua/county-bot).\n\nHere is a simple example:\n```python\n\nimport tinybot\n\n\nclass Assistant(tinybot.Bot):\n    version = '0.0.1-SNAPSHOT'\n    token = '123456789:token-for-debugging' # token is not required when using tinybot.run\n\n    def handle_message(self, data, api):\n        if '@all' in data.text:\n            api.sendMessage(chat_id=data.chat.id, text='@necauqua @other_people..')\n            api.sendMessage(chat_id=data.chat.id, text='[debug] update id ' + str(self.update_id))\n\n\nif __name__ == '__main__':\n    # just start longpoll loop for debugging\n    Assistant.launch_longpoll(30)\n\n    # tinybot.run is a ready-to-use CLI for launching longpoll or webhook and providing the token\n    # tinybot.run(Assistant, 'necauqua assistant bot')\n\n```\n\n## Usage\nYour bot is a class which derives from `tinybot.Bot` class.\nYou can start it with a ready-to-use CLI using this standard construct\n```python\nif __name__ == '__main__':\n    tinybot.run(bot_cls, bot_description)\n```\nAll of the bot's logic is defined inside the class deriven from `tinybot.Bot`.\n\nIt have static fields `name`, `version`,`full_name` and `token`.\n* `name` defaults to the class name and is the name of your bot. Used in `full_name`\n* `version` is a version of your bot, it defaults to `0.1.0`. Used in `full_name`.\n* `full_name` defaults to `name/version`.\nIt is used as a `User-Session` header when making requests, and as `Server` header when\nresponding to Telegram from a webhook server.\n* `token` is an optional field, because usually it is set from command line when running `tinybot.run`.\nHowever, it might be useful for debugging.\nIt is obviously the token which is used for all requests.\n\nYour class should define methods with signarure `handle_xxx(self, data, api)` where `xxx` is one of the update types found [here](https://core.telegram.org/bots/api#getting-updates).\n\nFor example:\n```python\ndef handle_message(self, message, api): pass\n# or\ndef handle_channel_post(self, post, api): pass\n```\n* `self` parameter can contain some additional data, for now it only contains the `update_id` field.\n* `data` parameter is a dict/list-like recursive structure made with `__getattr__`'s\nand `__getitems__`'s in which the received Update JSON object is given.\nWhen you try to get a nonexistent field, `NoSuchElementException` is raised and\nthen handled properly by the `launch_xxx` methods caller.\n* `api` parameter worls similarly, any method call which looks like\n`api.anyMethodCall(**kwargs)` would send appropriate request to the Telegram Bot API.<br>\nWhen you do such a request, Telegram returns JSON in format <br>\n`{\"ok\": true, \"update\": ..data..}`<br>or<br>\n`{\"ok\": false, \"description\": \"..error message..\"}`.<br>\nThis JSON is unwrapped and if ok is false or non-existent, `RequestException` is raised\nwith the description and similarly handled by the `launch_xxx` methods caller.\nElse, the `\"update\"` object is wrapped in the same structure as the `data` parameter and\nis returned from the `api` method call.\n\nAll of the above means that if you want your bot to do multiple get-and-then-send requests,\nyou'll want to arrange your code to first get all the data and only after that send your requests.\nThat way, if any of the data weren't available, any of your mutating requests would not be sent.\n\n## License\nIt is licensed under permissive MIT license which means you can use this code in\nwhatever way possible, as long as you include the LICENSE file (by which you mention my authorship).\nIt is included in the package so you have to do nothing yourself when simply using this library.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/necauqua/tinybot/archive/v1.0.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/necauqua/tinybot", "keywords": "telegram,bot,api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tinybot", "package_url": "https://pypi.org/project/tinybot/", "platform": "", "project_url": "https://pypi.org/project/tinybot/", "project_urls": {"Download": "https://github.com/necauqua/tinybot/archive/v1.0.0.tar.gz", "Homepage": "http://github.com/necauqua/tinybot"}, "release_url": "https://pypi.org/project/tinybot/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Very simple yet flexible Telegram Bot API", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tinybot</h1>\n<p>This is a small and simple library for quickly building Telegram Bots with Python.</p>\n<p>It is made to be dynamic and independent of the Telegram Bot API.\nIt means that whenever a new Telegram API method or callback is added,\nthere is no need to update this library, all calls are dynamic and you can send whatever you like to Telegram.</p>\n<h2>Installation</h2>\n<p>It is published on PyPI so to use it simply install it with pip.</p>\n<pre><code>$ pip install tinybot\n</code></pre>\n<h2>Example</h2>\n<p>Actually working little bot (from which this library was originated) can be found <a href=\"https://github.com/necauqua/county-bot\" rel=\"nofollow\">here</a>.</p>\n<p>Here is a simple example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tinybot</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Assistant</span><span class=\"p\">(</span><span class=\"n\">tinybot</span><span class=\"o\">.</span><span class=\"n\">Bot</span><span class=\"p\">):</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s1\">'0.0.1-SNAPSHOT'</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"s1\">'123456789:token-for-debugging'</span> <span class=\"c1\"># token is not required when using tinybot.run</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s1\">'@all'</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">:</span>\n            <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">sendMessage</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'@necauqua @other_people..'</span><span class=\"p\">)</span>\n            <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">sendMessage</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'[debug] update id '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_id</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># just start longpoll loop for debugging</span>\n    <span class=\"n\">Assistant</span><span class=\"o\">.</span><span class=\"n\">launch_longpoll</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># tinybot.run is a ready-to-use CLI for launching longpoll or webhook and providing the token</span>\n    <span class=\"c1\"># tinybot.run(Assistant, 'necauqua assistant bot')</span>\n</pre>\n<h2>Usage</h2>\n<p>Your bot is a class which derives from <code>tinybot.Bot</code> class.\nYou can start it with a ready-to-use CLI using this standard construct</p>\n<pre><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">tinybot</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">bot_cls</span><span class=\"p\">,</span> <span class=\"n\">bot_description</span><span class=\"p\">)</span>\n</pre>\n<p>All of the bot's logic is defined inside the class deriven from <code>tinybot.Bot</code>.</p>\n<p>It have static fields <code>name</code>, <code>version</code>,<code>full_name</code> and <code>token</code>.</p>\n<ul>\n<li><code>name</code> defaults to the class name and is the name of your bot. Used in <code>full_name</code></li>\n<li><code>version</code> is a version of your bot, it defaults to <code>0.1.0</code>. Used in <code>full_name</code>.</li>\n<li><code>full_name</code> defaults to <code>name/version</code>.\nIt is used as a <code>User-Session</code> header when making requests, and as <code>Server</code> header when\nresponding to Telegram from a webhook server.</li>\n<li><code>token</code> is an optional field, because usually it is set from command line when running <code>tinybot.run</code>.\nHowever, it might be useful for debugging.\nIt is obviously the token which is used for all requests.</li>\n</ul>\n<p>Your class should define methods with signarure <code>handle_xxx(self, data, api)</code> where <code>xxx</code> is one of the update types found <a href=\"https://core.telegram.org/bots/api#getting-updates\" rel=\"nofollow\">here</a>.</p>\n<p>For example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">handle_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"c1\"># or</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_channel_post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre>\n<ul>\n<li><code>self</code> parameter can contain some additional data, for now it only contains the <code>update_id</code> field.</li>\n<li><code>data</code> parameter is a dict/list-like recursive structure made with <code>__getattr__</code>'s\nand <code>__getitems__</code>'s in which the received Update JSON object is given.\nWhen you try to get a nonexistent field, <code>NoSuchElementException</code> is raised and\nthen handled properly by the <code>launch_xxx</code> methods caller.</li>\n<li><code>api</code> parameter worls similarly, any method call which looks like\n<code>api.anyMethodCall(**kwargs)</code> would send appropriate request to the Telegram Bot API.<br>\nWhen you do such a request, Telegram returns JSON in format <br>\n<code>{\"ok\": true, \"update\": ..data..}</code><br>or<br>\n<code>{\"ok\": false, \"description\": \"..error message..\"}</code>.<br>\nThis JSON is unwrapped and if ok is false or non-existent, <code>RequestException</code> is raised\nwith the description and similarly handled by the <code>launch_xxx</code> methods caller.\nElse, the <code>\"update\"</code> object is wrapped in the same structure as the <code>data</code> parameter and\nis returned from the <code>api</code> method call.</li>\n</ul>\n<p>All of the above means that if you want your bot to do multiple get-and-then-send requests,\nyou'll want to arrange your code to first get all the data and only after that send your requests.\nThat way, if any of the data weren't available, any of your mutating requests would not be sent.</p>\n<h2>License</h2>\n<p>It is licensed under permissive MIT license which means you can use this code in\nwhatever way possible, as long as you include the LICENSE file (by which you mention my authorship).\nIt is included in the package so you have to do nothing yourself when simply using this library.</p>\n\n          </div>"}, "last_serial": 3947883, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4d5f6c0fd88e7c7207b8a221b43f9638", "sha256": "2226e6be78845ee5ee4c58a8b8c08eefbff6636eee5d1e07d97b2db760df82b7"}, "downloads": -1, "filename": "tinybot-0.1.5.tar.gz", "has_sig": true, "md5_digest": "4d5f6c0fd88e7c7207b8a221b43f9638", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7659, "upload_time": "2018-06-10T18:06:18", "upload_time_iso_8601": "2018-06-10T18:06:18.354106Z", "url": "https://files.pythonhosted.org/packages/5e/cf/9e8c5bfeb76a22cb9e23f087faa4b0cd47535010436ecde4d9a7b8cd13cd/tinybot-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d5f6c0fd88e7c7207b8a221b43f9638", "sha256": "2226e6be78845ee5ee4c58a8b8c08eefbff6636eee5d1e07d97b2db760df82b7"}, "downloads": -1, "filename": "tinybot-0.1.5.tar.gz", "has_sig": true, "md5_digest": "4d5f6c0fd88e7c7207b8a221b43f9638", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7659, "upload_time": "2018-06-10T18:06:18", "upload_time_iso_8601": "2018-06-10T18:06:18.354106Z", "url": "https://files.pythonhosted.org/packages/5e/cf/9e8c5bfeb76a22cb9e23f087faa4b0cd47535010436ecde4d9a7b8cd13cd/tinybot-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:07 2020"}