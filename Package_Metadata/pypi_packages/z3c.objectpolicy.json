{"info": {"author": "Zope Foundation and Contributors", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "The objectpolicy package makes it easy to override the default\nzope.securitypolicy.zopepolicy on an object by object basis.\n\n.. contents::\n\nThe objectpolicy package makes it easy to override the default\nzope.securitypolicy.zopepolicy on an object by object basis.\n\nBy default all objects use the zopepolicy. Objects that want to have\ntheir own policy should have a marker interface `IObjectPolicyMarker`\nand have an adapter to `IObjectPolicy`.\n\n------\nLevels\n------\n\nThere are two levels supported.\n\n- The low level is the SecurityMap.getCell level.\n  Here are the permissions stored by principal or role.\n  This works also with ZopePolicy as the security policy.\n  Uses Allow, Deny, Unset values.\n  Permissions descend (with ZopePolicy) to child objects or views.\n  See:\n\n  - IObjectPolicy.getPrincipalPermission\n  - IObjectPolicy.getRolePermission\n  - lowlevel.txt\n\n  Installation:\n  Drop the z3c.objectpolicy-configure.zcml in the instance/etc folder.\n\n- The high level is the ISecurityPolicy.checkPermission level.\n  Here the permission is usually `summarized` for the principal by it's\n  roles, groups and object parent/child relations.\n  ZopePolicy has to be overridden by the ObjectsPolicy security policy.\n  Permissions do not decend to child objects or views.\n  Uses True -- access, False -- no access values.\n  See:\n\n  - IObjectPolicy.checkPermission\n  - highlevel.txt\n\n  Installation:\n  Override ZopePolicy in the instance/etc/securitypolicy.zcml\n\n\n----------------------------------\nBasic Setup (for high level tests)\n----------------------------------\n\nGood but not perfect example is the `the user needs to be able to modify\nit's own properties` problem.\n\n  >>> from zope import interface, component\n  >>> from zope.annotation.interfaces import IAttributeAnnotatable\n  >>> from zope.container.interfaces import IContained\n  >>> from zope.container.contained import Contained\n  >>> from z3c.objectpolicy.interfaces import IObjectPolicy\n  >>> from z3c.objectpolicy.interfaces import IObjectPolicyMarker\n  >>> class IPerson(interface.Interface):\n  ...     \"\"\"a person interface for a person class\"\"\"\n  ...\n  >>> class Person(Contained):\n  ...     interface.implements(\n  ...         IObjectPolicyMarker,\n  ...         IAttributeAnnotatable,\n  ...         IPerson)\n  ...     def __init__(self, id, name):\n  ...         self.id = id\n  ...         self.name = name\n  ...         self.groups = []\n  ...\n  >>> class otherKlass(object):\n  ...     #This class does NOT implement IObjectPolicyMarker\n  ...     interface.implements(\n  ...         IAttributeAnnotatable)\n  ...     def __init__(self, id):\n  ...         self.id = id\n\nThese permissions will be allowed for the principal on the Person object\nif the current principal == Person\n\n  >>> ALLOW_FOR_SELF = [\"zope.View\",\n  ...                   \"zope.app.dublincore.view\",\n  ...                   \"zope.ManageContent\"]\n\nCounter to see how many times the adapter fires\n\n  >>> TRIP_WIRE = 0\n\nThis is the custom policy adapter which determines the permission.\nWatch out, this is just a little bit different from the lowlevel example!\n\n  >>> from z3c.objectpolicy.objectpolicy import DefaultObjectPolicyAdapter\n  >>> class PersonPolicy(DefaultObjectPolicyAdapter):\n  ...     component.adapts(IPerson)\n  ...     interface.implements(IObjectPolicy)\n  ...\n  ...     def __init__(self, context):\n  ...         #context is a Person\n  ...         self.context = context\n  ...\n  ...     def checkPermission(self, manager, permissionid):\n  ...         #print permissionid, str(self.context)\n  ...         return self.checkPermissionForParticipation(manager, permissionid)\n  ...\n  ...     def checkPermissionForParticipant(self, manager, principal, permissionid):\n  ...         global TRIP_WIRE\n  ...         TRIP_WIRE += 1\n  ...         if principal.id == self.context.id:\n  ...             #we have the same Person in the participation\n  ...             if permissionid in ALLOW_FOR_SELF:\n  ...                 #we have the Person and the Permission\n  ...                 return True\n  ...\n  ...         #no Person or Permission found\n  ...         #return the Z3 default permissions\n  ...         return super(PersonPolicy, self).checkPermissionForParticipant(\n  ...             manager, principal, permissionid)\n  ...\n  >>> component.provideAdapter(PersonPolicy)\n\nInstall the ObjectPolicy, setup for testing.\n\n  >>> from z3c.objectpolicy.objectpolicy import ObjectPrincipalPermissionManager\n  >>> from z3c.objectpolicy.objectpolicy import ObjectRolePermissionManager\n  >>> from z3c.objectpolicy.objectpolicy import ObjectPolicy\n\n  >>> component.provideAdapter(ObjectPrincipalPermissionManager)\n  >>> component.provideAdapter(ObjectRolePermissionManager)\n\n  >>> bela = Person('b-id', 'bela')\n  >>> joe = Person('j-id', 'joe')\n\n  >>> class Participation:\n  ...     interaction = None\n  >>> participation = Participation()\n  >>> participation.principal = joe\n  >>> import zope.security.management\n  >>> oldPolicy = zope.security.management.setSecurityPolicy(ObjectPolicy)\n  >>> zope.security.management.endInteraction()\n  >>> zope.security.management.newInteraction(participation)\n  >>> interaction = zope.security.management.getInteraction()\n\nLet's see a simple permission check\n-----------------------------------\n\n`joe` has `ManageContent` access to `joe` without granting any permission\n\n  >>> interaction.checkPermission('zope.ManageContent', joe)\n  True\n  >>> TRIP_WIRE\n  1\n\n`joe` has no `SomePermission` access to `joe` because that's not listed\nin ALLOW_FOR_SELF\n\n  >>> interaction.checkPermission('myapp.SomePermission', joe)\n  False\n  >>> TRIP_WIRE\n  2\n\n`joe` has NO `ManageContent` access to `bela`\n\n  >>> interaction.checkPermission('zope.ManageContent', bela)\n  False\n  >>> TRIP_WIRE\n  3\n\n  >>> from zope.securitypolicy.interfaces import IPrincipalPermissionManager\n  >>> prinperBela = IPrincipalPermissionManager(bela)\n  >>> prinperJoe = IPrincipalPermissionManager(joe)\n  >>> prinperBela.grantPermissionToPrincipal('zope.ManageContent', 'j-id')\n\nWhen we grant permission `joe` to `bela`,\n`joe` has `ManageContent` access to `bela`\n\n  >>> interaction.checkPermission('zope.ManageContent', bela)\n  True\n  >>> TRIP_WIRE\n  4\n\nGranting permission works for any arbitrary permission also\n\n  >>> prinperJoe.grantPermissionToPrincipal('myapp.SomePermission', 'j-id')\n  >>> interaction.checkPermission('myapp.SomePermission', joe)\n  True\n  >>> TRIP_WIRE\n  5\n\nObjects without IObjectPolicyMarker behave as before.\nWithout granting -- no permission\n\n  >>> otherObject = otherKlass('o-id')\n  >>> prinperOther = IPrincipalPermissionManager(otherObject)\n  >>> interaction.checkPermission('zope.ManageContent', otherObject)\n  False\n  >>> TRIP_WIRE\n  5\n\n  >>> prinperOther.grantPermissionToPrincipal('zope.ManageContent', 'j-id')\n  >>> interaction.checkPermission('zope.ManageContent', otherObject)\n  True\n  >>> TRIP_WIRE\n  5\n\nCheck what's up when the marker is there, but no adapter\n\n  >>> class otherKlassWOadapter(object):\n  ...     #This class does NOT implement IObjectPolicyMarker\n  ...     interface.implements(\n  ...         IAttributeAnnotatable,\n  ...         IObjectPolicyMarker)\n  ...     def __init__(self, id):\n  ...         self.id = id\n\n  >>> otherObjectWO = otherKlassWOadapter('oa-id')\n  >>> interaction.checkPermission('zope.ManageContent', otherObjectWO)\n  False\n\nNo permission, maybe something should be written to the log?\n\nNow a more complicated, parent-child setup\n------------------------------------------\n\n  >>> from zope.container.sample import SampleContainer\n  >>> from zope.location.location import locate\n  >>> class IPersonContainer(interface.Interface):\n  ...     \"\"\"a person container interface\"\"\"\n  ...\n  >>> class PersonContainer(SampleContainer):\n  ...     interface.implements(\n  ...         IAttributeAnnotatable,\n  ...         IPersonContainer)\n  ...     def __init__(self, id):\n  ...         self.id = id\n  ...         super(PersonContainer, self).__init__()\n  ...\n  >>> class BrowserView(object):\n  ...     interface.implements(\n  ...         IContained)\n  ...\n\nThe layout is:\n  users(PersonContainer)\n    jack(Person)\n      editJack(BrowserView)\n    jane(Person)\n      editJane(BrowserView)\n\n  >>> users = PersonContainer('users')\n  >>> jack = Person('jack-id','jack')\n  >>> users['jack'] = jack\n  >>> locate(jack, users, 'jack')\n  >>> jane = Person('jane-id','jane')\n  >>> users['jane'] = jane\n  >>> locate(jane, users, 'jane')\n\n  >>> editJack = BrowserView()\n  >>> locate(editJack, jack, None)\n  >>> editJane = BrowserView()\n  >>> locate(editJane, jane, None)\n\n  >>> prinperUsers = IPrincipalPermissionManager(users)\n  >>> prinperJack = IPrincipalPermissionManager(jack)\n  >>> prinperJane = IPrincipalPermissionManager(jane)\n\n  >>> participation = Participation()\n\nThe principal acting is jack\n\n  >>> participation.principal = jack\n  >>> zope.security.management.endInteraction()\n  >>> zope.security.management.newInteraction(participation)\n  >>> interaction = zope.security.management.getInteraction()\n\nWhen we don't grant permission, only jack has permission to itself and to it's\neditView.\n\n  >>> interaction.checkPermission('zope.ManageContent', users)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', jack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', editJack)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', jane)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', editJane)\n  False\n\nWhen we grant jane permission, jack still has the same.\n\n  >>> prinperUsers.grantPermissionToPrincipal('zope.ManageContent', 'jane-id')\n  >>> interaction.checkPermission('zope.ManageContent', users)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', jack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', editJack)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', jane)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', editJane)\n  False\n\nWhen we grant jack permission, he will have permission for the whole pack.\n\n  >>> prinperUsers.grantPermissionToPrincipal('zope.ManageContent', 'jack-id')\n  >>> interaction.checkPermission('zope.ManageContent', users)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', jack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', editJack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', jane)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', editJane)\n  True\n\n\nCleanup\n-------\n\nWe clean up the changes we made in these examples:\n\n  >>> zope.security.management.endInteraction()\n  >>> ignore = zope.security.management.setSecurityPolicy(oldPolicy)\n\n\n---------------------------------\nBasic Setup (for low level tests)\n---------------------------------\n\nGood but not perfect example is the `the user needs to be able to modify\nit's own properties` problem.\n\n  >>> from zope import interface, component\n  >>> from zope.annotation.interfaces import IAttributeAnnotatable\n  >>> from zope.container.interfaces import IContained\n  >>> from zope.container.contained import Contained\n  >>> from z3c.objectpolicy.interfaces import IObjectPolicy\n  >>> from z3c.objectpolicy.interfaces import IObjectPolicyMarker\n  >>> class IPerson(interface.Interface):\n  ...     \"\"\"a person interface for a person class\"\"\"\n  ...\n  >>> class Person(Contained):\n  ...     interface.implements(\n  ...         IObjectPolicyMarker,\n  ...         IAttributeAnnotatable,\n  ...         IPerson)\n  ...     def __init__(self, id, name):\n  ...         self.id = id\n  ...         self.name = name\n  ...         self.groups = []\n  ...\n  >>> class otherKlass(object):\n  ...     #This class does NOT implement IObjectPolicyMarker\n  ...     interface.implements(\n  ...         IAttributeAnnotatable)\n  ...     def __init__(self, id):\n  ...         self.id = id\n\nThese permissions will be allowed for the principal on the Person object\nif the current principal == Person\n\n  >>> ALLOW_FOR_SELF = [\"zope.View\",\n  ...                   \"zope.app.dublincore.view\",\n  ...                   \"zope.ManageContent\"]\n\nCounter to see how many times the adapter fires\n\n  >>> TRIP_WIRE = 0\n\nThis is the custom policy adapter which determines the permission.\n\n  >>> from zope.securitypolicy.interfaces import Allow, Deny, Unset\n  >>> from z3c.objectpolicy.objectpolicy import DefaultObjectPolicyAdapter\n  >>> class PersonPolicy(DefaultObjectPolicyAdapter):\n  ...     component.adapts(IPerson)\n  ...     interface.implements(IObjectPolicy)\n  ...\n  ...     def __init__(self, context):\n  ...         #context is a Person\n  ...         self.context = context\n  ...\n  ...     def getPrincipalPermission(self, manager, permissionid, principalid, default):\n  ...         global TRIP_WIRE\n  ...         TRIP_WIRE += 1\n  ...         if principalid == self.context.id:\n  ...             #we have the same Person in the participation\n  ...             if permissionid in ALLOW_FOR_SELF:\n  ...                 #we have the Person and the Permission\n  ...                 return Allow\n  ...\n  ...         #no Person or Permission found\n  ...         #return the Z3 default permissions\n  ...         return super(PersonPolicy, self).getPrincipalPermission(\n  ...             manager, permissionid, principalid, default)\n  ...\n  >>> component.provideAdapter(PersonPolicy)\n\nInstall the ObjectPolicy, setup for testing.\n\n  >>> from z3c.objectpolicy.objectpolicy import ObjectPrincipalPermissionManager\n  >>> from z3c.objectpolicy.objectpolicy import ObjectRolePermissionManager\n\n  >>> component.provideAdapter(ObjectPrincipalPermissionManager)\n  >>> component.provideAdapter(ObjectRolePermissionManager)\n\n  >>> bela = Person('b-id', 'bela')\n  >>> joe = Person('j-id', 'joe')\n\n  >>> class Participation:\n  ...     interaction = None\n  >>> participation = Participation()\n  >>> participation.principal = joe\n  >>> import zope.security.management\n  >>> from zope.securitypolicy.zopepolicy import ZopeSecurityPolicy\n  >>> oldPolicy = zope.security.management.setSecurityPolicy(ZopeSecurityPolicy)\n  >>> zope.security.management.endInteraction()\n  >>> zope.security.management.newInteraction(participation)\n  >>> interaction = zope.security.management.getInteraction()\n\nLet's see a simple permission check\n-----------------------------------\n\n`joe` has `ManageContent` access to `joe` without granting any permission\n\n  >>> interaction.checkPermission('zope.ManageContent', joe)\n  True\n  >>> TRIP_WIRE\n  1\n\n`joe` has no `SomePermission` access to `joe` because that's not listed\nin ALLOW_FOR_SELF\n\n  >>> interaction.checkPermission('myapp.SomePermission', joe)\n  False\n  >>> TRIP_WIRE\n  2\n\n`joe` has NO `ManageContent` access to `bela`\n\n  >>> interaction.checkPermission('zope.ManageContent', bela)\n  False\n  >>> TRIP_WIRE\n  3\n\n  >>> from zope.securitypolicy.interfaces import IPrincipalPermissionManager\n  >>> prinperBela = IPrincipalPermissionManager(bela)\n  >>> prinperJoe = IPrincipalPermissionManager(joe)\n  >>> prinperBela.grantPermissionToPrincipal('zope.ManageContent', 'j-id')\n\nWhen we grant permission `joe` to `bela`,\n`joe` has `ManageContent` access to `bela`\n\n  >>> interaction.checkPermission('zope.ManageContent', bela)\n  True\n  >>> TRIP_WIRE\n  4\n\nGranting permission works for any arbitrary permission also\n\n  >>> prinperJoe.grantPermissionToPrincipal('myapp.SomePermission', 'j-id')\n  >>> interaction.checkPermission('myapp.SomePermission', joe)\n  True\n  >>> TRIP_WIRE\n  5\n\nObjects without IObjectPolicyMarker behave as before.\nWithout granting -- no permission\n\n  >>> otherObject = otherKlass('o-id')\n  >>> prinperOther = IPrincipalPermissionManager(otherObject)\n  >>> interaction.checkPermission('zope.ManageContent', otherObject)\n  False\n  >>> TRIP_WIRE\n  5\n\n  >>> prinperOther.grantPermissionToPrincipal('zope.ManageContent', 'j-id')\n  >>> interaction.checkPermission('zope.ManageContent', otherObject)\n  True\n  >>> TRIP_WIRE\n  5\n\nCheck what's up when the marker is there, but no adapter\n\n  >>> class otherKlassWOadapter(object):\n  ...     #This class does NOT implement IObjectPolicyMarker\n  ...     interface.implements(\n  ...         IAttributeAnnotatable,\n  ...         IObjectPolicyMarker)\n  ...     def __init__(self, id):\n  ...         self.id = id\n\n  >>> otherObjectWO = otherKlassWOadapter('oa-id')\n  >>> interaction.checkPermission('zope.ManageContent', otherObjectWO)\n  False\n\nNo permission, maybe something should be written to the log?\n\nNow a more complicated, parent-child setup\n------------------------------------------\n\n  >>> from zope.container.sample import SampleContainer\n  >>> from zope.location.location import locate\n  >>> class IPersonContainer(interface.Interface):\n  ...     \"\"\"a person container interface\"\"\"\n  ...\n  >>> class PersonContainer(SampleContainer):\n  ...     interface.implements(\n  ...         IAttributeAnnotatable,\n  ...         IPersonContainer)\n  ...     def __init__(self, id):\n  ...         self.id = id\n  ...         super(PersonContainer, self).__init__()\n  ...\n  >>> class BrowserView(object):\n  ...     interface.implements(\n  ...         IContained)\n  ...\n\nThe layout is:\n  users(PersonContainer)\n    jack(Person)\n      editJack(BrowserView)\n    jane(Person)\n      editJane(BrowserView)\n\n  >>> users = PersonContainer('users')\n  >>> jack = Person('jack-id','jack')\n  >>> users['jack'] = jack\n  >>> locate(jack, users, 'jack')\n  >>> jane = Person('jane-id','jane')\n  >>> users['jane'] = jane\n  >>> locate(jane, users, 'jane')\n\n  >>> editJack = BrowserView()\n  >>> locate(editJack, jack, None)\n  >>> editJane = BrowserView()\n  >>> locate(editJane, jane, None)\n\n  >>> prinperUsers = IPrincipalPermissionManager(users)\n  >>> prinperJack = IPrincipalPermissionManager(jack)\n  >>> prinperJane = IPrincipalPermissionManager(jane)\n\n  >>> participation = Participation()\n\nThe principal acting is jack\n\n  >>> participation.principal = jack\n  >>> zope.security.management.endInteraction()\n  >>> zope.security.management.newInteraction(participation)\n  >>> interaction = zope.security.management.getInteraction()\n\nWhen we don't grant permission, only jack has permission to itself and to it's\neditView.\n\n  >>> interaction.checkPermission('zope.ManageContent', users)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', jack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', editJack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', jane)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', editJane)\n  False\n\nWhen we grant jane permission, jack still has the same.\n\n  >>> prinperUsers.grantPermissionToPrincipal('zope.ManageContent', 'jane-id')\n  >>> interaction.checkPermission('zope.ManageContent', users)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', jack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', editJack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', jane)\n  False\n  >>> interaction.checkPermission('zope.ManageContent', editJane)\n  False\n\nWhen we grant jack permission, he will have permission for the whole pack.\n\n  >>> prinperUsers.grantPermissionToPrincipal('zope.ManageContent', 'jack-id')\n  >>> interaction.checkPermission('zope.ManageContent', users)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', jack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', editJack)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', jane)\n  True\n  >>> interaction.checkPermission('zope.ManageContent', editJane)\n  True\n\n\nCleanup\n-------\n\nWe clean up the changes we made in these examples:\n\n  >>> zope.security.management.endInteraction()\n  >>> ignore = zope.security.management.setSecurityPolicy(oldPolicy)\n\n\n-------\nCHANGES\n-------\n\n0.1 (2010-08-10)\n----------------\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://cheeseshop.python.org/pypi/z3c.objectpolicy", "keywords": "zope3 z3c objectpolicy", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "z3c.objectpolicy", "package_url": "https://pypi.org/project/z3c.objectpolicy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.objectpolicy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://cheeseshop.python.org/pypi/z3c.objectpolicy"}, "release_url": "https://pypi.org/project/z3c.objectpolicy/0.1/", "requires_dist": null, "requires_python": null, "summary": "objectpolicy for Zope3", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The objectpolicy package makes it easy to override the default\nzope.securitypolicy.zopepolicy on an object by object basis.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#levels\" id=\"id5\" rel=\"nofollow\">Levels</a></li>\n<li><a href=\"#basic-setup-for-high-level-tests\" id=\"id6\" rel=\"nofollow\">Basic Setup (for high level tests)</a><ul>\n<li><a href=\"#let-s-see-a-simple-permission-check\" id=\"id7\" rel=\"nofollow\">Let\u2019s see a simple permission check</a></li>\n<li><a href=\"#now-a-more-complicated-parent-child-setup\" id=\"id8\" rel=\"nofollow\">Now a more complicated, parent-child setup</a></li>\n<li><a href=\"#cleanup\" id=\"id9\" rel=\"nofollow\">Cleanup</a></li>\n</ul>\n</li>\n<li><a href=\"#basic-setup-for-low-level-tests\" id=\"id10\" rel=\"nofollow\">Basic Setup (for low level tests)</a><ul>\n<li><a href=\"#id1\" id=\"id11\" rel=\"nofollow\">Let\u2019s see a simple permission check</a></li>\n<li><a href=\"#id2\" id=\"id12\" rel=\"nofollow\">Now a more complicated, parent-child setup</a></li>\n<li><a href=\"#id3\" id=\"id13\" rel=\"nofollow\">Cleanup</a></li>\n</ul>\n</li>\n<li><a href=\"#changes\" id=\"id14\" rel=\"nofollow\">CHANGES</a></li>\n</ul>\n</div>\n<p>The objectpolicy package makes it easy to override the default\nzope.securitypolicy.zopepolicy on an object by object basis.</p>\n<p>By default all objects use the zopepolicy. Objects that want to have\ntheir own policy should have a marker interface <cite>IObjectPolicyMarker</cite>\nand have an adapter to <cite>IObjectPolicy</cite>.</p>\n<div id=\"levels\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Levels</a></h2>\n<p>There are two levels supported.</p>\n<ul>\n<li><p>The low level is the SecurityMap.getCell level.\nHere are the permissions stored by principal or role.\nThis works also with ZopePolicy as the security policy.\nUses Allow, Deny, Unset values.\nPermissions descend (with ZopePolicy) to child objects or views.\nSee:</p>\n<ul>\n<li>IObjectPolicy.getPrincipalPermission</li>\n<li>IObjectPolicy.getRolePermission</li>\n<li>lowlevel.txt</li>\n</ul>\n<p>Installation:\nDrop the z3c.objectpolicy-configure.zcml in the instance/etc folder.</p>\n</li>\n<li><p>The high level is the ISecurityPolicy.checkPermission level.\nHere the permission is usually <cite>summarized</cite> for the principal by it\u2019s\nroles, groups and object parent/child relations.\nZopePolicy has to be overridden by the ObjectsPolicy security policy.\nPermissions do not decend to child objects or views.\nUses True \u2013 access, False \u2013 no access values.\nSee:</p>\n<ul>\n<li>IObjectPolicy.checkPermission</li>\n<li>highlevel.txt</li>\n</ul>\n<p>Installation:\nOverride ZopePolicy in the instance/etc/securitypolicy.zcml</p>\n</li>\n</ul>\n</div>\n<div id=\"basic-setup-for-high-level-tests\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Basic Setup (for high level tests)</a></h2>\n<p>Good but not perfect example is the <cite>the user needs to be able to modify\nit\u2019s own properties</cite> problem.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope import interface, component\n&gt;&gt;&gt; from zope.annotation.interfaces import IAttributeAnnotatable\n&gt;&gt;&gt; from zope.container.interfaces import IContained\n&gt;&gt;&gt; from zope.container.contained import Contained\n&gt;&gt;&gt; from z3c.objectpolicy.interfaces import IObjectPolicy\n&gt;&gt;&gt; from z3c.objectpolicy.interfaces import IObjectPolicyMarker\n&gt;&gt;&gt; class IPerson(interface.Interface):\n...     \"\"\"a person interface for a person class\"\"\"\n...\n&gt;&gt;&gt; class Person(Contained):\n...     interface.implements(\n...         IObjectPolicyMarker,\n...         IAttributeAnnotatable,\n...         IPerson)\n...     def __init__(self, id, name):\n...         self.id = id\n...         self.name = name\n...         self.groups = []\n...\n&gt;&gt;&gt; class otherKlass(object):\n...     #This class does NOT implement IObjectPolicyMarker\n...     interface.implements(\n...         IAttributeAnnotatable)\n...     def __init__(self, id):\n...         self.id = id\n</pre>\n</blockquote>\n<p>These permissions will be allowed for the principal on the Person object\nif the current principal == Person</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ALLOW_FOR_SELF = [\"zope.View\",\n...                   \"zope.app.dublincore.view\",\n...                   \"zope.ManageContent\"]\n</pre>\n</blockquote>\n<p>Counter to see how many times the adapter fires</p>\n<blockquote>\n<pre>&gt;&gt;&gt; TRIP_WIRE = 0\n</pre>\n</blockquote>\n<p>This is the custom policy adapter which determines the permission.\nWatch out, this is just a little bit different from the lowlevel example!</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.objectpolicy.objectpolicy import DefaultObjectPolicyAdapter\n&gt;&gt;&gt; class PersonPolicy(DefaultObjectPolicyAdapter):\n...     component.adapts(IPerson)\n...     interface.implements(IObjectPolicy)\n...\n...     def __init__(self, context):\n...         #context is a Person\n...         self.context = context\n...\n...     def checkPermission(self, manager, permissionid):\n...         #print permissionid, str(self.context)\n...         return self.checkPermissionForParticipation(manager, permissionid)\n...\n...     def checkPermissionForParticipant(self, manager, principal, permissionid):\n...         global TRIP_WIRE\n...         TRIP_WIRE += 1\n...         if principal.id == self.context.id:\n...             #we have the same Person in the participation\n...             if permissionid in ALLOW_FOR_SELF:\n...                 #we have the Person and the Permission\n...                 return True\n...\n...         #no Person or Permission found\n...         #return the Z3 default permissions\n...         return super(PersonPolicy, self).checkPermissionForParticipant(\n...             manager, principal, permissionid)\n...\n&gt;&gt;&gt; component.provideAdapter(PersonPolicy)\n</pre>\n</blockquote>\n<p>Install the ObjectPolicy, setup for testing.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.objectpolicy.objectpolicy import ObjectPrincipalPermissionManager\n&gt;&gt;&gt; from z3c.objectpolicy.objectpolicy import ObjectRolePermissionManager\n&gt;&gt;&gt; from z3c.objectpolicy.objectpolicy import ObjectPolicy\n</pre>\n<pre>&gt;&gt;&gt; component.provideAdapter(ObjectPrincipalPermissionManager)\n&gt;&gt;&gt; component.provideAdapter(ObjectRolePermissionManager)\n</pre>\n<pre>&gt;&gt;&gt; bela = Person('b-id', 'bela')\n&gt;&gt;&gt; joe = Person('j-id', 'joe')\n</pre>\n<pre>&gt;&gt;&gt; class Participation:\n...     interaction = None\n&gt;&gt;&gt; participation = Participation()\n&gt;&gt;&gt; participation.principal = joe\n&gt;&gt;&gt; import zope.security.management\n&gt;&gt;&gt; oldPolicy = zope.security.management.setSecurityPolicy(ObjectPolicy)\n&gt;&gt;&gt; zope.security.management.endInteraction()\n&gt;&gt;&gt; zope.security.management.newInteraction(participation)\n&gt;&gt;&gt; interaction = zope.security.management.getInteraction()\n</pre>\n</blockquote>\n<div id=\"let-s-see-a-simple-permission-check\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Let\u2019s see a simple permission check</a></h3>\n<p><cite>joe</cite> has <cite>ManageContent</cite> access to <cite>joe</cite> without granting any permission</p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', joe)\nTrue\n&gt;&gt;&gt; TRIP_WIRE\n1\n</pre>\n</blockquote>\n<p><cite>joe</cite> has no <cite>SomePermission</cite> access to <cite>joe</cite> because that\u2019s not listed\nin ALLOW_FOR_SELF</p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('myapp.SomePermission', joe)\nFalse\n&gt;&gt;&gt; TRIP_WIRE\n2\n</pre>\n</blockquote>\n<p><cite>joe</cite> has NO <cite>ManageContent</cite> access to <cite>bela</cite></p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', bela)\nFalse\n&gt;&gt;&gt; TRIP_WIRE\n3\n</pre>\n<pre>&gt;&gt;&gt; from zope.securitypolicy.interfaces import IPrincipalPermissionManager\n&gt;&gt;&gt; prinperBela = IPrincipalPermissionManager(bela)\n&gt;&gt;&gt; prinperJoe = IPrincipalPermissionManager(joe)\n&gt;&gt;&gt; prinperBela.grantPermissionToPrincipal('zope.ManageContent', 'j-id')\n</pre>\n</blockquote>\n<p>When we grant permission <cite>joe</cite> to <cite>bela</cite>,\n<cite>joe</cite> has <cite>ManageContent</cite> access to <cite>bela</cite></p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', bela)\nTrue\n&gt;&gt;&gt; TRIP_WIRE\n4\n</pre>\n</blockquote>\n<p>Granting permission works for any arbitrary permission also</p>\n<blockquote>\n<pre>&gt;&gt;&gt; prinperJoe.grantPermissionToPrincipal('myapp.SomePermission', 'j-id')\n&gt;&gt;&gt; interaction.checkPermission('myapp.SomePermission', joe)\nTrue\n&gt;&gt;&gt; TRIP_WIRE\n5\n</pre>\n</blockquote>\n<p>Objects without IObjectPolicyMarker behave as before.\nWithout granting \u2013 no permission</p>\n<blockquote>\n<pre>&gt;&gt;&gt; otherObject = otherKlass('o-id')\n&gt;&gt;&gt; prinperOther = IPrincipalPermissionManager(otherObject)\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', otherObject)\nFalse\n&gt;&gt;&gt; TRIP_WIRE\n5\n</pre>\n<pre>&gt;&gt;&gt; prinperOther.grantPermissionToPrincipal('zope.ManageContent', 'j-id')\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', otherObject)\nTrue\n&gt;&gt;&gt; TRIP_WIRE\n5\n</pre>\n</blockquote>\n<p>Check what\u2019s up when the marker is there, but no adapter</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class otherKlassWOadapter(object):\n...     #This class does NOT implement IObjectPolicyMarker\n...     interface.implements(\n...         IAttributeAnnotatable,\n...         IObjectPolicyMarker)\n...     def __init__(self, id):\n...         self.id = id\n</pre>\n<pre>&gt;&gt;&gt; otherObjectWO = otherKlassWOadapter('oa-id')\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', otherObjectWO)\nFalse\n</pre>\n</blockquote>\n<p>No permission, maybe something should be written to the log?</p>\n</div>\n<div id=\"now-a-more-complicated-parent-child-setup\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Now a more complicated, parent-child setup</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.container.sample import SampleContainer\n&gt;&gt;&gt; from zope.location.location import locate\n&gt;&gt;&gt; class IPersonContainer(interface.Interface):\n...     \"\"\"a person container interface\"\"\"\n...\n&gt;&gt;&gt; class PersonContainer(SampleContainer):\n...     interface.implements(\n...         IAttributeAnnotatable,\n...         IPersonContainer)\n...     def __init__(self, id):\n...         self.id = id\n...         super(PersonContainer, self).__init__()\n...\n&gt;&gt;&gt; class BrowserView(object):\n...     interface.implements(\n...         IContained)\n...\n</pre>\n</blockquote>\n<dl>\n<dt>The layout is:</dt>\n<dd><dl>\n<dt>users(PersonContainer)</dt>\n<dd><dl>\n<dt>jack(Person)</dt>\n<dd>editJack(BrowserView)</dd>\n<dt>jane(Person)</dt>\n<dd>editJane(BrowserView)</dd>\n</dl>\n</dd>\n</dl>\n<pre>&gt;&gt;&gt; users = PersonContainer('users')\n&gt;&gt;&gt; jack = Person('jack-id','jack')\n&gt;&gt;&gt; users['jack'] = jack\n&gt;&gt;&gt; locate(jack, users, 'jack')\n&gt;&gt;&gt; jane = Person('jane-id','jane')\n&gt;&gt;&gt; users['jane'] = jane\n&gt;&gt;&gt; locate(jane, users, 'jane')\n</pre>\n<pre>&gt;&gt;&gt; editJack = BrowserView()\n&gt;&gt;&gt; locate(editJack, jack, None)\n&gt;&gt;&gt; editJane = BrowserView()\n&gt;&gt;&gt; locate(editJane, jane, None)\n</pre>\n<pre>&gt;&gt;&gt; prinperUsers = IPrincipalPermissionManager(users)\n&gt;&gt;&gt; prinperJack = IPrincipalPermissionManager(jack)\n&gt;&gt;&gt; prinperJane = IPrincipalPermissionManager(jane)\n</pre>\n<pre>&gt;&gt;&gt; participation = Participation()\n</pre>\n</dd>\n</dl>\n<p>The principal acting is jack</p>\n<blockquote>\n<pre>&gt;&gt;&gt; participation.principal = jack\n&gt;&gt;&gt; zope.security.management.endInteraction()\n&gt;&gt;&gt; zope.security.management.newInteraction(participation)\n&gt;&gt;&gt; interaction = zope.security.management.getInteraction()\n</pre>\n</blockquote>\n<p>When we don\u2019t grant permission, only jack has permission to itself and to it\u2019s\neditView.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', users)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJack)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jane)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJane)\nFalse\n</pre>\n</blockquote>\n<p>When we grant jane permission, jack still has the same.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; prinperUsers.grantPermissionToPrincipal('zope.ManageContent', 'jane-id')\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', users)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJack)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jane)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJane)\nFalse\n</pre>\n</blockquote>\n<p>When we grant jack permission, he will have permission for the whole pack.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; prinperUsers.grantPermissionToPrincipal('zope.ManageContent', 'jack-id')\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', users)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jane)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJane)\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"cleanup\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Cleanup</a></h3>\n<p>We clean up the changes we made in these examples:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.security.management.endInteraction()\n&gt;&gt;&gt; ignore = zope.security.management.setSecurityPolicy(oldPolicy)\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"basic-setup-for-low-level-tests\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Basic Setup (for low level tests)</a></h2>\n<p>Good but not perfect example is the <cite>the user needs to be able to modify\nit\u2019s own properties</cite> problem.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope import interface, component\n&gt;&gt;&gt; from zope.annotation.interfaces import IAttributeAnnotatable\n&gt;&gt;&gt; from zope.container.interfaces import IContained\n&gt;&gt;&gt; from zope.container.contained import Contained\n&gt;&gt;&gt; from z3c.objectpolicy.interfaces import IObjectPolicy\n&gt;&gt;&gt; from z3c.objectpolicy.interfaces import IObjectPolicyMarker\n&gt;&gt;&gt; class IPerson(interface.Interface):\n...     \"\"\"a person interface for a person class\"\"\"\n...\n&gt;&gt;&gt; class Person(Contained):\n...     interface.implements(\n...         IObjectPolicyMarker,\n...         IAttributeAnnotatable,\n...         IPerson)\n...     def __init__(self, id, name):\n...         self.id = id\n...         self.name = name\n...         self.groups = []\n...\n&gt;&gt;&gt; class otherKlass(object):\n...     #This class does NOT implement IObjectPolicyMarker\n...     interface.implements(\n...         IAttributeAnnotatable)\n...     def __init__(self, id):\n...         self.id = id\n</pre>\n</blockquote>\n<p>These permissions will be allowed for the principal on the Person object\nif the current principal == Person</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ALLOW_FOR_SELF = [\"zope.View\",\n...                   \"zope.app.dublincore.view\",\n...                   \"zope.ManageContent\"]\n</pre>\n</blockquote>\n<p>Counter to see how many times the adapter fires</p>\n<blockquote>\n<pre>&gt;&gt;&gt; TRIP_WIRE = 0\n</pre>\n</blockquote>\n<p>This is the custom policy adapter which determines the permission.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.securitypolicy.interfaces import Allow, Deny, Unset\n&gt;&gt;&gt; from z3c.objectpolicy.objectpolicy import DefaultObjectPolicyAdapter\n&gt;&gt;&gt; class PersonPolicy(DefaultObjectPolicyAdapter):\n...     component.adapts(IPerson)\n...     interface.implements(IObjectPolicy)\n...\n...     def __init__(self, context):\n...         #context is a Person\n...         self.context = context\n...\n...     def getPrincipalPermission(self, manager, permissionid, principalid, default):\n...         global TRIP_WIRE\n...         TRIP_WIRE += 1\n...         if principalid == self.context.id:\n...             #we have the same Person in the participation\n...             if permissionid in ALLOW_FOR_SELF:\n...                 #we have the Person and the Permission\n...                 return Allow\n...\n...         #no Person or Permission found\n...         #return the Z3 default permissions\n...         return super(PersonPolicy, self).getPrincipalPermission(\n...             manager, permissionid, principalid, default)\n...\n&gt;&gt;&gt; component.provideAdapter(PersonPolicy)\n</pre>\n</blockquote>\n<p>Install the ObjectPolicy, setup for testing.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.objectpolicy.objectpolicy import ObjectPrincipalPermissionManager\n&gt;&gt;&gt; from z3c.objectpolicy.objectpolicy import ObjectRolePermissionManager\n</pre>\n<pre>&gt;&gt;&gt; component.provideAdapter(ObjectPrincipalPermissionManager)\n&gt;&gt;&gt; component.provideAdapter(ObjectRolePermissionManager)\n</pre>\n<pre>&gt;&gt;&gt; bela = Person('b-id', 'bela')\n&gt;&gt;&gt; joe = Person('j-id', 'joe')\n</pre>\n<pre>&gt;&gt;&gt; class Participation:\n...     interaction = None\n&gt;&gt;&gt; participation = Participation()\n&gt;&gt;&gt; participation.principal = joe\n&gt;&gt;&gt; import zope.security.management\n&gt;&gt;&gt; from zope.securitypolicy.zopepolicy import ZopeSecurityPolicy\n&gt;&gt;&gt; oldPolicy = zope.security.management.setSecurityPolicy(ZopeSecurityPolicy)\n&gt;&gt;&gt; zope.security.management.endInteraction()\n&gt;&gt;&gt; zope.security.management.newInteraction(participation)\n&gt;&gt;&gt; interaction = zope.security.management.getInteraction()\n</pre>\n</blockquote>\n<div id=\"id1\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Let\u2019s see a simple permission check</a></h3>\n<p><cite>joe</cite> has <cite>ManageContent</cite> access to <cite>joe</cite> without granting any permission</p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', joe)\nTrue\n&gt;&gt;&gt; TRIP_WIRE\n1\n</pre>\n</blockquote>\n<p><cite>joe</cite> has no <cite>SomePermission</cite> access to <cite>joe</cite> because that\u2019s not listed\nin ALLOW_FOR_SELF</p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('myapp.SomePermission', joe)\nFalse\n&gt;&gt;&gt; TRIP_WIRE\n2\n</pre>\n</blockquote>\n<p><cite>joe</cite> has NO <cite>ManageContent</cite> access to <cite>bela</cite></p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', bela)\nFalse\n&gt;&gt;&gt; TRIP_WIRE\n3\n</pre>\n<pre>&gt;&gt;&gt; from zope.securitypolicy.interfaces import IPrincipalPermissionManager\n&gt;&gt;&gt; prinperBela = IPrincipalPermissionManager(bela)\n&gt;&gt;&gt; prinperJoe = IPrincipalPermissionManager(joe)\n&gt;&gt;&gt; prinperBela.grantPermissionToPrincipal('zope.ManageContent', 'j-id')\n</pre>\n</blockquote>\n<p>When we grant permission <cite>joe</cite> to <cite>bela</cite>,\n<cite>joe</cite> has <cite>ManageContent</cite> access to <cite>bela</cite></p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', bela)\nTrue\n&gt;&gt;&gt; TRIP_WIRE\n4\n</pre>\n</blockquote>\n<p>Granting permission works for any arbitrary permission also</p>\n<blockquote>\n<pre>&gt;&gt;&gt; prinperJoe.grantPermissionToPrincipal('myapp.SomePermission', 'j-id')\n&gt;&gt;&gt; interaction.checkPermission('myapp.SomePermission', joe)\nTrue\n&gt;&gt;&gt; TRIP_WIRE\n5\n</pre>\n</blockquote>\n<p>Objects without IObjectPolicyMarker behave as before.\nWithout granting \u2013 no permission</p>\n<blockquote>\n<pre>&gt;&gt;&gt; otherObject = otherKlass('o-id')\n&gt;&gt;&gt; prinperOther = IPrincipalPermissionManager(otherObject)\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', otherObject)\nFalse\n&gt;&gt;&gt; TRIP_WIRE\n5\n</pre>\n<pre>&gt;&gt;&gt; prinperOther.grantPermissionToPrincipal('zope.ManageContent', 'j-id')\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', otherObject)\nTrue\n&gt;&gt;&gt; TRIP_WIRE\n5\n</pre>\n</blockquote>\n<p>Check what\u2019s up when the marker is there, but no adapter</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class otherKlassWOadapter(object):\n...     #This class does NOT implement IObjectPolicyMarker\n...     interface.implements(\n...         IAttributeAnnotatable,\n...         IObjectPolicyMarker)\n...     def __init__(self, id):\n...         self.id = id\n</pre>\n<pre>&gt;&gt;&gt; otherObjectWO = otherKlassWOadapter('oa-id')\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', otherObjectWO)\nFalse\n</pre>\n</blockquote>\n<p>No permission, maybe something should be written to the log?</p>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Now a more complicated, parent-child setup</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.container.sample import SampleContainer\n&gt;&gt;&gt; from zope.location.location import locate\n&gt;&gt;&gt; class IPersonContainer(interface.Interface):\n...     \"\"\"a person container interface\"\"\"\n...\n&gt;&gt;&gt; class PersonContainer(SampleContainer):\n...     interface.implements(\n...         IAttributeAnnotatable,\n...         IPersonContainer)\n...     def __init__(self, id):\n...         self.id = id\n...         super(PersonContainer, self).__init__()\n...\n&gt;&gt;&gt; class BrowserView(object):\n...     interface.implements(\n...         IContained)\n...\n</pre>\n</blockquote>\n<dl>\n<dt>The layout is:</dt>\n<dd><dl>\n<dt>users(PersonContainer)</dt>\n<dd><dl>\n<dt>jack(Person)</dt>\n<dd>editJack(BrowserView)</dd>\n<dt>jane(Person)</dt>\n<dd>editJane(BrowserView)</dd>\n</dl>\n</dd>\n</dl>\n<pre>&gt;&gt;&gt; users = PersonContainer('users')\n&gt;&gt;&gt; jack = Person('jack-id','jack')\n&gt;&gt;&gt; users['jack'] = jack\n&gt;&gt;&gt; locate(jack, users, 'jack')\n&gt;&gt;&gt; jane = Person('jane-id','jane')\n&gt;&gt;&gt; users['jane'] = jane\n&gt;&gt;&gt; locate(jane, users, 'jane')\n</pre>\n<pre>&gt;&gt;&gt; editJack = BrowserView()\n&gt;&gt;&gt; locate(editJack, jack, None)\n&gt;&gt;&gt; editJane = BrowserView()\n&gt;&gt;&gt; locate(editJane, jane, None)\n</pre>\n<pre>&gt;&gt;&gt; prinperUsers = IPrincipalPermissionManager(users)\n&gt;&gt;&gt; prinperJack = IPrincipalPermissionManager(jack)\n&gt;&gt;&gt; prinperJane = IPrincipalPermissionManager(jane)\n</pre>\n<pre>&gt;&gt;&gt; participation = Participation()\n</pre>\n</dd>\n</dl>\n<p>The principal acting is jack</p>\n<blockquote>\n<pre>&gt;&gt;&gt; participation.principal = jack\n&gt;&gt;&gt; zope.security.management.endInteraction()\n&gt;&gt;&gt; zope.security.management.newInteraction(participation)\n&gt;&gt;&gt; interaction = zope.security.management.getInteraction()\n</pre>\n</blockquote>\n<p>When we don\u2019t grant permission, only jack has permission to itself and to it\u2019s\neditView.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', users)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jane)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJane)\nFalse\n</pre>\n</blockquote>\n<p>When we grant jane permission, jack still has the same.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; prinperUsers.grantPermissionToPrincipal('zope.ManageContent', 'jane-id')\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', users)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jane)\nFalse\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJane)\nFalse\n</pre>\n</blockquote>\n<p>When we grant jack permission, he will have permission for the whole pack.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; prinperUsers.grantPermissionToPrincipal('zope.ManageContent', 'jack-id')\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', users)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJack)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', jane)\nTrue\n&gt;&gt;&gt; interaction.checkPermission('zope.ManageContent', editJane)\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Cleanup</a></h3>\n<p>We clean up the changes we made in these examples:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.security.management.endInteraction()\n&gt;&gt;&gt; ignore = zope.security.management.setSecurityPolicy(oldPolicy)\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id14\" rel=\"nofollow\">CHANGES</a></h2>\n<h2 id=\"id4\"><span class=\"section-subtitle\">0.1 (2010-08-10)</span></h2>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 802058, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b6bda9a4b499fdb65799eb861c22ba41", "sha256": "be202c5b8e1798d3981b3108f8f35ae4d6cce10b8dee30c5f902a88ce7a7abc7"}, "downloads": -1, "filename": "z3c.objectpolicy-0.1.tar.gz", "has_sig": false, "md5_digest": "b6bda9a4b499fdb65799eb861c22ba41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16237, "upload_time": "2010-08-10T08:18:00", "upload_time_iso_8601": "2010-08-10T08:18:00.593080Z", "url": "https://files.pythonhosted.org/packages/e8/99/26e87f3ec2c63ea86f9db6078fda12ac3497062af17494dd1c7f4bcc3ebb/z3c.objectpolicy-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6bda9a4b499fdb65799eb861c22ba41", "sha256": "be202c5b8e1798d3981b3108f8f35ae4d6cce10b8dee30c5f902a88ce7a7abc7"}, "downloads": -1, "filename": "z3c.objectpolicy-0.1.tar.gz", "has_sig": false, "md5_digest": "b6bda9a4b499fdb65799eb861c22ba41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16237, "upload_time": "2010-08-10T08:18:00", "upload_time_iso_8601": "2010-08-10T08:18:00.593080Z", "url": "https://files.pythonhosted.org/packages/e8/99/26e87f3ec2c63ea86f9db6078fda12ac3497062af17494dd1c7f4bcc3ebb/z3c.objectpolicy-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:52 2020"}