{"info": {"author": "Photocrowd", "author_email": "devteam@photocrowd.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Django cursor pagination [![Build Status](https://travis-ci.org/photocrowd/django-cursor-pagination.svg?branch=master)](https://travis-ci.org/photocrowd/django-cursor-pagination)\n========================\n\nA cursor based pagination system for Django. Instead of refering to specific\npages by number, we give every item in the queryset a cursor based on its\nordering values. We then ask for subsequent records by asking for records\n*after* the cursor of the last item we currently have. Similarly we can ask for\nrecords *before* the cursor of the first item to navigate back through the\nlist.\n\nThis approach has two major advantages over traditional pagination. Firstly, it\nensures that when new data is written into the table, records cannot be moved\nonto the next page. Secondly, it is much faster to query against the database\nas we are not using very large offset values.\n\nThere are some significant drawbacks over \"traditional\" pagination. The data\nmust be ordered by some database field(s) which are unique across all records.\nA typical use case would be ordering by a creation timestamp and an id. It is\nalso more difficult to get the range of possible pages for the data.\n\nThe inspiration for this project is largely taken from [this\npost](http://cra.mr/2011/03/08/building-cursors-for-the-disqus-api) by David\nCramer, and the connection spec for [Relay\nGraphQL](https://facebook.github.io/relay/graphql/connections.htm). Much of the\nimplementation is inspired by [Django rest framework's Cursor\npagination.](https://github.com/tomchristie/django-rest-framework/blob/9b56dda91850a07cfaecbe972e0f586434b965c3/rest_framework/pagination.py#L407-L707).\nThe main difference between the Disqus approach and the one used here is that\nwe require the ordering to be totally determinate instead of using offsets.\n\n\nInstallation\n------------\n\n```\npip install django-cursor-pagination\n```\n\nUsage\n-----\n\n```python\nfrom cursor_pagination import CursorPaginator\n\nfrom myapp.models import Post\n\n\ndef posts_api(request, after=None):\n    qs = Post.objects.all()\n    page_size = 10\n    paginator = CursorPaginator(qs, ordering=('-created', '-id'))\n    page = paginator.page(first=page_size, after=after)\n    data = {\n        'objects': [serialize_page(p) for p in page],\n        'has_next_page': page.has_next,\n        'last_cursor': paginator.cursor(page[-1])\n    }\n    return data\n```\n\nReverse pagination can be achieved by using the `last` and `before` arguments\nto `paginator.page`.\n\nCaveats\n-------\n\n- The ordering specified **must** uniquely identify the object.\n- If there are multiple ordering fields, then they must all have the same\n  direction\n- No support for multiple ordering fields in SQLite as it does not support\n  tuple comparison.\n- If a cursor is given and it does not refer to a valid object, the values of\n  `has_previous` (for `after`) or `has_next` (for `before`) will always return\n  `True`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/photocrowd/django-cursor-pagination", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-cursor-pagination", "package_url": "https://pypi.org/project/django-cursor-pagination/", "platform": "", "project_url": "https://pypi.org/project/django-cursor-pagination/", "project_urls": {"Homepage": "https://github.com/photocrowd/django-cursor-pagination"}, "release_url": "https://pypi.org/project/django-cursor-pagination/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Cursor based pagination for Django", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django cursor pagination <a href=\"https://travis-ci.org/photocrowd/django-cursor-pagination\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe97001f7879193d4fb81b8a3a67805d7295e089/68747470733a2f2f7472617669732d63692e6f72672f70686f746f63726f77642f646a616e676f2d637572736f722d706167696e6174696f6e2e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>A cursor based pagination system for Django. Instead of refering to specific\npages by number, we give every item in the queryset a cursor based on its\nordering values. We then ask for subsequent records by asking for records\n<em>after</em> the cursor of the last item we currently have. Similarly we can ask for\nrecords <em>before</em> the cursor of the first item to navigate back through the\nlist.</p>\n<p>This approach has two major advantages over traditional pagination. Firstly, it\nensures that when new data is written into the table, records cannot be moved\nonto the next page. Secondly, it is much faster to query against the database\nas we are not using very large offset values.</p>\n<p>There are some significant drawbacks over \"traditional\" pagination. The data\nmust be ordered by some database field(s) which are unique across all records.\nA typical use case would be ordering by a creation timestamp and an id. It is\nalso more difficult to get the range of possible pages for the data.</p>\n<p>The inspiration for this project is largely taken from <a href=\"http://cra.mr/2011/03/08/building-cursors-for-the-disqus-api\" rel=\"nofollow\">this\npost</a> by David\nCramer, and the connection spec for <a href=\"https://facebook.github.io/relay/graphql/connections.htm\" rel=\"nofollow\">Relay\nGraphQL</a>. Much of the\nimplementation is inspired by <a href=\"https://github.com/tomchristie/django-rest-framework/blob/9b56dda91850a07cfaecbe972e0f586434b965c3/rest_framework/pagination.py#L407-L707\" rel=\"nofollow\">Django rest framework's Cursor\npagination.</a>.\nThe main difference between the Disqus approach and the one used here is that\nwe require the ordering to be totally determinate instead of using offsets.</p>\n<h2>Installation</h2>\n<pre><code>pip install django-cursor-pagination\n</code></pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cursor_pagination</span> <span class=\"kn\">import</span> <span class=\"n\">CursorPaginator</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">posts_api</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">page_size</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">CursorPaginator</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"p\">,</span> <span class=\"n\">ordering</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'-created'</span><span class=\"p\">,</span> <span class=\"s1\">'-id'</span><span class=\"p\">))</span>\n    <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"n\">page_size</span><span class=\"p\">,</span> <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"n\">after</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'objects'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">serialize_page</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">page</span><span class=\"p\">],</span>\n        <span class=\"s1\">'has_next_page'</span><span class=\"p\">:</span> <span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">has_next</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_cursor'</span><span class=\"p\">:</span> <span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span>\n</pre>\n<p>Reverse pagination can be achieved by using the <code>last</code> and <code>before</code> arguments\nto <code>paginator.page</code>.</p>\n<h2>Caveats</h2>\n<ul>\n<li>The ordering specified <strong>must</strong> uniquely identify the object.</li>\n<li>If there are multiple ordering fields, then they must all have the same\ndirection</li>\n<li>No support for multiple ordering fields in SQLite as it does not support\ntuple comparison.</li>\n<li>If a cursor is given and it does not refer to a valid object, the values of\n<code>has_previous</code> (for <code>after</code>) or <code>has_next</code> (for <code>before</code>) will always return\n<code>True</code>.</li>\n</ul>\n\n          </div>"}, "last_serial": 4725568, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0c54c9f91b568681ee8ac7c5d1b6c259", "sha256": "6af5a1bd37e8f668bb6973bce9f52e6a99b3ec3f2202b36b7c5632ea2a4d8f22"}, "downloads": -1, "filename": "django_cursor_pagination-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0c54c9f91b568681ee8ac7c5d1b6c259", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 3586, "upload_time": "2016-05-23T14:39:40", "upload_time_iso_8601": "2016-05-23T14:39:40.210963Z", "url": "https://files.pythonhosted.org/packages/1e/c0/ba308ca0f11bb426b3f8720ac670d350a7d26c04585078271db04be63072/django_cursor_pagination-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e983260386bda05d5bb3474be0369ace", "sha256": "7586059140ce862bb9b10997514535fd3c22f8fe47a56d0a70e88faddbafd44c"}, "downloads": -1, "filename": "django-cursor-pagination-0.1.tar.gz", "has_sig": false, "md5_digest": "e983260386bda05d5bb3474be0369ace", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2178, "upload_time": "2016-05-23T14:39:32", "upload_time_iso_8601": "2016-05-23T14:39:32.070975Z", "url": "https://files.pythonhosted.org/packages/23/3d/7af970ce58503cb3e90e547e765c49ed0c4945a594a706e9615fe05967f7/django-cursor-pagination-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "93d1ff53ab00ed44ce7c35ef3856dde0", "sha256": "70f3ba8f5bd0d7c1c4484e8b19ac64116553db020546740773502f1f6086f9e2"}, "downloads": -1, "filename": "django-cursor-pagination-0.1.1.tar.gz", "has_sig": false, "md5_digest": "93d1ff53ab00ed44ce7c35ef3856dde0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2287, "upload_time": "2016-06-01T15:57:44", "upload_time_iso_8601": "2016-06-01T15:57:44.704467Z", "url": "https://files.pythonhosted.org/packages/cc/66/09655d87e222cf79902f41e124b12bc8932670a26d9ce88960952693e5fd/django-cursor-pagination-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c7f4db8426fa35dca97d3a46670d0405", "sha256": "51fe7a40420973ab0c31abbbd78a4454756913f0f5af40a5dc80e863d3e11bf9"}, "downloads": -1, "filename": "django-cursor-pagination-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c7f4db8426fa35dca97d3a46670d0405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2327, "upload_time": "2017-02-14T11:00:43", "upload_time_iso_8601": "2017-02-14T11:00:43.491257Z", "url": "https://files.pythonhosted.org/packages/7b/7a/399cff630c6697112f084cdd467d92833acca64c82f77c735250204b80a7/django-cursor-pagination-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0812146db87bc1f8d8e826a27f9b34d2", "sha256": "b0266177c91b54ad2a70a9f97898b1c62b40f73608d6516e6054b829b3cfe27d"}, "downloads": -1, "filename": "django-cursor-pagination-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0812146db87bc1f8d8e826a27f9b34d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3822, "upload_time": "2018-07-19T23:00:35", "upload_time_iso_8601": "2018-07-19T23:00:35.843959Z", "url": "https://files.pythonhosted.org/packages/c1/4e/376fa39ae5cb5a495dd4f94cf011e8e48a31528629789ec934cde0e12d44/django-cursor-pagination-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "46d897d6cb0eaa7045a981dda1f269a1", "sha256": "0a738fb24d1e52b28556054804a7cb6cc76c2c32019299d3321fc1c77be49c73"}, "downloads": -1, "filename": "django_cursor_pagination-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "46d897d6cb0eaa7045a981dda1f269a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5582, "upload_time": "2019-01-22T11:25:17", "upload_time_iso_8601": "2019-01-22T11:25:17.019474Z", "url": "https://files.pythonhosted.org/packages/9f/4b/c86137e613c9eedfb360a04697dc0a961c9b001b63e520ccdb61e41ce89c/django_cursor_pagination-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c409268f184c9a299c5d5d335805adf2", "sha256": "063fce867442c97798a247a306f9d889374eb630a3246b15493f08b72d3dbcd7"}, "downloads": -1, "filename": "django-cursor-pagination-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c409268f184c9a299c5d5d335805adf2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4361, "upload_time": "2019-01-22T11:25:18", "upload_time_iso_8601": "2019-01-22T11:25:18.531620Z", "url": "https://files.pythonhosted.org/packages/e9/14/2f5e3818cac19edd23aec4e40f6ea33fd4cc00d4b42b094ece3515b9e5e2/django-cursor-pagination-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "46d897d6cb0eaa7045a981dda1f269a1", "sha256": "0a738fb24d1e52b28556054804a7cb6cc76c2c32019299d3321fc1c77be49c73"}, "downloads": -1, "filename": "django_cursor_pagination-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "46d897d6cb0eaa7045a981dda1f269a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5582, "upload_time": "2019-01-22T11:25:17", "upload_time_iso_8601": "2019-01-22T11:25:17.019474Z", "url": "https://files.pythonhosted.org/packages/9f/4b/c86137e613c9eedfb360a04697dc0a961c9b001b63e520ccdb61e41ce89c/django_cursor_pagination-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c409268f184c9a299c5d5d335805adf2", "sha256": "063fce867442c97798a247a306f9d889374eb630a3246b15493f08b72d3dbcd7"}, "downloads": -1, "filename": "django-cursor-pagination-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c409268f184c9a299c5d5d335805adf2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4361, "upload_time": "2019-01-22T11:25:18", "upload_time_iso_8601": "2019-01-22T11:25:18.531620Z", "url": "https://files.pythonhosted.org/packages/e9/14/2f5e3818cac19edd23aec4e40f6ea33fd4cc00d4b42b094ece3515b9e5e2/django-cursor-pagination-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:44 2020"}