{"info": {"author": "stuianna", "author_email": "stuiaa@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/stuianna/CMCLogger.svg?branch=master)](https://travis-ci.org/stuianna/CMCLogger)\n![Codecov](https://img.shields.io/codecov/c/github/stuianna/CMCLogger)\n![GitHub](https://img.shields.io/github/license/stuianna/CMCLogger)\n\n# CMCLogger - Coin Market Cap Cryptocurreny Data Logger\n\nA python API and script for requesting, parsing and storing the latest cryptocurrency data availalbe using the [Coin Market Cap Free API](https://coinmarketcap.com/api/). Data entries are stored in a SQLite3 database, with CLI features for querying data and logger status.\n\n## TLDR - Just Get Some Data\n\n```bash\n# Install the module and script\npip install CMCLogger\n\n# Initialise the required configuration, supplying your API key. (Made above)\nCMCLogger -a 'your-api-key' -g\n\n# Start the logger. Use 'nohup CMCLogger' to start detached, 'CMCLogger &' to start in background.\nCMCLogger \n\n# Query the latest stored price information for ticker 'BTC'\nCMCLogger -q BTC\n'BTC: $11676.55 (3.53%)'\n\n# Same as above, but more detailed.\nCMCLogger -dq BTC\n'BTC: $11676.55 1H: -0.22% 1D: 3.53% 7D: 4.77% 24h Volume: 66.65 Billion'\n\n# Get the logger status. Health is the moving average success rate of the last 30 calls.\nCMCLogger -s\n'Last successful call 1 minutes ago, health 100.0%.'\n\n# Stop the logger\nCMCLogger -k\n\n# Copy the SQLite database to an excel file\nCMCLogger -x\n```\n\n## Stored Data\n\nWhen the logger is initialised, it creates a directory structure inside `$XDG_CONFIG_HOME`. This could be `~/.local/share/CMCLogger` or `~/.config/CMCLogger`, use `echo $XDG_CONFIG_HOME` to find the location on your system.\n\nThe directory structure is as follows:\n\n```bash\nCMCLogger\n\u251c\u2500\u2500 config.ini\n\u2514\u2500\u2500 data\n    \u251c\u2500\u2500 cryptoData.db\n    \u251c\u2500\u2500 log\n    \u2514\u2500\u2500 status.ini\n```\n\n**config.ini**\n\nContains configuration parameters used. Change any of these settings and restart the logger to apply them. Values shown are the default.\n```ini\n[CMC_API]\napi_private_key = your-private-key-here\nconversion_currency = AUD\ncurreny_symbol = $\nrank_start_index = 1\nrank_end_index = 200\nrequest_interval = 5\n\n[General]\nstatus_file_format = ini\n```\n\n**cryptoData.db**\n\nA SQLite3 database containing all data retreived by the logger. The database contains a separate table, named afeter the cryptocurrency symbol for each individual currecy collected. [SQLitebrower](https://sqlitebrowser.org/), is a good tool for browsing databases, or use `CMCLogger -x` to convert the database to an Excel file for viewing.\n\n\n**status.ini**\n\nContains information on the status of the logger. This information is queried and returned  when using `CMCLogger -s` or `CMCLogger -ds`\n```ini\n[Last Successful Call]\ntimestamp = 2020-04-23 23:10:55.275000+03:00\nerror_code = 0\nerror_message = None\nelapsed = 17\ncredit_count = 1\n\n[Last Failed Call]\ntimestamp = 2020-04-23 22:39:26.646297+03:00\nerror_code = 255\nerror_message = No network connections available.\nelapsed = 0\ncredit_count = 0\n\n[Current Session]\nhealth = 100.0\nsuccessful_calls = 35644\nfailed_calls = 587\nsuccess_rate = 98.38\n\n[All Time]\nsuccessful_calls = 35746\nfailed_calls = 589\nsuccess_rate = 98.38\n```\n\n**log**\n\nRuntime logs stored by the Python logging module.\n\n## Polybar / I3WM Integration\n\n**I3WM**\n\nAdd to `.i3/config` to start the logger on login.\n```bash\nexec --no-startup-id CMCLogger\n```\n\n\n**Polybar**\n\nAdd a polybar module for the target bar:\n```bash\n[module/crypto]\ntype = custom/script\nexec = ~/bin/crypto\ntail = true\ninterval = 300\n```\n\nThe target script simply cycles through a set of symbols, a blank string is returned if the last entry was more than 10 minutes ago.\n```bash\n#!/bin/bash\n\nqueryArray=(\"BTC\" \"LTC\" \"ETH\")\nTEMPFILE=\"/tmp/tmp.CMCLOGGER\"\nsource $TEMPFILE 2> /dev/null\n\nfunction getNextSymbol {\n\tposition=0\n\tfor symbol in ${queryArray[@]}; do\n\t\t((position++))\n\t\tif [[ \"$symbol\" == \"$LAST_SYMBOL\" ]]; then\n\t\t\tsize=${#queryArray[@]}\n\t\t\tposition=$((position%size))\n\t\t\tCURRENT_SYMBOL=${queryArray[$position]}\n\t\t\tbreak\n\t\tfi\n\t\tCURRENT_SYMBOL=${queryArray[0]}\n\tdone\n\techo \"LAST_SYMBOL=$CURRENT_SYMBOL\" > $TEMPFILE\n}\n\nfunction checkStatus {\n\tjsonStatus=$(CMCLogger -js 2> /dev/null)\n\tlastCall=$(echo \"$jsonStatus\" | jq -r '.last_call')\n\n\tif (( $lastCall > 10 )); then\n\t\techo ''\n\t\texit\n\tfi\n}\n\ngetNextSymbol\ncheckStatus\nCMCLogger -q $CURRENT_SYMBOL\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stuianna/CMCLogger", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "CMCLogger", "package_url": "https://pypi.org/project/CMCLogger/", "platform": "", "project_url": "https://pypi.org/project/CMCLogger/", "project_urls": {"Homepage": "https://github.com/stuianna/CMCLogger"}, "release_url": "https://pypi.org/project/CMCLogger/0.0.1/", "requires_dist": ["pandas", "numpy", "db-ops", "config-checker", "python-dateutil", "pytz", "requests", "urllib3", "idna", "certifi", "appdirs", "chardet", "et-xmlfile", "jdcal", "openpyxl"], "requires_python": ">=3.6", "summary": "Coin Market Cap Public API Cryptocurrency data logger", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/stuianna/CMCLogger\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dbab5412a7fd845503cfe8548ce59f0c5bdad0ad/68747470733a2f2f7472617669732d63692e6f72672f73747569616e6e612f434d434c6f676765722e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d3d8eb54fbcfd43215c5b82830db16281e778c9/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f73747569616e6e612f434d434c6f67676572\">\n<img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89c6f604f232fa9dc141283551eca31156d329f3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f73747569616e6e612f434d434c6f67676572\"></p>\n<h1>CMCLogger - Coin Market Cap Cryptocurreny Data Logger</h1>\n<p>A python API and script for requesting, parsing and storing the latest cryptocurrency data availalbe using the <a href=\"https://coinmarketcap.com/api/\" rel=\"nofollow\">Coin Market Cap Free API</a>. Data entries are stored in a SQLite3 database, with CLI features for querying data and logger status.</p>\n<h2>TLDR - Just Get Some Data</h2>\n<pre><span class=\"c1\"># Install the module and script</span>\npip install CMCLogger\n\n<span class=\"c1\"># Initialise the required configuration, supplying your API key. (Made above)</span>\nCMCLogger -a <span class=\"s1\">'your-api-key'</span> -g\n\n<span class=\"c1\"># Start the logger. Use 'nohup CMCLogger' to start detached, 'CMCLogger &amp;' to start in background.</span>\nCMCLogger \n\n<span class=\"c1\"># Query the latest stored price information for ticker 'BTC'</span>\nCMCLogger -q BTC\n<span class=\"s1\">'BTC: $11676.55 (3.53%)'</span>\n\n<span class=\"c1\"># Same as above, but more detailed.</span>\nCMCLogger -dq BTC\n<span class=\"s1\">'BTC: $11676.55 1H: -0.22% 1D: 3.53% 7D: 4.77% 24h Volume: 66.65 Billion'</span>\n\n<span class=\"c1\"># Get the logger status. Health is the moving average success rate of the last 30 calls.</span>\nCMCLogger -s\n<span class=\"s1\">'Last successful call 1 minutes ago, health 100.0%.'</span>\n\n<span class=\"c1\"># Stop the logger</span>\nCMCLogger -k\n\n<span class=\"c1\"># Copy the SQLite database to an excel file</span>\nCMCLogger -x\n</pre>\n<h2>Stored Data</h2>\n<p>When the logger is initialised, it creates a directory structure inside <code>$XDG_CONFIG_HOME</code>. This could be <code>~/.local/share/CMCLogger</code> or <code>~/.config/CMCLogger</code>, use <code>echo $XDG_CONFIG_HOME</code> to find the location on your system.</p>\n<p>The directory structure is as follows:</p>\n<pre>CMCLogger\n\u251c\u2500\u2500 config.ini\n\u2514\u2500\u2500 data\n    \u251c\u2500\u2500 cryptoData.db\n    \u251c\u2500\u2500 log\n    \u2514\u2500\u2500 status.ini\n</pre>\n<p><strong>config.ini</strong></p>\n<p>Contains configuration parameters used. Change any of these settings and restart the logger to apply them. Values shown are the default.</p>\n<pre><span class=\"k\">[CMC_API]</span>\n<span class=\"na\">api_private_key</span> <span class=\"o\">=</span> <span class=\"s\">your-private-key-here</span>\n<span class=\"na\">conversion_currency</span> <span class=\"o\">=</span> <span class=\"s\">AUD</span>\n<span class=\"na\">curreny_symbol</span> <span class=\"o\">=</span> <span class=\"s\">$</span>\n<span class=\"na\">rank_start_index</span> <span class=\"o\">=</span> <span class=\"s\">1</span>\n<span class=\"na\">rank_end_index</span> <span class=\"o\">=</span> <span class=\"s\">200</span>\n<span class=\"na\">request_interval</span> <span class=\"o\">=</span> <span class=\"s\">5</span>\n\n<span class=\"k\">[General]</span>\n<span class=\"na\">status_file_format</span> <span class=\"o\">=</span> <span class=\"s\">ini</span>\n</pre>\n<p><strong>cryptoData.db</strong></p>\n<p>A SQLite3 database containing all data retreived by the logger. The database contains a separate table, named afeter the cryptocurrency symbol for each individual currecy collected. <a href=\"https://sqlitebrowser.org/\" rel=\"nofollow\">SQLitebrower</a>, is a good tool for browsing databases, or use <code>CMCLogger -x</code> to convert the database to an Excel file for viewing.</p>\n<p><strong>status.ini</strong></p>\n<p>Contains information on the status of the logger. This information is queried and returned  when using <code>CMCLogger -s</code> or <code>CMCLogger -ds</code></p>\n<pre><span class=\"k\">[Last Successful Call]</span>\n<span class=\"na\">timestamp</span> <span class=\"o\">=</span> <span class=\"s\">2020-04-23 23:10:55.275000+03:00</span>\n<span class=\"na\">error_code</span> <span class=\"o\">=</span> <span class=\"s\">0</span>\n<span class=\"na\">error_message</span> <span class=\"o\">=</span> <span class=\"s\">None</span>\n<span class=\"na\">elapsed</span> <span class=\"o\">=</span> <span class=\"s\">17</span>\n<span class=\"na\">credit_count</span> <span class=\"o\">=</span> <span class=\"s\">1</span>\n\n<span class=\"k\">[Last Failed Call]</span>\n<span class=\"na\">timestamp</span> <span class=\"o\">=</span> <span class=\"s\">2020-04-23 22:39:26.646297+03:00</span>\n<span class=\"na\">error_code</span> <span class=\"o\">=</span> <span class=\"s\">255</span>\n<span class=\"na\">error_message</span> <span class=\"o\">=</span> <span class=\"s\">No network connections available.</span>\n<span class=\"na\">elapsed</span> <span class=\"o\">=</span> <span class=\"s\">0</span>\n<span class=\"na\">credit_count</span> <span class=\"o\">=</span> <span class=\"s\">0</span>\n\n<span class=\"k\">[Current Session]</span>\n<span class=\"na\">health</span> <span class=\"o\">=</span> <span class=\"s\">100.0</span>\n<span class=\"na\">successful_calls</span> <span class=\"o\">=</span> <span class=\"s\">35644</span>\n<span class=\"na\">failed_calls</span> <span class=\"o\">=</span> <span class=\"s\">587</span>\n<span class=\"na\">success_rate</span> <span class=\"o\">=</span> <span class=\"s\">98.38</span>\n\n<span class=\"k\">[All Time]</span>\n<span class=\"na\">successful_calls</span> <span class=\"o\">=</span> <span class=\"s\">35746</span>\n<span class=\"na\">failed_calls</span> <span class=\"o\">=</span> <span class=\"s\">589</span>\n<span class=\"na\">success_rate</span> <span class=\"o\">=</span> <span class=\"s\">98.38</span>\n</pre>\n<p><strong>log</strong></p>\n<p>Runtime logs stored by the Python logging module.</p>\n<h2>Polybar / I3WM Integration</h2>\n<p><strong>I3WM</strong></p>\n<p>Add to <code>.i3/config</code> to start the logger on login.</p>\n<pre><span class=\"nb\">exec</span> --no-startup-id CMCLogger\n</pre>\n<p><strong>Polybar</strong></p>\n<p>Add a polybar module for the target bar:</p>\n<pre><span class=\"o\">[</span>module/crypto<span class=\"o\">]</span>\n<span class=\"nb\">type</span> <span class=\"o\">=</span> custom/script\n<span class=\"nb\">exec</span> <span class=\"o\">=</span> ~/bin/crypto\n<span class=\"nv\">tail</span> <span class=\"o\">=</span> <span class=\"nb\">true</span>\n<span class=\"nv\">interval</span> <span class=\"o\">=</span> <span class=\"m\">300</span>\n</pre>\n<p>The target script simply cycles through a set of symbols, a blank string is returned if the last entry was more than 10 minutes ago.</p>\n<pre><span class=\"ch\">#!/bin/bash</span>\n\n<span class=\"nv\">queryArray</span><span class=\"o\">=(</span><span class=\"s2\">\"BTC\"</span> <span class=\"s2\">\"LTC\"</span> <span class=\"s2\">\"ETH\"</span><span class=\"o\">)</span>\n<span class=\"nv\">TEMPFILE</span><span class=\"o\">=</span><span class=\"s2\">\"/tmp/tmp.CMCLOGGER\"</span>\n<span class=\"nb\">source</span> <span class=\"nv\">$TEMPFILE</span> <span class=\"m\">2</span>&gt; /dev/null\n\n<span class=\"k\">function</span> getNextSymbol <span class=\"o\">{</span>\n\t<span class=\"nv\">position</span><span class=\"o\">=</span><span class=\"m\">0</span>\n\t<span class=\"k\">for</span> symbol in <span class=\"si\">${</span><span class=\"nv\">queryArray</span><span class=\"p\">[@]</span><span class=\"si\">}</span><span class=\"p\">;</span> <span class=\"k\">do</span>\n\t\t<span class=\"o\">((</span>position++<span class=\"o\">))</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"s2\">\"</span><span class=\"nv\">$symbol</span><span class=\"s2\">\"</span> <span class=\"o\">==</span> <span class=\"s2\">\"</span><span class=\"nv\">$LAST_SYMBOL</span><span class=\"s2\">\"</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n\t\t\t<span class=\"nv\">size</span><span class=\"o\">=</span><span class=\"si\">${#</span><span class=\"nv\">queryArray</span><span class=\"p\">[@]</span><span class=\"si\">}</span>\n\t\t\t<span class=\"nv\">position</span><span class=\"o\">=</span><span class=\"k\">$((</span>position%size<span class=\"k\">))</span>\n\t\t\t<span class=\"nv\">CURRENT_SYMBOL</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">queryArray</span><span class=\"p\">[</span><span class=\"nv\">$position</span><span class=\"p\">]</span><span class=\"si\">}</span>\n\t\t\t<span class=\"nb\">break</span>\n\t\t<span class=\"k\">fi</span>\n\t\t<span class=\"nv\">CURRENT_SYMBOL</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">queryArray</span><span class=\"p\">[0]</span><span class=\"si\">}</span>\n\t<span class=\"k\">done</span>\n\t<span class=\"nb\">echo</span> <span class=\"s2\">\"LAST_SYMBOL=</span><span class=\"nv\">$CURRENT_SYMBOL</span><span class=\"s2\">\"</span> &gt; <span class=\"nv\">$TEMPFILE</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">function</span> checkStatus <span class=\"o\">{</span>\n\t<span class=\"nv\">jsonStatus</span><span class=\"o\">=</span><span class=\"k\">$(</span>CMCLogger -js <span class=\"m\">2</span>&gt; /dev/null<span class=\"k\">)</span>\n\t<span class=\"nv\">lastCall</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"s2\">\"</span><span class=\"nv\">$jsonStatus</span><span class=\"s2\">\"</span> <span class=\"p\">|</span> jq -r <span class=\"s1\">'.last_call'</span><span class=\"k\">)</span>\n\n\t<span class=\"k\">if</span> <span class=\"o\">((</span> <span class=\"nv\">$lastCall</span> &gt; <span class=\"m\">10</span> <span class=\"o\">))</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n\t\t<span class=\"nb\">echo</span> <span class=\"s1\">''</span>\n\t\t<span class=\"nb\">exit</span>\n\t<span class=\"k\">fi</span>\n<span class=\"o\">}</span>\n\ngetNextSymbol\ncheckStatus\nCMCLogger -q <span class=\"nv\">$CURRENT_SYMBOL</span>\n</pre>\n\n          </div>"}, "last_serial": 7143178, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d42cb93fec4e3a14bb58c3fc8cd5266d", "sha256": "948bf564f5389cbc83fa94d738f2385184dc9cf5fa84f28f35e00a5dd356a6a2"}, "downloads": -1, "filename": "CMCLogger-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d42cb93fec4e3a14bb58c3fc8cd5266d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24267, "upload_time": "2020-05-01T07:38:34", "upload_time_iso_8601": "2020-05-01T07:38:34.038224Z", "url": "https://files.pythonhosted.org/packages/8f/ac/6f3a46ed5236af2c73ea5d91a87503ff31f23d1f48bcccfe6f34cc035f9f/CMCLogger-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abb31e5f43eecc63bf708baa99646e0a", "sha256": "561bc3a0053baa7079c64b45b9c1d3b71a4d2c1da2301d81520d0c6bc0f5650e"}, "downloads": -1, "filename": "CMCLogger-0.0.1.tar.gz", "has_sig": false, "md5_digest": "abb31e5f43eecc63bf708baa99646e0a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20142, "upload_time": "2020-05-01T07:38:36", "upload_time_iso_8601": "2020-05-01T07:38:36.523561Z", "url": "https://files.pythonhosted.org/packages/61/e0/a49b7e54ceb94ca3e347ccb709041ba927bac9946fc2059a7df6ec02dd95/CMCLogger-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d42cb93fec4e3a14bb58c3fc8cd5266d", "sha256": "948bf564f5389cbc83fa94d738f2385184dc9cf5fa84f28f35e00a5dd356a6a2"}, "downloads": -1, "filename": "CMCLogger-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d42cb93fec4e3a14bb58c3fc8cd5266d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24267, "upload_time": "2020-05-01T07:38:34", "upload_time_iso_8601": "2020-05-01T07:38:34.038224Z", "url": "https://files.pythonhosted.org/packages/8f/ac/6f3a46ed5236af2c73ea5d91a87503ff31f23d1f48bcccfe6f34cc035f9f/CMCLogger-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abb31e5f43eecc63bf708baa99646e0a", "sha256": "561bc3a0053baa7079c64b45b9c1d3b71a4d2c1da2301d81520d0c6bc0f5650e"}, "downloads": -1, "filename": "CMCLogger-0.0.1.tar.gz", "has_sig": false, "md5_digest": "abb31e5f43eecc63bf708baa99646e0a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20142, "upload_time": "2020-05-01T07:38:36", "upload_time_iso_8601": "2020-05-01T07:38:36.523561Z", "url": "https://files.pythonhosted.org/packages/61/e0/a49b7e54ceb94ca3e347ccb709041ba927bac9946fc2059a7df6ec02dd95/CMCLogger-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:36 2020"}