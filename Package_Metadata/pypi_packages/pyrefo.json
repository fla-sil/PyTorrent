{"info": {"author": "zhangjinjie", "author_email": "zhangjinjie@yimian.com.cn", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Text Processing :: Linguistic"], "description": "### pyrefo: a fast regex for object\n\n### ![Build Status](https://github.com/yimian/pyrefo/workflows/Python%20package/badge.svg)\n\nThis project is based on [refo](https://github.com/machinalis/refo) and the paper [Regular Expression Matching: the Virtual Machine Approach](https://swtch.com/~rsc/regexp/regexp2.html), it use cffi to extend python with c to speed accelerate processing performance.\n\nThis project has done the following work:\n\n1. full compatiable with refo api, support all patterns and match, search, finditer methods;\n2. fix c source bug included in the paper;\n3. use cffi to extend python with c;\n4. add new feature which supports partial match;\n5. add new `Phrase`pattern which can realize `'ab'`match `['a', 'b', 'c']`list;\n\n### How to use it\n\n`\"ab\" ` is `Literal(\"a\")+Literal(\"b\")`\n\n`\"a*\"` is `Star(Literal(\"a\"))`\n\n`\"aab?\"` is `Literal(\"a\")+Literal(\"a\")+Question(Literal(\"b\"), greedy=False)`\n\n`a{3,4}` is `Repetition(Literal(\"a\"), 3, 4, greedy=False)`\n\n`\"(ab)+|(bb*)?\"` is \n\n```python\na = Literal(\"a\")\nb = Literal(\"b\")\nregex = Plus(a + b) | Star(b + b, greedy=False)\n```\n\nYou can also assign a group to any sub-match and later on retrieve the matched content, for instance:\n\n```python\nregex = Group(Plus(a + b), \"foobar\") | Star(b + b, greedy=False)\nm = match(regex, \"abab\")\nprint(m.span(\"foobar\"))\n```\n\n`pyrefo` offers `match`, `search`, `findall`, `finditer` search functions:\n\n- match: match pattern from first position\n- search: search pattern from first position till find one\n- findall: find all matched result\n- finditer: return an iterator for all matched result\n\n`pyrefo` offers the following predicates:\n\n- Any\n- Literal\n- Star\n- Plus\n- Question\n- Group\n- Repetition\n- Phrase\n\n### Performance test\n\n#### prerequisites\n\n```python\nimport jieba\ntext = '\u4e3a\u4ec0\u4e48\u5728\u672c\u5e97\u4e70\u4e1c\u897f\uff1f\u56e0\u4e3a\u7269\u6d41\u8fc5\u901f\uff0b\u54c1\u8d28\u4fdd\u8bc1\u3002\u4e3a\u4ec0\u4e48\u6211\u8d2d\u4e70\u7684\u6bcf\u4ef6\u5546\u54c1\u8bc4\u4ef7\u90fd\u4e00\u6837\u5462\uff1f\u56e0\u4e3a\u6211\u4e70\u7684\u4e1c\u897f\u592a\u591a\u4e86\uff0c\u79ef\u7d2f\u4e86\u5f88\u591a\u672a\u8bc4\u4ef7\u7684\u8ba2\u5355\uff0c\u6240\u4ee5\u6211\u7edf\u4e00\u7528\u8fd9\u6bb5\u8bdd\u4f5c\u4e3a\u8bc4\u4ef7\u5185\u5bb9\u3002\u5982\u679c\u6211\u7528\u4e86\u8fd9\u6bb5\u8bdd\u4f5c\u4e3a\u8bc4\u4ef7\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u6b3e\u4ea7\u54c1\u975e\u5e38\u8d5e\uff0c\u975e\u5e38\u597d\uff01'\ntokens = list(jieba.cut(text))\n```\n\n#### CPython\n\n- pyrefo\n\n```python\nfrom pyrefo import search, Group, Star, Any, Literal\n%timeit search(Group(Literal('\u7269\u6d41') + Star(Any()) + Literal('\u8fc5\u901f'), 'a'), tokens)\n```\n\n```shell\n95.9 \u00b5s \u00b1 472 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n```\n\n- refo\n\n```python\nimport refo\n%timeit refo.search(refo.Group(refo.Literal('\u7269\u6d41') + refo.Star(refo.Any()) + refo.Literal('\u8fc5\u901f'), 'a'), tokens)\n```\n\n```shell\n1.03 ms \u00b1 7.27 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n```\n\n- re\n\n```python\nimport re\n%timeit re.search('(\u7269\u6d41.*\u901f\u5ea6)', text)\n```\n\n```shell\n989 ns \u00b1 4.69 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n```\n\n#### PyPy\n\n- pyrefo\n\n```python\nfrom pyrefo import search, Group, Star, Any, Literal\n%timeit search(Group(Literal('\u7269\u6d41') + Star(Any()) + Literal('\u8fc5\u901f'), 'a'), tokens)\n```\n\n```shell\n53.4 \u00b5s \u00b1 28 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n```\n\n- refo\n\n```python\nimport refo\n%timeit refo.search(refo.Group(refo.Literal('\u7269\u6d41') + refo.Star(refo.Any()) + refo.Literal('\u8fc5\u901f'), 'a'), tokens)\n```\n\n```shell\n78 \u00b5s \u00b1 35.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n```\n\n- re\n\n```shell\nimport re\n%timeit re.search('(\u7269\u6d41.*\u901f\u5ea6)', text)\n```\n\n```shell\n347 ns \u00b1 3.26 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/yimian/pyrefo", "keywords": "regex", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "pyrefo", "package_url": "https://pypi.org/project/pyrefo/", "platform": "", "project_url": "https://pypi.org/project/pyrefo/", "project_urls": {"Homepage": "http://github.com/yimian/pyrefo"}, "release_url": "https://pypi.org/project/pyrefo/0.4/", "requires_dist": ["cffi (>=1.0.0)"], "requires_python": "", "summary": "a fast regex for object", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>pyrefo: a fast regex for object</h3>\n<h3><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41a02b36d8dd0bd1d161cf1a77c4ef69f7efc781/68747470733a2f2f6769746875622e636f6d2f79696d69616e2f70797265666f2f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></h3>\n<p>This project is based on <a href=\"https://github.com/machinalis/refo\" rel=\"nofollow\">refo</a> and the paper <a href=\"https://swtch.com/%7Ersc/regexp/regexp2.html\" rel=\"nofollow\">Regular Expression Matching: the Virtual Machine Approach</a>, it use cffi to extend python with c to speed accelerate processing performance.</p>\n<p>This project has done the following work:</p>\n<ol>\n<li>full compatiable with refo api, support all patterns and match, search, finditer methods;</li>\n<li>fix c source bug included in the paper;</li>\n<li>use cffi to extend python with c;</li>\n<li>add new feature which supports partial match;</li>\n<li>add new <code>Phrase</code>pattern which can realize <code>'ab'</code>match <code>['a', 'b', 'c']</code>list;</li>\n</ol>\n<h3>How to use it</h3>\n<p><code>\"ab\"</code> is <code>Literal(\"a\")+Literal(\"b\")</code></p>\n<p><code>\"a*\"</code> is <code>Star(Literal(\"a\"))</code></p>\n<p><code>\"aab?\"</code> is <code>Literal(\"a\")+Literal(\"a\")+Question(Literal(\"b\"), greedy=False)</code></p>\n<p><code>a{3,4}</code> is <code>Repetition(Literal(\"a\"), 3, 4, greedy=False)</code></p>\n<p><code>\"(ab)+|(bb*)?\"</code> is</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n<span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"n\">Plus</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Star</span><span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">greedy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>You can also assign a group to any sub-match and later on retrieve the matched content, for instance:</p>\n<pre><span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">Plus</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Star</span><span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">greedy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"p\">,</span> <span class=\"s2\">\"abab\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">span</span><span class=\"p\">(</span><span class=\"s2\">\"foobar\"</span><span class=\"p\">))</span>\n</pre>\n<p><code>pyrefo</code> offers <code>match</code>, <code>search</code>, <code>findall</code>, <code>finditer</code> search functions:</p>\n<ul>\n<li>match: match pattern from first position</li>\n<li>search: search pattern from first position till find one</li>\n<li>findall: find all matched result</li>\n<li>finditer: return an iterator for all matched result</li>\n</ul>\n<p><code>pyrefo</code> offers the following predicates:</p>\n<ul>\n<li>Any</li>\n<li>Literal</li>\n<li>Star</li>\n<li>Plus</li>\n<li>Question</li>\n<li>Group</li>\n<li>Repetition</li>\n<li>Phrase</li>\n</ul>\n<h3>Performance test</h3>\n<h4>prerequisites</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jieba</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'\u4e3a\u4ec0\u4e48\u5728\u672c\u5e97\u4e70\u4e1c\u897f\uff1f\u56e0\u4e3a\u7269\u6d41\u8fc5\u901f\uff0b\u54c1\u8d28\u4fdd\u8bc1\u3002\u4e3a\u4ec0\u4e48\u6211\u8d2d\u4e70\u7684\u6bcf\u4ef6\u5546\u54c1\u8bc4\u4ef7\u90fd\u4e00\u6837\u5462\uff1f\u56e0\u4e3a\u6211\u4e70\u7684\u4e1c\u897f\u592a\u591a\u4e86\uff0c\u79ef\u7d2f\u4e86\u5f88\u591a\u672a\u8bc4\u4ef7\u7684\u8ba2\u5355\uff0c\u6240\u4ee5\u6211\u7edf\u4e00\u7528\u8fd9\u6bb5\u8bdd\u4f5c\u4e3a\u8bc4\u4ef7\u5185\u5bb9\u3002\u5982\u679c\u6211\u7528\u4e86\u8fd9\u6bb5\u8bdd\u4f5c\u4e3a\u8bc4\u4ef7\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u6b3e\u4ea7\u54c1\u975e\u5e38\u8d5e\uff0c\u975e\u5e38\u597d\uff01'</span>\n<span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">jieba</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n</pre>\n<h4>CPython</h4>\n<ul>\n<li>pyrefo</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrefo</span> <span class=\"kn\">import</span> <span class=\"n\">search</span><span class=\"p\">,</span> <span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">Star</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Literal</span>\n<span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'\u7269\u6d41'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">Star</span><span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'\u8fc5\u901f'</span><span class=\"p\">),</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"m\">95</span>.9 \u00b5s \u00b1 <span class=\"m\">472</span> ns per loop <span class=\"o\">(</span>mean \u00b1 std. dev. of <span class=\"m\">7</span> runs, <span class=\"m\">10000</span> loops each<span class=\"o\">)</span>\n</pre>\n<ul>\n<li>refo</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">refo</span>\n<span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'\u7269\u6d41'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Star</span><span class=\"p\">(</span><span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'\u8fc5\u901f'</span><span class=\"p\">),</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"m\">1</span>.03 ms \u00b1 <span class=\"m\">7</span>.27 \u00b5s per loop <span class=\"o\">(</span>mean \u00b1 std. dev. of <span class=\"m\">7</span> runs, <span class=\"m\">1000</span> loops each<span class=\"o\">)</span>\n</pre>\n<ul>\n<li>re</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'(\u7269\u6d41.*\u901f\u5ea6)'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"m\">989</span> ns \u00b1 <span class=\"m\">4</span>.69 ns per loop <span class=\"o\">(</span>mean \u00b1 std. dev. of <span class=\"m\">7</span> runs, <span class=\"m\">1000000</span> loops each<span class=\"o\">)</span>\n</pre>\n<h4>PyPy</h4>\n<ul>\n<li>pyrefo</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrefo</span> <span class=\"kn\">import</span> <span class=\"n\">search</span><span class=\"p\">,</span> <span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">Star</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Literal</span>\n<span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'\u7269\u6d41'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">Star</span><span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'\u8fc5\u901f'</span><span class=\"p\">),</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"m\">53</span>.4 \u00b5s \u00b1 <span class=\"m\">28</span> \u00b5s per loop <span class=\"o\">(</span>mean \u00b1 std. dev. of <span class=\"m\">7</span> runs, <span class=\"m\">1000</span> loops each<span class=\"o\">)</span>\n</pre>\n<ul>\n<li>refo</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">refo</span>\n<span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'\u7269\u6d41'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Star</span><span class=\"p\">(</span><span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">refo</span><span class=\"o\">.</span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'\u8fc5\u901f'</span><span class=\"p\">),</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"m\">78</span> \u00b5s \u00b1 <span class=\"m\">35</span>.8 \u00b5s per loop <span class=\"o\">(</span>mean \u00b1 std. dev. of <span class=\"m\">7</span> runs, <span class=\"m\">1000</span> loops each<span class=\"o\">)</span>\n</pre>\n<ul>\n<li>re</li>\n</ul>\n<pre>import re\n%timeit re.search<span class=\"o\">(</span><span class=\"s1\">'(\u7269\u6d41.*\u901f\u5ea6)'</span>, text<span class=\"o\">)</span>\n</pre>\n<pre><span class=\"m\">347</span> ns \u00b1 <span class=\"m\">3</span>.26 ns per loop <span class=\"o\">(</span>mean \u00b1 std. dev. of <span class=\"m\">7</span> runs, <span class=\"m\">1000000</span> loops each<span class=\"o\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6941268, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c77a6fc461b05ff70d32b1d87de92fde", "sha256": "4efa6db958694d6b012183dad7e1e069252bf41c3450c07364e127f8abd621ee"}, "downloads": -1, "filename": "pyrefo-0.1.tar.gz", "has_sig": false, "md5_digest": "c77a6fc461b05ff70d32b1d87de92fde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8143, "upload_time": "2018-10-07T04:38:10", "upload_time_iso_8601": "2018-10-07T04:38:10.649202Z", "url": "https://files.pythonhosted.org/packages/a7/7c/9ec7ba3851b2918bf0e493a0fb3dd35c606e1afce00851f903e85509fef1/pyrefo-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "de4c424775084555e27c12fda74b59ab", "sha256": "a516e6296b60e55117970537a5888dcde33f975f850ef9c63b595025ed4a37fa"}, "downloads": -1, "filename": "pyrefo-0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "de4c424775084555e27c12fda74b59ab", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 29942, "upload_time": "2020-04-02T08:46:00", "upload_time_iso_8601": "2020-04-02T08:46:00.923469Z", "url": "https://files.pythonhosted.org/packages/22/41/557811b5ac2e4f80f57341ccaf2c6d58728cc32ac84461a2c047d2ba3e93/pyrefo-0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb578d1034b3a44038fbfe8f91233238", "sha256": "988d31fe664e79d397970e8eeda2951acc2b598ce0af0eff4c55075768f2d973"}, "downloads": -1, "filename": "pyrefo-0.2.tar.gz", "has_sig": false, "md5_digest": "fb578d1034b3a44038fbfe8f91233238", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23687, "upload_time": "2020-04-02T08:46:02", "upload_time_iso_8601": "2020-04-02T08:46:02.774601Z", "url": "https://files.pythonhosted.org/packages/be/14/26a353ea6be34025c9271a8c7a1bd1d122e73cda1656a3ef0fff9179b5e9/pyrefo-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "c06dd10e4e7a5a89c0623d983e8dc58c", "sha256": "68b30639fa68d96ea0c1300f7ca46fa71290ef7ed6d5e79d99af94f9c897cf8e"}, "downloads": -1, "filename": "pyrefo-0.3-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "c06dd10e4e7a5a89c0623d983e8dc58c", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 30299, "upload_time": "2020-04-02T11:10:29", "upload_time_iso_8601": "2020-04-02T11:10:29.359829Z", "url": "https://files.pythonhosted.org/packages/51/d3/34197b693a8abae51a50b14e8f2cc1869d965e04c02ac509db4da943d7e2/pyrefo-0.3-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b3db44d4bb3e10c7c41dc4dad8291cc", "sha256": "1ee2559aca7f74bf0d5ea1cadce72c64f0e86f010dc0673117e998ba9b3d8b46"}, "downloads": -1, "filename": "pyrefo-0.3.tar.gz", "has_sig": false, "md5_digest": "0b3db44d4bb3e10c7c41dc4dad8291cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24695, "upload_time": "2020-04-02T11:10:30", "upload_time_iso_8601": "2020-04-02T11:10:30.774842Z", "url": "https://files.pythonhosted.org/packages/c6/35/f73f37d6acbeef40985f28a8f4178eeef6230f70a768c4635674cfbc4d5f/pyrefo-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "564faeae4ebd73e9f407576ad122c212", "sha256": "75a3ed38ab5a3435b1e3f72fedc662cbfdc8b5b97c62a6c666e8af288831ae91"}, "downloads": -1, "filename": "pyrefo-0.4-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "564faeae4ebd73e9f407576ad122c212", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 30330, "upload_time": "2020-04-03T06:44:16", "upload_time_iso_8601": "2020-04-03T06:44:16.402138Z", "url": "https://files.pythonhosted.org/packages/a3/e6/dae36bc33491a4837aea44e7b84861cf9d6faeeea6b04eacb5f01b1d9d7b/pyrefo-0.4-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a46bde5a69de5ef06b6a66a569b9bf33", "sha256": "baa99189e1aec8c392b863b3b2eacd34ca2225b44ddbf0c62136051bae689fba"}, "downloads": -1, "filename": "pyrefo-0.4.tar.gz", "has_sig": false, "md5_digest": "a46bde5a69de5ef06b6a66a569b9bf33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24727, "upload_time": "2020-04-03T06:44:18", "upload_time_iso_8601": "2020-04-03T06:44:18.022382Z", "url": "https://files.pythonhosted.org/packages/a3/e6/d854c13ba3836cbe17aa989626bddd78c9a3f9065b086ab7e84407088441/pyrefo-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "564faeae4ebd73e9f407576ad122c212", "sha256": "75a3ed38ab5a3435b1e3f72fedc662cbfdc8b5b97c62a6c666e8af288831ae91"}, "downloads": -1, "filename": "pyrefo-0.4-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "564faeae4ebd73e9f407576ad122c212", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 30330, "upload_time": "2020-04-03T06:44:16", "upload_time_iso_8601": "2020-04-03T06:44:16.402138Z", "url": "https://files.pythonhosted.org/packages/a3/e6/dae36bc33491a4837aea44e7b84861cf9d6faeeea6b04eacb5f01b1d9d7b/pyrefo-0.4-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a46bde5a69de5ef06b6a66a569b9bf33", "sha256": "baa99189e1aec8c392b863b3b2eacd34ca2225b44ddbf0c62136051bae689fba"}, "downloads": -1, "filename": "pyrefo-0.4.tar.gz", "has_sig": false, "md5_digest": "a46bde5a69de5ef06b6a66a569b9bf33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24727, "upload_time": "2020-04-03T06:44:18", "upload_time_iso_8601": "2020-04-03T06:44:18.022382Z", "url": "https://files.pythonhosted.org/packages/a3/e6/d854c13ba3836cbe17aa989626bddd78c9a3f9065b086ab7e84407088441/pyrefo-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:55 2020"}