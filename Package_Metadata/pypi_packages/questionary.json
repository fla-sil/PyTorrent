{"info": {"author": "Tom Bocklisch", "author_email": "tombocklisch@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries"], "description": "# questionary\n\n[![version](https://img.shields.io/pypi/v/questionary.svg)](https://pypi.org/project/questionary/)\n[![license](https://img.shields.io/pypi/l/questionary.svg)](https://pypi.org/project/questionary/)\n[![Build Status](https://travis-ci.com/tmbo/questionary.svg?branch=master)](https://travis-ci.com/tmbo/questionary)\n[![Coverage Status](https://coveralls.io/repos/github/tmbo/questionary/badge.svg?branch=master)](https://coveralls.io/github/tmbo/questionary?branch=master)\n[![Supported Python Versions](https://img.shields.io/pypi/pyversions/questionary.svg)](https://pypi.python.org/pypi/questionary)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Ftmbo%2Fquestionary.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Ftmbo%2Fquestionary?ref=badge_shield)\n\n\u2728An easy to use python library to build pretty command line user prompts \u2728\n\n![example-gif](docs/images/example.gif)\n\nYou need input from a user, e.g. how an output file should be named or if he really wants to execute that dangerous operation? This library will help you make the input prompts easy to read and answer for the user.\n\nUsed and Supported by:\n\n[<img src=\"https://rasa.com/docs/_static/rasa_logo.svg\" width=\"60\">](https://github.com/RasaHQ/rasa)\n\n## Quickstart\n\nTo install `questionary`, simply use [pipenv](http://pipenv.org/) (or pip, of\ncourse):\n\n```bash\n$ pipenv install questionary\n\u2728\ud83c\udf82\u2728\n```\n\nSatisfaction guaranteed. Let's create a first question:\n\n```python\nimport questionary\n\nquestionary.select(\n    \"What do you want to do?\",\n    choices=[\n        'Order a pizza',\n        'Make a reservation',\n        'Ask for opening hours'\n    ]).ask()  # returns value of selection\n```\n\nThat's all it takes to create a user prompt! There are differen types of prompts, you'll find examples for all of them further down.\n\n## Documentation\n\n### Different question types\n\n<details><summary>text</summary>\n\n   A free text input for the user.\n\n   ```python\n   questionary.text(\"What's your first name\").ask()\n   ```\n   ![example-gif](docs/images/text.gif)\n\n</details>\n<details><summary>password</summary>\n\n   A free text input for the user where the input is not\n   shown but replaced with `***`.\n\n   ```python\n   questionary.password(\"What's your secret?\").ask()\n   ```\n\n   ![example-gif](docs/images/password.gif)\n\n</details>\n<details><summary>confirm</summary>\n\n   A yes or no question. The user can either confirm or deny.\n\n   ```python\n   questionary.confirm(\"Are you amazed?\").ask()\n   ```\n\n   ![example-gif](docs/images/confirm.gif)\n\n</details>\n<details><summary>select</summary>\n\n   A list of items to select a choice from. The user can pick\n   one option and confirm it.\n\n   ```python\n   questionary.select(\n       \"What do you want to do?\",\n       choices=[\n           \"Order a pizza\",\n           \"Make a reservation\",\n           \"Ask for opening hours\"\n       ]).ask()\n   ```\n\n   ![example-gif](docs/images/select.gif)\n\n</details>\n<details><summary>rawselect</summary>\n\n   A list of items to select a choice from. The user can pick\n   one option using shortcuts and confirm it.\n\n   ```python\n   questionary.rawselect(\n       \"What do you want to do?\",\n       choices=[\n           \"Order a pizza\",\n           \"Make a reservation\",\n           \"Ask for opening hours\"\n       ]).ask()\n   ```\n\n   ![example-gif](docs/images/rawselect.gif)\n\n</details>\n\n<details><summary>checkbox</summary>\n\n   A list of items to select multiple choices from. The user can pick\n   none, one or multiple options and confirm the selection.\n\n   ```python\n   questionary.checkbox(\n       'Select toppings',\n       choices=[\n           \"foo\",\n           \"bar\",\n           \"bazz\"\n       ]).ask()\n   ```\n   ![example-gif](docs/images/checkbox.gif)\n\n</details>\n\n<details><summary>autocomplete</summary>\n\n   Text input with autocomplete help.\n\n   ```python\n   questionary.autocomplete(\n       'Choose ant specie',\n       choices=[\n            'Camponotus pennsylvanicus',\n            'Linepithema humile',\n            'Eciton burchellii',\n            \"Atta colombica\",\n            'Polyergus lucidus',\n            'Polyergus rufescens',\n       ]).ask()\n   ```\n   ![example-gif](docs/images/autocomplete.gif)\n\n</details>\n\n### Additional Features\n<details><summary>Skipping questions using conditions</summary>\n\nSometimes it is helpful to e.g. provide a command line flag to your app\nto skip any prompts, to avoid the need for an if around any question you\ncan pass that flag when you create the question:\n\n```python\nDISABLED = True\n\nresponse = questionary.confirm(\"Are you amazed?\").skip_if(DISABLED, default=True).ask()\n```\n\nIf the condition (in this case `DISABLED`) is `True`, the question will be\nskipped and the default value gets returned, otherwise the user will be\nprompted as usual and the default value will be ignored.\n</details>\n\n<details><summary>Alternative style to create questions using a configuration dictionary</summary>\n\nInstead of creating questions using the python functions, you can also create them using a configuration dictionary.\n```python\nquestions = [\n    {\n        'type': 'text',\n        'name': 'phone',\n        'message': \"What's your phone number\",\n    },\n    {\n        'type': 'confirm',\n        'message': 'Do you want to continue?',\n        'name': 'continue',\n        'default': True,\n    }\n]\n\nanswers = prompt(questions)\n```\n\nThe returned `answers` will be a dict containing the responses, e.g. `{\"phone\": \"0123123\", \"continue\": False, \"\"}`. The questions will be prompted one after another and `prompt` will return once all of them are answered.\n\nEach configuration dictionary needs to contain the following keys:\n\n* `'type'` - The type of the question.\n* `'name'` - The name of the question (will be used as key in the `answers` dictionary)\n* `'message'` - Message that will be shown to the user\n\nOptional Keys:\n\n* `'qmark'` - Question mark to use - defaults to `?`.\n* `'default'` - Preselected value.\n* `'choices'` - List of choices (applies when `'type': 'select'`) or function returning a list of choices.\n* `'when'` - Function checking if this question should be shown or skipped (same functionality than `.skip_if()`).\n* `'validate'` - Function or Validator Class performing validation (will be performed in real time as users type).\n* `filter` - Receive the user input and return the filtered value to be used inside the program. \n\n</details>\n\n<details><summary>Advanced workflow examples</summary>\nQuestionary allows creating quite complex workflows when combining all of the above concepts.\n\n``` python\nfrom questionary import Separator, prompt\nquestions = [\n    {\n        'type': 'confirm',\n        'name': 'conditional_step',\n        'message': 'Would you like the next question?',\n        'default': True,\n    },\n    {\n        'type': 'text',\n        'name': 'next_question',\n        'message': 'Name this library?',\n        # Validate if the first question was answered with yes or no\n        'when': lambda x: x['conditional_step'],\n        # Only accept questionary as answer\n        'validate': lambda val: val == 'questionary'\n    },\n    {\n        'type': 'select',\n        'name': 'second_question',\n        'message': 'Select item',\n        'choices': [\n            'item1',\n            'item2',\n            Separator(),\n            'other',\n        ],\n    },\n    {\n        'type': 'text',\n        'name': 'second_question',\n        'message': 'Insert free text',\n        'when': lambda x: x['second_question'] == 'other'\n    },\n]\nprompt(questions)\n```\n\nThe above workflow will show to the user as follows:\n1. Yes/No question `Would you like the next question?`.\n2. `Name this library?` - only shown when the first question is answered with yes\n3. A question to select an item from a list.\n4. Free text inpt if `'other'` is selected in step 3.\n\nDepending on the route the user took, the result will look as follows:\n\n``` python\n{ \n    'conditional_step': False,\n    'second_question': 'Testinput'   # Free form text\n}\n```\n``` python\n{ \n    'conditional_step': True,\n    'next_question': 'questionary',\n    'second_question': 'Testinput'   # Free form text\n}\n```\n\nYou can test this workflow yourself by running the [advanced_workflow.py example](https://github.com/tmbo/questionary/blob/master/examples/advanced_workflow.py).\n\n</details>\n\n<details><summary>Styling your prompts with your favorite colors</summary>\n\nYou can customize all the colors used for the prompts. Every part of the prompt has an identifier, which you can use to style it. Let's create our own custom style:\n```python\nfrom prompt_toolkit.styles import Style\n\ncustom_style_fancy = Style([\n    ('qmark', 'fg:#673ab7 bold'),       # token in front of the question\n    ('question', 'bold'),               # question text\n    ('answer', 'fg:#f44336 bold'),      # submitted answer text behind the question\n    ('pointer', 'fg:#673ab7 bold'),     # pointer used in select and checkbox prompts\n    ('highlighted', 'fg:#673ab7 bold'), # pointed-at choice in select and checkbox prompts\n    ('selected', 'fg:#cc5454'),         # style for a selected item of a checkbox\n    ('separator', 'fg:#cc5454'),        # separator in lists\n    ('instruction', ''),                # user instructions for select, rawselect, checkbox\n    ('text', ''),                       # plain text\n    ('disabled', 'fg:#858585 italic')   # disabled choices for select and checkbox prompts\n])\n```\n\nTo use our custom style, we need to pass it to the question type:\n```python\nquestionary.text(\"What's your phone number\", style=custom_style_fancy).ask()\n```\n\nIt is also possible to use a list of token tuples as a `Choice` title. This\nexample assumes there is a style token named `bold` in the custom style you are\nusing:\n```python\nChoice(\n    title=[\n        ('class:text', 'plain text '),\n        ('class:bold', 'bold text')\n    ]\n)\n```\nAs you can see it is possible to use custom style tokens for this purpose as\nwell. Note that Choices with token tuple titles will not be styled by the\n`selected` or `highlighted` tokens. If not provided, the `value` of the Choice\nwill be the text concatenated (`'plain text bold text'` in the above example).\n</details>\n\n## How to Contribute\n\nContributions are highly welcomed and appreciated. Every little help counts, \nso do not hesitate!\n\n1.  Check for open issues or open a fresh issue to start a discussion\n    around a feature idea or a bug. There is a [Contributor\n    Friendly](https://github.com/tmbo/questionary/issues?direction=desc&labels=good+first+issue&page=1&sort=updated&state=open)\n    tag for issues that should be ideal for people who are not very\n    familiar with the codebase yet.\n2.  Fork [the repository](https://github.com/tmbo/questionary) on\n    GitHub to start making your changes to the **master** branch (or\n    branch off of it).\n3.  Write a test which shows that the bug was fixed or that the feature\n    works as expected.\n4.  Ensure your code passes running `black questionary`.\n5.  Send a pull request and bug the maintainer until it gets merged and\n    published. \ud83d\ude42\n\n## Contributors\n\n`questionary` is written and maintained by Tom Bocklisch.\n\nIt is based on the great work of [Oyetoke Toby](https://github.com/CITGuru/PyInquirer) \nas well as the work from [Mark Fink](https://github.com/finklabs/whaaaaat).\n\n## Changelog\n\n<details><summary>unreleased (master branch)</summary>\n\n</details>\n\n<details><summary>1.5.2 (16.04.2020)</summary>\n\nBug fix release.\n\n* Added `.ask_async` support for forms.\n</details>\n\n<details><summary>1.5.1 (22.01.2020)</summary>\n\nBug fix release.\n\n* Fixed `.ask_async` for questions on `prompt_toolkit==2.*`. Added tests for it.\n</details>\n\n<details><summary>1.5.0 (22.01.2020)</summary>\n\nFeature release.\n\n* Added support for prompt_toolkit 3\n* All tests will be run against prompt_toolkit 2 and 3\n* Removed support for python 3.5 (prompt_toolkit 3 does not support that anymore)\n</details>\n\n<details><summary>1.4.0 (10.11.2019)</summary>\n\nFeature release.\n\n* Added additional question type `autocomplete`\n* Allow pointer and highlight in select question type\n</details>\n\n<details><summary>1.3.0 (25.08.2019)</summary>\n\nFeature release.\n\n* Add additional options to style checkboxes and select prompts https://github.com/tmbo/questionary/pull/14\n\n</details>\n\n<details><summary>1.2.1 (19.08.2019)</summary>\n\nBug fix release.\n\n* Fixed compatibility with python 3.5.2 by removing `Type` annotation (this time for real)\n</details>\n\n<details><summary>1.2.0 (30.07.2019)</summary>\n\nFeature release.\n\n* Allow a user to pass in a validator as an instance https://github.com/tmbo/questionary/pull/10\n\n</details>\n\n<details><summary>1.1.1 (21.04.2019)</summary>\n\nBug fix release.\n\n* Fixed compatibility with python 3.5.2 by removing `Type` annotation\n\n</details>\n\n<details><summary>1.1.0 (10.03.2019)</summary>\n\nFeature release.\n\n* Added `skip_if` to questions to allow skipping questions using a flag\n\n\n</details>\n\n<details><summary>1.0.2 (23.01.2019)</summary>\n\nBug fix release.\n\n* Fixed odd behaviour if select is created without providing any choices\n  instead, we will raise a `ValueError` now. ([#6](https://github.com/tmbo/questionary/pull/6))\n\n\n</details>\n\n<details><summary>1.0.1 (12.01.2019)</summary>\n\nBug fix release, adding some convenience shortcuts.\n\n* Added shortcut keys `j` (move down^ the list) and `k` (move up) to\n  the prompts `select` and `checkbox` (fixes [#2](https://github.com/tmbo/questionary/issues/2))\n* Fixed unclosed file handle in `setup.py`\n* Fixed unnecessary empty lines moving selections to far down (fixes [#3](https://github.com/tmbo/questionary/issues/3))\n\n</details>\n\n<details><summary>1.0.0 (14.12.2018)</summary>\n\nInitial public release of the library\n\n* Added python interface\n* Added dict style question creation\n* Improved the documentation\n* More tests and automatic travis test execution\n</details>\n\n## Developer Info\n\n<details>\n<summary>Notes on how to do random things related to this repo</summary>\n\n**Create one of the commandline recordings**\n\n0. Install `brew install asciinema` and `npm install --global asciicast2gif`\n1. Run `asciinema rec`\n2. Do the thing\n3. Convert to giv `asciicast2gif -h 7 -w 120 -s 2 <recoding> output.gif`\n\n</details>\n\n## License\nLicensed under the MIT License. Copyright 2020 Tom Bocklisch. [Copy of the license](LICENSE).\n\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Ftmbo%2Fquestionary.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Ftmbo%2Fquestionary?ref=badge_large)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/tmbo/questionary/archive/1.5.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tmbo/questionary", "keywords": "cli ui inquirer questions prompt", "license": "MIT", "maintainer": "Tom Bocklisch", "maintainer_email": "tombocklisch@gmail.com", "name": "questionary", "package_url": "https://pypi.org/project/questionary/", "platform": "", "project_url": "https://pypi.org/project/questionary/", "project_urls": {"Bug Reports": "https://github.com/tmbo/questionary/issues", "Download": "https://github.com/tmbo/questionary/archive/1.5.2.tar.gz", "Homepage": "https://github.com/tmbo/questionary", "Source": "https://github.com/tmbo/questionary"}, "release_url": "https://pypi.org/project/questionary/1.5.2/", "requires_dist": ["prompt-toolkit (<4.0,>=2.0)", "pytest ; extra == 'test'", "pytest-pycodestyle ; extra == 'test'", "pytest-cov ; extra == 'test'", "coveralls ; extra == 'test'"], "requires_python": "", "summary": "Python library to build pretty command line user prompts \u2b50\ufe0f", "version": "1.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>questionary</h1>\n<p><a href=\"https://pypi.org/project/questionary/\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/459c708773e3d0a6fd631cb6e27a41c38621b73c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7175657374696f6e6172792e737667\"></a>\n<a href=\"https://pypi.org/project/questionary/\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48ecf03bb34d422c790488378d44f93831c2bb0b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7175657374696f6e6172792e737667\"></a>\n<a href=\"https://travis-ci.com/tmbo/questionary\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0682e11327759aa7f79834ae62ee83d1e69c6e9a/68747470733a2f2f7472617669732d63692e636f6d2f746d626f2f7175657374696f6e6172792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/tmbo/questionary?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce4309bed3d6e92651e5cce32bff209130b215d7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f746d626f2f7175657374696f6e6172792f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/questionary\" rel=\"nofollow\"><img alt=\"Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/abb370756a67826a4594ddf55779352e99e6259d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7175657374696f6e6172792e737667\"></a>\n<a href=\"https://app.fossa.io/projects/git%2Bgithub.com%2Ftmbo%2Fquestionary?ref=badge_shield\" rel=\"nofollow\"><img alt=\"FOSSA Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5aedbe1cbb5930a48b875df402d7bb768e22a23d/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f6769742532426769746875622e636f6d253246746d626f2532467175657374696f6e6172792e7376673f747970653d736869656c64\"></a></p>\n<p>\u2728An easy to use python library to build pretty command line user prompts \u2728</p>\n<p><img alt=\"example-gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/537332a95b5bd6b940e9f80d3d283249ac040234/646f63732f696d616765732f6578616d706c652e676966\"></p>\n<p>You need input from a user, e.g. how an output file should be named or if he really wants to execute that dangerous operation? This library will help you make the input prompts easy to read and answer for the user.</p>\n<p>Used and Supported by:</p>\n<p><a href=\"https://github.com/RasaHQ/rasa\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4dc5bbf8a7a8292a8046917ec48deffa565382d8/68747470733a2f2f726173612e636f6d2f646f63732f5f7374617469632f726173615f6c6f676f2e737667\" width=\"60\"></a></p>\n<h2>Quickstart</h2>\n<p>To install <code>questionary</code>, simply use <a href=\"http://pipenv.org/\" rel=\"nofollow\">pipenv</a> (or pip, of\ncourse):</p>\n<pre>$ pipenv install questionary\n\u2728\ud83c\udf82\u2728\n</pre>\n<p>Satisfaction guaranteed. Let's create a first question:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">questionary</span>\n\n<span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"What do you want to do?\"</span><span class=\"p\">,</span>\n    <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'Order a pizza'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Make a reservation'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Ask for opening hours'</span>\n    <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>  <span class=\"c1\"># returns value of selection</span>\n</pre>\n<p>That's all it takes to create a user prompt! There are differen types of prompts, you'll find examples for all of them further down.</p>\n<h2>Documentation</h2>\n<h3>Different question types</h3>\n<details><summary>text</summary>\n<p>A free text input for the user.</p>\n<pre><span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"What's your first name\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"example-gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd67a189a71d58d8754feb807aba197f54788d58/646f63732f696d616765732f746578742e676966\"></p>\n</details>\n<details><summary>password</summary>\n<p>A free text input for the user where the input is not\nshown but replaced with <code>***</code>.</p>\n<pre><span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">(</span><span class=\"s2\">\"What's your secret?\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"example-gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f5226fb5c560b3f99a67e976eb4ce994794bab4/646f63732f696d616765732f70617373776f72642e676966\"></p>\n</details>\n<details><summary>confirm</summary>\n<p>A yes or no question. The user can either confirm or deny.</p>\n<pre><span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">confirm</span><span class=\"p\">(</span><span class=\"s2\">\"Are you amazed?\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"example-gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6de24c67ccfb8e81585c34cbe06a539f124bb24/646f63732f696d616765732f636f6e6669726d2e676966\"></p>\n</details>\n<details><summary>select</summary>\n<p>A list of items to select a choice from. The user can pick\none option and confirm it.</p>\n<pre><span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"What do you want to do?\"</span><span class=\"p\">,</span>\n    <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"Order a pizza\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Make a reservation\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Ask for opening hours\"</span>\n    <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"example-gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ad926ba8f07adf6a2cdcb3cebf50ce3a26f2de1/646f63732f696d616765732f73656c6563742e676966\"></p>\n</details>\n<details><summary>rawselect</summary>\n<p>A list of items to select a choice from. The user can pick\none option using shortcuts and confirm it.</p>\n<pre><span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">rawselect</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"What do you want to do?\"</span><span class=\"p\">,</span>\n    <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"Order a pizza\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Make a reservation\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Ask for opening hours\"</span>\n    <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"example-gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ced8d03912b7b62c0a5de96e196afb6b0b193196/646f63732f696d616765732f72617773656c6563742e676966\"></p>\n</details>\n<details><summary>checkbox</summary>\n<p>A list of items to select multiple choices from. The user can pick\nnone, one or multiple options and confirm the selection.</p>\n<pre><span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">checkbox</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Select toppings'</span><span class=\"p\">,</span>\n    <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"bazz\"</span>\n    <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"example-gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d38902c80d8f8f0f8531fde98ab692cd0b60c3ba/646f63732f696d616765732f636865636b626f782e676966\"></p>\n</details>\n<details><summary>autocomplete</summary>\n<p>Text input with autocomplete help.</p>\n<pre><span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">autocomplete</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Choose ant specie'</span><span class=\"p\">,</span>\n    <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span>\n         <span class=\"s1\">'Camponotus pennsylvanicus'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'Linepithema humile'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'Eciton burchellii'</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"Atta colombica\"</span><span class=\"p\">,</span>\n         <span class=\"s1\">'Polyergus lucidus'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'Polyergus rufescens'</span><span class=\"p\">,</span>\n    <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"example-gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20a9bc61f6b33e12c58a7a5e66a4488d8bbb36e1/646f63732f696d616765732f6175746f636f6d706c6574652e676966\"></p>\n</details>\n<h3>Additional Features</h3>\n<details><summary>Skipping questions using conditions</summary>\n<p>Sometimes it is helpful to e.g. provide a command line flag to your app\nto skip any prompts, to avoid the need for an if around any question you\ncan pass that flag when you create the question:</p>\n<pre><span class=\"n\">DISABLED</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">confirm</span><span class=\"p\">(</span><span class=\"s2\">\"Are you amazed?\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip_if</span><span class=\"p\">(</span><span class=\"n\">DISABLED</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p>If the condition (in this case <code>DISABLED</code>) is <code>True</code>, the question will be\nskipped and the default value gets returned, otherwise the user will be\nprompted as usual and the default value will be ignored.</p>\n</details>\n<details><summary>Alternative style to create questions using a configuration dictionary</summary>\n<p>Instead of creating questions using the python functions, you can also create them using a configuration dictionary.</p>\n<pre><span class=\"n\">questions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'text'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'phone'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s2\">\"What's your phone number\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'confirm'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Do you want to continue?'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'continue'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"n\">prompt</span><span class=\"p\">(</span><span class=\"n\">questions</span><span class=\"p\">)</span>\n</pre>\n<p>The returned <code>answers</code> will be a dict containing the responses, e.g. <code>{\"phone\": \"0123123\", \"continue\": False, \"\"}</code>. The questions will be prompted one after another and <code>prompt</code> will return once all of them are answered.</p>\n<p>Each configuration dictionary needs to contain the following keys:</p>\n<ul>\n<li><code>'type'</code> - The type of the question.</li>\n<li><code>'name'</code> - The name of the question (will be used as key in the <code>answers</code> dictionary)</li>\n<li><code>'message'</code> - Message that will be shown to the user</li>\n</ul>\n<p>Optional Keys:</p>\n<ul>\n<li><code>'qmark'</code> - Question mark to use - defaults to <code>?</code>.</li>\n<li><code>'default'</code> - Preselected value.</li>\n<li><code>'choices'</code> - List of choices (applies when <code>'type': 'select'</code>) or function returning a list of choices.</li>\n<li><code>'when'</code> - Function checking if this question should be shown or skipped (same functionality than <code>.skip_if()</code>).</li>\n<li><code>'validate'</code> - Function or Validator Class performing validation (will be performed in real time as users type).</li>\n<li><code>filter</code> - Receive the user input and return the filtered value to be used inside the program.</li>\n</ul>\n</details>\n<details><summary>Advanced workflow examples</summary>\nQuestionary allows creating quite complex workflows when combining all of the above concepts.\n<pre><span class=\"kn\">from</span> <span class=\"nn\">questionary</span> <span class=\"kn\">import</span> <span class=\"n\">Separator</span><span class=\"p\">,</span> <span class=\"n\">prompt</span>\n<span class=\"n\">questions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'confirm'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'conditional_step'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Would you like the next question?'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'text'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'next_question'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Name this library?'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Validate if the first question was answered with yes or no</span>\n        <span class=\"s1\">'when'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'conditional_step'</span><span class=\"p\">],</span>\n        <span class=\"c1\"># Only accept questionary as answer</span>\n        <span class=\"s1\">'validate'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"s1\">'questionary'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'select'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'second_question'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Select item'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'choices'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'item2'</span><span class=\"p\">,</span>\n            <span class=\"n\">Separator</span><span class=\"p\">(),</span>\n            <span class=\"s1\">'other'</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'text'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'second_question'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Insert free text'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'when'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'second_question'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'other'</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n<span class=\"n\">prompt</span><span class=\"p\">(</span><span class=\"n\">questions</span><span class=\"p\">)</span>\n</pre>\n<p>The above workflow will show to the user as follows:</p>\n<ol>\n<li>Yes/No question <code>Would you like the next question?</code>.</li>\n<li><code>Name this library?</code> - only shown when the first question is answered with yes</li>\n<li>A question to select an item from a list.</li>\n<li>Free text inpt if <code>'other'</code> is selected in step 3.</li>\n</ol>\n<p>Depending on the route the user took, the result will look as follows:</p>\n<pre><span class=\"p\">{</span> \n    <span class=\"s1\">'conditional_step'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'second_question'</span><span class=\"p\">:</span> <span class=\"s1\">'Testinput'</span>   <span class=\"c1\"># Free form text</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"p\">{</span> \n    <span class=\"s1\">'conditional_step'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'next_question'</span><span class=\"p\">:</span> <span class=\"s1\">'questionary'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'second_question'</span><span class=\"p\">:</span> <span class=\"s1\">'Testinput'</span>   <span class=\"c1\"># Free form text</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can test this workflow yourself by running the <a href=\"https://github.com/tmbo/questionary/blob/master/examples/advanced_workflow.py\" rel=\"nofollow\">advanced_workflow.py example</a>.</p>\n</details>\n<details><summary>Styling your prompts with your favorite colors</summary>\n<p>You can customize all the colors used for the prompts. Every part of the prompt has an identifier, which you can use to style it. Let's create our own custom style:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">prompt_toolkit.styles</span> <span class=\"kn\">import</span> <span class=\"n\">Style</span>\n\n<span class=\"n\">custom_style_fancy</span> <span class=\"o\">=</span> <span class=\"n\">Style</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"s1\">'qmark'</span><span class=\"p\">,</span> <span class=\"s1\">'fg:#673ab7 bold'</span><span class=\"p\">),</span>       <span class=\"c1\"># token in front of the question</span>\n    <span class=\"p\">(</span><span class=\"s1\">'question'</span><span class=\"p\">,</span> <span class=\"s1\">'bold'</span><span class=\"p\">),</span>               <span class=\"c1\"># question text</span>\n    <span class=\"p\">(</span><span class=\"s1\">'answer'</span><span class=\"p\">,</span> <span class=\"s1\">'fg:#f44336 bold'</span><span class=\"p\">),</span>      <span class=\"c1\"># submitted answer text behind the question</span>\n    <span class=\"p\">(</span><span class=\"s1\">'pointer'</span><span class=\"p\">,</span> <span class=\"s1\">'fg:#673ab7 bold'</span><span class=\"p\">),</span>     <span class=\"c1\"># pointer used in select and checkbox prompts</span>\n    <span class=\"p\">(</span><span class=\"s1\">'highlighted'</span><span class=\"p\">,</span> <span class=\"s1\">'fg:#673ab7 bold'</span><span class=\"p\">),</span> <span class=\"c1\"># pointed-at choice in select and checkbox prompts</span>\n    <span class=\"p\">(</span><span class=\"s1\">'selected'</span><span class=\"p\">,</span> <span class=\"s1\">'fg:#cc5454'</span><span class=\"p\">),</span>         <span class=\"c1\"># style for a selected item of a checkbox</span>\n    <span class=\"p\">(</span><span class=\"s1\">'separator'</span><span class=\"p\">,</span> <span class=\"s1\">'fg:#cc5454'</span><span class=\"p\">),</span>        <span class=\"c1\"># separator in lists</span>\n    <span class=\"p\">(</span><span class=\"s1\">'instruction'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">),</span>                <span class=\"c1\"># user instructions for select, rawselect, checkbox</span>\n    <span class=\"p\">(</span><span class=\"s1\">'text'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">),</span>                       <span class=\"c1\"># plain text</span>\n    <span class=\"p\">(</span><span class=\"s1\">'disabled'</span><span class=\"p\">,</span> <span class=\"s1\">'fg:#858585 italic'</span><span class=\"p\">)</span>   <span class=\"c1\"># disabled choices for select and checkbox prompts</span>\n<span class=\"p\">])</span>\n</pre>\n<p>To use our custom style, we need to pass it to the question type:</p>\n<pre><span class=\"n\">questionary</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"What's your phone number\"</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"n\">custom_style_fancy</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"p\">()</span>\n</pre>\n<p>It is also possible to use a list of token tuples as a <code>Choice</code> title. This\nexample assumes there is a style token named <code>bold</code> in the custom style you are\nusing:</p>\n<pre><span class=\"n\">Choice</span><span class=\"p\">(</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'class:text'</span><span class=\"p\">,</span> <span class=\"s1\">'plain text '</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'class:bold'</span><span class=\"p\">,</span> <span class=\"s1\">'bold text'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>As you can see it is possible to use custom style tokens for this purpose as\nwell. Note that Choices with token tuple titles will not be styled by the\n<code>selected</code> or <code>highlighted</code> tokens. If not provided, the <code>value</code> of the Choice\nwill be the text concatenated (<code>'plain text bold text'</code> in the above example).</p>\n</details>\n<h2>How to Contribute</h2>\n<p>Contributions are highly welcomed and appreciated. Every little help counts,\nso do not hesitate!</p>\n<ol>\n<li>Check for open issues or open a fresh issue to start a discussion\naround a feature idea or a bug. There is a <a href=\"https://github.com/tmbo/questionary/issues?direction=desc&amp;labels=good+first+issue&amp;page=1&amp;sort=updated&amp;state=open\" rel=\"nofollow\">Contributor\nFriendly</a>\ntag for issues that should be ideal for people who are not very\nfamiliar with the codebase yet.</li>\n<li>Fork <a href=\"https://github.com/tmbo/questionary\" rel=\"nofollow\">the repository</a> on\nGitHub to start making your changes to the <strong>master</strong> branch (or\nbranch off of it).</li>\n<li>Write a test which shows that the bug was fixed or that the feature\nworks as expected.</li>\n<li>Ensure your code passes running <code>black questionary</code>.</li>\n<li>Send a pull request and bug the maintainer until it gets merged and\npublished. \ud83d\ude42</li>\n</ol>\n<h2>Contributors</h2>\n<p><code>questionary</code> is written and maintained by Tom Bocklisch.</p>\n<p>It is based on the great work of <a href=\"https://github.com/CITGuru/PyInquirer\" rel=\"nofollow\">Oyetoke Toby</a>\nas well as the work from <a href=\"https://github.com/finklabs/whaaaaat\" rel=\"nofollow\">Mark Fink</a>.</p>\n<h2>Changelog</h2>\n<details><summary>unreleased (master branch)</summary>\n</details>\n<details><summary>1.5.2 (16.04.2020)</summary>\n<p>Bug fix release.</p>\n<ul>\n<li>Added <code>.ask_async</code> support for forms.</li>\n</ul>\n</details>\n<details><summary>1.5.1 (22.01.2020)</summary>\n<p>Bug fix release.</p>\n<ul>\n<li>Fixed <code>.ask_async</code> for questions on <code>prompt_toolkit==2.*</code>. Added tests for it.</li>\n</ul>\n</details>\n<details><summary>1.5.0 (22.01.2020)</summary>\n<p>Feature release.</p>\n<ul>\n<li>Added support for prompt_toolkit 3</li>\n<li>All tests will be run against prompt_toolkit 2 and 3</li>\n<li>Removed support for python 3.5 (prompt_toolkit 3 does not support that anymore)</li>\n</ul>\n</details>\n<details><summary>1.4.0 (10.11.2019)</summary>\n<p>Feature release.</p>\n<ul>\n<li>Added additional question type <code>autocomplete</code></li>\n<li>Allow pointer and highlight in select question type</li>\n</ul>\n</details>\n<details><summary>1.3.0 (25.08.2019)</summary>\n<p>Feature release.</p>\n<ul>\n<li>Add additional options to style checkboxes and select prompts <a href=\"https://github.com/tmbo/questionary/pull/14\" rel=\"nofollow\">https://github.com/tmbo/questionary/pull/14</a></li>\n</ul>\n</details>\n<details><summary>1.2.1 (19.08.2019)</summary>\n<p>Bug fix release.</p>\n<ul>\n<li>Fixed compatibility with python 3.5.2 by removing <code>Type</code> annotation (this time for real)</li>\n</ul>\n</details>\n<details><summary>1.2.0 (30.07.2019)</summary>\n<p>Feature release.</p>\n<ul>\n<li>Allow a user to pass in a validator as an instance <a href=\"https://github.com/tmbo/questionary/pull/10\" rel=\"nofollow\">https://github.com/tmbo/questionary/pull/10</a></li>\n</ul>\n</details>\n<details><summary>1.1.1 (21.04.2019)</summary>\n<p>Bug fix release.</p>\n<ul>\n<li>Fixed compatibility with python 3.5.2 by removing <code>Type</code> annotation</li>\n</ul>\n</details>\n<details><summary>1.1.0 (10.03.2019)</summary>\n<p>Feature release.</p>\n<ul>\n<li>Added <code>skip_if</code> to questions to allow skipping questions using a flag</li>\n</ul>\n</details>\n<details><summary>1.0.2 (23.01.2019)</summary>\n<p>Bug fix release.</p>\n<ul>\n<li>Fixed odd behaviour if select is created without providing any choices\ninstead, we will raise a <code>ValueError</code> now. (<a href=\"https://github.com/tmbo/questionary/pull/6\" rel=\"nofollow\">#6</a>)</li>\n</ul>\n</details>\n<details><summary>1.0.1 (12.01.2019)</summary>\n<p>Bug fix release, adding some convenience shortcuts.</p>\n<ul>\n<li>Added shortcut keys <code>j</code> (move down^ the list) and <code>k</code> (move up) to\nthe prompts <code>select</code> and <code>checkbox</code> (fixes <a href=\"https://github.com/tmbo/questionary/issues/2\" rel=\"nofollow\">#2</a>)</li>\n<li>Fixed unclosed file handle in <code>setup.py</code></li>\n<li>Fixed unnecessary empty lines moving selections to far down (fixes <a href=\"https://github.com/tmbo/questionary/issues/3\" rel=\"nofollow\">#3</a>)</li>\n</ul>\n</details>\n<details><summary>1.0.0 (14.12.2018)</summary>\n<p>Initial public release of the library</p>\n<ul>\n<li>Added python interface</li>\n<li>Added dict style question creation</li>\n<li>Improved the documentation</li>\n<li>More tests and automatic travis test execution</li>\n</ul>\n</details>\n<h2>Developer Info</h2>\n<details>\n<summary>Notes on how to do random things related to this repo</summary>\n<p><strong>Create one of the commandline recordings</strong></p>\n<ol>\n<li>Install <code>brew install asciinema</code> and <code>npm install --global asciicast2gif</code></li>\n<li>Run <code>asciinema rec</code></li>\n<li>Do the thing</li>\n<li>Convert to giv <code>asciicast2gif -h 7 -w 120 -s 2 &lt;recoding&gt; output.gif</code></li>\n</ol>\n</details>\n<h2>License</h2>\n<p>Licensed under the MIT License. Copyright 2020 Tom Bocklisch. <a href=\"LICENSE\" rel=\"nofollow\">Copy of the license</a>.</p>\n<p><a href=\"https://app.fossa.io/projects/git%2Bgithub.com%2Ftmbo%2Fquestionary?ref=badge_large\" rel=\"nofollow\"><img alt=\"FOSSA Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e05d4e68d627c88e8e9af241ef74f3c9adbc0fd/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f6769742532426769746875622e636f6d253246746d626f2532467175657374696f6e6172792e7376673f747970653d6c61726765\"></a></p>\n\n          </div>"}, "last_serial": 7039496, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b9b4991d2ba7803b30a2907f4d1b6cb3", "sha256": "db044343249813afe9620c2f2dea853ebc28c5cea8042477a687df511910f24e"}, "downloads": -1, "filename": "questionary-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b9b4991d2ba7803b30a2907f4d1b6cb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24616, "upload_time": "2018-12-14T15:54:00", "upload_time_iso_8601": "2018-12-14T15:54:00.440405Z", "url": "https://files.pythonhosted.org/packages/93/b2/3ed1d3bf1ca5615025b4fa27b6cc831d5000d7882785fcaf4a59301f2833/questionary-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03ab45fbd9acd1e2d8c4d06c2b6676b2", "sha256": "3f81ef0ca0c9ebe17806e8382fd3caa377087a969b7a7ee033862e2510a3de02"}, "downloads": -1, "filename": "questionary-1.0.0.tar.gz", "has_sig": false, "md5_digest": "03ab45fbd9acd1e2d8c4d06c2b6676b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17919, "upload_time": "2018-12-14T15:54:02", "upload_time_iso_8601": "2018-12-14T15:54:02.462772Z", "url": "https://files.pythonhosted.org/packages/93/63/1dc78ebeb16f116ad076c149c7f475095e33f3caa2e72d409506fcd0e301/questionary-1.0.0.tar.gz", "yanked": false}], "1.0.0a1": [{"comment_text": "", "digests": {"md5": "b2b45fdf05678d657d2a7e5584de46fa", "sha256": "06ee881c327a79827411f1fbb903b01811597d9c6fd6fe8faeee3b34c1936f9a"}, "downloads": -1, "filename": "questionary-1.0.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2b45fdf05678d657d2a7e5584de46fa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13471, "upload_time": "2018-12-01T21:31:13", "upload_time_iso_8601": "2018-12-01T21:31:13.311486Z", "url": "https://files.pythonhosted.org/packages/6e/ac/b72404a412f88f88e487877df627a412fe79cca6757c8825f1a826503db2/questionary-1.0.0a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdf6708ebf9de45d96b98c769e868970", "sha256": "caaa8650c263cec07a61627eef49671e739f131fe33b8f6d597841be591eca7e"}, "downloads": -1, "filename": "questionary-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "bdf6708ebf9de45d96b98c769e868970", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9008, "upload_time": "2018-12-01T21:31:15", "upload_time_iso_8601": "2018-12-01T21:31:15.486531Z", "url": "https://files.pythonhosted.org/packages/96/a7/a20b491d65300b097c4c762d85a5d1a8616f925edbdaab8ca993884387e2/questionary-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "ca6e2be732f9df9ef703680c9b13f90d", "sha256": "ef8edbff1e53a239ef332b879ddb93bc623a3167fbdc0b8e161f8a1828ea9827"}, "downloads": -1, "filename": "questionary-1.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "ca6e2be732f9df9ef703680c9b13f90d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14177, "upload_time": "2018-12-02T00:07:04", "upload_time_iso_8601": "2018-12-02T00:07:04.669176Z", "url": "https://files.pythonhosted.org/packages/44/8d/b6671849e6a931e17ce6c505e4b09c47523089061214a9e688cc0a0ec77d/questionary-1.0.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc8debaeb12efc80e248532d8897b3ed", "sha256": "39a8264f885023deb90910ccb9aa21cfb09e5e8bfab3d18ac0271a379c3baa82"}, "downloads": -1, "filename": "questionary-1.0.0a2.tar.gz", "has_sig": false, "md5_digest": "cc8debaeb12efc80e248532d8897b3ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9175, "upload_time": "2018-12-02T00:07:06", "upload_time_iso_8601": "2018-12-02T00:07:06.008707Z", "url": "https://files.pythonhosted.org/packages/15/c4/91b43d808424b07ea9bbaa439ffc83a3b255601c114431353857295c228e/questionary-1.0.0a2.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "023d5d603b70505bb916691d1189b26a", "sha256": "2f11e1f0704388b65ed1cd25794e51438930eae510011bc8d92c4f1369d97158"}, "downloads": -1, "filename": "questionary-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "023d5d603b70505bb916691d1189b26a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25702, "upload_time": "2019-01-12T08:56:55", "upload_time_iso_8601": "2019-01-12T08:56:55.616281Z", "url": "https://files.pythonhosted.org/packages/b2/26/af913cfd14653081530424a2cb05589da04cfa3202429e162faf4c3cb700/questionary-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a811b83123c79bdad074315ebcf8d1e", "sha256": "15cb2e86f286ed1fe80d8df6e5dae4c14c9807e5b1456ac1842a0db4ea60c3be"}, "downloads": -1, "filename": "questionary-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8a811b83123c79bdad074315ebcf8d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19247, "upload_time": "2019-01-12T08:56:58", "upload_time_iso_8601": "2019-01-12T08:56:58.204557Z", "url": "https://files.pythonhosted.org/packages/33/9a/8f7ef112fe52455bf6ca8a9d462aaf2d82f33341a187eee3771065233dbf/questionary-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "872f24e884163131794c0980280b76e9", "sha256": "08b2f04d4b863169cf64e845bb93fb668ac41106562b7d1febd8c766e40de54a"}, "downloads": -1, "filename": "questionary-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "872f24e884163131794c0980280b76e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25911, "upload_time": "2019-01-23T10:21:24", "upload_time_iso_8601": "2019-01-23T10:21:24.877102Z", "url": "https://files.pythonhosted.org/packages/f9/5f/1f230d9fa90f8716fe4d38c293cc5614172c4a53629bffdf81f42ecb4494/questionary-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69e8aba8e07f81616358eb4f6fb55f33", "sha256": "3d987cd7b6b902cb750d2938b65c662b0cb549648b18a19cf11db0b5c894910e"}, "downloads": -1, "filename": "questionary-1.0.2.tar.gz", "has_sig": false, "md5_digest": "69e8aba8e07f81616358eb4f6fb55f33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19596, "upload_time": "2019-01-23T10:21:26", "upload_time_iso_8601": "2019-01-23T10:21:26.598733Z", "url": "https://files.pythonhosted.org/packages/29/28/5eaabf675e6c051754dcb1d5e6e8af249d45531f342b3854fec5f7dc4ec5/questionary-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "bd5f132b665ea368b61249446f2585ec", "sha256": "874e05ac8e5cc65e9555a01ccb64a64790c902b83c0c22ec1593aea97e9f4894"}, "downloads": -1, "filename": "questionary-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bd5f132b665ea368b61249446f2585ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26608, "upload_time": "2019-04-10T12:56:53", "upload_time_iso_8601": "2019-04-10T12:56:53.792034Z", "url": "https://files.pythonhosted.org/packages/be/3c/d57e96650318ab52f50030815cb34573ed6ba6056955fca12509827b12e4/questionary-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fb6116e4b72ab56b36edf063c9bdb3b", "sha256": "c3dec59d10231dac264a473637e00f2d1a778ebfe719c2d632bc7808c97cc148"}, "downloads": -1, "filename": "questionary-1.1.0.tar.gz", "has_sig": false, "md5_digest": "5fb6116e4b72ab56b36edf063c9bdb3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20486, "upload_time": "2019-04-10T12:56:54", "upload_time_iso_8601": "2019-04-10T12:56:54.938249Z", "url": "https://files.pythonhosted.org/packages/4f/02/5bda757af7453ee5321bf33f038a9df2b0d7ffd0ed25f22ddf1067fb6ace/questionary-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "aee6b72b0742fc76dde8517431ba1ccb", "sha256": "382893ae127a5f29f0974044c109d138581f4f9745899b93041d2d7830f9aa50"}, "downloads": -1, "filename": "questionary-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aee6b72b0742fc76dde8517431ba1ccb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26622, "upload_time": "2019-04-21T19:26:50", "upload_time_iso_8601": "2019-04-21T19:26:50.463412Z", "url": "https://files.pythonhosted.org/packages/1e/e2/eda18deed2410a4ac243ad13e375d1f0023288e0872310164a772d09c622/questionary-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca100de7af1b9a8123a80eeca83659e2", "sha256": "35450047873b7800ee41afc877ce51d2ad965444cd191dc4c481b8452d13d068"}, "downloads": -1, "filename": "questionary-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ca100de7af1b9a8123a80eeca83659e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20573, "upload_time": "2019-04-21T19:26:51", "upload_time_iso_8601": "2019-04-21T19:26:51.796562Z", "url": "https://files.pythonhosted.org/packages/33/d2/aaacf66d2251f8d8d57a6dd2e3af196ac315c52819de49f99cdab85b22e4/questionary-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "1cbba2e74e69aee5c545d0c7b38c9dbc", "sha256": "cf8610751f1e8b74989cd2dfefc5f33c8ad420e044a49e6d11641d4a500b5d9f"}, "downloads": -1, "filename": "questionary-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1cbba2e74e69aee5c545d0c7b38c9dbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26727, "upload_time": "2019-07-30T11:09:55", "upload_time_iso_8601": "2019-07-30T11:09:55.406573Z", "url": "https://files.pythonhosted.org/packages/f0/9f/293f5d3ade52e8ee4a0c1348e7b6455c8d90e96dc0cfb723ec0a1281198c/questionary-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "637cdd03bb4d6cdf2aa0b4a606e9cd56", "sha256": "78fb89913ee593f08c48f603a9c53e44fa19ff0ae9edd1697ce174ebc37a01fe"}, "downloads": -1, "filename": "questionary-1.2.0.tar.gz", "has_sig": false, "md5_digest": "637cdd03bb4d6cdf2aa0b4a606e9cd56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20708, "upload_time": "2019-07-30T11:09:57", "upload_time_iso_8601": "2019-07-30T11:09:57.017183Z", "url": "https://files.pythonhosted.org/packages/c8/cd/1a2898f7246eabc74f7a3f7d6ad933123356b3a502a6c2356a2a9bbe31bd/questionary-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "35c61cc7d5faeba0ef42e424ab23d0c4", "sha256": "55c319bae0f45e23769e7600adbaeaae876c3730386bf384794f65dc0890b265"}, "downloads": -1, "filename": "questionary-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "35c61cc7d5faeba0ef42e424ab23d0c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26674, "upload_time": "2019-08-19T16:15:08", "upload_time_iso_8601": "2019-08-19T16:15:08.681763Z", "url": "https://files.pythonhosted.org/packages/37/55/2333e851eeb6d7bf52906633e15558c3d6c73c6aa5744dd213f7258a0319/questionary-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b34793c18e5175a24213837bd4ade25", "sha256": "5538e8e1833e6d281650cc4248d92cfe7348f27631a4201396ff08dbc50a360f"}, "downloads": -1, "filename": "questionary-1.2.1.tar.gz", "has_sig": false, "md5_digest": "3b34793c18e5175a24213837bd4ade25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20720, "upload_time": "2019-08-19T16:15:10", "upload_time_iso_8601": "2019-08-19T16:15:10.538885Z", "url": "https://files.pythonhosted.org/packages/0c/91/9c895cca584eb56d543917538677d9cc064628cc5b338cfa442170a090fe/questionary-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "edc2c097e3bec21905f9d73ab7820a2e", "sha256": "b747a6c2caf0c3a9849857717e912f315eed7f77ac593d88829de31c14c9f5ad"}, "downloads": -1, "filename": "questionary-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "edc2c097e3bec21905f9d73ab7820a2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27451, "upload_time": "2019-08-25T18:35:31", "upload_time_iso_8601": "2019-08-25T18:35:31.349984Z", "url": "https://files.pythonhosted.org/packages/c2/f9/8a6e7fce60566b3bcdc5ad0923916f38a65bca630ce3647251e672308bdf/questionary-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa40807bee7d52696f1916b59cb3256d", "sha256": "867c6ef08a139eacc509502292dcc764cf95abbcfcb0ffdea29df5782434cb64"}, "downloads": -1, "filename": "questionary-1.3.0.tar.gz", "has_sig": false, "md5_digest": "aa40807bee7d52696f1916b59cb3256d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21715, "upload_time": "2019-08-25T18:35:32", "upload_time_iso_8601": "2019-08-25T18:35:32.999475Z", "url": "https://files.pythonhosted.org/packages/05/c7/21f443dc9730c7f9d7c9556e34ea5bedcb28b32a75a765336005eda10763/questionary-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "a992e058cafef33644c4126c4ce2a530", "sha256": "87ffc9dab940ec962c54fe2eec3a4eecb10f7cfa91994fc94c839476f4099154"}, "downloads": -1, "filename": "questionary-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a992e058cafef33644c4126c4ce2a530", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30712, "upload_time": "2019-11-10T18:36:19", "upload_time_iso_8601": "2019-11-10T18:36:19.220798Z", "url": "https://files.pythonhosted.org/packages/94/2a/2f874784637210ac5866635d2627b9171c717cdd8ab0aab1ce4382c91575/questionary-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "099b6e78870da9f831c10142ffe40a76", "sha256": "7d4f98c9e5a1c0cd7e45a2c13959d5df9de3f55cb208d7b0265e4dd53dede584"}, "downloads": -1, "filename": "questionary-1.4.0.tar.gz", "has_sig": false, "md5_digest": "099b6e78870da9f831c10142ffe40a76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23958, "upload_time": "2019-11-10T18:36:20", "upload_time_iso_8601": "2019-11-10T18:36:20.909287Z", "url": "https://files.pythonhosted.org/packages/f0/71/129f456cd8e55d4d26a82601f8d86f9eacaa56c36a3be3b90665d28e9c0e/questionary-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "d1d44d19a7c301ee8d84db495ee6978a", "sha256": "f31121fa97bb83d83b6671f8b8796f976a91cb646130f2b0125d9dd986c7136b"}, "downloads": -1, "filename": "questionary-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d1d44d19a7c301ee8d84db495ee6978a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25036, "upload_time": "2020-01-22T13:19:23", "upload_time_iso_8601": "2020-01-22T13:19:23.919633Z", "url": "https://files.pythonhosted.org/packages/46/5f/4488bb59ea72d8d0422e6f9f434d2e42657b56f841506f4dd5378b260b6d/questionary-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfd5be0095b38ea8d547f853ecd91a53", "sha256": "809cee888b46e5389fa7350705b05eca1efc84781a1e07e623d6d2dcda42958f"}, "downloads": -1, "filename": "questionary-1.5.0.tar.gz", "has_sig": false, "md5_digest": "bfd5be0095b38ea8d547f853ecd91a53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 639288, "upload_time": "2020-01-22T13:19:25", "upload_time_iso_8601": "2020-01-22T13:19:25.315792Z", "url": "https://files.pythonhosted.org/packages/61/31/ad66ae07ba5f0bfaa1550b8da3b8cb53e42c5b35d1b9c25cf9ef159f7a3f/questionary-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "ce7087caf66b4c7edade8507d82b84eb", "sha256": "5314bfb746321997a9dc457e5e0a533e577a661347f3a89c63277c6746e9a8b9"}, "downloads": -1, "filename": "questionary-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ce7087caf66b4c7edade8507d82b84eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25084, "upload_time": "2020-01-22T15:40:20", "upload_time_iso_8601": "2020-01-22T15:40:20.319741Z", "url": "https://files.pythonhosted.org/packages/09/03/1a1020649ab0cf91b289ba980c07d48bea54ece53a94530a6e2ae0bb5ebf/questionary-1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb969e87b0134cec58f5de38780532a0", "sha256": "f199d4a780183679725f10a209b68be27f07cfd2852d6d7ea9e4a31fb45fb0c0"}, "downloads": -1, "filename": "questionary-1.5.1.tar.gz", "has_sig": false, "md5_digest": "fb969e87b0134cec58f5de38780532a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 639628, "upload_time": "2020-01-22T15:40:22", "upload_time_iso_8601": "2020-01-22T15:40:22.135098Z", "url": "https://files.pythonhosted.org/packages/ed/08/d0aee8ce665461b38d98ca4e3fa1fe6c6a0936f5d85c0df61d8605073140/questionary-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "042ea94205a0be1657ea8d9a2511fd74", "sha256": "6998a1fe0639daec0da44e0a973f387e7c778bdc418d76ecfa45a7b3a0997049"}, "downloads": -1, "filename": "questionary-1.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "042ea94205a0be1657ea8d9a2511fd74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26191, "upload_time": "2020-04-17T11:16:56", "upload_time_iso_8601": "2020-04-17T11:16:56.614725Z", "url": "https://files.pythonhosted.org/packages/05/7d/61b7d0da15bb50e7239c870771320026447b7e2d9490ee96f49dddd3ef0d/questionary-1.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b3d4305f6d74c97739e18525f54e502", "sha256": "f6e41e36b6c86fe0c3ff12a30c6c6a4e80129efba5ad0a115d71fd5df119c726"}, "downloads": -1, "filename": "questionary-1.5.2.tar.gz", "has_sig": false, "md5_digest": "2b3d4305f6d74c97739e18525f54e502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 213322, "upload_time": "2020-04-17T11:16:57", "upload_time_iso_8601": "2020-04-17T11:16:57.904861Z", "url": "https://files.pythonhosted.org/packages/9e/94/d92feac9a32fee5e7ca63b6e51fbff1d2ec83daabe7f1fe8b9845826b77e/questionary-1.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "042ea94205a0be1657ea8d9a2511fd74", "sha256": "6998a1fe0639daec0da44e0a973f387e7c778bdc418d76ecfa45a7b3a0997049"}, "downloads": -1, "filename": "questionary-1.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "042ea94205a0be1657ea8d9a2511fd74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26191, "upload_time": "2020-04-17T11:16:56", "upload_time_iso_8601": "2020-04-17T11:16:56.614725Z", "url": "https://files.pythonhosted.org/packages/05/7d/61b7d0da15bb50e7239c870771320026447b7e2d9490ee96f49dddd3ef0d/questionary-1.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b3d4305f6d74c97739e18525f54e502", "sha256": "f6e41e36b6c86fe0c3ff12a30c6c6a4e80129efba5ad0a115d71fd5df119c726"}, "downloads": -1, "filename": "questionary-1.5.2.tar.gz", "has_sig": false, "md5_digest": "2b3d4305f6d74c97739e18525f54e502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 213322, "upload_time": "2020-04-17T11:16:57", "upload_time_iso_8601": "2020-04-17T11:16:57.904861Z", "url": "https://files.pythonhosted.org/packages/9e/94/d92feac9a32fee5e7ca63b6e51fbff1d2ec83daabe7f1fe8b9845826b77e/questionary-1.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:35 2020"}