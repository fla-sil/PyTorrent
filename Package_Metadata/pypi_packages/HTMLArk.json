{"info": {"author": "David Powell", "author_email": "BitLooter@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Archiving", "Topic :: Text Processing :: Markup :: HTML"], "description": "HTMLArk\n=======\n\n.. image:: https://img.shields.io/github/downloads/BitLooter/htmlark/total.svg\n        :target: https://github.com/BitLooter/htmlark\n.. image:: https://img.shields.io/pypi/v/HTMLArk.svg\n        :target: https://pypi.python.org/pypi/HTMLArk\n.. image:: https://img.shields.io/pypi/l/HTMLArk.svg\n        :target: https://raw.githubusercontent.com/BitLooter/htmlark/master/LICENSE.txt\n\nEmbed images, CSS, and JavaScript into an HTML file. Through the magic of `data URIs <https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs>`_, HTMLArk can save these external dependencies inline right in the HTML. No more keeping around those \"reallycoolwebpage_files\" directories alongside the HTML files, everything is self-contained.\n\nNote that this will only work with static pages. If an image or other resource is loaded with JavaScript, HTMLArk won't even know it exists.\n\nInstallation and Requirements\n-----------------------------\nPython 3.5 or greater is required for HTMLArk.\n\nInstall HTMLArk with ``pip`` like so:\n\n.. code-block:: bash\n\n    pip install htmlark\n\nTo use the `lxml <http://lxml.de/>`_ (recommended) or `html5lib <https://github.com/html5lib/html5lib-python>`_ parsers, you will need to install the lxml and/or html5lib Python libraries as well. HTMLArk can also get resources from the web, to enable this functionality you need `Requests <http://python-requests.org/>`_ installed. You can install HTMLArk with all optional dependencies with this command:\n\n.. code-block:: bash\n\n    pip install htmlark[http,parsers]\n\n\nIf you want to install it manually, the only hard dependency HTMLArk has is `Beautiful Soup 4 <http://www.crummy.com/software/BeautifulSoup/>`_.\n\n\nCommand-line usage\n------------------\nYou can also get this information with ``htmlark --help``.\n\n::\n\n    usage: htmlark [-h] [-o OUTPUT] [-E] [-I] [-C] [-J]\n                   [-p {html.parser,lxml,html5lib,auto}] [-v] [--version]\n                   [webpage]\n\n    Converts a webpage including external resources into a single HTML file. Note\n    that resources loaded with JavaScript will not be handled by this program, it\n    will only work properly with static pages.\n\n    positional arguments:\n      webpage               URL or path of webpage to convert. If not specified,\n                            read from STDIN.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -o OUTPUT, --output OUTPUT\n                            File to write output. Defaults to STDOUT.\n      -E, --ignore-errors   Ignores unreadable resources\n      -I, --ignore-images   Ignores images during conversion\n      -C, --ignore-css      Ignores stylesheets during conversion\n      -J, --ignore-js       Ignores external JavaScript during conversion\n      -p {html.parser,lxml,html5lib,auto}, --parser {html.parser,lxml,html5lib,auto}\n                            Select HTML parser. If not specifed, htmlark tries to\n                            use lxml, html5lib, and html.parser in that order (the\n                            'auto' option). See documentation for more\n                            information.\n      -v, --verbose         Prints information during conversion\n      --version             Displays version information\n\n\nUsing HTMLArk as a module\n-------------------------\nYou can also integrate HTMLArk into your own scripts, by importing it and calling ``convert_page``. Example:\n\n.. code-block:: python\n\n    import htmlark\n    packed_html = htmlark.convert_page(\"samplepage.html\", ignore_errors=True)\n\nDetails::\n\n    def convert_page(page_path: str, parser: str='auto',\n                     callback: Callable[[str, str, str], None]=lambda *_: None,\n                     ignore_errors: bool=False, ignore_images: bool=False,\n                     ignore_css: bool=False, ignore_js: bool=False) -> str\n\n        Take an HTML file or URL and outputs new HTML with resources as data URIs.\n\n        Parameters:\n            pageurl (str): URL or path of web page to convert.\n        Keyword Arguments:\n            parser (str): HTML Parser for Beautiful Soup 4 to use. See\n                `BS4's docs. <http://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser>`_\n                Default: 'auto' - Not an actual parser, but tells the library to\n                automatically choose a parser.\n            ignore_errors (bool): If ``True`` do not abort on unreadable resources.\n                Unprocessable tags (e.g. broken links) will simply be skipped.\n                Default: ``False``\n            ignore_images (bool): If ``True`` do not process ``<img>`` tags.\n                Default: ``False``\n            ignore_css (bool): If ``True`` do not process ``<link>`` (stylesheet) tags.\n                Default: ``False``\n            ignore_js (bool): If ``True`` do not process ``<script>`` tags.\n                Default: ``False``\n            callback (function): Called before a new resource is processed. Takes\n                three parameters: message type ('INFO' or 'ERROR'), a string with\n                the category of the callback (usually the tag related to the\n                message), and the message data (usually a string to be printed).\n        Returns:\n            str: The new webpage HTML.\n        Raises:\n            OSError: Error reading a file\n            ValueError: Problem with a path/URL\n            requests.exceptions.RequestException: Problem getting remote resource\n            NameError: HTMLArk requires Requests to be installed to get resources\n                from the web. This error is raised when an external URL is\n                encountered.\n        Examples:\n            A very basic conversion of a local HTML file, using default settings:\n\n            >>> convert_page(\"webpage.html\")\n            <Converted page HTML>\n\n            However, that example will fail if there are any problems accessing\n            linked resources in the HTML (e.g. a missing image). If you cannot\n            verify the validity of links ahead of time (converting a downloaded\n            web page, for example) you can disable failing on error:\n\n            >>> convert_page(\"brokenpage.html\", ignore_errors=True)\n            <Converted page HTML, tags with broken links untouched>\n\n            You can also skip processing of content types:\n\n            >>> convert_page(\"webpage.html\", ignore_images=True)\n            <Converted page HTML, with <img> tags untouched>\n\n            If you want to get feedback on the progress of the conversion, you can\n            define a callback function. For example, a callback that prints all\n            CSS-related errors to stdout (note that ignore_errors will bypass\n            broken links but still report them to the callback):\n\n            >>> def mycallback(message_type, message_category, message):\n            ...     if message_type == 'ERROR' and message_category == 'link':\n            ...         print(message)\n            >>> convert_page(\"badcss.html\", ignore_errors=True, callback=mycallback)\n            <Converted page HTML, CSS links untouched, CSS errors printed to screen>\n\n\nCompatibility\n-------------\nData URIs have been supported by every major browser for many years now. The only browser that might cause problems is Internet Explorer (surprise!). IE7 and below have no support for data URIs, but IE8 and above support them for CSS and images. As far as I know no version of IE allows you to load JavaScript from a data URI, though it is supported in Edge.\n\nSee `Can I Use's page on data URIs <http://caniuse.com/#feat=datauri>`_ for more compatibility information.\n\nLicense\n-------\nHTMLArk is released under the MIT license, which may be found in the LICENSE file.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BitLooter/htmlark", "keywords": "development html webpage css javascript", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "HTMLArk", "package_url": "https://pypi.org/project/HTMLArk/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/HTMLArk/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/BitLooter/htmlark"}, "release_url": "https://pypi.org/project/HTMLArk/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Pack a webpage including support files into a single HTML file.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/BitLooter/htmlark\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/downloads/BitLooter/htmlark/total.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6896f5ad92c59619a8be96ee32b40b5e0d12135b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f4269744c6f6f7465722f68746d6c61726b2f746f74616c2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/HTMLArk\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/HTMLArk.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b621b1774ece529974044277a391e9e28409c6a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f48544d4c41726b2e737667\"></a>\n<a href=\"https://raw.githubusercontent.com/BitLooter/htmlark/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/HTMLArk.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5b92fe61d95aa03c148b65321d43b7ad2adac52/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f48544d4c41726b2e737667\"></a>\n<p>Embed images, CSS, and JavaScript into an HTML file. Through the magic of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs\" rel=\"nofollow\">data URIs</a>, HTMLArk can save these external dependencies inline right in the HTML. No more keeping around those \u201creallycoolwebpage_files\u201d directories alongside the HTML files, everything is self-contained.</p>\n<p>Note that this will only work with static pages. If an image or other resource is loaded with JavaScript, HTMLArk won\u2019t even know it exists.</p>\n<div id=\"installation-and-requirements\">\n<h2>Installation and Requirements</h2>\n<p>Python 3.5 or greater is required for HTMLArk.</p>\n<p>Install HTMLArk with <tt>pip</tt> like so:</p>\n<pre>pip install htmlark\n</pre>\n<p>To use the <a href=\"http://lxml.de/\" rel=\"nofollow\">lxml</a> (recommended) or <a href=\"https://github.com/html5lib/html5lib-python\" rel=\"nofollow\">html5lib</a> parsers, you will need to install the lxml and/or html5lib Python libraries as well. HTMLArk can also get resources from the web, to enable this functionality you need <a href=\"http://python-requests.org/\" rel=\"nofollow\">Requests</a> installed. You can install HTMLArk with all optional dependencies with this command:</p>\n<pre>pip install htmlark<span class=\"o\">[</span>http,parsers<span class=\"o\">]</span>\n</pre>\n<p>If you want to install it manually, the only hard dependency HTMLArk has is <a href=\"http://www.crummy.com/software/BeautifulSoup/\" rel=\"nofollow\">Beautiful Soup 4</a>.</p>\n</div>\n<div id=\"command-line-usage\">\n<h2>Command-line usage</h2>\n<p>You can also get this information with <tt>htmlark <span class=\"pre\">--help</span></tt>.</p>\n<pre>usage: htmlark [-h] [-o OUTPUT] [-E] [-I] [-C] [-J]\n               [-p {html.parser,lxml,html5lib,auto}] [-v] [--version]\n               [webpage]\n\nConverts a webpage including external resources into a single HTML file. Note\nthat resources loaded with JavaScript will not be handled by this program, it\nwill only work properly with static pages.\n\npositional arguments:\n  webpage               URL or path of webpage to convert. If not specified,\n                        read from STDIN.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        File to write output. Defaults to STDOUT.\n  -E, --ignore-errors   Ignores unreadable resources\n  -I, --ignore-images   Ignores images during conversion\n  -C, --ignore-css      Ignores stylesheets during conversion\n  -J, --ignore-js       Ignores external JavaScript during conversion\n  -p {html.parser,lxml,html5lib,auto}, --parser {html.parser,lxml,html5lib,auto}\n                        Select HTML parser. If not specifed, htmlark tries to\n                        use lxml, html5lib, and html.parser in that order (the\n                        'auto' option). See documentation for more\n                        information.\n  -v, --verbose         Prints information during conversion\n  --version             Displays version information\n</pre>\n</div>\n<div id=\"using-htmlark-as-a-module\">\n<h2>Using HTMLArk as a module</h2>\n<p>You can also integrate HTMLArk into your own scripts, by importing it and calling <tt>convert_page</tt>. Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">htmlark</span>\n<span class=\"n\">packed_html</span> <span class=\"o\">=</span> <span class=\"n\">htmlark</span><span class=\"o\">.</span><span class=\"n\">convert_page</span><span class=\"p\">(</span><span class=\"s2\">\"samplepage.html\"</span><span class=\"p\">,</span> <span class=\"n\">ignore_errors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Details:</p>\n<pre>def convert_page(page_path: str, parser: str='auto',\n                 callback: Callable[[str, str, str], None]=lambda *_: None,\n                 ignore_errors: bool=False, ignore_images: bool=False,\n                 ignore_css: bool=False, ignore_js: bool=False) -&gt; str\n\n    Take an HTML file or URL and outputs new HTML with resources as data URIs.\n\n    Parameters:\n        pageurl (str): URL or path of web page to convert.\n    Keyword Arguments:\n        parser (str): HTML Parser for Beautiful Soup 4 to use. See\n            `BS4's docs. &lt;http://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser&gt;`_\n            Default: 'auto' - Not an actual parser, but tells the library to\n            automatically choose a parser.\n        ignore_errors (bool): If ``True`` do not abort on unreadable resources.\n            Unprocessable tags (e.g. broken links) will simply be skipped.\n            Default: ``False``\n        ignore_images (bool): If ``True`` do not process ``&lt;img&gt;`` tags.\n            Default: ``False``\n        ignore_css (bool): If ``True`` do not process ``&lt;link&gt;`` (stylesheet) tags.\n            Default: ``False``\n        ignore_js (bool): If ``True`` do not process ``&lt;script&gt;`` tags.\n            Default: ``False``\n        callback (function): Called before a new resource is processed. Takes\n            three parameters: message type ('INFO' or 'ERROR'), a string with\n            the category of the callback (usually the tag related to the\n            message), and the message data (usually a string to be printed).\n    Returns:\n        str: The new webpage HTML.\n    Raises:\n        OSError: Error reading a file\n        ValueError: Problem with a path/URL\n        requests.exceptions.RequestException: Problem getting remote resource\n        NameError: HTMLArk requires Requests to be installed to get resources\n            from the web. This error is raised when an external URL is\n            encountered.\n    Examples:\n        A very basic conversion of a local HTML file, using default settings:\n\n        &gt;&gt;&gt; convert_page(\"webpage.html\")\n        &lt;Converted page HTML&gt;\n\n        However, that example will fail if there are any problems accessing\n        linked resources in the HTML (e.g. a missing image). If you cannot\n        verify the validity of links ahead of time (converting a downloaded\n        web page, for example) you can disable failing on error:\n\n        &gt;&gt;&gt; convert_page(\"brokenpage.html\", ignore_errors=True)\n        &lt;Converted page HTML, tags with broken links untouched&gt;\n\n        You can also skip processing of content types:\n\n        &gt;&gt;&gt; convert_page(\"webpage.html\", ignore_images=True)\n        &lt;Converted page HTML, with &lt;img&gt; tags untouched&gt;\n\n        If you want to get feedback on the progress of the conversion, you can\n        define a callback function. For example, a callback that prints all\n        CSS-related errors to stdout (note that ignore_errors will bypass\n        broken links but still report them to the callback):\n\n        &gt;&gt;&gt; def mycallback(message_type, message_category, message):\n        ...     if message_type == 'ERROR' and message_category == 'link':\n        ...         print(message)\n        &gt;&gt;&gt; convert_page(\"badcss.html\", ignore_errors=True, callback=mycallback)\n        &lt;Converted page HTML, CSS links untouched, CSS errors printed to screen&gt;\n</pre>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p>Data URIs have been supported by every major browser for many years now. The only browser that might cause problems is Internet Explorer (surprise!). IE7 and below have no support for data URIs, but IE8 and above support them for CSS and images. As far as I know no version of IE allows you to load JavaScript from a data URI, though it is supported in Edge.</p>\n<p>See <a href=\"http://caniuse.com/#feat=datauri\" rel=\"nofollow\">Can I Use\u2019s page on data URIs</a> for more compatibility information.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>HTMLArk is released under the MIT license, which may be found in the LICENSE file.</p>\n</div>\n\n          </div>"}, "last_serial": 2085054, "releases": {"0.9.dev3": [{"comment_text": "", "digests": {"md5": "1b34cf380a364d6f989d437985974626", "sha256": "e0460298b58d091ec4644510543b1a275d3c183b8a09a88c14ab98a4cff54cc2"}, "downloads": -1, "filename": "HTMLArk-0.9.dev3.tar.gz", "has_sig": true, "md5_digest": "1b34cf380a364d6f989d437985974626", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9055, "upload_time": "2016-04-26T13:49:57", "upload_time_iso_8601": "2016-04-26T13:49:57.096625Z", "url": "https://files.pythonhosted.org/packages/63/ae/6cb913413044e973184bde789f1022584451b2f688709dc58dd34ccc60d6/HTMLArk-0.9.dev3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "bcbdd16ae936cf03de478de6bf49bd7f", "sha256": "1b19599371e30c04383c4aff2837ac326be689a6868e2867efb0414c2ddfe261"}, "downloads": -1, "filename": "HTMLArk-1.0.0.tar.gz", "has_sig": true, "md5_digest": "bcbdd16ae936cf03de478de6bf49bd7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9115, "upload_time": "2016-04-26T16:01:51", "upload_time_iso_8601": "2016-04-26T16:01:51.996250Z", "url": "https://files.pythonhosted.org/packages/d7/0a/c5150fb593abf13dd58ae3e3b46da56266d3f8aff8c0fc512f2001fa35a3/HTMLArk-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bcbdd16ae936cf03de478de6bf49bd7f", "sha256": "1b19599371e30c04383c4aff2837ac326be689a6868e2867efb0414c2ddfe261"}, "downloads": -1, "filename": "HTMLArk-1.0.0.tar.gz", "has_sig": true, "md5_digest": "bcbdd16ae936cf03de478de6bf49bd7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9115, "upload_time": "2016-04-26T16:01:51", "upload_time_iso_8601": "2016-04-26T16:01:51.996250Z", "url": "https://files.pythonhosted.org/packages/d7/0a/c5150fb593abf13dd58ae3e3b46da56266d3f8aff8c0fc512f2001fa35a3/HTMLArk-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:17 2020"}