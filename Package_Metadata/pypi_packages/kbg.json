{"info": {"author": "Baptiste Fontaine", "author_email": "b@ptistefontaine.fr", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# PyKbg\n\n**PyKbg** is a Python wrapper around [Kelbongoo][]\u2019s website.\n\n[Kelbongoo]: https://www.kelbongoo.com\n\nKelbongoo is a [social economy][] company operating in the East of Paris,\nFrance. It sells products from small local producers (mostly located in the\n[Picardy][]), and is the only intermediary between the producer and the\nconsumer ([short food supply chain][sfsc]).\n\n[Picardy]: https://en.wikipedia.org/wiki/Picardy\n[sfsc]: https://en.wikipedia.org/wiki/Short_food_supply_chains\n[social economy]: https://en.wikipedia.org/wiki/Social_economy\n\n* [Install](#install)\n* [Usage](#usage)\n* [API Docs](#api-docs)\n* [Examples](#examples)\n* [Compatibility](#compatibility)\n* [Notes](#notes)\n\n## Install\n\n```shell\npip3 install kbg\n```\n\nThis requires Python \u22653.5.\n\n## Usage\nUse the `Kbg` class to initiate a connection:\n```python3\nfrom kbg import Kbg\n\nk = Kbg(your_email, your_password)\nprint(k.logged_in()) # True\n```\n\nSome general endpoints are available without connection:\n```python3\nfrom kbg import UnauthenticatedKbg\n\nk = UnauthenticatedKbg()\nprint(k.logged_in()) # False\n```\n\n## API Docs\n\n### `Kbg`\nThe `Kbg` constructor takes an email and a password. It raises an exception on\nfailed login.\n\n`Kbg` has all the endpoints `UnauthenticatedKbg` has, plus the following ones:\n\n#### `logged_in()`\nReturn a boolean indicating if the object is successfully connected.\n\n#### `get_customer_information()`\nGet some information as a `dict` about the consumer, including first and last\nname, email, phone, email settings.\n\n#### `get_customer_orders(page=1)`\nGet all the customer\u2019s orders. This is a paginated endpoint. It returns a `dict` with an `orders` key as well as a `count`, `page` and `next_page` ones that you can use to get the next pages, if any.\n\n#### `get_all_customer_orders(full=False)`\nYield all the customer\u2019s orders. This is a useful wrapper around\n`get_customer_order`.\n\nIf `full=True` is passed, call `get_customer_order` on each order to yield its\nfull information.\n\nNote that if all you want is the products\u2019 full names, use\n`get_store_offer_dicts` as a lookup map instead of `full=True` to save\nunnecessary requests.\n\n#### `get_customer_order(order_id)`\nGet more information about a specific order (`dict`).\n\n### `UnauthenticatedKbg`\nThe `UnauthenticatedKbg` constructor doesn\u2019t take any argument.\n\n#### `get_stores()`\nGet the list of stores (`list` of `dict`s).\n\n#### `get_store(store_id)`\nGet a single store (`dict`).\n\n#### `get_store_availabilities(store_id)`\nGet product availabilities at the given store for the current command window,\nas a map of product ids to units count.\n\n#### `get_store_offer(store_id, force=False)`\nGet the offer at a the given store (`dict`). This includes all products along\nwith their producers, categories, and families (subcategories).\n\nNote this method is cached; use `force=True` to force the API call.\n\n#### `get_store_offer_dicts(store_id, force=False)`\nEquivalent of `get_store_offer` that returns lookup `dict`s rather than lists\nof items.\n\n#### `get_store_status(store_id)`\nReturn a `dict` describing a store\u2019s status.\n\n* `is_active` (`bool`): is the store active, i.e. are we in the timeframe for\n    orders?\n* `is_full` (`bool`): is the store full, i.e. it can\u2019t take anymore orders?\n* `full_tags` (`str` `list`): what is full? Possible values: `\"ORDERS\"`, `\"SEC\"`, `\"FRAIS\"`\n\n### Examples\nCreate a simple connection:\n```python3\nfrom kbg import Kbg\n\nk = Kbg(\"your@email.com\", \"yourpassword\")\n```\n\n#### Compute your total spending\n```python3\ntotal_spent = 0\n\nfor order in k.get_all_customer_orders():\n    for product in order[\"products\"]:\n        total_spent += product[\"consumer_price\"]\n\n# get a price in euros rather than cents\ntotal_spent /= 100\n\nprint(\"You spent a total of %.2f\u20ac at Kelbongoo!\" % total_spent)\n```\n\n#### Print your most-bought products\n```python3\nfrom collections import Counter\n\nmy_store = \"BOR\"\n\ntop_products = Counter()\ntop_producers = Counter()\nstore_products = k.get_store_offer_dicts(my_store)[\"products\"]\n\nfor order in k.get_all_customer_orders():\n    for product in order[\"products\"]:\n        product_id = product[\"id\"]\n        if product_id in store_products:\n            product = store_products[product_id]\n            top_products[product[\"product_name\"]] += 1\n            top_producers[product[\"producer_name\"]] += 1\n\nprint(\"Top products:\")\nfor product, n in top_products.most_common(5):\n    print(\"%3d - %s\" % (n, product))\n\nprint(\"\\nTop producers:\")\nfor producer, n in top_producers.most_common(5):\n    print(\"%3d - %s\" % (n, producer))\n```\n\n#### Find your beers coverage\n```python3\nmy_store = \"BOR\"\n\noffer = k.get_store_offer(my_store)\n\n# Get the id of the family 'Bi\u00e8res' (\"Beers\")\nbeer_family_id = None\nfor family in offer[\"families\"]:\n    if family[\"name\"] == \"Bi\u00e8res\":\n        beer_family_id = family[\"id\"]\n        break\nelse:\n    raise Exception(\"Can't find the beer family! :(\")\n\n# Collect all products in that family\nbeers = {}\nfor product in offer[\"products\"]:\n    if product[\"family_id\"] == beer_family_id:\n        beers[product[\"id\"]] = \"%-40s (%s)\" % (\n                product[\"product_name\"], product[\"producer_name\"])\n\nknown_beers = set()\n\n# Collect all *bought* products in that family\nfor order in k.get_all_customer_orders():\n    for product in order[\"products\"]:\n        product_id = product[\"id\"]\n        if product_id in beers:\n            known_beers.add(product_id)\n\nprint(\"You have tasted %d beers out of %d.\" % (len(known_beers), len(beers)))\nif len(known_beers) != len(beers):\n    print(\"Other beers you might want to try:\")\n    for beer_id, beer in beers.items():\n        if beer_id not in known_beers:\n            print(\"*\", beer)\n```\n\n## Compatibility\nThis library uses undocumented API endpoints, so it may break at any time.\n\n## Notes\nDon\u2019t confuse KBG (Kelbongoo) with the [KGB](https://en.wikipedia.org/wiki/KGB).\n\nThe Kelbongoo API refers to stores as \u201clocales\u201d, using the first tree letters\nin upper-case as a primary key: `BOR` is Borr\u00e9go and `BIC` is Bichat, for\nexample.\n\nPrices are given in euro cents; you need to divide them by 100 to get the\nprice in euro: `\"consumer_price\": 221` means it\u2019s something that costs \u20ac2.21.\n\nPlease throttle your requests to respect Kelbongoo\u2019s servers.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bfontaine/pykbg", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "kbg", "package_url": "https://pypi.org/project/kbg/", "platform": "", "project_url": "https://pypi.org/project/kbg/", "project_urls": {"Homepage": "https://github.com/bfontaine/pykbg"}, "release_url": "https://pypi.org/project/kbg/0.0.5/", "requires_dist": ["requests"], "requires_python": ">=3.5", "summary": "Python wrapper for the Kelbongoo website", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyKbg</h1>\n<p><strong>PyKbg</strong> is a Python wrapper around <a href=\"https://www.kelbongoo.com\" rel=\"nofollow\">Kelbongoo</a>\u2019s website.</p>\n<p>Kelbongoo is a <a href=\"https://en.wikipedia.org/wiki/Social_economy\" rel=\"nofollow\">social economy</a> company operating in the East of Paris,\nFrance. It sells products from small local producers (mostly located in the\n<a href=\"https://en.wikipedia.org/wiki/Picardy\" rel=\"nofollow\">Picardy</a>), and is the only intermediary between the producer and the\nconsumer (<a href=\"https://en.wikipedia.org/wiki/Short_food_supply_chains\" rel=\"nofollow\">short food supply chain</a>).</p>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#api-docs\" rel=\"nofollow\">API Docs</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#compatibility\" rel=\"nofollow\">Compatibility</a></li>\n<li><a href=\"#notes\" rel=\"nofollow\">Notes</a></li>\n</ul>\n<h2>Install</h2>\n<pre>pip3 install kbg\n</pre>\n<p>This requires Python \u22653.5.</p>\n<h2>Usage</h2>\n<p>Use the <code>Kbg</code> class to initiate a connection:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kbg</span> <span class=\"kn\">import</span> <span class=\"n\">Kbg</span>\n\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">Kbg</span><span class=\"p\">(</span><span class=\"n\">your_email</span><span class=\"p\">,</span> <span class=\"n\">your_password</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">logged_in</span><span class=\"p\">())</span> <span class=\"c1\"># True</span>\n</pre>\n<p>Some general endpoints are available without connection:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kbg</span> <span class=\"kn\">import</span> <span class=\"n\">UnauthenticatedKbg</span>\n\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">UnauthenticatedKbg</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">logged_in</span><span class=\"p\">())</span> <span class=\"c1\"># False</span>\n</pre>\n<h2>API Docs</h2>\n<h3><code>Kbg</code></h3>\n<p>The <code>Kbg</code> constructor takes an email and a password. It raises an exception on\nfailed login.</p>\n<p><code>Kbg</code> has all the endpoints <code>UnauthenticatedKbg</code> has, plus the following ones:</p>\n<h4><code>logged_in()</code></h4>\n<p>Return a boolean indicating if the object is successfully connected.</p>\n<h4><code>get_customer_information()</code></h4>\n<p>Get some information as a <code>dict</code> about the consumer, including first and last\nname, email, phone, email settings.</p>\n<h4><code>get_customer_orders(page=1)</code></h4>\n<p>Get all the customer\u2019s orders. This is a paginated endpoint. It returns a <code>dict</code> with an <code>orders</code> key as well as a <code>count</code>, <code>page</code> and <code>next_page</code> ones that you can use to get the next pages, if any.</p>\n<h4><code>get_all_customer_orders(full=False)</code></h4>\n<p>Yield all the customer\u2019s orders. This is a useful wrapper around\n<code>get_customer_order</code>.</p>\n<p>If <code>full=True</code> is passed, call <code>get_customer_order</code> on each order to yield its\nfull information.</p>\n<p>Note that if all you want is the products\u2019 full names, use\n<code>get_store_offer_dicts</code> as a lookup map instead of <code>full=True</code> to save\nunnecessary requests.</p>\n<h4><code>get_customer_order(order_id)</code></h4>\n<p>Get more information about a specific order (<code>dict</code>).</p>\n<h3><code>UnauthenticatedKbg</code></h3>\n<p>The <code>UnauthenticatedKbg</code> constructor doesn\u2019t take any argument.</p>\n<h4><code>get_stores()</code></h4>\n<p>Get the list of stores (<code>list</code> of <code>dict</code>s).</p>\n<h4><code>get_store(store_id)</code></h4>\n<p>Get a single store (<code>dict</code>).</p>\n<h4><code>get_store_availabilities(store_id)</code></h4>\n<p>Get product availabilities at the given store for the current command window,\nas a map of product ids to units count.</p>\n<h4><code>get_store_offer(store_id, force=False)</code></h4>\n<p>Get the offer at a the given store (<code>dict</code>). This includes all products along\nwith their producers, categories, and families (subcategories).</p>\n<p>Note this method is cached; use <code>force=True</code> to force the API call.</p>\n<h4><code>get_store_offer_dicts(store_id, force=False)</code></h4>\n<p>Equivalent of <code>get_store_offer</code> that returns lookup <code>dict</code>s rather than lists\nof items.</p>\n<h4><code>get_store_status(store_id)</code></h4>\n<p>Return a <code>dict</code> describing a store\u2019s status.</p>\n<ul>\n<li><code>is_active</code> (<code>bool</code>): is the store active, i.e. are we in the timeframe for\norders?</li>\n<li><code>is_full</code> (<code>bool</code>): is the store full, i.e. it can\u2019t take anymore orders?</li>\n<li><code>full_tags</code> (<code>str</code> <code>list</code>): what is full? Possible values: <code>\"ORDERS\"</code>, <code>\"SEC\"</code>, <code>\"FRAIS\"</code></li>\n</ul>\n<h3>Examples</h3>\n<p>Create a simple connection:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kbg</span> <span class=\"kn\">import</span> <span class=\"n\">Kbg</span>\n\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">Kbg</span><span class=\"p\">(</span><span class=\"s2\">\"your@email.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yourpassword\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Compute your total spending</h4>\n<pre><span class=\"n\">total_spent</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_all_customer_orders</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">product</span> <span class=\"ow\">in</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"s2\">\"products\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">total_spent</span> <span class=\"o\">+=</span> <span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"consumer_price\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get a price in euros rather than cents</span>\n<span class=\"n\">total_spent</span> <span class=\"o\">/=</span> <span class=\"mi\">100</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"You spent a total of </span><span class=\"si\">%.2f</span><span class=\"s2\">\u20ac at Kelbongoo!\"</span> <span class=\"o\">%</span> <span class=\"n\">total_spent</span><span class=\"p\">)</span>\n</pre>\n<h4>Print your most-bought products</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n\n<span class=\"n\">my_store</span> <span class=\"o\">=</span> <span class=\"s2\">\"BOR\"</span>\n\n<span class=\"n\">top_products</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">()</span>\n<span class=\"n\">top_producers</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">()</span>\n<span class=\"n\">store_products</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_store_offer_dicts</span><span class=\"p\">(</span><span class=\"n\">my_store</span><span class=\"p\">)[</span><span class=\"s2\">\"products\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_all_customer_orders</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">product</span> <span class=\"ow\">in</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"s2\">\"products\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">product_id</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">product_id</span> <span class=\"ow\">in</span> <span class=\"n\">store_products</span><span class=\"p\">:</span>\n            <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">store_products</span><span class=\"p\">[</span><span class=\"n\">product_id</span><span class=\"p\">]</span>\n            <span class=\"n\">top_products</span><span class=\"p\">[</span><span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"product_name\"</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">top_producers</span><span class=\"p\">[</span><span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"producer_name\"</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Top products:\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">product</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">top_products</span><span class=\"o\">.</span><span class=\"n\">most_common</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%3d</span><span class=\"s2\"> - </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">product</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Top producers:\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">producer</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">top_producers</span><span class=\"o\">.</span><span class=\"n\">most_common</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%3d</span><span class=\"s2\"> - </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">producer</span><span class=\"p\">))</span>\n</pre>\n<h4>Find your beers coverage</h4>\n<pre><span class=\"n\">my_store</span> <span class=\"o\">=</span> <span class=\"s2\">\"BOR\"</span>\n\n<span class=\"n\">offer</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_store_offer</span><span class=\"p\">(</span><span class=\"n\">my_store</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the id of the family 'Bi\u00e8res' (\"Beers\")</span>\n<span class=\"n\">beer_family_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"k\">for</span> <span class=\"n\">family</span> <span class=\"ow\">in</span> <span class=\"n\">offer</span><span class=\"p\">[</span><span class=\"s2\">\"families\"</span><span class=\"p\">]:</span>\n    <span class=\"k\">if</span> <span class=\"n\">family</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bi\u00e8res\"</span><span class=\"p\">:</span>\n        <span class=\"n\">beer_family_id</span> <span class=\"o\">=</span> <span class=\"n\">family</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span>\n        <span class=\"k\">break</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Can't find the beer family! :(\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Collect all products in that family</span>\n<span class=\"n\">beers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">for</span> <span class=\"n\">product</span> <span class=\"ow\">in</span> <span class=\"n\">offer</span><span class=\"p\">[</span><span class=\"s2\">\"products\"</span><span class=\"p\">]:</span>\n    <span class=\"k\">if</span> <span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"family_id\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">beer_family_id</span><span class=\"p\">:</span>\n        <span class=\"n\">beers</span><span class=\"p\">[</span><span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">%-40s</span><span class=\"s2\"> (</span><span class=\"si\">%s</span><span class=\"s2\">)\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"product_name\"</span><span class=\"p\">],</span> <span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"producer_name\"</span><span class=\"p\">])</span>\n\n<span class=\"n\">known_beers</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Collect all *bought* products in that family</span>\n<span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_all_customer_orders</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">product</span> <span class=\"ow\">in</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"s2\">\"products\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">product_id</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">product_id</span> <span class=\"ow\">in</span> <span class=\"n\">beers</span><span class=\"p\">:</span>\n            <span class=\"n\">known_beers</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">product_id</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"You have tasted </span><span class=\"si\">%d</span><span class=\"s2\"> beers out of </span><span class=\"si\">%d</span><span class=\"s2\">.\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">known_beers</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">beers</span><span class=\"p\">)))</span>\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">known_beers</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">beers</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Other beers you might want to try:\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">beer_id</span><span class=\"p\">,</span> <span class=\"n\">beer</span> <span class=\"ow\">in</span> <span class=\"n\">beers</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"k\">if</span> <span class=\"n\">beer_id</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">known_beers</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">beer</span><span class=\"p\">)</span>\n</pre>\n<h2>Compatibility</h2>\n<p>This library uses undocumented API endpoints, so it may break at any time.</p>\n<h2>Notes</h2>\n<p>Don\u2019t confuse KBG (Kelbongoo) with the <a href=\"https://en.wikipedia.org/wiki/KGB\" rel=\"nofollow\">KGB</a>.</p>\n<p>The Kelbongoo API refers to stores as \u201clocales\u201d, using the first tree letters\nin upper-case as a primary key: <code>BOR</code> is Borr\u00e9go and <code>BIC</code> is Bichat, for\nexample.</p>\n<p>Prices are given in euro cents; you need to divide them by 100 to get the\nprice in euro: <code>\"consumer_price\": 221</code> means it\u2019s something that costs \u20ac2.21.</p>\n<p>Please throttle your requests to respect Kelbongoo\u2019s servers.</p>\n\n          </div>"}, "last_serial": 7070809, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b1ea62c0d75bf6b5ce0851beeb6f93c9", "sha256": "4940dda1896cdfb3a08fd2a760be6376b71edec1c0bc1383163ea6c62d8f1688"}, "downloads": -1, "filename": "kbg-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b1ea62c0d75bf6b5ce0851beeb6f93c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6270, "upload_time": "2019-08-18T21:41:56", "upload_time_iso_8601": "2019-08-18T21:41:56.911300Z", "url": "https://files.pythonhosted.org/packages/bc/5d/de34fa787d4402d8166837a7d19a85ca9257342b0c555d04a0af20821ae3/kbg-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72567507745f7d695136bf5f0fdad23a", "sha256": "8cf3ea77387f8aa214841a05a328acf8c0143dc13372df99149e775893498d2f"}, "downloads": -1, "filename": "kbg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "72567507745f7d695136bf5f0fdad23a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5435, "upload_time": "2019-08-18T21:42:00", "upload_time_iso_8601": "2019-08-18T21:42:00.059920Z", "url": "https://files.pythonhosted.org/packages/aa/cc/ac6e79107a08840be2f427a95c31ac8d184ad6c73b136928569bceb6fc98/kbg-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bdcf028ba614231e373e401fff7e0422", "sha256": "7ce187b3e7944c2656b55a76c940ffd46192b64ec3c1cbdfcc2fe9b467aacd1f"}, "downloads": -1, "filename": "kbg-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bdcf028ba614231e373e401fff7e0422", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6156, "upload_time": "2019-08-18T21:56:25", "upload_time_iso_8601": "2019-08-18T21:56:25.884155Z", "url": "https://files.pythonhosted.org/packages/80/bc/08101ad20efae78467ddb19a9a8c644b4719ec59a8554f2130503509a2b0/kbg-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32c1a4bfd5f3b4d61e3d3f88dd1b2daa", "sha256": "0fff6546b2377acd136347ca7b0a6fb06d541530deec0869505bcbf515242a85"}, "downloads": -1, "filename": "kbg-0.0.2.tar.gz", "has_sig": false, "md5_digest": "32c1a4bfd5f3b4d61e3d3f88dd1b2daa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5509, "upload_time": "2019-08-18T21:56:27", "upload_time_iso_8601": "2019-08-18T21:56:27.504393Z", "url": "https://files.pythonhosted.org/packages/31/1f/97ebf6714f7b6bea92297674a1f3434417bdf2e7625186a0f04b8bea106e/kbg-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "7f4a8805e9a8b89d3e8062a5b9a1ecac", "sha256": "3d613487800dc3a55f8670916bd93471a856381729b34730e67bcd102597df2f"}, "downloads": -1, "filename": "kbg-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7f4a8805e9a8b89d3e8062a5b9a1ecac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6943, "upload_time": "2019-08-19T19:54:01", "upload_time_iso_8601": "2019-08-19T19:54:01.487884Z", "url": "https://files.pythonhosted.org/packages/a0/f3/66dae12e6f332a95811755c9fac7228239bae8f4c2b448b9c07f9d591fbf/kbg-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "316e9597d0ab5ed8628411eae859c5c5", "sha256": "12122d1736cd3966c40f3d8119459df6defdcf7be9e2e786693bc6d11a49ef6c"}, "downloads": -1, "filename": "kbg-0.0.3.tar.gz", "has_sig": false, "md5_digest": "316e9597d0ab5ed8628411eae859c5c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6508, "upload_time": "2019-08-19T19:54:04", "upload_time_iso_8601": "2019-08-19T19:54:04.041966Z", "url": "https://files.pythonhosted.org/packages/f6/34/3829744aee02fa1ddb5c9011cc5e7a5d70cfb7a5628833e8f97b1bf09091/kbg-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d25cbedb2815ee976424a296f576c776", "sha256": "110b42927048ea83115771efcff42915a719aa5d4dea19cfbe0bdd07910d675c"}, "downloads": -1, "filename": "kbg-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d25cbedb2815ee976424a296f576c776", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7451, "upload_time": "2020-04-12T11:03:02", "upload_time_iso_8601": "2020-04-12T11:03:02.308723Z", "url": "https://files.pythonhosted.org/packages/31/cf/38782f51e7888572df814f07d1238277841711e7d2bf2062e81a38341271/kbg-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a3be64b9acf93627c4d1f16946e3c99", "sha256": "5128f0b5c190cad0ab19e0b7d512e51baa94d1b39fdd2e62f8c7d7709dca5fb7"}, "downloads": -1, "filename": "kbg-0.0.4.tar.gz", "has_sig": false, "md5_digest": "5a3be64b9acf93627c4d1f16946e3c99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7021, "upload_time": "2020-04-12T11:03:03", "upload_time_iso_8601": "2020-04-12T11:03:03.778710Z", "url": "https://files.pythonhosted.org/packages/c3/4a/3dd95da4e9f8ddada76f7b2db5cc82d2b84e74589cb5c6d24ecf2cfe80d5/kbg-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ac5ea33bc33b090d9ecd05436d5b9b28", "sha256": "505abe71ec819005d91da52df928543208bbff0b4c2710dc355c61c026367897"}, "downloads": -1, "filename": "kbg-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ac5ea33bc33b090d9ecd05436d5b9b28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7520, "upload_time": "2020-04-21T19:54:42", "upload_time_iso_8601": "2020-04-21T19:54:42.841840Z", "url": "https://files.pythonhosted.org/packages/88/2c/ee8e09f729934166f35617ae1eb12d1f93adb4e78ac7567426492e12d45c/kbg-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "798487de6fc05bfec8c98f0e93d988ab", "sha256": "ed9debc942fd5c2f85cad58ae67f0e0135c3cd6621f6b4bccfcd6ba65180682b"}, "downloads": -1, "filename": "kbg-0.0.5.tar.gz", "has_sig": false, "md5_digest": "798487de6fc05bfec8c98f0e93d988ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7101, "upload_time": "2020-04-21T19:54:44", "upload_time_iso_8601": "2020-04-21T19:54:44.135248Z", "url": "https://files.pythonhosted.org/packages/59/bf/0bf63e4132fc2765afb69bfa1a58b0e11608eed1f8755eaf3b80c6164046/kbg-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac5ea33bc33b090d9ecd05436d5b9b28", "sha256": "505abe71ec819005d91da52df928543208bbff0b4c2710dc355c61c026367897"}, "downloads": -1, "filename": "kbg-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ac5ea33bc33b090d9ecd05436d5b9b28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7520, "upload_time": "2020-04-21T19:54:42", "upload_time_iso_8601": "2020-04-21T19:54:42.841840Z", "url": "https://files.pythonhosted.org/packages/88/2c/ee8e09f729934166f35617ae1eb12d1f93adb4e78ac7567426492e12d45c/kbg-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "798487de6fc05bfec8c98f0e93d988ab", "sha256": "ed9debc942fd5c2f85cad58ae67f0e0135c3cd6621f6b4bccfcd6ba65180682b"}, "downloads": -1, "filename": "kbg-0.0.5.tar.gz", "has_sig": false, "md5_digest": "798487de6fc05bfec8c98f0e93d988ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7101, "upload_time": "2020-04-21T19:54:44", "upload_time_iso_8601": "2020-04-21T19:54:44.135248Z", "url": "https://files.pythonhosted.org/packages/59/bf/0bf63e4132fc2765afb69bfa1a58b0e11608eed1f8755eaf3b80c6164046/kbg-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:30 2020"}