{"info": {"author": "Xian Zheng", "author_email": "714186139@qq.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# sine.utils\n\nthe set of common tools\n\n## tools\n\n### Class EventManager\n\nprovide event sending and listening.\nuse a hashable key to identify an event.\n\n```python\ndef f(key, data):\n    print data\n\nmanager = EventManager()\nmanager.start() # start listen\n\nmanager.addListener(key='evnet_key', listener=f)\n\nmanager.sendEvent(key='evnet_key', 'print hello')\n\n\n# other methods\nmanager.removeListener(key='evnet_key', f)\nmanager.stop() # stop listen\nmanager.clear() # clear event\n```\n\n### Class Path\n\nconvenient to join file path in a chain manner:\n\n```python\ns = Path('.')\ns = s.join('a', 'b').join('..')\n# s == 'a'\n```\n\nit uses `os.path.join` and always normalizes the path with `os.path.normpath`  \nbecause `os.path.join` join the `'a', '..'` to `'a/..'`\n\n### Module properties\n\nread/write .properties file in line-oriented format  \n`key=value` per line *through function*.\n\n*the code refers to `java.util.Properties` in Java 1.6.*\n\n#### Common Usage\n\n* file I/O:\n\n    ```python\n    # input\n    properties = load(file)\n    # or update existing dictionary\n    load(file, properties)\n\n    # output\n    store(file, properties)\n    ```\n\n* custom input:  \n    `class LineReader` read in one key-value data. It skips all comment lines,  \n    blank lines, leading whitespace, and processes multi-line data.  \n    `loadSingle(string)` read each piece of data given above to key-value.  \n\n    ```python\n    for line in LineReader(file): # each key-value line has no line seperator\n        key, value = loadSingle(line)\n        # do something\n    ```\n\n* custom output:  \n    `storeComments(writable, comments, linesep=os.linesep))`  \n    write comment (accept multi-line), can specify the line terminator.  \n    `storeSingle(writable, key, value, sep='=', linesep=os.linesep)`  \n    write one key-value, can specify the seperator and the line terminator.  \n\n    ```python\n    storeComments(file, 'this is a comment')\n    storeSingle(file, 'key', 'value')\n    ```\n\n#### File Format\n\nnormally each line is comment line or a key-value pair.\n\nmain features:\n\n* seperate key and value by one of `=`, `:`, ` `, `\\t`\n* ignore whitespaces leading in a line or around `=` or `:`\n* comment line begin with `#` or `!`\n* escape unicode by `\\uxxxx`\n* escape special characters by adding `\\`\n\nothers:\n\n* data line ends with `\\` discard the line break\n\ndifferences with Java:\n\n* store method will not write datetime comment\n\n### Thread classes\n\n```python\ndef func(a, b, stop_event):\n    while 1:\n        if stop_event.is_set():\n            break\n        # do your work\n\nthread = StoppableThread(target=func, args=('a', 'b'))\nthread.start()\n# ...\nthread.stop(-1) # stop and join forever\n# thread.stopped() == True\n\n\nthread = ReStartableThread(target=func, args=('a', 'b'), event_name='stop_event') # can specify the parameter's name\nthread.start()\n# ...\nthread.stop(1) # stop and join for 1 second\n# ...\nthread.start()\n# ...\nthread.stop()\nthread.join()\n# ...\n```\n\n### sine.storage\n\n#### Brief\n\nprovide simple reliable persistence for string data base on a string key.\n\ndata changes will append to the file like logging while update.\ndata are store in **csv** format.\nyou can compress the data anytime reliably.\n\n#### Examples\n\n```python\n# common use\nstorage = getStorage('./data.csv')\nauthor = storage.setdefault('author', 'sine')\nstorage['author'] = 'Sine'\ndel storage['author']\n\nfor k in storage.keys():\n    print(k, storage[k])\n\n# compress data\nstorage.compress()\n```\n\n## Change Log\n\n### v0.1.1, 2019-12-14\n\n* EventManager's process thread defaults to be daemon, can be set.\n\n### v0.1.0, 2019-7-21\n\ncollect from exist package:\n\n* sine.path-v0.1.3\n* sine.threads-v0.1.7\n* sine.event-v0.0.2\n* sine.properties-v0.1.1\n\nand the new 'storage'.\n\nnews:\n\n* EventManager: change arguments passing, include the key (just like calling the sendEvent)\n* threads: fix about args appending", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SineObama/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sine.utils", "package_url": "https://pypi.org/project/sine.utils/", "platform": "", "project_url": "https://pypi.org/project/sine.utils/", "project_urls": {"Homepage": "https://github.com/SineObama/"}, "release_url": "https://pypi.org/project/sine.utils/0.1.1/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "the set of common tools", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sine.utils</h1>\n<p>the set of common tools</p>\n<h2>tools</h2>\n<h3>Class EventManager</h3>\n<p>provide event sending and listening.\nuse a hashable key to identify an event.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">data</span>\n\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">EventManager</span><span class=\"p\">()</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span> <span class=\"c1\"># start listen</span>\n\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">addListener</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'evnet_key'</span><span class=\"p\">,</span> <span class=\"n\">listener</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">sendEvent</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'evnet_key'</span><span class=\"p\">,</span> <span class=\"s1\">'print hello'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># other methods</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">removeListener</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'evnet_key'</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span> <span class=\"c1\"># stop listen</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span> <span class=\"c1\"># clear event</span>\n</pre>\n<h3>Class Path</h3>\n<p>convenient to join file path in a chain manner:</p>\n<pre><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'..'</span><span class=\"p\">)</span>\n<span class=\"c1\"># s == 'a'</span>\n</pre>\n<p>it uses <code>os.path.join</code> and always normalizes the path with <code>os.path.normpath</code><br>\nbecause <code>os.path.join</code> join the <code>'a', '..'</code> to <code>'a/..'</code></p>\n<h3>Module properties</h3>\n<p>read/write .properties file in line-oriented format<br>\n<code>key=value</code> per line <em>through function</em>.</p>\n<p><em>the code refers to <code>java.util.Properties</code> in Java 1.6.</em></p>\n<h4>Common Usage</h4>\n<ul>\n<li>\n<p>file I/O:</p>\n<pre><span class=\"c1\"># input</span>\n<span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n<span class=\"c1\"># or update existing dictionary</span>\n<span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># output</span>\n<span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>custom input:<br>\n<code>class LineReader</code> read in one key-value data. It skips all comment lines,<br>\nblank lines, leading whitespace, and processes multi-line data.<br>\n<code>loadSingle(string)</code> read each piece of data given above to key-value.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">LineReader</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">):</span> <span class=\"c1\"># each key-value line has no line seperator</span>\n    <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">loadSingle</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n    <span class=\"c1\"># do something</span>\n</pre>\n</li>\n<li>\n<p>custom output:<br>\n<code>storeComments(writable, comments, linesep=os.linesep))</code><br>\nwrite comment (accept multi-line), can specify the line terminator.<br>\n<code>storeSingle(writable, key, value, sep='=', linesep=os.linesep)</code><br>\nwrite one key-value, can specify the seperator and the line terminator.</p>\n<pre><span class=\"n\">storeComments</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"s1\">'this is a comment'</span><span class=\"p\">)</span>\n<span class=\"n\">storeSingle</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"s1\">'key'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>File Format</h4>\n<p>normally each line is comment line or a key-value pair.</p>\n<p>main features:</p>\n<ul>\n<li>seperate key and value by one of <code>=</code>, <code>:</code>, <code></code>, <code>\\t</code></li>\n<li>ignore whitespaces leading in a line or around <code>=</code> or <code>:</code></li>\n<li>comment line begin with <code>#</code> or <code>!</code></li>\n<li>escape unicode by <code>\\uxxxx</code></li>\n<li>escape special characters by adding <code>\\</code></li>\n</ul>\n<p>others:</p>\n<ul>\n<li>data line ends with <code>\\</code> discard the line break</li>\n</ul>\n<p>differences with Java:</p>\n<ul>\n<li>store method will not write datetime comment</li>\n</ul>\n<h3>Thread classes</h3>\n<pre><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">stop_event</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">stop_event</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">():</span>\n            <span class=\"k\">break</span>\n        <span class=\"c1\"># do your work</span>\n\n<span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">StoppableThread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">))</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># stop and join forever</span>\n<span class=\"c1\"># thread.stopped() == True</span>\n\n\n<span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">ReStartableThread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">),</span> <span class=\"n\">event_name</span><span class=\"o\">=</span><span class=\"s1\">'stop_event'</span><span class=\"p\">)</span> <span class=\"c1\"># can specify the parameter's name</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># stop and join for 1 second</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<h3>sine.storage</h3>\n<h4>Brief</h4>\n<p>provide simple reliable persistence for string data base on a string key.</p>\n<p>data changes will append to the file like logging while update.\ndata are store in <strong>csv</strong> format.\nyou can compress the data anytime reliably.</p>\n<h4>Examples</h4>\n<pre><span class=\"c1\"># common use</span>\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">getStorage</span><span class=\"p\">(</span><span class=\"s1\">'./data.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">,</span> <span class=\"s1\">'sine'</span><span class=\"p\">)</span>\n<span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s1\">'author'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Sine'</span>\n<span class=\"k\">del</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s1\">'author'</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># compress data</span>\n<span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">()</span>\n</pre>\n<h2>Change Log</h2>\n<h3>v0.1.1, 2019-12-14</h3>\n<ul>\n<li>EventManager's process thread defaults to be daemon, can be set.</li>\n</ul>\n<h3>v0.1.0, 2019-7-21</h3>\n<p>collect from exist package:</p>\n<ul>\n<li>sine.path-v0.1.3</li>\n<li>sine.threads-v0.1.7</li>\n<li>sine.event-v0.0.2</li>\n<li>sine.properties-v0.1.1</li>\n</ul>\n<p>and the new 'storage'.</p>\n<p>news:</p>\n<ul>\n<li>EventManager: change arguments passing, include the key (just like calling the sendEvent)</li>\n<li>threads: fix about args appending</li>\n</ul>\n\n          </div>"}, "last_serial": 6303245, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0ba6476eabffe8eec861647254416e28", "sha256": "c17a5ebf33153981a517b599da784e29d21d4d779b3f18c4bea6b201fe6e29ae"}, "downloads": -1, "filename": "sine.utils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0ba6476eabffe8eec861647254416e28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 22186, "upload_time": "2019-07-21T05:26:06", "upload_time_iso_8601": "2019-07-21T05:26:06.671485Z", "url": "https://files.pythonhosted.org/packages/64/9f/1a6c1ecec15da9a19028cadc9f42423a66afe272ed493d6bb38d8f09d595/sine.utils-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "942b08844032869193be03fcbfc23224", "sha256": "7d9daace211c6b9cf58a1fee13d641cece3ce29c9da2488bcd1e495d22391a5f"}, "downloads": -1, "filename": "sine.utils-0.1.1.tar.gz", "has_sig": false, "md5_digest": "942b08844032869193be03fcbfc23224", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 22386, "upload_time": "2019-12-14T15:18:52", "upload_time_iso_8601": "2019-12-14T15:18:52.733897Z", "url": "https://files.pythonhosted.org/packages/83/ec/08fe1e9c1f4e07a4a97a48325f752ef315294f0473942573083d0fd99ee7/sine.utils-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "942b08844032869193be03fcbfc23224", "sha256": "7d9daace211c6b9cf58a1fee13d641cece3ce29c9da2488bcd1e495d22391a5f"}, "downloads": -1, "filename": "sine.utils-0.1.1.tar.gz", "has_sig": false, "md5_digest": "942b08844032869193be03fcbfc23224", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 22386, "upload_time": "2019-12-14T15:18:52", "upload_time_iso_8601": "2019-12-14T15:18:52.733897Z", "url": "https://files.pythonhosted.org/packages/83/ec/08fe1e9c1f4e07a4a97a48325f752ef315294f0473942573083d0fd99ee7/sine.utils-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:32 2020"}