{"info": {"author": "Aleksandar Yalnazov", "author_email": "aleksandar.yalnazov@qaiware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "![PAYMILL icon](https://static.paymill.com/r/335f99eb3914d517bf392beb1adaf7cccef786b6/img/logo-download_Light.png)\n# paymill-python\n\nPython wrapper for PAYMILL API(beta)\n\n## Getting started\n\n- If you are not familiar with PAYMILL, start with the [documentation](https://www.paymill.com/en-gb/documentation-3/).\n- Install the latest release.\n- Check the API [reference](https://www.paymill.com/en-gb/documentation-3/reference/api-reference/).\n- Check the tests.\n\n\n## Installation\nYou can either choose to install the package from PyPi executing following line:\n\n```\n pip install paymill-wrapper\n```\n\nOr you can check out the project, and install it locally. Navigate to the root directory and execute following line:\n\n```\n pip install . -r requirements.txt\n```\n\n## What's new\n\nWe have released version 1.1.0 which is coded directly to the PAYMILL API v2.1 and is Py2&3 compatible.This version is no longer backwards compatible with the pymill fork from https://github.com/kliment/pymill. If you need to be PAYMILL API v2.0 compatible please use https://github.com/paymill/paymill-python/tree/v0.1.2.\n\n## Usage\n\nInitialize the library by providing your api key:\n```python\n   paymill_context = paymill.PaymillContext('<YOUR PRIVATE API KEY>')\n```\nPaymillContext loads the context of PAYMILL for a single account, by providing a merchants private key. It creates 8 services, which represents the PAYMILL API:\n * ClientService\n * OfferService\n * PaymentService\n * PreauthorizationService\n * RefundService\n * SubscriptionService\n * TransactionService\n * WebhookService\n * ChecksumService\n\nThese services should not be created directly. They have to be obtained by the context's accessors.\n\n### Using services\n\n\nIn all cases, you'll use the predefined service classes to access the PAYMILL API.\n\nTo fetch a service instance, call *service name* accessor from paymill_context, like\n```python\n client_service = paymill_context.get_client_service()\n```\nEvery service instance provides basic methods for CRUD functionality.\n\n### Creating objects\n\nEvery service provides instance factory methods for creation. They are very different for every service, because every object can be created in a different way. The common pattern is\n```python\n xxx_service.create_XXX(params...)\n```\nFor example: client can be created with two optional parameters: *email* and *description*. So we have four possible methods to create the client:\n```python\n #creates a client without email and description\n client_service.create()\n```\n```python\n #creates a client with email\n client_service.create(email='john.rambo@paymill.com')\n```\n```python\n #creates a client with description\n client_service.create(description='CRM Id: fake_34212')\n```\n```python\n #creates a client with email and description\n client_service.create(email='john.rambo@paymill.com', description='CRM Id: fake_34212')\n```\n\n### Retrieving objects\n\nYou can retrieve an object by using the get() method with with the instance itself:\n```python\n client_service.detail(client)\n```\nThis method throws an PMError if there is no client under the given id.\n\n### Retrieving lists\n\nTo retrieve a list you may simply use the list() method:\n```python\n clients = client_service.list()\n```\nYou may provide a filter and order to list method:\n```python\n clients = client_service.list(\n     order=paymill.models.client.Client.Order.created_at().desc(),\n     filtr=paymill.models.client.Client.Filter.by_email('john.rambo@paymill.com'))\n```\nThis will load only clients with email john.rambo@paymill.com, order descending by creation date.\n\n### Updating objects\n\nIn order to update an object simply call a service's update() method:\n```python\n client_service.update(client)\n```\n\n### Deleting objects\n\nYou may delete objects by calling the service's delete() method with an object instance.\n```python\n client_service.remove(client)\n```\n\n## Changelog\n\n### 2.3.0\n* Disable httplib debugging by default\n* http_debugging_enabled otional parameter added to PaymillContext\n\n### 2.2.0\n* Bug fixing\n* ChecksumService added\n* FilterList added\n\n### 2.1\n* PyPi release fixed\n\n### 2.0\n* Some names regarding package installation changed\n* Official PyPi release\n\n### 1.1\n* Support for Py3\n* FilterList added for filter combination\n* Bug fixing & code improvements\n\n### 1.0\n* New implementation from scratch that conforms to PAYMILL API v2.1\n\n## License\n\nCopyright 2014 PAYMILL GmbH.\n\nMIT License (enclosed)\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paymill/paymill-python", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "paymill-wrapper", "package_url": "https://pypi.org/project/paymill-wrapper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/paymill-wrapper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/paymill/paymill-python"}, "release_url": "https://pypi.org/project/paymill-wrapper/2.3.0/", "requires_dist": null, "requires_python": null, "summary": "Python wrapper for PAYMILL API", "version": "2.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ![PAYMILL icon](https://static.paymill.com/r/335f99eb3914d517bf392beb1adaf7cccef786b6/img/logo-download_Light.png)<br># paymill-python<br><br>Python wrapper for PAYMILL API(beta)<br><br>## Getting started<br><br>- If you are not familiar with PAYMILL, start with the [documentation](https://www.paymill.com/en-gb/documentation-3/).<br>- Install the latest release.<br>- Check the API [reference](https://www.paymill.com/en-gb/documentation-3/reference/api-reference/).<br>- Check the tests.<br><br><br>## Installation<br>You can either choose to install the package from PyPi executing following line:<br><br>```<br> pip install paymill-wrapper<br>```<br><br>Or you can check out the project, and install it locally. Navigate to the root directory and execute following line:<br><br>```<br> pip install . -r requirements.txt<br>```<br><br>## What's new<br><br>We have released version 1.1.0 which is coded directly to the PAYMILL API v2.1 and is Py2&amp;3 compatible.This version is no longer backwards compatible with the pymill fork from https://github.com/kliment/pymill. If you need to be PAYMILL API v2.0 compatible please use https://github.com/paymill/paymill-python/tree/v0.1.2.<br><br>## Usage<br><br>Initialize the library by providing your api key:<br>```python<br>   paymill_context = paymill.PaymillContext('&lt;YOUR PRIVATE API KEY&gt;')<br>```<br>PaymillContext loads the context of PAYMILL for a single account, by providing a merchants private key. It creates 8 services, which represents the PAYMILL API:<br> * ClientService<br> * OfferService<br> * PaymentService<br> * PreauthorizationService<br> * RefundService<br> * SubscriptionService<br> * TransactionService<br> * WebhookService<br> * ChecksumService<br><br>These services should not be created directly. They have to be obtained by the context's accessors.<br><br>### Using services<br><br><br>In all cases, you'll use the predefined service classes to access the PAYMILL API.<br><br>To fetch a service instance, call *service name* accessor from paymill_context, like<br>```python<br> client_service = paymill_context.get_client_service()<br>```<br>Every service instance provides basic methods for CRUD functionality.<br><br>### Creating objects<br><br>Every service provides instance factory methods for creation. They are very different for every service, because every object can be created in a different way. The common pattern is<br>```python<br> xxx_service.create_XXX(params...)<br>```<br>For example: client can be created with two optional parameters: *email* and *description*. So we have four possible methods to create the client:<br>```python<br> #creates a client without email and description<br> client_service.create()<br>```<br>```python<br> #creates a client with email<br> client_service.create(email='john.rambo@paymill.com')<br>```<br>```python<br> #creates a client with description<br> client_service.create(description='CRM Id: fake_34212')<br>```<br>```python<br> #creates a client with email and description<br> client_service.create(email='john.rambo@paymill.com', description='CRM Id: fake_34212')<br>```<br><br>### Retrieving objects<br><br>You can retrieve an object by using the get() method with with the instance itself:<br>```python<br> client_service.detail(client)<br>```<br>This method throws an PMError if there is no client under the given id.<br><br>### Retrieving lists<br><br>To retrieve a list you may simply use the list() method:<br>```python<br> clients = client_service.list()<br>```<br>You may provide a filter and order to list method:<br>```python<br> clients = client_service.list(<br>     order=paymill.models.client.Client.Order.created_at().desc(),<br>     filtr=paymill.models.client.Client.Filter.by_email('john.rambo@paymill.com'))<br>```<br>This will load only clients with email john.rambo@paymill.com, order descending by creation date.<br><br>### Updating objects<br><br>In order to update an object simply call a service's update() method:<br>```python<br> client_service.update(client)<br>```<br><br>### Deleting objects<br><br>You may delete objects by calling the service's delete() method with an object instance.<br>```python<br> client_service.remove(client)<br>```<br><br>## Changelog<br><br>### 2.3.0<br>* Disable httplib debugging by default<br>* http_debugging_enabled otional parameter added to PaymillContext<br><br>### 2.2.0<br>* Bug fixing<br>* ChecksumService added<br>* FilterList added<br><br>### 2.1<br>* PyPi release fixed<br><br>### 2.0<br>* Some names regarding package installation changed<br>* Official PyPi release<br><br>### 1.1<br>* Support for Py3<br>* FilterList added for filter combination<br>* Bug fixing &amp; code improvements<br><br>### 1.0<br>* New implementation from scratch that conforms to PAYMILL API v2.1<br><br>## License<br><br>Copyright 2014 PAYMILL GmbH.<br><br>MIT License (enclosed)<br>\n          </div>"}, "last_serial": 1822731, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "30dbcc300e993829094546a3e6425514", "sha256": "ca3ea969edefa7332527205b8d31d78c751096332014f16d08b6759a51fc964a"}, "downloads": -1, "filename": "paymill-wrapper-2.0.0.tar.gz", "has_sig": false, "md5_digest": "30dbcc300e993829094546a3e6425514", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3973, "upload_time": "2014-12-17T14:56:08", "upload_time_iso_8601": "2014-12-17T14:56:08.733618Z", "url": "https://files.pythonhosted.org/packages/31/6f/556ebca3fd6af3590910c2d578f1c88560ea51f4b53169921a6e73383c74/paymill-wrapper-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "414bb6f3b5ba167d857cded73dffe3aa", "sha256": "8443b463b89d807020f1b0b77f3709982f0ca5a751755d9472bf966db0cf8e2b"}, "downloads": -1, "filename": "paymill-wrapper-2.1.0.tar.gz", "has_sig": false, "md5_digest": "414bb6f3b5ba167d857cded73dffe3aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14528, "upload_time": "2015-02-23T13:03:00", "upload_time_iso_8601": "2015-02-23T13:03:00.812124Z", "url": "https://files.pythonhosted.org/packages/26/ec/5b9edf87411f2140e3782872a5a123cd292a14e8dab0e8c3023717e06ea4/paymill-wrapper-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "432785ccffa27b04db1c3126dbaeba35", "sha256": "923d200e12d0488ee933fde91cbf7e3433d450edf4f875bc0b42ca87fbdac188"}, "downloads": -1, "filename": "paymill-wrapper-2.2.0.tar.gz", "has_sig": false, "md5_digest": "432785ccffa27b04db1c3126dbaeba35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16278, "upload_time": "2015-10-07T15:53:20", "upload_time_iso_8601": "2015-10-07T15:53:20.825868Z", "url": "https://files.pythonhosted.org/packages/db/b2/aa186ddb3a63280e9e1bee7a55612081c360a814e389e116d875239f4778/paymill-wrapper-2.2.0.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "861d13e982f70536a13556774d61fdb4", "sha256": "fb5a99266c6619f53afe3587ee9b0d532325d146339e2d67b16fd0edfcb0e9aa"}, "downloads": -1, "filename": "paymill-wrapper-2.3.0.tar.gz", "has_sig": false, "md5_digest": "861d13e982f70536a13556774d61fdb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16256, "upload_time": "2015-11-18T15:31:18", "upload_time_iso_8601": "2015-11-18T15:31:18.313258Z", "url": "https://files.pythonhosted.org/packages/d2/8e/c3c24cff7d7b312b8d8a4066def23b49ddd187401fbce4406798f44a774b/paymill-wrapper-2.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "861d13e982f70536a13556774d61fdb4", "sha256": "fb5a99266c6619f53afe3587ee9b0d532325d146339e2d67b16fd0edfcb0e9aa"}, "downloads": -1, "filename": "paymill-wrapper-2.3.0.tar.gz", "has_sig": false, "md5_digest": "861d13e982f70536a13556774d61fdb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16256, "upload_time": "2015-11-18T15:31:18", "upload_time_iso_8601": "2015-11-18T15:31:18.313258Z", "url": "https://files.pythonhosted.org/packages/d2/8e/c3c24cff7d7b312b8d8a4066def23b49ddd187401fbce4406798f44a774b/paymill-wrapper-2.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:41 2020"}