{"info": {"author": "Maxim Ziatdinov", "author_email": "maxim.ziatdinov@ai4microcopy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering"], "description": "[![Downloads](https://pepy.tech/badge/gpim/month)](https://pepy.tech/project/gpim/month)\n[![PyPI version](https://badge.fury.io/py/gpim.svg)](https://badge.fury.io/py/gpim)\n[![Build Status](https://travis-ci.com/ziatdinovmax/atomai.svg?branch=master)](https://travis-ci.com/ziatdinovmax/atomai)\n[![Documentation Status](https://readthedocs.org/projects/gpim/badge/?version=latest)](https://gpim.readthedocs.io/en/latest/?badge=latest)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/07ee1606a88b48d1bc46453f3ae1b1c8)](https://app.codacy.com/manual/ziatdinovmax/GPim?utm_source=github.com&utm_medium=referral&utm_content=ziatdinovmax/GPim&utm_campaign=Badge_Grade_Dashboard)\n\n[![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/Quickstart_GPim.ipynb)\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/ziatdinovmax/GPim)\n\n**Under active development (expect some breaking changes)**\n\n## What is GPim?\n\nGPim is a python package that provides an easy way to apply Gaussian processes (GP) in [Pyro](https://pyro.ai/) and [Gpytorch](https://gpytorch.ai/) to images and hyperspectral data and to perform GP-based Bayesian optimization on grid data.\nFor the examples, see our papers:\n\nGP for 3D hyperspectral data: https://arxiv.org/abs/1911.11348\n\nGP for 4D hyperspectral data: https://arxiv.org/abs/2002.03591\n\nGP for Ising model: https://arxiv.org/abs/2004.04832\n\n*The intended audience are domain scientists (for example, microscopists) with a basic knowledge of how to work with numpy arrays in Python.*\n\n<p align=\"center\">\n  <img src=\"misc/GPim_illustration_v2.png\" width=\"75%\" title=\"GPim\">\n<p align=\"justify\">\n\n## Installation\n\nFirst install [PyTorch](https://pytorch.org/). Then install GPim using\n\n```bash\npip install gpim\n```\n\n\n## How to use\n\n### GP reconstruction\n\nBelow is a simple example of applying GPim to reconstructing a sparse 2D image. It can be similarly applied to 3D and 4D hyperspectral data. The missing data points in sparse data must be represented as [NaNs](https://docs.scipy.org/doc/numpy/reference/constants.html?highlight=numpy%20nan#numpy.nan). In the absense of missing observation GPim can be used for image and spectroscopic data cleaning/smoothing in all the dimensions simultaneously, as well as for the resolution enhancement.\n\n```python\nimport gpim\nimport numpy as np\n\n# # Load dataset\nR = np.load('sparse_exp_data.npy') \n\n# Get full (ideal) grid indices\nX_full = gpim.utils.get_full_grid(R, dense_x=1)\n# Get sparse grid indices\nX_sparse = gpim.utils.get_sparse_grid(R)\n# Kernel lengthscale constraints (optional)\nlmin, lmax = 1., 4.\nlscale = [[lmin, lmin], [lmax, lmax]] \n\n# Run GP reconstruction to obtain mean prediction and uncertainty for each predictied point\nmean, sd, hyperparams = gpim.reconstructor(\n    X_sparse, R, X_full, lengthscale=lscale,\n    learning_rate=0.1, iterations=250, \n    use_gpu=True, verbose=False).run()\n\n# Plot reconstruction results\ngpim.utils.plot_reconstructed_data2d(R, mean, cmap='jet')\n# Plot evolution of kernel hyperparameters during training\ngpim.utils.plot_kernel_hyperparams(hyperparams)\n```\n\n### GP-based Bayesian optimization\nWhen performing measurements (real or simulated), one can use the information about the expected function value and uncertainty in GP reconstruction to select the next measurement point. This is usually referred to as exploration-exploitation approach in the context of Bayesian optimization. A simple example with a \"dummy\" function is shown below.\n\n```python\nimport gpim\nimport numpy as np\nnp.random.seed(42)\n\n# Create a dummy 2D function\ndef trial_func(idx):\n    \"\"\"Takes a list of indices as input and returns function value at these indices\"\"\"\n    return np.exp(-4*np.log(2) * ((idx[0]-5)**2 + (idx[1]-10)**2) / 9) \n\n# Create an empty observation matrix\ngrid_size = 25\nZ_sparse = np.ones((grid_size, grid_size)) * np.nan\n# Seed it with several random observations\nidx = np.random.randint(0, grid_size, size=(4, 2))\nfor i in idx:\n    Z_sparse[tuple(i)] = trial_func(i) \n\n# Get full and sparse grid indices for GP\nX_full = gpim.utils.get_full_grid(Z_sparse)\nX_sparse= gpim.utils.get_sparse_grid(Z_sparse)\n# Initialize Bayesian optimizer with an 'expected improvement' acquisition function\nboptim = gpim.boptimizer(\n    X_sparse, Z_sparse, X_full, \n    trial_func, acquisition_function='ei',\n    exploration_steps=30,\n    use_gpu=False, verbose=1)\n# Run Bayesian optimization\nboptim.run()\n\n# Plot exploration history\ngpim.utils.plot_query_points(boptim.indices_all, plot_lines=True)\n```\n\n## Running GPim notebooks in the cloud\n\n1) Executable Google Colab [notebook](https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/GP_2D3D_images.ipynb) with the example of applying GP to sparse spiral 2D scans in piezoresponse force microscopy (PFM) and hyperspectral 3D data in Band Excitation PFM.\n2) Executable Google Colab [notebook](https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/GP_TD_cKPFM.ipynb) with the example of applying GP to 4D spectroscopic dataset for smoothing and resolution enhancement in contact Kelvin Probe Force Microscopy (cKPFM).\n3) Executable Google Colab [notebook](https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/GP_based_exploration_exploitation.ipynb) with a simple example of performing GP-based exploration-exploitation on a toy dataset.\n\n## Requirements\n\nIt is strongly recommended to run the codes with a GPU hardware accelerator (such as NVIDIA's P100 or V100 GPU). If you don't have a GPU on your local machine, you may rent a cloud GPU from [Google Cloud AI Platform](https://cloud.google.com/deep-learning-vm/). Running the [example notebooks](https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/Quickstart_GPim.ipynb) one time from top to bottom will cost about 1 USD with a standard deep learning VM instance (one P100 GPU and 15 GB of RAM).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ziatdinovmax/GPim", "keywords": "", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "gpim", "package_url": "https://pypi.org/project/gpim/", "platform": "", "project_url": "https://pypi.org/project/gpim/", "project_urls": {"Homepage": "https://github.com/ziatdinovmax/GPim"}, "release_url": "https://pypi.org/project/gpim/0.2.5/", "requires_dist": ["numpy (>=1.16.5)", "matplotlib (>=3.1.1)", "torch (>=1.3.1)", "pyro-ppl (>=0.4.1)", "gpytorch (<1.1.1,>=0.3.6)", "scikit-image (>=0.16.2)"], "requires_python": "", "summary": "Gaussian processes for image analysis", "version": "0.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pepy.tech/project/gpim/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30da7bd344c88cad748ad24ebb09d667ee7b6344/68747470733a2f2f706570792e746563682f62616467652f6770696d2f6d6f6e7468\"></a>\n<a href=\"https://badge.fury.io/py/gpim\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66fbda4e8f16b08292b02886318db7c7569522e3/68747470733a2f2f62616467652e667572792e696f2f70792f6770696d2e737667\"></a>\n<a href=\"https://travis-ci.com/ziatdinovmax/atomai\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1efb2ed91913904d5bde8557afd17a68b1a4dfce/68747470733a2f2f7472617669732d63692e636f6d2f7a69617464696e6f766d61782f61746f6d61692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://gpim.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/129dbfa1ff1c7744040d10188dc0e16d741368bb/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6770696d2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://app.codacy.com/manual/ziatdinovmax/GPim?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ziatdinovmax/GPim&amp;utm_campaign=Badge_Grade_Dashboard\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61c2a674f9fdee602ad5821934c9c77240e85984/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3037656531363036613838623438643162633436343533663361653162316338\"></a></p>\n<p><a href=\"https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/Quickstart_GPim.ipynb\" rel=\"nofollow\"><img alt=\"Colab\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74d996556a82b2f1dd5252d2fd8bead60f9e9d21/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667\"></a>\n<a href=\"https://gitpod.io/#https://github.com/ziatdinovmax/GPim\" rel=\"nofollow\"><img alt=\"Gitpod ready-to-code\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26f2435e786f2684d1b0c2e1aa860e172343d37a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64\"></a></p>\n<p><strong>Under active development (expect some breaking changes)</strong></p>\n<h2>What is GPim?</h2>\n<p>GPim is a python package that provides an easy way to apply Gaussian processes (GP) in <a href=\"https://pyro.ai/\" rel=\"nofollow\">Pyro</a> and <a href=\"https://gpytorch.ai/\" rel=\"nofollow\">Gpytorch</a> to images and hyperspectral data and to perform GP-based Bayesian optimization on grid data.\nFor the examples, see our papers:</p>\n<p>GP for 3D hyperspectral data: <a href=\"https://arxiv.org/abs/1911.11348\" rel=\"nofollow\">https://arxiv.org/abs/1911.11348</a></p>\n<p>GP for 4D hyperspectral data: <a href=\"https://arxiv.org/abs/2002.03591\" rel=\"nofollow\">https://arxiv.org/abs/2002.03591</a></p>\n<p>GP for Ising model: <a href=\"https://arxiv.org/abs/2004.04832\" rel=\"nofollow\">https://arxiv.org/abs/2004.04832</a></p>\n<p><em>The intended audience are domain scientists (for example, microscopists) with a basic knowledge of how to work with numpy arrays in Python.</em></p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81bb18485985e51480e128629319d92985f7c9b9/6d6973632f4750696d5f696c6c757374726174696f6e5f76322e706e67\" width=\"75%\">\n</p><p align=\"justify\">\n</p><h2>Installation</h2>\n<p>First install <a href=\"https://pytorch.org/\" rel=\"nofollow\">PyTorch</a>. Then install GPim using</p>\n<pre>pip install gpim\n</pre>\n<h2>How to use</h2>\n<h3>GP reconstruction</h3>\n<p>Below is a simple example of applying GPim to reconstructing a sparse 2D image. It can be similarly applied to 3D and 4D hyperspectral data. The missing data points in sparse data must be represented as <a href=\"https://docs.scipy.org/doc/numpy/reference/constants.html?highlight=numpy%20nan#numpy.nan\" rel=\"nofollow\">NaNs</a>. In the absense of missing observation GPim can be used for image and spectroscopic data cleaning/smoothing in all the dimensions simultaneously, as well as for the resolution enhancement.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gpim</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># # Load dataset</span>\n<span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'sparse_exp_data.npy'</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># Get full (ideal) grid indices</span>\n<span class=\"n\">X_full</span> <span class=\"o\">=</span> <span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">get_full_grid</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">dense_x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Get sparse grid indices</span>\n<span class=\"n\">X_sparse</span> <span class=\"o\">=</span> <span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">get_sparse_grid</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"c1\"># Kernel lengthscale constraints (optional)</span>\n<span class=\"n\">lmin</span><span class=\"p\">,</span> <span class=\"n\">lmax</span> <span class=\"o\">=</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">4.</span>\n<span class=\"n\">lscale</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">lmin</span><span class=\"p\">,</span> <span class=\"n\">lmin</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">lmax</span><span class=\"p\">,</span> <span class=\"n\">lmax</span><span class=\"p\">]]</span> \n\n<span class=\"c1\"># Run GP reconstruction to obtain mean prediction and uncertainty for each predictied point</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">sd</span><span class=\"p\">,</span> <span class=\"n\">hyperparams</span> <span class=\"o\">=</span> <span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">reconstructor</span><span class=\"p\">(</span>\n    <span class=\"n\">X_sparse</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">X_full</span><span class=\"p\">,</span> <span class=\"n\">lengthscale</span><span class=\"o\">=</span><span class=\"n\">lscale</span><span class=\"p\">,</span>\n    <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> \n    <span class=\"n\">use_gpu</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot reconstruction results</span>\n<span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">plot_reconstructed_data2d</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">'jet'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Plot evolution of kernel hyperparameters during training</span>\n<span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">plot_kernel_hyperparams</span><span class=\"p\">(</span><span class=\"n\">hyperparams</span><span class=\"p\">)</span>\n</pre>\n<h3>GP-based Bayesian optimization</h3>\n<p>When performing measurements (real or simulated), one can use the information about the expected function value and uncertainty in GP reconstruction to select the next measurement point. This is usually referred to as exploration-exploitation approach in the context of Bayesian optimization. A simple example with a \"dummy\" function is shown below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gpim</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a dummy 2D function</span>\n<span class=\"k\">def</span> <span class=\"nf\">trial_func</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Takes a list of indices as input and returns function value at these indices\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">idx</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">9</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># Create an empty observation matrix</span>\n<span class=\"n\">grid_size</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n<span class=\"n\">Z_sparse</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"n\">grid_size</span><span class=\"p\">,</span> <span class=\"n\">grid_size</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n<span class=\"c1\"># Seed it with several random observations</span>\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">grid_size</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">idx</span><span class=\"p\">:</span>\n    <span class=\"n\">Z_sparse</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">trial_func</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># Get full and sparse grid indices for GP</span>\n<span class=\"n\">X_full</span> <span class=\"o\">=</span> <span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">get_full_grid</span><span class=\"p\">(</span><span class=\"n\">Z_sparse</span><span class=\"p\">)</span>\n<span class=\"n\">X_sparse</span><span class=\"o\">=</span> <span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">get_sparse_grid</span><span class=\"p\">(</span><span class=\"n\">Z_sparse</span><span class=\"p\">)</span>\n<span class=\"c1\"># Initialize Bayesian optimizer with an 'expected improvement' acquisition function</span>\n<span class=\"n\">boptim</span> <span class=\"o\">=</span> <span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">boptimizer</span><span class=\"p\">(</span>\n    <span class=\"n\">X_sparse</span><span class=\"p\">,</span> <span class=\"n\">Z_sparse</span><span class=\"p\">,</span> <span class=\"n\">X_full</span><span class=\"p\">,</span> \n    <span class=\"n\">trial_func</span><span class=\"p\">,</span> <span class=\"n\">acquisition_function</span><span class=\"o\">=</span><span class=\"s1\">'ei'</span><span class=\"p\">,</span>\n    <span class=\"n\">exploration_steps</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">use_gpu</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Run Bayesian optimization</span>\n<span class=\"n\">boptim</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot exploration history</span>\n<span class=\"n\">gpim</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">plot_query_points</span><span class=\"p\">(</span><span class=\"n\">boptim</span><span class=\"o\">.</span><span class=\"n\">indices_all</span><span class=\"p\">,</span> <span class=\"n\">plot_lines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Running GPim notebooks in the cloud</h2>\n<ol>\n<li>Executable Google Colab <a href=\"https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/GP_2D3D_images.ipynb\" rel=\"nofollow\">notebook</a> with the example of applying GP to sparse spiral 2D scans in piezoresponse force microscopy (PFM) and hyperspectral 3D data in Band Excitation PFM.</li>\n<li>Executable Google Colab <a href=\"https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/GP_TD_cKPFM.ipynb\" rel=\"nofollow\">notebook</a> with the example of applying GP to 4D spectroscopic dataset for smoothing and resolution enhancement in contact Kelvin Probe Force Microscopy (cKPFM).</li>\n<li>Executable Google Colab <a href=\"https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/GP_based_exploration_exploitation.ipynb\" rel=\"nofollow\">notebook</a> with a simple example of performing GP-based exploration-exploitation on a toy dataset.</li>\n</ol>\n<h2>Requirements</h2>\n<p>It is strongly recommended to run the codes with a GPU hardware accelerator (such as NVIDIA's P100 or V100 GPU). If you don't have a GPU on your local machine, you may rent a cloud GPU from <a href=\"https://cloud.google.com/deep-learning-vm/\" rel=\"nofollow\">Google Cloud AI Platform</a>. Running the <a href=\"https://colab.research.google.com/github/ziatdinovmax/GPim/blob/master/examples/notebooks/Quickstart_GPim.ipynb\" rel=\"nofollow\">example notebooks</a> one time from top to bottom will cost about 1 USD with a standard deep learning VM instance (one P100 GPU and 15 GB of RAM).</p>\n\n          </div>"}, "last_serial": 7152584, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "d05385bae8fd7716170a5840f76713c0", "sha256": "862f1477c7a95793bc0897eb687177a91942b61e565afe2c3686574508f30ee6"}, "downloads": -1, "filename": "gpim-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d05385bae8fd7716170a5840f76713c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32731, "upload_time": "2020-04-20T01:45:59", "upload_time_iso_8601": "2020-04-20T01:45:59.830161Z", "url": "https://files.pythonhosted.org/packages/53/b8/dbfe7713506978991287f650d5c5fbbd41ec0c027ff4234ef460911eda1d/gpim-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7442ec1456fd4dd08b455de31143487", "sha256": "0e55bbc62c7a03068c195bcbcf5d5190316932aee3a331772e2e434bd29adad7"}, "downloads": -1, "filename": "gpim-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d7442ec1456fd4dd08b455de31143487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25011, "upload_time": "2020-04-20T01:46:02", "upload_time_iso_8601": "2020-04-20T01:46:02.690788Z", "url": "https://files.pythonhosted.org/packages/c4/d3/9d340bea254c3977605007ca5b7b5c9babcf680efa3d5c09a35a9c4fd56c/gpim-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "577151310e4f5cf9aafc49b145795384", "sha256": "cf8ed4856ed641d7d3b9b9f312705f52661da74b417d693fd9e7e7e574f1dfd4"}, "downloads": -1, "filename": "gpim-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "577151310e4f5cf9aafc49b145795384", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32966, "upload_time": "2020-04-21T07:16:18", "upload_time_iso_8601": "2020-04-21T07:16:18.045534Z", "url": "https://files.pythonhosted.org/packages/44/57/3bc9b921ff075829b51c549d304daf5a5573e33867d091027ef6ac5faefa/gpim-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1abaafc10426ff31a613a66b08601a0", "sha256": "097de49788232e4872500ddc4bdc706780e8d44a0f853a1e0d9c81422a85cdd1"}, "downloads": -1, "filename": "gpim-0.2.3.tar.gz", "has_sig": false, "md5_digest": "e1abaafc10426ff31a613a66b08601a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25428, "upload_time": "2020-04-21T07:16:19", "upload_time_iso_8601": "2020-04-21T07:16:19.425019Z", "url": "https://files.pythonhosted.org/packages/53/cb/8a0007bad4be6938f06152f5cd94ecc268cf3c379acd6136dd602ab9ab0a/gpim-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "80447cd5e4f325240b428fa7a9d13e98", "sha256": "9e8f1ccb715ef61532f341a03c20e048c866befdcf8b0967d82ee252707fe7b1"}, "downloads": -1, "filename": "gpim-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "80447cd5e4f325240b428fa7a9d13e98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33375, "upload_time": "2020-04-25T22:42:45", "upload_time_iso_8601": "2020-04-25T22:42:45.369139Z", "url": "https://files.pythonhosted.org/packages/0f/b4/c1ee50d8343844c9e344e26029ad68c563920327d39bc0ed7b5e3037e4cd/gpim-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcb6f8d3804e370645aa29233472f07d", "sha256": "9e0ddfbb3f9d7256fc3a6fcd1e8868a3a8024031a644da95c7dc5ea7d98f2ff5"}, "downloads": -1, "filename": "gpim-0.2.4.tar.gz", "has_sig": false, "md5_digest": "dcb6f8d3804e370645aa29233472f07d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26390, "upload_time": "2020-04-25T22:42:46", "upload_time_iso_8601": "2020-04-25T22:42:46.574949Z", "url": "https://files.pythonhosted.org/packages/47/6d/1dee72048c633e86ae46429fed57644e4ae9ce1a5433ab8c24df1acc0460/gpim-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "f180c25a4ae95188e919dd8cc40ecf29", "sha256": "15a305b5f429647a0198071ff9869739722f75da3f339f207a2e6db1cc70d649"}, "downloads": -1, "filename": "gpim-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f180c25a4ae95188e919dd8cc40ecf29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33823, "upload_time": "2020-05-02T17:28:55", "upload_time_iso_8601": "2020-05-02T17:28:55.718760Z", "url": "https://files.pythonhosted.org/packages/45/7e/afbbb85c10557c9a1b1d6601a2d2900349a106a366577b69f69407ff99a5/gpim-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5027975ac5e28fa554ab9c107250a704", "sha256": "9e46de39a2e0f3d1f7335da274c435c19e888a157eec68a76dd4eabc0752e4af"}, "downloads": -1, "filename": "gpim-0.2.5.tar.gz", "has_sig": false, "md5_digest": "5027975ac5e28fa554ab9c107250a704", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27140, "upload_time": "2020-05-02T17:28:57", "upload_time_iso_8601": "2020-05-02T17:28:57.336718Z", "url": "https://files.pythonhosted.org/packages/87/fb/767e243c49f827f55aecdaef16683920d04e3794c06eb4b718896fb021df/gpim-0.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f180c25a4ae95188e919dd8cc40ecf29", "sha256": "15a305b5f429647a0198071ff9869739722f75da3f339f207a2e6db1cc70d649"}, "downloads": -1, "filename": "gpim-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f180c25a4ae95188e919dd8cc40ecf29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33823, "upload_time": "2020-05-02T17:28:55", "upload_time_iso_8601": "2020-05-02T17:28:55.718760Z", "url": "https://files.pythonhosted.org/packages/45/7e/afbbb85c10557c9a1b1d6601a2d2900349a106a366577b69f69407ff99a5/gpim-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5027975ac5e28fa554ab9c107250a704", "sha256": "9e46de39a2e0f3d1f7335da274c435c19e888a157eec68a76dd4eabc0752e4af"}, "downloads": -1, "filename": "gpim-0.2.5.tar.gz", "has_sig": false, "md5_digest": "5027975ac5e28fa554ab9c107250a704", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27140, "upload_time": "2020-05-02T17:28:57", "upload_time_iso_8601": "2020-05-02T17:28:57.336718Z", "url": "https://files.pythonhosted.org/packages/87/fb/767e243c49f827f55aecdaef16683920d04e3794c06eb4b718896fb021df/gpim-0.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:17 2020"}