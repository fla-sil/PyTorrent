{"info": {"author": "['Nicolas Renaud', 'Felipe Zapata']", "author_email": "n.renaud@esciencecenter.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Chemistry"], "description": "# Schrodinet\n\n![Build Status](https://travis-ci.com/NLESC-JCER/Schrodinet.svg?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/38b540ecc5464901a5a48a9be037c924)](https://app.codacy.com/gh/NLESC-JCER/Schrodinet?utm_source=github.com&utm_medium=referral&utm_content=NLESC-JCER/Schrodinet&utm_campaign=Badge_Grade_Dashboard)\n\nSolving the Schrodinger equations in 1, 2 or 3D  using quantum monte carlo and radial basis function neural network to encode the wavefunction.\n\n## Harmonic Oscillator in 1D\n\nThe script below illustrates how to optimize the wave function of the one-dimensional harmonic oscillator.\n\n```python\nimport torch\nfrom torch import optim\n\nfrom schrodinet.sampler.metropolis import Metropolis\nfrom schrodinet.wavefunction.wf_potential import Potential\nfrom schrodinet.solver.solver_potential import SolverPotential\nfrom schrodinet.solver.plot_potential import plot_results_1d, plotter1d\n\ndef pot_func(pos):\n    '''Potential function desired.'''\n    return 0.5*pos**2\n\n\ndef ho1d_sol(pos):\n    '''Analytical solution of the 1D harmonic oscillator.'''\n    return torch.exp(-0.5*pos**2)\n\n# Define the domain and the number of RBFs\ndomain, ncenter = {'min': -5., 'max': 5.}, 11\n\n# wavefunction\nwf = Potential(pot_func, domain, ncenter, fcinit='random', nelec=1, sigma=0.5)\n\n# sampler\nsampler = Metropolis(nwalkers=1000, nstep=2000,\n                     step_size=1., nelec=wf.nelec,\n                     ndim=wf.ndim, init={'min': -5, 'max': 5})\n\n# optimizer\nopt = optim.Adam(wf.parameters(), lr=0.05)\nscheduler = optim.lr_scheduler.StepLR(opt, step_size=100, gamma=0.75)\n\n# Solver\nsolver = SolverPotential(wf=wf, sampler=sampler,\n                         optimizer=opt, scheduler=scheduler)\n\n# Train the wave function\nplotter = plotter1d(wf, domain, 100, sol=ho1d_sol) \nsolver.run(300, loss='variance', plot=plotter, save='model.pth')\n\n# Plot the final wave function\nplot_results_1d(solver, domain, 100, ho1d_sol, e0=0.5, load='model.pth')\n```\n\nAfter otpimization the following trajectory can easily be generated :\n\n<p align=\"center\">\n<img src=\"./pics/ho1d.gif\" title=\"Optimization of the wave function\">\n</p>\n\nThe same procedure can be done on different potentials. The figure below shows the performace of the method on the harmonic oscillator and the morse potential.\n\n<p align=\"center\">\n<img src=\"./pics/rbf1d_summary.png\" title=\"Results of the optimization\">\n</p>\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NLESC-JCER/Schrodinet", "keywords": "schrodinet", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "schrodinet", "package_url": "https://pypi.org/project/schrodinet/", "platform": "", "project_url": "https://pypi.org/project/schrodinet/", "project_urls": {"Homepage": "https://github.com/NLESC-JCER/Schrodinet"}, "release_url": "https://pypi.org/project/schrodinet/0.1.1/", "requires_dist": ["autograd", "cython", "matplotlib", "numpy", "pyyaml (>=5.1)", "schema", "scipy", "tqdm", "torch", "prospector[with_pyroma] ; extra == 'dev'", "yapf ; extra == 'dev'", "isort ; extra == 'dev'", "recommonmark ; extra == 'doc'", "sphinx ; extra == 'doc'", "sphinx-rtd-theme ; extra == 'doc'", "coverage ; extra == 'test'", "pycodestyle ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-runner ; extra == 'test'"], "requires_python": "", "summary": "Solving the Schrodinger equation using RBF Neural Net", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Schrodinet</h1>\n<p><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8be7e0781cf09f7801f96937f13ac4ee62b04324/68747470733a2f2f7472617669732d63692e636f6d2f4e4c4553432d4a4345522f536368726f64696e65742e7376673f6272616e63683d6d6173746572\">\n<a href=\"https://app.codacy.com/gh/NLESC-JCER/Schrodinet?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=NLESC-JCER/Schrodinet&amp;utm_campaign=Badge_Grade_Dashboard\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9de1c8aece68ca10d850b46f71ded3542b29eb93/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3338623534306563633534363439303161356134386139626530333763393234\"></a></p>\n<p>Solving the Schrodinger equations in 1, 2 or 3D  using quantum monte carlo and radial basis function neural network to encode the wavefunction.</p>\n<h2>Harmonic Oscillator in 1D</h2>\n<p>The script below illustrates how to optimize the wave function of the one-dimensional harmonic oscillator.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch</span> <span class=\"kn\">import</span> <span class=\"n\">optim</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">schrodinet.sampler.metropolis</span> <span class=\"kn\">import</span> <span class=\"n\">Metropolis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">schrodinet.wavefunction.wf_potential</span> <span class=\"kn\">import</span> <span class=\"n\">Potential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">schrodinet.solver.solver_potential</span> <span class=\"kn\">import</span> <span class=\"n\">SolverPotential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">schrodinet.solver.plot_potential</span> <span class=\"kn\">import</span> <span class=\"n\">plot_results_1d</span><span class=\"p\">,</span> <span class=\"n\">plotter1d</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pot_func</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Potential function desired.'''</span>\n    <span class=\"k\">return</span> <span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"n\">pos</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">ho1d_sol</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Analytical solution of the 1D harmonic oscillator.'''</span>\n    <span class=\"k\">return</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"n\">pos</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Define the domain and the number of RBFs</span>\n<span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">ncenter</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'min'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">5.</span><span class=\"p\">,</span> <span class=\"s1\">'max'</span><span class=\"p\">:</span> <span class=\"mf\">5.</span><span class=\"p\">},</span> <span class=\"mi\">11</span>\n\n<span class=\"c1\"># wavefunction</span>\n<span class=\"n\">wf</span> <span class=\"o\">=</span> <span class=\"n\">Potential</span><span class=\"p\">(</span><span class=\"n\">pot_func</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">ncenter</span><span class=\"p\">,</span> <span class=\"n\">fcinit</span><span class=\"o\">=</span><span class=\"s1\">'random'</span><span class=\"p\">,</span> <span class=\"n\">nelec</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sampler</span>\n<span class=\"n\">sampler</span> <span class=\"o\">=</span> <span class=\"n\">Metropolis</span><span class=\"p\">(</span><span class=\"n\">nwalkers</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">nstep</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">,</span>\n                     <span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">nelec</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">nelec</span><span class=\"p\">,</span>\n                     <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'min'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'max'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># optimizer</span>\n<span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"n\">scheduler</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">lr_scheduler</span><span class=\"o\">.</span><span class=\"n\">StepLR</span><span class=\"p\">(</span><span class=\"n\">opt</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">0.75</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Solver</span>\n<span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">SolverPotential</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"p\">,</span> <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">sampler</span><span class=\"p\">,</span>\n                         <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"n\">opt</span><span class=\"p\">,</span> <span class=\"n\">scheduler</span><span class=\"o\">=</span><span class=\"n\">scheduler</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Train the wave function</span>\n<span class=\"n\">plotter</span> <span class=\"o\">=</span> <span class=\"n\">plotter1d</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">sol</span><span class=\"o\">=</span><span class=\"n\">ho1d_sol</span><span class=\"p\">)</span> \n<span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'variance'</span><span class=\"p\">,</span> <span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"n\">plotter</span><span class=\"p\">,</span> <span class=\"n\">save</span><span class=\"o\">=</span><span class=\"s1\">'model.pth'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plot the final wave function</span>\n<span class=\"n\">plot_results_1d</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">ho1d_sol</span><span class=\"p\">,</span> <span class=\"n\">e0</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">load</span><span class=\"o\">=</span><span class=\"s1\">'model.pth'</span><span class=\"p\">)</span>\n</pre>\n<p>After otpimization the following trajectory can easily be generated :</p>\n<p align=\"center\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/908d79b782472ec448b966c1bf378a3fae1d48e0/2e2f706963732f686f31642e676966\">\n</p>\n<p>The same procedure can be done on different potentials. The figure below shows the performace of the method on the harmonic oscillator and the morse potential.</p>\n<p align=\"center\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6bdd546bff3f0e20ffce8daaf464e42fb36083ec/2e2f706963732f72626631645f73756d6d6172792e706e67\">\n</p>\n\n          </div>"}, "last_serial": 6921058, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3a64a29313b73104f300a6b04085873d", "sha256": "2d1e4fddf3185dbe92013be3fbb67e6e66bdbd06da167f6e8671ee665e9af65e"}, "downloads": -1, "filename": "schrodinet-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a64a29313b73104f300a6b04085873d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28333, "upload_time": "2020-03-31T12:19:50", "upload_time_iso_8601": "2020-03-31T12:19:50.209828Z", "url": "https://files.pythonhosted.org/packages/9c/e3/c7985c4caa6ce5c9b1ac6a7c9f36a63ff93edc65835fee9878b07168ab2a/schrodinet-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e77e488fe2c8766d83d3a4c3ea13ee45", "sha256": "5036d46606bbef3585f670ce031cca2803bc6e3f0766a4c7a27f9f8718fc67b6"}, "downloads": -1, "filename": "schrodinet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e77e488fe2c8766d83d3a4c3ea13ee45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22539, "upload_time": "2020-03-31T12:19:53", "upload_time_iso_8601": "2020-03-31T12:19:53.007953Z", "url": "https://files.pythonhosted.org/packages/ba/ff/06608bbf07584a620d686c8c06c22bc545c248b6d8209c2d2a7a2fd72f7c/schrodinet-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "da3c02d85a9888dc398f15a598b61d29", "sha256": "55d018f20e838a60ee49ecfde0bfcff8a8cf88220543962eaeacbc13345b5bc6"}, "downloads": -1, "filename": "schrodinet-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "da3c02d85a9888dc398f15a598b61d29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28441, "upload_time": "2020-03-31T15:40:45", "upload_time_iso_8601": "2020-03-31T15:40:45.336528Z", "url": "https://files.pythonhosted.org/packages/42/7b/7ba3a0f7711e54565a8e18038fd1cf6cf928d0dfd4c5a6a8655b6abf0087/schrodinet-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8b196c438d1203be48b634be0410a80", "sha256": "e79e414619eda1060bfb2240203561245829c0867c57dc5210067065d7282950"}, "downloads": -1, "filename": "schrodinet-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c8b196c438d1203be48b634be0410a80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22630, "upload_time": "2020-03-31T15:40:47", "upload_time_iso_8601": "2020-03-31T15:40:47.197003Z", "url": "https://files.pythonhosted.org/packages/aa/90/9f524e851f47917f6f007adadac35718cfaee3f4cbd9e5435c27e454fbee/schrodinet-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da3c02d85a9888dc398f15a598b61d29", "sha256": "55d018f20e838a60ee49ecfde0bfcff8a8cf88220543962eaeacbc13345b5bc6"}, "downloads": -1, "filename": "schrodinet-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "da3c02d85a9888dc398f15a598b61d29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28441, "upload_time": "2020-03-31T15:40:45", "upload_time_iso_8601": "2020-03-31T15:40:45.336528Z", "url": "https://files.pythonhosted.org/packages/42/7b/7ba3a0f7711e54565a8e18038fd1cf6cf928d0dfd4c5a6a8655b6abf0087/schrodinet-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8b196c438d1203be48b634be0410a80", "sha256": "e79e414619eda1060bfb2240203561245829c0867c57dc5210067065d7282950"}, "downloads": -1, "filename": "schrodinet-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c8b196c438d1203be48b634be0410a80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22630, "upload_time": "2020-03-31T15:40:47", "upload_time_iso_8601": "2020-03-31T15:40:47.197003Z", "url": "https://files.pythonhosted.org/packages/aa/90/9f524e851f47917f6f007adadac35718cfaee3f4cbd9e5435c27e454fbee/schrodinet-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:44 2020"}