{"info": {"author": "Michael P. Jung", "author_email": "michael.jung@terreon.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Database", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Django Chronicle is an implementation of the slowly changing dimensions type 4\nwhich uses database triggers.\n\nHow to use?\n-----------\n\n1.) Create a custom revision model. e.g.\n\n    from chronicle.models import AbstractRevision\n\n    class Revision(AbstractRevision):\n        user = models.ForeignKey(settings.AUTH_USER_MODEL)\n        created = models.DateTimeField(auto_now_add=True)\n\n2.) Set settings.REVISION_MODEL to point to your revision model. e.g.\n\n    REVISION_MODEL = 'revision.Revision'\n\n3.) Let your models inherit from `HistoryMixin` e.g.\n\n    from chronicle.models import HistoryMixin\n    from django.db import models\n\n    class Food(HistoryMixin, models.Model):\n        name = models.CharField(max_length=50)\n\n4.) Create all the migrations and run them:\n\n    $ manage.py makemigrations\n    $ manage.py migrate\n\n    That should create all the `_history` tables for your models\n    that inherit from the `HistoryMixin`.\n\n5.) Create the database triggers\n\n    $ manage.py create_history_triggers\n\n\nNow every change to your models should be logged in the `_history` tables\nand you can access the model history via the `History` model which becomes\na field of the original class.\n\n\nExample usage:\n--------------\n\n    # create\n    food = Food('Carot')\n    food.save()\n    assert(Food.History.objects.filter(id=food.id).count() == 1)\n\n    # update\n    food.name = 'Carrot'\n    food.save()\n    assert(Food.History.objects.filter(id=food.id).count() == 2)\n\n    # delete\n    food.delete()\n    assert(Food.History.objects.filter(id=food.id).count() == 3)\n\n\nWhy database triggers?\n----------------------\n\nThe obvious choice to implement model history would be to connect a signal\nhandler to the `post_save` and `post_delete` signal. This has some rather huge\ndownsides:\n\n1.) `QuerySet.update()` and a lot of other `QuerySet` methods do not emit any\nsignals. Having to limit the code to only use `save()` can be a rather huge\nperformance problem depending on the type of application.\n\n2.) There is a rather large performance impact when creating the history via\nthe Django ORM. A single `QuerySet.update()` call could result in hundreds\nor thousands of inserts. While this could mostly be solved using the\n`Manager.bulk_create` method a database trigger is a lot faster as there is no\nextra database roundtrip required.\n\n3.) This works for any kind of raw query - even outside of the Django ORM - as\nlong as the `chronicle.revision_id` session variable is properly set.\n\nThe only real downside is the DB compatibility. Right now this package only\nsupports the PostgreSQL database engine.\n\n\nHow to issue queries without the Django ORM?\n--------------------------------------------\n\nCreate a revision by inserting a row into the revision table and set the\n`chronicle.revision_id` session variable like so:\n\n    SET chronicle.revision_id = 42; -- replace 42 by the actual revision id\n\nOnce you have made all changes to your models don't forget to reset the\nsession variable. Otherwise you might reuse the same revision by accident \nin the same DB session:\n\n    SET chronicle.revision_id TO DEFAULT;\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/terreon/django-chronicle", "keywords": "django model version history revision", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-chronicle", "package_url": "https://pypi.org/project/django-chronicle/", "platform": "", "project_url": "https://pypi.org/project/django-chronicle/", "project_urls": {"Homepage": "https://bitbucket.org/terreon/django-chronicle"}, "release_url": "https://pypi.org/project/django-chronicle/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "efficient model history using database triggers", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django Chronicle is an implementation of the slowly changing dimensions type 4\nwhich uses database triggers.</p>\n<div id=\"how-to-use\">\n<h2>How to use?</h2>\n<p>1.) Create a custom revision model. e.g.</p>\n<blockquote>\n<p>from chronicle.models import AbstractRevision</p>\n<dl>\n<dt>class Revision(AbstractRevision):</dt>\n<dd>user = models.ForeignKey(settings.AUTH_USER_MODEL)\ncreated = models.DateTimeField(auto_now_add=True)</dd>\n</dl>\n</blockquote>\n<p>2.) Set settings.REVISION_MODEL to point to your revision model. e.g.</p>\n<blockquote>\nREVISION_MODEL = \u2018revision.Revision\u2019</blockquote>\n<p>3.) Let your models inherit from <cite>HistoryMixin</cite> e.g.</p>\n<blockquote>\n<p>from chronicle.models import HistoryMixin\nfrom django.db import models</p>\n<dl>\n<dt>class Food(HistoryMixin, models.Model):</dt>\n<dd>name = models.CharField(max_length=50)</dd>\n</dl>\n</blockquote>\n<p>4.) Create all the migrations and run them:</p>\n<blockquote>\n<p>$ manage.py makemigrations\n$ manage.py migrate</p>\n<p>That should create all the <cite>_history</cite> tables for your models\nthat inherit from the <cite>HistoryMixin</cite>.</p>\n</blockquote>\n<p>5.) Create the database triggers</p>\n<blockquote>\n$ manage.py create_history_triggers</blockquote>\n<p>Now every change to your models should be logged in the <cite>_history</cite> tables\nand you can access the model history via the <cite>History</cite> model which becomes\na field of the original class.</p>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage:</h2>\n<blockquote>\n<p># create\nfood = Food(\u2018Carot\u2019)\nfood.save()\nassert(Food.History.objects.filter(id=food.id).count() == 1)</p>\n<p># update\nfood.name = \u2018Carrot\u2019\nfood.save()\nassert(Food.History.objects.filter(id=food.id).count() == 2)</p>\n<p># delete\nfood.delete()\nassert(Food.History.objects.filter(id=food.id).count() == 3)</p>\n</blockquote>\n</div>\n<div id=\"why-database-triggers\">\n<h2>Why database triggers?</h2>\n<p>The obvious choice to implement model history would be to connect a signal\nhandler to the <cite>post_save</cite> and <cite>post_delete</cite> signal. This has some rather huge\ndownsides:</p>\n<p>1.) <cite>QuerySet.update()</cite> and a lot of other <cite>QuerySet</cite> methods do not emit any\nsignals. Having to limit the code to only use <cite>save()</cite> can be a rather huge\nperformance problem depending on the type of application.</p>\n<p>2.) There is a rather large performance impact when creating the history via\nthe Django ORM. A single <cite>QuerySet.update()</cite> call could result in hundreds\nor thousands of inserts. While this could mostly be solved using the\n<cite>Manager.bulk_create</cite> method a database trigger is a lot faster as there is no\nextra database roundtrip required.</p>\n<p>3.) This works for any kind of raw query - even outside of the Django ORM - as\nlong as the <cite>chronicle.revision_id</cite> session variable is properly set.</p>\n<p>The only real downside is the DB compatibility. Right now this package only\nsupports the PostgreSQL database engine.</p>\n</div>\n<div id=\"how-to-issue-queries-without-the-django-orm\">\n<h2>How to issue queries without the Django ORM?</h2>\n<p>Create a revision by inserting a row into the revision table and set the\n<cite>chronicle.revision_id</cite> session variable like so:</p>\n<blockquote>\nSET chronicle.revision_id = 42; \u2013 replace 42 by the actual revision id</blockquote>\n<p>Once you have made all changes to your models don\u2019t forget to reset the\nsession variable. Otherwise you might reuse the same revision by accident\nin the same DB session:</p>\n<blockquote>\nSET chronicle.revision_id TO DEFAULT;</blockquote>\n</div>\n\n          </div>"}, "last_serial": 6544176, "releases": {"0.0.0": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "8b8f74cdc620c7a3a4d8827b2287cf42", "sha256": "26456f709fb1be2c0ee1fe0d97ba0a44e55d3c005bdf9ae624b58227a3888bb3"}, "downloads": -1, "filename": "django_chronicle-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8b8f74cdc620c7a3a4d8827b2287cf42", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9535, "upload_time": "2020-01-30T15:48:35", "upload_time_iso_8601": "2020-01-30T15:48:35.578707Z", "url": "https://files.pythonhosted.org/packages/27/f3/314e82f9bf7707404559c1736e62d8a5f3bc01583d21909c5a7fe97f223e/django_chronicle-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5dadbf4200942be98aa1de32c291e20", "sha256": "c3e7ad1a901d998e7d1decdd270a4e8fd7218e4d017661db1133df482a681e57"}, "downloads": -1, "filename": "django-chronicle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d5dadbf4200942be98aa1de32c291e20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7980, "upload_time": "2020-01-30T15:48:33", "upload_time_iso_8601": "2020-01-30T15:48:33.919981Z", "url": "https://files.pythonhosted.org/packages/13/76/5ce51535675c29cd6a8a6bf43c99fd4cdb6a92335d230a965d6130440a44/django-chronicle-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8b8f74cdc620c7a3a4d8827b2287cf42", "sha256": "26456f709fb1be2c0ee1fe0d97ba0a44e55d3c005bdf9ae624b58227a3888bb3"}, "downloads": -1, "filename": "django_chronicle-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8b8f74cdc620c7a3a4d8827b2287cf42", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9535, "upload_time": "2020-01-30T15:48:35", "upload_time_iso_8601": "2020-01-30T15:48:35.578707Z", "url": "https://files.pythonhosted.org/packages/27/f3/314e82f9bf7707404559c1736e62d8a5f3bc01583d21909c5a7fe97f223e/django_chronicle-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5dadbf4200942be98aa1de32c291e20", "sha256": "c3e7ad1a901d998e7d1decdd270a4e8fd7218e4d017661db1133df482a681e57"}, "downloads": -1, "filename": "django-chronicle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d5dadbf4200942be98aa1de32c291e20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7980, "upload_time": "2020-01-30T15:48:33", "upload_time_iso_8601": "2020-01-30T15:48:33.919981Z", "url": "https://files.pythonhosted.org/packages/13/76/5ce51535675c29cd6a8a6bf43c99fd4cdb6a92335d230a965d6130440a44/django-chronicle-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:10 2020"}