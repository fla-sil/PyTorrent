{"info": {"author": "Ann Gledson", "author_email": "ann.gledson@manchester.ac.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# region_estimators package\n\nregion_estimators is a Python library to calculate regional estimations of scalar quantities, based on some known scalar quantities at specific locations.\nFor example, estimating the NO2 (pollution) level of a postcode/zip region, based on sensor data nearby.\nThis first version of the package is initialised with 2 estimation methods: \n1. Diffusion: look for actual data points in gradually wider rings, starting with sensors within the region, and then working in rings outwards, until sensors are found. If more than one sensor is found at the final stage, it takes the mean.\n2. Simple Distance measure: This is a very basic implementation... Find the nearest sensor to the region and use that value. \nIf sensors exist within the region, take the mean.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install region_estimators.\n\n```bash\npip install shapely\npip install pandas\npip install geopandas\npip install region_estimators\n```\n\n## Usage\n\n```python\n>>> from shapely import wkt\n>>> import pandas as pd\n>>> from region_estimators import RegionEstimatorFactory\n\n\n# Prepare input files  (For sample input files, see the 'sample_input_files' folder) \n>>> df_regions = pd.read_csv('/path/to/file/df_regions.csv', index_col='region_id')\n>>> df_sensors = pd.read_csv('/path/to/file/df_sensors.csv', index_col='sensor_id')\n>>> df_actuals = pd.read_csv('/path/to/file/df_actuals.csv')\n\n# Convert the regions geometry column from string to wkt format using wkt\n>>> df_regions['geometry'] = df_regions.apply(lambda row: wkt.loads(row.geometry), axis=1)\n\n# Create estimator, the first parameter is the estimation method.\n>>> estimator = RegionEstimatorFactory.region_estimator('diffusion', df_sensors, df_regions, df_actuals)\n\n# Make estimations\n>>> estimator.get_estimations('urtica', 'AB', '2017-07-01')\n>>> estimator.get_estimations('urtica', None, '2018-08-15') \t# Get estimates for all regions\n>>> estimator.get_estimations('urtica', 'AB', None)\t  \t# Get estimates for all timestamps\n>>> estimator.get_estimations('urtica', None, None) \t\t# Get estimates for all regions and timestamps\n\n# Convert dataframe result to (for example) a csv file:\n>>> df_region_estimates = estimator.get_estimations('urtica', None, '2018-08-15')\n>>> df_region_estimates.to_csv('/path/to/file/df_urtica_2018-08-15_estimates.csv')\n\n\n\n\n##### Details of region_estimators classes / methods used above: #####\n\n'''\n    # Call RegionEstimatorFactory.region_estimator\n\n    # Reguired inputs: \n\n    # \tmethod_name (string): \tthe estimation method. For example, in the first version \n    # \t\t\t\tthe options are 'diffusion' or 'distance-simple'\n\n\n    # \t3 pandas.Dataframe objects:  (For sample input files, see the 'sample_input_files' folder) \n\n\n    sensors: list of sensors as pandas.DataFrame (one row per sensor)\n\t    Required columns:\n                'sensor_id' (INDEX): identifier for sensor (must be unique to each sensor)\n                'latitude' (numeric): latitude of sensor location\n                'longitude' (numeric): longitude of sensor location\n        Optional columns:\n                'name' (string): Human readable name of sensor\n\n    regions: list of regions as pandas.DataFrame  (one row per region)\n        Required columns:\n            'region_id' (INDEX): identifier for region (must be unique to each region)\n            'geometry' (shapely.wkt/geom.wkt):  Multi-polygon representing regions location and shape.\n\n    actuals: list of actual sensor values as pandas.DataFrame (one row per timestamp)\n        Required columns:\n            'timestamp' (string): timestamp of actual reading\n            'sensor_id': ID of sensor which took actual reading (must match with a sensors.sensor_id\n                in sensors (in value and type))\n            [one or more value columns] (float):    value of actual measurement readings.\n                                                    each column name should be the name of the measurement e.g. 'NO2'\n\t'''\n\nestimator = RegionEstimatorFactory.region_estimator(method_name, df_sensors, df_regions, df_actuals)\n\n\n# Call RegionEstimator.get_estimations\n# Required inputs: \n# \tregion_id:      region identifier (string (or None to get all regions))\n# \ttimestamp:      timestamp identifier (string (or None to get all timestamps))\n#   print_progress  print progress (boolean, default:False)\n#\t\n#\tWARNING! - estimator.get_estimates(None, None) will calculate every region at every timestamp.\n\n\nresult = estimator.get_estimations('urtica', 'AB', '2018-08-15')\n\n# result is a pandas dataframe, with columns:\n#                'measurement'\n#                'region_id'\n#                'timestamp'\n#                'value'  (the estimated value)\n#                'extra_data' (extra info about estimation calculation)\n\n```\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n[MIT](https://opensource.org/licenses/MIT)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/UoMResearchIT/region_estimators", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "region-estimators", "package_url": "https://pypi.org/project/region-estimators/", "platform": "", "project_url": "https://pypi.org/project/region-estimators/", "project_urls": {"Homepage": "https://github.com/UoMResearchIT/region_estimators"}, "release_url": "https://pypi.org/project/region-estimators/0.1.30/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Make estimations for geographic regions, based on actual data (e.g. from sensors)", "version": "0.1.30", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>region_estimators package</h1>\n<p>region_estimators is a Python library to calculate regional estimations of scalar quantities, based on some known scalar quantities at specific locations.\nFor example, estimating the NO2 (pollution) level of a postcode/zip region, based on sensor data nearby.\nThis first version of the package is initialised with 2 estimation methods:</p>\n<ol>\n<li>Diffusion: look for actual data points in gradually wider rings, starting with sensors within the region, and then working in rings outwards, until sensors are found. If more than one sensor is found at the final stage, it takes the mean.</li>\n<li>Simple Distance measure: This is a very basic implementation... Find the nearest sensor to the region and use that value.\nIf sensors exist within the region, take the mean.</li>\n</ol>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install region_estimators.</p>\n<pre>pip install shapely\npip install pandas\npip install geopandas\npip install region_estimators\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">shapely</span> <span class=\"kn\">import</span> <span class=\"n\">wkt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">region_estimators</span> <span class=\"kn\">import</span> <span class=\"n\">RegionEstimatorFactory</span>\n\n\n<span class=\"c1\"># Prepare input files  (For sample input files, see the 'sample_input_files' folder) </span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_regions</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file/df_regions.csv'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"s1\">'region_id'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_sensors</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file/df_sensors.csv'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"s1\">'sensor_id'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_actuals</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file/df_actuals.csv'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert the regions geometry column from string to wkt format using wkt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_regions</span><span class=\"p\">[</span><span class=\"s1\">'geometry'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df_regions</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create estimator, the first parameter is the estimation method.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">RegionEstimatorFactory</span><span class=\"o\">.</span><span class=\"n\">region_estimator</span><span class=\"p\">(</span><span class=\"s1\">'diffusion'</span><span class=\"p\">,</span> <span class=\"n\">df_sensors</span><span class=\"p\">,</span> <span class=\"n\">df_regions</span><span class=\"p\">,</span> <span class=\"n\">df_actuals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make estimations</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_estimations</span><span class=\"p\">(</span><span class=\"s1\">'urtica'</span><span class=\"p\">,</span> <span class=\"s1\">'AB'</span><span class=\"p\">,</span> <span class=\"s1\">'2017-07-01'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_estimations</span><span class=\"p\">(</span><span class=\"s1\">'urtica'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'2018-08-15'</span><span class=\"p\">)</span> \t<span class=\"c1\"># Get estimates for all regions</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_estimations</span><span class=\"p\">(</span><span class=\"s1\">'urtica'</span><span class=\"p\">,</span> <span class=\"s1\">'AB'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\t  \t<span class=\"c1\"># Get estimates for all timestamps</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_estimations</span><span class=\"p\">(</span><span class=\"s1\">'urtica'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> \t\t<span class=\"c1\"># Get estimates for all regions and timestamps</span>\n\n<span class=\"c1\"># Convert dataframe result to (for example) a csv file:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_region_estimates</span> <span class=\"o\">=</span> <span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_estimations</span><span class=\"p\">(</span><span class=\"s1\">'urtica'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'2018-08-15'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_region_estimates</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file/df_urtica_2018-08-15_estimates.csv'</span><span class=\"p\">)</span>\n\n\n\n\n<span class=\"c1\">##### Details of region_estimators classes / methods used above: #####</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">    # Call RegionEstimatorFactory.region_estimator</span>\n\n<span class=\"sd\">    # Reguired inputs: </span>\n\n<span class=\"sd\">    # \tmethod_name (string): \tthe estimation method. For example, in the first version </span>\n<span class=\"sd\">    # \t\t\t\tthe options are 'diffusion' or 'distance-simple'</span>\n\n\n<span class=\"sd\">    # \t3 pandas.Dataframe objects:  (For sample input files, see the 'sample_input_files' folder) </span>\n\n\n<span class=\"sd\">    sensors: list of sensors as pandas.DataFrame (one row per sensor)</span>\n<span class=\"sd\">\t    Required columns:</span>\n<span class=\"sd\">                'sensor_id' (INDEX): identifier for sensor (must be unique to each sensor)</span>\n<span class=\"sd\">                'latitude' (numeric): latitude of sensor location</span>\n<span class=\"sd\">                'longitude' (numeric): longitude of sensor location</span>\n<span class=\"sd\">        Optional columns:</span>\n<span class=\"sd\">                'name' (string): Human readable name of sensor</span>\n\n<span class=\"sd\">    regions: list of regions as pandas.DataFrame  (one row per region)</span>\n<span class=\"sd\">        Required columns:</span>\n<span class=\"sd\">            'region_id' (INDEX): identifier for region (must be unique to each region)</span>\n<span class=\"sd\">            'geometry' (shapely.wkt/geom.wkt):  Multi-polygon representing regions location and shape.</span>\n\n<span class=\"sd\">    actuals: list of actual sensor values as pandas.DataFrame (one row per timestamp)</span>\n<span class=\"sd\">        Required columns:</span>\n<span class=\"sd\">            'timestamp' (string): timestamp of actual reading</span>\n<span class=\"sd\">            'sensor_id': ID of sensor which took actual reading (must match with a sensors.sensor_id</span>\n<span class=\"sd\">                in sensors (in value and type))</span>\n<span class=\"sd\">            [one or more value columns] (float):    value of actual measurement readings.</span>\n<span class=\"sd\">                                                    each column name should be the name of the measurement e.g. 'NO2'</span>\n<span class=\"sd\">\t'''</span>\n\n<span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">RegionEstimatorFactory</span><span class=\"o\">.</span><span class=\"n\">region_estimator</span><span class=\"p\">(</span><span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">df_sensors</span><span class=\"p\">,</span> <span class=\"n\">df_regions</span><span class=\"p\">,</span> <span class=\"n\">df_actuals</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Call RegionEstimator.get_estimations</span>\n<span class=\"c1\"># Required inputs: </span>\n<span class=\"c1\"># \tregion_id:      region identifier (string (or None to get all regions))</span>\n<span class=\"c1\"># \ttimestamp:      timestamp identifier (string (or None to get all timestamps))</span>\n<span class=\"c1\">#   print_progress  print progress (boolean, default:False)</span>\n<span class=\"c1\">#\t</span>\n<span class=\"c1\">#\tWARNING! - estimator.get_estimates(None, None) will calculate every region at every timestamp.</span>\n\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_estimations</span><span class=\"p\">(</span><span class=\"s1\">'urtica'</span><span class=\"p\">,</span> <span class=\"s1\">'AB'</span><span class=\"p\">,</span> <span class=\"s1\">'2018-08-15'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># result is a pandas dataframe, with columns:</span>\n<span class=\"c1\">#                'measurement'</span>\n<span class=\"c1\">#                'region_id'</span>\n<span class=\"c1\">#                'timestamp'</span>\n<span class=\"c1\">#                'value'  (the estimated value)</span>\n<span class=\"c1\">#                'extra_data' (extra info about estimation calculation)</span>\n</pre>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<h2>License</h2>\n<p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 7091739, "releases": {"0.1.24": [{"comment_text": "", "digests": {"md5": "e52f4090da08976571cbff838d60e407", "sha256": "fcd751fa5e493062157c8e1ff00fac3c7bed6dc406847268a1cf8fd7cba5d970"}, "downloads": -1, "filename": "region_estimators-0.1.24-py3-none-any.whl", "has_sig": false, "md5_digest": "e52f4090da08976571cbff838d60e407", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10157, "upload_time": "2020-02-21T08:40:44", "upload_time_iso_8601": "2020-02-21T08:40:44.030781Z", "url": "https://files.pythonhosted.org/packages/67/46/ecc6e402de7490bbdd7391f9e26e8b0f2a33170103a3457d2788fab8ab5a/region_estimators-0.1.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea74de5ea5a38ccc1f23988c3500f55f", "sha256": "430b22802ff4f1d6b2ae1e3217b2914351fa487d7becec7d4c934447ffa7d963"}, "downloads": -1, "filename": "region_estimators-0.1.24.tar.gz", "has_sig": false, "md5_digest": "ea74de5ea5a38ccc1f23988c3500f55f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7368, "upload_time": "2020-02-21T08:40:45", "upload_time_iso_8601": "2020-02-21T08:40:45.690051Z", "url": "https://files.pythonhosted.org/packages/5e/30/1f380fcffe60b147b387982c0119a2ed19a942b66442123de185799791dd/region_estimators-0.1.24.tar.gz", "yanked": false}], "0.1.25": [{"comment_text": "", "digests": {"md5": "05437f6888a550e00b717ca164894c64", "sha256": "4d24e2795c8709c5d477fdcfbf648e9656a3781c47513681d9ded916155905d3"}, "downloads": -1, "filename": "region_estimators-0.1.25-py3-none-any.whl", "has_sig": false, "md5_digest": "05437f6888a550e00b717ca164894c64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10184, "upload_time": "2020-04-22T11:39:58", "upload_time_iso_8601": "2020-04-22T11:39:58.249762Z", "url": "https://files.pythonhosted.org/packages/46/b8/c78e6df814cd549a71926d6b2ddd251c129797feaed93b38c1aa36eeec0b/region_estimators-0.1.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbbf26c6b8f88636bf0de44b58406239", "sha256": "3d573d2fe0f29a8b538c0229d282f4a409944197eefaf321bf3690a1a14014cd"}, "downloads": -1, "filename": "region_estimators-0.1.25.tar.gz", "has_sig": false, "md5_digest": "bbbf26c6b8f88636bf0de44b58406239", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7383, "upload_time": "2020-04-22T11:39:59", "upload_time_iso_8601": "2020-04-22T11:39:59.770347Z", "url": "https://files.pythonhosted.org/packages/ac/2b/e7ff50a68ccbed12d28a82a4ff49f2c65ddaf9d7d94a6c21769780ebf56e/region_estimators-0.1.25.tar.gz", "yanked": false}], "0.1.26": [{"comment_text": "", "digests": {"md5": "678fe237ad0054f76d4a68d4604c3e4c", "sha256": "6f0082b4e6d6a80763b06b34f9d97bb9a485c7195eb310582434779035642411"}, "downloads": -1, "filename": "region_estimators-0.1.26-py3-none-any.whl", "has_sig": false, "md5_digest": "678fe237ad0054f76d4a68d4604c3e4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10197, "upload_time": "2020-04-22T12:45:32", "upload_time_iso_8601": "2020-04-22T12:45:32.442096Z", "url": "https://files.pythonhosted.org/packages/53/5e/bd2b09ca79c83fad7fcf753e439ac30a336a8f3ce2a494c1f3e168d64c8b/region_estimators-0.1.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "002518ee88646308e4e6d08713553cd8", "sha256": "63e7256c122df8fbfee0c7e9a6a5b104c17c746d1d509534c81c69510c1fa570"}, "downloads": -1, "filename": "region_estimators-0.1.26.tar.gz", "has_sig": false, "md5_digest": "002518ee88646308e4e6d08713553cd8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7399, "upload_time": "2020-04-22T12:45:33", "upload_time_iso_8601": "2020-04-22T12:45:33.590056Z", "url": "https://files.pythonhosted.org/packages/dd/0c/15f098df5a960599373d443812ed0ec7650baaa11c307c9b892f27d6ea5c/region_estimators-0.1.26.tar.gz", "yanked": false}], "0.1.27": [{"comment_text": "", "digests": {"md5": "fbcdd3cb37fca6fb81c6569eb0e54210", "sha256": "a9cd4d61d635724fa57913bf899175c9e52fe579864192c6150340b0b322eb85"}, "downloads": -1, "filename": "region_estimators-0.1.27-py3-none-any.whl", "has_sig": false, "md5_digest": "fbcdd3cb37fca6fb81c6569eb0e54210", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10208, "upload_time": "2020-04-23T18:30:32", "upload_time_iso_8601": "2020-04-23T18:30:32.473477Z", "url": "https://files.pythonhosted.org/packages/8f/f4/a875c3486f2cef2b46be08dca11012db717b7844ff005b645d8308bfd9f8/region_estimators-0.1.27-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be5bae011ec44c9d286865e5bac8cfad", "sha256": "add0bf9de86f8295f11d9e274ce8bb89b5e6c0e517ed670bec8f9abd8210f4b1"}, "downloads": -1, "filename": "region_estimators-0.1.27.tar.gz", "has_sig": false, "md5_digest": "be5bae011ec44c9d286865e5bac8cfad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7413, "upload_time": "2020-04-23T18:30:34", "upload_time_iso_8601": "2020-04-23T18:30:34.018484Z", "url": "https://files.pythonhosted.org/packages/ac/bc/9f7225e390924eb4c0edee85f71e1449865720d2011085f3f5cce567195d/region_estimators-0.1.27.tar.gz", "yanked": false}], "0.1.28": [{"comment_text": "", "digests": {"md5": "ca8c3abd474343044c9127e35bcf060e", "sha256": "b6114d3e5db1a7ec10a4e58558e27c5e15d218db62b96b629996779c676e9044"}, "downloads": -1, "filename": "region_estimators-0.1.28-py3-none-any.whl", "has_sig": false, "md5_digest": "ca8c3abd474343044c9127e35bcf060e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10330, "upload_time": "2020-04-23T18:53:35", "upload_time_iso_8601": "2020-04-23T18:53:35.034895Z", "url": "https://files.pythonhosted.org/packages/01/69/14f7fc3be7b8d0dea53d906fc31ff0f06f68eb17c11ff0063c4b29074ab9/region_estimators-0.1.28-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "977702ef0c07ab62282a00fb047df78f", "sha256": "7bac90cb5147aff6dd398a7a6d30f520214c1a7ead27cab41609a240e9e8d07e"}, "downloads": -1, "filename": "region_estimators-0.1.28.tar.gz", "has_sig": false, "md5_digest": "977702ef0c07ab62282a00fb047df78f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7526, "upload_time": "2020-04-23T18:53:36", "upload_time_iso_8601": "2020-04-23T18:53:36.264092Z", "url": "https://files.pythonhosted.org/packages/a8/2b/e3c6bfb50d860250560c06b81023824212c9f8fad1fcd882125e596533b1/region_estimators-0.1.28.tar.gz", "yanked": false}], "0.1.29": [{"comment_text": "", "digests": {"md5": "d1a20b5b7364f8ed16d0de3811bd905f", "sha256": "48a1c263b73752ae62365b7e19325c400d495f9a80ce1bab4d238b1003ecac1a"}, "downloads": -1, "filename": "region_estimators-0.1.29-py3-none-any.whl", "has_sig": false, "md5_digest": "d1a20b5b7364f8ed16d0de3811bd905f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10333, "upload_time": "2020-04-23T18:59:26", "upload_time_iso_8601": "2020-04-23T18:59:26.203314Z", "url": "https://files.pythonhosted.org/packages/9c/1a/d74dd9be5e8249f6f84030262821f37c5f3dc80ea2fdadd049b760b8c0a1/region_estimators-0.1.29-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cac2f1aed41448aabbf4f1887228989b", "sha256": "e52c1e78f7b5b33e2970a3b248561370abea7fb0e96d7bf5b509e82fc8da8b72"}, "downloads": -1, "filename": "region_estimators-0.1.29.tar.gz", "has_sig": false, "md5_digest": "cac2f1aed41448aabbf4f1887228989b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7531, "upload_time": "2020-04-23T18:59:27", "upload_time_iso_8601": "2020-04-23T18:59:27.346241Z", "url": "https://files.pythonhosted.org/packages/f1/42/c1ab9079b0fc1f94f70fa898ab14dd5ab7928a2be4664a33e629b022727a/region_estimators-0.1.29.tar.gz", "yanked": false}], "0.1.30": [{"comment_text": "", "digests": {"md5": "066f2dbc2eef7a6c327828ca571646a9", "sha256": "030f09d5515d6b32a27260c456c7681a272aa2fdb0781e6f5f1f1a0876528483"}, "downloads": -1, "filename": "region_estimators-0.1.30-py3-none-any.whl", "has_sig": false, "md5_digest": "066f2dbc2eef7a6c327828ca571646a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10317, "upload_time": "2020-04-24T10:58:07", "upload_time_iso_8601": "2020-04-24T10:58:07.383852Z", "url": "https://files.pythonhosted.org/packages/a9/ee/31aef40ea9bd42265ac66f2806cc74316df7542b746fbd8d1cac2bba9095/region_estimators-0.1.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e0aee4849d146dda169686d7dabd429", "sha256": "e91144012947b0ae509d951fb3eddbad2657b5e06a12d2151034bf5852e88ba1"}, "downloads": -1, "filename": "region_estimators-0.1.30.tar.gz", "has_sig": false, "md5_digest": "3e0aee4849d146dda169686d7dabd429", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7517, "upload_time": "2020-04-24T10:58:08", "upload_time_iso_8601": "2020-04-24T10:58:08.556387Z", "url": "https://files.pythonhosted.org/packages/11/b8/206f286126f37f3eab661b011e1c604366be7c320cfbf5d3b62e679a83b3/region_estimators-0.1.30.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "066f2dbc2eef7a6c327828ca571646a9", "sha256": "030f09d5515d6b32a27260c456c7681a272aa2fdb0781e6f5f1f1a0876528483"}, "downloads": -1, "filename": "region_estimators-0.1.30-py3-none-any.whl", "has_sig": false, "md5_digest": "066f2dbc2eef7a6c327828ca571646a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10317, "upload_time": "2020-04-24T10:58:07", "upload_time_iso_8601": "2020-04-24T10:58:07.383852Z", "url": "https://files.pythonhosted.org/packages/a9/ee/31aef40ea9bd42265ac66f2806cc74316df7542b746fbd8d1cac2bba9095/region_estimators-0.1.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e0aee4849d146dda169686d7dabd429", "sha256": "e91144012947b0ae509d951fb3eddbad2657b5e06a12d2151034bf5852e88ba1"}, "downloads": -1, "filename": "region_estimators-0.1.30.tar.gz", "has_sig": false, "md5_digest": "3e0aee4849d146dda169686d7dabd429", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7517, "upload_time": "2020-04-24T10:58:08", "upload_time_iso_8601": "2020-04-24T10:58:08.556387Z", "url": "https://files.pythonhosted.org/packages/11/b8/206f286126f37f3eab661b011e1c604366be7c320cfbf5d3b62e679a83b3/region_estimators-0.1.30.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:12 2020"}