{"info": {"author": "Abdelkrime Aries", "author_email": "kariminfo0@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# Shajara\n\n<img align=\"left\" src=\"assets/shajara-logo.svg\" width=\"100\" height=\"100\">\n**Shajara** means \"Tree\" in Arabic.\nIt is a project for manipulating trees.\nThere is a tree, there is a node and there is node processor.\n\n[![Project](https://img.shields.io/badge/Project-Shajara-0BDA51.svg?style=plastic)](https://kariminf.github.io/shajara/)\n[![License](https://img.shields.io/badge/License-MIT-0BDA51.svg?style=plastic)](https://opensource.org/licenses/MIT)\n[![PyPI](https://img.shields.io/pypi/v/shajara.svg?style=plastic)](https://pypi.python.org/pypi/shajara)\n[![Downloads](https://img.shields.io/pypi/dm/shajara.svg?style=plastic)](https://pypi.org/project/shajara/)\n[![Python version](https://img.shields.io/pypi/pyversions/shajara.svg?style=plastic)](https://pypi.org/project/shajara/)\n[![Documentation Status](https://readthedocs.org/projects/shajara/badge/?version=latest)](https://shajara.readthedocs.io/en/latest/?badge=latest)\n[![Travis](https://img.shields.io/travis/kariminf/shajara.svg?style=plastic)](https://travis-ci.org/kariminf/shajara)\n[![Codecov](https://img.shields.io/codecov/c/github/kariminf/shajara.svg?style=plastic)](https://codecov.io/gh/kariminf/shajara)\n[![CodeFactor](https://www.codefactor.io/repository/github/kariminf/shajara/badge/master)](https://www.codefactor.io/repository/github/kariminf/shajara/overview/master)\n[![codebeat badge](https://codebeat.co/badges/9ea7f2f7-58cb-4df9-b4b7-33d33aee07aa)](https://codebeat.co/projects/github-com-kariminf-shajara-master)\n[![Code Climate](https://img.shields.io/codeclimate/maintainability-percentage/kariminf/shajara.svg?style=plastic)](https://codeclimate.com/github/kariminf/shajara/)\n<br clear=\"left\"/>\n\n## Description\n\nA tree has one node which represents its root.\nEach node has a label, a value and many children.\nThe arc from the parent to the child is labeled.\n\n\n## Create a tree\n\n### Using shajara API\n\n```python\nfrom shajara import Tree, Node\n\n#create a tree with a root labeled \"a\"\nt = Tree(Node(label=\"a\"))\n# add childrend \"b\", \"c\" and \"d\" to \"a\"\nt.add_child(\"ab\", Node(label=\"b\")).add_child(\"ac\", Node(label=\"c\")).add_child(\"ad\", Node(label=\"d\"))\n# go to child \"b\" and add to it children \"e\" and \"f\"\nt.select_child(\"ab\").add_child(\"be\", Node(label=\"e\")).add_child(\"bf\", Node(label=\"f\"))\n# go up to \"a\", go to child \"d\" and add to it children \"g\" and \"h\"\nt.up().select_child(\"ad\").add_child(\"dg\", Node(label=\"g\")).add_child(\"dh\", Node(label=\"h\"))\n```\n\n![](assets/readme/shajara_api.png)\n\n### Using a dict representation\n\n```python\nfrom shajara.create import GenerateProcessor\nfrom shajara import Tree\n\n# the tree representation : the arcs must be labeled\nrep = {\n    \"label\": \"a\",\n    \"children\": {\n        \"ab\": {\n            \"label\": \"b\",\n            \"children\": {\n                \"be\": {\"label\": \"e\"},\n                \"bf\": {\"label\": \"f\"}\n            }\n        },\n        \"ac\": {\"label\": \"c\"},\n        \"ad\": {\"label\": \"d\"}\n    }\n}\n\n# Create a generator to this representation\ngenerator = GenerateProcessor(rep)\n#create an ampty tree (acrually the root exists without a label or a value)\nt = Tree()\n#fill the tree using the generator\nt.process(processor=generator)\n```\n\n![](assets/readme/generate_api.png)\n\n## Visualize a tree\n\nDOT description of a tree for Graphviz can be generated using **GraphvizProcessor**\n\n```python\nfrom shajara.plot import graphviz_processor\n\n# create the tree t using one of the methods above\n...\n#process the tree using graphviz_processor, which returns a DOT description (string)\ngraph = t.process(processor=graphviz_processor)\n\n# save the description in a file with extension .dot\nf = open(\"graphviz.dot\", \"w\")\nf.write(graph)\nf.close()\n\n```\n\n## Binary search trees (not balanced)\n\n### Create unbalanced binary search trees\n\n```python\nfrom shajara import Tree, Node\nfrom shajara.search.binary import binary_adder\n\nvalues = [5, 9, 2, 11, 3, 7, 2]\nlabels = [\"five\", \"nine\", \"two\", \"eleven\", \"three\", \"seven\", \"two_again\"]\n\nt = Tree()\n\nfor i in range(len(values)):\n    binary_adder.set_parameters(Node(value=values[i], label=labels[i]))\n    t.process(processor=binary_adder)\n\n```\n\n![](assets/readme/bsearch_api.png)\n\n### Search a value\n\n```python\nfrom shajara.search.binary import binary_searcher\n\n# create a tree t with a binary creator\n...\n\nsearch = [4, 5, 8, 10, 12]\n\nfor i in search:\n    binary_searcher.set_parameters(value=i)\n    rel, node = t.process(processor=binary_searcher)\n    if rel == \"=\" :\n        print (str(i) + \" is \" + node.label)\n    elif rel ==\"<\" :\n        print (str(i) + \" not found. It must be after \" + str(node.value))\n    else:\n        print (str(i) + \" not found. It must be before \" + str(node.value))\n\n```\nThe result :\n![](assets/readme/bsearch_api_res.png)\n\n### Search the max and the min\n\n```python\nfrom shajara.search.binary import binary_opti_searcher\n\n# create a tree t with a binary creator\n...\n\nbinary_opti_searcher.set_parameters(search=\"min\")\nmin_node = t.process(processor=binary_opti_searcher)\nprint(\"The minimum is \" + str(min_node.value))\n\nbinary_opti_searcher.set_parameters(search=\"max\")\nmax_node = t.process(processor=binary_opti_searcher)\nprint(\"The maximum is \" + str(max_node.value))\n\n```\nThe result :\n![](assets/readme/boptisearch_api_res.png)\n\n## Trie\n\n### Create a trie\n\n```python\nfrom shajara.search.trie import trie_adder\n\nstrings = [\"to\", \"ten\", \"inn\", \"in\", \"tea\", \"A\"]\n\nt = Tree()\nfor string in strings:\n    trie_adder.set_parameters(string)\n    t.process(processor=trie_adder)\n```\n\n![](assets/readme/trie_api.png)\n\n### Search a word in the trie\n\n```python\nfrom shajara.search.trie import trie_searcher\n\n# create a trie t\n...\n\nsearch = [\"tell\", \"tea\", \"inner\"]\nfor string in search:\n    trie_searcher.set_parameters(string)\n    found, node = t.process(processor=trie_searcher)\n    is_word = \"\"\n    if not node.value:\n        is_word = \" (not in dictionary)\"\n    print(\"searching: \" + string + \", found: \" + found + is_word)\n```\nThe result :\n![](assets/readme/trie_api_res.png)\n\n## License\n\nMIT License\n\nCopyright (c) 2020 Abdelkrime Aries", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kariminf/shajara", "keywords": "trees", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "shajara", "package_url": "https://pypi.org/project/shajara/", "platform": "", "project_url": "https://pypi.org/project/shajara/", "project_urls": {"Homepage": "https://github.com/kariminf/shajara"}, "release_url": "https://pypi.org/project/shajara/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Manupilating trees", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Shajara</h1>\n<img align=\"left\" height=\"100\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb10e206deb41b6c7c1190b4d2cd9c8f0e428e29/6173736574732f7368616a6172612d6c6f676f2e737667\" width=\"100\">\n**Shajara** means \"Tree\" in Arabic.\nIt is a project for manipulating trees.\nThere is a tree, there is a node and there is node processor.\n<p><a href=\"https://kariminf.github.io/shajara/\" rel=\"nofollow\"><img alt=\"Project\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/406ee1b3c873ea241fadcb669c902179cf55a242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50726f6a6563742d5368616a6172612d3042444135312e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd7e4b2d59180e35ec1e8e8398018d87084f2245/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d3042444135312e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://pypi.python.org/pypi/shajara\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a5c997e9c4a5c286d271e1e2d781848a11454c2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7368616a6172612e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://pypi.org/project/shajara/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/218659e9c311231fc7f62df8149bdb7ce38719c6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7368616a6172612e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://pypi.org/project/shajara/\" rel=\"nofollow\"><img alt=\"Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a0759d19fb904fdd64a9074177aae47ab4accf8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7368616a6172612e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://shajara.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0eeb0df5049255187fe3afc854b05135d437c1e8/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7368616a6172612f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/kariminf/shajara\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/043f1944921fa7d199cf3f8541ce56d6608fa546/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6b6172696d696e662f7368616a6172612e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://codecov.io/gh/kariminf/shajara\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/860a0a98e567c3d6ac61a871915e0706afca06ec/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6b6172696d696e662f7368616a6172612e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://www.codefactor.io/repository/github/kariminf/shajara/overview/master\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de675556189264034bb8b65248ed9b48c4511f23/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6b6172696d696e662f7368616a6172612f62616467652f6d6173746572\"></a>\n<a href=\"https://codebeat.co/projects/github-com-kariminf-shajara-master\" rel=\"nofollow\"><img alt=\"codebeat badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37436f1b32e32976b422358f3c05375067ae31b3/68747470733a2f2f636f6465626561742e636f2f6261646765732f39656137663266372d353863622d346466392d623462372d333364333361656530376161\"></a>\n<a href=\"https://codeclimate.com/github/kariminf/shajara/\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a3dee14c6988a92d0e72b004c2fcd606bfac341/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6d61696e7461696e6162696c6974792d70657263656e746167652f6b6172696d696e662f7368616a6172612e7376673f7374796c653d706c6173746963\"></a>\n<br></p>\n<h2>Description</h2>\n<p>A tree has one node which represents its root.\nEach node has a label, a value and many children.\nThe arc from the parent to the child is labeled.</p>\n<h2>Create a tree</h2>\n<h3>Using shajara API</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shajara</span> <span class=\"kn\">import</span> <span class=\"n\">Tree</span><span class=\"p\">,</span> <span class=\"n\">Node</span>\n\n<span class=\"c1\">#create a tree with a root labeled \"a\"</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"a\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># add childrend \"b\", \"c\" and \"d\" to \"a\"</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"s2\">\"ab\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"b\"</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"s2\">\"ac\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"c\"</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"s2\">\"ad\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"d\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># go to child \"b\" and add to it children \"e\" and \"f\"</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">select_child</span><span class=\"p\">(</span><span class=\"s2\">\"ab\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"s2\">\"be\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"e\"</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"s2\">\"bf\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"f\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># go up to \"a\", go to child \"d\" and add to it children \"g\" and \"h\"</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">select_child</span><span class=\"p\">(</span><span class=\"s2\">\"ad\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"s2\">\"dg\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"g\"</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"s2\">\"dh\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"h\"</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4feda82a9e80440f6462571ce311866be1e4c60/6173736574732f726561646d652f7368616a6172615f6170692e706e67\"></p>\n<h3>Using a dict representation</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shajara.create</span> <span class=\"kn\">import</span> <span class=\"n\">GenerateProcessor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shajara</span> <span class=\"kn\">import</span> <span class=\"n\">Tree</span>\n\n<span class=\"c1\"># the tree representation : the arcs must be labeled</span>\n<span class=\"n\">rep</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"label\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"children\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"ab\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"label\"</span><span class=\"p\">:</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"children\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"be\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"label\"</span><span class=\"p\">:</span> <span class=\"s2\">\"e\"</span><span class=\"p\">},</span>\n                <span class=\"s2\">\"bf\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"label\"</span><span class=\"p\">:</span> <span class=\"s2\">\"f\"</span><span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"ac\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"label\"</span><span class=\"p\">:</span> <span class=\"s2\">\"c\"</span><span class=\"p\">},</span>\n        <span class=\"s2\">\"ad\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"label\"</span><span class=\"p\">:</span> <span class=\"s2\">\"d\"</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Create a generator to this representation</span>\n<span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">GenerateProcessor</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">)</span>\n<span class=\"c1\">#create an ampty tree (acrually the root exists without a label or a value)</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"p\">()</span>\n<span class=\"c1\">#fill the tree using the generator</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">generator</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ff348f1a5e5967f40c60f9613e680513ff38964/6173736574732f726561646d652f67656e65726174655f6170692e706e67\"></p>\n<h2>Visualize a tree</h2>\n<p>DOT description of a tree for Graphviz can be generated using <strong>GraphvizProcessor</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shajara.plot</span> <span class=\"kn\">import</span> <span class=\"n\">graphviz_processor</span>\n\n<span class=\"c1\"># create the tree t using one of the methods above</span>\n<span class=\"o\">...</span>\n<span class=\"c1\">#process the tree using graphviz_processor, which returns a DOT description (string)</span>\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">graphviz_processor</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># save the description in a file with extension .dot</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"graphviz.dot\"</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Binary search trees (not balanced)</h2>\n<h3>Create unbalanced binary search trees</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shajara</span> <span class=\"kn\">import</span> <span class=\"n\">Tree</span><span class=\"p\">,</span> <span class=\"n\">Node</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shajara.search.binary</span> <span class=\"kn\">import</span> <span class=\"n\">binary_adder</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"five\"</span><span class=\"p\">,</span> <span class=\"s2\">\"nine\"</span><span class=\"p\">,</span> <span class=\"s2\">\"two\"</span><span class=\"p\">,</span> <span class=\"s2\">\"eleven\"</span><span class=\"p\">,</span> <span class=\"s2\">\"three\"</span><span class=\"p\">,</span> <span class=\"s2\">\"seven\"</span><span class=\"p\">,</span> <span class=\"s2\">\"two_again\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)):</span>\n    <span class=\"n\">binary_adder</span><span class=\"o\">.</span><span class=\"n\">set_parameters</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">binary_adder</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed3ab36330afe55d0cb73ed53cc2ed929282b399/6173736574732f726561646d652f627365617263685f6170692e706e67\"></p>\n<h3>Search a value</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shajara.search.binary</span> <span class=\"kn\">import</span> <span class=\"n\">binary_searcher</span>\n\n<span class=\"c1\"># create a tree t with a binary creator</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">search</span><span class=\"p\">:</span>\n    <span class=\"n\">binary_searcher</span><span class=\"o\">.</span><span class=\"n\">set_parameters</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">rel</span><span class=\"p\">,</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">binary_searcher</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">rel</span> <span class=\"o\">==</span> <span class=\"s2\">\"=\"</span> <span class=\"p\">:</span>\n        <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\" is \"</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">rel</span> <span class=\"o\">==</span><span class=\"s2\">\"&lt;\"</span> <span class=\"p\">:</span>\n        <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\" not found. It must be after \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\" not found. It must be before \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n</pre>\n<p>The result :\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2300ae9602e3d7061794dd87deb8fa72c94bb818/6173736574732f726561646d652f627365617263685f6170695f7265732e706e67\"></p>\n<h3>Search the max and the min</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shajara.search.binary</span> <span class=\"kn\">import</span> <span class=\"n\">binary_opti_searcher</span>\n\n<span class=\"c1\"># create a tree t with a binary creator</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">binary_opti_searcher</span><span class=\"o\">.</span><span class=\"n\">set_parameters</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">=</span><span class=\"s2\">\"min\"</span><span class=\"p\">)</span>\n<span class=\"n\">min_node</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">binary_opti_searcher</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The minimum is \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">min_node</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n<span class=\"n\">binary_opti_searcher</span><span class=\"o\">.</span><span class=\"n\">set_parameters</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">=</span><span class=\"s2\">\"max\"</span><span class=\"p\">)</span>\n<span class=\"n\">max_node</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">binary_opti_searcher</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The maximum is \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">max_node</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n</pre>\n<p>The result :\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c4caa7e7c178a247adf002e78c34b55d64016ca/6173736574732f726561646d652f626f7074697365617263685f6170695f7265732e706e67\"></p>\n<h2>Trie</h2>\n<h3>Create a trie</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shajara.search.trie</span> <span class=\"kn\">import</span> <span class=\"n\">trie_adder</span>\n\n<span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"to\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ten\"</span><span class=\"p\">,</span> <span class=\"s2\">\"inn\"</span><span class=\"p\">,</span> <span class=\"s2\">\"in\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tea\"</span><span class=\"p\">,</span> <span class=\"s2\">\"A\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">string</span> <span class=\"ow\">in</span> <span class=\"n\">strings</span><span class=\"p\">:</span>\n    <span class=\"n\">trie_adder</span><span class=\"o\">.</span><span class=\"n\">set_parameters</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">trie_adder</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5fc5c0383ba4795e6e7e8130e20f27b629d5dbdb/6173736574732f726561646d652f747269655f6170692e706e67\"></p>\n<h3>Search a word in the trie</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shajara.search.trie</span> <span class=\"kn\">import</span> <span class=\"n\">trie_searcher</span>\n\n<span class=\"c1\"># create a trie t</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"tell\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tea\"</span><span class=\"p\">,</span> <span class=\"s2\">\"inner\"</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">string</span> <span class=\"ow\">in</span> <span class=\"n\">search</span><span class=\"p\">:</span>\n    <span class=\"n\">trie_searcher</span><span class=\"o\">.</span><span class=\"n\">set_parameters</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n    <span class=\"n\">found</span><span class=\"p\">,</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">trie_searcher</span><span class=\"p\">)</span>\n    <span class=\"n\">is_word</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">:</span>\n        <span class=\"n\">is_word</span> <span class=\"o\">=</span> <span class=\"s2\">\" (not in dictionary)\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"searching: \"</span> <span class=\"o\">+</span> <span class=\"n\">string</span> <span class=\"o\">+</span> <span class=\"s2\">\", found: \"</span> <span class=\"o\">+</span> <span class=\"n\">found</span> <span class=\"o\">+</span> <span class=\"n\">is_word</span><span class=\"p\">)</span>\n</pre>\n<p>The result :\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/930e43a0e07509be96246e36d1cd96b1b8494ad0/6173736574732f726561646d652f747269655f6170695f7265732e706e67\"></p>\n<h2>License</h2>\n<p>MIT License</p>\n<p>Copyright (c) 2020 Abdelkrime Aries</p>\n\n          </div>"}, "last_serial": 7060121, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7500367c8ae1cf291319713f15a6aef9", "sha256": "0cee6e081160e71fea33885d17a56f1b291d68f9ade85f109eab3fae22870640"}, "downloads": -1, "filename": "shajara-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7500367c8ae1cf291319713f15a6aef9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5277, "upload_time": "2020-04-19T21:19:00", "upload_time_iso_8601": "2020-04-19T21:19:00.369764Z", "url": "https://files.pythonhosted.org/packages/1c/11/26b10c3d22f07fccf537399fdcc841b74b21248d8c259bab7628ee22d929/shajara-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4df3bb389b835934ca8ae1a51ab72eb6", "sha256": "d9677fd3a11a290a1110053272ac526eec833eb686c4c9f5084e9627b3940af6"}, "downloads": -1, "filename": "shajara-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4df3bb389b835934ca8ae1a51ab72eb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5606, "upload_time": "2020-04-20T13:32:15", "upload_time_iso_8601": "2020-04-20T13:32:15.330857Z", "url": "https://files.pythonhosted.org/packages/dd/ca/d80258595e3f70ca532fd4a7b300fc57fa51b663ef381e6e540cc2f907f6/shajara-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4df3bb389b835934ca8ae1a51ab72eb6", "sha256": "d9677fd3a11a290a1110053272ac526eec833eb686c4c9f5084e9627b3940af6"}, "downloads": -1, "filename": "shajara-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4df3bb389b835934ca8ae1a51ab72eb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5606, "upload_time": "2020-04-20T13:32:15", "upload_time_iso_8601": "2020-04-20T13:32:15.330857Z", "url": "https://files.pythonhosted.org/packages/dd/ca/d80258595e3f70ca532fd4a7b300fc57fa51b663ef381e6e540cc2f907f6/shajara-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:52 2020"}