{"info": {"author": "Takeflight", "author_email": "developers@takeflight.com.au", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "wagtailvideos\n=============\n\nBased on wagtailimages. The aim was to have feature parity with images\nbut for html5 videos. Includes the ability to transcode videos to a\nhtml5 compliant codec using ffmpeg.\n\nRequirements\n------------\n\n-  Wagtail >= 2.0\n-  `ffmpeg <https://ffmpeg.org/>`__\n\nInstalling\n----------\n\nInstall using pypi\n\n.. code:: bash\n\n    pip install wagtail-videos\n\n\nUsing\n-----\n\nOn a page model:\n~~~~~~~~~~~~~~~~\n\nImplement as a ``ForeignKey`` relation, same as wagtailimages.\n\n.. code:: python\n\n\n    from django.db import models\n\n    from wagtail.wagtailadmin.edit_handlers import FieldPanel\n    from wagtail.wagtailcore.fields import RichTextField\n    from wagtail.wagtailcore.models import Page\n\n    from wagtailvideos.edit_handlers import VideoChooserPanel\n\n    class HomePage(Page):\n        body = RichtextField()\n        header_video = models.ForeignKey('wagtailvideos.Video',\n                                         related_name='+',\n                                         null=True,\n                                         on_delete=models.SET_NULL)\n\n        content_panels = Page.content_panels + [\n            FieldPanel('body'),\n            VideoChooserPanel('header_video'),\n        ]\n\nIn template:\n~~~~~~~~~~~~\n\nThe video template tag takes one required postitional argument, a video\nfield. All extra attributes are added to the surrounding ``<video>``\ntag. The original video and all extra transcodes are added as\n``<source>`` tags.\n\n.. code:: django\n\n    {% load wagtailvideos_tags %}\n    {% video self.header_video autoplay controls width=256 %}\n\nHow to transcode using ffmpeg:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUsing the video collection manager from the left hand menu. In the video\nediting section you can see the available transcodes and a form that can\nbe used to create new transcodes. It is assumed that your compiled\nversion of ffmpeg has the matching codec libraries required for the\ntranscode.\n\nFuture features\n---------------\n\n-  Richtext embed\n-  Streamfield block\n-  Transcoding via amazon service rather than ffmpeg\n-  Wagtail homescreen video count\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/flytrap/wagtailvideos", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "wagtail-videos", "package_url": "https://pypi.org/project/wagtail-videos/", "platform": "", "project_url": "https://pypi.org/project/wagtail-videos/", "project_urls": {"Homepage": "https://github.com/flytrap/wagtailvideos"}, "release_url": "https://pypi.org/project/wagtail-videos/2.1.0/", "requires_dist": null, "requires_python": "", "summary": "A wagtail module for uploading and displaying videos in various codecs.", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Based on wagtailimages. The aim was to have feature parity with images\nbut for html5 videos. Includes the ability to transcode videos to a\nhtml5 compliant codec using ffmpeg.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Wagtail &gt;= 2.0</li>\n<li><a href=\"https://ffmpeg.org/\" rel=\"nofollow\">ffmpeg</a></li>\n</ul>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install using pypi</p>\n<pre>pip install wagtail-videos\n</pre>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<div id=\"on-a-page-model\">\n<h3>On a page model:</h3>\n<p>Implement as a <tt>ForeignKey</tt> relation, same as wagtailimages.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailadmin.edit_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">FieldPanel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailcore.fields</span> <span class=\"kn\">import</span> <span class=\"n\">RichTextField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailcore.models</span> <span class=\"kn\">import</span> <span class=\"n\">Page</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wagtailvideos.edit_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">VideoChooserPanel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HomePage</span><span class=\"p\">(</span><span class=\"n\">Page</span><span class=\"p\">):</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">RichtextField</span><span class=\"p\">()</span>\n    <span class=\"n\">header_video</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'wagtailvideos.Video'</span><span class=\"p\">,</span>\n                                     <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'+'</span><span class=\"p\">,</span>\n                                     <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                     <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SET_NULL</span><span class=\"p\">)</span>\n\n    <span class=\"n\">content_panels</span> <span class=\"o\">=</span> <span class=\"n\">Page</span><span class=\"o\">.</span><span class=\"n\">content_panels</span> <span class=\"o\">+</span> <span class=\"p\">[</span>\n        <span class=\"n\">FieldPanel</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">),</span>\n        <span class=\"n\">VideoChooserPanel</span><span class=\"p\">(</span><span class=\"s1\">'header_video'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"in-template\">\n<h3>In template:</h3>\n<p>The video template tag takes one required postitional argument, a video\nfield. All extra attributes are added to the surrounding <tt>&lt;video&gt;</tt>\ntag. The original video and all extra transcodes are added as\n<tt>&lt;source&gt;</tt> tags.</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">wagtailvideos_tags</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">video</span> <span class=\"nv\">self.header_video</span> <span class=\"nv\">autoplay</span> <span class=\"nv\">controls</span> <span class=\"nv\">width</span><span class=\"o\">=</span><span class=\"m\">256</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n<div id=\"how-to-transcode-using-ffmpeg\">\n<h3>How to transcode using ffmpeg:</h3>\n<p>Using the video collection manager from the left hand menu. In the video\nediting section you can see the available transcodes and a form that can\nbe used to create new transcodes. It is assumed that your compiled\nversion of ffmpeg has the matching codec libraries required for the\ntranscode.</p>\n</div>\n</div>\n<div id=\"future-features\">\n<h2>Future features</h2>\n<ul>\n<li>Richtext embed</li>\n<li>Streamfield block</li>\n<li>Transcoding via amazon service rather than ffmpeg</li>\n<li>Wagtail homescreen video count</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5187899, "releases": {"2.1.0": [{"comment_text": "", "digests": {"md5": "355345f2eaf3ed4d243bd13310329310", "sha256": "c171ee13102f7e820d855ccb67f685e4b5de9110073c7c8c8e4ef7f67f1ea00f"}, "downloads": -1, "filename": "wagtail-videos-2.1.0.tar.gz", "has_sig": false, "md5_digest": "355345f2eaf3ed4d243bd13310329310", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33002, "upload_time": "2019-04-25T13:00:23", "upload_time_iso_8601": "2019-04-25T13:00:23.722888Z", "url": "https://files.pythonhosted.org/packages/35/df/46fd8b6b49092cd7f1382748c21e694532e321c4d5546916d17076f60d7b/wagtail-videos-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "355345f2eaf3ed4d243bd13310329310", "sha256": "c171ee13102f7e820d855ccb67f685e4b5de9110073c7c8c8e4ef7f67f1ea00f"}, "downloads": -1, "filename": "wagtail-videos-2.1.0.tar.gz", "has_sig": false, "md5_digest": "355345f2eaf3ed4d243bd13310329310", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33002, "upload_time": "2019-04-25T13:00:23", "upload_time_iso_8601": "2019-04-25T13:00:23.722888Z", "url": "https://files.pythonhosted.org/packages/35/df/46fd8b6b49092cd7f1382748c21e694532e321c4d5546916d17076f60d7b/wagtail-videos-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:48 2020"}