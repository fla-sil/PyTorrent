{"info": {"author": "Mart\u00edn Gait\u00e1n", "author_email": "gaitan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "# move-imports\n\nA script to move imports to the top of the module. Suppose a module with inline import like this\n\n```python\nimport requests\nfrom math import sin\nimport datetime as dt\n\nBASE_SCENARIO = \"\"\"\n    ##########\n    # Accounts\n\n\"\"\"\n\ndef foo():\n    from math import (\n        sin, cos as cos_\n    )\n    return sin(1), cos_(0)\n\n\ndef bar():\n    from math import tan\n    return tan(1)\n```\n\nExecuting\n\n```\n$ move-imports path/to_refactor.py --isort --rewrite\n```\n\nwill produce\n\n```python\nimport datetime as dt\nfrom math import cos as cos_, sin, tan\n\nimport requests\n\nBASE_SCENARIO = \"\"\"\n    ##########\n    # Accounts\n\n\"\"\"\n\ndef foo():\n    return sin(1), cos_(0)\n\n\ndef bar():\n    return tan(1)\n```\n\n## Install\n\n```\n$ pip --user install move-imports\n```\n\nor the development version, directly from the git repo\n\n```\n$ pip --user install git+https://github.com/mgaitan/move-imports\n```\n\nIf you want apply `--isort` for postprocessing, install it\n\n```\n$ pip --user install isort\n```\n\n## Skip cases\n\nTo keep an inline import you could add a comment in the same line or above\nthe stament with \"avoid circular import\" or \"noqa\".\n\n```python\n\n  def foo():\n    # avoid circular import\n    import baz\n```\n\n```python\n\n  def foo():\n    import baz  # noqa\n```\n\n\n## Incremental refactoring\n\nSometimes inline imports statements are there for a reason. Circular imports, optional dependendencies, etc.\n\nTo manage this, it's useful to go step by step, checking a changed module\nis ok before to move to the next one.\n\nWith a combination of `--start-from-last` and `--limit-to LIMIT_TO`\narguments you could incrementally refactor a whole package.\n\nFor instance, calling repeteadly the following command\n\n```\n$ move-imports --isort --rewrite --start-from-last --limit-to=1 tests/billing/**/*.py\n```\n\nwill recursively traverse `tests/billing/` refactoring one module at a time. Thus, the worflow would be:\n\n- run,\n- test,\n- optionally revert and skip problematic imports or modify manually\n- repeat\n\n\n## Running tests\n\nClone the repo and install pytest\n\n```\n$ pytest\n```\n\n\n## Command line interface\n\n```\n$ move-imports --help\nusage: move-imports [-h] [--start-from-last] [--limit-to LIMIT_TO] [--debug]\n                    [--rewrite] [--isort]\n                    [paths [paths ...]]\n\npositional arguments:\n  paths                Path/s to refactor. Glob supported enclosed in quotes\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --start-from-last    Incremental refactor\n  --limit-to LIMIT_TO  Stop processing after N files. Use with --start-from-\n                       last\n  --debug              Make verbose output\n  --rewrite            write the result to source's path\n  --isort              apply isort\n```\n\n## Acknowledgement\n\nThanks to [Shiphero](https://shiphero.com) for give me the time to do this.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mgaitan/move-imports", "keywords": "ast,refactor", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "move-imports", "package_url": "https://pypi.org/project/move-imports/", "platform": "", "project_url": "https://pypi.org/project/move-imports/", "project_urls": {"Homepage": "https://github.com/mgaitan/move-imports"}, "release_url": "https://pypi.org/project/move-imports/0.3/", "requires_dist": ["isort ; extra == 'isort'"], "requires_python": "", "summary": "Refactor modules to move import statements to the header", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>move-imports</h1>\n<p>A script to move imports to the top of the module. Suppose a module with inline import like this</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sin</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n\n<span class=\"n\">BASE_SCENARIO</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    ##########</span>\n<span class=\"s2\">    # Accounts</span>\n\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n        <span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"n\">cos</span> <span class=\"k\">as</span> <span class=\"n\">cos_</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">cos_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">tan</span>\n    <span class=\"k\">return</span> <span class=\"n\">tan</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Executing</p>\n<pre><code>$ move-imports path/to_refactor.py --isort --rewrite\n</code></pre>\n<p>will produce</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">cos</span> <span class=\"k\">as</span> <span class=\"n\">cos_</span><span class=\"p\">,</span> <span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"n\">tan</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"n\">BASE_SCENARIO</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    ##########</span>\n<span class=\"s2\">    # Accounts</span>\n\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">cos_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">tan</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>Install</h2>\n<pre><code>$ pip --user install move-imports\n</code></pre>\n<p>or the development version, directly from the git repo</p>\n<pre><code>$ pip --user install git+https://github.com/mgaitan/move-imports\n</code></pre>\n<p>If you want apply <code>--isort</code> for postprocessing, install it</p>\n<pre><code>$ pip --user install isort\n</code></pre>\n<h2>Skip cases</h2>\n<p>To keep an inline import you could add a comment in the same line or above\nthe stament with \"avoid circular import\" or \"noqa\".</p>\n<pre>  <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"c1\"># avoid circular import</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">baz</span>\n</pre>\n<pre>  <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">baz</span>  <span class=\"c1\"># noqa</span>\n</pre>\n<h2>Incremental refactoring</h2>\n<p>Sometimes inline imports statements are there for a reason. Circular imports, optional dependendencies, etc.</p>\n<p>To manage this, it's useful to go step by step, checking a changed module\nis ok before to move to the next one.</p>\n<p>With a combination of <code>--start-from-last</code> and <code>--limit-to LIMIT_TO</code>\narguments you could incrementally refactor a whole package.</p>\n<p>For instance, calling repeteadly the following command</p>\n<pre><code>$ move-imports --isort --rewrite --start-from-last --limit-to=1 tests/billing/**/*.py\n</code></pre>\n<p>will recursively traverse <code>tests/billing/</code> refactoring one module at a time. Thus, the worflow would be:</p>\n<ul>\n<li>run,</li>\n<li>test,</li>\n<li>optionally revert and skip problematic imports or modify manually</li>\n<li>repeat</li>\n</ul>\n<h2>Running tests</h2>\n<p>Clone the repo and install pytest</p>\n<pre><code>$ pytest\n</code></pre>\n<h2>Command line interface</h2>\n<pre><code>$ move-imports --help\nusage: move-imports [-h] [--start-from-last] [--limit-to LIMIT_TO] [--debug]\n                    [--rewrite] [--isort]\n                    [paths [paths ...]]\n\npositional arguments:\n  paths                Path/s to refactor. Glob supported enclosed in quotes\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --start-from-last    Incremental refactor\n  --limit-to LIMIT_TO  Stop processing after N files. Use with --start-from-\n                       last\n  --debug              Make verbose output\n  --rewrite            write the result to source's path\n  --isort              apply isort\n</code></pre>\n<h2>Acknowledgement</h2>\n<p>Thanks to <a href=\"https://shiphero.com\" rel=\"nofollow\">Shiphero</a> for give me the time to do this.</p>\n\n          </div>"}, "last_serial": 7180365, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "c498d78b9fb9abbd0e3886dc198c26d5", "sha256": "df49a92894879a31ddf58892e9f91adfc894306767d50ee73dfa9b7ecc25b29c"}, "downloads": -1, "filename": "move_imports-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c498d78b9fb9abbd0e3886dc198c26d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5706, "upload_time": "2020-05-04T16:46:54", "upload_time_iso_8601": "2020-05-04T16:46:54.571392Z", "url": "https://files.pythonhosted.org/packages/16/db/c0b1e363ed4b0831fac4da57b88e46b91a0bd8460047fe8d0b2dc6f8e6db/move_imports-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "fff2464f2b5839a89542a2ba73277dce", "sha256": "7ceb199943acef6d2bc5059fa21517d97ab157cdff997df700fe2955227f0d27"}, "downloads": -1, "filename": "move_imports-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fff2464f2b5839a89542a2ba73277dce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5741, "upload_time": "2020-05-06T13:42:54", "upload_time_iso_8601": "2020-05-06T13:42:54.690672Z", "url": "https://files.pythonhosted.org/packages/e4/2b/1cc954dc0823b693261eca1e8cfd20d5e197d609b8a84ae0b791caaf3edb/move_imports-0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fff2464f2b5839a89542a2ba73277dce", "sha256": "7ceb199943acef6d2bc5059fa21517d97ab157cdff997df700fe2955227f0d27"}, "downloads": -1, "filename": "move_imports-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fff2464f2b5839a89542a2ba73277dce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5741, "upload_time": "2020-05-06T13:42:54", "upload_time_iso_8601": "2020-05-06T13:42:54.690672Z", "url": "https://files.pythonhosted.org/packages/e4/2b/1cc954dc0823b693261eca1e8cfd20d5e197d609b8a84ae0b791caaf3edb/move_imports-0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:29 2020"}