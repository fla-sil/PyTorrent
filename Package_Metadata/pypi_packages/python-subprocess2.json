{"info": {"author": "Tim Savannah", "author_email": "kata198@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: System"], "description": "python-subprocess2\n==================\n\nExtensions on the python subprocess module. Importing subprocess2 will extend the global \"subprocess\" module (only additions, no modifications, so it's safe).\n\nYou can also import and use subprocess2 instead of the subprocess module. Doing a global extension allows your application or library to utilize the extensions without requiring modification of other codebases. In example, if you have a library that is opening a pipe and passing it to your application, it does not need to be modified for you to use the additional Popen methods on the object you received.\n\n\nSimply installing the subprocess2 module does not do anything to the parent subprocess module, until it has been imported, and then only additions are made.\n\n\n\n\nPyDoc Reference\n---------------\n\nPyDoc Reference for extended subprocess modules can be found at: http://htmlpreview.github.io/?https://github.com/kata198/python-subprocess2/blob/master/doc/subprocess2.html\n\n\n\n\n\nPopen\n=====\n\nAdditions to Popen class:\n\n\n\n\n**waitUpTo**\n\n\nThis method adds the ability to specify a timeout when waiting for a subprocess to complete.\n\n\n    Popen.waitUpTo (timeoutSeconds, pollInterval) - Wait up to a certain number of seconds for the process to end.\n\n\n        @param timeoutSeconds <float> - Number of seconds to wait\n\n        @param pollInterval <float> (default .05) - Number of seconds in between each poll\n\n\n        @return - Returncode of application, or None if did not terminate.\n\n\n\n\n\n**waitOrTerminate**\n\n\nThis method allows specifying a timeout, like waitUpTo, but will also handle terminating or killing the application if it exceeds the timeout (see documentation below).\n\n\tPopen.waitOrTerminate(self, timeoutSeconds, pollInterval=DEFAULT_POLL_INTERVAL, terminateToKillSeconds=SUBPROCESS2_DEFAULT_TERMINATE_TO_KILL_SECONDS):\n\n\t\t'''\n\n\t\t\twaitOrTerminate - Wait up to a certain number of seconds for the process to end.\n\n\n\t\t\t\tIf the process is running after the timeout has been exceeded, a SIGTERM will be sent. \n\n\t\t\t\tOptionally, an additional SIGKILL can be sent after some configurable interval. See #terminateToKillSeconds doc below\n\n\n\t\t\t\t@param timeoutSeconds <float> - Number of seconds to wait\n\n\n\t\t\t\t@param pollInterval <float> (default .05)- Number of seconds between each poll\n\n\n\t\t\t\t@param terminateToKillSeconds <float/None> (default 1.5) - If application does not end before #timeoutSeconds , terminate() will be called.\n\n\n\t\t\t\t\t* If this is set to None, an additional #pollInterval sleep will occur after calling .terminate, to allow the application to cleanup. returnCode will be return of app if finished, or None if did not complete.\n\n\t\t\t\t\t* If this is set to 0, no terminate signal will be sent, but directly to kill. Because the application cannot trap this, returnCode will be None.\n\n\t\t\t\t\t* If this is set to > 0, that number of seconds maximum will be given between .terminate and .kill. If the application does not terminate before KILL, returnCode will be None.\n\n\n\t\t\t\tWindows Note -- On windows SIGTERM and SIGKILL are the same thing.\n\n\n\t\t\t\t@return dict { 'returnCode' : <int or None> , 'actionTaken' : <int mask of SUBPROCESS2_PROCESS_*> }\n\n\t\t\t\t\tReturns a dict representing results: \n\n\t\t\t\t\t\t\"returnCode\" matches return of application, or None per #terminateToKillSeconds doc above.\n\n\t\t\t\t\t\t\"actionTaken\" is a mask of the SUBPROCESS2_PROCESS_* variables. If app completed normally, it will be SUBPROCESS2_PROCESS_COMPLETED, otherwise some mask of SUBPROCESS2_PROCESS_TERMINATED and/or SUBPROCESS2_PROCESS_KILLED\n\n\t\t'''\n\nBackground Task Management\n==========================\n\nOne of the benefits to modern computing is the ability to multitask. Your application may want to start several sub processes at once, and have them all collecting output simultaneously. The standard python \"subprocess\" module does not provide a simple approach through it's API to do this.\n\nsubprocess2 extends the Popen module by adding the notion of a \"Background Task.\" When you call \"runInBackground\" on a pipe object, it will create and start a thread to automatically handle that process.\n\nCalling \"runInBackground\" on a pipe returns a \"BackgroundTaskInfo\" option, which is dynamically updated as the status the subprocess progresses. \n\nIf you have open streams (stdout, stderr), they will automatically be read in non-blocking fashion into \"stdoutData\" and \"stderrData\" respectively on that object. \n\nWhen the subprocess terminates, the \"returnCode\" field will be set, and \"isFinished\" will be marked True.\n\nBy default, data will be stored as bytes. To decode with a specific encoding (e.x. utf-8), pass the codec name as the \"encoding\" argument.\n\n\nYou can use this to farm out 10 processes quickly, collect all their data, and wait for them to complete. Other uses may be long-running associated proccesses, such as several searches collecting data, all being used to update a display.\n\n\nMethod Signature:\n\n\tdef runInBackground(self, pollInterval=.1, encoding=False):\n\n\t\t'''\n\n\t\t\trunInBackground - Create a background thread which will manage this process, automatically read from streams, and perform any cleanups\n\n\n\n\t\t\t  The object returned is a \"BackgroundTaskInfo\" object, and represents the state of the process. It is updated automatically as the program runs,\n\n\t\t\t\tand if stdout or stderr are streams, they are automatically read from and populated into this object.\n\n\n\t\t\t @see BackgroundTaskInfo for more info or https://htmlpreview.github.io/?https://raw.githubusercontent.com/kata198/python-subprocess2/master/doc/subprocess2.BackgroundTask.html\n\n\n\t\t\t@param pollInterval - Amount of idle time between polling\n\n\t\t\t@param encoding - Default False. If provided, data will be decoded using the value of this field as the codec name (e.x. \"utf-8\"). Otherwise, data will be stored as bytes.\n\n\t\t'''\n\n\nObject returned:\n\n\n\tclass BackgroundTaskInfo(object):\n\n\t\t'''\n\n\t\t\tBackgroundTaskInfo - Represents a task that was sent to run in the background. Will be updated as the status of that process changes.\n\n\n\t\t\t\tCan be used like an object or a dictionary.\n\n\n\t\t\tThis object populates its data automatically as the program runs in the background, managed by a thread.\n\n\n\t\t\tFIELDS:\n\n\n\t\t\t\tstdoutData - Bytes read automatically from stdout, if stdout was a pipe, or from stderr if stderr was set to subprocess.STDOUT\n\n\t\t\t\tstderrData - Bytes read automatically from stderr, if different pipe than stdout.\n\n\t\t\t\tisFinished - False while the background application is running, True when it completes.\n\n\t\t\t\treturnCode - None if the program has not completed, otherwise the numeric return code.\n\n\t\t\t\ttimeElapsed - Float of how many seconds have elapsed since the last update (updates happen very close to the \"pollInterval\" provided when calling runInBackground)\n\n\n\t\t'''\n\n\nSo for example:\n\n\timport subprocess2 as subprocess\n\n\n\tpipe1 = subprocess.Popen(......, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n\tpipe2 = subprocess.Popen(......, stdout=subprocess.PIPE)\n\n\n\tpipe1Info = pipe1.runInBackground()\n\n\tpipe2Info = pipe2.runInBackground()\n\n\nwill have two processes running in the background, collecting their output automatically, and cleaning up automatically.\n\n\nIf you decide later you wait to block the current context until one of those pipes complete, you can pull it back into foreground (while maintaining the automatic population of streams/values) by calling \"waitToFinish\" on the BackgroundTaskInfo.\n\n\n\tdef waitToFinish(self, timeout=None, pollInterval=.1):\n\n\t\t'''\n\n\t\t\twaitToFinish - Wait (Block current thread), optionally with a timeout, until background task completes.\n\n\n\n\t\t\t@param timeout <None/float> - None to wait forever, otherwise max number of seconds to wait\n\n\t\t\t@param pollInterval <float> - Seconds between each poll. Keep high if interactivity is not important, low if it is.\n\n\n\n\t\t\t@return - None if process did not complete (and timeout occured), otherwise the return code of the process is returned.\n\n\t\t'''\n\n\nSo, to continue the example above:\n\n\n\tpipe1Info = pipe1.runInBackground()\n\n\n\t....hard work...\n\n\tsys.stdout.write('Current output: ' + pipe1Info.stdoutData.decode('utf-8'))\n\n\t.... more hard work...\n\n\n\n\treturnCode = pipe1Info.waitToFinish()\n\n\n\nConstants\n---------\n\nDEFAULT_POLL_INTERVAL = .05 *Number of seconds as default for polling interval*\n\nSUBPROCESS2_DEFAULT_TERMINATE_TO_KILL_SECONDS = 1.5 *Default number of seconds between SIGTERM and SIGKILL for Popen.waitOrTerminate method*\n\nSUBPROCESS2_PROCESS_COMPLETED  = 0 *Mask value for noting that process completed by itself*\nSUBPROCESS2_PROCESS_TERMINATED = 1 *Mask value for noting that process was sent SIGTERM*\nSUBPROCESS2_PROCESS_KILLED     = 2 *Mask value for noting that process was sent SIGKILL*\n\n\n\n\nCompatability\n-------------\n\nIt is both python2 and python3 compatable. It has been tested under python 2.7 and 3.4.\n\n\nTests / Examples\n----------------\n\nTests are written using the `GoodTests <https://github.com/kata198/GoodTests>`_ framework. They are found in the \"tests\" directory. Use runTests.py to download GoodTests and run the test suite, after installing subprocess2.", "description_content_type": null, "docs_url": "https://pythonhosted.org/python-subprocess2/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kata198/python-subprocess2", "keywords": "python,subprocess,Popen,pipe,wait,timeout,terminate,kill,sigterm,sigkill,process,management,waitUpTo,waitOrTerminate", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "python-subprocess2", "package_url": "https://pypi.org/project/python-subprocess2/", "platform": "", "project_url": "https://pypi.org/project/python-subprocess2/", "project_urls": {"Homepage": "https://github.com/kata198/python-subprocess2"}, "release_url": "https://pypi.org/project/python-subprocess2/2.0.2/", "requires_dist": null, "requires_python": "", "summary": "Extensions to the upstream python subprocess module", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-subprocess2\">\n<h2>python-subprocess2</h2>\n<p>Extensions on the python subprocess module. Importing subprocess2 will extend the global \u201csubprocess\u201d module (only additions, no modifications, so it\u2019s safe).</p>\n<p>You can also import and use subprocess2 instead of the subprocess module. Doing a global extension allows your application or library to utilize the extensions without requiring modification of other codebases. In example, if you have a library that is opening a pipe and passing it to your application, it does not need to be modified for you to use the additional Popen methods on the object you received.</p>\n<p>Simply installing the subprocess2 module does not do anything to the parent subprocess module, until it has been imported, and then only additions are made.</p>\n<div id=\"pydoc-reference\">\n<h3>PyDoc Reference</h3>\n<p>PyDoc Reference for extended subprocess modules can be found at: <a href=\"http://htmlpreview.github.io/?https://github.com/kata198/python-subprocess2/blob/master/doc/subprocess2.html\" rel=\"nofollow\">http://htmlpreview.github.io/?https://github.com/kata198/python-subprocess2/blob/master/doc/subprocess2.html</a></p>\n</div>\n</div>\n<div id=\"popen\">\n<h2>Popen</h2>\n<p>Additions to Popen class:</p>\n<p><strong>waitUpTo</strong></p>\n<p>This method adds the ability to specify a timeout when waiting for a subprocess to complete.</p>\n<blockquote>\n<p>Popen.waitUpTo (timeoutSeconds, pollInterval) - Wait up to a certain number of seconds for the process to end.</p>\n<blockquote>\n<p>@param timeoutSeconds &lt;float&gt; - Number of seconds to wait</p>\n<p>@param pollInterval &lt;float&gt; (default .05) - Number of seconds in between each poll</p>\n<p>@return - Returncode of application, or None if did not terminate.</p>\n</blockquote>\n</blockquote>\n<p><strong>waitOrTerminate</strong></p>\n<p>This method allows specifying a timeout, like waitUpTo, but will also handle terminating or killing the application if it exceeds the timeout (see documentation below).</p>\n<blockquote>\n<p>Popen.waitOrTerminate(self, timeoutSeconds, pollInterval=DEFAULT_POLL_INTERVAL, terminateToKillSeconds=SUBPROCESS2_DEFAULT_TERMINATE_TO_KILL_SECONDS):</p>\n<blockquote>\n<p>\u2018\u2019\u2019</p>\n<blockquote>\n<p>waitOrTerminate - Wait up to a certain number of seconds for the process to end.</p>\n<blockquote>\n<p>If the process is running after the timeout has been exceeded, a SIGTERM will be sent.</p>\n<p>Optionally, an additional SIGKILL can be sent after some configurable interval. See #terminateToKillSeconds doc below</p>\n<p>@param timeoutSeconds &lt;float&gt; - Number of seconds to wait</p>\n<p>@param pollInterval &lt;float&gt; (default .05)- Number of seconds between each poll</p>\n<p>@param terminateToKillSeconds &lt;float/None&gt; (default 1.5) - If application does not end before #timeoutSeconds , terminate() will be called.</p>\n<blockquote>\n<ul>\n<li>If this is set to None, an additional #pollInterval sleep will occur after calling .terminate, to allow the application to cleanup. returnCode will be return of app if finished, or None if did not complete.</li>\n<li>If this is set to 0, no terminate signal will be sent, but directly to kill. Because the application cannot trap this, returnCode will be None.</li>\n<li>If this is set to &gt; 0, that number of seconds maximum will be given between .terminate and .kill. If the application does not terminate before KILL, returnCode will be None.</li>\n</ul>\n</blockquote>\n<p>Windows Note \u2013 On windows SIGTERM and SIGKILL are the same thing.</p>\n<p>@return dict { \u2018returnCode\u2019 : &lt;int or None&gt; , \u2018actionTaken\u2019 : &lt;int mask of SUBPROCESS2_PROCESS_*&gt; }</p>\n<blockquote>\n<p>Returns a dict representing results:</p>\n<blockquote>\n<p>\u201creturnCode\u201d matches return of application, or None per #terminateToKillSeconds doc above.</p>\n<p>\u201cactionTaken\u201d is a mask of the SUBPROCESS2_PROCESS_* variables. If app completed normally, it will be SUBPROCESS2_PROCESS_COMPLETED, otherwise some mask of SUBPROCESS2_PROCESS_TERMINATED and/or SUBPROCESS2_PROCESS_KILLED</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>\u2018\u2019\u2019</p>\n</blockquote>\n</blockquote>\n</div>\n<div id=\"background-task-management\">\n<h2>Background Task Management</h2>\n<p>One of the benefits to modern computing is the ability to multitask. Your application may want to start several sub processes at once, and have them all collecting output simultaneously. The standard python \u201csubprocess\u201d module does not provide a simple approach through it\u2019s API to do this.</p>\n<p>subprocess2 extends the Popen module by adding the notion of a \u201cBackground Task.\u201d When you call \u201crunInBackground\u201d on a pipe object, it will create and start a thread to automatically handle that process.</p>\n<p>Calling \u201crunInBackground\u201d on a pipe returns a \u201cBackgroundTaskInfo\u201d option, which is dynamically updated as the status the subprocess progresses.</p>\n<p>If you have open streams (stdout, stderr), they will automatically be read in non-blocking fashion into \u201cstdoutData\u201d and \u201cstderrData\u201d respectively on that object.</p>\n<p>When the subprocess terminates, the \u201creturnCode\u201d field will be set, and \u201cisFinished\u201d will be marked True.</p>\n<p>By default, data will be stored as bytes. To decode with a specific encoding (e.x. utf-8), pass the codec name as the \u201cencoding\u201d argument.</p>\n<p>You can use this to farm out 10 processes quickly, collect all their data, and wait for them to complete. Other uses may be long-running associated proccesses, such as several searches collecting data, all being used to update a display.</p>\n<p>Method Signature:</p>\n<blockquote>\n<p>def runInBackground(self, pollInterval=.1, encoding=False):</p>\n<blockquote>\n<p>\u2018\u2019\u2019</p>\n<blockquote>\n<p>runInBackground - Create a background thread which will manage this process, automatically read from streams, and perform any cleanups</p>\n<blockquote>\n<blockquote>\n<p>The object returned is a \u201cBackgroundTaskInfo\u201d object, and represents the state of the process. It is updated automatically as the program runs,</p>\n<blockquote>\nand if stdout or stderr are streams, they are automatically read from and populated into this object.</blockquote>\n</blockquote>\n<p>@see BackgroundTaskInfo for more info or <a href=\"https://htmlpreview.github.io/?https://raw.githubusercontent.com/kata198/python-subprocess2/master/doc/subprocess2.BackgroundTask.html\" rel=\"nofollow\">https://htmlpreview.github.io/?https://raw.githubusercontent.com/kata198/python-subprocess2/master/doc/subprocess2.BackgroundTask.html</a></p>\n</blockquote>\n<p>@param pollInterval - Amount of idle time between polling</p>\n<p>@param encoding - Default False. If provided, data will be decoded using the value of this field as the codec name (e.x. \u201cutf-8\u201d). Otherwise, data will be stored as bytes.</p>\n</blockquote>\n<p>\u2018\u2019\u2019</p>\n</blockquote>\n</blockquote>\n<p>Object returned:</p>\n<blockquote>\n<p>class BackgroundTaskInfo(object):</p>\n<blockquote>\n<p>\u2018\u2019\u2019</p>\n<blockquote>\n<p>BackgroundTaskInfo - Represents a task that was sent to run in the background. Will be updated as the status of that process changes.</p>\n<blockquote>\nCan be used like an object or a dictionary.</blockquote>\n<p>This object populates its data automatically as the program runs in the background, managed by a thread.</p>\n<p>FIELDS:</p>\n<blockquote>\n<p>stdoutData - Bytes read automatically from stdout, if stdout was a pipe, or from stderr if stderr was set to subprocess.STDOUT</p>\n<p>stderrData - Bytes read automatically from stderr, if different pipe than stdout.</p>\n<p>isFinished - False while the background application is running, True when it completes.</p>\n<p>returnCode - None if the program has not completed, otherwise the numeric return code.</p>\n<p>timeElapsed - Float of how many seconds have elapsed since the last update (updates happen very close to the \u201cpollInterval\u201d provided when calling runInBackground)</p>\n</blockquote>\n</blockquote>\n<p>\u2018\u2019\u2019</p>\n</blockquote>\n</blockquote>\n<p>So for example:</p>\n<blockquote>\n<p>import subprocess2 as subprocess</p>\n<p>pipe1 = subprocess.Popen(\u2026\u2026, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</p>\n<p>pipe2 = subprocess.Popen(\u2026\u2026, stdout=subprocess.PIPE)</p>\n<p>pipe1Info = pipe1.runInBackground()</p>\n<p>pipe2Info = pipe2.runInBackground()</p>\n</blockquote>\n<p>will have two processes running in the background, collecting their output automatically, and cleaning up automatically.</p>\n<p>If you decide later you wait to block the current context until one of those pipes complete, you can pull it back into foreground (while maintaining the automatic population of streams/values) by calling \u201cwaitToFinish\u201d on the BackgroundTaskInfo.</p>\n<blockquote>\n<p>def waitToFinish(self, timeout=None, pollInterval=.1):</p>\n<blockquote>\n<p>\u2018\u2019\u2019</p>\n<blockquote>\n<p>waitToFinish - Wait (Block current thread), optionally with a timeout, until background task completes.</p>\n<p>@param timeout &lt;None/float&gt; - None to wait forever, otherwise max number of seconds to wait</p>\n<p>@param pollInterval &lt;float&gt; - Seconds between each poll. Keep high if interactivity is not important, low if it is.</p>\n<p>@return - None if process did not complete (and timeout occured), otherwise the return code of the process is returned.</p>\n</blockquote>\n<p>\u2018\u2019\u2019</p>\n</blockquote>\n</blockquote>\n<p>So, to continue the example above:</p>\n<blockquote>\n<p>pipe1Info = pipe1.runInBackground()</p>\n<p>\u2026.hard work\u2026</p>\n<p>sys.stdout.write(\u2018Current output: \u2018 + pipe1Info.stdoutData.decode(\u2018utf-8\u2019))</p>\n<p>\u2026. more hard work\u2026</p>\n<p>returnCode = pipe1Info.waitToFinish()</p>\n</blockquote>\n<div id=\"constants\">\n<h3>Constants</h3>\n<p>DEFAULT_POLL_INTERVAL = .05 <em>Number of seconds as default for polling interval</em></p>\n<p>SUBPROCESS2_DEFAULT_TERMINATE_TO_KILL_SECONDS = 1.5 <em>Default number of seconds between SIGTERM and SIGKILL for Popen.waitOrTerminate method</em></p>\n<p>SUBPROCESS2_PROCESS_COMPLETED  = 0 <em>Mask value for noting that process completed by itself</em>\nSUBPROCESS2_PROCESS_TERMINATED = 1 <em>Mask value for noting that process was sent SIGTERM</em>\nSUBPROCESS2_PROCESS_KILLED     = 2 <em>Mask value for noting that process was sent SIGKILL</em></p>\n</div>\n<div id=\"compatability\">\n<h3>Compatability</h3>\n<p>It is both python2 and python3 compatable. It has been tested under python 2.7 and 3.4.</p>\n</div>\n<div id=\"tests-examples\">\n<h3>Tests / Examples</h3>\n<p>Tests are written using the <a href=\"https://github.com/kata198/GoodTests\" rel=\"nofollow\">GoodTests</a> framework. They are found in the \u201ctests\u201d directory. Use runTests.py to download GoodTests and run the test suite, after installing subprocess2.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2329984, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "73739b0bb3c189b51f35c640508f20d5", "sha256": "c0172a3fe4eefed5c6672e7a694cb66893da3d064360173213c8e1befcb3e349"}, "downloads": -1, "filename": "python-subprocess2-0.2.0.tar.gz", "has_sig": false, "md5_digest": "73739b0bb3c189b51f35c640508f20d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29542, "upload_time": "2015-12-18T00:06:08", "upload_time_iso_8601": "2015-12-18T00:06:08.482161Z", "url": "https://files.pythonhosted.org/packages/b9/5a/2234e3c744d5a691784f9dd1d8ffbb428d444f547e90093451f0fd4f319e/python-subprocess2-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4bfdca413cce1ca833c02d0bb69d265a", "sha256": "a851424a7ca69e5f54e4db2e3dbf7e7dd12ca1ecf1a91ec07fbfa09cef2e65f6"}, "downloads": -1, "filename": "python-subprocess2-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4bfdca413cce1ca833c02d0bb69d265a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28029, "upload_time": "2015-12-18T22:53:12", "upload_time_iso_8601": "2015-12-18T22:53:12.806555Z", "url": "https://files.pythonhosted.org/packages/71/27/1748d6269ddb2f081edd7ff37a1e764ed3f0eb8ce77ba67495cdd2bdb0a6/python-subprocess2-0.2.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "28585657c8c53723e5316e38a85ce430", "sha256": "55368618db6f4715af97f9036256257b204387ab6112048a0de0edb02491700d"}, "downloads": -1, "filename": "python-subprocess2-1.0.0.tar.gz", "has_sig": false, "md5_digest": "28585657c8c53723e5316e38a85ce430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25252, "upload_time": "2016-06-21T19:33:58", "upload_time_iso_8601": "2016-06-21T19:33:58.376198Z", "url": "https://files.pythonhosted.org/packages/f4/66/9739e7dbd81bb50975c69ce51400602ff2aa82315f0e2cb28a8d146b7356/python-subprocess2-1.0.0.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "536eb602a1775b3b80de85f089f61545", "sha256": "8d335a8229986c57c94e98aa7c6599f4e888784657332497654f26e0a59afc9e"}, "downloads": -1, "filename": "python-subprocess2-2.0.2.tar.gz", "has_sig": false, "md5_digest": "536eb602a1775b3b80de85f089f61545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31695, "upload_time": "2016-09-07T18:30:42", "upload_time_iso_8601": "2016-09-07T18:30:42.510778Z", "url": "https://files.pythonhosted.org/packages/b0/94/2b1220046eac5977911941e098b28cd6175d2d0693198cb1d3167cb89d00/python-subprocess2-2.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "536eb602a1775b3b80de85f089f61545", "sha256": "8d335a8229986c57c94e98aa7c6599f4e888784657332497654f26e0a59afc9e"}, "downloads": -1, "filename": "python-subprocess2-2.0.2.tar.gz", "has_sig": false, "md5_digest": "536eb602a1775b3b80de85f089f61545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31695, "upload_time": "2016-09-07T18:30:42", "upload_time_iso_8601": "2016-09-07T18:30:42.510778Z", "url": "https://files.pythonhosted.org/packages/b0/94/2b1220046eac5977911941e098b28cd6175d2d0693198cb1d3167cb89d00/python-subprocess2-2.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:10 2020"}