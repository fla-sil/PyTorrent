{"info": {"author": "Dmytro Katyukha", "author_email": "firemage.dima@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "lxmlrpc - XMLRPClib patch\r\n=========================\r\n\r\nThis module monkeypatch python's `xmlrpclib` to use `lxml <http://lxml.de>`__ based parser\r\nto reduce memory consumption on big xmlrpc requests / responses (100+ Mb)\r\n\r\n\r\nNOTE\r\n----\r\n\r\nThis module is useful only for ***python2.7***.\r\n\r\nUse it **only** if you suffer from **high memory consumption** of **xmlrpclib**\r\n\r\n\r\nInstall\r\n-------\r\n\r\nThis module is hosted on `PyPI <https://pypi.python.org/pypi/lxmlrpc_monkey>`__\r\nso it could bu easily installed via *pip*:\r\n\r\n.. code:: bash\r\n\r\n    pip install lxmlrpc_monkey\r\n\r\n\r\nUsage\r\n-----\r\n\r\nTo use this module just do following\r\n\r\n.. code:: python\r\n\r\n    import xmlrpclib\r\n    from lxmlrpc_monkey import patch_xmlrpclib\r\n    # This line will monkey-patch xmlrpclib to use lxml for parser\r\n    patch_xmlrpclib()\r\n\r\n\r\nBenchmarks (how to run)\r\n-----------------------\r\n\r\nTo run benchmarks:\r\n\r\n1. install `memory_profiler <https://pypi.python.org/pypi/memory_profiler>`__\r\n2. prepare data with ``python generate_data.py --path <demo data path> --size 50000000``\r\n3. run benchmarks with ``python benchmark.py --path <demo data path>``\r\n\r\n\r\n\r\nBenchmark results (50 Mb (real 65 Mb) data file)\r\n================================================\r\n\r\nlook at ```p.feed(data)``` call in ```loads``` function of *xmlrpclib*\r\n\r\n***Running unpatched loads***\r\n\r\nFilename: /usr/lib/python2.7/xmlrpclib.py\r\n\r\n======    =========    =========   =============\r\nLine #    Mem usage    Increment   Line Contents\r\n======    =========    =========   =============\r\n  1134    104.7 MiB      0.0 MiB   def loads(data, use_datetime=0):\r\n  1135                                 \"\"\"data -> unmarshalled data, method name\r\n  1136                             \r\n  1137                                 Convert an XML-RPC packet to unmarshalled data plus a method\r\n  1138                                 name (None if not present).\r\n  1139                             \r\n  1140                                 If the XML-RPC packet represents a fault condition, this function\r\n  1141                                 raises a Fault exception.\r\n  1142                                 \"\"\"\r\n  1143    104.7 MiB      0.0 MiB       p, u = getparser(use_datetime=use_datetime)\r\n >1144    622.4 MiB    517.7 MiB       p.feed(data)\r\n  1145    558.0 MiB    -64.4 MiB       p.close()\r\n  1146    558.0 MiB      0.0 MiB       return u.close(), u.getmethodname()\r\n======    =========    =========   =============\r\n\r\n\r\n***Running patched loads***\r\n\r\nFilename: /usr/lib/python2.7/xmlrpclib.py\r\n\r\n======    =========    =========   =============\r\nLine #    Mem usage    Increment   Line Contents\r\n======    =========    =========   =============\r\n  1134    106.9 MiB      0.0 MiB   def loads(data, use_datetime=0):\r\n  1135                                 \"\"\"data -> unmarshalled data, method name\r\n  1136                             \r\n  1137                                 Convert an XML-RPC packet to unmarshalled data plus a method\r\n  1138                                 name (None if not present).\r\n  1139                             \r\n  1140                                 If the XML-RPC packet represents a fault condition, this function\r\n  1141                                 raises a Fault exception.\r\n  1142                                 \"\"\"\r\n  1143    106.9 MiB      0.0 MiB       p, u = getparser(use_datetime=use_datetime)\r\n >1144    235.9 MiB    129.0 MiB       p.feed(data)\r\n  1145    171.5 MiB    -64.4 MiB       p.close()\r\n  1146    171.5 MiB      0.0 MiB       return u.close(), u.getmethodname()\r\n======    =========    =========   =============\r\n\r\n\r\nFilename: bechmark.py\r\n\r\n======    =========    =========   =============\r\nLine #    Mem usage    Increment   Line Contents\r\n======    =========    =========   =============\r\n    13    104.7 MiB      0.0 MiB   @profile\r\n    14                             def bench_load(xmldata):\r\n    15    104.7 MiB      0.0 MiB       print (\"Running unpatched loads\")\r\n    16    106.9 MiB      2.2 MiB       loads(xmldata)\r\n    17                             \r\n    18    106.9 MiB      0.0 MiB       lxmlrpc.patch_xmlrpclib()\r\n    19                             \r\n    20    106.9 MiB      0.0 MiB       print (\"Running patched loads\")\r\n    21    107.1 MiB      0.2 MiB       loads(xmldata)\r\n======    =========    =========   =============\r\n\r\n\r\n\r\nBenchmark results (100 Mb (real 129 Mb) data file)\r\n==================================================\r\n\r\n***Running unpatched loads***\r\n\r\n---\r\n\r\nFilename: /usr/lib/python2.7/xmlrpclib.py\r\n\r\n======   ==========   ==========   =============\r\nLine #    Mem usage    Increment   Line Contents\r\n======   ==========   ==========   =============\r\n  1134    169.2 MiB      0.0 MiB   def loads(data, use_datetime=0):\r\n  1135                                 \"\"\"data -> unmarshalled data, method name\r\n  1136                             \r\n  1137                                 Convert an XML-RPC packet to unmarshalled data plus a method\r\n  1138                                 name (None if not present).\r\n  1139                             \r\n  1140                                 If the XML-RPC packet represents a fault condition, this function\r\n  1141                                 raises a Fault exception.\r\n  1142                                 \"\"\"\r\n  1143    169.2 MiB      0.0 MiB       p, u = getparser(use_datetime=use_datetime)\r\n >1144   1203.0 MiB   1033.8 MiB       p.feed(data)\r\n  1145   1074.2 MiB   -128.8 MiB       p.close()\r\n  1146   1074.2 MiB      0.0 MiB       return u.close(), u.getmethodname()\r\n======   ==========   ==========   =============\r\n\r\n***Running patched loads***\r\n\r\n---\r\n\r\nFilename: /usr/lib/python2.7/xmlrpclib.py\r\n\r\n======   ==========   ==========   =============\r\nLine #    Mem usage    Increment   Line Contents\r\n======   ==========   ==========   =============\r\n  1134    171.6 MiB      0.0 MiB   def loads(data, use_datetime=0):\r\n  1135                                 \"\"\"data -> unmarshalled data, method name\r\n  1136                             \r\n  1137                                 Convert an XML-RPC packet to unmarshalled data plus a method\r\n  1138                                 name (None if not present).\r\n  1139                             \r\n  1140                                 If the XML-RPC packet represents a fault condition, this function\r\n  1141                                 raises a Fault exception.\r\n  1142                                 \"\"\"\r\n  1143    171.6 MiB      0.0 MiB       p, u = getparser(use_datetime=use_datetime)\r\n >1144    429.4 MiB    257.8 MiB       p.feed(data)\r\n  1145    300.6 MiB   -128.8 MiB       p.close()\r\n  1146    300.6 MiB      0.0 MiB       return u.close(), u.getmethodname()\r\n======   ==========   ==========   =============\r\n\r\nFilename: bechmark.py\r\n\r\n======   ==========   ==========   =============\r\nLine #    Mem usage    Increment   Line Contents\r\n======   ==========   ==========   =============\r\n    13    169.2 MiB      0.0 MiB   @profile\r\n    14                             def bench_load(xmldata):\r\n    15    169.2 MiB      0.0 MiB       print (\"Running unpatched loads\")\r\n    16    171.6 MiB      2.4 MiB       loads(xmldata)\r\n    17                             \r\n    18    171.6 MiB      0.0 MiB       lxmlrpc.patch_xmlrpclib()\r\n    19                             \r\n    20    171.6 MiB      0.0 MiB       print (\"Running patched loads\")\r\n    21    171.8 MiB      0.2 MiB       loads(xmldata)\r\n======   ==========   ==========   =============", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/katyukha/lxmlrpc_monkey", "keywords": "xmlrpc xmlrpclib xml-rpc", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "lxmlrpc_monkey", "package_url": "https://pypi.org/project/lxmlrpc_monkey/", "platform": "", "project_url": "https://pypi.org/project/lxmlrpc_monkey/", "project_urls": {"Homepage": "https://github.com/katyukha/lxmlrpc_monkey"}, "release_url": "https://pypi.org/project/lxmlrpc_monkey/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "xmlrpclib patch to reduce its memory consumption", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"lxmlrpc-xmlrpclib-patch\">\n<h2>lxmlrpc - XMLRPClib patch</h2>\n<p>This module monkeypatch python\u2019s <cite>xmlrpclib</cite> to use <a href=\"http://lxml.de\" rel=\"nofollow\">lxml</a> based parser\nto reduce memory consumption on big xmlrpc requests / responses (100+ Mb)</p>\n<div id=\"note\">\n<h3>NOTE</h3>\n<p>This module is useful only for <strong>*python2.7*</strong>.</p>\n<p>Use it <strong>only</strong> if you suffer from <strong>high memory consumption</strong> of <strong>xmlrpclib</strong></p>\n</div>\n<div id=\"install\">\n<h3>Install</h3>\n<p>This module is hosted on <a href=\"https://pypi.python.org/pypi/lxmlrpc_monkey\" rel=\"nofollow\">PyPI</a>\nso it could bu easily installed via <em>pip</em>:</p>\n<pre>pip install lxmlrpc_monkey\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To use this module just do following</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xmlrpclib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lxmlrpc_monkey</span> <span class=\"kn\">import</span> <span class=\"n\">patch_xmlrpclib</span>\n<span class=\"c1\"># This line will monkey-patch xmlrpclib to use lxml for parser</span>\n<span class=\"n\">patch_xmlrpclib</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"benchmarks-how-to-run\">\n<h3>Benchmarks (how to run)</h3>\n<p>To run benchmarks:</p>\n<ol>\n<li>install <a href=\"https://pypi.python.org/pypi/memory_profiler\" rel=\"nofollow\">memory_profiler</a></li>\n<li>prepare data with <tt>python generate_data.py <span class=\"pre\">--path</span> &lt;demo data path&gt; <span class=\"pre\">--size</span> 50000000</tt></li>\n<li>run benchmarks with <tt>python benchmark.py <span class=\"pre\">--path</span> &lt;demo data path&gt;</tt></li>\n</ol>\n</div>\n</div>\n<div id=\"benchmark-results-50-mb-real-65-mb-data-file\">\n<h2>Benchmark results (50 Mb (real 65 Mb) data file)</h2>\n<p>look at <tt>`p.feed(data)`</tt> call in <tt>`loads`</tt> function of <em>xmlrpclib</em></p>\n<p><strong>*Running unpatched loads*</strong></p>\n<p>Filename: /usr/lib/python2.7/xmlrpclib.py</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Line #</th>\n<th>Mem usage</th>\n<th>Increment</th>\n<th>Line Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1134</td>\n<td>104.7 MiB</td>\n<td>0.0 MiB</td>\n<td>def loads(data, use_datetime=0):</td>\n</tr>\n<tr><td>1135</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u201c\u201d\u201ddata -&gt; unmarshalled data, method name</td>\n</tr>\n<tr><td>1136</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1137</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>Convert an XML-RPC packet to unmarshalled data plus a method</td>\n</tr>\n<tr><td>1138</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>name (None if not present).</td>\n</tr>\n<tr><td>1139</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1140</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>If the XML-RPC packet represents a fault condition, this function</td>\n</tr>\n<tr><td>1141</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>raises a Fault exception.</td>\n</tr>\n<tr><td>1142</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u201c\u201d\u201d</td>\n</tr>\n<tr><td>1143</td>\n<td>104.7 MiB</td>\n<td>0.0 MiB</td>\n<td>p, u = getparser(use_datetime=use_datetime)</td>\n</tr>\n<tr><td>&gt;1144</td>\n<td>622.4 MiB</td>\n<td>517.7 MiB</td>\n<td>p.feed(data)</td>\n</tr>\n<tr><td>1145</td>\n<td>558.0 MiB</td>\n<td>-64.4 MiB</td>\n<td>p.close()</td>\n</tr>\n<tr><td>1146</td>\n<td>558.0 MiB</td>\n<td>0.0 MiB</td>\n<td>return u.close(), u.getmethodname()</td>\n</tr>\n</tbody>\n</table>\n<p><strong>*Running patched loads*</strong></p>\n<p>Filename: /usr/lib/python2.7/xmlrpclib.py</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Line #</th>\n<th>Mem usage</th>\n<th>Increment</th>\n<th>Line Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1134</td>\n<td>106.9 MiB</td>\n<td>0.0 MiB</td>\n<td>def loads(data, use_datetime=0):</td>\n</tr>\n<tr><td>1135</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u201c\u201d\u201ddata -&gt; unmarshalled data, method name</td>\n</tr>\n<tr><td>1136</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1137</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>Convert an XML-RPC packet to unmarshalled data plus a method</td>\n</tr>\n<tr><td>1138</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>name (None if not present).</td>\n</tr>\n<tr><td>1139</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1140</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>If the XML-RPC packet represents a fault condition, this function</td>\n</tr>\n<tr><td>1141</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>raises a Fault exception.</td>\n</tr>\n<tr><td>1142</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u201c\u201d\u201d</td>\n</tr>\n<tr><td>1143</td>\n<td>106.9 MiB</td>\n<td>0.0 MiB</td>\n<td>p, u = getparser(use_datetime=use_datetime)</td>\n</tr>\n<tr><td>&gt;1144</td>\n<td>235.9 MiB</td>\n<td>129.0 MiB</td>\n<td>p.feed(data)</td>\n</tr>\n<tr><td>1145</td>\n<td>171.5 MiB</td>\n<td>-64.4 MiB</td>\n<td>p.close()</td>\n</tr>\n<tr><td>1146</td>\n<td>171.5 MiB</td>\n<td>0.0 MiB</td>\n<td>return u.close(), u.getmethodname()</td>\n</tr>\n</tbody>\n</table>\n<p>Filename: bechmark.py</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Line #</th>\n<th>Mem usage</th>\n<th>Increment</th>\n<th>Line Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>13</td>\n<td>104.7 MiB</td>\n<td>0.0 MiB</td>\n<td>@profile</td>\n</tr>\n<tr><td>14</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>def bench_load(xmldata):</td>\n</tr>\n<tr><td>15</td>\n<td>104.7 MiB</td>\n<td>0.0 MiB</td>\n<td>print (\u201cRunning unpatched loads\u201d)</td>\n</tr>\n<tr><td>16</td>\n<td>106.9 MiB</td>\n<td>2.2 MiB</td>\n<td>loads(xmldata)</td>\n</tr>\n<tr><td>17</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>18</td>\n<td>106.9 MiB</td>\n<td>0.0 MiB</td>\n<td>lxmlrpc.patch_xmlrpclib()</td>\n</tr>\n<tr><td>19</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>20</td>\n<td>106.9 MiB</td>\n<td>0.0 MiB</td>\n<td>print (\u201cRunning patched loads\u201d)</td>\n</tr>\n<tr><td>21</td>\n<td>107.1 MiB</td>\n<td>0.2 MiB</td>\n<td>loads(xmldata)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"benchmark-results-100-mb-real-129-mb-data-file\">\n<h2>Benchmark results (100 Mb (real 129 Mb) data file)</h2>\n<p><strong>*Running unpatched loads*</strong></p>\n<p>\u2014</p>\n<p>Filename: /usr/lib/python2.7/xmlrpclib.py</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Line #</th>\n<th>Mem usage</th>\n<th>Increment</th>\n<th>Line Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1134</td>\n<td>169.2 MiB</td>\n<td>0.0 MiB</td>\n<td>def loads(data, use_datetime=0):</td>\n</tr>\n<tr><td>1135</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u201c\u201d\u201ddata -&gt; unmarshalled data, method name</td>\n</tr>\n<tr><td>1136</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1137</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>Convert an XML-RPC packet to unmarshalled data plus a method</td>\n</tr>\n<tr><td>1138</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>name (None if not present).</td>\n</tr>\n<tr><td>1139</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1140</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>If the XML-RPC packet represents a fault condition, this function</td>\n</tr>\n<tr><td>1141</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>raises a Fault exception.</td>\n</tr>\n<tr><td>1142</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u201c\u201d\u201d</td>\n</tr>\n<tr><td>1143</td>\n<td>169.2 MiB</td>\n<td>0.0 MiB</td>\n<td>p, u = getparser(use_datetime=use_datetime)</td>\n</tr>\n<tr><td>&gt;1144</td>\n<td>1203.0 MiB</td>\n<td>1033.8 MiB</td>\n<td>p.feed(data)</td>\n</tr>\n<tr><td>1145</td>\n<td>1074.2 MiB</td>\n<td>-128.8 MiB</td>\n<td>p.close()</td>\n</tr>\n<tr><td>1146</td>\n<td>1074.2 MiB</td>\n<td>0.0 MiB</td>\n<td>return u.close(), u.getmethodname()</td>\n</tr>\n</tbody>\n</table>\n<p><strong>*Running patched loads*</strong></p>\n<p>\u2014</p>\n<p>Filename: /usr/lib/python2.7/xmlrpclib.py</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Line #</th>\n<th>Mem usage</th>\n<th>Increment</th>\n<th>Line Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1134</td>\n<td>171.6 MiB</td>\n<td>0.0 MiB</td>\n<td>def loads(data, use_datetime=0):</td>\n</tr>\n<tr><td>1135</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u201c\u201d\u201ddata -&gt; unmarshalled data, method name</td>\n</tr>\n<tr><td>1136</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1137</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>Convert an XML-RPC packet to unmarshalled data plus a method</td>\n</tr>\n<tr><td>1138</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>name (None if not present).</td>\n</tr>\n<tr><td>1139</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1140</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>If the XML-RPC packet represents a fault condition, this function</td>\n</tr>\n<tr><td>1141</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>raises a Fault exception.</td>\n</tr>\n<tr><td>1142</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u201c\u201d\u201d</td>\n</tr>\n<tr><td>1143</td>\n<td>171.6 MiB</td>\n<td>0.0 MiB</td>\n<td>p, u = getparser(use_datetime=use_datetime)</td>\n</tr>\n<tr><td>&gt;1144</td>\n<td>429.4 MiB</td>\n<td>257.8 MiB</td>\n<td>p.feed(data)</td>\n</tr>\n<tr><td>1145</td>\n<td>300.6 MiB</td>\n<td>-128.8 MiB</td>\n<td>p.close()</td>\n</tr>\n<tr><td>1146</td>\n<td>300.6 MiB</td>\n<td>0.0 MiB</td>\n<td>return u.close(), u.getmethodname()</td>\n</tr>\n</tbody>\n</table>\n<p>Filename: bechmark.py</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Line #</th>\n<th>Mem usage</th>\n<th>Increment</th>\n<th>Line Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>13</td>\n<td>169.2 MiB</td>\n<td>0.0 MiB</td>\n<td>@profile</td>\n</tr>\n<tr><td>14</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>def bench_load(xmldata):</td>\n</tr>\n<tr><td>15</td>\n<td>169.2 MiB</td>\n<td>0.0 MiB</td>\n<td>print (\u201cRunning unpatched loads\u201d)</td>\n</tr>\n<tr><td>16</td>\n<td>171.6 MiB</td>\n<td>2.4 MiB</td>\n<td>loads(xmldata)</td>\n</tr>\n<tr><td>17</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>18</td>\n<td>171.6 MiB</td>\n<td>0.0 MiB</td>\n<td>lxmlrpc.patch_xmlrpclib()</td>\n</tr>\n<tr><td>19</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>20</td>\n<td>171.6 MiB</td>\n<td>0.0 MiB</td>\n<td>print (\u201cRunning patched loads\u201d)</td>\n</tr>\n<tr><td>21</td>\n<td>171.8 MiB</td>\n<td>0.2 MiB</td>\n<td>loads(xmldata)</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 2967505, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "83c99047c6a7269bf9394b3fa0178151", "sha256": "80f11dfdcde8c9584160d044d4b373ca808c975350aeb6d0742b5e712784f34c"}, "downloads": -1, "filename": "lxmlrpc_monkey-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "83c99047c6a7269bf9394b3fa0178151", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5945, "upload_time": "2017-06-22T09:22:27", "upload_time_iso_8601": "2017-06-22T09:22:27.957867Z", "url": "https://files.pythonhosted.org/packages/6f/10/d0c86cff6edb38e673b2c125fcab0a2e0b3447fd944e885f3849dc6ec5ad/lxmlrpc_monkey-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d817707b476e8e77b5fd8e422a0a5839", "sha256": "999373a2726d4d1d359728e81b7cc1871af48cf28ff18be45b48d852d1e3a682"}, "downloads": -1, "filename": "lxmlrpc_monkey-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d817707b476e8e77b5fd8e422a0a5839", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4238, "upload_time": "2017-06-22T09:22:26", "upload_time_iso_8601": "2017-06-22T09:22:26.428681Z", "url": "https://files.pythonhosted.org/packages/cb/16/177b997fa7506bed52a75eb8311d510dac48a21d8b3260ea6441de969869/lxmlrpc_monkey-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83c99047c6a7269bf9394b3fa0178151", "sha256": "80f11dfdcde8c9584160d044d4b373ca808c975350aeb6d0742b5e712784f34c"}, "downloads": -1, "filename": "lxmlrpc_monkey-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "83c99047c6a7269bf9394b3fa0178151", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5945, "upload_time": "2017-06-22T09:22:27", "upload_time_iso_8601": "2017-06-22T09:22:27.957867Z", "url": "https://files.pythonhosted.org/packages/6f/10/d0c86cff6edb38e673b2c125fcab0a2e0b3447fd944e885f3849dc6ec5ad/lxmlrpc_monkey-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d817707b476e8e77b5fd8e422a0a5839", "sha256": "999373a2726d4d1d359728e81b7cc1871af48cf28ff18be45b48d852d1e3a682"}, "downloads": -1, "filename": "lxmlrpc_monkey-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d817707b476e8e77b5fd8e422a0a5839", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4238, "upload_time": "2017-06-22T09:22:26", "upload_time_iso_8601": "2017-06-22T09:22:26.428681Z", "url": "https://files.pythonhosted.org/packages/cb/16/177b997fa7506bed52a75eb8311d510dac48a21d8b3260ea6441de969869/lxmlrpc_monkey-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:47 2020"}