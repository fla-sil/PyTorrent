{"info": {"author": "Paul Butler", "author_email": "paulgb@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Sample\n======\n\n``sample`` is a command-line tool for sampling data from a large,\nnewline-separated dataset (typically a CSV-like file).\n\nInstallation\n------------\n\n``sample`` is distributed with ``pip``. Once you've installed ``pip``,\nsimply run::\n\n    > pip install sample-cli\n\nand sample will be installed into your Python environment.\n\nUsage\n-----\n\n``sample`` requires one argument, the input file. If the input file\nis ``-``, data will be read from standard input (in this case, only\nthe reservoir and approximate algorithms can be used).\n\nSimple Example\n**************\n\nTo take a sample of size 1000 from the file ``big_data.csv``,\nrun ``sample`` as follows::\n\n    > sample -n 1000 big_data.csv\n\nThis will print 1000 random lines from the file to the terminal.\n\nFile Redirection\n****************\n\nUsually we want to save the sample to another file instead.\n``sample`` doesn't have file output built-in; instead it relies\non the output redirection features of your terminal. To save\nto ``big_data_sample.csv``, run the following command::\n\n    > sample -n 1000 big_data.csv > big_data_sample.csv\n\nHeader Rows\n***********\n\nCSV files often have a header row with the column names. You can pass\nthe ``-r`` flag to ``sample`` to preserve the header row::\n\n    > sample -n 1000 big_data.csv -r > big_data_sample.csv\n\nRarely, you may need to sample from a file with a header spanning\nmultiple rows. The ``-r`` argument takes an optional number of\nrows to preserve as a header::\n\n    > sample -n 1000 -r 3 data_with_header.csv > sample_with_header.csv\n\nNote that if the ``-r`` argument is directly before the input filename,\nit must have an argument or else it will try to interpret the input\nfilename as the number of header rows and fail. Putting the ``-r`` argument\nafter the input filename will avoid this.\n\nRandom Seed\n***********\n\nThe output of ``sample`` is random and depend on the computer's random\nstate. Sometimes you may want to take a sample in a way that can be\nreproduced. You can pass a random seed to ``sample`` with the ``-s`` flag\nto accomplish this::\n\n    > sample -s 45906345 data_file.csv > reproducable_sample.csv\n\nSampling Algorithms\n-------------------\n\nAlgorithm Comparison\n********************\n\n``sample`` implements three sampling algorithms, each with their own strengths\nand weaknesses.\n\n+------------------------+----------------+----------------+------------+\n|                        | Reservoir      | Approximate    | Two-pass   |\n+========================+================+================+============+\n| Flag                   | ``--res``      | ``--app``      | ``--tp``   |\n+------------------------+----------------+----------------+------------+\n| ``stdin``-compatible   | yes            | yes            | no         |\n+------------------------+----------------+----------------+------------+\n| space complexity       | ``O(ss * rs)`` | ``O(1)``       | ``O(ss)``  |\n+------------------------+----------------+----------------+------------+\n| fixed sample size      | compatible     | not compatible | compatible |\n+------------------------+----------------+----------------+------------+\n| fractional sample size | not compatible | compatible     | compatible |\n+------------------------+----------------+----------------+------------+\n\nFor space complexity, `ss` is the number of records in the sample and `rs` is the maximum size of a record.\n\nReservoir Sampling\n******************\n\nReservoir sampling (`Random Sampling with a Reservoir (Vitter 85) <http://www.mathcs.emory.edu/~cheung/papers/StreamDB/RandomSampling/1985-Vitter-Random-sampling-with-reservior.pdf>`__)\nis a method of sampling from a stream of unknown size where the sample size is\nfixed in advance. It is a one-pass algorithm and uses space proportional to the\namount of data in the sample.\n\nReservoir sampling is the default algorithm used by ``sample``. For consistency,\nit can also be invoked with the argument ``--reservoir``.\n\nIf reservoir sampling, the sample size must be fixed rather than fractional.\n\nExample::\n\n    > sample --reservoir -n 1000 big_data.csv > sample_data.csv\n\nApproximate Sampling\n********************\n\nApproximate sampling simply includes each row in the sample with a probability\ngiven as the sample proportion. It is a stateless algorithm with minimal space\nrequirements. Samples will have on average a size of ``fraction * population_size``,\nbut it will vary between each invocation. Because of this, approximate sampling\nis only useful when the sample size does not have to be exact (hence the name).\n\nExample::\n\n    > sample --approximate -f 0.15 my_data.csv > my_sample.csv\n\nEquivalently, supply a percentage instead of a fraction by switching the\n``-f`` to a ``-p``::\n\n    > sample --approximate -p 15 my_data.csv > my_sample.csv\n\nTwo-Pass Sampling\n*****************\n\nTwo-pass sampling is allowed two passes, first to count the number of records\n(ie. the population size) and second to emit the records which are part of the\nsample. Because of this it is not compatible with ``stdin`` as an input.\n\nAs two-pass sampling knows the population size, it will accept the sample size\nas either a fraction or a fixed number of elements.\n\nExample::\n\n    > sample --two-pass -p 15 my_data.csv > my_sample.csv\n\nTwo-pass sampling uses memory proportional to the number of elements in the sample.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "sample-cli", "package_url": "https://pypi.org/project/sample-cli/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sample-cli/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/sample-cli/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Command-line interface for sampling lines from text files", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>sample</tt> is a command-line tool for sampling data from a large,\nnewline-separated dataset (typically a CSV-like file).</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>sample</tt> is distributed with <tt>pip</tt>. Once you\u2019ve installed <tt>pip</tt>,\nsimply run:</p>\n<pre>&gt; pip install sample-cli\n</pre>\n<p>and sample will be installed into your Python environment.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><tt>sample</tt> requires one argument, the input file. If the input file\nis <tt>-</tt>, data will be read from standard input (in this case, only\nthe reservoir and approximate algorithms can be used).</p>\n<div id=\"simple-example\">\n<h3>Simple Example</h3>\n<p>To take a sample of size 1000 from the file <tt>big_data.csv</tt>,\nrun <tt>sample</tt> as follows:</p>\n<pre>&gt; sample -n 1000 big_data.csv\n</pre>\n<p>This will print 1000 random lines from the file to the terminal.</p>\n</div>\n<div id=\"file-redirection\">\n<h3>File Redirection</h3>\n<p>Usually we want to save the sample to another file instead.\n<tt>sample</tt> doesn\u2019t have file output built-in; instead it relies\non the output redirection features of your terminal. To save\nto <tt>big_data_sample.csv</tt>, run the following command:</p>\n<pre>&gt; sample -n 1000 big_data.csv &gt; big_data_sample.csv\n</pre>\n</div>\n<div id=\"header-rows\">\n<h3>Header Rows</h3>\n<p>CSV files often have a header row with the column names. You can pass\nthe <tt><span class=\"pre\">-r</span></tt> flag to <tt>sample</tt> to preserve the header row:</p>\n<pre>&gt; sample -n 1000 big_data.csv -r &gt; big_data_sample.csv\n</pre>\n<p>Rarely, you may need to sample from a file with a header spanning\nmultiple rows. The <tt><span class=\"pre\">-r</span></tt> argument takes an optional number of\nrows to preserve as a header:</p>\n<pre>&gt; sample -n 1000 -r 3 data_with_header.csv &gt; sample_with_header.csv\n</pre>\n<p>Note that if the <tt><span class=\"pre\">-r</span></tt> argument is directly before the input filename,\nit must have an argument or else it will try to interpret the input\nfilename as the number of header rows and fail. Putting the <tt><span class=\"pre\">-r</span></tt> argument\nafter the input filename will avoid this.</p>\n</div>\n<div id=\"random-seed\">\n<h3>Random Seed</h3>\n<p>The output of <tt>sample</tt> is random and depend on the computer\u2019s random\nstate. Sometimes you may want to take a sample in a way that can be\nreproduced. You can pass a random seed to <tt>sample</tt> with the <tt><span class=\"pre\">-s</span></tt> flag\nto accomplish this:</p>\n<pre>&gt; sample -s 45906345 data_file.csv &gt; reproducable_sample.csv\n</pre>\n</div>\n</div>\n<div id=\"sampling-algorithms\">\n<h2>Sampling Algorithms</h2>\n<div id=\"algorithm-comparison\">\n<h3>Algorithm Comparison</h3>\n<p><tt>sample</tt> implements three sampling algorithms, each with their own strengths\nand weaknesses.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>\u00a0</th>\n<th>Reservoir</th>\n<th>Approximate</th>\n<th>Two-pass</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Flag</td>\n<td><tt><span class=\"pre\">--res</span></tt></td>\n<td><tt><span class=\"pre\">--app</span></tt></td>\n<td><tt><span class=\"pre\">--tp</span></tt></td>\n</tr>\n<tr><td><tt>stdin</tt>-compatible</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr><td>space complexity</td>\n<td><tt>O(ss * rs)</tt></td>\n<td><tt>O(1)</tt></td>\n<td><tt>O(ss)</tt></td>\n</tr>\n<tr><td>fixed sample size</td>\n<td>compatible</td>\n<td>not compatible</td>\n<td>compatible</td>\n</tr>\n<tr><td>fractional sample size</td>\n<td>not compatible</td>\n<td>compatible</td>\n<td>compatible</td>\n</tr>\n</tbody>\n</table>\n<p>For space complexity, <cite>ss</cite> is the number of records in the sample and <cite>rs</cite> is the maximum size of a record.</p>\n</div>\n<div id=\"reservoir-sampling\">\n<h3>Reservoir Sampling</h3>\n<p>Reservoir sampling (<a href=\"http://www.mathcs.emory.edu/~cheung/papers/StreamDB/RandomSampling/1985-Vitter-Random-sampling-with-reservior.pdf\" rel=\"nofollow\">Random Sampling with a Reservoir (Vitter 85)</a>)\nis a method of sampling from a stream of unknown size where the sample size is\nfixed in advance. It is a one-pass algorithm and uses space proportional to the\namount of data in the sample.</p>\n<p>Reservoir sampling is the default algorithm used by <tt>sample</tt>. For consistency,\nit can also be invoked with the argument <tt><span class=\"pre\">--reservoir</span></tt>.</p>\n<p>If reservoir sampling, the sample size must be fixed rather than fractional.</p>\n<p>Example:</p>\n<pre>&gt; sample --reservoir -n 1000 big_data.csv &gt; sample_data.csv\n</pre>\n</div>\n<div id=\"approximate-sampling\">\n<h3>Approximate Sampling</h3>\n<p>Approximate sampling simply includes each row in the sample with a probability\ngiven as the sample proportion. It is a stateless algorithm with minimal space\nrequirements. Samples will have on average a size of <tt>fraction * population_size</tt>,\nbut it will vary between each invocation. Because of this, approximate sampling\nis only useful when the sample size does not have to be exact (hence the name).</p>\n<p>Example:</p>\n<pre>&gt; sample --approximate -f 0.15 my_data.csv &gt; my_sample.csv\n</pre>\n<p>Equivalently, supply a percentage instead of a fraction by switching the\n<tt><span class=\"pre\">-f</span></tt> to a <tt><span class=\"pre\">-p</span></tt>:</p>\n<pre>&gt; sample --approximate -p 15 my_data.csv &gt; my_sample.csv\n</pre>\n</div>\n<div id=\"two-pass-sampling\">\n<h3>Two-Pass Sampling</h3>\n<p>Two-pass sampling is allowed two passes, first to count the number of records\n(ie. the population size) and second to emit the records which are part of the\nsample. Because of this it is not compatible with <tt>stdin</tt> as an input.</p>\n<p>As two-pass sampling knows the population size, it will accept the sample size\nas either a fraction or a fixed number of elements.</p>\n<p>Example:</p>\n<pre>&gt; sample --two-pass -p 15 my_data.csv &gt; my_sample.csv\n</pre>\n<p>Two-pass sampling uses memory proportional to the number of elements in the sample.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 846634, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "302f3d714cb489b980c1dfbf0c82faa1", "sha256": "5373b144710c6d797034a6a62cda8e111d3e07fb11299262dcc53b55fb43df80"}, "downloads": -1, "filename": "sample-cli-0.0.1.tar.gz", "has_sig": false, "md5_digest": "302f3d714cb489b980c1dfbf0c82faa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5080, "upload_time": "2013-08-23T04:42:44", "upload_time_iso_8601": "2013-08-23T04:42:44.672374Z", "url": "https://files.pythonhosted.org/packages/93/54/cbf3e75db1fd1e68b39ce9d5357a08dd1e9a1f518186324feaf76de52494/sample-cli-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "302f3d714cb489b980c1dfbf0c82faa1", "sha256": "5373b144710c6d797034a6a62cda8e111d3e07fb11299262dcc53b55fb43df80"}, "downloads": -1, "filename": "sample-cli-0.0.1.tar.gz", "has_sig": false, "md5_digest": "302f3d714cb489b980c1dfbf0c82faa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5080, "upload_time": "2013-08-23T04:42:44", "upload_time_iso_8601": "2013-08-23T04:42:44.672374Z", "url": "https://files.pythonhosted.org/packages/93/54/cbf3e75db1fd1e68b39ce9d5357a08dd1e9a1f518186324feaf76de52494/sample-cli-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:56 2020"}