{"info": {"author": "pjongy", "author_email": "whdduq218@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# DSerial\n[![PyPI version](https://badge.fury.io/py/dserial.svg)](https://pypi.org/project/dserial/)\n\n\n## 0. Introduction\nDSerial is dictionary serializer with type checking methodology by declared type hinting\n\n## 1. Requirements\npython 3.7 +\n\n## 2. Quick start\n\n### 2.0. Installation\n```shell script\npip3 install dserial\n```\n\n### 2.1. Default type\n```json\n{\n  \"int_variable\": 1234,\n  \"string_variable\": \"string_value\"\n}\n```\nFor serialize above dictionary, data class can be below code\n```python\nclass DefaultData(TypeCheckingDictSerializer):\n    int_variable: int\n    string_variable: str\n```\nand usage:\n```python\n>>> dictionary = {\n  'int_variable': 1234,\n  'string_variable': 'string_value'\n}\n>>> data = DefaultData(dictionary)\n>>> data.int_variable\n1234\n>>> data.string_variable\nstring_value\n```\n\n### 2.2. Nested type\n```json\n{\n  \"int_variable\": 1234,\n  \"string_variable\": \"string_value\",\n  \"nested\": {\n    \"int_variable\": 4321\n  }\n}\n```\nFor serialize above dictionary, data class can be below code\n```python\nclass NestedData(TypeCheckingDictSerializer):\n    int_variable: int\n\nclass DefaultData(TypeCheckingDictSerializer):\n    int_variable: int\n    string_variable: str\n    nested: NestedData\n```\nand usage:\n```python\n>>> dictionary = {\n    'int_variable': 1234,\n    'string_variable': 'string_value',\n    'nested': {\n        'int_variable': 4321\n    }\n}\n>>> data = DefaultData(dictionary)\n>>> data.int_variable\n1234\n>>> data.string_variable\nstring_value\n>>> data.nested.int_variable\n4321\n```\n\n### 2.3. Repeated type\n```json\n{\n  \"int_variable\": 1234,\n  \"string_variable\": \"string_value\",\n  \"nested\": {\n    \"int_variable\": 4321\n  },\n  \"repeated\": [1, 2, 3]\n}\n```\nFor serialize above dictionary, data class can be below code\n```python\nclass RepeatedData(TypeAnnotatedList):\n    @staticmethod\n    def get_type():\n        return int\n\nclass NestedData(TypeCheckingDictSerializer):\n    int_variable: int\n\nclass DefaultData(TypeCheckingDictSerializer):\n    int_variable: int\n    string_variable: str\n    nested: NestedData\n    repeated: RepeatedData\n```\nand usage:\n```python\n>>> dictionary = {\n    'int_variable': 1234,\n    'string_variable': 'string_value',\n    'nested': {\n        'int_variable': 4321\n    },\n    'repeated': [1, 2, 3]\n}\n>>> data = DefaultData(dictionary)\n>>> data.int_variable\n1234\n>>> data.string_variable\nstring_value\n>>> data.nested.int_variable\n4321\n>>> len(data.repeated)\n3\n>>> data.repeated[0]\n1\n```\n\n### 2.4. More complex\n```json\n{\n  \"int_variable\": 1234,\n  \"string_variable\": \"string_value\",\n  \"repeated_nested\": [{\n    \"int_variable\": 3133\n  }, {\n    \"int_variable\": 1337\n  }]\n}\n```\nFor serialize above dictionary, data class can be below code\n```python\nclass NestedData(TypeCheckingDictSerializer):\n    int_variable: int\n\nclass RepeatedData(TypeAnnotatedList):\n    @staticmethod\n    def get_type():\n        return NestedData\n\nclass DefaultData(TypeCheckingDictSerializer):\n    int_variable: int\n    string_variable: str\n    repeated_nested: RepeatedData\n```\nand usage:\n```python\n>>> dictionary = {\n    'int_variable': 1234,\n    'string_variable': 'string_value',\n    'repeated_nested': [{\n        'int_variable': 3133\n    }, {\n        'int_variable': 1337\n    }]\n}\n>>> data = DefaultData(dictionary)\n>>> data.int_variable\n1234\n>>> data.string_variable\nstring_value\n>>> len(data.repeated_nested)\n3\n>>> data.repeated[0].int_variable\n3133\n```\n\n\n## 3. Test\n```shell script\n> dserial$ python3 -m tests\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pjongy/dserial", "keywords": "serialize,type", "license": "", "maintainer": "", "maintainer_email": "", "name": "dserial", "package_url": "https://pypi.org/project/dserial/", "platform": "", "project_url": "https://pypi.org/project/dserial/", "project_urls": {"Homepage": "https://github.com/pjongy/dserial"}, "release_url": "https://pypi.org/project/dserial/0.0.2/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Python data serializer with type checking", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DSerial</h1>\n<p><a href=\"https://pypi.org/project/dserial/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfc22a2ca67f5857b1601397aee5a784ed90133b/68747470733a2f2f62616467652e667572792e696f2f70792f6473657269616c2e737667\"></a></p>\n<h2>0. Introduction</h2>\n<p>DSerial is dictionary serializer with type checking methodology by declared type hinting</p>\n<h2>1. Requirements</h2>\n<p>python 3.7 +</p>\n<h2>2. Quick start</h2>\n<h3>2.0. Installation</h3>\n<pre>pip3 install dserial\n</pre>\n<h3>2.1. Default type</h3>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"int_variable\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"string_variable\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string_value\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For serialize above dictionary, data class can be below code</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">DefaultData</span><span class=\"p\">(</span><span class=\"n\">TypeCheckingDictSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">int_variable</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">string_variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</pre>\n<p>and usage:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'int_variable'</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n  <span class=\"s1\">'string_variable'</span><span class=\"p\">:</span> <span class=\"s1\">'string_value'</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DefaultData</span><span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">int_variable</span>\n<span class=\"mi\">1234</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">string_variable</span>\n<span class=\"n\">string_value</span>\n</pre>\n<h3>2.2. Nested type</h3>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"int_variable\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"string_variable\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string_value\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"nested\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"int_variable\"</span><span class=\"p\">:</span> <span class=\"mi\">4321</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For serialize above dictionary, data class can be below code</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">NestedData</span><span class=\"p\">(</span><span class=\"n\">TypeCheckingDictSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">int_variable</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DefaultData</span><span class=\"p\">(</span><span class=\"n\">TypeCheckingDictSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">int_variable</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">string_variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">nested</span><span class=\"p\">:</span> <span class=\"n\">NestedData</span>\n</pre>\n<p>and usage:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'int_variable'</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n    <span class=\"s1\">'string_variable'</span><span class=\"p\">:</span> <span class=\"s1\">'string_value'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'nested'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'int_variable'</span><span class=\"p\">:</span> <span class=\"mi\">4321</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DefaultData</span><span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">int_variable</span>\n<span class=\"mi\">1234</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">string_variable</span>\n<span class=\"n\">string_value</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">nested</span><span class=\"o\">.</span><span class=\"n\">int_variable</span>\n<span class=\"mi\">4321</span>\n</pre>\n<h3>2.3. Repeated type</h3>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"int_variable\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"string_variable\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string_value\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"nested\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"int_variable\"</span><span class=\"p\">:</span> <span class=\"mi\">4321</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"repeated\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For serialize above dictionary, data class can be below code</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">RepeatedData</span><span class=\"p\">(</span><span class=\"n\">TypeAnnotatedList</span><span class=\"p\">):</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_type</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NestedData</span><span class=\"p\">(</span><span class=\"n\">TypeCheckingDictSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">int_variable</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DefaultData</span><span class=\"p\">(</span><span class=\"n\">TypeCheckingDictSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">int_variable</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">string_variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">nested</span><span class=\"p\">:</span> <span class=\"n\">NestedData</span>\n    <span class=\"n\">repeated</span><span class=\"p\">:</span> <span class=\"n\">RepeatedData</span>\n</pre>\n<p>and usage:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'int_variable'</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n    <span class=\"s1\">'string_variable'</span><span class=\"p\">:</span> <span class=\"s1\">'string_value'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'nested'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'int_variable'</span><span class=\"p\">:</span> <span class=\"mi\">4321</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'repeated'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DefaultData</span><span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">int_variable</span>\n<span class=\"mi\">1234</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">string_variable</span>\n<span class=\"n\">string_value</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">nested</span><span class=\"o\">.</span><span class=\"n\">int_variable</span>\n<span class=\"mi\">4321</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">repeated</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">repeated</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"mi\">1</span>\n</pre>\n<h3>2.4. More complex</h3>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"int_variable\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"string_variable\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string_value\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"repeated_nested\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"nt\">\"int_variable\"</span><span class=\"p\">:</span> <span class=\"mi\">3133</span>\n  <span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"int_variable\"</span><span class=\"p\">:</span> <span class=\"mi\">1337</span>\n  <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For serialize above dictionary, data class can be below code</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">NestedData</span><span class=\"p\">(</span><span class=\"n\">TypeCheckingDictSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">int_variable</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RepeatedData</span><span class=\"p\">(</span><span class=\"n\">TypeAnnotatedList</span><span class=\"p\">):</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_type</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">NestedData</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DefaultData</span><span class=\"p\">(</span><span class=\"n\">TypeCheckingDictSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">int_variable</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">string_variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">repeated_nested</span><span class=\"p\">:</span> <span class=\"n\">RepeatedData</span>\n</pre>\n<p>and usage:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'int_variable'</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n    <span class=\"s1\">'string_variable'</span><span class=\"p\">:</span> <span class=\"s1\">'string_value'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'repeated_nested'</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"s1\">'int_variable'</span><span class=\"p\">:</span> <span class=\"mi\">3133</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'int_variable'</span><span class=\"p\">:</span> <span class=\"mi\">1337</span>\n    <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DefaultData</span><span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">int_variable</span>\n<span class=\"mi\">1234</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">string_variable</span>\n<span class=\"n\">string_value</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">repeated_nested</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">repeated</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">int_variable</span>\n<span class=\"mi\">3133</span>\n</pre>\n<h2>3. Test</h2>\n<pre>&gt; dserial$ python3 -m tests\n</pre>\n\n          </div>"}, "last_serial": 6530331, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0d6fc3e7bea1ca355b74bc07e828f8d1", "sha256": "0169d3654d3dad73e8cb8e15d8dd95995de665f8e9da26bf8a3d48d8cbc048cd"}, "downloads": -1, "filename": "dserial-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0d6fc3e7bea1ca355b74bc07e828f8d1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3809, "upload_time": "2020-01-01T17:35:43", "upload_time_iso_8601": "2020-01-01T17:35:43.094043Z", "url": "https://files.pythonhosted.org/packages/f8/4a/65dc5fd6b7392523a41470475fe5e003ba47bad0f5ecb3a500fbcc4566a8/dserial-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bca032f1da91d9aa3e16def09f0d212a", "sha256": "c1830d1e4af8984f97d55ee40221dd393b90ee7885a71f128345b6e2fcc76f1e"}, "downloads": -1, "filename": "dserial-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bca032f1da91d9aa3e16def09f0d212a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3845, "upload_time": "2020-01-28T05:23:03", "upload_time_iso_8601": "2020-01-28T05:23:03.783252Z", "url": "https://files.pythonhosted.org/packages/24/fd/c24a0ac52a8ca8df76c0fbf73badc943572b4726f3b099f71d952a65977a/dserial-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bca032f1da91d9aa3e16def09f0d212a", "sha256": "c1830d1e4af8984f97d55ee40221dd393b90ee7885a71f128345b6e2fcc76f1e"}, "downloads": -1, "filename": "dserial-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bca032f1da91d9aa3e16def09f0d212a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3845, "upload_time": "2020-01-28T05:23:03", "upload_time_iso_8601": "2020-01-28T05:23:03.783252Z", "url": "https://files.pythonhosted.org/packages/24/fd/c24a0ac52a8ca8df76c0fbf73badc943572b4726f3b099f71d952a65977a/dserial-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:24 2020"}