{"info": {"author": "Stijn Debrouwere", "author_email": "stijn@debrouwere.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": "Inspect.\n\nWhen documenting a library or software product written in Python, often\na README is not enough, but full-blown Sphinx is too much work or too\nrigid.\n\nInspect is a command-line tool that will automatically document Python\ncode, but it returns the output as machine-readable JSON or\nhuman-readable Markdown, so you retain full control of how to render the\ndocumentation.\n\nUsage: inspect [] [options]\n\nOptions: -m --markdown At what level to start headers. --include ...\n--exclude ...\n\nIf you only need a single object documented (whether a function, a class\nor something else), you can use the\n\n.. raw:: html\n\n   <object> \n\nargument:\n\n::\n\n    # will only include documentation on `A`\n    inspect fixtures/example.py A\n\nFiltering the output with ``--include`` and ``--exclude`` ensures that\nyour code description only contains exactly what you want it to. Some\nexamples:\n\n::\n\n    # only include class methods if they've been documented\n    inspect fixtures/example.py --include members.documented\n    # only include classes\n    inspect fixtures/example.py --include type:class\n    # only document function `factorize` and class `Bean`\n    inspect fixtures/example.py --include name:fun,name:B\n    # only include documented methods on Bean\n    # (these two are identical)\n    inspect fixtures/example.py Bean --include documented\n    inspect fixtures/example.py --include name:Bean,members.documented\n\nAs you can see, ``.`` traverses the hierarchy and ``:`` is the value to\ntest against. (If you don't specify a value, we will test on presence.)\n\n``,`` separates multiple criteria that are OR'ed together.\n\nTodo:\n\n-  improve documentation\n-  unit test the filtering mechanism\n-  fill out missing information in the description JSON (if any)\n-  an ``intercalate`` utility that runs shell commands inside of ``%%``\n   tags in a file and replaces the tags with the standard output from\n   those commands\n\n", "description_content_type": null, "docs_url": null, "download_url": "http://www.github.com/debrouwere/python-inspector/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "documentation inspect inspection introspection autodoc sphinx", "license": "ISC", "maintainer": null, "maintainer_email": null, "name": "inspected", "package_url": "https://pypi.org/project/inspected/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/inspected/", "project_urls": {"Download": "http://www.github.com/debrouwere/python-inspector/tarball/master", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/inspected/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Reads your code and returns a JSON description you can use to generate documentation. Like Sphinx AutoDoc but without Sphinx.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Inspect.<br><br>When documenting a library or software product written in Python, often<br>a README is not enough, but full-blown Sphinx is too much work or too<br>rigid.<br><br>Inspect is a command-line tool that will automatically document Python<br>code, but it returns the output as machine-readable JSON or<br>human-readable Markdown, so you retain full control of how to render the<br>documentation.<br><br>Usage: inspect [] [options]<br><br>Options: -m --markdown At what level to start headers. --include ...<br>--exclude ...<br><br>If you only need a single object documented (whether a function, a class<br>or something else), you can use the<br><br>.. raw:: html<br><br>   &lt;object&gt; <br><br>argument:<br><br>::<br><br>    # will only include documentation on `A`<br>    inspect fixtures/example.py A<br><br>Filtering the output with ``--include`` and ``--exclude`` ensures that<br>your code description only contains exactly what you want it to. Some<br>examples:<br><br>::<br><br>    # only include class methods if they've been documented<br>    inspect fixtures/example.py --include members.documented<br>    # only include classes<br>    inspect fixtures/example.py --include type:class<br>    # only document function `factorize` and class `Bean`<br>    inspect fixtures/example.py --include name:fun,name:B<br>    # only include documented methods on Bean<br>    # (these two are identical)<br>    inspect fixtures/example.py Bean --include documented<br>    inspect fixtures/example.py --include name:Bean,members.documented<br><br>As you can see, ``.`` traverses the hierarchy and ``:`` is the value to<br>test against. (If you don't specify a value, we will test on presence.)<br><br>``,`` separates multiple criteria that are OR'ed together.<br><br>Todo:<br><br>-  improve documentation<br>-  unit test the filtering mechanism<br>-  fill out missing information in the description JSON (if any)<br>-  an ``intercalate`` utility that runs shell commands inside of ``%%``<br>   tags in a file and replaces the tags with the standard output from<br>   those commands<br><br>\n          </div>"}, "last_serial": 1302830, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "5821261cb59c5a3043c32d6ae5c1e15f", "sha256": "19c5b4a5af1774b2466e8e5dbbb5c81911dcd897d40ec96570b840ab8f92dadf"}, "downloads": -1, "filename": "inspected-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5821261cb59c5a3043c32d6ae5c1e15f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4984, "upload_time": "2014-11-11T23:00:22", "upload_time_iso_8601": "2014-11-11T23:00:22.753534Z", "url": "https://files.pythonhosted.org/packages/85/d3/418a8e3bb9bfd87504500d4bc43ab58650e905722644eb66c9d7f6255597/inspected-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5821261cb59c5a3043c32d6ae5c1e15f", "sha256": "19c5b4a5af1774b2466e8e5dbbb5c81911dcd897d40ec96570b840ab8f92dadf"}, "downloads": -1, "filename": "inspected-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5821261cb59c5a3043c32d6ae5c1e15f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4984, "upload_time": "2014-11-11T23:00:22", "upload_time_iso_8601": "2014-11-11T23:00:22.753534Z", "url": "https://files.pythonhosted.org/packages/85/d3/418a8e3bb9bfd87504500d4bc43ab58650e905722644eb66c9d7f6255597/inspected-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:47 2020"}