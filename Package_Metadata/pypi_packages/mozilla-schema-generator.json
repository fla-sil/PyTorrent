{"info": {"author": "Frank Bertsch", "author_email": "frank@mozilla.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "[![CircleCI](https://circleci.com/gh/mozilla/mozilla-schema-generator/tree/master.svg?style=svg)](https://circleci.com/gh/mozilla/mozilla-schema-generator/tree/master)\n\n# Mozilla Schema Generator\n\nA library for generating full representations of Mozilla telemetry pings.\n\nSee [Mozilla Pipeline Schemas](https://www.github.com/mozilla-services/mozilla-pipeline-services)\nfor the more generic structure of pings. This library takes those generic structures and fills in\nall of the probes we expect to see in the appropriate places.\n\n## Telemetry Integration\n\nThere are two pings we are targeting for integration with this library:\n\n1. [The Main Ping](http://gecko-docs.mozilla.org.s3.amazonaws.com/toolkit/components/telemetry/telemetry/data/main-ping.html)\n   is the historical Firefox Desktop ping, and contains many more than ten-thousand total pieces of data.\n2. [The Glean Ping](https://github.com/mozilla/glean_parser) is the new ping-type being created for\n   more generic data collection.\n\nThis library takes the information for what should be in those pings from the [Probe Info Service](https://www.github.com/mozilla/probe-scraper).\n\n## Data Store Integration\n\nThe primary use of the schemas is for integration with the\n[Schema Transpiler](https://www.github.com/mozilla/jsonschema-transpiler). \nThe schemas that this repository generates can be transpiled into Avro and Bigquery. They define\nthe schema of the Avro and BigQuery tables that the [BQ Sink](https://www.github.com/mozilla/gcp-ingestion)\nwrites to.\n\n### BigQuery Limitations and Splitting\n\nBigQuery has a hard limit of ten thousand columns on any single table. This library\ncan take that limitation into account by splitting schemas into multiple tables. Each\ntable has some common information that are duplicated in every table, and then a set\nof fields that are unique to that table. The join of these tables gives the full\nset of fields available from the ping.\n\nTo decide on a table split, we include the `table_group` configuration in the configuration\nfile. For example, `payload/histograms` has `table_group: histograms`; this indicates that\nthere will be a table outputted with just histograms.\n\nCurrently, generates tables for:\n- Histograms\n- Keyed Histograms\n- Scalars\n- Keyed Scalars\n- Everything else\n\nIf a single table expands beyond 9000 columns, we move the new fields to the next table.\nFor example, main_histograms_1 and main_histograms_2.\n\nNote: Tables are only split if the `--split` parameter is provided.\n\n## Validation\n\nA secondary use-case of these schemas is for validation. The schemas produced are guaranteed to\nbe more correct, since they include explicit definitions of every metric and probe.\n\n## Usage\n\n### Main Ping\n\nGenerate the Full Main Ping schema:\n\n```\nmozilla-schema-generator generate-main-ping\n```\n\nGenerate the Main Ping schema divided among tables (for BigQuery):\n```\nmozilla-schema-generator generate-main-ping --split --out-dir main-ping\n```\n\nThe `out-dir` parameter will be the namespace for the pings.\n\nTo see a full list of options, run `mozilla-schema-generator generate-main-ping --help`.\n\n\n### Glean\n\nGenerate all Glean ping schemas - one for each application, for each ping\nthat application sends:\n\n```\nmozilla-schema-generator generate-glean-pings\n```\n\nWrite schemas to a directory:\n```\nmozilla-schema-generator generate-glean-pings --out-dir glean-ping\n```\n\nTo see a full list of options, run `mozilla-schema-generator generate-glean-pings --help`.\n\n\n## Configuration Files\n\nConfiguration files are default found in `/config`. You can also specify your own when running the generator.\n\nConfiguration files match certain parts of a ping to certain types of probes or metrics. The nesting\nof the config file matches the ping it is filling in. For example, Glean stores probe types under\nthe `metrics` key, so the nesting looks like this:\n```\n{\n    \"metrics\": {\n        \"string\": {\n            <METRIC_ID>: {...}\n        }\n    }\n}\n```\n\nWhile the generic schema doesn't include information about the specific `<METRIC_ID>`s being included,\nthe schema-generator does. To include the correct metrics that we would find in that section of the ping,\nwe would organize the `config.yaml` file like this:\n\n```\nmetrics:\n    string:\n        match:\n            type: string\n```\n\nThe `match` key indicates that we should fill-in this section of the ping schema with metrics,\nand the `type: string` makes sure we only put string metrics in there. You can do an exact\nmatch on any field available in the ping info from the [probe-info-service](https://probeinfo.telemetry.mozilla.org/glean/glean/metrics),\nwhich also contains the [Desktop probes](https://probeinfo.telemetry.mozilla.org/firefox/all/main/all_probes).\n\nThere are a few additional keywords allowable under any field:\n* `contains` - e.g. `process: contains: main`, indicates that the `process` field is an array\n  and it should only match those that include the entry `main`.\n* `not` - e.g. `send_in_pings: not: glean_ping_info`, indicates that we should match\n  any field for `send_in_pings` _except_ `glean_ping_info`.\n\n### `table_group` Key\n\nThis specific field is for indicating which table group that section of the ping should be included in when\nsplitting the schema. Currently we do not split the Glean ping, only the Main. See the section on [BigQuery\nLimitations and Splitting](#bigquery-limitations-and-splitting) for more info.\n\n## Development and Testing\n\nInstall requirements:\n```\nmake install-requirements\n```\n\nRun tests:\n```\nmake test\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mozilla/mozilla-schema-generator", "keywords": "mozilla-schema-generator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mozilla-schema-generator", "package_url": "https://pypi.org/project/mozilla-schema-generator/", "platform": "", "project_url": "https://pypi.org/project/mozilla-schema-generator/", "project_urls": {"Homepage": "https://github.com/mozilla/mozilla-schema-generator"}, "release_url": "https://pypi.org/project/mozilla-schema-generator/0.1.4/", "requires_dist": ["click", "jsonschema", "pyyaml", "requests"], "requires_python": ">=3.6.0", "summary": "Create full representations of schemas using the probe info service.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/mozilla/mozilla-schema-generator/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/821731f3e8f33685060983674e9a5e8bd8ad04bc/68747470733a2f2f636972636c6563692e636f6d2f67682f6d6f7a696c6c612f6d6f7a696c6c612d736368656d612d67656e657261746f722f747265652f6d61737465722e7376673f7374796c653d737667\"></a></p>\n<h1>Mozilla Schema Generator</h1>\n<p>A library for generating full representations of Mozilla telemetry pings.</p>\n<p>See <a href=\"https://www.github.com/mozilla-services/mozilla-pipeline-services\" rel=\"nofollow\">Mozilla Pipeline Schemas</a>\nfor the more generic structure of pings. This library takes those generic structures and fills in\nall of the probes we expect to see in the appropriate places.</p>\n<h2>Telemetry Integration</h2>\n<p>There are two pings we are targeting for integration with this library:</p>\n<ol>\n<li><a href=\"http://gecko-docs.mozilla.org.s3.amazonaws.com/toolkit/components/telemetry/telemetry/data/main-ping.html\" rel=\"nofollow\">The Main Ping</a>\nis the historical Firefox Desktop ping, and contains many more than ten-thousand total pieces of data.</li>\n<li><a href=\"https://github.com/mozilla/glean_parser\" rel=\"nofollow\">The Glean Ping</a> is the new ping-type being created for\nmore generic data collection.</li>\n</ol>\n<p>This library takes the information for what should be in those pings from the <a href=\"https://www.github.com/mozilla/probe-scraper\" rel=\"nofollow\">Probe Info Service</a>.</p>\n<h2>Data Store Integration</h2>\n<p>The primary use of the schemas is for integration with the\n<a href=\"https://www.github.com/mozilla/jsonschema-transpiler\" rel=\"nofollow\">Schema Transpiler</a>.\nThe schemas that this repository generates can be transpiled into Avro and Bigquery. They define\nthe schema of the Avro and BigQuery tables that the <a href=\"https://www.github.com/mozilla/gcp-ingestion\" rel=\"nofollow\">BQ Sink</a>\nwrites to.</p>\n<h3>BigQuery Limitations and Splitting</h3>\n<p>BigQuery has a hard limit of ten thousand columns on any single table. This library\ncan take that limitation into account by splitting schemas into multiple tables. Each\ntable has some common information that are duplicated in every table, and then a set\nof fields that are unique to that table. The join of these tables gives the full\nset of fields available from the ping.</p>\n<p>To decide on a table split, we include the <code>table_group</code> configuration in the configuration\nfile. For example, <code>payload/histograms</code> has <code>table_group: histograms</code>; this indicates that\nthere will be a table outputted with just histograms.</p>\n<p>Currently, generates tables for:</p>\n<ul>\n<li>Histograms</li>\n<li>Keyed Histograms</li>\n<li>Scalars</li>\n<li>Keyed Scalars</li>\n<li>Everything else</li>\n</ul>\n<p>If a single table expands beyond 9000 columns, we move the new fields to the next table.\nFor example, main_histograms_1 and main_histograms_2.</p>\n<p>Note: Tables are only split if the <code>--split</code> parameter is provided.</p>\n<h2>Validation</h2>\n<p>A secondary use-case of these schemas is for validation. The schemas produced are guaranteed to\nbe more correct, since they include explicit definitions of every metric and probe.</p>\n<h2>Usage</h2>\n<h3>Main Ping</h3>\n<p>Generate the Full Main Ping schema:</p>\n<pre><code>mozilla-schema-generator generate-main-ping\n</code></pre>\n<p>Generate the Main Ping schema divided among tables (for BigQuery):</p>\n<pre><code>mozilla-schema-generator generate-main-ping --split --out-dir main-ping\n</code></pre>\n<p>The <code>out-dir</code> parameter will be the namespace for the pings.</p>\n<p>To see a full list of options, run <code>mozilla-schema-generator generate-main-ping --help</code>.</p>\n<h3>Glean</h3>\n<p>Generate all Glean ping schemas - one for each application, for each ping\nthat application sends:</p>\n<pre><code>mozilla-schema-generator generate-glean-pings\n</code></pre>\n<p>Write schemas to a directory:</p>\n<pre><code>mozilla-schema-generator generate-glean-pings --out-dir glean-ping\n</code></pre>\n<p>To see a full list of options, run <code>mozilla-schema-generator generate-glean-pings --help</code>.</p>\n<h2>Configuration Files</h2>\n<p>Configuration files are default found in <code>/config</code>. You can also specify your own when running the generator.</p>\n<p>Configuration files match certain parts of a ping to certain types of probes or metrics. The nesting\nof the config file matches the ping it is filling in. For example, Glean stores probe types under\nthe <code>metrics</code> key, so the nesting looks like this:</p>\n<pre><code>{\n    \"metrics\": {\n        \"string\": {\n            &lt;METRIC_ID&gt;: {...}\n        }\n    }\n}\n</code></pre>\n<p>While the generic schema doesn't include information about the specific <code>&lt;METRIC_ID&gt;</code>s being included,\nthe schema-generator does. To include the correct metrics that we would find in that section of the ping,\nwe would organize the <code>config.yaml</code> file like this:</p>\n<pre><code>metrics:\n    string:\n        match:\n            type: string\n</code></pre>\n<p>The <code>match</code> key indicates that we should fill-in this section of the ping schema with metrics,\nand the <code>type: string</code> makes sure we only put string metrics in there. You can do an exact\nmatch on any field available in the ping info from the <a href=\"https://probeinfo.telemetry.mozilla.org/glean/glean/metrics\" rel=\"nofollow\">probe-info-service</a>,\nwhich also contains the <a href=\"https://probeinfo.telemetry.mozilla.org/firefox/all/main/all_probes\" rel=\"nofollow\">Desktop probes</a>.</p>\n<p>There are a few additional keywords allowable under any field:</p>\n<ul>\n<li><code>contains</code> - e.g. <code>process: contains: main</code>, indicates that the <code>process</code> field is an array\nand it should only match those that include the entry <code>main</code>.</li>\n<li><code>not</code> - e.g. <code>send_in_pings: not: glean_ping_info</code>, indicates that we should match\nany field for <code>send_in_pings</code> <em>except</em> <code>glean_ping_info</code>.</li>\n</ul>\n<h3><code>table_group</code> Key</h3>\n<p>This specific field is for indicating which table group that section of the ping should be included in when\nsplitting the schema. Currently we do not split the Glean ping, only the Main. See the section on <a href=\"#bigquery-limitations-and-splitting\" rel=\"nofollow\">BigQuery\nLimitations and Splitting</a> for more info.</p>\n<h2>Development and Testing</h2>\n<p>Install requirements:</p>\n<pre><code>make install-requirements\n</code></pre>\n<p>Run tests:</p>\n<pre><code>make test\n</code></pre>\n\n          </div>"}, "last_serial": 6750522, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7ceb637d00e46751f979cf86da8a290c", "sha256": "eed8677363485177bc92b0e8e84e80e7181e8516b8f94a67c07374c9f507e4f1"}, "downloads": -1, "filename": "mozilla_schema_generator-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7ceb637d00e46751f979cf86da8a290c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21712, "upload_time": "2019-03-29T17:43:14", "upload_time_iso_8601": "2019-03-29T17:43:14.868752Z", "url": "https://files.pythonhosted.org/packages/bd/48/73606185605bf19ea1cd99f24ff941b87793b1897889ec24b47852ffe460/mozilla_schema_generator-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86eaef0db12116e75bdf9cac5f71516f", "sha256": "687e3365f639fcc268171031f461db11596df44112935af578b1fdd70a4db98a"}, "downloads": -1, "filename": "mozilla-schema-generator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "86eaef0db12116e75bdf9cac5f71516f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19869, "upload_time": "2019-03-29T17:43:17", "upload_time_iso_8601": "2019-03-29T17:43:17.075546Z", "url": "https://files.pythonhosted.org/packages/69/a0/948ae5dbd4151d9176a8cd2b16e8b0b9f1ce2ff56b2d940f26c632922d79/mozilla-schema-generator-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ff84a543c1a77609e1cd8ced1c4ebbbd", "sha256": "6c97b9b54ab4687e20d05d69b8e36f22bd09f829f29e73b56bd6cf51684abc71"}, "downloads": -1, "filename": "mozilla_schema_generator-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff84a543c1a77609e1cd8ced1c4ebbbd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21711, "upload_time": "2019-03-29T17:48:51", "upload_time_iso_8601": "2019-03-29T17:48:51.269981Z", "url": "https://files.pythonhosted.org/packages/60/32/e59ce49bcefff058b74acf72514e67ad188d4594e8e3db638adda86ae8a3/mozilla_schema_generator-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "272341e76efc9efbd464bd58ba190589", "sha256": "a59d6cf73ea350e7434158c484a12d9b9a18ad9d3e5fa47283d5ae2e9311d047"}, "downloads": -1, "filename": "mozilla-schema-generator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "272341e76efc9efbd464bd58ba190589", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19858, "upload_time": "2019-03-29T17:48:52", "upload_time_iso_8601": "2019-03-29T17:48:52.555988Z", "url": "https://files.pythonhosted.org/packages/84/53/663c85d364227266ea842ab4ecef53b0201ca3469ca9bbd774c965567ccf/mozilla-schema-generator-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "15a6f469f6700ddc937afabea63621d4", "sha256": "1ed11eb4b2326218c300e1384b6c10a376c18a3dbcbde440bb32c73ab8931368"}, "downloads": -1, "filename": "mozilla_schema_generator-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15a6f469f6700ddc937afabea63621d4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22699, "upload_time": "2019-03-29T18:02:34", "upload_time_iso_8601": "2019-03-29T18:02:34.441828Z", "url": "https://files.pythonhosted.org/packages/3b/ad/aa9ecf6db69fc75495d1ec2bab5b1dc4f50e5ad0cbdb3b2b4159c1b02db0/mozilla_schema_generator-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0dea72fa8f2748e6ffa0cf1f0211651f", "sha256": "7981aa0dab93f84158c30d1a3736cab9bb0b42e7d3f2f5af1fde78827d852d91"}, "downloads": -1, "filename": "mozilla-schema-generator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0dea72fa8f2748e6ffa0cf1f0211651f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20545, "upload_time": "2019-03-29T18:02:35", "upload_time_iso_8601": "2019-03-29T18:02:35.945262Z", "url": "https://files.pythonhosted.org/packages/d2/ac/208eaf28d067a90b8c9dfe076bd82d947449535f34a71a6189141bf840e1/mozilla-schema-generator-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fc3548094b99df1b568e3b73addf6918", "sha256": "047e6cfbed33fcf0bd4156d3e48eaeb77f2a240c73964297f80db08dcec5b87a"}, "downloads": -1, "filename": "mozilla_schema_generator-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc3548094b99df1b568e3b73addf6918", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20022, "upload_time": "2019-04-24T18:52:42", "upload_time_iso_8601": "2019-04-24T18:52:42.682800Z", "url": "https://files.pythonhosted.org/packages/13/2d/78d6aca508c72717b8ac6f0266afaff70bb93ac6384925ee2ea1e5935c4b/mozilla_schema_generator-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efc228ed1bd5ff5ff365931ca775562e", "sha256": "55833a4e332338fb4bad37a09b030ff9d3628939ba900d812ed11a9b2b9e6f24"}, "downloads": -1, "filename": "mozilla-schema-generator-0.1.3.tar.gz", "has_sig": false, "md5_digest": "efc228ed1bd5ff5ff365931ca775562e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20801, "upload_time": "2019-04-24T18:52:44", "upload_time_iso_8601": "2019-04-24T18:52:44.261059Z", "url": "https://files.pythonhosted.org/packages/dc/de/2b0fef0873cce3154d78e36e5ea665b06130ad0523f0cbc509c7a81adaab/mozilla-schema-generator-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "242e303dff051e219eb285944949467a", "sha256": "49a63fc586fa42349dc218fda7a4bb738986bfb525237c798667a8060b50a0e4"}, "downloads": -1, "filename": "mozilla_schema_generator-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "242e303dff051e219eb285944949467a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 24822, "upload_time": "2020-03-04T21:00:00", "upload_time_iso_8601": "2020-03-04T21:00:00.404409Z", "url": "https://files.pythonhosted.org/packages/11/7e/13d556fd1b4ebbe3838cd758c050e84bf92432fd47a6819bf1f447838f29/mozilla_schema_generator-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62b1556011464576ad8f50c639f921ca", "sha256": "f99218f75b74b23469d56594a2366d9b59bbda32bf129e3caa2891e4412cbe7a"}, "downloads": -1, "filename": "mozilla-schema-generator-0.1.4.tar.gz", "has_sig": false, "md5_digest": "62b1556011464576ad8f50c639f921ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 22647, "upload_time": "2020-03-04T21:00:01", "upload_time_iso_8601": "2020-03-04T21:00:01.587496Z", "url": "https://files.pythonhosted.org/packages/be/4b/c67259a309dd0d3840d076694a1ce023f386141594a029793ed429f12c6d/mozilla-schema-generator-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "242e303dff051e219eb285944949467a", "sha256": "49a63fc586fa42349dc218fda7a4bb738986bfb525237c798667a8060b50a0e4"}, "downloads": -1, "filename": "mozilla_schema_generator-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "242e303dff051e219eb285944949467a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 24822, "upload_time": "2020-03-04T21:00:00", "upload_time_iso_8601": "2020-03-04T21:00:00.404409Z", "url": "https://files.pythonhosted.org/packages/11/7e/13d556fd1b4ebbe3838cd758c050e84bf92432fd47a6819bf1f447838f29/mozilla_schema_generator-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62b1556011464576ad8f50c639f921ca", "sha256": "f99218f75b74b23469d56594a2366d9b59bbda32bf129e3caa2891e4412cbe7a"}, "downloads": -1, "filename": "mozilla-schema-generator-0.1.4.tar.gz", "has_sig": false, "md5_digest": "62b1556011464576ad8f50c639f921ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 22647, "upload_time": "2020-03-04T21:00:01", "upload_time_iso_8601": "2020-03-04T21:00:01.587496Z", "url": "https://files.pythonhosted.org/packages/be/4b/c67259a309dd0d3840d076694a1ce023f386141594a029793ed429f12c6d/mozilla-schema-generator-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:23 2020"}