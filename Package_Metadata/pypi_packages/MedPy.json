{"info": {"author": "Oskar Maier", "author_email": "oskar.maier@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Other Environment", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Healthcare Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: C++", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Medical Science Apps."], "description": "# MedPy\n\n[GitHub](https://github.com/loli/medpy/) | [Documentation](http://loli.github.io/medpy/) | [Tutorials](http://loli.github.io/medpy/) | [Issue tracker](https://github.com/loli/medpy/issues) | [Contact](oskar.maier@gmail.com)\n\n**MedPy** is a library and script collection for medical image processing in Python, providing basic functionalities for **reading**, **writing** and **manipulating** large images of **arbitrary dimensionality**.\nIts main contributions are n-dimensional versions of popular **image filters**, a collection of **image feature extractors**, ready to be used with [scikit-learn](http://scikit-learn.org), and an exhaustive n-dimensional **graph-cut** package.\n\n* [Installation](#installation)\n* [Getting started with the library](#getting-started-with-the-library)\n* [Getting started with the scripts](#getting-started-with-the-scripts)\n* [Read/write support for medical image formats](#read-write-support-for-medical-image-formats)\n* [Requirements](#requirements)\n* [License](#license)\n\n## Installation\n\n```bash\nsudo apt-get install libboost-python-dev build-essential\npip3 install medpy\n```\n\n**MedPy** requires **Python 3** and officially supports Ubuntu as well as other Debian derivatives.\nFor installation instructions on other operating systems see the [documentation](http://loli.github.io/medpy/).\nWhile the library itself is written purely in Python, the **graph-cut** extension comes in C++ and has it's own requirements. More details can be found in the [documentation](http://loli.github.io/medpy/).\n\n### Using Python 2\n\n**Python 2** is no longer supported. But you can still use the older releases.\n\n```bash\npip install medpy==0.3.0\n```\n\n## Getting started with the library\n\nIf you already have a medical image whose format is support (see the [documentation](http://loli.github.io/medpy/>) for details), then good.\nOtherwise, navigate to http://www.nitrc.org/projects/inia19, click on the *Download Now* button, unpack and look for the *inia19-t1.nii* file. Open it in your favorite medical image viewer (I personally fancy [itksnap](http://www.itksnap.org)) and beware: the INIA19 primate brain atlas.\n\nLoad the image\n\n```python\nfrom medpy.io import load\nimage_data, image_header = load('/path/to/image.xxx')\n```\n\nThe data is stored in a numpy ndarray, the header is an object containing additional metadata, such as the voxel-spacing. Now lets take a look at some of the image metadata\n\n```python\nimage_data.shape\n```\n\n`(168, 206, 128)`\n\n```python\nimage_data.dtype\n```\n\n`dtype(float32)`\n\nAnd the header gives us\n\n```python\nimage_header.get_voxel_spacing()\n```\n\n`(0.5, 0.5, 0.5)`\n\n```python\nimage_header.get_offset()\n```\n\n`(0.0, 0.0, 0.0)`\n\nNow lets apply one of the **MedPy** filter, more exactly the [Otsu thresholding](https://en.wikipedia.org/wiki/Otsu%27s_method), which can be used for automatic background removal\n\n```python\nfrom medpy.filter import otsu\nthreshold = otsu(image_data)\noutput_data = image_data > threshold\n```\n\nAnd save the binary image, marking the foreground\n\n```python\nfrom medpy.io import save\nsave(output_data, '/path/to/otsu.xxx', image_header)\n```\n\nAfter taking a look at it, you might want to dive deeper with the tutorials found in the [documentation](http://loli.github.io/medpy/).\n\n## Getting started with the scripts\n\n**MedPy** comes with a range of read-to-use commandline scripts, which are all prefixed by `medpy_`.\nTo try these examples, first get an image as described in the previous section. Now call\n\n```bash\nmedpy_info.py /path/to/image.xxx\n```\n\nwill give you some details about the image. With\n\n```bash\nmedpy_diff.py /path/to/image1.xxx /path/to/image2.xxx\n```\n\nyou can compare two image. And\n\n```bash\nmedpy_anisotropic_diffusion.py /path/to/image.xxx /path/to/output.xxx\n```\n\nlets you apply an edge preserving anisotropic diffusion filter. For a list of all scripts, see the [documentation](http://loli.github.io/medpy/).\n\n## Read/write support for medical image formats\n\nMedPy relies on SimpleITK, which enables the power of ITK for image loading and saving.\nThe supported image file formats should include at least the following. Note that not all might be supported by your machine.\n\n**Medical formats:**\n\n* ITK MetaImage (.mha/.raw, .mhd)\n* Neuroimaging Informatics Technology Initiative (NIfTI) (.nia, .nii, .nii.gz, .hdr, .img, .img.gz)\n* Analyze (plain, SPM99, SPM2) (.hdr/.img, .img.gz)\n* Digital Imaging and Communications in Medicine (DICOM) (.dcm, .dicom)\n* Digital Imaging and Communications in Medicine (DICOM) series (<directory>/)\n* Nearly Raw Raster Data (Nrrd) (.nrrd, .nhdr) \n* Medical Imaging NetCDF (MINC) (.mnc, .MNC)\n* Guys Image Processing Lab (GIPL) (.gipl, .gipl.gz)\n\n**Microscopy formats:**\n\n* Medical Research Council (MRC) (.mrc, .rec)\n* Bio-Rad (.pic, .PIC)\n* LSM (Zeiss) microscopy images (.tif, .TIF, .tiff, .TIFF, .lsm, .LSM)\n* Stimulate / Signal Data (SDT) (.sdt)\n\n**Visualization formats:**\n\n* VTK images (.vtk)\n\n**Other formats:**\n\n* Portable Network Graphics (PNG) (.png, .PNG)\n* Joint Photographic Experts Group (JPEG) (.jpg, .JPG, .jpeg, .JPEG)\n* Tagged Image File Format (TIFF) (.tif, .TIF, .tiff, .TIFF)\n* Windows bitmap (.bmp, .BMP)\n* Hierarchical Data Format (HDF5) (.h5 , .hdf5 , .he5)\n* MSX-DOS Screen-x (.ge4, .ge5)\n\n## Requirements\n\nMedPy comes with a number of dependencies and optional functionality that can require you to install additional packages.\n\n### Main dependencies\n\n* [scipy](http://www.scipy.org)\n* [numpy](http://www.numpy.org)\n* [SimpleITK](https://simpleitk.readthedocs.io)\n\n### Optional functionalities\n\n* compilation with `max-flow/min-cut` (enables the GraphCut functionalities)\n\n## License\n\nMedPy is distributed under the GNU General Public License, a version of which can be found in the LICENSE.txt file.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/loli/medpy", "keywords": "medical image processing dicom itk insight tool kit MRI CT US graph cut max-flow min-cut", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "MedPy", "package_url": "https://pypi.org/project/MedPy/", "platform": "", "project_url": "https://pypi.org/project/MedPy/", "project_urls": {"Homepage": "https://github.com/loli/medpy"}, "release_url": "https://pypi.org/project/MedPy/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Medical image processing in Python", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MedPy</h1>\n<p><a href=\"https://github.com/loli/medpy/\" rel=\"nofollow\">GitHub</a> | <a href=\"http://loli.github.io/medpy/\" rel=\"nofollow\">Documentation</a> | <a href=\"http://loli.github.io/medpy/\" rel=\"nofollow\">Tutorials</a> | <a href=\"https://github.com/loli/medpy/issues\" rel=\"nofollow\">Issue tracker</a> | <a href=\"oskar.maier@gmail.com\" rel=\"nofollow\">Contact</a></p>\n<p><strong>MedPy</strong> is a library and script collection for medical image processing in Python, providing basic functionalities for <strong>reading</strong>, <strong>writing</strong> and <strong>manipulating</strong> large images of <strong>arbitrary dimensionality</strong>.\nIts main contributions are n-dimensional versions of popular <strong>image filters</strong>, a collection of <strong>image feature extractors</strong>, ready to be used with <a href=\"http://scikit-learn.org\" rel=\"nofollow\">scikit-learn</a>, and an exhaustive n-dimensional <strong>graph-cut</strong> package.</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#getting-started-with-the-library\" rel=\"nofollow\">Getting started with the library</a></li>\n<li><a href=\"#getting-started-with-the-scripts\" rel=\"nofollow\">Getting started with the scripts</a></li>\n<li><a href=\"#read-write-support-for-medical-image-formats\" rel=\"nofollow\">Read/write support for medical image formats</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Installation</h2>\n<pre>sudo apt-get install libboost-python-dev build-essential\npip3 install medpy\n</pre>\n<p><strong>MedPy</strong> requires <strong>Python 3</strong> and officially supports Ubuntu as well as other Debian derivatives.\nFor installation instructions on other operating systems see the <a href=\"http://loli.github.io/medpy/\" rel=\"nofollow\">documentation</a>.\nWhile the library itself is written purely in Python, the <strong>graph-cut</strong> extension comes in C++ and has it's own requirements. More details can be found in the <a href=\"http://loli.github.io/medpy/\" rel=\"nofollow\">documentation</a>.</p>\n<h3>Using Python 2</h3>\n<p><strong>Python 2</strong> is no longer supported. But you can still use the older releases.</p>\n<pre>pip install <span class=\"nv\">medpy</span><span class=\"o\">==</span><span class=\"m\">0</span>.3.0\n</pre>\n<h2>Getting started with the library</h2>\n<p>If you already have a medical image whose format is support (see the <a href=\"http://loli.github.io/medpy/%3E\" rel=\"nofollow\">documentation</a> for details), then good.\nOtherwise, navigate to <a href=\"http://www.nitrc.org/projects/inia19\" rel=\"nofollow\">http://www.nitrc.org/projects/inia19</a>, click on the <em>Download Now</em> button, unpack and look for the <em>inia19-t1.nii</em> file. Open it in your favorite medical image viewer (I personally fancy <a href=\"http://www.itksnap.org\" rel=\"nofollow\">itksnap</a>) and beware: the INIA19 primate brain atlas.</p>\n<p>Load the image</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">medpy.io</span> <span class=\"kn\">import</span> <span class=\"n\">load</span>\n<span class=\"n\">image_data</span><span class=\"p\">,</span> <span class=\"n\">image_header</span> <span class=\"o\">=</span> <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/image.xxx'</span><span class=\"p\">)</span>\n</pre>\n<p>The data is stored in a numpy ndarray, the header is an object containing additional metadata, such as the voxel-spacing. Now lets take a look at some of the image metadata</p>\n<pre><span class=\"n\">image_data</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n</pre>\n<p><code>(168, 206, 128)</code></p>\n<pre><span class=\"n\">image_data</span><span class=\"o\">.</span><span class=\"n\">dtype</span>\n</pre>\n<p><code>dtype(float32)</code></p>\n<p>And the header gives us</p>\n<pre><span class=\"n\">image_header</span><span class=\"o\">.</span><span class=\"n\">get_voxel_spacing</span><span class=\"p\">()</span>\n</pre>\n<p><code>(0.5, 0.5, 0.5)</code></p>\n<pre><span class=\"n\">image_header</span><span class=\"o\">.</span><span class=\"n\">get_offset</span><span class=\"p\">()</span>\n</pre>\n<p><code>(0.0, 0.0, 0.0)</code></p>\n<p>Now lets apply one of the <strong>MedPy</strong> filter, more exactly the <a href=\"https://en.wikipedia.org/wiki/Otsu%27s_method\" rel=\"nofollow\">Otsu thresholding</a>, which can be used for automatic background removal</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">medpy.filter</span> <span class=\"kn\">import</span> <span class=\"n\">otsu</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"n\">otsu</span><span class=\"p\">(</span><span class=\"n\">image_data</span><span class=\"p\">)</span>\n<span class=\"n\">output_data</span> <span class=\"o\">=</span> <span class=\"n\">image_data</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span>\n</pre>\n<p>And save the binary image, marking the foreground</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">medpy.io</span> <span class=\"kn\">import</span> <span class=\"n\">save</span>\n<span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">output_data</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/otsu.xxx'</span><span class=\"p\">,</span> <span class=\"n\">image_header</span><span class=\"p\">)</span>\n</pre>\n<p>After taking a look at it, you might want to dive deeper with the tutorials found in the <a href=\"http://loli.github.io/medpy/\" rel=\"nofollow\">documentation</a>.</p>\n<h2>Getting started with the scripts</h2>\n<p><strong>MedPy</strong> comes with a range of read-to-use commandline scripts, which are all prefixed by <code>medpy_</code>.\nTo try these examples, first get an image as described in the previous section. Now call</p>\n<pre>medpy_info.py /path/to/image.xxx\n</pre>\n<p>will give you some details about the image. With</p>\n<pre>medpy_diff.py /path/to/image1.xxx /path/to/image2.xxx\n</pre>\n<p>you can compare two image. And</p>\n<pre>medpy_anisotropic_diffusion.py /path/to/image.xxx /path/to/output.xxx\n</pre>\n<p>lets you apply an edge preserving anisotropic diffusion filter. For a list of all scripts, see the <a href=\"http://loli.github.io/medpy/\" rel=\"nofollow\">documentation</a>.</p>\n<h2>Read/write support for medical image formats</h2>\n<p>MedPy relies on SimpleITK, which enables the power of ITK for image loading and saving.\nThe supported image file formats should include at least the following. Note that not all might be supported by your machine.</p>\n<p><strong>Medical formats:</strong></p>\n<ul>\n<li>ITK MetaImage (.mha/.raw, .mhd)</li>\n<li>Neuroimaging Informatics Technology Initiative (NIfTI) (.nia, .nii, .nii.gz, .hdr, .img, .img.gz)</li>\n<li>Analyze (plain, SPM99, SPM2) (.hdr/.img, .img.gz)</li>\n<li>Digital Imaging and Communications in Medicine (DICOM) (.dcm, .dicom)</li>\n<li>Digital Imaging and Communications in Medicine (DICOM) series (&lt;directory&gt;/)</li>\n<li>Nearly Raw Raster Data (Nrrd) (.nrrd, .nhdr)</li>\n<li>Medical Imaging NetCDF (MINC) (.mnc, .MNC)</li>\n<li>Guys Image Processing Lab (GIPL) (.gipl, .gipl.gz)</li>\n</ul>\n<p><strong>Microscopy formats:</strong></p>\n<ul>\n<li>Medical Research Council (MRC) (.mrc, .rec)</li>\n<li>Bio-Rad (.pic, .PIC)</li>\n<li>LSM (Zeiss) microscopy images (.tif, .TIF, .tiff, .TIFF, .lsm, .LSM)</li>\n<li>Stimulate / Signal Data (SDT) (.sdt)</li>\n</ul>\n<p><strong>Visualization formats:</strong></p>\n<ul>\n<li>VTK images (.vtk)</li>\n</ul>\n<p><strong>Other formats:</strong></p>\n<ul>\n<li>Portable Network Graphics (PNG) (.png, .PNG)</li>\n<li>Joint Photographic Experts Group (JPEG) (.jpg, .JPG, .jpeg, .JPEG)</li>\n<li>Tagged Image File Format (TIFF) (.tif, .TIF, .tiff, .TIFF)</li>\n<li>Windows bitmap (.bmp, .BMP)</li>\n<li>Hierarchical Data Format (HDF5) (.h5 , .hdf5 , .he5)</li>\n<li>MSX-DOS Screen-x (.ge4, .ge5)</li>\n</ul>\n<h2>Requirements</h2>\n<p>MedPy comes with a number of dependencies and optional functionality that can require you to install additional packages.</p>\n<h3>Main dependencies</h3>\n<ul>\n<li><a href=\"http://www.scipy.org\" rel=\"nofollow\">scipy</a></li>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"https://simpleitk.readthedocs.io\" rel=\"nofollow\">SimpleITK</a></li>\n</ul>\n<h3>Optional functionalities</h3>\n<ul>\n<li>compilation with <code>max-flow/min-cut</code> (enables the GraphCut functionalities)</li>\n</ul>\n<h2>License</h2>\n<p>MedPy is distributed under the GNU General Public License, a version of which can be found in the LICENSE.txt file.</p>\n\n          </div>"}, "last_serial": 4821357, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "591a3fab0a75989efa38b83c7239d228", "sha256": "8d40cd11816a637fb12e5eb9cfbfcde7c549d3f98ab2030426fcd177b59be6d7"}, "downloads": -1, "filename": "MedPy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "591a3fab0a75989efa38b83c7239d228", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123922, "upload_time": "2013-04-26T11:19:49", "upload_time_iso_8601": "2013-04-26T11:19:49.750871Z", "url": "https://files.pythonhosted.org/packages/3c/58/2e9ff990bd45e9bd0ca0a0b074431f8f22a17ead90c9e14c12715edc757f/MedPy-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8590a14c2346a1a7b85b951a54c61469", "sha256": "512f6383d0568944f87c2f64891d8cabb444982395f016a6fcaa274484dbab33"}, "downloads": -1, "filename": "MedPy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8590a14c2346a1a7b85b951a54c61469", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151538, "upload_time": "2014-08-19T16:14:34", "upload_time_iso_8601": "2014-08-19T16:14:34.414919Z", "url": "https://files.pythonhosted.org/packages/96/9f/d3601eb915080c5071628113bada52d2f358d0c7fb518dc92ad426aa3f53/MedPy-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e96d3e05359e4fed034c3cebcb9e074d", "sha256": "3a5abb6c20b6e12d0bbe9e671e827444396955ff6be20a0c28978e4fd568e6cd"}, "downloads": -1, "filename": "MedPy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e96d3e05359e4fed034c3cebcb9e074d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158147, "upload_time": "2014-08-19T16:37:08", "upload_time_iso_8601": "2014-08-19T16:37:08.140212Z", "url": "https://files.pythonhosted.org/packages/46/9e/376b954e024f930f0e707ac114d91c3118c354c4a547db2846ff5870e650/MedPy-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ee90bd5f7bf10ce956ce66bbda679a06", "sha256": "99786e370440dd3d09b3b01181cffb06eb4509a66d7448197995f5dc84205728"}, "downloads": -1, "filename": "MedPy-0.2.2.tar.gz", "has_sig": false, "md5_digest": "ee90bd5f7bf10ce956ce66bbda679a06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167088, "upload_time": "2014-09-19T14:59:06", "upload_time_iso_8601": "2014-09-19T14:59:06.992348Z", "url": "https://files.pythonhosted.org/packages/5f/a1/68212f8c27610458796fd886a58f67715773071dfaa77dd4ccf4527ded42/MedPy-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c4cb984dc3478396a2e9989687432951", "sha256": "299d1be28df0b9c35e856177ada7555746d5b94a0f7af34dc3c3dd3671252a6a"}, "downloads": -1, "filename": "MedPy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c4cb984dc3478396a2e9989687432951", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163480, "upload_time": "2017-09-20T16:18:56", "upload_time_iso_8601": "2017-09-20T16:18:56.793037Z", "url": "https://files.pythonhosted.org/packages/23/62/b01a85e766a7d04cf1c93b6bc94aca1530c9fe038154d1a6095fcacc1be8/MedPy-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "d468cc152a78713bf75c0a1949df6c6f", "sha256": "f8a94937dbb947ab069e767862dc6b86896b153c41ce8ed9369c7d79c0033a88"}, "downloads": -1, "filename": "MedPy-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d468cc152a78713bf75c0a1949df6c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151815, "upload_time": "2019-02-14T17:12:59", "upload_time_iso_8601": "2019-02-14T17:12:59.042326Z", "url": "https://files.pythonhosted.org/packages/3b/70/c1fd5dd60242eee81774696ea7ba4caafac2bad8f028bba94b1af83777d7/MedPy-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d468cc152a78713bf75c0a1949df6c6f", "sha256": "f8a94937dbb947ab069e767862dc6b86896b153c41ce8ed9369c7d79c0033a88"}, "downloads": -1, "filename": "MedPy-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d468cc152a78713bf75c0a1949df6c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151815, "upload_time": "2019-02-14T17:12:59", "upload_time_iso_8601": "2019-02-14T17:12:59.042326Z", "url": "https://files.pythonhosted.org/packages/3b/70/c1fd5dd60242eee81774696ea7ba4caafac2bad8f028bba94b1af83777d7/MedPy-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:32 2020"}