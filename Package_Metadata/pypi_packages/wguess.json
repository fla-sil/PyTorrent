{"info": {"author": "PROgramJEDI", "author_email": "tamirglobus@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "![WordGuess](https://user-images.githubusercontent.com/40426447/80461508-0a2e3700-893e-11ea-8550-246dc270d71a.png)\n\n\ud83c\udf0e a simple library that provides easy functionality for building word quizzes with the English language.\n\n# Getting Started\nLet's import the main classes before using them:\n```\nfrom wordguess import WordBase, WordTree, WDict\n```\nThe base class of this library is called 'WBase' (WordBase). This class defines many of the attributes related to the word, such as: definition, synonyms, typeof, examples, etc, but also include some useful functions. Let's try getting the examples/usages of the word, in a sentence:\n```\n>>> wBase = WBase('Extreme').examples\nNone\n```\nWe've got None because of the reason that this class is actually not responsible for getting the data about the word. Even if it would, it wouldn't know what meaning you refer to while each word can have several meanings. Instead, we would want to instantiate the WTree (WordTree) class, which would give us all of the different meanings of the word.\n```\n>>> wTree = WordTree('Extreme', headers=h)\n>>> wBase = wTree.meanings[0]\n>>> wBase.examples\n['an extreme conservative', 'an extreme liberal', 'extreme views on integration', 'extreme opinions']\n```\nThe '.meanings' property is an iterable contains WBase objects. The 'headers' parameter is needed to verify your identity while requesting the words data from the server. You can get it here: https://rapidapi.com/dpventures/api/WordsAPI.\n\nLet's get even more advance and create a collection of words that would contain a bunch of WTree objects, and any WTree object would contain N meanings or N WBase objects.\n```\n>>> wlist = ['New','Far','Pay','Table']\n>>> wDict = WDict(*wlist, headers=h)\n>>> wDict.words\n[<wordguess.WTree object at 0x0000019A4E0A38E0>\n <wordguess.WTree object at 0x0000019A4E0A38B0>\n <wordguess.WTree object at 0x0000019A4E0A3550>\n <wordguess.WTree object at 0x0000019A4E0A3F40>]\n ```\nOk, so we got a numpy array containing WTree objects, pretty cool structure haaaa (; From this and on you can go much beyond and implement your own functionality. I reccomand you to go and try the Advance Usage section where you would see real world examples. Other than that, it's more than reccomanded to understand this structure which represents part of the library structure:\n\n![structure](https://user-images.githubusercontent.com/40426447/80466017-9d6a6b00-8944-11ea-87bb-3c2a0a4fb595.png)\n\n\n# Advanced Usage\n\n### Upload words from .txt file\nTo do so, we would want to use the WDict class, and this is due to the reason that we want to upload many different words:\n```\nfrom wordguess import WDict\n```\nThen, the easy way to to it is just by using the .from_txt(...) class function, which will initialize the words you want, from the given file. Let's upload the words from the .txt file and get the WTree objects was created:\n```\n>>> path = r'C:\\Users\\user1\\Desktop\\file.txt'\n>>> wDict = WDict.from_txt(source=path)\n>>> wDict.words\n[<wordguess.WTree object at 0x0000018F8BF266A0>\n <wordguess.WTree object at 0x0000018F95F38F10>\n <wordguess.WTree object at 0x0000018F95F38F40> ...\n <wordguess.WTree object at 0x0000018F9620D790>\n <wordguess.WTree object at 0x0000018F9620D7C0>\n <wordguess.WTree object at 0x0000018F9620D7F0>]\n```\n\n### Generate multiple questions\n...\n\n\n### Framing and querying\n...\n\n# ToDo\n1. ADD: functionality for accepting multiple answers for a question - Question.\n2. IMPLEMENT: a class to enable interaction with the library to non-developers such as teachers and students.\n The class will be able to generate questions according to certain conditions, which will be a quiz.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PROgramJEDI/wguess", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wguess", "package_url": "https://pypi.org/project/wguess/", "platform": "", "project_url": "https://pypi.org/project/wguess/", "project_urls": {"Homepage": "https://github.com/PROgramJEDI/wguess"}, "release_url": "https://pypi.org/project/wguess/2.0.1/", "requires_dist": null, "requires_python": ">=3.4", "summary": "\ud83c\udf0e a simple library that provides easy functionality for building word quizzes with the English language.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"WordGuess\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6aa4750c5628692c295a1c03d15abe515f5a2e70/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f34303432363434372f38303436313530382d30613265333730302d383933652d313165612d383535302d3234366463323730643731612e706e67\"></p>\n<p>\ud83c\udf0e a simple library that provides easy functionality for building word quizzes with the English language.</p>\n<h1>Getting Started</h1>\n<p>Let's import the main classes before using them:</p>\n<pre><code>from wordguess import WordBase, WordTree, WDict\n</code></pre>\n<p>The base class of this library is called 'WBase' (WordBase). This class defines many of the attributes related to the word, such as: definition, synonyms, typeof, examples, etc, but also include some useful functions. Let's try getting the examples/usages of the word, in a sentence:</p>\n<pre><code>&gt;&gt;&gt; wBase = WBase('Extreme').examples\nNone\n</code></pre>\n<p>We've got None because of the reason that this class is actually not responsible for getting the data about the word. Even if it would, it wouldn't know what meaning you refer to while each word can have several meanings. Instead, we would want to instantiate the WTree (WordTree) class, which would give us all of the different meanings of the word.</p>\n<pre><code>&gt;&gt;&gt; wTree = WordTree('Extreme', headers=h)\n&gt;&gt;&gt; wBase = wTree.meanings[0]\n&gt;&gt;&gt; wBase.examples\n['an extreme conservative', 'an extreme liberal', 'extreme views on integration', 'extreme opinions']\n</code></pre>\n<p>The '.meanings' property is an iterable contains WBase objects. The 'headers' parameter is needed to verify your identity while requesting the words data from the server. You can get it here: <a href=\"https://rapidapi.com/dpventures/api/WordsAPI\" rel=\"nofollow\">https://rapidapi.com/dpventures/api/WordsAPI</a>.</p>\n<p>Let's get even more advance and create a collection of words that would contain a bunch of WTree objects, and any WTree object would contain N meanings or N WBase objects.</p>\n<pre><code>&gt;&gt;&gt; wlist = ['New','Far','Pay','Table']\n&gt;&gt;&gt; wDict = WDict(*wlist, headers=h)\n&gt;&gt;&gt; wDict.words\n[&lt;wordguess.WTree object at 0x0000019A4E0A38E0&gt;\n &lt;wordguess.WTree object at 0x0000019A4E0A38B0&gt;\n &lt;wordguess.WTree object at 0x0000019A4E0A3550&gt;\n &lt;wordguess.WTree object at 0x0000019A4E0A3F40&gt;]\n</code></pre>\n<p>Ok, so we got a numpy array containing WTree objects, pretty cool structure haaaa (; From this and on you can go much beyond and implement your own functionality. I reccomand you to go and try the Advance Usage section where you would see real world examples. Other than that, it's more than reccomanded to understand this structure which represents part of the library structure:</p>\n<p><img alt=\"structure\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f0ed7e388c72d56eff2df4fa6caf3dc14fbcca7e/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f34303432363434372f38303436363031372d39643661366230302d383934342d313165612d383762622d3363326130613466623539352e706e67\"></p>\n<h1>Advanced Usage</h1>\n<h3>Upload words from .txt file</h3>\n<p>To do so, we would want to use the WDict class, and this is due to the reason that we want to upload many different words:</p>\n<pre><code>from wordguess import WDict\n</code></pre>\n<p>Then, the easy way to to it is just by using the .from_txt(...) class function, which will initialize the words you want, from the given file. Let's upload the words from the .txt file and get the WTree objects was created:</p>\n<pre><code>&gt;&gt;&gt; path = r'C:\\Users\\user1\\Desktop\\file.txt'\n&gt;&gt;&gt; wDict = WDict.from_txt(source=path)\n&gt;&gt;&gt; wDict.words\n[&lt;wordguess.WTree object at 0x0000018F8BF266A0&gt;\n &lt;wordguess.WTree object at 0x0000018F95F38F10&gt;\n &lt;wordguess.WTree object at 0x0000018F95F38F40&gt; ...\n &lt;wordguess.WTree object at 0x0000018F9620D790&gt;\n &lt;wordguess.WTree object at 0x0000018F9620D7C0&gt;\n &lt;wordguess.WTree object at 0x0000018F9620D7F0&gt;]\n</code></pre>\n<h3>Generate multiple questions</h3>\n<p>...</p>\n<h3>Framing and querying</h3>\n<p>...</p>\n<h1>ToDo</h1>\n<ol>\n<li>ADD: functionality for accepting multiple answers for a question - Question.</li>\n<li>IMPLEMENT: a class to enable interaction with the library to non-developers such as teachers and students.\nThe class will be able to generate questions according to certain conditions, which will be a quiz.</li>\n</ol>\n\n          </div>"}, "last_serial": 7181835, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "a719411d380541127eac3a617b4d015c", "sha256": "bc8ac77efe1123ec099437cc99a4daa149f3ecf562615181a3581b2b59cfcb30"}, "downloads": -1, "filename": "wguess-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a719411d380541127eac3a617b4d015c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13669, "upload_time": "2020-05-06T17:29:15", "upload_time_iso_8601": "2020-05-06T17:29:15.591444Z", "url": "https://files.pythonhosted.org/packages/40/9f/e7302dd59871937a23ace3d00affa99f133b633cfa724a55d0e65e90de33/wguess-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9010001206ea4f533cab09555500804a", "sha256": "c1ad7414ff9a90841a8e48dfb15c9864f52bc613ac391ddeae974640699e997f"}, "downloads": -1, "filename": "wguess-2.0.1.tar.gz", "has_sig": false, "md5_digest": "9010001206ea4f533cab09555500804a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6527, "upload_time": "2020-05-06T14:15:17", "upload_time_iso_8601": "2020-05-06T14:15:17.503973Z", "url": "https://files.pythonhosted.org/packages/c2/24/1961eedb823e70b6ba7bf849e1f5cccba55b3f80a0ea68fecc4764692890/wguess-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a719411d380541127eac3a617b4d015c", "sha256": "bc8ac77efe1123ec099437cc99a4daa149f3ecf562615181a3581b2b59cfcb30"}, "downloads": -1, "filename": "wguess-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a719411d380541127eac3a617b4d015c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13669, "upload_time": "2020-05-06T17:29:15", "upload_time_iso_8601": "2020-05-06T17:29:15.591444Z", "url": "https://files.pythonhosted.org/packages/40/9f/e7302dd59871937a23ace3d00affa99f133b633cfa724a55d0e65e90de33/wguess-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9010001206ea4f533cab09555500804a", "sha256": "c1ad7414ff9a90841a8e48dfb15c9864f52bc613ac391ddeae974640699e997f"}, "downloads": -1, "filename": "wguess-2.0.1.tar.gz", "has_sig": false, "md5_digest": "9010001206ea4f533cab09555500804a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6527, "upload_time": "2020-05-06T14:15:17", "upload_time_iso_8601": "2020-05-06T14:15:17.503973Z", "url": "https://files.pythonhosted.org/packages/c2/24/1961eedb823e70b6ba7bf849e1f5cccba55b3f80a0ea68fecc4764692890/wguess-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:02 2020"}