{"info": {"author": "Mark Sandstrom", "author_email": "mark@deliciouslynerdy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-reroute\n==============\n\ndjango-reroute is a set of tools for simplifying your views, especially when you're implementing a REST API. django-reroute provides a drop-in replacement for django.conf.urls.defaults that supports HTTP verb dispatch so that your views don't become cluttered with ``if request.method == 'GET'`` statements. It also provides a nifty set of view decorators for simplifying common tasks like rendering a template using a RequestContext and redirecting to a particular view after request processing.\n\nNews\n----\n\nDjango 1.3 is now supported as of v1.1.1\n\nDownload\n--------\n\nGithub: http://github.com/dnerdy/django-reroute\n\neasy_install::\n    \n    easy_install django-reroute\n    \nSource::\n    \n    # Download the source and run\n    python setup.py install\n    \n\nAdding django-reroute to your project\n-------------------------------------\n\ndjango-reroute is a drop-in replacement for django.conf.urls.defaults::\n\n    # Replace\n    from django.conf.urls.defaults *\n    \n    # with   \n    from reroute import *\n    \nAlthough it's better to be explicit::\n    \n    # Replace\n    from django.conf.urls.defaults import handler404, handler500, patterns, url, include\n    \n    # with   \n    from reroute import handler404, handler500, patterns, url, include  \n    \nHTTP verb dispatching\n---------------------\n\nverb_url patterns can match HTTP verbs in addition to regexes::\n\n    from reroute.verbs import verb_url\n    \n    urlpatterns = patterns('myapp.views',\n        url('^regular$', 'regular_old_view'),\n        verb_url('GET', '^restful$', 'restful_view')\n    )\n    \nverb_url pattern regexes can be overloaded, enabling routing solely based on HTTP verb::\n    \n    urlpatterns = patterns('myapp.views',\n        verb_url('GET', '^restful$', 'restful_view'),\n        verb_url('PUT', '^restful$', 'another_restful_view')   \n    )\n    \nRestful resource example::\n\n    paychecks = patterns('myapp.views.employees.paychecks',\n        verb_url('GET',     '^paychecks$', 'index_paychecks'),\n        verb_url('POST',    '^paychecks$', 'add_paycheck'),\n    )\n    \n    urlpatterns = patterns('myapp.views.employees',\n        verb_url('GET',     '^employees$', 'index_employees'),\n        verb_url('POST',    '^employees$', 'add_employee'),\n        \n        verb_url('GET',     '^employees/(?P<employee_id>\\d+)$', 'show_employee')\n        verb_url('PUT',     '^employees/(?P<employee_id>\\d+)$', 'update_employee')\n        verb_url('DELETE',  '^employees/(?P<employee_id>\\d+)$', 'delete_employee'),\n        \n        url('^employees/(?P<employee_id>\\d+)/', include(paychecks)),\n    )\n\nRendering templates\n-------------------\n\nReturn a dictionary of values to add to the template context::\n\n    @render('template.html')\n    def view(request):\n        return {'title': 'This is the page title'}\n\n        # The template is rendered using a RequestContext instance\n\nIf you need, return an HttpResponse and it will be used::\n\n    @render('template.html')\n    def view(request):\n        if special_case:\n            return HttpResponse('This response will be used instead of rendering template.html')\n        else:\n            return {'title': 'This is the page title'}\n\nRedirecting\n-----------\n\nReturn a dictionary of values to use as reverse kwargs::\n\n    @redirect('other_view_name')\n    def view(request):\n        return {'view_kwarg': 42}\n\n        # This is equivalent to:\n        # return HttpResponseRedirect(reverse('other_view_name', kwargs={'view_kwarg': 42}))\n\n    @render('other_tempate.html')\n    def other_view(request, view_kwarg):\n        return {\n            'title': 'This is the other view page title',\n            'message': 'Meaning of life? {0}'.format(view_kwarg)\n        }\n\nAgain, if you return an HttpResponse it will be used::\n\n    @redirect('other_view_name')\n    def view(request):\n        if special_case:\n            return HttpResponse('This response will be used instead of redirecting')\n        else:\n            return {'view_kwarg': 42}\n\nInternals: wrappers\n-------------------\n\nWrappers are like middleware that are applied to a selective set of urls. A wrapper is any callable that takes the arguments: ``view``, ``request``, ``*args``, ``**kwargs``::\n\n    import logging\n    from reroute import reroute_patterns\n\n    def wrapper_one(view, request, *args, **kwargs):\n        logging.debug(\"wrapper one\")\n        return view(request, *args, **kwargs)\n\n    def wrapper_two(view, request, *args, **kwargs):\n        logging.debug(\"wrapper two\")\n        return view(request, *args, **kwargs)\n\n    urlpatterns = reroute_patterns([wrapper_one, wrapper_two], 'myapp.views',\n        verb_url('GET', '^restful$', 'restful_view'),\n        verb_url('PUT', '^restful$', 'another_restful_view')\n    )\n\nYou can even get fancy and create your own drop-in replacement for patterns::\n\n    from functools import partial\n\n    patterns = partial(reroute_patterns, [wrapper_one, wrapper_two])\n\n    urlpatterns = patterns('myapp.views',\n        verb_url('GET', '^restful$', 'restful_view'),\n        verb_url('PUT', '^restful$', 'another_restful_view')\n    )\n\nChanges in version 1.1.1\n------------------------\n\n- [**NEW**] Added support for Django 1.3\n\nChanges in version 1.1.0\n------------------------\n\n- [**NEW**] Added ``render`` and ``redirect`` decorators to ``reroute.decorators`` for simplifying common views tasks (namely rendering a template or redirecting to another view)\n- [**FIXED**] verb_url patterns are sporadically grouped incorrectly resulting in 405 responses. Python maintains a regex cache that is cleared after 100 entries, and verb_url patterns are group by regex object as opposed to the regex pattern. When the cache is cleared, regex objects with the same regex pattern are no longer equal.\n\nChanges in version 1.0.1\n------------------------\n\n- [**FIXED**] The PyPI package doesn't work with pip\n\nChanges in version 1.0.0\n------------------------\n\n- [**NEW**] Added support for the csrf_exempt decorator\n- [**FIXED**] The incorrect default kwargs are used for verb_url patterns that have the same regex\n\n\nAuthor\n------\n\ndjango-reroute was written by Mark Sandstrom.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dnerdy/django-reroute", "keywords": "reroute,django,http,rest,route,routing,dispatch,wrapper", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-reroute", "package_url": "https://pypi.org/project/django-reroute/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-reroute/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/dnerdy/django-reroute"}, "release_url": "https://pypi.org/project/django-reroute/1.1.1/", "requires_dist": null, "requires_python": null, "summary": "A drop-in replacement for django.conf.urls.defaults which supports HTTP verb dispatch and view wrapping.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>django-reroute is a set of tools for simplifying your views, especially when you\u2019re implementing a REST API. django-reroute provides a drop-in replacement for django.conf.urls.defaults that supports HTTP verb dispatch so that your views don\u2019t become cluttered with <tt>if request.method == 'GET'</tt> statements. It also provides a nifty set of view decorators for simplifying common tasks like rendering a template using a RequestContext and redirecting to a particular view after request processing.</p>\n<div id=\"news\">\n<h2>News</h2>\n<p>Django 1.3 is now supported as of v1.1.1</p>\n</div>\n<div id=\"download\">\n<h2>Download</h2>\n<p>Github: <a href=\"http://github.com/dnerdy/django-reroute\" rel=\"nofollow\">http://github.com/dnerdy/django-reroute</a></p>\n<p>easy_install:</p>\n<pre>easy_install django-reroute\n</pre>\n<p>Source:</p>\n<pre># Download the source and run\npython setup.py install\n</pre>\n</div>\n<div id=\"adding-django-reroute-to-your-project\">\n<h2>Adding django-reroute to your project</h2>\n<p>django-reroute is a drop-in replacement for django.conf.urls.defaults:</p>\n<pre># Replace\nfrom django.conf.urls.defaults *\n\n# with\nfrom reroute import *\n</pre>\n<p>Although it\u2019s better to be explicit:</p>\n<pre># Replace\nfrom django.conf.urls.defaults import handler404, handler500, patterns, url, include\n\n# with\nfrom reroute import handler404, handler500, patterns, url, include\n</pre>\n</div>\n<div id=\"http-verb-dispatching\">\n<h2>HTTP verb dispatching</h2>\n<p>verb_url patterns can match HTTP verbs in addition to regexes:</p>\n<pre>from reroute.verbs import verb_url\n\nurlpatterns = patterns('myapp.views',\n    url('^regular$', 'regular_old_view'),\n    verb_url('GET', '^restful$', 'restful_view')\n)\n</pre>\n<p>verb_url pattern regexes can be overloaded, enabling routing solely based on HTTP verb:</p>\n<pre>urlpatterns = patterns('myapp.views',\n    verb_url('GET', '^restful$', 'restful_view'),\n    verb_url('PUT', '^restful$', 'another_restful_view')\n)\n</pre>\n<p>Restful resource example:</p>\n<pre>paychecks = patterns('myapp.views.employees.paychecks',\n    verb_url('GET',     '^paychecks$', 'index_paychecks'),\n    verb_url('POST',    '^paychecks$', 'add_paycheck'),\n)\n\nurlpatterns = patterns('myapp.views.employees',\n    verb_url('GET',     '^employees$', 'index_employees'),\n    verb_url('POST',    '^employees$', 'add_employee'),\n\n    verb_url('GET',     '^employees/(?P&lt;employee_id&gt;\\d+)$', 'show_employee')\n    verb_url('PUT',     '^employees/(?P&lt;employee_id&gt;\\d+)$', 'update_employee')\n    verb_url('DELETE',  '^employees/(?P&lt;employee_id&gt;\\d+)$', 'delete_employee'),\n\n    url('^employees/(?P&lt;employee_id&gt;\\d+)/', include(paychecks)),\n)\n</pre>\n</div>\n<div id=\"rendering-templates\">\n<h2>Rendering templates</h2>\n<p>Return a dictionary of values to add to the template context:</p>\n<pre>@render('template.html')\ndef view(request):\n    return {'title': 'This is the page title'}\n\n    # The template is rendered using a RequestContext instance\n</pre>\n<p>If you need, return an HttpResponse and it will be used:</p>\n<pre>@render('template.html')\ndef view(request):\n    if special_case:\n        return HttpResponse('This response will be used instead of rendering template.html')\n    else:\n        return {'title': 'This is the page title'}\n</pre>\n</div>\n<div id=\"redirecting\">\n<h2>Redirecting</h2>\n<p>Return a dictionary of values to use as reverse kwargs:</p>\n<pre>@redirect('other_view_name')\ndef view(request):\n    return {'view_kwarg': 42}\n\n    # This is equivalent to:\n    # return HttpResponseRedirect(reverse('other_view_name', kwargs={'view_kwarg': 42}))\n\n@render('other_tempate.html')\ndef other_view(request, view_kwarg):\n    return {\n        'title': 'This is the other view page title',\n        'message': 'Meaning of life? {0}'.format(view_kwarg)\n    }\n</pre>\n<p>Again, if you return an HttpResponse it will be used:</p>\n<pre>@redirect('other_view_name')\ndef view(request):\n    if special_case:\n        return HttpResponse('This response will be used instead of redirecting')\n    else:\n        return {'view_kwarg': 42}\n</pre>\n</div>\n<div id=\"internals-wrappers\">\n<h2>Internals: wrappers</h2>\n<p>Wrappers are like middleware that are applied to a selective set of urls. A wrapper is any callable that takes the arguments: <tt>view</tt>, <tt>request</tt>, <tt>*args</tt>, <tt>**kwargs</tt>:</p>\n<pre>import logging\nfrom reroute import reroute_patterns\n\ndef wrapper_one(view, request, *args, **kwargs):\n    logging.debug(\"wrapper one\")\n    return view(request, *args, **kwargs)\n\ndef wrapper_two(view, request, *args, **kwargs):\n    logging.debug(\"wrapper two\")\n    return view(request, *args, **kwargs)\n\nurlpatterns = reroute_patterns([wrapper_one, wrapper_two], 'myapp.views',\n    verb_url('GET', '^restful$', 'restful_view'),\n    verb_url('PUT', '^restful$', 'another_restful_view')\n)\n</pre>\n<p>You can even get fancy and create your own drop-in replacement for patterns:</p>\n<pre>from functools import partial\n\npatterns = partial(reroute_patterns, [wrapper_one, wrapper_two])\n\nurlpatterns = patterns('myapp.views',\n    verb_url('GET', '^restful$', 'restful_view'),\n    verb_url('PUT', '^restful$', 'another_restful_view')\n)\n</pre>\n</div>\n<div id=\"changes-in-version-1-1-1\">\n<h2>Changes in version 1.1.1</h2>\n<ul>\n<li>[<strong>NEW</strong>] Added support for Django 1.3</li>\n</ul>\n</div>\n<div id=\"changes-in-version-1-1-0\">\n<h2>Changes in version 1.1.0</h2>\n<ul>\n<li>[<strong>NEW</strong>] Added <tt>render</tt> and <tt>redirect</tt> decorators to <tt>reroute.decorators</tt> for simplifying common views tasks (namely rendering a template or redirecting to another view)</li>\n<li>[<strong>FIXED</strong>] verb_url patterns are sporadically grouped incorrectly resulting in 405 responses. Python maintains a regex cache that is cleared after 100 entries, and verb_url patterns are group by regex object as opposed to the regex pattern. When the cache is cleared, regex objects with the same regex pattern are no longer equal.</li>\n</ul>\n</div>\n<div id=\"changes-in-version-1-0-1\">\n<h2>Changes in version 1.0.1</h2>\n<ul>\n<li>[<strong>FIXED</strong>] The PyPI package doesn\u2019t work with pip</li>\n</ul>\n</div>\n<div id=\"changes-in-version-1-0-0\">\n<h2>Changes in version 1.0.0</h2>\n<ul>\n<li>[<strong>NEW</strong>] Added support for the csrf_exempt decorator</li>\n<li>[<strong>FIXED</strong>] The incorrect default kwargs are used for verb_url patterns that have the same regex</li>\n</ul>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>django-reroute was written by Mark Sandstrom.</p>\n</div>\n\n          </div>"}, "last_serial": 790474, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "86f39b1f58a408bd30d1e9e7895d0f5e", "sha256": "ca8d76106fa5aaca803273763e6c2eceeb9833df9de503a781dc7f4177fc5751"}, "downloads": -1, "filename": "django-reroute-0.1.0.tar.gz", "has_sig": false, "md5_digest": "86f39b1f58a408bd30d1e9e7895d0f5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5040, "upload_time": "2010-12-11T00:42:14", "upload_time_iso_8601": "2010-12-11T00:42:14.941725Z", "url": "https://files.pythonhosted.org/packages/2b/c0/4f4a9db2066cdc2f22903eeb97456ef53a765f43481f67a2401042ef21af/django-reroute-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f45b2ccae9e72a716facb3cc5b5f5c92", "sha256": "c957c10a31e64b063e50e038554e1cd62729cbd28659e37dec10948d85e753e9"}, "downloads": -1, "filename": "django-reroute-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f45b2ccae9e72a716facb3cc5b5f5c92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6748, "upload_time": "2010-12-11T01:48:47", "upload_time_iso_8601": "2010-12-11T01:48:47.107335Z", "url": "https://files.pythonhosted.org/packages/ef/42/c3b56176854c470d243c9d244e31101df8ab2896836f293dea1fef251b32/django-reroute-0.1.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "866bee8a92105f5c777e090dc5bb1668", "sha256": "baae8d89a425e7cdf4b53a33fd8b4650cb8d9653be55485387ec2bb663e71737"}, "downloads": -1, "filename": "django-reroute-1.0.0.tar.gz", "has_sig": false, "md5_digest": "866bee8a92105f5c777e090dc5bb1668", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7438, "upload_time": "2011-02-08T19:16:29", "upload_time_iso_8601": "2011-02-08T19:16:29.052208Z", "url": "https://files.pythonhosted.org/packages/b0/7d/df567bf2712920004b0865e225f70902bc0a50f4795ef42d7b637e8f6d1b/django-reroute-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "43bc4d27ae0baef345723d0977f0972d", "sha256": "250521859825eaa82e15c530f024eb598c49015f183b5d6e8dab03fce4cc723e"}, "downloads": -1, "filename": "django-reroute-1.0.1.tar.gz", "has_sig": false, "md5_digest": "43bc4d27ae0baef345723d0977f0972d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6756, "upload_time": "2011-02-09T02:09:34", "upload_time_iso_8601": "2011-02-09T02:09:34.246831Z", "url": "https://files.pythonhosted.org/packages/4d/44/ce6dfbf5e077811a9352a23bdedf26c1f109f472f3d80c87f24a8e048b32/django-reroute-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "48b6d869544b366b471db14a4958a0f9", "sha256": "2c651c195f8e11b427985db9de8043f155ea4ed19d96b306ca17c3da752903a5"}, "downloads": -1, "filename": "django-reroute-1.1.0.tar.gz", "has_sig": false, "md5_digest": "48b6d869544b366b471db14a4958a0f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7824, "upload_time": "2011-03-15T00:35:48", "upload_time_iso_8601": "2011-03-15T00:35:48.386556Z", "url": "https://files.pythonhosted.org/packages/d1/c5/9eee5d055d8b72eba2abf3f5252148c3fd3cf99128e953e1bfc0c58432d0/django-reroute-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "d075fa9cf139dbc0067cee905ab5f6b8", "sha256": "d5638d4c07c9323606ca81c91875c3acf61f6d4dc3ee54fe14963dc02b517a60"}, "downloads": -1, "filename": "django-reroute-1.1.1.tar.gz", "has_sig": false, "md5_digest": "d075fa9cf139dbc0067cee905ab5f6b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7949, "upload_time": "2011-04-19T00:24:30", "upload_time_iso_8601": "2011-04-19T00:24:30.757547Z", "url": "https://files.pythonhosted.org/packages/3b/c0/e4c018acb121ea208152cb6fa95dcc1c69880d6f661839f21d2a23f34e45/django-reroute-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d075fa9cf139dbc0067cee905ab5f6b8", "sha256": "d5638d4c07c9323606ca81c91875c3acf61f6d4dc3ee54fe14963dc02b517a60"}, "downloads": -1, "filename": "django-reroute-1.1.1.tar.gz", "has_sig": false, "md5_digest": "d075fa9cf139dbc0067cee905ab5f6b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7949, "upload_time": "2011-04-19T00:24:30", "upload_time_iso_8601": "2011-04-19T00:24:30.757547Z", "url": "https://files.pythonhosted.org/packages/3b/c0/e4c018acb121ea208152cb6fa95dcc1c69880d6f661839f21d2a23f34e45/django-reroute-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:13 2020"}