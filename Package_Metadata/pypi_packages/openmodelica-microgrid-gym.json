{"info": {"author": "LEA - Uni Paderborn", "author_email": "upblea@mail.upb.de", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "==========================\nOpenModelica Microgrid Gym\n==========================\n\n.. image:: https://travis-ci.org/upb-lea/openmodelica-microgrid-gym.svg?branch=master\n    :target: https://travis-ci.org/github/upb-lea/openmodelica-microgrid-gym\n\n.. image:: https://img.shields.io/badge/doc-success-success\n    :target: https://upb-lea.github.io/openmodelica-microgrid-gym\n\n.. image:: https://codecov.io/gh/upb-lea/openmodelica-microgrid-gym/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/upb-lea/openmodelica-microgrid-gym\n\n.. image:: https://img.shields.io/pypi/v/openmodelica_microgrid_gym.svg\n    :target: https://pypi.python.org/pypi/openmodelica_microgrid_gym\n\n.. image:: https://pyup.io/repos/github/upb-lea/openmodelica_microgrid_gym/shield.svg\n     :target: https://pyup.io/repos/github/upb-lea/openmodelica_microgrid_gym/\n     :alt: Updates\n\n.. image:: https://img.shields.io/github/license/upb-lea/openmodelica-microgrid-gym\n     :target: LICENSE\n\n.. figure:: https://github.com/upb-lea/openmodelica-microgrid-gym/raw/master/docs/pictures/microgrid.jpg\n\n**The OpenModelica Microgrid Gym (OMG) package is a software toolbox for the\nsimulation and control optimization of microgrids based on energy conversion by power electronic converters.**\n\nThe main characteristics of the toolbox are the plug-and-play grid design and simulation in OpenModelica as well as\nthe ready-to-go approach of intuitive reinfrocement learning (RL) approaches through a Python interface.\n\nThe OMG toolbox is built upon the `OpenAI Gym`_ environment definition framework.\nTherefore, the toolbox is specifically designed for running reinforcement\nlearning algorithms to train agents controlling power electronic converters in microgrids. Nevertheless, also arbritary classical control approaches can be combined and tested using the OMG interface.\n\n.. _OpenAI Gym: https://gym.openai.com/\n\n* Free software: GNU General Public License v3\n* Documentation: https://upb-lea.github.io/openmodelica-microgrid-gym\n\n\nInstallation\n------------\n\n\nInstall Python environment\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n- Install OpenModelica MicrogridGym from PyPI (recommended)::\n\n    $ pip install openmodelica_microgrid_gym\n\n- Or install from Github source::\n\n    $ git clone https://github.com/upb-lea/openmodelica-microgrid-gym.git\n    $ cd openmodelica_microgrid_gym\n    $ python setup.py install\n\n**Hint:** PyFMI_ might throw some errors while installing via pip.\nIt can be installed via ``conda`` by running::\n\n    $ conda install -c conda-forge pyfmi\n\n.. _PyFMI: https://github.com/modelon-community/PyFMI\n\nInstallation of OpenModelica\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOMG was create by using OMEdit_ v1.16\n\nIn this case, try to download the pre-built `virtual machine`_.\n\n.. _OMEdit: https://openmodelica.org/download/download-windows\n.. _virtual machine: https://openmodelica.org/download/virtual-machine\n\nGetting started\n---------------\n\n\nOMG uses the `FMI standard`_ for the exchange of the model between OpenModelica and python.\n\n.. _FMI standard: https://fmi-standard.org/\n\nAn example network consisting out of two inverters, three filters and an inductive load.\n\n.. figure:: https://github.com/upb-lea/openmodelica-microgrid-gym/raw/master/docs/pictures/omedit.jpg\n\nYou can either use one of the provided FMUs (Windows and Linux, 64-bit, both included in the grid.network.fmu) or create your own by running::\n\n    openmodelica_microgrid_gym\\fmu> omc create_fmu.mos\n\nRunning the ``staticctrl.py`` starts a simulation with a manually tuned cascaded PIPI controller\n\n.. figure:: https://github.com/upb-lea/openmodelica-microgrid-gym/raw/master/docs/pictures/control.jpg\n    :scale: 70%\n    :align: center\n\nA save Bayesian approach of a reinforcement learning agent is provided under examples/berkamkamp.py.\n\n.. figure:: https://github.com/upb-lea/openmodelica-microgrid-gym/raw/master/docs/pictures/kp_kp_J.png\n    :figwidth: 60%\n    :align: center\n\nEvery user defined settings can be directly done in the example program.\n\n.. code-block:: python\n\n    env = gym.make(environment-id, **kwargs)\n\nReturns an instantiated grid environment. Provide any additional settings right here (see full documentation for all possibilities)\n\nCitation\n--------\n\nA whitepaper for this framework will be avaiable soon. Please use the following BibTeX entry for citing us::\n\n    @misc{LEA2020XXXXXXX,\n        title={XXXXXXXXXX},\n        author={Daniel Weber and Stefan Heid and Henrik Bode and Oliver Wallscheid},\n        year={2020},\n        eprint={XXXXX},\n        archivePrefix={arXiv},\n        primaryClass={eess.SY}\n    }\n\n\nContributing\n------------\n\nPlease refer to the `contribution guide`_.\n\n.. _`contribution guide`: https://github.com/upb-lea/openmodelica-microgrid-gym/blob/master/CONTRIBUTING.rst\n\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n\n0.1.2 (2020-05-04)\n------------------\n* corrected pip install requirements\n\n\n\n0.1.1 (2020-04-22)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/upb-lea/openmodelica-microgrid-gym", "keywords": "openmodelica_microgrid_gym", "license": "GNU General Public License v3", "maintainer": "", "maintainer_email": "", "name": "openmodelica-microgrid-gym", "package_url": "https://pypi.org/project/openmodelica-microgrid-gym/", "platform": "", "project_url": "https://pypi.org/project/openmodelica-microgrid-gym/", "project_urls": {"Documentation": "https://upb-lea.github.io/openmodelica-microgrid-gym/", "Homepage": "https://github.com/upb-lea/openmodelica-microgrid-gym", "Source Code": "https://github.com/upb-lea/openmodelica-microgrid-gym"}, "release_url": "https://pypi.org/project/openmodelica-microgrid-gym/0.1.2/", "requires_dist": ["gym (>=0.15.3)", "numpy (>=1.17.2)", "matplotlib (>=3.1.1)", "scipy (>=1.3.1)", "pandas (>=1.0.1)", "tqdm (>=4)", "more-itertools (>=7)", "PyFMI (>=2.5)", "safeopt (>=0.16) ; extra == 'examples'", "GPy (>=1.9.9) ; extra == 'examples'"], "requires_python": ">=3.6", "summary": "OpenModelica Microgrid Gym", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"openmodelica-microgrid-gym\">\n<h2>OpenModelica Microgrid Gym</h2>\n<a href=\"https://travis-ci.org/github/upb-lea/openmodelica-microgrid-gym\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/upb-lea/openmodelica-microgrid-gym.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7cfeda0a7712df3865b220406130858c0c8c245a/68747470733a2f2f7472617669732d63692e6f72672f7570622d6c65612f6f70656e6d6f64656c6963612d6d6963726f677269642d67796d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://upb-lea.github.io/openmodelica-microgrid-gym\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/doc-success-success\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8b8e567742ac2db05007ab75b31890cc44b9dfc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f632d737563636573732d73756363657373\"></a>\n<a href=\"https://codecov.io/gh/upb-lea/openmodelica-microgrid-gym\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/upb-lea/openmodelica-microgrid-gym/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a6ec8988ae3b9ab2e419004b09a42e47dd10673/68747470733a2f2f636f6465636f762e696f2f67682f7570622d6c65612f6f70656e6d6f64656c6963612d6d6963726f677269642d67796d2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/openmodelica_microgrid_gym\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/openmodelica_microgrid_gym.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5eed4bf0e03971dc4657fbdaa2a3662d7ea02d7e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f70656e6d6f64656c6963615f6d6963726f677269645f67796d2e737667\"></a>\n<a href=\"https://pyup.io/repos/github/upb-lea/openmodelica_microgrid_gym/\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/efc17a6242723303b605d637f73e82b062b68e6d/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f7570622d6c65612f6f70656e6d6f64656c6963615f6d6963726f677269645f67796d2f736869656c642e737667\"></a>\n<a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/license/upb-lea/openmodelica-microgrid-gym\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4762d20a53403df9c6c3d392d551e66ded513d0f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7570622d6c65612f6f70656e6d6f64656c6963612d6d6963726f677269642d67796d\"></a>\n<div>\n<img alt=\"https://github.com/upb-lea/openmodelica-microgrid-gym/raw/master/docs/pictures/microgrid.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4bee438c0c57bfbf10879445b8c9623958a7ed9e/68747470733a2f2f6769746875622e636f6d2f7570622d6c65612f6f70656e6d6f64656c6963612d6d6963726f677269642d67796d2f7261772f6d61737465722f646f63732f70696374757265732f6d6963726f677269642e6a7067\">\n</div>\n<p><strong>The OpenModelica Microgrid Gym (OMG) package is a software toolbox for the\nsimulation and control optimization of microgrids based on energy conversion by power electronic converters.</strong></p>\n<p>The main characteristics of the toolbox are the plug-and-play grid design and simulation in OpenModelica as well as\nthe ready-to-go approach of intuitive reinfrocement learning (RL) approaches through a Python interface.</p>\n<p>The OMG toolbox is built upon the <a href=\"https://gym.openai.com/\" rel=\"nofollow\">OpenAI Gym</a> environment definition framework.\nTherefore, the toolbox is specifically designed for running reinforcement\nlearning algorithms to train agents controlling power electronic converters in microgrids. Nevertheless, also arbritary classical control approaches can be combined and tested using the OMG interface.</p>\n<ul>\n<li>Free software: GNU General Public License v3</li>\n<li>Documentation: <a href=\"https://upb-lea.github.io/openmodelica-microgrid-gym\" rel=\"nofollow\">https://upb-lea.github.io/openmodelica-microgrid-gym</a></li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<div id=\"install-python-environment\">\n<h4>Install Python environment</h4>\n<ul>\n<li><p>Install OpenModelica MicrogridGym from PyPI (recommended):</p>\n<pre>$ pip install openmodelica_microgrid_gym\n</pre>\n</li>\n<li><p>Or install from Github source:</p>\n<pre>$ git clone https://github.com/upb-lea/openmodelica-microgrid-gym.git\n$ cd openmodelica_microgrid_gym\n$ python setup.py install\n</pre>\n</li>\n</ul>\n<p><strong>Hint:</strong> <a href=\"https://github.com/modelon-community/PyFMI\" rel=\"nofollow\">PyFMI</a> might throw some errors while installing via pip.\nIt can be installed via <tt>conda</tt> by running:</p>\n<pre>$ conda install -c conda-forge pyfmi\n</pre>\n</div>\n<div id=\"installation-of-openmodelica\">\n<h4>Installation of OpenModelica</h4>\n<p>OMG was create by using <a href=\"https://openmodelica.org/download/download-windows\" rel=\"nofollow\">OMEdit</a> v1.16</p>\n<p>In this case, try to download the pre-built <a href=\"https://openmodelica.org/download/virtual-machine\" rel=\"nofollow\">virtual machine</a>.</p>\n</div>\n</div>\n<div id=\"getting-started\">\n<h3>Getting started</h3>\n<p>OMG uses the <a href=\"https://fmi-standard.org/\" rel=\"nofollow\">FMI standard</a> for the exchange of the model between OpenModelica and python.</p>\n<p>An example network consisting out of two inverters, three filters and an inductive load.</p>\n<div>\n<img alt=\"https://github.com/upb-lea/openmodelica-microgrid-gym/raw/master/docs/pictures/omedit.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5a5bbfaecd7a594bad7304af2b1bfb03b141b95/68747470733a2f2f6769746875622e636f6d2f7570622d6c65612f6f70656e6d6f64656c6963612d6d6963726f677269642d67796d2f7261772f6d61737465722f646f63732f70696374757265732f6f6d656469742e6a7067\">\n</div>\n<p>You can either use one of the provided FMUs (Windows and Linux, 64-bit, both included in the grid.network.fmu) or create your own by running:</p>\n<pre>openmodelica_microgrid_gym\\fmu&gt; omc create_fmu.mos\n</pre>\n<p>Running the <tt>staticctrl.py</tt> starts a simulation with a manually tuned cascaded PIPI controller</p>\n<div>\n<img alt=\"https://github.com/upb-lea/openmodelica-microgrid-gym/raw/master/docs/pictures/control.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fca5539e76ceaeb02fc89f292ca1bc6610833593/68747470733a2f2f6769746875622e636f6d2f7570622d6c65612f6f70656e6d6f64656c6963612d6d6963726f677269642d67796d2f7261772f6d61737465722f646f63732f70696374757265732f636f6e74726f6c2e6a7067\">\n</div>\n<p>A save Bayesian approach of a reinforcement learning agent is provided under examples/berkamkamp.py.</p>\n<div>\n<img alt=\"https://github.com/upb-lea/openmodelica-microgrid-gym/raw/master/docs/pictures/kp_kp_J.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c648ade0452bad412713c16af3952a833ee15223/68747470733a2f2f6769746875622e636f6d2f7570622d6c65612f6f70656e6d6f64656c6963612d6d6963726f677269642d67796d2f7261772f6d61737465722f646f63732f70696374757265732f6b705f6b705f4a2e706e67\">\n</div>\n<p>Every user defined settings can be directly done in the example program.</p>\n<pre><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"n\">environment</span><span class=\"o\">-</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Returns an instantiated grid environment. Provide any additional settings right here (see full documentation for all possibilities)</p>\n</div>\n<div id=\"citation\">\n<h3>Citation</h3>\n<p>A whitepaper for this framework will be avaiable soon. Please use the following BibTeX entry for citing us:</p>\n<pre>@misc{LEA2020XXXXXXX,\n    title={XXXXXXXXXX},\n    author={Daniel Weber and Stefan Heid and Henrik Bode and Oliver Wallscheid},\n    year={2020},\n    eprint={XXXXX},\n    archivePrefix={arXiv},\n    primaryClass={eess.SY}\n}\n</pre>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Please refer to the <a href=\"https://github.com/upb-lea/openmodelica-microgrid-gym/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">contribution guide</a>.</p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.1.2 (2020-05-04)</h3>\n<ul>\n<li>corrected pip install requirements</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.1 (2020-04-22)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7164790, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "17a07c20e5da2be4cd11c7bd9cbe22e1", "sha256": "c0a46885eabcddedd16bf896551f9ab5fa2a609d455032cd8399e62577b007ca"}, "downloads": -1, "filename": "openmodelica_microgrid_gym-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "17a07c20e5da2be4cd11c7bd9cbe22e1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 43607, "upload_time": "2020-04-24T13:44:24", "upload_time_iso_8601": "2020-04-24T13:44:24.365268Z", "url": "https://files.pythonhosted.org/packages/a6/be/5ddd33fd5efbdadf3afd88e929c8396831d3e23476388c12650221329c8c/openmodelica_microgrid_gym-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "974dccf5f8661437a88fea396e295e12", "sha256": "01c67bbe1d453534e880a48b9f571e1cd273a44515fe6600c566c781e90dae1a"}, "downloads": -1, "filename": "openmodelica_microgrid_gym-0.1.1.tar.gz", "has_sig": false, "md5_digest": "974dccf5f8661437a88fea396e295e12", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1770953, "upload_time": "2020-04-24T13:44:28", "upload_time_iso_8601": "2020-04-24T13:44:28.070392Z", "url": "https://files.pythonhosted.org/packages/0e/6c/439f92de5b08db4ca302d1fa5648d64a2b629d0ecb63b9442b59c5488f67/openmodelica_microgrid_gym-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "251ffcc4ecbb3acca5955f6d72c8f053", "sha256": "2553674d2c2bd257aa098699dd984a4ff5cdcd1298f3e9a2efc619cdc1e29729"}, "downloads": -1, "filename": "openmodelica_microgrid_gym-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "251ffcc4ecbb3acca5955f6d72c8f053", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 43718, "upload_time": "2020-05-04T14:28:26", "upload_time_iso_8601": "2020-05-04T14:28:26.702640Z", "url": "https://files.pythonhosted.org/packages/95/9e/35a5931fe36e30186089e8521c0d9fe9509df98b5156c86ce4141cdc32f2/openmodelica_microgrid_gym-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7fbe9adf30d752fc9922e1fae0840ac", "sha256": "6037ba884464710666bc4abe98eb5c5fd88f7d295356f2d0720dd5d32aab0162"}, "downloads": -1, "filename": "openmodelica_microgrid_gym-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d7fbe9adf30d752fc9922e1fae0840ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1065022, "upload_time": "2020-05-04T14:28:27", "upload_time_iso_8601": "2020-05-04T14:28:27.731927Z", "url": "https://files.pythonhosted.org/packages/2d/46/046f2cb6a22f55d0bf4a53800cb859eaf23896c25dd4a903b2c9cbfe8690/openmodelica_microgrid_gym-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "251ffcc4ecbb3acca5955f6d72c8f053", "sha256": "2553674d2c2bd257aa098699dd984a4ff5cdcd1298f3e9a2efc619cdc1e29729"}, "downloads": -1, "filename": "openmodelica_microgrid_gym-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "251ffcc4ecbb3acca5955f6d72c8f053", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 43718, "upload_time": "2020-05-04T14:28:26", "upload_time_iso_8601": "2020-05-04T14:28:26.702640Z", "url": "https://files.pythonhosted.org/packages/95/9e/35a5931fe36e30186089e8521c0d9fe9509df98b5156c86ce4141cdc32f2/openmodelica_microgrid_gym-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7fbe9adf30d752fc9922e1fae0840ac", "sha256": "6037ba884464710666bc4abe98eb5c5fd88f7d295356f2d0720dd5d32aab0162"}, "downloads": -1, "filename": "openmodelica_microgrid_gym-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d7fbe9adf30d752fc9922e1fae0840ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1065022, "upload_time": "2020-05-04T14:28:27", "upload_time_iso_8601": "2020-05-04T14:28:27.731927Z", "url": "https://files.pythonhosted.org/packages/2d/46/046f2cb6a22f55d0bf4a53800cb859eaf23896c25dd4a903b2c9cbfe8690/openmodelica_microgrid_gym-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:44 2020"}