{"info": {"author": "Robert Lechte", "author_email": "robertlechte@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha"], "description": "urly: nice URLs for python\n==========================\n\nSometimes it feels like working with URLs is harder than it should be. Urly is a little wrapper around the werkzeug URL class to make things easy and pleasant. One module to pip install, one import, and then everything is easy. For instance:\n\n.. code-block:: python\n\n    >>> from urly import URL\n    >>> url = URL('http://example.com/old/path?a=b')\n    >>> url.path = '/new/path'\n    >>> url.add_param('a', 'c')\n    >>> print(url)\n    http://example.com/new/path?a=b&a=c\n    >>> print(url.relative_url)\n    /new/path?a=b&a=c\n\nCommon tasks like changing a path, adding a parameter, and getting the relative URL, are all simple.\n\nUrly also lets you parse URLs the way a browser would. For instance:\n\n.. code-block:: python\n\n    >>> url = URL('example.com', parse_like_browser=True)\n    >>> print(url)\n    http://example.com\n\nDocumentation\n-------------\n\nFull documentation is at `https://urly.readthedocs.org <https://urly.readthedocs.org>`_.\n\n\nInstall\n-------\n\nSimply install with `pip <https://pip.pypa.io>`_::\n\n    $ pip install urly", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "urly", "package_url": "https://pypi.org/project/urly/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/urly/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/urly/0.1.1455780396/", "requires_dist": null, "requires_python": null, "summary": "Nice URLs for Python", "version": "0.1.1455780396", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Sometimes it feels like working with URLs is harder than it should be. Urly is a little wrapper around the werkzeug URL class to make things easy and pleasant. One module to pip install, one import, and then everything is easy. For instance:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">urly</span> <span class=\"kn\">import</span> <span class=\"n\">URL</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">'http://example.com/old/path?a=b'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'/new/path'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">add_param</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">new</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"err\">?</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">c</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">relative_url</span><span class=\"p\">)</span>\n<span class=\"o\">/</span><span class=\"n\">new</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"err\">?</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">c</span>\n</pre>\n<p>Common tasks like changing a path, adding a parameter, and getting the relative URL, are all simple.</p>\n<p>Urly also lets you parse URLs the way a browser would. For instance:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">'example.com'</span><span class=\"p\">,</span> <span class=\"n\">parse_like_browser</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">com</span>\n</pre>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Full documentation is at <a href=\"https://urly.readthedocs.org\" rel=\"nofollow\">https://urly.readthedocs.org</a>.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Simply install with <a href=\"https://pip.pypa.io\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ pip install urly\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1962743, "releases": {"0.1.1455780396": [{"comment_text": "", "digests": {"md5": "c667338e98a2df1dead77ba51d60d9d1", "sha256": "a2e68e6ab208bb764162cc556825f5c82c2e248682d19f3659abde5e08773a1e"}, "downloads": -1, "filename": "urly-0.1.1455780396-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c667338e98a2df1dead77ba51d60d9d1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 5216, "upload_time": "2016-02-18T07:33:07", "upload_time_iso_8601": "2016-02-18T07:33:07.946169Z", "url": "https://files.pythonhosted.org/packages/27/ef/e339439fea2e86275cf66746580a9f614b1419d9d32195c11f06aa6ea081/urly-0.1.1455780396-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e30ac65cb53fc7b498e7eb1d5dfece0a", "sha256": "a62c31b58c26c2ea0689e6d4be5347ef6e8771e34ad41f4af186320587e7fc84"}, "downloads": -1, "filename": "urly-0.1.1455780396.tar.gz", "has_sig": false, "md5_digest": "e30ac65cb53fc7b498e7eb1d5dfece0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3490, "upload_time": "2016-02-18T07:32:58", "upload_time_iso_8601": "2016-02-18T07:32:58.189486Z", "url": "https://files.pythonhosted.org/packages/93/82/bb3bfdf18a0f860dfed92b7a78455544a42cc45ea228f72042ce012f4c11/urly-0.1.1455780396.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c667338e98a2df1dead77ba51d60d9d1", "sha256": "a2e68e6ab208bb764162cc556825f5c82c2e248682d19f3659abde5e08773a1e"}, "downloads": -1, "filename": "urly-0.1.1455780396-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c667338e98a2df1dead77ba51d60d9d1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 5216, "upload_time": "2016-02-18T07:33:07", "upload_time_iso_8601": "2016-02-18T07:33:07.946169Z", "url": "https://files.pythonhosted.org/packages/27/ef/e339439fea2e86275cf66746580a9f614b1419d9d32195c11f06aa6ea081/urly-0.1.1455780396-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e30ac65cb53fc7b498e7eb1d5dfece0a", "sha256": "a62c31b58c26c2ea0689e6d4be5347ef6e8771e34ad41f4af186320587e7fc84"}, "downloads": -1, "filename": "urly-0.1.1455780396.tar.gz", "has_sig": false, "md5_digest": "e30ac65cb53fc7b498e7eb1d5dfece0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3490, "upload_time": "2016-02-18T07:32:58", "upload_time_iso_8601": "2016-02-18T07:32:58.189486Z", "url": "https://files.pythonhosted.org/packages/93/82/bb3bfdf18a0f860dfed92b7a78455544a42cc45ea228f72042ce012f4c11/urly-0.1.1455780396.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:18 2020"}