{"info": {"author": "Ross Patterson", "author_email": "me@rpatterson.net", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. -*-doctest-*-\n\n========================\ncollective.catalogexport\n========================\n\nThe data contained in tabular form in ZCatalogs is often exactly the\ndata site admins frequently want to export into some other format,\nsuch as CSV.  This package provides views for exporting the catalog\ndata into various formats.\n\nCurrently, only exporting the whole catalog with all\nmetadata/brains/columns as CSV is supported.  I plan to add support\nfor submiting arbitrary index queries and for controlling the\nmetadata/brains/columns exported.\n\nStart with a catalog with some indexes and metadata/brains/columns and\na few objects indexed.\n\n    >>> self.folder.manage_addProduct['ZCatalog'].manage_addZCatalog(\n    ...     'catalog', 'Catalog')\n    >>> catalog = self.folder.catalog\n\n    >>> catalog.addIndex('id', 'FieldIndex')\n    >>> catalog.addIndex('title', 'FieldIndex')\n    >>> catalog.indexes()\n    ['id', 'title']\n\n    >>> catalog.addColumn('meta_type')\n    >>> catalog.addColumn('id')\n\n    >>> self.folder.manage_addProduct['OFSP'].manage_addDTMLDocument(\n    ...     'foo_doc', 'Foo Document')\n    ''\n    >>> catalog.catalog_object(self.folder.foo_doc)\n    >>> self.folder.manage_addProduct['OFSP'].manage_addDTMLDocument(\n    ...     'bar_doc', 'Bar Document')\n    ''\n    >>> catalog.catalog_object(self.folder.bar_doc)\n\n    >>> [(brain.meta_type, brain.id) for brain in catalog()]\n    [('DTML Document', 'foo_doc'), ('DTML Document', 'bar_doc')]\n\nOpen the export view in the browser specifying the export format as\nCSV.\n\n    >>> from Products.Five.testbrowser import Browser\n    >>> from Testing import ZopeTestCase\n    >>> self.setRoles(['Manager'])\n    >>> browser = Browser()\n    >>> browser.addHeader(\n    ...     'Authorization', 'Basic %s:%s' %\n    ...     (ZopeTestCase.user_name, ZopeTestCase.user_password))\n    >>> browser.handleErrors = False\n    >>> browser.open(catalog.absolute_url()+\n    ...              '/export?Content-Type=text/csv')\n    >>> browser.isHtml\n    False\n    >>> print browser.headers\n    Status: 200 OK...\n    Content-Disposition: attachment...\n    Content-Type: text/csv...\n    >>> print browser.contents\n\nXXX the testbrowser doesn't handle use of response.write().  I've\nverified that this works in a real browser::\n\n    DTML Document,foo_doc\n    DTML Document,bar_doc\n\nChangelog\n=========\n\n0.1 - 2008-11-14\n----------------\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/collective.catalogexport", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.catalogexport", "package_url": "https://pypi.org/project/collective.catalogexport/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.catalogexport/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/collective.catalogexport"}, "release_url": "https://pypi.org/project/collective.catalogexport/0.1/", "requires_dist": null, "requires_python": null, "summary": "Use ZCatalogs as export sources", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The data contained in tabular form in ZCatalogs is often exactly the\ndata site admins frequently want to export into some other format,\nsuch as CSV.  This package provides views for exporting the catalog\ndata into various formats.</p>\n<p>Currently, only exporting the whole catalog with all\nmetadata/brains/columns as CSV is supported.  I plan to add support\nfor submiting arbitrary index queries and for controlling the\nmetadata/brains/columns exported.</p>\n<p>Start with a catalog with some indexes and metadata/brains/columns and\na few objects indexed.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; self.folder.manage_addProduct['ZCatalog'].manage_addZCatalog(\n...     'catalog', 'Catalog')\n&gt;&gt;&gt; catalog = self.folder.catalog\n</pre>\n<pre>&gt;&gt;&gt; catalog.addIndex('id', 'FieldIndex')\n&gt;&gt;&gt; catalog.addIndex('title', 'FieldIndex')\n&gt;&gt;&gt; catalog.indexes()\n['id', 'title']\n</pre>\n<pre>&gt;&gt;&gt; catalog.addColumn('meta_type')\n&gt;&gt;&gt; catalog.addColumn('id')\n</pre>\n<pre>&gt;&gt;&gt; self.folder.manage_addProduct['OFSP'].manage_addDTMLDocument(\n...     'foo_doc', 'Foo Document')\n''\n&gt;&gt;&gt; catalog.catalog_object(self.folder.foo_doc)\n&gt;&gt;&gt; self.folder.manage_addProduct['OFSP'].manage_addDTMLDocument(\n...     'bar_doc', 'Bar Document')\n''\n&gt;&gt;&gt; catalog.catalog_object(self.folder.bar_doc)\n</pre>\n<pre>&gt;&gt;&gt; [(brain.meta_type, brain.id) for brain in catalog()]\n[('DTML Document', 'foo_doc'), ('DTML Document', 'bar_doc')]\n</pre>\n</blockquote>\n<p>Open the export view in the browser specifying the export format as\nCSV.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from Products.Five.testbrowser import Browser\n&gt;&gt;&gt; from Testing import ZopeTestCase\n&gt;&gt;&gt; self.setRoles(['Manager'])\n&gt;&gt;&gt; browser = Browser()\n&gt;&gt;&gt; browser.addHeader(\n...     'Authorization', 'Basic %s:%s' %\n...     (ZopeTestCase.user_name, ZopeTestCase.user_password))\n&gt;&gt;&gt; browser.handleErrors = False\n&gt;&gt;&gt; browser.open(catalog.absolute_url()+\n...              '/export?Content-Type=text/csv')\n&gt;&gt;&gt; browser.isHtml\nFalse\n&gt;&gt;&gt; print browser.headers\nStatus: 200 OK...\nContent-Disposition: attachment...\nContent-Type: text/csv...\n&gt;&gt;&gt; print browser.contents\n</pre>\n</blockquote>\n<p>XXX the testbrowser doesn\u2019t handle use of response.write().  I\u2019ve\nverified that this works in a real browser:</p>\n<pre>DTML Document,foo_doc\nDTML Document,bar_doc\n</pre>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1 - 2008-11-14</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 845317, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ed80d0d124c944698893123a650e5452", "sha256": "617bba0781f65098a5ba1d92a1fe8abe655717d377b6f3407be032d316e1cf40"}, "downloads": -1, "filename": "collective.catalogexport-0.1.tar.gz", "has_sig": false, "md5_digest": "ed80d0d124c944698893123a650e5452", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4917, "upload_time": "2008-11-15T04:34:50", "upload_time_iso_8601": "2008-11-15T04:34:50Z", "url": "https://files.pythonhosted.org/packages/c6/3f/ca247a388eb86ed2f1e5f0c9a996f57002106a66854c52a42b605cc89d68/collective.catalogexport-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed80d0d124c944698893123a650e5452", "sha256": "617bba0781f65098a5ba1d92a1fe8abe655717d377b6f3407be032d316e1cf40"}, "downloads": -1, "filename": "collective.catalogexport-0.1.tar.gz", "has_sig": false, "md5_digest": "ed80d0d124c944698893123a650e5452", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4917, "upload_time": "2008-11-15T04:34:50", "upload_time_iso_8601": "2008-11-15T04:34:50Z", "url": "https://files.pythonhosted.org/packages/c6/3f/ca247a388eb86ed2f1e5f0c9a996f57002106a66854c52a42b605cc89d68/collective.catalogexport-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:00 2020"}