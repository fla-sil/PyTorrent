{"info": {"author": "thenamesweretakenalready", "author_email": "leet_haker@cyber-wizard.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# Sv443's Joke API Wrapper\n\n[![Downloads](https://pepy.tech/badge/jokeapi)](https://pepy.tech/downloads/jokeapi)\n[![CircleCI](https://circleci.com/gh/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper.svg?style=svg)](https://circleci.com/gh/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper)\n\nAn API wrapper for Sv443's joke api which provides simple yet versatile functionality,\nwhile also maintaining a readable codebase.\n\n## Install\n\nYou can install jokeapi through [pip](https://pypi.org/project/pip/) by using `pip install jokeapi`\n\nSo far there are no build from source instructions.\n\n---\n\n# get_joke\n\nThe wrapper is structured in such a way that the end-user should only ever have to\ninteract with one function. This function is `get_joke()`\n\n---\n\n## get_joke\n\n### Example\n\n```python\n  from jokeapi import Jokes # Import the Jokes class\n\n  j = Jokes()  # Initialise the class\n  j.get_joke()  # Retrieve a random joke\n```\n\n### Parameters\n\n---\n\n#### category\n\nA list of categories that the returned joke should fit in.\nOptions are:\n`programming`,\n`miscellaneous`,\n`dark`\n\nIf left blank it will default to use `Any`.\n\n##### Example\n\n```python\n  joke = get_joke(categories=['programming', 'dark'])  # Will return a joke that fits in either the programming or dark category.\n```\n\n---\n\n#### blacklist\n\nA list of properties that the joke *shouldn't* have.\nOptions are:\n`nsfw`,\n`religious`,\n`political`,\n`racist`,\n`sexist`\n\nIf left blank it will default to `None`.\n\n##### Example\n\n```python\n  joke = get_joke(blacklist=['nsfw', 'racist'])  # Will return a joke that does not have either the flag \"nsfw\" or \"racist\".\n```\n\n---\n\n#### response_format\n\nThe format in which the API should respond.\nOptions are:\n`json`,\n`yaml`,\n`xml`,\n`txt`\n\nIf left blank it will default to `json`.\n\n#### Example\n\n```python\n  joke = get_joke(response_format=\"xml\")  # Will return a joke in xml format.\n```\n\n---\n\n### type\n\nThe type of joke returned.\nOptions are:\n`single`,\n`twopart`\n\nIf left blank it will default to `Any`\n\n#### Example\n\n```python\n  joke = get_joke(type=\"twopart\")  # Will return a twopart joke; both a setup and a delivery.\n```\n\n---\n\n### search_string\n\nA string to search for in jokes.\n\nIf left blank it will default to `None`\n\n#### Example\n\n```python\n  joke = get_joke(search_string=\"the\")  # Will return a joke with the word \"the\" in it.\n  # If there are no jokes then it will return the error from the API.\n```\n\n---\n\n### id_range\n\nThe range in which the selected joke should fall. ID's are decided by the order in which jokes are submitted.\nThe argument passes should be in form of list or tuple, and should not exceed length of 2 items. First item\nshould be minimum 0.\n\nIf left blank it will default to the maximum range.\n\n\n#### Example\n\n```python\n  joke = get_joke(id_range=[10,100])  # Will return a joke with the ID between 10 and 100\n```\n\n---\n\n## Returns\n\nDepending on what format is chosen different things will be returned.\n\n\n### json\n\nA succesful API call will return:\n\n```python\n  {\n      \"category\": \"Miscellaneous\",\n      \"type\": \"twopart\",\n      \"setup\": \"I told my psychiatrist I got suicidal tendencies.\",\n      \"delivery\": \"He said from now on I have to pay in advance.\",\n      \"flags\": {\n          \"nsfw\": false,\n          \"religious\": false,\n          \"political\": false,\n          \"racist\": false,\n          \"sexist\": false\n      },\n      \"id\": 94,\n      \"error\": false\n  }\n```\n\n\n### xml\n\nA succesful API call will return:\n\n```xml\n<?xml version='1.0'?>\n<data>\n    <category>Dark</category>\n    <type>single</type>\n    <joke>My ex had an accident. I told the paramedics the wrong blood type for her. She'll finally experience what rejection is really like.</joke>\n    <flags>\n        <nsfw>false</nsfw>\n        <religious>false</religious>\n        <political>false</political>\n        <racist>false</racist>\n        <sexist>false</sexist>\n    </flags>\n    <id>154</id>\n    <error>false</error>\n</data>\n```\n\n\n### yaml\n\nA succesful API call will return:\n\n```yaml\ncategory: \"Programming\"\ntype: \"single\"\njoke: \"Your momma is so fat, you need to switch to NTFS to store a picture of her.\"\nflags:\n  nsfw: false\n  religious: false\n  political: false\n  racist: false\n  sexist: false\nid: 56\nerror: false\n```\n\n\n### txt\n\nA succesful API call will return:\n\n```\nWhy does no one like SQLrillex?\n\nHe keeps dropping the database.\n```\n\n---\n\n## Errors\n\nThe wrapper can raise multiple different errors depending on what you did wrong.\n\n### ValueErrors will always be raised with expected errors.\n\nThe errors are descriptive enough that you should be able to solve them with the information provided in the error message.\nIf not, feel free to ask me through one of the channels provided below.\n\n---\n\nDeveloper contact:\n[Discord](https://discord.gg/mB989eP)\n[Issue Tracker](https://github.com/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper/issues)\n[e-mail](mailto:leet_haker@cyber-wizard.com)\n[Twitter](https://twitter.com/HakkerLeet)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/user/Sv443s-JokeAPI-Python-Wrapper/archive/v0.2.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper", "keywords": "api wrapper,wrapper,api,jokes", "license": "GNU General Public License v3 (GPLv3)", "maintainer": "", "maintainer_email": "", "name": "jokeapi", "package_url": "https://pypi.org/project/jokeapi/", "platform": "", "project_url": "https://pypi.org/project/jokeapi/", "project_urls": {"Download": "https://github.com/user/Sv443s-JokeAPI-Python-Wrapper/archive/v0.2.0.tar.gz", "Homepage": "https://github.com/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper"}, "release_url": "https://pypi.org/project/jokeapi/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "An API Wrapper for Sv443's JokeAPI", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sv443's Joke API Wrapper</h1>\n<p><a href=\"https://pepy.tech/downloads/jokeapi\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae4fdfceee3a1de0a4cdf7c717b8984c96fe7183/68747470733a2f2f706570792e746563682f62616467652f6a6f6b65617069\"></a>\n<a href=\"https://circleci.com/gh/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71e51e475030a1c346a9cbc6da15b94198a43aa1/68747470733a2f2f636972636c6563692e636f6d2f67682f7468656e616d65737765726574616b656e616c72656164792f5376343433732d4a6f6b654150492d507974686f6e2d577261707065722e7376673f7374796c653d737667\"></a></p>\n<p>An API wrapper for Sv443's joke api which provides simple yet versatile functionality,\nwhile also maintaining a readable codebase.</p>\n<h2>Install</h2>\n<p>You can install jokeapi through <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a> by using <code>pip install jokeapi</code></p>\n<p>So far there are no build from source instructions.</p>\n<hr>\n<h1>get_joke</h1>\n<p>The wrapper is structured in such a way that the end-user should only ever have to\ninteract with one function. This function is <code>get_joke()</code></p>\n<hr>\n<h2>get_joke</h2>\n<h3>Example</h3>\n<pre>  <span class=\"kn\">from</span> <span class=\"nn\">jokeapi</span> <span class=\"kn\">import</span> <span class=\"n\">Jokes</span> <span class=\"c1\"># Import the Jokes class</span>\n\n  <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">Jokes</span><span class=\"p\">()</span>  <span class=\"c1\"># Initialise the class</span>\n  <span class=\"n\">j</span><span class=\"o\">.</span><span class=\"n\">get_joke</span><span class=\"p\">()</span>  <span class=\"c1\"># Retrieve a random joke</span>\n</pre>\n<h3>Parameters</h3>\n<hr>\n<h4>category</h4>\n<p>A list of categories that the returned joke should fit in.\nOptions are:\n<code>programming</code>,\n<code>miscellaneous</code>,\n<code>dark</code></p>\n<p>If left blank it will default to use <code>Any</code>.</p>\n<h5>Example</h5>\n<pre>  <span class=\"n\">joke</span> <span class=\"o\">=</span> <span class=\"n\">get_joke</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'programming'</span><span class=\"p\">,</span> <span class=\"s1\">'dark'</span><span class=\"p\">])</span>  <span class=\"c1\"># Will return a joke that fits in either the programming or dark category.</span>\n</pre>\n<hr>\n<h4>blacklist</h4>\n<p>A list of properties that the joke <em>shouldn't</em> have.\nOptions are:\n<code>nsfw</code>,\n<code>religious</code>,\n<code>political</code>,\n<code>racist</code>,\n<code>sexist</code></p>\n<p>If left blank it will default to <code>None</code>.</p>\n<h5>Example</h5>\n<pre>  <span class=\"n\">joke</span> <span class=\"o\">=</span> <span class=\"n\">get_joke</span><span class=\"p\">(</span><span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'nsfw'</span><span class=\"p\">,</span> <span class=\"s1\">'racist'</span><span class=\"p\">])</span>  <span class=\"c1\"># Will return a joke that does not have either the flag \"nsfw\" or \"racist\".</span>\n</pre>\n<hr>\n<h4>response_format</h4>\n<p>The format in which the API should respond.\nOptions are:\n<code>json</code>,\n<code>yaml</code>,\n<code>xml</code>,\n<code>txt</code></p>\n<p>If left blank it will default to <code>json</code>.</p>\n<h4>Example</h4>\n<pre>  <span class=\"n\">joke</span> <span class=\"o\">=</span> <span class=\"n\">get_joke</span><span class=\"p\">(</span><span class=\"n\">response_format</span><span class=\"o\">=</span><span class=\"s2\">\"xml\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Will return a joke in xml format.</span>\n</pre>\n<hr>\n<h3>type</h3>\n<p>The type of joke returned.\nOptions are:\n<code>single</code>,\n<code>twopart</code></p>\n<p>If left blank it will default to <code>Any</code></p>\n<h4>Example</h4>\n<pre>  <span class=\"n\">joke</span> <span class=\"o\">=</span> <span class=\"n\">get_joke</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"twopart\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Will return a twopart joke; both a setup and a delivery.</span>\n</pre>\n<hr>\n<h3>search_string</h3>\n<p>A string to search for in jokes.</p>\n<p>If left blank it will default to <code>None</code></p>\n<h4>Example</h4>\n<pre>  <span class=\"n\">joke</span> <span class=\"o\">=</span> <span class=\"n\">get_joke</span><span class=\"p\">(</span><span class=\"n\">search_string</span><span class=\"o\">=</span><span class=\"s2\">\"the\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Will return a joke with the word \"the\" in it.</span>\n  <span class=\"c1\"># If there are no jokes then it will return the error from the API.</span>\n</pre>\n<hr>\n<h3>id_range</h3>\n<p>The range in which the selected joke should fall. ID's are decided by the order in which jokes are submitted.\nThe argument passes should be in form of list or tuple, and should not exceed length of 2 items. First item\nshould be minimum 0.</p>\n<p>If left blank it will default to the maximum range.</p>\n<h4>Example</h4>\n<pre>  <span class=\"n\">joke</span> <span class=\"o\">=</span> <span class=\"n\">get_joke</span><span class=\"p\">(</span><span class=\"n\">id_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">])</span>  <span class=\"c1\"># Will return a joke with the ID between 10 and 100</span>\n</pre>\n<hr>\n<h2>Returns</h2>\n<p>Depending on what format is chosen different things will be returned.</p>\n<h3>json</h3>\n<p>A succesful API call will return:</p>\n<pre>  <span class=\"p\">{</span>\n      <span class=\"s2\">\"category\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Miscellaneous\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"twopart\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"setup\"</span><span class=\"p\">:</span> <span class=\"s2\">\"I told my psychiatrist I got suicidal tendencies.\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"delivery\"</span><span class=\"p\">:</span> <span class=\"s2\">\"He said from now on I have to pay in advance.\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"flags\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s2\">\"nsfw\"</span><span class=\"p\">:</span> <span class=\"n\">false</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"religious\"</span><span class=\"p\">:</span> <span class=\"n\">false</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"political\"</span><span class=\"p\">:</span> <span class=\"n\">false</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"racist\"</span><span class=\"p\">:</span> <span class=\"n\">false</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"sexist\"</span><span class=\"p\">:</span> <span class=\"n\">false</span>\n      <span class=\"p\">},</span>\n      <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">94</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"error\"</span><span class=\"p\">:</span> <span class=\"n\">false</span>\n  <span class=\"p\">}</span>\n</pre>\n<h3>xml</h3>\n<p>A succesful API call will return:</p>\n<pre><span class=\"cp\">&lt;?xml version='1.0'?&gt;</span>\n<span class=\"nt\">&lt;data&gt;</span>\n    <span class=\"nt\">&lt;category&gt;</span>Dark<span class=\"nt\">&lt;/category&gt;</span>\n    <span class=\"nt\">&lt;type&gt;</span>single<span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;joke&gt;</span>My ex had an accident. I told the paramedics the wrong blood type for her. She'll finally experience what rejection is really like.<span class=\"nt\">&lt;/joke&gt;</span>\n    <span class=\"nt\">&lt;flags&gt;</span>\n        <span class=\"nt\">&lt;nsfw&gt;</span>false<span class=\"nt\">&lt;/nsfw&gt;</span>\n        <span class=\"nt\">&lt;religious&gt;</span>false<span class=\"nt\">&lt;/religious&gt;</span>\n        <span class=\"nt\">&lt;political&gt;</span>false<span class=\"nt\">&lt;/political&gt;</span>\n        <span class=\"nt\">&lt;racist&gt;</span>false<span class=\"nt\">&lt;/racist&gt;</span>\n        <span class=\"nt\">&lt;sexist&gt;</span>false<span class=\"nt\">&lt;/sexist&gt;</span>\n    <span class=\"nt\">&lt;/flags&gt;</span>\n    <span class=\"nt\">&lt;id&gt;</span>154<span class=\"nt\">&lt;/id&gt;</span>\n    <span class=\"nt\">&lt;error&gt;</span>false<span class=\"nt\">&lt;/error&gt;</span>\n<span class=\"nt\">&lt;/data&gt;</span>\n</pre>\n<h3>yaml</h3>\n<p>A succesful API call will return:</p>\n<pre><span class=\"nt\">category</span><span class=\"p\">:</span> <span class=\"s\">\"Programming\"</span>\n<span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"s\">\"single\"</span>\n<span class=\"nt\">joke</span><span class=\"p\">:</span> <span class=\"s\">\"Your</span><span class=\"nv\"> </span><span class=\"s\">momma</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">so</span><span class=\"nv\"> </span><span class=\"s\">fat,</span><span class=\"nv\"> </span><span class=\"s\">you</span><span class=\"nv\"> </span><span class=\"s\">need</span><span class=\"nv\"> </span><span class=\"s\">to</span><span class=\"nv\"> </span><span class=\"s\">switch</span><span class=\"nv\"> </span><span class=\"s\">to</span><span class=\"nv\"> </span><span class=\"s\">NTFS</span><span class=\"nv\"> </span><span class=\"s\">to</span><span class=\"nv\"> </span><span class=\"s\">store</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">picture</span><span class=\"nv\"> </span><span class=\"s\">of</span><span class=\"nv\"> </span><span class=\"s\">her.\"</span>\n<span class=\"nt\">flags</span><span class=\"p\">:</span>\n  <span class=\"nt\">nsfw</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n  <span class=\"nt\">religious</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n  <span class=\"nt\">political</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n  <span class=\"nt\">racist</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n  <span class=\"nt\">sexist</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n<span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">56</span>\n<span class=\"nt\">error</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n</pre>\n<h3>txt</h3>\n<p>A succesful API call will return:</p>\n<pre><code>Why does no one like SQLrillex?\n\nHe keeps dropping the database.\n</code></pre>\n<hr>\n<h2>Errors</h2>\n<p>The wrapper can raise multiple different errors depending on what you did wrong.</p>\n<h3>ValueErrors will always be raised with expected errors.</h3>\n<p>The errors are descriptive enough that you should be able to solve them with the information provided in the error message.\nIf not, feel free to ask me through one of the channels provided below.</p>\n<hr>\n<p>Developer contact:\n<a href=\"https://discord.gg/mB989eP\" rel=\"nofollow\">Discord</a>\n<a href=\"https://github.com/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper/issues\" rel=\"nofollow\">Issue Tracker</a>\n<a href=\"mailto:leet_haker@cyber-wizard.com\">e-mail</a>\n<a href=\"https://twitter.com/HakkerLeet\" rel=\"nofollow\">Twitter</a></p>\n\n          </div>"}, "last_serial": 6851528, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0390a794e1ce393e7459b11d8057b3c0", "sha256": "baf1c250377b5461ea0e3f56803f25b912e2c8cf3da0c6db4965898029ff789c"}, "downloads": -1, "filename": "jokeapi-0.1.tar.gz", "has_sig": false, "md5_digest": "0390a794e1ce393e7459b11d8057b3c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2231, "upload_time": "2020-02-29T21:48:15", "upload_time_iso_8601": "2020-02-29T21:48:15.254795Z", "url": "https://files.pythonhosted.org/packages/de/e3/4c2a139c5dbc5c8c587191248c1383f24584bdcdcdd0ee1d94ed5301c077/jokeapi-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "415cbd84b1e1b12adf67c9c1a81f28d1", "sha256": "3a25b24168a14cfe8d2f4856db90c5ad35eee6346276b384058807bbbff86d41"}, "downloads": -1, "filename": "jokeapi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "415cbd84b1e1b12adf67c9c1a81f28d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2299, "upload_time": "2020-02-29T23:51:49", "upload_time_iso_8601": "2020-02-29T23:51:49.121542Z", "url": "https://files.pythonhosted.org/packages/ea/bb/6c136d5fa45ded569600174cfe7c41fb2bc09f4cc37b9f00a8e0bf4b6100/jokeapi-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "519845ed700781036f9e1e6af712fde1", "sha256": "ecc0bd9c9521eae857078d2043af0f6a50d472cce4fc141e205be6876a39e12a"}, "downloads": -1, "filename": "jokeapi-0.1.2.tar.gz", "has_sig": false, "md5_digest": "519845ed700781036f9e1e6af712fde1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2266, "upload_time": "2020-03-02T07:15:34", "upload_time_iso_8601": "2020-03-02T07:15:34.309316Z", "url": "https://files.pythonhosted.org/packages/e0/25/3a0085b33bd16d76899cb7075749abc09ebd76d6e8bb86f5138914c0bb09/jokeapi-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "bb7739222841d45fab6fc16c246f9876", "sha256": "403e05a9d0dfab1de6427b1bb9915773a6d3b6b79400470228384375c6b52c1e"}, "downloads": -1, "filename": "jokeapi-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bb7739222841d45fab6fc16c246f9876", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3207, "upload_time": "2020-03-02T07:27:07", "upload_time_iso_8601": "2020-03-02T07:27:07.619245Z", "url": "https://files.pythonhosted.org/packages/98/8f/e14869cde4bb35dbacdb4b0bec71951a8c733bb37ab7ed924f890a73a7be/jokeapi-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d78554d0b8fdf33200e16bf672b29c3e", "sha256": "cec308650cab7281029e0a7a2cd6e80d03f2e474f909f36ea80dbf97eb6d698b"}, "downloads": -1, "filename": "jokeapi-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d78554d0b8fdf33200e16bf672b29c3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5057, "upload_time": "2020-03-14T22:06:08", "upload_time_iso_8601": "2020-03-14T22:06:08.024497Z", "url": "https://files.pythonhosted.org/packages/07/2e/ce232c93e0e16287a9949a60b0171eebab1fd41394f4930edb2ba0cd3e7c/jokeapi-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "62994c2599aedf85036dd010e088c548", "sha256": "6635b17452200036b7b3189706797812d701cb3b83897af40c1c514b11d6b2c9"}, "downloads": -1, "filename": "jokeapi-0.2.0.tar.gz", "has_sig": false, "md5_digest": "62994c2599aedf85036dd010e088c548", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5153, "upload_time": "2020-03-20T18:03:38", "upload_time_iso_8601": "2020-03-20T18:03:38.653255Z", "url": "https://files.pythonhosted.org/packages/d7/f8/c3084e2b9ec71123fe3e3d5b80f5db6347b98332b363cec3b3b9136df43d/jokeapi-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "62994c2599aedf85036dd010e088c548", "sha256": "6635b17452200036b7b3189706797812d701cb3b83897af40c1c514b11d6b2c9"}, "downloads": -1, "filename": "jokeapi-0.2.0.tar.gz", "has_sig": false, "md5_digest": "62994c2599aedf85036dd010e088c548", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5153, "upload_time": "2020-03-20T18:03:38", "upload_time_iso_8601": "2020-03-20T18:03:38.653255Z", "url": "https://files.pythonhosted.org/packages/d7/f8/c3084e2b9ec71123fe3e3d5b80f5db6347b98332b363cec3b3b9136df43d/jokeapi-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:16 2020"}