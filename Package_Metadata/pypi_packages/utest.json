{"info": {"author": "George King", "author_email": "george.w.king@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Testing"], "description": "writeup v0\nDedicated to the public domain under CC0: https://creativecommons.org/publicdomain/zero/1.0/.\n\n\n# utest\n\nutest is a tiny library for unit testing in Python. It is available via pip for easy distribution. Alternatively, the module can be freely copied into a project. utest has no dependencies beyond the Python standard library.\n\nutest only supports Python 3. The module itself is a single source file, and can be embedded directly in any project. It is also available at <https://pypi.python.org/pypi/utest>.\n\n\n# License\n\nutest dedicated to the public domain. It is written and maintained by George King.\n\n\n# Installation\n$ pip3 install utest\n\n# Usage\n\nTests are written as standalone scripts that call the various utest functions. Typical invocations look like this:\n| utest(expected_value, fn_to_test, arg0, arg1, kw2=arg2, ...)\n| utest_exc(expected_exception, fn_to_test, arg0, arg1, kw2=arg2, ...)\n\nThe `utest` function takes as arguments an expected return value, followed by a function to test and any number of positional and keyword arguments. The function is called with the provided arguments inside of a `try` block, and the return value is compared to the expected value.\n\n| # Pass `True` to the lambda, and expect `True` as the result.\n| utest(True, lambda b: b, True)\n\nThe `utest_exc` function is similar, except that it expects the function under test to raise an exception. Because Python does not implement value equality for exceptions, `utest_exc` implements its own exception comparison, which compares the exception type and the `args` property of the expected and actual exceptions. Improvements to this comparison may prove necessary, as exception types can potentially set attributes and fail to include them in `args`.\n\n| # Invoke the hypothetical `raise_expected` function, expecting a particular `Exception` value.\n| utest_exc(Exception('expected'), raise_expected)\n\nThe `utest_seq` and `utest_seq_exc` functions mirror those above, except that the returned value is converted to a sequence, and for `utest_seq` the expectation is also converted to a list. Therefore, these functions can be used to check the output of a generator or other returned iterable directly. Note that `utest_seq_exc` is necessary because unlike `utest_exc` it will consume the returned iterable.\n| utest_seq([0, 1], range, 2)\n| # Invoke the hypothetical `yield_then_raise` function, expecting a particular `Exception` value.\n| utest_seq_exc(Exception('expected'), yield_then_raise, 2)\n\n`utest_val` can be used to check a value. An optional description can be provided with the `desc` parameter.\n| utest_val((0,1), (0,1), 'tuple test')\n\n`usymmetric` takes one of the above utest functions and arguments. It applies the test function to the arguments as is, and then again with the last two positional arguments swapped. Thus, symmetric functions like binary operators (but also any function where the last two arguments may be freely swapped) can be tested for symmetry.\n| usymmetric(utest, 3, operator.add, 1, 2)\n\nWhen an expectation is not met, utest prints a message to stderr, and increments the failure count. When the process exits, if failures have occured, then an `atexit` handler (set by the utest module on import) prints a summary message and forces a hard exit with status 1.\n\nSee the `utest.py` for the complete docstrings, and the tests for more examples.\n\n\n## Caveats\n\n### `atexit` handlers\n\nNote that as of Python 3.5.2, `atexit` suppresses `SystemExit` exceptions raised in handlers, which is unfortunate because it means that utest must use `_exit` to return a status code of 1, thereby bypassing any lower `atexit` handlers. If your unit tests require other `atexit` handlers to run, then make sure to include `utest` at the very top of the `__main__` file of your test process.\n\n### `_utest_depth` parameter name\n`_test_depth` is the only reserved parameter name. Passing this keyword parameter to a function under test is not supported, because it will also be passed along to internal utest failure handling function.\n\n\n# Testing utest\n\nutest is itself tested using iotest, a process-based integration test harness. iotest is also available via pip:\n| $ pip3 install iotest\n\nTo run the tests:\n| $ iotest test/\n\nThe tests are just python scripts, and can be invoked by themselves as well.\n\n\n# Issues\n\nPlease file issues to the github repository: <https://github.com/gwk/utest>.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gwk/utest", "keywords": "testing", "license": "CC0", "maintainer": "", "maintainer_email": "", "name": "utest", "package_url": "https://pypi.org/project/utest/", "platform": "", "project_url": "https://pypi.org/project/utest/", "project_urls": {"Homepage": "https://github.com/gwk/utest"}, "release_url": "https://pypi.org/project/utest/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "utest is a tiny unit testing library for Python.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>writeup v0\nDedicated to the public domain under CC0: <a href=\"https://creativecommons.org/publicdomain/zero/1.0/\" rel=\"nofollow\">https://creativecommons.org/publicdomain/zero/1.0/</a>.</p>\n<p># utest</p>\n<p>utest is a tiny library for unit testing in Python. It is available via pip for easy distribution. Alternatively, the module can be freely copied into a project. utest has no dependencies beyond the Python standard library.</p>\n<p>utest only supports Python 3. The module itself is a single source file, and can be embedded directly in any project. It is also available at &lt;<a href=\"https://pypi.python.org/pypi/utest\" rel=\"nofollow\">https://pypi.python.org/pypi/utest</a>&gt;.</p>\n<p># License</p>\n<p>utest dedicated to the public domain. It is written and maintained by George King.</p>\n<p># Installation\n$ pip3 install utest</p>\n<p># Usage</p>\n<p>Tests are written as standalone scripts that call the various utest functions. Typical invocations look like this:\n| utest(expected_value, fn_to_test, arg0, arg1, kw2=arg2, \u2026)\n| utest_exc(expected_exception, fn_to_test, arg0, arg1, kw2=arg2, \u2026)</p>\n<p>The <cite>utest</cite> function takes as arguments an expected return value, followed by a function to test and any number of positional and keyword arguments. The function is called with the provided arguments inside of a <cite>try</cite> block, and the return value is compared to the expected value.</p>\n<div>\n<div># Pass <cite>True</cite> to the lambda, and expect <cite>True</cite> as the result.</div>\n<div>utest(True, lambda b: b, True)</div>\n</div>\n<p>The <cite>utest_exc</cite> function is similar, except that it expects the function under test to raise an exception. Because Python does not implement value equality for exceptions, <cite>utest_exc</cite> implements its own exception comparison, which compares the exception type and the <cite>args</cite> property of the expected and actual exceptions. Improvements to this comparison may prove necessary, as exception types can potentially set attributes and fail to include them in <cite>args</cite>.</p>\n<div>\n<div># Invoke the hypothetical <cite>raise_expected</cite> function, expecting a particular <cite>Exception</cite> value.</div>\n<div>utest_exc(Exception(\u2018expected\u2019), raise_expected)</div>\n</div>\n<p>The <cite>utest_seq</cite> and <cite>utest_seq_exc</cite> functions mirror those above, except that the returned value is converted to a sequence, and for <cite>utest_seq</cite> the expectation is also converted to a list. Therefore, these functions can be used to check the output of a generator or other returned iterable directly. Note that <cite>utest_seq_exc</cite> is necessary because unlike <cite>utest_exc</cite> it will consume the returned iterable.\n| utest_seq([0, 1], range, 2)\n| # Invoke the hypothetical <cite>yield_then_raise</cite> function, expecting a particular <cite>Exception</cite> value.\n| utest_seq_exc(Exception(\u2018expected\u2019), yield_then_raise, 2)</p>\n<p><cite>utest_val</cite> can be used to check a value. An optional description can be provided with the <cite>desc</cite> parameter.\n| utest_val((0,1), (0,1), \u2018tuple test\u2019)</p>\n<p><cite>usymmetric</cite> takes one of the above utest functions and arguments. It applies the test function to the arguments as is, and then again with the last two positional arguments swapped. Thus, symmetric functions like binary operators (but also any function where the last two arguments may be freely swapped) can be tested for symmetry.\n| usymmetric(utest, 3, operator.add, 1, 2)</p>\n<p>When an expectation is not met, utest prints a message to stderr, and increments the failure count. When the process exits, if failures have occured, then an <cite>atexit</cite> handler (set by the utest module on import) prints a summary message and forces a hard exit with status 1.</p>\n<p>See the <cite>utest.py</cite> for the complete docstrings, and the tests for more examples.</p>\n<p>## Caveats</p>\n<p>### <cite>atexit</cite> handlers</p>\n<p>Note that as of Python 3.5.2, <cite>atexit</cite> suppresses <cite>SystemExit</cite> exceptions raised in handlers, which is unfortunate because it means that utest must use <cite>_exit</cite> to return a status code of 1, thereby bypassing any lower <cite>atexit</cite> handlers. If your unit tests require other <cite>atexit</cite> handlers to run, then make sure to include <cite>utest</cite> at the very top of the <cite>__main__</cite> file of your test process.</p>\n<p>### <cite>_utest_depth</cite> parameter name\n<cite>_test_depth</cite> is the only reserved parameter name. Passing this keyword parameter to a function under test is not supported, because it will also be passed along to internal utest failure handling function.</p>\n<p># Testing utest</p>\n<p>utest is itself tested using iotest, a process-based integration test harness. iotest is also available via pip:\n| $ pip3 install iotest</p>\n<p>To run the tests:\n| $ iotest test/</p>\n<p>The tests are just python scripts, and can be invoked by themselves as well.</p>\n<p># Issues</p>\n<p>Please file issues to the github repository: &lt;<a href=\"https://github.com/gwk/utest\" rel=\"nofollow\">https://github.com/gwk/utest</a>&gt;.</p>\n\n          </div>"}, "last_serial": 2542805, "releases": {"0.0.0": [], "0.0.1": [{"comment_text": "", "digests": {"md5": "e36767ae57a668e111f4be22f1afda32", "sha256": "c28ab353caa13cf8d05d2ef5d67f9c14c1a86ffbe1c4947a0772db9eecac64d5"}, "downloads": -1, "filename": "utest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e36767ae57a668e111f4be22f1afda32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3622, "upload_time": "2016-12-08T19:57:30", "upload_time_iso_8601": "2016-12-08T19:57:30.386226Z", "url": "https://files.pythonhosted.org/packages/52/8a/6d6cbc2a8a5748192f461ce9c485ea9cdb99aa66df85e3da1fb28da057ed/utest-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "41d7ab6ec1e3d7b617921bfe00465baf", "sha256": "0d08c883392759a225b5706bf2620d909d3b0b46f9b7c67076cddecfcdfb46bc"}, "downloads": -1, "filename": "utest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "41d7ab6ec1e3d7b617921bfe00465baf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4417, "upload_time": "2016-12-28T17:11:16", "upload_time_iso_8601": "2016-12-28T17:11:16.212652Z", "url": "https://files.pythonhosted.org/packages/55/5f/5ec30f98559b144a70c49fff4f89e5e0a9c73e07ebf15f50ce7a069c1941/utest-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41d7ab6ec1e3d7b617921bfe00465baf", "sha256": "0d08c883392759a225b5706bf2620d909d3b0b46f9b7c67076cddecfcdfb46bc"}, "downloads": -1, "filename": "utest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "41d7ab6ec1e3d7b617921bfe00465baf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4417, "upload_time": "2016-12-28T17:11:16", "upload_time_iso_8601": "2016-12-28T17:11:16.212652Z", "url": "https://files.pythonhosted.org/packages/55/5f/5ec30f98559b144a70c49fff4f89e5e0a9c73e07ebf15f50ce7a069c1941/utest-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:53 2020"}