{"info": {"author": "Peter Bengtsson", "author_email": "mail@peterbe.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Other Environment", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Python Software Foundation License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Communications", "Topic :: Internet :: WWW/HTTP", "Topic :: Other/Nonlisted Topic", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "premailer\n=========\n\n\nTurns CSS blocks into style attributes\n--------------------------------------\n\nWhen you send HTML emails you can't used style tags but instead you\nhave to put inline `style` attributes on every element. So from this::\n\n        <html>\n        <style type=\"text/css\">\n        h1 { border:1px solid black }\n        p { color:red;}\n        </style>\n        <h1 style=\"font-weight:bolder\">Peter</h1>\n        <p>Hej</p>\n        </html>\n\nYou want this::\n\n        <html>\n        <h1 style=\"font-weight:bolder; border:1px solid black\">Peter</h1>\n        <p style=\"color:red\">Hej</p>\n        </html>\n\n\npremailer does this. It parses an HTML page, looks up `style` blocks\nand parses the CSS. It then uses the `lxml.html` parser to modify the\nDOM tree of the page accordingly.\n\nGetting started\n---------------\n\nIf you havena't already done so, install `premailer` first::\n\n        $ pip install premailer\n\nNext, the most basic use is to use the shortcut function, like this::\n\n        >>> from premailer import transform\n        >>> print transform(\"\"\"\n        ...         <html>\n        ...         <style type=\"text/css\">\n        ...         h1 { border:1px solid black }\n        ...         p { color:red;}\n        ...         p::first-letter { float:left; }\n        ...         </style>\n        ...         <h1 style=\"font-weight:bolder\">Peter</h1>\n        ...         <p>Hej</p>\n        ...         </html>\n        ... \"\"\")\n        <html>\n        <head></head>\n        <body>\n        <h1 style=\"font-weight:bolder; border:1px solid black\">Peter</h1>\n                <p style=\"color:red\">Hej</p>\n                </body>\n        </html>\n\nFor more advanced options, check out the code of the `Premailer` class\nand all its options in its constructor.\n\n\nTurning relative URLs into absolute URLs\n----------------------------------------\n\nAnother thing premailer can do for you is to turn relative URLs (e.g.\n\"/some/page.html\" into \"http://www.peterbe.com/some/page.html\"). It\ndoes this to all `href` and `src` attributes that don't have a `://`\npart in it. For example, turning this::\n\n        <html>\n        <body>\n        <a href=\"/\">Home</a>\n        <a href=\"page.html\">Page</a>\n        <a href=\"http://crosstips.org\">External</a>\n        <img src=\"/folder/\">Folder</a>\n        </body>\n        </html>\n\nInto this::\n\n        <html>\n        <body>\n        <a href=\"http://www.peterbe.com/\">Home</a>\n        <a href=\"http://www.peterbe.com/page.html\">Page</a>\n        <a href=\"http://crosstips.org\">External</a>\n        <img src=\"http://www.peterbe.com/folder/\">Folder</a>\n        </body>\n        </html>\n\nby using `transform('...', base_url='http://www.peterbe.com/')`.\n\n\nHTML attributes created additionally\n------------------------------------\n\nCertain HTML attributes are also created on the HTML if the CSS\ncontains any ones that are easily translated into HTML attributes. For\nexample, if you have this CSS: `td { background-color:#eee; }` then\nthis is transformed into `style=\"background-color:#eee\"` AND as an\nHTML attribute `bgcolor=\"#eee\"`.\n\nHaving these extra attributes basically as a \"back up\" for really shit\nemail clients that can't even take the style attributes. A lot of\nprofessional HTML newsletters such as Amazon's use this.", "description_content_type": null, "docs_url": null, "download_url": "http://github.com/peterbe/premailer", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/peterbe/premailer", "keywords": "html lxml email mail style", "license": "Python", "maintainer": null, "maintainer_email": null, "name": "premailer_cspw", "package_url": "https://pypi.org/project/premailer_cspw/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/premailer_cspw/", "project_urls": {"Download": "http://github.com/peterbe/premailer", "Homepage": "http://github.com/peterbe/premailer"}, "release_url": "https://pypi.org/project/premailer_cspw/1.2.2/", "requires_dist": null, "requires_python": null, "summary": "Turns CSS blocks into style attributes", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"turns-css-blocks-into-style-attributes\">\n<h2>Turns CSS blocks into style attributes</h2>\n<p>When you send HTML emails you can\u2019t used style tags but instead you\nhave to put inline <cite>style</cite> attributes on every element. So from this:</p>\n<pre>&lt;html&gt;\n&lt;style type=\"text/css\"&gt;\nh1 { border:1px solid black }\np { color:red;}\n&lt;/style&gt;\n&lt;h1 style=\"font-weight:bolder\"&gt;Peter&lt;/h1&gt;\n&lt;p&gt;Hej&lt;/p&gt;\n&lt;/html&gt;\n</pre>\n<p>You want this:</p>\n<pre>&lt;html&gt;\n&lt;h1 style=\"font-weight:bolder; border:1px solid black\"&gt;Peter&lt;/h1&gt;\n&lt;p style=\"color:red\"&gt;Hej&lt;/p&gt;\n&lt;/html&gt;\n</pre>\n<p>premailer does this. It parses an HTML page, looks up <cite>style</cite> blocks\nand parses the CSS. It then uses the <cite>lxml.html</cite> parser to modify the\nDOM tree of the page accordingly.</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>If you havena\u2019t already done so, install <cite>premailer</cite> first:</p>\n<pre>$ pip install premailer\n</pre>\n<p>Next, the most basic use is to use the shortcut function, like this:</p>\n<pre>&gt;&gt;&gt; from premailer import transform\n&gt;&gt;&gt; print transform(\"\"\"\n...         &lt;html&gt;\n...         &lt;style type=\"text/css\"&gt;\n...         h1 { border:1px solid black }\n...         p { color:red;}\n...         p::first-letter { float:left; }\n...         &lt;/style&gt;\n...         &lt;h1 style=\"font-weight:bolder\"&gt;Peter&lt;/h1&gt;\n...         &lt;p&gt;Hej&lt;/p&gt;\n...         &lt;/html&gt;\n... \"\"\")\n&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 style=\"font-weight:bolder; border:1px solid black\"&gt;Peter&lt;/h1&gt;\n        &lt;p style=\"color:red\"&gt;Hej&lt;/p&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>For more advanced options, check out the code of the <cite>Premailer</cite> class\nand all its options in its constructor.</p>\n</div>\n<div id=\"turning-relative-urls-into-absolute-urls\">\n<h2>Turning relative URLs into absolute URLs</h2>\n<p>Another thing premailer can do for you is to turn relative URLs (e.g.\n\u201c/some/page.html\u201d into \u201c<a href=\"http://www.peterbe.com/some/page.html\" rel=\"nofollow\">http://www.peterbe.com/some/page.html</a>\u201d). It\ndoes this to all <cite>href</cite> and <cite>src</cite> attributes that don\u2019t have a <cite>://</cite>\npart in it. For example, turning this:</p>\n<pre>&lt;html&gt;\n&lt;body&gt;\n&lt;a href=\"/\"&gt;Home&lt;/a&gt;\n&lt;a href=\"page.html\"&gt;Page&lt;/a&gt;\n&lt;a href=\"http://crosstips.org\"&gt;External&lt;/a&gt;\n&lt;img src=\"/folder/\"&gt;Folder&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>Into this:</p>\n<pre>&lt;html&gt;\n&lt;body&gt;\n&lt;a href=\"http://www.peterbe.com/\"&gt;Home&lt;/a&gt;\n&lt;a href=\"http://www.peterbe.com/page.html\"&gt;Page&lt;/a&gt;\n&lt;a href=\"http://crosstips.org\"&gt;External&lt;/a&gt;\n&lt;img src=\"http://www.peterbe.com/folder/\"&gt;Folder&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>by using <cite>transform(\u2018\u2026\u2019, base_url=\u2019http://www.peterbe.com/\u2019)</cite>.</p>\n</div>\n<div id=\"html-attributes-created-additionally\">\n<h2>HTML attributes created additionally</h2>\n<p>Certain HTML attributes are also created on the HTML if the CSS\ncontains any ones that are easily translated into HTML attributes. For\nexample, if you have this CSS: <cite>td { background-color:#eee; }</cite> then\nthis is transformed into <cite>style=\u201dbackground-color:#eee\u201d</cite> AND as an\nHTML attribute <cite>bgcolor=\u201d#eee\u201d</cite>.</p>\n<p>Having these extra attributes basically as a \u201cback up\u201d for really shit\nemail clients that can\u2019t even take the style attributes. A lot of\nprofessional HTML newsletters such as Amazon\u2019s use this.</p>\n</div>\n\n          </div>"}, "last_serial": 834610, "releases": {"1.2.2": [{"comment_text": "", "digests": {"md5": "86aa8beac7832c17d04062a936c452f0", "sha256": "2c17358641c29d2783adc0dae61ea1a9c6d6eeea4de477193b52ad4c9762f57a"}, "downloads": -1, "filename": "premailer_cspw-1.2.2.tar.gz", "has_sig": false, "md5_digest": "86aa8beac7832c17d04062a936c452f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10991, "upload_time": "2013-08-07T15:48:08", "upload_time_iso_8601": "2013-08-07T15:48:08.005575Z", "url": "https://files.pythonhosted.org/packages/5f/d7/9429f0adbdf70b342310e7fab1d9ba2e9f49cf1f70117b9f1b2c2a4527cc/premailer_cspw-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "86aa8beac7832c17d04062a936c452f0", "sha256": "2c17358641c29d2783adc0dae61ea1a9c6d6eeea4de477193b52ad4c9762f57a"}, "downloads": -1, "filename": "premailer_cspw-1.2.2.tar.gz", "has_sig": false, "md5_digest": "86aa8beac7832c17d04062a936c452f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10991, "upload_time": "2013-08-07T15:48:08", "upload_time_iso_8601": "2013-08-07T15:48:08.005575Z", "url": "https://files.pythonhosted.org/packages/5f/d7/9429f0adbdf70b342310e7fab1d9ba2e9f49cf1f70117b9f1b2c2a4527cc/premailer_cspw-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:54 2020"}