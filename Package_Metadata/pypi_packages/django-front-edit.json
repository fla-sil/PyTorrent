{"info": {"author": "Dwaiter.com", "author_email": "dev@dwaiter.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: Site Management", "Topic :: Software Development :: User Interfaces", "Topic :: Utilities"], "description": "Django-Front-Edit\n=================\n\nDescription\n-----------\n\nA front end editing app for Django. This app allows one to edit dynamic\ndata on the front end of a website when logged in as a staff member. The\napp allows the editing of dynamic content within any element (See\nExample below).\n\nInstallation\n------------\n\nYou must have setuptools installed.\n\nFrom PyPI:\n\n::\n\n    pip install django_front_edit\n\nOr download a package from the\n`PyPI <https://pypi.python.org/pypi/django_front_edit>`__ or the\n`BitBucket\npage <https://bitbucket.org/dwaiter/django-front-edit/downloads>`__:\n\n::\n\n    pip install <package>\n\nOr unpack the package and:\n\n::\n\n    python setup.py install.\n\nDependencies\n------------\n\nDjango >= 1.4 and its dependencies.\n\nbeautifulsoup4 >= 4.3.2 located at:\nhttp://www.crummy.com/software/BeautifulSoup/ or\nhttps://pypi.python.org/pypi/beautifulsoup4/.\n\ndjango-classy-tags >= 0.5.1 located at:\nhttps://github.com/ojii/django-classy-tags or\nhttps://pypi.python.org/pypi/django-classy-tags.\n\n**and either one of the following:** (see ``FRONT_EDIT_HTML_PARSER``\nsetting below)\n\nhtml5lib >= 0.999, != 0.9999, != 1.0b5, != 0.99999, != 1.0b6 located at:\nhttps://github.com/html5lib/html5lib-python or\nhttps://pypi.python.org/pypi/html5lib.\n\nlxml located at: https://github.com/lxml/lxml or\nhttps://pypi.python.org/pypi/lxml\n\nIntegration\n-----------\n\nIn your Django settings.py file insert the following in an appropriate\nplace:\n\n::\n\n    ...\n    # for django >1.4 <1.8\n    TEMPLATE_CONTEXT_PROCESSORS = [\n        'django.contrib.auth.context_processors.auth',\n        ...\n        'django.core.context_processors.request',\n        ...\n        'front_edit.context_processors.defer_edit'\n    ]\n    # or for django >1.8\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [],\n            'OPTIONS': {\n                'context_processors': [\n                    'django.contrib.auth.context_processors.auth',\n                    ...\n                    'django.template.context_processors.request',\n                    ...\n                    'front_edit.context_processors.defer_edit'\n                ]\n            }\n        }\n    ]\n    ...\n\n    INSTALLED_APPS = [\n        ...\n        'django.contrib.contenttypes',\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.sessions',\n        ...\n        'front_edit',\n        ...\n    ]\n\n    ...\n\nIn your main urls.py file:\n\n::\n\n    ...\n    url(r'', include('front_edit.urls')),\n    ...\n\nThere is nothing to syncdb or migrate.\n\nUsage\n-----\n\nThis app uses template tags for all its functionality.\n\nTemplate tags\n~~~~~~~~~~~~~\n\nMake sure to load up ``front_edit_tags`` in your template.\n\nEdit...EndEdit\n^^^^^^^^^^^^^^\n\n    **Arguments:** object.field... [class\\_name]\n\n    **object.field:** This argument consist of multiple arguments of dot\n    separated object/field variables. Currently only fields within the\n    same model object can be edited per tag. **class\\_name:** This\n    optional argument is the class name(s) to put on the form, edit\n    button, and overlay in case you need to adjust them.\n\nThis tag specifies an editable region.\n\nEditLink...EndEditLink\n^^^^^^^^^^^^^^^^^^^^^^\n\n    **Arguments:** admin\\_url, [class\\_name]\n\n    **admin\\_url:** A URL string to link to. **class\\_name:** This\n    optional argument is the class name(s) to put on the form, edit\n    button, and overlay in case you need to adjust them.\n\nThis tag specifies an editable region that will link to an admin page\ninstead of editing inline. For example:\n\n::\n\n    {% url 'admin:constance_config_changelist' as admin_url %}\n    {% edit_link admin_url %}\n        <div>{{ config.FOO }}</div>\n    {% endedit_link %}\n\nEditWithHints...EndEditWithHints\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    **Arguments:** None\n\nThis tag is used to make editable each object in a collection of\npagelets each marked with **EditHint** tags.\n\nEditHint\n^^^^^^^^\n\n    **Arguments:** object fields [class\\_name]\n\n    **object:** A model instance. **fields:** A list of fields on this\n    model, i.e. 'field1,field2,...,fieldN' **class\\_name:** This\n    optional argument is the class name(s) to put on the form, edit\n    button, and overlay in case you need to adjust them.\n\nThis tag adds a hint to a small cacheable template used in a pagelet\nsystem.\n\nEditLoader\n^^^^^^^^^^\n\n    **Arguments:** None\n\nThis tag includes all the boilerplate to make the front-end editing\nwork. This tag should always be right before the end ``<body>`` tag in\nyour base template.\n\nJavaScript\n~~~~~~~~~~\n\nThere is one command that you can call if you need to reposition the\nedit elements. You should call this if any JavaScript will change the\noffset of in-flow elements.\n\n::\n\n    djangoFrontEdit.refresh();\n\nExample\n~~~~~~~\n\n::\n\n    pagelet_text.html\n    {% load front_edit_tags %}\n    <div class=\"pagelet pagelet-text\" {% edit_hint instance \"title,content\" \"class_name\" %}>\n        <div class=\"title\">\n            {{ instance.title }}\n        </div>\n        <div class=\"richtext\">\n            {{ instance.content|safe }}\n        </div>\n    </div>\n\n    pagelet_image.html\n    {% load front_edit_tags %}\n    <div class=\"pagelet pagelet-image\" {% edit_hint instance \"image,caption\" \"class_name\" %}>\n        <div class=\"image\">\n            <img src=\"{{ instance.image.url }}\"/>\n            <div class=\"caption\">\n                {{ instance.caption }}\n            </div>\n        </div>\n    </div>\n\n    somepage.html\n    {% load front_edit_tags pagelet_tags %}\n    <!DOCTYPE html>\n    <html>\n    <head></head>\n    <body>\n        <div>\n            <!-- In a list -->\n            <ul>\n                {% for object in objects %}\n                {% edit object.text_field object.char_field \"class_name\" %}\n                <li>\n                    <span>{{ object.text_field }}</span>\n                    <span>{{ object.char_field }}</span>\n                </li>\n                {% endedit %}\n                {% endfor %}\n            </ul>\n            <!-- In a table -->\n            <table>\n                <tbody>\n                    <tr>\n                        {% for object in objects %}\n                        {% edit object.text_field object.char_field \"class_name\" %}\n                        <td>\n                            <span>{{ object.text_field }}</span>\n                            <span>{{ object.char_field }}</span>\n                        </td>\n                        {% endedit %}\n                        {% endfor %}\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <!-- in a pagelet system -->\n        <div>\n            {% edit_with_hints %}\n            {% render_pagelets object.pagelets %}\n            {% endedit_with_hints %}\n        </div>\n        <div>\n            <!-- On a span -->\n            {% edit object.text_field \"class_name\" %}\n            <span>{{ object.text_field }}</span>\n            {% endedit %{\n        </div>\n        {% edit_loader %}\n    </body>\n    </html>\n\nAdvanced\n========\n\nSettings\n--------\n\n    Settings can be set by using the individual settings or by\n    specifying a dictionary as follows:\n\n::\n\n                FRONT_EDIT_SETTINGS = {\n                    'CUSTOM_FIELDS':['path.to.custom.field'],\n                    ...\n                    'USE_HINTS':True,\n                }\n\nFRONT\\_EDIT\\_CUSTOM\\_FIELDS\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** []\n\n    A list of dot-separated paths to a custom model field such as a rich\n    text field or file field that has a Media class on its widget.\n\nFRONT\\_EDIT\\_DEFER\\_KEY\n~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** '\\_\\_front\\_edit\\_defer'\n\n    The context key used to defer display of the collective editable\n    loader templates.\n\nFRONT\\_EDIT\\_EDITABLE\\_TEMPLATE\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** 'front\\_edit/includes/editable.html'\n\n    This template is the editable. Which includes the form, edit button,\n    and overlay.\n\nFRONT\\_EDIT\\_HTML\\_PARSER\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** 'html5lib'\n\n    Change the html parser used by beautifulsoup. By default we use\n    'html5lib', but we also support 'lxml'. You will have to install\n    either of those libraries. We do not support the builtin\n    'html.parser' library due to incompatibilities.\n\nFRONT\\_EDIT\\_INLINE\\_EDITING\\_ENABLED\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** True\n\n    Option to disable inline editing.\n\nFRONT\\_EDIT\\_JQUERY\\_BACKUP\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** 'front\\_edit/js/jquery.min.js'\n\n    The path to the static jquery backup library if the CDN is down. The\n    value is passed through the ``static`` tag.\n\nFRONT\\_EDIT\\_JQUERY\\_BUILTIN\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** True\n\n    Whether or not to use the builtin jquery library or rely on the\n    library already being present in the final document.\n\nFRONT\\_EDIT\\_JQUERY\\_CDN\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** '//ajax.googleapis.com/ajax/libs/jquery/'\n\n    The url to the CDN to use for jquery. The version and file name are\n    appended. i.e. path/1.11.2/jquery.min.js\n\nFRONT\\_EDIT\\_JQUERY\\_VERSION\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** '1.11.2'\n\n    The default version of jquery to fetch from the CDN.\n\nFRONT\\_EDIT\\_LOADER\\_TEMPLATE\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** 'front\\_edit/loader.html'\n\n    This template is the main boilerplate.\n\nFRONT\\_EDIT\\_LOGOUT\\_URL\\_NAME\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** 'admin:logout'\n\n    Set the name of the logout url.\n\nFRONT\\_EDIT\\_TOOLBAR\\_TEMPLATE\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** 'front\\_edit/includes/toolbar.html'\n\n    This template is the admin toolbar.\n\nFRONT\\_EDIT\\_USE\\_HINTS\n~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** False\n\n    Whether or not to activate the use of **EditHint** tags.\n\nFRONT\\_EDIT\\_VIGENERE\\_KEY\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    **Default:** None\n\n    A vigenere key used to obfuscate edit hints. Optional.\n\nCustom Media and JS variables\n-----------------------------\n\nIf the FRONT\\_EDIT\\_CUSTOM\\_FIELDS setting doesn't satisfy your needs\nyou will need to do the following.\n\n1. Change FRONT\\_EDIT\\_LOADER\\_TEMPLATE to your own template, it should\n   have a different name than 'front\\_edit/loader.html'.\n\n2. In your template extend 'front\\_edit/loader.html'.\n\n3. Use the block 'ft\\_extra' to set or run javascript code. No script\n   tags are needed.\n\n4. Use the block 'ft\\_extra\\_media' to define media such as CSS or JS\n   files.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/dwaiter/django-front-edit", "keywords": "django front-end editing admin tools dynamic management utilities", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-front-edit", "package_url": "https://pypi.org/project/django-front-edit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-front-edit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/dwaiter/django-front-edit"}, "release_url": "https://pypi.org/project/django-front-edit/1.2.1/", "requires_dist": null, "requires_python": null, "summary": "Front end editing for Django.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-front-edit\">\n<h2>Django-Front-Edit</h2>\n<div id=\"description\">\n<h3>Description</h3>\n<p>A front end editing app for Django. This app allows one to edit dynamic\ndata on the front end of a website when logged in as a staff member. The\napp allows the editing of dynamic content within any element (See\nExample below).</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>You must have setuptools installed.</p>\n<p>From PyPI:</p>\n<pre>pip install django_front_edit\n</pre>\n<p>Or download a package from the\n<a href=\"https://pypi.python.org/pypi/django_front_edit\" rel=\"nofollow\">PyPI</a> or the\n<a href=\"https://bitbucket.org/dwaiter/django-front-edit/downloads\" rel=\"nofollow\">BitBucket\npage</a>:</p>\n<pre>pip install &lt;package&gt;\n</pre>\n<p>Or unpack the package and:</p>\n<pre>python setup.py install.\n</pre>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>Django &gt;= 1.4 and its dependencies.</p>\n<p>beautifulsoup4 &gt;= 4.3.2 located at:\n<a href=\"http://www.crummy.com/software/BeautifulSoup/\" rel=\"nofollow\">http://www.crummy.com/software/BeautifulSoup/</a> or\n<a href=\"https://pypi.python.org/pypi/beautifulsoup4/\" rel=\"nofollow\">https://pypi.python.org/pypi/beautifulsoup4/</a>.</p>\n<p>django-classy-tags &gt;= 0.5.1 located at:\n<a href=\"https://github.com/ojii/django-classy-tags\" rel=\"nofollow\">https://github.com/ojii/django-classy-tags</a> or\n<a href=\"https://pypi.python.org/pypi/django-classy-tags\" rel=\"nofollow\">https://pypi.python.org/pypi/django-classy-tags</a>.</p>\n<p><strong>and either one of the following:</strong> (see <tt>FRONT_EDIT_HTML_PARSER</tt>\nsetting below)</p>\n<p>html5lib &gt;= 0.999, != 0.9999, != 1.0b5, != 0.99999, != 1.0b6 located at:\n<a href=\"https://github.com/html5lib/html5lib-python\" rel=\"nofollow\">https://github.com/html5lib/html5lib-python</a> or\n<a href=\"https://pypi.python.org/pypi/html5lib\" rel=\"nofollow\">https://pypi.python.org/pypi/html5lib</a>.</p>\n<p>lxml located at: <a href=\"https://github.com/lxml/lxml\" rel=\"nofollow\">https://github.com/lxml/lxml</a> or\n<a href=\"https://pypi.python.org/pypi/lxml\" rel=\"nofollow\">https://pypi.python.org/pypi/lxml</a></p>\n</div>\n<div id=\"integration\">\n<h3>Integration</h3>\n<p>In your Django settings.py file insert the following in an appropriate\nplace:</p>\n<pre>...\n# for django &gt;1.4 &lt;1.8\nTEMPLATE_CONTEXT_PROCESSORS = [\n    'django.contrib.auth.context_processors.auth',\n    ...\n    'django.core.context_processors.request',\n    ...\n    'front_edit.context_processors.defer_edit'\n]\n# or for django &gt;1.8\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'OPTIONS': {\n            'context_processors': [\n                'django.contrib.auth.context_processors.auth',\n                ...\n                'django.template.context_processors.request',\n                ...\n                'front_edit.context_processors.defer_edit'\n            ]\n        }\n    }\n]\n...\n\nINSTALLED_APPS = [\n    ...\n    'django.contrib.contenttypes',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.sessions',\n    ...\n    'front_edit',\n    ...\n]\n\n...\n</pre>\n<p>In your main urls.py file:</p>\n<pre>...\nurl(r'', include('front_edit.urls')),\n...\n</pre>\n<p>There is nothing to syncdb or migrate.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>This app uses template tags for all its functionality.</p>\n<div id=\"template-tags\">\n<h4>Template tags</h4>\n<p>Make sure to load up <tt>front_edit_tags</tt> in your template.</p>\n<div id=\"edit-endedit\">\n<h5>Edit\u2026EndEdit</h5>\n<blockquote>\n<p><strong>Arguments:</strong> object.field\u2026 [class_name]</p>\n<p><strong>object.field:</strong> This argument consist of multiple arguments of dot\nseparated object/field variables. Currently only fields within the\nsame model object can be edited per tag. <strong>class_name:</strong> This\noptional argument is the class name(s) to put on the form, edit\nbutton, and overlay in case you need to adjust them.</p>\n</blockquote>\n<p>This tag specifies an editable region.</p>\n</div>\n<div id=\"editlink-endeditlink\">\n<h5>EditLink\u2026EndEditLink</h5>\n<blockquote>\n<p><strong>Arguments:</strong> admin_url, [class_name]</p>\n<p><strong>admin_url:</strong> A URL string to link to. <strong>class_name:</strong> This\noptional argument is the class name(s) to put on the form, edit\nbutton, and overlay in case you need to adjust them.</p>\n</blockquote>\n<p>This tag specifies an editable region that will link to an admin page\ninstead of editing inline. For example:</p>\n<pre>{% url 'admin:constance_config_changelist' as admin_url %}\n{% edit_link admin_url %}\n    &lt;div&gt;{{ config.FOO }}&lt;/div&gt;\n{% endedit_link %}\n</pre>\n</div>\n<div id=\"editwithhints-endeditwithhints\">\n<h5>EditWithHints\u2026EndEditWithHints</h5>\n<blockquote>\n<strong>Arguments:</strong> None</blockquote>\n<p>This tag is used to make editable each object in a collection of\npagelets each marked with <strong>EditHint</strong> tags.</p>\n</div>\n<div id=\"edithint\">\n<h5>EditHint</h5>\n<blockquote>\n<p><strong>Arguments:</strong> object fields [class_name]</p>\n<p><strong>object:</strong> A model instance. <strong>fields:</strong> A list of fields on this\nmodel, i.e. \u2018field1,field2,\u2026,fieldN\u2019 <strong>class_name:</strong> This\noptional argument is the class name(s) to put on the form, edit\nbutton, and overlay in case you need to adjust them.</p>\n</blockquote>\n<p>This tag adds a hint to a small cacheable template used in a pagelet\nsystem.</p>\n</div>\n<div id=\"editloader\">\n<h5>EditLoader</h5>\n<blockquote>\n<strong>Arguments:</strong> None</blockquote>\n<p>This tag includes all the boilerplate to make the front-end editing\nwork. This tag should always be right before the end <tt>&lt;body&gt;</tt> tag in\nyour base template.</p>\n</div>\n</div>\n<div id=\"javascript\">\n<h4>JavaScript</h4>\n<p>There is one command that you can call if you need to reposition the\nedit elements. You should call this if any JavaScript will change the\noffset of in-flow elements.</p>\n<pre>djangoFrontEdit.refresh();\n</pre>\n</div>\n<div id=\"example\">\n<h4>Example</h4>\n<pre>pagelet_text.html\n{% load front_edit_tags %}\n&lt;div class=\"pagelet pagelet-text\" {% edit_hint instance \"title,content\" \"class_name\" %}&gt;\n    &lt;div class=\"title\"&gt;\n        {{ instance.title }}\n    &lt;/div&gt;\n    &lt;div class=\"richtext\"&gt;\n        {{ instance.content|safe }}\n    &lt;/div&gt;\n&lt;/div&gt;\n\npagelet_image.html\n{% load front_edit_tags %}\n&lt;div class=\"pagelet pagelet-image\" {% edit_hint instance \"image,caption\" \"class_name\" %}&gt;\n    &lt;div class=\"image\"&gt;\n        &lt;img src=\"{{ instance.image.url }}\"/&gt;\n        &lt;div class=\"caption\"&gt;\n            {{ instance.caption }}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\nsomepage.html\n{% load front_edit_tags pagelet_tags %}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n        &lt;!-- In a list --&gt;\n        &lt;ul&gt;\n            {% for object in objects %}\n            {% edit object.text_field object.char_field \"class_name\" %}\n            &lt;li&gt;\n                &lt;span&gt;{{ object.text_field }}&lt;/span&gt;\n                &lt;span&gt;{{ object.char_field }}&lt;/span&gt;\n            &lt;/li&gt;\n            {% endedit %}\n            {% endfor %}\n        &lt;/ul&gt;\n        &lt;!-- In a table --&gt;\n        &lt;table&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    {% for object in objects %}\n                    {% edit object.text_field object.char_field \"class_name\" %}\n                    &lt;td&gt;\n                        &lt;span&gt;{{ object.text_field }}&lt;/span&gt;\n                        &lt;span&gt;{{ object.char_field }}&lt;/span&gt;\n                    &lt;/td&gt;\n                    {% endedit %}\n                    {% endfor %}\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n    &lt;!-- in a pagelet system --&gt;\n    &lt;div&gt;\n        {% edit_with_hints %}\n        {% render_pagelets object.pagelets %}\n        {% endedit_with_hints %}\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;!-- On a span --&gt;\n        {% edit object.text_field \"class_name\" %}\n        &lt;span&gt;{{ object.text_field }}&lt;/span&gt;\n        {% endedit %{\n    &lt;/div&gt;\n    {% edit_loader %}\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</div>\n</div>\n</div>\n<div id=\"advanced\">\n<h2>Advanced</h2>\n<div id=\"settings\">\n<h3>Settings</h3>\n<blockquote>\nSettings can be set by using the individual settings or by\nspecifying a dictionary as follows:</blockquote>\n<pre>FRONT_EDIT_SETTINGS = {\n    'CUSTOM_FIELDS':['path.to.custom.field'],\n    ...\n    'USE_HINTS':True,\n}\n</pre>\n<div id=\"front-edit-custom-fields\">\n<h4>FRONT_EDIT_CUSTOM_FIELDS</h4>\n<blockquote>\n<p><strong>Default:</strong> []</p>\n<p>A list of dot-separated paths to a custom model field such as a rich\ntext field or file field that has a Media class on its widget.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-defer-key\">\n<h4>FRONT_EDIT_DEFER_KEY</h4>\n<blockquote>\n<p><strong>Default:</strong> \u2018__front_edit_defer\u2019</p>\n<p>The context key used to defer display of the collective editable\nloader templates.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-editable-template\">\n<h4>FRONT_EDIT_EDITABLE_TEMPLATE</h4>\n<blockquote>\n<p><strong>Default:</strong> \u2018front_edit/includes/editable.html\u2019</p>\n<p>This template is the editable. Which includes the form, edit button,\nand overlay.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-html-parser\">\n<h4>FRONT_EDIT_HTML_PARSER</h4>\n<blockquote>\n<p><strong>Default:</strong> \u2018html5lib\u2019</p>\n<p>Change the html parser used by beautifulsoup. By default we use\n\u2018html5lib\u2019, but we also support \u2018lxml\u2019. You will have to install\neither of those libraries. We do not support the builtin\n\u2018html.parser\u2019 library due to incompatibilities.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-inline-editing-enabled\">\n<h4>FRONT_EDIT_INLINE_EDITING_ENABLED</h4>\n<blockquote>\n<p><strong>Default:</strong> True</p>\n<p>Option to disable inline editing.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-jquery-backup\">\n<h4>FRONT_EDIT_JQUERY_BACKUP</h4>\n<blockquote>\n<p><strong>Default:</strong> \u2018front_edit/js/jquery.min.js\u2019</p>\n<p>The path to the static jquery backup library if the CDN is down. The\nvalue is passed through the <tt>static</tt> tag.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-jquery-builtin\">\n<h4>FRONT_EDIT_JQUERY_BUILTIN</h4>\n<blockquote>\n<p><strong>Default:</strong> True</p>\n<p>Whether or not to use the builtin jquery library or rely on the\nlibrary already being present in the final document.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-jquery-cdn\">\n<h4>FRONT_EDIT_JQUERY_CDN</h4>\n<blockquote>\n<p><strong>Default:</strong> \u2018//ajax.googleapis.com/ajax/libs/jquery/\u2019</p>\n<p>The url to the CDN to use for jquery. The version and file name are\nappended. i.e. path/1.11.2/jquery.min.js</p>\n</blockquote>\n</div>\n<div id=\"front-edit-jquery-version\">\n<h4>FRONT_EDIT_JQUERY_VERSION</h4>\n<blockquote>\n<p><strong>Default:</strong> \u20181.11.2\u2019</p>\n<p>The default version of jquery to fetch from the CDN.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-loader-template\">\n<h4>FRONT_EDIT_LOADER_TEMPLATE</h4>\n<blockquote>\n<p><strong>Default:</strong> \u2018front_edit/loader.html\u2019</p>\n<p>This template is the main boilerplate.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-logout-url-name\">\n<h4>FRONT_EDIT_LOGOUT_URL_NAME</h4>\n<blockquote>\n<p><strong>Default:</strong> \u2018admin:logout\u2019</p>\n<p>Set the name of the logout url.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-toolbar-template\">\n<h4>FRONT_EDIT_TOOLBAR_TEMPLATE</h4>\n<blockquote>\n<p><strong>Default:</strong> \u2018front_edit/includes/toolbar.html\u2019</p>\n<p>This template is the admin toolbar.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-use-hints\">\n<h4>FRONT_EDIT_USE_HINTS</h4>\n<blockquote>\n<p><strong>Default:</strong> False</p>\n<p>Whether or not to activate the use of <strong>EditHint</strong> tags.</p>\n</blockquote>\n</div>\n<div id=\"front-edit-vigenere-key\">\n<h4>FRONT_EDIT_VIGENERE_KEY</h4>\n<blockquote>\n<p><strong>Default:</strong> None</p>\n<p>A vigenere key used to obfuscate edit hints. Optional.</p>\n</blockquote>\n</div>\n</div>\n<div id=\"custom-media-and-js-variables\">\n<h3>Custom Media and JS variables</h3>\n<p>If the FRONT_EDIT_CUSTOM_FIELDS setting doesn\u2019t satisfy your needs\nyou will need to do the following.</p>\n<ol>\n<li>Change FRONT_EDIT_LOADER_TEMPLATE to your own template, it should\nhave a different name than \u2018front_edit/loader.html\u2019.</li>\n<li>In your template extend \u2018front_edit/loader.html\u2019.</li>\n<li>Use the block \u2018ft_extra\u2019 to set or run javascript code. No script\ntags are needed.</li>\n<li>Use the block \u2018ft_extra_media\u2019 to define media such as CSS or JS\nfiles.</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3090210, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "1fd01baaa8f200e9358e58ab0673604f", "sha256": "787b199024655dc0250f57b8da1dd199800f7eceba621b7be3536c84019da8d9"}, "downloads": -1, "filename": "django-front-edit-1.0.tar.gz", "has_sig": false, "md5_digest": "1fd01baaa8f200e9358e58ab0673604f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7381, "upload_time": "2014-08-19T18:00:55", "upload_time_iso_8601": "2014-08-19T18:00:55.340392Z", "url": "https://files.pythonhosted.org/packages/00/71/794464ef69aa209e6a16ddf1dbc58912a2841d8c6863872e3fc6dfbc18ca/django-front-edit-1.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "07740e5579fd66e55794355b1c515f45", "sha256": "6cd4d74c23b996847d2f91aeb6cb696664a23382bddf0175af10349b87e941ec"}, "downloads": -1, "filename": "django-front-edit-1.2.1.tar.gz", "has_sig": false, "md5_digest": "07740e5579fd66e55794355b1c515f45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61438, "upload_time": "2015-08-26T19:02:40", "upload_time_iso_8601": "2015-08-26T19:02:40.514749Z", "url": "https://files.pythonhosted.org/packages/17/48/6e03a38e91bb6a8ffe11499af7b521c24bdd7eca395c973ed83d3638c436/django-front-edit-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07740e5579fd66e55794355b1c515f45", "sha256": "6cd4d74c23b996847d2f91aeb6cb696664a23382bddf0175af10349b87e941ec"}, "downloads": -1, "filename": "django-front-edit-1.2.1.tar.gz", "has_sig": false, "md5_digest": "07740e5579fd66e55794355b1c515f45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61438, "upload_time": "2015-08-26T19:02:40", "upload_time_iso_8601": "2015-08-26T19:02:40.514749Z", "url": "https://files.pythonhosted.org/packages/17/48/6e03a38e91bb6a8ffe11499af7b521c24bdd7eca395c973ed83d3638c436/django-front-edit-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:58 2020"}