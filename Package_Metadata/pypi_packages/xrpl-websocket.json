{"info": {"author": "N3TC4T", "author_email": "netcat.av@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "XRPL Websocket\n==============\n\n.. image:: https://readthedocs.org/projects/xrpl-websocket/badge/?version=latest\n    :target: https://xrpl-websocket.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://badge.fury.io/py/xrpl-websocket.svg\n    :target: https://badge.fury.io/py/xrpl-websocket\n\n================\n      \nWebsocket client for rippled with reconnecting feature, support both python 2 and 3\n\nInstallation\n============\n\nVia pip:\n\n.. code-block:: bash\n\n    pip install xrpl_websocket\n    \nExamples\n========\n\nShort-lived connection\n----------------------\nSimple example to send a payload and wait for response\n\n.. code:: python\n\n    import json\n\n    from xrpl_websocket import Client\n\n    if __name__ == \"__main__\":\n        # create instance\n        client = Client()\n\n        # connect to the websocket\n        client.connect(nowait=False)\n\n        # send server info command\n        resp = client.send(command='server_info')\n\n        print(\"Server Info:\")\n        print(json.dumps(resp, indent = 4))\n\n        # close the connection\n        client.disconnect()\n\nMore advanced: Custom class\n---------------------------\nYou can also write your own class for the connection, if you want to handle the nitty-gritty details yourself.\n\n.. code:: python\n\n    class Example(Client):\n        def __init__(self):\n            super(self.__class__, self).__init__(\n                log_level=logging.ERROR,\n                server=\"wss://rippled.xrptipbot.com\"\n            )\n\n            # connect to the websocket\n            self.connect()\n\n        def on_transaction(self, data):\n            print(json.dumps(data, indent = 4))\n\n        def on_ledger(self,data):\n            print('on_ledger')\n\n        def on_open(self):\n            print(\"Connection is open\")\n\n            print(\"Subscribe to ledger transactions\")\n            self.subscribe_transactions()\n\n\n        def on_close(self):\n            print(\"on_close\")\n\n        def subscribe_transactions(self):\n            self.send({\n                'command': 'subscribe',\n                'streams': ['transactions']\n            })", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/N3TC4T/python-xrpl-websocket", "keywords": "xrp,ledger,ripple,websocket", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "xrpl-websocket", "package_url": "https://pypi.org/project/xrpl-websocket/", "platform": "", "project_url": "https://pypi.org/project/xrpl-websocket/", "project_urls": {"Homepage": "https://github.com/N3TC4T/python-xrpl-websocket"}, "release_url": "https://pypi.org/project/xrpl-websocket/0.1.0rc0/", "requires_dist": null, "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "XRL Websocket Client", "version": "0.1.0rc0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"xrpl-websocket\">\n<h2>XRPL Websocket</h2>\n<a href=\"https://xrpl-websocket.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c8b2f19ec1e2fb5d771edf1fff7bdb8df5882bf/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7872706c2d776562736f636b65742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://badge.fury.io/py/xrpl-websocket\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/xrpl-websocket.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0dcec9b4f52d928fbfea117be0d129d10fc59637/68747470733a2f2f62616467652e667572792e696f2f70792f7872706c2d776562736f636b65742e737667\"></a>\n<hr class=\"docutils\">\n<p>Websocket client for rippled with reconnecting feature, support both python 2 and 3</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Via pip:</p>\n<pre>pip install xrpl_websocket\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"short-lived-connection\">\n<h3>Short-lived connection</h3>\n<p>Simple example to send a payload and wait for response</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">xrpl_websocket</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"c1\"># create instance</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># connect to the websocket</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">nowait</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># send server info command</span>\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s1\">'server_info'</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Server Info:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"n\">indent</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># close the connection</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"more-advanced-custom-class\">\n<h3>More advanced: Custom class</h3>\n<p>You can also write your own class for the connection, if you want to handle the nitty-gritty details yourself.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">Client</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s2\">\"wss://rippled.xrptipbot.com\"</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># connect to the websocket</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_transaction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">indent</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_ledger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'on_ledger'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Connection is open\"</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Subscribe to ledger transactions\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subscribe_transactions</span><span class=\"p\">()</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"on_close\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">subscribe_transactions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">({</span>\n            <span class=\"s1\">'command'</span><span class=\"p\">:</span> <span class=\"s1\">'subscribe'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'streams'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'transactions'</span><span class=\"p\">]</span>\n        <span class=\"p\">})</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6115265, "releases": {"0.1.0rc0": [{"comment_text": "", "digests": {"md5": "7a7b76ffa1a8f8a44af09c7d8d6256b4", "sha256": "80957fcb9c6ceb969930ef13e9b4ab9f4674f761bcf558972fbc8c03aad5f376"}, "downloads": -1, "filename": "xrpl_websocket-0.1.0rc0.tar.gz", "has_sig": false, "md5_digest": "7a7b76ffa1a8f8a44af09c7d8d6256b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 7068, "upload_time": "2019-11-11T09:09:37", "upload_time_iso_8601": "2019-11-11T09:09:37.531879Z", "url": "https://files.pythonhosted.org/packages/ae/27/9eb7f40b9dfcbe9301086e222deafeedf7c9c9a007a2e252a6d5b3c64f97/xrpl_websocket-0.1.0rc0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a7b76ffa1a8f8a44af09c7d8d6256b4", "sha256": "80957fcb9c6ceb969930ef13e9b4ab9f4674f761bcf558972fbc8c03aad5f376"}, "downloads": -1, "filename": "xrpl_websocket-0.1.0rc0.tar.gz", "has_sig": false, "md5_digest": "7a7b76ffa1a8f8a44af09c7d8d6256b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 7068, "upload_time": "2019-11-11T09:09:37", "upload_time_iso_8601": "2019-11-11T09:09:37.531879Z", "url": "https://files.pythonhosted.org/packages/ae/27/9eb7f40b9dfcbe9301086e222deafeedf7c9c9a007a2e252a6d5b3c64f97/xrpl_websocket-0.1.0rc0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:27 2020"}