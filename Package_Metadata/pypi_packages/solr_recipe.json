{"info": {"author": "Espen Angell Kristiansen", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Buildout", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "=========================\nsolr_recipe\n=========================\n\nBuildout recipe that installs and configures Apache Solr. The recipe was made to\nmake it easy to setup Solr for Haystack. It has only been tested with\nHaystack 1.2.3 and Solr 3.6.2.\n\n\nRequirements\n############\n\n- Java 1.5 or greater from Oracle, OpenJDK or IMB. Gnu GCJ does not work. Run\n  ``java -version`` to see what version you have installed if any.\n\n\nUsage\n#####\n\n1. Add something like this to your ``buildout.cfg``::\n\n    [buildout]\n    ...\n    parts = \n        ...\n        solr\n    ...\n\n    [solr]\n    recipe = solr_recipe\n    solr_version = 3.6.2\n    loglevel = INFO\n\n2. The configuration above will work with Haystack. It installs a ``run_solr.sh``\n   script in ``bin/``, and stores data in ``var/solr/data/``.\n3. Run ``bin/buildout``.\n4. Add ``schema.xml`` to ``var/solr/home/``. See ``solr_classpath`` for\n   information about how this works.\n5. Run ``bin/run_solr.sh``\n\n\nHaystack?\n=========\nIf you use Haystack, you should use::\n    \n        $ python manage.py build_solr_schema -f var/solr/home/conf/schema.xml\n\nin step 3. See the ``run_solr_extra_startup_commands`` option below for how\nto automate this.\n\n\n\nOptions\n#############\n\n``solr_version`` (**required**)\n    The solr version to download from the ``mirror``.\n``mirror``\n    The Apache mirror to download from. Defaults to\n    http://archive.apache.org/dist/lucene/solr/.\n``java_executable``\n    The Java executable to use in ``run_solr.sh``. Defaults to ``java``.\n``solr_logconfig_tplfile``\n    A Jinja2 template used to generate the solr ``logging.properties`` file.\n    It gets all options added to the section as template variables, so\n    ``loglevel`` and any other options you add will be available in the\n    template. If no template file is specified, we use this template::\n\n        .level = {{ loglevel }}\n\n        # Write to the console:\n        handlers = java.util.logging.ConsoleHandler\n\n``loglevel``\n    Specifies the loglevel for the ``solr_logconfig_tplfile``.\n    Defaults to ``INFO``.\n``solr_datadir``\n    The directory where solr should store data. This is forwarded to\n    solr via ``-Dsolr.data.dir`` in ``run_solr.sh``. Defaults to\n    ``var/<sectionname>/data/``, where ``<sectionname>`` is the name\n    of the buildout config section (``solr`` in the example above).\n    The directory is created (recursively) if it does not exist.\n``solr_home``\n    Instead of using our example config-directory, you can configure your own\n    using this option. Defaults to ``var/<sectionname>/home/``, which is copied\n    from the `solr_recipe/files/example-solr3.6-config/`_-directory in the\n    python package if it does not exists (links to the latest version - select\n    the tag matching your version to view the actual files). The default\n    directory does not include a ``schema.xml``.\n``solr_classpath``\n    Add extra directories to the Java classpath. Added to ``run_solr.sh`` with\n    the ``-classpath`` option. Refer to ``java -help`` for more info about the\n    format. You can use this to provide a directory where you override any\n    config files in ``solr_home``. Defaults to\n    ``var/<sectionname>/config_overrides``.\n``run_solr_extra_startup_commands``\n    Extra shell commands to run before starting solr in ``run_solr.sh``.\n    Typically used to generate the Haystack schema automatically before\n    starting solr. Example::\n\n        [solr]\n        recipe = solr_recipe\n        ...\n        run_solr_extra_startup_commands =\n            echo \"Starting Apache Solr\"\n            python ${buildout:directory}/manage.py build_solr_schema -f ${buildout:directory}/var/solr/home/conf/schema.xml\n\n``run_solr_extra_shutdown_commands``\n    Just like ``run_solr_extra_startup_commands``, but these are added to\n    ``run_solr.sh`` after the command to start/run Solr. Example::\n\n        [solr]\n        recipe = solr_recipe\n        ...\n        run_solr_extra_shutdown_commands =\n            echo \"Solr was stopped. Exited with exit code $?\"\n\n\n.. note::\n    We create ``var/<sectionname>/config_overrides`` even when it is not on the\n    ``solr_classpath``. This is simply because it does not hurt, and detecting if\n    it is on the classpath is just unneeded complexity.\n\n\n.. _`solr_recipe/files/example-solr3.6-config/`: https://github.com/espenak/solr_recipe/tree/master/solr_recipe/files/example-solr3.6-config", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/espenak/solr_recipe", "keywords": null, "license": "Apache", "maintainer": null, "maintainer_email": null, "name": "solr_recipe", "package_url": "https://pypi.org/project/solr_recipe/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/solr_recipe/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/espenak/solr_recipe"}, "release_url": "https://pypi.org/project/solr_recipe/1.0/", "requires_dist": null, "requires_python": null, "summary": "Buildout recipe that installs and configures Apache Solr. The default setup works with haystack 1.2.3.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Buildout recipe that installs and configures Apache Solr. The recipe was made to\nmake it easy to setup Solr for Haystack. It has only been tested with\nHaystack 1.2.3 and Solr 3.6.2.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Java 1.5 or greater from Oracle, OpenJDK or IMB. Gnu GCJ does not work. Run\n<tt>java <span class=\"pre\">-version</span></tt> to see what version you have installed if any.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ol>\n<li><p>Add something like this to your <tt>buildout.cfg</tt>:</p>\n<pre>[buildout]\n...\nparts =\n    ...\n    solr\n...\n\n[solr]\nrecipe = solr_recipe\nsolr_version = 3.6.2\nloglevel = INFO\n</pre>\n</li>\n<li><p>The configuration above will work with Haystack. It installs a <tt>run_solr.sh</tt>\nscript in <tt>bin/</tt>, and stores data in <tt>var/solr/data/</tt>.</p>\n</li>\n<li><p>Run <tt>bin/buildout</tt>.</p>\n</li>\n<li><p>Add <tt>schema.xml</tt> to <tt>var/solr/home/</tt>. See <tt>solr_classpath</tt> for\ninformation about how this works.</p>\n</li>\n<li><p>Run <tt>bin/run_solr.sh</tt></p>\n</li>\n</ol>\n<div id=\"haystack\">\n<h3>Haystack?</h3>\n<p>If you use Haystack, you should use:</p>\n<pre>$ python manage.py build_solr_schema -f var/solr/home/conf/schema.xml\n</pre>\n<p>in step 3. See the <tt>run_solr_extra_startup_commands</tt> option below for how\nto automate this.</p>\n</div>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<dl>\n<dt><tt>solr_version</tt> (<strong>required</strong>)</dt>\n<dd>The solr version to download from the <tt>mirror</tt>.</dd>\n<dt><tt>mirror</tt></dt>\n<dd>The Apache mirror to download from. Defaults to\n<a href=\"http://archive.apache.org/dist/lucene/solr/\" rel=\"nofollow\">http://archive.apache.org/dist/lucene/solr/</a>.</dd>\n<dt><tt>java_executable</tt></dt>\n<dd>The Java executable to use in <tt>run_solr.sh</tt>. Defaults to <tt>java</tt>.</dd>\n<dt><tt>solr_logconfig_tplfile</tt></dt>\n<dd><p>A Jinja2 template used to generate the solr <tt>logging.properties</tt> file.\nIt gets all options added to the section as template variables, so\n<tt>loglevel</tt> and any other options you add will be available in the\ntemplate. If no template file is specified, we use this template:</p>\n<pre>.level = {{ loglevel }}\n\n# Write to the console:\nhandlers = java.util.logging.ConsoleHandler\n</pre>\n</dd>\n<dt><tt>loglevel</tt></dt>\n<dd>Specifies the loglevel for the <tt>solr_logconfig_tplfile</tt>.\nDefaults to <tt>INFO</tt>.</dd>\n<dt><tt>solr_datadir</tt></dt>\n<dd>The directory where solr should store data. This is forwarded to\nsolr via <tt><span class=\"pre\">-Dsolr.data.dir</span></tt> in <tt>run_solr.sh</tt>. Defaults to\n<tt><span class=\"pre\">var/&lt;sectionname&gt;/data/</span></tt>, where <tt>&lt;sectionname&gt;</tt> is the name\nof the buildout config section (<tt>solr</tt> in the example above).\nThe directory is created (recursively) if it does not exist.</dd>\n<dt><tt>solr_home</tt></dt>\n<dd>Instead of using our example config-directory, you can configure your own\nusing this option. Defaults to <tt><span class=\"pre\">var/&lt;sectionname&gt;/home/</span></tt>, which is copied\nfrom the <a href=\"https://github.com/espenak/solr_recipe/tree/master/solr_recipe/files/example-solr3.6-config\" rel=\"nofollow\">solr_recipe/files/example-solr3.6-config/</a>-directory in the\npython package if it does not exists (links to the latest version - select\nthe tag matching your version to view the actual files). The default\ndirectory does not include a <tt>schema.xml</tt>.</dd>\n<dt><tt>solr_classpath</tt></dt>\n<dd>Add extra directories to the Java classpath. Added to <tt>run_solr.sh</tt> with\nthe <tt><span class=\"pre\">-classpath</span></tt> option. Refer to <tt>java <span class=\"pre\">-help</span></tt> for more info about the\nformat. You can use this to provide a directory where you override any\nconfig files in <tt>solr_home</tt>. Defaults to\n<tt><span class=\"pre\">var/&lt;sectionname&gt;/config_overrides</span></tt>.</dd>\n<dt><tt>run_solr_extra_startup_commands</tt></dt>\n<dd><p>Extra shell commands to run before starting solr in <tt>run_solr.sh</tt>.\nTypically used to generate the Haystack schema automatically before\nstarting solr. Example:</p>\n<pre>[solr]\nrecipe = solr_recipe\n...\nrun_solr_extra_startup_commands =\n    echo \"Starting Apache Solr\"\n    python ${buildout:directory}/manage.py build_solr_schema -f ${buildout:directory}/var/solr/home/conf/schema.xml\n</pre>\n</dd>\n<dt><tt>run_solr_extra_shutdown_commands</tt></dt>\n<dd><p>Just like <tt>run_solr_extra_startup_commands</tt>, but these are added to\n<tt>run_solr.sh</tt> after the command to start/run Solr. Example:</p>\n<pre>[solr]\nrecipe = solr_recipe\n...\nrun_solr_extra_shutdown_commands =\n    echo \"Solr was stopped. Exited with exit code $?\"\n</pre>\n</dd>\n</dl>\n<div>\n<p>Note</p>\n<p>We create <tt><span class=\"pre\">var/&lt;sectionname&gt;/config_overrides</span></tt> even when it is not on the\n<tt>solr_classpath</tt>. This is simply because it does not hurt, and detecting if\nit is on the classpath is just unneeded complexity.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 799822, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b06c84fdfb663bdd6fdffe160a5aff42", "sha256": "9391dde099ec84c908cde0682affabbea5ad9faf9d66da568a129ef4c9d466f3"}, "downloads": -1, "filename": "solr_recipe-1.0.tar.gz", "has_sig": false, "md5_digest": "b06c84fdfb663bdd6fdffe160a5aff42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38973, "upload_time": "2013-01-31T10:44:22", "upload_time_iso_8601": "2013-01-31T10:44:22.835302Z", "url": "https://files.pythonhosted.org/packages/fa/ec/6b70b3833b0d63addebf09e4b83ddcb44517749fd21c49983f3b7f737d19/solr_recipe-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b06c84fdfb663bdd6fdffe160a5aff42", "sha256": "9391dde099ec84c908cde0682affabbea5ad9faf9d66da568a129ef4c9d466f3"}, "downloads": -1, "filename": "solr_recipe-1.0.tar.gz", "has_sig": false, "md5_digest": "b06c84fdfb663bdd6fdffe160a5aff42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38973, "upload_time": "2013-01-31T10:44:22", "upload_time_iso_8601": "2013-01-31T10:44:22.835302Z", "url": "https://files.pythonhosted.org/packages/fa/ec/6b70b3833b0d63addebf09e4b83ddcb44517749fd21c49983f3b7f737d19/solr_recipe-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:44 2020"}