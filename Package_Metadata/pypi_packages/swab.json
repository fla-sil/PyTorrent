{"info": {"author": "Oliver Cope", "author_email": "oliver@redgecko.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "License :: OSI Approved :: BSD License", "Programming Language :: Python"], "description": "Simple WSGI A/B testing - Swab\n==============================\n\nWhat is A/B testing?\n--------------------\n\nA/B testing is a way of comparing two versions of a web page against each\nother, to see which performs best for your visitors. It could be testing\nchanges to your website copy, visual design or user interface.\n\nWhen you run an A/B test experiment you need to tell Swab what variants you\nhave, and what goals you want to optimize for. Swab will then randomly assign\nvisitors to each variant and keep track of how many times each variant is\nshown, along with how many of those visits resulted in a conversion.\n\nUsing this data, Swab can show you the conversion rate for each variant along\nwith some basic statistics to help you decide whether there is a meaningful\ndifference between the versions.\n\n\nSetting up a Swab instance\n--------------------------\n\nSwab needs a directory where it can save the data files it uses for tracking\ntrial and conversion data::\n\n    from swab import Swab\n    s = Swab('/tmp/.swab-test-data')\n\nThen you need to tell swab about the experiments you want to run, the variants\navailable and the name of the conversion goal::\n\n    s.add_experiment('button-color', ['red', 'blue'], 'signup')\n\nFinally you need to wrap your WSGI app in swab's middleware::\n\n    application = s.middleware(application)\n\nIntegrating swab in your app\n----------------------------\n\nSwab makes a number of functions available to you that you can put in your application code:\n\n    show_variant(environ, experiment, record=False, variant=None)\n\n        Return the variant name to show for the current request. In the above\n        example, a call to ``show_variant('button-color', environ)`` would\n        return either ``'red'`` or ``'blue'``\n\n    record_trial_tag(environ, experiment)\n\n        Return the HTML tag for a javascript beacon that should be placed in\n        the page you are testing. The tag causes the user's browser to load a\n        referenced javascript file, triggering swab to record a trial for the\n        given experiment.\n\n        If you only have a single experiment running on the requested page and\n        have previously called ``show_variant`` you can safely omit the\n        experiment name.\n\n    record_trial(environ, experiment)\n\n        If you don't want to use the javascript beacon to track trials, you can\n        call ``record_trial`` directly. The javascript beacon method is\n        preferred as it is unlikely to be triggered by bots.\n\n        If you only have a single experiment running on the requested page and\n        have previously called ``show_variant`` you can safely omit the\n        experiment name.\n\n    record_goal(environ, goal, experiment)\n\n        Record a goal conversion for the named experiment\n\nViewing results\n---------------\n\nTest results are available at the URL ``/swab/results``.\n\nCaching\n-------\n\nSwab automatically adds a ``Cache-Control: no-cache`` response header if\n``show_variant`` or ``record_trial`` was called during the request. This\nhelps avoid proxies caching your test variants. It will also remove any other\ncache related headers (eg 'ETag' or 'Last-Modified'). If you don't want this\nbehaviour, you need to pass ``cache_control=False`` when creating the Swab\ninstance.\n\nViewing the variants\n--------------------\n\nTo test your competing pages append '?swab.<experiment-name>=<variant-name>' to\nURLs to force any given variant to be shown.\n\nBasic design\n============\n\nEach visitor is assigned an identity which is persisted by means of a cookie.\nThe identity is a base64 encoded randomly generated byte sequence. This\nidentity is used as a seed for a RNG, which is used to switch visitors into\ntest groups.\n\nEvery time a test is shown, a line\nis entered into a file at ``<datadir>/<experiment>/<variant>/__all__``. This is\ntriggered by calling ``record_trial``\n\nEvery time a goal is recorded (triggered by calling ``record_goal``), a\nline is entered into a file at ``<datadir>/<experiment>/<variant>/<goal>``\n\nEach log line has the format ``<timestamp>:<identity>\\n``.\n\nNo file locking is used: it is assumed that this will be run on a system where\neach line is smaller than the fs blocksize, allowing us to avoid this overhead.\nThe lines may become interleaved, but there should be no risk of corruption\neven with multiple simultaneous writes. See\nhttp://www.perlmonks.org/?node_id=486488 for a discussion of the issue.\n\n\n\n\n0.2.2 (released 2018-02-23)\n---------------------------\n\n* Bugfix: fix for exception triggered when a bot visits a page containing\n  ``record_trial_tag``\n\n0.2.1 (released 2018-02-23)\n---------------------------\n\n* Bugfix: fixed link rendering on test results page\n\n0.2.0 (released 2018-02-23)\n---------------------------\n\n* Compatibility with python 3\n* Allow the application to force a variant when calling show_variant\n* Improved JS snippet no longer blocks browser rendering\n* No longer records duplicate trials if show_variant is called twice\n* Allow experiments to customize the swabid generation strategy - useful if\n  you want to deterministically seed the RNG based on some request attribute.\n* Allow weighted variants: ``add_experiment('foo', 'AAAB')`` will show\n  variant A 75% of the time.\n* Include bayesian results calculation based on\n  http://www.evanmiller.org/bayesian-ab-testing.html#binary_ab_implementation\n* Better caching: only sets cookies on pages where an experiment is invoked\n* ``record_trial_tag`` can now infer the experiment name from a previous call\n  to ``show_variant``: less duplicated code when running an experiment.\n* Results now show results per visitor by default\n\nVersion 0.1.3\n-------------\n\n* Added a javascript beacon to record tests (helps exclude bots)\n* Better exclusion of bots on server side too\n* Record trial app won't raise an error if the experiment name doesn't exist\n* Removed debug flag, the ability to force a variant is now always present\n* Strip HTTP caching headers if an experiment has been invoked during the request\n* Improved accuracy of conversion tracking\n* Cookie path can be specified in middleware configuration\n\nVersion 0.1.2\n-------------\n\n* Minor bugfixes\n\nVersion 0.1.1\n-------------\n\n* Bugfix for ZeroDivisionErrors when no data has been collected\n\nVersion 0.1\n-------------\n\n* Initial release\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://ollycope.com/software/swab/", "keywords": "ab,a/b,a/bingo,split testing", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "swab", "package_url": "https://pypi.org/project/swab/", "platform": "", "project_url": "https://pypi.org/project/swab/", "project_urls": {"Homepage": "https://ollycope.com/software/swab/"}, "release_url": "https://pypi.org/project/swab/0.2.2/", "requires_dist": ["fresco", "fresco-static", "fresco-template", "piglet-templates"], "requires_python": "", "summary": "Swab: Simple WSGI A/B testing", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"simple-wsgi-a-b-testing-swab\">\n<h2>Simple WSGI A/B testing - Swab</h2>\n<div id=\"what-is-a-b-testing\">\n<h3>What is A/B testing?</h3>\n<p>A/B testing is a way of comparing two versions of a web page against each\nother, to see which performs best for your visitors. It could be testing\nchanges to your website copy, visual design or user interface.</p>\n<p>When you run an A/B test experiment you need to tell Swab what variants you\nhave, and what goals you want to optimize for. Swab will then randomly assign\nvisitors to each variant and keep track of how many times each variant is\nshown, along with how many of those visits resulted in a conversion.</p>\n<p>Using this data, Swab can show you the conversion rate for each variant along\nwith some basic statistics to help you decide whether there is a meaningful\ndifference between the versions.</p>\n</div>\n<div id=\"setting-up-a-swab-instance\">\n<h3>Setting up a Swab instance</h3>\n<p>Swab needs a directory where it can save the data files it uses for tracking\ntrial and conversion data:</p>\n<pre>from swab import Swab\ns = Swab('/tmp/.swab-test-data')\n</pre>\n<p>Then you need to tell swab about the experiments you want to run, the variants\navailable and the name of the conversion goal:</p>\n<pre>s.add_experiment('button-color', ['red', 'blue'], 'signup')\n</pre>\n<p>Finally you need to wrap your WSGI app in swab\u2019s middleware:</p>\n<pre>application = s.middleware(application)\n</pre>\n</div>\n<div id=\"integrating-swab-in-your-app\">\n<h3>Integrating swab in your app</h3>\n<p>Swab makes a number of functions available to you that you can put in your application code:</p>\n<blockquote>\n<p>show_variant(environ, experiment, record=False, variant=None)</p>\n<blockquote>\nReturn the variant name to show for the current request. In the above\nexample, a call to <tt><span class=\"pre\">show_variant('button-color',</span> environ)</tt> would\nreturn either <tt>'red'</tt> or <tt>'blue'</tt></blockquote>\n<p>record_trial_tag(environ, experiment)</p>\n<blockquote>\n<p>Return the HTML tag for a javascript beacon that should be placed in\nthe page you are testing. The tag causes the user\u2019s browser to load a\nreferenced javascript file, triggering swab to record a trial for the\ngiven experiment.</p>\n<p>If you only have a single experiment running on the requested page and\nhave previously called <tt>show_variant</tt> you can safely omit the\nexperiment name.</p>\n</blockquote>\n<p>record_trial(environ, experiment)</p>\n<blockquote>\n<p>If you don\u2019t want to use the javascript beacon to track trials, you can\ncall <tt>record_trial</tt> directly. The javascript beacon method is\npreferred as it is unlikely to be triggered by bots.</p>\n<p>If you only have a single experiment running on the requested page and\nhave previously called <tt>show_variant</tt> you can safely omit the\nexperiment name.</p>\n</blockquote>\n<p>record_goal(environ, goal, experiment)</p>\n<blockquote>\nRecord a goal conversion for the named experiment</blockquote>\n</blockquote>\n</div>\n<div id=\"viewing-results\">\n<h3>Viewing results</h3>\n<p>Test results are available at the URL <tt>/swab/results</tt>.</p>\n</div>\n<div id=\"caching\">\n<h3>Caching</h3>\n<p>Swab automatically adds a <tt><span class=\"pre\">Cache-Control:</span> <span class=\"pre\">no-cache</span></tt> response header if\n<tt>show_variant</tt> or <tt>record_trial</tt> was called during the request. This\nhelps avoid proxies caching your test variants. It will also remove any other\ncache related headers (eg \u2018ETag\u2019 or \u2018Last-Modified\u2019). If you don\u2019t want this\nbehaviour, you need to pass <tt>cache_control=False</tt> when creating the Swab\ninstance.</p>\n</div>\n<div id=\"viewing-the-variants\">\n<h3>Viewing the variants</h3>\n<p>To test your competing pages append \u2018?swab.&lt;experiment-name&gt;=&lt;variant-name&gt;\u2019 to\nURLs to force any given variant to be shown.</p>\n</div>\n</div>\n<div id=\"basic-design\">\n<h2>Basic design</h2>\n<p>Each visitor is assigned an identity which is persisted by means of a cookie.\nThe identity is a base64 encoded randomly generated byte sequence. This\nidentity is used as a seed for a RNG, which is used to switch visitors into\ntest groups.</p>\n<p>Every time a test is shown, a line\nis entered into a file at <tt><span class=\"pre\">&lt;datadir&gt;/&lt;experiment&gt;/&lt;variant&gt;/__all__</span></tt>. This is\ntriggered by calling <tt>record_trial</tt></p>\n<p>Every time a goal is recorded (triggered by calling <tt>record_goal</tt>), a\nline is entered into a file at <tt><span class=\"pre\">&lt;datadir&gt;/&lt;experiment&gt;/&lt;variant&gt;/&lt;goal&gt;</span></tt></p>\n<p>Each log line has the format <tt><span class=\"pre\">&lt;timestamp&gt;:&lt;identity&gt;\\n</span></tt>.</p>\n<p>No file locking is used: it is assumed that this will be run on a system where\neach line is smaller than the fs blocksize, allowing us to avoid this overhead.\nThe lines may become interleaved, but there should be no risk of corruption\neven with multiple simultaneous writes. See\n<a href=\"http://www.perlmonks.org/?node_id=486488\" rel=\"nofollow\">http://www.perlmonks.org/?node_id=486488</a> for a discussion of the issue.</p>\n<div id=\"released-2018-02-23\">\n<h3>0.2.2 (released 2018-02-23)</h3>\n<ul>\n<li>Bugfix: fix for exception triggered when a bot visits a page containing\n<tt>record_trial_tag</tt></li>\n</ul>\n</div>\n<div id=\"id1\">\n<h3>0.2.1 (released 2018-02-23)</h3>\n<ul>\n<li>Bugfix: fixed link rendering on test results page</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.0 (released 2018-02-23)</h3>\n<ul>\n<li>Compatibility with python 3</li>\n<li>Allow the application to force a variant when calling show_variant</li>\n<li>Improved JS snippet no longer blocks browser rendering</li>\n<li>No longer records duplicate trials if show_variant is called twice</li>\n<li>Allow experiments to customize the swabid generation strategy - useful if\nyou want to deterministically seed the RNG based on some request attribute.</li>\n<li>Allow weighted variants: <tt><span class=\"pre\">add_experiment('foo',</span> 'AAAB')</tt> will show\nvariant A 75% of the time.</li>\n<li>Include bayesian results calculation based on\n<a href=\"http://www.evanmiller.org/bayesian-ab-testing.html#binary_ab_implementation\" rel=\"nofollow\">http://www.evanmiller.org/bayesian-ab-testing.html#binary_ab_implementation</a></li>\n<li>Better caching: only sets cookies on pages where an experiment is invoked</li>\n<li><tt>record_trial_tag</tt> can now infer the experiment name from a previous call\nto <tt>show_variant</tt>: less duplicated code when running an experiment.</li>\n<li>Results now show results per visitor by default</li>\n</ul>\n</div>\n<div id=\"version-0-1-3\">\n<h3>Version 0.1.3</h3>\n<ul>\n<li>Added a javascript beacon to record tests (helps exclude bots)</li>\n<li>Better exclusion of bots on server side too</li>\n<li>Record trial app won\u2019t raise an error if the experiment name doesn\u2019t exist</li>\n<li>Removed debug flag, the ability to force a variant is now always present</li>\n<li>Strip HTTP caching headers if an experiment has been invoked during the request</li>\n<li>Improved accuracy of conversion tracking</li>\n<li>Cookie path can be specified in middleware configuration</li>\n</ul>\n</div>\n<div id=\"version-0-1-2\">\n<h3>Version 0.1.2</h3>\n<ul>\n<li>Minor bugfixes</li>\n</ul>\n</div>\n<div id=\"version-0-1-1\">\n<h3>Version 0.1.1</h3>\n<ul>\n<li>Bugfix for ZeroDivisionErrors when no data has been collected</li>\n</ul>\n</div>\n<div id=\"version-0-1\">\n<h3>Version 0.1</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3610154, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "dbc5e272b5fb86b85930292a7fb3fbaf", "sha256": "fe5846d50eda093efb6ba904b839e6bd71c69496d742c032f0336db8765e4562"}, "downloads": -1, "filename": "swab-0.1.tar.gz", "has_sig": false, "md5_digest": "dbc5e272b5fb86b85930292a7fb3fbaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12804, "upload_time": "2010-09-08T13:25:33", "upload_time_iso_8601": "2010-09-08T13:25:33.945401Z", "url": "https://files.pythonhosted.org/packages/3d/2c/6ed8c71b26f627af85d3789f198d1b5c324f61c4cfcc7e51c3109755dbb3/swab-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "17c88d8b3cc27d00a1d45ef2de9324a3", "sha256": "f451b0d889f7227cce711df4e999add65366478a5e33a00e08d2f1f699571a86"}, "downloads": -1, "filename": "swab-0.1.1.tar.gz", "has_sig": false, "md5_digest": "17c88d8b3cc27d00a1d45ef2de9324a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13025, "upload_time": "2010-09-08T22:50:22", "upload_time_iso_8601": "2010-09-08T22:50:22.377300Z", "url": "https://files.pythonhosted.org/packages/30/13/44030cd0e7f2ccdd700c65c03d027b1385025e7410328838df560ca0a158/swab-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fc6edcd4e3729152f27032ed201decdd", "sha256": "e073e46098fa81d8e252b7cb2f82efdad510bb6b18fa56f193c241910689f010"}, "downloads": -1, "filename": "swab-0.1.2.tar.gz", "has_sig": false, "md5_digest": "fc6edcd4e3729152f27032ed201decdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13123, "upload_time": "2010-09-10T10:34:49", "upload_time_iso_8601": "2010-09-10T10:34:49.670733Z", "url": "https://files.pythonhosted.org/packages/a1/3f/34ef088f5ce4aa02817a628078b531f76614105f488c45b396048d3b9a07/swab-0.1.2.tar.gz", "yanked": false}], "0.1.3": [], "0.1.3-": [{"comment_text": "", "digests": {"md5": "dc7e18810a32cfc83831e08e15af4abc", "sha256": "63c7ee45179b761bcb5937fe2e6d3d8be4a0526f650b6f20911ba418771fc4a6"}, "downloads": -1, "filename": "swab-0.1.3-.tar.gz", "has_sig": false, "md5_digest": "dc7e18810a32cfc83831e08e15af4abc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16609, "upload_time": "2012-07-20T15:23:40", "upload_time_iso_8601": "2012-07-20T15:23:40.889748Z", "url": "https://files.pythonhosted.org/packages/b3/a0/6a7c33523f434cb605e40915166ff693196c8efd117dbd6d0b14c55365fa/swab-0.1.3-.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2ffae38a65bf9f5a6482db932677dba8", "sha256": "8ba0847b3b1b9db29935db18874dd3eb08b08819ad73c4b3896ab255564e8100"}, "downloads": -1, "filename": "swab-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "2ffae38a65bf9f5a6482db932677dba8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 21426, "upload_time": "2018-02-23T13:13:04", "upload_time_iso_8601": "2018-02-23T13:13:04.204160Z", "url": "https://files.pythonhosted.org/packages/0d/d7/551c7fa3db888b80b94d16df6ae1ccc77d45bf25b3eef5777068fb499ba2/swab-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6c27700849a6b3cd3a321d079291766", "sha256": "275dcaad3fe315f25ee6f3e9ac2d48ed352c93aa220c0d1a315eecbea7e5a391"}, "downloads": -1, "filename": "swab-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f6c27700849a6b3cd3a321d079291766", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20342, "upload_time": "2018-02-23T13:13:05", "upload_time_iso_8601": "2018-02-23T13:13:05.643864Z", "url": "https://files.pythonhosted.org/packages/2d/4b/ff1488696aaddb3916ae5bc226d58baf9b20957e7d0db6166ce40e3ea1d2/swab-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3e82602ad0e327395f9fc1b7f4cd5bd0", "sha256": "62517cef42e5ce779cfc38f9d7844f5c71be1a1bfebc2f6438563d9b9c2a4f57"}, "downloads": -1, "filename": "swab-0.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "3e82602ad0e327395f9fc1b7f4cd5bd0", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 21399, "upload_time": "2018-02-23T13:56:56", "upload_time_iso_8601": "2018-02-23T13:56:56.647922Z", "url": "https://files.pythonhosted.org/packages/1e/98/864b6166631821499769467413afe0d348b74b4e94e15f12eb0807c54f51/swab-0.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b982e7d5d449e70d33f8e100d8845383", "sha256": "6602e5cd28ee5d96d03135432042d6565934b8b8b044378a9d9739f3c98d52a1"}, "downloads": -1, "filename": "swab-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b982e7d5d449e70d33f8e100d8845383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20277, "upload_time": "2018-02-23T13:56:59", "upload_time_iso_8601": "2018-02-23T13:56:59.002814Z", "url": "https://files.pythonhosted.org/packages/84/a1/176cc327929a33550364e0b6a0f2b7e48338bab3749f46a30764d4cb3c4d/swab-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "b8820988d81aff441a8e9f7f8133ee7b", "sha256": "ee6a5ec5c3c1b02f4378062f89e33979b68c06885265fe5c98ba8492555b09b5"}, "downloads": -1, "filename": "swab-0.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "b8820988d81aff441a8e9f7f8133ee7b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 21553, "upload_time": "2018-02-23T19:00:36", "upload_time_iso_8601": "2018-02-23T19:00:36.862547Z", "url": "https://files.pythonhosted.org/packages/82/2b/d62ea36d46660d6bc75f1c0d36671ff24ec9e93c9aab8c875eb662fd3108/swab-0.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aceb3030ae4fb4c4f86c56f433a9c97b", "sha256": "eae392d96269f22509377f06a0663333d50e5cf3d228633a99a16c95d5065f7f"}, "downloads": -1, "filename": "swab-0.2.2.tar.gz", "has_sig": false, "md5_digest": "aceb3030ae4fb4c4f86c56f433a9c97b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22981, "upload_time": "2018-02-23T19:00:39", "upload_time_iso_8601": "2018-02-23T19:00:39.090233Z", "url": "https://files.pythonhosted.org/packages/41/2f/80d89a2447bf800c932d1e33fe0ad85dc4b3952dc254504a45de9090a0e4/swab-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8820988d81aff441a8e9f7f8133ee7b", "sha256": "ee6a5ec5c3c1b02f4378062f89e33979b68c06885265fe5c98ba8492555b09b5"}, "downloads": -1, "filename": "swab-0.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "b8820988d81aff441a8e9f7f8133ee7b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 21553, "upload_time": "2018-02-23T19:00:36", "upload_time_iso_8601": "2018-02-23T19:00:36.862547Z", "url": "https://files.pythonhosted.org/packages/82/2b/d62ea36d46660d6bc75f1c0d36671ff24ec9e93c9aab8c875eb662fd3108/swab-0.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aceb3030ae4fb4c4f86c56f433a9c97b", "sha256": "eae392d96269f22509377f06a0663333d50e5cf3d228633a99a16c95d5065f7f"}, "downloads": -1, "filename": "swab-0.2.2.tar.gz", "has_sig": false, "md5_digest": "aceb3030ae4fb4c4f86c56f433a9c97b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22981, "upload_time": "2018-02-23T19:00:39", "upload_time_iso_8601": "2018-02-23T19:00:39.090233Z", "url": "https://files.pythonhosted.org/packages/41/2f/80d89a2447bf800c932d1e33fe0ad85dc4b3952dc254504a45de9090a0e4/swab-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:47 2020"}