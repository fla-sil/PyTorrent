{"info": {"author": "Christian Fobel", "author_email": "christian@fobel.net", "bugtrack_url": null, "classifiers": [], "description": "# pulse-counter-rpc #\r\n\r\nTemplate package for remote procedure call (RPC) project, utilizing\r\n[`base-node-rpc`][3].\r\n\r\n## Overview ##\r\n\r\nThis package contains:\r\n\r\n - Firmware compatible with Arduino Uno or Mega2560.\r\n - Installable Python package for interfacing with Arduino firmware through\r\n   serial port or i2c (through a serial-to-i2c proxy).\r\n\r\n## Install ##\r\n\r\nThe Python package can be installed through `pip` using the following command:\r\n\r\n    pip install pulse-counter-rpc\r\n\r\n## Upload firmware ##\r\n\r\nTo upload the pre-compiled firmware included in the Python package, run the\r\nfollowing command:\r\n\r\n    python -m pulse_counter_rpc.bin.upload <board type>\r\n\r\nreplacing `<board type>` with either `uno` or `mega2560`, depending on the\r\nmodel of the board.\r\n\r\nThis will attempt to upload the firmware by automatically discovering the\r\nserial port.  On systems with multiple serial ports, use the `-p` command line\r\nargument to specify the serial port to use.  For example:\r\n\r\n    python -m pulse_counter_rpc.bin.upload -p COM3 uno\r\n\r\n--------------------------------------------------\r\n\r\n## Usage ##\r\n\r\nAfter uploading the firmware to the board, the `pulse_counter_rpc.Proxy` class can be\r\nused to interact with the Arduino device.\r\n\r\nSee the session log below for example usage.\r\n\r\n### Example interactive session ###\r\n\r\n    >>> from serial import Serial\r\n    >>> from pulse_counter_rpc import Proxy\r\n\r\nConnect to serial device.\r\n\r\n    >>> serial_device = Serial('/dev/ttyUSB0', baudrate=115200)\r\n\r\nInitialize a device proxy using existing serial connection.\r\n\r\n    >>> proxy = Proxy(serial_device)\r\n\r\nQuery the number of bytes free in device RAM.\r\n\r\n    >>> proxy.ram_free()\r\n    409\r\n\r\nQuery descriptive properties of device.\r\n\r\n    >>> proxy.properties()\r\n    base_node_software_version                               0.9.post8.dev141722557\r\n    name                                                                  pulse_counter_rpc\r\n    manufacturer                                                        Wheeler Lab\r\n    url                           http://github.com/wheeler-microfluidics/rpc-p...\r\n    software_version                                                            0.1\r\n    dtype: object\r\n\r\nUse Arduino API methods interactively.\r\n\r\n    >>> # Set pin 13 as output\r\n    >>> proxy.pin_mode(13, 1)\r\n    >>> # Turn led on\r\n    >>> proxy.digital_write(13, 1)\r\n    >>> # Turn led off\r\n    >>> proxy.digital_write(13, 0)\r\n\r\n\r\n### Configuration and state ###\r\n\r\nThe device stores a *configuration* and a *state*.  The configuration is\r\nserialized and stored in EEPROM, allowing settings to persist across device\r\nresets.  The state is stored in device memory and is reinitialized each time\r\nthe device starts up.\r\n\r\nPrint (non-default) configuration values.\r\n\r\n    >>> print proxy.config\r\n    serial_number: 2\r\n    baud_rate: 115200\r\n    i2c_address: 17\r\n\r\nConfiguration settings can be set by updating the configuration.\r\n\r\n    >>> result_code = proxy.update_config(serial_number=1234)\r\n    >>> result_code = proxy.update_config(i2c_address=32)\r\n\r\nTo persist changes to *configuration* across device reset - *not* state - use\r\n`save_config` method.\r\n\r\n    >>> proxy.save_config()\r\n\r\n### Other methods ###\r\n\r\nBelow is a list of the attributes of the `pulse_counter_rpc.Proxy` Python class.  Note\r\nthat many of the [Arduino API][1] functions (e.g., `pin_mode`, `digital_write`,\r\netc.) are exposed through the RPC API.\r\n\r\n    >>> proxy.\r\n    proxy.analog_read                      proxy.microseconds\r\n    proxy.analog_write                     proxy.milliseconds\r\n    proxy.array_length                     proxy.name\r\n    proxy.base_node_software_version       proxy.on_config_baud_rate_changed\r\n    proxy.begin                            proxy.on_config_i2c_address_changed\r\n    proxy.buffer_size                      proxy.on_config_serial_number_changed\r\n    proxy.channel_count                    proxy.on_state_frequency_changed\r\n    proxy.config                           proxy.on_state_voltage_changed\r\n    proxy.delay_ms                         proxy.pin_mode\r\n    proxy.delay_us                         proxy.properties\r\n    proxy.digital_read                     proxy.ram_free\r\n    proxy.digital_write                    proxy.read_eeprom_block\r\n    proxy.echo_array                       proxy.reset_config\r\n    proxy.get_buffer                       proxy.reset_state\r\n    proxy.i2c_address                      proxy.save_config\r\n    proxy.i2c_available                    proxy.serialize_config\r\n    proxy.i2c_buffer_size                  proxy.serialize_state\r\n    proxy.i2c_read                         proxy.set_i2c_address\r\n    proxy.i2c_read_byte                    proxy.set_state_of_channels\r\n    proxy.i2c_request                      proxy.software_version\r\n    proxy.i2c_request_from                 proxy.state\r\n    proxy.i2c_scan                         proxy.state_of_channels\r\n    proxy.i2c_write                        proxy.str_echo\r\n    proxy.load_config                      proxy.update_config\r\n    proxy.manufacturer                     proxy.update_eeprom_block\r\n    proxy.max_i2c_payload_size             proxy.update_state\r\n    proxy.max_serial_payload_size          proxy.url\r\n\r\n--------------------------------------------------\r\n\r\n## Firmware development ##\r\n\r\nThe Arduino firmware/sketch is located in the `pulse_counter_rpc/Arduino/pulse_counter_rpc`\r\ndirectory.  The key functionality is defined in the `pulse_counter_rpc::Node` class in\r\nthe file `Node.h`.\r\n\r\nRunning the following command will build the firmware using [SCons][2] for\r\nArduino Uno and Arduino Mega2560, and will package the resulting firmware in a\r\nPython package, ready for distribution.\r\n\r\n    paver sdist\r\n\r\n### Adding new remote procedure call (RPC) methods ###\r\n\r\nNew methods may be added to the RPC API by adding new methods to the\r\n`pulse_counter_rpc::Node` class in the file `Node.h`.\r\n\r\n# Author #\r\n\r\nCopyright 2015 Christian Fobel <christian@fobel.net>\r\n\r\n\r\n[1]: https://www.arduino.cc/en/Reference/HomePage\r\n[2]: http://www.scons.org/\r\n[3]: https://github.com/wheeler-microfluidics/base_node_rpc\r\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/wheeler-microfluidics/pulse-counter-rpc.git", "keywords": null, "license": "GPLv2", "maintainer": null, "maintainer_email": null, "name": "pulse-counter-rpc", "package_url": "https://pypi.org/project/pulse-counter-rpc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pulse-counter-rpc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/wheeler-microfluidics/pulse-counter-rpc.git"}, "release_url": "https://pypi.org/project/pulse-counter-rpc/0.1.post22/", "requires_dist": null, "requires_python": null, "summary": "Arduino-based pulse counting firmware and Python driver.", "version": "0.1.post22", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># pulse-counter-rpc #</p>\n<p>Template package for remote procedure call (RPC) project, utilizing\n[<cite>base-node-rpc</cite>][3].</p>\n<p>## Overview ##</p>\n<p>This package contains:</p>\n<blockquote>\n<ul>\n<li>Firmware compatible with Arduino Uno or Mega2560.</li>\n<li>Installable Python package for interfacing with Arduino firmware through\nserial port or i2c (through a serial-to-i2c proxy).</li>\n</ul>\n</blockquote>\n<p>## Install ##</p>\n<p>The Python package can be installed through <cite>pip</cite> using the following command:</p>\n<blockquote>\npip install pulse-counter-rpc</blockquote>\n<p>## Upload firmware ##</p>\n<p>To upload the pre-compiled firmware included in the Python package, run the\nfollowing command:</p>\n<blockquote>\npython -m pulse_counter_rpc.bin.upload &lt;board type&gt;</blockquote>\n<p>replacing <cite>&lt;board type&gt;</cite> with either <cite>uno</cite> or <cite>mega2560</cite>, depending on the\nmodel of the board.</p>\n<p>This will attempt to upload the firmware by automatically discovering the\nserial port.  On systems with multiple serial ports, use the <cite>-p</cite> command line\nargument to specify the serial port to use.  For example:</p>\n<blockquote>\npython -m pulse_counter_rpc.bin.upload -p COM3 uno</blockquote>\n<hr class=\"docutils\">\n<p>## Usage ##</p>\n<p>After uploading the firmware to the board, the <cite>pulse_counter_rpc.Proxy</cite> class can be\nused to interact with the Arduino device.</p>\n<p>See the session log below for example usage.</p>\n<p>### Example interactive session ###</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from serial import Serial\n&gt;&gt;&gt; from pulse_counter_rpc import Proxy\n</pre>\n</blockquote>\n<p>Connect to serial device.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; serial_device = Serial('/dev/ttyUSB0', baudrate=115200)\n</pre>\n</blockquote>\n<p>Initialize a device proxy using existing serial connection.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy = Proxy(serial_device)\n</pre>\n</blockquote>\n<p>Query the number of bytes free in device RAM.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.ram_free()\n409\n</pre>\n</blockquote>\n<p>Query descriptive properties of device.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.properties()\nbase_node_software_version                               0.9.post8.dev141722557\nname                                                                  pulse_counter_rpc\nmanufacturer                                                        Wheeler Lab\nurl                           http://github.com/wheeler-microfluidics/rpc-p...\nsoftware_version                                                            0.1\ndtype: object\n</pre>\n</blockquote>\n<p>Use Arduino API methods interactively.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; # Set pin 13 as output\n&gt;&gt;&gt; proxy.pin_mode(13, 1)\n&gt;&gt;&gt; # Turn led on\n&gt;&gt;&gt; proxy.digital_write(13, 1)\n&gt;&gt;&gt; # Turn led off\n&gt;&gt;&gt; proxy.digital_write(13, 0)\n</pre>\n</blockquote>\n<p>### Configuration and state ###</p>\n<p>The device stores a <em>configuration</em> and a <em>state</em>.  The configuration is\nserialized and stored in EEPROM, allowing settings to persist across device\nresets.  The state is stored in device memory and is reinitialized each time\nthe device starts up.</p>\n<p>Print (non-default) configuration values.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print proxy.config\nserial_number: 2\nbaud_rate: 115200\ni2c_address: 17\n</pre>\n</blockquote>\n<p>Configuration settings can be set by updating the configuration.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; result_code = proxy.update_config(serial_number=1234)\n&gt;&gt;&gt; result_code = proxy.update_config(i2c_address=32)\n</pre>\n</blockquote>\n<p>To persist changes to <em>configuration</em> across device reset - <em>not</em> state - use\n<cite>save_config</cite> method.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.save_config()\n</pre>\n</blockquote>\n<p>### Other methods ###</p>\n<p>Below is a list of the attributes of the <cite>pulse_counter_rpc.Proxy</cite> Python class.  Note\nthat many of the [Arduino API][1] functions (e.g., <cite>pin_mode</cite>, <cite>digital_write</cite>,\netc.) are exposed through the RPC API.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.\nproxy.analog_read                      proxy.microseconds\nproxy.analog_write                     proxy.milliseconds\nproxy.array_length                     proxy.name\nproxy.base_node_software_version       proxy.on_config_baud_rate_changed\nproxy.begin                            proxy.on_config_i2c_address_changed\nproxy.buffer_size                      proxy.on_config_serial_number_changed\nproxy.channel_count                    proxy.on_state_frequency_changed\nproxy.config                           proxy.on_state_voltage_changed\nproxy.delay_ms                         proxy.pin_mode\nproxy.delay_us                         proxy.properties\nproxy.digital_read                     proxy.ram_free\nproxy.digital_write                    proxy.read_eeprom_block\nproxy.echo_array                       proxy.reset_config\nproxy.get_buffer                       proxy.reset_state\nproxy.i2c_address                      proxy.save_config\nproxy.i2c_available                    proxy.serialize_config\nproxy.i2c_buffer_size                  proxy.serialize_state\nproxy.i2c_read                         proxy.set_i2c_address\nproxy.i2c_read_byte                    proxy.set_state_of_channels\nproxy.i2c_request                      proxy.software_version\nproxy.i2c_request_from                 proxy.state\nproxy.i2c_scan                         proxy.state_of_channels\nproxy.i2c_write                        proxy.str_echo\nproxy.load_config                      proxy.update_config\nproxy.manufacturer                     proxy.update_eeprom_block\nproxy.max_i2c_payload_size             proxy.update_state\nproxy.max_serial_payload_size          proxy.url\n</pre>\n</blockquote>\n<hr class=\"docutils\">\n<p>## Firmware development ##</p>\n<p>The Arduino firmware/sketch is located in the <cite>pulse_counter_rpc/Arduino/pulse_counter_rpc</cite>\ndirectory.  The key functionality is defined in the <cite>pulse_counter_rpc::Node</cite> class in\nthe file <cite>Node.h</cite>.</p>\n<p>Running the following command will build the firmware using [SCons][2] for\nArduino Uno and Arduino Mega2560, and will package the resulting firmware in a\nPython package, ready for distribution.</p>\n<blockquote>\npaver sdist</blockquote>\n<p>### Adding new remote procedure call (RPC) methods ###</p>\n<p>New methods may be added to the RPC API by adding new methods to the\n<cite>pulse_counter_rpc::Node</cite> class in the file <cite>Node.h</cite>.</p>\n<p># Author #</p>\n<p>Copyright 2015 Christian Fobel &lt;<a href=\"mailto:christian%40fobel.net\">christian<span>@</span>fobel<span>.</span>net</a>&gt;</p>\n<p>[1]: <a href=\"https://www.arduino.cc/en/Reference/HomePage\" rel=\"nofollow\">https://www.arduino.cc/en/Reference/HomePage</a>\n[2]: <a href=\"http://www.scons.org/\" rel=\"nofollow\">http://www.scons.org/</a>\n[3]: <a href=\"https://github.com/wheeler-microfluidics/base_node_rpc\" rel=\"nofollow\">https://github.com/wheeler-microfluidics/base_node_rpc</a></p>\n\n          </div>"}, "last_serial": 1973272, "releases": {"0.1.post18": [{"comment_text": "", "digests": {"md5": "8493494f9358cbd7c44cdf292b50138d", "sha256": "628366722b7ebd961591266c6cc39223bcc7e7bc8466913bafca9360946bd90b"}, "downloads": -1, "filename": "pulse-counter-rpc-0.1.post18.zip", "has_sig": false, "md5_digest": "8493494f9358cbd7c44cdf292b50138d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157537, "upload_time": "2015-12-11T19:07:12", "upload_time_iso_8601": "2015-12-11T19:07:12.040744Z", "url": "https://files.pythonhosted.org/packages/ab/0d/52873b02ca3c84b5bd22e90c0358d6f7c9f73dd794ec02447784b171324c/pulse-counter-rpc-0.1.post18.zip", "yanked": false}], "0.1.post19": [{"comment_text": "", "digests": {"md5": "f3e47da6bfd8a4405093da792b8bfd97", "sha256": "a883da7c9e0e08dc87f999f49507e987a56d3c28d2a7ac036b200d9dfeb715f9"}, "downloads": -1, "filename": "pulse-counter-rpc-0.1.post19.zip", "has_sig": false, "md5_digest": "f3e47da6bfd8a4405093da792b8bfd97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157503, "upload_time": "2015-12-18T22:21:15", "upload_time_iso_8601": "2015-12-18T22:21:15.896201Z", "url": "https://files.pythonhosted.org/packages/33/05/0c862f4a0d3c7282c136418fbccfcc02ededf47c609d21cbf7a706ee07ec/pulse-counter-rpc-0.1.post19.zip", "yanked": false}], "0.1.post22": [{"comment_text": "", "digests": {"md5": "245a1c507e5e266562c41f975897900e", "sha256": "ed3cb528b2dc1b6c98b8a547c90ee6c53e0a5e78862c67a3f09e9148822ae6a1"}, "downloads": -1, "filename": "pulse-counter-rpc-0.1.post22.zip", "has_sig": false, "md5_digest": "245a1c507e5e266562c41f975897900e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158593, "upload_time": "2015-12-23T21:20:55", "upload_time_iso_8601": "2015-12-23T21:20:55.367087Z", "url": "https://files.pythonhosted.org/packages/6a/49/3a81cf801e17297051ed36474024510e597f62387b47a588aca37c7ee225/pulse-counter-rpc-0.1.post22.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "245a1c507e5e266562c41f975897900e", "sha256": "ed3cb528b2dc1b6c98b8a547c90ee6c53e0a5e78862c67a3f09e9148822ae6a1"}, "downloads": -1, "filename": "pulse-counter-rpc-0.1.post22.zip", "has_sig": false, "md5_digest": "245a1c507e5e266562c41f975897900e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158593, "upload_time": "2015-12-23T21:20:55", "upload_time_iso_8601": "2015-12-23T21:20:55.367087Z", "url": "https://files.pythonhosted.org/packages/6a/49/3a81cf801e17297051ed36474024510e597f62387b47a588aca37c7ee225/pulse-counter-rpc-0.1.post22.zip", "yanked": false}], "timestamp": "Fri May  8 03:14:06 2020"}