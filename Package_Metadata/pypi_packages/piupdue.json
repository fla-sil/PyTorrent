{"info": {"author": "John Grant", "author_email": "johngrantuk@googlemail.com", "bugtrack_url": null, "classifiers": [], "description": "piupdue\n=======\n\nPython package that enables a compiled Ardunio Sketch to be uploaded to\nan Arduino Due from a RaspberryPI (connected by USB).\n\nBased on the `Arduino BOSSA C++ source\ncode. <https://github.com/shumatech/BOSSA/tree/arduino/src>`__\n\nInstall using: $ pip install pyupdue\n\nSketch file must be saved locally on PI and be of type \".cpp.bin\".\n\nRun from cmd line\n=================\n\nusage: piupdue.py [-h] -f SKETCHFILE [-p PORT] [-l LOGFILE]\n\noptional arguments: -h, --help show this help message and exit -f\nSKETCHFILE, --file SKETCHFILE Sketch file to upload. Including path.\n(/path/File.cpp.bin) -p PORT, --port PORT Port Due is connected on.\nLeave blank for auto selection. -l LOGFILE, --log LOGFILE Save output to\nlog file. # Use in Python Program\n\nUse the Upload function found in piupdue.py, Ex:\n\nimport piupdue\n\npiupdue.Upload('/usr/update/FastSketch.cpp.bin', '/dev/ttyACM1',\n'/var/log/piupdue.log')\n\nSome background\n===============\n\nThe Arduino Due is a microcontroller board based on the Atmel SAM3X8E\nARM Cortex-M3 CPU. It is the first Arduino board based on a 32-bit ARM\ncore microcontroller instead of the more common AVR. The different mcu\nmeans the performance is better but also means the booting process is\ndifferent from the AVR, Ardunio has designed the board such that\nflashing firmware is easier than what the stock SAM3X has offered, `this\nlink <http://playground.arduino.cc/Bootloader/DueBootloaderExplained>`__\nexplains the booting process and the tricks that Arduiro implemented.\n\nThe \"avrdude\" program is used to upload code to the AVR based Arduinos\nand there are quite a few examples of how to do this from the\nRaspberryPI. BOSSAC is used by Arduino to upload code to the ARM, it's\nthe command line variation of\n`BOSSA <http://www.shumatech.com/web/products/bossa>`__ which is a\nsimple and open source flash programming utility for Atmel's SAM family\nof flash-based ARM microcontrollers designed to replace Atmel's SAM-BA\nsoftware.\n\nI required the ability to upload new code from a RaspberryPI to a Due. I\ncouldn't find any info on getting BOSSAC to run on the PI so I have\nwritten this package in Python to replicate the fucntionality.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johngrantuk/piupdue", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "piupdue", "package_url": "https://pypi.org/project/piupdue/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/piupdue/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/johngrantuk/piupdue"}, "release_url": "https://pypi.org/project/piupdue/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Upload code to Arduino Due from Python.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"piupdue\">\n<h2>piupdue</h2>\n<p>Python package that enables a compiled Ardunio Sketch to be uploaded to\nan Arduino Due from a RaspberryPI (connected by USB).</p>\n<p>Based on the <a href=\"https://github.com/shumatech/BOSSA/tree/arduino/src\" rel=\"nofollow\">Arduino BOSSA C++ source\ncode.</a></p>\n<p>Install using: $ pip install pyupdue</p>\n<p>Sketch file must be saved locally on PI and be of type \u201c.cpp.bin\u201d.</p>\n</div>\n<div id=\"run-from-cmd-line\">\n<h2>Run from cmd line</h2>\n<p>usage: piupdue.py [-h] -f SKETCHFILE [-p PORT] [-l LOGFILE]</p>\n<p>optional arguments: -h, \u2013help show this help message and exit -f\nSKETCHFILE, \u2013file SKETCHFILE Sketch file to upload. Including path.\n(/path/File.cpp.bin) -p PORT, \u2013port PORT Port Due is connected on.\nLeave blank for auto selection. -l LOGFILE, \u2013log LOGFILE Save output to\nlog file. # Use in Python Program</p>\n<p>Use the Upload function found in piupdue.py, Ex:</p>\n<p>import piupdue</p>\n<p>piupdue.Upload(\u2018/usr/update/FastSketch.cpp.bin\u2019, \u2018/dev/ttyACM1\u2019,\n\u2018/var/log/piupdue.log\u2019)</p>\n</div>\n<div id=\"some-background\">\n<h2>Some background</h2>\n<p>The Arduino Due is a microcontroller board based on the Atmel SAM3X8E\nARM Cortex-M3 CPU. It is the first Arduino board based on a 32-bit ARM\ncore microcontroller instead of the more common AVR. The different mcu\nmeans the performance is better but also means the booting process is\ndifferent from the AVR, Ardunio has designed the board such that\nflashing firmware is easier than what the stock SAM3X has offered, <a href=\"http://playground.arduino.cc/Bootloader/DueBootloaderExplained\" rel=\"nofollow\">this\nlink</a>\nexplains the booting process and the tricks that Arduiro implemented.</p>\n<p>The \u201cavrdude\u201d program is used to upload code to the AVR based Arduinos\nand there are quite a few examples of how to do this from the\nRaspberryPI. BOSSAC is used by Arduino to upload code to the ARM, it\u2019s\nthe command line variation of\n<a href=\"http://www.shumatech.com/web/products/bossa\" rel=\"nofollow\">BOSSA</a> which is a\nsimple and open source flash programming utility for Atmel\u2019s SAM family\nof flash-based ARM microcontrollers designed to replace Atmel\u2019s SAM-BA\nsoftware.</p>\n<p>I required the ability to upload new code from a RaspberryPI to a Due. I\ncouldn\u2019t find any info on getting BOSSAC to run on the PI so I have\nwritten this package in Python to replicate the fucntionality.</p>\n</div>\n\n          </div>"}, "last_serial": 1506033, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f4a207ecb2851c3b05866bc7da3c7cbb", "sha256": "619366ecc049d113f67c846f22ccfcc0f42191398cee60254957499b7a3c8bce"}, "downloads": -1, "filename": "piupdue-0.1.zip", "has_sig": false, "md5_digest": "f4a207ecb2851c3b05866bc7da3c7cbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11608, "upload_time": "2015-03-05T11:18:41", "upload_time_iso_8601": "2015-03-05T11:18:41.169265Z", "url": "https://files.pythonhosted.org/packages/31/c8/c51b4268270b359ee04ce278242d3c2b22874a31ce5416f565d1b1ebe1d5/piupdue-0.1.zip", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "8dee31d191555df2be3b71b1edd85847", "sha256": "2b5378baf5b5363a6f90fe9f8e4ee122c1d86bebddee6754f35a95a622ee32ee"}, "downloads": -1, "filename": "piupdue-0.1.0.zip", "has_sig": false, "md5_digest": "8dee31d191555df2be3b71b1edd85847", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12243, "upload_time": "2015-03-05T11:43:38", "upload_time_iso_8601": "2015-03-05T11:43:38.617209Z", "url": "https://files.pythonhosted.org/packages/96/fd/add4ded78df4a3ca76ac8e93827d199a39f51c6fc81b63c7d4344b67adb6/piupdue-0.1.0.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2bfe2d9059e2f75f67c24a77006bdcb0", "sha256": "11cfb00480a52e2297f3a2b7de853316c1538113328b6239f661076216fadb77"}, "downloads": -1, "filename": "piupdue-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2bfe2d9059e2f75f67c24a77006bdcb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11138, "upload_time": "2015-04-08T14:13:45", "upload_time_iso_8601": "2015-04-08T14:13:45.261241Z", "url": "https://files.pythonhosted.org/packages/39/95/7380d3b3f48490e29fe4e79bcdffa943c4a8ce642c9af43c829c7818bfae/piupdue-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "66e898363114fc74700f9900ef8eeeb3", "sha256": "57b0a0711c1ffa1ab67a16f55ef1adeec237ee0b51c515d08a10d71984c318dd"}, "downloads": -1, "filename": "piupdue-1.0.0.tar.gz", "has_sig": false, "md5_digest": "66e898363114fc74700f9900ef8eeeb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11144, "upload_time": "2015-04-15T08:46:28", "upload_time_iso_8601": "2015-04-15T08:46:28.877230Z", "url": "https://files.pythonhosted.org/packages/de/1e/766db3548dbce16e9eec74da4f5f279a5603f10c08f709edcc6597e0f3df/piupdue-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "accde01e557550589d74c76b021cb1fe", "sha256": "82ef40b42f1adc8b3061212a425773967cc16e17e2e834b1e36594e3f187c4bf"}, "downloads": -1, "filename": "piupdue-1.0.1.tar.gz", "has_sig": false, "md5_digest": "accde01e557550589d74c76b021cb1fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12204, "upload_time": "2015-04-15T09:06:17", "upload_time_iso_8601": "2015-04-15T09:06:17.409436Z", "url": "https://files.pythonhosted.org/packages/44/91/ca58dfd7885b10c844a990391b8bb2fa2b9f181fabfb51d8c06e99645f38/piupdue-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "accde01e557550589d74c76b021cb1fe", "sha256": "82ef40b42f1adc8b3061212a425773967cc16e17e2e834b1e36594e3f187c4bf"}, "downloads": -1, "filename": "piupdue-1.0.1.tar.gz", "has_sig": false, "md5_digest": "accde01e557550589d74c76b021cb1fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12204, "upload_time": "2015-04-15T09:06:17", "upload_time_iso_8601": "2015-04-15T09:06:17.409436Z", "url": "https://files.pythonhosted.org/packages/44/91/ca58dfd7885b10c844a990391b8bb2fa2b9f181fabfb51d8c06e99645f38/piupdue-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:59 2020"}