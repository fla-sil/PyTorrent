{"info": {"author": "Gabriela Surita", "author_email": "gsurita@loggi.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Proto Schematics\n================\n\n*Making Protobuf messages as cute as Python.*\n\n\nMotivation\n----------\n\nProtobuf and gRPC are great when it comes to high performance schema aware APIs,\nbut when Google designed Protobuf, it didn't tried to make the generated code\nidiomatic in Python, which brings a problem when exporting messages outside\niterface modules.\n\nSchematics is a cute and pythonic schema library. Why not join both?\n\n\nInstalling\n----------\n\nUsing pip::\n\n    pip install proto_schamatics\n\n\nExamples\n--------\n\nInspecting a module is as simple as:\n\n.. code-block::\n\n    from proto_schematics import ProtobufModule\n\n    models = ProtobufModule('my_protobuf_lib').import_schema()\n    MySchamticsModel = models['ProtobufMessageName']\n\nYou can also do it on a lazy lint unfriendly way:\n\n.. code-block::\n\n    from proto_schematics import ProtobufModule\n    ProtobufModule('my_protobuf_lib').meta_import()\n\n    from protobuf_schematics import ProtobufMessageName as MySchematicsModel\n\n\nSupports\n--------\n\n* Datetimes as native Python\n* Duration as TimeDeltas\n* Wrappers as native nullable types", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/loggi/proto-schematics", "keywords": "loggi,schematics,protobuf,grpc", "license": "Apache License (2.0)", "maintainer": "", "maintainer_email": "", "name": "proto-schematics", "package_url": "https://pypi.org/project/proto-schematics/", "platform": "", "project_url": "https://pypi.org/project/proto-schematics/", "project_urls": {"Homepage": "https://github.com/loggi/proto-schematics"}, "release_url": "https://pypi.org/project/proto-schematics/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Converts protobuf generated messages to Python friendly schematics models.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Making Protobuf messages as cute as Python.</em></p>\n<div id=\"motivation\">\n<h2>Motivation</h2>\n<p>Protobuf and gRPC are great when it comes to high performance schema aware APIs,\nbut when Google designed Protobuf, it didn\u2019t tried to make the generated code\nidiomatic in Python, which brings a problem when exporting messages outside\niterface modules.</p>\n<p>Schematics is a cute and pythonic schema library. Why not join both?</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Using pip:</p>\n<pre>pip install proto_schamatics\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Inspecting a module is as simple as:</p>\n<pre>from proto_schematics import ProtobufModule\n\nmodels = ProtobufModule('my_protobuf_lib').import_schema()\nMySchamticsModel = models['ProtobufMessageName']\n</pre>\n<p>You can also do it on a lazy lint unfriendly way:</p>\n<pre>from proto_schematics import ProtobufModule\nProtobufModule('my_protobuf_lib').meta_import()\n\nfrom protobuf_schematics import ProtobufMessageName as MySchematicsModel\n</pre>\n</div>\n<div id=\"supports\">\n<h2>Supports</h2>\n<ul>\n<li>Datetimes as native Python</li>\n<li>Duration as TimeDeltas</li>\n<li>Wrappers as native nullable types</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3303924, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ae53ae70d5120e1369cf0304be896f4c", "sha256": "5c8c7aaabc5a941584676ecef3fb78077fe321eb57ff60b0a8b4490998e90b2f"}, "downloads": -1, "filename": "proto_schematics-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae53ae70d5120e1369cf0304be896f4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4133, "upload_time": "2017-11-03T18:23:35", "upload_time_iso_8601": "2017-11-03T18:23:35.451305Z", "url": "https://files.pythonhosted.org/packages/af/57/a277e8f15202eb33d744a764a3cc6da0b55c0e0bfc2adedb474f516e612c/proto_schematics-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae53ae70d5120e1369cf0304be896f4c", "sha256": "5c8c7aaabc5a941584676ecef3fb78077fe321eb57ff60b0a8b4490998e90b2f"}, "downloads": -1, "filename": "proto_schematics-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae53ae70d5120e1369cf0304be896f4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4133, "upload_time": "2017-11-03T18:23:35", "upload_time_iso_8601": "2017-11-03T18:23:35.451305Z", "url": "https://files.pythonhosted.org/packages/af/57/a277e8f15202eb33d744a764a3cc6da0b55c0e0bfc2adedb474f516e612c/proto_schematics-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:28 2020"}