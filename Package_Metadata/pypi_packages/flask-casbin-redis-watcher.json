{"info": {"author": "ScienceLogic", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "# Flask-Casbin-Redis-Watcher\n\nCasbin role watcher to be used for monitoring updates to casbin policies\n\n### Installation\n```\npip install flask-casbin-redis-watcher\n```\n\n### Basic Usage\n```\nfrom flask_casbin import CasbinEnforcer\nfrom flask_casbin_redis_watcher import RedisWatcher\ncasbin_enforcer = CasbinEnforcer(app, adapter)\nwatcher=RedisWatcher(redis_hostname, redis_port)\nwatcher.set_update_callback(casbin_enforcer.e.load_policy)\ncasbin_enforcer.set_watcher(watcher)\n\n```\n\n### Using alongside UWSGI \nThis redis-watcher module starts separate processes which subscribe to a redis channel, and listens for updates to the casbin policy on that channel. When running within WSGI contexts (like uwsgi) you may want to start these processes as a postfork action. As is depicted below:\n```\ntry:\n    from uwsgidecorators import postfork\n    print(\"Running in uwsgi context\")\nexcept ModuleNotFoundError:\n    print(\"Not running in uwsgi context\")\n    postfork = None\n\nif postfork:\n    @postfork\n    def load_watcher():\n        global casbin_enforcer\n        watcher = RedisWatcher(redis_info.hostname, redis_info.port)\n        watcher.set_update_callback(casbin_enforcer.e.load_policy)\n        casbin_enforcer.set_watcher(watcher)\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/sciencelogic/flask-casbin-redis-watcher/tarball/0.1.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sciencelogic/flask-casbin-redis-watcher", "keywords": "pycasbin,casbin,flask,rbac", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "flask-casbin-redis-watcher", "package_url": "https://pypi.org/project/flask-casbin-redis-watcher/", "platform": "", "project_url": "https://pypi.org/project/flask-casbin-redis-watcher/", "project_urls": {"Download": "https://github.com/sciencelogic/flask-casbin-redis-watcher/tarball/0.1.0", "Homepage": "https://github.com/sciencelogic/flask-casbin-redis-watcher"}, "release_url": "https://pypi.org/project/flask-casbin-redis-watcher/0.1.0/", "requires_dist": ["redis", "flask-casbin (==0.1.1)"], "requires_python": ">3.5", "summary": "flask-casbin-redis-watcher", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flask-Casbin-Redis-Watcher</h1>\n<p>Casbin role watcher to be used for monitoring updates to casbin policies</p>\n<h3>Installation</h3>\n<pre><code>pip install flask-casbin-redis-watcher\n</code></pre>\n<h3>Basic Usage</h3>\n<pre><code>from flask_casbin import CasbinEnforcer\nfrom flask_casbin_redis_watcher import RedisWatcher\ncasbin_enforcer = CasbinEnforcer(app, adapter)\nwatcher=RedisWatcher(redis_hostname, redis_port)\nwatcher.set_update_callback(casbin_enforcer.e.load_policy)\ncasbin_enforcer.set_watcher(watcher)\n\n</code></pre>\n<h3>Using alongside UWSGI</h3>\n<p>This redis-watcher module starts separate processes which subscribe to a redis channel, and listens for updates to the casbin policy on that channel. When running within WSGI contexts (like uwsgi) you may want to start these processes as a postfork action. As is depicted below:</p>\n<pre><code>try:\n    from uwsgidecorators import postfork\n    print(\"Running in uwsgi context\")\nexcept ModuleNotFoundError:\n    print(\"Not running in uwsgi context\")\n    postfork = None\n\nif postfork:\n    @postfork\n    def load_watcher():\n        global casbin_enforcer\n        watcher = RedisWatcher(redis_info.hostname, redis_info.port)\n        watcher.set_update_callback(casbin_enforcer.e.load_policy)\n        casbin_enforcer.set_watcher(watcher)\n\n</code></pre>\n\n          </div>"}, "last_serial": 6697165, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "60a76261ffeec0f0ae82e3936688a479", "sha256": "c4decec2431c91459f9225dbbf4217dbc63ee855882575eca8c694efbe1c2a2c"}, "downloads": -1, "filename": "flask_casbin_redis_watcher-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "60a76261ffeec0f0ae82e3936688a479", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 3865, "upload_time": "2020-02-25T15:32:47", "upload_time_iso_8601": "2020-02-25T15:32:47.352188Z", "url": "https://files.pythonhosted.org/packages/26/3f/fc801ad656bb83972a802f725400dc999e01108973ba7993093cbd358cdf/flask_casbin_redis_watcher-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "60a76261ffeec0f0ae82e3936688a479", "sha256": "c4decec2431c91459f9225dbbf4217dbc63ee855882575eca8c694efbe1c2a2c"}, "downloads": -1, "filename": "flask_casbin_redis_watcher-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "60a76261ffeec0f0ae82e3936688a479", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 3865, "upload_time": "2020-02-25T15:32:47", "upload_time_iso_8601": "2020-02-25T15:32:47.352188Z", "url": "https://files.pythonhosted.org/packages/26/3f/fc801ad656bb83972a802f725400dc999e01108973ba7993093cbd358cdf/flask_casbin_redis_watcher-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 01:03:02 2020"}