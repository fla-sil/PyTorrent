{"info": {"author": "Vladimir Koljasinskij", "author_email": "smosker@yandex-team.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://img.shields.io/pypi/v/zero-downtime-migrations.svg?style=flat\n    :alt: PyPI Version\n    :target: https://pypi.python.org/pypi/zero-downtime-migrations\n\n.. image:: https://img.shields.io/pypi/pyversions/zero-downtime-migrations.svg\n    :alt: Supported Python versions\n    :target: https://pypi.python.org/pypi/zero-downtime-migrations\n\n.. image:: https://travis-ci.org/yandex/zero-downtime-migrations.svg?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/yandex/zero-downtime-migrations\n\n\nZero-Downtime-Migrations\n========================\n\nDescription\n-----------\n*Zero-Downtime-Migrations (ZDM)* -- this is application which allow you to avoid long locks (and rewriting the whole table)\nwhile applying Django migrations using PostgreSql as database.\n\nCurrent possibilities\n---------------------\n* add field with default value (nullable or not)\n* create index concurrently (and check index status after creation in case it was created with INVALID status)\n* add unique property to existing field through creating unique index concurrently and creating constraint using this index\n\nWhy use it\n----------\nWe face such a problem - performing some django migrations (such as add column with default value) lock the table on\nread/write, so its impossible for our services to work properly during this periods. It can be acceptable on rather small\ntables (less than million rows), but even on them it can be painful if service is high loaded.\nBut we have a lot of tables with more than 50 millions rows, and applying migrations on such a table lock it for\nmore than an hour, which is totally unacceptable. Also, during this time consuming operations, migration rather often fail\nbecause of different errors (such as TimeoutError) and we have to start it from scratch or run sql manually thought\npsql and when fake migration.\n\nSo in the end we have an idea of writing this package so it can prevent long locks on table and also\nprovide more stable migration process which can be continued if operation fall for some reason.\n\nInstallation\n------------\nTo install :code:`ZDM`, simply run:\n\n::\n\n    pip install zero-downtime-migrations\n\nUsage\n-----\nIf you are currently using default postresql backend change it to:\n\n::\n\n    DATABASES = {\n         'default': {\n             'ENGINE': 'zero_downtime_migrations.backend',\n             ...\n         }\n         ...\n     }\n\n\nIf you are using your own custom backend you can:\n\n* Set :code:`SchemaEditorClass` if you are currently using default one:\n\n::\n\n    from zero_downtime_migrations.backend.schema import DatabaseSchemaEditor\n\n    class DatabaseWrapper(BaseWrapper):\n        SchemaEditorClass = DatabaseSchemaEditor\n\n\n* Add :code:`ZeroDownTimeMixin` to base classes of your :code:`DatabaseSchemaEditor` if you are using custom one:\n\n::\n\n    from zero_downtime_migrations.backend.schema import ZeroDownTimeMixin\n\n    class YourCustomSchemaEditor(ZeroDownTimeMixin, ...):\n        ...\n\nNote about indexes\n------------------\nLibrary will always force CONCURRENTLY index creation and after that check index status - if index was\ncreated with INVALID status it will be deleted and error will be raised.\nIn this case you should fix problem if needed and restart migration.\nFor example if creating unique index was failed you should make sure that there are only unique values\nin column on which index is creating.\nUsually index creating with invalid status due to deadlock so you need just restart migration.\n\nExample\n-------\nWhen adding not null column with default django will perform such sql query:\n\n::\n\n    ALTER TABLE \"test\" ADD COLUMN \"field\" boolean DEFAULT True NOT NULL;\n\nWhich cause postgres to rewrite the whole table and when swap it with existing one (`note from django documentation <https://docs.djangoproject.com/en/dev/topics/migrations/#postgresql>`_)\nand during this period it will hold exclusive lock on write/read on this table.\n\nThis package will break sql above in separate commands not only to prevent the rewriting of whole\ntable but also to add column with as small lock times as possible.\n\nFirst of all we will add nullable column without default and add default value to it in separate command in one transaction:\n\n::\n\n    ALTER TABLE \"test\" ADD COLUMN \"field\" boolean NULL;\n    ALTER TABLE \"test\" ALTER COLUMN \"field\" SET DEFAULT true;\n\nThis will add default for all new rows in table but all existing ones will be with null value in this column for now,\nthis operation will be quick because postgres doesn't have to fill all existing rows with default.\n\nNext we will count objects in table and if result if more than zero - calculate the\nsize of batch in witch we will update existing rows. After that while where are still objects with null in this\ncolumn - we will update them.\n\nWhile result of following statement is more than zero:\n\n::\n\n    WITH cte AS (\n    SELECT <table_pk_column> as pk\n    FROM \"test\"\n    WHERE  \"field\" is null\n    LIMIT  <size_calculated_on_previous_step>\n    )\n    UPDATE \"test\" table_\n    SET \"field\" = true\n    FROM   cte\n    WHERE  table_.<table_pk_column> = cte.pk\n\nWhen we have no more rows with null in this column we can set not null and drop default (which is django default\nbehavior):\n\n::\n\n    ALTER TABLE \"test\" ALTER COLUMN \"field\" SET NOT NULL;\n    ALTER TABLE \"test\" ALTER COLUMN \"field\" DROP DEFAULT;\n\nSo we finish add field process.\nIt will be definitely more time consuming than basic variant with one sql statement, but in this approach\nthere are no long locks on table so service can work normally during this migrations process.\n\nRun tests\n---------\n\n::\n\n    ./run_tests.sh\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yandex/zero-downtime-migrations", "keywords": "django postgresql migrations", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "zero-downtime-migrations", "package_url": "https://pypi.org/project/zero-downtime-migrations/", "platform": "", "project_url": "https://pypi.org/project/zero-downtime-migrations/", "project_urls": {"Homepage": "https://github.com/yandex/zero-downtime-migrations"}, "release_url": "https://pypi.org/project/zero-downtime-migrations/0.8/", "requires_dist": null, "requires_python": "", "summary": "django migrations without long locks", "version": "0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/zero-downtime-migrations\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b972907918399cbfdd809e837ca767fb2e57124f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7a65726f2d646f776e74696d652d6d6967726174696f6e732e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/zero-downtime-migrations\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a6c2cdcc2e08724404c7465e59070d3244362a6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7a65726f2d646f776e74696d652d6d6967726174696f6e732e737667\"></a>\n<a href=\"https://travis-ci.org/yandex/zero-downtime-migrations\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e283e92f88b0032c169da8fa353e9d0399c2ed9/68747470733a2f2f7472617669732d63692e6f72672f79616e6465782f7a65726f2d646f776e74696d652d6d6967726174696f6e732e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"zero-downtime-migrations\">\n<h2>Zero-Downtime-Migrations</h2>\n<div id=\"description\">\n<h3>Description</h3>\n<p><em>Zero-Downtime-Migrations (ZDM)</em> \u2013 this is application which allow you to avoid long locks (and rewriting the whole table)\nwhile applying Django migrations using PostgreSql as database.</p>\n</div>\n<div id=\"current-possibilities\">\n<h3>Current possibilities</h3>\n<ul>\n<li>add field with default value (nullable or not)</li>\n<li>create index concurrently (and check index status after creation in case it was created with INVALID status)</li>\n<li>add unique property to existing field through creating unique index concurrently and creating constraint using this index</li>\n</ul>\n</div>\n<div id=\"why-use-it\">\n<h3>Why use it</h3>\n<p>We face such a problem - performing some django migrations (such as add column with default value) lock the table on\nread/write, so its impossible for our services to work properly during this periods. It can be acceptable on rather small\ntables (less than million rows), but even on them it can be painful if service is high loaded.\nBut we have a lot of tables with more than 50 millions rows, and applying migrations on such a table lock it for\nmore than an hour, which is totally unacceptable. Also, during this time consuming operations, migration rather often fail\nbecause of different errors (such as TimeoutError) and we have to start it from scratch or run sql manually thought\npsql and when fake migration.</p>\n<p>So in the end we have an idea of writing this package so it can prevent long locks on table and also\nprovide more stable migration process which can be continued if operation fall for some reason.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install <code>ZDM</code>, simply run:</p>\n<pre>pip install zero-downtime-migrations\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>If you are currently using default postresql backend change it to:</p>\n<pre>DATABASES = {\n     'default': {\n         'ENGINE': 'zero_downtime_migrations.backend',\n         ...\n     }\n     ...\n }\n</pre>\n<p>If you are using your own custom backend you can:</p>\n<ul>\n<li>Set <code>SchemaEditorClass</code> if you are currently using default one:</li>\n</ul>\n<pre>from zero_downtime_migrations.backend.schema import DatabaseSchemaEditor\n\nclass DatabaseWrapper(BaseWrapper):\n    SchemaEditorClass = DatabaseSchemaEditor\n</pre>\n<ul>\n<li>Add <code>ZeroDownTimeMixin</code> to base classes of your <code>DatabaseSchemaEditor</code> if you are using custom one:</li>\n</ul>\n<pre>from zero_downtime_migrations.backend.schema import ZeroDownTimeMixin\n\nclass YourCustomSchemaEditor(ZeroDownTimeMixin, ...):\n    ...\n</pre>\n</div>\n<div id=\"note-about-indexes\">\n<h3>Note about indexes</h3>\n<p>Library will always force CONCURRENTLY index creation and after that check index status - if index was\ncreated with INVALID status it will be deleted and error will be raised.\nIn this case you should fix problem if needed and restart migration.\nFor example if creating unique index was failed you should make sure that there are only unique values\nin column on which index is creating.\nUsually index creating with invalid status due to deadlock so you need just restart migration.</p>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>When adding not null column with default django will perform such sql query:</p>\n<pre>ALTER TABLE \"test\" ADD COLUMN \"field\" boolean DEFAULT True NOT NULL;\n</pre>\n<p>Which cause postgres to rewrite the whole table and when swap it with existing one (<a href=\"https://docs.djangoproject.com/en/dev/topics/migrations/#postgresql\" rel=\"nofollow\">note from django documentation</a>)\nand during this period it will hold exclusive lock on write/read on this table.</p>\n<p>This package will break sql above in separate commands not only to prevent the rewriting of whole\ntable but also to add column with as small lock times as possible.</p>\n<p>First of all we will add nullable column without default and add default value to it in separate command in one transaction:</p>\n<pre>ALTER TABLE \"test\" ADD COLUMN \"field\" boolean NULL;\nALTER TABLE \"test\" ALTER COLUMN \"field\" SET DEFAULT true;\n</pre>\n<p>This will add default for all new rows in table but all existing ones will be with null value in this column for now,\nthis operation will be quick because postgres doesn\u2019t have to fill all existing rows with default.</p>\n<p>Next we will count objects in table and if result if more than zero - calculate the\nsize of batch in witch we will update existing rows. After that while where are still objects with null in this\ncolumn - we will update them.</p>\n<p>While result of following statement is more than zero:</p>\n<pre>WITH cte AS (\nSELECT &lt;table_pk_column&gt; as pk\nFROM \"test\"\nWHERE  \"field\" is null\nLIMIT  &lt;size_calculated_on_previous_step&gt;\n)\nUPDATE \"test\" table_\nSET \"field\" = true\nFROM   cte\nWHERE  table_.&lt;table_pk_column&gt; = cte.pk\n</pre>\n<p>When we have no more rows with null in this column we can set not null and drop default (which is django default\nbehavior):</p>\n<pre>ALTER TABLE \"test\" ALTER COLUMN \"field\" SET NOT NULL;\nALTER TABLE \"test\" ALTER COLUMN \"field\" DROP DEFAULT;\n</pre>\n<p>So we finish add field process.\nIt will be definitely more time consuming than basic variant with one sql statement, but in this approach\nthere are no long locks on table so service can work normally during this migrations process.</p>\n</div>\n<div id=\"run-tests\">\n<h3>Run tests</h3>\n<pre>./run_tests.sh\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5786024, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "986394cb89325a3bce31432efd160f09", "sha256": "a38fbf20125473a8a104499963a8bd429db06da23209c50443d6ba1e361997c8"}, "downloads": -1, "filename": "zero-downtime-migrations-0.1.tar.gz", "has_sig": false, "md5_digest": "986394cb89325a3bce31432efd160f09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27977, "upload_time": "2018-01-17T11:25:29", "upload_time_iso_8601": "2018-01-17T11:25:29.179414Z", "url": "https://files.pythonhosted.org/packages/8a/11/311448b75494689e85042ef023f286661fcf20c308d8d3a8cad525c6f832/zero-downtime-migrations-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "387faadfa1d18d426f65142d9b8b0f1a", "sha256": "edd3e79241cade433556cb8e7743c022bbefd21d8bc02b2cf896b3939ebfab53"}, "downloads": -1, "filename": "zero-downtime-migrations-0.2.tar.gz", "has_sig": false, "md5_digest": "387faadfa1d18d426f65142d9b8b0f1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33295, "upload_time": "2018-01-25T08:48:55", "upload_time_iso_8601": "2018-01-25T08:48:55.682839Z", "url": "https://files.pythonhosted.org/packages/7e/e0/094194034d4d3b76a39c6841050f1b469618c8c32dd105a4bd94aae64eae/zero-downtime-migrations-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2f0d9058a3e2b6429292f842f36945fd", "sha256": "2b5c4f234b8a33e4b5a6ab2ae2be001977c06d3814550198d554f526f6f64cc2"}, "downloads": -1, "filename": "zero-downtime-migrations-0.3.tar.gz", "has_sig": false, "md5_digest": "2f0d9058a3e2b6429292f842f36945fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33293, "upload_time": "2018-04-25T11:40:10", "upload_time_iso_8601": "2018-04-25T11:40:10.778329Z", "url": "https://files.pythonhosted.org/packages/3a/85/53073bcc52cae4807bb6a61f3dcaa66d880a877992c59cbe846fe94d7d27/zero-downtime-migrations-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "2f3d611ad1c6100724861dbc3a167379", "sha256": "c47d123dc589a75aecdedb34cbe9a2d5387b5101488295534109c81d62b5df8c"}, "downloads": -1, "filename": "zero-downtime-migrations-0.4.tar.gz", "has_sig": false, "md5_digest": "2f3d611ad1c6100724861dbc3a167379", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33321, "upload_time": "2018-07-04T07:42:12", "upload_time_iso_8601": "2018-07-04T07:42:12.834027Z", "url": "https://files.pythonhosted.org/packages/0f/e6/d5622ef8ca5a09aa5a5d8dfb0d186721b4276cc7305c6d1b1c6a9828a631/zero-downtime-migrations-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "0b06210a5866bf7448869d8b80c8c540", "sha256": "68f585d0edeb3a6dbccb1f7025ac794d0b77d7fda13d1f3a7d433daae8cfe04d"}, "downloads": -1, "filename": "zero-downtime-migrations-0.5.tar.gz", "has_sig": false, "md5_digest": "0b06210a5866bf7448869d8b80c8c540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35610, "upload_time": "2019-05-20T08:26:54", "upload_time_iso_8601": "2019-05-20T08:26:54.718346Z", "url": "https://files.pythonhosted.org/packages/17/b7/0bfff643bf59621d1319b5eaf246c0e0531b7b4e89a8864105e4166d3e91/zero-downtime-migrations-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "2d68ebc8a90ea7b78b4e498cff50a98b", "sha256": "5697d99fe06302c7e895cc0f365f15fa80c6387b4e55b0b6f46be69723906fac"}, "downloads": -1, "filename": "zero-downtime-migrations-0.6.tar.gz", "has_sig": false, "md5_digest": "2d68ebc8a90ea7b78b4e498cff50a98b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37266, "upload_time": "2019-07-03T11:38:05", "upload_time_iso_8601": "2019-07-03T11:38:05.197186Z", "url": "https://files.pythonhosted.org/packages/4d/33/7fd9ab7bf98b5a74db50ffff8c19b9f1b1e3cb0914403b22fc926089f1ad/zero-downtime-migrations-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "468e01abe60bd08f82c3aae52fbc09ed", "sha256": "581db8291f93b9c9845ef2d70749af135e3afcbe1fc9912b52af34c1ca894f60"}, "downloads": -1, "filename": "zero-downtime-migrations-0.7.tar.gz", "has_sig": false, "md5_digest": "468e01abe60bd08f82c3aae52fbc09ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38392, "upload_time": "2019-07-08T10:09:41", "upload_time_iso_8601": "2019-07-08T10:09:41.844821Z", "url": "https://files.pythonhosted.org/packages/e7/23/da9cb755a304dbf258cb71f92805fadbb7e3cc70b97112b8bce8d2a6b5ee/zero-downtime-migrations-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "76d1e5edf319db99e7720a6b4c786573", "sha256": "e4c3be52c163a479f6bf5c56beaf2eeae0f61bbf5809383d8f31df9ed0cf663f"}, "downloads": -1, "filename": "zero-downtime-migrations-0.8.tar.gz", "has_sig": false, "md5_digest": "76d1e5edf319db99e7720a6b4c786573", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41793, "upload_time": "2019-09-05T11:25:30", "upload_time_iso_8601": "2019-09-05T11:25:30.966773Z", "url": "https://files.pythonhosted.org/packages/ff/82/498b9d033d4c0fd48f219f7129165614dc1e26f57675d500dcba77acf347/zero-downtime-migrations-0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76d1e5edf319db99e7720a6b4c786573", "sha256": "e4c3be52c163a479f6bf5c56beaf2eeae0f61bbf5809383d8f31df9ed0cf663f"}, "downloads": -1, "filename": "zero-downtime-migrations-0.8.tar.gz", "has_sig": false, "md5_digest": "76d1e5edf319db99e7720a6b4c786573", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41793, "upload_time": "2019-09-05T11:25:30", "upload_time_iso_8601": "2019-09-05T11:25:30.966773Z", "url": "https://files.pythonhosted.org/packages/ff/82/498b9d033d4c0fd48f219f7129165614dc1e26f57675d500dcba77acf347/zero-downtime-migrations-0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:39 2020"}