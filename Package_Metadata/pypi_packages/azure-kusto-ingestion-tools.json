{"info": {"author": "Microsoft Corporation", "author_email": "kustalk@microsoft.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Topic :: Software Development"], "description": "# Kusto Ingestion Tools (Kit)  \n\n\n[*azure-kusto-ingestion-tools*](\"https://github.com/Azure/azure-kusto-ingestion-tools/tree/master/kit\")  a simple toolkit to help with ingestions, avialble here\n<br>\n[![PyPI version](https://badge.fury.io/py/azure-kusto-ingestion-tools.svg)](https://badge.fury.io/py/azure-kusto-ingestion-tools)\n[![Downloads](https://pepy.tech/badge/azure-kusto-ingestion-tools)](https://pepy.tech/project/azure-kusto-ingestion-tools)<br>\n\n## Purpose  \nMake ingestion simpler (*at least for common cases*).\nAfter creating an ADX (Kusto) cluster via Azure portal, we want to explore / visualize some data. \nWhen evaluating data stores / tools we usually want to  just POC capabilities and move fast.  \n\nThat is what this project was created for. \nIt contains features to support:\n\n1. Data source **schema** inference (csv / kusto/ ...)\n2. Common **ingestion** scenarios (from file /entire folder / ...)\n3. Other helpful utilities (kql generator, ...)\n\n## TOC\n* [Concept](#concept)  \n* [Install](#install)\n* [Usage](#usage)\n* [Examples](#examples)\n\n## Concept\nGiven a data source, usually the workflow would consist of:  \n  \n1. Describing the data source.  \n2. Preparing the target data store (in our case, Kusto)  \n3. Mapping Source to Target  \n4. Loading the data  \n5. *Optional* : Automation / Moving to Production  \n  \n## Install\n\n### Minimum Requirements\n* Python 3.7+\n* See setup.py for dependencies\n\n### Pip\n\nTo install via the Python Package Index (PyPI), type:\n\n`pip install azure-kusto-ingestion-tools`\n\nThis will expose a new cli commands : `kit --help`\n\n\n## Usage  \n\n### Basic  \n  \n`kit ingest -d /path/to/data/imdb -h mycluster.westus`  \n  \nThe following command will try to ingest all files in `/path/to/data/imdb` (non-recursive) using type inference.  \n  \n  \n**<!>NOTICE<!>**: without providing any other arguments, this command is extremely *opinionated*, and will assume the following:  \n  \n### Options  \n  \n#### Auth  \nEvery command that needs to authenticate against kusto, will require authentication arguemnts.\n\nBy default, will try to grab token from [azure cli](https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest)\n\nOther options are:\n\nApp:\n\n`kit [command] -app {app_id}:{app_secret}`\n\nUser:\n\n`kit [command] -user {user_id}:{password}` \n  \n#### Naming  \n* **database** will be set to is the dir in which data sits, so `/path/to/data/imdb` will look for, and create if missing, a database named `imdb`.   \nIf more control is need, try `--database`  \n* **tables** are actual file names, so `/path/to/data/imdb/aka_name.csv` will look for, and create if missing, a table named `aka_name`.   \nThis can be tweaked by making sure data is split into folder, where any folder would be a table.  \nThis recursive mode assumes that the table structure is the same for all files.    \n\n### Files  \n  \n#### Database Schema file  \nThis is a simple way to describe a database.  \n  \nThis can be used to describe a db schema using plain JSON format, and thus easily copy entire database schemas.  \n  \n```json \n{\n    \"name\": \"imdb\",\n    \"tables\": [{\n        \"name\": \"aka_name\",\n        \"columns\": [{\n            \"dtype\": \"int\",\n            \"name\": \"id\",\n            \"index\": 0\n        }, {\n            \"dtype\": \"int\",\n            \"name\": \"person_id\",\n            \"index\": 1\n        }, {\n            \"dtype\": \"string\",\n            \"name\": \"name\",\n            \"index\": 2\n        }, {\n            \"dtype\": \"string\",\n            \"name\": \"imdb_index\",\n            \"index\": 3\n        }, {\n            \"dtype\": \"string\",\n            \"name\": \"name_pcode_cf\",\n            \"index\": 4\n        }, {\n            \"dtype\": \"string\",\n            \"name\": \"name_pcode_nf\",\n            \"index\": 5\n        }, {\n            \"dtype\": \"string\",\n            \"name\": \"surname_pcode\",\n            \"index\": 6\n        }, {\n            \"dtype\": \"string\",\n            \"name\": \"md5sum\",\n            \"index\": 7\n        }]\n    },\n    ...\n    ]  \n}\n```  \n\n**From an existing cluster**  \n  \n`kit schema create -h 'https://mycluster.kusto.windows.net' -db imdb > imdb_schema.json`  \n  \n**From an sql file**  \n  \n`kit schema create -sql imdb.sql > schema.json`  \n  \n**From a folder with raw data**  \n  \n`kit schema create -d path/to/dir > schema.json`  \n  \n**More to come...**  \n  \n#### Manifest file  \nA file to describe the details of an ingestion which can be run later  \n  \n```json  \n{  \n \"databases\": [ \"same as schema.json\" ], \n \"mappings\": [{ \n  \"name\": \"aka_name_from_csv\", \n  \"columns\": [{ \n    \"source\": { \n        \"index\": 0, \n      \"data_type\": \"str\" \n      }, \n      \"target\": { \n        \"index\": 0, \n        \"data_type\": \"str\" \n       }\n    }] \n   }], \n   \"operations\": [{ \n      \"database\": \"imdb\", \n      \"sources\": [{ \n        \"files\": [\"1.csv\", \"...\", \"99.csv\"], \n      \"mapping\": \"aka_name_from_csv\" \n      }], \n      \"target\": [ \"aka_name\" ] \n   }]\n }  \n```  \n  \n##  Examples\n  \n### Example 1 : Ingest IMDB Dataset , CSV files (used in Join Order Benchmark)  \n  \nOne useful scenario would be to load an entire existing dataset into Kusto.  \nLet's take for example the [Join Order Benchmark](https://github.com/gregrahn/join-order-benchmark) used in the paper [How good are query optimizers really?](http://www.vldb.org/pvldb/vol9/p204-leis.pdf).  \n  \n#### 1. Copy files to local dir:  \n  \n[Download](https://imdb2013dataset.blob.core.windows.net/data/imdb.tgz) from Azure Storage  \n`wget https://imdb2013dataset.blob.core.windows.net/data/imdb.tgz --no-check-certificate`  \n  or   \n`curl https://imdb2013dataset.blob.core.windows.net/data/imdb.tgz --output imdb.tgz`  \n  \n  \nOriginal Files [are available](https://homepages.cwi.nl/~boncz/job/imdb.tgz), but are malformed (don't conform to https://tools.ietf.org/html/rfc4180).   \nOne can fix them using tools like [xsv](https://github.com/BurntSushi/xsv/releases/tag/0.13.0),   \nbut this is we shall leave error handling for another section.   \n  \n#### 2. Extract files:  \n  \n`tar -xvzf imdb.tgz`  \n  \n  \n#### 3. Download SQL Create commands:  \n  \n`wget https://raw.githubusercontent.com/gregrahn/join-order-benchmark/master/schema.sql -O imdb.sql --no-check-certificate`  \n  \nor  \n  \n`curl https://raw.githubusercontent.com/gregrahn/join-order-benchmark/master/schema.sql --output imdb.sql`  \n  \n#### 4. Create schema from sql statement  \n  \n`kit schema create -sql schema.sql > imdb_schema.json`  \n  \n#### 5. Apply schema on cluster   \nAssuming we already have a cluster, and we are signed in using az cli, we can just apply the schema on a database we choose:  \n  \n`kit schema apply -f imdb_schema.json -h mycluster.westus -db imdb`  \n  \n#### 6. Ingest data from local files  \n  \n`kit ingest -d . --pattern \"*.csv\" -h mycluster.westus -db imdb`  \n  \n#### 7. Query  \n  \nUsing the Azure portal, you can now easily login and query your data.   \n  \nYou can always make sure that data was loaded by comparing the source line count with target column count:\n\n`xsv count aka_name.csv` - should show 901343 rows\n\nor\n\n`wc -l aka_name.csv` - should show 901343 rows\n\nQuery from kusto should show the same:\n\n`kit count --table aka_name -h mycluster.westus -db imdb` - should show 901343\n\nAnd take a peek at the data:\n`kit peek --table aka_name -n 10 -h mycluster.westus -db imdb`\n\n  \n### Example 2 : Ingest Kaggle ML Datasets, CSV and JSON\n\nKaggale has tons of interesting dataset for ML/AI purposes.\n\nLet's try and ingest some:\n\nhttps://www.kaggle.com/mlg-ulb/creditcardfraud/\nhttps://www.kaggle.com/START-UMD/gtd/\n\nUploaded to our azure storage for convenience:\n\n```\nwget https://imdb2013dataset.blob.core.windows.net/data/creditcard.csv.gz --no-check-certificate  \nwget https://imdb2013dataset.blob.core.windows.net/data/globalterrorism.csv.gz --no-check-certificate\nwget https://imdb2013dataset.blob.core.windows.net/data/arxivData.csv.gz --no-check-certificate\n```\n  or   \n```\ncurl https://imdb2013dataset.blob.core.windows.net/data/creditcard.csv.gz --output creditcard.csv.gz\ncurl https://imdb2013dataset.blob.core.windows.net/data/globalterrorism.csv.gz --output globalterrorism.csv.gz   \ncurl https://imdb2013dataset.blob.core.windows.net/data/arxivData.json.gz --output arxivData.json.gz\n```\n \n Once downloaded and unzipped, same idea, only this time files contain headers, so schema is infered:\n\n`kit ingest -d . -h mycluster.westus -db ml --headers`\n\n### Example 3 : Complex nested JSON mappings\n\nLet's look at a more advance use case:\n\n`wget https://imdb2013dataset.blob.core.windows.net/data/demo.json --no-check-certificate`\n    \n   or\n\n`curl https://imdb2013dataset.blob.core.windows.net/data/demo.json --output demo.json`\n\nSay our data is a json lines files, where each item looks like:\n\n`{\"header\":{\"time\":\"24-Aug-18 09:42:15\", \"id\":\"0944f542-a637-411b-94dd-8874992d6ebc\", \"api_version\":\"v2\"}, \"payload\":{\"data\":\"NEEUGQSPIPKDPQPIVFE\", \"user\":\"owild@fabrikam.com\"}}`\n\nIt seems that we have a nested object. \nBecause we are not sure what will happen, let's dry run.\nLet's try and `--dry` run an ingestion with `--object-depth 2`.\n\n`kit ingest -f demo.json --object-depth 2 -h mycluster.westus -db ml --dry > manifest.json`\n\nThis produces the following `manifest.json` which contains the operations to be executed.\n\n```json\n{\n  \"databases\": [\n    {\n      \"name\": \"ml\",\n      \"tables\": []\n    }\n  ],\n  \"mappings\": [\n    {\n      \"name\": \"demo_from_json\",\n      \"columns\": [\n        {\n          \"source\": {\n            \"dtype\": \"string\",\n            \"name\": \"header.time\",\n            \"index\": null\n          },\n          \"target\": {\n            \"dtype\": \"string\",\n            \"name\": \"header.time\",\n            \"index\": null\n          }\n        },\n        {\n          \"source\": {\n            \"dtype\": \"string\",\n            \"name\": \"header.id\",\n            \"index\": null\n          },\n          \"target\": {\n            \"dtype\": \"string\",\n            \"name\": \"header.id\",\n            \"index\": null\n          }\n        },\n        {\n          \"source\": {\n            \"dtype\": \"string\",\n            \"name\": \"header.api_version\",\n            \"index\": null\n          },\n          \"target\": {\n            \"dtype\": \"string\",\n            \"name\": \"header.api_version\",\n            \"index\": null\n          }\n        },\n        {\n          \"source\": {\n            \"dtype\": \"string\",\n            \"name\": \"payload.data\",\n            \"index\": null\n          },\n          \"target\": {\n            \"dtype\": \"string\",\n            \"name\": \"payload.data\",\n            \"index\": null\n          }\n        },\n        {\n          \"source\": {\n            \"dtype\": \"string\",\n            \"name\": \"payload.user\",\n            \"index\": null\n          },\n          \"target\": {\n            \"dtype\": \"string\",\n            \"name\": \"payload.user\",\n            \"index\": null\n          }\n        }\n      ]\n    }\n  ],\n  \"operations\": [\n    {\n      \"database\": \"ml\",\n      \"sources\": [\n        {\n          \"files\": [\n            \"C:\\\\Users\\\\dadubovs\\\\temp\\\\ml_datasets\\\\demo.json\"\n          ],\n          \"mapping\": \"demo_from_json\",\n          \"options\": {},\n          \"data_format\": \"json\"\n        }\n      ],\n      \"target\": \"demo\"\n    }\n  ]\n}\n```\n\nNow, let's say that we don't need the `id` field, we can edit the mapping and save it.\n\n\nIf we are still unsure, and want to get a better understanding are the commands that will be created, we can inspect the kql\n\n`kit kql -m manifest.json`\n\nWhich should output something like:\n\n```\n// Table Creation Commands:\n.create table demo (['header.time']:string,['header.api_version']:string,['payload.data']:string,['payload.user']:string)\n\n// Ingestion Mapping Creation Commands:\n.create table demo ingestion json mapping \"demo_from_json\" '[{\"column\":\"header.time\",\"path\":\"$.header.time\",\"datatype\":\"string\"},{\"column\":\"header.api_version\",\"path\":\"$.header.api_version\",\"datatype\":\"string\"},{\"column\":\"payload.data\",\"path\":\"$.payload.data\",\"datatype\":\"string\"},{\"column\":\"payload.user\",\"path\":\"$.payload.user\",\"datatype\":\"string\"}]'\n```\n\nOnce we are ready, we can resume our ingestion based on the manifest\n\n`kit ingest -m manifest.json -h mycluster.westus`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Azure/azure-kusto-ingestion-tools", "keywords": "kusto wrapper client library", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "azure-kusto-ingestion-tools", "package_url": "https://pypi.org/project/azure-kusto-ingestion-tools/", "platform": "", "project_url": "https://pypi.org/project/azure-kusto-ingestion-tools/", "project_urls": {"Homepage": "https://github.com/Azure/azure-kusto-ingestion-tools"}, "release_url": "https://pypi.org/project/azure-kusto-ingestion-tools/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Kusto Ingestion Tools (Kit)", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Kusto Ingestion Tools (Kit)</h1>\n<p><a href=\"%22https://github.com/Azure/azure-kusto-ingestion-tools/tree/master/kit%22\" rel=\"nofollow\"><em>azure-kusto-ingestion-tools</em></a>  a simple toolkit to help with ingestions, avialble here\n<br>\n<a href=\"https://badge.fury.io/py/azure-kusto-ingestion-tools\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19bb6d24ec3627ce75c1f3df24af0b11c5bd53a4/68747470733a2f2f62616467652e667572792e696f2f70792f617a7572652d6b7573746f2d696e67657374696f6e2d746f6f6c732e737667\"></a>\n<a href=\"https://pepy.tech/project/azure-kusto-ingestion-tools\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2390bc17a9971e411614f037d00ce425ba8daf6/68747470733a2f2f706570792e746563682f62616467652f617a7572652d6b7573746f2d696e67657374696f6e2d746f6f6c73\"></a><br></p>\n<h2>Purpose</h2>\n<p>Make ingestion simpler (<em>at least for common cases</em>).\nAfter creating an ADX (Kusto) cluster via Azure portal, we want to explore / visualize some data.\nWhen evaluating data stores / tools we usually want to  just POC capabilities and move fast.</p>\n<p>That is what this project was created for.\nIt contains features to support:</p>\n<ol>\n<li>Data source <strong>schema</strong> inference (csv / kusto/ ...)</li>\n<li>Common <strong>ingestion</strong> scenarios (from file /entire folder / ...)</li>\n<li>Other helpful utilities (kql generator, ...)</li>\n</ol>\n<h2>TOC</h2>\n<ul>\n<li><a href=\"#concept\" rel=\"nofollow\">Concept</a></li>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n</ul>\n<h2>Concept</h2>\n<p>Given a data source, usually the workflow would consist of:</p>\n<ol>\n<li>Describing the data source.</li>\n<li>Preparing the target data store (in our case, Kusto)</li>\n<li>Mapping Source to Target</li>\n<li>Loading the data</li>\n<li><em>Optional</em> : Automation / Moving to Production</li>\n</ol>\n<h2>Install</h2>\n<h3>Minimum Requirements</h3>\n<ul>\n<li>Python 3.7+</li>\n<li>See setup.py for dependencies</li>\n</ul>\n<h3>Pip</h3>\n<p>To install via the Python Package Index (PyPI), type:</p>\n<p><code>pip install azure-kusto-ingestion-tools</code></p>\n<p>This will expose a new cli commands : <code>kit --help</code></p>\n<h2>Usage</h2>\n<h3>Basic</h3>\n<p><code>kit ingest -d /path/to/data/imdb -h mycluster.westus</code></p>\n<p>The following command will try to ingest all files in <code>/path/to/data/imdb</code> (non-recursive) using type inference.</p>\n<p><strong>&lt;!&gt;NOTICE&lt;!&gt;</strong>: without providing any other arguments, this command is extremely <em>opinionated</em>, and will assume the following:</p>\n<h3>Options</h3>\n<h4>Auth</h4>\n<p>Every command that needs to authenticate against kusto, will require authentication arguemnts.</p>\n<p>By default, will try to grab token from <a href=\"https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest\" rel=\"nofollow\">azure cli</a></p>\n<p>Other options are:</p>\n<p>App:</p>\n<p><code>kit [command] -app {app_id}:{app_secret}</code></p>\n<p>User:</p>\n<p><code>kit [command] -user {user_id}:{password}</code></p>\n<h4>Naming</h4>\n<ul>\n<li><strong>database</strong> will be set to is the dir in which data sits, so <code>/path/to/data/imdb</code> will look for, and create if missing, a database named <code>imdb</code>.<br>\nIf more control is need, try <code>--database</code></li>\n<li><strong>tables</strong> are actual file names, so <code>/path/to/data/imdb/aka_name.csv</code> will look for, and create if missing, a table named <code>aka_name</code>.<br>\nThis can be tweaked by making sure data is split into folder, where any folder would be a table.<br>\nThis recursive mode assumes that the table structure is the same for all files.</li>\n</ul>\n<h3>Files</h3>\n<h4>Database Schema file</h4>\n<p>This is a simple way to describe a database.</p>\n<p>This can be used to describe a db schema using plain JSON format, and thus easily copy entire database schemas.</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"imdb\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"tables\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aka_name\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"columns\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"int\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"int\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"person_id\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"imdb_index\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name_pcode_cf\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name_pcode_nf\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"surname_pcode\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"md5sum\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span>\n        <span class=\"p\">}]</span>\n    <span class=\"p\">},</span>\n    <span class=\"err\">...</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">}</span>\n</pre>\n<p><strong>From an existing cluster</strong></p>\n<p><code>kit schema create -h 'https://mycluster.kusto.windows.net' -db imdb &gt; imdb_schema.json</code></p>\n<p><strong>From an sql file</strong></p>\n<p><code>kit schema create -sql imdb.sql &gt; schema.json</code></p>\n<p><strong>From a folder with raw data</strong></p>\n<p><code>kit schema create -d path/to/dir &gt; schema.json</code></p>\n<p><strong>More to come...</strong></p>\n<h4>Manifest file</h4>\n<p>A file to describe the details of an ingestion which can be run later</p>\n<pre><span class=\"p\">{</span>  \n <span class=\"nt\">\"databases\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"s2\">\"same as schema.json\"</span> <span class=\"p\">],</span> \n <span class=\"nt\">\"mappings\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> \n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aka_name_from_csv\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"columns\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> \n    <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> \n        <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> \n      <span class=\"nt\">\"data_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"str\"</span> \n      <span class=\"p\">},</span> \n      <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> \n        <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> \n        <span class=\"nt\">\"data_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"str\"</span> \n       <span class=\"p\">}</span>\n    <span class=\"p\">}]</span> \n   <span class=\"p\">}],</span> \n   <span class=\"nt\">\"operations\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> \n      <span class=\"nt\">\"database\"</span><span class=\"p\">:</span> <span class=\"s2\">\"imdb\"</span><span class=\"p\">,</span> \n      <span class=\"nt\">\"sources\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> \n        <span class=\"nt\">\"files\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"1.csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span> <span class=\"s2\">\"99.csv\"</span><span class=\"p\">],</span> \n      <span class=\"nt\">\"mapping\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aka_name_from_csv\"</span> \n      <span class=\"p\">}],</span> \n      <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"s2\">\"aka_name\"</span> <span class=\"p\">]</span> \n   <span class=\"p\">}]</span>\n <span class=\"p\">}</span>  \n</pre>\n<h2>Examples</h2>\n<h3>Example 1 : Ingest IMDB Dataset , CSV files (used in Join Order Benchmark)</h3>\n<p>One useful scenario would be to load an entire existing dataset into Kusto.<br>\nLet's take for example the <a href=\"https://github.com/gregrahn/join-order-benchmark\" rel=\"nofollow\">Join Order Benchmark</a> used in the paper <a href=\"http://www.vldb.org/pvldb/vol9/p204-leis.pdf\" rel=\"nofollow\">How good are query optimizers really?</a>.</p>\n<h4>1. Copy files to local dir:</h4>\n<p><a href=\"https://imdb2013dataset.blob.core.windows.net/data/imdb.tgz\" rel=\"nofollow\">Download</a> from Azure Storage<br>\n<code>wget https://imdb2013dataset.blob.core.windows.net/data/imdb.tgz --no-check-certificate</code><br>\nor<br>\n<code>curl https://imdb2013dataset.blob.core.windows.net/data/imdb.tgz --output imdb.tgz</code></p>\n<p>Original Files <a href=\"https://homepages.cwi.nl/%7Eboncz/job/imdb.tgz\" rel=\"nofollow\">are available</a>, but are malformed (don't conform to <a href=\"https://tools.ietf.org/html/rfc4180\" rel=\"nofollow\">https://tools.ietf.org/html/rfc4180</a>).<br>\nOne can fix them using tools like <a href=\"https://github.com/BurntSushi/xsv/releases/tag/0.13.0\" rel=\"nofollow\">xsv</a>,<br>\nbut this is we shall leave error handling for another section.</p>\n<h4>2. Extract files:</h4>\n<p><code>tar -xvzf imdb.tgz</code></p>\n<h4>3. Download SQL Create commands:</h4>\n<p><code>wget https://raw.githubusercontent.com/gregrahn/join-order-benchmark/master/schema.sql -O imdb.sql --no-check-certificate</code></p>\n<p>or</p>\n<p><code>curl https://raw.githubusercontent.com/gregrahn/join-order-benchmark/master/schema.sql --output imdb.sql</code></p>\n<h4>4. Create schema from sql statement</h4>\n<p><code>kit schema create -sql schema.sql &gt; imdb_schema.json</code></p>\n<h4>5. Apply schema on cluster</h4>\n<p>Assuming we already have a cluster, and we are signed in using az cli, we can just apply the schema on a database we choose:</p>\n<p><code>kit schema apply -f imdb_schema.json -h mycluster.westus -db imdb</code></p>\n<h4>6. Ingest data from local files</h4>\n<p><code>kit ingest -d . --pattern \"*.csv\" -h mycluster.westus -db imdb</code></p>\n<h4>7. Query</h4>\n<p>Using the Azure portal, you can now easily login and query your data.</p>\n<p>You can always make sure that data was loaded by comparing the source line count with target column count:</p>\n<p><code>xsv count aka_name.csv</code> - should show 901343 rows</p>\n<p>or</p>\n<p><code>wc -l aka_name.csv</code> - should show 901343 rows</p>\n<p>Query from kusto should show the same:</p>\n<p><code>kit count --table aka_name -h mycluster.westus -db imdb</code> - should show 901343</p>\n<p>And take a peek at the data:\n<code>kit peek --table aka_name -n 10 -h mycluster.westus -db imdb</code></p>\n<h3>Example 2 : Ingest Kaggle ML Datasets, CSV and JSON</h3>\n<p>Kaggale has tons of interesting dataset for ML/AI purposes.</p>\n<p>Let's try and ingest some:</p>\n<p><a href=\"https://www.kaggle.com/mlg-ulb/creditcardfraud/\" rel=\"nofollow\">https://www.kaggle.com/mlg-ulb/creditcardfraud/</a>\n<a href=\"https://www.kaggle.com/START-UMD/gtd/\" rel=\"nofollow\">https://www.kaggle.com/START-UMD/gtd/</a></p>\n<p>Uploaded to our azure storage for convenience:</p>\n<pre><code>wget https://imdb2013dataset.blob.core.windows.net/data/creditcard.csv.gz --no-check-certificate  \nwget https://imdb2013dataset.blob.core.windows.net/data/globalterrorism.csv.gz --no-check-certificate\nwget https://imdb2013dataset.blob.core.windows.net/data/arxivData.csv.gz --no-check-certificate\n</code></pre>\n<p>or</p>\n<pre><code>curl https://imdb2013dataset.blob.core.windows.net/data/creditcard.csv.gz --output creditcard.csv.gz\ncurl https://imdb2013dataset.blob.core.windows.net/data/globalterrorism.csv.gz --output globalterrorism.csv.gz   \ncurl https://imdb2013dataset.blob.core.windows.net/data/arxivData.json.gz --output arxivData.json.gz\n</code></pre>\n<p>Once downloaded and unzipped, same idea, only this time files contain headers, so schema is infered:</p>\n<p><code>kit ingest -d . -h mycluster.westus -db ml --headers</code></p>\n<h3>Example 3 : Complex nested JSON mappings</h3>\n<p>Let's look at a more advance use case:</p>\n<p><code>wget https://imdb2013dataset.blob.core.windows.net/data/demo.json --no-check-certificate</code></p>\n<p>or</p>\n<p><code>curl https://imdb2013dataset.blob.core.windows.net/data/demo.json --output demo.json</code></p>\n<p>Say our data is a json lines files, where each item looks like:</p>\n<p><code>{\"header\":{\"time\":\"24-Aug-18 09:42:15\", \"id\":\"0944f542-a637-411b-94dd-8874992d6ebc\", \"api_version\":\"v2\"}, \"payload\":{\"data\":\"NEEUGQSPIPKDPQPIVFE\", \"user\":\"owild@fabrikam.com\"}}</code></p>\n<p>It seems that we have a nested object.\nBecause we are not sure what will happen, let's dry run.\nLet's try and <code>--dry</code> run an ingestion with <code>--object-depth 2</code>.</p>\n<p><code>kit ingest -f demo.json --object-depth 2 -h mycluster.westus -db ml --dry &gt; manifest.json</code></p>\n<p>This produces the following <code>manifest.json</code> which contains the operations to be executed.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"databases\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ml\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"tables\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"mappings\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"demo_from_json\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"columns\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n          <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header.time\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">},</span>\n          <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header.time\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n          <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header.id\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">},</span>\n          <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header.id\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n          <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header.api_version\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">},</span>\n          <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header.api_version\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n          <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"payload.data\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">},</span>\n          <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"payload.data\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n          <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"payload.user\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">},</span>\n          <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"payload.user\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"index\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"operations\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"database\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ml\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"sources\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n          <span class=\"nt\">\"files\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"C:\\\\Users\\\\dadubovs\\\\temp\\\\ml_datasets\\\\demo.json\"</span>\n          <span class=\"p\">],</span>\n          <span class=\"nt\">\"mapping\"</span><span class=\"p\">:</span> <span class=\"s2\">\"demo_from_json\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"options\"</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n          <span class=\"nt\">\"data_format\"</span><span class=\"p\">:</span> <span class=\"s2\">\"json\"</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"s2\">\"demo\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Now, let's say that we don't need the <code>id</code> field, we can edit the mapping and save it.</p>\n<p>If we are still unsure, and want to get a better understanding are the commands that will be created, we can inspect the kql</p>\n<p><code>kit kql -m manifest.json</code></p>\n<p>Which should output something like:</p>\n<pre><code>// Table Creation Commands:\n.create table demo (['header.time']:string,['header.api_version']:string,['payload.data']:string,['payload.user']:string)\n\n// Ingestion Mapping Creation Commands:\n.create table demo ingestion json mapping \"demo_from_json\" '[{\"column\":\"header.time\",\"path\":\"$.header.time\",\"datatype\":\"string\"},{\"column\":\"header.api_version\",\"path\":\"$.header.api_version\",\"datatype\":\"string\"},{\"column\":\"payload.data\",\"path\":\"$.payload.data\",\"datatype\":\"string\"},{\"column\":\"payload.user\",\"path\":\"$.payload.user\",\"datatype\":\"string\"}]'\n</code></pre>\n<p>Once we are ready, we can resume our ingestion based on the manifest</p>\n<p><code>kit ingest -m manifest.json -h mycluster.westus</code></p>\n\n          </div>"}, "last_serial": 5420278, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6c0c9497d75919527bdfc37fe3719b16", "sha256": "a45110210079b2c1277ee24740b7af9ebd97108ee6550e1874fab387f354a4f2"}, "downloads": -1, "filename": "azure-kusto-ingestion-tools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6c0c9497d75919527bdfc37fe3719b16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18363, "upload_time": "2019-06-03T12:54:08", "upload_time_iso_8601": "2019-06-03T12:54:08.953296Z", "url": "https://files.pythonhosted.org/packages/1d/1a/fbe26fcd092efcddb9273c7ecc6359d107f57838fc45f10dd71a61d9980a/azure-kusto-ingestion-tools-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "37eaf4b1f4d488eb555c639ef4caad33", "sha256": "a56781e41cd5bdd41f2b5e860a5e7cda5d7f0085f75e9c25ef7eb7f1729d1d4e"}, "downloads": -1, "filename": "azure-kusto-ingestion-tools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "37eaf4b1f4d488eb555c639ef4caad33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23127, "upload_time": "2019-06-13T13:58:06", "upload_time_iso_8601": "2019-06-13T13:58:06.367419Z", "url": "https://files.pythonhosted.org/packages/40/b8/34ac3c2bd6136bd5836d13b91e310c0b3aafe65283ea69c62d8443b1f0db/azure-kusto-ingestion-tools-0.2.0.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "9d0cac78a1ee4b220a31f836dcb742c9", "sha256": "f56b31a120e9f495285e9e45170fd2bc62d695c31b46a19a6c3c223d06853c8b"}, "downloads": -1, "filename": "azure-kusto-ingestion-tools-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9d0cac78a1ee4b220a31f836dcb742c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24440, "upload_time": "2019-06-13T14:16:39", "upload_time_iso_8601": "2019-06-13T14:16:39.480695Z", "url": "https://files.pythonhosted.org/packages/d8/7e/a54600a625dfa6608110eebdf943db7c4dba33f1d57dd5e2cab74b42bcd0/azure-kusto-ingestion-tools-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ac684b19eea91ef7a5acc8353b67febe", "sha256": "fb7d4c615884ebdaa66a558a483773171271b2d90dd75d93fc9a8db187f7bcdd"}, "downloads": -1, "filename": "azure-kusto-ingestion-tools-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ac684b19eea91ef7a5acc8353b67febe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24746, "upload_time": "2019-06-18T09:02:15", "upload_time_iso_8601": "2019-06-18T09:02:15.478573Z", "url": "https://files.pythonhosted.org/packages/56/d5/0acda91fa7a70e9c98b1e4b6e9bddd2fb0c2468394e76467711a2048d753/azure-kusto-ingestion-tools-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "fa99f27048706232cd482c951900e009", "sha256": "fee1bb71cf9f9a9421ea16fd216b78c37889b644100166d7bfa1b20aa982afc8"}, "downloads": -1, "filename": "azure-kusto-ingestion-tools-0.3.1.tar.gz", "has_sig": false, "md5_digest": "fa99f27048706232cd482c951900e009", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24861, "upload_time": "2019-06-19T13:33:35", "upload_time_iso_8601": "2019-06-19T13:33:35.420341Z", "url": "https://files.pythonhosted.org/packages/b0/72/f2f6844c77de934ba06cbabe6df4022f2653f224f5540238f1c7674a4ce4/azure-kusto-ingestion-tools-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa99f27048706232cd482c951900e009", "sha256": "fee1bb71cf9f9a9421ea16fd216b78c37889b644100166d7bfa1b20aa982afc8"}, "downloads": -1, "filename": "azure-kusto-ingestion-tools-0.3.1.tar.gz", "has_sig": false, "md5_digest": "fa99f27048706232cd482c951900e009", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24861, "upload_time": "2019-06-19T13:33:35", "upload_time_iso_8601": "2019-06-19T13:33:35.420341Z", "url": "https://files.pythonhosted.org/packages/b0/72/f2f6844c77de934ba06cbabe6df4022f2653f224f5540238f1c7674a4ce4/azure-kusto-ingestion-tools-0.3.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:20 2020"}