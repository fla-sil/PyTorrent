{"info": {"author": "Christian Maugg", "author_email": "software@christianmaugg.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries"], "description": "``pystatemachine``\n==================\n\n``pystatemachine`` is a versatile, yet easy-to-use finite-state machine\nlibrary written in python. It provides functions to turn any python\nobject into a finite-state automaton which changes from one ``State`` to\nanother when initiated by a triggering ``event``.\n\nUsage\n=====\n\nA finite-state machine is defined by a list of its states, and the\ntriggering condition for each transition. ``pystatemachine`` offers an\n``event`` decorator for a classes' bound methods, a ``State`` class to\ndefine the finite-state machine's states, and a\n``acts_as_state_machine`` decorator for turning any python (new- or\nold-style) class into a finite-state machine. By default, any\n``event``-decorated method may raise errors. Optionally, a\n``transition_failure_handler`` decorator turns any class method into a\nfailure handler which gets invoked when an ``event``-decorated method\nraises an error.\n\nExample\n=======\n\nFollowing, a turnstile is modeled.\n\n    An example of a very simple mechanism that can be modeled by a state\n    machine is a turnstile. A turnstile is a gate with three rotating\n    arms at waist height, one across the entryway. Initially the arms\n    are locked, barring the entry, preventing customers from passing\n    through. Depositing a coin or token in a slot on the turnstile\n    unlocks the arms, allowing a single customer to push through. After\n    the customer passes through, the arms are locked again until another\n    coin is inserted. - from [Wikipedia]\n    (http://en.wikipedia.org/wiki/Finite-state\\_machine#Example:\\_a\\_turnstile)\n\n.. code:: python\n\n    @acts_as_state_machine\n    class Turnstile(object):\n        locked = State('locked', initial=True)\n        unlocked = State('unlocked')\n\n        @event(from_states=(locked, unlocked), to_state=unlocked)\n        def coin(self):\n            assert random.random() > .5, 'failing for demonstration purposes, only ..'\n            print('*blingbling* .. unlocked!')\n\n        @event(from_states=(locked, unlocked), to_state=locked)\n        def push(self):\n            print('*push* .. locked!')\n\n        @transition_failure_handler(calling_sequence=2)\n        def turnstile_malfunction(self, method, from_state, to_state, error):\n            print('state transition from {0.name} to {1.name} failed. Reason: {2}'.format(from_state, to_state, error))\n\n        @transition_failure_handler(calling_sequence=1)\n        def before_turnstile_malfunction(self, method, from_state, to_state, error):\n            print('before state transition failure handler ..')\n\n\n    import random\n\n    turnstile = Turnstile()\n    for _ in range(10):\n        handler = random.choice([turnstile.coin, turnstile.push])\n        handler()\n\nChangelog\n=========\n\n1.2\n---\n\n-  exceptions in an event-decorated function are now reraised when no\n   transition failure handler was registered\n\n1.1\n---\n\n-  added a decorator for registering a class' method as exception\n   handler when an 'event'-decorated method fails. multiple methods may\n   be registered as transition failure handler: they are invoked in the\n   order given by the optional 'calling\\_sequence' keyword\n\n1.0\n---\n\n-  first public release\n\nLicense\n=======\n\n``pystatemachine`` is available under `MIT\nLicense <https://github.com/cmaugg/pystatemachine/raw/master/LICENSE.txt>`__.\n\nDownload\n========\n\nYou can download\n`pystatemachine.py <https://github.com/cmaugg/pystatemachine/raw/master/pystatemachine.py>`__.\n\nAlternatively:\n\n::\n\n    git clone git@github.com:cmaugg/pystatemachine", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/cmaugg/pystatemachine/tarball/1.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cmaugg/pystatemachine", "keywords": "state finite-state machine automaton", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pystatemachine", "package_url": "https://pypi.org/project/pystatemachine/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pystatemachine/", "project_urls": {"Download": "https://github.com/cmaugg/pystatemachine/tarball/1.2", "Homepage": "https://github.com/cmaugg/pystatemachine"}, "release_url": "https://pypi.org/project/pystatemachine/1.2/", "requires_dist": null, "requires_python": null, "summary": "Simple Finite-State Machines", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pystatemachine\">\n<h2><tt>pystatemachine</tt></h2>\n<p><tt>pystatemachine</tt> is a versatile, yet easy-to-use finite-state machine\nlibrary written in python. It provides functions to turn any python\nobject into a finite-state automaton which changes from one <tt>State</tt> to\nanother when initiated by a triggering <tt>event</tt>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>A finite-state machine is defined by a list of its states, and the\ntriggering condition for each transition. <tt>pystatemachine</tt> offers an\n<tt>event</tt> decorator for a classes\u2019 bound methods, a <tt>State</tt> class to\ndefine the finite-state machine\u2019s states, and a\n<tt>acts_as_state_machine</tt> decorator for turning any python (new- or\nold-style) class into a finite-state machine. By default, any\n<tt>event</tt>-decorated method may raise errors. Optionally, a\n<tt>transition_failure_handler</tt> decorator turns any class method into a\nfailure handler which gets invoked when an <tt>event</tt>-decorated method\nraises an error.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Following, a turnstile is modeled.</p>\n<blockquote>\nAn example of a very simple mechanism that can be modeled by a state\nmachine is a turnstile. A turnstile is a gate with three rotating\narms at waist height, one across the entryway. Initially the arms\nare locked, barring the entry, preventing customers from passing\nthrough. Depositing a coin or token in a slot on the turnstile\nunlocks the arms, allowing a single customer to push through. After\nthe customer passes through, the arms are locked again until another\ncoin is inserted. - from [Wikipedia]\n(<a href=\"http://en.wikipedia.org/wiki/Finite-state_machine#Example:_a_turnstile\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Finite-state_machine#Example:_a_turnstile</a>)</blockquote>\n<pre><span class=\"nd\">@acts_as_state_machine</span>\n<span class=\"k\">class</span> <span class=\"nc\">Turnstile</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">locked</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"s1\">'locked'</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">unlocked</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"s1\">'unlocked'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@event</span><span class=\"p\">(</span><span class=\"n\">from_states</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">locked</span><span class=\"p\">,</span> <span class=\"n\">unlocked</span><span class=\"p\">),</span> <span class=\"n\">to_state</span><span class=\"o\">=</span><span class=\"n\">unlocked</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">coin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'failing for demonstration purposes, only ..'</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'*blingbling* .. unlocked!'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@event</span><span class=\"p\">(</span><span class=\"n\">from_states</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">locked</span><span class=\"p\">,</span> <span class=\"n\">unlocked</span><span class=\"p\">),</span> <span class=\"n\">to_state</span><span class=\"o\">=</span><span class=\"n\">locked</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'*push* .. locked!'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@transition_failure_handler</span><span class=\"p\">(</span><span class=\"n\">calling_sequence</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">turnstile_malfunction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">from_state</span><span class=\"p\">,</span> <span class=\"n\">to_state</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'state transition from </span><span class=\"si\">{0.name}</span><span class=\"s1\"> to </span><span class=\"si\">{1.name}</span><span class=\"s1\"> failed. Reason: </span><span class=\"si\">{2}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">from_state</span><span class=\"p\">,</span> <span class=\"n\">to_state</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@transition_failure_handler</span><span class=\"p\">(</span><span class=\"n\">calling_sequence</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">before_turnstile_malfunction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">from_state</span><span class=\"p\">,</span> <span class=\"n\">to_state</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'before state transition failure handler ..'</span><span class=\"p\">)</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"n\">turnstile</span> <span class=\"o\">=</span> <span class=\"n\">Turnstile</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"n\">turnstile</span><span class=\"o\">.</span><span class=\"n\">coin</span><span class=\"p\">,</span> <span class=\"n\">turnstile</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">])</span>\n    <span class=\"n\">handler</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.2</h3>\n<ul>\n<li>exceptions in an event-decorated function are now reraised when no\ntransition failure handler was registered</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.1</h3>\n<ul>\n<li>added a decorator for registering a class\u2019 method as exception\nhandler when an \u2018event\u2019-decorated method fails. multiple methods may\nbe registered as transition failure handler: they are invoked in the\norder given by the optional \u2018calling_sequence\u2019 keyword</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0</h3>\n<ul>\n<li>first public release</li>\n</ul>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><tt>pystatemachine</tt> is available under <a href=\"https://github.com/cmaugg/pystatemachine/raw/master/LICENSE.txt\" rel=\"nofollow\">MIT\nLicense</a>.</p>\n</div>\n<div id=\"download\">\n<h2>Download</h2>\n<p>You can download\n<a href=\"https://github.com/cmaugg/pystatemachine/raw/master/pystatemachine.py\" rel=\"nofollow\">pystatemachine.py</a>.</p>\n<p>Alternatively:</p>\n<pre>git clone git@github.com:cmaugg/pystatemachine\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1504585, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "e7dfe10e2ba1ea49a7b3570720907b00", "sha256": "dd54af4b661104b2bfa5d8fd70c39765a26cca25e8e69c5cc347279b3cf41e5d"}, "downloads": -1, "filename": "pystatemachine-1.0.zip", "has_sig": false, "md5_digest": "e7dfe10e2ba1ea49a7b3570720907b00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7906, "upload_time": "2015-04-08T14:11:24", "upload_time_iso_8601": "2015-04-08T14:11:24.416333Z", "url": "https://files.pythonhosted.org/packages/06/a9/19d3679b617eafdd436630dcc01716d73646623ff66077bde7b97e7e9a8f/pystatemachine-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "290b4d7e61b59065744a9efcc9de8abf", "sha256": "6acb80acdbb0453680fc9c46e8f68fc251cbceae9adf19def8999513c70bfee1"}, "downloads": -1, "filename": "pystatemachine-1.1.zip", "has_sig": false, "md5_digest": "290b4d7e61b59065744a9efcc9de8abf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9217, "upload_time": "2015-04-13T10:04:20", "upload_time_iso_8601": "2015-04-13T10:04:20.238793Z", "url": "https://files.pythonhosted.org/packages/a3/75/42715f2542867e4d0778b034d5832b4136b893fb1dfcbe0fcbd3bd6242a5/pystatemachine-1.1.zip", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "5cf8dba7e04c8f55f3508b0a3c0616d8", "sha256": "37601cdd388d15690e6e1d1fc1720e27f011a16e19c31c7c2b5a1d8078a206c0"}, "downloads": -1, "filename": "pystatemachine-1.2.zip", "has_sig": false, "md5_digest": "5cf8dba7e04c8f55f3508b0a3c0616d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9836, "upload_time": "2015-04-14T09:36:30", "upload_time_iso_8601": "2015-04-14T09:36:30.040310Z", "url": "https://files.pythonhosted.org/packages/ba/42/5d8c4601e6b69b8583b449a8a94148bac2e6fe6c8b74bee00145e94839db/pystatemachine-1.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5cf8dba7e04c8f55f3508b0a3c0616d8", "sha256": "37601cdd388d15690e6e1d1fc1720e27f011a16e19c31c7c2b5a1d8078a206c0"}, "downloads": -1, "filename": "pystatemachine-1.2.zip", "has_sig": false, "md5_digest": "5cf8dba7e04c8f55f3508b0a3c0616d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9836, "upload_time": "2015-04-14T09:36:30", "upload_time_iso_8601": "2015-04-14T09:36:30.040310Z", "url": "https://files.pythonhosted.org/packages/ba/42/5d8c4601e6b69b8583b449a8a94148bac2e6fe6c8b74bee00145e94839db/pystatemachine-1.2.zip", "yanked": false}], "timestamp": "Fri May  8 02:56:00 2020"}