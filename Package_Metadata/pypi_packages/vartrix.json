{"info": {"author": "Reuben Rusk", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# vartrix\n\nVartrix is about managing and automating parameters used in code. The name 'vartrix' is short for 'variable tricks'.\n\nYou might like vartrix if:\n\n* You're worried about the growing complexity of all the parameters in your code and you'd like to use a robust, scalable approach from the start.\n* Tracking all the parameters in your code has become difficult.\n* You need parameters to be traceable so you are confident that the right ones are used\n* You need to change parameters in a simple, robust and traceable way to ensure you haven't got an undetected coding error.\n* You need to be able to snapshot parameters and store them.\n* You've created ugly, fragile code to step through sets of parameters and run bits of code for each set.\n* You pass around a lot of parameters between classes in your code, making it bloated, difficult to maintain, and fragile\n\n\n## Quickstart tutorial - basic usage\n\nInstall using:\n\n```\npip install vartrix\n```\n\nThen in your code, import vartrix to get started:\n\n```python\nimport vartrix\n```\n\n### Containers\nA container is a dictionary-like object that contains a set of parameters. The keys are 'dotkeys'. For example, 'a.b.c', or 'subpackage.module.class.key'.\n\nThere are a few ways to set up containers. First, from a nested dictionary:\n```python\ndct = {'A': {'apple': 5, 'banana': 7, 'grape': 11},\n\t   'B': {'fig': 13, 'pear': 17, 'orange': 19}}\ncontainer = vartrix.Container(dct)\nprint(container)\n# {'A.apple': 5, 'A.banana': 7, 'A.grape': 11, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\n```\n\nFrom a flat ('dotkey') dictionary:\n```python\ndct = {'A.apple': 5, 'A.banana': 7, 'A.grape': 11,\n\t   'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\ncontainer = vartrix.Container(dct)\nprint(container)\n# {'A.apple': 5, 'A.banana': 7, 'A.grape': 11, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\n```\n\nYou can use any dictionary to set up the Container.\n\n### Name spaces\n\nUsually, we set containers up using a Name_Space instance. You can use the default:\n```python\ncontainer = vartrix.get_container('example_name')\n```\n\nOr, set up your own:\n```python\nns = vartrix.Name_Space()\ncontainer = ns.create('example_name_2', dct=dct)\n```\n\nInitialise it with a dictionary, like the above, or load one into it. A short way to set up a container is like this, as new containers are created if required:\n```python\nns['tutorial_1'].load(dct)\n```\n\n\n### Views\nFor large containers with multiple levels, it's much easier to deal with a View of a specific set of the dotkeys. Views allow the values for those dotkeys to be accessed without the preceeding levels of the key. For example:\n\n```python\nview_A = vartrix.View(ns['tutorial_1'], dotkeys='A')\nprint(view_A)\n# {'apple': 5, 'banana': 7, 'grape': 11}\n```\n\nViews have both dictionary-style key access and attribute-style access:\n```python\nprint(view_A['apple'])\n# 5\nprint(view_A.apple)\n# 5\n```\n\nYou can use them in a class like this:\n```python\nclass B():\n\tdef __init__(self):\n\t\tself.params = vartrix.View(ns['tutorial_1'], dotkeys=['B'])\n\nb = B()\nprint(b.params)\n# {'fig': 13, 'pear': 17, 'orange': 19}\n```\n\nYou can pass in the object instead. It will automatically remove the package name or `__main__` prefix on the class names. It automatically includes base classes so inheritance works.\n\n```python\nclass A():\n\tdef __init__(self):\n\t\tself.params = vartrix.View(ns['tutorial_1'], obj=self)\n\t\t# Class A objects have signature 'tutorial_1.A'\na = A()\nprint(a.params)\n# {'apple': 5, 'banana': 7, 'grape': 11}\n```\n \nYou can use multiple dotkeys:\n```python\nclass Combined():\n\tdef __init__(self):\n\t\tself.params = vartrix.View(ns['tutorial_1'], dotkeys=['A', 'B'])\nc = Combined()\nprint(c.params)\n# {'A.apple': 5, 'A.banana': 7, 'A.grape': 11, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\n```\n\t\n\t\n### Remote updates\nThe views are automatically updated with changes from their associated container. Let's first make a view and get a reference to the container:\n\n```python\na = A()\ncontainer = ns['tutorial_1']\n```\n\nLet's update the 'A.apple' value using setitem style:\n```python\ncontainer['A.apple'] = 101\nprint(container['A.apple'])\n# 101\nprint(a.params['apple'])\n# 101\n```\n\nWe can use the 'set' method:\n```python\ncontainer.set('A.apple', 102)\nprint(container['A.apple'])\n# 102\n```python\n\nUse the `lset` method for dotkets as lists of strings:\n```python\ncontainer.lset(['A', 'apple'], 103)\nprint(container['A.apple'])\n# 103\n```\n\nAnd use the `dset` method to set a range of values using a dictionary of dotkeys:\n```python\n{'A.apple': 103, 'A.banana': 7, 'A.grape': 11, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\ncontainer.dset({'A.apple': 104, 'A.grape': 201})\nprint(container)\n{'A.apple': 104, 'A.banana': 7, 'A.grape': 201, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\n```\n\n### Preventing updating\nIf you don't want a view to update, set the `live` attribute to False, like this:\n```python\na.params.live = False\ncontainer.dset({'A.apple': 111, 'A.grape': 222})\nprint(container)\n# {'A.apple': 111, 'A.banana': 7, 'A.grape': 222, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\nprint(a.params)\n# {'apple': 104, 'banana': 7, 'grape': 201}\n```\n\nCall the `refresh()` method to manually refresh non-live Views. They automatically refresh when they are set back to live:\n```python\na.params.live = True\nprint(a.params)\n# {'apple': 111, 'banana': 7, 'grape': 222}\n```\n\n\nLive views stay up to date with the container, even when keys are added or removed:\n```python\nbackup = container.copy()\ndct = {'A.apple': 77, 'A.banana': 87, 'A.grape': 91, 'A.pineapple': 55,\n\t   'B.fig': 102, 'B.pear': 150, 'B.orange': 300}\ncontainer.load(dct)\nprint(a.params)\n# {'apple': 77, 'banana': 87, 'grape': 91, 'pineapple': 55}\ncontainer.load(backup)\nprint(a.params)\n# {'apple': 111, 'banana': 7, 'grape': 222}\n```\n\nTo only set values temporarily, use the context manager:\n```python\nprint(container)\n# {'A.apple': 111, 'A.banana': 7, 'A.grape': 222, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\nd = {'A.apple': 555, 'B.orange': -7}\nwith container.context(d):\n\tprint(container)\n\t# {'A.apple': 555, 'A.banana': 7, 'A.grape': 222, 'B.fig': 13, 'B.pear': 17, 'B.orange': -7}\nprint(container)\n# {'A.apple': 111, 'A.banana': 7, 'A.grape': 222, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\n```\n\n\n### View updates\nSometimes, it's more convenient to set values on a view. This works in a similar way. Values set on a live view are reflected in the container, and all other linked views.\n\nUse a setitem style:\n```python\na.params['apple'] = 1001\nprint(container['A.apple'])\n# 1001\nprint(a.params['apple'])\n# 1001\n```\n\nThe `set` method:\n```python\na.params.set('apple', 1002)\nprint(container['A.apple'])\n# 1002\nprint(a.params['apple'])\n# 1002\n```\n\nOr the `dset` method for multiple key-value pairs:\n```python\na.params.dset({'apple': 1003, 'grape': 2002})\nprint(container)\n# {'A.apple': 1003, 'A.banana': 7, 'A.grape': 2002, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}\nprint(a.params)\n# {'apple': 1003, 'banana': 7, 'grape': 2002}\n```\n\t\nUse the context manager to set values temporarily:\n```python\nprint(a.params)\n# {'apple': 1003, 'banana': 7, 'grape': 2002}\nd2 = {'apple': 400, 'grape': 1000}\nwith a.params.context(d2):\n\tprint(a.params)\n\t# {'apple': 400, 'banana': 7, 'grape': 1000}\nprint(a.params)\n# {'apple': 1003, 'banana': 7, 'grape': 2002}\n```\n\n## Quickstart tutorial - automation\n\n### Setup\n\nLet's set up a function to make a very simple Container first:\n```python\nimport vartrix\n\nns = vartrix.Name_Space()\n\ndef setup_container():\n    dct = {'A': {'apple': 1},\n           'B': {'orange': 2, 'fig': 3}}\n    container = ns['tutorial_2']\n    container.load(dct)\n```\n\nLet's run it and check it's worked:\n\n```python\nsetup_container()\nprint(ns['tutorial_2'])\n# {'A.apple': 1, 'B.orange': 2, 'B.fig': 3}\n```\n\n### Sequences\nNow, let's create a a set of automation parameters. They need to be a nested dictionary structure. We'll use a Yaml file to set them up.\n\ntutorial_2.yml\n```yaml\nset_1:\n    aliases:\n        alias_1: A.apple\n        alias_2: B.orange\n        alias_3: B.fig\n    vectors:\n        vec_1:\n            alias_1: [5, 10, 15]\n        vec_2:\n            labels:  ['a', 'b', 'c']\n            alias_2: [  2,   3,   4]\n            alias_3: [  6,   7,   8]\n    sequences:\n        seq_1:\n            method_a: [vec_1, vec_2]\n```\n\nThere are some key things about the structure:\n\n* The highest level is for each set. Only one set is run at a time. Each `set` is labeled by its its key. In this case, we have one set called `set_1`.\n* Each set needs three keys:\n    * **aliases:** A dictionary where keys are aliases - shorter names for possibly long entries in the container - and the values are the corresponding container keys. The values need to exist as keys in the container.\n\t* **vectors:** Dictionary where each key-value pair specifies a series of values. The aliases must exist in the `aliases` dictionary. There are multiple formats, as described below.\n\t* **sequences:** A dictionary where each key is the name of a sequence. Inside each sequence, there are keys that correspond to method names in the class that we're going to use for the automation. The values are lists of vector names that must exist in the `vectors` dictionary. The way they work is described below.\n\t\n#### How sequences work\nInside each sequence is a list of methods (the keys) and their corresponding list of vector names. The automator takes the list of vector names and interates over their values in a nested fashion. For example, `[vec_1, vec_2]` means the outer loop iterates over the set of values in `vec_1`, while the inner loop iterates over the values in `vec_2`. There is no limit to how many vectors you use, but since the total number of steps in the overall sequence grows exponentially, don't use too many.\n\n#### Vectors\nVectors specify what values to iterate over for one or more aliases. There are many ways to specify them, as described below.\n\n**Simple vector.** Labels of [0, 1, 2] will be automatically created. The `style` key-value pair is optional for this style.\n```yaml\n        vec_1:\n            style: value_lists\n            alias_1: [5, 10, 15]\n```\n\n**Value lists.** Here, we'll specify the labels in a separate vector. On the first iteration, the first values of each vector will be used. The second iteration will use the second values, and so on. The `style` key-value pair is optional for this style.\n```yaml\n        vec_2:\n            style: value_lists\n            labels:  ['a', 'b', 'c']\n            alias_2: [  2,   3,   4]\n            alias_3: [  6,   7,   8]\n```\n\n**Value dictionaries.** We could achieve the same `vec_2` as above using the format below:\n```yaml\n        vec_2:\n            style: value_dictionaries\n            a:  {alias_2: 2, alias_3: 6},\n            b:  {alias_2: 3, alias_3: 7},\n            c:  {alias_2: 4, alias_3: 8},\n```\n\n**Csv file.** We could achieve the same `vec_2` as above using a csv file combined with the format below. The filename is joined with the path at `vartrix.automate.root`, which can be set by calling `vartrix.automate.set_root(path)`.\n```yaml\n        vec_2:\n            style: csv\n            filename: tutorial_2.csv\n```\n\ntutorial_2.csv:\n\nindex | alias_2 | alias_3\n----- | ------- | -------\n'a' | 2 | 6\n'b' | 3 | 7\n'c' | 4 | 8\n\n\n**Custom.** You can even use your own vector interpreter. Here's how:\n* Inherit `vartrix.automate.Vector` and define a method called `setup`. It needs to accept one argument - a dictionary of data that excludes the `style` key-value pair. It needs to return a list of labels (strings), and a list of dictionaries that contain key-value pairs for the aliases and thier corresponding values (e.g. `[{'alias_1': 4, 'alias_2': 5}, {'alias_1': 8, 'alias_2': 9}]`).\n* Add your style, by calling `vartrix.automate.Vector_Factor.set_style(style_name, vec_cls)`. The *style_name* is a string you specify. The *vec_cls* is the class you just created.\n* Use *style_name* as the `style` value for any vectors that use your new style.\n \n\n\n#### Initialisation\n\nTo initialise, just pass in a Container instance and the filename to load from:\n\n```python\nimport os\nroot = os.path.dirname(__file__)\nfname = os.path.join(root, 'tutorial_2.yml')\nautomator = vartrix.Automator(ns['tutorial_2'], fname)\n```\n\n### Automated classes\n\nThe vartrix Automator calls the method(s) specified in each sequence at each iteration through the nested vector loops. In addition, there are several methods that provide hooks:\n\n* prepare(): Called at the start of the set\n* prepare_sequence(seq_name): Called at the start of each sequence\n* prepare_method(method_name): Called before starting to call `method_name` at each iteration\n* method_name(seq_name, val_dct, label_dct): The only required method - the name must match that in the sequence dictionary.\n* finish_method(method_name): Called after after calling `method_name` at each iteration\n* finish_sequence(seq_name): Called at the end of each sequence\n* finish(): Called at the end of the set\n\nFor this tutorial, we'll create a simple automated class like this:\n\n```python\nclass Automated():\n    def __init__(self):\n        self.params = vartrix.View(ns['tutorial_2'], dotkeys=['A', 'B'])\n        \n    def prepare(self):\n        print('preparing...')\n\n    def prepare_sequence(self, seq_name):\n        print('running sequence: ' + seq_name)\n\n    def prepare_method(self, method_name):\n        print('running method: ' + method_name)\n\n    def method_a(self, seq_name, val_dct, label_dct):\n        print('calling method_a:')\n        print('current labels: ' + str(label_dct))\n        print('current params: ' + str(self.params))\n\n    def finish_method(self, method_name):\n        print('finishing method: ' + method_name)\n\n    def finish_sequence(self, seq_name):\n        print('finishing sequence: ' + seq_name)\n\n    def finish(self):\n        self.finish = True\n```\n\n### Execution\n\nNow for the easy part. We can simply create an instance of our Automated class and pass it into the automator with the set name.\n\n```python\nautomated = Automated()\nautomator.run('set_1', automated)\n```\n\nThe output looks like this:\n```python\npreparing...\nrunning sequence: seq_1\nrunning method: method_a\ncalling method_a:\ncurrent labels: {'vec_1': 0, 'vec_2': 'a'}\ncurrent params: {'apple': 5, 'orange': 2, 'fig': 6}\ncalling method_a:\ncurrent labels: {'vec_1': 0, 'vec_2': 'b'}\ncurrent params: {'apple': 5, 'orange': 3, 'fig': 7}\ncalling method_a:\ncurrent labels: {'vec_1': 0, 'vec_2': 'c'}\ncurrent params: {'apple': 5, 'orange': 4, 'fig': 8}\ncalling method_a:\ncurrent labels: {'vec_1': 1, 'vec_2': 'a'}\ncurrent params: {'apple': 10, 'orange': 2, 'fig': 6}\ncalling method_a:\ncurrent labels: {'vec_1': 1, 'vec_2': 'b'}\ncurrent params: {'apple': 10, 'orange': 3, 'fig': 7}\ncalling method_a:\ncurrent labels: {'vec_1': 1, 'vec_2': 'c'}\ncurrent params: {'apple': 10, 'orange': 4, 'fig': 8}\ncalling method_a:\ncurrent labels: {'vec_1': 2, 'vec_2': 'a'}\ncurrent params: {'apple': 15, 'orange': 2, 'fig': 6}\ncalling method_a:\ncurrent labels: {'vec_1': 2, 'vec_2': 'b'}\ncurrent params: {'apple': 15, 'orange': 3, 'fig': 7}\ncalling method_a:\ncurrent labels: {'vec_1': 2, 'vec_2': 'c'}\ncurrent params: {'apple': 15, 'orange': 4, 'fig': 8}\nfinishing method: method_a\nfinishing sequence: seq_1\n```\n\nThe values in the Container are changed automatically by the Automator before calling `method_a`. But, the automator also passes in `val_dct`, a dictionary of automated key-value pairs, in case they are convenient. It's also often desirable to have shorter, simpler labels at each iteration for each vector, and the automator passes in `label_dct` for that purpose as well.\n\nIf we want to change the way we automate the parameters, now we only need to change the specification in our yaml file (`tutorial_2.yml`) - there's no need for manual coding of the automation. This approach has a number of advantages:\n\n* Faster creation of iterative sequences\n* Fewer mistakes\n* Easier management of parameters\n* Full traceability of how parameters are changed\n* Flexble, loosely coupled code. The classes that use the values in the Container need no knowledge of the automation, and the automation needs no knowledge of them.\n\n\n## Related packages\n\nOther packages exist that overlap with vartrix in functionality. You might want to look at:\n\n* parameters\n* param\n* paranormal\n* traits\n* traitlets\n* attrs\n* pypet", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/pythoro/vartrix/archive/v0.0.9.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pythoro/vartrix.git", "keywords": "PARAMETERS,VARIABLES,PARAMETRIC,AUTOMATION,AUTOMATE", "license": "", "maintainer": "", "maintainer_email": "", "name": "vartrix", "package_url": "https://pypi.org/project/vartrix/", "platform": "", "project_url": "https://pypi.org/project/vartrix/", "project_urls": {"Download": "https://github.com/pythoro/vartrix/archive/v0.0.9.zip", "Homepage": "https://github.com/pythoro/vartrix.git"}, "release_url": "https://pypi.org/project/vartrix/0.0.9/", "requires_dist": null, "requires_python": "", "summary": "Easily manange and automate variables and parameters.", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>vartrix</h1>\n<p>Vartrix is about managing and automating parameters used in code. The name 'vartrix' is short for 'variable tricks'.</p>\n<p>You might like vartrix if:</p>\n<ul>\n<li>You're worried about the growing complexity of all the parameters in your code and you'd like to use a robust, scalable approach from the start.</li>\n<li>Tracking all the parameters in your code has become difficult.</li>\n<li>You need parameters to be traceable so you are confident that the right ones are used</li>\n<li>You need to change parameters in a simple, robust and traceable way to ensure you haven't got an undetected coding error.</li>\n<li>You need to be able to snapshot parameters and store them.</li>\n<li>You've created ugly, fragile code to step through sets of parameters and run bits of code for each set.</li>\n<li>You pass around a lot of parameters between classes in your code, making it bloated, difficult to maintain, and fragile</li>\n</ul>\n<h2>Quickstart tutorial - basic usage</h2>\n<p>Install using:</p>\n<pre><code>pip install vartrix\n</code></pre>\n<p>Then in your code, import vartrix to get started:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">vartrix</span>\n</pre>\n<h3>Containers</h3>\n<p>A container is a dictionary-like object that contains a set of parameters. The keys are 'dotkeys'. For example, 'a.b.c', or 'subpackage.module.class.key'.</p>\n<p>There are a few ways to set up containers. First, from a nested dictionary:</p>\n<pre><span class=\"n\">dct</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'banana'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'grape'</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">},</span>\n\t   <span class=\"s1\">'B'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">'pear'</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">}}</span>\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">Container</span><span class=\"p\">(</span><span class=\"n\">dct</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'A.apple': 5, 'A.banana': 7, 'A.grape': 11, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}</span>\n</pre>\n<p>From a flat ('dotkey') dictionary:</p>\n<pre><span class=\"n\">dct</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'A.apple'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'A.banana'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'A.grape'</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n\t   <span class=\"s1\">'B.fig'</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">'B.pear'</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"s1\">'B.orange'</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">}</span>\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">Container</span><span class=\"p\">(</span><span class=\"n\">dct</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'A.apple': 5, 'A.banana': 7, 'A.grape': 11, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}</span>\n</pre>\n<p>You can use any dictionary to set up the Container.</p>\n<h3>Name spaces</h3>\n<p>Usually, we set containers up using a Name_Space instance. You can use the default:</p>\n<pre><span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">get_container</span><span class=\"p\">(</span><span class=\"s1\">'example_name'</span><span class=\"p\">)</span>\n</pre>\n<p>Or, set up your own:</p>\n<pre><span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">Name_Space</span><span class=\"p\">()</span>\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'example_name_2'</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"o\">=</span><span class=\"n\">dct</span><span class=\"p\">)</span>\n</pre>\n<p>Initialise it with a dictionary, like the above, or load one into it. A short way to set up a container is like this, as new containers are created if required:</p>\n<pre><span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">dct</span><span class=\"p\">)</span>\n</pre>\n<h3>Views</h3>\n<p>For large containers with multiple levels, it's much easier to deal with a View of a specific set of the dotkeys. Views allow the values for those dotkeys to be accessed without the preceeding levels of the key. For example:</p>\n<pre><span class=\"n\">view_A</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_1'</span><span class=\"p\">],</span> <span class=\"n\">dotkeys</span><span class=\"o\">=</span><span class=\"s1\">'A'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">view_A</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 5, 'banana': 7, 'grape': 11}</span>\n</pre>\n<p>Views have both dictionary-style key access and attribute-style access:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">view_A</span><span class=\"p\">[</span><span class=\"s1\">'apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 5</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">view_A</span><span class=\"o\">.</span><span class=\"n\">apple</span><span class=\"p\">)</span>\n<span class=\"c1\"># 5</span>\n</pre>\n<p>You can use them in a class like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">():</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_1'</span><span class=\"p\">],</span> <span class=\"n\">dotkeys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'B'</span><span class=\"p\">])</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'fig': 13, 'pear': 17, 'orange': 19}</span>\n</pre>\n<p>You can pass in the object instead. It will automatically remove the package name or <code>__main__</code> prefix on the class names. It automatically includes base classes so inheritance works.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">():</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_1'</span><span class=\"p\">],</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\t\t<span class=\"c1\"># Class A objects have signature 'tutorial_1.A'</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 5, 'banana': 7, 'grape': 11}</span>\n</pre>\n<p>You can use multiple dotkeys:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Combined</span><span class=\"p\">():</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_1'</span><span class=\"p\">],</span> <span class=\"n\">dotkeys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">])</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Combined</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'A.apple': 5, 'A.banana': 7, 'A.grape': 11, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}</span>\n</pre>\n<h3>Remote updates</h3>\n<p>The views are automatically updated with changes from their associated container. Let's first make a view and get a reference to the container:</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">()</span>\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_1'</span><span class=\"p\">]</span>\n</pre>\n<p>Let's update the 'A.apple' value using setitem style:</p>\n<pre><span class=\"n\">container</span><span class=\"p\">[</span><span class=\"s1\">'A.apple'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">101</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">[</span><span class=\"s1\">'A.apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 101</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 101</span>\n</pre>\n<p>We can use the 'set' method:</p>\n<pre><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'A.apple'</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">[</span><span class=\"s1\">'A.apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 102</span>\n<span class=\"err\">```</span><span class=\"n\">python</span>\n\n<span class=\"n\">Use</span> <span class=\"n\">the</span> <span class=\"err\">`</span><span class=\"n\">lset</span><span class=\"err\">`</span> <span class=\"n\">method</span> <span class=\"k\">for</span> <span class=\"n\">dotkets</span> <span class=\"k\">as</span> <span class=\"n\">lists</span> <span class=\"n\">of</span> <span class=\"n\">strings</span><span class=\"p\">:</span>\n<span class=\"err\">```</span><span class=\"n\">python</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">lset</span><span class=\"p\">([</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'apple'</span><span class=\"p\">],</span> <span class=\"mi\">103</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">[</span><span class=\"s1\">'A.apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 103</span>\n</pre>\n<p>And use the <code>dset</code> method to set a range of values using a dictionary of dotkeys:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'A.apple'</span><span class=\"p\">:</span> <span class=\"mi\">103</span><span class=\"p\">,</span> <span class=\"s1\">'A.banana'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'A.grape'</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"s1\">'B.fig'</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">'B.pear'</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"s1\">'B.orange'</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">}</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">dset</span><span class=\"p\">({</span><span class=\"s1\">'A.apple'</span><span class=\"p\">:</span> <span class=\"mi\">104</span><span class=\"p\">,</span> <span class=\"s1\">'A.grape'</span><span class=\"p\">:</span> <span class=\"mi\">201</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'A.apple'</span><span class=\"p\">:</span> <span class=\"mi\">104</span><span class=\"p\">,</span> <span class=\"s1\">'A.banana'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'A.grape'</span><span class=\"p\">:</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"s1\">'B.fig'</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">'B.pear'</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"s1\">'B.orange'</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">}</span>\n</pre>\n<h3>Preventing updating</h3>\n<p>If you don't want a view to update, set the <code>live</code> attribute to False, like this:</p>\n<pre><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">live</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">dset</span><span class=\"p\">({</span><span class=\"s1\">'A.apple'</span><span class=\"p\">:</span> <span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"s1\">'A.grape'</span><span class=\"p\">:</span> <span class=\"mi\">222</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'A.apple': 111, 'A.banana': 7, 'A.grape': 222, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 104, 'banana': 7, 'grape': 201}</span>\n</pre>\n<p>Call the <code>refresh()</code> method to manually refresh non-live Views. They automatically refresh when they are set back to live:</p>\n<pre><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">live</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 111, 'banana': 7, 'grape': 222}</span>\n</pre>\n<p>Live views stay up to date with the container, even when keys are added or removed:</p>\n<pre><span class=\"n\">backup</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">dct</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'A.apple'</span><span class=\"p\">:</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"s1\">'A.banana'</span><span class=\"p\">:</span> <span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"s1\">'A.grape'</span><span class=\"p\">:</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"s1\">'A.pineapple'</span><span class=\"p\">:</span> <span class=\"mi\">55</span><span class=\"p\">,</span>\n\t   <span class=\"s1\">'B.fig'</span><span class=\"p\">:</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"s1\">'B.pear'</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"s1\">'B.orange'</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">}</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">dct</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 77, 'banana': 87, 'grape': 91, 'pineapple': 55}</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">backup</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 111, 'banana': 7, 'grape': 222}</span>\n</pre>\n<p>To only set values temporarily, use the context manager:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'A.apple': 111, 'A.banana': 7, 'A.grape': 222, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'A.apple'</span><span class=\"p\">:</span> <span class=\"mi\">555</span><span class=\"p\">,</span> <span class=\"s1\">'B.orange'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">}</span>\n<span class=\"k\">with</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">)</span>\n\t<span class=\"c1\"># {'A.apple': 555, 'A.banana': 7, 'A.grape': 222, 'B.fig': 13, 'B.pear': 17, 'B.orange': -7}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'A.apple': 111, 'A.banana': 7, 'A.grape': 222, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}</span>\n</pre>\n<h3>View updates</h3>\n<p>Sometimes, it's more convenient to set values on a view. This works in a similar way. Values set on a live view are reflected in the container, and all other linked views.</p>\n<p>Use a setitem style:</p>\n<pre><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'apple'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1001</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">[</span><span class=\"s1\">'A.apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1001</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1001</span>\n</pre>\n<p>The <code>set</code> method:</p>\n<pre><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"mi\">1002</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">[</span><span class=\"s1\">'A.apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1002</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'apple'</span><span class=\"p\">])</span>\n<span class=\"c1\"># 1002</span>\n</pre>\n<p>Or the <code>dset</code> method for multiple key-value pairs:</p>\n<pre><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">dset</span><span class=\"p\">({</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">1003</span><span class=\"p\">,</span> <span class=\"s1\">'grape'</span><span class=\"p\">:</span> <span class=\"mi\">2002</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'A.apple': 1003, 'A.banana': 7, 'A.grape': 2002, 'B.fig': 13, 'B.pear': 17, 'B.orange': 19}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 1003, 'banana': 7, 'grape': 2002}</span>\n</pre>\n<p>Use the context manager to set values temporarily:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 1003, 'banana': 7, 'grape': 2002}</span>\n<span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s1\">'grape'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">}</span>\n<span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\t<span class=\"c1\"># {'apple': 400, 'banana': 7, 'grape': 1000}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'apple': 1003, 'banana': 7, 'grape': 2002}</span>\n</pre>\n<h2>Quickstart tutorial - automation</h2>\n<h3>Setup</h3>\n<p>Let's set up a function to make a very simple Container first:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">vartrix</span>\n\n<span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">Name_Space</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">setup_container</span><span class=\"p\">():</span>\n    <span class=\"n\">dct</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n           <span class=\"s1\">'B'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}}</span>\n    <span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_2'</span><span class=\"p\">]</span>\n    <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">dct</span><span class=\"p\">)</span>\n</pre>\n<p>Let's run it and check it's worked:</p>\n<pre><span class=\"n\">setup_container</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_2'</span><span class=\"p\">])</span>\n<span class=\"c1\"># {'A.apple': 1, 'B.orange': 2, 'B.fig': 3}</span>\n</pre>\n<h3>Sequences</h3>\n<p>Now, let's create a a set of automation parameters. They need to be a nested dictionary structure. We'll use a Yaml file to set them up.</p>\n<p>tutorial_2.yml</p>\n<pre><span class=\"nt\">set_1</span><span class=\"p\">:</span>\n    <span class=\"nt\">aliases</span><span class=\"p\">:</span>\n        <span class=\"nt\">alias_1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">A.apple</span>\n        <span class=\"nt\">alias_2</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">B.orange</span>\n        <span class=\"nt\">alias_3</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">B.fig</span>\n    <span class=\"nt\">vectors</span><span class=\"p\">:</span>\n        <span class=\"nt\">vec_1</span><span class=\"p\">:</span>\n            <span class=\"nt\">alias_1</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">5</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">10</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">15</span><span class=\"p p-Indicator\">]</span>\n        <span class=\"nt\">vec_2</span><span class=\"p\">:</span>\n            <span class=\"nt\">labels</span><span class=\"p\">:</span>  <span class=\"p p-Indicator\">[</span><span class=\"s\">'a'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'b'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'c'</span><span class=\"p p-Indicator\">]</span>\n            <span class=\"nt\">alias_2</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span>  <span class=\"nv\">2</span><span class=\"p p-Indicator\">,</span>   <span class=\"nv\">3</span><span class=\"p p-Indicator\">,</span>   <span class=\"nv\">4</span><span class=\"p p-Indicator\">]</span>\n            <span class=\"nt\">alias_3</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span>  <span class=\"nv\">6</span><span class=\"p p-Indicator\">,</span>   <span class=\"nv\">7</span><span class=\"p p-Indicator\">,</span>   <span class=\"nv\">8</span><span class=\"p p-Indicator\">]</span>\n    <span class=\"nt\">sequences</span><span class=\"p\">:</span>\n        <span class=\"nt\">seq_1</span><span class=\"p\">:</span>\n            <span class=\"nt\">method_a</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">vec_1</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">vec_2</span><span class=\"p p-Indicator\">]</span>\n</pre>\n<p>There are some key things about the structure:</p>\n<ul>\n<li>The highest level is for each set. Only one set is run at a time. Each <code>set</code> is labeled by its its key. In this case, we have one set called <code>set_1</code>.</li>\n<li>Each set needs three keys:\n<ul>\n<li><strong>aliases:</strong> A dictionary where keys are aliases - shorter names for possibly long entries in the container - and the values are the corresponding container keys. The values need to exist as keys in the container.</li>\n<li><strong>vectors:</strong> Dictionary where each key-value pair specifies a series of values. The aliases must exist in the <code>aliases</code> dictionary. There are multiple formats, as described below.</li>\n<li><strong>sequences:</strong> A dictionary where each key is the name of a sequence. Inside each sequence, there are keys that correspond to method names in the class that we're going to use for the automation. The values are lists of vector names that must exist in the <code>vectors</code> dictionary. The way they work is described below.</li>\n</ul>\n</li>\n</ul>\n<h4>How sequences work</h4>\n<p>Inside each sequence is a list of methods (the keys) and their corresponding list of vector names. The automator takes the list of vector names and interates over their values in a nested fashion. For example, <code>[vec_1, vec_2]</code> means the outer loop iterates over the set of values in <code>vec_1</code>, while the inner loop iterates over the values in <code>vec_2</code>. There is no limit to how many vectors you use, but since the total number of steps in the overall sequence grows exponentially, don't use too many.</p>\n<h4>Vectors</h4>\n<p>Vectors specify what values to iterate over for one or more aliases. There are many ways to specify them, as described below.</p>\n<p><strong>Simple vector.</strong> Labels of [0, 1, 2] will be automatically created. The <code>style</code> key-value pair is optional for this style.</p>\n<pre>        <span class=\"nt\">vec_1</span><span class=\"p\">:</span>\n            <span class=\"nt\">style</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">value_lists</span>\n            <span class=\"nt\">alias_1</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">5</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">10</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">15</span><span class=\"p p-Indicator\">]</span>\n</pre>\n<p><strong>Value lists.</strong> Here, we'll specify the labels in a separate vector. On the first iteration, the first values of each vector will be used. The second iteration will use the second values, and so on. The <code>style</code> key-value pair is optional for this style.</p>\n<pre>        <span class=\"nt\">vec_2</span><span class=\"p\">:</span>\n            <span class=\"nt\">style</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">value_lists</span>\n            <span class=\"nt\">labels</span><span class=\"p\">:</span>  <span class=\"p p-Indicator\">[</span><span class=\"s\">'a'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'b'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'c'</span><span class=\"p p-Indicator\">]</span>\n            <span class=\"nt\">alias_2</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span>  <span class=\"nv\">2</span><span class=\"p p-Indicator\">,</span>   <span class=\"nv\">3</span><span class=\"p p-Indicator\">,</span>   <span class=\"nv\">4</span><span class=\"p p-Indicator\">]</span>\n            <span class=\"nt\">alias_3</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span>  <span class=\"nv\">6</span><span class=\"p p-Indicator\">,</span>   <span class=\"nv\">7</span><span class=\"p p-Indicator\">,</span>   <span class=\"nv\">8</span><span class=\"p p-Indicator\">]</span>\n</pre>\n<p><strong>Value dictionaries.</strong> We could achieve the same <code>vec_2</code> as above using the format below:</p>\n<pre>        <span class=\"nt\">vec_2</span><span class=\"p\">:</span>\n            <span class=\"nt\">style</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">value_dictionaries</span>\n            <span class=\"nt\">a</span><span class=\"p\">:</span>  <span class=\"p p-Indicator\">{</span><span class=\"nt\">alias_2</span><span class=\"p\">:</span> <span class=\"nv\">2</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> alias_3</span><span class=\"p\">:</span> <span class=\"nv\">6</span><span class=\"p p-Indicator\">}</span><span class=\"err\">,</span>\n            <span class=\"nt\">b</span><span class=\"p\">:</span>  <span class=\"p p-Indicator\">{</span><span class=\"nt\">alias_2</span><span class=\"p\">:</span> <span class=\"nv\">3</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> alias_3</span><span class=\"p\">:</span> <span class=\"nv\">7</span><span class=\"p p-Indicator\">}</span><span class=\"err\">,</span>\n            <span class=\"nt\">c</span><span class=\"p\">:</span>  <span class=\"p p-Indicator\">{</span><span class=\"nt\">alias_2</span><span class=\"p\">:</span> <span class=\"nv\">4</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> alias_3</span><span class=\"p\">:</span> <span class=\"nv\">8</span><span class=\"p p-Indicator\">}</span><span class=\"err\">,</span>\n</pre>\n<p><strong>Csv file.</strong> We could achieve the same <code>vec_2</code> as above using a csv file combined with the format below. The filename is joined with the path at <code>vartrix.automate.root</code>, which can be set by calling <code>vartrix.automate.set_root(path)</code>.</p>\n<pre>        <span class=\"nt\">vec_2</span><span class=\"p\">:</span>\n            <span class=\"nt\">style</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">csv</span>\n            <span class=\"nt\">filename</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">tutorial_2.csv</span>\n</pre>\n<p>tutorial_2.csv:</p>\n<table>\n<thead>\n<tr>\n<th>index</th>\n<th>alias_2</th>\n<th>alias_3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>'a'</td>\n<td>2</td>\n<td>6</td>\n</tr>\n<tr>\n<td>'b'</td>\n<td>3</td>\n<td>7</td>\n</tr>\n<tr>\n<td>'c'</td>\n<td>4</td>\n<td>8</td>\n</tr></tbody></table>\n<p><strong>Custom.</strong> You can even use your own vector interpreter. Here's how:</p>\n<ul>\n<li>Inherit <code>vartrix.automate.Vector</code> and define a method called <code>setup</code>. It needs to accept one argument - a dictionary of data that excludes the <code>style</code> key-value pair. It needs to return a list of labels (strings), and a list of dictionaries that contain key-value pairs for the aliases and thier corresponding values (e.g. <code>[{'alias_1': 4, 'alias_2': 5}, {'alias_1': 8, 'alias_2': 9}]</code>).</li>\n<li>Add your style, by calling <code>vartrix.automate.Vector_Factor.set_style(style_name, vec_cls)</code>. The <em>style_name</em> is a string you specify. The <em>vec_cls</em> is the class you just created.</li>\n<li>Use <em>style_name</em> as the <code>style</code> value for any vectors that use your new style.</li>\n</ul>\n<h4>Initialisation</h4>\n<p>To initialise, just pass in a Container instance and the filename to load from:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n<span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"s1\">'tutorial_2.yml'</span><span class=\"p\">)</span>\n<span class=\"n\">automator</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">Automator</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_2'</span><span class=\"p\">],</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre>\n<h3>Automated classes</h3>\n<p>The vartrix Automator calls the method(s) specified in each sequence at each iteration through the nested vector loops. In addition, there are several methods that provide hooks:</p>\n<ul>\n<li>prepare(): Called at the start of the set</li>\n<li>prepare_sequence(seq_name): Called at the start of each sequence</li>\n<li>prepare_method(method_name): Called before starting to call <code>method_name</code> at each iteration</li>\n<li>method_name(seq_name, val_dct, label_dct): The only required method - the name must match that in the sequence dictionary.</li>\n<li>finish_method(method_name): Called after after calling <code>method_name</code> at each iteration</li>\n<li>finish_sequence(seq_name): Called at the end of each sequence</li>\n<li>finish(): Called at the end of the set</li>\n</ul>\n<p>For this tutorial, we'll create a simple automated class like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Automated</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">vartrix</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'tutorial_2'</span><span class=\"p\">],</span> <span class=\"n\">dotkeys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">])</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">prepare</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'preparing...'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">prepare_sequence</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">seq_name</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'running sequence: '</span> <span class=\"o\">+</span> <span class=\"n\">seq_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">prepare_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'running method: '</span> <span class=\"o\">+</span> <span class=\"n\">method_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">method_a</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">seq_name</span><span class=\"p\">,</span> <span class=\"n\">val_dct</span><span class=\"p\">,</span> <span class=\"n\">label_dct</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'calling method_a:'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'current labels: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">label_dct</span><span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'current params: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">finish_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'finishing method: '</span> <span class=\"o\">+</span> <span class=\"n\">method_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">finish_sequence</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">seq_name</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'finishing sequence: '</span> <span class=\"o\">+</span> <span class=\"n\">seq_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">finish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">finish</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<h3>Execution</h3>\n<p>Now for the easy part. We can simply create an instance of our Automated class and pass it into the automator with the set name.</p>\n<pre><span class=\"n\">automated</span> <span class=\"o\">=</span> <span class=\"n\">Automated</span><span class=\"p\">()</span>\n<span class=\"n\">automator</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'set_1'</span><span class=\"p\">,</span> <span class=\"n\">automated</span><span class=\"p\">)</span>\n</pre>\n<p>The output looks like this:</p>\n<pre><span class=\"n\">preparing</span><span class=\"o\">...</span>\n<span class=\"n\">running</span> <span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"n\">seq_1</span>\n<span class=\"n\">running</span> <span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">method_a</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">}</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">}</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">}</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">}</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">}</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">}</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">}</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">}</span>\n<span class=\"n\">calling</span> <span class=\"n\">method_a</span><span class=\"p\">:</span>\n<span class=\"n\">current</span> <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'vec_1'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'vec_2'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">}</span>\n<span class=\"n\">current</span> <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'fig'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">}</span>\n<span class=\"n\">finishing</span> <span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">method_a</span>\n<span class=\"n\">finishing</span> <span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"n\">seq_1</span>\n</pre>\n<p>The values in the Container are changed automatically by the Automator before calling <code>method_a</code>. But, the automator also passes in <code>val_dct</code>, a dictionary of automated key-value pairs, in case they are convenient. It's also often desirable to have shorter, simpler labels at each iteration for each vector, and the automator passes in <code>label_dct</code> for that purpose as well.</p>\n<p>If we want to change the way we automate the parameters, now we only need to change the specification in our yaml file (<code>tutorial_2.yml</code>) - there's no need for manual coding of the automation. This approach has a number of advantages:</p>\n<ul>\n<li>Faster creation of iterative sequences</li>\n<li>Fewer mistakes</li>\n<li>Easier management of parameters</li>\n<li>Full traceability of how parameters are changed</li>\n<li>Flexble, loosely coupled code. The classes that use the values in the Container need no knowledge of the automation, and the automation needs no knowledge of them.</li>\n</ul>\n<h2>Related packages</h2>\n<p>Other packages exist that overlap with vartrix in functionality. You might want to look at:</p>\n<ul>\n<li>parameters</li>\n<li>param</li>\n<li>paranormal</li>\n<li>traits</li>\n<li>traitlets</li>\n<li>attrs</li>\n<li>pypet</li>\n</ul>\n\n          </div>"}, "last_serial": 7131655, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a97c1caeda2a186ff8430a219cd4b48b", "sha256": "012cca1c5d3de085e9b56385f223c4ba9475897e116ce6a92e163b36407695e0"}, "downloads": -1, "filename": "vartrix-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a97c1caeda2a186ff8430a219cd4b48b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9552, "upload_time": "2019-09-09T08:48:25", "upload_time_iso_8601": "2019-09-09T08:48:25.327354Z", "url": "https://files.pythonhosted.org/packages/d5/89/61f90b88c0fd0cd5d857f9ee6f8883995750222c35cb62a3f65d0a535021/vartrix-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "dea0d4b64f2236e0778c32fc0ff56b71", "sha256": "f1db670e2a2541b44081771c9401c238b5f2d6e3bb975d88bb4446ae4361a20e"}, "downloads": -1, "filename": "vartrix-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dea0d4b64f2236e0778c32fc0ff56b71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13771, "upload_time": "2019-09-09T09:16:05", "upload_time_iso_8601": "2019-09-09T09:16:05.103089Z", "url": "https://files.pythonhosted.org/packages/ae/d1/448805cda51f18056839bc3d57ecad1e85c56ee55e379939c414dba2a198/vartrix-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "48ff14f73527d8462089cf622080071f", "sha256": "3df6f7019d938750ed0158e007d1208cf8e0ce6cec185db7e7e3fe30f0eac716"}, "downloads": -1, "filename": "vartrix-0.0.3.tar.gz", "has_sig": false, "md5_digest": "48ff14f73527d8462089cf622080071f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20182, "upload_time": "2019-09-10T01:39:16", "upload_time_iso_8601": "2019-09-10T01:39:16.036703Z", "url": "https://files.pythonhosted.org/packages/93/a8/05810ce27342b0b498d0a8df96400c1694115deaed5c45b9c85d9b9b1f19/vartrix-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "bcd1525920df74c052200091ce433457", "sha256": "7e790bca3c724cf114d64b8c98acfbc2be2954a36d65e96b59a3412ccddad833"}, "downloads": -1, "filename": "vartrix-0.0.5.tar.gz", "has_sig": false, "md5_digest": "bcd1525920df74c052200091ce433457", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24314, "upload_time": "2020-01-05T23:45:16", "upload_time_iso_8601": "2020-01-05T23:45:16.220743Z", "url": "https://files.pythonhosted.org/packages/9b/56/4e6ffd23a738f5e0ed409a6cc78e4b432ed2519402af0f4ea57571388550/vartrix-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "074dc47e92fe3eb6e3dc21d4e76683f8", "sha256": "4f558369473b2df00011c5d7465e8a58d7b416682238d46076b09afe7a0f937d"}, "downloads": -1, "filename": "vartrix-0.0.6.tar.gz", "has_sig": false, "md5_digest": "074dc47e92fe3eb6e3dc21d4e76683f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24442, "upload_time": "2020-03-30T01:02:45", "upload_time_iso_8601": "2020-03-30T01:02:45.926971Z", "url": "https://files.pythonhosted.org/packages/39/46/89becf92b5769a295e1a9cdf09bfe834d02ac1f534efe1c56ac9303e8feb/vartrix-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "809d700afb06a73a1fb16121896e4f8f", "sha256": "53325b2c7772605a44be100e04dd6a6f25bcdd7e2ab3bee70d819a4331bb2474"}, "downloads": -1, "filename": "vartrix-0.0.7.tar.gz", "has_sig": false, "md5_digest": "809d700afb06a73a1fb16121896e4f8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24526, "upload_time": "2020-04-03T23:21:56", "upload_time_iso_8601": "2020-04-03T23:21:56.401911Z", "url": "https://files.pythonhosted.org/packages/a8/42/395767b33d99ae046ae4a4e897200d74f05e06732396518dd26d68409f86/vartrix-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "e23d38aa2dc319dd880da6fd9f867236", "sha256": "73a433e7f59fcea956ee34a9c30b12811cf9e9917376d066591c8324f8e7ba51"}, "downloads": -1, "filename": "vartrix-0.0.8.tar.gz", "has_sig": false, "md5_digest": "e23d38aa2dc319dd880da6fd9f867236", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24637, "upload_time": "2020-04-29T00:59:30", "upload_time_iso_8601": "2020-04-29T00:59:30.118459Z", "url": "https://files.pythonhosted.org/packages/57/8b/f6a6eafe5cb71720b5bf3c6481d65f31a87580500c4a051f66a7741641e8/vartrix-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "e9fd9e771fd68f3b673ac10a8c1c8c78", "sha256": "086bcb509d7ba64de57e689ad1a681f3c4e7b6a9cacddf7f64ae23064d4eaa9f"}, "downloads": -1, "filename": "vartrix-0.0.9.tar.gz", "has_sig": false, "md5_digest": "e9fd9e771fd68f3b673ac10a8c1c8c78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24997, "upload_time": "2020-04-29T19:55:09", "upload_time_iso_8601": "2020-04-29T19:55:09.684012Z", "url": "https://files.pythonhosted.org/packages/6c/d3/6d2a1e382cc976f539da20c76ee5f8b55855bb66c503cb9f6995cfb56fc6/vartrix-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9fd9e771fd68f3b673ac10a8c1c8c78", "sha256": "086bcb509d7ba64de57e689ad1a681f3c4e7b6a9cacddf7f64ae23064d4eaa9f"}, "downloads": -1, "filename": "vartrix-0.0.9.tar.gz", "has_sig": false, "md5_digest": "e9fd9e771fd68f3b673ac10a8c1c8c78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24997, "upload_time": "2020-04-29T19:55:09", "upload_time_iso_8601": "2020-04-29T19:55:09.684012Z", "url": "https://files.pythonhosted.org/packages/6c/d3/6d2a1e382cc976f539da20c76ee5f8b55855bb66c503cb9f6995cfb56fc6/vartrix-0.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:45 2020"}