{"info": {"author": "David Ma", "author_email": "davidma@davidma.cn", "bugtrack_url": null, "classifiers": [], "description": "# Oven\nAn util package that includes algorithms, functions and IO similar to that of other languages' standard library.\n\n## Installation\nInstallation with pip is recommended.\n```sh\npip install oven\n```\n\n## Table of Contents\n\n- [Standard I/O](#standard-io)\n\t- [Creating Session](#creating-session)\n\t- [Calling cin/cout](#calling-cincout)\n- [Pointer](#pointer)\n\t- [Instantiating Pointers](#instantiating-pointers)\n\t- [Calling Pointers](#calling-pointers)\n- [Structs](#structs)\n\t- [Stack](#stack)\n\t- [Queue](#queue)\n\t- [Tree](#tree)\n\t- [Binary Tree](#binarytree)\n\n## Standard I/O\nThe [stdio](/oven/stdio) package includes convient functions to redefine basic I/O.\n\n```python\nfrom oven.stdio import *\n```\n\n### Creating Session\n\nThe [stdio](/oven/stdio) session is required in order to call any I/O functions. A session is created as such:\n```python\nset_io(IO_STREAM, 'path/to/file', METHOD)\n```\n\nThe *IO_STREAM* can be any of:\n* stdio.FILE: Redirect the IO stream to a file\n* stdio.CONSOLE: Redirect the IO stream to the console\n\nThe *METHOD* can be any of:\n* *r* : Read from a file\n* *w* : Write to a file, create/override if nessesary\n* *a* : Append to a file, create if nessesary\n\nMethod *w* overrides the file and dump all output from the session, while *a* append all output from the session to the end of the file.\n\nIf the *IO_STREAM* is set to *CONSOLE*, then the *path* argument will be ignored.\n\nNote that the [stdio]() session is created on the global scope, therefore one session will always suffice for one method of IO action.\n\nAn example is given below. This code reads a line of input from a file and print it to the screen.\n```python\nfrom oven.stdio import *\n\nset_io(FILE, 'text.in', 'r')\nset_io(CONSOLE, None, 'w')\n\ntext = cin()\ncout(text)\n```\n\n### Calling cin/cout\nDespite the name, the cin/cout also applies to file IO.\n```python\ncin() # Read one line.\ncout('Hello World') # Write. Note that \\n is not added at the end.\n```\n\n## Pointer\nThe [Pointer](/oven/pointer) package includes a pointer object.\n\n```python\nfrom oven.pointer import Pointer\n```\n\n### Instantiating Pointers\nA [Pointer](/oven/pointer) is created as such:\n```python\nptr_1 = Pointer()\nptr_2 = Pointer(INIT_VALUE)\n```\n\n### Calling Pointers\nGetting value from pointer:\n```python\nvalue = ptr()\n```\n\nAssigning value to pointer:\n```python\nptr(value)\n```\n\n## Structs\nThe [structs](/oven/structs) package features some data structures.\n\n```python\nfrom oven.structs import *\n```\n\n### Stack\n```python\nfrom oven.structs import Stack\n```\n\nThe [Stack](/oven/structs/stack.py) class is a subclass of python's list, its methods are:\n* *push* : Push a value to the stack\n* *pop* : Remove and return the ending element of the stack\n\n### Queue\n```python\nfrom oven.structs import Queue\n```\n\nThe [Queue](/oven/structs/queue.py) class is a subclass of python's list, its methods are:\n* *push* : Push a value to the queue\n* *pop* : Remove and return the starting element of the queue\n\n### Tree\n```python\nfrom oven.structs import Tree\n```\n\nThe [Tree](/oven/structs/tree.py) class is a recursive node of a tree. The value of the node can be assigned either in the constructor or by calling the *value* attribute (variable).\n```python\n# Both nodes are tree nodes with the value 42\n\nnode_1 = Tree(42)\n\nnode_2 = Tree()\nnode_2.value = 42\n```\n\nA child can be added to a node by calling the *addChild* method and passing the child as the parameter. The children of a node can be accessed by calling the *children* attribute (variable).\n\nOther methods include:\n* *dfs* : Returns a list of the tree's nodes in *depth first search* order.\n* *bfs* : Returns a list of the tree's nodes in *breadth first search* order.\n\n### BinaryTree\n```python\nfrom oven.structs import BinaryTree\n```\n\nThe [BinaryTree](/oven/structs/binarytree.py) class is a subclass of the [Tree](/oven/structs/tree.py) class. The *left* and *right* children can be accessed by:\n```python\nnode.left() # Returns the left node\nnode.right() # Returns the right node\n\nnode.left(newNode) # Sets the left node\nnode.right(newNode) # Sets the right node\n```\n\nDue to this, the *addChild* method is removed.\n\nAll other methods are identical to that of the [Tree](/oven/structs/tree.py) class except the *dfs* method, which is tweaked so that the calling of it becomes:\n```python\nnode.dfs(MODE)\n```\n\nThe *MODE* can be any of:\n* *PREORDER*\n* *INORDER*\n* *POSTORDER*\n\nAll of the above modes are imported as such:\n```python\nfrom oven.structs import PREORDER, INORDER, POSTORDER\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/davidmaamoaix/Oven", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "oven", "package_url": "https://pypi.org/project/oven/", "platform": "", "project_url": "https://pypi.org/project/oven/", "project_urls": {"Homepage": "https://github.com/davidmaamoaix/Oven"}, "release_url": "https://pypi.org/project/oven/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "An util package that includes features from other languages' stdlib.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Oven</h1>\n<p>An util package that includes algorithms, functions and IO similar to that of other languages' standard library.</p>\n<h2>Installation</h2>\n<p>Installation with pip is recommended.</p>\n<pre>pip install oven\n</pre>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#standard-io\" rel=\"nofollow\">Standard I/O</a>\n<ul>\n<li><a href=\"#creating-session\" rel=\"nofollow\">Creating Session</a></li>\n<li><a href=\"#calling-cincout\" rel=\"nofollow\">Calling cin/cout</a></li>\n</ul>\n</li>\n<li><a href=\"#pointer\" rel=\"nofollow\">Pointer</a>\n<ul>\n<li><a href=\"#instantiating-pointers\" rel=\"nofollow\">Instantiating Pointers</a></li>\n<li><a href=\"#calling-pointers\" rel=\"nofollow\">Calling Pointers</a></li>\n</ul>\n</li>\n<li><a href=\"#structs\" rel=\"nofollow\">Structs</a>\n<ul>\n<li><a href=\"#stack\" rel=\"nofollow\">Stack</a></li>\n<li><a href=\"#queue\" rel=\"nofollow\">Queue</a></li>\n<li><a href=\"#tree\" rel=\"nofollow\">Tree</a></li>\n<li><a href=\"#binarytree\" rel=\"nofollow\">Binary Tree</a></li>\n</ul>\n</li>\n</ul>\n<h2>Standard I/O</h2>\n<p>The <a href=\"/oven/stdio\" rel=\"nofollow\">stdio</a> package includes convient functions to redefine basic I/O.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.stdio</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<h3>Creating Session</h3>\n<p>The <a href=\"/oven/stdio\" rel=\"nofollow\">stdio</a> session is required in order to call any I/O functions. A session is created as such:</p>\n<pre><span class=\"n\">set_io</span><span class=\"p\">(</span><span class=\"n\">IO_STREAM</span><span class=\"p\">,</span> <span class=\"s1\">'path/to/file'</span><span class=\"p\">,</span> <span class=\"n\">METHOD</span><span class=\"p\">)</span>\n</pre>\n<p>The <em>IO_STREAM</em> can be any of:</p>\n<ul>\n<li>stdio.FILE: Redirect the IO stream to a file</li>\n<li>stdio.CONSOLE: Redirect the IO stream to the console</li>\n</ul>\n<p>The <em>METHOD</em> can be any of:</p>\n<ul>\n<li><em>r</em> : Read from a file</li>\n<li><em>w</em> : Write to a file, create/override if nessesary</li>\n<li><em>a</em> : Append to a file, create if nessesary</li>\n</ul>\n<p>Method <em>w</em> overrides the file and dump all output from the session, while <em>a</em> append all output from the session to the end of the file.</p>\n<p>If the <em>IO_STREAM</em> is set to <em>CONSOLE</em>, then the <em>path</em> argument will be ignored.</p>\n<p>Note that the <a href=\"\" rel=\"nofollow\">stdio</a> session is created on the global scope, therefore one session will always suffice for one method of IO action.</p>\n<p>An example is given below. This code reads a line of input from a file and print it to the screen.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.stdio</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">set_io</span><span class=\"p\">(</span><span class=\"n\">FILE</span><span class=\"p\">,</span> <span class=\"s1\">'text.in'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span>\n<span class=\"n\">set_io</span><span class=\"p\">(</span><span class=\"n\">CONSOLE</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">cin</span><span class=\"p\">()</span>\n<span class=\"n\">cout</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n<h3>Calling cin/cout</h3>\n<p>Despite the name, the cin/cout also applies to file IO.</p>\n<pre><span class=\"n\">cin</span><span class=\"p\">()</span> <span class=\"c1\"># Read one line.</span>\n<span class=\"n\">cout</span><span class=\"p\">(</span><span class=\"s1\">'Hello World'</span><span class=\"p\">)</span> <span class=\"c1\"># Write. Note that \\n is not added at the end.</span>\n</pre>\n<h2>Pointer</h2>\n<p>The <a href=\"/oven/pointer\" rel=\"nofollow\">Pointer</a> package includes a pointer object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.pointer</span> <span class=\"kn\">import</span> <span class=\"n\">Pointer</span>\n</pre>\n<h3>Instantiating Pointers</h3>\n<p>A <a href=\"/oven/pointer\" rel=\"nofollow\">Pointer</a> is created as such:</p>\n<pre><span class=\"n\">ptr_1</span> <span class=\"o\">=</span> <span class=\"n\">Pointer</span><span class=\"p\">()</span>\n<span class=\"n\">ptr_2</span> <span class=\"o\">=</span> <span class=\"n\">Pointer</span><span class=\"p\">(</span><span class=\"n\">INIT_VALUE</span><span class=\"p\">)</span>\n</pre>\n<h3>Calling Pointers</h3>\n<p>Getting value from pointer:</p>\n<pre><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">ptr</span><span class=\"p\">()</span>\n</pre>\n<p>Assigning value to pointer:</p>\n<pre><span class=\"n\">ptr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<h2>Structs</h2>\n<p>The <a href=\"/oven/structs\" rel=\"nofollow\">structs</a> package features some data structures.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.structs</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<h3>Stack</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.structs</span> <span class=\"kn\">import</span> <span class=\"n\">Stack</span>\n</pre>\n<p>The <a href=\"/oven/structs/stack.py\" rel=\"nofollow\">Stack</a> class is a subclass of python's list, its methods are:</p>\n<ul>\n<li><em>push</em> : Push a value to the stack</li>\n<li><em>pop</em> : Remove and return the ending element of the stack</li>\n</ul>\n<h3>Queue</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.structs</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n</pre>\n<p>The <a href=\"/oven/structs/queue.py\" rel=\"nofollow\">Queue</a> class is a subclass of python's list, its methods are:</p>\n<ul>\n<li><em>push</em> : Push a value to the queue</li>\n<li><em>pop</em> : Remove and return the starting element of the queue</li>\n</ul>\n<h3>Tree</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.structs</span> <span class=\"kn\">import</span> <span class=\"n\">Tree</span>\n</pre>\n<p>The <a href=\"/oven/structs/tree.py\" rel=\"nofollow\">Tree</a> class is a recursive node of a tree. The value of the node can be assigned either in the constructor or by calling the <em>value</em> attribute (variable).</p>\n<pre><span class=\"c1\"># Both nodes are tree nodes with the value 42</span>\n\n<span class=\"n\">node_1</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n\n<span class=\"n\">node_2</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"p\">()</span>\n<span class=\"n\">node_2</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n</pre>\n<p>A child can be added to a node by calling the <em>addChild</em> method and passing the child as the parameter. The children of a node can be accessed by calling the <em>children</em> attribute (variable).</p>\n<p>Other methods include:</p>\n<ul>\n<li><em>dfs</em> : Returns a list of the tree's nodes in <em>depth first search</em> order.</li>\n<li><em>bfs</em> : Returns a list of the tree's nodes in <em>breadth first search</em> order.</li>\n</ul>\n<h3>BinaryTree</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.structs</span> <span class=\"kn\">import</span> <span class=\"n\">BinaryTree</span>\n</pre>\n<p>The <a href=\"/oven/structs/binarytree.py\" rel=\"nofollow\">BinaryTree</a> class is a subclass of the <a href=\"/oven/structs/tree.py\" rel=\"nofollow\">Tree</a> class. The <em>left</em> and <em>right</em> children can be accessed by:</p>\n<pre><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">()</span> <span class=\"c1\"># Returns the left node</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">()</span> <span class=\"c1\"># Returns the right node</span>\n\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">(</span><span class=\"n\">newNode</span><span class=\"p\">)</span> <span class=\"c1\"># Sets the left node</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">newNode</span><span class=\"p\">)</span> <span class=\"c1\"># Sets the right node</span>\n</pre>\n<p>Due to this, the <em>addChild</em> method is removed.</p>\n<p>All other methods are identical to that of the <a href=\"/oven/structs/tree.py\" rel=\"nofollow\">Tree</a> class except the <em>dfs</em> method, which is tweaked so that the calling of it becomes:</p>\n<pre><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">MODE</span><span class=\"p\">)</span>\n</pre>\n<p>The <em>MODE</em> can be any of:</p>\n<ul>\n<li><em>PREORDER</em></li>\n<li><em>INORDER</em></li>\n<li><em>POSTORDER</em></li>\n</ul>\n<p>All of the above modes are imported as such:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oven.structs</span> <span class=\"kn\">import</span> <span class=\"n\">PREORDER</span><span class=\"p\">,</span> <span class=\"n\">INORDER</span><span class=\"p\">,</span> <span class=\"n\">POSTORDER</span>\n</pre>\n\n          </div>"}, "last_serial": 4559029, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d507882f0c2ca499d26a2fd06f0dda5d", "sha256": "115b8958a9d1ca501e1e6ec48798ef4f9d3103afe07f15bd3a92fcf16317c8ac"}, "downloads": -1, "filename": "oven-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d507882f0c2ca499d26a2fd06f0dda5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8284, "upload_time": "2018-12-04T10:08:57", "upload_time_iso_8601": "2018-12-04T10:08:57.340528Z", "url": "https://files.pythonhosted.org/packages/08/66/aa65b3128ca0ececec4a4601d292d69e9e87d531456c11c08b89c37abc16/oven-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9c14eeaa73927b367743af84b84f225", "sha256": "df6876b446809e1fb319c1e213d210a464c9de5a84eddaf2b7a4167f581ee251"}, "downloads": -1, "filename": "oven-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e9c14eeaa73927b367743af84b84f225", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5294, "upload_time": "2018-12-04T10:09:00", "upload_time_iso_8601": "2018-12-04T10:09:00.415716Z", "url": "https://files.pythonhosted.org/packages/27/59/5bfef19cb6699e51a2af1f9d161ea14805744720ed5ddf987a3bfa5c2c79/oven-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d507882f0c2ca499d26a2fd06f0dda5d", "sha256": "115b8958a9d1ca501e1e6ec48798ef4f9d3103afe07f15bd3a92fcf16317c8ac"}, "downloads": -1, "filename": "oven-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d507882f0c2ca499d26a2fd06f0dda5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8284, "upload_time": "2018-12-04T10:08:57", "upload_time_iso_8601": "2018-12-04T10:08:57.340528Z", "url": "https://files.pythonhosted.org/packages/08/66/aa65b3128ca0ececec4a4601d292d69e9e87d531456c11c08b89c37abc16/oven-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9c14eeaa73927b367743af84b84f225", "sha256": "df6876b446809e1fb319c1e213d210a464c9de5a84eddaf2b7a4167f581ee251"}, "downloads": -1, "filename": "oven-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e9c14eeaa73927b367743af84b84f225", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5294, "upload_time": "2018-12-04T10:09:00", "upload_time_iso_8601": "2018-12-04T10:09:00.415716Z", "url": "https://files.pythonhosted.org/packages/27/59/5bfef19cb6699e51a2af1f9d161ea14805744720ed5ddf987a3bfa5c2c79/oven-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:38 2020"}