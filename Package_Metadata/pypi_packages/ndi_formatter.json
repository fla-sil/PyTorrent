{"info": {"author": "dcronkite", "author_email": "dcronkite+pypi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only"], "description": "Simple module to convert data table (CSV/SAS7BDAT/JSON) into National Death Index (NDI) format released under the MIT license.\n\n## About ##\nThe formatting and validation convert supported data files into acceptable NDI datasets for submission. The validation is not intended to support an arbitrary NDI file, but one which has been generated by the included formatter.\n\n### Disclaimer ###\nNo guarantee of any kind is made that this code produces the desired output. Please inspect your own data to ensure that it is correct, and contribute to improve the current formatter/validator.\n\n### References ###\n* National Center for Health Statistics. National Death Index user\u2019s guide. Hyattsville, MD. 2013.\n* Above cited is available at http://www.cdc.gov/nchs/data/ndi/NDI_Users_Guide.pdf\n\n## Requirements ##\n* Python 3.3+\n* Optional packages:\n    * dateutil: enables inference of date (for birthdate)\n    * sas7bdat: enables parsing of sas7bdat files\n    \n## Prerequisites ##\n1. A supported data file with information that needs to be converted to NDI format.\n2. Each subject/record must have either...\n    *  FIRST and LAST NAME and SOCIAL SECURITY NUMBER\n    *  FIRST and LAST NAME and MONTH and YEAR OF BIRTH\n    *  SOCIAL SECURITY NUMBER and full DATE OF BIRTH and SEX\n4. Install Python 3.3+ \n5. (Optional) Install optional packages:\n    * Install sas7bdat by running `pip install sas7bdat`\n    * Install dateutil by running `pip install dateutil`\n    * For issues with proxy, try the answers to this SO question: http://stackoverflow.com/questions/14149422/\n\n## Doco ##\n\n### Installation ###\nEither with pip:\n\n    pip install ndi_formatter\n     \nOr download the repository:\n    \n    git clone git@bitbucket.org:dcronkite/ndi_formatter.git\n    cd ndi_formatter\n    python setup.py install\n\n### Basics ###\nThe best way to get started is to figure out which options you need to pass.\n\n    # create a sample configuration file\n    ndi-formatter --create-sample >> sample.config\n    \n    # see all arguments\n    ndi-formatter --help\n    \n    # run with a config file\n    ndi-formatter \"@configfile.conf\"\n    \n### Program Options ###\n\nOnce the sample config has been created, you can customize the parameters. \nThe following should be helpful in more explicitly documenting the parameters.\nMost of these options are mapping a variable/column name in a CSV, SAS, etc. dataset\nto the type of data which that variable/column contains. \n\n```\n  -i INPUT_FILE, --input-file INPUT_FILE\n                        Input file path.\n  -o OUTPUT_FILE, --output-file OUTPUT_FILE\n                        NDI-formatted output file.\n  -f {sas,csv,json}, --input-format {sas,csv,json}\n                        Input file format.\n  -L LOG_FILE, --log-file LOG_FILE\n                        Logfile name.\n  --fname FNAME         Name/index of column with first name\n  --lname LNAME         Name/index of column with last name\n  --mname MNAME         Name/index of column with middle name/initial\n  --sname SNAME         Name/index of column with father name\n  --name NAME           Name/index of column with full name\n  --ssn SSN             Name/index of column with ssn; accepts multiple\n                        columns\n  --birth-day BIRTH_DAY\n                        Name/index of column with birth day\n  --birth-month BIRTH_MONTH\n                        Name/index of column with birth month\n  --birth-year BIRTH_YEAR\n                        Name/index of column with birth year\n  --birthdate BIRTHDATE\n                        Name/index of column with birthdate\n  --sex SEX             Name/index of column with sex; accepts multiple\n                        columns\n  --death-age DEATH_AGE\n                        Name/index of column with age at death (in years)\n  --race RACE           Name/index of column with race; accepts multiple\n                        columns\n  --marital-status MARITAL_STATUS\n                        Name/index of column with marital status; accepts\n                        multiple columns\n  --state-of-residence STATE_OF_RESIDENCE\n                        Name/index of column with state of residence; accepts\n                        multiple columns\n  --state-of-birth STATE_OF_BIRTH\n                        Name/index of column with state of birth; accepts\n                        multiple columns\n  --id ID               Name/index of column with id number\n  --race-mapping OA/PI WH BA NA/IN CH JP HI Onon-WH FL\n                        Mapping of variable to NDI race in following order:\n                        Other Asian/Pacific Islander, White, Black, Native American,\n                        Chinese, Japanese, Hawaiian, Other nonwhite, Filipino;\n                        everything else will be treated as unknown; use an \"X\"\n                        instead of a value to skip a race\n  --marital-status-mapping Single Married Widowed Divorced\n                        Mapping of variable to ND marital status in following\n                        order: Never married/single, Married, Widowed,\n                        Divorced; everything else will be treated as unknown;\n                        use an \"X\" instead of a value to skip a status\n  --same-state-of-residence-for-all SAME_STATE_OF_RESIDENCE_FOR_ALL\n                        State abbreviation/number for all subjects\n  --same-state-of-birth-for-all SAME_STATE_OF_BIRTH_FOR_ALL\n                        State abbreviation/number for all subjects\n  --age-at-death-units-for-all {MONTH,WEEK,DAY,HOUR,MINUTE}\n                        Specify units for age of death it not years.\n  --name-format NAME_FORMAT\n                        Format to parse full names. L=Last name, F=first name,\n                        M=Middle name, S=father name, X=ignore; algorithm will\n                        continue to add any character found to the name until\n                        the next non-[LFMSX] character is found\n  --date-format DATE_FORMAT\n                        Date format for parsing year/month/day from a date;\n                        for more documentation, see https://docs.python.org/de\n                        v/library/datetime.html#strftime-and-strptime-behavior\n  --sex-format SEX_FORMAT\n                        Specify the values for male/female if different than\n                        NDI using \"MALE,FEMALE\"; NDI default is \"M,F\" or \"1,2\"\n                        or \"M1,F2\"\n  --validate-generated-file [VALIDATE_GENERATED_FILE]\n                        Validate NDI file and output results to specified\n                        file.\n  --strip-lname-suffix [STRIP_LNAME_SUFFIX]\n                        Look for suffixes in lname column and strip them out;\n                        default: JR, SR, II, III, IV; if specifying an\n                        argument, use a comma-separated list as a single\n                        string\n  --strip-lname-suffix-attached [STRIP_LNAME_SUFFIX_ATTACHED]\n                        Look for suffixes in last word of lname column and\n                        strip them out even if they are attached to the word\n                        itself; default: JR, SR, II, III, IV; if specifying an\n                        argument, use a comma-separated list as a single\n                        string\n\noptional arguments:\n  --duplicate-records-on-lname\n                        If space or hyphen in last name, duplicate the subject\n                        into three records: 1) both together; 2) only the\n                        first part; 3) only the second part\n  --female-hyphen-lname-to-sname\n                        If hyphen in last name of female, duplicate the\n                        subject into two records: 1) both together; 2) only\n                        the first part with the second part in the father last\n                        name field\n  --duplicate-records-on-year-only\n                        Create 12 duplicate records if only a year and no\n                        month\n  --ignore-invalid-records\n                        Ignore records which invalid per NDI requirements due\n                        to insufficient information\n  --include-invalid-records\n                        Include records which invalid per NDI requirements due\n                        to insufficient information\n  --case-sensitive-columns\n                        All columns will be treated as case-sensitive.\n```\n\n### Advanced ###\n#### Multiple Columns ####\nYou can output multiple columns on most options (not names or birthdate due to complexities with how they are handled, and not id because that wouldn't make any sense) by inserting a comma-separated set of values to arguments.\n \nIf the columns have the same input, only one output will be produced. If the columns have different values, then multiple records will be output.\n\n    # option to look at two columns for state of residence\n    # if PRIMARY_STATE == SECONDARY_STATE, only one record will be output\n    --state-of-residence=PRIMARY_STATE,SECONDARY_STATE\n\n    \n### Validation ###\nValidation is done during formatting to ensure that patients are eligible to be submitted to NDI (unless suppressed by `--ignore-invalid-record` option).\n\nAdditional validation is available by including the [recommended] `--validate-generated-file VALIDATION_ERROR_FILE` option and to optionally supply a file. This will launch the validator on the NDI file generated by formatter.\n\nValidation comes in two forms:\n1. Is the data formatted correctly? (Done by validator)\n2. Is the record eligibile for NDI review? (Done by both formatter and validator)\n\n# License\nMIT licensed: https://kpwhri.mit-license.org/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kpwhri/ndi_formatter", "keywords": "ndi formatting", "license": "", "maintainer": "", "maintainer_email": "", "name": "ndi_formatter", "package_url": "https://pypi.org/project/ndi_formatter/", "platform": "", "project_url": "https://pypi.org/project/ndi_formatter/", "project_urls": {"Homepage": "https://github.com/kpwhri/ndi_formatter"}, "release_url": "https://pypi.org/project/ndi_formatter/1.0.4/", "requires_dist": ["regex", "dateutil ; extra == \"date_inference\"", "sas7bdat ; extra == \"sas7bdat_parsing\""], "requires_python": ">=3.7", "summary": "Format data for National Death Index (NDI) requests.", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple module to convert data table (CSV/SAS7BDAT/JSON) into National Death Index (NDI) format released under the MIT license.</p>\n<h2>About</h2>\n<p>The formatting and validation convert supported data files into acceptable NDI datasets for submission. The validation is not intended to support an arbitrary NDI file, but one which has been generated by the included formatter.</p>\n<h3>Disclaimer</h3>\n<p>No guarantee of any kind is made that this code produces the desired output. Please inspect your own data to ensure that it is correct, and contribute to improve the current formatter/validator.</p>\n<h3>References</h3>\n<ul>\n<li>National Center for Health Statistics. National Death Index user\u2019s guide. Hyattsville, MD. 2013.</li>\n<li>Above cited is available at <a href=\"http://www.cdc.gov/nchs/data/ndi/NDI_Users_Guide.pdf\" rel=\"nofollow\">http://www.cdc.gov/nchs/data/ndi/NDI_Users_Guide.pdf</a></li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.3+</li>\n<li>Optional packages:\n<ul>\n<li>dateutil: enables inference of date (for birthdate)</li>\n<li>sas7bdat: enables parsing of sas7bdat files</li>\n</ul>\n</li>\n</ul>\n<h2>Prerequisites</h2>\n<ol>\n<li>A supported data file with information that needs to be converted to NDI format.</li>\n<li>Each subject/record must have either...\n<ul>\n<li>FIRST and LAST NAME and SOCIAL SECURITY NUMBER</li>\n<li>FIRST and LAST NAME and MONTH and YEAR OF BIRTH</li>\n<li>SOCIAL SECURITY NUMBER and full DATE OF BIRTH and SEX</li>\n</ul>\n</li>\n<li>Install Python 3.3+</li>\n<li>(Optional) Install optional packages:\n<ul>\n<li>Install sas7bdat by running <code>pip install sas7bdat</code></li>\n<li>Install dateutil by running <code>pip install dateutil</code></li>\n<li>For issues with proxy, try the answers to this SO question: <a href=\"http://stackoverflow.com/questions/14149422/\" rel=\"nofollow\">http://stackoverflow.com/questions/14149422/</a></li>\n</ul>\n</li>\n</ol>\n<h2>Doco</h2>\n<h3>Installation</h3>\n<p>Either with pip:</p>\n<pre><code>pip install ndi_formatter\n</code></pre>\n<p>Or download the repository:</p>\n<pre><code>git clone git@bitbucket.org:dcronkite/ndi_formatter.git\ncd ndi_formatter\npython setup.py install\n</code></pre>\n<h3>Basics</h3>\n<p>The best way to get started is to figure out which options you need to pass.</p>\n<pre><code># create a sample configuration file\nndi-formatter --create-sample &gt;&gt; sample.config\n\n# see all arguments\nndi-formatter --help\n\n# run with a config file\nndi-formatter \"@configfile.conf\"\n</code></pre>\n<h3>Program Options</h3>\n<p>Once the sample config has been created, you can customize the parameters.\nThe following should be helpful in more explicitly documenting the parameters.\nMost of these options are mapping a variable/column name in a CSV, SAS, etc. dataset\nto the type of data which that variable/column contains.</p>\n<pre><code>  -i INPUT_FILE, --input-file INPUT_FILE\n                        Input file path.\n  -o OUTPUT_FILE, --output-file OUTPUT_FILE\n                        NDI-formatted output file.\n  -f {sas,csv,json}, --input-format {sas,csv,json}\n                        Input file format.\n  -L LOG_FILE, --log-file LOG_FILE\n                        Logfile name.\n  --fname FNAME         Name/index of column with first name\n  --lname LNAME         Name/index of column with last name\n  --mname MNAME         Name/index of column with middle name/initial\n  --sname SNAME         Name/index of column with father name\n  --name NAME           Name/index of column with full name\n  --ssn SSN             Name/index of column with ssn; accepts multiple\n                        columns\n  --birth-day BIRTH_DAY\n                        Name/index of column with birth day\n  --birth-month BIRTH_MONTH\n                        Name/index of column with birth month\n  --birth-year BIRTH_YEAR\n                        Name/index of column with birth year\n  --birthdate BIRTHDATE\n                        Name/index of column with birthdate\n  --sex SEX             Name/index of column with sex; accepts multiple\n                        columns\n  --death-age DEATH_AGE\n                        Name/index of column with age at death (in years)\n  --race RACE           Name/index of column with race; accepts multiple\n                        columns\n  --marital-status MARITAL_STATUS\n                        Name/index of column with marital status; accepts\n                        multiple columns\n  --state-of-residence STATE_OF_RESIDENCE\n                        Name/index of column with state of residence; accepts\n                        multiple columns\n  --state-of-birth STATE_OF_BIRTH\n                        Name/index of column with state of birth; accepts\n                        multiple columns\n  --id ID               Name/index of column with id number\n  --race-mapping OA/PI WH BA NA/IN CH JP HI Onon-WH FL\n                        Mapping of variable to NDI race in following order:\n                        Other Asian/Pacific Islander, White, Black, Native American,\n                        Chinese, Japanese, Hawaiian, Other nonwhite, Filipino;\n                        everything else will be treated as unknown; use an \"X\"\n                        instead of a value to skip a race\n  --marital-status-mapping Single Married Widowed Divorced\n                        Mapping of variable to ND marital status in following\n                        order: Never married/single, Married, Widowed,\n                        Divorced; everything else will be treated as unknown;\n                        use an \"X\" instead of a value to skip a status\n  --same-state-of-residence-for-all SAME_STATE_OF_RESIDENCE_FOR_ALL\n                        State abbreviation/number for all subjects\n  --same-state-of-birth-for-all SAME_STATE_OF_BIRTH_FOR_ALL\n                        State abbreviation/number for all subjects\n  --age-at-death-units-for-all {MONTH,WEEK,DAY,HOUR,MINUTE}\n                        Specify units for age of death it not years.\n  --name-format NAME_FORMAT\n                        Format to parse full names. L=Last name, F=first name,\n                        M=Middle name, S=father name, X=ignore; algorithm will\n                        continue to add any character found to the name until\n                        the next non-[LFMSX] character is found\n  --date-format DATE_FORMAT\n                        Date format for parsing year/month/day from a date;\n                        for more documentation, see https://docs.python.org/de\n                        v/library/datetime.html#strftime-and-strptime-behavior\n  --sex-format SEX_FORMAT\n                        Specify the values for male/female if different than\n                        NDI using \"MALE,FEMALE\"; NDI default is \"M,F\" or \"1,2\"\n                        or \"M1,F2\"\n  --validate-generated-file [VALIDATE_GENERATED_FILE]\n                        Validate NDI file and output results to specified\n                        file.\n  --strip-lname-suffix [STRIP_LNAME_SUFFIX]\n                        Look for suffixes in lname column and strip them out;\n                        default: JR, SR, II, III, IV; if specifying an\n                        argument, use a comma-separated list as a single\n                        string\n  --strip-lname-suffix-attached [STRIP_LNAME_SUFFIX_ATTACHED]\n                        Look for suffixes in last word of lname column and\n                        strip them out even if they are attached to the word\n                        itself; default: JR, SR, II, III, IV; if specifying an\n                        argument, use a comma-separated list as a single\n                        string\n\noptional arguments:\n  --duplicate-records-on-lname\n                        If space or hyphen in last name, duplicate the subject\n                        into three records: 1) both together; 2) only the\n                        first part; 3) only the second part\n  --female-hyphen-lname-to-sname\n                        If hyphen in last name of female, duplicate the\n                        subject into two records: 1) both together; 2) only\n                        the first part with the second part in the father last\n                        name field\n  --duplicate-records-on-year-only\n                        Create 12 duplicate records if only a year and no\n                        month\n  --ignore-invalid-records\n                        Ignore records which invalid per NDI requirements due\n                        to insufficient information\n  --include-invalid-records\n                        Include records which invalid per NDI requirements due\n                        to insufficient information\n  --case-sensitive-columns\n                        All columns will be treated as case-sensitive.\n</code></pre>\n<h3>Advanced</h3>\n<h4>Multiple Columns</h4>\n<p>You can output multiple columns on most options (not names or birthdate due to complexities with how they are handled, and not id because that wouldn't make any sense) by inserting a comma-separated set of values to arguments.</p>\n<p>If the columns have the same input, only one output will be produced. If the columns have different values, then multiple records will be output.</p>\n<pre><code># option to look at two columns for state of residence\n# if PRIMARY_STATE == SECONDARY_STATE, only one record will be output\n--state-of-residence=PRIMARY_STATE,SECONDARY_STATE\n</code></pre>\n<h3>Validation</h3>\n<p>Validation is done during formatting to ensure that patients are eligible to be submitted to NDI (unless suppressed by <code>--ignore-invalid-record</code> option).</p>\n<p>Additional validation is available by including the [recommended] <code>--validate-generated-file VALIDATION_ERROR_FILE</code> option and to optionally supply a file. This will launch the validator on the NDI file generated by formatter.</p>\n<p>Validation comes in two forms:</p>\n<ol>\n<li>Is the data formatted correctly? (Done by validator)</li>\n<li>Is the record eligibile for NDI review? (Done by both formatter and validator)</li>\n</ol>\n<h1>License</h1>\n<p>MIT licensed: <a href=\"https://kpwhri.mit-license.org/\" rel=\"nofollow\">https://kpwhri.mit-license.org/</a></p>\n\n          </div>"}, "last_serial": 7108745, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "a7a6c275adbe576bfa78c946a550160c", "sha256": "1b05d337d906b11e932d44e1699b3b2ea9c75a9eb38a08ab7db93b09c1c63851"}, "downloads": -1, "filename": "ndi_formatter-0.2.zip", "has_sig": false, "md5_digest": "a7a6c275adbe576bfa78c946a550160c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21956, "upload_time": "2016-09-14T15:55:35", "upload_time_iso_8601": "2016-09-14T15:55:35.506018Z", "url": "https://files.pythonhosted.org/packages/e4/39/4cb1ea96e07935672a35758ed2866f80f725abbd423baffd83e414f8023c/ndi_formatter-0.2.zip", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "fc731567a401ecb553efa0d4ad07e247", "sha256": "b0533b55ce05b0d554d88717190f44d9544771daaea139fab0977a30ad4b59ac"}, "downloads": -1, "filename": "ndi_formatter-1.0.zip", "has_sig": false, "md5_digest": "fc731567a401ecb553efa0d4ad07e247", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21854, "upload_time": "2016-09-14T15:58:19", "upload_time_iso_8601": "2016-09-14T15:58:19.200036Z", "url": "https://files.pythonhosted.org/packages/90/86/2b7f9ec9a99bf462edcf688d0285e7ae6cfab5ffccf3a1fbba191561abb9/ndi_formatter-1.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "d22b2f2b263bbe7433f669aa3bf6680e", "sha256": "55512b8c86633d40aa0cd0c869c107b4fdddaff603b7c39f44fba39725a698e7"}, "downloads": -1, "filename": "ndi_formatter-1.0.1.zip", "has_sig": false, "md5_digest": "d22b2f2b263bbe7433f669aa3bf6680e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21953, "upload_time": "2016-09-15T00:47:07", "upload_time_iso_8601": "2016-09-15T00:47:07.264625Z", "url": "https://files.pythonhosted.org/packages/77/33/32e9474c89aed4ef20b967e8f4315975e8362a8b3f5d056b4f929d338fc8/ndi_formatter-1.0.1.zip", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "019e697bcd3bbd616856124246139e6f", "sha256": "ff36f1f428c40fce604000fa3b4084710ab18dbc302a1db969a134785b4183de"}, "downloads": -1, "filename": "ndi_formatter-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "019e697bcd3bbd616856124246139e6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18515, "upload_time": "2019-11-07T18:01:40", "upload_time_iso_8601": "2019-11-07T18:01:40.064541Z", "url": "https://files.pythonhosted.org/packages/66/9e/ae3120e75f35b42d5763d2da815fdddeb841067a40f1fce4417be9f5e228/ndi_formatter-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "403a0a071dc082e9e89ccc6f744d9ee0", "sha256": "ecda57d8629a5caedd3bf9d04449980ac91c0f25dba990b392817a9f0f8b40e1"}, "downloads": -1, "filename": "ndi_formatter-1.0.3.tar.gz", "has_sig": false, "md5_digest": "403a0a071dc082e9e89ccc6f744d9ee0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19911, "upload_time": "2019-11-07T18:01:41", "upload_time_iso_8601": "2019-11-07T18:01:41.560179Z", "url": "https://files.pythonhosted.org/packages/3a/b5/ac28e0c9585d66e7402d6d70d18aa79f159b6772c3f2e6ba8ac418b7e2b9/ndi_formatter-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "f5ac163230788c12454e2f14250d5926", "sha256": "517b8eeb3d6c8a0ecf61539344de156d5707ce43fb48a479272361fa0d0b670a"}, "downloads": -1, "filename": "ndi_formatter-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f5ac163230788c12454e2f14250d5926", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18130, "upload_time": "2020-04-27T05:28:12", "upload_time_iso_8601": "2020-04-27T05:28:12.593333Z", "url": "https://files.pythonhosted.org/packages/2c/91/ad08579072af383de2864b6a7b4effff781304acc201f5140f057f3e81c5/ndi_formatter-1.0.4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5ac163230788c12454e2f14250d5926", "sha256": "517b8eeb3d6c8a0ecf61539344de156d5707ce43fb48a479272361fa0d0b670a"}, "downloads": -1, "filename": "ndi_formatter-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f5ac163230788c12454e2f14250d5926", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18130, "upload_time": "2020-04-27T05:28:12", "upload_time_iso_8601": "2020-04-27T05:28:12.593333Z", "url": "https://files.pythonhosted.org/packages/2c/91/ad08579072af383de2864b6a7b4effff781304acc201f5140f057f3e81c5/ndi_formatter-1.0.4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:46:42 2020"}