{"info": {"author": "AdMobilize Team", "author_email": "devel@admobilize.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "==============================\nAdMobilize Python MALOS Driver\n==============================\nA simple `Python`_ coroutine based driver for communicating with malos-vision.\n\nLicense\n=======\n\nThis application follows the GNU General Public License, as described in the ``LICENSE`` file.\n\nInstalling\n==========\n\nThe package is available on PyPI, so you can easily install via pip:\n\n.. code-block:: console\n\n    $ pip install matrix-io-malos\n\n\nRunning the CLI client\n======================\n\nThe library includes a simple command line client to start reading data from\nyour MALOS service right away.\n\n.. code-block:: console\n\n    # Get the malosclient help screen\n    $ malosclient --help\n\n    # Get IMU data to STDOUT from a locally running MALOS service\n    $ malosclient IMU\n\n    # Get HUMIDITY data to STDOUT from a remotely running MALOS service\n    $ malosclient -h 192.168.0.100 HUMIDITY\n\n    # Get FACE detection data using a serialized driver config file\n    $ malosclient --driver-config-file ~/driver_config.proto VISION\n\n\nUsing the MalosDriver\n=====================\n\nTo use the MALOS driver works as an async generator so in your code\nyou can do the following:\n\n.. code-block:: python\n\n    import asyncio\n    import sys\n\n    from matrix_io.malos.driver import IMU_PORT, UV_PORT\n    from matrix_io.proto.malos.v1 import driver_pb2\n    from matrix_io.proto.malos.v1 import sense_pb2\n\n    from matrix_io.malos.driver import MalosDriver\n\n\n    async def imu_data(imu_driver):\n        async for msg in imu_driver.get_data():\n            print(sense_pb2.Imu().FromString(msg))\n            await asyncio.sleep(1.0)\n\n\n    async def uv_data(uv_driver):\n        async for msg in uv_driver.get_data():\n            print(sense_pb2.UV().FromString(msg))\n            await asyncio.sleep(1.0)\n\n\n    async def status_handler(driver):\n\n        type_mapping = {\n            driver_pb2.Status.MESSAGE_TYPE_NOT_DEFINED: \"Not Defined\",\n            driver_pb2.Status.STARTED: \"Started\",\n            driver_pb2.Status.STOPPED: \"Stopped\",\n            driver_pb2.Status.CONFIG_RECEIVED: \"Config Received\",\n            driver_pb2.Status.COMMAND_EXECUTED: \"Command Executed\",\n            driver_pb2.Status.STATUS_CRITICAL: \"Critical\",\n            driver_pb2.Status.STATUS_ERROR: \"Error\",\n            driver_pb2.Status.STATUS_WARNING: \"Warning\",\n            driver_pb2.Status.STATUS_INFO: \"Info\",\n            driver_pb2.Status.STATUS_DEBUG: \"Debug\"\n        }\n\n        async for msg in driver.get_status():\n            print(type_mapping[msg.type])\n\n            if msg.uuid:\n                print(\"UUID: {}\".format(msg.uuid))\n            if msg.message:\n                print(\"MESSAGE: {}\".format(msg.message))\n\n            await asyncio.sleep(1.0)\n\n\n    # Driver configuration\n    driver_config = driver_pb2.DriverConfig()\n\n    # Create the drivers\n    imu_driver = MalosDriver('localhost', IMU_PORT)\n    uv_driver = MalosDriver('localhost', UV_PORT)\n\n    # Create loop and initialize keep-alive\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(imu_driver.configure(driver_config))\n    loop.run_until_complete(uv_driver.configure(driver_config))\n    loop.create_task(imu_driver.start_keep_alive())\n    loop.create_task(uv_driver.start_keep_alive())\n\n    # Initialize data and error handlers\n    loop.create_task(imu_data(imu_driver))\n    loop.create_task(uv_data(uv_driver))\n    loop.create_task(status_handler(imu_driver))\n    loop.create_task(status_handler(uv_driver))\n\n    try:\n        loop.run_forever()\n    except KeyboardInterrupt:\n        print('Shutting down. Bye, bye !', file=sys.stderr)\n    finally:\n        loop.stop()\n        asyncio.gather(*asyncio.Task.all_tasks()).cancel()\n\n        loop.run_until_complete(loop.shutdown_asyncgens())\n        loop.close()\n\nWho can answer questions about this library?\n============================================\n\n- Heitor Silva <heitor.silva@admobilize.com>\n- Maciej Ruckgaber <maciek.ruckgaber@admobilize.com>\n\nMore Documentation\n==================\n\n...\n\n.. _0MQ: http://zeromq.org/\n.. _Python: https://www.python.org/\n.. _virtualenv: https://virtualenv.pypa.io/en/stable/\n.. _pypi: https://pypi.org/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.com/admobilize/malos-python", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "admobilize-malos", "package_url": "https://pypi.org/project/admobilize-malos/", "platform": "Posix; MacOS X; Windows", "project_url": "https://pypi.org/project/admobilize-malos/", "project_urls": {"Homepage": "https://bitbucket.com/admobilize/malos-python"}, "release_url": "https://pypi.org/project/admobilize-malos/0.0.1/", "requires_dist": ["docopt (>=0.6.2)", "admobilizeapis (>=0.0.32)", "pyzmq (>=18.0.1)"], "requires_python": ">=3.6.*", "summary": "AdMobilize Malos Library", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple <a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> coroutine based driver for communicating with malos-vision.</p>\n<div id=\"license\">\n<h2>License</h2>\n<p>This application follows the GNU General Public License, as described in the <tt>LICENSE</tt> file.</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>The package is available on PyPI, so you can easily install via pip:</p>\n<pre><span class=\"gp\">$</span> pip install matrix-io-malos\n</pre>\n</div>\n<div id=\"running-the-cli-client\">\n<h2>Running the CLI client</h2>\n<p>The library includes a simple command line client to start reading data from\nyour MALOS service right away.</p>\n<pre><span class=\"gp\">#</span> Get the malosclient <span class=\"nb\">help</span> screen\n<span class=\"gp\">$</span> malosclient --help\n<span class=\"go\">\n</span><span class=\"gp\">#</span> Get IMU data to STDOUT from a locally running MALOS service\n<span class=\"gp\">$</span> malosclient IMU\n<span class=\"go\">\n</span><span class=\"gp\">#</span> Get HUMIDITY data to STDOUT from a remotely running MALOS service\n<span class=\"gp\">$</span> malosclient -h <span class=\"m\">192</span>.168.0.100 HUMIDITY\n<span class=\"go\">\n</span><span class=\"gp\">#</span> Get FACE detection data using a serialized driver config file\n<span class=\"gp\">$</span> malosclient --driver-config-file ~/driver_config.proto VISION\n</pre>\n</div>\n<div id=\"using-the-malosdriver\">\n<h2>Using the MalosDriver</h2>\n<p>To use the MALOS driver works as an async generator so in your code\nyou can do the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">matrix_io.malos.driver</span> <span class=\"kn\">import</span> <span class=\"n\">IMU_PORT</span><span class=\"p\">,</span> <span class=\"n\">UV_PORT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matrix_io.proto.malos.v1</span> <span class=\"kn\">import</span> <span class=\"n\">driver_pb2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matrix_io.proto.malos.v1</span> <span class=\"kn\">import</span> <span class=\"n\">sense_pb2</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">matrix_io.malos.driver</span> <span class=\"kn\">import</span> <span class=\"n\">MalosDriver</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">imu_data</span><span class=\"p\">(</span><span class=\"n\">imu_driver</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">imu_driver</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sense_pb2</span><span class=\"o\">.</span><span class=\"n\">Imu</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">FromString</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">uv_data</span><span class=\"p\">(</span><span class=\"n\">uv_driver</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">uv_driver</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sense_pb2</span><span class=\"o\">.</span><span class=\"n\">UV</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">FromString</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">status_handler</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">):</span>\n\n    <span class=\"n\">type_mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">MESSAGE_TYPE_NOT_DEFINED</span><span class=\"p\">:</span> <span class=\"s2\">\"Not Defined\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">STARTED</span><span class=\"p\">:</span> <span class=\"s2\">\"Started\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">STOPPED</span><span class=\"p\">:</span> <span class=\"s2\">\"Stopped\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">CONFIG_RECEIVED</span><span class=\"p\">:</span> <span class=\"s2\">\"Config Received\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">COMMAND_EXECUTED</span><span class=\"p\">:</span> <span class=\"s2\">\"Command Executed\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">STATUS_CRITICAL</span><span class=\"p\">:</span> <span class=\"s2\">\"Critical\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">STATUS_ERROR</span><span class=\"p\">:</span> <span class=\"s2\">\"Error\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">STATUS_WARNING</span><span class=\"p\">:</span> <span class=\"s2\">\"Warning\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">STATUS_INFO</span><span class=\"p\">:</span> <span class=\"s2\">\"Info\"</span><span class=\"p\">,</span>\n        <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">STATUS_DEBUG</span><span class=\"p\">:</span> <span class=\"s2\">\"Debug\"</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get_status</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">type_mapping</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"UUID: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"MESSAGE: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Driver configuration</span>\n<span class=\"n\">driver_config</span> <span class=\"o\">=</span> <span class=\"n\">driver_pb2</span><span class=\"o\">.</span><span class=\"n\">DriverConfig</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create the drivers</span>\n<span class=\"n\">imu_driver</span> <span class=\"o\">=</span> <span class=\"n\">MalosDriver</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">IMU_PORT</span><span class=\"p\">)</span>\n<span class=\"n\">uv_driver</span> <span class=\"o\">=</span> <span class=\"n\">MalosDriver</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">UV_PORT</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create loop and initialize keep-alive</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">imu_driver</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">driver_config</span><span class=\"p\">))</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">uv_driver</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">driver_config</span><span class=\"p\">))</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">imu_driver</span><span class=\"o\">.</span><span class=\"n\">start_keep_alive</span><span class=\"p\">())</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">uv_driver</span><span class=\"o\">.</span><span class=\"n\">start_keep_alive</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Initialize data and error handlers</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">imu_data</span><span class=\"p\">(</span><span class=\"n\">imu_driver</span><span class=\"p\">))</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">uv_data</span><span class=\"p\">(</span><span class=\"n\">uv_driver</span><span class=\"p\">))</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">status_handler</span><span class=\"p\">(</span><span class=\"n\">imu_driver</span><span class=\"p\">))</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">status_handler</span><span class=\"p\">(</span><span class=\"n\">uv_driver</span><span class=\"p\">))</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Shutting down. Bye, bye !'</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">all_tasks</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">shutdown_asyncgens</span><span class=\"p\">())</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"who-can-answer-questions-about-this-library\">\n<h2>Who can answer questions about this library?</h2>\n<ul>\n<li>Heitor Silva &lt;<a href=\"mailto:heitor.silva%40admobilize.com\">heitor<span>.</span>silva<span>@</span>admobilize<span>.</span>com</a>&gt;</li>\n<li>Maciej Ruckgaber &lt;<a href=\"mailto:maciek.ruckgaber%40admobilize.com\">maciek<span>.</span>ruckgaber<span>@</span>admobilize<span>.</span>com</a>&gt;</li>\n</ul>\n</div>\n<div id=\"more-documentation\">\n<h2>More Documentation</h2>\n<p>\u2026</p>\n</div>\n\n          </div>"}, "last_serial": 6029719, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ecbe06baef58990022b630bd8a691c76", "sha256": "ce26c3e3852c377c087c365589a6f6d60e333439310c39a93ff1ca52ebe482e5"}, "downloads": -1, "filename": "admobilize_malos-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ecbe06baef58990022b630bd8a691c76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 21451, "upload_time": "2019-10-25T13:49:02", "upload_time_iso_8601": "2019-10-25T13:49:02.457111Z", "url": "https://files.pythonhosted.org/packages/74/8f/d1be5c83ba22883d76be43008feff26bdcdf0bc9b31b8a4d9f95d9f7181f/admobilize_malos-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37aaa4ef0db39c6df72e3a4d6b95be54", "sha256": "52e8d9250b27dc5f9d96a88e35d6cd6d1c3e384568fbf788b529e57e657cf5bf"}, "downloads": -1, "filename": "admobilize-malos-0.0.1.tar.gz", "has_sig": false, "md5_digest": "37aaa4ef0db39c6df72e3a4d6b95be54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 7647, "upload_time": "2019-10-25T13:49:04", "upload_time_iso_8601": "2019-10-25T13:49:04.646299Z", "url": "https://files.pythonhosted.org/packages/7a/48/9196826738982ecc054ff675fb59f70e5afca0af0d1eb82db2925449b7dd/admobilize-malos-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ecbe06baef58990022b630bd8a691c76", "sha256": "ce26c3e3852c377c087c365589a6f6d60e333439310c39a93ff1ca52ebe482e5"}, "downloads": -1, "filename": "admobilize_malos-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ecbe06baef58990022b630bd8a691c76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 21451, "upload_time": "2019-10-25T13:49:02", "upload_time_iso_8601": "2019-10-25T13:49:02.457111Z", "url": "https://files.pythonhosted.org/packages/74/8f/d1be5c83ba22883d76be43008feff26bdcdf0bc9b31b8a4d9f95d9f7181f/admobilize_malos-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37aaa4ef0db39c6df72e3a4d6b95be54", "sha256": "52e8d9250b27dc5f9d96a88e35d6cd6d1c3e384568fbf788b529e57e657cf5bf"}, "downloads": -1, "filename": "admobilize-malos-0.0.1.tar.gz", "has_sig": false, "md5_digest": "37aaa4ef0db39c6df72e3a4d6b95be54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 7647, "upload_time": "2019-10-25T13:49:04", "upload_time_iso_8601": "2019-10-25T13:49:04.646299Z", "url": "https://files.pythonhosted.org/packages/7a/48/9196826738982ecc054ff675fb59f70e5afca0af0d1eb82db2925449b7dd/admobilize-malos-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:18 2020"}