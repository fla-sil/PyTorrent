{"info": {"author": "Jeremy Howard", "author_email": "info@fast.ai", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "<!--\n\n#################################################\n### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###\n#################################################\n# file to edit: index.ipynb\n# command to build the docs after a change: nbdev_build_docs\n\n-->\n\n# fastscript\n\n> A fast way to turn your python function into a script.\n\n\nPart of [fast.ai](https://www.fast.ai)'s toolkit for delightful developer experiences. Written by Jeremy Howard.\n\n## Install\n\n`pip install fastscript`\n\n## Overview\n\nSometimes, you want to create a quick script, either for yourself, or for others. But in Python, that involves a whole lot of boilerplate and ceremony, especially if you want to support command line arguments, provide help, and other niceties. You can use [argparse](https://docs.python.org/3/library/argparse.html) for this purpose, which comes with Python, but it's complex and verbose.\n\n`fastscript` makes life easier. There are much fancier modules to help you write scripts (we recommend [Python Fire](https://github.com/google/python-fire), and [Click](https://click.palletsprojects.com/en/7.x/) is also popular), but fastscript is very fast and very simple. In fact, it's <50 lines of code! Basically, it's just a little wrapper around `argparse` that uses modern Python features and some thoughtful defaults to get rid of the boilerplate.\n\n## Example\n\nHere's a complete example - it's provided in the fastscript repo as `examples/test_fastscript.py`:\n\n```python\nfrom fastscript import *\n@call_parse\ndef main(msg:Param(\"The message\", str),\n         upper:Param(\"Convert to uppercase?\", bool_arg)=False):\n    print(msg.upper() if upper else msg)\n````\n\nWhen you run this script, you'll see:\n\n```\n$ python examples/test_fastscript.py\nusage: test_fastscript.py [-h] [--upper UPPER] msg\ntest_fastscript.py: error: the following arguments are required: msg\n```\n\nAs you see, we didn't need any `if __name__ == \"__main__\"`, we didn't have to parse arguments, we just wrote a function, added a decorator to it, and added some annotations to our function's parameters. As a bonus, we can also use this function directly from a REPL such as Jupyter Notebook - it's not just for command line scripts!\n\n## Param\n\nEach parameter in your function should have an annotation `Param(...)` (as in the example above). You can pass the following when calling `Param`: `help`,`type`,`opt`,`action`,`nargs`,`const`,`choices`,`required` . Except for `opt`, all of these are just passed directly to `argparse`, so you have all the power of that module at your disposal. Generally you'll want to pass at least `help` (since this is provided as the help string for that parameter) and `type` (to ensure that you get the type of data you expect). `opt` is a bool that defines whether a param is optional or required (positional) - but you'll generally not need to set this manually, because fastscript will set it for you automatically based on *default* values.\n\nYou should provide a default (after the `=`) for any *optional* parameters. If you don't provide a default for a parameter, then it will be a *positional* parameter.\n\n## setuptools scripts\n\nThere's a really nice feature of pip/setuptools that lets you create commandline scripts directly from functions, makes them available in the `PATH`, and even makes your scripts cross-platform (e.g. in Windows it creates an exe). fastscript supports this feature too. To use it, follow [this example](fastscript/test_cli.py) from `fastscript/test_cli.py` in the repo. As you see, it's basically identical to the script example above, except that we can treat it as a module. The trick to making this available as a script is to add a `console_scripts` section to your setup file, of the form: `script_name=module:function_name`. E.g. in this case we use: `test_fastscript=fastscript.test_cli:main`. With this, you can then just type `test_fastscript` at any time, from any directory, and your script will be called (once it's installed using one of the methods below).\n\nYou don't actually have to write a `setup.py` yourself. Instead, just copy the setup.py we have in the fastscript repo, and copy `settings.ini` as well. Then modify `settings.ini` as appropriate for your module/script. Then, to install your script directly, you can type `pip install -e .`. Your script, when installed this way (it's called an [editable install](http://codumentary.blogspot.com/2014/11/python-tip-of-year-pip-install-editable.html), will automatically be up to date even if you edit it - there's no need to reinstall it after editing.\n\nYou can even make your module and script available for installation directly from pip by running `make`. There shouldn't be anything else to edit - you just need to make sure you have an account on [pypi](https://pypi.org/) and have set up a [.pypirc file](https://docs.python.org/3.3/distutils/packageindex.html#the-pypirc-file).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fastai/fastscript", "keywords": "cli python fastai interactive bash tool", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "fastscript", "package_url": "https://pypi.org/project/fastscript/", "platform": "", "project_url": "https://pypi.org/project/fastscript/", "project_urls": {"Homepage": "https://github.com/fastai/fastscript"}, "release_url": "https://pypi.org/project/fastscript/0.1.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A fast way to turn your python function into a script", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fastscript</h1>\n<blockquote>\n<p>A fast way to turn your python function into a script.</p>\n</blockquote>\n<p>Part of <a href=\"https://www.fast.ai\" rel=\"nofollow\">fast.ai</a>'s toolkit for delightful developer experiences. Written by Jeremy Howard.</p>\n<h2>Install</h2>\n<p><code>pip install fastscript</code></p>\n<h2>Overview</h2>\n<p>Sometimes, you want to create a quick script, either for yourself, or for others. But in Python, that involves a whole lot of boilerplate and ceremony, especially if you want to support command line arguments, provide help, and other niceties. You can use <a href=\"https://docs.python.org/3/library/argparse.html\" rel=\"nofollow\">argparse</a> for this purpose, which comes with Python, but it's complex and verbose.</p>\n<p><code>fastscript</code> makes life easier. There are much fancier modules to help you write scripts (we recommend <a href=\"https://github.com/google/python-fire\" rel=\"nofollow\">Python Fire</a>, and <a href=\"https://click.palletsprojects.com/en/7.x/\" rel=\"nofollow\">Click</a> is also popular), but fastscript is very fast and very simple. In fact, it's &lt;50 lines of code! Basically, it's just a little wrapper around <code>argparse</code> that uses modern Python features and some thoughtful defaults to get rid of the boilerplate.</p>\n<h2>Example</h2>\n<p>Here's a complete example - it's provided in the fastscript repo as <code>examples/test_fastscript.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fastscript</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"nd\">@call_parse</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"n\">Param</span><span class=\"p\">(</span><span class=\"s2\">\"The message\"</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">),</span>\n         <span class=\"n\">upper</span><span class=\"p\">:</span><span class=\"n\">Param</span><span class=\"p\">(</span><span class=\"s2\">\"Convert to uppercase?\"</span><span class=\"p\">,</span> <span class=\"n\">bool_arg</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">upper</span> <span class=\"k\">else</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n</pre>\n<p>When you run this script, you'll see:</p>\n<pre><code>$ python examples/test_fastscript.py\nusage: test_fastscript.py [-h] [--upper UPPER] msg\ntest_fastscript.py: error: the following arguments are required: msg\n</code></pre>\n<p>As you see, we didn't need any <code>if __name__ == \"__main__\"</code>, we didn't have to parse arguments, we just wrote a function, added a decorator to it, and added some annotations to our function's parameters. As a bonus, we can also use this function directly from a REPL such as Jupyter Notebook - it's not just for command line scripts!</p>\n<h2>Param</h2>\n<p>Each parameter in your function should have an annotation <code>Param(...)</code> (as in the example above). You can pass the following when calling <code>Param</code>: <code>help</code>,<code>type</code>,<code>opt</code>,<code>action</code>,<code>nargs</code>,<code>const</code>,<code>choices</code>,<code>required</code> . Except for <code>opt</code>, all of these are just passed directly to <code>argparse</code>, so you have all the power of that module at your disposal. Generally you'll want to pass at least <code>help</code> (since this is provided as the help string for that parameter) and <code>type</code> (to ensure that you get the type of data you expect). <code>opt</code> is a bool that defines whether a param is optional or required (positional) - but you'll generally not need to set this manually, because fastscript will set it for you automatically based on <em>default</em> values.</p>\n<p>You should provide a default (after the <code>=</code>) for any <em>optional</em> parameters. If you don't provide a default for a parameter, then it will be a <em>positional</em> parameter.</p>\n<h2>setuptools scripts</h2>\n<p>There's a really nice feature of pip/setuptools that lets you create commandline scripts directly from functions, makes them available in the <code>PATH</code>, and even makes your scripts cross-platform (e.g. in Windows it creates an exe). fastscript supports this feature too. To use it, follow <a href=\"fastscript/test_cli.py\" rel=\"nofollow\">this example</a> from <code>fastscript/test_cli.py</code> in the repo. As you see, it's basically identical to the script example above, except that we can treat it as a module. The trick to making this available as a script is to add a <code>console_scripts</code> section to your setup file, of the form: <code>script_name=module:function_name</code>. E.g. in this case we use: <code>test_fastscript=fastscript.test_cli:main</code>. With this, you can then just type <code>test_fastscript</code> at any time, from any directory, and your script will be called (once it's installed using one of the methods below).</p>\n<p>You don't actually have to write a <code>setup.py</code> yourself. Instead, just copy the setup.py we have in the fastscript repo, and copy <code>settings.ini</code> as well. Then modify <code>settings.ini</code> as appropriate for your module/script. Then, to install your script directly, you can type <code>pip install -e .</code>. Your script, when installed this way (it's called an <a href=\"http://codumentary.blogspot.com/2014/11/python-tip-of-year-pip-install-editable.html\" rel=\"nofollow\">editable install</a>, will automatically be up to date even if you edit it - there's no need to reinstall it after editing.</p>\n<p>You can even make your module and script available for installation directly from pip by running <code>make</code>. There shouldn't be anything else to edit - you just need to make sure you have an account on <a href=\"https://pypi.org/\" rel=\"nofollow\">pypi</a> and have set up a <a href=\"https://docs.python.org/3.3/distutils/packageindex.html#the-pypirc-file\" rel=\"nofollow\">.pypirc file</a>.</p>\n\n          </div>"}, "last_serial": 6386874, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "38b1155c2203d654ee62b65c9e6d2e8c", "sha256": "326b3d12354ab2452d6faa47878aa60c4553ab6e67eb19a0d002f5f0bf2b3e94"}, "downloads": -1, "filename": "fastscript-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "38b1155c2203d654ee62b65c9e6d2e8c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7167, "upload_time": "2019-11-23T13:20:43", "upload_time_iso_8601": "2019-11-23T13:20:43.637145Z", "url": "https://files.pythonhosted.org/packages/b0/1d/f1a1c47b93b30dd78b0f8028dad2530c8dd22e9a6db454db37b0e204ae3b/fastscript-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62d6d857fc556c1f270a701bfdab54b7", "sha256": "54c6a56ee033eab3eefd69f0c6f383e5fffb54303bcf75aa9ac1b2f003aeb0d7"}, "downloads": -1, "filename": "fastscript-0.0.1.tar.gz", "has_sig": false, "md5_digest": "62d6d857fc556c1f270a701bfdab54b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2728, "upload_time": "2019-11-23T13:20:45", "upload_time_iso_8601": "2019-11-23T13:20:45.770552Z", "url": "https://files.pythonhosted.org/packages/7b/d8/c172908fa958055ffd8a31d8093d9e049ef986f271dc418b0b0984acfe71/fastscript-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "65a2951e3bd08ab03dde2a23386108c8", "sha256": "f379964780268b79f58cdf91bfea33bcbe0df50bc11c552d3f3cb30ce3ba1d40"}, "downloads": -1, "filename": "fastscript-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "65a2951e3bd08ab03dde2a23386108c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9066, "upload_time": "2019-11-23T19:45:26", "upload_time_iso_8601": "2019-11-23T19:45:26.026663Z", "url": "https://files.pythonhosted.org/packages/66/c2/33054d05cdb9c818678464f5a5357c29ece858e9d23c7e288ff4d5f9f9b6/fastscript-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46d48a8cb6a928d037e480d95528ef09", "sha256": "12bdd53fffab0a2478bd4ac0456d9aa9be3eabef2ae1daf31d1de593c3875b7d"}, "downloads": -1, "filename": "fastscript-0.1.0.tar.gz", "has_sig": false, "md5_digest": "46d48a8cb6a928d037e480d95528ef09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4737, "upload_time": "2019-11-23T19:45:27", "upload_time_iso_8601": "2019-11-23T19:45:27.413810Z", "url": "https://files.pythonhosted.org/packages/40/91/1572534830fafef6705f260a4c79207d17833a898bcdeec01307d8fed6c4/fastscript-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "75e04d943584158cf540c4b669cb40fa", "sha256": "e79b60f1dee4f1d1dfb5a62d91d41578bf5e903e23546f15c49cfcb389a83e7a"}, "downloads": -1, "filename": "fastscript-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "75e04d943584158cf540c4b669cb40fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9147, "upload_time": "2019-11-23T20:17:04", "upload_time_iso_8601": "2019-11-23T20:17:04.808206Z", "url": "https://files.pythonhosted.org/packages/09/36/c6a2a3887b040f38d2cfdd6d2e838d34972cb60a2eed17acea349c15f042/fastscript-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d82791f585aeecfa706ca8a26581d09", "sha256": "0640a44bcc843f611696bcfbfa9230aabfd04df012e695e76446d8b3255667ec"}, "downloads": -1, "filename": "fastscript-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6d82791f585aeecfa706ca8a26581d09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4847, "upload_time": "2019-11-23T20:17:06", "upload_time_iso_8601": "2019-11-23T20:17:06.411505Z", "url": "https://files.pythonhosted.org/packages/3e/a5/9db75104f1bc207a73123d781d126a4dd974a869725115e601f066a68ae5/fastscript-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "198146bcf4a787fbfee2b7372157ca52", "sha256": "e9a5da27ef041fa76afe95e3e8069c3ccd3580831d440aa70c721e326945c5fc"}, "downloads": -1, "filename": "fastscript-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "198146bcf4a787fbfee2b7372157ca52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9180, "upload_time": "2019-11-24T04:21:14", "upload_time_iso_8601": "2019-11-24T04:21:14.691902Z", "url": "https://files.pythonhosted.org/packages/1f/c6/e1400fb91a5cc0557289e90e56821d4bb76bf87f1abf0c27e774310a26e6/fastscript-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c5836eb1532677a81bb4fe7e08e85a1", "sha256": "33df31166fd6b8386c7f1cd7a3c614ef8571b0ca765ce1262b1fbeecd7da0e63"}, "downloads": -1, "filename": "fastscript-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7c5836eb1532677a81bb4fe7e08e85a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4859, "upload_time": "2019-11-24T04:21:15", "upload_time_iso_8601": "2019-11-24T04:21:15.916988Z", "url": "https://files.pythonhosted.org/packages/8d/8e/3177a8719c1b07f6a337046b27907791fe98360a3658aee4aeeb06f97353/fastscript-0.1.2.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "9073b4c7fe87b6a70990ffd79b951662", "sha256": "c495d13b827963981568a7f48cb5291cafef7f3cbc6adbb6f0cb1e4db26f4ca3"}, "downloads": -1, "filename": "fastscript-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9073b4c7fe87b6a70990ffd79b951662", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11143, "upload_time": "2020-01-02T16:49:19", "upload_time_iso_8601": "2020-01-02T16:49:19.252792Z", "url": "https://files.pythonhosted.org/packages/55/0e/ecdc0213646bc82986884121109a38b50bbc2cd2c491bbbfdc7ae39228e3/fastscript-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30444834714ec2ada4459941a6ff7ad6", "sha256": "a0fd479b17ac063d4005d72140280b426f66ee503fb39dc5e4c2550fb28ba19a"}, "downloads": -1, "filename": "fastscript-0.1.4.tar.gz", "has_sig": false, "md5_digest": "30444834714ec2ada4459941a6ff7ad6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5612, "upload_time": "2020-01-02T16:49:20", "upload_time_iso_8601": "2020-01-02T16:49:20.938782Z", "url": "https://files.pythonhosted.org/packages/f5/76/8952e93d20525c604e50179f5a57c2e76f5d195ef337fda25a6702b0af5c/fastscript-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9073b4c7fe87b6a70990ffd79b951662", "sha256": "c495d13b827963981568a7f48cb5291cafef7f3cbc6adbb6f0cb1e4db26f4ca3"}, "downloads": -1, "filename": "fastscript-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9073b4c7fe87b6a70990ffd79b951662", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11143, "upload_time": "2020-01-02T16:49:19", "upload_time_iso_8601": "2020-01-02T16:49:19.252792Z", "url": "https://files.pythonhosted.org/packages/55/0e/ecdc0213646bc82986884121109a38b50bbc2cd2c491bbbfdc7ae39228e3/fastscript-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30444834714ec2ada4459941a6ff7ad6", "sha256": "a0fd479b17ac063d4005d72140280b426f66ee503fb39dc5e4c2550fb28ba19a"}, "downloads": -1, "filename": "fastscript-0.1.4.tar.gz", "has_sig": false, "md5_digest": "30444834714ec2ada4459941a6ff7ad6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5612, "upload_time": "2020-01-02T16:49:20", "upload_time_iso_8601": "2020-01-02T16:49:20.938782Z", "url": "https://files.pythonhosted.org/packages/f5/76/8952e93d20525c604e50179f5a57c2e76f5d195ef337fda25a6702b0af5c/fastscript-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:24 2020"}