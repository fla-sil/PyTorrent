{"info": {"author": "Marc Tamlyn", "author_email": "marc.tamlyn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"], "description": "Django-cbvpatterns\n==================\n\nA nicer version of `patterns()` for use with class based views. Inspired\nlargely by Loic.\n\nWhat is this?\n-------------\n\nIf you're a big fan of class based views in Django, you might often find your\nurls.py starting to look a little cluttered. Something like\n\n    from django.conf.urls import patterns, url\n\n    from ponies import views\n\n\n    urlpatterns = patterns('',\n        url(r'^$', views.Index.as_view(), name='index'),\n        url(r'^ponies/$', views.PonyList.as_view(), name='pony-list'),\n        url(r'^ponies/create/$', views.PonyCreate.as_view(), name='pony-create'),\n        url(r'^ponies/(?P<pk>\\d+)/$', views.PonyDetail.as_view(), name='pony-detail'),\n        url(r'^ponies/(?P<pk>\\d+)/edit/$', views.PonyUpdate.as_view(), name='pony-update'),\n    )\n\nThe shortcuts you can use in patterns are really functional-view specific. The\nfunctional version looks much nicer:\n\n    from django.conf.urls import patterns, url\n\n\n    urlpatterns = patterns('ponies.views',\n        url(r'^$', 'index', name='index'),\n        url(r'^ponies/$', 'pony_list', name='pony-list'),\n        url(r'^ponies/create/$', 'pony_create', name='pony-create'),\n        url(r'^ponies/(?P<pk>\\d+)/$', 'pony_detail', name='pony-detail'),\n        url(r'^ponies/(?P<pk>\\d+)/edit/$', 'pony_update, name='pony-update'),\n    )\n\nSo we can now have a class based view version which has the same feel:\n\n    from cbvpatterns import patterns, url\n\n\n    urlpatterns = patterns('ponies.views',\n        url(r'^$', 'Index', name='index'),\n        url(r'^ponies/$', 'PonyList', name='pony-list'),\n        url(r'^ponies/create/$', 'PonyCreate', name='pony-create'),\n        url(r'^ponies/(?P<pk>\\d+)/$', 'PonyDetail', name='pony-detail'),\n        url(r'^ponies/(?P<pk>\\d+)/edit/$', 'PonyUpdate, name='pony-update'),\n    )\n\nYou can also pass in the actual view classes directly, rather than using the\nstrnig representation.\n\nContributing\n------------\n\nDevelopment takes place\n`on GitHub <http://github.com/mjtamlyn/django-cbvpatterns>`_; pull requests are\nwelcome. Run tests with `tox <http://tox.readthedocs.org/>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mjtamlyn/django-cbvpatterns", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-cbvpatterns", "package_url": "https://pypi.org/project/django-cbvpatterns/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-cbvpatterns/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mjtamlyn/django-cbvpatterns"}, "release_url": "https://pypi.org/project/django-cbvpatterns/0.1/", "requires_dist": null, "requires_python": null, "summary": "A better patterns() for classbased views", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Django-cbvpatterns<br>==================<br><br>A nicer version of `patterns()` for use with class based views. Inspired<br>largely by Loic.<br><br>What is this?<br>-------------<br><br>If you're a big fan of class based views in Django, you might often find your<br>urls.py starting to look a little cluttered. Something like<br><br>    from django.conf.urls import patterns, url<br><br>    from ponies import views<br><br><br>    urlpatterns = patterns('',<br>        url(r'^$', views.Index.as_view(), name='index'),<br>        url(r'^ponies/$', views.PonyList.as_view(), name='pony-list'),<br>        url(r'^ponies/create/$', views.PonyCreate.as_view(), name='pony-create'),<br>        url(r'^ponies/(?P&lt;pk&gt;\\d+)/$', views.PonyDetail.as_view(), name='pony-detail'),<br>        url(r'^ponies/(?P&lt;pk&gt;\\d+)/edit/$', views.PonyUpdate.as_view(), name='pony-update'),<br>    )<br><br>The shortcuts you can use in patterns are really functional-view specific. The<br>functional version looks much nicer:<br><br>    from django.conf.urls import patterns, url<br><br><br>    urlpatterns = patterns('ponies.views',<br>        url(r'^$', 'index', name='index'),<br>        url(r'^ponies/$', 'pony_list', name='pony-list'),<br>        url(r'^ponies/create/$', 'pony_create', name='pony-create'),<br>        url(r'^ponies/(?P&lt;pk&gt;\\d+)/$', 'pony_detail', name='pony-detail'),<br>        url(r'^ponies/(?P&lt;pk&gt;\\d+)/edit/$', 'pony_update, name='pony-update'),<br>    )<br><br>So we can now have a class based view version which has the same feel:<br><br>    from cbvpatterns import patterns, url<br><br><br>    urlpatterns = patterns('ponies.views',<br>        url(r'^$', 'Index', name='index'),<br>        url(r'^ponies/$', 'PonyList', name='pony-list'),<br>        url(r'^ponies/create/$', 'PonyCreate', name='pony-create'),<br>        url(r'^ponies/(?P&lt;pk&gt;\\d+)/$', 'PonyDetail', name='pony-detail'),<br>        url(r'^ponies/(?P&lt;pk&gt;\\d+)/edit/$', 'PonyUpdate, name='pony-update'),<br>    )<br><br>You can also pass in the actual view classes directly, rather than using the<br>strnig representation.<br><br>Contributing<br>------------<br><br>Development takes place<br>`on GitHub &lt;http://github.com/mjtamlyn/django-cbvpatterns&gt;`_; pull requests are<br>welcome. Run tests with `tox &lt;http://tox.readthedocs.org/&gt;`_.\n          </div>"}, "last_serial": 951998, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a764864ce9892826291e9a55aa6dfb96", "sha256": "6d7209b48344e2a93ee77f0329f97613ddbb6e12f74195ba74ec14d3cf236075"}, "downloads": -1, "filename": "django-cbvpatterns-0.1.tar.gz", "has_sig": false, "md5_digest": "a764864ce9892826291e9a55aa6dfb96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2617, "upload_time": "2013-12-22T21:16:21", "upload_time_iso_8601": "2013-12-22T21:16:21.496356Z", "url": "https://files.pythonhosted.org/packages/e4/fa/1e89795d2f37f336a46c1e4526e6da77be13f108c2dcbbaab436a6fc103d/django-cbvpatterns-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a764864ce9892826291e9a55aa6dfb96", "sha256": "6d7209b48344e2a93ee77f0329f97613ddbb6e12f74195ba74ec14d3cf236075"}, "downloads": -1, "filename": "django-cbvpatterns-0.1.tar.gz", "has_sig": false, "md5_digest": "a764864ce9892826291e9a55aa6dfb96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2617, "upload_time": "2013-12-22T21:16:21", "upload_time_iso_8601": "2013-12-22T21:16:21.496356Z", "url": "https://files.pythonhosted.org/packages/e4/fa/1e89795d2f37f336a46c1e4526e6da77be13f108c2dcbbaab436a6fc103d/django-cbvpatterns-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:14 2020"}