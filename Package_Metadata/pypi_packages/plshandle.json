{"info": {"author": "v7a", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "# plshandle\nCreate an explicit contract between caller and function that requires the caller to handle specific\nexceptions raised by the function.\n\n### Why\nSometimes, we just _have to_ recover from an error. And because you are a human being, you might not\nalways keep exception handling in mind at all times. This tool helps reduce this mental overhead by\nreporting all contract violations.\n\n### How\nA simple example:\n```py\nfrom plshandle import plshandle\n\n@plshandle(KeyError)\ndef get_item(key):\n    return {}[key]\n\nget_item(0)  # tool reports this call expression as a contract violation\n```\nIt is also possible to propagate errors, similar to Java:\n```py\n@plshandle(KeyError)\ndef foo():\n    return get_item(0)  # o.k., KeyError is propagated, caller's responsibility to handle it\n```\nNote: This tool performs static analysis only. As such, dynamic constructs are most likely not supported:\n```py\n@plshandle(KeyError)\ndef foo():\n    pass\ndef bar(callback):\n    callback()  # nothing reported\nbar(foo)\n```\nRefer to https://plshandle.readthedocs.io for more in-depth examples.\n\n### Before committing\n\n_Fetch development dependencies_\n```\npip -r requirements-dev.txt\n```\n_Ensure there are no linting errors_\n```sh\npylint plshandle && mypy -p plshandle\n```\n_Ensure all tests are successful and code coverage is 100%_\n```sh\npytest && coverage report --fail-under=100\n```\n_Reformat all files_\n```sh\nblack plshandle\n```\n_Or just do this if you have make installed_\n```sh\nmake check\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/v7a/plshandle", "keywords": "exception,contract,error handling", "license": "", "maintainer": "", "maintainer_email": "", "name": "plshandle", "package_url": "https://pypi.org/project/plshandle/", "platform": "", "project_url": "https://pypi.org/project/plshandle/", "project_urls": {"Documentation": "https://plshandle.readthedocs.io", "Homepage": "https://github.com/v7a/plshandle", "Source": "https://github.com/v7a/plshandle", "Tracker": "https://github.com/v7a/plshandle/issues"}, "release_url": "https://pypi.org/project/plshandle/0.1/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>plshandle</h1>\n<p>Create an explicit contract between caller and function that requires the caller to handle specific\nexceptions raised by the function.</p>\n<h3>Why</h3>\n<p>Sometimes, we just <em>have to</em> recover from an error. And because you are a human being, you might not\nalways keep exception handling in mind at all times. This tool helps reduce this mental overhead by\nreporting all contract violations.</p>\n<h3>How</h3>\n<p>A simple example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plshandle</span> <span class=\"kn\">import</span> <span class=\"n\">plshandle</span>\n\n<span class=\"nd\">@plshandle</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_item</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{}[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n<span class=\"n\">get_item</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># tool reports this call expression as a contract violation</span>\n</pre>\n<p>It is also possible to propagate errors, similar to Java:</p>\n<pre><span class=\"nd\">@plshandle</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_item</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># o.k., KeyError is propagated, caller's responsibility to handle it</span>\n</pre>\n<p>Note: This tool performs static analysis only. As such, dynamic constructs are most likely not supported:</p>\n<pre><span class=\"nd\">@plshandle</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">):</span>\n    <span class=\"n\">callback</span><span class=\"p\">()</span>  <span class=\"c1\"># nothing reported</span>\n<span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n</pre>\n<p>Refer to <a href=\"https://plshandle.readthedocs.io\" rel=\"nofollow\">https://plshandle.readthedocs.io</a> for more in-depth examples.</p>\n<h3>Before committing</h3>\n<p><em>Fetch development dependencies</em></p>\n<pre><code>pip -r requirements-dev.txt\n</code></pre>\n<p><em>Ensure there are no linting errors</em></p>\n<pre>pylint plshandle <span class=\"o\">&amp;&amp;</span> mypy -p plshandle\n</pre>\n<p><em>Ensure all tests are successful and code coverage is 100%</em></p>\n<pre>pytest <span class=\"o\">&amp;&amp;</span> coverage report --fail-under<span class=\"o\">=</span><span class=\"m\">100</span>\n</pre>\n<p><em>Reformat all files</em></p>\n<pre>black plshandle\n</pre>\n<p><em>Or just do this if you have make installed</em></p>\n<pre>make check\n</pre>\n\n          </div>"}, "last_serial": 7032644, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d613a712aa20219ceed1d8ceafd3c16c", "sha256": "b0a1ae215df702e1a3e0e5eb2a08199d2c7f58a3b4381389c81d002f32804d6e"}, "downloads": -1, "filename": "plshandle-0.1.tar.gz", "has_sig": false, "md5_digest": "d613a712aa20219ceed1d8ceafd3c16c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13510, "upload_time": "2020-04-16T14:41:37", "upload_time_iso_8601": "2020-04-16T14:41:37.986729Z", "url": "https://files.pythonhosted.org/packages/d6/78/990be32031ffa53d63df49004c61097f3f48d25f829e1625b6e97560ff3e/plshandle-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d613a712aa20219ceed1d8ceafd3c16c", "sha256": "b0a1ae215df702e1a3e0e5eb2a08199d2c7f58a3b4381389c81d002f32804d6e"}, "downloads": -1, "filename": "plshandle-0.1.tar.gz", "has_sig": false, "md5_digest": "d613a712aa20219ceed1d8ceafd3c16c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13510, "upload_time": "2020-04-16T14:41:37", "upload_time_iso_8601": "2020-04-16T14:41:37.986729Z", "url": "https://files.pythonhosted.org/packages/d6/78/990be32031ffa53d63df49004c61097f3f48d25f829e1625b6e97560ff3e/plshandle-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:30 2020"}