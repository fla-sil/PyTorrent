{"info": {"author": "Josue Kouka", "author_email": "josuebrunel@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "`mYQL <http://myql.readthedocs.org/en/latest/>`__\n=================================================\n\n|Build Status| |Documentation Status| |Code Health| |PyPI| |PyPI| |PyPI|\n|PyPI| |PyPI| |Coverage Status| |PyPI|\n\nmYQL is a Python wrapper of the Yahoo Query Language.\n\nYahoo! Query Language Documentation and Support\n===============================================\n\n-  Yahoo! Query Language - http://developer.yahoo.com/yql/\n-  Yahoo! Developer Network: http://developer.yahoo.com\n-  Yahoo! Application Platform - http://developer.yahoo.com/yap/\n-  Yahoo! Social APIs - http://developer.yahoo.com/social/\n-  Yahoo! QUery Language Console\n   https://developer.yahoo.com/yql/console/\n\nFeatures\n~~~~~~~~\n\n-  Simple YQL Query\n-  Authenticated YQL Query ( OAuth )\n-  StockScraper\n-  YQL Open Table (Classes and Metaclasses) Generator\n-  Response prettyfier\n\nInstallation\n============\n\n.. code:: shell\n\n    $ pip install myql\n\nQuick Start\n===========\n\nIt's important to know that **response** is a just\n**requests.models.Response** object. Yes indeed, ***mYQL*** uses\n***requests*** :smile:\n\nBy default, you have access to the **community tables**. If for\nwhatsoever reason you would like to not have access to those tables\n\n.. code:: python\n\n    >>> import myql\n    >>> yql = myql.MYQL(community=False)\n\nChanging response format (xml or json)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe response format is by default ***json***.\n\n.. code:: python\n\n    >>> import myql\n    >>> from myql.utils import pretty_json, pretty_xml\n    >>> yql = myql.MYQL(format='xml', community=True)\n    >>> resp = yql.raw_query('select name, woeid from geo.states where place=\"Congo\"')\n    >>> print(pretty_xml(resp.content))\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <query xmlns:yahoo=\"http://www.yahooapis.com/v1/base.rng\" yahoo:count=\"11\" yahoo:created=\"2015-06-07T11:56:11Z\" yahoo:lang=\"en-US\">\n        <results>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Cuvette-Ouest Department</name>\n                <woeid>55998384</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Cuvette Department</name>\n                <woeid>2344968</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Plateaux District</name>\n                <woeid>2344973</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Sangha</name>\n                <woeid>2344974</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Lekoumou</name>\n                <woeid>2344970</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Pool Department</name>\n                <woeid>2344975</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Likouala Department</name>\n                <woeid>2344971</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Niari Department</name>\n                <woeid>2344972</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Brazzaville</name>\n                <woeid>2344976</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Bouenza Department</name>\n                <woeid>2344967</woeid>\n            </place>\n            <place xmlns=\"http://where.yahooapis.com/v1/schema.rng\">\n                <name>Kouilou</name>\n                <woeid>2344969</woeid>\n            </place>\n        </results>\n    </query>\n    <!-- total: 33 -->\n    <!-- pprd1-node1003-lh3.manhattan.bf1.yahoo.com -->\n\n    >>> resp = yql.raw_query('select name, woeid from geo.states where place=\"Congo\"', format='json')\n    >>> print(pretty_json(resp.content))\n    {\n        \"query\": {\n            \"count\": 11, \n            \"created\": \"2015-06-07T11:58:20Z\", \n            \"lang\": \"en-US\", \n            \"results\": {\n                \"place\": [\n                    {\n                        \"name\": \"Cuvette-Ouest Department\", \n                        \"woeid\": \"55998384\"\n                    }, \n                    {\n                        \"name\": \"Cuvette Department\", \n                        \"woeid\": \"2344968\"\n                    }, \n                    {\n                        \"name\": \"Plateaux District\", \n                        \"woeid\": \"2344973\"\n                    }, \n                    {\n                        \"name\": \"Sangha\", \n                        \"woeid\": \"2344974\"\n                    }, \n                    {\n                        \"name\": \"Lekoumou\", \n                        \"woeid\": \"2344970\"\n                    }, \n                    {\n                        \"name\": \"Pool Department\", \n                        \"woeid\": \"2344975\"\n                    }, \n                    {\n                        \"name\": \"Likouala Department\", \n                        \"woeid\": \"2344971\"\n                    }, \n                    {\n                        \"name\": \"Niari Department\", \n                        \"woeid\": \"2344972\"\n                    }, \n                    {\n                        \"name\": \"Brazzaville\", \n                        \"woeid\": \"2344976\"\n                    }, \n                    {\n                        \"name\": \"Bouenza Department\", \n                        \"woeid\": \"2344967\"\n                    }, \n                    {\n                        \"name\": \"Kouilou\", \n                        \"woeid\": \"2344969\"\n                    }\n                ]\n            }\n        }\n    }\n\n    >>>\n\nMethods\n-------\n\nuse(yql\\_table\\_url,name=yql\\_table\\_name)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMaps a table name to the URL of an Open Data Table.\n\n.. code:: python\n\n    >>> yql.use('http://www.josuebrunel.org//users.xml', name='myusers') \n\ndesc(tablename)\n^^^^^^^^^^^^^^^\n\nReturns table description\n\n.. code:: python\n\n    >>> response = yql.desc('weather.forecast')\n    >>> print(pretty_json(response.content))\n    {\n        \"query\": {\n            \"count\": 1, \n            \"created\": \"2015-06-07T12:00:27Z\", \n            \"lang\": \"en-US\", \n            \"results\": {\n                \"table\": {\n                    \"hash\": \"aae78b1462a6a8fbc748aec4cf292767\", \n                    \"meta\": {\n                        \"author\": \"Yahoo! Inc\", \n                        \"description\": \"Weather forecast table\", \n                        \"documentationURL\": \"http://developer.yahoo.com/weather/\", \n                        \"sampleQuery\": \"select * from weather.forecast where woeid=2502265\"\n                    }, \n                    \"name\": \"weather.forecast\", \n                    \"request\": {\n                        \"select\": [\n                            {\n                                \"key\": [\n                                    {\n                                        \"name\": \"location\", \n                                        \"required\": \"true\", \n                                        \"type\": \"xs:string\"\n                                    }, \n                                    {\n                                        \"name\": \"u\", \n                                        \"type\": \"xs:string\"\n                                    }\n                                ]\n                            }, \n                            {\n                                \"key\": [\n                                    {\n                                        \"name\": \"woeid\", \n                                        \"required\": \"true\", \n                                        \"type\": \"xs:string\"\n                                    }, \n                                    {\n                                        \"name\": \"u\", \n                                        \"type\": \"xs:string\"\n                                    }\n                                ]\n                            }\n                        ]\n                    }, \n                    \"security\": \"ANY\"\n                }\n            }\n        }\n    }\n\n    >>>\n\nraw\\_query(query)\n^^^^^^^^^^^^^^^^^\n\nAllows you to directly type your query\n\n.. code:: python\n\n    >>> response = yql.raw_query(\"select * from geo.countries where place='North America'\")\n    >>> # deal with the response\n\nselect(table, fields, limit).where(filters, ...)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n***NB*** : A simple select doesn't return any data. Use ***GET***\ninstead.\n\n.. code:: python\n\n    >>> response = yql.select('geo.countries', ['name', 'code', 'woeid']).where(['name', '=', 'Canada'])\n    >>> print(pretty_json(response.content))\n    {\n        \"query\": {\n            \"count\": 1, \n            \"created\": \"2015-06-07T12:10:39Z\", \n            \"lang\": \"en-US\", \n            \"results\": {\n                \"place\": {\n                    \"name\": \"Canada\", \n                    \"woeid\": \"23424775\"\n                }\n            }\n        }\n    }\n\n    >>> ...\n    >>> response = yql.select('geo.countries', ['name', 'woeid'], 2).where(['place', 'in', ('Africa', 'Europe')])\n    >>> from myql.utils import dump\n    >>> dump(response)\n    {\n        \"query\": {\n            \"count\": 2, \n            \"created\": \"2015-06-07T12:27:04Z\", \n            \"lang\": \"en-US\", \n            \"results\": {\n                \"place\": [\n                    {\n                        \"name\": \"Algeria\", \n                        \"woeid\": \"23424740\"\n                    }, \n                    {\n                        \"name\": \"Angola\", \n                        \"woeid\": \"23424745\"\n                    }\n                ]\n            }\n        }\n    }\n\n    >>>\n\nget(table, fields, limit)\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ***SELECT***, but instead returns data.\n\n**REMINDER** : Some tables require a **where clause**, therefore\n***GET*** won't work on those tables, use *select(...).where(...)*\ninstead .\n\n.. code:: python\n\n    >>> from myql.utils import dump\n    >>> response = yql.get('geo.countries', ['name', 'woeid'], 1)\n    >>> dump(response)\n    {\n        \"query\": {\n            \"count\": 1, \n            \"created\": \"2015-06-07T12:29:01Z\", \n            \"lang\": \"en-US\", \n            \"results\": {\n                \"place\": {\n                    \"name\": \"Sao Tome and Principe\", \n                    \"woeid\": \"23424966\"\n                }\n            }\n        }\n    }\n\n    >>>\n\ninsert(table, (field1, field2, ..., fieldN),(value1, value2, ..., valueN))\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInsert values into a table. Arguments 2 and 3 may be **tuples** or\n**list**.\n\n.. code:: python\n\n    >>> from myql.utils import pretty_json\n    >>> response = yql.insert('yql.storage.admin',('value',),('http://josuebrunel.org',))\n    >>> print(pretty_json(response.content))\n    {\n        \"query\": {\n            \"count\": 1,\n            \"created\": \"2015-05-14T13:25:56Z\",\n            \"lang\": \"en-US\",\n            \"results\": {\n                \"inserted\": {\n                    \"execute\": \"store://KkkC5xDw4v32IcWWSQ4YRe\",\n                    \"select\": \"store://Zc5LHXcmYM7XBfSbo9tzFL\",\n                    \"update\": \"store://Rqb5fbQyDvrfHJiClWnZ6q\"\n                }\n            }\n        }\n    }\n\nupdate(table,[field1, ..., fieldN],[value1, ..., ...valueN]).where(filters, ...)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUpdate fields values. This method **is always followed by\n***where()*****. Arguments 2 and 3 may be **tuples** or **list**.\n\n.. code:: python\n\n    >>> from myql.utils import pretty_json\n    >>> response = yql.update('yql.storage',('value',),('https://josuebrunel.org',)).where(['name','=','store://Rqb5fbQyDvrfHJiClWnZ6q'])\n    >>> print(pretty_json(response.content))\n    {\n        \"query\": {\n            \"count\": 1,\n            \"created\": \"2015-05-14T13:32:52Z\",\n            \"lang\": \"en-US\",\n            \"results\": {\n                \"success\": \"Updated store://KkkC5xDw4v32IcWWSQ4YRe\"\n            }\n        }\n    }\n\ndelete(table).where(filters, ...)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDelete records\n\n.. code:: python\n\n    >>> from myql.utils import pretty_json\n    >>> response = self.yql.delete('yql.storage').where(['name','=','store://Rqb5fbQyDvrfHJiClWnZ6q'])\n    >>> print(pretty_json(response.content))\n    {\n        \"query\": {\n            \"count\": 1,\n            \"created\": \"2015-05-14T13:38:28Z\",\n            \"lang\": \"en-US\",\n            \"results\": {\n                \"success\": \"store://Rqb5fbQyDvrfHJiClWnZ6q deleted\"\n            }\n        }\n    }\n\nUsing OAuth\n^^^^^^^^^^^\n\n***mYQL*** comes with\n***`yahoo\\_oauth <http://yahoo-oauth.readthedocs.org/en/master/>`__***,\nwhich is an OAuth library for Yahoo! APIs.\n\n.. code:: python\n\n    >>> from yahoo_oauth import OAuth1\n    >>> oauth = OAuth1(None, None, from_file='credentials.json') # only consumer_key and consumer_secret are required.\n    >>> from myql import MYQL\n    >>> yql = MYQL(format='xml', oauth=oauth)\n    >>> response = yql.get_guid('josue_brunel') # Deal with the response\n\nStocks Scraper\n^^^^^^^^^^^^^^\n\nThe full documentation on ***StockScraper*** is\n`here <https://myql.readthedocs.org/en/latest/stockscraper/>`__\n\nRelease Notes\n^^^^^^^^^^^^^\n\n##### 1.2.6\n-----------\n\n-  Fixed `#148 <https://github.com/josuebrunel/myql/issues/148>`__\n\n##### 1.2.5\n-----------\n\n-  camelCase dropped for underscore\n-  Support for substitution variable i.e @myvar\n-  Support of Remote Filters\n-  Support of Post Query Filters\n\n##### 1.2.4\n-----------\n\n-  Weather module added\n-  StockScraper now under Finance namespace\n\n##### 1.2.3\n-----------\n\n-  Fixed issue related to date in StockRetriver.get\\_historical\\_info\n   `#107 <https://github.com/josuebrunel/myql/issues/107>`__\n-  Fixed issue with **IN** condition in **where** clause\n   `#106 <https://github.com/josuebrunel/myql/issues/107>`__\n-  Fix definition of raw\\_input for python3\n   `#105 <https://github.com/josuebrunel/myql/issues/105>`__\n-  Yahoo-OAuth included as main oauth library\n   `#112 <https://github.com/josuebrunel/myql/issues/112>`__\n\n##### 1.2.2\n-----------\n\n-  **Python3** support OK\n   `#71 <https://github.com/josuebrunel/myql/issues/71>`__\n-  **PyPy/PyPy3** support OK\n-  Fixed issue with **IN** condition in **where** clause\n-  Fixed issue when passing an empty list/tuple (**[]/()**) in a\n   **where** clause besides first argument\n-  Import of\n   ***`StockParser <https://github.com/gurch101/StockScraper>`__*** from\n   Gurchet Rai OK\n   `#68 <https://github.com/josuebrunel/myql/issues/68>`__\n-  Insert, Update, Delete methods added\n   `#67 <https://github.com/josuebrunel/myql/issues/67>`__\n-  Dummy *try/except* removed from main module\n-  Fixed **Invalid OAuth Signature** when using a refreshed token\n   `#64 <https://github.com/josuebrunel/myql/issues/64>`__\n-  Fixed misused of ***MYQL.use(...)***\n   `#76 <https://github.com/josuebrunel/myql/issues/76>`__\n-  Fixed format issue\n   `#82 <https://github.com/josuebrunel/myql/issues/82>`__\n-  Added useful functions in utils\n   `#81 <https://github.com/josuebrunel/myql/issues/81>`__\n-  Default access to community tables\n-  Response prettyfier : *pretty\\_json, pretty\\_xml*\n\n##### v 1.2.1\n-------------\n\n-  Multiple requests while using OAuth fixed\n\n##### 1.2.0\n-----------\n\n-  OpenTable classes\n-  Access to resources requiring authentication\n\n##### 0.5.6\n-----------\n\n-  fetch data\n-  access to community data\n-  select data format (xml/json)\n-  change data source\n-  filter data\n-  fix handling of default response format on the fly\n-  fix limit on ***select(...).where(...)*** when no limit value is\n   passed\n-  fix limit on ***get(...)***\n\n.. |Build Status| image:: https://travis-ci.org/josuebrunel/myql.svg?branch=master\n   :target: https://travis-ci.org/josuebrunel/myql\n.. |Documentation Status| image:: https://readthedocs.org/projects/myql/badge/?version=latest\n   :target: https://myql.readthedocs.org\n.. |Code Health| image:: https://landscape.io/github/josuebrunel/myql/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/josuebrunel/myql/master\n.. |PyPI| image:: https://img.shields.io/pypi/status/myql.svg?style=flat\n   :target: https://pypi.python.org/pypi/myql\n.. |PyPI| image:: https://img.shields.io/pypi/v/myql.svg?style=flat\n   :target: https://pypi.python.org/pypi/myql\n.. |PyPI| image:: https://img.shields.io/pypi/dm/myql.svg?style=flat\n   :target: https://pypi.python.org/pypi/myql\n.. |PyPI| image:: https://img.shields.io/pypi/pyversions/myql.svg\n   :target: https://pypi.python.org/pypi/myql\n.. |PyPI| image:: https://img.shields.io/pypi/implementation/myql.svg?style=flat\n   :target: https://pypi.python.org/pypi/myql\n.. |Coverage Status| image:: https://coveralls.io/repos/josuebrunel/myql/badge.svg?branch=testing\n   :target: https://coveralls.io/r/josuebrunel/myql?branch=master\n.. |PyPI| image:: https://img.shields.io/pypi/l/myql.svg?style=flat\n   :target: https://pypi.python.org/pypi/myql", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/josuebrunel/myql/archive/1.2.7.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/josuebrunel/MYQL", "keywords": "myql,yql,yahoo,query,language", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "myql", "package_url": "https://pypi.org/project/myql/", "platform": "Any", "project_url": "https://pypi.org/project/myql/", "project_urls": {"Download": "https://github.com/josuebrunel/myql/archive/1.2.7.tar.gz", "Homepage": "https://github.com/josuebrunel/MYQL"}, "release_url": "https://pypi.org/project/myql/1.2.7/", "requires_dist": null, "requires_python": null, "summary": "Python Wrapper for the Yahoo! Query Language. Allowing to run YQL queries, fetch financial data and create YQL Open Tables", "version": "1.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            `mYQL &lt;http://myql.readthedocs.org/en/latest/&gt;`__<br>=================================================<br><br>|Build Status| |Documentation Status| |Code Health| |PyPI| |PyPI| |PyPI|<br>|PyPI| |PyPI| |Coverage Status| |PyPI|<br><br>mYQL is a Python wrapper of the Yahoo Query Language.<br><br>Yahoo! Query Language Documentation and Support<br>===============================================<br><br>-  Yahoo! Query Language - http://developer.yahoo.com/yql/<br>-  Yahoo! Developer Network: http://developer.yahoo.com<br>-  Yahoo! Application Platform - http://developer.yahoo.com/yap/<br>-  Yahoo! Social APIs - http://developer.yahoo.com/social/<br>-  Yahoo! QUery Language Console<br>   https://developer.yahoo.com/yql/console/<br><br>Features<br>~~~~~~~~<br><br>-  Simple YQL Query<br>-  Authenticated YQL Query ( OAuth )<br>-  StockScraper<br>-  YQL Open Table (Classes and Metaclasses) Generator<br>-  Response prettyfier<br><br>Installation<br>============<br><br>.. code:: shell<br><br>    $ pip install myql<br><br>Quick Start<br>===========<br><br>It's important to know that **response** is a just<br>**requests.models.Response** object. Yes indeed, ***mYQL*** uses<br>***requests*** :smile:<br><br>By default, you have access to the **community tables**. If for<br>whatsoever reason you would like to not have access to those tables<br><br>.. code:: python<br><br>    &gt;&gt;&gt; import myql<br>    &gt;&gt;&gt; yql = myql.MYQL(community=False)<br><br>Changing response format (xml or json)<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>The response format is by default ***json***.<br><br>.. code:: python<br><br>    &gt;&gt;&gt; import myql<br>    &gt;&gt;&gt; from myql.utils import pretty_json, pretty_xml<br>    &gt;&gt;&gt; yql = myql.MYQL(format='xml', community=True)<br>    &gt;&gt;&gt; resp = yql.raw_query('select name, woeid from geo.states where place=\"Congo\"')<br>    &gt;&gt;&gt; print(pretty_xml(resp.content))<br>    &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;<br>    &lt;query xmlns:yahoo=\"http://www.yahooapis.com/v1/base.rng\" yahoo:count=\"11\" yahoo:created=\"2015-06-07T11:56:11Z\" yahoo:lang=\"en-US\"&gt;<br>        &lt;results&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Cuvette-Ouest Department&lt;/name&gt;<br>                &lt;woeid&gt;55998384&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Cuvette Department&lt;/name&gt;<br>                &lt;woeid&gt;2344968&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Plateaux District&lt;/name&gt;<br>                &lt;woeid&gt;2344973&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Sangha&lt;/name&gt;<br>                &lt;woeid&gt;2344974&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Lekoumou&lt;/name&gt;<br>                &lt;woeid&gt;2344970&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Pool Department&lt;/name&gt;<br>                &lt;woeid&gt;2344975&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Likouala Department&lt;/name&gt;<br>                &lt;woeid&gt;2344971&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Niari Department&lt;/name&gt;<br>                &lt;woeid&gt;2344972&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Brazzaville&lt;/name&gt;<br>                &lt;woeid&gt;2344976&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Bouenza Department&lt;/name&gt;<br>                &lt;woeid&gt;2344967&lt;/woeid&gt;<br>            &lt;/place&gt;<br>            &lt;place xmlns=\"http://where.yahooapis.com/v1/schema.rng\"&gt;<br>                &lt;name&gt;Kouilou&lt;/name&gt;<br>                &lt;woeid&gt;2344969&lt;/woeid&gt;<br>            &lt;/place&gt;<br>        &lt;/results&gt;<br>    &lt;/query&gt;<br>    &lt;!-- total: 33 --&gt;<br>    &lt;!-- pprd1-node1003-lh3.manhattan.bf1.yahoo.com --&gt;<br><br>    &gt;&gt;&gt; resp = yql.raw_query('select name, woeid from geo.states where place=\"Congo\"', format='json')<br>    &gt;&gt;&gt; print(pretty_json(resp.content))<br>    {<br>        \"query\": {<br>            \"count\": 11, <br>            \"created\": \"2015-06-07T11:58:20Z\", <br>            \"lang\": \"en-US\", <br>            \"results\": {<br>                \"place\": [<br>                    {<br>                        \"name\": \"Cuvette-Ouest Department\", <br>                        \"woeid\": \"55998384\"<br>                    }, <br>                    {<br>                        \"name\": \"Cuvette Department\", <br>                        \"woeid\": \"2344968\"<br>                    }, <br>                    {<br>                        \"name\": \"Plateaux District\", <br>                        \"woeid\": \"2344973\"<br>                    }, <br>                    {<br>                        \"name\": \"Sangha\", <br>                        \"woeid\": \"2344974\"<br>                    }, <br>                    {<br>                        \"name\": \"Lekoumou\", <br>                        \"woeid\": \"2344970\"<br>                    }, <br>                    {<br>                        \"name\": \"Pool Department\", <br>                        \"woeid\": \"2344975\"<br>                    }, <br>                    {<br>                        \"name\": \"Likouala Department\", <br>                        \"woeid\": \"2344971\"<br>                    }, <br>                    {<br>                        \"name\": \"Niari Department\", <br>                        \"woeid\": \"2344972\"<br>                    }, <br>                    {<br>                        \"name\": \"Brazzaville\", <br>                        \"woeid\": \"2344976\"<br>                    }, <br>                    {<br>                        \"name\": \"Bouenza Department\", <br>                        \"woeid\": \"2344967\"<br>                    }, <br>                    {<br>                        \"name\": \"Kouilou\", <br>                        \"woeid\": \"2344969\"<br>                    }<br>                ]<br>            }<br>        }<br>    }<br><br>    &gt;&gt;&gt;<br><br>Methods<br>-------<br><br>use(yql\\_table\\_url,name=yql\\_table\\_name)<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Maps a table name to the URL of an Open Data Table.<br><br>.. code:: python<br><br>    &gt;&gt;&gt; yql.use('http://www.josuebrunel.org//users.xml', name='myusers') <br><br>desc(tablename)<br>^^^^^^^^^^^^^^^<br><br>Returns table description<br><br>.. code:: python<br><br>    &gt;&gt;&gt; response = yql.desc('weather.forecast')<br>    &gt;&gt;&gt; print(pretty_json(response.content))<br>    {<br>        \"query\": {<br>            \"count\": 1, <br>            \"created\": \"2015-06-07T12:00:27Z\", <br>            \"lang\": \"en-US\", <br>            \"results\": {<br>                \"table\": {<br>                    \"hash\": \"aae78b1462a6a8fbc748aec4cf292767\", <br>                    \"meta\": {<br>                        \"author\": \"Yahoo! Inc\", <br>                        \"description\": \"Weather forecast table\", <br>                        \"documentationURL\": \"http://developer.yahoo.com/weather/\", <br>                        \"sampleQuery\": \"select * from weather.forecast where woeid=2502265\"<br>                    }, <br>                    \"name\": \"weather.forecast\", <br>                    \"request\": {<br>                        \"select\": [<br>                            {<br>                                \"key\": [<br>                                    {<br>                                        \"name\": \"location\", <br>                                        \"required\": \"true\", <br>                                        \"type\": \"xs:string\"<br>                                    }, <br>                                    {<br>                                        \"name\": \"u\", <br>                                        \"type\": \"xs:string\"<br>                                    }<br>                                ]<br>                            }, <br>                            {<br>                                \"key\": [<br>                                    {<br>                                        \"name\": \"woeid\", <br>                                        \"required\": \"true\", <br>                                        \"type\": \"xs:string\"<br>                                    }, <br>                                    {<br>                                        \"name\": \"u\", <br>                                        \"type\": \"xs:string\"<br>                                    }<br>                                ]<br>                            }<br>                        ]<br>                    }, <br>                    \"security\": \"ANY\"<br>                }<br>            }<br>        }<br>    }<br><br>    &gt;&gt;&gt;<br><br>raw\\_query(query)<br>^^^^^^^^^^^^^^^^^<br><br>Allows you to directly type your query<br><br>.. code:: python<br><br>    &gt;&gt;&gt; response = yql.raw_query(\"select * from geo.countries where place='North America'\")<br>    &gt;&gt;&gt; # deal with the response<br><br>select(table, fields, limit).where(filters, ...)<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>***NB*** : A simple select doesn't return any data. Use ***GET***<br>instead.<br><br>.. code:: python<br><br>    &gt;&gt;&gt; response = yql.select('geo.countries', ['name', 'code', 'woeid']).where(['name', '=', 'Canada'])<br>    &gt;&gt;&gt; print(pretty_json(response.content))<br>    {<br>        \"query\": {<br>            \"count\": 1, <br>            \"created\": \"2015-06-07T12:10:39Z\", <br>            \"lang\": \"en-US\", <br>            \"results\": {<br>                \"place\": {<br>                    \"name\": \"Canada\", <br>                    \"woeid\": \"23424775\"<br>                }<br>            }<br>        }<br>    }<br><br>    &gt;&gt;&gt; ...<br>    &gt;&gt;&gt; response = yql.select('geo.countries', ['name', 'woeid'], 2).where(['place', 'in', ('Africa', 'Europe')])<br>    &gt;&gt;&gt; from myql.utils import dump<br>    &gt;&gt;&gt; dump(response)<br>    {<br>        \"query\": {<br>            \"count\": 2, <br>            \"created\": \"2015-06-07T12:27:04Z\", <br>            \"lang\": \"en-US\", <br>            \"results\": {<br>                \"place\": [<br>                    {<br>                        \"name\": \"Algeria\", <br>                        \"woeid\": \"23424740\"<br>                    }, <br>                    {<br>                        \"name\": \"Angola\", <br>                        \"woeid\": \"23424745\"<br>                    }<br>                ]<br>            }<br>        }<br>    }<br><br>    &gt;&gt;&gt;<br><br>get(table, fields, limit)<br>^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Same as ***SELECT***, but instead returns data.<br><br>**REMINDER** : Some tables require a **where clause**, therefore<br>***GET*** won't work on those tables, use *select(...).where(...)*<br>instead .<br><br>.. code:: python<br><br>    &gt;&gt;&gt; from myql.utils import dump<br>    &gt;&gt;&gt; response = yql.get('geo.countries', ['name', 'woeid'], 1)<br>    &gt;&gt;&gt; dump(response)<br>    {<br>        \"query\": {<br>            \"count\": 1, <br>            \"created\": \"2015-06-07T12:29:01Z\", <br>            \"lang\": \"en-US\", <br>            \"results\": {<br>                \"place\": {<br>                    \"name\": \"Sao Tome and Principe\", <br>                    \"woeid\": \"23424966\"<br>                }<br>            }<br>        }<br>    }<br><br>    &gt;&gt;&gt;<br><br>insert(table, (field1, field2, ..., fieldN),(value1, value2, ..., valueN))<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Insert values into a table. Arguments 2 and 3 may be **tuples** or<br>**list**.<br><br>.. code:: python<br><br>    &gt;&gt;&gt; from myql.utils import pretty_json<br>    &gt;&gt;&gt; response = yql.insert('yql.storage.admin',('value',),('http://josuebrunel.org',))<br>    &gt;&gt;&gt; print(pretty_json(response.content))<br>    {<br>        \"query\": {<br>            \"count\": 1,<br>            \"created\": \"2015-05-14T13:25:56Z\",<br>            \"lang\": \"en-US\",<br>            \"results\": {<br>                \"inserted\": {<br>                    \"execute\": \"store://KkkC5xDw4v32IcWWSQ4YRe\",<br>                    \"select\": \"store://Zc5LHXcmYM7XBfSbo9tzFL\",<br>                    \"update\": \"store://Rqb5fbQyDvrfHJiClWnZ6q\"<br>                }<br>            }<br>        }<br>    }<br><br>update(table,[field1, ..., fieldN],[value1, ..., ...valueN]).where(filters, ...)<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Update fields values. This method **is always followed by<br>***where()*****. Arguments 2 and 3 may be **tuples** or **list**.<br><br>.. code:: python<br><br>    &gt;&gt;&gt; from myql.utils import pretty_json<br>    &gt;&gt;&gt; response = yql.update('yql.storage',('value',),('https://josuebrunel.org',)).where(['name','=','store://Rqb5fbQyDvrfHJiClWnZ6q'])<br>    &gt;&gt;&gt; print(pretty_json(response.content))<br>    {<br>        \"query\": {<br>            \"count\": 1,<br>            \"created\": \"2015-05-14T13:32:52Z\",<br>            \"lang\": \"en-US\",<br>            \"results\": {<br>                \"success\": \"Updated store://KkkC5xDw4v32IcWWSQ4YRe\"<br>            }<br>        }<br>    }<br><br>delete(table).where(filters, ...)<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Delete records<br><br>.. code:: python<br><br>    &gt;&gt;&gt; from myql.utils import pretty_json<br>    &gt;&gt;&gt; response = self.yql.delete('yql.storage').where(['name','=','store://Rqb5fbQyDvrfHJiClWnZ6q'])<br>    &gt;&gt;&gt; print(pretty_json(response.content))<br>    {<br>        \"query\": {<br>            \"count\": 1,<br>            \"created\": \"2015-05-14T13:38:28Z\",<br>            \"lang\": \"en-US\",<br>            \"results\": {<br>                \"success\": \"store://Rqb5fbQyDvrfHJiClWnZ6q deleted\"<br>            }<br>        }<br>    }<br><br>Using OAuth<br>^^^^^^^^^^^<br><br>***mYQL*** comes with<br>***`yahoo\\_oauth &lt;http://yahoo-oauth.readthedocs.org/en/master/&gt;`__***,<br>which is an OAuth library for Yahoo! APIs.<br><br>.. code:: python<br><br>    &gt;&gt;&gt; from yahoo_oauth import OAuth1<br>    &gt;&gt;&gt; oauth = OAuth1(None, None, from_file='credentials.json') # only consumer_key and consumer_secret are required.<br>    &gt;&gt;&gt; from myql import MYQL<br>    &gt;&gt;&gt; yql = MYQL(format='xml', oauth=oauth)<br>    &gt;&gt;&gt; response = yql.get_guid('josue_brunel') # Deal with the response<br><br>Stocks Scraper<br>^^^^^^^^^^^^^^<br><br>The full documentation on ***StockScraper*** is<br>`here &lt;https://myql.readthedocs.org/en/latest/stockscraper/&gt;`__<br><br>Release Notes<br>^^^^^^^^^^^^^<br><br>##### 1.2.6<br>-----------<br><br>-  Fixed `#148 &lt;https://github.com/josuebrunel/myql/issues/148&gt;`__<br><br>##### 1.2.5<br>-----------<br><br>-  camelCase dropped for underscore<br>-  Support for substitution variable i.e @myvar<br>-  Support of Remote Filters<br>-  Support of Post Query Filters<br><br>##### 1.2.4<br>-----------<br><br>-  Weather module added<br>-  StockScraper now under Finance namespace<br><br>##### 1.2.3<br>-----------<br><br>-  Fixed issue related to date in StockRetriver.get\\_historical\\_info<br>   `#107 &lt;https://github.com/josuebrunel/myql/issues/107&gt;`__<br>-  Fixed issue with **IN** condition in **where** clause<br>   `#106 &lt;https://github.com/josuebrunel/myql/issues/107&gt;`__<br>-  Fix definition of raw\\_input for python3<br>   `#105 &lt;https://github.com/josuebrunel/myql/issues/105&gt;`__<br>-  Yahoo-OAuth included as main oauth library<br>   `#112 &lt;https://github.com/josuebrunel/myql/issues/112&gt;`__<br><br>##### 1.2.2<br>-----------<br><br>-  **Python3** support OK<br>   `#71 &lt;https://github.com/josuebrunel/myql/issues/71&gt;`__<br>-  **PyPy/PyPy3** support OK<br>-  Fixed issue with **IN** condition in **where** clause<br>-  Fixed issue when passing an empty list/tuple (**[]/()**) in a<br>   **where** clause besides first argument<br>-  Import of<br>   ***`StockParser &lt;https://github.com/gurch101/StockScraper&gt;`__*** from<br>   Gurchet Rai OK<br>   `#68 &lt;https://github.com/josuebrunel/myql/issues/68&gt;`__<br>-  Insert, Update, Delete methods added<br>   `#67 &lt;https://github.com/josuebrunel/myql/issues/67&gt;`__<br>-  Dummy *try/except* removed from main module<br>-  Fixed **Invalid OAuth Signature** when using a refreshed token<br>   `#64 &lt;https://github.com/josuebrunel/myql/issues/64&gt;`__<br>-  Fixed misused of ***MYQL.use(...)***<br>   `#76 &lt;https://github.com/josuebrunel/myql/issues/76&gt;`__<br>-  Fixed format issue<br>   `#82 &lt;https://github.com/josuebrunel/myql/issues/82&gt;`__<br>-  Added useful functions in utils<br>   `#81 &lt;https://github.com/josuebrunel/myql/issues/81&gt;`__<br>-  Default access to community tables<br>-  Response prettyfier : *pretty\\_json, pretty\\_xml*<br><br>##### v 1.2.1<br>-------------<br><br>-  Multiple requests while using OAuth fixed<br><br>##### 1.2.0<br>-----------<br><br>-  OpenTable classes<br>-  Access to resources requiring authentication<br><br>##### 0.5.6<br>-----------<br><br>-  fetch data<br>-  access to community data<br>-  select data format (xml/json)<br>-  change data source<br>-  filter data<br>-  fix handling of default response format on the fly<br>-  fix limit on ***select(...).where(...)*** when no limit value is<br>   passed<br>-  fix limit on ***get(...)***<br><br>.. |Build Status| image:: https://travis-ci.org/josuebrunel/myql.svg?branch=master<br>   :target: https://travis-ci.org/josuebrunel/myql<br>.. |Documentation Status| image:: https://readthedocs.org/projects/myql/badge/?version=latest<br>   :target: https://myql.readthedocs.org<br>.. |Code Health| image:: https://landscape.io/github/josuebrunel/myql/master/landscape.svg?style=flat<br>   :target: https://landscape.io/github/josuebrunel/myql/master<br>.. |PyPI| image:: https://img.shields.io/pypi/status/myql.svg?style=flat<br>   :target: https://pypi.python.org/pypi/myql<br>.. |PyPI| image:: https://img.shields.io/pypi/v/myql.svg?style=flat<br>   :target: https://pypi.python.org/pypi/myql<br>.. |PyPI| image:: https://img.shields.io/pypi/dm/myql.svg?style=flat<br>   :target: https://pypi.python.org/pypi/myql<br>.. |PyPI| image:: https://img.shields.io/pypi/pyversions/myql.svg<br>   :target: https://pypi.python.org/pypi/myql<br>.. |PyPI| image:: https://img.shields.io/pypi/implementation/myql.svg?style=flat<br>   :target: https://pypi.python.org/pypi/myql<br>.. |Coverage Status| image:: https://coveralls.io/repos/josuebrunel/myql/badge.svg?branch=testing<br>   :target: https://coveralls.io/r/josuebrunel/myql?branch=master<br>.. |PyPI| image:: https://img.shields.io/pypi/l/myql.svg?style=flat<br>   :target: https://pypi.python.org/pypi/myql\n          </div>"}, "last_serial": 1758148, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "3516ac676cad6fa78353535b68c1a39d", "sha256": "fa7ebeb72468dc2b0eb39fabdeddc3c68cbb43abc0dbaadc7383bc3b89272c00"}, "downloads": -1, "filename": "myql-1.2.tar.gz", "has_sig": false, "md5_digest": "3516ac676cad6fa78353535b68c1a39d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12420, "upload_time": "2015-05-03T13:11:55", "upload_time_iso_8601": "2015-05-03T13:11:55.323861Z", "url": "https://files.pythonhosted.org/packages/42/95/a25b985040e8eae888cd06b38145fa46e8190a5abba9cde4f37858a4f2ce/myql-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "93cb9436c6ae06631dc6caefed2f4038", "sha256": "25249668016e7e03a6cd2b4d55512b9339855b2fa4f32fd19f2e23e40549245c"}, "downloads": -1, "filename": "myql-1.2.1.tar.gz", "has_sig": false, "md5_digest": "93cb9436c6ae06631dc6caefed2f4038", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19090, "upload_time": "2015-05-09T14:58:00", "upload_time_iso_8601": "2015-05-09T14:58:00.662448Z", "url": "https://files.pythonhosted.org/packages/ee/2a/fe57023146e1c5c39c219f9b4a4e1dde6c409dfffaf706b1e7ed37539086/myql-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "a79576caf22608c10ee41c86508eff07", "sha256": "def6a361cdf858c58daa0f01c7f17a9e82aa2c77b18c4deef41d2cc9e76f20c2"}, "downloads": -1, "filename": "myql-1.2.2.tar.gz", "has_sig": false, "md5_digest": "a79576caf22608c10ee41c86508eff07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18393, "upload_time": "2015-05-31T02:58:52", "upload_time_iso_8601": "2015-05-31T02:58:52.501650Z", "url": "https://files.pythonhosted.org/packages/68/01/e08ea53eb068b2fde87a96fe5c2e6da256dbd71ec6e5b0e1bd8e7f4f5704/myql-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "82afb3e191f638764d76ce7a6d866e4f", "sha256": "53acd0b653cb63d533bd8c1b080e6773aaec355ab242a557f314951487fbd010"}, "downloads": -1, "filename": "myql-1.2.3.tar.gz", "has_sig": false, "md5_digest": "82afb3e191f638764d76ce7a6d866e4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18645, "upload_time": "2015-06-08T13:09:14", "upload_time_iso_8601": "2015-06-08T13:09:14.989124Z", "url": "https://files.pythonhosted.org/packages/32/a7/25dd7c9d92c96b0b424be330ed20340d2081affcfe5ef48c7a2e50c69a57/myql-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "7c12be9a994000d46548078530d7b20e", "sha256": "fc42c449f67dd929c5f60c335e09f4fac2a1862a904ee1908212abd26c09da8b"}, "downloads": -1, "filename": "myql-1.2.4.tar.gz", "has_sig": false, "md5_digest": "7c12be9a994000d46548078530d7b20e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19279, "upload_time": "2015-07-08T12:52:09", "upload_time_iso_8601": "2015-07-08T12:52:09.102232Z", "url": "https://files.pythonhosted.org/packages/5b/49/28a84ecfab5d8ac57c1e2866c90a6d3185b117425cbcbfc49b3fac951ac7/myql-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "ae6e57f0eb23d5e0d3f6332f7cf7b479", "sha256": "08921db0c80acf7785812bcb32cc70b58247f05f9cc81bd9b40fd3fb15dd4fa5"}, "downloads": -1, "filename": "myql-1.2.5.tar.gz", "has_sig": false, "md5_digest": "ae6e57f0eb23d5e0d3f6332f7cf7b479", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21163, "upload_time": "2015-08-22T19:38:45", "upload_time_iso_8601": "2015-08-22T19:38:45.522630Z", "url": "https://files.pythonhosted.org/packages/a1/82/af39a60228a5272e370b6ef150338bf493ee2fdae046b0d7cc7e209a585b/myql-1.2.5.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "d6ae892708a48477fe0496506c607186", "sha256": "23054c2298a154b7186ad366fde39fd188bd26c0f522db8287af17a738fda8cb"}, "downloads": -1, "filename": "myql-1.2.6.tar.gz", "has_sig": false, "md5_digest": "d6ae892708a48477fe0496506c607186", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21696, "upload_time": "2015-08-23T11:47:38", "upload_time_iso_8601": "2015-08-23T11:47:38.701412Z", "url": "https://files.pythonhosted.org/packages/37/b6/8e5202acd4a965ebf29014862ba02c6312a9ff6c3be4020772661cee601d/myql-1.2.6.tar.gz", "yanked": false}], "1.2.7": [{"comment_text": "", "digests": {"md5": "a4726f50bb37653e7f88e363f98ce751", "sha256": "3a79e5179ed94ac5894f19441b38092005a970f25015295e2b14675d88ec829d"}, "downloads": -1, "filename": "myql-1.2.7.tar.gz", "has_sig": false, "md5_digest": "a4726f50bb37653e7f88e363f98ce751", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26020, "upload_time": "2015-10-08T11:46:15", "upload_time_iso_8601": "2015-10-08T11:46:15.215323Z", "url": "https://files.pythonhosted.org/packages/49/73/02327197e262eab9cb2a4cdcd2cd1d77a677ec9d8c1bb0b8ebbe80ea0d20/myql-1.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4726f50bb37653e7f88e363f98ce751", "sha256": "3a79e5179ed94ac5894f19441b38092005a970f25015295e2b14675d88ec829d"}, "downloads": -1, "filename": "myql-1.2.7.tar.gz", "has_sig": false, "md5_digest": "a4726f50bb37653e7f88e363f98ce751", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26020, "upload_time": "2015-10-08T11:46:15", "upload_time_iso_8601": "2015-10-08T11:46:15.215323Z", "url": "https://files.pythonhosted.org/packages/49/73/02327197e262eab9cb2a4cdcd2cd1d77a677ec9d8c1bb0b8ebbe80ea0d20/myql-1.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:06 2020"}