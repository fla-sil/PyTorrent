{"info": {"author": "A. Belcour", "author_email": "arnaud.belcour@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Programming Language :: Python :: 3"], "description": ".. image:: https://img.shields.io/pypi/v/mpwt.svg\n\t:target: https://pypi.python.org/pypi/mpwt\n\nmpwt: Pathway Tools multiprocessing wrapper\n===========================================\n\nmpwt is a python package for running Pathway Tools on multiple genomes using multiprocessing.\n\nThere is no guarantee that this script will work, it is a Work In Progress in early state.\n\n.. contents:: Table of contents\n   :backlinks: top\n   :local:\n\nInstallation\n------------\n\nRequirements\n~~~~~~~~~~~~\n\nmpwt works only on **Python 3** and it has been tested on Python 3.6.\nIt requires some python packages (`biopython <https://github.com/biopython/biopython>`__, `docopt <https://github.com/docopt/docopt>`__ and `gffutils <https://github.com/daler/gffutils>`__) and **Pathway Tools**. For the multiprocessing, mpwt uses the `multiprocessing library of Python 3 <https://docs.python.org/3/library/multiprocessing.html>`__.\n\nYou must have an environment where Pathway Tools is installed. Pathway Tools can be obtained `here <http://bioinformatics.ai.sri.com/ptools/>`__.\n\nPathway Tools needs **Blast**, so it must be install on your system. Depending on your system, Pathway Tools needs a file named **.ncbirc** to locate Blast, for more informations look at `this page <http://bioinformatics.ai.sri.com/ptools/installation-guide/released/blast.html>`__.\n\n/!\\\\ For all OS, Pathway-Tools must be in ``$PATH``.\n\nOn Linux and MacOS: ``export PATH=$PATH:your/install/directory/pathway-tools``.\n\nConsider adding Pathway Tools in ``$PATH`` permanently by running\n\n.. code:: sh\n\n\techo 'export PATH=\"$PATH:your/install/directory/pathway-tools:\"' >> ~/.bashrc\n\nIf your OS doesn't support Pathway Tools, you can use a docker container. If it's your case, look at `Pathway Tools Multiprocessing Docker <https://github.com/ArnaudBelcour/mpwt-docker>`__.\nIt is a dockerfile that will create a container with Pathway Tools, its dependencies and this package. You just need to give a Pathway Tools installer as input.\n\nYou can also look at `Pathway Tools Multiprocessing Singularity <https://github.com/ArnaudBelcour/mpwt-singularity>`__.\nMore manipulations are required compared to Docker but with this you can create a Singularity image.\n\nUsing pip\n~~~~~~~~~\n\n.. code:: sh\n\n\tpip install mpwt\n\nUse\n---\n\nInput data\n~~~~~~~~~~\n\nThe script takes a folder containing sub-folders as input. Each sub-folder contains a Genbank/GFF file or multiple PathoLogic Format (PF) files.\n\n.. code-block:: text\n\n    Folder_input\n    \u251c\u2500\u2500 species_1\n    \u2502   \u2514\u2500\u2500 species_1.gbk\n    \u251c\u2500\u2500 species_2\n    \u2502   \u2514\u2500\u2500 species_2.gff\n    \u2502   \u2514\u2500\u2500 species_2.fasta\n    \u251c\u2500\u2500 species_3\n    \u2502   \u2514\u2500\u2500 species_3.gbk\n    \u251c\u2500\u2500 species_4\n    \u2502   \u2514\u2500\u2500 scaffold_1.pf\n    \u2502   \u2514\u2500\u2500 scaffold_1.fasta\n    \u2502   \u2514\u2500\u2500 scaffold_2.pf\n    \u2502   \u2514\u2500\u2500 scaffold_2.fasta\n    taxon_id.tsv\n    ..\n\nInput files must have the same name as the folder in which they are located and also finished with a .gbk/.gbff or a .gff.\n\nFor PF files, there is one file for each scaffold/contig and one corresponding fasta file.\n\nPathway Tools will run on each Genbank/GFF/PF files. It will create the results in the ptools-local folder but you can also choose an output folder.\n\nGenbank\n+++++++\n\nGenbank file example:\n\n.. code-block:: text\n\n    LOCUS       scaffold1         XXXXXX bp    DNA     linear   INV DD-MMM-YYYY\n    DEFINITION  My species genbank.\n    ACCESSION   scaffold1\n    VERSION     scaffold1\n    KEYWORDS    Key words.\n    SOURCE      Source\n    ORGANISM  Species name\n                Taxonomy; Of; My; Species; With;\n                The; Genus.\n    FEATURES             Location/Qualifiers\n        source          1..XXXXXX\n                        /scaffold=\"scaffold1\"\n                        /db_xref=\"taxon:taxonid\"\n        gene            START..STOP\n                        /locus_tag=\"gene1\"\n        mRNA            START..STOP\n                        /locus_tag=\"gene1\"\n        CDS             START..STOP\n                        /locus_tag=\"gene1\"\n                        /db_xref=\"InterPro:IPRXXXXXX\"\n                        /go_component=\"GO:XXXXXXX\"\n                        /EC_number=\"X.X.X.X\"\n                        /translation=\"AMINOAACIDSSEQUENCE\"\n\nLook at the `NCBI GBK format <http://www.insdc.org/files/feature_table.html#7.1.2>`__ for more informations.\nYou can also look at the `example <http://bioinformatics.ai.sri.com/ptools/sample.gbff>`__ provided on Pathway Tools site.\n\nGFF\n+++\n\nGFF file example:\n\n.. code-block:: text\n\n    ##gff-version 3\n    ##sequence-region scaffold_1 1 XXXXXX\n    scaffold_1\tRefSeq\tregion\t1\tXXXXXXX\t.\t+\t.\tID=region_id;Dbxref=taxon:XXXXXX\n    scaffold_1\tRefSeq\tgene\tSTART\tSTOP\t.\t-\t.\tID=gene_id\n    scaffold_1\tRefSeq\tCDS\tSTART\tSTOP\t.\t-\t0\tID=cds_id;Parent=gene_id\n\n**Warning**: it seems that metabolic networks from GFF file have less reactions/pathways/compounds than metabolic networks from Genbank file.\nLack of some annotations (EC, GO) can be the reason explaining these differences.\n\nLook at the `NCBI GFF format <https://www.ncbi.nlm.nih.gov/genbank/genomes_gff/>`__ for more informations.\n\nYou have to provide a nucleotide sequence file associated with the GFF file containing the chromosome/scaffold/contig sequence.\n\n.. code-block:: text\n\n    >scaffold_1\n    ATGATGCTGATACTGACTTAGCAT\n\nPathoLogic Format\n+++++++++++++++++\n\nPF file example:\n\n.. code-block:: text\n\n    ;;;;;;;;;;;;;;;;;;;;;;;;;\n    ;; scaffold_1\n    ;;;;;;;;;;;;;;;;;;;;;;;;;\n    ID\tgene_id\n    NAME\tgene_id\n    STARTBASE\tSTART\n    ENDBASE\tSTOP\n    FUNCTION\tORF\n    PRODUCT-TYPE\tP\n    PRODUCT-ID\tprot gene_id\n    EC\tX.X.X.X\n    DBLINK\tGO:XXXXXXX\n    INTRON\tSTART1-STOP1\n    //\n\nLook at the `Pathologic format <http://bioinformatics.ai.sri.com/ptools/tpal.pf>`__ for more informations.\n\nYou have to provide one nucleotide sequence for each pathologic containing one scaffold/contig.\n\n.. code-block:: text\n\n    >scaffold_1\n    ATGATGCTGATACTGACTTAGCAT\n\nAlso to add the taxon ID we need the **taxon_id.tsv** (a tsv file with two values: the name of the folder containing the PF files and the taxon ID corresponding).\n\n+------------+------------+\n|species     |taxon_id    |\n+============+============+\n|species_4   |4           |\n+------------+------------+\n\nIf you don't have taxon ID in your Genbank or GFF file, you can add one in this file for the corresponding species.\n\nYou can also add more informations for the genetic elements like **circularity of genome** (Y or N), **type of genetic element** (:CHRSM, :PLASMID, :MT (mitochondrial chromosome), :PT (chloroplast chromosome), or :CONTIG) or **codon table** (see the corresponding code below).\n\nExample:\n\n+------------+------------+------------+------------+------------+-------------------+\n|species     |taxon_id    |  circular  |element_type| codon_table| corresponding_file|\n+============+============+============+============+============+===================+\n|species_1   |10          |    Y       | :CHRSM     |1           |                   |\n+------------+------------+------------+------------+------------+-------------------+\n|species_4   |4           |    N       | :CHRSM     |1           |  scaffold_1       |\n+------------+------------+------------+------------+------------+-------------------+\n|species_4   |4           |    N       | :MT        |1           |  scaffold_2       |\n+------------+------------+------------+------------+------------+-------------------+\n\nAs you can see for **PF file** (species_4) you can use the column **corresponding_file** to add information for each PF files.\n\nGenetic code for Pathway Tools:\n\n+--------------------+-----------------------------------------------------------------------------------------------+\n|Corresponding number|Genetic code                                                                                   |\n+====================+===============================================================================================+\n|0                   |Unspecified                                                                                    |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|1                   | The Standard Code                                                                             |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|2                   | The Vertebrate Mitochondrial Code                                                             |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|3                   | The Yeast Mitochondrial Code                                                                  |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|4                   | The Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma Code  |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|5                   |The Invertebrate Mitochondrial Code                                                            |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|6                   | The Ciliate, Dasycladacean and Hexamita Nuclear Code                                          |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|9                   | The Echinoderm and Flatworm Mitochondrial Code                                                |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|10                  | The Euplotid Nuclear Code                                                                     |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|11                  | The Bacterial, Archaeal and Plant Plastid Code                                                |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|12                  | The Alternative Yeast Nuclear Code                                                            |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|13                  |The Ascidian Mitochondrial Code                                                                |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|14                  | The Alternative Flatworm Mitochondrial Code                                                   |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|15                  |Blepharisma Nuclear Code                                                                       |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|16                  | Chlorophycean Mitochondrial Code                                                              |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|21                  | Trematode Mitochondrial Code                                                                  |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|22                  |Scenedesmus obliquus Mitochondrial Code                                                        |\n+--------------------+-----------------------------------------------------------------------------------------------+\n|23                  | Thraustochytrium Mitochondrial Code                                                           |\n+--------------------+-----------------------------------------------------------------------------------------------+\n\nInput files created by mpwt\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThree input files are created by mpwt. Informations are extracted from the Genbank/GFF/PF file.\nmyDBName corresponds to the name of the folder and the Genbank/GFF/PF file.\ntaxonid corresponds to the taxonid in the db_xref of the source feature in the Genbank/GFF/PF.\nThe species_name is extracted from the Genbank/GFF/PF files.\n\n.. code-block:: text\n\n    **organism-params.dat**\n    ID  myDBName\n    STORAGE FILE\n    NCBI-TAXON-ID   taxonid\n    NAME    species_name\n\n    **genetic-elements.dats**\n    NAME    \n    ANNOT-FILE  gbk_pathname\n    //\n\n    **dat_creation.lisp**\n    (in-package :ecocyc)\n    (select-organism :org-id 'myDBName)\n    (let ((*progress-noter-enabled?* NIL))\n            (create-flat-files-for-current-kb))\n\nCommand Line and Python arguments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nmpwt can be used with the command line:\n\n.. code:: sh\n\n    mpwt -f path/to/folder/input [-o path/to/folder/output] [--patho] [--hf] [--op] [--nc] [-p FLOAT] [--dat] [--md] [--cpu INT] [-r] [--clean] [--log path/to/folder/log] [--ignore-error] [-v]\n\nOptional argument are identified by [].\n\nmpwt can be used in a python script with an import:\n\n.. code:: python\n\n    import mpwt\n\n    folder_input = \"path/to/folder/input\"\n    folder_output = \"path/to/folder/output\"\n\n    mpwt.multiprocess_pwt(input_folder=folder_input,\n\t\t\t  output_folder=folder_output,\n\t\t\t  patho_inference=optional_boolean,\n\t\t\t  patho_hole_filler=optional_boolean,\n\t\t\t  patho_operon_predictor=optional_boolean,\n\t\t\t  no_download_articles=optional_boolean,\n\t\t\t  dat_creation=optional_boolean,\n\t\t\t  dat_extraction=optional_boolean,\n\t\t\t  size_reduction=optional_boolean,\n\t\t\t  number_cpu=int,\n\t\t\t  patho_log=optional_folder_pathname,\n\t\t\t  ignore_error=optional_boolean,\n\t\t\t  pathway_score=pathway_score,\n\t\t\t  taxon_file=optional_boolean,\n\t\t\t  verbose=optional_boolean)\n\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n| Command line argument   | Python argument                                | description                                                             |\n+=========================+================================================+=========================================================================+\n|          -f             | input_folder(string: folder pathname)          | Input folder as described in Input data                                 |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          -o             | output_folder(string: folder pathname)         | Output folder containing PGDB data or dat files (see --dat arguments)   |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --patho        | patho_inference(boolean)                       | Launch PathoLogic inference on input folder                             |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --hf           | patho_hole_filler(boolean)                     | Launch PathoLogic Hole Filler with Blast                                |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --op           | patho_operon_predictor(boolean)                | Launch PathoLogic Operon Predictor                                      |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --nc           | no_download_articles(boolean)                  | Launch PathoLogic without loading PubMed citations (**not working**)    |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          -p             | pathway_score(float)                           | Launch PathoLogic using a specified pathway prediction score            |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --dat          | dat_creation(boolean)                          | Create BioPAX/attribute-value dat files                                 |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --md           | dat_extraction(boolean)                        | Move only the dat files inside the output folder                        |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --cpu          | number_cpu(int)                                | Number of cpu used for the multiprocessing                              |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          -r             | size_reduction(boolean)                        | Delete PGDB in ptools-local to reduce size and return compressed files  |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --log          | patho_log(string: folder pathname)             | Folder where log files for PathoLogic inference will be store           |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --delete       | mpwt.remove_pgdbs(string: pgdb name)           | Delete a specific PGDB                                                  |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          --clean        | mpwt.cleaning()                                | Delete all PGDBs in ptools-local folder or only PGDB from input folder  |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|     --ignore-error      | ignore_error(boolean)                          | Ignore errors and continue the workflow for successful build            |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|     --taxon-file        | taxon_file(boolean)                            | Force mpwt to use the taxon ID in the taxon_id.tsv file                 |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n|          -v             | verbose(boolean)                               | Print some information about the processing of mpwt                     |\n+-------------------------+------------------------------------------------+-------------------------------------------------------------------------+\n\nThere is also another argument:\n\n.. code:: sh\n\n    mpwt topf -f input_folder -o output_folder -c cpu_number\n\n.. code:: python\n\n    import mpwt\n    mpwt.create_pathologic_file(input_folder, output_folder, cpu_number)\n\nThis argument reads the input data inside the input folder. Then it converts Genbank and GFF files into PathoLogic Format files. And if there is already PathoLogic files it copies them.\n\nIt can be used to avoid issues with parsing Genbank and GFF files. But it is an early Work in Progress.\n\nExamples\n~~~~~~~~\n\nPossible uses of mpwt:\n\n..\n\n    .. code:: sh\n\n        command line\n\n    .. code:: python\n\n        import mpwt\n        python script\n\nCreate PGDBs of studied organisms inside ptools-local:\n\n..\n\n    .. code:: sh\n\n        mpwt -f path/to/folder/input --patho\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(input_folder='path/to/folder/input',\n                patho_inference=True)\n\nConvert Genbank and GFF files into PathoLogic files then create PGDBs of studied organisms inside ptools-local:\n\n..\n\n    .. code:: sh\n\n        mpwt topf -f path/to/folder/input -o path/to/folder/pf\n        mpwt -f path/to/folder/pf --patho\n\n    .. code:: python\n\n        import mpwt\n        mpwt.create_pathologic_file(input_folder='path/to/folder/input', output_folder='path/to/folder/pf')\n        mpwt.multiprocess_pwt(input_folder='path/to/folder/pf', patho_inference=True)\n\nCreate PGDBs of studied organisms inside ptools-local with Hole Filler, Operon Predictor and without loading PubMed citations (need Pathway Tools 23.5 or higher):\n\n..\n\n    .. code:: sh\n\n        mpwt -f path/to/folder/input --patho --hf --op --nc --log path/to/folder/log\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(input_folder='path/to/folder/input',\n                patho_inference=True,\n                patho_hole_filler=True,\n                patho_operon_predictor=True,\n                no_download_articles=True,\n                patho_log='path/to/folder/log')\n\nCreate PGDBs of studied organisms inside ptools-local with pathway prediction score of 1:\n\n..\n\n    .. code:: sh\n\n        mpwt -f path/to/folder/input --patho -p 1.0\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(input_folder='path/to/folder/input',\n                patho_inference=True,\n                pathway_score=1.0)\n\nCreate PGDBs of studied organisms inside ptools-local and create dat files:\n\n..\n\n    .. code:: sh\n\n        mpwt -f path/to/folder/input --patho --dat\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(input_folder='path/to/folder/input',\n                patho_inference=True,\n                            dat_creation=True)\n\nCreate PGDBs of studied organisms inside ptools-local.\nThen move the files to the output folder.\n\n..\n\n    .. code:: sh\n\n        mpwt -f path/to/folder/input --patho -o path/to/folder/output\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(input_folder='path/to/folder/input',\n                            output_folder='path/to/folder/output',\n                patho_inference=True)\n\nCreate PGDBs of studied organisms inside ptools-local and create dat files.\nThen move the dat files to the output folder.\n\n..\n\n    .. code:: sh\n\n        mpwt -f path/to/folder/input --patho --dat -o path/to/folder/output --md\n\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(input_folder='path/to/folder/input',\n                            output_folder='path/to/folder/output',\n                patho_inference=True,\n                            dat_creation=True,\n                dat_extraction=True)\n\n\nCreate dat files for the PGDB inside ptools-local.\nAnd move them to the output folder.\n\n..\n\n    .. code:: sh\n\n        mpwt --dat -o path/to/folder/output --md\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(output_folder='path/to/folder/output',\n                            dat_creation=True,\n                dat_extraction=True)\n\nMove PGDB from ptools-local to the output folder:\n\n..\n\n    .. code:: sh\n\n        mpwt -o path/to/folder/output\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(output_folder='path/to/folder/output')\n\nMove dat files from ptools-local to the output folder:\n\n..\n\n    .. code:: sh\n\n        mpwt -o path/to/folder/output --md\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(output_folder='path/to/folder/output',\n                dat_extraction=True)\n\n\nUseful functions\n~~~~~~~~~~~~~~~~\n\n- Run the multiprocess Pathway Tools on input folder\n\n..\n\n    .. code:: python\n\n        import mpwt\n        mpwt.multiprocess_pwt(input_folder,\n                              output_folder,\n                              patho_inference=optional_boolean,\n                              dat_creation=optional_boolean,\n                              dat_extraction=optional_boolean,\n                              size_reduction=optional_boolean,\n                              number_cpu=int,\n                              verbose=optional_boolean)\n\n- Delete all the previous PGDB and the metadata files\n\n..\n\n    .. code:: python\n\n        import mpwt\n        mpwt.cleaning()\n\n    This can also be used with a command line argument:\n\n    .. code:: sh\n\n        mpwt --clean\n\n    If you use clean and the argument -f input_folder, it will delete input files ('dat_creation.lisp', 'dat_creation.log', 'pathologic.log', 'pwt_terminal.log', 'genetic-elements.dat' and 'organism-params.dat') and the PGDB corresponding to the input folder.\n\n    .. code:: sh\n\n        mpwt -f input_folder --clean\n\n    For example if you have:\n\n    .. code-block:: text\n\n        Folder_input\n        \u251c\u2500\u2500 species_1\n        \u2502   \u2514\u2500\u2500 species_1.gbk\n        \u251c\u2500\u2500 species_2\n        \u2502   \u2514\u2500\u2500 species_2.gff\n        \u2502   \u2514\u2500\u2500 species_2.fasta\n        \u251c\u2500\u2500 species_3\n        \u2502   \u2514\u2500\u2500 species_3.gbk\n\n    And you have in your ptools-local:\n\n    .. code-block:: text\n\n        ptools-local\n        \u251c\u2500\u2500 pgdbs\n            \u251c\u2500\u2500 user\n                \u251c\u2500\u2500 species_1cyc\n                \u2502   \u2514\u2500\u2500 ..\n                \u251c\u2500\u2500 species_2cyc\n                \u2502   \u2514\u2500\u2500 ..\n                \u251c\u2500\u2500 species_3cyc\n                \u2502   \u2514\u2500\u2500 ..\n                \u251c\u2500\u2500 species_4cyc\n                \u2502   \u2514\u2500\u2500 ..\n\n    The command:\n\n    .. code:: sh\n\n        mpwt -f input_folder --clean\n\n    will delete species_1cyc, species_2cyc and species_3cyc but not species_4cyc.\n\n- Delete a specific PGDB\n\n..\n\n    With this command, it is possible to delete a specific PGDB, where pgdb_name is the name of the PGDB (ending with 'cyc'). It can be multiple pgdbs, to do this, put all the pgdb IDs in a string separated by  a ','.\n\n    .. code:: python\n\n        import mpwt\n        mpwt.remove_pgdbs(pgdb_name)\n\n    And as a command line:\n\n    .. code:: sh\n\n        mpwt --delete mydbcyc1,mydbcyc2\n\n- Return the path of ptools-local\n\n..\n\n    .. code:: python\n\n        import mpwt\n        ptools_local_path = mpwt.find_ptools_path()\n\n\n- Return a list containing all the PGDBs inside ptools-local folder\n\n..\n\n    .. code:: python\n\n        import mpwt\n        list_of_pgdbs = mpwt.list_pgdb()\n\n    Can be used as a command with:\n\n    .. code:: sh\n\n        mpwt --list\n\nErrors\n~~~~~~\n\nIf you encounter errors (and it is highly possible) there is some tips that can help you resolved them.\n\nFor error during PathoLogic inference, you can use the log arguments.\nThe log contains the summary of the build and the error for each species.\nThere is also a pathologic.log (created by Pathway Tools), a pwt_terminal.log (log of the terminal during PathoLogic process) and a dat_creation.log (log of the terminal during attributes-values files creation) in each sub-folders.\n\nIf the build passed you have also the possibility to see the result of the inference with the file resume_inference.tsv.\nFor each species, it contains the number of genes/proteins/reactions/pathways/compounds in the metabolic network.\n\nIf Pathway Tools crashed, mpwt can print some useful information in verbose mode.\nIt will show the terminal in which Pathway Tools has crashed.\nAlso, if there is an error in pathologic.log, it will be shown after **=== Error in Pathologic.log ===**.\n\nThere is a `Pathway Tools forum <https://ask.pathwaytools.com/questions/>`__ where you can find informations on Pathway Tools errors.\n\nYou can also ignore PathoLogic errors by using the argument --ignore-error/ignore_error.\nThis option will ignore error and continue the mpwt workflow on the successful PathoLogic build.\n\nOutput\n~~~~~~\n\nIf you did not use the output argument, results (PGDB with/without BioPAX/dat files) will be inside your ptools-local folder ready to be used with Pathway Tools.\nHave in mind that mpwt does not create the cellular overview and does not used the hole-filler. So if you want these results you should run them after.\n\nIf you used the output argument, there is two potential outputs depending on the use of the option **--md/dat_extraction**:\n\n- without --md/dat_extraction, you will have a complete PGDB folder inside your results, for example:\n\n.. code-block:: text\n\n    Folder_output\n    \u251c\u2500\u2500 species_1\n    \u2502   \u2514\u2500\u2500 default-version\n    \u2502   \u2514\u2500\u2500 1.0\n    \u2502       \u2514\u2500\u2500 data\n    \u2502           \u2514\u2500\u2500 contains BioPAX/dat files if you used the --dat/dat_creation option.\n    \u2502       \u2514\u2500\u2500 input\n    \u2502           \u2514\u2500\u2500 species_1.gbk\n    \u2502           \u2514\u2500\u2500 genetic-elements.dat\n    \u2502           \u2514\u2500\u2500 organism-init.dat\n    \u2502           \u2514\u2500\u2500 organism.dat\n    \u2502       \u2514\u2500\u2500 kb\n    \u2502           \u2514\u2500\u2500 species_1.ocelot\n    \u2502       \u2514\u2500\u2500 reports\n    \u2502           \u2514\u2500\u2500 contains Pathway Tools reports.\n    \u251c\u2500\u2500 species_2\n    ..\n    \u251c\u2500\u2500 species_3\n    ..\n\n- with --md/dat_extraction, you will only have the dat files, for example:\n\n.. code-block:: text\n\n    Folder_output\n    \u251c\u2500\u2500 species_1\n    \u2502   \u2514\u2500\u2500 classes.dat\n    \u2502   \u2514\u2500\u2500 compounds.dat\n    \u2502   \u2514\u2500\u2500 dnabindsites.dat\n    \u2502   \u2514\u2500\u2500 enzrxns.dat\n    \u2502   \u2514\u2500\u2500 genes.dat\n    \u2502   \u2514\u2500\u2500 pathways.dat\n    \u2502   \u2514\u2500\u2500 promoters.dat\n    \u2502   \u2514\u2500\u2500 protein-features.dat\n    \u2502   \u2514\u2500\u2500 proteins.dat\n    \u2502   \u2514\u2500\u2500 protligandcplxes.dat\n    \u2502   \u2514\u2500\u2500 pubs.dat\n    \u2502   \u2514\u2500\u2500 reactions.dat\n    \u2502   \u2514\u2500\u2500 regulation.dat\n    \u2502   \u2514\u2500\u2500 regulons.dat\n    \u2502   \u2514\u2500\u2500 rnas.dat\n    \u2502   \u2514\u2500\u2500 species.dat\n    \u2502   \u2514\u2500\u2500 terminators.dat\n    \u2502   \u2514\u2500\u2500 transunits.dat\n    \u2502   \u2514\u2500\u2500 ..\n    \u251c\u2500\u2500 species_2\n    ..\n    \u251c\u2500\u2500 species_3\n    ..\n\n- with the **-r /size_reduction** argument, you will have compressed zip files (and PGDBs inside ptools-local will be deleted):\n\n.. code-block:: text\n\n    Folder_output\n    \u251c\u2500\u2500 species_1.zip\n    \u251c\u2500\u2500 species_2.zip\n    \u251c\u2500\u2500 species_3.zip\n    ..\n\nFor developer\n-------------\n\nmpwt uses logging so you need to create the handler configuration if you want mpwt's log in your application:\n\n.. code:: python\n\n    import logging\n\n    from mpwt import multiprocess_pwt\n\n    logging.basicConfig()\n\n    multiprocess_pwt(...)\n\nRelease Notes\n-------------\n\nChanges between version are listed on the `release page <https://github.com/AuReMe/mpwt/releases>`__.\n\nCitation\n--------\n\nArnaud Belcour, Cl\u00e9mence Frioux, Meziane Aite, Anthony Bretaudeau, Anne Siegel (2019) Metage2Metabo: metabolic complementarity applied to genomes of large-scale microbiotas for the identification of keystone species. bioRxiv 803056; doi: `https://doi.org/10.1101/803056 <https://doi.org/10.1101/803056>`__.\n\nAcknowledgements\n----------------\n\n`M\u00e9zaine Aite <https://github.com/mezianeAITE>`__ for his work on the first draft of this package.\n\n`Cl\u00e9mence Frioux <https://github.com/cfrioux>`__ for her work and feedbacks.\n\nPeter Karp, Suzanne Paley, Markus Krummenacker, Richard Billington and Anamika Kothari from the Bioinformatics Research Group of SRI International for their help on Pathway Tools and on Genbank format.\n\nGenOuest bioinformatics (https://www.genouest.org/) core facility for providing the computing infrastructure to test this tool.\n\nAll the users that have tested this tool.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AuReMe/mpwt", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mpwt", "package_url": "https://pypi.org/project/mpwt/", "platform": "", "project_url": "https://pypi.org/project/mpwt/", "project_urls": {"Homepage": "https://github.com/AuReMe/mpwt"}, "release_url": "https://pypi.org/project/mpwt/0.5.4/", "requires_dist": null, "requires_python": "", "summary": "Multiprocessing for Pathway Tools", "version": "0.5.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/mpwt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/mpwt.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc099f32601abae085788e7847dc809a7ad1d80a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d7077742e737667\"></a>\n<div id=\"mpwt-pathway-tools-multiprocessing-wrapper\">\n<h2>mpwt: Pathway Tools multiprocessing wrapper</h2>\n<p>mpwt is a python package for running Pathway Tools on multiple genomes using multiprocessing.</p>\n<p>There is no guarantee that this script will work, it is a Work In Progress in early state.</p>\n<div id=\"table-of-contents\">\n<p>Table of contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#requirements\" id=\"id2\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#using-pip\" id=\"id3\" rel=\"nofollow\">Using pip</a></li>\n</ul>\n</li>\n<li><a href=\"#use\" id=\"id4\" rel=\"nofollow\">Use</a><ul>\n<li><a href=\"#input-data\" id=\"id5\" rel=\"nofollow\">Input data</a><ul>\n<li><a href=\"#genbank\" id=\"id6\" rel=\"nofollow\">Genbank</a></li>\n<li><a href=\"#gff\" id=\"id7\" rel=\"nofollow\">GFF</a></li>\n<li><a href=\"#pathologic-format\" id=\"id8\" rel=\"nofollow\">PathoLogic Format</a></li>\n</ul>\n</li>\n<li><a href=\"#input-files-created-by-mpwt\" id=\"id9\" rel=\"nofollow\">Input files created by mpwt</a></li>\n<li><a href=\"#command-line-and-python-arguments\" id=\"id10\" rel=\"nofollow\">Command Line and Python arguments</a></li>\n<li><a href=\"#examples\" id=\"id11\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#useful-functions\" id=\"id12\" rel=\"nofollow\">Useful functions</a></li>\n<li><a href=\"#errors\" id=\"id13\" rel=\"nofollow\">Errors</a></li>\n<li><a href=\"#output\" id=\"id14\" rel=\"nofollow\">Output</a></li>\n</ul>\n</li>\n<li><a href=\"#for-developer\" id=\"id15\" rel=\"nofollow\">For developer</a></li>\n<li><a href=\"#release-notes\" id=\"id16\" rel=\"nofollow\">Release Notes</a></li>\n<li><a href=\"#citation\" id=\"id17\" rel=\"nofollow\">Citation</a></li>\n<li><a href=\"#acknowledgements\" id=\"id18\" rel=\"nofollow\">Acknowledgements</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Installation</a></h3>\n<div id=\"requirements\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Requirements</a></h4>\n<p>mpwt works only on <strong>Python 3</strong> and it has been tested on Python 3.6.\nIt requires some python packages (<a href=\"https://github.com/biopython/biopython\" rel=\"nofollow\">biopython</a>, <a href=\"https://github.com/docopt/docopt\" rel=\"nofollow\">docopt</a> and <a href=\"https://github.com/daler/gffutils\" rel=\"nofollow\">gffutils</a>) and <strong>Pathway Tools</strong>. For the multiprocessing, mpwt uses the <a href=\"https://docs.python.org/3/library/multiprocessing.html\" rel=\"nofollow\">multiprocessing library of Python 3</a>.</p>\n<p>You must have an environment where Pathway Tools is installed. Pathway Tools can be obtained <a href=\"http://bioinformatics.ai.sri.com/ptools/\" rel=\"nofollow\">here</a>.</p>\n<p>Pathway Tools needs <strong>Blast</strong>, so it must be install on your system. Depending on your system, Pathway Tools needs a file named <strong>.ncbirc</strong> to locate Blast, for more informations look at <a href=\"http://bioinformatics.ai.sri.com/ptools/installation-guide/released/blast.html\" rel=\"nofollow\">this page</a>.</p>\n<p>/!\\ For all OS, Pathway-Tools must be in <tt>$PATH</tt>.</p>\n<p>On Linux and MacOS: <tt>export <span class=\"pre\">PATH=$PATH:your/install/directory/pathway-tools</span></tt>.</p>\n<p>Consider adding Pathway Tools in <tt>$PATH</tt> permanently by running</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s1\">'export PATH=\"$PATH:your/install/directory/pathway-tools:\"'</span> &gt;&gt; ~/.bashrc\n</pre>\n<p>If your OS doesn\u2019t support Pathway Tools, you can use a docker container. If it\u2019s your case, look at <a href=\"https://github.com/ArnaudBelcour/mpwt-docker\" rel=\"nofollow\">Pathway Tools Multiprocessing Docker</a>.\nIt is a dockerfile that will create a container with Pathway Tools, its dependencies and this package. You just need to give a Pathway Tools installer as input.</p>\n<p>You can also look at <a href=\"https://github.com/ArnaudBelcour/mpwt-singularity\" rel=\"nofollow\">Pathway Tools Multiprocessing Singularity</a>.\nMore manipulations are required compared to Docker but with this you can create a Singularity image.</p>\n</div>\n<div id=\"using-pip\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Using pip</a></h4>\n<pre>pip install mpwt\n</pre>\n</div>\n</div>\n<div id=\"use\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Use</a></h3>\n<div id=\"input-data\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Input data</a></h4>\n<p>The script takes a folder containing sub-folders as input. Each sub-folder contains a Genbank/GFF file or multiple PathoLogic Format (PF) files.</p>\n<pre>Folder_input\n\u251c\u2500\u2500 species_1\n\u2502   \u2514\u2500\u2500 species_1.gbk\n\u251c\u2500\u2500 species_2\n\u2502   \u2514\u2500\u2500 species_2.gff\n\u2502   \u2514\u2500\u2500 species_2.fasta\n\u251c\u2500\u2500 species_3\n\u2502   \u2514\u2500\u2500 species_3.gbk\n\u251c\u2500\u2500 species_4\n\u2502   \u2514\u2500\u2500 scaffold_1.pf\n\u2502   \u2514\u2500\u2500 scaffold_1.fasta\n\u2502   \u2514\u2500\u2500 scaffold_2.pf\n\u2502   \u2514\u2500\u2500 scaffold_2.fasta\ntaxon_id.tsv\n..\n</pre>\n<p>Input files must have the same name as the folder in which they are located and also finished with a .gbk/.gbff or a .gff.</p>\n<p>For PF files, there is one file for each scaffold/contig and one corresponding fasta file.</p>\n<p>Pathway Tools will run on each Genbank/GFF/PF files. It will create the results in the ptools-local folder but you can also choose an output folder.</p>\n<div id=\"genbank\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">Genbank</a></h5>\n<p>Genbank file example:</p>\n<pre>LOCUS       scaffold1         XXXXXX bp    DNA     linear   INV DD-MMM-YYYY\nDEFINITION  My species genbank.\nACCESSION   scaffold1\nVERSION     scaffold1\nKEYWORDS    Key words.\nSOURCE      Source\nORGANISM  Species name\n            Taxonomy; Of; My; Species; With;\n            The; Genus.\nFEATURES             Location/Qualifiers\n    source          1..XXXXXX\n                    /scaffold=\"scaffold1\"\n                    /db_xref=\"taxon:taxonid\"\n    gene            START..STOP\n                    /locus_tag=\"gene1\"\n    mRNA            START..STOP\n                    /locus_tag=\"gene1\"\n    CDS             START..STOP\n                    /locus_tag=\"gene1\"\n                    /db_xref=\"InterPro:IPRXXXXXX\"\n                    /go_component=\"GO:XXXXXXX\"\n                    /EC_number=\"X.X.X.X\"\n                    /translation=\"AMINOAACIDSSEQUENCE\"\n</pre>\n<p>Look at the <a href=\"http://www.insdc.org/files/feature_table.html#7.1.2\" rel=\"nofollow\">NCBI GBK format</a> for more informations.\nYou can also look at the <a href=\"http://bioinformatics.ai.sri.com/ptools/sample.gbff\" rel=\"nofollow\">example</a> provided on Pathway Tools site.</p>\n</div>\n<div id=\"gff\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">GFF</a></h5>\n<p>GFF file example:</p>\n<pre>##gff-version 3\n##sequence-region scaffold_1 1 XXXXXX\nscaffold_1  RefSeq  region  1       XXXXXXX .       +       .       ID=region_id;Dbxref=taxon:XXXXXX\nscaffold_1  RefSeq  gene    START   STOP    .       -       .       ID=gene_id\nscaffold_1  RefSeq  CDS     START   STOP    .       -       0       ID=cds_id;Parent=gene_id\n</pre>\n<p><strong>Warning</strong>: it seems that metabolic networks from GFF file have less reactions/pathways/compounds than metabolic networks from Genbank file.\nLack of some annotations (EC, GO) can be the reason explaining these differences.</p>\n<p>Look at the <a href=\"https://www.ncbi.nlm.nih.gov/genbank/genomes_gff/\" rel=\"nofollow\">NCBI GFF format</a> for more informations.</p>\n<p>You have to provide a nucleotide sequence file associated with the GFF file containing the chromosome/scaffold/contig sequence.</p>\n<pre>&gt;scaffold_1\nATGATGCTGATACTGACTTAGCAT\n</pre>\n</div>\n<div id=\"pathologic-format\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">PathoLogic Format</a></h5>\n<p>PF file example:</p>\n<pre>;;;;;;;;;;;;;;;;;;;;;;;;;\n;; scaffold_1\n;;;;;;;;;;;;;;;;;;;;;;;;;\nID  gene_id\nNAME        gene_id\nSTARTBASE   START\nENDBASE     STOP\nFUNCTION    ORF\nPRODUCT-TYPE        P\nPRODUCT-ID  prot gene_id\nEC  X.X.X.X\nDBLINK      GO:XXXXXXX\nINTRON      START1-STOP1\n//\n</pre>\n<p>Look at the <a href=\"http://bioinformatics.ai.sri.com/ptools/tpal.pf\" rel=\"nofollow\">Pathologic format</a> for more informations.</p>\n<p>You have to provide one nucleotide sequence for each pathologic containing one scaffold/contig.</p>\n<pre>&gt;scaffold_1\nATGATGCTGATACTGACTTAGCAT\n</pre>\n<p>Also to add the taxon ID we need the <strong>taxon_id.tsv</strong> (a tsv file with two values: the name of the folder containing the PF files and the taxon ID corresponding).</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>species</th>\n<th>taxon_id</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>species_4</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p>If you don\u2019t have taxon ID in your Genbank or GFF file, you can add one in this file for the corresponding species.</p>\n<p>You can also add more informations for the genetic elements like <strong>circularity of genome</strong> (Y or N), <strong>type of genetic element</strong> (:CHRSM, :PLASMID, :MT (mitochondrial chromosome), :PT (chloroplast chromosome), or :CONTIG) or <strong>codon table</strong> (see the corresponding code below).</p>\n<p>Example:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>species</th>\n<th>taxon_id</th>\n<th>circular</th>\n<th>element_type</th>\n<th>codon_table</th>\n<th>corresponding_file</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>species_1</td>\n<td>10</td>\n<td>Y</td>\n<td>:CHRSM</td>\n<td>1</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>species_4</td>\n<td>4</td>\n<td>N</td>\n<td>:CHRSM</td>\n<td>1</td>\n<td>scaffold_1</td>\n</tr>\n<tr><td>species_4</td>\n<td>4</td>\n<td>N</td>\n<td>:MT</td>\n<td>1</td>\n<td>scaffold_2</td>\n</tr>\n</tbody>\n</table>\n<p>As you can see for <strong>PF file</strong> (species_4) you can use the column <strong>corresponding_file</strong> to add information for each PF files.</p>\n<p>Genetic code for Pathway Tools:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Corresponding number</th>\n<th>Genetic code</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>0</td>\n<td>Unspecified</td>\n</tr>\n<tr><td>1</td>\n<td>The Standard Code</td>\n</tr>\n<tr><td>2</td>\n<td>The Vertebrate Mitochondrial Code</td>\n</tr>\n<tr><td>3</td>\n<td>The Yeast Mitochondrial Code</td>\n</tr>\n<tr><td>4</td>\n<td>The Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma Code</td>\n</tr>\n<tr><td>5</td>\n<td>The Invertebrate Mitochondrial Code</td>\n</tr>\n<tr><td>6</td>\n<td>The Ciliate, Dasycladacean and Hexamita Nuclear Code</td>\n</tr>\n<tr><td>9</td>\n<td>The Echinoderm and Flatworm Mitochondrial Code</td>\n</tr>\n<tr><td>10</td>\n<td>The Euplotid Nuclear Code</td>\n</tr>\n<tr><td>11</td>\n<td>The Bacterial, Archaeal and Plant Plastid Code</td>\n</tr>\n<tr><td>12</td>\n<td>The Alternative Yeast Nuclear Code</td>\n</tr>\n<tr><td>13</td>\n<td>The Ascidian Mitochondrial Code</td>\n</tr>\n<tr><td>14</td>\n<td>The Alternative Flatworm Mitochondrial Code</td>\n</tr>\n<tr><td>15</td>\n<td>Blepharisma Nuclear Code</td>\n</tr>\n<tr><td>16</td>\n<td>Chlorophycean Mitochondrial Code</td>\n</tr>\n<tr><td>21</td>\n<td>Trematode Mitochondrial Code</td>\n</tr>\n<tr><td>22</td>\n<td>Scenedesmus obliquus Mitochondrial Code</td>\n</tr>\n<tr><td>23</td>\n<td>Thraustochytrium Mitochondrial Code</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"input-files-created-by-mpwt\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Input files created by mpwt</a></h4>\n<p>Three input files are created by mpwt. Informations are extracted from the Genbank/GFF/PF file.\nmyDBName corresponds to the name of the folder and the Genbank/GFF/PF file.\ntaxonid corresponds to the taxonid in the db_xref of the source feature in the Genbank/GFF/PF.\nThe species_name is extracted from the Genbank/GFF/PF files.</p>\n<pre>**organism-params.dat**\nID  myDBName\nSTORAGE FILE\nNCBI-TAXON-ID   taxonid\nNAME    species_name\n\n**genetic-elements.dats**\nNAME\nANNOT-FILE  gbk_pathname\n//\n\n**dat_creation.lisp**\n(in-package :ecocyc)\n(select-organism :org-id 'myDBName)\n(let ((*progress-noter-enabled?* NIL))\n        (create-flat-files-for-current-kb))\n</pre>\n</div>\n<div id=\"command-line-and-python-arguments\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Command Line and Python arguments</a></h4>\n<p>mpwt can be used with the command line:</p>\n<pre>mpwt -f path/to/folder/input <span class=\"o\">[</span>-o path/to/folder/output<span class=\"o\">]</span> <span class=\"o\">[</span>--patho<span class=\"o\">]</span> <span class=\"o\">[</span>--hf<span class=\"o\">]</span> <span class=\"o\">[</span>--op<span class=\"o\">]</span> <span class=\"o\">[</span>--nc<span class=\"o\">]</span> <span class=\"o\">[</span>-p FLOAT<span class=\"o\">]</span> <span class=\"o\">[</span>--dat<span class=\"o\">]</span> <span class=\"o\">[</span>--md<span class=\"o\">]</span> <span class=\"o\">[</span>--cpu INT<span class=\"o\">]</span> <span class=\"o\">[</span>-r<span class=\"o\">]</span> <span class=\"o\">[</span>--clean<span class=\"o\">]</span> <span class=\"o\">[</span>--log path/to/folder/log<span class=\"o\">]</span> <span class=\"o\">[</span>--ignore-error<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span>\n</pre>\n<p>Optional argument are identified by [].</p>\n<p>mpwt can be used in a python script with an import:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n\n<span class=\"n\">folder_input</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/folder/input\"</span>\n<span class=\"n\">folder_output</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/folder/output\"</span>\n\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"n\">folder_input</span><span class=\"p\">,</span>\n                      <span class=\"n\">output_folder</span><span class=\"o\">=</span><span class=\"n\">folder_output</span><span class=\"p\">,</span>\n                      <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">patho_hole_filler</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">patho_operon_predictor</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">no_download_articles</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">dat_creation</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">dat_extraction</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">size_reduction</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">number_cpu</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n                      <span class=\"n\">patho_log</span><span class=\"o\">=</span><span class=\"n\">optional_folder_pathname</span><span class=\"p\">,</span>\n                      <span class=\"n\">ignore_error</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">pathway_score</span><span class=\"o\">=</span><span class=\"n\">pathway_score</span><span class=\"p\">,</span>\n                      <span class=\"n\">taxon_file</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">)</span>\n</pre>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Command line argument</th>\n<th>Python argument</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>-f</td>\n<td>input_folder(string: folder pathname)</td>\n<td>Input folder as described in Input data</td>\n</tr>\n<tr><td>-o</td>\n<td>output_folder(string: folder pathname)</td>\n<td>Output folder containing PGDB data or dat files (see \u2013dat arguments)</td>\n</tr>\n<tr><td>\u2013patho</td>\n<td>patho_inference(boolean)</td>\n<td>Launch PathoLogic inference on input folder</td>\n</tr>\n<tr><td>\u2013hf</td>\n<td>patho_hole_filler(boolean)</td>\n<td>Launch PathoLogic Hole Filler with Blast</td>\n</tr>\n<tr><td>\u2013op</td>\n<td>patho_operon_predictor(boolean)</td>\n<td>Launch PathoLogic Operon Predictor</td>\n</tr>\n<tr><td>\u2013nc</td>\n<td>no_download_articles(boolean)</td>\n<td>Launch PathoLogic without loading PubMed citations (<strong>not working</strong>)</td>\n</tr>\n<tr><td>-p</td>\n<td>pathway_score(float)</td>\n<td>Launch PathoLogic using a specified pathway prediction score</td>\n</tr>\n<tr><td>\u2013dat</td>\n<td>dat_creation(boolean)</td>\n<td>Create BioPAX/attribute-value dat files</td>\n</tr>\n<tr><td>\u2013md</td>\n<td>dat_extraction(boolean)</td>\n<td>Move only the dat files inside the output folder</td>\n</tr>\n<tr><td>\u2013cpu</td>\n<td>number_cpu(int)</td>\n<td>Number of cpu used for the multiprocessing</td>\n</tr>\n<tr><td>-r</td>\n<td>size_reduction(boolean)</td>\n<td>Delete PGDB in ptools-local to reduce size and return compressed files</td>\n</tr>\n<tr><td>\u2013log</td>\n<td>patho_log(string: folder pathname)</td>\n<td>Folder where log files for PathoLogic inference will be store</td>\n</tr>\n<tr><td>\u2013delete</td>\n<td>mpwt.remove_pgdbs(string: pgdb name)</td>\n<td>Delete a specific PGDB</td>\n</tr>\n<tr><td>\u2013clean</td>\n<td>mpwt.cleaning()</td>\n<td>Delete all PGDBs in ptools-local folder or only PGDB from input folder</td>\n</tr>\n<tr><td>\u2013ignore-error</td>\n<td>ignore_error(boolean)</td>\n<td>Ignore errors and continue the workflow for successful build</td>\n</tr>\n<tr><td>\u2013taxon-file</td>\n<td>taxon_file(boolean)</td>\n<td>Force mpwt to use the taxon ID in the taxon_id.tsv file</td>\n</tr>\n<tr><td>-v</td>\n<td>verbose(boolean)</td>\n<td>Print some information about the processing of mpwt</td>\n</tr>\n</tbody>\n</table>\n<p>There is also another argument:</p>\n<pre>mpwt topf -f input_folder -o output_folder -c cpu_number\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">create_pathologic_file</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"p\">,</span> <span class=\"n\">output_folder</span><span class=\"p\">,</span> <span class=\"n\">cpu_number</span><span class=\"p\">)</span>\n</pre>\n<p>This argument reads the input data inside the input folder. Then it converts Genbank and GFF files into PathoLogic Format files. And if there is already PathoLogic files it copies them.</p>\n<p>It can be used to avoid issues with parsing Genbank and GFF files. But it is an early Work in Progress.</p>\n</div>\n<div id=\"examples\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Examples</a></h4>\n<p>Possible uses of mpwt:</p>\n<blockquote>\n<pre><span class=\"nb\">command</span> line\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">python</span> <span class=\"n\">script</span>\n</pre>\n</blockquote>\n<p>Create PGDBs of studied organisms inside ptools-local:</p>\n<blockquote>\n<pre>mpwt -f path/to/folder/input --patho\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/input'</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Convert Genbank and GFF files into PathoLogic files then create PGDBs of studied organisms inside ptools-local:</p>\n<blockquote>\n<pre>mpwt topf -f path/to/folder/input -o path/to/folder/pf\nmpwt -f path/to/folder/pf --patho\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">create_pathologic_file</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/input'</span><span class=\"p\">,</span> <span class=\"n\">output_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/pf'</span><span class=\"p\">)</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/pf'</span><span class=\"p\">,</span> <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Create PGDBs of studied organisms inside ptools-local with Hole Filler, Operon Predictor and without loading PubMed citations (need Pathway Tools 23.5 or higher):</p>\n<blockquote>\n<pre>mpwt -f path/to/folder/input --patho --hf --op --nc --log path/to/folder/log\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/input'</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_hole_filler</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_operon_predictor</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">no_download_articles</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_log</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/log'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Create PGDBs of studied organisms inside ptools-local with pathway prediction score of 1:</p>\n<blockquote>\n<pre>mpwt -f path/to/folder/input --patho -p <span class=\"m\">1</span>.0\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/input'</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">pathway_score</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Create PGDBs of studied organisms inside ptools-local and create dat files:</p>\n<blockquote>\n<pre>mpwt -f path/to/folder/input --patho --dat\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/input'</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">dat_creation</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Create PGDBs of studied organisms inside ptools-local.\nThen move the files to the output folder.</p>\n<blockquote>\n<pre>mpwt -f path/to/folder/input --patho -o path/to/folder/output\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/input'</span><span class=\"p\">,</span>\n                    <span class=\"n\">output_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/output'</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Create PGDBs of studied organisms inside ptools-local and create dat files.\nThen move the dat files to the output folder.</p>\n<blockquote>\n<pre>mpwt -f path/to/folder/input --patho --dat -o path/to/folder/output --md\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/input'</span><span class=\"p\">,</span>\n                    <span class=\"n\">output_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/output'</span><span class=\"p\">,</span>\n        <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">dat_creation</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">dat_extraction</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Create dat files for the PGDB inside ptools-local.\nAnd move them to the output folder.</p>\n<blockquote>\n<pre>mpwt --dat -o path/to/folder/output --md\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">output_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/output'</span><span class=\"p\">,</span>\n                    <span class=\"n\">dat_creation</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">dat_extraction</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Move PGDB from ptools-local to the output folder:</p>\n<blockquote>\n<pre>mpwt -o path/to/folder/output\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">output_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/output'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Move dat files from ptools-local to the output folder:</p>\n<blockquote>\n<pre>mpwt -o path/to/folder/output --md\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">output_folder</span><span class=\"o\">=</span><span class=\"s1\">'path/to/folder/output'</span><span class=\"p\">,</span>\n        <span class=\"n\">dat_extraction</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"useful-functions\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Useful functions</a></h4>\n<ul>\n<li>Run the multiprocess Pathway Tools on input folder</li>\n</ul>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"p\">,</span>\n                      <span class=\"n\">output_folder</span><span class=\"p\">,</span>\n                      <span class=\"n\">patho_inference</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">dat_creation</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">dat_extraction</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">size_reduction</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">,</span>\n                      <span class=\"n\">number_cpu</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n                      <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">optional_boolean</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<ul>\n<li>Delete all the previous PGDB and the metadata files</li>\n</ul>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">cleaning</span><span class=\"p\">()</span>\n</pre>\n<p>This can also be used with a command line argument:</p>\n<pre>mpwt --clean\n</pre>\n<p>If you use clean and the argument -f input_folder, it will delete input files (\u2018dat_creation.lisp\u2019, \u2018dat_creation.log\u2019, \u2018pathologic.log\u2019, \u2018pwt_terminal.log\u2019, \u2018genetic-elements.dat\u2019 and \u2018organism-params.dat\u2019) and the PGDB corresponding to the input folder.</p>\n<pre>mpwt -f input_folder --clean\n</pre>\n<p>For example if you have:</p>\n<pre>Folder_input\n\u251c\u2500\u2500 species_1\n\u2502   \u2514\u2500\u2500 species_1.gbk\n\u251c\u2500\u2500 species_2\n\u2502   \u2514\u2500\u2500 species_2.gff\n\u2502   \u2514\u2500\u2500 species_2.fasta\n\u251c\u2500\u2500 species_3\n\u2502   \u2514\u2500\u2500 species_3.gbk\n</pre>\n<p>And you have in your ptools-local:</p>\n<pre>ptools-local\n\u251c\u2500\u2500 pgdbs\n    \u251c\u2500\u2500 user\n        \u251c\u2500\u2500 species_1cyc\n        \u2502   \u2514\u2500\u2500 ..\n        \u251c\u2500\u2500 species_2cyc\n        \u2502   \u2514\u2500\u2500 ..\n        \u251c\u2500\u2500 species_3cyc\n        \u2502   \u2514\u2500\u2500 ..\n        \u251c\u2500\u2500 species_4cyc\n        \u2502   \u2514\u2500\u2500 ..\n</pre>\n<p>The command:</p>\n<pre>mpwt -f input_folder --clean\n</pre>\n<p>will delete species_1cyc, species_2cyc and species_3cyc but not species_4cyc.</p>\n</blockquote>\n<ul>\n<li>Delete a specific PGDB</li>\n</ul>\n<blockquote>\n<p>With this command, it is possible to delete a specific PGDB, where pgdb_name is the name of the PGDB (ending with \u2018cyc\u2019). It can be multiple pgdbs, to do this, put all the pgdb IDs in a string separated by  a \u2018,\u2019.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">remove_pgdbs</span><span class=\"p\">(</span><span class=\"n\">pgdb_name</span><span class=\"p\">)</span>\n</pre>\n<p>And as a command line:</p>\n<pre>mpwt --delete mydbcyc1,mydbcyc2\n</pre>\n</blockquote>\n<ul>\n<li>Return the path of ptools-local</li>\n</ul>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">ptools_local_path</span> <span class=\"o\">=</span> <span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">find_ptools_path</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n<ul>\n<li>Return a list containing all the PGDBs inside ptools-local folder</li>\n</ul>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mpwt</span>\n<span class=\"n\">list_of_pgdbs</span> <span class=\"o\">=</span> <span class=\"n\">mpwt</span><span class=\"o\">.</span><span class=\"n\">list_pgdb</span><span class=\"p\">()</span>\n</pre>\n<p>Can be used as a command with:</p>\n<pre>mpwt --list\n</pre>\n</blockquote>\n</div>\n<div id=\"errors\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Errors</a></h4>\n<p>If you encounter errors (and it is highly possible) there is some tips that can help you resolved them.</p>\n<p>For error during PathoLogic inference, you can use the log arguments.\nThe log contains the summary of the build and the error for each species.\nThere is also a pathologic.log (created by Pathway Tools), a pwt_terminal.log (log of the terminal during PathoLogic process) and a dat_creation.log (log of the terminal during attributes-values files creation) in each sub-folders.</p>\n<p>If the build passed you have also the possibility to see the result of the inference with the file resume_inference.tsv.\nFor each species, it contains the number of genes/proteins/reactions/pathways/compounds in the metabolic network.</p>\n<p>If Pathway Tools crashed, mpwt can print some useful information in verbose mode.\nIt will show the terminal in which Pathway Tools has crashed.\nAlso, if there is an error in pathologic.log, it will be shown after <strong>=== Error in Pathologic.log ===</strong>.</p>\n<p>There is a <a href=\"https://ask.pathwaytools.com/questions/\" rel=\"nofollow\">Pathway Tools forum</a> where you can find informations on Pathway Tools errors.</p>\n<p>You can also ignore PathoLogic errors by using the argument \u2013ignore-error/ignore_error.\nThis option will ignore error and continue the mpwt workflow on the successful PathoLogic build.</p>\n</div>\n<div id=\"output\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Output</a></h4>\n<p>If you did not use the output argument, results (PGDB with/without BioPAX/dat files) will be inside your ptools-local folder ready to be used with Pathway Tools.\nHave in mind that mpwt does not create the cellular overview and does not used the hole-filler. So if you want these results you should run them after.</p>\n<p>If you used the output argument, there is two potential outputs depending on the use of the option <strong>\u2013md/dat_extraction</strong>:</p>\n<ul>\n<li>without \u2013md/dat_extraction, you will have a complete PGDB folder inside your results, for example:</li>\n</ul>\n<pre>Folder_output\n\u251c\u2500\u2500 species_1\n\u2502   \u2514\u2500\u2500 default-version\n\u2502   \u2514\u2500\u2500 1.0\n\u2502       \u2514\u2500\u2500 data\n\u2502           \u2514\u2500\u2500 contains BioPAX/dat files if you used the --dat/dat_creation option.\n\u2502       \u2514\u2500\u2500 input\n\u2502           \u2514\u2500\u2500 species_1.gbk\n\u2502           \u2514\u2500\u2500 genetic-elements.dat\n\u2502           \u2514\u2500\u2500 organism-init.dat\n\u2502           \u2514\u2500\u2500 organism.dat\n\u2502       \u2514\u2500\u2500 kb\n\u2502           \u2514\u2500\u2500 species_1.ocelot\n\u2502       \u2514\u2500\u2500 reports\n\u2502           \u2514\u2500\u2500 contains Pathway Tools reports.\n\u251c\u2500\u2500 species_2\n..\n\u251c\u2500\u2500 species_3\n..\n</pre>\n<ul>\n<li>with \u2013md/dat_extraction, you will only have the dat files, for example:</li>\n</ul>\n<pre>Folder_output\n\u251c\u2500\u2500 species_1\n\u2502   \u2514\u2500\u2500 classes.dat\n\u2502   \u2514\u2500\u2500 compounds.dat\n\u2502   \u2514\u2500\u2500 dnabindsites.dat\n\u2502   \u2514\u2500\u2500 enzrxns.dat\n\u2502   \u2514\u2500\u2500 genes.dat\n\u2502   \u2514\u2500\u2500 pathways.dat\n\u2502   \u2514\u2500\u2500 promoters.dat\n\u2502   \u2514\u2500\u2500 protein-features.dat\n\u2502   \u2514\u2500\u2500 proteins.dat\n\u2502   \u2514\u2500\u2500 protligandcplxes.dat\n\u2502   \u2514\u2500\u2500 pubs.dat\n\u2502   \u2514\u2500\u2500 reactions.dat\n\u2502   \u2514\u2500\u2500 regulation.dat\n\u2502   \u2514\u2500\u2500 regulons.dat\n\u2502   \u2514\u2500\u2500 rnas.dat\n\u2502   \u2514\u2500\u2500 species.dat\n\u2502   \u2514\u2500\u2500 terminators.dat\n\u2502   \u2514\u2500\u2500 transunits.dat\n\u2502   \u2514\u2500\u2500 ..\n\u251c\u2500\u2500 species_2\n..\n\u251c\u2500\u2500 species_3\n..\n</pre>\n<ul>\n<li>with the <strong>-r /size_reduction</strong> argument, you will have compressed zip files (and PGDBs inside ptools-local will be deleted):</li>\n</ul>\n<pre>Folder_output\n\u251c\u2500\u2500 species_1.zip\n\u251c\u2500\u2500 species_2.zip\n\u251c\u2500\u2500 species_3.zip\n..\n</pre>\n</div>\n</div>\n<div id=\"for-developer\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">For developer</a></h3>\n<p>mpwt uses logging so you need to create the handler configuration if you want mpwt\u2019s log in your application:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">mpwt</span> <span class=\"kn\">import</span> <span class=\"n\">multiprocess_pwt</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">()</span>\n\n<span class=\"n\">multiprocess_pwt</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"release-notes\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Release Notes</a></h3>\n<p>Changes between version are listed on the <a href=\"https://github.com/AuReMe/mpwt/releases\" rel=\"nofollow\">release page</a>.</p>\n</div>\n<div id=\"citation\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Citation</a></h3>\n<p>Arnaud Belcour, Cl\u00e9mence Frioux, Meziane Aite, Anthony Bretaudeau, Anne Siegel (2019) Metage2Metabo: metabolic complementarity applied to genomes of large-scale microbiotas for the identification of keystone species. bioRxiv 803056; doi: <a href=\"https://doi.org/10.1101/803056\" rel=\"nofollow\">https://doi.org/10.1101/803056</a>.</p>\n</div>\n<div id=\"acknowledgements\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Acknowledgements</a></h3>\n<p><a href=\"https://github.com/mezianeAITE\" rel=\"nofollow\">M\u00e9zaine Aite</a> for his work on the first draft of this package.</p>\n<p><a href=\"https://github.com/cfrioux\" rel=\"nofollow\">Cl\u00e9mence Frioux</a> for her work and feedbacks.</p>\n<p>Peter Karp, Suzanne Paley, Markus Krummenacker, Richard Billington and Anamika Kothari from the Bioinformatics Research Group of SRI International for their help on Pathway Tools and on Genbank format.</p>\n<p>GenOuest bioinformatics (<a href=\"https://www.genouest.org/\" rel=\"nofollow\">https://www.genouest.org/</a>) core facility for providing the computing infrastructure to test this tool.</p>\n<p>All the users that have tested this tool.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6992287, "releases": {"0.1a1": [{"comment_text": "", "digests": {"md5": "59f5dc99cd59b128ded5346c2c511ed1", "sha256": "a6526c8c5183b29c49b7db1523753b228e5aae01551bb7da586dc92be5739d3f"}, "downloads": -1, "filename": "mpwt-0.1a1.tar.gz", "has_sig": false, "md5_digest": "59f5dc99cd59b128ded5346c2c511ed1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5193, "upload_time": "2018-05-17T11:43:00", "upload_time_iso_8601": "2018-05-17T11:43:00.589445Z", "url": "https://files.pythonhosted.org/packages/74/dd/c10bf103683f80a2b98aa2879268871acb68f627412d86cf21bc8aa4406b/mpwt-0.1a1.tar.gz", "yanked": false}], "0.2.9.11.3a1": [{"comment_text": "", "digests": {"md5": "75d23ec4b3c52680701b4ee91bf7b240", "sha256": "acc312f7d4e02a64866ff6e3b5aeb1dcd03154b5b66abae2e469c1f3aa598336"}, "downloads": -1, "filename": "mpwt-0.2.9.11.3a1.tar.gz", "has_sig": false, "md5_digest": "75d23ec4b3c52680701b4ee91bf7b240", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8487, "upload_time": "2018-07-05T10:01:18", "upload_time_iso_8601": "2018-07-05T10:01:18.460943Z", "url": "https://files.pythonhosted.org/packages/43/07/4f1fd31e39a8415ed6c7b3e7e5d2e00625a63ad59688f779dfdc371ad103/mpwt-0.2.9.11.3a1.tar.gz", "yanked": false}], "0.2.9.12a1": [{"comment_text": "", "digests": {"md5": "90c64e3a317bf74ee229954d3fda2cd0", "sha256": "22be9de44713aab758cbda1c75119df17718a361e52cfe4f1f1b6197dfbb7ebe"}, "downloads": -1, "filename": "mpwt-0.2.9.12a1.tar.gz", "has_sig": false, "md5_digest": "90c64e3a317bf74ee229954d3fda2cd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8443, "upload_time": "2018-09-28T12:08:14", "upload_time_iso_8601": "2018-09-28T12:08:14.411773Z", "url": "https://files.pythonhosted.org/packages/27/88/d7d381c27818a791bc3a8d3e8167b316c83a9e2f73a1a38f85751008cb5d/mpwt-0.2.9.12a1.tar.gz", "yanked": false}], "0.2.9.6a1": [{"comment_text": "", "digests": {"md5": "c286f9d8272f88a034d7142c0730b6c6", "sha256": "6eeb5de36993425118dbf421b5cd6557717b1ae7b6e716e60f4dacf5ab447eac"}, "downloads": -1, "filename": "mpwt-0.2.9.6a1.tar.gz", "has_sig": false, "md5_digest": "c286f9d8272f88a034d7142c0730b6c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8084, "upload_time": "2018-05-30T15:08:40", "upload_time_iso_8601": "2018-05-30T15:08:40.789908Z", "url": "https://files.pythonhosted.org/packages/90/6f/eed4f7ca75be01335d9a6ab7992d222e56d8b3bef748a66ca22dc33d3d9f/mpwt-0.2.9.6a1.tar.gz", "yanked": false}], "0.2.9.9.1a1": [{"comment_text": "", "digests": {"md5": "75289c2ed88ce23b0ea41ba2c1e9f72c", "sha256": "bd62216270be2f4e179a2bd24c9928650dbe37fdd98b1eaa19752e0b3a93aadb"}, "downloads": -1, "filename": "mpwt-0.2.9.9.1a1.tar.gz", "has_sig": false, "md5_digest": "75289c2ed88ce23b0ea41ba2c1e9f72c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8334, "upload_time": "2018-06-28T08:17:13", "upload_time_iso_8601": "2018-06-28T08:17:13.579720Z", "url": "https://files.pythonhosted.org/packages/af/a4/c044a78ffb2932ec0a5db6bcc50ee4a533cd9f617e102b0289a1268a5def/mpwt-0.2.9.9.1a1.tar.gz", "yanked": false}], "0.3.4.4a1": [{"comment_text": "", "digests": {"md5": "4be74011a178988a78b9663f3e78ad81", "sha256": "9e853ee493395afea880f30ab075edc5db934c72ba381f97a2973e55c9ea7482"}, "downloads": -1, "filename": "mpwt-0.3.4.4a1.tar.gz", "has_sig": false, "md5_digest": "4be74011a178988a78b9663f3e78ad81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10398, "upload_time": "2018-10-18T14:01:26", "upload_time_iso_8601": "2018-10-18T14:01:26.444761Z", "url": "https://files.pythonhosted.org/packages/53/45/5fdc81748b4119c30b6a8a19c959df1b6f67dba28ef5f169ccdd882a0315/mpwt-0.3.4.4a1.tar.gz", "yanked": false}], "0.3.5a1": [{"comment_text": "", "digests": {"md5": "d73df857235ad0fd15eac6a55c61264f", "sha256": "69e0d10ca782e32fcac3bd1fabcfba8190a45be52a5f5cba342fbb2f4aa69a2f"}, "downloads": -1, "filename": "mpwt-0.3.5a1.tar.gz", "has_sig": false, "md5_digest": "d73df857235ad0fd15eac6a55c61264f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10526, "upload_time": "2018-11-28T13:10:57", "upload_time_iso_8601": "2018-11-28T13:10:57.006613Z", "url": "https://files.pythonhosted.org/packages/ed/07/acce65952cee534a6c1bdffb04814dfd2fed0d27b72f2b557923ecd52d52/mpwt-0.3.5a1.tar.gz", "yanked": false}], "0.3.7.3a1": [{"comment_text": "", "digests": {"md5": "08ee48753286bf6300048bc37c270c87", "sha256": "f3f86de90c9f0975cfc2431ba8fff850b716454a98b27a6b6c1581e2bccad418"}, "downloads": -1, "filename": "mpwt-0.3.7.3a1.tar.gz", "has_sig": false, "md5_digest": "08ee48753286bf6300048bc37c270c87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11921, "upload_time": "2018-12-14T11:08:09", "upload_time_iso_8601": "2018-12-14T11:08:09.152572Z", "url": "https://files.pythonhosted.org/packages/fe/85/01891287e44bc6ce39b61139f8aefd203d0cdb2f90376e2d1d0d25af8b89/mpwt-0.3.7.3a1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "a0451bba133c47a43bb68c25a27431b8", "sha256": "a79f0f52b3ab3593a7f879e6eaa71416e270eb191d5da56033ee3e57375d16b3"}, "downloads": -1, "filename": "mpwt-0.4.tar.gz", "has_sig": false, "md5_digest": "a0451bba133c47a43bb68c25a27431b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15658, "upload_time": "2019-02-25T14:56:43", "upload_time_iso_8601": "2019-02-25T14:56:43.246869Z", "url": "https://files.pythonhosted.org/packages/9e/08/f449f6461534a397663ce047b00fc83eff9984f000be421ca3df0d73ddbc/mpwt-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "a71f9b9f22a63e0ebf5d7fbf81142a74", "sha256": "45d0233edb00836497207dcf739cba5f88ea6c9c33075cefa8e7a149dae9c819"}, "downloads": -1, "filename": "mpwt-0.4.1.tar.gz", "has_sig": false, "md5_digest": "a71f9b9f22a63e0ebf5d7fbf81142a74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16786, "upload_time": "2019-03-18T08:40:52", "upload_time_iso_8601": "2019-03-18T08:40:52.876147Z", "url": "https://files.pythonhosted.org/packages/4d/15/b3776695d6987d8bec6595ddef2616200e66ccc50203633afaf4bd5c64d0/mpwt-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "1ae57ad762213e046d59033fcafd06a0", "sha256": "fb95ef351ec98d9da76b0f7928acf21fecb6cbe4a505b5a8811c59d4c3aa6d0e"}, "downloads": -1, "filename": "mpwt-0.4.2.tar.gz", "has_sig": false, "md5_digest": "1ae57ad762213e046d59033fcafd06a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17729, "upload_time": "2019-03-21T15:00:20", "upload_time_iso_8601": "2019-03-21T15:00:20.563102Z", "url": "https://files.pythonhosted.org/packages/76/30/68541df60428ee875cc17d195522cec030e2ac1657d618051c434e11cf0b/mpwt-0.4.2.tar.gz", "yanked": false}], "0.4.2.1": [{"comment_text": "", "digests": {"md5": "a1b89ec1d187e4ca4fb869981fb0b5a5", "sha256": "0d7252435eb86d313b6fe894ab3ab809ba4c984ad67c164e77ab36c1d67e9ead"}, "downloads": -1, "filename": "mpwt-0.4.2.1.tar.gz", "has_sig": false, "md5_digest": "a1b89ec1d187e4ca4fb869981fb0b5a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17844, "upload_time": "2019-03-28T16:02:45", "upload_time_iso_8601": "2019-03-28T16:02:45.339417Z", "url": "https://files.pythonhosted.org/packages/d7/df/f6dd9d2b9a7ab38855db6eae5996c0196733ea08be709250f95db70e8afc/mpwt-0.4.2.1.tar.gz", "yanked": false}], "0.4.2.2": [{"comment_text": "", "digests": {"md5": "b31c2d532fabe0a78bfab744135496bf", "sha256": "74fe4df8b24e3097805629411708b1bdc5adecc98f97343041719b013808e36b"}, "downloads": -1, "filename": "mpwt-0.4.2.2.tar.gz", "has_sig": false, "md5_digest": "b31c2d532fabe0a78bfab744135496bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18913, "upload_time": "2019-04-18T12:59:50", "upload_time_iso_8601": "2019-04-18T12:59:50.636321Z", "url": "https://files.pythonhosted.org/packages/27/4d/2f9d7ad460dfb76ac636043eee488982ed6b2a52ebdf1b3089c643b06db8/mpwt-0.4.2.2.tar.gz", "yanked": false}], "0.4.2.3": [{"comment_text": "", "digests": {"md5": "6e6a8434cb4de2e18b7d9cd7cba22aa3", "sha256": "ff12e0835f29ca8e27a4cce6e9c50bae42ed25fbebb51b69324e4f60579a173b"}, "downloads": -1, "filename": "mpwt-0.4.2.3.tar.gz", "has_sig": false, "md5_digest": "6e6a8434cb4de2e18b7d9cd7cba22aa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19068, "upload_time": "2019-06-07T13:18:26", "upload_time_iso_8601": "2019-06-07T13:18:26.662790Z", "url": "https://files.pythonhosted.org/packages/93/16/ed396d28a37f1d49372e6beb5ddbc86e94f042b30539522c8aca638c2244/mpwt-0.4.2.3.tar.gz", "yanked": false}], "0.4.2.4": [{"comment_text": "", "digests": {"md5": "277052a8f4340c558b29bdc3e5fbe1fe", "sha256": "bbc55216996ebe9f897d734bdd61f7089a803aeed32e4472f472e6b13339a69b"}, "downloads": -1, "filename": "mpwt-0.4.2.4.tar.gz", "has_sig": false, "md5_digest": "277052a8f4340c558b29bdc3e5fbe1fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19082, "upload_time": "2019-06-07T14:00:35", "upload_time_iso_8601": "2019-06-07T14:00:35.865438Z", "url": "https://files.pythonhosted.org/packages/6b/cf/9a860125804db4f5e52902a7de2a26ac1981cc7779eb331d210eaf3c0096/mpwt-0.4.2.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "16806663338c283e0904866ed1ff94fd", "sha256": "1d16fa073adc2bd1343707b6e8bb426d1bc4e17d40cee984d2730a56cf14b6ed"}, "downloads": -1, "filename": "mpwt-0.5.tar.gz", "has_sig": false, "md5_digest": "16806663338c283e0904866ed1ff94fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21736, "upload_time": "2019-07-02T11:37:34", "upload_time_iso_8601": "2019-07-02T11:37:34.016577Z", "url": "https://files.pythonhosted.org/packages/e6/05/4ae85472a8e7d9b833530e636d91c356419f66e3aaf1acdfe01447a4ce99/mpwt-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "d030ec06919e49137ea597433760b725", "sha256": "9bca6b6770eba563c47cff34256913d2cc84f7a6c249e2367bd30eaffd615c53"}, "downloads": -1, "filename": "mpwt-0.5.1.tar.gz", "has_sig": false, "md5_digest": "d030ec06919e49137ea597433760b725", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31474, "upload_time": "2019-07-31T15:16:24", "upload_time_iso_8601": "2019-07-31T15:16:24.748827Z", "url": "https://files.pythonhosted.org/packages/06/3c/dbda00665d6f867bd08b2d172ca02591b7aa86f0e83a18e48385a8ec28b5/mpwt-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "c09e90465115d6a90647ce6565ecfcd9", "sha256": "dc8b9ce06904a5d3ed4d19ae696ee4c276ebcdd83a2d3554dcee03e009091a5b"}, "downloads": -1, "filename": "mpwt-0.5.2.tar.gz", "has_sig": false, "md5_digest": "c09e90465115d6a90647ce6565ecfcd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33837, "upload_time": "2019-10-17T14:44:38", "upload_time_iso_8601": "2019-10-17T14:44:38.738785Z", "url": "https://files.pythonhosted.org/packages/a1/40/19e67302e6b3de6b046972e6aa55fa1ae0e8efc6625a4bec60ff24be5962/mpwt-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "5a90a182d7a339f577e62a85b07142f7", "sha256": "3a276b0912e4924ecb2e910f56c6b0efb71850cb7985c57c841c84679693277a"}, "downloads": -1, "filename": "mpwt-0.5.3.tar.gz", "has_sig": false, "md5_digest": "5a90a182d7a339f577e62a85b07142f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37251, "upload_time": "2020-01-09T14:50:08", "upload_time_iso_8601": "2020-01-09T14:50:08.990355Z", "url": "https://files.pythonhosted.org/packages/f1/bd/743d246f01c371656cbbeee83bd059522ff10b471a087f71b72451bb2bf9/mpwt-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "0fea7d8d368cfec321f41e2bb589748c", "sha256": "6bd4e4c51cd4deaefe51207d782bd482b45d04f2b1205fb3709e6d554dda155f"}, "downloads": -1, "filename": "mpwt-0.5.4.tar.gz", "has_sig": false, "md5_digest": "0fea7d8d368cfec321f41e2bb589748c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41997, "upload_time": "2020-04-10T10:17:26", "upload_time_iso_8601": "2020-04-10T10:17:26.954183Z", "url": "https://files.pythonhosted.org/packages/01/e0/6003644d8c1fc87c8270700af29ac63f2e55addd7287214f5537f57ed1c6/mpwt-0.5.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0fea7d8d368cfec321f41e2bb589748c", "sha256": "6bd4e4c51cd4deaefe51207d782bd482b45d04f2b1205fb3709e6d554dda155f"}, "downloads": -1, "filename": "mpwt-0.5.4.tar.gz", "has_sig": false, "md5_digest": "0fea7d8d368cfec321f41e2bb589748c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41997, "upload_time": "2020-04-10T10:17:26", "upload_time_iso_8601": "2020-04-10T10:17:26.954183Z", "url": "https://files.pythonhosted.org/packages/01/e0/6003644d8c1fc87c8270700af29ac63f2e55addd7287214f5537f57ed1c6/mpwt-0.5.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:08 2020"}