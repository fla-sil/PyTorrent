{"info": {"author": "Alejandro Piad", "author_email": "apiad@apiad.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# jsonapi [![Travis](https://img.shields.io/travis/apiad/jsonapi.svg?style=flat-square)](https://travis-ci.org/apiad/jsonapi) [![Coveralls github](https://img.shields.io/coveralls/github/apiad/jsonapi.svg?style=flat-square)](https://coveralls.io/github/apiad/jsonapi?branch=master) ![Codacy grade](https://img.shields.io/codacy/grade/6cfc0cf3ee4b442bae0c43bf54a27a58.svg?style=flat-square) [![GitHub tag](https://img.shields.io/github/tag/apiad/jsonapi.svg?style=flat-square&label=current%20version)](https://github.com/apiad/jsonapi/releases) ![Python versions](https://img.shields.io/badge/Python-3.5%2C%203.6-blue.svg?style=flat-square)\n\n> A minimalistic JSON API framework in Python with support for **graphql**-style queries.\n\n**jsonapi** is heavily inspired by [graphql](https://graphql.org), but aimed at a much simpler use case. The idea is to have a minimal framework for easily building JSON based APIs, that doesn't require any particular frontend technology. The design is inspired in **graphql**'s idea of a single fully customizable endpoint, but instead of defining a specific query language, **jsonapi** is entirely based on JSON both for the query and the response, requires much less boilerplate code, only works in Python 3, and of course, is much less battle-tested. If you find **graphql** amazing but would like to try a decaffeinated version that you can setup in 10 lines, then give **jsonapi** a shot.\n\n## Instalation\n\nThe easiest installation is through `pip`. Unfortunately the cute name `jsonapi` was taken already in PyPi, so the project is registered under `jsonapi-simple`.\n\n```\npip install jsonapi-simple\n```\n\nYou can also just clone and distribute with your project's source code:\n\n    git clone https://github.com/apiad/jsonapi.git\n\n## Hello world\n\nTo illustrate the usage is best to start with an example. The main class in **jsonapi** is (wait for it...) `JsonApi`, which defines all the available commands in the API as public methods:\n\n```python\n>>> from jsonapi import JsonApi\n\n>>> class HelloWorld(JsonApi):\n...     def say(self, message, args):\n...         return message.format(args)\n\n```\n\nAfterwards, create an instance of this API and call it, passing along either a JSON-enconded string, or a pure Python dictionary, to query either methods or attributes:\n\n```python\n>>> api = HelloWorld()\n\n>>> api({\"say\": { \"$message\": \"Hello {0}!\", \"$args\": \"world\" }})\n{'say': 'Hello world!'}\n\n```\n\n## Moving on\n\nThere is more that can be done with **jsonapi**, read the [documentation](https://apiad.github.io/jsonapi/) to learn more:\n\n* Perform [structured queries](https://apiad.github.io/jsonapi#querying-complex-objects) with complex structure.\n* Pass [arguments](https://apiad.github.io/jsonapi/operators#function-arguments) to commands.\n* Obtain [aggregated data](https://apiad.github.io/jsonapi/operators#collection-operators) from collections.\n* Manipulate [JSON data](https://apiad.github.io/jsonapi/jsonobj) with an object-oriented syntax.\n* Get [type conversions](https://apiad.github.io/jsonapi/types) automatically for your API schema.\n\n## Contributing\n\nContributions are highly appreciated. Just fork and submit a pull request. All contributors will be granted credit on the following list:\n\n* Alejandro Piad ([@apiad](https://github.com/apiad))\n\n## Changelog\n\n### In the roadmap\n\n* Automatic API documentation.\n\n### v0.2.2\n\n* Finally added to PyPi as [jsonapi-simple](https://pypi.org/project/jsonapi-simple/).\n\n### v0.2.1\n\n* Support for typed arguments.\n\n### v0.2.0\n\n* Support for meta operators in dictionaries (`_count`, `_items`, `_keys`, `_values`).\n* The `JsonObj` constructor now receives either `str`, `dict` or a `**kwargs` mapping.\n\n### v0.1.4\n\n* Support for some meta operators for lists (`_count` and `_items`).\n\n### v0.1.3\n\n* Basic implementation of `JsonObj` for JSON manipulation.\n\n### v0.1.2\n\n* Suport for complex method arguments (parsed via `JsonObj`).\n\n### v0.1.1\n\n* Suport for plain method arguments.\n\n### v0.1\n\n* Basic layout of the API.\n* Simple attribute and method based navigation.\n* Automatic serialization to a JSON compatible object.\n* Basic documentation.\n\n## Colaboration\n\nThis project is licensed MIT, so you know the drill. Fork, open a pull request, and make sure to have up-to-date tests with (ideally) a 100% coverage.\n\n> MIT License\n>\n> Copyright (c) 2018 Alejandro Piad\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all\n> copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/apiad/jsonapi", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jsonapi-simple", "package_url": "https://pypi.org/project/jsonapi-simple/", "platform": "", "project_url": "https://pypi.org/project/jsonapi-simple/", "project_urls": {"Homepage": "https://github.com/apiad/jsonapi"}, "release_url": "https://pypi.org/project/jsonapi-simple/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "A minimalistic JSON API framework in Python with support for graphql-style queries.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jsonapi <a href=\"https://travis-ci.org/apiad/jsonapi\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b51d9517522b5b1ee0c2accb022e732dfebd0ac/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f61706961642f6a736f6e6170692e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://coveralls.io/github/apiad/jsonapi?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5dea19691f786ddf63d2e12064f9939ef09f6d74/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f61706961642f6a736f6e6170692e7376673f7374796c653d666c61742d737175617265\"></a> <img alt=\"Codacy grade\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac3e8d82753cc285c8c79544f79ab9fa9a4f17dc/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f67726164652f36636663306366336565346234343262616530633433626635346132376135382e7376673f7374796c653d666c61742d737175617265\"> <a href=\"https://github.com/apiad/jsonapi/releases\" rel=\"nofollow\"><img alt=\"GitHub tag\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf263457d3184b99f7d0c4486a158a0bc4eb1a83/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f61706961642f6a736f6e6170692e7376673f7374796c653d666c61742d737175617265266c6162656c3d63757272656e7425323076657273696f6e\"></a> <img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b577e1cccc18ce969b77afbd37ec51dae1275524/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e35253243253230332e362d626c75652e7376673f7374796c653d666c61742d737175617265\"></h1>\n<blockquote>\n<p>A minimalistic JSON API framework in Python with support for <strong>graphql</strong>-style queries.</p>\n</blockquote>\n<p><strong>jsonapi</strong> is heavily inspired by <a href=\"https://graphql.org\" rel=\"nofollow\">graphql</a>, but aimed at a much simpler use case. The idea is to have a minimal framework for easily building JSON based APIs, that doesn't require any particular frontend technology. The design is inspired in <strong>graphql</strong>'s idea of a single fully customizable endpoint, but instead of defining a specific query language, <strong>jsonapi</strong> is entirely based on JSON both for the query and the response, requires much less boilerplate code, only works in Python 3, and of course, is much less battle-tested. If you find <strong>graphql</strong> amazing but would like to try a decaffeinated version that you can setup in 10 lines, then give <strong>jsonapi</strong> a shot.</p>\n<h2>Instalation</h2>\n<p>The easiest installation is through <code>pip</code>. Unfortunately the cute name <code>jsonapi</code> was taken already in PyPi, so the project is registered under <code>jsonapi-simple</code>.</p>\n<pre><code>pip install jsonapi-simple\n</code></pre>\n<p>You can also just clone and distribute with your project's source code:</p>\n<pre><code>git clone https://github.com/apiad/jsonapi.git\n</code></pre>\n<h2>Hello world</h2>\n<p>To illustrate the usage is best to start with an example. The main class in <strong>jsonapi</strong> is (wait for it...) <code>JsonApi</code>, which defines all the available commands in the API as public methods:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonapi</span> <span class=\"kn\">import</span> <span class=\"n\">JsonApi</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">HelloWorld</span><span class=\"p\">(</span><span class=\"n\">JsonApi</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">say</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<p>Afterwards, create an instance of this API and call it, passing along either a JSON-enconded string, or a pure Python dictionary, to query either methods or attributes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">HelloWorld</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">api</span><span class=\"p\">({</span><span class=\"s2\">\"say\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s2\">\"$message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello </span><span class=\"si\">{0}</span><span class=\"s2\">!\"</span><span class=\"p\">,</span> <span class=\"s2\">\"$args\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span> <span class=\"p\">}})</span>\n<span class=\"p\">{</span><span class=\"s1\">'say'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello world!'</span><span class=\"p\">}</span>\n</pre>\n<h2>Moving on</h2>\n<p>There is more that can be done with <strong>jsonapi</strong>, read the <a href=\"https://apiad.github.io/jsonapi/\" rel=\"nofollow\">documentation</a> to learn more:</p>\n<ul>\n<li>Perform <a href=\"https://apiad.github.io/jsonapi#querying-complex-objects\" rel=\"nofollow\">structured queries</a> with complex structure.</li>\n<li>Pass <a href=\"https://apiad.github.io/jsonapi/operators#function-arguments\" rel=\"nofollow\">arguments</a> to commands.</li>\n<li>Obtain <a href=\"https://apiad.github.io/jsonapi/operators#collection-operators\" rel=\"nofollow\">aggregated data</a> from collections.</li>\n<li>Manipulate <a href=\"https://apiad.github.io/jsonapi/jsonobj\" rel=\"nofollow\">JSON data</a> with an object-oriented syntax.</li>\n<li>Get <a href=\"https://apiad.github.io/jsonapi/types\" rel=\"nofollow\">type conversions</a> automatically for your API schema.</li>\n</ul>\n<h2>Contributing</h2>\n<p>Contributions are highly appreciated. Just fork and submit a pull request. All contributors will be granted credit on the following list:</p>\n<ul>\n<li>Alejandro Piad (<a href=\"https://github.com/apiad\" rel=\"nofollow\">@apiad</a>)</li>\n</ul>\n<h2>Changelog</h2>\n<h3>In the roadmap</h3>\n<ul>\n<li>Automatic API documentation.</li>\n</ul>\n<h3>v0.2.2</h3>\n<ul>\n<li>Finally added to PyPi as <a href=\"https://pypi.org/project/jsonapi-simple/\" rel=\"nofollow\">jsonapi-simple</a>.</li>\n</ul>\n<h3>v0.2.1</h3>\n<ul>\n<li>Support for typed arguments.</li>\n</ul>\n<h3>v0.2.0</h3>\n<ul>\n<li>Support for meta operators in dictionaries (<code>_count</code>, <code>_items</code>, <code>_keys</code>, <code>_values</code>).</li>\n<li>The <code>JsonObj</code> constructor now receives either <code>str</code>, <code>dict</code> or a <code>**kwargs</code> mapping.</li>\n</ul>\n<h3>v0.1.4</h3>\n<ul>\n<li>Support for some meta operators for lists (<code>_count</code> and <code>_items</code>).</li>\n</ul>\n<h3>v0.1.3</h3>\n<ul>\n<li>Basic implementation of <code>JsonObj</code> for JSON manipulation.</li>\n</ul>\n<h3>v0.1.2</h3>\n<ul>\n<li>Suport for complex method arguments (parsed via <code>JsonObj</code>).</li>\n</ul>\n<h3>v0.1.1</h3>\n<ul>\n<li>Suport for plain method arguments.</li>\n</ul>\n<h3>v0.1</h3>\n<ul>\n<li>Basic layout of the API.</li>\n<li>Simple attribute and method based navigation.</li>\n<li>Automatic serialization to a JSON compatible object.</li>\n<li>Basic documentation.</li>\n</ul>\n<h2>Colaboration</h2>\n<p>This project is licensed MIT, so you know the drill. Fork, open a pull request, and make sure to have up-to-date tests with (ideally) a 100% coverage.</p>\n<blockquote>\n<p>MIT License</p>\n<p>Copyright (c) 2018 Alejandro Piad</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 4746153, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "0f3d148ece1a8073df1e3c2a9d6cb56a", "sha256": "44f45113de87bb608d8ea4d683023c9176494230eb0c1a258e205c722edbfcd6"}, "downloads": -1, "filename": "jsonapi_simple-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0f3d148ece1a8073df1e3c2a9d6cb56a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4410, "upload_time": "2019-01-27T13:16:24", "upload_time_iso_8601": "2019-01-27T13:16:24.883899Z", "url": "https://files.pythonhosted.org/packages/b0/a6/1ca8a6bf59183f1d0e5e6d7f77e26c78a26b4b8e8ad21bc95e6a6331bdc9/jsonapi_simple-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2399a9f0bd498c93b748d155b33eb5c", "sha256": "db6be5aa390a7902d945587838113c5804a8f169dd8a6ddb0dc1fc460106316c"}, "downloads": -1, "filename": "jsonapi-simple-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e2399a9f0bd498c93b748d155b33eb5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3456, "upload_time": "2019-01-27T13:16:27", "upload_time_iso_8601": "2019-01-27T13:16:27.295508Z", "url": "https://files.pythonhosted.org/packages/22/21/39b13fb16107e7680b8b2984b6500c39b97a2fbad47edce9b7df2e95e4ca/jsonapi-simple-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "b3f23eff0431eeccf3659d891d6800e5", "sha256": "2d9c03ce340f8fa1cd9d68c62a6ed22af3cc789d21358348077ef17437506c7e"}, "downloads": -1, "filename": "jsonapi_simple-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b3f23eff0431eeccf3659d891d6800e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6982, "upload_time": "2019-01-27T13:48:46", "upload_time_iso_8601": "2019-01-27T13:48:46.528202Z", "url": "https://files.pythonhosted.org/packages/aa/3a/7d31e87e974efcc0822309a8d35c71680c3fa1a89f66db5968415e01ef52/jsonapi_simple-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0326921cbc9a616551c30945702cd2af", "sha256": "05f9670a9bdc8f58759453ba0de3778b48d6f16640a622f34c1f12a7a1c9f5cd"}, "downloads": -1, "filename": "jsonapi-simple-0.2.2.tar.gz", "has_sig": false, "md5_digest": "0326921cbc9a616551c30945702cd2af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5500, "upload_time": "2019-01-27T13:48:47", "upload_time_iso_8601": "2019-01-27T13:48:47.990861Z", "url": "https://files.pythonhosted.org/packages/12/a9/c11572734f1e81bd39385ab42d5c6b059c22fee5ed04e44c8868d0d4c5fd/jsonapi-simple-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3f23eff0431eeccf3659d891d6800e5", "sha256": "2d9c03ce340f8fa1cd9d68c62a6ed22af3cc789d21358348077ef17437506c7e"}, "downloads": -1, "filename": "jsonapi_simple-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b3f23eff0431eeccf3659d891d6800e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6982, "upload_time": "2019-01-27T13:48:46", "upload_time_iso_8601": "2019-01-27T13:48:46.528202Z", "url": "https://files.pythonhosted.org/packages/aa/3a/7d31e87e974efcc0822309a8d35c71680c3fa1a89f66db5968415e01ef52/jsonapi_simple-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0326921cbc9a616551c30945702cd2af", "sha256": "05f9670a9bdc8f58759453ba0de3778b48d6f16640a622f34c1f12a7a1c9f5cd"}, "downloads": -1, "filename": "jsonapi-simple-0.2.2.tar.gz", "has_sig": false, "md5_digest": "0326921cbc9a616551c30945702cd2af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5500, "upload_time": "2019-01-27T13:48:47", "upload_time_iso_8601": "2019-01-27T13:48:47.990861Z", "url": "https://files.pythonhosted.org/packages/12/a9/c11572734f1e81bd39385ab42d5c6b059c22fee5ed04e44c8868d0d4c5fd/jsonapi-simple-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:54 2020"}