{"info": {"author": "Xia Wu", "author_email": "xiawu@zeuux.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Web3.py\n=======\n\nA Python implementation of NewChain Web3 which is forked from\nhttps://github.com/ethereum/web3.py.\n\n-  Python 3.6+ support\n\nDeveloper Setup\n---------------\n\n.. code:: sh\n\n    git clone git@github.com:xiawu/newchain-web3.py.git\n    cd newchain-web3.py\n\nPlease see OS-specific instructions for:\n\n-  `Linux <docs/README-linux.md#Developer-Setup>`__\n-  `Mac <docs/README-osx.md#Developer-Setup>`__\n-  `Windows <docs/README-windows.md#Developer-Setup>`__\n-  `FreeBSD <docs/README-freebsd.md#Developer-Setup>`__\n\nThen run these install commands:\n\n.. code:: sh\n\n    virtualenv venv\n    . venv/bin/activate\n    pip install -e .[dev]\n\nFor different environments, you can set up multiple ``virtualenv``. For\nexample, if you want to create a ``venvdocs``, then you do the\nfollowing:\n\n.. code:: sh\n\n    virtualenv venvdocs\n    . venvdocs/bin/activate\n    pip install -e .[docs]\n    pip install -e .\n\nUsing Docker\n------------\n\nIf you would like to develop and test inside a Docker environment, use\nthe *sandbox* container provided in the **docker-compose.yml** file.\n\nTo start up the test environment, run:\n\n::\n\n    docker-compose up -d\n\nThis will build a Docker container set up with an environment to run the\nPython test code.\n\n**Note: This container does not have ``go-ethereum`` installed, so you\ncannot run the go-ethereum test suite.**\n\nTo run the Python tests from your local machine:\n\n::\n\n    docker-compose exec sandbox bash -c 'pytest -n 4 -f -k \"not goethereum\"'\n\nYou can run arbitrary commands inside the Docker container by using the\n``bash -c`` prefix.\n\n::\n\n    docker-compose exec sandbox bash -c ''\n\nOr, if you would like to just open a session to the container, run:\n\n::\n\n    docker-compose exec sandbox bash\n\nTesting Setup\n~~~~~~~~~~~~~\n\nDuring development, you might like to have tests run on every file save.\n\nShow flake8 errors on file change:\n\n.. code:: sh\n\n    # Test flake8\n    when-changed -v -s -r -1 web3/ tests/ ens/ -c \"clear; flake8 web3 tests ens && echo 'flake8 success' || echo 'error'\"\n\nYou can use ``pytest-watch``, running one for every Python environment:\n\n.. code:: sh\n\n    pip install pytest-watch\n\n    cd venv\n    ptw --onfail \"notify-send -t 5000 'Test failure \u26a0\u26a0\u26a0\u26a0\u26a0' 'python 3 test on web3.py failed'\" ../tests ../web3\n\nOr, you can run multi-process tests in one command, but without color:\n\n.. code:: sh\n\n    # in the project root:\n    pytest --numprocesses=4 --looponfail --maxfail=1\n    # the same thing, succinctly:\n    pytest -n 4 -f --maxfail=1\n\nHow to Execute the Tests?\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n1. `Setup your development\n   environment <https://github.com/ethereum/web3.py/#developer-setup>`__.\n\n2. Execute ``tox`` for the tests\n\nThere are multiple\n`components <https://github.com/ethereum/web3.py/blob/master/.travis.yml#L53>`__\nof the tests. You can run test to against specific component. For\nexample:\n\n.. code:: sh\n\n    # Run Tests for the Core component (for Python 3.5):\n    tox -e py35-core\n\n    # Run Tests for the Core component (for Python 3.6):\n    tox -e py36-core\n\nIf for some reason it is not working, add ``--recreate`` params.\n\n``tox`` is good for testing against the full set of build targets. But\nif you want to run the tests individually, ``py.test`` is better for\ndevelopment workflow. For example, to run only the tests in one file:\n\n.. code:: sh\n\n    py.test tests/core/gas-strategies/test_time_based_gas_price_strategy.py\n\nRelease setup\n~~~~~~~~~~~~~\n\nFor Debian-like systems:\n\n::\n\n    apt install pandoc\n\nTo release a new version:\n\n.. code:: sh\n\n    make release bump=$$VERSION_PART_TO_BUMP$$\n\nHow to bumpversion\n^^^^^^^^^^^^^^^^^^\n\nThe version format for this repo is ``{major}.{minor}.{patch}`` for\nstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n(``stage`` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump, like\n``make release bump=minor`` or ``make release bump=devnum``.\n\nIf you are in a beta version, ``make release bump=stage`` will switch to\na stable.\n\nTo issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n``make release bump=\"--new-version 4.0.0-alpha.1 devnum\"``\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xiawu/newchain-web3.py", "keywords": "newchain", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "newchain-web3", "package_url": "https://pypi.org/project/newchain-web3/", "platform": "", "project_url": "https://pypi.org/project/newchain-web3/", "project_urls": {"Homepage": "https://github.com/xiawu/newchain-web3.py"}, "release_url": "https://pypi.org/project/newchain-web3/0.1.0/", "requires_dist": ["eth-abi (<3.0.0,>=2.0.0b6)", "newchain-account (>=0.1.0)", "eth-hash[pycryptodome] (<1.0.0,>=0.2.0)", "eth-typing (<3.0.0,>=2.0.0)", "eth-utils (<2.0.0,>=1.3.0)", "ethpm (<1.0.0,>=0.1.4a12)", "hexbytes (<1.0.0,>=0.1.0)", "lru-dict (<2.0.0,>=1.1.6)", "requests (<3.0.0,>=2.16.0)", "websockets (<8.0.0,>=7.0.0)", "pypiwin32 (>=223) ; platform_system == \"Windows\"", "eth-tester[py-evm] (==0.1.0-beta.37) ; extra == 'dev'", "py-geth (<3.0.0,>=2.0.1) ; extra == 'dev'", "pytest-ethereum (<1.0.0,>=0.1.3a6) ; extra == 'dev'", "flake8 (==3.4.1) ; extra == 'dev'", "isort (<4.3.5,>=4.2.15) ; extra == 'dev'", "mock ; extra == 'dev'", "sphinx-better-theme (>=0.1.4) ; extra == 'dev'", "click (>=5.1) ; extra == 'dev'", "configparser (==3.5.0) ; extra == 'dev'", "contextlib2 (>=0.5.4) ; extra == 'dev'", "ethtoken ; extra == 'dev'", "py-geth (>=1.4.0) ; extra == 'dev'", "py-solc (>=0.4.0) ; extra == 'dev'", "pytest (<4.0.0,>=3.5.0) ; extra == 'dev'", "sphinx ; extra == 'dev'", "sphinx-rtd-theme (>=0.1.9) ; extra == 'dev'", "toposort (>=1.4) ; extra == 'dev'", "urllib3 ; extra == 'dev'", "newchain-web3 (>=0.1.0) ; extra == 'dev'", "wheel ; extra == 'dev'", "bumpversion ; extra == 'dev'", "flaky (>=3.3.0) ; extra == 'dev'", "hypothesis (>=3.31.2) ; extra == 'dev'", "pytest (<4.0.0,>=3.6.0) ; extra == 'dev'", "pytest-mock (==1.*) ; extra == 'dev'", "pytest-pythonpath (>=0.3) ; extra == 'dev'", "pytest-watch (==4.*) ; extra == 'dev'", "pytest-xdist (==1.*) ; extra == 'dev'", "setuptools (>=36.2.0) ; extra == 'dev'", "tox (>=1.8.0) ; extra == 'dev'", "tqdm ; extra == 'dev'", "twine ; extra == 'dev'", "when-changed ; extra == 'dev'", "mock ; extra == 'docs'", "sphinx-better-theme (>=0.1.4) ; extra == 'docs'", "click (>=5.1) ; extra == 'docs'", "configparser (==3.5.0) ; extra == 'docs'", "contextlib2 (>=0.5.4) ; extra == 'docs'", "ethtoken ; extra == 'docs'", "py-geth (>=1.4.0) ; extra == 'docs'", "py-solc (>=0.4.0) ; extra == 'docs'", "pytest (<4.0.0,>=3.5.0) ; extra == 'docs'", "sphinx ; extra == 'docs'", "sphinx-rtd-theme (>=0.1.9) ; extra == 'docs'", "toposort (>=1.4) ; extra == 'docs'", "urllib3 ; extra == 'docs'", "newchain-web3 (>=0.1.0) ; extra == 'docs'", "wheel ; extra == 'docs'", "flake8 (==3.4.1) ; extra == 'linter'", "isort (<4.3.5,>=4.2.15) ; extra == 'linter'", "eth-tester[py-evm] (==0.1.0-beta.37) ; extra == 'tester'", "py-geth (<3.0.0,>=2.0.1) ; extra == 'tester'", "pytest-ethereum (<1.0.0,>=0.1.3a6) ; extra == 'tester'", "eth-testrpc (<2.0.0,>=1.3.3) ; extra == 'testrpc'"], "requires_python": ">=3.6,<4", "summary": "NewChain-Web3.py", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python implementation of NewChain Web3 which is forked from\n<a href=\"https://github.com/ethereum/web3.py\" rel=\"nofollow\">https://github.com/ethereum/web3.py</a>.</p>\n<ul>\n<li>Python 3.6+ support</li>\n</ul>\n<div id=\"developer-setup\">\n<h2>Developer Setup</h2>\n<pre>git clone git@github.com:xiawu/newchain-web3.py.git\n<span class=\"nb\">cd</span> newchain-web3.py\n</pre>\n<p>Please see OS-specific instructions for:</p>\n<ul>\n<li><a href=\"docs/README-linux.md#Developer-Setup\" rel=\"nofollow\">Linux</a></li>\n<li><a href=\"docs/README-osx.md#Developer-Setup\" rel=\"nofollow\">Mac</a></li>\n<li><a href=\"docs/README-windows.md#Developer-Setup\" rel=\"nofollow\">Windows</a></li>\n<li><a href=\"docs/README-freebsd.md#Developer-Setup\" rel=\"nofollow\">FreeBSD</a></li>\n</ul>\n<p>Then run these install commands:</p>\n<pre>virtualenv venv\n. venv/bin/activate\npip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>For different environments, you can set up multiple <tt>virtualenv</tt>. For\nexample, if you want to create a <tt>venvdocs</tt>, then you do the\nfollowing:</p>\n<pre>virtualenv venvdocs\n. venvdocs/bin/activate\npip install -e .<span class=\"o\">[</span>docs<span class=\"o\">]</span>\npip install -e .\n</pre>\n</div>\n<div id=\"using-docker\">\n<h2>Using Docker</h2>\n<p>If you would like to develop and test inside a Docker environment, use\nthe <em>sandbox</em> container provided in the <strong>docker-compose.yml</strong> file.</p>\n<p>To start up the test environment, run:</p>\n<pre>docker-compose up -d\n</pre>\n<p>This will build a Docker container set up with an environment to run the\nPython test code.</p>\n<p><strong>Note: This container does not have ``go-ethereum`` installed, so you\ncannot run the go-ethereum test suite.</strong></p>\n<p>To run the Python tests from your local machine:</p>\n<pre>docker-compose exec sandbox bash -c 'pytest -n 4 -f -k \"not goethereum\"'\n</pre>\n<p>You can run arbitrary commands inside the Docker container by using the\n<tt>bash <span class=\"pre\">-c</span></tt> prefix.</p>\n<pre>docker-compose exec sandbox bash -c ''\n</pre>\n<p>Or, if you would like to just open a session to the container, run:</p>\n<pre>docker-compose exec sandbox bash\n</pre>\n<div id=\"testing-setup\">\n<h3>Testing Setup</h3>\n<p>During development, you might like to have tests run on every file save.</p>\n<p>Show flake8 errors on file change:</p>\n<pre><span class=\"c1\"># Test flake8\n</span>when-changed -v -s -r -1 web3/ tests/ ens/ -c <span class=\"s2\">\"clear; flake8 web3 tests ens &amp;&amp; echo 'flake8 success' || echo 'error'\"</span>\n</pre>\n<p>You can use <tt><span class=\"pre\">pytest-watch</span></tt>, running one for every Python environment:</p>\n<pre>pip install pytest-watch\n\n<span class=\"nb\">cd</span> venv\nptw --onfail <span class=\"s2\">\"notify-send -t 5000 'Test failure \u26a0\u26a0\u26a0\u26a0\u26a0' 'python 3 test on web3.py failed'\"</span> ../tests ../web3\n</pre>\n<p>Or, you can run multi-process tests in one command, but without color:</p>\n<pre><span class=\"c1\"># in the project root:\n</span>pytest --numprocesses<span class=\"o\">=</span><span class=\"m\">4</span> --looponfail --maxfail<span class=\"o\">=</span><span class=\"m\">1</span>\n<span class=\"c1\"># the same thing, succinctly:\n</span>pytest -n <span class=\"m\">4</span> -f --maxfail<span class=\"o\">=</span><span class=\"m\">1</span>\n</pre>\n<div id=\"how-to-execute-the-tests\">\n<h4>How to Execute the Tests?</h4>\n<ol>\n<li><a href=\"https://github.com/ethereum/web3.py/#developer-setup\" rel=\"nofollow\">Setup your development\nenvironment</a>.</li>\n<li>Execute <tt>tox</tt> for the tests</li>\n</ol>\n<p>There are multiple\n<a href=\"https://github.com/ethereum/web3.py/blob/master/.travis.yml#L53\" rel=\"nofollow\">components</a>\nof the tests. You can run test to against specific component. For\nexample:</p>\n<pre><span class=\"c1\"># Run Tests for the Core component (for Python 3.5):\n</span>tox -e py35-core\n\n<span class=\"c1\"># Run Tests for the Core component (for Python 3.6):\n</span>tox -e py36-core\n</pre>\n<p>If for some reason it is not working, add <tt><span class=\"pre\">--recreate</span></tt> params.</p>\n<p><tt>tox</tt> is good for testing against the full set of build targets. But\nif you want to run the tests individually, <tt>py.test</tt> is better for\ndevelopment workflow. For example, to run only the tests in one file:</p>\n<pre>py.test tests/core/gas-strategies/test_time_based_gas_price_strategy.py\n</pre>\n</div>\n</div>\n<div id=\"release-setup\">\n<h3>Release setup</h3>\n<p>For Debian-like systems:</p>\n<pre>apt install pandoc\n</pre>\n<p>To release a new version:</p>\n<pre>make release <span class=\"nv\">bump</span><span class=\"o\">=</span><span class=\"nv\">$$</span>VERSION_PART_TO_BUMP<span class=\"nv\">$$</span>\n</pre>\n<div id=\"how-to-bumpversion\">\n<h4>How to bumpversion</h4>\n<p>The version format for this repo is <tt><span class=\"pre\">{major}.{minor}.{patch}</span></tt> for\nstable, and <tt><span class=\"pre\">{major}.{minor}.{patch}-{stage}.{devnum}</span></tt> for unstable\n(<tt>stage</tt> can be alpha or beta).</p>\n<p>To issue the next version in line, specify which part to bump, like\n<tt>make release bump=minor</tt> or <tt>make release bump=devnum</tt>.</p>\n<p>If you are in a beta version, <tt>make release bump=stage</tt> will switch to\na stable.</p>\n<p>To issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n<tt>make release <span class=\"pre\">bump=\"--new-version</span> <span class=\"pre\">4.0.0-alpha.1</span> devnum\"</tt></p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4971856, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d7dac3f6f4f0d0596ab3b7e974fee02b", "sha256": "d8860e96618558fda064196d9c49fed1fc0dd947d488eabd49ebed191b3b90a7"}, "downloads": -1, "filename": "newchain_web3-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d7dac3f6f4f0d0596ab3b7e974fee02b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 140879, "upload_time": "2019-03-22T08:39:14", "upload_time_iso_8601": "2019-03-22T08:39:14.931859Z", "url": "https://files.pythonhosted.org/packages/72/be/6e1c786af9533f3030f6c844b09bed867b27d3fccc636a3238f0fd7c1741/newchain_web3-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7deb1fa24af5e88ebe60af98ce96a428", "sha256": "bc0b21d8bea5afd57490b939c531cb15a77e4cad9a2cf758d1bc43a3630936bc"}, "downloads": -1, "filename": "newchain-web3-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7deb1fa24af5e88ebe60af98ce96a428", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 110465, "upload_time": "2019-03-22T08:39:17", "upload_time_iso_8601": "2019-03-22T08:39:17.713148Z", "url": "https://files.pythonhosted.org/packages/a6/43/216812281d79333be439b1eb86d20b9ff64a30f5bcea21a13784215ca029/newchain-web3-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7dac3f6f4f0d0596ab3b7e974fee02b", "sha256": "d8860e96618558fda064196d9c49fed1fc0dd947d488eabd49ebed191b3b90a7"}, "downloads": -1, "filename": "newchain_web3-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d7dac3f6f4f0d0596ab3b7e974fee02b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 140879, "upload_time": "2019-03-22T08:39:14", "upload_time_iso_8601": "2019-03-22T08:39:14.931859Z", "url": "https://files.pythonhosted.org/packages/72/be/6e1c786af9533f3030f6c844b09bed867b27d3fccc636a3238f0fd7c1741/newchain_web3-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7deb1fa24af5e88ebe60af98ce96a428", "sha256": "bc0b21d8bea5afd57490b939c531cb15a77e4cad9a2cf758d1bc43a3630936bc"}, "downloads": -1, "filename": "newchain-web3-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7deb1fa24af5e88ebe60af98ce96a428", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 110465, "upload_time": "2019-03-22T08:39:17", "upload_time_iso_8601": "2019-03-22T08:39:17.713148Z", "url": "https://files.pythonhosted.org/packages/a6/43/216812281d79333be439b1eb86d20b9ff64a30f5bcea21a13784215ca029/newchain-web3-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:42 2020"}