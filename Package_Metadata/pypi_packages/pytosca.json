{"info": {"author": "Kapil Thangavelu", "author_email": "kapil.foss@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "PyTosca\n-------\n\n[![Build Status](https://api.travis-ci.org/kapilt/pytosca.svg)](https://travis-ci.org/kapilt/pytosca)\n\n\nA python library for using OASIS Tosca YAML Simple Profile 1.0\n\nThis library was initially implemented as a learning exercise\nfor evaluating an early draft of the standard.\n\nA readily available alternative for tosca is the one toscalib\nembedded in the heat-translator.\n\nhttps://github.com/openstack/heat-translator/tree/master/translator/toscalib\n\nTosca Modeling\n--------------\n\nThe TOSCA standard is modeled here as three distinct collections, The\nmeta model which per the standard is associated with a set of types,\nand which is extensible by any given tosca file. The node templates\nwhich are the actualization of the meta model as loaded from a tosca\nyaml file. Finally the realized node resoures which are created by\nan orchestrator and associated to their corresponding node templates.\n\nThis library chooses to map these collections using native python\nlanguage constructs, meta models correspond to classes, node templates\nto instances of those classes.\n\n\nRunning Unit Tests\n------------------\n\nThe stdlib test runner is integrated via setuptools ala::\n\n    $ python setup.py test\n\nAlternatively any other test runner can be used directly.\n\n\nExecution\n---------\n\nThe execution of the template takes place through three phases of binding\n\nInput binding\n\nResource binding\n\nThe binding tier\n\ntosca notes\n\n\nStandards Questions\n-------------------\n\n[outdated]\n\n - what does a relation callout binding in a template look like.\n - relation shorthand form is not defined properly in the meta model\n - page 13 and 14 has requirements: database but elsewhere its database_endpoint\n\n Is this a typo.\n - wp_db_port: { get_ref_property: [ database_endpoint, database_endpoint, port ] }\n\n - page 9 points to an interface implementation artifact directly against the name\n   of the interface instead of against the lifecycle operation.. there's some abmiguity\n   here.\n\n - can more than one interface be associated to a type\n\n\nFeedback\n--------\n\n[outdated]\n\n - os version should not be an integer, minimum it should be a float, ideally a string.\n\nlibrary notes\n\n\n- definition references interfaces by name in node, but by type in relation.\n- a couple of typos\n- capability matches node_type by bad name (should be types.nodes.Root)\n\n\nquestions\n\n - how does inheritance work across types, what inherits (properties, lifecycle)\n - spelling of endpoint vs database endpoint.\n - delete lifecycle operation [ is it normative, may have to combine with deletion]\n - mapping lifecycle to machine operations.. is start automatically re-invoked on boot?\n - is stopped launched before reboot?\n - order of relation lifecycle events\n\n - the xml policy notion\n\nBinding to variables", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kapilt/pytosca", "keywords": null, "license": "Apache", "maintainer": null, "maintainer_email": null, "name": "pytosca", "package_url": "https://pypi.org/project/pytosca/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pytosca/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kapilt/pytosca"}, "release_url": "https://pypi.org/project/pytosca/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Application topologies using OASIS TOSCA YAML Profile", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pytosca\">\n<h2>PyTosca</h2>\n<p>[![Build Status](<a href=\"https://api.travis-ci.org/kapilt/pytosca.svg)%5D(https://travis-ci.org/kapilt/pytosca\" rel=\"nofollow\">https://api.travis-ci.org/kapilt/pytosca.svg)](https://travis-ci.org/kapilt/pytosca</a>)</p>\n<p>A python library for using OASIS Tosca YAML Simple Profile 1.0</p>\n<p>This library was initially implemented as a learning exercise\nfor evaluating an early draft of the standard.</p>\n<p>A readily available alternative for tosca is the one toscalib\nembedded in the heat-translator.</p>\n<p><a href=\"https://github.com/openstack/heat-translator/tree/master/translator/toscalib\" rel=\"nofollow\">https://github.com/openstack/heat-translator/tree/master/translator/toscalib</a></p>\n</div>\n<div id=\"tosca-modeling\">\n<h2>Tosca Modeling</h2>\n<p>The TOSCA standard is modeled here as three distinct collections, The\nmeta model which per the standard is associated with a set of types,\nand which is extensible by any given tosca file. The node templates\nwhich are the actualization of the meta model as loaded from a tosca\nyaml file. Finally the realized node resoures which are created by\nan orchestrator and associated to their corresponding node templates.</p>\n<p>This library chooses to map these collections using native python\nlanguage constructs, meta models correspond to classes, node templates\nto instances of those classes.</p>\n</div>\n<div id=\"running-unit-tests\">\n<h2>Running Unit Tests</h2>\n<p>The stdlib test runner is integrated via setuptools ala:</p>\n<pre>$ python setup.py test\n</pre>\n<p>Alternatively any other test runner can be used directly.</p>\n</div>\n<div id=\"execution\">\n<h2>Execution</h2>\n<p>The execution of the template takes place through three phases of binding</p>\n<p>Input binding</p>\n<p>Resource binding</p>\n<p>The binding tier</p>\n<p>tosca notes</p>\n</div>\n<div id=\"standards-questions\">\n<h2>Standards Questions</h2>\n<p>[outdated]</p>\n<blockquote>\n<ul>\n<li>what does a relation callout binding in a template look like.</li>\n<li>relation shorthand form is not defined properly in the meta model</li>\n<li>page 13 and 14 has requirements: database but elsewhere its database_endpoint</li>\n</ul>\n<p>Is this a typo.\n- wp_db_port: { get_ref_property: [ database_endpoint, database_endpoint, port ] }</p>\n<ul>\n<li>page 9 points to an interface implementation artifact directly against the name\nof the interface instead of against the lifecycle operation.. there\u2019s some abmiguity\nhere.</li>\n<li>can more than one interface be associated to a type</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"feedback\">\n<h2>Feedback</h2>\n<p>[outdated]</p>\n<blockquote>\n<ul>\n<li>os version should not be an integer, minimum it should be a float, ideally a string.</li>\n</ul>\n</blockquote>\n<p>library notes</p>\n<ul>\n<li>definition references interfaces by name in node, but by type in relation.</li>\n<li>a couple of typos</li>\n<li>capability matches node_type by bad name (should be types.nodes.Root)</li>\n</ul>\n<p>questions</p>\n<blockquote>\n<ul>\n<li>how does inheritance work across types, what inherits (properties, lifecycle)</li>\n<li>spelling of endpoint vs database endpoint.</li>\n<li>delete lifecycle operation [ is it normative, may have to combine with deletion]</li>\n<li>mapping lifecycle to machine operations.. is start automatically re-invoked on boot?</li>\n<li>is stopped launched before reboot?</li>\n<li>order of relation lifecycle events</li>\n<li>the xml policy notion</li>\n</ul>\n</blockquote>\n<p>Binding to variables</p>\n</div>\n\n          </div>"}, "last_serial": 1386382, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "a28c5961022d2bbae4c76001348c0fe6", "sha256": "0c4a7ad6e70e5de8f23a98e4a6601ccbf538d4d629690e47d2e10906364fa0cb"}, "downloads": -1, "filename": "pytosca-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a28c5961022d2bbae4c76001348c0fe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12126, "upload_time": "2015-01-18T04:27:57", "upload_time_iso_8601": "2015-01-18T04:27:57.025058Z", "url": "https://files.pythonhosted.org/packages/10/30/9e59385bd49f8d7f3b4975baac234ffffe83923d2337e788c03c36913928/pytosca-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a28c5961022d2bbae4c76001348c0fe6", "sha256": "0c4a7ad6e70e5de8f23a98e4a6601ccbf538d4d629690e47d2e10906364fa0cb"}, "downloads": -1, "filename": "pytosca-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a28c5961022d2bbae4c76001348c0fe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12126, "upload_time": "2015-01-18T04:27:57", "upload_time_iso_8601": "2015-01-18T04:27:57.025058Z", "url": "https://files.pythonhosted.org/packages/10/30/9e59385bd49f8d7f3b4975baac234ffffe83923d2337e788c03c36913928/pytosca-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:28 2020"}