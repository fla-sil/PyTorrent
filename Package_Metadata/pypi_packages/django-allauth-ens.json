{"info": {"author": "cof-geek", "author_email": "cof-geek@ens.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP"], "description": "##################\ndjango-allauth-ens\n##################\n\nThis package is meant to ease the management of authentication of django-apps\nat the ENS.\n\nOn top of django-allauth_, which provides easy ways to configure the\nauthentication of django-apps, this package provides:\n\n* social authentication using Clipper (*cas.eleves*);\n\n* ready-to-use templates in replacement of allauth' ones;\n\n* helpers to use *allauth*'s login and logout views instead of those\n  provided by third-parties (Django admin, wagtail, *etc*).\n\n\n**Contents**\n\n.. contents:: :local:\n\n\n************\nInstallation\n************\n\nFirst, `install django-allauth`_.\n\nThen, install *django-allauth-ens*:\n\n.. code-block:: bash\n\n  $ pip install django-allauth-ens\n\nAnd edit your settings file:\n\n.. code-block:: python\n\n  INSTALLED_APPS = [\n      # \u2026\n\n      # Above allauth to replace its templates.\n      'allauth_ens',\n\n      # Added when you installed allauth.\n      'allauth',\n      'allauth.account',\n      'allauth.socialaccount',\n\n      # Required to use CAS-based providers (e.g. Clipper).\n      'allauth_cas',\n\n      # \u2026\n  ]\n\n\n*************\nConfiguration\n*************\n\nSee also the `allauth configuration`_ and `advanced usage`_ docs pages.\n\n``ACCOUNT_HOME_URL``\n  *Optional* \u2014 A view name or an url path.\n\n  Used as a link from the templates of ``allauth_ens`` to return to your\n  application.\n\n  **Examples:** ``'home'``, ``'/home/'``\n\n``ACCOUNT_DETAILS_URL``\n  *Optional* \u2014 A view name or an url path.\n\n  Used as a link from the templates of ``allauth_ens`` for a logged in user to\n  access their profile in your app.\n\n  **Examples:** ``'my-account'``, ``'/my-account/'``\n\n``ALLAUTH_ENS_HIGHLIGHT_CLIPPER``\n  *Optional* \u2014 Boolean (default: `True`).\n\n  When set to `True`, displays prominently the Clipper option in the login view\n  (if you use the `allauth_ens` templates).\n\n\n*****\nViews\n*****\n\nCapture other login and logout views\n====================================\n\nYou can use the ``capture_login`` and ``capture_logout`` views to replace the\nlogin and logout views of other applications. They redirect to their similar\n*allauth*'s view and forward the query string, so that if a GET parameter\n``next`` is given along the initial request, user is redirected to this url on\nsuccessful login and logout.\n\nThis requires to add urls before the include of the app' urls.\n\nFor example, to replace the Django admin login and logout views with allauth's\nones:\n\n.. code-block:: python\n\n  from allauth_ens.views import capture_login, capture_logout\n\n  urlpatterns = [\n      # \u2026\n\n      # Add it before include of admin urls.\n      url(r'^admin/login/$', capture_login),\n      url(r'^admin/logout/$', capture_logout),\n\n      url(r'^admin/$', include(admin.site.urls)),\n\n      # \u2026\n  ]\n\n\n*********\nTemplates\n*********\n\nThe templates provided by *allauth* only contains the bare minimum. Hopefully,\nthis package includes ready-to-use templates. They are automatically used if\nyou put ``'allauth_ens'`` before ``'allauth'`` in your ``INSTALLED_APPS``,\n\n\n*********\nProviders\n*********\n\n*Google, Facebook\u00b8 but also Clipper\u2026*\n\nTo interact with an external authentication service, you must add the\ncorresponding provider application to your ``INSTALLED_APPS``.\n\n*allauth* already includes `several providers`_ (see also `their python path`_).\nIn addition to that, this package adds the following providers:\n\nClipper\n=======\n\nIt uses the CAS server `<https://cas.eleves.ens.fr/>`_.\n\nInstallation\n  Add\u00a0``'allauth_ens.providers.clipper'`` to the ``INSTALLED_APPS``.\n\nConfiguration\n  Available settings and their default value:\n\n  .. code-block:: python\n\n    SOCIALACCOUNT_PROVIDERS = {\n        # \u2026\n        'clipper': {\n            # These settings control whether a message containing a link to\n            # disconnect from the CAS server is added when users log out.\n            'MESSAGE_SUGGEST_LOGOUT_ON_LOGOUT': True,\n            'MESSAGE_SUGGEST_LOGOUT_ON_LOGOUT_LEVEL': messages.INFO,\n        },\n    }\n\nAuto-signup\n  Populated data\n    - username: ``<clipper>``\n    - email (primary and verified): ``<clipper>@clipper.ens.fr``\n\n********\nAdapters\n********\n\nLong Term Clipper Adapter\n=========================\n\nWe provide an easy-to-use SocialAccountAdapter to handle the fact that Clipper\naccounts are not eternal, and that there is no guarantee that the clipper\nusernames won't be reused later.\n\nThis adapter also handles getting basic information about the user from SPI's\nLDAP.\n\n**Important:** If you are building on top of *allauth*, take care to preserve\nthe ``extra_data['ldap']`` of ``SocialAccount`` instances related to *Clipper*\n(where ``provider_id`` is ``clipper`` or ``clipper_inactive``).\n\nConfiguration\n  Set ``SOCIALACCOUNT_ADAPTER='allauth_ens.adapter.LongTermClipperAccountAdapter'``\n  in `settings.py`\n\nAuto-signup\n  Populated data\n    - *username*: ``<clipper>@<entrance year>``\n    - *email*: from LDAP's *mailRoutingAddress* field, or ``<clipper>@clipper.ens.fr``\n    - *first_name*, *last_name* from LDAP's *cn* field\n    - *entrance_year* (as 2-digit string), *department_code*, *department* and *promotion* (department+year) parsed from LDAP's *homeDirectory* field\n    - *extra_data* in SocialAccount instance, containing all these field except *promotion* (and available only on first connection)\n\nAccount deprecation\n  At the beginning of each year (i.e. early November), to prevent clipper\n  username conflicts, you should run ``$ python manage.py deprecate_clippers``.\n  Every association clipper username <-> user will then be put on hold, and at\n  the first subsequent connection, a verification of the account will be made\n  (using LDAP), so that a known user keeps his account, but a newcomer won't\n  inherit an archicube's.\n\nCustomize\n  You can customize the SocialAccountAdapter by inheriting\n  ``allauth_ens.adapter.LongTermClipperAccountAdapter``. You might want to\n  modify ``get_username(clipper, data)`` to change the default username format.\n  By default, ``get_username`` raises a ``ValueError`` when the connexion to the\n  LDAP failed or did not allow to retrieve the user's entrance year. Overriding\n  ``get_username`` (as done in the example website) allows to get rid of that\n  behaviour, and for instance attribute a default entrance year.\n\nInitial migration\n  Description\n    If you used allauth without LongTermClipperAccountAdapter, or another CAS\n    interface to log in, you need to update the Users to the new username policy,\n    and (in the second case) to create the SocialAccount instances to link CAS and\n    Users. This can be done easily with ``$ python manage.py install_longterm``.\n\n  Install_longterm options\n    - ``--use-socialaccounts``: Use the existing SocialAccounts rather than all the Users. Useful if you are already using Allauth and don't want ``install_longterm`` to mess with the non-clipper authentications.\n    - ``--keep-usernames``: Do not apply the username template (e.g. ``clipper@promo``) to the existing accounts, only populate the SocialAccounts with LDAP informations. Useful if you don't want to change the usernames of previous users, but do want such a template for future accounts.\n    - ``--clipper-field <field_name>``: Use a special field rather than the username to get the clipper username (for LDAP lookup and SocialAccount creation/update). This parameter is compatible with ForeignKeys (e.g. ``profile.clipper``). Note: ``--use-socialaccounts`` will ignore the ``--clipper-field`` parameter.\n    - ``--fake``: Do not modify the database. Use it to test there is no conflict, and be sure the changes are the ones expected. This command does not check for uniqueness errors, so there it may succeed and the actual command fail eventually.\n\n  Typical use cases\n    - *Django-cas-ng -> Longterm*: Use ``install_longterm`` without parameters, or maybe ``--keep-usernames``. If you had a custom username handling, ``--clipper_field`` may be useful.\n    - *Allauth -> Longterm*: Use ``install_longterm`` with ``--use-socialaccounts``, and maybe ``--keep-usernames``.\n\n\n*********\nDemo Site\n*********\n\nSee ``example/README``.\n\n\n***********\nDevelopment\n***********\n\nFirst, you need to clone the repository.\n\nStylesheets\n===========\n\nThis project uses `compass`_ to compile SCSS files to CSS.\n\nUsing bundler\n-------------\n\nRequirements\n  * Ensure Ruby is installed (``$ ruby -v``) or `install Ruby`_\n  * Ensure bundler is installed (``$ bundle -v``) or install bundler\n    (``$ gem install bundler``)\n  * Install dependencies: ``$ bundle install``\n\nCompile\n  * Watch changes and recompile: ``$ bundle exec compass watch``\n\nTests\n=====\n\nLocal environment\n-----------------\n\nRequirements\n  * fakeldap and mock, install with ``$ pip install mock fakeldap``\n\nRun\n  * ``$ ./runtests.py``\n\nAll\n---\n\nRequirements\n  * tox, install with ``$ pip install tox``\n  * ``python{2.7,3.4,3.5,3.6}`` must be available on your system path\n\nRun\n  * all (django/python with combined coverage + flake8 + isort): ``$ tox``\n\n\n******\nHowtos\n******\n\nAssuming you use the following settings (when needed):\n\n.. code-block:: python\n\n  ACCOUNT_ADAPTER = 'shared.allauth_adapter.AccountAdapter'\n  SOCIALACCOUNT_ADAPTER = 'shared.allauth_adapter.SocialAccountAdapter'\n\nSignup disabled, except for clipper provider (auto-signup)\n==========================================================\n\nIn ``shared/allauth_adapter.py``:\n\n.. code-block:: python\n\n  class AccountAdapter(DefaultAccountAdapter):\n      def is_open_for_signup(self, request):\n          return False\n\n  class SocialAccountAdapter(DefaultSocialAccountAdapter):\n      def is_open_for_signup(self, request, sociallogin):\n          # sociallogin.account is a SocialAccount instance.\n          # See https://github.com/pennersr/django-allauth/blob/master/allauth/socialaccount/models.py\n\n          if sociallogin.account.provider == 'clipper':\n              return True\n\n          # It returns AccountAdapter.is_open_for_signup().\n          # See https://github.com/pennersr/django-allauth/blob/master/allauth/socialaccount/adapter.py\n          return super().is_open_for_signup(request, sociallogin)\n\n\n.. _django-allauth: https://django-allauth.readthedocs.io/en/latest/overview.html\n.. _install django-allauth: https://django-allauth.readthedocs.io/en/latest/installation.html\n.. _several providers: https://django-allauth.readthedocs.io/en/latest/providers.html\n.. _allauth configuration: https://django-allauth.readthedocs.io/en/latest/configuration.html\n.. _advanced usage: https://django-allauth.readthedocs.io/en/latest/advanced.html\n.. _their python path: https://django-allauth.readthedocs.io/en/latest/installation.html\n.. _compass: https://compass-style.org/\n.. _install Ruby: https://www.ruby-lang.org/en/documentation/installation/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.eleves.ens.fr/cof-geek/django-allauth-ens", "keywords": "django allauth cas authentication", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-allauth-ens", "package_url": "https://pypi.org/project/django-allauth-ens/", "platform": "", "project_url": "https://pypi.org/project/django-allauth-ens/", "project_urls": {"Homepage": "https://git.eleves.ens.fr/cof-geek/django-allauth-ens"}, "release_url": "https://pypi.org/project/django-allauth-ens/1.1.2/", "requires_dist": ["django-allauth", "django-allauth-cas (<1.1,>=1.0)", "python-cas (==1.2.0)", "django-widget-tweaks", "python-ldap"], "requires_python": "", "summary": "Providers for django-allauth allowing using the ENS' auth-systems.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package is meant to ease the management of authentication of django-apps\nat the ENS.</p>\n<p>On top of <a href=\"https://django-allauth.readthedocs.io/en/latest/overview.html\" rel=\"nofollow\">django-allauth</a>, which provides easy ways to configure the\nauthentication of django-apps, this package provides:</p>\n<ul>\n<li>social authentication using Clipper (<em>cas.eleves</em>);</li>\n<li>ready-to-use templates in replacement of allauth\u2019 ones;</li>\n<li>helpers to use <em>allauth</em>\u2019s login and logout views instead of those\nprovided by third-parties (Django admin, wagtail, <em>etc</em>).</li>\n</ul>\n<p><strong>Contents</strong></p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#configuration\" id=\"id2\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#views\" id=\"id3\" rel=\"nofollow\">Views</a></li>\n<li><a href=\"#templates\" id=\"id4\" rel=\"nofollow\">Templates</a></li>\n<li><a href=\"#providers\" id=\"id5\" rel=\"nofollow\">Providers</a><ul>\n<li><a href=\"#clipper\" id=\"id6\" rel=\"nofollow\">Clipper</a></li>\n</ul>\n</li>\n<li><a href=\"#adapters\" id=\"id7\" rel=\"nofollow\">Adapters</a></li>\n<li><a href=\"#demo-site\" id=\"id8\" rel=\"nofollow\">Demo Site</a></li>\n<li><a href=\"#development\" id=\"id9\" rel=\"nofollow\">Development</a><ul>\n<li><a href=\"#stylesheets\" id=\"id10\" rel=\"nofollow\">Stylesheets</a><ul>\n<li><a href=\"#using-bundler\" id=\"id11\" rel=\"nofollow\">Using bundler</a></li>\n</ul>\n</li>\n<li><a href=\"#tests\" id=\"id12\" rel=\"nofollow\">Tests</a><ul>\n<li><a href=\"#local-environment\" id=\"id13\" rel=\"nofollow\">Local environment</a></li>\n<li><a href=\"#all\" id=\"id14\" rel=\"nofollow\">All</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#howtos\" id=\"id15\" rel=\"nofollow\">Howtos</a><ul>\n<li><a href=\"#signup-disabled-except-for-clipper-provider-auto-signup\" id=\"id16\" rel=\"nofollow\">Signup disabled, except for clipper provider (auto-signup)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>First, <a href=\"https://django-allauth.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">install django-allauth</a>.</p>\n<p>Then, install <em>django-allauth-ens</em>:</p>\n<pre>$ pip install django-allauth-ens\n</pre>\n<p>And edit your settings file:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># \u2026</span>\n\n    <span class=\"c1\"># Above allauth to replace its templates.</span>\n    <span class=\"s1\">'allauth_ens'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Added when you installed allauth.</span>\n    <span class=\"s1\">'allauth'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'allauth.account'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'allauth.socialaccount'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Required to use CAS-based providers (e.g. Clipper).</span>\n    <span class=\"s1\">'allauth_cas'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># \u2026</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"configuration\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Configuration</a></h2>\n<p>See also the <a href=\"https://django-allauth.readthedocs.io/en/latest/configuration.html\" rel=\"nofollow\">allauth configuration</a> and <a href=\"https://django-allauth.readthedocs.io/en/latest/advanced.html\" rel=\"nofollow\">advanced usage</a> docs pages.</p>\n<dl>\n<dt><tt>ACCOUNT_HOME_URL</tt></dt>\n<dd><p><em>Optional</em> \u2014 A view name or an url path.</p>\n<p>Used as a link from the templates of <tt>allauth_ens</tt> to return to your\napplication.</p>\n<p><strong>Examples:</strong> <tt>'home'</tt>, <tt>'/home/'</tt></p>\n</dd>\n<dt><tt>ACCOUNT_DETAILS_URL</tt></dt>\n<dd><p><em>Optional</em> \u2014 A view name or an url path.</p>\n<p>Used as a link from the templates of <tt>allauth_ens</tt> for a logged in user to\naccess their profile in your app.</p>\n<p><strong>Examples:</strong> <tt><span class=\"pre\">'my-account'</span></tt>, <tt><span class=\"pre\">'/my-account/'</span></tt></p>\n</dd>\n<dt><tt>ALLAUTH_ENS_HIGHLIGHT_CLIPPER</tt></dt>\n<dd><p><em>Optional</em> \u2014 Boolean (default: <cite>True</cite>).</p>\n<p>When set to <cite>True</cite>, displays prominently the Clipper option in the login view\n(if you use the <cite>allauth_ens</cite> templates).</p>\n</dd>\n</dl>\n</div>\n<div id=\"views\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Views</a></h2>\n<h2 id=\"capture-other-login-and-logout-views\"><span class=\"section-subtitle\">Capture other login and logout views</span></h2>\n<p>You can use the <tt>capture_login</tt> and <tt>capture_logout</tt> views to replace the\nlogin and logout views of other applications. They redirect to their similar\n<em>allauth</em>\u2019s view and forward the query string, so that if a GET parameter\n<tt>next</tt> is given along the initial request, user is redirected to this url on\nsuccessful login and logout.</p>\n<p>This requires to add urls before the include of the app\u2019 urls.</p>\n<p>For example, to replace the Django admin login and logout views with allauth\u2019s\nones:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">allauth_ens.views</span> <span class=\"kn\">import</span> <span class=\"n\">capture_login</span><span class=\"p\">,</span> <span class=\"n\">capture_logout</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># \u2026</span>\n\n    <span class=\"c1\"># Add it before include of admin urls.</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^admin/login/$'</span><span class=\"p\">,</span> <span class=\"n\">capture_login</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^admin/logout/$'</span><span class=\"p\">,</span> <span class=\"n\">capture_logout</span><span class=\"p\">),</span>\n\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^admin/$'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>\n\n    <span class=\"c1\"># \u2026</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"templates\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Templates</a></h2>\n<p>The templates provided by <em>allauth</em> only contains the bare minimum. Hopefully,\nthis package includes ready-to-use templates. They are automatically used if\nyou put <tt>'allauth_ens'</tt> before <tt>'allauth'</tt> in your <tt>INSTALLED_APPS</tt>,</p>\n</div>\n<div id=\"providers\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Providers</a></h2>\n<p><em>Google, Facebook\u00b8 but also Clipper\u2026</em></p>\n<p>To interact with an external authentication service, you must add the\ncorresponding provider application to your <tt>INSTALLED_APPS</tt>.</p>\n<p><em>allauth</em> already includes <a href=\"https://django-allauth.readthedocs.io/en/latest/providers.html\" rel=\"nofollow\">several providers</a> (see also <a href=\"https://django-allauth.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">their python path</a>).\nIn addition to that, this package adds the following providers:</p>\n<div id=\"clipper\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Clipper</a></h3>\n<p>It uses the CAS server <a href=\"https://cas.eleves.ens.fr/\" rel=\"nofollow\">https://cas.eleves.ens.fr/</a>.</p>\n<dl>\n<dt>Installation</dt>\n<dd>Add\u00a0<tt>'allauth_ens.providers.clipper'</tt> to the <tt>INSTALLED_APPS</tt>.</dd>\n<dt>Configuration</dt>\n<dd><p>Available settings and their default value:</p>\n<pre><span class=\"n\">SOCIALACCOUNT_PROVIDERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># \u2026</span>\n    <span class=\"s1\">'clipper'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># These settings control whether a message containing a link to</span>\n        <span class=\"c1\"># disconnect from the CAS server is added when users log out.</span>\n        <span class=\"s1\">'MESSAGE_SUGGEST_LOGOUT_ON_LOGOUT'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">'MESSAGE_SUGGEST_LOGOUT_ON_LOGOUT_LEVEL'</span><span class=\"p\">:</span> <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n</dd>\n<dt>Auto-signup</dt>\n<dd><dl>\n<dt>Populated data</dt>\n<dd><ul>\n<li>username: <tt>&lt;clipper&gt;</tt></li>\n<li>email (primary and verified): <tt><span class=\"pre\">&lt;clipper&gt;@clipper.ens.fr</span></tt></li>\n</ul>\n</dd>\n</dl>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"adapters\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Adapters</a></h2>\n<h2 id=\"long-term-clipper-adapter\"><span class=\"section-subtitle\">Long Term Clipper Adapter</span></h2>\n<p>We provide an easy-to-use SocialAccountAdapter to handle the fact that Clipper\naccounts are not eternal, and that there is no guarantee that the clipper\nusernames won\u2019t be reused later.</p>\n<p>This adapter also handles getting basic information about the user from SPI\u2019s\nLDAP.</p>\n<p><strong>Important:</strong> If you are building on top of <em>allauth</em>, take care to preserve\nthe <tt><span class=\"pre\">extra_data['ldap']</span></tt> of <tt>SocialAccount</tt> instances related to <em>Clipper</em>\n(where <tt>provider_id</tt> is <tt>clipper</tt> or <tt>clipper_inactive</tt>).</p>\n<dl>\n<dt>Configuration</dt>\n<dd>Set <tt><span class=\"pre\">SOCIALACCOUNT_ADAPTER='allauth_ens.adapter.LongTermClipperAccountAdapter'</span></tt>\nin <cite>settings.py</cite></dd>\n<dt>Auto-signup</dt>\n<dd><dl>\n<dt>Populated data</dt>\n<dd><ul>\n<li><em>username</em>: <tt><span class=\"pre\">&lt;clipper&gt;@&lt;entrance</span> year&gt;</tt></li>\n<li><em>email</em>: from LDAP\u2019s <em>mailRoutingAddress</em> field, or <tt><span class=\"pre\">&lt;clipper&gt;@clipper.ens.fr</span></tt></li>\n<li><em>first_name</em>, <em>last_name</em> from LDAP\u2019s <em>cn</em> field</li>\n<li><em>entrance_year</em> (as 2-digit string), <em>department_code</em>, <em>department</em> and <em>promotion</em> (department+year) parsed from LDAP\u2019s <em>homeDirectory</em> field</li>\n<li><em>extra_data</em> in SocialAccount instance, containing all these field except <em>promotion</em> (and available only on first connection)</li>\n</ul>\n</dd>\n</dl>\n</dd>\n<dt>Account deprecation</dt>\n<dd>At the beginning of each year (i.e. early November), to prevent clipper\nusername conflicts, you should run <tt>$ python manage.py deprecate_clippers</tt>.\nEvery association clipper username &lt;-&gt; user will then be put on hold, and at\nthe first subsequent connection, a verification of the account will be made\n(using LDAP), so that a known user keeps his account, but a newcomer won\u2019t\ninherit an archicube\u2019s.</dd>\n<dt>Customize</dt>\n<dd>You can customize the SocialAccountAdapter by inheriting\n<tt>allauth_ens.adapter.LongTermClipperAccountAdapter</tt>. You might want to\nmodify <tt>get_username(clipper, data)</tt> to change the default username format.\nBy default, <tt>get_username</tt> raises a <tt>ValueError</tt> when the connexion to the\nLDAP failed or did not allow to retrieve the user\u2019s entrance year. Overriding\n<tt>get_username</tt> (as done in the example website) allows to get rid of that\nbehaviour, and for instance attribute a default entrance year.</dd>\n<dt>Initial migration</dt>\n<dd><dl>\n<dt>Description</dt>\n<dd>If you used allauth without LongTermClipperAccountAdapter, or another CAS\ninterface to log in, you need to update the Users to the new username policy,\nand (in the second case) to create the SocialAccount instances to link CAS and\nUsers. This can be done easily with <tt>$ python manage.py install_longterm</tt>.</dd>\n<dt>Install_longterm options</dt>\n<dd><ul>\n<li><tt><span class=\"pre\">--use-socialaccounts</span></tt>: Use the existing SocialAccounts rather than all the Users. Useful if you are already using Allauth and don\u2019t want <tt>install_longterm</tt> to mess with the non-clipper authentications.</li>\n<li><tt><span class=\"pre\">--keep-usernames</span></tt>: Do not apply the username template (e.g. <tt>clipper@promo</tt>) to the existing accounts, only populate the SocialAccounts with LDAP informations. Useful if you don\u2019t want to change the usernames of previous users, but do want such a template for future accounts.</li>\n<li><tt><span class=\"pre\">--clipper-field</span> &lt;field_name&gt;</tt>: Use a special field rather than the username to get the clipper username (for LDAP lookup and SocialAccount creation/update). This parameter is compatible with ForeignKeys (e.g. <tt>profile.clipper</tt>). Note: <tt><span class=\"pre\">--use-socialaccounts</span></tt> will ignore the <tt><span class=\"pre\">--clipper-field</span></tt> parameter.</li>\n<li><tt><span class=\"pre\">--fake</span></tt>: Do not modify the database. Use it to test there is no conflict, and be sure the changes are the ones expected. This command does not check for uniqueness errors, so there it may succeed and the actual command fail eventually.</li>\n</ul>\n</dd>\n<dt>Typical use cases</dt>\n<dd><ul>\n<li><em>Django-cas-ng -&gt; Longterm</em>: Use <tt>install_longterm</tt> without parameters, or maybe <tt><span class=\"pre\">--keep-usernames</span></tt>. If you had a custom username handling, <tt><span class=\"pre\">--clipper_field</span></tt> may be useful.</li>\n<li><em>Allauth -&gt; Longterm</em>: Use <tt>install_longterm</tt> with <tt><span class=\"pre\">--use-socialaccounts</span></tt>, and maybe <tt><span class=\"pre\">--keep-usernames</span></tt>.</li>\n</ul>\n</dd>\n</dl>\n</dd>\n</dl>\n</div>\n<div id=\"demo-site\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Demo Site</a></h2>\n<p>See <tt>example/README</tt>.</p>\n</div>\n<div id=\"development\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Development</a></h2>\n<p>First, you need to clone the repository.</p>\n<div id=\"stylesheets\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Stylesheets</a></h3>\n<p>This project uses <a href=\"https://compass-style.org/\" rel=\"nofollow\">compass</a> to compile SCSS files to CSS.</p>\n<div id=\"using-bundler\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Using bundler</a></h4>\n<dl>\n<dt>Requirements</dt>\n<dd><ul>\n<li>Ensure Ruby is installed (<tt>$ ruby <span class=\"pre\">-v</span></tt>) or <a href=\"https://www.ruby-lang.org/en/documentation/installation/\" rel=\"nofollow\">install Ruby</a></li>\n<li>Ensure bundler is installed (<tt>$ bundle <span class=\"pre\">-v</span></tt>) or install bundler\n(<tt>$ gem install bundler</tt>)</li>\n<li>Install dependencies: <tt>$ bundle install</tt></li>\n</ul>\n</dd>\n<dt>Compile</dt>\n<dd><ul>\n<li>Watch changes and recompile: <tt>$ bundle exec compass watch</tt></li>\n</ul>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"tests\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Tests</a></h3>\n<div id=\"local-environment\">\n<h4><a href=\"#id13\" rel=\"nofollow\">Local environment</a></h4>\n<dl>\n<dt>Requirements</dt>\n<dd><ul>\n<li>fakeldap and mock, install with <tt>$ pip install mock fakeldap</tt></li>\n</ul>\n</dd>\n<dt>Run</dt>\n<dd><ul>\n<li><tt>$ ./runtests.py</tt></li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"all\">\n<h4><a href=\"#id14\" rel=\"nofollow\">All</a></h4>\n<dl>\n<dt>Requirements</dt>\n<dd><ul>\n<li>tox, install with <tt>$ pip install tox</tt></li>\n<li><tt>python{2.7,3.4,3.5,3.6}</tt> must be available on your system path</li>\n</ul>\n</dd>\n<dt>Run</dt>\n<dd><ul>\n<li>all (django/python with combined coverage + flake8 + isort): <tt>$ tox</tt></li>\n</ul>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n<div id=\"howtos\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Howtos</a></h2>\n<p>Assuming you use the following settings (when needed):</p>\n<pre><span class=\"n\">ACCOUNT_ADAPTER</span> <span class=\"o\">=</span> <span class=\"s1\">'shared.allauth_adapter.AccountAdapter'</span>\n<span class=\"n\">SOCIALACCOUNT_ADAPTER</span> <span class=\"o\">=</span> <span class=\"s1\">'shared.allauth_adapter.SocialAccountAdapter'</span>\n</pre>\n<div id=\"signup-disabled-except-for-clipper-provider-auto-signup\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Signup disabled, except for clipper provider (auto-signup)</a></h3>\n<p>In <tt>shared/allauth_adapter.py</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AccountAdapter</span><span class=\"p\">(</span><span class=\"n\">DefaultAccountAdapter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_open_for_signup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SocialAccountAdapter</span><span class=\"p\">(</span><span class=\"n\">DefaultSocialAccountAdapter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_open_for_signup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">sociallogin</span><span class=\"p\">):</span>\n        <span class=\"c1\"># sociallogin.account is a SocialAccount instance.</span>\n        <span class=\"c1\"># See https://github.com/pennersr/django-allauth/blob/master/allauth/socialaccount/models.py</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sociallogin</span><span class=\"o\">.</span><span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"o\">==</span> <span class=\"s1\">'clipper'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># It returns AccountAdapter.is_open_for_signup().</span>\n        <span class=\"c1\"># See https://github.com/pennersr/django-allauth/blob/master/allauth/socialaccount/adapter.py</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_open_for_signup</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">sociallogin</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4665587, "releases": {"0.0.1.dev1": [{"comment_text": "", "digests": {"md5": "688d3dc5f5c7424e6ef11b5765f14abd", "sha256": "9524dc8bb4eb8f7053576aa57f43a65eea52eb2a11b957c7dd14e240313eb744"}, "downloads": -1, "filename": "django-allauth-ens-0.0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "688d3dc5f5c7424e6ef11b5765f14abd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66305, "upload_time": "2017-10-18T14:50:55", "upload_time_iso_8601": "2017-10-18T14:50:55.622655Z", "url": "https://files.pythonhosted.org/packages/d9/99/4bef933f802b7266f0dfffb0a3ba2e77a282230bcc21752f9fd0079b2113/django-allauth-ens-0.0.1.dev1.tar.gz", "yanked": false}], "1.0.0b1": [{"comment_text": "", "digests": {"md5": "c5033889974672d30f1707927f9f5266", "sha256": "132c470b47f51551923488f141509e8c3019b3c1fba91e6f81d0677e8373fe8f"}, "downloads": -1, "filename": "django-allauth-ens-1.0.0b1.tar.gz", "has_sig": false, "md5_digest": "c5033889974672d30f1707927f9f5266", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63085, "upload_time": "2018-01-16T15:59:34", "upload_time_iso_8601": "2018-01-16T15:59:34.493323Z", "url": "https://files.pythonhosted.org/packages/46/48/0181bd04ebd917b119219c746f38f13a6c8c893234725baaf8de960db5ca/django-allauth-ens-1.0.0b1.tar.gz", "yanked": false}], "1.0.0b2": [{"comment_text": "", "digests": {"md5": "b01f7897fd5ae2da2d6e3a4325f1cda5", "sha256": "8f2ee40fac8603db473a5d99057c3c3d6a28d0881f90d9629121c701d86e3d11"}, "downloads": -1, "filename": "django-allauth-ens-1.0.0b2.tar.gz", "has_sig": false, "md5_digest": "b01f7897fd5ae2da2d6e3a4325f1cda5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65446, "upload_time": "2018-01-25T21:53:54", "upload_time_iso_8601": "2018-01-25T21:53:54.014177Z", "url": "https://files.pythonhosted.org/packages/58/01/1087517cff95d942b56b71a682f36ce2be337e5adc4dc15d2252bca8fe79/django-allauth-ens-1.0.0b2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "274896f342444ed79ab5e419227e33bb", "sha256": "df4c703c29edeeebf68a59be11b85479b9516de5ea421233db45bde8a8fe2503"}, "downloads": -1, "filename": "django_allauth_ens-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "274896f342444ed79ab5e419227e33bb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 694617, "upload_time": "2018-09-29T22:56:18", "upload_time_iso_8601": "2018-09-29T22:56:18.926824Z", "url": "https://files.pythonhosted.org/packages/6e/2d/744803b3acf5aaf61f3e2b9b23a80c67482e12f0c9e2f6a4630f6160837f/django_allauth_ens-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6239481af658bbd387baa649e29cf9f5", "sha256": "0f5d717f53f15e393682fff1f74d34b42a0aa6864c056e72813ebb61aa505062"}, "downloads": -1, "filename": "django-allauth-ens-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6239481af658bbd387baa649e29cf9f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 683055, "upload_time": "2018-09-29T22:56:21", "upload_time_iso_8601": "2018-09-29T22:56:21.430663Z", "url": "https://files.pythonhosted.org/packages/d8/2f/5adc392de2b559bcab5ee93cc60e14ff4aedfcd1cff6aff62e8f93e694a9/django-allauth-ens-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "5b165de1a3f00d833d5a4400b21f5900", "sha256": "1f074fcb326e7dd412ed61f0d044c464cd4fa82fc00e8bae41212c5b1a9d58ee"}, "downloads": -1, "filename": "django_allauth_ens-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b165de1a3f00d833d5a4400b21f5900", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 690199, "upload_time": "2018-10-21T14:11:31", "upload_time_iso_8601": "2018-10-21T14:11:31.127638Z", "url": "https://files.pythonhosted.org/packages/f4/f3/cb1e2623f57655a2e3b8bfd6734d6ed866766209fe36a5018db2e2ffaa8b/django_allauth_ens-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3105ccee2bd2c492d91bcd935f2f05b7", "sha256": "7ec92ff5bee17694f2c0ec1f077ab53a56dddad30b3202bfcffe20fc5643bdbd"}, "downloads": -1, "filename": "django-allauth-ens-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3105ccee2bd2c492d91bcd935f2f05b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 683230, "upload_time": "2018-10-21T14:11:33", "upload_time_iso_8601": "2018-10-21T14:11:33.548958Z", "url": "https://files.pythonhosted.org/packages/9a/e8/adaff833ea506afda17ab6aa5f124236cb1c9a68439e6e89bab2ab3186e4/django-allauth-ens-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "5be01cd467757ea10a6e92dec688b36c", "sha256": "21a9a48713cb81789ccbe0981c45c0b78aa56009561e64f169eb39b6177586c9"}, "downloads": -1, "filename": "django_allauth_ens-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5be01cd467757ea10a6e92dec688b36c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 692338, "upload_time": "2019-01-06T13:16:12", "upload_time_iso_8601": "2019-01-06T13:16:12.398399Z", "url": "https://files.pythonhosted.org/packages/49/b4/0ab6b7c87bdc9dab1aa6e3bc564b05f09570eea945fe059f1d72d174b5f9/django_allauth_ens-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91bb46e9e8322f1db69fba4b41ebbf04", "sha256": "a39f1564aa3e64879d880da507ecd512d9369950752f25982cb7efc83cd4dbdd"}, "downloads": -1, "filename": "django-allauth-ens-1.1.2.tar.gz", "has_sig": false, "md5_digest": "91bb46e9e8322f1db69fba4b41ebbf04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 683361, "upload_time": "2019-01-06T13:16:17", "upload_time_iso_8601": "2019-01-06T13:16:17.803485Z", "url": "https://files.pythonhosted.org/packages/1c/0c/4a8e47ca0cbfc16f4d9f8de1f6738ba4d213773c1911d5889dedcef14038/django-allauth-ens-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5be01cd467757ea10a6e92dec688b36c", "sha256": "21a9a48713cb81789ccbe0981c45c0b78aa56009561e64f169eb39b6177586c9"}, "downloads": -1, "filename": "django_allauth_ens-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5be01cd467757ea10a6e92dec688b36c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 692338, "upload_time": "2019-01-06T13:16:12", "upload_time_iso_8601": "2019-01-06T13:16:12.398399Z", "url": "https://files.pythonhosted.org/packages/49/b4/0ab6b7c87bdc9dab1aa6e3bc564b05f09570eea945fe059f1d72d174b5f9/django_allauth_ens-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91bb46e9e8322f1db69fba4b41ebbf04", "sha256": "a39f1564aa3e64879d880da507ecd512d9369950752f25982cb7efc83cd4dbdd"}, "downloads": -1, "filename": "django-allauth-ens-1.1.2.tar.gz", "has_sig": false, "md5_digest": "91bb46e9e8322f1db69fba4b41ebbf04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 683361, "upload_time": "2019-01-06T13:16:17", "upload_time_iso_8601": "2019-01-06T13:16:17.803485Z", "url": "https://files.pythonhosted.org/packages/1c/0c/4a8e47ca0cbfc16f4d9f8de1f6738ba4d213773c1911d5889dedcef14038/django-allauth-ens-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:43 2020"}