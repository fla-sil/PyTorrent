{"info": {"author": "Felipe Ortiz, Pablo Ahumada", "author_email": "fortizc@gmail.com, pablo.ahumadadiaz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System"], "description": "cipher\n======\n\n|pypi| |pyversion|\n\nEncryption and decryption tools. Cipher mix AES encryption with base64 encode generating plain text encrypted files.\n\nUsage\n+++++\n\n* variables:\n\n.. code:: python\n\n    >>> import cipher\n    >>> cipher.encrypt(\"encryption_password\", \"something to encrypt!\")\n    'WDJoMWJYVXhkWE5mWlc1algxOGNSc2hFT1o2ZGRBOGhoWnByQjYzZnZBYlp3N2ZKZmVDTEw2V1ZEMWlhZ0ZyZDVpSnpVZDll'\n\n.. code:: python\n\n    >>> import cipher\n    >>> encrypted = cipher.encrypt(\"encryption_password\", \"something to encrypt!\")\n    >>> cipher.decrypt(\"encryption_password\", encrypted)\n    'something to encrypt!'\n\n* files:\n\n.. code:: python\n\n    >>> import cipher\n    >>> txt = \"file content to encrypt!\"\n    >>> cipher.write(\"/tmp/file.encrypted\", \"encryption_password\", txt)\n\n.. code:: python\n\n    >>> import cipher\n    >>> cipher.read(\"/tmp/file.encrypted\", \"encryption_password\")\n    'file content to encrypt!'\n\n* A ``Credentials`` class can be used to handle secrets stored in ``JSON`` formats:\n\n.. code:: python\n\n    >>> import json\n    >>> secrets = {\n    ...     \"db_dsn\": \"mysql://user:pass@host:port/dbname\",\n    ...     \"api_token\": \"some token\"\n    ... }\n    >>> cipher.write(\"/tmp/secrets\", \"encryption_password\", json.dumps(secrets))\n    >>>\n    >>> # so, in your app you can do something like this:\n    >>> import cipher\n    >>> cred = cipher.Credentials(\"/tmp/secrets\", \"encryption_password\")\n    >>> cred.db_dsn\n    'mysql://user:pass@host:port/dbname'\n    >>> cred.api_token\n    'some token'\n\nGenerating keys\n+++++++++++++++\n\nThere are a lot of ways to create keys but a good easy to use way to create non-easy to remember keys is using ``/dev/urandom``, almost on Unix systems. For example:\n\n.. code::\n\n    dd if=/dev/urandom bs=16 count=1 | base64 > /path/to/key_file\n\nThe ``count`` parameter is the number of blocks to read and write, while the ``bs`` parameter is the size of each block.\n\n\nCLI\n+++\n\nThere is also available a nice command line. Just install ``cipher`` and start using it! ``$ ciphercmd -v`` will let you know it is ready to be used.\n\nInstallation\n++++++++++++\n\nPyPi:\n\n::\n\n    $ pip install humu1us-cipher\n\nDevelopment version:\n\n::\n\n    $ git clone git@github.com:humu1us/cipher.git\n    $ cd cipher\n    $ pip install -e .\n\nContribution\n++++++++++++\n\nContributions are welcome! Feel free to report bugs or open an issue if you feel a new feature is needed. Pull requests are welcome!\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/humu1us-cipher.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/humu1us-cipher/\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/humu1us-cipher.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/humu1us-cipher/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/humu1us/cipher", "keywords": "AES encryption decryption", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "humu1us-cipher", "package_url": "https://pypi.org/project/humu1us-cipher/", "platform": "", "project_url": "https://pypi.org/project/humu1us-cipher/", "project_urls": {"Homepage": "https://github.com/humu1us/cipher"}, "release_url": "https://pypi.org/project/humu1us-cipher/1.0.0/", "requires_dist": ["pycrypto (<3,>=2)"], "requires_python": "", "summary": "Encryption/decryption library", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/humu1us-cipher/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0931255d81c76034bdcef0b126044ce82ad5bb07/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f68756d753175732d6369706865722e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.python.org/pypi/humu1us-cipher/\" rel=\"nofollow\"><img alt=\"pyversion\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b1637e3ca406ae4a0b097f0e6f2f33d5f73bb78/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f68756d753175732d6369706865722e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>Encryption and decryption tools. Cipher mix AES encryption with base64 encode generating plain text encrypted files.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li>variables:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cipher</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"s2\">\"encryption_password\"</span><span class=\"p\">,</span> <span class=\"s2\">\"something to encrypt!\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'WDJoMWJYVXhkWE5mWlc1algxOGNSc2hFT1o2ZGRBOGhoWnByQjYzZnZBYlp3N2ZKZmVDTEw2V1ZEMWlhZ0ZyZDVpSnpVZDll'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cipher</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">encrypted</span> <span class=\"o\">=</span> <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"s2\">\"encryption_password\"</span><span class=\"p\">,</span> <span class=\"s2\">\"something to encrypt!\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"s2\">\"encryption_password\"</span><span class=\"p\">,</span> <span class=\"n\">encrypted</span><span class=\"p\">)</span>\n<span class=\"s1\">'something to encrypt!'</span>\n</pre>\n<ul>\n<li>files:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cipher</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"s2\">\"file content to encrypt!\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/file.encrypted\"</span><span class=\"p\">,</span> <span class=\"s2\">\"encryption_password\"</span><span class=\"p\">,</span> <span class=\"n\">txt</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cipher</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/file.encrypted\"</span><span class=\"p\">,</span> <span class=\"s2\">\"encryption_password\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'file content to encrypt!'</span>\n</pre>\n<ul>\n<li>A <tt>Credentials</tt> class can be used to handle secrets stored in <tt>JSON</tt> formats:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"db_dsn\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mysql://user:pass@host:port/dbname\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"api_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"some token\"</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/secrets\"</span><span class=\"p\">,</span> <span class=\"s2\">\"encryption_password\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># so, in your app you can do something like this:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cipher</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cred</span> <span class=\"o\">=</span> <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/secrets\"</span><span class=\"p\">,</span> <span class=\"s2\">\"encryption_password\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cred</span><span class=\"o\">.</span><span class=\"n\">db_dsn</span>\n<span class=\"s1\">'mysql://user:pass@host:port/dbname'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cred</span><span class=\"o\">.</span><span class=\"n\">api_token</span>\n<span class=\"s1\">'some token'</span>\n</pre>\n</div>\n<div id=\"generating-keys\">\n<h2>Generating keys</h2>\n<p>There are a lot of ways to create keys but a good easy to use way to create non-easy to remember keys is using <tt>/dev/urandom</tt>, almost on Unix systems. For example:</p>\n<pre>dd if=/dev/urandom bs=16 count=1 | base64 &gt; /path/to/key_file\n</pre>\n<p>The <tt>count</tt> parameter is the number of blocks to read and write, while the <tt>bs</tt> parameter is the size of each block.</p>\n</div>\n<div id=\"cli\">\n<h2>CLI</h2>\n<p>There is also available a nice command line. Just install <tt>cipher</tt> and start using it! <tt>$ ciphercmd <span class=\"pre\">-v</span></tt> will let you know it is ready to be used.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>PyPi:</p>\n<pre>$ pip install humu1us-cipher\n</pre>\n<p>Development version:</p>\n<pre>$ git clone git@github.com:humu1us/cipher.git\n$ cd cipher\n$ pip install -e .\n</pre>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>Contributions are welcome! Feel free to report bugs or open an issue if you feel a new feature is needed. Pull requests are welcome!</p>\n</div>\n\n          </div>"}, "last_serial": 6609695, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c64298cbd8000dec7eb8fb66817cccfb", "sha256": "a28073f5eb6cdd6fa587d7b9d8a3ad9b3d8c679a7ac094418cdf1e306d9fae64"}, "downloads": -1, "filename": "humu1us_cipher-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c64298cbd8000dec7eb8fb66817cccfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9666, "upload_time": "2020-02-11T14:00:08", "upload_time_iso_8601": "2020-02-11T14:00:08.987125Z", "url": "https://files.pythonhosted.org/packages/4a/e6/a45540ebad87a23ab9f6b4d3e1d194ca4de7682c0d768dec02706559530c/humu1us_cipher-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b538f7e88d47417d61b4c95173757079", "sha256": "e98b9c084c5ad44ea23b4b2c469db2524f4f3cf5af4b1eb196ca4441c0bb5e1e"}, "downloads": -1, "filename": "humu1us-cipher-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b538f7e88d47417d61b4c95173757079", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7143, "upload_time": "2020-02-11T14:00:11", "upload_time_iso_8601": "2020-02-11T14:00:11.430181Z", "url": "https://files.pythonhosted.org/packages/54/a1/910f8f5cc1757ab58b636dae3cba9245a496316580effc0f89a93cce0ca5/humu1us-cipher-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c64298cbd8000dec7eb8fb66817cccfb", "sha256": "a28073f5eb6cdd6fa587d7b9d8a3ad9b3d8c679a7ac094418cdf1e306d9fae64"}, "downloads": -1, "filename": "humu1us_cipher-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c64298cbd8000dec7eb8fb66817cccfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9666, "upload_time": "2020-02-11T14:00:08", "upload_time_iso_8601": "2020-02-11T14:00:08.987125Z", "url": "https://files.pythonhosted.org/packages/4a/e6/a45540ebad87a23ab9f6b4d3e1d194ca4de7682c0d768dec02706559530c/humu1us_cipher-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b538f7e88d47417d61b4c95173757079", "sha256": "e98b9c084c5ad44ea23b4b2c469db2524f4f3cf5af4b1eb196ca4441c0bb5e1e"}, "downloads": -1, "filename": "humu1us-cipher-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b538f7e88d47417d61b4c95173757079", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7143, "upload_time": "2020-02-11T14:00:11", "upload_time_iso_8601": "2020-02-11T14:00:11.430181Z", "url": "https://files.pythonhosted.org/packages/54/a1/910f8f5cc1757ab58b636dae3cba9245a496316580effc0f89a93cce0ca5/humu1us-cipher-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:49 2020"}