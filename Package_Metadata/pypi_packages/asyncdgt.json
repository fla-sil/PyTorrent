{"info": {"author": "Niklas Fiekas", "author_email": "niklas.fiekas@tu-clausthal.de", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Topic :: Games/Entertainment :: Board Games", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "asyncdgt: Communicate asynchronously with DGT boards\n====================================================\n\nasyncdgt uses asyncio to communicate asynchronously with a DGT electronic\nchess board.\n`View reference documentation <http://pythonhosted.org/asyncdgt/#reference-documentation>`_.\n\n.. image:: https://badge.fury.io/py/asyncdgt.svg\n    :target: https://pypi.python.org/pypi/asyncdgt\n\n.. image:: https://travis-ci.org/niklasf/python-asyncdgt.svg\n       :target: https://travis-ci.org/niklasf/python-asyncdgt\n\nExample\n-------\n\nCreate an event loop and a connection to the DGT board.\n\n.. code:: python\n\n    import asyncio\n\n    loop = asyncio.get_event_loop()\n    dgt = asyncdgt.auto_connect([\"/dev/ttyACM*\"], loop)\n\nRegister some `pyee <https://github.com/jfhbrook/pyee>`__ event handlers. They\nwill be called whenever a board gets connected, disconnected or the position\nchanged.\n\n.. code:: python\n\n    @dgt.on(\"connected\")\n    def on_connected(port):\n        print(\"Board connected to {0}!\".format(port))\n\n    @dgt.on(\"disconnected\")\n    def on_disconnected():\n        print(\"Board disconnected!\")\n\n    @dgt.on(\"board\")\n    def on_board(board):\n        print(\"Position changed:\")\n        print(board)\n        print()\n\nGet some information outside of an event handler using the coroutine\n``get_version()``.\n\n.. code:: python\n\n    print(\"Version:\", loop.run_until_complete(dgt.get_version()))\n\n\nRun the event loop.\n\n.. code:: python\n\n    try:\n        loop.run_forever()\n    except KeyboardInterrupt:\n        pass\n    finally:\n        dgt.close()\n        loop.close()\n\nSee ``asyncdgt/__main__.py`` for the complete example. Run with\n``python -m asyncdgt /dev/ttyACM0``.\n\nHardware\n--------\n\nTested with the following boards:\n\n* DGT e-Board 3.1\n* DGT e-Board 3.1 Bluetooth\n\nClocks:\n\n* DGT Clock 3000\n\nDependencies\n------------\n\n* Python 3.4\n* `pyee <https://github.com/jfhbrook/pyee>`__\n* `pyserial <http://pyserial.sourceforge.net/>`_\n\n``pip install -r requirements.txt``\n\nRelated projects\n----------------\n\n* `python-chess <https://github.com/niklasf/python-chess>`_,\n  a general purpose chess library.\n\n* `picochess <http://www.picochess.org/>`_,\n  a standalone chess computer for DGT boards. Some of the DGT protocol handling\n  has been shamelessly extracted from their code.\n\nLicense\n-------\n\npython-asyncdtg is licensed under the GPL3. See the ``LICENSE.txt`` file for\nthe full license text.", "description_content_type": null, "docs_url": "https://pythonhosted.org/asyncdgt/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/niklasf/python-asyncdgt", "keywords": "chess dgt", "license": "GPL3", "maintainer": null, "maintainer_email": null, "name": "asyncdgt", "package_url": "https://pypi.org/project/asyncdgt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/asyncdgt/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/niklasf/python-asyncdgt"}, "release_url": "https://pypi.org/project/asyncdgt/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Communicate asynchronously with DGT boards", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>asyncdgt uses asyncio to communicate asynchronously with a DGT electronic\nchess board.\n<a href=\"http://pythonhosted.org/asyncdgt/#reference-documentation\" rel=\"nofollow\">View reference documentation</a>.</p>\n<a href=\"https://pypi.python.org/pypi/asyncdgt\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/asyncdgt.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8bec35a6d485f03076580ccfa56b02de292d4197/68747470733a2f2f62616467652e667572792e696f2f70792f6173796e636467742e737667\"></a>\n<a href=\"https://travis-ci.org/niklasf/python-asyncdgt\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/niklasf/python-asyncdgt.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e8390a218f101755ae36d9b19a6a47781986f39/68747470733a2f2f7472617669732d63692e6f72672f6e696b6c6173662f707974686f6e2d6173796e636467742e737667\"></a>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Create an event loop and a connection to the DGT board.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">dgt</span> <span class=\"o\">=</span> <span class=\"n\">asyncdgt</span><span class=\"o\">.</span><span class=\"n\">auto_connect</span><span class=\"p\">([</span><span class=\"s2\">\"/dev/ttyACM*\"</span><span class=\"p\">],</span> <span class=\"n\">loop</span><span class=\"p\">)</span>\n</pre>\n<p>Register some <a href=\"https://github.com/jfhbrook/pyee\" rel=\"nofollow\">pyee</a> event handlers. They\nwill be called whenever a board gets connected, disconnected or the position\nchanged.</p>\n<pre><span class=\"nd\">@dgt</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"s2\">\"connected\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_connected</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Board connected to </span><span class=\"si\">{0}</span><span class=\"s2\">!\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">))</span>\n\n<span class=\"nd\">@dgt</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"s2\">\"disconnected\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_disconnected</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Board disconnected!\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@dgt</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"s2\">\"board\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Position changed:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">()</span>\n</pre>\n<p>Get some information outside of an event handler using the coroutine\n<tt>get_version()</tt>.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Version:\"</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">dgt</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">()))</span>\n</pre>\n<p>Run the event loop.</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">dgt</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>See <tt>asyncdgt/__main__.py</tt> for the complete example. Run with\n<tt>python <span class=\"pre\">-m</span> asyncdgt /dev/ttyACM0</tt>.</p>\n</div>\n<div id=\"hardware\">\n<h2>Hardware</h2>\n<p>Tested with the following boards:</p>\n<ul>\n<li>DGT e-Board 3.1</li>\n<li>DGT e-Board 3.1 Bluetooth</li>\n</ul>\n<p>Clocks:</p>\n<ul>\n<li>DGT Clock 3000</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Python 3.4</li>\n<li><a href=\"https://github.com/jfhbrook/pyee\" rel=\"nofollow\">pyee</a></li>\n<li><a href=\"http://pyserial.sourceforge.net/\" rel=\"nofollow\">pyserial</a></li>\n</ul>\n<p><tt>pip install <span class=\"pre\">-r</span> requirements.txt</tt></p>\n</div>\n<div id=\"related-projects\">\n<h2>Related projects</h2>\n<ul>\n<li><a href=\"https://github.com/niklasf/python-chess\" rel=\"nofollow\">python-chess</a>,\na general purpose chess library.</li>\n<li><a href=\"http://www.picochess.org/\" rel=\"nofollow\">picochess</a>,\na standalone chess computer for DGT boards. Some of the DGT protocol handling\nhas been shamelessly extracted from their code.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>python-asyncdtg is licensed under the GPL3. See the <tt>LICENSE.txt</tt> file for\nthe full license text.</p>\n</div>\n\n          </div>"}, "last_serial": 1720977, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Thu May  7 18:16:45 2020"}