{"info": {"author": "Jean-Samuel Leboeuf", "author_email": "jean-samuel.leboeuf.1@ulaval.ca", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Python2LaTeX: The Python to LaTeX converter\n\nDid you ever feel overwhelmed by the cumbersomeness of LaTeX to produce quality tables and figures? Fear no more, Python2LaTeX is here! Produce perfect tables automatically and easily, create figures and plots that integrates seamlessly into your tex file, or even write your complete article directly from Python! All that effortlessly (or almost) with Python2LaTeX.\n\n## Prerequisites\n\nThe package makes use of numpy and assumes a distribution of LaTeX that uses ``pdflatex`` is installed on your computer. Some LaTeX packages are used, such as ``booktabs``, ``tikz``, ``pgfplots`` and ``pgfplotstable``. Your LaTeX distribution should inform you if such package needs to be installed.\n\n## Installation\n\nTo install the package, simply run in your terminal the command\n\n    pip install python2latex\n\n## Examples\n\n### Create a simple document\n\nThe following example shows how to create a document with a single section and some text.\n```python\nfrom python2latex import Document\n\ndoc = Document(filename='simple_document_example', filepath='./examples/simple document example', doc_type='article', options=('12pt',))\ndoc.set_margins(top='3cm', bottom='3cm', margins='2cm')\nsec = doc.new_section('Spam and Egg', label='spam_egg')\nsec.add_text('The Monty Python slays the Spam and eats the Egg.')\n\ntex = doc.build() # Builds to tex and compile to pdf\nprint(tex) # Prints the tex string that generated the pdf\n```\n\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img src=\"https://github.com/jsleb333/python2latex/blob/master/examples/simple%20document%20example/simple_document_example.jpg\" alt=\"Simple document\">\n</p>\n</details>\n\n\n### Create a table from a numpy array\n\nThis example shows how to generate automatically a table from data taken directly from a numpy array. The module allows to add merged cells easily, to add rules where you want and even to highlight the best value automatically inside a specified area! To ease these operations, the the square brackets ('getitem') operator have been repurposed to select an area of the table instead of returning the actual values contained in the table. Once an area is selected, use the 'multicell', 'add_rule' or 'highlight_best' methods. To get the actual values inside the table, one can use the 'data' attribute of the table.\n```python\nfrom python2latex import Document, Table, build\nimport numpy as np\n\ndoc = Document(filename='table_from_numpy_array_example', filepath='examples/table from numpy array example', doc_type='article', options=('12pt',))\n\nsec = doc.new_section('Testing tables from numpy array')\nsec.add_text(\"This section tests tables from numpy array.\")\n\ncol, row = 6, 4\ndata = np.random.rand(row, col)\n\ntable = sec.new(Table(shape=(row+2, col+1), alignment='c', float_format='.2f'))\n# Set a caption if desired\ntable.caption = 'Table from numpy array'\n# Set entries with a slice directly from a numpy array!\ntable[2:,1:] = data\n\n# Set a columns title as a multicell with custom parameters\ntable[0,1:4].multicell('Title1', h_align='c')\ntable[0,4:].multicell('Title2', h_align='c')\n# Set subtitles as easily\ntable[1,1:] = [f'Col{i+1}' for i in range(col)]\n# Set a subtitle on two lines if it is too long\ntable[1,-1:].divide_cell(shape=(2,1), alignment='c')[:] = [['Longer'],['Title']]\n\n# Or simply create a new subtable as an entry\nsubtable = Table(shape=(2,1), as_float_env=False, bottom_rule=False, top_rule=False)\nsubtable[:,0] = ['From', 'Numpy']\n\n# Chain multiple methods on the same area for easy combinations of operations\ntable[2:,0].multicell(subtable, v_align='*', v_shift='0pt').highlight('italic')\n# Set multicell areas with a slice too\ntable[3:5,2:4] = 'Array' # The value is stored in the top left cell (here it would be cell (2,2))\n\n# Add rules where you want, as you want\ntable[1,1:4].add_rule(trim_left=True, trim_right='.3em')\ntable[1,4:].add_rule(trim_left='.3em', trim_right=True)\n\n# Automatically highlight the best value(s) inside the specified slice, ignoring text\nfor row in range(2,6):\n    table[row,4:].highlight_best('low', 'italic') # Best per row, for the last 3 columns\n# Highlights equal or near equal values too!\ntable[5,1] = 1.0\ntable[5,2] = 0.996\ntable[5].highlight_best('high', 'bold') # Whole row 4\n\ntex = doc.build()\nprint(tex)\n```\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img src=\"https://github.com/jsleb333/python2latex/blob/master/examples/table%20from%20numpy%20array%20example/table_from_numpy_array_example.jpg\" alt=\"Table from numpy result\">\n</p>\n</details>\n\n\n\n### Create a simple plot\nYou can plot curves as easily as with `matplotlib.pyplot.plot` with the `Plot` environement that compiles it directly into pdf! This is a wrapper around the `pgfplots` and `pgfplotstable` LaTeX packages.\n```python\nfrom python2latex import Document, Plot\nimport numpy as np\n\n# Document type 'standalone' will only show the plot, but does not support all tex environments.\nfilepath = './examples/simple plot example/'\nfilename = 'simple_plot_example'\ndoc = Document(filename, doc_type='standalone', filepath=filepath)\n\n# Create the data\nX = np.linspace(0,2*np.pi,100)\nY1 = np.sin(X)\nY2 = np.cos(X)\n\n# Create a plot\nplot = doc.new(Plot(X, Y1, X, Y2, plot_path=filepath, as_float_env=False))\n\ntex = doc.build()\n```\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img src=\"https://github.com/jsleb333/python2latex/blob/master/examples/simple%20plot%20example/simple_plot_example.jpg\" alt=\"Simple plot result\">\n</p>\n</details>\n\n\n### Create a more complex plot\nYou can make more complex plots with the options shown in this example.\n```python\nfrom python2latex import Document, Plot\nimport numpy as np\n\n# Create the document\nfilepath = './examples/more complex plot example/'\nfilename = 'more_complex_plot_example'\ndoc = Document(filename, doc_type='article', filepath=filepath)\nsec = doc.new_section('More complex plot')\nsec.add_text('This section shows how to make a more complex plot integrated directly into a tex file.')\n\n# Create the data\nX = np.linspace(0,2*np.pi,100)\nY1 = np.sin(X)\nY2 = np.cos(X)\n\n# Create a plot\nplot = sec.new(Plot(plot_name=filename, plot_path=filepath))\nplot.caption = 'More complex plot'\n\nplot.add_plot(X, Y1, 'blue', 'dashed', legend='sine') # Add colors and legend to the plot\nplot.add_plot(X, Y2, 'orange', line_width='3pt', legend='cosine')\nplot.legend_position = 'south east' # Place the legend where you want\n\n# Add a label to each axis\nplot.x_label = 'Radians'\nplot.y_label = 'Projection'\n\n# Choose the limits of the axis\nplot.x_min = 0\nplot.y_min = -1\n\n# Choose the positions of the ticks on the axes\nplot.x_ticks = np.linspace(0,2*np.pi,5)\nplot.y_ticks = np.linspace(-1,1,9)\n# Choose the displayed text for the ticks\nplot.x_ticks_labels = r'0', r'$\\frac{\\pi}{2}$', r'$\\pi$', r'$\\frac{3\\pi}{2}$', r'$2\\pi$'\n\n# Use the tex environment 'axis' keyword options to use unimplemented features if needed.\nplot.axis.kwoptions['y tick label style'] = '{/pgf/number format/fixed zerofill}' # This makes all numbers with the same number of 0 (fills if necessary).\n\ntex = doc.build()\n```\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img src=\"https://github.com/jsleb333/python2latex/blob/master/examples/more%20complex%20plot%20example/more_complex_plot_example.jpg\" alt=\"More complex plot result\">\n</p>\n</details>\n\n### Create a simple matrix plot AKA heatmap\nYou can also make heatmaps in a similar fashion as a plot.\n```python\nfrom python2latex import Document, Plot\nimport numpy as np\n\n# Create the document\nfilepath = './examples/simple matrix plot example'\nfilename = 'simple_matrix_plot_example'\ndoc = Document(filename, doc_type='standalone', filepath=filepath, border='1cm')\n\n# Create the data\nX = np.linspace(-3, 3, 11)\nY = np.linspace(-3, 3, 21)\n\n# Create a plot\nplot = doc.new(Plot(plot_name=filename, plot_path=filepath, as_float_env=False,\n                    grid=False, lines=False,\n                    enlargelimits='false',\n                    width=r'.5\\textwidth', height=r'.5\\textwidth'))\n\nXX, YY = np.meshgrid(X, Y)\nZ = np.exp(-(XX**2+YY**2)/6).T # Transpose is necessary because numpy puts the x dimension along columns and y dimension along rows, which is the opposite of a standard graph.\nplot.add_matrix_plot(X, Y, Z)\n\n# Adding titles and labels\nplot.x_label = 'X axis'\nplot.y_label = 'Y axis'\nplot.title = 'Some title'\n\ntex = doc.build()\n```\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img src=\"https://github.com/jsleb333/python2latex/blob/master/examples/simple%20matrix%20plot%20example/simple_matrix_plot_example.jpg\" alt=\"Simple matrix plot result\">\n</p>\n</details>\n\nBe sure to check our more complex matrix plot example too!\n\n### Create an unsupported environment\nIf some environment is not currently supported, you can create one from the TexEnvironment base class.\n```python\nfrom python2latex import Document, TexEnvironment\n\ndoc = Document(filename='unsupported_env_example', doc_type='article', filepath='examples/unsupported env example', options=('12pt',))\n\nsec = doc.new_section('Unsupported env')\nsec.add_text(\"This section shows how to create unsupported env if needed.\")\n\nsec.add_package('amsmath') # Add needed packages in any TexEnvironment, at any level\nalign = sec.new(TexEnvironment('align', label='align_label'))\nalign.add_text(r\"\"\"e^{i\\pi} &= \\cos \\pi + i \\sin \\pi\\\\\n         &= -1\"\"\") # Use raw strings to alleviate tex writing\n\ntex = doc.build()\nprint(tex)\n```\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img src=\"https://github.com/jsleb333/python2latex/blob/master/examples/unsupported%20env%20example/unsupported_env_example.jpg\" alt=\"Unsupported environment result\">\n</p>\n</details>\n\n\n### Binding objects to environments\nTo alleviate syntax, it is possible to bind TexObject classes to an instance of a TexEnvironment. This creates an alternative class that automatically append any new instance of the class to the environment.\n```python\nfrom python2latex import Document, Section, Subsection, TexEnvironment\n\ndoc = Document(filename='binding_objects_to_environments_example', filepath='./examples/binding objects to environments example', doc_type='article', options=('12pt',))\nsection = doc.bind(Section) # section is now a new class that creates Section instances that are automatically appended to 'doc'\n\nsec1 = section('Section 1', label='sec1') # Equivalent to: sec1 = doc.new(Section('Section 1', label='sec1'))\nsec1.add_text(\"All sections created with ``section'' will be automatically appended to the document body!\")\n\nsubsection, texEnv = sec1.bind(Subsection, TexEnvironment) # 'bind' supports multiple classes in the same call\neq1 = texEnv('equation')\neq1.add_text(r'e^{i\\pi} = -1')\n\neq2 = texEnv('equation')\neq2 += r'\\sum_{n=1}^{\\infty} n = -\\frac{1}{12}' # The += operator calls is the same as 'add_text'\n\nsub1 = subsection('Subsection 1 of section 1')\nsub1 += 'Text of subsection 1 of section 1.'\n\nsec2 = section('Section 2', label='sec2')\nsec2 += \"sec2 is also appended to the document after sec1.\"\n\ntex = doc.build() # Builds to tex and compile to pdf\nprint(tex) # Prints the tex string that generated the pdf\n```\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img src=\"https://github.com/jsleb333/python2latex/blob/master/examples/binding%20objects%20to%20environments%20example/binding_objects_to_environments_example.jpg\" alt=\"Binding objects to environments result\">\n</p>\n</details>\n\n\n## How it works\n\nThis LaTeX wrapper is based on the TexEnvironment class. Each such environment possesses a body attribute consisting in a list of strings and of other TexEnvironments. The 'build' method then converts every TexEnvironment to a tex string recursively. This step makes sure every environment is properly between a '\\begin{env}' and a '\\end{env}'. Converting the document to a string only at the end allows to do operation in the order desired, hence providing flexibility. The 'build' method can be called on any TexEnvironment, return the tex string representation of the environment. However, only the Document class 'build' method will also compile it to an actual pdf.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jsleb333/python2latex", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "python2latex", "package_url": "https://pypi.org/project/python2latex/", "platform": "", "project_url": "https://pypi.org/project/python2latex/", "project_urls": {"Homepage": "https://github.com/jsleb333/python2latex"}, "release_url": "https://pypi.org/project/python2latex/0.2.0/", "requires_dist": ["numpy"], "requires_python": ">=3.6", "summary": "A Python to LaTeX converter", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python2LaTeX: The Python to LaTeX converter</h1>\n<p>Did you ever feel overwhelmed by the cumbersomeness of LaTeX to produce quality tables and figures? Fear no more, Python2LaTeX is here! Produce perfect tables automatically and easily, create figures and plots that integrates seamlessly into your tex file, or even write your complete article directly from Python! All that effortlessly (or almost) with Python2LaTeX.</p>\n<h2>Prerequisites</h2>\n<p>The package makes use of numpy and assumes a distribution of LaTeX that uses <code>pdflatex</code> is installed on your computer. Some LaTeX packages are used, such as <code>booktabs</code>, <code>tikz</code>, <code>pgfplots</code> and <code>pgfplotstable</code>. Your LaTeX distribution should inform you if such package needs to be installed.</p>\n<h2>Installation</h2>\n<p>To install the package, simply run in your terminal the command</p>\n<pre><code>pip install python2latex\n</code></pre>\n<h2>Examples</h2>\n<h3>Create a simple document</h3>\n<p>The following example shows how to create a document with a single section and some text.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python2latex</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span>\n\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'simple_document_example'</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'./examples/simple document example'</span><span class=\"p\">,</span> <span class=\"n\">doc_type</span><span class=\"o\">=</span><span class=\"s1\">'article'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'12pt'</span><span class=\"p\">,))</span>\n<span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">set_margins</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=</span><span class=\"s1\">'3cm'</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=</span><span class=\"s1\">'3cm'</span><span class=\"p\">,</span> <span class=\"n\">margins</span><span class=\"o\">=</span><span class=\"s1\">'2cm'</span><span class=\"p\">)</span>\n<span class=\"n\">sec</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">new_section</span><span class=\"p\">(</span><span class=\"s1\">'Spam and Egg'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'spam_egg'</span><span class=\"p\">)</span>\n<span class=\"n\">sec</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s1\">'The Monty Python slays the Spam and eats the Egg.'</span><span class=\"p\">)</span>\n\n<span class=\"n\">tex</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span> <span class=\"c1\"># Builds to tex and compile to pdf</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tex</span><span class=\"p\">)</span> <span class=\"c1\"># Prints the tex string that generated the pdf</span>\n</pre>\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img alt=\"Simple document\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2eb4df438abf383c4b4723586ca1c0d8fc2e487/68747470733a2f2f6769746875622e636f6d2f6a736c65623333332f707974686f6e326c617465782f626c6f622f6d61737465722f6578616d706c65732f73696d706c65253230646f63756d656e742532306578616d706c652f73696d706c655f646f63756d656e745f6578616d706c652e6a7067\">\n</p>\n</details>\n<h3>Create a table from a numpy array</h3>\n<p>This example shows how to generate automatically a table from data taken directly from a numpy array. The module allows to add merged cells easily, to add rules where you want and even to highlight the best value automatically inside a specified area! To ease these operations, the the square brackets ('getitem') operator have been repurposed to select an area of the table instead of returning the actual values contained in the table. Once an area is selected, use the 'multicell', 'add_rule' or 'highlight_best' methods. To get the actual values inside the table, one can use the 'data' attribute of the table.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python2latex</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">Table</span><span class=\"p\">,</span> <span class=\"n\">build</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'table_from_numpy_array_example'</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'examples/table from numpy array example'</span><span class=\"p\">,</span> <span class=\"n\">doc_type</span><span class=\"o\">=</span><span class=\"s1\">'article'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'12pt'</span><span class=\"p\">,))</span>\n\n<span class=\"n\">sec</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">new_section</span><span class=\"p\">(</span><span class=\"s1\">'Testing tables from numpy array'</span><span class=\"p\">)</span>\n<span class=\"n\">sec</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s2\">\"This section tests tables from numpy array.\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">)</span>\n\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">sec</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">alignment</span><span class=\"o\">=</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"n\">float_format</span><span class=\"o\">=</span><span class=\"s1\">'.2f'</span><span class=\"p\">))</span>\n<span class=\"c1\"># Set a caption if desired</span>\n<span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">caption</span> <span class=\"o\">=</span> <span class=\"s1\">'Table from numpy array'</span>\n<span class=\"c1\"># Set entries with a slice directly from a numpy array!</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:,</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n<span class=\"c1\"># Set a columns title as a multicell with custom parameters</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">multicell</span><span class=\"p\">(</span><span class=\"s1\">'Title1'</span><span class=\"p\">,</span> <span class=\"n\">h_align</span><span class=\"o\">=</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">multicell</span><span class=\"p\">(</span><span class=\"s1\">'Title2'</span><span class=\"p\">,</span> <span class=\"n\">h_align</span><span class=\"o\">=</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Set subtitles as easily</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s1\">'Col</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s1\">'</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)]</span>\n<span class=\"c1\"># Set a subtitle on two lines if it is too long</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">divide_cell</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">alignment</span><span class=\"o\">=</span><span class=\"s1\">'c'</span><span class=\"p\">)[:]</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">'Longer'</span><span class=\"p\">],[</span><span class=\"s1\">'Title'</span><span class=\"p\">]]</span>\n\n<span class=\"c1\"># Or simply create a new subtable as an entry</span>\n<span class=\"n\">subtable</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">as_float_env</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">bottom_rule</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">top_rule</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">subtable</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'From'</span><span class=\"p\">,</span> <span class=\"s1\">'Numpy'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Chain multiple methods on the same area for easy combinations of operations</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:,</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">multicell</span><span class=\"p\">(</span><span class=\"n\">subtable</span><span class=\"p\">,</span> <span class=\"n\">v_align</span><span class=\"o\">=</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"n\">v_shift</span><span class=\"o\">=</span><span class=\"s1\">'0pt'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">highlight</span><span class=\"p\">(</span><span class=\"s1\">'italic'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Set multicell areas with a slice too</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Array'</span> <span class=\"c1\"># The value is stored in the top left cell (here it would be cell (2,2))</span>\n\n<span class=\"c1\"># Add rules where you want, as you want</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_rule</span><span class=\"p\">(</span><span class=\"n\">trim_left</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">trim_right</span><span class=\"o\">=</span><span class=\"s1\">'.3em'</span><span class=\"p\">)</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">add_rule</span><span class=\"p\">(</span><span class=\"n\">trim_left</span><span class=\"o\">=</span><span class=\"s1\">'.3em'</span><span class=\"p\">,</span> <span class=\"n\">trim_right</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Automatically highlight the best value(s) inside the specified slice, ignoring text</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">):</span>\n    <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">highlight_best</span><span class=\"p\">(</span><span class=\"s1\">'low'</span><span class=\"p\">,</span> <span class=\"s1\">'italic'</span><span class=\"p\">)</span> <span class=\"c1\"># Best per row, for the last 3 columns</span>\n<span class=\"c1\"># Highlights equal or near equal values too!</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.996</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">highlight_best</span><span class=\"p\">(</span><span class=\"s1\">'high'</span><span class=\"p\">,</span> <span class=\"s1\">'bold'</span><span class=\"p\">)</span> <span class=\"c1\"># Whole row 4</span>\n\n<span class=\"n\">tex</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tex</span><span class=\"p\">)</span>\n</pre>\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img alt=\"Table from numpy result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/568b6c113cdd9545317584b3cf7e6e9529f3698b/68747470733a2f2f6769746875622e636f6d2f6a736c65623333332f707974686f6e326c617465782f626c6f622f6d61737465722f6578616d706c65732f7461626c6525323066726f6d2532306e756d707925323061727261792532306578616d706c652f7461626c655f66726f6d5f6e756d70795f61727261795f6578616d706c652e6a7067\">\n</p>\n</details>\n<h3>Create a simple plot</h3>\n<p>You can plot curves as easily as with <code>matplotlib.pyplot.plot</code> with the <code>Plot</code> environement that compiles it directly into pdf! This is a wrapper around the <code>pgfplots</code> and <code>pgfplotstable</code> LaTeX packages.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python2latex</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">Plot</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Document type 'standalone' will only show the plot, but does not support all tex environments.</span>\n<span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"s1\">'./examples/simple plot example/'</span>\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'simple_plot_example'</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">doc_type</span><span class=\"o\">=</span><span class=\"s1\">'standalone'</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the data</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">Y1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"n\">Y2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a plot</span>\n<span class=\"n\">plot</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Plot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y1</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y2</span><span class=\"p\">,</span> <span class=\"n\">plot_path</span><span class=\"o\">=</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">as_float_env</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"n\">tex</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n</pre>\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img alt=\"Simple plot result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5b8251829c108ed53821cc5796d9472f60c9397/68747470733a2f2f6769746875622e636f6d2f6a736c65623333332f707974686f6e326c617465782f626c6f622f6d61737465722f6578616d706c65732f73696d706c65253230706c6f742532306578616d706c652f73696d706c655f706c6f745f6578616d706c652e6a7067\">\n</p>\n</details>\n<h3>Create a more complex plot</h3>\n<p>You can make more complex plots with the options shown in this example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python2latex</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">Plot</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Create the document</span>\n<span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"s1\">'./examples/more complex plot example/'</span>\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'more_complex_plot_example'</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">doc_type</span><span class=\"o\">=</span><span class=\"s1\">'article'</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n<span class=\"n\">sec</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">new_section</span><span class=\"p\">(</span><span class=\"s1\">'More complex plot'</span><span class=\"p\">)</span>\n<span class=\"n\">sec</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s1\">'This section shows how to make a more complex plot integrated directly into a tex file.'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the data</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">Y1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"n\">Y2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a plot</span>\n<span class=\"n\">plot</span> <span class=\"o\">=</span> <span class=\"n\">sec</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Plot</span><span class=\"p\">(</span><span class=\"n\">plot_name</span><span class=\"o\">=</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">plot_path</span><span class=\"o\">=</span><span class=\"n\">filepath</span><span class=\"p\">))</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">caption</span> <span class=\"o\">=</span> <span class=\"s1\">'More complex plot'</span>\n\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">add_plot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y1</span><span class=\"p\">,</span> <span class=\"s1\">'blue'</span><span class=\"p\">,</span> <span class=\"s1\">'dashed'</span><span class=\"p\">,</span> <span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"s1\">'sine'</span><span class=\"p\">)</span> <span class=\"c1\"># Add colors and legend to the plot</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">add_plot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y2</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">,</span> <span class=\"n\">line_width</span><span class=\"o\">=</span><span class=\"s1\">'3pt'</span><span class=\"p\">,</span> <span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"s1\">'cosine'</span><span class=\"p\">)</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">legend_position</span> <span class=\"o\">=</span> <span class=\"s1\">'south east'</span> <span class=\"c1\"># Place the legend where you want</span>\n\n<span class=\"c1\"># Add a label to each axis</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">x_label</span> <span class=\"o\">=</span> <span class=\"s1\">'Radians'</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">y_label</span> <span class=\"o\">=</span> <span class=\"s1\">'Projection'</span>\n\n<span class=\"c1\"># Choose the limits of the axis</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">x_min</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">y_min</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n<span class=\"c1\"># Choose the positions of the ticks on the axes</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">x_ticks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">y_ticks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"c1\"># Choose the displayed text for the ticks</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">x_ticks_labels</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">'$\\frac{\\pi}</span><span class=\"si\">{2}</span><span class=\"s1\">$'</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">'$\\pi$'</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">'$\\frac{3\\pi}</span><span class=\"si\">{2}</span><span class=\"s1\">$'</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">'$2\\pi$'</span>\n\n<span class=\"c1\"># Use the tex environment 'axis' keyword options to use unimplemented features if needed.</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">axis</span><span class=\"o\">.</span><span class=\"n\">kwoptions</span><span class=\"p\">[</span><span class=\"s1\">'y tick label style'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'{/pgf/number format/fixed zerofill}'</span> <span class=\"c1\"># This makes all numbers with the same number of 0 (fills if necessary).</span>\n\n<span class=\"n\">tex</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n</pre>\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img alt=\"More complex plot result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b7f57767351a91944b76aaaaae362a0ac7e7f16b/68747470733a2f2f6769746875622e636f6d2f6a736c65623333332f707974686f6e326c617465782f626c6f622f6d61737465722f6578616d706c65732f6d6f7265253230636f6d706c6578253230706c6f742532306578616d706c652f6d6f72655f636f6d706c65785f706c6f745f6578616d706c652e6a7067\">\n</p>\n</details>\n<h3>Create a simple matrix plot AKA heatmap</h3>\n<p>You can also make heatmaps in a similar fashion as a plot.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python2latex</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">Plot</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Create the document</span>\n<span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"s1\">'./examples/simple matrix plot example'</span>\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'simple_matrix_plot_example'</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">doc_type</span><span class=\"o\">=</span><span class=\"s1\">'standalone'</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">border</span><span class=\"o\">=</span><span class=\"s1\">'1cm'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the data</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a plot</span>\n<span class=\"n\">plot</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Plot</span><span class=\"p\">(</span><span class=\"n\">plot_name</span><span class=\"o\">=</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">plot_path</span><span class=\"o\">=</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">as_float_env</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">lines</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"n\">enlargelimits</span><span class=\"o\">=</span><span class=\"s1\">'false'</span><span class=\"p\">,</span>\n                    <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'.5\\textwidth'</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'.5\\textwidth'</span><span class=\"p\">))</span>\n\n<span class=\"n\">XX</span><span class=\"p\">,</span> <span class=\"n\">YY</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">meshgrid</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">)</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">XX</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"n\">YY</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span> <span class=\"c1\"># Transpose is necessary because numpy puts the x dimension along columns and y dimension along rows, which is the opposite of a standard graph.</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">add_matrix_plot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">Z</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adding titles and labels</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">x_label</span> <span class=\"o\">=</span> <span class=\"s1\">'X axis'</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">y_label</span> <span class=\"o\">=</span> <span class=\"s1\">'Y axis'</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Some title'</span>\n\n<span class=\"n\">tex</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n</pre>\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img alt=\"Simple matrix plot result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2debf89e9a2b71aff6fecbbb2faac81353f1743f/68747470733a2f2f6769746875622e636f6d2f6a736c65623333332f707974686f6e326c617465782f626c6f622f6d61737465722f6578616d706c65732f73696d706c652532306d6174726978253230706c6f742532306578616d706c652f73696d706c655f6d61747269785f706c6f745f6578616d706c652e6a7067\">\n</p>\n</details>\n<p>Be sure to check our more complex matrix plot example too!</p>\n<h3>Create an unsupported environment</h3>\n<p>If some environment is not currently supported, you can create one from the TexEnvironment base class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python2latex</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">TexEnvironment</span>\n\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'unsupported_env_example'</span><span class=\"p\">,</span> <span class=\"n\">doc_type</span><span class=\"o\">=</span><span class=\"s1\">'article'</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'examples/unsupported env example'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'12pt'</span><span class=\"p\">,))</span>\n\n<span class=\"n\">sec</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">new_section</span><span class=\"p\">(</span><span class=\"s1\">'Unsupported env'</span><span class=\"p\">)</span>\n<span class=\"n\">sec</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s2\">\"This section shows how to create unsupported env if needed.\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">sec</span><span class=\"o\">.</span><span class=\"n\">add_package</span><span class=\"p\">(</span><span class=\"s1\">'amsmath'</span><span class=\"p\">)</span> <span class=\"c1\"># Add needed packages in any TexEnvironment, at any level</span>\n<span class=\"n\">align</span> <span class=\"o\">=</span> <span class=\"n\">sec</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">TexEnvironment</span><span class=\"p\">(</span><span class=\"s1\">'align'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'align_label'</span><span class=\"p\">))</span>\n<span class=\"n\">align</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"\"\"e^{i\\pi} &amp;= \\cos \\pi + i \\sin \\pi\\\\</span>\n<span class=\"s2\">         &amp;= -1\"\"\"</span><span class=\"p\">)</span> <span class=\"c1\"># Use raw strings to alleviate tex writing</span>\n\n<span class=\"n\">tex</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tex</span><span class=\"p\">)</span>\n</pre>\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img alt=\"Unsupported environment result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ee81df1d0d42b0797859edac58f9c9d8b8a19a0/68747470733a2f2f6769746875622e636f6d2f6a736c65623333332f707974686f6e326c617465782f626c6f622f6d61737465722f6578616d706c65732f756e737570706f72746564253230656e762532306578616d706c652f756e737570706f727465645f656e765f6578616d706c652e6a7067\">\n</p>\n</details>\n<h3>Binding objects to environments</h3>\n<p>To alleviate syntax, it is possible to bind TexObject classes to an instance of a TexEnvironment. This creates an alternative class that automatically append any new instance of the class to the environment.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python2latex</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">Section</span><span class=\"p\">,</span> <span class=\"n\">Subsection</span><span class=\"p\">,</span> <span class=\"n\">TexEnvironment</span>\n\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'binding_objects_to_environments_example'</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'./examples/binding objects to environments example'</span><span class=\"p\">,</span> <span class=\"n\">doc_type</span><span class=\"o\">=</span><span class=\"s1\">'article'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'12pt'</span><span class=\"p\">,))</span>\n<span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Section</span><span class=\"p\">)</span> <span class=\"c1\"># section is now a new class that creates Section instances that are automatically appended to 'doc'</span>\n\n<span class=\"n\">sec1</span> <span class=\"o\">=</span> <span class=\"n\">section</span><span class=\"p\">(</span><span class=\"s1\">'Section 1'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'sec1'</span><span class=\"p\">)</span> <span class=\"c1\"># Equivalent to: sec1 = doc.new(Section('Section 1', label='sec1'))</span>\n<span class=\"n\">sec1</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s2\">\"All sections created with ``section'' will be automatically appended to the document body!\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">subsection</span><span class=\"p\">,</span> <span class=\"n\">texEnv</span> <span class=\"o\">=</span> <span class=\"n\">sec1</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Subsection</span><span class=\"p\">,</span> <span class=\"n\">TexEnvironment</span><span class=\"p\">)</span> <span class=\"c1\"># 'bind' supports multiple classes in the same call</span>\n<span class=\"n\">eq1</span> <span class=\"o\">=</span> <span class=\"n\">texEnv</span><span class=\"p\">(</span><span class=\"s1\">'equation'</span><span class=\"p\">)</span>\n<span class=\"n\">eq1</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'e^{i\\pi} = -1'</span><span class=\"p\">)</span>\n\n<span class=\"n\">eq2</span> <span class=\"o\">=</span> <span class=\"n\">texEnv</span><span class=\"p\">(</span><span class=\"s1\">'equation'</span><span class=\"p\">)</span>\n<span class=\"n\">eq2</span> <span class=\"o\">+=</span> <span class=\"sa\">r</span><span class=\"s1\">'\\sum_{n=1}^{\\infty} n = -\\frac</span><span class=\"si\">{1}{12}</span><span class=\"s1\">'</span> <span class=\"c1\"># The += operator calls is the same as 'add_text'</span>\n\n<span class=\"n\">sub1</span> <span class=\"o\">=</span> <span class=\"n\">subsection</span><span class=\"p\">(</span><span class=\"s1\">'Subsection 1 of section 1'</span><span class=\"p\">)</span>\n<span class=\"n\">sub1</span> <span class=\"o\">+=</span> <span class=\"s1\">'Text of subsection 1 of section 1.'</span>\n\n<span class=\"n\">sec2</span> <span class=\"o\">=</span> <span class=\"n\">section</span><span class=\"p\">(</span><span class=\"s1\">'Section 2'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'sec2'</span><span class=\"p\">)</span>\n<span class=\"n\">sec2</span> <span class=\"o\">+=</span> <span class=\"s2\">\"sec2 is also appended to the document after sec1.\"</span>\n\n<span class=\"n\">tex</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span> <span class=\"c1\"># Builds to tex and compile to pdf</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tex</span><span class=\"p\">)</span> <span class=\"c1\"># Prints the tex string that generated the pdf</span>\n</pre>\n<details>\n<summary>\n<i> Click to unfold result </i>\n</summary>\n<p>\n<img alt=\"Binding objects to environments result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1807a2f5a24b275cad2330276b40483600d1a2d3/68747470733a2f2f6769746875622e636f6d2f6a736c65623333332f707974686f6e326c617465782f626c6f622f6d61737465722f6578616d706c65732f62696e64696e672532306f626a65637473253230746f253230656e7669726f6e6d656e74732532306578616d706c652f62696e64696e675f6f626a656374735f746f5f656e7669726f6e6d656e74735f6578616d706c652e6a7067\">\n</p>\n</details>\n<h2>How it works</h2>\n<p>This LaTeX wrapper is based on the TexEnvironment class. Each such environment possesses a body attribute consisting in a list of strings and of other TexEnvironments. The 'build' method then converts every TexEnvironment to a tex string recursively. This step makes sure every environment is properly between a '\\begin{env}' and a '\\end{env}'. Converting the document to a string only at the end allows to do operation in the order desired, hence providing flexibility. The 'build' method can be called on any TexEnvironment, return the tex string representation of the environment. However, only the Document class 'build' method will also compile it to an actual pdf.</p>\n\n          </div>"}, "last_serial": 6175761, "releases": {"0.1.6": [{"comment_text": "", "digests": {"md5": "475c8fc3b98ba035877041da57d95400", "sha256": "2d081deac8a9002ca7989ba6e0d309be336cf454fb945d49de852808b1ca22d9"}, "downloads": -1, "filename": "python2latex-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "475c8fc3b98ba035877041da57d95400", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20434, "upload_time": "2019-10-21T19:07:25", "upload_time_iso_8601": "2019-10-21T19:07:25.719721Z", "url": "https://files.pythonhosted.org/packages/5e/4e/db1e9bc15b4292032569d4ceb86ce15654aba922e1d9644e056d9dedf0ce/python2latex-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2def1feb9f92446f8ed2c822b8d6cde4", "sha256": "f1e13de2bc0f11231b3d584e526855915da875627e9f106ffe8ed8fcd9934ef3"}, "downloads": -1, "filename": "python2latex-0.1.6.tar.gz", "has_sig": false, "md5_digest": "2def1feb9f92446f8ed2c822b8d6cde4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19990, "upload_time": "2019-10-21T19:07:28", "upload_time_iso_8601": "2019-10-21T19:07:28.390966Z", "url": "https://files.pythonhosted.org/packages/5f/75/e514e90f785ee4d73256fc2216edf08dc347205ed497829919fa1d885681/python2latex-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "3954caf60a05ae7e8472a7107cddb9db", "sha256": "0a9cfd0f5d81beb0b9991abf73029bd135acba7aa1231a4bb572c24958dd71ed"}, "downloads": -1, "filename": "python2latex-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "3954caf60a05ae7e8472a7107cddb9db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20877, "upload_time": "2019-11-21T15:36:10", "upload_time_iso_8601": "2019-11-21T15:36:10.492110Z", "url": "https://files.pythonhosted.org/packages/9c/17/145eaf6e850a8c16147d9aaadca24e832cd5bb6cf0c7bed0eddc14ff6cc6/python2latex-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32d13f127f0c2c5a29eb58e9b7e4764b", "sha256": "ac3e3e5e1f0bf21c99cc169d3c53a62e22e7e95998d2292adcf7faaa92caee41"}, "downloads": -1, "filename": "python2latex-0.1.7.tar.gz", "has_sig": false, "md5_digest": "32d13f127f0c2c5a29eb58e9b7e4764b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20503, "upload_time": "2019-11-21T15:36:15", "upload_time_iso_8601": "2019-11-21T15:36:15.298117Z", "url": "https://files.pythonhosted.org/packages/48/1d/bc83f35a2fecdc4535923b8b3c2889036b3704aa5ba1d1af01aeaf0c511f/python2latex-0.1.7.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4aa8d071e0768f3239482f9e3f7aa7af", "sha256": "8abe0befef8ad32262d8388f0f5f7353bb4e6de7903d53f461cbe4045f558a11"}, "downloads": -1, "filename": "python2latex-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4aa8d071e0768f3239482f9e3f7aa7af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21502, "upload_time": "2019-11-21T15:36:12", "upload_time_iso_8601": "2019-11-21T15:36:12.254950Z", "url": "https://files.pythonhosted.org/packages/ae/43/c18bb4d6069ea95e4bec45caff42a0f93f2f978e2cec729cd20ddac9ee8d/python2latex-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c668c5fc5c8f7d92cfbceca03d50a62", "sha256": "3d75705d4cd9415746e94ff7d26f63e59200a8a37625d9bab3990a3d0df90782"}, "downloads": -1, "filename": "python2latex-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8c668c5fc5c8f7d92cfbceca03d50a62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21515, "upload_time": "2019-11-21T15:36:17", "upload_time_iso_8601": "2019-11-21T15:36:17.175287Z", "url": "https://files.pythonhosted.org/packages/93/09/c683901eb787addf1d15f024dd2e4f73e449e394cef41c25f8ba7e735f6a/python2latex-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4aa8d071e0768f3239482f9e3f7aa7af", "sha256": "8abe0befef8ad32262d8388f0f5f7353bb4e6de7903d53f461cbe4045f558a11"}, "downloads": -1, "filename": "python2latex-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4aa8d071e0768f3239482f9e3f7aa7af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21502, "upload_time": "2019-11-21T15:36:12", "upload_time_iso_8601": "2019-11-21T15:36:12.254950Z", "url": "https://files.pythonhosted.org/packages/ae/43/c18bb4d6069ea95e4bec45caff42a0f93f2f978e2cec729cd20ddac9ee8d/python2latex-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c668c5fc5c8f7d92cfbceca03d50a62", "sha256": "3d75705d4cd9415746e94ff7d26f63e59200a8a37625d9bab3990a3d0df90782"}, "downloads": -1, "filename": "python2latex-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8c668c5fc5c8f7d92cfbceca03d50a62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21515, "upload_time": "2019-11-21T15:36:17", "upload_time_iso_8601": "2019-11-21T15:36:17.175287Z", "url": "https://files.pythonhosted.org/packages/93/09/c683901eb787addf1d15f024dd2e4f73e449e394cef41c25f8ba7e735f6a/python2latex-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:27 2020"}