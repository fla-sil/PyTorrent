{"info": {"author": "Ensoft Ltd", "author_email": "ensoft@ensoft.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: System :: Monitoring"], "description": "# MARPLE - Multi-tool Analysis of Runtime Performance on Linux Environments\n[![Build Status](https://travis-ci.org/ensoft/marple.svg?branch=master)](https://travis-ci.org/ensoft/marple)\n[![Code Coverage](https://codecov.io/gh/ensoft/marple/branch/master/graph/badge.svg)](https://codecov.io/gh/ensoft/marple)\n[![Pylint](https://s3-us-west-1.amazonaws.com/marple.ci.logs/most_recent/pylint.svg)](https://www.pylint.org)\n\n## Description\nMARPLE is a performance analysis and visualisation tool for Linux. It unifies a wide variety of pre-existing Linux tools such as perf and eBPF into one, simple user interface. MARPLE uses these Linux tools to collect data and write it to disk, and provides a variety of visualisation tools to display the data.\n\n## Installation\n1. Install Python 3 and Git.\n~~~~\n$ sudo apt-get update\n$ sudo apt-get install python3 git\n~~~~\n2. Install MARPLE.\n~~~~\n$ sudo python3 -m pip install marple\n~~~~\nNote that `sudo` is not necessary. However, without it `pip` will by default\ninstall MARPLE scripts at `~/.local/bin`, which is not usually included in the\n`PATH` variable. Ensure it is before proceeding.\n\n3. Setup MARPLE - either manually or automatically.\n   1. Automatic setup (***beta***)\n   ~~~~\n   $ marple_setup\n   ~~~~\n   This will install the various dependencies required by MARPLE (see below).\n   Note in particular that the [FD.io VPP repository](https://wiki.fd.io/view/VPP/g2)\n   will be installed into your home directory.\n\n   2. Manual setup\n      1. Install `apt` packages\n      ~~~\n      $ sudo apt-get install perl python3-tkinter libgtk2.0-dev linux-tools-generic linux-tools-common linux-tools-`uname -r`\n      ~~~\n      2. Install BCC (see [instructions](https://github.com/iovisor/bcc/blob/master/INSTALL.md))\n      3. Install G2\n      ~~~\n      # Clone repository\n      git clone https://gerrit.fd.io/r/vpp\n      cd vpp\n      git reset --hard 4146c65f0dd0b5412746064f230b70ec894d2980\n\n      # Setup\n      cd src\n      libtoolize\n      aclocal\n      autoconf\n      automake --add-missing\n      autoreconf\n\n      # Install\n      cd ../build-root\n      make --silent g2-install\n      ~~~\n\n4. MARPLE is now installed, and can be run by invoking the `marple` command, as\ndescribed in [the usage section.](#usage). When you first use MARPLE, it will\ncreate a config file at `~/.marpleconfig`. If you have installed G2 manually,\nensure that the config file has the correct path to your G2 executable.\n\n5. You can also run MARPLE unit tests:\n~~~~\n$ marple_test\n~~~~\n## Usage\nMARPLE can be separately invoked to either collect or display data.\n~~~~\nusage: sudo marple (--collect | --display) [-h] [options]\n~~~~\nOr alternatively:\n~~~~\nusage: sudo marple (-c | -d) [-h] [options]\n~~~~\nYou may wish to set an alias in your `~/.bashrc`:\n~~~~\nalias marple=\"sudo `which marple`\"\n~~~~\n\n### Collecting data\n~~~~\nusage: sudo marple --collect [-h] [-o OUTFILE] [-t TIME]\n                             subcommand [subcommand ...]\n\nCollect performance data.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n  subcommand            interfaces to use for data collection.\n\n                        When multiple interfaces are specified, they will all\n                        be used to collect data simultaneously.\n                        Users can also define their own groups of interfaces\n                        using the config file.\n\n                        Built-in interfaces are:\n                            cpusched, disklat, mallocstacks, memleak, memtime,\n                            callstack, ipc, memevents, diskblockrq, perf_malloc,\n                            lib\n                        Current user-defined groups are:\n                            boot: memleak,cpusched,disklat\n\n  -o OUTFILE, --outfile OUTFILE\n                        specify the data output file.\n\n                        By default this will create a directory named\n                        'marple_out' in the current working directory, and\n                        files will be named by date and time.\n                        Specifying a file name will write to the 'marple_out'\n                        directory - pass in a path to override the save\n                        location too.\n\n\n  -t TIME, --time TIME  specify the duration for data collection (in seconds)\n~~~~\n\nThe subommands are listed below. Each one collects either event-based, stack-based, or 2D point-based data.\n* `cpusched`: collect CPU scheduling event-based data.\n* `disklat`: collect disk latency event-based data.\n* `mallocstacks`: collect `malloc()` call information (including call graph data and size of allocation) as stack-based data.\n* `memleak`: collect outstanding memory allocation data (including call grap data) as stack-based data.\n* `memtime`: collect data on memory usage over time as point data.\n* `callstack`: collect call stack data.\n* `ipc`: collect inter-process communication (IPC) data via TCP as event-based data.\n* `memevents`: collect memory accesses (including call graph data) as stack-based data.\n* `diskblockrq`: collect disk block accesses as event-based data.\n* `perf_malloc`: collect `malloc()` call information (including call graph data) as stack-based data.\n* `lib`: Not yet implemented.\n\nMARPLE allows simultaneous collection using multiple subcommands at once - they are simply passed as multiple arguments, or as a custom collection group. Users can define custom collection groups by using the [config file](marple/config.txt). When using many subcommands, all data will be written to a single file.\n\n### Displaying data\n~~~~\nusage: sudo marple --display [-h] [-fg | -tm] [-g2 | -tcp] [-hm | -sp] [-i INFILE]\n                             [-o OUTFILE]\n\nDisplay collected data in required format\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -fg, --flamegraph     display as flamegraph\n  -tm, --treemap        display as treemap\n  -g2, --g2             display as g2 image\n  -tcp, --tcpplot       display as TCP plot\n  -hm, --heatmap        display as heatmap\n  -sp, --stackplot      display as stackplot\n\n  -i INFILE, --infile INFILE\n                        Input file where collected data to display is stored\n\n  -o OUTFILE, --outfile OUTFILE\n                        Output file where the graph is stored\n~~~~\nTree maps and flame graphs can be used to display stack-based data. G2 and TCP plots can be used to display event-based data. Heat maps and stack plots can be used to display 2D point-based data.\n\nIn general, MARPLE will not require specification of the display mode - it will determine this itself using defaults in the [config file](marple/config.txt). These can be overriden on a case-by-case basis using the command-line arguments. In particular, if displaying a data file with many data sets, overriding stack-based plots to display as flame graphs by using `-fg` will result in all stack-based data in that file being displayed as a flame graph for example.\n\nNote that if collecting and displaying data on the same machine, MARPLE remembers the last data file written - in this case, no display options are necessary and simply invoking `marple -d` will give the correct display.\n\n## Design aims\nMARPLE consists of two core packages: [data collection](#the-data-collection package) and [data visualisation](#the-data-display-package). These two share some [common modules](#common-modules). Two key aims of the design are:\n\n * **Ease-of-use**: the user should not have to be concerned with the underlying tools used to analyse system performance. Instead, they simply specify the part of the system they would like to analyse, and MARPLE does the rest.\n\n * **Separation of data collection and visualisation**: the data collection module writes a data file to disk, which is later used by the visualisation module. Importantly, these two phases do not need to be run on the same machine. This allows data to be collected by one user, and sent off elsewhere for analysis by another user.\n\nThe workflow for using MARPLE is as follows:\n\n 1. **Collect data** - specify areas of interest and duration of collection as [command line arguments](#collecting-data), and MARPLE will collect data and write it to disk.\n\n 2. *(optional)* **Transfer collected data to another machine** - the data can be moved to another machine and still viewed.\n\n 3. **Display data** - specify the input data file, and MARPLE will automatically select the best visualiser to display this data. Alternatively, defaults can be set in the [configuration file](#configuration) or pass as [command line arguments](#displaying-data).\n\n## Data collection tools used by MARPLE\n\nThere are a few different tools used to collect data, and the interfaces to these are detailed below.\n\n### Perf\n\nSometimes referred to as `perf-events`, `perf` is a Linux performance-analysis tool built into Linux from kernel version 2.6.31. It has many subcommands and can be difficult to use.\n\nCurrently, MARPLE can collect data on the following aspects of the system using `perf`:\n  * Memory: load and store events (with call graph information)\n  * Memory: calls to malloc (with call graph information)\n  * Stack: stack traces\n  * CPU: scheduling events\n  * Disk: block requests\n\n For more information on `perf`, see [Brendan Gregg's blog](http://www.brendangregg.com/perf.html).\n\n### Iosnoop\n\nThis is another Linux tool, designed for usage on Linux kernel versions 3.2 and later. It is part of Brendan Gregg's [perf-tools](https://github.com/brendangregg/perf-tools), which use [perf](#perf) and another Linux tool called `ftrace`. `Iosnoop` itself uses `ftrace`, and traces disk IO. MARPLE therefore uses `iosnoop` to trace disk latency.\n\n### eBPF and BCC\n\n[Berkeley Packet Filter](https://prototype-kernel.readthedocs.io/en/latest/bpf/ | Extended Berkeley Packet Filter) (eBPF) is derived from the [https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/filter.txt](Berkeley Packet Filter) (BPF, also known as Linux Socket Filtering or LSF). BPF allows a user-space program to filter any socket, blocking and allowing data based on any criteria. BPF programs are executed in-kernel by a sandboxed virtual machine. Linux makes this process relatively straightforward compared to other UNIX flavours such as BSD - the user simply has to write the code for the filter, then send it to the kernel using a specific function call.\n\neBPF has extended BPF to give a general in-kernel virtual machine, with hooks throughout the kernel allowing it to trace more than just packets, and do more actions than simple filtering. The user writes a program, which is compiled to BPF bytecode and sent to the kernel. The kernel then ensures that an eBPF program cannot harm the system, using static analysis before loading to ensure that it terminates and is safe to execute. It then uses BPF to execute the program, making use of kernel-/user-space probes for dynamic tracing (kprobes and uprobes respectively) and other tracepoints for static tracing and more (see [the eBPF workflow diagram](#ebpf_workflow)). The eBPF programs also use eBPF maps, a generic data structure for storing resulting information. A single eBPF program can be attached to many events, and many programs can use a single map (and vice-versa). Linux kernel versions 3.15 and onwards support eBPF.\n\n<a name=\"ebpf_workflow\"></a>\n![eBPF workflow](http://www.brendangregg.com/eBPF/linux_ebpf_internals.png)\n\n**Figure:** The worflow of using eBPF.\n\nThe [BPF Compiler Collection](https://github.com/iovisor/bcc) (BCC) is a \"toolkit for creating efficient kernel tracing and manipulation programs\", generally requiring Linux kernel version 4.1 or higher. BCC uses eBPF extensively, and makes it simpler to write eBPF programs by providing a Python interfaces to the various tools. The eBPF programs are written in C, and handled in strings in the BCC code. Many useful example tools are provided too (see [the diagram below](#bcc_tools)).\n\n<a name=\"bcc-tools\"></a>\n\n![BCC tools](https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2017.png)\n\n**Figure:** The BCC tools collection.\n\nCurrently, MARPLE uses the following BCC tools:\n * `mallocstacks` - traces `libc` `malloc()` function calls for memory allocation, and shows call stacks and the total number of bytes allocated.\n * `memleak` - traces the top outstanding memory allocations, allowing for detection of memory leaks.\n * `tcptracer` - traces TCP `connect()`, `accept()`, and `close()` system call. In MARPLE this is used to monitor inter-process communication (IPC) which uses TCP.\n\nFor more information on these tools, see [Brendan Gregg's blog](http://www.brendangregg.com/ebpf.html).\n\n\n### Smem\n\nThe `smem` [memory reporting tool](https://www.selenic.com/smem/) allows the user to track physical memory usage, and takes into account shared memory pages (unlike many other tools). It requires a Linux kernel which provides the \"Proportional Set Size\" (PSS) metric for reporting a process' proportion of shared memory - this is usually version 2.6.27 or higher. MARPLE uses `smem` to regularly sample memory usage.\n\nThe tool has a very high latency - it was initially used as it helpfully sorts the processes recorded by memory usage. This is not strictly necessary however, so a command such as `top` could be used in its place. Alternatively, the `smemcap` is a lightweight version designed to run on resource-constrained systems - see the bottom of [the man page](https://linux.die.net/man/8/smem).\n\n\n## Data visualisation tools used by MARPLE\n\n#### Flamegraphs\n[Brendan Gregg's flame graphs](http://www.brendangregg.com/flamegraphs.html) are a useful visualisation for profiled software, as they show call stack data. An example taken from Brendan Gregg's website is [below](#flame_graph). Flame graphs are interactive, allowing the user to zoom in to a certain process.\n\n<a name=\"flame_graph\"></a>\n![flamegraph](./res/flamegraph.svg)\n\n**Figure:** An example flame graph, showing CPU usage for a MySQL program.\n\nIn general any form of stack data is easily viewed as a flame graph.\n\n#### Tree maps\n\n[Tree maps](http://d3plus.org/examples/advanced/9860411/), like [flamegraphs](#flamegraph), are a useful visualisation tool for call stack data. Unlike flame graphs, which show all levels of the current call stack at any one time, tree maps display only a single level, giving users a more detailed view of that level and the opportunity to drill down into deeper levels. These tree maps are interactive, allowing the user to see useful information on hover, and drill down into each node of the tree. An example tree map `.html` file can be found [here](example_treemap).\n\n#### Heat maps\n\nHeat maps allow three-dimensional data to be visualised, using colour as a third dimension. In MARPLE, heat maps are used as histograms - data is grouped into buckets, and colour is used to represent the amount of data falling in each bucket.\n\n<a name=\"example_heatmap\"></a>\n![heatmap](./res/heatmap.png)\n\n**Figure:** An example heat map, showing disk latency data.\n\n#### G2\n\n[G2](https://wiki.fd.io/view/VPP/g2) is an event-log viewer. It is very efficient and scalable, and is part of the [Vector Packet Processing](https://wiki.fd.io/view/VPP) (VPP) platform. This is a framework providing switch/router functionality, and is the open-source version of Cisco's VPP technology.\n\nSee [below](#g2_example) for an example G2 window.\n\n<a name=\"g2_example\"></a>\n![g2](./res/g2.png)\n\n**Figure:** An example G2 window, showing scheduling event data.\n\nG2 has many display features, a few of these are listed below.\n * Pressing the 'c' key will colour the graph.\n * Multiple 'tracks' of events are displayed, and their labels are shown on the left. In the figure above, the tracks are CPU cores.\n * The events are ordered chronologically, with a timescale at the bottom of the screen.\n * Event types can be hidden/shown using the checkboxes on the right.\n * There are navigational and search controls along the bottom of the screen, and in the lower-right conrner.\n\n For more information, consult the [G2 wiki](https://wiki.fd.io/view/VPP/g2).\n\n#### Stack plots\n\nStack plots (also known as stacked graphs or stacked charts) show 'parts to the whole'. They are effectively line graphs subdivided to show the various components that make up the overall line value. They can be seen as a form of pie chart, but one that changes with respect to another dimension (usually time). An example stack plot is shown [below](#stackplot_example).\n\n<a name=\"stackplot_example\"></a>\n![stackplot](./res/stackplot.png)\n\n**Figure:** An example stack plot, showing memory usage by process over time.\n\n\n### Miscellaneous\n * MARPLE logs can be found in `/var/log/marple/`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ensoft/marple/", "keywords": "Linux profile profiling perf bcc visualisation", "license": "", "maintainer": "", "maintainer_email": "", "name": "marple", "package_url": "https://pypi.org/project/marple/", "platform": "", "project_url": "https://pypi.org/project/marple/", "project_urls": {"Automated testing": "https://travis-ci.org/ensoft/marple/", "Code coverage": "https://codecov.io/gh/ensoft/marple/", "Homepage": "http://github.com/ensoft/marple/", "Source Code": "http://github.com/ensoft/marple/"}, "release_url": "https://pypi.org/project/marple/0.1.dev1/", "requires_dist": ["asynctest (>=0.12.2)", "ipython (>=6.5.0)", "ipython-genutils (>=0.2.0)", "matplotlib (>=2.2.2)", "numpy (>=1.13.3)", "pandas (>=0.23.4)", "pylint (>=2.1.1)", "PyQt5 (>=5.11.2)", "PyQt5-sip (>=4.19.12)", "pyqtgraph (>=0.10.0)", "pytest (>=3.7.1)", "pytest-cov (>=2.5.1)", "scipy (>=0.19.1)"], "requires_python": "~=3.6", "summary": "A Linux profiling multi-tool with visualisation.", "version": "0.1.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MARPLE - Multi-tool Analysis of Runtime Performance on Linux Environments</h1>\n<p><a href=\"https://travis-ci.org/ensoft/marple\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c64c96ad16677c5e6d47eb07b8ac6c50182012cd/68747470733a2f2f7472617669732d63692e6f72672f656e736f66742f6d6172706c652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ensoft/marple\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76359044f7315cbe18db3ddeec2e3db3217a7818/68747470733a2f2f636f6465636f762e696f2f67682f656e736f66742f6d6172706c652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://www.pylint.org\" rel=\"nofollow\"><img alt=\"Pylint\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4cc3b0a2b2aca4f889a750930650419e3ffb3684/68747470733a2f2f73332d75732d776573742d312e616d617a6f6e6177732e636f6d2f6d6172706c652e63692e6c6f67732f6d6f73745f726563656e742f70796c696e742e737667\"></a></p>\n<h2>Description</h2>\n<p>MARPLE is a performance analysis and visualisation tool for Linux. It unifies a wide variety of pre-existing Linux tools such as perf and eBPF into one, simple user interface. MARPLE uses these Linux tools to collect data and write it to disk, and provides a variety of visualisation tools to display the data.</p>\n<h2>Installation</h2>\n<ol>\n<li>Install Python 3 and Git.</li>\n</ol>\n<pre><code>$ sudo apt-get update\n$ sudo apt-get install python3 git\n</code></pre>\n<ol>\n<li>Install MARPLE.</li>\n</ol>\n<pre><code>$ sudo python3 -m pip install marple\n</code></pre>\n<p>Note that <code>sudo</code> is not necessary. However, without it <code>pip</code> will by default\ninstall MARPLE scripts at <code>~/.local/bin</code>, which is not usually included in the\n<code>PATH</code> variable. Ensure it is before proceeding.</p>\n<ol>\n<li>\n<p>Setup MARPLE - either manually or automatically.</p>\n<ol>\n<li>Automatic setup (<em><strong>beta</strong></em>)</li>\n</ol>\n<pre><code>$ marple_setup\n</code></pre>\n<p>This will install the various dependencies required by MARPLE (see below).\nNote in particular that the <a href=\"https://wiki.fd.io/view/VPP/g2\" rel=\"nofollow\">FD.io VPP repository</a>\nwill be installed into your home directory.</p>\n<ol>\n<li>Manual setup\n<ol>\n<li>Install <code>apt</code> packages</li>\n</ol>\n<pre><code>$ sudo apt-get install perl python3-tkinter libgtk2.0-dev linux-tools-generic linux-tools-common linux-tools-`uname -r`\n</code></pre>\n<ol>\n<li>Install BCC (see <a href=\"https://github.com/iovisor/bcc/blob/master/INSTALL.md\" rel=\"nofollow\">instructions</a>)</li>\n<li>Install G2</li>\n</ol>\n<pre><code># Clone repository\ngit clone https://gerrit.fd.io/r/vpp\ncd vpp\ngit reset --hard 4146c65f0dd0b5412746064f230b70ec894d2980\n\n# Setup\ncd src\nlibtoolize\naclocal\nautoconf\nautomake --add-missing\nautoreconf\n\n# Install\ncd ../build-root\nmake --silent g2-install\n</code></pre>\n</li>\n</ol>\n</li>\n<li>\n<p>MARPLE is now installed, and can be run by invoking the <code>marple</code> command, as\ndescribed in <a href=\"#usage\" rel=\"nofollow\">the usage section.</a>. When you first use MARPLE, it will\ncreate a config file at <code>~/.marpleconfig</code>. If you have installed G2 manually,\nensure that the config file has the correct path to your G2 executable.</p>\n</li>\n<li>\n<p>You can also run MARPLE unit tests:</p>\n</li>\n</ol>\n<pre><code>$ marple_test\n</code></pre>\n<h2>Usage</h2>\n<p>MARPLE can be separately invoked to either collect or display data.</p>\n<pre><code>usage: sudo marple (--collect | --display) [-h] [options]\n</code></pre>\n<p>Or alternatively:</p>\n<pre><code>usage: sudo marple (-c | -d) [-h] [options]\n</code></pre>\n<p>You may wish to set an alias in your <code>~/.bashrc</code>:</p>\n<pre><code>alias marple=\"sudo `which marple`\"\n</code></pre>\n<h3>Collecting data</h3>\n<pre><code>usage: sudo marple --collect [-h] [-o OUTFILE] [-t TIME]\n                             subcommand [subcommand ...]\n\nCollect performance data.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n  subcommand            interfaces to use for data collection.\n\n                        When multiple interfaces are specified, they will all\n                        be used to collect data simultaneously.\n                        Users can also define their own groups of interfaces\n                        using the config file.\n\n                        Built-in interfaces are:\n                            cpusched, disklat, mallocstacks, memleak, memtime,\n                            callstack, ipc, memevents, diskblockrq, perf_malloc,\n                            lib\n                        Current user-defined groups are:\n                            boot: memleak,cpusched,disklat\n\n  -o OUTFILE, --outfile OUTFILE\n                        specify the data output file.\n\n                        By default this will create a directory named\n                        'marple_out' in the current working directory, and\n                        files will be named by date and time.\n                        Specifying a file name will write to the 'marple_out'\n                        directory - pass in a path to override the save\n                        location too.\n\n\n  -t TIME, --time TIME  specify the duration for data collection (in seconds)\n</code></pre>\n<p>The subommands are listed below. Each one collects either event-based, stack-based, or 2D point-based data.</p>\n<ul>\n<li><code>cpusched</code>: collect CPU scheduling event-based data.</li>\n<li><code>disklat</code>: collect disk latency event-based data.</li>\n<li><code>mallocstacks</code>: collect <code>malloc()</code> call information (including call graph data and size of allocation) as stack-based data.</li>\n<li><code>memleak</code>: collect outstanding memory allocation data (including call grap data) as stack-based data.</li>\n<li><code>memtime</code>: collect data on memory usage over time as point data.</li>\n<li><code>callstack</code>: collect call stack data.</li>\n<li><code>ipc</code>: collect inter-process communication (IPC) data via TCP as event-based data.</li>\n<li><code>memevents</code>: collect memory accesses (including call graph data) as stack-based data.</li>\n<li><code>diskblockrq</code>: collect disk block accesses as event-based data.</li>\n<li><code>perf_malloc</code>: collect <code>malloc()</code> call information (including call graph data) as stack-based data.</li>\n<li><code>lib</code>: Not yet implemented.</li>\n</ul>\n<p>MARPLE allows simultaneous collection using multiple subcommands at once - they are simply passed as multiple arguments, or as a custom collection group. Users can define custom collection groups by using the <a href=\"marple/config.txt\" rel=\"nofollow\">config file</a>. When using many subcommands, all data will be written to a single file.</p>\n<h3>Displaying data</h3>\n<pre><code>usage: sudo marple --display [-h] [-fg | -tm] [-g2 | -tcp] [-hm | -sp] [-i INFILE]\n                             [-o OUTFILE]\n\nDisplay collected data in required format\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -fg, --flamegraph     display as flamegraph\n  -tm, --treemap        display as treemap\n  -g2, --g2             display as g2 image\n  -tcp, --tcpplot       display as TCP plot\n  -hm, --heatmap        display as heatmap\n  -sp, --stackplot      display as stackplot\n\n  -i INFILE, --infile INFILE\n                        Input file where collected data to display is stored\n\n  -o OUTFILE, --outfile OUTFILE\n                        Output file where the graph is stored\n</code></pre>\n<p>Tree maps and flame graphs can be used to display stack-based data. G2 and TCP plots can be used to display event-based data. Heat maps and stack plots can be used to display 2D point-based data.</p>\n<p>In general, MARPLE will not require specification of the display mode - it will determine this itself using defaults in the <a href=\"marple/config.txt\" rel=\"nofollow\">config file</a>. These can be overriden on a case-by-case basis using the command-line arguments. In particular, if displaying a data file with many data sets, overriding stack-based plots to display as flame graphs by using <code>-fg</code> will result in all stack-based data in that file being displayed as a flame graph for example.</p>\n<p>Note that if collecting and displaying data on the same machine, MARPLE remembers the last data file written - in this case, no display options are necessary and simply invoking <code>marple -d</code> will give the correct display.</p>\n<h2>Design aims</h2>\n<p>MARPLE consists of two core packages: [data collection](#the-data-collection package) and <a href=\"#the-data-display-package\" rel=\"nofollow\">data visualisation</a>. These two share some <a href=\"#common-modules\" rel=\"nofollow\">common modules</a>. Two key aims of the design are:</p>\n<ul>\n<li>\n<p><strong>Ease-of-use</strong>: the user should not have to be concerned with the underlying tools used to analyse system performance. Instead, they simply specify the part of the system they would like to analyse, and MARPLE does the rest.</p>\n</li>\n<li>\n<p><strong>Separation of data collection and visualisation</strong>: the data collection module writes a data file to disk, which is later used by the visualisation module. Importantly, these two phases do not need to be run on the same machine. This allows data to be collected by one user, and sent off elsewhere for analysis by another user.</p>\n</li>\n</ul>\n<p>The workflow for using MARPLE is as follows:</p>\n<ol>\n<li>\n<p><strong>Collect data</strong> - specify areas of interest and duration of collection as <a href=\"#collecting-data\" rel=\"nofollow\">command line arguments</a>, and MARPLE will collect data and write it to disk.</p>\n</li>\n<li>\n<p><em>(optional)</em> <strong>Transfer collected data to another machine</strong> - the data can be moved to another machine and still viewed.</p>\n</li>\n<li>\n<p><strong>Display data</strong> - specify the input data file, and MARPLE will automatically select the best visualiser to display this data. Alternatively, defaults can be set in the <a href=\"#configuration\" rel=\"nofollow\">configuration file</a> or pass as <a href=\"#displaying-data\" rel=\"nofollow\">command line arguments</a>.</p>\n</li>\n</ol>\n<h2>Data collection tools used by MARPLE</h2>\n<p>There are a few different tools used to collect data, and the interfaces to these are detailed below.</p>\n<h3>Perf</h3>\n<p>Sometimes referred to as <code>perf-events</code>, <code>perf</code> is a Linux performance-analysis tool built into Linux from kernel version 2.6.31. It has many subcommands and can be difficult to use.</p>\n<p>Currently, MARPLE can collect data on the following aspects of the system using <code>perf</code>:</p>\n<ul>\n<li>Memory: load and store events (with call graph information)</li>\n<li>Memory: calls to malloc (with call graph information)</li>\n<li>Stack: stack traces</li>\n<li>CPU: scheduling events</li>\n<li>Disk: block requests</li>\n</ul>\n<p>For more information on <code>perf</code>, see <a href=\"http://www.brendangregg.com/perf.html\" rel=\"nofollow\">Brendan Gregg's blog</a>.</p>\n<h3>Iosnoop</h3>\n<p>This is another Linux tool, designed for usage on Linux kernel versions 3.2 and later. It is part of Brendan Gregg's <a href=\"https://github.com/brendangregg/perf-tools\" rel=\"nofollow\">perf-tools</a>, which use <a href=\"#perf\" rel=\"nofollow\">perf</a> and another Linux tool called <code>ftrace</code>. <code>Iosnoop</code> itself uses <code>ftrace</code>, and traces disk IO. MARPLE therefore uses <code>iosnoop</code> to trace disk latency.</p>\n<h3>eBPF and BCC</h3>\n<p>[Berkeley Packet Filter](<a href=\"https://prototype-kernel.readthedocs.io/en/latest/bpf/\" rel=\"nofollow\">https://prototype-kernel.readthedocs.io/en/latest/bpf/</a> | Extended Berkeley Packet Filter) (eBPF) is derived from the [https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/filter.txt](Berkeley Packet Filter) (BPF, also known as Linux Socket Filtering or LSF). BPF allows a user-space program to filter any socket, blocking and allowing data based on any criteria. BPF programs are executed in-kernel by a sandboxed virtual machine. Linux makes this process relatively straightforward compared to other UNIX flavours such as BSD - the user simply has to write the code for the filter, then send it to the kernel using a specific function call.</p>\n<p>eBPF has extended BPF to give a general in-kernel virtual machine, with hooks throughout the kernel allowing it to trace more than just packets, and do more actions than simple filtering. The user writes a program, which is compiled to BPF bytecode and sent to the kernel. The kernel then ensures that an eBPF program cannot harm the system, using static analysis before loading to ensure that it terminates and is safe to execute. It then uses BPF to execute the program, making use of kernel-/user-space probes for dynamic tracing (kprobes and uprobes respectively) and other tracepoints for static tracing and more (see <a href=\"#ebpf_workflow\" rel=\"nofollow\">the eBPF workflow diagram</a>). The eBPF programs also use eBPF maps, a generic data structure for storing resulting information. A single eBPF program can be attached to many events, and many programs can use a single map (and vice-versa). Linux kernel versions 3.15 and onwards support eBPF.</p>\n<p><a></a>\n<img alt=\"eBPF workflow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6d4562f13fa2f200ed0b6b2b66fd0d845a117bd/687474703a2f2f7777772e6272656e64616e67726567672e636f6d2f654250462f6c696e75785f656270665f696e7465726e616c732e706e67\"></p>\n<p><strong>Figure:</strong> The worflow of using eBPF.</p>\n<p>The <a href=\"https://github.com/iovisor/bcc\" rel=\"nofollow\">BPF Compiler Collection</a> (BCC) is a \"toolkit for creating efficient kernel tracing and manipulation programs\", generally requiring Linux kernel version 4.1 or higher. BCC uses eBPF extensively, and makes it simpler to write eBPF programs by providing a Python interfaces to the various tools. The eBPF programs are written in C, and handled in strings in the BCC code. Many useful example tools are provided too (see <a href=\"#bcc_tools\" rel=\"nofollow\">the diagram below</a>).</p>\n<p><a></a></p>\n<p><img alt=\"BCC tools\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ef9b7f79f463060eac2f93021580d3ceaeaef49/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f696f7669736f722f6263632f6d61737465722f696d616765732f6263635f74726163696e675f746f6f6c735f323031372e706e67\"></p>\n<p><strong>Figure:</strong> The BCC tools collection.</p>\n<p>Currently, MARPLE uses the following BCC tools:</p>\n<ul>\n<li><code>mallocstacks</code> - traces <code>libc</code> <code>malloc()</code> function calls for memory allocation, and shows call stacks and the total number of bytes allocated.</li>\n<li><code>memleak</code> - traces the top outstanding memory allocations, allowing for detection of memory leaks.</li>\n<li><code>tcptracer</code> - traces TCP <code>connect()</code>, <code>accept()</code>, and <code>close()</code> system call. In MARPLE this is used to monitor inter-process communication (IPC) which uses TCP.</li>\n</ul>\n<p>For more information on these tools, see <a href=\"http://www.brendangregg.com/ebpf.html\" rel=\"nofollow\">Brendan Gregg's blog</a>.</p>\n<h3>Smem</h3>\n<p>The <code>smem</code> <a href=\"https://www.selenic.com/smem/\" rel=\"nofollow\">memory reporting tool</a> allows the user to track physical memory usage, and takes into account shared memory pages (unlike many other tools). It requires a Linux kernel which provides the \"Proportional Set Size\" (PSS) metric for reporting a process' proportion of shared memory - this is usually version 2.6.27 or higher. MARPLE uses <code>smem</code> to regularly sample memory usage.</p>\n<p>The tool has a very high latency - it was initially used as it helpfully sorts the processes recorded by memory usage. This is not strictly necessary however, so a command such as <code>top</code> could be used in its place. Alternatively, the <code>smemcap</code> is a lightweight version designed to run on resource-constrained systems - see the bottom of <a href=\"https://linux.die.net/man/8/smem\" rel=\"nofollow\">the man page</a>.</p>\n<h2>Data visualisation tools used by MARPLE</h2>\n<h4>Flamegraphs</h4>\n<p><a href=\"http://www.brendangregg.com/flamegraphs.html\" rel=\"nofollow\">Brendan Gregg's flame graphs</a> are a useful visualisation for profiled software, as they show call stack data. An example taken from Brendan Gregg's website is <a href=\"#flame_graph\" rel=\"nofollow\">below</a>. Flame graphs are interactive, allowing the user to zoom in to a certain process.</p>\n<p><a></a>\n<img alt=\"flamegraph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84ee40a3efa9eff82588639d59144c04add65f06/2e2f7265732f666c616d6567726170682e737667\"></p>\n<p><strong>Figure:</strong> An example flame graph, showing CPU usage for a MySQL program.</p>\n<p>In general any form of stack data is easily viewed as a flame graph.</p>\n<h4>Tree maps</h4>\n<p><a href=\"http://d3plus.org/examples/advanced/9860411/\" rel=\"nofollow\">Tree maps</a>, like <a href=\"#flamegraph\" rel=\"nofollow\">flamegraphs</a>, are a useful visualisation tool for call stack data. Unlike flame graphs, which show all levels of the current call stack at any one time, tree maps display only a single level, giving users a more detailed view of that level and the opportunity to drill down into deeper levels. These tree maps are interactive, allowing the user to see useful information on hover, and drill down into each node of the tree. An example tree map <code>.html</code> file can be found <a href=\"example_treemap\" rel=\"nofollow\">here</a>.</p>\n<h4>Heat maps</h4>\n<p>Heat maps allow three-dimensional data to be visualised, using colour as a third dimension. In MARPLE, heat maps are used as histograms - data is grouped into buckets, and colour is used to represent the amount of data falling in each bucket.</p>\n<p><a></a>\n<img alt=\"heatmap\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3be2c56a075e4c76263381856146905edf751e84/2e2f7265732f686561746d61702e706e67\"></p>\n<p><strong>Figure:</strong> An example heat map, showing disk latency data.</p>\n<h4>G2</h4>\n<p><a href=\"https://wiki.fd.io/view/VPP/g2\" rel=\"nofollow\">G2</a> is an event-log viewer. It is very efficient and scalable, and is part of the <a href=\"https://wiki.fd.io/view/VPP\" rel=\"nofollow\">Vector Packet Processing</a> (VPP) platform. This is a framework providing switch/router functionality, and is the open-source version of Cisco's VPP technology.</p>\n<p>See <a href=\"#g2_example\" rel=\"nofollow\">below</a> for an example G2 window.</p>\n<p><a></a>\n<img alt=\"g2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc08d5640647a2fe7807af4aba034ea45f6d58ff/2e2f7265732f67322e706e67\"></p>\n<p><strong>Figure:</strong> An example G2 window, showing scheduling event data.</p>\n<p>G2 has many display features, a few of these are listed below.</p>\n<ul>\n<li>Pressing the 'c' key will colour the graph.</li>\n<li>Multiple 'tracks' of events are displayed, and their labels are shown on the left. In the figure above, the tracks are CPU cores.</li>\n<li>The events are ordered chronologically, with a timescale at the bottom of the screen.</li>\n<li>Event types can be hidden/shown using the checkboxes on the right.</li>\n<li>There are navigational and search controls along the bottom of the screen, and in the lower-right conrner.</li>\n</ul>\n<p>For more information, consult the <a href=\"https://wiki.fd.io/view/VPP/g2\" rel=\"nofollow\">G2 wiki</a>.</p>\n<h4>Stack plots</h4>\n<p>Stack plots (also known as stacked graphs or stacked charts) show 'parts to the whole'. They are effectively line graphs subdivided to show the various components that make up the overall line value. They can be seen as a form of pie chart, but one that changes with respect to another dimension (usually time). An example stack plot is shown <a href=\"#stackplot_example\" rel=\"nofollow\">below</a>.</p>\n<p><a></a>\n<img alt=\"stackplot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6320043b5e681414d1dd434db673449405da2a4d/2e2f7265732f737461636b706c6f742e706e67\"></p>\n<p><strong>Figure:</strong> An example stack plot, showing memory usage by process over time.</p>\n<h3>Miscellaneous</h3>\n<ul>\n<li>MARPLE logs can be found in <code>/var/log/marple/</code>.</li>\n</ul>\n\n          </div>"}, "last_serial": 4244728, "releases": {"0.1.dev1": [{"comment_text": "", "digests": {"md5": "f169ff9a099115c0df44829468468640", "sha256": "3a9c87d927bfff9cc7d4d4c532135f097a46d455c88ea43552099d468b5f37f3"}, "downloads": -1, "filename": "marple-0.1.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "f169ff9a099115c0df44829468468640", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 144548, "upload_time": "2018-09-06T13:07:10", "upload_time_iso_8601": "2018-09-06T13:07:10.015545Z", "url": "https://files.pythonhosted.org/packages/49/2f/9134c0e61fa884870f68bb21e053448bdc1cb8c66293eb3485c5e0318fd9/marple-0.1.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65de90123a89524f32e544cb1c05e1eb", "sha256": "efd68a990fb86f33be1dc0622a996a6c1fc307b4019cbd2d8f84dd07badd3d86"}, "downloads": -1, "filename": "marple-0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "65de90123a89524f32e544cb1c05e1eb", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 117895, "upload_time": "2018-09-06T13:07:11", "upload_time_iso_8601": "2018-09-06T13:07:11.915971Z", "url": "https://files.pythonhosted.org/packages/6c/9a/f49797f56d6e83e605b7bc0accd1fb6fadbf674d69fe99553c37244f2b4f/marple-0.1.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f169ff9a099115c0df44829468468640", "sha256": "3a9c87d927bfff9cc7d4d4c532135f097a46d455c88ea43552099d468b5f37f3"}, "downloads": -1, "filename": "marple-0.1.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "f169ff9a099115c0df44829468468640", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 144548, "upload_time": "2018-09-06T13:07:10", "upload_time_iso_8601": "2018-09-06T13:07:10.015545Z", "url": "https://files.pythonhosted.org/packages/49/2f/9134c0e61fa884870f68bb21e053448bdc1cb8c66293eb3485c5e0318fd9/marple-0.1.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65de90123a89524f32e544cb1c05e1eb", "sha256": "efd68a990fb86f33be1dc0622a996a6c1fc307b4019cbd2d8f84dd07badd3d86"}, "downloads": -1, "filename": "marple-0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "65de90123a89524f32e544cb1c05e1eb", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 117895, "upload_time": "2018-09-06T13:07:11", "upload_time_iso_8601": "2018-09-06T13:07:11.915971Z", "url": "https://files.pythonhosted.org/packages/6c/9a/f49797f56d6e83e605b7bc0accd1fb6fadbf674d69fe99553c37244f2b4f/marple-0.1.dev1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:38 2020"}