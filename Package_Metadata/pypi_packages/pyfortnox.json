{"info": {"author": "Mahmudul Hasan", "author_email": "ikhtiarcse10ruet@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "pyfortnox\n==============\n\nFortnox API V3 library client for Python\n\nInstallation\n------------\n\npyfortnox package can be installed either via pip or easy\\_install:\n\n.. code:: bash\n\n    $ pip install --upgrade pyfortnox\n\nor\n\n.. code:: bash\n\n    $ easy_install --upgrade pyfortnox\n\nYou can install from the source code as well. First clone the repo and\nthen execute:\n\n.. code:: bash\n\n    $ python setup.py install\n\nAfter installing, import ``pyfortnox`` package:\n\n.. code:: python\n\n    import fortnox\n\nUsage\n-----\n\n.. code:: python\n\n    import fortnox\n\n    # Then we instantiate a client (as shown below)\n\nBuild a client\n~~~~~~~~~~~~~~\n\n**Using this api without authentication gives an error**\n\n.. code:: python\n\n    client = fortnox.Client(access_token='<YOUR_PERSONAL_ACCESS_TOKEN>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n\nClient Options\n~~~~~~~~~~~~~~\n\nThe following options are available while instantiating a client:\n\n-  **access\\_token**: Personal access token\n-  **client\\_secret**: Private/public integration app's client secret\n-  **base\\_url**: Base url for the api\n-  **timeout**: Request timeout\n-  **verbose**: Verbose/debug mode\n\nArchitecture\n~~~~~~~~~~~~\n\nThe library follows few architectural principles you should understand\nbefore digging deeper. 1. Interactions with resources are done via\nservice objects. 2. Service objects are exposed as properties on client\ninstances. 3. Service objects expose resource-oriented actions. 4.\nActions return dictionaries that support attribute-style access, a la\nJavaScript (thanks to Bunch and it's form Munch).\n\nFor example, to interact with projects API you will use\n``fortnox.ProjectService``, which you can get if you call:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='<YOUR_PERSONAL_ACCESS_TOKEN>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n    client.projects # fortnox.ProjectService\n\nTo retrieve list of resources and use filtering you will call ``#list``\nmethod:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='<YOUR_PERSONAL_ACCESS_TOKEN>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n    client.projects.list(organization_id=google.id, hot=True) # list(dict|Munch)\n    or simply, client.projects.list()\n\nTo find custom field by name and its value pass kwargs as an argument:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='<YOUR_PERSONAL_ACCESS_TOKEN>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n    client.projects.list(**{'ProjectNumber': 1})\n\nTo find a resource by its unique identifier use ``#retrieve`` method:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='<YOUR_PERSONAL_ACCESS_TOKEN>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n    client.projects.retrieve(id=1)\n\nWhen you'd like to create a resource, or update it's attributes you want\nto use either ``#create`` or ``#update`` methods. For example if you\nwant to create a new project you will call:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='<YOUR_PERSONAL_ACCESS_TOKEN>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n    project = client.projects.create(Description='Website design', Status='ONGOING')\n\n    project.ProjectNumber = 1\n    project.Status = 'ONGOING'\n    project.Description = 'Website redesign'\n\n    client.projects.update(project.ProjectNumber, StartDate='2014-02-28')\n\nTo destroy a resource use ``#destroy`` method:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='<YOUR_PERSONAL_ACCESS_TOKEN>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n    client.projects.destroy(project.ProjectNumber)\n\nThere other non-CRUD operations supported as well. Please contact\ncorresponding service files for in-depth documentation.\n\nFull example\n~~~~~~~~~~~~\n\nObtain an access token from a new authorization_code and after get access_token for further user\n(website).\n\n.. code:: python\n\n    client = fortnox.Client(authorization_code='<YOUR_APP_INTEGRATION_AUTHORIZATION_CODE>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n    obtained_token = client.token.client.token.access_token()\n    access_token = obtained_token.AccessToken\n\nWhen you instantiate a client or make any request via service objects,\nexceptions can be raised for multiple of reasons e.g. a network error,\nan authentication error, an invalid param error etc.\n\nSample below shows how to properly handle exceptions:\n\n.. code:: python\n\n    try:\n        # Instantiate a client.\n        client = fortnox.Client(access_token='<YOUR_PERSONAL_ACCESS_TOKEN>', client_secret='<YOUR_APPS_CLIENT_SECRET>')\n        project = client.projects.create(Description='Website design', Status='ONGOING')\n        print(project)\n    except basecrm.ConfigurationError as e:\n        #  Invalid client configuration option\n        pass\n    except basecrm.ResourceError as e:\n        # Resource related error\n        print 'Http status = ' + e.http_status\n        print 'Request ID = ' + e.logref\n        for error in e.errors:\n            print 'field = ' + error.field\n            print 'code = ' + error.code\n            print 'message = ' + error.message\n            print 'details = ' + error.details\n    except basecrm.RequestError as e:\n        # Invalid query parameters, authentication error etc.\n        pass\n    except Exception as e:\n        # Other kind of exceptioni, probably connectivity related\n        pass\n\nResources and actions\n---------------------\n\nDocumentation for every action can be found under ``fortnox/services/``\nfiles.\n\nTo know about available services, see Fortnox's Official Developer Documentation\n---------------------------------------------------------------------------------\n######https://developer.fortnox.se/documentation/\n\nN.B. Below services are not implemented in the latest release of pyfortnox:\n\n1. Digital Receipt\n2. Inbox\n3. Warehouse Custom Inbound Documents\n4. Warehouse Custom Outbound Documents\n5. Warehouse Information\n6. Warehouse Item Summary\n7. Warehouse Resource Specific Fields\n\n\nTests\n-----\n\nTo run all test suites:\n\n.. code:: bash\n\n    $ python setup.py test\n\nAnd to run a single suite:\n\n.. code:: bash\n\n    $ python setup.py test -s fortnox.test.test_associated_project_service.ProjectServiceTests\n\nThanks\n------\n\nI would like to give huge thanks to my wife, fellow colleagues, mentors and friends for\ntheir continuous inspiration and supports to contribute to this package.\n``pyfortnox`` was named from ``pythonic fortnox`` and I was lucky to publish wrapper under **pyfortnox** name.\n\nThank You!\n\nLicense\n-------\n\nMIT\n\nBug Reports\n-----------\n\nReport `here <https://github.com/xalien10/pyfortnox/issues>`.\n\nContact\n-------\n\nMahmudul Hasan (ikhtiarcse10ruet@gmail.com)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xalien10/pyfortnox", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyfortnox", "package_url": "https://pypi.org/project/pyfortnox/", "platform": "", "project_url": "https://pypi.org/project/pyfortnox/", "project_urls": {"Homepage": "https://github.com/xalien10/pyfortnox"}, "release_url": "https://pypi.org/project/pyfortnox/1.0.0/", "requires_dist": ["munch (>=2.5.0)", "requests (>=2.21.0)", "urllib3 (>=1.24.3)"], "requires_python": ">=3.6", "summary": "Fortnox API V3 library client for Python", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyfortnox</h1>\n<p>Fortnox API V3 library client for Python</p>\n<h2>Installation</h2>\n<p>pyfortnox package can be installed either via pip or easy_install:</p>\n<p>.. code:: bash</p>\n<pre><code>$ pip install --upgrade pyfortnox\n</code></pre>\n<p>or</p>\n<p>.. code:: bash</p>\n<pre><code>$ easy_install --upgrade pyfortnox\n</code></pre>\n<p>You can install from the source code as well. First clone the repo and\nthen execute:</p>\n<p>.. code:: bash</p>\n<pre><code>$ python setup.py install\n</code></pre>\n<p>After installing, import <code>pyfortnox</code> package:</p>\n<p>.. code:: python</p>\n<pre><code>import fortnox\n</code></pre>\n<h2>Usage</h2>\n<p>.. code:: python</p>\n<pre><code>import fortnox\n\n# Then we instantiate a client (as shown below)\n</code></pre>\n<p>Build a client</p>\n<pre><code>\n**Using this api without authentication gives an error**\n\n.. code:: python\n\n    client = fortnox.Client(access_token='&lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\n\nClient Options\n</code></pre>\n<p>The following options are available while instantiating a client:</p>\n<ul>\n<li><strong>access_token</strong>: Personal access token</li>\n<li><strong>client_secret</strong>: Private/public integration app's client secret</li>\n<li><strong>base_url</strong>: Base url for the api</li>\n<li><strong>timeout</strong>: Request timeout</li>\n<li><strong>verbose</strong>: Verbose/debug mode</li>\n</ul>\n<p>Architecture</p>\n<pre><code>\nThe library follows few architectural principles you should understand\nbefore digging deeper. 1. Interactions with resources are done via\nservice objects. 2. Service objects are exposed as properties on client\ninstances. 3. Service objects expose resource-oriented actions. 4.\nActions return dictionaries that support attribute-style access, a la\nJavaScript (thanks to Bunch and it's form Munch).\n\nFor example, to interact with projects API you will use\n``fortnox.ProjectService``, which you can get if you call:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='&lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\n    client.projects # fortnox.ProjectService\n\nTo retrieve list of resources and use filtering you will call ``#list``\nmethod:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='&lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\n    client.projects.list(organization_id=google.id, hot=True) # list(dict|Munch)\n    or simply, client.projects.list()\n\nTo find custom field by name and its value pass kwargs as an argument:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='&lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\n    client.projects.list(**{'ProjectNumber': 1})\n\nTo find a resource by its unique identifier use ``#retrieve`` method:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='&lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\n    client.projects.retrieve(id=1)\n\nWhen you'd like to create a resource, or update it's attributes you want\nto use either ``#create`` or ``#update`` methods. For example if you\nwant to create a new project you will call:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='&lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\n    project = client.projects.create(Description='Website design', Status='ONGOING')\n\n    project.ProjectNumber = 1\n    project.Status = 'ONGOING'\n    project.Description = 'Website redesign'\n\n    client.projects.update(project.ProjectNumber, StartDate='2014-02-28')\n\nTo destroy a resource use ``#destroy`` method:\n\n.. code:: python\n\n    client = fortnox.Client(access_token='&lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\n    client.projects.destroy(project.ProjectNumber)\n\nThere other non-CRUD operations supported as well. Please contact\ncorresponding service files for in-depth documentation.\n\nFull example\n</code></pre>\n<p>Obtain an access token from a new authorization_code and after get access_token for further user\n(website).</p>\n<p>.. code:: python</p>\n<pre><code>client = fortnox.Client(authorization_code='&lt;YOUR_APP_INTEGRATION_AUTHORIZATION_CODE&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\nobtained_token = client.token.client.token.access_token()\naccess_token = obtained_token.AccessToken\n</code></pre>\n<p>When you instantiate a client or make any request via service objects,\nexceptions can be raised for multiple of reasons e.g. a network error,\nan authentication error, an invalid param error etc.</p>\n<p>Sample below shows how to properly handle exceptions:</p>\n<p>.. code:: python</p>\n<pre><code>try:\n    # Instantiate a client.\n    client = fortnox.Client(access_token='&lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;', client_secret='&lt;YOUR_APPS_CLIENT_SECRET&gt;')\n    project = client.projects.create(Description='Website design', Status='ONGOING')\n    print(project)\nexcept basecrm.ConfigurationError as e:\n    #  Invalid client configuration option\n    pass\nexcept basecrm.ResourceError as e:\n    # Resource related error\n    print 'Http status = ' + e.http_status\n    print 'Request ID = ' + e.logref\n    for error in e.errors:\n        print 'field = ' + error.field\n        print 'code = ' + error.code\n        print 'message = ' + error.message\n        print 'details = ' + error.details\nexcept basecrm.RequestError as e:\n    # Invalid query parameters, authentication error etc.\n    pass\nexcept Exception as e:\n    # Other kind of exceptioni, probably connectivity related\n    pass\n</code></pre>\n<h2>Resources and actions</h2>\n<p>Documentation for every action can be found under <code>fortnox/services/</code>\nfiles.</p>\n<h2>To know about available services, see Fortnox's Official Developer Documentation</h2>\n<p>######<a href=\"https://developer.fortnox.se/documentation/\" rel=\"nofollow\">https://developer.fortnox.se/documentation/</a></p>\n<p>N.B. Below services are not implemented in the latest release of pyfortnox:</p>\n<ol>\n<li>Digital Receipt</li>\n<li>Inbox</li>\n<li>Warehouse Custom Inbound Documents</li>\n<li>Warehouse Custom Outbound Documents</li>\n<li>Warehouse Information</li>\n<li>Warehouse Item Summary</li>\n<li>Warehouse Resource Specific Fields</li>\n</ol>\n<h2>Tests</h2>\n<p>To run all test suites:</p>\n<p>.. code:: bash</p>\n<pre><code>$ python setup.py test\n</code></pre>\n<p>And to run a single suite:</p>\n<p>.. code:: bash</p>\n<pre><code>$ python setup.py test -s fortnox.test.test_associated_project_service.ProjectServiceTests\n</code></pre>\n<h2>Thanks</h2>\n<p>I would like to give huge thanks to my wife, fellow colleagues, mentors and friends for\ntheir continuous inspiration and supports to contribute to this package.\n<code>pyfortnox</code> was named from <code>pythonic fortnox</code> and I was lucky to publish wrapper under <strong>pyfortnox</strong> name.</p>\n<p>Thank You!</p>\n<h2>License</h2>\n<p>MIT</p>\n<h2>Bug Reports</h2>\n<p>Report <code>here &lt;https://github.com/xalien10/pyfortnox/issues&gt;</code>.</p>\n<h2>Contact</h2>\n<p>Mahmudul Hasan (<a href=\"mailto:ikhtiarcse10ruet@gmail.com\">ikhtiarcse10ruet@gmail.com</a>)</p>\n\n          </div>"}, "last_serial": 6907371, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "21d90ddbb62a04308f51dff277ec0fcb", "sha256": "b67d76a724992e683dcbcfac482199abb9d2f9fa2ca911537bee5d9d6bce2817"}, "downloads": -1, "filename": "pyfortnox-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "21d90ddbb62a04308f51dff277ec0fcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10717, "upload_time": "2020-03-20T20:07:41", "upload_time_iso_8601": "2020-03-20T20:07:41.322633Z", "url": "https://files.pythonhosted.org/packages/97/c8/60f5bd86717fa8f697c25411f6e32a4e45ac7e714ebb2a1ded076ae5549a/pyfortnox-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "3aed76093e8138238df5b58d92fc43dd", "sha256": "be73977dcacf2c2190e1bbba0908136b17d64be1d6c4ed163affe5d81ce36911"}, "downloads": -1, "filename": "pyfortnox-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3aed76093e8138238df5b58d92fc43dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 92454, "upload_time": "2020-03-21T14:36:14", "upload_time_iso_8601": "2020-03-21T14:36:14.638666Z", "url": "https://files.pythonhosted.org/packages/f8/30/f2e5853f9d7aa2030f0e4b30d7eee7957266029e0153d75ff185d5116404/pyfortnox-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "229d997b62fdfb19abc51e76b376d0ec", "sha256": "ca05069a46c4b38d704e88735d931375b57add5ee18ad910d9254ea01900204c"}, "downloads": -1, "filename": "pyfortnox-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "229d997b62fdfb19abc51e76b376d0ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 92293, "upload_time": "2020-03-23T06:29:34", "upload_time_iso_8601": "2020-03-23T06:29:34.844752Z", "url": "https://files.pythonhosted.org/packages/4e/1e/61baa37b2d24fddfedf550077c80129ad9324e39ad0ebc1c3c589ae24907/pyfortnox-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d7653dc93fc440df0be121569785f14", "sha256": "1ba03e528c2022f9871ad68dbb6a50c2f62eb8edd8eb32f03fa2e409f656129d"}, "downloads": -1, "filename": "pyfortnox-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6d7653dc93fc440df0be121569785f14", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14421, "upload_time": "2020-03-23T06:29:36", "upload_time_iso_8601": "2020-03-23T06:29:36.550812Z", "url": "https://files.pythonhosted.org/packages/2c/86/855cf50ecfb4f6828a36927d1c897cd618886a0ec4294d2774713b80acd4/pyfortnox-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "7741e283470c730bdbec92ec86232930", "sha256": "5c6ca178393eddbffa9f0d60b30616dc6262cc9819902d45fab2ac6f0d4f4c0f"}, "downloads": -1, "filename": "pyfortnox-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "7741e283470c730bdbec92ec86232930", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 92588, "upload_time": "2020-03-23T17:38:00", "upload_time_iso_8601": "2020-03-23T17:38:00.024762Z", "url": "https://files.pythonhosted.org/packages/37/43/4fe7040edf0b5b5bf462686b54c9bf16156160e4b4dce2e7e2391c164450/pyfortnox-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "152b332e1600d5a7ea1c4c5a6796a538", "sha256": "cc827c138737768603587cd2a8ac0dbe6fb47001b6feb6c1ff5074e853ed0921"}, "downloads": -1, "filename": "pyfortnox-0.0.5.tar.gz", "has_sig": false, "md5_digest": "152b332e1600d5a7ea1c4c5a6796a538", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16302, "upload_time": "2020-03-23T17:38:01", "upload_time_iso_8601": "2020-03-23T17:38:01.971483Z", "url": "https://files.pythonhosted.org/packages/56/53/3962c6ad3b6a324cb75ac2f5c54520fb40a31d17558d5a828e39bfef2612/pyfortnox-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "f5220cf4bdc945348c5b034375895d4e", "sha256": "5fb1fd8fad95c75c2d908ee20c618b2443eda91dac4f2361944a1940ea9c2ce5"}, "downloads": -1, "filename": "pyfortnox-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "f5220cf4bdc945348c5b034375895d4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 93589, "upload_time": "2020-03-27T18:24:08", "upload_time_iso_8601": "2020-03-27T18:24:08.939001Z", "url": "https://files.pythonhosted.org/packages/13/81/6aeafd35131dd54bc9cb8eef59563a2465408c1cadbe38d29dac7401a464/pyfortnox-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48029c4e09136f44d6c15138874eb9c3", "sha256": "279f2a965a85846de18fd672542a38527a7386fd2434dfaa5ad27df77193a1ce"}, "downloads": -1, "filename": "pyfortnox-0.0.6.tar.gz", "has_sig": false, "md5_digest": "48029c4e09136f44d6c15138874eb9c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16783, "upload_time": "2020-03-27T18:24:10", "upload_time_iso_8601": "2020-03-27T18:24:10.385282Z", "url": "https://files.pythonhosted.org/packages/e3/82/832634f13ff63f3b7e97c2bbfe4e6a3f96de312fcd4f0fc95114b9ddab9a/pyfortnox-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "b2986f5d2afba37f92385439555ba0ee", "sha256": "e655d1c0f426aa841e055154a0c2984195b1827c3b650b64f71d7d764fe20585"}, "downloads": -1, "filename": "pyfortnox-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b2986f5d2afba37f92385439555ba0ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 94696, "upload_time": "2020-03-29T15:22:13", "upload_time_iso_8601": "2020-03-29T15:22:13.787477Z", "url": "https://files.pythonhosted.org/packages/2a/42/c0398baee2358c4fa518eacdeeaee2862c6fa32ea024e1fc01299f336901/pyfortnox-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc515e1a42fe3c70433fc6a4252921b8", "sha256": "24c6ae25c94d017764de5eb2cc712255193d212a1357399d67d6c7c21bb0663e"}, "downloads": -1, "filename": "pyfortnox-0.0.7.tar.gz", "has_sig": false, "md5_digest": "bc515e1a42fe3c70433fc6a4252921b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30114, "upload_time": "2020-03-29T15:22:16", "upload_time_iso_8601": "2020-03-29T15:22:16.355108Z", "url": "https://files.pythonhosted.org/packages/cc/1d/172bc5b369d6c0f50e80ada9fbb5233dd178a064b6b12a783e0a9f0da1bf/pyfortnox-0.0.7.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "0c4786d7c1e44ed706631a54f2c66cee", "sha256": "801dcebf24023c39bf0df43b2ded6b9d8bdc80cb89361aa2016c01df15c92bde"}, "downloads": -1, "filename": "pyfortnox-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c4786d7c1e44ed706631a54f2c66cee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 96705, "upload_time": "2020-03-29T16:18:14", "upload_time_iso_8601": "2020-03-29T16:18:14.279810Z", "url": "https://files.pythonhosted.org/packages/bd/0a/876778074c152e8b013c5b82761ab01164adfac1c145af0ad2c23db15d0e/pyfortnox-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00dd04513b7e9abfc6a31ef2a6ddc9c7", "sha256": "284c0198c90edd14e693c35e73299e384647fa72eff6360419ffae15818e896a"}, "downloads": -1, "filename": "pyfortnox-1.0.0.tar.gz", "has_sig": false, "md5_digest": "00dd04513b7e9abfc6a31ef2a6ddc9c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34590, "upload_time": "2020-03-29T16:18:16", "upload_time_iso_8601": "2020-03-29T16:18:16.051599Z", "url": "https://files.pythonhosted.org/packages/e4/a3/bdbbd7202c0c13202c3ea67277e1bf64daa98fee0a85f6a00be0eb4a5b8f/pyfortnox-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c4786d7c1e44ed706631a54f2c66cee", "sha256": "801dcebf24023c39bf0df43b2ded6b9d8bdc80cb89361aa2016c01df15c92bde"}, "downloads": -1, "filename": "pyfortnox-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c4786d7c1e44ed706631a54f2c66cee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 96705, "upload_time": "2020-03-29T16:18:14", "upload_time_iso_8601": "2020-03-29T16:18:14.279810Z", "url": "https://files.pythonhosted.org/packages/bd/0a/876778074c152e8b013c5b82761ab01164adfac1c145af0ad2c23db15d0e/pyfortnox-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00dd04513b7e9abfc6a31ef2a6ddc9c7", "sha256": "284c0198c90edd14e693c35e73299e384647fa72eff6360419ffae15818e896a"}, "downloads": -1, "filename": "pyfortnox-1.0.0.tar.gz", "has_sig": false, "md5_digest": "00dd04513b7e9abfc6a31ef2a6ddc9c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34590, "upload_time": "2020-03-29T16:18:16", "upload_time_iso_8601": "2020-03-29T16:18:16.051599Z", "url": "https://files.pythonhosted.org/packages/e4/a3/bdbbd7202c0c13202c3ea67277e1bf64daa98fee0a85f6a00be0eb4a5b8f/pyfortnox-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:34 2020"}