{"info": {"author": "Sebastien Estienne", "author_email": "sebastien.estienne@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python"], "description": "Introduction\n============\n\nAn eggified, buildout installable verions of DailyMotion's cloudkey.py module.\n\nForked from https://github.com/dailymotion/cloudkey-py\n\n\n.. _Python SDK: http://www.dmcloud.net/doc/api/python-sdk.html\n.. _cloud-api: http://www.dmcloud.net/doc/api/\n.. _media-api: http://www.dmcloud.net/doc/api/cloud-api.html#media-api\n.. _Media Object: http://www.dmcloud.net/doc/api/cloud-api.html#media-api\n.. _File Object: http://www.dmcloud.net/doc/api/cloud-api.html#file-api\n\n\n*************\n`Python SDK`_\n*************\n\nGeneral information\n===================\n\nThe Python library exposes all API methods described in the\n`cloud-api`_ section.\n\nYou can download the python library on\n`GitHub <http://github.com/dailymotion/cloudkey-py>`_.\n\nA master class named ``CloudKey`` exposes all objects (eg: media-api_)\nthrough object attributes.\n\nThe library exposes all the remote methods of \"cloud-api\"_ and also have\nlocal methods for specific purpose like uploading files or getting signed\nstream URLs.\n\nRemote methods\n--------------\n\nFor instance, to call the ``list`` method from the ``media`` object, the\ncode would be as follows::\n\n  from cloudkey import CloudKey\n\n  USER_ID = '4c1a4d3edede832bfd000002'\n  API_KEY = '52a32c7890338770e3ea1601214c02142d297298'\n\n  cloudkey = CloudKey(USER_ID, API_KEY)\n  cloudkey.media.list()\n\nFor methods expecting parameters, these must be passed as named arguments::\n\n  cloudkey.media.list(fields=['id'], per_page=20, page=2)\n\nThe returned values are a direct mapping of the JSON structure into python's\nnative types.\n\nLocal methods\n-------------\n\n`File Object`_\n^^^^^^^^^^^^^^^\n\n``upload_file(file)``\n\n  Upload a local file to Dailymotion Cloud using its path.\n\n  :param file: the path to the file\n  :type file: str\n  :returns: A dict containing the ``url`` where the uploaded file can be accessed\n  :rtype: dict\n\n  Example::\n\n    result = cloudkey.file.upload_file(\"/path/to/file.mkv\")\n\n\n`Media object`_\n^^^^^^^^^^^^^^^\n\n``get_embed_url(id, seclevel=None, asnum=None, ip=None, useragent=None, expires=None, secure=False)``\n\n  This method returns a signed URL to a Dailymotion Cloud player embed\n  (see the API reference for details).\n  The generated URL is perishable, and access is granted based-on the\n  provided security level bitmask.\n\n  :param id: the id of the new media object.\n  :type id: media ID\n  :param seclevel: the security level bitmask\n    (default is ``SecLevel.NONE``, see below for details).\n  :type seclevel: int\n  :param expires: the UNIX epoch expiration time\n    (default is ``time() + 7200`` (2 hours from now)).\n  :type expires: int\n  :param secure: ``True`` to get a https url.\n    (default is ``False``).\n  :type secure: bool\n\n  The following arguments may be required if the ``SecLevel.DELEGATE``\n  option is not specified in the seclevel parameter, depending on the other\n  options. This is not recommanded as it would probably lead to spurious\n  access denials, mainly due to GeoIP databases discrepancies.\n\n  :param asnum: the client's autonomous system number (default is ``None``).\n  :type asnum: str\n  :param ip: the client's IP adress (default is ``None``).\n  :type ip: str\n  :param useragent: the client's HTTP User-Agent header (default is ``None``).\n  :type useragent: str\n\n  Example::\n\n    // Create an embed URL limited only to the\n    // AS of the end-user and valid for 1 hour\n    url = cloudkey.media.get_embed_url(id=media['id'],\n                                    seclevel=SecLevel.DELEGATE | SecLevel.ASNUM,\n                                    expires=time() + 3600)\n\n``get_stream_url(id, preset='mp4_h264_aac', seclevel=None,\nasnum=None, ip=None, useragent=None, expires=None, version=None)``\n\n  This method returns a signed URL to a Dailymotion Cloud video stream\n  (see the API reference for details).\n\n  The generated URL is perishable, and access is granted\n  based on the provided security level bitmask.\n\n  :param id: the id of the new media object.\n  :type id: media ID\n  :param preset: the desired media asset preset name\n    (default is ``mp4_h264_aac``).\n  :type preset: str\n  :param seclevel: the security level bitmask\n    (default is ``SecLevel.NONE``, see below for details).\n  :type seclevel: int\n  :param expires: the UNIX epoch expiration time\n    (default is ``time() + 7200`` (2 hours from now)).\n  :type expires: int\n  :param download: ``True`` to get the download url\n    (default is ``False``).\n  :type download: bool\n  :param filename: the download url filename.\n    It overrides the download parameter if set.\n  :type filename: str\n  :param version: arbitrary integer inserted in the url for the cache flush.\n    Use this parameter only if needed, and modify its value only when a cache flush is required.\n  :type version: int\n  :param protocol: streaming protocol ('hls', 'rtmp', 'hps' or 'http'). Overrides the `download` parameter if 'http'.\n  :type protocol: str\n\n  The following arguments may be required if the ``SecLevel.DELEGATE``\n  option is not specified in the seclevel parameter, depending on the other\n  options. This is not recommanded as it would probably lead to spurious\n  access denials, mainly due to GeoIP databases discrepancies.\n\n  :param asnum: the client's autonomous system number (default is ``None``).\n  :type asnum: str\n  :param ip: the client's IP adress (default is ``None``).\n  :type ip: str\n  :param useragent: the client's HTTP User-Agent header (default is ``None``).\n  :type useragent: str\n\n\nQuick Tour\n==========\n\n\nSecurity level options\n-----------------------\n\nThe security level defines the mechanism used by the Dailymotion Cloud\narchitecture to ensure a mediastream URL access will be limited to a single\nuser or a group of users. The different (combinable) options are:\n\n  - ``SecLevel.NONE``: the URL access is granted to everyone.\n  - ``SecLevel.ASNUM``: the URL access is granted to the specified\n    AS number only. AS numbers stands for 'Autonomous System number'\n    and roughly map groups of IP to telcos and large organizations\n    on the Internet (each ISP has its own AS number for instance,\n    Dailyotion's AS number is AS41690).\n  - ``SecLevel.IP``: the URL access is granted to the specified IP address\n    only. This option may lead to spurious access denials as some\n    users are load-balanced behind multiple proxies when accessing\n    the Internet (this is mostly the case with ISPs and large\n    organizations).\n  - ``SecLevel.USERAGENT``: the URL access is granted to users\n    sending the specified User-Agent HTTP header only.\n  - ``SecLevel.DELEGATE``: the ASNUM, IP and User-Agent values\n    are to be gathered at the server side during the first URL\n    access and don't need to be specified at the client side\n    beforehand (this is the recommended approach as it will\n    ensure a 100%-accurate ASNUM recognition).\n  - ``SecLevel.USEONCE``: the URL access is granted once only\n    (using this option will probably prevent seeking from working correctly).\n\nFor more information, please refer to the Dailymotion Cloud\nstreams security documentation.\n\nExceptions\n----------\n\n* RPCException: This is the base of all exceptions\n\n  * TransportException: When an error occured with the HTTP transport\n  * SerializerError: When the Request or the Response is not valid JSON\n  * InvalidRequest: When the Request is not wellformed\n  * InvalidCall: When the value of the ``call`` argument is invalid\n  * InvalidObject: When you access an object that doesn't exist\n  * InvalidMethod: When you access a method that doesn't exist\n  * InvalidParameter: When a method is called with a invalid or missing parameter\n  * AuthenticationError: When authentication information is invalid\n\n    * RateLimitExceeded: When you exceed the number of API calls on\n      a specific timeframe\n\n      * ApplicationException: The base class of the following exceptions\n      * NotFound: When action is requested on an item that doesn't exist\n      * Exists: When action is requested on an item that already exists\n      * LimitExceeded: When you reach the maximum number of allowed objects.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/dailymotion/cloudkey-py/zipball/1.2.6", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dailymotion/cloudkey-py", "keywords": "dailymotion,dmcloud,cloud,cloudkey,api,sdk", "license": "Apache License, Version 2.0", "maintainer": null, "maintainer_email": null, "name": "cloudkey", "package_url": "https://pypi.org/project/cloudkey/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cloudkey/", "project_urls": {"Download": "https://github.com/dailymotion/cloudkey-py/zipball/1.2.6", "Homepage": "http://github.com/dailymotion/cloudkey-py"}, "release_url": "https://pypi.org/project/cloudkey/1.2.6/", "requires_dist": null, "requires_python": null, "summary": "Dailymotion Cloud API client library", "version": "1.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            Introduction<br>============<br><br>An eggified, buildout installable verions of DailyMotion's cloudkey.py module.<br><br>Forked from https://github.com/dailymotion/cloudkey-py<br><br><br>.. _Python SDK: http://www.dmcloud.net/doc/api/python-sdk.html<br>.. _cloud-api: http://www.dmcloud.net/doc/api/<br>.. _media-api: http://www.dmcloud.net/doc/api/cloud-api.html#media-api<br>.. _Media Object: http://www.dmcloud.net/doc/api/cloud-api.html#media-api<br>.. _File Object: http://www.dmcloud.net/doc/api/cloud-api.html#file-api<br><br><br>*************<br>`Python SDK`_<br>*************<br><br>General information<br>===================<br><br>The Python library exposes all API methods described in the<br>`cloud-api`_ section.<br><br>You can download the python library on<br>`GitHub &lt;http://github.com/dailymotion/cloudkey-py&gt;`_.<br><br>A master class named ``CloudKey`` exposes all objects (eg: media-api_)<br>through object attributes.<br><br>The library exposes all the remote methods of \"cloud-api\"_ and also have<br>local methods for specific purpose like uploading files or getting signed<br>stream URLs.<br><br>Remote methods<br>--------------<br><br>For instance, to call the ``list`` method from the ``media`` object, the<br>code would be as follows::<br><br>  from cloudkey import CloudKey<br><br>  USER_ID = '4c1a4d3edede832bfd000002'<br>  API_KEY = '52a32c7890338770e3ea1601214c02142d297298'<br><br>  cloudkey = CloudKey(USER_ID, API_KEY)<br>  cloudkey.media.list()<br><br>For methods expecting parameters, these must be passed as named arguments::<br><br>  cloudkey.media.list(fields=['id'], per_page=20, page=2)<br><br>The returned values are a direct mapping of the JSON structure into python's<br>native types.<br><br>Local methods<br>-------------<br><br>`File Object`_<br>^^^^^^^^^^^^^^^<br><br>``upload_file(file)``<br><br>  Upload a local file to Dailymotion Cloud using its path.<br><br>  :param file: the path to the file<br>  :type file: str<br>  :returns: A dict containing the ``url`` where the uploaded file can be accessed<br>  :rtype: dict<br><br>  Example::<br><br>    result = cloudkey.file.upload_file(\"/path/to/file.mkv\")<br><br><br>`Media object`_<br>^^^^^^^^^^^^^^^<br><br>``get_embed_url(id, seclevel=None, asnum=None, ip=None, useragent=None, expires=None, secure=False)``<br><br>  This method returns a signed URL to a Dailymotion Cloud player embed<br>  (see the API reference for details).<br>  The generated URL is perishable, and access is granted based-on the<br>  provided security level bitmask.<br><br>  :param id: the id of the new media object.<br>  :type id: media ID<br>  :param seclevel: the security level bitmask<br>    (default is ``SecLevel.NONE``, see below for details).<br>  :type seclevel: int<br>  :param expires: the UNIX epoch expiration time<br>    (default is ``time() + 7200`` (2 hours from now)).<br>  :type expires: int<br>  :param secure: ``True`` to get a https url.<br>    (default is ``False``).<br>  :type secure: bool<br><br>  The following arguments may be required if the ``SecLevel.DELEGATE``<br>  option is not specified in the seclevel parameter, depending on the other<br>  options. This is not recommanded as it would probably lead to spurious<br>  access denials, mainly due to GeoIP databases discrepancies.<br><br>  :param asnum: the client's autonomous system number (default is ``None``).<br>  :type asnum: str<br>  :param ip: the client's IP adress (default is ``None``).<br>  :type ip: str<br>  :param useragent: the client's HTTP User-Agent header (default is ``None``).<br>  :type useragent: str<br><br>  Example::<br><br>    // Create an embed URL limited only to the<br>    // AS of the end-user and valid for 1 hour<br>    url = cloudkey.media.get_embed_url(id=media['id'],<br>                                    seclevel=SecLevel.DELEGATE | SecLevel.ASNUM,<br>                                    expires=time() + 3600)<br><br>``get_stream_url(id, preset='mp4_h264_aac', seclevel=None,<br>asnum=None, ip=None, useragent=None, expires=None, version=None)``<br><br>  This method returns a signed URL to a Dailymotion Cloud video stream<br>  (see the API reference for details).<br><br>  The generated URL is perishable, and access is granted<br>  based on the provided security level bitmask.<br><br>  :param id: the id of the new media object.<br>  :type id: media ID<br>  :param preset: the desired media asset preset name<br>    (default is ``mp4_h264_aac``).<br>  :type preset: str<br>  :param seclevel: the security level bitmask<br>    (default is ``SecLevel.NONE``, see below for details).<br>  :type seclevel: int<br>  :param expires: the UNIX epoch expiration time<br>    (default is ``time() + 7200`` (2 hours from now)).<br>  :type expires: int<br>  :param download: ``True`` to get the download url<br>    (default is ``False``).<br>  :type download: bool<br>  :param filename: the download url filename.<br>    It overrides the download parameter if set.<br>  :type filename: str<br>  :param version: arbitrary integer inserted in the url for the cache flush.<br>    Use this parameter only if needed, and modify its value only when a cache flush is required.<br>  :type version: int<br>  :param protocol: streaming protocol ('hls', 'rtmp', 'hps' or 'http'). Overrides the `download` parameter if 'http'.<br>  :type protocol: str<br><br>  The following arguments may be required if the ``SecLevel.DELEGATE``<br>  option is not specified in the seclevel parameter, depending on the other<br>  options. This is not recommanded as it would probably lead to spurious<br>  access denials, mainly due to GeoIP databases discrepancies.<br><br>  :param asnum: the client's autonomous system number (default is ``None``).<br>  :type asnum: str<br>  :param ip: the client's IP adress (default is ``None``).<br>  :type ip: str<br>  :param useragent: the client's HTTP User-Agent header (default is ``None``).<br>  :type useragent: str<br><br><br>Quick Tour<br>==========<br><br><br>Security level options<br>-----------------------<br><br>The security level defines the mechanism used by the Dailymotion Cloud<br>architecture to ensure a mediastream URL access will be limited to a single<br>user or a group of users. The different (combinable) options are:<br><br>  - ``SecLevel.NONE``: the URL access is granted to everyone.<br>  - ``SecLevel.ASNUM``: the URL access is granted to the specified<br>    AS number only. AS numbers stands for 'Autonomous System number'<br>    and roughly map groups of IP to telcos and large organizations<br>    on the Internet (each ISP has its own AS number for instance,<br>    Dailyotion's AS number is AS41690).<br>  - ``SecLevel.IP``: the URL access is granted to the specified IP address<br>    only. This option may lead to spurious access denials as some<br>    users are load-balanced behind multiple proxies when accessing<br>    the Internet (this is mostly the case with ISPs and large<br>    organizations).<br>  - ``SecLevel.USERAGENT``: the URL access is granted to users<br>    sending the specified User-Agent HTTP header only.<br>  - ``SecLevel.DELEGATE``: the ASNUM, IP and User-Agent values<br>    are to be gathered at the server side during the first URL<br>    access and don't need to be specified at the client side<br>    beforehand (this is the recommended approach as it will<br>    ensure a 100%-accurate ASNUM recognition).<br>  - ``SecLevel.USEONCE``: the URL access is granted once only<br>    (using this option will probably prevent seeking from working correctly).<br><br>For more information, please refer to the Dailymotion Cloud<br>streams security documentation.<br><br>Exceptions<br>----------<br><br>* RPCException: This is the base of all exceptions<br><br>  * TransportException: When an error occured with the HTTP transport<br>  * SerializerError: When the Request or the Response is not valid JSON<br>  * InvalidRequest: When the Request is not wellformed<br>  * InvalidCall: When the value of the ``call`` argument is invalid<br>  * InvalidObject: When you access an object that doesn't exist<br>  * InvalidMethod: When you access a method that doesn't exist<br>  * InvalidParameter: When a method is called with a invalid or missing parameter<br>  * AuthenticationError: When authentication information is invalid<br><br>    * RateLimitExceeded: When you exceed the number of API calls on<br>      a specific timeframe<br><br>      * ApplicationException: The base class of the following exceptions<br>      * NotFound: When action is requested on an item that doesn't exist<br>      * Exists: When action is requested on an item that already exists<br>      * LimitExceeded: When you reach the maximum number of allowed objects.\n          </div>"}, "last_serial": 787497, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "3e3d250cc4a4efddb25c61a63faee561", "sha256": "9a1cb769539b9b09e1b823712893e2c7b5568c21a67fe0262e320c7687e48ff0"}, "downloads": -1, "filename": "cloudkey-1.2.0-py2.6.egg", "has_sig": false, "md5_digest": "3e3d250cc4a4efddb25c61a63faee561", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 14765, "upload_time": "2011-07-16T02:18:46", "upload_time_iso_8601": "2011-07-16T02:18:46.468221Z", "url": "https://files.pythonhosted.org/packages/8b/1e/62a6b1d97e0f6257aadae7f140c32c40e38ec4519de0e999a0ffa298aafb/cloudkey-1.2.0-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1620a722e6d94db351d030e81113e73", "sha256": "1a5fb3dc52f592d9728ca29be6f93f3eef721ec83e19d970d0710b40fe66c51f"}, "downloads": -1, "filename": "cloudkey-1.2.0.tar.gz", "has_sig": false, "md5_digest": "e1620a722e6d94db351d030e81113e73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8197, "upload_time": "2011-07-16T02:18:46", "upload_time_iso_8601": "2011-07-16T02:18:46.140384Z", "url": "https://files.pythonhosted.org/packages/22/bc/47ad0f891a8d74e9b39d463b2e69d413d502c4f9aaecb63edda9378f6ecc/cloudkey-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "6464bd5abbd6270b95c2c45ab4239218", "sha256": "f3c9aee8f393932c764b49b8b1194c382e488e0e066e898d21971438cc051341"}, "downloads": -1, "filename": "cloudkey-1.2.1-py2.6.egg", "has_sig": false, "md5_digest": "6464bd5abbd6270b95c2c45ab4239218", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 14786, "upload_time": "2011-07-17T16:16:22", "upload_time_iso_8601": "2011-07-17T16:16:22.613911Z", "url": "https://files.pythonhosted.org/packages/5d/d5/d46610ae3d859fd999c219294846c5aaf771d7adfa63c7876ffc1ddef1da/cloudkey-1.2.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5310014f9294363ee2b855aefe1ddf8", "sha256": "c5bd22e8bfea060626acdd70b4618f55133cfe6b8786a8b602435095b688dbcd"}, "downloads": -1, "filename": "cloudkey-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a5310014f9294363ee2b855aefe1ddf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8219, "upload_time": "2011-07-17T16:16:22", "upload_time_iso_8601": "2011-07-17T16:16:22.338481Z", "url": "https://files.pythonhosted.org/packages/25/d8/6734f43a042295347644081b82f6856235313799264bb50665f0f6e76ab3/cloudkey-1.2.1.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "9458060c1bec20773cd4e1b4421b30cb", "sha256": "3d38dbcda760f40ad46c7a955d7af20e9624f43b45fb9c4773464e54c01e2aeb"}, "downloads": -1, "filename": "cloudkey-1.2.6.tar.gz", "has_sig": false, "md5_digest": "9458060c1bec20773cd4e1b4421b30cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9051, "upload_time": "2012-08-13T14:45:25", "upload_time_iso_8601": "2012-08-13T14:45:25.709996Z", "url": "https://files.pythonhosted.org/packages/f5/21/f40ad56f88d1e344f324f8967b2dc15ac957bee947a774fd097ec07d54e9/cloudkey-1.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9458060c1bec20773cd4e1b4421b30cb", "sha256": "3d38dbcda760f40ad46c7a955d7af20e9624f43b45fb9c4773464e54c01e2aeb"}, "downloads": -1, "filename": "cloudkey-1.2.6.tar.gz", "has_sig": false, "md5_digest": "9458060c1bec20773cd4e1b4421b30cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9051, "upload_time": "2012-08-13T14:45:25", "upload_time_iso_8601": "2012-08-13T14:45:25.709996Z", "url": "https://files.pythonhosted.org/packages/f5/21/f40ad56f88d1e344f324f8967b2dc15ac957bee947a774fd097ec07d54e9/cloudkey-1.2.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:49 2020"}