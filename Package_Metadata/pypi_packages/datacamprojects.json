{"info": {"author": "Martin Skarzynski", "author_email": "marskar@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# The `datacamprojects` python package\n\nSkip the boilerplate of scikit-learn machine learning examples.\n\n## Installation\n```bash\npip install datacamprojects\n```\n\n## Usage\n\nIn a shell environment, you can run `datacamprojects`\nwith no arguments to perform a Logistic Regression\non the `digits` dataset.\n\nThis will produce a 10 x 10 confusion matrix\nwith the Accuracy Score at the top.\n\nYou can also pass arguments to datacamprojects at the command line.\n\nFor example, \n```bash\ndatacamprojects -dataset diabetes -model linear_model.Lasso\n# Or\ndatacamprojects -d diabetes -m linear_model.Lasso\n```\nwill run a linear regression with lasso regularization (L1)\non the `diabetes` dataset.\n\nThe `dataset` argument can be any of\nthe following built-in scikit-learn datasets:\n- Regression\n    - `boston`\n    - `diabetes`\n- Classification\n    - `digits`\n    - `iris`\n    - `wine`\n    - `breast_cancer`\n\nThe `model` argument refers to the model type and name from scikit-learn.\nThe first part is the submodule, e.g. \n- `linear_model`\n- `naive_bayes`\n- `ensemble`\n- `svm`\n\nwhile the second is what is actually imported, e.g.\n- `LinearRegression`\n- `GaussianNB`\n- `RandomForestRegressor`\n- `SVC`\n\nSimplify code to a single function call per step:\n```python\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nimport datacamprojects as dcp\n\ndataset = dcp.get_data('digits')\nx_train, x_test, y_train, y_test = dcp.split_data(dataset)\n\nmodel = dcp.get_model(model_type='ensemble',\n                      model_name='RandomForestClassifier')\n\nfit = model.fit(x_train, y_train)\ndcp.pickle_model(filename='digits_rf.pickle', model=fit)\npredictions = fit.predict(x_test)\n\nconfmat = confusion_matrix(y_true=y_test, y_pred=predictions)\naccuracy = accuracy_score(y_true=y_test, y_pred=predictions)\n\ndcp.confusion_matrix_plot(cm=confmat,\n                          acc=accuracy,\n                          filename='digits_rf.png')\n```\n\nOr run a whole pipeline with one function:\n\n```python\nimport datacamprojects as dcp\n\ndcp.classification(dataset='digits',\n                   model_type='ensemble',\n                   model_name='RandomForestClassifier',\n                   pickle_name='digits_rf.pickle',\n                   plot_name='digits_rf.png')\n```\n\nFor inspiration, look at the example pipeline in the\n[pipeline folder](https://github.com/marskar/datacamprojects/tree/master/pipeline)\nof the\n[datacamprojects repo](https://github.com/marskar/datacamprojects).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marskar/datacamprojects", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "datacamprojects", "package_url": "https://pypi.org/project/datacamprojects/", "platform": "", "project_url": "https://pypi.org/project/datacamprojects/", "project_urls": {"Homepage": "https://github.com/marskar/datacamprojects"}, "release_url": "https://pypi.org/project/datacamprojects/0.0.1/", "requires_dist": ["scikit-learn", "matplotlib", "seaborn"], "requires_python": "", "summary": "Tools for the DataCamp Creating Robust Python Projects course", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>The <code>datacamprojects</code> python package</h1>\n<p>Skip the boilerplate of scikit-learn machine learning examples.</p>\n<h2>Installation</h2>\n<pre>pip install datacamprojects\n</pre>\n<h2>Usage</h2>\n<p>In a shell environment, you can run <code>datacamprojects</code>\nwith no arguments to perform a Logistic Regression\non the <code>digits</code> dataset.</p>\n<p>This will produce a 10 x 10 confusion matrix\nwith the Accuracy Score at the top.</p>\n<p>You can also pass arguments to datacamprojects at the command line.</p>\n<p>For example,</p>\n<pre>datacamprojects -dataset diabetes -model linear_model.Lasso\n<span class=\"c1\"># Or</span>\ndatacamprojects -d diabetes -m linear_model.Lasso\n</pre>\n<p>will run a linear regression with lasso regularization (L1)\non the <code>diabetes</code> dataset.</p>\n<p>The <code>dataset</code> argument can be any of\nthe following built-in scikit-learn datasets:</p>\n<ul>\n<li>Regression\n<ul>\n<li><code>boston</code></li>\n<li><code>diabetes</code></li>\n</ul>\n</li>\n<li>Classification\n<ul>\n<li><code>digits</code></li>\n<li><code>iris</code></li>\n<li><code>wine</code></li>\n<li><code>breast_cancer</code></li>\n</ul>\n</li>\n</ul>\n<p>The <code>model</code> argument refers to the model type and name from scikit-learn.\nThe first part is the submodule, e.g.</p>\n<ul>\n<li><code>linear_model</code></li>\n<li><code>naive_bayes</code></li>\n<li><code>ensemble</code></li>\n<li><code>svm</code></li>\n</ul>\n<p>while the second is what is actually imported, e.g.</p>\n<ul>\n<li><code>LinearRegression</code></li>\n<li><code>GaussianNB</code></li>\n<li><code>RandomForestRegressor</code></li>\n<li><code>SVC</code></li>\n</ul>\n<p>Simplify code to a single function call per step:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">confusion_matrix</span><span class=\"p\">,</span> <span class=\"n\">accuracy_score</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datacamprojects</span> <span class=\"k\">as</span> <span class=\"nn\">dcp</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">dcp</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"s1\">'digits'</span><span class=\"p\">)</span>\n<span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">dcp</span><span class=\"o\">.</span><span class=\"n\">split_data</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">dcp</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"n\">model_type</span><span class=\"o\">=</span><span class=\"s1\">'ensemble'</span><span class=\"p\">,</span>\n                      <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s1\">'RandomForestClassifier'</span><span class=\"p\">)</span>\n\n<span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"n\">dcp</span><span class=\"o\">.</span><span class=\"n\">pickle_model</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'digits_rf.pickle'</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">fit</span><span class=\"p\">)</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">fit</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">)</span>\n\n<span class=\"n\">confmat</span> <span class=\"o\">=</span> <span class=\"n\">confusion_matrix</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"o\">=</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"o\">=</span><span class=\"n\">predictions</span><span class=\"p\">)</span>\n<span class=\"n\">accuracy</span> <span class=\"o\">=</span> <span class=\"n\">accuracy_score</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"o\">=</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"o\">=</span><span class=\"n\">predictions</span><span class=\"p\">)</span>\n\n<span class=\"n\">dcp</span><span class=\"o\">.</span><span class=\"n\">confusion_matrix_plot</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">=</span><span class=\"n\">confmat</span><span class=\"p\">,</span>\n                          <span class=\"n\">acc</span><span class=\"o\">=</span><span class=\"n\">accuracy</span><span class=\"p\">,</span>\n                          <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'digits_rf.png'</span><span class=\"p\">)</span>\n</pre>\n<p>Or run a whole pipeline with one function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datacamprojects</span> <span class=\"k\">as</span> <span class=\"nn\">dcp</span>\n\n<span class=\"n\">dcp</span><span class=\"o\">.</span><span class=\"n\">classification</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"s1\">'digits'</span><span class=\"p\">,</span>\n                   <span class=\"n\">model_type</span><span class=\"o\">=</span><span class=\"s1\">'ensemble'</span><span class=\"p\">,</span>\n                   <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s1\">'RandomForestClassifier'</span><span class=\"p\">,</span>\n                   <span class=\"n\">pickle_name</span><span class=\"o\">=</span><span class=\"s1\">'digits_rf.pickle'</span><span class=\"p\">,</span>\n                   <span class=\"n\">plot_name</span><span class=\"o\">=</span><span class=\"s1\">'digits_rf.png'</span><span class=\"p\">)</span>\n</pre>\n<p>For inspiration, look at the example pipeline in the\n<a href=\"https://github.com/marskar/datacamprojects/tree/master/pipeline\" rel=\"nofollow\">pipeline folder</a>\nof the\n<a href=\"https://github.com/marskar/datacamprojects\" rel=\"nofollow\">datacamprojects repo</a>.</p>\n\n          </div>"}, "last_serial": 4411401, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b563cf96ea8a76a725fddd13ac59674e", "sha256": "ca96954f9dcc32567294a848bd8f199f83c1ed702fd39617efed1672bcdbdba3"}, "downloads": -1, "filename": "datacamprojects-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b563cf96ea8a76a725fddd13ac59674e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4599, "upload_time": "2018-10-24T14:46:35", "upload_time_iso_8601": "2018-10-24T14:46:35.828759Z", "url": "https://files.pythonhosted.org/packages/5b/1a/4d723cd837a214a13396f5fcb545b07bf3b3532ac3828d1e6ecdadef52c7/datacamprojects-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d90bab66d434020942dd9414cc6b3a98", "sha256": "93777a733766b35dde7f8752ef3ed0d4397326920deaa3e21b036e2525043a41"}, "downloads": -1, "filename": "datacamprojects-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d90bab66d434020942dd9414cc6b3a98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3792, "upload_time": "2018-10-24T14:46:37", "upload_time_iso_8601": "2018-10-24T14:46:37.381540Z", "url": "https://files.pythonhosted.org/packages/1c/5c/0c5b2c742445816c15f8df04f4af5ffed1a260875afd79736c66c83f222a/datacamprojects-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b563cf96ea8a76a725fddd13ac59674e", "sha256": "ca96954f9dcc32567294a848bd8f199f83c1ed702fd39617efed1672bcdbdba3"}, "downloads": -1, "filename": "datacamprojects-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b563cf96ea8a76a725fddd13ac59674e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4599, "upload_time": "2018-10-24T14:46:35", "upload_time_iso_8601": "2018-10-24T14:46:35.828759Z", "url": "https://files.pythonhosted.org/packages/5b/1a/4d723cd837a214a13396f5fcb545b07bf3b3532ac3828d1e6ecdadef52c7/datacamprojects-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d90bab66d434020942dd9414cc6b3a98", "sha256": "93777a733766b35dde7f8752ef3ed0d4397326920deaa3e21b036e2525043a41"}, "downloads": -1, "filename": "datacamprojects-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d90bab66d434020942dd9414cc6b3a98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3792, "upload_time": "2018-10-24T14:46:37", "upload_time_iso_8601": "2018-10-24T14:46:37.381540Z", "url": "https://files.pythonhosted.org/packages/1c/5c/0c5b2c742445816c15f8df04f4af5ffed1a260875afd79736c66c83f222a/datacamprojects-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:29 2020"}