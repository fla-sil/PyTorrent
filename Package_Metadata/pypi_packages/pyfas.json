{"info": {"author": "Giuseppe Pagliuca", "author_email": "giuseppe.pagliuca@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Documentation Status](https://readthedocs.org/projects/pyfas/badge/?version=latest)](http://pyfas.readthedocs.io/en/latest/?badge=latest)\n[![Binder](http://mybinder.org/badge.svg)](http://mybinder.org:/repo/gpagliuca/pyfas)\n\n# Pyfas\n\nPyfas is a python toolbox for flow assurance engineers.\n\n### Wrappers\nAt this moment in time the toolbox contains wrappers for:\n\n* OLGA \n* Unisim Design\n* GAP \n* Pipesim (not yet available)\n\n**Olga** is the standard de facto for the dynamic simulations of multiphase\nsystems (single pipelines or complex network) in the oil and gas indistry. The\nsimulator has text input and output files; with pyfas you can expose Olga\nresults to python (both trends and profiles) or dump all the results to excel/csv\nfor your post-precessing.\n\n**UnisimDesign** is mainly a process simulator but can be used also to simulate\npipelines or networks in particular providing some external components.\nDifferently from Olga Unisim (unfortunately) does not use text input or\noutput files, the only way to communicate with the software is via a COM interface\nusing pywin32.  Pyfas does not pretend to exposes all the possible\nfunctionalities of Unisim, only a very limited subset is available at the\nmoment.\n\n### Utilities\n\n* Tab files processing\n* Surge volume calculation\n* PIRead functionality\n\n**Tab files** are look-up tables with specific thermodynamic properties at\ngiven pressure and temperature intervals used for flash calculations by dynamic\nsimulators. These files are generated by thermodynamic simulators (like\nPTVTsim) and it is good practice to have a look on this information *before*\na dynamic simulation. With pyfas it is possible to generate 3d plots of all the\nproperties and examine more in detail critical ones. \n\nThe **surge volume calculation** utility returns the surge volume given a drain\nrate and a liquid flowrate time series. Not more than a simple discrete\nintegration.\n\nWith **PIRead** it is possible to retrieve PI values from a PI server.\n\nA live demo should be available here below (no installation required)\n\n[![Binder](http://mybinder.org/badge.svg)](http://mybinder.org:/repo/gpagliuca/pyfas)\n\n# Installation \n`pip install pyfas`\n\n# Examples and documentation\n\n[![Documentation Status](https://readthedocs.org/projects/pyfas/badge/?version=latest)](http://pyfas.readthedocs.io/en/latest/?badge=latest)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gpagliuca/pyfas.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyfas", "package_url": "https://pypi.org/project/pyfas/", "platform": "", "project_url": "https://pypi.org/project/pyfas/", "project_urls": {"Homepage": "https://github.com/gpagliuca/pyfas.git"}, "release_url": "https://pypi.org/project/pyfas/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Toolbox for Flow Assurance engineers", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://pyfas.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a64773af8db67db39114b4ad834bb484caa34b1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796661732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"http://mybinder.org:/repo/gpagliuca/pyfas\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fc4d785962e064a2e013c6bf57d9b39101a123d/687474703a2f2f6d7962696e6465722e6f72672f62616467652e737667\"></a></p>\n<h1>Pyfas</h1>\n<p>Pyfas is a python toolbox for flow assurance engineers.</p>\n<h3>Wrappers</h3>\n<p>At this moment in time the toolbox contains wrappers for:</p>\n<ul>\n<li>OLGA</li>\n<li>Unisim Design</li>\n<li>GAP</li>\n<li>Pipesim (not yet available)</li>\n</ul>\n<p><strong>Olga</strong> is the standard de facto for the dynamic simulations of multiphase\nsystems (single pipelines or complex network) in the oil and gas indistry. The\nsimulator has text input and output files; with pyfas you can expose Olga\nresults to python (both trends and profiles) or dump all the results to excel/csv\nfor your post-precessing.</p>\n<p><strong>UnisimDesign</strong> is mainly a process simulator but can be used also to simulate\npipelines or networks in particular providing some external components.\nDifferently from Olga Unisim (unfortunately) does not use text input or\noutput files, the only way to communicate with the software is via a COM interface\nusing pywin32.  Pyfas does not pretend to exposes all the possible\nfunctionalities of Unisim, only a very limited subset is available at the\nmoment.</p>\n<h3>Utilities</h3>\n<ul>\n<li>Tab files processing</li>\n<li>Surge volume calculation</li>\n<li>PIRead functionality</li>\n</ul>\n<p><strong>Tab files</strong> are look-up tables with specific thermodynamic properties at\ngiven pressure and temperature intervals used for flash calculations by dynamic\nsimulators. These files are generated by thermodynamic simulators (like\nPTVTsim) and it is good practice to have a look on this information <em>before</em>\na dynamic simulation. With pyfas it is possible to generate 3d plots of all the\nproperties and examine more in detail critical ones.</p>\n<p>The <strong>surge volume calculation</strong> utility returns the surge volume given a drain\nrate and a liquid flowrate time series. Not more than a simple discrete\nintegration.</p>\n<p>With <strong>PIRead</strong> it is possible to retrieve PI values from a PI server.</p>\n<p>A live demo should be available here below (no installation required)</p>\n<p><a href=\"http://mybinder.org:/repo/gpagliuca/pyfas\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fc4d785962e064a2e013c6bf57d9b39101a123d/687474703a2f2f6d7962696e6465722e6f72672f62616467652e737667\"></a></p>\n<h1>Installation</h1>\n<p><code>pip install pyfas</code></p>\n<h1>Examples and documentation</h1>\n<p><a href=\"http://pyfas.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a64773af8db67db39114b4ad834bb484caa34b1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796661732f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n\n          </div>"}, "last_serial": 4218300, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "e44580a4799c5251b5899278459b54d1", "sha256": "9d7a70771974657359219d2d17021689e60546e645f119a308356702ca2eb740"}, "downloads": -1, "filename": "pyfas-0.3.1.tar.gz", "has_sig": false, "md5_digest": "e44580a4799c5251b5899278459b54d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9957, "upload_time": "2017-10-25T12:43:04", "upload_time_iso_8601": "2017-10-25T12:43:04.368026Z", "url": "https://files.pythonhosted.org/packages/28/a7/2bcf0e72a4ca74a254ebdf1b8b0d6063009334fea638d5e8de6f5f06d88d/pyfas-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ca4d98975176e7b00724116bffebb54c", "sha256": "ab14bbe0783eb2de4c979f8e40b7b9517bafd2d091576d79562fd9819d7906d1"}, "downloads": -1, "filename": "pyfas-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ca4d98975176e7b00724116bffebb54c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19936, "upload_time": "2018-08-29T09:33:50", "upload_time_iso_8601": "2018-08-29T09:33:50.469329Z", "url": "https://files.pythonhosted.org/packages/b9/b6/05f8cbca21c4d3e31808c663be2f5dff15a50c1c5f0d4101d9d9cb3036a6/pyfas-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "097fa630de722e3a123224d7bfa08b45", "sha256": "a0ba6cb5dadaa5094a4ffb6679d45232a571e071aeae2ce6a8a482b4d37927cc"}, "downloads": -1, "filename": "pyfas-0.4.0.tar.gz", "has_sig": false, "md5_digest": "097fa630de722e3a123224d7bfa08b45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14740, "upload_time": "2018-08-29T09:33:52", "upload_time_iso_8601": "2018-08-29T09:33:52.036603Z", "url": "https://files.pythonhosted.org/packages/1c/94/54dc333acbf42885fedbb67ece1aa2b3d6f326a294eb1c0d491fb7c1899f/pyfas-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca4d98975176e7b00724116bffebb54c", "sha256": "ab14bbe0783eb2de4c979f8e40b7b9517bafd2d091576d79562fd9819d7906d1"}, "downloads": -1, "filename": "pyfas-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ca4d98975176e7b00724116bffebb54c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19936, "upload_time": "2018-08-29T09:33:50", "upload_time_iso_8601": "2018-08-29T09:33:50.469329Z", "url": "https://files.pythonhosted.org/packages/b9/b6/05f8cbca21c4d3e31808c663be2f5dff15a50c1c5f0d4101d9d9cb3036a6/pyfas-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "097fa630de722e3a123224d7bfa08b45", "sha256": "a0ba6cb5dadaa5094a4ffb6679d45232a571e071aeae2ce6a8a482b4d37927cc"}, "downloads": -1, "filename": "pyfas-0.4.0.tar.gz", "has_sig": false, "md5_digest": "097fa630de722e3a123224d7bfa08b45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14740, "upload_time": "2018-08-29T09:33:52", "upload_time_iso_8601": "2018-08-29T09:33:52.036603Z", "url": "https://files.pythonhosted.org/packages/1c/94/54dc333acbf42885fedbb67ece1aa2b3d6f326a294eb1c0d491fb7c1899f/pyfas-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:01 2020"}