{"info": {"author": "Kenzo-Hugo Hillion and Herve Menager", "author_email": "kehillio@pasteur.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# python-cwlgen\n\n[![Build Status](https://travis-ci.org/common-workflow-language/python-cwlgen.svg?branch=master)](https://travis-ci.org/common-workflow-language/python-cwlgen)\n[![codecov](https://codecov.io/gh/common-workflow-language/python-cwlgen/branch/master/graph/badge.svg)](https://codecov.io/gh/common-workflow-language/python-cwlgen)\n[![Documentation Status](https://readthedocs.org/projects/python-cwlgen/badge/?version=latest)](http://python-cwlgen.readthedocs.io/en/latest/?badge=latest)\n[![PyPI version](https://badge.fury.io/py/cwlgen.svg)](https://badge.fury.io/py/cwlgen)\n\nPython-cwlgen is a python library for the generation of CWL programmatically.\nIt supports the generation of CommandLineTool, Workflow and DockerRequirement.\nThe library works for both Python 2.7.12+ and 3.6.0.\n\n------------------------\n\n\n# Common Workflow Language\n\n[Common Workflow Language (CWL)](https://www.commonwl.org/v1.0/index.html) is a language to describe workflows. \nThe [user guide](http://www.commonwl.org/user_guide/01-introduction/index.html)\n gives a gentle explanation of what its goals are, but broadly:\n\n 1. Stop writing bash scripts for long complex jobs.\n 2. Take pipelines anywhere (portability).\n 3. Enforce reproducibility guidelines.\n\nThis python repository is a python wrapper for _most_ of the classes (work in progress), \nallowing you to build the structure of the workflow in Python and have this module generate and export CWL for you.\n\n**Nb:** This doesn't check the logic of Workflows or CommandLineTools for you.  \n[CWLTool](https://github.com/common-workflow-language/cwltool) has a `--validate` mode that you can use.\n\n## Quick-start guide\n\nYou can install python-cwlgen through pip with the following command:\n\n```bash\npip install cwlgen\n```\n\n### How it works?\n\nThis repository contains a number of python classes that mirror the CWL specifications ([Workflow](https://www.commonwl.org/v1.0/Workflow.html)| \n[CommandLineTool](https://www.commonwl.org/v1.0/CommandLineTool.html)). In essence, each class's initializer has all \nof the properties it expects, which may be another object. The classes include the relevant docstrings to give you \ncontext of classes and their properties.\n\nThe `examples/` folder contains some simple examples, however in essence you simply initialize the class you're \ntrying to build. An initializer for a class has all of the properties it expects which may be another object.\n\n\n_Creating a CommandLineTool_\n```python\nimport cwlgen\n\ntool_object = cwlgen.CommandLineTool(tool_id=\"echo-tool\", base_command=\"echo\", label=None, doc=None,\n                 cwl_version=\"v1.0\", stdin=None, stderr=None, stdout=None, path=None)\ntool_object.inputs.append(\n    cwlgen.CommandInputParameter(\"myParamId\", param_type=\"string\", label=None, secondary_files=None, param_format=None,\n                 streamable=None, doc=None, input_binding=None, default=None)\n)\n\n# to get the dictionary representation:\ndict_to_export = tool_object.get_dict()\n\n# to get the string representation (YAML)\nyaml_export = tool_object.export_string()\n\n# print to console\ntool_object.export()\n\n# print to file\ntool_object.export(\"echotool.cwl\")\n```\n\n## References\n\nCWL is developed by an informal, multi-vendor working group consisting of organizations and individuals \naiming to enable scientists to share data analysis workflows. \nThe [CWL project is on Github](https://github.com/common-workflow-language/common-workflow-language).\n\n\n## Known issues\n\n- `SchemaDefRequirement` doesn't parse the `types` subfield into the specific types \n(`InputRecordSchema | InputEnumSchema |  InputArraySchema`), but leaves them as a simple dictionary.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "cwl", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cwlgen-kclhi", "package_url": "https://pypi.org/project/cwlgen-kclhi/", "platform": "", "project_url": "https://pypi.org/project/cwlgen-kclhi/", "project_urls": null, "release_url": "https://pypi.org/project/cwlgen-kclhi/0.4.0/", "requires_dist": ["ruamel.yaml (<0.16.6,>=0.12.4)"], "requires_python": "", "summary": "Generation of CWL programmatically. Available types: Workflow, CommandLineTool and Requirements", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-cwlgen</h1>\n<p><a href=\"https://travis-ci.org/common-workflow-language/python-cwlgen\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa9ed2321a21849773ff2fd952e6000924d89ce0/68747470733a2f2f7472617669732d63692e6f72672f636f6d6d6f6e2d776f726b666c6f772d6c616e67756167652f707974686f6e2d63776c67656e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/common-workflow-language/python-cwlgen\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fdbb3c5201015a11ca1b687b6df2d0294448170/68747470733a2f2f636f6465636f762e696f2f67682f636f6d6d6f6e2d776f726b666c6f772d6c616e67756167652f707974686f6e2d63776c67656e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"http://python-cwlgen.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a63c99727209ecfa3bd48b6f98e82f66bfef48f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707974686f6e2d63776c67656e2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://badge.fury.io/py/cwlgen\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3304cdf212f0d02073a545c2dceb4ca1a302c01b/68747470733a2f2f62616467652e667572792e696f2f70792f63776c67656e2e737667\"></a></p>\n<p>Python-cwlgen is a python library for the generation of CWL programmatically.\nIt supports the generation of CommandLineTool, Workflow and DockerRequirement.\nThe library works for both Python 2.7.12+ and 3.6.0.</p>\n<hr>\n<h1>Common Workflow Language</h1>\n<p><a href=\"https://www.commonwl.org/v1.0/index.html\" rel=\"nofollow\">Common Workflow Language (CWL)</a> is a language to describe workflows.\nThe <a href=\"http://www.commonwl.org/user_guide/01-introduction/index.html\" rel=\"nofollow\">user guide</a>\ngives a gentle explanation of what its goals are, but broadly:</p>\n<ol>\n<li>Stop writing bash scripts for long complex jobs.</li>\n<li>Take pipelines anywhere (portability).</li>\n<li>Enforce reproducibility guidelines.</li>\n</ol>\n<p>This python repository is a python wrapper for <em>most</em> of the classes (work in progress),\nallowing you to build the structure of the workflow in Python and have this module generate and export CWL for you.</p>\n<p><strong>Nb:</strong> This doesn't check the logic of Workflows or CommandLineTools for you.<br>\n<a href=\"https://github.com/common-workflow-language/cwltool\" rel=\"nofollow\">CWLTool</a> has a <code>--validate</code> mode that you can use.</p>\n<h2>Quick-start guide</h2>\n<p>You can install python-cwlgen through pip with the following command:</p>\n<pre>pip install cwlgen\n</pre>\n<h3>How it works?</h3>\n<p>This repository contains a number of python classes that mirror the CWL specifications (<a href=\"https://www.commonwl.org/v1.0/Workflow.html\" rel=\"nofollow\">Workflow</a>|\n<a href=\"https://www.commonwl.org/v1.0/CommandLineTool.html\" rel=\"nofollow\">CommandLineTool</a>). In essence, each class's initializer has all\nof the properties it expects, which may be another object. The classes include the relevant docstrings to give you\ncontext of classes and their properties.</p>\n<p>The <code>examples/</code> folder contains some simple examples, however in essence you simply initialize the class you're\ntrying to build. An initializer for a class has all of the properties it expects which may be another object.</p>\n<p><em>Creating a CommandLineTool</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cwlgen</span>\n\n<span class=\"n\">tool_object</span> <span class=\"o\">=</span> <span class=\"n\">cwlgen</span><span class=\"o\">.</span><span class=\"n\">CommandLineTool</span><span class=\"p\">(</span><span class=\"n\">tool_id</span><span class=\"o\">=</span><span class=\"s2\">\"echo-tool\"</span><span class=\"p\">,</span> <span class=\"n\">base_command</span><span class=\"o\">=</span><span class=\"s2\">\"echo\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                 <span class=\"n\">cwl_version</span><span class=\"o\">=</span><span class=\"s2\">\"v1.0\"</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">tool_object</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">cwlgen</span><span class=\"o\">.</span><span class=\"n\">CommandInputParameter</span><span class=\"p\">(</span><span class=\"s2\">\"myParamId\"</span><span class=\"p\">,</span> <span class=\"n\">param_type</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">secondary_files</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">param_format</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                 <span class=\"n\">streamable</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">input_binding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># to get the dictionary representation:</span>\n<span class=\"n\">dict_to_export</span> <span class=\"o\">=</span> <span class=\"n\">tool_object</span><span class=\"o\">.</span><span class=\"n\">get_dict</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># to get the string representation (YAML)</span>\n<span class=\"n\">yaml_export</span> <span class=\"o\">=</span> <span class=\"n\">tool_object</span><span class=\"o\">.</span><span class=\"n\">export_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># print to console</span>\n<span class=\"n\">tool_object</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># print to file</span>\n<span class=\"n\">tool_object</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s2\">\"echotool.cwl\"</span><span class=\"p\">)</span>\n</pre>\n<h2>References</h2>\n<p>CWL is developed by an informal, multi-vendor working group consisting of organizations and individuals\naiming to enable scientists to share data analysis workflows.\nThe <a href=\"https://github.com/common-workflow-language/common-workflow-language\" rel=\"nofollow\">CWL project is on Github</a>.</p>\n<h2>Known issues</h2>\n<ul>\n<li><code>SchemaDefRequirement</code> doesn't parse the <code>types</code> subfield into the specific types\n(<code>InputRecordSchema | InputEnumSchema | InputArraySchema</code>), but leaves them as a simple dictionary.</li>\n</ul>\n\n          </div>"}, "last_serial": 6939409, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "7fb08e899443238cec40010be12b88ab", "sha256": "095bfc5d5907feb33b69602c866a40ff4adba8d4f4285a1f2b0e6f5ba115723d"}, "downloads": -1, "filename": "cwlgen_kclhi-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7fb08e899443238cec40010be12b88ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23681, "upload_time": "2020-04-02T22:24:36", "upload_time_iso_8601": "2020-04-02T22:24:36.596287Z", "url": "https://files.pythonhosted.org/packages/5a/e6/bb46d7c926b73b7cdd4a5a045ff75c91e11f39428270ece5c180e4d19f1a/cwlgen_kclhi-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a821e1d386f263bfa14fac6b7453a123", "sha256": "5e48254248ac980bf5cfd42950193650836139e233504049005a919a9c66a7c7"}, "downloads": -1, "filename": "cwlgen-kclhi-0.4.0.tar.gz", "has_sig": false, "md5_digest": "a821e1d386f263bfa14fac6b7453a123", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27395, "upload_time": "2020-04-02T22:24:38", "upload_time_iso_8601": "2020-04-02T22:24:38.693454Z", "url": "https://files.pythonhosted.org/packages/46/57/7dc44051fff3c80e3fbdb21b53588e2e48ecef19d7f770a0fdf7859567fb/cwlgen-kclhi-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7fb08e899443238cec40010be12b88ab", "sha256": "095bfc5d5907feb33b69602c866a40ff4adba8d4f4285a1f2b0e6f5ba115723d"}, "downloads": -1, "filename": "cwlgen_kclhi-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7fb08e899443238cec40010be12b88ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23681, "upload_time": "2020-04-02T22:24:36", "upload_time_iso_8601": "2020-04-02T22:24:36.596287Z", "url": "https://files.pythonhosted.org/packages/5a/e6/bb46d7c926b73b7cdd4a5a045ff75c91e11f39428270ece5c180e4d19f1a/cwlgen_kclhi-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a821e1d386f263bfa14fac6b7453a123", "sha256": "5e48254248ac980bf5cfd42950193650836139e233504049005a919a9c66a7c7"}, "downloads": -1, "filename": "cwlgen-kclhi-0.4.0.tar.gz", "has_sig": false, "md5_digest": "a821e1d386f263bfa14fac6b7453a123", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27395, "upload_time": "2020-04-02T22:24:38", "upload_time_iso_8601": "2020-04-02T22:24:38.693454Z", "url": "https://files.pythonhosted.org/packages/46/57/7dc44051fff3c80e3fbdb21b53588e2e48ecef19d7f770a0fdf7859567fb/cwlgen-kclhi-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:11 2020"}