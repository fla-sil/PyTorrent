{"info": {"author": "Abraao Barros", "author_email": "abraaobarros3@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Brasilian Elections Python\n\nAll Brasilian elections from 1998 to 2018, available on the TSE repository, are accessible by this API. Votes, Candidates, and Parties aggregated by Section, UF, Municipal, and Macro region can be easily filtered through a high-performance Athenas SQL database.\n\nCepespPython is a simple python wrapper designed to assist users in accessing the API to [Cepespdata](http://cepesp.io), which facilitates rapid, cleaned, organized and documented access to the [Tribunal Superior Eleitoral's](http://www.tse.jus.br/eleicoes/estatisticas/repositorio-de-dados-eleitorais) data on elections in Brazil from 1998 to 2018.  \n\n## About the CEPESPdata internal API\nThis Python project communicates with our CEPESPdata API. All the data within this application was extracted from the official TSE repository. After the extraction, the data files were post-processed and organized using HiveQL and Pandas (Python library). There is also an internal cache to minimize the response time of all pre-made requests.\n\n### How to install\n\nThe instalation is simple with p\u00c3\u00adp\n\n```{python}\n\npip install electionsBR\n\n``` \n\n\n### Core Functionality\n\nAfter loading the cepesp-R package into your R session, four functions retrieve alternative slices of the processed TSE data. Each returns a data.frame of the requested election details. The following get_* functions don't provide default values for __year__ and __position__. The four functions are:\n\n1. `get_votes` - Details about the number of votes won by each candidate in a specific election. Just specify the position and year of the electoral contest you want data for, and the regional level at which you would like votes to be aggregated. For example, should Presidential election results be returned as national totals for all of Brazil, or separately for each municipality?\n\n``` {.r}\nget_votes(year=2014, position=\"President\", regional_aggregation=\"Municipality\")\n```\n\n2. `get_candidates` - Details about the characteristics of individual candidates competing in an election. Just specify the position and year for which you want data. It's also possible to filter the dataframe to return only the data concerning elected candidates using the option only_elected = TRUE (default option is only_elected = FALSE).\n\n``` {.r}\nget_candidates(year=2014, position=\"President\")\n```\n\n\n3. `get_coalitions` - Details about the parties that constitute each coalition that competed in each election. Just specify the position and year for which you want data.\n\n``` {.r}\nget_coalitions(year=2014, position=\"President\")\n```\n\n4. `get_elections` - The most comprehensive function which merges data on election results, candidates and coalitions to enable more sophisticated analysis. However, the merges performed here remain imperfect due to errors in the underlying TSE data, and so this function should be treated as beta and used with caution. Specify the position and year for which you want data, the regional aggregation at which votes should be summed, and the political aggregation at which votes should be disaggregated - by individual candidates, parties, coalitions, or as total for each electoral unit. The parameter only-elected is also available for this function (see #2 get_candidates).\n\n``` {.r}\nget_elections(year=2014, position=\"President\", regional_aggregation=\"Municipality\", political_aggregation=\"Candidate\")\n```\n\n5. `get_assets` - Returns the details about assets or goods declared by the candidates in each election. The only mandatory parameter to specify is `year`. Optional parameters are `state` and `columns_list`. For example:\n\n``` {.r}\nget_assets(year = 2014, state = \"AC\", columns_list = list('CODIGO_CARGO','NOME_CANDIDATO','CPF_CANDIDATO','VALOR_BEM'))            \n```\n\n6. `get_secretaries` - Returns state, state secretary name, date of entry and exit, party affiliation, and other secretaries' personal data. `name` and `state` are mandatory arguments to be filled.\n\n``` {.r}\nget_secretaries(name = 'joao', state = 'AC')\n```\n\n7. `get_filiates` - Returns the list of filiates by party and state (status corresponding to the last update in November 2018). `state` and/or `party` must be specified as arguments.\n\n``` {.r}\nget_filiates(state = 'SP', party = 'PT')\n```\n\n### Parameters\n\nCheck below the available options for each required parameter:\n\n- year: `1998`, `2000`, `2002`, `2004`, `2006`, `2008`, `2010`, `2012`, `2014`, `2016`, `2018`.\n\n- position: `Councillor`, `Mayor`, `State Deputy`, `Federal Deputy`, `Senator`, `Governor`, `President`.\n\n- regional_aggregation: `Brazil`, `Macro`, `State`, `Meso`, `Micro`, `Municipality`, `Municipality-Zone`, `Zone`, `Electoral Section`.\n\n- political_aggregation: `Candidate`, `Party`, `Coalition`, `Consolidated`.\n\nThe same parameters can also be entered in Portuguese:\n\n- position: `Vereador`, `Prefeito`, `Deputado Estadual`, `Deputado Federal`, `Senador`, `Governador`, `Presidente`.\n\n- regional_aggregation: `Brasil`, `Macro`, `Estado`,`Meso`,`Micro`, `Municipio`, `Municipio-Zona`, `Zona`, `Vota\u00c3\u00a7\u00c3\u00a3o Se\u00c3\u00a7\u00c3\u00a3o`.\n\n- political_aggregation: `Candidato`, `Partido`, `Coaligacao`, `Consolidado`.\n\nDeputies for the Federal District (DF) are included in the database as State Deputies and can be obtained through the argument  `position=\"State Deputy\"`.\n\nNot all electoral contests occur in every year. Feasible requests are:\n\n| Ano      | Cargos Dispon\u00c3\u00adveis (Descri\u00c3\u00a7\u00c3\u00a3o) | \n| ------------------------- |:------|\n| 1998                |   Presidente, Governador, Senador, Deputado Federal, Deputado Estadual    |\n| 2000                |   Prefeito, Vereador    | \n| 2002                |   Presidente, Governador, Senador, Deputado Federal, Deputado Estadual    |\n| 2004                |   Prefeito, Vereador    | \n| 2006                |   Presidente, Governador, Senador, Deputado Federal, Deputado Estadual    |\n| 2008                |   Prefeito, Vereador    | \n| 2010                |   Presidente, Governador, Senador, Deputado Federal, Deputado Estadual    | \n| 2012                |   Prefeito, Vereador    | \n| 2014                |   Presidente, Governador, Senador, Deputado Federal, Deputado Estadual    | \n| 2016                |   Prefeito, Vereador    | \n| 2018                |   Presidente, Governador, Senador, Deputado Federal, Deputado Estadual    |\n\nIt is possible to download **multiple years** in a single request, once the above-mentioned match of years and positions is observed.\n\nExemple:\n\n```{r}\nelectedmayors_2012_2008 <- get_candidates(year = \"2012, 2008\", position = \"Prefeito\", only_elected = T)\n```\n\n### Selecting Variables\nThe default setting is for the function to return all the available variables (columns). To select specific variables and limit the size of the request, you can specify a list of required columns using the `columns_list` argument. The specific columns available depend on the political and regional aggregation selected, so you are advised to refer to the documentation on the available columns at https://github.com/Cepesp-Fgv/tse-dados/wiki/Colunas and to the API documentation at https://github.com/Cepesp-Fgv/cepesp-rest for further details.\n\nExample:\n```{r}\ncolumns <- list(\"NUMERO_CANDIDATO\",\"UF\",\"QTDE_VOTOS\",\"COD_MUN_IBGE\")\n\ndata <- get_votes(year = 2014, position=1, regional_aggregation=\"Municipality\", columns_list=columns)\n```\n\n### Filters\nTo limit the size of the data returned by the API, the request can be filtered to return data on specific units: By state (using the two-letter abbreviation, eg. \"RJ\"); by party (using the two-digit official party number, eg. 45), or by candidate number.\n\nFor example:\n```{r}\ndata <- get_elections(year = 2014, position=1, regional_aggregation=2, political_aggregation=2, state=\"RS\") #To select Rio Grande do Sul \n\ndata <- get_elections(year = 2014, position=1, regional_aggregation=2, political_aggregation=2, party=13) #To select the PT (=13)\n\ndata <- get_elections(year = 2014, position=1, regional_aggregation=2, political_aggregation=2, candidate=2511) #To select candidate 2511\n```\n**Important:** When requesting data with `regional_aggregation=9`, the filter `state` should not be `NULL`\n\n> You can see **more examples** [here](https://github.com/Cepesp-Fgv/cepesp-python/blob/master/examples.ipynb)\n\n### Final Note\n\nRemember that all the data returned by the functions above is filtered for apt candidacies (candidacies approved by TSE). Thus, you may find a slightly smaller number of observations in CepespData/FGV datasets than in the original TSE files. \n\nThe documentation on the filtering process can be found in this link: https://github.com/Cepesp-Fgv/tse-dados/blob/a28c237bcca0270840a39184e5a98322d3443e60/CepespData/etl/process/VotesVotsecProcess.py#L53.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Cepesp-Fgv/cepesp-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "electionsBR", "package_url": "https://pypi.org/project/electionsBR/", "platform": "", "project_url": "https://pypi.org/project/electionsBR/", "project_urls": {"Homepage": "https://github.com/Cepesp-Fgv/cepesp-python"}, "release_url": "https://pypi.org/project/electionsBR/0.0.5/", "requires_dist": ["pandas", "requests"], "requires_python": "", "summary": "A python wrapper to fetch votes from BR elections", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Brasilian Elections Python</h1>\n<p>All Brasilian elections from 1998 to 2018, available on the TSE repository, are accessible by this API. Votes, Candidates, and Parties aggregated by Section, UF, Municipal, and Macro region can be easily filtered through a high-performance Athenas SQL database.</p>\n<p>CepespPython is a simple python wrapper designed to assist users in accessing the API to <a href=\"http://cepesp.io\" rel=\"nofollow\">Cepespdata</a>, which facilitates rapid, cleaned, organized and documented access to the <a href=\"http://www.tse.jus.br/eleicoes/estatisticas/repositorio-de-dados-eleitorais\" rel=\"nofollow\">Tribunal Superior Eleitoral's</a> data on elections in Brazil from 1998 to 2018.</p>\n<h2>About the CEPESPdata internal API</h2>\n<p>This Python project communicates with our CEPESPdata API. All the data within this application was extracted from the official TSE repository. After the extraction, the data files were post-processed and organized using HiveQL and Pandas (Python library). There is also an internal cache to minimize the response time of all pre-made requests.</p>\n<h3>How to install</h3>\n<p>The instalation is simple with p\u00c3\u00adp</p>\n<pre>pip install electionsBR\n</pre>\n<h3>Core Functionality</h3>\n<p>After loading the cepesp-R package into your R session, four functions retrieve alternative slices of the processed TSE data. Each returns a data.frame of the requested election details. The following get_* functions don't provide default values for <strong>year</strong> and <strong>position</strong>. The four functions are:</p>\n<ol>\n<li><code>get_votes</code> - Details about the number of votes won by each candidate in a specific election. Just specify the position and year of the electoral contest you want data for, and the regional level at which you would like votes to be aggregated. For example, should Presidential election results be returned as national totals for all of Brazil, or separately for each municipality?</li>\n</ol>\n<pre>get_votes(year=2014, position=\"President\", regional_aggregation=\"Municipality\")\n</pre>\n<ol>\n<li><code>get_candidates</code> - Details about the characteristics of individual candidates competing in an election. Just specify the position and year for which you want data. It's also possible to filter the dataframe to return only the data concerning elected candidates using the option only_elected = TRUE (default option is only_elected = FALSE).</li>\n</ol>\n<pre>get_candidates(year=2014, position=\"President\")\n</pre>\n<ol>\n<li><code>get_coalitions</code> - Details about the parties that constitute each coalition that competed in each election. Just specify the position and year for which you want data.</li>\n</ol>\n<pre>get_coalitions(year=2014, position=\"President\")\n</pre>\n<ol>\n<li><code>get_elections</code> - The most comprehensive function which merges data on election results, candidates and coalitions to enable more sophisticated analysis. However, the merges performed here remain imperfect due to errors in the underlying TSE data, and so this function should be treated as beta and used with caution. Specify the position and year for which you want data, the regional aggregation at which votes should be summed, and the political aggregation at which votes should be disaggregated - by individual candidates, parties, coalitions, or as total for each electoral unit. The parameter only-elected is also available for this function (see #2 get_candidates).</li>\n</ol>\n<pre>get_elections(year=2014, position=\"President\", regional_aggregation=\"Municipality\", political_aggregation=\"Candidate\")\n</pre>\n<ol>\n<li><code>get_assets</code> - Returns the details about assets or goods declared by the candidates in each election. The only mandatory parameter to specify is <code>year</code>. Optional parameters are <code>state</code> and <code>columns_list</code>. For example:</li>\n</ol>\n<pre>get_assets(year = 2014, state = \"AC\", columns_list = list('CODIGO_CARGO','NOME_CANDIDATO','CPF_CANDIDATO','VALOR_BEM'))            \n</pre>\n<ol>\n<li><code>get_secretaries</code> - Returns state, state secretary name, date of entry and exit, party affiliation, and other secretaries' personal data. <code>name</code> and <code>state</code> are mandatory arguments to be filled.</li>\n</ol>\n<pre>get_secretaries(name = 'joao', state = 'AC')\n</pre>\n<ol>\n<li><code>get_filiates</code> - Returns the list of filiates by party and state (status corresponding to the last update in November 2018). <code>state</code> and/or <code>party</code> must be specified as arguments.</li>\n</ol>\n<pre>get_filiates(state = 'SP', party = 'PT')\n</pre>\n<h3>Parameters</h3>\n<p>Check below the available options for each required parameter:</p>\n<ul>\n<li>\n<p>year: <code>1998</code>, <code>2000</code>, <code>2002</code>, <code>2004</code>, <code>2006</code>, <code>2008</code>, <code>2010</code>, <code>2012</code>, <code>2014</code>, <code>2016</code>, <code>2018</code>.</p>\n</li>\n<li>\n<p>position: <code>Councillor</code>, <code>Mayor</code>, <code>State Deputy</code>, <code>Federal Deputy</code>, <code>Senator</code>, <code>Governor</code>, <code>President</code>.</p>\n</li>\n<li>\n<p>regional_aggregation: <code>Brazil</code>, <code>Macro</code>, <code>State</code>, <code>Meso</code>, <code>Micro</code>, <code>Municipality</code>, <code>Municipality-Zone</code>, <code>Zone</code>, <code>Electoral Section</code>.</p>\n</li>\n<li>\n<p>political_aggregation: <code>Candidate</code>, <code>Party</code>, <code>Coalition</code>, <code>Consolidated</code>.</p>\n</li>\n</ul>\n<p>The same parameters can also be entered in Portuguese:</p>\n<ul>\n<li>\n<p>position: <code>Vereador</code>, <code>Prefeito</code>, <code>Deputado Estadual</code>, <code>Deputado Federal</code>, <code>Senador</code>, <code>Governador</code>, <code>Presidente</code>.</p>\n</li>\n<li>\n<p>regional_aggregation: <code>Brasil</code>, <code>Macro</code>, <code>Estado</code>,<code>Meso</code>,<code>Micro</code>, <code>Municipio</code>, <code>Municipio-Zona</code>, <code>Zona</code>, <code>Vota\u00c3\u00a7\u00c3\u00a3o Se\u00c3\u00a7\u00c3\u00a3o</code>.</p>\n</li>\n<li>\n<p>political_aggregation: <code>Candidato</code>, <code>Partido</code>, <code>Coaligacao</code>, <code>Consolidado</code>.</p>\n</li>\n</ul>\n<p>Deputies for the Federal District (DF) are included in the database as State Deputies and can be obtained through the argument  <code>position=\"State Deputy\"</code>.</p>\n<p>Not all electoral contests occur in every year. Feasible requests are:</p>\n<table>\n<thead>\n<tr>\n<th>Ano</th>\n<th align=\"left\">Cargos Dispon\u00c3\u00adveis (Descri\u00c3\u00a7\u00c3\u00a3o)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1998</td>\n<td align=\"left\">Presidente, Governador, Senador, Deputado Federal, Deputado Estadual</td>\n</tr>\n<tr>\n<td>2000</td>\n<td align=\"left\">Prefeito, Vereador</td>\n</tr>\n<tr>\n<td>2002</td>\n<td align=\"left\">Presidente, Governador, Senador, Deputado Federal, Deputado Estadual</td>\n</tr>\n<tr>\n<td>2004</td>\n<td align=\"left\">Prefeito, Vereador</td>\n</tr>\n<tr>\n<td>2006</td>\n<td align=\"left\">Presidente, Governador, Senador, Deputado Federal, Deputado Estadual</td>\n</tr>\n<tr>\n<td>2008</td>\n<td align=\"left\">Prefeito, Vereador</td>\n</tr>\n<tr>\n<td>2010</td>\n<td align=\"left\">Presidente, Governador, Senador, Deputado Federal, Deputado Estadual</td>\n</tr>\n<tr>\n<td>2012</td>\n<td align=\"left\">Prefeito, Vereador</td>\n</tr>\n<tr>\n<td>2014</td>\n<td align=\"left\">Presidente, Governador, Senador, Deputado Federal, Deputado Estadual</td>\n</tr>\n<tr>\n<td>2016</td>\n<td align=\"left\">Prefeito, Vereador</td>\n</tr>\n<tr>\n<td>2018</td>\n<td align=\"left\">Presidente, Governador, Senador, Deputado Federal, Deputado Estadual</td>\n</tr></tbody></table>\n<p>It is possible to download <strong>multiple years</strong> in a single request, once the above-mentioned match of years and positions is observed.</p>\n<p>Exemple:</p>\n<pre>electedmayors_2012_2008 &lt;- get_candidates(year = \"2012, 2008\", position = \"Prefeito\", only_elected = T)\n</pre>\n<h3>Selecting Variables</h3>\n<p>The default setting is for the function to return all the available variables (columns). To select specific variables and limit the size of the request, you can specify a list of required columns using the <code>columns_list</code> argument. The specific columns available depend on the political and regional aggregation selected, so you are advised to refer to the documentation on the available columns at <a href=\"https://github.com/Cepesp-Fgv/tse-dados/wiki/Colunas\" rel=\"nofollow\">https://github.com/Cepesp-Fgv/tse-dados/wiki/Colunas</a> and to the API documentation at <a href=\"https://github.com/Cepesp-Fgv/cepesp-rest\" rel=\"nofollow\">https://github.com/Cepesp-Fgv/cepesp-rest</a> for further details.</p>\n<p>Example:</p>\n<pre>columns &lt;- list(\"NUMERO_CANDIDATO\",\"UF\",\"QTDE_VOTOS\",\"COD_MUN_IBGE\")\n\ndata &lt;- get_votes(year = 2014, position=1, regional_aggregation=\"Municipality\", columns_list=columns)\n</pre>\n<h3>Filters</h3>\n<p>To limit the size of the data returned by the API, the request can be filtered to return data on specific units: By state (using the two-letter abbreviation, eg. \"RJ\"); by party (using the two-digit official party number, eg. 45), or by candidate number.</p>\n<p>For example:</p>\n<pre>data &lt;- get_elections(year = 2014, position=1, regional_aggregation=2, political_aggregation=2, state=\"RS\") #To select Rio Grande do Sul \n\ndata &lt;- get_elections(year = 2014, position=1, regional_aggregation=2, political_aggregation=2, party=13) #To select the PT (=13)\n\ndata &lt;- get_elections(year = 2014, position=1, regional_aggregation=2, political_aggregation=2, candidate=2511) #To select candidate 2511\n</pre>\n<p><strong>Important:</strong> When requesting data with <code>regional_aggregation=9</code>, the filter <code>state</code> should not be <code>NULL</code></p>\n<blockquote>\n<p>You can see <strong>more examples</strong> <a href=\"https://github.com/Cepesp-Fgv/cepesp-python/blob/master/examples.ipynb\" rel=\"nofollow\">here</a></p>\n</blockquote>\n<h3>Final Note</h3>\n<p>Remember that all the data returned by the functions above is filtered for apt candidacies (candidacies approved by TSE). Thus, you may find a slightly smaller number of observations in CepespData/FGV datasets than in the original TSE files.</p>\n<p>The documentation on the filtering process can be found in this link: <a href=\"https://github.com/Cepesp-Fgv/tse-dados/blob/a28c237bcca0270840a39184e5a98322d3443e60/CepespData/etl/process/VotesVotsecProcess.py#L53\" rel=\"nofollow\">https://github.com/Cepesp-Fgv/tse-dados/blob/a28c237bcca0270840a39184e5a98322d3443e60/CepespData/etl/process/VotesVotsecProcess.py#L53</a>.</p>\n\n          </div>"}, "last_serial": 6529786, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "a999190465752067732f43f23eb0bbcc", "sha256": "b2373da41c7f3bbe76262f226600e9954e3f04f169b1aca240a33bdc52046c3e"}, "downloads": -1, "filename": "electionsBR-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a999190465752067732f43f23eb0bbcc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9568, "upload_time": "2020-01-28T00:49:41", "upload_time_iso_8601": "2020-01-28T00:49:41.275467Z", "url": "https://files.pythonhosted.org/packages/09/d6/4c921e14ea8f17f30332b11c10cbffea865b6606883060fec90b1fb38f8a/electionsBR-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "258768c75d7153ad0deb29df52e41061", "sha256": "f1a8743034930b423b931a8e3438f9e910f0e33a89c4b792a0d8177f02cb80c8"}, "downloads": -1, "filename": "electionsBR-0.0.3.tar.gz", "has_sig": false, "md5_digest": "258768c75d7153ad0deb29df52e41061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9158, "upload_time": "2020-01-28T00:49:42", "upload_time_iso_8601": "2020-01-28T00:49:42.747796Z", "url": "https://files.pythonhosted.org/packages/d1/d3/bb566de98b08c444519b10986b82f328563ac00ab26787f0cfbd1c975c93/electionsBR-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a5336609c3102cef8648eab4c686e820", "sha256": "e8be45b9aba7252eeecc7f5953bbc859684b6e0f81aff593e3d25440ec21c0ff"}, "downloads": -1, "filename": "electionsBR-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a5336609c3102cef8648eab4c686e820", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9551, "upload_time": "2020-01-28T00:54:56", "upload_time_iso_8601": "2020-01-28T00:54:56.143587Z", "url": "https://files.pythonhosted.org/packages/7e/95/9a822836b5f4994a3cbfc8913b123e914b8e0bef8b15d6d0228dfc542d5b/electionsBR-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1958c03d41f767e5fc05cabc3c2ec99a", "sha256": "3dd3141e0283f92513f629b7f6b068b70338e9fbd7d999aa5beac452c1ff3127"}, "downloads": -1, "filename": "electionsBR-0.0.4.tar.gz", "has_sig": false, "md5_digest": "1958c03d41f767e5fc05cabc3c2ec99a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9138, "upload_time": "2020-01-28T00:54:59", "upload_time_iso_8601": "2020-01-28T00:54:59.246082Z", "url": "https://files.pythonhosted.org/packages/2f/fe/6efa53c7ce5d6613096745bf2cbad46e23544b40c4637187741f8e97f9fd/electionsBR-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "94f9c217312d324ecb70ea9d9a3e401c", "sha256": "df71702f5f66b37f7c9ae203a77eb57bcf1f3316e8a8a1f3b94b07887e7bb3d3"}, "downloads": -1, "filename": "electionsBR-0.0.5-py3.6.egg", "has_sig": false, "md5_digest": "94f9c217312d324ecb70ea9d9a3e401c", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 16604, "upload_time": "2020-01-28T01:32:30", "upload_time_iso_8601": "2020-01-28T01:32:30.785355Z", "url": "https://files.pythonhosted.org/packages/b6/0d/11ef9ad909fd66dbaa1f32797914b8b0edd940028bfdaf160987327f7a1b/electionsBR-0.0.5-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7219fc1ba85b116d646dcb6e556caa5e", "sha256": "74813a296158813c7396b7f586286c779e81cc14c31de9547f4296062b3d6ce8"}, "downloads": -1, "filename": "electionsBR-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "7219fc1ba85b116d646dcb6e556caa5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9587, "upload_time": "2020-01-28T01:32:27", "upload_time_iso_8601": "2020-01-28T01:32:27.132715Z", "url": "https://files.pythonhosted.org/packages/cc/b8/7fff7f59fa41ad88100105a45155ceb38cff1ec8682977531fdf80d6fb39/electionsBR-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01b7135e17dff749a4c925a154ecb041", "sha256": "2f699e8d0d2e6d61b73583a8e97c0d9b28dc3cf439e36aec6828a26b215264a9"}, "downloads": -1, "filename": "electionsBR-0.0.5.tar.gz", "has_sig": false, "md5_digest": "01b7135e17dff749a4c925a154ecb041", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9183, "upload_time": "2020-01-28T01:32:32", "upload_time_iso_8601": "2020-01-28T01:32:32.696011Z", "url": "https://files.pythonhosted.org/packages/7b/d3/da68c171f16dbc515a19ed2e6c9c1dcdcaf4b447ca5275117ed30bed826f/electionsBR-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "94f9c217312d324ecb70ea9d9a3e401c", "sha256": "df71702f5f66b37f7c9ae203a77eb57bcf1f3316e8a8a1f3b94b07887e7bb3d3"}, "downloads": -1, "filename": "electionsBR-0.0.5-py3.6.egg", "has_sig": false, "md5_digest": "94f9c217312d324ecb70ea9d9a3e401c", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 16604, "upload_time": "2020-01-28T01:32:30", "upload_time_iso_8601": "2020-01-28T01:32:30.785355Z", "url": "https://files.pythonhosted.org/packages/b6/0d/11ef9ad909fd66dbaa1f32797914b8b0edd940028bfdaf160987327f7a1b/electionsBR-0.0.5-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7219fc1ba85b116d646dcb6e556caa5e", "sha256": "74813a296158813c7396b7f586286c779e81cc14c31de9547f4296062b3d6ce8"}, "downloads": -1, "filename": "electionsBR-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "7219fc1ba85b116d646dcb6e556caa5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9587, "upload_time": "2020-01-28T01:32:27", "upload_time_iso_8601": "2020-01-28T01:32:27.132715Z", "url": "https://files.pythonhosted.org/packages/cc/b8/7fff7f59fa41ad88100105a45155ceb38cff1ec8682977531fdf80d6fb39/electionsBR-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01b7135e17dff749a4c925a154ecb041", "sha256": "2f699e8d0d2e6d61b73583a8e97c0d9b28dc3cf439e36aec6828a26b215264a9"}, "downloads": -1, "filename": "electionsBR-0.0.5.tar.gz", "has_sig": false, "md5_digest": "01b7135e17dff749a4c925a154ecb041", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9183, "upload_time": "2020-01-28T01:32:32", "upload_time_iso_8601": "2020-01-28T01:32:32.696011Z", "url": "https://files.pythonhosted.org/packages/7b/d3/da68c171f16dbc515a19ed2e6c9c1dcdcaf4b447ca5275117ed30bed826f/electionsBR-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:55 2020"}