{"info": {"author": "Brian Abelson", "author_email": "brian@newslynx.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "pyinit\n======\n\n``pyinit`` is a command line tool for generating skeletons of python\npackages from a directory of ``jinja`` templates.\n\nThe interface is easy:\n\n::\n\n    pyinit -p my-new-project -g my-github-user-name\n\nThis will initialize a highly-opinionated github repository, with your\ncommand line args inserted in relevant places throughout the following\ndirectory tree:\n\n::\n\n    my-new-project\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 build_docs.sh\n    \u251c\u2500\u2500 docs\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 _static\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 logo.png\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 _themes\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 flask_theme_support.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kr\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 autotoc.html\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 layout.html\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 relations.html\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 sidebarlogo.html\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 static\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 flasky.css_t\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 theme.conf\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 conf.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 index.rst\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 install.rst\n    \u251c\u2500\u2500 requirements.txt\n    \u251c\u2500\u2500 setup.py\n    \u251c\u2500\u2500 src\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 tests\n        \u251c\u2500\u2500 README.md\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 fixtures\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n        \u2514\u2500\u2500 tests.py\n\nThis default template comes with ``nose`` for testing, ``sphinx`` for\ndocs (with Kenneth Reitz's Template), ``travis-ci`` for continuous\nintegration and ``pandoc`` for rendering your markdown README.md on\npy-pi.\n\nYou can build and serve the docs by running ``build.sh``.\n\nCustomizing\n-----------\n\nIf you'd like, you can also create your own folder of ``jinja``\ntemplates and pass it in as follows:\n\n::\n\n    pyinit -p my-new-project -g my-github-user-name -t path/to/my-template/\n\nYou can also pass in a series of custom json key-value pairs if you want\nto add extra context:\n\n::\n\n    pyinit -p my-new-project -g my-github-user-name -t my-template/ -k \"{'key1':'value1', 'key2':'value2'}\"\n\nThese values can be inserted anywhere in your custom templates using\nstandard ``jinja`` syntax:\n\n::\n\n    {{ key1 }}, {{ key2 }}\n\nHeres the full cli specification:\n\n::\n\n    usage: pyinit [-h] [-p PROJECT_NAME] [-g GITHUB_USER] [-a AUTHOR] [-e EMAIL]\n                  [-d DESCRIPTION] [-t TEMPLATE_PATH] [-k KWARGS]\n\n    Initialize a python repository.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -p PROJECT_NAME, --project-name PROJECT_NAME\n                            The name of your project.\n      -g GITHUB_USER, --github-user GITHUB_USER\n                            Your github user name.\n      -a AUTHOR, --author AUTHOR\n                            Your name.\n      -e EMAIL, --email EMAIL\n                            Your email.\n      -d DESCRIPTION, --description DESCRIPTION\n                            The projects' description.\n      -t TEMPLATE_PATH, --template TEMPLATE_PATH\n                            A directory of custom templates\n      -k KWARGS, --kwargs KWARGS\n                            A json string or a .json / .yml filepath of custom\n                            kwargs\n\nInstallation\n------------\n\n::\n\n    pip install pyinit\n\nTODO: \\* Don't rely on ``os.system()`` \\* create repository on\n``github`` \\* activate virtualenv \\* link ``README.md`` -> index.rst for\ndocs. \\* webhooks for read the docs / s3 upload for data / binaries.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/newslynx/pyinit", "keywords": "", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "py-init", "package_url": "https://pypi.org/project/py-init/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/py-init/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/newslynx/pyinit"}, "release_url": "https://pypi.org/project/py-init/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "An opinionated utility for creating python projects.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>pyinit</tt> is a command line tool for generating skeletons of python\npackages from a directory of <tt>jinja</tt> templates.</p>\n<p>The interface is easy:</p>\n<pre>pyinit -p my-new-project -g my-github-user-name\n</pre>\n<p>This will initialize a highly-opinionated github repository, with your\ncommand line args inserted in relevant places throughout the following\ndirectory tree:</p>\n<pre>my-new-project\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 build_docs.sh\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 _static\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 logo.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 _themes\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 flask_theme_support.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kr\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 autotoc.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 layout.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 relations.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 sidebarlogo.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 flasky.css_t\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 theme.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.rst\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 install.rst\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 fixtures\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n    \u2514\u2500\u2500 tests.py\n</pre>\n<p>This default template comes with <tt>nose</tt> for testing, <tt>sphinx</tt> for\ndocs (with Kenneth Reitz\u2019s Template), <tt><span class=\"pre\">travis-ci</span></tt> for continuous\nintegration and <tt>pandoc</tt> for rendering your markdown README.md on\npy-pi.</p>\n<p>You can build and serve the docs by running <tt>build.sh</tt>.</p>\n<div id=\"customizing\">\n<h2>Customizing</h2>\n<p>If you\u2019d like, you can also create your own folder of <tt>jinja</tt>\ntemplates and pass it in as follows:</p>\n<pre>pyinit -p my-new-project -g my-github-user-name -t path/to/my-template/\n</pre>\n<p>You can also pass in a series of custom json key-value pairs if you want\nto add extra context:</p>\n<pre>pyinit -p my-new-project -g my-github-user-name -t my-template/ -k \"{'key1':'value1', 'key2':'value2'}\"\n</pre>\n<p>These values can be inserted anywhere in your custom templates using\nstandard <tt>jinja</tt> syntax:</p>\n<pre>{{ key1 }}, {{ key2 }}\n</pre>\n<p>Heres the full cli specification:</p>\n<pre>usage: pyinit [-h] [-p PROJECT_NAME] [-g GITHUB_USER] [-a AUTHOR] [-e EMAIL]\n              [-d DESCRIPTION] [-t TEMPLATE_PATH] [-k KWARGS]\n\nInitialize a python repository.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PROJECT_NAME, --project-name PROJECT_NAME\n                        The name of your project.\n  -g GITHUB_USER, --github-user GITHUB_USER\n                        Your github user name.\n  -a AUTHOR, --author AUTHOR\n                        Your name.\n  -e EMAIL, --email EMAIL\n                        Your email.\n  -d DESCRIPTION, --description DESCRIPTION\n                        The projects' description.\n  -t TEMPLATE_PATH, --template TEMPLATE_PATH\n                        A directory of custom templates\n  -k KWARGS, --kwargs KWARGS\n                        A json string or a .json / .yml filepath of custom\n                        kwargs\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install pyinit\n</pre>\n<p>TODO: * Don\u2019t rely on <tt>os.system()</tt> * create repository on\n<tt>github</tt> * activate virtualenv * link <tt>README.md</tt> -&gt; index.rst for\ndocs. * webhooks for read the docs / s3 upload for data / binaries.</p>\n</div>\n\n          </div>"}, "last_serial": 1116728, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 03:04:01 2020"}