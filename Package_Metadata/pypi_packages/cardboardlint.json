{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. image:: https://travis-ci.org/theochem/cardboardlint.svg?branch=master\n    :target: https://travis-ci.org/theochem/cardboardlint\n.. image:: https://anaconda.org/theochem/cardboardlint/badges/version.svg\n    :target: https://anaconda.org/theochem/cardboardlint\n.. image:: https://codecov.io/gh/theochem/cardboardlint/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/theochem/cardboardlint\n.. image:: https://img.shields.io/pypi/v/cardboardlint.svg\n    :target: https://pypi.org/project/cardboardlint\n.. image:: https://img.shields.io/pypi/pyversions/cardboardlint.svg\n    :target: https://pypi.org/project/cardboardlint\n.. image:: https://img.shields.io/github/release/theochem/cardboardlint.svg\n    :target: https://github.com/theochem/cardboardlint/releases\n\n\nIntroduction\n-------------\n\nCardboardlint is a cheap lint solution for pull requests.\n\nIt is a non-hosted and customizable tool similar to commercial services like:\n\n- Hound CI: https://houndci.com/\n- Stickler CI: https://stickler-ci.com/\n- landscape.io: https://landscape.io/\n- ...\n\nFor more advanced analysis, one could use Coverty Scan.\n(https://scan.coverity.com/)\n\nCardboardlint wraps a collection of linters, intended to be used on a project\nin a Git repository. Cardboardlint is able to report just those messages related\nto lines that have changed in your development branch, compared to another\ncommit, e.g. the HEAD of the master branch. This is intended to make life easier\nfor contributors to a project: in their pull requests, they will only see\nlinting issues related to the code they have touched. For some linters,\ncardboardlint also supports automatic fixes of linting issues, optionally\nrestricted to code that has changed in your development branch.\n\nSome example projects that use Cardboardlint:\n\n- Cardboardlint, obviously\n- Roberto: https://github.com/theochem/roberto (Cardboardlint also uses Roberto.)\n- IOData: https://github.com/theochem/iodata\n- CellCutoff: https://github.com/theochem/cellcutoff\n- CGrid: https://github.com/theochem/cgrid\n\n\nUsage\n-----\n\n- Install cardboardlint, which requires python 3.6 or 3.7 and PyYaml. You must\n  have Python 3 installed, PyYaml will be installed automatically for you with\n  the instructions below.\n\n  .. code:: bash\n\n      # Install cardboardlint with pip. Any of the following that works for you\n      # is fine:\n      pip install cardboardlint\n      pip install cardboardlint --user\n      python3 -m pip install cardboardlint\n      python3 -m pip install cardboardlint --user\n      # Or install cardboardlint with conda:\n      conda install theochem::cardboardlint\n\n- Add a ``.cardboardlint.yml`` to the root of your source tree. It should at least contain\n  a ``linters`` section with a list of linters, e.g.\n\n  .. code:: yaml\n\n      linters:\n      - pylint:\n          pylintrc: tools/your_custom_pylintrc\n      - cppcheck:\n      - import:\n      ...\n\n  A list of supported linters is easily deduced from the source code. Just look into\n  the ``cardboardlint/linter_*.py`` files. Each of these files has a module docstring with\n  some explanations and a DEFAULT_CONFIG dictionary with the available configuration vars.\n\n  You can repeat any linter multiple times with different configuration settings. This can\n  be useful, e.g. when unit tests must be linted differently than the rest of the source\n  code. This is a simple example where unit tests have a different pylint config:\n\n  .. code:: yaml\n\n      pre_filefilter: ['+ tools/demo/*.py', '- tools/*', '+ *']\n\n      linters:\n      - pylint:\n          pylintrc: tools/pylintrc\n          filefilter: ['- test_*.py', '+ *.py']\n          exclude:\n      - pylint:\n          pylintrc: tools/pylintrc_tests\n          filefilter: ['+ test_*.py']\n      - import:\n      ...\n\n\n  When cardboardlint starts, it makes a list of files not ignored by\n  git in the current repository. These filenames are first filtered by a\n  so-called ``pre_filefilter``. Files that pass the ``pre_filefilter`` are then\n  tested with linter-specific ``filefilters`` to end up with a list of files to\n  be checked by a given linter.\n\n  A ``pre_filefilter`` or ``filefilter`` consists of a list of rules to test if\n  a file should be considered for linting or not. Each rule starts with a\n  possible outcome, ``+`` (include) or a ``-`` (exclude), followed by a glob\n  pattern. At the moment, the pattern ignores the presence of directory\n  separators and treats the complete path as a single string on which the\n  pattern is tested, using Pythons ``fnmatch`` builtin module. The rules are\n  tested in order and when a pattern matches, the corresponding decision is made\n  (include and exclude), without considering subsequent rules. When no patterns\n  give a match, the file is excluded.\n\n  The following tricks might be useful:\n\n  - If you would like to include files that did not match any pattern, add\n    ``'+ *'`` as last pattern, which is often useful for the ``pre_filefilter``.\n\n  - If you would like to include all python files, in all directories, use\n    ``'+ *.py'``. The wildcard will also match directories containing the Python\n    file. For example it would match ``a/b`` in the path ``a/b.py``.\n\n- Install the linters you intend to run (either locally or in your CI environment). These\n  dependencies are not installed automatically because you may not want to use all of\n  them.\n\n  Conda packages for all supported linters can be found in the main conda\n  channels an in conda-forge (https://anaconda.org/conda-forge). We have added\n  packages to conda-forge for ``cppcheck`` and ``cpplint``. All other linters\n  were already available. To install all of them, we can recommend the following\n  commands:\n\n  .. code:: bash\n\n    # Add conda-forga channel with lower priority as the default channels. This\n    # prevents your conda env from being flooded by conda-forga packages.\n    conda config --append channels conda-forge\n    # Install all linters for which cardboardlint has wrappers:\n    conda install pycodestyle pydocstyle cppcheck cpplint yamllint flake8 \\\n                  doxygen pylint autopep8, yapf, black\n\n- Run the cardboardlinter, which can be done in several ways:\n\n  .. code:: bash\n\n    # runs all linters and use multiple cpus\n    cardboardlinter -n auto\n    # runs all linters and only shows messages for changes relative to master\n    cardboardlinter -r master\n    # run only static linters\n    cardboardlinter -f static\n    # run only dynamic linters, which require in-place build\n    cardboardlinter -f dynamic\n\n    # run fixers, which automaticaly solve trivial problems\n    cardboardlinter -F\n    # run fixers, which automaticaly solve trivial problems, only on those\n    # lines that have changed w.r.t. the master branch.\n    cardboardlinter -F -r master\n\n- Usage in CI:\n\n  - Travis-CI (in ``.travis.yml``). This will only report messages for lines that have\n    changed in the PR.\n\n    .. code:: yaml\n\n        install:\n        # Install the latest cardboardlinter\n        - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then\n            pip install --upgrade cardboardlint\n          fi\n\n        script:\n        # Run the cardboardlinter, in case of pull requests\n        - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then\n            cardboardlinter --refspec $TRAVIS_BRANCH -n auto;\n          fi\n\n  - One can also use Roberto to drive the entire build+test+package workflow,\n    which includes linting with Cardboardlint.\n    See https://theochem.github.io/roberto/\n\n\nChange log\n----------\n\n- Version 1.2.1 April 14, 2019\n\n  - More verbose output. List of selected files for linting is always shown.\n  - Fix default location for Python command-line scripts is ./bin, not ./scripts.\n  - Wall time of linters is printed.\n  - Few cleanups.\n\n- Version 1.2.0 April 12, 2019\n\n  - Added support for fixers. The following liners can also fix problems:\n    header, whitespace, autopep8, yapf, black. The latter three are new.\n  - Removed some Python-2 compatibility code.\n  - Replace nosetests by pytest.\n  - Add more context to README.\n  - Add RST linter.\n\n- Version 1.1.0 April 3, 2019\n\n  - Add option for number of processors to use.\n\n- Version 1.0.1 March 30, 2019\n\n  - Add missing config options for cpplint.\n\n- Version 1.0.0 March 27, 2019\n\n  First release, mainly in anticipation of API-breaking changes, which will\n  result in a major version increase. By making a release, we can handle this\n  change in API gracefully. Notable features include:\n\n  - Support for the following linters: cppcheck, ccplint, doxygen, flake8,\n    header (internal), import (internal), namespace (internal), pycodestyle,\n    pydocstyle, pylint, whitespace (internal), yamllint\n\n  - For all supported linters, the output can be restricted to files and (lines\n    in those files) that have changed between two git commits. In pull requests,\n    this will then only show errors that are relevant for the code touched in\n    the PR. This is intended for making life easy for contributors, i.e. to not\n    bother them with linting issues in code they have not touched.\n\n  - Flexible file filtering, essentially a simplified version of rsync's file\n    filtering rules.\n\n  - Consistent and colored output for all linters, making it easy to process\n    linting issues.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cardboardlint", "package_url": "https://pypi.org/project/cardboardlint/", "platform": "", "project_url": "https://pypi.org/project/cardboardlint/", "project_urls": null, "release_url": "https://pypi.org/project/cardboardlint/1.3.0/", "requires_dist": null, "requires_python": "", "summary": "Cheap lint solution for PRs.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/theochem/cardboardlint\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/theochem/cardboardlint.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1361f17799a7286c9a5721f5f1193e53cc9c2c88/68747470733a2f2f7472617669732d63692e6f72672f7468656f6368656d2f63617264626f6172646c696e742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://anaconda.org/theochem/cardboardlint\" rel=\"nofollow\"><img alt=\"https://anaconda.org/theochem/cardboardlint/badges/version.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31c3bbe0f402c3f84cbf98c1660f7f90a2120ed5/68747470733a2f2f616e61636f6e64612e6f72672f7468656f6368656d2f63617264626f6172646c696e742f6261646765732f76657273696f6e2e737667\"></a>\n<a href=\"https://codecov.io/gh/theochem/cardboardlint\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/theochem/cardboardlint/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2468a66d29329e3961e740321ab4571cf31a6ac6/68747470733a2f2f636f6465636f762e696f2f67682f7468656f6368656d2f63617264626f6172646c696e742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/cardboardlint\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/cardboardlint.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/375a5998d43258cfb7dc114ca6766a038018e87e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63617264626f6172646c696e742e737667\"></a>\n<a href=\"https://pypi.org/project/cardboardlint\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/cardboardlint.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae02e7ecc581a053d8471c79c08f8484aa7d64fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f63617264626f6172646c696e742e737667\"></a>\n<a href=\"https://github.com/theochem/cardboardlint/releases\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/release/theochem/cardboardlint.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c90282922c45ec383f95cfda6339469d6168f29/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f7468656f6368656d2f63617264626f6172646c696e742e737667\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Cardboardlint is a cheap lint solution for pull requests.</p>\n<p>It is a non-hosted and customizable tool similar to commercial services like:</p>\n<ul>\n<li>Hound CI: <a href=\"https://houndci.com/\" rel=\"nofollow\">https://houndci.com/</a></li>\n<li>Stickler CI: <a href=\"https://stickler-ci.com/\" rel=\"nofollow\">https://stickler-ci.com/</a></li>\n<li>landscape.io: <a href=\"https://landscape.io/\" rel=\"nofollow\">https://landscape.io/</a></li>\n<li>\u2026</li>\n</ul>\n<p>For more advanced analysis, one could use Coverty Scan.\n(<a href=\"https://scan.coverity.com/\" rel=\"nofollow\">https://scan.coverity.com/</a>)</p>\n<p>Cardboardlint wraps a collection of linters, intended to be used on a project\nin a Git repository. Cardboardlint is able to report just those messages related\nto lines that have changed in your development branch, compared to another\ncommit, e.g. the HEAD of the master branch. This is intended to make life easier\nfor contributors to a project: in their pull requests, they will only see\nlinting issues related to the code they have touched. For some linters,\ncardboardlint also supports automatic fixes of linting issues, optionally\nrestricted to code that has changed in your development branch.</p>\n<p>Some example projects that use Cardboardlint:</p>\n<ul>\n<li>Cardboardlint, obviously</li>\n<li>Roberto: <a href=\"https://github.com/theochem/roberto\" rel=\"nofollow\">https://github.com/theochem/roberto</a> (Cardboardlint also uses Roberto.)</li>\n<li>IOData: <a href=\"https://github.com/theochem/iodata\" rel=\"nofollow\">https://github.com/theochem/iodata</a></li>\n<li>CellCutoff: <a href=\"https://github.com/theochem/cellcutoff\" rel=\"nofollow\">https://github.com/theochem/cellcutoff</a></li>\n<li>CGrid: <a href=\"https://github.com/theochem/cgrid\" rel=\"nofollow\">https://github.com/theochem/cgrid</a></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li><p>Install cardboardlint, which requires python 3.6 or 3.7 and PyYaml. You must\nhave Python 3 installed, PyYaml will be installed automatically for you with\nthe instructions below.</p>\n<pre><span class=\"c1\"># Install cardboardlint with pip. Any of the following that works for you\n# is fine:\n</span>pip install cardboardlint\npip install cardboardlint --user\npython3 -m pip install cardboardlint\npython3 -m pip install cardboardlint --user\n<span class=\"c1\"># Or install cardboardlint with conda:\n</span>conda install theochem::cardboardlint\n</pre>\n</li>\n<li><p>Add a <tt>.cardboardlint.yml</tt> to the root of your source tree. It should at least contain\na <tt>linters</tt> section with a list of linters, e.g.</p>\n<pre><span class=\"nt\">linters</span><span class=\"p\">:</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">pylint</span><span class=\"p\">:</span>\n    <span class=\"nt\">pylintrc</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">tools/your_custom_pylintrc</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">cppcheck</span><span class=\"p\">:</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">import</span><span class=\"p\">:</span>\n<span class=\"nn\">...</span>\n</pre>\n<p>A list of supported linters is easily deduced from the source code. Just look into\nthe <tt><span class=\"pre\">cardboardlint/linter_*.py</span></tt> files. Each of these files has a module docstring with\nsome explanations and a DEFAULT_CONFIG dictionary with the available configuration vars.</p>\n<p>You can repeat any linter multiple times with different configuration settings. This can\nbe useful, e.g. when unit tests must be linted differently than the rest of the source\ncode. This is a simple example where unit tests have a different pylint config:</p>\n<pre><span class=\"nt\">pre_filefilter</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"s\">'+</span><span class=\"nv\"> </span><span class=\"s\">tools/demo/*.py'</span><span class=\"p-Indicator\">,</span> <span class=\"s\">'-</span><span class=\"nv\"> </span><span class=\"s\">tools/*'</span><span class=\"p-Indicator\">,</span> <span class=\"s\">'+</span><span class=\"nv\"> </span><span class=\"s\">*'</span><span class=\"p-Indicator\">]</span>\n\n<span class=\"nt\">linters</span><span class=\"p\">:</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">pylint</span><span class=\"p\">:</span>\n    <span class=\"nt\">pylintrc</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">tools/pylintrc</span>\n    <span class=\"nt\">filefilter</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"s\">'-</span><span class=\"nv\"> </span><span class=\"s\">test_*.py'</span><span class=\"p-Indicator\">,</span> <span class=\"s\">'+</span><span class=\"nv\"> </span><span class=\"s\">*.py'</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">exclude</span><span class=\"p\">:</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">pylint</span><span class=\"p\">:</span>\n    <span class=\"nt\">pylintrc</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">tools/pylintrc_tests</span>\n    <span class=\"nt\">filefilter</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"s\">'+</span><span class=\"nv\"> </span><span class=\"s\">test_*.py'</span><span class=\"p-Indicator\">]</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">import</span><span class=\"p\">:</span>\n<span class=\"nn\">...</span>\n</pre>\n<p>When cardboardlint starts, it makes a list of files not ignored by\ngit in the current repository. These filenames are first filtered by a\nso-called <tt>pre_filefilter</tt>. Files that pass the <tt>pre_filefilter</tt> are then\ntested with linter-specific <tt>filefilters</tt> to end up with a list of files to\nbe checked by a given linter.</p>\n<p>A <tt>pre_filefilter</tt> or <tt>filefilter</tt> consists of a list of rules to test if\na file should be considered for linting or not. Each rule starts with a\npossible outcome, <tt>+</tt> (include) or a <tt>-</tt> (exclude), followed by a glob\npattern. At the moment, the pattern ignores the presence of directory\nseparators and treats the complete path as a single string on which the\npattern is tested, using Pythons <tt>fnmatch</tt> builtin module. The rules are\ntested in order and when a pattern matches, the corresponding decision is made\n(include and exclude), without considering subsequent rules. When no patterns\ngive a match, the file is excluded.</p>\n<p>The following tricks might be useful:</p>\n<ul>\n<li>If you would like to include files that did not match any pattern, add\n<tt>'+ *'</tt> as last pattern, which is often useful for the <tt>pre_filefilter</tt>.</li>\n<li>If you would like to include all python files, in all directories, use\n<tt>'+ *.py'</tt>. The wildcard will also match directories containing the Python\nfile. For example it would match <tt>a/b</tt> in the path <tt>a/b.py</tt>.</li>\n</ul>\n</li>\n<li><p>Install the linters you intend to run (either locally or in your CI environment). These\ndependencies are not installed automatically because you may not want to use all of\nthem.</p>\n<p>Conda packages for all supported linters can be found in the main conda\nchannels an in conda-forge (<a href=\"https://anaconda.org/conda-forge\" rel=\"nofollow\">https://anaconda.org/conda-forge</a>). We have added\npackages to conda-forge for <tt>cppcheck</tt> and <tt>cpplint</tt>. All other linters\nwere already available. To install all of them, we can recommend the following\ncommands:</p>\n<pre><span class=\"c1\"># Add conda-forga channel with lower priority as the default channels. This\n# prevents your conda env from being flooded by conda-forga packages.\n</span>conda config --append channels conda-forge\n<span class=\"c1\"># Install all linters for which cardboardlint has wrappers:\n</span>conda install pycodestyle pydocstyle cppcheck cpplint yamllint flake8 <span class=\"se\">\\\n</span>              doxygen pylint autopep8, yapf, black\n</pre>\n</li>\n<li><p>Run the cardboardlinter, which can be done in several ways:</p>\n<pre><span class=\"c1\"># runs all linters and use multiple cpus\n</span>cardboardlinter -n auto\n<span class=\"c1\"># runs all linters and only shows messages for changes relative to master\n</span>cardboardlinter -r master\n<span class=\"c1\"># run only static linters\n</span>cardboardlinter -f static\n<span class=\"c1\"># run only dynamic linters, which require in-place build\n</span>cardboardlinter -f dynamic\n\n<span class=\"c1\"># run fixers, which automaticaly solve trivial problems\n</span>cardboardlinter -F\n<span class=\"c1\"># run fixers, which automaticaly solve trivial problems, only on those\n# lines that have changed w.r.t. the master branch.\n</span>cardboardlinter -F -r master\n</pre>\n</li>\n<li><p>Usage in CI:</p>\n<ul>\n<li><p>Travis-CI (in <tt>.travis.yml</tt>). This will only report messages for lines that have\nchanged in the PR.</p>\n<pre><span class=\"nt\">install</span><span class=\"p\">:</span>\n<span class=\"c1\"># Install the latest cardboardlinter</span>\n<span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then</span>\n    <span class=\"l-Scalar-Plain\">pip install --upgrade cardboardlint</span>\n  <span class=\"l-Scalar-Plain\">fi</span>\n\n<span class=\"nt\">script</span><span class=\"p\">:</span>\n<span class=\"c1\"># Run the cardboardlinter, in case of pull requests</span>\n<span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then</span>\n    <span class=\"l-Scalar-Plain\">cardboardlinter --refspec $TRAVIS_BRANCH -n auto;</span>\n  <span class=\"l-Scalar-Plain\">fi</span>\n</pre>\n</li>\n<li><p>One can also use Roberto to drive the entire build+test+package workflow,\nwhich includes linting with Cardboardlint.\nSee <a href=\"https://theochem.github.io/roberto/\" rel=\"nofollow\">https://theochem.github.io/roberto/</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"change-log\">\n<h2>Change log</h2>\n<ul>\n<li><p>Version 1.2.1 April 14, 2019</p>\n<ul>\n<li>More verbose output. List of selected files for linting is always shown.</li>\n<li>Fix default location for Python command-line scripts is ./bin, not ./scripts.</li>\n<li>Wall time of linters is printed.</li>\n<li>Few cleanups.</li>\n</ul>\n</li>\n<li><p>Version 1.2.0 April 12, 2019</p>\n<ul>\n<li>Added support for fixers. The following liners can also fix problems:\nheader, whitespace, autopep8, yapf, black. The latter three are new.</li>\n<li>Removed some Python-2 compatibility code.</li>\n<li>Replace nosetests by pytest.</li>\n<li>Add more context to README.</li>\n<li>Add RST linter.</li>\n</ul>\n</li>\n<li><p>Version 1.1.0 April 3, 2019</p>\n<ul>\n<li>Add option for number of processors to use.</li>\n</ul>\n</li>\n<li><p>Version 1.0.1 March 30, 2019</p>\n<ul>\n<li>Add missing config options for cpplint.</li>\n</ul>\n</li>\n<li><p>Version 1.0.0 March 27, 2019</p>\n<p>First release, mainly in anticipation of API-breaking changes, which will\nresult in a major version increase. By making a release, we can handle this\nchange in API gracefully. Notable features include:</p>\n<ul>\n<li>Support for the following linters: cppcheck, ccplint, doxygen, flake8,\nheader (internal), import (internal), namespace (internal), pycodestyle,\npydocstyle, pylint, whitespace (internal), yamllint</li>\n<li>For all supported linters, the output can be restricted to files and (lines\nin those files) that have changed between two git commits. In pull requests,\nthis will then only show errors that are relevant for the code touched in\nthe PR. This is intended for making life easy for contributors, i.e. to not\nbother them with linting issues in code they have not touched.</li>\n<li>Flexible file filtering, essentially a simplified version of rsync\u2019s file\nfiltering rules.</li>\n<li>Consistent and colored output for all linters, making it easy to process\nlinting issues.</li>\n</ul>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5140351, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "50aac8ee29f864c06eac1e9050944ae0", "sha256": "c13e36a5ffaf5a587a352f431fbada3eb6be97ee158868a9077ea96ea6dff3ff"}, "downloads": -1, "filename": "cardboardlint-0.2.1.tar.gz", "has_sig": false, "md5_digest": "50aac8ee29f864c06eac1e9050944ae0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27933, "upload_time": "2019-04-14T09:51:45", "upload_time_iso_8601": "2019-04-14T09:51:45.164917Z", "url": "https://files.pythonhosted.org/packages/39/31/8669c64303fd9ec89c4e385fa3628105468d798b781e97b0303a4d147bbe/cardboardlint-0.2.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2d1177106a3b73f4772c54c9762dd887", "sha256": "f0cf8c779d2cc8407b9a1622b9fd5d9444e631f77cb5793e9810f11ee304e75f"}, "downloads": -1, "filename": "cardboardlint-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2d1177106a3b73f4772c54c9762dd887", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20135, "upload_time": "2019-03-27T17:54:53", "upload_time_iso_8601": "2019-03-27T17:54:53.857454Z", "url": "https://files.pythonhosted.org/packages/2f/7c/6425efee4e0546569a657ab31d36d13ff4d0e041257e9652caed3b0648bf/cardboardlint-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c8eba687e40198afbf3497dfea000d1d", "sha256": "a337f64a3f632747f8f026614331e3cab8eb50f3ad032d90ba172b1b652ca461"}, "downloads": -1, "filename": "cardboardlint-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c8eba687e40198afbf3497dfea000d1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20253, "upload_time": "2019-03-30T07:31:24", "upload_time_iso_8601": "2019-03-30T07:31:24.411914Z", "url": "https://files.pythonhosted.org/packages/92/bb/4c82b7cdcba1e1f3e5e4204c8ef7e3423d9c6d790b851cbac1577d3c7847/cardboardlint-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "3b2adad21caf4a568b6f12ccdf189e3e", "sha256": "0a51a613289f31087fe8595ebe4e8ba764e7e3ae5751104147dbc36ca6d28e46"}, "downloads": -1, "filename": "cardboardlint-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3b2adad21caf4a568b6f12ccdf189e3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20900, "upload_time": "2019-04-03T07:16:27", "upload_time_iso_8601": "2019-04-03T07:16:27.261312Z", "url": "https://files.pythonhosted.org/packages/3d/7f/377cad88360b58f6d2edba2f5e42ec65e7b8ed5fc805d42f47d587b4ab75/cardboardlint-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "10d38e4856e0badc1fc2a34ca48ef589", "sha256": "c8a451d8ab8b60a1f6e0de50f4448d0114b73413128e675aef9795487029f942"}, "downloads": -1, "filename": "cardboardlint-1.2.0.tar.gz", "has_sig": false, "md5_digest": "10d38e4856e0badc1fc2a34ca48ef589", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27156, "upload_time": "2019-04-12T15:25:32", "upload_time_iso_8601": "2019-04-12T15:25:32.863814Z", "url": "https://files.pythonhosted.org/packages/0b/a3/de43962ab6dd451aa311afa9dc458174286b4b92311072193725953212d4/cardboardlint-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "bf880f4ba889cb7ace9d4517609b52cb", "sha256": "d27b8dcbcbf444f7aa120b360815650ad709e7a607651490962ffaf7deac1b20"}, "downloads": -1, "filename": "cardboardlint-1.3.0.tar.gz", "has_sig": false, "md5_digest": "bf880f4ba889cb7ace9d4517609b52cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27936, "upload_time": "2019-04-14T09:45:03", "upload_time_iso_8601": "2019-04-14T09:45:03.314021Z", "url": "https://files.pythonhosted.org/packages/a8/d4/02c9ad87226867995e8cc89791ba3a5a653e1d25c04263adabe87b7e1472/cardboardlint-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf880f4ba889cb7ace9d4517609b52cb", "sha256": "d27b8dcbcbf444f7aa120b360815650ad709e7a607651490962ffaf7deac1b20"}, "downloads": -1, "filename": "cardboardlint-1.3.0.tar.gz", "has_sig": false, "md5_digest": "bf880f4ba889cb7ace9d4517609b52cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27936, "upload_time": "2019-04-14T09:45:03", "upload_time_iso_8601": "2019-04-14T09:45:03.314021Z", "url": "https://files.pythonhosted.org/packages/a8/d4/02c9ad87226867995e8cc89791ba3a5a653e1d25c04263adabe87b7e1472/cardboardlint-1.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:25 2020"}