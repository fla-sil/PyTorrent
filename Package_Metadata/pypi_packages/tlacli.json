{"info": {"author": "Hillel Wayne", "author_email": "h@hillelwayne.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Java Libraries"], "description": "# tlacli: A CLI tool for TLA+\n\n**DISCLAIMER:** This is not an official TLA+ tool and isn't a prototype for one. I'm not making any guarantees of backwards compatibility or non-breaking changes or whatever. It's just a script I find useful.\n\n`tlacli` is a tool for running the TLC model checker from the command line. You can already run TLC from the command line, anyway, using `tlc2.TLC`, and `tlacli` only provides a subset of the functionality. It still has a few UX improvements, though:\n\n1. Nicer flag UX. Arguments follow the conventional \"flag\" format. You can spot-check a spec with just `tlacli check specfile.tla`. \n1. Saner defaults. It automatically uses `Spec` as your temporal formula, defaults to using a worker per CPU core, gives terse output, etc.\n1. You don't have to write a config file. You can define invariants, properties, and constants as command-line flags and `tlacli` will automatically build the proper config file for that run. You can also save the configuration as a template for future runs. You can also use _both_ a config file and flags, where the config is a template and the flags are specializations.\n\n## Setup\n\nYou need Java and Python 3.7. There's no package yet; in the meantime, clone it and run `pip install -e .` This will be updated as I learn more about making python packages.\n\nThe `requirements.txt` is only needed for testing.\n\n## Translating PlusCal\n\n```\ntlacli translate specfile.tla\n```\n\n**NOTE:** By default this includes the `-nocfg` flag, which prevents the tool from overwritting your copy of `specfile.cfg`. Right now no other flags are supported. If you need flags, you can put them directly in the module file. See page 67 of the [PlusCal manual](https://lamport.azurewebsites.net/tla/p-manual.pdf).\n\n## Model Checking\n\n\n```\ntlacli check specfile.tla\n```\n\nBy default, this runs `specfile.tla` with the specification `Spec`. You can change the run specification with the `--spec` flag. By default, this runs TLC with the `-terse` and `-cleanup` flags. The config file will be saved as `temporary.cfg`. You can change the filename with `--cfg-out {name}`.\n\n**NOTE:** Running currently creates an empty `states` directory.\n\n**BUG:** Currently you cannot pass in an absolute path for the specfile, at least on windows. You can pass in a relative path. See [this](https://github.com/tlaplus/tlaplus/issues/424) tlatools issue. This is not an issue for pluscal translation.\n\n### Properties\n\nYou can specify invariants and properties from the command line. Use the `--invariant {inv}` flag and the `--property {prop}` flag, respectively. Both accept multiple operators.\n\n**NOTE:** If `--invariant` or `--property` are the _last_ flags passed in, the script will assume your specfile is an invariant! You can prevent this by adding a `--`.\n\n```\ntlacli check --invariant Inv1 Inv2 -- specfile.tla\n```\n\nYou can also use `--inv` and `--prop`, but this may change in the future.\n\n### Constants\n\nYou can assign constants with `--constant {name} {value}`. Each constant must be a separate flag. You can put in sets, tuples, etc by putting `{value}` in quotes. Use single quotes if you want to put in strings.\n\n```\ntlacli check --constant Max 4 --constant Threads '{1, 2}' specfile.tla\ntlacli check --constant Colors '{\\\"red\\\", \\\"green\\\"}' specfile.tla\n```\n\n#### Model Values\n\nIf you need several model values, you can specify them all in a single `--model-values {m1} {m2} ...` flag.\n\n```\ntlacli check --model_values A B C Null Server -- specfile.tla\n```\n\n#### Sets of Model Values\n\nUse an ordinary assignment. You don't need a `--model-values` flag first.\n\n```\n# Wrong\ntlacli check --model-values m1 m2 m3 --constant ModelSet \"{m1, m2, m3}\" specfile.tla\n\n\n# Right\ntlacli check --constant ModelSet \"{m1, m2, m3}\" specfile.tla\n```\n\nSymmetry sets are not yet supported.\n\n### Configuration Templates\n\nYou can specify a template configuration with `--cfg template.cfg`:\n\n```\ntlacli check --cfg foo.cfg specfile.tla\n```\n\n`tlacli` can only read things that are also expressible as flags. Currently, this means invariants, properties, specification, and (most) constants. Everything else is ignored. It's a simple text parser and may miss things formated in an unexpected way. The one guarantee: If you write a file a config with `--cfg-out` and later read it with `--cfg`, the whole config will be read properly.\n\nA template can be used in conjunction with the other flags. Currently this adds the additional flags on top of the template. The plan is that if the flags and the template conflict, the flags take priority. This will let us specialize a template.\n\n## Contributing\n\nEh make a PR or something\n\n### Testing\n\nUse `pytest`. This is currently broken because I need to add fixtures\n\n## TODO\n\n### Features\n* Translating PlusCal (halfway done)\n* Implement and document all the TLC options here: https://lamport.azurewebsites.net/tla/tlc-options.html\n    * TLC option passthrough\n* Symmetry model sets\n* More post-run cleanup\n* Maybe use fewer workers per run by default\n* Advanced config options:\n    * VIEW (chaos reigns)\n    * Operator Overrides / Constant Operators\n    * CONSTRAINT and ACTION-CONSTRAINT\n    * SYMMETRY\n* Explanations on what you can and can't assign in a config file (anything that doesn't require `EXTENDS`, I think)\n* Writing on landmines and stuff\n* Actually get the package on PyPI\n\n### Internal\n\n* Store config if you have a _lot_ of flags you need to pass. Would be overridden by actual flags\n* `--show-cfg` and `--show-script` for debugging purposes\n* Get rid of the horrible `pkg_resources` kludge for accessing the `jar`\n\n## Out of Scope\n\n* INIT-NEXT config\n* TLAPS and tla2tex\n* Toolbox-only features like profiling, running in the cloud, trace explorer, \"evaluate constant expression\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hwayne/tlacli", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tlacli", "package_url": "https://pypi.org/project/tlacli/", "platform": "", "project_url": "https://pypi.org/project/tlacli/", "project_urls": {"Homepage": "https://github.com/hwayne/tlacli"}, "release_url": "https://pypi.org/project/tlacli/0.0.1/", "requires_dist": null, "requires_python": ">=3.7", "summary": "A wrapper script for running TLA+ from the command line", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tlacli: A CLI tool for TLA+</h1>\n<p><strong>DISCLAIMER:</strong> This is not an official TLA+ tool and isn't a prototype for one. I'm not making any guarantees of backwards compatibility or non-breaking changes or whatever. It's just a script I find useful.</p>\n<p><code>tlacli</code> is a tool for running the TLC model checker from the command line. You can already run TLC from the command line, anyway, using <code>tlc2.TLC</code>, and <code>tlacli</code> only provides a subset of the functionality. It still has a few UX improvements, though:</p>\n<ol>\n<li>Nicer flag UX. Arguments follow the conventional \"flag\" format. You can spot-check a spec with just <code>tlacli check specfile.tla</code>.</li>\n<li>Saner defaults. It automatically uses <code>Spec</code> as your temporal formula, defaults to using a worker per CPU core, gives terse output, etc.</li>\n<li>You don't have to write a config file. You can define invariants, properties, and constants as command-line flags and <code>tlacli</code> will automatically build the proper config file for that run. You can also save the configuration as a template for future runs. You can also use <em>both</em> a config file and flags, where the config is a template and the flags are specializations.</li>\n</ol>\n<h2>Setup</h2>\n<p>You need Java and Python 3.7. There's no package yet; in the meantime, clone it and run <code>pip install -e .</code> This will be updated as I learn more about making python packages.</p>\n<p>The <code>requirements.txt</code> is only needed for testing.</p>\n<h2>Translating PlusCal</h2>\n<pre><code>tlacli translate specfile.tla\n</code></pre>\n<p><strong>NOTE:</strong> By default this includes the <code>-nocfg</code> flag, which prevents the tool from overwritting your copy of <code>specfile.cfg</code>. Right now no other flags are supported. If you need flags, you can put them directly in the module file. See page 67 of the <a href=\"https://lamport.azurewebsites.net/tla/p-manual.pdf\" rel=\"nofollow\">PlusCal manual</a>.</p>\n<h2>Model Checking</h2>\n<pre><code>tlacli check specfile.tla\n</code></pre>\n<p>By default, this runs <code>specfile.tla</code> with the specification <code>Spec</code>. You can change the run specification with the <code>--spec</code> flag. By default, this runs TLC with the <code>-terse</code> and <code>-cleanup</code> flags. The config file will be saved as <code>temporary.cfg</code>. You can change the filename with <code>--cfg-out {name}</code>.</p>\n<p><strong>NOTE:</strong> Running currently creates an empty <code>states</code> directory.</p>\n<p><strong>BUG:</strong> Currently you cannot pass in an absolute path for the specfile, at least on windows. You can pass in a relative path. See <a href=\"https://github.com/tlaplus/tlaplus/issues/424\" rel=\"nofollow\">this</a> tlatools issue. This is not an issue for pluscal translation.</p>\n<h3>Properties</h3>\n<p>You can specify invariants and properties from the command line. Use the <code>--invariant {inv}</code> flag and the <code>--property {prop}</code> flag, respectively. Both accept multiple operators.</p>\n<p><strong>NOTE:</strong> If <code>--invariant</code> or <code>--property</code> are the <em>last</em> flags passed in, the script will assume your specfile is an invariant! You can prevent this by adding a <code>--</code>.</p>\n<pre><code>tlacli check --invariant Inv1 Inv2 -- specfile.tla\n</code></pre>\n<p>You can also use <code>--inv</code> and <code>--prop</code>, but this may change in the future.</p>\n<h3>Constants</h3>\n<p>You can assign constants with <code>--constant {name} {value}</code>. Each constant must be a separate flag. You can put in sets, tuples, etc by putting <code>{value}</code> in quotes. Use single quotes if you want to put in strings.</p>\n<pre><code>tlacli check --constant Max 4 --constant Threads '{1, 2}' specfile.tla\ntlacli check --constant Colors '{\\\"red\\\", \\\"green\\\"}' specfile.tla\n</code></pre>\n<h4>Model Values</h4>\n<p>If you need several model values, you can specify them all in a single <code>--model-values {m1} {m2} ...</code> flag.</p>\n<pre><code>tlacli check --model_values A B C Null Server -- specfile.tla\n</code></pre>\n<h4>Sets of Model Values</h4>\n<p>Use an ordinary assignment. You don't need a <code>--model-values</code> flag first.</p>\n<pre><code># Wrong\ntlacli check --model-values m1 m2 m3 --constant ModelSet \"{m1, m2, m3}\" specfile.tla\n\n\n# Right\ntlacli check --constant ModelSet \"{m1, m2, m3}\" specfile.tla\n</code></pre>\n<p>Symmetry sets are not yet supported.</p>\n<h3>Configuration Templates</h3>\n<p>You can specify a template configuration with <code>--cfg template.cfg</code>:</p>\n<pre><code>tlacli check --cfg foo.cfg specfile.tla\n</code></pre>\n<p><code>tlacli</code> can only read things that are also expressible as flags. Currently, this means invariants, properties, specification, and (most) constants. Everything else is ignored. It's a simple text parser and may miss things formated in an unexpected way. The one guarantee: If you write a file a config with <code>--cfg-out</code> and later read it with <code>--cfg</code>, the whole config will be read properly.</p>\n<p>A template can be used in conjunction with the other flags. Currently this adds the additional flags on top of the template. The plan is that if the flags and the template conflict, the flags take priority. This will let us specialize a template.</p>\n<h2>Contributing</h2>\n<p>Eh make a PR or something</p>\n<h3>Testing</h3>\n<p>Use <code>pytest</code>. This is currently broken because I need to add fixtures</p>\n<h2>TODO</h2>\n<h3>Features</h3>\n<ul>\n<li>Translating PlusCal (halfway done)</li>\n<li>Implement and document all the TLC options here: <a href=\"https://lamport.azurewebsites.net/tla/tlc-options.html\" rel=\"nofollow\">https://lamport.azurewebsites.net/tla/tlc-options.html</a>\n<ul>\n<li>TLC option passthrough</li>\n</ul>\n</li>\n<li>Symmetry model sets</li>\n<li>More post-run cleanup</li>\n<li>Maybe use fewer workers per run by default</li>\n<li>Advanced config options:\n<ul>\n<li>VIEW (chaos reigns)</li>\n<li>Operator Overrides / Constant Operators</li>\n<li>CONSTRAINT and ACTION-CONSTRAINT</li>\n<li>SYMMETRY</li>\n</ul>\n</li>\n<li>Explanations on what you can and can't assign in a config file (anything that doesn't require <code>EXTENDS</code>, I think)</li>\n<li>Writing on landmines and stuff</li>\n<li>Actually get the package on PyPI</li>\n</ul>\n<h3>Internal</h3>\n<ul>\n<li>Store config if you have a <em>lot</em> of flags you need to pass. Would be overridden by actual flags</li>\n<li><code>--show-cfg</code> and <code>--show-script</code> for debugging purposes</li>\n<li>Get rid of the horrible <code>pkg_resources</code> kludge for accessing the <code>jar</code></li>\n</ul>\n<h2>Out of Scope</h2>\n<ul>\n<li>INIT-NEXT config</li>\n<li>TLAPS and tla2tex</li>\n<li>Toolbox-only features like profiling, running in the cloud, trace explorer, \"evaluate constant expression\"</li>\n</ul>\n\n          </div>"}, "last_serial": 6570356, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7dea5c0340a35303e2ce7523f8c52bb7", "sha256": "ad5b86d802e3dd5fce2a24ffcd05ebee71b5e93e79106ceb900c26eabb11b240"}, "downloads": -1, "filename": "tlacli-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7dea5c0340a35303e2ce7523f8c52bb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 2153621, "upload_time": "2020-02-04T18:13:46", "upload_time_iso_8601": "2020-02-04T18:13:46.362558Z", "url": "https://files.pythonhosted.org/packages/07/f2/661232bde9ba0060b7628c721237953d37c65b22dffb065430be3f28cfb5/tlacli-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66d37a8d5055851cdda13389f6c6dd0e", "sha256": "6b029f09cfe01f82d7fe32a32babca81c1d8583f92945e1bef5f6ec31393cba5"}, "downloads": -1, "filename": "tlacli-0.0.1.tar.gz", "has_sig": false, "md5_digest": "66d37a8d5055851cdda13389f6c6dd0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2155746, "upload_time": "2020-02-04T18:14:04", "upload_time_iso_8601": "2020-02-04T18:14:04.827009Z", "url": "https://files.pythonhosted.org/packages/ac/33/7baa8dc6835c71b436d9a622f609ac816d71c99565205ede8e411cfe699c/tlacli-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7dea5c0340a35303e2ce7523f8c52bb7", "sha256": "ad5b86d802e3dd5fce2a24ffcd05ebee71b5e93e79106ceb900c26eabb11b240"}, "downloads": -1, "filename": "tlacli-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7dea5c0340a35303e2ce7523f8c52bb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 2153621, "upload_time": "2020-02-04T18:13:46", "upload_time_iso_8601": "2020-02-04T18:13:46.362558Z", "url": "https://files.pythonhosted.org/packages/07/f2/661232bde9ba0060b7628c721237953d37c65b22dffb065430be3f28cfb5/tlacli-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66d37a8d5055851cdda13389f6c6dd0e", "sha256": "6b029f09cfe01f82d7fe32a32babca81c1d8583f92945e1bef5f6ec31393cba5"}, "downloads": -1, "filename": "tlacli-0.0.1.tar.gz", "has_sig": false, "md5_digest": "66d37a8d5055851cdda13389f6c6dd0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2155746, "upload_time": "2020-02-04T18:14:04", "upload_time_iso_8601": "2020-02-04T18:14:04.827009Z", "url": "https://files.pythonhosted.org/packages/ac/33/7baa8dc6835c71b436d9a622f609ac816d71c99565205ede8e411cfe699c/tlacli-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:31 2020"}