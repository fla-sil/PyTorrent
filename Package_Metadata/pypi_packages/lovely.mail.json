{"info": {"author": "Lovely Systems", "author_email": "office@lovelysystems.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==============================\n Lovely.Mail and Mail Testing\n==============================\n\nThis package mainly provides a simple way to test the mail delivery using the\ncurrent configuration. There is no need to change the mailing configuration\nfor the functional tests.\n\n  >>> from lovely.mail import testing\n\nBefore we can set up the mail testing we need to register the mailer\nutilities.\n\n  >>> from zope import component\n  >>> from zope.sendmail.mailer import SMTPMailer\n  >>> component.provideUtility(SMTPMailer(),\n  ...                          name='lovely-mailer')\n\n  >>> from zope.sendmail.delivery import QueuedMailDelivery\n  >>> component.provideUtility(QueuedMailDelivery('some_path'),\n  ...                          name='lovely-mail-delivery')\n\nNow we set up testing. This is the code which should go into you\nsetUp-function for your tests.\n\n  >>> testing.setUpSMTPTesting('lovely-mailer', 'lovely-mail-delivery', unit_test=True)\n\nTesting simply replaces the smtp mailer of the utility to a test smtp mailer.\n\n  >>> from zope.sendmail.interfaces import IMailer, IMailDelivery\n  >>> mailer = component.getUtility(IMailer, 'lovely-mailer')\n  >>> mailer.smtp\n  <class 'lovely.mail.testing.TestMailerConnection'>\n\nAnd the mail delivery gets a temporary directory.\n\n  >>> delivery = component.getUtility(IMailDelivery, 'lovely-mail-delivery')\n  >>> delivery._queuePath != 'some_path'\n  True\n\nTesting provides a list with already sent mails.\n\n  >>> testing.sentMails\n  []\n\nNow we send a mail.\n\n  >>> messageId = delivery.send('README', ['MAILQUEUE',], 'I am a testing mail')\n  >>> testing.sentMails\n  []\n\nThe mail is not sent yet because we need to trigger mail delivery.\n\n  >>> testing.triggerMail()\n  >>> from pprint import pprint\n  >>> pprint(testing.sentMails)\n  [('README',\n   ('MAILQUEUE',),\n   'Message-Id: <...>\\nI am a testing mail')]\n\n\nWe also provide a simple function to send mails.\n\n  >>> from lovely.mail import sendmail\n  >>> sendmail('subject', 'me@gmail.org', ['you@gmail.org'], 'my mail body')\n  >>> testing.sentMails = []\n  >>> testing.triggerMail()\n  >>> pprint(testing.sentMails)\n  [('me@gmail.org',\n    ('you@gmail.org',),\n    'Message-Id: ...\\nFrom: me@gmail.org\\nTo: you@gmail.org\\n...\\nmy mail body')]\n\nIf we provide tuples for the addresses we get this :\n\n  >>> sendmail('subject', ('ich', 'me@gmail.org'), [('du','you@gmail.org',)], 'my mail body')\n  >>> testing.sentMails = []\n  >>> testing.triggerMail()\n  >>> pprint(testing.sentMails)\n  [('ich <me@gmail.org>',\n    ('du <you@gmail.org>',),\n    'Message-Id: ...\\nFrom: ich <me@gmail.org>\\nTo: du <you@gmail.org>\\n...\\nmy mail body')]\n\n\nAttachments\n-----------\n\nAttachments must be provided as a list of tuples containing a file like object\nproviding \"read\", the filename and the mime type of the attachment (if known).\n\n  >>> from StringIO import StringIO\n  >>> f1 = StringIO(\"I am the content of file 1\")\n  >>> sendmail('subject', ('ich', 'me@gmail.org'), [('du','you@gmail.org',)],\n  ...          'my mail body', attachments=[(f1, 'f1.txt', None)])\n  >>> testing.sentMails = []\n  >>> testing.triggerMail()\n  >>> pprint(testing.sentMails)\n  [('ich <me@gmail.org>',\n    ('du <you@gmail.org>',),\n    'Message-Id: ...')]\n  >>> pprint(testing.sentMails[0][2].split('\\n'))\n  ['Message-Id: <...>',\n   'Content-Type: multipart/mixed; boundary=\"===============...==\"',\n   'MIME-Version: 1.0',\n   'Subject: subject',\n   'From: ich <me@gmail.org>',\n   'To: du <you@gmail.org>',\n   'Date: ...',\n   '',\n   '--===============...==',\n   'Content-Type: text/plain; charset=\"utf-8\"',\n   'MIME-Version: 1.0',\n   'Content-Transfer-Encoding: 7bit',\n   '',\n   'my mail body',\n   '--===============...==',\n   'Content-Type: application/octet-stream',\n   'MIME-Version: 1.0',\n   'Content-Transfer-Encoding: base64',\n   'Content-Disposition: attachment; filename=\"f1.txt\"',\n   '',\n   'SS...',\n   '--===============...==--']\n\n\n  >>> f1.seek(0)\n  >>> sendmail('subject', ('ich', 'me@gmail.org'), [('du','you@gmail.org',)],\n  ...          'my mail body', attachments=[(f1, 'f1.txt', ('text','plain'))])\n  >>> testing.sentMails = []\n  >>> testing.triggerMail()\n  >>> pprint(testing.sentMails)\n  [('ich <me@gmail.org>',\n    ('du <you@gmail.org>',),\n    'Message-Id: ...')]\n  >>> pprint(testing.sentMails[0][2].split('\\n'))\n  ['Message-Id: <...>',\n   'Content-Type: multipart/mixed; boundary=\"===============...==\"',\n   'MIME-Version: 1.0',\n   'Subject: subject',\n   'From: ich <me@gmail.org>',\n   'To: du <you@gmail.org>',\n   'Date: ...',\n   '',\n   '--===============...==',\n   'Content-Type: text/plain; charset=\"utf-8\"',\n   'MIME-Version: 1.0',\n   'Content-Transfer-Encoding: 7bit',\n   '',\n   'my mail body',\n   '--===============...==',\n   'Content-Type: text/plain; charset=\"us-ascii\"',\n   'MIME-Version: 1.0',\n   'Content-Transfer-Encoding: 7bit',\n   'Content-Disposition: attachment; filename=\"f1.txt\"',\n   '',\n   'I am the content of file 1',\n   '--===============...==--']\n\nAnd clean up.\n\n  >>> testing.tearDownSMTPTesting()\n  >>> mailer.smtp\n  <class smtplib.SMTP at ...>\n  >>> delivery._queuePath == 'some_path'\n  True\n  >>> testing.sentMails\n  []\n\n\n=======================\nChanges for lovely.mail\n=======================\n\nAfter\n=====\n\n2009/09/08 0.3.1\n================\n\n - allow the use of directMailDelivery for testing\n - handle attachments according to their type\n\n2009/07/30 0.3.0\n================\n\n - added attachments\n\n2009/04/22 0.2.0\n================\n\n - stop remaining QueueProcessThread on tearDown because python 2.5 doesn't\n   terminate.\n\n2008/04/22 0.1.3\n================\n\n- make the testmailer compatible to the latest zope.sendmail package\n\n2007/12/10 0.1.2\n================\n\n- move stuff to zope.org and pypi\n\n2007/08/23 0.1.1\n================\n\n- added remotemail.py for remote sendmail tasks\n\n2007/06/20 0.1.0a1\n==================\n\n- added TestMailDelivery utility implementation\n\n- changed to current bootstrap.py\n\n- added this file\n\n- cleaned imports\n\n\nDownload\n========", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://launchpad.net/lovely.mail", "keywords": "mail zope zope3", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "lovely.mail", "package_url": "https://pypi.org/project/lovely.mail/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lovely.mail/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://launchpad.net/lovely.mail"}, "release_url": "https://pypi.org/project/lovely.mail/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "sending emails via remotetask", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==============================<br> Lovely.Mail and Mail Testing<br>==============================<br><br>This package mainly provides a simple way to test the mail delivery using the<br>current configuration. There is no need to change the mailing configuration<br>for the functional tests.<br><br>  &gt;&gt;&gt; from lovely.mail import testing<br><br>Before we can set up the mail testing we need to register the mailer<br>utilities.<br><br>  &gt;&gt;&gt; from zope import component<br>  &gt;&gt;&gt; from zope.sendmail.mailer import SMTPMailer<br>  &gt;&gt;&gt; component.provideUtility(SMTPMailer(),<br>  ...                          name='lovely-mailer')<br><br>  &gt;&gt;&gt; from zope.sendmail.delivery import QueuedMailDelivery<br>  &gt;&gt;&gt; component.provideUtility(QueuedMailDelivery('some_path'),<br>  ...                          name='lovely-mail-delivery')<br><br>Now we set up testing. This is the code which should go into you<br>setUp-function for your tests.<br><br>  &gt;&gt;&gt; testing.setUpSMTPTesting('lovely-mailer', 'lovely-mail-delivery', unit_test=True)<br><br>Testing simply replaces the smtp mailer of the utility to a test smtp mailer.<br><br>  &gt;&gt;&gt; from zope.sendmail.interfaces import IMailer, IMailDelivery<br>  &gt;&gt;&gt; mailer = component.getUtility(IMailer, 'lovely-mailer')<br>  &gt;&gt;&gt; mailer.smtp<br>  &lt;class 'lovely.mail.testing.TestMailerConnection'&gt;<br><br>And the mail delivery gets a temporary directory.<br><br>  &gt;&gt;&gt; delivery = component.getUtility(IMailDelivery, 'lovely-mail-delivery')<br>  &gt;&gt;&gt; delivery._queuePath != 'some_path'<br>  True<br><br>Testing provides a list with already sent mails.<br><br>  &gt;&gt;&gt; testing.sentMails<br>  []<br><br>Now we send a mail.<br><br>  &gt;&gt;&gt; messageId = delivery.send('README', ['MAILQUEUE',], 'I am a testing mail')<br>  &gt;&gt;&gt; testing.sentMails<br>  []<br><br>The mail is not sent yet because we need to trigger mail delivery.<br><br>  &gt;&gt;&gt; testing.triggerMail()<br>  &gt;&gt;&gt; from pprint import pprint<br>  &gt;&gt;&gt; pprint(testing.sentMails)<br>  [('README',<br>   ('MAILQUEUE',),<br>   'Message-Id: &lt;...&gt;\\nI am a testing mail')]<br><br><br>We also provide a simple function to send mails.<br><br>  &gt;&gt;&gt; from lovely.mail import sendmail<br>  &gt;&gt;&gt; sendmail('subject', 'me@gmail.org', ['you@gmail.org'], 'my mail body')<br>  &gt;&gt;&gt; testing.sentMails = []<br>  &gt;&gt;&gt; testing.triggerMail()<br>  &gt;&gt;&gt; pprint(testing.sentMails)<br>  [('me@gmail.org',<br>    ('you@gmail.org',),<br>    'Message-Id: ...\\nFrom: me@gmail.org\\nTo: you@gmail.org\\n...\\nmy mail body')]<br><br>If we provide tuples for the addresses we get this :<br><br>  &gt;&gt;&gt; sendmail('subject', ('ich', 'me@gmail.org'), [('du','you@gmail.org',)], 'my mail body')<br>  &gt;&gt;&gt; testing.sentMails = []<br>  &gt;&gt;&gt; testing.triggerMail()<br>  &gt;&gt;&gt; pprint(testing.sentMails)<br>  [('ich &lt;me@gmail.org&gt;',<br>    ('du &lt;you@gmail.org&gt;',),<br>    'Message-Id: ...\\nFrom: ich &lt;me@gmail.org&gt;\\nTo: du &lt;you@gmail.org&gt;\\n...\\nmy mail body')]<br><br><br>Attachments<br>-----------<br><br>Attachments must be provided as a list of tuples containing a file like object<br>providing \"read\", the filename and the mime type of the attachment (if known).<br><br>  &gt;&gt;&gt; from StringIO import StringIO<br>  &gt;&gt;&gt; f1 = StringIO(\"I am the content of file 1\")<br>  &gt;&gt;&gt; sendmail('subject', ('ich', 'me@gmail.org'), [('du','you@gmail.org',)],<br>  ...          'my mail body', attachments=[(f1, 'f1.txt', None)])<br>  &gt;&gt;&gt; testing.sentMails = []<br>  &gt;&gt;&gt; testing.triggerMail()<br>  &gt;&gt;&gt; pprint(testing.sentMails)<br>  [('ich &lt;me@gmail.org&gt;',<br>    ('du &lt;you@gmail.org&gt;',),<br>    'Message-Id: ...')]<br>  &gt;&gt;&gt; pprint(testing.sentMails[0][2].split('\\n'))<br>  ['Message-Id: &lt;...&gt;',<br>   'Content-Type: multipart/mixed; boundary=\"===============...==\"',<br>   'MIME-Version: 1.0',<br>   'Subject: subject',<br>   'From: ich &lt;me@gmail.org&gt;',<br>   'To: du &lt;you@gmail.org&gt;',<br>   'Date: ...',<br>   '',<br>   '--===============...==',<br>   'Content-Type: text/plain; charset=\"utf-8\"',<br>   'MIME-Version: 1.0',<br>   'Content-Transfer-Encoding: 7bit',<br>   '',<br>   'my mail body',<br>   '--===============...==',<br>   'Content-Type: application/octet-stream',<br>   'MIME-Version: 1.0',<br>   'Content-Transfer-Encoding: base64',<br>   'Content-Disposition: attachment; filename=\"f1.txt\"',<br>   '',<br>   'SS...',<br>   '--===============...==--']<br><br><br>  &gt;&gt;&gt; f1.seek(0)<br>  &gt;&gt;&gt; sendmail('subject', ('ich', 'me@gmail.org'), [('du','you@gmail.org',)],<br>  ...          'my mail body', attachments=[(f1, 'f1.txt', ('text','plain'))])<br>  &gt;&gt;&gt; testing.sentMails = []<br>  &gt;&gt;&gt; testing.triggerMail()<br>  &gt;&gt;&gt; pprint(testing.sentMails)<br>  [('ich &lt;me@gmail.org&gt;',<br>    ('du &lt;you@gmail.org&gt;',),<br>    'Message-Id: ...')]<br>  &gt;&gt;&gt; pprint(testing.sentMails[0][2].split('\\n'))<br>  ['Message-Id: &lt;...&gt;',<br>   'Content-Type: multipart/mixed; boundary=\"===============...==\"',<br>   'MIME-Version: 1.0',<br>   'Subject: subject',<br>   'From: ich &lt;me@gmail.org&gt;',<br>   'To: du &lt;you@gmail.org&gt;',<br>   'Date: ...',<br>   '',<br>   '--===============...==',<br>   'Content-Type: text/plain; charset=\"utf-8\"',<br>   'MIME-Version: 1.0',<br>   'Content-Transfer-Encoding: 7bit',<br>   '',<br>   'my mail body',<br>   '--===============...==',<br>   'Content-Type: text/plain; charset=\"us-ascii\"',<br>   'MIME-Version: 1.0',<br>   'Content-Transfer-Encoding: 7bit',<br>   'Content-Disposition: attachment; filename=\"f1.txt\"',<br>   '',<br>   'I am the content of file 1',<br>   '--===============...==--']<br><br>And clean up.<br><br>  &gt;&gt;&gt; testing.tearDownSMTPTesting()<br>  &gt;&gt;&gt; mailer.smtp<br>  &lt;class smtplib.SMTP at ...&gt;<br>  &gt;&gt;&gt; delivery._queuePath == 'some_path'<br>  True<br>  &gt;&gt;&gt; testing.sentMails<br>  []<br><br><br>=======================<br>Changes for lovely.mail<br>=======================<br><br>After<br>=====<br><br>2009/09/08 0.3.1<br>================<br><br> - allow the use of directMailDelivery for testing<br> - handle attachments according to their type<br><br>2009/07/30 0.3.0<br>================<br><br> - added attachments<br><br>2009/04/22 0.2.0<br>================<br><br> - stop remaining QueueProcessThread on tearDown because python 2.5 doesn't<br>   terminate.<br><br>2008/04/22 0.1.3<br>================<br><br>- make the testmailer compatible to the latest zope.sendmail package<br><br>2007/12/10 0.1.2<br>================<br><br>- move stuff to zope.org and pypi<br><br>2007/08/23 0.1.1<br>================<br><br>- added remotemail.py for remote sendmail tasks<br><br>2007/06/20 0.1.0a1<br>==================<br><br>- added TestMailDelivery utility implementation<br><br>- changed to current bootstrap.py<br><br>- added this file<br><br>- cleaned imports<br><br><br>Download<br>========\n          </div>"}, "last_serial": 794367, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "3ed35a17ed0e1d77d87bc4b6205e49d3", "sha256": "5cffc150f9298d345531116c287b029ce803a6680f8e4d8e9ec3079e9e17ecd9"}, "downloads": -1, "filename": "lovely.mail-0.1.2-py2.4.egg", "has_sig": false, "md5_digest": "3ed35a17ed0e1d77d87bc4b6205e49d3", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 16555, "upload_time": "2007-12-10T15:08:41", "upload_time_iso_8601": "2007-12-10T15:08:41Z", "url": "https://files.pythonhosted.org/packages/4b/fd/f6c58f325e302873a30ca3b8d6ca88273979708c317aed9ed89a06816566/lovely.mail-0.1.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a5b2be5a59f39bafc968711110f9f97", "sha256": "af80ecf2d6446333ef9a02bbc450a3cbbc2453b9a7c069d3f1fd984ae789d448"}, "downloads": -1, "filename": "lovely.mail-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9a5b2be5a59f39bafc968711110f9f97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7914, "upload_time": "2007-12-10T15:08:41", "upload_time_iso_8601": "2007-12-10T15:08:41Z", "url": "https://files.pythonhosted.org/packages/33/bc/ec9259973400e727f73df6bcf72b52c2e43e39abe43e82dcb6ef65d8aa72/lovely.mail-0.1.2.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2ce646c0f0b304f64fe78b1735f9b66c", "sha256": "e7721ec93c65ac029dbd2005e64b5fafa5081393a1c350d33d24275e88291c3d"}, "downloads": -1, "filename": "lovely.mail-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2ce646c0f0b304f64fe78b1735f9b66c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9485, "upload_time": "2009-09-08T09:11:42", "upload_time_iso_8601": "2009-09-08T09:11:42.532232Z", "url": "https://files.pythonhosted.org/packages/cd/1e/1748e3cf25db13ffd3477e93887313ff614eecd32485497403d615880b1d/lovely.mail-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ce646c0f0b304f64fe78b1735f9b66c", "sha256": "e7721ec93c65ac029dbd2005e64b5fafa5081393a1c350d33d24275e88291c3d"}, "downloads": -1, "filename": "lovely.mail-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2ce646c0f0b304f64fe78b1735f9b66c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9485, "upload_time": "2009-09-08T09:11:42", "upload_time_iso_8601": "2009-09-08T09:11:42.532232Z", "url": "https://files.pythonhosted.org/packages/cd/1e/1748e3cf25db13ffd3477e93887313ff614eecd32485497403d615880b1d/lovely.mail-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:41 2020"}