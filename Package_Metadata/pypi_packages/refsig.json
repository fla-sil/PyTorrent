{"info": {"author": "Daniel Uher in affiliation with FNUSA-ICRC Brno and BUT Brno", "author_email": "daniel-uher@hotmail.com", "bugtrack_url": null, "classifiers": [], "description": "refsig 1.0.5\r\n---------------------\r\n\r\nThe refsig package works as tool for identifying the referential signal from a set of unipolar iEEG data.\r\n\r\nPackage contains 3 methods for obtaining the reference:\r\n\r\n(1) The first method creates the referential signal for the given iEEG data set using Method I from [1].\r\nIt does so using a comparative method based on correlation coefficient among the ICs of unipolar and bipolar montage.\r\nThe method does not calculate the referential signal, however it merely locates one unipolar independent component,\r\nwhich has the lowest correlation coefficient with any bipolar IC.\r\n\r\n(2) Second method creates the referential signal of an iEEG set of data\r\nusing method II described in [1].\r\nThe difference from method I is that this method is solely based on\r\ncalculating the reference instead of locating it amongst unipolar ICs.\r\nThis method has proven to be the most accurate and fastest by the experimental results in [1]\r\nas well as in our own testing. Therefore this method should be used for obtaining the reference.\r\n    \r\n(3) The last method is a calculation of mere average reference from the given set of iEEG data. \r\nThis method is the fastest one, however not as accurate as the methods based on ICA. \r\n\r\nFor import, use:     \r\n\r\n**-> from refsig import getref**\r\n\r\nEach method is then initialized by:  \r\n\r\n**(1) -> getref.find(unipol**, N_iterations = 20, p = 0.2)    \r\n\r\n**(2) -> getref.calc(unipol)** <--this one should be used!   \r\n\r\n**(3) -> getref.avg(unipol)**  \r\n\r\n\twhere unipol is a m*k set of iEEG data, where m is the number of channels\r\n\tand k is the number of samples. \r\n\r\nAll methods return the referential signal as a linear vector 1xk.\r\n\r\nBased on:  \r\n\r\n[1] HU, S., STEAD, M., WORRELL, G. A. Automatic identification and removal of scalp reference signal for intracranial EEGs based on independent component analysis. IEEE Transactions on Biomedical Engineering, 2007.\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DandaPanda/refsig", "keywords": "reference iEEG EEG referential signal ICA", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "refsig", "package_url": "https://pypi.org/project/refsig/", "platform": "", "project_url": "https://pypi.org/project/refsig/", "project_urls": {"Homepage": "https://github.com/DandaPanda/refsig"}, "release_url": "https://pypi.org/project/refsig/1.0.5/", "requires_dist": null, "requires_python": "", "summary": "Package for obtaining the referential signal from a set of iEEG data", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The refsig package works as tool for identifying the referential signal from a set of unipolar iEEG data.</p>\n<p>Package contains 3 methods for obtaining the reference:</p>\n<p>(1) The first method creates the referential signal for the given iEEG data set using Method I from [1].\nIt does so using a comparative method based on correlation coefficient among the ICs of unipolar and bipolar montage.\nThe method does not calculate the referential signal, however it merely locates one unipolar independent component,\nwhich has the lowest correlation coefficient with any bipolar IC.</p>\n<p>(2) Second method creates the referential signal of an iEEG set of data\nusing method II described in [1].\nThe difference from method I is that this method is solely based on\ncalculating the reference instead of locating it amongst unipolar ICs.\nThis method has proven to be the most accurate and fastest by the experimental results in [1]\nas well as in our own testing. Therefore this method should be used for obtaining the reference.</p>\n<p>(3) The last method is a calculation of mere average reference from the given set of iEEG data.\nThis method is the fastest one, however not as accurate as the methods based on ICA.</p>\n<p>For import, use:</p>\n<p><strong>-&gt; from refsig import getref</strong></p>\n<p>Each method is then initialized by:</p>\n<p><strong>(1) -&gt; getref.find(unipol</strong>, N_iterations = 20, p = 0.2)</p>\n<p><strong>(2) -&gt; getref.calc(unipol)</strong> &lt;\u2013this one should be used!</p>\n<p><strong>(3) -&gt; getref.avg(unipol)</strong></p>\n<blockquote>\nwhere unipol is a m*k set of iEEG data, where m is the number of channels\nand k is the number of samples.</blockquote>\n<p>All methods return the referential signal as a linear vector 1xk.</p>\n<p>Based on:</p>\n<p>[1] HU, S., STEAD, M., WORRELL, G. A. Automatic identification and removal of scalp reference signal for intracranial EEGs based on independent component analysis. IEEE Transactions on Biomedical Engineering, 2007.</p>\n\n          </div>"}, "last_serial": 3909246, "releases": {"1.0.4": [{"comment_text": "", "digests": {"md5": "bafd65a5b28f7469e5666fd24e4026b7", "sha256": "d6b5ce6a736a7731eff255eaadad8cb3bc85dfe317f5f57ababeb45015501b87"}, "downloads": -1, "filename": "refsig-1.0.4.tar.gz", "has_sig": false, "md5_digest": "bafd65a5b28f7469e5666fd24e4026b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3642, "upload_time": "2018-05-21T10:33:32", "upload_time_iso_8601": "2018-05-21T10:33:32.023729Z", "url": "https://files.pythonhosted.org/packages/9e/9c/49858dc3bdef45bd86728c85fbcc191ac75e5ebe72fb19e2a690f8f27000/refsig-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "16e2a87627d1b54b4a7b1e19e4e9bf7f", "sha256": "731e7b7a18897b6ee049bc247cfade47bceecec48a3b01e2c23cb136899dddf4"}, "downloads": -1, "filename": "refsig-1.0.5.tar.gz", "has_sig": false, "md5_digest": "16e2a87627d1b54b4a7b1e19e4e9bf7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3655, "upload_time": "2018-05-29T13:59:52", "upload_time_iso_8601": "2018-05-29T13:59:52.672863Z", "url": "https://files.pythonhosted.org/packages/4d/69/f43c3fa5dd6ff898e2cb115150f97ed93486c74533fdf5225348ae1d6a48/refsig-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16e2a87627d1b54b4a7b1e19e4e9bf7f", "sha256": "731e7b7a18897b6ee049bc247cfade47bceecec48a3b01e2c23cb136899dddf4"}, "downloads": -1, "filename": "refsig-1.0.5.tar.gz", "has_sig": false, "md5_digest": "16e2a87627d1b54b4a7b1e19e4e9bf7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3655, "upload_time": "2018-05-29T13:59:52", "upload_time_iso_8601": "2018-05-29T13:59:52.672863Z", "url": "https://files.pythonhosted.org/packages/4d/69/f43c3fa5dd6ff898e2cb115150f97ed93486c74533fdf5225348ae1d6a48/refsig-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:22 2020"}