{"info": {"author": "Michael Marchetti", "author_email": "mike@rstudio.com", "bugtrack_url": null, "classifiers": [], "description": "# The rsconnect-python Library\n\nThis package is a library used by the [`rsconnect-jupyter`](https://github.com/rstudio/rsconnect-jupyter)\npackage to deploy Jupyter notebooks to RStudio Connect. It contains a full deployment\nAPI so can also be used by other Python-based deployment tools. Other types of content\nsupported by RStudio Connect may also be deployed by this package, including WSGi-style\nAPIs and Dash applications.\n\n> **Important:** Dash support in RStudio Connect is currently in beta. You should not\n> rely on it for deployments in production.\n\nA command-line deployment tool is also provided that can be used directly to deploy\nJupyter notebooks, Python APIs and apps. Content types not directly supported by the\nCLI can also be deployed if they include a prepared `manifest.json` file. See\n[\"Deploying R or Other Content\"](#deploying-r-or-other-content) for details.\n\n## Deploying Python Content to RStudio Connect\n\nIn addition to various kinds of R content, RStudio Connect also supports the\ndeployment of Jupyter notebooks, Python APIs (such as `flask`-based) and apps (such\nas Dash). Much like deploying R content to RStudio Connect, there are some\ncaveats to understand when replicating your environment on the RStudio Connect server:\n\nRStudio Connect insists on matching <MAJOR.MINOR> versions of Python. For example,\na server with only Python 3.5 installed will fail to match content deployed with\nPython 3.4. Your administrator may also enable exact Python version matching which\nwill be stricter and require matching major, minor, and patch versions. For more\ninformation see the [RStudio Connect Admin Guide chapter titled Python Version\nMatching](https://docs.rstudio.com/connect/admin/python.html#python-version-matching).\n\n### Installation\n\nTo install `rsconnect-python` from this repository:\n\n```bash\ngit clone https://github.com/rstudio/rsconnect-python\ncd rsconnect-python\npython setup.py install\n```\n\nTo install the current version directly from pip:\n\n```bash\npip install rsconnect-python\n```\n\n### Using the rsconnect CLI\n\nHere's an example command that deploys a Jupyter notebook to RStudio Connect.\n\n```bash\nrsconnect deploy notebook \\\n\t--server https://my.connect.server:3939 \\\n\t--api-key my-api-key \\\n\tmy-notebook.ipynb\n```\n\n> **Note:** The examples here use long command line options, but there are short\n> options (`-s`, `-k`, etc.) available also. Run `rsconnect deploy notebook --help`\n> for details.\n\n### Setting up `rsconnect` CLI auto-completion\n\nIf you would like to use your shell's tab completion support with the `rsconnect`\ncommand, use the command below for the shell you are using.\n\n#### `bash`\n\nIf you are using the `bash` shell, use this to enable tab completion.\n\n```bash\n#~/.bashrc\neval \"$(_RSCONNECT_COMPLETE=source rsconnect)\"\n```\n\n#### `zsh`\n\nIf you are using the `zsh` shell, use this to enable tab completion.\n\n```zsh\n#~/.zshrc\neval \"$(_RSCONNECT_COMPLETE=source_zsh rsconnect)\"\n```\n\nIf you get `command not found: compdef`, you need to add the following lines to your \n`.zshrc` before the completion setup:\n\n```zsh\n#~/.zshrc\nautoload -Uz compinit\ncompinit\n```\n\n### Managing Server Information\n\nThe information used by the `rsconnect` command to communicate with an RStudio Connect\nserver can be tedious to repeat on every command.  To help, the CLI supports the idea\nof saving this information, making it usable by a simple nickname.\n\n> **Important:** One item of information saved is the API key used to authenticate with\n> RStudio Connect.  Although the file where this information is saved is marked as\n> accessible by the owner only, it's important to remember that the key is present\n> in the file as plain text so care must be taken to prevent any unauthorized access\n> to the server information file.\n\n#### TLS Support and RStudio Connect\n\nUsually, an RStudio Connect server will be set up to be accessed in a secure manner,\nusing the `https` protocol rather than simple `http`.  If RStudio Connect is set up\nwith a self-signed certificate, you will need to include the `--insecure` flag on\nall commands.  If RStudio Connect is set up to require a client-side certificate chain,\nyou will need to include the `--cacert` option that points to your certificate\nauthority (CA) trusted certificates file.  Both of these options can be saved along\nwith the URL and API Key for a server.\n\n> **Note:** When certificate information is saved for the server, the specified file\n> is read and its _contents_ are saved under the server's nickname.  If the CA file's\n> contents are ever changed, you will need to add the server information again.\n\nSee the [Network Options](#network-options) section for more details about these options.\n\n#### Remembering Server Information\n\nUse the `add` command to store information about an RStudio Connect server:\n\n```bash\nrsconnect add \\\n\t--api-key my-api-key \\\n\t--server https://my.connect.server:3939 \\\n\t--name myserver\n```\n\n> **Note:** The `rsconnect` CLI will verify that the serve URL and API key\n> are valid.  If either is found not to be, no information will be saved.\n\nIf any of the access information for the server changes, simply rerun the\n`add` command with the new information and it will replace the original\ninformation.\n\nOnce the server's information is saved, you can refer to it by its nickname:\n\n```bash\nrsconnect deploy notebook --name myserver my-notebook.ipynb\n```\n\nIf there is information for only one server saved, this will work too:\n\n```bash\nrsconnect deploy notebook my-notebook.ipynb\n```\n\n#### Listing Server Information\n\nYou can see the list of saved server information with:\n\n```\nrsconnect list\n```\n\n#### Removing Server Information\n\nYou can remove information about a server with:\n\n```\nrsconnect remove --name myserver\n```\n\nRemoving may be done by its nickname (`--name`) or URL (`--server`).\n\n### Verifying Server Information\n\nYou can verify that a URL refers to a running instance of RStudio Connect by using\nthe `details` command:\n\n```bash\nrsconnect details --server https://my.connect.server:3939\n```\n\nIn this form, `rsconnect` will only tell you whether the URL given does, in fact, refer\nto a running RStudio Connect instance.  If you include a valid API key:\n\n```bash\nrsconnect details --server https://my.connect.server:3939 --api-key my-api-key\n```\n\nthe tool will provide the version of RStudio Connect (if the server is configured to\ndivulge that information) and environmental information including versions of Python\nthat are installed on the server.\n\nYou can also use nicknames with the `details` command if you want to verify that the\nstored information is still valid.\n\n### Notebook Deployment Options\n\nThere are a variety of options available to you when deploying a Jupyter notebook to\nRStudio Connect.\n\n#### Including Extra Files\n\nYou can include extra files in the deployment bundle to make them available when your\nnotebook is run by the RStudio Connect server. Just specify them on the command line\nafter the notebook file:\n\n```bash\nrsconnect deploy notebook my-notebook.ipynb data.csv\n```\n\n#### Package Dependencies\n\nIf a `requirements.txt` file exists in the same directory as the notebook file, it will\nbe included in the bundle. It must specify the package dependencies needed to execute\nthe notebook. RStudio Connect will reconstruct the Python environment using the\nspecified package list.\n\nIf there is no `requirements.txt` file or the `--force-generate` option is specified,\nthe package dependencies will be determined from the current Python environment, or\nfrom an alternative Python executable specified via the `--python` option or via the\n`RETICULATE_PYTHON` environment variable:\n\n```bash\nrsconnect deploy notebook --python /path/to/python my-notebook.ipynb\n```\n\nYou can see the packages list that will be included by running `pip freeze` yourself,\nensuring that you use the same Python that you use to run your Jupyter Notebook:\n\n```bash\n/path/to/python -m pip freeze\n```\n\n#### Static (Snapshot) Deployment\n\nBy default, `rsconnect` deploys the original notebook with all its source code. This\nenables the RStudio Connect server to re-run the notebook upon request or on a schedule.\n\nIf you just want to publish an HTML snapshot of the notebook, you can use the `--static`\noption. This will cause `rsconnect` to execute your notebook locally to produce the HTML\nfile, then publish the HTML file to the RStudio Connect server:\n\n```bash\nrsconnect deploy notebook --static my-notebook.ipynb\n```\n\n### Creating a Manifest for Future Deployment\n\nYou can create a `manifest.json` file for a Jupyter Notebook, then use that manifest\nin a later deployment.  Use the `write-manifest` command to do this.\n\nThe `write-manifest` command will also create a `requirements.txt` file, if it does\nnot already exist or the `--force-generate` option is specified. It will contain the\npackage dependencies from the current Python environment, or from an alternative\nPython executable specified in the `--python` option or via the `RETICULATE_PYTHON`\nenvironment variable.\n\nHere is an example of the `write-manifest` command:\n\n```bash\nrsconnect write-manifest notebook my-notebook.ipynb\n```\n\n> **Note:** Manifests for static (pre-rendered) notebooks cannot be created.\n\n### API/Application Deployment Options\n\nThere are a variety of options available to you when deploying a Python WSGi-style\nAPI or Dash application.  All options below apply equally to `api` and `dash`\nsub-commands.\n\n#### Including Extra Files\n\nYou can include extra files in the deployment bundle to make them available when your\nAPI or application is run by the RStudio Connect server. Just specify them on the\ncommand line after the API or application directory:\n\n```bash\nrsconnect deploy api flask-api/ data.csv\n```\n\nSince deploying an API or application starts at a directory level, there will be times\nwhen some files under that directory subtree should not be included in the deployment\nor manifest.  Use the `--exclude` option to specify files to exclude.  An exclusion may\nbe a glob pattern and the `--exclude` option may be repeated.\n\n```bash\nrsconnect deploy dash --exclude \"workfiles/*\" dash-app/ data.csv\n```\n\nYou should always quote a glob pattern so that it will be passed to `rsconnect` as-is\ninstead of letting the shell expand it.  If a file is specifically listed as an extra\nfile that also matches an exclusion pattern, the file will still be included in the\ndeployment (i.e., extra files trumps exclusions).\n\n#### Package Dependencies\n\nIf a `requirements.txt` file exists in the API/application directory, it will be\nincluded in the bundle. It must specify the package dependencies needed to execute\nthe API or application. RStudio Connect will reconstruct the Python environment using\nthe specified package list.\n\nIf there is no `requirements.txt` file or the `--force-generate` option is specified,\nthe package dependencies will be determined from the current Python environment, or\nfrom an alternative Python executable specified via the `--python` option or via the\n`RETICULATE_PYTHON` environment variable:\n\n```bash\nrsconnect deploy api --python /path/to/python my-api/\n```\n\nYou can see the packages list that will be included by running `pip freeze` yourself,\nensuring that you use the same Python that you use to run your API or application:\n\n```bash\n/path/to/python -m pip freeze\n```\n\n### Creating a Manifest for Future Deployment\n\nYou can create a `manifest.json` file for an API or application, then use that\nmanifest in a later deployment.  Use the `write-manifest` command to do this.\n\nThe `write-manifest` command will also create a `requirements.txt` file, if it does\nnot already exist or the `--force-generate` option is specified. It will contain\nthe package dependencies from the current Python environment, or from an alternative\nPython executable specified in the `--python` option or via the `RETICULATE_PYTHON`\nenvironment variable.\n\nHere is an example of the `write-manifest` command:\n\n```bash\nrsconnect write-manifest api my-api/\n```\n\n### Deploying R or Other Content\n\nYou can deploy other content that has an existing RStudio Connect `manifest.json`\nfile. For example, if you download and unpack a source bundle from RStudio Connect,\nyou can deploy the resulting directory. The options are similar to notebook or\nAPI/application deployment; see `rsconnect deploy manifest --help` for details.\n\nHere is an example of the `deploy manifest` command:\n\n```bash\nrsconnect deploy manifest /path/to/manifest.json\n```\n\n> **Note:** In this case, the existing content is deployed as-is. Python environment\n> inspection and notebook pre-rendering, if needed, are assumed to be done already\n> and represented in the manifest.\n\nThe argument to `deploy manifest` may also be a directory so long as that directory\ncontains a `manifest.json` file.\n\nIf you have R content but don't have a `manifest.json` file, you can use the RStudio\nIDE to create the manifest. See the help for the `rsconnect::writeManifest` R function:\n\n```r\ninstall.packages('rsconnect')\nlibrary(rsconnect)\n?rsconnect::writeManifest\n```\n\n### Options for All Types of Deployments\n\nThese options apply to any type of content deployment.\n\n#### Title\n\nThe title of the deployed content is, by default, derived from the filename. For\nexample, if you deploy `my-notebook.ipynb`, the title will be `my-notebook`. To change\nthis, use the `--title` option:\n\n```\nrsconnect deploy notebook --title \"My Notebook\" my-notebook.ipynb\n```\n\nWhen using `rsconnect deploy api` or `rsconnect deploy dash`, the title is derived\nfrom the directory containing the API or application.\n\nWhen using `rsconnect deploy manifest`, the title is derived from the primary\nfilename referenced in the manifest.\n\n### Network Options\n\nWhen specifying information that `rsconnect` needs to be able to interact with RStudio\nConnect, you can tailor how transport layer security is performed.\n\n#### TLS/SSL Certificates\n\nRStudio Connect servers can be configured to use TLS/SSL. If your server's certificate\nis trusted by your Jupyter Notebook server, API client or user's browser, then you\ndon't need to do anything special. You can test this out with the `details` command:\n\n```bash\nrsconnect details --api-key my-api-key --server https://my.connect.server:3939\n```\n\nIf this fails with a TLS Certificate Validation error, then you have two options.\n\n* Provide the Root CA certificate that is at the root of the signing chain for your\n  RStudio Connect server. This will enable `rsconnect` to securely validate the\n  server's TLS certificate.\n\n\t```bash\n\trsconnect details \\\n\t\t--api-key my-api-key \\\n\t\t--server https://my.connect.server:3939 \\\n\t\t--cacert /path/to/certificate.pem\n\t```\n\n* RStudio Connect is in \"insecure mode\". This disables TLS certificate verification,\n  which results in a less secure connection.\n\n\t```bash\n\trsconnect add \\\n\t\t--api-key my-api-key \\\n\t\t--server https://my.connect.server:3939 \\\n\t\t--insecure\n\t```\n\nOnce you work out the combination of options that allow you to successfully work with\nan instance of RStudio Connect, you'll probably want to use the `add` command to have\n`rsconnect` remember those options and allow you to just use a nickname.\n\n### Updating a Deployment\n\nIf you deploy a file again to the same server, `rsconnect` will update the previous\ndeployment. This means that you can keep running `rsconnect deploy notebook my-notebook.ipynb`\nas you develop new versions of your notebook. The same applies to other Python content\ntypes.\n\n#### Forcing a New Deployment\n\nTo bypass this behavior and force a new deployment, use the `--new` option:\n\n```bash\nrsconnect deploy dash --new my-app/\n```\n\n#### Updating a Different Deployment\n\nIf you want to update an existing deployment but don't have the saved deployment data,\nyou can provide the app's numeric ID or GUID on the command line:\n\n```bash\nrsconnect deploy notebook --app-id 123456 my-notebook.ipynb\n```\n\nYou must be the owner of the target deployment, or a collaborator with permission to\nchange the content. The type of content (static notebook, notebook with source code,\nAPI, or application) must match the existing deployment.\n\n> **Note:** There is no confirmation required to update a deployment. If you do so\n> accidentally, use the \"Source Versions\" dialog in the RStudio Connect dashboard to\n> activate the previous version and remove the erroneous one.\n\n##### Finding the App ID\n\nThe App ID associated with a piece of content you have previously deployed from the\n`rsconnect` command line interface can be found easily by querying the deployment\ninformation using the `info` command. For more information, see the\n[Showing the Deployment Information](#showing-the-deployment-information) section.\n\nIf the content was deployed elsewhere or `info` does not return the correct App ID,\nbut you can open the content on RStudio Connect, find the content and open it in a\nbrowser. The URL in your browser's location bar will contain `#/apps/NNN` where `NNN`\nis your App ID. The GUID identifier for the app may be found on the **Info** tab for\nthe content in the RStudio Connect UI.\n\n#### Showing the Deployment Information\n\nYou can see the information that the `rsconnect` command has saved for the most recent\ndeployment with the `info` command:\n\n```bash\nrsconnect info my-notebook.ipynb\n```\n\nIf you have deployed to multiple servers, the most recent deployment information for\neach server will be shown. This command also displays the path to the file where the\ndeployment data is stored.\n\n## Stored Information Files\n\nStored information files are stored in a platform-specific directory:\n\n| Platform | Location                                                           |\n| -------- | ------------------------------------------------------------------ |\n| Mac      | `$HOME/Library/Application Support/rsconnect-python/`              |\n| Linux    | `$HOME/.rsconnect-python/` or `$XDG_CONFIG_HOME/rsconnect-python/` |\n| Windows  | `$APPDATA/rsconnect-python`                                        |\n\nRemembered server information is stored in the `servers.json` file in that directory.\n\n### Deployment Data\n\nAfter a deployment is completed, information about the deployment is saved\nto enable later redeployment. This data is stored alongside the deployed file,\nin an `rsconnect-python` subdirectory, if possible. If that location is not writable\nduring deployment, then the deployment data will be stored in the global configuration\ndirectory specified above.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rstudio/rsconnect-python", "keywords": "", "license": "GPL-2.0", "maintainer": "", "maintainer_email": "", "name": "rsconnect-python", "package_url": "https://pypi.org/project/rsconnect-python/", "platform": "", "project_url": "https://pypi.org/project/rsconnect-python/", "project_urls": {"Documentation": "https://docs.rstudio.com/rsconnect-python", "Homepage": "http://github.com/rstudio/rsconnect-python"}, "release_url": "https://pypi.org/project/rsconnect-python/1.4.4.1/", "requires_dist": ["six", "click"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Python integration with RStudio Connect", "version": "1.4.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>The rsconnect-python Library</h1>\n<p>This package is a library used by the <a href=\"https://github.com/rstudio/rsconnect-jupyter\" rel=\"nofollow\"><code>rsconnect-jupyter</code></a>\npackage to deploy Jupyter notebooks to RStudio Connect. It contains a full deployment\nAPI so can also be used by other Python-based deployment tools. Other types of content\nsupported by RStudio Connect may also be deployed by this package, including WSGi-style\nAPIs and Dash applications.</p>\n<blockquote>\n<p><strong>Important:</strong> Dash support in RStudio Connect is currently in beta. You should not\nrely on it for deployments in production.</p>\n</blockquote>\n<p>A command-line deployment tool is also provided that can be used directly to deploy\nJupyter notebooks, Python APIs and apps. Content types not directly supported by the\nCLI can also be deployed if they include a prepared <code>manifest.json</code> file. See\n<a href=\"#deploying-r-or-other-content\" rel=\"nofollow\">\"Deploying R or Other Content\"</a> for details.</p>\n<h2>Deploying Python Content to RStudio Connect</h2>\n<p>In addition to various kinds of R content, RStudio Connect also supports the\ndeployment of Jupyter notebooks, Python APIs (such as <code>flask</code>-based) and apps (such\nas Dash). Much like deploying R content to RStudio Connect, there are some\ncaveats to understand when replicating your environment on the RStudio Connect server:</p>\n<p>RStudio Connect insists on matching &lt;MAJOR.MINOR&gt; versions of Python. For example,\na server with only Python 3.5 installed will fail to match content deployed with\nPython 3.4. Your administrator may also enable exact Python version matching which\nwill be stricter and require matching major, minor, and patch versions. For more\ninformation see the <a href=\"https://docs.rstudio.com/connect/admin/python.html#python-version-matching\" rel=\"nofollow\">RStudio Connect Admin Guide chapter titled Python Version\nMatching</a>.</p>\n<h3>Installation</h3>\n<p>To install <code>rsconnect-python</code> from this repository:</p>\n<pre>git clone https://github.com/rstudio/rsconnect-python\n<span class=\"nb\">cd</span> rsconnect-python\npython setup.py install\n</pre>\n<p>To install the current version directly from pip:</p>\n<pre>pip install rsconnect-python\n</pre>\n<h3>Using the rsconnect CLI</h3>\n<p>Here's an example command that deploys a Jupyter notebook to RStudio Connect.</p>\n<pre>rsconnect deploy notebook <span class=\"se\">\\</span>\n\t--server https://my.connect.server:3939 <span class=\"se\">\\</span>\n\t--api-key my-api-key <span class=\"se\">\\</span>\n\tmy-notebook.ipynb\n</pre>\n<blockquote>\n<p><strong>Note:</strong> The examples here use long command line options, but there are short\noptions (<code>-s</code>, <code>-k</code>, etc.) available also. Run <code>rsconnect deploy notebook --help</code>\nfor details.</p>\n</blockquote>\n<h3>Setting up <code>rsconnect</code> CLI auto-completion</h3>\n<p>If you would like to use your shell's tab completion support with the <code>rsconnect</code>\ncommand, use the command below for the shell you are using.</p>\n<h4><code>bash</code></h4>\n<p>If you are using the <code>bash</code> shell, use this to enable tab completion.</p>\n<pre><span class=\"c1\">#~/.bashrc</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"k\">$(</span><span class=\"nv\">_RSCONNECT_COMPLETE</span><span class=\"o\">=</span><span class=\"nb\">source</span> rsconnect<span class=\"k\">)</span><span class=\"s2\">\"</span>\n</pre>\n<h4><code>zsh</code></h4>\n<p>If you are using the <code>zsh</code> shell, use this to enable tab completion.</p>\n<pre><span class=\"c1\">#~/.zshrc</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"k\">$(</span><span class=\"nv\">_RSCONNECT_COMPLETE</span><span class=\"o\">=</span>source_zsh rsconnect<span class=\"k\">)</span><span class=\"s2\">\"</span>\n</pre>\n<p>If you get <code>command not found: compdef</code>, you need to add the following lines to your\n<code>.zshrc</code> before the completion setup:</p>\n<pre><span class=\"c1\">#~/.zshrc</span>\nautoload -Uz compinit\ncompinit\n</pre>\n<h3>Managing Server Information</h3>\n<p>The information used by the <code>rsconnect</code> command to communicate with an RStudio Connect\nserver can be tedious to repeat on every command.  To help, the CLI supports the idea\nof saving this information, making it usable by a simple nickname.</p>\n<blockquote>\n<p><strong>Important:</strong> One item of information saved is the API key used to authenticate with\nRStudio Connect.  Although the file where this information is saved is marked as\naccessible by the owner only, it's important to remember that the key is present\nin the file as plain text so care must be taken to prevent any unauthorized access\nto the server information file.</p>\n</blockquote>\n<h4>TLS Support and RStudio Connect</h4>\n<p>Usually, an RStudio Connect server will be set up to be accessed in a secure manner,\nusing the <code>https</code> protocol rather than simple <code>http</code>.  If RStudio Connect is set up\nwith a self-signed certificate, you will need to include the <code>--insecure</code> flag on\nall commands.  If RStudio Connect is set up to require a client-side certificate chain,\nyou will need to include the <code>--cacert</code> option that points to your certificate\nauthority (CA) trusted certificates file.  Both of these options can be saved along\nwith the URL and API Key for a server.</p>\n<blockquote>\n<p><strong>Note:</strong> When certificate information is saved for the server, the specified file\nis read and its <em>contents</em> are saved under the server's nickname.  If the CA file's\ncontents are ever changed, you will need to add the server information again.</p>\n</blockquote>\n<p>See the <a href=\"#network-options\" rel=\"nofollow\">Network Options</a> section for more details about these options.</p>\n<h4>Remembering Server Information</h4>\n<p>Use the <code>add</code> command to store information about an RStudio Connect server:</p>\n<pre>rsconnect add <span class=\"se\">\\</span>\n\t--api-key my-api-key <span class=\"se\">\\</span>\n\t--server https://my.connect.server:3939 <span class=\"se\">\\</span>\n\t--name myserver\n</pre>\n<blockquote>\n<p><strong>Note:</strong> The <code>rsconnect</code> CLI will verify that the serve URL and API key\nare valid.  If either is found not to be, no information will be saved.</p>\n</blockquote>\n<p>If any of the access information for the server changes, simply rerun the\n<code>add</code> command with the new information and it will replace the original\ninformation.</p>\n<p>Once the server's information is saved, you can refer to it by its nickname:</p>\n<pre>rsconnect deploy notebook --name myserver my-notebook.ipynb\n</pre>\n<p>If there is information for only one server saved, this will work too:</p>\n<pre>rsconnect deploy notebook my-notebook.ipynb\n</pre>\n<h4>Listing Server Information</h4>\n<p>You can see the list of saved server information with:</p>\n<pre><code>rsconnect list\n</code></pre>\n<h4>Removing Server Information</h4>\n<p>You can remove information about a server with:</p>\n<pre><code>rsconnect remove --name myserver\n</code></pre>\n<p>Removing may be done by its nickname (<code>--name</code>) or URL (<code>--server</code>).</p>\n<h3>Verifying Server Information</h3>\n<p>You can verify that a URL refers to a running instance of RStudio Connect by using\nthe <code>details</code> command:</p>\n<pre>rsconnect details --server https://my.connect.server:3939\n</pre>\n<p>In this form, <code>rsconnect</code> will only tell you whether the URL given does, in fact, refer\nto a running RStudio Connect instance.  If you include a valid API key:</p>\n<pre>rsconnect details --server https://my.connect.server:3939 --api-key my-api-key\n</pre>\n<p>the tool will provide the version of RStudio Connect (if the server is configured to\ndivulge that information) and environmental information including versions of Python\nthat are installed on the server.</p>\n<p>You can also use nicknames with the <code>details</code> command if you want to verify that the\nstored information is still valid.</p>\n<h3>Notebook Deployment Options</h3>\n<p>There are a variety of options available to you when deploying a Jupyter notebook to\nRStudio Connect.</p>\n<h4>Including Extra Files</h4>\n<p>You can include extra files in the deployment bundle to make them available when your\nnotebook is run by the RStudio Connect server. Just specify them on the command line\nafter the notebook file:</p>\n<pre>rsconnect deploy notebook my-notebook.ipynb data.csv\n</pre>\n<h4>Package Dependencies</h4>\n<p>If a <code>requirements.txt</code> file exists in the same directory as the notebook file, it will\nbe included in the bundle. It must specify the package dependencies needed to execute\nthe notebook. RStudio Connect will reconstruct the Python environment using the\nspecified package list.</p>\n<p>If there is no <code>requirements.txt</code> file or the <code>--force-generate</code> option is specified,\nthe package dependencies will be determined from the current Python environment, or\nfrom an alternative Python executable specified via the <code>--python</code> option or via the\n<code>RETICULATE_PYTHON</code> environment variable:</p>\n<pre>rsconnect deploy notebook --python /path/to/python my-notebook.ipynb\n</pre>\n<p>You can see the packages list that will be included by running <code>pip freeze</code> yourself,\nensuring that you use the same Python that you use to run your Jupyter Notebook:</p>\n<pre>/path/to/python -m pip freeze\n</pre>\n<h4>Static (Snapshot) Deployment</h4>\n<p>By default, <code>rsconnect</code> deploys the original notebook with all its source code. This\nenables the RStudio Connect server to re-run the notebook upon request or on a schedule.</p>\n<p>If you just want to publish an HTML snapshot of the notebook, you can use the <code>--static</code>\noption. This will cause <code>rsconnect</code> to execute your notebook locally to produce the HTML\nfile, then publish the HTML file to the RStudio Connect server:</p>\n<pre>rsconnect deploy notebook --static my-notebook.ipynb\n</pre>\n<h3>Creating a Manifest for Future Deployment</h3>\n<p>You can create a <code>manifest.json</code> file for a Jupyter Notebook, then use that manifest\nin a later deployment.  Use the <code>write-manifest</code> command to do this.</p>\n<p>The <code>write-manifest</code> command will also create a <code>requirements.txt</code> file, if it does\nnot already exist or the <code>--force-generate</code> option is specified. It will contain the\npackage dependencies from the current Python environment, or from an alternative\nPython executable specified in the <code>--python</code> option or via the <code>RETICULATE_PYTHON</code>\nenvironment variable.</p>\n<p>Here is an example of the <code>write-manifest</code> command:</p>\n<pre>rsconnect write-manifest notebook my-notebook.ipynb\n</pre>\n<blockquote>\n<p><strong>Note:</strong> Manifests for static (pre-rendered) notebooks cannot be created.</p>\n</blockquote>\n<h3>API/Application Deployment Options</h3>\n<p>There are a variety of options available to you when deploying a Python WSGi-style\nAPI or Dash application.  All options below apply equally to <code>api</code> and <code>dash</code>\nsub-commands.</p>\n<h4>Including Extra Files</h4>\n<p>You can include extra files in the deployment bundle to make them available when your\nAPI or application is run by the RStudio Connect server. Just specify them on the\ncommand line after the API or application directory:</p>\n<pre>rsconnect deploy api flask-api/ data.csv\n</pre>\n<p>Since deploying an API or application starts at a directory level, there will be times\nwhen some files under that directory subtree should not be included in the deployment\nor manifest.  Use the <code>--exclude</code> option to specify files to exclude.  An exclusion may\nbe a glob pattern and the <code>--exclude</code> option may be repeated.</p>\n<pre>rsconnect deploy dash --exclude <span class=\"s2\">\"workfiles/*\"</span> dash-app/ data.csv\n</pre>\n<p>You should always quote a glob pattern so that it will be passed to <code>rsconnect</code> as-is\ninstead of letting the shell expand it.  If a file is specifically listed as an extra\nfile that also matches an exclusion pattern, the file will still be included in the\ndeployment (i.e., extra files trumps exclusions).</p>\n<h4>Package Dependencies</h4>\n<p>If a <code>requirements.txt</code> file exists in the API/application directory, it will be\nincluded in the bundle. It must specify the package dependencies needed to execute\nthe API or application. RStudio Connect will reconstruct the Python environment using\nthe specified package list.</p>\n<p>If there is no <code>requirements.txt</code> file or the <code>--force-generate</code> option is specified,\nthe package dependencies will be determined from the current Python environment, or\nfrom an alternative Python executable specified via the <code>--python</code> option or via the\n<code>RETICULATE_PYTHON</code> environment variable:</p>\n<pre>rsconnect deploy api --python /path/to/python my-api/\n</pre>\n<p>You can see the packages list that will be included by running <code>pip freeze</code> yourself,\nensuring that you use the same Python that you use to run your API or application:</p>\n<pre>/path/to/python -m pip freeze\n</pre>\n<h3>Creating a Manifest for Future Deployment</h3>\n<p>You can create a <code>manifest.json</code> file for an API or application, then use that\nmanifest in a later deployment.  Use the <code>write-manifest</code> command to do this.</p>\n<p>The <code>write-manifest</code> command will also create a <code>requirements.txt</code> file, if it does\nnot already exist or the <code>--force-generate</code> option is specified. It will contain\nthe package dependencies from the current Python environment, or from an alternative\nPython executable specified in the <code>--python</code> option or via the <code>RETICULATE_PYTHON</code>\nenvironment variable.</p>\n<p>Here is an example of the <code>write-manifest</code> command:</p>\n<pre>rsconnect write-manifest api my-api/\n</pre>\n<h3>Deploying R or Other Content</h3>\n<p>You can deploy other content that has an existing RStudio Connect <code>manifest.json</code>\nfile. For example, if you download and unpack a source bundle from RStudio Connect,\nyou can deploy the resulting directory. The options are similar to notebook or\nAPI/application deployment; see <code>rsconnect deploy manifest --help</code> for details.</p>\n<p>Here is an example of the <code>deploy manifest</code> command:</p>\n<pre>rsconnect deploy manifest /path/to/manifest.json\n</pre>\n<blockquote>\n<p><strong>Note:</strong> In this case, the existing content is deployed as-is. Python environment\ninspection and notebook pre-rendering, if needed, are assumed to be done already\nand represented in the manifest.</p>\n</blockquote>\n<p>The argument to <code>deploy manifest</code> may also be a directory so long as that directory\ncontains a <code>manifest.json</code> file.</p>\n<p>If you have R content but don't have a <code>manifest.json</code> file, you can use the RStudio\nIDE to create the manifest. See the help for the <code>rsconnect::writeManifest</code> R function:</p>\n<pre><span class=\"nf\">install.packages</span><span class=\"p\">(</span><span class=\"s\">'rsconnect'</span><span class=\"p\">)</span>\n<span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">rsconnect</span><span class=\"p\">)</span>\n<span class=\"o\">?</span><span class=\"n\">rsconnect</span><span class=\"o\">::</span><span class=\"n\">writeManifest</span>\n</pre>\n<h3>Options for All Types of Deployments</h3>\n<p>These options apply to any type of content deployment.</p>\n<h4>Title</h4>\n<p>The title of the deployed content is, by default, derived from the filename. For\nexample, if you deploy <code>my-notebook.ipynb</code>, the title will be <code>my-notebook</code>. To change\nthis, use the <code>--title</code> option:</p>\n<pre><code>rsconnect deploy notebook --title \"My Notebook\" my-notebook.ipynb\n</code></pre>\n<p>When using <code>rsconnect deploy api</code> or <code>rsconnect deploy dash</code>, the title is derived\nfrom the directory containing the API or application.</p>\n<p>When using <code>rsconnect deploy manifest</code>, the title is derived from the primary\nfilename referenced in the manifest.</p>\n<h3>Network Options</h3>\n<p>When specifying information that <code>rsconnect</code> needs to be able to interact with RStudio\nConnect, you can tailor how transport layer security is performed.</p>\n<h4>TLS/SSL Certificates</h4>\n<p>RStudio Connect servers can be configured to use TLS/SSL. If your server's certificate\nis trusted by your Jupyter Notebook server, API client or user's browser, then you\ndon't need to do anything special. You can test this out with the <code>details</code> command:</p>\n<pre>rsconnect details --api-key my-api-key --server https://my.connect.server:3939\n</pre>\n<p>If this fails with a TLS Certificate Validation error, then you have two options.</p>\n<ul>\n<li>\n<p>Provide the Root CA certificate that is at the root of the signing chain for your\nRStudio Connect server. This will enable <code>rsconnect</code> to securely validate the\nserver's TLS certificate.</p>\n<pre> rsconnect details <span class=\"se\">\\</span>\n \t--api-key my-api-key <span class=\"se\">\\</span>\n \t--server https://my.connect.server:3939 <span class=\"se\">\\</span>\n \t--cacert /path/to/certificate.pem\n</pre>\n</li>\n<li>\n<p>RStudio Connect is in \"insecure mode\". This disables TLS certificate verification,\nwhich results in a less secure connection.</p>\n<pre> rsconnect add <span class=\"se\">\\</span>\n \t--api-key my-api-key <span class=\"se\">\\</span>\n \t--server https://my.connect.server:3939 <span class=\"se\">\\</span>\n \t--insecure\n</pre>\n</li>\n</ul>\n<p>Once you work out the combination of options that allow you to successfully work with\nan instance of RStudio Connect, you'll probably want to use the <code>add</code> command to have\n<code>rsconnect</code> remember those options and allow you to just use a nickname.</p>\n<h3>Updating a Deployment</h3>\n<p>If you deploy a file again to the same server, <code>rsconnect</code> will update the previous\ndeployment. This means that you can keep running <code>rsconnect deploy notebook my-notebook.ipynb</code>\nas you develop new versions of your notebook. The same applies to other Python content\ntypes.</p>\n<h4>Forcing a New Deployment</h4>\n<p>To bypass this behavior and force a new deployment, use the <code>--new</code> option:</p>\n<pre>rsconnect deploy dash --new my-app/\n</pre>\n<h4>Updating a Different Deployment</h4>\n<p>If you want to update an existing deployment but don't have the saved deployment data,\nyou can provide the app's numeric ID or GUID on the command line:</p>\n<pre>rsconnect deploy notebook --app-id <span class=\"m\">123456</span> my-notebook.ipynb\n</pre>\n<p>You must be the owner of the target deployment, or a collaborator with permission to\nchange the content. The type of content (static notebook, notebook with source code,\nAPI, or application) must match the existing deployment.</p>\n<blockquote>\n<p><strong>Note:</strong> There is no confirmation required to update a deployment. If you do so\naccidentally, use the \"Source Versions\" dialog in the RStudio Connect dashboard to\nactivate the previous version and remove the erroneous one.</p>\n</blockquote>\n<h5>Finding the App ID</h5>\n<p>The App ID associated with a piece of content you have previously deployed from the\n<code>rsconnect</code> command line interface can be found easily by querying the deployment\ninformation using the <code>info</code> command. For more information, see the\n<a href=\"#showing-the-deployment-information\" rel=\"nofollow\">Showing the Deployment Information</a> section.</p>\n<p>If the content was deployed elsewhere or <code>info</code> does not return the correct App ID,\nbut you can open the content on RStudio Connect, find the content and open it in a\nbrowser. The URL in your browser's location bar will contain <code>#/apps/NNN</code> where <code>NNN</code>\nis your App ID. The GUID identifier for the app may be found on the <strong>Info</strong> tab for\nthe content in the RStudio Connect UI.</p>\n<h4>Showing the Deployment Information</h4>\n<p>You can see the information that the <code>rsconnect</code> command has saved for the most recent\ndeployment with the <code>info</code> command:</p>\n<pre>rsconnect info my-notebook.ipynb\n</pre>\n<p>If you have deployed to multiple servers, the most recent deployment information for\neach server will be shown. This command also displays the path to the file where the\ndeployment data is stored.</p>\n<h2>Stored Information Files</h2>\n<p>Stored information files are stored in a platform-specific directory:</p>\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>Location</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mac</td>\n<td><code>$HOME/Library/Application Support/rsconnect-python/</code></td>\n</tr>\n<tr>\n<td>Linux</td>\n<td><code>$HOME/.rsconnect-python/</code> or <code>$XDG_CONFIG_HOME/rsconnect-python/</code></td>\n</tr>\n<tr>\n<td>Windows</td>\n<td><code>$APPDATA/rsconnect-python</code></td>\n</tr></tbody></table>\n<p>Remembered server information is stored in the <code>servers.json</code> file in that directory.</p>\n<h3>Deployment Data</h3>\n<p>After a deployment is completed, information about the deployment is saved\nto enable later redeployment. This data is stored alongside the deployed file,\nin an <code>rsconnect-python</code> subdirectory, if possible. If that location is not writable\nduring deployment, then the deployment data will be stored in the global configuration\ndirectory specified above.</p>\n\n          </div>"}, "last_serial": 6939197, "releases": {"1.3.0.7": [{"comment_text": "", "digests": {"md5": "c9b2dc14932ec7503ca9c1bbea598857", "sha256": "f2b80b645830f2d012f71148adbd147924d22f217db1c2cdd5508cfdcbf9d973"}, "downloads": -1, "filename": "rsconnect_python-1.3.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c9b2dc14932ec7503ca9c1bbea598857", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 28064, "upload_time": "2020-01-10T20:07:59", "upload_time_iso_8601": "2020-01-10T20:07:59.698258Z", "url": "https://files.pythonhosted.org/packages/98/d5/b995621d5185aa5b6acc3f9cccb36802509a84a289444a43b9df2b4dc560/rsconnect_python-1.3.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ade1808993ba81b96aa22d61495a62d1", "sha256": "8d300aa410eb0892bb361dc0bef222a79f24d4e10b822bba6c21bfe42b413ace"}, "downloads": -1, "filename": "rsconnect_python-1.3.0.7.tar.gz", "has_sig": false, "md5_digest": "ade1808993ba81b96aa22d61495a62d1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 25904, "upload_time": "2020-01-10T20:08:02", "upload_time_iso_8601": "2020-01-10T20:08:02.092690Z", "url": "https://files.pythonhosted.org/packages/93/43/be12b4b348c2c0e986c0ab6a83a7234631e5e30009eeb321719c57159c2c/rsconnect_python-1.3.0.7.tar.gz", "yanked": false}], "1.4.0.2": [{"comment_text": "", "digests": {"md5": "3ae5a112e9ff3ae9c71844abc418fb00", "sha256": "bdfe94562a42ea360315e81d1b46e705fb1e2da8200c403e7049d1a2ec65cc20"}, "downloads": -1, "filename": "rsconnect_python-1.4.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3ae5a112e9ff3ae9c71844abc418fb00", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 51937, "upload_time": "2020-03-26T14:49:54", "upload_time_iso_8601": "2020-03-26T14:49:54.740883Z", "url": "https://files.pythonhosted.org/packages/01/32/c104702112342913fe90a362760024922d98d665840cc6cc2e6b2353382c/rsconnect_python-1.4.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78925333a90f3dfc2d0f01a7628382d5", "sha256": "4d4e9f3c359695ffdfa9623b3936296c8e06f63db146b559fa78a6dfceb33fc1"}, "downloads": -1, "filename": "rsconnect_python-1.4.0.2.tar.gz", "has_sig": false, "md5_digest": "78925333a90f3dfc2d0f01a7628382d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 53132, "upload_time": "2020-03-26T14:49:55", "upload_time_iso_8601": "2020-03-26T14:49:55.883532Z", "url": "https://files.pythonhosted.org/packages/75/3e/9e1907d9fa31c9fd19aad75b92a56f87af131d64f7c7a24e26427060be97/rsconnect_python-1.4.0.2.tar.gz", "yanked": false}], "1.4.1.1": [{"comment_text": "", "digests": {"md5": "b06d9d83e63c87ef1b4ca9165f35c752", "sha256": "9503473ad0fddeae8980403054048a690762a13baf12661c4b5e8e758c2aa4d4"}, "downloads": -1, "filename": "rsconnect_python-1.4.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b06d9d83e63c87ef1b4ca9165f35c752", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 51983, "upload_time": "2020-03-26T21:33:40", "upload_time_iso_8601": "2020-03-26T21:33:40.312852Z", "url": "https://files.pythonhosted.org/packages/86/e4/785245b229bd6debfdcdb571f216dfb58c8ca7f3f6987ef74d08451f03f4/rsconnect_python-1.4.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b692ab0cd786b9c8ad889f9e2ae58902", "sha256": "efc844a58478e8a470a2089f1d5a73a8d88f7f78ab84a9330498137c6249f113"}, "downloads": -1, "filename": "rsconnect_python-1.4.1.1.tar.gz", "has_sig": false, "md5_digest": "b692ab0cd786b9c8ad889f9e2ae58902", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 53176, "upload_time": "2020-03-26T21:33:41", "upload_time_iso_8601": "2020-03-26T21:33:41.858141Z", "url": "https://files.pythonhosted.org/packages/bc/99/5856871df1ca404fc3510f9a2fcde761191d539ea5e7bdbcc8bd0b7a042c/rsconnect_python-1.4.1.1.tar.gz", "yanked": false}], "1.4.2.1": [{"comment_text": "", "digests": {"md5": "c43938accccceea91b95504b4e8e6363", "sha256": "618ac0511b9a4c9bc1e22104c40a470e8e761d8abc8015953d169cafb9dfef49"}, "downloads": -1, "filename": "rsconnect_python-1.4.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c43938accccceea91b95504b4e8e6363", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 52304, "upload_time": "2020-03-31T20:53:00", "upload_time_iso_8601": "2020-03-31T20:53:00.375435Z", "url": "https://files.pythonhosted.org/packages/ba/a1/75f971085516644b5f4804cb2ace8a3d0d638acabfe8a1f35f767f3a697f/rsconnect_python-1.4.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61c7957c08c3273759bfabed026c1788", "sha256": "a528fb1731432b9d4690928a61a1c2034f9128403ad1baedfe317ad5096bb8a3"}, "downloads": -1, "filename": "rsconnect_python-1.4.2.1.tar.gz", "has_sig": false, "md5_digest": "61c7957c08c3273759bfabed026c1788", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 53464, "upload_time": "2020-03-31T20:53:08", "upload_time_iso_8601": "2020-03-31T20:53:08.035361Z", "url": "https://files.pythonhosted.org/packages/e2/9a/4a30b0d7de190f414b05235d378e27054e1ca1b3b2697c9b5ca5f5e3b85c/rsconnect_python-1.4.2.1.tar.gz", "yanked": false}], "1.4.2.2": [{"comment_text": "", "digests": {"md5": "4fe04a071d3c495b31e6194b366d8197", "sha256": "1bb7567e927f0a74c8e248840560bb1aabcd47ebe0930ddbb04d22a3735327b2"}, "downloads": -1, "filename": "rsconnect_python-1.4.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4fe04a071d3c495b31e6194b366d8197", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 52304, "upload_time": "2020-04-01T14:56:32", "upload_time_iso_8601": "2020-04-01T14:56:32.941270Z", "url": "https://files.pythonhosted.org/packages/bc/be/d4909c50cfc467878e7f1a6a45a799ac740379eae72f9a4dabca1ed68751/rsconnect_python-1.4.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dd2da99fef7167eb9ed4307d6cc03dd", "sha256": "2258dea66897ff4cce6f6124945d855d56db5917580b79509c2b44c8a1965944"}, "downloads": -1, "filename": "rsconnect_python-1.4.2.2.tar.gz", "has_sig": false, "md5_digest": "9dd2da99fef7167eb9ed4307d6cc03dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 53466, "upload_time": "2020-04-01T14:56:33", "upload_time_iso_8601": "2020-04-01T14:56:33.988047Z", "url": "https://files.pythonhosted.org/packages/76/c8/8dfe9cfd15350bbd5990aa2a89d41f8106f773f5ddf9e60ccfa36426ed7e/rsconnect_python-1.4.2.2.tar.gz", "yanked": false}], "1.4.3.1": [{"comment_text": "", "digests": {"md5": "f0c2deae3cb6fc0dff9dfa19059996d0", "sha256": "b092d1a7ffa213c95efd89f9d7183ab012ce7ee874db45baee3f6c77a46d4f6a"}, "downloads": -1, "filename": "rsconnect_python-1.4.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f0c2deae3cb6fc0dff9dfa19059996d0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 52311, "upload_time": "2020-04-01T16:17:12", "upload_time_iso_8601": "2020-04-01T16:17:12.363392Z", "url": "https://files.pythonhosted.org/packages/8e/51/0f856a42a3c8bb98eecc02d3fbcfb55309eba6233c7bf7d42e6793aa9aef/rsconnect_python-1.4.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f93c71796fba7883d98a662472e3b75", "sha256": "759080935fa8e43208e81488133a4af4e3296196a481432ed2493268f2a108a8"}, "downloads": -1, "filename": "rsconnect_python-1.4.3.1.tar.gz", "has_sig": false, "md5_digest": "7f93c71796fba7883d98a662472e3b75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 53471, "upload_time": "2020-04-01T16:17:13", "upload_time_iso_8601": "2020-04-01T16:17:13.691137Z", "url": "https://files.pythonhosted.org/packages/b7/d3/88a05ef07fa98a857fcda83bf65a6aa5d27aa0e255617e06431cae7904e7/rsconnect_python-1.4.3.1.tar.gz", "yanked": false}], "1.4.4.1": [{"comment_text": "", "digests": {"md5": "2b0a2f925b3614da8aaccacd233e8d8b", "sha256": "e81fd84acbe5dc5e053827428c0b412106d36a70a1ab07306ecbef8a14159159"}, "downloads": -1, "filename": "rsconnect_python-1.4.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2b0a2f925b3614da8aaccacd233e8d8b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 52620, "upload_time": "2020-04-02T21:38:07", "upload_time_iso_8601": "2020-04-02T21:38:07.080420Z", "url": "https://files.pythonhosted.org/packages/c3/97/35b52647a740e15caeeaf2a99ba5017d5272674a4c7e11a4887cb33cd2fe/rsconnect_python-1.4.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ccc622e4a14f97465414fefb7e05d711", "sha256": "c2305e6658265f90fb25c41c159f4cd8963de61d2fc58702e55003122f550388"}, "downloads": -1, "filename": "rsconnect_python-1.4.4.1.tar.gz", "has_sig": false, "md5_digest": "ccc622e4a14f97465414fefb7e05d711", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 53846, "upload_time": "2020-04-02T21:38:08", "upload_time_iso_8601": "2020-04-02T21:38:08.433987Z", "url": "https://files.pythonhosted.org/packages/84/b3/005fc704c6a301c466fef9e6a74f6ea036bb31e3c6e55de9006d2a185e6d/rsconnect_python-1.4.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b0a2f925b3614da8aaccacd233e8d8b", "sha256": "e81fd84acbe5dc5e053827428c0b412106d36a70a1ab07306ecbef8a14159159"}, "downloads": -1, "filename": "rsconnect_python-1.4.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2b0a2f925b3614da8aaccacd233e8d8b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 52620, "upload_time": "2020-04-02T21:38:07", "upload_time_iso_8601": "2020-04-02T21:38:07.080420Z", "url": "https://files.pythonhosted.org/packages/c3/97/35b52647a740e15caeeaf2a99ba5017d5272674a4c7e11a4887cb33cd2fe/rsconnect_python-1.4.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ccc622e4a14f97465414fefb7e05d711", "sha256": "c2305e6658265f90fb25c41c159f4cd8963de61d2fc58702e55003122f550388"}, "downloads": -1, "filename": "rsconnect_python-1.4.4.1.tar.gz", "has_sig": false, "md5_digest": "ccc622e4a14f97465414fefb7e05d711", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 53846, "upload_time": "2020-04-02T21:38:08", "upload_time_iso_8601": "2020-04-02T21:38:08.433987Z", "url": "https://files.pythonhosted.org/packages/84/b3/005fc704c6a301c466fef9e6a74f6ea036bb31e3c6e55de9006d2a185e6d/rsconnect_python-1.4.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:42 2020"}