{"info": {"author": "Tai Sakuma", "author_email": "tai.sakuma@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![PyPI version](https://badge.fury.io/py/mantichora.svg)](https://badge.fury.io/py/mantichora) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/mantichora/badges/version.svg)](https://anaconda.org/conda-forge/mantichora) [![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.2581882.svg)](https://doi.org/10.5281/zenodo.2581882) [![Build Status](https://travis-ci.org/alphatwirl/mantichora.svg?branch=master)](https://travis-ci.org/alphatwirl/mantichora) [![codecov](https://codecov.io/gh/alphatwirl/mantichora/branch/master/graph/badge.svg)](https://codecov.io/gh/alphatwirl/mantichora)\n\n# Mantichora\n\nA simple interface to _multiprocessing_ and _threading_\n\n*****\n\n_Mantichora_ provides a simple interface to\n[_multiprocessing_](https://docs.python.org/3/library/multiprocessing.html) and\n[_threading_](https://docs.python.org/3/library/threading.html).\n\n```python\nfrom mantichora import mantichora\n\nwith mantichora() as mcore:\n    mcore.run(func1)\n    mcore.run(func2)\n    mcore.run(func3)\n    mcore.run(func4)\n    results = mcore.returns()\n```\n\n```\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    12559 /    12559 |:  func1\n  71.27% ::::::::::::::::::::::::::::             |    28094 /    39421 |:  func2\n  30.34% ::::::::::::                             |    28084 /    92558 |:  func3\n  35.26% ::::::::::::::                           |    27282 /    77375 |:  func4\n```\n\nYou can simply give Mantichora as many functions as you need to run.\nMantichora will run them concurrently in background processes by using\nmultiprocessing or in different threads by using threading and give\nyou the return values of the functions. The return values are sorted\nin the order of the functions you have originally given to Mantichora.\nProgress bars from [atpbar](https://github.com/alphatwirl/atpbar) can\nbe used in the functions.\n\nThe code in this package was originally developed in the sub-package\n[_concurrently_](https://github.com/alphatwirl/alphatwirl/tree/v0.23.2/alphatwirl/concurrently)\nof [_alphatwirl_](https://github.com/alphatwirl/alphatwirl).\n\n\nThe examples in this file can be also run on Jupyter Notebook. <br />\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/alphatwirl/notebook-mantichora-001/master?filepath=mantichora.ipynb)\n\n*****\n\n- [**Requirement**](#requirement)\n- [**Install**](#install)\n- [**User guide**](#user-guide)\n    - [**Quick start**](#quick-start)\n        - [Import libraries](#import-libraries)\n        - [Define a task function](#define-a-task-function)\n        - [Run tasks concurrently with Mantichora](#run-tasks-concurrently-with-mantichora)\n    - [**Features**](#features)\n        - [Multiprocessing or Threading](#multiprocessing-or-threading)\n        - [Without the `with` statement](#without-the-with-statement)\n            - [`end()`](#end)\n            - [`terminate()`](#terminate)\n        - [Receive results as tasks finish](#receive-results-as-tasks-finish)\n            - [`receive_one()`](#receive_one)\n            - [`receive_finished()`](#receive_finished)\n        - [Logging](#logging)\n        - [Start method of multiprocessing](#start-method-of-multiprocessing)\n- [**License**](#license)\n- [**Contact**](#contact)\n\n*****\n\n## Requirement\n\n- Python 3.6, 3.7, or 3.8\n\n*****\n\n## Install\n\nYou can install with `conda` from conda-forge:\n\n```bash\nconda install -c conda-forge mantichora\n```\n\nor with `pip`:\n\n```bash\npip install -U mantichora\n```\n\n## User guide\n\n### Quick start\n\nI will show here how to use Mantichora by simple examples.\n\n#### Import libraries\n\nWe are going use two python standard libraries\n[time](https://docs.python.org/3/library/time.html) and\n[random](https://docs.python.org/3/library/random.html) in an example\ntask function. In the example task function, we are also going to use\n[atpbar](https://github.com/alphatwirl/atpbar) for progress bars.\nImport these packages and `mantichora`.\n\n```python\nimport time, random\nfrom atpbar import atpbar\nfrom mantichora import mantichora\n```\n\n#### Define a task function\n\nLet us define a simple task function.\n\n```python\ndef task_loop(name, ret=None):\n    n = random.randint(1000, 10000)\n    for i in atpbar(range(n), name=name):\n        time.sleep(0.0001)\n    return ret\n```\n\nThe task in this function is to sleep for `0.0001` seconds as many\ntimes as the number randomly selected from between `1000` and\n`10000`. `atpbar` is used to show a progress bar. The function takes\ntwo arguments: `name`, the label on the progress bar, and `ret`, the\nreturn value of the function.\n\n**Note:** In the multiprocessing mode, the default mode of mantichora,\ntask functions, their arguments, and their return values need to be\n[picklable](https://docs.python.org/3.8/library/pickle.html#what-can-be-pickled-and-unpickled).\n\nYou can just try running this function without using Mantichora.\n\n```python\nresult = task_loop('task1', 'result1')\n```\n\nThis doesn't return immediately. It waits for the function to finish.\nYou will see a progress bar.\n\n```\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    58117 /    58117 |:  task1\n```\n\nThe return value is stored in `result`.\n\n```python\nprint(result)\n```\n\n```\n 'result1'\n```\n\n#### Run tasks concurrently with Mantichora\n\nNow, we run multiple tasks concurrently with Mantichora.\n\n```python\nwith mantichora(nworkers=3) as mcore:\n    mcore.run(task_loop, 'task', ret='result1')\n    mcore.run(task_loop, 'another task', ret='result2')\n    mcore.run(task_loop, 'still another task', ret='result3')\n    mcore.run(task_loop, 'yet another task', ret='result4')\n    mcore.run(task_loop, 'task again', ret='result5')\n    mcore.run(task_loop, 'more task', ret='result6')\n    results = mcore.returns()\n```\n\nIn the example code above, `mantichora` is initialized with an\noptional argument `nworkers`. The `nworkers` specifies the number of\nthe workers. It is `3` in the above example. The default is `4`. At\nmost as many tasks as `nworkers` can run concurrently.\n\nThe [`with`\nstatement](https://docs.python.org/3/reference/compound_stmts.html#the-with-statement)\nis used in the example. This ensures that `mantichora` properly\nends the workers.\n\nYou can give task functions and their arguments to `mcore.run()`. You\ncan call `mcore.run()` as many times as you need. In the above\nexample, `mcore.run()` is called with the same task function with\ndifferent arguments. You can also use a different function each time.\n`mcore.run()` returns immediately; it doesn't wait for the task to\nfinish or even to start. In each call, `mcore.run()` only puts a task\nin a queue. The workers in background processes pick up tasks from the\nqueue and run them.\n\nThe `mcore.returns()` waits until all tasks finish and returns their\nreturn values, which are sorted in the order of the tasks you have\noriginally given to `mcore.run()`.\n\nProgress bars will be shown by `atpbar`.\n\n```\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     1415 /     1415 |:  still another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     7770 /     7770 |:  task again\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    18431 /    18431 |:  yet another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    25641 /    25641 |:  more task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    74669 /    74669 |:  task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    87688 /    87688 |:  another task\n```\n\nThe results are sorted in the original order regardless of the order\nin which the tasks have finished.\n\n```python\nprint(results)\n```\n\n```\n['result1', 'result2', 'result3', 'result4', 'result5', 'result6']\n```\n\n*****\n\n### Features\n\n#### Multiprocessing or Threading\n\n*New in version 0.10.0*\n\nFrom version 0.10.0, you can choose\n[threading](https://docs.python.org/3/library/threading.html) in additional to\n[multiprocessing](https://docs.python.org/3/library/multiprocessing.html). The\ndefault is multiprocessing. Use the option `mode` to use threading.\n\n```python\nmantichora(mode='threading')\n```\n\n\n#### Without the `with` statement\n\n##### `end()`\n\nIf you don't use the `with` statement, you need to call `end()`.\n\n```python\nmcore = mantichora()\n\nmcore.run(task_loop, 'task', ret='result1')\nmcore.run(task_loop, 'another task', ret='result2')\nmcore.run(task_loop, 'still another task', ret='result3')\nmcore.run(task_loop, 'yet another task', ret='result4')\nmcore.run(task_loop, 'task again', ret='result5')\nmcore.run(task_loop, 'more task', ret='result6')\n\nresults = mcore.returns()\n\nmcore.end()\nprint(results)\n```\n\n```\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     4695 /     4695 |:  yet another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     7535 /     7535 |:  still another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9303 /     9303 |:  another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9380 /     9380 |:  task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     5812 /     5812 |:  more task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9437 /     9437 |:  task again\n['result1', 'result2', 'result3', 'result4', 'result5', 'result6']\n```\n\n##### `terminate()`\n\nIn the multiprocessing mode, `mantichora` can be terminated with\n`terminate()`. After `terminate()` is called, `end()` still needs to\nbe called. In the example below, `terminate()` is called after 0.5\nseconds of sleep while some tasks are still running.\n\n```python\nmcore = mantichora()\n\nmcore.run(task_loop, 'task', ret='result1')\nmcore.run(task_loop, 'another task', ret='result2')\nmcore.run(task_loop, 'still another task', ret='result3')\nmcore.run(task_loop, 'yet another task', ret='result4')\nmcore.run(task_loop, 'task again', ret='result5')\nmcore.run(task_loop, 'more task', ret='result6')\n\ntime.sleep(0.5)\n\nmcore.terminate()\nmcore.end()\n```\n\nThe progress bars stop when the tasks are terminated.\n\n```\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     2402 /     2402 |:  still another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     3066 /     3066 |:  another task\n  59.28% :::::::::::::::::::::::                  |     2901 /     4894 |:  task\n  69.24% :::::::::::::::::::::::::::              |     2919 /     4216 |:  yet another task\n   0.00%                                          |        0 /     9552 |:  task again\n   0.00%                                          |        0 /     4898 |:  more task\n```\n\n**Note:**: In the threading mode, `terminate()` does not do anything.\n\n*****\n\n#### Receive results as tasks finish\n\nInstead of waiting for all tasks to finish beofre receiving the\nreulsts, you can get results as tasks finish with the method\n`receive_one()` or `receive_receive()`.\n\n#### `receive_one()`\n\nThe method `receive_one()` returns a pair of the run ID and the return\nvalue of a task function. If no task has finished, `receive_one()`\nwaits until one task finishes. `receive_one()` returns `None` if no\ntasks are outstanding. The method `run()` returns the run ID for the\ntask.\n\n```python\nwith mantichora() as mcore:\n    runids = [ ]\n    runids.append(mcore.run(task_loop, 'task1', ret='result1'))\n    runids.append(mcore.run(task_loop, 'task2', ret='result2'))\n    runids.append(mcore.run(task_loop, 'task3', ret='result3'))\n    runids.append(mcore.run(task_loop, 'task4', ret='result4'))\n    runids.append(mcore.run(task_loop, 'task5', ret='result5'))\n    runids.append(mcore.run(task_loop, 'task6', ret='result6'))\n    #\n    pairs = [ ]\n    for i in range(len(runids)):\n        pairs.append(mcore.receive_one())\n```\n\n```\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     1748 /     1748 |:  task3\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     4061 /     4061 |:  task1\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     2501 /     2501 |:  task5\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     2028 /     2028 |:  task6\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     8206 /     8206 |:  task4\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9157 /     9157 |:  task2\n```\n\nThe `runid` is the list of the run IDs in the order of the tasks that\nhave been given to `run()`.\n\n```python\nprint(runids)\n```\n\n```\n[0, 1, 2, 3, 4, 5]\n```\n\nThe `pairs` are in the order in which the tasks have finished.\n\n```python\nprint(pairs)\n```\n\n```\n[(2, 'result3'), (0, 'result1'), (4, 'result5'), (5, 'result6'), (3, 'result4'), (1, 'result2')]\n```\n\n##### `receive_finished()`\n\nThe method `receive_finished()` returns a list of pairs of the run ID\nand the return value of finished task functions. The method\n`receive_finished()` doesn't wait for a task to finish. It returns an\nempty list if no task has finished.\n\n```python\nwith mantichora() as mcore:\n    runids = [ ]\n    runids.append(mcore.run(task_loop, 'task1', ret='result1'))\n    runids.append(mcore.run(task_loop, 'task2', ret='result2'))\n    runids.append(mcore.run(task_loop, 'task3', ret='result3'))\n    runids.append(mcore.run(task_loop, 'task4', ret='result4'))\n    runids.append(mcore.run(task_loop, 'task5', ret='result5'))\n    runids.append(mcore.run(task_loop, 'task6', ret='result6'))\n    #\n    pairs = [ ]\n    while len(pairs) < len(runids):\n        pairs.extend(mcore.receive_finished())\n```\n\n```\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     3979 /     3979 |:  task3\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     6243 /     6243 |:  task2\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     6640 /     6640 |:  task1\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     8632 /     8632 |:  task4\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     6235 /     6235 |:  task5\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     8325 /     8325 |:  task6\n```\n\nThe `runid` is again the list of the run IDs in the order of the tasks\nthat have been given to `run()`.\n\n```python\nprint(runids)\n```\n\n```\n[0, 1, 2, 3, 4, 5]\n```\n\nThe `pairs` are also again in the order in which the tasks have finished.\n\n```python\nprint(pairs)\n```\n\n```\n[(2, 'result3'), (1, 'result2'), (0, 'result1'), (3, 'result4'), (4, 'result5'), (5, 'result6')]\n```\n\n*****\n\n#### Logging\n\nLogging in background processes is propagated to the main process in\nthe way described in a [section of Logging\nCookbook](https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes).\n\nHere is a simple example task function that uses `logging`. The task\nfunction does logging just before returning.\n\n\n```python\nimport logging\n\ndef task_log(name, ret=None):\n    n = random.randint(1000, 10000)\n    for i in atpbar(range(n), name=name):\n        time.sleep(0.0001)\n    logging.info('finishing \"{}\"'.format(name))\n    return ret\n```\n\nSet the logging stream to a string stream so that we can later\nretrieve the logging as a string.\n\n```python\nimport io\nstream = io.StringIO()\nlogging.basicConfig(level=logging.INFO, stream=stream)\n```\n\nRun the tasks.\n\n```python\nwith mantichora() as mcore:\n    mcore.run(task_log, 'task1', ret='result1')\n    mcore.run(task_log, 'task2', ret='result2')\n    mcore.run(task_log, 'task3', ret='result3')\n    mcore.run(task_log, 'task4', ret='result4')\n    results = mcore.returns()\n```\n\n```\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     4217 /     4217 |:  task2\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     7691 /     7691 |:  task3\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     8140 /     8140 |:  task1\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9814 /     9814 |:  task4\n```\n\nLogging made in the task function in background processes is sent to\nthe main process and written in the string stream.\n\n\n```python\nprint(stream.getvalue())\n```\n\n```\nINFO:root:finishing \"task2\"\nINFO:root:finishing \"task3\"\nINFO:root:finishing \"task1\"\nINFO:root:finishing \"task4\"\n```\n\n*****\n\n#### Start method of multiprocessing\n\n*New in version 0.9.9*\n\nPython multiprocessing has three start methods: `spawn`, `fork`, `forkserver`.\nEach method is described in the Python\n[documentation](https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods).\nMantichora uses the `fork` method by default. You can change the method by the\noption `mp_start_method`. For example, to use the `spawn` method,\n\n```python\nmantichora(mp_start_method='spawn')\n```\n\n- On Jupyter Notebook, the `fork` method is typically the best choice.\n- The `spawn` and `forkserver` methods have extra restrictions, for\n  example, on how the main module is written. The restrictions are\n  described in the Python\n  [documentation](https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods).\n- On MacOS, in the `fork` method, errors with the message `may have\n  been in progress in another thread when fork() was called` might\n  occur. This error might be resolved if the environment variable\n  `OBJC_DISABLE_INITIALIZE_FORK_SAFETY` is set `YES` as suggested at\n  [Stack Overflow](https://stackoverflow.com/questions/50168647/multiprocessing-causes-python-to-crash-and-gives-an-error-may-have-been-in-progr).\n\n\n*****\n\n## License\n\n- mantichora is licensed under the BSD license.\n\n*****\n\n## Contact\n\n- Tai Sakuma - tai.sakuma@gmail.com\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alphatwirl/mantichora", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mantichora", "package_url": "https://pypi.org/project/mantichora/", "platform": "", "project_url": "https://pypi.org/project/mantichora/", "project_urls": {"Homepage": "https://github.com/alphatwirl/mantichora"}, "release_url": "https://pypi.org/project/mantichora/0.10.0/", "requires_dist": ["atpbar (>=1.0.3)"], "requires_python": "", "summary": "A simple interface to multiprocessing and threading", "version": "0.10.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/mantichora\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/806f6b557290f842fd9e8c0c32b18fec7b831f4f/68747470733a2f2f62616467652e667572792e696f2f70792f6d616e746963686f72612e737667\"></a> <a href=\"https://anaconda.org/conda-forge/mantichora\" rel=\"nofollow\"><img alt=\"Anaconda-Server Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ddbb46be654efb5057dc5b3ec84b6fc67f72dfb/68747470733a2f2f616e61636f6e64612e6f72672f636f6e64612d666f7267652f6d616e746963686f72612f6261646765732f76657273696f6e2e737667\"></a> <a href=\"https://doi.org/10.5281/zenodo.2581882\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e605de86c6977140e76880244a3efd60a40f451c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f646f692f31302e353238312f7a656e6f646f2e323538313838322e737667\"></a> <a href=\"https://travis-ci.org/alphatwirl/mantichora\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/186245be97849eacfde582c8e83a16643071880c/68747470733a2f2f7472617669732d63692e6f72672f616c706861747769726c2f6d616e746963686f72612e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/alphatwirl/mantichora\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ee017f443cf5a8c0bbc681f49a343e885688dc9/68747470733a2f2f636f6465636f762e696f2f67682f616c706861747769726c2f6d616e746963686f72612f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>Mantichora</h1>\n<p>A simple interface to <em>multiprocessing</em> and <em>threading</em></p>\n<hr>\n<p><em>Mantichora</em> provides a simple interface to\n<a href=\"https://docs.python.org/3/library/multiprocessing.html\" rel=\"nofollow\"><em>multiprocessing</em></a> and\n<a href=\"https://docs.python.org/3/library/threading.html\" rel=\"nofollow\"><em>threading</em></a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mantichora</span> <span class=\"kn\">import</span> <span class=\"n\">mantichora</span>\n\n<span class=\"k\">with</span> <span class=\"n\">mantichora</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">mcore</span><span class=\"p\">:</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">func1</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">func2</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">func3</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">func4</span><span class=\"p\">)</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">()</span>\n</pre>\n<pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |    12559 /    12559 |:  func1\n  71.27% ::::::::::::::::::::::::::::             |    28094 /    39421 |:  func2\n  30.34% ::::::::::::                             |    28084 /    92558 |:  func3\n  35.26% ::::::::::::::                           |    27282 /    77375 |:  func4\n</code></pre>\n<p>You can simply give Mantichora as many functions as you need to run.\nMantichora will run them concurrently in background processes by using\nmultiprocessing or in different threads by using threading and give\nyou the return values of the functions. The return values are sorted\nin the order of the functions you have originally given to Mantichora.\nProgress bars from <a href=\"https://github.com/alphatwirl/atpbar\" rel=\"nofollow\">atpbar</a> can\nbe used in the functions.</p>\n<p>The code in this package was originally developed in the sub-package\n<a href=\"https://github.com/alphatwirl/alphatwirl/tree/v0.23.2/alphatwirl/concurrently\" rel=\"nofollow\"><em>concurrently</em></a>\nof <a href=\"https://github.com/alphatwirl/alphatwirl\" rel=\"nofollow\"><em>alphatwirl</em></a>.</p>\n<p>The examples in this file can be also run on Jupyter Notebook. <br>\n<a href=\"https://mybinder.org/v2/gh/alphatwirl/notebook-mantichora-001/master?filepath=mantichora.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<hr>\n<ul>\n<li><a href=\"#requirement\" rel=\"nofollow\"><strong>Requirement</strong></a></li>\n<li><a href=\"#install\" rel=\"nofollow\"><strong>Install</strong></a></li>\n<li><a href=\"#user-guide\" rel=\"nofollow\"><strong>User guide</strong></a>\n<ul>\n<li><a href=\"#quick-start\" rel=\"nofollow\"><strong>Quick start</strong></a>\n<ul>\n<li><a href=\"#import-libraries\" rel=\"nofollow\">Import libraries</a></li>\n<li><a href=\"#define-a-task-function\" rel=\"nofollow\">Define a task function</a></li>\n<li><a href=\"#run-tasks-concurrently-with-mantichora\" rel=\"nofollow\">Run tasks concurrently with Mantichora</a></li>\n</ul>\n</li>\n<li><a href=\"#features\" rel=\"nofollow\"><strong>Features</strong></a>\n<ul>\n<li><a href=\"#multiprocessing-or-threading\" rel=\"nofollow\">Multiprocessing or Threading</a></li>\n<li><a href=\"#without-the-with-statement\" rel=\"nofollow\">Without the <code>with</code> statement</a>\n<ul>\n<li><a href=\"#end\" rel=\"nofollow\"><code>end()</code></a></li>\n<li><a href=\"#terminate\" rel=\"nofollow\"><code>terminate()</code></a></li>\n</ul>\n</li>\n<li><a href=\"#receive-results-as-tasks-finish\" rel=\"nofollow\">Receive results as tasks finish</a>\n<ul>\n<li><a href=\"#receive_one\" rel=\"nofollow\"><code>receive_one()</code></a></li>\n<li><a href=\"#receive_finished\" rel=\"nofollow\"><code>receive_finished()</code></a></li>\n</ul>\n</li>\n<li><a href=\"#logging\" rel=\"nofollow\">Logging</a></li>\n<li><a href=\"#start-method-of-multiprocessing\" rel=\"nofollow\">Start method of multiprocessing</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#license\" rel=\"nofollow\"><strong>License</strong></a></li>\n<li><a href=\"#contact\" rel=\"nofollow\"><strong>Contact</strong></a></li>\n</ul>\n<hr>\n<h2>Requirement</h2>\n<ul>\n<li>Python 3.6, 3.7, or 3.8</li>\n</ul>\n<hr>\n<h2>Install</h2>\n<p>You can install with <code>conda</code> from conda-forge:</p>\n<pre>conda install -c conda-forge mantichora\n</pre>\n<p>or with <code>pip</code>:</p>\n<pre>pip install -U mantichora\n</pre>\n<h2>User guide</h2>\n<h3>Quick start</h3>\n<p>I will show here how to use Mantichora by simple examples.</p>\n<h4>Import libraries</h4>\n<p>We are going use two python standard libraries\n<a href=\"https://docs.python.org/3/library/time.html\" rel=\"nofollow\">time</a> and\n<a href=\"https://docs.python.org/3/library/random.html\" rel=\"nofollow\">random</a> in an example\ntask function. In the example task function, we are also going to use\n<a href=\"https://github.com/alphatwirl/atpbar\" rel=\"nofollow\">atpbar</a> for progress bars.\nImport these packages and <code>mantichora</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"o\">,</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">atpbar</span> <span class=\"kn\">import</span> <span class=\"n\">atpbar</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mantichora</span> <span class=\"kn\">import</span> <span class=\"n\">mantichora</span>\n</pre>\n<h4>Define a task function</h4>\n<p>Let us define a simple task function.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">task_loop</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">atpbar</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.0001</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span>\n</pre>\n<p>The task in this function is to sleep for <code>0.0001</code> seconds as many\ntimes as the number randomly selected from between <code>1000</code> and\n<code>10000</code>. <code>atpbar</code> is used to show a progress bar. The function takes\ntwo arguments: <code>name</code>, the label on the progress bar, and <code>ret</code>, the\nreturn value of the function.</p>\n<p><strong>Note:</strong> In the multiprocessing mode, the default mode of mantichora,\ntask functions, their arguments, and their return values need to be\n<a href=\"https://docs.python.org/3.8/library/pickle.html#what-can-be-pickled-and-unpickled\" rel=\"nofollow\">picklable</a>.</p>\n<p>You can just try running this function without using Mantichora.</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">task_loop</span><span class=\"p\">(</span><span class=\"s1\">'task1'</span><span class=\"p\">,</span> <span class=\"s1\">'result1'</span><span class=\"p\">)</span>\n</pre>\n<p>This doesn't return immediately. It waits for the function to finish.\nYou will see a progress bar.</p>\n<pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |    58117 /    58117 |:  task1\n</code></pre>\n<p>The return value is stored in <code>result</code>.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<pre><code> 'result1'\n</code></pre>\n<h4>Run tasks concurrently with Mantichora</h4>\n<p>Now, we run multiple tasks concurrently with Mantichora.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">mantichora</span><span class=\"p\">(</span><span class=\"n\">nworkers</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mcore</span><span class=\"p\">:</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result1'</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result2'</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'still another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result3'</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'yet another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result4'</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task again'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result5'</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'more task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result6'</span><span class=\"p\">)</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">()</span>\n</pre>\n<p>In the example code above, <code>mantichora</code> is initialized with an\noptional argument <code>nworkers</code>. The <code>nworkers</code> specifies the number of\nthe workers. It is <code>3</code> in the above example. The default is <code>4</code>. At\nmost as many tasks as <code>nworkers</code> can run concurrently.</p>\n<p>The <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-with-statement\" rel=\"nofollow\"><code>with</code>\nstatement</a>\nis used in the example. This ensures that <code>mantichora</code> properly\nends the workers.</p>\n<p>You can give task functions and their arguments to <code>mcore.run()</code>. You\ncan call <code>mcore.run()</code> as many times as you need. In the above\nexample, <code>mcore.run()</code> is called with the same task function with\ndifferent arguments. You can also use a different function each time.\n<code>mcore.run()</code> returns immediately; it doesn't wait for the task to\nfinish or even to start. In each call, <code>mcore.run()</code> only puts a task\nin a queue. The workers in background processes pick up tasks from the\nqueue and run them.</p>\n<p>The <code>mcore.returns()</code> waits until all tasks finish and returns their\nreturn values, which are sorted in the order of the tasks you have\noriginally given to <code>mcore.run()</code>.</p>\n<p>Progress bars will be shown by <code>atpbar</code>.</p>\n<pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |     1415 /     1415 |:  still another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     7770 /     7770 |:  task again\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    18431 /    18431 |:  yet another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    25641 /    25641 |:  more task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    74669 /    74669 |:  task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |    87688 /    87688 |:  another task\n</code></pre>\n<p>The results are sorted in the original order regardless of the order\nin which the tasks have finished.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n</pre>\n<pre><code>['result1', 'result2', 'result3', 'result4', 'result5', 'result6']\n</code></pre>\n<hr>\n<h3>Features</h3>\n<h4>Multiprocessing or Threading</h4>\n<p><em>New in version 0.10.0</em></p>\n<p>From version 0.10.0, you can choose\n<a href=\"https://docs.python.org/3/library/threading.html\" rel=\"nofollow\">threading</a> in additional to\n<a href=\"https://docs.python.org/3/library/multiprocessing.html\" rel=\"nofollow\">multiprocessing</a>. The\ndefault is multiprocessing. Use the option <code>mode</code> to use threading.</p>\n<pre><span class=\"n\">mantichora</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'threading'</span><span class=\"p\">)</span>\n</pre>\n<h4>Without the <code>with</code> statement</h4>\n<h5><code>end()</code></h5>\n<p>If you don't use the <code>with</code> statement, you need to call <code>end()</code>.</p>\n<pre><span class=\"n\">mcore</span> <span class=\"o\">=</span> <span class=\"n\">mantichora</span><span class=\"p\">()</span>\n\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result1'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result2'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'still another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result3'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'yet another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result4'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task again'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result5'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'more task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result6'</span><span class=\"p\">)</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">()</span>\n\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n</pre>\n<pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |     4695 /     4695 |:  yet another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     7535 /     7535 |:  still another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9303 /     9303 |:  another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9380 /     9380 |:  task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     5812 /     5812 |:  more task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9437 /     9437 |:  task again\n['result1', 'result2', 'result3', 'result4', 'result5', 'result6']\n</code></pre>\n<h5><code>terminate()</code></h5>\n<p>In the multiprocessing mode, <code>mantichora</code> can be terminated with\n<code>terminate()</code>. After <code>terminate()</code> is called, <code>end()</code> still needs to\nbe called. In the example below, <code>terminate()</code> is called after 0.5\nseconds of sleep while some tasks are still running.</p>\n<pre><span class=\"n\">mcore</span> <span class=\"o\">=</span> <span class=\"n\">mantichora</span><span class=\"p\">()</span>\n\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result1'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result2'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'still another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result3'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'yet another task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result4'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task again'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result5'</span><span class=\"p\">)</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'more task'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result6'</span><span class=\"p\">)</span>\n\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n<span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n</pre>\n<p>The progress bars stop when the tasks are terminated.</p>\n<pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |     2402 /     2402 |:  still another task\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     3066 /     3066 |:  another task\n  59.28% :::::::::::::::::::::::                  |     2901 /     4894 |:  task\n  69.24% :::::::::::::::::::::::::::              |     2919 /     4216 |:  yet another task\n   0.00%                                          |        0 /     9552 |:  task again\n   0.00%                                          |        0 /     4898 |:  more task\n</code></pre>\n<p><strong>Note:</strong>: In the threading mode, <code>terminate()</code> does not do anything.</p>\n<hr>\n<h4>Receive results as tasks finish</h4>\n<p>Instead of waiting for all tasks to finish beofre receiving the\nreulsts, you can get results as tasks finish with the method\n<code>receive_one()</code> or <code>receive_receive()</code>.</p>\n<h4><code>receive_one()</code></h4>\n<p>The method <code>receive_one()</code> returns a pair of the run ID and the return\nvalue of a task function. If no task has finished, <code>receive_one()</code>\nwaits until one task finishes. <code>receive_one()</code> returns <code>None</code> if no\ntasks are outstanding. The method <code>run()</code> returns the run ID for the\ntask.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">mantichora</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">mcore</span><span class=\"p\">:</span>\n    <span class=\"n\">runids</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">]</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task1'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result1'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task2'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result2'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task3'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result3'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task4'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result4'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task5'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result5'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task6'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result6'</span><span class=\"p\">))</span>\n    <span class=\"c1\">#</span>\n    <span class=\"n\">pairs</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">runids</span><span class=\"p\">)):</span>\n        <span class=\"n\">pairs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">receive_one</span><span class=\"p\">())</span>\n</pre>\n<pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |     1748 /     1748 |:  task3\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     4061 /     4061 |:  task1\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     2501 /     2501 |:  task5\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     2028 /     2028 |:  task6\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     8206 /     8206 |:  task4\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9157 /     9157 |:  task2\n</code></pre>\n<p>The <code>runid</code> is the list of the run IDs in the order of the tasks that\nhave been given to <code>run()</code>.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">runids</span><span class=\"p\">)</span>\n</pre>\n<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre>\n<p>The <code>pairs</code> are in the order in which the tasks have finished.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">)</span>\n</pre>\n<pre><code>[(2, 'result3'), (0, 'result1'), (4, 'result5'), (5, 'result6'), (3, 'result4'), (1, 'result2')]\n</code></pre>\n<h5><code>receive_finished()</code></h5>\n<p>The method <code>receive_finished()</code> returns a list of pairs of the run ID\nand the return value of finished task functions. The method\n<code>receive_finished()</code> doesn't wait for a task to finish. It returns an\nempty list if no task has finished.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">mantichora</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">mcore</span><span class=\"p\">:</span>\n    <span class=\"n\">runids</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">]</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task1'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result1'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task2'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result2'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task3'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result3'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task4'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result4'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task5'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result5'</span><span class=\"p\">))</span>\n    <span class=\"n\">runids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_loop</span><span class=\"p\">,</span> <span class=\"s1\">'task6'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result6'</span><span class=\"p\">))</span>\n    <span class=\"c1\">#</span>\n    <span class=\"n\">pairs</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">]</span>\n    <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">runids</span><span class=\"p\">):</span>\n        <span class=\"n\">pairs</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">receive_finished</span><span class=\"p\">())</span>\n</pre>\n<pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |     3979 /     3979 |:  task3\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     6243 /     6243 |:  task2\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     6640 /     6640 |:  task1\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     8632 /     8632 |:  task4\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     6235 /     6235 |:  task5\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     8325 /     8325 |:  task6\n</code></pre>\n<p>The <code>runid</code> is again the list of the run IDs in the order of the tasks\nthat have been given to <code>run()</code>.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">runids</span><span class=\"p\">)</span>\n</pre>\n<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre>\n<p>The <code>pairs</code> are also again in the order in which the tasks have finished.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">)</span>\n</pre>\n<pre><code>[(2, 'result3'), (1, 'result2'), (0, 'result1'), (3, 'result4'), (4, 'result5'), (5, 'result6')]\n</code></pre>\n<hr>\n<h4>Logging</h4>\n<p>Logging in background processes is propagated to the main process in\nthe way described in a <a href=\"https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes\" rel=\"nofollow\">section of Logging\nCookbook</a>.</p>\n<p>Here is a simple example task function that uses <code>logging</code>. The task\nfunction does logging just before returning.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">task_log</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">atpbar</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.0001</span><span class=\"p\">)</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'finishing \"</span><span class=\"si\">{}</span><span class=\"s1\">\"'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span>\n</pre>\n<p>Set the logging stream to a string stream so that we can later\nretrieve the logging as a string.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">()</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n</pre>\n<p>Run the tasks.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">mantichora</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">mcore</span><span class=\"p\">:</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_log</span><span class=\"p\">,</span> <span class=\"s1\">'task1'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result1'</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_log</span><span class=\"p\">,</span> <span class=\"s1\">'task2'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result2'</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_log</span><span class=\"p\">,</span> <span class=\"s1\">'task3'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result3'</span><span class=\"p\">)</span>\n    <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">task_log</span><span class=\"p\">,</span> <span class=\"s1\">'task4'</span><span class=\"p\">,</span> <span class=\"n\">ret</span><span class=\"o\">=</span><span class=\"s1\">'result4'</span><span class=\"p\">)</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">mcore</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">()</span>\n</pre>\n<pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |     4217 /     4217 |:  task2\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     7691 /     7691 |:  task3\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     8140 /     8140 |:  task1\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     9814 /     9814 |:  task4\n</code></pre>\n<p>Logging made in the task function in background processes is sent to\nthe main process and written in the string stream.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span>\n</pre>\n<pre><code>INFO:root:finishing \"task2\"\nINFO:root:finishing \"task3\"\nINFO:root:finishing \"task1\"\nINFO:root:finishing \"task4\"\n</code></pre>\n<hr>\n<h4>Start method of multiprocessing</h4>\n<p><em>New in version 0.9.9</em></p>\n<p>Python multiprocessing has three start methods: <code>spawn</code>, <code>fork</code>, <code>forkserver</code>.\nEach method is described in the Python\n<a href=\"https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods\" rel=\"nofollow\">documentation</a>.\nMantichora uses the <code>fork</code> method by default. You can change the method by the\noption <code>mp_start_method</code>. For example, to use the <code>spawn</code> method,</p>\n<pre><span class=\"n\">mantichora</span><span class=\"p\">(</span><span class=\"n\">mp_start_method</span><span class=\"o\">=</span><span class=\"s1\">'spawn'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>On Jupyter Notebook, the <code>fork</code> method is typically the best choice.</li>\n<li>The <code>spawn</code> and <code>forkserver</code> methods have extra restrictions, for\nexample, on how the main module is written. The restrictions are\ndescribed in the Python\n<a href=\"https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods\" rel=\"nofollow\">documentation</a>.</li>\n<li>On MacOS, in the <code>fork</code> method, errors with the message <code>may have been in progress in another thread when fork() was called</code> might\noccur. This error might be resolved if the environment variable\n<code>OBJC_DISABLE_INITIALIZE_FORK_SAFETY</code> is set <code>YES</code> as suggested at\n<a href=\"https://stackoverflow.com/questions/50168647/multiprocessing-causes-python-to-crash-and-gives-an-error-may-have-been-in-progr\" rel=\"nofollow\">Stack Overflow</a>.</li>\n</ul>\n<hr>\n<h2>License</h2>\n<ul>\n<li>mantichora is licensed under the BSD license.</li>\n</ul>\n<hr>\n<h2>Contact</h2>\n<ul>\n<li>Tai Sakuma - <a href=\"mailto:tai.sakuma@gmail.com\">tai.sakuma@gmail.com</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6904337, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1da3ac8dde0a31b3ba240dbdc6870fe0", "sha256": "bea177e5de3d0a7c68a9042f5c78aebe4545c7c64f1f5198fd6e9272fb6e1cc0"}, "downloads": -1, "filename": "mantichora-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1da3ac8dde0a31b3ba240dbdc6870fe0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3230, "upload_time": "2019-02-28T14:20:24", "upload_time_iso_8601": "2019-02-28T14:20:24.908568Z", "url": "https://files.pythonhosted.org/packages/d2/6d/50498ad5fe23070c8978b02e4f04bfb3eefc026834721b32b33eee0e7ee1/mantichora-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3c4ded8bda20f3a1ad1836d7778a43b", "sha256": "48ceade3ac9e8faf89c39bcb3816227fe471387b86f65995b0e742f34b279c08"}, "downloads": -1, "filename": "mantichora-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d3c4ded8bda20f3a1ad1836d7778a43b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17691, "upload_time": "2019-02-28T14:20:27", "upload_time_iso_8601": "2019-02-28T14:20:27.062817Z", "url": "https://files.pythonhosted.org/packages/b7/77/543e3f55b9c0a5dba8832128204b24d4b012404dec9718920e5042cec56f/mantichora-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "35d8282e083112611636262fdbbd91a4", "sha256": "1465add0e2307ef47921422c047b9acaa1a6fbc4a23866c5aa308f41386a8360"}, "downloads": -1, "filename": "mantichora-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "35d8282e083112611636262fdbbd91a4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3219, "upload_time": "2019-03-01T10:19:16", "upload_time_iso_8601": "2019-03-01T10:19:16.088957Z", "url": "https://files.pythonhosted.org/packages/bd/13/7899539f43f61b4a4e40f0369312e5162ca68cf8f22c033572d083c91e10/mantichora-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9197fa571798e5f6bdd391a2ed28bdd9", "sha256": "791c4c115f08b82dada6883d4624b9b68dc89ef38a940801993c5907ff769429"}, "downloads": -1, "filename": "mantichora-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9197fa571798e5f6bdd391a2ed28bdd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17671, "upload_time": "2019-03-01T10:19:17", "upload_time_iso_8601": "2019-03-01T10:19:17.314876Z", "url": "https://files.pythonhosted.org/packages/19/51/0ecfa0f946db901e8564f51e46eec76ee27e11517523e5d30036e4a23826/mantichora-0.1.1.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "6d129e23babb8784c0eeee1cf4320803", "sha256": "4c5ecfac26c74e3256954e2dc6198edb0c4ac2a0105aa0942b39d54de6571b3b"}, "downloads": -1, "filename": "mantichora-0.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d129e23babb8784c0eeee1cf4320803", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13164, "upload_time": "2020-03-29T00:28:58", "upload_time_iso_8601": "2020-03-29T00:28:58.580236Z", "url": "https://files.pythonhosted.org/packages/89/ec/588098594e4cdba596b01942fc3bc332aa2c4e68da5ec594f0d6e1fecc7e/mantichora-0.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5762c98bfa1f3b5b52556f72bce7b180", "sha256": "8ac2dda8f571f40f52ebb7ff48dc365bcecdd753d9327fefe0ccfdb0e4c9337f"}, "downloads": -1, "filename": "mantichora-0.10.0.tar.gz", "has_sig": false, "md5_digest": "5762c98bfa1f3b5b52556f72bce7b180", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31337, "upload_time": "2020-03-29T00:29:00", "upload_time_iso_8601": "2020-03-29T00:29:00.181592Z", "url": "https://files.pythonhosted.org/packages/7c/4d/041e367af115e357832d42e5f92c43c2c82163172813e264567e1c5bad8b/mantichora-0.10.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "54f6cc6772bc8d92669221db22bfdc06", "sha256": "b698272398d34d6bf1d7ebb6a2c3b0248b35cc32658ae7f10b1b28bd2624bbdc"}, "downloads": -1, "filename": "mantichora-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "54f6cc6772bc8d92669221db22bfdc06", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9273, "upload_time": "2019-03-02T12:51:47", "upload_time_iso_8601": "2019-03-02T12:51:47.767355Z", "url": "https://files.pythonhosted.org/packages/5c/d7/9f420e0544015d971bb12c11bf216c15defcf2ead64749159cc0b0351f72/mantichora-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e22e16a09d8537bb3673a66619f88007", "sha256": "3c7629c65dc67ee03db393e50f41a67111857c0d53d0679515cfeb1fb9ebd520"}, "downloads": -1, "filename": "mantichora-0.9.0.tar.gz", "has_sig": false, "md5_digest": "e22e16a09d8537bb3673a66619f88007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22926, "upload_time": "2019-03-02T12:51:48", "upload_time_iso_8601": "2019-03-02T12:51:48.938582Z", "url": "https://files.pythonhosted.org/packages/7c/6a/c7d2683de5719ad7c6acb8cae79f996ea84ce52bd91ce5d7c8756065244c/mantichora-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "6626903fcc64e4ec3c34c9f8c496ce34", "sha256": "a5708099af0fb9c4f69f69b762894b34293eb789bdc1203225e4301d6800f0f5"}, "downloads": -1, "filename": "mantichora-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6626903fcc64e4ec3c34c9f8c496ce34", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9311, "upload_time": "2019-03-02T13:15:01", "upload_time_iso_8601": "2019-03-02T13:15:01.893305Z", "url": "https://files.pythonhosted.org/packages/7e/c5/8b5e4dcb6ead3f520b8f087f91cfe2e82535f338c6183be564a2c42d23c1/mantichora-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1c5dd1d083dd5340fe2b1459f175832", "sha256": "3be993a9f4969a5852ea73ddcfc31c071e10ce3fdc44c8620ab7ac8e9f0d02c4"}, "downloads": -1, "filename": "mantichora-0.9.1.tar.gz", "has_sig": false, "md5_digest": "b1c5dd1d083dd5340fe2b1459f175832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22982, "upload_time": "2019-03-02T13:15:03", "upload_time_iso_8601": "2019-03-02T13:15:03.449093Z", "url": "https://files.pythonhosted.org/packages/de/ee/eb43e34716ba7cd3854ea1f309133c6f0bdf36b6899a753cb73d3fb890bd/mantichora-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "b34cc31e7c11fd9294690d5c6e4aaf6c", "sha256": "e506ff3d420a67cd4aae004a64c5de5b41d510393e77453a29f8c47cd8380ebe"}, "downloads": -1, "filename": "mantichora-0.9.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b34cc31e7c11fd9294690d5c6e4aaf6c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9308, "upload_time": "2019-03-02T14:03:30", "upload_time_iso_8601": "2019-03-02T14:03:30.902955Z", "url": "https://files.pythonhosted.org/packages/a4/02/31344e72d0bd62dd63b922914aec2a1a830fd8b281b88e1d97936bf77b8f/mantichora-0.9.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68e24a52af571aa0ca75f13337cf8bf7", "sha256": "5dc7af51826ccd8ac8068382daebf118309f4cbfe9c4c41452162dc84d197e0b"}, "downloads": -1, "filename": "mantichora-0.9.2.tar.gz", "has_sig": false, "md5_digest": "68e24a52af571aa0ca75f13337cf8bf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22982, "upload_time": "2019-03-02T14:03:32", "upload_time_iso_8601": "2019-03-02T14:03:32.104831Z", "url": "https://files.pythonhosted.org/packages/0e/98/81734b0a393b62c86ddb70efe984efdd47676bd327310c4c881357669d33/mantichora-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "34341eef479fd29ad0619f1cf9fb919c", "sha256": "4f51d866dcde6cb2d1316ee2d9825beba030334ecf9406773bc836e96771af8a"}, "downloads": -1, "filename": "mantichora-0.9.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34341eef479fd29ad0619f1cf9fb919c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10871, "upload_time": "2019-03-10T17:40:08", "upload_time_iso_8601": "2019-03-10T17:40:08.036773Z", "url": "https://files.pythonhosted.org/packages/53/47/8c967ef8aa8b3aae82716bcfe62ebf8831992161919d13880af2865272ba/mantichora-0.9.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cd5f7f47b8b403f2084f7fbe30b374d", "sha256": "08c67c1ea764d9d8fa02ab7d3757656cc32a67e884ff32881cc60125d948601b"}, "downloads": -1, "filename": "mantichora-0.9.3.tar.gz", "has_sig": false, "md5_digest": "8cd5f7f47b8b403f2084f7fbe30b374d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29712, "upload_time": "2019-03-10T17:40:08", "upload_time_iso_8601": "2019-03-10T17:40:08.993393Z", "url": "https://files.pythonhosted.org/packages/59/70/c543d58c3ac1f14f7fcce1e7869dcf3c0b9c72ec4fe3047f6f72b4abb9b4/mantichora-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "560882f96e9e1a9bc092886cb7c585ce", "sha256": "0b13143aca7aed2de09589d1ddc51bc48bb6c336db38104e1b6bda216a374511"}, "downloads": -1, "filename": "mantichora-0.9.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "560882f96e9e1a9bc092886cb7c585ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11103, "upload_time": "2019-03-14T14:55:27", "upload_time_iso_8601": "2019-03-14T14:55:27.287086Z", "url": "https://files.pythonhosted.org/packages/6a/e4/b963e0aaa33f5d74b88dc49f500962192aed1eb446c250962f06ff9a2250/mantichora-0.9.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90b6b8a38b07e0c37d0922d7695cf4c2", "sha256": "69a9653dab788b20f79f48e2e0038525ee6ef342600b8b5750e45a8b35f9416e"}, "downloads": -1, "filename": "mantichora-0.9.4.tar.gz", "has_sig": false, "md5_digest": "90b6b8a38b07e0c37d0922d7695cf4c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30007, "upload_time": "2019-03-14T14:55:28", "upload_time_iso_8601": "2019-03-14T14:55:28.968110Z", "url": "https://files.pythonhosted.org/packages/79/4f/8ca6d3fa28d77f8cc980e4ee8e690fd1acbe3c0ca074e6140a048d224fbd/mantichora-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "47e5d3997bf8e0fdd96042199464d987", "sha256": "b89a1337c7a344ac7588f5a55e25103863b6a324e80b65f78498dd768b9190a8"}, "downloads": -1, "filename": "mantichora-0.9.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "47e5d3997bf8e0fdd96042199464d987", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11094, "upload_time": "2019-03-15T21:49:58", "upload_time_iso_8601": "2019-03-15T21:49:58.462986Z", "url": "https://files.pythonhosted.org/packages/c2/18/642ff4a8cffa5504ce77c180f53e7e8b34f46e92ee5de29b1d96d5903de5/mantichora-0.9.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2030ed29c01c4acf1d04a30e73ae431", "sha256": "ffd02503e06d23b1a700bf4350d9b0894cefa4556bd5b6f952abb25b79a89012"}, "downloads": -1, "filename": "mantichora-0.9.5.tar.gz", "has_sig": false, "md5_digest": "c2030ed29c01c4acf1d04a30e73ae431", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29978, "upload_time": "2019-03-15T21:49:59", "upload_time_iso_8601": "2019-03-15T21:49:59.904343Z", "url": "https://files.pythonhosted.org/packages/01/fd/e7e1e0582686222386d403ffd847f0cd0e0644af4fc8492ff41e2db17024/mantichora-0.9.5.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "b2f287681ba1cce2b74e3a602e84b94e", "sha256": "8a145ab1ab9be4d4c90c3bca833547189aba42a7161d9e4410bd75492ba45555"}, "downloads": -1, "filename": "mantichora-0.9.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2f287681ba1cce2b74e3a602e84b94e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12281, "upload_time": "2020-02-15T15:06:13", "upload_time_iso_8601": "2020-02-15T15:06:13.427981Z", "url": "https://files.pythonhosted.org/packages/14/9a/a9f07a0957b94ba125810555cac09621b3234a034d8d7725151552ebd13b/mantichora-0.9.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f03b89e4a6b260bd7a9f6c1f0c40c926", "sha256": "c250225b960d14993b39c3b13b6a53e8cd4c5ec026ae59e0bb150769b08fc9d8"}, "downloads": -1, "filename": "mantichora-0.9.6.tar.gz", "has_sig": false, "md5_digest": "f03b89e4a6b260bd7a9f6c1f0c40c926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26651, "upload_time": "2020-02-15T15:06:14", "upload_time_iso_8601": "2020-02-15T15:06:14.638797Z", "url": "https://files.pythonhosted.org/packages/94/f6/ad5674c03fcd9b70b52c8ee26aba9253b1bbd1792774ee34f066c3881b3f/mantichora-0.9.6.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "1b3d5629776b819661a8f0fdc518bc15", "sha256": "d718d60f6b6963d8f1553c42e3cc56022fae6ea159340e8f3c964b003c03a7c9"}, "downloads": -1, "filename": "mantichora-0.9.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b3d5629776b819661a8f0fdc518bc15", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12285, "upload_time": "2020-02-15T15:20:25", "upload_time_iso_8601": "2020-02-15T15:20:25.436088Z", "url": "https://files.pythonhosted.org/packages/84/7e/37f140a1ed8f1f5a996eba90b8750db02001c8aa792f8f097e7f18fad6b5/mantichora-0.9.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9882ff0e913cb2c98af784ccdf71947", "sha256": "65a6cb15948e59656561d92ef365a3ea7d82888634b351699c552821ac7ff656"}, "downloads": -1, "filename": "mantichora-0.9.7.tar.gz", "has_sig": false, "md5_digest": "a9882ff0e913cb2c98af784ccdf71947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30005, "upload_time": "2020-02-15T15:20:26", "upload_time_iso_8601": "2020-02-15T15:20:26.548371Z", "url": "https://files.pythonhosted.org/packages/85/c5/28995430c6286b7781e9aaeb9be02d3835c0e62d79ba493fef63edc91915/mantichora-0.9.7.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "76b1529f7c1950eb10df1b62458dd15b", "sha256": "efa97af8089689b9926cafe6d404dc3aac39efb66d4e2ec0cda7ebc6261d097f"}, "downloads": -1, "filename": "mantichora-0.9.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "76b1529f7c1950eb10df1b62458dd15b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12568, "upload_time": "2020-03-14T15:38:20", "upload_time_iso_8601": "2020-03-14T15:38:20.095184Z", "url": "https://files.pythonhosted.org/packages/a0/57/bd7cb90f4367989f8732478f96149c5992e39a78f5736710f6818cbfd06d/mantichora-0.9.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f6dbd39dfc25b86db59a06918697a46", "sha256": "a421ba79c920e528b1219ed915220643002421148f7b3742a98f215c63ea2fad"}, "downloads": -1, "filename": "mantichora-0.9.8.tar.gz", "has_sig": false, "md5_digest": "1f6dbd39dfc25b86db59a06918697a46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30204, "upload_time": "2020-03-14T15:38:21", "upload_time_iso_8601": "2020-03-14T15:38:21.793167Z", "url": "https://files.pythonhosted.org/packages/bb/79/b191980420d75c186130be611c0c6f41810452d8a3af00503f22e7f5940f/mantichora-0.9.8.tar.gz", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "95213a3495c511e9c2ad22726b37e816", "sha256": "ea727065bec6b0d4f1571ac298850918d4f8b34fa31fc909ca21b72f6c8a5b4a"}, "downloads": -1, "filename": "mantichora-0.9.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "95213a3495c511e9c2ad22726b37e816", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13523, "upload_time": "2020-03-28T20:34:19", "upload_time_iso_8601": "2020-03-28T20:34:19.708192Z", "url": "https://files.pythonhosted.org/packages/59/f2/4c9d2ab41029ab0dbc389565b99578a28614be0524c1d4616ef1abff891c/mantichora-0.9.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2443098459c0eb5b849ee1e69109d002", "sha256": "9fd4bdb8b57738e7ce917ce7ff22c967b96870c16c06551f402bbd953c587364"}, "downloads": -1, "filename": "mantichora-0.9.9.tar.gz", "has_sig": false, "md5_digest": "2443098459c0eb5b849ee1e69109d002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31283, "upload_time": "2020-03-28T20:34:21", "upload_time_iso_8601": "2020-03-28T20:34:21.246978Z", "url": "https://files.pythonhosted.org/packages/08/bf/32e4e66fa2c2d3db428f11415d5d0c4d28de8328427b88c8960b337be491/mantichora-0.9.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d129e23babb8784c0eeee1cf4320803", "sha256": "4c5ecfac26c74e3256954e2dc6198edb0c4ac2a0105aa0942b39d54de6571b3b"}, "downloads": -1, "filename": "mantichora-0.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d129e23babb8784c0eeee1cf4320803", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13164, "upload_time": "2020-03-29T00:28:58", "upload_time_iso_8601": "2020-03-29T00:28:58.580236Z", "url": "https://files.pythonhosted.org/packages/89/ec/588098594e4cdba596b01942fc3bc332aa2c4e68da5ec594f0d6e1fecc7e/mantichora-0.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5762c98bfa1f3b5b52556f72bce7b180", "sha256": "8ac2dda8f571f40f52ebb7ff48dc365bcecdd753d9327fefe0ccfdb0e4c9337f"}, "downloads": -1, "filename": "mantichora-0.10.0.tar.gz", "has_sig": false, "md5_digest": "5762c98bfa1f3b5b52556f72bce7b180", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31337, "upload_time": "2020-03-29T00:29:00", "upload_time_iso_8601": "2020-03-29T00:29:00.181592Z", "url": "https://files.pythonhosted.org/packages/7c/4d/041e367af115e357832d42e5f92c43c2c82163172813e264567e1c5bad8b/mantichora-0.10.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:30 2020"}