{"info": {"author": "Divakar Roy", "author_email": "droygatech@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: System :: Benchmark"], "description": "benchit (BENCHmark IT!) |GitHub-License|\n========================================\n\nTools to benchmark Python solutions on runtime performance and visualize. Based on `timeit`, it primarily aims to functionally simulate the `timeit <https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-timeit>`__ behaviour and hence the name! This facilitates benchmarking on multiple datasets and solutions.\n\n\nDocumentation\n-------------\n\n|Docs|\n\n\nInstallation\n------------\n\nPull latest development release on GitHub and install in the current directory :\n\n.. code:: sh\n\n    pip install -e git+https://github.com/droyed/benchit.git@master#egg=benchit\n\n\nGetting started\n^^^^^^^^^^^^^^^\n\nConsider a setup to compare NumPy ufuncs - `sum <https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html>`__, `prod <https://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html>`__, `max <https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html>`__ on arrays varying in their sizes. To keep it simple, let's consider `1D` arrays. Thus, we would have :\n\n.. code-block:: python\n\n    >>> import numpy as np\n    >>> funcs = [np.sum,np.prod,np.max]\n    >>> inputs = [np.random.rand(i) for i in 10**np.arange(5)]\n\n    >>> t = benchit.timings(funcs, inputs)\n    >>> t\n    Functions       sum      prod      amax\n    Len                                    \n    1          0.000004  0.000004  0.000003\n    10         0.000004  0.000004  0.000004\n    100        0.000004  0.000004  0.000004\n    1000       0.000004  0.000007  0.000004\n    10000      0.000008  0.000022  0.000007\n\nIt's a *dataframe-like* object and as such we can plot it. It automatically adds in specs into the title area to convey all of available benchmarking info :\n\n.. code-block:: python\n\n    >>> t.plot(logy=True, logx=True)\n\n|plot1|\n\nMore realistic example\n^^^^^^^^^^^^^^^^^^^^^^\n\nLet's consider a setup where functions accept more than one argument. Let's take the case of computing `euclidean distances <https://en.wikipedia.org/wiki/Euclidean_distance>`__ between two `2D` arrays. We will feed in arrays with varying number of rows and 3 columns to represent data in 3D Cartesian coordinate system and benchmark two commonly used functions in Python.\n\n.. code-block:: python\n\n    # Setup input functions\n    >>> from sklearn.metrics.pairwise import pairwise_distances\n    >>> from scipy.spatial.distance import cdist\n    >>> fns = [cdist, pairwise_distances]\n    \n    # Setup input datasets\n    >>> import numpy as np\n    >>> in_ = {(n,3):[np.random.rand(n,3), np.random.rand(n,3)] for n in [10,100,500,1000,4000]}\n    \n    # Get benchmarking object (dataframe-like) and plot results\n    >>> t = benchit.timings(fns, in_, multivar=True)\n    >>> t.plot()\n    \n|plot2|\n\n\n\n.. |Docs| image:: https://readthedocs.org/projects/benchit/badge/?version=latest\n    :target: https://benchit.readthedocs.io/en/latest/?badge=latest\n\n.. |GitHub-License| image:: https://img.shields.io/github/license/droyed/benchit\n   :target: https://github.com/droyed/benchit/blob/master/LICENSE\n\n.. |GitHub-Releases| image:: https://img.shields.io/github/v/release/droyed/benchit\n   :target: https://github.com/droyed/benchit/releases/latest\n\n.. |plot1| image:: https://raw.githubusercontent.com/droyed/benchit/master/docs/source/singlevar_numpy_ufuncs_timings.png\n.. |plot2| image:: https://raw.githubusercontent.com/droyed/benchit/master/docs/source/multivar_euclidean_timings.png", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/droyed/benchit", "keywords": "benchmarking performance timing timeit", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "benchit", "package_url": "https://pypi.org/project/benchit/", "platform": "any", "project_url": "https://pypi.org/project/benchit/", "project_urls": {"Homepage": "https://github.com/droyed/benchit"}, "release_url": "https://pypi.org/project/benchit/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Benchmarking tools for Python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Tools to benchmark Python solutions on runtime performance and visualize. Based on <cite>timeit</cite>, it primarily aims to functionally simulate the <a href=\"https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-timeit\" rel=\"nofollow\">timeit</a> behaviour and hence the name! This facilitates benchmarking on multiple datasets and solutions.</p>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><a href=\"https://benchit.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/436a728a93b583b542958a2eadfb9c86bb482f70/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f62656e636869742f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Pull latest development release on GitHub and install in the current directory :</p>\n<pre>pip install -e git+https://github.com/droyed/benchit.git@master#egg<span class=\"o\">=</span>benchit\n</pre>\n<div id=\"getting-started\">\n<h3>Getting started</h3>\n<p>Consider a setup to compare NumPy ufuncs - <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html\" rel=\"nofollow\">sum</a>, <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html\" rel=\"nofollow\">prod</a>, <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html\" rel=\"nofollow\">max</a> on arrays varying in their sizes. To keep it simple, let\u2019s consider <cite>1D</cite> arrays. Thus, we would have :</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">funcs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">benchit</span><span class=\"o\">.</span><span class=\"n\">timings</span><span class=\"p\">(</span><span class=\"n\">funcs</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span>\n<span class=\"n\">Functions</span>       <span class=\"nb\">sum</span>      <span class=\"n\">prod</span>      <span class=\"n\">amax</span>\n<span class=\"n\">Len</span>\n<span class=\"mi\">1</span>          <span class=\"mf\">0.000004</span>  <span class=\"mf\">0.000004</span>  <span class=\"mf\">0.000003</span>\n<span class=\"mi\">10</span>         <span class=\"mf\">0.000004</span>  <span class=\"mf\">0.000004</span>  <span class=\"mf\">0.000004</span>\n<span class=\"mi\">100</span>        <span class=\"mf\">0.000004</span>  <span class=\"mf\">0.000004</span>  <span class=\"mf\">0.000004</span>\n<span class=\"mi\">1000</span>       <span class=\"mf\">0.000004</span>  <span class=\"mf\">0.000007</span>  <span class=\"mf\">0.000004</span>\n<span class=\"mi\">10000</span>      <span class=\"mf\">0.000008</span>  <span class=\"mf\">0.000022</span>  <span class=\"mf\">0.000007</span>\n</pre>\n<p>It\u2019s a <em>dataframe-like</em> object and as such we can plot it. It automatically adds in specs into the title area to convey all of available benchmarking info :</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">logy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">logx</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"plot1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a8053379b45698fa11ea2d8551252b22b941e93/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f64726f7965642f62656e636869742f6d61737465722f646f63732f736f757263652f73696e676c657661725f6e756d70795f7566756e63735f74696d696e67732e706e67\"></p>\n</div>\n<div id=\"more-realistic-example\">\n<h3>More realistic example</h3>\n<p>Let\u2019s consider a setup where functions accept more than one argument. Let\u2019s take the case of computing <a href=\"https://en.wikipedia.org/wiki/Euclidean_distance\" rel=\"nofollow\">euclidean distances</a> between two <cite>2D</cite> arrays. We will feed in arrays with varying number of rows and 3 columns to represent data in 3D Cartesian coordinate system and benchmark two commonly used functions in Python.</p>\n<pre><span class=\"c1\"># Setup input functions</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics.pairwise</span> <span class=\"kn\">import</span> <span class=\"n\">pairwise_distances</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">scipy.spatial.distance</span> <span class=\"kn\">import</span> <span class=\"n\">cdist</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cdist</span><span class=\"p\">,</span> <span class=\"n\">pairwise_distances</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Setup input datasets</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">in_</span> <span class=\"o\">=</span> <span class=\"p\">{(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">):[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"mi\">4000</span><span class=\"p\">]}</span>\n\n<span class=\"c1\"># Get benchmarking object (dataframe-like) and plot results</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">benchit</span><span class=\"o\">.</span><span class=\"n\">timings</span><span class=\"p\">(</span><span class=\"n\">fns</span><span class=\"p\">,</span> <span class=\"n\">in_</span><span class=\"p\">,</span> <span class=\"n\">multivar</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"plot2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3062956c2558faf7e5e76c461662c00c8b5e7341/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f64726f7965642f62656e636869742f6d61737465722f646f63732f736f757263652f6d756c74697661725f6575636c696465616e5f74696d696e67732e706e67\"></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7027901, "releases": {"0.0.0": [], "0.0.1": [{"comment_text": "", "digests": {"md5": "79dc2a1ff07e81f5e13a11f1a3207290", "sha256": "ab4dbc56ece2c5f56d8ff90b47e7e942627b86a276410b9ed726a0363552f8de"}, "downloads": -1, "filename": "benchit-0.0.1.tar.gz", "has_sig": false, "md5_digest": "79dc2a1ff07e81f5e13a11f1a3207290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9499, "upload_time": "2020-04-15T22:27:33", "upload_time_iso_8601": "2020-04-15T22:27:33.547503Z", "url": "https://files.pythonhosted.org/packages/31/17/19b9e4211e2d25040f90cbde5eff1aa6325dd15940f47f3c6e8b19572214/benchit-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79dc2a1ff07e81f5e13a11f1a3207290", "sha256": "ab4dbc56ece2c5f56d8ff90b47e7e942627b86a276410b9ed726a0363552f8de"}, "downloads": -1, "filename": "benchit-0.0.1.tar.gz", "has_sig": false, "md5_digest": "79dc2a1ff07e81f5e13a11f1a3207290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9499, "upload_time": "2020-04-15T22:27:33", "upload_time_iso_8601": "2020-04-15T22:27:33.547503Z", "url": "https://files.pythonhosted.org/packages/31/17/19b9e4211e2d25040f90cbde5eff1aa6325dd15940f47f3c6e8b19572214/benchit-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:49 2020"}