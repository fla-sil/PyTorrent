{"info": {"author": "Raygun", "author_email": "hello@raygun.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Communications"], "description": "raygun4py\n=========\n\n.. image:: https://travis-ci.org/MindscapeHQ/raygun4py.svg?branch=master\n  :target: https://travis-ci.org/MindscapeHQ/raygun4py?branch=master\n\n.. image:: https://coveralls.io/repos/MindscapeHQ/raygun4py/badge.svg?branch=master\n  :target: https://coveralls.io/r/MindscapeHQ/raygun4py?branch=master\n\n\nOfficial Raygun provider for **Python 2.7**, **Python 3+** and **PyPy**\n\n\nInstallation\n============\n\nThe easiest way to install this is as a pip package, as it is available from PyPI. From your command line, run::\n\n    $ pip install raygun4py\n\nThen import and instantiate the module:\n\n.. code:: python\n\n    from raygun4py import raygunprovider\n\n    client = raygunprovider.RaygunSender('your_apikey')\n\nTest the installation\n------------------------\n\nFrom the command line, run::\n\n  $ raygun4py test your_apikey\n\nReplace :code:`your_apikey` with the one listed on your Raygun dashboard. This will cause a test exception to be generated and sent.\n\nUsage\n=====\n\nAutomatically send the current exception like this:\n\n.. code:: python\n\n    try:\n        raise Exception(\"foo\")\n    except:\n        client.send_exception()\n\nSee `sending functions`_ for more ways to send.\n\n\nUncaught exception handler\n--------------------------\n\nTo automatically pick up unhandled exceptions with custom logic, you can provide a callback function to sys.excepthook:\n\n.. code:: python\n\n  def handle_exception(exc_type, exc_value, exc_traceback):\n      sender = raygunprovider.RaygunSender(\"your_apikey\")\n      sender.send_exception(exc_info=(exc_type, exc_value, exc_traceback))\n\n  sys.excepthook = handle_exception\n\nLogging\n-------\n\nYou can also send exceptions using a logger:\n\n.. code:: python\n\n  logger = logging.getLogger(\"mylogger\")\n  rgHandler = raygunprovider.RaygunHandler(\"your_apikey\")\n  logger.addHandler(rgHandler)\n\n  def log_exception(exc_type, exc_value, exc_traceback):\n      logger.error(\"An exception occurred\", exc_info = (exc_type, exc_value, exc_traceback))\n\n  sys.excepthook = log_exception\n\nThis uses the built-in :code:`RaygunHandler`. You can provide your own handler implementation based on that class if you need custom sending behavior.\n\n\nWeb frameworks\n--------------\n\nRaygun4py includes dedicated middleware implementations for Django and Flask, as well as generic WSGI frameworks (Tornado, Bottle, Ginkgo etc). These are available for both Python 2.6/2.7 and Python 3+.\n\nDjango\n++++++\n\nTo configure Django to automatically send all exceptions that are raised in views to Raygun:\n\nsettings.py\n\n.. code:: python\n\n  MIDDLEWARE_CLASSES = (\n      'raygun4py.middleware.django.Provider'\n  )\n\n  RAYGUN4PY_CONFIG = {\n      'api_key': 'paste_your_api_key_here'\n  }\n\n\nThe above configuration is the minimal required setup. The full set of options supported by the provider can be declared in the same way:\n\n.. code:: python\n\n  RAYGUN4PY_CONFIG = {\n      'api_key': 'paste_your_api_key_here',\n      'http_timeout': 10.0,\n      'proxy': None,\n      'before_send_callback': None,\n      'grouping_key_callback': None,\n      'filtered_keys': [],\n      'ignored_exceptions': [],\n      'transmit_global_variables': True,\n      'transmit_local_variables': True,\n      'transmit_environment_variables:': True,\n      'userversion': \"Not defined\",\n      'user': None\n  }\n\nFlask\n+++++\n\n.. code:: python\n\n  from flask import Flask, current_app\n  from raygun4py.middleware import flask\n\n  app = Flask(__name__)\n\n  flask.Provider(app, 'your_apikey').attach()\n\nWSGI\n++++\n\nAn example using **Tornado**, which will pick up exceptions that occur in the WSGI pipeline:\n\n.. code:: python\n\n  from raygun4py.middleware import wsgi\n\n  class MainHandler(tornado.web.RequestHandler):\n\n    def initialize(self):\n        raise Exception('init')\n\n  def main():\n    settings = {\n        'default_handler_class': MainHandler\n    }\n\n    application = tornado.web.Application([\n        (r\"/\", MainHandler),\n    ], **settings)\n\n    wsgiapp = tornado.wsgi.WSGIAdapter(application)\n    raygun_wrapped_app = wsgi.Provider(wsgiapp, 'your_apikey')\n    server = wsgiref.simple_server.make_server('', 8888, raygun_wrapped_app)\n    server.serve_forever()\n\nNote that many frameworks (tornado, pryramid, gevent et al) will swallow exceptions that occur within their domain.\n\nLet us know if we're missing middleware for your framework, or feel free to submit a pull request.\n\nAttaching raw HTTP request data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you are in a web server environment and have HTTP request details available, you can pass these and the headers through in a dictionary (see :code:`sample.py`).\n\nCode running on Google App Engine should now be supported - you can test this locally, and has been reported working once deployed (the latter currently requires a paid account due to needed SSL support).\n\nDocumentation\n=============\n\nInitialization options\n----------------------\n\n:code:`RaygunSender` accepts a :code:`config` dict which is used to set options for the provider (the defaults are shown below):\n\n.. code:: python\n\n  from raygun4py import raygunprovider\n\n  client = raygunprovider.RaygunSender('your_apikey', config={\n      'http_timeout': 10.0,\n      'proxy': None,\n      'before_send_callback': None,\n      'grouping_key_callback': None,\n      'filtered_keys': [],\n      'ignored_exceptions': [],\n      'transmit_global_variables': True,\n      'transmit_local_variables': True,\n      'transmit_environment_variables:': True,\n      'userversion': \"Not defined\",\n      'user': None\n  })\n\nFor the local/global/environment variables, if their options are set to False the corresponding variables will not be sent with exception payloads.\n\nhttpTimeout controls the maximum time the HTTP request can take when POSTing to the Raygun API, and is of type 'float'.\n\nSending functions\n-----------------\n\n+----------------+---------------+--------------------+\n| Function       | Arguments     | Type               |\n+================+===============+====================+\n| send_exception | exception     | Exception          |\n+                +---------------+--------------------+\n|                | exc_info      | 3-tuple            |\n+                +---------------+--------------------+\n|                | tags          | List               |\n+                +---------------+--------------------+\n|                | userCustomData| Dict               |\n+                +---------------+--------------------+\n|                | httpRequest   | Dict               |\n+----------------+---------------+--------------------+\n\n**All parameters are optional.**\n\nCall this function from within a catch block to send the current exception to Raygun:\n\n.. code:: python\n\n  # Automatically gets the current exception\n  httpResult = client.send_exception()\n\n  # Uses the supplied sys.exc_info() tuple\n  httpResult = client.send_exception(exc_info=sys.exc_info())\n\n  # Uses a supplied Exception object\n  httpResult = client.send_exception(exception=exception)\n\n  # Send tags, custom data and an HTTP request object\n  httpResult = client.send_exception(tags=[], userCustomData={}, request={})\n\nYou can pass in **either** of these two exception params:\n\n* :code:`exception` should be a subclass of type Exception. Pass this in if you want to manually transmit an exception object to Raygun.\n* :code:`exc_info` should be the 3-tuple returned from :code:`sys.exc_info()`. Pass this tuple in if you wish to use it in other code aside from send_exception().\n\nsend_exception also supports the following extra data parameters:\n\n* :code:`tags` is a list of tags relating to the current context which you can define.\n* :code:`userCustomData` is a dict containing custom key-values also of your choosing.\n* :code:`httpRequest` is HTTP Request data - see `sample.py` for the expected format of the object.\n\nConfig and data functions\n-------------------------\n\n+--------------------+---------------+--------------------+\n| Function           | Arguments     | Type               |\n+====================+===============+====================+\n| filter_keys        | keys          | List               |\n+--------------------+---------------+--------------------+\n\nIf you want to filter sensitive data out of the payload that is sent to Raygun, pass in a list of keys here. Any matching keys on the top level Raygun message object, or within dictionaries on the top level Raygun message object (including dictionaries nested within dictionaries) will have their value replaced with :code:`<filtered>` - useful for passwords, credit card data etc. Supports * at the end of a key to indicate you want to filter any key that contains that key, ie foo_* will filter foo_bar, foo_qux, foo_baz etc\n\n+------------------+---------------+--------------------+\n| Function         | Arguments     | Type               |\n+==================+===============+====================+\n| ignore_exceptions| exceptions    | List               |\n+------------------+---------------+--------------------+\n\nProvide a list of exception types to ignore here. Any exceptions that are passed to send_exception that match a type in this list won't be sent.\n\n+------------------+---------------+--------------------+\n| Function         | Arguments     | Type               |\n+==================+===============+====================+\n| on_before_send   | callback      | Function           |\n+------------------+---------------+--------------------+\n\nYou can mutate the candidate payload by passing in a function that accepts one parameter using this function. This allows you to completely customize what data is sent, immediately before it happens.\n\n+------------------+---------------+--------------------+\n| Function         | Arguments     | Type               |\n+==================+===============+====================+\n| on_grouping_key  | callback      | Function           |\n+------------------+---------------+--------------------+\n\nPass a callback function to this method to configure custom grouping logic. The callback should take one parameter, an instance of RaygunMessage, and return a string between 1 and 100 characters in length (see 'Custom Grouping Logic' below for more details).\n\n+----------------+---------------+--------------------+\n| Function       | Arguments     | Type               |\n+================+===============+====================+\n| set_proxy      | host          | String             |\n+                +---------------+--------------------+\n|                | port          | Integer            |\n+----------------+---------------+--------------------+\n\nCall this function if your code is behind a proxy and want Raygun4py to make the HTTP request to the Raygun endpoint through it.\n\n+----------------+---------------+--------------------+\n| Function       | Arguments     | Type               |\n+================+===============+====================+\n| set_version    | version       | String             |\n+----------------+---------------+--------------------+\n\nCall this to attach a SemVer version to each message that is sent. This will be visible on the dashboard and can be used to filter exceptions to a particular version, deployment tracking etc.\n\n+----------------+---------------+--------------------+\n| Function       | Arguments     | Type               |\n+================+===============+====================+\n| set_user       | user_info     | Dict               |\n+----------------+---------------+--------------------+\n\nUser data can be passed in which will be displayed in the Raygun web app. The dict you pass in should look this this:\n\n.. code:: python\n\n  client.set_user({\n      'firstName': 'Foo',\n      'fullName': 'Foo Bar',\n      'email': 'foo@bar.com',\n      'isAnonymous': False,\n      'identifier': 'foo@bar.com'\n    })\n\n`identifier` should be whatever unique key you use to identify users, for instance an email address. This will be used to create the count of unique affected users. If you wish to anonymize it, you can generate and store a UUID or hash one or more of their unique login data fields, if available.\n\nCustom grouping logic\n---------------------\n\nYou can create custom exception grouping logic that overrides the automatic Raygun grouping by passing in a function that accepts one parameter using this function. The callback's one parameter is an instance of RaygunMessage (python[2/3]/raygunmsgs.py), and the callback should return a string.\n\nThe RaygunMessage instance contains all the error and state data that is about to be sent to the Raygun API. In your callback you can inspect this RaygunMessage, hash together the fields you want to group by, then return a string which is the grouping key.\n\nThis string needs to be between 1 and 100 characters long. If the callback is not set or the string isn't valid, the default automatic grouping will be used.\n\nBy example:\n\n.. code:: python\n\n    class MyClass(object):\n\n        def my_callback(self, raygun_message):\n            return raygun_message.get_error().message[:100] # Use naive message-based grouping only\n\n        def create_raygun_and_bind_callback(self):\n            sender = raygunprovider.RaygunSender('api_key')\n            sender.on_grouping_key(self.my_callback)\n\nThe RaygunSender above will use the my_callback to execute custom grouping logic when an exception is raised. The above logic will use the exception message only - you'll want to use a more sophisticated approach, usually involving sanitizing or ignoring data.\n\nChained exceptions\n------------------\n\nFor Python 3, chained exceptions are supported and automatically sent along with their traceback.\n\nThis occurs when an exception is raised while handling another exception - see tests_functional.py for an example.\n\nTroubleshooting\n===============\n\nTo see the HTTP response code from sending the message to raygun, `print client.send()` (as in line 27 of test.py). It will be 403 if an invalid API key was entered, and 202 if successful.\n\nCreate a thread in the official support forums at http://raygun.io/forums, and we'll help you out.\n\nChangelog\n=========\n\n`View the release history here <CHANGELOG.md>`_", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://raygun.com", "keywords": "", "license": "LICENSE", "maintainer": "", "maintainer_email": "", "name": "raygun4py", "package_url": "https://pypi.org/project/raygun4py/", "platform": "", "project_url": "https://pypi.org/project/raygun4py/", "project_urls": {"Homepage": "https://raygun.com"}, "release_url": "https://pypi.org/project/raygun4py/4.3.0/", "requires_dist": null, "requires_python": "", "summary": "Official Raygun provider for Python 2.7 and Python 3+", "version": "4.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"raygun4py\">\n<h2>raygun4py</h2>\n<a href=\"https://travis-ci.org/MindscapeHQ/raygun4py?branch=master\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/MindscapeHQ/raygun4py.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/810f6311908b355dfc118d387499da332f4a722c/68747470733a2f2f7472617669732d63692e6f72672f4d696e64736361706548512f72617967756e3470792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/MindscapeHQ/raygun4py?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/MindscapeHQ/raygun4py/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72df622d0c9f349e37fd9548d07354a07dea8055/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4d696e64736361706548512f72617967756e3470792f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Official Raygun provider for <strong>Python 2.7</strong>, <strong>Python 3+</strong> and <strong>PyPy</strong></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The easiest way to install this is as a pip package, as it is available from PyPI. From your command line, run:</p>\n<pre>$ pip install raygun4py\n</pre>\n<p>Then import and instantiate the module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">raygun4py</span> <span class=\"kn\">import</span> <span class=\"n\">raygunprovider</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">raygunprovider</span><span class=\"o\">.</span><span class=\"n\">RaygunSender</span><span class=\"p\">(</span><span class=\"s1\">'your_apikey'</span><span class=\"p\">)</span>\n</pre>\n<div id=\"test-the-installation\">\n<h3>Test the installation</h3>\n<p>From the command line, run:</p>\n<pre>$ raygun4py test your_apikey\n</pre>\n<p>Replace <code>your_apikey</code> with the one listed on your Raygun dashboard. This will cause a test exception to be generated and sent.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Automatically send the current exception like this:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_exception</span><span class=\"p\">()</span>\n</pre>\n<p>See <a href=\"#sending-functions\" rel=\"nofollow\">sending functions</a> for more ways to send.</p>\n<div id=\"uncaught-exception-handler\">\n<h3>Uncaught exception handler</h3>\n<p>To automatically pick up unhandled exceptions with custom logic, you can provide a callback function to sys.excepthook:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">handle_exception</span><span class=\"p\">(</span><span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_value</span><span class=\"p\">,</span> <span class=\"n\">exc_traceback</span><span class=\"p\">):</span>\n    <span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">raygunprovider</span><span class=\"o\">.</span><span class=\"n\">RaygunSender</span><span class=\"p\">(</span><span class=\"s2\">\"your_apikey\"</span><span class=\"p\">)</span>\n    <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">send_exception</span><span class=\"p\">(</span><span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_value</span><span class=\"p\">,</span> <span class=\"n\">exc_traceback</span><span class=\"p\">))</span>\n\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">excepthook</span> <span class=\"o\">=</span> <span class=\"n\">handle_exception</span>\n</pre>\n</div>\n<div id=\"logging\">\n<h3>Logging</h3>\n<p>You can also send exceptions using a logger:</p>\n<pre><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">\"mylogger\"</span><span class=\"p\">)</span>\n<span class=\"n\">rgHandler</span> <span class=\"o\">=</span> <span class=\"n\">raygunprovider</span><span class=\"o\">.</span><span class=\"n\">RaygunHandler</span><span class=\"p\">(</span><span class=\"s2\">\"your_apikey\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">rgHandler</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">log_exception</span><span class=\"p\">(</span><span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_value</span><span class=\"p\">,</span> <span class=\"n\">exc_traceback</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"An exception occurred\"</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_value</span><span class=\"p\">,</span> <span class=\"n\">exc_traceback</span><span class=\"p\">))</span>\n\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">excepthook</span> <span class=\"o\">=</span> <span class=\"n\">log_exception</span>\n</pre>\n<p>This uses the built-in <code>RaygunHandler</code>. You can provide your own handler implementation based on that class if you need custom sending behavior.</p>\n</div>\n<div id=\"web-frameworks\">\n<h3>Web frameworks</h3>\n<p>Raygun4py includes dedicated middleware implementations for Django and Flask, as well as generic WSGI frameworks (Tornado, Bottle, Ginkgo etc). These are available for both Python 2.6/2.7 and Python 3+.</p>\n<div id=\"django\">\n<h4>Django</h4>\n<p>To configure Django to automatically send all exceptions that are raised in views to Raygun:</p>\n<p>settings.py</p>\n<pre><span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'raygun4py.middleware.django.Provider'</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">RAYGUN4PY_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'api_key'</span><span class=\"p\">:</span> <span class=\"s1\">'paste_your_api_key_here'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The above configuration is the minimal required setup. The full set of options supported by the provider can be declared in the same way:</p>\n<pre><span class=\"n\">RAYGUN4PY_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'api_key'</span><span class=\"p\">:</span> <span class=\"s1\">'paste_your_api_key_here'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'http_timeout'</span><span class=\"p\">:</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span>\n    <span class=\"s1\">'proxy'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'before_send_callback'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'grouping_key_callback'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'filtered_keys'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s1\">'ignored_exceptions'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s1\">'transmit_global_variables'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'transmit_local_variables'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'transmit_environment_variables:'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'userversion'</span><span class=\"p\">:</span> <span class=\"s2\">\"Not defined\"</span><span class=\"p\">,</span>\n    <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"flask\">\n<h4>Flask</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">current_app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">raygun4py.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">flask</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">Provider</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'your_apikey'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"wsgi\">\n<h4>WSGI</h4>\n<p>An example using <strong>Tornado</strong>, which will pick up exceptions that occur in the WSGI pipeline:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">raygun4py.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">wsgi</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MainHandler</span><span class=\"p\">(</span><span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">RequestHandler</span><span class=\"p\">):</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'init'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n  <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'default_handler_class'</span><span class=\"p\">:</span> <span class=\"n\">MainHandler</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">([</span>\n      <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">MainHandler</span><span class=\"p\">),</span>\n  <span class=\"p\">],</span> <span class=\"o\">**</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n\n  <span class=\"n\">wsgiapp</span> <span class=\"o\">=</span> <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">wsgi</span><span class=\"o\">.</span><span class=\"n\">WSGIAdapter</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">)</span>\n  <span class=\"n\">raygun_wrapped_app</span> <span class=\"o\">=</span> <span class=\"n\">wsgi</span><span class=\"o\">.</span><span class=\"n\">Provider</span><span class=\"p\">(</span><span class=\"n\">wsgiapp</span><span class=\"p\">,</span> <span class=\"s1\">'your_apikey'</span><span class=\"p\">)</span>\n  <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">wsgiref</span><span class=\"o\">.</span><span class=\"n\">simple_server</span><span class=\"o\">.</span><span class=\"n\">make_server</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"mi\">8888</span><span class=\"p\">,</span> <span class=\"n\">raygun_wrapped_app</span><span class=\"p\">)</span>\n  <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</pre>\n<p>Note that many frameworks (tornado, pryramid, gevent et al) will swallow exceptions that occur within their domain.</p>\n<p>Let us know if we\u2019re missing middleware for your framework, or feel free to submit a pull request.</p>\n<div id=\"attaching-raw-http-request-data\">\n<h5>Attaching raw HTTP request data</h5>\n<p>If you are in a web server environment and have HTTP request details available, you can pass these and the headers through in a dictionary (see <code>sample.py</code>).</p>\n<p>Code running on Google App Engine should now be supported - you can test this locally, and has been reported working once deployed (the latter currently requires a paid account due to needed SSL support).</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<div id=\"initialization-options\">\n<h3>Initialization options</h3>\n<p><code>RaygunSender</code> accepts a <code>config</code> dict which is used to set options for the provider (the defaults are shown below):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">raygun4py</span> <span class=\"kn\">import</span> <span class=\"n\">raygunprovider</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">raygunprovider</span><span class=\"o\">.</span><span class=\"n\">RaygunSender</span><span class=\"p\">(</span><span class=\"s1\">'your_apikey'</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'http_timeout'</span><span class=\"p\">:</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span>\n    <span class=\"s1\">'proxy'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'before_send_callback'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'grouping_key_callback'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'filtered_keys'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s1\">'ignored_exceptions'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s1\">'transmit_global_variables'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'transmit_local_variables'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'transmit_environment_variables:'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'userversion'</span><span class=\"p\">:</span> <span class=\"s2\">\"Not defined\"</span><span class=\"p\">,</span>\n    <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n<span class=\"p\">})</span>\n</pre>\n<p>For the local/global/environment variables, if their options are set to False the corresponding variables will not be sent with exception payloads.</p>\n<p>httpTimeout controls the maximum time the HTTP request can take when POSTing to the Raygun API, and is of type \u2018float\u2019.</p>\n</div>\n<div id=\"sending-functions\">\n<h3>Sending functions</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Arguments</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>send_exception</td>\n<td>exception</td>\n<td>Exception</td>\n</tr>\n<tr><td>exc_info</td>\n<td>3-tuple</td>\n</tr>\n<tr><td>tags</td>\n<td>List</td>\n</tr>\n<tr><td>userCustomData</td>\n<td>Dict</td>\n</tr>\n<tr><td>httpRequest</td>\n<td>Dict</td>\n</tr>\n</tbody>\n</table>\n<p><strong>All parameters are optional.</strong></p>\n<p>Call this function from within a catch block to send the current exception to Raygun:</p>\n<pre><span class=\"c1\"># Automatically gets the current exception</span>\n<span class=\"n\">httpResult</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_exception</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Uses the supplied sys.exc_info() tuple</span>\n<span class=\"n\">httpResult</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_exception</span><span class=\"p\">(</span><span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Uses a supplied Exception object</span>\n<span class=\"n\">httpResult</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_exception</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">exception</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Send tags, custom data and an HTTP request object</span>\n<span class=\"n\">httpResult</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_exception</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">userCustomData</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n</pre>\n<p>You can pass in <strong>either</strong> of these two exception params:</p>\n<ul>\n<li><code>exception</code> should be a subclass of type Exception. Pass this in if you want to manually transmit an exception object to Raygun.</li>\n<li><code>exc_info</code> should be the 3-tuple returned from <code>sys.exc_info()</code>. Pass this tuple in if you wish to use it in other code aside from send_exception().</li>\n</ul>\n<p>send_exception also supports the following extra data parameters:</p>\n<ul>\n<li><code>tags</code> is a list of tags relating to the current context which you can define.</li>\n<li><code>userCustomData</code> is a dict containing custom key-values also of your choosing.</li>\n<li><code>httpRequest</code> is HTTP Request data - see <cite>sample.py</cite> for the expected format of the object.</li>\n</ul>\n</div>\n<div id=\"config-and-data-functions\">\n<h3>Config and data functions</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Arguments</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>filter_keys</td>\n<td>keys</td>\n<td>List</td>\n</tr>\n</tbody>\n</table>\n<p>If you want to filter sensitive data out of the payload that is sent to Raygun, pass in a list of keys here. Any matching keys on the top level Raygun message object, or within dictionaries on the top level Raygun message object (including dictionaries nested within dictionaries) will have their value replaced with <code>&lt;filtered&gt;</code> - useful for passwords, credit card data etc. Supports * at the end of a key to indicate you want to filter any key that contains that key, ie foo_* will filter foo_bar, foo_qux, foo_baz etc</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Arguments</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>ignore_exceptions</td>\n<td>exceptions</td>\n<td>List</td>\n</tr>\n</tbody>\n</table>\n<p>Provide a list of exception types to ignore here. Any exceptions that are passed to send_exception that match a type in this list won\u2019t be sent.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Arguments</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>on_before_send</td>\n<td>callback</td>\n<td>Function</td>\n</tr>\n</tbody>\n</table>\n<p>You can mutate the candidate payload by passing in a function that accepts one parameter using this function. This allows you to completely customize what data is sent, immediately before it happens.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Arguments</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>on_grouping_key</td>\n<td>callback</td>\n<td>Function</td>\n</tr>\n</tbody>\n</table>\n<p>Pass a callback function to this method to configure custom grouping logic. The callback should take one parameter, an instance of RaygunMessage, and return a string between 1 and 100 characters in length (see \u2018Custom Grouping Logic\u2019 below for more details).</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Arguments</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>set_proxy</td>\n<td>host</td>\n<td>String</td>\n</tr>\n<tr><td>port</td>\n<td>Integer</td>\n</tr>\n</tbody>\n</table>\n<p>Call this function if your code is behind a proxy and want Raygun4py to make the HTTP request to the Raygun endpoint through it.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Arguments</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>set_version</td>\n<td>version</td>\n<td>String</td>\n</tr>\n</tbody>\n</table>\n<p>Call this to attach a SemVer version to each message that is sent. This will be visible on the dashboard and can be used to filter exceptions to a particular version, deployment tracking etc.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Arguments</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>set_user</td>\n<td>user_info</td>\n<td>Dict</td>\n</tr>\n</tbody>\n</table>\n<p>User data can be passed in which will be displayed in the Raygun web app. The dict you pass in should look this this:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_user</span><span class=\"p\">({</span>\n    <span class=\"s1\">'firstName'</span><span class=\"p\">:</span> <span class=\"s1\">'Foo'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'fullName'</span><span class=\"p\">:</span> <span class=\"s1\">'Foo Bar'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'foo@bar.com'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'isAnonymous'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'identifier'</span><span class=\"p\">:</span> <span class=\"s1\">'foo@bar.com'</span>\n  <span class=\"p\">})</span>\n</pre>\n<p><cite>identifier</cite> should be whatever unique key you use to identify users, for instance an email address. This will be used to create the count of unique affected users. If you wish to anonymize it, you can generate and store a UUID or hash one or more of their unique login data fields, if available.</p>\n</div>\n<div id=\"custom-grouping-logic\">\n<h3>Custom grouping logic</h3>\n<p>You can create custom exception grouping logic that overrides the automatic Raygun grouping by passing in a function that accepts one parameter using this function. The callback\u2019s one parameter is an instance of RaygunMessage (python[2/3]/raygunmsgs.py), and the callback should return a string.</p>\n<p>The RaygunMessage instance contains all the error and state data that is about to be sent to the Raygun API. In your callback you can inspect this RaygunMessage, hash together the fields you want to group by, then return a string which is the grouping key.</p>\n<p>This string needs to be between 1 and 100 characters long. If the callback is not set or the string isn\u2019t valid, the default automatic grouping will be used.</p>\n<p>By example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">my_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">raygun_message</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">raygun_message</span><span class=\"o\">.</span><span class=\"n\">get_error</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">[:</span><span class=\"mi\">100</span><span class=\"p\">]</span> <span class=\"c1\"># Use naive message-based grouping only</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_raygun_and_bind_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">raygunprovider</span><span class=\"o\">.</span><span class=\"n\">RaygunSender</span><span class=\"p\">(</span><span class=\"s1\">'api_key'</span><span class=\"p\">)</span>\n        <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">on_grouping_key</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_callback</span><span class=\"p\">)</span>\n</pre>\n<p>The RaygunSender above will use the my_callback to execute custom grouping logic when an exception is raised. The above logic will use the exception message only - you\u2019ll want to use a more sophisticated approach, usually involving sanitizing or ignoring data.</p>\n</div>\n<div id=\"chained-exceptions\">\n<h3>Chained exceptions</h3>\n<p>For Python 3, chained exceptions are supported and automatically sent along with their traceback.</p>\n<p>This occurs when an exception is raised while handling another exception - see tests_functional.py for an example.</p>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h2>Troubleshooting</h2>\n<p>To see the HTTP response code from sending the message to raygun, <cite>print client.send()</cite> (as in line 27 of test.py). It will be 403 if an invalid API key was entered, and 202 if successful.</p>\n<p>Create a thread in the official support forums at <a href=\"http://raygun.io/forums\" rel=\"nofollow\">http://raygun.io/forums</a>, and we\u2019ll help you out.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p><a href=\"CHANGELOG.md\" rel=\"nofollow\">View the release history here</a></p>\n</div>\n\n          </div>"}, "last_serial": 5364666, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "aa7430301460083ba030f835e0fb8223", "sha256": "f092633487cb80aedcd36cb3bf1a9ba294e62f358067d399bce3b236d1230453"}, "downloads": -1, "filename": "raygun4py-1.0.0.tar.gz", "has_sig": false, "md5_digest": "aa7430301460083ba030f835e0fb8223", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3388, "upload_time": "2013-07-24T00:16:51", "upload_time_iso_8601": "2013-07-24T00:16:51.048836Z", "url": "https://files.pythonhosted.org/packages/73/4e/60e402383a45343873a01c4980c5d0527471c68e1b60eeeff524c794922d/raygun4py-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1aa0e039db6b8483ea389706c84d53cb", "sha256": "497d22f6921a9816309094ed89165af191da9e3b67450b75c1896e2717e305d6"}, "downloads": -1, "filename": "raygun4py-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1aa0e039db6b8483ea389706c84d53cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3755, "upload_time": "2013-10-31T21:06:15", "upload_time_iso_8601": "2013-10-31T21:06:15.523490Z", "url": "https://files.pythonhosted.org/packages/4e/5b/ae18c90865e4a14bc27c746b48cefc8a161035457702e198938153ad23fb/raygun4py-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "d3ab327fdf95c1be4c64abd3c816090f", "sha256": "66ea41a859cfc0e514d4db6dc7c85970ef832e0283d83f57180390fb3a5f5ef7"}, "downloads": -1, "filename": "raygun4py-1.1.1.tar.gz", "has_sig": false, "md5_digest": "d3ab327fdf95c1be4c64abd3c816090f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3847, "upload_time": "2013-10-31T21:40:36", "upload_time_iso_8601": "2013-10-31T21:40:36.335965Z", "url": "https://files.pythonhosted.org/packages/5e/e0/ea697a9629130dc96d72e1953bdc27ea664be87caca5196534f5cf807928/raygun4py-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "c3e48e2b17ea8ce13dc69b625e76542c", "sha256": "e5dea060c1ccc68ec9ef710937a8a343c774c1ae946f55e459d91a4a9d8d21db"}, "downloads": -1, "filename": "raygun4py-1.1.2.zip", "has_sig": false, "md5_digest": "c3e48e2b17ea8ce13dc69b625e76542c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6126, "upload_time": "2013-11-26T23:58:34", "upload_time_iso_8601": "2013-11-26T23:58:34.383606Z", "url": "https://files.pythonhosted.org/packages/59/c6/e40b948bd700fe066a52c241155ea0cbe76ceb6df7ed73d28613c162575f/raygun4py-1.1.2.zip", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "05926105e321f8be752cdb98964eb463", "sha256": "2b35b96b58e4904058114ced023e31625cb870f4e91bb7d077c01c7de3d96de1"}, "downloads": -1, "filename": "raygun4py-1.1.3.zip", "has_sig": false, "md5_digest": "05926105e321f8be752cdb98964eb463", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6808, "upload_time": "2014-01-06T00:07:43", "upload_time_iso_8601": "2014-01-06T00:07:43.232979Z", "url": "https://files.pythonhosted.org/packages/21/72/ad91043f26bfb45743bbf23ca3c46d4d0ff06ea3d40b6fbb32511c536524/raygun4py-1.1.3.zip", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "1f708d26bbc8aa12007e7391a0945fe8", "sha256": "03e1436252bd1a4341bb8616e4890dd328fa470e091ccbb7a320c7bd22aaebb9"}, "downloads": -1, "filename": "raygun4py-1.1.4.zip", "has_sig": false, "md5_digest": "1f708d26bbc8aa12007e7391a0945fe8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10284, "upload_time": "2014-03-26T00:49:47", "upload_time_iso_8601": "2014-03-26T00:49:47.190261Z", "url": "https://files.pythonhosted.org/packages/be/2c/1c9199813c1c613839497da6e5ef257238e9111b51aac8887da5381d3df8/raygun4py-1.1.4.zip", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "f442d92544259cc24ac3cc8152492432", "sha256": "0824fd02350ebb0727eaaa752e73deb9cd617f2af650e35ecfc3a3f3b6be0107"}, "downloads": -1, "filename": "raygun4py-2.0.0.zip", "has_sig": false, "md5_digest": "f442d92544259cc24ac3cc8152492432", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20011, "upload_time": "2014-03-26T02:01:02", "upload_time_iso_8601": "2014-03-26T02:01:02.420201Z", "url": "https://files.pythonhosted.org/packages/14/5c/d30a3e23acde50e88c63ecc02ffe0ad0b9367add96162939dd0262d9a436/raygun4py-2.0.0.zip", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "0b46313250bb7db8bf2c4d316c21e7cd", "sha256": "f20ad90b69c0a42265e8d95dfb5bc708e42639ea9a64c617bb14cb522c979443"}, "downloads": -1, "filename": "raygun4py-2.0.1.zip", "has_sig": false, "md5_digest": "0b46313250bb7db8bf2c4d316c21e7cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20260, "upload_time": "2014-05-26T00:07:15", "upload_time_iso_8601": "2014-05-26T00:07:15.825515Z", "url": "https://files.pythonhosted.org/packages/6b/da/c605d4bc50b08c4800d32a965297f927d2da6d6c9eb4f2c161cb92349e94/raygun4py-2.0.1.zip", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "9bd8976bb343ccdb41990f772e77d3e4", "sha256": "2869eafbeeacb1fc1973b056506e7ad8768f20d37a60b7c5c61e0f0a2383fad7"}, "downloads": -1, "filename": "raygun4py-2.1.0.zip", "has_sig": false, "md5_digest": "9bd8976bb343ccdb41990f772e77d3e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20925, "upload_time": "2014-07-02T03:31:24", "upload_time_iso_8601": "2014-07-02T03:31:24.981439Z", "url": "https://files.pythonhosted.org/packages/d0/8f/e75f27f489e66b14f55455a1b2c0a73b05a0ecbcf1c819b1546759abe7a2/raygun4py-2.1.0.zip", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "a2f95dbebad5b431f6028044a95c8532", "sha256": "a400bb5f2373031b5b033c8256fe2c8fb2429028b48836de98c396f008b9671f"}, "downloads": -1, "filename": "raygun4py-2.2.0.zip", "has_sig": false, "md5_digest": "a2f95dbebad5b431f6028044a95c8532", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23895, "upload_time": "2015-01-27T00:53:05", "upload_time_iso_8601": "2015-01-27T00:53:05.659064Z", "url": "https://files.pythonhosted.org/packages/4d/b4/2f49627af42f927e11c91987f604d2f121b534417f4a10eb77a892af10bb/raygun4py-2.2.0.zip", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "d2e99746fa42878dcdd1724767fcc19a", "sha256": "732fa7a8ed5b421bec332a85f79f49fff78ff56a203286a4371dc7c05f8db653"}, "downloads": -1, "filename": "raygun4py-3.0.0.zip", "has_sig": false, "md5_digest": "d2e99746fa42878dcdd1724767fcc19a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34088, "upload_time": "2015-05-10T23:35:54", "upload_time_iso_8601": "2015-05-10T23:35:54.278888Z", "url": "https://files.pythonhosted.org/packages/98/fa/521f3314feb00824d3691b709eaedba516eb78850535c000aeb681a6fd0d/raygun4py-3.0.0.zip", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "0a3de5fd3b08feefb14eb0b73808107a", "sha256": "da993d43a05e3a7064feb12c7b1ba49fc526b6705914847ecdff072e9bc3101b"}, "downloads": -1, "filename": "raygun4py-3.0.1.zip", "has_sig": false, "md5_digest": "0a3de5fd3b08feefb14eb0b73808107a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34114, "upload_time": "2015-05-12T01:50:40", "upload_time_iso_8601": "2015-05-12T01:50:40.181731Z", "url": "https://files.pythonhosted.org/packages/31/a6/f097904b0e398c02a197293fc725d9bbb86d85e8856e25f7eb9195b40a3d/raygun4py-3.0.1.zip", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "ca1516485dca575dcd6f66606a07e8a8", "sha256": "c178e16fc2c66234d2f9a7706d6a1b202ecd636e8347646fb00cc927b4d456fd"}, "downloads": -1, "filename": "raygun4py-3.0.2.zip", "has_sig": false, "md5_digest": "ca1516485dca575dcd6f66606a07e8a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34576, "upload_time": "2015-05-28T00:07:38", "upload_time_iso_8601": "2015-05-28T00:07:38.203562Z", "url": "https://files.pythonhosted.org/packages/1b/ca/b59812934486e407c6f03b791e5955cce470aff09ead8942dddbf997f4b0/raygun4py-3.0.2.zip", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "91148dc1aabb5df5eb759bb5eaee4ba7", "sha256": "75dbe8eedef7a7c4cd4f6a25933ca6ae3d1130c18db85a06fcf87d01c51451f4"}, "downloads": -1, "filename": "raygun4py-3.0.3.tar.gz", "has_sig": false, "md5_digest": "91148dc1aabb5df5eb759bb5eaee4ba7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18708, "upload_time": "2016-01-21T22:51:18", "upload_time_iso_8601": "2016-01-21T22:51:18.885540Z", "url": "https://files.pythonhosted.org/packages/b8/0e/35b385f58e44264641e646504ac265afe4562ebfafe5fd8d2ba0d15556de/raygun4py-3.0.3.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "a38597bdad825c4097f82cdefe2ec133", "sha256": "8f8fc2aadbadc80c278aed7f86a38a4c73d9343677afc53f3aa5922a5e25c039"}, "downloads": -1, "filename": "raygun4py-3.1.0.tar.gz", "has_sig": false, "md5_digest": "a38597bdad825c4097f82cdefe2ec133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23251, "upload_time": "2016-02-01T21:37:52", "upload_time_iso_8601": "2016-02-01T21:37:52.577572Z", "url": "https://files.pythonhosted.org/packages/89/22/2a29bb11fbd3f2276ec33565513db0f31eac6f6328fb1a5b43d39d43bd5a/raygun4py-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "d9296b2f2b3415da541f372d6185a9a6", "sha256": "0d49a0c8bae0c6859eb40532c893bc91773f395f5922ec9d8990baed7567566b"}, "downloads": -1, "filename": "raygun4py-3.1.1.tar.gz", "has_sig": false, "md5_digest": "d9296b2f2b3415da541f372d6185a9a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23388, "upload_time": "2016-02-14T21:51:39", "upload_time_iso_8601": "2016-02-14T21:51:39.428676Z", "url": "https://files.pythonhosted.org/packages/c9/3d/1440380a290eb5e57067ed8a1a877255a4513c06822e8d989667e22b2d36/raygun4py-3.1.1.tar.gz", "yanked": false}], "3.1.2": [{"comment_text": "", "digests": {"md5": "cb7f1fd9f421a3bc3f02ca16e79f0e1e", "sha256": "ee32cc3c7b1320fc0312c2b3a904a810f61ba302c2bad6dec836bb19fbf68340"}, "downloads": -1, "filename": "raygun4py-3.1.2.tar.gz", "has_sig": false, "md5_digest": "cb7f1fd9f421a3bc3f02ca16e79f0e1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23539, "upload_time": "2016-04-14T23:44:44", "upload_time_iso_8601": "2016-04-14T23:44:44.526207Z", "url": "https://files.pythonhosted.org/packages/93/4e/bf94cebeca0f2fa501424d788193749965a2a7af797f44cd91b9898583f8/raygun4py-3.1.2.tar.gz", "yanked": false}], "3.1.3": [{"comment_text": "", "digests": {"md5": "de854bd87e29da0fdb153564d2981140", "sha256": "2d70ba6934d86cacc6e0cc5a4429ed66d4c37783b1a90f686404c1d2eaa3c287"}, "downloads": -1, "filename": "raygun4py-3.1.3.tar.gz", "has_sig": false, "md5_digest": "de854bd87e29da0fdb153564d2981140", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27622, "upload_time": "2016-10-24T23:18:38", "upload_time_iso_8601": "2016-10-24T23:18:38.868088Z", "url": "https://files.pythonhosted.org/packages/6b/7f/2bc41695c8109ae64508151d840b59d7fa76d39d3df51999fbf20fe05693/raygun4py-3.1.3.tar.gz", "yanked": false}], "3.1.4": [{"comment_text": "", "digests": {"md5": "e28823f71d0e42e5f2e1e45cd698847a", "sha256": "7e345cc00b2a357ba001a8e29b542276f453ef6da6cbe0a0d62d9d563224c3ef"}, "downloads": -1, "filename": "raygun4py-3.1.4.tar.gz", "has_sig": false, "md5_digest": "e28823f71d0e42e5f2e1e45cd698847a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27546, "upload_time": "2017-01-15T23:13:26", "upload_time_iso_8601": "2017-01-15T23:13:26.594879Z", "url": "https://files.pythonhosted.org/packages/0f/33/55b8e1c3215677058310ff65fa5e878674e644ab31e6d5514464bba2b424/raygun4py-3.1.4.tar.gz", "yanked": false}], "3.1.5": [{"comment_text": "", "digests": {"md5": "42b6bde90ba3fe1a492213f0ffd778b4", "sha256": "74c6b9e660bc7d367f9610e9a46cea9a90724c9452357df5214762a0c9481ec5"}, "downloads": -1, "filename": "raygun4py-3.1.5.tar.gz", "has_sig": false, "md5_digest": "42b6bde90ba3fe1a492213f0ffd778b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27625, "upload_time": "2017-05-29T04:05:36", "upload_time_iso_8601": "2017-05-29T04:05:36.507904Z", "url": "https://files.pythonhosted.org/packages/9b/04/4b2600721037f2fd6278d5934a2ea82653ef4cd556e73306f3d1e8a917a5/raygun4py-3.1.5.tar.gz", "yanked": false}], "3.1.6": [{"comment_text": "", "digests": {"md5": "e2c40ca66a35c37f472f1af9893d0514", "sha256": "1a68c3d5a5de696167aabf4d2dfa36ac1b14be66da1d07908f5cebfc827e4b08"}, "downloads": -1, "filename": "raygun4py-3.1.6.tar.gz", "has_sig": false, "md5_digest": "e2c40ca66a35c37f472f1af9893d0514", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27815, "upload_time": "2018-04-10T05:11:22", "upload_time_iso_8601": "2018-04-10T05:11:22.067417Z", "url": "https://files.pythonhosted.org/packages/32/b3/73801ba2444f9bfe2bbcf897c9b314d9fee42047f262b762a55fba965350/raygun4py-3.1.6.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "e4a027db31c1ed0db16ed24f2ff4fc1c", "sha256": "6fedb9a6e8575675b1996644b944c006edecac4181b87a7ba505fcb153a143d0"}, "downloads": -1, "filename": "raygun4py-4.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "e4a027db31c1ed0db16ed24f2ff4fc1c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12046, "upload_time": "2018-10-31T01:03:50", "upload_time_iso_8601": "2018-10-31T01:03:50.913865Z", "url": "https://files.pythonhosted.org/packages/ba/3f/d46f20d171c34296ae7c493ab6e3b2948189bd006e86c70982b335dc888b/raygun4py-4.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63b3b528d727ba813bf8c59882783b46", "sha256": "945a923a5e69532648c5ccd44d2e1b7196f96441c6c624d2fe333d7e9830fa99"}, "downloads": -1, "filename": "raygun4py-4.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63b3b528d727ba813bf8c59882783b46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12048, "upload_time": "2018-10-31T01:03:52", "upload_time_iso_8601": "2018-10-31T01:03:52.375590Z", "url": "https://files.pythonhosted.org/packages/b0/42/2d6b9b5019902002a620a52df41246cb5b860ccb19a368640d0ba6e79403/raygun4py-4.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "175d0416f65fdf8944c60776e4ffc9c3", "sha256": "8cacf2ee7eb496198cb7e5ba953ed2f432ba035ee062ce48548fd1fba4d43c35"}, "downloads": -1, "filename": "raygun4py-4.0.0.tar.gz", "has_sig": false, "md5_digest": "175d0416f65fdf8944c60776e4ffc9c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23605, "upload_time": "2018-10-31T01:03:53", "upload_time_iso_8601": "2018-10-31T01:03:53.961041Z", "url": "https://files.pythonhosted.org/packages/c4/dc/6399a349bafcab26260c9ae9883a3f9de6acc28ba22d1a73ec728b762e19/raygun4py-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "c95323408c8386b21ddb281cd27dd100", "sha256": "a00bada2dc2d92af5e085aa309c9ef4e85142169160e217d0b0c5ae3d68d93b6"}, "downloads": -1, "filename": "raygun4py-4.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c95323408c8386b21ddb281cd27dd100", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12045, "upload_time": "2018-10-31T18:54:41", "upload_time_iso_8601": "2018-10-31T18:54:41.847066Z", "url": "https://files.pythonhosted.org/packages/6a/6c/194988d08400cc2348e15a6c20e9373bb2a0f1d23ba90cae6f0b0f98acce/raygun4py-4.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8a3ee7150e6e8bfa9a16e818ccf71ff", "sha256": "f84bcf681ca40794ba8f1b12cd2cc040f5c64671b05b06e95d08beb5a3b469b1"}, "downloads": -1, "filename": "raygun4py-4.1.0.tar.gz", "has_sig": false, "md5_digest": "c8a3ee7150e6e8bfa9a16e818ccf71ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23600, "upload_time": "2018-10-31T18:54:43", "upload_time_iso_8601": "2018-10-31T18:54:43.483139Z", "url": "https://files.pythonhosted.org/packages/30/51/d5375ec01eda6ba5730327ca1e0f74e42f7c2b1c8fd3e662e9e89ee9944d/raygun4py-4.1.0.tar.gz", "yanked": false}], "4.1.1": [{"comment_text": "", "digests": {"md5": "c14ca00ca8670b856ccb334184f38e49", "sha256": "5e0fda190a5997bbba10ba3043ccfbf5dd9ac8f32712087dfa6c537513e526ac"}, "downloads": -1, "filename": "raygun4py-4.1.1.tar.gz", "has_sig": false, "md5_digest": "c14ca00ca8670b856ccb334184f38e49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23606, "upload_time": "2018-11-05T04:30:20", "upload_time_iso_8601": "2018-11-05T04:30:20.762781Z", "url": "https://files.pythonhosted.org/packages/48/0a/72dd1b7d44d5f0a1ab28075f76a33650a01050ccc7c219e60e14f45c9583/raygun4py-4.1.1.tar.gz", "yanked": false}], "4.2.0": [{"comment_text": "", "digests": {"md5": "cdbae0dac85364c3c4e2d7095e1f9bb4", "sha256": "48443d5c5cd4d7c19be4258f995343e20acbbe1812a4c6106c893aec3ada5682"}, "downloads": -1, "filename": "raygun4py-4.2.0.tar.gz", "has_sig": false, "md5_digest": "cdbae0dac85364c3c4e2d7095e1f9bb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31187, "upload_time": "2018-12-02T19:16:07", "upload_time_iso_8601": "2018-12-02T19:16:07.530246Z", "url": "https://files.pythonhosted.org/packages/9e/53/7e3c240451a73b374c820eae9951faf351d6d228f8d01fa518cfd6bf5c58/raygun4py-4.2.0.tar.gz", "yanked": false}], "4.2.1": [{"comment_text": "", "digests": {"md5": "f6ba13e0d455e28abe79bb4080a1f300", "sha256": "809f62141e49efc3834b27c2dad3a41648e184a90bb4bd5a238e38bc9346d226"}, "downloads": -1, "filename": "raygun4py-4.2.1.tar.gz", "has_sig": false, "md5_digest": "f6ba13e0d455e28abe79bb4080a1f300", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30935, "upload_time": "2018-12-17T22:16:07", "upload_time_iso_8601": "2018-12-17T22:16:07.599925Z", "url": "https://files.pythonhosted.org/packages/f2/f3/89e7d7b8a0b2bce4b4426a3c1c4fdea876e51d8bbd06a4be48e3eb290d7b/raygun4py-4.2.1.tar.gz", "yanked": false}], "4.2.2": [{"comment_text": "", "digests": {"md5": "9f0913a46d4449e02f33c49ae62f6a6f", "sha256": "f29187bf5729af454ead479c2164a6d676af188e0f0b849fcef814642bcf9ae8"}, "downloads": -1, "filename": "raygun4py-4.2.2.tar.gz", "has_sig": false, "md5_digest": "9f0913a46d4449e02f33c49ae62f6a6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30971, "upload_time": "2019-01-22T19:53:03", "upload_time_iso_8601": "2019-01-22T19:53:03.128664Z", "url": "https://files.pythonhosted.org/packages/08/94/7821e31ec60e3bf9201625319b899be775d52aa41206d45906d849f234cf/raygun4py-4.2.2.tar.gz", "yanked": false}], "4.2.3": [{"comment_text": "", "digests": {"md5": "df63e5bad5f0628854aaf6c613339dfa", "sha256": "94ac09af618d35b9e0951b692678d35f3f750aedc4ec714c937926aaf1707629"}, "downloads": -1, "filename": "raygun4py-4.2.3.tar.gz", "has_sig": false, "md5_digest": "df63e5bad5f0628854aaf6c613339dfa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31008, "upload_time": "2019-03-28T21:16:56", "upload_time_iso_8601": "2019-03-28T21:16:56.696844Z", "url": "https://files.pythonhosted.org/packages/a4/e2/77b02845ed3e30cccf6daac3fb670e48198d6e8420d8200fabf27b6eb38b/raygun4py-4.2.3.tar.gz", "yanked": false}], "4.3.0": [{"comment_text": "", "digests": {"md5": "372ed084329a33f697856b50183985c7", "sha256": "9a675da0215df310a929ef8fe4f9f6c7882b3ee44a925d73e5c191fd962d7c4d"}, "downloads": -1, "filename": "raygun4py-4.3.0.tar.gz", "has_sig": false, "md5_digest": "372ed084329a33f697856b50183985c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31932, "upload_time": "2019-06-05T23:03:23", "upload_time_iso_8601": "2019-06-05T23:03:23.287220Z", "url": "https://files.pythonhosted.org/packages/61/48/48107cb44e1bf5fbbf12caa40494a3aad014e2a92233cc25c167c5a4c244/raygun4py-4.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "372ed084329a33f697856b50183985c7", "sha256": "9a675da0215df310a929ef8fe4f9f6c7882b3ee44a925d73e5c191fd962d7c4d"}, "downloads": -1, "filename": "raygun4py-4.3.0.tar.gz", "has_sig": false, "md5_digest": "372ed084329a33f697856b50183985c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31932, "upload_time": "2019-06-05T23:03:23", "upload_time_iso_8601": "2019-06-05T23:03:23.287220Z", "url": "https://files.pythonhosted.org/packages/61/48/48107cb44e1bf5fbbf12caa40494a3aad014e2a92233cc25c167c5a4c244/raygun4py-4.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:56 2020"}