{"info": {"author": "Niels Cautaerts", "author_email": "nielscautaerts@hotmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Physics"], "description": "# TEMMETA\n\nTEMMETA is a library for transmission electron microscopy (TEM) (meta)data manipulation. The aim is to offer a one stop place for very basic to intermediate level operations on (S)TEM data, and be a kind of python version of ImageJ + Digital Micrograph + Velox.\n\n**Author**: Niels Cautaerts, [nielscautaerts@hotmail.com](mailto:nielscautaerts@hotmail.com)\n\n**Last updated**: 18/04/2020\n\n**Try it now**: [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/din14970/TEMMETA/master?filepath=examples%2FTEMMETA%20demonstration.ipynb)\n\n## What can TEMMETA do?\n\n* For **images**:\n\t* plotting, rebinning, linear scaling, cropping, filtering...\n\t* Perform Fourrier filtering by calculating fast-fourrier-\t\ttransforms (FFTs), contruct FFT masks and calculating inverse \t\tfourrier transforms (IFFT)\n\t* Geometric phase analysis (GPA) [(Hytch et al., 1998)](http://doi.org/10.1016/S0304-3991(98)00035-7) on HRTEM images\n\t* Finding atomic column peak positions in HR-STEM images and \t\tfitting Gaussians to them\n\t* Calculating and plotting intensity line profiles along \t\tarbitrary directions in images\n\t* Export to png, tiff, hyperspy dataset\n\n* For **image stacks**:\n\t* Interactively browsing through the frames with sliders\n\t* Rebinning, linear scaling, cropping, filtering, of all the \t\tframes\n\t* Selecting and excluding frames in an image stack\n\t* Aligning frames in an image stack with cross-correlation\n\t* Averaging all the frames to create one image\n\t* Export frames to png's or full dataset to hyperspy\n\n* For **spectral data**:\n\t* select/exclude and align frames in SpectrumStream\n\t* Interactively browse through spectral map with sliders\n\t* Create images of spectrum maps at specific energies\n\t* Crop and rebin spectral maps\n\t* Condense areas to single spectra\n\t* Create line profiles along arbitrary directions in spectrum maps\n\t* Find peaks in spectra\n\t* Export to hyperspy\n\n* For **all datasets**:\n\t* Support for automated scalebars, keeping track of axis scales, \t\tunits and offsets\n\t* Keeping all processing history inside the metadata\n\nCurrently **only Velox .emd** files can be read in natively. One can still use the library for data coming from other files, but other tools will be needed to import those files and convert to the TEMMETA objects.\n\n## How do I use TEMMETA?\n\n### Prerequisites\n\n* You have [Anaconda](https://www.anaconda.com/distribution/) installed.\n\n### Set-up steps\n\n1. Create a new virtual environment on your system to install TEMMETA in\n\n\t```\n\t$ conda create --name temmeta\n\t```\n\n2. Activate the virtual environment anywhere in your system with\n\n\t```\n\t$ conda activate temmeta\n\t```\n\n3. Pip install temmeta\n\n\t```\n\t$ pip install temmeta\n\t```\n\n### Usage\n\n1. With the environment activated, start Jupyter Notebook with\n\n\t```\n\t$ jupyter notebook\n\t```\n\n2. Import `TEMMETA` modules like\n\n\t```\n\tfrom temmeta import data_io as dio\n\tfrom temmeta import image_filters as imf\n\t```\n\nFor help on how to use `TEMMETA`, follow the example jupyter notebook file `examples/TEMMETA demonstration.ipynb`. For most commands I tried to add a sufficiently descriptive docstring which you can access with `help(<command name>)`.\n\n## History\nTEMMETA started as a simple tool to read and convert Velox EMD data. As I became more familiar with the analysis needs of other people and I started seeing the limitations of other tools, it became clear TEMMETA needed to become more useful and easy for other people to use, especially those with limited python experience. Therefore I completely rewrote the library and modeled the tools after those available in popular software such as Digital Micrograph and ImageJ. TEMMETA still does not have a user interface, but the functions and classes should be familiar and easy enough for people that they can start analyzing their data in no time inside a Jupyter Notebook.\n\n## TODOs\n### Functionality\n* support for other file types: dm3/dm4 (Gatan), SER/EMI (FEI), TVIPS, TIFF, .blo\n* lazy operations on the emd dataset for exporting image frames without loading entire dataset into memory.\n* implement strain mapping using atomic peaks\n* find peaks in FFT's and diffraction patterns\n* support 4D-STEM and PED datasets\n* exporting and importing datasets to a single file\n* reevaluate metadata structure\n* applying shifts to spectrum stream frames is currently impossibly \tslow.\n* deeper analysis of EELS/EDX data, implement a periodic table for some basic quantification and element detection.\n* implement more filters\n\n### Ease of use\n* compile documentation with Sphinx\n\n### Structure and format\n* significant refactoring is necessary. Currently most functionality is in the basictools/data_io module - this file is a monster. There is a lot of repeated code which can be factored out with multiple inheritance.\n* documentation must be updated and refined in most places\n* unit tests must be created for most modules and methods\n\n## How can I contribute?\n\nYou may always contribute to the documentation and writing unit tests. I like [`pytest`](https://docs.pytest.org/en/latest/) but don't have much experience with it myself yet. UI tools to interface with the methods would also be appreciated. If you know a faster way to make a method run, definitely contribute.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/din14970/TEMMETA", "keywords": "TEM", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "temmeta", "package_url": "https://pypi.org/project/temmeta/", "platform": "", "project_url": "https://pypi.org/project/temmeta/", "project_urls": {"Homepage": "https://github.com/din14970/TEMMETA"}, "release_url": "https://pypi.org/project/temmeta/0.0.3/", "requires_dist": ["pandas", "openpyxl", "numpy", "matplotlib", "scipy", "jupyter", "hyperspy", "matplotlib-scalebar", "tqdm", "Pillow", "opencv-python", "PyQt5"], "requires_python": "", "summary": "TEMMETA is a library for transmission electron microscopy (TEM) (meta)data manipulation", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TEMMETA</h1>\n<p>TEMMETA is a library for transmission electron microscopy (TEM) (meta)data manipulation. The aim is to offer a one stop place for very basic to intermediate level operations on (S)TEM data, and be a kind of python version of ImageJ + Digital Micrograph + Velox.</p>\n<p><strong>Author</strong>: Niels Cautaerts, <a href=\"mailto:nielscautaerts@hotmail.com\">nielscautaerts@hotmail.com</a></p>\n<p><strong>Last updated</strong>: 18/04/2020</p>\n<p><strong>Try it now</strong>: <a href=\"https://mybinder.org/v2/gh/din14970/TEMMETA/master?filepath=examples%2FTEMMETA%20demonstration.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<h2>What can TEMMETA do?</h2>\n<ul>\n<li>\n<p>For <strong>images</strong>:</p>\n<ul>\n<li>plotting, rebinning, linear scaling, cropping, filtering...</li>\n<li>Perform Fourrier filtering by calculating fast-fourrier-\t\ttransforms (FFTs), contruct FFT masks and calculating inverse \t\tfourrier transforms (IFFT)</li>\n<li>Geometric phase analysis (GPA) <a href=\"http://doi.org/10.1016/S0304-3991(98)00035-7\" rel=\"nofollow\">(Hytch et al., 1998)</a> on HRTEM images</li>\n<li>Finding atomic column peak positions in HR-STEM images and \t\tfitting Gaussians to them</li>\n<li>Calculating and plotting intensity line profiles along \t\tarbitrary directions in images</li>\n<li>Export to png, tiff, hyperspy dataset</li>\n</ul>\n</li>\n<li>\n<p>For <strong>image stacks</strong>:</p>\n<ul>\n<li>Interactively browsing through the frames with sliders</li>\n<li>Rebinning, linear scaling, cropping, filtering, of all the \t\tframes</li>\n<li>Selecting and excluding frames in an image stack</li>\n<li>Aligning frames in an image stack with cross-correlation</li>\n<li>Averaging all the frames to create one image</li>\n<li>Export frames to png's or full dataset to hyperspy</li>\n</ul>\n</li>\n<li>\n<p>For <strong>spectral data</strong>:</p>\n<ul>\n<li>select/exclude and align frames in SpectrumStream</li>\n<li>Interactively browse through spectral map with sliders</li>\n<li>Create images of spectrum maps at specific energies</li>\n<li>Crop and rebin spectral maps</li>\n<li>Condense areas to single spectra</li>\n<li>Create line profiles along arbitrary directions in spectrum maps</li>\n<li>Find peaks in spectra</li>\n<li>Export to hyperspy</li>\n</ul>\n</li>\n<li>\n<p>For <strong>all datasets</strong>:</p>\n<ul>\n<li>Support for automated scalebars, keeping track of axis scales, \t\tunits and offsets</li>\n<li>Keeping all processing history inside the metadata</li>\n</ul>\n</li>\n</ul>\n<p>Currently <strong>only Velox .emd</strong> files can be read in natively. One can still use the library for data coming from other files, but other tools will be needed to import those files and convert to the TEMMETA objects.</p>\n<h2>How do I use TEMMETA?</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>You have <a href=\"https://www.anaconda.com/distribution/\" rel=\"nofollow\">Anaconda</a> installed.</li>\n</ul>\n<h3>Set-up steps</h3>\n<ol>\n<li>\n<p>Create a new virtual environment on your system to install TEMMETA in</p>\n<pre><code>$ conda create --name temmeta\n</code></pre>\n</li>\n<li>\n<p>Activate the virtual environment anywhere in your system with</p>\n<pre><code>$ conda activate temmeta\n</code></pre>\n</li>\n<li>\n<p>Pip install temmeta</p>\n<pre><code>$ pip install temmeta\n</code></pre>\n</li>\n</ol>\n<h3>Usage</h3>\n<ol>\n<li>\n<p>With the environment activated, start Jupyter Notebook with</p>\n<pre><code>$ jupyter notebook\n</code></pre>\n</li>\n<li>\n<p>Import <code>TEMMETA</code> modules like</p>\n<pre><code>from temmeta import data_io as dio\nfrom temmeta import image_filters as imf\n</code></pre>\n</li>\n</ol>\n<p>For help on how to use <code>TEMMETA</code>, follow the example jupyter notebook file <code>examples/TEMMETA demonstration.ipynb</code>. For most commands I tried to add a sufficiently descriptive docstring which you can access with <code>help(&lt;command name&gt;)</code>.</p>\n<h2>History</h2>\n<p>TEMMETA started as a simple tool to read and convert Velox EMD data. As I became more familiar with the analysis needs of other people and I started seeing the limitations of other tools, it became clear TEMMETA needed to become more useful and easy for other people to use, especially those with limited python experience. Therefore I completely rewrote the library and modeled the tools after those available in popular software such as Digital Micrograph and ImageJ. TEMMETA still does not have a user interface, but the functions and classes should be familiar and easy enough for people that they can start analyzing their data in no time inside a Jupyter Notebook.</p>\n<h2>TODOs</h2>\n<h3>Functionality</h3>\n<ul>\n<li>support for other file types: dm3/dm4 (Gatan), SER/EMI (FEI), TVIPS, TIFF, .blo</li>\n<li>lazy operations on the emd dataset for exporting image frames without loading entire dataset into memory.</li>\n<li>implement strain mapping using atomic peaks</li>\n<li>find peaks in FFT's and diffraction patterns</li>\n<li>support 4D-STEM and PED datasets</li>\n<li>exporting and importing datasets to a single file</li>\n<li>reevaluate metadata structure</li>\n<li>applying shifts to spectrum stream frames is currently impossibly \tslow.</li>\n<li>deeper analysis of EELS/EDX data, implement a periodic table for some basic quantification and element detection.</li>\n<li>implement more filters</li>\n</ul>\n<h3>Ease of use</h3>\n<ul>\n<li>compile documentation with Sphinx</li>\n</ul>\n<h3>Structure and format</h3>\n<ul>\n<li>significant refactoring is necessary. Currently most functionality is in the basictools/data_io module - this file is a monster. There is a lot of repeated code which can be factored out with multiple inheritance.</li>\n<li>documentation must be updated and refined in most places</li>\n<li>unit tests must be created for most modules and methods</li>\n</ul>\n<h2>How can I contribute?</h2>\n<p>You may always contribute to the documentation and writing unit tests. I like <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\"><code>pytest</code></a> but don't have much experience with it myself yet. UI tools to interface with the methods would also be appreciated. If you know a faster way to make a method run, definitely contribute.</p>\n\n          </div>"}, "last_serial": 7095099, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8b3dda352002e12c500055734845d873", "sha256": "6662942f855651256c09db74c81dc119d43595e6fc6de10974444ae3747502cc"}, "downloads": -1, "filename": "temmeta-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8b3dda352002e12c500055734845d873", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140316, "upload_time": "2020-04-24T15:02:10", "upload_time_iso_8601": "2020-04-24T15:02:10.209631Z", "url": "https://files.pythonhosted.org/packages/3f/21/4ba6e8a2969b1bbd03684e17a551f14791a2866a3c071aa82694f36e45e5/temmeta-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4736047157c5e5be29ead08f33810a4f", "sha256": "c5eb7a4d0bcffd4bf86dc393caf5f9eb8573f2ab1d38d7f2a8c1e47027b99d4a"}, "downloads": -1, "filename": "temmeta-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4736047157c5e5be29ead08f33810a4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61380, "upload_time": "2020-04-24T15:02:12", "upload_time_iso_8601": "2020-04-24T15:02:12.428652Z", "url": "https://files.pythonhosted.org/packages/62/cd/bcbcd078802f7e8ab966de58f963b753185a1b304a90b76a87d116bf657f/temmeta-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6cd0cdfada7a565a40000d001471793f", "sha256": "03e06910b947d350f40e9fb7b8aaece3c2bea3991e620b4b47a29842c344a557"}, "downloads": -1, "filename": "temmeta-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6cd0cdfada7a565a40000d001471793f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 142683, "upload_time": "2020-04-24T18:21:17", "upload_time_iso_8601": "2020-04-24T18:21:17.635702Z", "url": "https://files.pythonhosted.org/packages/9e/f0/279eed4e969fa025d29f8d8ec8097e64e3f68d95d66d43403a89de8b9312/temmeta-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a201411eb829dad05e0eef2f255249b", "sha256": "32b0de33545f0703cdb2b20fb4ae102f0189836688ce246307755be14fb09f46"}, "downloads": -1, "filename": "temmeta-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1a201411eb829dad05e0eef2f255249b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64072, "upload_time": "2020-04-24T18:21:19", "upload_time_iso_8601": "2020-04-24T18:21:19.515590Z", "url": "https://files.pythonhosted.org/packages/71/6c/7893a0bb564ff88a4cc317c83bd69c56f4fc25e9f154212dcfcd607ad214/temmeta-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4c98c4f871f9e350a88fd0367e1d2e52", "sha256": "4fd7dd03acb6845b096cd6fe3dc75c2acf8ee2691df1cb2b4442b70d299f2247"}, "downloads": -1, "filename": "temmeta-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4c98c4f871f9e350a88fd0367e1d2e52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 142708, "upload_time": "2020-04-24T18:26:01", "upload_time_iso_8601": "2020-04-24T18:26:01.567182Z", "url": "https://files.pythonhosted.org/packages/8a/f2/c2f9a72a2d8643b28d765e4255ee6e835a29fa84c3062a565bee15b5ed28/temmeta-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18a24eb22c6a340bdfd04bd772fc3c4c", "sha256": "97f76879bcc6b5ae9f06413dcb759e44cae824ef6384813c3bfe882449b4d35e"}, "downloads": -1, "filename": "temmeta-0.0.3.tar.gz", "has_sig": false, "md5_digest": "18a24eb22c6a340bdfd04bd772fc3c4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64137, "upload_time": "2020-04-24T18:26:03", "upload_time_iso_8601": "2020-04-24T18:26:03.386510Z", "url": "https://files.pythonhosted.org/packages/9e/f0/d0d6cf4c8a30d8af06a4bb5d22f081bcd648218d88e16a14faf6f5d18543/temmeta-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4c98c4f871f9e350a88fd0367e1d2e52", "sha256": "4fd7dd03acb6845b096cd6fe3dc75c2acf8ee2691df1cb2b4442b70d299f2247"}, "downloads": -1, "filename": "temmeta-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4c98c4f871f9e350a88fd0367e1d2e52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 142708, "upload_time": "2020-04-24T18:26:01", "upload_time_iso_8601": "2020-04-24T18:26:01.567182Z", "url": "https://files.pythonhosted.org/packages/8a/f2/c2f9a72a2d8643b28d765e4255ee6e835a29fa84c3062a565bee15b5ed28/temmeta-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18a24eb22c6a340bdfd04bd772fc3c4c", "sha256": "97f76879bcc6b5ae9f06413dcb759e44cae824ef6384813c3bfe882449b4d35e"}, "downloads": -1, "filename": "temmeta-0.0.3.tar.gz", "has_sig": false, "md5_digest": "18a24eb22c6a340bdfd04bd772fc3c4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64137, "upload_time": "2020-04-24T18:26:03", "upload_time_iso_8601": "2020-04-24T18:26:03.386510Z", "url": "https://files.pythonhosted.org/packages/9e/f0/d0d6cf4c8a30d8af06a4bb5d22f081bcd648218d88e16a14faf6f5d18543/temmeta-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:47 2020"}