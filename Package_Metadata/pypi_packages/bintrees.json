{"info": {"author": "mozman", "author_email": "me@mozman.at", "bugtrack_url": null, "classifiers": ["Development Status :: 7 - Inactive", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Cython", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Binary Tree Package\n===================\n\nBintrees Development Stopped\n----------------------------\n\nUse `sortedcontainers` instead: https://pypi.python.org/pypi/sortedcontainers\n\nsee also PyCon 2016 presentation: https://www.youtube.com/watch?v=7z2Ki44Vs4E\n\nAdvantages:\n\n    - pure Python no Cython/C dependencies\n    - faster\n    - active development\n    - more & better testing/profiling\n\nAbstract\n========\n\nThis package provides Binary- RedBlack- and AVL-Trees written in Python and Cython/C.\n\nThis Classes are much slower than the built-in *dict* class, but all\niterators/generators yielding data in sorted key order. Trees can be\nuses as drop in replacement for *dicts* in most cases.\n\nSource of Algorithms\n--------------------\n\nAVL- and RBTree algorithms taken from Julienne Walker: http://eternallyconfuzzled.com/jsw_home.aspx\n\nTrees written in Python\n-----------------------\n\n    - *BinaryTree* -- unbalanced binary tree\n    - *AVLTree* -- balanced AVL-Tree\n    - *RBTree* -- balanced Red-Black-Tree\n\nTrees written with C-Functions and Cython as wrapper\n----------------------------------------------------\n\n    - *FastBinaryTree* -- unbalanced binary tree\n    - *FastAVLTree* -- balanced AVL-Tree\n    - *FastRBTree* -- balanced Red-Black-Tree\n\nAll trees provides the same API, the pickle protocol is supported.\n\nCython-Trees have C-structs as tree-nodes and C-functions for low level operations:\n\n    - insert\n    - remove\n    - get_value\n    - min_item\n    - max_item\n    - prev_item\n    - succ_item\n    - floor_item\n    - ceiling_item\n\nConstructor\n~~~~~~~~~~~\n\n    * Tree() -> new empty tree;\n    * Tree(mapping) -> new tree initialized from a mapping (requires only an items() method)\n    * Tree(seq) -> new tree initialized from seq [(k1, v1), (k2, v2), ... (kn, vn)]\n\nMethods\n~~~~~~~\n\n    * __contains__(k) -> True if T has a key k, else False, O(log(n))\n    * __delitem__(y) <==> del T[y], del[s:e], O(log(n))\n    * __getitem__(y) <==> T[y], T[s:e], O(log(n))\n    * __iter__() <==> iter(T)\n    * __len__() <==> len(T), O(1)\n    * __max__() <==> max(T), get max item (k,v) of T, O(log(n))\n    * __min__() <==> min(T), get min item (k,v) of T, O(log(n))\n    * __and__(other) <==> T & other, intersection\n    * __or__(other) <==> T | other, union\n    * __sub__(other) <==> T - other, difference\n    * __xor__(other) <==> T ^ other, symmetric_difference\n    * __repr__() <==> repr(T)\n    * __setitem__(k, v) <==> T[k] = v, O(log(n))\n    * __copy__() -> shallow copy support, copy.copy(T)\n    * __deepcopy__() -> deep copy support, copy.deepcopy(T)\n    * clear() -> None, remove all items from T, O(n)\n    * copy() -> a shallow copy of T, O(n*log(n))\n    * discard(k) -> None, remove k from T, if k is present, O(log(n))\n    * get(k[,d]) -> T[k] if k in T, else d, O(log(n))\n    * is_empty() -> True if len(T) == 0, O(1)\n    * items([reverse]) -> generator for (k, v) items of T, O(n)\n    * keys([reverse]) -> generator for keys of T, O(n)\n    * values([reverse]) -> generator for values of  T, O(n)\n    * pop(k[,d]) -> v, remove specified key and return the corresponding value, O(log(n))\n    * pop_item() -> (k, v), remove and return some (key, value) pair as a 2-tuple, O(log(n)) (synonym popitem() exist)\n    * set_default(k[,d]) -> value, T.get(k, d), also set T[k]=d if k not in T, O(log(n)) (synonym setdefault() exist)\n    * update(E) -> None.  Update T from dict/iterable E, O(E*log(n))\n    * foreach(f, [order]) -> visit all nodes of tree (0 = 'inorder', -1 = 'preorder' or +1 = 'postorder') and call f(k, v) for each node, O(n)\n    * iter_items(s, e[, reverse]) -> generator for (k, v) items of T for s <= key < e, O(n)\n    * remove_items(keys) -> None, remove items by keys, O(n)\n\nslicing by keys\n~~~~~~~~~~~~~~~\n\n    * item_slice(s, e[, reverse]) -> generator for (k, v) items of T for s <= key < e, O(n), synonym for iter_items(...)\n    * key_slice(s, e[, reverse]) -> generator for keys of T for s <= key < e, O(n)\n    * value_slice(s, e[, reverse]) -> generator for values of T for s <= key < e, O(n)\n    * T[s:e] -> TreeSlice object, with keys in range s <= key < e, O(n)\n    * del T[s:e] -> remove items by key slicing, for s <= key < e, O(n)\n\n    start/end parameter:\n\n    * if 's' is None or T[:e] TreeSlice/iterator starts with value of min_key();\n    * if 'e' is None or T[s:] TreeSlice/iterator ends with value of max_key();\n    * T[:] is a TreeSlice which represents the whole tree;\n\n    The step argument of the regular slicing syntax T[s:e:step] will silently ignored.\n\n    TreeSlice is a tree wrapper with range check and contains no references\n    to objects, deleting objects in the associated tree also deletes the object\n    in the TreeSlice.\n\n    * TreeSlice[k] -> get value for key k, raises KeyError if k not exists in range s:e\n    * TreeSlice[s1:e1] -> TreeSlice object, with keys in range s1 <= key < e1\n        - new lower bound is max(s, s1)\n        - new upper bound is min(e, e1)\n\n    TreeSlice methods:\n\n    * items() -> generator for (k, v) items of T, O(n)\n    * keys() -> generator for keys of T, O(n)\n    * values() -> generator for values of  T, O(n)\n    * __iter__ <==> keys()\n    * __repr__ <==> repr(T)\n    * __contains__(key)-> True if TreeSlice has a key k, else False, O(log(n))\n\nprev/succ operations\n~~~~~~~~~~~~~~~~~~~~\n\n    * prev_item(key) -> get (k, v) pair, where k is predecessor to key, O(log(n))\n    * prev_key(key) -> k, get the predecessor of key, O(log(n))\n    * succ_item(key) -> get (k,v) pair as a 2-tuple, where k is successor to key, O(log(n))\n    * succ_key(key) -> k, get the successor of key, O(log(n))\n    * floor_item(key) -> get (k, v) pair, where k is the greatest key less than or equal to key, O(log(n))\n    * floor_key(key) -> k, get the greatest key less than or equal to key, O(log(n))\n    * ceiling_item(key) -> get (k, v) pair, where k is the smallest key greater than or equal to key, O(log(n))\n    * ceiling_key(key) -> k, get the smallest key greater than or equal to key, O(log(n))\n\nHeap methods\n~~~~~~~~~~~~\n\n    * max_item() -> get largest (key, value) pair of T, O(log(n))\n    * max_key() -> get largest key of T, O(log(n))\n    * min_item() -> get smallest (key, value) pair of T, O(log(n))\n    * min_key() -> get smallest key of T, O(log(n))\n    * pop_min() -> (k, v), remove item with minimum key, O(log(n))\n    * pop_max() -> (k, v), remove item with maximum key, O(log(n))\n    * nlargest(i[,pop]) -> get list of i largest items (k, v), O(i*log(n))\n    * nsmallest(i[,pop]) -> get list of i smallest items (k, v), O(i*log(n))\n\nSet methods (using frozenset)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    * intersection(t1, t2, ...) -> Tree with keys *common* to all trees\n    * union(t1, t2, ...) -> Tree with keys from *either* trees\n    * difference(t1, t2, ...) -> Tree with keys in T but not any of t1, t2, ...\n    * symmetric_difference(t1) -> Tree with keys in either T and t1  but not both\n    * is_subset(S) -> True if every element in T is in S (synonym issubset() exist)\n    * is_superset(S) -> True if every element in S is in T (synonym issuperset() exist)\n    * is_disjoint(S) ->  True if T has a null intersection with S (synonym isdisjoint() exist)\n\nClassmethods\n~~~~~~~~~~~~\n\n    * from_keys(S[,v]) -> New tree with keys from S and values equal to v. (synonym fromkeys() exist)\n\nHelper functions\n~~~~~~~~~~~~~~~~\n\n    * bintrees.has_fast_tree_support() -> True if Cython extension is working else False (False = using pure Python implementation)\n\nInstallation\n============\n\nfrom source::\n\n    python setup.py install\n\nor from PyPI::\n\n    pip install bintrees\n\nCompiling the fast Trees requires Cython and on Windows is a C-Compiler necessary.\n\nDownload Binaries for Windows\n=============================\n\nhttps://github.com/mozman/bintrees/releases\n\nDocumentation\n=============\n\nthis README.rst\n\nbintrees can be found on GitHub.com at:\n\nhttps://github.com/mozman/bintrees.git\n\nNEWS\n====\n\nVersion 2.1.0 - 2020-01-02\n\n  * Use ``sortedcontainers`` instead: https://pypi.python.org/pypi/sortedcontainers\n  * Project Status: Inactive\n  * removed official Python 2 support\n\nVersion 2.0.7 - 2017-04-28\n\n  * BUGFIX: foreach (pure Python implementation) works with empty trees\n  * acquire GIL for PyMem_Malloc() and PyMem_Free() calls\n\nVersion 2.0.6 - 2017-02-04\n\n  * BUGFIX: correct deepcopy() for tree in tree\n\nVersion 2.0.5 - 2017-02-04\n\n  * support for copy.deepcopy()\n  * changed status back to `Mature`, there will be: bugfixes, compatibility checks and simple additions like this deep\n    copy support, because I got feedback, that there are some special cases in which `bintrees` can be useful.\n  * switched development to 64bit only & MS compilers - on Windows 7 everything works fine now with CPython 2.7/3.5/3.6\n\nRepository moved to GitHub: https://github.com/mozman/bintrees.git\n\nVersion 2.0.4 - 2016-01-09\n\n  * removed logging statements on import\n  * added helper function bintrees.has_fast_tree_support()\n  * HINT: pypy runs faster than CPython with Cython extension\n\nVersion 2.0.3 - 2016-01-06\n\n  * replaced print function by logging.warning for import warning messages\n  * KNOWN ISSUE: unable to build Cython extension with MingW32 and CPython 3.5 & CPython 2.7.10\n\nVersion 2.0.2 - 2015-02-12\n\n  * fixed foreach cython-function by Sam Yaple\n\nVersion 2.0.1 - 2013-10-01\n\n  * removed __del__() method to avoid problems with garbage collection\n\nVersion 2.0.0 - 2013-06-01\n\n  * API change: consistent method naming with synonyms for dict/set compatibility\n  * code base refactoring\n  * removed tree walkers\n  * removed low level node stack implementation -> caused crashes\n  * optimizations for pypy: iter_items(), succ_item(), prev_item()\n  * tested with CPython2.7, CPython3.3, pypy-2.0 on Win7 and Linux Mint 15 x64 (pypy-1.9)\n\nVersion 1.0.3 - 2013-05-01\n\n  * extended iter_items(startkey=None, endkey=None, reverse=reverse) -> better performance for slicing\n  * Cython implementation of iter_items() for Fast_X_Trees()\n  * added key parameter *reverse* to itemslice(), keyslice(), valueslice()\n  * tested with CPython2.7, CPython3.3, pypy-2.0\n\nVersion 1.0.2 - 2013-04-01\n\n  * bug fix: FastRBTree data corruption on inserting existing keys\n  * bug fix: union & symmetric_difference - copy all values to result tree\n\nVersion 1.0.1 - 2013-02-01\n\n  * bug fixes\n  * refactorings by graingert\n  * skip useless tests for pypy\n  * new license: MIT License\n  * tested with CPython2.7, CPython3.2, CPython3.3, pypy-1.9, pypy-2.0-beta1\n  * unified line endings to LF\n  * PEP8 refactorings\n  * added floor_item/key, ceiling_item/key methods, thanks to Dai Mikurube\n\nVersion 1.0.0 - 2011-12-29\n\n  * bug fixes\n  * status: 5 - Production/Stable\n  * removed useless TreeIterator() class and T.treeiter() method.\n  * patch from Max Motovilov to use Visual Studio 2008 for building C-extensions\n\nVersion 0.4.0 - 2011-04-14\n\n  * API change!!!\n  * full Python 3 support, also for Cython implementations\n  * removed user defined compare() function - keys have to be comparable!\n  * removed T.has_key(), use 'key in T'\n  * keys(), items(), values() generating 'views'\n  * removed iterkeys(), itervalues(), iteritems() methods\n  * replaced index slicing by key slicing\n  * removed index() and item_at()\n  * repr() produces a correct representation\n  * installs on systems without cython (tested with pypy)\n  * new license: GNU Library or Lesser General Public License (LGPL)\n\nVersion 0.3.2 - 2011-04-09\n\n  * added itemslice(startkey, endkey), keyslice(startkey, endkey),\n    valueslice(startkey, endkey) - slicing by keys\n  * tested with pypy 1.4.1, damn fast\n  * Pure Python trees are working with Python 3\n  * No Cython implementation for Python 3\n\nVersion 0.3.1 - 2010-09-10\n\n  * runs with Python 2.7\n\nVersion 0.3.0 - 2010-05-11\n\n  * low level functions written as c-module only interface to python is a cython\n    module\n  * support for the pickle protocol\n\nVersion 0.2.1 - 2010-05-06\n\n  * added delslice del T[0:3] -> remove treenodes 0, 1, 2\n  * added discard -> remove key without KeyError if not found\n  * added heap methods: min, max, nlarges, nsmallest ...\n  * added Set methods -> intersection, differnce, union, ...\n  * added slicing: T[5:10] get items with position (not key!)  5, 6, 7, 8, 9\n          T[5] get item with key! 5\n  * added index: T.index(key) -> get position of item <key>\n  * added item_at: T.item_at(0) -> get item at position (not key!) 0\n          T.item_at(0) O(n)! <==> T.min_item() O(log(n))\n\nVersion 0.2.0 - 2010-05-03\n\n  * TreeMixin Class as base for Python-Trees and as Mixin for Cython-Trees\n\nVersion 0.1.0 - 2010-04-27\n\n  * Alpha status\n  * Initial release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/mozman/bintrees/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mozman/bintrees.git", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "bintrees", "package_url": "https://pypi.org/project/bintrees/", "platform": "OS Independent", "project_url": "https://pypi.org/project/bintrees/", "project_urls": {"Download": "https://github.com/mozman/bintrees/releases", "Homepage": "https://github.com/mozman/bintrees.git"}, "release_url": "https://pypi.org/project/bintrees/2.1.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Package provides Binary-, RedBlack- and AVL-Trees in Python and Cython.", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"binary-tree-package\">\n<h2>Binary Tree Package</h2>\n<h2 id=\"bintrees-development-stopped\"><span class=\"section-subtitle\">Bintrees Development Stopped</span></h2>\n<p>Use <cite>sortedcontainers</cite> instead: <a href=\"https://pypi.python.org/pypi/sortedcontainers\" rel=\"nofollow\">https://pypi.python.org/pypi/sortedcontainers</a></p>\n<p>see also PyCon 2016 presentation: <a href=\"https://www.youtube.com/watch?v=7z2Ki44Vs4E\" rel=\"nofollow\">https://www.youtube.com/watch?v=7z2Ki44Vs4E</a></p>\n<p>Advantages:</p>\n<blockquote>\n<ul>\n<li>pure Python no Cython/C dependencies</li>\n<li>faster</li>\n<li>active development</li>\n<li>more &amp; better testing/profiling</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"abstract\">\n<h2>Abstract</h2>\n<p>This package provides Binary- RedBlack- and AVL-Trees written in Python and Cython/C.</p>\n<p>This Classes are much slower than the built-in <em>dict</em> class, but all\niterators/generators yielding data in sorted key order. Trees can be\nuses as drop in replacement for <em>dicts</em> in most cases.</p>\n<div id=\"source-of-algorithms\">\n<h3>Source of Algorithms</h3>\n<p>AVL- and RBTree algorithms taken from Julienne Walker: <a href=\"http://eternallyconfuzzled.com/jsw_home.aspx\" rel=\"nofollow\">http://eternallyconfuzzled.com/jsw_home.aspx</a></p>\n</div>\n<div id=\"trees-written-in-python\">\n<h3>Trees written in Python</h3>\n<blockquote>\n<ul>\n<li><em>BinaryTree</em> \u2013 unbalanced binary tree</li>\n<li><em>AVLTree</em> \u2013 balanced AVL-Tree</li>\n<li><em>RBTree</em> \u2013 balanced Red-Black-Tree</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"trees-written-with-c-functions-and-cython-as-wrapper\">\n<h3>Trees written with C-Functions and Cython as wrapper</h3>\n<blockquote>\n<ul>\n<li><em>FastBinaryTree</em> \u2013 unbalanced binary tree</li>\n<li><em>FastAVLTree</em> \u2013 balanced AVL-Tree</li>\n<li><em>FastRBTree</em> \u2013 balanced Red-Black-Tree</li>\n</ul>\n</blockquote>\n<p>All trees provides the same API, the pickle protocol is supported.</p>\n<p>Cython-Trees have C-structs as tree-nodes and C-functions for low level operations:</p>\n<blockquote>\n<ul>\n<li>insert</li>\n<li>remove</li>\n<li>get_value</li>\n<li>min_item</li>\n<li>max_item</li>\n<li>prev_item</li>\n<li>succ_item</li>\n<li>floor_item</li>\n<li>ceiling_item</li>\n</ul>\n</blockquote>\n<div id=\"constructor\">\n<h4>Constructor</h4>\n<blockquote>\n<ul>\n<li>Tree() -&gt; new empty tree;</li>\n<li>Tree(mapping) -&gt; new tree initialized from a mapping (requires only an items() method)</li>\n<li>Tree(seq) -&gt; new tree initialized from seq [(k1, v1), (k2, v2), \u2026 (kn, vn)]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"methods\">\n<h4>Methods</h4>\n<blockquote>\n<ul>\n<li>__contains__(k) -&gt; True if T has a key k, else False, O(log(n))</li>\n<li>__delitem__(y) &lt;==&gt; del T[y], del[s:e], O(log(n))</li>\n<li>__getitem__(y) &lt;==&gt; T[y], T[s:e], O(log(n))</li>\n<li>__iter__() &lt;==&gt; iter(T)</li>\n<li>__len__() &lt;==&gt; len(T), O(1)</li>\n<li>__max__() &lt;==&gt; max(T), get max item (k,v) of T, O(log(n))</li>\n<li>__min__() &lt;==&gt; min(T), get min item (k,v) of T, O(log(n))</li>\n<li>__and__(other) &lt;==&gt; T &amp; other, intersection</li>\n<li>__or__(other) &lt;==&gt; T | other, union</li>\n<li>__sub__(other) &lt;==&gt; T - other, difference</li>\n<li>__xor__(other) &lt;==&gt; T ^ other, symmetric_difference</li>\n<li>__repr__() &lt;==&gt; repr(T)</li>\n<li>__setitem__(k, v) &lt;==&gt; T[k] = v, O(log(n))</li>\n<li>__copy__() -&gt; shallow copy support, copy.copy(T)</li>\n<li>__deepcopy__() -&gt; deep copy support, copy.deepcopy(T)</li>\n<li>clear() -&gt; None, remove all items from T, O(n)</li>\n<li>copy() -&gt; a shallow copy of T, O(n*log(n))</li>\n<li>discard(k) -&gt; None, remove k from T, if k is present, O(log(n))</li>\n<li>get(k[,d]) -&gt; T[k] if k in T, else d, O(log(n))</li>\n<li>is_empty() -&gt; True if len(T) == 0, O(1)</li>\n<li>items([reverse]) -&gt; generator for (k, v) items of T, O(n)</li>\n<li>keys([reverse]) -&gt; generator for keys of T, O(n)</li>\n<li>values([reverse]) -&gt; generator for values of  T, O(n)</li>\n<li>pop(k[,d]) -&gt; v, remove specified key and return the corresponding value, O(log(n))</li>\n<li>pop_item() -&gt; (k, v), remove and return some (key, value) pair as a 2-tuple, O(log(n)) (synonym popitem() exist)</li>\n<li>set_default(k[,d]) -&gt; value, T.get(k, d), also set T[k]=d if k not in T, O(log(n)) (synonym setdefault() exist)</li>\n<li>update(E) -&gt; None.  Update T from dict/iterable E, O(E*log(n))</li>\n<li>foreach(f, [order]) -&gt; visit all nodes of tree (0 = \u2018inorder\u2019, -1 = \u2018preorder\u2019 or +1 = \u2018postorder\u2019) and call f(k, v) for each node, O(n)</li>\n<li>iter_items(s, e[, reverse]) -&gt; generator for (k, v) items of T for s &lt;= key &lt; e, O(n)</li>\n<li>remove_items(keys) -&gt; None, remove items by keys, O(n)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"slicing-by-keys\">\n<h4>slicing by keys</h4>\n<blockquote>\n<ul>\n<li>item_slice(s, e[, reverse]) -&gt; generator for (k, v) items of T for s &lt;= key &lt; e, O(n), synonym for iter_items(\u2026)</li>\n<li>key_slice(s, e[, reverse]) -&gt; generator for keys of T for s &lt;= key &lt; e, O(n)</li>\n<li>value_slice(s, e[, reverse]) -&gt; generator for values of T for s &lt;= key &lt; e, O(n)</li>\n<li>T[s:e] -&gt; TreeSlice object, with keys in range s &lt;= key &lt; e, O(n)</li>\n<li>del T[s:e] -&gt; remove items by key slicing, for s &lt;= key &lt; e, O(n)</li>\n</ul>\n<p>start/end parameter:</p>\n<ul>\n<li>if \u2018s\u2019 is None or T[:e] TreeSlice/iterator starts with value of min_key();</li>\n<li>if \u2018e\u2019 is None or T[s:] TreeSlice/iterator ends with value of max_key();</li>\n<li>T[:] is a TreeSlice which represents the whole tree;</li>\n</ul>\n<p>The step argument of the regular slicing syntax T[s:e:step] will silently ignored.</p>\n<p>TreeSlice is a tree wrapper with range check and contains no references\nto objects, deleting objects in the associated tree also deletes the object\nin the TreeSlice.</p>\n<ul>\n<li>TreeSlice[k] -&gt; get value for key k, raises KeyError if k not exists in range s:e</li>\n<li><dl>\n<dt>TreeSlice[s1:e1] -&gt; TreeSlice object, with keys in range s1 &lt;= key &lt; e1</dt>\n<dd><ul>\n<li>new lower bound is max(s, s1)</li>\n<li>new upper bound is min(e, e1)</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<p>TreeSlice methods:</p>\n<ul>\n<li>items() -&gt; generator for (k, v) items of T, O(n)</li>\n<li>keys() -&gt; generator for keys of T, O(n)</li>\n<li>values() -&gt; generator for values of  T, O(n)</li>\n<li>__iter__ &lt;==&gt; keys()</li>\n<li>__repr__ &lt;==&gt; repr(T)</li>\n<li>__contains__(key)-&gt; True if TreeSlice has a key k, else False, O(log(n))</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"prev-succ-operations\">\n<h4>prev/succ operations</h4>\n<blockquote>\n<ul>\n<li>prev_item(key) -&gt; get (k, v) pair, where k is predecessor to key, O(log(n))</li>\n<li>prev_key(key) -&gt; k, get the predecessor of key, O(log(n))</li>\n<li>succ_item(key) -&gt; get (k,v) pair as a 2-tuple, where k is successor to key, O(log(n))</li>\n<li>succ_key(key) -&gt; k, get the successor of key, O(log(n))</li>\n<li>floor_item(key) -&gt; get (k, v) pair, where k is the greatest key less than or equal to key, O(log(n))</li>\n<li>floor_key(key) -&gt; k, get the greatest key less than or equal to key, O(log(n))</li>\n<li>ceiling_item(key) -&gt; get (k, v) pair, where k is the smallest key greater than or equal to key, O(log(n))</li>\n<li>ceiling_key(key) -&gt; k, get the smallest key greater than or equal to key, O(log(n))</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"heap-methods\">\n<h4>Heap methods</h4>\n<blockquote>\n<ul>\n<li>max_item() -&gt; get largest (key, value) pair of T, O(log(n))</li>\n<li>max_key() -&gt; get largest key of T, O(log(n))</li>\n<li>min_item() -&gt; get smallest (key, value) pair of T, O(log(n))</li>\n<li>min_key() -&gt; get smallest key of T, O(log(n))</li>\n<li>pop_min() -&gt; (k, v), remove item with minimum key, O(log(n))</li>\n<li>pop_max() -&gt; (k, v), remove item with maximum key, O(log(n))</li>\n<li>nlargest(i[,pop]) -&gt; get list of i largest items (k, v), O(i*log(n))</li>\n<li>nsmallest(i[,pop]) -&gt; get list of i smallest items (k, v), O(i*log(n))</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"set-methods-using-frozenset\">\n<h4>Set methods (using frozenset)</h4>\n<blockquote>\n<ul>\n<li>intersection(t1, t2, \u2026) -&gt; Tree with keys <em>common</em> to all trees</li>\n<li>union(t1, t2, \u2026) -&gt; Tree with keys from <em>either</em> trees</li>\n<li>difference(t1, t2, \u2026) -&gt; Tree with keys in T but not any of t1, t2, \u2026</li>\n<li>symmetric_difference(t1) -&gt; Tree with keys in either T and t1  but not both</li>\n<li>is_subset(S) -&gt; True if every element in T is in S (synonym issubset() exist)</li>\n<li>is_superset(S) -&gt; True if every element in S is in T (synonym issuperset() exist)</li>\n<li>is_disjoint(S) -&gt;  True if T has a null intersection with S (synonym isdisjoint() exist)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"classmethods\">\n<h4>Classmethods</h4>\n<blockquote>\n<ul>\n<li>from_keys(S[,v]) -&gt; New tree with keys from S and values equal to v. (synonym fromkeys() exist)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"helper-functions\">\n<h4>Helper functions</h4>\n<blockquote>\n<ul>\n<li>bintrees.has_fast_tree_support() -&gt; True if Cython extension is working else False (False = using pure Python implementation)</li>\n</ul>\n</blockquote>\n</div>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>from source:</p>\n<pre>python setup.py install\n</pre>\n<p>or from PyPI:</p>\n<pre>pip install bintrees\n</pre>\n<p>Compiling the fast Trees requires Cython and on Windows is a C-Compiler necessary.</p>\n</div>\n<div id=\"download-binaries-for-windows\">\n<h2>Download Binaries for Windows</h2>\n<p><a href=\"https://github.com/mozman/bintrees/releases\" rel=\"nofollow\">https://github.com/mozman/bintrees/releases</a></p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>this README.rst</p>\n<p>bintrees can be found on GitHub.com at:</p>\n<p><a href=\"https://github.com/mozman/bintrees.git\" rel=\"nofollow\">https://github.com/mozman/bintrees.git</a></p>\n</div>\n<div id=\"news\">\n<h2>NEWS</h2>\n<p>Version 2.1.0 - 2020-01-02</p>\n<blockquote>\n<ul>\n<li>Use <tt>sortedcontainers</tt> instead: <a href=\"https://pypi.python.org/pypi/sortedcontainers\" rel=\"nofollow\">https://pypi.python.org/pypi/sortedcontainers</a></li>\n<li>Project Status: Inactive</li>\n<li>removed official Python 2 support</li>\n</ul>\n</blockquote>\n<p>Version 2.0.7 - 2017-04-28</p>\n<blockquote>\n<ul>\n<li>BUGFIX: foreach (pure Python implementation) works with empty trees</li>\n<li>acquire GIL for PyMem_Malloc() and PyMem_Free() calls</li>\n</ul>\n</blockquote>\n<p>Version 2.0.6 - 2017-02-04</p>\n<blockquote>\n<ul>\n<li>BUGFIX: correct deepcopy() for tree in tree</li>\n</ul>\n</blockquote>\n<p>Version 2.0.5 - 2017-02-04</p>\n<blockquote>\n<ul>\n<li>support for copy.deepcopy()</li>\n<li>changed status back to <cite>Mature</cite>, there will be: bugfixes, compatibility checks and simple additions like this deep\ncopy support, because I got feedback, that there are some special cases in which <cite>bintrees</cite> can be useful.</li>\n<li>switched development to 64bit only &amp; MS compilers - on Windows 7 everything works fine now with CPython 2.7/3.5/3.6</li>\n</ul>\n</blockquote>\n<p>Repository moved to GitHub: <a href=\"https://github.com/mozman/bintrees.git\" rel=\"nofollow\">https://github.com/mozman/bintrees.git</a></p>\n<p>Version 2.0.4 - 2016-01-09</p>\n<blockquote>\n<ul>\n<li>removed logging statements on import</li>\n<li>added helper function bintrees.has_fast_tree_support()</li>\n<li>HINT: pypy runs faster than CPython with Cython extension</li>\n</ul>\n</blockquote>\n<p>Version 2.0.3 - 2016-01-06</p>\n<blockquote>\n<ul>\n<li>replaced print function by logging.warning for import warning messages</li>\n<li>KNOWN ISSUE: unable to build Cython extension with MingW32 and CPython 3.5 &amp; CPython 2.7.10</li>\n</ul>\n</blockquote>\n<p>Version 2.0.2 - 2015-02-12</p>\n<blockquote>\n<ul>\n<li>fixed foreach cython-function by Sam Yaple</li>\n</ul>\n</blockquote>\n<p>Version 2.0.1 - 2013-10-01</p>\n<blockquote>\n<ul>\n<li>removed __del__() method to avoid problems with garbage collection</li>\n</ul>\n</blockquote>\n<p>Version 2.0.0 - 2013-06-01</p>\n<blockquote>\n<ul>\n<li>API change: consistent method naming with synonyms for dict/set compatibility</li>\n<li>code base refactoring</li>\n<li>removed tree walkers</li>\n<li>removed low level node stack implementation -&gt; caused crashes</li>\n<li>optimizations for pypy: iter_items(), succ_item(), prev_item()</li>\n<li>tested with CPython2.7, CPython3.3, pypy-2.0 on Win7 and Linux Mint 15 x64 (pypy-1.9)</li>\n</ul>\n</blockquote>\n<p>Version 1.0.3 - 2013-05-01</p>\n<blockquote>\n<ul>\n<li>extended iter_items(startkey=None, endkey=None, reverse=reverse) -&gt; better performance for slicing</li>\n<li>Cython implementation of iter_items() for Fast_X_Trees()</li>\n<li>added key parameter <em>reverse</em> to itemslice(), keyslice(), valueslice()</li>\n<li>tested with CPython2.7, CPython3.3, pypy-2.0</li>\n</ul>\n</blockquote>\n<p>Version 1.0.2 - 2013-04-01</p>\n<blockquote>\n<ul>\n<li>bug fix: FastRBTree data corruption on inserting existing keys</li>\n<li>bug fix: union &amp; symmetric_difference - copy all values to result tree</li>\n</ul>\n</blockquote>\n<p>Version 1.0.1 - 2013-02-01</p>\n<blockquote>\n<ul>\n<li>bug fixes</li>\n<li>refactorings by graingert</li>\n<li>skip useless tests for pypy</li>\n<li>new license: MIT License</li>\n<li>tested with CPython2.7, CPython3.2, CPython3.3, pypy-1.9, pypy-2.0-beta1</li>\n<li>unified line endings to LF</li>\n<li>PEP8 refactorings</li>\n<li>added floor_item/key, ceiling_item/key methods, thanks to Dai Mikurube</li>\n</ul>\n</blockquote>\n<p>Version 1.0.0 - 2011-12-29</p>\n<blockquote>\n<ul>\n<li>bug fixes</li>\n<li>status: 5 - Production/Stable</li>\n<li>removed useless TreeIterator() class and T.treeiter() method.</li>\n<li>patch from Max Motovilov to use Visual Studio 2008 for building C-extensions</li>\n</ul>\n</blockquote>\n<p>Version 0.4.0 - 2011-04-14</p>\n<blockquote>\n<ul>\n<li>API change!!!</li>\n<li>full Python 3 support, also for Cython implementations</li>\n<li>removed user defined compare() function - keys have to be comparable!</li>\n<li>removed T.has_key(), use \u2018key in T\u2019</li>\n<li>keys(), items(), values() generating \u2018views\u2019</li>\n<li>removed iterkeys(), itervalues(), iteritems() methods</li>\n<li>replaced index slicing by key slicing</li>\n<li>removed index() and item_at()</li>\n<li>repr() produces a correct representation</li>\n<li>installs on systems without cython (tested with pypy)</li>\n<li>new license: GNU Library or Lesser General Public License (LGPL)</li>\n</ul>\n</blockquote>\n<p>Version 0.3.2 - 2011-04-09</p>\n<blockquote>\n<ul>\n<li>added itemslice(startkey, endkey), keyslice(startkey, endkey),\nvalueslice(startkey, endkey) - slicing by keys</li>\n<li>tested with pypy 1.4.1, damn fast</li>\n<li>Pure Python trees are working with Python 3</li>\n<li>No Cython implementation for Python 3</li>\n</ul>\n</blockquote>\n<p>Version 0.3.1 - 2010-09-10</p>\n<blockquote>\n<ul>\n<li>runs with Python 2.7</li>\n</ul>\n</blockquote>\n<p>Version 0.3.0 - 2010-05-11</p>\n<blockquote>\n<ul>\n<li>low level functions written as c-module only interface to python is a cython\nmodule</li>\n<li>support for the pickle protocol</li>\n</ul>\n</blockquote>\n<p>Version 0.2.1 - 2010-05-06</p>\n<blockquote>\n<ul>\n<li>added delslice del T[0:3] -&gt; remove treenodes 0, 1, 2</li>\n<li>added discard -&gt; remove key without KeyError if not found</li>\n<li>added heap methods: min, max, nlarges, nsmallest \u2026</li>\n<li>added Set methods -&gt; intersection, differnce, union, \u2026</li>\n<li><dl>\n<dt>added slicing: T[5:10] get items with position (not key!)  5, 6, 7, 8, 9</dt>\n<dd>T[5] get item with key! 5</dd>\n</dl>\n</li>\n<li>added index: T.index(key) -&gt; get position of item &lt;key&gt;</li>\n<li><dl>\n<dt>added item_at: T.item_at(0) -&gt; get item at position (not key!) 0</dt>\n<dd>T.item_at(0) O(n)! &lt;==&gt; T.min_item() O(log(n))</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n<p>Version 0.2.0 - 2010-05-03</p>\n<blockquote>\n<ul>\n<li>TreeMixin Class as base for Python-Trees and as Mixin for Cython-Trees</li>\n</ul>\n</blockquote>\n<p>Version 0.1.0 - 2010-04-27</p>\n<blockquote>\n<ul>\n<li>Alpha status</li>\n<li>Initial release</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 6384490, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "a802c9f7f9204bbc591601b9172816be", "sha256": "3985a8e144f34e88a1c69cc57f3b419dade50cef36a3a1ca377a5c480ed2a449"}, "downloads": -1, "filename": "bintrees-2.0.0.tar.gz", "has_sig": false, "md5_digest": "a802c9f7f9204bbc591601b9172816be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32258, "upload_time": "2013-06-30T08:28:52", "upload_time_iso_8601": "2013-06-30T08:28:52.808418Z", "url": "https://files.pythonhosted.org/packages/1f/90/31302e4c89ac67abdde2ee497436aab66cf93c54675e4a88900e05618435/bintrees-2.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b835233ec6fa3b7f9519b3b2627ece6d", "sha256": "6f5440b72b428029d30e3d80df8bbefd9d433127c2893ab2550123d687a2998c"}, "downloads": -1, "filename": "bintrees-2.0.0.win32-py2.7.exe", "has_sig": false, "md5_digest": "b835233ec6fa3b7f9519b3b2627ece6d", "packagetype": "bdist_wininst", "python_version": "2.7", "requires_python": null, "size": 312314, "upload_time": "2013-06-30T08:29:33", "upload_time_iso_8601": "2013-06-30T08:29:33.128792Z", "url": "https://files.pythonhosted.org/packages/a0/ec/07bd0c6f4eaff0523988b5513c555fe46d42ae23cdee9100afe9cbca8926/bintrees-2.0.0.win32-py2.7.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "490a447509bd4f38134dcc150d306af8", "sha256": "f44a958bc1a8ad313b11f9b6c1b3e599c575e4787d51bf0a1d61a9f61f87ccfa"}, "downloads": -1, "filename": "bintrees-2.0.0.win32-py3.3.exe", "has_sig": false, "md5_digest": "490a447509bd4f38134dcc150d306af8", "packagetype": "bdist_wininst", "python_version": "3.3", "requires_python": null, "size": 308765, "upload_time": "2013-06-30T08:29:48", "upload_time_iso_8601": "2013-06-30T08:29:48.356279Z", "url": "https://files.pythonhosted.org/packages/6a/cf/1342ec35164f74f3c7820cb66b2cc43fc7982fc593e27938cde3ce0a92ca/bintrees-2.0.0.win32-py3.3.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "67126f0d59d7fbf5e1ff98979efe0c5d", "sha256": "f3263506e5ceb4c85cad58b62ee5c248e222ce2cb76155c9504cf1b18a1fc2ea"}, "downloads": -1, "filename": "bintrees-2.0.0.zip", "has_sig": false, "md5_digest": "67126f0d59d7fbf5e1ff98979efe0c5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43695, "upload_time": "2013-06-30T08:28:48", "upload_time_iso_8601": "2013-06-30T08:28:48.834845Z", "url": "https://files.pythonhosted.org/packages/81/58/574da5419c4da2b4d1c1c3be64010ef6d8c1f4653195173290b2bbd8ce76/bintrees-2.0.0.zip", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "e375b1dfec4b9bcc51d27d00fba0a629", "sha256": "87dfcf41d6c306239881208dc1eeb5089038776a6e51984364427f89b1658d1d"}, "downloads": -1, "filename": "bintrees-2.0.1-cp27-none-win32.whl", "has_sig": false, "md5_digest": "e375b1dfec4b9bcc51d27d00fba0a629", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 48555, "upload_time": "2014-05-23T04:23:01", "upload_time_iso_8601": "2014-05-23T04:23:01.892803Z", "url": "https://files.pythonhosted.org/packages/b1/31/de3b019c3c91dc41e751bfbf5f2c428c794437a783e39393284a3e04edb7/bintrees-2.0.1-cp27-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "307f4a302732a288dabd49c735f83f7d", "sha256": "77cba6da01b69723c5fd4228ef87ebd8a92acc7615e4563098f892fd5176d8ce"}, "downloads": -1, "filename": "bintrees-2.0.1-cp33-none-win32.whl", "has_sig": false, "md5_digest": "307f4a302732a288dabd49c735f83f7d", "packagetype": "bdist_wheel", "python_version": "3.3", "requires_python": null, "size": 48972, "upload_time": "2014-05-23T04:25:16", "upload_time_iso_8601": "2014-05-23T04:25:16.445761Z", "url": "https://files.pythonhosted.org/packages/a0/37/754fc532b364a1b8ecd051ad870c3e1adc01d8567e2f066189b7461316a1/bintrees-2.0.1-cp33-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bb12b67ef6ca7a8d45f27cc346b794c", "sha256": "416fe96606ece2d847b4eec365ceb91a9956d36355183ea33b88a2d45bd82890"}, "downloads": -1, "filename": "bintrees-2.0.1-cp34-none-win32.whl", "has_sig": false, "md5_digest": "2bb12b67ef6ca7a8d45f27cc346b794c", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 48848, "upload_time": "2014-05-23T04:13:52", "upload_time_iso_8601": "2014-05-23T04:13:52.088289Z", "url": "https://files.pythonhosted.org/packages/db/82/7b56d611c75e47a9c368da443c8427c52e13a0e01b45a80a383935f7bf25/bintrees-2.0.1-cp34-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed1315bc09659e994e0ba73a9f8cd620", "sha256": "9e4ee59b437fea82e9009a819bc9ef8eb9d514b009b4e549d93ae32b905dcb41"}, "downloads": -1, "filename": "bintrees-2.0.1.tar.gz", "has_sig": false, "md5_digest": "ed1315bc09659e994e0ba73a9f8cd620", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32309, "upload_time": "2013-10-28T05:27:26", "upload_time_iso_8601": "2013-10-28T05:27:26.861163Z", "url": "https://files.pythonhosted.org/packages/c7/0d/86fd35310de3d239c9170be7ea662aea4dfa24665816d13d91594884cf3a/bintrees-2.0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "5afa734be5737066206af381daa87e84", "sha256": "2f38a4768c5b364446fea6d7217da66185362ee75ce4c3ca7e0254c09ab1c2a9"}, "downloads": -1, "filename": "bintrees-2.0.1.win32-py2.7.exe", "has_sig": false, "md5_digest": "5afa734be5737066206af381daa87e84", "packagetype": "bdist_wininst", "python_version": "2.7", "requires_python": null, "size": 312392, "upload_time": "2013-10-28T05:29:22", "upload_time_iso_8601": "2013-10-28T05:29:22.060793Z", "url": "https://files.pythonhosted.org/packages/57/5c/3548da1f82d7954563250e1dcdb9b5a84004ac6a4c2b027c059190dea3cc/bintrees-2.0.1.win32-py2.7.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a262366a7e3e0dd674b0437f8a1da6a", "sha256": "b729d6050392912dcf2c6f6ee1bdd5c5bd49610849113b770364baeaa2624fcc"}, "downloads": -1, "filename": "bintrees-2.0.1.win32-py3.3.exe", "has_sig": false, "md5_digest": "7a262366a7e3e0dd674b0437f8a1da6a", "packagetype": "bdist_wininst", "python_version": "3.3", "requires_python": null, "size": 308757, "upload_time": "2013-10-28T05:29:48", "upload_time_iso_8601": "2013-10-28T05:29:48.301221Z", "url": "https://files.pythonhosted.org/packages/e5/f9/24e5e571b0d04fccfc58be4813c48508beeef0dcad4bd480787bf7a0b5f0/bintrees-2.0.1.win32-py3.3.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "e75e2b94bc975e1974a09a85db7d2070", "sha256": "32fa23bb48b40e27453fab5e847499c8d3487b2ee8315b10ae4dbc9a3f9d0efe"}, "downloads": -1, "filename": "bintrees-2.0.1.win32-py3.4.exe", "has_sig": false, "md5_digest": "e75e2b94bc975e1974a09a85db7d2070", "packagetype": "bdist_wininst", "python_version": "3.4", "requires_python": null, "size": 245881, "upload_time": "2014-04-19T07:40:50", "upload_time_iso_8601": "2014-04-19T07:40:50.618296Z", "url": "https://files.pythonhosted.org/packages/6f/dc/5adcf2a6c3554155885aa468255302c84010234a47aa10b494bcbc517661/bintrees-2.0.1.win32-py3.4.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8774f235ae27a0fe382742816f63222", "sha256": "327485afbd5bf529c1207fd1d5345ad911e21c7f0e137a8b45eb0d16a3baf851"}, "downloads": -1, "filename": "bintrees-2.0.1.zip", "has_sig": false, "md5_digest": "c8774f235ae27a0fe382742816f63222", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43767, "upload_time": "2013-10-28T05:27:24", "upload_time_iso_8601": "2013-10-28T05:27:24.806918Z", "url": "https://files.pythonhosted.org/packages/5d/0e/82b060d0997003d1857e59113e69102cb57f1d831a02fecd9b014ce48496/bintrees-2.0.1.zip", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "7d56c8bfb33b7cd0070cd81824e1309c", "sha256": "3d92d45435733e7864601c12b93ad1def24af799653664debade4f11cc68884f"}, "downloads": -1, "filename": "bintrees-2.0.2-cp27-none-win32.whl", "has_sig": false, "md5_digest": "7d56c8bfb33b7cd0070cd81824e1309c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 49030, "upload_time": "2015-02-12T04:19:30", "upload_time_iso_8601": "2015-02-12T04:19:30.428426Z", "url": "https://files.pythonhosted.org/packages/4d/a2/6797ec8d004b45b73ddb0688f1d893fc8e6a88e311c9c5f90e9020de621d/bintrees-2.0.2-cp27-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cb2740b82c1bf3ec3064331e597fccc", "sha256": "a9f308a950a28d3e26f9d8dbda0a273883b4a863e93176ce909ead1aa4427d88"}, "downloads": -1, "filename": "bintrees-2.0.2-cp34-none-win32.whl", "has_sig": false, "md5_digest": "1cb2740b82c1bf3ec3064331e597fccc", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 49310, "upload_time": "2015-02-12T04:19:38", "upload_time_iso_8601": "2015-02-12T04:19:38.253264Z", "url": "https://files.pythonhosted.org/packages/5b/9e/0b97d6cdd8be5be85576d7ad34b25c6da21969ab1c2fa83491ee91043ed9/bintrees-2.0.2-cp34-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91fa6db45fc69bc59044338deb66aa5c", "sha256": "b7a0ec6edbd90bbf3b7961ed1c526874208a0be6444cbda75733abf4a40e8179"}, "downloads": -1, "filename": "bintrees-2.0.2.tar.gz", "has_sig": false, "md5_digest": "91fa6db45fc69bc59044338deb66aa5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69890, "upload_time": "2015-02-12T04:19:26", "upload_time_iso_8601": "2015-02-12T04:19:26.994912Z", "url": "https://files.pythonhosted.org/packages/29/f7/6ddb0b41ba79d319eace46b952478f1fe55bc8df4e0eebc74622e82d53a7/bintrees-2.0.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbd413a5658f373686100b12ee02b45f", "sha256": "8e1bc65930768567e77cc0b116454b027256e39550a8c87e70cdc3cab4104d57"}, "downloads": -1, "filename": "bintrees-2.0.2.win32-py2.7.exe", "has_sig": false, "md5_digest": "dbd413a5658f373686100b12ee02b45f", "packagetype": "bdist_wininst", "python_version": "2.7", "requires_python": null, "size": 251959, "upload_time": "2015-02-12T04:19:33", "upload_time_iso_8601": "2015-02-12T04:19:33.926393Z", "url": "https://files.pythonhosted.org/packages/5c/b5/8d36c2754e0555501d69ed703121e77346f321b713ed41c074c4ea7d98a9/bintrees-2.0.2.win32-py2.7.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "2096dae8692cf79213871a8fc70989aa", "sha256": "db63d6f1b1e0fc5969a9c7cff636bc00dd2a5269f12d715da53465253925019b"}, "downloads": -1, "filename": "bintrees-2.0.2.win32-py3.4.exe", "has_sig": false, "md5_digest": "2096dae8692cf79213871a8fc70989aa", "packagetype": "bdist_wininst", "python_version": "3.4", "requires_python": null, "size": 247163, "upload_time": "2015-02-12T04:19:42", "upload_time_iso_8601": "2015-02-12T04:19:42.806436Z", "url": "https://files.pythonhosted.org/packages/e1/8d/b1baca8b8dfde1305cde981fa6cfe7f4dcfa073fa104b61cddc22f6976b1/bintrees-2.0.2.win32-py3.4.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d794a62be982d37943f590d701d57e5", "sha256": "6b9f9b8b01cb17f46ae4591d4c1325b89b81fa598e94d107fe4d4ef2ef903843"}, "downloads": -1, "filename": "bintrees-2.0.2.zip", "has_sig": false, "md5_digest": "4d794a62be982d37943f590d701d57e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87104, "upload_time": "2015-02-12T04:19:23", "upload_time_iso_8601": "2015-02-12T04:19:23.317594Z", "url": "https://files.pythonhosted.org/packages/e7/f0/3fc1869acce00a5b4ab6e868a7257403432d7a2a9f0a7868bdd6e1dca36c/bintrees-2.0.2.zip", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "20000e07821368f648de61f407cd733c", "sha256": "e1abed560bfed373c5b283d8e3c3f6a63e7f2839f2e6d874536b60f6c80d48e0"}, "downloads": -1, "filename": "bintrees-2.0.3-cp27-none-win32.whl", "has_sig": false, "md5_digest": "20000e07821368f648de61f407cd733c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 52560, "upload_time": "2016-01-06T05:03:20", "upload_time_iso_8601": "2016-01-06T05:03:20.662665Z", "url": "https://files.pythonhosted.org/packages/49/ed/c44e0e825d2b25a8e12b10528c8f2558031fbc7a1b4b7f70d5e5bbb5469a/bintrees-2.0.3-cp27-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ae88df1fe4d5ce3a25ae302410d5738", "sha256": "011078fdae195713826bf85657010cbed48666c2439e53e6b60b301051349bd0"}, "downloads": -1, "filename": "bintrees-2.0.3-cp34-none-win32.whl", "has_sig": false, "md5_digest": "1ae88df1fe4d5ce3a25ae302410d5738", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 52901, "upload_time": "2016-01-06T05:03:50", "upload_time_iso_8601": "2016-01-06T05:03:50.333799Z", "url": "https://files.pythonhosted.org/packages/a4/c0/a94f87a51866402a3450cd58a1f127ebc7d0d95fcf8b746122d7c4a1bb50/bintrees-2.0.3-cp34-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5f5822e7b595e055e35bb597cb9ebfb", "sha256": "cd0bf8150b7b3ef81da4da07e0721aaac91ac3c414cebf4c12cf48a35882e488"}, "downloads": -1, "filename": "bintrees-2.0.3.tar.gz", "has_sig": false, "md5_digest": "d5f5822e7b595e055e35bb597cb9ebfb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71866, "upload_time": "2016-01-06T05:03:11", "upload_time_iso_8601": "2016-01-06T05:03:11.073487Z", "url": "https://files.pythonhosted.org/packages/f1/84/31f88e2994f3704034c101729dc437a0c18e937390fd41bb1e4a20ab5389/bintrees-2.0.3.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fbf4b291c8583ec90c190da7f799b9b", "sha256": "cd3b9ed57810b6beaa499f3a0ea903e7ac6ded0e70326b76a146e357acfdbfc5"}, "downloads": -1, "filename": "bintrees-2.0.3.win32-py2.7.exe", "has_sig": false, "md5_digest": "2fbf4b291c8583ec90c190da7f799b9b", "packagetype": "bdist_wininst", "python_version": "2.7", "requires_python": null, "size": 255665, "upload_time": "2016-01-06T05:03:33", "upload_time_iso_8601": "2016-01-06T05:03:33.833422Z", "url": "https://files.pythonhosted.org/packages/23/bb/31888cb10add39117ee8c2a72e0e5ddce0d70947314bd131fb7d21aac0f2/bintrees-2.0.3.win32-py2.7.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "a137d098aa5415e39a6cef3d03c1e875", "sha256": "fc2fbccdb85246b1c76d4fe3abdc6076cd5e3a6ebdfe78a0ca0518bbf6311421"}, "downloads": -1, "filename": "bintrees-2.0.3.win32-py3.4.exe", "has_sig": false, "md5_digest": "a137d098aa5415e39a6cef3d03c1e875", "packagetype": "bdist_wininst", "python_version": "3.4", "requires_python": null, "size": 250934, "upload_time": "2016-01-06T05:04:05", "upload_time_iso_8601": "2016-01-06T05:04:05.821054Z", "url": "https://files.pythonhosted.org/packages/d6/71/1993d30fd3bd4d0defb9451b190d1e28fc4309ae8617eb67b76c23d9c4b9/bintrees-2.0.3.win32-py3.4.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "590254d017faeb831092ae5a0ffef417", "sha256": "105bcfecf84bacc644a5f467c79280ffecc1ff38d87dfb4764e64e6c1708c5e6"}, "downloads": -1, "filename": "bintrees-2.0.3.zip", "has_sig": false, "md5_digest": "590254d017faeb831092ae5a0ffef417", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89375, "upload_time": "2016-01-06T05:03:04", "upload_time_iso_8601": "2016-01-06T05:03:04.317894Z", "url": "https://files.pythonhosted.org/packages/e9/7f/c11335bb6f9d307b1fd2738ae5de90fd1a8e9cf324cf09aaf182f2509438/bintrees-2.0.3.zip", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "990aa4847e466b9352a05e93102156be", "sha256": "b6cefb01ea7097fd9941a65c95170c80c7621c170a54003dd92761beff6f96aa"}, "downloads": -1, "filename": "bintrees-2.0.4-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "990aa4847e466b9352a05e93102156be", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 57173, "upload_time": "2017-01-22T04:35:21", "upload_time_iso_8601": "2017-01-22T04:35:21.974904Z", "url": "https://files.pythonhosted.org/packages/67/60/7ef68f0d7d1985a287eeef7224c9104a7d9b8153290af493c2a8993be3f9/bintrees-2.0.4-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9f6281aab9bc6375079e8e9c4c49323", "sha256": "d81a147e0730c6b605c0ccd3e3d9bec494512e4ee47321aa1b8084cc1fb820cb"}, "downloads": -1, "filename": "bintrees-2.0.4-cp27-none-win32.whl", "has_sig": false, "md5_digest": "c9f6281aab9bc6375079e8e9c4c49323", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 52784, "upload_time": "2016-01-09T06:36:49", "upload_time_iso_8601": "2016-01-09T06:36:49.191226Z", "url": "https://files.pythonhosted.org/packages/53/d2/f615cd98a4a9f64999e2a2b681fc51c3352d0ecce017de9bd8574ddbeaf0/bintrees-2.0.4-cp27-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f419b81abe27bbcfeb36e8be4f49327", "sha256": "9af98ae13c2f6a298893d174a2f98e9d92ab7faf32b900105f5bafb0f3c27454"}, "downloads": -1, "filename": "bintrees-2.0.4-cp34-none-win32.whl", "has_sig": false, "md5_digest": "7f419b81abe27bbcfeb36e8be4f49327", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 53126, "upload_time": "2016-01-09T06:37:05", "upload_time_iso_8601": "2016-01-09T06:37:05.637020Z", "url": "https://files.pythonhosted.org/packages/e7/39/ccc0b7d6f392919083d1d7732d124e0a53540e63edb6ecbdaac411750ad7/bintrees-2.0.4-cp34-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "486782d2be6cf59838cc95cf686eccde", "sha256": "77508d3430d567d10a1663bef5fd1ca691ea97affee4864ee581b56bd1de9b66"}, "downloads": -1, "filename": "bintrees-2.0.4-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "486782d2be6cf59838cc95cf686eccde", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 58287, "upload_time": "2017-01-22T08:13:43", "upload_time_iso_8601": "2017-01-22T08:13:43.823938Z", "url": "https://files.pythonhosted.org/packages/20/9e/83413cedf30f380c2e3da1102ba7529277cc22daf5a917e26e0778361b01/bintrees-2.0.4-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a27229646375fdece99dba83f8bd3f9", "sha256": "0ca15f299c8bb5576df8ecaa14fd47a6dacf07ceb0aabb4213d15f295d3ea22d"}, "downloads": -1, "filename": "bintrees-2.0.4-cp35-none-win32.whl", "has_sig": false, "md5_digest": "7a27229646375fdece99dba83f8bd3f9", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 50989, "upload_time": "2016-04-01T05:03:35", "upload_time_iso_8601": "2016-04-01T05:03:35.238885Z", "url": "https://files.pythonhosted.org/packages/be/f1/0d435599781583e5d25d6709e69021573ab50974669382db7cc463d1d193/bintrees-2.0.4-cp35-none-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13482a727e66d78156dcd70b41aa04f9", "sha256": "2377a669a08a04c2188363b687b0fdcb00254104deb602b28e788e6aedac5655"}, "downloads": -1, "filename": "bintrees-2.0.4-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "13482a727e66d78156dcd70b41aa04f9", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 58471, "upload_time": "2017-01-22T04:35:37", "upload_time_iso_8601": "2017-01-22T04:35:37.953800Z", "url": "https://files.pythonhosted.org/packages/a5/7d/df3a51160cd9e7fd641c094c0a94a74296917b6d46942e6830962dca0ea7/bintrees-2.0.4-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9bcd8547ed429d5fe290a68ed633f758", "sha256": "7a1b8b64b8b9c2475b4fbd8dbe6a68c79fa6c591d57d3bb978eb1edb1760217d"}, "downloads": -1, "filename": "bintrees-2.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9bcd8547ed429d5fe290a68ed633f758", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 26779, "upload_time": "2017-01-22T04:35:29", "upload_time_iso_8601": "2017-01-22T04:35:29.552393Z", "url": "https://files.pythonhosted.org/packages/d0/59/b92beb84038a20fe6c54e53f0658bffb5f806bfdf7abea0d41938cdbdecc/bintrees-2.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "912091e436a665d9b5685de8656bf184", "sha256": "6cbb196106817440bda4985813856f01b277618237c5c7a1bc788c884aabe1e0"}, "downloads": -1, "filename": "bintrees-2.0.4.tar.gz", "has_sig": false, "md5_digest": "912091e436a665d9b5685de8656bf184", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72088, "upload_time": "2016-01-09T06:36:41", "upload_time_iso_8601": "2016-01-09T06:36:41.485647Z", "url": "https://files.pythonhosted.org/packages/7b/77/7e13390e242c72a460cdf4a4f878d3605d7490cea156e5991156458d2ffb/bintrees-2.0.4.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "21c9f865ad25a4a16d7488d25fd31525", "sha256": "baf8397ae8ad331f84a9fd33e0c7294726a74df9e248be8fd6dd0444eac6a0f2"}, "downloads": -1, "filename": "bintrees-2.0.4.win32-py2.7.exe", "has_sig": false, "md5_digest": "21c9f865ad25a4a16d7488d25fd31525", "packagetype": "bdist_wininst", "python_version": "2.7", "requires_python": null, "size": 256170, "upload_time": "2016-01-09T06:36:56", "upload_time_iso_8601": "2016-01-09T06:36:56.889914Z", "url": "https://files.pythonhosted.org/packages/1d/80/364356be696391949b477043a63d25aa160e17bbd801eb8bf2851443a265/bintrees-2.0.4.win32-py2.7.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "fede44212c00c955ce0a46ae1619271e", "sha256": "e303f6ad6cc8071ae2fa29f6fc3841c87911e4bf28cf3644535653001dbedc01"}, "downloads": -1, "filename": "bintrees-2.0.4.win32-py3.4.exe", "has_sig": false, "md5_digest": "fede44212c00c955ce0a46ae1619271e", "packagetype": "bdist_wininst", "python_version": "3.4", "requires_python": null, "size": 251439, "upload_time": "2016-01-09T06:37:13", "upload_time_iso_8601": "2016-01-09T06:37:13.217134Z", "url": "https://files.pythonhosted.org/packages/e4/4f/93ae538d9b60382304fc76615ffefe868859a2d5aa459e97471109ac2188/bintrees-2.0.4.win32-py3.4.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac4a997e9279d47d1c11a5a302201882", "sha256": "2b072f2c1fb9675f35763e1e2ccd16fb9019ec204229b00cef8c688a87fa163f"}, "downloads": -1, "filename": "bintrees-2.0.4.win32-py3.5.exe", "has_sig": false, "md5_digest": "ac4a997e9279d47d1c11a5a302201882", "packagetype": "bdist_wininst", "python_version": "3.5", "requires_python": null, "size": 187341, "upload_time": "2016-04-01T05:04:22", "upload_time_iso_8601": "2016-04-01T05:04:22.658197Z", "url": "https://files.pythonhosted.org/packages/10/7c/2c9cdf57fff3bc847ba32867cc71e290ae6bcdbca52c95877722727ba913/bintrees-2.0.4.win32-py3.5.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f600273680c5c398a1d7beafdfe27e8", "sha256": "7337032ebc210fe801f1e8f3d182c219e3eaf454a2366b1c954a9daff0245033"}, "downloads": -1, "filename": "bintrees-2.0.4.win-amd64.exe", "has_sig": false, "md5_digest": "4f600273680c5c398a1d7beafdfe27e8", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 624258, "upload_time": "2017-01-22T04:35:33", "upload_time_iso_8601": "2017-01-22T04:35:33.830302Z", "url": "https://files.pythonhosted.org/packages/3d/3f/acedf268476d2330db2714911f8a177fe6d8286252061509d8a8be1a7f49/bintrees-2.0.4.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "8813ad6e1d031dd41af488ce38a0ddc0", "sha256": "cf41a2298477b272c236a66f6afdf81098b5c9485958168cfb989a878bc21509"}, "downloads": -1, "filename": "bintrees-2.0.4.win-amd64-py2.7.exe", "has_sig": false, "md5_digest": "8813ad6e1d031dd41af488ce38a0ddc0", "packagetype": "bdist_wininst", "python_version": "2.7", "requires_python": null, "size": 288508, "upload_time": "2017-01-22T04:35:26", "upload_time_iso_8601": "2017-01-22T04:35:26.363895Z", "url": "https://files.pythonhosted.org/packages/64/e7/7aca0395c7f3ad6b69a2ab924a1953cb076a84781deb00cdb7ef066787cc/bintrees-2.0.4.win-amd64-py2.7.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "c14b1c3f2d36477387654eb4e5e9f318", "sha256": "a606f145104da98a730528a04664bc0d0a40fc444c3717615259dee2dd973505"}, "downloads": -1, "filename": "bintrees-2.0.4.win-amd64-py3.5.exe", "has_sig": false, "md5_digest": "c14b1c3f2d36477387654eb4e5e9f318", "packagetype": "bdist_wininst", "python_version": "3.5", "requires_python": null, "size": 655733, "upload_time": "2017-01-22T08:14:24", "upload_time_iso_8601": "2017-01-22T08:14:24.387958Z", "url": "https://files.pythonhosted.org/packages/6c/04/0d21c7185be41102b48666c727bf5ce61f355c3c80b8c5eb75071d3037e4/bintrees-2.0.4.win-amd64-py3.5.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9d1be2a2cbbe447f2869c29c8fa51d5", "sha256": "5b6424b6969f43e579baa5bfae664dce56de574a56cfc88909ed48e1eaf54d77"}, "downloads": -1, "filename": "bintrees-2.0.4.win-amd64-py3.6.exe", "has_sig": false, "md5_digest": "f9d1be2a2cbbe447f2869c29c8fa51d5", "packagetype": "bdist_wininst", "python_version": "3.6", "requires_python": null, "size": 655919, "upload_time": "2017-01-22T04:35:42", "upload_time_iso_8601": "2017-01-22T04:35:42.487148Z", "url": "https://files.pythonhosted.org/packages/ec/19/7227b60e2a97998c72873c517987b6751783192fb31a082ff0f4b6a0c1c5/bintrees-2.0.4.win-amd64-py3.6.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "bafc4227d1e2574ae537902398615a01", "sha256": "b31576634e8aa4eabd63160fadabb8ad5cf6f6f2b5bc313e1dda3e121402e007"}, "downloads": -1, "filename": "bintrees-2.0.4.zip", "has_sig": false, "md5_digest": "bafc4227d1e2574ae537902398615a01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89806, "upload_time": "2016-01-09T06:36:34", "upload_time_iso_8601": "2016-01-09T06:36:34.532475Z", "url": "https://files.pythonhosted.org/packages/b6/32/b6c08a1f5125977b7db8ad25e6534e36614822a6668639df779e6a1fcf84/bintrees-2.0.4.zip", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "bcfcf1ba585fc31ee2b71fcbbdc1e28a", "sha256": "b408f0f637157767f78b92981b2c2ecbfedee904ebe70587d5b2732f1f339d22"}, "downloads": -1, "filename": "bintrees-2.0.6-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "bcfcf1ba585fc31ee2b71fcbbdc1e28a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 57918, "upload_time": "2017-02-04T08:50:56", "upload_time_iso_8601": "2017-02-04T08:50:56.901583Z", "url": "https://files.pythonhosted.org/packages/2b/84/38632fb7cdf00fff622c5506488d6a54411e2ecf81e6a6237d8072538620/bintrees-2.0.6-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d466dfa80daef77d71c3252628ba2ad", "sha256": "de2b30ebeb1744d1bc1ae544fc4ad52ec52c44405d7d6d1f9ea806b507578c92"}, "downloads": -1, "filename": "bintrees-2.0.6-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "7d466dfa80daef77d71c3252628ba2ad", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 58966, "upload_time": "2017-02-04T08:51:07", "upload_time_iso_8601": "2017-02-04T08:51:07.063874Z", "url": "https://files.pythonhosted.org/packages/45/a4/5dd7803fcc2cff2b4c4663af91b95c33e112cff1c58372e61c40fd39d2dc/bintrees-2.0.6-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf181f72c79d1290fc081935878c225e", "sha256": "2ccee7fb8f9bba2f5b38f517761959ed7f556ef708c2cf793cc5858edbd8dbeb"}, "downloads": -1, "filename": "bintrees-2.0.6-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "bf181f72c79d1290fc081935878c225e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 59216, "upload_time": "2017-02-04T08:51:16", "upload_time_iso_8601": "2017-02-04T08:51:16.110309Z", "url": "https://files.pythonhosted.org/packages/98/1f/a4c0f2345fca69e849e704eb7b933792fbec88014239999262f26bd81ca7/bintrees-2.0.6-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "579aa74bf6e18806db57eb453a4769c4", "sha256": "36aff704e845bfc8c8d66882aec03a5b7b67d1bcfdff0495597818029241a1db"}, "downloads": -1, "filename": "bintrees-2.0.6.win-amd64-py2.7.exe", "has_sig": false, "md5_digest": "579aa74bf6e18806db57eb453a4769c4", "packagetype": "bdist_wininst", "python_version": "2.7", "requires_python": null, "size": 289635, "upload_time": "2017-02-04T08:51:01", "upload_time_iso_8601": "2017-02-04T08:51:01.428833Z", "url": "https://files.pythonhosted.org/packages/39/86/2fd61c0b76d456911965fa1e12e6c1c25de163a6f9bc7e4d6e95f1bed380/bintrees-2.0.6.win-amd64-py2.7.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "623a085b44ee9a003c5874590f66eb2a", "sha256": "b5d6d45254969c7625d3a1eb16eda65152c9259db9f83a120953541c722e58ea"}, "downloads": -1, "filename": "bintrees-2.0.6.win-amd64-py3.5.exe", "has_sig": false, "md5_digest": "623a085b44ee9a003c5874590f66eb2a", "packagetype": "bdist_wininst", "python_version": "3.5", "requires_python": null, "size": 656797, "upload_time": "2017-02-04T08:51:11", "upload_time_iso_8601": "2017-02-04T08:51:11.919475Z", "url": "https://files.pythonhosted.org/packages/f6/54/6cc15369ee867b2ae00d8eae14789c3b31b919f9f60067c136c5fc4a85b0/bintrees-2.0.6.win-amd64-py3.5.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba9611f40711358a0574efeac20237d2", "sha256": "4dae6e008da88cc92ef04a1cd152487d53d0aee6b8bfc1f30080da957da36fe2"}, "downloads": -1, "filename": "bintrees-2.0.6.win-amd64-py3.6.exe", "has_sig": false, "md5_digest": "ba9611f40711358a0574efeac20237d2", "packagetype": "bdist_wininst", "python_version": "3.6", "requires_python": null, "size": 657048, "upload_time": "2017-02-04T08:51:20", "upload_time_iso_8601": "2017-02-04T08:51:20.087681Z", "url": "https://files.pythonhosted.org/packages/43/97/b94f5170a725cd51d692a5eca347e31ff153bdba77969bcfea6460ac3f19/bintrees-2.0.6.win-amd64-py3.6.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ce5b3c9578ff89fd5a9a53b00cf8d08", "sha256": "ea175d81f196c7c802232dd04c3ebc80c29adc3d7a16be1560629160407db2c0"}, "downloads": -1, "filename": "bintrees-2.0.6.zip", "has_sig": false, "md5_digest": "6ce5b3c9578ff89fd5a9a53b00cf8d08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95668, "upload_time": "2017-02-04T08:50:53", "upload_time_iso_8601": "2017-02-04T08:50:53.246537Z", "url": "https://files.pythonhosted.org/packages/62/a8/40c9d26030826c96e868138b0734ab62e757b87b790e9669bd93698f95ff/bintrees-2.0.6.zip", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "9a6b0504957c2cf733e616d6726d7dc7", "sha256": "730ed144319c82edff3b4d151a70aae7371054e1f3bfed4d44db87ccbebe8c7f"}, "downloads": -1, "filename": "bintrees-2.0.7-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "9a6b0504957c2cf733e616d6726d7dc7", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 58000, "upload_time": "2017-04-29T04:00:50", "upload_time_iso_8601": "2017-04-29T04:00:50.612294Z", "url": "https://files.pythonhosted.org/packages/23/a0/e207943c0156f45fc7de8e94e38682580e81639164ec9696ea9a51d93bdb/bintrees-2.0.7-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5722f791b2a5a741dde319eb7777b61", "sha256": "3270aa3d541906382d823eb4406bf3b9ad5d2731c12c58f22cb2e12475addb90"}, "downloads": -1, "filename": "bintrees-2.0.7-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "e5722f791b2a5a741dde319eb7777b61", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 59007, "upload_time": "2017-04-29T04:01:00", "upload_time_iso_8601": "2017-04-29T04:01:00.352347Z", "url": "https://files.pythonhosted.org/packages/ea/03/4a73f725f171124e1148ab3b663b20ab1c591aaf3898036089883a281f12/bintrees-2.0.7-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e4cc0d4a7fa49ded7c730bcf8da22f0", "sha256": "94e604f709151d0e678e06baa269fc748ae48667678ec23eb2b6704d743aa34f"}, "downloads": -1, "filename": "bintrees-2.0.7-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "7e4cc0d4a7fa49ded7c730bcf8da22f0", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 59221, "upload_time": "2017-04-29T04:01:10", "upload_time_iso_8601": "2017-04-29T04:01:10.011968Z", "url": "https://files.pythonhosted.org/packages/2c/fd/542fc0a6530b7e364780a32cab8e9e54cca8b173f9cb51eba624748945f8/bintrees-2.0.7-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dcff054af94239abc2200fd273b2ac8", "sha256": "4188dcc69397b2513aef1ece1b3ea99e0663c75ed7bee7814f671a462819fd31"}, "downloads": -1, "filename": "bintrees-2.0.7.win-amd64-py2.7.exe", "has_sig": false, "md5_digest": "9dcff054af94239abc2200fd273b2ac8", "packagetype": "bdist_wininst", "python_version": "2.7", "requires_python": null, "size": 289739, "upload_time": "2017-04-29T04:00:55", "upload_time_iso_8601": "2017-04-29T04:00:55.246882Z", "url": "https://files.pythonhosted.org/packages/4d/04/5cc2c3a79ec679b92b3c80925251f84b4e2d3cae0f15e049ff630b8851bc/bintrees-2.0.7.win-amd64-py2.7.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "1336f53a7ee66428c0c6a3ff402de519", "sha256": "18f552b1e41d0d2ad0d9e384caebc617ea676359901704ae475c922bd85d7fad"}, "downloads": -1, "filename": "bintrees-2.0.7.win-amd64-py3.5.exe", "has_sig": false, "md5_digest": "1336f53a7ee66428c0c6a3ff402de519", "packagetype": "bdist_wininst", "python_version": "3.5", "requires_python": null, "size": 656860, "upload_time": "2017-04-29T04:01:04", "upload_time_iso_8601": "2017-04-29T04:01:04.694501Z", "url": "https://files.pythonhosted.org/packages/4d/cb/27fea22c44d64fc9d658e74ed742252df6536fb8040a2f630fc543a17b84/bintrees-2.0.7.win-amd64-py3.5.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf9d8f9c1b4502ae13c1495f5e74abcc", "sha256": "70f1a1621850a614cea3c24bda0d54e63c46dd30243206764e23748a75eedd61"}, "downloads": -1, "filename": "bintrees-2.0.7.win-amd64-py3.6.exe", "has_sig": false, "md5_digest": "cf9d8f9c1b4502ae13c1495f5e74abcc", "packagetype": "bdist_wininst", "python_version": "3.6", "requires_python": null, "size": 657074, "upload_time": "2017-04-29T04:01:14", "upload_time_iso_8601": "2017-04-29T04:01:14.093100Z", "url": "https://files.pythonhosted.org/packages/61/d0/8c950a946dc1775f74a25acae9e9d68188aa09baf125f2058d80af121cbc/bintrees-2.0.7.win-amd64-py3.6.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "fac19b31424b81699981149b5f6900d9", "sha256": "60675e6602cef094abcd38bf4aecc067d78ae2d5e1645615c789724542d11270"}, "downloads": -1, "filename": "bintrees-2.0.7.zip", "has_sig": false, "md5_digest": "fac19b31424b81699981149b5f6900d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95876, "upload_time": "2017-04-29T04:00:46", "upload_time_iso_8601": "2017-04-29T04:00:46.931723Z", "url": "https://files.pythonhosted.org/packages/14/d7/eedfbbcfd3d60bdf1c7f266830889a6d96ea574037426c2e0dd037cc9a3f/bintrees-2.0.7.zip", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "32b428d167afb25607223e28f8e9f109", "sha256": "1e4351563b45c495895deaa401118ef26343c3f40dd5f08ced6c919d665e816d"}, "downloads": -1, "filename": "bintrees-2.1.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "32b428d167afb25607223e28f8e9f109", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 65286, "upload_time": "2020-01-02T05:01:50", "upload_time_iso_8601": "2020-01-02T05:01:50.241201Z", "url": "https://files.pythonhosted.org/packages/c5/be/74a4bc473c719956027985fa9508d43aa6a8cdeed8ce1bb15a4d4ae12958/bintrees-2.1.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4464ee463b16b50f26b3b048fee3129", "sha256": "ea398e71014d9c8b3bac4562cf4d830f1062a0794b3bd306100b703e129f01c0"}, "downloads": -1, "filename": "bintrees-2.1.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "d4464ee463b16b50f26b3b048fee3129", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.5", "size": 66724, "upload_time": "2020-01-02T05:01:52", "upload_time_iso_8601": "2020-01-02T05:01:52.412616Z", "url": "https://files.pythonhosted.org/packages/d5/2e/5a53127dba1c95b7a97f5fe6c2a4f8b2bbf9dc3a712782b78c32c31fb541/bintrees-2.1.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30a4b12c7380b792915796f9d5d235da", "sha256": "eae2732fae01b24eb17b3943721945c1ec88b2126e081c5c785ce448924d3f96"}, "downloads": -1, "filename": "bintrees-2.1.0.zip", "has_sig": false, "md5_digest": "30a4b12c7380b792915796f9d5d235da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 107829, "upload_time": "2020-01-02T05:01:54", "upload_time_iso_8601": "2020-01-02T05:01:54.508098Z", "url": "https://files.pythonhosted.org/packages/ba/a2/91500400b145c8ee668992654ff43afec3ebbb8ed80bc5f0717dd07a7349/bintrees-2.1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "32b428d167afb25607223e28f8e9f109", "sha256": "1e4351563b45c495895deaa401118ef26343c3f40dd5f08ced6c919d665e816d"}, "downloads": -1, "filename": "bintrees-2.1.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "32b428d167afb25607223e28f8e9f109", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 65286, "upload_time": "2020-01-02T05:01:50", "upload_time_iso_8601": "2020-01-02T05:01:50.241201Z", "url": "https://files.pythonhosted.org/packages/c5/be/74a4bc473c719956027985fa9508d43aa6a8cdeed8ce1bb15a4d4ae12958/bintrees-2.1.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4464ee463b16b50f26b3b048fee3129", "sha256": "ea398e71014d9c8b3bac4562cf4d830f1062a0794b3bd306100b703e129f01c0"}, "downloads": -1, "filename": "bintrees-2.1.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "d4464ee463b16b50f26b3b048fee3129", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.5", "size": 66724, "upload_time": "2020-01-02T05:01:52", "upload_time_iso_8601": "2020-01-02T05:01:52.412616Z", "url": "https://files.pythonhosted.org/packages/d5/2e/5a53127dba1c95b7a97f5fe6c2a4f8b2bbf9dc3a712782b78c32c31fb541/bintrees-2.1.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30a4b12c7380b792915796f9d5d235da", "sha256": "eae2732fae01b24eb17b3943721945c1ec88b2126e081c5c785ce448924d3f96"}, "downloads": -1, "filename": "bintrees-2.1.0.zip", "has_sig": false, "md5_digest": "30a4b12c7380b792915796f9d5d235da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 107829, "upload_time": "2020-01-02T05:01:54", "upload_time_iso_8601": "2020-01-02T05:01:54.508098Z", "url": "https://files.pythonhosted.org/packages/ba/a2/91500400b145c8ee668992654ff43afec3ebbb8ed80bc5f0717dd07a7349/bintrees-2.1.0.zip", "yanked": false}], "timestamp": "Thu May  7 22:37:27 2020"}