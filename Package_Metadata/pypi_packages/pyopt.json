{"info": {"author": "ubershmekel", "author_email": "ubershmekel@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Terminals", "Topic :: Utilities"], "description": "pyopt version 0.84\n\nA module for command-line options with a pythonic, decorator-centric syntax.\n\nThe following example auto-generates help with docstrings, type casting for\narguments and enforcing argument count:\n\n    import pyopt\n\n    expose = pyopt.Exposer()\n\n    @expose.args\n    def regular_function(arg1:str, arg2:int):\n        '''Your help - the docstring'''\n        # bla, etc, foobar spam...\n        print(repr(arg1), repr(arg2))\n\n    if __name__ == \"__main__\":\n        expose.run()\n\nThere are 3 modes of operation:\n    1. expose.args - A decorator for positional arguments.\n    2. expose.kwargs - A decorator for keyword arguments.\n    3. expose.mixed - A decorator for keyword and positional arguments.\n\nCurrently known compromises that are open to discussion, e-mail me:\n    1. This module was specifically designed with python 3 in mind, certain features\n        can be converted to python 2.x, but the awesome ones can't.\n    2. Keyword command-line functions require every argument to start with a\n        different letter to avoid collisions.\n    3. Annotations aren't mandatory, I don't know if this is the right way to go,\n        it's an explicity vs convenience issue.\n    4. Booleans can't default to True. I couldn't think of a use case for this\n        so tell me if you did.\n\nLicense: whatever, I don't mind. Google Code made me choose so I went with\nthe \"New BSD\". If somebody has a better idea, e-mail, comment or whatnot.\nHearing from whoever uses this code would be nice, but you really shouldn't\nfeel obliged.\n\nContact me at: ubershmekel at gmail", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/pyopt/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pyopt", "package_url": "https://pypi.org/project/pyopt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyopt/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/pyopt/"}, "release_url": "https://pypi.org/project/pyopt/0.84/", "requires_dist": null, "requires_python": null, "summary": "Exposing python functions to the command line", "version": "0.84", "yanked": false, "html_description": "<div class=\"project-description\">\n            pyopt version 0.84<br><br>A module for command-line options with a pythonic, decorator-centric syntax.<br><br>The following example auto-generates help with docstrings, type casting for<br>arguments and enforcing argument count:<br><br>    import pyopt<br><br>    expose = pyopt.Exposer()<br><br>    @expose.args<br>    def regular_function(arg1:str, arg2:int):<br>        '''Your help - the docstring'''<br>        # bla, etc, foobar spam...<br>        print(repr(arg1), repr(arg2))<br><br>    if __name__ == \"__main__\":<br>        expose.run()<br><br>There are 3 modes of operation:<br>    1. expose.args - A decorator for positional arguments.<br>    2. expose.kwargs - A decorator for keyword arguments.<br>    3. expose.mixed - A decorator for keyword and positional arguments.<br><br>Currently known compromises that are open to discussion, e-mail me:<br>    1. This module was specifically designed with python 3 in mind, certain features<br>        can be converted to python 2.x, but the awesome ones can't.<br>    2. Keyword command-line functions require every argument to start with a<br>        different letter to avoid collisions.<br>    3. Annotations aren't mandatory, I don't know if this is the right way to go,<br>        it's an explicity vs convenience issue.<br>    4. Booleans can't default to True. I couldn't think of a use case for this<br>        so tell me if you did.<br><br>License: whatever, I don't mind. Google Code made me choose so I went with<br>the \"New BSD\". If somebody has a better idea, e-mail, comment or whatnot.<br>Hearing from whoever uses this code would be nice, but you really shouldn't<br>feel obliged.<br><br>Contact me at: ubershmekel at gmail\n          </div>"}, "last_serial": 797497, "releases": {"0.71": [{"comment_text": "", "digests": {"md5": "0b02a8575ef7c91bef887265f8eaeed7", "sha256": "2c2a17a1458fc8a8f75b8f195dc9a00117cabab9f9adcaa679a171185aa48069"}, "downloads": -1, "filename": "pyopt-0.71.zip", "has_sig": false, "md5_digest": "0b02a8575ef7c91bef887265f8eaeed7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6848, "upload_time": "2009-09-11T01:59:43", "upload_time_iso_8601": "2009-09-11T01:59:43.935689Z", "url": "https://files.pythonhosted.org/packages/45/20/b4bed5d63ed791a01253f888e70ad4a92c14b14d49f00431b719c2bec17d/pyopt-0.71.zip", "yanked": false}], "0.72": [{"comment_text": "", "digests": {"md5": "30291b8410e7e0e874b28f76ebd497fd", "sha256": "7da04112ce3d975c26e839bb02821e36623deddafd10f28778a1189a5740511b"}, "downloads": -1, "filename": "pyopt-0.72.zip", "has_sig": false, "md5_digest": "30291b8410e7e0e874b28f76ebd497fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9054, "upload_time": "2011-05-10T23:16:30", "upload_time_iso_8601": "2011-05-10T23:16:30.934588Z", "url": "https://files.pythonhosted.org/packages/7e/5c/4858a9f90d38bd3e598af23de6ecd2614170717b8729e6e999a2ebe1d3a9/pyopt-0.72.zip", "yanked": false}], "0.75": [{"comment_text": "", "digests": {"md5": "86a6f10263df1e7de301ceffde8ca6e0", "sha256": "8df3ad00d417f399a5dbd55cce7d78a2a980c243d1cead8e21a49f0ebeb7dca1"}, "downloads": -1, "filename": "pyopt-0.75.zip", "has_sig": false, "md5_digest": "86a6f10263df1e7de301ceffde8ca6e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9141, "upload_time": "2011-05-11T09:28:47", "upload_time_iso_8601": "2011-05-11T09:28:47.783930Z", "url": "https://files.pythonhosted.org/packages/6a/e6/91979e58348cdc38d3c55f18f0c0f2364fb58ccdc643d3c6d5d6231e7685/pyopt-0.75.zip", "yanked": false}], "0.76": [{"comment_text": "", "digests": {"md5": "839ed853d4b4f1e85f68bc0b7b839f6d", "sha256": "6a275d5a48bc1c322c9287dbdffd93daff6edf106a5dd5fc50cf2861f614884c"}, "downloads": -1, "filename": "pyopt-0.76.zip", "has_sig": false, "md5_digest": "839ed853d4b4f1e85f68bc0b7b839f6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9141, "upload_time": "2011-05-11T09:33:20", "upload_time_iso_8601": "2011-05-11T09:33:20.053354Z", "url": "https://files.pythonhosted.org/packages/42/e2/a6fd4d3ee9ab1702ba9be1a8b7748b79d216b63ce5b32c5eb9469b800493/pyopt-0.76.zip", "yanked": false}], "0.77": [{"comment_text": "", "digests": {"md5": "077b322af2286fd52711cb48045d3cb6", "sha256": "869abd074b07c0d5130384d6ebc3a3d2fece410061efa63065426c0d0f03b4f3"}, "downloads": -1, "filename": "pyopt-0.77.zip", "has_sig": false, "md5_digest": "077b322af2286fd52711cb48045d3cb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9140, "upload_time": "2011-05-11T09:34:44", "upload_time_iso_8601": "2011-05-11T09:34:44.585395Z", "url": "https://files.pythonhosted.org/packages/1f/46/3e6868980878e523cbe0d34eedf107cbc7aeb47a5bb526a733bbbc50995d/pyopt-0.77.zip", "yanked": false}], "0.82": [{"comment_text": "", "digests": {"md5": "a9fd5a622d67632081def823120b810d", "sha256": "8072755c0ef640fba33eb683564939ca04dda01081a60152692ad2b021b138bc"}, "downloads": -1, "filename": "pyopt-0.82.zip", "has_sig": false, "md5_digest": "a9fd5a622d67632081def823120b810d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10177, "upload_time": "2011-12-29T20:12:35", "upload_time_iso_8601": "2011-12-29T20:12:35.468474Z", "url": "https://files.pythonhosted.org/packages/04/8a/41a4e81088237677bf1e0adaa60c55c88acf25c9f032358c89eee1d550a6/pyopt-0.82.zip", "yanked": false}], "0.83": [{"comment_text": "", "digests": {"md5": "dd8d599fa156213436735fe3b101d09d", "sha256": "202230f9bcb244ff92c27d9d79e2c4052bdfe64d1d923ff5190012ade0227cf1"}, "downloads": -1, "filename": "pyopt-0.83.zip", "has_sig": false, "md5_digest": "dd8d599fa156213436735fe3b101d09d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10172, "upload_time": "2011-12-29T20:14:20", "upload_time_iso_8601": "2011-12-29T20:14:20.478392Z", "url": "https://files.pythonhosted.org/packages/be/02/3148f6a569725798d9bea77cf858a29bdebd167c037f2d31aaa0212a0d2a/pyopt-0.83.zip", "yanked": false}], "0.84": [{"comment_text": "", "digests": {"md5": "b7b4450d91cfa8e385a9e9401c7bad8c", "sha256": "e4230ae1924189c805551d1a1c153c608aa9600ded829d5126fd8a8274110be4"}, "downloads": -1, "filename": "pyopt-0.84.zip", "has_sig": false, "md5_digest": "b7b4450d91cfa8e385a9e9401c7bad8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10390, "upload_time": "2011-12-29T20:27:43", "upload_time_iso_8601": "2011-12-29T20:27:43.605719Z", "url": "https://files.pythonhosted.org/packages/b3/50/b7d53d8f3a71694555672268a7ad559f2ae40bd1fc8b97e13af6604f99f4/pyopt-0.84.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7b4450d91cfa8e385a9e9401c7bad8c", "sha256": "e4230ae1924189c805551d1a1c153c608aa9600ded829d5126fd8a8274110be4"}, "downloads": -1, "filename": "pyopt-0.84.zip", "has_sig": false, "md5_digest": "b7b4450d91cfa8e385a9e9401c7bad8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10390, "upload_time": "2011-12-29T20:27:43", "upload_time_iso_8601": "2011-12-29T20:27:43.605719Z", "url": "https://files.pythonhosted.org/packages/b3/50/b7d53d8f3a71694555672268a7ad559f2ae40bd1fc8b97e13af6604f99f4/pyopt-0.84.zip", "yanked": false}], "timestamp": "Fri May  8 03:00:07 2020"}