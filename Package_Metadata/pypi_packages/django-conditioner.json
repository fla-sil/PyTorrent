{"info": {"author": "Omni Digital", "author_email": "dev@omni-digital.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-conditioner\n==================\n\n|Build status| |PyPI version| |Python versions| |License|\n\nCreate simple 'if this then that' style rules in your Django\napplication. Comes with a bunch of ready-to-use actions and conditions,\nbut is also easily extensible and allows model specific\nactions/conditions.\n\nConditioner helps you create simple rules that consist of a condition\n(if this), and an action (then that). It's currently a work in progress,\nbut we successfully use it in production with custom conditions and\nactions that allow us to send 'reminder' emails to users before their\nlicense expires.\n\nIt was created to 'scratch an itch', and for the foreseeable future we\nwill prioritise implementing use-cases needed by us as. The overall\ngoal, however, is to create a set of useful actions and conditions that\ncould be applied to a number of different scenarios.\n\nOh, and shout-out to\n`django-polymorphic <https://github.com/django-polymorphic/django-polymorphic/>`__\nwithout which this whole thing would be much harder to do.\n\nInstallation\n------------\n\n>From PyPI:\n\n.. code:: shell\n\n    $ pip install django-conditioner\n\nUsage\n-----\n\nIf you want to use the already implemented actions and conditions then\nall you need to do is install the package, add ``conditioner`` to your\nlist of ``INSTALLED_APPS`` and run ``$ python manage.py migrate``.\n\nYou should then see a ``Conditioner`` section with a ``Rule`` child in\nDjango Admin. Adding a new one should be pretty self-explanatory.\n\nAdvanced usage\n--------------\n\nActions and conditions types\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n| Both actions and conditions are divided into generic, model generic\n  and model specific types:\n| - generic actions/conditions don't need a set target type (i.e. log a\n  message on every Monday) - model generic actions/conditions need a set\n  target type, but work with all available models (i.e. log a message\n  when selected target type instance was created) - model specific\n  actions/conditions are implemented with specific model in mind and\n  area available only when it's selected (i.e. send email to user on\n  every Monday); they usually operate on specific fields (``user.email``\n  in previous example)\n\nAdding new actions and/or conditions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOne of the main goals was to make conditioner as flexible as possible\nand make adding new actions/conditions as easy as possible.\n\nCreating the action\n^^^^^^^^^^^^^^^^^^^\n\nAll actions need to inherit from ``BaseAction`` and implement\n``run_action()``. Model generic actions should set ``model_specific`` to\n``True``, model specific actions should set it to return the needed\nmodel class. If your action is model specific then model instance will\nbe passed to ``run_action()`` method as ``instance`` named argument.\n\nMaking sure that the action is picked up by Django\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou'll need to make sure that your newly created action is picked up by\nDjango. Assuming that it lives in an ``actions.py`` file inside\n``sample_module`` module, your ``sample_module/apps.py`` should look\nsomething like this:\n\n.. code:: python\n\n    from django.apps import AppConfig\n\n\n    class SampleModuleAppConfig(AppConfig):\n        name = 'sample_module'\n\n        def ready(self):\n            # Make sure that all models are imported\n            from sample_module import actions  # noqa\n\nRegistering action to Django Admin\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFinally you'll need to hook up your action to the ``Rule`` Django Admin.\nYou do that by adding it to the list of available inline polymorphic\nmodels:\n\n.. code:: python\n\n    from polymorphic.admin import StackedPolymorphicInline\n\n    from conditioner.admin import ActionInline\n    from sample_module.actions import SampleModuleAction\n\n\n    # Register `SampleModuleAction` action to 'conditioner' Django Admin\n    class SampleModuleActionInline(StackedPolymorphicInline.Child):\n        model = SampleModuleAction\n\n\n    ActionInline.child_inlines.append(SampleModuleActionInline)\n\nAssuming you put the code above in the ``sample_module/conditioner.py``\nfile, you'll need to make sure that it's also picked up by Django by\nadding ``from sample_module import conditioner`` to your app config\n``ready()`` method.\n\nYou should now see your custom action in Django Admin.\n\nAPI\n---\n\nThere's no proper documentation as of now, but the code is commented and\n*should* be pretty straightforward to use.\n\nThat said - feel free to open a `GitHub\nissue <https://github.com/omni-digital/django-conditioner/issues/new>`__\nif anything is unclear.\n\nTests\n-----\n\nPackage was tested with the help of ``tox`` on Python 3.4, 3.5 and 3.6\nwith Django 1.8, 1.9 and 1.10 (see ``tox.ini``).\n\nTo run tests yourself you need to run ``tox`` inside the repository:\n\n.. code:: shell\n\n    $ tox\n\nContributions\n-------------\n\nPackage source code is available at\n`GitHub <https://github.com/omni-digital/django-conditioner/>`__.\n\nFeel free to use, ask, fork, star, report bugs, fix them, suggest\nenhancements, add functionality and point out any mistakes. Thanks!\n\nNew actions and conditions more then welcome but should be first\ndiscussed and agreed upon.\n\nAuthors\n-------\n\nDeveloped and maintained by `Omni\nDigital <https://omni-digital.co.uk/>`__.\n\nReleased under `MIT\nLicense <https://github.com/omni-digital/django-conditioner/blob/master/LICENSE>`__.\n\n.. |Build status| image:: https://img.shields.io/travis/omni-digital/django-conditioner.svg\n   :target: https://travis-ci.org/omni-digital/django-conditioner\n.. |PyPI version| image:: https://img.shields.io/pypi/v/django-conditioner.svg\n   :target: https://pypi.python.org/pypi/django-conditioner\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/django-conditioner.svg\n   :target: https://pypi.python.org/pypi/django-conditioner\n.. |License| image:: https://img.shields.io/github/license/omni-digital/django-conditioner.svg\n   :target: https://github.com/omni-digital/django-conditioner/blob/master/LICENSE\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/omni-digital/django-conditioner/releases/latest", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/omni-digital/django-conditioner", "keywords": "django conditions ifttt", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "django-conditioner", "package_url": "https://pypi.org/project/django-conditioner/", "platform": "", "project_url": "https://pypi.org/project/django-conditioner/", "project_urls": {"Download": "https://github.com/omni-digital/django-conditioner/releases/latest", "Homepage": "https://github.com/omni-digital/django-conditioner"}, "release_url": "https://pypi.org/project/django-conditioner/0.1.0/", "requires_dist": ["django-polymorphic (>=1.1)"], "requires_python": "", "summary": "Create simple 'if this then that' style rules in your Django application. Comes with a bunch of ready to use actions and conditions, but is also easily extensible and allows model specific actions/conditions.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/omni-digital/django-conditioner\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef070d6d08f7d48effe053082314c37354926b4d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6f6d6e692d6469676974616c2f646a616e676f2d636f6e646974696f6e65722e737667\"></a> <a href=\"https://pypi.python.org/pypi/django-conditioner\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb4310219f1a4a5e5061be84dab856a9b5e874ff/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d636f6e646974696f6e65722e737667\"></a> <a href=\"https://pypi.python.org/pypi/django-conditioner\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2f583d23f079734c8d16bff12003ed755b3ecce/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d636f6e646974696f6e65722e737667\"></a> <a href=\"https://github.com/omni-digital/django-conditioner/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/010f19f0366ca46c8cbf7b67362f9942d3673971/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6f6d6e692d6469676974616c2f646a616e676f2d636f6e646974696f6e65722e737667\"></a></p>\n<p>Create simple \u2018if this then that\u2019 style rules in your Django\napplication. Comes with a bunch of ready-to-use actions and conditions,\nbut is also easily extensible and allows model specific\nactions/conditions.</p>\n<p>Conditioner helps you create simple rules that consist of a condition\n(if this), and an action (then that). It\u2019s currently a work in progress,\nbut we successfully use it in production with custom conditions and\nactions that allow us to send \u2018reminder\u2019 emails to users before their\nlicense expires.</p>\n<p>It was created to \u2018scratch an itch\u2019, and for the foreseeable future we\nwill prioritise implementing use-cases needed by us as. The overall\ngoal, however, is to create a set of useful actions and conditions that\ncould be applied to a number of different scenarios.</p>\n<p>Oh, and shout-out to\n<a href=\"https://github.com/django-polymorphic/django-polymorphic/\" rel=\"nofollow\">django-polymorphic</a>\nwithout which this whole thing would be much harder to do.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>&gt;From PyPI:</p>\n<pre>$ pip install django-conditioner\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>If you want to use the already implemented actions and conditions then\nall you need to do is install the package, add <tt>conditioner</tt> to your\nlist of <tt>INSTALLED_APPS</tt> and run <tt>$ python manage.py migrate</tt>.</p>\n<p>You should then see a <tt>Conditioner</tt> section with a <tt>Rule</tt> child in\nDjango Admin. Adding a new one should be pretty self-explanatory.</p>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced usage</h2>\n<div id=\"actions-and-conditions-types\">\n<h3>Actions and conditions types</h3>\n<div>\n<div>Both actions and conditions are divided into generic, model generic\nand model specific types:</div>\n<div>- generic actions/conditions don\u2019t need a set target type (i.e. log a\nmessage on every Monday) - model generic actions/conditions need a set\ntarget type, but work with all available models (i.e. log a message\nwhen selected target type instance was created) - model specific\nactions/conditions are implemented with specific model in mind and\narea available only when it\u2019s selected (i.e. send email to user on\nevery Monday); they usually operate on specific fields (<tt>user.email</tt>\nin previous example)</div>\n</div>\n</div>\n<div id=\"adding-new-actions-and-or-conditions\">\n<h3>Adding new actions and/or conditions</h3>\n<p>One of the main goals was to make conditioner as flexible as possible\nand make adding new actions/conditions as easy as possible.</p>\n<div id=\"creating-the-action\">\n<h4>Creating the action</h4>\n<p>All actions need to inherit from <tt>BaseAction</tt> and implement\n<tt>run_action()</tt>. Model generic actions should set <tt>model_specific</tt> to\n<tt>True</tt>, model specific actions should set it to return the needed\nmodel class. If your action is model specific then model instance will\nbe passed to <tt>run_action()</tt> method as <tt>instance</tt> named argument.</p>\n</div>\n<div id=\"making-sure-that-the-action-is-picked-up-by-django\">\n<h4>Making sure that the action is picked up by Django</h4>\n<p>You\u2019ll need to make sure that your newly created action is picked up by\nDjango. Assuming that it lives in an <tt>actions.py</tt> file inside\n<tt>sample_module</tt> module, your <tt>sample_module/apps.py</tt> should look\nsomething like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleModuleAppConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'sample_module'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Make sure that all models are imported</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">sample_module</span> <span class=\"kn\">import</span> <span class=\"n\">actions</span>  <span class=\"c1\"># noqa</span>\n</pre>\n</div>\n<div id=\"registering-action-to-django-admin\">\n<h4>Registering action to Django Admin</h4>\n<p>Finally you\u2019ll need to hook up your action to the <tt>Rule</tt> Django Admin.\nYou do that by adding it to the list of available inline polymorphic\nmodels:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">polymorphic.admin</span> <span class=\"kn\">import</span> <span class=\"n\">StackedPolymorphicInline</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">conditioner.admin</span> <span class=\"kn\">import</span> <span class=\"n\">ActionInline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sample_module.actions</span> <span class=\"kn\">import</span> <span class=\"n\">SampleModuleAction</span>\n\n\n<span class=\"c1\"># Register `SampleModuleAction` action to 'conditioner' Django Admin</span>\n<span class=\"k\">class</span> <span class=\"nc\">SampleModuleActionInline</span><span class=\"p\">(</span><span class=\"n\">StackedPolymorphicInline</span><span class=\"o\">.</span><span class=\"n\">Child</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">SampleModuleAction</span>\n\n\n<span class=\"n\">ActionInline</span><span class=\"o\">.</span><span class=\"n\">child_inlines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">SampleModuleActionInline</span><span class=\"p\">)</span>\n</pre>\n<p>Assuming you put the code above in the <tt>sample_module/conditioner.py</tt>\nfile, you\u2019ll need to make sure that it\u2019s also picked up by Django by\nadding <tt>from sample_module import conditioner</tt> to your app config\n<tt>ready()</tt> method.</p>\n<p>You should now see your custom action in Django Admin.</p>\n</div>\n</div>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>There\u2019s no proper documentation as of now, but the code is commented and\n<em>should</em> be pretty straightforward to use.</p>\n<p>That said - feel free to open a <a href=\"https://github.com/omni-digital/django-conditioner/issues/new\" rel=\"nofollow\">GitHub\nissue</a>\nif anything is unclear.</p>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Package was tested with the help of <tt>tox</tt> on Python 3.4, 3.5 and 3.6\nwith Django 1.8, 1.9 and 1.10 (see <tt>tox.ini</tt>).</p>\n<p>To run tests yourself you need to run <tt>tox</tt> inside the repository:</p>\n<pre>$ tox\n</pre>\n</div>\n<div id=\"contributions\">\n<h2>Contributions</h2>\n<p>Package source code is available at\n<a href=\"https://github.com/omni-digital/django-conditioner/\" rel=\"nofollow\">GitHub</a>.</p>\n<p>Feel free to use, ask, fork, star, report bugs, fix them, suggest\nenhancements, add functionality and point out any mistakes. Thanks!</p>\n<p>New actions and conditions more then welcome but should be first\ndiscussed and agreed upon.</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Developed and maintained by <a href=\"https://omni-digital.co.uk/\" rel=\"nofollow\">Omni\nDigital</a>.</p>\n<p>Released under <a href=\"https://github.com/omni-digital/django-conditioner/blob/master/LICENSE\" rel=\"nofollow\">MIT\nLicense</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2712016, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ab44ba6a24e610a2ce74599171805c53", "sha256": "b0a6b4488e42365cbf37fe12d4afe163b47d0784849614df7839eb25ec569162"}, "downloads": -1, "filename": "django_conditioner-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ab44ba6a24e610a2ce74599171805c53", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30192, "upload_time": "2017-03-17T08:37:43", "upload_time_iso_8601": "2017-03-17T08:37:43.562747Z", "url": "https://files.pythonhosted.org/packages/83/bf/8ec1db773006bb45153a7f9f2f555c8da03a155659fb3449d296bfc8e3a6/django_conditioner-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0276649f78e91e30fb31cda6096187a", "sha256": "c6401a4cc7fae5dd5d2825cbcb75b53976215a6da27e21f9a14b5f75dcb6bbf9"}, "downloads": -1, "filename": "django-conditioner-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a0276649f78e91e30fb31cda6096187a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18575, "upload_time": "2017-03-17T08:37:45", "upload_time_iso_8601": "2017-03-17T08:37:45.261900Z", "url": "https://files.pythonhosted.org/packages/4d/09/c95ec2ecf967078cbb8e6b725e421f5169cf92661132de93d2d69a9897ad/django-conditioner-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ab44ba6a24e610a2ce74599171805c53", "sha256": "b0a6b4488e42365cbf37fe12d4afe163b47d0784849614df7839eb25ec569162"}, "downloads": -1, "filename": "django_conditioner-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ab44ba6a24e610a2ce74599171805c53", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30192, "upload_time": "2017-03-17T08:37:43", "upload_time_iso_8601": "2017-03-17T08:37:43.562747Z", "url": "https://files.pythonhosted.org/packages/83/bf/8ec1db773006bb45153a7f9f2f555c8da03a155659fb3449d296bfc8e3a6/django_conditioner-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0276649f78e91e30fb31cda6096187a", "sha256": "c6401a4cc7fae5dd5d2825cbcb75b53976215a6da27e21f9a14b5f75dcb6bbf9"}, "downloads": -1, "filename": "django-conditioner-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a0276649f78e91e30fb31cda6096187a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18575, "upload_time": "2017-03-17T08:37:45", "upload_time_iso_8601": "2017-03-17T08:37:45.261900Z", "url": "https://files.pythonhosted.org/packages/4d/09/c95ec2ecf967078cbb8e6b725e421f5169cf92661132de93d2d69a9897ad/django-conditioner-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:54 2020"}