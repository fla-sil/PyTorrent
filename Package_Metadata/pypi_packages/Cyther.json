{"info": {"author": "Nicholas C. Pandolfi", "author_email": "npandolfi@wpi.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Cython", "Programming Language :: Python", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Desktop Environment :: File Managers", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Compilers"], "description": "Cyther: The Cross-Platform Cython/Python Compiler\n=================================================\n\n|repo| |python| |implementation| |status|\n\n|license| |format| |downloads|\n\n|travis| |codacy|\n\nWe all know the beauties of Cython:\n-----------------------------------\n\n    1) Writing C extensions is just as easy as Python\n\n    2) Almost any valid Python is valid Cython, as Cython is a super-set\n       of Python\n\n    3) It has the readability of Python, but the speed of C\n\n    4) Minimal effort has to be taken in order to speed up some programs\n       by two to four orders of magnitude\n\nHowever, compiling is not always easy. There are a few places that disutils' ``setup.py`` can get tripped up.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    1) ``vcvarsall.bat not found`` error\n\n    2) gcc: undefined reference to...\n\n    3) Other errors basically referring to ``compiler not found``\n\nCython may be almost as easy to write as Python, but sometimes nowhere\nnear the level of easiness that it takes to run Python. *This is where\nCyther comes into play*. Cyther is an attempt at a cross platform\ncompiler that wields both the standard Cython compiler and gcc to *make\nsure that these errors don't happen*.\n\nHow to use:\n-----------\n\nCyther is extremely easy to use. One can call ``cytherize`` from the\ncommand line, or import ``cyther`` and call ``cyther.core`` from the\nmodule level.\n\n::\n\n    from cyther import core\n    core('example_file.pyx')\n\nsame can be done with:\n\n::\n\n    $ cytherize example_file.pyx\n\nAnd as expected, one can call ``$ cytherize -h`` for all the argument\nhelp they need. See below.\n\nA few nifty examples:\n~~~~~~~~~~~~~~~~~~~~~\n\nCompile a Python file. This is the simplest usage of Cyther\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    core('example_file.py')\n\nCompile a Cython file while building the C files in-place (-l), and compiling only if the source file has been updated (-s)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    core('example_file.pyx -s -l')\n\nRun an infinite loop, watching the given file(s) for changes, and automatically compile them (-w) when detected\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    core('example_file.pyx -w')\n\nAnd don't forget, this can also be done from the terminal!\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ cytherize example_file.py\n    $ cytherize example_file.pyx -s -l\n    $ cytherize example_file.pyx -w\n\nThe command line interface of the ``-w`` option\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ cytherize example_file.pyx -w\n\n    cython -a -p -o X:\\Cyther\\__cythercache__\\example_file.c X:\\Cyther\\example_file.pyx\n    gcc -fPIC -shared -w -O3 -ID:\\Python35\\include -LD:\\Python35\\libs -o X:\\Cyther\\example_file.pyd X:\\Cyther\\__cythercache__\\example_file.c -lpython35\n    Compiled the file\n\n    ...<iterations:1, compiles:1, errors:0, polls:12>...\n\n    Compiled the file\n\n    ...<iterations:2, compiles:2, errors:0, polls:19>...\n\n\n    Error compiling Cython file:\n    ------------------------------------------------------------\n    ...\n\n    def inverse_triangular(n):\n        x = (sqrt(8 * n + 1) - 1) / 2\n        n = int(x)\n        if x - n > 0:\n            return Flse\n                      ^\n    ------------------------------------------------------------\n\n    example_file.pyx:15:19: undeclared name not builtin: Flse\n    Cyther will wait for you to fix this error before it tries to compile again...\n\n    ...<iterations:3, compiles:2, errors:1, polls:31>...\n\n\n    Compiled the file\n\n    ...<iterations:4, compiles:3, errors:1, polls:51>...\n\nCompile these two files and pass in the Cython argument ``-l`` (\\_l) to the Cython compiler before using ``gcc``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ cytherize example_file.pyx another_file.py -l -w -cython _l\n\nYou can also write something like this to execute tests directly after the build procedure\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    # example_file.pyx\n    from math import sqrt\n\n    cdef int triangular(int n):\n        cdef:\n            double q\n            int r\n        q = (n * (n + 1)) / 2\n        r = int(q)\n        return r\n\n    def inverse_triangular(n):\n        x = (sqrt(8 * n + 1) - 1) / 2\n        n = int(x)\n        if x - n > 0:\n            return False\n        return int(x)\n\n    '''\n    @Cyther\n    a = ''.join([str(x) for x in range(10)])\n    print(a)\n    '''\n\nThe ``@Cyther`` line tells Cyther that it should extract the code after\nit in the single quoted multi-line string and execute it if the build\npassed. One can also tell Cyther to time the ``@Cyther`` code, returning\nan IPython-esque timing message. Here are a few examples of how to use\nthese features.\n\nThe wonderful ``-x`` option, and its output to ``stdout``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ cytherize example_file.pyx -x\n    0123456789\n\nThe ``-t`` option is also super helpful\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ cytherize example_file.pyx -t\n    10000 loops, best of 3: (2.94e-06) sec per loop\n\nThe help text of ``cytherize``:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    $ cytherize -h\n\n    usage: cytherize.py [-h] [-c] [-p PRESET] [-s] [-o OUTPUT_NAME] [-i INCLUDE]\n                        [-l] [-w] [-e] [-x | -t] [-X | -T]\n                        [-cython CYTHON_ARGS [CYTHON_ARGS ...]]\n                        [-gcc GCC_ARGS [GCC_ARGS ...]]\n                        filenames [filenames ...]\n\n    Auto compile and build .pyx or .py files in place.\n\n    positional arguments:\n      filenames             The Cython source files\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -c, --concise         Get cyther to NOT print what it is thinking. Only use\n                            if you like to live on the edge\n      -p PRESET, --preset PRESET\n                            The preset options for using cython and gcc (ninja,\n                            beast, minimal, swift)\n      -s, --timestamp       If this flag is provided, cyther will not compile\n                            files that have a modifiedtime before that of your\n                            compiled .pyd or .so files\n      -o OUTPUT_NAME, --output_name OUTPUT_NAME\n                            Change the name of the output file, default is\n                            basename plus .pyd\n      -i INCLUDE, --include INCLUDE\n                            The names of the python modules that have an include\n                            library that needs to be passed to gcc\n      -l, --local           When not flagged, builds in __cythercache__, when\n                            flagged, it builds locally in the same directory\n      -w, --watch           When given, cyther will watch the directory with the\n                            't' option implied and compile,when necessary, the\n                            files given\n      -e, --error           Raise a CytherError exception instead of printing out\n                            stderr when -w is not specified\n      -x, --execute         Run the @Cyther code in multi-line single quoted\n                            strings, and comments\n      -t, --timeit          Time the @Cyther code in multi-line single quoted\n                            strings, and comments\n      -X                    A 'super flag' that implies these flags: '-x', '-s',\n                            '-p swift'\n      -T                    A 'super flag' that implies these flags: '-t', '-s',\n                            '-p swift'\n      -cython CYTHON_ARGS [CYTHON_ARGS ...]\n                            Arguments to pass to Cython\n      -gcc GCC_ARGS [GCC_ARGS ...]\n                            Arguments to pass to gcc\n\n    System:\n            Python (D:\\Python35\\python.EXE):\n                    Version: 3.5\n                    Operating System: Windows-10-10.0.10586-SP0\n                            OS is Windows: True\n                    Default Output Extension: .pyd\n                    Installation Directory: D:\\Python35\n            Cython (D:\\Python35\\Scripts\\cython.EXE):\n                    Nothing Here Yet\n            GCC (D:\\MinGW\\bin\\gcc.EXE):\n                    Nothing Here Yet\n\n    (Use '_' or '__' instead of '-' or '--' when passing args to gcc or Cython)\n    (The '-x' and '-b' Boolean flags are mutually exclusive)\n\nAssumptions Cyther makes about your system:\n-------------------------------------------\n\nCyther isn't quite perfect yet, so all the incompatibilities and\nassumptions that Cyther makes are listed below. We strongly recommend\nthat you look them over before even considering usage. In the near\nfuture I hope to make Cyther as polished as possible, and bring the list\nof assumptions listed below to zero.\n\n    1) Cython and gcc are both installed, and accessible from the\n       terminal\n\n    2) Your Python version supports ``shutil.which``\n\n    3) Your environment path variable is able to be found by\n       ``shutil.which``\n\n    4) 'distutils' is able to find the Python runtime static library\n       (usually ``libpythonXY.a`` or ``libpythonXY.so``)\n\n    5) Windows will support gcc compiled C code\n\nHey you! Yes you. If you notice any bugs or peculiarities, please report\nthem to our bug tracker, it will help us out a lot!\n\n::\n\n    https://github.com/nickpandolfi/Cyther/issues\n\nIf you have any questions or concerns, or even any suggestions, don't\nhesitate to email me at:\n\n::\n\n    npandolfi@wpi.edu\n\n*Happy compiling! - Nick*\n\n.. |repo| image:: https://badge.fury.io/py/cyther.svg\n.. |python| image:: https://img.shields.io/pypi/pyversions/cyther.svg?maxAge=2592000\n.. |implementation| image:: https://img.shields.io/pypi/implementation/cyther.svg?maxAge=2592000\n.. |status| image:: https://img.shields.io/pypi/status/cyther.svg?maxAge=2592000\n.. |license| image:: https://img.shields.io/pypi/l/cyther.svg?maxAge=2592000\n.. |format| image:: https://img.shields.io/pypi/format/cyther.svg?maxAge=2592000\n.. |downloads| image:: https://img.shields.io/pypi/dm/cyther.svg?maxAge=2592000\n.. |travis| image:: https://secure.travis-ci.org/nickpandolfi/Cyther.png\n.. |codacy| image:: https://api.codacy.com/project/badge/grade/a26189501a8e4086ac0eda51de5fd752", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nickpandolfi/Cyther", "keywords": "Cyther,Cython,Python,MinGW32,vcvarsall.bat,vcvarsall not found,setup.py,gcc,Python 3,user-friendly,command-line,script,auto-compiler", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Cyther", "package_url": "https://pypi.org/project/Cyther/", "platform": "Windows,MacOS,POSIX,Unix", "project_url": "https://pypi.org/project/Cyther/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nickpandolfi/Cyther"}, "release_url": "https://pypi.org/project/Cyther/0.7.0/", "requires_dist": null, "requires_python": null, "summary": "The Cross-Platform Cython/Python Compiler", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"repo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21e4ca5f3036c831c5d5165d31fe18df1b87dec1/68747470733a2f2f62616467652e667572792e696f2f70792f6379746865722e737667\"> <img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2a96f03a38ee9f97da388a83cb2a3433ee4a728/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6379746865722e7376673f6d61784167653d32353932303030\"> <img alt=\"implementation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/022898e189b853e0822ed092adca73a7f832ec25/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f6379746865722e7376673f6d61784167653d32353932303030\"> <img alt=\"status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/440fd44217de5ed510caf87d6c0d8283f31065bb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6379746865722e7376673f6d61784167653d32353932303030\"></p>\n<p><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35b9fe9305c6334a9a40e3a51e4627011698d15d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6379746865722e7376673f6d61784167653d32353932303030\"> <img alt=\"format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ccf847e4e4ff58f8c1f6df50202b26bc4a29cd9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f6379746865722e7376673f6d61784167653d32353932303030\"> <img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e64facecc111efa4ce6459a0e2765502478ec5a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6379746865722e7376673f6d61784167653d32353932303030\"></p>\n<p><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5471e23ad9c2ca59d8e003e9c238ac93c1f6a8ac/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6e69636b70616e646f6c66692f4379746865722e706e67\"> <img alt=\"codacy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd72138dea0dded99ef75ce297c934511b9b36ac/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f67726164652f6132363138393530316138653430383661633065646135316465356664373532\"></p>\n<div id=\"we-all-know-the-beauties-of-cython\">\n<h2>We all know the beauties of Cython:</h2>\n<blockquote>\n<ol>\n<li>Writing C extensions is just as easy as Python</li>\n<li>Almost any valid Python is valid Cython, as Cython is a super-set\nof Python</li>\n<li>It has the readability of Python, but the speed of C</li>\n<li>Minimal effort has to be taken in order to speed up some programs\nby two to four orders of magnitude</li>\n</ol>\n</blockquote>\n<div id=\"however-compiling-is-not-always-easy-there-are-a-few-places-that-disutils-setup-py-can-get-tripped-up\">\n<h3>However, compiling is not always easy. There are a few places that disutils\u2019 <tt>setup.py</tt> can get tripped up.</h3>\n<blockquote>\n<ol>\n<li><tt>vcvarsall.bat not found</tt> error</li>\n<li>gcc: undefined reference to\u2026</li>\n<li>Other errors basically referring to <tt>compiler not found</tt></li>\n</ol>\n</blockquote>\n<p>Cython may be almost as easy to write as Python, but sometimes nowhere\nnear the level of easiness that it takes to run Python. <em>This is where\nCyther comes into play</em>. Cyther is an attempt at a cross platform\ncompiler that wields both the standard Cython compiler and gcc to <em>make\nsure that these errors don\u2019t happen</em>.</p>\n</div>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use:</h2>\n<p>Cyther is extremely easy to use. One can call <tt>cytherize</tt> from the\ncommand line, or import <tt>cyther</tt> and call <tt>cyther.core</tt> from the\nmodule level.</p>\n<pre>from cyther import core\ncore('example_file.pyx')\n</pre>\n<p>same can be done with:</p>\n<pre>$ cytherize example_file.pyx\n</pre>\n<p>And as expected, one can call <tt>$ cytherize <span class=\"pre\">-h</span></tt> for all the argument\nhelp they need. See below.</p>\n<div id=\"a-few-nifty-examples\">\n<h3>A few nifty examples:</h3>\n<div id=\"compile-a-python-file-this-is-the-simplest-usage-of-cyther\">\n<h4>Compile a Python file. This is the simplest usage of Cyther</h4>\n<pre>core('example_file.py')\n</pre>\n</div>\n<div id=\"compile-a-cython-file-while-building-the-c-files-in-place-l-and-compiling-only-if-the-source-file-has-been-updated-s\">\n<h4>Compile a Cython file while building the C files in-place (-l), and compiling only if the source file has been updated (-s)</h4>\n<pre>core('example_file.pyx -s -l')\n</pre>\n</div>\n<div id=\"run-an-infinite-loop-watching-the-given-file-s-for-changes-and-automatically-compile-them-w-when-detected\">\n<h4>Run an infinite loop, watching the given file(s) for changes, and automatically compile them (-w) when detected</h4>\n<pre>core('example_file.pyx -w')\n</pre>\n</div>\n<div id=\"and-don-t-forget-this-can-also-be-done-from-the-terminal\">\n<h4>And don\u2019t forget, this can also be done from the terminal!</h4>\n<pre>$ cytherize example_file.py\n$ cytherize example_file.pyx -s -l\n$ cytherize example_file.pyx -w\n</pre>\n</div>\n<div id=\"the-command-line-interface-of-the-w-option\">\n<h4>The command line interface of the <tt><span class=\"pre\">-w</span></tt> option</h4>\n<pre>$ cytherize example_file.pyx -w\n\ncython -a -p -o X:\\Cyther\\__cythercache__\\example_file.c X:\\Cyther\\example_file.pyx\ngcc -fPIC -shared -w -O3 -ID:\\Python35\\include -LD:\\Python35\\libs -o X:\\Cyther\\example_file.pyd X:\\Cyther\\__cythercache__\\example_file.c -lpython35\nCompiled the file\n\n...&lt;iterations:1, compiles:1, errors:0, polls:12&gt;...\n\nCompiled the file\n\n...&lt;iterations:2, compiles:2, errors:0, polls:19&gt;...\n\n\nError compiling Cython file:\n------------------------------------------------------------\n...\n\ndef inverse_triangular(n):\n    x = (sqrt(8 * n + 1) - 1) / 2\n    n = int(x)\n    if x - n &gt; 0:\n        return Flse\n                  ^\n------------------------------------------------------------\n\nexample_file.pyx:15:19: undeclared name not builtin: Flse\nCyther will wait for you to fix this error before it tries to compile again...\n\n...&lt;iterations:3, compiles:2, errors:1, polls:31&gt;...\n\n\nCompiled the file\n\n...&lt;iterations:4, compiles:3, errors:1, polls:51&gt;...\n</pre>\n</div>\n<div id=\"compile-these-two-files-and-pass-in-the-cython-argument-l-l-to-the-cython-compiler-before-using-gcc\">\n<h4>Compile these two files and pass in the Cython argument <tt><span class=\"pre\">-l</span></tt> (_l) to the Cython compiler before using <tt>gcc</tt></h4>\n<pre>$ cytherize example_file.pyx another_file.py -l -w -cython _l\n</pre>\n</div>\n<div id=\"you-can-also-write-something-like-this-to-execute-tests-directly-after-the-build-procedure\">\n<h4>You can also write something like this to execute tests directly after the build procedure</h4>\n<pre># example_file.pyx\nfrom math import sqrt\n\ncdef int triangular(int n):\n    cdef:\n        double q\n        int r\n    q = (n * (n + 1)) / 2\n    r = int(q)\n    return r\n\ndef inverse_triangular(n):\n    x = (sqrt(8 * n + 1) - 1) / 2\n    n = int(x)\n    if x - n &gt; 0:\n        return False\n    return int(x)\n\n'''\n@Cyther\na = ''.join([str(x) for x in range(10)])\nprint(a)\n'''\n</pre>\n<p>The <tt>@Cyther</tt> line tells Cyther that it should extract the code after\nit in the single quoted multi-line string and execute it if the build\npassed. One can also tell Cyther to time the <tt>@Cyther</tt> code, returning\nan IPython-esque timing message. Here are a few examples of how to use\nthese features.</p>\n</div>\n<div id=\"the-wonderful-x-option-and-its-output-to-stdout\">\n<h4>The wonderful <tt><span class=\"pre\">-x</span></tt> option, and its output to <tt>stdout</tt></h4>\n<pre>$ cytherize example_file.pyx -x\n0123456789\n</pre>\n</div>\n<div id=\"the-t-option-is-also-super-helpful\">\n<h4>The <tt><span class=\"pre\">-t</span></tt> option is also super helpful</h4>\n<pre>$ cytherize example_file.pyx -t\n10000 loops, best of 3: (2.94e-06) sec per loop\n</pre>\n</div>\n</div>\n<div id=\"the-help-text-of-cytherize\">\n<h3>The help text of <tt>cytherize</tt>:</h3>\n<pre>$ cytherize -h\n\nusage: cytherize.py [-h] [-c] [-p PRESET] [-s] [-o OUTPUT_NAME] [-i INCLUDE]\n                    [-l] [-w] [-e] [-x | -t] [-X | -T]\n                    [-cython CYTHON_ARGS [CYTHON_ARGS ...]]\n                    [-gcc GCC_ARGS [GCC_ARGS ...]]\n                    filenames [filenames ...]\n\nAuto compile and build .pyx or .py files in place.\n\npositional arguments:\n  filenames             The Cython source files\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c, --concise         Get cyther to NOT print what it is thinking. Only use\n                        if you like to live on the edge\n  -p PRESET, --preset PRESET\n                        The preset options for using cython and gcc (ninja,\n                        beast, minimal, swift)\n  -s, --timestamp       If this flag is provided, cyther will not compile\n                        files that have a modifiedtime before that of your\n                        compiled .pyd or .so files\n  -o OUTPUT_NAME, --output_name OUTPUT_NAME\n                        Change the name of the output file, default is\n                        basename plus .pyd\n  -i INCLUDE, --include INCLUDE\n                        The names of the python modules that have an include\n                        library that needs to be passed to gcc\n  -l, --local           When not flagged, builds in __cythercache__, when\n                        flagged, it builds locally in the same directory\n  -w, --watch           When given, cyther will watch the directory with the\n                        't' option implied and compile,when necessary, the\n                        files given\n  -e, --error           Raise a CytherError exception instead of printing out\n                        stderr when -w is not specified\n  -x, --execute         Run the @Cyther code in multi-line single quoted\n                        strings, and comments\n  -t, --timeit          Time the @Cyther code in multi-line single quoted\n                        strings, and comments\n  -X                    A 'super flag' that implies these flags: '-x', '-s',\n                        '-p swift'\n  -T                    A 'super flag' that implies these flags: '-t', '-s',\n                        '-p swift'\n  -cython CYTHON_ARGS [CYTHON_ARGS ...]\n                        Arguments to pass to Cython\n  -gcc GCC_ARGS [GCC_ARGS ...]\n                        Arguments to pass to gcc\n\nSystem:\n        Python (D:\\Python35\\python.EXE):\n                Version: 3.5\n                Operating System: Windows-10-10.0.10586-SP0\n                        OS is Windows: True\n                Default Output Extension: .pyd\n                Installation Directory: D:\\Python35\n        Cython (D:\\Python35\\Scripts\\cython.EXE):\n                Nothing Here Yet\n        GCC (D:\\MinGW\\bin\\gcc.EXE):\n                Nothing Here Yet\n\n(Use '_' or '__' instead of '-' or '--' when passing args to gcc or Cython)\n(The '-x' and '-b' Boolean flags are mutually exclusive)\n</pre>\n</div>\n</div>\n<div id=\"assumptions-cyther-makes-about-your-system\">\n<h2>Assumptions Cyther makes about your system:</h2>\n<p>Cyther isn\u2019t quite perfect yet, so all the incompatibilities and\nassumptions that Cyther makes are listed below. We strongly recommend\nthat you look them over before even considering usage. In the near\nfuture I hope to make Cyther as polished as possible, and bring the list\nof assumptions listed below to zero.</p>\n<blockquote>\n<ol>\n<li>Cython and gcc are both installed, and accessible from the\nterminal</li>\n<li>Your Python version supports <tt>shutil.which</tt></li>\n<li>Your environment path variable is able to be found by\n<tt>shutil.which</tt></li>\n<li>\u2018distutils\u2019 is able to find the Python runtime static library\n(usually <tt>libpythonXY.a</tt> or <tt>libpythonXY.so</tt>)</li>\n<li>Windows will support gcc compiled C code</li>\n</ol>\n</blockquote>\n<p>Hey you! Yes you. If you notice any bugs or peculiarities, please report\nthem to our bug tracker, it will help us out a lot!</p>\n<pre>https://github.com/nickpandolfi/Cyther/issues\n</pre>\n<p>If you have any questions or concerns, or even any suggestions, don\u2019t\nhesitate to email me at:</p>\n<pre>npandolfi@wpi.edu\n</pre>\n<p><em>Happy compiling! - Nick</em></p>\n</div>\n\n          </div>"}, "last_serial": 2068593, "releases": {"0.4.1": [{"comment_text": "", "digests": {"md5": "cca5010f07a07c262de782c6f4485c55", "sha256": "2dbdea6921fddd2a823720a3c8639b73410b9cf802fda327ab8cf030fbae8cee"}, "downloads": -1, "filename": "Cyther-0.4.1.tar.bz2", "has_sig": false, "md5_digest": "cca5010f07a07c262de782c6f4485c55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9985, "upload_time": "2016-03-28T01:40:59", "upload_time_iso_8601": "2016-03-28T01:40:59.775674Z", "url": "https://files.pythonhosted.org/packages/e5/70/d7c9f53f6c06a3f4e5e3a6b34f0a95ab71fbea1926a78b410f6969e74b13/Cyther-0.4.1.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d69620334c5d1a55d6e849f0228ce69", "sha256": "88704e0c61a80c998c7e6a1e588609719f0176559974d9702d2d24ce3b84cfdf"}, "downloads": -1, "filename": "Cyther-0.4.1.tar.gz", "has_sig": false, "md5_digest": "4d69620334c5d1a55d6e849f0228ce69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10147, "upload_time": "2016-03-28T01:40:54", "upload_time_iso_8601": "2016-03-28T01:40:54.403515Z", "url": "https://files.pythonhosted.org/packages/53/76/8cb372a14bbc0472e881dae94f00e4c64124fdf876f18421d9a5e41fb984/Cyther-0.4.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "250cb61ac5d4ece3270fc2dfd3a6276b", "sha256": "8bb002e11e0df3018b9efd4749a83fc752cbc7196cc6a40451fc1bead28806dd"}, "downloads": -1, "filename": "Cyther-0.4.1.win32.exe", "has_sig": false, "md5_digest": "250cb61ac5d4ece3270fc2dfd3a6276b", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 145019, "upload_time": "2016-03-28T01:41:05", "upload_time_iso_8601": "2016-03-28T01:41:05.410235Z", "url": "https://files.pythonhosted.org/packages/7f/d8/f2eeb4eaa9a3c01c77b495f471380bb0bab43b6b19ce0ab3016bd735d9c6/Cyther-0.4.1.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a2efd57e1e9739c3579682bcff41ec8", "sha256": "ad7deed3eb2345250ef4500d72f44c1ad23f6c193152347fe538141ab1a7da52"}, "downloads": -1, "filename": "Cyther-0.4.1.zip", "has_sig": false, "md5_digest": "2a2efd57e1e9739c3579682bcff41ec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13906, "upload_time": "2016-03-28T01:40:47", "upload_time_iso_8601": "2016-03-28T01:40:47.223939Z", "url": "https://files.pythonhosted.org/packages/a7/e1/4b7fc4c90cf66ea99a84dc61675ec7145ca6626e3eb10126cbaf209b206d/Cyther-0.4.1.zip", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "b5b8851d7bca37faf4d2f105325af867", "sha256": "495648414df1c6097137b6b1391fa63f68cf7984caf969b11b2d449c2085236d"}, "downloads": -1, "filename": "Cyther-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b5b8851d7bca37faf4d2f105325af867", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 17833, "upload_time": "2016-03-28T21:42:32", "upload_time_iso_8601": "2016-03-28T21:42:32.889183Z", "url": "https://files.pythonhosted.org/packages/e1/8d/deb79c43a72e46dba1fa022da3c6cc330ccba4c26b0286592212323783ea/Cyther-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0b7b2bca66f5b9db5d4b8dc271415ed", "sha256": "d17829b68dd5edaac5912f9fba99852173cd6be98dfb7e52e23486f92e0dd809"}, "downloads": -1, "filename": "Cyther-0.4.2.tar.gz", "has_sig": false, "md5_digest": "c0b7b2bca66f5b9db5d4b8dc271415ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9247, "upload_time": "2016-03-28T21:42:27", "upload_time_iso_8601": "2016-03-28T21:42:27.257604Z", "url": "https://files.pythonhosted.org/packages/7d/4a/38da722e44c0e92b02996ec347b8f699b5c8b93d9573cce043ebf6fb8781/Cyther-0.4.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "22e4fea34716824d6011438652577089", "sha256": "c4ea6702f693e4c71d0d014fd6df5baaf7c075d487485a89772515d05b0b38c0"}, "downloads": -1, "filename": "Cyther-0.4.2.win32.exe", "has_sig": false, "md5_digest": "22e4fea34716824d6011438652577089", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 148682, "upload_time": "2016-03-28T21:42:41", "upload_time_iso_8601": "2016-03-28T21:42:41.124494Z", "url": "https://files.pythonhosted.org/packages/b0/9c/f122b29bbbeaf191a1f2aaabea0d64a18be985bcc0e166fd9b4c128d2681/Cyther-0.4.2.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "90440273d75f2f0fb4e7646d772b5465", "sha256": "ffc6d4f21ece5a5330548196251e52bd815fead4afcf199ba6a6818489f04882"}, "downloads": -1, "filename": "Cyther-0.4.2.zip", "has_sig": false, "md5_digest": "90440273d75f2f0fb4e7646d772b5465", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15142, "upload_time": "2016-03-28T21:42:20", "upload_time_iso_8601": "2016-03-28T21:42:20.109237Z", "url": "https://files.pythonhosted.org/packages/f2/f2/60f9f9094a7037210be22b932e9f3e14c7df1c5fe4d2dbdca3835ddbf6e7/Cyther-0.4.2.zip", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "933102d392b4023285927fed9e84d518", "sha256": "5ce90fd1da6765063189d2b9b23dce808d99c3e42b887cc684c836d24d39831e"}, "downloads": -1, "filename": "Cyther-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "933102d392b4023285927fed9e84d518", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 20388, "upload_time": "2016-04-10T18:25:27", "upload_time_iso_8601": "2016-04-10T18:25:27.475096Z", "url": "https://files.pythonhosted.org/packages/6d/49/c0a23f176076efa841d4c489f400f4c323b7b3d50914fb3d99c43bc4a2d5/Cyther-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76cab552b3806f7e5ba009e8baf8035d", "sha256": "b43e849ec7c768adb0693f15288dd946a785eeb2b35af4fd77251f8a78055796"}, "downloads": -1, "filename": "Cyther-0.5.0.tar.gz", "has_sig": false, "md5_digest": "76cab552b3806f7e5ba009e8baf8035d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11076, "upload_time": "2016-04-10T18:25:21", "upload_time_iso_8601": "2016-04-10T18:25:21.612851Z", "url": "https://files.pythonhosted.org/packages/e1/b5/3c70d418969b9b4ec17e17bcad9d8f6d3c7052c415112349c1ad2e6de1a0/Cyther-0.5.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f00f9a2f71795f368a5277c85f559f01", "sha256": "6ba6e6c5fbfe5a03452cdb1c710b41d5602b50c9e539a3519949c6a1611b1a58"}, "downloads": -1, "filename": "Cyther-0.5.0.win32.exe", "has_sig": false, "md5_digest": "f00f9a2f71795f368a5277c85f559f01", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 151694, "upload_time": "2016-04-10T18:25:35", "upload_time_iso_8601": "2016-04-10T18:25:35.139344Z", "url": "https://files.pythonhosted.org/packages/de/b1/4ff060f02b404d14ef4fa47093ee418db85a56a4454ce3c8fccf41c2fbc2/Cyther-0.5.0.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc6bf1da1c600b2221ec575c4af9abf9", "sha256": "047fd6ef8d627c9b5437edcf2d33dd9686fc28f1eb0b7e1f19afdf23819d7e4e"}, "downloads": -1, "filename": "Cyther-0.5.0.zip", "has_sig": false, "md5_digest": "fc6bf1da1c600b2221ec575c4af9abf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17360, "upload_time": "2016-04-10T18:25:16", "upload_time_iso_8601": "2016-04-10T18:25:16.978913Z", "url": "https://files.pythonhosted.org/packages/8b/f3/e6f76020ba9000d56fca2ca6fbd9726ce7c9bea00f70dbdc4a641d1afa91/Cyther-0.5.0.zip", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "4a63f734c8cf905e35dbeee122b09e86", "sha256": "508eb830cca56ea8be67bb881431d99d7677c907dc56a50a2fc84b0abc569c1e"}, "downloads": -1, "filename": "Cyther-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a63f734c8cf905e35dbeee122b09e86", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 21057, "upload_time": "2016-04-11T00:56:25", "upload_time_iso_8601": "2016-04-11T00:56:25.267804Z", "url": "https://files.pythonhosted.org/packages/fa/67/7677bbc831269d35e3fa4ff7aa5c862789c32fe589a4e1ca7f31b5300ee2/Cyther-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf1f7e00a672a1de151f5dcf4bc17053", "sha256": "f28da3f2a82f84e94ad33eb7a98b5b4a0d86b9f6c8098024f308522eb8f527bb"}, "downloads": -1, "filename": "Cyther-0.5.1.tar.gz", "has_sig": false, "md5_digest": "bf1f7e00a672a1de151f5dcf4bc17053", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11365, "upload_time": "2016-04-11T00:56:20", "upload_time_iso_8601": "2016-04-11T00:56:20.326998Z", "url": "https://files.pythonhosted.org/packages/b8/90/683a4b4b84bc0c93e08bb4a0e8c508dabab932adcaa3d5192563cdfd4511/Cyther-0.5.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "6070061cb027894573f53e95458e50b0", "sha256": "253530ffed1a8e97327dff732df88fa36848e9b7b019ab1a5d2f399a55d223c7"}, "downloads": -1, "filename": "Cyther-0.5.1.win32.exe", "has_sig": false, "md5_digest": "6070061cb027894573f53e95458e50b0", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 152713, "upload_time": "2016-04-11T00:56:30", "upload_time_iso_8601": "2016-04-11T00:56:30.742211Z", "url": "https://files.pythonhosted.org/packages/b7/91/aecb3f6719d1a770edb5c05fbb8d411f4664cd39ad5f1fb8cf9a0fbf3c5a/Cyther-0.5.1.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "65bd79d7e4e27e3f728a6d025b298c99", "sha256": "8c39e506cef722eba45de5d6bc879448bd173a34d8ccd2b658a3449c9846fb66"}, "downloads": -1, "filename": "Cyther-0.5.1.zip", "has_sig": false, "md5_digest": "65bd79d7e4e27e3f728a6d025b298c99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17840, "upload_time": "2016-04-11T00:56:14", "upload_time_iso_8601": "2016-04-11T00:56:14.352666Z", "url": "https://files.pythonhosted.org/packages/e6/f3/4b140b2d02716e1bb3e80904dc7b43bd10c129598e3d683e31eab61d3083/Cyther-0.5.1.zip", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "b1b1e386e53a8a473fbcc8653f1f1fe6", "sha256": "a4f803cdc744af958c27a8230a54451378df68bf9ae1bcbc5d0679dae118a512"}, "downloads": -1, "filename": "Cyther-0.5.3.tar.gz", "has_sig": false, "md5_digest": "b1b1e386e53a8a473fbcc8653f1f1fe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13277, "upload_time": "2016-04-13T23:09:19", "upload_time_iso_8601": "2016-04-13T23:09:19.118386Z", "url": "https://files.pythonhosted.org/packages/5d/82/ed2cc1f77e44df0c1ea7061169a4e1f262db0c6990e09d412da4e2dc00ad/Cyther-0.5.3.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "9d2b72d8e0f2aa3a9ec938affb210ef5", "sha256": "67a8bef76977265922ed1d89e42462daee20ce4eb59e49b1be33df50c47ecb35"}, "downloads": -1, "filename": "Cyther-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9d2b72d8e0f2aa3a9ec938affb210ef5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26165, "upload_time": "2016-04-16T06:08:37", "upload_time_iso_8601": "2016-04-16T06:08:37.924085Z", "url": "https://files.pythonhosted.org/packages/a1/a6/e7de94fd75fb45c7e72609d30055c0e28f1f2e13f9ef6fbc778fa0380d96/Cyther-0.6.1-py3-none-any.whl", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "eb9fc370d5eaa4aff11ebca3dfe74003", "sha256": "06748f605c25a8eebc59569002e5290f5fb633ff8e8904fd286699791601e96b"}, "downloads": -1, "filename": "Cyther-0.6.2.tar.gz", "has_sig": false, "md5_digest": "eb9fc370d5eaa4aff11ebca3dfe74003", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14738, "upload_time": "2016-04-17T19:47:30", "upload_time_iso_8601": "2016-04-17T19:47:30.333350Z", "url": "https://files.pythonhosted.org/packages/38/16/eecefbc02ba19dcf864c6c7b597484e32e3e4986079bc7c4d7ef86e04956/Cyther-0.6.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "da39f764102f2664a989e37703d76f36", "sha256": "bd5e14b40112f368b9e63afe057c50ebc7721063abbb43747fd26419f3a9c7e3"}, "downloads": -1, "filename": "Cyther-0.6.2.zip", "has_sig": false, "md5_digest": "da39f764102f2664a989e37703d76f36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24194, "upload_time": "2016-04-17T19:47:24", "upload_time_iso_8601": "2016-04-17T19:47:24.611045Z", "url": "https://files.pythonhosted.org/packages/3b/17/7213f0e9cd6ffa9027c439a162bad50e74f2717987daf1e76ee07f45509f/Cyther-0.6.2.zip", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "7add3d0d40401a435664ee527b60a15d", "sha256": "354ba1a5aaf886670609e0bcc08ec8a09d6742f83f14ff4b1114459c1b136711"}, "downloads": -1, "filename": "Cyther-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7add3d0d40401a435664ee527b60a15d", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 28188, "upload_time": "2016-04-17T19:52:54", "upload_time_iso_8601": "2016-04-17T19:52:54.499646Z", "url": "https://files.pythonhosted.org/packages/b7/d4/9608613db7d888dbdff1c7e7bdd2bbf4865ddfd3b8602e2f70b1e87ed6ce/Cyther-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61e453bc656f5344d247d2c00476d835", "sha256": "c3c2bb5a9a64fe60b7f0d94632273e02a22b3b196d772eea08773297cb3932a1"}, "downloads": -1, "filename": "Cyther-0.7.0.tar.gz", "has_sig": false, "md5_digest": "61e453bc656f5344d247d2c00476d835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14728, "upload_time": "2016-04-17T19:52:47", "upload_time_iso_8601": "2016-04-17T19:52:47.790610Z", "url": "https://files.pythonhosted.org/packages/4f/66/ac48a7149ae779eaa919e3c9108f0307dba5d54f763083cff23321d9592d/Cyther-0.7.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b56e2d16a8ca143567884e62a9eee763", "sha256": "72c11484b13196ed06812176cc991969a39004f0717d12a3370d0d649d89b81e"}, "downloads": -1, "filename": "Cyther-0.7.0.win32.exe", "has_sig": false, "md5_digest": "b56e2d16a8ca143567884e62a9eee763", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 163593, "upload_time": "2016-04-17T19:52:59", "upload_time_iso_8601": "2016-04-17T19:52:59.522761Z", "url": "https://files.pythonhosted.org/packages/32/d3/8bedc5965ec41977e0f1307015cf2e2a74eeabb0c87ba63f4d32ce2999d8/Cyther-0.7.0.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c2865a40e076908098d5b2636714c2c", "sha256": "a862ba88aa66c393bb729403aab4363265ab425392ef42c10e8a349cb593c942"}, "downloads": -1, "filename": "Cyther-0.7.0.zip", "has_sig": false, "md5_digest": "0c2865a40e076908098d5b2636714c2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24193, "upload_time": "2016-04-17T19:52:42", "upload_time_iso_8601": "2016-04-17T19:52:42.082154Z", "url": "https://files.pythonhosted.org/packages/cb/71/7e01484ced78b3cc480ad6e95692b43215e3cf8cb4566986322d8ffdac72/Cyther-0.7.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7add3d0d40401a435664ee527b60a15d", "sha256": "354ba1a5aaf886670609e0bcc08ec8a09d6742f83f14ff4b1114459c1b136711"}, "downloads": -1, "filename": "Cyther-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7add3d0d40401a435664ee527b60a15d", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 28188, "upload_time": "2016-04-17T19:52:54", "upload_time_iso_8601": "2016-04-17T19:52:54.499646Z", "url": "https://files.pythonhosted.org/packages/b7/d4/9608613db7d888dbdff1c7e7bdd2bbf4865ddfd3b8602e2f70b1e87ed6ce/Cyther-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61e453bc656f5344d247d2c00476d835", "sha256": "c3c2bb5a9a64fe60b7f0d94632273e02a22b3b196d772eea08773297cb3932a1"}, "downloads": -1, "filename": "Cyther-0.7.0.tar.gz", "has_sig": false, "md5_digest": "61e453bc656f5344d247d2c00476d835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14728, "upload_time": "2016-04-17T19:52:47", "upload_time_iso_8601": "2016-04-17T19:52:47.790610Z", "url": "https://files.pythonhosted.org/packages/4f/66/ac48a7149ae779eaa919e3c9108f0307dba5d54f763083cff23321d9592d/Cyther-0.7.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b56e2d16a8ca143567884e62a9eee763", "sha256": "72c11484b13196ed06812176cc991969a39004f0717d12a3370d0d649d89b81e"}, "downloads": -1, "filename": "Cyther-0.7.0.win32.exe", "has_sig": false, "md5_digest": "b56e2d16a8ca143567884e62a9eee763", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 163593, "upload_time": "2016-04-17T19:52:59", "upload_time_iso_8601": "2016-04-17T19:52:59.522761Z", "url": "https://files.pythonhosted.org/packages/32/d3/8bedc5965ec41977e0f1307015cf2e2a74eeabb0c87ba63f4d32ce2999d8/Cyther-0.7.0.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c2865a40e076908098d5b2636714c2c", "sha256": "a862ba88aa66c393bb729403aab4363265ab425392ef42c10e8a349cb593c942"}, "downloads": -1, "filename": "Cyther-0.7.0.zip", "has_sig": false, "md5_digest": "0c2865a40e076908098d5b2636714c2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24193, "upload_time": "2016-04-17T19:52:42", "upload_time_iso_8601": "2016-04-17T19:52:42.082154Z", "url": "https://files.pythonhosted.org/packages/cb/71/7e01484ced78b3cc480ad6e95692b43215e3cf8cb4566986322d8ffdac72/Cyther-0.7.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:41:03 2020"}