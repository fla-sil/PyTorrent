{"info": {"author": "Allie Fitter", "author_email": "fitterj@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "====================\nIterable Collections\n====================\n\nThis package is inspired heavily by `Martin Fowler's Collection Pipeline pattern`_, and also by my first interaction\nwith this pattern--`Laravel's Collections in PHP`_. This is meant to be a versatile and extensible implementation of\nthe Collection Pipeline pattern that leverages Python's builtin functionality to provide a clearer, more legible\nimplementation than usage of builtins alone provides. In other words, this package is born of the belief that this\nis more difficult to decipher::\n\n    foo = list(filter(lambda y: y > 4, map(lambda x: x * 2, [1, 2, 3, 4])))\n\nThan this::\n\n    foo = collect([1, 2, 3, 4]).map(lambda x: x * 2) \\\n        .filter(lambda y: y > 4) \\\n        .list()\n\n**HOWEVER** if you're only going to be working with Sequences, if you would like to connect directly to a data source,\nif you are concerned with maintaining your data in an immutable chain, or if you prefer the syntax of Linq or Scala\n(and don't feel like taking the time to implement it yourself with the tools provided in this package), I would highly\nsuggest you use `PyFunctional`_. It's a much more mature, more well conceived, and time tested package that provides\nthe same object oriented pipeline interface. Where these packages differ is in their intentions. As stated clearly in\n`this Github issue`_, PyFunctional is built around these concepts:\n\n- Constructing a lineage chain (functions that take an iterable and return one, or actions)\n\n- Applying it to a base collection via the iterator interface, the base collection is also forced to be a list.\n\nIterable Collections was made with Dicts and other Mappings in mind--which is not to purport any superiority, just to\nstate they were conceived for different purposes. Because of the desire to work with Mappings, the desire for an easily\nextendable interface, and the desire leverage builtins in a pipeline interface, I decided\nthere was room for a similar package.\n\nPython 2.7 Support\n------------------\n\nThere is currently no support for Python 2.7. That may be addressed in the future, but at the moment it is not a\npriority.\n\n\nUsage\n-----\n\nBasic usage of transformational methods::\n\n    from iterable_collections import collect\n\n\n    # map\n    collect([1, 2, 3, 4]).map(lambda x: x + 2) \\\n        .list() # [3, 4, 5, 6]\n\n    # filter\n    collect([1, 2, 3, 4]).filter(lambda x: x > 2) \\\n        .list() # [3, 4]\n\n    # groupby\n    collect([{'a': 1, 'b': 2}, {'a': 1, 'b': 3}, {'a': 1, 'b': 2}]).sorted(key=lambda x: x['b']) \\\n        .groupby(key=lambda x: x['b'])\n        .map(lambda x: (x[0], list(x[1]))) # We're using map here because the results of groupby are in iterators\n        .list() # [(2, [{'a': 1, 'b': 2}, {'a': 1, 'b': 2}]), (3, [{'a': 1, 'b': 3}])]\n\n    # reduce\n    collect([1, 2, 3, 4]).reduce(lambda t, x: t + x) # 10\n\n    # flatten\n    collect([[1, 2], [3, 4]]).flatten() \\\n        .list() # [1, 2, 3, 4]\n\nThere are two approaches that can be used with Mappings: the ``*_items`` and ``*_nt_items`` methods, such as\n``map_items`` and ``map_nt_items``. The ``*_items`` methods implicitly call ``dict.items`` on the\n``Collection.iterable`` property which results in a Mapping View containing key value pairs. These methods accept a two\nargument function instead of the usual one argument function used by ``map``::\n\n    collect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).map_items(lambda k, v: (k, v + 2)) \\\n        .dict() # {'a': 3, 'b': 4, 'c': 5, 'd': 6}\n\nAlso available are the ``*_nt_items`` methods. These methods also implicitly call ``dict.items``, but instead of\nspreading the keys and values into two arguments, they create a ``namedtuple`` that has ``key`` and ``value``\nattributes::\n\n    collect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).map_nt_items(lambda x: (x.key, x.value + 2)) \\\n        .dict() # {'a': 3, 'b': 4, 'c': 5, 'd': 6}\n\nThere ``*_items`` and ``*_nt_items`` available for the transformational methods: filter, map, and reduce. Additionally\nthe ``first`` and ``last`` methods have ``*_items`` and ``*_nt_items`` versions::\n\n    # first\n    collect([1, 2, 3, 4]).first() # 1\n\n    # last\n    collect([1, 2, 3, 4]).last() # 4\n\n    # first_item\n    collect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).first_item() # ('a', 1)\n\n    # last_item\n    collect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).last_item() # ('d', 4)\n\n    # first_nt_item\n    collect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).first_nt_item() # DictItem(key='a', value=1)\n\n    # last_nt_item\n    collect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).last_nt_item() # DictItem(key='d', value=4)\n\nExtensibility\n-------------\n\nEach method on the ``Collection`` object is defined by a ``MethodStrategy``. These objects utilize a Callable object\nand a series of other strategies to compose all the functionality encapsulated by a method. As defined in the\n``MethodStrategy`` class, the process of encapsulating the functionality of a method can be characterized with six\nphases:\n\n1. **Pre-Processing:** A series of operations are performed on the ``Collection.iterable`` property. Typically\n``iterable`` is converted into some desired format or type.\n\n2. **Argument Formatting:** Format the arguments passed to the method. Also in this phase, typically arguments are\nformatted into some desired format or type.\n\n3. **Argument Binding:** Bind the arguments to desired positions in the Callable's signature.\n\n4. **Execution:** The Callable object is called, performing the core functionality of the method--may result in errors.\n\n5. **Result Handling:** Determine what should be done with the result of the Callable. Basic behavior is either storing\nthe result to the ``Collection.iterable`` property or preserving it's original value.\n\n6. **Return Value:** Determine what value should be returned from the method. Basic behavior is either the result of\nthe Callable or the current ``Collection`` instance.\n\n\nIn order to determine the behaviors invoked in each of these phases, ``MethodStrategy`` is initialized with the method's\nname as a ``str``, a Callable object, and a number of objects that implement interfaces which abstract the various\nphases.\n\n- ``PreProcessingStrategyInterface``\n\n- ``ArgumentFormattingStrategyInterface``\n\n- ``ArgumentBindingStrategyInterface``\n\n- ``ErrorHandlingStrategyInterface`` (Handles any errors that occur during the Execution phase)\n\n- ``ResultStrategyInterface``\n\n- ``ReturnValueStrategyInterface``\n\nAn illustrative example of how these would be implemented can be seen in the definition of ``Collection.first_item``::\n\n    MethodStrategy(\n        'first_item', # name of the method\n        operator.itemgetter(0), # the Callable object\n        StoreIterableStrategy(), # Result Handling phase\n        ReturnResultStrategy(), # Return Value phase\n        PartialIterableBindingStrategy(), # Argument Binding phase\n        UnformattedArgumentFormattingStrategy(), # Argument Formatting phase\n        PreProcessingStrategy((\n            {'name': 'items', 'args': (), 'kwargs': {}},\n            {'name': 'tuple', 'args': (), 'kwargs': {'store': True}}\n        )), # Pre-Processing phase\n        GetItemErrorHandlingStrategy() # Error handling during Execution phase\n    ),\n\nAll of these interfaces can be implemented in several different ways. The implementations found in the\n``iterable_collections.strategy`` module are only those needed for the base cannon of methods. ``Collection.first_item``\nis a good demonstration of how to leverage Python's builtin functionality. However if the Callable argument needs\ncustom behavior, ``MethodStrategy`` can be extended, as in ``ConcatMethodStrategy``::\n\n    class ConcatMethodStrategy(MethodStrategy):\n        def __init__(\n                self,\n                name,\n                result_strategy,\n                return_strategy,\n                iterable_binding_strategy,\n                argument_formatting_strategy,\n                pre_process_strategy,\n                error_strategy\n        ):\n            super().__init__(\n                name,\n                getattr(self, name),\n                result_strategy,\n                return_strategy,\n                iterable_binding_strategy,\n                argument_formatting_strategy,\n                pre_process_strategy,\n                error_strategy\n            )\n\n        def concat(self, instance, *args):\n            for a in args:\n                if not isinstance(a, Iterable):\n                    raise TypeError('Must an iterable type.')\n                if isinstance(a, (Set, Sequence, MappingView)):\n                    instance.concat_seq(a)\n                if isinstance(a, Mapping):\n                    instance.concat_dict(a)\n                if isinstance(a, Iterator):\n                    instance.concat_iter(a)\n            return instance.iterable\n\n        def concat_dict(self, iterable, other):\n            iterable.update(other)\n            return iterable\n\n        def concat_iter(self, iterable, other):\n            return itertools.chain(iterable, other)\n\n        def concat_seq(self, iterable, other):\n            return operator.concat(iterable, other)\n\n\nDifferent types are concatenated in different ways, so methods are defined for Mappings, Iterators, and Sequences. A\nuniversal method ``concat`` determines which of these methods to call based on the type of each argument. Notice though\nthat the methods are being called on ``instance`` which is the current instance of the ``Collection`` object (i.e.\n``self`` in ``Collection``.). By calling these on the instance, any pre-processing, argument formatting, etc... will\ntake place. This would not happen if these methods were called in this way, ``self.concat_dict(instance.iterable, a)``.\n\n\nHowever to call methods this way, they must have been defined before the ``Collection`` object was instantiated.\n``Collection`` is initialized with an Iterable and a ``StrategyDict``, which is a Mapping of ``str`` method names to\nobjects implementing the ``MethodStrategyInterface``. The included ``StrategyDict`` is created using\n``DefaultMethodStrategyFactory`` defined in ``iterable_collections.factory``. The ``collect`` function creates a factory\nobject and then uses it to create the ``StrategyDict`` injected into ``Collection``. Below is an excerpt of\n``DefaultMethodStrategyFactory``::\n\n    class DefaultMethodStrategyFactory(MethodStrategyFactoryInterface):\n        def create(self):\n            return {s.name: s for s in self.get_strategies()} # Converts the Tuple of MethodStrategyInterface object\n                                                              # into a Dict.\n\n        def get_strategies(self): # Returns a Tuple of MethodStrategyInterface objects\n            return (\n                MethodStrategy(\n                    'all',\n                    builtins.all,\n                    StoreIterableStrategy(),\n                    ReturnResultStrategy(),\n                    PartialIterableBindingStrategy(),\n                    UnformattedArgumentFormattingStrategy(),\n                    PreProcessingStrategy(),\n                    BaseExceptionErrorHandlingStrategy()\n                ),\n                MethodStrategy(\n                    'any',\n                    builtins.any,\n                    StoreIterableStrategy(),\n                    ReturnResultStrategy(),\n                    PartialIterableBindingStrategy(),\n                    UnformattedArgumentFormattingStrategy(),\n                    PreProcessingStrategy(),\n                    BaseExceptionErrorHandlingStrategy()\n                ),\n                ChunksMethodStrategy( # A child class of MethodStrategy that breaks iterables into chunks.\n                    'chunks',\n                    StoreResultStrategy(),\n                    ReturnInstanceStrategy(),\n                    PartialInstanceBindingStrategy(),\n                    UnformattedArgumentFormattingStrategy(),\n                    PreProcessingStrategy(),\n                    BaseExceptionErrorHandlingStrategy()\n                ),\n    ...\n\nFuture\n------\n\nDepending on how this received, future plans may include:\n\n- Extensibility through configurations.\n- Event driven extensibility.\n- Python 2.7 support. (Though not likely unless there is demand.)\n- I don't know... You got any ideas?\n\n\n.. _Martin Fowler's Collection Pipeline pattern: https://martinfowler.com/articles/collection-pipeline/\n.. _Laravel's Collections in PHP: https://laravel.com/docs/5.6/collections\n.. _PyFunctional: https://github.com/EntilZha/PyFunctional\n.. _this Github issue: https://github.com/EntilZha/PyFunctional/issues/108\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alliefitter/iterable_collections", "keywords": "collection,map,filter,pipeline,linq,scala", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "iterable-collections", "package_url": "https://pypi.org/project/iterable-collections/", "platform": "", "project_url": "https://pypi.org/project/iterable-collections/", "project_urls": {"Homepage": "https://github.com/alliefitter/iterable_collections"}, "release_url": "https://pypi.org/project/iterable-collections/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "A collections pipeline tool for iterable objects with support for iteration with `dict.items`", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package is inspired heavily by <a href=\"https://martinfowler.com/articles/collection-pipeline/\" rel=\"nofollow\">Martin Fowler\u2019s Collection Pipeline pattern</a>, and also by my first interaction\nwith this pattern\u2013<a href=\"https://laravel.com/docs/5.6/collections\" rel=\"nofollow\">Laravel\u2019s Collections in PHP</a>. This is meant to be a versatile and extensible implementation of\nthe Collection Pipeline pattern that leverages Python\u2019s builtin functionality to provide a clearer, more legible\nimplementation than usage of builtins alone provides. In other words, this package is born of the belief that this\nis more difficult to decipher:</p>\n<pre>foo = list(filter(lambda y: y &gt; 4, map(lambda x: x * 2, [1, 2, 3, 4])))\n</pre>\n<p>Than this:</p>\n<pre>foo = collect([1, 2, 3, 4]).map(lambda x: x * 2) \\\n    .filter(lambda y: y &gt; 4) \\\n    .list()\n</pre>\n<p><strong>HOWEVER</strong> if you\u2019re only going to be working with Sequences, if you would like to connect directly to a data source,\nif you are concerned with maintaining your data in an immutable chain, or if you prefer the syntax of Linq or Scala\n(and don\u2019t feel like taking the time to implement it yourself with the tools provided in this package), I would highly\nsuggest you use <a href=\"https://github.com/EntilZha/PyFunctional\" rel=\"nofollow\">PyFunctional</a>. It\u2019s a much more mature, more well conceived, and time tested package that provides\nthe same object oriented pipeline interface. Where these packages differ is in their intentions. As stated clearly in\n<a href=\"https://github.com/EntilZha/PyFunctional/issues/108\" rel=\"nofollow\">this Github issue</a>, PyFunctional is built around these concepts:</p>\n<ul>\n<li>Constructing a lineage chain (functions that take an iterable and return one, or actions)</li>\n<li>Applying it to a base collection via the iterator interface, the base collection is also forced to be a list.</li>\n</ul>\n<p>Iterable Collections was made with Dicts and other Mappings in mind\u2013which is not to purport any superiority, just to\nstate they were conceived for different purposes. Because of the desire to work with Mappings, the desire for an easily\nextendable interface, and the desire leverage builtins in a pipeline interface, I decided\nthere was room for a similar package.</p>\n<div id=\"python-2-7-support\">\n<h2>Python 2.7 Support</h2>\n<p>There is currently no support for Python 2.7. That may be addressed in the future, but at the moment it is not a\npriority.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Basic usage of transformational methods:</p>\n<pre>from iterable_collections import collect\n\n\n# map\ncollect([1, 2, 3, 4]).map(lambda x: x + 2) \\\n    .list() # [3, 4, 5, 6]\n\n# filter\ncollect([1, 2, 3, 4]).filter(lambda x: x &gt; 2) \\\n    .list() # [3, 4]\n\n# groupby\ncollect([{'a': 1, 'b': 2}, {'a': 1, 'b': 3}, {'a': 1, 'b': 2}]).sorted(key=lambda x: x['b']) \\\n    .groupby(key=lambda x: x['b'])\n    .map(lambda x: (x[0], list(x[1]))) # We're using map here because the results of groupby are in iterators\n    .list() # [(2, [{'a': 1, 'b': 2}, {'a': 1, 'b': 2}]), (3, [{'a': 1, 'b': 3}])]\n\n# reduce\ncollect([1, 2, 3, 4]).reduce(lambda t, x: t + x) # 10\n\n# flatten\ncollect([[1, 2], [3, 4]]).flatten() \\\n    .list() # [1, 2, 3, 4]\n</pre>\n<p>There are two approaches that can be used with Mappings: the <tt>*_items</tt> and <tt>*_nt_items</tt> methods, such as\n<tt>map_items</tt> and <tt>map_nt_items</tt>. The <tt>*_items</tt> methods implicitly call <tt>dict.items</tt> on the\n<tt>Collection.iterable</tt> property which results in a Mapping View containing key value pairs. These methods accept a two\nargument function instead of the usual one argument function used by <tt>map</tt>:</p>\n<pre>collect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).map_items(lambda k, v: (k, v + 2)) \\\n    .dict() # {'a': 3, 'b': 4, 'c': 5, 'd': 6}\n</pre>\n<p>Also available are the <tt>*_nt_items</tt> methods. These methods also implicitly call <tt>dict.items</tt>, but instead of\nspreading the keys and values into two arguments, they create a <tt>namedtuple</tt> that has <tt>key</tt> and <tt>value</tt>\nattributes:</p>\n<pre>collect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).map_nt_items(lambda x: (x.key, x.value + 2)) \\\n    .dict() # {'a': 3, 'b': 4, 'c': 5, 'd': 6}\n</pre>\n<p>There <tt>*_items</tt> and <tt>*_nt_items</tt> available for the transformational methods: filter, map, and reduce. Additionally\nthe <tt>first</tt> and <tt>last</tt> methods have <tt>*_items</tt> and <tt>*_nt_items</tt> versions:</p>\n<pre># first\ncollect([1, 2, 3, 4]).first() # 1\n\n# last\ncollect([1, 2, 3, 4]).last() # 4\n\n# first_item\ncollect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).first_item() # ('a', 1)\n\n# last_item\ncollect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).last_item() # ('d', 4)\n\n# first_nt_item\ncollect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).first_nt_item() # DictItem(key='a', value=1)\n\n# last_nt_item\ncollect({'a': 1, 'b': 2, 'c': 3, 'd': 4}).last_nt_item() # DictItem(key='d', value=4)\n</pre>\n</div>\n<div id=\"extensibility\">\n<h2>Extensibility</h2>\n<p>Each method on the <tt>Collection</tt> object is defined by a <tt>MethodStrategy</tt>. These objects utilize a Callable object\nand a series of other strategies to compose all the functionality encapsulated by a method. As defined in the\n<tt>MethodStrategy</tt> class, the process of encapsulating the functionality of a method can be characterized with six\nphases:</p>\n<p>1. <strong>Pre-Processing:</strong> A series of operations are performed on the <tt>Collection.iterable</tt> property. Typically\n<tt>iterable</tt> is converted into some desired format or type.</p>\n<p>2. <strong>Argument Formatting:</strong> Format the arguments passed to the method. Also in this phase, typically arguments are\nformatted into some desired format or type.</p>\n<ol>\n<li><strong>Argument Binding:</strong> Bind the arguments to desired positions in the Callable\u2019s signature.</li>\n<li><strong>Execution:</strong> The Callable object is called, performing the core functionality of the method\u2013may result in errors.</li>\n</ol>\n<p>5. <strong>Result Handling:</strong> Determine what should be done with the result of the Callable. Basic behavior is either storing\nthe result to the <tt>Collection.iterable</tt> property or preserving it\u2019s original value.</p>\n<p>6. <strong>Return Value:</strong> Determine what value should be returned from the method. Basic behavior is either the result of\nthe Callable or the current <tt>Collection</tt> instance.</p>\n<p>In order to determine the behaviors invoked in each of these phases, <tt>MethodStrategy</tt> is initialized with the method\u2019s\nname as a <tt>str</tt>, a Callable object, and a number of objects that implement interfaces which abstract the various\nphases.</p>\n<ul>\n<li><tt>PreProcessingStrategyInterface</tt></li>\n<li><tt>ArgumentFormattingStrategyInterface</tt></li>\n<li><tt>ArgumentBindingStrategyInterface</tt></li>\n<li><tt>ErrorHandlingStrategyInterface</tt> (Handles any errors that occur during the Execution phase)</li>\n<li><tt>ResultStrategyInterface</tt></li>\n<li><tt>ReturnValueStrategyInterface</tt></li>\n</ul>\n<p>An illustrative example of how these would be implemented can be seen in the definition of <tt>Collection.first_item</tt>:</p>\n<pre>MethodStrategy(\n    'first_item', # name of the method\n    operator.itemgetter(0), # the Callable object\n    StoreIterableStrategy(), # Result Handling phase\n    ReturnResultStrategy(), # Return Value phase\n    PartialIterableBindingStrategy(), # Argument Binding phase\n    UnformattedArgumentFormattingStrategy(), # Argument Formatting phase\n    PreProcessingStrategy((\n        {'name': 'items', 'args': (), 'kwargs': {}},\n        {'name': 'tuple', 'args': (), 'kwargs': {'store': True}}\n    )), # Pre-Processing phase\n    GetItemErrorHandlingStrategy() # Error handling during Execution phase\n),\n</pre>\n<p>All of these interfaces can be implemented in several different ways. The implementations found in the\n<tt>iterable_collections.strategy</tt> module are only those needed for the base cannon of methods. <tt>Collection.first_item</tt>\nis a good demonstration of how to leverage Python\u2019s builtin functionality. However if the Callable argument needs\ncustom behavior, <tt>MethodStrategy</tt> can be extended, as in <tt>ConcatMethodStrategy</tt>:</p>\n<pre>class ConcatMethodStrategy(MethodStrategy):\n    def __init__(\n            self,\n            name,\n            result_strategy,\n            return_strategy,\n            iterable_binding_strategy,\n            argument_formatting_strategy,\n            pre_process_strategy,\n            error_strategy\n    ):\n        super().__init__(\n            name,\n            getattr(self, name),\n            result_strategy,\n            return_strategy,\n            iterable_binding_strategy,\n            argument_formatting_strategy,\n            pre_process_strategy,\n            error_strategy\n        )\n\n    def concat(self, instance, *args):\n        for a in args:\n            if not isinstance(a, Iterable):\n                raise TypeError('Must an iterable type.')\n            if isinstance(a, (Set, Sequence, MappingView)):\n                instance.concat_seq(a)\n            if isinstance(a, Mapping):\n                instance.concat_dict(a)\n            if isinstance(a, Iterator):\n                instance.concat_iter(a)\n        return instance.iterable\n\n    def concat_dict(self, iterable, other):\n        iterable.update(other)\n        return iterable\n\n    def concat_iter(self, iterable, other):\n        return itertools.chain(iterable, other)\n\n    def concat_seq(self, iterable, other):\n        return operator.concat(iterable, other)\n</pre>\n<p>Different types are concatenated in different ways, so methods are defined for Mappings, Iterators, and Sequences. A\nuniversal method <tt>concat</tt> determines which of these methods to call based on the type of each argument. Notice though\nthat the methods are being called on <tt>instance</tt> which is the current instance of the <tt>Collection</tt> object (i.e.\n<tt>self</tt> in <tt>Collection</tt>.). By calling these on the instance, any pre-processing, argument formatting, etc\u2026 will\ntake place. This would not happen if these methods were called in this way, <tt>self.concat_dict(instance.iterable, a)</tt>.</p>\n<p>However to call methods this way, they must have been defined before the <tt>Collection</tt> object was instantiated.\n<tt>Collection</tt> is initialized with an Iterable and a <tt>StrategyDict</tt>, which is a Mapping of <tt>str</tt> method names to\nobjects implementing the <tt>MethodStrategyInterface</tt>. The included <tt>StrategyDict</tt> is created using\n<tt>DefaultMethodStrategyFactory</tt> defined in <tt>iterable_collections.factory</tt>. The <tt>collect</tt> function creates a factory\nobject and then uses it to create the <tt>StrategyDict</tt> injected into <tt>Collection</tt>. Below is an excerpt of\n<tt>DefaultMethodStrategyFactory</tt>:</p>\n<pre>class DefaultMethodStrategyFactory(MethodStrategyFactoryInterface):\n    def create(self):\n        return {s.name: s for s in self.get_strategies()} # Converts the Tuple of MethodStrategyInterface object\n                                                          # into a Dict.\n\n    def get_strategies(self): # Returns a Tuple of MethodStrategyInterface objects\n        return (\n            MethodStrategy(\n                'all',\n                builtins.all,\n                StoreIterableStrategy(),\n                ReturnResultStrategy(),\n                PartialIterableBindingStrategy(),\n                UnformattedArgumentFormattingStrategy(),\n                PreProcessingStrategy(),\n                BaseExceptionErrorHandlingStrategy()\n            ),\n            MethodStrategy(\n                'any',\n                builtins.any,\n                StoreIterableStrategy(),\n                ReturnResultStrategy(),\n                PartialIterableBindingStrategy(),\n                UnformattedArgumentFormattingStrategy(),\n                PreProcessingStrategy(),\n                BaseExceptionErrorHandlingStrategy()\n            ),\n            ChunksMethodStrategy( # A child class of MethodStrategy that breaks iterables into chunks.\n                'chunks',\n                StoreResultStrategy(),\n                ReturnInstanceStrategy(),\n                PartialInstanceBindingStrategy(),\n                UnformattedArgumentFormattingStrategy(),\n                PreProcessingStrategy(),\n                BaseExceptionErrorHandlingStrategy()\n            ),\n...\n</pre>\n</div>\n<div id=\"future\">\n<h2>Future</h2>\n<p>Depending on how this received, future plans may include:</p>\n<ul>\n<li>Extensibility through configurations.</li>\n<li>Event driven extensibility.</li>\n<li>Python 2.7 support. (Though not likely unless there is demand.)</li>\n<li>I don\u2019t know\u2026 You got any ideas?</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4048510, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "8103083596943a3c6f8edf4206cc39fa", "sha256": "0c112fb1c0c1b2dd0f4abaab2c09a06e18709047e33a307a9cdd9c0c7c715b72"}, "downloads": -1, "filename": "iterable_collections-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8103083596943a3c6f8edf4206cc39fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21374, "upload_time": "2018-06-03T19:31:47", "upload_time_iso_8601": "2018-06-03T19:31:47.030509Z", "url": "https://files.pythonhosted.org/packages/54/3f/129f5b3f958c4d87375bf6cfa5dc17f646e88202af7b2399396d375750be/iterable_collections-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58d80422677461d542c8d543e19261b7", "sha256": "08779bcfc2ec04e0b16f3040815f54d4196b7d373a31a4579d78cfdbdeaf882a"}, "downloads": -1, "filename": "iterable_collections-0.1.4.tar.gz", "has_sig": false, "md5_digest": "58d80422677461d542c8d543e19261b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22004, "upload_time": "2018-06-03T19:31:48", "upload_time_iso_8601": "2018-06-03T19:31:48.228020Z", "url": "https://files.pythonhosted.org/packages/f9/a8/7e333e0724f8a5fdb80f0c02b3aee6ada107b8da6099c075892f98ee3913/iterable_collections-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "5e1b9d4e8528cb59db4a00abc68b53e3", "sha256": "998c5b2be95c7edc20df6aa26b30ab7388a618969af889d238f72df96076d904"}, "downloads": -1, "filename": "iterable_collections-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "5e1b9d4e8528cb59db4a00abc68b53e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21377, "upload_time": "2018-06-03T19:33:23", "upload_time_iso_8601": "2018-06-03T19:33:23.010831Z", "url": "https://files.pythonhosted.org/packages/fa/2a/5a4ac8b63d82d009364d88129ba44836a7d20a04fc633865ae521e645d3f/iterable_collections-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5da5a218d8b2121c1053d511bf7703a0", "sha256": "b5e408c57786e2d66856a3bf1738b54ce3f8c3574224cb6429768bfe0a133ac3"}, "downloads": -1, "filename": "iterable_collections-0.1.5.tar.gz", "has_sig": false, "md5_digest": "5da5a218d8b2121c1053d511bf7703a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22003, "upload_time": "2018-06-03T19:33:24", "upload_time_iso_8601": "2018-06-03T19:33:24.323625Z", "url": "https://files.pythonhosted.org/packages/24/b6/a6fdf3044ee1494cf6f40d55a7056ca896ed3d3ca31a2da95de5dde0f71c/iterable_collections-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "9def292c6b2d7b5292f3cd0ae2677230", "sha256": "294efe92462572236b96f73bd8dc343bd02cf8bbc8d816be6ba7735f00fe3b24"}, "downloads": -1, "filename": "iterable_collections-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "9def292c6b2d7b5292f3cd0ae2677230", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21379, "upload_time": "2018-07-10T20:22:56", "upload_time_iso_8601": "2018-07-10T20:22:56.480806Z", "url": "https://files.pythonhosted.org/packages/d2/f0/10958ab18974f54ac44a4e52637c71f7249cffd7403ecd0a7c9f87993c3d/iterable_collections-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f3819d384f71337788408f31c64a5a4", "sha256": "dd5d32920571963dacd9ed6ebb6dca9508ce5b3eaf2dc69a0463eb2da3110f7c"}, "downloads": -1, "filename": "iterable_collections-0.1.6.tar.gz", "has_sig": false, "md5_digest": "2f3819d384f71337788408f31c64a5a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22008, "upload_time": "2018-07-10T20:22:58", "upload_time_iso_8601": "2018-07-10T20:22:58.367382Z", "url": "https://files.pythonhosted.org/packages/4c/1a/de8c07d918fb7aa8b77abc0e80306124b26ea7010def33a2e196c49044e5/iterable_collections-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9def292c6b2d7b5292f3cd0ae2677230", "sha256": "294efe92462572236b96f73bd8dc343bd02cf8bbc8d816be6ba7735f00fe3b24"}, "downloads": -1, "filename": "iterable_collections-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "9def292c6b2d7b5292f3cd0ae2677230", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21379, "upload_time": "2018-07-10T20:22:56", "upload_time_iso_8601": "2018-07-10T20:22:56.480806Z", "url": "https://files.pythonhosted.org/packages/d2/f0/10958ab18974f54ac44a4e52637c71f7249cffd7403ecd0a7c9f87993c3d/iterable_collections-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f3819d384f71337788408f31c64a5a4", "sha256": "dd5d32920571963dacd9ed6ebb6dca9508ce5b3eaf2dc69a0463eb2da3110f7c"}, "downloads": -1, "filename": "iterable_collections-0.1.6.tar.gz", "has_sig": false, "md5_digest": "2f3819d384f71337788408f31c64a5a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22008, "upload_time": "2018-07-10T20:22:58", "upload_time_iso_8601": "2018-07-10T20:22:58.367382Z", "url": "https://files.pythonhosted.org/packages/4c/1a/de8c07d918fb7aa8b77abc0e80306124b26ea7010def33a2e196c49044e5/iterable_collections-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:49 2020"}