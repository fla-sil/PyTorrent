{"info": {"author": "Jo\u00e3o Pereira", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Logging"], "description": "<h1 align=\"center\" style=\"border-bottom: none;\">GELF Formatter</h1>\n<h3 align=\"center\">\n    <a href=\"http://docs.graylog.org/en/latest/pages/gelf.html\">Graylog Extended Log Format (GELF)</a> formatter for the<br>Python standard library <a href=\"https://docs.python.org/3/library/logging.html\">logging</a> module\n</h3>\n<p align=\"center\">\n    <a href=\"https://github.com/joaodrp/gelf-formatter/releases/latest\">\n        <img alt=\"Release\" src=\"https://img.shields.io/github/release/joaodrp/gelf-formatter.svg\">\n    </a>\n    <a href=\"https://pypi.org/project/gelf-formatter/\">\n        <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/gelf-formatter.svg\">\n    </a>\n    <a href=\"https://pypi.org/project/gelf-formatter/\">\n        <img alt=\"Python versions\" src=\"https://img.shields.io/pypi/pyversions/gelf-formatter.svg\">\n    </a>\n    <a href=\"https://travis-ci.com/joaodrp/gelf-formatter\">\n        <img alt=\"Travis\" src=\"https://img.shields.io/travis/com/joaodrp/gelf-formatter.svg\">\n    </a>\n    <a href=\"https://codecov.io/gh/joaodrp/gelf-formatter\">\n        <img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/github/joaodrp/gelf-formatter/master.svg\">\n    </a>\n    <a href=\"LICENSE\">\n        <img alt=\"Software License\" src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg\">\n    </a>\n    <a href=\"https://semver.org/\">\n        <img alt=\"SemVer\" src=\"https://img.shields.io/badge/semver-2.0.0-blue.svg\">\n    </a>\n    <a href=\"https://conventionalcommits.org\">\n        <img alt=\"Conventional Commits\" src=\"https://img.shields.io/badge/conventional%20commits-1.0.0-yellow.svg\">\n    </a>\n    <a href=\"https://github.com/ambv/black\">\n        <img alt=\"Code style\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\">\n    </a>\n    <a href=\"https://pepy.tech/project/gelf-formatter\">\n        <img alt=\"Downloads\" src=\"https://pepy.tech/badge/gelf-formatter\">\n    </a>\n    <a href=\"https://github.com/joaodrp/gelf-formatter/graphs/contributors\">\n        <img alt=\"Contributors\" src=\"https://img.shields.io/github/contributors/joaodrp/gelf-formatter.svg\">\n    </a>\n    <a href=\"https://saythanks.io/to/joaodrp\">\n        <img alt=\"SayThanks.io\" src=\"https://img.shields.io/badge/say%20thanks-%E2%98%BC-1EAEDB.svg\">\n    </a>\n</p>\n\n---\n\n## Motivation\n\nThere are several packages available providing *handlers* for the standard library logging module that can send application logs to [Graylog](https://www.graylog.org/) by TCP/UDP/HTTP ([py-gelf](https://pypi.org/project/pygelf/) is a good example). Although these can be useful, it's not ideal to make an application performance dependent on network requests just for the purpose of delivering logs.\n\nAlternatively, one can simply log to a file or `stdout` and have a collector (like [Fluentd](https://www.fluentd.org/)) processing and sending those logs *asynchronously* to a remote server (and not just to Graylog, as GELF can be used as a generic log format), which is a common pattern for containerized applications. In a scenario like this all we need is a GELF logging *formatter*.\n\n## Features\n\n- Support for arbitrary additional fields;\n- Support for including reserved [`logging.LogRecord`](https://docs.python.org/3/library/logging.html#logrecord-attributes) attributes as additional fields;\n- Exceptions detection with traceback formatting;\n- Zero dependencies and tiny footprint.\n\n## Installation\n\n### With pip\n\n```text\n$ pip install gelf-formatter\n```\n\n### From source\n\n```text\n$ python setup.py install\n```\n\n## Usage\n\nSimply create a `gelfformatter.GelfFormatter` instance and pass it as argument to [`logging.Handler.setFormatter`](https://docs.python.org/3/library/logging.html#logging.Handler.setFormatter):\n\n```python\nimport sys\nimport logging\n\nfrom gelfformatter import GelfFormatter\n\nformatter = GelfFormatter()\n\nhandler = logging.StreamHandler(sys.stdout)\nhandler.setFormatter(formatter)\n```\n\nApply it globally with [`logging.basicConfig`](https://docs.python.org/3/library/logging.html#logging.basicConfig) to automatically format log records from third-party packages as well:\n\n```python\nlogging.basicConfig(level=logging.DEBUG, handlers=[handler])\n```\n\nAlternatively, you can configure a local [`logging.Logger`](https://docs.python.org/3/library/logging.html#logging.Logger) instance through [`logging.Logger.addHandler`](https://docs.python.org/3/library/logging.html#logging.Logger.addHandler):\n\n```python\nlogger = logging.getLogger('my-app')\nlogger.addHandler(handler)\n```\n\nThat's it. You can now use the logging module as usual, all records will be formatted as GELF messages.\n\n### Standard Fields\n\nThe formatter will output all (non-deprecated) fields described in the [GELF Payload Specification (version 1.1)](http://docs.graylog.org/en/latest/pages/gelf.html#gelf-payload-specification):\n\n- `version`: String, always set to `1.1`;\n\n- `host`: String, the output of [`socket.gethostname`](https://docs.python.org/3/library/socket.html#socket.gethostname) at initialization;\n- `short_message`: String, log record message;\n- `full_message` (*optional*): String, formatted exception traceback (if any);\n- `timestamp`: Number, time in seconds since the epoch as a floating point;\n- `level`: Integer, *syslog* severity level.\n\nNone of these fields can be ignored, renamed or overridden.\n\n#### Example\n\n```python\nlogging.info(\"Some message\")\n```\n\n```text\n{\"version\":\"1.1\",\"host\":\"my-server\",\"short_message\":\"Some message\",\"timestamp\":1557342545.1067393,\"level\":6}\n```\n\n#### Exceptions\n\nThe `full_message` field is used to store the traceback of exceptions. You just need to log them with [`logging.exception`](https://docs.python.org/3/library/logging.html#logging.exception).\n\n##### Example\n\n```python\nimport urllib.request\n\nreq = urllib.request.Request('http://www.pythonnn.org')\ntry:\n    urllib.request.urlopen(req)\nexcept urllib.error.URLError as e:\n    logging.exception(e.reason)\n```\n\n```text\n{\"version\": \"1.1\", \"short_message\": \"[Errno -2] Name or service not known\", \"timestamp\": 1557342714.0695107, \"level\": 3, \"host\": \"my-server\", \"full_message\": \"Traceback (most recent call last):\\n  ...(truncated)... raise URLError(err)\\nurllib.error.URLError: <urlopen error [Errno -2] Name or service not known>\"}\n```\n\n### Additional Fields\n\nThe GELF specification allows arbitrary additional fields, with keys prefixed with an underscore.\n\nTo include additional fields use the standard logging `extra` keyword. Keys will be automatically prefixed with an underscore (if not already).\n\n#### Example\n\n```python\nlogging.info(\"request received\", extra={\"path\": \"/orders/1\", \"method\": \"GET\"})\n```\n\n```text\n{\"version\": \"1.1\", \"short_message\": \"request received\", \"timestamp\": 1557343604.5892842, \"level\": 6, \"host\": \"my-server\", \"_path\": \"/orders/1\", \"_method\": \"GET\"}\n```\n\n#### Reserved Fields\n\nBy default the formatter ignores all [`logging.LogRecord` attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes). You can however opt to include them as additional fields. This can be used to display useful information like the current module, filename, line number, etc.\n\nTo do so, simply pass a list of `LogRecord` attribute names as value of the `allowed_reserved_attrs` keyword when initializing a `GelfFormatter`. You can also modify the `allowed_reserved_attrs` instance variable of an already initialized formatter.\n\n##### Example\n\n```python\nattrs = [\"lineno\", \"module\", \"filename\"]\n\nformatter = GelfFormatter(allowed_reserved_attrs=attrs)\n# or\nformatter.allowed_reserved_attrs = attrs\n\nlogging.debug(\"starting application...\")\n```\n\n```text\n{\"version\": \"1.1\", \"short_message\": \"starting application...\", \"timestamp\": 1557346554.989846, \"level\": 6, \"host\": \"my-server\", \"_lineno\": 175, \"_module\": \"myapp\", \"_filename\": \"app.py\"}\n```\n\nYou can optionally customize the name of these additional fields using a [`logging.Filter`](https://docs.python.org/3/library/logging.html#filter-objects) (see below).\n\nSimilarily, you can choose to ignore additional attributes passed via the `extra` keyword argument. This can be usefull to e.g. not log keywords named `secret` or `password`.\n\nTo do so, pass a list of names to the `ignored_attrs` keyword when initializing a `GelfFormatter`. You can also modify the `ignored_attrs` instance variable of an already initialized formatter.\n\n##### Example\n\nBut be aware: nested fields will be printed! Only the root level of keywords is filtered by the `ignored_attrs`.\n\n```python\nattrs = [\"secret\", \"password\"]\n\nformatter = GelfFormatter(ignored_attrs=attrs)\n# or\nformatter.ignored_attrs = attrs\n\nlogging.debug(\"app config\", extra={\"connection\": \"local\", \"secret\": \"verySecret!\", \"mysql\": {\"user\": \"test\", \"password\": \"will_be_logged\"}})\n```\n\n```text\n{\"version\": \"1.1\", \"short_message\": \"app config\", \"timestamp\": 1557346554.989846, \"level\": 6, \"host\": \"my-server\", \"_connection\": \"local\", \"_mysql\": {\"user\": \"test\", \"password\": \"will_be_logged\"}}\n```\n\n\n#### Context Fields\n\nHaving the ability to define a set of additional fields once and have them included in all log messages can be useful to avoid repetitive `extra` key/value pairs and enable contextual logging.\n\nPython's logging module provides several options to add context to a logger, among which we highlight the  [`logging.LoggerAdapter`](https://docs.python.org/3/library/logging.html#loggeradapter-objects) and [`logging.Filter`](https://docs.python.org/3/library/logging.html#filter-objects).\n\nBetween these we recommend a `logging.Filter`, which is simpler and can be attached directly to a [`logging.Handler`](https://docs.python.org/3/library/logging.html#handler-objects). A `logging.Filter` can therefore be used locally (on a [`logging.Logger`](https://docs.python.org/3/library/logging.html#logger-objects)) or globally (through `logging.basicConfig`). If you opt for a `LoggerAdapter` you'll need a `logging.Logger` to wrap.\n\nYou can also use a `logging.Filter` to reuse/rename any of the reserved `logging.LogRecord` attributes.\n\n##### Example\n\n```python\nclass ContextFilter(logging.Filter):\n    def filter(self, record):\n        # Add any number of arbitrary additional fields\n        record.app = \"my-app\"\n        record.app_version = \"1.2.3\"\n        record.environment = os.environ.get(\"APP_ENV\")\n\n        # Reuse any reserved `logging.LogRecord` attributes\n        record.file = record.filename\n        record.line = record.lineno\n        return True\n\n\nformatter = GelfFormatter()\n\nhandler = logging.StreamHandler(sys.stdout)\n\nhandler.setFormatter(formatter)\nhandler.addFilter(ContextFilter())\n\nlogging.basicConfig(level=logging.DEBUG, handlers=[handler])\n\nlogging.info(\"hi\", extra=dict(foo=\"bar\"))\n```\n\n```text\n{\"version\": \"1.1\", \"short_message\": \"hi\", \"timestamp\": 1557431642.189755, \"level\": 6, \"host\": \"my-server\", \"_foo\": \"bar\", \"_app\": \"my-app\", \"_app_version\": \"1.2.3\", \"_environment\": \"development\", \"_file\": \"app.py\", \"_line\": 159}\n```\n\n## Pretty-Print\n\nLooking for a GELF log pretty-printer? If so, have a look at [gelf-pretty](https://github.com/joaodrp/gelf-pretty) :fire:\n\n## Contributions\n\nThis project adheres to the Contributor Covenant [code of conduct](CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code. Please refer to our [contributing guide](CONTRIBUTING.md) for further information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joaodrp/gelf-formatter", "keywords": "gelf,graylog,logger,logging,log,json", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gelf-formatter", "package_url": "https://pypi.org/project/gelf-formatter/", "platform": "", "project_url": "https://pypi.org/project/gelf-formatter/", "project_urls": {"Homepage": "https://github.com/joaodrp/gelf-formatter"}, "release_url": "https://pypi.org/project/gelf-formatter/0.2.0/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "GELF formatter for the Python standard library logging module.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GELF Formatter</h1>\n<h3>\n    <a href=\"http://docs.graylog.org/en/latest/pages/gelf.html\" rel=\"nofollow\">Graylog Extended Log Format (GELF)</a> formatter for the<br>Python standard library <a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\">logging</a> module\n</h3>\n<p align=\"center\">\n    <a href=\"https://github.com/joaodrp/gelf-formatter/releases/latest\" rel=\"nofollow\">\n        <img alt=\"Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/186aeaab38fd3ae5d33d4c18ea3cf95a01f4b887/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6a6f616f6472702f67656c662d666f726d61747465722e737667\">\n    </a>\n    <a href=\"https://pypi.org/project/gelf-formatter/\" rel=\"nofollow\">\n        <img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef3e9018eb3a064d8a3a2d6b04d0b20028f0e49c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f67656c662d666f726d61747465722e737667\">\n    </a>\n    <a href=\"https://pypi.org/project/gelf-formatter/\" rel=\"nofollow\">\n        <img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d434a3f31a9ae5cdc13c2df38abed6009ce01da1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f67656c662d666f726d61747465722e737667\">\n    </a>\n    <a href=\"https://travis-ci.com/joaodrp/gelf-formatter\" rel=\"nofollow\">\n        <img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01c55e1adaaddde7bd9375d47ceb29984fd58c1b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6a6f616f6472702f67656c662d666f726d61747465722e737667\">\n    </a>\n    <a href=\"https://codecov.io/gh/joaodrp/gelf-formatter\" rel=\"nofollow\">\n        <img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50b1fbbad7899b998f80c1db20decacd4cd3edc7/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6a6f616f6472702f67656c662d666f726d61747465722f6d61737465722e737667\">\n    </a>\n    <a href=\"LICENSE\" rel=\"nofollow\">\n        <img alt=\"Software License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28c5b39bdf2da9ce3c367dcfe49e46905cf7d242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667\">\n    </a>\n    <a href=\"https://semver.org/\" rel=\"nofollow\">\n        <img alt=\"SemVer\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44ce194fe085fc778c027c669528054e95c33de2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73656d7665722d322e302e302d626c75652e737667\">\n    </a>\n    <a href=\"https://conventionalcommits.org\" rel=\"nofollow\">\n        <img alt=\"Conventional Commits\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4646e3f5a486b4f77ec6d524812c8df7c7a368db/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e76656e74696f6e616c253230636f6d6d6974732d312e302e302d79656c6c6f772e737667\">\n    </a>\n    <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">\n        <img alt=\"Code style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\">\n    </a>\n    <a href=\"https://pepy.tech/project/gelf-formatter\" rel=\"nofollow\">\n        <img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3482ff8012dc168b2d0a0c10efe1ba96b0a78139/68747470733a2f2f706570792e746563682f62616467652f67656c662d666f726d6174746572\">\n    </a>\n    <a href=\"https://github.com/joaodrp/gelf-formatter/graphs/contributors\" rel=\"nofollow\">\n        <img alt=\"Contributors\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6125570b008ce46f4ee45d16771402ce9a410acd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f6a6f616f6472702f67656c662d666f726d61747465722e737667\">\n    </a>\n    <a href=\"https://saythanks.io/to/joaodrp\" rel=\"nofollow\">\n        <img alt=\"SayThanks.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a011fb04b64683c128fb648f399c6e81fa0f69c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7361792532307468616e6b732d2545322539382542432d3145414544422e737667\">\n    </a>\n</p>\n<hr>\n<h2>Motivation</h2>\n<p>There are several packages available providing <em>handlers</em> for the standard library logging module that can send application logs to <a href=\"https://www.graylog.org/\" rel=\"nofollow\">Graylog</a> by TCP/UDP/HTTP (<a href=\"https://pypi.org/project/pygelf/\" rel=\"nofollow\">py-gelf</a> is a good example). Although these can be useful, it's not ideal to make an application performance dependent on network requests just for the purpose of delivering logs.</p>\n<p>Alternatively, one can simply log to a file or <code>stdout</code> and have a collector (like <a href=\"https://www.fluentd.org/\" rel=\"nofollow\">Fluentd</a>) processing and sending those logs <em>asynchronously</em> to a remote server (and not just to Graylog, as GELF can be used as a generic log format), which is a common pattern for containerized applications. In a scenario like this all we need is a GELF logging <em>formatter</em>.</p>\n<h2>Features</h2>\n<ul>\n<li>Support for arbitrary additional fields;</li>\n<li>Support for including reserved <a href=\"https://docs.python.org/3/library/logging.html#logrecord-attributes\" rel=\"nofollow\"><code>logging.LogRecord</code></a> attributes as additional fields;</li>\n<li>Exceptions detection with traceback formatting;</li>\n<li>Zero dependencies and tiny footprint.</li>\n</ul>\n<h2>Installation</h2>\n<h3>With pip</h3>\n<pre>$ pip install gelf-formatter\n</pre>\n<h3>From source</h3>\n<pre>$ python setup.py install\n</pre>\n<h2>Usage</h2>\n<p>Simply create a <code>gelfformatter.GelfFormatter</code> instance and pass it as argument to <a href=\"https://docs.python.org/3/library/logging.html#logging.Handler.setFormatter\" rel=\"nofollow\"><code>logging.Handler.setFormatter</code></a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gelfformatter</span> <span class=\"kn\">import</span> <span class=\"n\">GelfFormatter</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">GelfFormatter</span><span class=\"p\">()</span>\n\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n</pre>\n<p>Apply it globally with <a href=\"https://docs.python.org/3/library/logging.html#logging.basicConfig\" rel=\"nofollow\"><code>logging.basicConfig</code></a> to automatically format log records from third-party packages as well:</p>\n<pre><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">handlers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">handler</span><span class=\"p\">])</span>\n</pre>\n<p>Alternatively, you can configure a local <a href=\"https://docs.python.org/3/library/logging.html#logging.Logger\" rel=\"nofollow\"><code>logging.Logger</code></a> instance through <a href=\"https://docs.python.org/3/library/logging.html#logging.Logger.addHandler\" rel=\"nofollow\"><code>logging.Logger.addHandler</code></a>:</p>\n<pre><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n</pre>\n<p>That's it. You can now use the logging module as usual, all records will be formatted as GELF messages.</p>\n<h3>Standard Fields</h3>\n<p>The formatter will output all (non-deprecated) fields described in the <a href=\"http://docs.graylog.org/en/latest/pages/gelf.html#gelf-payload-specification\" rel=\"nofollow\">GELF Payload Specification (version 1.1)</a>:</p>\n<ul>\n<li>\n<p><code>version</code>: String, always set to <code>1.1</code>;</p>\n</li>\n<li>\n<p><code>host</code>: String, the output of <a href=\"https://docs.python.org/3/library/socket.html#socket.gethostname\" rel=\"nofollow\"><code>socket.gethostname</code></a> at initialization;</p>\n</li>\n<li>\n<p><code>short_message</code>: String, log record message;</p>\n</li>\n<li>\n<p><code>full_message</code> (<em>optional</em>): String, formatted exception traceback (if any);</p>\n</li>\n<li>\n<p><code>timestamp</code>: Number, time in seconds since the epoch as a floating point;</p>\n</li>\n<li>\n<p><code>level</code>: Integer, <em>syslog</em> severity level.</p>\n</li>\n</ul>\n<p>None of these fields can be ignored, renamed or overridden.</p>\n<h4>Example</h4>\n<pre><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Some message\"</span><span class=\"p\">)</span>\n</pre>\n<pre>{\"version\":\"1.1\",\"host\":\"my-server\",\"short_message\":\"Some message\",\"timestamp\":1557342545.1067393,\"level\":6}\n</pre>\n<h4>Exceptions</h4>\n<p>The <code>full_message</code> field is used to store the traceback of exceptions. You just need to log them with <a href=\"https://docs.python.org/3/library/logging.html#logging.exception\" rel=\"nofollow\"><code>logging.exception</code></a>.</p>\n<h5>Example</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">urllib.request</span>\n\n<span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"s1\">'http://www.pythonnn.org'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">URLError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">reason</span><span class=\"p\">)</span>\n</pre>\n<pre>{\"version\": \"1.1\", \"short_message\": \"[Errno -2] Name or service not known\", \"timestamp\": 1557342714.0695107, \"level\": 3, \"host\": \"my-server\", \"full_message\": \"Traceback (most recent call last):\\n  ...(truncated)... raise URLError(err)\\nurllib.error.URLError: &lt;urlopen error [Errno -2] Name or service not known&gt;\"}\n</pre>\n<h3>Additional Fields</h3>\n<p>The GELF specification allows arbitrary additional fields, with keys prefixed with an underscore.</p>\n<p>To include additional fields use the standard logging <code>extra</code> keyword. Keys will be automatically prefixed with an underscore (if not already).</p>\n<h4>Example</h4>\n<pre><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"request received\"</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/orders/1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"GET\"</span><span class=\"p\">})</span>\n</pre>\n<pre>{\"version\": \"1.1\", \"short_message\": \"request received\", \"timestamp\": 1557343604.5892842, \"level\": 6, \"host\": \"my-server\", \"_path\": \"/orders/1\", \"_method\": \"GET\"}\n</pre>\n<h4>Reserved Fields</h4>\n<p>By default the formatter ignores all <a href=\"https://docs.python.org/3/library/logging.html#logrecord-attributes\" rel=\"nofollow\"><code>logging.LogRecord</code> attributes</a>. You can however opt to include them as additional fields. This can be used to display useful information like the current module, filename, line number, etc.</p>\n<p>To do so, simply pass a list of <code>LogRecord</code> attribute names as value of the <code>allowed_reserved_attrs</code> keyword when initializing a <code>GelfFormatter</code>. You can also modify the <code>allowed_reserved_attrs</code> instance variable of an already initialized formatter.</p>\n<h5>Example</h5>\n<pre><span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"lineno\"</span><span class=\"p\">,</span> <span class=\"s2\">\"module\"</span><span class=\"p\">,</span> <span class=\"s2\">\"filename\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">GelfFormatter</span><span class=\"p\">(</span><span class=\"n\">allowed_reserved_attrs</span><span class=\"o\">=</span><span class=\"n\">attrs</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"n\">allowed_reserved_attrs</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"starting application...\"</span><span class=\"p\">)</span>\n</pre>\n<pre>{\"version\": \"1.1\", \"short_message\": \"starting application...\", \"timestamp\": 1557346554.989846, \"level\": 6, \"host\": \"my-server\", \"_lineno\": 175, \"_module\": \"myapp\", \"_filename\": \"app.py\"}\n</pre>\n<p>You can optionally customize the name of these additional fields using a <a href=\"https://docs.python.org/3/library/logging.html#filter-objects\" rel=\"nofollow\"><code>logging.Filter</code></a> (see below).</p>\n<p>Similarily, you can choose to ignore additional attributes passed via the <code>extra</code> keyword argument. This can be usefull to e.g. not log keywords named <code>secret</code> or <code>password</code>.</p>\n<p>To do so, pass a list of names to the <code>ignored_attrs</code> keyword when initializing a <code>GelfFormatter</code>. You can also modify the <code>ignored_attrs</code> instance variable of an already initialized formatter.</p>\n<h5>Example</h5>\n<p>But be aware: nested fields will be printed! Only the root level of keywords is filtered by the <code>ignored_attrs</code>.</p>\n<pre><span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"secret\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">GelfFormatter</span><span class=\"p\">(</span><span class=\"n\">ignored_attrs</span><span class=\"o\">=</span><span class=\"n\">attrs</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"n\">ignored_attrs</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"app config\"</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"connection\"</span><span class=\"p\">:</span> <span class=\"s2\">\"local\"</span><span class=\"p\">,</span> <span class=\"s2\">\"secret\"</span><span class=\"p\">:</span> <span class=\"s2\">\"verySecret!\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mysql\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"user\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"will_be_logged\"</span><span class=\"p\">}})</span>\n</pre>\n<pre>{\"version\": \"1.1\", \"short_message\": \"app config\", \"timestamp\": 1557346554.989846, \"level\": 6, \"host\": \"my-server\", \"_connection\": \"local\", \"_mysql\": {\"user\": \"test\", \"password\": \"will_be_logged\"}}\n</pre>\n<h4>Context Fields</h4>\n<p>Having the ability to define a set of additional fields once and have them included in all log messages can be useful to avoid repetitive <code>extra</code> key/value pairs and enable contextual logging.</p>\n<p>Python's logging module provides several options to add context to a logger, among which we highlight the  <a href=\"https://docs.python.org/3/library/logging.html#loggeradapter-objects\" rel=\"nofollow\"><code>logging.LoggerAdapter</code></a> and <a href=\"https://docs.python.org/3/library/logging.html#filter-objects\" rel=\"nofollow\"><code>logging.Filter</code></a>.</p>\n<p>Between these we recommend a <code>logging.Filter</code>, which is simpler and can be attached directly to a <a href=\"https://docs.python.org/3/library/logging.html#handler-objects\" rel=\"nofollow\"><code>logging.Handler</code></a>. A <code>logging.Filter</code> can therefore be used locally (on a <a href=\"https://docs.python.org/3/library/logging.html#logger-objects\" rel=\"nofollow\"><code>logging.Logger</code></a>) or globally (through <code>logging.basicConfig</code>). If you opt for a <code>LoggerAdapter</code> you'll need a <code>logging.Logger</code> to wrap.</p>\n<p>You can also use a <code>logging.Filter</code> to reuse/rename any of the reserved <code>logging.LogRecord</code> attributes.</p>\n<h5>Example</h5>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ContextFilter</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Add any number of arbitrary additional fields</span>\n        <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"s2\">\"my-app\"</span>\n        <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">app_version</span> <span class=\"o\">=</span> <span class=\"s2\">\"1.2.3\"</span>\n        <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">environment</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"APP_ENV\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Reuse any reserved `logging.LogRecord` attributes</span>\n        <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">filename</span>\n        <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">lineno</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">GelfFormatter</span><span class=\"p\">()</span>\n\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">addFilter</span><span class=\"p\">(</span><span class=\"n\">ContextFilter</span><span class=\"p\">())</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">handlers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">handler</span><span class=\"p\">])</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"hi\"</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s2\">\"bar\"</span><span class=\"p\">))</span>\n</pre>\n<pre>{\"version\": \"1.1\", \"short_message\": \"hi\", \"timestamp\": 1557431642.189755, \"level\": 6, \"host\": \"my-server\", \"_foo\": \"bar\", \"_app\": \"my-app\", \"_app_version\": \"1.2.3\", \"_environment\": \"development\", \"_file\": \"app.py\", \"_line\": 159}\n</pre>\n<h2>Pretty-Print</h2>\n<p>Looking for a GELF log pretty-printer? If so, have a look at <a href=\"https://github.com/joaodrp/gelf-pretty\" rel=\"nofollow\">gelf-pretty</a> :fire:</p>\n<h2>Contributions</h2>\n<p>This project adheres to the Contributor Covenant <a href=\"CODE_OF_CONDUCT.md\" rel=\"nofollow\">code of conduct</a>. By participating, you are expected to uphold this code. Please refer to our <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contributing guide</a> for further information.</p>\n\n          </div>"}, "last_serial": 6344508, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b11d808d8228d4864c4e3c5050d269b5", "sha256": "95ae7280310bd5deeee0346b13cdf0455a6033148bf40b7c24b611895cd186d0"}, "downloads": -1, "filename": "gelf_formatter-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b11d808d8228d4864c4e3c5050d269b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7632, "upload_time": "2019-05-10T19:37:02", "upload_time_iso_8601": "2019-05-10T19:37:02.039915Z", "url": "https://files.pythonhosted.org/packages/24/92/560ff770d47074455c8d9121a612e5b8494959b388eac789efee88082ad8/gelf_formatter-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c70e98e207f4dfec6b9a4c8a226bfc0", "sha256": "f841adb1aa555976e9a04747a70c36612dcf49c61dbc845b2a2c77d73916fe48"}, "downloads": -1, "filename": "gelf-formatter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4c70e98e207f4dfec6b9a4c8a226bfc0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8744, "upload_time": "2019-05-10T19:37:04", "upload_time_iso_8601": "2019-05-10T19:37:04.338803Z", "url": "https://files.pythonhosted.org/packages/7d/21/f4332ba9057a0adada76e0044fc6648a45af4910149ecef08b7db5417796/gelf-formatter-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7afc3f1bdb479cdad800da3b9e73595c", "sha256": "706e446d61818f9d7b3814d842a805ba50db00351bcd6d010bf43f6448c636d8"}, "downloads": -1, "filename": "gelf_formatter-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7afc3f1bdb479cdad800da3b9e73595c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8027, "upload_time": "2019-12-21T13:52:08", "upload_time_iso_8601": "2019-12-21T13:52:08.444683Z", "url": "https://files.pythonhosted.org/packages/5b/fa/2b23b30c50b4db2b189063b0586da9475cf23ed9dde13612282dff205dea/gelf_formatter-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14c2c2fb813463b7e630a589867681e8", "sha256": "1fe78c786b6f027f3cd9ac64b861187b3f1373e5ea2825ca2cd1186604599422"}, "downloads": -1, "filename": "gelf-formatter-0.2.0.tar.gz", "has_sig": false, "md5_digest": "14c2c2fb813463b7e630a589867681e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9294, "upload_time": "2019-12-21T13:52:10", "upload_time_iso_8601": "2019-12-21T13:52:10.244730Z", "url": "https://files.pythonhosted.org/packages/e7/a6/1d2425a1eaf6d8b2c1683eb6dd0f739d2b627d557edb0119d2e7823f37df/gelf-formatter-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7afc3f1bdb479cdad800da3b9e73595c", "sha256": "706e446d61818f9d7b3814d842a805ba50db00351bcd6d010bf43f6448c636d8"}, "downloads": -1, "filename": "gelf_formatter-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7afc3f1bdb479cdad800da3b9e73595c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8027, "upload_time": "2019-12-21T13:52:08", "upload_time_iso_8601": "2019-12-21T13:52:08.444683Z", "url": "https://files.pythonhosted.org/packages/5b/fa/2b23b30c50b4db2b189063b0586da9475cf23ed9dde13612282dff205dea/gelf_formatter-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14c2c2fb813463b7e630a589867681e8", "sha256": "1fe78c786b6f027f3cd9ac64b861187b3f1373e5ea2825ca2cd1186604599422"}, "downloads": -1, "filename": "gelf-formatter-0.2.0.tar.gz", "has_sig": false, "md5_digest": "14c2c2fb813463b7e630a589867681e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9294, "upload_time": "2019-12-21T13:52:10", "upload_time_iso_8601": "2019-12-21T13:52:10.244730Z", "url": "https://files.pythonhosted.org/packages/e7/a6/1d2425a1eaf6d8b2c1683eb6dd0f739d2b627d557edb0119d2e7823f37df/gelf-formatter-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:32 2020"}