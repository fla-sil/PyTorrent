{"info": {"author": "Emmanuel Leblond", "author_email": "emmanuel.leblond@{nospam}gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": ".. image:: https://travis-ci.org/touilleMan/samarche.svg?branch=master\r\n    :target: https://travis-ci.org/touilleMan/samarche\r\n    :alt: Travis-CI\r\n\r\nSamarche\r\n========\r\n\r\nAPI checker inspired by `this\r\npost <http://sametmax.com/est-ce-que-cet-outil-existe-en-python/>`__\r\n\r\nQuickstart\r\n----------\r\n\r\nSay you're developping a module with a public API, for people working\r\nwith it, this API is supposed to stay the same until the next major\r\nrelease. What would happen if a commit makes a change it shouldn't have\r\n?\r\n\r\nThe solution is testing :\r\n\r\n.. code:: python\r\n\r\n    # A class which is part of your API\r\n    class Foo:\r\n        bar = True\r\n        def __init__(self, stuff=False):\r\n            self.stuff\r\n     \r\n        def thing(self):\r\n            return \"doh\"\r\n     \r\n    # Your tests to make sure the class stays consistent\r\n    self.assertTrue(hasattr(Foo, 'bar'))\r\n    self.assertTrue(hasattr(Foo, 'thing'))\r\n    self.assertTrue(hasattr(Foo(), 'stuff'))\r\n\r\nUnfortunatly those tests are basically writting all your API a second\r\ntime, there must be a better (and less boring) way !\r\n\r\nSamarche allow you to take a snapshop of your API (called a\r\n``signature``) and then be able to test your evolving codebase against\r\nit.\r\n\r\nSamarche register only public members (i.e. everything starting by ``_``\r\nis skipped) You can create signatures from a ``module``,\r\n``module.package`` and even ``module.package:package_attribute``\r\n\r\nExample\r\n-------\r\n\r\nFirst build and save the signature of your API:\r\n\r\n.. code:: python\r\n\r\n    # Do this at each major release\r\n    import samarche\r\n\r\n    signature = samarche.build_signature(\"my_api\")\r\n    with open('my_api.signature', 'wb') as fd:\r\n        samarche.dump(signature, f)\r\n\r\nThen put somewhere in your tests\r\n\r\n.. code:: python\r\n\r\n    with open('my_api.signature', 'rb') as fd:\r\n      original_signature = samarche.load(fd)\r\n    try:\r\n        samarche.check_signature('my_api', original_signature)\r\n    except samarche.ValidationError as e:\r\n        print(\"API has changed : {}\".format(e))", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/touilleMan/samarche/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/touilleMan/samarche", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "samarche", "package_url": "https://pypi.org/project/samarche/", "platform": "any", "project_url": "https://pypi.org/project/samarche/", "project_urls": {"Download": "https://github.com/touilleMan/samarche/tarball/master", "Homepage": "https://github.com/touilleMan/samarche"}, "release_url": "https://pypi.org/project/samarche/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Samarche for testing your public api against regression !", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/touilleMan/samarche\" rel=\"nofollow\"><img alt=\"Travis-CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0270729579b8d1bf3641dcabc99cd3fb8d885e6d/68747470733a2f2f7472617669732d63692e6f72672f746f75696c6c654d616e2f73616d61726368652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"samarche\">\n<h2>Samarche</h2>\n<p>API checker inspired by <a href=\"http://sametmax.com/est-ce-que-cet-outil-existe-en-python/\" rel=\"nofollow\">this\npost</a></p>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<p>Say you\u2019re developping a module with a public API, for people working\nwith it, this API is supposed to stay the same until the next major\nrelease. What would happen if a commit makes a change it shouldn\u2019t have\n?</p>\n<p>The solution is testing :</p>\n<pre><span class=\"c1\"># A class which is part of your API</span>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stuff</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stuff</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">thing</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"doh\"</span>\n\n<span class=\"c1\"># Your tests to make sure the class stays consistent</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">))</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">,</span> <span class=\"s1\">'thing'</span><span class=\"p\">))</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">(),</span> <span class=\"s1\">'stuff'</span><span class=\"p\">))</span>\n</pre>\n<p>Unfortunatly those tests are basically writting all your API a second\ntime, there must be a better (and less boring) way !</p>\n<p>Samarche allow you to take a snapshop of your API (called a\n<tt>signature</tt>) and then be able to test your evolving codebase against\nit.</p>\n<p>Samarche register only public members (i.e. everything starting by <tt>_</tt>\nis skipped) You can create signatures from a <tt>module</tt>,\n<tt>module.package</tt> and even <tt>module.package:package_attribute</tt></p>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>First build and save the signature of your API:</p>\n<pre><span class=\"c1\"># Do this at each major release</span>\n<span class=\"kn\">import</span> <span class=\"nn\">samarche</span>\n\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">samarche</span><span class=\"o\">.</span><span class=\"n\">build_signature</span><span class=\"p\">(</span><span class=\"s2\">\"my_api\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_api.signature'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"n\">samarche</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>Then put somewhere in your tests</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_api.signature'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n  <span class=\"n\">original_signature</span> <span class=\"o\">=</span> <span class=\"n\">samarche</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">samarche</span><span class=\"o\">.</span><span class=\"n\">check_signature</span><span class=\"p\">(</span><span class=\"s1\">'my_api'</span><span class=\"p\">,</span> <span class=\"n\">original_signature</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">samarche</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"API has changed : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1608246, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "55fd8901715a10d90e78838db10d0e3b", "sha256": "030b9c323b66635bece1411667a6a76e672a6167f38ad25747c503190a93e1d5"}, "downloads": -1, "filename": "samarche-0.0.1-py3.4.egg", "has_sig": false, "md5_digest": "55fd8901715a10d90e78838db10d0e3b", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": null, "size": 1111, "upload_time": "2015-05-01T20:10:54", "upload_time_iso_8601": "2015-05-01T20:10:54.474590Z", "url": "https://files.pythonhosted.org/packages/56/7f/1bd3a6a0149b595d0a7425b73a0320b3ae2bfe7cb8ab5dec71bbcf2b8237/samarche-0.0.1-py3.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "590520bf540c5d0bc476918b46f57a8b", "sha256": "0e8c46c6ded169b2d33f295ac4f4e5a99a7d8edb6a42babfcebd684eaf46b3bd"}, "downloads": -1, "filename": "samarche-0.0.1.tar.gz", "has_sig": false, "md5_digest": "590520bf540c5d0bc476918b46f57a8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3844, "upload_time": "2015-05-01T20:10:57", "upload_time_iso_8601": "2015-05-01T20:10:57.857479Z", "url": "https://files.pythonhosted.org/packages/15/42/a3166ff99a90f0fac2bcccc231080e7bd07932530e6088710c91ad473f72/samarche-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55fd8901715a10d90e78838db10d0e3b", "sha256": "030b9c323b66635bece1411667a6a76e672a6167f38ad25747c503190a93e1d5"}, "downloads": -1, "filename": "samarche-0.0.1-py3.4.egg", "has_sig": false, "md5_digest": "55fd8901715a10d90e78838db10d0e3b", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": null, "size": 1111, "upload_time": "2015-05-01T20:10:54", "upload_time_iso_8601": "2015-05-01T20:10:54.474590Z", "url": "https://files.pythonhosted.org/packages/56/7f/1bd3a6a0149b595d0a7425b73a0320b3ae2bfe7cb8ab5dec71bbcf2b8237/samarche-0.0.1-py3.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "590520bf540c5d0bc476918b46f57a8b", "sha256": "0e8c46c6ded169b2d33f295ac4f4e5a99a7d8edb6a42babfcebd684eaf46b3bd"}, "downloads": -1, "filename": "samarche-0.0.1.tar.gz", "has_sig": false, "md5_digest": "590520bf540c5d0bc476918b46f57a8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3844, "upload_time": "2015-05-01T20:10:57", "upload_time_iso_8601": "2015-05-01T20:10:57.857479Z", "url": "https://files.pythonhosted.org/packages/15/42/a3166ff99a90f0fac2bcccc231080e7bd07932530e6088710c91ad473f72/samarche-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:59 2020"}