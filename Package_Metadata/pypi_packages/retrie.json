{"info": {"author": "ddelange", "author_email": "david@delange.dev", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# retrie\n\n[![build](https://img.shields.io/github/workflow/status/ddelange/retrie/GH/master?logo=github&cacheSeconds=86400)](https://github.com/ddelange/retrie/actions?query=branch%3Amaster)\n[![codecov](https://img.shields.io/codecov/c/github/ddelange/retrie/master?logo=codecov&logoColor=white)](https://codecov.io/gh/ddelange/retrie)\n[![pypi Version](https://img.shields.io/pypi/v/retrie.svg?logo=pypi&logoColor=white)](https://pypi.org/project/retrie/)\n[![python](https://img.shields.io/pypi/pyversions/retrie.svg?logo=python&logoColor=white)](https://pypi.org/project/retrie/)\n[![downloads](https://pepy.tech/badge/retrie)](https://pypistats.org/packages/retrie)\n[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)\n\n\n[retrie](https://github.com/ddelange/retrie) offers fast methods to match and replace (sequences of) strings based on efficient Trie-based regex unions.\n\n#### Trie\n\nInstead of matching against a simple regex union, which becomes slow for large sets of words, a more efficient regex pattern can be compiled using a [Trie](https://en.wikipedia.org/wiki/Trie) structure:\n\n```py\nfrom retrie.trie import Trie\n\n\ntrie = Trie()\n\nfor term in [\"abc\", \"foo\", \"abs\"]:\n    trie.add(term)\nassert trie.pattern() == \"(?:ab[cs]|foo)\"  # equivalent to but faster than \"(?:abc|abs|foo)\"\n\ntrie.add(\"absolute\")\nassert trie.pattern() == \"(?:ab(?:c|s(?:olute)?)|foo)\"\n\ntrie.add(\"abx\")\nassert trie.pattern() == \"(?:ab(?:[cx]|s(?:olute)?)|foo)\"\n\ntrie.add(\"abxy\")\nassert trie.pattern() == \"(?:ab(?:c|s(?:olute)?|xy?)|foo)\"\n```\n\n\n## Installation\n\nThis pure-Python, OS independent package is available on [PyPI](https://pypi.org/project/retrie):\n\n```sh\n$ pip install retrie\n```\n\n\n## Usage\n\nThe following objects are all subclasses of [`retrie.retrie.Retrie`](src/retrie/retrie.py), which handles filling the Trie and compiling the corresponding regex pattern.\n\n\n#### Blacklist\n\nThe `Blacklist` object can be used to filter out bad occurences in a text or a sequenxce of strings:\n```py\nfrom retrie.retrie import Blacklist\n\n# check out docstrings and methods\nhelp(Blacklist)\n\nblacklist = Blacklist([\"abc\", \"foo\", \"abs\"], match_substrings=False)\nblacklist.compiled\n# re.compile(r'(?<=\\b)(?:ab[cs]|foo)(?=\\b)', re.IGNORECASE|re.UNICODE)\nassert not blacklist.is_blacklisted(\"a foobar\")\nassert tuple(blacklist.filter((\"good\", \"abc\", \"foobar\"))) == (\"good\", \"foobar\")\nassert blacklist.cleanse_text((\"good abc foobar\")) == \"good  foobar\"\n\nblacklist = Blacklist([\"abc\", \"foo\", \"abs\"], match_substrings=True)\nblacklist.compiled\n# re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)\nassert blacklist.is_blacklisted(\"a foobar\")\nassert tuple(blacklist.filter((\"good\", \"abc\", \"foobar\"))) == (\"good\",)\nassert blacklist.cleanse_text((\"good abc foobar\")) == \"good  bar\"\n```\n\n\n#### Whitelist\n\nSimilar methods are available for the `Whitelist` object:\n```py\nfrom retrie.retrie import Whitelist\n\n# check out docstrings and methods\nhelp(Whitelist)\n\nwhitelist = Whitelist([\"abc\", \"foo\", \"abs\"], match_substrings=False)\nwhitelist.compiled\n# re.compile(r'(?<=\\b)(?:ab[cs]|foo)(?=\\b)', re.IGNORECASE|re.UNICODE)\nassert not whitelist.is_whitelisted(\"a foobar\")\nassert tuple(whitelist.filter((\"bad\", \"abc\", \"foobar\"))) == (\"abc\",)\nassert whitelist.cleanse_text((\"bad abc foobar\")) == \"abc\"\n\nwhitelist = Whitelist([\"abc\", \"foo\", \"abs\"], match_substrings=True)\nwhitelist.compiled\n# re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)\nassert whitelist.is_whitelisted(\"a foobar\")\nassert tuple(whitelist.filter((\"bad\", \"abc\", \"foobar\"))) == (\"abc\", \"foobar\")\nassert whitelist.cleanse_text((\"bad abc foobar\")) == \"abcfoo\"\n```\n\n\n#### Replacer\n\nThe `Replacer` object does a fast single-pass search & replace for occurrences of `replacement_mapping.keys()` with corresponding values.\n```py\nfrom retrie.retrie import Replacer\n\n# check out docstrings and methods\nhelp(Replacer)\n\nreplacement_mapping = dict(zip([\"abc\", \"foo\", \"abs\"], [\"new1\", \"new2\", \"new3\"]))\n\nreplacer = Replacer(replacement_mapping, match_substrings=True)\nreplacer.compiled\n# re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)\nassert replacer.replace(\"ABS ...foo... foobar\") == \"new3 ...new2... new2bar\"\n\nreplacer = Replacer(replacement_mapping, match_substrings=False)\nreplacer.compiled\n# re.compile(r'\\b(?:ab[cs]|foo)\\b', re.IGNORECASE|re.UNICODE)\nassert replacer.replace(\"ABS ...foo... foobar\") == \"new3 ...new2... foobar\"\n\nreplacer = Replacer(replacement_mapping, match_substrings=False, re_flags=None)\nreplacer.compiled  # on py3, re.UNICODE is always enabled\n# re.compile(r'\\b(?:ab[cs]|foo)\\b')\nassert replacer.replace(\"ABS ...foo... foobar\") == \"ABS ...new2... foobar\"\n\nreplacer = Replacer(replacement_mapping, match_substrings=False, word_boundary=\" \")\nreplacer.compiled\n# re.compile(r'(?<= )(?:ab[cs]|foo)(?= )', re.IGNORECASE|re.UNICODE)\nassert replacer.replace(\". ABS ...foo... foobar\") == \". new3 ...foo... foobar\"\n```\n\n\n## Development\n\n[![gitmoji](https://img.shields.io/badge/gitmoji-%20%F0%9F%98%9C%20%F0%9F%98%8D-ffdd67)](https://github.com/carloscuesta/gitmoji-cli)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\nCreate a virtual environment.\n\n```sh\npython -m venv .venv\nsource .venv/bin/activate\n```\n\nGet ready to develop:\n\n```sh\nmake install\n```\n\nThis is equivalent to the following steps:\n\n- Install pre-commit and other continous integration dependencies in order to make commits and run tests.\n    ```sh\n    pip install -r requirements/ci.txt\n    pre-commit install\n    ```\n\n- With requirements installed, `make lint` and `make test` can now be run. There is also `make clean`, and `make all` which runs all three.\n\n- To import the package in the python environment, install the package (`-e` for editable installation, upon import, python will read directly from the repository).\n    ```sh\n    pip install -e .\n    ```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ddelange/retrie", "keywords": "pure-Python regex trie regex-trie blacklist whitelist re search replace", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "retrie", "package_url": "https://pypi.org/project/retrie/", "platform": "", "project_url": "https://pypi.org/project/retrie/", "project_urls": {"Homepage": "https://github.com/ddelange/retrie"}, "release_url": "https://pypi.org/project/retrie/0.1.2/", "requires_dist": ["cached-property ; python_version < \"3.8\""], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Efficient Trie-based regex unions for blacklist/whitelist filtering and one-pass mapping-based string replacing", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>retrie</h1>\n<p><a href=\"https://github.com/ddelange/retrie/actions?query=branch%3Amaster\" rel=\"nofollow\"><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e17f26096fe19132bec3d02e378c18d38e44fd2a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6464656c616e67652f7265747269652f47482f6d61737465723f6c6f676f3d6769746875622663616368655365636f6e64733d3836343030\"></a>\n<a href=\"https://codecov.io/gh/ddelange/retrie\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1815c748076acc34ddc567975fc1d53ef03b0e98/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6464656c616e67652f7265747269652f6d61737465723f6c6f676f3d636f6465636f76266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pypi.org/project/retrie/\" rel=\"nofollow\"><img alt=\"pypi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0386a1235c4599d0c45764c080898abe39d115e2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7265747269652e7376673f6c6f676f3d70797069266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pypi.org/project/retrie/\" rel=\"nofollow\"><img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddecf97b69f1f64e81e0a73d5909c4aa0b1c4f8c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7265747269652e7376673f6c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pypistats.org/packages/retrie\" rel=\"nofollow\"><img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88d4779ad0c6dd2773a331cc28c50ea3e9a3aa6b/68747470733a2f2f706570792e746563682f62616467652f726574726965\"></a>\n<a href=\"https://github.com/python/black\" rel=\"nofollow\"><img alt=\"black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p><a href=\"https://github.com/ddelange/retrie\" rel=\"nofollow\">retrie</a> offers fast methods to match and replace (sequences of) strings based on efficient Trie-based regex unions.</p>\n<h4>Trie</h4>\n<p>Instead of matching against a simple regex union, which becomes slow for large sets of words, a more efficient regex pattern can be compiled using a <a href=\"https://en.wikipedia.org/wiki/Trie\" rel=\"nofollow\">Trie</a> structure:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">retrie.trie</span> <span class=\"kn\">import</span> <span class=\"n\">Trie</span>\n\n\n<span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">Trie</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">term</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abs\"</span><span class=\"p\">]:</span>\n    <span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">term</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"(?:ab[cs]|foo)\"</span>  <span class=\"c1\"># equivalent to but faster than \"(?:abc|abs|foo)\"</span>\n\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"absolute\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"(?:ab(?:c|s(?:olute)?)|foo)\"</span>\n\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"abx\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"(?:ab(?:[cx]|s(?:olute)?)|foo)\"</span>\n\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"abxy\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"(?:ab(?:c|s(?:olute)?|xy?)|foo)\"</span>\n</pre>\n<h2>Installation</h2>\n<p>This pure-Python, OS independent package is available on <a href=\"https://pypi.org/project/retrie\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install retrie\n</pre>\n<h2>Usage</h2>\n<p>The following objects are all subclasses of <a href=\"src/retrie/retrie.py\" rel=\"nofollow\"><code>retrie.retrie.Retrie</code></a>, which handles filling the Trie and compiling the corresponding regex pattern.</p>\n<h4>Blacklist</h4>\n<p>The <code>Blacklist</code> object can be used to filter out bad occurences in a text or a sequenxce of strings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">retrie.retrie</span> <span class=\"kn\">import</span> <span class=\"n\">Blacklist</span>\n\n<span class=\"c1\"># check out docstrings and methods</span>\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">Blacklist</span><span class=\"p\">)</span>\n\n<span class=\"n\">blacklist</span> <span class=\"o\">=</span> <span class=\"n\">Blacklist</span><span class=\"p\">([</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abs\"</span><span class=\"p\">],</span> <span class=\"n\">match_substrings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">blacklist</span><span class=\"o\">.</span><span class=\"n\">compiled</span>\n<span class=\"c1\"># re.compile(r'(?&lt;=\\b)(?:ab[cs]|foo)(?=\\b)', re.IGNORECASE|re.UNICODE)</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">blacklist</span><span class=\"o\">.</span><span class=\"n\">is_blacklisted</span><span class=\"p\">(</span><span class=\"s2\">\"a foobar\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">blacklist</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">((</span><span class=\"s2\">\"good\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s2\">\"good\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">blacklist</span><span class=\"o\">.</span><span class=\"n\">cleanse_text</span><span class=\"p\">((</span><span class=\"s2\">\"good abc foobar\"</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s2\">\"good  foobar\"</span>\n\n<span class=\"n\">blacklist</span> <span class=\"o\">=</span> <span class=\"n\">Blacklist</span><span class=\"p\">([</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abs\"</span><span class=\"p\">],</span> <span class=\"n\">match_substrings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">blacklist</span><span class=\"o\">.</span><span class=\"n\">compiled</span>\n<span class=\"c1\"># re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)</span>\n<span class=\"k\">assert</span> <span class=\"n\">blacklist</span><span class=\"o\">.</span><span class=\"n\">is_blacklisted</span><span class=\"p\">(</span><span class=\"s2\">\"a foobar\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">blacklist</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">((</span><span class=\"s2\">\"good\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s2\">\"good\"</span><span class=\"p\">,)</span>\n<span class=\"k\">assert</span> <span class=\"n\">blacklist</span><span class=\"o\">.</span><span class=\"n\">cleanse_text</span><span class=\"p\">((</span><span class=\"s2\">\"good abc foobar\"</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s2\">\"good  bar\"</span>\n</pre>\n<h4>Whitelist</h4>\n<p>Similar methods are available for the <code>Whitelist</code> object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">retrie.retrie</span> <span class=\"kn\">import</span> <span class=\"n\">Whitelist</span>\n\n<span class=\"c1\"># check out docstrings and methods</span>\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">Whitelist</span><span class=\"p\">)</span>\n\n<span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"n\">Whitelist</span><span class=\"p\">([</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abs\"</span><span class=\"p\">],</span> <span class=\"n\">match_substrings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">whitelist</span><span class=\"o\">.</span><span class=\"n\">compiled</span>\n<span class=\"c1\"># re.compile(r'(?&lt;=\\b)(?:ab[cs]|foo)(?=\\b)', re.IGNORECASE|re.UNICODE)</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">whitelist</span><span class=\"o\">.</span><span class=\"n\">is_whitelisted</span><span class=\"p\">(</span><span class=\"s2\">\"a foobar\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">whitelist</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">((</span><span class=\"s2\">\"bad\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,)</span>\n<span class=\"k\">assert</span> <span class=\"n\">whitelist</span><span class=\"o\">.</span><span class=\"n\">cleanse_text</span><span class=\"p\">((</span><span class=\"s2\">\"bad abc foobar\"</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s2\">\"abc\"</span>\n\n<span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"n\">Whitelist</span><span class=\"p\">([</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abs\"</span><span class=\"p\">],</span> <span class=\"n\">match_substrings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">whitelist</span><span class=\"o\">.</span><span class=\"n\">compiled</span>\n<span class=\"c1\"># re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)</span>\n<span class=\"k\">assert</span> <span class=\"n\">whitelist</span><span class=\"o\">.</span><span class=\"n\">is_whitelisted</span><span class=\"p\">(</span><span class=\"s2\">\"a foobar\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">whitelist</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">((</span><span class=\"s2\">\"bad\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">whitelist</span><span class=\"o\">.</span><span class=\"n\">cleanse_text</span><span class=\"p\">((</span><span class=\"s2\">\"bad abc foobar\"</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s2\">\"abcfoo\"</span>\n</pre>\n<h4>Replacer</h4>\n<p>The <code>Replacer</code> object does a fast single-pass search &amp; replace for occurrences of <code>replacement_mapping.keys()</code> with corresponding values.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">retrie.retrie</span> <span class=\"kn\">import</span> <span class=\"n\">Replacer</span>\n\n<span class=\"c1\"># check out docstrings and methods</span>\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">Replacer</span><span class=\"p\">)</span>\n\n<span class=\"n\">replacement_mapping</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">([</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"abs\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"new1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"new2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"new3\"</span><span class=\"p\">]))</span>\n\n<span class=\"n\">replacer</span> <span class=\"o\">=</span> <span class=\"n\">Replacer</span><span class=\"p\">(</span><span class=\"n\">replacement_mapping</span><span class=\"p\">,</span> <span class=\"n\">match_substrings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">replacer</span><span class=\"o\">.</span><span class=\"n\">compiled</span>\n<span class=\"c1\"># re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)</span>\n<span class=\"k\">assert</span> <span class=\"n\">replacer</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"ABS ...foo... foobar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"new3 ...new2... new2bar\"</span>\n\n<span class=\"n\">replacer</span> <span class=\"o\">=</span> <span class=\"n\">Replacer</span><span class=\"p\">(</span><span class=\"n\">replacement_mapping</span><span class=\"p\">,</span> <span class=\"n\">match_substrings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">replacer</span><span class=\"o\">.</span><span class=\"n\">compiled</span>\n<span class=\"c1\"># re.compile(r'\\b(?:ab[cs]|foo)\\b', re.IGNORECASE|re.UNICODE)</span>\n<span class=\"k\">assert</span> <span class=\"n\">replacer</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"ABS ...foo... foobar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"new3 ...new2... foobar\"</span>\n\n<span class=\"n\">replacer</span> <span class=\"o\">=</span> <span class=\"n\">Replacer</span><span class=\"p\">(</span><span class=\"n\">replacement_mapping</span><span class=\"p\">,</span> <span class=\"n\">match_substrings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">re_flags</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">replacer</span><span class=\"o\">.</span><span class=\"n\">compiled</span>  <span class=\"c1\"># on py3, re.UNICODE is always enabled</span>\n<span class=\"c1\"># re.compile(r'\\b(?:ab[cs]|foo)\\b')</span>\n<span class=\"k\">assert</span> <span class=\"n\">replacer</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"ABS ...foo... foobar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"ABS ...new2... foobar\"</span>\n\n<span class=\"n\">replacer</span> <span class=\"o\">=</span> <span class=\"n\">Replacer</span><span class=\"p\">(</span><span class=\"n\">replacement_mapping</span><span class=\"p\">,</span> <span class=\"n\">match_substrings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">word_boundary</span><span class=\"o\">=</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n<span class=\"n\">replacer</span><span class=\"o\">.</span><span class=\"n\">compiled</span>\n<span class=\"c1\"># re.compile(r'(?&lt;= )(?:ab[cs]|foo)(?= )', re.IGNORECASE|re.UNICODE)</span>\n<span class=\"k\">assert</span> <span class=\"n\">replacer</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\". ABS ...foo... foobar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\". new3 ...foo... foobar\"</span>\n</pre>\n<h2>Development</h2>\n<p><a href=\"https://github.com/carloscuesta/gitmoji-cli\" rel=\"nofollow\"><img alt=\"gitmoji\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/297b33b7fc1d592a39151eb7ec30088170eabfcf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746d6f6a692d2532302546302539462539382539432532302546302539462539382538442d666664643637\"></a>\n<a href=\"https://github.com/pre-commit/pre-commit\" rel=\"nofollow\"><img alt=\"pre-commit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d861174d9af84b80d393b2e7c89badabc5e04097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7072652d2d636f6d6d69742d656e61626c65642d627269676874677265656e3f6c6f676f3d7072652d636f6d6d6974266c6f676f436f6c6f723d7768697465\"></a></p>\n<p>Create a virtual environment.</p>\n<pre>python -m venv .venv\n<span class=\"nb\">source</span> .venv/bin/activate\n</pre>\n<p>Get ready to develop:</p>\n<pre>make install\n</pre>\n<p>This is equivalent to the following steps:</p>\n<ul>\n<li>\n<p>Install pre-commit and other continous integration dependencies in order to make commits and run tests.</p>\n<pre>pip install -r requirements/ci.txt\npre-commit install\n</pre>\n</li>\n<li>\n<p>With requirements installed, <code>make lint</code> and <code>make test</code> can now be run. There is also <code>make clean</code>, and <code>make all</code> which runs all three.</p>\n</li>\n<li>\n<p>To import the package in the python environment, install the package (<code>-e</code> for editable installation, upon import, python will read directly from the repository).</p>\n<pre>pip install -e .\n</pre>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7146730, "releases": {"0.0.1rc0": [{"comment_text": "", "digests": {"md5": "ebf658c362894b93e74edadcf716c338", "sha256": "4c5d2917b290cc1e98a8f2c84be966d1cb41b2d986e2402502bbc63ef87ddb5d"}, "downloads": -1, "filename": "retrie-0.0.1rc0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ebf658c362894b93e74edadcf716c338", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7352, "upload_time": "2020-04-09T11:36:44", "upload_time_iso_8601": "2020-04-09T11:36:44.399252Z", "url": "https://files.pythonhosted.org/packages/d1/67/14ac1e3d157daaccabf55db032c8a6dd2c484120de4ff8a4c5a551a6dac2/retrie-0.0.1rc0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "369abaf52dd776d2dc57a59824cca31d", "sha256": "617b79102516309c745b60fe83564e7fc758af2796242f7833b23d208c22e0d8"}, "downloads": -1, "filename": "retrie-0.0.1rc0.tar.gz", "has_sig": false, "md5_digest": "369abaf52dd776d2dc57a59824cca31d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9308, "upload_time": "2020-04-09T11:36:46", "upload_time_iso_8601": "2020-04-09T11:36:46.534400Z", "url": "https://files.pythonhosted.org/packages/97/6f/a972e2f2c7deb8c7a4022a066a44f4d4afa891a8450ce83e7cfbcec66685/retrie-0.0.1rc0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "4ccd20a6689397289936b90cd11c7322", "sha256": "ef215c2625cf0d22b05a17162b25bbb65491ada2bfab6edb25acf4a54a75c80f"}, "downloads": -1, "filename": "retrie-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4ccd20a6689397289936b90cd11c7322", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7356, "upload_time": "2020-04-09T11:53:12", "upload_time_iso_8601": "2020-04-09T11:53:12.095250Z", "url": "https://files.pythonhosted.org/packages/48/ee/b600cc747e0d1d87c51de5010a9b26cbda384d232a4a0a2f14a0d001274f/retrie-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21f0f64dccd2aeab591e9a34d65bd372", "sha256": "1fbd211517ccf798f25eed3c5886a335e05d8293ca513b19f8c0142988c13a49"}, "downloads": -1, "filename": "retrie-0.1.0.tar.gz", "has_sig": false, "md5_digest": "21f0f64dccd2aeab591e9a34d65bd372", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9342, "upload_time": "2020-04-09T11:53:13", "upload_time_iso_8601": "2020-04-09T11:53:13.415885Z", "url": "https://files.pythonhosted.org/packages/6d/0f/c1ff319e1198392e38cd93c397e53cab8d3a795dc6d9fdae4305b0c0036f/retrie-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "697aee97656856845c2d19dd702f0b74", "sha256": "c718bfcb0ce8de78bfa7c3e0eb1579edbf27cc96618475f86c69ef6049343474"}, "downloads": -1, "filename": "retrie-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "697aee97656856845c2d19dd702f0b74", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7356, "upload_time": "2020-04-09T14:29:41", "upload_time_iso_8601": "2020-04-09T14:29:41.695763Z", "url": "https://files.pythonhosted.org/packages/d5/82/c06a43ed10d6bc1c3b113d8c4b47c14f87a22352794bb4b0486f2646e32c/retrie-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5de0cbd1d90f5546f165473342361990", "sha256": "ecf7048bb06c44acc54a25f57ba3ad0cd6d6b7dc5b3c28b3e91e4e161637c922"}, "downloads": -1, "filename": "retrie-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5de0cbd1d90f5546f165473342361990", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9362, "upload_time": "2020-04-09T14:29:42", "upload_time_iso_8601": "2020-04-09T14:29:42.650032Z", "url": "https://files.pythonhosted.org/packages/5f/4b/a0c06d336f62f042faa3d51f597d5712fad20c969c0ed682c524ca9e8de1/retrie-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "24cab29bc77c626b01d4418dbe6104ec", "sha256": "24ec2e3a1fd16b8bd123182e1420b9ff748e61d75e6912a1cb1c6bac9064daa9"}, "downloads": -1, "filename": "retrie-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "24cab29bc77c626b01d4418dbe6104ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7590, "upload_time": "2020-05-01T17:43:46", "upload_time_iso_8601": "2020-05-01T17:43:46.558334Z", "url": "https://files.pythonhosted.org/packages/2e/ae/331c3abf62f78c579760590693c41034b8b4fef949f1dad86e8c0ab2b416/retrie-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dcea7e0f2ba4b571efb590afc4f950f", "sha256": "f4d3e412838904f3b4b4ef377e52a569fc91ad3f3fad29127ff5c6cc99d61e63"}, "downloads": -1, "filename": "retrie-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8dcea7e0f2ba4b571efb590afc4f950f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9666, "upload_time": "2020-05-01T17:43:47", "upload_time_iso_8601": "2020-05-01T17:43:47.509302Z", "url": "https://files.pythonhosted.org/packages/f0/5a/94b333cd56bbc630753b0d9cff7ed9d5e0be833052eacacb67f2cd0d64b8/retrie-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "24cab29bc77c626b01d4418dbe6104ec", "sha256": "24ec2e3a1fd16b8bd123182e1420b9ff748e61d75e6912a1cb1c6bac9064daa9"}, "downloads": -1, "filename": "retrie-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "24cab29bc77c626b01d4418dbe6104ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7590, "upload_time": "2020-05-01T17:43:46", "upload_time_iso_8601": "2020-05-01T17:43:46.558334Z", "url": "https://files.pythonhosted.org/packages/2e/ae/331c3abf62f78c579760590693c41034b8b4fef949f1dad86e8c0ab2b416/retrie-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dcea7e0f2ba4b571efb590afc4f950f", "sha256": "f4d3e412838904f3b4b4ef377e52a569fc91ad3f3fad29127ff5c6cc99d61e63"}, "downloads": -1, "filename": "retrie-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8dcea7e0f2ba4b571efb590afc4f950f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9666, "upload_time": "2020-05-01T17:43:47", "upload_time_iso_8601": "2020-05-01T17:43:47.509302Z", "url": "https://files.pythonhosted.org/packages/f0/5a/94b333cd56bbc630753b0d9cff7ed9d5e0be833052eacacb67f2cd0d64b8/retrie-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:24 2020"}