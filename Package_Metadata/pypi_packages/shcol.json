{"info": {"author": "Sebastian Linke", "author_email": "Seb_Linke@arcor.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: System :: Shells"], "description": "`shcol` is a shell columnizer that works in a similar way as the Unix-tool `ls`\ndoes when rendering directory contents.\n\nSome examples:\n\n>>> import shcol\n>>> shcol.print_filenames()  # print contents of current directory\nbin    LICENSE   MANIFEST.in  setup.py  testsuite\nbuild  Makefile  README.md    shcol\n>>> shcol.print_filenames('testsuite')  # print contents of a subdirectory\ntest_cli.py   test_core.py   test_highlevel.py   test_script.py\ntest_cli.pyc  test_core.pyc  test_highlevel.pyc  test_script.pyc\n>>> shcol.print_filenames('testsuite/*.py')  # only print `*.py`-files\ntestsuite/test_cli.py   testsuite/test_highlevel.py\ntestsuite/test_core.py  testsuite/test_script.py\n>>> shcol.print_filenames('~/shcol', hide_dotted=False)  # like `ls -A ~/shcol`\nbin    .git     Makefile     README.md  shcol\nbuild  LICENSE  MANIFEST.in  setup.py   testsuite\n\n`shcol` can also columnize the attribute names of a Python-object:\n\n>>> shcol.print_sorted(shcol)\n__author__    config    helpers      __package__       print_columnized_mapping\n__builtins__  core      highlevel    __path__          print_filenames\ncli           __doc__   __license__  print_attrs       __version__\ncolumnize     __file__  __name__     print_columnized\n>>> shcol.print_sorted(shcol, spacing=5)\n__author__       core          __license__     print_columnized\n__builtins__     __doc__       __name__        print_columnized_mapping\ncli              __file__      __package__     print_filenames\ncolumnize        helpers       __path__        __version__\nconfig           highlevel     print_attrs\n\nNote that the `spacing`-parameter as shown above works with all kinds of\n`print_*`-functions in `shcol`.\n\nYou can also tell a `print_*`-function to use a specific line width for\nits output:\n\n>>> shcol.print_sorted(shcol, spacing=5, line_width=60)\n__author__       __file__        print_attrs\n__builtins__     helpers         print_columnized\ncli              highlevel       print_columnized_mapping\ncolumnize        __license__     print_filenames\nconfig           __name__        __version__\ncore             __package__\n__doc__          __path__\n\nNote that by default the terminal's width is used as the line width.\n\nAnd of course, you can columnize arbitrary names with `shcol`:\n\n>>> shcol.print_columnized(['foo', 'bar', 'baz'], spacing=7)\nfoo       bar       baz\n>>> shcol.print_columnized(['foo', 'bar', 'baz'], spacing=7, sort_items=True)\nbar       baz       foo\n\nThe following example demonstrates that sorting is locale-aware. Note the\nGerman umlaut in it. Hint: You need German as your default locale setting\nto reproduce that in your Python interpreter:\n\n>>> shcol.print_columnized(['foo', 'b\u00e4r', 'baz'], sort_items=True)\nb\u00e4r  baz  foo\n\nYou can see that `shcol` handles Unicode-characters as you would expect it.\n\nIn case you need the raw columnized string you can get that directly:\n\n>>> shcol.columnize(['foo', 'b\u00e4r', 'baz'], sort_items=True)  # on Python 2.7\nu'b\\xe4r  baz  foo'\n>>> shcol.columnize(['foo', 'b\u00e4r', 'baz'], sort_items=True)  # on Python 3.x\n'b\u00e4r  baz  foo'\n\n`shcol` has its focus on usability and speed. Even large lists will be\nrendered relatively fast (like ``shcol.print_filenames('/usr/bin')``).\n\nJust give it a try if you like it and feel free to give some feedback. :-)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seblin/shcol", "keywords": null, "license": "Simplified BSD", "maintainer": null, "maintainer_email": null, "name": "shcol", "package_url": "https://pypi.org/project/shcol/", "platform": "any", "project_url": "https://pypi.org/project/shcol/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/seblin/shcol"}, "release_url": "https://pypi.org/project/shcol/0.3/", "requires_dist": null, "requires_python": null, "summary": "A shell columnizer", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>shcol</cite> is a shell columnizer that works in a similar way as the Unix-tool <cite>ls</cite>\ndoes when rendering directory contents.</p>\n<p>Some examples:</p>\n<pre>&gt;&gt;&gt; import shcol\n&gt;&gt;&gt; shcol.print_filenames()  # print contents of current directory\nbin    LICENSE   MANIFEST.in  setup.py  testsuite\nbuild  Makefile  README.md    shcol\n&gt;&gt;&gt; shcol.print_filenames('testsuite')  # print contents of a subdirectory\ntest_cli.py   test_core.py   test_highlevel.py   test_script.py\ntest_cli.pyc  test_core.pyc  test_highlevel.pyc  test_script.pyc\n&gt;&gt;&gt; shcol.print_filenames('testsuite/*.py')  # only print `*.py`-files\ntestsuite/test_cli.py   testsuite/test_highlevel.py\ntestsuite/test_core.py  testsuite/test_script.py\n&gt;&gt;&gt; shcol.print_filenames('~/shcol', hide_dotted=False)  # like `ls -A ~/shcol`\nbin    .git     Makefile     README.md  shcol\nbuild  LICENSE  MANIFEST.in  setup.py   testsuite\n</pre>\n<p><cite>shcol</cite> can also columnize the attribute names of a Python-object:</p>\n<pre>&gt;&gt;&gt; shcol.print_sorted(shcol)\n__author__    config    helpers      __package__       print_columnized_mapping\n__builtins__  core      highlevel    __path__          print_filenames\ncli           __doc__   __license__  print_attrs       __version__\ncolumnize     __file__  __name__     print_columnized\n&gt;&gt;&gt; shcol.print_sorted(shcol, spacing=5)\n__author__       core          __license__     print_columnized\n__builtins__     __doc__       __name__        print_columnized_mapping\ncli              __file__      __package__     print_filenames\ncolumnize        helpers       __path__        __version__\nconfig           highlevel     print_attrs\n</pre>\n<p>Note that the <cite>spacing</cite>-parameter as shown above works with all kinds of\n<cite>print_*</cite>-functions in <cite>shcol</cite>.</p>\n<p>You can also tell a <cite>print_*</cite>-function to use a specific line width for\nits output:</p>\n<pre>&gt;&gt;&gt; shcol.print_sorted(shcol, spacing=5, line_width=60)\n__author__       __file__        print_attrs\n__builtins__     helpers         print_columnized\ncli              highlevel       print_columnized_mapping\ncolumnize        __license__     print_filenames\nconfig           __name__        __version__\ncore             __package__\n__doc__          __path__\n</pre>\n<p>Note that by default the terminal\u2019s width is used as the line width.</p>\n<p>And of course, you can columnize arbitrary names with <cite>shcol</cite>:</p>\n<pre>&gt;&gt;&gt; shcol.print_columnized(['foo', 'bar', 'baz'], spacing=7)\nfoo       bar       baz\n&gt;&gt;&gt; shcol.print_columnized(['foo', 'bar', 'baz'], spacing=7, sort_items=True)\nbar       baz       foo\n</pre>\n<p>The following example demonstrates that sorting is locale-aware. Note the\nGerman umlaut in it. Hint: You need German as your default locale setting\nto reproduce that in your Python interpreter:</p>\n<pre>&gt;&gt;&gt; shcol.print_columnized(['foo', 'b\u00e4r', 'baz'], sort_items=True)\nb\u00e4r  baz  foo\n</pre>\n<p>You can see that <cite>shcol</cite> handles Unicode-characters as you would expect it.</p>\n<p>In case you need the raw columnized string you can get that directly:</p>\n<pre>&gt;&gt;&gt; shcol.columnize(['foo', 'b\u00e4r', 'baz'], sort_items=True)  # on Python 2.7\nu'b\\xe4r  baz  foo'\n&gt;&gt;&gt; shcol.columnize(['foo', 'b\u00e4r', 'baz'], sort_items=True)  # on Python 3.x\n'b\u00e4r  baz  foo'\n</pre>\n<p><cite>shcol</cite> has its focus on usability and speed. Even large lists will be\nrendered relatively fast (like <tt><span class=\"pre\">shcol.print_filenames('/usr/bin')</span></tt>).</p>\n<p>Just give it a try if you like it and feel free to give some feedback. :-)</p>\n\n          </div>"}, "last_serial": 2116565, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "430080d65e6ef261bc56fd5bae6eff24", "sha256": "80f73f21a2c6aa8bdfc44eab055c3aa1fe205ca64d82c08d1884c4e45ed789f0"}, "downloads": -1, "filename": "shcol-0.1.tar.gz", "has_sig": false, "md5_digest": "430080d65e6ef261bc56fd5bae6eff24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6912, "upload_time": "2013-11-05T00:56:24", "upload_time_iso_8601": "2013-11-05T00:56:24.514099Z", "url": "https://files.pythonhosted.org/packages/45/d7/9bb7c9a4f209827d467948bd7118f7d34c83527528e6beb9d028239fbeed/shcol-0.1.tar.gz", "yanked": false}], "0.1-dev": [{"comment_text": "", "digests": {"md5": "c28de980fdbade5b8012e01a5b8bac5f", "sha256": "ec66eca61f82f2b35b9cf28c0bbcbe07c23166405b07859f6dc4af477601b52e"}, "downloads": -1, "filename": "shcol-0.1-dev.tar.gz", "has_sig": false, "md5_digest": "c28de980fdbade5b8012e01a5b8bac5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6766, "upload_time": "2013-11-05T00:24:39", "upload_time_iso_8601": "2013-11-05T00:24:39.689254Z", "url": "https://files.pythonhosted.org/packages/e8/41/b1ce3c84d88838e4b148ee4f925d9bbe4d57277b5dac1b01eca4e4360128/shcol-0.1-dev.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ea90d07b0eab7640638ebf0930bda1d1", "sha256": "2cd14a4cc0272d582037010873fb6ef5bc29f0419712462cd2378a779a447a58"}, "downloads": -1, "filename": "shcol-0.2.zip", "has_sig": false, "md5_digest": "ea90d07b0eab7640638ebf0930bda1d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27089, "upload_time": "2015-03-03T14:06:24", "upload_time_iso_8601": "2015-03-03T14:06:24.258227Z", "url": "https://files.pythonhosted.org/packages/0c/6e/0e563b222b8f700096d79e262453e0e7af076b336b9b2d7a9f9953edb4dd/shcol-0.2.zip", "yanked": false}], "0.2-rc1": [{"comment_text": "", "digests": {"md5": "276b49b2380301ed8f5f01088d34b46a", "sha256": "32b5e25555670905bc387e814a96ad635d6a5adeaef8ba26290318ea7dd17d91"}, "downloads": -1, "filename": "shcol-0.2-rc1.tar.gz", "has_sig": false, "md5_digest": "276b49b2380301ed8f5f01088d34b46a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16862, "upload_time": "2014-10-02T15:00:50", "upload_time_iso_8601": "2014-10-02T15:00:50.093225Z", "url": "https://files.pythonhosted.org/packages/95/75/28bb584db246aaf1269b3c95625fd2da8cc89918ab48d48db3d28b6cd19b/shcol-0.2-rc1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "909e94e4b0aba10aa33bea14c9cd6ab3", "sha256": "bd718921db93b9fe913144cdbf54c6c0ad1986be11542d446ff4a15021c59689"}, "downloads": -1, "filename": "shcol-0.3.zip", "has_sig": false, "md5_digest": "909e94e4b0aba10aa33bea14c9cd6ab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32337, "upload_time": "2016-05-15T13:17:42", "upload_time_iso_8601": "2016-05-15T13:17:42.478511Z", "url": "https://files.pythonhosted.org/packages/e7/67/5fda7c5c5b7cce574f99fe1fb8e71f3fee41faaa74ad06322159c288a221/shcol-0.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "909e94e4b0aba10aa33bea14c9cd6ab3", "sha256": "bd718921db93b9fe913144cdbf54c6c0ad1986be11542d446ff4a15021c59689"}, "downloads": -1, "filename": "shcol-0.3.zip", "has_sig": false, "md5_digest": "909e94e4b0aba10aa33bea14c9cd6ab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32337, "upload_time": "2016-05-15T13:17:42", "upload_time_iso_8601": "2016-05-15T13:17:42.478511Z", "url": "https://files.pythonhosted.org/packages/e7/67/5fda7c5c5b7cce574f99fe1fb8e71f3fee41faaa74ad06322159c288a221/shcol-0.3.zip", "yanked": false}], "timestamp": "Fri May  8 03:13:33 2020"}