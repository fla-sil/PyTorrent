{"info": {"author": "RedTurtle Technology", "author_email": "sviluppoplone@redturtle.it", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Plone", "Framework :: Plone :: 3.3", "Framework :: Plone :: 4.0", "Framework :: Plone :: 4.1", "Framework :: Plone :: 4.2", "Framework :: Plone :: 4.3", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "A PAS plugin for Plone that **authenticate users from social networks** through the use of **Velruse**.\r\n\r\n.. contents::\r\n\r\nIntroduction\r\n============\r\n\r\nThis Plone plugin let you to enable authentication of social networks users in Plone sites, using `Velruse`__.\r\n\r\n__ http://velruse.readthedocs.org/\r\n\r\nVelruse is a Pyramid application so defined:\r\n\r\n    Velruse is a set of authentication routines that provide a **unified way** to have a website user authenticate to a\r\n    variety of different identity providers and/or a variety of different authentication schemes.\r\n    \r\n    It is similar in some ways to `Janrain Engage`__ with the exception of being **open-source**, **locally installable**,\r\n    and **easily pluggable** for custom identity providers and authentication schemes.\r\n\r\n    __ http://www.janrain.com/products/engage\r\n    \r\n    -- from Velruse documentation\r\n\r\nWhy use Velruse instead of RPX service?\r\n---------------------------------------\r\n\r\nPlone ecosystem already have at least one plugin for a general social authentication: `plonesocial.auth.rpx`__. But in some\r\nenvironments (for example: public company or whatever use case where the user's privacy follow strict rules) this\r\nkind of service can't be used.\r\n\r\n__ http://comlounge.net/rpx/\r\n\r\nPrivacy apart, Velruse is **open source* and **easilly pluggable**: you can provide authentication providers for new services\r\nnot covered by Janrain.\r\n\r\nCheck also this `Velruse presentation`__ for more.\r\n\r\n__ http://www.slideshare.net/amleczko/lost-in-o-auth-learn-velruse-and-get-your-life-back\r\n\r\nHow to Use\r\n==========\r\n\r\nInstalling Velruse\r\n------------------\r\n\r\nVelruse is a `Pyramid`__ application so you must follow the proper `installation instruction`__ the refer to the\r\n`Velruse setup guide`__.\r\n\r\n__ http://www.pylonsproject.org/projects/pyramid/about\r\n__ http://docs.pylonsproject.org/projects/pyramid/en/1.4-branch/narr/install.html\r\n__ http://velruse.readthedocs.org/en/latest/usage.html\r\n\r\nVelruse can be executed as a separate *Pyramid service* and the Plone plugin needs this configuration.\r\nIt will talk to Velruse using HTTP requests.\r\n\r\n**TODO**: recent Zope version can be executed in the WSGI stack. Maybe future version of the plugin would support\r\nalso this alternative way? Who knows.\r\n\r\nInstalling pas.plugins.velruse\r\n------------------------------\r\n\r\nJust add ``pas.plugins.velruse`` to your buildout configuration and re-run it.\r\n\r\n.. code:: ini\r\n\r\n    [instance]\r\n    recipe = plone.recipe.zope2instance\r\n    \r\n    ...\r\n    \r\n    eggs =\r\n        ...\r\n        pas.plugins.velruse\r\n\r\nAfter Plone restart, add \"**Velruse authentication plugin**\" product to you Plone site.\r\n\r\nConfiguring pas.plugins.velruse\r\n-------------------------------\r\n\r\nAll configuration are done through the \"*Velruse integration settings*\" configuration, from the Plone\r\ncontrol panel.\r\n\r\nGeneral site settings\r\n~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe first section is for configuration that globally controls how Plone talk to Velruse, and other user interface\r\noptions.\r\n\r\n**Site login enabled**\r\n    If you want to keep enabled the standard Plone site login form or not.\r\n**Authentication services enabled**\r\n    A configuration list of available Velruse backends. See below.\r\n**Connection timeout**\r\n    A timeout value for connection to velruse server.\r\n\r\nThe \"*Authentication services enabled*\" configuration is composed by a set of triplets:\r\n\r\n**Name**\r\n    (optional) A descriptive name of the remote service. For example: \"Facebook\".\r\n**URL or path**\r\n    (mandatory) URL or path to the running Velruse service. Please note: this must be a public URL the user must\r\n    able to access. This is not really mandatory, but if not provided the login method is not displayed in the login form.\r\n**Icon**\r\n    (optional) URL or path for an icon that can recall the service logo.\r\n    \r\n    Default CSS implementation is for 64x64px images.\r\n\r\nURLs above can be absolute (\"http://auth.yourservice.com/login/facebook\") or relative to the portal root URL by\r\nusing a starting slash (\"/velruse/login/facebook\"). The latter will help you keeping Plone and Velruse behind Apache.\r\n\r\nThose information are used to properly configure the new login form.\r\n\r\n.. image:: http://blog.redturtle.it/pypi-images/pas.plugins.velruse/pas.plugins.velruse-0.1a1-01.png/image_large\r\n   :alt: New login form\r\n   :target: http://blog.redturtle.it/pypi-images/pas.plugins.velruse/pas.plugins.velruse-0.1a1-01.png\r\n\r\nPAS plugins configuration\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe other configuration section is relative the Velruse PAS plugin(s).\r\n\r\n**Velruse server host** \r\n    The hostname of the Pyramid Velruse service. For example: ``127.0.0.1:8080`` if Velruse run on the same\r\n    server of Plone.\r\n**Velruse auth info path**\r\n    The configured Pyramid route for calling **auth_info**. Default is ``/velruse/auth_info``.\r\n    \r\n    Keep in mind this warning taken from official Velruse documentation:\r\n    \r\n        The ``/auth_info`` URL should be considered sensitive and only trusted services should be allowed access.\r\n        If an attacker intercepts a an authentication token, they could potentially query /auth_info and learn all of\r\n        the credentials for the user.\r\n\r\n**User roles**\r\n    Set of default roles automatically given to users that perform authentication with the Velruse plugin.\r\n    Default to \"*Members*\" only.\r\n\r\nPlus, you have two additional forms: \"*Users management*\" and \"*Blacklist management*\" to manage user's data\r\ninside the plugin. You can delete data or enableadd the user to the **blacklist**.\r\nBlacklisted users can't authenticate anymore.\r\n\r\nData read by Plone from Velruse\r\n-------------------------------\r\n\r\nRight now only Twitter, Facebook, Linkedin and Google+ are automatically configured:\r\n\r\n* from Twitter: fullname, location, personal home page and portrait\r\n  (no e-mail can be read)\r\n* from Facebook: fullname, e-mail and portrait\r\n* from Linkedin: fullname, e-mail and portrait\r\n  (must properly configure the Linkedin API)\r\n* from Google: fullname and e-mail\r\n\r\nBut Velruse support *a lot* of additional providers; if you want to enable more\r\n(this is true also for custom providers) you must configure the plugin, setting what data try to read\r\nby changing a configuration variable.\r\n\r\n.. code:: python\r\n\r\n    from pas.plugins.velruse.config import PROPERTY_PROVIDERS_INFO\r\n    PROPERTY_PROVIDERS_INFO['yourmagicnewprovider'] = ('fullname', 'email', 'description')\r\n\r\n**TODO**: this will probably change in future, maybe replaced by a blacklist of property you *don't* want to read, or\r\nsomething configurable TTW.\r\n\r\nRequirements\r\n============\r\n\r\nTested with:\r\n\r\n* Plone 3.3\r\n* Plone 4.2\r\n* Plone 4.3\r\n\r\nAll using Velruse 1.1.\r\n\r\nCredits\r\n=======\r\n\r\nDeveloped with the support of `Regione Emilia Romagna`__;\r\nRegione Emilia Romagna supports the `PloneGov initiative`__.\r\n\r\n__ http://www.regione.emilia-romagna.it/\r\n__ http://www.plonegov.it/\r\n\r\nAuthors\r\n=======\r\n\r\nThis product was developed by RedTurtle Technology team.\r\n\r\n.. image:: http://www.redturtle.it/redturtle_banner.png\r\n   :alt: RedTurtle Technology Site\r\n   :target: http://www.redturtle.it/\r\n\r\nSpecial thanks to `Mauro Amico`__ and `Ben Bangert`__ (for accepting a couple of mine pull requests).\r\n\r\n__ https://github.com/mamico\r\n__ https://github.com/bbangert\r\n\r\nChangelog\r\n=========\r\n\r\n0.1.0a1 (2014-05-14)\r\n--------------------\r\n\r\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://plone.org/products/pas.plugins.velruse/", "keywords": "pas velruse plone authentication", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "pas.plugins.velruse", "package_url": "https://pypi.org/project/pas.plugins.velruse/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pas.plugins.velruse/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://plone.org/products/pas.plugins.velruse/"}, "release_url": "https://pypi.org/project/pas.plugins.velruse/0.1.0a1/", "requires_dist": null, "requires_python": null, "summary": "PAS plugin for Plone. Allow users to login using social networks through Velruse", "version": "0.1.0a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A PAS plugin for Plone that <strong>authenticate users from social networks</strong> through the use of <strong>Velruse</strong>.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id12\" rel=\"nofollow\">Introduction</a><ul>\n<li><a href=\"#why-use-velruse-instead-of-rpx-service\" id=\"id13\" rel=\"nofollow\">Why use Velruse instead of RPX service?</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-use\" id=\"id14\" rel=\"nofollow\">How to Use</a><ul>\n<li><a href=\"#installing-velruse\" id=\"id15\" rel=\"nofollow\">Installing Velruse</a></li>\n<li><a href=\"#installing-pas-plugins-velruse\" id=\"id16\" rel=\"nofollow\">Installing pas.plugins.velruse</a></li>\n<li><a href=\"#configuring-pas-plugins-velruse\" id=\"id17\" rel=\"nofollow\">Configuring pas.plugins.velruse</a><ul>\n<li><a href=\"#general-site-settings\" id=\"id18\" rel=\"nofollow\">General site settings</a></li>\n<li><a href=\"#pas-plugins-configuration\" id=\"id19\" rel=\"nofollow\">PAS plugins configuration</a></li>\n</ul>\n</li>\n<li><a href=\"#data-read-by-plone-from-velruse\" id=\"id20\" rel=\"nofollow\">Data read by Plone from Velruse</a></li>\n</ul>\n</li>\n<li><a href=\"#requirements\" id=\"id21\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#credits\" id=\"id22\" rel=\"nofollow\">Credits</a></li>\n<li><a href=\"#authors\" id=\"id23\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#changelog\" id=\"id24\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Introduction</a></h2>\n<p>This Plone plugin let you to enable authentication of social networks users in Plone sites, using <a href=\"http://velruse.readthedocs.org/\" rel=\"nofollow\">Velruse</a>.</p>\n<p>Velruse is a Pyramid application so defined:</p>\n<blockquote>\n<p>Velruse is a set of authentication routines that provide a <strong>unified way</strong> to have a website user authenticate to a\nvariety of different identity providers and/or a variety of different authentication schemes.</p>\n<p>It is similar in some ways to <a href=\"http://www.janrain.com/products/engage\" rel=\"nofollow\">Janrain Engage</a> with the exception of being <strong>open-source</strong>, <strong>locally installable</strong>,\nand <strong>easily pluggable</strong> for custom identity providers and authentication schemes.</p>\n<p>\u2014from Velruse documentation</p>\n</blockquote>\n<div id=\"why-use-velruse-instead-of-rpx-service\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Why use Velruse instead of RPX service?</a></h3>\n<p>Plone ecosystem already have at least one plugin for a general social authentication: <a href=\"http://comlounge.net/rpx/\" rel=\"nofollow\">plonesocial.auth.rpx</a>. But in some\nenvironments (for example: public company or whatever use case where the user\u2019s privacy follow strict rules) this\nkind of service can\u2019t be used.</p>\n<p>Privacy apart, Velruse is <strong>open source* and **easilly pluggable</strong>: you can provide authentication providers for new services\nnot covered by Janrain.</p>\n<p>Check also this <a href=\"http://www.slideshare.net/amleczko/lost-in-o-auth-learn-velruse-and-get-your-life-back\" rel=\"nofollow\">Velruse presentation</a> for more.</p>\n</div>\n</div>\n<div id=\"how-to-use\">\n<h2><a href=\"#id14\" rel=\"nofollow\">How to Use</a></h2>\n<div id=\"installing-velruse\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Installing Velruse</a></h3>\n<p>Velruse is a <a href=\"http://www.pylonsproject.org/projects/pyramid/about\" rel=\"nofollow\">Pyramid</a> application so you must follow the proper <a href=\"http://docs.pylonsproject.org/projects/pyramid/en/1.4-branch/narr/install.html\" rel=\"nofollow\">installation instruction</a> the refer to the\n<a href=\"http://velruse.readthedocs.org/en/latest/usage.html\" rel=\"nofollow\">Velruse setup guide</a>.</p>\n<p>Velruse can be executed as a separate <em>Pyramid service</em> and the Plone plugin needs this configuration.\nIt will talk to Velruse using HTTP requests.</p>\n<p><strong>TODO</strong>: recent Zope version can be executed in the WSGI stack. Maybe future version of the plugin would support\nalso this alternative way? Who knows.</p>\n</div>\n<div id=\"installing-pas-plugins-velruse\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Installing pas.plugins.velruse</a></h3>\n<p>Just add <tt>pas.plugins.velruse</tt> to your buildout configuration and re-run it.</p>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">recipe</span> <span class=\"o\">=</span> <span class=\"s\">plone.recipe.zope2instance</span>\n\n<span class=\"na\">...</span>\n\n<span class=\"na\">eggs</span> <span class=\"o\">=</span><span class=\"s\">\n    ...\n    pas.plugins.velruse</span>\n</pre>\n<p>After Plone restart, add \u201c<strong>Velruse authentication plugin</strong>\u201d product to you Plone site.</p>\n</div>\n<div id=\"configuring-pas-plugins-velruse\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Configuring pas.plugins.velruse</a></h3>\n<p>All configuration are done through the \u201c<em>Velruse integration settings</em>\u201d configuration, from the Plone\ncontrol panel.</p>\n<div id=\"general-site-settings\">\n<h4><a href=\"#id18\" rel=\"nofollow\">General site settings</a></h4>\n<p>The first section is for configuration that globally controls how Plone talk to Velruse, and other user interface\noptions.</p>\n<dl>\n<dt><strong>Site login enabled</strong></dt>\n<dd>If you want to keep enabled the standard Plone site login form or not.</dd>\n<dt><strong>Authentication services enabled</strong></dt>\n<dd>A configuration list of available Velruse backends. See below.</dd>\n<dt><strong>Connection timeout</strong></dt>\n<dd>A timeout value for connection to velruse server.</dd>\n</dl>\n<p>The \u201c<em>Authentication services enabled</em>\u201d configuration is composed by a set of triplets:</p>\n<dl>\n<dt><strong>Name</strong></dt>\n<dd>(optional) A descriptive name of the remote service. For example: \u201cFacebook\u201d.</dd>\n<dt><strong>URL or path</strong></dt>\n<dd>(mandatory) URL or path to the running Velruse service. Please note: this must be a public URL the user must\nable to access. This is not really mandatory, but if not provided the login method is not displayed in the login form.</dd>\n<dt><strong>Icon</strong></dt>\n<dd><p>(optional) URL or path for an icon that can recall the service logo.</p>\n<p>Default CSS implementation is for 64x64px images.</p>\n</dd>\n</dl>\n<p>URLs above can be absolute (\u201c<a href=\"http://auth.yourservice.com/login/facebook\" rel=\"nofollow\">http://auth.yourservice.com/login/facebook</a>\u201d) or relative to the portal root URL by\nusing a starting slash (\u201c/velruse/login/facebook\u201d). The latter will help you keeping Plone and Velruse behind Apache.</p>\n<p>Those information are used to properly configure the new login form.</p>\n<a href=\"http://blog.redturtle.it/pypi-images/pas.plugins.velruse/pas.plugins.velruse-0.1a1-01.png\" rel=\"nofollow\"><img alt=\"New login form\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b45fb76f6dbb7cb4727dc80bed645ff55419704/687474703a2f2f626c6f672e726564747572746c652e69742f707970692d696d616765732f7061732e706c7567696e732e76656c727573652f7061732e706c7567696e732e76656c727573652d302e3161312d30312e706e672f696d6167655f6c61726765\"></a>\n</div>\n<div id=\"pas-plugins-configuration\">\n<h4><a href=\"#id19\" rel=\"nofollow\">PAS plugins configuration</a></h4>\n<p>The other configuration section is relative the Velruse PAS plugin(s).</p>\n<dl>\n<dt><strong>Velruse server host</strong></dt>\n<dd>The hostname of the Pyramid Velruse service. For example: <tt>127.0.0.1:8080</tt> if Velruse run on the same\nserver of Plone.</dd>\n<dt><strong>Velruse auth info path</strong></dt>\n<dd><p>The configured Pyramid route for calling <strong>auth_info</strong>. Default is <tt>/velruse/auth_info</tt>.</p>\n<p>Keep in mind this warning taken from official Velruse documentation:</p>\n<blockquote>\nThe <tt>/auth_info</tt> URL should be considered sensitive and only trusted services should be allowed access.\nIf an attacker intercepts a an authentication token, they could potentially query /auth_info and learn all of\nthe credentials for the user.</blockquote>\n</dd>\n<dt><strong>User roles</strong></dt>\n<dd>Set of default roles automatically given to users that perform authentication with the Velruse plugin.\nDefault to \u201c<em>Members</em>\u201d only.</dd>\n</dl>\n<p>Plus, you have two additional forms: \u201c<em>Users management</em>\u201d and \u201c<em>Blacklist management</em>\u201d to manage user\u2019s data\ninside the plugin. You can delete data or enableadd the user to the <strong>blacklist</strong>.\nBlacklisted users can\u2019t authenticate anymore.</p>\n</div>\n</div>\n<div id=\"data-read-by-plone-from-velruse\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Data read by Plone from Velruse</a></h3>\n<p>Right now only Twitter, Facebook, Linkedin and Google+ are automatically configured:</p>\n<ul>\n<li>from Twitter: fullname, location, personal home page and portrait\n(no e-mail can be read)</li>\n<li>from Facebook: fullname, e-mail and portrait</li>\n<li>from Linkedin: fullname, e-mail and portrait\n(must properly configure the Linkedin API)</li>\n<li>from Google: fullname and e-mail</li>\n</ul>\n<p>But Velruse support <em>a lot</em> of additional providers; if you want to enable more\n(this is true also for custom providers) you must configure the plugin, setting what data try to read\nby changing a configuration variable.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pas.plugins.velruse.config</span> <span class=\"kn\">import</span> <span class=\"n\">PROPERTY_PROVIDERS_INFO</span>\n<span class=\"n\">PROPERTY_PROVIDERS_INFO</span><span class=\"p\">[</span><span class=\"s1\">'yourmagicnewprovider'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'fullname'</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">,</span> <span class=\"s1\">'description'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>TODO</strong>: this will probably change in future, maybe replaced by a blacklist of property you <em>don\u2019t</em> want to read, or\nsomething configurable TTW.</p>\n</div>\n</div>\n<div id=\"requirements\">\n<h2><a href=\"#id21\" rel=\"nofollow\">Requirements</a></h2>\n<p>Tested with:</p>\n<ul>\n<li>Plone 3.3</li>\n<li>Plone 4.2</li>\n<li>Plone 4.3</li>\n</ul>\n<p>All using Velruse 1.1.</p>\n</div>\n<div id=\"credits\">\n<h2><a href=\"#id22\" rel=\"nofollow\">Credits</a></h2>\n<p>Developed with the support of <a href=\"http://www.regione.emilia-romagna.it/\" rel=\"nofollow\">Regione Emilia Romagna</a>;\nRegione Emilia Romagna supports the <a href=\"http://www.plonegov.it/\" rel=\"nofollow\">PloneGov initiative</a>.</p>\n</div>\n<div id=\"authors\">\n<h2><a href=\"#id23\" rel=\"nofollow\">Authors</a></h2>\n<p>This product was developed by RedTurtle Technology team.</p>\n<a href=\"http://www.redturtle.it/\" rel=\"nofollow\"><img alt=\"RedTurtle Technology Site\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ea6aa086619f59e61ad184ae3739fda4ec31e20/687474703a2f2f7777772e726564747572746c652e69742f726564747572746c655f62616e6e65722e706e67\"></a>\n<p>Special thanks to <a href=\"https://github.com/mamico\" rel=\"nofollow\">Mauro Amico</a> and <a href=\"https://github.com/bbangert\" rel=\"nofollow\">Ben Bangert</a> (for accepting a couple of mine pull requests).</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id24\" rel=\"nofollow\">Changelog</a></h2>\n<h2 id=\"a1-2014-05-14\"><span class=\"section-subtitle\">0.1.0a1 (2014-05-14)</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1092297, "releases": {"0.1.0a1": [{"comment_text": "", "digests": {"md5": "b6c7e117ff6c29c7606f875308973fe7", "sha256": "f93d5d1e7e0a2535a7c51e783092f09d6141383319020a4c2bdf8c7b08449a73"}, "downloads": -1, "filename": "pas.plugins.velruse-0.1.0a1.zip", "has_sig": false, "md5_digest": "b6c7e117ff6c29c7606f875308973fe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75160, "upload_time": "2014-05-14T14:52:20", "upload_time_iso_8601": "2014-05-14T14:52:20.243109Z", "url": "https://files.pythonhosted.org/packages/81/ba/92d731357558b4efc2fb550de10ae344e5ad39b2dffb3616d316de776cd3/pas.plugins.velruse-0.1.0a1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6c7e117ff6c29c7606f875308973fe7", "sha256": "f93d5d1e7e0a2535a7c51e783092f09d6141383319020a4c2bdf8c7b08449a73"}, "downloads": -1, "filename": "pas.plugins.velruse-0.1.0a1.zip", "has_sig": false, "md5_digest": "b6c7e117ff6c29c7606f875308973fe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75160, "upload_time": "2014-05-14T14:52:20", "upload_time_iso_8601": "2014-05-14T14:52:20.243109Z", "url": "https://files.pythonhosted.org/packages/81/ba/92d731357558b4efc2fb550de10ae344e5ad39b2dffb3616d316de776cd3/pas.plugins.velruse-0.1.0a1.zip", "yanked": false}], "timestamp": "Fri May  8 02:58:07 2020"}