{"info": {"author": "Adrian Vandier Ast", "author_email": "adrian.vandierast@sewan.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "mutextree\n==========\n|black|\n\nTo protect tree-like resources:\n\n.. image:: https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-voc.png\n\nNodes have to be represented by their fully qualified name.\nFor instance, the node D is represented by [A, B, D]:\n\n.. image :: https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-qualified-name.png\n\nThe algorithm to lock a node is the following:\n\n1. We lock the parent nodes in order:\n\n.. image :: https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step1.png\n\n.. image :: https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step2.png\n\n2. Then we check that no child node is already locked:\n\n.. image :: https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step3.png\n\n3. We lock the wanted node\n\n.. image :: https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step4.png\n\n4. We release all the parent locks that are no longer usefull.\n\n.. image :: https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step5.png\n\n\nInterface targeted to be exactly like threading.Lock_.\n\n.. _threading.Lock : <http://docs.python.org/2/library/threading.html#threading.Lock>`\n\nThe mutex tree is actually designed to use redis and python-redis-lock but the locking backend may be changed.\n\n\nUsage\n------------\n\nTo use mutextree with the redis locks back end, simply instanciate a redis client and create your lock.\nThe redis client should be strict and decode responses itself.\n\n.. code-block:: python\n\n    import redis\n    from mutextree import RedisLockBackend, TreeLock\n\n    redis_client = redis.StrictRedis(decode_responses=True)\n    redis_lock_backend = RedisLockBackend(redis_client)\n    lock = TreeLock(redis_lock_backend, [\"nodeA\"], expire=10, timeout=10, id=1)\n    try:\n        lock.acquire()\n        # do things\n    finally:\n        lock.release()\n\n\nYou can use it as a context manager or a decorator:\n\n.. code-block:: python\n\n    import redis\n    from mutextree import RedisLockBackend, TreeLock, tree_lock\n\n    redis_client = redis.StrictRedis(decode_responses=True)\n    redis_lock_backend = RedisLockBackend(redis_client)\n\n    with TreeLock(redis_lock_backend, [\"nodeA\"], expire=10):\n        # do things\n        pass\n        # release will be automatically called\n\n    # Or with a decorator\n    @tree_lock(redis_lock_backend, [\"nodeA\"], expire=10)\n    def protected_function():\n        # do things\n        pass\n        # release will be automatically called\n\n\nLock has the same basic interface as threading.Lock() with some more methods: acquire, release, refresh.\n\n\nTests\n------\n\nTests should be run under python 2.7 and python 3.6 to tests everything\n\n.. code-block:: console\n\n    $ pip install tox\n    $ tox -e py27,py36\n\nCoverage reports will be the merge of the coverage for py27 and py36.\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SewanDevs/mutextree", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mutextree", "package_url": "https://pypi.org/project/mutextree/", "platform": "", "project_url": "https://pypi.org/project/mutextree/", "project_urls": {"Homepage": "https://github.com/SewanDevs/mutextree"}, "release_url": "https://pypi.org/project/mutextree/1.2.3/", "requires_dist": null, "requires_python": "", "summary": "Protect tree-like resources", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p>To protect tree-like resources:</p>\n<img alt=\"https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-voc.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90ddbc16e74c843d4abd9978a5fe130729d777b9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f536577616e446576732f6d75746578747265652f6d61737465722d6769746875622f696d616765732f6d75746578747265652d766f632e706e67\">\n<p>Nodes have to be represented by their fully qualified name.\nFor instance, the node D is represented by [A, B, D]:</p>\n<img alt=\"https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-qualified-name.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a03142af69fb53b3e2f5f46b15c08d26e7d2d70/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f536577616e446576732f6d75746578747265652f6d61737465722d6769746875622f696d616765732f6d75746578747265652d7175616c69666965642d6e616d652e706e67\">\n<p>The algorithm to lock a node is the following:</p>\n<ol>\n<li>We lock the parent nodes in order:</li>\n</ol>\n<img alt=\"https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step1.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9118de087c5ebd17f52d20dd4eb4d1852a63f148/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f536577616e446576732f6d75746578747265652f6d61737465722d6769746875622f696d616765732f6d75746578747265652d73746570312e706e67\">\n<img alt=\"https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step2.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a690b15be9f499feb28fa3794f4ca420a6c5ea91/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f536577616e446576732f6d75746578747265652f6d61737465722d6769746875622f696d616765732f6d75746578747265652d73746570322e706e67\">\n<ol>\n<li>Then we check that no child node is already locked:</li>\n</ol>\n<img alt=\"https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step3.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d0eeffd41c3f9993f9217f7d6dff0e5b4555231/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f536577616e446576732f6d75746578747265652f6d61737465722d6769746875622f696d616765732f6d75746578747265652d73746570332e706e67\">\n<ol>\n<li>We lock the wanted node</li>\n</ol>\n<img alt=\"https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step4.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4417667ecfcce387ea2872040b2e2fae33aaebed/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f536577616e446576732f6d75746578747265652f6d61737465722d6769746875622f696d616765732f6d75746578747265652d73746570342e706e67\">\n<ol>\n<li>We release all the parent locks that are no longer usefull.</li>\n</ol>\n<img alt=\"https://raw.githubusercontent.com/SewanDevs/mutextree/master-github/images/mutextree-step5.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d44dbfff4dd52f1a1df943cfc9ecb110d6ea3404/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f536577616e446576732f6d75746578747265652f6d61737465722d6769746875622f696d616765732f6d75746578747265652d73746570352e706e67\">\n<p>Interface targeted to be exactly like <a href=\"&lt;http://docs.python.org/2/library/threading.html#threading.Lock&gt;%60\" rel=\"nofollow\">threading.Lock</a>.</p>\n<p>The mutex tree is actually designed to use redis and python-redis-lock but the locking backend may be changed.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use mutextree with the redis locks back end, simply instanciate a redis client and create your lock.\nThe redis client should be strict and decode responses itself.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">redis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mutextree</span> <span class=\"kn\">import</span> <span class=\"n\">RedisLockBackend</span><span class=\"p\">,</span> <span class=\"n\">TreeLock</span>\n\n<span class=\"n\">redis_client</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">StrictRedis</span><span class=\"p\">(</span><span class=\"n\">decode_responses</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">redis_lock_backend</span> <span class=\"o\">=</span> <span class=\"n\">RedisLockBackend</span><span class=\"p\">(</span><span class=\"n\">redis_client</span><span class=\"p\">)</span>\n<span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"n\">TreeLock</span><span class=\"p\">(</span><span class=\"n\">redis_lock_backend</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"nodeA\"</span><span class=\"p\">],</span> <span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span>\n    <span class=\"c1\"># do things</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n</pre>\n<p>You can use it as a context manager or a decorator:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">redis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mutextree</span> <span class=\"kn\">import</span> <span class=\"n\">RedisLockBackend</span><span class=\"p\">,</span> <span class=\"n\">TreeLock</span><span class=\"p\">,</span> <span class=\"n\">tree_lock</span>\n\n<span class=\"n\">redis_client</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">StrictRedis</span><span class=\"p\">(</span><span class=\"n\">decode_responses</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">redis_lock_backend</span> <span class=\"o\">=</span> <span class=\"n\">RedisLockBackend</span><span class=\"p\">(</span><span class=\"n\">redis_client</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">TreeLock</span><span class=\"p\">(</span><span class=\"n\">redis_lock_backend</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"nodeA\"</span><span class=\"p\">],</span> <span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do things</span>\n    <span class=\"k\">pass</span>\n    <span class=\"c1\"># release will be automatically called</span>\n\n<span class=\"c1\"># Or with a decorator</span>\n<span class=\"nd\">@tree_lock</span><span class=\"p\">(</span><span class=\"n\">redis_lock_backend</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"nodeA\"</span><span class=\"p\">],</span> <span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">protected_function</span><span class=\"p\">():</span>\n    <span class=\"c1\"># do things</span>\n    <span class=\"k\">pass</span>\n    <span class=\"c1\"># release will be automatically called</span>\n</pre>\n<p>Lock has the same basic interface as threading.Lock() with some more methods: acquire, release, refresh.</p>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Tests should be run under python 2.7 and python 3.6 to tests everything</p>\n<pre><span class=\"gp\">$</span> pip install tox\n<span class=\"gp\">$</span> tox -e py27,py36\n</pre>\n<p>Coverage reports will be the merge of the coverage for py27 and py36.</p>\n</div>\n\n          </div>"}, "last_serial": 5267822, "releases": {"1.2.3": [{"comment_text": "", "digests": {"md5": "df20fed12350c60dfeb2fe88a6d42db6", "sha256": "e0e4d32a85af51dd3db7bc94f26febd75bbac803a1509f53a3614c0fa483892c"}, "downloads": -1, "filename": "mutextree-1.2.3.tar.gz", "has_sig": false, "md5_digest": "df20fed12350c60dfeb2fe88a6d42db6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189493, "upload_time": "2019-05-14T14:46:17", "upload_time_iso_8601": "2019-05-14T14:46:17.697555Z", "url": "https://files.pythonhosted.org/packages/cd/9c/675bf05e768d60f3e1006f3d476d6db452c714e24d85160c47e934240f49/mutextree-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df20fed12350c60dfeb2fe88a6d42db6", "sha256": "e0e4d32a85af51dd3db7bc94f26febd75bbac803a1509f53a3614c0fa483892c"}, "downloads": -1, "filename": "mutextree-1.2.3.tar.gz", "has_sig": false, "md5_digest": "df20fed12350c60dfeb2fe88a6d42db6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189493, "upload_time": "2019-05-14T14:46:17", "upload_time_iso_8601": "2019-05-14T14:46:17.697555Z", "url": "https://files.pythonhosted.org/packages/cd/9c/675bf05e768d60f3e1006f3d476d6db452c714e24d85160c47e934240f49/mutextree-1.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:03 2020"}