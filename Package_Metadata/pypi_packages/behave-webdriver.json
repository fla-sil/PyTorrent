{"info": {"author": "Spencer Young", "author_email": "spencer.young@spyoung.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Browsers", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Software Development :: Testing :: BDD"], "description": "behave-webdriver\n================\n\nbehave-webdriver is a step library intended to allow users to easily write `selenium`_ webdriver tests with the\nbehave BDD testing framework.\nInspired by the `webdriverio/cucumber-boilerplate`_ project.\n\n|docs| |status| |version| |pyversions| |coverage|\n\nFor more details, see the `behave-webdriver documentation`_\n\n.. image:: https://raw.githubusercontent.com/spyoungtech/behave-webdriver/master/docs/_static/behave-webdriver.gif\n\n\n\n\nInstallation\n============\n\nInstallation is easy via pip. The install will require ``behave`` and ``selenium``.::\n\n    pip install behave-webdriver\n\nUsing webdrivers\n----------------\n\nSelenium requires that you provide executables for the webdriver you want to use. Further, unless you specify the path to\nthe binary explicitly, selenium expects that this executable is in PATH. See these\n`driver installation notes`_ for more details.\n\n\nUsage\n=====\n\nBasic usage of this library with behave requires the following steps:\n\n1. import the step implementations\n2. set the ``behave_driver`` attribute on the behave ``context`` in your ``environment.py`` file.\n3. write your feature file\n4. run ``behave``\n\nImporting the step implementations\n----------------------------------\n\nIn order for your feature file steps to match our step implementations, behave needs to find them in your project.\nThis is as simple as importing our step definitions into your own step implementation file.\n\n.. code-block:: python\n\n   # features/steps/webdriver_example.py\n   from behave_webdriver.steps import *\n\n\nFor more information about `step implementations`_, see the behave tutorial.\n\n\nSet behave_driver in the environment\n------------------------------------\n\nOur step implementations specifically look at the behave context for a ``behave_driver`` attribute to use to run your tests.\nIn order for that to work, you'll have to provide this attribute in your ``environment.py`` file.\n\n.. code-block:: python\n\n   # features/environment.py\n   import behave_webdriver\n\n   def before_all(context):\n       context.behave_driver = behave_webdriver.Chrome()\n\n   def after_all(context):\n       # cleanup after tests run\n       context.behave_driver.quit()\n\n\nThe webdriver classes provided by behave-webdriver inherit from selenium's webdriver classes, so they will accept all\nsame positional and keyword arguments that selenium accepts.\n\nSome webdrivers, such as Chrome, provide special classmethods like ``Chrome.headless`` which instantiates ``Chrome`` with\noptions to run headless. This is useful, for example in headless testing environments.\n\n.. code-block:: python\n\n   def before_all(context):\n       context.behave_driver = behave_webdriver.Chrome.headless()\n\n\nUsing a fixture\n^^^^^^^^^^^^^^^\n\n*New in 0.1.1*\n\nYou may also find it convenient to use a fixture to setup your driver as well. For example, to use our fixture with Firefox\n\n.. code-block:: python\n\n    from behave_webdriver.fixtures import fixture_browser\n    def before_all(context):\n        use_fixture(fixture_browser, context, webdriver='Firefox')\n\nThis will also ensure that the browser is torn down at the corresponding `cleanup point`_.\n\n.. _cleanup point: http://behave.readthedocs.io/en/stable/fixtures.html#fixture-cleanup-points\n\nWriting the feature file\n------------------------\n\n.. code-block:: gherkin\n\n    # my-minimal-project/features/myFeature.feature\n    Feature: Sample Snippets test\n    As a developer\n    I should be able to use given text snippets\n\n    Scenario: open URL\n        Given the page url is not \"http://webdriverjs.christian-bromann.com/\"\n        And   I open the url \"http://webdriverjs.christian-bromann.com/\"\n        Then  I expect that the url is \"http://webdriverjs.christian-bromann.com/\"\n        And   I expect that the url is not \"http://google.com\"\n\n\n    Scenario: click on link\n        Given the title is not \"two\"\n        And   I open the url \"http://webdriverjs.christian-bromann.com/\"\n        When  I click on the link \"two\"\n        Then  I expect that the title is \"two\"\n\nRun behave\n----------\n\nThen run the tests, just like any other behave test\n\n.. code-block:: bash\n\n    behave\n\nYou should then see an output as follows::\n\n    Feature: Sample Snippets test # features/myFeature.feature:2\n      As a developer\n      I should be able to use given text snippets\n      Scenario: open URL                                                          # features/myFeature.feature:6\n        Given the page url is not \"http://webdriverjs.christian-bromann.com/\"     # ../../behave_webdriver/steps/given.py:136 0.012s\n        And I open the url \"http://webdriverjs.christian-bromann.com/\"            # ../../behave_webdriver/steps/given.py:10 1.414s\n        Then I expect that the url is \"http://webdriverjs.christian-bromann.com/\" # ../../behave_webdriver/steps/then.py:102 0.007s\n        And I expect that the url is not \"http://google.com\"                      # ../../behave_webdriver/steps/then.py:102 0.007s\n\n      Scenario: click on link                                          # features/myFeature.feature:13\n        Given the title is not \"two\"                                   # ../../behave_webdriver/steps/given.py:81 0.006s\n        And I open the url \"http://webdriverjs.christian-bromann.com/\" # ../../behave_webdriver/steps/given.py:10 0.224s\n        When I click on the link \"two\"                                 # ../../behave_webdriver/steps/when.py:21 0.622s\n        Then I expect that the title is \"two\"                          # ../../behave_webdriver/steps/then.py:10 0.006s\n\n    1 feature passed, 0 failed, 0 skipped\n    2 scenarios passed, 0 failed, 0 skipped\n    8 steps passed, 0 failed, 0 skipped, 0 undefined\n    Took 0m2.298s\n\nAdvanced usage; extending behave-webdriver\n==========================================\n\nbehave-webdriver is designed with **you** in-mind. You are free to extend the behavior of our webdriver classes to suit your\nunique needs. You can subclass our webdriver classes, use a custom selenium webdriver, write your own mixin, or use\na mixin somebody else provides for selenium.\n\n\nExample: selenium-requests\n--------------------------\n\n`selenium-requests`_ is a preexisting project that adds functionality of the popular ``requests`` library to selenium.\nIt is simple to use ``selenium-requests`` with behave-webdriver.\nThe following, and other examples, are available in the repo ``examples`` directory and in the full documentation.\n\n.. code-block:: python\n\n   # examples/selenium-requests/features/environment.py\n   from selenium import webdriver # or any custom webdriver\n   from behave_webdriver.driver import BehaveDriverMixin\n   from seleniumrequests import RequestMixin # or your own mixin\n\n   class BehaveRequestDriver(BehaveDriverMixin, RequestMixin, webdriver.Chrome):\n       pass\n\n   def before_all(context):\n       context.behave_driver = BehaveRequestDriver()\n.. code-block:: python\n\n   # examples/selenium-requests/features/steps/selenium_steps.py\n   from behave import *\n   from behave_webdriver.steps import *\n   from urllib.parse import urljoin\n\n   @given('I send a {method} request to the page \"{page}\"')\n   def send_request_page(context, method, page):\n       url = urljoin(context.base_url, page)\n       context.response = context.behave_driver.request(method, url)\n\n   @then('I expect the response text contains \"{text}\"')\n   def check_response_text_contains(context, text):\n       assert text in context.response.text\n.. code-block:: gherkin\n\n   # examples/selenium-requests/features/selenium-requests.feature\n   Feature: Using selenium-requests\n     As a developer\n     I should be able to extend behave-webdriver with selenium-requests\n\n     Scenario: use selenium-requests with behave-webdriver\n       # use a behave-webdriver step\n       Given the base url is \"http://127.0.0.1:8000\"\n       # use your own steps using selenium-requests features\n       Given I send a GET request to the page \"/\"\n       Then I expect the response text contains \"<h1>DEMO APP</h1>\"\n\nAssuming you're in the repository root (and have the demo app running) just run like any other project with ``behave``\n\nResults \u2728\n^^^^^^^^^^\n\n.. code-block:: \n\n   (behave-webdriver) $ behave examples/selenium-requests/features\n\n   DevTools listening on ws://127.0.0.1:12646/devtools/browser/1fe75b44-1c74-49fa-8e77-36c54d50cd24\n   Feature: Using selenium-requests # examples/selenium-requests/features/requests.feature:1\n     As a developer\n     I should be able to extend behave-webdriver with selenium-requests\n     Scenario: use selenium-requests with behave-webdriver          # examples/selenium-requests/features/requests.feature:6\n       Given the base url is \"http://127.0.0.1:8000\"                # behave_webdriver/steps/actions.py:162\n       Given I send a GET request to the page \"/\"                   # examples/selenium-requests/features/steps/selenium_steps.py:11\n       Then I expect the response text contains \"<h1>DEMO APP</h1>\" # examples/selenium-requests/features/steps/selenium_steps.py:17\n\n   1 feature passed, 0 failed, 0 skipped\n   1 scenario passed, 0 failed, 0 skipped\n   3 steps passed, 0 failed, 0 skipped, 0 undefined\n   Took 0m1.385s\n\n\nGetting help \u26d1\n--------------\n\nIf you have any unanswered questions or encounter any issues, please feel welcome to raise an issue. We recognize that\ntesters come in all different shapes, sizes, and backgrounds. We welcome any and all questions that may arise from using\nthis library.\n\nContributing\n------------\n\nContributions are very much welcomed! If you have ideas or suggestions, please raise an issue or submit a PR.\n\nList of step definitions \ud83d\udcdd\n===========================\n\nWe support all the steps supported by webdriverio/cucumber-boilerplate.\nWe also support some additional niceties and plan to add more step definitions.\n\n\nGiven Steps \ud83d\udc77\n--------------\n\n- ``I open the site \"([^\"]*)?\"``\n- ``I open the url \"([^\"]*)?\"``\n- ``I have a screen that is ([\\d]+) by ([\\d]+) pixels``\n- ``I have a screen that is ([\\d]+) pixels (broad|tall)``\n- ``I have closed all but the first (window|tab)``\n- ``I pause for (\\d+)*ms``\n- ``a (alertbox|confirmbox|prompt) is( not)* opened``\n- ``the base url is \"([^\"]*)?\"``\n- ``the checkbox \"([^\"]*)?\" is( not)* checked``\n- ``the cookie \"([^\"]*)?\" contains( not)* the value \"([^\"]*)?\"``\n- ``the cookie \"([^\"]*)?\" does( not)* exist``\n- ``the element \"([^\"]*)?\" contains( not)* the same text as element \"([^\"]*)?\"``\n- ``the element \"([^\"]*)?\" is( not)* ([\\d]+)px (broad|tall)``\n- ``the element \"([^\"]*)?\" is( not)* empty``\n- ``the element \"([^\"]*)?\" is( not)* enabled``\n- ``the element \"([^\"]*)?\" is( not)* positioned at ([\\d]+)px on the (x|y) axis``\n- ``the element \"([^\"]*)?\" is( not)* selected``\n- ``the element \"([^\"]*)?\" is( not)* visible``\n- ``the element \"([^\"]*)?\"( not)* contains any text``\n- ``the element \"([^\"]*)?\"( not)* contains the text \"([^\"]*)?\"``\n- ``the element \"([^\"]*)?\"( not)* matches the text \"([^\"]*)?\"``\n- ``the page url is( not)* \"([^\"]*)?\"``\n- ``the title is( not)* \"([^\"]*)?\"``\n- ``the( css)* attribute \"([^\"]*)?\" from element \"([^\"]*)?\" is( not)* \"([^\"]*)?\"``\n- ``there is (an|no) element \"([^\"]*)?\" on the page``\n\n\n\nWhen Steps \u25b6\ufe0f\n-------------\n\n- ``I open the site \"([^\"]*)?\"``\n- ``I open the url \"([^\"]*)?\"``\n- ``I accept the (alertbox|confirmbox|prompt)``\n- ``I add \"{value}\" to the inputfield \"{element}\"``\n- ``I clear the inputfield \"{element}\"``\n- ``I click on the button \"{element}\"``\n- ``I click on the element \"{element}\"``\n- ``I click on the link \"{link_text}\"``\n- ``I close the last opened (tab|window)``\n- ``I delete the cookie \"{cookie_key}\"``\n- ``I dismiss the (alertbox|confirmbox|prompt)``\n- ``I doubleclick on the element \"{element}\"``\n- ``I drag element \"{from_element}\" to element \"{to_element}\"``\n- ``I enter \"([^\"]*)?\" into the (alertbox|confirmbox|prompt)``\n- ``I focus the last opened (tab|window)``\n- ``I move to element \"{element}\" with an offset of {x_offset:d},{y_offset:d}``\n- ``I move to element \"{element}\"``\n- ``I pause for {milliseconds:d}ms``\n- ``I press \"{key}\"``\n- ``I scroll to element \"{element}\"``\n- ``I select the option with the (text|value|name) \"([^\"]*)?\" for element \"([^\"]*)?\"``\n- ``I select the {nth} option for element \"{element}\"``\n- ``I set \"{value}\" to the inputfield \"{element}\"``\n- ``I set a cookie \"{cookie_key}\" with the content \"{value}\"``\n- ``I submit the form \"{element}\"``\n\nThen Steps \u2714\ufe0f\n-------------\n\n- ``I expect the screen is ([\\d]+) by ([\\d]+) pixels``\n- ``I expect a new (window|tab) has( not)* been opened``\n- ``I expect that a (alertbox|confirmbox|prompt) is( not)* opened``\n- ``I expect that a (alertbox|confirmbox|prompt)( not)* contains the text \"([^\"]*)?\"``\n- ``I expect that checkbox \"([^\"]*)?\" is( not)* checked``\n- ``I expect that cookie \"([^\"]*)?\"( not)* contains \"([^\"]*)?\"``\n- ``I expect that cookie \"([^\"]*)?\"( not)* exists``\n- ``I expect that element \"([^\"]*)?\" (has|does not have) the class \"([^\"]*)?\"``\n- ``I expect that element \"([^\"]*)?\" becomes( not)* visible``\n- ``I expect that element \"([^\"]*)?\" does( not)* exist``\n- ``I expect that element \"([^\"]*)?\" is( not)* ([\\d]+)px (broad|tall)``\n- ``I expect that element \"([^\"]*)?\" is( not)* empty``\n- ``I expect that element \"([^\"]*)?\" is( not)* enabled``\n- ``I expect that element \"([^\"]*)?\" is( not)* focused``\n- ``I expect that element \"([^\"]*)?\" is( not)* positioned at ([\\d]+)px on the (x|y) axis``\n- ``I expect that element \"([^\"]*)?\" is( not)* selected``\n- ``I expect that element \"([^\"]*)?\" is( not)* visible``\n- ``I expect that element \"([^\"]*)?\" is( not)* within the viewport``\n- ``I expect that element \"([^\"]*)?\"( not)* contains any text``\n- ``I expect that element \"([^\"]*)?\"( not)* contains the same text as element \"([^\"]*)?\"``\n- ``I expect that element \"([^\"]*)?\"( not)* contains the text \"([^\"]*)?\"``\n- ``I expect that element \"([^\"]*)?\"( not)* matches the text \"([^\"]*)?\"``\n- ``I expect that the path is( not)* \"([^\"]*)?\"``\n- ``I expect that the title is( not)* \"([^\"]*)?\"``\n- ``I expect that the url is( not)* \"([^\"]*)?\"``\n- ``I expect that the( css)* attribute \"([^\"]*)?\" from element \"([^\"]*)?\" is( not)* \"([^\"]*)?\"``\n- ``I expect the url \"([^\"]*)?\" is opened in a new (tab|window)``\n- ``I expect the url to( not)* contain \"([^\"]*)?\"``\n- ``I wait on element \"([^\"]*)?\"(?: for (\\d+)ms)*(?: to( not)* (be checked|be enabled|be selected|be visible|contain a text|contain a value|exist))*``\n\n\nAcknowledgements \u2764\ufe0f\n===================\n\nSpecial thanks to the authors and contributors of the `webdriverio/cucumber-boilerplate`_ project\n\nSpecial thanks to the authors and contributors of `behave`_\n\n\n\n\n.. _selenium-requests: https://github.com/cryzed/Selenium-Requests\n\n.. _environment controls: http://behave.readthedocs.io/en/stable/tutorial.html#environmental-controls\n\n.. _fixtures: http://behave.readthedocs.io/en/stable/fixtures.html\n\n.. _step implementations: http://behave.readthedocs.io/en/stable/tutorial.html#python-step-implementations\n\n.. _driver installation notes: http://selenium-python.readthedocs.io/installation.html#drivers\n\n.. _behave-webdriver documentation: http://behave-webdriver.readthedocs.io/en/stable/\n\n.. _selenium: https://github.com/SeleniumHQ/selenium\n\n.. _behave: https://github.com/behave/behave\n\n.. _webdriverio/cucumber-boilerplate: https://github.com/webdriverio/cucumber-boilerplate\n\n\n\n.. |docs| image:: https://readthedocs.org/projects/behave-webdriver/badge/?version=stable\n    :target: http://behave-webdriver.readthedocs.io/en/stable/\n\n.. |status| image:: https://travis-ci.org/spyoungtech/behave-webdriver.svg?branch=master\n    :target: https://travis-ci.org/spyoungtech/behave-webdriver\n\n.. |version| image:: https://img.shields.io/pypi/v/behave-webdriver.svg?colorB=blue\n    :target: https://pypi.org/project/behave-webdriver/\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/behave-webdriver.svg?\n    :target: https://pypi.org/project/behave-webdriver/\n\n.. |coverage| image:: https://coveralls.io/repos/github/spyoungtech/behave-webdriver/badge.svg\n    :target: https://coveralls.io/github/spyoungtech/behave-webdriver\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spyoungtech/behave-webdriver/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "behave-webdriver", "package_url": "https://pypi.org/project/behave-webdriver/", "platform": "any", "project_url": "https://pypi.org/project/behave-webdriver/", "project_urls": {"Homepage": "https://github.com/spyoungtech/behave-webdriver/"}, "release_url": "https://pypi.org/project/behave-webdriver/0.3.0/", "requires_dist": ["selenium", "behave"], "requires_python": "", "summary": "Selenium webdriver step library for behave BDD testing", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"behave-webdriver\">\n<h2>behave-webdriver</h2>\n<p>behave-webdriver is a step library intended to allow users to easily write <a href=\"https://github.com/SeleniumHQ/selenium\" rel=\"nofollow\">selenium</a> webdriver tests with the\nbehave BDD testing framework.\nInspired by the <a href=\"https://github.com/webdriverio/cucumber-boilerplate\" rel=\"nofollow\">webdriverio/cucumber-boilerplate</a> project.</p>\n<p><a href=\"http://behave-webdriver.readthedocs.io/en/stable/\" rel=\"nofollow\"><img alt=\"docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdd64e7c2e51352888e353317312d540cfc1453e/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6265686176652d7765626472697665722f62616467652f3f76657273696f6e3d737461626c65\"></a> <a href=\"https://travis-ci.org/spyoungtech/behave-webdriver\" rel=\"nofollow\"><img alt=\"status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/037a18a0ca60845ecabea8220915577f06a0d1b7/68747470733a2f2f7472617669732d63692e6f72672f7370796f756e67746563682f6265686176652d7765626472697665722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/behave-webdriver/\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4062416aa179ea4de7900cd8e186d22556e427d7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6265686176652d7765626472697665722e7376673f636f6c6f72423d626c7565\"></a> <a href=\"https://pypi.org/project/behave-webdriver/\" rel=\"nofollow\"><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d60e36a580d6103f3850576f56e1a160dc8f4785/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6265686176652d7765626472697665722e7376673f\"></a> <a href=\"https://coveralls.io/github/spyoungtech/behave-webdriver\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1209d1a7617abc602559937ed642efe3b20404f3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7370796f756e67746563682f6265686176652d7765626472697665722f62616467652e737667\"></a></p>\n<p>For more details, see the <a href=\"http://behave-webdriver.readthedocs.io/en/stable/\" rel=\"nofollow\">behave-webdriver documentation</a></p>\n<img alt=\"https://raw.githubusercontent.com/spyoungtech/behave-webdriver/master/docs/_static/behave-webdriver.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00fc9a71c6e4a471bc1e40b3d772bdcd1c94322e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7370796f756e67746563682f6265686176652d7765626472697665722f6d61737465722f646f63732f5f7374617469632f6265686176652d7765626472697665722e676966\">\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installation is easy via pip. The install will require <tt>behave</tt> and <tt>selenium</tt>.:</p>\n<pre>pip install behave-webdriver\n</pre>\n<div id=\"using-webdrivers\">\n<h3>Using webdrivers</h3>\n<p>Selenium requires that you provide executables for the webdriver you want to use. Further, unless you specify the path to\nthe binary explicitly, selenium expects that this executable is in PATH. See these\n<a href=\"http://selenium-python.readthedocs.io/installation.html#drivers\" rel=\"nofollow\">driver installation notes</a> for more details.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Basic usage of this library with behave requires the following steps:</p>\n<ol>\n<li>import the step implementations</li>\n<li>set the <tt>behave_driver</tt> attribute on the behave <tt>context</tt> in your <tt>environment.py</tt> file.</li>\n<li>write your feature file</li>\n<li>run <tt>behave</tt></li>\n</ol>\n<div id=\"importing-the-step-implementations\">\n<h3>Importing the step implementations</h3>\n<p>In order for your feature file steps to match our step implementations, behave needs to find them in your project.\nThis is as simple as importing our step definitions into your own step implementation file.</p>\n<pre><span class=\"c1\"># features/steps/webdriver_example.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">behave_webdriver.steps</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>For more information about <a href=\"http://behave.readthedocs.io/en/stable/tutorial.html#python-step-implementations\" rel=\"nofollow\">step implementations</a>, see the behave tutorial.</p>\n</div>\n<div id=\"set-behave-driver-in-the-environment\">\n<h3>Set behave_driver in the environment</h3>\n<p>Our step implementations specifically look at the behave context for a <tt>behave_driver</tt> attribute to use to run your tests.\nIn order for that to work, you\u2019ll have to provide this attribute in your <tt>environment.py</tt> file.</p>\n<pre><span class=\"c1\"># features/environment.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">behave_webdriver</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">before_all</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">behave_driver</span> <span class=\"o\">=</span> <span class=\"n\">behave_webdriver</span><span class=\"o\">.</span><span class=\"n\">Chrome</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">after_all</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># cleanup after tests run</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">behave_driver</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">()</span>\n</pre>\n<p>The webdriver classes provided by behave-webdriver inherit from selenium\u2019s webdriver classes, so they will accept all\nsame positional and keyword arguments that selenium accepts.</p>\n<p>Some webdrivers, such as Chrome, provide special classmethods like <tt>Chrome.headless</tt> which instantiates <tt>Chrome</tt> with\noptions to run headless. This is useful, for example in headless testing environments.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">before_all</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">behave_driver</span> <span class=\"o\">=</span> <span class=\"n\">behave_webdriver</span><span class=\"o\">.</span><span class=\"n\">Chrome</span><span class=\"o\">.</span><span class=\"n\">headless</span><span class=\"p\">()</span>\n</pre>\n<div id=\"using-a-fixture\">\n<h4>Using a fixture</h4>\n<p><em>New in 0.1.1</em></p>\n<p>You may also find it convenient to use a fixture to setup your driver as well. For example, to use our fixture with Firefox</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">behave_webdriver.fixtures</span> <span class=\"kn\">import</span> <span class=\"n\">fixture_browser</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_all</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">use_fixture</span><span class=\"p\">(</span><span class=\"n\">fixture_browser</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">webdriver</span><span class=\"o\">=</span><span class=\"s1\">'Firefox'</span><span class=\"p\">)</span>\n</pre>\n<p>This will also ensure that the browser is torn down at the corresponding <a href=\"http://behave.readthedocs.io/en/stable/fixtures.html#fixture-cleanup-points\" rel=\"nofollow\">cleanup point</a>.</p>\n</div>\n</div>\n<div id=\"writing-the-feature-file\">\n<h3>Writing the feature file</h3>\n<pre><span class=\"c\"># my-minimal-project/features/myFeature.feature</span><span class=\"nf\">\n</span><span class=\"k\">Feature:</span><span class=\"nf\"> Sample Snippets test\nAs a developer\nI should be able to use given text snippets\n\n</span><span class=\"k\">Scenario:</span><span class=\"nf\"> open URL\n</span><span class=\"k\">    Given </span><span class=\"nf\">the page url is not \"</span><span class=\"s\">http://webdriverjs.christian-bromann.com/</span><span class=\"nf\">\"\n    </span><span class=\"k\">And </span><span class=\"nf\">  I open the url \"</span><span class=\"s\">http://webdriverjs.christian-bromann.com/</span><span class=\"nf\">\"</span><span class=\"k\"></span><span class=\"nf\">\n    </span><span class=\"k\">Then </span><span class=\"nf\"> I expect that the url is \"</span><span class=\"s\">http://webdriverjs.christian-bromann.com/</span><span class=\"nf\">\"</span><span class=\"k\"></span><span class=\"nf\">\n    </span><span class=\"k\">And </span><span class=\"nf\">  I expect that the url is not \"</span><span class=\"s\">http://google.com</span><span class=\"nf\">\"</span><span class=\"k\"></span><span class=\"nf\">\n\n\n</span><span class=\"k\">Scenario:</span><span class=\"nf\"> click on link\n</span><span class=\"k\">    Given </span><span class=\"nf\">the title is not \"</span><span class=\"s\">two</span><span class=\"nf\">\"</span><span class=\"k\"></span><span class=\"nf\">\n    </span><span class=\"k\">And </span><span class=\"nf\">  I open the url \"</span><span class=\"s\">http://webdriverjs.christian-bromann.com/</span><span class=\"nf\">\"</span><span class=\"k\"></span><span class=\"nf\">\n    </span><span class=\"k\">When </span><span class=\"nf\"> I click on the link \"</span><span class=\"s\">two</span><span class=\"nf\">\"</span><span class=\"k\"></span><span class=\"nf\">\n    </span><span class=\"k\">Then </span><span class=\"nf\"> I expect that the title is \"</span><span class=\"s\">two</span><span class=\"nf\">\"</span><span class=\"k\"></span>\n</pre>\n</div>\n<div id=\"run-behave\">\n<h3>Run behave</h3>\n<p>Then run the tests, just like any other behave test</p>\n<pre>behave\n</pre>\n<p>You should then see an output as follows:</p>\n<pre>Feature: Sample Snippets test # features/myFeature.feature:2\n  As a developer\n  I should be able to use given text snippets\n  Scenario: open URL                                                          # features/myFeature.feature:6\n    Given the page url is not \"http://webdriverjs.christian-bromann.com/\"     # ../../behave_webdriver/steps/given.py:136 0.012s\n    And I open the url \"http://webdriverjs.christian-bromann.com/\"            # ../../behave_webdriver/steps/given.py:10 1.414s\n    Then I expect that the url is \"http://webdriverjs.christian-bromann.com/\" # ../../behave_webdriver/steps/then.py:102 0.007s\n    And I expect that the url is not \"http://google.com\"                      # ../../behave_webdriver/steps/then.py:102 0.007s\n\n  Scenario: click on link                                          # features/myFeature.feature:13\n    Given the title is not \"two\"                                   # ../../behave_webdriver/steps/given.py:81 0.006s\n    And I open the url \"http://webdriverjs.christian-bromann.com/\" # ../../behave_webdriver/steps/given.py:10 0.224s\n    When I click on the link \"two\"                                 # ../../behave_webdriver/steps/when.py:21 0.622s\n    Then I expect that the title is \"two\"                          # ../../behave_webdriver/steps/then.py:10 0.006s\n\n1 feature passed, 0 failed, 0 skipped\n2 scenarios passed, 0 failed, 0 skipped\n8 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m2.298s\n</pre>\n</div>\n</div>\n<div id=\"advanced-usage-extending-behave-webdriver\">\n<h2>Advanced usage; extending behave-webdriver</h2>\n<p>behave-webdriver is designed with <strong>you</strong> in-mind. You are free to extend the behavior of our webdriver classes to suit your\nunique needs. You can subclass our webdriver classes, use a custom selenium webdriver, write your own mixin, or use\na mixin somebody else provides for selenium.</p>\n<div id=\"example-selenium-requests\">\n<h3>Example: selenium-requests</h3>\n<p><a href=\"https://github.com/cryzed/Selenium-Requests\" rel=\"nofollow\">selenium-requests</a> is a preexisting project that adds functionality of the popular <tt>requests</tt> library to selenium.\nIt is simple to use <tt><span class=\"pre\">selenium-requests</span></tt> with behave-webdriver.\nThe following, and other examples, are available in the repo <tt>examples</tt> directory and in the full documentation.</p>\n<pre><span class=\"c1\"># examples/selenium-requests/features/environment.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span> <span class=\"c1\"># or any custom webdriver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">behave_webdriver.driver</span> <span class=\"kn\">import</span> <span class=\"n\">BehaveDriverMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">seleniumrequests</span> <span class=\"kn\">import</span> <span class=\"n\">RequestMixin</span> <span class=\"c1\"># or your own mixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BehaveRequestDriver</span><span class=\"p\">(</span><span class=\"n\">BehaveDriverMixin</span><span class=\"p\">,</span> <span class=\"n\">RequestMixin</span><span class=\"p\">,</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Chrome</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">before_all</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">behave_driver</span> <span class=\"o\">=</span> <span class=\"n\">BehaveRequestDriver</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\"># examples/selenium-requests/features/steps/selenium_steps.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">behave</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">behave_webdriver.steps</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urljoin</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"s1\">'I send a </span><span class=\"si\">{method}</span><span class=\"s1\"> request to the page \"</span><span class=\"si\">{page}</span><span class=\"s1\">\"'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_request_page</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">urljoin</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">base_url</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">behave_driver</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@then</span><span class=\"p\">(</span><span class=\"s1\">'I expect the response text contains \"</span><span class=\"si\">{text}</span><span class=\"s1\">\"'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_response_text_contains</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">text</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span>\n</pre>\n<pre><span class=\"c\"># examples/selenium-requests/features/selenium-requests.feature</span><span class=\"nf\">\n</span><span class=\"k\">Feature:</span><span class=\"nf\"> Using selenium-requests\n  As a developer\n  I should be able to extend behave-webdriver with selenium-requests\n\n  </span><span class=\"k\">Scenario:</span><span class=\"nf\"> use selenium-requests with behave-webdriver\n</span><span class=\"c\">    # use a behave-webdriver step</span><span class=\"nf\">\n</span><span class=\"k\">    Given </span><span class=\"nf\">the base url is \"</span><span class=\"s\">http://127.0.0.1:8000</span><span class=\"nf\">\"\n</span><span class=\"c\">    # use your own steps using selenium-requests features</span><span class=\"nf\">\n    </span><span class=\"k\">Given </span><span class=\"nf\">I send a GET request to the page \"</span><span class=\"s\">/</span><span class=\"nf\">\"</span><span class=\"k\"></span><span class=\"nf\">\n    </span><span class=\"k\">Then </span><span class=\"nf\">I expect the response text contains \"</span><span class=\"nv\">&lt;h1&gt;</span><span class=\"s\">DEMO APP</span><span class=\"nv\">&lt;/h1&gt;</span><span class=\"nf\">\"</span><span class=\"k\"></span>\n</pre>\n<p>Assuming you\u2019re in the repository root (and have the demo app running) just run like any other project with <tt>behave</tt></p>\n<div id=\"results\">\n<h4>Results \u2728</h4>\n<pre>(behave-webdriver) $ behave examples/selenium-requests/features\n\nDevTools listening on ws://127.0.0.1:12646/devtools/browser/1fe75b44-1c74-49fa-8e77-36c54d50cd24\nFeature: Using selenium-requests # examples/selenium-requests/features/requests.feature:1\n  As a developer\n  I should be able to extend behave-webdriver with selenium-requests\n  Scenario: use selenium-requests with behave-webdriver          # examples/selenium-requests/features/requests.feature:6\n    Given the base url is \"http://127.0.0.1:8000\"                # behave_webdriver/steps/actions.py:162\n    Given I send a GET request to the page \"/\"                   # examples/selenium-requests/features/steps/selenium_steps.py:11\n    Then I expect the response text contains \"&lt;h1&gt;DEMO APP&lt;/h1&gt;\" # examples/selenium-requests/features/steps/selenium_steps.py:17\n\n1 feature passed, 0 failed, 0 skipped\n1 scenario passed, 0 failed, 0 skipped\n3 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m1.385s\n</pre>\n</div>\n</div>\n<div id=\"getting-help\">\n<h3>Getting help \u26d1</h3>\n<p>If you have any unanswered questions or encounter any issues, please feel welcome to raise an issue. We recognize that\ntesters come in all different shapes, sizes, and backgrounds. We welcome any and all questions that may arise from using\nthis library.</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Contributions are very much welcomed! If you have ideas or suggestions, please raise an issue or submit a PR.</p>\n</div>\n</div>\n<div id=\"list-of-step-definitions\">\n<h2>List of step definitions \ud83d\udcdd</h2>\n<p>We support all the steps supported by webdriverio/cucumber-boilerplate.\nWe also support some additional niceties and plan to add more step definitions.</p>\n<div id=\"given-steps\">\n<h3>Given Steps \ud83d\udc77</h3>\n<ul>\n<li><tt>I open the site <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I open the url <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I have a screen that is <span class=\"pre\">([\\d]+)</span> by <span class=\"pre\">([\\d]+)</span> pixels</tt></li>\n<li><tt>I have a screen that is <span class=\"pre\">([\\d]+)</span> pixels (broad|tall)</tt></li>\n<li><tt>I have closed all but the first (window|tab)</tt></li>\n<li><tt>I pause for <span class=\"pre\">(\\d+)*ms</span></tt></li>\n<li><tt>a (alertbox|confirmbox|prompt) is( not)* opened</tt></li>\n<li><tt>the base url is <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>the checkbox <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* checked</tt></li>\n<li><tt>the cookie <span class=\"pre\">\"([^\"]*)?\"</span> contains( not)* the value <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>the cookie <span class=\"pre\">\"([^\"]*)?\"</span> does( not)* exist</tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"</span> contains( not)* the same text as element <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* <span class=\"pre\">([\\d]+)px</span> (broad|tall)</tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* empty</tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* enabled</tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* positioned at <span class=\"pre\">([\\d]+)px</span> on the (x|y) axis</tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* selected</tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* visible</tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"(</span> not)* contains any text</tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"(</span> not)* contains the text <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>the element <span class=\"pre\">\"([^\"]*)?\"(</span> not)* matches the text <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>the page url is( not)* <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>the title is( not)* <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>the( css)* attribute <span class=\"pre\">\"([^\"]*)?\"</span> from element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>there is (an|no) element <span class=\"pre\">\"([^\"]*)?\"</span> on the page</tt></li>\n</ul>\n</div>\n<div id=\"when-steps\">\n<h3>When Steps \u25b6\ufe0f</h3>\n<ul>\n<li><tt>I open the site <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I open the url <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I accept the (alertbox|confirmbox|prompt)</tt></li>\n<li><tt>I add \"{value}\" to the inputfield \"{element}\"</tt></li>\n<li><tt>I clear the inputfield \"{element}\"</tt></li>\n<li><tt>I click on the button \"{element}\"</tt></li>\n<li><tt>I click on the element \"{element}\"</tt></li>\n<li><tt>I click on the link \"{link_text}\"</tt></li>\n<li><tt>I close the last opened (tab|window)</tt></li>\n<li><tt>I delete the cookie \"{cookie_key}\"</tt></li>\n<li><tt>I dismiss the (alertbox|confirmbox|prompt)</tt></li>\n<li><tt>I doubleclick on the element \"{element}\"</tt></li>\n<li><tt>I drag element \"{from_element}\" to element \"{to_element}\"</tt></li>\n<li><tt>I enter <span class=\"pre\">\"([^\"]*)?\"</span> into the (alertbox|confirmbox|prompt)</tt></li>\n<li><tt>I focus the last opened (tab|window)</tt></li>\n<li><tt>I move to element \"{element}\" with an offset of <span class=\"pre\">{x_offset:d},{y_offset:d}</span></tt></li>\n<li><tt>I move to element \"{element}\"</tt></li>\n<li><tt>I pause for {milliseconds:d}ms</tt></li>\n<li><tt>I press \"{key}\"</tt></li>\n<li><tt>I scroll to element \"{element}\"</tt></li>\n<li><tt>I select the option with the (text|value|name) <span class=\"pre\">\"([^\"]*)?\"</span> for element <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I select the {nth} option for element \"{element}\"</tt></li>\n<li><tt>I set \"{value}\" to the inputfield \"{element}\"</tt></li>\n<li><tt>I set a cookie \"{cookie_key}\" with the content \"{value}\"</tt></li>\n<li><tt>I submit the form \"{element}\"</tt></li>\n</ul>\n</div>\n<div id=\"then-steps\">\n<h3>Then Steps \u2714\ufe0f</h3>\n<ul>\n<li><tt>I expect the screen is <span class=\"pre\">([\\d]+)</span> by <span class=\"pre\">([\\d]+)</span> pixels</tt></li>\n<li><tt>I expect a new (window|tab) has( not)* been opened</tt></li>\n<li><tt>I expect that a (alertbox|confirmbox|prompt) is( not)* opened</tt></li>\n<li><tt>I expect that a (alertbox|confirmbox|prompt)( not)* contains the text <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that checkbox <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* checked</tt></li>\n<li><tt>I expect that cookie <span class=\"pre\">\"([^\"]*)?\"(</span> not)* contains <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that cookie <span class=\"pre\">\"([^\"]*)?\"(</span> not)* exists</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> (has|does not have) the class <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> becomes( not)* visible</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> does( not)* exist</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* <span class=\"pre\">([\\d]+)px</span> (broad|tall)</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* empty</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* enabled</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* focused</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* positioned at <span class=\"pre\">([\\d]+)px</span> on the (x|y) axis</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* selected</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* visible</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* within the viewport</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"(</span> not)* contains any text</tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"(</span> not)* contains the same text as element <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"(</span> not)* contains the text <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that element <span class=\"pre\">\"([^\"]*)?\"(</span> not)* matches the text <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that the path is( not)* <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that the title is( not)* <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that the url is( not)* <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect that the( css)* attribute <span class=\"pre\">\"([^\"]*)?\"</span> from element <span class=\"pre\">\"([^\"]*)?\"</span> is( not)* <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I expect the url <span class=\"pre\">\"([^\"]*)?\"</span> is opened in a new (tab|window)</tt></li>\n<li><tt>I expect the url to( not)* contain <span class=\"pre\">\"([^\"]*)?\"</span></tt></li>\n<li><tt>I wait on element <span class=\"pre\">\"([^\"]*)?\"(?:</span> for <span class=\"pre\">(\\d+)ms)*(?:</span> to( not)* (be checked|be enabled|be selected|be visible|contain a text|contain a <span class=\"pre\">value|exist))*</span></tt></li>\n</ul>\n</div>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements \u2764\ufe0f</h2>\n<p>Special thanks to the authors and contributors of the <a href=\"https://github.com/webdriverio/cucumber-boilerplate\" rel=\"nofollow\">webdriverio/cucumber-boilerplate</a> project</p>\n<p>Special thanks to the authors and contributors of <a href=\"https://github.com/behave/behave\" rel=\"nofollow\">behave</a></p>\n</div>\n\n          </div>"}, "last_serial": 5300291, "releases": {"0.0.1a0": [{"comment_text": "", "digests": {"md5": "3abbcaf8f0fbe1bcc3806f796be7c874", "sha256": "26369d655a9cdff6586998c3ba6f3ef27aaf5a5cace4dfdd9bba7978526f7f40"}, "downloads": -1, "filename": "behave-webdriver-0.0.1a0.tar.gz", "has_sig": false, "md5_digest": "3abbcaf8f0fbe1bcc3806f796be7c874", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10221, "upload_time": "2018-03-02T16:34:03", "upload_time_iso_8601": "2018-03-02T16:34:03.217024Z", "url": "https://files.pythonhosted.org/packages/a2/e1/aecac5d32250b7cf66d37013e76f3320aa811665fd30e745eff7a905bf1f/behave-webdriver-0.0.1a0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "ed60adaa46946edd7025bd34b0a607a3", "sha256": "58f85f93345a1c863de7b9e0f7ba66c18bb26437634e1294821d68f487e47987"}, "downloads": -1, "filename": "behave-webdriver-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ed60adaa46946edd7025bd34b0a607a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17635, "upload_time": "2018-03-08T21:03:31", "upload_time_iso_8601": "2018-03-08T21:03:31.069234Z", "url": "https://files.pythonhosted.org/packages/7e/8a/7431921b2b020ec9e61b3a35422b17dfb6cc3c005e1f3915c067be4c75a3/behave-webdriver-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f019536130da7e685f7383992ba0fd6f", "sha256": "24aa3508e5a7b5801e1317b0cba9a3c2a6cdddd0265466b30eb74083cf2f9305"}, "downloads": -1, "filename": "behave_webdriver-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f019536130da7e685f7383992ba0fd6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23091, "upload_time": "2018-12-09T04:51:45", "upload_time_iso_8601": "2018-12-09T04:51:45.929430Z", "url": "https://files.pythonhosted.org/packages/d1/4a/e6a045951a7b308145846cf3e8f01052b26eeffbf67497ac864aabf04928/behave_webdriver-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23309162f88dfdee3afe5e9d7a931686", "sha256": "1dc8dbfd9a87eee1d44822033a6e011d7379abac62ecdc940a1871fb43d72b2c"}, "downloads": -1, "filename": "behave-webdriver-0.2.0.tar.gz", "has_sig": false, "md5_digest": "23309162f88dfdee3afe5e9d7a931686", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24827, "upload_time": "2018-12-09T04:51:47", "upload_time_iso_8601": "2018-12-09T04:51:47.262476Z", "url": "https://files.pythonhosted.org/packages/f7/bc/61ac3c54a823f19e98c191fcd3b922bd7eb9281086bb8eb39ec14b123f2e/behave-webdriver-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d995ea98a0b987fc278e851ff3508434", "sha256": "9b07e82f90ae24be9c260d577e789a0ed05076f081ee3afb4bad1e6be1173e5f"}, "downloads": -1, "filename": "behave_webdriver-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d995ea98a0b987fc278e851ff3508434", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23093, "upload_time": "2018-12-11T00:48:37", "upload_time_iso_8601": "2018-12-11T00:48:37.986371Z", "url": "https://files.pythonhosted.org/packages/28/e8/14e6a1d6d9e4e339674c98cbee3bbf40964e86794b21ccc439217762ce89/behave_webdriver-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2660b7ba68e2ba632df4f0c6c676974d", "sha256": "5b555292980d692989646aca3e914238e9ed79c8a36595089ff85c625b659efc"}, "downloads": -1, "filename": "behave-webdriver-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2660b7ba68e2ba632df4f0c6c676974d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24872, "upload_time": "2018-12-11T00:48:40", "upload_time_iso_8601": "2018-12-11T00:48:40.078196Z", "url": "https://files.pythonhosted.org/packages/01/02/4a47b276849ddd459ca2cae5b0bdb1bc907976b6a7c65b36917aa00c86c0/behave-webdriver-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "4850fdc3d3f1a747512cb0c9f0aaad4f", "sha256": "af8a31cf90668321eeba5e5b42357616532e8c1805edbeb19df66b0507c8994d"}, "downloads": -1, "filename": "behave_webdriver-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4850fdc3d3f1a747512cb0c9f0aaad4f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23094, "upload_time": "2018-12-26T17:55:36", "upload_time_iso_8601": "2018-12-26T17:55:36.199690Z", "url": "https://files.pythonhosted.org/packages/d5/ec/cf793e88a18f0cded0fe8abd19cc77781d8d8923f57057ed5469ede9c0f0/behave_webdriver-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47fe7a387cbc0d6c126d8172403e5b74", "sha256": "f4b5d2e1b89d225bc7754ac663add94a82890ad23092ca71783bb285367f2c1f"}, "downloads": -1, "filename": "behave-webdriver-0.2.2.tar.gz", "has_sig": false, "md5_digest": "47fe7a387cbc0d6c126d8172403e5b74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24879, "upload_time": "2018-12-26T17:55:38", "upload_time_iso_8601": "2018-12-26T17:55:38.106130Z", "url": "https://files.pythonhosted.org/packages/7b/73/6b4e372889499a4df09c87a3b28de513bf94b42490f4be3a08df3ed09333/behave-webdriver-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c7276fa8a28193528c4638abe37fe9f2", "sha256": "2752af79082ffeeaa4f1854f07618d93e4b15bd5ae56b3ddea082809c82e95ed"}, "downloads": -1, "filename": "behave_webdriver-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c7276fa8a28193528c4638abe37fe9f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23621, "upload_time": "2019-05-22T00:27:13", "upload_time_iso_8601": "2019-05-22T00:27:13.852773Z", "url": "https://files.pythonhosted.org/packages/cf/97/10bd32713a084e0813ce4db8c24ab40961c408147bd483dc5bfca07dac88/behave_webdriver-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89902085028dce597e3262f99398c03a", "sha256": "6f3f0220deb3ae328f6c83d6a3f93293431c138b0066586f8546a1524b2535ae"}, "downloads": -1, "filename": "behave-webdriver-0.3.0.tar.gz", "has_sig": false, "md5_digest": "89902085028dce597e3262f99398c03a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25028, "upload_time": "2019-05-22T00:27:15", "upload_time_iso_8601": "2019-05-22T00:27:15.292905Z", "url": "https://files.pythonhosted.org/packages/f5/b1/465dc64a2f01cb59c648dfd5e81d2d642e4018790e80ac39258842fd62a8/behave-webdriver-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7276fa8a28193528c4638abe37fe9f2", "sha256": "2752af79082ffeeaa4f1854f07618d93e4b15bd5ae56b3ddea082809c82e95ed"}, "downloads": -1, "filename": "behave_webdriver-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c7276fa8a28193528c4638abe37fe9f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23621, "upload_time": "2019-05-22T00:27:13", "upload_time_iso_8601": "2019-05-22T00:27:13.852773Z", "url": "https://files.pythonhosted.org/packages/cf/97/10bd32713a084e0813ce4db8c24ab40961c408147bd483dc5bfca07dac88/behave_webdriver-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89902085028dce597e3262f99398c03a", "sha256": "6f3f0220deb3ae328f6c83d6a3f93293431c138b0066586f8546a1524b2535ae"}, "downloads": -1, "filename": "behave-webdriver-0.3.0.tar.gz", "has_sig": false, "md5_digest": "89902085028dce597e3262f99398c03a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25028, "upload_time": "2019-05-22T00:27:15", "upload_time_iso_8601": "2019-05-22T00:27:15.292905Z", "url": "https://files.pythonhosted.org/packages/f5/b1/465dc64a2f01cb59c648dfd5e81d2d642e4018790e80ac39258842fd62a8/behave-webdriver-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:50 2020"}