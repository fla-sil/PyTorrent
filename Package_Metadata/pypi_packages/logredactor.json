{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Log Redactor\n\nRedacts data in python logs based on regex filters passed in by the user.  \nThis will work with json logging formats as well and also with nested data in the `extra` argument. \n\n\n# Examples\n\n```python\nimport re\nimport logging\nimport logredactor\n\n# Create a logger\nlogger = logging.getLogger()\n# Add the redact filter to the logger with your custom filters\nredact_patterns = [re.compile(r'\\d+')]\n\n# if no `default_mask` is passed in, 4 asterisks will be used\nlogger.addFilter(logredactor.RedactingFilter(redact_patterns, default_mask='xx'))\n\nlogger.warning(\"This is a test 123...\")\n# Output: This is a test xx...\n```\n\nPython only applies the filter on that logger, so any other files using logging will not get the filter applied. To have this filter applied to all loggers do the following\n```python\nimport re\nimport logging\nimport logredactor\nfrom pythonjsonlogger import jsonlogger\n\n# Create a pattern to hide api key in url. This uses a _Positive Lookbehind_\nredact_patterns = [re.compile(r'(?<=api_key=)[\\w-]+')]\n\n# Override the logging handler that you want redacted\nclass RedactStreamHandler(logging.StreamHandler):\n    def __init__(self, *args, **kwargs):\n        logging.StreamHandler.__init__(self, *args, **kwargs)\n        self.addFilter(logredactor.RedactingFilter(redact_patterns))\n\nroot_logger = logging.getLogger()\n\nsys_stream = RedactStreamHandler()\n# Also set the formatter to use json, this is optional and all nested keys will get redacted too\nsys_stream.setFormatter(jsonlogger.JsonFormatter('%(name)s %(message)s'))\nroot_logger.addHandler(sys_stream)\n\nlogger = logging.getLogger(__name__)\n\nlogger.error(\"Request Failed\", extra={'url': 'https://example.com?api_key=my-secret-key'})\n# Output: {\"name\": \"__main__\", \"message\": \"Request Failed\", \"url\": \"https://example.com?api_key=****\"}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "logredactor", "package_url": "https://pypi.org/project/logredactor/", "platform": "", "project_url": "https://pypi.org/project/logredactor/", "project_urls": null, "release_url": "https://pypi.org/project/logredactor/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Redact logs based on regex filters", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Log Redactor</h1>\n<p>Redacts data in python logs based on regex filters passed in by the user.<br>\nThis will work with json logging formats as well and also with nested data in the <code>extra</code> argument.</p>\n<h1>Examples</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logredactor</span>\n\n<span class=\"c1\"># Create a logger</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"c1\"># Add the redact filter to the logger with your custom filters</span>\n<span class=\"n\">redact_patterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\d+'</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># if no `default_mask` is passed in, 4 asterisks will be used</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addFilter</span><span class=\"p\">(</span><span class=\"n\">logredactor</span><span class=\"o\">.</span><span class=\"n\">RedactingFilter</span><span class=\"p\">(</span><span class=\"n\">redact_patterns</span><span class=\"p\">,</span> <span class=\"n\">default_mask</span><span class=\"o\">=</span><span class=\"s1\">'xx'</span><span class=\"p\">))</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"This is a test 123...\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output: This is a test xx...</span>\n</pre>\n<p>Python only applies the filter on that logger, so any other files using logging will not get the filter applied. To have this filter applied to all loggers do the following</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logredactor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pythonjsonlogger</span> <span class=\"kn\">import</span> <span class=\"n\">jsonlogger</span>\n\n<span class=\"c1\"># Create a pattern to hide api key in url. This uses a _Positive Lookbehind_</span>\n<span class=\"n\">redact_patterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'(?&lt;=api_key=)[\\w-]+'</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Override the logging handler that you want redacted</span>\n<span class=\"k\">class</span> <span class=\"nc\">RedactStreamHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">addFilter</span><span class=\"p\">(</span><span class=\"n\">logredactor</span><span class=\"o\">.</span><span class=\"n\">RedactingFilter</span><span class=\"p\">(</span><span class=\"n\">redact_patterns</span><span class=\"p\">))</span>\n\n<span class=\"n\">root_logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n\n<span class=\"n\">sys_stream</span> <span class=\"o\">=</span> <span class=\"n\">RedactStreamHandler</span><span class=\"p\">()</span>\n<span class=\"c1\"># Also set the formatter to use json, this is optional and all nested keys will get redacted too</span>\n<span class=\"n\">sys_stream</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">jsonlogger</span><span class=\"o\">.</span><span class=\"n\">JsonFormatter</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%(name)s</span><span class=\"s1\"> </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n<span class=\"n\">root_logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">sys_stream</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Request Failed\"</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'https://example.com?api_key=my-secret-key'</span><span class=\"p\">})</span>\n<span class=\"c1\"># Output: {\"name\": \"__main__\", \"message\": \"Request Failed\", \"url\": \"https://example.com?api_key=****\"}</span>\n</pre>\n\n          </div>"}, "last_serial": 5679908, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "faa541b0d46dc9e39812796f62a601aa", "sha256": "1df30bdfeb35d462a74ce96e90e63f6a832bdea1b03d14651e838b6927d8be64"}, "downloads": -1, "filename": "logredactor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "faa541b0d46dc9e39812796f62a601aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2328, "upload_time": "2019-08-15T00:05:03", "upload_time_iso_8601": "2019-08-15T00:05:03.353442Z", "url": "https://files.pythonhosted.org/packages/e3/f1/40d490e4aec9adb3a03664221020ce275b9c9a21fb552eefa4a0b322aa73/logredactor-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "faa541b0d46dc9e39812796f62a601aa", "sha256": "1df30bdfeb35d462a74ce96e90e63f6a832bdea1b03d14651e838b6927d8be64"}, "downloads": -1, "filename": "logredactor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "faa541b0d46dc9e39812796f62a601aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2328, "upload_time": "2019-08-15T00:05:03", "upload_time_iso_8601": "2019-08-15T00:05:03.353442Z", "url": "https://files.pythonhosted.org/packages/e3/f1/40d490e4aec9adb3a03664221020ce275b9c9a21fb552eefa4a0b322aa73/logredactor-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:09 2020"}