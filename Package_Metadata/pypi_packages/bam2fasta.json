{"info": {"author": "Pranathi Vemuri", "author_email": "pranathi93.vemuri@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: MacOS X", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: C++", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# bam2fasta\nConvert 10x bam file to individual FASTA files per cell barcode\n\nFree software: MIT license\n\n\n## Installation\nLatest version can be installed via pip package `bam2fasta`.\n\nQuick install given you have the ssl and zlib packages are already installed.\n\n    pip install bam2fasta\n    conda install -c bioconda bam2fasta\n\nPlease refer to .travis.yml to see what packages are apt addons on linux and linux addons are required\n\nFor osx, before `pip install bam2fasta` install the below homebrew packages\n\n    sudo pip install setuptools\n    brew update\n    brew install openssl\n    brew install zlib\n\nFor linux, before `pip install bam2fasta` install the below apt packages\n\n    apt-get install libbz2-dev\n    apt-get install libcurl4-openssl-dev\n    apt-get install libssl-dev\n\n\n## Usage\n\nBam2fasta info command:\n  \n    bam2fasta info\n    bam2fasta info -v\n\nBam2fasta convert command, it takes BAM and/or barcode files as input. Examples:\n\t\n\tbam2fasta convert --filename filename.bam \n\tbam2fasta convert --filename 10x-example/possorted_genome_bam.bam \\\n\t\t--save-fastas fastas --min-umi-per-barcode 10 \\\n\t\t--write-barcode-meta-csv all_barcodes_meta.csv \\\n\t\t--barcodes 10x-example/barcodes.tsv \\\n\t\t--rename-10x-barcodes 10x-example/barcodes_renamer.tsv \\\n\t\t--line-count 150 \\\n    --save-intermediate-files intermediate_files\n\n* [Main arguments](#main-arguments)\n    * [`--filename`](#--filename)\n   \t* [Bam optional parameters](#bam-optional-parameters)\n        * [`--barcodes-file`](#--barcodes-file)\n        * [`--rename-10x-barcodes`](#--rename-10x-barcodes)\n        * [`--save-fastas`](#--save-fastas)\n        * [`--save-intermediate-files`](#--save-intermediate-files)\n        * [`--min-umi-per-barcode`](#--min-umi-per-barcode)\n        * [`--write-barcode-meta-csv`](#--write-barcode-meta-csv)\n        * [`--line-count`](#--line-count)\n\n\n### `--bam`\nFor bam/10x files, Use this to specify the location of the bam file. For example:\n\n```bash\n--bam /path/to/data/10x-example/possorted_genome_bam\n```\n\n## Bam optional parameters\n\n\n### `--barcodes-file`\nFor bam/10x files, Use this to specify the location of tsv (tab separated file) containing cell barcodes. For example:\n\n```bash\n--barcodes-file /path/to/data/10x-example/barcodes.tsv\n```\n\nIf left unspecified, barcodes are derived from bam are used.\n\n### `--rename-10x-barcodes`\nFor bam/10x files, Use this to specify the location of your tsv (tab separated file) containing map of cell barcodes and their corresponding new names(e.g row in the tsv file: AAATGCCCAAACTGCT-1    lung_epithelial_cell|AAATGCCCAAACTGCT-1). \nFor example:\n\n```bash\n--rename-10x-barcodes /path/to/data/10x-example/barcodes_renamer.tsv\n```\nIf left unspecified, barcodes in bam as given in barcodes_file are not renamed.\n\n\n### `--save_fastas`\n\n1. The [save_fastas ](#--save-fastas ) used to save the sequences of each unique barcode in the bam file. By default, they are saved inside working directory to save unique barcodes to files namely {CELL_BARCODE}.fasta. Otherwise absolute path given in save_fastas. \n\n\n**Example parameters**\n\n* Default: Save fastas in current working directory:\n  * `--save-fastas \"fastas\"`\n\n### `--save_intermediate_files`\n\n1. The [save_intermediate_files](#--save-intermediate-files ) used to save the intermediate sharded bams and their corresponding fastas. By default, they are saved inside \"/tmp/\" and are deleted automatically at the end of the program. Otherwise absolute path given in save_intermediate_files. \n\n\n**Example parameters**\n\n* Default: Save temporary fastas and bam in `/tmp/` directory:\n  * `--save-intermediate-files \"fastas\"`\n\n\n### `--write_barcode_meta_csv`\nThis creates a CSV containing the number of reads and number of UMIs per barcode, written in a path given by `write_barcode_meta_csv`. This csv file is empty with just header when the min_umi_per_barcode is zero i.e reads and UMIs per barcode are calculated only when the barcodes are filtered based on [min_umi_per_barcode](#--min_umi_per_barcode)\n**Example parameters**\n\n* Default: barcode metadata is not saved \n  * `--write-barcode-meta-csv \"barcodes_counts.csv\"`\n\n\n### `--min_umi_per_barcode`\nThe parameter `--min_umi_per_barcode` ensures that a barcode is only considered a valid barcode read and its sketch is written if number of unique molecular identifiers (UMIs, aka molecular barcodes) are greater than the value specified for a barcode.\n\n**Example parameters**\n\n* Default: min_umi_per_barcode is 0\n* Set minimum UMI per cellular barcode as 10:\n  * `--min-umi-per-barcode 10`\n\n\n### `--line_count`\nThe parameter `--line-count` specifies the number of alignments/lines in each bam shard.\n**Example parameters**\n\n* Default: line_count is 1500\n  * `--line-count 400`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/czbiohub/bam2fasta", "keywords": "", "license": "MIT License", "maintainer": "Pranathi Vemuri", "maintainer_email": "pranathi93.vemuri@gmail.com", "name": "bam2fasta", "package_url": "https://pypi.org/project/bam2fasta/", "platform": "", "project_url": "https://pypi.org/project/bam2fasta/", "project_urls": {"Homepage": "https://github.com/czbiohub/bam2fasta"}, "release_url": "https://pypi.org/project/bam2fasta/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "tool for converting a bam file to fastas", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bam2fasta</h1>\n<p>Convert 10x bam file to individual FASTA files per cell barcode</p>\n<p>Free software: MIT license</p>\n<h2>Installation</h2>\n<p>Latest version can be installed via pip package <code>bam2fasta</code>.</p>\n<p>Quick install given you have the ssl and zlib packages are already installed.</p>\n<pre><code>pip install bam2fasta\nconda install -c bioconda bam2fasta\n</code></pre>\n<p>Please refer to .travis.yml to see what packages are apt addons on linux and linux addons are required</p>\n<p>For osx, before <code>pip install bam2fasta</code> install the below homebrew packages</p>\n<pre><code>sudo pip install setuptools\nbrew update\nbrew install openssl\nbrew install zlib\n</code></pre>\n<p>For linux, before <code>pip install bam2fasta</code> install the below apt packages</p>\n<pre><code>apt-get install libbz2-dev\napt-get install libcurl4-openssl-dev\napt-get install libssl-dev\n</code></pre>\n<h2>Usage</h2>\n<p>Bam2fasta info command:</p>\n<pre><code>bam2fasta info\nbam2fasta info -v\n</code></pre>\n<p>Bam2fasta convert command, it takes BAM and/or barcode files as input. Examples:</p>\n<pre><code>bam2fasta convert --filename filename.bam \nbam2fasta convert --filename 10x-example/possorted_genome_bam.bam \\\n\t--save-fastas fastas --min-umi-per-barcode 10 \\\n\t--write-barcode-meta-csv all_barcodes_meta.csv \\\n\t--barcodes 10x-example/barcodes.tsv \\\n\t--rename-10x-barcodes 10x-example/barcodes_renamer.tsv \\\n\t--line-count 150 \\\n--save-intermediate-files intermediate_files\n</code></pre>\n<ul>\n<li><a href=\"#main-arguments\" rel=\"nofollow\">Main arguments</a>\n<ul>\n<li><a href=\"#--filename\" rel=\"nofollow\"><code>--filename</code></a></li>\n<li><a href=\"#bam-optional-parameters\" rel=\"nofollow\">Bam optional parameters</a>\n<ul>\n<li><a href=\"#--barcodes-file\" rel=\"nofollow\"><code>--barcodes-file</code></a></li>\n<li><a href=\"#--rename-10x-barcodes\" rel=\"nofollow\"><code>--rename-10x-barcodes</code></a></li>\n<li><a href=\"#--save-fastas\" rel=\"nofollow\"><code>--save-fastas</code></a></li>\n<li><a href=\"#--save-intermediate-files\" rel=\"nofollow\"><code>--save-intermediate-files</code></a></li>\n<li><a href=\"#--min-umi-per-barcode\" rel=\"nofollow\"><code>--min-umi-per-barcode</code></a></li>\n<li><a href=\"#--write-barcode-meta-csv\" rel=\"nofollow\"><code>--write-barcode-meta-csv</code></a></li>\n<li><a href=\"#--line-count\" rel=\"nofollow\"><code>--line-count</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><code>--bam</code></h3>\n<p>For bam/10x files, Use this to specify the location of the bam file. For example:</p>\n<pre>--bam /path/to/data/10x-example/possorted_genome_bam\n</pre>\n<h2>Bam optional parameters</h2>\n<h3><code>--barcodes-file</code></h3>\n<p>For bam/10x files, Use this to specify the location of tsv (tab separated file) containing cell barcodes. For example:</p>\n<pre>--barcodes-file /path/to/data/10x-example/barcodes.tsv\n</pre>\n<p>If left unspecified, barcodes are derived from bam are used.</p>\n<h3><code>--rename-10x-barcodes</code></h3>\n<p>For bam/10x files, Use this to specify the location of your tsv (tab separated file) containing map of cell barcodes and their corresponding new names(e.g row in the tsv file: AAATGCCCAAACTGCT-1    lung_epithelial_cell|AAATGCCCAAACTGCT-1).\nFor example:</p>\n<pre>--rename-10x-barcodes /path/to/data/10x-example/barcodes_renamer.tsv\n</pre>\n<p>If left unspecified, barcodes in bam as given in barcodes_file are not renamed.</p>\n<h3><code>--save_fastas</code></h3>\n<ol>\n<li>The <a href=\"#--save-fastas\" rel=\"nofollow\">save_fastas </a> used to save the sequences of each unique barcode in the bam file. By default, they are saved inside working directory to save unique barcodes to files namely {CELL_BARCODE}.fasta. Otherwise absolute path given in save_fastas.</li>\n</ol>\n<p><strong>Example parameters</strong></p>\n<ul>\n<li>Default: Save fastas in current working directory:\n<ul>\n<li><code>--save-fastas \"fastas\"</code></li>\n</ul>\n</li>\n</ul>\n<h3><code>--save_intermediate_files</code></h3>\n<ol>\n<li>The <a href=\"#--save-intermediate-files\" rel=\"nofollow\">save_intermediate_files</a> used to save the intermediate sharded bams and their corresponding fastas. By default, they are saved inside \"/tmp/\" and are deleted automatically at the end of the program. Otherwise absolute path given in save_intermediate_files.</li>\n</ol>\n<p><strong>Example parameters</strong></p>\n<ul>\n<li>Default: Save temporary fastas and bam in <code>/tmp/</code> directory:\n<ul>\n<li><code>--save-intermediate-files \"fastas\"</code></li>\n</ul>\n</li>\n</ul>\n<h3><code>--write_barcode_meta_csv</code></h3>\n<p>This creates a CSV containing the number of reads and number of UMIs per barcode, written in a path given by <code>write_barcode_meta_csv</code>. This csv file is empty with just header when the min_umi_per_barcode is zero i.e reads and UMIs per barcode are calculated only when the barcodes are filtered based on <a href=\"#--min_umi_per_barcode\" rel=\"nofollow\">min_umi_per_barcode</a>\n<strong>Example parameters</strong></p>\n<ul>\n<li>Default: barcode metadata is not saved\n<ul>\n<li><code>--write-barcode-meta-csv \"barcodes_counts.csv\"</code></li>\n</ul>\n</li>\n</ul>\n<h3><code>--min_umi_per_barcode</code></h3>\n<p>The parameter <code>--min_umi_per_barcode</code> ensures that a barcode is only considered a valid barcode read and its sketch is written if number of unique molecular identifiers (UMIs, aka molecular barcodes) are greater than the value specified for a barcode.</p>\n<p><strong>Example parameters</strong></p>\n<ul>\n<li>Default: min_umi_per_barcode is 0</li>\n<li>Set minimum UMI per cellular barcode as 10:\n<ul>\n<li><code>--min-umi-per-barcode 10</code></li>\n</ul>\n</li>\n</ul>\n<h3><code>--line_count</code></h3>\n<p>The parameter <code>--line-count</code> specifies the number of alignments/lines in each bam shard.\n<strong>Example parameters</strong></p>\n<ul>\n<li>Default: line_count is 1500\n<ul>\n<li><code>--line-count 400</code></li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6612228, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f648a499c934597172f02d96da5097d3", "sha256": "5724a03042999ffa9434fc2913413eb2caa17d321973ebb1263f8991de4b33cf"}, "downloads": -1, "filename": "bam2fasta-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f648a499c934597172f02d96da5097d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266064, "upload_time": "2019-10-30T18:36:13", "upload_time_iso_8601": "2019-10-30T18:36:13.960794Z", "url": "https://files.pythonhosted.org/packages/37/06/036208fcd4475c23f830c27f7af85c0458599f98f28284ec95a61bacfc87/bam2fasta-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "11115b06e3fb5dd21353b842f92d67b6", "sha256": "77e2063cf2ec2f9152945147c9efd37879bc81a935e552af69f1778536d728f7"}, "downloads": -1, "filename": "bam2fasta-1.0.1.tar.gz", "has_sig": false, "md5_digest": "11115b06e3fb5dd21353b842f92d67b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266186, "upload_time": "2019-10-31T01:26:32", "upload_time_iso_8601": "2019-10-31T01:26:32.414966Z", "url": "https://files.pythonhosted.org/packages/d2/78/de6c2e359a167b670b6f04f96e73a136159c14c5cb5be00aa1026e230562/bam2fasta-1.0.1.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "fe2092c8b1a78a76de604f33c6b637f5", "sha256": "040d6b15b087d95a19d51bcf048d514b789c32f6e5c5252f9ba0668b675d980a"}, "downloads": -1, "filename": "bam2fasta-1.0.3.tar.gz", "has_sig": false, "md5_digest": "fe2092c8b1a78a76de604f33c6b637f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 361515, "upload_time": "2020-01-29T02:15:38", "upload_time_iso_8601": "2020-01-29T02:15:38.914571Z", "url": "https://files.pythonhosted.org/packages/47/5a/d9f1f7116a7dc339a6dec8e8c866e258faa85f2d22b785e538317458c08f/bam2fasta-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "53d156be74bc4137a853debaf5c8b377", "sha256": "3afc9843b21ebd764f005825b93899016313d8645ecde9a04e52dddabc4015af"}, "downloads": -1, "filename": "bam2fasta-1.0.4.tar.gz", "has_sig": false, "md5_digest": "53d156be74bc4137a853debaf5c8b377", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 699245, "upload_time": "2020-02-11T21:33:08", "upload_time_iso_8601": "2020-02-11T21:33:08.329735Z", "url": "https://files.pythonhosted.org/packages/f7/bc/3ac40f22b7b0c2f40a2363ebce24e32254383316568ea08084528ea319fe/bam2fasta-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53d156be74bc4137a853debaf5c8b377", "sha256": "3afc9843b21ebd764f005825b93899016313d8645ecde9a04e52dddabc4015af"}, "downloads": -1, "filename": "bam2fasta-1.0.4.tar.gz", "has_sig": false, "md5_digest": "53d156be74bc4137a853debaf5c8b377", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 699245, "upload_time": "2020-02-11T21:33:08", "upload_time_iso_8601": "2020-02-11T21:33:08.329735Z", "url": "https://files.pythonhosted.org/packages/f7/bc/3ac40f22b7b0c2f40a2363ebce24e32254383316568ea08084528ea319fe/bam2fasta-1.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:59 2020"}