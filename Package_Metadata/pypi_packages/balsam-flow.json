{"info": {"author": "Misha Salim, Thomas Uram, Taylor Childers", "author_email": "msalim@anl.gov", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "<p align=\"center\">\n<a href=\"https://balsam.readthedocs.io\">\n<img align=\"center\" src=\"docs/_static/logo/small3.png\" style=\"border: 0;\">\n</a>\n</p>\n\n![GitHub tag (latest by date)](https://img.shields.io/github/tag-date/balsam-alcf/balsam.svg?label=version)\n[![Documentation Status](https://readthedocs.org/projects/balsam/badge/?version=latest)](https://balsam.readthedocs.io/en/latest/?badge=latest)\n![PyPI - License](https://img.shields.io/pypi/l/balsam-flow.svg)\n\n# Balsam: HPC Workflows & Edge Service\n\nBalsam makes it easy to manage large computational campaigns on a\nsupercomputer. Instead of writing and submitting job scripts to the batch\nscheduler, you send individual tasks (application runs) to Balsam. The **service** takes\ncare of reserving compute resources in response to changing workloads.  The\n**launcher** fetches tasks and executes the workflow on its allocated\nresources.\n\nBalsam is designed to minimize user \"buy-in\" and cognitive overhead. You\ndon't have to learn an API or write any glue code to acheive throughput with\nexisting applications. On systems with Balsam installed, it's arguably faster\nand easier for a beginner to run an ensemble using Balsam than\nby writing an ensemble job script:\n\n```console\n$ balsam app --name SayHello --executable \"echo hello,\"\n$ for i in {1..10}\n> do\n>  balsam job --name hi$i --workflow test --application SayHello --args \"world $i\"\n> done\n$ balsam submit-launch -A Project -q Queue -t 5 -n 2 --job-mode=serial\n```\n\n## Highlights\n\n- Applications require zero modification and run *as-is* with Balsam\n- Launch MPI applications or pack several non-MPI tasks-per-node\n- Run apps on bare metal or [inside a Singularity container](https://www.alcf.anl.gov/user-guides/singularity)\n- Flexible Python API and command-line interfaces for workflow management\n- Execution is load balanced and resilient to task faults. Errors are automatically recorded to database for quick lookup and\n  debugging of workflows\n- Scheduled jobs can overlap in time; launchers cooperatively consume work from the same database\n- Multi-user workflow management: collaborators on the same project can add tasks and submit launcher jobs using\n  the same database\n\nThe Balsam API enables a variety of scenarios beyond the independent bag-of-tasks:\n- Add task dependencies to form DAGs\n- Program dynamic workflows: some tasks spawn or kill other tasks at runtime\n- Remotely submit workflows, track their progress, and coordinate data movement tasks\n\n## **Read the Balsam Documentation online at** [balsam.readthedocs.io](https://balsam.readthedocs.io/en/latest/)!\n\n## Existing site-wide installations\n\nBalsam is deployed in a public location at the following sites.  On these systems,\nit's not necessary to install Balsam yourself:\n\n|Location | System | Command|\n|---------|--------|-------|\n|ALCF     | Theta | `module load balsam` |\n\n## Installation\n\n#### Prerequisites\nBalsam requires Python 3.6 or later. Preferably, set up an isolated\nvirtualenv or conda environment for Balsam. It's no problem if some\napplications in your workflow run in different Python environments. You will\nneed setuptools 39.2 or newer:\n\n```console\n$ pip install --upgrade pip setuptools\n```\n\nSome Balsam components require [mpi4py](https://github.com/mpi4py/mpi4py),  so\nit is best to install Balsam in an environment with `mpi4py` already in place\nand configured for your platform.  **At the minimum**, a working MPI\nimplementation and `mpicc` compiler wrapper should be in the search path, in\nwhich case the `mpi4py` dependency will automatically build and install.\n\n[cython](https://github.com/cython/cython) is also used to compile some\nCPU-intensive portions of the Balsam service.  While the Cython dependency will\nalso be installed if it's absent, it is preferable to have an existing version\nbuilt with your platform-tuned compiler wrappers.\n\nFinally, Balsam requires PostgreSQL version 9.6.4 or newer to be installed. You can verify\nthat PostgreSQL is in the search `PATH` and the version is up-to-date with:\n\n```console\n$ pg_ctl --version\n```\n\nIt's very easy to [get the PostgreSQL binaries](https://www.enterprisedb.com/download-postgresql-binaries) if you\ndon't already have them.  Simply adding the PostgreSQL `bin/` to your search\nPATH should be enough to use Balsam without having to bother a system\nadministrator.\n\n#### Quick setup\n\n```console\n$ pip install balsam-flow\n$ balsam init ~/myWorkflow\n$ source balsamactivate myWorkflow\n```\n\nOnce a Balsam database is activated, you can use the command line to manage your workflows:\n\n```console\n$ balsam app --name SayHello --executable \"echo hello,\"\n$ balsam job --name hi --workflow test --application SayHello --args \"World!\"\n$ balsam submit-launch -A MyProject -q DebugQueue -t 5 -n 1 --job-mode=mpi\n$ watch balsam ls   #  follow status in realtime from command-line\n```\n\n## **Keep reading the Balsam Documentation online at** [balsam.readthedocs.io](https://balsam.readthedocs.io/en/latest/)!\n\n## Citing Balsam\nIf you are referencing Balsam in a publication, please cite the following paper:\n\n-  M. Salim, T. Uram, J.T. Childers, P. Balaprakash, V. Vishwanath, M. Papka. *Balsam: Automated Scheduling and Execution of Dynamic, Data-Intensive HPC Workflows*. In Proceedings of the 8th Workshop on Python for High-Performance and Scientific Computing. ACM Press, 2018.\n\nBSD 3-Clause License\n\nCopyright (c) 2019, UChicago Argonne LLC\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of UChicago Argonne LLC nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://balsam.readthedocs.io", "keywords": "workflows,hpc,scientific,workflow", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "balsam-flow", "package_url": "https://pypi.org/project/balsam-flow/", "platform": "", "project_url": "https://pypi.org/project/balsam-flow/", "project_urls": {"Documentation": "https://balsam.readthedocs.io", "Homepage": "https://balsam.readthedocs.io", "Source": "https://github.com/balsam-alcf/balsam"}, "release_url": "https://pypi.org/project/balsam-flow/0.3.8/", "requires_dist": ["django (>=2.1.1)", "jinja2", "psycopg2-binary", "mpi4py", "sphinx", "sphinx-rtd-theme", "numpy"], "requires_python": ">=3.6", "summary": "HPC Workflows & Edge Service", "version": "0.3.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n<a href=\"https://balsam.readthedocs.io\" rel=\"nofollow\">\n<img align=\"center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19aacc7960867375583f0e92b1af02b2abbcc707/646f63732f5f7374617469632f6c6f676f2f736d616c6c332e706e67\">\n</a>\n</p>\n<p><img alt=\"GitHub tag (latest by date)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1deb231ac5318f8b71fcf4002653c9fe741f15f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672d646174652f62616c73616d2d616c63662f62616c73616d2e7376673f6c6162656c3d76657273696f6e\">\n<a href=\"https://balsam.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1172deb732fa58ef6f017e5966c955a31e1ab7a6/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f62616c73616d2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afc7b75d02faad4b3ee77182bab4a8bd99ca12dc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f62616c73616d2d666c6f772e737667\"></p>\n<h1>Balsam: HPC Workflows &amp; Edge Service</h1>\n<p>Balsam makes it easy to manage large computational campaigns on a\nsupercomputer. Instead of writing and submitting job scripts to the batch\nscheduler, you send individual tasks (application runs) to Balsam. The <strong>service</strong> takes\ncare of reserving compute resources in response to changing workloads.  The\n<strong>launcher</strong> fetches tasks and executes the workflow on its allocated\nresources.</p>\n<p>Balsam is designed to minimize user \"buy-in\" and cognitive overhead. You\ndon't have to learn an API or write any glue code to acheive throughput with\nexisting applications. On systems with Balsam installed, it's arguably faster\nand easier for a beginner to run an ensemble using Balsam than\nby writing an ensemble job script:</p>\n<pre><span class=\"gp\">$</span> balsam app --name SayHello --executable <span class=\"s2\">\"echo hello,\"</span>\n<span class=\"gp\">$</span> <span class=\"k\">for</span> i in <span class=\"o\">{</span><span class=\"m\">1</span>..10<span class=\"o\">}</span>\n<span class=\"gp\">&gt;</span> <span class=\"k\">do</span>\n<span class=\"gp\">&gt;</span>  balsam job --name hi<span class=\"nv\">$i</span> --workflow <span class=\"nb\">test</span> --application SayHello --args <span class=\"s2\">\"world </span><span class=\"nv\">$i</span><span class=\"s2\">\"</span>\n<span class=\"gp\">&gt;</span> <span class=\"k\">done</span>\n<span class=\"gp\">$</span> balsam submit-launch -A Project -q Queue -t <span class=\"m\">5</span> -n <span class=\"m\">2</span> --job-mode<span class=\"o\">=</span>serial\n</pre>\n<h2>Highlights</h2>\n<ul>\n<li>Applications require zero modification and run <em>as-is</em> with Balsam</li>\n<li>Launch MPI applications or pack several non-MPI tasks-per-node</li>\n<li>Run apps on bare metal or <a href=\"https://www.alcf.anl.gov/user-guides/singularity\" rel=\"nofollow\">inside a Singularity container</a></li>\n<li>Flexible Python API and command-line interfaces for workflow management</li>\n<li>Execution is load balanced and resilient to task faults. Errors are automatically recorded to database for quick lookup and\ndebugging of workflows</li>\n<li>Scheduled jobs can overlap in time; launchers cooperatively consume work from the same database</li>\n<li>Multi-user workflow management: collaborators on the same project can add tasks and submit launcher jobs using\nthe same database</li>\n</ul>\n<p>The Balsam API enables a variety of scenarios beyond the independent bag-of-tasks:</p>\n<ul>\n<li>Add task dependencies to form DAGs</li>\n<li>Program dynamic workflows: some tasks spawn or kill other tasks at runtime</li>\n<li>Remotely submit workflows, track their progress, and coordinate data movement tasks</li>\n</ul>\n<h2><strong>Read the Balsam Documentation online at</strong> <a href=\"https://balsam.readthedocs.io/en/latest/\" rel=\"nofollow\">balsam.readthedocs.io</a>!</h2>\n<h2>Existing site-wide installations</h2>\n<p>Balsam is deployed in a public location at the following sites.  On these systems,\nit's not necessary to install Balsam yourself:</p>\n<table>\n<thead>\n<tr>\n<th>Location</th>\n<th>System</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ALCF</td>\n<td>Theta</td>\n<td><code>module load balsam</code></td>\n</tr></tbody></table>\n<h2>Installation</h2>\n<h4>Prerequisites</h4>\n<p>Balsam requires Python 3.6 or later. Preferably, set up an isolated\nvirtualenv or conda environment for Balsam. It's no problem if some\napplications in your workflow run in different Python environments. You will\nneed setuptools 39.2 or newer:</p>\n<pre><span class=\"gp\">$</span> pip install --upgrade pip setuptools\n</pre>\n<p>Some Balsam components require <a href=\"https://github.com/mpi4py/mpi4py\" rel=\"nofollow\">mpi4py</a>,  so\nit is best to install Balsam in an environment with <code>mpi4py</code> already in place\nand configured for your platform.  <strong>At the minimum</strong>, a working MPI\nimplementation and <code>mpicc</code> compiler wrapper should be in the search path, in\nwhich case the <code>mpi4py</code> dependency will automatically build and install.</p>\n<p><a href=\"https://github.com/cython/cython\" rel=\"nofollow\">cython</a> is also used to compile some\nCPU-intensive portions of the Balsam service.  While the Cython dependency will\nalso be installed if it's absent, it is preferable to have an existing version\nbuilt with your platform-tuned compiler wrappers.</p>\n<p>Finally, Balsam requires PostgreSQL version 9.6.4 or newer to be installed. You can verify\nthat PostgreSQL is in the search <code>PATH</code> and the version is up-to-date with:</p>\n<pre><span class=\"gp\">$</span> pg_ctl --version\n</pre>\n<p>It's very easy to <a href=\"https://www.enterprisedb.com/download-postgresql-binaries\" rel=\"nofollow\">get the PostgreSQL binaries</a> if you\ndon't already have them.  Simply adding the PostgreSQL <code>bin/</code> to your search\nPATH should be enough to use Balsam without having to bother a system\nadministrator.</p>\n<h4>Quick setup</h4>\n<pre><span class=\"gp\">$</span> pip install balsam-flow\n<span class=\"gp\">$</span> balsam init ~/myWorkflow\n<span class=\"gp\">$</span> <span class=\"nb\">source</span> balsamactivate myWorkflow\n</pre>\n<p>Once a Balsam database is activated, you can use the command line to manage your workflows:</p>\n<pre><span class=\"gp\">$</span> balsam app --name SayHello --executable <span class=\"s2\">\"echo hello,\"</span>\n<span class=\"gp\">$</span> balsam job --name hi --workflow <span class=\"nb\">test</span> --application SayHello --args <span class=\"s2\">\"World!\"</span>\n<span class=\"gp\">$</span> balsam submit-launch -A MyProject -q DebugQueue -t <span class=\"m\">5</span> -n <span class=\"m\">1</span> --job-mode<span class=\"o\">=</span>mpi\n<span class=\"gp\">$</span> watch balsam ls   <span class=\"c1\">#  follow status in realtime from command-line</span>\n</pre>\n<h2><strong>Keep reading the Balsam Documentation online at</strong> <a href=\"https://balsam.readthedocs.io/en/latest/\" rel=\"nofollow\">balsam.readthedocs.io</a>!</h2>\n<h2>Citing Balsam</h2>\n<p>If you are referencing Balsam in a publication, please cite the following paper:</p>\n<ul>\n<li>M. Salim, T. Uram, J.T. Childers, P. Balaprakash, V. Vishwanath, M. Papka. <em>Balsam: Automated Scheduling and Execution of Dynamic, Data-Intensive HPC Workflows</em>. In Proceedings of the 8th Workshop on Python for High-Performance and Scientific Computing. ACM Press, 2018.</li>\n</ul>\n<p>BSD 3-Clause License</p>\n<p>Copyright (c) 2019, UChicago Argonne LLC\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of UChicago Argonne LLC nor the\nnames of its contributors may be used to endorse or promote products\nderived from this software without specific prior written permission.</p>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL &lt;COPYRIGHT HOLDER&gt; BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n\n          </div>"}, "last_serial": 6202252, "releases": {"0.3.5": [{"comment_text": "", "digests": {"md5": "f04f5338f4d9f195cb44cbba285fc917", "sha256": "d8e69dff9044c37ba4a7664747a79204dc3a92b5e8181e1fa994a461610693fe"}, "downloads": -1, "filename": "balsam_flow-0.3.5-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "f04f5338f4d9f195cb44cbba285fc917", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 200656, "upload_time": "2019-04-26T21:28:00", "upload_time_iso_8601": "2019-04-26T21:28:00.917177Z", "url": "https://files.pythonhosted.org/packages/7e/5e/d1f223fbba5e1efa7306e9251b96e9ad3814063f0da6c27e39951cba40b9/balsam_flow-0.3.5-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5904c3eff1a753c4c76b9e22e4371155", "sha256": "9afa525417c5809fbd9b39b7f7e6fb43898bff816f89b5e1cea8e6f75b3649b5"}, "downloads": -1, "filename": "balsam-flow-0.3.5.tar.gz", "has_sig": false, "md5_digest": "5904c3eff1a753c4c76b9e22e4371155", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 69604, "upload_time": "2019-04-26T21:28:13", "upload_time_iso_8601": "2019-04-26T21:28:13.050516Z", "url": "https://files.pythonhosted.org/packages/61/3c/e3f6c11e193cda14472420e31bf7c66a882bf96a09fe313933a4c8e226fb/balsam-flow-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "e350d9cc69e53d03f6ce84b32f15e675", "sha256": "84155c7dc754ab91477f9044a8ab70262c7f87302cf11942a9618e22ae72aaaf"}, "downloads": -1, "filename": "balsam-flow-0.3.6.macosx-10.14-x86_64.tar.gz", "has_sig": false, "md5_digest": "e350d9cc69e53d03f6ce84b32f15e675", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 278407, "upload_time": "2019-10-30T20:40:53", "upload_time_iso_8601": "2019-10-30T20:40:53.872231Z", "url": "https://files.pythonhosted.org/packages/44/79/ffb9bf0c5ac5617b64295c5b29e7da8d6e9a1962b5773abbc4edc5bdd7a0/balsam-flow-0.3.6.macosx-10.14-x86_64.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "6100abeb92de60df45fb488b9cb43900", "sha256": "f244e1828070d67a5c96a1c49567bd4a5361f26a5a6dd4dcb412f75bc82c6600"}, "downloads": -1, "filename": "balsam_flow-0.3.7-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "6100abeb92de60df45fb488b9cb43900", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 203600, "upload_time": "2019-10-30T20:53:48", "upload_time_iso_8601": "2019-10-30T20:53:48.916767Z", "url": "https://files.pythonhosted.org/packages/af/eb/864894de3c85bb603f3a5cdf7aba3b8b3e6a55a3c2d163429a7245935cd8/balsam_flow-0.3.7-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf563aab8b80e9fb30835bd4c316a000", "sha256": "1cc65f9c7129dd49562c8af746c205e2c7849b4e9f207e59138f6bbc236b96bf"}, "downloads": -1, "filename": "balsam-flow-0.3.7.tar.gz", "has_sig": false, "md5_digest": "bf563aab8b80e9fb30835bd4c316a000", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 205059, "upload_time": "2019-10-30T20:53:50", "upload_time_iso_8601": "2019-10-30T20:53:50.870181Z", "url": "https://files.pythonhosted.org/packages/36/24/30ba94e3ced4520fab10b106e456f9571e4ec0a7c3a04a5e29932294daed/balsam-flow-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "e4039c9e75133fb7a11257eacb07a927", "sha256": "12c7fe73659be911fa4d73bfd8ea51349251679b48b759756bec72a3442820a7"}, "downloads": -1, "filename": "balsam_flow-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "e4039c9e75133fb7a11257eacb07a927", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 93633, "upload_time": "2019-11-26T16:10:06", "upload_time_iso_8601": "2019-11-26T16:10:06.832316Z", "url": "https://files.pythonhosted.org/packages/98/c5/55411522a8338adc676bb07353227aced5b4352a8e7e5be3277a3c72ea52/balsam_flow-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff9941dcd19497cc3a172a5683694ea9", "sha256": "eb7707f00c423b90e091c4757cc653db23a0aefd5c54e97ffe0d9de0dfa8c858"}, "downloads": -1, "filename": "balsam-flow-0.3.8.tar.gz", "has_sig": false, "md5_digest": "ff9941dcd19497cc3a172a5683694ea9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 205270, "upload_time": "2019-11-26T16:10:09", "upload_time_iso_8601": "2019-11-26T16:10:09.052892Z", "url": "https://files.pythonhosted.org/packages/6b/6b/e8f5c0ffb0b038a7a5ab58ba70eabbbfb811c512653513f99207f77c6bb6/balsam-flow-0.3.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e4039c9e75133fb7a11257eacb07a927", "sha256": "12c7fe73659be911fa4d73bfd8ea51349251679b48b759756bec72a3442820a7"}, "downloads": -1, "filename": "balsam_flow-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "e4039c9e75133fb7a11257eacb07a927", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 93633, "upload_time": "2019-11-26T16:10:06", "upload_time_iso_8601": "2019-11-26T16:10:06.832316Z", "url": "https://files.pythonhosted.org/packages/98/c5/55411522a8338adc676bb07353227aced5b4352a8e7e5be3277a3c72ea52/balsam_flow-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff9941dcd19497cc3a172a5683694ea9", "sha256": "eb7707f00c423b90e091c4757cc653db23a0aefd5c54e97ffe0d9de0dfa8c858"}, "downloads": -1, "filename": "balsam-flow-0.3.8.tar.gz", "has_sig": false, "md5_digest": "ff9941dcd19497cc3a172a5683694ea9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 205270, "upload_time": "2019-11-26T16:10:09", "upload_time_iso_8601": "2019-11-26T16:10:09.052892Z", "url": "https://files.pythonhosted.org/packages/6b/6b/e8f5c0ffb0b038a7a5ab58ba70eabbbfb811c512653513f99207f77c6bb6/balsam-flow-0.3.8.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:59 2020"}