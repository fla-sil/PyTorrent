{"info": {"author": "Zack Booth Simpson", "author_email": "zack.simpson+pypi@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development"], "description": "# Zest\n.\n\nA function-oriented testing framework for Python 3.\n\nWritten by Zack Booth Simpson, 2020\n\nAvailable as a pip package: `pip install zbs.zest`\n\n# Motivation\n\nPython's default unittest module is a class-oriented approach that\ndoes not lend itself well to recursive setup and teardown.\n\nZest uses a recursive function-based approach best demonstrated\nwith examples.\n\n```python\n##########################################\n# some_module.py\n\ndef _say_hello():\n    print(\"Hello\")\n\ndef unit_under_test(a):\n    if a <= 0:\n        raise ValueError(\"a should be positive\")\n\n    _say_hello()\n\n    return a + 1\n\n##########################################\n# zest_some_module.py\n\nfrom zest import zest\nimport some_module\n\ndef zest_unit_under_test():\n    # This is a root-level zest because it starts with \"zest_\"\n\n    def it_raises_on_non_positive():\n        def it_raises_on_negative():\n            with zest.raises(ValueError):\n                some_module.unit_under_test(-1)\n\n        def it_raises_on_zero():\n            with zest.raises(ValueError):\n                some_module.unit_under_test(0)\n\n        zest()  # Note this call which tells zest to run the above two tests\n\n    def it_calls_say_hello_once():\n        with zest.mock(some_module._say_hello) as m_say_hello:\n            some_module.unit_under_test(0)\n            assert m_say_hello.called_once()\n\n    zest()  # Same here, this will cause it_raises_on_non_positive and it_calls_say_hello_once to run\n```\n\nThe zest() function uses stack reflection to call each function that\nit finds in the caller's stack-frame.  However, it only calls functions\nthat do not start with an underscore.\n\nTwo special functions are reserved: _before() and _after()\nwhich are called before/after _each_ test function in the scope.\n\nFor example, often you may want to set up some complex state.\n\n```python\ndef zest_my_test():\n    state = None\n\n    def _before():\n        nonlocal state\n        state = State(1, 2, 3)\n\n    def it_raises_if_bad():\n        with zest.raises(Exception):\n            unit_under_test(state)\n\n    def it_modifies_state_on_1():\n        unit_under_test(state, 1)\n        assert state.foo == 1\n\n    def it_modifies_state_on_2():\n        unit_under_test(state, 2)\n        assert state.foo == 2\n```\n\n# Examples\n\nSee `./zests/zest_examples.py` for more examples.  \n\n# Usage\n\nSearch recursively all directories for def zest_*() functions and execute them.\n```bash\n$ zest\n```\n\nShow progress\n```bash\n$ zest --verbose=0  # Show no progress\n$ zest --verbose=1  # Show \"dot\" progress (default)\n$ zest --verbose=2  # Show hierarchical full progress\n```\n\nSearch only inside the specific dirs\n```bash\n$ zest --include_dirs=./abc:./def\n```\n\nRun only tests that are in the \"integration\" or \"slow\" groups\n```bash\n$ zest --groups=integration:slow\n```\n\nRun only tests that contain the string \"foobar\". This will also\nrun any parent test needed to execute the match.\n```bash\n$ zest foobar\n```\n\nDisable test order shuffling which is on by default to increase the\nliklihood that accidental order-dependencies are manifest.\n```bash\n$ zest --disable_shuffle\n```\n\n# Helpers\n\n## Expected exceptions\n\n```python\ndef zest_foobar_should_raise_on_no_arguments():\n    with zest.raises(ValueError):\n        foobar()\n```\n\nSometimes you may wish to check a property of the trapped exception\n```python\ndef zest_foobar_should_raise_on_no_arguments():\n    with zest.raises(ValueError) as e:\n        foobar()\n    assert e.exception.args == (\"bad juju\",)\n```\n\nOften you may wish to check only for a string of a property of the trapped exception\nin which case you can use the in_* argument to the raises.\n```python\ndef zest_foobar_should_raise_on_no_arguments():\n    with zest.raises(ValueError, in_args=\"bad juju\") as e:\n        foobar()\n```\n\n## Mocks\n\n```python\nimport unit_under_test\n\ndef zest_foobar():\n    with zest.mock(unit_under_test.bar) as m_bar:\n        # Suppose unit_under_test.foobar() calls bar()\n        m_bar.returns(0)\n        unit_under_test.foobar()\n    assert m_bar.called_once_with(0)\n```\n\nSee `zest.MockFunction` for a complete MockFunction API.\n\n\n# Gotchas\n\nDon't forget to put the zest() call at each level of the test.\nIf you forget, the zest runner will throw an error along the lines of:\n\"function did not terminate with a call to zest()...\"\n\n```python\ndef zest_something():\n    def it_foos():\n        foo()\n\n    def it_bars():\n        bar()\n\n    # WRONG! zest() wasn't called here. Error will be thrown when the test is run.\n```\n\n\nDo not mock outside of test functions:\n```python\ndef zest_something():\n    with zest.mock(...):\n        def it_does_something():\n            assert something\n\n        def it_does_something_else():\n            assert something\n\n    # The zest() will execute outside of the above \"with\" statement so\n    # the two tests will not inherit the mock as expected.\n    zest()\n```\n\nRather, put the zest() inside the \"with mock\":\n```python\ndef zest_something():\n    with zest.mock(...):\n        def it_does_something():\n            assert something\n\n        def it_does_something_else():\n            assert something\n\n        # This is fine because zest() was called INSIDE the with\n        zest()\n```\n\nDon't have more than one zest() call in the same scope.\n```python\ndef zest_something():\n    with zest.mock(...):\n        def it_does_something():\n            assert something\n\n        def it_does_something_else():\n            assert something\n\n        # Like above example; so far, so good, but watch out...\n        zest()\n\n    with zest.mock(...):\n        def it_does_yet_another_thing():\n            assert something\n\n        # WRONG! A second call to zest() will RE-EXECUTE the above two tests\n        # (it_does_something and it_does_something_else) because this\n        # second call to zest() doesn't know that it is inside of a with statement.\n        # The \"with\" scope makes it look different but really the following\n        # call to zest() and the call to zest above are actually in the same scope. \n        zest()\n```\n\n\nWhen asserting on properties of an expected exception,\nbe sure to do assert outside the scope of the \"with\" as demonstrated:\n\nWrong:\n```python\nwith zest.raises(SomeException) as e:\n    something_that_raises()\n    assert e.exception.property == \"something\"\n    # The above \"assert\" will NOT be run because the exception thrown by \n    # something_that_raises() will be caught and never get to execute the assert!\n```\n\nRight:\n```python\nwith zest.raises(SomeException) as e:\n    something_that_raises()\nassert e.exception.property == \"something\"\n    # (Note the reference to \"e.exception.\" as opposed to \"e.\"\n```\n\nRemember that the exception returned from a zest.raises() is\n*not* of the type you are expecting but rather of a wrapper\nclass called `TrappedException`. To get to the properties\nof interest you need to use `e.exception.*`.\n\nWrong:\n```python\nwith zest.raises(SomeException) as e:\n    something_that_raises()\n\nassert e.property == \"something\"\n# Wrong! e is of type TrappedException therefore the above will not work as expected.\n```\n\nRight:\n```python\nwith zest.raises(SomeException) as e:\n    something_that_raises()\n\nassert e.exception.property == \"something\"\n# Correct, .exception reference to get original exception from the `e` TrappedException wrapper.\n```\n\n# Development\n\n## Setup\n\nWhen installed as a package, \"zest\" is created as an entrypoint\nin setup.py.  But in development mode, an alias is created\nin `.pipenvshrc`. Add this following to your ~/.bashrc (yes, even in OSX)\nso that `pipenv shell` will be able to pick it up.\n\n```bash\nif [[ -f .pipenvshrc ]]; then\n  . .pipenvshrc\nfi\n```\n\n## Run in development mode\n\n```bash\npipenv shell\n```\n\n## Test\n\nTo run all the example tests (which actually test the tester itself).\n```bash\n$ zest\n```\n\n## Deploy\n```bash\n$ ./deploy.sh\n```\nYou will need the user and password and credentials for Pypi.org\n\n\n# TODO\n* Add --rng_seed option\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zsimpson/zbs.zest", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "zbs.zest", "package_url": "https://pypi.org/project/zbs.zest/", "platform": "", "project_url": "https://pypi.org/project/zbs.zest/", "project_urls": {"Homepage": "https://github.com/zsimpson/zbs.zest"}, "release_url": "https://pypi.org/project/zbs.zest/1.0.8/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A function-oriented testing framework for Python 3.", "version": "1.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Zest</h1>\n<p>.</p>\n<p>A function-oriented testing framework for Python 3.</p>\n<p>Written by Zack Booth Simpson, 2020</p>\n<p>Available as a pip package: <code>pip install zbs.zest</code></p>\n<h1>Motivation</h1>\n<p>Python's default unittest module is a class-oriented approach that\ndoes not lend itself well to recursive setup and teardown.</p>\n<p>Zest uses a recursive function-based approach best demonstrated\nwith examples.</p>\n<pre><span class=\"c1\">##########################################</span>\n<span class=\"c1\"># some_module.py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_say_hello</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">unit_under_test</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"a should be positive\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">_say_hello</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">##########################################</span>\n<span class=\"c1\"># zest_some_module.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">zest</span> <span class=\"kn\">import</span> <span class=\"n\">zest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">some_module</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">zest_unit_under_test</span><span class=\"p\">():</span>\n    <span class=\"c1\"># This is a root-level zest because it starts with \"zest_\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">it_raises_on_non_positive</span><span class=\"p\">():</span>\n        <span class=\"k\">def</span> <span class=\"nf\">it_raises_on_negative</span><span class=\"p\">():</span>\n            <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">):</span>\n                <span class=\"n\">some_module</span><span class=\"o\">.</span><span class=\"n\">unit_under_test</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">it_raises_on_zero</span><span class=\"p\">():</span>\n            <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">):</span>\n                <span class=\"n\">some_module</span><span class=\"o\">.</span><span class=\"n\">unit_under_test</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">zest</span><span class=\"p\">()</span>  <span class=\"c1\"># Note this call which tells zest to run the above two tests</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">it_calls_say_hello_once</span><span class=\"p\">():</span>\n        <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">some_module</span><span class=\"o\">.</span><span class=\"n\">_say_hello</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">m_say_hello</span><span class=\"p\">:</span>\n            <span class=\"n\">some_module</span><span class=\"o\">.</span><span class=\"n\">unit_under_test</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"n\">m_say_hello</span><span class=\"o\">.</span><span class=\"n\">called_once</span><span class=\"p\">()</span>\n\n    <span class=\"n\">zest</span><span class=\"p\">()</span>  <span class=\"c1\"># Same here, this will cause it_raises_on_non_positive and it_calls_say_hello_once to run</span>\n</pre>\n<p>The zest() function uses stack reflection to call each function that\nit finds in the caller's stack-frame.  However, it only calls functions\nthat do not start with an underscore.</p>\n<p>Two special functions are reserved: _before() and _after()\nwhich are called before/after <em>each</em> test function in the scope.</p>\n<p>For example, often you may want to set up some complex state.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">zest_my_test</span><span class=\"p\">():</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_before</span><span class=\"p\">():</span>\n        <span class=\"k\">nonlocal</span> <span class=\"n\">state</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">it_raises_if_bad</span><span class=\"p\">():</span>\n        <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n            <span class=\"n\">unit_under_test</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">it_modifies_state_on_1</span><span class=\"p\">():</span>\n        <span class=\"n\">unit_under_test</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">it_modifies_state_on_2</span><span class=\"p\">():</span>\n        <span class=\"n\">unit_under_test</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre>\n<h1>Examples</h1>\n<p>See <code>./zests/zest_examples.py</code> for more examples.</p>\n<h1>Usage</h1>\n<p>Search recursively all directories for def zest_*() functions and execute them.</p>\n<pre>$ zest\n</pre>\n<p>Show progress</p>\n<pre>$ zest --verbose<span class=\"o\">=</span><span class=\"m\">0</span>  <span class=\"c1\"># Show no progress</span>\n$ zest --verbose<span class=\"o\">=</span><span class=\"m\">1</span>  <span class=\"c1\"># Show \"dot\" progress (default)</span>\n$ zest --verbose<span class=\"o\">=</span><span class=\"m\">2</span>  <span class=\"c1\"># Show hierarchical full progress</span>\n</pre>\n<p>Search only inside the specific dirs</p>\n<pre>$ zest --include_dirs<span class=\"o\">=</span>./abc:./def\n</pre>\n<p>Run only tests that are in the \"integration\" or \"slow\" groups</p>\n<pre>$ zest --groups<span class=\"o\">=</span>integration:slow\n</pre>\n<p>Run only tests that contain the string \"foobar\". This will also\nrun any parent test needed to execute the match.</p>\n<pre>$ zest foobar\n</pre>\n<p>Disable test order shuffling which is on by default to increase the\nliklihood that accidental order-dependencies are manifest.</p>\n<pre>$ zest --disable_shuffle\n</pre>\n<h1>Helpers</h1>\n<h2>Expected exceptions</h2>\n<pre><span class=\"k\">def</span> <span class=\"nf\">zest_foobar_should_raise_on_no_arguments</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">):</span>\n        <span class=\"n\">foobar</span><span class=\"p\">()</span>\n</pre>\n<p>Sometimes you may wish to check a property of the trapped exception</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">zest_foobar_should_raise_on_no_arguments</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">foobar</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s2\">\"bad juju\"</span><span class=\"p\">,)</span>\n</pre>\n<p>Often you may wish to check only for a string of a property of the trapped exception\nin which case you can use the in_* argument to the raises.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">zest_foobar_should_raise_on_no_arguments</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"n\">in_args</span><span class=\"o\">=</span><span class=\"s2\">\"bad juju\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">foobar</span><span class=\"p\">()</span>\n</pre>\n<h2>Mocks</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unit_under_test</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">zest_foobar</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">unit_under_test</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">m_bar</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Suppose unit_under_test.foobar() calls bar()</span>\n        <span class=\"n\">m_bar</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">unit_under_test</span><span class=\"o\">.</span><span class=\"n\">foobar</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">m_bar</span><span class=\"o\">.</span><span class=\"n\">called_once_with</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>See <code>zest.MockFunction</code> for a complete MockFunction API.</p>\n<h1>Gotchas</h1>\n<p>Don't forget to put the zest() call at each level of the test.\nIf you forget, the zest runner will throw an error along the lines of:\n\"function did not terminate with a call to zest()...\"</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">zest_something</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">it_foos</span><span class=\"p\">():</span>\n        <span class=\"n\">foo</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">it_bars</span><span class=\"p\">():</span>\n        <span class=\"n\">bar</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># WRONG! zest() wasn't called here. Error will be thrown when the test is run.</span>\n</pre>\n<p>Do not mock outside of test functions:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">zest_something</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">it_does_something</span><span class=\"p\">():</span>\n            <span class=\"k\">assert</span> <span class=\"n\">something</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">it_does_something_else</span><span class=\"p\">():</span>\n            <span class=\"k\">assert</span> <span class=\"n\">something</span>\n\n    <span class=\"c1\"># The zest() will execute outside of the above \"with\" statement so</span>\n    <span class=\"c1\"># the two tests will not inherit the mock as expected.</span>\n    <span class=\"n\">zest</span><span class=\"p\">()</span>\n</pre>\n<p>Rather, put the zest() inside the \"with mock\":</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">zest_something</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">it_does_something</span><span class=\"p\">():</span>\n            <span class=\"k\">assert</span> <span class=\"n\">something</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">it_does_something_else</span><span class=\"p\">():</span>\n            <span class=\"k\">assert</span> <span class=\"n\">something</span>\n\n        <span class=\"c1\"># This is fine because zest() was called INSIDE the with</span>\n        <span class=\"n\">zest</span><span class=\"p\">()</span>\n</pre>\n<p>Don't have more than one zest() call in the same scope.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">zest_something</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">it_does_something</span><span class=\"p\">():</span>\n            <span class=\"k\">assert</span> <span class=\"n\">something</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">it_does_something_else</span><span class=\"p\">():</span>\n            <span class=\"k\">assert</span> <span class=\"n\">something</span>\n\n        <span class=\"c1\"># Like above example; so far, so good, but watch out...</span>\n        <span class=\"n\">zest</span><span class=\"p\">()</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">it_does_yet_another_thing</span><span class=\"p\">():</span>\n            <span class=\"k\">assert</span> <span class=\"n\">something</span>\n\n        <span class=\"c1\"># WRONG! A second call to zest() will RE-EXECUTE the above two tests</span>\n        <span class=\"c1\"># (it_does_something and it_does_something_else) because this</span>\n        <span class=\"c1\"># second call to zest() doesn't know that it is inside of a with statement.</span>\n        <span class=\"c1\"># The \"with\" scope makes it look different but really the following</span>\n        <span class=\"c1\"># call to zest() and the call to zest above are actually in the same scope. </span>\n        <span class=\"n\">zest</span><span class=\"p\">()</span>\n</pre>\n<p>When asserting on properties of an expected exception,\nbe sure to do assert outside the scope of the \"with\" as demonstrated:</p>\n<p>Wrong:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">SomeException</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">something_that_raises</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"n\">property</span> <span class=\"o\">==</span> <span class=\"s2\">\"something\"</span>\n    <span class=\"c1\"># The above \"assert\" will NOT be run because the exception thrown by </span>\n    <span class=\"c1\"># something_that_raises() will be caught and never get to execute the assert!</span>\n</pre>\n<p>Right:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">SomeException</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">something_that_raises</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"n\">property</span> <span class=\"o\">==</span> <span class=\"s2\">\"something\"</span>\n    <span class=\"c1\"># (Note the reference to \"e.exception.\" as opposed to \"e.\"</span>\n</pre>\n<p>Remember that the exception returned from a zest.raises() is\n<em>not</em> of the type you are expecting but rather of a wrapper\nclass called <code>TrappedException</code>. To get to the properties\nof interest you need to use <code>e.exception.*</code>.</p>\n<p>Wrong:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">SomeException</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">something_that_raises</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">property</span> <span class=\"o\">==</span> <span class=\"s2\">\"something\"</span>\n<span class=\"c1\"># Wrong! e is of type TrappedException therefore the above will not work as expected.</span>\n</pre>\n<p>Right:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">zest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">SomeException</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">something_that_raises</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"n\">property</span> <span class=\"o\">==</span> <span class=\"s2\">\"something\"</span>\n<span class=\"c1\"># Correct, .exception reference to get original exception from the `e` TrappedException wrapper.</span>\n</pre>\n<h1>Development</h1>\n<h2>Setup</h2>\n<p>When installed as a package, \"zest\" is created as an entrypoint\nin setup.py.  But in development mode, an alias is created\nin <code>.pipenvshrc</code>. Add this following to your ~/.bashrc (yes, even in OSX)\nso that <code>pipenv shell</code> will be able to pick it up.</p>\n<pre><span class=\"k\">if</span> <span class=\"o\">[[</span> -f .pipenvshrc <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n  . .pipenvshrc\n<span class=\"k\">fi</span>\n</pre>\n<h2>Run in development mode</h2>\n<pre>pipenv shell\n</pre>\n<h2>Test</h2>\n<p>To run all the example tests (which actually test the tester itself).</p>\n<pre>$ zest\n</pre>\n<h2>Deploy</h2>\n<pre>$ ./deploy.sh\n</pre>\n<p>You will need the user and password and credentials for Pypi.org</p>\n<h1>TODO</h1>\n<ul>\n<li>Add --rng_seed option</li>\n</ul>\n\n          </div>"}, "last_serial": 7175919, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "43095c1668ecc1da2436056a3fadddea", "sha256": "41f72c8d8411ce6359a1ea79ff799710e03360d668dc730014feec4e79f72d94"}, "downloads": -1, "filename": "zbs.zest-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "43095c1668ecc1da2436056a3fadddea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25715, "upload_time": "2020-04-26T02:41:19", "upload_time_iso_8601": "2020-04-26T02:41:19.312545Z", "url": "https://files.pythonhosted.org/packages/ba/eb/d20a1d635e6d468cd1ab5f54ec0a7328e19fe5a340fdf62e912636c35385/zbs.zest-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59e373238829ec35a34082de5915946a", "sha256": "f727adaabf8ef65af6851fb49d26867b56d3020aa23733b514acdc646320b525"}, "downloads": -1, "filename": "zbs.zest-1.0.0.tar.gz", "has_sig": false, "md5_digest": "59e373238829ec35a34082de5915946a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12870, "upload_time": "2020-04-26T02:41:21", "upload_time_iso_8601": "2020-04-26T02:41:21.727607Z", "url": "https://files.pythonhosted.org/packages/7c/c2/25e509fa9970b173ec06b08289af238bea245c380d4c569d4104fc0a16f5/zbs.zest-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a8c10a118cefa747120d1ece1cd78544", "sha256": "c72d58028f861136d50ebbc7f8673a2293257ea4a3159e294dfbbbd85c5f7168"}, "downloads": -1, "filename": "zbs.zest-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a8c10a118cefa747120d1ece1cd78544", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25693, "upload_time": "2020-04-26T03:10:10", "upload_time_iso_8601": "2020-04-26T03:10:10.875813Z", "url": "https://files.pythonhosted.org/packages/41/97/79e1c834aaf1d3531cde7b3ff434a91a61a4e54369ddb76e2eed3fc7c9c9/zbs.zest-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f61f7b6fec2a4f2b9e59c154549215a2", "sha256": "ac68288328f3ef17bb5b7f6d5a2aae7f36347f2d2f6c0a6c5cbfdd09be39677c"}, "downloads": -1, "filename": "zbs.zest-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f61f7b6fec2a4f2b9e59c154549215a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12859, "upload_time": "2020-04-26T03:10:12", "upload_time_iso_8601": "2020-04-26T03:10:12.896639Z", "url": "https://files.pythonhosted.org/packages/c2/33/6ed5390cc3b60092e0b114d8f8e55672ef43ec7a45363bded774cceb6247/zbs.zest-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "5797029b74499de5da5c0e552c19cb40", "sha256": "a5f91fc1642b33a7cdfa4c4c26be8b1d89410622eacae3b7fcd570c3c72b440e"}, "downloads": -1, "filename": "zbs.zest-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5797029b74499de5da5c0e552c19cb40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25785, "upload_time": "2020-04-26T03:30:10", "upload_time_iso_8601": "2020-04-26T03:30:10.163767Z", "url": "https://files.pythonhosted.org/packages/40/9e/8b6520a9c10e06ac21e70ef8d42854197a1635e126576a04055f1350d18d/zbs.zest-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f11d12bd04f55c9c1551fdf9e7edbe65", "sha256": "4355ad911ea1ec0c92e8c1848ccf8082e299054202bd8ea8e611cfe72e1e32ab"}, "downloads": -1, "filename": "zbs.zest-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f11d12bd04f55c9c1551fdf9e7edbe65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12957, "upload_time": "2020-04-26T03:30:12", "upload_time_iso_8601": "2020-04-26T03:30:12.969895Z", "url": "https://files.pythonhosted.org/packages/8e/f1/558f363a5910b4928bce9c402ba2a60c3cf4768891527fe80379b941ae8f/zbs.zest-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "efbb9e181dde2e27b05385d62f48ca60", "sha256": "c432d79586c53750fa83d35929e65b827ebdae4b6c08479b87749b9d0c9aa814"}, "downloads": -1, "filename": "zbs.zest-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "efbb9e181dde2e27b05385d62f48ca60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25993, "upload_time": "2020-04-26T18:48:30", "upload_time_iso_8601": "2020-04-26T18:48:30.363701Z", "url": "https://files.pythonhosted.org/packages/0f/4f/55d7252945433e0e81f351489a47ce56de8dc762021201c2913bec92dd0d/zbs.zest-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "914676e9f90ba2cb592593be6146989c", "sha256": "02220815a6746dd298cb6a7d8307e5968f8cdb8e88217f359b7cf08c77bb9e78"}, "downloads": -1, "filename": "zbs.zest-1.0.3.tar.gz", "has_sig": false, "md5_digest": "914676e9f90ba2cb592593be6146989c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13111, "upload_time": "2020-04-26T18:48:33", "upload_time_iso_8601": "2020-04-26T18:48:33.155572Z", "url": "https://files.pythonhosted.org/packages/38/1c/71d85cbdc8a30feea6bc2d8d9434587a3c94afab258469dd0212b1ec3bde/zbs.zest-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "182bcab84c007cb1951fbbe5c524950b", "sha256": "fd981f9857ccdb31302e08d5a418fa18997b22b5cb2782ef34377d5e128bfa8d"}, "downloads": -1, "filename": "zbs.zest-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "182bcab84c007cb1951fbbe5c524950b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25991, "upload_time": "2020-04-26T19:01:00", "upload_time_iso_8601": "2020-04-26T19:01:00.213249Z", "url": "https://files.pythonhosted.org/packages/df/eb/f7a2824a458b47e6a677f2869146a06681d6537f5963d8675f1833f3bcef/zbs.zest-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92fa6b7e0eb06382491d6d9b87e5b011", "sha256": "9d85d5e52c1e4bb3609cd616beeedddb91d8044e1cea84655449fecf172f8124"}, "downloads": -1, "filename": "zbs.zest-1.0.4.tar.gz", "has_sig": false, "md5_digest": "92fa6b7e0eb06382491d6d9b87e5b011", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13109, "upload_time": "2020-04-26T19:01:04", "upload_time_iso_8601": "2020-04-26T19:01:04.369807Z", "url": "https://files.pythonhosted.org/packages/91/fe/108622d8662fcea811154d7e9a754bf2d607848258db5ff2aedefbf7d963/zbs.zest-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "d2e8aa794207347ca0ece864c59d9841", "sha256": "23399aa20cca0dd6d90e1d96c3f2d7b83770ccec5743534ee25b4547eb64a903"}, "downloads": -1, "filename": "zbs.zest-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d2e8aa794207347ca0ece864c59d9841", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26102, "upload_time": "2020-04-27T21:25:36", "upload_time_iso_8601": "2020-04-27T21:25:36.906793Z", "url": "https://files.pythonhosted.org/packages/97/bc/e3fe5cb3e6f3c27aff36d8bcc14491a0b4c5160979edbde71704f2054e55/zbs.zest-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62477caea4acaac628cdab5c556e94bf", "sha256": "a97f324df45ad9da2f9e51d33ae9d6f1620fe8d7cfa87bfb6c8a72d232bd07d2"}, "downloads": -1, "filename": "zbs.zest-1.0.5.tar.gz", "has_sig": false, "md5_digest": "62477caea4acaac628cdab5c556e94bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13224, "upload_time": "2020-04-27T21:25:38", "upload_time_iso_8601": "2020-04-27T21:25:38.091442Z", "url": "https://files.pythonhosted.org/packages/57/47/118fd4ada0d35f6d9ca5b2d9aa5708b6497d097a4349f4b4592951baf6e7/zbs.zest-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "74ffe7a4802316ff3d32a77c4d2c1771", "sha256": "b99e09b0338203f516896cf9c7e4af738451d66e2f9cb0a81afd54614315b3ab"}, "downloads": -1, "filename": "zbs.zest-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "74ffe7a4802316ff3d32a77c4d2c1771", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26114, "upload_time": "2020-05-05T20:12:32", "upload_time_iso_8601": "2020-05-05T20:12:32.573489Z", "url": "https://files.pythonhosted.org/packages/0f/45/859d974434dec27fafad979461a73fd1dedd58c07e057526e9bec3d3e371/zbs.zest-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be8f45c95e524de4ff4ba088f5595f80", "sha256": "1a0ac1693f90fb827e238c32d811873d215b7931563372a6f344cdf299f1be92"}, "downloads": -1, "filename": "zbs.zest-1.0.6.tar.gz", "has_sig": false, "md5_digest": "be8f45c95e524de4ff4ba088f5595f80", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35097, "upload_time": "2020-05-05T20:12:33", "upload_time_iso_8601": "2020-05-05T20:12:33.869089Z", "url": "https://files.pythonhosted.org/packages/c8/dd/352599dfdf80a04ab9990c3f57eeca05edc16bd0a11144391678ba69bc37/zbs.zest-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "087382944882f1f221957b7df243336a", "sha256": "99824541529768f7e173f567a69dacf6a0366e07d0884fc086062dc0087cc721"}, "downloads": -1, "filename": "zbs.zest-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "087382944882f1f221957b7df243336a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26114, "upload_time": "2020-05-05T20:42:35", "upload_time_iso_8601": "2020-05-05T20:42:35.292067Z", "url": "https://files.pythonhosted.org/packages/45/8d/b28842895ee3601e07cb7f4bb79da96f3fd63296075bb5807b7cd484e101/zbs.zest-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39857f36b088822042869404c0d46eb4", "sha256": "663bf4cf72ceec2f561559e99d0277a1b3875067bf5892a63e6cc86a251480b7"}, "downloads": -1, "filename": "zbs.zest-1.0.7.tar.gz", "has_sig": false, "md5_digest": "39857f36b088822042869404c0d46eb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35105, "upload_time": "2020-05-05T20:42:38", "upload_time_iso_8601": "2020-05-05T20:42:38.167996Z", "url": "https://files.pythonhosted.org/packages/97/18/979df18adec8ed03ba765e5dd756033e472eaf18e5beacee314ffe0fbc57/zbs.zest-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "f38bc8d58280f231fd8c073f298631c2", "sha256": "37cb4cecc2764f27ad93043fcaf0b79c7fc9697c70fe44e0646c856571c27a85"}, "downloads": -1, "filename": "zbs.zest-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f38bc8d58280f231fd8c073f298631c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26115, "upload_time": "2020-05-05T21:18:40", "upload_time_iso_8601": "2020-05-05T21:18:40.788809Z", "url": "https://files.pythonhosted.org/packages/1e/fb/819dbfe46fca3f3013bded9e8cff3e087b98022fddbee778809235ecceb2/zbs.zest-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1c2c22680d535e986e5e054f4ee967a", "sha256": "2f256b66ebee5ddf05c45e84d38a721051a1a5c8b8965b62b35c6fb1a8456e24"}, "downloads": -1, "filename": "zbs.zest-1.0.8.tar.gz", "has_sig": false, "md5_digest": "d1c2c22680d535e986e5e054f4ee967a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35288, "upload_time": "2020-05-05T21:18:42", "upload_time_iso_8601": "2020-05-05T21:18:42.195255Z", "url": "https://files.pythonhosted.org/packages/9e/89/b88c3100b083add90ae5268c59b1edaf2ab75e3aa0309fa6e95d27da6ef8/zbs.zest-1.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f38bc8d58280f231fd8c073f298631c2", "sha256": "37cb4cecc2764f27ad93043fcaf0b79c7fc9697c70fe44e0646c856571c27a85"}, "downloads": -1, "filename": "zbs.zest-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f38bc8d58280f231fd8c073f298631c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26115, "upload_time": "2020-05-05T21:18:40", "upload_time_iso_8601": "2020-05-05T21:18:40.788809Z", "url": "https://files.pythonhosted.org/packages/1e/fb/819dbfe46fca3f3013bded9e8cff3e087b98022fddbee778809235ecceb2/zbs.zest-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1c2c22680d535e986e5e054f4ee967a", "sha256": "2f256b66ebee5ddf05c45e84d38a721051a1a5c8b8965b62b35c6fb1a8456e24"}, "downloads": -1, "filename": "zbs.zest-1.0.8.tar.gz", "has_sig": false, "md5_digest": "d1c2c22680d535e986e5e054f4ee967a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35288, "upload_time": "2020-05-05T21:18:42", "upload_time_iso_8601": "2020-05-05T21:18:42.195255Z", "url": "https://files.pythonhosted.org/packages/9e/89/b88c3100b083add90ae5268c59b1edaf2ab75e3aa0309fa6e95d27da6ef8/zbs.zest-1.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:36 2020"}