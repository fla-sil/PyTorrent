{"info": {"author": "Mateu C\u00e0naves", "author_email": "mcanaves@hundredrooms.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "# hr-prometheus\n\n[![Build Status](https://travis-ci.com/HundredRooms/hr-prometheus.svg?branch=master)](https://travis-ci.com/HundredRooms/hr-prometheus)\n[![codecov](https://codecov.io/gh/HundredRooms/hr-prometheus/branch/master/graph/badge.svg)](https://codecov.io/gh/HundredRooms/hr-prometheus)\n[![PyPI version](https://badge.fury.io/py/hr-prometheus.svg)](https://badge.fury.io/py/hr-prometheus)\n\nPrometheus integration for aiohttp projects.\n\nhr-prometheus adds support for providing [aiohttp](https://aiohttp.readthedocs.io/en/stable/) applications metrics to [prometheus](https://prometheus.io/docs/introduction/overview/). It is implemented as a aiohttp middleware.\n\nCurrently, it exports the following metrics via the /metrics endpoint by default:\n\n- request_latency: Elapsed time per request in seconds.\n  - Labels exported: method (HTTP method), path\n- request_count: Number of requests received.\n  - Labels exported: method (HTTP method), path, status (HTTP status)\n- requests_in_progress: In progress requests.\n  - Labels exported: method (HTTP method), path\n\nDefault request behaviour can be modified by passing a custom `RequestMonitor` to the middleware. You can find out how to do it in [advanced section](#advance-usage).\n\n## Installation\n\n```shell\npip install hr-prometheus\n```\n\n## Usage\n\nBriefly, the following is all you need to do to measure and export prometheus metrics from your aiohttp web application:\n\n```python\nfrom aiohttp import web\nfrom hr_prometheus import hrprometheus_middleware, hrprometheus_view\n\napp = web.Application()\napp.router.add_get(\"/metrics\", hrprometheus_view)\napp.middlewares.append(hrprometheus_middleware())\n```\n\n### Advanced usage\n\n#### Custom monitors\n\nTo modify the default behavior you simply need to create a new monitor that inherits from the `BaseRequestMonitor` and pass the class to the middleware.\n\nThis class provides two public methods. `update_init_metrics` and `update_end_metrics`.\nThese methods are executed at the beginning and end of a request respectively. Simply add the metrics you want at each point.\n\nHere's an example taken from the default monitor.\n\n```python\nfrom aiohttp import web\nfrom hr_prometheus import hrprometheus_middleware, hrprometheus_view\nfrom hr_prometheus.monitors import BaseRequestMonitor\n\n\nclass RequestMonitor(BaseRequestMonitor):\n    REQUEST_COUNT = Counter(\n        \"request_count\", \"Number of requests received\", [\"method\", \"path\", \"status\"]\n    )\n    REQUEST_LATENCY = Histogram(\n        \"request_latency\", \"Elapsed time per request\", [\"method\", \"path\"]\n    )\n    REQUEST_IN_PROGRESS = Gauge(\n        \"requests_in_progress\", \"Requests in progress\", [\"method\", \"path\"]\n    )\n\n    def update_init_metrics(self):\n        self.REQUEST_IN_PROGRESS.labels(*self.request_description).inc()\n\n    def update_end_metrics(self):\n        resp_time = time.time() - self.init_time\n        self.REQUEST_COUNT.labels(*self.request_description, self.response_status).inc()\n        self.REQUEST_LATENCY.labels(*self.request_description).observe(resp_time)\n        self.REQUEST_IN_PROGRESS.labels(*self.request_description).dec()\n\n\napp = web.Application()\napp.router.add_get(\"/metrics\", hrprometheus_view)\napp.middlewares.append(hrprometheus_middleware(RequestMonitor))\n```\n\n#### Grouping dynamic routes\nIn aiohttp you may define dynamic routes by parametrizing the route path (e.g. `/v1/resource/{resource_id}`). If you are interested in grouping the different values for a given parameter under the same metrics you can do so by specifying the fixed parameters for a named route to the request monitor (you can do so trhough the middleware for convinience).\n\nHere is an example of an api returning neighbouring cells from a matrix\n```python\nfrom aiohttp import web\nfrom hr_prometheus import hrprometheus_middleware\nfrom my_project.views import get_cell_neighbour_view\n\nmiddleware = hrprometheus_middleware(fixed_routes_parameter={\"get_cell_neighbour\": [\"cell_id\"]})\napp = web.Application(middlewares=[middleware])\napp.add_route(\"GET\", \"/cell_neighbour/{cell_id}/direction/{direction}\", get_cell_neighbour_view, name=\"get_cell_neighbour\")\n```\nThis way requests with path `/cell_neighbour/1948/direction/north` and `/cell_neighbour/874/direction/north` are both collapsed into `\"/cell_neighbour/{cell_id}/direction/north\"`\n\nThis is especially useful when you have a wide range of possible values for a path parameter and you are only interested in the overall monitoring, thus avoiding metrics namespace pollution.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hundredrooms/hr-prometheus", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "hr-prometheus", "package_url": "https://pypi.org/project/hr-prometheus/", "platform": "", "project_url": "https://pypi.org/project/hr-prometheus/", "project_urls": {"Homepage": "https://github.com/hundredrooms/hr-prometheus"}, "release_url": "https://pypi.org/project/hr-prometheus/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Prometheus integration for aiohttp framework.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>hr-prometheus</h1>\n<p><a href=\"https://travis-ci.com/HundredRooms/hr-prometheus\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e43da94954c49e9c1df8145a8340141b99a8cad0/68747470733a2f2f7472617669732d63692e636f6d2f48756e64726564526f6f6d732f68722d70726f6d6574686575732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/HundredRooms/hr-prometheus\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe7786721e455b690f7e4db96e26fef1fef8e98a/68747470733a2f2f636f6465636f762e696f2f67682f48756e64726564526f6f6d732f68722d70726f6d6574686575732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/hr-prometheus\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3ab238bee8b36e50a30c11050926d7f263893d6/68747470733a2f2f62616467652e667572792e696f2f70792f68722d70726f6d6574686575732e737667\"></a></p>\n<p>Prometheus integration for aiohttp projects.</p>\n<p>hr-prometheus adds support for providing <a href=\"https://aiohttp.readthedocs.io/en/stable/\" rel=\"nofollow\">aiohttp</a> applications metrics to <a href=\"https://prometheus.io/docs/introduction/overview/\" rel=\"nofollow\">prometheus</a>. It is implemented as a aiohttp middleware.</p>\n<p>Currently, it exports the following metrics via the /metrics endpoint by default:</p>\n<ul>\n<li>request_latency: Elapsed time per request in seconds.\n<ul>\n<li>Labels exported: method (HTTP method), path</li>\n</ul>\n</li>\n<li>request_count: Number of requests received.\n<ul>\n<li>Labels exported: method (HTTP method), path, status (HTTP status)</li>\n</ul>\n</li>\n<li>requests_in_progress: In progress requests.\n<ul>\n<li>Labels exported: method (HTTP method), path</li>\n</ul>\n</li>\n</ul>\n<p>Default request behaviour can be modified by passing a custom <code>RequestMonitor</code> to the middleware. You can find out how to do it in <a href=\"#advance-usage\" rel=\"nofollow\">advanced section</a>.</p>\n<h2>Installation</h2>\n<pre>pip install hr-prometheus\n</pre>\n<h2>Usage</h2>\n<p>Briefly, the following is all you need to do to measure and export prometheus metrics from your aiohttp web application:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hr_prometheus</span> <span class=\"kn\">import</span> <span class=\"n\">hrprometheus_middleware</span><span class=\"p\">,</span> <span class=\"n\">hrprometheus_view</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s2\">\"/metrics\"</span><span class=\"p\">,</span> <span class=\"n\">hrprometheus_view</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">middlewares</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">hrprometheus_middleware</span><span class=\"p\">())</span>\n</pre>\n<h3>Advanced usage</h3>\n<h4>Custom monitors</h4>\n<p>To modify the default behavior you simply need to create a new monitor that inherits from the <code>BaseRequestMonitor</code> and pass the class to the middleware.</p>\n<p>This class provides two public methods. <code>update_init_metrics</code> and <code>update_end_metrics</code>.\nThese methods are executed at the beginning and end of a request respectively. Simply add the metrics you want at each point.</p>\n<p>Here's an example taken from the default monitor.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hr_prometheus</span> <span class=\"kn\">import</span> <span class=\"n\">hrprometheus_middleware</span><span class=\"p\">,</span> <span class=\"n\">hrprometheus_view</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hr_prometheus.monitors</span> <span class=\"kn\">import</span> <span class=\"n\">BaseRequestMonitor</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RequestMonitor</span><span class=\"p\">(</span><span class=\"n\">BaseRequestMonitor</span><span class=\"p\">):</span>\n    <span class=\"n\">REQUEST_COUNT</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"request_count\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Number of requests received\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"method\"</span><span class=\"p\">,</span> <span class=\"s2\">\"path\"</span><span class=\"p\">,</span> <span class=\"s2\">\"status\"</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">REQUEST_LATENCY</span> <span class=\"o\">=</span> <span class=\"n\">Histogram</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"request_latency\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Elapsed time per request\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"method\"</span><span class=\"p\">,</span> <span class=\"s2\">\"path\"</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">REQUEST_IN_PROGRESS</span> <span class=\"o\">=</span> <span class=\"n\">Gauge</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"requests_in_progress\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Requests in progress\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"method\"</span><span class=\"p\">,</span> <span class=\"s2\">\"path\"</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_init_metrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">REQUEST_IN_PROGRESS</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request_description</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">inc</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_end_metrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">resp_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">init_time</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">REQUEST_COUNT</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request_description</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response_status</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">inc</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">REQUEST_LATENCY</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request_description</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">observe</span><span class=\"p\">(</span><span class=\"n\">resp_time</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">REQUEST_IN_PROGRESS</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request_description</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dec</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s2\">\"/metrics\"</span><span class=\"p\">,</span> <span class=\"n\">hrprometheus_view</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">middlewares</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">hrprometheus_middleware</span><span class=\"p\">(</span><span class=\"n\">RequestMonitor</span><span class=\"p\">))</span>\n</pre>\n<h4>Grouping dynamic routes</h4>\n<p>In aiohttp you may define dynamic routes by parametrizing the route path (e.g. <code>/v1/resource/{resource_id}</code>). If you are interested in grouping the different values for a given parameter under the same metrics you can do so by specifying the fixed parameters for a named route to the request monitor (you can do so trhough the middleware for convinience).</p>\n<p>Here is an example of an api returning neighbouring cells from a matrix</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hr_prometheus</span> <span class=\"kn\">import</span> <span class=\"n\">hrprometheus_middleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_project.views</span> <span class=\"kn\">import</span> <span class=\"n\">get_cell_neighbour_view</span>\n\n<span class=\"n\">middleware</span> <span class=\"o\">=</span> <span class=\"n\">hrprometheus_middleware</span><span class=\"p\">(</span><span class=\"n\">fixed_routes_parameter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"get_cell_neighbour\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"cell_id\"</span><span class=\"p\">]})</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">middlewares</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">middleware</span><span class=\"p\">])</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/cell_neighbour/</span><span class=\"si\">{cell_id}</span><span class=\"s2\">/direction/</span><span class=\"si\">{direction}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">get_cell_neighbour_view</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"get_cell_neighbour\"</span><span class=\"p\">)</span>\n</pre>\n<p>This way requests with path <code>/cell_neighbour/1948/direction/north</code> and <code>/cell_neighbour/874/direction/north</code> are both collapsed into <code>\"/cell_neighbour/{cell_id}/direction/north\"</code></p>\n<p>This is especially useful when you have a wide range of possible values for a path parameter and you are only interested in the overall monitoring, thus avoiding metrics namespace pollution.</p>\n\n          </div>"}, "last_serial": 4637656, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d201606596bc99984b2d36b79dcd0fa2", "sha256": "1950924e7295293eeec5fd430af47306890b24717dffe726d26e91b92a2e02d7"}, "downloads": -1, "filename": "hr-prometheus-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d201606596bc99984b2d36b79dcd0fa2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3562, "upload_time": "2018-12-18T13:31:12", "upload_time_iso_8601": "2018-12-18T13:31:12.265078Z", "url": "https://files.pythonhosted.org/packages/54/93/a1cb23166fd5a1f5fe06c55027ea5f2cb7f1bc9b19a5552cf3f80aaa9075/hr-prometheus-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "30602924d2100067e18f6ff264469cb2", "sha256": "184af6deccfa94e29a0fd564a5f51ddec722841004b629dab8de0d3484c77c30"}, "downloads": -1, "filename": "hr-prometheus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "30602924d2100067e18f6ff264469cb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3568, "upload_time": "2018-12-18T14:02:49", "upload_time_iso_8601": "2018-12-18T14:02:49.529776Z", "url": "https://files.pythonhosted.org/packages/f0/3f/bdebdb0aa5f16c251f272783ba64b0a6b94a1a1c72450a416776b9cde2fe/hr-prometheus-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9606a8b0efcc1881baf1eaa88d12af00", "sha256": "877f069cecd64eaba7b241e85c1847e1dc335344f83a32b029b64a6ec717750a"}, "downloads": -1, "filename": "hr-prometheus-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9606a8b0efcc1881baf1eaa88d12af00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4552, "upload_time": "2018-12-27T11:45:40", "upload_time_iso_8601": "2018-12-27T11:45:40.455748Z", "url": "https://files.pythonhosted.org/packages/d8/9b/09316b5388ce4f471517ef94562779fb0b8f9339349c3709bcbda68332a7/hr-prometheus-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9606a8b0efcc1881baf1eaa88d12af00", "sha256": "877f069cecd64eaba7b241e85c1847e1dc335344f83a32b029b64a6ec717750a"}, "downloads": -1, "filename": "hr-prometheus-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9606a8b0efcc1881baf1eaa88d12af00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4552, "upload_time": "2018-12-27T11:45:40", "upload_time_iso_8601": "2018-12-27T11:45:40.455748Z", "url": "https://files.pythonhosted.org/packages/d8/9b/09316b5388ce4f471517ef94562779fb0b8f9339349c3709bcbda68332a7/hr-prometheus-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:24 2020"}