{"info": {"author": "Yusuke Matsui", "author_email": "matsui528@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "<img src=\"http://yusukematsui.me/project/rii/img/logotype97.png\" width=\"300\">\n\n![Build](https://github.com/matsui528/rii/workflows/Build/badge.svg)\n[![Build Status](https://travis-ci.org/matsui528/rii.svg?branch=master)](https://travis-ci.org/matsui528/rii)\n[![Documentation Status](https://readthedocs.org/projects/rii/badge/?version=latest)](https://rii.readthedocs.io/en/latest/?badge=latest)\n[![PyPI version](https://badge.fury.io/py/rii.svg)](https://badge.fury.io/py/rii)\n[![Downloads](https://pepy.tech/badge/rii)](https://pepy.tech/project/rii)\n\n\n\n\n\nReconfigurable Inverted Index (Rii): IVFPQ-based fast and memory efficient approximate nearest neighbor search method\nwith a subset-search functionality.\n\nReference:\n- [Y. Matsui](http://yusukematsui.me/), [R. Hinami](http://www.satoh-lab.nii.ac.jp/member/hinami/), and [S. Satoh](http://research.nii.ac.jp/~satoh/index.html), \"**Reconfigurable Inverted Index**\", ACM Multimedia 2018 (oral). [**[paper](https://dl.acm.org/ft_gateway.cfm?id=3240630)**] [**[project](http://yusukematsui.me/project/rii/rii.html)**]\n\n## Summary of features\n![](http://yusukematsui.me/project/rii/img/teaser1.png)  |  ![](http://yusukematsui.me/project/rii/img/teaser2.png)\n:---:|:---:\nThe search can be operated for a subset of a database. | Rii remains fast even after many new items are added.\n- Fast and memory efficient ANN. Rii enables you to run billion-scale search in less than 10 ms.\n- You can run the search over a **subset** of the whole database\n- Rii Remains fast even after many vectors are newly added (i.e., the data structure can be **reconfigured**)\n\n\n## Installing\nYou can install the package via pip. This library works with Python 3.5+ on linux.\n```\npip install rii\n```\n\n## [Documentation](https://rii.readthedocs.io/en/latest/index.html)\n- [Tutorial](https://rii.readthedocs.io/en/latest/source/tutorial.html)\n- [Tips](https://rii.readthedocs.io/en/latest/source/tips.html)\n- [API](https://rii.readthedocs.io/en/latest/source/api.html)\n\n## Usage\n\n### Basic ANN\n\n```python\nimport rii\nimport nanopq\nimport numpy as np\n\nN, Nt, D = 10000, 1000, 128\nX = np.random.random((N, D)).astype(np.float32)  # 10,000 128-dim vectors to be searched\nXt = np.random.random((Nt, D)).astype(np.float32)  # 1,000 128-dim vectors for training\nq = np.random.random((D,)).astype(np.float32)  # a 128-dim vector\n\n# Prepare a PQ/OPQ codec with M=32 sub spaces\ncodec = nanopq.PQ(M=32).fit(vecs=Xt)  # Trained using Xt\n\n# Instantiate a Rii class with the codec\ne = rii.Rii(fine_quantizer=codec)\n\n# Add vectors\ne.add_configure(vecs=X)\n\n# Search\nids, dists = e.query(q=q, topk=3)\nprint(ids, dists)  # e.g., [7484 8173 1556] [15.06257439 15.38533878 16.16935158]\n```\nNote that you can construct a PQ codec and instantiate the Rii class at the same time if you want.\n```python\ne = rii.Rii(fine_quantizer=nanopq.PQ(M=32).fit(vecs=Xt))\ne.add_configure(vecs=X)\n```\nFurthermore, you can even write them in one line by chaining a function.\n```python\ne = rii.Rii(fine_quantizer=nanopq.PQ(M=32).fit(vecs=Xt)).add_configure(vecs=X)\n```\n\n### Subset search\n\n```python\n# The search can be conducted over a subset of the database\ntarget_ids = np.array([85, 132, 236, 551, 694, 728, 992, 1234])  # Specified by IDs\nids, dists = e.query(q=q, topk=3, target_ids=target_ids)\nprint(ids, dists)  # e.g., [728  85 132] [14.80522156 15.92787838 16.28690338]\n```\n\n### Data addition and reconfiguration\n\n```python\n# Add new vectors\nX2 = np.random.random((1000, D)).astype(np.float32)\ne.add(vecs=X2)  # Now N is 11000\ne.query(q=q)  # Ok. (0.12 msec / query)\n\n# However, if you add quite a lot of vectors, the search might become slower\n# because the data structure has been optimized for the initial item size (N=10000)\nX3 = np.random.random((1000000, D)).astype(np.float32) \ne.add(vecs=X3)  # A lot. Now N is 1011000\ne.query(q=q)  # Slower (0.96 msec/query)\n\n# In such case, run the reconfigure function. That updates the data structure\ne.reconfigure()\ne.query(q=q)  # Ok. (0.21 msec / query)\n```\n\n### I/O by pickling\n```python\nimport pickle\nwith open('rii.pkl', 'wb') as f:\n    pickle.dump(e, f)\nwith open('rii.pkl', 'rb') as f:\n    e_dumped = pickle.load(f)  # e_dumped is identical to e\n```\n\n### Util functions\n```python\n# Print the current parameters\ne.print_params()\n\n# Delete all PQ-codes and posting lists. fine_quantizer is kept.\ne.clear()\n\n# You can switch the verbose flag\ne.verbose = False\n\n# You can merge two Rii instances if they have the same fine_quantizer\ne1 = rii.Rii(fine_quantizer=codec)\ne2 = rii.Rii(fine_quantizer=codec)\ne1.add_reconfigure(vecs=X1)\ne2.add_reconfigure(vecs=X2)\ne1.merge(e2)  # Now e1 contains both X1 and X2\n\n```\n\n## [Examples](./examples)\n- [Simple tag search](./examples/tag_search/simple_tag_search.ipynb)\n- [Benchmark](./examples/benchmark/)\n\n## Author\n- [Yusuke Matsui](http://yusukematsui.me)\n\n## Credits\n- The logo is designed by [@richardbmx](https://github.com/richardbmx) ([#4](https://github.com/matsui528/rii/issues/4))", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matsui528/rii", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rii", "package_url": "https://pypi.org/project/rii/", "platform": "", "project_url": "https://pypi.org/project/rii/", "project_urls": {"Homepage": "https://github.com/matsui528/rii"}, "release_url": "https://pypi.org/project/rii/0.2.7/", "requires_dist": null, "requires_python": "", "summary": "Fast and memory-efficient ANN with a subset-search functionality", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cba4a1e911279caa30118e07abea2451c38a1ad7/687474703a2f2f797573756b656d61747375692e6d652f70726f6a6563742f7269692f696d672f6c6f676f7479706539372e706e67\" width=\"300\">\n<p><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d0e1516aaee51b4a76a3959352b6914b68430b7/68747470733a2f2f6769746875622e636f6d2f6d61747375693532382f7269692f776f726b666c6f77732f4275696c642f62616467652e737667\">\n<a href=\"https://travis-ci.org/matsui528/rii\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a7a08e4f2f852f3660ea3d885f9d8a3379efae9/68747470733a2f2f7472617669732d63692e6f72672f6d61747375693532382f7269692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://rii.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1bad2519a7685bf72e29f8afe8b867a91d4918f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7269692f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://badge.fury.io/py/rii\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6358f9c7b5c0933ec2930e3024884897a9723423/68747470733a2f2f62616467652e667572792e696f2f70792f7269692e737667\"></a>\n<a href=\"https://pepy.tech/project/rii\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78313c5c75e643933ea2a9ffa70a121a896c96ac/68747470733a2f2f706570792e746563682f62616467652f726969\"></a></p>\n<p>Reconfigurable Inverted Index (Rii): IVFPQ-based fast and memory efficient approximate nearest neighbor search method\nwith a subset-search functionality.</p>\n<p>Reference:</p>\n<ul>\n<li><a href=\"http://yusukematsui.me/\" rel=\"nofollow\">Y. Matsui</a>, <a href=\"http://www.satoh-lab.nii.ac.jp/member/hinami/\" rel=\"nofollow\">R. Hinami</a>, and <a href=\"http://research.nii.ac.jp/%7Esatoh/index.html\" rel=\"nofollow\">S. Satoh</a>, \"<strong>Reconfigurable Inverted Index</strong>\", ACM Multimedia 2018 (oral). [<strong><a href=\"https://dl.acm.org/ft_gateway.cfm?id=3240630\" rel=\"nofollow\">paper</a></strong>] [<strong><a href=\"http://yusukematsui.me/project/rii/rii.html\" rel=\"nofollow\">project</a></strong>]</li>\n</ul>\n<h2>Summary of features</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfac009ec34cf5e93bac7514c164a8fdab3294a2/687474703a2f2f797573756b656d61747375692e6d652f70726f6a6563742f7269692f696d672f746561736572312e706e67\"></th>\n<th align=\"center\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5604df093076737eb98e81167b84f92dc8b6f14c/687474703a2f2f797573756b656d61747375692e6d652f70726f6a6563742f7269692f696d672f746561736572322e706e67\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">The search can be operated for a subset of a database.</td>\n<td align=\"center\">Rii remains fast even after many new items are added.</td>\n</tr></tbody></table>\n<ul>\n<li>Fast and memory efficient ANN. Rii enables you to run billion-scale search in less than 10 ms.</li>\n<li>You can run the search over a <strong>subset</strong> of the whole database</li>\n<li>Rii Remains fast even after many vectors are newly added (i.e., the data structure can be <strong>reconfigured</strong>)</li>\n</ul>\n<h2>Installing</h2>\n<p>You can install the package via pip. This library works with Python 3.5+ on linux.</p>\n<pre><code>pip install rii\n</code></pre>\n<h2><a href=\"https://rii.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">Documentation</a></h2>\n<ul>\n<li><a href=\"https://rii.readthedocs.io/en/latest/source/tutorial.html\" rel=\"nofollow\">Tutorial</a></li>\n<li><a href=\"https://rii.readthedocs.io/en/latest/source/tips.html\" rel=\"nofollow\">Tips</a></li>\n<li><a href=\"https://rii.readthedocs.io/en/latest/source/api.html\" rel=\"nofollow\">API</a></li>\n</ul>\n<h2>Usage</h2>\n<h3>Basic ANN</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rii</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nanopq</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Nt</span><span class=\"p\">,</span> <span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">128</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>  <span class=\"c1\"># 10,000 128-dim vectors to be searched</span>\n<span class=\"n\">Xt</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"n\">Nt</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>  <span class=\"c1\"># 1,000 128-dim vectors for training</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"n\">D</span><span class=\"p\">,))</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>  <span class=\"c1\"># a 128-dim vector</span>\n\n<span class=\"c1\"># Prepare a PQ/OPQ codec with M=32 sub spaces</span>\n<span class=\"n\">codec</span> <span class=\"o\">=</span> <span class=\"n\">nanopq</span><span class=\"o\">.</span><span class=\"n\">PQ</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">Xt</span><span class=\"p\">)</span>  <span class=\"c1\"># Trained using Xt</span>\n\n<span class=\"c1\"># Instantiate a Rii class with the codec</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">rii</span><span class=\"o\">.</span><span class=\"n\">Rii</span><span class=\"p\">(</span><span class=\"n\">fine_quantizer</span><span class=\"o\">=</span><span class=\"n\">codec</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add vectors</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">add_configure</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Search</span>\n<span class=\"n\">ids</span><span class=\"p\">,</span> <span class=\"n\">dists</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">topk</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">,</span> <span class=\"n\">dists</span><span class=\"p\">)</span>  <span class=\"c1\"># e.g., [7484 8173 1556] [15.06257439 15.38533878 16.16935158]</span>\n</pre>\n<p>Note that you can construct a PQ codec and instantiate the Rii class at the same time if you want.</p>\n<pre><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">rii</span><span class=\"o\">.</span><span class=\"n\">Rii</span><span class=\"p\">(</span><span class=\"n\">fine_quantizer</span><span class=\"o\">=</span><span class=\"n\">nanopq</span><span class=\"o\">.</span><span class=\"n\">PQ</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">Xt</span><span class=\"p\">))</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">add_configure</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">)</span>\n</pre>\n<p>Furthermore, you can even write them in one line by chaining a function.</p>\n<pre><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">rii</span><span class=\"o\">.</span><span class=\"n\">Rii</span><span class=\"p\">(</span><span class=\"n\">fine_quantizer</span><span class=\"o\">=</span><span class=\"n\">nanopq</span><span class=\"o\">.</span><span class=\"n\">PQ</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">Xt</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">add_configure</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">)</span>\n</pre>\n<h3>Subset search</h3>\n<pre><span class=\"c1\"># The search can be conducted over a subset of the database</span>\n<span class=\"n\">target_ids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">132</span><span class=\"p\">,</span> <span class=\"mi\">236</span><span class=\"p\">,</span> <span class=\"mi\">551</span><span class=\"p\">,</span> <span class=\"mi\">694</span><span class=\"p\">,</span> <span class=\"mi\">728</span><span class=\"p\">,</span> <span class=\"mi\">992</span><span class=\"p\">,</span> <span class=\"mi\">1234</span><span class=\"p\">])</span>  <span class=\"c1\"># Specified by IDs</span>\n<span class=\"n\">ids</span><span class=\"p\">,</span> <span class=\"n\">dists</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">topk</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">target_ids</span><span class=\"o\">=</span><span class=\"n\">target_ids</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">,</span> <span class=\"n\">dists</span><span class=\"p\">)</span>  <span class=\"c1\"># e.g., [728  85 132] [14.80522156 15.92787838 16.28690338]</span>\n</pre>\n<h3>Data addition and reconfiguration</h3>\n<pre><span class=\"c1\"># Add new vectors</span>\n<span class=\"n\">X2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">X2</span><span class=\"p\">)</span>  <span class=\"c1\"># Now N is 11000</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok. (0.12 msec / query)</span>\n\n<span class=\"c1\"># However, if you add quite a lot of vectors, the search might become slower</span>\n<span class=\"c1\"># because the data structure has been optimized for the initial item size (N=10000)</span>\n<span class=\"n\">X3</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span> \n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">X3</span><span class=\"p\">)</span>  <span class=\"c1\"># A lot. Now N is 1011000</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">)</span>  <span class=\"c1\"># Slower (0.96 msec/query)</span>\n\n<span class=\"c1\"># In such case, run the reconfigure function. That updates the data structure</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">reconfigure</span><span class=\"p\">()</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok. (0.21 msec / query)</span>\n</pre>\n<h3>I/O by pickling</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'rii.pkl'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'rii.pkl'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">e_dumped</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>  <span class=\"c1\"># e_dumped is identical to e</span>\n</pre>\n<h3>Util functions</h3>\n<pre><span class=\"c1\"># Print the current parameters</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">print_params</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Delete all PQ-codes and posting lists. fine_quantizer is kept.</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># You can switch the verbose flag</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># You can merge two Rii instances if they have the same fine_quantizer</span>\n<span class=\"n\">e1</span> <span class=\"o\">=</span> <span class=\"n\">rii</span><span class=\"o\">.</span><span class=\"n\">Rii</span><span class=\"p\">(</span><span class=\"n\">fine_quantizer</span><span class=\"o\">=</span><span class=\"n\">codec</span><span class=\"p\">)</span>\n<span class=\"n\">e2</span> <span class=\"o\">=</span> <span class=\"n\">rii</span><span class=\"o\">.</span><span class=\"n\">Rii</span><span class=\"p\">(</span><span class=\"n\">fine_quantizer</span><span class=\"o\">=</span><span class=\"n\">codec</span><span class=\"p\">)</span>\n<span class=\"n\">e1</span><span class=\"o\">.</span><span class=\"n\">add_reconfigure</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">X1</span><span class=\"p\">)</span>\n<span class=\"n\">e2</span><span class=\"o\">.</span><span class=\"n\">add_reconfigure</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"o\">=</span><span class=\"n\">X2</span><span class=\"p\">)</span>\n<span class=\"n\">e1</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">e2</span><span class=\"p\">)</span>  <span class=\"c1\"># Now e1 contains both X1 and X2</span>\n</pre>\n<h2><a href=\"./examples\" rel=\"nofollow\">Examples</a></h2>\n<ul>\n<li><a href=\"./examples/tag_search/simple_tag_search.ipynb\" rel=\"nofollow\">Simple tag search</a></li>\n<li><a href=\"./examples/benchmark/\" rel=\"nofollow\">Benchmark</a></li>\n</ul>\n<h2>Author</h2>\n<ul>\n<li><a href=\"http://yusukematsui.me\" rel=\"nofollow\">Yusuke Matsui</a></li>\n</ul>\n<h2>Credits</h2>\n<ul>\n<li>The logo is designed by <a href=\"https://github.com/richardbmx\" rel=\"nofollow\">@richardbmx</a> (<a href=\"https://github.com/matsui528/rii/issues/4\" rel=\"nofollow\">#4</a>)</li>\n</ul>\n\n          </div>"}, "last_serial": 6567545, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ace8f4db26ed63c4cd958a599ffb8476", "sha256": "caaffbe8f80fd14c1e42f43635b863f8932d3dd5ad3647a37f9496f93cd735fc"}, "downloads": -1, "filename": "rii-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ace8f4db26ed63c4cd958a599ffb8476", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25748, "upload_time": "2018-08-12T02:52:17", "upload_time_iso_8601": "2018-08-12T02:52:17.371453Z", "url": "https://files.pythonhosted.org/packages/a6/88/9bd8e3e9b3a0f9c545d01002e24b6348a467db6e60e2735cf55a8c678241/rii-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4d47d116c54ec8cc35a51186d3cfbc99", "sha256": "48d04ce445536f413cd7c5a6525ee8f94e5f746ef87b339fe8ce47c423afd665"}, "downloads": -1, "filename": "rii-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4d47d116c54ec8cc35a51186d3cfbc99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26210, "upload_time": "2018-08-21T08:05:16", "upload_time_iso_8601": "2018-08-21T08:05:16.109093Z", "url": "https://files.pythonhosted.org/packages/1a/ea/e6658a7e3c98fed0434bf8929e46185d5dd77e82f2201a9f8baed539c385/rii-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "52649171eeeb4d1f1a14ac00cf20f489", "sha256": "65dbd868c4cfaecaa1df835beced5dfbdbde9bf8cc6737e37d62968c5527bc5a"}, "downloads": -1, "filename": "rii-0.2.1.tar.gz", "has_sig": false, "md5_digest": "52649171eeeb4d1f1a14ac00cf20f489", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26563, "upload_time": "2018-08-23T16:35:41", "upload_time_iso_8601": "2018-08-23T16:35:41.546909Z", "url": "https://files.pythonhosted.org/packages/45/0e/fff085fbf8a01fbf88de3d1817b2a57695adb04b63d7a87db56cb02011d1/rii-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "54c9fcaa6529d6c2a1ad9f10c7d89550", "sha256": "2fcaaba4431c68bf176c54bbba3aaeedb378c885b3e5b93e65ac42f00c40d8b0"}, "downloads": -1, "filename": "rii-0.2.2.tar.gz", "has_sig": false, "md5_digest": "54c9fcaa6529d6c2a1ad9f10c7d89550", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29287, "upload_time": "2018-08-31T02:24:56", "upload_time_iso_8601": "2018-08-31T02:24:56.535437Z", "url": "https://files.pythonhosted.org/packages/2a/1a/3a935181f88c62bcff453df4a8916936d05c2f349b74a6368ac91afce5c4/rii-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "4ada4a505cd4efd2c729566493f55a9a", "sha256": "a535342603b237cadd1ca8342f27111c36131917b2f5cc1ffeb9b14588ffdc01"}, "downloads": -1, "filename": "rii-0.2.3.tar.gz", "has_sig": false, "md5_digest": "4ada4a505cd4efd2c729566493f55a9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31138, "upload_time": "2018-09-13T15:28:26", "upload_time_iso_8601": "2018-09-13T15:28:26.815234Z", "url": "https://files.pythonhosted.org/packages/37/79/379308df392bc07d1c51b288884c2e85ef193c67f7a6908181392778a4e0/rii-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "20c359f3a3d54886ec5d3b8db3c36d81", "sha256": "0a2f92973881187197f590010547a55aab15d7f6b8807b712d703a7e0b305509"}, "downloads": -1, "filename": "rii-0.2.4.tar.gz", "has_sig": false, "md5_digest": "20c359f3a3d54886ec5d3b8db3c36d81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31233, "upload_time": "2018-11-24T16:29:05", "upload_time_iso_8601": "2018-11-24T16:29:05.248368Z", "url": "https://files.pythonhosted.org/packages/3d/b3/3b34703a1546c45a09ea455d9546e025b92917b32290553e02af94d83394/rii-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "22be6f308c3ca56a2ff278ee10d0479a", "sha256": "411962dc59d1d33d3d5ce67bafc63cd4ff0c9e32045bb8f31d43656a376e3fb8"}, "downloads": -1, "filename": "rii-0.2.5.tar.gz", "has_sig": false, "md5_digest": "22be6f308c3ca56a2ff278ee10d0479a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24292, "upload_time": "2019-07-31T15:18:20", "upload_time_iso_8601": "2019-07-31T15:18:20.734905Z", "url": "https://files.pythonhosted.org/packages/51/8f/943fec0fe6d821310d92569702d84b7c7b230eb8412b6373456a2a6dbaf7/rii-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "fcb1a4ad7edc6e9148dbe0a18bb33a04", "sha256": "a6b0e3ec191a6eda57f03eea6bac30d11af9fbcb16e7ef6da70c0b96a01b019f"}, "downloads": -1, "filename": "rii-0.2.6.tar.gz", "has_sig": false, "md5_digest": "fcb1a4ad7edc6e9148dbe0a18bb33a04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24377, "upload_time": "2019-07-31T16:10:26", "upload_time_iso_8601": "2019-07-31T16:10:26.179628Z", "url": "https://files.pythonhosted.org/packages/0a/d5/9e7a32e612b7414c272c0277add9494065e022353d1500963ec2ff0cc7f5/rii-0.2.6.tar.gz", "yanked": false}], "0.2.6.dev1": [{"comment_text": "", "digests": {"md5": "e3c02dc42886fe38bac12ac563743323", "sha256": "ab8482447ce5bc2edc85d620d37f85c286714bd8c753fcbfbec459a46882d007"}, "downloads": -1, "filename": "rii-0.2.6.dev1.tar.gz", "has_sig": false, "md5_digest": "e3c02dc42886fe38bac12ac563743323", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24309, "upload_time": "2019-07-31T15:57:00", "upload_time_iso_8601": "2019-07-31T15:57:00.078663Z", "url": "https://files.pythonhosted.org/packages/a5/e0/dba2a54f341cdfd050b6be47a00fd580809e1e87f37b0432a4d6b90bce59/rii-0.2.6.dev1.tar.gz", "yanked": false}], "0.2.6.dev2": [{"comment_text": "", "digests": {"md5": "299f8425f83640d9590d5352d348e219", "sha256": "b2e2074e81d362bd00fac68bc6d0e2d60b7e960e4fed5be8d710150d4822ccf3"}, "downloads": -1, "filename": "rii-0.2.6.dev2.tar.gz", "has_sig": false, "md5_digest": "299f8425f83640d9590d5352d348e219", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24397, "upload_time": "2019-07-31T16:03:44", "upload_time_iso_8601": "2019-07-31T16:03:44.521028Z", "url": "https://files.pythonhosted.org/packages/cc/98/8274afe594f690448e158cb4a760960c5b846777d16af149f7d5bec27dc6/rii-0.2.6.dev2.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "77558a31325372086ecf3129399e62dd", "sha256": "e842a4fa43d561605513ff331dc9d713a5952b6129f80954593c5aa3cdc4fb2c"}, "downloads": -1, "filename": "rii-0.2.7.tar.gz", "has_sig": false, "md5_digest": "77558a31325372086ecf3129399e62dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23451, "upload_time": "2020-02-04T09:26:30", "upload_time_iso_8601": "2020-02-04T09:26:30.842399Z", "url": "https://files.pythonhosted.org/packages/9e/b0/dde9d443c79665817d4d57140de9097693604e2548b37f150e1020ba67ba/rii-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "77558a31325372086ecf3129399e62dd", "sha256": "e842a4fa43d561605513ff331dc9d713a5952b6129f80954593c5aa3cdc4fb2c"}, "downloads": -1, "filename": "rii-0.2.7.tar.gz", "has_sig": false, "md5_digest": "77558a31325372086ecf3129399e62dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23451, "upload_time": "2020-02-04T09:26:30", "upload_time_iso_8601": "2020-02-04T09:26:30.842399Z", "url": "https://files.pythonhosted.org/packages/9e/b0/dde9d443c79665817d4d57140de9097693604e2548b37f150e1020ba67ba/rii-0.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:40 2020"}