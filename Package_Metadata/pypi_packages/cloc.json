{"info": {"author": "Tanner Burns", "author_email": "tjburns102@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# cloc\n\n<!--Badges-->\n![MIT badge](https://img.shields.io/badge/license-MIT-black)\n![Python3.6 badge](https://img.shields.io/badge/python-v3.6+-blue?logo=python&logoColor=yellow)\n![Platform badge](https://img.shields.io/badge/platform-linux%20%7C%20osx%20%7C%20win32-yellow)\n\n### Command Line Object Chaining\n\n    Command line framework for making simple and complex command line applications.\n    \n* Easily create stand alone commands or nested groups of commands\n* Define and connect commands with class objects\n* Inherit and create viewsets of commands to be able to reuse large nested groups in other cli applications\n* Use mixin commands to quickly add pre defined commands to your cli\n* Groups of commands can be found from any class that has defined a `cloc.core.BaseCmd`\n\n- [ Installation ](#install)\n- [ Documentation ](#docs)\n    - [ Cmd and Grp ](#cmd_and_grp)\n    - [ Parameters - Arg, Opt, and Flg ](#parameters)\n    - [ Classes ](#classes)\n        - [ cloc.core.BaseCmd ](#cloc_basecmd)\n            - [ BaseCmd.values ](#cloc_basecmd_values)\n            - [ BaseCmd.params ](#cloc_basecmd_params)\n            - [ BaseCmd._parse ](#cloc_basecmd__parse)\n            - [ BaseCmd.create_help ](#cloc_basecmd_create_help)\n            - [ BaseCmd._print_help ](#cloc_basecmd__print_help)\n            - [ BaseCmd.create_regex_patterns ](#cloc_basecmd_create_regex_patterns)\n            - [ BaseCmd.get_values ](#cloc_basecmd_get_values)\n        - [ cloc.core.Cmd ](#cloc_cmd)\n            - [ Cmd.fn ](#cloc_cmd_fn)\n            - [ Cmd.dataclass ](#cloc_cmd_dataclass)\n            - [ Cmd.new_dataclass_cmd ](#cloc_cmd_new_dataclass_cmd)\n            - [ Cmd.create_regex_patterns ](#cloc_cmd_create_regex_patterns)\n            - [ Cmd.get_values ](#cloc_cmd_get_values)\n        - [ cloc.core.Grp ](#cloc_grp)\n            - [ Grp.commands ](#cloc_grp_commands)\n            - [ Grp.invoke ](#cloc_grp_invoke)\n            - [ Grp.cmdl ](#cloc_grp_cmdl)\n            - [ Grp.add_command ](#cloc_grp_add_command)\n            - [ Grp.get_command ](#cloc_grp_get_command)\n    - [ Decorators ](#decorators)\n        - [ cloc.decorators.cmd ](#decorators_cmd)\n        - [ cloc.decorators.grp ](#decorators_grp)\n        - [ cloc.decorators.arg ](#decorators_arg)\n        - [ cloc.decorators.opt ](#decorators_opt)\n        - [ cloc.decorators.flg ](#decorators_flg)\n    - [ Types ](#cloc.types_2119495137)\n        - [ cloc.types.BaseType ](#cloc.types.BaseType_1669657826)\n            - [ BaseType.__call__ ](#BaseType.__call___1591412620)\n        - [ cloc.types.Choices ](#cloc.types.Choices_1347752155)\n        - [ cloc.types.DateType ](#cloc.types.DateType_974986765)\n        - [ cloc.types.FileType ](#cloc.types.FileType_442405428)\n            - [ FileType.__exit__ ](#FileType.__exit___1883566034)\n        - [ cloc.types.IntRangeType ](#cloc.types.IntRangeType_483716711)\n        - [ cloc.types.JsonType ](#cloc.types.JsonType_806135893)\n        - [ cloc.types.Sha256Type ](#cloc.types.Sha256Type_897860609)\n        - [ cloc.types.UrlType ](#cloc.types.UrlType_1780703823)\n    - [ Mixins ](#cloc.mixins_1324909550)\n        - [ cloc.mixins.Echo ](#cloc.mixins.Echo_178880302)\n        - [ cloc.mixins.List ](#cloc.mixins.List_1486997353)\n        - [ cloc.mixins.Version ](#cloc.mixins.Version_1196404455)\n    - [ Viewsets ](#cloc.viewsets_343292859)\n        - [ cloc.viewsets.GrpViewset ](#cloc.viewsets.GrpViewset_226248766)\n        - [ cloc.viewsets.ReadOnlyViewset ](#cloc.viewsets.ReadOnlyViewset_1582907420)\n        - [ cloc.viewsets.ReqSessionViewset ](#cloc.viewsets.ReqSessionViewset_902305522)\n    - [ Helper Function ](#helper_function)\n        - [ cloc.utils.echo ](#utils_echo)\n        - [ cloc.utils.trace ](#utils_trace)\n        - [ cloc.utils.listattrs ](#utils_listattrs)\n- [ Advanced Usage Examples ](#examples)\n    - [ Viewset Example ](#viewset_example)\n    \n<br>\n\n<a name=\"install\"></a>\n## Installation\n *Virtual Environment is recommended*\n```bash\npip3 install cloc\n```\n<br>\n\n<a name=\"docs\"></a>\n## Documentation\n\n<a name=\"cmd_and_grp\"></a>\n### Cmd and Grp\n\nThe two core features (classes) of CLOC, command line object chaining, are `Cmd` and `Grp`. \n\nA `Cmd` class object defines one action to process when invoked. In most cases, this will be the defined function that \nis decorated. A command can be invoked by calling the `Cmd` or being called by a `Grp`.\n\nA `Grp` class object holds one to many actions to process when invoked. The actions can be a `Cmd` or another `Grp`, but\nonly one action can be called at a time per `Grp`. The first `Grp` will receive the first command \nline state, `sys.argv[1:]`. Every `Grp` will receive a command line state and will pass this state to the \nnext action. It is on `Grp` only to update the command line state.\n\n```python\nfrom cloc import cmd, grp\n\n@grp('cli')\ndef cli():\n    \"\"\"cli group\"\"\"\n    pass\n\n@cmd('hello-world')\ndef hello_world():\n    \"\"\"hello world function\"\"\"\n    print('Hello World')\n\ncli.add_command(hello_world)\ncli()\n```\n`Grp` help structure. Usage will always be `grp` `name (cmd|grp)`\n```bash\nCli\n\n        cli group\n\nUSAGE: CLI NAME\n\nCommands:\n| Name                     | Description                                          |\n| ------------------------ | ---------------------------------------------------- |\n| hello-world              | hello world function                                 |\n\n```\n\n---\n\n<a name=\"parameters\"></a>\n### Parameters - Arg, Opt, and Flg\n\nCurrently parameters can only be given to a `Cmd`. \n\nThe three core parameters include:\n* `Arg` - a named positional argument for the command\n\n        Arg(name: str, type: Any = str, help: str = None)\n    \n* `Opt` - a named non-positional argument for the command\n\n        Opt(name: str, short_name: str, type: Any = str, default: Any= None, multiple: bool= False, \n            required: bool= False, help: str = None)\n\n* `Flg` - a special version of `Opt` that is always type bool and expects no value\n        \n        Flg(name: str, short_name: str, help: str = None)\n\n<br>\nBelow is an extended greeting cmd from above without the grp.\n\n```python\nfrom cloc import arg, cmd, flg, opt\nfrom cloc.types import IntRange\n\n@cmd('hello')\n@arg('NAME', type=str, help='The person to greet')\n@opt('--count', '-c', type=IntRange, default=1, help='Number of greetings: ex -c 0,5 OR -c 5')\n@flg('--no_repeat', '-nr', help='If given, the greeting will not repeat')\ndef hello(name: str, count: IntRange, no_repeat: bool):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for _ in count:\n        print(f'Hello {name!r}')\n        if no_repeat:\n            break\n\nif __name__ == '__main__':\n    hello()\n```\nThe below output is an example of a print message for the greeting cmd.\n```bash\nHello\n\n        Simple program that greets NAME for a total of COUNT times.\n\nUSAGE: hello NAME --count|-c [value] --no_repeat|-nr \n\nParameters:\n| Name               | Short    | Type             | Help                                                   |\n| ------------------ | -------- | ---------------- | ------------------------------------------------------ |\n| NAME               |          | str              | The person to greet                                    |\n| --count            | -c       | cloc.IntRange    | [default: 1] Number of greetings: ex -c 0,5 OR -c 5    |\n| --no_repeat        | -nr      | bool             | [flag] If given, the greeting will not repeat          |\n```\n\n---\n \n<a name=\"classes\"></a>\n### Classes\n\n<a name=\"cloc_basecmd\"></a>\n#### cloc.core.BaseCmd(name: str, params: Params= None, hidden: bool= False)\n\nA base class that represents a basic command with a name, Params (`cloc.core.Params`), and a hidden option.\nThis class is meant to be inherited by new typs of commands. This class alone cannot invoke any functionality.\n\n<a name=\"cloc_basecmd_values\"></a>\n##### `BaseCmd.values`: `list`\n\nThe values attribute is the list of arguments to be unpacked into the invoked function from the cmd\n\n<a name=\"cloc_basecmd_params\"></a>\n##### `BaseCmd.params`: `cloc.core.Params`\n\nThe params attribute is the list of parameter objects defined for the cmd\n\n<a name=\"cloc_basecmd__parse\"></a>\n##### `BaseCmd._parse(cmdl: list)`\n\nProtected method to parse the current command line state. This will create the help string, create the param regex strings,\nand get params values for the invoked `BaseCmd`. This method is protected and should normally not be called.\n\n<a name=\"cloc_basecmd_create_help\"></a>\n##### `BaseCmd.create_help()`\n\nThe create_help method with create a formatted and colored help string using any params found\n\n<a name=\"cloc_basecmd__print_help\"></a>\n##### `BaseCmd._print_help()`\n\nProtected method to print the help message. This method can be overloaded in certain cases but is meant to call the help\nattribute which might not exists in certain states.\n\n<a name=\"cloc_basecmd_create_regex_patterns\"></a>\n##### `BaseCmd.create_regex_patterns()`\n\nA method to be overloaded by a new command. This should create your regex patterns based on the defined parameters.\n\n<a name=\"cloc_basecmd_get_values\"></a>\n##### `BaseCmd.get_values(cmdl: list)`\n\nA method to be overloaded by a new command. After the regex patterns have been created, then the param values can be\nparsed from the command line state and stored to be unpacked into the invoked command function.\n\n---\n\n<a name=\"cloc_cmd\"></a>\n#### cloc.core.Cmd(name: str, fn: Callable, params: Params = None, hidden: bool = False)\n\nCmd inherits BaseCmd to create a new command that can invoke a given function and be connected to class objects.\n\n<a name=\"cloc_cmd_fn\"></a>\n##### `Cmd.fn`: `Callable`\n\nThe fn attribute is the defined function to run when cmd is invoked\n\n<a name=\"cloc_cmd_dataclass\"></a>\n##### `Cmd.dataclass`: `object`\n\nThe dataclass attribute is an object to replace `self` with if the cmd is defined inside a class\n\n<a name=\"cloc_cmd_new_dataclass_cmd\"></a>\n##### `Cmd.new_dataclass_cmd(cls, name: str, fn: Callable, params: Params= None, hidden: bool= False, dataclass: object= None)`\n`Classmethod`\n\nThis class method will create a new Cmd that will have the dataclass attribute set\n\n<a name=\"cloc_cmd_create_regex_patterns\"></a>\n##### `Cmd.create_regex_patterns()`\n\nCreate regex patterns for each opt and flg param to match against the command line state during get_values\n\n<a name=\"cloc_cmd_get_values\"></a>\n##### `Cmd.get_values(cmdl: list)`\n\nOverloaded function from BaseCmd, this method will create the values to be unpacked into `Cmd.fn`.\nIf `--help` is anywhere the command line, the help message for the nearest Cmd is called.\n\n---\n\n<a name=\"cloc_grp\"></a>\n#### cloc.core.Grp(name: str, commands: List[Cmd] = None, hidden:bool= False)\n\nGrp inherits from BaseCmd, this class holds a list of Cmd objects which can be invoked by name. If Grp calls\nGrp, the command line state will be updated. If a Grp is made with no cmdl supplied then sys.argv[1:] is used.\n\n<a name=\"cloc_grp_commands\"></a>\n##### `Grp.commands`: `List[Cmd]`\n\nThe commands attribute is a list of Cmd objects. Cmd objects are added through the `Grp.add_command` method.\n\n<a name=\"cloc_grp_invoke\"></a>\n##### `BaseCmd.invoke`: `str`\n\nThe invoke attribute is user input from the command line and should match a `Cmd.name` in `Grp.commands`\n\n<a name=\"cloc_grp_cmdl\"></a>\n##### `BaseCmd.cmdl`: `list`\n\nThe cmdl attribute should represent the current state of the command line for the Grp to parse.\n\n<a name=\"cloc_grp_add_command\"></a>\n##### `BaseCmd.add_command(command: BaseCmd, hidden:bool= None)`\n\nAdd a Cmd or Grp to another Grp. Can also override or set hidden state\n\nThis method will also make a new dataclass Cmd if needed. If a command is found inside a class,\ninitiate a dataclass Cmd to be made. Setting `dataclass = class that declared the commands`.\n* a dataclass Cmd is the magic to allow Cli Viewsets and Querysets\n\n<a name=\"cloc_grp_get_command\"></a>\n##### `BaseCmd.get_command(name: str)`\n\nFind a Cmd by name and return the object\n\n---\n\n<a name=\"decorators\"></a>\n### Decorators\n\nAs seen in the above examples, decorators can be used to easily convert defined functions into a cmd or grp.\nThere is a decorator for each core class in cloc. They are imported into the cloc module for ease of use.\n\n<a name=\"decorators_cmd\"></a>\n##### `cloc.decorators.cmd(name:str = None, hidden:bool = False)`\n\nReturns a new Cmd object\n\n<a name=\"decorators_grp\"></a>\n##### `cloc.decorators.grp(name:str = None, hidden:bool = False)`\n\nReturns a new Grp object\n\n<a name=\"decorators_arg\"></a>\n##### `cloc.decorators.arg(name:str, type: Any= None, help: str= None)`\n\nReturns a Cmd object. If the object being decorated is already a Cmd object, the Arg will be appended to Cmd.params\n\n<a name=\"decorators_opt\"></a>\n##### `cloc.decorators.opt(name:str, short_name: str, type: Any= None, default: Any= None, multiple:bool= False, required: bool= False, help: str= None)`\n\nReturns a Cmd object. If the object being decorated is already a Cmd object, the Opt will be appended to Cmd.params\n\n<a name=\"decorators_flg\"></a>\n##### `cloc.decorators.flg(name:str, short_name: str, help: str= None)`\n\nReturns a Cmd object. If the object being decorated is already a Cmd object, the Flg will be appended to Cmd.params\n\n---\n\n<a name=\"cloc.types_2119495137\"></a>\n## Types\n\nNew types can be made to be used to convert the command line input. A new cloc type must inherit the \n`cloc.types.BaseType` and overload the `__call__` function to convert the input. New types can raise an exception or \nprint to trace for a clean exit.\n\n<a name=\"cloc.types.BaseType_1669657826\"></a>\n### cloc.types.BaseType(self, basetype: Any = None)\n\nBaseType - BaseType object for creating new Param types\n\n       __call__ method should be overloaded to handle value; str -> BaseType\n    \n\n<a name=\"BaseType.__call___1591412620\"></a>\n#### `BaseType.__call__(self, value: str)`\n\nconvert to new type\n\n        Args:\n            value {str} -- value to convert\n        \n\n<a name=\"cloc.types.Choices_1347752155\"></a>\n### cloc.types.Choices(self, choices: list, basetype: Any = typing.Any)\n\nConvert input into a Choices object which will verify the input is contained in the defined choices.\n\n\n<a name=\"cloc.types.DateType_974986765\"></a>\n### cloc.types.DateType(self)\n\nConvert input into a DateTime object\n\n\n<a name=\"cloc.types.FileType_442405428\"></a>\n### cloc.types.FileType(self)\n\nConvert input into a file object. The below example is the `cloc.types.FileType` implementation\n\n```python\nclass FileType(BaseType):\n    __name__ = 'cloc.File'\n\n    def __init__(self):\n        # init should provide a base type, default to str\n        super().__init__(io.TextIOWrapper)\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.fobj.close()\n\n    def __call__(self, filepath: str):\n        if not os.path.exists(filepath):\n            trace(f'Error: {filepath!r} does not  exists', TypeError)\n        elif not os.path.isfile(filepath):\n            trace(f'Error: {filepath!r} is not a file', TypeError)\n        self.fobj = open(filepath, 'r')\n        return self.fobj\n```\n\n<a name=\"FileType.__exit___1883566034\"></a>\n#### `FileType.__exit__(self, exc_type, exc_val, exc_tb)`\n\nFile object will be closed in the exit function for the FileType class\n\n<a name=\"cloc.types.IntRangeType_483716711\"></a>\n### cloc.types.IntRangeType(self)\n\nConvert input to an Int Range [0 ... 5]\n\n<a name=\"cloc.types.JsonType_806135893\"></a>\n### cloc.types.JsonType(self)\n\nConvert input to type dict\n\n<a name=\"cloc.types.Sha256Type_897860609\"></a>\n### cloc.types.Sha256Type(self)\n\nConvert input into valid sha256, or if file path is found as input all valid sha256 values in the file\n\n<a name=\"cloc.types.UrlType_1780703823\"></a>\n### cloc.types.UrlType(self)\n\nConvert input into a valid URL\n\n---\n\n<a name=\"cloc.mixins_1324909550\"></a>\n## Mixins\n\nCloc mixins are a simple way to inherit cli functionality to your class. Below is an example of a Version mixin.\nThis enables a class to inherit a 'version' cmd. It will then look for the class attribute version and print it to the\n user.\n\n```python\nclass Version(object):\n    \"\"\"Version Mixin - class object for easily adding an version command to a class\n        - echo the 'version' attribute if it exists\n    \"\"\"\n\n    def __call__(self):\n        return self.version_cmd\n\n    @cmd('version')\n    def version_cmd(self):\n        \"\"\"version mixin command\"\"\"\n        echo(cls=self, attribute='version', color='blue')\n```\n\nThe below mixins are currently offered by cloc.\n\n<a name=\"cloc.mixins.Echo_178880302\"></a>\n### cloc.mixins.Echo(self, *args, **kwargs)\n\nEcho Mixin - class object for easily adding an echo command to a class\n        - echo value of attributes by name\n\n<a name=\"cloc.mixins.List_1486997353\"></a>\n### cloc.mixins.List(self, *args, **kwargs)\n\nList Mixin - class object for easily adding an list command to a class\n        - list attributes and values of the tied class\n\n<a name=\"cloc.mixins.Version_1196404455\"></a>\n### cloc.mixins.Version(self, *args, **kwargs)\n\nVersion Mixin - class object for easily adding an version command to a class\n        - echo the 'version' attribute if it exists\n\n---\n\n<a name=\"cloc.viewsets_343292859\"></a>\n## Viewsets\n\nViewsets are classes of commands that can be inherited into other classes. For example if you have a class that you\nwant to be able to query information from but not write to, you could use a ReadOnlyViewset that only gives the user\nthe option the print and list attributes from the class.\n\nA viewset can also be made into a Queryset if the `GrpViewset` is inherited and the queryset attribute is set.\nThis then enables a user to override methods to retrieve data for the cli interface. A queryset could connect to a\ndatabase to retrieve information for the user based on defined commands.\n\nViewsets and Querysets become very useful in large CLI applications.\n\n<a name=\"cloc.viewsets.GrpViewset_226248766\"></a>\n### cloc.viewsets.GrpViewset(self, *args, **kwargs)\n\nA base Viewset that does not have any commands by default. The GrpViewset contains the queryset attribute and can be \nset for overloading data retrieval.\n\n\n<a name=\"cloc.viewsets.ReadOnlyViewset_1582907420\"></a>\n### cloc.viewsets.ReadOnlyViewset(self, *args, **kwargs)\n\nRead only viewset\n    echo (print attribute by name)\n    list (print all attribute names and values)\n    version(print the current version of the Viewset based on the version attribute)\n\n\n<a name=\"cloc.viewsets.ReqSessionViewset_902305522\"></a>\n### cloc.viewsets.ReqSessionViewset(self, *args, session: requests.sessions.Session = None, max_retries: int = 3, pool_connections: int = 16, pool_maxsize: int = 16, raise_exception: bool = True, **kwargs)\n\nRequests Session Viewset\n    get (a cli cmd for session.get)\n\n---\n\n<a name=\"helper_functions\"></a>\n### Helper Functions\n\n<a name=\"utils_echo\"></a>\n##### `cloc.utils.echo(message: Union[str, tuple, list, dict]= None, cls: object= None, attribute: str= None, list_delimiter: str = '\\n', show_type: bool = False, indent: int= 4, color: str= None)`\n\nFormats and colors a message, or class attribute.\n* Pretty print tuple, list, and dict objects\n* Customize the list delimiter and indent level for pretty print\n* Color output\n* Print the type for the output\n\nprints the formatted string\n\n<a name=\"utils_trace\"></a>\n##### `cloc.utils.trace(message:str, exception: Exception= None, raise_exception: bool= False, exit_code: int= 0, color: str= None)`\n\nFormats and colors the output of a simplified traceback message.\n* Utilizes the echo util for formatted and colored output\n* Can accept and raise any type of Exception with the message\n* Give an exit code to return with if exception is not raised\n\nprints the formatted string and calls `sys.exit(exit_code)` or raises the given Exception (Assert) used if none given\n\n<a name=\"utils_listattrs\"></a>\n##### `cloc.utils.listattrs(cls: object, verbose:bool=False)`\n\nList the attributes and values of a given class object. If verbose is True, python defined attributes \nwill also be included.\n* Utilizes the echo util for formatted output\n\n<br>\n\n<a name=\"examples\"></a>\n## Advanced Usage Examples\n\n<a name=\"viewset_example\"></a>\n### Using a viewset\n```python\nfrom cloc import grp\nfrom cloc.viewsets import ReqSessionViewset\n\n@grp('cli')\ndef cli():\n    \"\"\"requests session cli\"\"\"\n    pass\n\nsession_viewset = ReqSessionViewset(raise_exception=False)\n\ncli.add_command(session_viewset)\n\nif __name__ == '__main__':\n    cli()\n```\nThe get command is implemented by the ReqSessionViewset and does not have to be defined\n```bash\n$ python example3.py get https://jsonplaceholder.typicode.com/todos/1\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"delectus aut autem\",\n  \"completed\": false\n}\n\n```\n<br>", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/tannerburns/cloc", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cloc", "package_url": "https://pypi.org/project/cloc/", "platform": "", "project_url": "https://pypi.org/project/cloc/", "project_urls": {"Homepage": "https://www.github.com/tannerburns/cloc"}, "release_url": "https://pypi.org/project/cloc/0.2.5/", "requires_dist": null, "requires_python": "", "summary": "Command Line Object Chaining (cloc) - Modern cli framework for simple and complex cli applications", "version": "0.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cloc</h1>\n\n<p><img alt=\"MIT badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96906a95261195ca5b0fc4cc80611f2cd65106c1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c61636b\">\n<img alt=\"Python3.6 badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47146b128d721408e96e9d2c6c2816eb8c0c109b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d76332e362b2d626c75653f6c6f676f3d707974686f6e266c6f676f436f6c6f723d79656c6c6f77\">\n<img alt=\"Platform badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/243ae98a3c5876371b0710bf6f27686ea4b429d3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d6c696e75782532302537432532306f737825323025374325323077696e33322d79656c6c6f77\"></p>\n<h3>Command Line Object Chaining</h3>\n<pre><code>Command line framework for making simple and complex command line applications.\n</code></pre>\n<ul>\n<li>Easily create stand alone commands or nested groups of commands</li>\n<li>Define and connect commands with class objects</li>\n<li>Inherit and create viewsets of commands to be able to reuse large nested groups in other cli applications</li>\n<li>Use mixin commands to quickly add pre defined commands to your cli</li>\n<li>Groups of commands can be found from any class that has defined a <code>cloc.core.BaseCmd</code></li>\n</ul>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\"> Installation </a></li>\n<li><a href=\"#docs\" rel=\"nofollow\"> Documentation </a>\n<ul>\n<li><a href=\"#cmd_and_grp\" rel=\"nofollow\"> Cmd and Grp </a></li>\n<li><a href=\"#parameters\" rel=\"nofollow\"> Parameters - Arg, Opt, and Flg </a></li>\n<li><a href=\"#classes\" rel=\"nofollow\"> Classes </a>\n<ul>\n<li><a href=\"#cloc_basecmd\" rel=\"nofollow\"> cloc.core.BaseCmd </a>\n<ul>\n<li><a href=\"#cloc_basecmd_values\" rel=\"nofollow\"> BaseCmd.values </a></li>\n<li><a href=\"#cloc_basecmd_params\" rel=\"nofollow\"> BaseCmd.params </a></li>\n<li><a href=\"#cloc_basecmd__parse\" rel=\"nofollow\"> BaseCmd._parse </a></li>\n<li><a href=\"#cloc_basecmd_create_help\" rel=\"nofollow\"> BaseCmd.create_help </a></li>\n<li><a href=\"#cloc_basecmd__print_help\" rel=\"nofollow\"> BaseCmd._print_help </a></li>\n<li><a href=\"#cloc_basecmd_create_regex_patterns\" rel=\"nofollow\"> BaseCmd.create_regex_patterns </a></li>\n<li><a href=\"#cloc_basecmd_get_values\" rel=\"nofollow\"> BaseCmd.get_values </a></li>\n</ul>\n</li>\n<li><a href=\"#cloc_cmd\" rel=\"nofollow\"> cloc.core.Cmd </a>\n<ul>\n<li><a href=\"#cloc_cmd_fn\" rel=\"nofollow\"> Cmd.fn </a></li>\n<li><a href=\"#cloc_cmd_dataclass\" rel=\"nofollow\"> Cmd.dataclass </a></li>\n<li><a href=\"#cloc_cmd_new_dataclass_cmd\" rel=\"nofollow\"> Cmd.new_dataclass_cmd </a></li>\n<li><a href=\"#cloc_cmd_create_regex_patterns\" rel=\"nofollow\"> Cmd.create_regex_patterns </a></li>\n<li><a href=\"#cloc_cmd_get_values\" rel=\"nofollow\"> Cmd.get_values </a></li>\n</ul>\n</li>\n<li><a href=\"#cloc_grp\" rel=\"nofollow\"> cloc.core.Grp </a>\n<ul>\n<li><a href=\"#cloc_grp_commands\" rel=\"nofollow\"> Grp.commands </a></li>\n<li><a href=\"#cloc_grp_invoke\" rel=\"nofollow\"> Grp.invoke </a></li>\n<li><a href=\"#cloc_grp_cmdl\" rel=\"nofollow\"> Grp.cmdl </a></li>\n<li><a href=\"#cloc_grp_add_command\" rel=\"nofollow\"> Grp.add_command </a></li>\n<li><a href=\"#cloc_grp_get_command\" rel=\"nofollow\"> Grp.get_command </a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#decorators\" rel=\"nofollow\"> Decorators </a>\n<ul>\n<li><a href=\"#decorators_cmd\" rel=\"nofollow\"> cloc.decorators.cmd </a></li>\n<li><a href=\"#decorators_grp\" rel=\"nofollow\"> cloc.decorators.grp </a></li>\n<li><a href=\"#decorators_arg\" rel=\"nofollow\"> cloc.decorators.arg </a></li>\n<li><a href=\"#decorators_opt\" rel=\"nofollow\"> cloc.decorators.opt </a></li>\n<li><a href=\"#decorators_flg\" rel=\"nofollow\"> cloc.decorators.flg </a></li>\n</ul>\n</li>\n<li><a href=\"#cloc.types_2119495137\" rel=\"nofollow\"> Types </a>\n<ul>\n<li><a href=\"#cloc.types.BaseType_1669657826\" rel=\"nofollow\"> cloc.types.BaseType </a>\n<ul>\n<li><a href=\"#BaseType.__call___1591412620\" rel=\"nofollow\"> BaseType.<strong>call</strong> </a></li>\n</ul>\n</li>\n<li><a href=\"#cloc.types.Choices_1347752155\" rel=\"nofollow\"> cloc.types.Choices </a></li>\n<li><a href=\"#cloc.types.DateType_974986765\" rel=\"nofollow\"> cloc.types.DateType </a></li>\n<li><a href=\"#cloc.types.FileType_442405428\" rel=\"nofollow\"> cloc.types.FileType </a>\n<ul>\n<li><a href=\"#FileType.__exit___1883566034\" rel=\"nofollow\"> FileType.<strong>exit</strong> </a></li>\n</ul>\n</li>\n<li><a href=\"#cloc.types.IntRangeType_483716711\" rel=\"nofollow\"> cloc.types.IntRangeType </a></li>\n<li><a href=\"#cloc.types.JsonType_806135893\" rel=\"nofollow\"> cloc.types.JsonType </a></li>\n<li><a href=\"#cloc.types.Sha256Type_897860609\" rel=\"nofollow\"> cloc.types.Sha256Type </a></li>\n<li><a href=\"#cloc.types.UrlType_1780703823\" rel=\"nofollow\"> cloc.types.UrlType </a></li>\n</ul>\n</li>\n<li><a href=\"#cloc.mixins_1324909550\" rel=\"nofollow\"> Mixins </a>\n<ul>\n<li><a href=\"#cloc.mixins.Echo_178880302\" rel=\"nofollow\"> cloc.mixins.Echo </a></li>\n<li><a href=\"#cloc.mixins.List_1486997353\" rel=\"nofollow\"> cloc.mixins.List </a></li>\n<li><a href=\"#cloc.mixins.Version_1196404455\" rel=\"nofollow\"> cloc.mixins.Version </a></li>\n</ul>\n</li>\n<li><a href=\"#cloc.viewsets_343292859\" rel=\"nofollow\"> Viewsets </a>\n<ul>\n<li><a href=\"#cloc.viewsets.GrpViewset_226248766\" rel=\"nofollow\"> cloc.viewsets.GrpViewset </a></li>\n<li><a href=\"#cloc.viewsets.ReadOnlyViewset_1582907420\" rel=\"nofollow\"> cloc.viewsets.ReadOnlyViewset </a></li>\n<li><a href=\"#cloc.viewsets.ReqSessionViewset_902305522\" rel=\"nofollow\"> cloc.viewsets.ReqSessionViewset </a></li>\n</ul>\n</li>\n<li><a href=\"#helper_function\" rel=\"nofollow\"> Helper Function </a>\n<ul>\n<li><a href=\"#utils_echo\" rel=\"nofollow\"> cloc.utils.echo </a></li>\n<li><a href=\"#utils_trace\" rel=\"nofollow\"> cloc.utils.trace </a></li>\n<li><a href=\"#utils_listattrs\" rel=\"nofollow\"> cloc.utils.listattrs </a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\"> Advanced Usage Examples </a>\n<ul>\n<li><a href=\"#viewset_example\" rel=\"nofollow\"> Viewset Example </a></li>\n</ul>\n</li>\n</ul>\n<br>\n<p><a></a></p>\n<h2>Installation</h2>\n<p><em>Virtual Environment is recommended</em></p>\n<pre>pip3 install cloc\n</pre>\n<br>\n<p><a></a></p>\n<h2>Documentation</h2>\n<p><a></a></p>\n<h3>Cmd and Grp</h3>\n<p>The two core features (classes) of CLOC, command line object chaining, are <code>Cmd</code> and <code>Grp</code>.</p>\n<p>A <code>Cmd</code> class object defines one action to process when invoked. In most cases, this will be the defined function that\nis decorated. A command can be invoked by calling the <code>Cmd</code> or being called by a <code>Grp</code>.</p>\n<p>A <code>Grp</code> class object holds one to many actions to process when invoked. The actions can be a <code>Cmd</code> or another <code>Grp</code>, but\nonly one action can be called at a time per <code>Grp</code>. The first <code>Grp</code> will receive the first command\nline state, <code>sys.argv[1:]</code>. Every <code>Grp</code> will receive a command line state and will pass this state to the\nnext action. It is on <code>Grp</code> only to update the command line state.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cloc</span> <span class=\"kn\">import</span> <span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">grp</span>\n\n<span class=\"nd\">@grp</span><span class=\"p\">(</span><span class=\"s1\">'cli'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cli</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"cli group\"\"\"</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@cmd</span><span class=\"p\">(</span><span class=\"s1\">'hello-world'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"hello world function\"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello World'</span><span class=\"p\">)</span>\n\n<span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">add_command</span><span class=\"p\">(</span><span class=\"n\">hello_world</span><span class=\"p\">)</span>\n<span class=\"n\">cli</span><span class=\"p\">()</span>\n</pre>\n<p><code>Grp</code> help structure. Usage will always be <code>grp</code> <code>name (cmd|grp)</code></p>\n<pre>Cli\n\n        cli group\n\nUSAGE: CLI NAME\n\nCommands:\n<span class=\"p\">|</span> Name                     <span class=\"p\">|</span> Description                                          <span class=\"p\">|</span>\n<span class=\"p\">|</span> ------------------------ <span class=\"p\">|</span> ---------------------------------------------------- <span class=\"p\">|</span>\n<span class=\"p\">|</span> hello-world              <span class=\"p\">|</span> hello world <span class=\"k\">function</span>                                 <span class=\"p\">|</span>\n</pre>\n<hr>\n<p><a></a></p>\n<h3>Parameters - Arg, Opt, and Flg</h3>\n<p>Currently parameters can only be given to a <code>Cmd</code>.</p>\n<p>The three core parameters include:</p>\n<ul>\n<li>\n<p><code>Arg</code> - a named positional argument for the command</p>\n<pre><code>  Arg(name: str, type: Any = str, help: str = None)\n</code></pre>\n</li>\n<li>\n<p><code>Opt</code> - a named non-positional argument for the command</p>\n<pre><code>  Opt(name: str, short_name: str, type: Any = str, default: Any= None, multiple: bool= False, \n      required: bool= False, help: str = None)\n</code></pre>\n</li>\n<li>\n<p><code>Flg</code> - a special version of <code>Opt</code> that is always type bool and expects no value</p>\n<pre><code>  Flg(name: str, short_name: str, help: str = None)\n</code></pre>\n</li>\n</ul>\n<br>\nBelow is an extended greeting cmd from above without the grp.\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cloc</span> <span class=\"kn\">import</span> <span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">flg</span><span class=\"p\">,</span> <span class=\"n\">opt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cloc.types</span> <span class=\"kn\">import</span> <span class=\"n\">IntRange</span>\n\n<span class=\"nd\">@cmd</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n<span class=\"nd\">@arg</span><span class=\"p\">(</span><span class=\"s1\">'NAME'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'The person to greet'</span><span class=\"p\">)</span>\n<span class=\"nd\">@opt</span><span class=\"p\">(</span><span class=\"s1\">'--count'</span><span class=\"p\">,</span> <span class=\"s1\">'-c'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">IntRange</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Number of greetings: ex -c 0,5 OR -c 5'</span><span class=\"p\">)</span>\n<span class=\"nd\">@flg</span><span class=\"p\">(</span><span class=\"s1\">'--no_repeat'</span><span class=\"p\">,</span> <span class=\"s1\">'-nr'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'If given, the greeting will not repeat'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"n\">IntRange</span><span class=\"p\">,</span> <span class=\"n\">no_repeat</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">count</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">!r}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">no_repeat</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">hello</span><span class=\"p\">()</span>\n</pre>\n<p>The below output is an example of a print message for the greeting cmd.</p>\n<pre>Hello\n\n        Simple program that greets NAME <span class=\"k\">for</span> a total of COUNT times.\n\nUSAGE: hello NAME --count<span class=\"p\">|</span>-c <span class=\"o\">[</span>value<span class=\"o\">]</span> --no_repeat<span class=\"p\">|</span>-nr \n\nParameters:\n<span class=\"p\">|</span> Name               <span class=\"p\">|</span> Short    <span class=\"p\">|</span> Type             <span class=\"p\">|</span> Help                                                   <span class=\"p\">|</span>\n<span class=\"p\">|</span> ------------------ <span class=\"p\">|</span> -------- <span class=\"p\">|</span> ---------------- <span class=\"p\">|</span> ------------------------------------------------------ <span class=\"p\">|</span>\n<span class=\"p\">|</span> NAME               <span class=\"p\">|</span>          <span class=\"p\">|</span> str              <span class=\"p\">|</span> The person to greet                                    <span class=\"p\">|</span>\n<span class=\"p\">|</span> --count            <span class=\"p\">|</span> -c       <span class=\"p\">|</span> cloc.IntRange    <span class=\"p\">|</span> <span class=\"o\">[</span>default: <span class=\"m\">1</span><span class=\"o\">]</span> Number of greetings: ex -c <span class=\"m\">0</span>,5 OR -c <span class=\"m\">5</span>    <span class=\"p\">|</span>\n<span class=\"p\">|</span> --no_repeat        <span class=\"p\">|</span> -nr      <span class=\"p\">|</span> bool             <span class=\"p\">|</span> <span class=\"o\">[</span>flag<span class=\"o\">]</span> If given, the greeting will not repeat          <span class=\"p\">|</span>\n</pre>\n<hr>\n<p><a></a></p>\n<h3>Classes</h3>\n<p><a></a></p>\n<h4>cloc.core.BaseCmd(name: str, params: Params= None, hidden: bool= False)</h4>\n<p>A base class that represents a basic command with a name, Params (<code>cloc.core.Params</code>), and a hidden option.\nThis class is meant to be inherited by new typs of commands. This class alone cannot invoke any functionality.</p>\n<p><a></a></p>\n<h5><code>BaseCmd.values</code>: <code>list</code></h5>\n<p>The values attribute is the list of arguments to be unpacked into the invoked function from the cmd</p>\n<p><a></a></p>\n<h5><code>BaseCmd.params</code>: <code>cloc.core.Params</code></h5>\n<p>The params attribute is the list of parameter objects defined for the cmd</p>\n<p><a></a></p>\n<h5><code>BaseCmd._parse(cmdl: list)</code></h5>\n<p>Protected method to parse the current command line state. This will create the help string, create the param regex strings,\nand get params values for the invoked <code>BaseCmd</code>. This method is protected and should normally not be called.</p>\n<p><a></a></p>\n<h5><code>BaseCmd.create_help()</code></h5>\n<p>The create_help method with create a formatted and colored help string using any params found</p>\n<p><a></a></p>\n<h5><code>BaseCmd._print_help()</code></h5>\n<p>Protected method to print the help message. This method can be overloaded in certain cases but is meant to call the help\nattribute which might not exists in certain states.</p>\n<p><a></a></p>\n<h5><code>BaseCmd.create_regex_patterns()</code></h5>\n<p>A method to be overloaded by a new command. This should create your regex patterns based on the defined parameters.</p>\n<p><a></a></p>\n<h5><code>BaseCmd.get_values(cmdl: list)</code></h5>\n<p>A method to be overloaded by a new command. After the regex patterns have been created, then the param values can be\nparsed from the command line state and stored to be unpacked into the invoked command function.</p>\n<hr>\n<p><a></a></p>\n<h4>cloc.core.Cmd(name: str, fn: Callable, params: Params = None, hidden: bool = False)</h4>\n<p>Cmd inherits BaseCmd to create a new command that can invoke a given function and be connected to class objects.</p>\n<p><a></a></p>\n<h5><code>Cmd.fn</code>: <code>Callable</code></h5>\n<p>The fn attribute is the defined function to run when cmd is invoked</p>\n<p><a></a></p>\n<h5><code>Cmd.dataclass</code>: <code>object</code></h5>\n<p>The dataclass attribute is an object to replace <code>self</code> with if the cmd is defined inside a class</p>\n<p><a></a></p>\n<h5><code>Cmd.new_dataclass_cmd(cls, name: str, fn: Callable, params: Params= None, hidden: bool= False, dataclass: object= None)</code></h5>\n<p><code>Classmethod</code></p>\n<p>This class method will create a new Cmd that will have the dataclass attribute set</p>\n<p><a></a></p>\n<h5><code>Cmd.create_regex_patterns()</code></h5>\n<p>Create regex patterns for each opt and flg param to match against the command line state during get_values</p>\n<p><a></a></p>\n<h5><code>Cmd.get_values(cmdl: list)</code></h5>\n<p>Overloaded function from BaseCmd, this method will create the values to be unpacked into <code>Cmd.fn</code>.\nIf <code>--help</code> is anywhere the command line, the help message for the nearest Cmd is called.</p>\n<hr>\n<p><a></a></p>\n<h4>cloc.core.Grp(name: str, commands: List[Cmd] = None, hidden:bool= False)</h4>\n<p>Grp inherits from BaseCmd, this class holds a list of Cmd objects which can be invoked by name. If Grp calls\nGrp, the command line state will be updated. If a Grp is made with no cmdl supplied then sys.argv[1:] is used.</p>\n<p><a></a></p>\n<h5><code>Grp.commands</code>: <code>List[Cmd]</code></h5>\n<p>The commands attribute is a list of Cmd objects. Cmd objects are added through the <code>Grp.add_command</code> method.</p>\n<p><a></a></p>\n<h5><code>BaseCmd.invoke</code>: <code>str</code></h5>\n<p>The invoke attribute is user input from the command line and should match a <code>Cmd.name</code> in <code>Grp.commands</code></p>\n<p><a></a></p>\n<h5><code>BaseCmd.cmdl</code>: <code>list</code></h5>\n<p>The cmdl attribute should represent the current state of the command line for the Grp to parse.</p>\n<p><a></a></p>\n<h5><code>BaseCmd.add_command(command: BaseCmd, hidden:bool= None)</code></h5>\n<p>Add a Cmd or Grp to another Grp. Can also override or set hidden state</p>\n<p>This method will also make a new dataclass Cmd if needed. If a command is found inside a class,\ninitiate a dataclass Cmd to be made. Setting <code>dataclass = class that declared the commands</code>.</p>\n<ul>\n<li>a dataclass Cmd is the magic to allow Cli Viewsets and Querysets</li>\n</ul>\n<p><a></a></p>\n<h5><code>BaseCmd.get_command(name: str)</code></h5>\n<p>Find a Cmd by name and return the object</p>\n<hr>\n<p><a></a></p>\n<h3>Decorators</h3>\n<p>As seen in the above examples, decorators can be used to easily convert defined functions into a cmd or grp.\nThere is a decorator for each core class in cloc. They are imported into the cloc module for ease of use.</p>\n<p><a></a></p>\n<h5><code>cloc.decorators.cmd(name:str = None, hidden:bool = False)</code></h5>\n<p>Returns a new Cmd object</p>\n<p><a></a></p>\n<h5><code>cloc.decorators.grp(name:str = None, hidden:bool = False)</code></h5>\n<p>Returns a new Grp object</p>\n<p><a></a></p>\n<h5><code>cloc.decorators.arg(name:str, type: Any= None, help: str= None)</code></h5>\n<p>Returns a Cmd object. If the object being decorated is already a Cmd object, the Arg will be appended to Cmd.params</p>\n<p><a></a></p>\n<h5><code>cloc.decorators.opt(name:str, short_name: str, type: Any= None, default: Any= None, multiple:bool= False, required: bool= False, help: str= None)</code></h5>\n<p>Returns a Cmd object. If the object being decorated is already a Cmd object, the Opt will be appended to Cmd.params</p>\n<p><a></a></p>\n<h5><code>cloc.decorators.flg(name:str, short_name: str, help: str= None)</code></h5>\n<p>Returns a Cmd object. If the object being decorated is already a Cmd object, the Flg will be appended to Cmd.params</p>\n<hr>\n<p><a></a></p>\n<h2>Types</h2>\n<p>New types can be made to be used to convert the command line input. A new cloc type must inherit the\n<code>cloc.types.BaseType</code> and overload the <code>__call__</code> function to convert the input. New types can raise an exception or\nprint to trace for a clean exit.</p>\n<p><a></a></p>\n<h3>cloc.types.BaseType(self, basetype: Any = None)</h3>\n<p>BaseType - BaseType object for creating new Param types</p>\n<pre><code>   __call__ method should be overloaded to handle value; str -&gt; BaseType\n</code></pre>\n<p><a></a></p>\n<h4><code>BaseType.__call__(self, value: str)</code></h4>\n<p>convert to new type</p>\n<pre><code>    Args:\n        value {str} -- value to convert\n</code></pre>\n<p><a></a></p>\n<h3>cloc.types.Choices(self, choices: list, basetype: Any = typing.Any)</h3>\n<p>Convert input into a Choices object which will verify the input is contained in the defined choices.</p>\n<p><a></a></p>\n<h3>cloc.types.DateType(self)</h3>\n<p>Convert input into a DateTime object</p>\n<p><a></a></p>\n<h3>cloc.types.FileType(self)</h3>\n<p>Convert input into a file object. The below example is the <code>cloc.types.FileType</code> implementation</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FileType</span><span class=\"p\">(</span><span class=\"n\">BaseType</span><span class=\"p\">):</span>\n    <span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s1\">'cloc.File'</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># init should provide a base type, default to str</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">TextIOWrapper</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__exit__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_val</span><span class=\"p\">,</span> <span class=\"n\">exc_tb</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fobj</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">):</span>\n            <span class=\"n\">trace</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Error: </span><span class=\"si\">{</span><span class=\"n\">filepath</span><span class=\"si\">!r}</span><span class=\"s1\"> does not  exists'</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">):</span>\n            <span class=\"n\">trace</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Error: </span><span class=\"si\">{</span><span class=\"n\">filepath</span><span class=\"si\">!r}</span><span class=\"s1\"> is not a file'</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fobj</span>\n</pre>\n<p><a></a></p>\n<h4><code>FileType.__exit__(self, exc_type, exc_val, exc_tb)</code></h4>\n<p>File object will be closed in the exit function for the FileType class</p>\n<p><a></a></p>\n<h3>cloc.types.IntRangeType(self)</h3>\n<p>Convert input to an Int Range [0 ... 5]</p>\n<p><a></a></p>\n<h3>cloc.types.JsonType(self)</h3>\n<p>Convert input to type dict</p>\n<p><a></a></p>\n<h3>cloc.types.Sha256Type(self)</h3>\n<p>Convert input into valid sha256, or if file path is found as input all valid sha256 values in the file</p>\n<p><a></a></p>\n<h3>cloc.types.UrlType(self)</h3>\n<p>Convert input into a valid URL</p>\n<hr>\n<p><a></a></p>\n<h2>Mixins</h2>\n<p>Cloc mixins are a simple way to inherit cli functionality to your class. Below is an example of a Version mixin.\nThis enables a class to inherit a 'version' cmd. It will then look for the class attribute version and print it to the\nuser.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Version</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Version Mixin - class object for easily adding an version command to a class</span>\n<span class=\"sd\">        - echo the 'version' attribute if it exists</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">version_cmd</span>\n\n    <span class=\"nd\">@cmd</span><span class=\"p\">(</span><span class=\"s1\">'version'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">version_cmd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"version mixin command\"\"\"</span>\n        <span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attribute</span><span class=\"o\">=</span><span class=\"s1\">'version'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'blue'</span><span class=\"p\">)</span>\n</pre>\n<p>The below mixins are currently offered by cloc.</p>\n<p><a></a></p>\n<h3>cloc.mixins.Echo(self, *args, **kwargs)</h3>\n<p>Echo Mixin - class object for easily adding an echo command to a class\n- echo value of attributes by name</p>\n<p><a></a></p>\n<h3>cloc.mixins.List(self, *args, **kwargs)</h3>\n<p>List Mixin - class object for easily adding an list command to a class\n- list attributes and values of the tied class</p>\n<p><a></a></p>\n<h3>cloc.mixins.Version(self, *args, **kwargs)</h3>\n<p>Version Mixin - class object for easily adding an version command to a class\n- echo the 'version' attribute if it exists</p>\n<hr>\n<p><a></a></p>\n<h2>Viewsets</h2>\n<p>Viewsets are classes of commands that can be inherited into other classes. For example if you have a class that you\nwant to be able to query information from but not write to, you could use a ReadOnlyViewset that only gives the user\nthe option the print and list attributes from the class.</p>\n<p>A viewset can also be made into a Queryset if the <code>GrpViewset</code> is inherited and the queryset attribute is set.\nThis then enables a user to override methods to retrieve data for the cli interface. A queryset could connect to a\ndatabase to retrieve information for the user based on defined commands.</p>\n<p>Viewsets and Querysets become very useful in large CLI applications.</p>\n<p><a></a></p>\n<h3>cloc.viewsets.GrpViewset(self, *args, **kwargs)</h3>\n<p>A base Viewset that does not have any commands by default. The GrpViewset contains the queryset attribute and can be\nset for overloading data retrieval.</p>\n<p><a></a></p>\n<h3>cloc.viewsets.ReadOnlyViewset(self, *args, **kwargs)</h3>\n<p>Read only viewset\necho (print attribute by name)\nlist (print all attribute names and values)\nversion(print the current version of the Viewset based on the version attribute)</p>\n<p><a></a></p>\n<h3>cloc.viewsets.ReqSessionViewset(self, *args, session: requests.sessions.Session = None, max_retries: int = 3, pool_connections: int = 16, pool_maxsize: int = 16, raise_exception: bool = True, **kwargs)</h3>\n<p>Requests Session Viewset\nget (a cli cmd for session.get)</p>\n<hr>\n<p><a></a></p>\n<h3>Helper Functions</h3>\n<p><a></a></p>\n<h5><code>cloc.utils.echo(message: Union[str, tuple, list, dict]= None, cls: object= None, attribute: str= None, list_delimiter: str = '\\n', show_type: bool = False, indent: int= 4, color: str= None)</code></h5>\n<p>Formats and colors a message, or class attribute.</p>\n<ul>\n<li>Pretty print tuple, list, and dict objects</li>\n<li>Customize the list delimiter and indent level for pretty print</li>\n<li>Color output</li>\n<li>Print the type for the output</li>\n</ul>\n<p>prints the formatted string</p>\n<p><a></a></p>\n<h5><code>cloc.utils.trace(message:str, exception: Exception= None, raise_exception: bool= False, exit_code: int= 0, color: str= None)</code></h5>\n<p>Formats and colors the output of a simplified traceback message.</p>\n<ul>\n<li>Utilizes the echo util for formatted and colored output</li>\n<li>Can accept and raise any type of Exception with the message</li>\n<li>Give an exit code to return with if exception is not raised</li>\n</ul>\n<p>prints the formatted string and calls <code>sys.exit(exit_code)</code> or raises the given Exception (Assert) used if none given</p>\n<p><a></a></p>\n<h5><code>cloc.utils.listattrs(cls: object, verbose:bool=False)</code></h5>\n<p>List the attributes and values of a given class object. If verbose is True, python defined attributes\nwill also be included.</p>\n<ul>\n<li>Utilizes the echo util for formatted output</li>\n</ul>\n<br>\n<p><a></a></p>\n<h2>Advanced Usage Examples</h2>\n<p><a></a></p>\n<h3>Using a viewset</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cloc</span> <span class=\"kn\">import</span> <span class=\"n\">grp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cloc.viewsets</span> <span class=\"kn\">import</span> <span class=\"n\">ReqSessionViewset</span>\n\n<span class=\"nd\">@grp</span><span class=\"p\">(</span><span class=\"s1\">'cli'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cli</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"requests session cli\"\"\"</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">session_viewset</span> <span class=\"o\">=</span> <span class=\"n\">ReqSessionViewset</span><span class=\"p\">(</span><span class=\"n\">raise_exception</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">add_command</span><span class=\"p\">(</span><span class=\"n\">session_viewset</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">cli</span><span class=\"p\">()</span>\n</pre>\n<p>The get command is implemented by the ReqSessionViewset and does not have to be defined</p>\n<pre>$ python example3.py get https://jsonplaceholder.typicode.com/todos/1\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"userId\"</span>: <span class=\"m\">1</span>,\n  <span class=\"s2\">\"id\"</span>: <span class=\"m\">1</span>,\n  <span class=\"s2\">\"title\"</span>: <span class=\"s2\">\"delectus aut autem\"</span>,\n  <span class=\"s2\">\"completed\"</span>: <span class=\"nb\">false</span>\n<span class=\"o\">}</span>\n</pre>\n<br>\n\n          </div>"}, "last_serial": 6921868, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3e13a66868f30e6920bf77f29e22245b", "sha256": "6e997ec211f8b09f9449064386832dabfe8e98864744b7baf7fa8a25f81baef4"}, "downloads": -1, "filename": "cloc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3e13a66868f30e6920bf77f29e22245b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3797, "upload_time": "2020-02-29T02:58:43", "upload_time_iso_8601": "2020-02-29T02:58:43.348190Z", "url": "https://files.pythonhosted.org/packages/02/31/e0339f2b9288e7beca69b46b97e2fda45e289f08da5ab01aff3b5ef64a3d/cloc-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e3a4837d674a10e967cc4a968b07f206", "sha256": "290e7b4da78da24315c8ea295a8b22d856a8efdca40cd97b31e8817f6c86145f"}, "downloads": -1, "filename": "cloc-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e3a4837d674a10e967cc4a968b07f206", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4541, "upload_time": "2020-02-29T06:36:52", "upload_time_iso_8601": "2020-02-29T06:36:52.455380Z", "url": "https://files.pythonhosted.org/packages/76/dd/12fd46fe9a31be244529012382a7323b6812fbf1015c38221246542cf7e7/cloc-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6a4a4b238d03df66f7d014533909ce34", "sha256": "dac4cd7ada4d5dfb756f58507ade299a098395c53d2c7d0adfd4bd9da12c1cdd"}, "downloads": -1, "filename": "cloc-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6a4a4b238d03df66f7d014533909ce34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4549, "upload_time": "2020-02-29T06:50:06", "upload_time_iso_8601": "2020-02-29T06:50:06.198285Z", "url": "https://files.pythonhosted.org/packages/b1/1a/314128b3c7aef2ff53dd42ef00724bef054429c1ea3c5f7605e4519335bb/cloc-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "cd0675a6d89b67ef60950d20aecbf26c", "sha256": "5cba9b0dc0677149ce1517c97a8ba0055eec8eaaea8eeb9a9400ae69be0e90d9"}, "downloads": -1, "filename": "cloc-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cd0675a6d89b67ef60950d20aecbf26c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4592, "upload_time": "2020-02-29T15:52:15", "upload_time_iso_8601": "2020-02-29T15:52:15.780820Z", "url": "https://files.pythonhosted.org/packages/fd/b7/e1144286efefe1b0ca40938bc99de70eb73d8a1e07647c9954e243ec1a7e/cloc-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "c76283e075e72ae2d87bd4d53a3ee54a", "sha256": "91bebd52d02bad7f57a3d42991d928973a9635579d1bd36942f6a349df515934"}, "downloads": -1, "filename": "cloc-0.0.5.tar.gz", "has_sig": false, "md5_digest": "c76283e075e72ae2d87bd4d53a3ee54a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4663, "upload_time": "2020-02-29T16:35:27", "upload_time_iso_8601": "2020-02-29T16:35:27.707547Z", "url": "https://files.pythonhosted.org/packages/e1/a9/ed0a5c4273d2e73df92d072cf96ce90bc91fc11cd39f2e3a055b275fb03a/cloc-0.0.5.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "88094a668107fe6cd889b59cc0dae75f", "sha256": "31da6aad7627f1c9d8d3dc530b6d2ba65587012178b6cccd6f9353e9e7b1a62e"}, "downloads": -1, "filename": "cloc-0.0.7.tar.gz", "has_sig": false, "md5_digest": "88094a668107fe6cd889b59cc0dae75f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4909, "upload_time": "2020-02-29T18:33:27", "upload_time_iso_8601": "2020-02-29T18:33:27.326096Z", "url": "https://files.pythonhosted.org/packages/96/e0/20968f35096e1aaabe738a9a93508510cf614e1c877af91679fcd61ba86e/cloc-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "0214983f56f55ebb411971ffb97bbbec", "sha256": "e40ca1677539c0ce22a933803cfaa9214364e9c4b1dcb37551238fcdab918503"}, "downloads": -1, "filename": "cloc-0.0.8.tar.gz", "has_sig": false, "md5_digest": "0214983f56f55ebb411971ffb97bbbec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6417, "upload_time": "2020-03-01T04:34:23", "upload_time_iso_8601": "2020-03-01T04:34:23.372361Z", "url": "https://files.pythonhosted.org/packages/d0/1a/d2cd4812caa96ca572c5a1d5ec52e23fd26c08ef484a51bc1b6946e9ac2e/cloc-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "b1dd5e8305b92d045a38d73f6e43714f", "sha256": "44ff8035091ca6cbc6c9ea8e95514d2baba0e7dcc87660b1f0d5c0ac0e92b17e"}, "downloads": -1, "filename": "cloc-0.0.9.tar.gz", "has_sig": false, "md5_digest": "b1dd5e8305b92d045a38d73f6e43714f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8044, "upload_time": "2020-03-01T04:49:57", "upload_time_iso_8601": "2020-03-01T04:49:57.533176Z", "url": "https://files.pythonhosted.org/packages/2c/81/4c5cea4f0277891b5e14e0ac5fdc61de13b6a0034cba2b76a0dc5a6fa214/cloc-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "609c5ef593953484f869c5b97424c18e", "sha256": "38576c7605853d94f7f4d73df39ef5e14625664408af83702a0611748c1a79a6"}, "downloads": -1, "filename": "cloc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "609c5ef593953484f869c5b97424c18e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8214, "upload_time": "2020-03-01T05:43:45", "upload_time_iso_8601": "2020-03-01T05:43:45.089113Z", "url": "https://files.pythonhosted.org/packages/76/20/15100f0386910e2977f5e3f9f382a7267594ca2c29db1f2208a64427cede/cloc-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fd86b5b2cc320daec2009258714af9ba", "sha256": "3e81df92095474dffa5c68d8ac478480174a72deab715ed96bc171138bafda9d"}, "downloads": -1, "filename": "cloc-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fd86b5b2cc320daec2009258714af9ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8176, "upload_time": "2020-03-01T05:58:52", "upload_time_iso_8601": "2020-03-01T05:58:52.944768Z", "url": "https://files.pythonhosted.org/packages/59/68/c01a6f13f51b66abe0a6253ddde23cecdc5ebbd2e99c0b05ea9585894d62/cloc-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e5d011536299791ddb1b732d659119ec", "sha256": "4b44129324ee02bc1c65d573354c16e19cc8ee0aa79668e50596f830479132bd"}, "downloads": -1, "filename": "cloc-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e5d011536299791ddb1b732d659119ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12591, "upload_time": "2020-03-01T16:59:13", "upload_time_iso_8601": "2020-03-01T16:59:13.462009Z", "url": "https://files.pythonhosted.org/packages/20/ab/e886f7a5fde50fcb9a5c0bb91fbf84b140bba0da97061384027e3a8b8e92/cloc-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0514bdc8e293a876d175c6fc7201e6d2", "sha256": "fd8bebdde8642c9803ace07d59f7a9299c7151f3a120813efd206eae7bc157e9"}, "downloads": -1, "filename": "cloc-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0514bdc8e293a876d175c6fc7201e6d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12902, "upload_time": "2020-03-02T03:24:53", "upload_time_iso_8601": "2020-03-02T03:24:53.417664Z", "url": "https://files.pythonhosted.org/packages/c6/37/e6b6da405a7eee5916a60e2648e5a319e0d66afd54d3a3d05bb73bd76efd/cloc-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "f59c5f0cbf6244eb59f17afd2c8ab6e0", "sha256": "19ef059d6d51e62ae0f6717e838d7888b9c1519f6684d5595f85dbc4a3cc33d8"}, "downloads": -1, "filename": "cloc-0.1.4.tar.gz", "has_sig": false, "md5_digest": "f59c5f0cbf6244eb59f17afd2c8ab6e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13087, "upload_time": "2020-03-02T05:25:25", "upload_time_iso_8601": "2020-03-02T05:25:25.135760Z", "url": "https://files.pythonhosted.org/packages/93/0a/22f53ddc9799f4513155bb1752b9dcf5d244efcf6ad013dd1bab7273c219/cloc-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "6c3182f1e2654d3a8b428f7aa5a52b67", "sha256": "9b0d4bea21ae91fa9280053a3d893c669c902c7552e4ad4d442808438f61ecaf"}, "downloads": -1, "filename": "cloc-0.1.5.tar.gz", "has_sig": false, "md5_digest": "6c3182f1e2654d3a8b428f7aa5a52b67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13200, "upload_time": "2020-03-02T23:11:08", "upload_time_iso_8601": "2020-03-02T23:11:08.772610Z", "url": "https://files.pythonhosted.org/packages/a2/ab/c5759b4053ee61323bc1a8f2d0e58f51c67ecdd0952b7eb3a6e09e8abeee/cloc-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "67f855a4c4a53e404f6b7d00b746fbf1", "sha256": "b1d55858e27eece3a1e90f1484c95e2b400d9155330541d5ff470a2032a681d5"}, "downloads": -1, "filename": "cloc-0.1.6.tar.gz", "has_sig": false, "md5_digest": "67f855a4c4a53e404f6b7d00b746fbf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13207, "upload_time": "2020-03-02T23:27:21", "upload_time_iso_8601": "2020-03-02T23:27:21.006554Z", "url": "https://files.pythonhosted.org/packages/ff/bc/ed62f827422844eef66eda8ebb76dc1d7fc9aa8d3f5fc4c2af5445d6993f/cloc-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "7067b9f170f17b793eac89c39403fe4c", "sha256": "1665401d9a96923b26e62cc31263734c6e5c9fb56f7c31d0cee3d2bac7e6b74b"}, "downloads": -1, "filename": "cloc-0.1.7.tar.gz", "has_sig": false, "md5_digest": "7067b9f170f17b793eac89c39403fe4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13367, "upload_time": "2020-03-03T04:21:49", "upload_time_iso_8601": "2020-03-03T04:21:49.154213Z", "url": "https://files.pythonhosted.org/packages/6d/cb/0096812bf97b8e5f2584f24912907fa2140165cacbba9c8e2fab359e0e95/cloc-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "ae89a2bd359d6ae02ae92f115bf495c7", "sha256": "1a08bb67ef9bf4784b8bd2f433576f318a69f2be22073f4b85b318b2fa445e36"}, "downloads": -1, "filename": "cloc-0.1.8.tar.gz", "has_sig": false, "md5_digest": "ae89a2bd359d6ae02ae92f115bf495c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18286, "upload_time": "2020-03-04T03:39:40", "upload_time_iso_8601": "2020-03-04T03:39:40.267173Z", "url": "https://files.pythonhosted.org/packages/81/03/1a73f3fdaaa98f06fe2bae9219ee6d152fed9f663cdcc0fd062c95c1a7fe/cloc-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "4c9f740dbdd31011bbe000ab52e1e415", "sha256": "a9ac377e54313f01ac45b16c968e57721291bbda02d66d5ef89f108620b92a8e"}, "downloads": -1, "filename": "cloc-0.1.9.tar.gz", "has_sig": false, "md5_digest": "4c9f740dbdd31011bbe000ab52e1e415", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19207, "upload_time": "2020-03-04T04:27:33", "upload_time_iso_8601": "2020-03-04T04:27:33.883926Z", "url": "https://files.pythonhosted.org/packages/35/cb/6a37904bdff7b623d6bc0fd79fa5475be85ed348fecab3c60b2e932a2272/cloc-0.1.9.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "754ff80709f4f7927f8a1f727faa645e", "sha256": "dfd821068b56d0bfa579759ccccc9f4be90d85f59b498357269c76cf9049f634"}, "downloads": -1, "filename": "cloc-0.2.2.tar.gz", "has_sig": false, "md5_digest": "754ff80709f4f7927f8a1f727faa645e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22864, "upload_time": "2020-03-06T19:53:15", "upload_time_iso_8601": "2020-03-06T19:53:15.175757Z", "url": "https://files.pythonhosted.org/packages/44/6d/14c161ef88c59364afe73c813a0aaa3ef7ad12d4add9f9f2db7e852b2b54/cloc-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "98cb3385ca4e1fec45bae6adf6ff6aff", "sha256": "81ee93ae0b4c0ecd95153d729f143af886f7e1fb6ee3cd0c6cd406223497b904"}, "downloads": -1, "filename": "cloc-0.2.3.tar.gz", "has_sig": false, "md5_digest": "98cb3385ca4e1fec45bae6adf6ff6aff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22864, "upload_time": "2020-03-11T13:37:58", "upload_time_iso_8601": "2020-03-11T13:37:58.667187Z", "url": "https://files.pythonhosted.org/packages/4a/8b/bbd67342b571bd27218828afc5d72d30bf4d1117299b6e9c7c29907b64d8/cloc-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "5a114ddbe227075423aaf1ed79c1a7dc", "sha256": "4da339aa6f5a95e6ae6a67a0b59b5005c87ceaa5bd39c576b792138c4a56a7f4"}, "downloads": -1, "filename": "cloc-0.2.4.tar.gz", "has_sig": false, "md5_digest": "5a114ddbe227075423aaf1ed79c1a7dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22883, "upload_time": "2020-03-22T05:22:38", "upload_time_iso_8601": "2020-03-22T05:22:38.391257Z", "url": "https://files.pythonhosted.org/packages/d2/84/460b0f7f6ab82c2b4672fd1ddb27e5cc80942668874dc8fe4841ecc2245c/cloc-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "074dad411c0ce815ceaddcb3079017d1", "sha256": "469164d445169ef3635c5cbae21db2e6126ebc2d71f7151f482674414c0c3363"}, "downloads": -1, "filename": "cloc-0.2.5.tar.gz", "has_sig": false, "md5_digest": "074dad411c0ce815ceaddcb3079017d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22941, "upload_time": "2020-03-31T18:05:10", "upload_time_iso_8601": "2020-03-31T18:05:10.280336Z", "url": "https://files.pythonhosted.org/packages/fb/cc/342eb64a842745a42549110477969e6c4ce5ec78b7aeff43344a0572c26c/cloc-0.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "074dad411c0ce815ceaddcb3079017d1", "sha256": "469164d445169ef3635c5cbae21db2e6126ebc2d71f7151f482674414c0c3363"}, "downloads": -1, "filename": "cloc-0.2.5.tar.gz", "has_sig": false, "md5_digest": "074dad411c0ce815ceaddcb3079017d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22941, "upload_time": "2020-03-31T18:05:10", "upload_time_iso_8601": "2020-03-31T18:05:10.280336Z", "url": "https://files.pythonhosted.org/packages/fb/cc/342eb64a842745a42549110477969e6c4ce5ec78b7aeff43344a0572c26c/cloc-0.2.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:54 2020"}