{"info": {"author": "original: jonasvp, modified by: seanslipetz", "author_email": "seanslipetz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning"], "description": "=====================\r\ndjango-image-cropping\r\n=====================\r\n\r\n.. image:: https://pypip.in/v/django-image-cropping/badge.png\r\n    :target: https://pypi.python.org/pypi/django-image-cropping\r\n\r\n.. image:: https://travis-ci.org/jonasundderwolf/django-image-cropping.png?branch=master\r\n    :target: http://travis-ci.org/jonasundderwolf/django-image-cropping\r\n    :alt: Build Status\r\n\r\n.. image:: https://coveralls.io/repos/jonasundderwolf/django-image-cropping/badge.png?branch=master\r\n    :target: https://coveralls.io/r/jonasundderwolf/django-image-cropping\r\n    :alt: Coverage\r\n\r\ndjango-image-cropping is an app for cropping uploaded images via Django's admin backend using `Jcrop\r\n<https://github.com/tapmodo/Jcrop>`_.\r\n\r\nScreenshot:\r\n\r\n.. image:: http://www.jonasundderwolf.de/media/images/django_image_cropping_example.png\r\n\r\ndjango-image-cropping is perfect when you need images with a specific size for your templates but want your\r\nusers or editors to upload images of any dimension. It presents a selection with a fixed aspect ratio so your users\r\ncan't break the layout with oddly-sized images.\r\n\r\nThe original images are kept intact and only get cropped when they are displayed.\r\nLarge images are presented in a small format, so even very big images can easily be cropped.\r\n\r\nThe necessary fields, widgets and a template tag for displaying the\r\ncropped image in your templates are provided.\r\n\r\nAlso works with `FeinCMS <https://github.com/feincms/feincms>`_ content types!\r\n\r\nInstallation\r\n============\r\n\r\n#. Install django-image-cropping using ``pip``::\r\n\r\n    pip install django-image-cropping\r\n\r\n#. If you haven't installed easy_thumbnails already, install it::\r\n\r\n    pip install easy_thumbnails\r\n\r\n#. Add ``easy_thumbnails`` and ``image_cropping`` to your ``INSTALLED_APPS``.\r\n\r\n#. Adjust the thumbnail processors for ``easy-thumbnails`` in your ``settings``::\r\n\r\n    from easy_thumbnails.conf import Settings as thumbnail_settings\r\n    THUMBNAIL_PROCESSORS = (\r\n        'image_cropping.thumbnail_processors.crop_corners',\r\n    ) + thumbnail_settings.THUMBNAIL_PROCESSORS\r\n\r\nConfiguration\r\n=============\r\n\r\nAdd an ``ImageRatioField`` to the model that contains the ``ImageField`` for the images you want to crop.\r\n\r\nThe ``ImageRatioField`` simply stores the boundaries of the cropped image.\r\nIt expects the name of the associated ``ImageField`` and the desired size of the cropped image as arguments.\r\n\r\nThe size is passed in as a string and defines the aspect ratio of the selection *as well* as the minimum\r\nsize for the final image::\r\n\r\n    from django.db import models\r\n    from image_cropping import ImageRatioField\r\n\r\n    class MyModel(models.Model):\r\n        image = models.ImageField(blank=True, upload_to='uploaded_images')\r\n        # size is \"width x height\"\r\n        cropping = ImageRatioField('image', '430x360')\r\n\r\nYou can configure a `size warning`_ if users try to crop a selection smaller than the defined minimum.\r\n\r\nAdmin Integration\r\n=================\r\n\r\nAdd the ``ImageCroppingMixin`` to your ``ModelAdmin``::\r\n\r\n    from django.contrib import admin\r\n    from image_cropping import ImageCroppingMixin\r\n\r\n    class MyModelAdmin(ImageCroppingMixin, admin.ModelAdmin):\r\n        pass\r\n\r\n    admin.site.register(MyModel, MyModelAdmin)\r\n\r\nIf your setup is correct you should now see the enhanced image widget that provides a selection\r\narea.\r\n\r\nFrontend\r\n========\r\n\r\ndjango-image-cropping provides a templatetag for displaying a cropped thumbnail.\r\nAny other processor parameter (like ``bw=True`` or ``upscale=True``) will be forwarded to ``easy-thumbnails``::\r\n\r\n    {% cropped_thumbnail yourmodelinstance \"ratiofieldname\" [scale=INT|width=INT|height=INT|max_size=\"INTxINT\"] %}\r\n\r\nExample usage::\r\n\r\n    {% load cropping %}\r\n    <img src=\"{% cropped_thumbnail yourmodel \"cropping\" scale=0.5 %}\">\r\n\r\nYou can also use the standard ``easy-thumbnails`` templatetag with the ``box`` parameter::\r\n\r\n    {% load thumbnail %}\r\n    {% thumbnail yourmodel.image 430x360 box=yourmodel.cropping crop detail %}\r\n\r\nOr generate the URL from Python code in your view::\r\n\r\n    from easy_thumbnails.files import get_thumbnailer\r\n    thumbnail_url = get_thumbnailer(yourmodel.image).get_thumbnail({\r\n        'size': (430, 360),\r\n        'box': yourmodel.cropping,\r\n        'crop': True,\r\n        'detail': True,\r\n    }).url\r\n\r\n\r\nModelForm\r\n=========\r\n\r\nIf you want to use the cropping widget outside the admin, you'll need to define the ``ImageField`` as\r\nan ``ImageCropField``::\r\n\r\n    from django.db import models\r\n    from image_cropping import ImageCropField, ImageRatioField\r\n\r\n    class MyModel(models.Model):\r\n        image = ImageCropField(blank=True, upload_to='uploaded_images')\r\n        # size is \"width x height\"\r\n        cropping = ImageRatioField('image', '430x360')\r\n\r\n\r\nAlternatively, override the widget in your ModelForm (you just need to do one of these two, not both!)::\r\n\r\n    from django import forms\r\n    from image_cropping import ImageCropWidget\r\n\r\n    class MyModelForm(forms.ModelForm):\r\n        class Meta:\r\n            widgets = {\r\n                'image': ImageCropWidget,\r\n            }\r\n\r\n\r\nRemember to include the form media in the ``<head>`` of your HTML::\r\n\r\n    <html>\r\n      <head>\r\n        {{ form.media }}\r\n      </head>\r\n      <body>\r\n        {{ form }}\r\n      </body>\r\n    </html>\r\n\r\nThe cropping itself happens in the ``ImageRatioField``, the ``ImageCropField`` will still behave like a regular ``ImageField``.\r\n\r\nIf you're selectively including or excluding fields from the ModelForm, remember to include the ``ImageRatioField``.\r\n\r\n\r\nMultiple formats\r\n================\r\n\r\nIf you need the same image in multiple formats, simply specify another ``ImageRatioField``.\r\nThis will allow the image to be cropped twice::\r\n\r\n    from image_cropping import ImageRatioField, ImageCropField\r\n\r\n    image = ImageCropField(blank=True, upload_to='uploaded_images')\r\n    # size is \"width x height\"\r\n    list_page_cropping = ImageRatioField('image', '200x100')\r\n    detail_page_cropping = ImageRatioField('image', '430x360')\r\n\r\nIn your templates, use the corresponding ratio field::\r\n\r\n    {% load cropping %}\r\n    {% cropped_thumbnail yourmodel \"list_page_cropping\" %}\r\n\r\n\r\nForeign Keys\r\n============\r\n\r\nIf you need to crop an image contained within another model, referenced by a ForeignKey, the ``ImageRatioField`` is\r\ncomposed of the ``ForeignKey`` name, a double underscore, and the ``ImageField`` name::\r\n\r\n    from django.db import models\r\n    from image_cropping.fields import ImageRatioField\r\n\r\n    class Image(models.Model):\r\n        image_field = models.ImageField(upload_to='image/')\r\n\r\n    class NewsItem(models.Model):\r\n        title = models.CharField(max_length=255)\r\n        image = models.ForeignKey(Image)\r\n        cropping = ImageRatioField('image__image_field', '120x100')\r\n\r\nCropping foreign keys only works in the admin for now, as it reuses the ``raw_id`` widget.\r\n\r\n\r\n.. _free cropping:\r\n\r\nFree cropping\r\n=============\r\n\r\nIf you do not need a *fixed* ratio, you can disable this constraint by setting ``free_crop`` to ``True``.\r\nIn this case the size parameter is the desired minimum and is also used for the size-warning::\r\n\r\n    from image_cropping import ImageRatioField, ImageCropField\r\n\r\n    image = ImageCropField(blank=True, upload_to='uploaded_images')\r\n\r\n    # size is \"width x height\" so a minimum size of 200px x 100px would look like this:\r\n    min_free_cropping = ImageRatioField('image', '200x100', free_crop=True)\r\n\r\nUse the ``max_size`` parameter of the templatetag if you want to limit the display size of a thumbnail::\r\n\r\n     <img src=\"{% cropped_thumbnail image \"cropping_free\" max_size=\"200x200\" %}\" />\r\n\r\n\r\nDisabling cropping\r\n==================\r\n\r\nIf you want cropping to be optional, use ``allow_fullsize=True`` as an additional keyword argument for your ``ImageRatioField``.\r\n\r\nEditors can now switch off cropping by unchecking a checkbox next to the image cropping widget::\r\n\r\n     image_with_optional_cropping = ImageRatioField('image', '200x100', allow_fullsize=True)\r\n\r\n\r\nSettings\r\n========\r\n\r\nThumbnail size\r\n--------------\r\n\r\nYou can define the maximum size of the admin preview thumbnail in your ``settings``::\r\n\r\n    # size is \"width x height\"\r\n    IMAGE_CROPPING_THUMB_SIZE = (300, 300)\r\n\r\n.. _size warning:\r\n\r\nSize warning\r\n------------\r\n\r\nYou can warn users about crop selections that are smaller than the size defined in the ``ImageRatioField``.\r\nWhen users try to do a smaller selection, a red border appears around the image.\r\n\r\nTo use this functionality for a single image add the ``size_warning`` parameter to the ``ImageRatioField``::\r\n\r\n    cropping = ImageRatioField('image', '430x360', size_warning=True)\r\n\r\nYou can enable this functionality project-wide by adding the following line to your ``settings``::\r\n\r\n    IMAGE_CROPPING_SIZE_WARNING = True\r\n\r\n\r\nCustom jQuery\r\n-------------\r\n\r\nBy default the image cropping widget embeds a recent version of jQuery.\r\n\r\nYou can point to another version using the ``IMAGE_CROPPING_JQUERY_URL`` setting, though compatibility\r\nissues may arise if your jQuery version differs from the one that is tested against.\r\n\r\nYou can also set ``IMAGE_CROPPING_JQUERY_URL`` to ``None`` to disable inclusion of jQuery by the widget.\r\nYou are now responsible for including ``jQuery`` yourself, both in the frontend and in the admin interface.\r\n\r\n\r\nTroubleshooting\r\n===============\r\n\r\nThe cropping widget is not displayed when using a ``ForeignKey``.\r\n    Make sure you do **not** add the corresponding image field to ``raw_id_fields``.\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n1.0\r\n---\r\n\r\n\"If your software is being used in production, it should probably already be 1.0.0.\" (http://semver.org)\r\n\r\n0.9\r\n---\r\n\r\nThis release addresses mainly the test coverage and internal stuff.\r\n\r\nNoteable (breaking) changes and things to be considered when upgrading from an older version:\r\n\r\n- `django-appconf <https://github.com/jezdez/django-appconf>`_ is now used for handling defaults and settings.\r\n\r\n  * **Breaking Change**: JQUERY_URL changed to IMAGE_CROPPING_JQUERY_URL as part of this transition.\r\n\r\n- The ``cropped_thumbnail`` tag is now based on Django's ``simple tag``.\r\n\r\n  * **Breaking Change**: Arguments for the the tag now need to be put in quotes.\r\n  * If you are still using Django 1.4 remember that `you can't easily use <http://stackoverflow.com/q/11804315/630877>`_ ``True`` or ``False`` as template tag arguments.\r\n\r\n- Any processor parameter (like bw=True or upscale=True) can be used in the ``cropped_thumbnail`` tag.\r\n\r\n- Moved inline css to a dedicated ``image_cropping.css`` style sheet\r\n\r\n0.8\r\n---\r\n\r\n- **Minimum** requirements changed to **Django 1.4** and **easy-thumbnails 1.4**\r\n- Added Python 3 compatibility. Python 2.6 is now the minimum required Python version.\r\n- Added a `free cropping`_ option, so cropping is no longer restricted to fixed ratios.\r\n- Removed the deprecated ``CropForeignKey`` field.\r\n\r\n0.7\r\n---\r\n\r\n- Made the widget for the ``ImageCropField`` overwriteable to allow custom widgets. (Remember to use the ``ImageCroppingMixin`` in the admin as the image cropping widgets are no longer implicitly set.)\r\n- Updated ``Jcrop`` and ``jQuery`` dependencies.\r\n- Moved docs to *Read the Docs*: https://django-image-cropping.readthedocs.org", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/nerver/django-image-cropping-amazon-s3", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "django-image-cropping-amazon-s3", "package_url": "https://pypi.org/project/django-image-cropping-amazon-s3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-image-cropping-amazon-s3/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/nerver/django-image-cropping-amazon-s3"}, "release_url": "https://pypi.org/project/django-image-cropping-amazon-s3/0.0.21/", "requires_dist": null, "requires_python": null, "summary": "A reusable app for cropping images easily and non-destructively in Django when using Amazon s3 storage for media files", "version": "0.0.21", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/django-image-cropping\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/django-image-cropping/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a5e70988a1e898bbc3dbf0c381fbe00573afe80/68747470733a2f2f70797069702e696e2f762f646a616e676f2d696d6167652d63726f7070696e672f62616467652e706e67\"></a>\n<a href=\"http://travis-ci.org/jonasundderwolf/django-image-cropping\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6d911d12943bcda5179c32fb5ce620259a1aafe/68747470733a2f2f7472617669732d63692e6f72672f6a6f6e6173756e64646572776f6c662f646a616e676f2d696d6167652d63726f7070696e672e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/jonasundderwolf/django-image-cropping\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3e83a64b924a7d93ce9ae7d0d39aa08e26f66a1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6a6f6e6173756e64646572776f6c662f646a616e676f2d696d6167652d63726f7070696e672f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<p>django-image-cropping is an app for cropping uploaded images via Django\u2019s admin backend using <a href=\"https://github.com/tapmodo/Jcrop\" rel=\"nofollow\">Jcrop</a>.</p>\n<p>Screenshot:</p>\n<img alt=\"http://www.jonasundderwolf.de/media/images/django_image_cropping_example.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/626ca0aff7466a91b0ec91bb06f8d94fd1a7baab/687474703a2f2f7777772e6a6f6e6173756e64646572776f6c662e64652f6d656469612f696d616765732f646a616e676f5f696d6167655f63726f7070696e675f6578616d706c652e706e67\">\n<p>django-image-cropping is perfect when you need images with a specific size for your templates but want your\nusers or editors to upload images of any dimension. It presents a selection with a fixed aspect ratio so your users\ncan\u2019t break the layout with oddly-sized images.</p>\n<p>The original images are kept intact and only get cropped when they are displayed.\nLarge images are presented in a small format, so even very big images can easily be cropped.</p>\n<p>The necessary fields, widgets and a template tag for displaying the\ncropped image in your templates are provided.</p>\n<p>Also works with <a href=\"https://github.com/feincms/feincms\" rel=\"nofollow\">FeinCMS</a> content types!</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install django-image-cropping using <tt>pip</tt>:</p>\n<pre>pip install django-image-cropping\n</pre>\n</li>\n<li><p>If you haven\u2019t installed easy_thumbnails already, install it:</p>\n<pre>pip install easy_thumbnails\n</pre>\n</li>\n<li><p>Add <tt>easy_thumbnails</tt> and <tt>image_cropping</tt> to your <tt>INSTALLED_APPS</tt>.</p>\n</li>\n<li><p>Adjust the thumbnail processors for <tt><span class=\"pre\">easy-thumbnails</span></tt> in your <tt>settings</tt>:</p>\n<pre>from easy_thumbnails.conf import Settings as thumbnail_settings\nTHUMBNAIL_PROCESSORS = (\n    'image_cropping.thumbnail_processors.crop_corners',\n) + thumbnail_settings.THUMBNAIL_PROCESSORS\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Add an <tt>ImageRatioField</tt> to the model that contains the <tt>ImageField</tt> for the images you want to crop.</p>\n<p>The <tt>ImageRatioField</tt> simply stores the boundaries of the cropped image.\nIt expects the name of the associated <tt>ImageField</tt> and the desired size of the cropped image as arguments.</p>\n<p>The size is passed in as a string and defines the aspect ratio of the selection <em>as well</em> as the minimum\nsize for the final image:</p>\n<pre>from django.db import models\nfrom image_cropping import ImageRatioField\n\nclass MyModel(models.Model):\n    image = models.ImageField(blank=True, upload_to='uploaded_images')\n    # size is \"width x height\"\n    cropping = ImageRatioField('image', '430x360')\n</pre>\n<p>You can configure a <a href=\"#size-warning\" rel=\"nofollow\">size warning</a> if users try to crop a selection smaller than the defined minimum.</p>\n</div>\n<div id=\"admin-integration\">\n<h2>Admin Integration</h2>\n<p>Add the <tt>ImageCroppingMixin</tt> to your <tt>ModelAdmin</tt>:</p>\n<pre>from django.contrib import admin\nfrom image_cropping import ImageCroppingMixin\n\nclass MyModelAdmin(ImageCroppingMixin, admin.ModelAdmin):\n    pass\n\nadmin.site.register(MyModel, MyModelAdmin)\n</pre>\n<p>If your setup is correct you should now see the enhanced image widget that provides a selection\narea.</p>\n</div>\n<div id=\"frontend\">\n<h2>Frontend</h2>\n<p>django-image-cropping provides a templatetag for displaying a cropped thumbnail.\nAny other processor parameter (like <tt>bw=True</tt> or <tt>upscale=True</tt>) will be forwarded to <tt><span class=\"pre\">easy-thumbnails</span></tt>:</p>\n<pre>{% cropped_thumbnail yourmodelinstance \"ratiofieldname\" [scale=INT|width=INT|height=INT|max_size=\"INTxINT\"] %}\n</pre>\n<p>Example usage:</p>\n<pre>{% load cropping %}\n&lt;img src=\"{% cropped_thumbnail yourmodel \"cropping\" scale=0.5 %}\"&gt;\n</pre>\n<p>You can also use the standard <tt><span class=\"pre\">easy-thumbnails</span></tt> templatetag with the <tt>box</tt> parameter:</p>\n<pre>{% load thumbnail %}\n{% thumbnail yourmodel.image 430x360 box=yourmodel.cropping crop detail %}\n</pre>\n<p>Or generate the URL from Python code in your view:</p>\n<pre>from easy_thumbnails.files import get_thumbnailer\nthumbnail_url = get_thumbnailer(yourmodel.image).get_thumbnail({\n    'size': (430, 360),\n    'box': yourmodel.cropping,\n    'crop': True,\n    'detail': True,\n}).url\n</pre>\n</div>\n<div id=\"modelform\">\n<h2>ModelForm</h2>\n<p>If you want to use the cropping widget outside the admin, you\u2019ll need to define the <tt>ImageField</tt> as\nan <tt>ImageCropField</tt>:</p>\n<pre>from django.db import models\nfrom image_cropping import ImageCropField, ImageRatioField\n\nclass MyModel(models.Model):\n    image = ImageCropField(blank=True, upload_to='uploaded_images')\n    # size is \"width x height\"\n    cropping = ImageRatioField('image', '430x360')\n</pre>\n<p>Alternatively, override the widget in your ModelForm (you just need to do one of these two, not both!):</p>\n<pre>from django import forms\nfrom image_cropping import ImageCropWidget\n\nclass MyModelForm(forms.ModelForm):\n    class Meta:\n        widgets = {\n            'image': ImageCropWidget,\n        }\n</pre>\n<p>Remember to include the form media in the <tt>&lt;head&gt;</tt> of your HTML:</p>\n<pre>&lt;html&gt;\n  &lt;head&gt;\n    {{ form.media }}\n  &lt;/head&gt;\n  &lt;body&gt;\n    {{ form }}\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The cropping itself happens in the <tt>ImageRatioField</tt>, the <tt>ImageCropField</tt> will still behave like a regular <tt>ImageField</tt>.</p>\n<p>If you\u2019re selectively including or excluding fields from the ModelForm, remember to include the <tt>ImageRatioField</tt>.</p>\n</div>\n<div id=\"multiple-formats\">\n<h2>Multiple formats</h2>\n<p>If you need the same image in multiple formats, simply specify another <tt>ImageRatioField</tt>.\nThis will allow the image to be cropped twice:</p>\n<pre>from image_cropping import ImageRatioField, ImageCropField\n\nimage = ImageCropField(blank=True, upload_to='uploaded_images')\n# size is \"width x height\"\nlist_page_cropping = ImageRatioField('image', '200x100')\ndetail_page_cropping = ImageRatioField('image', '430x360')\n</pre>\n<p>In your templates, use the corresponding ratio field:</p>\n<pre>{% load cropping %}\n{% cropped_thumbnail yourmodel \"list_page_cropping\" %}\n</pre>\n</div>\n<div id=\"foreign-keys\">\n<h2>Foreign Keys</h2>\n<p>If you need to crop an image contained within another model, referenced by a ForeignKey, the <tt>ImageRatioField</tt> is\ncomposed of the <tt>ForeignKey</tt> name, a double underscore, and the <tt>ImageField</tt> name:</p>\n<pre>from django.db import models\nfrom image_cropping.fields import ImageRatioField\n\nclass Image(models.Model):\n    image_field = models.ImageField(upload_to='image/')\n\nclass NewsItem(models.Model):\n    title = models.CharField(max_length=255)\n    image = models.ForeignKey(Image)\n    cropping = ImageRatioField('image__image_field', '120x100')\n</pre>\n<p>Cropping foreign keys only works in the admin for now, as it reuses the <tt>raw_id</tt> widget.</p>\n</div>\n<div id=\"id1\">\n<span id=\"free-cropping\"></span><h2>Free cropping</h2>\n<p>If you do not need a <em>fixed</em> ratio, you can disable this constraint by setting <tt>free_crop</tt> to <tt>True</tt>.\nIn this case the size parameter is the desired minimum and is also used for the size-warning:</p>\n<pre>from image_cropping import ImageRatioField, ImageCropField\n\nimage = ImageCropField(blank=True, upload_to='uploaded_images')\n\n# size is \"width x height\" so a minimum size of 200px x 100px would look like this:\nmin_free_cropping = ImageRatioField('image', '200x100', free_crop=True)\n</pre>\n<p>Use the <tt>max_size</tt> parameter of the templatetag if you want to limit the display size of a thumbnail:</p>\n<pre>&lt;img src=\"{% cropped_thumbnail image \"cropping_free\" max_size=\"200x200\" %}\" /&gt;\n</pre>\n</div>\n<div id=\"disabling-cropping\">\n<h2>Disabling cropping</h2>\n<p>If you want cropping to be optional, use <tt>allow_fullsize=True</tt> as an additional keyword argument for your <tt>ImageRatioField</tt>.</p>\n<p>Editors can now switch off cropping by unchecking a checkbox next to the image cropping widget:</p>\n<pre>image_with_optional_cropping = ImageRatioField('image', '200x100', allow_fullsize=True)\n</pre>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<div id=\"thumbnail-size\">\n<h3>Thumbnail size</h3>\n<p>You can define the maximum size of the admin preview thumbnail in your <tt>settings</tt>:</p>\n<pre># size is \"width x height\"\nIMAGE_CROPPING_THUMB_SIZE = (300, 300)\n</pre>\n</div>\n<div id=\"id2\">\n<span id=\"size-warning\"></span><h3>Size warning</h3>\n<p>You can warn users about crop selections that are smaller than the size defined in the <tt>ImageRatioField</tt>.\nWhen users try to do a smaller selection, a red border appears around the image.</p>\n<p>To use this functionality for a single image add the <tt>size_warning</tt> parameter to the <tt>ImageRatioField</tt>:</p>\n<pre>cropping = ImageRatioField('image', '430x360', size_warning=True)\n</pre>\n<p>You can enable this functionality project-wide by adding the following line to your <tt>settings</tt>:</p>\n<pre>IMAGE_CROPPING_SIZE_WARNING = True\n</pre>\n</div>\n<div id=\"custom-jquery\">\n<h3>Custom jQuery</h3>\n<p>By default the image cropping widget embeds a recent version of jQuery.</p>\n<p>You can point to another version using the <tt>IMAGE_CROPPING_JQUERY_URL</tt> setting, though compatibility\nissues may arise if your jQuery version differs from the one that is tested against.</p>\n<p>You can also set <tt>IMAGE_CROPPING_JQUERY_URL</tt> to <tt>None</tt> to disable inclusion of jQuery by the widget.\nYou are now responsible for including <tt>jQuery</tt> yourself, both in the frontend and in the admin interface.</p>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h2>Troubleshooting</h2>\n<dl>\n<dt>The cropping widget is not displayed when using a <tt>ForeignKey</tt>.</dt>\n<dd>Make sure you do <strong>not</strong> add the corresponding image field to <tt>raw_id_fields</tt>.</dd>\n</dl>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id3\">\n<h3>1.0</h3>\n<p>\u201cIf your software is being used in production, it should probably already be 1.0.0.\u201d (<a href=\"http://semver.org\" rel=\"nofollow\">http://semver.org</a>)</p>\n</div>\n<div id=\"id4\">\n<h3>0.9</h3>\n<p>This release addresses mainly the test coverage and internal stuff.</p>\n<p>Noteable (breaking) changes and things to be considered when upgrading from an older version:</p>\n<ul>\n<li><a href=\"https://github.com/jezdez/django-appconf\" rel=\"nofollow\">django-appconf</a> is now used for handling defaults and settings.<ul>\n<li><strong>Breaking Change</strong>: JQUERY_URL changed to IMAGE_CROPPING_JQUERY_URL as part of this transition.</li>\n</ul>\n</li>\n<li>The <tt>cropped_thumbnail</tt> tag is now based on Django\u2019s <tt>simple tag</tt>.<ul>\n<li><strong>Breaking Change</strong>: Arguments for the the tag now need to be put in quotes.</li>\n<li>If you are still using Django 1.4 remember that <a href=\"http://stackoverflow.com/q/11804315/630877\" rel=\"nofollow\">you can\u2019t easily use</a> <tt>True</tt> or <tt>False</tt> as template tag arguments.</li>\n</ul>\n</li>\n<li>Any processor parameter (like bw=True or upscale=True) can be used in the <tt>cropped_thumbnail</tt> tag.</li>\n<li>Moved inline css to a dedicated <tt>image_cropping.css</tt> style sheet</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.8</h3>\n<ul>\n<li><strong>Minimum</strong> requirements changed to <strong>Django 1.4</strong> and <strong>easy-thumbnails 1.4</strong></li>\n<li>Added Python 3 compatibility. Python 2.6 is now the minimum required Python version.</li>\n<li>Added a <a href=\"#free-cropping\" rel=\"nofollow\">free cropping</a> option, so cropping is no longer restricted to fixed ratios.</li>\n<li>Removed the deprecated <tt>CropForeignKey</tt> field.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.7</h3>\n<ul>\n<li>Made the widget for the <tt>ImageCropField</tt> overwriteable to allow custom widgets. (Remember to use the <tt>ImageCroppingMixin</tt> in the admin as the image cropping widgets are no longer implicitly set.)</li>\n<li>Updated <tt>Jcrop</tt> and <tt>jQuery</tt> dependencies.</li>\n<li>Moved docs to <em>Read the Docs</em>: <a href=\"https://django-image-cropping.readthedocs.org\" rel=\"nofollow\">https://django-image-cropping.readthedocs.org</a></li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1767725, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "7450f2aec6028ef64ca510914e1543fa", "sha256": "0cdfb81e52fddead67100c253872cffbcc14cc74b1a91e6b93bb29bb73fac888"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.10.tar.gz", "has_sig": false, "md5_digest": "7450f2aec6028ef64ca510914e1543fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40896, "upload_time": "2015-10-13T04:12:54", "upload_time_iso_8601": "2015-10-13T04:12:54.119451Z", "url": "https://files.pythonhosted.org/packages/75/9f/5fe5d52d25992bbfc97da387a33fa31ca30d976ddbb969f69b1f01a097ea/django-image-cropping-amazon-s3-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "7cf259193c0d937cca8e0aaf3046ecf1", "sha256": "b9a4995f7028fa46a799fab611090fa8078f96d4ce4a1415621507f9ee627b92"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.11.tar.gz", "has_sig": false, "md5_digest": "7cf259193c0d937cca8e0aaf3046ecf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40961, "upload_time": "2015-10-13T04:40:47", "upload_time_iso_8601": "2015-10-13T04:40:47.394946Z", "url": "https://files.pythonhosted.org/packages/d4/78/04e617b573afdfe766f33b5e721a8965eaae5ebb47b218b8e5ce9bf53e51/django-image-cropping-amazon-s3-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "8de6acefdc1905a3cc8c2e443aa7a689", "sha256": "b6645a77042b7f8f1e89e73009b663efe4e36a6bdfcb37ebc783005ec7cbe08c"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.12.tar.gz", "has_sig": false, "md5_digest": "8de6acefdc1905a3cc8c2e443aa7a689", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41022, "upload_time": "2015-10-13T04:48:05", "upload_time_iso_8601": "2015-10-13T04:48:05.632105Z", "url": "https://files.pythonhosted.org/packages/51/ca/10a3dea4bf3e92eed4071e64b2122c6218da033a2cc8b90d970e6c9389dc/django-image-cropping-amazon-s3-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "17c9ac91fa50bfd588624fd2e5373c2e", "sha256": "baaac482464da99671e9001ea53abbf3813b7979379768f6adca914d049ca72c"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.13.tar.gz", "has_sig": false, "md5_digest": "17c9ac91fa50bfd588624fd2e5373c2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41023, "upload_time": "2015-10-13T04:51:27", "upload_time_iso_8601": "2015-10-13T04:51:27.904079Z", "url": "https://files.pythonhosted.org/packages/8e/52/30252152cf6fb05c3195af119b7c8b082f7e8704bbf3ff8768f083bbac07/django-image-cropping-amazon-s3-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "5cbb6885de073c69c643e84610e86f5b", "sha256": "a252baa7519fd0477e815474b405955dd7132bf5c0bc86ce7b5c5b4f12d1156b"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.14.tar.gz", "has_sig": false, "md5_digest": "5cbb6885de073c69c643e84610e86f5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41014, "upload_time": "2015-10-13T04:57:03", "upload_time_iso_8601": "2015-10-13T04:57:03.730330Z", "url": "https://files.pythonhosted.org/packages/6f/a0/2aad7d7e4b60ce2f4696ab5aaaefe06e2fa73af6ed50a8b9e4db97b0ecf0/django-image-cropping-amazon-s3-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "aed6aca05226fd024799aeba0549315f", "sha256": "b5c0b16734c301ea77744c6b885bf9884f0e0abcaea5be13129553e4ef2ff470"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.15.tar.gz", "has_sig": false, "md5_digest": "aed6aca05226fd024799aeba0549315f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41010, "upload_time": "2015-10-13T04:58:59", "upload_time_iso_8601": "2015-10-13T04:58:59.633383Z", "url": "https://files.pythonhosted.org/packages/df/a9/32d95004940bbadc809dd8d3b9ceca6e7feea51a3dd66b15cfbbcacb47a7/django-image-cropping-amazon-s3-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "a86a7ac8bf406577b7c1318d1e51a004", "sha256": "4223092374787ef274398fe1fd3e60e92a5c4c334348845e4e34465af49c6302"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.16.tar.gz", "has_sig": false, "md5_digest": "a86a7ac8bf406577b7c1318d1e51a004", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40916, "upload_time": "2015-10-13T05:09:24", "upload_time_iso_8601": "2015-10-13T05:09:24.353638Z", "url": "https://files.pythonhosted.org/packages/63/f5/01dca56c8728c065b8d1585b4966f06e1a8d0461c1b33b32a124a796bdaf/django-image-cropping-amazon-s3-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "c2ec6656124598b1f9bd14f7b3a86035", "sha256": "c1b29d0d8e7ee35b25a7f4ad43abe6d3e8128fb584713e8f03b3818e275670fd"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.17.tar.gz", "has_sig": false, "md5_digest": "c2ec6656124598b1f9bd14f7b3a86035", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40917, "upload_time": "2015-10-13T05:52:30", "upload_time_iso_8601": "2015-10-13T05:52:30.202143Z", "url": "https://files.pythonhosted.org/packages/04/d2/7cc3ad680a1bceab48c6389e62ff943182ade5fdc0bcdc9a274def50325a/django-image-cropping-amazon-s3-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "bcad2ca01116fcd5c824ccdc3e115521", "sha256": "f63a1dcff0b37171cc28fa28399d61118e4d943eb625b2db9754cda70e9410c5"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.18.tar.gz", "has_sig": false, "md5_digest": "bcad2ca01116fcd5c824ccdc3e115521", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40912, "upload_time": "2015-10-13T05:59:48", "upload_time_iso_8601": "2015-10-13T05:59:48.033394Z", "url": "https://files.pythonhosted.org/packages/28/a7/194a0491bf59327977793c3010eb5f6dcb3f88e49eb755be123781333af8/django-image-cropping-amazon-s3-0.0.18.tar.gz", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "c13cf6cb3b30dc0b1a7d1ad2d1dff683", "sha256": "124de1d7d9d18cc1780d5040bedc4b7c4d13495b71c20ef6b9d38dcee0e0b69a"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.19.tar.gz", "has_sig": false, "md5_digest": "c13cf6cb3b30dc0b1a7d1ad2d1dff683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40913, "upload_time": "2015-10-13T06:14:48", "upload_time_iso_8601": "2015-10-13T06:14:48.156440Z", "url": "https://files.pythonhosted.org/packages/39/a5/e0852296307babe2dcdc2f71b74fa02303d3922c17450f45761156f76e56/django-image-cropping-amazon-s3-0.0.19.tar.gz", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "695e6346105a93c008945324ffeefedc", "sha256": "d98f1fdf4eb49e91950efbd06bddbcd1f1aeff0f49246e403f2f677fb90e8438"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.20.tar.gz", "has_sig": false, "md5_digest": "695e6346105a93c008945324ffeefedc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40945, "upload_time": "2015-10-13T06:40:53", "upload_time_iso_8601": "2015-10-13T06:40:53.618679Z", "url": "https://files.pythonhosted.org/packages/e9/72/5bfc048c080da810494abbc676888bf6add0b0ea2b0e968d19a0a096e312/django-image-cropping-amazon-s3-0.0.20.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "e4944535381607387e77a22f62a6460b", "sha256": "5414dd8022b1a9b5cf52272673a3ef87f3545595691f597e91d0a92273932c99"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.21.tar.gz", "has_sig": false, "md5_digest": "e4944535381607387e77a22f62a6460b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40947, "upload_time": "2015-10-13T19:24:28", "upload_time_iso_8601": "2015-10-13T19:24:28.554359Z", "url": "https://files.pythonhosted.org/packages/ab/78/b2e2101f3b6a455fca5f9ea12063965349c541dd5dd38656ed8677da83fe/django-image-cropping-amazon-s3-0.0.21.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "4ece8b1443783cf4b16aacf91b1d8bdd", "sha256": "17e2f59a6030fb15cbe233649ed7a95aa450f57228de2a04fcabaabeb980b560"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4ece8b1443783cf4b16aacf91b1d8bdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40838, "upload_time": "2015-10-13T03:07:34", "upload_time_iso_8601": "2015-10-13T03:07:34.273871Z", "url": "https://files.pythonhosted.org/packages/86/20/3db07d0a33c3f30c9c8747739a94f17ee8b18aede6ce08623ab3d098d4a1/django-image-cropping-amazon-s3-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "2c1e0adb34b17e7c6628a00bbd4941be", "sha256": "484014ec01f42e92fc586517dc7be532a094f45874ba74a9e2b8b07771bd251a"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.7.tar.gz", "has_sig": false, "md5_digest": "2c1e0adb34b17e7c6628a00bbd4941be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40834, "upload_time": "2015-10-13T03:16:21", "upload_time_iso_8601": "2015-10-13T03:16:21.556517Z", "url": "https://files.pythonhosted.org/packages/e8/35/dbf58110a69c0c202b1ed564607f6688df8acef6223739bb35ab3fbd870d/django-image-cropping-amazon-s3-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "523275a65f21ee091430fb57631b1921", "sha256": "ef17f96a8aa2476dd1cffb192010e910c44982c77e59aa05df927eb88b2f64fb"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.8.tar.gz", "has_sig": false, "md5_digest": "523275a65f21ee091430fb57631b1921", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40844, "upload_time": "2015-10-13T03:33:03", "upload_time_iso_8601": "2015-10-13T03:33:03.453084Z", "url": "https://files.pythonhosted.org/packages/30/a3/05a472748e9a84b29ca1b4bffaa8b6faa35fedcd9248164c4e7ab18cf0d9/django-image-cropping-amazon-s3-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "04263376e83ef5275e427067bab43883", "sha256": "b237a51518c066c602c9914124c1fd70785cf0d6845ef79ffd245c2129dd2d6f"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.9.tar.gz", "has_sig": false, "md5_digest": "04263376e83ef5275e427067bab43883", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40839, "upload_time": "2015-10-13T04:03:00", "upload_time_iso_8601": "2015-10-13T04:03:00.260303Z", "url": "https://files.pythonhosted.org/packages/84/f5/3c665f9549089b232efe2403530b2ec3dd53c9772df1016722e176396ceb/django-image-cropping-amazon-s3-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e4944535381607387e77a22f62a6460b", "sha256": "5414dd8022b1a9b5cf52272673a3ef87f3545595691f597e91d0a92273932c99"}, "downloads": -1, "filename": "django-image-cropping-amazon-s3-0.0.21.tar.gz", "has_sig": false, "md5_digest": "e4944535381607387e77a22f62a6460b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40947, "upload_time": "2015-10-13T19:24:28", "upload_time_iso_8601": "2015-10-13T19:24:28.554359Z", "url": "https://files.pythonhosted.org/packages/ab/78/b2e2101f3b6a455fca5f9ea12063965349c541dd5dd38656ed8677da83fe/django-image-cropping-amazon-s3-0.0.21.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:38 2020"}