{"info": {"author": "Alex Marshall", "author_email": "amars@alumni.stanford.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "*This respository is the primary library that the Nido smart thermostat is built around. If you're looking for instructions on how to run Nido on a Raspberry Pi, see <https://github.com/alexmensch/nido> for instructions and the full project background.*\n\n## Running the application locally for development\n### Requirements and initial configuration\n1. Nido has been tested with Python 3.6.5 and higher. Python 2 is not supported.\n2. You will need both [Docker and Docker Compose](https://www.docker.com/get-started) installed locally.\n3. Rename `private-config.py.example` to `private-config.py` with your own private settings.\n\n### Starting the Nido backend and API server\n`> docker-compose up`\n\nRun Docker Compose from the base of the project to run the Nido thermostat and API locally. If you are not running on a Raspberry Pi, a test hardware fixture will be loaded instead of the native Raspberry Pi GPIO library.\n\n**Docker local volume mappings**\n\n- `nido/` Local changes to the package source code are mapped to the Docker containers.\n- `instance/` Nido settings and scheduler database entries are stored outside the container.\n- `log/` Logs generated by backend RPC service and scheduler are generated here.\n\n### Shutting down Nido\n`> docker-compose down`\n\n### Scripts and development tools\n\n- `clean.sh` Delete all local and cached files generated by running in your local environment.\n- `build.sh` Build the Nido package for distribution.\n- `pip install -r dev_requirements.txt` Installs packages useful for local development. Using Python `venv` is recommended.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alexmensch/nido-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nido", "package_url": "https://pypi.org/project/nido/", "platform": "", "project_url": "https://pypi.org/project/nido/", "project_urls": {"Homepage": "https://github.com/alexmensch/nido-python"}, "release_url": "https://pypi.org/project/nido/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Nido, a Raspberry Pi-based home thermostat", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>This respository is the primary library that the Nido smart thermostat is built around. If you're looking for instructions on how to run Nido on a Raspberry Pi, see <a href=\"https://github.com/alexmensch/nido\" rel=\"nofollow\">https://github.com/alexmensch/nido</a> for instructions and the full project background.</em></p>\n<h2>Running the application locally for development</h2>\n<h3>Requirements and initial configuration</h3>\n<ol>\n<li>Nido has been tested with Python 3.6.5 and higher. Python 2 is not supported.</li>\n<li>You will need both <a href=\"https://www.docker.com/get-started\" rel=\"nofollow\">Docker and Docker Compose</a> installed locally.</li>\n<li>Rename <code>private-config.py.example</code> to <code>private-config.py</code> with your own private settings.</li>\n</ol>\n<h3>Starting the Nido backend and API server</h3>\n<p><code>&gt; docker-compose up</code></p>\n<p>Run Docker Compose from the base of the project to run the Nido thermostat and API locally. If you are not running on a Raspberry Pi, a test hardware fixture will be loaded instead of the native Raspberry Pi GPIO library.</p>\n<p><strong>Docker local volume mappings</strong></p>\n<ul>\n<li><code>nido/</code> Local changes to the package source code are mapped to the Docker containers.</li>\n<li><code>instance/</code> Nido settings and scheduler database entries are stored outside the container.</li>\n<li><code>log/</code> Logs generated by backend RPC service and scheduler are generated here.</li>\n</ul>\n<h3>Shutting down Nido</h3>\n<p><code>&gt; docker-compose down</code></p>\n<h3>Scripts and development tools</h3>\n<ul>\n<li><code>clean.sh</code> Delete all local and cached files generated by running in your local environment.</li>\n<li><code>build.sh</code> Build the Nido package for distribution.</li>\n<li><code>pip install -r dev_requirements.txt</code> Installs packages useful for local development. Using Python <code>venv</code> is recommended.</li>\n</ul>\n\n          </div>"}, "last_serial": 5594897, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "a776bcbf9a2b8c52f08b3932371b62b0", "sha256": "4a5b3040f4a9a59f088280c882c34dbbca4a47695f5259d64a4f8baa35154db0"}, "downloads": -1, "filename": "nido-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a776bcbf9a2b8c52f08b3932371b62b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22472, "upload_time": "2019-07-28T05:32:33", "upload_time_iso_8601": "2019-07-28T05:32:33.889061Z", "url": "https://files.pythonhosted.org/packages/3f/f5/ad44bbd05aa3898014f42888611ede17508db08ed16bf906662f331415ca/nido-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a776bcbf9a2b8c52f08b3932371b62b0", "sha256": "4a5b3040f4a9a59f088280c882c34dbbca4a47695f5259d64a4f8baa35154db0"}, "downloads": -1, "filename": "nido-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a776bcbf9a2b8c52f08b3932371b62b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22472, "upload_time": "2019-07-28T05:32:33", "upload_time_iso_8601": "2019-07-28T05:32:33.889061Z", "url": "https://files.pythonhosted.org/packages/3f/f5/ad44bbd05aa3898014f42888611ede17508db08ed16bf906662f331415ca/nido-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:24 2020"}