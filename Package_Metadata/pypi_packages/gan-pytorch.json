{"info": {"author": "Liu Changyu", "author_email": "liuchangyu1111@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "\n# GAN-PyTorch\n\n### Update (Feb 16, 2020)\n\nNow you can install this library directly using pip!\n\n```bash\n$ pip3 install --upgrade gan_pytorch\n```\n\n### Update (January 29, 2020)\n\nThe mnist and fmnist models are now available. Their usage is identical to the other models: \n```python\nfrom gan_pytorch import Generator\nmodel = Generator.from_pretrained('g-mnist') \n```\n\n### Overview\nThis repository contains an op-for-op PyTorch reimplementation of [Generative Adversarial Networks](http://xxx.itp.ac.cn/pdf/1406.2661v1).\n\nThe goal of this implementation is to be simple, highly extensible, and easy to integrate into your own projects. This implementation is a work in progress -- new features are currently being implemented.  \n\nAt the moment, you can easily:  \n * Load pretrained Generate models \n * Use Generate models for extended dataset\n\n_Upcoming features_: In the next few days, you will be able to:\n * Quickly finetune an Generate on your own dataset\n * Export Generate models for production\n\n### Table of contents\n1. [About Generative Adversarial Networks](#about-generative-adversarial-networks)\n2. [Model Description](#model-description)\n3. [Installation](#installation)\n4. [Usage](#usage)\n    * [Load pretrained models](#loading-pretrained-models)\n    * [Example: Extended dataset](#example-extended-dataset)\n    * [Example: Visual](#example-visual)\n5. [Contributing](#contributing) \n\n### About Generative Adversarial Networks\n\nIf you're new to GANs, here's an abstract straight from the paper:\n\nWe propose a new framework for estimating generative models via an adversarial process, in which we simultaneously train two models: a generative model G that captures the data distribution, and a discriminative model D that estimates the probability that a sample came from the training data rather than G. The training procedure for G is to maximize the probability of D making a mistake. This framework corresponds to a minimax two-player game. In the space of arbitrary functions G and D, a unique solution exists, with G recovering the training data distribution and D equal to 1/2 everywhere. In the case where G and D are defined by multilayer perceptrons, the entire system can be trained with backpropagation. There is no need for any Markov chains or unrolled approximate inference networks during either training or generation of samples. Experiments demonstrate the potential of the framework through qualitative and quantitative evaluation of the generated samples.\n\n### Model Description\n\nWe have two networks, G (Generator) and D (Discriminator).The Generator is a network for generating images. It receives a random noise z and generates images from this noise, which is called G(z).Discriminator is a discriminant network that discriminates whether an image is real. The input is x, x is a picture, and the output is D of x is the probability that x is a real picture, and if it's 1, it's 100% real, and if it's 0, it's not real.\n\n### Installation\n\nInstall from pypi:\n```bash\n$ pip3 install gan_pytorch\n```\n\nInstall from source:\n```bash\n$ git clone https://github.com/lornatang/Generative-Adversarial-Networks\n$ cd Generative-Adversarial-Networks\n$ pip3 install -r requirements.txt\n$ pip3 install -e .\n``` \n\n### Usage\n\n#### Loading pretrained models\n\nLoad an Generative-Adversarial-Networks:  \n```python\nfrom gan_pytorch import Generator\nmodel = Generator.from_name(\"g-mnist\")\n```\n\nLoad a pretrained Generative-Adversarial-Networks: \n```python\nfrom gan_pytorch import Generator\nmodel = Generator.from_pretrained(\"g-mnist\")\n```\n\n#### Example: Extended dataset\n\nAs mentioned in the example, if you load the pre-trained weights of the MNIST dataset, it will create a new `imgs` directory and generate 64 random images in the `imgs` directory.\n\n```python\nimport os\nimport torch\nimport torchvision.utils as vutils\nfrom gan_pytorch import Generator\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\nmodel = Generator.from_pretrained(\"g-mnist\")\nmodel.to(device)\n# switch to evaluate mode\nmodel.eval()\n\ntry:\n  os.makedirs(\"./imgs\")\nexcept OSError:\n  pass\n\nwith torch.no_grad():\n  for i in range(64):\n    noise = torch.randn(64, 100, device=device)\n    fake = model(noise)\n    vutils.save_image(fake.detach().cpu(), f\"./imgs/fake_{i:04d}.png\", normalize=True)\n  print(\"The fake image has been generated!\")\n```\n\n#### Example: Visual\n\n```text\ncd $REPO$/framework\nsh start.sh\n```\n\nThen open the browser and type in the browser address [http://127.0.0.1:10000/](http://127.0.0.1:10000/).\nEnjoy it.\n\n### Contributing\n\nIf you find a bug, create a GitHub issue, or even better, submit a pull request. Similarly, if you have questions, simply post them as GitHub issues.   \n\nI look forward to seeing what the community does with these models! \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Lornatang/GAN-PyTorch", "keywords": "", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "gan-pytorch", "package_url": "https://pypi.org/project/gan-pytorch/", "platform": "", "project_url": "https://pypi.org/project/gan-pytorch/", "project_urls": {"Homepage": "https://github.com/Lornatang/GAN-PyTorch"}, "release_url": "https://pypi.org/project/gan-pytorch/0.4.0/", "requires_dist": ["torch"], "requires_python": ">=3.6.0", "summary": "PyTorch implements a simple GAN neural network structure.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GAN-PyTorch</h1>\n<h3>Update (Feb 16, 2020)</h3>\n<p>Now you can install this library directly using pip!</p>\n<pre>$ pip3 install --upgrade gan_pytorch\n</pre>\n<h3>Update (January 29, 2020)</h3>\n<p>The mnist and fmnist models are now available. Their usage is identical to the other models:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gan_pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">from_pretrained</span><span class=\"p\">(</span><span class=\"s1\">'g-mnist'</span><span class=\"p\">)</span> \n</pre>\n<h3>Overview</h3>\n<p>This repository contains an op-for-op PyTorch reimplementation of <a href=\"http://xxx.itp.ac.cn/pdf/1406.2661v1\" rel=\"nofollow\">Generative Adversarial Networks</a>.</p>\n<p>The goal of this implementation is to be simple, highly extensible, and easy to integrate into your own projects. This implementation is a work in progress -- new features are currently being implemented.</p>\n<p>At the moment, you can easily:</p>\n<ul>\n<li>Load pretrained Generate models</li>\n<li>Use Generate models for extended dataset</li>\n</ul>\n<p><em>Upcoming features</em>: In the next few days, you will be able to:</p>\n<ul>\n<li>Quickly finetune an Generate on your own dataset</li>\n<li>Export Generate models for production</li>\n</ul>\n<h3>Table of contents</h3>\n<ol>\n<li><a href=\"#about-generative-adversarial-networks\" rel=\"nofollow\">About Generative Adversarial Networks</a></li>\n<li><a href=\"#model-description\" rel=\"nofollow\">Model Description</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#loading-pretrained-models\" rel=\"nofollow\">Load pretrained models</a></li>\n<li><a href=\"#example-extended-dataset\" rel=\"nofollow\">Example: Extended dataset</a></li>\n<li><a href=\"#example-visual\" rel=\"nofollow\">Example: Visual</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n</ol>\n<h3>About Generative Adversarial Networks</h3>\n<p>If you're new to GANs, here's an abstract straight from the paper:</p>\n<p>We propose a new framework for estimating generative models via an adversarial process, in which we simultaneously train two models: a generative model G that captures the data distribution, and a discriminative model D that estimates the probability that a sample came from the training data rather than G. The training procedure for G is to maximize the probability of D making a mistake. This framework corresponds to a minimax two-player game. In the space of arbitrary functions G and D, a unique solution exists, with G recovering the training data distribution and D equal to 1/2 everywhere. In the case where G and D are defined by multilayer perceptrons, the entire system can be trained with backpropagation. There is no need for any Markov chains or unrolled approximate inference networks during either training or generation of samples. Experiments demonstrate the potential of the framework through qualitative and quantitative evaluation of the generated samples.</p>\n<h3>Model Description</h3>\n<p>We have two networks, G (Generator) and D (Discriminator).The Generator is a network for generating images. It receives a random noise z and generates images from this noise, which is called G(z).Discriminator is a discriminant network that discriminates whether an image is real. The input is x, x is a picture, and the output is D of x is the probability that x is a real picture, and if it's 1, it's 100% real, and if it's 0, it's not real.</p>\n<h3>Installation</h3>\n<p>Install from pypi:</p>\n<pre>$ pip3 install gan_pytorch\n</pre>\n<p>Install from source:</p>\n<pre>$ git clone https://github.com/lornatang/Generative-Adversarial-Networks\n$ <span class=\"nb\">cd</span> Generative-Adversarial-Networks\n$ pip3 install -r requirements.txt\n$ pip3 install -e .\n</pre>\n<h3>Usage</h3>\n<h4>Loading pretrained models</h4>\n<p>Load an Generative-Adversarial-Networks:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gan_pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"s2\">\"g-mnist\"</span><span class=\"p\">)</span>\n</pre>\n<p>Load a pretrained Generative-Adversarial-Networks:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gan_pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">from_pretrained</span><span class=\"p\">(</span><span class=\"s2\">\"g-mnist\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Example: Extended dataset</h4>\n<p>As mentioned in the example, if you load the pre-trained weights of the MNIST dataset, it will create a new <code>imgs</code> directory and generate 64 random images in the <code>imgs</code> directory.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torchvision.utils</span> <span class=\"k\">as</span> <span class=\"nn\">vutils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gan_pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span>\n\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"s2\">\"cuda:0\"</span> <span class=\"k\">if</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">is_available</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"s2\">\"cpu\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">from_pretrained</span><span class=\"p\">(</span><span class=\"s2\">\"g-mnist\"</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n<span class=\"c1\"># switch to evaluate mode</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"s2\">\"./imgs\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">OSError</span><span class=\"p\">:</span>\n  <span class=\"k\">pass</span>\n\n<span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">no_grad</span><span class=\"p\">():</span>\n  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">):</span>\n    <span class=\"n\">noise</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">)</span>\n    <span class=\"n\">fake</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">noise</span><span class=\"p\">)</span>\n    <span class=\"n\">vutils</span><span class=\"o\">.</span><span class=\"n\">save_image</span><span class=\"p\">(</span><span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">detach</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">cpu</span><span class=\"p\">(),</span> <span class=\"sa\">f</span><span class=\"s2\">\"./imgs/fake_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">:</span><span class=\"s2\">04d</span><span class=\"si\">}</span><span class=\"s2\">.png\"</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The fake image has been generated!\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Example: Visual</h4>\n<pre>cd $REPO$/framework\nsh start.sh\n</pre>\n<p>Then open the browser and type in the browser address <a href=\"http://127.0.0.1:10000/\" rel=\"nofollow\">http://127.0.0.1:10000/</a>.\nEnjoy it.</p>\n<h3>Contributing</h3>\n<p>If you find a bug, create a GitHub issue, or even better, submit a pull request. Similarly, if you have questions, simply post them as GitHub issues.</p>\n<p>I look forward to seeing what the community does with these models!</p>\n\n          </div>"}, "last_serial": 6806511, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8ca0f2a52d5f452dd401f4a812a5b876", "sha256": "455c98cf35e6e9586d83ffe82c84dd41159be8d74153b6709558fb933cc6e224"}, "downloads": -1, "filename": "gan_pytorch-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8ca0f2a52d5f452dd401f4a812a5b876", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 11972, "upload_time": "2020-02-16T06:19:23", "upload_time_iso_8601": "2020-02-16T06:19:23.406676Z", "url": "https://files.pythonhosted.org/packages/28/95/b18fa6347c5fe9291f92b137db055eed63614f50d644ccdb37fb79a6f988/gan_pytorch-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a13a176c7a80ede442d1a26fe4340d9", "sha256": "2fbed05d17b308a7ce30167ada5087f123687724656460cb090136771bb63467"}, "downloads": -1, "filename": "gan_pytorch-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1a13a176c7a80ede442d1a26fe4340d9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 7666, "upload_time": "2020-02-16T06:19:26", "upload_time_iso_8601": "2020-02-16T06:19:26.179099Z", "url": "https://files.pythonhosted.org/packages/42/02/f49c5ec7cab9bf6797a65a8d57282a5ff79885882f0910adf1bdebd70665/gan_pytorch-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4a0a259a9a0f84dc94a066bbc0afa515", "sha256": "f448a471c0f260fff5ccf9cf7250c87c0be2c34f555619fd5881bf9ed1ff19bd"}, "downloads": -1, "filename": "gan_pytorch-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4a0a259a9a0f84dc94a066bbc0afa515", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 12034, "upload_time": "2020-02-16T08:46:46", "upload_time_iso_8601": "2020-02-16T08:46:46.131354Z", "url": "https://files.pythonhosted.org/packages/af/43/161175d79e0ba9e4dbb5560c5caaa540a27caef16a1ead25405fa34ef7e4/gan_pytorch-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f1c0a7671a6956ae3724aea59264d4b", "sha256": "835bac9e9243a8517c0afc8574d6ff61a2794cbe4c3e083ef28743f9e3b6a325"}, "downloads": -1, "filename": "gan_pytorch-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9f1c0a7671a6956ae3724aea59264d4b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 7766, "upload_time": "2020-02-16T08:46:48", "upload_time_iso_8601": "2020-02-16T08:46:48.211505Z", "url": "https://files.pythonhosted.org/packages/cb/47/f8a12119ee2ff9d7621bd6ef55966faf2e634a3b1fa4f99506675399bf9b/gan_pytorch-0.1.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "7342deffa44d69f4bea1d210de86bacd", "sha256": "8d2073b5005d2a8a3fdfc4274ab28ee35d4436d01f2d7bd6474c4671b86ef218"}, "downloads": -1, "filename": "gan_pytorch-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7342deffa44d69f4bea1d210de86bacd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 12035, "upload_time": "2020-02-16T11:21:12", "upload_time_iso_8601": "2020-02-16T11:21:12.121919Z", "url": "https://files.pythonhosted.org/packages/a7/a4/04350841810cecda6d12e91682c930aed6ac4b2adfd952084d523631ec89/gan_pytorch-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71e87e23bdcee11e493af6a34dda7570", "sha256": "527b5fc81a9b258563c97f3f789d73d1f7dae5ad065a364f2d5c09e434aac78d"}, "downloads": -1, "filename": "gan_pytorch-0.1.3.tar.gz", "has_sig": false, "md5_digest": "71e87e23bdcee11e493af6a34dda7570", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 7751, "upload_time": "2020-02-16T11:21:15", "upload_time_iso_8601": "2020-02-16T11:21:15.075794Z", "url": "https://files.pythonhosted.org/packages/a0/84/6c3d7d033c50c888730fcf91ce5455212a2c754eb4f0912a5b4217117aca/gan_pytorch-0.1.3.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "1d230df5aee683a45a68843a07ebb843", "sha256": "c3c7b3c1fa836a4529df0b4907d4c97ca2fd23cb87e6406c9429a4cbec3e9217"}, "downloads": -1, "filename": "gan_pytorch-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1d230df5aee683a45a68843a07ebb843", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 12031, "upload_time": "2020-02-16T12:07:47", "upload_time_iso_8601": "2020-02-16T12:07:47.197595Z", "url": "https://files.pythonhosted.org/packages/be/d3/5b2dcca376a66c563f9a10c07ae05487255f135bb53c066210d3aca301e4/gan_pytorch-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b35bd94bbbd808e2cdb3e2f301c91c82", "sha256": "e006e51439bcf2ee352888694d6b8a5b0912cf4716f0fa39e8289ce6a91220f3"}, "downloads": -1, "filename": "gan_pytorch-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b35bd94bbbd808e2cdb3e2f301c91c82", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 7757, "upload_time": "2020-02-16T12:07:48", "upload_time_iso_8601": "2020-02-16T12:07:48.885999Z", "url": "https://files.pythonhosted.org/packages/67/16/c598ddf77ac355f86ad22155240d70c59d8d1c05cfe7890bf113522eef3c/gan_pytorch-0.1.5.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "c45bebd9b4c20b0b04a219acd087e993", "sha256": "edc9178b5a030ce16b56dac270792c3625834b5dc1cce47a30a81e9174f2b75b"}, "downloads": -1, "filename": "gan_pytorch-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c45bebd9b4c20b0b04a219acd087e993", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 12018, "upload_time": "2020-02-16T12:27:14", "upload_time_iso_8601": "2020-02-16T12:27:14.549717Z", "url": "https://files.pythonhosted.org/packages/88/07/66afb5a67a089c2e2172a40edcb330090e93cc19afa24346ddc62bc6bc16/gan_pytorch-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0ef6499bd9c49483fa8328bf25c100f", "sha256": "3606ef729ad3e2918ae2ed2c7cb8fd472b6f5c5785ad0a7a86a92cea8fb9a84d"}, "downloads": -1, "filename": "gan_pytorch-0.1.7.tar.gz", "has_sig": false, "md5_digest": "d0ef6499bd9c49483fa8328bf25c100f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 7750, "upload_time": "2020-02-16T12:27:17", "upload_time_iso_8601": "2020-02-16T12:27:17.365615Z", "url": "https://files.pythonhosted.org/packages/41/6b/ca37b73a9ab842fc427690609bd26f7a853ed687f98959b0a33d08bfd2c2/gan_pytorch-0.1.7.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "713e34b6fba248a26a886ba2e339b39e", "sha256": "e5cf88424c293562842cd0334920e3c87c78169e9a924ca53aec56ab5a359fe9"}, "downloads": -1, "filename": "gan_pytorch-0.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "713e34b6fba248a26a886ba2e339b39e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 12017, "upload_time": "2020-02-16T14:21:57", "upload_time_iso_8601": "2020-02-16T14:21:57.280921Z", "url": "https://files.pythonhosted.org/packages/50/2f/d5e793630cb396fbaf443ffd9b25feb8b72d073316396bcf114162ef9ed1/gan_pytorch-0.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "314d50200f08b6514af271e5ebc4fe8b", "sha256": "aef19dcaef37dfce7aed630dc42c6ad085e6cbc25c6bad396e3a432acf95bfd2"}, "downloads": -1, "filename": "gan_pytorch-0.1.9.tar.gz", "has_sig": false, "md5_digest": "314d50200f08b6514af271e5ebc4fe8b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 7748, "upload_time": "2020-02-16T14:22:00", "upload_time_iso_8601": "2020-02-16T14:22:00.122782Z", "url": "https://files.pythonhosted.org/packages/80/f6/aafd178c30b40620151a83a1627e00ecdb1ed6f3198b1ab762d7bcb9bd68/gan_pytorch-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "24320d5d8f66d784249f7c75a222ed14", "sha256": "3461ac2afdcea7359518f13a3ac4b53f29e80935a1432853b0b5aad86bf33057"}, "downloads": -1, "filename": "gan_pytorch-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "24320d5d8f66d784249f7c75a222ed14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 11730, "upload_time": "2020-02-17T04:36:48", "upload_time_iso_8601": "2020-02-17T04:36:48.109077Z", "url": "https://files.pythonhosted.org/packages/2c/db/b4e4e97a3adfb827d4609c6e5b3afe373eb1a2c188708f4922f533aba6ff/gan_pytorch-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9723c291607fa7f7b04d8b176d19dcc2", "sha256": "0aff98173006cdc302881e4a21119ad5f39f24393d9bfb8ae41d684dbba8a621"}, "downloads": -1, "filename": "gan_pytorch-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9723c291607fa7f7b04d8b176d19dcc2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 7494, "upload_time": "2020-02-17T04:36:50", "upload_time_iso_8601": "2020-02-17T04:36:50.061423Z", "url": "https://files.pythonhosted.org/packages/6b/74/c544dc9f17591f23aebff70756f09a3ecae01930647710098adc909d3bf7/gan_pytorch-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "915ca737332dcc4392b56a451c60b1b0", "sha256": "24e0441e43af1baa8b63ba69f77a988fa52ee4abe421a12529025449e3cd1a32"}, "downloads": -1, "filename": "gan_pytorch-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "915ca737332dcc4392b56a451c60b1b0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 11257, "upload_time": "2020-02-21T13:52:13", "upload_time_iso_8601": "2020-02-21T13:52:13.744238Z", "url": "https://files.pythonhosted.org/packages/20/20/be0c96beb6408c590aa50e7ca0504462deb86a3e5e1d8a6b73cc32ded007/gan_pytorch-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5027ce6fb2519d65f6f9b3754a4014f8", "sha256": "f9b560be8c1d87fe10397194bfc2dd2ca17585254475a876fc903b6bb6a9e094"}, "downloads": -1, "filename": "gan_pytorch-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5027ce6fb2519d65f6f9b3754a4014f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 7076, "upload_time": "2020-02-21T13:52:16", "upload_time_iso_8601": "2020-02-21T13:52:16.702690Z", "url": "https://files.pythonhosted.org/packages/db/25/4965d6628f6a9f122fdce6e64534a083326544e921b6d737733bd05f1c4f/gan_pytorch-0.2.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "4ecdf37d1a5e866f81b5b0bde0520aea", "sha256": "b851a43de643ef005a2f1c02466224db900e7f8dd611e3f0e41d0c80f6ec5df1"}, "downloads": -1, "filename": "gan_pytorch-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4ecdf37d1a5e866f81b5b0bde0520aea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 14410, "upload_time": "2020-03-13T14:54:10", "upload_time_iso_8601": "2020-03-13T14:54:10.539742Z", "url": "https://files.pythonhosted.org/packages/00/1d/1ab111ad0f131fab913152cf25d34e3d10c913615d10e9fe9dfa6d171eae/gan_pytorch-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e72075fed2fbbc58e210d1feaef98f9c", "sha256": "b817721c6438d852e10fb79ce8312fddf80a0f7f27d037e744d0db322dc342d1"}, "downloads": -1, "filename": "gan_pytorch-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e72075fed2fbbc58e210d1feaef98f9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 8485, "upload_time": "2020-03-13T14:54:13", "upload_time_iso_8601": "2020-03-13T14:54:13.142421Z", "url": "https://files.pythonhosted.org/packages/ae/d6/bf36634790bb1e38d1bab214253891140a50b38b8515061f7bfa7e3dd211/gan_pytorch-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ecdf37d1a5e866f81b5b0bde0520aea", "sha256": "b851a43de643ef005a2f1c02466224db900e7f8dd611e3f0e41d0c80f6ec5df1"}, "downloads": -1, "filename": "gan_pytorch-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4ecdf37d1a5e866f81b5b0bde0520aea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 14410, "upload_time": "2020-03-13T14:54:10", "upload_time_iso_8601": "2020-03-13T14:54:10.539742Z", "url": "https://files.pythonhosted.org/packages/00/1d/1ab111ad0f131fab913152cf25d34e3d10c913615d10e9fe9dfa6d171eae/gan_pytorch-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e72075fed2fbbc58e210d1feaef98f9c", "sha256": "b817721c6438d852e10fb79ce8312fddf80a0f7f27d037e744d0db322dc342d1"}, "downloads": -1, "filename": "gan_pytorch-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e72075fed2fbbc58e210d1feaef98f9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 8485, "upload_time": "2020-03-13T14:54:13", "upload_time_iso_8601": "2020-03-13T14:54:13.142421Z", "url": "https://files.pythonhosted.org/packages/ae/d6/bf36634790bb1e38d1bab214253891140a50b38b8515061f7bfa7e3dd211/gan_pytorch-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:10 2020"}