{"info": {"author": "Victor Dao", "author_email": "daongocthang.vn@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# EVERON (Python Library)\n\nThis module makes easier to write user command-line interfaces.\n\n`everon.BaseCommand` makes use of the [argparse](https://docs.python.org/3/library/argparse.html), which is part of Python library.\n\n`everon.MixinFontColor` is a mixin class, which allows to render color fonts in terminal.\n\n## Basic Example\n\n\n\nBelow, a basic example of what the custom command should look like:\n\n```python\n# whats_time.py\nfrom datetime import datetime\nimport everon\n\n\nclass WhatsTime(everon.BaseCommand):\n    help = 'Display current time'\n\n    def handle(self, *args, **kwargs):\n        current_time = datetime.now().strftime('%X')\n        print(\"It's now {}\".format(current_time))\n\n\nif __name__ == '__main__':\n    whatstime = WhatsTime()\n    whatstime.run()\n```\n\nSee how we named our module `whatstime.py`.\n\nThis command can be executed as:\n\n```\npython -m whats_time\n```\n\nOutput:\n\n```\nIt's now 11:54:19\n```\n\n## Handling Arguments\n\n To handle arguments in command, we should define a method named `add_args`.\n\n```python\n# rand_str.py\nimport argparse\nimport random\nimport string\n\nfrom everon import BaseCommand\n\n\nclass RandString(BaseCommand):\n\n    def add_args(self, parser: argparse.ArgumentParser):\n        parser.add_argument('length', type=int, help='Indicates length of string')\n        parser.add_argument('-l', '--lowercase', action='store_true', help='Only get lowercase letters')\n\n    def handle(self, *args, **kwargs):\n        string_length = kwargs.get('length')\n        allow_lowercase = kwargs.get('lowercase')\n        letters = string.ascii_lowercase if allow_lowercase else string.ascii_letters\n        print(\"Random String is {}\".format(\n            ''.join(random.choice(letters) for _ in range(string_length)))\n        )\n\n\nif __name__ == '__main__':\n    rand_str = RandString()\n    rand_str.run()\n```\n\n\n\n#### Usage:\n\n```\npython -m rand_str 10 -l\n```\n\nOr\n\n```\npython -m rand_str 10 --lower\n```\n\nOutput\n\n```\nRandom String is wjaehxsnxc\n```\n\n## Font Color\n\nWe could setting an appropriate color to the out message with the example\n\n```python\n# say_hello.py\nfrom everon import BaseCommand, MixinFontColor\n\n\nclass SayHello(BaseCommand, MixinFontColor):\n    def __init__(self):\n        MixinFontColor.__init__(self)\n\n    def handle(self, *args, **kwargs):\n        self.print_ok('Printing text ok')\n        self.print_err('Printing text error')\n        print(self.text_as_link('Printing text as link'))\n        print(self.color.LIGHTMAGENTA_EX + 'Printing text with custom color')\n\n\nif __name__ == '__main__':\n    foo = SayHello()\n    foo.run()\n```\n\nChecking with the following command\n\n```\npython -m say_hello\n```\n\nOutput\n\n\n\n![](https://github.com/wayfar3/everon/blob/master/res/MixinFontColor.jpg)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wayfar3/everon", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "everon", "package_url": "https://pypi.org/project/everon/", "platform": "", "project_url": "https://pypi.org/project/everon/", "project_urls": {"Homepage": "https://github.com/wayfar3/everon"}, "release_url": "https://pypi.org/project/everon/0.0.1/", "requires_dist": ["colorama"], "requires_python": "", "summary": "It makes easier to build user command-line interface", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EVERON (Python Library)</h1>\n<p>This module makes easier to write user command-line interfaces.</p>\n<p><code>everon.BaseCommand</code> makes use of the <a href=\"https://docs.python.org/3/library/argparse.html\" rel=\"nofollow\">argparse</a>, which is part of Python library.</p>\n<p><code>everon.MixinFontColor</code> is a mixin class, which allows to render color fonts in terminal.</p>\n<h2>Basic Example</h2>\n<p>Below, a basic example of what the custom command should look like:</p>\n<pre><span class=\"c1\"># whats_time.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">everon</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">WhatsTime</span><span class=\"p\">(</span><span class=\"n\">everon</span><span class=\"o\">.</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s1\">'Display current time'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">current_time</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%X</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"It's now </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">current_time</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">whatstime</span> <span class=\"o\">=</span> <span class=\"n\">WhatsTime</span><span class=\"p\">()</span>\n    <span class=\"n\">whatstime</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>See how we named our module <code>whatstime.py</code>.</p>\n<p>This command can be executed as:</p>\n<pre><code>python -m whats_time\n</code></pre>\n<p>Output:</p>\n<pre><code>It's now 11:54:19\n</code></pre>\n<h2>Handling Arguments</h2>\n<p>To handle arguments in command, we should define a method named <code>add_args</code>.</p>\n<pre><span class=\"c1\"># rand_str.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">string</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">everon</span> <span class=\"kn\">import</span> <span class=\"n\">BaseCommand</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RandString</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_args</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'length'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Indicates length of string'</span><span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-l'</span><span class=\"p\">,</span> <span class=\"s1\">'--lowercase'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Only get lowercase letters'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">string_length</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'length'</span><span class=\"p\">)</span>\n        <span class=\"n\">allow_lowercase</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'lowercase'</span><span class=\"p\">)</span>\n        <span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_lowercase</span> <span class=\"k\">if</span> <span class=\"n\">allow_lowercase</span> <span class=\"k\">else</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_letters</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Random String is </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">string_length</span><span class=\"p\">)))</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">rand_str</span> <span class=\"o\">=</span> <span class=\"n\">RandString</span><span class=\"p\">()</span>\n    <span class=\"n\">rand_str</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h4>Usage:</h4>\n<pre><code>python -m rand_str 10 -l\n</code></pre>\n<p>Or</p>\n<pre><code>python -m rand_str 10 --lower\n</code></pre>\n<p>Output</p>\n<pre><code>Random String is wjaehxsnxc\n</code></pre>\n<h2>Font Color</h2>\n<p>We could setting an appropriate color to the out message with the example</p>\n<pre><span class=\"c1\"># say_hello.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">everon</span> <span class=\"kn\">import</span> <span class=\"n\">BaseCommand</span><span class=\"p\">,</span> <span class=\"n\">MixinFontColor</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SayHello</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">,</span> <span class=\"n\">MixinFontColor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">MixinFontColor</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">print_ok</span><span class=\"p\">(</span><span class=\"s1\">'Printing text ok'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">print_err</span><span class=\"p\">(</span><span class=\"s1\">'Printing text error'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text_as_link</span><span class=\"p\">(</span><span class=\"s1\">'Printing text as link'</span><span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">LIGHTMAGENTA_EX</span> <span class=\"o\">+</span> <span class=\"s1\">'Printing text with custom color'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Checking with the following command</p>\n<pre><code>python -m say_hello\n</code></pre>\n<p>Output</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e69f89d63c2b097ae603e4d0a3b74130ebc59cc6/68747470733a2f2f6769746875622e636f6d2f776179666172332f657665726f6e2f626c6f622f6d61737465722f7265732f4d6978696e466f6e74436f6c6f722e6a7067\"></p>\n\n          </div>"}, "last_serial": 6834650, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0739e457fc9c1d4c0e83494c04401dd9", "sha256": "82dcafb53036cf171edf6ba36f762e7afcb9111113908fa9815ae2387489b9cd"}, "downloads": -1, "filename": "everon-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0739e457fc9c1d4c0e83494c04401dd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4194, "upload_time": "2020-03-18T09:45:13", "upload_time_iso_8601": "2020-03-18T09:45:13.132317Z", "url": "https://files.pythonhosted.org/packages/ff/bd/7245f30eddf223bd27fe31f7d9840f6e4504c1036b6358892ed077a8ffc2/everon-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95fba3a96fab52fffd22c38343a6a1a5", "sha256": "de28f554886c98ae2444b82186a48bf27ad67d04733881a225421844e22810dc"}, "downloads": -1, "filename": "everon-0.0.1.tar.gz", "has_sig": false, "md5_digest": "95fba3a96fab52fffd22c38343a6a1a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3633, "upload_time": "2020-03-18T09:45:15", "upload_time_iso_8601": "2020-03-18T09:45:15.552855Z", "url": "https://files.pythonhosted.org/packages/88/a2/0425d3cbf64a15c9752eee16f1d3369339510faee4fe001fcefcad124ccf/everon-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0739e457fc9c1d4c0e83494c04401dd9", "sha256": "82dcafb53036cf171edf6ba36f762e7afcb9111113908fa9815ae2387489b9cd"}, "downloads": -1, "filename": "everon-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0739e457fc9c1d4c0e83494c04401dd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4194, "upload_time": "2020-03-18T09:45:13", "upload_time_iso_8601": "2020-03-18T09:45:13.132317Z", "url": "https://files.pythonhosted.org/packages/ff/bd/7245f30eddf223bd27fe31f7d9840f6e4504c1036b6358892ed077a8ffc2/everon-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95fba3a96fab52fffd22c38343a6a1a5", "sha256": "de28f554886c98ae2444b82186a48bf27ad67d04733881a225421844e22810dc"}, "downloads": -1, "filename": "everon-0.0.1.tar.gz", "has_sig": false, "md5_digest": "95fba3a96fab52fffd22c38343a6a1a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3633, "upload_time": "2020-03-18T09:45:15", "upload_time_iso_8601": "2020-03-18T09:45:15.552855Z", "url": "https://files.pythonhosted.org/packages/88/a2/0425d3cbf64a15c9752eee16f1d3369339510faee4fe001fcefcad124ccf/everon-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:09 2020"}