{"info": {"author": "Anatoly Scherbakov", "author_email": "altaisoft@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Sorted containers\n\nContrary to its name, this package does not really help you to efficiently sort your data, - you may use built-in tools of Python, numpy or pandas for that purpose.\n\nThis tool, however, allows you to _declare_ that certain container is already sorted and, based on that information, perform certain operations on such containers more efficiently.\n\n## Supported operations\n\n* Merge two or more sorted iterators into one magnificent sorted iterator\n* Subtract one sorted iterator from another, returning an iterator which yields all items that exist in the latter but not in the first\n* Deduplicate a sorted iterator\n\n## Examples\n\n```python\nfrom itertools import count, islice\nfrom sorted import Sorted, merge\n\n# Merge\nprint(list(Sorted([0, 2, 4]) + Sorted([1, 3, 5])))\n# [0, 1, 2, 3, 4, 5]\n\n# Subtract\nnatural_numbers = Sorted(count())\neven_numbers = Sorted(filter(lambda i: i % 2 == 0, count()))\nodd_numbers = natural_numbers - even_numbers\nprint(list(islice(odd_numbers, 5)))\n# [1, 3, 5, 7, 9]\n\n# Deduplicate\niterators = [\n    Sorted((0, ) * 50),\n    Sorted((5, ) * 50),\n    Sorted(count(25))\n]\nlist(islice(\n    merge(*iterators).unique(),\n    4\n))\n# [0, 5, 25, 26]\n```\n\nTo perform these operations, `sorted` uses lazy iterative algorithms with linear complexity by time and constant complexity by RAM.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anatoly-scherbakov/sorted", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sorted", "package_url": "https://pypi.org/project/sorted/", "platform": "", "project_url": "https://pypi.org/project/sorted/", "project_urls": {"Homepage": "https://github.com/anatoly-scherbakov/sorted"}, "release_url": "https://pypi.org/project/sorted/0.1.0/", "requires_dist": ["pytest ; extra == 'dev'", "coverage ; extra == 'dev'", "mypy ; extra == 'dev'", "black ; extra == 'dev'", "twine ; extra == 'dev'"], "requires_python": "", "summary": "Merge, subtract, deduplicate and otherwise manipulate Python iterators that are known to be sorted.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sorted containers</h1>\n<p>Contrary to its name, this package does not really help you to efficiently sort your data, - you may use built-in tools of Python, numpy or pandas for that purpose.</p>\n<p>This tool, however, allows you to <em>declare</em> that certain container is already sorted and, based on that information, perform certain operations on such containers more efficiently.</p>\n<h2>Supported operations</h2>\n<ul>\n<li>Merge two or more sorted iterators into one magnificent sorted iterator</li>\n<li>Subtract one sorted iterator from another, returning an iterator which yields all items that exist in the latter but not in the first</li>\n<li>Deduplicate a sorted iterator</li>\n</ul>\n<h2>Examples</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">islice</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sorted</span> <span class=\"kn\">import</span> <span class=\"n\">Sorted</span><span class=\"p\">,</span> <span class=\"n\">merge</span>\n\n<span class=\"c1\"># Merge</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Sorted</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">Sorted</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])))</span>\n<span class=\"c1\"># [0, 1, 2, 3, 4, 5]</span>\n\n<span class=\"c1\"># Subtract</span>\n<span class=\"n\">natural_numbers</span> <span class=\"o\">=</span> <span class=\"n\">Sorted</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">())</span>\n<span class=\"n\">even_numbers</span> <span class=\"o\">=</span> <span class=\"n\">Sorted</span><span class=\"p\">(</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">()))</span>\n<span class=\"n\">odd_numbers</span> <span class=\"o\">=</span> <span class=\"n\">natural_numbers</span> <span class=\"o\">-</span> <span class=\"n\">even_numbers</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">odd_numbers</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)))</span>\n<span class=\"c1\"># [1, 3, 5, 7, 9]</span>\n\n<span class=\"c1\"># Deduplicate</span>\n<span class=\"n\">iterators</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Sorted</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">50</span><span class=\"p\">),</span>\n    <span class=\"n\">Sorted</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">50</span><span class=\"p\">),</span>\n    <span class=\"n\">Sorted</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">))</span>\n<span class=\"p\">]</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">islice</span><span class=\"p\">(</span>\n    <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iterators</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(),</span>\n    <span class=\"mi\">4</span>\n<span class=\"p\">))</span>\n<span class=\"c1\"># [0, 5, 25, 26]</span>\n</pre>\n<p>To perform these operations, <code>sorted</code> uses lazy iterative algorithms with linear complexity by time and constant complexity by RAM.</p>\n\n          </div>"}, "last_serial": 6278917, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4d2a4789f19915d892d383b4f7a32b64", "sha256": "5e3f19dd1e4fdf2a9c3c43800f8cdb7eb9eb3beb132b679fa4499228d9e0312f"}, "downloads": -1, "filename": "sorted-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4d2a4789f19915d892d383b4f7a32b64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4965, "upload_time": "2019-12-11T12:55:41", "upload_time_iso_8601": "2019-12-11T12:55:41.192171Z", "url": "https://files.pythonhosted.org/packages/15/55/2696d4a55a22f0387bfb95f05a930cdc6e45d0a12e6ccb09a25d9d8bfad3/sorted-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b38facac1d7db9b8b15e1d956cfa5119", "sha256": "1bf5539a3c4216a7798b026e45d5d9e153dc7b19719b6645d91e7f2efaa27228"}, "downloads": -1, "filename": "sorted-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b38facac1d7db9b8b15e1d956cfa5119", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3938, "upload_time": "2019-12-11T12:55:43", "upload_time_iso_8601": "2019-12-11T12:55:43.315611Z", "url": "https://files.pythonhosted.org/packages/52/35/0607ac2246415a24dfc3a91136f8b6ccb2575c0a92a3e9c05df5003faa1d/sorted-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d2a4789f19915d892d383b4f7a32b64", "sha256": "5e3f19dd1e4fdf2a9c3c43800f8cdb7eb9eb3beb132b679fa4499228d9e0312f"}, "downloads": -1, "filename": "sorted-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4d2a4789f19915d892d383b4f7a32b64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4965, "upload_time": "2019-12-11T12:55:41", "upload_time_iso_8601": "2019-12-11T12:55:41.192171Z", "url": "https://files.pythonhosted.org/packages/15/55/2696d4a55a22f0387bfb95f05a930cdc6e45d0a12e6ccb09a25d9d8bfad3/sorted-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b38facac1d7db9b8b15e1d956cfa5119", "sha256": "1bf5539a3c4216a7798b026e45d5d9e153dc7b19719b6645d91e7f2efaa27228"}, "downloads": -1, "filename": "sorted-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b38facac1d7db9b8b15e1d956cfa5119", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3938, "upload_time": "2019-12-11T12:55:43", "upload_time_iso_8601": "2019-12-11T12:55:43.315611Z", "url": "https://files.pythonhosted.org/packages/52/35/0607ac2246415a24dfc3a91136f8b6ccb2575c0a92a3e9c05df5003faa1d/sorted-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:29 2020"}