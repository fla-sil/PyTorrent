{"info": {"author": "Annouar", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# pegass_auth\n> A tiny client to manage your Sellsy plateform using Python\n\nFrench Red Cross is currently using a tool named [Pegass](https://id.authentification.croix-rouge.fr/my.policy) to visualize, enroll to activities, monitor them and more... This application is carefully thought out, and the different views give you plenty options to display your data. However, my motivation was to extract Pegass data to analyze it and create some custom views. The application was not designed to let users get data out of the box (closed API, no CSV extract, ...). That's why I made this little module to help whoever wants to extract their data in a simple way through the Pegass API. :red_car: :red_car: :fire_engine: :fire_engine: :rotating_light: :rotating_light:\n\n### Features\n- Get authentication cookies to open Pegass API gate with your application credential\n- Create an abstraction for requesting the API\n\n\n## Installing\n```shell\n# Connect to your virtualenv\n$  workon projectenv\n\n# Use pip to install the package\n$  pip install pegass_auth\n```\n\nVerify now if the package as been successfully installed\n```shell\n$  python\n>> import pegass_auth # Should not raise exception\n```\n\n## Quick Start\n\n### Get authentication cookies to make requests out of the box\n\n```python\nimport os\nimport requests\nimport pegass_auth\n\nusername = os.environ['username']\npassword = os.environ['password']\n\nauth_cookies = pegass_auth.login(username, password)\n\n# When using 'requests' package\nr = requests.get('{}/crf/rest/gestiondesdroits'.format(pegass_auth.DEFAULT_PEGASS_URL), cookies=auth_cookies)\n\nif r.status_code == 200:\n    print(r.json())\nelse:\n    print('Request went wrong ! Status code returned : {}'.format(r.status_code))     \n```\n\n\n### Using package abstraction to make request\n\nThe package gives you two ways to make a request to Pegass API :\n- Using cookies :\n```python\nimport os\nimport pegass_auth as pegass\n\nauth_cookies = login(os.environ['username'], os.environ['password'])\nrules = pegass.request('crf/rest/gestiondesdroits', cookies=auth_cookies)\nprint(rules)\n```\n\n- Using credentials:\n```python\nimport os\nimport pegass_auth as pegass\n\nusername = os.environ['username']\npassword = os.environ['password']\nrules = pegass.request('crf/rest/gestiondesdroits', username=username, password=password)\nprint(rules)\n```\n**Note**: The last way to make request (the one with *username* and *password*) runs each time the ```login``` logic. Make *cookies* methods your first choice if you need to do multiple API requests.\n\nAll the previous codes prints the following response:\n```json\n{\n   'utilisateur':{\n      'id':'01XXXXXXXX',\n      'structure':{\n         'id':1XXX,\n         'typeStructure':'UL',\n         'libelle':'UNITE LOCALE DE XXXXXXX',\n         'libelleCourt':'XX',\n         'adresse':'XX XXXXXXXXXXXXXXXX XXXXXX XXXX XXXXXXXX',\n         'telephone':'X XX XX XX XX',\n         'mail':'ul.XXXXXXXXX@croix-rouge.fr',\n         'siteWeb':'XXXXXXXXXXXX.croix-rouge.fr/XXXXXXXX/',\n         'parent':{\n            'id':XX\n         },\n         'structureMenantActiviteList':[\n            {\n               'id':1XXX,\n               'libelle':'UNITE LOCALE DE XXXXXXX'\n            }\n         ]\n      },\n      'nom':'Foo',\n      'prenom':'Bar',\n      'actif':True,\n      'mineur':False\n   },\n   'structuresAdministrees':[\n\n   ]\n}\n```\n\n## Pegass API Endpoints\nI've started to do a reverse engineering on Pegass app to list the API endpoints I need in order to achieve my personal app.\n\n## Error handler\nTheir is no error handler implemented yet in the package.\n\n\n## Links\n\n- [Pegass](https://id.authentification.croix-rouge.fr/my.policy)\n- [pegass_auth issue tracker](https://github.com/Annouar/pegass_auth/issues)\n- [French Red Cross](https://www.croix-rouge.fr/)\n\n\n## License\n\n - **MIT** : http://opensource.org/licenses/MIT", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Annouar/pegass_auth", "keywords": "pegass croix rouge login authentication", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pegass-auth", "package_url": "https://pypi.org/project/pegass-auth/", "platform": "", "project_url": "https://pypi.org/project/pegass-auth/", "project_urls": {"Bug Reports": "https://github.com/Annouar/pegass_auth/issues", "Homepage": "https://github.com/Annouar/pegass_auth"}, "release_url": "https://pypi.org/project/pegass-auth/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "pegass_auth is a tiny client tool to help you make some HTTP request on Pegass", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pegass_auth</h1>\n<blockquote>\n<p>A tiny client to manage your Sellsy plateform using Python</p>\n</blockquote>\n<p>French Red Cross is currently using a tool named <a href=\"https://id.authentification.croix-rouge.fr/my.policy\" rel=\"nofollow\">Pegass</a> to visualize, enroll to activities, monitor them and more... This application is carefully thought out, and the different views give you plenty options to display your data. However, my motivation was to extract Pegass data to analyze it and create some custom views. The application was not designed to let users get data out of the box (closed API, no CSV extract, ...). That's why I made this little module to help whoever wants to extract their data in a simple way through the Pegass API. :red_car: :red_car: :fire_engine: :fire_engine: :rotating_light: :rotating_light:</p>\n<h3>Features</h3>\n<ul>\n<li>Get authentication cookies to open Pegass API gate with your application credential</li>\n<li>Create an abstraction for requesting the API</li>\n</ul>\n<h2>Installing</h2>\n<pre><span class=\"c1\"># Connect to your virtualenv</span>\n$  workon projectenv\n\n<span class=\"c1\"># Use pip to install the package</span>\n$  pip install pegass_auth\n</pre>\n<p>Verify now if the package as been successfully installed</p>\n<pre>$  python\n&gt;&gt; import pegass_auth <span class=\"c1\"># Should not raise exception</span>\n</pre>\n<h2>Quick Start</h2>\n<h3>Get authentication cookies to make requests out of the box</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pegass_auth</span>\n\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'password'</span><span class=\"p\">]</span>\n\n<span class=\"n\">auth_cookies</span> <span class=\"o\">=</span> <span class=\"n\">pegass_auth</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># When using 'requests' package</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">/crf/rest/gestiondesdroits'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pegass_auth</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PEGASS_URL</span><span class=\"p\">),</span> <span class=\"n\">cookies</span><span class=\"o\">=</span><span class=\"n\">auth_cookies</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">())</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Request went wrong ! Status code returned : </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">))</span>     \n</pre>\n<h3>Using package abstraction to make request</h3>\n<p>The package gives you two ways to make a request to Pegass API :</p>\n<ul>\n<li>Using cookies :</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pegass_auth</span> <span class=\"k\">as</span> <span class=\"nn\">pegass</span>\n\n<span class=\"n\">auth_cookies</span> <span class=\"o\">=</span> <span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">],</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'password'</span><span class=\"p\">])</span>\n<span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">pegass</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'crf/rest/gestiondesdroits'</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"o\">=</span><span class=\"n\">auth_cookies</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Using credentials:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pegass_auth</span> <span class=\"k\">as</span> <span class=\"nn\">pegass</span>\n\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'password'</span><span class=\"p\">]</span>\n<span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">pegass</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'crf/rest/gestiondesdroits'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong>: The last way to make request (the one with <em>username</em> and <em>password</em>) runs each time the <code>login</code> logic. Make <em>cookies</em> methods your first choice if you need to do multiple API requests.</p>\n<p>All the previous codes prints the following response:</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"err\">'utilisateur':{</span>\n      <span class=\"err\">'id':'01XXXXXXXX',</span>\n      <span class=\"err\">'structure':{</span>\n         <span class=\"err\">'id':1XXX,</span>\n         <span class=\"err\">'typeStructure':'UL',</span>\n         <span class=\"err\">'libelle':'UNITE</span> <span class=\"err\">LOCALE</span> <span class=\"err\">DE</span> <span class=\"err\">XXXXXXX',</span>\n         <span class=\"err\">'libelleCourt':'XX',</span>\n         <span class=\"err\">'adresse':'XX</span> <span class=\"err\">XXXXXXXXXXXXXXXX</span> <span class=\"err\">XXXXXX</span> <span class=\"err\">XXXX</span> <span class=\"err\">XXXXXXXX',</span>\n         <span class=\"err\">'telephone':'X</span> <span class=\"err\">XX</span> <span class=\"err\">XX</span> <span class=\"err\">XX</span> <span class=\"err\">XX',</span>\n         <span class=\"err\">'mail':'ul.XXXXXXXXX@croix-rouge.fr',</span>\n         <span class=\"err\">'siteWeb':'XXXXXXXXXXXX.croix-rouge.fr/XXXXXXXX/',</span>\n         <span class=\"err\">'parent':{</span>\n            <span class=\"err\">'id':XX</span>\n         <span class=\"p\">}</span><span class=\"err\">,</span>\n         <span class=\"err\">'structureMenantActiviteList':</span><span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n               <span class=\"err\">'id':1XXX,</span>\n               <span class=\"err\">'libelle':'UNITE</span> <span class=\"err\">LOCALE</span> <span class=\"err\">DE</span> <span class=\"err\">XXXXXXX'</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">]</span>\n      <span class=\"err\">},</span>\n      <span class=\"err\">'nom':'Foo',</span>\n      <span class=\"err\">'prenom':'Bar',</span>\n      <span class=\"err\">'actif':True,</span>\n      <span class=\"err\">'mineur':False</span>\n   <span class=\"err\">},</span>\n   <span class=\"err\">'structuresAdministrees':</span><span class=\"p\">[</span>\n\n   <span class=\"p\">]</span>\n<span class=\"err\">}</span>\n</pre>\n<h2>Pegass API Endpoints</h2>\n<p>I've started to do a reverse engineering on Pegass app to list the API endpoints I need in order to achieve my personal app.</p>\n<h2>Error handler</h2>\n<p>Their is no error handler implemented yet in the package.</p>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://id.authentification.croix-rouge.fr/my.policy\" rel=\"nofollow\">Pegass</a></li>\n<li><a href=\"https://github.com/Annouar/pegass_auth/issues\" rel=\"nofollow\">pegass_auth issue tracker</a></li>\n<li><a href=\"https://www.croix-rouge.fr/\" rel=\"nofollow\">French Red Cross</a></li>\n</ul>\n<h2>License</h2>\n<ul>\n<li><strong>MIT</strong> : <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">http://opensource.org/licenses/MIT</a></li>\n</ul>\n\n          </div>"}, "last_serial": 5293735, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e4446a318cda8b944316ff6056472dfd", "sha256": "389340c306246876d7cf155f9f8a72ee67464afae49493bfc6551bc1eb6543f7"}, "downloads": -1, "filename": "pegass_auth-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e4446a318cda8b944316ff6056472dfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3904, "upload_time": "2019-05-20T18:42:34", "upload_time_iso_8601": "2019-05-20T18:42:34.458787Z", "url": "https://files.pythonhosted.org/packages/29/cc/30b3c73a9601285391add77e58d1b3cba635a3fe95efa65232121b8b3b7b/pegass_auth-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e4446a318cda8b944316ff6056472dfd", "sha256": "389340c306246876d7cf155f9f8a72ee67464afae49493bfc6551bc1eb6543f7"}, "downloads": -1, "filename": "pegass_auth-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e4446a318cda8b944316ff6056472dfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3904, "upload_time": "2019-05-20T18:42:34", "upload_time_iso_8601": "2019-05-20T18:42:34.458787Z", "url": "https://files.pythonhosted.org/packages/29/cc/30b3c73a9601285391add77e58d1b3cba635a3fe95efa65232121b8b3b7b/pegass_auth-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:44 2020"}