{"info": {"author": "Jarry Shaw", "author_email": "jarryshaw@icloud.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Utilities"], "description": "# f2format\n\n[![PyPI - Downloads](https://pepy.tech/badge/f2format)](https://pepy.tech/count/f2format)\n[![PyPI - Version](https://img.shields.io/pypi/v/f2format.svg)](https://pypi.org/project/f2format)\n[![PyPI - Format](https://img.shields.io/pypi/format/f2format.svg)](https://pypi.org/project/f2format)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/f2format.svg)](https://pypi.org/project/f2format)\n\n[![Travis CI - Status](https://travis-ci.com/JarryShaw/f2format.svg)](https://travis-ci.org/JarryShaw/f2format)\n[![Codecov - Coverage](https://codecov.io/gh/JarryShaw/f2format/branch/master/graph/badge.svg)](https://codecov.io/gh/JarryShaw/f2format)\n[![License](https://img.shields.io/github/license/jarryshaw/f2format.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)\n[![LICENSE](https://img.shields.io/badge/license-Anti%20996-blue.svg)](https://github.com/996icu/996.ICU/blob/master/LICENSE)\n\n > Write *f-string* in Python 3.6 flavour, and let `f2format` worry about back-port issues :beer:\n\n&emsp; Since [PEP 498](https://www.python.org/dev/peps/pep-0498/), Python introduced\n*[f-string](https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals)*\nliterals in version __3.6__. Though released ever since\n[December 23, 2016](https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-0-final), Python\n3.6 is still not widely used as expected. For those who are now used to *f-string*s, `f2format`\nprovides an intelligent, yet imperfect, solution of a **backport compiler** by converting\n*f-string*s to `str.format` expressions, which guarantees you to always write *f-string*s in Python\n3.6 flavour then compile for compatibility later.\n\n&emsp; `f2format` is inspired and assisted by my good mate [@gousaiyang](https://github.com/gousaiyang).\nIt functions by tokenising and parsing Python code into multiple abstract syntax trees (AST),\nthrough which it shall synthesise and extract expressions from *f-string* literals, and then\nreassemble the original string using `str.format` method. Besides\n**[conversion](https://docs.python.org/3/library/string.html#format-string-syntax)** and\n**[format specification](https://docs.python.org/3/library/string.html#formatspec)**, `f2format`\nalso considered and resolved\n**[string concatenation](https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation)**.\nAlso, it always tries to maintain the original layout of source code, and accuracy of syntax.\n\n## Installation\n\n> Note that `f2format` only supports Python versions __since 3.3__ \ud83d\udc0d\n\n&emsp; For macOS users, `f2format` is now available through [Homebrew](https://brew.sh):\n\n```sh\nbrew tap jarryshaw/tap\nbrew install f2format\n# or simply, a one-liner\nbrew install jarryshaw/tap/f2format\n```\n\n&emsp; Simply run the following to install the current version from PyPI:\n\n```sh\npip install f2format\n```\n\n&emsp; Or install the latest version from the git repository:\n\n```sh\ngit clone https://github.com/JarryShaw/f2format.git\ncd f2format\npip install -e .\n# and to update at any time\ngit pull\n```\n\n## Basic Usage\n\n### CLI\n\n&emsp; It is fairly straightforward to use `f2format`:\n\n > context in `${...}` changes dynamically according to runtime environment\n\n```man\nusage: f2format [options] <python source files and folders...>\n\nConvert f-string to str.format for Python 3 compatibility.\n\npositional arguments:\n  SOURCE                python source files and folders to be converted (${CWD})\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -q, --quiet           run in quiet mode\n\narchive options:\n  duplicate original files in case there's any issue\n\n  -na, --no-archive     do not archive original files\n  -p PATH, --archive-path PATH\n                        path to archive original files (${CWD}/archive)\n\nconvert options:\n  compatibility configuration for none-unicode files\n\n  -c CODING, --encoding CODING\n                        encoding to open source files (${LOCALE_ENCODING})\n  -v VERSION, --python VERSION\n                        convert against Python version (${LATEST_VERSION})\n```\n\n&emsp; `f2format` will read then convert all *f-string* literals in every Python file under this\npath. In case there might be some problems with the conversion, `f2format` will duplicate all\noriginal files it is to modify into `archive` directory ahead of the process, if `-n` not set.\n\n&emsp; For instance, the code will be converted as follows.\n\n```python\n# the original code\nvar = f'foo{(1+2)*3:>5}bar{\"a\", \"b\"!r}boo'\n# after `f2format`\nvar = 'foo{:>5}bar{!r}boo'.format((1+2)*3, (\"a\", \"b\"))\n```\n\n### Docker\n\n > Well... it's not published to the Docker Hub yet ;)\n\n&emsp; Considering `f2format` may be used in scenerios where Python is not reachable.\nWe provide also a Docker image for those poor little guys.\n\n&emsp; See\n[`Dockerfile`](https://github.com/JarryShaw/f2format/blob/master/docker/Dockerfile) for more\ninformation.\n\n### Bundled Executable\n\n > Coming soooooooooooon...\n\n&emsp; For the worst case, we also provide bundled executables of `f2format`. In such case,\nyou may simply download it then, voil\u00e0, it's ready for you.\n\n&emsp; Special thanks to [PyInstaller](https://www.pyinstaller.org) \u2764\ufe0f\n\n## Developer Reference\n\n### Automator\n\n&emsp; [`make-demo.sh`](https://github.com/JarryShaw/f2format/blob/master/script/make-demo.sh) provides a\ndemo script, which may help integrate `f2format` in your development and distribution circle.\n\n > __NB__: `make-demo.sh` is not an integrated automation script. It should be revised by design.\n\n&emsp; It assumes\n\n- all source files in `/src` directory\n- using GitHub for repository management\n- having **release** branch under `/release` directory\n- already installed `f2format` and [`twine`](https://github.com/pypa/twine#twine)\n- permission to these files and folders granted\n\n&emsp; And it will\n\n- copy `setup.py` and `src` to `release` directory\n- run `f2format` for Python files under `release`\n- distribute to [PyPI](https://pypi.org) and [TestPyPI](https://test.pypi.org) using `twine`\n- upload to release branch on GitHub\n- upload original files to GitHub\n\n### Environments\n\n`f2format` currently supports three environment arguments:\n\n- `F2FORMAT_QUIET` -- run in quiet mode (same as `--quiet` option in CLI)\n- `F2FORMAT_VERSION` -- convert against Python version (same as `--python` option in CLI)\n- `F2FORMAT_ENCODING` -- encoding to open source files (same as `--encoding` option in CLI)\n\n### APIs\n\n#### `f2format` -- wrapper works for conversion\n\n```python\nf2format(filename)\n```\n\nArgs:\n\n- `filename` -- `str`, file to be converted\n\nEnvs:\n\n- `F2FORMAT_QUIET` -- run in quiet mode (same as `--quiet` option in CLI)\n- `F2FORMAT_ENCODING` -- encoding to open source files (same as `--encoding` option in CLI)\n- `F2FORMAT_VERSION`-- convert against Python version (same as `--python` option in CLI)\n\nRaises:\n\n- `ConvertError `-- when `parso.ParserSyntaxError` raised\n\n#### `convert` -- the main conversion process\n\n```python\nconvert(string, source='<unknown>')\n```\n\nArgs:\n\n- `string` -- `str`, context to be converted\n- `source` -- `str`, source of the context\n\nEnvs:\n\n- `F2FORMAT_VERSION`-- convert against Python version (same as `--python` option in CLI)\n\nReturns:\n\n- `str` -- converted string\n\nRaises:\n\n- `ConvertError `-- when `parso.ParserSyntaxError` raised\n\n#### `ConvertError` -- `f2format` internal exception\n\n```python\nclass ConvertError(SyntaxError):\n    pass\n```\n\n### Codec\n\n > NB: this project is now stalled, because I just cannot figure out how to play w/ codecs :)\n\n&emsp; [`f2format-codec`](https://github.com/JarryShaw/f2format-codec) registers a codec in Python\ninterpreter, which grants you the compatibility to write directly in Python 3.6 *f-string* syntax\neven through running with a previous version of Python.\n\n## Test\n\n&emsp; The current test samples are under [`/test`](https://github.com/JarryShaw/f2format/blob/master/test)\nfolder. `test_driver.py` is the main entry point for tests.\n\n&emsp; For unittests, see [`test.py`](https://github.com/JarryShaw/f2format/blob/master/share/test.py).\n\n## Known bugs\n\n&emsp; Since `f2format` is currently based on [`parso`](https://github.com/davidhalter/parso) project,\nit had encountered several compatibility and parsing issues.\n\n* ~~Parsing f-strings with nested format specifiers produces incorrect SyntaxError ([#74](https://github.com/davidhalter/parso/issues/74))~~\n  This issue has been resolved since `parso` version __0.5.0__.\n\n* Parsing f-strings with invalid quotes in expression part does not raise SyntaxError ([#86](https://github.com/davidhalter/parso/issues/86))\n\n* Parsing f-strings with seeming assignment expressions produces incorrect SyntaxError ([#87](https://github.com/davidhalter/parso/issues/87))\n\n## Contribution\n\n&emsp; Contributions are very welcome, especially fixing bugs and providing test cases, which\n[@gousaiyang](https://github.com/gousaiyang) is to help with, so to speak. Note that code must\nremain valid and reasonable.\n\n## See Also\n\n- [`babel`](https://github.com/jarryshaw/babel)\n- [`poseur`](https://github.com/jarryshaw/poseur)\n- [`walrus`](https://github.com/jarryshaw/walrus)\n- [`vermin`](https://github.com/netromdk/vermin)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JarryShaw/f2format", "keywords": "fstring format conversion", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "python-f2format", "package_url": "https://pypi.org/project/python-f2format/", "platform": "", "project_url": "https://pypi.org/project/python-f2format/", "project_urls": {"Homepage": "https://github.com/JarryShaw/f2format"}, "release_url": "https://pypi.org/project/python-f2format/0.8.4/", "requires_dist": ["parso (~=0.5.0)", "tbtrim (>=0.2.1)"], "requires_python": ">=3.3", "summary": "Back-port compiler for Python 3.6 f-string literals.", "version": "0.8.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>f2format</h1>\n<p><a href=\"https://pepy.tech/count/f2format\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/559280578e243e54e19d85f94e0cb864dfffe0fc/68747470733a2f2f706570792e746563682f62616467652f6632666f726d6174\"></a>\n<a href=\"https://pypi.org/project/f2format\" rel=\"nofollow\"><img alt=\"PyPI - Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/276f3d75e71f5bec195513a507b0e93b16bea676/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6632666f726d61742e737667\"></a>\n<a href=\"https://pypi.org/project/f2format\" rel=\"nofollow\"><img alt=\"PyPI - Format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1b23ae4d057a1009ae9eb2d15d8ac71a74ee49a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f6632666f726d61742e737667\"></a>\n<a href=\"https://pypi.org/project/f2format\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad2945b1a28f955e2cccba92e3882344e36cf5a7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6632666f726d61742e737667\"></a></p>\n<p><a href=\"https://travis-ci.org/JarryShaw/f2format\" rel=\"nofollow\"><img alt=\"Travis CI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7bdae044094c61dacfee35a0f84af46b5f568c25/68747470733a2f2f7472617669732d63692e636f6d2f4a61727279536861772f6632666f726d61742e737667\"></a>\n<a href=\"https://codecov.io/gh/JarryShaw/f2format\" rel=\"nofollow\"><img alt=\"Codecov - Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06c0d7ec726f949944391a4c721ace55dfcf9989/68747470733a2f2f636f6465636f762e696f2f67682f4a61727279536861772f6632666f726d61742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1703683219351409fe28a534abca4c6a140416ef/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a61727279736861772f6632666f726d61742e737667\"></a>\n<a href=\"https://github.com/996icu/996.ICU/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"LICENSE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/497459f5647e21d9f1011ef127da39a0f90d936f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d416e74692532303939362d626c75652e737667\"></a></p>\n<blockquote>\n<p>Write <em>f-string</em> in Python 3.6 flavour, and let <code>f2format</code> worry about back-port issues :beer:</p>\n</blockquote>\n<p>\u2003 Since <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"nofollow\">PEP 498</a>, Python introduced\n<em><a href=\"https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals\" rel=\"nofollow\">f-string</a></em>\nliterals in version <strong>3.6</strong>. Though released ever since\n<a href=\"https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-0-final\" rel=\"nofollow\">December 23, 2016</a>, Python\n3.6 is still not widely used as expected. For those who are now used to <em>f-string</em>s, <code>f2format</code>\nprovides an intelligent, yet imperfect, solution of a <strong>backport compiler</strong> by converting\n<em>f-string</em>s to <code>str.format</code> expressions, which guarantees you to always write <em>f-string</em>s in Python\n3.6 flavour then compile for compatibility later.</p>\n<p>\u2003 <code>f2format</code> is inspired and assisted by my good mate <a href=\"https://github.com/gousaiyang\" rel=\"nofollow\">@gousaiyang</a>.\nIt functions by tokenising and parsing Python code into multiple abstract syntax trees (AST),\nthrough which it shall synthesise and extract expressions from <em>f-string</em> literals, and then\nreassemble the original string using <code>str.format</code> method. Besides\n<strong><a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\" rel=\"nofollow\">conversion</a></strong> and\n<strong><a href=\"https://docs.python.org/3/library/string.html#formatspec\" rel=\"nofollow\">format specification</a></strong>, <code>f2format</code>\nalso considered and resolved\n<strong><a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation\" rel=\"nofollow\">string concatenation</a></strong>.\nAlso, it always tries to maintain the original layout of source code, and accuracy of syntax.</p>\n<h2>Installation</h2>\n<blockquote>\n<p>Note that <code>f2format</code> only supports Python versions <strong>since 3.3</strong> \ud83d\udc0d</p>\n</blockquote>\n<p>\u2003 For macOS users, <code>f2format</code> is now available through <a href=\"https://brew.sh\" rel=\"nofollow\">Homebrew</a>:</p>\n<pre>brew tap jarryshaw/tap\nbrew install f2format\n<span class=\"c1\"># or simply, a one-liner</span>\nbrew install jarryshaw/tap/f2format\n</pre>\n<p>\u2003 Simply run the following to install the current version from PyPI:</p>\n<pre>pip install f2format\n</pre>\n<p>\u2003 Or install the latest version from the git repository:</p>\n<pre>git clone https://github.com/JarryShaw/f2format.git\n<span class=\"nb\">cd</span> f2format\npip install -e .\n<span class=\"c1\"># and to update at any time</span>\ngit pull\n</pre>\n<h2>Basic Usage</h2>\n<h3>CLI</h3>\n<p>\u2003 It is fairly straightforward to use <code>f2format</code>:</p>\n<blockquote>\n<p>context in <code>${...}</code> changes dynamically according to runtime environment</p>\n</blockquote>\n<pre>usage: f2format [options] &lt;python source files and folders...&gt;\n\nConvert f-string to str.format for Python 3 compatibility.\n\npositional arguments:\n  SOURCE                python source files and folders to be converted (${CWD})\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -q, --quiet           run in quiet mode\n\narchive options:\n  duplicate original files in case there's any issue\n\n  -na, --no-archive     do not archive original files\n  -p PATH, --archive-path PATH\n                        path to archive original files (${CWD}/archive)\n\nconvert options:\n  compatibility configuration for none-unicode files\n\n  -c CODING, --encoding CODING\n                        encoding to open source files (${LOCALE_ENCODING})\n  -v VERSION, --python VERSION\n                        convert against Python version (${LATEST_VERSION})\n</pre>\n<p>\u2003 <code>f2format</code> will read then convert all <em>f-string</em> literals in every Python file under this\npath. In case there might be some problems with the conversion, <code>f2format</code> will duplicate all\noriginal files it is to modify into <code>archive</code> directory ahead of the process, if <code>-n</code> not set.</p>\n<p>\u2003 For instance, the code will be converted as follows.</p>\n<pre><span class=\"c1\"># the original code</span>\n<span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'foo</span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"si\">:</span><span class=\"s1\">&gt;5</span><span class=\"si\">}</span><span class=\"s1\">bar</span><span class=\"si\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"si\">!r}</span><span class=\"s1\">boo'</span>\n<span class=\"c1\"># after `f2format`</span>\n<span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"s1\">'foo</span><span class=\"si\">{:&gt;5}</span><span class=\"s1\">bar</span><span class=\"si\">{!r}</span><span class=\"s1\">boo'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">))</span>\n</pre>\n<h3>Docker</h3>\n<blockquote>\n<p>Well... it's not published to the Docker Hub yet ;)</p>\n</blockquote>\n<p>\u2003 Considering <code>f2format</code> may be used in scenerios where Python is not reachable.\nWe provide also a Docker image for those poor little guys.</p>\n<p>\u2003 See\n<a href=\"https://github.com/JarryShaw/f2format/blob/master/docker/Dockerfile\" rel=\"nofollow\"><code>Dockerfile</code></a> for more\ninformation.</p>\n<h3>Bundled Executable</h3>\n<blockquote>\n<p>Coming soooooooooooon...</p>\n</blockquote>\n<p>\u2003 For the worst case, we also provide bundled executables of <code>f2format</code>. In such case,\nyou may simply download it then, voil\u00e0, it's ready for you.</p>\n<p>\u2003 Special thanks to <a href=\"https://www.pyinstaller.org\" rel=\"nofollow\">PyInstaller</a> \u2764\ufe0f</p>\n<h2>Developer Reference</h2>\n<h3>Automator</h3>\n<p>\u2003 <a href=\"https://github.com/JarryShaw/f2format/blob/master/script/make-demo.sh\" rel=\"nofollow\"><code>make-demo.sh</code></a> provides a\ndemo script, which may help integrate <code>f2format</code> in your development and distribution circle.</p>\n<blockquote>\n<p><strong>NB</strong>: <code>make-demo.sh</code> is not an integrated automation script. It should be revised by design.</p>\n</blockquote>\n<p>\u2003 It assumes</p>\n<ul>\n<li>all source files in <code>/src</code> directory</li>\n<li>using GitHub for repository management</li>\n<li>having <strong>release</strong> branch under <code>/release</code> directory</li>\n<li>already installed <code>f2format</code> and <a href=\"https://github.com/pypa/twine#twine\" rel=\"nofollow\"><code>twine</code></a></li>\n<li>permission to these files and folders granted</li>\n</ul>\n<p>\u2003 And it will</p>\n<ul>\n<li>copy <code>setup.py</code> and <code>src</code> to <code>release</code> directory</li>\n<li>run <code>f2format</code> for Python files under <code>release</code></li>\n<li>distribute to <a href=\"https://pypi.org\" rel=\"nofollow\">PyPI</a> and <a href=\"https://test.pypi.org\" rel=\"nofollow\">TestPyPI</a> using <code>twine</code></li>\n<li>upload to release branch on GitHub</li>\n<li>upload original files to GitHub</li>\n</ul>\n<h3>Environments</h3>\n<p><code>f2format</code> currently supports three environment arguments:</p>\n<ul>\n<li><code>F2FORMAT_QUIET</code> -- run in quiet mode (same as <code>--quiet</code> option in CLI)</li>\n<li><code>F2FORMAT_VERSION</code> -- convert against Python version (same as <code>--python</code> option in CLI)</li>\n<li><code>F2FORMAT_ENCODING</code> -- encoding to open source files (same as <code>--encoding</code> option in CLI)</li>\n</ul>\n<h3>APIs</h3>\n<h4><code>f2format</code> -- wrapper works for conversion</h4>\n<pre><span class=\"n\">f2format</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><code>filename</code> -- <code>str</code>, file to be converted</li>\n</ul>\n<p>Envs:</p>\n<ul>\n<li><code>F2FORMAT_QUIET</code> -- run in quiet mode (same as <code>--quiet</code> option in CLI)</li>\n<li><code>F2FORMAT_ENCODING</code> -- encoding to open source files (same as <code>--encoding</code> option in CLI)</li>\n<li><code>F2FORMAT_VERSION</code>-- convert against Python version (same as <code>--python</code> option in CLI)</li>\n</ul>\n<p>Raises:</p>\n<ul>\n<li><code>ConvertError</code>-- when <code>parso.ParserSyntaxError</code> raised</li>\n</ul>\n<h4><code>convert</code> -- the main conversion process</h4>\n<pre><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'&lt;unknown&gt;'</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><code>string</code> -- <code>str</code>, context to be converted</li>\n<li><code>source</code> -- <code>str</code>, source of the context</li>\n</ul>\n<p>Envs:</p>\n<ul>\n<li><code>F2FORMAT_VERSION</code>-- convert against Python version (same as <code>--python</code> option in CLI)</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li><code>str</code> -- converted string</li>\n</ul>\n<p>Raises:</p>\n<ul>\n<li><code>ConvertError</code>-- when <code>parso.ParserSyntaxError</code> raised</li>\n</ul>\n<h4><code>ConvertError</code> -- <code>f2format</code> internal exception</h4>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ConvertError</span><span class=\"p\">(</span><span class=\"ne\">SyntaxError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h3>Codec</h3>\n<blockquote>\n<p>NB: this project is now stalled, because I just cannot figure out how to play w/ codecs :)</p>\n</blockquote>\n<p>\u2003 <a href=\"https://github.com/JarryShaw/f2format-codec\" rel=\"nofollow\"><code>f2format-codec</code></a> registers a codec in Python\ninterpreter, which grants you the compatibility to write directly in Python 3.6 <em>f-string</em> syntax\neven through running with a previous version of Python.</p>\n<h2>Test</h2>\n<p>\u2003 The current test samples are under <a href=\"https://github.com/JarryShaw/f2format/blob/master/test\" rel=\"nofollow\"><code>/test</code></a>\nfolder. <code>test_driver.py</code> is the main entry point for tests.</p>\n<p>\u2003 For unittests, see <a href=\"https://github.com/JarryShaw/f2format/blob/master/share/test.py\" rel=\"nofollow\"><code>test.py</code></a>.</p>\n<h2>Known bugs</h2>\n<p>\u2003 Since <code>f2format</code> is currently based on <a href=\"https://github.com/davidhalter/parso\" rel=\"nofollow\"><code>parso</code></a> project,\nit had encountered several compatibility and parsing issues.</p>\n<ul>\n<li>\n<p><del>Parsing f-strings with nested format specifiers produces incorrect SyntaxError (<a href=\"https://github.com/davidhalter/parso/issues/74\" rel=\"nofollow\">#74</a>)</del>\nThis issue has been resolved since <code>parso</code> version <strong>0.5.0</strong>.</p>\n</li>\n<li>\n<p>Parsing f-strings with invalid quotes in expression part does not raise SyntaxError (<a href=\"https://github.com/davidhalter/parso/issues/86\" rel=\"nofollow\">#86</a>)</p>\n</li>\n<li>\n<p>Parsing f-strings with seeming assignment expressions produces incorrect SyntaxError (<a href=\"https://github.com/davidhalter/parso/issues/87\" rel=\"nofollow\">#87</a>)</p>\n</li>\n</ul>\n<h2>Contribution</h2>\n<p>\u2003 Contributions are very welcome, especially fixing bugs and providing test cases, which\n<a href=\"https://github.com/gousaiyang\" rel=\"nofollow\">@gousaiyang</a> is to help with, so to speak. Note that code must\nremain valid and reasonable.</p>\n<h2>See Also</h2>\n<ul>\n<li><a href=\"https://github.com/jarryshaw/babel\" rel=\"nofollow\"><code>babel</code></a></li>\n<li><a href=\"https://github.com/jarryshaw/poseur\" rel=\"nofollow\"><code>poseur</code></a></li>\n<li><a href=\"https://github.com/jarryshaw/walrus\" rel=\"nofollow\"><code>walrus</code></a></li>\n<li><a href=\"https://github.com/netromdk/vermin\" rel=\"nofollow\"><code>vermin</code></a></li>\n</ul>\n\n          </div>"}, "last_serial": 6167140, "releases": {"0.8.4": [{"comment_text": "", "digests": {"md5": "e7cd905944fa6fa4238199a78dc351da", "sha256": "0b331dd8c961b88d424eb89abf5b116f9fa2f3d421f9f7f4bbb524202b05ff28"}, "downloads": -1, "filename": "python_f2format-0.8.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e7cd905944fa6fa4238199a78dc351da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 13714, "upload_time": "2019-11-20T06:40:36", "upload_time_iso_8601": "2019-11-20T06:40:36.025194Z", "url": "https://files.pythonhosted.org/packages/6e/88/e61f7287243c23e9e9df9174f3d501138687556ed6327f922336d5e97454/python_f2format-0.8.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5944c2db1a410402253936dd0e324aff", "sha256": "c35e75b0051a01ce52cfe3eca0a4606b7e3fa12ed363357908a377e747877b2c"}, "downloads": -1, "filename": "python-f2format-0.8.4.tar.gz", "has_sig": false, "md5_digest": "5944c2db1a410402253936dd0e324aff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 15266, "upload_time": "2019-11-20T06:40:38", "upload_time_iso_8601": "2019-11-20T06:40:38.504565Z", "url": "https://files.pythonhosted.org/packages/61/4c/39b6a270d6c908aafdce6a631639c462bd67b84f5f20800a1b4ec5359a4a/python-f2format-0.8.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e7cd905944fa6fa4238199a78dc351da", "sha256": "0b331dd8c961b88d424eb89abf5b116f9fa2f3d421f9f7f4bbb524202b05ff28"}, "downloads": -1, "filename": "python_f2format-0.8.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e7cd905944fa6fa4238199a78dc351da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 13714, "upload_time": "2019-11-20T06:40:36", "upload_time_iso_8601": "2019-11-20T06:40:36.025194Z", "url": "https://files.pythonhosted.org/packages/6e/88/e61f7287243c23e9e9df9174f3d501138687556ed6327f922336d5e97454/python_f2format-0.8.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5944c2db1a410402253936dd0e324aff", "sha256": "c35e75b0051a01ce52cfe3eca0a4606b7e3fa12ed363357908a377e747877b2c"}, "downloads": -1, "filename": "python-f2format-0.8.4.tar.gz", "has_sig": false, "md5_digest": "5944c2db1a410402253936dd0e324aff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 15266, "upload_time": "2019-11-20T06:40:38", "upload_time_iso_8601": "2019-11-20T06:40:38.504565Z", "url": "https://files.pythonhosted.org/packages/61/4c/39b6a270d6c908aafdce6a631639c462bd67b84f5f20800a1b4ec5359a4a/python-f2format-0.8.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:43 2020"}