{"info": {"author": "hukkinj1", "author_email": "hukkinj1@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules", "Typing :: Typed"], "description": "[![Build Status](https://travis-ci.com/hukkinj1/typenv.svg?branch=master)](https://travis-ci.com/hukkinj1/typenv)\n[![codecov.io](https://codecov.io/gh/hukkinj1/typenv/branch/master/graph/badge.svg)](https://codecov.io/gh/hukkinj1/typenv)\n[![PyPI version](https://badge.fury.io/py/typenv.svg)](https://badge.fury.io/py/typenv)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n# typenv\n\n<!--- Don't edit the version line below manually. Let bump2version do it for you. -->\n> Version 0.1.3\n\n> Typed environment variable parsing for Python\n\n## Background\nTypenv does environment variable parsing with an API almost identical to the excellent [environs](https://github.com/sloria/environs). There are a few reasons why typenv might be preferred:\n- Type annotated typecast functions: type checkers are able to understand types of parsed environment variables.\n- More flexible prefix manipulation of environment variable names.\n- Validation of environment variable names.\n- Optional automatic uppercasing of environment variable names.\n- Ability to generate a .env.example that shows expected types of environment variables.\n- Less dependencies. No [marshmallow](https://github.com/marshmallow-code/marshmallow) required.\n\n## Installing\nInstalling from PyPI repository (https://pypi.org/project/typenv):\n```bash\npip install typenv\n```\n\n## Usage\n\n### Basics\nSet environment variables:\n```bash\nexport NAME='Harry Potter'\nexport AGE=14\nexport IS_WIZARD=true\nexport PATRONUM_SUCCESS_RATE=0.92\nexport BANK_BALANCE=134599.01\nexport LUCKY_NUMBERS=7,3,11\nexport EXTRA_DETAILS='{\"friends\": [\"Hermione\", \"Ron\"]}'\n```\n\nParse the values in Python:\n```python\nfrom typenv import Env\n\nenv = Env()\n\nNAME = env.str(\"NAME\")  # => \"Harry Potter\"\nAGE = env.int(\"AGE\")  # => 14\nIS_WIZARD = env.bool(\"IS_WIZARD\")  # => True\nPATRONUM_SUCCESS_RATE = env.float(\"PATRONUM_SUCCESS_RATE\")  # => 0.92\nBANK_BALANCE = env.decimal(\"BANK_BALANCE\")  # => decimal.Decimal(\"134599.01\")\nLUCKY_NUMBERS = env.list(\"LUCKY_NUMBERS\", subcast=int)  # => [7, 3, 11]\nEXTRA_DETAILS = env.json(\"EXTRA_DETAILS\")  # => {\"friends\": [\"Hermione\", \"Ron\"]}\n\n# Optional settings must have a default value\nIS_DEATH_EATER = env.bool(\"IS_DEATH_EATER\", default=False)  # => False\n```\n\n### Supported types\nThe types supported by typenv are:\n* `env.str`\n* `env.int`\n* `env.bool`\n* `env.float`\n* `env.decimal`\n* `env.json`\n* `env.list`\n    * Takes a subcast argument for casting list items to one of `str`, `int` , `bool`, `float` or `decimal.Decimal`\n\n### Default values\nTODO:\n\n### Name prefixes\nTODO:\n\n### Name uppercasing\nTODO:\n\n### Validation\nTODO:\n\n### Reading from a `.env` file\nTODO:\n\n### Dumping parsed values\nTODO:\n\n## Acknowledgments\nThe public API of this library is almost an exact copy of [environs](https://github.com/sloria/environs), which is based on [envparse](https://github.com/rconradharris/envparse) and [django-environ](https://github.com/joke2k/django-environ). Credit for the interface goes to the authors of those libraries.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hukkinj1/typenv", "keywords": "environment variables typed configuration", "license": "", "maintainer": "", "maintainer_email": "", "name": "typenv", "package_url": "https://pypi.org/project/typenv/", "platform": "", "project_url": "https://pypi.org/project/typenv/", "project_urls": {"Changelog": "https://github.com/hukkinj1/typenv/blob/master/CHANGELOG.md", "Homepage": "https://github.com/hukkinj1/typenv"}, "release_url": "https://pypi.org/project/typenv/0.1.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Typed environment variable parsing for Python", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/hukkinj1/typenv\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf9360d607be6e97daaded3c269152ca9c204f09/68747470733a2f2f7472617669732d63692e636f6d2f68756b6b696e6a312f747970656e762e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/hukkinj1/typenv\" rel=\"nofollow\"><img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4eb0434c6c5d4aefaadcc95cbdff8a7d182dde2/68747470733a2f2f636f6465636f762e696f2f67682f68756b6b696e6a312f747970656e762f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/typenv\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3b9b9201c663c1582d7405431479a4a83b1ee18/68747470733a2f2f62616467652e667572792e696f2f70792f747970656e762e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h1>typenv</h1>\n\n<blockquote>\n<p>Version 0.1.3</p>\n</blockquote>\n<blockquote>\n<p>Typed environment variable parsing for Python</p>\n</blockquote>\n<h2>Background</h2>\n<p>Typenv does environment variable parsing with an API almost identical to the excellent <a href=\"https://github.com/sloria/environs\" rel=\"nofollow\">environs</a>. There are a few reasons why typenv might be preferred:</p>\n<ul>\n<li>Type annotated typecast functions: type checkers are able to understand types of parsed environment variables.</li>\n<li>More flexible prefix manipulation of environment variable names.</li>\n<li>Validation of environment variable names.</li>\n<li>Optional automatic uppercasing of environment variable names.</li>\n<li>Ability to generate a .env.example that shows expected types of environment variables.</li>\n<li>Less dependencies. No <a href=\"https://github.com/marshmallow-code/marshmallow\" rel=\"nofollow\">marshmallow</a> required.</li>\n</ul>\n<h2>Installing</h2>\n<p>Installing from PyPI repository (<a href=\"https://pypi.org/project/typenv\" rel=\"nofollow\">https://pypi.org/project/typenv</a>):</p>\n<pre>pip install typenv\n</pre>\n<h2>Usage</h2>\n<h3>Basics</h3>\n<p>Set environment variables:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">NAME</span><span class=\"o\">=</span><span class=\"s1\">'Harry Potter'</span>\n<span class=\"nb\">export</span> <span class=\"nv\">AGE</span><span class=\"o\">=</span><span class=\"m\">14</span>\n<span class=\"nb\">export</span> <span class=\"nv\">IS_WIZARD</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PATRONUM_SUCCESS_RATE</span><span class=\"o\">=</span><span class=\"m\">0</span>.92\n<span class=\"nb\">export</span> <span class=\"nv\">BANK_BALANCE</span><span class=\"o\">=</span><span class=\"m\">134599</span>.01\n<span class=\"nb\">export</span> <span class=\"nv\">LUCKY_NUMBERS</span><span class=\"o\">=</span><span class=\"m\">7</span>,3,11\n<span class=\"nb\">export</span> <span class=\"nv\">EXTRA_DETAILS</span><span class=\"o\">=</span><span class=\"s1\">'{\"friends\": [\"Hermione\", \"Ron\"]}'</span>\n</pre>\n<p>Parse the values in Python:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typenv</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n\n<span class=\"n\">NAME</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">(</span><span class=\"s2\">\"NAME\"</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; \"Harry Potter\"</span>\n<span class=\"n\">AGE</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">(</span><span class=\"s2\">\"AGE\"</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; 14</span>\n<span class=\"n\">IS_WIZARD</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">(</span><span class=\"s2\">\"IS_WIZARD\"</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; True</span>\n<span class=\"n\">PATRONUM_SUCCESS_RATE</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"s2\">\"PATRONUM_SUCCESS_RATE\"</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; 0.92</span>\n<span class=\"n\">BANK_BALANCE</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">decimal</span><span class=\"p\">(</span><span class=\"s2\">\"BANK_BALANCE\"</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; decimal.Decimal(\"134599.01\")</span>\n<span class=\"n\">LUCKY_NUMBERS</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"s2\">\"LUCKY_NUMBERS\"</span><span class=\"p\">,</span> <span class=\"n\">subcast</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; [7, 3, 11]</span>\n<span class=\"n\">EXTRA_DETAILS</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"s2\">\"EXTRA_DETAILS\"</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; {\"friends\": [\"Hermione\", \"Ron\"]}</span>\n\n<span class=\"c1\"># Optional settings must have a default value</span>\n<span class=\"n\">IS_DEATH_EATER</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">(</span><span class=\"s2\">\"IS_DEATH_EATER\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; False</span>\n</pre>\n<h3>Supported types</h3>\n<p>The types supported by typenv are:</p>\n<ul>\n<li><code>env.str</code></li>\n<li><code>env.int</code></li>\n<li><code>env.bool</code></li>\n<li><code>env.float</code></li>\n<li><code>env.decimal</code></li>\n<li><code>env.json</code></li>\n<li><code>env.list</code>\n<ul>\n<li>Takes a subcast argument for casting list items to one of <code>str</code>, <code>int</code> , <code>bool</code>, <code>float</code> or <code>decimal.Decimal</code></li>\n</ul>\n</li>\n</ul>\n<h3>Default values</h3>\n<p>TODO:</p>\n<h3>Name prefixes</h3>\n<p>TODO:</p>\n<h3>Name uppercasing</h3>\n<p>TODO:</p>\n<h3>Validation</h3>\n<p>TODO:</p>\n<h3>Reading from a <code>.env</code> file</h3>\n<p>TODO:</p>\n<h3>Dumping parsed values</h3>\n<p>TODO:</p>\n<h2>Acknowledgments</h2>\n<p>The public API of this library is almost an exact copy of <a href=\"https://github.com/sloria/environs\" rel=\"nofollow\">environs</a>, which is based on <a href=\"https://github.com/rconradharris/envparse\" rel=\"nofollow\">envparse</a> and <a href=\"https://github.com/joke2k/django-environ\" rel=\"nofollow\">django-environ</a>. Credit for the interface goes to the authors of those libraries.</p>\n\n          </div>"}, "last_serial": 7091693, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2d9d8c9961cbe93771950c4a0853251c", "sha256": "056384ff7b666d64edefb01bd04687308d77487585703a029b1564dd5adc2cae"}, "downloads": -1, "filename": "typenv-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2d9d8c9961cbe93771950c4a0853251c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3690, "upload_time": "2019-12-13T01:01:02", "upload_time_iso_8601": "2019-12-13T01:01:02.778493Z", "url": "https://files.pythonhosted.org/packages/85/da/7f78c7cc812caabdd35e4ba1e9c31cd171e1919853e76eb946e148730d82/typenv-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "2908b64bfb752a40361ac5650e2e6828", "sha256": "0f6c10a17278179d810e7ad9d0cc6241860188a82a54400020282e5db7a07958"}, "downloads": -1, "filename": "typenv-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2908b64bfb752a40361ac5650e2e6828", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3588, "upload_time": "2019-12-13T15:51:50", "upload_time_iso_8601": "2019-12-13T15:51:50.634374Z", "url": "https://files.pythonhosted.org/packages/cb/17/5dbf9965780add26c215b9e13ec28b16ccf5b1596894325565028e8f3013/typenv-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "48e720719f41ab3a7298a9575eeb351c", "sha256": "a439a4259918aece2ac0cd558d7cf40246714c224daca51783e657b0be55ffe1"}, "downloads": -1, "filename": "typenv-0.0.3.tar.gz", "has_sig": false, "md5_digest": "48e720719f41ab3a7298a9575eeb351c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4850, "upload_time": "2019-12-15T19:21:46", "upload_time_iso_8601": "2019-12-15T19:21:46.423888Z", "url": "https://files.pythonhosted.org/packages/f1/1b/bc5ba438489b311e1929f32d64ae9f2bead8b858c946ef7a6ed53165c118/typenv-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b557b5aa3243b6179ee7c586a8036975", "sha256": "c5adb7451100e2aec96f742102a65232622d9f9a0b27d75a3d9569909472cadb"}, "downloads": -1, "filename": "typenv-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b557b5aa3243b6179ee7c586a8036975", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5268, "upload_time": "2020-01-15T15:19:51", "upload_time_iso_8601": "2020-01-15T15:19:51.561895Z", "url": "https://files.pythonhosted.org/packages/7d/db/a28273e03b0d485cbd9a75c97a38903b3f71d3aee24b60d2caf496835835/typenv-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "c6417bc3be05ba909a2857332171c049", "sha256": "18a7df825be58818385978dc8cf95c83e9ab9fa74e970a34758a3ed9ec820455"}, "downloads": -1, "filename": "typenv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c6417bc3be05ba909a2857332171c049", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6201, "upload_time": "2020-03-27T14:32:16", "upload_time_iso_8601": "2020-03-27T14:32:16.663883Z", "url": "https://files.pythonhosted.org/packages/8b/cf/4fbf5fee6c873ceaa08c6a73bff8c0166e6d15e9b3d7de03bfdba2b0998a/typenv-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "754be22877e7d0e0041c34dee22e793c", "sha256": "ad9fa7741b5ff2917d2ea3c42ad7447c2d79ff07838cce53534896a69b4c2447"}, "downloads": -1, "filename": "typenv-0.1.1.tar.gz", "has_sig": false, "md5_digest": "754be22877e7d0e0041c34dee22e793c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6241, "upload_time": "2020-04-02T13:27:49", "upload_time_iso_8601": "2020-04-02T13:27:49.362218Z", "url": "https://files.pythonhosted.org/packages/ac/45/d428d4ee780376759fed4fb43b7359cdb453c4e1f82a0ef5dbc5232d09e7/typenv-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d064ffc206def2cbb6d398bce8907398", "sha256": "ccac168192ab5910c68cc8039f02090a93bfa9842f6ddb3f1af84ac58e7d9cbe"}, "downloads": -1, "filename": "typenv-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d064ffc206def2cbb6d398bce8907398", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6897, "upload_time": "2020-04-23T10:20:56", "upload_time_iso_8601": "2020-04-23T10:20:56.087446Z", "url": "https://files.pythonhosted.org/packages/68/02/3be6d2bd3f6653e56a82f06ff0c5d71a4fcf2491810c76d8e5ba41acda23/typenv-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8151f04c355439eb46275302daafed0e", "sha256": "be17756c6481e34b5902e0397d2d357739abade329dcc5da055d1f36ef9690d4"}, "downloads": -1, "filename": "typenv-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8151f04c355439eb46275302daafed0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6984, "upload_time": "2020-04-24T10:50:23", "upload_time_iso_8601": "2020-04-24T10:50:23.533737Z", "url": "https://files.pythonhosted.org/packages/e7/33/e65400366967e1dca62efa25c8c9a903dcb5552a86ede0376a2541784cab/typenv-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8151f04c355439eb46275302daafed0e", "sha256": "be17756c6481e34b5902e0397d2d357739abade329dcc5da055d1f36ef9690d4"}, "downloads": -1, "filename": "typenv-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8151f04c355439eb46275302daafed0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6984, "upload_time": "2020-04-24T10:50:23", "upload_time_iso_8601": "2020-04-24T10:50:23.533737Z", "url": "https://files.pythonhosted.org/packages/e7/33/e65400366967e1dca62efa25c8c9a903dcb5552a86ede0376a2541784cab/typenv-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:46 2020"}