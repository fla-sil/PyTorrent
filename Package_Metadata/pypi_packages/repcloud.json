{"info": {"author": "Federico Campoli", "author_email": "the4thdoctor.gallifrey@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database :: Database Engines/Servers", "Topic :: Other/Nonlisted Topic"], "description": "repcloud\n------------------------------\n.. image:: https://img.shields.io/github/issues/the4thdoctor/repcloud\n\t\t:alt: GitHub issues\n\t\t:target: https://github.com/the4thdoctor/repcloud/issues\n\n.. image:: https://img.shields.io/github/forks/the4thdoctor/repcloud\n\t\t:alt: GitHub forks\n\t\t:target: https://github.com/the4thdoctor/repcloud/network\n\n.. image:: https://img.shields.io/badge/License-PostgreSQL-blue\n\t\t:target: https://github.com/the4thdoctor/repcloud/issues\n\n.. image:: https://img.shields.io/github/release/the4thdoctor/repcloud\n\t\t:target: https://github.com/the4thdoctor/repcloud/release\n\n.. image:: https://img.shields.io/pypi/dm/repcloud\n    :target: https://pypi.org/project/repcloud\n\n\nrepcloud is a repacker for PostgreSQL tables. Unlikely pgrepack there's no need for extension or external libraries.\n\nThe procedure can repack the tables using a similar strategy like pgrepack, but without the physical file swap.\n\nThis allow the procedure to be executed on an environment where it is not possible, to install external libraries, or\nthere is no super user access (e.g. cloud hosted databases, hence the name).\n\nWhen repacking the process creates a copy of the original table and using a select insert copies the existing data into the new relation.\nA trigger on the original table stores the data changes for which are replayed on the new one before attempting the swap.\n\nAll the existing indices, foreign keys, and referencing foreign keys are created before the swap.\nViews and materialised views referencing the repacked table are dropped and created as well.\n\nAcknowledgement\n...................................\nCoding repcloud has been possible thanks to the sponsorhip of `Cleo AI. https://www.meetcleo.com/ <https://www.meetcleo.com/>`_ \n\n.. image:: https://raw.githubusercontent.com/the4thdoctor/repcloud/master/images/cleo_logo.png\n        :target: https://www.meetcleo.com/\n        :scale: 30 %\n\n\nConfiguration\n...................................\n\nThe script, which executes the repack, is rpcl. At its first execution the it creates a directory in the user's home named .repcloud\nUnder this directory there are three other subfolders.\n\n.repcloud/logs where the procedure's logs are stored\n.repcloud/pid where the procedure's pid file is stored\n.repcloud/config where the configurations are stored.\nTHe file config-example.toml is copied into the the folder ./replcoud/config. It is a template for the configuration.\n\nthe command line rpcl accepts the following options:\n\n* --config specifies the config file to use in .repcloud/config. If omitted tje defaults configuration default.toml will be used\n* --connection specifies which connection to use within the configuration file. if omitted any connection is used for repacking\n* --debug forces the process in foreground with log sent both, to file and console\n* --start-replay starts the replay_data process as soon as the prepare_repack is finished. It applies only to prepare_repack.\n\nWithout debug and with the log_dest set to file, the process starts in background.\n\nrpcl accepts the following commands\n\n* show_connections shows the connections defined within the configuration file\n* create_schema creates the repack helper schemas in the target database\n* drop_schema drops the repack helper schemas from the target database. if any table failed the repack, its copy is dropped as well\n* repack_tables repacks the tables listed within the connection\n* prepare_repack prepares the tables for the repack, creates the new table, copies the data, and builds the indices. It stops before the swap.\n* abort_repack cancel any prepared table for repack  and resets the status of any table  left in failed or in progress status. The logging triggers, the log table and the copy table if present are dropped  by the command.\n* replay_data starts a replay data daemon. Useful to avoid a big lag to clear up between the prepare_repack and the final swap. It can be started automatically at the end of prepare repack with the option --start-replay\n* stop_prepare terminates the background process of prepare_repack\n* stop_repack terminates the background process of repack_tables\n* stop_replay  terminates the background process of replay_data\n\nPlease note that prepare_repack requires much more space than repack_tables because all tables are copied and prepared for the repack instead of repacking and dropping\nthem one by one.\n\n\nIn the configuration file the notifier and notifier.email sections allow to setup an email notification, which is triggered when the repack or prepare repack process is complete.\n\nFillfactor\n+++++++++++++++\nThe tool supports the **fillfactor** setup for the repacked tables. This is possible using a specific configuration file  stored in the directory *~/.repcloud/config/table_conf*\n\nThe file describing the storage settings must be named after the configuration and the connection which the settings apply in the form *<configuration>_<connection>.toml*.\n\nFor example, if we are using the configuration *default.toml* where there is the connection *repack* the table configuration file's name should be \n*default_repack.toml* \n\nIf the table settings file is not present then the default values are used.\n\nInside the directory *~/.repcloud/config/table_conf* there is an example file to help the configuration.\n\nThe configuration at moment supports only **fillfactor** as storage parameter.\n\nA global fillfactor which applies to any table in the database can be set under the section **[storage]**.\n\nSchema wide fillfactor is supported adding the value under the section **[storage.schemaname]**.\n\nFillfactor for tables can be set using the section named after the schema and the table **[storage.schemaname.tablename]**.\n\nThe example configuration file sets the fillfactor:\n\n  * for all the tables in the database to 100\n  * for all the tables in the schema foo to 80\n  * for the table foo.bar to 30\n\n\n::\n\n    #table configuration example\n    # storage data. currently only fillfactor is allowed\n\n    #set the fillfactor for all the tables \n    [storage]\n    fillfactor = 100 \n\n    #sets the fillfactor for all the tables in the schema foo\n    [storage.foo]\n    fillfactor = 80 \n\n    #set the fillfactor for the table foo.bar\n    [storage.foo.bar]\n    fillfactor = 30 \n\nCleanup json/jsonb\n++++++++++++++++++++++++++++++++\n\nIn the table's configuration file it's possible to specify whether to cleanup json/jsonb keys with null keys.\nIt's possible to remove jsonb keys entirely but this applies only to the data type jsonb.\nThe table's configuration file provides both examples.\n\n::\n\n\t[public.foobar]\n\t#cleanup_nulls and remove_keys for the same field are  currently mutually exclusive with cleanup_nulls taking the precedence\n\t#strip nulls from a json/jsonb field\n\tfoo.cleanup_nulls = true\n\n\t#filtering data, based on the key currently only jsonb is supported\n\tbar.remove_keys = [ \"key1\" ]\n\nExample files\n++++++++++++++++++++++++++++++++\n\n\nExample configuration file: config-example.toml_.\n\n.. _config-example.toml: https://github.com/the4thdoctor/repcloud/blob/master/repcloud/config/config-example.toml\n\n\nExample table setup for configuration **config-example** and connection **repack**: config-example_repack.toml_.\n\n.. _config-example_repack.toml: https://github.com/the4thdoctor/repcloud/blob/master/repcloud/config/config-example_repack.toml\n\n\nLimitations\n............................\n\nThe procedure needs to be able to drop all the objects involved in the repack. Therefore the login user must be the object's owner or\nshould be able to drop the objects.\n\nThe swap requires an exclusive lock on the old relation for the time necessary to move the new relation into the correct schema and drop the old relation.\nIf an error occurs during this phase, everything is rolled back. The procedure resumes the replay and will attempt again the swap after a sufficient amount of data has been replayed.\n\nCurrently there is no support for single index repack or tablespace change.\n\nA connection must have the header in the form of [connections.<connection_name>]\n\nEach connection requires the database connection data: user, password, port, host, database, sslmode.\n\nThe lists schemas and tables allow to specify which schema or tables we want to repack. If omitted the repack will process any table within the database.\n\nThe parameter max_replay_rows specifies how many rows should be replayed at once during the replay phase.\nlock_timeout specifies how long the process should wait for acquiring the lock on the table to swap before giving up. If the lock_timeout expires, the swap is delayed\nuntil a sufficient amount of rows are replayed again.\n\ncheck_time specifies the time between two checks for changed data on the repacked table. The value will be matched against the replay speed in order to determine\nif the replay can reach the consistent status with the original table.\nIf it's not possible the swap attempt aborts.\n\nIn case of deadlock, it's possible to specify the resolution strategy. with connection's parameter **deadlock_resolution**.\nThe possible values are *nothing, cancel_query, kill_query*.\n\nWith **nothing** the deadlock resolution will be managed by the database. With **cancel_query** the blocking queries will be cancelled with **pg_cancel_backend**. \nWith kill_query the blocking queries will be terminated with **pg_terminate_backend**.\n\nThe configuration's example file have the parameter set to nothing.\n\n::\n\n\tdeadlock_resolution = \"nothing\"\n\n\nLicense\n------------------------------\nrepcloud is released under the terms of the `PostgreSQL license - https://opensource.org/licenses/postgresql <https://opensource.org/licenses/postgresql>`_\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/the4thdoctor/repcloud/", "keywords": "postgresql database cloud repack transform", "license": "BSD License", "maintainer": "Federico Campoli", "maintainer_email": "the4thdoctor.gallifrey@gmail.com", "name": "repcloud", "package_url": "https://pypi.org/project/repcloud/", "platform": "linux", "project_url": "https://pypi.org/project/repcloud/", "project_urls": {"Homepage": "https://github.com/the4thdoctor/repcloud/"}, "release_url": "https://pypi.org/project/repcloud/0.1a1/", "requires_dist": ["argparse (>=1.2.1)", "psycopg2-binary (>=2.7.4)", "toml (>=0.10.0)", "tabulate (>=0.8.1)", "daemonize (>=2.4.7)", "sphinx (>=2.1.2)"], "requires_python": ">=3.5", "summary": "PostgreSQL repacker without need", "version": "0.1a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"repcloud\">\n<h2>repcloud</h2>\n<a href=\"https://github.com/the4thdoctor/repcloud/issues\" rel=\"nofollow\"><img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e927b791b42cbe1c8fec50ddad920260d44fa65a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f746865347468646f63746f722f726570636c6f7564\"></a>\n<a href=\"https://github.com/the4thdoctor/repcloud/network\" rel=\"nofollow\"><img alt=\"GitHub forks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f506cdffe9a3ffbe009978e9c232220a5903715/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f746865347468646f63746f722f726570636c6f7564\"></a>\n<a href=\"https://github.com/the4thdoctor/repcloud/issues\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/License-PostgreSQL-blue\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1c09bf45be996d1ba1beb01def2977abd4cdb00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d506f737467726553514c2d626c7565\"></a>\n<a href=\"https://github.com/the4thdoctor/repcloud/release\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/release/the4thdoctor/repcloud\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5541fa9f7f62bd4d4a25e0bdec6ae4b10c872760/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f746865347468646f63746f722f726570636c6f7564\"></a>\n<a href=\"https://pypi.org/project/repcloud\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/repcloud\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fef0c54a5bd287516579c60a9ae9b6284152fdb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f726570636c6f7564\"></a>\n<p>repcloud is a repacker for PostgreSQL tables. Unlikely pgrepack there\u2019s no need for extension or external libraries.</p>\n<p>The procedure can repack the tables using a similar strategy like pgrepack, but without the physical file swap.</p>\n<p>This allow the procedure to be executed on an environment where it is not possible, to install external libraries, or\nthere is no super user access (e.g. cloud hosted databases, hence the name).</p>\n<p>When repacking the process creates a copy of the original table and using a select insert copies the existing data into the new relation.\nA trigger on the original table stores the data changes for which are replayed on the new one before attempting the swap.</p>\n<p>All the existing indices, foreign keys, and referencing foreign keys are created before the swap.\nViews and materialised views referencing the repacked table are dropped and created as well.</p>\n<div id=\"acknowledgement\">\n<h3>Acknowledgement</h3>\n<p>Coding repcloud has been possible thanks to the sponsorhip of <a href=\"https://www.meetcleo.com/\" rel=\"nofollow\">Cleo AI. https://www.meetcleo.com/</a></p>\n<a href=\"https://www.meetcleo.com/\" rel=\"nofollow\"><img alt=\"https://raw.githubusercontent.com/the4thdoctor/repcloud/master/images/cleo_logo.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/587b0b5bb684809c5e07daa20ec7d04cfc0e1736/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f746865347468646f63746f722f726570636c6f75642f6d61737465722f696d616765732f636c656f5f6c6f676f2e706e67\"></a>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>The script, which executes the repack, is rpcl. At its first execution the it creates a directory in the user\u2019s home named .repcloud\nUnder this directory there are three other subfolders.</p>\n<p>.repcloud/logs where the procedure\u2019s logs are stored\n.repcloud/pid where the procedure\u2019s pid file is stored\n.repcloud/config where the configurations are stored.\nTHe file config-example.toml is copied into the the folder ./replcoud/config. It is a template for the configuration.</p>\n<p>the command line rpcl accepts the following options:</p>\n<ul>\n<li>\u2013config specifies the config file to use in .repcloud/config. If omitted tje defaults configuration default.toml will be used</li>\n<li>\u2013connection specifies which connection to use within the configuration file. if omitted any connection is used for repacking</li>\n<li>\u2013debug forces the process in foreground with log sent both, to file and console</li>\n<li>\u2013start-replay starts the replay_data process as soon as the prepare_repack is finished. It applies only to prepare_repack.</li>\n</ul>\n<p>Without debug and with the log_dest set to file, the process starts in background.</p>\n<p>rpcl accepts the following commands</p>\n<ul>\n<li>show_connections shows the connections defined within the configuration file</li>\n<li>create_schema creates the repack helper schemas in the target database</li>\n<li>drop_schema drops the repack helper schemas from the target database. if any table failed the repack, its copy is dropped as well</li>\n<li>repack_tables repacks the tables listed within the connection</li>\n<li>prepare_repack prepares the tables for the repack, creates the new table, copies the data, and builds the indices. It stops before the swap.</li>\n<li>abort_repack cancel any prepared table for repack  and resets the status of any table  left in failed or in progress status. The logging triggers, the log table and the copy table if present are dropped  by the command.</li>\n<li>replay_data starts a replay data daemon. Useful to avoid a big lag to clear up between the prepare_repack and the final swap. It can be started automatically at the end of prepare repack with the option \u2013start-replay</li>\n<li>stop_prepare terminates the background process of prepare_repack</li>\n<li>stop_repack terminates the background process of repack_tables</li>\n<li>stop_replay  terminates the background process of replay_data</li>\n</ul>\n<p>Please note that prepare_repack requires much more space than repack_tables because all tables are copied and prepared for the repack instead of repacking and dropping\nthem one by one.</p>\n<p>In the configuration file the notifier and notifier.email sections allow to setup an email notification, which is triggered when the repack or prepare repack process is complete.</p>\n<div id=\"fillfactor\">\n<h4>Fillfactor</h4>\n<p>The tool supports the <strong>fillfactor</strong> setup for the repacked tables. This is possible using a specific configuration file  stored in the directory <em>~/.repcloud/config/table_conf</em></p>\n<p>The file describing the storage settings must be named after the configuration and the connection which the settings apply in the form <em>&lt;configuration&gt;_&lt;connection&gt;.toml</em>.</p>\n<p>For example, if we are using the configuration <em>default.toml</em> where there is the connection <em>repack</em> the table configuration file\u2019s name should be\n<em>default_repack.toml</em></p>\n<p>If the table settings file is not present then the default values are used.</p>\n<p>Inside the directory <em>~/.repcloud/config/table_conf</em> there is an example file to help the configuration.</p>\n<p>The configuration at moment supports only <strong>fillfactor</strong> as storage parameter.</p>\n<p>A global fillfactor which applies to any table in the database can be set under the section <strong>[storage]</strong>.</p>\n<p>Schema wide fillfactor is supported adding the value under the section <strong>[storage.schemaname]</strong>.</p>\n<p>Fillfactor for tables can be set using the section named after the schema and the table <strong>[storage.schemaname.tablename]</strong>.</p>\n<p>The example configuration file sets the fillfactor:</p>\n<blockquote>\n<ul>\n<li>for all the tables in the database to 100</li>\n<li>for all the tables in the schema foo to 80</li>\n<li>for the table foo.bar to 30</li>\n</ul>\n</blockquote>\n<pre>#table configuration example\n# storage data. currently only fillfactor is allowed\n\n#set the fillfactor for all the tables\n[storage]\nfillfactor = 100\n\n#sets the fillfactor for all the tables in the schema foo\n[storage.foo]\nfillfactor = 80\n\n#set the fillfactor for the table foo.bar\n[storage.foo.bar]\nfillfactor = 30\n</pre>\n</div>\n<div id=\"cleanup-json-jsonb\">\n<h4>Cleanup json/jsonb</h4>\n<p>In the table\u2019s configuration file it\u2019s possible to specify whether to cleanup json/jsonb keys with null keys.\nIt\u2019s possible to remove jsonb keys entirely but this applies only to the data type jsonb.\nThe table\u2019s configuration file provides both examples.</p>\n<pre>[public.foobar]\n#cleanup_nulls and remove_keys for the same field are  currently mutually exclusive with cleanup_nulls taking the precedence\n#strip nulls from a json/jsonb field\nfoo.cleanup_nulls = true\n\n#filtering data, based on the key currently only jsonb is supported\nbar.remove_keys = [ \"key1\" ]\n</pre>\n</div>\n<div id=\"example-files\">\n<h4>Example files</h4>\n<p>Example configuration file: <a href=\"https://github.com/the4thdoctor/repcloud/blob/master/repcloud/config/config-example.toml\" rel=\"nofollow\">config-example.toml</a>.</p>\n<p>Example table setup for configuration <strong>config-example</strong> and connection <strong>repack</strong>: <a href=\"https://github.com/the4thdoctor/repcloud/blob/master/repcloud/config/config-example_repack.toml\" rel=\"nofollow\">config-example_repack.toml</a>.</p>\n</div>\n</div>\n<div id=\"limitations\">\n<h3>Limitations</h3>\n<p>The procedure needs to be able to drop all the objects involved in the repack. Therefore the login user must be the object\u2019s owner or\nshould be able to drop the objects.</p>\n<p>The swap requires an exclusive lock on the old relation for the time necessary to move the new relation into the correct schema and drop the old relation.\nIf an error occurs during this phase, everything is rolled back. The procedure resumes the replay and will attempt again the swap after a sufficient amount of data has been replayed.</p>\n<p>Currently there is no support for single index repack or tablespace change.</p>\n<p>A connection must have the header in the form of [connections.&lt;connection_name&gt;]</p>\n<p>Each connection requires the database connection data: user, password, port, host, database, sslmode.</p>\n<p>The lists schemas and tables allow to specify which schema or tables we want to repack. If omitted the repack will process any table within the database.</p>\n<p>The parameter max_replay_rows specifies how many rows should be replayed at once during the replay phase.\nlock_timeout specifies how long the process should wait for acquiring the lock on the table to swap before giving up. If the lock_timeout expires, the swap is delayed\nuntil a sufficient amount of rows are replayed again.</p>\n<p>check_time specifies the time between two checks for changed data on the repacked table. The value will be matched against the replay speed in order to determine\nif the replay can reach the consistent status with the original table.\nIf it\u2019s not possible the swap attempt aborts.</p>\n<p>In case of deadlock, it\u2019s possible to specify the resolution strategy. with connection\u2019s parameter <strong>deadlock_resolution</strong>.\nThe possible values are <em>nothing, cancel_query, kill_query</em>.</p>\n<p>With <strong>nothing</strong> the deadlock resolution will be managed by the database. With <strong>cancel_query</strong> the blocking queries will be cancelled with <strong>pg_cancel_backend</strong>.\nWith kill_query the blocking queries will be terminated with <strong>pg_terminate_backend</strong>.</p>\n<p>The configuration\u2019s example file have the parameter set to nothing.</p>\n<pre>deadlock_resolution = \"nothing\"\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>repcloud is released under the terms of the <a href=\"https://opensource.org/licenses/postgresql\" rel=\"nofollow\">PostgreSQL license - https://opensource.org/licenses/postgresql</a></p>\n</div>\n\n          </div>"}, "last_serial": 6201831, "releases": {"0.0.1.dev0": [{"comment_text": "", "digests": {"md5": "b8906439c6870f729d2533e3f5e2a14c", "sha256": "a30313ebe33ec489e3b45169a2b0788c596927a59927b2c0506809c020c0edd9"}, "downloads": -1, "filename": "repcloud-0.0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "b8906439c6870f729d2533e3f5e2a14c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25676, "upload_time": "2019-09-14T07:23:23", "upload_time_iso_8601": "2019-09-14T07:23:23.870628Z", "url": "https://files.pythonhosted.org/packages/99/83/a9cedf3671fe886d18867a4aef82ebedcf8b72afd71c045e664e536b861c/repcloud-0.0.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fd4948e061ab973b537fa325d72d3a2", "sha256": "6c6d8c30ae5e893a3075e3fc795a942a81a0c91bf3ee1827a92400a5deb95f79"}, "downloads": -1, "filename": "repcloud-0.0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "2fd4948e061ab973b537fa325d72d3a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 33737, "upload_time": "2019-09-14T07:23:26", "upload_time_iso_8601": "2019-09-14T07:23:26.606947Z", "url": "https://files.pythonhosted.org/packages/2e/17/aa6f597b764b700d115d51d7f88df5f1e3fcd915426d6f5817e783e991b3/repcloud-0.0.1.dev0.tar.gz", "yanked": false}], "0.1a1": [{"comment_text": "", "digests": {"md5": "43be0cbae64ed35bbdc478c7151956ce", "sha256": "a71a4fd6fe7f42c135ef60ac42100cb8d35b3cf7737c484b0c76b6cdadfc6289"}, "downloads": -1, "filename": "repcloud-0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "43be0cbae64ed35bbdc478c7151956ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 32470, "upload_time": "2019-11-26T15:02:22", "upload_time_iso_8601": "2019-11-26T15:02:22.784255Z", "url": "https://files.pythonhosted.org/packages/85/7c/2b7856f056655c4e7506c58d79233652f1c9e6ad3a5cd2599c64eda1215f/repcloud-0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "798cdde1f2eeabaecd2a5fc8cb91d1ef", "sha256": "05f4e692878a51e6215291b9077e5a4dbafcd5260f0bac76bc7f17d6b9e3ec17"}, "downloads": -1, "filename": "repcloud-0.1a1.tar.gz", "has_sig": false, "md5_digest": "798cdde1f2eeabaecd2a5fc8cb91d1ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 34264, "upload_time": "2019-11-26T15:02:24", "upload_time_iso_8601": "2019-11-26T15:02:24.466780Z", "url": "https://files.pythonhosted.org/packages/48/78/041d991dafd3d947d2f5a92a17090d42fd813e7a5c5dc2b77dc101f0bd4f/repcloud-0.1a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "43be0cbae64ed35bbdc478c7151956ce", "sha256": "a71a4fd6fe7f42c135ef60ac42100cb8d35b3cf7737c484b0c76b6cdadfc6289"}, "downloads": -1, "filename": "repcloud-0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "43be0cbae64ed35bbdc478c7151956ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 32470, "upload_time": "2019-11-26T15:02:22", "upload_time_iso_8601": "2019-11-26T15:02:22.784255Z", "url": "https://files.pythonhosted.org/packages/85/7c/2b7856f056655c4e7506c58d79233652f1c9e6ad3a5cd2599c64eda1215f/repcloud-0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "798cdde1f2eeabaecd2a5fc8cb91d1ef", "sha256": "05f4e692878a51e6215291b9077e5a4dbafcd5260f0bac76bc7f17d6b9e3ec17"}, "downloads": -1, "filename": "repcloud-0.1a1.tar.gz", "has_sig": false, "md5_digest": "798cdde1f2eeabaecd2a5fc8cb91d1ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 34264, "upload_time": "2019-11-26T15:02:24", "upload_time_iso_8601": "2019-11-26T15:02:24.466780Z", "url": "https://files.pythonhosted.org/packages/48/78/041d991dafd3d947d2f5a92a17090d42fd813e7a5c5dc2b77dc101f0bd4f/repcloud-0.1a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:41 2020"}