{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: C", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": ".. image:: https://img.shields.io/pypi/v/druhg.svg\r\n    :target: https://pypi.python.org/pypi/druhg/\r\n    :alt: PyPI Version\r\n.. image:: https://img.shields.io/pypi/l/druhg.svg\r\n    :target: https://github.com/artamono/druhg/blob/master/LICENSE\r\n    :alt: License\r\n\r\n=====\r\nDRUHG\r\n=====\r\n\r\n| DRUHG - Dialectical Ranking Universal Hierarchical Grouping (\u0434\u0440\u0443\u0433).\r\n| Performs clustering based on subjective rankings of each data point and builds a minimum spanning tree.\r\n| **Does not require parameters.** *(The real parameter is metric)*\r\n| To compensate for the inevitability of the result, the user can set the limits on the size of the cluster with ``limit1`` and ``limit2``.\r\n| To get the genuine result and genuine outliers set ``limit1`` to 1 and ``limit2`` to sample size.\r\n| Parameter ``fix_outliers`` allows to label outliers to their closest clusters via mstree edges.\r\n\r\n-------------\r\nBasic Concept\r\n-------------\r\n\r\n| There are some optional tuning parameters but the actual algorithm requires none and is universal.\r\n| It works by applying **the universal society rule: treat others how you want to be treated**.\r\n| The core of the algorithm is to rank the subject's closest subjective similarities and unite subjects into commonalities accordingly.\r\n| Parameter ``max_ranking`` controls precision vs productivity balance, after some value the precision and the result would not change.\r\n|\r\n| Let's say you have a list of friends and your number one friend is John, but you are number 5 on his friend list, then you would treat him as your number 5 friend.\r\n| todo: insert picture\r\n| Clustering made by self-unrolling the relationships between the objects.\r\n| Process of merging subjects to commonalities goes until the whole tree is a commonality.\r\n| Commonalities that were merged against sizeable commonalities become clusters.\r\n| Subjects in order to be merged have to be mutually close to each other and have to have the closest relationship among everyone else.\r\n| They have to reflect from all others and each other, and then because of that become one.\r\n| The subject unveils it's potential energy only after he reflects of others.\r\n| Therefore *Cluster is a mutually-close reflections.*\r\n|\r\n| To come up with this universal solution philosophy of dialectical materialism was used.\r\n| You can read more about it in this work\r\n| (https://github.com/artamono/druhg/papers/su_bumaga.md)\r\n| where you can read on:\r\n| - triad Quality-Quantity-Measure (distance-rank-memberships)\r\n| - triad Singular-Particular-Universal (subject-cluster-dataset)\r\n| - Mass-Energy relation\r\n| - prospects of adding Time and Motion to break conventional Physics\r\n| - and more\r\n|\r\n\r\n----------------\r\nHow to use DRUHG\r\n----------------\r\n.. code:: python\r\n\r\n             import sklearn.datasets as datasets\r\n             import druhg\r\n\r\n             iris = datasets.load_iris()\r\n             XX = iris['data']\r\n\r\n             clusterer = druhg.DRUHG(max_ranking=50)\r\n             labels = clusterer.fit(XX).labels_\r\n\r\nIt will build the tree and label the points. Now you can manipulate clusters by relabeling.\r\n\r\n.. code:: python\r\n\r\n             labels = dr.relabel(limit1=1, limit2=len(XX)/2, fix_outliers=1)\r\n             ari = adjusted_rand_score(iris['target'], labels)\r\n             print ('iris ari', ari)\r\n\r\nIt will relabel the clusters, by restricting their size.\r\n\r\n.. code:: python\r\n\r\n            from druhg import DRUHG\r\n            import matplotlib.pyplot as plt\r\n            import pandas as pd, numpy as np\r\n\r\n            XX = pd.read_csv('chameleon.csv', sep='\\t', header=None)\r\n            XX = np.array(XX)\r\n            clusterer = DRUHG(max_ranking=200)\r\n            clusterer.fit(XX)\r\n\r\n            plt.figure(figsize=(30,16))\r\n            clusterer.minimum_spanning_tree_.plot(node_size=200)\r\n\r\nIt will draw mstree with druhg-edges.\r\n\r\n.. image:: ./papers/pics/chameleon.jpg\r\n    :width: 300px\r\n    :align: center\r\n    :height: 200px\r\n    :alt: chameleon\r\n\r\n-----------\r\nPerformance\r\n-----------\r\n| It can be slow on a highly structural data.\r\n| There is a parameters ``max_ranking`` that can be used decreased for a better performance.\r\n\r\n----------\r\nInstalling\r\n----------\r\n\r\nPyPI install, presuming you have an up to date pip:\r\n\r\n.. code:: bash\r\n\r\n    pip install druhg\r\n\r\n\r\n-----------------\r\nRunning the Tests\r\n-----------------\r\n\r\nThe package tests can be run after installation using the command:\r\n\r\n.. code:: bash\r\n\r\n    nosetests -s druhg\r\n\r\nor, if ``nose`` is installed but ``nosetests`` is not in your ``PATH`` variable:\r\n\r\n.. code:: bash\r\n\r\n    python -m nose -s druhg\r\n\r\nThe tests may fail :-D\r\n\r\n--------------\r\nPython Version\r\n--------------\r\n\r\nThe druhg library supports both Python 2 and Python 3. \r\n\r\n\r\n------------\r\nContributing\r\n------------\r\n\r\nWe welcome contributions in any form! Assistance with documentation, particularly expanding tutorials,\r\nis always welcome. To contribute please `fork the project <https://github.com/artamono/druhg/issues#fork-destination-box>`_ \r\nmake your changes and submit a pull request. We will do our best to work through any issues with\r\nyou and get your code merged into the main branch.\r\n\r\n---------\r\nLicensing\r\n---------\r\n\r\nThe druhg package is 3-clause BSD licensed.\r\n\r\n\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/artamono/druhg", "keywords": "cluster clustering density hierarchical", "license": "BSD", "maintainer": "Pavel \"DRUHG\" Artamonov", "maintainer_email": "druhg.p@gmail.com", "name": "druhg", "package_url": "https://pypi.org/project/druhg/", "platform": "", "project_url": "https://pypi.org/project/druhg/", "project_urls": {"Homepage": "https://github.com/artamono/druhg"}, "release_url": "https://pypi.org/project/druhg/1.0.1/", "requires_dist": ["cython (>=0.27)", "numpy (>=1.9)", "scipy (>=0.9)", "scikit-learn (>=0.17)"], "requires_python": "", "summary": "Universal clustering based on dialectical materialism", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/druhg/\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ba6c209bd173a03dc016653ee4900d3b5dc6ffe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f64727568672e737667\"></a>\n<a href=\"https://github.com/artamono/druhg/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/216e556532ec981654622d6eb59c0d5eff371a40/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f64727568672e737667\"></a>\n<div id=\"druhg\">\n<h2>DRUHG</h2>\n<div>\n<div>DRUHG - Dialectical Ranking Universal Hierarchical Grouping (\u0434\u0440\u0443\u0433).</div>\n<div>Performs clustering based on subjective rankings of each data point and builds a minimum spanning tree.</div>\n<div><strong>Does not require parameters.</strong> <em>(The real parameter is metric)</em></div>\n<div>To compensate for the inevitability of the result, the user can set the limits on the size of the cluster with <tt>limit1</tt> and <tt>limit2</tt>.</div>\n<div>To get the genuine result and genuine outliers set <tt>limit1</tt> to 1 and <tt>limit2</tt> to sample size.</div>\n<div>Parameter <tt>fix_outliers</tt> allows to label outliers to their closest clusters via mstree edges.</div>\n</div>\n<div id=\"basic-concept\">\n<h3>Basic Concept</h3>\n<div>\n<div>There are some optional tuning parameters but the actual algorithm requires none and is universal.</div>\n<div>It works by applying <strong>the universal society rule: treat others how you want to be treated</strong>.</div>\n<div>The core of the algorithm is to rank the subject\u2019s closest subjective similarities and unite subjects into commonalities accordingly.</div>\n<div>Parameter <tt>max_ranking</tt> controls precision vs productivity balance, after some value the precision and the result would not change.</div>\n<div><br></div>\n<div>Let\u2019s say you have a list of friends and your number one friend is John, but you are number 5 on his friend list, then you would treat him as your number 5 friend.</div>\n<div>todo: insert picture</div>\n<div>Clustering made by self-unrolling the relationships between the objects.</div>\n<div>Process of merging subjects to commonalities goes until the whole tree is a commonality.</div>\n<div>Commonalities that were merged against sizeable commonalities become clusters.</div>\n<div>Subjects in order to be merged have to be mutually close to each other and have to have the closest relationship among everyone else.</div>\n<div>They have to reflect from all others and each other, and then because of that become one.</div>\n<div>The subject unveils it\u2019s potential energy only after he reflects of others.</div>\n<div>Therefore <em>Cluster is a mutually-close reflections.</em></div>\n<div><br></div>\n<div>To come up with this universal solution philosophy of dialectical materialism was used.</div>\n<div>You can read more about it in this work</div>\n<div>(<a href=\"https://github.com/artamono/druhg/papers/su_bumaga.md\" rel=\"nofollow\">https://github.com/artamono/druhg/papers/su_bumaga.md</a>)</div>\n<div>where you can read on:</div>\n<div>- triad Quality-Quantity-Measure (distance-rank-memberships)</div>\n<div>- triad Singular-Particular-Universal (subject-cluster-dataset)</div>\n<div>- Mass-Energy relation</div>\n<div>- prospects of adding Time and Motion to break conventional Physics</div>\n<div>- and more</div>\n<div><br></div>\n</div>\n</div>\n<div id=\"how-to-use-druhg\">\n<h3>How to use DRUHG</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"k\">as</span> <span class=\"nn\">datasets</span>\n<span class=\"kn\">import</span> <span class=\"nn\">druhg</span>\n\n<span class=\"n\">iris</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_iris</span><span class=\"p\">()</span>\n<span class=\"n\">XX</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span>\n\n<span class=\"n\">clusterer</span> <span class=\"o\">=</span> <span class=\"n\">druhg</span><span class=\"o\">.</span><span class=\"n\">DRUHG</span><span class=\"p\">(</span><span class=\"n\">max_ranking</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">clusterer</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">XX</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">labels_</span>\n</pre>\n<p>It will build the tree and label the points. Now you can manipulate clusters by relabeling.</p>\n<pre><span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">dr</span><span class=\"o\">.</span><span class=\"n\">relabel</span><span class=\"p\">(</span><span class=\"n\">limit1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">limit2</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">XX</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">fix_outliers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ari</span> <span class=\"o\">=</span> <span class=\"n\">adjusted_rand_score</span><span class=\"p\">(</span><span class=\"n\">iris</span><span class=\"p\">[</span><span class=\"s1\">'target'</span><span class=\"p\">],</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'iris ari'</span><span class=\"p\">,</span> <span class=\"n\">ari</span><span class=\"p\">)</span>\n</pre>\n<p>It will relabel the clusters, by restricting their size.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">druhg</span> <span class=\"kn\">import</span> <span class=\"n\">DRUHG</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span><span class=\"o\">,</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">XX</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'chameleon.csv'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">XX</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">XX</span><span class=\"p\">)</span>\n<span class=\"n\">clusterer</span> <span class=\"o\">=</span> <span class=\"n\">DRUHG</span><span class=\"p\">(</span><span class=\"n\">max_ranking</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">clusterer</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">XX</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"p\">))</span>\n<span class=\"n\">clusterer</span><span class=\"o\">.</span><span class=\"n\">minimum_spanning_tree_</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">node_size</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre>\n<p>It will draw mstree with druhg-edges.</p>\n<img alt=\"chameleon\" class=\"align-center\" height=\"200px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01336187cae85d7c07b1d1098ef20cf0415d47bc/2e2f7061706572732f706963732f6368616d656c656f6e2e6a7067\" width=\"300px\">\n</div>\n<div id=\"performance\">\n<h3>Performance</h3>\n<div>\n<div>It can be slow on a highly structural data.</div>\n<div>There is a parameters <tt>max_ranking</tt> that can be used decreased for a better performance.</div>\n</div>\n</div>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p>PyPI install, presuming you have an up to date pip:</p>\n<pre>pip install druhg\n</pre>\n</div>\n<div id=\"running-the-tests\">\n<h3>Running the Tests</h3>\n<p>The package tests can be run after installation using the command:</p>\n<pre>nosetests -s druhg\n</pre>\n<p>or, if <tt>nose</tt> is installed but <tt>nosetests</tt> is not in your <tt>PATH</tt> variable:</p>\n<pre>python -m nose -s druhg\n</pre>\n<p>The tests may fail :-D</p>\n</div>\n<div id=\"python-version\">\n<h3>Python Version</h3>\n<p>The druhg library supports both Python 2 and Python 3.</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>We welcome contributions in any form! Assistance with documentation, particularly expanding tutorials,\nis always welcome. To contribute please <a href=\"https://github.com/artamono/druhg/issues#fork-destination-box\" rel=\"nofollow\">fork the project</a>\nmake your changes and submit a pull request. We will do our best to work through any issues with\nyou and get your code merged into the main branch.</p>\n</div>\n<div id=\"licensing\">\n<h3>Licensing</h3>\n<p>The druhg package is 3-clause BSD licensed.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7130509, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "686550b511f6426b231d93dd92a5e413", "sha256": "e00e16273a086f40e16dcfceb406951b90697022e58022b8dc94ec28997c17e7"}, "downloads": -1, "filename": "druhg-0.10.tar.gz", "has_sig": false, "md5_digest": "686550b511f6426b231d93dd92a5e413", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 185450, "upload_time": "2020-01-25T11:24:24", "upload_time_iso_8601": "2020-01-25T11:24:24.017456Z", "url": "https://files.pythonhosted.org/packages/07/c3/7adb6919488465f0540c19d0f6a7ded5a5fa49e18f67b05b88d207a8b3bf/druhg-0.10.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "8cf2168129f9ed75f3ca2384dbad4007", "sha256": "f587f66fb58d209f522f682aa0efc17522c449719bc3871d77b016b2be612843"}, "downloads": -1, "filename": "druhg-1.0.tar.gz", "has_sig": false, "md5_digest": "8cf2168129f9ed75f3ca2384dbad4007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 185978, "upload_time": "2020-03-29T12:17:05", "upload_time_iso_8601": "2020-03-29T12:17:05.630702Z", "url": "https://files.pythonhosted.org/packages/9a/60/8a8168be175303ea83c77b56717290e86050daeb3cee6615716bb05ed4ee/druhg-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "d07db8aff892f1f71989aa96268a7f80", "sha256": "946e42c154007dd2b0257556eca8424b007b8d8d05bae6a9151fea38eec2d700"}, "downloads": -1, "filename": "druhg-1.0.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "d07db8aff892f1f71989aa96268a7f80", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 113114, "upload_time": "2020-04-29T17:03:53", "upload_time_iso_8601": "2020-04-29T17:03:53.496445Z", "url": "https://files.pythonhosted.org/packages/9b/82/c5ba41e74716192abce91f05e77e8beb1d3f4825776d1cde561b760d3487/druhg-1.0.1-cp27-cp27m-win_amd64.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d07db8aff892f1f71989aa96268a7f80", "sha256": "946e42c154007dd2b0257556eca8424b007b8d8d05bae6a9151fea38eec2d700"}, "downloads": -1, "filename": "druhg-1.0.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "d07db8aff892f1f71989aa96268a7f80", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 113114, "upload_time": "2020-04-29T17:03:53", "upload_time_iso_8601": "2020-04-29T17:03:53.496445Z", "url": "https://files.pythonhosted.org/packages/9b/82/c5ba41e74716192abce91f05e77e8beb1d3f4825776d1cde561b760d3487/druhg-1.0.1-cp27-cp27m-win_amd64.whl", "yanked": false}], "timestamp": "Fri May  8 00:49:29 2020"}