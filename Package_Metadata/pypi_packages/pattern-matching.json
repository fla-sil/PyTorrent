{"info": {"author": "thautwarm", "author_email": "twshere@outlook.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "|License| |PyPI version|\n\nTail call optimization(TCO) has been removed from this package for\nfollowing reasons:\n\n1. TCO is easy to implement.\n2. Guaranteeing TCO dynamically in any situations is really expensive.\n\nIf you do want to use TCO in Python, check\nhttps://zhuanlan.zhihu.com/p/42684997.\n\nThe documents have been migrated to README now:\n\nDocs\n----\n\nThese are all you need to import.\n\n.. code:: python\n\n    from pattern_matching import var, _, T, t, when, Match, overwrite\n\nType Matching\n-------------\n\n.. code:: python\n\n\n    @when(var[T == int])\n    # T means the type would be capture.\n    def f(v, type_of_v):\n        print(v, type_of_v)\n\n    f(1)\n    # => (1, int)\n\nRemark: Using ``Match`` is similar to ``when/overwrite``:\n\n.. code:: python\n\n    m = Match(1)\n    res = m.case(var[T == int])\n    if res:\n        [a, b] = res.get\n        assert [a, b] == [1, int]\n\nIf the pattern matched, ``Match.case`` returns a ``Result`` object.\n\n.. code:: python\n\n    class Result:\n        __slots__ = 'get'\n\n        def __init__(self, _):\n            self.get = _\n\nOtherwise the return is ``None``.\n\nValue Matching\n--------------\n\n.. code:: python\n\n    @when(_ == 1)\n    def f():\n        return 12\n\n    @when(_ == 2)\n    def f():\n        return 0\n\n    @when(var)\n    def f(arg):\n        return arg ** 3\n\n    f(1), f(2), f(3) # => 12, 0, 27\n\nWildcard for types\n------------------\n\n.. code:: python\n\n    @when(var[t == float])\n    # the lowercase, \"t\", which indicates that the type just be matched without capture.\n    def f(v):\n        print(v)\n    f(1.0)\n    # => 1.0\n\nWildcard for values\n-------------------\n\n.. code:: python\n\n    @when(_)\n    def f():\n        return 1\n    f(1) == f(\"...\") == f(1e-3)\n    # => True\n\nType Boundary\n-------------\n\n.. code:: python\n\n    class MyList(list):\n        pass\n    from collections import Iterable\n\n    @when(var[Iterable <= T <= MyList]\n        .when(lambda x: 1 in x)\n    )\n    def f(x, T):\n        return (x, T)\n\n    f([1, 2, 3])\n    # => ([1, 2, 3], list)\n\n    f({1, 2, 3})\n    # => UnsolvedCase: No entry for args<({1, 2, 3},)>, kwargs:<{}>\n\nOverloading functions\n---------------------\n\nOverloading functions are introduced through the following simple cases:\n\n.. code:: python\n\n    @overwrite(_ == [])\n    def summary():\n        return 0\n\n    @when([var[int], *(_== [])])\n    def summary(head):\n        return head\n\n    @when([var[int], *var[list]])\n    def summary(head, tail):\n        return head + summary(tail)\n\n    summary([1, 2, 3])\n    # => 6\n\nNote that above code is definitely useless for it doesn't use tail call\noptimization.\n\nUnion Type\n----------\n\n.. code:: python\n\n    @when(var[(t == int) | (t == str)])\n    def disp(x):\n        print(x)\n    disp(1) # => 1\n    disp('1') # => '1'\n\nIntersection Type\n-----------------\n\n.. code:: python\n\n    class A:\n        pass\n    class B:\n        pass\n    class C(A, B):\n        pass\n\n    @when(_[(T == A) | (T == B)])\n    def disp(ty):\n        print(ty)\n    disp(C()) # => <class __main__.C>\n\nDifference Type\n---------------\n\n.. code:: python\n\n    class A:\n        pass\n    class B:\n        pass\n    class C(A, B):\n        pass\n\n    @when(_[T != A])\n    def disp(ty):\n        print(ty)\n    disp(C()) # => <class __main__.C>\n    disp(B()) # => <class __main__.B>\n\n    disp(A())\n    # => UnsolvedCase: No entry for args<(<__main__.A object at ...>,)>, kwargs:<{}>\n\nType Contracts\n--------------\n\nYou can apply ``.when(predicate)`` methods on ``pattern_matching.T/t`` .\n\nTo avoid subclassing.\n\n.. code:: python\n\n    class A:\n        pass\n    class B:\n        pass\n    class C(A, B):\n        pass\n\n    @overwrite(_[T.when(lambda _: not issubclass(_, A))])\n    def disp(ty):\n        print(ty)\n    disp(C()) # => <class __main__.C>\n    # => UnsolvedCase: No entry for args<(<__main__.C object at ...>,)>, kwargs:<{}>\n\nMatch Argument Numbers\n----------------------\n\n.. code:: python\n\n\n    @when(var/2)\n    def f(g):\n        return g(1, 2)\n\n    f(lambda a, b: a + b) # => 3\n    f(lambda a, b, c: a + b)\n    # => UnsolvedCase: No entry for args<(<function <lambda> at ...>,)>, kwargs:<{}>\n\n    class F:\n        def apply(self, arg):\n            return arg + 1\n\n    @when(var/1)\n    def f2(g):\n        return g(1)\n\n\n    f2(lambda a, b: a + b)\n    # => UnsolvedCase: No entry for args<(<function <lambda> at ...>,)>, kwargs:<{}>\n    f2(F().apply) # => 2\n\n.. |License| image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://github.com/Xython/Destruct.py/blob/master/LICENSE\n.. |PyPI version| image:: https://img.shields.io/pypi/v/pattern-matching.svg\n   :target: https://pypi.python.org/pypi/pattern-matching\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Xython/pattern-matching", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pattern-matching", "package_url": "https://pypi.org/project/pattern-matching/", "platform": "any", "project_url": "https://pypi.org/project/pattern-matching/", "project_urls": {"Homepage": "https://github.com/Xython/pattern-matching"}, "release_url": "https://pypi.org/project/pattern-matching/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "effective and graceful pattern matching for original python", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/Xython/Destruct.py/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7db8d43223f55fabe102838639f47819829c1ca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667\"></a> <a href=\"https://pypi.python.org/pypi/pattern-matching\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1474d9374790627b9e2e4a091fcc0e4a861ebe6c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7061747465726e2d6d61746368696e672e737667\"></a></p>\n<p>Tail call optimization(TCO) has been removed from this package for\nfollowing reasons:</p>\n<ol>\n<li>TCO is easy to implement.</li>\n<li>Guaranteeing TCO dynamically in any situations is really expensive.</li>\n</ol>\n<p>If you do want to use TCO in Python, check\n<a href=\"https://zhuanlan.zhihu.com/p/42684997\" rel=\"nofollow\">https://zhuanlan.zhihu.com/p/42684997</a>.</p>\n<p>The documents have been migrated to README now:</p>\n<div id=\"docs\">\n<h2>Docs</h2>\n<p>These are all you need to import.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pattern_matching</span> <span class=\"kn\">import</span> <span class=\"n\">var</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">when</span><span class=\"p\">,</span> <span class=\"n\">Match</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span>\n</pre>\n</div>\n<div id=\"type-matching\">\n<h2>Type Matching</h2>\n<pre><span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"n\">T</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">])</span>\n<span class=\"c1\"># T means the type would be capture.</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">type_of_v</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">type_of_v</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; (1, int)</span>\n</pre>\n<p>Remark: Using <tt>Match</tt> is similar to <tt>when/overwrite</tt>:</p>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Match</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"n\">T</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">])</span>\n<span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n    <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">get</span>\n    <span class=\"k\">assert</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>\n</pre>\n<p>If the pattern matched, <tt>Match.case</tt> returns a <tt>Result</tt> object.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Result</span><span class=\"p\">:</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"s1\">'get'</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"o\">=</span> <span class=\"n\">_</span>\n</pre>\n<p>Otherwise the return is <tt>None</tt>.</p>\n</div>\n<div id=\"value-matching\">\n<h2>Value Matching</h2>\n<pre><span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"mi\">12</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">arg</span> <span class=\"o\">**</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 12, 0, 27</span>\n</pre>\n</div>\n<div id=\"wildcard-for-types\">\n<h2>Wildcard for types</h2>\n<pre><span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"nb\">float</span><span class=\"p\">])</span>\n<span class=\"c1\"># the lowercase, \"t\", which indicates that the type just be matched without capture.</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; 1.0</span>\n</pre>\n</div>\n<div id=\"wildcard-for-values\">\n<h2>Wildcard for values</h2>\n<pre><span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mf\">1e-3</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; True</span>\n</pre>\n</div>\n<div id=\"type-boundary\">\n<h2>Type Boundary</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyList</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Iterable</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"n\">Iterable</span> <span class=\"o\">&lt;=</span> <span class=\"n\">T</span> <span class=\"o\">&lt;=</span> <span class=\"n\">MyList</span><span class=\"p\">]</span>\n    <span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"c1\"># =&gt; ([1, 2, 3], list)</span>\n\n<span class=\"n\">f</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"c1\"># =&gt; UnsolvedCase: No entry for args&lt;({1, 2, 3},)&gt;, kwargs:&lt;{}&gt;</span>\n</pre>\n</div>\n<div id=\"overloading-functions\">\n<h2>Overloading functions</h2>\n<p>Overloading functions are introduced through the following simple cases:</p>\n<pre><span class=\"nd\">@overwrite</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">==</span> <span class=\"p\">[])</span>\n<span class=\"k\">def</span> <span class=\"nf\">summary</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">([</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">==</span> <span class=\"p\">[])])</span>\n<span class=\"k\">def</span> <span class=\"nf\">summary</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">head</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">([</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]])</span>\n<span class=\"k\">def</span> <span class=\"nf\">summary</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">tail</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">head</span> <span class=\"o\">+</span> <span class=\"n\">summary</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">)</span>\n\n<span class=\"n\">summary</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"c1\"># =&gt; 6</span>\n</pre>\n<p>Note that above code is definitely useless for it doesn\u2019t use tail call\noptimization.</p>\n</div>\n<div id=\"union-type\">\n<h2>Union Type</h2>\n<pre><span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">[(</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">disp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">disp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 1</span>\n<span class=\"n\">disp</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; '1'</span>\n</pre>\n</div>\n<div id=\"intersection-type\">\n<h2>Intersection Type</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">[(</span><span class=\"n\">T</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"o\">==</span> <span class=\"n\">B</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">disp</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"n\">disp</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">())</span> <span class=\"c1\"># =&gt; &lt;class __main__.C&gt;</span>\n</pre>\n</div>\n<div id=\"difference-type\">\n<h2>Difference Type</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">[</span><span class=\"n\">T</span> <span class=\"o\">!=</span> <span class=\"n\">A</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">disp</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"n\">disp</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">())</span> <span class=\"c1\"># =&gt; &lt;class __main__.C&gt;</span>\n<span class=\"n\">disp</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">())</span> <span class=\"c1\"># =&gt; &lt;class __main__.B&gt;</span>\n\n<span class=\"n\">disp</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">())</span>\n<span class=\"c1\"># =&gt; UnsolvedCase: No entry for args&lt;(&lt;__main__.A object at ...&gt;,)&gt;, kwargs:&lt;{}&gt;</span>\n</pre>\n</div>\n<div id=\"type-contracts\">\n<h2>Type Contracts</h2>\n<p>You can apply <tt>.when(predicate)</tt> methods on <tt>pattern_matching.T/t</tt> .</p>\n<p>To avoid subclassing.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@overwrite</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"ow\">not</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">))])</span>\n<span class=\"k\">def</span> <span class=\"nf\">disp</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"n\">disp</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">())</span> <span class=\"c1\"># =&gt; &lt;class __main__.C&gt;</span>\n<span class=\"c1\"># =&gt; UnsolvedCase: No entry for args&lt;(&lt;__main__.C object at ...&gt;,)&gt;, kwargs:&lt;{}&gt;</span>\n</pre>\n</div>\n<div id=\"match-argument-numbers\">\n<h2>Match Argument Numbers</h2>\n<pre><span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 3</span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; UnsolvedCase: No entry for args&lt;(&lt;function &lt;lambda&gt; at ...&gt;,)&gt;, kwargs:&lt;{}&gt;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">F</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f2</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; UnsolvedCase: No entry for args&lt;(&lt;function &lt;lambda&gt; at ...&gt;,)&gt;, kwargs:&lt;{}&gt;</span>\n<span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 2</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4480968, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f4ba6f4f5cf0ea3487b9a70cc858a33c", "sha256": "9c761bfe5dd81f360879ae5180c8fdc18fe267c4287a088c6c77d80734f11765"}, "downloads": -1, "filename": "pattern_matching-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f4ba6f4f5cf0ea3487b9a70cc858a33c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 8020, "upload_time": "2017-12-30T17:13:00", "upload_time_iso_8601": "2017-12-30T17:13:00.835213Z", "url": "https://files.pythonhosted.org/packages/dc/33/b9d32cf985d26ac44015c5b24aac5a162486f3bf8b615d78f276b792e2e3/pattern_matching-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "8a99772c7ab009cdd3870a45e781a86b", "sha256": "91d7ce71db28105a81e5cf7cb8739fa11fa0a06394f8ec044afd197cf650258b"}, "downloads": -1, "filename": "pattern_matching-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8a99772c7ab009cdd3870a45e781a86b", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12902, "upload_time": "2018-01-07T19:48:33", "upload_time_iso_8601": "2018-01-07T19:48:33.081244Z", "url": "https://files.pythonhosted.org/packages/0e/85/40faf15fa9ada93b8ad09c830962691a0fd98bc9a829540a706daaa34c9f/pattern_matching-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "54845dd44ce9da5baa963173200bdced", "sha256": "a7bc18739aecbdb12280c24e88bc8fb2f1fd55aa4f00bdd4fc72cb0926245905"}, "downloads": -1, "filename": "pattern_matching-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "54845dd44ce9da5baa963173200bdced", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12915, "upload_time": "2018-04-23T04:09:17", "upload_time_iso_8601": "2018-04-23T04:09:17.101466Z", "url": "https://files.pythonhosted.org/packages/66/f8/b5a39b5ddadd6a77bd49c7c58122855b002470f595d7c3ab9d8a3545ebfa/pattern_matching-0.3-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "79b9d03006c2bd6be9131ac85fa8cd3c", "sha256": "9f74198faeb11e0cdf2cbfb92c02acc4386da4af33be49c2c43e117568faf145"}, "downloads": -1, "filename": "pattern_matching-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "79b9d03006c2bd6be9131ac85fa8cd3c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 6497, "upload_time": "2018-11-13T09:09:16", "upload_time_iso_8601": "2018-11-13T09:09:16.452820Z", "url": "https://files.pythonhosted.org/packages/da/a8/e7cb78c71ba7d42671c592d3d727b7c99d6edca1027cc9aca6ff9cc75d75/pattern_matching-1.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79b9d03006c2bd6be9131ac85fa8cd3c", "sha256": "9f74198faeb11e0cdf2cbfb92c02acc4386da4af33be49c2c43e117568faf145"}, "downloads": -1, "filename": "pattern_matching-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "79b9d03006c2bd6be9131ac85fa8cd3c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 6497, "upload_time": "2018-11-13T09:09:16", "upload_time_iso_8601": "2018-11-13T09:09:16.452820Z", "url": "https://files.pythonhosted.org/packages/da/a8/e7cb78c71ba7d42671c592d3d727b7c99d6edca1027cc9aca6ff9cc75d75/pattern_matching-1.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:57:47 2020"}