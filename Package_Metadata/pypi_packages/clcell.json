{"info": {"author": "Garrett Fairburn", "author_email": "", "bugtrack_url": null, "classifiers": ["Environment :: Other Environment", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Life"], "description": "# clcell \n\n**clcell** is an OpenCL-accelerated cellular automata simulator for Python 3.\n\n## Features\n\n- OpenCL-based hardware acceleration\n- Custom rulesets via `clcell.RuleSet`\n- Parallel simulations via `clcell.CASimulator.batch_simulate`\n\n## Limitations\n\n- Only binary cell states\n- No support for infinite grids\n- Grid boundary cells must be unpopulated\n\n## Installation\n\nRegardless of the installation method you choose, you will need\n[OpenCL](https://www.khronos.org/opencl/) drivers for your hardware.\n\n### Using pip\n\n```\n$ pip install --user clcell\n```\n\n### Building from Source\n\nRequirements:\n- [GNU Make](https://www.gnu.org/software/make/)\n- [Futhark](https://futhark-lang.org/)\n- [setuptools](https://pypi.org/project/setuptools/)\n\nClone this repository:\n\n```\n$ git clone https://github.com/Foxbud/clcell.git\n```\n\nEnter the project directory:\n\n```\n$ cd clcell\n```\n\nBuild and install this package:\n\n```\n$ make install\n```\n\n##  Usage\n\n```Python\nimport numpy as np\nimport clcell\n\n# Instantiate a simulator using Conway's Game of Life as the ruleset.\nsim = clcell.CASimulator(clcell.LIFE)\n\n# Create a randomized game state to use as a seed.\nseed_state = np.random.randint(0, 2, (1023, 1023), dtype=np.int8)\n# Pad state with zeros (required for now).\nseed_state = np.pad(seed_state, 1, constant_values=0)\n\n# Simulate 10,000 generations based on that seed.\nfinal_state = sim.simulate(10000, seed_state)\n\n# Create a batch of 1,000 randomized, padded game states to use as seeds.\nseed_states = np.array([\n  np.pad(\n    np.random.randint(0, 2, (127, 127), dtype=np.int8),\n    1,\n    constant_values=0\n  )\n  for num\n  in range(1000)\n])\n\n# Simulate 1,000 generations based on each of those seeds.\nfinal_states = sim.batch_simulate(1000, seed_states)\n```\n\n## Changelog\n\n**v1.0.1**\n- Simplified how the device code checks for boundary cells.\n- Refactored device code to use grids of 8-bit cells as opposed to 32-bit.\n- Fixed incorrectly placed size annotations in one device function.\n\n**v1.0.0**\n- Initial release.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Foxbud/clcell", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "clcell", "package_url": "https://pypi.org/project/clcell/", "platform": "", "project_url": "https://pypi.org/project/clcell/", "project_urls": {"Homepage": "https://github.com/Foxbud/clcell"}, "release_url": "https://pypi.org/project/clcell/1.0.1/", "requires_dist": ["pyopencl (>=2015.2)", "numpy"], "requires_python": "", "summary": "OpenCL-accelerated cellular automata simulator", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>clcell</h1>\n<p><strong>clcell</strong> is an OpenCL-accelerated cellular automata simulator for Python 3.</p>\n<h2>Features</h2>\n<ul>\n<li>OpenCL-based hardware acceleration</li>\n<li>Custom rulesets via <code>clcell.RuleSet</code></li>\n<li>Parallel simulations via <code>clcell.CASimulator.batch_simulate</code></li>\n</ul>\n<h2>Limitations</h2>\n<ul>\n<li>Only binary cell states</li>\n<li>No support for infinite grids</li>\n<li>Grid boundary cells must be unpopulated</li>\n</ul>\n<h2>Installation</h2>\n<p>Regardless of the installation method you choose, you will need\n<a href=\"https://www.khronos.org/opencl/\" rel=\"nofollow\">OpenCL</a> drivers for your hardware.</p>\n<h3>Using pip</h3>\n<pre><code>$ pip install --user clcell\n</code></pre>\n<h3>Building from Source</h3>\n<p>Requirements:</p>\n<ul>\n<li><a href=\"https://www.gnu.org/software/make/\" rel=\"nofollow\">GNU Make</a></li>\n<li><a href=\"https://futhark-lang.org/\" rel=\"nofollow\">Futhark</a></li>\n<li><a href=\"https://pypi.org/project/setuptools/\" rel=\"nofollow\">setuptools</a></li>\n</ul>\n<p>Clone this repository:</p>\n<pre><code>$ git clone https://github.com/Foxbud/clcell.git\n</code></pre>\n<p>Enter the project directory:</p>\n<pre><code>$ cd clcell\n</code></pre>\n<p>Build and install this package:</p>\n<pre><code>$ make install\n</code></pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">clcell</span>\n\n<span class=\"c1\"># Instantiate a simulator using Conway's Game of Life as the ruleset.</span>\n<span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"n\">clcell</span><span class=\"o\">.</span><span class=\"n\">CASimulator</span><span class=\"p\">(</span><span class=\"n\">clcell</span><span class=\"o\">.</span><span class=\"n\">LIFE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a randomized game state to use as a seed.</span>\n<span class=\"n\">seed_state</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1023</span><span class=\"p\">,</span> <span class=\"mi\">1023</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int8</span><span class=\"p\">)</span>\n<span class=\"c1\"># Pad state with zeros (required for now).</span>\n<span class=\"n\">seed_state</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pad</span><span class=\"p\">(</span><span class=\"n\">seed_state</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">constant_values</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Simulate 10,000 generations based on that seed.</span>\n<span class=\"n\">final_state</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">seed_state</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a batch of 1,000 randomized, padded game states to use as seeds.</span>\n<span class=\"n\">seed_states</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n  <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pad</span><span class=\"p\">(</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">127</span><span class=\"p\">,</span> <span class=\"mi\">127</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int8</span><span class=\"p\">),</span>\n    <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">constant_values</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n  <span class=\"p\">)</span>\n  <span class=\"k\">for</span> <span class=\"n\">num</span>\n  <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># Simulate 1,000 generations based on each of those seeds.</span>\n<span class=\"n\">final_states</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">batch_simulate</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">seed_states</span><span class=\"p\">)</span>\n</pre>\n<h2>Changelog</h2>\n<p><strong>v1.0.1</strong></p>\n<ul>\n<li>Simplified how the device code checks for boundary cells.</li>\n<li>Refactored device code to use grids of 8-bit cells as opposed to 32-bit.</li>\n<li>Fixed incorrectly placed size annotations in one device function.</li>\n</ul>\n<p><strong>v1.0.0</strong></p>\n<ul>\n<li>Initial release.</li>\n</ul>\n\n          </div>"}, "last_serial": 6393253, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bbbfaea8782f6cad65c0e9c190094cac", "sha256": "ff921b8050d0cb94c218d44bc6de24e7c19e07ffbbc7b03dabce9fd00d7be2cc"}, "downloads": -1, "filename": "clcell-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bbbfaea8782f6cad65c0e9c190094cac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27966, "upload_time": "2020-01-02T23:25:19", "upload_time_iso_8601": "2020-01-02T23:25:19.784291Z", "url": "https://files.pythonhosted.org/packages/27/17/bb8b9f91826ae33e121305e5f1b8f4adfa82408d8f6d2a2ab6649cb71487/clcell-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f534f3be28d77b00d304d3b2dbfda74d", "sha256": "e5ee1c48430226f566213968dc77c7e563d8a248cba82478e2d92ed7b2d74694"}, "downloads": -1, "filename": "clcell-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f534f3be28d77b00d304d3b2dbfda74d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19555, "upload_time": "2020-01-03T23:56:20", "upload_time_iso_8601": "2020-01-03T23:56:20.352011Z", "url": "https://files.pythonhosted.org/packages/82/90/e1d6301075a812ae2019e95dae85f585883d900313a8703dc9a155947080/clcell-1.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f534f3be28d77b00d304d3b2dbfda74d", "sha256": "e5ee1c48430226f566213968dc77c7e563d8a248cba82478e2d92ed7b2d74694"}, "downloads": -1, "filename": "clcell-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f534f3be28d77b00d304d3b2dbfda74d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19555, "upload_time": "2020-01-03T23:56:20", "upload_time_iso_8601": "2020-01-03T23:56:20.352011Z", "url": "https://files.pythonhosted.org/packages/82/90/e1d6301075a812ae2019e95dae85f585883d900313a8703dc9a155947080/clcell-1.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:19:07 2020"}