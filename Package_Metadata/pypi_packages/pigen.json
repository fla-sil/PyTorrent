{"info": {"author": "Steven K Terry", "author_email": "stkterry@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "===================================================\nPiGen : Generators For Digits of Pi\n===================================================\n\n\n.. image:: https://img.shields.io/pypi/v/pigen.svg\n        :target: https://pypi.python.org/pypi/pigen\n\n.. image:: https://img.shields.io/travis/stkterry/pigen.svg\n        :target: https://travis-ci.com/stkterry/pigen\n\n.. image:: https://readthedocs.org/projects/pigen/badge/?version=latest\n        :target: https://pigen.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\nOverview\n--------\nA small collection of generators and functions for digits of pi. Maybe\nyou've an art or math project and need to generate a few thousand to\na few million digits of pi?  This will help with that.\n\n\nGenerators\n----------\n\nSpigot's Algorithm | *pigen.spigot_pi*\n======================================\n\n* spigot_pi is a generator function.\n* Useful when you only need a single digit at a time.\n* Not as fast as frac_pi but a classic...\n\n.. code-block:: python\n\n  from pigen import spigot_pi as spi\n\n  pi_gen = spi()\n  for _ in range(100): # Let's iterate through the first 100 digits of pi.\n    digit = next(pi_gen)\n    # do something with digit\n\nFractional Continuation | *pigen.frac_pi*\n=========================================\n\n* frac_pi is a generator function.\n* Useful when you only need a single digit at a time.\n* Fastest single digit generator currently in the package.\n* You can pass your own lambda functions for other well behaved\n  irrational numbers!\n* You can specify the base for output as well, i.e., decimal, hex, etc.\n\n.. code-block:: python\n\n  from pigen import frac_pi as fpi\n\n  pi_gen = fpi()\n  for _ in range(100): # Let's iterate through the first 100 digits of pi.\n    digit = next(pi_gen)\n    # do something with digit\n\n  # We can pass lambdas to get different transcendental numbers.\n  # The golden ratio\n  phi_gen = fpi(lambda a: 1, lambda b: 1, base=10)\n  for _ in range(1000): # Let's iterate through the first 1000 digits of phi.\n    digit = next(phi_gen)\n    # do something with digit\n\n\nChudnovsky's Binary Search | *pigen.chudnovsky_pi*\n=====================================================\n\n* chudnovsky_pi is a regular function.\n* Useful if you need many digits at once.\n* The absolute fastest across the board. If you need a million\n* digits or more, this has got you covered.\n* You need only pass the number of digits you'd like to generate.\n* Makes heavy use of gmpy2 and the associated libs.  Very fast but you may need\n  to install other platform specific dependencies.\n\n.. code-block:: python\n\n  from pigen import chudnovsky_pi as cpibs\n  n = 1000000\n  n_pi_digits = cpi(n) # An integer `n` digits long containing digits of pi\n\nOther\n-----\n* Free software: MIT license\n\n* TODO\n\n  * CLI\n  * Examples\n\nCredits\n-------\n* The Chudnovsky's BS Algorithm was pulled and updated from an example by\n  Nick Craig-Wood.\n\n\n=======\nHistory\n=======\n\n0.1.2 (2020-01-27)\n------------------\n\n* First release on PyPI.\n* Completely removed slower Chudnovsky function.\n  It didn't generate the correct sequence.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stkterry/pigen", "keywords": "pigen", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "pigen", "package_url": "https://pypi.org/project/pigen/", "platform": "", "project_url": "https://pypi.org/project/pigen/", "project_urls": {"Homepage": "https://github.com/stkterry/pigen"}, "release_url": "https://pypi.org/project/pigen/0.1.5/", "requires_dist": ["Click (>=7.0)", "gmpy2 (>=2.0.8)", "mock (>=3)"], "requires_python": ">=3.5", "summary": "A collection of Pi generators.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pigen-generators-for-digits-of-pi\">\n<h2>PiGen : Generators For Digits of Pi</h2>\n<a href=\"https://pypi.python.org/pypi/pigen\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pigen.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6604ee959c28b4818453c601bd93ea53d0dc1f0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706967656e2e737667\"></a>\n<a href=\"https://travis-ci.com/stkterry/pigen\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/stkterry/pigen.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4c659d4aa5f65c5f7c5d605ca4c44ae450efd58/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f73746b74657272792f706967656e2e737667\"></a>\n<a href=\"https://pigen.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f149437e32a522c3926ddb5c722b45e36ce08b50/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f706967656e2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div id=\"overview\">\n<h3>Overview</h3>\n<p>A small collection of generators and functions for digits of pi. Maybe\nyou\u2019ve an art or math project and need to generate a few thousand to\na few million digits of pi?  This will help with that.</p>\n</div>\n<div id=\"generators\">\n<h3>Generators</h3>\n<div id=\"spigot-s-algorithm-pigen-spigot-pi\">\n<h4>Spigot\u2019s Algorithm | <em>pigen.spigot_pi</em></h4>\n<ul>\n<li>spigot_pi is a generator function.</li>\n<li>Useful when you only need a single digit at a time.</li>\n<li>Not as fast as frac_pi but a classic\u2026</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pigen</span> <span class=\"kn\">import</span> <span class=\"n\">spigot_pi</span> <span class=\"k\">as</span> <span class=\"n\">spi</span>\n\n<span class=\"n\">pi_gen</span> <span class=\"o\">=</span> <span class=\"n\">spi</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span> <span class=\"c1\"># Let's iterate through the first 100 digits of pi.</span>\n  <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">pi_gen</span><span class=\"p\">)</span>\n  <span class=\"c1\"># do something with digit</span>\n</pre>\n</div>\n<div id=\"fractional-continuation-pigen-frac-pi\">\n<h4>Fractional Continuation | <em>pigen.frac_pi</em></h4>\n<ul>\n<li>frac_pi is a generator function.</li>\n<li>Useful when you only need a single digit at a time.</li>\n<li>Fastest single digit generator currently in the package.</li>\n<li>You can pass your own lambda functions for other well behaved\nirrational numbers!</li>\n<li>You can specify the base for output as well, i.e., decimal, hex, etc.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pigen</span> <span class=\"kn\">import</span> <span class=\"n\">frac_pi</span> <span class=\"k\">as</span> <span class=\"n\">fpi</span>\n\n<span class=\"n\">pi_gen</span> <span class=\"o\">=</span> <span class=\"n\">fpi</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span> <span class=\"c1\"># Let's iterate through the first 100 digits of pi.</span>\n  <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">pi_gen</span><span class=\"p\">)</span>\n  <span class=\"c1\"># do something with digit</span>\n\n<span class=\"c1\"># We can pass lambdas to get different transcendental numbers.</span>\n<span class=\"c1\"># The golden ratio</span>\n<span class=\"n\">phi_gen</span> <span class=\"o\">=</span> <span class=\"n\">fpi</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">):</span> <span class=\"c1\"># Let's iterate through the first 1000 digits of phi.</span>\n  <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">phi_gen</span><span class=\"p\">)</span>\n  <span class=\"c1\"># do something with digit</span>\n</pre>\n</div>\n<div id=\"chudnovsky-s-binary-search-pigen-chudnovsky-pi\">\n<h4>Chudnovsky\u2019s Binary Search | <em>pigen.chudnovsky_pi</em></h4>\n<ul>\n<li>chudnovsky_pi is a regular function.</li>\n<li>Useful if you need many digits at once.</li>\n<li>The absolute fastest across the board. If you need a million</li>\n<li>digits or more, this has got you covered.</li>\n<li>You need only pass the number of digits you\u2019d like to generate.</li>\n<li>Makes heavy use of gmpy2 and the associated libs.  Very fast but you may need\nto install other platform specific dependencies.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pigen</span> <span class=\"kn\">import</span> <span class=\"n\">chudnovsky_pi</span> <span class=\"k\">as</span> <span class=\"n\">cpibs</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>\n<span class=\"n\">n_pi_digits</span> <span class=\"o\">=</span> <span class=\"n\">cpi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"c1\"># An integer `n` digits long containing digits of pi</span>\n</pre>\n</div>\n</div>\n<div id=\"other\">\n<h3>Other</h3>\n<ul>\n<li>Free software: MIT license</li>\n<li>TODO<ul>\n<li>CLI</li>\n<li>Examples</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<ul>\n<li>The Chudnovsky\u2019s BS Algorithm was pulled and updated from an example by\nNick Craig-Wood.</li>\n</ul>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.2 (2020-01-27)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n<li>Completely removed slower Chudnovsky function.\nIt didn\u2019t generate the correct sequence.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6593977, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "273f52a7223bce34c621916c25ee96ef", "sha256": "3489d4295dc014cb3c60c88cd779e3bee53d4350cb9f3524370ad1aebaeb71c0"}, "downloads": -1, "filename": "pigen-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "273f52a7223bce34c621916c25ee96ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 5366, "upload_time": "2020-02-08T14:11:46", "upload_time_iso_8601": "2020-02-08T14:11:46.702595Z", "url": "https://files.pythonhosted.org/packages/6a/71/cbfa7481015cc27f56ddff9374313787367e65c100d205ac7003509b7ac9/pigen-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33ae01af280978c65c8268d0ff1c1b08", "sha256": "2ab504f4ff6097b5440050733493d2b38be9722be5a0594ae3ee4698e21f65df"}, "downloads": -1, "filename": "pigen-0.1.4.tar.gz", "has_sig": false, "md5_digest": "33ae01af280978c65c8268d0ff1c1b08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6289, "upload_time": "2020-02-08T14:11:48", "upload_time_iso_8601": "2020-02-08T14:11:48.052960Z", "url": "https://files.pythonhosted.org/packages/5e/22/84c8d56b1975eb400b288ac3de84342991b62867348d222dc79e6d978555/pigen-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "da90501743c46be32c4488db20f2bb8b", "sha256": "caae9359d886a74ba8f1f200df860a0891b67da22a8b625904467bc05f0ba3ae"}, "downloads": -1, "filename": "pigen-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da90501743c46be32c4488db20f2bb8b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 5364, "upload_time": "2020-02-08T14:21:10", "upload_time_iso_8601": "2020-02-08T14:21:10.103651Z", "url": "https://files.pythonhosted.org/packages/75/30/71b8f4e02eb910a02f72351a4cbdd64f39d567f2eaf6a9cfbafdd0309246/pigen-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d86da681ef855976737e100b8a30764", "sha256": "00a81f97cb106268c1f80df4add4440e6dbd264ec30d548a375fee423ab3435f"}, "downloads": -1, "filename": "pigen-0.1.5.tar.gz", "has_sig": false, "md5_digest": "6d86da681ef855976737e100b8a30764", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6285, "upload_time": "2020-02-08T14:21:11", "upload_time_iso_8601": "2020-02-08T14:21:11.249680Z", "url": "https://files.pythonhosted.org/packages/05/c7/a983cabee8d92c098032f4b6446fbb8f9f69ba9a7c6f475541f08be78a8e/pigen-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da90501743c46be32c4488db20f2bb8b", "sha256": "caae9359d886a74ba8f1f200df860a0891b67da22a8b625904467bc05f0ba3ae"}, "downloads": -1, "filename": "pigen-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da90501743c46be32c4488db20f2bb8b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 5364, "upload_time": "2020-02-08T14:21:10", "upload_time_iso_8601": "2020-02-08T14:21:10.103651Z", "url": "https://files.pythonhosted.org/packages/75/30/71b8f4e02eb910a02f72351a4cbdd64f39d567f2eaf6a9cfbafdd0309246/pigen-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d86da681ef855976737e100b8a30764", "sha256": "00a81f97cb106268c1f80df4add4440e6dbd264ec30d548a375fee423ab3435f"}, "downloads": -1, "filename": "pigen-0.1.5.tar.gz", "has_sig": false, "md5_digest": "6d86da681ef855976737e100b8a30764", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6285, "upload_time": "2020-02-08T14:21:11", "upload_time_iso_8601": "2020-02-08T14:21:11.249680Z", "url": "https://files.pythonhosted.org/packages/05/c7/a983cabee8d92c098032f4b6446fbb8f9f69ba9a7c6f475541f08be78a8e/pigen-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:52 2020"}