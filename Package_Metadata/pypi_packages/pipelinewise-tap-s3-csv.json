{"info": {"author": "TransferWise", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Affero General Public License v3", "Programming Language :: Python :: 3 :: Only"], "description": "# pipelinewise-tap-s3-csv\n\n[![PyPI version](https://badge.fury.io/py/pipelinewise-tap-s3-csv.svg)](https://badge.fury.io/py/pipelinewise-tap-s3-csv)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pipelinewise-tap-s3-csv.svg)](https://pypi.org/project/pipelinewise-tap-s3-csv/)\n[![License: MIT](https://img.shields.io/badge/License-GPLv3-yellow.svg)](https://opensource.org/licenses/GPL-3.0)\n\nThis is a [Singer](https://singer.io) tap that reads data from files located inside a given S3 bucket and produces JSON-formatted data following the [Singer spec](https://github.com/singer-io/getting-started/blob/master/SPEC.md).\n\nThis is a [PipelineWise](https://transferwise.github.io/pipelinewise) compatible tap connector.\n\n## How to use it\n\nThe recommended method of running this tap is to use it from [PipelineWise](https://transferwise.github.io/pipelinewise). When running it from PipelineWise you don't need to configure this tap with JSON files and most of things are automated. Please check the related documentation at [Tap S3 CSV](https://transferwise.github.io/pipelinewise/connectors/taps/s3_csv.html)\n\nIf you want to run this [Singer Tap](https://singer.io) independently please read further.\n\n### Install and Run\n\nFirst, make sure Python 3 is installed on your system or follow these\ninstallation instructions for [Mac](http://docs.python-guide.org/en/latest/starting/install3/osx/) or\n[Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04).\n\nIt's recommended to use a virtualenv:\n\n```bash\n  python3 -m venv venv\n  pip install pipelinewise-tap-s3-csv\n```\n\nor\n\n```bash\n  python3 -m venv venv\n  . venv/bin/activate\n  pip install --upgrade pip\n  pip install .\n```\n\n### Configuration\n\nHere is an example of basic config, and a bit of a run down on each of the properties:\n\n    ```json\n    {\n        \"aws_access_key_id\": \"ACCESS_KEY\",\n        \"aws_secret_access_key\": \"SECRET_ACCESS_KEY\",\n        \"start_date\": \"2000-01-01T00:00:00Z\",\n        \"bucket\": \"tradesignals-crawler\",\n        \"tables\": [{\n            \"search_prefix\": \"feeds\",\n            \"search_pattern\": \".csv\",\n            \"table_name\": \"my_table\",\n            \"key_properties\": [\"id\"],\n            \"delimiter\": \",\"\n        }]\n    }\n    ```\n- **aws_access_key_id**: AWS access key ID\n- **aws_secret_access_key**: AWS secret access key\n- **aws_endpoint_url**: (Optional): The complete URL to use for the constructed client. Normally, botocore will automatically construct the appropriate URL to use when communicating with a service. You can specify a complete URL (including the \"http/https\" scheme) to override this behavior. For example https://nyc3.digitaloceanspaces.com\n- **start_date**: This is the datetime that the tap will use to look for newly updated or created files, based on the modified timestamp of the file.\n- **bucket**: The name of the bucket to search for files under.\n- **tables**: JSON object that the tap will use to search for files, and emit records as \"tables\" from those files. \n\nThe `table` field consists of one or more objects, that describe how to find files and emit records. A more detailed (and unescaped) example below:\n\n```\n[\n    {\n        \"search_prefix\": \"exports\"\n        \"search_pattern\": \"my_table\\\\/.*\\\\.csv\",\n        \"table_name\": \"my_table\",\n        \"key_properties\": [\"id\"],\n        \"date_overrides\": [\"created_at\"],\n        \"delimiter\": \",\"\n    },\n    ...\n]\n```\n\n- **search_prefix**: This is a prefix to apply after the bucket, but before the file search pattern, to allow you to find files in \"directories\" below the bucket.\n- **search_pattern**: This is an escaped regular expression that the tap will use to find files in the bucket + prefix. It's a bit strange, since this is an escaped string inside of an escaped string, any backslashes in the RegEx will need to be double-escaped.\n- **table_name**: This value is a string of your choosing, and will be used to name the stream that records are emitted under for files matching content.\n- **key_properties**: These are the \"primary keys\" of the CSV files, to be used by the target for deduplication and primary key definitions downstream in the destination.\n- **date_overrides**: Specifies field names in the files that are supposed to be parsed as a datetime. The tap doesn't attempt to automatically determine if a field is a datetime, so this will make it explicit in the discovered schema.\n- **delimiter**: This allows you to specify a custom delimiter, such as `\\t` or `|`, if that applies to your files.\n\nA sample configuration is available inside [config.sample.json](config.sample.json)\n\n---\n\nBased on Stitch documentation\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/transferwise/pipelinewise-tap-s3-csv", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pipelinewise-tap-s3-csv", "package_url": "https://pypi.org/project/pipelinewise-tap-s3-csv/", "platform": "", "project_url": "https://pypi.org/project/pipelinewise-tap-s3-csv/", "project_urls": {"Homepage": "https://github.com/transferwise/pipelinewise-tap-s3-csv"}, "release_url": "https://pypi.org/project/pipelinewise-tap-s3-csv/1.1.0/", "requires_dist": ["boto3 (==1.9.57)", "singer-encodings (==0.0.*)", "pipelinewise-singer-python (==1.*)", "voluptuous (==0.10.5)", "ujson (==1.35.*)", "messytables (==0.15.*)", "ipdb (==0.11) ; extra == 'dev'", "nose (==1.3.*) ; extra == 'test'", "pylint (==2.4.*) ; extra == 'test'"], "requires_python": "", "summary": "Singer.io tap for extracting CSV files from S3 - PipelineWise compatible", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pipelinewise-tap-s3-csv</h1>\n<p><a href=\"https://badge.fury.io/py/pipelinewise-tap-s3-csv\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/94a15b94bd2c5077e677182cd76b30608a05682a/68747470733a2f2f62616467652e667572792e696f2f70792f706970656c696e65776973652d7461702d73332d6373762e737667\"></a>\n<a href=\"https://pypi.org/project/pipelinewise-tap-s3-csv/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acf584e589c62a2e7b165817c4e77e2121b0df64/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f706970656c696e65776973652d7461702d73332d6373762e737667\"></a>\n<a href=\"https://opensource.org/licenses/GPL-3.0\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f103c9b4ae6eaa684967bbaee8c507c609ff5ca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d79656c6c6f772e737667\"></a></p>\n<p>This is a <a href=\"https://singer.io\" rel=\"nofollow\">Singer</a> tap that reads data from files located inside a given S3 bucket and produces JSON-formatted data following the <a href=\"https://github.com/singer-io/getting-started/blob/master/SPEC.md\" rel=\"nofollow\">Singer spec</a>.</p>\n<p>This is a <a href=\"https://transferwise.github.io/pipelinewise\" rel=\"nofollow\">PipelineWise</a> compatible tap connector.</p>\n<h2>How to use it</h2>\n<p>The recommended method of running this tap is to use it from <a href=\"https://transferwise.github.io/pipelinewise\" rel=\"nofollow\">PipelineWise</a>. When running it from PipelineWise you don't need to configure this tap with JSON files and most of things are automated. Please check the related documentation at <a href=\"https://transferwise.github.io/pipelinewise/connectors/taps/s3_csv.html\" rel=\"nofollow\">Tap S3 CSV</a></p>\n<p>If you want to run this <a href=\"https://singer.io\" rel=\"nofollow\">Singer Tap</a> independently please read further.</p>\n<h3>Install and Run</h3>\n<p>First, make sure Python 3 is installed on your system or follow these\ninstallation instructions for <a href=\"http://docs.python-guide.org/en/latest/starting/install3/osx/\" rel=\"nofollow\">Mac</a> or\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04\" rel=\"nofollow\">Ubuntu</a>.</p>\n<p>It's recommended to use a virtualenv:</p>\n<pre>  python3 -m venv venv\n  pip install pipelinewise-tap-s3-csv\n</pre>\n<p>or</p>\n<pre>  python3 -m venv venv\n  . venv/bin/activate\n  pip install --upgrade pip\n  pip install .\n</pre>\n<h3>Configuration</h3>\n<p>Here is an example of basic config, and a bit of a run down on each of the properties:</p>\n<pre><code>```json\n{\n    \"aws_access_key_id\": \"ACCESS_KEY\",\n    \"aws_secret_access_key\": \"SECRET_ACCESS_KEY\",\n    \"start_date\": \"2000-01-01T00:00:00Z\",\n    \"bucket\": \"tradesignals-crawler\",\n    \"tables\": [{\n        \"search_prefix\": \"feeds\",\n        \"search_pattern\": \".csv\",\n        \"table_name\": \"my_table\",\n        \"key_properties\": [\"id\"],\n        \"delimiter\": \",\"\n    }]\n}\n```\n</code></pre>\n<ul>\n<li><strong>aws_access_key_id</strong>: AWS access key ID</li>\n<li><strong>aws_secret_access_key</strong>: AWS secret access key</li>\n<li><strong>aws_endpoint_url</strong>: (Optional): The complete URL to use for the constructed client. Normally, botocore will automatically construct the appropriate URL to use when communicating with a service. You can specify a complete URL (including the \"http/https\" scheme) to override this behavior. For example <a href=\"https://nyc3.digitaloceanspaces.com\" rel=\"nofollow\">https://nyc3.digitaloceanspaces.com</a></li>\n<li><strong>start_date</strong>: This is the datetime that the tap will use to look for newly updated or created files, based on the modified timestamp of the file.</li>\n<li><strong>bucket</strong>: The name of the bucket to search for files under.</li>\n<li><strong>tables</strong>: JSON object that the tap will use to search for files, and emit records as \"tables\" from those files.</li>\n</ul>\n<p>The <code>table</code> field consists of one or more objects, that describe how to find files and emit records. A more detailed (and unescaped) example below:</p>\n<pre><code>[\n    {\n        \"search_prefix\": \"exports\"\n        \"search_pattern\": \"my_table\\\\/.*\\\\.csv\",\n        \"table_name\": \"my_table\",\n        \"key_properties\": [\"id\"],\n        \"date_overrides\": [\"created_at\"],\n        \"delimiter\": \",\"\n    },\n    ...\n]\n</code></pre>\n<ul>\n<li><strong>search_prefix</strong>: This is a prefix to apply after the bucket, but before the file search pattern, to allow you to find files in \"directories\" below the bucket.</li>\n<li><strong>search_pattern</strong>: This is an escaped regular expression that the tap will use to find files in the bucket + prefix. It's a bit strange, since this is an escaped string inside of an escaped string, any backslashes in the RegEx will need to be double-escaped.</li>\n<li><strong>table_name</strong>: This value is a string of your choosing, and will be used to name the stream that records are emitted under for files matching content.</li>\n<li><strong>key_properties</strong>: These are the \"primary keys\" of the CSV files, to be used by the target for deduplication and primary key definitions downstream in the destination.</li>\n<li><strong>date_overrides</strong>: Specifies field names in the files that are supposed to be parsed as a datetime. The tap doesn't attempt to automatically determine if a field is a datetime, so this will make it explicit in the discovered schema.</li>\n<li><strong>delimiter</strong>: This allows you to specify a custom delimiter, such as <code>\\t</code> or <code>|</code>, if that applies to your files.</li>\n</ul>\n<p>A sample configuration is available inside <a href=\"config.sample.json\" rel=\"nofollow\">config.sample.json</a></p>\n<hr>\n<p>Based on Stitch documentation</p>\n\n          </div>"}, "last_serial": 6666485, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "089c78b756e883c34dd7df31f68fbecb", "sha256": "016bd649a689cfb6c67b3b23a02a9530a028091ef30708e642704ec62ae995b4"}, "downloads": -1, "filename": "pipelinewise_tap_s3_csv-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "089c78b756e883c34dd7df31f68fbecb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19784, "upload_time": "2019-05-28T22:20:59", "upload_time_iso_8601": "2019-05-28T22:20:59.278930Z", "url": "https://files.pythonhosted.org/packages/4e/95/d0d5af993d66d198a5a61e2c240aeba0f16484eb18470cf051447ae92216/pipelinewise_tap_s3_csv-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0663dc28f8f910260beb24ccb9be0fb7", "sha256": "a820cc8b798ca8c88dc8bc0f8a3a3b21ac6071b8e752688bfd33a8974a08f162"}, "downloads": -1, "filename": "pipelinewise-tap-s3-csv-1.0.3.tar.gz", "has_sig": false, "md5_digest": "0663dc28f8f910260beb24ccb9be0fb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8174, "upload_time": "2019-05-28T22:21:01", "upload_time_iso_8601": "2019-05-28T22:21:01.672097Z", "url": "https://files.pythonhosted.org/packages/a3/e1/63ec4f46ec59fafea12e2184598dd110e304beddc7ffd2b5c94bcb1ad59e/pipelinewise-tap-s3-csv-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "fefc15cabbcf89f08408aeedefb130de", "sha256": "66d7099b92c989a1d832a099438497d1554d5d51e236c9d4bedd546fbcd45a35"}, "downloads": -1, "filename": "pipelinewise-tap-s3-csv-1.0.4.tar.gz", "has_sig": false, "md5_digest": "fefc15cabbcf89f08408aeedefb130de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8342, "upload_time": "2019-08-16T15:53:28", "upload_time_iso_8601": "2019-08-16T15:53:28.431119Z", "url": "https://files.pythonhosted.org/packages/da/72/36af756b27cd49a9486319786a7339fecc6c16074d6a3f49447ef70411a4/pipelinewise-tap-s3-csv-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "41c53750bb03efaf5b244adf833776d3", "sha256": "92967c1aed8a895f9d55baad3c939f4ee0c8fdd30c10907e74bde96b96aa9d47"}, "downloads": -1, "filename": "pipelinewise-tap-s3-csv-1.0.5.tar.gz", "has_sig": false, "md5_digest": "41c53750bb03efaf5b244adf833776d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8684, "upload_time": "2019-09-10T19:48:27", "upload_time_iso_8601": "2019-09-10T19:48:27.050154Z", "url": "https://files.pythonhosted.org/packages/48/4d/6a3431efd75a1b3bd066977f70621ec9de23cb7f4ff97579ea79cf855727/pipelinewise-tap-s3-csv-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "4874cd5fb3ac2bfeed944d151c73fdab", "sha256": "ea53236560a5f73ff0b91c9625e987ab04793de3aefe410773998779a085033a"}, "downloads": -1, "filename": "pipelinewise_tap_s3_csv-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4874cd5fb3ac2bfeed944d151c73fdab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23379, "upload_time": "2019-12-04T10:05:43", "upload_time_iso_8601": "2019-12-04T10:05:43.108010Z", "url": "https://files.pythonhosted.org/packages/d8/44/5c8e481a056cf16dd1089b1493c7ee879ba7e26c7794691e8d383f53a11a/pipelinewise_tap_s3_csv-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a48610d219d99124a66536c911ac587", "sha256": "a4f69a50c746804aea53d850462d783f569950bcb80a29ff0b62bbc1561f9031"}, "downloads": -1, "filename": "pipelinewise-tap-s3-csv-1.0.6.tar.gz", "has_sig": false, "md5_digest": "4a48610d219d99124a66536c911ac587", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11870, "upload_time": "2019-12-04T10:05:45", "upload_time_iso_8601": "2019-12-04T10:05:45.050085Z", "url": "https://files.pythonhosted.org/packages/90/69/a92d4417008723a1feed62e5f4604f94b4b3e35d113fa17c39a74ac8c5e3/pipelinewise-tap-s3-csv-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "28cb0582ccfb1a9b5c6441a64b6635df", "sha256": "d95dee5d7e1f621046988670649780200233824fc7f9087b380d67f0daa1a8f7"}, "downloads": -1, "filename": "pipelinewise_tap_s3_csv-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "28cb0582ccfb1a9b5c6441a64b6635df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23287, "upload_time": "2020-01-07T11:43:50", "upload_time_iso_8601": "2020-01-07T11:43:50.928828Z", "url": "https://files.pythonhosted.org/packages/32/9f/9ce347c549b933fecf14dde1725142d9c4092cd18e41e9d475a319adb875/pipelinewise_tap_s3_csv-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3945db8a4412bcad1130c0346a46ccf0", "sha256": "36dab40835dac2b4fcef82eeadc35d5f61024b8df836adf324018f9c88eb51bf"}, "downloads": -1, "filename": "pipelinewise-tap-s3-csv-1.0.7.tar.gz", "has_sig": false, "md5_digest": "3945db8a4412bcad1130c0346a46ccf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10171, "upload_time": "2020-01-07T11:43:52", "upload_time_iso_8601": "2020-01-07T11:43:52.581015Z", "url": "https://files.pythonhosted.org/packages/0d/e8/bdd845cb999d8d05351f26e5aef45459b8e026f2e0b3901ac090c0122ec1/pipelinewise-tap-s3-csv-1.0.7.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "71d77bc9ff58ce510ab7ef2fb23fbf4f", "sha256": "368d4e823e50a5152360268d5ef0b51125ff82db6c1ba8aaf6309abae3af0a64"}, "downloads": -1, "filename": "pipelinewise_tap_s3_csv-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "71d77bc9ff58ce510ab7ef2fb23fbf4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23251, "upload_time": "2020-02-20T08:05:30", "upload_time_iso_8601": "2020-02-20T08:05:30.376410Z", "url": "https://files.pythonhosted.org/packages/b8/92/496b638f23b2edaac34715b82ca0cfc5e0fc6b2716d5c44ad613210176c3/pipelinewise_tap_s3_csv-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b78fdea0ca896cfcf700f65eba774920", "sha256": "21059b1b62238ed6e09566adacf3d2543855c3b9de43d7222b229af112edfbf9"}, "downloads": -1, "filename": "pipelinewise-tap-s3-csv-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b78fdea0ca896cfcf700f65eba774920", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10164, "upload_time": "2020-02-20T08:05:31", "upload_time_iso_8601": "2020-02-20T08:05:31.541880Z", "url": "https://files.pythonhosted.org/packages/8d/b7/272df46f30ca7266b147a8708b210c0400619f1f527d9f6e1ccde96ccbe8/pipelinewise-tap-s3-csv-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71d77bc9ff58ce510ab7ef2fb23fbf4f", "sha256": "368d4e823e50a5152360268d5ef0b51125ff82db6c1ba8aaf6309abae3af0a64"}, "downloads": -1, "filename": "pipelinewise_tap_s3_csv-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "71d77bc9ff58ce510ab7ef2fb23fbf4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23251, "upload_time": "2020-02-20T08:05:30", "upload_time_iso_8601": "2020-02-20T08:05:30.376410Z", "url": "https://files.pythonhosted.org/packages/b8/92/496b638f23b2edaac34715b82ca0cfc5e0fc6b2716d5c44ad613210176c3/pipelinewise_tap_s3_csv-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b78fdea0ca896cfcf700f65eba774920", "sha256": "21059b1b62238ed6e09566adacf3d2543855c3b9de43d7222b229af112edfbf9"}, "downloads": -1, "filename": "pipelinewise-tap-s3-csv-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b78fdea0ca896cfcf700f65eba774920", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10164, "upload_time": "2020-02-20T08:05:31", "upload_time_iso_8601": "2020-02-20T08:05:31.541880Z", "url": "https://files.pythonhosted.org/packages/8d/b7/272df46f30ca7266b147a8708b210c0400619f1f527d9f6e1ccde96ccbe8/pipelinewise-tap-s3-csv-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:19 2020"}