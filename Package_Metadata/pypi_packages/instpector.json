{"info": {"author": "Erik Lopez", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Instpector\n\nA simple Instagram's web API library written in Python. Supports login with two-factor authentication enabled. No selenium or webdriver required.\n\n## Installation\n\n```\npip install instpector\n```\n\n# Sample usage\n\n```python\nfrom instpector import Instpector, endpoints\n\ninstpector = Instpector()\ninstpector.login(\"my_username\", \"my_password\")\n\nprofile = endpoints.factory.create(\"profile\", instpector)\nfollowers = endpoints.factory.create(\"followers\", instpector)\n\ninsta_profile = profile.of_user(\"some_username\")\n\n# Loop through all followers\nfor follower in followers.of_user(insta_profile.id):\n    print(follower.username)\n\ninstpector.logout()\n```\n\n## Using 2FA\nFor login in using two-factor authentication, generate your 2fa key once on the  Instagram's app and provide the code when logging in with `instpector`. The following example uses `pytop` library to demonstrate the usage:\n\n```python\nfrom pyotp import TOTP\nfrom instpector import Instpector, endpoints\n\ninstpector = Instpector()\ntotp = TOTP(\"my_2fa_key\") # Input without spaces\n\n# Login into Instagram's web\ninstpector.login(\"my_username\", \"my_password\", totp.now())\n```\n\n# Examples\n\nCheck out more examples [here](https://github.com/niuware/instpector/tree/master/examples).\n\n# Endpoints\n\n- Followers   \n- Following   \n- Timeline   \n- Comments\n- Profile   \n- Story Reel    \n- Story    \n\nMore to come\n\n# API\n\n## Classes\n\n`Instpector`\n\n|Method|Details|\n|---|---|\n|login(user: `str`, password: `str`, two_factor_code: `str` = None) -> `bool`|Login to an Instagram account. If your account is 2FA protected provide the 2FA code as in the [provided example](https://github.com/niuware/instpector/blob/master/examples/two_factor_auth.py).|\n|logout()|Logouts from an Instagram account.|\n|session() -> `Session`|Returns the current session used by `instpector`.|\n\n`EndpointFactory`\n\n|Method|Details|\n|---|---|\n|create(endpoint_name: `str`, instpector_instance: `Instpector`)|Creates and returns an endpoint instance based on the provided name. Available endpoint names are: `\"followers\"`, `\"following\"`, `\"profile\"`, `\"timeline\"`, `\"comments\"` `\"story_reel\"` and `\"story\"`.|\n\n## Endpoints\n\n### Profile\n\nGets the profile of any public or friend user account.\n\n|Method|Details|\n|---|---|\n|of_user(username: `str`) -> `TProfile`|Returns a `TProfile` instance for the provided username.|\n|follow(user: `TProfile` \\| `str`) -> `bool`|Follows a user. You can provide a `TProfile` instance or an Instagram's user Id.|\n|unfollow(user: `TProfile` \\| `str`) -> `bool`|Unfollows a user. You can provide a `TProfile` instance or an Instagram's user Id.|\n|activity() -> `TActivity`|Yields a list of `TActivity` items for the current logged in account.|\n\n### Followers\n\nEndpoint for accessing the follower list of any public or friend user account.\n\n|Method|Details|\n|---|---|\n|of_user(user_id: `str`) -> `TUser`|Yields a list of `TUser` instances with all followers. Note the method receives a user id and not a username. To get the user id use the `Profile` endpoint.|\n\n### Following\n\nEndpoint for accessing the followees list of any public or friend user account.\n\n|Method|Details|\n|---|---|\n|of_user(user_id: `str`) -> `TUser` |Yields a list of `TUser` instances with all followees. Note the method receives a user id and not a username. To get the user id use the `Profile` endpoint.|\n\n### Timeline\n\nEndpoint for accessing the timeline of any public or friend account.\n\n|Method|Details|\n|---|---|\n|of_user(user_id: `str`) -> `TTimelinePost`|Yields a list of `TTimelinePost` instances with all timeline posts. Note the method receives a user id and not a username. To get the user id use the `Profile` endpoint.|\n|download(timeline_post: `TTimelinePost`, only_image: `bool` = False, low_quality: `bool` = False)|Downloads and save the available resources (image and video) for the provided `TTimelinePost`. The file name convention is `ownerid_resourceid.extension` and saved in the execution directory. If `low_quality` is `True` the resource will be the downloaded with the lowest size available (only for image). If `only_image` is `True` a video file resource won't be downloaded.|\n|like(timeline_post: `TTimelinePost` \\| `TActivityPost`) -> `bool`|Likes a post.|\n|unlike(timeline_post: `TTimelinePost` \\| `TActivityPost`) -> `bool`|Unlikes a post.|\n\n### Comments\n\nEndponint for accessing comments and threaded comments of any public or friends post or comment.\n\n|Method|Details|\n|---|---|\n|of_post(timeline_post: `TTimelinePost` \\| `TActivityPost`) -> `TComment`|Yields a list of `TComment` instances with all post comments.|\n|of_comment(comment: `TComment`) -> `TComment`|Yields a list of `TComment` instances with all threaded comments of a comment.|\n|like(comment: `TComment`) -> `bool`|Likes a comment.|\n|unlike(comment: `TComment`) -> `bool`|Unlikes a comment.|\n|add(timeline_post: `TTimelinePost` \\| `TActivityPost`, text: `str`, parent_comment: `TComment` = None) -> `TComment` \\| `None`|Adds a new comment to a post. You can reply to a comment if `parent_comment` argument is provided. An instance of the created comment is return if succeeded otherwise `None`.|\n|remove(timeline_post: `TTimelinePost` \\| `TActivityPost`, comment: `TComment`) -> `bool`|Removes a comment from a post. Only comments authored by the current logged in account can be removed.|\n\n### StoryReel\n\nEndpoint for accessing the story reel (stories) of any public or friend user account.\n\n|Method|Details|\n|---|---|\n|of_user(user_id: `str`) -> `TStoryReelItem`|Yields a list of `TStoryReelItem` instances with all stories. Note the method receives a user id and not a username. To get a user id use the `Profile` endpoint.|\n|download(story_item: `TStoryReelItem`, only_image: `bool` = False, low_quality: `bool` = False)|Downloads and save the available resources (image and video) for the provided `TStoryReelItem`. The file name convention is `ownerid_resourceid.extension` and saved in the execution directory. If `low_quality` is `True` the resource will be the downloaded with the lowest size available. If `only_image` is `True` a video file resource won't be downloaded.|\n\n### Story\n\nEndpoint for accessing the story details of a story reel item. This endpoint is only available for stories posted by the current logged in user.\n\n|Method|Details|\n|---|---|\n|viewers_for(story_id: `str`) -> `TStoryViewer`|Yields a list of `TStoryViewer` instances with all viewers of the provided story id.|\n\n## Types\n\n### TUser\n\n|Field|Type|Details|\n|---|---|---|\n|id|`str`|The Instagram Id of the user|\n|username|`str`|The user's name|\n|full_name|`str`|The full name of the user|\n|is_private|`bool`|A flag to show if the user account is private|\n\n### TProfile\n\n|Field|Type|Details|\n|---|---|---|\n|id|`str`|The Instagram Id of the user|\n|username|`str`|The user's name|\n|biography|`str`|The biography of the user|\n|is_private|`bool`|A flag to show if the user account is private|\n|followers_count|`integer`|The follower count of the user|\n|following_count|`integer`|The following count of the user|\n\n### TTimelinePost\n|Field|Type|Details|\n|---|---|---|\n|id|`str`|The Instagram Id of the post|\n|shortcode|`str`|The Instagram shortcode Id of the post|\n|owner|`str`|The post author's Instagram Id|\n|timestamp|`integer`|The created timestamp of the post|\n|caption|`str`|The caption of the post|\n|is_video|`bool`|A flag to know if the post is a video|\n|like_count|`integer`|The like count of the post|\n|comment_count|`integer`|The comment count of the post|\n|display_resources|`list`|A list of image URL strings associated with the post|\n|video_url|`str`|The video URL (if available) associated with the post|\n\n### TComment\n|Field|Type|Details|\n|---|---|---|\n|id|`str`|The Instagram Id of the comment|\n|text|`str`|The text of the comment|\n|username|`str`|The author's username|\n|timestamp|`integer`|The timestamp of the comment|\n|viewer_has_liked|`bool`|A flag to know if the viewer liked the comment|\n|liked_count|`integer`|The like count of the comment|\n|thread_count|`integer` \\| `None`|The comment's thread comments count. This value is `None` if the instance is a threaded comment.|\n\n### TStoryReelItem\n|Field|Type|Details|\n|---|---|---|\n|id|`str`|The Instagram Id of the story|\n|owner|`str`|The story author's Instagram Id|\n|timestamp|`integer`|The created timestamp of the story|\n|expire_at|`integer`|The expiration timestamp of the story|\n|audience|`str`|The type of audience of the story. If public the value is `MediaAudience.DEFAULT`, if private the value is `MediaAudience.BESTIES`|\n|is_video|`bool`|A flag to know if the story is a video|\n|view_count|`integer`|The view count of the story. The count is only available for stories posted by the currently logged in user. Other accounts will have a count equal to `0`|\n|display_resources|`list`|A list of image URL strings associated with the story|\n|video_resources|`list`|A list of video URL strings associated with the story|\n\n### TStoryViewer\n|Field|Type|Details|\n|---|---|---|\n|id|`str`|The Instagram Id of the story viewer|\n|username|`str`|The user name of the viewer|\n\n### TActivity\n|Field|Type|Details|\n|---|---|---|\n|id|`str`|The Instagram Id of the activity|\n|timestamp|`integer`|The timestamp of the activity|\n|username|`str`|The user name linked to the activity|\n|activity_type|`str`|The activity type. Either `NEW_LIKE` or `NEW_FOLLOW`|\n|liked_post|`TActivityPost` \\| `None`|If the activity type is `NEW_LIKE`, an `TActivityPost` instance is returned|\n\n### TActivityPost\n|Field|Type|Details|\n|---|---|---|\n|id|`str`|The Instagram Id of the post|\n|shortcode|`str`|The Instagram shortcode Id of the post|\n|thumbnail_resources|`list`|A list of thumbnails URL strings associated with the post|\n\n# Development dependencies\n\n- requests\n\n# Tests\n\n1. Create a `pytest.ini` file with the sample contents of  `pytest.sample.ini` in the `tests` directory.\n\n2. Add your account information. \n3. Run with `pytest`:\n```\n(env)$ pytest -qs tests\n```\n\n# Disclaimer\n\nThis tool is not affiliated with, authorized, maintained or endorsed by Instagram or any of its affiliates or subsidiaries. Use at your own risk.\n\n# License\n\nLicensed under MIT License.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/niuware/instpector/archive/0.2.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/niuware/instpector", "keywords": "instagram web-api instagram-client", "license": "", "maintainer": "", "maintainer_email": "", "name": "instpector", "package_url": "https://pypi.org/project/instpector/", "platform": "", "project_url": "https://pypi.org/project/instpector/", "project_urls": {"Download": "https://github.com/niuware/instpector/archive/0.2.2.tar.gz", "Homepage": "https://github.com/niuware/instpector"}, "release_url": "https://pypi.org/project/instpector/0.2.6/", "requires_dist": null, "requires_python": "", "summary": "A simple Instagram's web API library", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Instpector</h1>\n<p>A simple Instagram's web API library written in Python. Supports login with two-factor authentication enabled. No selenium or webdriver required.</p>\n<h2>Installation</h2>\n<pre><code>pip install instpector\n</code></pre>\n<h1>Sample usage</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">instpector</span> <span class=\"kn\">import</span> <span class=\"n\">Instpector</span><span class=\"p\">,</span> <span class=\"n\">endpoints</span>\n\n<span class=\"n\">instpector</span> <span class=\"o\">=</span> <span class=\"n\">Instpector</span><span class=\"p\">()</span>\n<span class=\"n\">instpector</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s2\">\"my_username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my_password\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">endpoints</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"profile\"</span><span class=\"p\">,</span> <span class=\"n\">instpector</span><span class=\"p\">)</span>\n<span class=\"n\">followers</span> <span class=\"o\">=</span> <span class=\"n\">endpoints</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"followers\"</span><span class=\"p\">,</span> <span class=\"n\">instpector</span><span class=\"p\">)</span>\n\n<span class=\"n\">insta_profile</span> <span class=\"o\">=</span> <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">of_user</span><span class=\"p\">(</span><span class=\"s2\">\"some_username\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Loop through all followers</span>\n<span class=\"k\">for</span> <span class=\"n\">follower</span> <span class=\"ow\">in</span> <span class=\"n\">followers</span><span class=\"o\">.</span><span class=\"n\">of_user</span><span class=\"p\">(</span><span class=\"n\">insta_profile</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">follower</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n\n<span class=\"n\">instpector</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">()</span>\n</pre>\n<h2>Using 2FA</h2>\n<p>For login in using two-factor authentication, generate your 2fa key once on the  Instagram's app and provide the code when logging in with <code>instpector</code>. The following example uses <code>pytop</code> library to demonstrate the usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyotp</span> <span class=\"kn\">import</span> <span class=\"n\">TOTP</span>\n<span class=\"kn\">from</span> <span class=\"nn\">instpector</span> <span class=\"kn\">import</span> <span class=\"n\">Instpector</span><span class=\"p\">,</span> <span class=\"n\">endpoints</span>\n\n<span class=\"n\">instpector</span> <span class=\"o\">=</span> <span class=\"n\">Instpector</span><span class=\"p\">()</span>\n<span class=\"n\">totp</span> <span class=\"o\">=</span> <span class=\"n\">TOTP</span><span class=\"p\">(</span><span class=\"s2\">\"my_2fa_key\"</span><span class=\"p\">)</span> <span class=\"c1\"># Input without spaces</span>\n\n<span class=\"c1\"># Login into Instagram's web</span>\n<span class=\"n\">instpector</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s2\">\"my_username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my_password\"</span><span class=\"p\">,</span> <span class=\"n\">totp</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n</pre>\n<h1>Examples</h1>\n<p>Check out more examples <a href=\"https://github.com/niuware/instpector/tree/master/examples\" rel=\"nofollow\">here</a>.</p>\n<h1>Endpoints</h1>\n<ul>\n<li>Followers</li>\n<li>Following</li>\n<li>Timeline</li>\n<li>Comments</li>\n<li>Profile</li>\n<li>Story Reel</li>\n<li>Story</li>\n</ul>\n<p>More to come</p>\n<h1>API</h1>\n<h2>Classes</h2>\n<p><code>Instpector</code></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>login(user: <code>str</code>, password: <code>str</code>, two_factor_code: <code>str</code> = None) -&gt; <code>bool</code></td>\n<td>Login to an Instagram account. If your account is 2FA protected provide the 2FA code as in the <a href=\"https://github.com/niuware/instpector/blob/master/examples/two_factor_auth.py\" rel=\"nofollow\">provided example</a>.</td>\n</tr>\n<tr>\n<td>logout()</td>\n<td>Logouts from an Instagram account.</td>\n</tr>\n<tr>\n<td>session() -&gt; <code>Session</code></td>\n<td>Returns the current session used by <code>instpector</code>.</td>\n</tr></tbody></table>\n<p><code>EndpointFactory</code></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>create(endpoint_name: <code>str</code>, instpector_instance: <code>Instpector</code>)</td>\n<td>Creates and returns an endpoint instance based on the provided name. Available endpoint names are: <code>\"followers\"</code>, <code>\"following\"</code>, <code>\"profile\"</code>, <code>\"timeline\"</code>, <code>\"comments\"</code> <code>\"story_reel\"</code> and <code>\"story\"</code>.</td>\n</tr></tbody></table>\n<h2>Endpoints</h2>\n<h3>Profile</h3>\n<p>Gets the profile of any public or friend user account.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>of_user(username: <code>str</code>) -&gt; <code>TProfile</code></td>\n<td>Returns a <code>TProfile</code> instance for the provided username.</td>\n</tr>\n<tr>\n<td>follow(user: <code>TProfile</code> | <code>str</code>) -&gt; <code>bool</code></td>\n<td>Follows a user. You can provide a <code>TProfile</code> instance or an Instagram's user Id.</td>\n</tr>\n<tr>\n<td>unfollow(user: <code>TProfile</code> | <code>str</code>) -&gt; <code>bool</code></td>\n<td>Unfollows a user. You can provide a <code>TProfile</code> instance or an Instagram's user Id.</td>\n</tr>\n<tr>\n<td>activity() -&gt; <code>TActivity</code></td>\n<td>Yields a list of <code>TActivity</code> items for the current logged in account.</td>\n</tr></tbody></table>\n<h3>Followers</h3>\n<p>Endpoint for accessing the follower list of any public or friend user account.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>of_user(user_id: <code>str</code>) -&gt; <code>TUser</code></td>\n<td>Yields a list of <code>TUser</code> instances with all followers. Note the method receives a user id and not a username. To get the user id use the <code>Profile</code> endpoint.</td>\n</tr></tbody></table>\n<h3>Following</h3>\n<p>Endpoint for accessing the followees list of any public or friend user account.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>of_user(user_id: <code>str</code>) -&gt; <code>TUser</code></td>\n<td>Yields a list of <code>TUser</code> instances with all followees. Note the method receives a user id and not a username. To get the user id use the <code>Profile</code> endpoint.</td>\n</tr></tbody></table>\n<h3>Timeline</h3>\n<p>Endpoint for accessing the timeline of any public or friend account.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>of_user(user_id: <code>str</code>) -&gt; <code>TTimelinePost</code></td>\n<td>Yields a list of <code>TTimelinePost</code> instances with all timeline posts. Note the method receives a user id and not a username. To get the user id use the <code>Profile</code> endpoint.</td>\n</tr>\n<tr>\n<td>download(timeline_post: <code>TTimelinePost</code>, only_image: <code>bool</code> = False, low_quality: <code>bool</code> = False)</td>\n<td>Downloads and save the available resources (image and video) for the provided <code>TTimelinePost</code>. The file name convention is <code>ownerid_resourceid.extension</code> and saved in the execution directory. If <code>low_quality</code> is <code>True</code> the resource will be the downloaded with the lowest size available (only for image). If <code>only_image</code> is <code>True</code> a video file resource won't be downloaded.</td>\n</tr>\n<tr>\n<td>like(timeline_post: <code>TTimelinePost</code> | <code>TActivityPost</code>) -&gt; <code>bool</code></td>\n<td>Likes a post.</td>\n</tr>\n<tr>\n<td>unlike(timeline_post: <code>TTimelinePost</code> | <code>TActivityPost</code>) -&gt; <code>bool</code></td>\n<td>Unlikes a post.</td>\n</tr></tbody></table>\n<h3>Comments</h3>\n<p>Endponint for accessing comments and threaded comments of any public or friends post or comment.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>of_post(timeline_post: <code>TTimelinePost</code> | <code>TActivityPost</code>) -&gt; <code>TComment</code></td>\n<td>Yields a list of <code>TComment</code> instances with all post comments.</td>\n</tr>\n<tr>\n<td>of_comment(comment: <code>TComment</code>) -&gt; <code>TComment</code></td>\n<td>Yields a list of <code>TComment</code> instances with all threaded comments of a comment.</td>\n</tr>\n<tr>\n<td>like(comment: <code>TComment</code>) -&gt; <code>bool</code></td>\n<td>Likes a comment.</td>\n</tr>\n<tr>\n<td>unlike(comment: <code>TComment</code>) -&gt; <code>bool</code></td>\n<td>Unlikes a comment.</td>\n</tr>\n<tr>\n<td>add(timeline_post: <code>TTimelinePost</code> | <code>TActivityPost</code>, text: <code>str</code>, parent_comment: <code>TComment</code> = None) -&gt; <code>TComment</code> | <code>None</code></td>\n<td>Adds a new comment to a post. You can reply to a comment if <code>parent_comment</code> argument is provided. An instance of the created comment is return if succeeded otherwise <code>None</code>.</td>\n</tr>\n<tr>\n<td>remove(timeline_post: <code>TTimelinePost</code> | <code>TActivityPost</code>, comment: <code>TComment</code>) -&gt; <code>bool</code></td>\n<td>Removes a comment from a post. Only comments authored by the current logged in account can be removed.</td>\n</tr></tbody></table>\n<h3>StoryReel</h3>\n<p>Endpoint for accessing the story reel (stories) of any public or friend user account.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>of_user(user_id: <code>str</code>) -&gt; <code>TStoryReelItem</code></td>\n<td>Yields a list of <code>TStoryReelItem</code> instances with all stories. Note the method receives a user id and not a username. To get a user id use the <code>Profile</code> endpoint.</td>\n</tr>\n<tr>\n<td>download(story_item: <code>TStoryReelItem</code>, only_image: <code>bool</code> = False, low_quality: <code>bool</code> = False)</td>\n<td>Downloads and save the available resources (image and video) for the provided <code>TStoryReelItem</code>. The file name convention is <code>ownerid_resourceid.extension</code> and saved in the execution directory. If <code>low_quality</code> is <code>True</code> the resource will be the downloaded with the lowest size available. If <code>only_image</code> is <code>True</code> a video file resource won't be downloaded.</td>\n</tr></tbody></table>\n<h3>Story</h3>\n<p>Endpoint for accessing the story details of a story reel item. This endpoint is only available for stories posted by the current logged in user.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>viewers_for(story_id: <code>str</code>) -&gt; <code>TStoryViewer</code></td>\n<td>Yields a list of <code>TStoryViewer</code> instances with all viewers of the provided story id.</td>\n</tr></tbody></table>\n<h2>Types</h2>\n<h3>TUser</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td><code>str</code></td>\n<td>The Instagram Id of the user</td>\n</tr>\n<tr>\n<td>username</td>\n<td><code>str</code></td>\n<td>The user's name</td>\n</tr>\n<tr>\n<td>full_name</td>\n<td><code>str</code></td>\n<td>The full name of the user</td>\n</tr>\n<tr>\n<td>is_private</td>\n<td><code>bool</code></td>\n<td>A flag to show if the user account is private</td>\n</tr></tbody></table>\n<h3>TProfile</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td><code>str</code></td>\n<td>The Instagram Id of the user</td>\n</tr>\n<tr>\n<td>username</td>\n<td><code>str</code></td>\n<td>The user's name</td>\n</tr>\n<tr>\n<td>biography</td>\n<td><code>str</code></td>\n<td>The biography of the user</td>\n</tr>\n<tr>\n<td>is_private</td>\n<td><code>bool</code></td>\n<td>A flag to show if the user account is private</td>\n</tr>\n<tr>\n<td>followers_count</td>\n<td><code>integer</code></td>\n<td>The follower count of the user</td>\n</tr>\n<tr>\n<td>following_count</td>\n<td><code>integer</code></td>\n<td>The following count of the user</td>\n</tr></tbody></table>\n<h3>TTimelinePost</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td><code>str</code></td>\n<td>The Instagram Id of the post</td>\n</tr>\n<tr>\n<td>shortcode</td>\n<td><code>str</code></td>\n<td>The Instagram shortcode Id of the post</td>\n</tr>\n<tr>\n<td>owner</td>\n<td><code>str</code></td>\n<td>The post author's Instagram Id</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td><code>integer</code></td>\n<td>The created timestamp of the post</td>\n</tr>\n<tr>\n<td>caption</td>\n<td><code>str</code></td>\n<td>The caption of the post</td>\n</tr>\n<tr>\n<td>is_video</td>\n<td><code>bool</code></td>\n<td>A flag to know if the post is a video</td>\n</tr>\n<tr>\n<td>like_count</td>\n<td><code>integer</code></td>\n<td>The like count of the post</td>\n</tr>\n<tr>\n<td>comment_count</td>\n<td><code>integer</code></td>\n<td>The comment count of the post</td>\n</tr>\n<tr>\n<td>display_resources</td>\n<td><code>list</code></td>\n<td>A list of image URL strings associated with the post</td>\n</tr>\n<tr>\n<td>video_url</td>\n<td><code>str</code></td>\n<td>The video URL (if available) associated with the post</td>\n</tr></tbody></table>\n<h3>TComment</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td><code>str</code></td>\n<td>The Instagram Id of the comment</td>\n</tr>\n<tr>\n<td>text</td>\n<td><code>str</code></td>\n<td>The text of the comment</td>\n</tr>\n<tr>\n<td>username</td>\n<td><code>str</code></td>\n<td>The author's username</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td><code>integer</code></td>\n<td>The timestamp of the comment</td>\n</tr>\n<tr>\n<td>viewer_has_liked</td>\n<td><code>bool</code></td>\n<td>A flag to know if the viewer liked the comment</td>\n</tr>\n<tr>\n<td>liked_count</td>\n<td><code>integer</code></td>\n<td>The like count of the comment</td>\n</tr>\n<tr>\n<td>thread_count</td>\n<td><code>integer</code> | <code>None</code></td>\n<td>The comment's thread comments count. This value is <code>None</code> if the instance is a threaded comment.</td>\n</tr></tbody></table>\n<h3>TStoryReelItem</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td><code>str</code></td>\n<td>The Instagram Id of the story</td>\n</tr>\n<tr>\n<td>owner</td>\n<td><code>str</code></td>\n<td>The story author's Instagram Id</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td><code>integer</code></td>\n<td>The created timestamp of the story</td>\n</tr>\n<tr>\n<td>expire_at</td>\n<td><code>integer</code></td>\n<td>The expiration timestamp of the story</td>\n</tr>\n<tr>\n<td>audience</td>\n<td><code>str</code></td>\n<td>The type of audience of the story. If public the value is <code>MediaAudience.DEFAULT</code>, if private the value is <code>MediaAudience.BESTIES</code></td>\n</tr>\n<tr>\n<td>is_video</td>\n<td><code>bool</code></td>\n<td>A flag to know if the story is a video</td>\n</tr>\n<tr>\n<td>view_count</td>\n<td><code>integer</code></td>\n<td>The view count of the story. The count is only available for stories posted by the currently logged in user. Other accounts will have a count equal to <code>0</code></td>\n</tr>\n<tr>\n<td>display_resources</td>\n<td><code>list</code></td>\n<td>A list of image URL strings associated with the story</td>\n</tr>\n<tr>\n<td>video_resources</td>\n<td><code>list</code></td>\n<td>A list of video URL strings associated with the story</td>\n</tr></tbody></table>\n<h3>TStoryViewer</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td><code>str</code></td>\n<td>The Instagram Id of the story viewer</td>\n</tr>\n<tr>\n<td>username</td>\n<td><code>str</code></td>\n<td>The user name of the viewer</td>\n</tr></tbody></table>\n<h3>TActivity</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td><code>str</code></td>\n<td>The Instagram Id of the activity</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td><code>integer</code></td>\n<td>The timestamp of the activity</td>\n</tr>\n<tr>\n<td>username</td>\n<td><code>str</code></td>\n<td>The user name linked to the activity</td>\n</tr>\n<tr>\n<td>activity_type</td>\n<td><code>str</code></td>\n<td>The activity type. Either <code>NEW_LIKE</code> or <code>NEW_FOLLOW</code></td>\n</tr>\n<tr>\n<td>liked_post</td>\n<td><code>TActivityPost</code> | <code>None</code></td>\n<td>If the activity type is <code>NEW_LIKE</code>, an <code>TActivityPost</code> instance is returned</td>\n</tr></tbody></table>\n<h3>TActivityPost</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td><code>str</code></td>\n<td>The Instagram Id of the post</td>\n</tr>\n<tr>\n<td>shortcode</td>\n<td><code>str</code></td>\n<td>The Instagram shortcode Id of the post</td>\n</tr>\n<tr>\n<td>thumbnail_resources</td>\n<td><code>list</code></td>\n<td>A list of thumbnails URL strings associated with the post</td>\n</tr></tbody></table>\n<h1>Development dependencies</h1>\n<ul>\n<li>requests</li>\n</ul>\n<h1>Tests</h1>\n<ol>\n<li>\n<p>Create a <code>pytest.ini</code> file with the sample contents of  <code>pytest.sample.ini</code> in the <code>tests</code> directory.</p>\n</li>\n<li>\n<p>Add your account information.</p>\n</li>\n<li>\n<p>Run with <code>pytest</code>:</p>\n</li>\n</ol>\n<pre><code>(env)$ pytest -qs tests\n</code></pre>\n<h1>Disclaimer</h1>\n<p>This tool is not affiliated with, authorized, maintained or endorsed by Instagram or any of its affiliates or subsidiaries. Use at your own risk.</p>\n<h1>License</h1>\n<p>Licensed under MIT License.</p>\n\n          </div>"}, "last_serial": 6152901, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "2c9921fd2e0d6bdb3fdca71b3132e5ee", "sha256": "b66ba58c8515ce3c9af86df79ada82c91d4a6705a53396f27b74d6593fcd686d"}, "downloads": -1, "filename": "instpector-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2c9921fd2e0d6bdb3fdca71b3132e5ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6034, "upload_time": "2019-07-05T08:52:40", "upload_time_iso_8601": "2019-07-05T08:52:40.752070Z", "url": "https://files.pythonhosted.org/packages/38/91/cfbe3c679dd6cea2bc16805cb0925a84b2a97bdd19fe6aa757f8f56db7ef/instpector-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "19d85310be0a410e6f07126ca1f16ed3", "sha256": "1c50b1945283d7d24e3c6578045ea045b590eb91d579fd12130461db7d755337"}, "downloads": -1, "filename": "instpector-0.1.2.tar.gz", "has_sig": false, "md5_digest": "19d85310be0a410e6f07126ca1f16ed3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6393, "upload_time": "2019-07-06T02:34:25", "upload_time_iso_8601": "2019-07-06T02:34:25.827883Z", "url": "https://files.pythonhosted.org/packages/93/ec/2da255b67339717fb825335ec87b2fee11747ef19ae20f7d5f6df7fe2766/instpector-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "e655f8cede4003c1231c88c4c6fd9a2f", "sha256": "9723196afb96478dc0e2347b37fff4bab200063c2162c766ba9a5262492e51a0"}, "downloads": -1, "filename": "instpector-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e655f8cede4003c1231c88c4c6fd9a2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6469, "upload_time": "2019-07-06T09:18:11", "upload_time_iso_8601": "2019-07-06T09:18:11.540165Z", "url": "https://files.pythonhosted.org/packages/e8/aa/2612d388485e938cb87fa16eb69a6adf582c11a06002b317d7efb161c204/instpector-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "8f8aed4b75c4543e35c886d35ea93d17", "sha256": "ffcb22df2071e5d5c53a33c9c93d1a2b3de0d7ae44d53288cf9d3e4297d36b4b"}, "downloads": -1, "filename": "instpector-0.1.4.tar.gz", "has_sig": false, "md5_digest": "8f8aed4b75c4543e35c886d35ea93d17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6698, "upload_time": "2019-07-07T03:20:41", "upload_time_iso_8601": "2019-07-07T03:20:41.190651Z", "url": "https://files.pythonhosted.org/packages/cf/34/27f4311675a856e21300e1265a7c755e5aae690d3d25f10e204f0973a555/instpector-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "ed923aa6b957bd1bf2c14c8dd761161b", "sha256": "a17bb42a4b9f3ce2b8fc69959ac9916c99469099a1458483bfcd38d2a1f73eae"}, "downloads": -1, "filename": "instpector-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ed923aa6b957bd1bf2c14c8dd761161b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6867, "upload_time": "2019-07-08T01:23:08", "upload_time_iso_8601": "2019-07-08T01:23:08.257803Z", "url": "https://files.pythonhosted.org/packages/e9/30/c9ea8e5afd05f9bf1f5872b21735f11e6650567d1b8574a9a357679183f2/instpector-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "1dbc24afa858e5a465bbc2d691159f14", "sha256": "08aa09a830e1742b83614f5ea7a32f66a391e7801d94c14464d7031c6e17feb5"}, "downloads": -1, "filename": "instpector-0.1.6.tar.gz", "has_sig": false, "md5_digest": "1dbc24afa858e5a465bbc2d691159f14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7565, "upload_time": "2019-07-16T09:45:58", "upload_time_iso_8601": "2019-07-16T09:45:58.459446Z", "url": "https://files.pythonhosted.org/packages/41/2c/2034be668f4cb3c150dd835f96a5c96a5d54e556e91f1a05083df0fa95b7/instpector-0.1.6.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6350406bf33198b511204c52a746a364", "sha256": "54e1be2f80cc69f7c2c26f9ae10c5eb6c72875a34a438e0ba51a67eb62c593ef"}, "downloads": -1, "filename": "instpector-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6350406bf33198b511204c52a746a364", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8031, "upload_time": "2019-08-13T14:16:09", "upload_time_iso_8601": "2019-08-13T14:16:09.811268Z", "url": "https://files.pythonhosted.org/packages/b8/08/1aaab089ce2cda151315b8b490a8b81a2605af855b2e502c4e9b3752e463/instpector-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7ae697221813071dd493fbe0bfadac38", "sha256": "adf583e549b001c8f77d7ab1d58d4f1df5d1d378000127a615cba6169e8b50af"}, "downloads": -1, "filename": "instpector-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7ae697221813071dd493fbe0bfadac38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9843, "upload_time": "2019-10-07T09:12:10", "upload_time_iso_8601": "2019-10-07T09:12:10.084561Z", "url": "https://files.pythonhosted.org/packages/ff/25/6e12dcc22678bc5f959192e5b934bb6feb8975f6592b6e89711148c6b858/instpector-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "b2b9f2b57345aeaf5f86ffe585b511ab", "sha256": "3d6c452e81eac01e62d2fa0fa17a70db30427fece2c17381b0856ddc7a289e4b"}, "downloads": -1, "filename": "instpector-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b2b9f2b57345aeaf5f86ffe585b511ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10018, "upload_time": "2019-10-08T01:49:38", "upload_time_iso_8601": "2019-10-08T01:49:38.285600Z", "url": "https://files.pythonhosted.org/packages/66/16/fa2a7e09e28027e7338e0752d3da92c4ba79912fbc29f8216bf0ad763a6a/instpector-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "ed80058f55e7076ad1e08d3bf0113ba5", "sha256": "587b4cd202a884c8dfe482e6468bd6ead37d18722e047d17e20f8abd11e00e5b"}, "downloads": -1, "filename": "instpector-0.2.3.tar.gz", "has_sig": false, "md5_digest": "ed80058f55e7076ad1e08d3bf0113ba5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10433, "upload_time": "2019-11-14T08:48:28", "upload_time_iso_8601": "2019-11-14T08:48:28.269761Z", "url": "https://files.pythonhosted.org/packages/2d/54/c95a0f6b6247ee8aa43707e52379238640e33a7ab03b22287e90128d5111/instpector-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "4d351fe602bec342daadedd9847d3494", "sha256": "5a16a00056051660c9cc57bd10be4455a3d51c3058427dcca0d4c69f8b672a0f"}, "downloads": -1, "filename": "instpector-0.2.4.tar.gz", "has_sig": false, "md5_digest": "4d351fe602bec342daadedd9847d3494", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11249, "upload_time": "2019-11-15T05:35:45", "upload_time_iso_8601": "2019-11-15T05:35:45.249544Z", "url": "https://files.pythonhosted.org/packages/c1/3a/52d75ac21defb0a8852f3eff9983b53c53de39139c40271ffb351614ff60/instpector-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "be8f35ff683380af252c422774a3e3b7", "sha256": "84e868468a99dd3fb85532d2c9c71463a3e0d313380e6974e6d32bc9da712bd7"}, "downloads": -1, "filename": "instpector-0.2.5.tar.gz", "has_sig": false, "md5_digest": "be8f35ff683380af252c422774a3e3b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11860, "upload_time": "2019-11-15T07:31:35", "upload_time_iso_8601": "2019-11-15T07:31:35.836327Z", "url": "https://files.pythonhosted.org/packages/bc/74/589581ce166c8b108c1c9afb1d604a75035099202a6e6c0b7c84e7ce9e66/instpector-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "456575f114c67b0e94ef0ea45722abe0", "sha256": "b35e00a3f0ce0c999daf0c49e1f6c217868b7d26d940a109341934bcc12a9330"}, "downloads": -1, "filename": "instpector-0.2.6.tar.gz", "has_sig": false, "md5_digest": "456575f114c67b0e94ef0ea45722abe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12523, "upload_time": "2019-11-18T03:16:07", "upload_time_iso_8601": "2019-11-18T03:16:07.393385Z", "url": "https://files.pythonhosted.org/packages/83/3c/b36a04c27404659dbcac721c4fcbf4ea5df336ec3b16e118601a8ccef1d8/instpector-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "456575f114c67b0e94ef0ea45722abe0", "sha256": "b35e00a3f0ce0c999daf0c49e1f6c217868b7d26d940a109341934bcc12a9330"}, "downloads": -1, "filename": "instpector-0.2.6.tar.gz", "has_sig": false, "md5_digest": "456575f114c67b0e94ef0ea45722abe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12523, "upload_time": "2019-11-18T03:16:07", "upload_time_iso_8601": "2019-11-18T03:16:07.393385Z", "url": "https://files.pythonhosted.org/packages/83/3c/b36a04c27404659dbcac721c4fcbf4ea5df336ec3b16e118601a8ccef1d8/instpector-0.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:37 2020"}