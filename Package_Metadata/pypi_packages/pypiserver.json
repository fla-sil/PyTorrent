{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "License :: OSI Approved :: zlib/libpng License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Build Tools", "Topic :: System :: Software Distribution"], "description": ".. -*- mode: rst; coding: utf-8 -*-\n\n.. image:: pypiserver_logo.png\n   :width: 300 px\n   :align: center\n\n==============================================================================\npypiserver - minimal PyPI server for use with pip/easy_install\n==============================================================================\n|pypi-ver| |travis-status| |dependencies| |python-ver| |proj-license|\n\n:Version:     1.3.2\n:Date:        2020-01-11\n:Source:      https://github.com/pypiserver/pypiserver\n:PyPI:        https://pypi.org/project/pypiserver/\n:Travis:      https://travis-ci.org/pypiserver/pypiserver\n:Maintainers: Kostis Anagnostopoulos <ankostis@gmail.com>,\n              Matthew Planchard <mplanchard@gmail.com>\n:License:     zlib/libpng + MIT\n\n``pypiserver`` is a minimal PyPI_ compatible server for ``pip`` or ``easy_install``.\nIt is based on bottle_ and serves packages from regular directories.\nWheels, bdists, eggs and accompanying PGP-signatures can be uploaded\neither with ``pip``, ``setuptools``, ``twine``, ``pypi-uploader``, or simply copied\nwith ``scp``.\n\n\n.. contents:: Table of Contents\n  :backlinks: top\n\n\nQuickstart: Installation and Usage\n==================================\n\n``pypiserver`` > 1.2.x works with Python 2.7 and 3.4+ or PyPy.\nOlder Python versions may still work, but they are not tested.\nFor legacy Python versions, use ``pypiserver-1.1.x`` series.\n\n.. Tip::\n   The commands below work on a unix-like operating system with a posix shell.\n   The ``'~'`` character expands to user's home directory.\n\n   If you're using Windows, you'll have to use their \"Windows counterparts\".\n   The same is true for the rest of this documentation.\n\n1. Install ``pypiserver`` with this command::\n\n    pip install pypiserver                # Or: pypiserver[passlib,watchdog]\n    mkdir ~/packages                      # Copy packages into this directory.\n\n   See also `Alternative Installation methods`_.\n\n2. Copy some packages into your ``~/packages`` folder and then\n   get your ``pypiserver`` up and running::\n\n    pypi-server -p 8080 ~/packages &      # Will listen to all IPs.\n\n3. From the client computer, type this::\n\n    # Download and install hosted packages.\n    pip install --extra-index-url http://localhost:8080/simple/ ...\n\n    # or\n    pip install --extra-index-url http://localhost:8080 ...\n\n    # Search hosted packages.\n    pip search --index http://localhost:8080 ...\n\n    # Note that pip search does not currently work with the /simple/ endpoint.\n\n   See also `Client-side configurations`_ for avoiding tedious typing.\n\n4. Enter ``pypi-server -h`` in the cmd-line to print a detailed usage message::\n\n    pypi-server [OPTIONS] [PACKAGES_DIRECTORY...]\n      start PyPI compatible package server serving packages from\n      PACKAGES_DIRECTORY. If PACKAGES_DIRECTORY is not given on the\n      command line, it uses the default ~/packages. pypiserver scans this\n      directory recursively for packages. It skips packages and\n      directories starting with a dot. Multiple package directories can be\n      specified.\n\n    pypi-server understands the following options:\n\n      -p, --port PORT\n        Listen on port PORT (default: 8080).\n\n      -i, --interface INTERFACE\n        Listen on interface INTERFACE (default: 0.0.0.0, any interface).\n\n      -a, --authenticate (update|download|list), ...\n        Comma-separated list of (case-insensitive) actions to authenticate.\n        Requires to have set the password (-P option).\n        To password-protect package downloads (in addition to uploads) while\n        leaving listings public, use:\n          -P foo/htpasswd.txt -a update,download\n        To allow unauthorized access, use:\n          -P . -a .\n        Note that when uploads are not protected, the `register` command\n        is not necessary, but `~/.pypirc` still need username and password fields,\n        even if bogus.\n        By default, only 'update' is password-protected.\n\n      -P, --passwords PASSWORD_FILE\n        Use apache htpasswd file PASSWORD_FILE to set usernames & passwords when\n        authenticating certain actions (see -a option).\n        To allow unauthorized access, use:\n          -P . -a .\n\n      --disable-fallback\n        Disable redirect to real PyPI index for packages not found in the\n        local index.\n\n      --fallback-url FALLBACK_URL\n        For packages not found in the local index, this URL will be used to\n        redirect to (default: https://pypi.org/simple/).\n\n      --server METHOD\n        Use METHOD to run the server. Valid values include paste,\n        cherrypy, twisted, gunicorn, gevent, wsgiref, auto. The\n        default is to use \"auto\" which chooses one of paste, cherrypy,\n        twisted or wsgiref.\n\n      -r, --root PACKAGES_DIRECTORY\n        [deprecated] Serve packages from PACKAGES_DIRECTORY.\n\n      -o, --overwrite\n        Allow overwriting existing package files.\n\n      --hash-algo ALGO\n        Any `hashlib` available algo used as fragments on package links.\n        Set one of (0, no, off, false) to disabled it (default: md5).\n\n      --welcome HTML_FILE\n        Uses the ASCII contents of HTML_FILE as welcome message response.\n\n      -v\n        Enable verbose logging; repeat for more verbosity.\n\n      --log-conf <FILE>\n        Read logging configuration from FILE.\n        By default, configuration is read from `log.conf` if found in server's dir.\n\n      --log-file <FILE>\n        Write logging info into this FILE.\n\n      --log-frmt <FILE>\n        The logging format-string (see `logging.LogRecord` class from standard python library).\n        [Default: %(asctime)s|%(name)s|%(levelname)s|%(thread)d|%(message)s]\n\n      --log-req-frmt FORMAT\n        A format-string selecting Http-Request properties to log; set to '%s' to see them all.\n        [Default: %(bottle.request)s]\n\n      --log-res-frmt FORMAT\n        A format-string selecting Http-Response properties to log; set to  '%s' to see them all.\n        [Default: %(status)s]\n\n      --log-err-frmt FORMAT\n        A format-string selecting Http-Error properties to log; set to  '%s' to see them all.\n        [Default: %(body)s: %(exception)s \\n%(traceback)s]\n\n      --cache-control AGE\n        Add \"Cache-Control: max-age=AGE, public\" header to package downloads.\n        Pip 6+ needs this for caching.\n\n    pypi-server -h, --help\n      Show this help message.\n\n    pypi-server --version\n      Show pypi-server's version.\n\n    pypi-server -U [OPTIONS] [PACKAGES_DIRECTORY...]\n      Update packages in PACKAGES_DIRECTORY. This command searches\n      pypi.org for updates and shows a pip command line which\n      updates the package.\n\n    The following additional options can be specified with -U:\n\n      -x\n        Execute the pip commands instead of only showing them.\n\n      -d DOWNLOAD_DIRECTORY\n        Download package updates to this directory. The default is to use\n        the directory which contains the latest version of the package to\n        be updated.\n\n      -u\n        Allow updating to unstable version (alpha, beta, rc, dev versions).\n\n    Visit https://github.com/pypiserver/pypiserver for more information.\n\n\nClient-Side Configurations\n==========================\n\nAlways specifying the the pypi url on the command line is a bit\ncumbersome. Since ``pypiserver`` redirects ``pip/easy_install`` to the\n``pypi.org`` index if it doesn't have a requested package, it is a\ngood idea to configure them to always use your local pypi index.\n\nConfiguring ``pip``\n-------------------\n\nFor ``pip`` command this can be done by setting the environment variable\n``PIP_EXTRA_INDEX_URL`` in your ``.bashr/.profile/.zshrc``::\n\n  export PIP_EXTRA_INDEX_URL=http://localhost:8080/simple/\n\nor by adding the following lines to ``~/.pip/pip.conf``::\n\n  [global]\n  extra-index-url = http://localhost:8080/simple/\n\n.. Note::\n   If you have installed ``pypiserver`` on a remote url without *https*\n   you wil receive an \"untrusted\" warning from *pip*, urging you to append\n   the ``--trusted-host`` option.  You can also include this option permanently\n   in your configuration-files or environment variables.\n\nConfiguring ``easy_install``\n----------------------------\n\nFor ``easy_install`` command you may set the following configuration in\n``~/.pydistutils.cfg``::\n\n  [easy_install]\n  index_url = http://localhost:8080/simple/\n\n\nUploading Packages Remotely\n===========================\n\nInstead of copying packages directly to the server's folder (i.e. with ``scp``),\nyou may use python tools for the task, e.g. ``python setup.py upload``.\nIn that case, ``pypiserver`` is responsible for authenticating the upload-requests.\n\n.. Note::\n  We strongly advise to password-protected your uploads!\n\n  It is possible to disable authentication for uploads (e.g. in intranets).\n  To avoid lazy security decisions, read help for ``-P`` and ``-a`` options.\n\n*Apache*-Like Authentication (``htpasswd``)\n-------------------------------------------\n\n#. First make sure you have the *passlib* module installed (note that\n   ``passlib>=1.6`` is required), which is needed for parsing the Apache\n   *htpasswd* file specified by the ``-P``, ``--passwords`` option\n   (see next steps)::\n\n     pip install passlib\n\n#. Create the Apache *htpasswd* file with at least one user/password pair\n   with this command (you'll be prompted for a password)::\n\n     htpasswd -sc htpasswd.txt <some_username>\n\n   .. Tip:: Read this SO question for running `htpasswd` cmd\n      under *Windows*:\n\n         http://serverfault.com/questions/152950/how-to-create-and-edit-htaccess-and-htpasswd-locally-on-my-computer-and-then-u\n\n      or if you have bogus passwords that you don't care because they are for\n      an internal service (which is still \"bad\", from a security prespective...)\n      you may use this public service:\n\n         http://www.htaccesstools.com/htpasswd-generator/\n\n   .. Tip:: When accessing pypiserver via the api, alternate authentication\n      methods are available via the ``auther`` config flag. Any callable\n      returning a boolean can be passed through to the pypiserver config in\n      order to provide custom authentication. For example, to configure\n      pypiserver to authenticate using the `python-pam`_::\n\n        import pam\n        pypiserver.default_config(auther=pam.authenticate)\n\n      Please see `Using Ad-hoc authentication providers`_ for more information.\n\n#. You  need to restart the server with the ``-P`` option only once\n   (but user/password pairs can later be added or updated on the fly)::\n\n     ./pypi-server -p 8080 -P htpasswd.txt ~/packages &\n\nUpload with ``setuptools``\n--------------------------\n\n#. On client-side, edit or create a ``~/.pypirc`` file with a similar content::\n\n     [distutils]\n     index-servers =\n       pypi\n       local\n\n     [pypi]\n     username:<your_pypi_username>\n     password:<your_pypi_passwd>\n\n     [local]\n     repository: http://localhost:8080\n     username: <some_username>\n     password: <some_passwd>\n\n#. Then from within the directory of the python-project you wish to upload,\n   issue this command::\n\n     python setup.py sdist upload -r local\n\nUpload with ``twine``\n---------------------\n\nTo avoid storing you passwords on disk, in clear text, you may either:\n\n- use the ``register`` *setuptools*'s command with the ``-r`` option,\n  like that::\n\n     python setup.py sdist register -r local upload -r local\n\n- use `twine`_ library, which\n  breaks the procedure in two steps.  In addition, it supports signing\n  your files with PGP-Signatures and uploading the generated `.asc` files\n  to ``pypiserver``::\n\n     twine upload -r local --sign -identity user_name ./foo-1.zip\n\n\nUsing the Docker Image\n======================\n\nStarting with version 1.2.5, official Docker images will be built for each\npush to master, each dev, alpha, or beta release, and each final release.\nThe most recent full release will always be available under the tag ``latest``,\nand the current master branch will always be available under the tag\n``unstable``.\n\nYou can always check to see what tags are currently available at our\n`Docker Repo`_.\n\nTo run the most recent release of ``pypiserver`` with Docker, simply::\n\n    docker run pypiserver/pypiserver:latest\n\nThis starts ``pypiserver`` serving packages from the ``/data/packages``\ndirectory inside the container, listening on the container port 8080.\n\nThe container takes all the same arguments as the normal ``pypi-server``\nexecutable, with the exception of the internal container port (``-p``),\nwhich will always be 8080.\n\nOf course, just running a container isn't that interesting. To map\nport 80 on the host to port 8080 on the container::\n\n    docker run -p 80:8080 pypiserver/pypiserver:latest\n\nYou can now access your ``pypiserver`` at ``localhost:80`` in a web browser.\n\nTo serve packages from a directory on the host, e.g. ``~/packages``::\n\n    docker run -p 80:8080 -v ~/packages:/data/packages pypiserver/pypiserver:latest\n\nTo authenticate against a local ``.htpasswd`` file::\n\n    docker run -p 80:8080 -v ~/.htpasswd:/data/.htpasswd pypiserver/pypiserver:latest -P .htpasswd packages\n\nYou can also specify ``pypiserver`` to run as a Docker service using a\ncomposefile. An example composefile is `provided <docker-compose.yml>`_.\n\n\n.. _`docker repo`: https://hub.docker.com/r/pypiserver/pypiserver/tags/\n\n\nAlternative Installation Methods\n================================\n\nWhen trying the methods below, first use the following command to check whether\nprevious versions of ``pypiserver`` already exist, and (optionally) uninstall them::\n\n  # VERSION-CHECK: Fails if not installed.\n  pypi-server --version\n\n  # UNINSTALL: Invoke again untill it fails.\n  pip uninstall pypiserver\n\nInstalling the Very Latest Version\n----------------------------------\n\nIn case the latest version in *pypi* is a pre-release, you have to use\n*pip*'s `--pre` option.  And to update an existing installation combine it\nwith `--ignore-installed`::\n\n  pip install pypiserver --pre -I\n\nYou can even install the latest ``pypiserver`` directly from *github* with the\nfollowing command, assuming you have *git* installed on your ``PATH``::\n\n  pip install git+git://github.com/pypiserver/pypiserver.git\n\nInstalling It As Standalone Script\n----------------------------------\n\nThe git repository contains a ``pypi-server-standalone.py`` script,\nwhich is a single python file that can be executed without any other\ndependencies.\n\nRun the following commands to download the script with ``wget``::\n\n  wget https://raw.github.com/pypiserver/pypiserver/standalone/pypi-server-standalone.py\n  chmod +x pypi-server-standalone.py\n\nor with ``curl``::\n\n  curl -O https://raw.github.com/pypiserver/pypiserver/standalone/pypi-server-standalone.py\n  chmod +x pypi-server-standalone.py\n\nYou can then start-up the server with::\n\n  ./pypi-server-standalone.py\n\nFeel free to rename the script and move it into your ``$PATH``.\n\nRunning on Heroku/Dotcloud\n--------------------------\n\nhttps://github.com/dexterous/pypiserver-on-the-cloud contains\ninstructions on how to run ``pypiserver`` on one of the supported cloud\nservice providers.\n\n\nRecipes\n=======\n\nManaging the Package Directory\n------------------------------\n\nThe ``pypi-server`` command has the ``-U`` option that searches for updates of\navailable packages. It scans the package directory for available\npackages and searches on pypi.org for updates. Without further\noptions ``pypi-server -U`` will just print a list of commands which must\nbe run in order to get the latest version of each package. Output\nlooks like::\n\n    $ ./pypi-server -U\n    checking 106 packages for newer version\n\n    .........u.e...........e..u.............\n    .....e..............................e...\n    ..........................\n\n    no releases found on pypi for PyXML, Pymacs, mercurial, setuptools\n\n    # update raven from 1.4.3 to 1.4.4\n    pip -q install --no-deps  --extra-index-url https://pypi.org/simple/ -d /home/ralf/packages/mirror raven==1.4.4\n\n    # update greenlet from 0.3.3 to 0.3.4\n    pip -q install --no-deps  --extra-index-url https://pypi.org/simple/ -d /home/ralf/packages/mirror greenlet==0.3.4\n\nIt first prints for each package a single character after checking the\navailable versions on pypi. A dot(`.`) means the package is up-to-date, ``'u'``\nmeans the package can be updated and ``'e'`` means the list of releases on\npypi is empty. After that it shows a *pip* command line which can be used\nto update a one package. Either copy and paste that or run\n``pypi-server -Ux`` in order to really execute those commands. You need\nto have *pip* installed for that to work however.\n\nSpecifying an additional ``-u`` option will also allow alpha, beta and\nrelease candidates to be downloaded. Without this option these\nreleases won't be considered.\n\nServing Thousands of Packages\n-----------------------------\n\nBy default, ``pypiserver`` scans the entire packages directory each time an\nincoming HTTP request occurs. This isn't a problem for a small number of\npackages, but causes noticeable slow-downs when serving thousands of packages.\n\nIf you run into this problem, significant speedups can be gained by enabling\npypiserver's directory caching functionality. The only requirement is to\ninstall the ``watchdog`` package, or it can be installed during ``pypiserver``\ninstallation, by specifying the ``cache`` extras option::\n\n    pip install pypiserver[cache]\n\nAdditional speedups can be obtained by using your webserver's builtin\ncaching functionality. For example, if you are using `nginx` as a\nreverse-proxy as described below in `Behind a reverse proxy`_, you can\neasily enable caching. For example, to allow nginx to cache up to\n10 gigabytes of data for up to 1 hour::\n\n    proxy_cache_path /data/nginx/cache\n                     levels=1:2\n                     keys_zone=pypiserver_cache:10m\n                     max_size=10g\n                     inactive=60m\n                     use_temp_path=off;\n\n    server {\n        # ...\n        location / {\n            proxy_cache pypiserver_cache;\n            proxy_pass http://localhost:8080;\n        }\n    }\n\nUsing webserver caching is especially helpful if you have high request\nvolume. Using `nginx` caching, a real-world pypiserver installation was\nable to easily support over 1000 package downloads/min at peak load.\n\nManaging Automated Startup\n--------------------------\n\nThere are a variety of options for handling the automated starting of\npypiserver upon system startup. Two of the most common are *systemd* and\n*supervisor*.\n\nRunning As a ``systemd`` Service\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``systemd`` is installed by default on most modern Linux systems and as such,\nit is an excellent option for managing the pypiserver process. An example\nconfig file for ``systemd`` can be seen below::\n\n    [Unit]\n    Description=A minimal PyPI server for use with pip/easy_install.\n    After=network.target\n\n    [Service]\n    Type=simple\n    # systemd requires absolute path here too.\n    PIDFile=/var/run/pypiserver.pid\n    User=www-data\n    Group=www-data\n\n    ExecStart=/usr/local/bin/pypi-server -p 8080 -a update,download --log-file /var/log/pypiserver.log -P /etc/nginx/.htpasswd /var/www/pypi\n    ExecStop=/bin/kill -TERM $MAINPID\n    ExecReload=/bin/kill -HUP $MAINPID\n    Restart=always\n\n    WorkingDirectory=/var/www/pypi\n\n    TimeoutStartSec=3\n    RestartSec=5\n\n    [Install]\n    WantedBy=multi-user.target\n\nAdjusting the paths and adding this file as ``pypiserver.service`` into your\n``systemd/system`` directory will allow management of the pypiserver process with\n``systemctl``, e.g. ``systemctl start pypiserver``.\n\nMore useful information about *systemd* can be found at\nhttps://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\n\nLaunching through ``supervisor``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n`supervisor <http://supervisord.org/>`_ has the benefit of being a pure python\npackage and as such, it provides excellent cross-platform support for process\nmanagement. An example configuration file for ``supervisor`` is given below::\n\n    [program:pypi]\n    command=/home/pypi/pypi-venv/bin/pypi-server -p 7001 -P /home/pypi/.htpasswd /home/pypi/packages\n    directory=/home/pypi\n    user=pypi\n    autostart=true\n    autorestart=true\n    stderr_logfile=/var/log/pypiserver.err.log\n    stdout_logfile=/var/log/pypiserver.out.log\n\nFrom there, the process can be managed via ``supervisord`` using ``supervisorctl``.\n\nUsing a Different WSGI Server\n-----------------------------\n\n- The ``bottle`` web-server which supports many WSGI-servers, among others,\n  ``paste``, ``cherrypy``, ``twisted`` and ``wsgiref`` (part of Python); you select\n  them using the ``--server`` flag.\n\n- You may view all supported WSGI servers using the following interactive code::\n\n    >>> from pypiserver import bottle\n    >>> list(bottle.server_names.keys())\n    ['cgi', 'gunicorn', 'cherrypy', 'eventlet', 'tornado', 'geventSocketIO',\n    'rocket', 'diesel', 'twisted', 'wsgiref', 'fapws3', 'bjoern', 'gevent',\n    'meinheld', 'auto', 'aiohttp', 'flup', 'gae', 'paste', 'waitress']\n\n- If none of the above servers matches your needs, invoke just the\n  ``pypiserver:app()`` method which returns the internal WSGI-app WITHOUT\n  starting-up a server - you may then send it to any WSGI server you like.\n  Read also the `Utilizing the API`_ section.\n\n- Some examples are given below - you may find more details in `bottle\n  site <http://bottlepy.org/docs/dev/deployment.html#switching-the-server-backend>`_.\n\nApache (``mod_wsgi``)\n~~~~~~~~~~~~~~~~~~~~~\n\nTo use your *Apache2* with ``pypiserver``, prefer to utilize ``mod_wsgi`` as\nexplained in `bottle's documentation <http://bottlepy.org/docs/dev/deployment.html#apache-mod-wsgi>`_.\n\n.. Note::\n   If you choose instead to go with ``mod_proxy``, mind that you may bump into problems\n   with the prefix-path (see `#155 <https://github.com/pypiserver/pypiserver/issues/155>`_).\n\n1. Adapt and place the following *Apache* configuration either into top-level scope,\n   or inside some ``<VirtualHost>`` (contributed by Thomas Waldmann)::\n\n        WSGIScriptAlias   /     /yoursite/wsgi/pypiserver-wsgi.py\n        WSGIDaemonProcess       pypisrv user=pypisrv group=pypisrv umask=0007 \\\n                                processes=1 threads=5 maximum-requests=500 \\\n                                display-name=wsgi-pypisrv inactivity-timeout=300\n        WSGIProcessGroup        pypisrv\n        WSGIPassAuthorization On    # Required for authentication (https://github.com/pypiserver/pypiserver/issues/288)\n\n        <Directory /yoursite/wsgi >\n            Require all granted\n        </Directort>\n\n   or if using older ``Apache < 2.4``, substitute the last part with this::\n\n        <Directory /yoursite/wsgi >\n            Order deny,allow\n            Allow from all\n        </Directort>\n\n2. Then create the ``/yoursite/cfg/pypiserver.wsgi`` file and make sure that\n   the ``user`` and ``group`` of the ``WSGIDaemonProcess`` directive\n   (``pypisrv:pypisrv`` in the example) have the read permission on it::\n\n        import pypiserver\n\n        conf = pypiserver.default_config(\n            root =          \"/yoursite/packages\",\n            password_file = \"/yoursite/htpasswd\", )\n        application = pypiserver.app(**conf)\n\n\n   .. Tip::\n      If you have installed ``pypiserver`` in a virtualenv, follow ``mod_wsgi``'s\n      `instructions <http://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html>`_\n      and prepend the python code above with the following::\n\n            import site\n\n            site.addsitedir('/yoursite/venv/lib/pythonX.X/site-packages')\n\n.. Note::\n   For security reasons, notice that the ``Directory`` directive grants access\n   to a directory holding the ``wsgi`` start-up script, alone; nothing else.\n\n.. Note::\n   To enable HTTPS support on Apache, configure the directive that contains the\n   WSGI configuration to use SSL.\n\n``gunicorn``\n~~~~~~~~~~~~\n\nThe following command uses ``gunicorn`` to start ``pypiserver``::\n\n  gunicorn -w4 'pypiserver:app(root=\"/home/ralf/packages\")'\n\nor when using multiple roots::\n\n  gunicorn -w4 'pypiserver:app(root=[\"/home/ralf/packages\", \"/home/ralf/experimental\"])'\n\n``paste``\n~~~~~~~~~\n\n`paste <http://pythonpaste.org/>`_ allows to run multiple WSGI applications\nunder different URL paths. Therefore it is possible to serve different set\nof packages on different paths.\n\nThe following example ``paste.ini`` could be used to serve stable and\nunstable packages on different paths::\n\n    [composite:main]\n    use = egg:Paste#urlmap\n    /unstable/ = unstable\n    / = stable\n\n    [app:stable]\n    use = egg:pypiserver#main\n    root = ~/stable-packages\n\n    [app:unstable]\n    use = egg:pypiserver#main\n    root = ~/stable-packages\n       ~/unstable-packages\n\n    [server:main]\n    use = egg:gunicorn#main\n    host = 0.0.0.0\n    port = 9000\n    workers = 5\n    accesslog = -\n\n.. Note::\n   You need to install some more dependencies for this to work, like::\n\n        pip install paste pastedeploy gunicorn pypiserver\n\n   The server can then start with::\n\n        gunicorn_paster paste.ini\n\n\nBehind a Reverse Proxy\n----------------------\n\nYou can run ``pypiserver`` behind a reverse proxy as well.\n\nNginx\n~~~~~\n\nExtend your nginx configuration::\n\n    upstream pypi {\n      server              pypiserver.example.com:12345 fail_timeout=0;\n    }\n\n    server {\n      server_name         myproxy.example.com;\n\n      location / {\n        proxy_set_header  Host $host:$server_port;\n        proxy_set_header  X-Forwarded-Proto $scheme;\n        proxy_set_header  X-Real-IP $remote_addr;\n        proxy_pass        http://pypi;\n      }\n    }\n\nAs of pypiserver 1.3, you may also use the `X-Forwarded-Host` header in your\nreverse proxy config to enable changing the base URL. For example if you\nwant to host pypiserver under a particular path on your server::\n\n    upstream pypi {\n      server              locahost:8000;\n    }\n\n    server {\n      location /pypi/ {\n          proxy_set_header  X-Forwarded-Host $host:$server_port/pypi;\n          proxy_set_header  X-Forwarded-Proto $scheme;\n          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n          proxy_set_header  X-Real-IP $remote_addr;\n          proxy_pass        http://pypi;\n      }\n    }\n\nSupporting HTTPS\n~~~~~~~~~~~~~~~~\n\nUsing a reverse proxy is the preferred way of getting pypiserver behind\nHTTPS. For example, to put pypiserver behind HTTPS on port 443, with\nautomatic HTTP redirection, using `nginx`::\n\n    upstream pypi {\n      server               localhost:8000;\n    }\n\n    server {\n      listen              80 default_server;\n      server_name         _;\n      return              301 https://$host$request_uri;\n    }\n\n    server {\n      listen              443 ssl;\n      server_name         pypiserver.example.com;\n\n      ssl_certificate     /etc/star.example.com.crt;\n      ssl_certificate_key /etc/star.example.com.key;\n      ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n      ssl_ciphers         HIGH:!aNULL:!MD5;\n\n      location / {\n        proxy_set_header  Host $host:$server_port;\n        proxy_set_header  X-Forwarded-Proto $scheme;\n        proxy_set_header  X-Real-IP $remote_addr;\n        proxy_pass        http://pypi;\n      }\n    }\n\nPlease see `nginx's HTTPS docs for more details <http://nginx.org/en/docs/http/configuring_https_servers.html>`_.\n\nGetting and keeping your certificates up-to-date can be simplified using,\nfor example, using `certbot and letsencrypt <https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04>`_.\n\nUtilizing the API\n-----------------\n\nIn order to enable ad-hoc authentication-providers or to use WSGI-servers\nnot supported by *bottle* out-of-the-box, you needed to launch ``pypiserver``\nvia its API.\n\n- The main entry-point for configuring ``pypiserver`` is the `pypiserver:app()\n  <https://github.com/pypiserver/pypiserver/blob/master/pypiserver/__init__.py#L116>`_\n  function.  This function returns the internal WSGI-app that you my then\n  send to any WSGI-server you like.\n\n- To get all ``pypiserver:app()`` keywords and their explanations, read the\n  function `pypiserver:default_config()\n  <https://github.com/pypiserver/pypiserver/blob/master/pypiserver/__init__.py#L35>`_.\n\n- Finally, to fire-up a WSGI-server with the configured app, invoke\n  the ``bottle:run(app, host, port, server)`` function.\n  Note that ``pypiserver`` ships with it is own copy of *bottle*; to use it,\n  import it like that: ``from pypiserver import bottle``\n\nUsing Ad-Hoc Authentication Providers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``auther`` keyword of ``pypiserver:app()`` function maybe set only using\nthe API. This can be any callable that returns a boolean when passed\nthe *username* and the *password* for a given request.\n\nFor example, to authenticate users based on the ``/etc/passwd`` file under Unix,\nyou may delegate such decisions to the `python-pam`_ library by following\nthese steps:\n\n1. Ensure ``python-pam`` module is installed::\n\n    pip install python-pam\n\n2. Create a python-script along these lines::\n\n    $ cat > pypiserver-start.py\n    import pypiserver\n    from pypiserver import bottle\n    import pam\n    app = pypiserver.app(root='./packages', auther=pam.authenticate)\n    bottle.run(app=app, host='0.0.0.0', port=80, server='auto')\n\n    [Ctrl+ D]\n\n3. Invoke the python-script to start-up ``pypiserver``::\n\n    $ python pypiserver-start.py\n\n\n.. Note::\n   The `python-pam`_ module, requires *read* access to ``/etc/shadow`` file;\n   you may add the user under which ``pypiserver`` runs into the *shadow*\n   group, with a command like this: ``sudo usermod -a -G shadow pypy-user``.\n\n\nSources\n=======\n\nTo create a copy of the repository, use::\n\n    git clone https://github.com/pypiserver/pypiserver.git\n    cd pypiserver\n\nTo receive any later changes, in the above folder use::\n\n    git pull\n\n\nKnown Limitations\n=================\n\n``pypiserver`` does not implement the full API as seen on PyPI_. It\nimplements just enough to make ``easy_install``, ``pip install``, and\n``search`` work.\n\nThe following limitations are known:\n\n- Command ``pypi -U`` that compares uploaded packages with *pypi* to see if\n  they are outdated, does not respect a http-proxy environment variable\n  (see `#19 <https://github.com/pypiserver/pypiserver/issues/19>`_).\n- It accepts documentation uploads but does not save them to\n  disk (see `#47 <https://github.com/pypiserver/pypiserver/issues/47>`_ for a\n  discussion)\n- It does not handle misspelled packages as *pypi-repo* does,\n  therefore it is suggested to use it with ``--extra-index-url`` instead\n  of ``--index-url`` (see `#38 <https://github.com/pypiserver/pypiserver/issues/38>`_).\n\nPlease use Github's `bugtracker <https://github.com/pypiserver/pypiserver/issues>`_\nfor other bugs you find.\n\n\nSimilar Projects\n================\n\nThere are lots of other projects, which allow you to run your own\nPyPI server. If ``pypiserver`` doesn't work for you, the following are\namong the most popular alternatives:\n\n- `devpi-server <https://pypi.org/project/devpi/>`_:\n  a reliable fast pypi.org caching server, part of\n  the comprehensive `github-style pypi index server and packaging meta tool\n  <https://pypi.org/project/devpi/>`_.\n  (version: 2.1.4, access date: 8/3/2015)\n\n- `pip2pi <https://github.com/wolever/pip2pi>`_\n  a simple cmd-line tool that builds a PyPI-compatible local folder from pip requirements\n  (version: 0.6.7, access date: 8/3/2015)\n\n- `flask-pypi-proxy <http://flask-pypi-proxy.readthedocs.org/>`_\n  A proxy for PyPI that also enables also uploading custom packages.\n\n- `twine`_:\n  A command-line utility for interacting with PyPI or ``pypiserver``.\n\n- `pypi-uploader`_:\n  A command-line utility to upload packages to your ``pypiserver`` from pypi without\n  having to store them locally first.\n\n- Check this SO question: `How to roll my own pypi\n  <http://stackoverflow.com/questions/1235331/how-to-roll-my-own-pypi>`_\n\n\nLicensing\n=========\n\n``pypiserver`` contains a copy of bottle_ which is available under the\nMIT license, and the remaining part is distributed under the zlib/libpng license.\nSee the ``LICENSE.txt`` file.\n\n\n.. _bottle: http://bottlepy.org\n.. _PyPI: https://pypi.org\n.. _twine: https://pypi.org/project/twine/\n.. _pypi-uploader: https://pypi.org/project/pypi-uploader/\n.. _python-pam: https://pypi.org/project/python-pam/\n.. |travis-status| image:: https://travis-ci.org/pypiserver/pypiserver.svg\n    :alt: Travis build status\n    :scale: 100%\n    :target: https://travis-ci.org/pypiserver/pypiserver\n\n.. |pypi-ver| image::  https://img.shields.io/pypi/v/pypiserver.svg\n    :target: https://pypi.org/project/pypiserver/\n    :alt: Latest Version in PyPI\n\n.. |python-ver| image:: https://img.shields.io/pypi/pyversions/pypiserver.svg\n    :target: https://pypi.org/project/pypiserver/\n    :alt: Supported Python versions\n\n.. |proj-license| image:: https://img.shields.io/badge/license-BSD%2Bzlib%2Flibpng-blue.svg\n    :target: https://raw.githubusercontent.com/pypiserver/pypiserver/master/LICENSE.txt\n    :alt: Project License\n\n.. |dependencies| image:: https://img.shields.io/requires/github/pypiserver/pypiserver.svg\n    :target: https://requires.io/github/pypiserver/pypiserver/requirements/\n    :alt: Dependencies up-to-date?\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pypiserver/pypiserver", "keywords": "", "license": "", "maintainer": "Kostis Anagnostopoulos <ankostis@gmail.com>Matthew Planchard <mplanchard@gmail.com>", "maintainer_email": "ankostis@gmail.com", "name": "pypiserver", "package_url": "https://pypi.org/project/pypiserver/", "platform": "any", "project_url": "https://pypi.org/project/pypiserver/", "project_urls": {"Homepage": "https://github.com/pypiserver/pypiserver"}, "release_url": "https://pypi.org/project/pypiserver/1.3.2/", "requires_dist": ["watchdog ; extra == 'cache'", "passlib (>=1.6) ; extra == 'passlib'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "A minimal PyPI server for use with pip/easy_install.", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"pypiserver_logo.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afdeab5311cefc0d95e282dd07aa7d8124342a19/707970697365727665725f6c6f676f2e706e67\" width=\"300px\">\n<div id=\"pypiserver-minimal-pypi-server-for-use-with-pip-easy-install\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">pypiserver - minimal PyPI server for use with pip/easy_install</a></h2>\n<p><a href=\"https://pypi.org/project/pypiserver/\" rel=\"nofollow\"><img alt=\"Latest Version in PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1ef67ec7d38966268ad8b2b2e227c203e949280/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707970697365727665722e737667\"></a> <a href=\"https://travis-ci.org/pypiserver/pypiserver\" rel=\"nofollow\"><img alt=\"Travis build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b5c90adf4187dda6fbdecaaafad7a549c6a2bdb/68747470733a2f2f7472617669732d63692e6f72672f707970697365727665722f707970697365727665722e737667\"></a> <a href=\"https://requires.io/github/pypiserver/pypiserver/requirements/\" rel=\"nofollow\"><img alt=\"Dependencies up-to-date?\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30741c4fa451be834b4d95e74f501fac2f8604d6/68747470733a2f2f696d672e736869656c64732e696f2f72657175697265732f6769746875622f707970697365727665722f707970697365727665722e737667\"></a> <a href=\"https://pypi.org/project/pypiserver/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb3813fce2af3a239b700656e64b418ecfa3d435/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707970697365727665722e737667\"></a> <a href=\"https://raw.githubusercontent.com/pypiserver/pypiserver/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"Project License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3241b17be1fd775ce8e78ecf6d4378404cd17e93/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4253442532427a6c69622532466c6962706e672d626c75652e737667\"></a></p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th><td>1.3.2</td>\n</tr>\n<tr><th>Date:</th><td>2020-01-11</td>\n</tr>\n<tr><th>Source:</th><td><a href=\"https://github.com/pypiserver/pypiserver\" rel=\"nofollow\">https://github.com/pypiserver/pypiserver</a></td>\n</tr>\n<tr><th>PyPI:</th><td><a href=\"https://pypi.org/project/pypiserver/\" rel=\"nofollow\">https://pypi.org/project/pypiserver/</a></td>\n</tr>\n<tr><th>Travis:</th><td><a href=\"https://travis-ci.org/pypiserver/pypiserver\" rel=\"nofollow\">https://travis-ci.org/pypiserver/pypiserver</a></td>\n</tr>\n<tr><th>Maintainers:</th><td>Kostis Anagnostopoulos &lt;<a href=\"mailto:ankostis%40gmail.com\">ankostis<span>@</span>gmail<span>.</span>com</a>&gt;,\nMatthew Planchard &lt;<a href=\"mailto:mplanchard%40gmail.com\">mplanchard<span>@</span>gmail<span>.</span>com</a>&gt;</td>\n</tr>\n<tr><th>License:</th><td>zlib/libpng + MIT</td>\n</tr>\n</tbody>\n</table>\n<p><tt>pypiserver</tt> is a minimal <a href=\"https://pypi.org\" rel=\"nofollow\">PyPI</a> compatible server for <tt>pip</tt> or <tt>easy_install</tt>.\nIt is based on <a href=\"http://bottlepy.org\" rel=\"nofollow\">bottle</a> and serves packages from regular directories.\nWheels, bdists, eggs and accompanying PGP-signatures can be uploaded\neither with <tt>pip</tt>, <tt>setuptools</tt>, <tt>twine</tt>, <tt><span class=\"pre\">pypi-uploader</span></tt>, or simply copied\nwith <tt>scp</tt>.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#pypiserver-minimal-pypi-server-for-use-with-pip-easy-install\" id=\"id6\" rel=\"nofollow\">pypiserver - minimal PyPI server for use with pip/easy_install</a><ul>\n<li><a href=\"#quickstart-installation-and-usage\" id=\"id7\" rel=\"nofollow\">Quickstart: Installation and Usage</a></li>\n<li><a href=\"#client-side-configurations\" id=\"id8\" rel=\"nofollow\">Client-Side Configurations</a><ul>\n<li><a href=\"#configuring-pip\" id=\"id9\" rel=\"nofollow\">Configuring <tt>pip</tt></a></li>\n<li><a href=\"#configuring-easy-install\" id=\"id10\" rel=\"nofollow\">Configuring <tt>easy_install</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#uploading-packages-remotely\" id=\"id11\" rel=\"nofollow\">Uploading Packages Remotely</a><ul>\n<li><a href=\"#apache-like-authentication-htpasswd\" id=\"id12\" rel=\"nofollow\"><em>Apache</em>-Like Authentication (<tt>htpasswd</tt>)</a></li>\n<li><a href=\"#upload-with-setuptools\" id=\"id13\" rel=\"nofollow\">Upload with <tt>setuptools</tt></a></li>\n<li><a href=\"#upload-with-twine\" id=\"id14\" rel=\"nofollow\">Upload with <tt>twine</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#using-the-docker-image\" id=\"id15\" rel=\"nofollow\">Using the Docker Image</a></li>\n<li><a href=\"#alternative-installation-methods\" id=\"id16\" rel=\"nofollow\">Alternative Installation Methods</a><ul>\n<li><a href=\"#installing-the-very-latest-version\" id=\"id17\" rel=\"nofollow\">Installing the Very Latest Version</a></li>\n<li><a href=\"#installing-it-as-standalone-script\" id=\"id18\" rel=\"nofollow\">Installing It As Standalone Script</a></li>\n<li><a href=\"#running-on-heroku-dotcloud\" id=\"id19\" rel=\"nofollow\">Running on Heroku/Dotcloud</a></li>\n</ul>\n</li>\n<li><a href=\"#recipes\" id=\"id20\" rel=\"nofollow\">Recipes</a><ul>\n<li><a href=\"#managing-the-package-directory\" id=\"id21\" rel=\"nofollow\">Managing the Package Directory</a></li>\n<li><a href=\"#serving-thousands-of-packages\" id=\"id22\" rel=\"nofollow\">Serving Thousands of Packages</a></li>\n<li><a href=\"#managing-automated-startup\" id=\"id23\" rel=\"nofollow\">Managing Automated Startup</a><ul>\n<li><a href=\"#running-as-a-systemd-service\" id=\"id24\" rel=\"nofollow\">Running As a <tt>systemd</tt> Service</a></li>\n<li><a href=\"#launching-through-supervisor\" id=\"id25\" rel=\"nofollow\">Launching through <tt>supervisor</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#using-a-different-wsgi-server\" id=\"id26\" rel=\"nofollow\">Using a Different WSGI Server</a><ul>\n<li><a href=\"#apache-mod-wsgi\" id=\"id27\" rel=\"nofollow\">Apache (<tt>mod_wsgi</tt>)</a></li>\n<li><a href=\"#gunicorn\" id=\"id28\" rel=\"nofollow\"><tt>gunicorn</tt></a></li>\n<li><a href=\"#paste\" id=\"id29\" rel=\"nofollow\"><tt>paste</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#behind-a-reverse-proxy\" id=\"id30\" rel=\"nofollow\">Behind a Reverse Proxy</a><ul>\n<li><a href=\"#nginx\" id=\"id31\" rel=\"nofollow\">Nginx</a></li>\n<li><a href=\"#supporting-https\" id=\"id32\" rel=\"nofollow\">Supporting HTTPS</a></li>\n</ul>\n</li>\n<li><a href=\"#utilizing-the-api\" id=\"id33\" rel=\"nofollow\">Utilizing the API</a><ul>\n<li><a href=\"#using-ad-hoc-authentication-providers\" id=\"id34\" rel=\"nofollow\">Using Ad-Hoc Authentication Providers</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#sources\" id=\"id35\" rel=\"nofollow\">Sources</a></li>\n<li><a href=\"#known-limitations\" id=\"id36\" rel=\"nofollow\">Known Limitations</a></li>\n<li><a href=\"#similar-projects\" id=\"id37\" rel=\"nofollow\">Similar Projects</a></li>\n<li><a href=\"#licensing\" id=\"id38\" rel=\"nofollow\">Licensing</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"quickstart-installation-and-usage\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Quickstart: Installation and Usage</a></h3>\n<p><tt>pypiserver</tt> &gt; 1.2.x works with Python 2.7 and 3.4+ or PyPy.\nOlder Python versions may still work, but they are not tested.\nFor legacy Python versions, use <tt><span class=\"pre\">pypiserver-1.1.x</span></tt> series.</p>\n<div>\n<p>Tip</p>\n<p>The commands below work on a unix-like operating system with a posix shell.\nThe <tt>'~'</tt> character expands to user\u2019s home directory.</p>\n<p>If you\u2019re using Windows, you\u2019ll have to use their \u201cWindows counterparts\u201d.\nThe same is true for the rest of this documentation.</p>\n</div>\n<ol>\n<li><p>Install <tt>pypiserver</tt> with this command:</p>\n<pre>pip install pypiserver                # Or: pypiserver[passlib,watchdog]\nmkdir ~/packages                      # Copy packages into this directory.\n</pre>\n<p>See also <a href=\"#alternative-installation-methods\" rel=\"nofollow\">Alternative Installation methods</a>.</p>\n</li>\n<li><p>Copy some packages into your <tt>~/packages</tt> folder and then\nget your <tt>pypiserver</tt> up and running:</p>\n<pre>pypi-server -p 8080 ~/packages &amp;      # Will listen to all IPs.\n</pre>\n</li>\n<li><p>From the client computer, type this:</p>\n<pre># Download and install hosted packages.\npip install --extra-index-url http://localhost:8080/simple/ ...\n\n# or\npip install --extra-index-url http://localhost:8080 ...\n\n# Search hosted packages.\npip search --index http://localhost:8080 ...\n\n# Note that pip search does not currently work with the /simple/ endpoint.\n</pre>\n<p>See also <a href=\"#client-side-configurations\" rel=\"nofollow\">Client-side configurations</a> for avoiding tedious typing.</p>\n</li>\n<li><p>Enter <tt><span class=\"pre\">pypi-server</span> <span class=\"pre\">-h</span></tt> in the cmd-line to print a detailed usage message:</p>\n<pre>pypi-server [OPTIONS] [PACKAGES_DIRECTORY...]\n  start PyPI compatible package server serving packages from\n  PACKAGES_DIRECTORY. If PACKAGES_DIRECTORY is not given on the\n  command line, it uses the default ~/packages. pypiserver scans this\n  directory recursively for packages. It skips packages and\n  directories starting with a dot. Multiple package directories can be\n  specified.\n\npypi-server understands the following options:\n\n  -p, --port PORT\n    Listen on port PORT (default: 8080).\n\n  -i, --interface INTERFACE\n    Listen on interface INTERFACE (default: 0.0.0.0, any interface).\n\n  -a, --authenticate (update|download|list), ...\n    Comma-separated list of (case-insensitive) actions to authenticate.\n    Requires to have set the password (-P option).\n    To password-protect package downloads (in addition to uploads) while\n    leaving listings public, use:\n      -P foo/htpasswd.txt -a update,download\n    To allow unauthorized access, use:\n      -P . -a .\n    Note that when uploads are not protected, the `register` command\n    is not necessary, but `~/.pypirc` still need username and password fields,\n    even if bogus.\n    By default, only 'update' is password-protected.\n\n  -P, --passwords PASSWORD_FILE\n    Use apache htpasswd file PASSWORD_FILE to set usernames &amp; passwords when\n    authenticating certain actions (see -a option).\n    To allow unauthorized access, use:\n      -P . -a .\n\n  --disable-fallback\n    Disable redirect to real PyPI index for packages not found in the\n    local index.\n\n  --fallback-url FALLBACK_URL\n    For packages not found in the local index, this URL will be used to\n    redirect to (default: https://pypi.org/simple/).\n\n  --server METHOD\n    Use METHOD to run the server. Valid values include paste,\n    cherrypy, twisted, gunicorn, gevent, wsgiref, auto. The\n    default is to use \"auto\" which chooses one of paste, cherrypy,\n    twisted or wsgiref.\n\n  -r, --root PACKAGES_DIRECTORY\n    [deprecated] Serve packages from PACKAGES_DIRECTORY.\n\n  -o, --overwrite\n    Allow overwriting existing package files.\n\n  --hash-algo ALGO\n    Any `hashlib` available algo used as fragments on package links.\n    Set one of (0, no, off, false) to disabled it (default: md5).\n\n  --welcome HTML_FILE\n    Uses the ASCII contents of HTML_FILE as welcome message response.\n\n  -v\n    Enable verbose logging; repeat for more verbosity.\n\n  --log-conf &lt;FILE&gt;\n    Read logging configuration from FILE.\n    By default, configuration is read from `log.conf` if found in server's dir.\n\n  --log-file &lt;FILE&gt;\n    Write logging info into this FILE.\n\n  --log-frmt &lt;FILE&gt;\n    The logging format-string (see `logging.LogRecord` class from standard python library).\n    [Default: %(asctime)s|%(name)s|%(levelname)s|%(thread)d|%(message)s]\n\n  --log-req-frmt FORMAT\n    A format-string selecting Http-Request properties to log; set to '%s' to see them all.\n    [Default: %(bottle.request)s]\n\n  --log-res-frmt FORMAT\n    A format-string selecting Http-Response properties to log; set to  '%s' to see them all.\n    [Default: %(status)s]\n\n  --log-err-frmt FORMAT\n    A format-string selecting Http-Error properties to log; set to  '%s' to see them all.\n    [Default: %(body)s: %(exception)s \\n%(traceback)s]\n\n  --cache-control AGE\n    Add \"Cache-Control: max-age=AGE, public\" header to package downloads.\n    Pip 6+ needs this for caching.\n\npypi-server -h, --help\n  Show this help message.\n\npypi-server --version\n  Show pypi-server's version.\n\npypi-server -U [OPTIONS] [PACKAGES_DIRECTORY...]\n  Update packages in PACKAGES_DIRECTORY. This command searches\n  pypi.org for updates and shows a pip command line which\n  updates the package.\n\nThe following additional options can be specified with -U:\n\n  -x\n    Execute the pip commands instead of only showing them.\n\n  -d DOWNLOAD_DIRECTORY\n    Download package updates to this directory. The default is to use\n    the directory which contains the latest version of the package to\n    be updated.\n\n  -u\n    Allow updating to unstable version (alpha, beta, rc, dev versions).\n\nVisit https://github.com/pypiserver/pypiserver for more information.\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"client-side-configurations\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Client-Side Configurations</a></h3>\n<p>Always specifying the the pypi url on the command line is a bit\ncumbersome. Since <tt>pypiserver</tt> redirects <tt>pip/easy_install</tt> to the\n<tt>pypi.org</tt> index if it doesn\u2019t have a requested package, it is a\ngood idea to configure them to always use your local pypi index.</p>\n<div id=\"configuring-pip\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Configuring <tt>pip</tt></a></h4>\n<p>For <tt>pip</tt> command this can be done by setting the environment variable\n<tt>PIP_EXTRA_INDEX_URL</tt> in your <tt><span class=\"pre\">.bashr/.profile/.zshrc</span></tt>:</p>\n<pre>export PIP_EXTRA_INDEX_URL=http://localhost:8080/simple/\n</pre>\n<p>or by adding the following lines to <tt><span class=\"pre\">~/.pip/pip.conf</span></tt>:</p>\n<pre>[global]\nextra-index-url = http://localhost:8080/simple/\n</pre>\n<div>\n<p>Note</p>\n<p>If you have installed <tt>pypiserver</tt> on a remote url without <em>https</em>\nyou wil receive an \u201cuntrusted\u201d warning from <em>pip</em>, urging you to append\nthe <tt><span class=\"pre\">--trusted-host</span></tt> option.  You can also include this option permanently\nin your configuration-files or environment variables.</p>\n</div>\n</div>\n<div id=\"configuring-easy-install\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Configuring <tt>easy_install</tt></a></h4>\n<p>For <tt>easy_install</tt> command you may set the following configuration in\n<tt><span class=\"pre\">~/.pydistutils.cfg</span></tt>:</p>\n<pre>[easy_install]\nindex_url = http://localhost:8080/simple/\n</pre>\n</div>\n</div>\n<div id=\"uploading-packages-remotely\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Uploading Packages Remotely</a></h3>\n<p>Instead of copying packages directly to the server\u2019s folder (i.e. with <tt>scp</tt>),\nyou may use python tools for the task, e.g. <tt>python setup.py upload</tt>.\nIn that case, <tt>pypiserver</tt> is responsible for authenticating the upload-requests.</p>\n<div>\n<p>Note</p>\n<p>We strongly advise to password-protected your uploads!</p>\n<p>It is possible to disable authentication for uploads (e.g. in intranets).\nTo avoid lazy security decisions, read help for <tt><span class=\"pre\">-P</span></tt> and <tt><span class=\"pre\">-a</span></tt> options.</p>\n</div>\n<div id=\"apache-like-authentication-htpasswd\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\"><em>Apache</em>-Like Authentication (<tt>htpasswd</tt>)</a></h4>\n<ol>\n<li><p>First make sure you have the <em>passlib</em> module installed (note that\n<tt><span class=\"pre\">passlib&gt;=1.6</span></tt> is required), which is needed for parsing the Apache\n<em>htpasswd</em> file specified by the <tt><span class=\"pre\">-P</span></tt>, <tt><span class=\"pre\">--passwords</span></tt> option\n(see next steps):</p>\n<pre>pip install passlib\n</pre>\n</li>\n<li><p>Create the Apache <em>htpasswd</em> file with at least one user/password pair\nwith this command (you\u2019ll be prompted for a password):</p>\n<pre>htpasswd -sc htpasswd.txt &lt;some_username&gt;\n</pre>\n<div>\n<p>Tip</p>\n<p>Read this SO question for running <cite>htpasswd</cite> cmd\nunder <em>Windows</em>:</p>\n<blockquote>\n<p><a href=\"http://serverfault.com/questions/152950/how-to-create-and-edit-htaccess-and-htpasswd-locally-on-my-computer-and-then-u\" rel=\"nofollow\">http://serverfault.com/questions/152950/how-to-create-and-edit-htaccess-and-htpasswd-locally-on-my-computer-and-then-u</a></p>\n</blockquote>\n<p>or if you have bogus passwords that you don\u2019t care because they are for\nan internal service (which is still \u201cbad\u201d, from a security prespective\u2026)\nyou may use this public service:</p>\n<blockquote>\n<p><a href=\"http://www.htaccesstools.com/htpasswd-generator/\" rel=\"nofollow\">http://www.htaccesstools.com/htpasswd-generator/</a></p>\n</blockquote>\n</div>\n<div>\n<p>Tip</p>\n<p>When accessing pypiserver via the api, alternate authentication\nmethods are available via the <tt>auther</tt> config flag. Any callable\nreturning a boolean can be passed through to the pypiserver config in\norder to provide custom authentication. For example, to configure\npypiserver to authenticate using the <a href=\"https://pypi.org/project/python-pam/\" rel=\"nofollow\">python-pam</a>:</p>\n<pre>import pam\npypiserver.default_config(auther=pam.authenticate)\n</pre>\n<p>Please see <a href=\"#using-ad-hoc-authentication-providers\" rel=\"nofollow\">Using Ad-hoc authentication providers</a> for more information.</p>\n</div>\n</li>\n<li><p>You  need to restart the server with the <tt><span class=\"pre\">-P</span></tt> option only once\n(but user/password pairs can later be added or updated on the fly):</p>\n<pre>./pypi-server -p 8080 -P htpasswd.txt ~/packages &amp;\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"upload-with-setuptools\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Upload with <tt>setuptools</tt></a></h4>\n<ol>\n<li><p>On client-side, edit or create a <tt><span class=\"pre\">~/.pypirc</span></tt> file with a similar content:</p>\n<pre>[distutils]\nindex-servers =\n  pypi\n  local\n\n[pypi]\nusername:&lt;your_pypi_username&gt;\npassword:&lt;your_pypi_passwd&gt;\n\n[local]\nrepository: http://localhost:8080\nusername: &lt;some_username&gt;\npassword: &lt;some_passwd&gt;\n</pre>\n</li>\n<li><p>Then from within the directory of the python-project you wish to upload,\nissue this command:</p>\n<pre>python setup.py sdist upload -r local\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"upload-with-twine\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Upload with <tt>twine</tt></a></h4>\n<p>To avoid storing you passwords on disk, in clear text, you may either:</p>\n<ul>\n<li><p>use the <tt>register</tt> <em>setuptools</em>\u2019s command with the <tt><span class=\"pre\">-r</span></tt> option,\nlike that:</p>\n<pre>python setup.py sdist register -r local upload -r local\n</pre>\n</li>\n<li><p>use <a href=\"https://pypi.org/project/twine/\" rel=\"nofollow\">twine</a> library, which\nbreaks the procedure in two steps.  In addition, it supports signing\nyour files with PGP-Signatures and uploading the generated <cite>.asc</cite> files\nto <tt>pypiserver</tt>:</p>\n<pre>twine upload -r local --sign -identity user_name ./foo-1.zip\n</pre>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"using-the-docker-image\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Using the Docker Image</a></h3>\n<p>Starting with version 1.2.5, official Docker images will be built for each\npush to master, each dev, alpha, or beta release, and each final release.\nThe most recent full release will always be available under the tag <tt>latest</tt>,\nand the current master branch will always be available under the tag\n<tt>unstable</tt>.</p>\n<p>You can always check to see what tags are currently available at our\n<a href=\"https://hub.docker.com/r/pypiserver/pypiserver/tags/\" rel=\"nofollow\">Docker Repo</a>.</p>\n<p>To run the most recent release of <tt>pypiserver</tt> with Docker, simply:</p>\n<pre>docker run pypiserver/pypiserver:latest\n</pre>\n<p>This starts <tt>pypiserver</tt> serving packages from the <tt>/data/packages</tt>\ndirectory inside the container, listening on the container port 8080.</p>\n<p>The container takes all the same arguments as the normal <tt><span class=\"pre\">pypi-server</span></tt>\nexecutable, with the exception of the internal container port (<tt><span class=\"pre\">-p</span></tt>),\nwhich will always be 8080.</p>\n<p>Of course, just running a container isn\u2019t that interesting. To map\nport 80 on the host to port 8080 on the container:</p>\n<pre>docker run -p 80:8080 pypiserver/pypiserver:latest\n</pre>\n<p>You can now access your <tt>pypiserver</tt> at <tt>localhost:80</tt> in a web browser.</p>\n<p>To serve packages from a directory on the host, e.g. <tt>~/packages</tt>:</p>\n<pre>docker run -p 80:8080 -v ~/packages:/data/packages pypiserver/pypiserver:latest\n</pre>\n<p>To authenticate against a local <tt>.htpasswd</tt> file:</p>\n<pre>docker run -p 80:8080 -v ~/.htpasswd:/data/.htpasswd pypiserver/pypiserver:latest -P .htpasswd packages\n</pre>\n<p>You can also specify <tt>pypiserver</tt> to run as a Docker service using a\ncomposefile. An example composefile is <a href=\"docker-compose.yml\" rel=\"nofollow\">provided</a>.</p>\n</div>\n<div id=\"alternative-installation-methods\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Alternative Installation Methods</a></h3>\n<p>When trying the methods below, first use the following command to check whether\nprevious versions of <tt>pypiserver</tt> already exist, and (optionally) uninstall them:</p>\n<pre># VERSION-CHECK: Fails if not installed.\npypi-server --version\n\n# UNINSTALL: Invoke again untill it fails.\npip uninstall pypiserver\n</pre>\n<div id=\"installing-the-very-latest-version\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Installing the Very Latest Version</a></h4>\n<p>In case the latest version in <em>pypi</em> is a pre-release, you have to use\n<em>pip</em>\u2019s <cite>\u2013pre</cite> option.  And to update an existing installation combine it\nwith <cite>\u2013ignore-installed</cite>:</p>\n<pre>pip install pypiserver --pre -I\n</pre>\n<p>You can even install the latest <tt>pypiserver</tt> directly from <em>github</em> with the\nfollowing command, assuming you have <em>git</em> installed on your <tt>PATH</tt>:</p>\n<pre>pip install git+git://github.com/pypiserver/pypiserver.git\n</pre>\n</div>\n<div id=\"installing-it-as-standalone-script\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Installing It As Standalone Script</a></h4>\n<p>The git repository contains a <tt><span class=\"pre\">pypi-server-standalone.py</span></tt> script,\nwhich is a single python file that can be executed without any other\ndependencies.</p>\n<p>Run the following commands to download the script with <tt>wget</tt>:</p>\n<pre>wget https://raw.github.com/pypiserver/pypiserver/standalone/pypi-server-standalone.py\nchmod +x pypi-server-standalone.py\n</pre>\n<p>or with <tt>curl</tt>:</p>\n<pre>curl -O https://raw.github.com/pypiserver/pypiserver/standalone/pypi-server-standalone.py\nchmod +x pypi-server-standalone.py\n</pre>\n<p>You can then start-up the server with:</p>\n<pre>./pypi-server-standalone.py\n</pre>\n<p>Feel free to rename the script and move it into your <tt>$PATH</tt>.</p>\n</div>\n<div id=\"running-on-heroku-dotcloud\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Running on Heroku/Dotcloud</a></h4>\n<p><a href=\"https://github.com/dexterous/pypiserver-on-the-cloud\" rel=\"nofollow\">https://github.com/dexterous/pypiserver-on-the-cloud</a> contains\ninstructions on how to run <tt>pypiserver</tt> on one of the supported cloud\nservice providers.</p>\n</div>\n</div>\n<div id=\"recipes\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Recipes</a></h3>\n<div id=\"managing-the-package-directory\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Managing the Package Directory</a></h4>\n<p>The <tt><span class=\"pre\">pypi-server</span></tt> command has the <tt><span class=\"pre\">-U</span></tt> option that searches for updates of\navailable packages. It scans the package directory for available\npackages and searches on pypi.org for updates. Without further\noptions <tt><span class=\"pre\">pypi-server</span> <span class=\"pre\">-U</span></tt> will just print a list of commands which must\nbe run in order to get the latest version of each package. Output\nlooks like:</p>\n<pre>$ ./pypi-server -U\nchecking 106 packages for newer version\n\n.........u.e...........e..u.............\n.....e..............................e...\n..........................\n\nno releases found on pypi for PyXML, Pymacs, mercurial, setuptools\n\n# update raven from 1.4.3 to 1.4.4\npip -q install --no-deps  --extra-index-url https://pypi.org/simple/ -d /home/ralf/packages/mirror raven==1.4.4\n\n# update greenlet from 0.3.3 to 0.3.4\npip -q install --no-deps  --extra-index-url https://pypi.org/simple/ -d /home/ralf/packages/mirror greenlet==0.3.4\n</pre>\n<p>It first prints for each package a single character after checking the\navailable versions on pypi. A dot(<cite>.</cite>) means the package is up-to-date, <tt>'u'</tt>\nmeans the package can be updated and <tt>'e'</tt> means the list of releases on\npypi is empty. After that it shows a <em>pip</em> command line which can be used\nto update a one package. Either copy and paste that or run\n<tt><span class=\"pre\">pypi-server</span> <span class=\"pre\">-Ux</span></tt> in order to really execute those commands. You need\nto have <em>pip</em> installed for that to work however.</p>\n<p>Specifying an additional <tt><span class=\"pre\">-u</span></tt> option will also allow alpha, beta and\nrelease candidates to be downloaded. Without this option these\nreleases won\u2019t be considered.</p>\n</div>\n<div id=\"serving-thousands-of-packages\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Serving Thousands of Packages</a></h4>\n<p>By default, <tt>pypiserver</tt> scans the entire packages directory each time an\nincoming HTTP request occurs. This isn\u2019t a problem for a small number of\npackages, but causes noticeable slow-downs when serving thousands of packages.</p>\n<p>If you run into this problem, significant speedups can be gained by enabling\npypiserver\u2019s directory caching functionality. The only requirement is to\ninstall the <tt>watchdog</tt> package, or it can be installed during <tt>pypiserver</tt>\ninstallation, by specifying the <tt>cache</tt> extras option:</p>\n<pre>pip install pypiserver[cache]\n</pre>\n<p>Additional speedups can be obtained by using your webserver\u2019s builtin\ncaching functionality. For example, if you are using <cite>nginx</cite> as a\nreverse-proxy as described below in <a href=\"#behind-a-reverse-proxy\" rel=\"nofollow\">Behind a reverse proxy</a>, you can\neasily enable caching. For example, to allow nginx to cache up to\n10 gigabytes of data for up to 1 hour:</p>\n<pre>proxy_cache_path /data/nginx/cache\n                 levels=1:2\n                 keys_zone=pypiserver_cache:10m\n                 max_size=10g\n                 inactive=60m\n                 use_temp_path=off;\n\nserver {\n    # ...\n    location / {\n        proxy_cache pypiserver_cache;\n        proxy_pass http://localhost:8080;\n    }\n}\n</pre>\n<p>Using webserver caching is especially helpful if you have high request\nvolume. Using <cite>nginx</cite> caching, a real-world pypiserver installation was\nable to easily support over 1000 package downloads/min at peak load.</p>\n</div>\n<div id=\"managing-automated-startup\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Managing Automated Startup</a></h4>\n<p>There are a variety of options for handling the automated starting of\npypiserver upon system startup. Two of the most common are <em>systemd</em> and\n<em>supervisor</em>.</p>\n<div id=\"running-as-a-systemd-service\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">Running As a <tt>systemd</tt> Service</a></h5>\n<p><tt>systemd</tt> is installed by default on most modern Linux systems and as such,\nit is an excellent option for managing the pypiserver process. An example\nconfig file for <tt>systemd</tt> can be seen below:</p>\n<pre>[Unit]\nDescription=A minimal PyPI server for use with pip/easy_install.\nAfter=network.target\n\n[Service]\nType=simple\n# systemd requires absolute path here too.\nPIDFile=/var/run/pypiserver.pid\nUser=www-data\nGroup=www-data\n\nExecStart=/usr/local/bin/pypi-server -p 8080 -a update,download --log-file /var/log/pypiserver.log -P /etc/nginx/.htpasswd /var/www/pypi\nExecStop=/bin/kill -TERM $MAINPID\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\n\nWorkingDirectory=/var/www/pypi\n\nTimeoutStartSec=3\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\n</pre>\n<p>Adjusting the paths and adding this file as <tt>pypiserver.service</tt> into your\n<tt>systemd/system</tt> directory will allow management of the pypiserver process with\n<tt>systemctl</tt>, e.g. <tt>systemctl start pypiserver</tt>.</p>\n<p>More useful information about <em>systemd</em> can be found at\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\" rel=\"nofollow\">https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units</a></p>\n</div>\n<div id=\"launching-through-supervisor\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">Launching through <tt>supervisor</tt></a></h5>\n<p><a href=\"http://supervisord.org/\" rel=\"nofollow\">supervisor</a> has the benefit of being a pure python\npackage and as such, it provides excellent cross-platform support for process\nmanagement. An example configuration file for <tt>supervisor</tt> is given below:</p>\n<pre>[program:pypi]\ncommand=/home/pypi/pypi-venv/bin/pypi-server -p 7001 -P /home/pypi/.htpasswd /home/pypi/packages\ndirectory=/home/pypi\nuser=pypi\nautostart=true\nautorestart=true\nstderr_logfile=/var/log/pypiserver.err.log\nstdout_logfile=/var/log/pypiserver.out.log\n</pre>\n<p>From there, the process can be managed via <tt>supervisord</tt> using <tt>supervisorctl</tt>.</p>\n</div>\n</div>\n<div id=\"using-a-different-wsgi-server\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Using a Different WSGI Server</a></h4>\n<ul>\n<li><p>The <tt>bottle</tt> web-server which supports many WSGI-servers, among others,\n<tt>paste</tt>, <tt>cherrypy</tt>, <tt>twisted</tt> and <tt>wsgiref</tt> (part of Python); you select\nthem using the <tt><span class=\"pre\">--server</span></tt> flag.</p>\n</li>\n<li><p>You may view all supported WSGI servers using the following interactive code:</p>\n<pre>&gt;&gt;&gt; from pypiserver import bottle\n&gt;&gt;&gt; list(bottle.server_names.keys())\n['cgi', 'gunicorn', 'cherrypy', 'eventlet', 'tornado', 'geventSocketIO',\n'rocket', 'diesel', 'twisted', 'wsgiref', 'fapws3', 'bjoern', 'gevent',\n'meinheld', 'auto', 'aiohttp', 'flup', 'gae', 'paste', 'waitress']\n</pre>\n</li>\n<li><p>If none of the above servers matches your needs, invoke just the\n<tt>pypiserver:app()</tt> method which returns the internal WSGI-app WITHOUT\nstarting-up a server - you may then send it to any WSGI server you like.\nRead also the <a href=\"#utilizing-the-api\" rel=\"nofollow\">Utilizing the API</a> section.</p>\n</li>\n<li><p>Some examples are given below - you may find more details in <a href=\"http://bottlepy.org/docs/dev/deployment.html#switching-the-server-backend\" rel=\"nofollow\">bottle\nsite</a>.</p>\n</li>\n</ul>\n<div id=\"apache-mod-wsgi\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">Apache (<tt>mod_wsgi</tt>)</a></h5>\n<p>To use your <em>Apache2</em> with <tt>pypiserver</tt>, prefer to utilize <tt>mod_wsgi</tt> as\nexplained in <a href=\"http://bottlepy.org/docs/dev/deployment.html#apache-mod-wsgi\" rel=\"nofollow\">bottle\u2019s documentation</a>.</p>\n<div>\n<p>Note</p>\n<p>If you choose instead to go with <tt>mod_proxy</tt>, mind that you may bump into problems\nwith the prefix-path (see <a href=\"https://github.com/pypiserver/pypiserver/issues/155\" rel=\"nofollow\">#155</a>).</p>\n</div>\n<ol>\n<li><p>Adapt and place the following <em>Apache</em> configuration either into top-level scope,\nor inside some <tt>&lt;VirtualHost&gt;</tt> (contributed by Thomas Waldmann):</p>\n<pre>WSGIScriptAlias   /     /yoursite/wsgi/pypiserver-wsgi.py\nWSGIDaemonProcess       pypisrv user=pypisrv group=pypisrv umask=0007 \\\n                        processes=1 threads=5 maximum-requests=500 \\\n                        display-name=wsgi-pypisrv inactivity-timeout=300\nWSGIProcessGroup        pypisrv\nWSGIPassAuthorization On    # Required for authentication (https://github.com/pypiserver/pypiserver/issues/288)\n\n&lt;Directory /yoursite/wsgi &gt;\n    Require all granted\n&lt;/Directort&gt;\n</pre>\n<p>or if using older <tt>Apache &lt; 2.4</tt>, substitute the last part with this:</p>\n<pre>&lt;Directory /yoursite/wsgi &gt;\n    Order deny,allow\n    Allow from all\n&lt;/Directort&gt;\n</pre>\n</li>\n<li><p>Then create the <tt>/yoursite/cfg/pypiserver.wsgi</tt> file and make sure that\nthe <tt>user</tt> and <tt>group</tt> of the <tt>WSGIDaemonProcess</tt> directive\n(<tt>pypisrv:pypisrv</tt> in the example) have the read permission on it:</p>\n<pre>import pypiserver\n\nconf = pypiserver.default_config(\n    root =          \"/yoursite/packages\",\n    password_file = \"/yoursite/htpasswd\", )\napplication = pypiserver.app(**conf)\n</pre>\n<div>\n<p>Tip</p>\n<p>If you have installed <tt>pypiserver</tt> in a virtualenv, follow <tt>mod_wsgi</tt>\u2019s\n<a href=\"http://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html\" rel=\"nofollow\">instructions</a>\nand prepend the python code above with the following:</p>\n<pre>import site\n\nsite.addsitedir('/yoursite/venv/lib/pythonX.X/site-packages')\n</pre>\n</div>\n</li>\n</ol>\n<div>\n<p>Note</p>\n<p>For security reasons, notice that the <tt>Directory</tt> directive grants access\nto a directory holding the <tt>wsgi</tt> start-up script, alone; nothing else.</p>\n</div>\n<div>\n<p>Note</p>\n<p>To enable HTTPS support on Apache, configure the directive that contains the\nWSGI configuration to use SSL.</p>\n</div>\n</div>\n<div id=\"gunicorn\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\"><tt>gunicorn</tt></a></h5>\n<p>The following command uses <tt>gunicorn</tt> to start <tt>pypiserver</tt>:</p>\n<pre>gunicorn -w4 'pypiserver:app(root=\"/home/ralf/packages\")'\n</pre>\n<p>or when using multiple roots:</p>\n<pre>gunicorn -w4 'pypiserver:app(root=[\"/home/ralf/packages\", \"/home/ralf/experimental\"])'\n</pre>\n</div>\n<div id=\"paste\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\"><tt>paste</tt></a></h5>\n<p><a href=\"http://pythonpaste.org/\" rel=\"nofollow\">paste</a> allows to run multiple WSGI applications\nunder different URL paths. Therefore it is possible to serve different set\nof packages on different paths.</p>\n<p>The following example <tt>paste.ini</tt> could be used to serve stable and\nunstable packages on different paths:</p>\n<pre>[composite:main]\nuse = egg:Paste#urlmap\n/unstable/ = unstable\n/ = stable\n\n[app:stable]\nuse = egg:pypiserver#main\nroot = ~/stable-packages\n\n[app:unstable]\nuse = egg:pypiserver#main\nroot = ~/stable-packages\n   ~/unstable-packages\n\n[server:main]\nuse = egg:gunicorn#main\nhost = 0.0.0.0\nport = 9000\nworkers = 5\naccesslog = -\n</pre>\n<div>\n<p>Note</p>\n<p>You need to install some more dependencies for this to work, like:</p>\n<pre>pip install paste pastedeploy gunicorn pypiserver\n</pre>\n<p>The server can then start with:</p>\n<pre>gunicorn_paster paste.ini\n</pre>\n</div>\n</div>\n</div>\n<div id=\"behind-a-reverse-proxy\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Behind a Reverse Proxy</a></h4>\n<p>You can run <tt>pypiserver</tt> behind a reverse proxy as well.</p>\n<div id=\"nginx\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">Nginx</a></h5>\n<p>Extend your nginx configuration:</p>\n<pre>upstream pypi {\n  server              pypiserver.example.com:12345 fail_timeout=0;\n}\n\nserver {\n  server_name         myproxy.example.com;\n\n  location / {\n    proxy_set_header  Host $host:$server_port;\n    proxy_set_header  X-Forwarded-Proto $scheme;\n    proxy_set_header  X-Real-IP $remote_addr;\n    proxy_pass        http://pypi;\n  }\n}\n</pre>\n<p>As of pypiserver 1.3, you may also use the <cite>X-Forwarded-Host</cite> header in your\nreverse proxy config to enable changing the base URL. For example if you\nwant to host pypiserver under a particular path on your server:</p>\n<pre>upstream pypi {\n  server              locahost:8000;\n}\n\nserver {\n  location /pypi/ {\n      proxy_set_header  X-Forwarded-Host $host:$server_port/pypi;\n      proxy_set_header  X-Forwarded-Proto $scheme;\n      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header  X-Real-IP $remote_addr;\n      proxy_pass        http://pypi;\n  }\n}\n</pre>\n</div>\n<div id=\"supporting-https\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">Supporting HTTPS</a></h5>\n<p>Using a reverse proxy is the preferred way of getting pypiserver behind\nHTTPS. For example, to put pypiserver behind HTTPS on port 443, with\nautomatic HTTP redirection, using <cite>nginx</cite>:</p>\n<pre>upstream pypi {\n  server               localhost:8000;\n}\n\nserver {\n  listen              80 default_server;\n  server_name         _;\n  return              301 https://$host$request_uri;\n}\n\nserver {\n  listen              443 ssl;\n  server_name         pypiserver.example.com;\n\n  ssl_certificate     /etc/star.example.com.crt;\n  ssl_certificate_key /etc/star.example.com.key;\n  ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n  ssl_ciphers         HIGH:!aNULL:!MD5;\n\n  location / {\n    proxy_set_header  Host $host:$server_port;\n    proxy_set_header  X-Forwarded-Proto $scheme;\n    proxy_set_header  X-Real-IP $remote_addr;\n    proxy_pass        http://pypi;\n  }\n}\n</pre>\n<p>Please see <a href=\"http://nginx.org/en/docs/http/configuring_https_servers.html\" rel=\"nofollow\">nginx\u2019s HTTPS docs for more details</a>.</p>\n<p>Getting and keeping your certificates up-to-date can be simplified using,\nfor example, using <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04\" rel=\"nofollow\">certbot and letsencrypt</a>.</p>\n</div>\n</div>\n<div id=\"utilizing-the-api\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Utilizing the API</a></h4>\n<p>In order to enable ad-hoc authentication-providers or to use WSGI-servers\nnot supported by <em>bottle</em> out-of-the-box, you needed to launch <tt>pypiserver</tt>\nvia its API.</p>\n<ul>\n<li>The main entry-point for configuring <tt>pypiserver</tt> is the <a href=\"https://github.com/pypiserver/pypiserver/blob/master/pypiserver/__init__.py#L116\" rel=\"nofollow\">pypiserver:app()</a>\nfunction.  This function returns the internal WSGI-app that you my then\nsend to any WSGI-server you like.</li>\n<li>To get all <tt>pypiserver:app()</tt> keywords and their explanations, read the\nfunction <a href=\"https://github.com/pypiserver/pypiserver/blob/master/pypiserver/__init__.py#L35\" rel=\"nofollow\">pypiserver:default_config()</a>.</li>\n<li>Finally, to fire-up a WSGI-server with the configured app, invoke\nthe <tt>bottle:run(app, host, port, server)</tt> function.\nNote that <tt>pypiserver</tt> ships with it is own copy of <em>bottle</em>; to use it,\nimport it like that: <tt>from pypiserver import bottle</tt></li>\n</ul>\n<div id=\"using-ad-hoc-authentication-providers\">\n<h5><a href=\"#table-of-contents\" rel=\"nofollow\">Using Ad-Hoc Authentication Providers</a></h5>\n<p>The <tt>auther</tt> keyword of <tt>pypiserver:app()</tt> function maybe set only using\nthe API. This can be any callable that returns a boolean when passed\nthe <em>username</em> and the <em>password</em> for a given request.</p>\n<p>For example, to authenticate users based on the <tt>/etc/passwd</tt> file under Unix,\nyou may delegate such decisions to the <a href=\"https://pypi.org/project/python-pam/\" rel=\"nofollow\">python-pam</a> library by following\nthese steps:</p>\n<ol>\n<li><p>Ensure <tt><span class=\"pre\">python-pam</span></tt> module is installed:</p>\n<pre>pip install python-pam\n</pre>\n</li>\n<li><p>Create a python-script along these lines:</p>\n<pre>$ cat &gt; pypiserver-start.py\nimport pypiserver\nfrom pypiserver import bottle\nimport pam\napp = pypiserver.app(root='./packages', auther=pam.authenticate)\nbottle.run(app=app, host='0.0.0.0', port=80, server='auto')\n\n[Ctrl+ D]\n</pre>\n</li>\n<li><p>Invoke the python-script to start-up <tt>pypiserver</tt>:</p>\n<pre>$ python pypiserver-start.py\n</pre>\n</li>\n</ol>\n<div>\n<p>Note</p>\n<p>The <a href=\"https://pypi.org/project/python-pam/\" rel=\"nofollow\">python-pam</a> module, requires <em>read</em> access to <tt>/etc/shadow</tt> file;\nyou may add the user under which <tt>pypiserver</tt> runs into the <em>shadow</em>\ngroup, with a command like this: <tt>sudo usermod <span class=\"pre\">-a</span> <span class=\"pre\">-G</span> shadow <span class=\"pre\">pypy-user</span></tt>.</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"sources\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Sources</a></h3>\n<p>To create a copy of the repository, use:</p>\n<pre>git clone https://github.com/pypiserver/pypiserver.git\ncd pypiserver\n</pre>\n<p>To receive any later changes, in the above folder use:</p>\n<pre>git pull\n</pre>\n</div>\n<div id=\"known-limitations\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Known Limitations</a></h3>\n<p><tt>pypiserver</tt> does not implement the full API as seen on <a href=\"https://pypi.org\" rel=\"nofollow\">PyPI</a>. It\nimplements just enough to make <tt>easy_install</tt>, <tt>pip install</tt>, and\n<tt>search</tt> work.</p>\n<p>The following limitations are known:</p>\n<ul>\n<li>Command <tt>pypi <span class=\"pre\">-U</span></tt> that compares uploaded packages with <em>pypi</em> to see if\nthey are outdated, does not respect a http-proxy environment variable\n(see <a href=\"https://github.com/pypiserver/pypiserver/issues/19\" rel=\"nofollow\">#19</a>).</li>\n<li>It accepts documentation uploads but does not save them to\ndisk (see <a href=\"https://github.com/pypiserver/pypiserver/issues/47\" rel=\"nofollow\">#47</a> for a\ndiscussion)</li>\n<li>It does not handle misspelled packages as <em>pypi-repo</em> does,\ntherefore it is suggested to use it with <tt><span class=\"pre\">--extra-index-url</span></tt> instead\nof <tt><span class=\"pre\">--index-url</span></tt> (see <a href=\"https://github.com/pypiserver/pypiserver/issues/38\" rel=\"nofollow\">#38</a>).</li>\n</ul>\n<p>Please use Github\u2019s <a href=\"https://github.com/pypiserver/pypiserver/issues\" rel=\"nofollow\">bugtracker</a>\nfor other bugs you find.</p>\n</div>\n<div id=\"similar-projects\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Similar Projects</a></h3>\n<p>There are lots of other projects, which allow you to run your own\nPyPI server. If <tt>pypiserver</tt> doesn\u2019t work for you, the following are\namong the most popular alternatives:</p>\n<ul>\n<li><a href=\"https://pypi.org/project/devpi/\" rel=\"nofollow\">devpi-server</a>:\na reliable fast pypi.org caching server, part of\nthe comprehensive <a href=\"https://pypi.org/project/devpi/\" rel=\"nofollow\">github-style pypi index server and packaging meta tool</a>.\n(version: 2.1.4, access date: 8/3/2015)</li>\n<li><a href=\"https://github.com/wolever/pip2pi\" rel=\"nofollow\">pip2pi</a>\na simple cmd-line tool that builds a PyPI-compatible local folder from pip requirements\n(version: 0.6.7, access date: 8/3/2015)</li>\n<li><a href=\"http://flask-pypi-proxy.readthedocs.org/\" rel=\"nofollow\">flask-pypi-proxy</a>\nA proxy for PyPI that also enables also uploading custom packages.</li>\n<li><a href=\"https://pypi.org/project/twine/\" rel=\"nofollow\">twine</a>:\nA command-line utility for interacting with PyPI or <tt>pypiserver</tt>.</li>\n<li><a href=\"https://pypi.org/project/pypi-uploader/\" rel=\"nofollow\">pypi-uploader</a>:\nA command-line utility to upload packages to your <tt>pypiserver</tt> from pypi without\nhaving to store them locally first.</li>\n<li>Check this SO question: <a href=\"http://stackoverflow.com/questions/1235331/how-to-roll-my-own-pypi\" rel=\"nofollow\">How to roll my own pypi</a></li>\n</ul>\n</div>\n<div id=\"licensing\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Licensing</a></h3>\n<p><tt>pypiserver</tt> contains a copy of <a href=\"http://bottlepy.org\" rel=\"nofollow\">bottle</a> which is available under the\nMIT license, and the remaining part is distributed under the zlib/libpng license.\nSee the <tt>LICENSE.txt</tt> file.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6437957, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "207072daba4399d1b370cf73e2cbf851", "sha256": "9a5ebbeea43f2531521b66379a280dd85bee9f695956fdd256abe3fb35e104f4"}, "downloads": -1, "filename": "pypiserver-0.1.0.zip", "has_sig": false, "md5_digest": "207072daba4399d1b370cf73e2cbf851", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32656, "upload_time": "2011-07-29T03:35:31", "upload_time_iso_8601": "2011-07-29T03:35:31.601223Z", "url": "https://files.pythonhosted.org/packages/bb/ca/94883c53b3734f1c6aa504752a12744699842996f53aae1bc2994e791499/pypiserver-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "342eb45269d19ea767b04cf8ca87ae40", "sha256": "83a8205916756724fec43a9f7908fc97cde19b6c855fc79f72792da5cdd19886"}, "downloads": -1, "filename": "pypiserver-0.1.1.tar.gz", "has_sig": false, "md5_digest": "342eb45269d19ea767b04cf8ca87ae40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31047, "upload_time": "2011-07-29T13:26:07", "upload_time_iso_8601": "2011-07-29T13:26:07.698896Z", "url": "https://files.pythonhosted.org/packages/50/e9/342f9602ddad17500490e4f0555354f93d7bcc6553d793a1b1703515f4d3/pypiserver-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b32efe89eb030e37cc59047e688356c8", "sha256": "8bcbb0c5f381f517ab663c3cad18c6fa2cbd10f7fe05f6277ecb1dbca4d8ef0c"}, "downloads": -1, "filename": "pypiserver-0.1.2.zip", "has_sig": false, "md5_digest": "b32efe89eb030e37cc59047e688356c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37421, "upload_time": "2011-08-01T02:09:27", "upload_time_iso_8601": "2011-08-01T02:09:27.297566Z", "url": "https://files.pythonhosted.org/packages/b4/6f/c0afb60a1290316a1fe8b872098e4c076270cfb04423280c0227c8dad6ff/pypiserver-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8e4cf8248fbc6ae402b765c53a42d2a8", "sha256": "a3b166b106881b33f61f3802b07513f5db4c9513ea19ee054b9396747c214ec8"}, "downloads": -1, "filename": "pypiserver-0.1.3.zip", "has_sig": false, "md5_digest": "8e4cf8248fbc6ae402b765c53a42d2a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39919, "upload_time": "2011-08-01T23:20:33", "upload_time_iso_8601": "2011-08-01T23:20:33.258196Z", "url": "https://files.pythonhosted.org/packages/f1/00/9802ea49f6a86638c2b5264983a3174107e8cd59c90cac86ace77d5cf0ac/pypiserver-0.1.3.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8962f55166ac433898284ec546444898", "sha256": "7c2d9d6296db359a4d2d4974315d5e14da78460e3ec15f871035967d1e433917"}, "downloads": -1, "filename": "pypiserver-0.2.0.zip", "has_sig": false, "md5_digest": "8962f55166ac433898284ec546444898", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41296, "upload_time": "2011-08-09T23:56:41", "upload_time_iso_8601": "2011-08-09T23:56:41.242958Z", "url": "https://files.pythonhosted.org/packages/8d/98/2b25c3b3f00cf39256593080aa085c0240cbbcbee0000f31d406ade73389/pypiserver-0.2.0.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7a86132438efbb6fb182fb19b705a1f5", "sha256": "797d0f187c1ce8c2a6964f1711ed1a29054b04efd64a378fe65217963911a00a"}, "downloads": -1, "filename": "pypiserver-0.3.0.zip", "has_sig": false, "md5_digest": "7a86132438efbb6fb182fb19b705a1f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44291, "upload_time": "2011-10-07T21:22:43", "upload_time_iso_8601": "2011-10-07T21:22:43.986502Z", "url": "https://files.pythonhosted.org/packages/59/31/10bf4f2c719b2ee62b9788670cc239ed9d496c1f78e9da773ecd8e7f157b/pypiserver-0.3.0.zip", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "1a1a30d75b92137e99e7bf967a98d3e9", "sha256": "3fc579ff3bc2e0b40d3b83a9d758eebfc8017ffeab55dfa46f188c3237b8d681"}, "downloads": -1, "filename": "pypiserver-0.4.0.zip", "has_sig": false, "md5_digest": "1a1a30d75b92137e99e7bf967a98d3e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53869, "upload_time": "2011-11-19T21:37:32", "upload_time_iso_8601": "2011-11-19T21:37:32.863125Z", "url": "https://files.pythonhosted.org/packages/a2/17/22dd34a6f437bcf73b79e9f0f5a8fc9339d6acaade5a978415a5b2e78930/pypiserver-0.4.0.zip", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "37f7a6705b203b4e3113bb3b6c321131", "sha256": "9922e94449bce2648bf58e88ffd4dcbb513635f2e46f9b766c6b0c24e0adab98"}, "downloads": -1, "filename": "pypiserver-0.4.1.zip", "has_sig": false, "md5_digest": "37f7a6705b203b4e3113bb3b6c321131", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54583, "upload_time": "2011-11-23T22:44:17", "upload_time_iso_8601": "2011-11-23T22:44:17.298322Z", "url": "https://files.pythonhosted.org/packages/5c/61/da29f14d1656685951657defd5db6e4b9c0c8a6c9e386e2eefffca7c6205/pypiserver-0.4.1.zip", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "9fcd7d86cb5ff7873c0874a4917e1854", "sha256": "66c78f126f30765ae94008c9b9c2cc4117992da1e34cb88e3d349e1c21b124b5"}, "downloads": -1, "filename": "pypiserver-0.5.0.zip", "has_sig": false, "md5_digest": "9fcd7d86cb5ff7873c0874a4917e1854", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55051, "upload_time": "2011-12-05T22:40:47", "upload_time_iso_8601": "2011-12-05T22:40:47.831888Z", "url": "https://files.pythonhosted.org/packages/50/3f/e65419905439c5244c60fdc5500b2a4fe498cf8c77f463a549fb8f9d1182/pypiserver-0.5.0.zip", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "7f77bbcb40afb7d0e4c0ef76c438d21d", "sha256": "ec992516cb32d8bdc2ea5a324311fb558066560238e71368a7855bbbca1ade6f"}, "downloads": -1, "filename": "pypiserver-0.5.1.zip", "has_sig": false, "md5_digest": "7f77bbcb40afb7d0e4c0ef76c438d21d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53089, "upload_time": "2012-02-23T11:24:49", "upload_time_iso_8601": "2012-02-23T11:24:49.544539Z", "url": "https://files.pythonhosted.org/packages/7d/2a/2f2c7bd771b27b82efa03be38d5fdb7f44f41ef3978446e62846549bea84/pypiserver-0.5.1.zip", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "987386fc2f27ef653699b95addb9fe5b", "sha256": "50cf77a691ffc62cc80ae04e69d8571af76a195f2587546ae0c37c7a7befcb2a"}, "downloads": -1, "filename": "pypiserver-0.5.2.zip", "has_sig": false, "md5_digest": "987386fc2f27ef653699b95addb9fe5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55710, "upload_time": "2012-03-27T00:27:22", "upload_time_iso_8601": "2012-03-27T00:27:22.833782Z", "url": "https://files.pythonhosted.org/packages/c1/f3/a023102e34be68ed11da6544c7f776b373d5f0f12636d4b1345f95d19760/pypiserver-0.5.2.zip", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "2021d301a92e1ccd10397f7995c0a1bb", "sha256": "d774e0a8e315518c2fc246ecc874f6a338adf7523eca11f5a1e25e7f529e79a7"}, "downloads": -1, "filename": "pypiserver-0.6.0.zip", "has_sig": false, "md5_digest": "2021d301a92e1ccd10397f7995c0a1bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67444, "upload_time": "2012-06-14T21:55:42", "upload_time_iso_8601": "2012-06-14T21:55:42.079001Z", "url": "https://files.pythonhosted.org/packages/a8/e0/9ba4c2c9d82614e01b5bed2485354bb8a68b0a4edefecb01d832eca10462/pypiserver-0.6.0.zip", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "d19ce3975abd2fce0387361d14d3ab2a", "sha256": "bb9b927f932a1db19b80c805fadb507d29d4c69813ddceec986ee00b011d930a"}, "downloads": -1, "filename": "pypiserver-0.6.1.zip", "has_sig": false, "md5_digest": "d19ce3975abd2fce0387361d14d3ab2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67578, "upload_time": "2012-08-07T22:15:49", "upload_time_iso_8601": "2012-08-07T22:15:49.255407Z", "url": "https://files.pythonhosted.org/packages/12/78/9d3807b782888472896e437a8f9df31153a2214c21a2d92b365126fc1176/pypiserver-0.6.1.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "5d860e3fb76ff55d0aa96afb93db695d", "sha256": "5cd9810569fd03cefa6b46fc620157d8c23f7345eac38da5e2f25e98be72d6e1"}, "downloads": -1, "filename": "pypiserver-1.0.0.zip", "has_sig": false, "md5_digest": "5d860e3fb76ff55d0aa96afb93db695d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73085, "upload_time": "2012-10-26T18:40:27", "upload_time_iso_8601": "2012-10-26T18:40:27.676942Z", "url": "https://files.pythonhosted.org/packages/31/ac/e3e1661eb352b13c4dc237b9858b79c92186aca1806cb8740faf2c1a6a3c/pypiserver-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "45e5eab264809796eb5e36fd4811c0c0", "sha256": "918598b18e1e1b7c504e6b30968ee7c40a8060ca63947f4989c93daa29d5bcf4"}, "downloads": -1, "filename": "pypiserver-1.0.1.zip", "has_sig": false, "md5_digest": "45e5eab264809796eb5e36fd4811c0c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73763, "upload_time": "2013-01-03T22:01:43", "upload_time_iso_8601": "2013-01-03T22:01:43.366030Z", "url": "https://files.pythonhosted.org/packages/af/6b/285eb40f33f48aaf1428e09ddb19218b1917428b7068478756d09bf0dc08/pypiserver-1.0.1.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "386ad1a94559f98a9993a30b30a0e236", "sha256": "9e38b138132aeeff1472f3dc6c7c0e8199c19df35dbb264adb29e04a2090b90a"}, "downloads": -1, "filename": "pypiserver-1.1.0.zip", "has_sig": false, "md5_digest": "386ad1a94559f98a9993a30b30a0e236", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80755, "upload_time": "2013-02-14T22:15:56", "upload_time_iso_8601": "2013-02-14T22:15:56.563708Z", "url": "https://files.pythonhosted.org/packages/37/2a/1fbde4e748994840a59c6fd48bed4816ff4c77acad275524b008bdd32cf0/pypiserver-1.1.0.zip", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "c9267e94444a7a048bf77fd084f2a837", "sha256": "67f006e3a51f187fbe5d67dcc2ec5efd98270e73b05cc389961900441734a3cc"}, "downloads": -1, "filename": "pypiserver-1.1.1.zip", "has_sig": false, "md5_digest": "c9267e94444a7a048bf77fd084f2a837", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80026, "upload_time": "2013-05-28T22:47:51", "upload_time_iso_8601": "2013-05-28T22:47:51.637443Z", "url": "https://files.pythonhosted.org/packages/5a/e7/14fd09b68a98fa290e7940c1f81957da329d80209aeffdcce0ee62606944/pypiserver-1.1.1.zip", "yanked": false}], "1.1.10": [{"comment_text": "", "digests": {"md5": "4e8014322d37541ecb6b7c34927a7241", "sha256": "75ec0aa596e8af7d13082e3a96c207689909ede1c232902bf900ae1eaa0a6679"}, "downloads": -1, "filename": "pypiserver-1.1.10-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4e8014322d37541ecb6b7c34927a7241", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 75341, "upload_time": "2016-01-19T19:45:47", "upload_time_iso_8601": "2016-01-19T19:45:47.111380Z", "url": "https://files.pythonhosted.org/packages/f0/e7/dadb5eeae54d6efb41056f5e111f73d414058c6e84e30f15b681159b3859/pypiserver-1.1.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "674ec0ad16ef78ed994db03ef8156bc6", "sha256": "faab3e909b6ead39045ff488a9dea71207d9ff406c54c259da8394af497279fa"}, "downloads": -1, "filename": "pypiserver-1.1.10.zip", "has_sig": true, "md5_digest": "674ec0ad16ef78ed994db03ef8156bc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 482241, "upload_time": "2016-01-19T19:46:05", "upload_time_iso_8601": "2016-01-19T19:46:05.222399Z", "url": "https://files.pythonhosted.org/packages/45/a5/b869ecb9ed7625a4d215be5aa591108a187a1e803652c6a76cbd023bf054/pypiserver-1.1.10.zip", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "1552bf7e757f383250c11c91e19cb3ed", "sha256": "e2576127b06a5d59f4b6f51a5970139b5d8d6a4b6523ddc4d95f25b329347669"}, "downloads": -1, "filename": "pypiserver-1.1.2.zip", "has_sig": false, "md5_digest": "1552bf7e757f383250c11c91e19cb3ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80224, "upload_time": "2013-06-22T21:04:33", "upload_time_iso_8601": "2013-06-22T21:04:33.916465Z", "url": "https://files.pythonhosted.org/packages/de/53/85774d8be9b296961536a8e1b00b47df28aa7e7c8293cdb7f2df9311dc77/pypiserver-1.1.2.zip", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "bb8ce5a14a2599480a7aeff380c3fe28", "sha256": "1975886f72270e284404e8953e8d8e5c0d6117e5211b7b87e0a202e67b493748"}, "downloads": -1, "filename": "pypiserver-1.1.3.zip", "has_sig": false, "md5_digest": "bb8ce5a14a2599480a7aeff380c3fe28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80575, "upload_time": "2013-07-22T20:06:12", "upload_time_iso_8601": "2013-07-22T20:06:12.520369Z", "url": "https://files.pythonhosted.org/packages/04/b5/7a119e593e984a4514ed5916226ad79f726c0840c9e5543b7459931929e4/pypiserver-1.1.3.zip", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "ddceb5737e01e2f484baa2dda905e299", "sha256": "229bc24f01024c7a2d5c169f462b2c43fdba5ae8665e59dff8fe962a5cfc55ce"}, "downloads": -1, "filename": "pypiserver-1.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ddceb5737e01e2f484baa2dda905e299", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 60396, "upload_time": "2014-01-09T23:44:48", "upload_time_iso_8601": "2014-01-09T23:44:48.826324Z", "url": "https://files.pythonhosted.org/packages/7f/f0/7e0ffa7ba0d3a8bea3bf1ddfc40d72238782ffcb56eb19a50e96e421d772/pypiserver-1.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d75dd509161057018818d68e19aff405", "sha256": "045b16064c76d5a5786be41d2fdbc850aac9ca6fe5600f9213ed36de3f236b38"}, "downloads": -1, "filename": "pypiserver-1.1.4.zip", "has_sig": false, "md5_digest": "d75dd509161057018818d68e19aff405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80691, "upload_time": "2014-01-03T22:36:31", "upload_time_iso_8601": "2014-01-03T22:36:31.697694Z", "url": "https://files.pythonhosted.org/packages/aa/7f/6f251398ada5e30dcaa242ecdaab72ac3576a11db4eaedb94a01356e1f30/pypiserver-1.1.4.zip", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "7124f76767d670dc3686c777eeb5fe86", "sha256": "6d392d3a8df90c2a1f13868724d7cc6ee385683608db34ac021bad80258927c5"}, "downloads": -1, "filename": "pypiserver-1.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7124f76767d670dc3686c777eeb5fe86", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 60797, "upload_time": "2014-01-20T22:16:23", "upload_time_iso_8601": "2014-01-20T22:16:23.598657Z", "url": "https://files.pythonhosted.org/packages/eb/ef/d3a47fce15abef57df5a9dceb8b7e09eb67d8fb01af42a99155797539bff/pypiserver-1.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48d46be0178365aa0ca0aaac4e6f0bae", "sha256": "16138cf7e3a48e4f4f0d7bf59526abd62e6f495342509d4d751a906c08e838d7"}, "downloads": -1, "filename": "pypiserver-1.1.5.zip", "has_sig": false, "md5_digest": "48d46be0178365aa0ca0aaac4e6f0bae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77640, "upload_time": "2014-01-20T22:16:32", "upload_time_iso_8601": "2014-01-20T22:16:32.091156Z", "url": "https://files.pythonhosted.org/packages/29/82/9d30181b81cfab962e8be63ce63545b2169762f3c3969ddcc591b011e920/pypiserver-1.1.5.zip", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "79a9b09c1fc57b441e0cd68a6169a3d5", "sha256": "39d427f9d848ddab430ff45bc06c8d4ced67e31979521bbc78c0baccaa8e77db"}, "downloads": -1, "filename": "pypiserver-1.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "79a9b09c1fc57b441e0cd68a6169a3d5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 63069, "upload_time": "2014-03-05T22:00:35", "upload_time_iso_8601": "2014-03-05T22:00:35.238756Z", "url": "https://files.pythonhosted.org/packages/f7/ac/290029f9897d3a6f89e683c3f86822640b297dfd36370e7a64bca385b9e4/pypiserver-1.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b7ad55de1c858c19062c465d8607870", "sha256": "9e20e6de26591f669c63b84577564ba1537054943c3d76e606fc3297901f635b"}, "downloads": -1, "filename": "pypiserver-1.1.6.zip", "has_sig": false, "md5_digest": "7b7ad55de1c858c19062c465d8607870", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77741, "upload_time": "2014-03-05T22:00:27", "upload_time_iso_8601": "2014-03-05T22:00:27.640944Z", "url": "https://files.pythonhosted.org/packages/30/52/e863677e313268b974c15f00ef67051e2481e7faa5f7565b86ae9cf9731a/pypiserver-1.1.6.zip", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "8e2d00e0bed8fcf5e8151dcdfad01cb4", "sha256": "a237c449254b5c10ac0cdd08bb796106b68bcb29f6571c278eafe4b71dc540a5"}, "downloads": -1, "filename": "pypiserver-1.1.7-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8e2d00e0bed8fcf5e8151dcdfad01cb4", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 64150, "upload_time": "2015-03-08T21:06:32", "upload_time_iso_8601": "2015-03-08T21:06:32.101024Z", "url": "https://files.pythonhosted.org/packages/68/6d/c606c4633cee0c2edf33a1e152e25e733ad18f482e4a157f91a5a35a6658/pypiserver-1.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca91a523a66dd7bc3bfa654da676a7d4", "sha256": "4ad329bed3ba0d828dea56ab26e57387231f8cbc8edd12bcaa53e93d50a05de9"}, "downloads": -1, "filename": "pypiserver-1.1.7.zip", "has_sig": true, "md5_digest": "ca91a523a66dd7bc3bfa654da676a7d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86178, "upload_time": "2015-03-08T21:06:13", "upload_time_iso_8601": "2015-03-08T21:06:13.573380Z", "url": "https://files.pythonhosted.org/packages/68/36/38949a3e509e8860b8c84ff1040e816fdfc8a44d42defa8a07648bcd1cc4/pypiserver-1.1.7.zip", "yanked": false}], "1.1.7-rc.1": [{"comment_text": "", "digests": {"md5": "6eb663b42d17569a26592832f6a69222", "sha256": "7b2e05e493944379792777aeb7cafd21e08ed14db0183be1671548517c087672"}, "downloads": -1, "filename": "pypiserver-1.1.7_rc.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "6eb663b42d17569a26592832f6a69222", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 64483, "upload_time": "2015-02-28T00:54:55", "upload_time_iso_8601": "2015-02-28T00:54:55.715658Z", "url": "https://files.pythonhosted.org/packages/f1/4c/51d47928ff0559ad658e995613a2da903db6e5d0f0b3c110ca12ebc1246f/pypiserver-1.1.7_rc.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23035ae15dba71d0b30dbdc982bab7c4", "sha256": "535924dd792a5fb4c662b614217cda60a9e893d85c0ba4dc5783a75fbb47ee5c"}, "downloads": -1, "filename": "pypiserver-1.1.7-rc.1.zip", "has_sig": true, "md5_digest": "23035ae15dba71d0b30dbdc982bab7c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85509, "upload_time": "2015-02-28T00:54:25", "upload_time_iso_8601": "2015-02-28T00:54:25.583813Z", "url": "https://files.pythonhosted.org/packages/c5/a5/86c6413bef0abe64af5e391af498cdb7e90a506f8af842b78a04e245ec00/pypiserver-1.1.7-rc.1.zip", "yanked": false}], "1.1.8": [{"comment_text": "", "digests": {"md5": "8552e15e028ff330ceec4e4f01e253ad", "sha256": "448bf11074d23a1e4e6f012dff3303d7d2db4acd21162138050897c4a77b3265"}, "downloads": -1, "filename": "pypiserver-1.1.8-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8552e15e028ff330ceec4e4f01e253ad", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 65505, "upload_time": "2015-09-15T19:12:26", "upload_time_iso_8601": "2015-09-15T19:12:26.714402Z", "url": "https://files.pythonhosted.org/packages/f8/43/aa76479557aa3cd30c4a9b9a6e4a9c2a3e34025059cfcf92a28f5642e1e2/pypiserver-1.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2897a7f23bb8ad397515072c6d4cb46d", "sha256": "a2a8fd436a97094afceaa291a311707d4792babbedcfe33f6687837099ab8e25"}, "downloads": -1, "filename": "pypiserver-1.1.8.zip", "has_sig": true, "md5_digest": "2897a7f23bb8ad397515072c6d4cb46d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137518, "upload_time": "2015-09-15T19:12:03", "upload_time_iso_8601": "2015-09-15T19:12:03.322093Z", "url": "https://files.pythonhosted.org/packages/f9/a0/e8af07b539dda55804f88634716c319910a44748c9f622a7191455ab086e/pypiserver-1.1.8.zip", "yanked": false}], "1.1.8b0": [{"comment_text": "", "digests": {"md5": "f9cb2d2ff5d95ee04f083d4a966755c1", "sha256": "ee7d48fe46e0a5c7f2262e65ceafc8ee13274b00e88e3c58cb4dd028c319c336"}, "downloads": -1, "filename": "pypiserver-1.1.8b0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f9cb2d2ff5d95ee04f083d4a966755c1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 65495, "upload_time": "2015-09-11T14:17:08", "upload_time_iso_8601": "2015-09-11T14:17:08.293949Z", "url": "https://files.pythonhosted.org/packages/27/61/d44f0ba8b92da143ecc6f1b2ca9f6fbc5644baf73131505631f383441f77/pypiserver-1.1.8b0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e7fa892db2fef76af9ddbe33f3f0d11", "sha256": "c7df2850dafa03cfc8039ab3140dd964f6d8f17eaf1d6038fa9c2022bed56ffa"}, "downloads": -1, "filename": "pypiserver-1.1.8b0.zip", "has_sig": true, "md5_digest": "9e7fa892db2fef76af9ddbe33f3f0d11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88628, "upload_time": "2015-09-11T14:16:56", "upload_time_iso_8601": "2015-09-11T14:16:56.362162Z", "url": "https://files.pythonhosted.org/packages/2c/3f/fd00a601e69986b02d869abfc5406abf4d42f55a82d59075124d3f9fab04/pypiserver-1.1.8b0.zip", "yanked": false}], "1.1.8b1": [{"comment_text": "", "digests": {"md5": "78b61450e7a7890efc1acf85db078926", "sha256": "4ac0eb716ee2291a1bc052a07bb5c76e9b62023fb859fb378becc8f3847eb685"}, "downloads": -1, "filename": "pypiserver-1.1.8b1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "78b61450e7a7890efc1acf85db078926", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 65523, "upload_time": "2015-09-11T15:44:56", "upload_time_iso_8601": "2015-09-11T15:44:56.451211Z", "url": "https://files.pythonhosted.org/packages/71/c9/65931a6dd53ba6bae51aaa188268bacf69d257b056d1047cb1f342ee67a3/pypiserver-1.1.8b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a65e305a5d84fc91b61499434315277", "sha256": "d9a01332d7c87877b9a775e123163a338b4c22a403865d08872aca55770ba14f"}, "downloads": -1, "filename": "pypiserver-1.1.8b1.zip", "has_sig": true, "md5_digest": "6a65e305a5d84fc91b61499434315277", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137949, "upload_time": "2015-09-11T15:44:46", "upload_time_iso_8601": "2015-09-11T15:44:46.083075Z", "url": "https://files.pythonhosted.org/packages/73/3c/a18549e51435cb037a82581924cff7e918df93aeae98421de29c385ac96f/pypiserver-1.1.8b1.zip", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "6e6dcee67aa944f52e1b172b2b7e4c7f", "sha256": "26c6790ca5d390d74950b3a7f39a2c848501bb9a0f30bdc269dee3428945cafb"}, "downloads": -1, "filename": "pypiserver-1.1.9-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "6e6dcee67aa944f52e1b172b2b7e4c7f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 72879, "upload_time": "2015-12-21T22:29:22", "upload_time_iso_8601": "2015-12-21T22:29:22.540226Z", "url": "https://files.pythonhosted.org/packages/e7/e0/e584152667a7bf9521e0dbad5e5096a9781b0f260a2585b4f25ddf2fb8f2/pypiserver-1.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e59f72a1e0ef56c09cec9fe10e6a9e5b", "sha256": "dd6e3ac0b33978eaa2065bb75d9142622f72e2f850d3450b4e8f9c14612a0293"}, "downloads": -1, "filename": "pypiserver-1.1.9.zip", "has_sig": true, "md5_digest": "e59f72a1e0ef56c09cec9fe10e6a9e5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95849, "upload_time": "2015-12-21T22:29:44", "upload_time_iso_8601": "2015-12-21T22:29:44.768001Z", "url": "https://files.pythonhosted.org/packages/55/3e/114d31199a10671b8f0c9b4eb7dc89f9e1bbb04a34b22916c4181805d574/pypiserver-1.1.9.zip", "yanked": false}], "1.1.9.dev0": [{"comment_text": "", "digests": {"md5": "59e26f0af0fdaea5dfb4cd85d4c470dc", "sha256": "87839da6a1c1bf5d92bdd8a8d0c9a69fc3597f6913ad1da8f50381b5b6463e16"}, "downloads": -1, "filename": "pypiserver-1.1.9.dev0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "59e26f0af0fdaea5dfb4cd85d4c470dc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 65525, "upload_time": "2015-09-16T23:56:33", "upload_time_iso_8601": "2015-09-16T23:56:33.477265Z", "url": "https://files.pythonhosted.org/packages/0e/4b/bb1e64b21e00062262d78c2c16dc41803d4b2a19a4b357ab054a38fb7094/pypiserver-1.1.9.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "658ac76c4f051649cc75ed57d13e72ec", "sha256": "f0b4ed3d6071c996327d8796a5ac066e6431771ab68b951137c48d5022c26d61"}, "downloads": -1, "filename": "pypiserver-1.1.9.dev0.zip", "has_sig": true, "md5_digest": "658ac76c4f051649cc75ed57d13e72ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87287, "upload_time": "2015-09-16T23:56:18", "upload_time_iso_8601": "2015-09-16T23:56:18.255681Z", "url": "https://files.pythonhosted.org/packages/ea/5b/485a42f72ae045c66b78301eb15290cd593dd65fe60fce6424862b80225c/pypiserver-1.1.9.dev0.zip", "yanked": false}], "1.1.9.dev1": [], "1.1.9.dev2": [{"comment_text": "", "digests": {"md5": "259c22ed03743e654f778ba10b5c7514", "sha256": "9e44dc441c610893b33d2cbccd3780ccec9443b33e738a500007fcfad55786d2"}, "downloads": -1, "filename": "pypiserver-1.1.9.dev2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "259c22ed03743e654f778ba10b5c7514", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 71209, "upload_time": "2015-09-21T02:23:54", "upload_time_iso_8601": "2015-09-21T02:23:54.074747Z", "url": "https://files.pythonhosted.org/packages/41/fc/4a5c63334f640d96dac8840b843bf86b3863523a51e137259d672a22b3a8/pypiserver-1.1.9.dev2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "928921ea75e6b2d4028cc82a119708fd", "sha256": "f719ee57055d28daf2a992beffe56455e462ff392bb6f842c4e281acc3b70ec8"}, "downloads": -1, "filename": "pypiserver-1.1.9.dev2.zip", "has_sig": false, "md5_digest": "928921ea75e6b2d4028cc82a119708fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101060, "upload_time": "2015-09-21T02:24:31", "upload_time_iso_8601": "2015-09-21T02:24:31.414617Z", "url": "https://files.pythonhosted.org/packages/07/f6/a6de1eaaf5c997065b43a3c4481fda2fdf96dd1169ce731fa6c6b74b3467/pypiserver-1.1.9.dev2.zip", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "2a097ad71b1959574ae73a974f20ebf0", "sha256": "ad6c5eef042aa975b3ec75cb3b07cc51938c4d258152689f705733dd67cc4062"}, "downloads": -1, "filename": "pypiserver-1.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "2a097ad71b1959574ae73a974f20ebf0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 81134, "upload_time": "2016-06-25T02:35:53", "upload_time_iso_8601": "2016-06-25T02:35:53.509377Z", "url": "https://files.pythonhosted.org/packages/55/a3/c01a39aafa6d9a94380e5014f66fd5274623a037911abdb65d17e8442e49/pypiserver-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64a40d3669f17660da7b6ed797d2e624", "sha256": "4c503017b6e4298d9a7cc4ee9afe8951d326e7bb28b0b1e65235235c87d486d4"}, "downloads": -1, "filename": "pypiserver-1.2.0.zip", "has_sig": true, "md5_digest": "64a40d3669f17660da7b6ed797d2e624", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110437, "upload_time": "2016-06-25T02:36:07", "upload_time_iso_8601": "2016-06-25T02:36:07.717904Z", "url": "https://files.pythonhosted.org/packages/43/a0/24babe6047ffb55e096beb27807059e5653ebd20e9827b3a8ff2c4344177/pypiserver-1.2.0.zip", "yanked": false}], "1.2.0.dev1": [{"comment_text": "", "digests": {"md5": "2016e40d024b60b16a82ff2a9eb81d6d", "sha256": "40084bb70d163670256829d75515d6118b0cc9c7213d9d99cc4b37edaa6ac7ac"}, "downloads": -1, "filename": "pypiserver-1.2.0.dev1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "2016e40d024b60b16a82ff2a9eb81d6d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 77620, "upload_time": "2016-06-17T21:52:19", "upload_time_iso_8601": "2016-06-17T21:52:19.527081Z", "url": "https://files.pythonhosted.org/packages/47/9c/a9ca836492036bff9dbb057ae2b2fe3cd9cf74c557f7813882e4c23eec7f/pypiserver-1.2.0.dev1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f100a3bdcc697d256de9ad08af852c2b", "sha256": "4a6d9fba74e7e614da8c5bf380346cd6168b5f178efeb6607b8a554fce85ea5c"}, "downloads": -1, "filename": "pypiserver-1.2.0.dev1.zip", "has_sig": true, "md5_digest": "f100a3bdcc697d256de9ad08af852c2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104260, "upload_time": "2016-06-17T21:52:38", "upload_time_iso_8601": "2016-06-17T21:52:38.843972Z", "url": "https://files.pythonhosted.org/packages/7c/69/740f3dd78740904737a0dd54ac1b0c78fa6720b6ee1f1d2d2547a1fac55d/pypiserver-1.2.0.dev1.zip", "yanked": false}], "1.2.0b1": [{"comment_text": "", "digests": {"md5": "a4aefd03596f866d7d985728a8645bbf", "sha256": "8169bde6e45bf7edcdac1d1517ff8328b849aac2e632f427206a816642af56be"}, "downloads": -1, "filename": "pypiserver-1.2.0b1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a4aefd03596f866d7d985728a8645bbf", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 79641, "upload_time": "2016-06-24T17:36:06", "upload_time_iso_8601": "2016-06-24T17:36:06.223220Z", "url": "https://files.pythonhosted.org/packages/9d/3d/f6e6aa7ddd258f07fb8f7ec1f3c9923ad42988d1ea4890571916a6498fdd/pypiserver-1.2.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "479e56744365ae05549987acd22c5e50", "sha256": "bdd9c962361627c081bdf5eed29ad69ca6b4aa6968260752b9371b5c619bb252"}, "downloads": -1, "filename": "pypiserver-1.2.0b1.zip", "has_sig": true, "md5_digest": "479e56744365ae05549987acd22c5e50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132379, "upload_time": "2016-06-24T17:35:18", "upload_time_iso_8601": "2016-06-24T17:35:18.576399Z", "url": "https://files.pythonhosted.org/packages/a8/28/034be999c59edf1ebd729336ab34876b169520d6723006f46bd41fbb51a3/pypiserver-1.2.0b1.zip", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "e01251f2f152daa61acaa0a57a38a830", "sha256": "33150702f61eb70201978b809ebce0b90b54ee6cb936ebb4cf38062c283dc08a"}, "downloads": -1, "filename": "pypiserver-1.2.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "e01251f2f152daa61acaa0a57a38a830", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 83529, "upload_time": "2017-11-30T01:12:18", "upload_time_iso_8601": "2017-11-30T01:12:18.314664Z", "url": "https://files.pythonhosted.org/packages/d7/78/5772432dad2b9e754ab92f4d301fa507069b9decc8c943c1b18c2043ff4f/pypiserver-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bf1671d82857e89656ce0a0e851acb0", "sha256": "3282fb7aba6fec16f68106426fb696e37f8f83086edaf9ca17c12afc5493c15b"}, "downloads": -1, "filename": "pypiserver-1.2.1.zip", "has_sig": true, "md5_digest": "6bf1671d82857e89656ce0a0e851acb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 143499, "upload_time": "2017-11-30T01:12:23", "upload_time_iso_8601": "2017-11-30T01:12:23.582302Z", "url": "https://files.pythonhosted.org/packages/97/71/a5001b7000e8325b6bb9d0f928f68a953818c601668189867addfcd17cae/pypiserver-1.2.1.zip", "yanked": false}], "1.2.1.dev0": [{"comment_text": "", "digests": {"md5": "4921175c17a5b661a5515d1aa7391293", "sha256": "2cf191e4ba9eafe879415ecfcc5a5a053266187b33db71c5462697ea7b04565c"}, "downloads": -1, "filename": "pypiserver-1.2.1.dev0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4921175c17a5b661a5515d1aa7391293", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 84120, "upload_time": "2017-11-10T19:09:32", "upload_time_iso_8601": "2017-11-10T19:09:32.839800Z", "url": "https://files.pythonhosted.org/packages/51/f7/43b3e204b3b90137480d7efa97c823338627ef69fcc50478ba0e91524a1b/pypiserver-1.2.1.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d41b46ab8f52d2116f5297f4fe2b6a1", "sha256": "31da31f8b64503b9fee8b59d5b7761f7c290525a51e5da40c2443da3a7c876d6"}, "downloads": -1, "filename": "pypiserver-1.2.1.dev0.zip", "has_sig": true, "md5_digest": "4d41b46ab8f52d2116f5297f4fe2b6a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144466, "upload_time": "2017-11-10T19:09:36", "upload_time_iso_8601": "2017-11-10T19:09:36.886222Z", "url": "https://files.pythonhosted.org/packages/2e/ba/4a1f4b7332c42817eef4da2957c3e86711cb085a2f18680490c4fc847c0f/pypiserver-1.2.1.dev0.zip", "yanked": false}], "1.2.1rc0": [{"comment_text": "", "digests": {"md5": "65b1ecd768a4d621127d209b260ef07d", "sha256": "808d6b58a64cb19375db52a3f126eff8c55dda0e5b57699ce15436ba72b7dcb0"}, "downloads": -1, "filename": "pypiserver-1.2.1rc0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "65b1ecd768a4d621127d209b260ef07d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 83525, "upload_time": "2017-11-14T18:53:38", "upload_time_iso_8601": "2017-11-14T18:53:38.830998Z", "url": "https://files.pythonhosted.org/packages/bf/c6/f33a8637e9671f4bb5a7ff7c5dbdfbc7a9dacade49bd150dfc6258f392db/pypiserver-1.2.1rc0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "928b682ab880ccdcd4e49d18bcb09c6e", "sha256": "8e48032da3a39d822bf53dae905c4bef124f471bdbf1b8b0a3297e5869998faf"}, "downloads": -1, "filename": "pypiserver-1.2.1rc0.zip", "has_sig": true, "md5_digest": "928b682ab880ccdcd4e49d18bcb09c6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 143703, "upload_time": "2017-11-14T18:53:44", "upload_time_iso_8601": "2017-11-14T18:53:44.139992Z", "url": "https://files.pythonhosted.org/packages/87/65/cef6360749a20654a70145fbc92f48fe1a5c0873de39d18a21d63822d6dd/pypiserver-1.2.1rc0.zip", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "0b36630a405618edff17949874f6bbc3", "sha256": "39d266e9ebc81c08e39d87c1dd3cdd3e0db1d0f2941396a1edbf36ebc4424c1e"}, "downloads": -1, "filename": "pypiserver-1.2.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "0b36630a405618edff17949874f6bbc3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 73139, "upload_time": "2018-06-13T01:17:25", "upload_time_iso_8601": "2018-06-13T01:17:25.447341Z", "url": "https://files.pythonhosted.org/packages/69/dc/8795abfa7513e3c9afbece13803c13c81784b5020172d37e3f9a57748ab7/pypiserver-1.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a054e1d1a9dbaa88fa21862bc3070031", "sha256": "1630154e3fcbe211c787f7bef50fc9b07be707a52b4c0a26b9c158a9a605881d"}, "downloads": -1, "filename": "pypiserver-1.2.2.zip", "has_sig": true, "md5_digest": "a054e1d1a9dbaa88fa21862bc3070031", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145470, "upload_time": "2018-06-13T01:17:28", "upload_time_iso_8601": "2018-06-13T01:17:28.498944Z", "url": "https://files.pythonhosted.org/packages/9b/45/b7e52d041366573214427e6207a02460cdd0aeccfd2522a489618b7338c8/pypiserver-1.2.2.zip", "yanked": false}], "1.2.2.dev0": [{"comment_text": "", "digests": {"md5": "24e5b9b077be7eea902ae5ff0b8c5bc8", "sha256": "bb47d0723ca1b3a849fadcc18070a8305dff45bf7d827bf6fef0d6a2e37c511e"}, "downloads": -1, "filename": "pypiserver-1.2.2.dev0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "24e5b9b077be7eea902ae5ff0b8c5bc8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 73212, "upload_time": "2018-06-12T01:55:52", "upload_time_iso_8601": "2018-06-12T01:55:52.484460Z", "url": "https://files.pythonhosted.org/packages/63/13/e98ba7a38564292369eaaf35cda877908d025d75187ee7eb2e9b71a45af1/pypiserver-1.2.2.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09e1f825d4aaa9902874e06cef13bbd5", "sha256": "4a4f46df3957834a25303598d79c00c14dc7c23d8f4d2c38c16adb7e6ada0a13"}, "downloads": -1, "filename": "pypiserver-1.2.2.dev0.zip", "has_sig": true, "md5_digest": "09e1f825d4aaa9902874e06cef13bbd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146027, "upload_time": "2018-06-12T01:55:57", "upload_time_iso_8601": "2018-06-12T01:55:57.917949Z", "url": "https://files.pythonhosted.org/packages/23/32/7cc79f5fd1ec6560b9fc4dd0acc13565962446825aa9e7d2db877b25c767/pypiserver-1.2.2.dev0.zip", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "c07b210f05d6f93b46f50ab155d15a60", "sha256": "cfe0fe119ecac96203ab821cdfbf8c9ec80b3e1e88a6bd718ae702f37c5631c6"}, "downloads": -1, "filename": "pypiserver-1.2.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "c07b210f05d6f93b46f50ab155d15a60", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 72001, "upload_time": "2018-08-04T17:33:48", "upload_time_iso_8601": "2018-08-04T17:33:48.582411Z", "url": "https://files.pythonhosted.org/packages/19/4f/5730596c62185e98c14ad98bc536582404b9ae17a019815f6d1d767212f8/pypiserver-1.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bd62f0f6b36eed4645a413e1ebe5abe", "sha256": "eb431fd226bc97256e4255df0d5940d64623e12c18a0c6283edce3e1546344dc"}, "downloads": -1, "filename": "pypiserver-1.2.3.zip", "has_sig": true, "md5_digest": "0bd62f0f6b36eed4645a413e1ebe5abe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 146274, "upload_time": "2018-08-04T17:33:53", "upload_time_iso_8601": "2018-08-04T17:33:53.625071Z", "url": "https://files.pythonhosted.org/packages/84/15/66eecfb88f8596d9a89208106c4e86cd1abdd3c9354c8b3d7d32ebb16778/pypiserver-1.2.3.zip", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "5286a8c03523a4c6c9ac8b901eebca04", "sha256": "1166057df1ec900fce0448c908257b393937edc522236a957ee8d7f5bc822583"}, "downloads": -1, "filename": "pypiserver-1.2.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "5286a8c03523a4c6c9ac8b901eebca04", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 72554, "upload_time": "2018-08-06T22:38:18", "upload_time_iso_8601": "2018-08-06T22:38:18.511238Z", "url": "https://files.pythonhosted.org/packages/ec/f6/593ff8da4862f73c55027c32ac6f73ea09eabb546e7ebec82f83cc034fcb/pypiserver-1.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4aade38271f7340e89b1b62b30fa56e7", "sha256": "312a3e1b6c55affb9cf11a646bcf093c2370c902690f5136bd7625fdb1059179"}, "downloads": -1, "filename": "pypiserver-1.2.4.zip", "has_sig": true, "md5_digest": "4aade38271f7340e89b1b62b30fa56e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 147617, "upload_time": "2018-08-06T22:38:21", "upload_time_iso_8601": "2018-08-06T22:38:21.702366Z", "url": "https://files.pythonhosted.org/packages/b6/14/b480c443f021ac148db0f642f6596daff7f2597999e2284fcac9946a2739/pypiserver-1.2.4.zip", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "697241cc8c8df865e03b29751d616d83", "sha256": "a49aa136d0615ba983cda541bf155e5c55323f1f8d6071178d9c095740e78a8a"}, "downloads": -1, "filename": "pypiserver-1.2.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "697241cc8c8df865e03b29751d616d83", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 72540, "upload_time": "2018-11-11T17:54:53", "upload_time_iso_8601": "2018-11-11T17:54:53.990905Z", "url": "https://files.pythonhosted.org/packages/86/d0/9af2c014878121bfdb7f2a46c40c4165bf100aa524513e11296551b11d81/pypiserver-1.2.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a12bdf9744dfbe4421956f8c3cc21f1", "sha256": "7785e6bd2b8593722a6e40b8c25a9f67c2c3502ebbdff399c3d48deb92e0e7fa"}, "downloads": -1, "filename": "pypiserver-1.2.5.zip", "has_sig": true, "md5_digest": "1a12bdf9744dfbe4421956f8c3cc21f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 147482, "upload_time": "2018-11-11T17:54:58", "upload_time_iso_8601": "2018-11-11T17:54:58.138654Z", "url": "https://files.pythonhosted.org/packages/f8/50/fdb53daad3eeac92f447b74289fad68e625f0b09cfb54ad9b76de823cce2/pypiserver-1.2.5.zip", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "f8a1df07fb5927f3b477a99ccce63215", "sha256": "c64d01a5802685cd94fb998ef358f20ecdc5918c1d097b71650818115c6e27dd"}, "downloads": -1, "filename": "pypiserver-1.2.6-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f8a1df07fb5927f3b477a99ccce63215", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 74515, "upload_time": "2019-01-26T22:18:27", "upload_time_iso_8601": "2019-01-26T22:18:27.588245Z", "url": "https://files.pythonhosted.org/packages/96/0b/91cbbf3c9939581bf8d6e5c9ee0781ab5683d7b6acaf90a5bf1b03bced4a/pypiserver-1.2.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3bfce951a46da558e4935229aa940027", "sha256": "47e81db9a3744a05096bde1d86268caf5f796ad0ab81a525d3fac38d7f07064d"}, "downloads": -1, "filename": "pypiserver-1.2.6.zip", "has_sig": true, "md5_digest": "3bfce951a46da558e4935229aa940027", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 148265, "upload_time": "2019-01-26T22:18:30", "upload_time_iso_8601": "2019-01-26T22:18:30.230945Z", "url": "https://files.pythonhosted.org/packages/a6/84/5de29479c65875951a6426cec156f589076db08b078e4dd3d24a155f9454/pypiserver-1.2.6.zip", "yanked": false}], "1.2.7": [{"comment_text": "", "digests": {"md5": "7abb7cb4fdd0dddf2ffebe2c8460b533", "sha256": "ae790992bfd69daf5f6bb682d9a15470f3ee1e8835ac6de7784c438446edea95"}, "downloads": -1, "filename": "pypiserver-1.2.7-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "7abb7cb4fdd0dddf2ffebe2c8460b533", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 74515, "upload_time": "2019-02-01T01:17:14", "upload_time_iso_8601": "2019-02-01T01:17:14.780120Z", "url": "https://files.pythonhosted.org/packages/62/ad/26959e397a2e598b278aec702ba088e2b21b7b183577c4c78b5d5d20b705/pypiserver-1.2.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4fa07af7cfbf878ad9e568175974e48", "sha256": "647bea706b0148415b500aaffea6ab06dd15fa286e534b3f891b04e7987d031f"}, "downloads": -1, "filename": "pypiserver-1.2.7.zip", "has_sig": true, "md5_digest": "f4fa07af7cfbf878ad9e568175974e48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 536035, "upload_time": "2019-02-01T01:17:18", "upload_time_iso_8601": "2019-02-01T01:17:18.208363Z", "url": "https://files.pythonhosted.org/packages/7e/e7/69c5e5c0cf1eb2b0b73fc813a001bd75bc70d76bb7fd9ab91cb279d0e2fb/pypiserver-1.2.7.zip", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "af8ef6523e62f891d8ff84d4ec83e718", "sha256": "07c104ff42a930baa7cd32673e965c67b225b04fa5322a734671a36736996b16"}, "downloads": -1, "filename": "pypiserver-1.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "af8ef6523e62f891d8ff84d4ec83e718", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 75037, "upload_time": "2019-05-05T22:05:13", "upload_time_iso_8601": "2019-05-05T22:05:13.058745Z", "url": "https://files.pythonhosted.org/packages/b6/b6/a051b76b74de9f3d4509d83055a6f505364cef4adc8358d05db7b04da0b7/pypiserver-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11753e8ac94a5b2cc80bf09751531980", "sha256": "c0361290ee11eb267475761adc1e663ef0a56739a323cfefdf904e46f693ce0a"}, "downloads": -1, "filename": "pypiserver-1.3.0.zip", "has_sig": true, "md5_digest": "11753e8ac94a5b2cc80bf09751531980", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 538529, "upload_time": "2019-05-05T22:05:16", "upload_time_iso_8601": "2019-05-05T22:05:16.155533Z", "url": "https://files.pythonhosted.org/packages/f9/64/0a6d765c6a10ff935b18ce5fa3699be9af3cf28df380ff71d40e8d770df1/pypiserver-1.3.0.zip", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "a1d7bb52f918584c70aeab7aa140e9f7", "sha256": "b79d8099e1a26b31d3a106a566ec315296fdd12184efecffb38f7c20594d6b3a"}, "downloads": -1, "filename": "pypiserver-1.3.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a1d7bb52f918584c70aeab7aa140e9f7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 74979, "upload_time": "2019-09-11T00:56:47", "upload_time_iso_8601": "2019-09-11T00:56:47.486620Z", "url": "https://files.pythonhosted.org/packages/6d/66/c587bf07aea6393acae49ad3d8b0fe32a04f388cfc9c495abe88da77bb85/pypiserver-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2854c2d40bf18472d321d2495373d9c", "sha256": "514826a85c3fd62763dbaa32d1cf596d575a8329fb35235ef8085ea5d5dbe97d"}, "downloads": -1, "filename": "pypiserver-1.3.1.zip", "has_sig": true, "md5_digest": "b2854c2d40bf18472d321d2495373d9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 538986, "upload_time": "2019-09-11T00:56:50", "upload_time_iso_8601": "2019-09-11T00:56:50.476609Z", "url": "https://files.pythonhosted.org/packages/77/72/87adc0c62a5848bf239d9af61e9190b9cc91a7d2f05506c5a6b00a33f2db/pypiserver-1.3.1.zip", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "724ce6f9486a4ae4fc2fdad8ae1f7ec2", "sha256": "9ea8ba928aa1a2fb33b1be7c79f64831cdc15e6053da117a0a9c7dd91ccbc5ed"}, "downloads": -1, "filename": "pypiserver-1.3.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "724ce6f9486a4ae4fc2fdad8ae1f7ec2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 75130, "upload_time": "2020-01-11T23:32:35", "upload_time_iso_8601": "2020-01-11T23:32:35.031127Z", "url": "https://files.pythonhosted.org/packages/80/b1/76541cbc2bfea31e3429d9b94ea935de438d1e35bca6a8047195a9d4b2be/pypiserver-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "462264054af2146775cd7e7cfcf75f8d", "sha256": "21d2e1d0ace2c4866d759f9bd4e89c43037939f0e200acfd823cf40a1e1ece62"}, "downloads": -1, "filename": "pypiserver-1.3.2.zip", "has_sig": true, "md5_digest": "462264054af2146775cd7e7cfcf75f8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 540495, "upload_time": "2020-01-11T23:32:38", "upload_time_iso_8601": "2020-01-11T23:32:38.541680Z", "url": "https://files.pythonhosted.org/packages/e2/28/2af08d28a86e524c9009274f1b7e7be9c9b9201a3595235255e778454c35/pypiserver-1.3.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "724ce6f9486a4ae4fc2fdad8ae1f7ec2", "sha256": "9ea8ba928aa1a2fb33b1be7c79f64831cdc15e6053da117a0a9c7dd91ccbc5ed"}, "downloads": -1, "filename": "pypiserver-1.3.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "724ce6f9486a4ae4fc2fdad8ae1f7ec2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 75130, "upload_time": "2020-01-11T23:32:35", "upload_time_iso_8601": "2020-01-11T23:32:35.031127Z", "url": "https://files.pythonhosted.org/packages/80/b1/76541cbc2bfea31e3429d9b94ea935de438d1e35bca6a8047195a9d4b2be/pypiserver-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "462264054af2146775cd7e7cfcf75f8d", "sha256": "21d2e1d0ace2c4866d759f9bd4e89c43037939f0e200acfd823cf40a1e1ece62"}, "downloads": -1, "filename": "pypiserver-1.3.2.zip", "has_sig": true, "md5_digest": "462264054af2146775cd7e7cfcf75f8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 540495, "upload_time": "2020-01-11T23:32:38", "upload_time_iso_8601": "2020-01-11T23:32:38.541680Z", "url": "https://files.pythonhosted.org/packages/e2/28/2af08d28a86e524c9009274f1b7e7be9c9b9201a3595235255e778454c35/pypiserver-1.3.2.zip", "yanked": false}], "timestamp": "Fri May  8 02:59:28 2020"}