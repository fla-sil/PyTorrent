{"info": {"author": "Mark Blakeney", "author_email": "blakeney.mark@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "### PIFACEIO\n\nThis package provides a Python interface to the [PiFace Digital][pifaceboard]\nperipheral I/O board for the [Raspberry Pi][rpi].\nA [PiFace Digital][pifaceboard] board offers 8 digital inputs and 8\ndigital outputs. This package allows a Python program to read the inputs\nand write the outputs on the board via the Raspberry Pi SPI bus.\n\nThe newer [PiFace Digital 2][pifaceboard2] board is exactly compatible\nwith the original board and so is also supported by this package.\n\nMultiple [PiFace Digital][pifaceboard] boards are supported, on either\nor both of the RPi SPI bus chip selects. This pifaceio package is\nfocussed on simplicity and performance for polled implementations and is\nan alternative to the [pifacedigitalio][] and [piface][] (now\ndepreciated) Python packages for the [PiFace Digital][pifaceboard]\nboard. In my simple polled read and write benchmarks, pifaceio performs\nsignificantly faster and with much less overhead than\n[pifacedigitalio][].\n\nInterrupts are not supported. See [pifacedigitalio][] for interrupt and\nother functionality.\n\nThe pifaceio package is implemented in pure Python code using only the\nPython standard library, uses no external 3rd party packages, and is\ncompatible with Python versions 2 and 3.\n\n### INSTALLATION\n\n#### Installation using PIP\n\nThe [pifaceio pypi package][pifaceio] is available from [PyPi][] so\nyou can install it using [pip][] (with or without a [virtualenv][]). If\n[pip][] is not already installed run:\n\n    sudo apt-get install python-pip\n\nThen use pip to install the [pifaceio][] package:\n\n    sudo pip install pifaceio\n\nTo set up permissions/groups/udev etc for spidev device on RPi, run the\nincluded script and then reboot.\n\n    sudo pifaceio-install-spidev.sh\n\n#### Alternative Installation from Github\n\nInstall necessary packages on your Raspberry Pi for build etc:\n\n    sudo apt-get install git python-pip\n\nGet this package:\n\n    git clone http://github.com/bulletmark/pifaceio\n    cd pifaceio\n\nInstall (can alternately do this as ordinary user in a [virtualenv][]\nof course):\n\n    sudo pip install .\n\nTo set up permissions/groups/udev etc for spidev device on RPi, run the\nfollowing included script and then reboot.\n\n    sudo ./pifaceio-install-spidev.sh\n\n### USAGE\n\nBoard addresses, input pins, and output pins are always numbered from 0.\n\nIn general, you start with a once-off allocation of a PiFace board\ninstance at startup with:\n\n    pf = pifaceio.PiFace()\n\nDefault is first PiFace board (0). Optionally takes an argument 0 to 7\nfor up to 8 PiFace board addresses. Create multiple PiFace() instances\nif you want to use multiple boards in parallel.\n\nThere are also other (rarely needed) options to disable the input pull\nup resistors, and to invert the input and output bit polarities. See\npifaceio.py for details.\n\nAt each poll time, e.g. every part second, read all the inputs (i.e. the\nsingle input byte) with:\n\n    pf.read() # returns the input byte you can use directly if you prefer\n\nThen read and write individual pins according to your logic with:\n\n    in_val = pf.read_pin(pin_in)\n    ..\n    pf.write_pin(pin_out, out_val)\n    ..\n\nFinally, write all the outputs at the end of processing (i.e. write the\nsingle output byte) with:\n\n    pf.write() # optionally, takes an output byte to write directly\n\nNote that `read_pin()` is just a convenience method wrapping a bit\ntest around the previously read input byte from `read()` and\n`write_pin()` is just a convenience method wrapping a bit set/clear\naround the output byte pending it being written by `write()`. You don't\nhave to use `read_pin()` or `write_pin()` if you just want to read,\ntest/manipulate, and write the 8 bit input and/or output byte directly.\nIn that case you would just use `read()`, and `write()` only in your\napplication.\n\n### EXAMPLES\n\nSimple example to just reflect all PiFace 8 inputs to the 8 outputs\nevery 10 msec, on the default first PiFace board:\n\n    import pifaceio, time\n    pf = pifaceio.PiFace()\n\n    while True:\n        pf.write(pf.read())\n        time.sleep(.01)\n\nSame example, but do it across 4 PiFace boards:\n\n    import pifaceio, time\n    pifaces = [pifaceio.PiFace(n) for n in range(4)]\n\n    while True:\n        for pf in pifaces:\n            pf.write(pf.read())\n        time.sleep(.01)\n\nSimple example to test if both input pin 0 and 1 are on at same time,\nand then set output pin 7 if true:\n\n    import pifaceio\n    pf = pifaceio.PiFace()\n    ...\n    # Fetch inputs (i.e. single byte)\n    pf.read()\n    first_two_inputs_on = pf.read_pin(0) and pf.read_pin(1)\n\n    # Now write that state to output pin 7\n    pf.write_pin(7, first_two_inputs_on)\n\n    # Do final (actual) write when all output pin states are set.\n    pf.write()\n\nSimulated \"interrupt\" processing example by light-weight poll every 10 msecs:\n\n    import pifaceio, time\n    pf = pifaceio.PiFace()\n\n    def process_change():\n        'On any changed inputs, read inputs and write outputs'\n        pf.write_pin(7, pf.read_pin(0) and pf.read_pin(1))\n\n        # .. etc .. do logic using pf.read_pin() and pf.write_pin()\n\n    # Loop forever polling inputs ..\n    last = None\n    while True:\n        data = pf.read()\n\n        # Do processing only on change\n        if last != data:\n            last = data\n            process_change()\n            pf.write()        # note write() only writes if output changes\n\n        time.sleep(.01)\n\n### PIFACE PACKAGE BACKWARDS COMPATIBILITY\n\nThe following [piface][] API will work compatibly, but performance is\nslightly degraded compared to reading and writing the single input and\noutput bytes using the canonical new and preferred pifaceio API\ndescribed above. However, performance is still significantly\nsuperior compared to using the original [piface][] package itself.\n\n    #import piface.pfio as pf (change this to next line)\n    import pifaceio as pf\n\n    # The following calls should be approximately compatible:\n    pf.init()\n    value = pf.digital_read(pin)\n    pf.digital_write(pin, value)\n    pf.deinit()\n\nYou can also use multiple boards with this compatibility interface, e.g.\nas follows where board can be from 0 to 7.\n\n    value = pf.digital_read(pin, board)\n    pf.digital_write(pin, value, board)\n\n### UPGRADE\n\n    cd pifaceio  # source dir, as above\n    git pull\n    sudo pip install -U .\n\n### LICENSE\n\nCopyright (C) 2013 Mark Blakeney. This program is distributed under the\nterms of the GNU General Public License.\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation, either version 3 of the License, or any later\nversion.\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\nPublic License at <http://www.gnu.org/licenses/> for more details.\n\n[rpi]: http://www.raspberrypi.org\n[pifaceboard]: http://www.piface.org.uk/products/piface_digital/\n[pifaceboard2]: http://www.element14.com/community/docs/DOC-69001/l/piface-digital-2-for-raspberry-pi\n[piface]: http://github.com/thomasmacpherson/piface\n[pifacedigitalio]: http://github.com/piface/pifacedigitalio\n[PyPi]: https://pypi.python.org/pypi\n[pip]: http://www.pip-installer.org/en/latest\n[virtualenv]: https://virtualenv.pypa.io/en/latest\n[pifaceio]: https://pypi.python.org/pypi/pifaceio\n\n<!-- vim: se ai et syn=markdown: -->", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bulletmark/pifaceio", "keywords": "piface,spidev,raspberrypi", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pifaceio", "package_url": "https://pypi.org/project/pifaceio/", "platform": "", "project_url": "https://pypi.org/project/pifaceio/", "project_urls": {"Homepage": "http://github.com/bulletmark/pifaceio"}, "release_url": "https://pypi.org/project/pifaceio/1.27/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Python interface to the Raspberry Pi PiFace board", "version": "1.27", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>PIFACEIO</h3>\n<p>This package provides a Python interface to the <a href=\"http://www.piface.org.uk/products/piface_digital/\" rel=\"nofollow\">PiFace Digital</a>\nperipheral I/O board for the <a href=\"http://www.raspberrypi.org\" rel=\"nofollow\">Raspberry Pi</a>.\nA <a href=\"http://www.piface.org.uk/products/piface_digital/\" rel=\"nofollow\">PiFace Digital</a> board offers 8 digital inputs and 8\ndigital outputs. This package allows a Python program to read the inputs\nand write the outputs on the board via the Raspberry Pi SPI bus.</p>\n<p>The newer <a href=\"http://www.element14.com/community/docs/DOC-69001/l/piface-digital-2-for-raspberry-pi\" rel=\"nofollow\">PiFace Digital 2</a> board is exactly compatible\nwith the original board and so is also supported by this package.</p>\n<p>Multiple <a href=\"http://www.piface.org.uk/products/piface_digital/\" rel=\"nofollow\">PiFace Digital</a> boards are supported, on either\nor both of the RPi SPI bus chip selects. This pifaceio package is\nfocussed on simplicity and performance for polled implementations and is\nan alternative to the <a href=\"http://github.com/piface/pifacedigitalio\" rel=\"nofollow\">pifacedigitalio</a> and <a href=\"http://github.com/thomasmacpherson/piface\" rel=\"nofollow\">piface</a> (now\ndepreciated) Python packages for the <a href=\"http://www.piface.org.uk/products/piface_digital/\" rel=\"nofollow\">PiFace Digital</a>\nboard. In my simple polled read and write benchmarks, pifaceio performs\nsignificantly faster and with much less overhead than\n<a href=\"http://github.com/piface/pifacedigitalio\" rel=\"nofollow\">pifacedigitalio</a>.</p>\n<p>Interrupts are not supported. See <a href=\"http://github.com/piface/pifacedigitalio\" rel=\"nofollow\">pifacedigitalio</a> for interrupt and\nother functionality.</p>\n<p>The pifaceio package is implemented in pure Python code using only the\nPython standard library, uses no external 3rd party packages, and is\ncompatible with Python versions 2 and 3.</p>\n<h3>INSTALLATION</h3>\n<h4>Installation using PIP</h4>\n<p>The <a href=\"https://pypi.python.org/pypi/pifaceio\" rel=\"nofollow\">pifaceio pypi package</a> is available from <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPi</a> so\nyou can install it using <a href=\"http://www.pip-installer.org/en/latest\" rel=\"nofollow\">pip</a> (with or without a <a href=\"https://virtualenv.pypa.io/en/latest\" rel=\"nofollow\">virtualenv</a>). If\n<a href=\"http://www.pip-installer.org/en/latest\" rel=\"nofollow\">pip</a> is not already installed run:</p>\n<pre><code>sudo apt-get install python-pip\n</code></pre>\n<p>Then use pip to install the <a href=\"https://pypi.python.org/pypi/pifaceio\" rel=\"nofollow\">pifaceio</a> package:</p>\n<pre><code>sudo pip install pifaceio\n</code></pre>\n<p>To set up permissions/groups/udev etc for spidev device on RPi, run the\nincluded script and then reboot.</p>\n<pre><code>sudo pifaceio-install-spidev.sh\n</code></pre>\n<h4>Alternative Installation from Github</h4>\n<p>Install necessary packages on your Raspberry Pi for build etc:</p>\n<pre><code>sudo apt-get install git python-pip\n</code></pre>\n<p>Get this package:</p>\n<pre><code>git clone http://github.com/bulletmark/pifaceio\ncd pifaceio\n</code></pre>\n<p>Install (can alternately do this as ordinary user in a <a href=\"https://virtualenv.pypa.io/en/latest\" rel=\"nofollow\">virtualenv</a>\nof course):</p>\n<pre><code>sudo pip install .\n</code></pre>\n<p>To set up permissions/groups/udev etc for spidev device on RPi, run the\nfollowing included script and then reboot.</p>\n<pre><code>sudo ./pifaceio-install-spidev.sh\n</code></pre>\n<h3>USAGE</h3>\n<p>Board addresses, input pins, and output pins are always numbered from 0.</p>\n<p>In general, you start with a once-off allocation of a PiFace board\ninstance at startup with:</p>\n<pre><code>pf = pifaceio.PiFace()\n</code></pre>\n<p>Default is first PiFace board (0). Optionally takes an argument 0 to 7\nfor up to 8 PiFace board addresses. Create multiple PiFace() instances\nif you want to use multiple boards in parallel.</p>\n<p>There are also other (rarely needed) options to disable the input pull\nup resistors, and to invert the input and output bit polarities. See\npifaceio.py for details.</p>\n<p>At each poll time, e.g. every part second, read all the inputs (i.e. the\nsingle input byte) with:</p>\n<pre><code>pf.read() # returns the input byte you can use directly if you prefer\n</code></pre>\n<p>Then read and write individual pins according to your logic with:</p>\n<pre><code>in_val = pf.read_pin(pin_in)\n..\npf.write_pin(pin_out, out_val)\n..\n</code></pre>\n<p>Finally, write all the outputs at the end of processing (i.e. write the\nsingle output byte) with:</p>\n<pre><code>pf.write() # optionally, takes an output byte to write directly\n</code></pre>\n<p>Note that <code>read_pin()</code> is just a convenience method wrapping a bit\ntest around the previously read input byte from <code>read()</code> and\n<code>write_pin()</code> is just a convenience method wrapping a bit set/clear\naround the output byte pending it being written by <code>write()</code>. You don't\nhave to use <code>read_pin()</code> or <code>write_pin()</code> if you just want to read,\ntest/manipulate, and write the 8 bit input and/or output byte directly.\nIn that case you would just use <code>read()</code>, and <code>write()</code> only in your\napplication.</p>\n<h3>EXAMPLES</h3>\n<p>Simple example to just reflect all PiFace 8 inputs to the 8 outputs\nevery 10 msec, on the default first PiFace board:</p>\n<pre><code>import pifaceio, time\npf = pifaceio.PiFace()\n\nwhile True:\n    pf.write(pf.read())\n    time.sleep(.01)\n</code></pre>\n<p>Same example, but do it across 4 PiFace boards:</p>\n<pre><code>import pifaceio, time\npifaces = [pifaceio.PiFace(n) for n in range(4)]\n\nwhile True:\n    for pf in pifaces:\n        pf.write(pf.read())\n    time.sleep(.01)\n</code></pre>\n<p>Simple example to test if both input pin 0 and 1 are on at same time,\nand then set output pin 7 if true:</p>\n<pre><code>import pifaceio\npf = pifaceio.PiFace()\n...\n# Fetch inputs (i.e. single byte)\npf.read()\nfirst_two_inputs_on = pf.read_pin(0) and pf.read_pin(1)\n\n# Now write that state to output pin 7\npf.write_pin(7, first_two_inputs_on)\n\n# Do final (actual) write when all output pin states are set.\npf.write()\n</code></pre>\n<p>Simulated \"interrupt\" processing example by light-weight poll every 10 msecs:</p>\n<pre><code>import pifaceio, time\npf = pifaceio.PiFace()\n\ndef process_change():\n    'On any changed inputs, read inputs and write outputs'\n    pf.write_pin(7, pf.read_pin(0) and pf.read_pin(1))\n\n    # .. etc .. do logic using pf.read_pin() and pf.write_pin()\n\n# Loop forever polling inputs ..\nlast = None\nwhile True:\n    data = pf.read()\n\n    # Do processing only on change\n    if last != data:\n        last = data\n        process_change()\n        pf.write()        # note write() only writes if output changes\n\n    time.sleep(.01)\n</code></pre>\n<h3>PIFACE PACKAGE BACKWARDS COMPATIBILITY</h3>\n<p>The following <a href=\"http://github.com/thomasmacpherson/piface\" rel=\"nofollow\">piface</a> API will work compatibly, but performance is\nslightly degraded compared to reading and writing the single input and\noutput bytes using the canonical new and preferred pifaceio API\ndescribed above. However, performance is still significantly\nsuperior compared to using the original <a href=\"http://github.com/thomasmacpherson/piface\" rel=\"nofollow\">piface</a> package itself.</p>\n<pre><code>#import piface.pfio as pf (change this to next line)\nimport pifaceio as pf\n\n# The following calls should be approximately compatible:\npf.init()\nvalue = pf.digital_read(pin)\npf.digital_write(pin, value)\npf.deinit()\n</code></pre>\n<p>You can also use multiple boards with this compatibility interface, e.g.\nas follows where board can be from 0 to 7.</p>\n<pre><code>value = pf.digital_read(pin, board)\npf.digital_write(pin, value, board)\n</code></pre>\n<h3>UPGRADE</h3>\n<pre><code>cd pifaceio  # source dir, as above\ngit pull\nsudo pip install -U .\n</code></pre>\n<h3>LICENSE</h3>\n<p>Copyright (C) 2013 Mark Blakeney. This program is distributed under the\nterms of the GNU General Public License.\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation, either version 3 of the License, or any later\nversion.\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\nPublic License at <a href=\"http://www.gnu.org/licenses/\" rel=\"nofollow\">http://www.gnu.org/licenses/</a> for more details.</p>\n\n\n          </div>"}, "last_serial": 6116209, "releases": {"1.24": [{"comment_text": "", "digests": {"md5": "9b3cad2960d8a89993cb49e968ea86b8", "sha256": "6ac87d548ad64caf43b5354dbaca9fd34c9f902c3b432c47045ce00bc639a2ca"}, "downloads": -1, "filename": "pifaceio-1.24.tar.gz", "has_sig": false, "md5_digest": "9b3cad2960d8a89993cb49e968ea86b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7764, "upload_time": "2015-10-31T02:32:44", "upload_time_iso_8601": "2015-10-31T02:32:44.083236Z", "url": "https://files.pythonhosted.org/packages/44/2d/11c5eee75824ba57776d4c5c0a12c777fece3940ef23ed1307924dd290fd/pifaceio-1.24.tar.gz", "yanked": false}], "1.25": [{"comment_text": "", "digests": {"md5": "18b220fcee717378574417a59a65e15d", "sha256": "c6bdb7731d2089e27dcf64ecafa1729c41cd1dc44191a6d7ccd0563e4d8f4d83"}, "downloads": -1, "filename": "pifaceio-1.25.tar.gz", "has_sig": false, "md5_digest": "18b220fcee717378574417a59a65e15d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7791, "upload_time": "2016-04-26T00:13:09", "upload_time_iso_8601": "2016-04-26T00:13:09.248617Z", "url": "https://files.pythonhosted.org/packages/f5/19/0e271b2d5a03bf2a065a3c23a0d01a77bf51ff5d1fb479415844f3f65cc8/pifaceio-1.25.tar.gz", "yanked": false}], "1.26": [{"comment_text": "", "digests": {"md5": "c7485613a6b74f9b99bc72c9c232bb8d", "sha256": "81ab6f18693fb3de923c28ff2ba48991b3d01ba3d770f5404fe001447afebea8"}, "downloads": -1, "filename": "pifaceio-1.26.tar.gz", "has_sig": false, "md5_digest": "c7485613a6b74f9b99bc72c9c232bb8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7873, "upload_time": "2017-08-20T05:29:01", "upload_time_iso_8601": "2017-08-20T05:29:01.746237Z", "url": "https://files.pythonhosted.org/packages/c5/3d/80ebbb2d6525f7b89af4ec859bee36369e227e3076878fde89d8dcd68cf9/pifaceio-1.26.tar.gz", "yanked": false}], "1.26.1": [{"comment_text": "", "digests": {"md5": "c10063c2675964efa882c63c1e32bf4e", "sha256": "f59d1825b17848a3e3a5d2de2e5d4536724d9210a33b4ff8dce2eefc64e67e3e"}, "downloads": -1, "filename": "pifaceio-1.26.1.tar.gz", "has_sig": false, "md5_digest": "c10063c2675964efa882c63c1e32bf4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7953, "upload_time": "2018-03-16T22:38:00", "upload_time_iso_8601": "2018-03-16T22:38:00.107816Z", "url": "https://files.pythonhosted.org/packages/e5/f9/3317b866c799604683a33a37d027c9b05b2b1c90013c4eb3501b70c56c85/pifaceio-1.26.1.tar.gz", "yanked": false}], "1.26.3": [{"comment_text": "", "digests": {"md5": "5d68f5040c13f5bab5d5ea4c4cd6e6c5", "sha256": "fda02a3c7b29678782dc4837d2d57d3da3816088776b436053776c245dd4fc93"}, "downloads": -1, "filename": "pifaceio-1.26.3.tar.gz", "has_sig": false, "md5_digest": "5d68f5040c13f5bab5d5ea4c4cd6e6c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8086, "upload_time": "2018-08-13T01:34:53", "upload_time_iso_8601": "2018-08-13T01:34:53.129414Z", "url": "https://files.pythonhosted.org/packages/32/03/99249ea09cda35bc87943c1e1a2177172cdd85dfe744bf1b3277ecfc0e2d/pifaceio-1.26.3.tar.gz", "yanked": false}], "1.27": [{"comment_text": "", "digests": {"md5": "c89091df06e8ba6a02b580be186f2aa9", "sha256": "c1ae0769b3d7313d9e1898ca98fa06419f908fb62744db8cc16ef0eb590c1884"}, "downloads": -1, "filename": "pifaceio-1.27.tar.gz", "has_sig": false, "md5_digest": "c89091df06e8ba6a02b580be186f2aa9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8056, "upload_time": "2019-11-11T10:34:13", "upload_time_iso_8601": "2019-11-11T10:34:13.726171Z", "url": "https://files.pythonhosted.org/packages/f4/58/bfc29a1531b00010327a929766fd8900a90db932ac00053c0d9fd10d8990/pifaceio-1.27.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c89091df06e8ba6a02b580be186f2aa9", "sha256": "c1ae0769b3d7313d9e1898ca98fa06419f908fb62744db8cc16ef0eb590c1884"}, "downloads": -1, "filename": "pifaceio-1.27.tar.gz", "has_sig": false, "md5_digest": "c89091df06e8ba6a02b580be186f2aa9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8056, "upload_time": "2019-11-11T10:34:13", "upload_time_iso_8601": "2019-11-11T10:34:13.726171Z", "url": "https://files.pythonhosted.org/packages/f4/58/bfc29a1531b00010327a929766fd8900a90db932ac00053c0d9fd10d8990/pifaceio-1.27.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:53 2020"}