{"info": {"author": "Telnyx", "author_email": "support@telnyx.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Communications :: Telephony", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Telnyx Python Library\n\n[![image](https://img.shields.io/pypi/v/telnyx.svg)][pypi]\n[![image](https://img.shields.io/pypi/l/telnyx.svg)][pypi]\n[![image](https://img.shields.io/pypi/pyversions/telnyx.svg)][pypi]\n[![Build Status](https://travis-ci.org/team-telnyx/telnyx-python.svg?branch=master)][travis]\n[![Coverage Status](https://coveralls.io/repos/github/team-telnyx/telnyx-python/badge.svg?branch=master)][coveralls]\n\n[pypi]: https://pypi.org/project/telnyx/\n[travis]: https://travis-ci.org/team-telnyx/telnyx-python\n[coveralls]: https://coveralls.io/github/team-telnyx/telnyx-python?branch=master\n\nThe Telnyx Python library provides convenient access to the Telnyx API from\napplications written in the Python language. It includes a pre-defined set of\nclasses for API resources that initialize themselves dynamically from API\nresponses which makes it compatible with a wide range of versions of the Telnyx\nAPI.\n\n## Documentation\n\nSee the [API Reference](https://developers.telnyx.com/docs/api/v2/overview) and the [Setup Guides](https://developers.telnyx.com/docs/v2/development/dev-env-setup).\n\n## Installation\n\nYou don't need this source code unless you want to modify the package. If you just\nwant to use the package, just run:\n\n    pip install --upgrade telnyx\n\nInstall from source with:\n\n    python setup.py install\n\n### Non x86/x86_64 Processors\n\nThe `telnyx` package is distributed as a wheel (pre-compiled package) for easy\ninstallation. The wheel is built only for x86/x86_64 processors. When\ninstalling the package on a different architecture, like ARM, the `pip`\ninstaller will fall back to installing from source. As a result, you will\nneed to ensure you have the additional dependencies installed. This will\naffect you if you're using a Raspberry Pi, for example.\n\nFor ARM specifically, as an alternative to a source install, you could look\ninto using https://www.piwheels.org/ for ARM compiled wheels.\n\n### Requirements\n\n- Python 2.7 or 3.5+ (PyPy supported)\n\n#### Additional Requirements for Source Install\n\n- build-essentials (gcc, make)\n- python-dev\n- libffi-dev\n\n_These packages are listed as they are named on Ubuntu._\n\n## Usage\n\nThe library needs to be configured with your account's API Key which is\navailable in your [Telnyx Dashboard][api-keys]. Set `telnyx.api_key` to its\nvalue:\n\n```python\nimport telnyx\ntelnyx.api_key = \"KEY01234_yoursecretkey\"\n\n# list messaging profies\ntelnyx.MessagingProfile.list()\n\n# retrieve single messaging profile\ntelnyx.MessagingProfile.retrieve(\"123\")\n```\n\nYou can read more about our API Keys [here](https://developers.telnyx.com/docs/v2/development/authentication).\n\n### Per-Request Configuration\n\nFor apps that need to use multiple keys during the lifetime of a process,\nit's also possible to set a per-request key and/or account:\n\n```python\nimport telnyx\n\n# list messaging profiles\ntelnyx.MessagingProfile.list(\n    api_key=\"super-secret...\",\n)\n\n# retrieve single messaging profile\ntelnyx.MessagingProfile.retrieve(\n    \"123\",\n    api_key=\"other-secret...\",\n)\n```\n\n### Configuring an HTTP Client\n\nThe library can be configured to use `urlfetch`, `requests`, `pycurl`, or\n`urllib2` with `telnyx.default_http_client`:\n\n```python\nclient = telnyx.http_client.UrlFetchClient()\nclient = telnyx.http_client.RequestsClient()\nclient = telnyx.http_client.PycurlClient()\nclient = telnyx.http_client.Urllib2Client()\ntelnyx.default_http_client = client\n```\n\nWithout a configured client, by default the library will attempt to load\nlibraries in the order above (i.e. `urlfetch` is preferred with `urllib2` used\nas a last resort). We usually recommend that people use `requests`.\n\n### Configuring a Proxy\n\nA proxy can be configured with `telnyx.proxy`:\n\n```python\ntelnyx.proxy = \"https://user:pass@example.com:1234\"\n```\n\n### Configuring Automatic Retries\n\nNumber of automatic retries on requests that fail due to an intermittent\nnetwork problem can be configured:\n\n```python\ntelnyx.max_network_retries = 2\n```\n\n### Reserved word keyword arguments\nThe Telnyx API includes `from` as an attribute that can be set on messages.\n`from` is also a reserved word in Python. If you would like to use keyword\narguments where an argument is a reserved word you can add the suffix `_` e.g.\n\n```\ntelnyx.Messages.create(\n    to=\"+18665550001\",\n    from_=\"+18445550001\",\n    text=\"Foo\"\n)\n```\n\nThe argument will be automatically rewritten to `from` in the keyword arguments dict.\n\n> Pro Tip: You can alternatively unpack a dictionary like so:\n> ```python\n> message = {\n>     \"from\": \"+18445550001\",\n>     \"to\": \"+18665550001\",\n>     \"text\": \"Foo\",\n> }\n> telnyx.Messages.create(**message)\n> ```\n\n### Logging\n\nThe library can be configured to emit logging that will give you better insight\ninto what it's doing. The `info` logging level is usually most appropriate for\nproduction use, but `debug` is also available for more verbosity.\n\nThere are a few options for enabling it:\n\n1. Set the environment variable `TELNYX_LOG` to the value `debug` or `info`\n\n   ```\n   $ export TELNYX_LOG=debug\n   ```\n\n2. Set `telnyx.log`:\n\n   ```py\n   import telnyx\n   telnyx.log = 'debug'\n   ```\n\n3. Enable it through Python's logging module:\n   ```py\n   import logging\n   logging.basicConfig()\n   logging.getLogger('telnyx').setLevel(logging.DEBUG)\n   ```\n\n### Writing a Plugin\n\nIf you're writing a plugin that uses the library, we'd appreciate it if you\nidentified using `telnyx.set_app_info()`:\n\n```py\ntelnyx.set_app_info(\"MyAwesomePlugin\", version=\"1.2.34\", url=\"https://myawesomeplugin.info\")\n```\n\nThis information is passed along when the library makes calls to the Telnyx\nAPI.\n\n## Development\n\nThe test suite depends on [telnyx-mock], so make sure to fetch and run it from a\nbackground terminal ([telnyx-mock's README][telnyx-mock] also contains\ninstructions for installing via Homebrew and other methods):\n\n    go get -u github.com/team-telnyx/telnyx-mock\n    telnyx-mock\n\nInstall [pipenv][pipenv], then install all dependencies for the project:\n\n    pipenv install --dev\n\nRun all tests on all supported Python versions:\n\n    make test\n\nRun all tests for a specific Python version (modify `-e` according to your Python target):\n\n    pipenv run tox -e py27\n\nRun all tests in a single file:\n\n    pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.py\n\nRun a single test suite:\n\n    pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.py::TestUpdateableAPIResource\n\nRun a single test:\n\n    pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.py::TestUpdateableAPIResource::test_save\n\nRun the linter with:\n\n    make lint\n\nThe library uses [Black][black] for code formatting. Code must be formatted\nwith Black before PRs are submitted, otherwise CI will fail. Run the formatter\nwith:\n\n    make fmt\n\n### Adding a new endpoint\n\n1. Define a class for the object that the endpoint interacts with under\n`telnyx/api_resources/`. The path name singularized should typically match\nthe record type of the object returned e.g. `/v2/available_phone_numbers`\nreturns a list of objects with the record_type `available_phone_number`.\nInherit from the classes that define the behavior available on the endpoint,one or more of `CreateableAPIResource`, `DeletableAPIResource`,\n`ListableAPIResource`, `UpdateableAPIResource`.\n\n2. Import your class in `telnyx/api_resources/__init__.py`.\n\n3. Add your new class to the `OBJECT_CLASSES` block in `telnyx/util.py`.\n\n4. Add tests for your new class under `tests/api_resources/`.\n\n\n[api-keys]: https://portal.telnyx.com/#/app/auth/v2\n[black]: https://github.com/ambv/black\n[pipenv]: https://github.com/pypa/pipenv\n[telnyx-mock]: https://github.com/team-telnyx/telnyx-mock\n\n## Releasing\n\n1. Update version in\n    * `setup.py`  (in the `setup()` call, the `version` kwarg)\n    * `telnyx/__init__.py`  (the `__version__` string)\n2. Create new branch, add changes, commit, and push\n3. Ensure commit passes tests in [Travis][travis-telnyx-python]\n4. Tag that commit with `git tag -a v{VERSION} -m \"Release v{VERSION}\"`, and push the tag `git push --follow-tags`\n5. Ensure checked out copy is entirely clean (best to create a new environment...)\n6. `make dists`\n7. *If you haven't done it before*, download the upload API keys from LastPass (search for \"pypi\") and put the contents between \"PYPIRC FILE\" tags into `~/.pypirc-telnyx`.\n8. `make testupload`, check that it looks OK on PyPI and that it's installable via `pip`.\n9. `make liveupload`, repeat checks for live version.\n10. Ta-da.\n\n[travis-telnyx-python]: https://travis-ci.org/team-telnyx/telnyx-python\n\n\n## Acknowledgments\n\nThe contributors and maintainers of Telnyx Python would like to extend their\ndeep gratitude to the authors of [Stripe Python][stripe-python], upon which\nthis project is based. Thank you for developing such elegant, usable, and\nextensible code and for sharing it with the community.\n\n[stripe-python]: https://github.com/stripe/stripe-python\n\n<!--\n# vim: set tw=79:\n-->\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/team-telnyx/telnyx-python", "keywords": "telnyx telephony sip networking callcontrol messaging sms mms", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "telnyx", "package_url": "https://pypi.org/project/telnyx/", "platform": "", "project_url": "https://pypi.org/project/telnyx/", "project_urls": {"Bug Tracker": "https://github.com/team-telnyx/telnyx-python/issues", "Documentation": "https://developers.telnyx.com/docs/api/v2/overview", "Homepage": "https://github.com/team-telnyx/telnyx-python", "Source Code": "https://github.com/team-telnyx/telnyx-python"}, "release_url": "https://pypi.org/project/telnyx/1.0.0b5/", "requires_dist": ["PyNaCl", "requests[security] (>=2.20) ; python_version < \"3.0\"", "requests (>=2.20) ; python_version >= \"3.0\""], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Python bindings for the Telnyx API", "version": "1.0.0b5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Telnyx Python Library</h1>\n<p><a href=\"https://pypi.org/project/telnyx/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/594cb3dc5ccfa8b37421a0234d6f963dfe49bbbf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74656c6e79782e737667\"></a>\n<a href=\"https://pypi.org/project/telnyx/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ed9e24369ece961aaae0d80f4ee5d798293b5eb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f74656c6e79782e737667\"></a>\n<a href=\"https://pypi.org/project/telnyx/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/905a2d141ee2afcc72213d455492c8174419392c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74656c6e79782e737667\"></a>\n<a href=\"https://travis-ci.org/team-telnyx/telnyx-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a12a78533a1d4febc1bfa403ad7fd9e1ff1feeeb/68747470733a2f2f7472617669732d63692e6f72672f7465616d2d74656c6e79782f74656c6e79782d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/team-telnyx/telnyx-python?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/333798591c0ce4da764530a2e520e115a4bf29fc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7465616d2d74656c6e79782f74656c6e79782d707974686f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>The Telnyx Python library provides convenient access to the Telnyx API from\napplications written in the Python language. It includes a pre-defined set of\nclasses for API resources that initialize themselves dynamically from API\nresponses which makes it compatible with a wide range of versions of the Telnyx\nAPI.</p>\n<h2>Documentation</h2>\n<p>See the <a href=\"https://developers.telnyx.com/docs/api/v2/overview\" rel=\"nofollow\">API Reference</a> and the <a href=\"https://developers.telnyx.com/docs/v2/development/dev-env-setup\" rel=\"nofollow\">Setup Guides</a>.</p>\n<h2>Installation</h2>\n<p>You don't need this source code unless you want to modify the package. If you just\nwant to use the package, just run:</p>\n<pre><code>pip install --upgrade telnyx\n</code></pre>\n<p>Install from source with:</p>\n<pre><code>python setup.py install\n</code></pre>\n<h3>Non x86/x86_64 Processors</h3>\n<p>The <code>telnyx</code> package is distributed as a wheel (pre-compiled package) for easy\ninstallation. The wheel is built only for x86/x86_64 processors. When\ninstalling the package on a different architecture, like ARM, the <code>pip</code>\ninstaller will fall back to installing from source. As a result, you will\nneed to ensure you have the additional dependencies installed. This will\naffect you if you're using a Raspberry Pi, for example.</p>\n<p>For ARM specifically, as an alternative to a source install, you could look\ninto using <a href=\"https://www.piwheels.org/\" rel=\"nofollow\">https://www.piwheels.org/</a> for ARM compiled wheels.</p>\n<h3>Requirements</h3>\n<ul>\n<li>Python 2.7 or 3.5+ (PyPy supported)</li>\n</ul>\n<h4>Additional Requirements for Source Install</h4>\n<ul>\n<li>build-essentials (gcc, make)</li>\n<li>python-dev</li>\n<li>libffi-dev</li>\n</ul>\n<p><em>These packages are listed as they are named on Ubuntu.</em></p>\n<h2>Usage</h2>\n<p>The library needs to be configured with your account's API Key which is\navailable in your <a href=\"https://portal.telnyx.com/#/app/auth/v2\" rel=\"nofollow\">Telnyx Dashboard</a>. Set <code>telnyx.api_key</code> to its\nvalue:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">telnyx</span>\n<span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"KEY01234_yoursecretkey\"</span>\n\n<span class=\"c1\"># list messaging profies</span>\n<span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">MessagingProfile</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># retrieve single messaging profile</span>\n<span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">MessagingProfile</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"s2\">\"123\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can read more about our API Keys <a href=\"https://developers.telnyx.com/docs/v2/development/authentication\" rel=\"nofollow\">here</a>.</p>\n<h3>Per-Request Configuration</h3>\n<p>For apps that need to use multiple keys during the lifetime of a process,\nit's also possible to set a per-request key and/or account:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">telnyx</span>\n\n<span class=\"c1\"># list messaging profiles</span>\n<span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">MessagingProfile</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s2\">\"super-secret...\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># retrieve single messaging profile</span>\n<span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">MessagingProfile</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"123\"</span><span class=\"p\">,</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s2\">\"other-secret...\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Configuring an HTTP Client</h3>\n<p>The library can be configured to use <code>urlfetch</code>, <code>requests</code>, <code>pycurl</code>, or\n<code>urllib2</code> with <code>telnyx.default_http_client</code>:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">http_client</span><span class=\"o\">.</span><span class=\"n\">UrlFetchClient</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">http_client</span><span class=\"o\">.</span><span class=\"n\">RequestsClient</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">http_client</span><span class=\"o\">.</span><span class=\"n\">PycurlClient</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">http_client</span><span class=\"o\">.</span><span class=\"n\">Urllib2Client</span><span class=\"p\">()</span>\n<span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">default_http_client</span> <span class=\"o\">=</span> <span class=\"n\">client</span>\n</pre>\n<p>Without a configured client, by default the library will attempt to load\nlibraries in the order above (i.e. <code>urlfetch</code> is preferred with <code>urllib2</code> used\nas a last resort). We usually recommend that people use <code>requests</code>.</p>\n<h3>Configuring a Proxy</h3>\n<p>A proxy can be configured with <code>telnyx.proxy</code>:</p>\n<pre><span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://user:pass@example.com:1234\"</span>\n</pre>\n<h3>Configuring Automatic Retries</h3>\n<p>Number of automatic retries on requests that fail due to an intermittent\nnetwork problem can be configured:</p>\n<pre><span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">max_network_retries</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</pre>\n<h3>Reserved word keyword arguments</h3>\n<p>The Telnyx API includes <code>from</code> as an attribute that can be set on messages.\n<code>from</code> is also a reserved word in Python. If you would like to use keyword\narguments where an argument is a reserved word you can add the suffix <code>_</code> e.g.</p>\n<pre><code>telnyx.Messages.create(\n    to=\"+18665550001\",\n    from_=\"+18445550001\",\n    text=\"Foo\"\n)\n</code></pre>\n<p>The argument will be automatically rewritten to <code>from</code> in the keyword arguments dict.</p>\n<blockquote>\n<p>Pro Tip: You can alternatively unpack a dictionary like so:</p>\n<pre><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"from\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+18445550001\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+18665550001\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Foo\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">Messages</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<h3>Logging</h3>\n<p>The library can be configured to emit logging that will give you better insight\ninto what it's doing. The <code>info</code> logging level is usually most appropriate for\nproduction use, but <code>debug</code> is also available for more verbosity.</p>\n<p>There are a few options for enabling it:</p>\n<ol>\n<li>\n<p>Set the environment variable <code>TELNYX_LOG</code> to the value <code>debug</code> or <code>info</code></p>\n<pre><code>$ export TELNYX_LOG=debug\n</code></pre>\n</li>\n<li>\n<p>Set <code>telnyx.log</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">telnyx</span>\n<span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"s1\">'debug'</span>\n</pre>\n</li>\n<li>\n<p>Enable it through Python's logging module:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">()</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'telnyx'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<h3>Writing a Plugin</h3>\n<p>If you're writing a plugin that uses the library, we'd appreciate it if you\nidentified using <code>telnyx.set_app_info()</code>:</p>\n<pre><span class=\"n\">telnyx</span><span class=\"o\">.</span><span class=\"n\">set_app_info</span><span class=\"p\">(</span><span class=\"s2\">\"MyAwesomePlugin\"</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"1.2.34\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"https://myawesomeplugin.info\"</span><span class=\"p\">)</span>\n</pre>\n<p>This information is passed along when the library makes calls to the Telnyx\nAPI.</p>\n<h2>Development</h2>\n<p>The test suite depends on <a href=\"https://github.com/team-telnyx/telnyx-mock\" rel=\"nofollow\">telnyx-mock</a>, so make sure to fetch and run it from a\nbackground terminal (<a href=\"https://github.com/team-telnyx/telnyx-mock\" rel=\"nofollow\">telnyx-mock's README</a> also contains\ninstructions for installing via Homebrew and other methods):</p>\n<pre><code>go get -u github.com/team-telnyx/telnyx-mock\ntelnyx-mock\n</code></pre>\n<p>Install <a href=\"https://github.com/pypa/pipenv\" rel=\"nofollow\">pipenv</a>, then install all dependencies for the project:</p>\n<pre><code>pipenv install --dev\n</code></pre>\n<p>Run all tests on all supported Python versions:</p>\n<pre><code>make test\n</code></pre>\n<p>Run all tests for a specific Python version (modify <code>-e</code> according to your Python target):</p>\n<pre><code>pipenv run tox -e py27\n</code></pre>\n<p>Run all tests in a single file:</p>\n<pre><code>pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.py\n</code></pre>\n<p>Run a single test suite:</p>\n<pre><code>pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.py::TestUpdateableAPIResource\n</code></pre>\n<p>Run a single test:</p>\n<pre><code>pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.py::TestUpdateableAPIResource::test_save\n</code></pre>\n<p>Run the linter with:</p>\n<pre><code>make lint\n</code></pre>\n<p>The library uses <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">Black</a> for code formatting. Code must be formatted\nwith Black before PRs are submitted, otherwise CI will fail. Run the formatter\nwith:</p>\n<pre><code>make fmt\n</code></pre>\n<h3>Adding a new endpoint</h3>\n<ol>\n<li>\n<p>Define a class for the object that the endpoint interacts with under\n<code>telnyx/api_resources/</code>. The path name singularized should typically match\nthe record type of the object returned e.g. <code>/v2/available_phone_numbers</code>\nreturns a list of objects with the record_type <code>available_phone_number</code>.\nInherit from the classes that define the behavior available on the endpoint,one or more of <code>CreateableAPIResource</code>, <code>DeletableAPIResource</code>,\n<code>ListableAPIResource</code>, <code>UpdateableAPIResource</code>.</p>\n</li>\n<li>\n<p>Import your class in <code>telnyx/api_resources/__init__.py</code>.</p>\n</li>\n<li>\n<p>Add your new class to the <code>OBJECT_CLASSES</code> block in <code>telnyx/util.py</code>.</p>\n</li>\n<li>\n<p>Add tests for your new class under <code>tests/api_resources/</code>.</p>\n</li>\n</ol>\n<h2>Releasing</h2>\n<ol>\n<li>Update version in\n<ul>\n<li><code>setup.py</code>  (in the <code>setup()</code> call, the <code>version</code> kwarg)</li>\n<li><code>telnyx/__init__.py</code>  (the <code>__version__</code> string)</li>\n</ul>\n</li>\n<li>Create new branch, add changes, commit, and push</li>\n<li>Ensure commit passes tests in <a href=\"https://travis-ci.org/team-telnyx/telnyx-python\" rel=\"nofollow\">Travis</a></li>\n<li>Tag that commit with <code>git tag -a v{VERSION} -m \"Release v{VERSION}\"</code>, and push the tag <code>git push --follow-tags</code></li>\n<li>Ensure checked out copy is entirely clean (best to create a new environment...)</li>\n<li><code>make dists</code></li>\n<li><em>If you haven't done it before</em>, download the upload API keys from LastPass (search for \"pypi\") and put the contents between \"PYPIRC FILE\" tags into <code>~/.pypirc-telnyx</code>.</li>\n<li><code>make testupload</code>, check that it looks OK on PyPI and that it's installable via <code>pip</code>.</li>\n<li><code>make liveupload</code>, repeat checks for live version.</li>\n<li>Ta-da.</li>\n</ol>\n<h2>Acknowledgments</h2>\n<p>The contributors and maintainers of Telnyx Python would like to extend their\ndeep gratitude to the authors of <a href=\"https://github.com/stripe/stripe-python\" rel=\"nofollow\">Stripe Python</a>, upon which\nthis project is based. Thank you for developing such elegant, usable, and\nextensible code and for sharing it with the community.</p>\n\n\n          </div>"}, "last_serial": 6993602, "releases": {"1.0.0b0": [{"comment_text": "", "digests": {"md5": "13b0ee2e9ed6a2de50a893d1c686d2c3", "sha256": "b907e330789aa0fa269d6a72666d0e13a67e464375ac4427ce1ad9f3b8de258d"}, "downloads": -1, "filename": "telnyx-1.0.0b0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "13b0ee2e9ed6a2de50a893d1c686d2c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 39653, "upload_time": "2019-07-01T16:32:02", "upload_time_iso_8601": "2019-07-01T16:32:02.388303Z", "url": "https://files.pythonhosted.org/packages/49/47/e2a725be270d8366dbf072ebd9edd8c6717cc0953ef6a712ba34b963e1f9/telnyx-1.0.0b0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54fb5a0f21f08b64bfae6a926ead3e09", "sha256": "95f3708d30a775899f44b2928dd2ad9cc6ce004a4e9b1f23576a16d17108ccfa"}, "downloads": -1, "filename": "telnyx-1.0.0b0.tar.gz", "has_sig": false, "md5_digest": "54fb5a0f21f08b64bfae6a926ead3e09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 53920, "upload_time": "2019-07-01T16:32:04", "upload_time_iso_8601": "2019-07-01T16:32:04.695724Z", "url": "https://files.pythonhosted.org/packages/e9/72/c5dd4f314d5829f7d4acb173c2b180a7b4e00fc708e684b4734d39ea60e3/telnyx-1.0.0b0.tar.gz", "yanked": false}], "1.0.0b1": [{"comment_text": "", "digests": {"md5": "7ca4bc21f7e8ad1862575b3cc2d540d8", "sha256": "97bcf675f5b8e23d4a0b7deceef2ce22760f2470502253277c2b58bcd6a8072f"}, "downloads": -1, "filename": "telnyx-1.0.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7ca4bc21f7e8ad1862575b3cc2d540d8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 41100, "upload_time": "2019-08-03T00:01:05", "upload_time_iso_8601": "2019-08-03T00:01:05.531032Z", "url": "https://files.pythonhosted.org/packages/63/83/245f52f7a2613b4feb8fe614ac3a709e05bda5e5bfa9dcad3001b1c6864e/telnyx-1.0.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e37d636d80d30da9065126f7991724ea", "sha256": "bd892325eb145f28a2c7b32f907c180ef005bb06e98c9de2293016183fe54c42"}, "downloads": -1, "filename": "telnyx-1.0.0b1.tar.gz", "has_sig": false, "md5_digest": "e37d636d80d30da9065126f7991724ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 56852, "upload_time": "2019-08-03T00:01:07", "upload_time_iso_8601": "2019-08-03T00:01:07.218107Z", "url": "https://files.pythonhosted.org/packages/bc/52/887b1d345352ae96ab212fe38be0c721adf8de5775f9703071fffc63007c/telnyx-1.0.0b1.tar.gz", "yanked": false}], "1.0.0b2": [{"comment_text": "", "digests": {"md5": "ead11b98324bd0896658520e1e902993", "sha256": "cf5d1317789d963e7f376ed121ad785a5849c738be6d1a9714eb3484b98f52a4"}, "downloads": -1, "filename": "telnyx-1.0.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ead11b98324bd0896658520e1e902993", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 41204, "upload_time": "2019-08-06T23:22:03", "upload_time_iso_8601": "2019-08-06T23:22:03.503873Z", "url": "https://files.pythonhosted.org/packages/56/3e/17e2e902a5daf5e8fc8aecb133ce4276ec8ad2bb6ac3200beb3013058ce4/telnyx-1.0.0b2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a64d84850f505399b35ef9300fc01901", "sha256": "584ae21cf62e50185ecd2ba28cdd50a29e94662f390e06d99231e3d6500f24fd"}, "downloads": -1, "filename": "telnyx-1.0.0b2.tar.gz", "has_sig": false, "md5_digest": "a64d84850f505399b35ef9300fc01901", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 55499, "upload_time": "2019-08-06T23:22:05", "upload_time_iso_8601": "2019-08-06T23:22:05.152280Z", "url": "https://files.pythonhosted.org/packages/ee/aa/1354912be93730551f91f85cd41858c278d7b4182d2b9ef030a3a5853094/telnyx-1.0.0b2.tar.gz", "yanked": false}], "1.0.0b3": [{"comment_text": "", "digests": {"md5": "eeddde02259f13e4c1b12344004415a0", "sha256": "acb756e5f8ed233131e9b39145467594b3020084a8fb17dcd3226f5f296ccde4"}, "downloads": -1, "filename": "telnyx-1.0.0b3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eeddde02259f13e4c1b12344004415a0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 45126, "upload_time": "2020-03-30T14:37:41", "upload_time_iso_8601": "2020-03-30T14:37:41.145361Z", "url": "https://files.pythonhosted.org/packages/2f/03/c258621e41e02905f76bb4067369dc46dbf2ce483f069db8ce927358ddd1/telnyx-1.0.0b3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b038acdfb60266504d81612aacc7dd33", "sha256": "d8898cf2b79c8af315b86a21430c86e3bd3b1ec0a3658c68eb4d98be53dff25e"}, "downloads": -1, "filename": "telnyx-1.0.0b3.tar.gz", "has_sig": false, "md5_digest": "b038acdfb60266504d81612aacc7dd33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 58979, "upload_time": "2020-03-30T14:37:42", "upload_time_iso_8601": "2020-03-30T14:37:42.570210Z", "url": "https://files.pythonhosted.org/packages/7b/c0/b2cf3da7043038763a239a081f53099e2d839c60fd8f476d9775fe021e6c/telnyx-1.0.0b3.tar.gz", "yanked": false}], "1.0.0b4": [{"comment_text": "", "digests": {"md5": "674ef09c05997af6ef315ab011e0a718", "sha256": "d56a2e4ba3beae38a03a942736c92dbd1885fbeca0fa6444059174e2022c846e"}, "downloads": -1, "filename": "telnyx-1.0.0b4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "674ef09c05997af6ef315ab011e0a718", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 46996, "upload_time": "2020-04-02T09:48:05", "upload_time_iso_8601": "2020-04-02T09:48:05.958717Z", "url": "https://files.pythonhosted.org/packages/c4/f6/76aaf92b88ab749332bb9fb11635344d0402d46300c5211ceb4017b882bd/telnyx-1.0.0b4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3033bdd1c543efa9c6def929cb6d3ee9", "sha256": "08f5f38e6fb6fd9aa940c37c17c6484b26b0060aa69fc2b603e9b207b56672f3"}, "downloads": -1, "filename": "telnyx-1.0.0b4.tar.gz", "has_sig": false, "md5_digest": "3033bdd1c543efa9c6def929cb6d3ee9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 60134, "upload_time": "2020-04-02T09:48:08", "upload_time_iso_8601": "2020-04-02T09:48:08.201653Z", "url": "https://files.pythonhosted.org/packages/1f/c0/a1bd96a6b4a9f3392a460bf2bdfdd293ca43f831f692d9d048bec2040463/telnyx-1.0.0b4.tar.gz", "yanked": false}], "1.0.0b5": [{"comment_text": "", "digests": {"md5": "e41101c5cdbbaae1a68fa31953563bbd", "sha256": "31b9e063b2008421528066e1ef4507ab74d1e8ad17ba60111640de06750d0db2"}, "downloads": -1, "filename": "telnyx-1.0.0b5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e41101c5cdbbaae1a68fa31953563bbd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 51884, "upload_time": "2020-04-10T14:32:18", "upload_time_iso_8601": "2020-04-10T14:32:18.350769Z", "url": "https://files.pythonhosted.org/packages/bb/be/bf6eba48b681edad37492785927919b752950bec3e6478e20ee206cf7b63/telnyx-1.0.0b5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a26509d54d6147ce88591523bb5b989", "sha256": "2084bcf510d316910388f45d8b835b5db028fa2beffb86c8536c0c2bbebc039b"}, "downloads": -1, "filename": "telnyx-1.0.0b5.tar.gz", "has_sig": false, "md5_digest": "4a26509d54d6147ce88591523bb5b989", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 65421, "upload_time": "2020-04-10T14:32:20", "upload_time_iso_8601": "2020-04-10T14:32:20.619447Z", "url": "https://files.pythonhosted.org/packages/f7/15/c5442337faa298f45c0f3568d80c2af46928535994b48e8f7cf6af095745/telnyx-1.0.0b5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e41101c5cdbbaae1a68fa31953563bbd", "sha256": "31b9e063b2008421528066e1ef4507ab74d1e8ad17ba60111640de06750d0db2"}, "downloads": -1, "filename": "telnyx-1.0.0b5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e41101c5cdbbaae1a68fa31953563bbd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 51884, "upload_time": "2020-04-10T14:32:18", "upload_time_iso_8601": "2020-04-10T14:32:18.350769Z", "url": "https://files.pythonhosted.org/packages/bb/be/bf6eba48b681edad37492785927919b752950bec3e6478e20ee206cf7b63/telnyx-1.0.0b5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a26509d54d6147ce88591523bb5b989", "sha256": "2084bcf510d316910388f45d8b835b5db028fa2beffb86c8536c0c2bbebc039b"}, "downloads": -1, "filename": "telnyx-1.0.0b5.tar.gz", "has_sig": false, "md5_digest": "4a26509d54d6147ce88591523bb5b989", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 65421, "upload_time": "2020-04-10T14:32:20", "upload_time_iso_8601": "2020-04-10T14:32:20.619447Z", "url": "https://files.pythonhosted.org/packages/f7/15/c5442337faa298f45c0f3568d80c2af46928535994b48e8f7cf6af095745/telnyx-1.0.0b5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:49 2020"}