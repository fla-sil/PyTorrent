{"info": {"author": "Matt Pryor", "author_email": "matt.pryor@stfc.ac.uk", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "# django-flexi-settings\n\nPackage that allows flexible settings configuration for Django projects.\n\n## Installation\n\nInstall directly from GitHub:\n\n```sh\npip install git+https://github.com/cedadev/django-flexi-settings.git\n```\n\n## Usage\n\n### Using the include functions\n\n`django-flexi-settings` provides two functions that can be used to include settings\nfrom other files in your `settings.py`:\n\n```python\n# my_site/settings.py\n\nINSTALLED_APPS = ['app1', '...']\n\n# ... Other settings ...\n\n# Use flexible settings utilities to include settings from other files\nfrom flexible_settings import include, include_dir\n\n# Include a file with one of the supported extensions\n# Python files DO NOT have to be on the PYTHONPATH\ninclude('/path/to/pythonfile.py')\ninclude('/path/to/pythonfile.conf')  # This is also treated as python\ninclude('/path/to/yamlfile.yaml')\ninclude('/path/to/jsonfile.json')\n\n# Or include a whole directory\n# The files are included in lexicographical order, so to control ordering you\n# might name the files 01-somesettings.py, 02-moresettings.yaml, etc.\ninclude_dir('/path/to/config/directory')\n```\n\nIf the included files are Python, they can modify existing variables:\n\n```python\n# /path/to/pythonfile.py\n\nINSTALLED_APPS += ['extra_app1', 'extra_app2']\n```\n\nFor YAML and JSON files, keys are normalised and dictionaries are merged in the\nresulting settings, e.g. for these two YAML files:\n\n```yaml\n# /path/to/yamlfile1.yaml\nSETTING_1: setting1\nDICT_SETTING:\n  KEY1: value1\n  KEY2: value2\n\n# /path/to/yamlfile2.yaml\ndictSetting:\n  key1: overridden\n  key3: value3\n```\n\nthe resulting settings would be:\n\n```python\nSETTING_1 = \"setting1\"\nDICT_SETTING = {\n    \"KEY1\": \"overridden\",\n    \"KEY2\": \"value2\",\n    \"KEY3\": \"value3\"\n}\n```\n\n### Using the settings module\n\nIn the case where your settings are defined in a file that isn't on the `PYTHONPATH`,\n`django-flexi-settings` provides a module that can be used as the `DJANGO_SETTINGS_MODULE`.\nThis module respects the value of an environment variable, `DJANGO_FLEXI_SETTINGS_ROOT`,\nthat determines the settings file to include. It defaults to `/etc/django/settings.py`.\n\n```bash\nexport DJANGO_FLEXI_SETTINGS_ROOT=\"/etc/myapp/settings.py\"\nexport DJANGO_SETTINGS_MODULE=\"flexi_settings.settings\"\n```\n\nIf the file specified in `DJANGO_FLEXI_SETTINGS_ROOT` is a Python file, it can then use the\n`include` and `include_dir` functions to include other settings if desired. For example,\nthe following file could be used as `DJANGO_FLEXI_SETTINGS_ROOT` to allow drop-in changes to\nsettings by placing additional files in a `settings.d` directory:\n\n```python\nfrom pathlib import Path\nfrom flexi_settings import include_dir\ninclude_dir(Path(__file__).resolve().parent / 'settings.d')\n```\n\nThis makes for a very flexible configuration system for Django that is not application-specific.\n\n## Adding additional loaders\n\n`django-flexi-settings` makes adding new loaders for additional file types very easy.\n\nA loader in `django-flexi-settings` is just a function that takes a file path and a settings\ndictionary and modifies the settings dictionary in a way consistent with the specified file.\n**Note that the existing dictionary is modified, not a new dictionary returned.** Please refer\nto the built-in loaders.\n\nTo declare the extensions for which the additional loader is valid, add an `extensions` property\nto the loader function:\n\n```python\ndef load_ini(path, settings):\n    # ... Do something with path and settings ...\n\nload_ini.extensions = { '.ini' }\n```\n\nTo register the loader with `django-flexi-settings`, use the entry point:\n\n```python\n# mypackage/setup.py\n\nfrom setuptools import setup\n\nif __name__ == \"__main__\":\n    setup(\n        # ... Other setup, e.g. name, requires\n        entry_points = {\n            'flexi_settings.loaders': [\n                'ini = mypackage.flexi_settings:load_ini',\n            ]\n        }\n    )\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cedadev/django-flexi-settings", "keywords": "django flexible settings", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-flexi-settings", "package_url": "https://pypi.org/project/django-flexi-settings/", "platform": "", "project_url": "https://pypi.org/project/django-flexi-settings/", "project_urls": {"Homepage": "https://github.com/cedadev/django-flexi-settings"}, "release_url": "https://pypi.org/project/django-flexi-settings/0.1.1/", "requires_dist": ["pyyaml"], "requires_python": "", "summary": "Utilities for flexible configuration for Django.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-flexi-settings</h1>\n<p>Package that allows flexible settings configuration for Django projects.</p>\n<h2>Installation</h2>\n<p>Install directly from GitHub:</p>\n<pre>pip install git+https://github.com/cedadev/django-flexi-settings.git\n</pre>\n<h2>Usage</h2>\n<h3>Using the include functions</h3>\n<p><code>django-flexi-settings</code> provides two functions that can be used to include settings\nfrom other files in your <code>settings.py</code>:</p>\n<pre><span class=\"c1\"># my_site/settings.py</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'app1'</span><span class=\"p\">,</span> <span class=\"s1\">'...'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># ... Other settings ...</span>\n\n<span class=\"c1\"># Use flexible settings utilities to include settings from other files</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flexible_settings</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">include_dir</span>\n\n<span class=\"c1\"># Include a file with one of the supported extensions</span>\n<span class=\"c1\"># Python files DO NOT have to be on the PYTHONPATH</span>\n<span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/pythonfile.py'</span><span class=\"p\">)</span>\n<span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/pythonfile.conf'</span><span class=\"p\">)</span>  <span class=\"c1\"># This is also treated as python</span>\n<span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/yamlfile.yaml'</span><span class=\"p\">)</span>\n<span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/jsonfile.json'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or include a whole directory</span>\n<span class=\"c1\"># The files are included in lexicographical order, so to control ordering you</span>\n<span class=\"c1\"># might name the files 01-somesettings.py, 02-moresettings.yaml, etc.</span>\n<span class=\"n\">include_dir</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/config/directory'</span><span class=\"p\">)</span>\n</pre>\n<p>If the included files are Python, they can modify existing variables:</p>\n<pre><span class=\"c1\"># /path/to/pythonfile.py</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">'extra_app1'</span><span class=\"p\">,</span> <span class=\"s1\">'extra_app2'</span><span class=\"p\">]</span>\n</pre>\n<p>For YAML and JSON files, keys are normalised and dictionaries are merged in the\nresulting settings, e.g. for these two YAML files:</p>\n<pre><span class=\"c1\"># /path/to/yamlfile1.yaml</span>\n<span class=\"nt\">SETTING_1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">setting1</span>\n<span class=\"nt\">DICT_SETTING</span><span class=\"p\">:</span>\n  <span class=\"nt\">KEY1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">value1</span>\n  <span class=\"nt\">KEY2</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">value2</span>\n\n<span class=\"c1\"># /path/to/yamlfile2.yaml</span>\n<span class=\"nt\">dictSetting</span><span class=\"p\">:</span>\n  <span class=\"nt\">key1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">overridden</span>\n  <span class=\"nt\">key3</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">value3</span>\n</pre>\n<p>the resulting settings would be:</p>\n<pre><span class=\"n\">SETTING_1</span> <span class=\"o\">=</span> <span class=\"s2\">\"setting1\"</span>\n<span class=\"n\">DICT_SETTING</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"KEY1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"overridden\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"KEY2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value2\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"KEY3\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value3\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Using the settings module</h3>\n<p>In the case where your settings are defined in a file that isn't on the <code>PYTHONPATH</code>,\n<code>django-flexi-settings</code> provides a module that can be used as the <code>DJANGO_SETTINGS_MODULE</code>.\nThis module respects the value of an environment variable, <code>DJANGO_FLEXI_SETTINGS_ROOT</code>,\nthat determines the settings file to include. It defaults to <code>/etc/django/settings.py</code>.</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">DJANGO_FLEXI_SETTINGS_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"/etc/myapp/settings.py\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">DJANGO_SETTINGS_MODULE</span><span class=\"o\">=</span><span class=\"s2\">\"flexi_settings.settings\"</span>\n</pre>\n<p>If the file specified in <code>DJANGO_FLEXI_SETTINGS_ROOT</code> is a Python file, it can then use the\n<code>include</code> and <code>include_dir</code> functions to include other settings if desired. For example,\nthe following file could be used as <code>DJANGO_FLEXI_SETTINGS_ROOT</code> to allow drop-in changes to\nsettings by placing additional files in a <code>settings.d</code> directory:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flexi_settings</span> <span class=\"kn\">import</span> <span class=\"n\">include_dir</span>\n<span class=\"n\">include_dir</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"s1\">'settings.d'</span><span class=\"p\">)</span>\n</pre>\n<p>This makes for a very flexible configuration system for Django that is not application-specific.</p>\n<h2>Adding additional loaders</h2>\n<p><code>django-flexi-settings</code> makes adding new loaders for additional file types very easy.</p>\n<p>A loader in <code>django-flexi-settings</code> is just a function that takes a file path and a settings\ndictionary and modifies the settings dictionary in a way consistent with the specified file.\n<strong>Note that the existing dictionary is modified, not a new dictionary returned.</strong> Please refer\nto the built-in loaders.</p>\n<p>To declare the extensions for which the additional loader is valid, add an <code>extensions</code> property\nto the loader function:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">load_ini</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ... Do something with path and settings ...</span>\n\n<span class=\"n\">load_ini</span><span class=\"o\">.</span><span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'.ini'</span> <span class=\"p\">}</span>\n</pre>\n<p>To register the loader with <code>django-flexi-settings</code>, use the entry point:</p>\n<pre><span class=\"c1\"># mypackage/setup.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">setup</span><span class=\"p\">(</span>\n        <span class=\"c1\"># ... Other setup, e.g. name, requires</span>\n        <span class=\"n\">entry_points</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'flexi_settings.loaders'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s1\">'ini = mypackage.flexi_settings:load_ini'</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6732638, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9ab2a02f27376c964ff8b294e1f61a63", "sha256": "375bc5ba4086e66239c91f11d9d78ebb39757b0b4b386c39a7c30ebaeb18e68b"}, "downloads": -1, "filename": "django_flexi_settings-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9ab2a02f27376c964ff8b294e1f61a63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5154, "upload_time": "2020-02-21T11:00:33", "upload_time_iso_8601": "2020-02-21T11:00:33.710382Z", "url": "https://files.pythonhosted.org/packages/cc/af/141d74ac63362890597b5b5b9ec4ffa909511140ed63e6e5fb6353ab6b47/django_flexi_settings-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e72879da41f112637e394b5c2a3cae2e", "sha256": "d949ec131dee1a77984f725adebc4760b24c71151f20a0ff6beeabe53216e404"}, "downloads": -1, "filename": "django-flexi-settings-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e72879da41f112637e394b5c2a3cae2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4805, "upload_time": "2020-02-21T11:00:35", "upload_time_iso_8601": "2020-02-21T11:00:35.997117Z", "url": "https://files.pythonhosted.org/packages/f3/fc/5101f338cd646acc891af1fae8fd6ae4bb269be1659df4f0fbe03735c4d1/django-flexi-settings-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c965cf0412f0f4752ef86688ee47262d", "sha256": "69f044617aabe8d3db90d975bd6b6bd504a6a0dc18cbf83a31a4484a0b4c5bb1"}, "downloads": -1, "filename": "django_flexi_settings-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c965cf0412f0f4752ef86688ee47262d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4993, "upload_time": "2020-03-02T10:59:53", "upload_time_iso_8601": "2020-03-02T10:59:53.002684Z", "url": "https://files.pythonhosted.org/packages/30/d5/1593751481b75953ab925ad5c917938df486c77db9e5634c2419dee838d2/django_flexi_settings-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9065c89a33838a1a09bd0a7c7753ddb", "sha256": "f53b4309d72891e240093e44b16662675d2ccb5b3a7351a58cadf39826ad1cd5"}, "downloads": -1, "filename": "django-flexi-settings-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c9065c89a33838a1a09bd0a7c7753ddb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4645, "upload_time": "2020-03-02T10:59:54", "upload_time_iso_8601": "2020-03-02T10:59:54.284848Z", "url": "https://files.pythonhosted.org/packages/17/fd/a567e3306647968642b839c1ff5639e7d89d422d44071708c269a9832e57/django-flexi-settings-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c965cf0412f0f4752ef86688ee47262d", "sha256": "69f044617aabe8d3db90d975bd6b6bd504a6a0dc18cbf83a31a4484a0b4c5bb1"}, "downloads": -1, "filename": "django_flexi_settings-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c965cf0412f0f4752ef86688ee47262d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4993, "upload_time": "2020-03-02T10:59:53", "upload_time_iso_8601": "2020-03-02T10:59:53.002684Z", "url": "https://files.pythonhosted.org/packages/30/d5/1593751481b75953ab925ad5c917938df486c77db9e5634c2419dee838d2/django_flexi_settings-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9065c89a33838a1a09bd0a7c7753ddb", "sha256": "f53b4309d72891e240093e44b16662675d2ccb5b3a7351a58cadf39826ad1cd5"}, "downloads": -1, "filename": "django-flexi-settings-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c9065c89a33838a1a09bd0a7c7753ddb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4645, "upload_time": "2020-03-02T10:59:54", "upload_time_iso_8601": "2020-03-02T10:59:54.284848Z", "url": "https://files.pythonhosted.org/packages/17/fd/a567e3306647968642b839c1ff5639e7d89d422d44071708c269a9832e57/django-flexi-settings-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:05 2020"}