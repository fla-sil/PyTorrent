{"info": {"author": "Ben van Werkhoven", "author_email": "b.vanwerkhoven@esciencecenter.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development", "Topic :: System :: Distributed Computing"], "description": "Kernel Tuner\n============\n\n|Build Status| |CodeCov Badge| |PyPi Badge|\n\nKernel Tuner simplifies the software development of optimized and auto-tuned GPU programs, by enabling Python-based unit testing of GPU code and making it easy to develop scripts for auto-tuning GPU kernels. This also means no extensive changes and no new dependencies are required in the kernel code. The kernels can still be compiled and used as normal from any host programming language.\n\nKernel Tuner provides a comprehensive solution for auto-tuning GPU programs, supporting auto-tuning of user-defined parameters in both host and device code, supporting output verification of all benchmarked kernels during tuning, as well as many optimization strategies to speed up the tuning process.\n\nDocumentation\n-------------\n\nThe full documentation is available\n`here <http://benvanwerkhoven.github.io/kernel_tuner/index.html>`__.\n\nInstallation\n------------\n\nThe easiest way to install the Kernel Tuner is using pip:\n\nTo tune CUDA kernels:\n\n- First, make sure you have the `CUDA Toolkit <https://developer.nvidia.com/cuda-toolkit>`_ installed\n- Then type: ``pip install kernel_tuner[cuda]``\n\nTo tune OpenCL kernels:\n\n- First, make sure you have an OpenCL compiler for your intended OpenCL platform\n- Then type: ``pip install kernel_tuner[opencl]``\n\nOr both:\n\n- ``pip install kernel_tuner[cuda,opencl]``\n\nMore information about how to install Kernel Tuner and its\ndependencies can be found in the `installation guide \n<http://benvanwerkhoven.github.io/kernel_tuner/install.html>`__\n\nExample usage\n-------------\n\nThe following shows a simple example for tuning a CUDA kernel:\n\n.. code:: python\n\n    kernel_string = \"\"\"\n    __global__ void vector_add(float *c, float *a, float *b, int n) {\n        int i = blockIdx.x * block_size_x + threadIdx.x;\n        if (i<n) {\n            c[i] = a[i] + b[i];\n        }\n    }\n    \"\"\"\n\n    size = 10000000\n\n    a = numpy.random.randn(size).astype(numpy.float32)\n    b = numpy.random.randn(size).astype(numpy.float32)\n    c = numpy.zeros_like(b)\n    n = numpy.int32(size)\n    args = [c, a, b, n]\n\n    tune_params = dict()\n    tune_params[\"block_size_x\"] = [32, 64, 128, 256, 512]\n\n    tune_kernel(\"vector_add\", kernel_string, size, args, tune_params)\n\nThe exact same Python code can be used to tune an OpenCL kernel:\n\n.. code:: python\n\n    kernel_string = \"\"\"\n    __kernel void vector_add(__global float *c, __global float *a, __global float *b, int n) {\n        int i = get_global_id(0);\n        if (i<n) {\n            c[i] = a[i] + b[i];\n        }\n    }\n    \"\"\"\n\nThe Kernel Tuner will detect the kernel language and select the right compiler and \nruntime. For every kernel in the parameter space, the Kernel Tuner will insert C \npreprocessor defines for the tunable parameters, compile, and benchmark the kernel. The \ntiming results will be printed to the console, but are also returned by tune_kernel to \nallow further analysis. Note that this is just the default behavior, what and how \ntune_kernel does exactly is controlled through its many `optional arguments \n<http://benvanwerkhoven.github.io/kernel_tuner/user-api.html#kernel_tuner.tune_kernel>`__.\n\nYou can find many - more extensive - example codes, in the\n`examples directory <https://github.com/benvanwerkhoven/kernel_tuner/blob/master/examples/>`__\nand in the `Kernel Tuner\ndocumentation pages <http://benvanwerkhoven.github.io/kernel_tuner/index.html>`__.\n\nSearch strategies for tuning\n----------------------------\n\nKernel Tuner supports many optimization algorithms to accelerate the auto-tuning process. Currently \nimplemented search algorithms are: Brute Force (default), Nelder-Mead, Powell, CG, BFGS, L-BFGS-B, TNC, \nCOBYLA, SLSQP, Random Search, Basinhopping, Differential Evolution, a Genetic Algorithm, Particle Swarm \nOptimization, the Firefly Algorithm, and Simulated Annealing.\n\n.. image:: doc/gemm-amd-summary.png\n    :width: 100%\n    :align: center\n\nUsing a search strategy is easy, you only need to specify to ``tune_kernel`` which strategy and method \nyou would like to use, for example ``strategy=\"genetic_algorithm\"`` or ``strategy=\"basinhopping\"``. \nFor a full overview of the supported search strategies and methods please see the `user \napi documentation <http://benvanwerkhoven.github.io/kernel_tuner/user-api.html>`__.\n\nTuning host and kernel code\n---------------------------\n\nIt is possible to tune for combinations of tunable parameters in\nboth host and kernel code. This allows for a number of powerfull things,\nsuch as tuning the number of streams for a kernel that uses CUDA Streams\nor OpenCL Command Queues to overlap transfers between host and device\nwith kernel execution. This can be done in combination with tuning the\nparameters inside the kernel code. See the `convolution\\_streams example\ncode <https://github.com/benvanwerkhoven/kernel_tuner/blob/master/examples/>`__\nand the\n`documentation <http://benvanwerkhoven.github.io/kernel_tuner/hostcode.html>`__\nfor a detailed explanation of the kernel tuner Python script.\n\n\nCorrectness verification\n------------------------\n\nOptionally, you can let the kernel tuner verify the output of every\nkernel it compiles and benchmarks, by passing an ``answer`` list. This\nlist matches the list of arguments to the kernel, but contains the\nexpected output of the kernel. Input arguments are replaced with None.\n\n.. code:: python\n\n    answer = [a+b, None, None]  # the order matches the arguments (in args) to the kernel\n    tune_kernel(\"vector_add\", kernel_string, size, args, tune_params, answer=answer)\n\nContributing\n------------\n\nPlease see the `Contributions Guide <http://benvanwerkhoven.github.io/kernel_tuner/contributing.html>`__.\n\nCitation\n--------\nThe paper about `Kernel Tuner is published (Open Access) <https://www.sciencedirect.com/science/article/pii/S0167739X18313359>`__, please cite\nKernel Tuner as follows:\n\n.. code:: latex\n\n    @article{kerneltuner,\n      author  = {Ben van Werkhoven},\n      title   = {Kernel Tuner: A search-optimizing GPU code auto-tuner},\n      journal = {Future Generation Computer Systems},\n      year = {2019},\n      volume  = {90},\n      pages = {347-358},\n      doi = {https://doi.org/10.1016/j.future.2018.08.004},\n    }\n\nRelated work\n------------\n\nYou may also like `CLTune <https://github.com/CNugteren/CLTune>`__ by\nCedric Nugteren. CLTune is a C++ library for kernel tuning.\n\n.. |Build Status| image:: https://api.travis-ci.org/benvanwerkhoven/kernel_tuner.svg?branch=master\n   :target: https://travis-ci.org/benvanwerkhoven/kernel_tuner\n.. |CodeCov Badge| image:: https://codecov.io/gh/benvanwerkhoven/kernel_tuner/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/benvanwerkhoven/kernel_tuner\n.. |PyPi Badge| image:: https://img.shields.io/pypi/v/kernel_tuner.svg?colorB=blue \n   :target: https://pypi.python.org/pypi/kernel_tuner/\n\n\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://benvanwerkhoven.github.io/kernel_tuner/", "keywords": "auto-tuning gpu computing pycuda cuda pyopencl opencl", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "kernel_tuner", "package_url": "https://pypi.org/project/kernel_tuner/", "platform": "", "project_url": "https://pypi.org/project/kernel_tuner/", "project_urls": {"Homepage": "http://benvanwerkhoven.github.io/kernel_tuner/"}, "release_url": "https://pypi.org/project/kernel_tuner/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "An easy to use CUDA/OpenCL kernel tuner in Python", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/benvanwerkhoven/kernel_tuner\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa89132a62bc6463541fca04a77778a0228b26fd/68747470733a2f2f6170692e7472617669732d63692e6f72672f62656e76616e7765726b686f76656e2f6b65726e656c5f74756e65722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/benvanwerkhoven/kernel_tuner\" rel=\"nofollow\"><img alt=\"CodeCov Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9691c2913c0eb1bd988d2510bce4de0fd0c71f53/68747470733a2f2f636f6465636f762e696f2f67682f62656e76616e7765726b686f76656e2f6b65726e656c5f74756e65722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/kernel_tuner/\" rel=\"nofollow\"><img alt=\"PyPi Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5eedb17c7efed2a2bcef16f17d57567da5da1e18/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b65726e656c5f74756e65722e7376673f636f6c6f72423d626c7565\"></a></p>\n<p>Kernel Tuner simplifies the software development of optimized and auto-tuned GPU programs, by enabling Python-based unit testing of GPU code and making it easy to develop scripts for auto-tuning GPU kernels. This also means no extensive changes and no new dependencies are required in the kernel code. The kernels can still be compiled and used as normal from any host programming language.</p>\n<p>Kernel Tuner provides a comprehensive solution for auto-tuning GPU programs, supporting auto-tuning of user-defined parameters in both host and device code, supporting output verification of all benchmarked kernels during tuning, as well as many optimization strategies to speed up the tuning process.</p>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The full documentation is available\n<a href=\"http://benvanwerkhoven.github.io/kernel_tuner/index.html\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The easiest way to install the Kernel Tuner is using pip:</p>\n<p>To tune CUDA kernels:</p>\n<ul>\n<li>First, make sure you have the <a href=\"https://developer.nvidia.com/cuda-toolkit\" rel=\"nofollow\">CUDA Toolkit</a> installed</li>\n<li>Then type: <tt>pip install kernel_tuner[cuda]</tt></li>\n</ul>\n<p>To tune OpenCL kernels:</p>\n<ul>\n<li>First, make sure you have an OpenCL compiler for your intended OpenCL platform</li>\n<li>Then type: <tt>pip install kernel_tuner[opencl]</tt></li>\n</ul>\n<p>Or both:</p>\n<ul>\n<li><tt>pip install kernel_tuner[cuda,opencl]</tt></li>\n</ul>\n<p>More information about how to install Kernel Tuner and its\ndependencies can be found in the <a href=\"http://benvanwerkhoven.github.io/kernel_tuner/install.html\" rel=\"nofollow\">installation guide</a></p>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>The following shows a simple example for tuning a CUDA kernel:</p>\n<pre><span class=\"n\">kernel_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n__global__ void vector_add(float *c, float *a, float *b, int n) {\n    int i = blockIdx.x * block_size_x + threadIdx.x;\n    if (i&lt;n) {\n        c[i] = a[i] + b[i];\n    }\n}\n\"\"\"</span>\n\n<span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">10000000</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">]</span>\n\n<span class=\"n\">tune_params</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n<span class=\"n\">tune_params</span><span class=\"p\">[</span><span class=\"s2\">\"block_size_x\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">]</span>\n\n<span class=\"n\">tune_kernel</span><span class=\"p\">(</span><span class=\"s2\">\"vector_add\"</span><span class=\"p\">,</span> <span class=\"n\">kernel_string</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tune_params</span><span class=\"p\">)</span>\n</pre>\n<p>The exact same Python code can be used to tune an OpenCL kernel:</p>\n<pre><span class=\"n\">kernel_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n__kernel void vector_add(__global float *c, __global float *a, __global float *b, int n) {\n    int i = get_global_id(0);\n    if (i&lt;n) {\n        c[i] = a[i] + b[i];\n    }\n}\n\"\"\"</span>\n</pre>\n<p>The Kernel Tuner will detect the kernel language and select the right compiler and\nruntime. For every kernel in the parameter space, the Kernel Tuner will insert C\npreprocessor defines for the tunable parameters, compile, and benchmark the kernel. The\ntiming results will be printed to the console, but are also returned by tune_kernel to\nallow further analysis. Note that this is just the default behavior, what and how\ntune_kernel does exactly is controlled through its many <a href=\"http://benvanwerkhoven.github.io/kernel_tuner/user-api.html#kernel_tuner.tune_kernel\" rel=\"nofollow\">optional arguments</a>.</p>\n<p>You can find many - more extensive - example codes, in the\n<a href=\"https://github.com/benvanwerkhoven/kernel_tuner/blob/master/examples/\" rel=\"nofollow\">examples directory</a>\nand in the <a href=\"http://benvanwerkhoven.github.io/kernel_tuner/index.html\" rel=\"nofollow\">Kernel Tuner\ndocumentation pages</a>.</p>\n</div>\n<div id=\"search-strategies-for-tuning\">\n<h2>Search strategies for tuning</h2>\n<p>Kernel Tuner supports many optimization algorithms to accelerate the auto-tuning process. Currently\nimplemented search algorithms are: Brute Force (default), Nelder-Mead, Powell, CG, BFGS, L-BFGS-B, TNC,\nCOBYLA, SLSQP, Random Search, Basinhopping, Differential Evolution, a Genetic Algorithm, Particle Swarm\nOptimization, the Firefly Algorithm, and Simulated Annealing.</p>\n<img alt=\"doc/gemm-amd-summary.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43397946d7c3a35af0c41cdaa58d8cbad8733b56/646f632f67656d6d2d616d642d73756d6d6172792e706e67\" width=\"100%\">\n<p>Using a search strategy is easy, you only need to specify to <tt>tune_kernel</tt> which strategy and method\nyou would like to use, for example <tt><span class=\"pre\">strategy=\"genetic_algorithm\"</span></tt> or <tt><span class=\"pre\">strategy=\"basinhopping\"</span></tt>.\nFor a full overview of the supported search strategies and methods please see the <a href=\"http://benvanwerkhoven.github.io/kernel_tuner/user-api.html\" rel=\"nofollow\">user\napi documentation</a>.</p>\n</div>\n<div id=\"tuning-host-and-kernel-code\">\n<h2>Tuning host and kernel code</h2>\n<p>It is possible to tune for combinations of tunable parameters in\nboth host and kernel code. This allows for a number of powerfull things,\nsuch as tuning the number of streams for a kernel that uses CUDA Streams\nor OpenCL Command Queues to overlap transfers between host and device\nwith kernel execution. This can be done in combination with tuning the\nparameters inside the kernel code. See the <a href=\"https://github.com/benvanwerkhoven/kernel_tuner/blob/master/examples/\" rel=\"nofollow\">convolution_streams example\ncode</a>\nand the\n<a href=\"http://benvanwerkhoven.github.io/kernel_tuner/hostcode.html\" rel=\"nofollow\">documentation</a>\nfor a detailed explanation of the kernel tuner Python script.</p>\n</div>\n<div id=\"correctness-verification\">\n<h2>Correctness verification</h2>\n<p>Optionally, you can let the kernel tuner verify the output of every\nkernel it compiles and benchmarks, by passing an <tt>answer</tt> list. This\nlist matches the list of arguments to the kernel, but contains the\nexpected output of the kernel. Input arguments are replaced with None.</p>\n<pre><span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>  <span class=\"c1\"># the order matches the arguments (in args) to the kernel</span>\n<span class=\"n\">tune_kernel</span><span class=\"p\">(</span><span class=\"s2\">\"vector_add\"</span><span class=\"p\">,</span> <span class=\"n\">kernel_string</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tune_params</span><span class=\"p\">,</span> <span class=\"n\">answer</span><span class=\"o\">=</span><span class=\"n\">answer</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Please see the <a href=\"http://benvanwerkhoven.github.io/kernel_tuner/contributing.html\" rel=\"nofollow\">Contributions Guide</a>.</p>\n</div>\n<div id=\"citation\">\n<h2>Citation</h2>\n<p>The paper about <a href=\"https://www.sciencedirect.com/science/article/pii/S0167739X18313359\" rel=\"nofollow\">Kernel Tuner is published (Open Access)</a>, please cite\nKernel Tuner as follows:</p>\n<pre>@article<span class=\"nb\">{</span>kerneltuner,\n  author  = <span class=\"nb\">{</span>Ben van Werkhoven<span class=\"nb\">}</span>,\n  title   = <span class=\"nb\">{</span>Kernel Tuner: A search-optimizing GPU code auto-tuner<span class=\"nb\">}</span>,\n  journal = <span class=\"nb\">{</span>Future Generation Computer Systems<span class=\"nb\">}</span>,\n  year = <span class=\"nb\">{</span>2019<span class=\"nb\">}</span>,\n  volume  = <span class=\"nb\">{</span>90<span class=\"nb\">}</span>,\n  pages = <span class=\"nb\">{</span>347-358<span class=\"nb\">}</span>,\n  doi = <span class=\"nb\">{</span>https://doi.org/10.1016/j.future.2018.08.004<span class=\"nb\">}</span>,\n<span class=\"nb\">}</span>\n</pre>\n</div>\n<div id=\"related-work\">\n<h2>Related work</h2>\n<p>You may also like <a href=\"https://github.com/CNugteren/CLTune\" rel=\"nofollow\">CLTune</a> by\nCedric Nugteren. CLTune is a C++ library for kernel tuning.</p>\n</div>\n\n          </div>"}, "last_serial": 6628965, "releases": {"0.1.0": [], "0.1.0b0": [{"comment_text": "", "digests": {"md5": "cfc99037fde95aa9e33c97efa79e5066", "sha256": "b49aedb068ce58110b5ba4629703d7b388de3d18a5fc62a2a5c7dd09de2768dc"}, "downloads": -1, "filename": "kernel_tuner-0.1.0b0.tar.gz", "has_sig": false, "md5_digest": "cfc99037fde95aa9e33c97efa79e5066", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24741, "upload_time": "2016-11-02T13:03:50", "upload_time_iso_8601": "2016-11-02T13:03:50.808875Z", "url": "https://files.pythonhosted.org/packages/a8/d9/ddad9bed30d7571d96286f1619ea5254c2c37823061bb6573a2af3a36ab4/kernel_tuner-0.1.0b0.tar.gz", "yanked": false}], "0.1.0rc0": [{"comment_text": "", "digests": {"md5": "8079ac1c105fb0f76a5ae8fc85942349", "sha256": "1e138b5a7c9fc015eecd74cf05a8ce2585a1449c38d0ac9b41bd25fe49a9b999"}, "downloads": -1, "filename": "kernel_tuner-0.1.0rc0.tar.gz", "has_sig": false, "md5_digest": "8079ac1c105fb0f76a5ae8fc85942349", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24747, "upload_time": "2016-11-08T10:39:48", "upload_time_iso_8601": "2016-11-08T10:39:48.425412Z", "url": "https://files.pythonhosted.org/packages/50/d5/4ebd950cc0adf36690c8d1a6f30b269f5e59e0d97be9902c49ee188681dd/kernel_tuner-0.1.0rc0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "28a9f91ca564fee186076d37d361e3c6", "sha256": "df1988f78c47023e6743a4619b75ffe53aba858310daa9c54f001a20f3f32925"}, "downloads": -1, "filename": "kernel_tuner-0.1.1.tar.gz", "has_sig": false, "md5_digest": "28a9f91ca564fee186076d37d361e3c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24822, "upload_time": "2017-02-10T07:44:41", "upload_time_iso_8601": "2017-02-10T07:44:41.923879Z", "url": "https://files.pythonhosted.org/packages/f5/6f/d4b751004297727d6244e29d651f40d6b91b8459c2b1b5b761936ba0037a/kernel_tuner-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "795eafb07aeadc2e9702cebffdd53803", "sha256": "9d0d6d084a29a73fb5e45284ab74c30e9784a3958717f7f6b261163826163dc9"}, "downloads": -1, "filename": "kernel_tuner-0.1.2.tar.gz", "has_sig": false, "md5_digest": "795eafb07aeadc2e9702cebffdd53803", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26761, "upload_time": "2017-03-29T07:03:12", "upload_time_iso_8601": "2017-03-29T07:03:12.516604Z", "url": "https://files.pythonhosted.org/packages/b7/94/684fe811444f2d3c2e48b158334881117a25b0adc66b9a971b5f53fa52c4/kernel_tuner-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c4419c0fc352a137b30b6da5fbbd510b", "sha256": "db8779c4d3e41233347cb62205f76958633ff64357d7578a69aa2554bdda10d0"}, "downloads": -1, "filename": "kernel_tuner-0.1.3.tar.gz", "has_sig": false, "md5_digest": "c4419c0fc352a137b30b6da5fbbd510b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26137, "upload_time": "2017-04-06T14:00:15", "upload_time_iso_8601": "2017-04-06T14:00:15.719961Z", "url": "https://files.pythonhosted.org/packages/5d/80/c70164a514d4df90732b300a78122df2f9a4599d7729646e12d5f80f1229/kernel_tuner-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a47cea640eca64052527d8069d9f8161", "sha256": "b180f8700b3ed0076d460cbd2002844eda48c7b22491b390d4941d18e03bae22"}, "downloads": -1, "filename": "kernel_tuner-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a47cea640eca64052527d8069d9f8161", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27398, "upload_time": "2017-06-14T09:26:25", "upload_time_iso_8601": "2017-06-14T09:26:25.821559Z", "url": "https://files.pythonhosted.org/packages/e1/e1/0f223133bd5ff2276f3a59781a45c3e1267358e9d6b82f5829189bdba94b/kernel_tuner-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "ed6e20cda8156668328d37f207065307", "sha256": "373cdfc950ace19a0b7a3c68aee168f8692418ddc1dc89cc993d09e085ac65cb"}, "downloads": -1, "filename": "kernel_tuner-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ed6e20cda8156668328d37f207065307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34856, "upload_time": "2017-07-21T14:02:21", "upload_time_iso_8601": "2017-07-21T14:02:21.774261Z", "url": "https://files.pythonhosted.org/packages/87/06/643eb90b788ab91afa98571ba5babd1759279003d69c702c6a50403e8390/kernel_tuner-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "373c9aa7bb34b9ee4ab74cd9e5d234dc", "sha256": "02aa880be45fb2fdbded26f4e215d27949130711830065326d5800d37ef34600"}, "downloads": -1, "filename": "kernel_tuner-0.1.6.tar.gz", "has_sig": false, "md5_digest": "373c9aa7bb34b9ee4ab74cd9e5d234dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39607, "upload_time": "2017-08-24T13:23:57", "upload_time_iso_8601": "2017-08-24T13:23:57.613810Z", "url": "https://files.pythonhosted.org/packages/7b/df/0a05fff5167531d282997e6623878768f7b9aa78a27110e0a4b2ac6fb3ef/kernel_tuner-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "13ddb6a09eb32eb78b3e23f721d89207", "sha256": "77756ef3bd19fb67b035263e4b9908b12701eba7cf78a80337df06a4a03824f9"}, "downloads": -1, "filename": "kernel_tuner-0.1.7.tar.gz", "has_sig": false, "md5_digest": "13ddb6a09eb32eb78b3e23f721d89207", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39869, "upload_time": "2017-11-10T14:50:40", "upload_time_iso_8601": "2017-11-10T14:50:40.414229Z", "url": "https://files.pythonhosted.org/packages/83/9a/5963d1e905ce53a77fb36aac2dc8025d0699bf28b4c4ccb69861b9d88f1a/kernel_tuner-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "634d77b20a8c1f2c33ed345f71cdb87a", "sha256": "42f0ccb2b694ce3b562322ff40f9ff924a9ccfe88e76ef8aa9e83209940c1ee3"}, "downloads": -1, "filename": "kernel_tuner-0.1.8.tar.gz", "has_sig": false, "md5_digest": "634d77b20a8c1f2c33ed345f71cdb87a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44251, "upload_time": "2017-11-23T21:02:14", "upload_time_iso_8601": "2017-11-23T21:02:14.872407Z", "url": "https://files.pythonhosted.org/packages/53/0b/939814fc66eabe52cac7ea880176aa6a7fbf428aa5bb8e9079b116cd9c7f/kernel_tuner-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "4033037a28f82fe349815df37d2819fd", "sha256": "8dd5401f34722e1943cf1f8b26fd119d305c6ee4619dcb04de5bd1b16777d5e8"}, "downloads": -1, "filename": "kernel_tuner-0.1.9.tar.gz", "has_sig": false, "md5_digest": "4033037a28f82fe349815df37d2819fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45961, "upload_time": "2018-04-18T10:11:36", "upload_time_iso_8601": "2018-04-18T10:11:36.803929Z", "url": "https://files.pythonhosted.org/packages/dd/b2/5f3e54ac4af9d52403cdb8c668296a967b1ab76bdd112d56e24be0d99489/kernel_tuner-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "24689f7d9500c1daaacd2df8256043ab", "sha256": "7f8af89e0876b69f7dc49b117fa070b988f4975bbff22c68072d6d2be0f593c1"}, "downloads": -1, "filename": "kernel_tuner-0.2.0.tar.gz", "has_sig": false, "md5_digest": "24689f7d9500c1daaacd2df8256043ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50138, "upload_time": "2018-11-16T16:18:24", "upload_time_iso_8601": "2018-11-16T16:18:24.470820Z", "url": "https://files.pythonhosted.org/packages/7a/87/e08c2928ef2124c8e7660588d6031bc924d4b4de7337fdb7846ed6ce60ce/kernel_tuner-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8997f25551f57eb94395fe15d831ea76", "sha256": "f3f40db48227fdc6020ed017cf79564a510935c3a5af94a611a2381d0608db18"}, "downloads": -1, "filename": "kernel_tuner-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8997f25551f57eb94395fe15d831ea76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58673, "upload_time": "2020-02-14T08:06:44", "upload_time_iso_8601": "2020-02-14T08:06:44.344167Z", "url": "https://files.pythonhosted.org/packages/57/32/2dfa1c357de12cb48f85be03706c27496d86af58505563b4bd164397a26e/kernel_tuner-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8997f25551f57eb94395fe15d831ea76", "sha256": "f3f40db48227fdc6020ed017cf79564a510935c3a5af94a611a2381d0608db18"}, "downloads": -1, "filename": "kernel_tuner-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8997f25551f57eb94395fe15d831ea76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58673, "upload_time": "2020-02-14T08:06:44", "upload_time_iso_8601": "2020-02-14T08:06:44.344167Z", "url": "https://files.pythonhosted.org/packages/57/32/2dfa1c357de12cb48f85be03706c27496d86af58505563b4bd164397a26e/kernel_tuner-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:05 2020"}