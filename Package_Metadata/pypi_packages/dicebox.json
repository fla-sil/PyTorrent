{"info": {"author": "Michael Tartre", "author_email": "michael@enkratic.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Other Audience", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Topic :: Games/Entertainment", "Topic :: Games/Entertainment :: Board Games", "Topic :: Games/Entertainment :: Role-Playing", "Topic :: Games/Entertainment :: Turn Based Strategy", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "<img src=\"https://raw.githubusercontent.com/quantology/dicebox/master/diceset.svg\" width=\"200\" height=\"200\">\n\n# dicebox\nA simple dsl for dice.\n\n\n```python\n>>> import pandas as pd\n>>> from dicebox import d\n```\n\n\n```\n>>> d(100) + 5\n<DiceExpr(1d100 + 5)>\n```\n\n\n\n```python\n>>> str(d(6) + d(6)) == str(d({6: 2})) == str(d(6, 6)) == \"(2d6)\"\nTrue\n```\n\n\n\n```\n>>> d(8, 6, 6, 6) // 2\n<DiceExpr((1d8 + 3d6) // 2)>\n```\n\n\n\n```\n>>> d({8: 1, 6: 3})\n<Dice(1d8 + 3d6)>\n```\n\n\n\n```\n>>> d(10) + 5 + (d(20) + d(8))\n<DiceExpr(1d10 + 5 + 1d8 + 1d20)>\n```\n\n\n\n\n```python\n>>> d(20).adv.roll(2)\narray([17, 17])\n```\n\n\n\n\n```python\n>>> n = 100000\n>>> adv = (pd.Series(d(20).adv.roll(n)).value_counts().sort_index() / n)\n>>> disadv = (pd.Series(d(20).disadv.roll(n)).value_counts().sort_index() / n)\n>>> norm = (pd.Series(d(20).roll(n)).value_counts().sort_index() / n)\n```\n\n\n\n\n\n```\n>>> (d(20).adv - d(20).disadv) * 2\n<DiceExpr((adv(1d20) - disadv(1d20)) * 2)>\n```\n\n\n\n**todo:**\n - [ ] pdist (incl composability)\n - [ ] roll logging\n - [ ] better expr collapse (sympy?)\n - [ ] better DiceExpr str rendering\n - [ ] DiceExpr.parse\n - [ ] visual output (w/ scavegr)\n\n---\n\n\n```python\n>>> from dicebox.dnd import attack_roll_factory, critical_roll\n>>> rapier_attack = attack_roll_factory(\"Rapier\", d(8) + 4, 3)\n>>> rapier_sneak_attack = attack_roll_factory(\"Rapier\", d(8, 6, 6, 6) + 4, 3)\n>>> rapier_assassinate_attack = attack_roll_factory(\"Rapier\", critical_roll(d(8, 6, 6, 6) + 4), 3, critical_hits=False)\n```\n\n\n```\n>>> for i in range(20):\n>>>    print(rapier_assassinate_attack(adv=True))\nRapier: 17 to hit (adv(1d20) + 3); 39 damage (2d8 + 6d6 + 4)\nRapier: 17 to hit (adv(1d20) + 3); 36 damage (2d8 + 6d6 + 4)\nRapier: 12 to hit (adv(1d20) + 3); 25 damage (2d8 + 6d6 + 4)\nRapier: 21 to hit (adv(1d20) + 3); 37 damage (2d8 + 6d6 + 4)\nRapier: 10 to hit (adv(1d20) + 3); 32 damage (2d8 + 6d6 + 4)\nRapier: 22 to hit (adv(1d20) + 3); 36 damage (2d8 + 6d6 + 4)\nRapier: 17 to hit (adv(1d20) + 3); 37 damage (2d8 + 6d6 + 4)\nRapier: 14 to hit (adv(1d20) + 3); 29 damage (2d8 + 6d6 + 4)\nRapier: 10 to hit (adv(1d20) + 3); 39 damage (2d8 + 6d6 + 4)\nRapier: 15 to hit (adv(1d20) + 3); 37 damage (2d8 + 6d6 + 4)\nRapier: 23 to hit (adv(1d20) + 3); 27 damage (2d8 + 6d6 + 4)\nRapier: 8 to hit (adv(1d20) + 3); 36 damage (2d8 + 6d6 + 4)\nRapier: 15 to hit (adv(1d20) + 3); 31 damage (2d8 + 6d6 + 4)\nRapier: 20 to hit (adv(1d20) + 3); 38 damage (2d8 + 6d6 + 4)\nRapier: 12 to hit (adv(1d20) + 3); 34 damage (2d8 + 6d6 + 4)\nRapier: 15 to hit (adv(1d20) + 3); 31 damage (2d8 + 6d6 + 4)\nRapier: 18 to hit (adv(1d20) + 3); 35 damage (2d8 + 6d6 + 4)\nRapier: 14 to hit (adv(1d20) + 3); 41 damage (2d8 + 6d6 + 4)\nRapier: 21 to hit (adv(1d20) + 3); 38 damage (2d8 + 6d6 + 4)\nRapier: 19 to hit (adv(1d20) + 3); 34 damage (2d8 + 6d6 + 4)\n```\n\n```\n>>> turn = [rapier_sneak_attack(), rapier_attack()]\n>>> print(\"\\n\".join(turn))\nRapier: 19 to hit (1d20 + 3); 9 damage (1d8 + 3d6 + 4)\nRapier: 9 to hit (1d20 + 3); 5 damage (1d8 + 4)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/quantology/dicebox", "keywords": "", "license": "bsd-3-clause", "maintainer": "", "maintainer_email": "", "name": "dicebox", "package_url": "https://pypi.org/project/dicebox/", "platform": "", "project_url": "https://pypi.org/project/dicebox/", "project_urls": {"Homepage": "https://github.com/quantology/dicebox"}, "release_url": "https://pypi.org/project/dicebox/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "A simple python DSL for dice.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img height=\"200\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd61644a98c88fc2fbb08195e48e0b9b3c11866b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7175616e746f6c6f67792f64696365626f782f6d61737465722f646963657365742e737667\" width=\"200\">\n<h1>dicebox</h1>\n<p>A simple dsl for dice.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dicebox</span> <span class=\"kn\">import</span> <span class=\"n\">d</span>\n</pre>\n<pre><code>&gt;&gt;&gt; d(100) + 5\n&lt;DiceExpr(1d100 + 5)&gt;\n</code></pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">({</span><span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}))</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s2\">\"(2d6)\"</span>\n<span class=\"kc\">True</span>\n</pre>\n<pre><code>&gt;&gt;&gt; d(8, 6, 6, 6) // 2\n&lt;DiceExpr((1d8 + 3d6) // 2)&gt;\n</code></pre>\n<pre><code>&gt;&gt;&gt; d({8: 1, 6: 3})\n&lt;Dice(1d8 + 3d6)&gt;\n</code></pre>\n<pre><code>&gt;&gt;&gt; d(10) + 5 + (d(20) + d(8))\n&lt;DiceExpr(1d10 + 5 + 1d8 + 1d20)&gt;\n</code></pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">adv</span><span class=\"o\">.</span><span class=\"n\">roll</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">])</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">adv</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">adv</span><span class=\"o\">.</span><span class=\"n\">roll</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_index</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">disadv</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">disadv</span><span class=\"o\">.</span><span class=\"n\">roll</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_index</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">norm</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">roll</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_index</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&gt;&gt;&gt; (d(20).adv - d(20).disadv) * 2\n&lt;DiceExpr((adv(1d20) - disadv(1d20)) * 2)&gt;\n</code></pre>\n<p><strong>todo:</strong></p>\n<ul>\n<li>[ ] pdist (incl composability)</li>\n<li>[ ] roll logging</li>\n<li>[ ] better expr collapse (sympy?)</li>\n<li>[ ] better DiceExpr str rendering</li>\n<li>[ ] DiceExpr.parse</li>\n<li>[ ] visual output (w/ scavegr)</li>\n</ul>\n<hr>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dicebox.dnd</span> <span class=\"kn\">import</span> <span class=\"n\">attack_roll_factory</span><span class=\"p\">,</span> <span class=\"n\">critical_roll</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rapier_attack</span> <span class=\"o\">=</span> <span class=\"n\">attack_roll_factory</span><span class=\"p\">(</span><span class=\"s2\">\"Rapier\"</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rapier_sneak_attack</span> <span class=\"o\">=</span> <span class=\"n\">attack_roll_factory</span><span class=\"p\">(</span><span class=\"s2\">\"Rapier\"</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rapier_assassinate_attack</span> <span class=\"o\">=</span> <span class=\"n\">attack_roll_factory</span><span class=\"p\">(</span><span class=\"s2\">\"Rapier\"</span><span class=\"p\">,</span> <span class=\"n\">critical_roll</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">critical_hits</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&gt;&gt;&gt; for i in range(20):\n&gt;&gt;&gt;    print(rapier_assassinate_attack(adv=True))\nRapier: 17 to hit (adv(1d20) + 3); 39 damage (2d8 + 6d6 + 4)\nRapier: 17 to hit (adv(1d20) + 3); 36 damage (2d8 + 6d6 + 4)\nRapier: 12 to hit (adv(1d20) + 3); 25 damage (2d8 + 6d6 + 4)\nRapier: 21 to hit (adv(1d20) + 3); 37 damage (2d8 + 6d6 + 4)\nRapier: 10 to hit (adv(1d20) + 3); 32 damage (2d8 + 6d6 + 4)\nRapier: 22 to hit (adv(1d20) + 3); 36 damage (2d8 + 6d6 + 4)\nRapier: 17 to hit (adv(1d20) + 3); 37 damage (2d8 + 6d6 + 4)\nRapier: 14 to hit (adv(1d20) + 3); 29 damage (2d8 + 6d6 + 4)\nRapier: 10 to hit (adv(1d20) + 3); 39 damage (2d8 + 6d6 + 4)\nRapier: 15 to hit (adv(1d20) + 3); 37 damage (2d8 + 6d6 + 4)\nRapier: 23 to hit (adv(1d20) + 3); 27 damage (2d8 + 6d6 + 4)\nRapier: 8 to hit (adv(1d20) + 3); 36 damage (2d8 + 6d6 + 4)\nRapier: 15 to hit (adv(1d20) + 3); 31 damage (2d8 + 6d6 + 4)\nRapier: 20 to hit (adv(1d20) + 3); 38 damage (2d8 + 6d6 + 4)\nRapier: 12 to hit (adv(1d20) + 3); 34 damage (2d8 + 6d6 + 4)\nRapier: 15 to hit (adv(1d20) + 3); 31 damage (2d8 + 6d6 + 4)\nRapier: 18 to hit (adv(1d20) + 3); 35 damage (2d8 + 6d6 + 4)\nRapier: 14 to hit (adv(1d20) + 3); 41 damage (2d8 + 6d6 + 4)\nRapier: 21 to hit (adv(1d20) + 3); 38 damage (2d8 + 6d6 + 4)\nRapier: 19 to hit (adv(1d20) + 3); 34 damage (2d8 + 6d6 + 4)\n</code></pre>\n<pre><code>&gt;&gt;&gt; turn = [rapier_sneak_attack(), rapier_attack()]\n&gt;&gt;&gt; print(\"\\n\".join(turn))\nRapier: 19 to hit (1d20 + 3); 9 damage (1d8 + 3d6 + 4)\nRapier: 9 to hit (1d20 + 3); 5 damage (1d8 + 4)\n</code></pre>\n\n          </div>"}, "last_serial": 7157955, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "50c0dd107fd0d80be5a3a5d2c8a37b44", "sha256": "9dbdb93336cf0692c733b9e3bbee21a90e3557fac77c9696b7360524d4ada4ac"}, "downloads": -1, "filename": "dicebox-0.1.0.tar.gz", "has_sig": false, "md5_digest": "50c0dd107fd0d80be5a3a5d2c8a37b44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4498, "upload_time": "2020-04-26T22:46:24", "upload_time_iso_8601": "2020-04-26T22:46:24.187850Z", "url": "https://files.pythonhosted.org/packages/84/73/fd4a8170ee487ea3ff0ae08b569eae47f384e0f46da6bdb92ef971b51354/dicebox-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d4bf380f5329c118bf508f17f02e5c67", "sha256": "626ddd17c8108d01c1bd5da801cbec178c5f4f4f036f60dab9c7e730596762cb"}, "downloads": -1, "filename": "dicebox-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d4bf380f5329c118bf508f17f02e5c67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4657, "upload_time": "2020-04-27T02:05:24", "upload_time_iso_8601": "2020-04-27T02:05:24.123142Z", "url": "https://files.pythonhosted.org/packages/60/14/78da15e2ac611dad91917de7bb44709396a27ef5e1aab8e4891cec33c9d0/dicebox-0.2.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "b7457bb593f2c8ee34a16e1710ed28fb", "sha256": "e2146f5641c72592f7f940b9a3cdf83c902f0d8395579d56e17a9c48789522ae"}, "downloads": -1, "filename": "dicebox-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b7457bb593f2c8ee34a16e1710ed28fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4643, "upload_time": "2020-05-03T16:45:19", "upload_time_iso_8601": "2020-05-03T16:45:19.805204Z", "url": "https://files.pythonhosted.org/packages/47/94/c764d69d3018667999a7eb5219dadbdb3ff12e18ce3902617037d7a46931/dicebox-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7457bb593f2c8ee34a16e1710ed28fb", "sha256": "e2146f5641c72592f7f940b9a3cdf83c902f0d8395579d56e17a9c48789522ae"}, "downloads": -1, "filename": "dicebox-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b7457bb593f2c8ee34a16e1710ed28fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4643, "upload_time": "2020-05-03T16:45:19", "upload_time_iso_8601": "2020-05-03T16:45:19.805204Z", "url": "https://files.pythonhosted.org/packages/47/94/c764d69d3018667999a7eb5219dadbdb3ff12e18ce3902617037d7a46931/dicebox-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:35 2020"}