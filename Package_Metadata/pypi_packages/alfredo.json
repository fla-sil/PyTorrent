{"info": {"author": "Dalton Barreto", "author_email": "daltonmatos@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "Alfredo - Born to serve!\n************************\n\n\nAlfredo is a simple, extensible gtalk bot. It's capable of doing any kind of tasks, implemented as separated commands.\n\nHere is a typical session: ::\n\n    you: inv some text\n    alfredo: called inv some text -> txet emos\n    \n\nImplementing a new command\n**************************\n\nCommands are implemented as Plugins (more at plugnplay <https://github.com/daltonmatos/plugnplay>). Just create a new class:\n\n    from alfredo import Plugin, ICommand\n\n    class SomeCommand(Plugin):\n      implements = [ICommand]\n\n      def help(self):\n        return ('short help', 'long help')\n\n      def name(self):\n        return 'mycommand'\n\n      def match_name(self, command):\n        return 'mycommand' == command\n\n      def run(self, user, *args)\n        # process some logic\n        return result\n\n\nIn this case we create a new command named 'mycommand'. If we send this message to alfredo:\n\n   mycommand p1 p2 p3\n\n\nthe ``run()`` method would be called like this: ``run('user@domain.com', 'p1', 'p2', 'p3')``. This method must return a string, that will be sent back to the original user.\n\n\nHow to use it\n*************\n\nTo start talking to a running instance of alfredo just add ``alfredo@daltonmatos.com`` to your gtalk conacts list and you are done!\n\nOr try out your own commands from the example code.\n\n\nDependencies\n************\n\nAlfredo's core components only needs:\n\n* plugnplay - https://github.com/daltonmatos/plugnplay\n* xmpppy - http://xmpppy.sourceforge.net/\n\nThe included commands needs:\n\n* BeautifulSoup - http://www.crummy.com/software/BeautifulSoup/\n* requests - https://github.com/kennethreitz/requests\n* simplejson - http://code.google.com/p/simplejson/\n\nYou can even run the requirements file to get up your environment::\n\n    pip install -r requirements.txt\n\n--\n\nDalton barreto\n\ndaltonmatos@gmail.com", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/daltonmatos/alfredo", "keywords": null, "license": "3-BSD", "maintainer": null, "maintainer_email": null, "name": "alfredo", "package_url": "https://pypi.org/project/alfredo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/alfredo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/daltonmatos/alfredo"}, "release_url": "https://pypi.org/project/alfredo/0.2/", "requires_dist": null, "requires_python": null, "summary": "Alfredo is a gtalk bot born so serve you.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Alfredo - Born to serve!<br>************************<br><br><br>Alfredo is a simple, extensible gtalk bot. It's capable of doing any kind of tasks, implemented as separated commands.<br><br>Here is a typical session: ::<br><br>    you: inv some text<br>    alfredo: called inv some text -&gt; txet emos<br>    <br><br>Implementing a new command<br>**************************<br><br>Commands are implemented as Plugins (more at plugnplay &lt;https://github.com/daltonmatos/plugnplay&gt;). Just create a new class:<br><br>    from alfredo import Plugin, ICommand<br><br>    class SomeCommand(Plugin):<br>      implements = [ICommand]<br><br>      def help(self):<br>        return ('short help', 'long help')<br><br>      def name(self):<br>        return 'mycommand'<br><br>      def match_name(self, command):<br>        return 'mycommand' == command<br><br>      def run(self, user, *args)<br>        # process some logic<br>        return result<br><br><br>In this case we create a new command named 'mycommand'. If we send this message to alfredo:<br><br>   mycommand p1 p2 p3<br><br><br>the ``run()`` method would be called like this: ``run('user@domain.com', 'p1', 'p2', 'p3')``. This method must return a string, that will be sent back to the original user.<br><br><br>How to use it<br>*************<br><br>To start talking to a running instance of alfredo just add ``alfredo@daltonmatos.com`` to your gtalk conacts list and you are done!<br><br>Or try out your own commands from the example code.<br><br><br>Dependencies<br>************<br><br>Alfredo's core components only needs:<br><br>* plugnplay - https://github.com/daltonmatos/plugnplay<br>* xmpppy - http://xmpppy.sourceforge.net/<br><br>The included commands needs:<br><br>* BeautifulSoup - http://www.crummy.com/software/BeautifulSoup/<br>* requests - https://github.com/kennethreitz/requests<br>* simplejson - http://code.google.com/p/simplejson/<br><br>You can even run the requirements file to get up your environment::<br><br>    pip install -r requirements.txt<br><br>--<br><br>Dalton barreto<br><br>daltonmatos@gmail.com\n          </div>"}, "last_serial": 786226, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "32aa2ef452c673eaf172cab826053e9f", "sha256": "5fb7fff5b1409c540280eddfcd69302cb2a3559c099aa25827cf37eb3dc80a57"}, "downloads": -1, "filename": "alfredo-0.1.tar.gz", "has_sig": false, "md5_digest": "32aa2ef452c673eaf172cab826053e9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5463, "upload_time": "2011-10-31T00:49:21", "upload_time_iso_8601": "2011-10-31T00:49:21.366460Z", "url": "https://files.pythonhosted.org/packages/93/71/a70395f6b726f5fbb6f4d64b066346bfc13fee31ff637d6c4474394f51b9/alfredo-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f2f7db84dd6737328da305dc9270c147", "sha256": "961f4a5223d7c263df3cb83f14025cc63269e30b1a315f3a277e8ad71b6c1287"}, "downloads": -1, "filename": "alfredo-0.2.tar.gz", "has_sig": false, "md5_digest": "f2f7db84dd6737328da305dc9270c147", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6743, "upload_time": "2012-07-06T04:38:40", "upload_time_iso_8601": "2012-07-06T04:38:40.141278Z", "url": "https://files.pythonhosted.org/packages/60/cc/1ad51749985f6a2c274c13a6e6d82533c21a117df56acfb65bc19160c57f/alfredo-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2f7db84dd6737328da305dc9270c147", "sha256": "961f4a5223d7c263df3cb83f14025cc63269e30b1a315f3a277e8ad71b6c1287"}, "downloads": -1, "filename": "alfredo-0.2.tar.gz", "has_sig": false, "md5_digest": "f2f7db84dd6737328da305dc9270c147", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6743, "upload_time": "2012-07-06T04:38:40", "upload_time_iso_8601": "2012-07-06T04:38:40.141278Z", "url": "https://files.pythonhosted.org/packages/60/cc/1ad51749985f6a2c274c13a6e6d82533c21a117df56acfb65bc19160c57f/alfredo-0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:53 2020"}