{"info": {"author": "Eric Wong", "author_email": "ericwong@zju.edu.cn", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Security", "Topic :: Security :: Cryptography", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "![version](https://img.shields.io/pypi/v/des.svg) ![license](https://img.shields.io/pypi/l/des.svg)\n\n# DES (Data Encryption Standard)\nA pure Python implementation for the famous DES algorithm, supporting Python 2 and 3.\n\n## Installation\nUsing `pip`:\n```bash\n$ pip install des \n```\n\nOr manually download the archive and run the command after extracting the stuff inside:\n```bash\n$ python setup.py install\n```\n\n## Usage\nFirstly, define a `DesKey` object by passing your encryption / decryption key. The key should be of length 8, 16 or 24. The algorithm will be automatically chosen for you.\nNote that the key should be written as `bytes` in *Python 3*.\n```python\nfrom des import DesKey\nkey0 = DesKey(b\"some key\")                  # for DES\nkey1 = DesKey(b\"a key for TRIPLE\")          # for 3DES, same as \"a key for TRIPLEa key fo\"\nkey2 = DesKey(b\"a 24-byte key for TRIPLE\")  # for 3DES\nkey3 = DesKey(b\"1234567812345678REAL_KEY\")  # for DES, same as \"REAL_KEY\"\n```\n\nYou may know whether a key is for *DES* or *3DES* algorithm by calling its method `is_single()` or `is_triple()`.\n```python\nkey0.is_single()  # -> True\nkey1.is_triple()  # -> True\nkey2.is_single()  # -> False\nkey3.is_triple()  # -> False\n```\n\nSecondly, encrypt messages by calling the method `encrypt()` from the `DesKey` object, or decrypt them by calling `decrypt()`.\nNote that the messages should be written as `bytes` in *Python 3*.\n```python\nkey0.encrypt(b\"any long message\")  # -> b\"\\x14\\xfa\\xc2 '\\x00{\\xa9\\xdc;\\x9dq\\xcbr\\x87Q\"\n```\n\nBy default, *ECB Mode* is used. You may enable *CBC Mode* by passing the argument `initial`, as the *Initial Value*.\nThe argument may be either a `bytes` object of length 8 or an integer using *big-endian*. \n```python\nkey0.encrypt(b\"any long message\", initial=0)        # -> b\"\\x14\\xfa\\xc2 '\\x00{\\xa9\\xb2\\xa5\\xa7\\xfb#\\x86\\xc5\\x9b\"\nkey0.encrypt(b\"any long message\", initial=b\"\\0\"*8)  # same as above\n```\n\nThe *DES* algorithm requires the message to be of any length that is a multiple of 8.\nBy default, the length of the message to encrypt / decrypt is assured by users.\nYou may choose to turn on *PKCS5 Padding Mode*(by passing the argument `padding` with a TRUTHY value), telling Python to do the padding before encryption for you.\n```python\nkey0.encrypt(b\"abc\", padding=True)  # -> b\"%\\xd1KU\\x8b_A\\xa6\"\n```\n\nWhile in decryption with *PKCS5 Padding*, the length of the message is still required to be a multiple of 8. But after decryption, Python will throw the padding characters away. \n```python\nkey0.decrypt(b\"%\\xd1KU\\x8b_A\\xa6\", padding=True)  # -> b\"abc\"\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/littlefisher/des", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "des", "package_url": "https://pypi.org/project/des/", "platform": "", "project_url": "https://pypi.org/project/des/", "project_urls": {"Homepage": "https://github.com/littlefisher/des"}, "release_url": "https://pypi.org/project/des/1.0.5/", "requires_dist": null, "requires_python": "", "summary": "A pure Python implementation for the famous DES algorithm", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb43ba5775302e0d69218db28004faca8739b9f6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6465732e737667\"> <img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63a601cb5c36df9e9ccfd2d93b8fc0c98f7807a5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6465732e737667\"></p>\n<h1>DES (Data Encryption Standard)</h1>\n<p>A pure Python implementation for the famous DES algorithm, supporting Python 2 and 3.</p>\n<h2>Installation</h2>\n<p>Using <code>pip</code>:</p>\n<pre>$ pip install des \n</pre>\n<p>Or manually download the archive and run the command after extracting the stuff inside:</p>\n<pre>$ python setup.py install\n</pre>\n<h2>Usage</h2>\n<p>Firstly, define a <code>DesKey</code> object by passing your encryption / decryption key. The key should be of length 8, 16 or 24. The algorithm will be automatically chosen for you.\nNote that the key should be written as <code>bytes</code> in <em>Python 3</em>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">des</span> <span class=\"kn\">import</span> <span class=\"n\">DesKey</span>\n<span class=\"n\">key0</span> <span class=\"o\">=</span> <span class=\"n\">DesKey</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"some key\"</span><span class=\"p\">)</span>                  <span class=\"c1\"># for DES</span>\n<span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"n\">DesKey</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"a key for TRIPLE\"</span><span class=\"p\">)</span>          <span class=\"c1\"># for 3DES, same as \"a key for TRIPLEa key fo\"</span>\n<span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"n\">DesKey</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"a 24-byte key for TRIPLE\"</span><span class=\"p\">)</span>  <span class=\"c1\"># for 3DES</span>\n<span class=\"n\">key3</span> <span class=\"o\">=</span> <span class=\"n\">DesKey</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"1234567812345678REAL_KEY\"</span><span class=\"p\">)</span>  <span class=\"c1\"># for DES, same as \"REAL_KEY\"</span>\n</pre>\n<p>You may know whether a key is for <em>DES</em> or <em>3DES</em> algorithm by calling its method <code>is_single()</code> or <code>is_triple()</code>.</p>\n<pre><span class=\"n\">key0</span><span class=\"o\">.</span><span class=\"n\">is_single</span><span class=\"p\">()</span>  <span class=\"c1\"># -&gt; True</span>\n<span class=\"n\">key1</span><span class=\"o\">.</span><span class=\"n\">is_triple</span><span class=\"p\">()</span>  <span class=\"c1\"># -&gt; True</span>\n<span class=\"n\">key2</span><span class=\"o\">.</span><span class=\"n\">is_single</span><span class=\"p\">()</span>  <span class=\"c1\"># -&gt; False</span>\n<span class=\"n\">key3</span><span class=\"o\">.</span><span class=\"n\">is_triple</span><span class=\"p\">()</span>  <span class=\"c1\"># -&gt; False</span>\n</pre>\n<p>Secondly, encrypt messages by calling the method <code>encrypt()</code> from the <code>DesKey</code> object, or decrypt them by calling <code>decrypt()</code>.\nNote that the messages should be written as <code>bytes</code> in <em>Python 3</em>.</p>\n<pre><span class=\"n\">key0</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"any long message\"</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; b\"\\x14\\xfa\\xc2 '\\x00{\\xa9\\xdc;\\x9dq\\xcbr\\x87Q\"</span>\n</pre>\n<p>By default, <em>ECB Mode</em> is used. You may enable <em>CBC Mode</em> by passing the argument <code>initial</code>, as the <em>Initial Value</em>.\nThe argument may be either a <code>bytes</code> object of length 8 or an integer using <em>big-endian</em>.</p>\n<pre><span class=\"n\">key0</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"any long message\"</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>        <span class=\"c1\"># -&gt; b\"\\x14\\xfa\\xc2 '\\x00{\\xa9\\xb2\\xa5\\xa7\\xfb#\\x86\\xc5\\x9b\"</span>\n<span class=\"n\">key0</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"any long message\"</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"</span><span class=\"se\">\\0</span><span class=\"s2\">\"</span><span class=\"o\">*</span><span class=\"mi\">8</span><span class=\"p\">)</span>  <span class=\"c1\"># same as above</span>\n</pre>\n<p>The <em>DES</em> algorithm requires the message to be of any length that is a multiple of 8.\nBy default, the length of the message to encrypt / decrypt is assured by users.\nYou may choose to turn on <em>PKCS5 Padding Mode</em>(by passing the argument <code>padding</code> with a TRUTHY value), telling Python to do the padding before encryption for you.</p>\n<pre><span class=\"n\">key0</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; b\"%\\xd1KU\\x8b_A\\xa6\"</span>\n</pre>\n<p>While in decryption with <em>PKCS5 Padding</em>, the length of the message is still required to be a multiple of 8. But after decryption, Python will throw the padding characters away.</p>\n<pre><span class=\"n\">key0</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"%</span><span class=\"se\">\\xd1</span><span class=\"s2\">KU</span><span class=\"se\">\\x8b</span><span class=\"s2\">_A</span><span class=\"se\">\\xa6</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; b\"abc\"</span>\n</pre>\n\n          </div>"}, "last_serial": 5195981, "releases": {"1.0.4": [{"comment_text": "", "digests": {"md5": "be989f9b5b1815cddea50987d9d52d2c", "sha256": "62e1412fa1f1444f2f960635a1f9f7775b59ebfcb2930203028cc6ced2a9c97c"}, "downloads": -1, "filename": "des-1.0.4.tar.gz", "has_sig": false, "md5_digest": "be989f9b5b1815cddea50987d9d52d2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5700, "upload_time": "2019-01-01T06:03:33", "upload_time_iso_8601": "2019-01-01T06:03:33.378530Z", "url": "https://files.pythonhosted.org/packages/46/ec/eb71caf239a25e97e5a713c3ca9a0984e16f6fb79d428bc5f42d1884bb19/des-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "856c9f52b11b522af5f6ea8202b56cde", "sha256": "4f7fb585bf04cd79fd435822dbd03e25872117e78f1e862c8501beeb48af4818"}, "downloads": -1, "filename": "des-1.0.5.tar.gz", "has_sig": false, "md5_digest": "856c9f52b11b522af5f6ea8202b56cde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5699, "upload_time": "2019-04-27T06:36:22", "upload_time_iso_8601": "2019-04-27T06:36:22.730780Z", "url": "https://files.pythonhosted.org/packages/87/d2/43554da481f4c2fcd4291f3a2d99a45ea342fd2949dd15920f3c232e4880/des-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "856c9f52b11b522af5f6ea8202b56cde", "sha256": "4f7fb585bf04cd79fd435822dbd03e25872117e78f1e862c8501beeb48af4818"}, "downloads": -1, "filename": "des-1.0.5.tar.gz", "has_sig": false, "md5_digest": "856c9f52b11b522af5f6ea8202b56cde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5699, "upload_time": "2019-04-27T06:36:22", "upload_time_iso_8601": "2019-04-27T06:36:22.730780Z", "url": "https://files.pythonhosted.org/packages/87/d2/43554da481f4c2fcd4291f3a2d99a45ea342fd2949dd15920f3c232e4880/des-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:00 2020"}