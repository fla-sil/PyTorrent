{"info": {"author": "Yanwar Solahudin", "author_email": "yanwarsolahudinn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Build Tools"], "description": "================\nUTF8 Code Point\n================\n\n**Python library** to make and get the encoding of unicode code points in UTF8.\n\ntables of rules for encoding UTF8\n----------------------------------\n\nDesign UTF-8 can be seen in the following table that originally \nproposed by *Dave Prosser* and subsequently modified by *Ken Thompson*.\n\n+------------+------------+------------+---------+\n| Bit        | The first  | The last   | Byte in |\n| Code Point | code point | code point | Squence |\n+------------+------------+------------+---------+\n| 7          | U+0000     | U+007F     | 1       |\n+------------+------------+------------+---------+\n| 11         | U+0080 \t  | U+07FF     |  2 \t |\n+------------+------------+------------+---------+\n| 16 \t     | U+0800 \t  | U+FFFF     |  3      |\n+------------+------------+------------+---------+ \n| 21\t     | U+10000    | U+1FFFFF   |  4      |\n+------------+------------+------------+---------+ \n| 26         | U+200000   | U+3FFFFFF  |  5      |\n+------------+------------+------------+---------+ \t\n| 31         | U+4000000  | U+7FFFFFFF |  6      |\n+------------+------------+------------+---------+\n\nYou can read more on the table above in `a link`_.\n\n.. _a link: https://en.wikipedia.org/wiki/UTF-8\n\nInstallation\n-------------\n\n::\n\n\tpip install utf8_codepoint\n\n\nDoc And Contribute\n-------------------\n\nMore Documentation in `github`_.\n\n.. _github: https://github.com/yanwarsolahudinn/utf8-codepoint \n\nExample\n--------\n\nsimple examples using this package.\n\n**Quick Start**\n\n.. code:: python\n\t\n\tfrom utf8_codepoint import CodePoint\n\n\t# unicode symbol for European currency\n\teuro_money = \"U+20AC\"\n\n\t# create instance object\n\tcp = CodePoint(euro_money)\n\n\t# get representation integer of the Unicode Code Point\n\tprint(cp.to_int())\n\nthe result is:\n\n::\n\t\n\t226 130 172\n\n**to a hexadecimal representation**\n\n.. code:: python\n\t\n\tfrom utf8_codepoint import CodePoint\n\t...\n\t\n\tprint(cp.to_hex())\n\nthe result is:\n\n::\n\n\tE2 82 AC\n\t\n**to a string with binary representation**\n\n.. code:: python\n\t\n\tfrom utf8_codepoint import CodePoint\n\t...\n\t\n\tprint(cp.to_string())\n\t\nthe result is:\n\n::\n\n\t11100010 10000010 10101100\n\n**to a list of binary string representation**\n\n.. code:: python\n\t\n\tfrom utf8_codepoint import CodePoint\n\t...\n\t\n\tprint(cp.to_list())\n\nthe result is:\n\n::\n\n\t['11100010', '10000010', '10101100']\n\n\n**displays all the data with beautiful style**\n\n.. code:: python\n\n\tfrom utf8_codepoint import CodePoint\n\t...\n\t\n\tcp.bprint()\n\nthe result is:\n\n::\n\n\t{'0x20AC': {'bit_list': ['11100010', '10000010', '10101100'],\n            'code_point': 16,\n            'hexa_list': ['0xe2', '0x82', '0xac'],\n            'initial_bit': '1110',\n            'integer_list': [226, 130, 172]}}\n        \n    \n**Get all data**\n\n.. code:: python\n\n\tfrom utf8_codepoint import CodePoint\n\t...\n\t\n\tprint(cp.get_all())\n\t\nthe result is:\n\n::\n\n\t{'0x20AC': \n\t\t{\n\t\t\t'bit_list': ['11100010', '10000010', '10101100'], \n\t\t\t'integer_list': [226, 130, 172], \n\t\t\t'initial_bit': '1110', \n\t\t\t'hexa_list': ['0xe2', '0x82', '0xac'], \n\t\t\t'code_point': 16\n\t\t}\n\t}\n\nIf you want to turn it into a json format, you can pass a \ntrue value as a parameter in the method get_all:\n\n.. code:: python\n\n\tcp.get_all(True)", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/yanwarsolahudinn/utf8-codepoint/tarball/1.0.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yanwarsolahudinn/utf8-codepoint", "keywords": "utf8,library,code point,checking,hex,bin", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "utf8_codepoint", "package_url": "https://pypi.org/project/utf8_codepoint/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/utf8_codepoint/", "project_urls": {"Download": "https://github.com/yanwarsolahudinn/utf8-codepoint/tarball/1.0.0", "Homepage": "https://github.com/yanwarsolahudinn/utf8-codepoint"}, "release_url": "https://pypi.org/project/utf8_codepoint/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "python library to make and get the encoding of unicode code point in UTF8.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Python library</strong> to make and get the encoding of unicode code points in UTF8.</p>\n<div id=\"tables-of-rules-for-encoding-utf8\">\n<h2>tables of rules for encoding UTF8</h2>\n<p>Design UTF-8 can be seen in the following table that originally\nproposed by <em>Dave Prosser</em> and subsequently modified by <em>Ken Thompson</em>.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Bit\nCode Point</td>\n<td>The first\ncode point</td>\n<td>The last\ncode point</td>\n<td>Byte in\nSquence</td>\n</tr>\n<tr><td>7</td>\n<td>U+0000</td>\n<td>U+007F</td>\n<td>1</td>\n</tr>\n<tr><td>11</td>\n<td>U+0080</td>\n<td>U+07FF</td>\n<td>2</td>\n</tr>\n<tr><td>16</td>\n<td>U+0800</td>\n<td>U+FFFF</td>\n<td>3</td>\n</tr>\n<tr><td>21</td>\n<td>U+10000</td>\n<td>U+1FFFFF</td>\n<td>4</td>\n</tr>\n<tr><td>26</td>\n<td>U+200000</td>\n<td>U+3FFFFFF</td>\n<td>5</td>\n</tr>\n<tr><td>31</td>\n<td>U+4000000</td>\n<td>U+7FFFFFFF</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>You can read more on the table above in <a href=\"https://en.wikipedia.org/wiki/UTF-8\" rel=\"nofollow\">a link</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install utf8_codepoint\n</pre>\n</div>\n<div id=\"doc-and-contribute\">\n<h2>Doc And Contribute</h2>\n<p>More Documentation in <a href=\"https://github.com/yanwarsolahudinn/utf8-codepoint\" rel=\"nofollow\">github</a>.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>simple examples using this package.</p>\n<p><strong>Quick Start</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">utf8_codepoint</span> <span class=\"kn\">import</span> <span class=\"n\">CodePoint</span>\n\n<span class=\"c1\"># unicode symbol for European currency</span>\n<span class=\"n\">euro_money</span> <span class=\"o\">=</span> <span class=\"s2\">\"U+20AC\"</span>\n\n<span class=\"c1\"># create instance object</span>\n<span class=\"n\">cp</span> <span class=\"o\">=</span> <span class=\"n\">CodePoint</span><span class=\"p\">(</span><span class=\"n\">euro_money</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get representation integer of the Unicode Code Point</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">to_int</span><span class=\"p\">())</span>\n</pre>\n<p>the result is:</p>\n<pre>226 130 172\n</pre>\n<p><strong>to a hexadecimal representation</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">utf8_codepoint</span> <span class=\"kn\">import</span> <span class=\"n\">CodePoint</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">to_hex</span><span class=\"p\">())</span>\n</pre>\n<p>the result is:</p>\n<pre>E2 82 AC\n</pre>\n<p><strong>to a string with binary representation</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">utf8_codepoint</span> <span class=\"kn\">import</span> <span class=\"n\">CodePoint</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span>\n</pre>\n<p>the result is:</p>\n<pre>11100010 10000010 10101100\n</pre>\n<p><strong>to a list of binary string representation</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">utf8_codepoint</span> <span class=\"kn\">import</span> <span class=\"n\">CodePoint</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">())</span>\n</pre>\n<p>the result is:</p>\n<pre>['11100010', '10000010', '10101100']\n</pre>\n<p><strong>displays all the data with beautiful style</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">utf8_codepoint</span> <span class=\"kn\">import</span> <span class=\"n\">CodePoint</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">bprint</span><span class=\"p\">()</span>\n</pre>\n<p>the result is:</p>\n<pre>{'0x20AC': {'bit_list': ['11100010', '10000010', '10101100'],\n    'code_point': 16,\n    'hexa_list': ['0xe2', '0x82', '0xac'],\n    'initial_bit': '1110',\n    'integer_list': [226, 130, 172]}}\n</pre>\n<p><strong>Get all data</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">utf8_codepoint</span> <span class=\"kn\">import</span> <span class=\"n\">CodePoint</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">get_all</span><span class=\"p\">())</span>\n</pre>\n<p>the result is:</p>\n<pre>{'0x20AC':\n        {\n                'bit_list': ['11100010', '10000010', '10101100'],\n                'integer_list': [226, 130, 172],\n                'initial_bit': '1110',\n                'hexa_list': ['0xe2', '0x82', '0xac'],\n                'code_point': 16\n        }\n}\n</pre>\n<p>If you want to turn it into a json format, you can pass a\ntrue value as a parameter in the method get_all:</p>\n<pre><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">get_all</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1848395, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "a0ab519a64157317e3b16586faf20831", "sha256": "9b3c5743c47612190e8d314ab1176bef105328500937a136d1f41e5d118badcf"}, "downloads": -1, "filename": "utf8_codepoint-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a0ab519a64157317e3b16586faf20831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4239, "upload_time": "2015-12-06T04:54:25", "upload_time_iso_8601": "2015-12-06T04:54:25.470018Z", "url": "https://files.pythonhosted.org/packages/99/e3/65299935f65f18036c567ac9f5dcc1fec82e1cebbbe79e4725c46ab42289/utf8_codepoint-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0ab519a64157317e3b16586faf20831", "sha256": "9b3c5743c47612190e8d314ab1176bef105328500937a136d1f41e5d118badcf"}, "downloads": -1, "filename": "utf8_codepoint-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a0ab519a64157317e3b16586faf20831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4239, "upload_time": "2015-12-06T04:54:25", "upload_time_iso_8601": "2015-12-06T04:54:25.470018Z", "url": "https://files.pythonhosted.org/packages/99/e3/65299935f65f18036c567ac9f5dcc1fec82e1cebbbe79e4725c46ab42289/utf8_codepoint-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:53 2020"}