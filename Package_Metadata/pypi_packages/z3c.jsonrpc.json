{"info": {"author": "Roger Ineichen and the Zope Community", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "This package provides an JSON-RPC server implementation for Zope3.\n\n\nDetailed Documentation\n**********************\n\n=======\nJSONRPC\n=======\n\nJSON is javascript object notation. JSON-RPC performs the same service\nas XML-RPC, except the transport is JSON instead of XML.\n\nMany thanks to Jim Washington for the work on zif.jsonserver. This project uses\nmany code writen by Jim. I implemented an additional python JSONRPC proxy which\ncan communicate with the server. This means we can use this library to call\nJSON from python to python. The JSON-RPC proxy uses similar patterns like the\nXML-RPC implementation.\n\nThere is also an additional xmlhttp and json javascript implementation which\noffers a JSON-RPC proxy implementation for JavaScript.\n\nThis project provides the proposed request type \"application/json\". The request\ntype \"application/json-rpc\" is supported as long it is not officialy deprecated.\n\nThe goal of this project is to provide a JSON-RPC implementation. Simple\nBrowser views which handle JSON calls with a BrowserRequest are not supported\nby this package. I'm still not sure if this is good or bad and in which\ndirection I will go with this package.\n\nSome of my goals are right now, but can change in the future if I'll understand\nall the concepts around JSON, e.g. JSPON, JSONP, CrossSite etc:\n\n- provide a secure way to handle JSON calls from client to server.\n  I hope we can implement JSONRequest some days. CrossSite seems to use a\n  intereting concept\n\n- Simple pythonic implementation\n\n- Use together with JQuery (see http://www.jquery.org).\n\n- No other dependency then JQuery and basic zope packages.\n\n- well tested (this is not the case for JavaScript right now)\n\n\nAbout JSON\n----------\n\nSee www.json.org for more information about JSON.\n\nSee http://json-rpc.org/wd/JSON-RPC-1-1-WD-20060807.html for more information\nabout the JSON 1.1 specification.\n\n\nWhat this package can't do\n--------------------------\n\nJSON and this package have different limitations. This package can right now\nnot handle the following tasks:\n\n- Handle fileupload\n\n- Handle GET request\n\nNote that the JSONRPCRequest implementation is based on the IHTTPRequest, this\nmeans that there is no other browser page available if you call them in\npython, e.g. getMultiAdapter((context, request), name='myViewName'). This is\nexplicitly done this way. If you'd like to use content form such browser pages\nin a JSON request/call, you can inherit your skin form IJSONRPCLayer and\nIBrowserRequest and register your JSON-RPC views for this custom layer.\n\n\nJSON-RPC server\n---------------\n\nThe JSON server looks for content-type \"application/json\", and handles those\nrequests as JSON-RPC. The official mime-type for JSON is \"application/json\"\nThe old content type ``application/json-rpc`` is supported too.\n\nLet's define a content object:\n\n  >>> import zope.interface\n  >>> class IDemoContent(zope.interface.Interface):\n  ...     \"\"\"Demo content interface.\"\"\"\n\n  >>> import persistent\n  >>> class DemoContent(persistent.Persistent):\n  ...     \"\"\"Demo content.\"\"\"\n  ...     zope.interface.implements(IDemoContent)\n\nAnd define a JSONRPC method view:\n\n  >>> from z3c.jsonrpc import publisher\n  >>> class DemoView(publisher.MethodPublisher):\n  ...     \"\"\"Sample JSON view.\"\"\"\n  ...\n  ...     def hello(self):\n  ...         return u\"Hello World\"\n  ...\n  ...     def greeting(self, name):\n  ...         return u\"Hello %s\" % name\n  ...\n  ...     def mixedparams(self, prefix, bar=None, foo=None):\n  ...         # Note; keyword arguments can be found in request.form\n  ...         return u\"%s %s %s\" % (prefix, bar, foo)\n  ...\n  ...     def kws(self, adam=None, foo=None, bar=None):\n  ...         # Note; keyword arguments can be found in request.form\n  ...         a = self.request.get('adam')\n  ...         b = self.request.form.get('foo')\n  ...         c = self.request.form.get('bar')\n  ...         return u\"%s %s %s\" % (a, b, c)\n  ...\n  ...     def showId(self):\n  ...         return u\"The json id is: %s\" % self.request.jsonId\n  ...\n  ...     def forceValueError(self):\n  ...         raise ValueError('Something was wrong in server method.')\n\nLet's define a content object that is a container:\n\n  >>> import zope.interface\n  >>> class IDemoContainer(zope.container.interfaces.IReadContainer):\n  ...     \"\"\"Demo container interface.\"\"\"\n\n  >>> import persistent\n  >>> from zope.container import btree\n\n  >>> class DemoContainer(btree.BTreeContainer):\n  ...     \"\"\"Demo container.\"\"\"\n  ...     zope.interface.implements(IDemoContainer)\n\nAnd define a JSONRPC method view:\n\n  >>> from z3c.jsonrpc import publisher\n  >>> class DemoContainerView(publisher.MethodPublisher):\n  ...     \"\"\"Sample JSON view.\"\"\"\n  ...\n  ...     def available(self):\n  ...         return u\"Hello World\"\n  ...\n  ...     def greeting(self, name):\n  ...         return u\"Hello %s\" % name\n  ...\n  ...     def mixedparams(self, prefix, foo=None, bar=None):\n  ...         # Note; keyword arguments can be found in request.form\n  ...         return u\"%s %s %s\" % (prefix, foo, bar)\n  ...\n  ...     def kws(self, adam=None, foo=None, bar=None):\n  ...         # Note; keyword arguments can be found in request.form\n  ...         a = self.request.get('adam')\n  ...         b = self.request.form.get('foo')\n  ...         c = self.request.form.get('bar')\n  ...         return u\"%s %s %s\" % (a, b, c)\n  ...\n  ...     def showId(self):\n  ...         return u\"The json id is: %s\" % self.request.jsonId\n  ...\n  ...     def forceValueError(self):\n  ...         raise ValueError('Something was wrong in server method.')\n\n\nMake them available under the fake package ``jsonsamples``:\n\n  >>> import sys\n  >>> sys.modules['custom'] = type('Module', (), {})()\n  >>> sys.modules['custom'].IDemoContent = IDemoContent\n  >>> sys.modules['custom'].DemoContent = DemoContent\n  >>> sys.modules['custom'].DemoView = DemoView\n  >>> sys.modules['custom'].IDemoContainer = IDemoContainer\n  >>> sys.modules['custom'].DemoContainer = DemoContainer\n  >>> sys.modules['custom'].DemoContainerView = DemoContainerView\n\nLet's show how we can register a jsonrpc view:\n\n  >>> from zope.configuration import xmlconfig\n  >>> import z3c.jsonrpc\n  >>> context = xmlconfig.file('meta.zcml', z3c.jsonrpc)\n  >>> context = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns:z3c=\"http://namespaces.zope.org/z3c\">\n  ...   <z3c:jsonrpc\n  ...       for=\"custom.IDemoContent\"\n  ...       class=\"custom.DemoView\"\n  ...       permission=\"zope.Public\"\n  ...       methods=\"hello greeting mixedparams kws showId forceValueError\"\n  ...       layer=\"z3c.jsonrpc.testing.IJSONRPCTestSkin\"\n  ...       />\n  ... </configure>\n  ... \"\"\", context)\n\nLet's show how we can register a jsonrpc view for the container:\n(The container class needs permission configuration too)\n\n  >>> context = xmlconfig.file('meta.zcml', z3c.jsonrpc)\n  >>> context = xmlconfig.file('meta.zcml', zope.security, context)\n  >>> context = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns:z3c=\"http://namespaces.zope.org/z3c\"\n  ...     xmlns=\"http://namespaces.zope.org/zope\">\n  ...     <class class=\"custom.DemoContainer\">\n  ...       <allow\n  ...           interface=\"custom.IDemoContainer\"\n  ...           />\n  ...     </class>\n  ...   <z3c:jsonrpc\n  ...       for=\"custom.IDemoContainer\"\n  ...       class=\"custom.DemoContainerView\"\n  ...       permission=\"zope.Public\"\n  ...       methods=\"available greeting mixedparams kws showId forceValueError\"\n  ...       layer=\"z3c.jsonrpc.testing.IJSONRPCTestSkin\"\n  ...       />\n  ... </configure>\n  ... \"\"\", context)\n\n\nNow we will setup a content object in our site:\n\n  >>> site  = getRootFolder()\n  >>> content = DemoContent()\n  >>> site['content'] = content\n  >>> container = DemoContainer()\n  >>> site['container'] = container\n\nNow we can call the method from our JSONRPC view:\n\n  >>> from z3c.jsonrpc import testing\n  >>> request = testing.TestRequest()\n  >>> demoView = DemoView(content, request)\n  >>> demoView.hello()\n  u'Hello World'\n\nBut this is not intuitive. Let's see how we can traverse to the method ``hello``\nwith the traverser:\n\n  >>> from z3c.jsonrpc.publisher import MethodTraverser\n  >>> methodTraverser = MethodTraverser(demoView, request)\n  >>> methodTraverser.publishTraverse(request, 'hello')()\n  u'Hello World'\n\nNow we try to access the JSON-RPC view method with a test browser. As you can\nsee, there is no view accessible. This is because the JSONRPC view is not a\nbrowser view and is not traversable. The error shows that the request factory\nfalls back to the browser request factory:\n\n  >>> from zope.testbrowser.testing import Browser\n  >>> browser = Browser()\n  >>> browser.handleErrors = False\n  >>> browser.addHeader('Accept-Language', 'en')\n  >>> browser.addHeader('Content-Type', 'application/json')\n  >>> siteURL = 'http://localhost/++skin++JSONRPCTestSkin'\n  >>> browser.open(siteURL + '/content/hello')\n  Traceback (most recent call last):\n  ...\n  NotFound: Object: <zope.site.folder.Folder...: u'++skin++JSONRPCTestSkin'\n\nTesting\n-------\n\nIf you need to test a JSONRPC view you can use the test proxy like shown\nbelow in the ``JSON-RPC proxy`` section.\n\n\nJSON-RPC proxy\n--------------\n\nThe jsonrpc package provides also a JSON-RPC proxy implementation. This\nimplementation is similar to the one known from xmlrpclib except that it can\nhandle JSON instead of XML.\n\nLet's try to call our method called ``hello`` we defined before:\n\n  >>> from z3c.jsonrpc.testing import JSONRPCTestProxy\n  >>> proxy = JSONRPCTestProxy(siteURL + '/content')\n  >>> proxy.hello()\n  u'Hello World'\n\nAs defined in the jsonrpc spec it is also allowed to omit the params\ncompletly we need to test this with a post directly because the\ntesting proxy always sets the params.\n\n  >>> browser.post(siteURL + '/content', \"{'method':'hello', 'id':1}\",\n  ...              content_type='application/json')\n  >>> browser.contents\n  '{\"jsonrpc\":\"2.0\",\"result\":\"Hello World\",\"id\":1}'\n  >>> browser.post(siteURL + '/content', \"{'method':'hello', 'params':null, 'id':1}\",\n  ...              content_type='application/json')\n  >>> browser.contents\n  '{\"jsonrpc\":\"2.0\",\"result\":\"Hello World\",\"id\":1}'\n\n  >>> proxy2 = JSONRPCTestProxy(siteURL + '/container')\n  >>> proxy2.available()\n  u'Hello World'\n\nNow let's make a remote procedure call with a argument:\n\n  >>> proxy.greeting(u'Jessy')\n  u'Hello Jessy'\n\nLet's call named arguments:\n\n  >>> proxy.kws(bar=u'BAR', foo=u'FOO')\n  u'None FOO BAR'\n\nThere is also an ``id`` in the json response. Let's use such a json request id\nin our JSONRPCProxy:\n\n  >>> proxy = JSONRPCTestProxy(siteURL + '/content', jsonId = u'my id')\n  >>> proxy.showId()\n  u'The json id is: my id'\n\nThe proxy also knows this id as jsonId:\n\n  >>> proxy.jsonId\n  u'my id'\n\n\nJSON-RPC Versions\n-----------------\n\nLet's test the different JSON-RPC versions starting with version 1.0:\n\n  >>> v1 = JSONRPCTestProxy(siteURL + '/container', jsonVersion='1.0')\n  >>> v1.available()\n  u'Hello World'\n\n  >>> v1.greeting(u'Jessy')\n  u'Hello Jessy'\n\n  >>> v1.kws(bar=u'BAR', foo=u'FOO')\n  u'None FOO BAR'\n\n  >>> v1 = JSONRPCTestProxy(siteURL + '/content', jsonId = u'my id',\n  ...     jsonVersion='1.0')\n  >>> v1.showId()\n  u'The json id is: my id'\n\n  >>> v1.jsonId\n  u'my id'\n\nNow test with JSON-RPC version 1.1:\n\n  >>> v11 = JSONRPCTestProxy(siteURL + '/container', jsonVersion='1.1')\n  >>> v11.available()\n  u'Hello World'\n\n  >>> v11.greeting(u'Jessy')\n  u'Hello Jessy'\n\n  >>> v11.kws(bar=u'BAR', foo=u'FOO')\n  u'None FOO BAR'\n\n  >>> v11 = JSONRPCTestProxy(siteURL + '/content', jsonId = u'my id',\n  ...     jsonVersion='1.1')\n  >>> v11.showId()\n  u'The json id is: my id'\n\n  >>> v11.jsonId\n  u'my id'\n\nNow test with JSON-RPC version 2.0:\n\n  >>> v2 = JSONRPCTestProxy(siteURL + '/container', jsonVersion='2.0')\n  >>> v2.available()\n  u'Hello World'\n\n  >>> v2.greeting(u'Jessy')\n  u'Hello Jessy'\n\n  >>> v2.kws(bar=u'BAR', foo=u'FOO')\n  u'None FOO BAR'\n\n  >>> v2 = JSONRPCTestProxy(siteURL + '/content', jsonId = u'my id',\n  ...     jsonVersion='2.0')\n  >>> v2.showId()\n  u'The json id is: my id'\n\n  >>> v2.jsonId\n  u'my id'\n\n\nMixed parameters\n----------------\n\nNote the keyword arguments will get stored in the request.form. Important\nto know is that JSON-RPC does not support positional and named arguments in\none method call.\n\n  >>> v1.mixedparams('Hello', foo=u'FOO', bar=u'BAR')\n  Traceback (most recent call last):\n  ...\n  ValueError: Mixing positional and named parameters in one call is not possible\n\n  >>> v11.mixedparams('Hello', foo=u'FOO', bar=u'BAR')\n  Traceback (most recent call last):\n  ...\n  ValueError: Mixing positional and named parameters in one call is not possible\n\n  >>> v2.mixedparams('Hello', foo=u'FOO', bar=u'BAR')\n  Traceback (most recent call last):\n  ...\n  ValueError: Mixing positional and named parameters in one call is not possible\n\n\nError handling\n--------------\n\nSee what happens if the server raises an Exception. We will get a response\nerror with additional error content:\n\n  >>> proxy.forceValueError()\n  Traceback (most recent call last):\n  ...\n  ResponseError: Received error from server: ...\n\nand the error content looks like:\n\n  >>> proxy.error\n  {u'message': u'Internal error', u'code': -32603, u'data': {u'i18nMessage': u'Internal error'}}\n\nThe error property gets reset on the next successfull call:\n\n  >>> x = proxy.showId()\n  >>> proxy.error is None\n  True\n\nAnd now we force a ResponseError with a fake JSONReader. But first we\nneed to replace our IJSONReader utility:\n\n  >>> from z3c.json.interfaces import IJSONReader\n  >>> sm = site.getSiteManager()\n  >>> fakeJSONReader = testing.ForceResponseErrorJSONReader()\n  >>> sm.registerUtility(fakeJSONReader, IJSONReader)\n\nalso setup the site hook:\n\n  >>> from zope.component import hooks\n  >>> hooks.setSite(site)\n\nand just call a method this will now raise a ResponseError:\n\n  >>> proxy = JSONRPCTestProxy(siteURL + '/content')\n  >>> proxy.hello()\n  Traceback (most recent call last):\n  ...\n  ResponseError: Unacceptable JSON expression: {\"id\":\"jsonrpc\", \"method\":\"hello\", \"no-params\"}\n\nthe error message is stored in the proxy too:\n\n  >>> proxy.error\n  u'Unacceptable JSON expression: {\"id\":\"jsonrpc\", \"method\":\"hello\", \"no-params\"}'\n\n\nTransport\n~~~~~~~~~\n\nWe used the JSONRPCTestProxy here for testing. This JSON-RPC proxy is a wrapper\nfor the original JSONRPCProxy and adds handleErrors support and a special\nTransport layer which uses a testing caller. You can use one of the different\nTransport layers defined in the z3c.json.transport module in real usecases\ntogether with the default JSONRPCProxy implementation.\n\n\ncleanup\n-------\n\nNow we need to clean up the custom module.\n\n  >>> del sys.modules['custom']\n\n\n==========\nDirectives\n==========\n\nJSONRPC directive\n-----------------\n\nShow how we can use the jsonrpc directive. Register the meta configuration for \nthe directive.\n\n  >>> from zope.configuration import xmlconfig\n  >>> import z3c.jsonrpc\n  >>> context = xmlconfig.file('meta.zcml', z3c.jsonrpc)\n\nNow register the view defined in the testing module within the ``z3c:jsonrpc``\ndirective:\n\n  >>> context = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns:z3c=\"http://namespaces.zope.org/z3c\">\n  ...   <z3c:jsonrpc\n  ...       for=\"z3c.jsonrpc.testing.IA\"\n  ...       class=\"z3c.jsonrpc.testing.MethodsA\"\n  ...       permission=\"zope.Public\"\n  ...       methods=\"hello\"\n  ...       />\n  ... </configure>\n  ... \"\"\", context)\n\nLet's check if the view is registered as adapter:\n\n  >>> import zope.component\n  >>> from z3c.jsonrpc.testing import A\n  >>> from z3c.jsonrpc.testing import TestRequest\n  >>> a = A()\n  >>> request = TestRequest()\n  >>> zope.component.queryMultiAdapter((a, request), name='hello')\n  <z3c.jsonrpc.zcml.MethodsA object at ...>\n\nWe can also use a layer interface wich will restrict our view registration to\na specific request type. Provide such a request type layer:\n\n  >>> from z3c.jsonrpc.testing import IJSONRPCTestLayer\n  >>> demoRequest = TestRequest()\n  >>> zope.interface.directlyProvides(demoRequest, IJSONRPCTestLayer)\n\nAnd register a new JSON-RPC view:\n\n  >>> context = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns:z3c=\"http://namespaces.zope.org/z3c\">\n  ...   <z3c:jsonrpc\n  ...       for=\"z3c.jsonrpc.testing.IB\"\n  ...       class=\"z3c.jsonrpc.testing.MethodsB\"\n  ...       permission=\"zope.Public\"\n  ...       methods=\"hello\"\n  ...       layer=\"z3c.jsonrpc.testing.IJSONRPCTestLayer\"\n  ...       />\n  ... </configure>\n  ... \"\"\", context)\n\nSetup a new content stub:\n\n  >>> from z3c.jsonrpc.testing import B\n  >>> b = B()\n\nAnd test the view within our new layer:\n\n  >>> zope.component.queryMultiAdapter((b, demoRequest), name='hello')\n  <z3c.jsonrpc.zcml.MethodsB object at ...>\n\nNote the object b does not know the view within the default request layer:\n\n  >>> zope.component.queryMultiAdapter((b, request), name='hello') is None\n  True\n\n\nsetDefaultJSONRPCSkin\n---------------------\n\n  >>> from z3c.jsonrpc import interfaces\n  >>> import z3c.jsonrpc.zcml\n\n  >>> class IMySkin(zope.interface.Interface):\n  ...     pass\n  >>> zope.interface.directlyProvides(IMySkin, interfaces.IJSONRPCSkinType)\n\nBefore we setup a default request, we try to set a default request for our\nrequest:\n\n  >>> from zope.publisher.skinnable import setDefaultSkin\n  >>> setDefaultSkin(request)\n\nOur request should not provide any default kins since we didn't register any:\n\n  >>> IMySkin.providedBy(request)\n  False\n\nNow let's register a default skin:\n\n  >>> zope.component.provideUtility(IMySkin, interfaces.IJSONRPCSkinType,\n  ...     name='JSONRPC')\n  >>> z3c.jsonrpc.zcml.setDefaultJSONRPCSkin('JSONRPC')\n\nWe can lookup a default skin from the adapter registry: \n\n  >>> from zope.publisher.interfaces import IDefaultSkin\n  >>> adapters = zope.component.getSiteManager().adapters\n  >>> default = adapters.lookup((interfaces.IJSONRPCRequest,), IDefaultSkin, '')\n  >>> default is IMySkin\n  True\n\nSince we have a default skin utility registered as a skin type for our \nrequest, a new request instance should provide the default skin:\n\n  >>> request = TestRequest()\n  >>> setDefaultSkin(request)\n  >>> IMySkin.providedBy(request)\n  True\n\nWe can get the applied default skin by look for our skin type:\n\n  >>> for iface in zope.interface.providedBy(request):\n  ...     if interfaces.IJSONRPCSkinType.providedBy(iface):\n  ...         print \"%s\" % iface\n  <InterfaceClass README.IMySkin>\n\n\n=======\nCHANGES\n=======\n\n0.7.2 (2013-10-11)\n------------------\n\n- ``handleException``: provide human readable traceback\n\n\n0.7.1 (2012-11-27)\n------------------\n\n- Fix ``JSONRPCTestTransport`` to include the request full host.\n  Until now it ate the port.\n\n\n0.7.0 (2012-03-25)\n------------------\n\n- Fix: added missing exception import for ParseError in publisher.processInputs\n\n- import doctest from python\n\n\n0.6.0 (2010-01-27)\n------------------\n\n- cleanup setup dependencies, adjust ftesting.zcml\n\n- adjust coverage report setup\n\n- implemented error view concept which will work with ZopePublication\n\n- implemented default error view for known zope and JSON-RPC errors\n\n- use DirectResult in response\n\n- removed unauthenticated error view. This was not working and requires a\n  custom concept supported by the used java script library used at client\n  side\n\n\nVersion 0.5.4 (2009-04-07)\n--------------------------\n\n- handle empty and none-existing params in jsonrpc requests\n\n\nVersion 0.5.3 (2009-03-10)\n--------------------------\n\n- Fix: reflect skin lookup changes in zope.publisher. Use the new skinnable\n  concept.\n\n- Fix: The default skin didn't get applied based on the inherited concept give\n  from the zope.publisher.browser implementation because our JSON-RPC request\n  doesn't provide IBrowserRequest. Added a workaround which will apply a given\n  IDefaultSkin during request instance creation.\n\n\nVersion 0.5.2 (2009-02-24)\n--------------------------\n\n- added tests for all JSON-RPC versions\n\n- Feature: implemented defaultJSONRPCSkin directive\n\n- Feature: support non positional arguments for all jsonrpc versions. There is\n  now no distinction in handling method parameters for all supported versions.\n\n- Fix: for jsonrpc version 1.1 :\n   - must not provide \"error\" property in case of success\n   - must not provide \"result\" property in case of error\n\n- Fix: removed develop path for z3c.json from buildout.cfg\n\n- Fix: publisher checks for version id as a string not a float\n\n- Feature: Implemented JSON-RPC 2.0 specification. Use JSON-RPC 2.0 version as\n  default. Optional the version 1.0 and 1.1 can be set. See JSON-RPC 2.0\n  specification for more information.\n\n- Feature: Added initial version of JSON-RPC exceptions.\n\n- Added explicit test cleanup since some zope testing change left over a\n  global adapter registry from old connections\n\n- Removed unused dependency to z3c.layer in test setup\n\n- Removed unused dependency on z3c.i18n.\n\n\nVersion 0.5.1 (2008-01-24)\n--------------------------\n\n- Improve meta-data.\n\n- Bug: The skin code relied on un-released API that was actually later\n  reverted.\n\n\nVersion 0.5.0 (2008-01-21)\n--------------------------\n\n- Initial Release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/z3c.jsonrpc", "keywords": "zope3 z3c json rpc json-rpc server client", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "z3c.jsonrpc", "package_url": "https://pypi.org/project/z3c.jsonrpc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.jsonrpc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/z3c.jsonrpc"}, "release_url": "https://pypi.org/project/z3c.jsonrpc/0.7.2/", "requires_dist": null, "requires_python": null, "summary": "JSON RPC server and client implementation for Zope3", "version": "0.7.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides an JSON-RPC server implementation for Zope3.</p>\n<div id=\"detailed-documentation\">\n<h2>Detailed Documentation</h2>\n<div id=\"jsonrpc\">\n<h3>JSONRPC</h3>\n<p>JSON is javascript object notation. JSON-RPC performs the same service\nas XML-RPC, except the transport is JSON instead of XML.</p>\n<p>Many thanks to Jim Washington for the work on zif.jsonserver. This project uses\nmany code writen by Jim. I implemented an additional python JSONRPC proxy which\ncan communicate with the server. This means we can use this library to call\nJSON from python to python. The JSON-RPC proxy uses similar patterns like the\nXML-RPC implementation.</p>\n<p>There is also an additional xmlhttp and json javascript implementation which\noffers a JSON-RPC proxy implementation for JavaScript.</p>\n<p>This project provides the proposed request type \u201capplication/json\u201d. The request\ntype \u201capplication/json-rpc\u201d is supported as long it is not officialy deprecated.</p>\n<p>The goal of this project is to provide a JSON-RPC implementation. Simple\nBrowser views which handle JSON calls with a BrowserRequest are not supported\nby this package. I\u2019m still not sure if this is good or bad and in which\ndirection I will go with this package.</p>\n<p>Some of my goals are right now, but can change in the future if I\u2019ll understand\nall the concepts around JSON, e.g. JSPON, JSONP, CrossSite etc:</p>\n<ul>\n<li>provide a secure way to handle JSON calls from client to server.\nI hope we can implement JSONRequest some days. CrossSite seems to use a\nintereting concept</li>\n<li>Simple pythonic implementation</li>\n<li>Use together with JQuery (see <a href=\"http://www.jquery.org\" rel=\"nofollow\">http://www.jquery.org</a>).</li>\n<li>No other dependency then JQuery and basic zope packages.</li>\n<li>well tested (this is not the case for JavaScript right now)</li>\n</ul>\n<div id=\"about-json\">\n<h4>About JSON</h4>\n<p>See www.json.org for more information about JSON.</p>\n<p>See <a href=\"http://json-rpc.org/wd/JSON-RPC-1-1-WD-20060807.html\" rel=\"nofollow\">http://json-rpc.org/wd/JSON-RPC-1-1-WD-20060807.html</a> for more information\nabout the JSON 1.1 specification.</p>\n</div>\n<div id=\"what-this-package-can-t-do\">\n<h4>What this package can\u2019t do</h4>\n<p>JSON and this package have different limitations. This package can right now\nnot handle the following tasks:</p>\n<ul>\n<li>Handle fileupload</li>\n<li>Handle GET request</li>\n</ul>\n<p>Note that the JSONRPCRequest implementation is based on the IHTTPRequest, this\nmeans that there is no other browser page available if you call them in\npython, e.g. getMultiAdapter((context, request), name=\u2019myViewName\u2019). This is\nexplicitly done this way. If you\u2019d like to use content form such browser pages\nin a JSON request/call, you can inherit your skin form IJSONRPCLayer and\nIBrowserRequest and register your JSON-RPC views for this custom layer.</p>\n</div>\n<div id=\"json-rpc-server\">\n<h4>JSON-RPC server</h4>\n<p>The JSON server looks for content-type \u201capplication/json\u201d, and handles those\nrequests as JSON-RPC. The official mime-type for JSON is \u201capplication/json\u201d\nThe old content type <tt><span class=\"pre\">application/json-rpc</span></tt> is supported too.</p>\n<p>Let\u2019s define a content object:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.interface\n&gt;&gt;&gt; class IDemoContent(zope.interface.Interface):\n...     \"\"\"Demo content interface.\"\"\"\n</pre>\n<pre>&gt;&gt;&gt; import persistent\n&gt;&gt;&gt; class DemoContent(persistent.Persistent):\n...     \"\"\"Demo content.\"\"\"\n...     zope.interface.implements(IDemoContent)\n</pre>\n</blockquote>\n<p>And define a JSONRPC method view:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.jsonrpc import publisher\n&gt;&gt;&gt; class DemoView(publisher.MethodPublisher):\n...     \"\"\"Sample JSON view.\"\"\"\n...\n...     def hello(self):\n...         return u\"Hello World\"\n...\n...     def greeting(self, name):\n...         return u\"Hello %s\" % name\n...\n...     def mixedparams(self, prefix, bar=None, foo=None):\n...         # Note; keyword arguments can be found in request.form\n...         return u\"%s %s %s\" % (prefix, bar, foo)\n...\n...     def kws(self, adam=None, foo=None, bar=None):\n...         # Note; keyword arguments can be found in request.form\n...         a = self.request.get('adam')\n...         b = self.request.form.get('foo')\n...         c = self.request.form.get('bar')\n...         return u\"%s %s %s\" % (a, b, c)\n...\n...     def showId(self):\n...         return u\"The json id is: %s\" % self.request.jsonId\n...\n...     def forceValueError(self):\n...         raise ValueError('Something was wrong in server method.')\n</pre>\n</blockquote>\n<p>Let\u2019s define a content object that is a container:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.interface\n&gt;&gt;&gt; class IDemoContainer(zope.container.interfaces.IReadContainer):\n...     \"\"\"Demo container interface.\"\"\"\n</pre>\n<pre>&gt;&gt;&gt; import persistent\n&gt;&gt;&gt; from zope.container import btree\n</pre>\n<pre>&gt;&gt;&gt; class DemoContainer(btree.BTreeContainer):\n...     \"\"\"Demo container.\"\"\"\n...     zope.interface.implements(IDemoContainer)\n</pre>\n</blockquote>\n<p>And define a JSONRPC method view:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.jsonrpc import publisher\n&gt;&gt;&gt; class DemoContainerView(publisher.MethodPublisher):\n...     \"\"\"Sample JSON view.\"\"\"\n...\n...     def available(self):\n...         return u\"Hello World\"\n...\n...     def greeting(self, name):\n...         return u\"Hello %s\" % name\n...\n...     def mixedparams(self, prefix, foo=None, bar=None):\n...         # Note; keyword arguments can be found in request.form\n...         return u\"%s %s %s\" % (prefix, foo, bar)\n...\n...     def kws(self, adam=None, foo=None, bar=None):\n...         # Note; keyword arguments can be found in request.form\n...         a = self.request.get('adam')\n...         b = self.request.form.get('foo')\n...         c = self.request.form.get('bar')\n...         return u\"%s %s %s\" % (a, b, c)\n...\n...     def showId(self):\n...         return u\"The json id is: %s\" % self.request.jsonId\n...\n...     def forceValueError(self):\n...         raise ValueError('Something was wrong in server method.')\n</pre>\n</blockquote>\n<p>Make them available under the fake package <tt>jsonsamples</tt>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.modules['custom'] = type('Module', (), {})()\n&gt;&gt;&gt; sys.modules['custom'].IDemoContent = IDemoContent\n&gt;&gt;&gt; sys.modules['custom'].DemoContent = DemoContent\n&gt;&gt;&gt; sys.modules['custom'].DemoView = DemoView\n&gt;&gt;&gt; sys.modules['custom'].IDemoContainer = IDemoContainer\n&gt;&gt;&gt; sys.modules['custom'].DemoContainer = DemoContainer\n&gt;&gt;&gt; sys.modules['custom'].DemoContainerView = DemoContainerView\n</pre>\n</blockquote>\n<p>Let\u2019s show how we can register a jsonrpc view:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.configuration import xmlconfig\n&gt;&gt;&gt; import z3c.jsonrpc\n&gt;&gt;&gt; context = xmlconfig.file('meta.zcml', z3c.jsonrpc)\n&gt;&gt;&gt; context = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns:z3c=\"http://namespaces.zope.org/z3c\"&gt;\n...   &lt;z3c:jsonrpc\n...       for=\"custom.IDemoContent\"\n...       class=\"custom.DemoView\"\n...       permission=\"zope.Public\"\n...       methods=\"hello greeting mixedparams kws showId forceValueError\"\n...       layer=\"z3c.jsonrpc.testing.IJSONRPCTestSkin\"\n...       /&gt;\n... &lt;/configure&gt;\n... \"\"\", context)\n</pre>\n</blockquote>\n<p>Let\u2019s show how we can register a jsonrpc view for the container:\n(The container class needs permission configuration too)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; context = xmlconfig.file('meta.zcml', z3c.jsonrpc)\n&gt;&gt;&gt; context = xmlconfig.file('meta.zcml', zope.security, context)\n&gt;&gt;&gt; context = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns:z3c=\"http://namespaces.zope.org/z3c\"\n...     xmlns=\"http://namespaces.zope.org/zope\"&gt;\n...     &lt;class class=\"custom.DemoContainer\"&gt;\n...       &lt;allow\n...           interface=\"custom.IDemoContainer\"\n...           /&gt;\n...     &lt;/class&gt;\n...   &lt;z3c:jsonrpc\n...       for=\"custom.IDemoContainer\"\n...       class=\"custom.DemoContainerView\"\n...       permission=\"zope.Public\"\n...       methods=\"available greeting mixedparams kws showId forceValueError\"\n...       layer=\"z3c.jsonrpc.testing.IJSONRPCTestSkin\"\n...       /&gt;\n... &lt;/configure&gt;\n... \"\"\", context)\n</pre>\n</blockquote>\n<p>Now we will setup a content object in our site:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; site  = getRootFolder()\n&gt;&gt;&gt; content = DemoContent()\n&gt;&gt;&gt; site['content'] = content\n&gt;&gt;&gt; container = DemoContainer()\n&gt;&gt;&gt; site['container'] = container\n</pre>\n</blockquote>\n<p>Now we can call the method from our JSONRPC view:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.jsonrpc import testing\n&gt;&gt;&gt; request = testing.TestRequest()\n&gt;&gt;&gt; demoView = DemoView(content, request)\n&gt;&gt;&gt; demoView.hello()\nu'Hello World'\n</pre>\n</blockquote>\n<p>But this is not intuitive. Let\u2019s see how we can traverse to the method <tt>hello</tt>\nwith the traverser:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.jsonrpc.publisher import MethodTraverser\n&gt;&gt;&gt; methodTraverser = MethodTraverser(demoView, request)\n&gt;&gt;&gt; methodTraverser.publishTraverse(request, 'hello')()\nu'Hello World'\n</pre>\n</blockquote>\n<p>Now we try to access the JSON-RPC view method with a test browser. As you can\nsee, there is no view accessible. This is because the JSONRPC view is not a\nbrowser view and is not traversable. The error shows that the request factory\nfalls back to the browser request factory:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.testbrowser.testing import Browser\n&gt;&gt;&gt; browser = Browser()\n&gt;&gt;&gt; browser.handleErrors = False\n&gt;&gt;&gt; browser.addHeader('Accept-Language', 'en')\n&gt;&gt;&gt; browser.addHeader('Content-Type', 'application/json')\n&gt;&gt;&gt; siteURL = 'http://localhost/++skin++JSONRPCTestSkin'\n&gt;&gt;&gt; browser.open(siteURL + '/content/hello')\nTraceback (most recent call last):\n...\nNotFound: Object: &lt;zope.site.folder.Folder...: u'++skin++JSONRPCTestSkin'\n</pre>\n</blockquote>\n</div>\n<div id=\"testing\">\n<h4>Testing</h4>\n<p>If you need to test a JSONRPC view you can use the test proxy like shown\nbelow in the <tt><span class=\"pre\">JSON-RPC</span> proxy</tt> section.</p>\n</div>\n<div id=\"json-rpc-proxy\">\n<h4>JSON-RPC proxy</h4>\n<p>The jsonrpc package provides also a JSON-RPC proxy implementation. This\nimplementation is similar to the one known from xmlrpclib except that it can\nhandle JSON instead of XML.</p>\n<p>Let\u2019s try to call our method called <tt>hello</tt> we defined before:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.jsonrpc.testing import JSONRPCTestProxy\n&gt;&gt;&gt; proxy = JSONRPCTestProxy(siteURL + '/content')\n&gt;&gt;&gt; proxy.hello()\nu'Hello World'\n</pre>\n</blockquote>\n<p>As defined in the jsonrpc spec it is also allowed to omit the params\ncompletly we need to test this with a post directly because the\ntesting proxy always sets the params.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; browser.post(siteURL + '/content', \"{'method':'hello', 'id':1}\",\n...              content_type='application/json')\n&gt;&gt;&gt; browser.contents\n'{\"jsonrpc\":\"2.0\",\"result\":\"Hello World\",\"id\":1}'\n&gt;&gt;&gt; browser.post(siteURL + '/content', \"{'method':'hello', 'params':null, 'id':1}\",\n...              content_type='application/json')\n&gt;&gt;&gt; browser.contents\n'{\"jsonrpc\":\"2.0\",\"result\":\"Hello World\",\"id\":1}'\n</pre>\n<pre>&gt;&gt;&gt; proxy2 = JSONRPCTestProxy(siteURL + '/container')\n&gt;&gt;&gt; proxy2.available()\nu'Hello World'\n</pre>\n</blockquote>\n<p>Now let\u2019s make a remote procedure call with a argument:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.greeting(u'Jessy')\nu'Hello Jessy'\n</pre>\n</blockquote>\n<p>Let\u2019s call named arguments:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.kws(bar=u'BAR', foo=u'FOO')\nu'None FOO BAR'\n</pre>\n</blockquote>\n<p>There is also an <tt>id</tt> in the json response. Let\u2019s use such a json request id\nin our JSONRPCProxy:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy = JSONRPCTestProxy(siteURL + '/content', jsonId = u'my id')\n&gt;&gt;&gt; proxy.showId()\nu'The json id is: my id'\n</pre>\n</blockquote>\n<p>The proxy also knows this id as jsonId:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.jsonId\nu'my id'\n</pre>\n</blockquote>\n</div>\n<div id=\"json-rpc-versions\">\n<h4>JSON-RPC Versions</h4>\n<p>Let\u2019s test the different JSON-RPC versions starting with version 1.0:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; v1 = JSONRPCTestProxy(siteURL + '/container', jsonVersion='1.0')\n&gt;&gt;&gt; v1.available()\nu'Hello World'\n</pre>\n<pre>&gt;&gt;&gt; v1.greeting(u'Jessy')\nu'Hello Jessy'\n</pre>\n<pre>&gt;&gt;&gt; v1.kws(bar=u'BAR', foo=u'FOO')\nu'None FOO BAR'\n</pre>\n<pre>&gt;&gt;&gt; v1 = JSONRPCTestProxy(siteURL + '/content', jsonId = u'my id',\n...     jsonVersion='1.0')\n&gt;&gt;&gt; v1.showId()\nu'The json id is: my id'\n</pre>\n<pre>&gt;&gt;&gt; v1.jsonId\nu'my id'\n</pre>\n</blockquote>\n<p>Now test with JSON-RPC version 1.1:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; v11 = JSONRPCTestProxy(siteURL + '/container', jsonVersion='1.1')\n&gt;&gt;&gt; v11.available()\nu'Hello World'\n</pre>\n<pre>&gt;&gt;&gt; v11.greeting(u'Jessy')\nu'Hello Jessy'\n</pre>\n<pre>&gt;&gt;&gt; v11.kws(bar=u'BAR', foo=u'FOO')\nu'None FOO BAR'\n</pre>\n<pre>&gt;&gt;&gt; v11 = JSONRPCTestProxy(siteURL + '/content', jsonId = u'my id',\n...     jsonVersion='1.1')\n&gt;&gt;&gt; v11.showId()\nu'The json id is: my id'\n</pre>\n<pre>&gt;&gt;&gt; v11.jsonId\nu'my id'\n</pre>\n</blockquote>\n<p>Now test with JSON-RPC version 2.0:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; v2 = JSONRPCTestProxy(siteURL + '/container', jsonVersion='2.0')\n&gt;&gt;&gt; v2.available()\nu'Hello World'\n</pre>\n<pre>&gt;&gt;&gt; v2.greeting(u'Jessy')\nu'Hello Jessy'\n</pre>\n<pre>&gt;&gt;&gt; v2.kws(bar=u'BAR', foo=u'FOO')\nu'None FOO BAR'\n</pre>\n<pre>&gt;&gt;&gt; v2 = JSONRPCTestProxy(siteURL + '/content', jsonId = u'my id',\n...     jsonVersion='2.0')\n&gt;&gt;&gt; v2.showId()\nu'The json id is: my id'\n</pre>\n<pre>&gt;&gt;&gt; v2.jsonId\nu'my id'\n</pre>\n</blockquote>\n</div>\n<div id=\"mixed-parameters\">\n<h4>Mixed parameters</h4>\n<p>Note the keyword arguments will get stored in the request.form. Important\nto know is that JSON-RPC does not support positional and named arguments in\none method call.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; v1.mixedparams('Hello', foo=u'FOO', bar=u'BAR')\nTraceback (most recent call last):\n...\nValueError: Mixing positional and named parameters in one call is not possible\n</pre>\n<pre>&gt;&gt;&gt; v11.mixedparams('Hello', foo=u'FOO', bar=u'BAR')\nTraceback (most recent call last):\n...\nValueError: Mixing positional and named parameters in one call is not possible\n</pre>\n<pre>&gt;&gt;&gt; v2.mixedparams('Hello', foo=u'FOO', bar=u'BAR')\nTraceback (most recent call last):\n...\nValueError: Mixing positional and named parameters in one call is not possible\n</pre>\n</blockquote>\n</div>\n<div id=\"error-handling\">\n<h4>Error handling</h4>\n<p>See what happens if the server raises an Exception. We will get a response\nerror with additional error content:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.forceValueError()\nTraceback (most recent call last):\n...\nResponseError: Received error from server: ...\n</pre>\n</blockquote>\n<p>and the error content looks like:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.error\n{u'message': u'Internal error', u'code': -32603, u'data': {u'i18nMessage': u'Internal error'}}\n</pre>\n</blockquote>\n<p>The error property gets reset on the next successfull call:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; x = proxy.showId()\n&gt;&gt;&gt; proxy.error is None\nTrue\n</pre>\n</blockquote>\n<p>And now we force a ResponseError with a fake JSONReader. But first we\nneed to replace our IJSONReader utility:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.json.interfaces import IJSONReader\n&gt;&gt;&gt; sm = site.getSiteManager()\n&gt;&gt;&gt; fakeJSONReader = testing.ForceResponseErrorJSONReader()\n&gt;&gt;&gt; sm.registerUtility(fakeJSONReader, IJSONReader)\n</pre>\n</blockquote>\n<p>also setup the site hook:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.component import hooks\n&gt;&gt;&gt; hooks.setSite(site)\n</pre>\n</blockquote>\n<p>and just call a method this will now raise a ResponseError:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy = JSONRPCTestProxy(siteURL + '/content')\n&gt;&gt;&gt; proxy.hello()\nTraceback (most recent call last):\n...\nResponseError: Unacceptable JSON expression: {\"id\":\"jsonrpc\", \"method\":\"hello\", \"no-params\"}\n</pre>\n</blockquote>\n<p>the error message is stored in the proxy too:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; proxy.error\nu'Unacceptable JSON expression: {\"id\":\"jsonrpc\", \"method\":\"hello\", \"no-params\"}'\n</pre>\n</blockquote>\n<div id=\"transport\">\n<h5>Transport</h5>\n<p>We used the JSONRPCTestProxy here for testing. This JSON-RPC proxy is a wrapper\nfor the original JSONRPCProxy and adds handleErrors support and a special\nTransport layer which uses a testing caller. You can use one of the different\nTransport layers defined in the z3c.json.transport module in real usecases\ntogether with the default JSONRPCProxy implementation.</p>\n</div>\n</div>\n<div id=\"cleanup\">\n<h4>cleanup</h4>\n<p>Now we need to clean up the custom module.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; del sys.modules['custom']\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"directives\">\n<h3>Directives</h3>\n<div id=\"jsonrpc-directive\">\n<h4>JSONRPC directive</h4>\n<p>Show how we can use the jsonrpc directive. Register the meta configuration for\nthe directive.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.configuration import xmlconfig\n&gt;&gt;&gt; import z3c.jsonrpc\n&gt;&gt;&gt; context = xmlconfig.file('meta.zcml', z3c.jsonrpc)\n</pre>\n</blockquote>\n<p>Now register the view defined in the testing module within the <tt>z3c:jsonrpc</tt>\ndirective:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; context = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns:z3c=\"http://namespaces.zope.org/z3c\"&gt;\n...   &lt;z3c:jsonrpc\n...       for=\"z3c.jsonrpc.testing.IA\"\n...       class=\"z3c.jsonrpc.testing.MethodsA\"\n...       permission=\"zope.Public\"\n...       methods=\"hello\"\n...       /&gt;\n... &lt;/configure&gt;\n... \"\"\", context)\n</pre>\n</blockquote>\n<p>Let\u2019s check if the view is registered as adapter:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.component\n&gt;&gt;&gt; from z3c.jsonrpc.testing import A\n&gt;&gt;&gt; from z3c.jsonrpc.testing import TestRequest\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; request = TestRequest()\n&gt;&gt;&gt; zope.component.queryMultiAdapter((a, request), name='hello')\n&lt;z3c.jsonrpc.zcml.MethodsA object at ...&gt;\n</pre>\n</blockquote>\n<p>We can also use a layer interface wich will restrict our view registration to\na specific request type. Provide such a request type layer:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.jsonrpc.testing import IJSONRPCTestLayer\n&gt;&gt;&gt; demoRequest = TestRequest()\n&gt;&gt;&gt; zope.interface.directlyProvides(demoRequest, IJSONRPCTestLayer)\n</pre>\n</blockquote>\n<p>And register a new JSON-RPC view:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; context = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns:z3c=\"http://namespaces.zope.org/z3c\"&gt;\n...   &lt;z3c:jsonrpc\n...       for=\"z3c.jsonrpc.testing.IB\"\n...       class=\"z3c.jsonrpc.testing.MethodsB\"\n...       permission=\"zope.Public\"\n...       methods=\"hello\"\n...       layer=\"z3c.jsonrpc.testing.IJSONRPCTestLayer\"\n...       /&gt;\n... &lt;/configure&gt;\n... \"\"\", context)\n</pre>\n</blockquote>\n<p>Setup a new content stub:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.jsonrpc.testing import B\n&gt;&gt;&gt; b = B()\n</pre>\n</blockquote>\n<p>And test the view within our new layer:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.component.queryMultiAdapter((b, demoRequest), name='hello')\n&lt;z3c.jsonrpc.zcml.MethodsB object at ...&gt;\n</pre>\n</blockquote>\n<p>Note the object b does not know the view within the default request layer:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.component.queryMultiAdapter((b, request), name='hello') is None\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"setdefaultjsonrpcskin\">\n<h4>setDefaultJSONRPCSkin</h4>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.jsonrpc import interfaces\n&gt;&gt;&gt; import z3c.jsonrpc.zcml\n</pre>\n<pre>&gt;&gt;&gt; class IMySkin(zope.interface.Interface):\n...     pass\n&gt;&gt;&gt; zope.interface.directlyProvides(IMySkin, interfaces.IJSONRPCSkinType)\n</pre>\n</blockquote>\n<p>Before we setup a default request, we try to set a default request for our\nrequest:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.publisher.skinnable import setDefaultSkin\n&gt;&gt;&gt; setDefaultSkin(request)\n</pre>\n</blockquote>\n<p>Our request should not provide any default kins since we didn\u2019t register any:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; IMySkin.providedBy(request)\nFalse\n</pre>\n</blockquote>\n<p>Now let\u2019s register a default skin:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.component.provideUtility(IMySkin, interfaces.IJSONRPCSkinType,\n...     name='JSONRPC')\n&gt;&gt;&gt; z3c.jsonrpc.zcml.setDefaultJSONRPCSkin('JSONRPC')\n</pre>\n</blockquote>\n<p>We can lookup a default skin from the adapter registry:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.publisher.interfaces import IDefaultSkin\n&gt;&gt;&gt; adapters = zope.component.getSiteManager().adapters\n&gt;&gt;&gt; default = adapters.lookup((interfaces.IJSONRPCRequest,), IDefaultSkin, '')\n&gt;&gt;&gt; default is IMySkin\nTrue\n</pre>\n</blockquote>\n<p>Since we have a default skin utility registered as a skin type for our\nrequest, a new request instance should provide the default skin:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; request = TestRequest()\n&gt;&gt;&gt; setDefaultSkin(request)\n&gt;&gt;&gt; IMySkin.providedBy(request)\nTrue\n</pre>\n</blockquote>\n<p>We can get the applied default skin by look for our skin type:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for iface in zope.interface.providedBy(request):\n...     if interfaces.IJSONRPCSkinType.providedBy(iface):\n...         print \"%s\" % iface\n&lt;InterfaceClass README.IMySkin&gt;\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes\">\n<h3>CHANGES</h3>\n<div id=\"id1\">\n<h4>0.7.2 (2013-10-11)</h4>\n<ul>\n<li><tt>handleException</tt>: provide human readable traceback</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>0.7.1 (2012-11-27)</h4>\n<ul>\n<li>Fix <tt>JSONRPCTestTransport</tt> to include the request full host.\nUntil now it ate the port.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>0.7.0 (2012-03-25)</h4>\n<ul>\n<li>Fix: added missing exception import for ParseError in publisher.processInputs</li>\n<li>import doctest from python</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>0.6.0 (2010-01-27)</h4>\n<ul>\n<li>cleanup setup dependencies, adjust ftesting.zcml</li>\n<li>adjust coverage report setup</li>\n<li>implemented error view concept which will work with ZopePublication</li>\n<li>implemented default error view for known zope and JSON-RPC errors</li>\n<li>use DirectResult in response</li>\n<li>removed unauthenticated error view. This was not working and requires a\ncustom concept supported by the used java script library used at client\nside</li>\n</ul>\n</div>\n<div id=\"version-0-5-4-2009-04-07\">\n<h4>Version 0.5.4 (2009-04-07)</h4>\n<ul>\n<li>handle empty and none-existing params in jsonrpc requests</li>\n</ul>\n</div>\n<div id=\"version-0-5-3-2009-03-10\">\n<h4>Version 0.5.3 (2009-03-10)</h4>\n<ul>\n<li>Fix: reflect skin lookup changes in zope.publisher. Use the new skinnable\nconcept.</li>\n<li>Fix: The default skin didn\u2019t get applied based on the inherited concept give\nfrom the zope.publisher.browser implementation because our JSON-RPC request\ndoesn\u2019t provide IBrowserRequest. Added a workaround which will apply a given\nIDefaultSkin during request instance creation.</li>\n</ul>\n</div>\n<div id=\"version-0-5-2-2009-02-24\">\n<h4>Version 0.5.2 (2009-02-24)</h4>\n<ul>\n<li>added tests for all JSON-RPC versions</li>\n<li>Feature: implemented defaultJSONRPCSkin directive</li>\n<li>Feature: support non positional arguments for all jsonrpc versions. There is\nnow no distinction in handling method parameters for all supported versions.</li>\n<li><dl>\n<dt>Fix: for jsonrpc version 1.1 :</dt>\n<dd><ul>\n<li>must not provide \u201cerror\u201d property in case of success</li>\n<li>must not provide \u201cresult\u201d property in case of error</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Fix: removed develop path for z3c.json from buildout.cfg</li>\n<li>Fix: publisher checks for version id as a string not a float</li>\n<li>Feature: Implemented JSON-RPC 2.0 specification. Use JSON-RPC 2.0 version as\ndefault. Optional the version 1.0 and 1.1 can be set. See JSON-RPC 2.0\nspecification for more information.</li>\n<li>Feature: Added initial version of JSON-RPC exceptions.</li>\n<li>Added explicit test cleanup since some zope testing change left over a\nglobal adapter registry from old connections</li>\n<li>Removed unused dependency to z3c.layer in test setup</li>\n<li>Removed unused dependency on z3c.i18n.</li>\n</ul>\n</div>\n<div id=\"version-0-5-1-2008-01-24\">\n<h4>Version 0.5.1 (2008-01-24)</h4>\n<ul>\n<li>Improve meta-data.</li>\n<li>Bug: The skin code relied on un-released API that was actually later\nreverted.</li>\n</ul>\n</div>\n<div id=\"version-0-5-0-2008-01-21\">\n<h4>Version 0.5.0 (2008-01-21)</h4>\n<ul>\n<li>Initial Release</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 886947, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "2a1dbe5a90262e81ec17675794232a44", "sha256": "307091c81c07c1bf2827fa5d3d404cbd9217e1b3d18a5f759376c40c74aa02e1"}, "downloads": -1, "filename": "z3c.jsonrpc-0.5.0.tar.gz", "has_sig": false, "md5_digest": "2a1dbe5a90262e81ec17675794232a44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19010, "upload_time": "2008-01-21T07:55:18", "upload_time_iso_8601": "2008-01-21T07:55:18Z", "url": "https://files.pythonhosted.org/packages/95/78/787227f59324ef72b86665ababd6649f92e3f78b3241b0766177ad8d5166/z3c.jsonrpc-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "8944dec7846fb4adf4602794b8d46130", "sha256": "07e5a324e39d432428f37f0952ecd6420ca434e0cf879524f7a8223495a931bd"}, "downloads": -1, "filename": "z3c.jsonrpc-0.5.1.tar.gz", "has_sig": false, "md5_digest": "8944dec7846fb4adf4602794b8d46130", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26381, "upload_time": "2008-01-24T22:47:36", "upload_time_iso_8601": "2008-01-24T22:47:36Z", "url": "https://files.pythonhosted.org/packages/30/1e/1f70a21e23aeaf52756e2ef73622e2c9b91ca5135f01a8a2138e78af35ed/z3c.jsonrpc-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "9523e60c21a1a10783bee2aaf8019f49", "sha256": "d7ed5f003869af7160180ac8c20e5e3a5c94f9ac14d1263650b23d06d161d3bd"}, "downloads": -1, "filename": "z3c.jsonrpc-0.5.2.zip", "has_sig": false, "md5_digest": "9523e60c21a1a10783bee2aaf8019f49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47204, "upload_time": "2009-02-24T04:56:39", "upload_time_iso_8601": "2009-02-24T04:56:39.771051Z", "url": "https://files.pythonhosted.org/packages/7d/48/65ba86a86ac6ca1175a68208768a21bc5de2e72d6676fdcb10f5e7cf857d/z3c.jsonrpc-0.5.2.zip", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "0b1ee41a84a697be599aa06ac1e22e01", "sha256": "c66498483caa78393eb45d4cb6bcb3e10fbe280d97867768d38d3354561bfd67"}, "downloads": -1, "filename": "z3c.jsonrpc-0.5.3.zip", "has_sig": false, "md5_digest": "0b1ee41a84a697be599aa06ac1e22e01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48088, "upload_time": "2009-03-10T04:37:54", "upload_time_iso_8601": "2009-03-10T04:37:54.725082Z", "url": "https://files.pythonhosted.org/packages/15/2b/08bb54058176965e3a41976a985829e57c00c86ae1c3133d1db5f1eea805/z3c.jsonrpc-0.5.3.zip", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "bce800a9103dbe08db7410bdd6ec377c", "sha256": "0b5e403c664e8cf86f9216e6e2a36f773c9ea84a2d37bb2e8582b2f11f5f68ff"}, "downloads": -1, "filename": "z3c.jsonrpc-0.5.4.tar.gz", "has_sig": false, "md5_digest": "bce800a9103dbe08db7410bdd6ec377c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32453, "upload_time": "2009-04-07T11:51:27", "upload_time_iso_8601": "2009-04-07T11:51:27.851306Z", "url": "https://files.pythonhosted.org/packages/19/d3/0ed0aa3213ce2b35ddce138e527848b55a3ac04cb41a425a87b963fc7dd5/z3c.jsonrpc-0.5.4.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "e1ebdfff1f22d6a58cf4df4626409280", "sha256": "f6b6b51a8840297cf97bfc7e9164df64f51a29bf1926dd7b566bc59ee18c823e"}, "downloads": -1, "filename": "z3c.jsonrpc-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e1ebdfff1f22d6a58cf4df4626409280", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33154, "upload_time": "2010-01-27T12:48:59", "upload_time_iso_8601": "2010-01-27T12:48:59.665552Z", "url": "https://files.pythonhosted.org/packages/97/77/d02afa3d06cb9696f124b93e149f1f92157c80e0fd31885de85241aeb575/z3c.jsonrpc-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "ed2fe6edd7e6f895e516269141bd5c0e", "sha256": "2a2f424ef0935a4112dd668772c58aa5a8c292349c50d594d30f414922ad0000"}, "downloads": -1, "filename": "z3c.jsonrpc-0.7.0.zip", "has_sig": false, "md5_digest": "ed2fe6edd7e6f895e516269141bd5c0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49989, "upload_time": "2012-03-25T07:12:19", "upload_time_iso_8601": "2012-03-25T07:12:19.665787Z", "url": "https://files.pythonhosted.org/packages/ca/2c/fe686e2b99b28db2cd71750ae015ab9fd3c697cfe19abf9dd0a6264164ec/z3c.jsonrpc-0.7.0.zip", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "468dda6f2d723309a4b1c63d6a802ec9", "sha256": "88672c501812b53b612a24ebffae75a059137c03f43b46a15d671810b2dbc3d7"}, "downloads": -1, "filename": "z3c.jsonrpc-0.7.1.zip", "has_sig": false, "md5_digest": "468dda6f2d723309a4b1c63d6a802ec9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51474, "upload_time": "2012-11-27T14:06:37", "upload_time_iso_8601": "2012-11-27T14:06:37.629025Z", "url": "https://files.pythonhosted.org/packages/0f/dd/4744d886a5371bfb49ce825a47fba4312abf713dbbc451482562f2477cfa/z3c.jsonrpc-0.7.1.zip", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "877a9417c7ed7b8ceff1ff6cbd196dd7", "sha256": "6b34a82b27eb0c964c9c106a7433b6d3a2dd75c7516daf17f5992bf2faae22f3"}, "downloads": -1, "filename": "z3c.jsonrpc-0.7.2.zip", "has_sig": false, "md5_digest": "877a9417c7ed7b8ceff1ff6cbd196dd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55042, "upload_time": "2013-10-11T08:03:33", "upload_time_iso_8601": "2013-10-11T08:03:33.984268Z", "url": "https://files.pythonhosted.org/packages/f8/74/aa167a2a60c2c4e32e408fee626f5fae819e3ca69dd79b7e2093834ac0f6/z3c.jsonrpc-0.7.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "877a9417c7ed7b8ceff1ff6cbd196dd7", "sha256": "6b34a82b27eb0c964c9c106a7433b6d3a2dd75c7516daf17f5992bf2faae22f3"}, "downloads": -1, "filename": "z3c.jsonrpc-0.7.2.zip", "has_sig": false, "md5_digest": "877a9417c7ed7b8ceff1ff6cbd196dd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55042, "upload_time": "2013-10-11T08:03:33", "upload_time_iso_8601": "2013-10-11T08:03:33.984268Z", "url": "https://files.pythonhosted.org/packages/f8/74/aa167a2a60c2c4e32e408fee626f5fae819e3ca69dd79b7e2093834ac0f6/z3c.jsonrpc-0.7.2.zip", "yanked": false}], "timestamp": "Fri May  8 03:20:58 2020"}