{"info": {"author": "leo-the-manic", "author_email": "manicleo@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "django-simple-select\n====================\n\n.. warning:: This is early early early alpha status. API is unstable and it's\n             not extensively tested.\n\nA simple jQueryUI autocomplete <select> replacement for Django.\n\nThis project is meant to be an easy replacement for the Select widget when\nyou have too many objects to sensibly use it.\n\nRequirements\n------------\n- jQuery\n\n- Twitter Bootstrap\n\n- selectize\n\nFeatures\n--------\n\nGood \"does nots\":\n\n- Doesn't require any SQL tables.\n\n- Doesn't change your POSTdata.\n\nNot-strictly-good \"does nots\":\n\n- Doesn't have any API documentation (yet!)\n\nThis is in extremely early alpha status; I've only put it on PyPI for the sake\nof the project I've created for.\n\nOriginally there was an intention to have this be a lightweight dependency\n(i.e. require not much beyond jQuery), but I've nixed that in favor of me\nwriting lightweight code. So this at the moment has a hard dependency on both\n Twitter Bootstrap and the selectize library.\n\nQuickstart\n----------\n1. ``pip install django-simple-select``\n\n2. Add ``simpleselect`` to ``INSTALLED_APPS`` in your project's\n   ``settings.py``.\n\n   .. note:: This is only for the sake of being able to include the JS file. It\n            may be possible to remove this step, so it may vanish from a\n            future version.\n\n3. Add this to your ``urls.py``\n\n   .. code:: python\n\n        # other urls...\n        url('^', include('simpleselect.urls')),\n        # ...\n\n4. In your form, make use of a ``simpleselect.AutocompleteSelect`` in a\n   ``ModelChoiceField``, e.g.\n\n   .. warning:: This whole step is out of date. From this point on this\n                documentation is unreliable. Hopefully I will come back and\n                update these docs on my own time.\n\n   .. code:: python\n\n       class MyForm(django.forms.ModelForm):\n\n           class Meta:\n\n               model = models.Person\n               widgets = {\n                   'employer': simpleselect.AutocompleteSelect(\n                       ['name__icontains']),\n               }\n\n\n       class AddPersonForm(django.forms.ModelForm):\n\n           _personwidget = simpleselect.AutocompleteSelect(\n               ['first_name__icontains', 'last_name__icontains'])\n\n           person = django.forms.ModelChoiceField(models.Person.objects.all(),\n                                                  widget=_personwidget)\n\n   The autocomplete widget takes a list of `Django field lookups`_. When\n   autocompleting, it splits the search string. For each individual word, it\n   ORs together all lookups applied ot that word. It then ANDs together the\n   results of that process applied to all words.\n\n   E.g.: for a widget like\n\n   .. code:: python\n\n    simpleselect.AutocompleteSelect(['first_name__icontains',\n                                     'last_name__icontains'])\n\n   and a search string like\n\n   .. code:: python\n\n    \"John Smi\"\n\n   your final query is equivalent to this, built using `Django Q objects`_:\n\n   .. code:: python\n\n       ((Q(first_name__icontains='John') | Q(last_name__icontains='John'))\n        & (Q(first_name__icontains='Smi') | Q(last_name__icontains='Smi')))\n\n\n   This seems to be the correct thing to do, at least most of the time. But I\n   am no expert. More documentation coming!\n\n   .. _Django field lookups: https://docs.djangoproject.com/en/stable/topics/db/queries/#field-lookups\n   .. _Django Q objects: https://docs.djangoproject.com/en/stable/topics/db/queries/#complex-lookups-with-q-objects\n\n5. Add this to your template\n\n   .. code:: html+django\n\n    {% load staticfiles %}\n\n    <script type=\"text/javascript\" src=\"{% static \"simpleselect.js\" %}\"></script>\n\n6. Unless I forgot something else while writing this, you should be good to go!\n\nDiscussion/help\n---------------\nFor now, feel free to message me directly on Github or open a ticket. There's\nno mailing list or anything fancy like that. If this picks up any steam I'll\nadd that stuff.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leo-the-manic/django-simple-select/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-simple-select", "package_url": "https://pypi.org/project/django-simple-select/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-simple-select/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/leo-the-manic/django-simple-select/"}, "release_url": "https://pypi.org/project/django-simple-select/0.3/", "requires_dist": null, "requires_python": null, "summary": "An autocompleting select widget for Django", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            django-simple-select<br>====================<br><br>.. warning:: This is early early early alpha status. API is unstable and it's<br>             not extensively tested.<br><br>A simple jQueryUI autocomplete &lt;select&gt; replacement for Django.<br><br>This project is meant to be an easy replacement for the Select widget when<br>you have too many objects to sensibly use it.<br><br>Requirements<br>------------<br>- jQuery<br><br>- Twitter Bootstrap<br><br>- selectize<br><br>Features<br>--------<br><br>Good \"does nots\":<br><br>- Doesn't require any SQL tables.<br><br>- Doesn't change your POSTdata.<br><br>Not-strictly-good \"does nots\":<br><br>- Doesn't have any API documentation (yet!)<br><br>This is in extremely early alpha status; I've only put it on PyPI for the sake<br>of the project I've created for.<br><br>Originally there was an intention to have this be a lightweight dependency<br>(i.e. require not much beyond jQuery), but I've nixed that in favor of me<br>writing lightweight code. So this at the moment has a hard dependency on both<br> Twitter Bootstrap and the selectize library.<br><br>Quickstart<br>----------<br>1. ``pip install django-simple-select``<br><br>2. Add ``simpleselect`` to ``INSTALLED_APPS`` in your project's<br>   ``settings.py``.<br><br>   .. note:: This is only for the sake of being able to include the JS file. It<br>            may be possible to remove this step, so it may vanish from a<br>            future version.<br><br>3. Add this to your ``urls.py``<br><br>   .. code:: python<br><br>        # other urls...<br>        url('^', include('simpleselect.urls')),<br>        # ...<br><br>4. In your form, make use of a ``simpleselect.AutocompleteSelect`` in a<br>   ``ModelChoiceField``, e.g.<br><br>   .. warning:: This whole step is out of date. From this point on this<br>                documentation is unreliable. Hopefully I will come back and<br>                update these docs on my own time.<br><br>   .. code:: python<br><br>       class MyForm(django.forms.ModelForm):<br><br>           class Meta:<br><br>               model = models.Person<br>               widgets = {<br>                   'employer': simpleselect.AutocompleteSelect(<br>                       ['name__icontains']),<br>               }<br><br><br>       class AddPersonForm(django.forms.ModelForm):<br><br>           _personwidget = simpleselect.AutocompleteSelect(<br>               ['first_name__icontains', 'last_name__icontains'])<br><br>           person = django.forms.ModelChoiceField(models.Person.objects.all(),<br>                                                  widget=_personwidget)<br><br>   The autocomplete widget takes a list of `Django field lookups`_. When<br>   autocompleting, it splits the search string. For each individual word, it<br>   ORs together all lookups applied ot that word. It then ANDs together the<br>   results of that process applied to all words.<br><br>   E.g.: for a widget like<br><br>   .. code:: python<br><br>    simpleselect.AutocompleteSelect(['first_name__icontains',<br>                                     'last_name__icontains'])<br><br>   and a search string like<br><br>   .. code:: python<br><br>    \"John Smi\"<br><br>   your final query is equivalent to this, built using `Django Q objects`_:<br><br>   .. code:: python<br><br>       ((Q(first_name__icontains='John') | Q(last_name__icontains='John'))<br>        &amp; (Q(first_name__icontains='Smi') | Q(last_name__icontains='Smi')))<br><br><br>   This seems to be the correct thing to do, at least most of the time. But I<br>   am no expert. More documentation coming!<br><br>   .. _Django field lookups: https://docs.djangoproject.com/en/stable/topics/db/queries/#field-lookups<br>   .. _Django Q objects: https://docs.djangoproject.com/en/stable/topics/db/queries/#complex-lookups-with-q-objects<br><br>5. Add this to your template<br><br>   .. code:: html+django<br><br>    {% load staticfiles %}<br><br>    &lt;script type=\"text/javascript\" src=\"{% static \"simpleselect.js\" %}\"&gt;&lt;/script&gt;<br><br>6. Unless I forgot something else while writing this, you should be good to go!<br><br>Discussion/help<br>---------------<br>For now, feel free to message me directly on Github or open a ticket. There's<br>no mailing list or anything fancy like that. If this picks up any steam I'll<br>add that stuff.<br>\n          </div>"}, "last_serial": 996541, "releases": {"0.1.8": [{"comment_text": "", "digests": {"md5": "37aef3c069e5c5c0c0c0611e5b8951c7", "sha256": "82a8f4e1d8f161c337cfe4c954b66d89249f935d8296dd174a38e829365aeb5a"}, "downloads": -1, "filename": "django-simple-select-0.1.8.tar.gz", "has_sig": false, "md5_digest": "37aef3c069e5c5c0c0c0611e5b8951c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9601, "upload_time": "2013-07-19T20:11:25", "upload_time_iso_8601": "2013-07-19T20:11:25.272223Z", "url": "https://files.pythonhosted.org/packages/fa/3b/8488762db32f186eac9e9bd66723c852ea2e124329950a7f1f93834a7cd0/django-simple-select-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "46b3876b5125c0541d369b19f76c0907", "sha256": "a0d6ad3d9213ea36be88abff186b4729db192dbe9d6a930435b0797667712816"}, "downloads": -1, "filename": "django-simple-select-0.1.9.tar.gz", "has_sig": false, "md5_digest": "46b3876b5125c0541d369b19f76c0907", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9624, "upload_time": "2013-07-19T23:05:22", "upload_time_iso_8601": "2013-07-19T23:05:22.091793Z", "url": "https://files.pythonhosted.org/packages/49/6e/f9cd0f6f226c5f568559cf155065beed9f8de05a8b5a4a5ce7d182486a79/django-simple-select-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "86d43d47ef4e9df1f362a19c3d4cd566", "sha256": "359d5d12f86dc81759efc6db81b118a798804bc78974d942ced60c70b7a33870"}, "downloads": -1, "filename": "django-simple-select-0.2.0.tar.gz", "has_sig": false, "md5_digest": "86d43d47ef4e9df1f362a19c3d4cd566", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10012, "upload_time": "2013-07-22T17:21:58", "upload_time_iso_8601": "2013-07-22T17:21:58.049735Z", "url": "https://files.pythonhosted.org/packages/fa/53/00d13fe1fb9e38f903ea2b56f234475bd5709c80c2d1109882e48f426eed/django-simple-select-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5acfe5760aed82d86cafb74ef4af138f", "sha256": "b86b07cc525e65bc362316ed91609f2cdb36f2f4f5ec10d65feae3e06201f016"}, "downloads": -1, "filename": "django-simple-select-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5acfe5760aed82d86cafb74ef4af138f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10131, "upload_time": "2013-07-22T18:19:31", "upload_time_iso_8601": "2013-07-22T18:19:31.181127Z", "url": "https://files.pythonhosted.org/packages/d5/08/37de7f94d3e251ecc3b0e2d90916c69d6eba7aa06bb0abedf2d5e9c3474c/django-simple-select-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "56802ec2150035c66e750bb6f0d370e0", "sha256": "d0dbafc12a60f87e600ed02c6b4a5f435bd5f914a81f268bf406a85ab41de76b"}, "downloads": -1, "filename": "django-simple-select-0.3.tar.gz", "has_sig": false, "md5_digest": "56802ec2150035c66e750bb6f0d370e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11322, "upload_time": "2014-02-10T20:03:35", "upload_time_iso_8601": "2014-02-10T20:03:35.415315Z", "url": "https://files.pythonhosted.org/packages/a3/11/3b8604b47c5e251ef80b2d8b41fcd41b259b2dcaf23cc659f1e4c67f1b0d/django-simple-select-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56802ec2150035c66e750bb6f0d370e0", "sha256": "d0dbafc12a60f87e600ed02c6b4a5f435bd5f914a81f268bf406a85ab41de76b"}, "downloads": -1, "filename": "django-simple-select-0.3.tar.gz", "has_sig": false, "md5_digest": "56802ec2150035c66e750bb6f0d370e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11322, "upload_time": "2014-02-10T20:03:35", "upload_time_iso_8601": "2014-02-10T20:03:35.415315Z", "url": "https://files.pythonhosted.org/packages/a3/11/3b8604b47c5e251ef80b2d8b41fcd41b259b2dcaf23cc659f1e4c67f1b0d/django-simple-select-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:21 2020"}