{"info": {"author": "Daniel Omar Vergara P\u00e9rez", "author_email": "daniel.omar.vergara@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# melisdk (MercadoLibre's Python SDK)\n\nThis is not the official Python SDK for MercadoLibre's Platform, but works. And you cant install it from PYPI.\n\n[![PyPI version](https://badge.fury.io/py/melisdk.svg)](https://badge.fury.io/py/melisdk)\n\n## How do I install it?\n\n```\n$ pip3 install melisdk\n```\n\nfrom the source\n\n```\n$ git clone https://github.com/dany2691/melisdk.git\n$ cd melisdk\n$ python3 setup.py install\n```\n\n## How do I use it?\n\nThe first thing to do is to instance a ```Meli``` class. You'll need to give a ```clientId``` and a ```clientSecret```. You can obtain both after creating your own application. For more information on this please read: [creating an application](http://developers.mercadolibre.com/application-manager/)\n\n### Including the Lib\nInclude the lib meli in your project\n\n### Attention\nDon't forget to set the authentication URL of your country in file lib/config.ini\n\n```python\nfrom melisdk import Meli\n```\nStart the development!\n\n### Create an instance of Meli class\nSimple like this\n```python\nmeli = Meli(client_id=1234, client_secret=\"a secret\")\n```\nWith this instance you can start working on MercadoLibre's APIs.\n\nThere are some design considerations worth to mention.\n\n1. This SDK is just a thin layer on top of an http client to handle all the OAuth WebServer flow for you.\n\n2. There is JSON parsing. this SDK will include [json](http://docs.python.org/2/library/json.html) for internal usage.\n\n3. If you already have the access_token and the refresh_token you can pass in the constructor\n\n```python\nmeli = Meli(client_id=1234, client_secret=\"a secret\", access_token=\"Access_Token\", refresh_token=\"Refresh_Token\")\n```\n\n## How do I redirect users to authorize my application?\n\nThis is a 2 step process.\n\nFirst get the link to redirect the user. This is very easy! Just:\n\n```python\nredirectUrl = meli.auth_url(redirect_URI=\"http://somecallbackurl\")\n```\n\nThis will give you the url to redirect the user. You need to specify a callback url which will be the one that the user will redirected after a successfull authrization process.\n\nOnce the user is redirected to your callback url, you'll receive in the query string, a parameter named ```code```. You'll need this for the second part of the process.\n\n```python\nmeli.authorize(code=\"the received code\", redirect_URI=\"http://somecallbackurl\")\n```\n\nThis will get an ```access_token``` and a ```refresh_token``` (is case your application has the ```offline_access```) for your application and your user.\n\nAt this stage your are ready to make call to the API on behalf of the user.\n\n#### Making GET calls\n\n```python\nparams = {'access_token' : meli.access_token}\nresponse = meli.get(path=\"/users/me\", params=params)\n```\n\n#### Making POST calls\n\n```python\nparams = {'access_token' : meli.access_token}\n\n  #this body will be converted into json for you\nbody = {'foo'  : 'bar', 'bar' : 'foo'}\n\nresponse = meli.post(path=\"/items\", body=body, params=params)\n```\n\n#### Making PUT calls\n\n```python\nparams = {'access_token' : meli.access_token}\n\n  #this body will be converted into json for you\nbody = {'foo'  : 'bar', 'bar' : 'foo'}\n\nresponse = meli.put(path=\"/items/123\", body=body, params=params)\n```\n\n#### Making DELETE calls\n```python\nparams = {'access_token' : meli.access_token}\nresponse = meli.delete(path=\"/questions/123\", params=params)\n```\n\n## I want to contribute!\n\nThat is great! Just fork the project in github. Create a topic branch, write some code, and add some tests for your new code.\n\nThanks for helping!\n\n# Development setup\n\nThis project uses _pipenv_ for dependecy resolution. It's a kind of mix between\npip and virtualenv. Follow the next instructions to setup the development enviroment.\n\n```sh\n$ git clone https://github.com/dany2691/melisdk.git\n$ cd melisdk\n$ pipenv shell\n$ pip3 install -e .\n```\n\nTo run the test-suite, inside the melisdk directory:\n\n```shell\n$ python -m unittest -vv tests/test_meli.py\n```\n\n## Meta\n\nDaniel Omar Vergara P\u00e9rez \u2013 [@dan1_net](https://twitter.com/dan1_net) \u2013 daniel.omar.vergara@gmail.com\n\n[https://github.com/dany2691](https://github.com/dany2691)\n\n## Contributing\n\n1. Fork it (<https://gitlab.com/hexagondata_projects/melisdk>)\n2. Create your feature branch (`git checkout -b feature/fooBar`)\n3. Commit your changes (`git commit -am 'Add some fooBar'`)\n4. Push to the branch (`git push origin feature/fooBar`)\n5. Create a new Pull Request\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dany2691/melisdk", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "melisdk", "package_url": "https://pypi.org/project/melisdk/", "platform": "", "project_url": "https://pypi.org/project/melisdk/", "project_urls": {"Homepage": "https://github.com/dany2691/melisdk"}, "release_url": "https://pypi.org/project/melisdk/0.1.3/", "requires_dist": ["requests (>=2.22.0)"], "requires_python": "", "summary": "A copy of MercadoLibre python SDK, but works", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>melisdk (MercadoLibre's Python SDK)</h1>\n<p>This is not the official Python SDK for MercadoLibre's Platform, but works. And you cant install it from PYPI.</p>\n<p><a href=\"https://badge.fury.io/py/melisdk\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5bc2c183020f8a28c80cc6aa221673cd9505908a/68747470733a2f2f62616467652e667572792e696f2f70792f6d656c6973646b2e737667\"></a></p>\n<h2>How do I install it?</h2>\n<pre><code>$ pip3 install melisdk\n</code></pre>\n<p>from the source</p>\n<pre><code>$ git clone https://github.com/dany2691/melisdk.git\n$ cd melisdk\n$ python3 setup.py install\n</code></pre>\n<h2>How do I use it?</h2>\n<p>The first thing to do is to instance a <code>Meli</code> class. You'll need to give a <code>clientId</code> and a <code>clientSecret</code>. You can obtain both after creating your own application. For more information on this please read: <a href=\"http://developers.mercadolibre.com/application-manager/\" rel=\"nofollow\">creating an application</a></p>\n<h3>Including the Lib</h3>\n<p>Include the lib meli in your project</p>\n<h3>Attention</h3>\n<p>Don't forget to set the authentication URL of your country in file lib/config.ini</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">melisdk</span> <span class=\"kn\">import</span> <span class=\"n\">Meli</span>\n</pre>\n<p>Start the development!</p>\n<h3>Create an instance of Meli class</h3>\n<p>Simple like this</p>\n<pre><span class=\"n\">meli</span> <span class=\"o\">=</span> <span class=\"n\">Meli</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s2\">\"a secret\"</span><span class=\"p\">)</span>\n</pre>\n<p>With this instance you can start working on MercadoLibre's APIs.</p>\n<p>There are some design considerations worth to mention.</p>\n<ol>\n<li>\n<p>This SDK is just a thin layer on top of an http client to handle all the OAuth WebServer flow for you.</p>\n</li>\n<li>\n<p>There is JSON parsing. this SDK will include <a href=\"http://docs.python.org/2/library/json.html\" rel=\"nofollow\">json</a> for internal usage.</p>\n</li>\n<li>\n<p>If you already have the access_token and the refresh_token you can pass in the constructor</p>\n</li>\n</ol>\n<pre><span class=\"n\">meli</span> <span class=\"o\">=</span> <span class=\"n\">Meli</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s2\">\"a secret\"</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s2\">\"Access_Token\"</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s2\">\"Refresh_Token\"</span><span class=\"p\">)</span>\n</pre>\n<h2>How do I redirect users to authorize my application?</h2>\n<p>This is a 2 step process.</p>\n<p>First get the link to redirect the user. This is very easy! Just:</p>\n<pre><span class=\"n\">redirectUrl</span> <span class=\"o\">=</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">auth_url</span><span class=\"p\">(</span><span class=\"n\">redirect_URI</span><span class=\"o\">=</span><span class=\"s2\">\"http://somecallbackurl\"</span><span class=\"p\">)</span>\n</pre>\n<p>This will give you the url to redirect the user. You need to specify a callback url which will be the one that the user will redirected after a successfull authrization process.</p>\n<p>Once the user is redirected to your callback url, you'll receive in the query string, a parameter named <code>code</code>. You'll need this for the second part of the process.</p>\n<pre><span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">authorize</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s2\">\"the received code\"</span><span class=\"p\">,</span> <span class=\"n\">redirect_URI</span><span class=\"o\">=</span><span class=\"s2\">\"http://somecallbackurl\"</span><span class=\"p\">)</span>\n</pre>\n<p>This will get an <code>access_token</code> and a <code>refresh_token</code> (is case your application has the <code>offline_access</code>) for your application and your user.</p>\n<p>At this stage your are ready to make call to the API on behalf of the user.</p>\n<h4>Making GET calls</h4>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'access_token'</span> <span class=\"p\">:</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">}</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/users/me\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<h4>Making POST calls</h4>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'access_token'</span> <span class=\"p\">:</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">}</span>\n\n  <span class=\"c1\">#this body will be converted into json for you</span>\n<span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span>  <span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span> <span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">}</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/items\"</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<h4>Making PUT calls</h4>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'access_token'</span> <span class=\"p\">:</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">}</span>\n\n  <span class=\"c1\">#this body will be converted into json for you</span>\n<span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span>  <span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span> <span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">}</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/items/123\"</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<h4>Making DELETE calls</h4>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'access_token'</span> <span class=\"p\">:</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">}</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">meli</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/questions/123\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<h2>I want to contribute!</h2>\n<p>That is great! Just fork the project in github. Create a topic branch, write some code, and add some tests for your new code.</p>\n<p>Thanks for helping!</p>\n<h1>Development setup</h1>\n<p>This project uses <em>pipenv</em> for dependecy resolution. It's a kind of mix between\npip and virtualenv. Follow the next instructions to setup the development enviroment.</p>\n<pre>$ git clone https://github.com/dany2691/melisdk.git\n$ <span class=\"nb\">cd</span> melisdk\n$ pipenv shell\n$ pip3 install -e .\n</pre>\n<p>To run the test-suite, inside the melisdk directory:</p>\n<pre>$ python -m unittest -vv tests/test_meli.py\n</pre>\n<h2>Meta</h2>\n<p>Daniel Omar Vergara P\u00e9rez \u2013 <a href=\"https://twitter.com/dan1_net\" rel=\"nofollow\">@dan1_net</a> \u2013 <a href=\"mailto:daniel.omar.vergara@gmail.com\">daniel.omar.vergara@gmail.com</a></p>\n<p><a href=\"https://github.com/dany2691\" rel=\"nofollow\">https://github.com/dany2691</a></p>\n<h2>Contributing</h2>\n<ol>\n<li>Fork it (<a href=\"https://gitlab.com/hexagondata_projects/melisdk\" rel=\"nofollow\">https://gitlab.com/hexagondata_projects/melisdk</a>)</li>\n<li>Create your feature branch (<code>git checkout -b feature/fooBar</code>)</li>\n<li>Commit your changes (<code>git commit -am 'Add some fooBar'</code>)</li>\n<li>Push to the branch (<code>git push origin feature/fooBar</code>)</li>\n<li>Create a new Pull Request</li>\n</ol>\n\n          </div>"}, "last_serial": 5541947, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "fe7f4f4aa2014deb15ffc343468f6178", "sha256": "29d5c257a56c7f5708c9de26476110332b52d911f61afd8c69bbb45341a9b192"}, "downloads": -1, "filename": "melisdk-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fe7f4f4aa2014deb15ffc343468f6178", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5920, "upload_time": "2019-06-08T22:26:59", "upload_time_iso_8601": "2019-06-08T22:26:59.212550Z", "url": "https://files.pythonhosted.org/packages/1b/3c/5afb9c7061e873a6126f685f9f0f6e9a7fcc7270d619334781b606f0ad21/melisdk-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c96cafb6090eb8315e3f1c609a1dbf17", "sha256": "3a14474535f6992579953de6ded4728a2e183a9f63ee30de7ca33c32a2d7a2ee"}, "downloads": -1, "filename": "melisdk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c96cafb6090eb8315e3f1c609a1dbf17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4818, "upload_time": "2019-06-08T22:27:01", "upload_time_iso_8601": "2019-06-08T22:27:01.368394Z", "url": "https://files.pythonhosted.org/packages/78/33/10bb757e27ed666f1d6fc5e4bfbfb93e16e69d7796e4c9d53390fe8a0996/melisdk-0.0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dd1f1c0d6d437b29201ce2b97e2aa59f", "sha256": "1f8b794c6d687fec824904f9b0f5aae19102c0d89d508e5f5d531729a2942b00"}, "downloads": -1, "filename": "melisdk-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dd1f1c0d6d437b29201ce2b97e2aa59f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5954, "upload_time": "2019-06-08T22:32:57", "upload_time_iso_8601": "2019-06-08T22:32:57.472744Z", "url": "https://files.pythonhosted.org/packages/13/18/9c6c9f0c8451d3b1509767cd1cd483de80367bcc90c5b87e28eb6437b3bf/melisdk-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe84a7d997acc49c1f1030bc0779bdb7", "sha256": "a0b53f37d31fc59b7933b99e224bedeff51beecfe96a842a46a7816ae2e6f2dc"}, "downloads": -1, "filename": "melisdk-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fe84a7d997acc49c1f1030bc0779bdb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4854, "upload_time": "2019-06-08T22:33:00", "upload_time_iso_8601": "2019-06-08T22:33:00.495223Z", "url": "https://files.pythonhosted.org/packages/1f/84/a894cd9f1b7177ad44cb6a8e3124be0b5adc530e1f24e2d3cb263b19c6df/melisdk-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9f899fc7471c4032b251a63984af7f89", "sha256": "a9d56089bb932de5dceb89b356dfd0ffa71ccc404981d939cf9cc288feed8cd2"}, "downloads": -1, "filename": "melisdk-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9f899fc7471c4032b251a63984af7f89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6358, "upload_time": "2019-07-02T03:57:49", "upload_time_iso_8601": "2019-07-02T03:57:49.098767Z", "url": "https://files.pythonhosted.org/packages/b0/46/4a919e5f999b2fac645fc391cd4199ab1d7fb17029d078e6212b687dac99/melisdk-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71bb3a42c7d1d709eba6e74bb2fb71a8", "sha256": "05b4f82f1307f5bfc2fd2b15306bed00d99980a37ac1eb82d89e559a89a64505"}, "downloads": -1, "filename": "melisdk-0.1.2.tar.gz", "has_sig": false, "md5_digest": "71bb3a42c7d1d709eba6e74bb2fb71a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5062, "upload_time": "2019-07-02T03:57:50", "upload_time_iso_8601": "2019-07-02T03:57:50.822103Z", "url": "https://files.pythonhosted.org/packages/32/77/f0b88ce71fddb705bd8a6934e258c10a3386389021ded73679978e524778/melisdk-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "585dc54f398495201b607243ec1762d4", "sha256": "eaa9cfc6abad3e9d80c766b6f60cb175edc97c8cf8f17257fe4a12f9eba4b0a9"}, "downloads": -1, "filename": "melisdk-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "585dc54f398495201b607243ec1762d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6373, "upload_time": "2019-07-16T17:57:35", "upload_time_iso_8601": "2019-07-16T17:57:35.749795Z", "url": "https://files.pythonhosted.org/packages/32/16/f6ed8c3e976f76afb30a2db02ab68417658ca0f8f839193fe253e0970536/melisdk-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "083d64c448fc82d156f07bcff0934ee1", "sha256": "a2adb5a9d846df436482a3029adcfbdfb8fa1381e25fa46d177428cb07935a0c"}, "downloads": -1, "filename": "melisdk-0.1.3.tar.gz", "has_sig": false, "md5_digest": "083d64c448fc82d156f07bcff0934ee1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5084, "upload_time": "2019-07-16T17:57:37", "upload_time_iso_8601": "2019-07-16T17:57:37.037842Z", "url": "https://files.pythonhosted.org/packages/e8/ee/ce7ee2b9ef44f52cd5583436021a7f97911c75aaac44e21a78343383dba7/melisdk-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "585dc54f398495201b607243ec1762d4", "sha256": "eaa9cfc6abad3e9d80c766b6f60cb175edc97c8cf8f17257fe4a12f9eba4b0a9"}, "downloads": -1, "filename": "melisdk-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "585dc54f398495201b607243ec1762d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6373, "upload_time": "2019-07-16T17:57:35", "upload_time_iso_8601": "2019-07-16T17:57:35.749795Z", "url": "https://files.pythonhosted.org/packages/32/16/f6ed8c3e976f76afb30a2db02ab68417658ca0f8f839193fe253e0970536/melisdk-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "083d64c448fc82d156f07bcff0934ee1", "sha256": "a2adb5a9d846df436482a3029adcfbdfb8fa1381e25fa46d177428cb07935a0c"}, "downloads": -1, "filename": "melisdk-0.1.3.tar.gz", "has_sig": false, "md5_digest": "083d64c448fc82d156f07bcff0934ee1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5084, "upload_time": "2019-07-16T17:57:37", "upload_time_iso_8601": "2019-07-16T17:57:37.037842Z", "url": "https://files.pythonhosted.org/packages/e8/ee/ce7ee2b9ef44f52cd5583436021a7f97911c75aaac44e21a78343383dba7/melisdk-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:25 2020"}