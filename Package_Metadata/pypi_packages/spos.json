{"info": {"author": "Luiz Eduardo Amaral", "author_email": "luizamaral306@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# SPOS\n\n> **SPOS** stands for **Small Payload Object Serializer**.\n\n[![codecov](https://codecov.io/gh/luxedo/spos/branch/master/graph/badge.svg)](https://codecov.io/gh/luxedo/spos) [![CodeFactor](https://www.codefactor.io/repository/github/luxedo/spos/badge)](https://www.codefactor.io/repository/github/luxedo/spos) [![PyPI version](https://badge.fury.io/py/spos.svg)](https://badge.fury.io/py/spos) [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n`SPOS` is a tool for serializing objects. This tool focuses in\nmaintaining a consistent payload size while sacrificing precision.\nApplications with limited bandwidth like [LoRa](https://lora-alliance.org/)\nor [Globalstar](https://www.globalstar.com/en-us/) are ideal candidates\nfor `SPOS`. `SPOS` is built as a library for `python3` and a command line\ntool.\n\n## Quick Start\n\nTo encode data, `SPOS` needs two arguments to serialize the data: The\n`payload_data` to be serialized and the [payload specification](#Payload-Specification).\n\n```python\nimport spos\npayload_spec = {\n  \"name\": \"example payload\",\n  \"version\": \"1.0.0\",\n  \"crc8\": False,\n  \"items\": [{\n    \"type\": \"integer\",\n    \"key\": \"payload_version\",\n    \"value\": 1,  # 01\n    \"bits\": 2\n  }, {\n    \"type\": \"integer\",\n    \"key\": \"int_data\",\n    \"bits\": 6\n  }, {\n    \"type\": \"float\",\n    \"key\": \"float_data\",\n    \"bits\": 6\n}]\npayload_data = {\n  \"int_data\": 13,    # 001101\n  \"float_data\": 0.6  # 010011 (19/32 or 0.59375)\n}\n\nmessage = spos.bin_encode(payload_data, payload_spec)\n\"0b01001101010011\"\n```\n\nDecoding data\n\n```python\nimport spos\npayload_spec = {\n  \"name\": \"example payload\",\n  \"version\": \"1.0.0\",\n  \"crc8\": False,\n  \"items\": [{\n    \"type\": \"integer\",\n    \"key\": \"payload_version\",\n    \"value\": 1,  # 01\n    \"bits\": 2\n  }, {\n    \"type\": \"integer\",\n    \"key\": \"int_data\",\n    \"bits\": 6\n  }, {\n    \"type\": \"float\",\n    \"key\": \"float_data\",\n    \"bits\": 6\n}]\nmessage = \"0b01001101010011\"\npayload_data = spos.bin_decode(message, payload_spec)\n{\n  \"payload_version\": 1,\n  \"int_data\": 13,\n  \"float_data\": 0.59375\n}\n```\n\n## Installation\n\n```\npip install spos\n```\n\n## Payload Specification\n\nThe payload specification must contain the key `items`, which must be\nan array containing objects that describe each `block` of the\nserialized message.\n\n```python\npayload_spec = {\n  \"items\": [{\n    \"type:\": \"integer\",\n    \"key\": \"temperature\",\n    \"bits\": 6,\n    \"offset\": 273\n}]}\n```\n\nAdditional keys can be provided and keys not listed are ignored.\n\n### Payload Specification keys\n\n#### `items`\n\nThe array of `blocks` describing the message.\n\n#### `name`\n\nMessage name\n\n#### `version`\n\nMessage version\n\n#### `crc8`\n\nIf \"True\", calculates the [CRC8](https://en.wikipedia.org/wiki/Cyclic_redundancy_check) (8bits) for the message and appends it to payload.\n\n## Block\n\nThe required keys for `block` objects are: `key` and `type`. `value` is\nan optional key. For each `type` there might be aditional required keys\nand/or optional keys.\n\nThe value to be encoded is either a `key` in the `payload_data` object or\na statuc `value` if present.\n\nThe encoded data is _big-endian_ and truncations occour in the least\nsignificant bits when applicable. Data overflow is set to the maximum\nvalue and underflow to the minimum.\n\n### Block keys\n\n#### `key`\n\nThe key to get the value of the `block` in `payload_data`.\nOptionally, the `key` can accesss a value in a nested object using a\ndot `.` to separate the levels. Eg:\n\n```javascript\nimport spos\npayload_spec = {\n  \"name\": \"example nested value\",\n  \"items\": [{\n  \"type\": \"integer\",\n  \"bits\": 8,\n  \"key\": \"nested.value\"\n  }]\npayload_data = {\n  \"nested\": {\n    \"value\": 255\n  }\n}\nspos.bin_encode(payload_data, payload_spec)\n\"0b11111111\"\n```\n\n#### `value`\n\nA static value for the `block` (optional).\n\n#### `type`\n\nThere are 10 types avaliable for serializing data: `boolean`, `binary`,\n`integer`, `float`, `pad`, `array`, `object`, `string`, `steps`, and\n`categories`.\n\nThe basic types are:\n\n##### `boolean`\n\nBoolean value.\n\nInput: `boolean`.\nAdditional keys: `None`.\n\n##### `binary`\n\nBinary value. The data can be a binary string or an hex string. Eg\n\n```\n\"0b10101010\"  # binary\n\"0xdeadbeef\"  # hex\n```\n\nThis data is truncated in the least significant bits if the size of\nthe string in binary is bigger than `bits`.\n\nInput: `string`.\nAdditional keys:\n\n- `bits` (int): length of the block in bits\n\n##### `integer`\n\nInteger value.\n\nInput: `integer`.\nAdditional key:\n\n- `bits` (int): length of the block in bits\n- `offset` (int): An integer to offset the final value. Default: 0.\n\n##### `float`\n\nFloat value.\n\nThis type divides the interval between the `lower` and `upper`\nboundaries in equal parts according to the avaliable `bits`. The\nserialized value is the closest to the real one by default\n(\"approximation\": \"round\").\n\nInput: `int|float`.\nAdditional keys:\n\n- `bits` (int): length of the block in bits\n- `lower` (int|float), optional: Float lower boundary. Default 0.\n- `upper` (int|float), optional: Float upper boundary. Default 1.\n- `approximation` (str), optional: Float approximation method. Values can be: \"round\", \"floor\", \"ceil\". Default: \"round\"\n\n##### `pad`\n\nPads the message. No data is collected from this block.\n\nInput: `None`.\nAdditional keys:\n\n- `bits` (int): length of the block in bits\n\n---\n\nAdvanced types:\n\n##### `array`\n\nAn array containing `block` values.\n\nThe size in bits of this type is `bits` + `length` \\* `blocks` &rarr; `bits`.\n\nInput: An `array` of values allowed for `blocks`.\nAdditional keys:\n\n- `bits` (int): Number of bits to store the maximum length of the array.\n- `blocks` (block): The `block` specification of the objects in the array.\n\n##### `object`\n\nObject value. Maps the data to an object.\n\nThe size in bits of this type is the sum of sizes of blocks declared\nfor this `block`.\n\nInput: `object`.\nAdditional keys:\n\n- `items` (items): The `array` of `blocks` describing the object.\n\n##### `string`\n\nString value.\n\nThis data type encodes the string to base64. Characters outside the\n[base64 index table](https://en.wikipedia.org/wiki/Base64#Base64_table)\nare replaced with `/` (index 62) and spaces are replaced with `+`\n(index 63).\n\nThe size in bits of this type is 6 \\* `length`.\n\nInput: `string`.\nAdditional keys:\n\n- `length` (int): Strings maximum length.\n- `custom_alphabeth` (object), optional: Remaps the characters to another index.\n  eg: Adding support for a `json` string but sacrificing the first 7\n  indexes (ABCDEFG).\n\n```python\npayload_spec = {\n  \"items\": [{\n    \"type:\": \"string\",\n    \"key\": \"text\",\n    \"length\": 128,\n    \"custom_alphabeth\": {\n      0: \"{\",\n      1: \"}\",\n      2: \"[\",\n      3: \"]\",\n      4: '\"',\n      5: ',',\n      6: '.',\n    }\n}]\n\n```\n\n#### `steps`\n\nMaps a numeric value to named steps. Eg:\n\n```python\npayload_spec = {\n  \"items\": [{\n    \"type:\": \"steps\",\n    \"key\": \"battery\",\n    \"steps\": [0.1, 0.6, 0.95],\n    \"steps_names\": [\"critical\", \"low\", \"discharging\", \"charged\"]\n    # [-Inf, 0.1) critical, [0.1, 0.6) low, [0.6, 0.95) discharging, [0.95, Inf) charged\n}]\npayload_data = {\"bat\": 0.3}  # low\n```\n\nThe number of bits for this type is the exponent of the next power of\ntwo of the length of `steps` + 1. In the example above it is 2 bits.\n\nInput: `int|float`.\nAdditional keys:\n\n- `steps` (array): Array listing the boundaries of each step.\n- `steps_names` (array), optional: Names for each step. If not provided the names\n  are created based on steps.\n\n#### `categories`\n\nMaps strings to categories: Eg:\n\n```python\npayload_spec = {\n  \"items\": [{\n    \"type:\": \"categories\",\n    \"key\": \"color\",\n    \"categories\": [\"red\", \"green\", \"blue\", \"iridescent\"],\n}]\npayload_data = {\"color\": \"red\"}  # low\n```\n\nThe number of bits for this type is the exponent of the next power of\ntwo of the length of `steps` + 1. In the example above it is 2 bits.\nThe category \"unknown\" is added to represent data that are not present\nin the `categories` array.\n\nInput: `string`.\nAdditional keys:\n\n- `categories` (array): The array of categories strings.\n\n## Functions\n\n```python\ndef encode(payload_data, payload_spec):\n    \"\"\"\n    Encodes a message from payload_data according to payload_spec.\n    Returns the message as a binary string.\n\n    Args:\n        payload_data (dict): The list of values to encode.\n        payload_spec (dict): Payload specifications.\n\n    Returns:\n        message (str): Binary string of the message.\n    \"\"\"\n```\n\n```python\ndef decode(message, payload_spec):\n    \"\"\"\n    Decodes a binary message according to payload_spec.\n\n    Args:\n        message (str): Binary string of the message.\n        payload_spec (dict): Payload specifications.\n\n    Returns:\n        payload_data (dict): Payload data.\n    \"\"\"\n```\n\n```python\ndef hex_encode(payload_data, payload_spec):\n\"\"\"\nEncodes a message from payload_data according to payload_spec.\nReturns the message as an hex string.\n\n    Args:\n        payload_data (dict): The list of values to encode.\n        payload_spec (dict): Payload specifications.\n\n    Returns:\n        message (str): Binary string of the message.\n    \"\"\"\n\n```\n\n```python\ndef hex_decode(message, payload_spec):\n    \"\"\"\n    Decodes an hex message according to payload_spec.\n\n    Args:\n        message (str): Hex string of the message.\n        payload_spec (dict): Payload specifications.\n\n    Returns:\n        payload_data (dict): Payload data.\n    \"\"\"\n```\n\n## Command line usage\n\n```python\n# Encode data\ncat payload_data | spos -p payload_spec.json\n\n# Decode data\ncat message | spos -d -p payload_spec.json\n```\n\n## Contributors\n\n- [Arthur Lindemute](https://github.com/arthurlindemute)\n\n## License\n\n> SPOS - Small Payload Object Serializer\n> Copyright (C) 2020 Luiz Eduardo Amaral <luizamaral306@gmail.com>\n>\n> This program is free software: you can redistribute it and/or modify\n> it under the terms of the GNU General Public License as published by\n> the Free Software Foundation, either version 3 of the License, or\n> (at your option) any later version.\n>\n> This program is distributed in the hope that it will be useful,\n> but WITHOUT ANY WARRANTY; without even the implied warranty of\n> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n> GNU General Public License for more details.\n>\n> You should have received a copy of the GNU General Public License\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/luxedo/SPOS", "keywords": "serializer LoRa Globalstar low-bandwidth", "license": "LICENSE.md", "maintainer": "", "maintainer_email": "", "name": "spos", "package_url": "https://pypi.org/project/spos/", "platform": "", "project_url": "https://pypi.org/project/spos/", "project_urls": {"Homepage": "https://github.com/luxedo/SPOS"}, "release_url": "https://pypi.org/project/spos/1.0.0a5/", "requires_dist": ["crc8 (==0.1.0)"], "requires_python": ">=3.7", "summary": "SPOS stands for Small Payload Object Serializer", "version": "1.0.0a5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SPOS</h1>\n<blockquote>\n<p><strong>SPOS</strong> stands for <strong>Small Payload Object Serializer</strong>.</p>\n</blockquote>\n<p><a href=\"https://codecov.io/gh/luxedo/spos\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a31f590a422b435fa252e0add316ac9a86cbb02e/68747470733a2f2f636f6465636f762e696f2f67682f6c757865646f2f73706f732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://www.codefactor.io/repository/github/luxedo/spos\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d783e4d023cc782354d3465b5b863b47be7cf5bd/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6c757865646f2f73706f732f6261646765\"></a> <a href=\"https://badge.fury.io/py/spos\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e3b917f1bf1309e49cb25d80107664aadfa7e87/68747470733a2f2f62616467652e667572792e696f2f70792f73706f732e737667\"></a> <a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></a></p>\n<p><code>SPOS</code> is a tool for serializing objects. This tool focuses in\nmaintaining a consistent payload size while sacrificing precision.\nApplications with limited bandwidth like <a href=\"https://lora-alliance.org/\" rel=\"nofollow\">LoRa</a>\nor <a href=\"https://www.globalstar.com/en-us/\" rel=\"nofollow\">Globalstar</a> are ideal candidates\nfor <code>SPOS</code>. <code>SPOS</code> is built as a library for <code>python3</code> and a command line\ntool.</p>\n<h2>Quick Start</h2>\n<p>To encode data, <code>SPOS</code> needs two arguments to serialize the data: The\n<code>payload_data</code> to be serialized and the <a href=\"#Payload-Specification\" rel=\"nofollow\">payload specification</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spos</span>\n<span class=\"n\">payload_spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"example payload\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"crc8\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"payload_version\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"c1\"># 01</span>\n    <span class=\"s2\">\"bits\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n  <span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"int_data\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"bits\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n  <span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"float\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"float_data\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"bits\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n<span class=\"p\">}]</span>\n<span class=\"n\">payload_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"int_data\"</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>    <span class=\"c1\"># 001101</span>\n  <span class=\"s2\">\"float_data\"</span><span class=\"p\">:</span> <span class=\"mf\">0.6</span>  <span class=\"c1\"># 010011 (19/32 or 0.59375)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">spos</span><span class=\"o\">.</span><span class=\"n\">bin_encode</span><span class=\"p\">(</span><span class=\"n\">payload_data</span><span class=\"p\">,</span> <span class=\"n\">payload_spec</span><span class=\"p\">)</span>\n<span class=\"s2\">\"0b01001101010011\"</span>\n</pre>\n<p>Decoding data</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spos</span>\n<span class=\"n\">payload_spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"example payload\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"crc8\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"payload_version\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"c1\"># 01</span>\n    <span class=\"s2\">\"bits\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n  <span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"int_data\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"bits\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n  <span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"float\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"float_data\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"bits\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n<span class=\"p\">}]</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">\"0b01001101010011\"</span>\n<span class=\"n\">payload_data</span> <span class=\"o\">=</span> <span class=\"n\">spos</span><span class=\"o\">.</span><span class=\"n\">bin_decode</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">payload_spec</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s2\">\"payload_version\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"int_data\"</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"float_data\"</span><span class=\"p\">:</span> <span class=\"mf\">0.59375</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Installation</h2>\n<pre><code>pip install spos\n</code></pre>\n<h2>Payload Specification</h2>\n<p>The payload specification must contain the key <code>items</code>, which must be\nan array containing objects that describe each <code>block</code> of the\nserialized message.</p>\n<pre><span class=\"n\">payload_spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s2\">\"type:\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"temperature\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"bits\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"offset\"</span><span class=\"p\">:</span> <span class=\"mi\">273</span>\n<span class=\"p\">}]}</span>\n</pre>\n<p>Additional keys can be provided and keys not listed are ignored.</p>\n<h3>Payload Specification keys</h3>\n<h4><code>items</code></h4>\n<p>The array of <code>blocks</code> describing the message.</p>\n<h4><code>name</code></h4>\n<p>Message name</p>\n<h4><code>version</code></h4>\n<p>Message version</p>\n<h4><code>crc8</code></h4>\n<p>If \"True\", calculates the <a href=\"https://en.wikipedia.org/wiki/Cyclic_redundancy_check\" rel=\"nofollow\">CRC8</a> (8bits) for the message and appends it to payload.</p>\n<h2>Block</h2>\n<p>The required keys for <code>block</code> objects are: <code>key</code> and <code>type</code>. <code>value</code> is\nan optional key. For each <code>type</code> there might be aditional required keys\nand/or optional keys.</p>\n<p>The value to be encoded is either a <code>key</code> in the <code>payload_data</code> object or\na statuc <code>value</code> if present.</p>\n<p>The encoded data is <em>big-endian</em> and truncations occour in the least\nsignificant bits when applicable. Data overflow is set to the maximum\nvalue and underflow to the minimum.</p>\n<h3>Block keys</h3>\n<h4><code>key</code></h4>\n<p>The key to get the value of the <code>block</code> in <code>payload_data</code>.\nOptionally, the <code>key</code> can accesss a value in a nested object using a\ndot <code>.</code> to separate the levels. Eg:</p>\n<pre><span class=\"kr\">import</span> <span class=\"nx\">spos</span>\n<span class=\"nx\">payload_spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"example nested value\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"items\"</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n  <span class=\"s2\">\"type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"bits\"</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"key\"</span><span class=\"o\">:</span> <span class=\"s2\">\"nested.value\"</span>\n  <span class=\"p\">}]</span>\n<span class=\"nx\">payload_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"nested\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"value\"</span><span class=\"o\">:</span> <span class=\"mi\">255</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">spos</span><span class=\"p\">.</span><span class=\"nx\">bin_encode</span><span class=\"p\">(</span><span class=\"nx\">payload_data</span><span class=\"p\">,</span> <span class=\"nx\">payload_spec</span><span class=\"p\">)</span>\n<span class=\"s2\">\"0b11111111\"</span>\n</pre>\n<h4><code>value</code></h4>\n<p>A static value for the <code>block</code> (optional).</p>\n<h4><code>type</code></h4>\n<p>There are 10 types avaliable for serializing data: <code>boolean</code>, <code>binary</code>,\n<code>integer</code>, <code>float</code>, <code>pad</code>, <code>array</code>, <code>object</code>, <code>string</code>, <code>steps</code>, and\n<code>categories</code>.</p>\n<p>The basic types are:</p>\n<h5><code>boolean</code></h5>\n<p>Boolean value.</p>\n<p>Input: <code>boolean</code>.\nAdditional keys: <code>None</code>.</p>\n<h5><code>binary</code></h5>\n<p>Binary value. The data can be a binary string or an hex string. Eg</p>\n<pre><code>\"0b10101010\"  # binary\n\"0xdeadbeef\"  # hex\n</code></pre>\n<p>This data is truncated in the least significant bits if the size of\nthe string in binary is bigger than <code>bits</code>.</p>\n<p>Input: <code>string</code>.\nAdditional keys:</p>\n<ul>\n<li><code>bits</code> (int): length of the block in bits</li>\n</ul>\n<h5><code>integer</code></h5>\n<p>Integer value.</p>\n<p>Input: <code>integer</code>.\nAdditional key:</p>\n<ul>\n<li><code>bits</code> (int): length of the block in bits</li>\n<li><code>offset</code> (int): An integer to offset the final value. Default: 0.</li>\n</ul>\n<h5><code>float</code></h5>\n<p>Float value.</p>\n<p>This type divides the interval between the <code>lower</code> and <code>upper</code>\nboundaries in equal parts according to the avaliable <code>bits</code>. The\nserialized value is the closest to the real one by default\n(\"approximation\": \"round\").</p>\n<p>Input: <code>int|float</code>.\nAdditional keys:</p>\n<ul>\n<li><code>bits</code> (int): length of the block in bits</li>\n<li><code>lower</code> (int|float), optional: Float lower boundary. Default 0.</li>\n<li><code>upper</code> (int|float), optional: Float upper boundary. Default 1.</li>\n<li><code>approximation</code> (str), optional: Float approximation method. Values can be: \"round\", \"floor\", \"ceil\". Default: \"round\"</li>\n</ul>\n<h5><code>pad</code></h5>\n<p>Pads the message. No data is collected from this block.</p>\n<p>Input: <code>None</code>.\nAdditional keys:</p>\n<ul>\n<li><code>bits</code> (int): length of the block in bits</li>\n</ul>\n<hr>\n<p>Advanced types:</p>\n<h5><code>array</code></h5>\n<p>An array containing <code>block</code> values.</p>\n<p>The size in bits of this type is <code>bits</code> + <code>length</code> * <code>blocks</code> \u2192 <code>bits</code>.</p>\n<p>Input: An <code>array</code> of values allowed for <code>blocks</code>.\nAdditional keys:</p>\n<ul>\n<li><code>bits</code> (int): Number of bits to store the maximum length of the array.</li>\n<li><code>blocks</code> (block): The <code>block</code> specification of the objects in the array.</li>\n</ul>\n<h5><code>object</code></h5>\n<p>Object value. Maps the data to an object.</p>\n<p>The size in bits of this type is the sum of sizes of blocks declared\nfor this <code>block</code>.</p>\n<p>Input: <code>object</code>.\nAdditional keys:</p>\n<ul>\n<li><code>items</code> (items): The <code>array</code> of <code>blocks</code> describing the object.</li>\n</ul>\n<h5><code>string</code></h5>\n<p>String value.</p>\n<p>This data type encodes the string to base64. Characters outside the\n<a href=\"https://en.wikipedia.org/wiki/Base64#Base64_table\" rel=\"nofollow\">base64 index table</a>\nare replaced with <code>/</code> (index 62) and spaces are replaced with <code>+</code>\n(index 63).</p>\n<p>The size in bits of this type is 6 * <code>length</code>.</p>\n<p>Input: <code>string</code>.\nAdditional keys:</p>\n<ul>\n<li><code>length</code> (int): Strings maximum length.</li>\n<li><code>custom_alphabeth</code> (object), optional: Remaps the characters to another index.\neg: Adding support for a <code>json</code> string but sacrificing the first 7\nindexes (ABCDEFG).</li>\n</ul>\n<pre><span class=\"n\">payload_spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s2\">\"type:\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"text\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"length\"</span><span class=\"p\">:</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"custom_alphabeth\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s2\">\"{\"</span><span class=\"p\">,</span>\n      <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s2\">\"}\"</span><span class=\"p\">,</span>\n      <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s2\">\"[\"</span><span class=\"p\">,</span>\n      <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"s2\">\"]\"</span><span class=\"p\">,</span>\n      <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span>\n      <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"s1\">','</span><span class=\"p\">,</span>\n      <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}]</span>\n</pre>\n<h4><code>steps</code></h4>\n<p>Maps a numeric value to named steps. Eg:</p>\n<pre><span class=\"n\">payload_spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s2\">\"type:\"</span><span class=\"p\">:</span> <span class=\"s2\">\"steps\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"battery\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"steps\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"steps_names\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"critical\"</span><span class=\"p\">,</span> <span class=\"s2\">\"low\"</span><span class=\"p\">,</span> <span class=\"s2\">\"discharging\"</span><span class=\"p\">,</span> <span class=\"s2\">\"charged\"</span><span class=\"p\">]</span>\n    <span class=\"c1\"># [-Inf, 0.1) critical, [0.1, 0.6) low, [0.6, 0.95) discharging, [0.95, Inf) charged</span>\n<span class=\"p\">}]</span>\n<span class=\"n\">payload_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"bat\"</span><span class=\"p\">:</span> <span class=\"mf\">0.3</span><span class=\"p\">}</span>  <span class=\"c1\"># low</span>\n</pre>\n<p>The number of bits for this type is the exponent of the next power of\ntwo of the length of <code>steps</code> + 1. In the example above it is 2 bits.</p>\n<p>Input: <code>int|float</code>.\nAdditional keys:</p>\n<ul>\n<li><code>steps</code> (array): Array listing the boundaries of each step.</li>\n<li><code>steps_names</code> (array), optional: Names for each step. If not provided the names\nare created based on steps.</li>\n</ul>\n<h4><code>categories</code></h4>\n<p>Maps strings to categories: Eg:</p>\n<pre><span class=\"n\">payload_spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s2\">\"type:\"</span><span class=\"p\">:</span> <span class=\"s2\">\"categories\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"color\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"categories\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"red\"</span><span class=\"p\">,</span> <span class=\"s2\">\"green\"</span><span class=\"p\">,</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">,</span> <span class=\"s2\">\"iridescent\"</span><span class=\"p\">],</span>\n<span class=\"p\">}]</span>\n<span class=\"n\">payload_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"red\"</span><span class=\"p\">}</span>  <span class=\"c1\"># low</span>\n</pre>\n<p>The number of bits for this type is the exponent of the next power of\ntwo of the length of <code>steps</code> + 1. In the example above it is 2 bits.\nThe category \"unknown\" is added to represent data that are not present\nin the <code>categories</code> array.</p>\n<p>Input: <code>string</code>.\nAdditional keys:</p>\n<ul>\n<li><code>categories</code> (array): The array of categories strings.</li>\n</ul>\n<h2>Functions</h2>\n<pre><span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">payload_data</span><span class=\"p\">,</span> <span class=\"n\">payload_spec</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Encodes a message from payload_data according to payload_spec.</span>\n<span class=\"sd\">    Returns the message as a binary string.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        payload_data (dict): The list of values to encode.</span>\n<span class=\"sd\">        payload_spec (dict): Payload specifications.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        message (str): Binary string of the message.</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">payload_spec</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Decodes a binary message according to payload_spec.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        message (str): Binary string of the message.</span>\n<span class=\"sd\">        payload_spec (dict): Payload specifications.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        payload_data (dict): Payload data.</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">hex_encode</span><span class=\"p\">(</span><span class=\"n\">payload_data</span><span class=\"p\">,</span> <span class=\"n\">payload_spec</span><span class=\"p\">):</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Encodes a message from payload_data according to payload_spec.</span>\n<span class=\"sd\">Returns the message as an hex string.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        payload_data (dict): The list of values to encode.</span>\n<span class=\"sd\">        payload_spec (dict): Payload specifications.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        message (str): Binary string of the message.</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">hex_decode</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">payload_spec</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Decodes an hex message according to payload_spec.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        message (str): Hex string of the message.</span>\n<span class=\"sd\">        payload_spec (dict): Payload specifications.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        payload_data (dict): Payload data.</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h2>Command line usage</h2>\n<pre><span class=\"c1\"># Encode data</span>\n<span class=\"n\">cat</span> <span class=\"n\">payload_data</span> <span class=\"o\">|</span> <span class=\"n\">spos</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"n\">payload_spec</span><span class=\"o\">.</span><span class=\"n\">json</span>\n\n<span class=\"c1\"># Decode data</span>\n<span class=\"n\">cat</span> <span class=\"n\">message</span> <span class=\"o\">|</span> <span class=\"n\">spos</span> <span class=\"o\">-</span><span class=\"n\">d</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"n\">payload_spec</span><span class=\"o\">.</span><span class=\"n\">json</span>\n</pre>\n<h2>Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/arthurlindemute\" rel=\"nofollow\">Arthur Lindemute</a></li>\n</ul>\n<h2>License</h2>\n<blockquote>\n<p>SPOS - Small Payload Object Serializer\nCopyright (C) 2020 Luiz Eduardo Amaral <a href=\"mailto:luizamaral306@gmail.com\">luizamaral306@gmail.com</a></p>\n<p>This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.</p>\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6970131, "releases": {"1.0.0a1": [{"comment_text": "", "digests": {"md5": "6ec2ff1a9364e22f9e2f6aaecbfdb6e7", "sha256": "c9a90e7a0c0a1343cf2f820b665f33c7d5a453ed77b23daf7afcba93cb0d342e"}, "downloads": -1, "filename": "spos-1.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "6ec2ff1a9364e22f9e2f6aaecbfdb6e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 30286, "upload_time": "2020-03-15T03:40:40", "upload_time_iso_8601": "2020-03-15T03:40:40.991534Z", "url": "https://files.pythonhosted.org/packages/3e/28/3d284d9ec380b9baf9bfcc61d72330e66d0e4115222cdf5d263db3197a2f/spos-1.0.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca35e9f2c769950dd4621e0d7b5aafda", "sha256": "6c004bb123e8f427d6482ffc74f38b3d7f15ecc5dd9a9e0e2dc2918a91c15ede"}, "downloads": -1, "filename": "spos-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "ca35e9f2c769950dd4621e0d7b5aafda", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17851, "upload_time": "2020-03-15T03:40:43", "upload_time_iso_8601": "2020-03-15T03:40:43.713069Z", "url": "https://files.pythonhosted.org/packages/7e/7b/6751f62c28a1d6ba51d8b3a0e9b12e306d1ca6878d7384caed81a0c1cd04/spos-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "3ec84ddd1e10f9028aaf1589197a0dc7", "sha256": "afd67091f232da389e844ee97163c238dcc72f0dae201b558295482e6cfc68b2"}, "downloads": -1, "filename": "spos-1.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "3ec84ddd1e10f9028aaf1589197a0dc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 30394, "upload_time": "2020-03-18T02:53:02", "upload_time_iso_8601": "2020-03-18T02:53:02.868996Z", "url": "https://files.pythonhosted.org/packages/69/d6/fa30e7bd8cacc6cdac43ed2056286903eda1ef441d4991f668c1f37627e5/spos-1.0.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13b837597d9437f968ad4a6674151e62", "sha256": "6d85116817477b65b7b427b6eeffd7cc7ae5ac4d6ea71bbb8ee379d4cb72805b"}, "downloads": -1, "filename": "spos-1.0.0a2.tar.gz", "has_sig": false, "md5_digest": "13b837597d9437f968ad4a6674151e62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17891, "upload_time": "2020-03-18T02:53:04", "upload_time_iso_8601": "2020-03-18T02:53:04.466409Z", "url": "https://files.pythonhosted.org/packages/bf/56/ac7f089583ea2c62db8a5173c50e7050e180f04d4dae654ffe75f85f5b86/spos-1.0.0a2.tar.gz", "yanked": false}], "1.0.0a3": [{"comment_text": "", "digests": {"md5": "a598503d061fe919e5019d5d5867e80a", "sha256": "3460ff9be3d52fbb73dfc0ca6da9a379d2b0709c10248b57ea1108b9dfa34def"}, "downloads": -1, "filename": "spos-1.0.0a3-py3-none-any.whl", "has_sig": false, "md5_digest": "a598503d061fe919e5019d5d5867e80a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 30651, "upload_time": "2020-03-24T13:47:32", "upload_time_iso_8601": "2020-03-24T13:47:32.635160Z", "url": "https://files.pythonhosted.org/packages/28/62/14d38569384e273c90e564a8ef02863961330f87b79db064a25b47d4ee55/spos-1.0.0a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14d767ede5a3621d06b46893553764f8", "sha256": "10155777172c6d569dc9e602bd88d323beba4fe8bf4820d23793c77b1af35797"}, "downloads": -1, "filename": "spos-1.0.0a3.tar.gz", "has_sig": false, "md5_digest": "14d767ede5a3621d06b46893553764f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18238, "upload_time": "2020-03-24T13:47:33", "upload_time_iso_8601": "2020-03-24T13:47:33.934459Z", "url": "https://files.pythonhosted.org/packages/8b/1f/a52c479ea0370bd38f03afdb3553666b0160fa099d74ff7f16c35c62b670/spos-1.0.0a3.tar.gz", "yanked": false}], "1.0.0a4": [{"comment_text": "", "digests": {"md5": "3a33cd7fd629f4333094b2a46cf52d97", "sha256": "d2332f6952f06e85c08b356cfececa713d99c53f9e9c6b1a3ad25ddf72139577"}, "downloads": -1, "filename": "spos-1.0.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "3a33cd7fd629f4333094b2a46cf52d97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 30679, "upload_time": "2020-03-24T22:12:50", "upload_time_iso_8601": "2020-03-24T22:12:50.480772Z", "url": "https://files.pythonhosted.org/packages/61/7c/f8d38862439368a781f657ea006c1f43976b80a8fdf61800300c45947942/spos-1.0.0a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5ba18b32594cadbbdb2d763937912a7", "sha256": "ca392f522f6f61816d539b71cef867f9e10d17e48b7783d3e8e540b3cacfd7fa"}, "downloads": -1, "filename": "spos-1.0.0a4.tar.gz", "has_sig": false, "md5_digest": "b5ba18b32594cadbbdb2d763937912a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18269, "upload_time": "2020-03-24T22:12:51", "upload_time_iso_8601": "2020-03-24T22:12:51.898815Z", "url": "https://files.pythonhosted.org/packages/22/0b/0d407c4a23347d4a0ab8f2e493987f804959e3f016a8832bd032577ae506/spos-1.0.0a4.tar.gz", "yanked": false}], "1.0.0a5": [{"comment_text": "", "digests": {"md5": "9b2329d2eede550732cfbbfb0c069213", "sha256": "55beafe9cf9e765d2fd26f2446129affbc59f1c5485fd4963811cdaa3865ac7e"}, "downloads": -1, "filename": "spos-1.0.0a5-py3-none-any.whl", "has_sig": false, "md5_digest": "9b2329d2eede550732cfbbfb0c069213", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 31062, "upload_time": "2020-04-07T13:51:53", "upload_time_iso_8601": "2020-04-07T13:51:53.465898Z", "url": "https://files.pythonhosted.org/packages/62/bd/85c252ba29e86d1a96b0b6dcd9e532369209f747711053d1905b8941c873/spos-1.0.0a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a5c64140771ccfe204484e8981c2e1a", "sha256": "5de0d5ff4102f6d166110bf2bc28511072db36c45539bfe85ddc7044d058b3cd"}, "downloads": -1, "filename": "spos-1.0.0a5.tar.gz", "has_sig": false, "md5_digest": "8a5c64140771ccfe204484e8981c2e1a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18883, "upload_time": "2020-04-07T13:51:54", "upload_time_iso_8601": "2020-04-07T13:51:54.543455Z", "url": "https://files.pythonhosted.org/packages/0c/87/1c78813721e9f3cfe515f24dcd012cb6045f0ef15515b99ab5d2e74949bd/spos-1.0.0a5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b2329d2eede550732cfbbfb0c069213", "sha256": "55beafe9cf9e765d2fd26f2446129affbc59f1c5485fd4963811cdaa3865ac7e"}, "downloads": -1, "filename": "spos-1.0.0a5-py3-none-any.whl", "has_sig": false, "md5_digest": "9b2329d2eede550732cfbbfb0c069213", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 31062, "upload_time": "2020-04-07T13:51:53", "upload_time_iso_8601": "2020-04-07T13:51:53.465898Z", "url": "https://files.pythonhosted.org/packages/62/bd/85c252ba29e86d1a96b0b6dcd9e532369209f747711053d1905b8941c873/spos-1.0.0a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a5c64140771ccfe204484e8981c2e1a", "sha256": "5de0d5ff4102f6d166110bf2bc28511072db36c45539bfe85ddc7044d058b3cd"}, "downloads": -1, "filename": "spos-1.0.0a5.tar.gz", "has_sig": false, "md5_digest": "8a5c64140771ccfe204484e8981c2e1a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18883, "upload_time": "2020-04-07T13:51:54", "upload_time_iso_8601": "2020-04-07T13:51:54.543455Z", "url": "https://files.pythonhosted.org/packages/0c/87/1c78813721e9f3cfe515f24dcd012cb6045f0ef15515b99ab5d2e74949bd/spos-1.0.0a5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:34 2020"}