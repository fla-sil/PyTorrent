{"info": {"author": "Yomi D", "author_email": "yomid4all@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6"], "description": "What is HD Merchant Wallet ?\n===============\nIt is a simple lightweight tool for receiving cryptocurrency payment, generating hd cryptocurrency wallet addresses and verifying payment made to an address. You can\nreceive cryptocurrency payment easily in any python script or web app in just 3 simple steps. It perfectly works with electrum wallet so you can receive payment with this tool and spend your coins with electrum wallet.\n\nInstallation\n==============\npip install merchant_wallet\n\nRunning\n========\n\n  \n - Get your master public key from a local or personal wallet e.g Electrum.\n - Generate addresses with this script, addresses will correspond with addresses on your electrum wallet, so you can easily spend your coins.\n - Give address for payment and verify transaction using this tool.\n\n\nAccept Bitcoin on a website In 3 Steps\n======================\n \n          from merchant_wallet.backend.btc import BitcoinBackend\n          \n          \n          btc = BitcoinBackend('master_public_key_gotten_from_an_offline_wallet')\n          \n          btc.generate_new_address(index=0) #index=0 will give the first address displayed on your electrum wallet, increase index to get more addresses as displayed on your wallet\n          \n          btc.confirm_address_payment(\n            address=\"1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK\", total_crypto_amount=0.01, confirmation_number=3\n          )#Confirm payment on the address with the specified confirmation and amount it will return a tuple of transaction status and value of transaction\n          \n          #Returned values\n          #Unconfirmed payment -> (UNCONFIRMED_ADDRESS_BALANCE, transaction_hash)\n          #Confirmed payment -> (CONFIRMED_ADDRESS_BALANCE, sent_value)\n          #Underpaid payment -> (UNDERPAID_ADDRESS_BALANCE, remaining value)\n          #No transaction -> (NO_HASH_ADDRESS_BALANCE, None )\n          btc.confirm_address_payment(\n            address=\"1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK\", total_crypto_amount=0.01, confirmation_number=5000, tx_hash='hash_returned_when_transaction_was_unconfirmed'\n          )\nNote\n======================    \n  This tool depends on blockcypher for verifying blockchain transactions and uses forex-python tool for calculating crypto prices\n    \n \n \nHelper methods\n======================    \n  \n- bitcoin.convert_to_fiat( amount, currency)\n- bitcoin.convert_from_fiat(amount, currency)\n- Check tests for more\n                 \nTodo\n======================              \n - Add more crypto currency support\n - Add support for local private blockchain service e.g bitcoind\n    \n**LICENSE**\n=========\nMIT", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ydaniels/HD-Merchant-wallet", "keywords": "electrum web network internet btc bitcoin blockchain hd wallet crptocurrency crypto merchant", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "merchant-wallet", "package_url": "https://pypi.org/project/merchant-wallet/", "platform": "", "project_url": "https://pypi.org/project/merchant-wallet/", "project_urls": {"Homepage": "https://github.com/ydaniels/HD-Merchant-wallet"}, "release_url": "https://pypi.org/project/merchant-wallet/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Receive cryptocurrency payment, generate hd cryptocurrency wallet addresses and verifying payment made to an address.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>What is HD Merchant Wallet ?</h1>\n<p>It is a simple lightweight tool for receiving cryptocurrency payment, generating hd cryptocurrency wallet addresses and verifying payment made to an address. You can\nreceive cryptocurrency payment easily in any python script or web app in just 3 simple steps. It perfectly works with electrum wallet so you can receive payment with this tool and spend your coins with electrum wallet.</p>\n<h1>Installation</h1>\n<p>pip install merchant_wallet</p>\n<h1>Running</h1>\n<ul>\n<li>Get your master public key from a local or personal wallet e.g Electrum.</li>\n<li>Generate addresses with this script, addresses will correspond with addresses on your electrum wallet, so you can easily spend your coins.</li>\n<li>Give address for payment and verify transaction using this tool.</li>\n</ul>\n<h1>Accept Bitcoin on a website In 3 Steps</h1>\n<pre><code>      from merchant_wallet.backend.btc import BitcoinBackend\n      \n      \n      btc = BitcoinBackend('master_public_key_gotten_from_an_offline_wallet')\n      \n      btc.generate_new_address(index=0) #index=0 will give the first address displayed on your electrum wallet, increase index to get more addresses as displayed on your wallet\n      \n      btc.confirm_address_payment(\n        address=\"1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK\", total_crypto_amount=0.01, confirmation_number=3\n      )#Confirm payment on the address with the specified confirmation and amount it will return a tuple of transaction status and value of transaction\n      \n      #Returned values\n      #Unconfirmed payment -&gt; (UNCONFIRMED_ADDRESS_BALANCE, transaction_hash)\n      #Confirmed payment -&gt; (CONFIRMED_ADDRESS_BALANCE, sent_value)\n      #Underpaid payment -&gt; (UNDERPAID_ADDRESS_BALANCE, remaining value)\n      #No transaction -&gt; (NO_HASH_ADDRESS_BALANCE, None )\n      btc.confirm_address_payment(\n        address=\"1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK\", total_crypto_amount=0.01, confirmation_number=5000, tx_hash='hash_returned_when_transaction_was_unconfirmed'\n      )\n</code></pre>\n<h1>Note</h1>\n<p>This tool depends on blockcypher for verifying blockchain transactions and uses forex-python tool for calculating crypto prices</p>\n<h1>Helper methods</h1>\n<ul>\n<li>bitcoin.convert_to_fiat( amount, currency)</li>\n<li>bitcoin.convert_from_fiat(amount, currency)</li>\n<li>Check tests for more</li>\n</ul>\n<h1>Todo</h1>\n<ul>\n<li>Add more crypto currency support</li>\n<li>Add support for local private blockchain service e.g bitcoind</li>\n</ul>\n<h1><strong>LICENSE</strong></h1>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6877560, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1cfe38e5bc9be8205557e515429023fb", "sha256": "a303767ec358997cbe1d19ecdaad6478e0d91aad04c6c3993ced2c714e183dc8"}, "downloads": -1, "filename": "merchant_wallet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1cfe38e5bc9be8205557e515429023fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6362, "upload_time": "2020-03-25T01:07:07", "upload_time_iso_8601": "2020-03-25T01:07:07.734274Z", "url": "https://files.pythonhosted.org/packages/e2/28/3b1821a8cc8e8bd3e124605789e5ebf54add0144ffce6a6d6e6adc78b68d/merchant_wallet-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1cfe38e5bc9be8205557e515429023fb", "sha256": "a303767ec358997cbe1d19ecdaad6478e0d91aad04c6c3993ced2c714e183dc8"}, "downloads": -1, "filename": "merchant_wallet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1cfe38e5bc9be8205557e515429023fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6362, "upload_time": "2020-03-25T01:07:07", "upload_time_iso_8601": "2020-03-25T01:07:07.734274Z", "url": "https://files.pythonhosted.org/packages/e2/28/3b1821a8cc8e8bd3e124605789e5ebf54add0144ffce6a6d6e6adc78b68d/merchant_wallet-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:11 2020"}