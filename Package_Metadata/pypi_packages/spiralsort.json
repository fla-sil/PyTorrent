{"info": {"author": "Thanasis Mattas", "author_email": "atmattas@physics.auth.gr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# SpiralSort\n\nA point-cloud spiral-sorting algorithm\n\n<img src=\"bin/spiralsort_2D.gif\" width=\"420\" height=\"260\" /> <img src=\"bin/spiralsort_3D.gif\" width=\"420\" height=\"260\" />\n\n| requirements        | optional              | os        |\n| ------------------- | --------------------- | --------- |\n| python3             | pollow>=7.0.0         | GNU/Linux |\n| click>=7.0          | matplotlib>=3.1.3     | Windows   |\n| numba>=0.48.0       | ffmpeg>=4.1.4         |           |\n| numpy>=1.18.0       |                       |           |\n| pandas>=1.0.1       |                       |           |\n\n## How to use\n\n1. command line\n\n```bash\n$ spiralsort <file_name> <master_node_id>\n```\n\n2. inside a python script\n\n```python\nfrom spiralsort.core import spiralsort\n\npoint_cloud_sorted = spiralsort(point_cloud, master_node_id)\n```\n\n3. docker container\n\nInsert input_file and take the output, using a shared volume between the\nhost and the container.\n\n```\n$ docker pull thanasismatt/spiralsort:latest\n$ docker run -it --rm -v ${PWD}:<container_dir> thanasismatt/spiralsort bin/bash\nroot@<container_id>:/# spiralsort <container_dir>/<file_name> <master_node_id>\n```\n\n## How to install\n\n```bash\n$ pip install spiralsort\n```\n\n## Input/Output file (or DataFrame) format\n\nsupported formats: csv, json\n\n| node_id |   x   |   y   |   z   |\n| ------- | ----- | ----- | ----- |\n| N000    |  1.12 |  2.32 | 12.24 |\n| N001    |  1.28 |  2.64 | 13.04 |\n| ...\n\n- node_ids have to be unique\n- In case of 2D data, just use a constant value for the 3rd dimension.\n\n## How it works\n\nStarting from the *master_node* the algorithm evaluates a cost for each node and\nmoves to the <br /> node with the minimum cost (cost for node<sup>i+1</sup> is\nthe distance from node<sup>i</sup> plus the distance from <br /> the\nmaster_node). At each step, a counterclockwise filter is applied, in order to\nforce a constant <br /> rotational direction.\n\nOptimizing the process, a methodology of slicing is applied on the point-cloud,\ndescribed by the <br /> following steps:\n\n1. Sort the point cloud with respect to the distance from the master node\n2. Segment it into slices and take the first slice\n3. Take a SPIRAL_WINDOW (slice further) <br />\n   Spiral windows for the 1st slice consist of 400 nodes, starting from the last\n   sorted node <br /> (the master_node for the 1st window)\n4. Iteretively pop 15 nodes (a STRIDE), by the minimum cost. Namely, a\n   SPIRAL_WINDOW is <br /> sliced to spiralsort a STRIDE of nodes, before moving\n   to the next SPIRAL_WINDOW. <br />\n   (cost = |node - master_node| + |node - prev_node|) <br />\n   At each iterative step, a filter is applied, keeping only nodes from the\n   counterclockwise side <br /> of the vector that starts from the master node\n   and ends at the previous node, in order to <br /> force the algorithm to move\n   on a constant rotating direction.\n5. Take the next SPIRAL_WINDOW and pop the next STRIDE. <br />\n6. Continue until the remainder of the nodes reaches the size of the\n   half slice (1000 nodes for <br /> the 1st slice).\n7. Merge the remaining nodes with the next slice <br />\n   This overlap of the slices ensures that there is a continuity while\n   selecting the next nodes, <br /> when the algorithm reaches the last nodes of\n   the slice.\n8. For the next slices, while moving away from the *master_node*, the\n   SPIRAL_WINDOW is <br /> selected differently. Specifically, before each\n   STRIDE, the counterclockwise filter is applied, <br /> then the remaining\n   nodes are cost-sorted (with respect to their cost) from the last <br />\n   spiralsorted node and, finally, a SPIRAL_WINDOW is sliced, to start the\n   iterative spiralsorting <br /> of the nodes in the next STRIDE.\n9. Keep moving by SPIRAL_WINDOWs, counterclockwise\n   filtering at each stride, popping <br /> STRIDEs of nodes until the half\n   slice thresshold.\n10. Upon reaching the last slice, remove the *half_slice* threshold, to\n   pop all the remaining nodes.\n\n## Options\n\n**--output-format=<format** **>** <br />\n(suported: csv, json, xlsx; defaults to the format of the input\n                 file) <br />\n**--save-animation/--no-save-animation** <br />\n(defaults to false)\n\n## How to create an animation of the process\n\n\n1. command line\n\n```bash\n$ spiralsort <file_name> <master_node_id> --save-animation\n```\n\n2. inside a python script\n\n```python\nfrom spiralsort.spiralsort_post import save_animation\n\nsave_animation(point_cloud_sorted, path_to_input_file)\n```\n\n<br />\n\n> (C) 2020, Thanasis Mattas <br />\n> atmattas@physics.auth.gr\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ThanasisMattas/spiralsort.git", "keywords": "", "license": "GNU GPL3", "maintainer": "", "maintainer_email": "", "name": "spiralsort", "package_url": "https://pypi.org/project/spiralsort/", "platform": "", "project_url": "https://pypi.org/project/spiralsort/", "project_urls": {"Homepage": "https://github.com/ThanasisMattas/spiralsort.git"}, "release_url": "https://pypi.org/project/spiralsort/0.2.0/", "requires_dist": ["click (>=7.0)", "numba (>=0.48.0)", "numpy (>=1.18.0)", "pandas (>=1.0.1)", "pillow (>=7.0.0) ; extra == 'plot_each_step'", "matplotlib (>=3.1.3) ; extra == 'plot_each_step'", "ffmpeg ; extra == 'write_video'"], "requires_python": "", "summary": "A point-cloud spiral-sorting algorithm", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SpiralSort</h1>\n<p>A point-cloud spiral-sorting algorithm</p>\n<p><img height=\"260\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ae245a53051768a0237ff0aff8f8406e791c6b2/62696e2f73706972616c736f72745f32442e676966\" width=\"420\"> <img height=\"260\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f166510527efc2d457ce5c3ccaeea9ac41243844/62696e2f73706972616c736f72745f33442e676966\" width=\"420\"></p>\n<table>\n<thead>\n<tr>\n<th>requirements</th>\n<th>optional</th>\n<th>os</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>python3</td>\n<td>pollow&gt;=7.0.0</td>\n<td>GNU/Linux</td>\n</tr>\n<tr>\n<td>click&gt;=7.0</td>\n<td>matplotlib&gt;=3.1.3</td>\n<td>Windows</td>\n</tr>\n<tr>\n<td>numba&gt;=0.48.0</td>\n<td>ffmpeg&gt;=4.1.4</td>\n<td></td>\n</tr>\n<tr>\n<td>numpy&gt;=1.18.0</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>pandas&gt;=1.0.1</td>\n<td></td>\n<td></td>\n</tr></tbody></table>\n<h2>How to use</h2>\n<ol>\n<li>command line</li>\n</ol>\n<pre>$ spiralsort &lt;file_name&gt; &lt;master_node_id&gt;\n</pre>\n<ol>\n<li>inside a python script</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spiralsort.core</span> <span class=\"kn\">import</span> <span class=\"n\">spiralsort</span>\n\n<span class=\"n\">point_cloud_sorted</span> <span class=\"o\">=</span> <span class=\"n\">spiralsort</span><span class=\"p\">(</span><span class=\"n\">point_cloud</span><span class=\"p\">,</span> <span class=\"n\">master_node_id</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>docker container</li>\n</ol>\n<p>Insert input_file and take the output, using a shared volume between the\nhost and the container.</p>\n<pre><code>$ docker pull thanasismatt/spiralsort:latest\n$ docker run -it --rm -v ${PWD}:&lt;container_dir&gt; thanasismatt/spiralsort bin/bash\nroot@&lt;container_id&gt;:/# spiralsort &lt;container_dir&gt;/&lt;file_name&gt; &lt;master_node_id&gt;\n</code></pre>\n<h2>How to install</h2>\n<pre>$ pip install spiralsort\n</pre>\n<h2>Input/Output file (or DataFrame) format</h2>\n<p>supported formats: csv, json</p>\n<table>\n<thead>\n<tr>\n<th>node_id</th>\n<th>x</th>\n<th>y</th>\n<th>z</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>N000</td>\n<td>1.12</td>\n<td>2.32</td>\n<td>12.24</td>\n</tr>\n<tr>\n<td>N001</td>\n<td>1.28</td>\n<td>2.64</td>\n<td>13.04</td>\n</tr>\n<tr>\n<td>...</td>\n<td></td>\n<td></td>\n<td></td>\n</tr></tbody></table>\n<ul>\n<li>node_ids have to be unique</li>\n<li>In case of 2D data, just use a constant value for the 3rd dimension.</li>\n</ul>\n<h2>How it works</h2>\n<p>Starting from the <em>master_node</em> the algorithm evaluates a cost for each node and\nmoves to the <br> node with the minimum cost (cost for node<sup>i+1</sup> is\nthe distance from node<sup>i</sup> plus the distance from <br> the\nmaster_node). At each step, a counterclockwise filter is applied, in order to\nforce a constant <br> rotational direction.</p>\n<p>Optimizing the process, a methodology of slicing is applied on the point-cloud,\ndescribed by the <br> following steps:</p>\n<ol>\n<li>Sort the point cloud with respect to the distance from the master node</li>\n<li>Segment it into slices and take the first slice</li>\n<li>Take a SPIRAL_WINDOW (slice further) <br>\nSpiral windows for the 1st slice consist of 400 nodes, starting from the last\nsorted node <br> (the master_node for the 1st window)</li>\n<li>Iteretively pop 15 nodes (a STRIDE), by the minimum cost. Namely, a\nSPIRAL_WINDOW is <br> sliced to spiralsort a STRIDE of nodes, before moving\nto the next SPIRAL_WINDOW. <br>\n(cost = |node - master_node| + |node - prev_node|) <br>\nAt each iterative step, a filter is applied, keeping only nodes from the\ncounterclockwise side <br> of the vector that starts from the master node\nand ends at the previous node, in order to <br> force the algorithm to move\non a constant rotating direction.</li>\n<li>Take the next SPIRAL_WINDOW and pop the next STRIDE. <br></li>\n<li>Continue until the remainder of the nodes reaches the size of the\nhalf slice (1000 nodes for <br> the 1st slice).</li>\n<li>Merge the remaining nodes with the next slice <br>\nThis overlap of the slices ensures that there is a continuity while\nselecting the next nodes, <br> when the algorithm reaches the last nodes of\nthe slice.</li>\n<li>For the next slices, while moving away from the <em>master_node</em>, the\nSPIRAL_WINDOW is <br> selected differently. Specifically, before each\nSTRIDE, the counterclockwise filter is applied, <br> then the remaining\nnodes are cost-sorted (with respect to their cost) from the last <br>\nspiralsorted node and, finally, a SPIRAL_WINDOW is sliced, to start the\niterative spiralsorting <br> of the nodes in the next STRIDE.</li>\n<li>Keep moving by SPIRAL_WINDOWs, counterclockwise\nfiltering at each stride, popping <br> STRIDEs of nodes until the half\nslice thresshold.</li>\n<li>Upon reaching the last slice, remove the <em>half_slice</em> threshold, to\npop all the remaining nodes.</li>\n</ol>\n<h2>Options</h2>\n<p><strong>--output-format=&lt;format</strong> <strong>&gt;</strong> <br>\n(suported: csv, json, xlsx; defaults to the format of the input\nfile) <br>\n<strong>--save-animation/--no-save-animation</strong> <br>\n(defaults to false)</p>\n<h2>How to create an animation of the process</h2>\n<ol>\n<li>command line</li>\n</ol>\n<pre>$ spiralsort &lt;file_name&gt; &lt;master_node_id&gt; --save-animation\n</pre>\n<ol>\n<li>inside a python script</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spiralsort.spiralsort_post</span> <span class=\"kn\">import</span> <span class=\"n\">save_animation</span>\n\n<span class=\"n\">save_animation</span><span class=\"p\">(</span><span class=\"n\">point_cloud_sorted</span><span class=\"p\">,</span> <span class=\"n\">path_to_input_file</span><span class=\"p\">)</span>\n</pre>\n<br>\n<blockquote>\n<p>(C) 2020, Thanasis Mattas <br>\n<a href=\"mailto:atmattas@physics.auth.gr\">atmattas@physics.auth.gr</a></p>\n</blockquote>\n\n          </div>"}, "last_serial": 6931338, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "dd254f9ad21839ec7ee9b3938429c634", "sha256": "78b0598fe02aba323bb1dd261a4b49083f389adcc1d10afdd352523b4d08d3c6"}, "downloads": -1, "filename": "spiralsort-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd254f9ad21839ec7ee9b3938429c634", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28574, "upload_time": "2020-03-13T16:32:52", "upload_time_iso_8601": "2020-03-13T16:32:52.772372Z", "url": "https://files.pythonhosted.org/packages/e1/de/1f6ab5116169932db205513362e625f165ca30c1a44e13ffd78d27272bec/spiralsort-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1213d741dae6be46f50eb3f8f2b9f002", "sha256": "7b0eeaab3729d828056a61bd45ef07af9e7a9e978629603236f5ebc14a8017b2"}, "downloads": -1, "filename": "spiralsort-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1213d741dae6be46f50eb3f8f2b9f002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13685, "upload_time": "2020-03-13T16:32:55", "upload_time_iso_8601": "2020-03-13T16:32:55.259472Z", "url": "https://files.pythonhosted.org/packages/7d/81/b979c76a469bf107af4ff0d1fb613d713c1312c9a69d79b5fa11545d0fdf/spiralsort-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e6724dae3a9aa83719d2e2a7aef4a652", "sha256": "55afb7dbf3f4ea882d8e7ba772db812b37280d3217591f3ea079e56a2146010c"}, "downloads": -1, "filename": "spiralsort-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e6724dae3a9aa83719d2e2a7aef4a652", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28606, "upload_time": "2020-03-13T17:00:00", "upload_time_iso_8601": "2020-03-13T17:00:00.710369Z", "url": "https://files.pythonhosted.org/packages/83/d2/d8dbcc91a1d5eb8e21ec0dbf59c18abea740a6da467cdbf07061df58d734/spiralsort-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09a5ca591b585a32d9b6b1895a265b45", "sha256": "01f5e4e9d4fc226ac87d2b6423bbf6b030580310585d92d2fc71018067bc6daa"}, "downloads": -1, "filename": "spiralsort-0.1.1.tar.gz", "has_sig": false, "md5_digest": "09a5ca591b585a32d9b6b1895a265b45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14400, "upload_time": "2020-03-13T17:00:03", "upload_time_iso_8601": "2020-03-13T17:00:03.739847Z", "url": "https://files.pythonhosted.org/packages/ec/0b/c750c2ed55d5e93320f02249601a73787126ad58401aa8e7af190d3737f4/spiralsort-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4fb579c3ca6744db815de6acfee37575", "sha256": "df376ba7279119239b31b28b8a15a34d0e73bf0856bd1682d69b19c3e3b44c65"}, "downloads": -1, "filename": "spiralsort-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4fb579c3ca6744db815de6acfee37575", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30267, "upload_time": "2020-03-17T16:18:01", "upload_time_iso_8601": "2020-03-17T16:18:01.836992Z", "url": "https://files.pythonhosted.org/packages/1e/cc/e95e2da2205a3584827b0cf7ac37d81063cf1cbb9622db2acd841ed821d6/spiralsort-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f56f28af2ec41ad535da60636e8e5d8d", "sha256": "9c0d1acdb7a54e10b8e9da4d58c1c10fe0af0a492f1785d5d6ff465319a69c2c"}, "downloads": -1, "filename": "spiralsort-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f56f28af2ec41ad535da60636e8e5d8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14427, "upload_time": "2020-03-17T16:18:05", "upload_time_iso_8601": "2020-03-17T16:18:05.536211Z", "url": "https://files.pythonhosted.org/packages/c4/a7/3ebca97a466129fc6640c726ad631e2d101bf446f89182b298fea08e7a9f/spiralsort-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "30908b986878d3ba7c73387146f9f586", "sha256": "8b2f5c41ede1cf5e41d0e41493317b204e30857e1a47c5487c72dd6f96e356ba"}, "downloads": -1, "filename": "spiralsort-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "30908b986878d3ba7c73387146f9f586", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30720, "upload_time": "2020-04-01T21:23:33", "upload_time_iso_8601": "2020-04-01T21:23:33.840056Z", "url": "https://files.pythonhosted.org/packages/f0/4d/da9d34d21d6711a11c4ce1ed8135a16225062180a6b87c8992c76b3b00da/spiralsort-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83d13918dac0951b4ffb4a424b251e98", "sha256": "af95ec4d8faea84bf0fe8da358125fc11d99df1a03ed0a3e8c730955c84c379a"}, "downloads": -1, "filename": "spiralsort-0.2.0.tar.gz", "has_sig": false, "md5_digest": "83d13918dac0951b4ffb4a424b251e98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15077, "upload_time": "2020-04-01T21:23:38", "upload_time_iso_8601": "2020-04-01T21:23:38.007012Z", "url": "https://files.pythonhosted.org/packages/b4/33/0abc7f35d4388fe579583e9b131c9d78c2e30c5497ab6c8071c59310a96b/spiralsort-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "30908b986878d3ba7c73387146f9f586", "sha256": "8b2f5c41ede1cf5e41d0e41493317b204e30857e1a47c5487c72dd6f96e356ba"}, "downloads": -1, "filename": "spiralsort-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "30908b986878d3ba7c73387146f9f586", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30720, "upload_time": "2020-04-01T21:23:33", "upload_time_iso_8601": "2020-04-01T21:23:33.840056Z", "url": "https://files.pythonhosted.org/packages/f0/4d/da9d34d21d6711a11c4ce1ed8135a16225062180a6b87c8992c76b3b00da/spiralsort-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83d13918dac0951b4ffb4a424b251e98", "sha256": "af95ec4d8faea84bf0fe8da358125fc11d99df1a03ed0a3e8c730955c84c379a"}, "downloads": -1, "filename": "spiralsort-0.2.0.tar.gz", "has_sig": false, "md5_digest": "83d13918dac0951b4ffb4a424b251e98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15077, "upload_time": "2020-04-01T21:23:38", "upload_time_iso_8601": "2020-04-01T21:23:38.007012Z", "url": "https://files.pythonhosted.org/packages/b4/33/0abc7f35d4388fe579583e9b131c9d78c2e30c5497ab6c8071c59310a96b/spiralsort-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:47 2020"}