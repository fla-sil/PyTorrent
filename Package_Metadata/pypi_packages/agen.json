{"info": {"author": "Yufei Li", "author_email": "yufeiminds@163.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "agen\n=======\n\nA very simple code generator.\n\n.. image:: https://img.shields.io/pypi/v/agen.svg\n   :target: https://pypi.python.org/pypi/agen/\n   :alt: Latest Version\n.. image:: https://travis-ci.org/yufeiminds/agen.svg?branch=master\n   :target: https://travis-ci.org/yufeiminds/agen\n   :alt: Travis CI Status\n.. image:: https://codecov.io/github/yufeiminds/agen/coverage.svg?branch=develop\n   :target: https://codecov.io/github/yufeiminds/agen?branch=master\n   :alt: Codecov Status\n.. image:: https://readthedocs.org/projects/agen/badge/?version=latest\n   :target: http://agen.readthedocs.org/en/latest/?badge=latest\n   :alt: Doc Status\n\n-  Free software: MIT license\n-  Documentation: https://agen.readthedocs.com/en/ .\n\nFeatures\n--------\n\n-  Simple and very simple API\n-  Custom ``Jinja Env`` supported\n-  Could be used as Command-Line-Tools\n\n**No Template**\n\n*agen* don't provide any template. It's only provide some function,\nto make code to be a template. If you need any public template, please\nuse the awesome open source tool,\n`Cookiecutter <https://github.com/audreyr/cookiecutter>`__ .\n\n**Why agen?**\n\nagen is so lightweight, that could be perfectly integrated into your\nproject in minutes.\n\nI like `Cookiecutter <https://github.com/audreyr/cookiecutter>`__ (It's\nso cool and so awesome), but most of it's features are too heavyweight\nfor me.\n\nInstallation\n------------\n\nInstall with pip:\n\n.. code:: shell\n\n    pip install agen\n\nInstall with source code:\n\n.. code:: shell\n\n    clone https://github.com/yufeiminds/agen.git\n    cd agen\n    python setup.py install\n\nQuickstart Guide\n----------------\n\nIn *agen*, use `jinja2 <http://jinja.pocoo.org/docs/>`__ as\ntemplate engine for rendering, so, any feature of\n`jinja2 <http://jinja.pocoo.org/docs/>`__ template will be found in\n*agen* .\n\nFile Generation\n~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    from agen import (\n        string_render,\n        render,\n        generate,\n        generate_dir\n    )\n\n    # Render text from a templated string\n    string_render('{{key}}', {'key': 'value'})\n    > 'value'\n\n    cat template.py\n    > {{key}}\n\n    # Render text from a template file\n    render('template.py', {'key': 'value'})\n    > 'value'\n\n    # Generate file from a template file\n    generate('template.py', 'output.py', {'key': 'value'})\n\n    # Content of output.py\n    value\n\nDirectory Generation\n~~~~~~~~~~~~~~~~~~~~\n\nIf we have a directory like this\uff1a\n\n.. code:: shell\n\n    directory\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 {{key}}.py\n\ncall ``generate_dir`` function\uff1a\n\n.. code-block:: python\n\n    generate_dir('directory', 'mydir', {'key': 'value'})\n\nwill generate\n\n.. code:: shell\n\n    mydir\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 value.py\n\nEvery pure text file will be render by template engine. **context**\n``{'key': 'value'}`` also will be rendered automatically.\n\nCommand Line Tool\n-----------------\n\nBasic Usage\n~~~~~~~~~~~\n\n*agen* also implement a very simple command line tool, use for\nrendering the local template easily, but it only could be used on \\*UNIX\noperation system.\n\n::\n\n    Usage: agen [OPTIONS] [NAMES]...\n\n    Options:\n      -o, --out PATH      Output path or directory\n      -s, --source PATH   Source path or directory\n      -c, --context PATH  Path of context file\n      --help              Show this message and exit.\n\nWith no argument\uff0c\\ *agen* will search local template directory, eg.\non \\*NIX operation system, this directory are usually at:\n\n::\n\n    $ agen\n    --------------------------------------------\n      agen Library\n      see -> /Users/yufeili/.agen/templates\n    --------------------------------------------\n    directory   repo        single.txt\n\nThe simplest way to call\uff1a\n\n::\n\n    $ agen -s template_path -o ouput_path -c context.json\n\nSure, ``.yaml`` also can be used as ``context`` file. If the ``out``\noption wasn't provided, it will prompt for input on screen (defualt is\ncurrent directory).\n\nFull Example\n~~~~~~~~~~~~\n\nYou can specific three kinds of directory or file as the ``source`` .\n\nSingle File\n^^^^^^^^^^^\n\n::\n\n    $ agen -s single.txt -o output.txt -c context.json\n\nDirectory\n^^^^^^^^^\n\nAny directory, such as\n\n::\n\n    directory\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 {{key}}.py\n\nboth could be ``source``, it also support to use template variable to\nrender the output file name.\n\n::\n\n    $ agen -s directory -o myapp -c context.json\n\nThis command will create a directory named ``myapp``, and processing\nrecursively all files under the ``directory`` , output to ``myapp`` base\non origin structure.\n\nRepository\n^^^^^^^^^^\n\n.. Note:: agen is not designed as a command line tool, so for generating repository, recommend to use the awesome `Cookiecutter <https://github.com/audreyr/cookiecutter>`__ .\n\nIf there is an inner folder in a directory, and the directory has a\n``agen.json`` or ``agen.yaml`` , it will be judged as a\n``Repo``\\ \uff0c\n\n::\n\n    repo\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 agen.json\n    \u2514\u2500\u2500 {{name}}\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 {{name}}.py\n\nThe default behavior of this tool will be changed, assuming this\n**Repo**\n\n::\n\n    $ agen -s repo -o output -c context.json\n\n-  This command will create a folder has the same name with inner\n   directory to ``output`` directory, if the name of folder is a\n   template string, it will be compiled as standard string then create a\n   folder, the other behavior same as ``directory`` .\n-  The ``context`` is not required. If it wasn't provided, it will load\n   the ``agen.[json|yaml]`` file, and prompt user for input.\n\nExample\n^^^^^^^\n\nFor **context** ``{'key': 'value'}``\uff0c**output** is current\ndirectory, current value:\n\n::\n\n    .\n    \u2514\u2500\u2500 value\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 value.py\n\nLocal Template Directory\n''''''''''''''''''''''''\n\nUse option argument ``NAMES``, could get files path from local templates\ndirectory as ``source`` . The following two calls are equivalent in\n\\*NIX systems:\n\n::\n\n    $ agen -s ~/.agen/templates/single.txt\n    $ agen single.txt\n\nCredits\n-------\n\n-  Author : Yufei Li yufeiminds@gmail.com\n-  Contact me: @yufeiminds (Facebook)\u3001@YufeiMinds (Sina Weibo)\n\nContribution\n------------\n\nWelcome to develop with me!\n\nFork this repo & develop it.\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yufeiminds/agen", "keywords": "agen", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "agen", "package_url": "https://pypi.org/project/agen/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/agen/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/yufeiminds/agen"}, "release_url": "https://pypi.org/project/agen/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A very simple code generator.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A very simple code generator.</p>\n<a href=\"https://pypi.python.org/pypi/agen/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/206ac8e063e5d2c830b9c8aab54416164f54814e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6167656e2e737667\"></a>\n<a href=\"https://travis-ci.org/yufeiminds/agen\" rel=\"nofollow\"><img alt=\"Travis CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6671683e147dbdd07d62e593f2662986c129aba9/68747470733a2f2f7472617669732d63692e6f72672f79756665696d696e64732f6167656e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/yufeiminds/agen?branch=master\" rel=\"nofollow\"><img alt=\"Codecov Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/349dab1d0b9826cde038128e7feb3530a36c4410/68747470733a2f2f636f6465636f762e696f2f6769746875622f79756665696d696e64732f6167656e2f636f7665726167652e7376673f6272616e63683d646576656c6f70\"></a>\n<a href=\"http://agen.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Doc Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5166a04f0a2b94b9d4a02d1bb9e80dded44b5ac8/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6167656e2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://agen.readthedocs.com/en/\" rel=\"nofollow\">https://agen.readthedocs.com/en/</a> .</li>\n</ul>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Simple and very simple API</li>\n<li>Custom <tt>Jinja Env</tt> supported</li>\n<li>Could be used as Command-Line-Tools</li>\n</ul>\n<p><strong>No Template</strong></p>\n<p><em>agen</em> don\u2019t provide any template. It\u2019s only provide some function,\nto make code to be a template. If you need any public template, please\nuse the awesome open source tool,\n<a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> .</p>\n<p><strong>Why agen?</strong></p>\n<p>agen is so lightweight, that could be perfectly integrated into your\nproject in minutes.</p>\n<p>I like <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> (It\u2019s\nso cool and so awesome), but most of it\u2019s features are too heavyweight\nfor me.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install with pip:</p>\n<pre>pip install agen\n</pre>\n<p>Install with source code:</p>\n<pre>clone https://github.com/yufeiminds/agen.git\n<span class=\"nb\">cd</span> agen\npython setup.py install\n</pre>\n</div>\n<div id=\"quickstart-guide\">\n<h2>Quickstart Guide</h2>\n<p>In <em>agen</em>, use <a href=\"http://jinja.pocoo.org/docs/\" rel=\"nofollow\">jinja2</a> as\ntemplate engine for rendering, so, any feature of\n<a href=\"http://jinja.pocoo.org/docs/\" rel=\"nofollow\">jinja2</a> template will be found in\n<em>agen</em> .</p>\n<div id=\"file-generation\">\n<h3>File Generation</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">agen</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">string_render</span><span class=\"p\">,</span>\n    <span class=\"n\">render</span><span class=\"p\">,</span>\n    <span class=\"n\">generate</span><span class=\"p\">,</span>\n    <span class=\"n\">generate_dir</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Render text from a templated string</span>\n<span class=\"n\">string_render</span><span class=\"p\">(</span><span class=\"s1\">'{{key}}'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;</span> <span class=\"s1\">'value'</span>\n\n<span class=\"n\">cat</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">{{</span><span class=\"n\">key</span><span class=\"p\">}}</span>\n\n<span class=\"c1\"># Render text from a template file</span>\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s1\">'template.py'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;</span> <span class=\"s1\">'value'</span>\n\n<span class=\"c1\"># Generate file from a template file</span>\n<span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"s1\">'template.py'</span><span class=\"p\">,</span> <span class=\"s1\">'output.py'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Content of output.py</span>\n<span class=\"n\">value</span>\n</pre>\n</div>\n<div id=\"directory-generation\">\n<h3>Directory Generation</h3>\n<p>If we have a directory like this\uff1a</p>\n<pre>directory\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 <span class=\"o\">{{</span>key<span class=\"o\">}}</span>.py\n</pre>\n<p>call <tt>generate_dir</tt> function\uff1a</p>\n<pre><span class=\"n\">generate_dir</span><span class=\"p\">(</span><span class=\"s1\">'directory'</span><span class=\"p\">,</span> <span class=\"s1\">'mydir'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">})</span>\n</pre>\n<p>will generate</p>\n<pre>mydir\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 value.py\n</pre>\n<p>Every pure text file will be render by template engine. <strong>context</strong>\n<tt>{'key': 'value'}</tt> also will be rendered automatically.</p>\n</div>\n</div>\n<div id=\"command-line-tool\">\n<h2>Command Line Tool</h2>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p><em>agen</em> also implement a very simple command line tool, use for\nrendering the local template easily, but it only could be used on *UNIX\noperation system.</p>\n<pre>Usage: agen [OPTIONS] [NAMES]...\n\nOptions:\n  -o, --out PATH      Output path or directory\n  -s, --source PATH   Source path or directory\n  -c, --context PATH  Path of context file\n  --help              Show this message and exit.\n</pre>\n<p>With no argument\uff0c<em>agen</em> will search local template directory, eg.\non *NIX operation system, this directory are usually at:</p>\n<pre>$ agen\n--------------------------------------------\n  agen Library\n  see -&gt; /Users/yufeili/.agen/templates\n--------------------------------------------\ndirectory   repo        single.txt\n</pre>\n<p>The simplest way to call\uff1a</p>\n<pre>$ agen -s template_path -o ouput_path -c context.json\n</pre>\n<p>Sure, <tt>.yaml</tt> also can be used as <tt>context</tt> file. If the <tt>out</tt>\noption wasn\u2019t provided, it will prompt for input on screen (defualt is\ncurrent directory).</p>\n</div>\n<div id=\"full-example\">\n<h3>Full Example</h3>\n<p>You can specific three kinds of directory or file as the <tt>source</tt> .</p>\n<div id=\"single-file\">\n<h4>Single File</h4>\n<pre>$ agen -s single.txt -o output.txt -c context.json\n</pre>\n</div>\n<div id=\"directory\">\n<h4>Directory</h4>\n<p>Any directory, such as</p>\n<pre>directory\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 {{key}}.py\n</pre>\n<p>both could be <tt>source</tt>, it also support to use template variable to\nrender the output file name.</p>\n<pre>$ agen -s directory -o myapp -c context.json\n</pre>\n<p>This command will create a directory named <tt>myapp</tt>, and processing\nrecursively all files under the <tt>directory</tt> , output to <tt>myapp</tt> base\non origin structure.</p>\n</div>\n<div id=\"repository\">\n<h4>Repository</h4>\n<div>\n<p>Note</p>\n<p>agen is not designed as a command line tool, so for generating repository, recommend to use the awesome <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> .</p>\n</div>\n<p>If there is an inner folder in a directory, and the directory has a\n<tt>agen.json</tt> or <tt>agen.yaml</tt> , it will be judged as a\n<tt>Repo</tt>\uff0c</p>\n<pre>repo\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 agen.json\n\u2514\u2500\u2500 {{name}}\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 {{name}}.py\n</pre>\n<p>The default behavior of this tool will be changed, assuming this\n<strong>Repo</strong></p>\n<pre>$ agen -s repo -o output -c context.json\n</pre>\n<ul>\n<li>This command will create a folder has the same name with inner\ndirectory to <tt>output</tt> directory, if the name of folder is a\ntemplate string, it will be compiled as standard string then create a\nfolder, the other behavior same as <tt>directory</tt> .</li>\n<li>The <tt>context</tt> is not required. If it wasn\u2019t provided, it will load\nthe <tt><span class=\"pre\">agen.[json|yaml]</span></tt> file, and prompt user for input.</li>\n</ul>\n</div>\n<div id=\"example\">\n<h4>Example</h4>\n<p>For <strong>context</strong> <tt>{'key': 'value'}</tt>\uff0c<strong>output</strong> is current\ndirectory, current value:</p>\n<pre>.\n\u2514\u2500\u2500 value\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 value.py\n</pre>\n<div id=\"local-template-directory\">\n<h5>Local Template Directory</h5>\n<p>Use option argument <tt>NAMES</tt>, could get files path from local templates\ndirectory as <tt>source</tt> . The following two calls are equivalent in\n*NIX systems:</p>\n<pre>$ agen -s ~/.agen/templates/single.txt\n$ agen single.txt\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<ul>\n<li>Author : Yufei Li <a href=\"mailto:yufeiminds%40gmail.com\">yufeiminds<span>@</span>gmail<span>.</span>com</a></li>\n<li>Contact me: @yufeiminds (Facebook)\u3001@YufeiMinds (Sina Weibo)</li>\n</ul>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>Welcome to develop with me!</p>\n<p>Fork this repo &amp; develop it.</p>\n</div>\n\n          </div>"}, "last_serial": 2015645, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "35855eaccc3ecd0dd037faa758bb83ad", "sha256": "13e6580d179ff9a3b25606633fd1f81f3ce1a21fe9865d3759b45e1d48435d23"}, "downloads": -1, "filename": "agen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "35855eaccc3ecd0dd037faa758bb83ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9389, "upload_time": "2016-03-19T10:32:48", "upload_time_iso_8601": "2016-03-19T10:32:48.678063Z", "url": "https://files.pythonhosted.org/packages/46/f9/fe1780c264bd158a9f79db7f6d89cd95c5a883dcdc9aab742c1163360db0/agen-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35855eaccc3ecd0dd037faa758bb83ad", "sha256": "13e6580d179ff9a3b25606633fd1f81f3ce1a21fe9865d3759b45e1d48435d23"}, "downloads": -1, "filename": "agen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "35855eaccc3ecd0dd037faa758bb83ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9389, "upload_time": "2016-03-19T10:32:48", "upload_time_iso_8601": "2016-03-19T10:32:48.678063Z", "url": "https://files.pythonhosted.org/packages/46/f9/fe1780c264bd158a9f79db7f6d89cd95c5a883dcdc9aab742c1163360db0/agen-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:35 2020"}