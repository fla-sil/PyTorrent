{"info": {"author": "Filipe Waitman", "author_email": "filwaitman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": ".. image:: https://travis-ci.org/filwaitman/pyrecursive.svg?branch=master\n    :target: https://travis-ci.org/filwaitman/pyrecursive\n\n\npyrecursive\n===========\n\nHave you ever needed to transform a :code:`whatever python object` in depth? So this one is for you. =]\n\nThis library runs on both Python 2 and Python 3 (tested on 2.7 and 3.5, precisely).\n\n\nInstallation:\n-------------\n\n.. code:: bash\n\n    pip install pyrecursive\n\n\nUsage:\n-------------\n\n.. code:: python\n\n    from pyrecursive import pyrecursive\n\n    def double(obj):\n        return x * 2\n\n    pyrecursive(42, double)\n    # result: 84\n\n    pyrecursive([1, 2, 3, [4, 5, [6], 7], 8, 9, 'x'], double)\n    # result: [2, 4, 6, [8, 10, [12], 14], 16, 18, 'xx']\n\n    pyrecursive({'hamster': [1, 2, 3, {'test': 42}]}, double)\n    # result: {'hamster': [2, 4, 6, {'test': 84}]}\n\n    # In order to transform dict keys in depth by setting transform_dict_keys variable to True (default: False).\n    pyrecursive({'hamster': [1, 2, 3, {'test': 42}]}, double, transform_dict_keys=True)\n    # result: {'hamsterhamster': [2, 4, 6, {'testtest': 84}]}\n\n    # In order not to transform dict value in depth by setting transform_dict_values variable to False (default: True).\n    pyrecursive({'hamster': [1, 2, 3, {'test': 42}]}, double, transform_dict_values=False)\n    # result: {'hamster': [2, 4, 6, {'test': 42}]}\n\n    # In order to define custom rules for each object type in depth by setting custom_rules variable.\n    pyrecursive([1, 2, 3, 'banana'], double, custom_rules={int: lambda x: x * 5})\n    # result: [5, 10, 15, 'bananabanana'] (multiplied by 5 when int, multiplied by 2 otherwise)\n\n\nContribute\n----------\nDid you think in some interesting feature, or have you found a bug? Please let me know!\n\nOf course you can also download the project and send me some `pull requests <https://github.com/filwaitman/pyrecursive/pulls>`_. Please keep in mind that (1) we do follow pep8, (2) our line-length is 120 chars and (3) your changes must be compatible with Python 2.7 and Python 3.5.\n\nYou can send your suggestions by `opening issues <https://github.com/filwaitman/pyrecursive/issues>`_.\n\nYou can contact me directly as well. Take a look at my contact information at `http://filwaitman.github.io/ <http://filwaitman.github.io/>`_ (email is preferred rather than mobile phone).\n", "description_content_type": null, "docs_url": null, "download_url": "http://github.com/filwaitman/pyrecursive/tarball/0.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/filwaitman/pyrecursive", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pyrecursive", "package_url": "https://pypi.org/project/pyrecursive/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyrecursive/", "project_urls": {"Download": "http://github.com/filwaitman/pyrecursive/tarball/0.0.1", "Homepage": "http://github.com/filwaitman/pyrecursive"}, "release_url": "https://pypi.org/project/pyrecursive/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Have you ever needed to transform a `whatever python object` in depth? So this one is for you. =]", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/filwaitman/pyrecursive\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/filwaitman/pyrecursive.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e295c9ee42dbb6443b867fad8f0b9546f4ae6c2/68747470733a2f2f7472617669732d63692e6f72672f66696c776169746d616e2f70797265637572736976652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"pyrecursive\">\n<h2>pyrecursive</h2>\n<p>Have you ever needed to transform a <code>whatever python object</code> in depth? So this one is for you. =]</p>\n<p>This library runs on both Python 2 and Python 3 (tested on 2.7 and 3.5, precisely).</p>\n<div id=\"installation\">\n<h3>Installation:</h3>\n<pre>pip install pyrecursive\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrecursive</span> <span class=\"kn\">import</span> <span class=\"n\">pyrecursive</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">double</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">pyrecursive</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"n\">double</span><span class=\"p\">)</span>\n<span class=\"c1\"># result: 84</span>\n\n<span class=\"n\">pyrecursive</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s1\">'x'</span><span class=\"p\">],</span> <span class=\"n\">double</span><span class=\"p\">)</span>\n<span class=\"c1\"># result: [2, 4, 6, [8, 10, [12], 14], 16, 18, 'xx']</span>\n\n<span class=\"n\">pyrecursive</span><span class=\"p\">({</span><span class=\"s1\">'hamster'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'test'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}]},</span> <span class=\"n\">double</span><span class=\"p\">)</span>\n<span class=\"c1\"># result: {'hamster': [2, 4, 6, {'test': 84}]}</span>\n\n<span class=\"c1\"># In order to transform dict keys in depth by setting transform_dict_keys variable to True (default: False).</span>\n<span class=\"n\">pyrecursive</span><span class=\"p\">({</span><span class=\"s1\">'hamster'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'test'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}]},</span> <span class=\"n\">double</span><span class=\"p\">,</span> <span class=\"n\">transform_dict_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># result: {'hamsterhamster': [2, 4, 6, {'testtest': 84}]}</span>\n\n<span class=\"c1\"># In order not to transform dict value in depth by setting transform_dict_values variable to False (default: True).</span>\n<span class=\"n\">pyrecursive</span><span class=\"p\">({</span><span class=\"s1\">'hamster'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'test'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}]},</span> <span class=\"n\">double</span><span class=\"p\">,</span> <span class=\"n\">transform_dict_values</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># result: {'hamster': [2, 4, 6, {'test': 42}]}</span>\n\n<span class=\"c1\"># In order to define custom rules for each object type in depth by setting custom_rules variable.</span>\n<span class=\"n\">pyrecursive</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'banana'</span><span class=\"p\">],</span> <span class=\"n\">double</span><span class=\"p\">,</span> <span class=\"n\">custom_rules</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">})</span>\n<span class=\"c1\"># result: [5, 10, 15, 'bananabanana'] (multiplied by 5 when int, multiplied by 2 otherwise)</span>\n</pre>\n</div>\n<div id=\"contribute\">\n<h3>Contribute</h3>\n<p>Did you think in some interesting feature, or have you found a bug? Please let me know!</p>\n<p>Of course you can also download the project and send me some <a href=\"https://github.com/filwaitman/pyrecursive/pulls\" rel=\"nofollow\">pull requests</a>. Please keep in mind that (1) we do follow pep8, (2) our line-length is 120 chars and (3) your changes must be compatible with Python 2.7 and Python 3.5.</p>\n<p>You can send your suggestions by <a href=\"https://github.com/filwaitman/pyrecursive/issues\" rel=\"nofollow\">opening issues</a>.</p>\n<p>You can contact me directly as well. Take a look at my contact information at <a href=\"http://filwaitman.github.io/\" rel=\"nofollow\">http://filwaitman.github.io/</a> (email is preferred rather than mobile phone).</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2541271, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "66c156d7461a36675cf1b4bb4bb66468", "sha256": "e85e49165328a146c10fea16f13ffba0b94b52560f866c48441d09a95e07001b"}, "downloads": -1, "filename": "pyrecursive-0.0.1.tar.gz", "has_sig": false, "md5_digest": "66c156d7461a36675cf1b4bb4bb66468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3305, "upload_time": "2016-12-27T20:03:27", "upload_time_iso_8601": "2016-12-27T20:03:27.038546Z", "url": "https://files.pythonhosted.org/packages/97/57/92a3a4b500ccc4d5e97e9ed46c71dc0937f63e646c3395698c40574de2d4/pyrecursive-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "66c156d7461a36675cf1b4bb4bb66468", "sha256": "e85e49165328a146c10fea16f13ffba0b94b52560f866c48441d09a95e07001b"}, "downloads": -1, "filename": "pyrecursive-0.0.1.tar.gz", "has_sig": false, "md5_digest": "66c156d7461a36675cf1b4bb4bb66468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3305, "upload_time": "2016-12-27T20:03:27", "upload_time_iso_8601": "2016-12-27T20:03:27.038546Z", "url": "https://files.pythonhosted.org/packages/97/57/92a3a4b500ccc4d5e97e9ed46c71dc0937f63e646c3395698c40574de2d4/pyrecursive-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:57 2020"}