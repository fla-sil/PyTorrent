{"info": {"author": "Christian Gonz\u00e1lez", "author_email": "christian.gonzalez@nerdocs.at", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "## pydifact\n\nA Python library to parse and serialize UN/EDIFACT messages.\n\n#### Preamble\n\nThis is a port of [metroplex-systems/edifact](https://github.com/metroplex-systems/edifact) to Python. Thanks here at the start to [Craig Duncan](https://github.com/duncan3dc) for this cool piece of software. Porting was like a breeze due to the high code quality there. All credits for the initial code here go to him, I just did the translation to Python(3), some \"pythonifications\" of the code and little improvements.\n\n#### Why another EDIFACT library?\n\nBecause I did not find a decent UN/EDIFACT library for Python, so I decided to port one of the available good PHP libraries to Python. Here is the result.\n\nATM this is a Work In Progress, the API is not stable yet.\nFeel free to help.\n\n#### Usage\n\nTo read a message from a file or from a string, take the `Message` class and\niter over the segments:\n\n```python\nfrom pydifact.message import Message\nmessage = Message.from_file(\"./tests/data/order.edi\")\nmessage = Message.from_str(\"UNA:+,? 'UNH+1+ORDERS:D:96A:UN:EAN008'\")\n\nfor segment in message.segments:\n    print('Segment tag: {}, content: {}'.format(\n        segment.tag, segment.elements))\n```\n\nOr you can create an EDI message:\n\n```python\nfrom pydifact.message import Message\nfrom pydifact.segments import Segment\nmessage = Message()\nmessage.add_segment(Segment('QTY', ['12', '3']))\nprint(message.serialize())\n```\n#### Development\n\nTo develop pydifact, install the dev requirements with `pipenv install --dev`. This installs all python packages needed for development and testing.\n\nFormat all python files using [black](https://black.readthedocs.io).\n\nHappy coding, PR are more than welcome to make this library better, or to add a feature that matches your needs. Nevertheless, don't forget adding tests for every aspect you add in code.\n\n#### Testing\npydifact uses [pytest](http://pytest.org) for testing.\nJust exec `pytest` within the project folder to execute the unit tests.\n\nThere is one test to check the performance of parsing huge files, named `test_huge_message` - you can skip that test by calling\n\n```bash\npytest --ignore tests/test_huge_message.py\n```\nThis is recommended for fast testing.\n\n#### License\nThis library is licensed under the\n*MIT* license, see the\n[LICENSE file](LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nerdocs/pydifact", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pydifact", "package_url": "https://pypi.org/project/pydifact/", "platform": "", "project_url": "https://pypi.org/project/pydifact/", "project_urls": {"Homepage": "https://github.com/nerdocs/pydifact"}, "release_url": "https://pypi.org/project/pydifact/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "A Python EDI file parser.", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>pydifact</h2>\n<p>A Python library to parse and serialize UN/EDIFACT messages.</p>\n<h4>Preamble</h4>\n<p>This is a port of <a href=\"https://github.com/metroplex-systems/edifact\" rel=\"nofollow\">metroplex-systems/edifact</a> to Python. Thanks here at the start to <a href=\"https://github.com/duncan3dc\" rel=\"nofollow\">Craig Duncan</a> for this cool piece of software. Porting was like a breeze due to the high code quality there. All credits for the initial code here go to him, I just did the translation to Python(3), some \"pythonifications\" of the code and little improvements.</p>\n<h4>Why another EDIFACT library?</h4>\n<p>Because I did not find a decent UN/EDIFACT library for Python, so I decided to port one of the available good PHP libraries to Python. Here is the result.</p>\n<p>ATM this is a Work In Progress, the API is not stable yet.\nFeel free to help.</p>\n<h4>Usage</h4>\n<p>To read a message from a file or from a string, take the <code>Message</code> class and\niter over the segments:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydifact.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"s2\">\"./tests/data/order.edi\"</span><span class=\"p\">)</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">\"UNA:+,? 'UNH+1+ORDERS:D:96A:UN:EAN008'\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">segment</span> <span class=\"ow\">in</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">segments</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Segment tag: </span><span class=\"si\">{}</span><span class=\"s1\">, content: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"p\">))</span>\n</pre>\n<p>Or you can create an EDI message:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydifact.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydifact.segments</span> <span class=\"kn\">import</span> <span class=\"n\">Segment</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">()</span>\n<span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">add_segment</span><span class=\"p\">(</span><span class=\"n\">Segment</span><span class=\"p\">(</span><span class=\"s1\">'QTY'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'12'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">]))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">())</span>\n</pre>\n<h4>Development</h4>\n<p>To develop pydifact, install the dev requirements with <code>pipenv install --dev</code>. This installs all python packages needed for development and testing.</p>\n<p>Format all python files using <a href=\"https://black.readthedocs.io\" rel=\"nofollow\">black</a>.</p>\n<p>Happy coding, PR are more than welcome to make this library better, or to add a feature that matches your needs. Nevertheless, don't forget adding tests for every aspect you add in code.</p>\n<h4>Testing</h4>\n<p>pydifact uses <a href=\"http://pytest.org\" rel=\"nofollow\">pytest</a> for testing.\nJust exec <code>pytest</code> within the project folder to execute the unit tests.</p>\n<p>There is one test to check the performance of parsing huge files, named <code>test_huge_message</code> - you can skip that test by calling</p>\n<pre>pytest --ignore tests/test_huge_message.py\n</pre>\n<p>This is recommended for fast testing.</p>\n<h4>License</h4>\n<p>This library is licensed under the\n<em>MIT</em> license, see the\n<a href=\"LICENSE\" rel=\"nofollow\">LICENSE file</a>.</p>\n\n          </div>"}, "last_serial": 7120655, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "7aa4fa25d79a01cbfb9de9138341f171", "sha256": "04943b83b1d6ceaaf4020e76f9f9eda9de2726d04f3b0ed4f4317e08e28f44c1"}, "downloads": -1, "filename": "pydifact-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "7aa4fa25d79a01cbfb9de9138341f171", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16908, "upload_time": "2020-04-25T11:12:59", "upload_time_iso_8601": "2020-04-25T11:12:59.986056Z", "url": "https://files.pythonhosted.org/packages/25/cb/c76f65ef346858d43f37bc52a47782c9f066fb272bff69618ccc61a62896/pydifact-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c2bd66192331842090efa1dbe95c122", "sha256": "520db65c01b281c523b67f4258034577f03b8502b30f6b73554aee70ccaa17e4"}, "downloads": -1, "filename": "pydifact-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7c2bd66192331842090efa1dbe95c122", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10284, "upload_time": "2020-04-25T11:13:02", "upload_time_iso_8601": "2020-04-25T11:13:02.196842Z", "url": "https://files.pythonhosted.org/packages/fb/3b/7b906b49f07769d441dbf6b891796ea6a66db295161d0a1727df02fd2063/pydifact-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "be7c25e6e03999c8577756b9142c9b49", "sha256": "a884e830aa028fe4d0469928e4d5e10006c5e1b1f79c86cec7f6c061f85f6edf"}, "downloads": -1, "filename": "pydifact-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "be7c25e6e03999c8577756b9142c9b49", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18033, "upload_time": "2020-04-28T14:05:56", "upload_time_iso_8601": "2020-04-28T14:05:56.158276Z", "url": "https://files.pythonhosted.org/packages/41/09/10f1003aa32a4014ccbaf6d2d8198971266877b03c4d8c5759f18b470bfa/pydifact-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21e2feb0d14cfb49dcd2a4f16168b554", "sha256": "b8c26a95399669dd63b62e6d0d522d51388dafcfaa42e938ccae149ceee460d2"}, "downloads": -1, "filename": "pydifact-0.0.5.tar.gz", "has_sig": false, "md5_digest": "21e2feb0d14cfb49dcd2a4f16168b554", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11599, "upload_time": "2020-04-28T14:05:57", "upload_time_iso_8601": "2020-04-28T14:05:57.690203Z", "url": "https://files.pythonhosted.org/packages/a3/1e/47dfdc079835d9028dbfa5052994ddb537d571388e847863dd257b685ee5/pydifact-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be7c25e6e03999c8577756b9142c9b49", "sha256": "a884e830aa028fe4d0469928e4d5e10006c5e1b1f79c86cec7f6c061f85f6edf"}, "downloads": -1, "filename": "pydifact-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "be7c25e6e03999c8577756b9142c9b49", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18033, "upload_time": "2020-04-28T14:05:56", "upload_time_iso_8601": "2020-04-28T14:05:56.158276Z", "url": "https://files.pythonhosted.org/packages/41/09/10f1003aa32a4014ccbaf6d2d8198971266877b03c4d8c5759f18b470bfa/pydifact-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21e2feb0d14cfb49dcd2a4f16168b554", "sha256": "b8c26a95399669dd63b62e6d0d522d51388dafcfaa42e938ccae149ceee460d2"}, "downloads": -1, "filename": "pydifact-0.0.5.tar.gz", "has_sig": false, "md5_digest": "21e2feb0d14cfb49dcd2a4f16168b554", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11599, "upload_time": "2020-04-28T14:05:57", "upload_time_iso_8601": "2020-04-28T14:05:57.690203Z", "url": "https://files.pythonhosted.org/packages/a3/1e/47dfdc079835d9028dbfa5052994ddb537d571388e847863dd257b685ee5/pydifact-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:01 2020"}