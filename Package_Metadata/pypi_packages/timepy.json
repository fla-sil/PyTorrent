{"info": {"author": "Daniil Omelchenko", "author_email": "dpixelstudio@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "timepy\n======\n\n|Build Status| |Coverage Status| |PyPI version|\n\nThe simplest ever library for measuring time of python code execution.\n\nInstallation\n------------\n\n.. code:: bash\n\n    pip install timepy\n\nHow to use\n----------\n\n.. code:: python\n\n    from timepy import Timer\n\nIt's simple:\n~~~~~~~~~~~~\n\n.. code:: python\n\n    t = Timer()\n\n    t.start()\n    # Your code which you want to measure\n    t.stop()\n    print(t.total_time)\n\nYou can give a name fro your timer:\n\n.. code:: python\n\n    t = Timer('My second timer')\n\nKeep every moment you want\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can\n\n.. code:: python\n\n    t = Timer()\n    t.start()\n    # Some heavy work 1\n    t.commit('Work 1 is done')\n    # Some heave work 2\n    t.commit('Work 2 is done')\n    t.stop()\n\n    print(t.events)\n\n    # will output:\n    # [<TimerStarted: 0.0 s>,\n    #  <TimerCommitted: 10.0 s (Work 1 is done)>,\n    #  <TimerCommitted: 20.0 s (Work 2 is done)>,\n    #  <TimerStopped: 20.001 s>]\n\nMeasure your iterations\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    t = Timer()\n    t.start\n    for i in some_list:\n        # do heavy work\n        t.lap()\n    t.stop()\n\n    print(t.laps[0])      # <Lap 0: 123 s>\n    print(t.laps)         # see all laps\n    print(t.average_lap)  # average lap duration\n\n.. |Build Status| image:: https://travis-ci.org/daniil-omelchenko/timepy.svg?branch=master\n   :target: https://travis-ci.org/daniil-omelchenko/timepy\n.. |Coverage Status| image:: https://coveralls.io/repos/github/daniil-omelchenko/timepy/badge.svg?branch=master\n   :target: https://coveralls.io/github/daniil-omelchenko/timepy?branch=master\n.. |PyPI version| image:: https://badge.fury.io/py/timepy.svg\n   :target: https://badge.fury.io/py/timepy\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/daniil-omelchenko/timepy/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/daniil-omelchenko/timepy", "keywords": "timer,debugging,testing,measurement,performance,logging", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "timepy", "package_url": "https://pypi.org/project/timepy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/timepy/", "project_urls": {"Download": "https://github.com/daniil-omelchenko/timepy/archive/master.zip", "Homepage": "https://github.com/daniil-omelchenko/timepy"}, "release_url": "https://pypi.org/project/timepy/0.1a/", "requires_dist": null, "requires_python": null, "summary": "The simplest ever library for measuring time of python code execution.", "version": "0.1a", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/daniil-omelchenko/timepy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08b691374a1f6bf8b3adecc51f6707a6a392d514/68747470733a2f2f7472617669732d63692e6f72672f64616e69696c2d6f6d656c6368656e6b6f2f74696d6570792e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/daniil-omelchenko/timepy?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98516e46dd6898e8fe2b9fba11189fed5b8ad0a9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f64616e69696c2d6f6d656c6368656e6b6f2f74696d6570792f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/timepy\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1c428dceae9d4da4256494c7480e870687bea55/68747470733a2f2f62616467652e667572792e696f2f70792f74696d6570792e737667\"></a></p>\n<p>The simplest ever library for measuring time of python code execution.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install timepy\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">timepy</span> <span class=\"kn\">import</span> <span class=\"n\">Timer</span>\n</pre>\n<div id=\"it-s-simple\">\n<h3>It\u2019s simple:</h3>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Timer</span><span class=\"p\">()</span>\n\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># Your code which you want to measure</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">total_time</span><span class=\"p\">)</span>\n</pre>\n<p>You can give a name fro your timer:</p>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'My second timer'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"keep-every-moment-you-want\">\n<h3>Keep every moment you want</h3>\n<p>You can</p>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Timer</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># Some heavy work 1</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"s1\">'Work 1 is done'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Some heave work 2</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"s1\">'Work 2 is done'</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># will output:</span>\n<span class=\"c1\"># [&lt;TimerStarted: 0.0 s&gt;,</span>\n<span class=\"c1\">#  &lt;TimerCommitted: 10.0 s (Work 1 is done)&gt;,</span>\n<span class=\"c1\">#  &lt;TimerCommitted: 20.0 s (Work 2 is done)&gt;,</span>\n<span class=\"c1\">#  &lt;TimerStopped: 20.001 s&gt;]</span>\n</pre>\n</div>\n<div id=\"measure-your-iterations\">\n<h3>Measure your iterations</h3>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Timer</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">some_list</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do heavy work</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">lap</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">laps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>      <span class=\"c1\"># &lt;Lap 0: 123 s&gt;</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">laps</span><span class=\"p\">)</span>         <span class=\"c1\"># see all laps</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">average_lap</span><span class=\"p\">)</span>  <span class=\"c1\"># average lap duration</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2719787, "releases": {"0.1a": [{"comment_text": "", "digests": {"md5": "f5fa10869db4377d26ffb335b5624530", "sha256": "e76cf6431ec7c0cf7e6a282acdbfb5f4bb0669c7669a39355d38086536aad07d"}, "downloads": -1, "filename": "timepy-0.1a.tar.gz", "has_sig": false, "md5_digest": "f5fa10869db4377d26ffb335b5624530", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3411, "upload_time": "2017-03-21T09:30:12", "upload_time_iso_8601": "2017-03-21T09:30:12.534780Z", "url": "https://files.pythonhosted.org/packages/2b/0b/a99f37640ff7493beeb54dd8a3f85043a87aa5c4077e9fa39459b88212db/timepy-0.1a.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5fa10869db4377d26ffb335b5624530", "sha256": "e76cf6431ec7c0cf7e6a282acdbfb5f4bb0669c7669a39355d38086536aad07d"}, "downloads": -1, "filename": "timepy-0.1a.tar.gz", "has_sig": false, "md5_digest": "f5fa10869db4377d26ffb335b5624530", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3411, "upload_time": "2017-03-21T09:30:12", "upload_time_iso_8601": "2017-03-21T09:30:12.534780Z", "url": "https://files.pythonhosted.org/packages/2b/0b/a99f37640ff7493beeb54dd8a3f85043a87aa5c4077e9fa39459b88212db/timepy-0.1a.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:28 2020"}