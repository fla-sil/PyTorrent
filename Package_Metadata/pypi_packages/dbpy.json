{"info": {"author": "Thomas Huang", "author_email": "lyanghwy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU Affero General Public License v3", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database"], "description": "dbpy\r\n#####\r\n\r\n\r\n\r\ndbpy is database abstration layer wrote by python. The design is inspired by `webpy db <https://github.com/webpy/webpy>`_ and `drupal database <https://www.drupal.org/developing/api/database>`_ . If like the simple db abstration layer like ``tornado db`` or ``webpy db``, it is worth to try.\r\n\r\n\r\n`\u4e2d\u6587|chinese <https://github.com/thomashuang/dbpy/blob/master/README_CN.rst>`_\r\n\r\nchanges\r\n==========\r\n\r\n#. Add pymysql adapter\r\n\r\n\r\n\r\nInstall the extension with the following command::\r\n\r\n    $ easy_install pymysql\r\n\r\nor alternatively if you have pip installed::\r\n\r\n\r\n    $ pip install pymysql\r\n\r\nFeatues\r\n================\r\n\r\n#. silmple and flexible\r\n#. graceful and useful sql query builder.\r\n#. thread-safe connection pool\r\n#. supports read/write master-slave mode\r\n#. supports transaction\r\n\r\nThe Projects use dbpy\r\n======================\r\n\r\n\r\n`Lilac (Distributed Scheduler Task System) <https://github.com/thomashuang/Lilac>`_\r\n\r\n.. contents::\r\n    :depth: 4\r\n\r\n\r\n\r\n\r\nInstall\r\n==============\r\n\r\nInstall the extension with the following command::\r\n\r\n    $ easy_install dbpy\r\n\r\nor alternatively if you have pip installed::\r\n\r\n\r\n    $ pip install dbpy\r\n\r\n\r\nor clone it form github then run the command in shell:\r\n\r\n.. code-block:: bash\r\n\r\n    cd db # the path to the project\r\n    python setup.py install\r\n\r\nDevelopment\r\n===========\r\n\r\nFork or download it, then run:\r\n\r\n.. code-block:: bash \r\n\r\n    cd db # the path to the project\r\n    python setup.py develop\r\n\r\n\r\n\r\nCompatibility\r\n=============\r\n\r\nBuilt and tested under Python 2.7+\r\n\r\n\r\nDB API\r\n========\r\n\r\n\r\nHave a look:\r\n\r\n.. code-block:: python\r\n\r\n    config = {\r\n            'passwd': 'test',\r\n            'user': 'test',\r\n            'host': 'localhost',\r\n            'db': 'test',\r\n            'max_idle' : 5*60\r\n        }\r\n\r\n    db.setup(config,  minconn=5, maxconn=10,  \r\n        adapter='mysql', key='default', slave=False)\r\n\r\n    db.execute('show tables')\r\n\r\n\r\n\r\nsetup\r\n---------\r\n\r\n:config: the connection basic config, the all of arguements of MySQLDB#connect is acceptable\u3002 the ``max_idle`` is the connect timeout setting that is used to reconnection when connection is timeout, default is 10 seconds.\r\n:minconn: the minimum connections for the connection pool, default is 5.\r\n:maxconn: the maximum connections for the connection pool, default is 10.\r\n:adapter: the database driver adapter name, currently supports mysql (MySQLdb, pymysql) only.\r\n:key: the database idenfify for database,  default database is \"default\"\r\n:slave: if set to true, the database will be register as a slave database. make sure you setup a master firstly.\r\n\r\n\r\n.. code-block:: python\r\n\r\n    config = {\r\n            'passwd': 'test',\r\n            'user': 'test',\r\n            'host': 'localhost',\r\n            'db': 'test',\r\n            'max_idle' : 5*60\r\n        }\r\n\r\n    db.setup(config, key='test')\r\n    config['host'] = 'test.slave'\r\n    # set a slave, and now the master can only to write\r\n    db.setup(config, key='test', slave=True) \r\n\r\n    config['host'] = 'test.slave2'\r\n    # add more slave for 'test'\r\n    db.setup(config, key='test', slave=True)\r\n\r\n\r\n    config['host'] = 'host2'\r\n    config['db'] = 'social'\r\n    # set another database\r\n    db.setup(config, key='social', slave=True)\r\n\r\nquery\r\n-------\r\n\r\n\r\n\r\nquery api is used for reading database operation, like select..., show tables, if you wanna update your database please use execute api.\r\n\r\nquery(sql, args=None, many=None, as_dict=False, key='default'):\r\n\r\n:sql: the raw sql\r\n:args: the args for sql arguement to prepare execute.\r\n:many: when set to a greater zero integer, it will use fetchmany then yield return a generator, otherwise a list.\r\n:as_dict: when set to true, query api will return the database result as dict row, otherwise tuple row.\r\n:key: the idenfify of database.\r\n\r\n.. code-block:: python\r\n\r\n    print db.query('SELECT 1')\r\n    # > ((1L,),)\r\n\r\n    # use social db\r\n    print db.query('SELECT 1', key='social')\r\n    # > ((1L,),)\r\n\r\n    print db.query('SELECT * FROM users WHERE uid=%s and name=%s', (1, 'user_1'))\r\n    # > ((1L, u'user_1'),)\r\n\r\n    # Wanna return dict row\r\n    print db.query('SELECT * FROM users WHERE uid=%s and name=%s', \r\n                (1, 'user_1'), as_dict=True)\r\n    # > ({'uid': 1L, 'name': u'user_1'},)\r\n\r\n    # Use fetchmany(many) then yeild, Return generator\r\n    res = db.query('SELECT * FROM users WHERE uid=%s and name=%s', \r\n                    (1, 'user_1'), many=5, as_dict=True)\r\n    print res\r\n    print res.next()\r\n    # > <generator object _yield at 0x7f818f4b6820>\r\n    # > {'uid': 1L, 'name': u'user_1'}\r\n\r\n\r\nexecute\r\n--------\r\n\r\nthe api is used for writing database operation, like insert, update, delete.. if you wanna read query your database please use query api.\r\n\r\nexecute(sql, args=None, key='default'):\r\n\r\n\r\n:sql: the raw sql\r\n:args: the args for sql arguement to prepare execute.\r\n:key: the idenfify of database.\r\n\r\n\r\nReturn::\r\n\r\n  it returns last_insert_id when sql is insert statement, otherwise rowcount\r\n\r\n.. code-block:: python\r\n    \r\n    db.execute('DROP TABLE IF EXISTS `users`')\r\n    db.execute(\"\"\"CREATE TABLE `users` (\r\n             `uid` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n            `name` varchar(20) NOT NULL,\r\n            PRIMARY KEY (`uid`))\"\"\")\r\n    \r\n    # when inset mutil-values\uff0cthe api will call executemany\r\n    db.execute('INSERT INTO users VALUES(%s, %s)', [(10, 'execute_test'), (9, 'execute_test')])\r\n    # > 9\r\n    db.execute('DELETE FROM users WHERE name=%s', ('execute_test',))\r\n    # > 2\r\n\r\n\r\n    # use social db\r\n    db.execute('delete from events where created_at<%s', (expired, ), key='social')\r\n    # > 10\r\n\r\nselect\r\n-----------\r\n\r\nthe api is used for select sql database query.\r\n\r\nselect(table, key='default'):\r\n\r\n:table: the table name\r\n:key: the idenfify of database \r\n\r\nselect all\r\n~~~~~~~~~~~~~~~~\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users')\r\n    # > SELECT * FROM `users`\r\n\r\nspecific columns\r\n~~~~~~~~~~~~~~~~~\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').fields('uid', 'name')\r\n    # > SELECT `uid`, `name` FROM `users`\r\n\r\n\r\nexecute\r\n~~~~~~~~~~~~~~~~\r\n\r\nwhen you already build your sql, try execute api to fetch your database result.\r\n\r\nexecute(many=None, as_dict=False):\r\n\r\n:many: when set to a greater zero integer, it will use fetchmany then yield return a generator, otherwise a list.\r\n:as_dict: when set to true, query api will return the database result as dict row, otherwise tuple row.\r\n\r\n.. code-block:: python\r\n\r\n    q = db.select('users').fields('uid', 'name')\r\n    res = q.execute()\r\n    print res\r\n    # > ((1L, u'user_1'), (2L, u'user_2'), (3L, u'user_3'), (4L, u'user_4'), (5L, None))\r\n\r\n    res = q.execute(many=2, as_dict=True)\r\n    print res\r\n    print res.next()\r\n    # > <generator object _yield at 0x7f835825e820>\r\n    # > {'uid': 1L, 'name': u'user_1'}\r\n\r\n\r\nCondition\r\n~~~~~~~~~~~\r\n\r\nIt is time to try more complex select query.\r\n\r\ncondition(field, value=None, operator=None):\r\n\r\n:field: the field of table \r\n:value: the value of field, defaul is None (\"field is null\")\r\n:operator: the where operator like BETWEEN, IN, NOT IN, EXISTS, NOT EXISTS, IS NULL, IS NOT NULL, LIKE, NOT LIKE, =, <, >, >=, <=, <> and so on.\r\n\r\n\r\nsimple \r\n^^^^^^^^^^^^^^^^\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').condition('uid', 1) # condition('uid', 1, '=')\r\n    # > SELECT * FROM `users`\r\n    # > WHERE  `uid` = %s \r\n\r\n\r\nin \r\n^^^^^^^^^^^^^^^^\r\n\r\n.. code-block:: python\r\n\r\n\r\n    db.select('users').condition('uid', (1, 3)) # condition('uid', [1, 3]) \u4e00\u6837\r\n    # > SELECT * FROM `users`\r\n    # > WHERE  `uid` IN  (%s, %s) \r\n\r\nbetween \r\n^^^^^^^^^^^^^^^^\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').condition('uid', (1, 3), 'between')\r\n    # > SELECT * FROM `users`\r\n    # > WHERE  `uid` BETWEEN %s AND %s \r\n\r\n\r\nmulti condition\r\n^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').condition('uid', 1).condition('name', 'blabla')\r\n    # > SELECT * FROM `users`\r\n    # > WHERE  `uid` = %s AND `name` = %s \r\n\r\nor condition\r\n^^^^^^^^^^^^^^\r\n\r\n.. code-block:: python\r\n\r\n    or_cond = db.or_().condition('uid', 1).condition('name', 'blabla')\r\n    db.select('users').condition(or_cond).condition('uid', 1, '<>')\r\n    # > SELECT * FROM `users`\r\n    # > WHERE  ( `uid` = %s OR `name` = %s ) AND `uid` <> %s \r\n\r\n\r\n\r\norder by\r\n~~~~~~~~~\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').order_by('name')\r\n    # > SELECT * FROM `users`\r\n    # > ORDER BY `name`\r\n\r\n    db.select('users').order_by('name', 'DESC')\r\n    # > SELECT * FROM `users`\r\n    # > ORDER BY `name` DESC\r\n\r\n    db.select('users').order_by('name', 'DESC').order_by('uid')\r\n    # > SELECT * FROM `users`\r\n    # > ORDER BY `name` DESC, `uid`\r\n\r\n\r\n\r\ndistinct\r\n~~~~~~~~~\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').distinct().condition('uid', 1)\r\n    # > SELECT DISTINCT * FROM `users`\r\n    # > WHERE  `uid` = %s \r\n\r\n    db.select('users').fields('uid', 'name').distinct().condition('uid', 1)\r\n    # > SELECT DISTINCT `uid`, `name` FROM `users`\r\n    # > WHERE  `uid` = %s \r\n\r\n\r\ngroup by\r\n~~~~~~~~~\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').group_by('name', 'uid')\r\n    # > SELECT * FROM `users`\r\n    # > GROUP BY `name`, `uid`\r\n\r\n\r\nlimit and offset\r\n~~~~~~~~~~~~~~~~~\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').limit(2).offset(5)\r\n    # > SELECT * FROM `users`\r\n    # > LIMIT 2 OFFSET 5\r\n\r\nnull condition\r\n~~~~~~~~~~~~~~~\r\n\r\n.. code-block:: python\r\n\r\n    db.select('users').is_null('name').condition('uid', 5)\r\n    # > SELECT * FROM `users`\r\n    # > WHERE  `name` IS NULL  AND `uid` = %s \r\n\r\n    db.select('users').is_not_null('name').condition('uid', 5)\r\n    # > SELECT * FROM `users`\r\n    # > WHERE  `name` IS NOT NULL  AND `uid` = %s \r\n\r\n    db.select('users').condition('name', None)\r\n    # > SELECT * FROM `users`\r\n    # > WHERE  `name` IS NULL  \r\n\r\n\r\ncomplex conditions\r\n-------------------\r\n\r\nusing db.and_(), db.or_(), we can build complex where conditions:\r\n\r\n.. code-block:: python\r\n\r\n    or_cond = db.or_().condition('field1', 1).condition('field2', 'blabla')\r\n    and_cond = db.and_().condition('field3', 'what').condition('field4', 'then?')\r\n    print db.select('table_name').condition(or_cond).condition(and_cond)\r\n\r\n    # > SELECT * FROM `table_name`\r\n    # > WHERE  ( `field1` = %s OR `field2` = %s ) AND ( `field3` = %s AND `field4` = %s ) \r\n\r\nexpr\r\n------------\r\n\r\nif you wanna use the aggregate functions like sum, count, please use ``erpr`` :\r\n\r\n.. code-block:: python\r\n\r\n    from  db import expr\r\n\r\n    db.select('users').fields(expr('count(*)'))\r\n    # > SELECT count(*) FROM `users`\r\n\r\n    db.select('users').fields(expr('count(uid)', 'total'))\r\n    # > SELECT count(uid) AS `total` FROM `users`\r\n\r\n\r\n\r\ninsert\r\n-----------\r\n\r\nThe ``insert`` api is used for building insert into sql statement.\r\n\r\ninsert(table, key='default'):\r\n\r\n:table: the table name\r\n:key: the idenfify of database \r\n\r\n.. code-block:: python\r\n\r\n    q = db.insert('users').values((10, 'test_insert'))\r\n    # > INSERT INTO `users` VALUES(%s, %s)\r\n    print q._values\r\n    # > [(10, 'test_insert')]\r\n\r\n\r\n    q = db.insert('users').fields('name').values({'name': 'insert_1'}).values(('insert_2',))\r\n    # > INSERT INTO `users` (`name`) VALUES(%s)\r\n    print q._values\r\n    # > [('insert_1',), ('insert_2',)]\r\n\r\n\r\nWhen you use ``execute`` api to get result, it will reutrn the ``last insert id``\uff1a\r\n\r\n.. code-block:: python\r\n    \r\n    \r\n    print q.execute()\r\n    # > 2\r\n\r\n\r\n\r\nupdate\r\n-----------\r\n\r\nThe ``update`` api is used for building update sql statement.\r\n\r\nupdate(table, key='default'):\r\n\r\n:table: the table name\r\n:key: the idenfify of database \r\n\r\n\r\nmset and set\uff1a\r\n\r\n:mset: the value must be dict tpye, that sets mutil-fileds at once time.\r\n:set(column, value): set one field one time.\r\n\r\nthe where conditions please see `select`_ for more information.\r\n\r\n\r\n.. code-block:: python\r\n    \r\n    \r\n    db.update('users').mset({'name':None, 'uid' : 12}).condition('name','user_1')\r\n    # > UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s \r\n\r\n    q = (db.update('users').set('name', 'update_test').set('uid', 12)\r\n        .condition('name', 'user_2').condition('uid', 2)) # .execute()\r\n    print q.to_sql()\r\n    # > UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s AND `uid` = %s \r\n  \r\n\r\n\r\nWhen you use ``execute`` api to get result, it will reutrn the ``rowcount``\uff1a\r\n\r\n\r\n.. code-block:: python\r\n    \r\n    \r\n    print q.execute()\r\n    # > 2\r\n\r\nlimit\r\n~~~~~~~~~\r\n\r\n\r\n\r\nYou can use limit api to lim the quantity of update.\r\n\r\n\r\n.. code-block:: python\r\n    \r\n    db.update('users').mset({'name':None, 'uid' : 12}).condition('name','user_1').limit(5)\r\n    # > UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s  LIMIT 5\r\n\r\ndelete\r\n-----------\r\n\r\n\r\nThe ``delete`` api is used for building DELETE FROM sql statement.\r\n\r\ndelete(table, key='default'):\r\n\r\n:table: the table name\r\n:key: the idenfify of database \r\n\r\nthe where conditions please see `select`_ for more information.\r\n\r\n.. code-block:: python\r\n    \r\n    db.delete('users').condition('name','user_1')\r\n    # > DELETE FROM `users` WHERE  `name` = %s \r\n\t\r\nWhen you use ``execute`` api to get result, it will reutrn the ``rowcount``\uff1a\r\n\r\n.. code-block:: python\r\n    \r\n    \r\n    print q.execute()\r\n    # > 2\r\n\r\n\r\nto_sql and str\r\n---------------------\r\n\r\nyou can use to_sql or __str__ method to the objects of  ``select``, ``insert``, ``update``, ``delete`` to print the sql you build.\r\n\r\n\r\n.. code-block:: python\r\n    \r\n\r\n    q = (db.update('users').set('name', 'update_test').set('uid', 12)\r\n            .condition('name', 'user_2').condition('uid', 2))\r\n    print q.to_sql()\r\n    print q\r\n    # > UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s AND `uid` = %s \r\n\r\n\r\ntransaction\r\n------------\r\n\r\ntransaction(table, key='default'):\r\n\r\n:table: the table name\r\n:key: the idenfify of database \r\n\r\n\r\nThe simple transaction done all or do nothing, you cann't set savepoint. \r\n\r\n\r\n\r\n.. code-block:: python\r\n    \r\n\r\n    # with context\r\n    with db.transaction() as t:\r\n        t.delete('users').condition('uid', 1).execute()\r\n        (t.update('users').mset({'name':None, 'uid' : 12})\r\n            .condition('name','user_1').execute())\r\n\r\n\r\n    # the normal way\r\n    t = db.transaction()\r\n    t.begin()\r\n    t.delete('users').condition('uid', 1).execute()\r\n    (t.update('users').mset({'name':None, 'uid' : 12})\r\n        .condition('name','user_1').execute())\r\n\r\n    #if failed will rollback\r\n    t.commit()\r\n\r\n.. note:: when uses begin must be combine with commit\uff0cotherwise the connection will not return connection pool.suggets to use ``with context``\r\n\r\n\r\nsimple orm\r\n-----------\r\n\r\nthe orm demo  `samples <https://github.com/thomashuang/dbpy/blob/master/samples>`_\r\n\r\n.. code-block:: python\r\n    \r\n    import model\r\n    from orm import Backend\r\n    import db\r\n\r\n    db.setup({ 'host': 'localhost', 'user': 'test', 'passwd': 'test', 'db': 'blog'})\r\n\r\n\r\n    user = Backend('user').find_by_username('username')\r\n    if user and user.check('password'):\r\n        print 'auth'\r\n\r\n    user = model.User('username', 'email', 'real_name', 'password', \r\n            'bio', 'status', 'role')\r\n    if Backend('user').create(user):\r\n        print 'fine'\r\n\r\n    user = Backend('user').find(12)\r\n    user.real_name = 'blablabla....'\r\n    if Backend('user').save(user):\r\n        print 'user saved'\r\n\r\n    if Backend('user').delete(user):\r\n        print 'delete user failed'\r\n\r\n\r\n    post = model.Post('title', 'slug', 'description', 'html', 'css', 'js', \r\n            'category', 'status', 'comments', 'author')\r\n    if not Backend('post').create(post):\r\n        print 'created failed'\r\n\r\nFuture\r\n--------\r\n\r\n\r\nPersonal idea:\r\n\r\n#. add ``join``  for select api \r\n#. add a schema class for creating or changing table.\r\n#. add some api for mysql individual sql like ``replace`` or ``duplicate update``\r\n#. improve connection pool.\r\n\r\n\r\nLICENSE\r\n=======\r\n\r\n    Copyright (C) 2014-2015 Thomas Huang\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, version 2 of the License.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/whiteclover/dbpy", "keywords": "database abstraction layer for pythoneer(orm", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "dbpy", "package_url": "https://pypi.org/project/dbpy/", "platform": "", "project_url": "https://pypi.org/project/dbpy/", "project_urls": {"Homepage": "https://github.com/whiteclover/dbpy"}, "release_url": "https://pypi.org/project/dbpy/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "database abstraction layer for pythoneer", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>dbpy is database abstration layer wrote by python. The design is inspired by <a href=\"https://github.com/webpy/webpy\" rel=\"nofollow\">webpy db</a> and <a href=\"https://www.drupal.org/developing/api/database\" rel=\"nofollow\">drupal database</a> . If like the simple db abstration layer like <tt>tornado db</tt> or <tt>webpy db</tt>, it is worth to try.</p>\n<p><a href=\"https://github.com/thomashuang/dbpy/blob/master/README_CN.rst\" rel=\"nofollow\">\u4e2d\u6587|chinese</a></p>\n<div id=\"changes\">\n<h2><a href=\"#id2\" rel=\"nofollow\">changes</a></h2>\n<ol>\n<li>Add pymysql adapter</li>\n</ol>\n<p>Install the extension with the following command:</p>\n<pre>$ easy_install pymysql\n</pre>\n<p>or alternatively if you have pip installed:</p>\n<pre>$ pip install pymysql\n</pre>\n</div>\n<div id=\"featues\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Featues</a></h2>\n<ol>\n<li>silmple and flexible</li>\n<li>graceful and useful sql query builder.</li>\n<li>thread-safe connection pool</li>\n<li>supports read/write master-slave mode</li>\n<li>supports transaction</li>\n</ol>\n</div>\n<div id=\"the-projects-use-dbpy\">\n<h2><a href=\"#id4\" rel=\"nofollow\">The Projects use dbpy</a></h2>\n<p><a href=\"https://github.com/thomashuang/Lilac\" rel=\"nofollow\">Lilac (Distributed Scheduler Task System)</a></p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#changes\" id=\"id2\" rel=\"nofollow\">changes</a></li>\n<li><a href=\"#featues\" id=\"id3\" rel=\"nofollow\">Featues</a></li>\n<li><a href=\"#the-projects-use-dbpy\" id=\"id4\" rel=\"nofollow\">The Projects use dbpy</a></li>\n<li><a href=\"#install\" id=\"id5\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#development\" id=\"id6\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#compatibility\" id=\"id7\" rel=\"nofollow\">Compatibility</a></li>\n<li><a href=\"#db-api\" id=\"id8\" rel=\"nofollow\">DB API</a><ul>\n<li><a href=\"#setup\" id=\"id9\" rel=\"nofollow\">setup</a></li>\n<li><a href=\"#query\" id=\"id10\" rel=\"nofollow\">query</a></li>\n<li><a href=\"#execute\" id=\"id11\" rel=\"nofollow\">execute</a></li>\n<li><a href=\"#select\" id=\"id12\" rel=\"nofollow\">select</a><ul>\n<li><a href=\"#select-all\" id=\"id13\" rel=\"nofollow\">select all</a></li>\n<li><a href=\"#specific-columns\" id=\"id14\" rel=\"nofollow\">specific columns</a></li>\n<li><a href=\"#id1\" id=\"id15\" rel=\"nofollow\">execute</a></li>\n<li><a href=\"#condition\" id=\"id16\" rel=\"nofollow\">Condition</a><ul>\n<li><a href=\"#simple\" id=\"id17\" rel=\"nofollow\">simple</a></li>\n<li><a href=\"#in\" id=\"id18\" rel=\"nofollow\">in</a></li>\n<li><a href=\"#between\" id=\"id19\" rel=\"nofollow\">between</a></li>\n<li><a href=\"#multi-condition\" id=\"id20\" rel=\"nofollow\">multi condition</a></li>\n<li><a href=\"#or-condition\" id=\"id21\" rel=\"nofollow\">or condition</a></li>\n</ul>\n</li>\n<li><a href=\"#order-by\" id=\"id22\" rel=\"nofollow\">order by</a></li>\n<li><a href=\"#distinct\" id=\"id23\" rel=\"nofollow\">distinct</a></li>\n<li><a href=\"#group-by\" id=\"id24\" rel=\"nofollow\">group by</a></li>\n<li><a href=\"#limit-and-offset\" id=\"id25\" rel=\"nofollow\">limit and offset</a></li>\n<li><a href=\"#null-condition\" id=\"id26\" rel=\"nofollow\">null condition</a></li>\n</ul>\n</li>\n<li><a href=\"#complex-conditions\" id=\"id27\" rel=\"nofollow\">complex conditions</a></li>\n<li><a href=\"#expr\" id=\"id28\" rel=\"nofollow\">expr</a></li>\n<li><a href=\"#insert\" id=\"id29\" rel=\"nofollow\">insert</a></li>\n<li><a href=\"#update\" id=\"id30\" rel=\"nofollow\">update</a><ul>\n<li><a href=\"#limit\" id=\"id31\" rel=\"nofollow\">limit</a></li>\n</ul>\n</li>\n<li><a href=\"#delete\" id=\"id32\" rel=\"nofollow\">delete</a></li>\n<li><a href=\"#to-sql-and-str\" id=\"id33\" rel=\"nofollow\">to_sql and str</a></li>\n<li><a href=\"#transaction\" id=\"id34\" rel=\"nofollow\">transaction</a></li>\n<li><a href=\"#simple-orm\" id=\"id35\" rel=\"nofollow\">simple orm</a></li>\n<li><a href=\"#future\" id=\"id36\" rel=\"nofollow\">Future</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" id=\"id37\" rel=\"nofollow\">LICENSE</a></li>\n</ul>\n</div>\n</div>\n<div id=\"install\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Install</a></h2>\n<p>Install the extension with the following command:</p>\n<pre>$ easy_install dbpy\n</pre>\n<p>or alternatively if you have pip installed:</p>\n<pre>$ pip install dbpy\n</pre>\n<p>or clone it form github then run the command in shell:</p>\n<pre><span class=\"nb\">cd</span> db <span class=\"c1\"># the path to the project\n</span>python setup.py install\n</pre>\n</div>\n<div id=\"development\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Development</a></h2>\n<p>Fork or download it, then run:</p>\n<pre><span class=\"nb\">cd</span> db <span class=\"c1\"># the path to the project\n</span>python setup.py develop\n</pre>\n</div>\n<div id=\"compatibility\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Compatibility</a></h2>\n<p>Built and tested under Python 2.7+</p>\n</div>\n<div id=\"db-api\">\n<h2><a href=\"#id8\" rel=\"nofollow\">DB API</a></h2>\n<p>Have a look:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'passwd'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'max_idle'</span> <span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"mi\">60</span>\n    <span class=\"p\">}</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span>  <span class=\"n\">minconn</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">maxconn</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">adapter</span><span class=\"o\">=</span><span class=\"s1\">'mysql'</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">slave</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'show tables'</span><span class=\"p\">)</span>\n</pre>\n<div id=\"setup\">\n<h3><a href=\"#id9\" rel=\"nofollow\">setup</a></h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>config:</th><td>the connection basic config, the all of arguements of MySQLDB#connect is acceptable\u3002 the <tt>max_idle</tt> is the connect timeout setting that is used to reconnection when connection is timeout, default is 10 seconds.</td>\n</tr>\n<tr><th>minconn:</th><td>the minimum connections for the connection pool, default is 5.</td>\n</tr>\n<tr><th>maxconn:</th><td>the maximum connections for the connection pool, default is 10.</td>\n</tr>\n<tr><th>adapter:</th><td>the database driver adapter name, currently supports mysql (MySQLdb, pymysql) only.</td>\n</tr>\n<tr><th>key:</th><td>the database idenfify for database,  default database is \u201cdefault\u201d</td>\n</tr>\n<tr><th>slave:</th><td>if set to true, the database will be register as a slave database. make sure you setup a master firstly.</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'passwd'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'max_idle'</span> <span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"mi\">60</span>\n    <span class=\"p\">}</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'test.slave'</span>\n<span class=\"c1\"># set a slave, and now the master can only to write</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">slave</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'test.slave2'</span>\n<span class=\"c1\"># add more slave for 'test'</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">slave</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'host2'</span>\n<span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'db'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'social'</span>\n<span class=\"c1\"># set another database</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'social'</span><span class=\"p\">,</span> <span class=\"n\">slave</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"query\">\n<h3><a href=\"#id10\" rel=\"nofollow\">query</a></h3>\n<p>query api is used for reading database operation, like select\u2026, show tables, if you wanna update your database please use execute api.</p>\n<p>query(sql, args=None, many=None, as_dict=False, key=\u2019default\u2019):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>sql:</th><td>the raw sql</td>\n</tr>\n<tr><th>args:</th><td>the args for sql arguement to prepare execute.</td>\n</tr>\n<tr><th>many:</th><td>when set to a greater zero integer, it will use fetchmany then yield return a generator, otherwise a list.</td>\n</tr>\n<tr><th>as_dict:</th><td>when set to true, query api will return the database result as dict row, otherwise tuple row.</td>\n</tr>\n<tr><th>key:</th><td>the idenfify of database.</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"nb\">print</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; ((1L,),)</span>\n\n<span class=\"c1\"># use social db</span>\n<span class=\"nb\">print</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'social'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; ((1L,),)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM users WHERE uid=</span><span class=\"si\">%s</span><span class=\"s1\"> and name=</span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'user_1'</span><span class=\"p\">))</span>\n<span class=\"c1\"># &gt; ((1L, u'user_1'),)</span>\n\n<span class=\"c1\"># Wanna return dict row</span>\n<span class=\"nb\">print</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM users WHERE uid=</span><span class=\"si\">%s</span><span class=\"s1\"> and name=</span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n            <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'user_1'</span><span class=\"p\">),</span> <span class=\"n\">as_dict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; ({'uid': 1L, 'name': u'user_1'},)</span>\n\n<span class=\"c1\"># Use fetchmany(many) then yeild, Return generator</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM users WHERE uid=</span><span class=\"si\">%s</span><span class=\"s1\"> and name=</span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'user_1'</span><span class=\"p\">),</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">as_dict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">res</span>\n<span class=\"nb\">print</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"c1\"># &gt; &lt;generator object _yield at 0x7f818f4b6820&gt;</span>\n<span class=\"c1\"># &gt; {'uid': 1L, 'name': u'user_1'}</span>\n</pre>\n</div>\n<div id=\"execute\">\n<h3><a href=\"#id11\" rel=\"nofollow\">execute</a></h3>\n<p>the api is used for writing database operation, like insert, update, delete.. if you wanna read query your database please use query api.</p>\n<p>execute(sql, args=None, key=\u2019default\u2019):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>sql:</th><td>the raw sql</td>\n</tr>\n<tr><th>args:</th><td>the args for sql arguement to prepare execute.</td>\n</tr>\n<tr><th>key:</th><td>the idenfify of database.</td>\n</tr>\n</tbody>\n</table>\n<p>Return:</p>\n<pre>it returns last_insert_id when sql is insert statement, otherwise rowcount\n</pre>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'DROP TABLE IF EXISTS `users`'</span><span class=\"p\">)</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"CREATE TABLE `users` (\n         `uid` int(10) unsigned NOT NULL AUTO_INCREMENT,\n        `name` varchar(20) NOT NULL,\n        PRIMARY KEY (`uid`))\"\"\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># when inset mutil-values\uff0cthe api will call executemany</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'INSERT INTO users VALUES(</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">)'</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'execute_test'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s1\">'execute_test'</span><span class=\"p\">)])</span>\n<span class=\"c1\"># &gt; 9</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'DELETE FROM users WHERE name=</span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'execute_test'</span><span class=\"p\">,))</span>\n<span class=\"c1\"># &gt; 2</span>\n\n\n<span class=\"c1\"># use social db</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'delete from events where created_at&lt;</span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">expired</span><span class=\"p\">,</span> <span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'social'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; 10</span>\n</pre>\n</div>\n<div id=\"select\">\n<h3><a href=\"#id12\" rel=\"nofollow\">select</a></h3>\n<p>the api is used for select sql database query.</p>\n<p>select(table, key=\u2019default\u2019):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>table:</th><td>the table name</td>\n</tr>\n<tr><th>key:</th><td>the idenfify of database</td>\n</tr>\n</tbody>\n</table>\n<div id=\"select-all\">\n<h4><a href=\"#id13\" rel=\"nofollow\">select all</a></h4>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n</pre>\n</div>\n<div id=\"specific-columns\">\n<h4><a href=\"#id14\" rel=\"nofollow\">specific columns</a></h4>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT `uid`, `name` FROM `users`</span>\n</pre>\n</div>\n<div id=\"id1\">\n<h4><a href=\"#id15\" rel=\"nofollow\">execute</a></h4>\n<p>when you already build your sql, try execute api to fetch your database result.</p>\n<p>execute(many=None, as_dict=False):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>many:</th><td>when set to a greater zero integer, it will use fetchmany then yield return a generator, otherwise a list.</td>\n</tr>\n<tr><th>as_dict:</th><td>when set to true, query api will return the database result as dict row, otherwise tuple row.</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">res</span>\n<span class=\"c1\"># &gt; ((1L, u'user_1'), (2L, u'user_2'), (3L, u'user_3'), (4L, u'user_4'), (5L, None))</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">many</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">as_dict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">res</span>\n<span class=\"nb\">print</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"c1\"># &gt; &lt;generator object _yield at 0x7f835825e820&gt;</span>\n<span class=\"c1\"># &gt; {'uid': 1L, 'name': u'user_1'}</span>\n</pre>\n</div>\n<div id=\"condition\">\n<h4><a href=\"#id16\" rel=\"nofollow\">Condition</a></h4>\n<p>It is time to try more complex select query.</p>\n<p>condition(field, value=None, operator=None):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>field:</th><td>the field of table</td>\n</tr>\n<tr><th>value:</th><td>the value of field, defaul is None (\u201cfield is null\u201d)</td>\n</tr>\n<tr><th>operator:</th><td>the where operator like BETWEEN, IN, NOT IN, EXISTS, NOT EXISTS, IS NULL, IS NOT NULL, LIKE, NOT LIKE, =, &lt;, &gt;, &gt;=, &lt;=, &lt;&gt; and so on.</td>\n</tr>\n</tbody>\n</table>\n<div id=\"simple\">\n<h5><a href=\"#id17\" rel=\"nofollow\">simple</a></h5>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># condition('uid', 1, '=')</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `uid` = %s</span>\n</pre>\n</div>\n<div id=\"in\">\n<h5><a href=\"#id18\" rel=\"nofollow\">in</a></h5>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># condition('uid', [1, 3]) \u4e00\u6837</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `uid` IN  (%s, %s)</span>\n</pre>\n</div>\n<div id=\"between\">\n<h5><a href=\"#id19\" rel=\"nofollow\">between</a></h5>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"s1\">'between'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `uid` BETWEEN %s AND %s</span>\n</pre>\n</div>\n<div id=\"multi-condition\">\n<h5><a href=\"#id20\" rel=\"nofollow\">multi condition</a></h5>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'blabla'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `uid` = %s AND `name` = %s</span>\n</pre>\n</div>\n<div id=\"or-condition\">\n<h5><a href=\"#id21\" rel=\"nofollow\">or condition</a></h5>\n<pre><span class=\"n\">or_cond</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">or_</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'blabla'</span><span class=\"p\">)</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">or_cond</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;&gt;'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  ( `uid` = %s OR `name` = %s ) AND `uid` &lt;&gt; %s</span>\n</pre>\n</div>\n</div>\n<div id=\"order-by\">\n<h4><a href=\"#id22\" rel=\"nofollow\">order by</a></h4>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; ORDER BY `name`</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'DESC'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; ORDER BY `name` DESC</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'DESC'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; ORDER BY `name` DESC, `uid`</span>\n</pre>\n</div>\n<div id=\"distinct\">\n<h4><a href=\"#id23\" rel=\"nofollow\">distinct</a></h4>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT DISTINCT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `uid` = %s</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT DISTINCT `uid`, `name` FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `uid` = %s</span>\n</pre>\n</div>\n<div id=\"group-by\">\n<h4><a href=\"#id24\" rel=\"nofollow\">group by</a></h4>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'uid'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; GROUP BY `name`, `uid`</span>\n</pre>\n</div>\n<div id=\"limit-and-offset\">\n<h4><a href=\"#id25\" rel=\"nofollow\">limit and offset</a></h4>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; LIMIT 2 OFFSET 5</span>\n</pre>\n</div>\n<div id=\"null-condition\">\n<h4><a href=\"#id26\" rel=\"nofollow\">null condition</a></h4>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_null</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `name` IS NULL  AND `uid` = %s</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_not_null</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `name` IS NOT NULL  AND `uid` = %s</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; SELECT * FROM `users`</span>\n<span class=\"c1\"># &gt; WHERE  `name` IS NULL</span>\n</pre>\n</div>\n</div>\n<div id=\"complex-conditions\">\n<h3><a href=\"#id27\" rel=\"nofollow\">complex conditions</a></h3>\n<p>using db.and_(), db.or_(), we can build complex where conditions:</p>\n<pre><span class=\"n\">or_cond</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">or_</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'field1'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'field2'</span><span class=\"p\">,</span> <span class=\"s1\">'blabla'</span><span class=\"p\">)</span>\n<span class=\"n\">and_cond</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">and_</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'field3'</span><span class=\"p\">,</span> <span class=\"s1\">'what'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'field4'</span><span class=\"p\">,</span> <span class=\"s1\">'then?'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'table_name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">or_cond</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">and_cond</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># &gt; SELECT * FROM `table_name`</span>\n<span class=\"c1\"># &gt; WHERE  ( `field1` = %s OR `field2` = %s ) AND ( `field3` = %s AND `field4` = %s )</span>\n</pre>\n</div>\n<div id=\"expr\">\n<h3><a href=\"#id28\" rel=\"nofollow\">expr</a></h3>\n<p>if you wanna use the aggregate functions like sum, count, please use <tt>erpr</tt> :</p>\n<pre><span class=\"kn\">from</span>  <span class=\"nn\">db</span> <span class=\"kn\">import</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">(</span><span class=\"s1\">'count(*)'</span><span class=\"p\">))</span>\n<span class=\"c1\"># &gt; SELECT count(*) FROM `users`</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">(</span><span class=\"s1\">'count(uid)'</span><span class=\"p\">,</span> <span class=\"s1\">'total'</span><span class=\"p\">))</span>\n<span class=\"c1\"># &gt; SELECT count(uid) AS `total` FROM `users`</span>\n</pre>\n</div>\n<div id=\"insert\">\n<h3><a href=\"#id29\" rel=\"nofollow\">insert</a></h3>\n<p>The <tt>insert</tt> api is used for building insert into sql statement.</p>\n<p>insert(table, key=\u2019default\u2019):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>table:</th><td>the table name</td>\n</tr>\n<tr><th>key:</th><td>the idenfify of database</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'test_insert'</span><span class=\"p\">))</span>\n<span class=\"c1\"># &gt; INSERT INTO `users` VALUES(%s, %s)</span>\n<span class=\"nb\">print</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">_values</span>\n<span class=\"c1\"># &gt; [(10, 'test_insert')]</span>\n\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'insert_1'</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">((</span><span class=\"s1\">'insert_2'</span><span class=\"p\">,))</span>\n<span class=\"c1\"># &gt; INSERT INTO `users` (`name`) VALUES(%s)</span>\n<span class=\"nb\">print</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">_values</span>\n<span class=\"c1\"># &gt; [('insert_1',), ('insert_2',)]</span>\n</pre>\n<p>When you use <tt>execute</tt> api to get result, it will reutrn the <tt>last insert id</tt>\uff1a</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># &gt; 2</span>\n</pre>\n</div>\n<div id=\"update\">\n<h3><a href=\"#id30\" rel=\"nofollow\">update</a></h3>\n<p>The <tt>update</tt> api is used for building update sql statement.</p>\n<p>update(table, key=\u2019default\u2019):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>table:</th><td>the table name</td>\n</tr>\n<tr><th>key:</th><td>the idenfify of database</td>\n</tr>\n</tbody>\n</table>\n<p>mset and set\uff1a</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>mset:</th><td>the value must be dict tpye, that sets mutil-fileds at once time.</td>\n</tr>\n<tr><th>set(column, value):</th></tr>\n<tr><td>\u00a0</td><td>set one field one time.</td>\n</tr>\n</tbody>\n</table>\n<p>the where conditions please see <a href=\"#select\" rel=\"nofollow\">select</a> for more information.</p>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mset</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'uid'</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span><span class=\"s1\">'user_1'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s</span>\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'update_test'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'user_2'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"c1\"># .execute()</span>\n<span class=\"nb\">print</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">to_sql</span><span class=\"p\">()</span>\n<span class=\"c1\"># &gt; UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s AND `uid` = %s</span>\n</pre>\n<p>When you use <tt>execute</tt> api to get result, it will reutrn the <tt>rowcount</tt>\uff1a</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># &gt; 2</span>\n</pre>\n<div id=\"limit\">\n<h4><a href=\"#id31\" rel=\"nofollow\">limit</a></h4>\n<p>You can use limit api to lim the quantity of update.</p>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mset</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'uid'</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span><span class=\"s1\">'user_1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s  LIMIT 5</span>\n</pre>\n</div>\n</div>\n<div id=\"delete\">\n<h3><a href=\"#id32\" rel=\"nofollow\">delete</a></h3>\n<p>The <tt>delete</tt> api is used for building DELETE FROM sql statement.</p>\n<p>delete(table, key=\u2019default\u2019):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>table:</th><td>the table name</td>\n</tr>\n<tr><th>key:</th><td>the idenfify of database</td>\n</tr>\n</tbody>\n</table>\n<p>the where conditions please see <a href=\"#select\" rel=\"nofollow\">select</a> for more information.</p>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span><span class=\"s1\">'user_1'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt; DELETE FROM `users` WHERE  `name` = %s</span>\n</pre>\n<p>When you use <tt>execute</tt> api to get result, it will reutrn the <tt>rowcount</tt>\uff1a</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># &gt; 2</span>\n</pre>\n</div>\n<div id=\"to-sql-and-str\">\n<h3><a href=\"#id33\" rel=\"nofollow\">to_sql and str</a></h3>\n<p>you can use to_sql or __str__ method to the objects of  <tt>select</tt>, <tt>insert</tt>, <tt>update</tt>, <tt>delete</tt> to print the sql you build.</p>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'update_test'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'user_2'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">to_sql</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">q</span>\n<span class=\"c1\"># &gt; UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s AND `uid` = %s</span>\n</pre>\n</div>\n<div id=\"transaction\">\n<h3><a href=\"#id34\" rel=\"nofollow\">transaction</a></h3>\n<p>transaction(table, key=\u2019default\u2019):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>table:</th><td>the table name</td>\n</tr>\n<tr><th>key:</th><td>the idenfify of database</td>\n</tr>\n</tbody>\n</table>\n<p>The simple transaction done all or do nothing, you cann\u2019t set savepoint.</p>\n<pre><span class=\"c1\"># with context</span>\n<span class=\"k\">with</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n    <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mset</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'uid'</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">})</span>\n        <span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span><span class=\"s1\">'user_1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">())</span>\n\n\n<span class=\"c1\"># the normal way</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mset</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'uid'</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">})</span>\n    <span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span><span class=\"s1\">'user_1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">())</span>\n\n<span class=\"c1\">#if failed will rollback</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<div>\n<p>Note</p>\n<p>when uses begin must be combine with commit\uff0cotherwise the connection will not return connection pool.suggets to use <tt>with context</tt></p>\n</div>\n</div>\n<div id=\"simple-orm\">\n<h3><a href=\"#id35\" rel=\"nofollow\">simple orm</a></h3>\n<p>the orm demo  <a href=\"https://github.com/thomashuang/dbpy/blob/master/samples\" rel=\"nofollow\">samples</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">orm</span> <span class=\"kn\">import</span> <span class=\"n\">Backend</span>\n<span class=\"kn\">import</span> <span class=\"nn\">db</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">({</span> <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'passwd'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"s1\">'blog'</span><span class=\"p\">})</span>\n\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">Backend</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find_by_username</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">and</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'auth'</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">,</span> <span class=\"s1\">'real_name'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'bio'</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">,</span> <span class=\"s1\">'role'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">Backend</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'fine'</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">Backend</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">real_name</span> <span class=\"o\">=</span> <span class=\"s1\">'blablabla....'</span>\n<span class=\"k\">if</span> <span class=\"n\">Backend</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'user saved'</span>\n\n<span class=\"k\">if</span> <span class=\"n\">Backend</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'delete user failed'</span>\n\n\n<span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Post</span><span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'slug'</span><span class=\"p\">,</span> <span class=\"s1\">'description'</span><span class=\"p\">,</span> <span class=\"s1\">'html'</span><span class=\"p\">,</span> <span class=\"s1\">'css'</span><span class=\"p\">,</span> <span class=\"s1\">'js'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'category'</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">,</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">Backend</span><span class=\"p\">(</span><span class=\"s1\">'post'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'created failed'</span>\n</pre>\n</div>\n<div id=\"future\">\n<h3><a href=\"#id36\" rel=\"nofollow\">Future</a></h3>\n<p>Personal idea:</p>\n<ol>\n<li>add <tt>join</tt>  for select api</li>\n<li>add a schema class for creating or changing table.</li>\n<li>add some api for mysql individual sql like <tt>replace</tt> or <tt>duplicate update</tt></li>\n<li>improve connection pool.</li>\n</ol>\n</div>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id37\" rel=\"nofollow\">LICENSE</a></h2>\n<blockquote>\n<p>Copyright (C) 2014-2015 Thomas Huang</p>\n<p>This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, version 2 of the License.</p>\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;<a href=\"http://www.gnu.org/licenses/\" rel=\"nofollow\">http://www.gnu.org/licenses/</a>&gt;.</p>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 3203211, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "c452b4983e7c26b0ce776e23f5429028", "sha256": "adcce223e1b4056e91b3902ddcfb4b31fdd4f2f3c4232c471e4d691f943a7219"}, "downloads": -1, "filename": "dbpy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c452b4983e7c26b0ce776e23f5429028", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15116, "upload_time": "2015-03-09T03:27:13", "upload_time_iso_8601": "2015-03-09T03:27:13.802471Z", "url": "https://files.pythonhosted.org/packages/8e/34/95a79dba8c788782ddee184b72f934b151b686b4b2b13ab0a2160196336a/dbpy-0.1.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6939d9cdeb431b0285204bb9559bcbe", "sha256": "c03e64f3084941b703d9b70297999c1040a0f3bb25ef61a065aae064c48f0f4c"}, "downloads": -1, "filename": "dbpy-0.1.1.zip", "has_sig": false, "md5_digest": "b6939d9cdeb431b0285204bb9559bcbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34546, "upload_time": "2015-03-09T03:27:10", "upload_time_iso_8601": "2015-03-09T03:27:10.435627Z", "url": "https://files.pythonhosted.org/packages/c3/77/3cf8ee0259be928b12c0b9c89063891addc4f09a4371e932c22c203fcc21/dbpy-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "bb499018603672b2b73a677f0d4b67ca", "sha256": "fc9c5daa21756a71077ebea67b57a6520742541b4afaba1f22a32add85a07e40"}, "downloads": -1, "filename": "dbpy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bb499018603672b2b73a677f0d4b67ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15502, "upload_time": "2015-07-26T05:37:54", "upload_time_iso_8601": "2015-07-26T05:37:54.760979Z", "url": "https://files.pythonhosted.org/packages/f0/e1/c41e71eaf6b316f078e5fad3cfe61a5e0402c3fdb2a614cb096d9d825176/dbpy-0.1.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "da586597f4a7a50e262af68c00c0d308", "sha256": "f03bed4ab2ff9e56b36b7c933638453d25e8fb45a5bbacfdeaa1180e9b9d151c"}, "downloads": -1, "filename": "dbpy-0.1.2.zip", "has_sig": false, "md5_digest": "da586597f4a7a50e262af68c00c0d308", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37109, "upload_time": "2015-07-26T05:18:14", "upload_time_iso_8601": "2015-07-26T05:18:14.146499Z", "url": "https://files.pythonhosted.org/packages/4f/d8/7f7a375c2e31983b78295bf1ba96d3b44ae13bf8f427849e2777b7b74ac8/dbpy-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d8d1372c057b42563aefd2e991154fc8", "sha256": "ba2d94b1f70d414eb0955085a56bf2b259ff7ce4c5accbc86ce971d87cb2a975"}, "downloads": -1, "filename": "dbpy-0.1.3.zip", "has_sig": false, "md5_digest": "d8d1372c057b42563aefd2e991154fc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38236, "upload_time": "2017-09-26T07:25:02", "upload_time_iso_8601": "2017-09-26T07:25:02.714877Z", "url": "https://files.pythonhosted.org/packages/bb/83/95602f0fb5ad9f6ce51b739334fe8646f6764b931d7245cd7ad8eee0b7dc/dbpy-0.1.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d8d1372c057b42563aefd2e991154fc8", "sha256": "ba2d94b1f70d414eb0955085a56bf2b259ff7ce4c5accbc86ce971d87cb2a975"}, "downloads": -1, "filename": "dbpy-0.1.3.zip", "has_sig": false, "md5_digest": "d8d1372c057b42563aefd2e991154fc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38236, "upload_time": "2017-09-26T07:25:02", "upload_time_iso_8601": "2017-09-26T07:25:02.714877Z", "url": "https://files.pythonhosted.org/packages/bb/83/95602f0fb5ad9f6ce51b739334fe8646f6764b931d7245cd7ad8eee0b7dc/dbpy-0.1.3.zip", "yanked": false}], "timestamp": "Fri May  8 00:39:53 2020"}