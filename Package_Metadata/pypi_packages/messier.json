{"info": {"author": "Conor Schaefer", "author_email": "conor.schaefer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "===============================\nMessier\n===============================\n\n.. image:: https://img.shields.io/pypi/v/messier.svg\n        :target: https://pypi.python.org/pypi/messier\n\n.. image:: https://img.shields.io/travis/conorsch/messier.svg\n        :target: https://travis-ci.org/conorsch/messier\n\n.. image:: https://readthedocs.org/projects/messier/badge/?version=latest\n        :target: https://readthedocs.org/projects/messier/?badge=latest\n        :alt: Documentation Status\n\n\nTest Ansible roles with Vagrant. Inspired by Test Kitchen.\n\nFeatures\n--------\n\n* Supports multi-machine roles\n* Permits reboots during provisioning\n* Use any backend provider available in Vagrant (VirtualBox, AWS, DigitalOcean, etc.)\n* Runs Serverspec tests per role via `ansible_spec`_\n* Integrates with preexisting Serverspec setups\n\nMotivation\n----------\n\n`Test Kitchen`_ is a wonderful solution for testing system configuration\u2014if you use Chef.\nIts support for Ansible is, however, lacking. Similar `Packer`_, `Test Kitchen`_ tries\nto run Ansible in \"local\" mode, which makes it impossible to test multi-machine roles\nfor service orchestration. Well-meaning projects such as `kitchen-ansiblepush`_ (not to\nbe mistaken with Ansible pull mode) enable more traditional Ansible usage patterns,\nbut still suffer from limitations such as `reboots always triggering failure`_.\n\nIn order to simplify setup, Test Kitchen makes the concession that testing VMs are\npolluted with additional software in order to accommodate test running. Serverspec\nhas an SSH transport built into it, and Test Kitchen ignores that functionality completely.\n\nName\n----\n\n`Messier`_ was a comet hunter, and didn't much care for galaxies or nebula. He\nonly kept track of non-comet objects so he wouldn't bother inspecting them\nfurther. Similarly, the ``messier`` tool, particularly the ``messier ci``\nsubcommand, considers working configurations forgettable, and flag only\nfailures for follow-up work. The name is also brutally honest, in that the\nheavy Vagrant dependency will make your configuration projects messier. :wink:\n\n\nTODO\n----\n\n* Add ``init`` command for bootstrapping Messier config\n\n\nLicense\n-------\nGPLv3 (would like to use MIT, but if `import ansible` appears, then it must be GPLv3).\n\n.. _Packer: https://packer.io/docs/provisioners/ansible-local.html\n.. _Test Kitchen: http://kitchen.ci/\n.. _kitchen-ansiblepush: https://github.com/ahelal/kitchen-ansiblepush\n.. _Ansible pull mode: http://docs.ansible.com/ansible/playbooks_intro.html?#ansible-pull\n.. _reboots always triggering failure: https://github.com/ahelal/kitchen-ansiblepush/issues/10\n.. _ansible_spec: https://github.com/volanja/ansible_spec\n.. _Messier: https://en.wikipedia.org/wiki/Charles_Messier\n\n\n=======\nHistory\n=======\n\n0.1.0 (2015-12-13)\n------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/conorsch/messier", "keywords": "messier", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "messier", "package_url": "https://pypi.org/project/messier/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/messier/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/conorsch/messier"}, "release_url": "https://pypi.org/project/messier/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Test Ansible roles with Vagrant, similar to Test Kitchen", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"messier\">\n<h2>Messier</h2>\n<a href=\"https://pypi.python.org/pypi/messier\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/messier.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0f052a989c74e238320a8b96400171ac7b9238f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6573736965722e737667\"></a>\n<a href=\"https://travis-ci.org/conorsch/messier\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/conorsch/messier.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8f405df797404f2ca2faa18b9237a1b897cb5b5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6e6f727363682f6d6573736965722e737667\"></a>\n<a href=\"https://readthedocs.org/projects/messier/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da80d92965f2932ac09b0d6688aecd415c88a398/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d6573736965722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Test Ansible roles with Vagrant. Inspired by Test Kitchen.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Supports multi-machine roles</li>\n<li>Permits reboots during provisioning</li>\n<li>Use any backend provider available in Vagrant (VirtualBox, AWS, DigitalOcean, etc.)</li>\n<li>Runs Serverspec tests per role via <a href=\"https://github.com/volanja/ansible_spec\" rel=\"nofollow\">ansible_spec</a></li>\n<li>Integrates with preexisting Serverspec setups</li>\n</ul>\n</div>\n<div id=\"motivation\">\n<h3>Motivation</h3>\n<p><a href=\"http://kitchen.ci/\" rel=\"nofollow\">Test Kitchen</a> is a wonderful solution for testing system configuration\u2014if you use Chef.\nIts support for Ansible is, however, lacking. Similar <a href=\"https://packer.io/docs/provisioners/ansible-local.html\" rel=\"nofollow\">Packer</a>, <a href=\"http://kitchen.ci/\" rel=\"nofollow\">Test Kitchen</a> tries\nto run Ansible in \u201clocal\u201d mode, which makes it impossible to test multi-machine roles\nfor service orchestration. Well-meaning projects such as <a href=\"https://github.com/ahelal/kitchen-ansiblepush\" rel=\"nofollow\">kitchen-ansiblepush</a> (not to\nbe mistaken with Ansible pull mode) enable more traditional Ansible usage patterns,\nbut still suffer from limitations such as <a href=\"https://github.com/ahelal/kitchen-ansiblepush/issues/10\" rel=\"nofollow\">reboots always triggering failure</a>.</p>\n<p>In order to simplify setup, Test Kitchen makes the concession that testing VMs are\npolluted with additional software in order to accommodate test running. Serverspec\nhas an SSH transport built into it, and Test Kitchen ignores that functionality completely.</p>\n</div>\n<div id=\"name\">\n<h3>Name</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Charles_Messier\" rel=\"nofollow\">Messier</a> was a comet hunter, and didn\u2019t much care for galaxies or nebula. He\nonly kept track of non-comet objects so he wouldn\u2019t bother inspecting them\nfurther. Similarly, the <tt>messier</tt> tool, particularly the <tt>messier ci</tt>\nsubcommand, considers working configurations forgettable, and flag only\nfailures for follow-up work. The name is also brutally honest, in that the\nheavy Vagrant dependency will make your configuration projects messier. :wink:</p>\n</div>\n<div id=\"todo\">\n<h3>TODO</h3>\n<ul>\n<li>Add <tt>init</tt> command for bootstrapping Messier config</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>GPLv3 (would like to use MIT, but if <cite>import ansible</cite> appears, then it must be GPLv3).</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id2\"><span class=\"section-subtitle\">0.1.0 (2015-12-13)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1901124, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "67e91c1d63c20903aaeea876b0f3aae4", "sha256": "a3b8468a2bfd298fc873d48944336700cdfa4937c6819ddf5cf87172834fd1a9"}, "downloads": -1, "filename": "messier-0.1.0.tar.gz", "has_sig": false, "md5_digest": "67e91c1d63c20903aaeea876b0f3aae4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17229, "upload_time": "2016-01-12T15:38:35", "upload_time_iso_8601": "2016-01-12T15:38:35.384572Z", "url": "https://files.pythonhosted.org/packages/b1/ea/dfeeadb2e0d0767926a7956a18a9054886c829465088d8f10da470dd375e/messier-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "480d67722a328fa81603026c8a851a23", "sha256": "29ddd6a1fde0988ae43ceb737b8244c8eb90522070330428dd411754165c6e11"}, "downloads": -1, "filename": "messier-0.1.1.tar.gz", "has_sig": false, "md5_digest": "480d67722a328fa81603026c8a851a23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17132, "upload_time": "2016-01-12T16:47:21", "upload_time_iso_8601": "2016-01-12T16:47:21.501681Z", "url": "https://files.pythonhosted.org/packages/2f/e7/e9d433856a0e509de93a6ffc045c15fca43ed751af9a41c34e7903c1bd55/messier-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "480d67722a328fa81603026c8a851a23", "sha256": "29ddd6a1fde0988ae43ceb737b8244c8eb90522070330428dd411754165c6e11"}, "downloads": -1, "filename": "messier-0.1.1.tar.gz", "has_sig": false, "md5_digest": "480d67722a328fa81603026c8a851a23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17132, "upload_time": "2016-01-12T16:47:21", "upload_time_iso_8601": "2016-01-12T16:47:21.501681Z", "url": "https://files.pythonhosted.org/packages/2f/e7/e9d433856a0e509de93a6ffc045c15fca43ed751af9a41c34e7903c1bd55/messier-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:01 2020"}