{"info": {"author": "Hans Roh", "author_email": "hansroh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Atila\n===========\n\n*Atila* is simple and minimal framework integrated with `Skitai App Engine`_.\nIt is the easiest way to make backend API services.\n\n.. code:: python\n\n  # serve.py\n\n  import atila\n\n  app = atila.Atila (__name__)\n\n  @app.route (\"/\")\n  def index (was):\n    return \"Hello, World\"\n\n  if __mame__ == \"__main__\":\n    import skitai\n\n    skitai.mount (\"/\", app)\n    skitai.run (port = 5000)\n\nAnd run,\n\n.. code:: bash\n\n  python3 serve.py\n\nAnd you can see `Hello, World` at `http://localhost:5000`.\n\nHere's a more practical example:\n\n.. code:: python\n\n  @app.route (\"/<int:uid>/photos\", methods = [\"GET\", \"DELETE\", \"POST\", \"OPTIONS\"])\n  @app.permission_required ()\n  def photos (was, uid, **DATA):\n    uid = uid == \"me\" and was.request.JWT [\"uid\"] or uid\n\n    with was.db (\"@mydb\") as db:\n      if was.request.method == \"GET\":\n        rows = db.select (\"photo\").filter (uid = uid).execute ().fetch ()\n        return was.API (rows = rows) # [ {id: 1, ...}, ... ]\n\n      elif was.request.method == \"DELETE\":\n        db.delete (\"photo\").filter (uid = uid).execute ().commit ()\n        return was.API (\"205 No Content\")\n\n      elif was.request.method == \"POST\":\n        if not DATA.get (\"title\"):\n          raise was.Error (\"400 Bad Request\", \"title required\")\n        DATA [\"uid\"] = uid\n        row = db.insert (\"photo\").data (**DATA).returning (\"id\").execute ().one ()\n        return was.API (\"201 Created\", id = row.id)\n\n.. contents:: Table of Contents\n\n.. _`Skitai App Engine`: https://pypi.org/project/skitai/\n\n\nImportant Notice\n=======================\n\n*CAUTION*: Atila is base on WSGI but can be run only\nwith `Skitai App Engine`_.\n\nThis means if you make your app with Atila, you have no\nchoice but Skitai as WSGI app server. And Atila's unique\nand unconventional style may become very hard work to port\nto other framework.\n\nI am currently enjoying to develop both Skitai and Atila,\nbut no one can expect future.\n\nSo you should think twice before you decide to use this.\n\n\nInstallation\n=========================\n\n**Requirements**\n\nPython 3.5+\nPyPy3\n\n**Installation**\n\nAtila and other core base dependent libraries is developing on\nsingle milestone, install/upgrade all please. Otherwise it is\nhighly possible to meet some errors.\n\nWith pip\n\n.. code-block:: bash\n\n    pip3 install -U atila\n\nWith git\n\n.. code-block:: bash\n\n    git clone https://gitlab.com/hansroh/atila.git\n    cd atila\n    pip3 install -e .\n\n\nCore App Options\n======================================\n\nThese are for later quick copying.\n\n**Debug Options**\n\n- debug = False\n- use_reloader = False\n\n**CORS Options**\n\n- access_control_allow_origin = None: list of origin\n- access_control_max_age = 0\n\n**Session/Authenticating Options**\n\n- authenticate = None: basic | digest | bearer\n- securekey = None: string for encrypted session cookie\n- session_timeout = None\n\n**Sub Module Mount Options**\n\n- enable_namespace = True\n\n  *Default value has been changed in version 0.7: False -> True*\n\n  If you didn't use this option with `True` under version 0.7 you\n  may set `False` in version 0.7 for for compatiblity.\n\n  Also DO NOT use this option with `False` if not for compatiblity\n  reason.\n\n- auto_mount\n\n  *Deprecated in version 0.7*\n\n  If you call app.mount () or pref.mount (), this option\n  will be disabled automatically. Otherwise Atila try to mount\n  automatically all sub modules has __mount__ ().\n\n\nDefault App Configuration\n=====================================\n\nBelow configs are new in version *0.8*.\n\n.. code:: python\n\n  app.config.MINIFY_HTML = None | 'strip' | 'minify'\n  app.config.JSON_ENCODER = 'utcoffset'\n\nNote: below version 0.8, JSON_ENCODER works as app.config.JSON_ENCODER = 'str'\nwhich is str (datetime) with system time zone. If you migrate to\nabove version 0.8 and you want keep this format, you shoud specify\napp.config.JSON_ENCODER = 'str'.\n\n\nApp Examples\n===========================\n\nYou can simply visit `Atila app example`_ for sightseeing.\n\n.. _`Atila app example`: https://gitlab.com/hansroh/atila/tree/master/example\n\n\nAtila with Skitai App Engine\n====================================\n\nSimple App\n------------------\n\n.. code:: python\n\n  from atila import Atila\n  app = Atila(__name__)\n\n  ...\n\n  @app.route (\"/\")\n  def index (was):\n    ...\n    return was.response (\"200 OK\", ...)\n\n  if __name__ == \"__main__\":\n    import skitai\n\n    with skitai.preference () as pref:\n      pref.use_reloader = True\n      skitai.mount ('/', './static')\n      skitai.mount ('/', app, 'app', pref)\n\n    skitai.run ()\n\nIf atila app exists seprated file:\n\n.. code:: python\n\n  # serve.py\n\n  if __name__ == \"__main__\":\n    import skitai\n\n    with skitai.preference () as pref:\n      pref.use_reloader = True\n      skitai.mount ('/', './static')\n      skitai.mount ('/', 'myapp/atila_app.py', pref = pref)\n    skitai.run ()\n\nResource Structure For Larger App\n-----------------------------------------------\n\nIf your app is simple, it can be made into single app.py\nand templates and static directory.\n\n.. code:: python\n\n  from atila import Atila\n\n  app = Atila(__name__)\n\n  app.use_reloader = True\n  app.debug = True\n\n  @app.route (\"/\")\n  def index (was):\n    ...\n    return was.response (\"200 OK\", ...)\n\n  if __name__ == \"__main__\":\n    import skitai\n\n    with skitai.preference () as pref:\n      pref.use_reloader = True\n      skitai.mount ('/', './static')\n      skitai.mount ('/', app, 'app', pref)\n    skitai.run ()\n\nAnd run,\n\n.. code:: bash\n\n  python3 app.py\n\nBut Your app is more bigger, it will be hard to make with single\napp file. Then, you can make services directory to seperate your\napp into several categories.\n\n.. code:: bash\n\n  myapp/\n    app.py\n    services/\n    templates/\n    resources/\n    static/\n  serve.py\n\nAll sub modules app need, can be placed into services/. services/\\*.py\nwill be watched for reloading if use_reloader = True.\n\nYou can structuring any ways you like and I like this style:\n\n.. code:: bash\n\n  services/views.py\n  services/apis.py\n  services/helpers.py\n\nAll modules to mount to app in services, should have def __mount__ (app).\n\nFor example, views.py is like this,\n\n.. code:: python\n\n  from . import helpers\n\n  def __mount__ (app):\n    @app.route (\"/\")\n    def index (was):\n      ...\n      return was.render (\"index.html\")\n\nNow you just import app decorable moduels at your app.py,\n\n.. code:: python\n\n  from atila import Atila\n  from services import views, apis\n\n  app = Atila(__name__)\n\nThat's it.\n\nIf app scale is more bigger scale, services can be expanded to sub modules.\n\n.. code:: bash\n\n  services/views/index.py, regist.py, search.py, ...\n  services/apis/codemap.py,\n  services/helpers/utils.py, ...\n\nAnd import these from app.py,\n\n.. code:: python\n\n  from services.views import index, regist, ...\n  from services.apis import codemap, ...\n\nSome more other informations will be mentioned at *Mounting Resources*\nsection again.\n\nFinally, your server.py:\n\n.. code:: python\n\n  import skitai\n  with skitai.preference () as pref:\n    pref.use_reloader = True\n    skitai.mount ('/', './static')\n    skitai.mount ('/', 'myapp/app.py', 'app', pref)\n  skitai.run ()\n\nAlso you can add myapp2, ... and mount them.\n\n\nRequest Hanlding with Atila\n====================================\n\nRuntime App Preference\n-------------------------\n\n**New in skitai version 0.26**\n\nUsally, your app preference setting is like this:\n\n.. code:: python\n\n  from atila import Atila\n\n  app = Atila(__name__)\n\n  app.use_reloader = True\n  app.debug = True\n  app.config [\"prefA\"] = 1\n  app.config [\"prefB\"] = 2\n\nSkitai provide runtime preference setting.\n\n.. code:: python\n\n  import skitai\n\n  with skitai.preference () as pref:\n    pref.use_reloader = True\n    pref.debug = True\n    pref.config [\"prefA\"] = 1\n    pref.config.prefB = 2\n    skitai.mount (\"/v1\", \"app_v1/app.py\", \"app\", pref)\n  skitai.run ()\n\nAbove pref's all properties will be overriden on your app.\n\nRuntime preference can be used with skitai initializing or\ncomplicated initializing process for your app.\n\nYou can create \\_\\_init\\_\\_.py at same directory with app.py. And\nbootstrap () function is needed.\n\n\\_\\_init\\_\\_.py\n\n.. code:: python\n\n  import skitai\n  import atila\n\n  def bootstrap (pref):\n    skitai.register_states ('tbl.test')\n\n    with open (pref.config.urlfile, \"r\") as f:\n      pref.config.urllist = []\n      while 1:\n        line = f.readline ().strip ()\n        if not line: break\n        pref.config.urllist.append (line.split (\"  \", 4))\n\n\nMore About Atila App Initialization\n```````````````````````````````````````\n\n*Note*: There'are two important things for app.\\_\\_init\\_\\_.\n\n- add skitai.register_states () if you need state management.\n  Inter process state sharing objects should be defined before\n  running Skitai.\n\n\nAccess Atila App\n------------------\n\nYou can access all Atila object from was.app.\n\n- was.app.debug\n- was.app.use_reloader\n- was.app.config # use for custom configuration like\n- was.app.config.my_setting = 1\n\n- was.app.securekey\n- was.app.session_timeout = None\n\n- was.app.authorization = \"digest\"\n- was.app.authenticate = False\n- was.app.realm = None\n- was.app.users = {}\n- was.app.jinja_env\n\n- was.app.build_url () is equal to was.urlfor ()\n\nCurrently was.app.config has these properties and you can\nreconfig by setting new value:\n\n- was.app.config.max_post_body_size = 5 * 1024 * 1024\n- was.app.config.max_cache_size = 5 * 1024 * 1024\n- was.app.config.max_multipart_body_size = 20 * 1024 * 1024\n- was.app.config.max_upload_file_size = 20000000\n\n\nDebugging and Reloading App\n-----------------------------\n\nIf debug is True, all errors even server errors is shown on\nboth web browser and console window, otherhwise shown only on console.\n\nIf use_reloader is True, Atila will detect file changes and reload\napp automatically, otherwise app will never be reloaded.\n\n.. code:: python\n\n  from atila import Atila\n\n  app = Atila (__name__)\n  app.debug = True # output exception information\n  app.use_reloader = True # auto realod on file changed\n\n\nKill Switch\n````````````````\n\nPlease see, `--devel`_ and `--silent`_ options of Skitai App Engine.\n\n.. _`--devel`: https://pypi.org/project/skitai/#run-as-development-mode\n.. _`--silent`: https://pypi.org/project/skitai/#run-as-silent-mode\n\n\nRouting\n----------\n\nBasic routing is like this:\n\n.. code:: python\n\n  @app.route (\"/hello\")\n  def hello_world (was):\n    return was.render (\"hello.htm\")\n\nFor adding some restrictions:\n\n.. code:: python\n\n  @app.route (\"/hello\", methods = [\"GET\"], content_types = [\"text/xml\"])\n  def hello_world (was):\n    return was.render (\"hello.htm\")\n\nAnd you can specifyt multiple routing,\n\n.. code:: python\n\n  @app.route (\"/hello\", mehotd = [\"POST\"])\n  @app.route (\"/\")\n  def hello_world (was):\n    return was.render (\"hello.htm\")\n\nIf method is not GET, Atila will response http error code 405 (Method\nNot Allowed), and content-type is not text/xml, 415 (Unsupported Content Type).\n\nAnd here's a notalble routing rule.\n\n.. code:: python\n\n  @app.route (\"\")\n  def hello_world (was):\n    return was.render (\"hello.htm\")\n\nThis app is mounted to \"/sub\" on skitai, /sub URL is valid but\n\"/sub/\" will return 404 code.\n\nOn the other hand,\n\n.. code:: python\n\n  @app.route (\"/\")\n  def hello_world (was):\n    return was.render (\"hello.htm\")\n\n\u201c/sub\u201d will return 301 code for \u201c/sub/\u201d and \u201c/sub/\u201d is valid URL.\n\n\nRequest\n---------\n\nReqeust object provides these methods and attributes:\n\n- was.request.method # upper case GET, POST, ...\n- was.request.command # lower case get, post, ...\n- was.request.uri\n- was.request.version # HTTP Version, 1.0, 1.1, 2.0, 3.0\n- was.request.scheme # http or https\n- was.request.headers # case insensitive dictioanry\n- was.request.body # bytes object\n- was.request.args # dictionary merged with url, query string,\n  form data and JSON\n- was.request.routed # routed function\n- was.request.routable # {'methods': [\"POST\", \"OPTIONS\"],\n  'content_types': [\"text/xml\"], 'options': {...},  'mntopt': {...}}\n- was.request.acceptables # {'text/html': {'q': '0.9'}}\n- was.request.acceptable (media) # check if acceptable media type\n  by given media\n- was.request.split_uri () # (script, param, querystring, fragment)\n- was.request.json () # decode request body from JSON\n- was.request.form () # decode request body to dict\n  if content-type is form data\n- was.request.dict () # decode request body as dict\n  if content-type is compatible with dict - form data or JSON\n- was.request.get_header (\"content-type\") # case insensitive\n- was.request.get_headers () # retrun header all list\n- was.request.get_body ()\n- was.request.get_scheme () # http or https\n- was.request.get_remote_addr ()\n- was.request.get_user_agent ()\n- was.request.get_content_type ()\n- was.request.get_main_type ()\n- was.request.get_sub_type ()\n\nGetting Parameters\n---------------------\n\nAtila parameters are comceptually seperated 3 groups: URL, query\nstring and body.\n\nBelow explaination may be a bit complicated but it is enough to\nremember 3 things:\n\n1. Atila resource parameters can be defined as function arguments\nand use theses native Python function arguments.\n\n2. Also you can access parameter groups by origin:\n\n  - was.request.DEFAULT: default arguments of your resource\n  - was.request.URL: url query string\n  - was.request.FORM\n  - was.request.JSON\n  - was.request.DATA: automatically choosen one of was.request.FORM\n    or was.request.JSON by content-type header of request\n  - was.request.ARGS: eventaully was.request.ARGS contains all\n    parameters of all origins including was.request.DEFAULT\n\nGetting URL Parameters\n`````````````````````````\n\nURL Parameters should be arguments of resource.\n\n.. code:: python\n\n  @app.route (\"/episode/<int:id>\")\n  def episode (was, id):\n    return id\n  # http://127.0.0.1:5000/episode\n\nfor fancy url building, available param types are:\n\n- int: integers and INCLUDING 'me', 'notme' and 'new'\n- path: /download/<int:major_ver>/<path>, should be positioned\n  at last like /download/1/version/1.1/win32\n- If not provided, assume as string. and all space will be replaced to \"_\"\n\nAt your template engine, you can access through was.request.PARAMS [\"id\"].\n\nIt is also possible via keywords args,\n\n.. code:: python\n\n  @app.route (\"/episode/<int:id>\")\n  def episode (was, \\*\\*karg):\n    retrun was.request.ARGS.get (\"id\")\n  # http://127.0.0.1:5000/episode/100\n\nYou can set default value to id,\n\n.. code:: python\n\n  @app.route (\"/episode/<int:id>\", methods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"])\n  def episode (was, id = None):\n    if was.request.method == \"POST\" and id is None:\n      ...\n      return was.API (id = new_id)\n    return ...\n\nIt makes this URL working,\n\n.. code:: bash\n\n  http://127.0.0.1:5000/episode\n\nAnd was.urlfor will behaive like as below,\n\n.. code:: bash\n\n  was.urlfor (\"episode\")\n  >> /episode\n\n was.urlfor (\"episode\", 100)\n  >> /episode/100\n\n*Note* that this does not works for root resource,\n\n.. code:: python\n\n  @app.route (\"/<int:id>\", methods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"])\n  def episode (was, id = None):\n    if was.request.method == \"POST\" and id is None:\n      ...\n      return was.API (id = new_id)\n    return ...\n\nBy above code, http://127.0.0.1:5000/ will not work. You should define \"/\" route.\n\n\n\nQuery String Parameters\n``````````````````````````````\n\nqiery string parameter can be both resource arguments but needn't be.\n\n.. code:: python\n\n  @app.route (\"/hello\")\n  def hello_world (was, num = 8):\n    return num\n  # http://127.0.0.1:5000/hello?num=100\n\nIt is same as these,\n\n.. code:: python\n\n  @app.route (\"/hello\")\n  def hello_world (was):\n    return was.request.ARGS.get (\"num\")\n\n  @app.route (\"/hello\")\n  def hello_world (was, **url):\n    return url.get (\"num\")\n    # of\n    return was.request.URL.get (\"num)\n\nAbove 2 code blocks have a significant difference. First one can\nget only 'num' parameter. If URL query string contains other\nparameters, Skitai will raise 508 Error. But 2nd one can be any\nparameters.\n\nGetting Form/JSON Parameters\n```````````````````````````````\n\nGetting form is not different from the way for url parameters, but\ngenerally form parameters is too many to use with each function\nparameters, can take from single args \\*\\*form or take mixed with\nnamed args and \\*\\*form both.\n\nif request header has application/json\n\n.. code:: python\n\n  @app.route (\"/hello\")\n  def hello (was, **form):\n    return \"Post %s %s\" % (form.get (\"userid\", \"\"), form.get (\"comment\", \"\"))\n\n  @app.route (\"/hello\")\n  def hello_world (was, userid, **form):\n    return \"Post %s %s\" % (userid, form.get (\"comment\", \"\"))\n\nNote that for receiving request body via arguments, you specify\nkeywords args like \\*\\*karg or specify parameter names of body data.\n\nIf you want just handle POST body, you can use was.request.json ()\nor was.request.form () that will return dictionary object.\n\nGetting Composed Parameters\n```````````````````````````````\n\nYou can receive all type of parameters by resource arguments. Let's\nassume yotu resource URL is http://127.0.0.1:5000/episode/100?topic=Python.\n\n.. code:: python\n\n  @app.route (\"/episode/<int:id>\")\n  def hello (was, id, topic):\n    pass\n\nif URL is http://127.0.0.1:5000/episode/100?topic=Python with Form/JSON\ndata {\"comment\": \"It is good idea\"}\n\n.. code:: python\n\n  @app.route (\"/episode/<int:id>\")\n  def hello (was, id, topic, comment):\n    pass\n\nNote that argument should be ordered by:\n\n- URL parameters\n- URL query string\n- Form/JSON body\n\nAnd note if your request has both query string and form/JSON body,\nand want to receive form paramters via arguments, you should receive\nquery string parameters first. It is not allowed to skip query string.\n\nAlso you can use keywords argument.\n\n.. code:: python\n\n  @app.route (\"/episode/<int:id>\")\n  def hello (was, id, \\*\\*karg):\n    karg.get ('topic')\n\nNote that \\*\\*karg is contains both query string and form/JSON data\nand no retriction for parameter names.\n\nwas.requests.args is merged dictionary for all type of parameters. If\nparameter name is duplicated, its value will be set to form of value\nlist (But If parameters exist both URL and form data, form data always\nhas priority. It means URL parameter will be ignored).\n\nThen simpletst way for getting parameters, use was.request.args.\n\n\n.. code:: python\n\n  @app.route (\"/episode/<int:id>\")\n  def hello (was, id):\n    was.request.args.get ('topic')\n\nTesting Parameters\n```````````````````````````````\n\nFor parameter checking,\n\n.. code:: python\n\n  @app.route (\"/test\")\n  @app.require (\"ARGS\", [\"id\"], ints = [\"id\"])\n  def test (was, id):\n    return was.render (\"test.html\")\n\n'id' is required and sholud be int type.\n\nSpec is,\n\n.. code:: python\n\n  @app.require (\n    scope, required = None, ints = None, floats = None,\n    emails = None, uuids = None, nones = None, lists = None,\n    strings = None, booleans = None, dicts = None,\n    notags = None, safes = None,\n    **kargs\n  )\n\n- notags: replace all < and >\n- safes: reject if find XSS possible string\n\n*scope* can be:\n\n- URL\n- FORM\n- JSON\n- ARGS: default, all of above\n\n- GET\n- DELETE\n- PATCH\n- POST\n- PUT\n\n.. code:: python\n\n    @app.route (\"/1\")\n    @app.require (\"GET\", ints = ['offset', 'limit'])\n    @app.require (\"PUT\", ['id'])\n    def index6 (was, offset = 0, limit = 10, **DATA):\n        assert isinstance (limit, int) # limit converted into int type\n        if was.request.method == 'PUT':\n          current = DATA [id]\n\nYou can test more detail using kargs.\n\n.. code:: python\n\n    @app.route (\"/1\")\n    @app.require (\"ARGS\", a__gte = 5, b__between = (-4, -1), c__in = (1, 2))\n    def index6 (was):\n        return \"\"\n\n- __between\n- __neq\n- __gt, __gte\n- __lt, __lte\n\nChecking parameter with regular expression,\n\n.. code:: python\n\n    @app.route (\"/2\")\n    @app.require (\"ARGS\", a = re.compile (\"^hans\"))\n    def index7 (was):\n        return \"\"\n\nChecking parameter length, use __len:\n\n.. code:: python\n\n    @app.route (\"/3\")\n    @app.require (\"ARGS\", a__len__between = (4, 8))\n    def index7 (was):\n        return \"\"\n\n\nPre-Defined Parameter Values\n``````````````````````````````````````````````````````\n\n'me', 'notme' is special prameter value used by authentication.\n\n- 'me' can be resolved into user ID on request handling\n- 'notme' can ignore specific user ID for administative\n  search purpose, BUT for your safey, 'notme' is allowed\n  only with \"GET\" request\n- 'new' is dummy value especially with \"POST\" method. But\n  it is not restricted by methods. Maybe you can use 'new'\n  with 'GET' for getting newlest items.\n\n.. code:: python\n\n  @app.route (\"/episodes/<int:uid>\")\n  @app.permission_required (uid = [\"staff\"])\n  def episodes (uid):\n    ...\n\nNow paramter 'uid' is bound with permission.\n\nBelows are all valid URI.\n\n- GET /episodes/me, if request user have any permission\n- DELETE /episodes/me if request user have any permission\n- GET /episodes/4, if request user have staff permission,\n  else raise 403 error\n- PATCH /episodes/4, if request user have staff permission,\n  else raise 403 error\n- GET /episodes/new, if request user have staff permission,\n  else raise 403 error\n- POST /episodes/new, if request user have staff permission,\n  else raise 403 error\n- GET /episodes/notme, if request user have staff permission,\n  else raise 403 error\n\nBut belows are all invalid and HTTP 421 error will be raised\nfor your safety reason. If these're allowed, there is lot of\ndanger delete/update all users (or all rows of database table).\n\n- DELETE /episodes/notme\n- POST /episodes/notme\n- PATCH /episodes/notme\n- PUT /episodes/notme\n\nObviously, I am sure you already know exact resource ID for\nabove tasks.\n\n\nMake Your Own Rule\n``````````````````````````\n\nThe way to get parameters is little messy. But I want to try to\nmake more pythonic style. Even all routed method can be called by\nanother non app functions.\n\nInitially I want to use like this.\n\n.. code:: python\n\n  @app.route (\"/pets/<kind>\")\n  def pets (was, kind, limit, offset = 0, **JSON):\n    ...\n\nIt can be requested by requests.\n\n.. code:: python\n\n  requests.post (\n    \"http://localhost/pets/dog?limit=10\",\n    json = {\"area\": \"LA\"}\n  )\n\nIf you need to check the origin of parameters, require decorator\nis useful.\n\n.. code:: python\n\n  @app.route (\"/pets/<kind>\")\n  @app.require (\"JSON\", [\"area\"])\n  def pets (was, kind, limit, offset = 0, **JSON):\n    ...\n\nThat's just my opinion.\n\n\nResponse\n-------------\n\nBasically, just return contents.\n\n.. code:: python\n\n  @app.route (\"/hello\")\n  def hello_world (was):\n    return was.render (\"hello.htm\")\n\nIf you need set additional headers or HTTP status,\n\n.. code:: python\n\n  @app.route (\"/hello\")\n  def hello (was):\n    return was.response (\"200 OK\", was.render (\"hello.htm\"), [(\"Cache-Control\", \"max-age=60\")])\n\n  def hello (was):\n    return was.response (\n      body = was.render (\"hello.htm\"),\n      headers = [(\"Cache-Control\", \"max-age=60\")]\n    )\n\n  def hello (was):\n    was.response.set_header (\"Cache-Control\", \"max-age=60\")\n    return was.render (\"hello.htm\")\n\nAbove 3 examples will make exacltly same result.\n\nSending specific HTTP status code,\n\n.. code:: python\n\n  def hello (was):\n    return was.response (\"404 Not Found\", was.render (\"err404.htm\"))\n\n  def hello (was):\n    # if body is not given, automaticcally generated with default error template.\n    return was.response (\"404 Not Found\")\n\nIf app raise exception, traceback information will be displayed\nonly app.debug = True. But you intentionally send it inspite of\napp.debug = False:\n\n.. code:: python\n\n  # File\n  @app.route (\"/raise_exception\")\n  def raise_exception (was):\n    try:\n      raise ValueError (\"Test Error\")\n    except:\n      return was.response (\"500 Internal Server Error\", exc_info = sys.exc_info ())\n\nIf you use custom error handler, you can set detail explaination\nto error [\"detail\"].\n\n.. code:: python\n\n  @app.default_error_handler\n  def default_error_handler (was, error):\n    return was.render (\"errors/default.html\", error = error)\n\n  def error (was):\n    return was.response.with_explain ('503 Serivce Unavaliable', \"Please Visit On Thurse Day\")\n\n\nYou can return various objects.\n\n.. code:: python\n\n  # File\n  @app.route (\"/streaming\")\n  def streaming (was):\n    return was.response (\"200 OK\", open (\"mypicnic.mp4\", \"rb\"), headers = [(\"Content-Type\", \"video/mp4\")])\n\n  # Generator\n  def build_csv (was):\n    def generate():\n      for row in iter_all_rows():\n        yield ','.join(row) + '\\n'\n    return was.response (\"200 OK\", generate (), headers = [(\"Content-Type\", \"text/csv\")])\n\n\nAll available return types are:\n\n- String, Bytes, Unicode\n- File-like object has 'read (buffer_size)' method, optional 'close ()'\n- Iterator/Generator object has 'next() or _next()' method, optional\n  'close ()' and shoud raise StopIteration if no more data exists.\n- Something object has 'more()' method, optional 'close ()'\n- Classes of skitai.lib.producers\n- List/Tuple contains above objects\n- XMLRPC dumpable object for if you want to response to XMLRPC\n\nThe object has 'close ()' method, will be called when all data\nconsumed, or socket is disconnected with client by any reasons.\n\n- was.response (status = \"200 OK\", body = None, headers = None,\n  exc_info = None)\n- was.response.throw (status = \"200 OK\"): abort handling request,\n  generated contents and return http error immediatly\n- was.API (\\_\\_data_dict\\_\\_ = None, \\*\\*kargs): return api\n  response container\n- was.Fault (status = \"200 OK\",\\*args, \\*\\*kargs): shortcut for\n  was.response (status, was.API (...)) if status code is 2xx\n  and was.response (status, was.Fault (...))\n- was.response.traceback (msg = \"\", code = 10001,  debug = 'see traceback',\n  more_info = None):\n  return api response container with setting traceback info\n\n- was.response.set_status (status) # \"200 OK\", \"404 Not Found\"\n- was.response.get_status ()\n- was.response.set_headers (headers) # [(key, value), ...]\n- was.response.get_headers ()\n- was.response.set_header (k, v)\n- was.response.get_header (k)\n- was.response.del_header (k)\n- was.response.hint_promise (uri) # *New in skitai version 0.16.4*,\n  only works with HTTP/2.x and will be ignored HTTP/1.x\n\n\nHTTP Exception\n``````````````````````````\n\nAbort immediatly and send HTTP eroor content.\n\n.. code:: python\n\n  @app.route (\"/<filename>\")\n  def getfile (was, filename):\n    if not os.path.isfile (filename):\n      raise was.Error (\"404 Not Found\", \"{} not exists\".format (filename))\n    return was.File (filename)\n\nUsing assert, you can quick send *400 Not My Fault*\n\n.. code:: python\n\n  @app.route (\"/<filename>\")\n  def getfile (was, filename):\n    assert filename.endswith ('.png'), 'filename must be end with png'\n    return was.File (filename)\n\n\nRedirecting To Static File\n``````````````````````````````````\n\n.. code:: python\n\n  @app.route (\"/robots.txt\")\n  def robots (was):\n      if app.debug:\n          was.response ['Content-Type'] = 'text/plain'\n          return \"User-Agent: *\\nDisallow: /\\n\"\n      return was.Static ('/robots.real.txt')\n\nIt will handle ETag, Last-Modified, Range etc just like common static files.\n\n\nFile Stream On Local File System\n``````````````````````````````````````\n\n.. code:: python\n\n  @app.route (\"/<filename>\")\n  def getfile (was, filename):\n    return was.File ('/data/%s' % filename)\n\n\nAPI Response\n````````````````````\n*New in skitai version 0.26.15.9*\n\nIn cases you want to retrun JSON API reponse,\n\n.. code:: python\n\n  # return JSON {data: [1,2,3]}\n  return was.Fault ('200 OK', data = [1, 2, 3])\n  # return empty JSON {}\n  return was.Fault (201 Accept')\n\n  # and shortcut if response HTTP status code is 200 OK,\n  return was.API (data =  [1, 2, 3])\n\n  # return empty JSON {}\n  return was.API ()\n\nFor sending error response with error information,\n\n.. code:: python\n\n  # client will get, {\"message\": \"parameter q required\", \"code\": 10021}\n  return was.Fault ('400 Bad Request', 'missing parameter', 10021)\n\n  # with additional information,\n  was.Fault (\n    '400 Bad Request',\n    'missing parameter', 10021,\n    'need parameter offset and limit', # detailed debug information\n    'http://127.0.0.1/moreinfo/10021', # more detail URL something\n  )\n\nYou can send traceback information for debug purpose like in case\napp.debug = False,\n\n.. code:: python\n\n  try:\n    do something\n  except:\n    return was.Fault (\n      '500 Internal Server Error',\n      'somethig is not valid',\n      10022,\n      traceback = True\n    )\n\n  # client see,\n  {\n    \"code\": 10001,\n    \"message\": \"somethig is not valid\",\n    \"debug\": \"see traceback\",\n    \"traceback\": [\n      \"name 'aa' is not defined\",\n      \"in file app.py at line 276, function search\"\n    ]\n  }\n\nImportant note that this response will return with HTTP 200 OK status.\nIf you want return 500 code, just let exception go.\n\nBut if your client send header with 'Accept: application/json'\nand app.debug is True, Skitai returns traceback information automatically.\n\n**Datetime Encoding JSON**\n\n.. code:: python\n\n  app.config.JSON_ENCODER = 'utcoffset'\n\n- utcoffset: 2030-12-24 15:09:00+00 (default, utc timezone)\n- str: 2030-12-24 15:09:00 (with system timezone)\n- iso: 2030-12-04T15:09:00 (utc timezone)\n- unixepoch: 1582850951.0 (utc timezone)\n- digit: 20301224150900 (utc timezone)\n\n\nSelective Media Response By Accept Header\n`````````````````````````````````````````````````````\n\nIf client's `Accept` header contains 'text/html', respond as rendered\nHTML or as JSON/XML API response.\n\n.. code:: python\n\n  @app.route ('/')\n  def index (was, error):\n    return was.render_or_API (\"index.html\", result = result)\n\n\nFuture / Futures Response\n```````````````````````````````````````````````\n\n* New in version 0.2*\n\nWith single thread it will be the problem using was' request services\nwith dispatch (), It is almost works as IO blocking situation.\n\nwas.Tasks.then () / corequest.then () returns Futures instance for delaying\nresponse until every awaitable tasks are finished and every future tasks\nwill be executed concurrently.\n\n*CAUTIONS:*\n\n1. Futures escape ealry from current requet handling thread pool\n   and enter to main  event loop. It means they will make connections\n   to targets as possible as they can.\n   If hundreds of clients request resource using database/upstream server,\n   It will make error on target server like \"too manty connection error\".\n   If you use Futures response, you SHOULD make sure these factors.\n2. Futures might be the most efficient if it satisfy 2 conditions, a\n   few simultaneously requesting clients, streaming data is relatively\n   small size. Lot of clients will consume\n   connection resources fast and large data stream make blanch coroutine\n   advantages caused of expensive networking cost.\n3. Then you could consider using was.Tasks first because Tasks\n   is within thread pool, it will be limit number of connections\n   by number of thread pool.\n\n.. code:: python\n\n  def test_futures (app, dbpath):\n    @app.route (\"/\")\n    def index (was):\n        def response (was, tasks):\n            return was.API (status_code = [task.status_code for task in tasks.dispatch ()])\n\n        reqs = [\n            was.get (\"@pypi/project/skitai/\"),\n            was.get (\"@pypi/project/rs4/\"),\n            was.db (\"@sqlite\").execute ('SELECT * FROM stocks WHERE symbol=?', ('RHAT',))\n        ]\n        return was.Tasks (reqs, timeout = 2).then (response)\n\n    app.alias (\"@pypi\", skitai.PROTO_HTTPS, \"pypi.org\")\n    app.alias (\"@sqlite\", skitai.DB_SQLITE3, dbpath)\n    with app.test_client (\"/\", confutil.getroot ()) as cli:\n        resp = cli.get (\"/\")\n        assert resp.data ['status_code'] == [200, 200, 200]\n\nNote that at callback, Futures is converted into Tasks_. Then you\ncan use dispatch, wait, fetch ... things.\n\n.. _Tasks: https://pypi.org/project/skitai/#tasks\n\n\nAnother example,\n\n.. code:: python\n\n  def test_futures (app, dbpath):\n    @app.route (\"/\")\n    def index (was):\n        def response (was, tasks):\n            tasks.stock.announcements = tasks [0].fetch ()\n            return was.API (tasks.stock)\n\n        stock = was.db (\"@sqlite\").select (stocks\").get (\"*\").filter (symbol='RHAT').execute ().one ()\n        reqs = [was.db (\"@sqlite\").select (announcements\").get (\"*\").filter (id = stock.id).execute ()]\n        return was.Tasks (reqs, stock = stock [0]).then (response)\n\n    app.alias (\"@pypi\", skitai.PROTO_HTTPS, \"pypi.org\")\n    app.alias (\"@sqlite\", skitai.DB_SQLITE3, dbpath)\n    with app.test_client (\"/\", confutil.getroot ()) as cli:\n        resp = cli.get (\"/\")\n        resp.data\n\nChaining is also possible,\n\n.. code:: python\n\n    @app.route (\"/\")\n    def index (was):\n        def repond (was, tasks):\n            return was.API (status_code_db = [task.status_code for task in tasks.dispatch ()], b = tasks.b, status_code = tasks.status_code)\n\n        def checkdb (was, tasks):\n            reqs = [was.db (\"@sqlite\").execute ('SELECT * FROM stocks WHERE symbol=?', ('RHAT',))]\n            status_code = [rs.status_code for rs in tasks.dispatch ()]\n            return was.Tasks (reqs, b = tasks.a + 100, status_code = status_code).then (repond)\n\n        reqs = [\n            was.get (\"@pypi/project/skitai/\"),\n            was.get (\"@pypi/project/rs4/\")\n        ]\n        return was.Tasks (reqs, a = 100).then (checkdb)\n\n    app.alias (\"@pypi\", skitai.PROTO_HTTPS, \"pypi.org\")\n    app.alias (\"@sqlite\", skitai.DB_SQLITE3, dbpath)\n    with app.test_client (\"/\", confutil.getroot ()) as cli:\n        resp = cli.get (\"/\")\n        resp.data\n        >> {'b': 200, 'status_code': [200, 200], 'status_code_db': [200]}\n\n\nProcess / Thread Response\n`````````````````````````````````````````\n\nThese are very same with Future response.\n\nIf you have CPU bound jobs, use was.Process.\n\n.. code:: python\n\n  @app.route ('...')\n  def foo ():\n    def repond (was, task):\n        return was.API (result = task.fetch (), a = task.meta ['a'])\n    return was.Process (math.sqrt, args = (4.0,), meta = {'a': 1}).then (respond)\n\nIf you have I/O bound jobs, use was.Thread.\n\n\nProxypass Response\n```````````````````````````````````\n\nSkitai's mounted proxypass is higher priority than WSGI app. If you\nwant make this to lower  priority, can use was.proxypass.\n\n.. code:: python\n\n  @app.route (\"/<path:path>\")\n  def proxy (was, path = None):\n    return was.proxypass (\"@myupstream\", path)\n\nBut it is valid only if request method is GET, because it is mainly\nused for building integrated development environment with\nfrontend frameworks linke Node.js.\n\n\nMounting Resources: Making Simpler & Modular App\n-------------------------------------------------------------------\n\n*New in skitai version 0.26.17*\n\nImplicit Mount Services On Your App\n````````````````````````````````````````````\n\nI already mentioned *App Structure* section, you can split yours views\nand help utilties into services directory.\n\nAssume your application directory structure is like this,\n\n.. code:: bash\n\n  templates/*.html\n  services/*.py # app library, all modules in this directory will be watched for reloading\n  static/images # static files\n  static/js\n  static/css\n\n  app.py # this is starter script\n\napp.py\n\n.. code:: python\n\n  from services import auth\n\n  app = Atila (__name__)\n\n  app.debug = True\n  app.use_reloader = True\n\n  @app.default_error_handler\n  def default_error_handler (was, e):\n    return str (e)\n\nservices/auth.py\n\n.. code:: python\n\n  # shared utility functions used by views\n\n  def titlize (s):\n    ...\n    return s\n\n  def __mount__ (app):\n    @app.login_handler\n    def login_handler (was):\n      if was.request.session.get (\"username\"):\n        return\n      next_url = not was.request.uri.endswith (\"signout\") and was.request.uri or \"\"\n      return was.redirect (was.urlfor (\"signin\", next_url))\n\n    @app.route (\"/signout\")\n    def signout (was):\n      was.request.session.remove (\"username\")\n      was.request.mbox.push (\"Signed out successfully\", \"success\")\n      return was.redirect (was.urlfor ('index'))\n\n    @app.route (\"/signin\")\n    def signin (was, next_url = None, **form):\n      if was.request.args.get (\"username\"):\n        user = auth.authenticate (username = was.request.args [\"username\"], password = was.request.args [\"password\"])\n        if user:\n          was.request.session.set (\"username\", was.request.args [\"username\"])\n          return was.redirect (was.request.args [\"next_url\"])\n        else:\n          was.request.mbox.push (\"Invalid User Name or Password\", \"error\", icon = \"new_releases\")\n      return was.render (\"sign/signin.html\", next_url = next_url or was.urlfor (\"index\"))\n\nYou just import module from services. but *def __mount__ (app)* is core in\neach module. Every modules can have *__mount__ (app)* in *services*, so you\ncan split and modulize views and utility functions. __mount__ (app) will be\nautomatically executed on starting. If you set app.use_reloader, theses services\nwill be automatically reloaded and re-executed on file changing. Also you can\nmake global app sharable functions into seperate module like util.py without\nviews.\n\n\nMounting Services With Options\n`````````````````````````````````````````````````\n\nIf you need additional options on decorating,\n\n.. code:: python\n\n  def __mount__ (app):\n    @app.route (\"/login\")\n    def login (was):\n      ...\n\nAnd on app,\n\n.. code:: python\n\n  from services import auth\n\n  app = Atila (__name__)\n  app.mount ('/regist', auth)\n\nFinally, route of login is \"/regist/login\".\n\nSometimes function names are duplicated if like you\nimport contributed services.\n\n.. code:: python\n\n  from services import auth\n\n  app = Atila (__name__)\n  app.mount ( '/regist', auth, ns = \"regist\")\n\nNow, you can import iport without name collision. But be careful\nwhen use was.urlfor () etc.\n\nNote that options should be keyword arguments.\n\n.. code:: python\n\n  {{ was.urlfor (\"regist.login\") }}\n\nIf you want to mount only debug environment,\n\n.. code:: python\n\n  app.mount (auth, debug_only = True)\n\nIf you want to authentify to all services,\n\n.. code:: python\n\n  app.mount (auth, authenticate = \"bearer\")\n\nCurrently *reserved arguments* are:\n\n- ns\n- authenticate\n- debug_only\n- point\n\nYour custom options can be accessed by __mntopt__ in your module.\n\nFirst, mount with redirect option.\n\n.. code:: python\n\n    app.mount (auth, redirect = \"index\")\n    # automatically set to auth.__mntopt__ = {\"redirect\": \"index\"}\n\nthen you can access in auth.py,\n\n.. code:: python\n\n    @app.route (\"/regist/signout\")\n    def signout (was):\n        was.request.mbox.push (\"Signed out successfully\", \"success\")\n        return was.redirect (was.urlfor (__mntopt__.get (\"redirect\", 'index')))\n\nSetup Services\n`````````````````````\n\nall service can also have \\_\\_setup\\_\\_ hook.\n\n.. code:: python\n\n  # foo.py\n  BASE_PATH = '/var'\n  def __setup__ (app, mntopt):\n    global BASE_PATH\n    BASE_PATH = mntopt.get ('base_path', BASE_PATH)\n\n  def __mount__ (app):\n    ...\n\n  # app.py\n\n  from services import foo\n  from atila import Atila\n\n  app = Atila (__name__)\n  app.mount ('/', foo, base_path = '/home/ubuntu')\n\n\nMounting Package\n````````````````````````\n\nAssume you have examples package in your service.\n\n.. code:: bash\n\n  services/examples/__init__.py\n  services/examples/foo.py\n  services/examples/bar.py\n\nYou can use \\_\\_setup\\_\\_ hook for mounting all sub services.\n\n.. code:: python\n\n  # services/examples/__init__.py\n  from . import foo, bar\n\n  def __setup__ (app, mntopt):\n    app.mount ('/foo', foo, threshold = mntopt.get ('threashold', 5))\n    app.mount ('/bar', bar)\n\nThen you can mount just top package one.\n\n.. code:: python\n\n    # app.py\n    from services import examples\n\n    app.mount ('/examples', examples, threshold = 10)\n\nAs a result, foo will be mounted on `/examples/foo`.\n\n\nUnmounting Resources\n```````````````````````````````\n\n*New in skitai version 0.27*\n\nAlso 'umount' is avaliable for cleaning up module resource.\n\n.. code:: python\n\n  resource = ...\n\n  def __umount__ (app):\n    resource.close ()\n    app.someghing = None\n\nThis will be automatically called when:\n\n- before module itself is reloading\n- before app is reloading\n- app unmounted from Skitai\n\n\nMore About Namespace\n````````````````````````````````````\n\nIf you develop reusable task modules, pay attention to namespace\nand URL building.\n\nFor example, below module is mount with app.mount (auth, ns = \"regist\").\n\n.. code:: python\n\n  # auth.py\n\n  def __mount__ (app):\n    @app.route (\"/func1\")\n    def func1 (was, a):\n      ...\n\n    @app.route (\"/func2\")\n    def func2 (was):\n      was.urlfor (\"func1\", \"hello\")\n\nThis was.urlfor (\"func1\") in func2 might be dangerous, because this task\nmodules may have namespace. Then you consider ns like this.\n\n.. code:: python\n\n  was.urlfor (\"{}func1\".format (__mntopt__.get (\"ns\") and __mntopt__ [\"ns\"] + \".\" or \"\"), , \"hello\")\n\nBut it is not pretty, so you can pretty style,\n\n.. code:: python\n\n  @app.route (\"/func2\")\n  def func2 (was):\n    was.urlfor (func1, \"hello\")\n\n*New in version 0.3.3*\n\nIf you want to access resources to another sub module, you can use\nwith full module name.\n\nFor example,\n\n.. code:: python\n\n  # services/v1/account.py\n  def __mount__ (app):\n    @app.route (\"/register\")\n    def register (was):\n      ...\n\nAn you can access like this,\n\n.. code:: python\n\n  was.urlfor (\"v1.account.register\")\n\n\nMore About Websocket\n--------------------------------------\n\n**websocket design specs** can be choosen one of 2.\n\nWS_CHANNEL\n\n  - Thread pool manages n websocket connection\n  - It's simple request and response way like AJAX\n  - Low cost on threads resources, but reposne cost is relatvley\n    high than the others\n\nWS_GROUPCHAT (New in version 0.24)\n\n  - Thread pool manages n websockets connection\n  - Chat room model\n\n**websocket message handling options**\n\nWS_THREAD\n\n  - default, function base websocket message handling\n  - it treats every single websocket message as single request to\n    resources like url requests.\n  - on receiving message from client, it will call function\n    for handling with queue and thread pool, it is basically\n    same as request resource\n\nWS_NOTHREAD\n\n  - non-threaded function call base websocket message handling\n  - it is faster than WS_THREAD\n\nWS_SESSION (New in version 0.30)\n\n  - non-threaded generator base websocket message handling\n  - cannot use this option with WS_THREADSAFE\n\nWS_THREADSAFE (New in version 0.26)\n\n  - Mostly same as WS_THREAD\n  - Message sending is thread safe\n  - Most case you needn't this option, but you create yourself one or\n    more threads using websocket.send () method you need this for\n    your convinience\n\n*Note:* WS_NOTHREAD and WS_SESSION will block SKitai event loop while\nyou generate message to respond. If sending messasge generation time is\nreltively long, use WS_THREAD or WS_THREADSAFE.\n\n**message_encoding**\n\nWebsocket messages will be automatically converted to theses objects.\nNote that option is only available with Atila WSGI container.\n\n  - WS_MSG_JSON\n  - WS_MSG_XMLRPC\n\n\n*New in skitai version 0.26.18*\n\nWebsokect usage is already explained, but Atila provide @app.websocket\ndecorator for more elegant way to use it.\n\n.. code:: python\n\n  def onopen (was):\n    print ('websocket opened')\n\n  def onclose (was):\n    print ('websocket closed')\n\n  @app.route (\"/websocket\")\n  @app.websocket (skitai.WS_CHANNEL, 1200, onopen, onclose)\n  def websocket (was, message):\n    return 'you said: ' + message\n\nThis decorator spec is,\n\n.. code:: python\n\n  @app.websocket (\n    spec, # one of skitai.WS_CHANNEL and skitai.WS_GROUPCHAT\n    timeout = 60,\n    onopen = None,\n    onclose = None\n  )\n\nIn some cases, you need additional parameter for opening/closing websocket.\n\n.. code:: python\n\n  @app.route (\"/websocket\")\n  @app.websocket (skitai.WS_CHANNEL | skitai.WS_THREADSAFE, 1200, onopen)\n  def websocket (was, message, option):\n    return 'you said: ' + message\n\nThen, your onopen function must have additional parameters except *message*.\n\n.. code:: python\n\n  def onopen (was):\n    print ('websocket opened with', was.request.ARGS [\"option\"])\n\nNow, your websocket endpoint is \"ws://127.0.0.1:5000/websocket?option=value\"\n\n\nWS_NOTHREAD\n````````````````````````\n\nWS_NOTHREAD does not use queue or thread pool. In this case, response is\nmore faster but if response includes IO blocking operation, entire\nSkitai event loop will be blocked.\n\n.. code:: python\n\n  @app.route (\"/websocket\")\n  @app.websocket (skitai.WS_CHANNEL | skitai.WS_NOTHREAD, 60, onopen)\n  def websocket (was, message):\n    return 'you said: ' + message\n\nWS_SESSION\n````````````````````````\n\nWith WS_SESSION should return Python generator object,\n\n.. code:: python\n\n  @app.route (\"/websocket\")\n    @app.websocket (skitai.WS_CHANNEL | skitai.WS_SESSION, 60)\n    def websocket (was):\n      while 1:\n        message = yield\n        if not message:\n          return #strop iterating\n        yield \"ECHO:\" + message\n\n*Note:* If you use WS_SESSION option, onopen and onclose should be None,\nbecause in session, you can handle open and close within your function.\n\n\nPushing Message Through Connected Client\n--------------------------------------------------------------\n\nSave websocket client id to session.\n\n.. code:: python\n\n  def onopen (was):\n    was.request.session.set (\"WS_ID\", was.websocket.client_id)\n\n  def onclose (was):\n    was.request.session.remove (\"WS_ID\")\n\n  @app.route (\"/websocket\")\n  @app.websocket (skitai.WS_CHANNEL | skitai.WS_FAST, 1200, onopen, onclose)\n  def websocket (was, message):\n    return 'you said: ' + message\n\nAnd push message to client.\n\n.. code:: python\n\n  @app.route (\"/item_in_stock\")\n  def item_in_stock (was):\n    app.websocket_send (\n      was.request.session.get (\"WS_ID\"),\n      \"Item In Stock!\"\n    )\n\n*Note:*: I'm not sure it is works in all web browser.\n\n\nBuilding URL\n---------------\n\nIf your app is mounted at \"/math\",\n\n.. code:: python\n\n  @app.route (\"/add\")\n  def add (was, num1, num2):\n    return int (num1) + int (num2)\n\n  was.app.build_url (\"add\", 10, 40) # returned '/math/add?num1=10&num2=40'\n\n  # BUT it's too long to use practically,\n  # was.urlfor is acronym for was.app.build_url\n  was.urlfor (\"add\", 10, 40) # returned '/math/add?num1=10&num2=40'\n  was.urlfor (\"add\", 10, num2=60) # returned '/math/add?num1=10&num2=60'\n\n  #You can use function directly as well,\n  was.urlfor (add, 10, 40) # returned '/math/add?num1=10&num2=40'\n\n  @app.route (\"/hello/<name>\")\n  def hello (was, name = \"Hans Roh\"):\n    return \"Hello, %s\" % name\n\n  was.urlfor (\"hello\", \"Your Name\") # returned '/math/hello/Your_Name'\n\nBasically, was.urlfor is same as Python function call.\n\n\nBuilding URL by Updating Parameters Partially\n````````````````````````````````````````````````\n\n**New in skitai version 0.27**\n\n.. code:: python\n\n  @app.route (\"/navigate\")\n  def navigate (was, limit = 20, pageno = 1):\n    return ...\n\nIf this resource was requested by /naviagte?limit=100&pageno=2, and\nif you want to make new resource url with keep a's value (=100),\nyou can make URL like this,\n\n.. code:: python\n\n  was.urlfor (\"navigate\", was.request.args.limit, 3)\n\nBut you can update only changed parameters partially,\n\n.. code:: python\n\n  was.urlpatch (\"add\", pageno = 3)\n\nParameter a's value will be kept with current requested parameters.\nNote that was.urlpatch can be recieved keyword arguments only except\nfirst resource name.\n\nwas.urlpatch is used changing partial parameters (or none) based over\ncurrent parameters.\n\n\nBuilding Base URL without Parameters\n````````````````````````````````````\n\n**New in skitai version 0.27**\n\nSometimes you need to know just resource's base path info - especially\nclient-side javascript URL building, then use *was.basepath*.\n\n.. code:: python\n\n  @app.route (\"/navigate\")\n  def navigate (was, limit, pageno = 1):\n    return ...\n\n.. code:: python\n\n  was.basepath (\"navigate\")\n  >> return \"/navigate\"\n\nFor example, in your VueJS template,\n\n.. code:: html\n\n  <a :href=\"'{{ was.basepath ('navigate') }}?limit=' + limit_option + '&pageno=' + (current_page + 1)\">Next Page</a>\n\nNote that base path means for fancy Url,\n\n.. code:: python\n\n  @app.route (\"/user/<id>\")\n  >> base path is \"/user/\"\n\n  @app.route (\"/user/<id>/pat\")\n  >> base path is \"/user/\"\n\n\nAccess Environment Variables\n------------------------------\n\n**was.request.env** (*alias: was.env*)\n\nwas.request.env is just Python dictionary object.\n\n.. code:: python\n\n  if \"HTTP_USER_AGENT\" in was.request.env:\n    ...\n  was.request.env.get (\"CONTENT_TYPE\")\n\n\nAccess Cookie\n----------------\n\n**was.request.cookie** (*alias: was.cookie*)\n\nwas.request.cookie has almost dictionary methods.\n\n.. code:: python\n\n  if \"user_id\" not in was.request.cookie:\n    was.request.cookie.set (\"user_id\", \"hansroh\")\n    # or\n    was.request.cookie [\"user_id\"] = \"hansroh\"\n\n\n*Changed in version 0.15.30*\n\n'was.request.cookie.set()' method prototype has been changed.\n\n.. code:: python\n\n  was.request.cookie.set (\n    key, val,\n    expires = None,\n    path = None, domain = None,\n    secure = False, http_only = False\n  )\n\n'expires' args is seconds to expire.\n\n - if None, this cookie valid until browser closed\n - if 0 or 'now', expired immediately\n - if 'never', expire date will be set to a hundred years from now\n\nIf 'secure' and 'http_only' options are set to True, 'Secure' and\n'HttpOnly' parameters will be added to Set-Cookie header.\n\nIf 'path' is None, every app's cookie path will be automaticaaly\nset to their mount point.\n\nFor example, your admin app is mounted on \"/admin\" in configuration\nfile like this:\n\n.. code:: python\n\n  app = ... ()\n\n  if __name__ == \"__main__\":\n\n    import skitai\n\n    skitai.run (\n      address = \"127.0.0.1\",\n      port = 5000,\n      mount = {'/admin': app}\n    )\n\nIf you don't specify cookie path when set, cookie path will be automatically\nset to '/admin'. So you want to access from another apps, cookie should\nbe set with upper path = '/'.\n\n.. code:: python\n\n  was.request.cookie.set ('private_cookie', val)\n\n  was.request.cookie.set ('public_cookie', val, path = '/')\n\n- was.request.cookie.set (key, val, expires = None, path = None,\n  domain = None, secure = False, http_only = False)\n- was.request.cookie.remove (key, path, domain)\n- was.request.cookie.clear (path, domain)\n- was.request.cookie.keys ()\n- was.request.cookie.values ()\n- was.request.cookie.items ()\n- was.request.cookie.has_key ()\n\n\nAccess Session\n----------------\n\n**was.request.session** (*alias: was.session*)\n\nStrictly speaking, Atila hasn't got traditional session which some data\nis stored on server side. And it doesn't provide any abstract classes or\nmethods for storing.\n\nAilta's session is just one of cookie value which contains signature\nfor checking alternation by any other things except Atila.\n\nwas.request.session has almost dictionary methods.\n\nTo enable session for app, random string formatted securekey should\nbe set for encrypt/decrypt session values.\n\n*WARNING*: `securekey` should be same on all skitai apps at least\nwithin a virtual hosing group, Otherwise it will be serious disaster.\n\n.. code:: python\n\n  app.securekey = \"ds8fdsflksdjf9879dsf;?<>Asda\"\n  app.session_timeout = 1200 # sec\n\n  @app.route (\"/session\")\n  def hello_world (was, **form):\n    if \"login\" not in was.request.session:\n      was.request.session.set (\"user_id\", form.get (\"hansroh\"))\n      # or\n      was.request.session [\"user_id\"] = form.get (\"hansroh\")\n\nIf you set, alter or remove session value, session expiry is automatically\nextended by app.session_timeout. But just getting value will not be extended.\nIf you extend explicit without altering value, you can use touch() or\nset_expiry(). session.touch() will extend by app.session_timeout.\nsession.set_expiry (timeout) will extend by timeout value.\n\nOnce you set expiry, session auto extenstion will be disabled until\nexpiry time become shoter than new expiry time is calculated by\napp.session_timeout.\n\n- was.request.session.set (key, val)\n- was.request.session.get (key, default = None)\n- was.request.session.source_verified (): If current IP address\n  matches with last IP accesss session\n- was.request.session.getv (key, default = None): If not\n  source_verified (), return default\n- was.request.session.remove (key)\n- was.request.session.clear ()\n- was.request.session.keys ()\n- was.request.session.values ()\n- was.request.session.items ()\n- was.request.session.has_key ()\n- was.request.session.set_expiry (timeout)\n- was.request.session.touch ()\n- was.request.session.expire ()\n- was.request.session.use_time ()\n- was.request.session.impending (): if session timeout remains 20%\n\n\nMessaging Box\n----------------\n\n**was.request.mbox** (*alias: was.mbox*)\n\nLike Flask's flash feature, Skitai also provide messaging tool.\n\n.. code:: python\n\n  @app.route (\"/msg\")\n  def msg (was):\n    was.request.mbox.send (\"This is Flash Message\", \"flash\")\n    was.request.mbox.send (\"This is Alert Message Kept by 60 seconds on every request\", \"alram\", valid = 60)\n    return was.redirect (was.urlfor (\"showmsg\", \"Hans Roh\"), status = \"302 Object Moved\")\n\n  @app.route (\"/showmsg\")\n  def showmsg (was, name):\n    return was.render (\"msg.htm\", name=name)\n\nA part of msg.htm is like this:\n\n.. code:: html\n\n  Messages To {{ name }},\n  <ul>\n    {% for message_id, category, created, valid, msg, extra in was.request.mbox.get () %}\n      <li> {{ mtype }}: {{ msg }}</li>\n    {% endfor %}\n  </ul>\n\nDefault value of valid argument is 0, which means if page called\nwas.request.mbox.get() is finished successfully, it is automatically deleted\nfrom mbox.\n\nBut like flash message, if messages are delayed by next request, these\nmessages are save into secured cookie value, so delayed/long term valid\nmessages size is limited by cookie specificatio. Then shorter and fewer\nmesssages would be better as possible.\n\n'was.request.mbox' can be used for general page creation like handling notice,\nalram or error messages consistently. In this case, these messages\n(valid=0) is consumed by current request, there's no particular size\nlimitation.\n\nAlso note valid argument is 0, it will be shown at next request just one\ntime, but inspite of next request is after hundred years, it will be\nshown if browser has cookie values.\n\n.. code:: python\n\n  @app.before_request\n  def before_request (was):\n    if has_new_item ():\n      was.request.mbox.send (\"New Item Arrived\", \"notice\")\n\n  @app.route (\"/main\")\n  def main (was):\n    return was.render (\"news.htm\")\n\nnews.htm like this:\n\n.. code:: html\n\n  News for {{ was.g.username }},\n  <ul>\n    {% for mid, category, created, valid, msg, extra in was.request.mbox.get (\"notice\", \"news\") %}\n      <li class=\"{{category}}\"> {{ msg }}</li>\n    {% endfor %}\n  </ul>\n\n- was.request.mbox.send (msg, category, valid_seconds, key=val, ...)\n- was.request.mbox.get () return [(message_id, category, created_time,\n  valid_seconds, msg, extra_dict)]\n- was.request.mbox.get (category) filtered by category\n- was.request.mbox.get (key, val) filtered by extra_dict\n- was.request.mbox.source_verified (): If current IP address\n  matches with last IP accesss mbox\n- was.request.mbox.getv (...) return get () if source_verified ()\n- was.request.mbox.search (key, val): find in extra_dict. if val\n  is not given or given None, compare with category name. return\n  [message_id, ...]\n- was.request.mbox.remove (message_id)\n\n\nNamed Session & Messaging Box\n------------------------------\n\n*New in skitai version 0.15.30*\n\nYou can create multiple named session and mbox objects by mount() methods.\n\n.. code:: python\n\n  was.request.session.mount (\n    name = None,\n    session_timeout = None,\n    securekey = None,\n    path = None,\n    domain = None,\n    secure = False,\n    http_only = False,\n    extend = True\n   )\n\n  was.request.mbox.mount (\n    name = None,\n    securekey = None,\n    path = None,\n    domain = None,\n    secure = False,\n    http_only = False\n  )\n\nFor example, your app need isolated session or mbox seperated\ndefault session for any reasons, can create session named 'ADM'\nand if this session or mbox is valid at only /admin URL.\n\n.. code:: python\n\n  @app.route(\"/\")\n  def index (was):\n    was.request.session.mount (\"ADM\", path = '/admin')\n    was.request.session.set (\"admin_login\", True)\n\n    was.request.mbox.mount (\"ADM\", path = '/admin')\n    was.request.mbox.send (\"10 data has been deleted\", 'warning')\n\nSECUREKEY_STRING needn't same with app.securekey. And path, domain,\nsecure, http_only args is for session cookie, you can mount any\nnamed sessions or mboxes with upper cookie path and upper cookie\ndomain. In other words, to share session or mbox with another apps,\npath should be closer to root (/).\n\n.. code:: python\n\n  @app.route(\"/\")\n  def index (was):\n    was.request.session.mount (\"ADM\", path = '/')\n    was.request.session.set (\"admin_login\", True)\n\nAbove 'ADM' sesion can be accessed by all mounted apps because path is '/'.\n\nAlso note was.request.session.mount () is exactly same as mounting default session.\n\nmount() is create named session or mbox if not exists, exists() is\njust check wheather exists named session already.\n\n.. code:: python\n\n  if not was.request.session.exists (None):\n    return \"Your session maybe expired or signed out, please sign in again\"\n\n  if not was.request.session.exists (\"ADM\"):\n    return \"Your admin session maybe expired or signed out, please sign in again\"\n\n\n\nFile Upload\n---------------\n\n.. code:: python\n\n  FORM = \"\"\"\n    <form enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"hidden\" name=\"submit-hidden\" value=\"Genious\">\n    <p></p>What is your name? <input type=\"text\" name=\"submit-name\" value=\"Hans Roh\"></p>\n    <p></p>What files are you sending? <br />\n    <input type=\"file\" name=\"file\">\n    </p>\n    <input type=\"submit\" value=\"Send\">\n    <input type=\"reset\">\n  </form>\n  \"\"\"\n\n  @app.route (\"/upload\")\n  def upload (was, *form):\n    if was.request.command == \"get\":\n      return FORM\n    else:\n      file = form.get (\"file\")\n      if file:\n        file.save (\"d:\\\\var\\\\upload\", dup = \"o\") # overwrite\n\n'file' object's attributes are:\n\n- file.path: temporary saved file full path\n- file.name: original file name posted\n- file.size\n- file.mimetype\n- file.save (into, name = None, mkdir = False, dup = \"u\")\n- file.remove ()\n- file.read ()\n\n  * if name is None, used file.name\n  * dup:\n\n    + u - make unique (default)\n    + o - overwrite\n\n\nUsing SQL Map with SQLPhile\n---------------------------------\n\n*New in Version 0.26.13*\n\nSQLPhile_ is SQL generator and can be accessed from was.sql.\n\nwas.sql is a instance of sqlphile.SQLPhile.\n\nIf you want to use SQL templates, create sub directory 'sqlmaps'\nand place sqlmap files.\n\n.. code:: python\n\n  # default engine is skitai.DB_PGSQL and also available skitai.DB_SQLITE3\n  # no need call for skitai.DB_PGSQL\n  app.setup_sqlphile (skitai.DB_SQLITE3)\n\n  @app.route (\"/\")\n  def index (was):\n    q = was.sql.select (tbl_'user').get ('id, name').filter (id = 4)\n    req = was.db (\"@db\").execute (q)\n    result = req.dispatch ()\n\n*New in skitai version 0.27*\n\nFrom version 0.27 SQLPhile_ is integrated with PostgreSQL and SQLite3.\n\n.. code:: python\n\n    app = Atila (__name__)\n    app.setup_sqlphile (skitai.DB_PGSQL)\n\n    @app.route (\"/\")\n    def query (was):\n      dbo = was.db (\"@mypostgres\")\n      req = dbo.select (\"cities\").get (\"id, name\").filter (name__like = \"virginia\").execute ()\n      result = req.dispatch ()\n      response = req.dispatch (timeout = 2)\n      dbo.insert (\"cities\").data (name = \"New York\").execute ().wait_or_throw (\"500 Server Error\")\n\n\nPlease, visit SQLPhile_ for more detail.\n\n.. _SQLPhile: https://pypi.python.org/pypi/sqlphile\n\n\nRegistering Per Request Calling Functions\n-------------------------------------------\n\nMethod decorators called automatically when each method is\nrequested in a app.\n\n.. code:: python\n\n  @app.before_request\n  def before_request (was):\n    if not login ():\n      return \"Not Authorized\"\n\n  @app.finish_request\n  def finish_request (was):\n    was.g.user_id\n    was.g.user_status\n    ...\n\n  @app.failed_request\n  def failed_request (was, exc_info):\n    was.g.user_id\n    was.g.user_status\n    ...\n\n  @app.teardown_request\n  def teardown_request (was):\n    was.g.resouce.close ()\n    ...\n\n  @app.route (\"/view-account\")\n  def view_account (was, userid):\n    was.g.user_id = \"jerry\"\n    was.g.user_status = \"active\"\n    was.g.resouce = open ()\n    return ...\n\nFor this situation, 'was' provide was.g that is empty class instance.\nwas.g is valid only in current request. After end of current request.\n\nIf view_account is called, Atila execute these sequence:\n\n.. code:: python\n\n  try:\n    try:\n      content = before_request (was)\n      if content:\n        return content\n      content = view_account (was, *args, **karg)\n\n    except:\n      content = failed_request (was, sys.exc_info ())\n      if content is None:\n        raise\n\n    else:\n      finish_request (was)\n\n  finally:\n    teardown_request (was)\n\n  return content\n\nBe attention, failed_request's 2nd arguments is sys.exc_info ().\nAlso finish_request and teardown_request (NOT failed_request)\nshould return None (or return nothing).\n\nIf you handle exception with failed_request (), return custom error\ncontent, or exception will be reraised and Atila will handle exception.\n\n*New in skitai version 0.14.13*\n\n.. code:: python\n\n  @app.failed_request\n  def failed_request (was, exc_info):\n    # releasing resources\n    return was.response (\n      \"501 Server Error\",\n      was.render (\"err501.htm\", msg = \"We're sorry but something's going wrong\")\n    )\n\nDefine Autoruns\n--------------------------------\n\n*New in skitai version 0.26.18*\n\nYou can make automation for preworks and postworks.\n\n.. code:: python\n\n  def pre1 (was):\n    ...\n\n  def pre2 (was):\n    ...\n\n  def post1 (was):\n    ...\n\n  @app.run_before (pre1, pre2)\n  @app.run_after (post1)\n  def index (was):\n    return was.render ('index.html')\n\n@app.run_before can return None or responsable contents for\naborting all next run_before and main request.\n\n@app.run_after return will be ignored\n\nDefine Conditional Prework\n-------------------------------\n\n*New in skitai version 0.26.18*\n\n@app.if~s are conditional executing decorators.\n\n.. code:: python\n\n  def reload_config (was, path):\n    ...\n\n  @app.if_file_modified ('/opt/myapp/config', reload_config, interval = 1)\n  def index (was):\n    return was.render ('index.html')\n\n@app.if_updated need more explaination.\n\n\nInter Process Update Notification and Consequences Automation\n----------------------------------------------------------------\n\n*New in skitai version 0.26.18*\n\n@app.if_updated is related with skitai.register_states (), was.setlu()\nand was.getlu() and these are already explained was cache contorl\npart. And Atila app can use more conviniently.\n\nThese're used for mostly inter-process notification protocol.\n\nBefore skitai.run (), you should define updatable objects as\nstring keys:\n\n.. code:: python\n\n  skitai.register_states (\"weather-news\", ...)\n\nThen one process update object and update time by setlu ().\n\n.. code:: python\n\n  @app.route (\"/\")\n  def add_weather (was):\n    was.db.execute (\"insert into weathers ...\")\n    was.setlu (\"weather-news\")\n    return ...\n\nThis update time stamp will be recorded in shared memory, then all skitai\nworker processes can catch this update by comparing previous last update\ntime and automate consequences like refreshing cache.\n\n.. code:: python\n\n  def reload_cache (was, key):\n    ...\n\n  @app.if_updated ('weather-news', reload_cache)\n  def index (was):\n    return was.render ('index.html')\n\n\nApp Lifecycle Hook\n----------------------\n\nThese app life cycle methods will be called by this order,\n\n- before_mount (wac): when app imported on skitai server started\n- mounted (*was*): called first with was (instance of wac)\n- mounted_or_reloaded (*was*): called with was (instance of wac)\n- loop whenever app is reloaded,\n\n  - oldapp.before_reload (*was*)\n  - newapp.reloaded (*was*)\n  - mounted_or_reloaded (*was*): called with was (instance of wac)\n\n- before_umount (*was*): called last with was (instance of wac),\n  add shutting down process\n- umounted (wac): when skitai server enter shutdown process\n\nPlease note that first arg of startup, reload and shutdown is *wac*\nnot *was*. *wac* is Python Class object of 'was', so mainly used\nfor sharing Skitai server-wide object via was.object before\ninstancelizing to *was*.\n\n.. code:: python\n\n  @app.before_mount\n  def before_mount (wac):\n    logger = wac.logger.get (\"app\")\n    # OR\n    logger = wac.logger.make_logger (\"login\", \"daily\")\n    config = wac.config\n    wac.register (\"loginengine\", SNSLoginEngine (logger))\n    wac.register (\"searcher\", FulltextSearcher (wac.numthreads))\n\n  @app.before_reload\n  def before_remount (wac):\n    wac.loginengine.reset ()\n\n  @app.umounted\n  def before_umount (wac):\n    wac.umounted.close ()\n\n    wac.unregister (\"loginengine\")\n    wac.unregister (\"searcher\")\n\nYou can access numthreads, logger, config from wac.\n\nAs a result, myobject can be accessed by all your current app\nfunctions even all other apps mounted on Skitai.\n\n.. code:: python\n\n  # app mounted to 'abc.com/register'\n  @app.route (\"/\")\n  def index (was):\n    was.loginengine.check_user_to (\"facebook\")\n    was.searcher.query (\"ipad\")\n\n  # app mounted to 'def.com/'\n  @app.route (\"/\")\n  def index (was):\n    was.searcher.query (\"news\")\n\n*Note:* The way to mount with host, see *'Mounting With Virtual\nHost'* chapter below.\n\nIt maybe used like plugin system. If a app which should be mounted\nloads pulgin-like objects, theses can be used by Skitai server\nwide apps via was.object1, was.object2,...\n\n*New in skitai version 0.26*\n\nIf you have databases or API servers, and want to create cache object\non app starting, you can use @app.mounted decorator.\n\n.. code:: python\n\n  def create_cache (res):\n    d = {}\n    for row in res.data:\n      d [row.code] = row.name\n    app.store.set ('STATENAMES', d)\n\n  @app.mounted\n  def mounted (was):\n    was.db ('@mydb', callback = create_cache).execute (\"select code, name from states;\")\n    # or use REST API\n    was.get ('@myapi/v1/states', callback = create_cache)\n    # or use RPC\n    was.rpc ('@myrpc/rpc2', callback = create_cache).get_states ()\n\n  @app.reloaded\n  def reloaded (was):\n    mounted (was) # same as mounted\n\n  @app.before_umount\n  def before_umount (was):\n    was.delete ('@session/v1/sessions', callback = lambda x: None)\n\nBut both are not called by request, you CAN'T use request related\nobjects like was.request, was.request.cookie etc. And SHOULD use callback\nbecause these are executed within Main thread.\n\n\nLogin and Permission Helper\n------------------------------\n\n*New in skitai version 0.26.16*\n\nYou can define login & permissoin check handler,\n\n.. code:: python\n\n  @app.login_handler\n  def login_handler (was):\n    if was.request.session.get (\"demo_username\"):\n      return\n\n    if was.request.args.get (\"username\"):\n      if not was.verify_csrf ():\n        raise was.Error (\"400 Bad Request\")\n\n      if was.request.args.get (\"signin\"):\n        user, level = authenticate (username = was.request.args [\"username\"], password = was.request.args [\"password\"])\n        if user:\n          was.request.session.set (\"demo_username\", user)\n          was.request.session.set (\"demo_permission\", level)\n          return\n\n        else:\n          was.request.mbox.send (\"Invalid User Name or Password\", \"error\")\n    return was.render (\"login.html\", user_form = forms.DemoUserForm ())\n\n  @app.permission_check_handler\n  def permission_check_handler (was, perms):\n    if was.request.session.get (\"demo_permission\") in perms:\n      raise was.Error (\"403 Permission Denied\")\n\n  @app.staff_member_check_handler\n  def staff_check_handler (was):\n    if was.request.session.get (\"demo_permission\") not in ('staff'):\n      raise was.Error (\"403 Staff Permission Required\")\n\nIf you are using JWT you can integrate with this, And it\nis replacable instead of app.authorization_required.\n\n.. code:: python\n\n  @app.permission_check_handler\n  def permission_check_handler (was, perms):\n      claims = was.request.JWT\n      if \"err\" in claims: return claims [\"err\"]\n      if not perms:\n        return # permit\n      for p in claims [\"levels\"]:\n          if p in perms:\n              return # permit\n      raise was.Error (\"403 Permission Denied\")\n\nAnd use it for your resources if you need,\n\n.. code:: python\n\n  @app.route (\"/\")\n  @app.permission_required ([\"admin\"])\n  @app.login_required\n  def index (was):\n    return \"Hello\"\n\n  @app.staff_member_required\n  def index2 (was):\n    return \"Hello\"\n\nIf every thing is OK, it *SHOULD return None, not True*.\n\n'clarify_permission' and 'clarify_login' will ignore any raise\nHTTP error but just try run 'permission_check_handler'. You can\nset request.user object if user has permission.\n\n.. code:: python\n\n  @app.permission_check_handler\n  def permission_check_handler (was, perms):\n      claims = was.request.JWT\n      if \"err\" in claims:\n        return claims [\"err\"]\n      was.request.user = claims ['uid']\n      if not perms:\n        return # permit\n      raise was.Error (\"403 Permission Denied\")\n\n  @app.clarify_permission # ignore http error on handler\n  def index (was):\n    if not was.request.user:\n      return 'permission denied'\n    return 'permission granted'\n\n\nConditional Permission Control\n````````````````````````````````````````````````````\n\n*New in version 0.3*\n\nLet's assume you manage permission by user levels: admin,\nstaff and user.\n\n.. code:: python\n\n  @app.permission_check_handler\n  def permission_check_handler (was, perms):\n    claims = was.request.JWT\n    if \"err\" in claims:\n      return claims [\"err\"]\n\n    if not perms:\n      return # permit for anyone who is authorized\n    if claims [\"level\"] == \"admin\":\n      return # premit always\n    if \"admin\" in perms:\n      raise was.Error (\"403 Permission Denied\")\n    if \"staff\" in prems and claims [\"level\"] != \"staff\":\n        raise was.Error (\"403 Permission Denied\")\n\n.. code:: python\n\n  @app.route (\"/animals/<id>\")\n  @app.permission_required ([], id = [\"staff\"])\n  def animals (was, id = None):\n      id = id or was.request.JWT [\"userid\"]\n\nThis resources required any permission for \"/animals/\" or\n\"/animals/me\". But '/animals/100' is required 'staff' permission.\nIt may make permission control more simpler.\n\nAlso you can specify premissions per request methods.\n\n.. code:: python\n\n  @app.route (\"/animals/<id>\", methods = [\"POST\", \"DELETE\"])\n  @app.permission_required (['user'], id = [\"staff\"], DELETE = [\"admin\"])\n  def animals (was, id = None):\n      id = id or was.request.JWT [\"userid\"]\n\nThis resources required 'user' permission for \"/animals/\" or \"/animals/me\".\n'/animals/100' is required 'staff' permission. It may make\npermission control more simpler.\n\n\nTestpassing\n`````````````````````````\n\nAlso you can test if user is valid,\n\n.. code:: python\n\n  def is_superuser (was):\n    if was.user.username not in ('admin', 'root'):\n      reutrn was.response (\"403 Permission Denied\")\n\n  @app.testpass_required (is_superuser)\n  def modify_profile (was):\n    ...\n\nThe binded testpass_required function can return,\n\n- True or None: continue request\n- False: response 403 Permission Denied immediately\n- Responsable object: response object immediately\n\n\nCross Site Request Forgery Token (CSRF Token)\n------------------------------------------------\n\n*New in skitai version 0.26.16*\n\nAt template, insert CSRF Token,\n\n.. code:: html\n\n  <form>\n  {{ was.csrf_token_input }}\n  ...\n  </form>\n\nthen verify token like this,\n\n.. code:: python\n\n  @app.before_request\n  def before_request (was):\n    if was.request.args.get (\"username\"):\n      if not was.verify_csrf ():\n        return was.response (\"400 Bad Request\")\n\nOr use decorator,\n\n.. code:: python\n\n  @app.csrf_verification_required\n  def before_request (was):\n    ...\n\n\nMaking One-Time Token\n--------------------------------------\n\n*New in skitai version 0.26.17*\n\nFor creatiing onetime link url, you can convert your data to\nsignatured token string.\n\nNote: Like JWT token, this token contains data and decode easily,\nthen you should not contain important information like password or\nPIN. This token just make sure contained data is not altered by\ncomparing signature which is generated with your app scret key.\n\n.. code:: python\n\n  @app.route ('/password-reset')\n  def password_reset (was)\n    if was.request.args ('username'):\n      username = \"hans\"\n      token = was.mkott (username, 3600, \"pwrset\") # valid within 1 hour\n      pw_reset_url = was.urlfor ('reset_password', token)\n      # send email\n      return was.render ('done.html')\n\n    if was.request.args ('token'):\n      username = was.deott (was.request.args ['token'])\n      if not username:\n        return was.response ('400 Bad Request')\n      # processing password reset\n      ...\n\nIf you want to expire token explicit, add session token key\n\n.. code:: python\n\n  # valid within 1 hour and create session token named '_reset_token'\n  token = was.mkott (\"hans\", 3600, 'rset')\n  >> kO6EYlNE2QLNnospJ+jjOMJjzbw?fXEAKFgGAAAAb2JqZWN0...\n\n  username = was.deott (token)\n  >> \"hans\"\n\n  # if processing is done and for revoke token,\n  was.rvott (token)\n\n\nApp Event Handling\n---------------------\n\nMost of Atila's event handlings are implemented with\nexcellent `event-bus`_ library.\n\n*New in skitai version 0.26.16*, *Availabe only on Python 3.5+*\n\n.. code:: python\n\n  import atila\n\n  @app.on (atila.app_starting)\n  def app_starting_handler (wasc):\n    print (\"I got it!\")\n\n  @app.on (atila.request_failed)\n  def request_failed_handler (was, exc_info):\n    print (\"I got it!\")\n\n  @app.on (atila.template_rendering)\n  def template_rendering_handler (was, template, params):\n    print (\"I got it!\")\n\nThere're some app events.\n\n- atila.app_starting: required (wasc)\n- atila.app_started: required (wasc)\n- atila.app_restarting: required (wasc)\n- atila.app_restarted: required (wasc)\n- atila.app_mounted: required (was)\n- atila.app_unmounting: required (was)\n- atila.request_failed: required ( was, exc_info)\n- atila.request_success: required (was)\n- atila.request_tearing_down: required (was)\n- atila.request_starting: required (was)\n- atila.request_finished: required (was)\n\n.. _`event-bus`: https://pypi.python.org/pypi/event-bus\n\n\nApp Storage\n----------------------------------------\n\n*app.store* object is ditionary like object and provide\nthread-safe accessing.\n\nIt SHOULD be simple primitive value like string, int, float.\nAbout dictionary or class instances, It can't give no guarantee\nfor thread-safe.\n\n.. code:: python\n\n  def  (was, current_users):\n    total = app.store.get (\"total-user\")\n    app.store.set (\"total-user\", total + 1)\n    ...\n\n\nInverval Base App Maintenancing\n---------------------------------------------\n\nIf you need interval base maintaining jobs,\n\n.. code:: python\n\n  app.config.maintain_interval = 10  # seconds\n  app.store.set (\"num-nodes\", 0) # thread safe store\n\n  @app.maintain\n  def maintain_num_nodes (was, now, count):\n    ...\n    num_nodes = was.getlu (\"cluster.num-nodes\")\n    if app.store [\"num-nodes\"] != num_nodes:\n      app.store [\"num-nodes\"] = num_nodes\n      app.broadcast (\"cluster:num_nodes\")\n\nYou can add multiple maintain jobs but maintain function\nnames is SHOULD be unique.\n\n\nCreating and Handling Custom Event\n---------------------------------------\n\n*Availabe only on Python 3.5+*\n\nFor creating custom event and event handler,\n\n.. code:: python\n\n  @app.on (\"user-updated\")\n  def user_updated (was, user):\n    ...\n\nFor emitting,\n\n.. code:: python\n\n  @app.route ('/users', methods = [\"POST\"])\n  def users (was):\n    args = was.request.json ()\n    ...\n\n    app.emit (\"user-updated\", args ['userid'])\n\n    return ''\n\nIf event hasn't args, you can use `emit_after` decorator,\n\n.. code:: python\n\n  @app.route ('/users', methods = [\"POST\"])\n  @app.emit_after (\"user-updated\")\n  def users (was):\n    args = was.request.json ()\n    ...\n    return ''\n\nUsing this, you can build automatic excution chain,\n\n.. code:: python\n\n  @app.on (\"photo-updated\")\n  def photo_updated (was):\n    ...\n\n  @app.on (\"user-updated\")\n  @app.emit_after (\"photo-updated\")\n  def user_updated (was):\n    ...\n\n  @app.route ('/users', methods = [\"POST\"])\n  @app.emit_after (\"user-updated\")\n  def users (was):\n    args = was.request.json ()\n    ...\n    return ''\n\n\nCross App Communication & Accessing Resources\n----------------------------------------------\n\nSkitai prefer spliting apps to small microservices and mount\nthem each. This feature make easy to move some of your mounted\napps move to another machine. But this make difficult to\ncommunicate between apps.\n\nHere's some helpful solutions.\n\n\nAccessing App Object Properties\n`````````````````````````````````\n\n*New in skitai version 0.26.7.2*\n\nYou can mount multiple app on Skitai, and maybe need to another\napp is mounted seperatly.\n\n.. code:: python\n\n  skitai.mount (\"/\", \"main.py\")\n  skitai.mount (\"/query\", \"search.py\")\n\nAnd you can access from filename of app from each apps,\n\n.. code:: python\n\n  search_app = was.apps [\"search\"]\n  save_path = search_app.config.save_path\n\n\nURL Building for Resource Accessing\n````````````````````````````````````\n\n*New in skitai version 0.26.7.2*\n\nIf you mount multiple apps like this,\n\n.. code:: python\n\n  skitai.mount (\"/\", \"main.py\")\n  skitai.mount (\"/search\", \"search.py\")\n\nFor building url in `main.py` app from a query function of\n`search.py` app, you should specify app file name with colon.\n\n.. code:: python\n\n  was.urlfor ('search:query', \"Your Name\") # returned '/search/query?q=Your%20Name'\n\nAnd this is exactly same as,\n\n  was.apps [\"search\"].build_url (\"query\", \"Your Name\")\n\nBut this is only functioning between apps are mounted\nwithin same host.\n\n\nCustom Error Handling\n``````````````````````````````````````````\n\n*New in skitai version 0.26.7*\n\n.. code:: python\n\n  @app.default_error_handler\n  def default_error_handler (was, error):\n    return \"<h1>{code} {message}</h1>\".format (**error)\n\nOr you can respond with JSON only.\n\n.. code:: python\n\n  @app.error_handler (404)\n  def not_found (was, error):\n    return \"<h1>{code} {message}</h1>\".format (**error)\n\n- code: error code\n- message: error message\n- detail: error detail\n- mode: debug or normal\n- debug: debug info\n- time: time when error occured\n- url: request url\n- software: server name and version\n- traceback: available only if app.debug = True or None\n\nNote that custom error templates can not be used before\nrouting to the app.\n\n\nCommunication with Event\n``````````````````````````\n\n*New in skitai version 0.26.10*\n*Availabe only on Python 3.5+*\n\n'was' can work as an event bus using app.on_broadcast ()\n- was.broadcast () pair. Let's assume that an users.py app\nhandle only user data, and another photo.py app handle only\nphotos of users.\n\n.. code:: python\n\n  skitai.mount ('/users', 'users.py')\n  skitai.mount ('/photos', 'photos.py')\n\nIf a user update own profile, sometimes photo information\nshould be updated.\n\nAt photos.py, you can prepare for listening to 'user:data-added'\nevent and this event will be emited from 'was'.\n\n.. code:: python\n\n  @app.on_broadcast ('user:data-added')\n  def refresh_user_cache (was, userid):\n    was.sqlite3 ('@photodb').execute ('update ...').wait ()\n\nand uses.py, you just emit 'user:data-added' event to 'was'.\n\n.. code:: python\n\n  @app.route ('/users', methods = [\"PATCH\"])\n  def users (was):\n    args = was.request.json ()\n    was.sqlite3 ('@userdb').execute ('update ...').wait ()\n\n    # broadcasting event to all mounted apps\n    was.broadcast ('user:data-added', args ['userid'])\n\n    return was.response (\n      \"200 OK\",\n      json.dumps ({}),\n      [(\"Content-Type\", \"application/json\")]\n    )\n\nIf resource always broadcasts event without args, use\n`broadcast_after` decorator.\n\n.. code:: python\n\n  @app.broadcast_after ('some-event')\n  def users (was):\n    args = was.request.json ()\n    was.sqlite3 ('@userdb').execute ('update ...').wait ()\n\nNote that this decorator cannot be routed by app.route ().\n\n**CAUTION**: Do not use request specific variables - like request,\ncookie, session and etc in event handler.\n\n\nCORS (Cross Origin Resource Sharing) and Preflight\n-----------------------------------------------------\n\nFor allowing CORS, you should do 2 things:\n\n- set app.access_control_allow_origin\n- allow OPTIONS methods for routing\n\n.. code:: python\n\n  app = Atila (__name__)\n  app.access_control_allow_origin = [\"*\"]\n  # OR specific origins\n  app.access_control_allow_origin = [\"http://www.skitai.com:5001\"]\n  app.access_control_max_age = 3600\n\n  @app.route (\"/post\", methods = [\"POST\", \"OPTIONS\"])\n  def post (was):\n    args = was.request.json ()\n    return was.jstream ({...})\n\n\nIf you want function specific CORS,\n\n.. code:: python\n\n  app = Atila (__name__)\n\n  @app.route (\n   \"/post\", methods = [\"POST\", \"OPTIONS\"],\n   access_control_allow_origin = [\"http://www.skitai.com:5001\"],\n   access_control_max_age = 3600\n  )\n  def post (was):\n    args = was.request.json ()\n    return was.jstream ({...})\n\n\nWWW-Authenticate\n-------------------\n\n*Changed in version 0.15.21*\n\n  - removed app.user and app.password\n  - add app.users object has get(username) methods like dictionary\n\nAtila provide simple authenticate for administration or\nperform access control from other system's call.\n\nAuthentication On Specific Methods\n`````````````````````````````````````````\n\nOtherwise you can make some routes requirigng authorization\nlike this:\n\n.. code:: python\n\n  @app.route (\"/hello/<name>\", authenticate = \"digest\")\n  def hello (was, name = \"Hans Roh\"):\n    return \"Hello, %s\" % name\n\nOr you can use @app.authorization_required decorator.\n\n.. code:: python\n\n  @app.route (\"/hello/<name>\")\n  @app.authorization_required (\"digest\")\n  def hello (was, name = \"Hans Roh\"):\n    return \"Hello, %s\" % name\n\nAvailable authorization methods are basic, digest and bearer.\n\n\nPassword Provider\n````````````````````\n\nYou can provide password and user information getter by 2 ways.\n\nFirst, users object\n\n.. code:: python\n\n  # users object shoukd have get(username) method\n  app.users = {\"hansroh\": (\"1234\", False)}\n\nSecond, use decorator\n\n.. code:: python\n\n  @app.authorization_handler\n  def auth_handler (was, username):\n    ...\n    return (\"1234\", False)\n\nThe return object can be:\n\n  - (str password, boolean encrypted, obj userinfo)\n  - (str password, boolean encrypted)\n  - str password\n  - None if authorization failed\n\nIf you use encrypted password, you should use digest authorization\nand password should encrypt by this way:\n\n.. code:: python\n\n  from hashlib import md5\n\n  encrypted_password = md5 (\n    (\"%s:%s:%s\" % (username, realm, password)).encode (\"utf8\")\n  ).hexdigest ()\n\n\nIf authorization is successful, app can access username and userinfo\nvi was.request.user.\n\n  - was.request.user.name\n  - was.request.user.realm\n  - was.request.user.info\n\nIf your server run with SSL, you can use app.authorization = \"basic\",\notherwise recommend using \"digest\" for your password safety.\n\nAuthentication On Entire App\n```````````````````````````````\n\nFor your convinient, you can set authorization requirements to app level.\n\n.. code:: python\n\n  app = Atila (__name__)\n\n  app.authenticate = \"digest\"\n  app.realm = \"Partner App Area of mysite.com\"\n  app.users = {\"app\": (\"iamyourpartnerapp\", 0, {'role': 'root'})}\n\n  @app.route (\"/hello/<name>\")\n  def hello (was, name = \"Hans Roh\"):\n    return \"Hello, %s\" % name\n\nIf app.authenticate is set, all routes of app require authorization\n(default is False).\n\n\n(JWT) Bearer Authorization\n--------------------------------------\n\nTo making JWT token, your app need securekey.\n\n.. code:: python\n\n  app.securekey = '5b2c4f18-01fd-4b85-8cfa-01827878562f'\n\n.. code:: python\n\n  was.mkjwt ({\"username\": \"hansroh\", \"exp\": time.time () + 3600, ...})\n  >> eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXV...\n\nNote: was.dejwt (token) is also available.\n\nThen client should add 'Authorization' to API request like,\n\n.. code:: python\n\n  Authorization: Bearer eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXV...\n\nAnd use bearer_handler decorators.\n\n.. code:: python\n\n  @app.bearer_handler\n  def bearer_handler (was, token):\n    # if not JWT token,\n    claims = parse_your_token_yourself (token)\n    # if JWT, just use was.request.JWT\n    claims = was.request.JWT\n    if \"err\" in claims:\n      return claims [\"err\"]\n\n  @app.route (\"/api/v1/predict\")\n  @app.authorization_required (\"bearer\")\n  def predict (was):\n    # now you can use these\n    was.request.user # hansroh\n    was.request.JWT # dict {\"username\": \"hansroh\", \"exp\": 2900...}\n\nFor your convinient, above bearer_handler is registered as\ndefault handler, but you can still override it.\n\nImplementing XMLRPC Service\n-----------------------------\n\nClient Side:\n\n.. code:: python\n\n  import aquests\n\n  stub = aquests.rpc (\"http://127.0.0.1:5000/rpc\")\n  stub.add (10000, 5000)\n  fetchall ()\n\nServer Side:\n\n.. code:: python\n\n  @app.route (\"/add\")\n  def index (was, num1, num2):\n    return num1 + num2\n\nIs there nothing to diffrence? Yes. Atila app methods are also\nused for XMLRPC service if return values are XMLRPC dumpable.\n\n\nImplementing gRPC Service\n-----------------------------\n\nClient Side:\n\n.. code:: python\n\n  import aquests\n  import route_guide_pb2\n\n  stub = aquests.grpc (\"http://127.0.0.1:5000/routeguide.RouteGuide\")\n  point = route_guide_pb2.Point (latitude=409146138, longitude=-746188906)\n  stub.GetFeature (point)\n  aquests.fetchall ()\n\nServer Side:\n\n.. code:: python\n\n  import route_guide_pb2\n\n  def get_feature (feature_db, point):\n    for feature in feature_db:\n      if feature.location == point:\n        return feature\n    return None\n\n  @app.route (\"/GetFeature\")\n  def GetFeature (was, point):\n    feature = get_feature(db, point)\n    if feature is None:\n      return route_guide_pb2.Feature(name=\"\", location=point)\n    else:\n      return feature\n\n  if __name__ == \"__main__\":\n\n  skitai.mount = ('/routeguide.RouteGuide', app)\n  skitai.urn ()\n\n\nFor an example, here's my tfserver_ for Tensor Flow Model Server.\n\nFor more about gRPC and route_guide_pb2, go to `gRPC Basics - Python`_.\n\nNote: I think I don't understand about gRPC's stream request and\nresponse. Does it means chatting style? Why does data stream has\ninterval like GPS data be handled as stream type? If it is chat style\nstream, is it more efficient that use proto buffer on Websocket protocol?\nIn this case, it is even possible collaborating between multiple gRPC\nclients.\n\n.. _`gRPC Basics - Python`: http://www.grpc.io/docs/tutorials/basic/python.html\n.. _tfserver: https://pypi.python.org/pypi/tfserver\n\n\nLogging and Traceback\n------------------------\n\n.. code:: python\n\n  @app.route (\"/\")\n  def sum ():\n    was.log (\"called index\", \"info\")\n    try:\n      ...\n    except:\n      was.log (\"exception occured\", \"error\")\n      was.traceback ()\n    was.log (\"done index\", \"info\")\n\nNote inspite of you do not handle exception, all app exceptions will\nbe logged automatically by Atila. And it includes app importing and\nreloading exceptions.\n\n- was.log (msg, category = \"info\")\n- was.traceback (id = \"\") # id is used as fast searching log line\n  for debug, if not given, id will be *Global transaction ID/Local\n  transaction ID*\n\n\nExposing API Specification\n-----------------------------------------\n\nFor debugging and helping to write API specification, Atila\nexpose all specification of each resources.\n\n.. code:: python\n\n  @app.route (\"/isitok/<code>/<type>\", methods = [\"GET\", \"POST\", \"PATCH\", \"OPTIONS\"])\n  def isitok (was, code, type):\n    return was.API (result = \"ok\")\n\nThat will return,\n\n.. code:: python\n\n  {\"result\": \"ok\"}\n\nIf you set like this,\n\n.. code:: python\n\n  app.expose_spec = True\n\nThen will be returned with spec,\n\n.. code:: python\n\n  {\n    \"result\": \"ok\",\n    \"__spec__\": {\n        'id': 'isitok',\n        'routeopt': {\n            'methods': [\"GET\", \"POST\", \"PATCH\", \"OPTIONS\"],\n            'route': '/isitok/<code>/<type>',\n            'args': ['code', 'type'],\n            'keywords': None,\n            'urlargs': 2,\n            'mntopt': {\n                'module_name': 'services.v1.apis',\n                'point': '/v1/apis'\n            }\n        },\n        'auth_requirements': [],\n        'parameter_requirements': {},\n        'doc': None,\n        'current_request': {\n            'http_method': 'GET',\n            'http_version': '1.1',\n            'uri': '/v1/apis/isitok'\n        }\n     }\n  }\n\nNote: This will only work at your local machine (IP address\nstarts with 127.0.0.).\n\nApp Testing\n---------------------------\n\nFor automated test, Atila provide test_client (). Test client\nwill just emulate client-server communication.\n\nmyapp.py is:\n\n.. code:: python\n\n  app = Atila (__name__)\n\n  @app.route (\"/\")\n  def index (was):\n    return \"<h1>something</h1>\"\n\n  @app.route (\"/apis/pets/<int:id>\")\n  def pets (was, id):\n    return was.API ({\"id\": id, \"kind\": \"dog\", \"name\": \"Monk\"})\n\n  if __name__ == \"__main__\":\n    skitai.mount (\"/\", app)\n    skitai.run (port = 5000)\n\nIf you run unittest with pytest, your test script is like this.\n\n.. code:: python\n\n  def test_myapp ():\n    from myapp import app\n\n    with app.test_client (\"/\", approot = \".\") as cli:\n      # html request\n      resp = cli.get (\"/\")\n      assert \"something\" in resp.text\n\n      # api call\n      stub = cli.api ()\n      resp = stub.apis.pets (45).get ()\n      assert resp.data [\"id\"] == 45\n\n      resp = stub.apis.pets (100).get ()\n      assert resp.data [\"id\"] == 100\n\nNow run pytest.\n\nAbove code works fine if your app is composed with single\nfile. If your app has sub modules, app will raise relative\nimport related error.\n\n..code:: python\n\n  import skitai\n  import atila\n\n  def test_myapp ():\n    with skitai.preference () as pref:\n      app = atila.load (\"./mayapp/app.py\", pref)\n\nIf your app is located as your module's export/skitai/__export__.py,\n\n..code:: python\n\n  import your_module\n  app = atila.load (your_module, pref)\n\nNow, you are ready to test.\n\nNote: Internal requests like was.get, was.post, was.jsonrpc\nand database engine operations will work with synchronous\nmode and may will be slow.\n\n\n\nVueJS with Skito-Atila\n==========================\n\nWithout Module Bundlers\n---------------------------------\n\nI recently wrote about `Single File Component Based Website`_.\n\nIt is based on `FranckFreiburger/http-vue-loader`_ and I made\nsome examplary templates.\n\n.. _`Single File Component Based Website`: https://gitlab.com/hansroh/http-sfc\n.. _`FranckFreiburger/http-vue-loader`: https://github.com/FranckFreiburger/http-vue-loader\n\n\n\nWith Bundlers\n-------------------------\n\nI prefer to build VueJS as frontend app and Atila as backend.\n\nBasic project directory stucture is,\n\nproject root\n\n- frontend (vue project)\n\n  * <dist>\n  * <node_modules>\n  * <src>\n  * <public>\n  * package.json\n  * vue.config.js\n  * ...\n\n- backend\n\n  * <services>\n  * serve.py\n\nThe core line sof serve.py,\n\n.. code:: python\n\n  from atila import Atila\n  import skitai\n  import os\n  import sys\n  from services import api\n\n  app = Atila (__name__)\n  app.mount (\"/api/v1\", api) # for backend API service\n\n  @app.route (\"/<path:path>\")\n  def vapp (was, path = None):\n      return was.File (skitai.joinpath (\"../frontend\", \"dist\", \"index.html\"), \"text/html\")\n\n  if __name__ == \"__main__\":\n      with skitai.preference () as pref:\n        pref.securekey = None\n        pref.max_client_body_size = 2 << 32\n        pref.access_control_allow_origin = [\"127.0.0.1:5000\"]\n\n        if \"---production\" not in sys.argv:\n            pref.debug = True\n            pref.use_reloader = True\n            pref.access_control_allow_origin.append (\"127.0.0.1:8080\")\n\n        skitai.mount (\"/\", app)\n        skitai.mount (\"/\", \"../frontend/dist\", pref = pref)\n      skitai.run (name = \"myapp\", port = 5000)\n\nThis skitai starting script do these things,\n\n- If requested URL is one of atila routes, then routed to it\n- Otherwise all URL is routed to vue SPA (dist/index.html)\n- All static root mounted to frontend/dist directory\n  for service compiled js and css by webpack\n\nYou can develop vue app by,\n\n.. code:: bash\n\n  npm run serve\n  # generally use port 8080\n\nAnd Atila app developing by,\n\n.. code:: bash\n\n  python3 ../backend/serve.py\n  # use port 5000\n\nFinally,\n\n.. code:: bash\n\n  npm run build\n  python3 ../backend/serve.py\n\n\nIf you interest about thi stuff, you can have reference_\nwhich I personally build as bolier-plate. But it is just planning stage.\n\n.. _reference: https://gitlab.com/hansroh/skito-vue\n\n\nWorking With Jinja2 Template Engine\n==============================================================\n\nIf you want to use Jinja2 template engine, install first.\n\n.. code:: bash\n\n  pip3 install -U jinja2\n\nAlthough You can use any template engine, Skitai provides was.render()\nwhich uses Jinja2_ template engine. For providing arguments to Jinja2,\nuse dictionary or keyword arguments.\n\n.. code:: python\n\n  return was.render (\"index.html\", choice = 2, product = \"Apples\")\n\n  #is same with:\n\n  return was.render (\"index.html\", {\"choice\": 2, \"product\": \"Apples\"})\n\n  #BUT CAN'T:\n\n  return was.render (\"index.html\", {\"choice\": 2}, product = \"Apples\")\n\nDirectory structure sould be:\n\n- /project_home/app.py\n- /project_home/templates/index.html\n\nWithin template, you can access `was` and aliases for your convinient.\n\n- was\n- app: alias for was.app which handling request\n- request: alias for was.request\n- response: alias for was.response\n- context: namespace for given keyword arguments (or dictionary keys)\n\nNote that these names cannot ne used as context variable name.\n\nAlso available registered with @app.template_global decorator and\ngiven keyword arguments (or dictionary keys).\n\n.. code:: html\n\n  {{ request.cookie.username }} choices item {{ request.ARGS.get (\"choice\", \"N/A\") }}.\n\n  <a href=\"{{ was.urlfor ('checkout', context.choice) }}\">Proceed</a>\n\nAlso 'was.g' is can be useful in case threr're lots\nof render parameters.\n\n.. code:: python\n\n  was.g.product = \"Apple\"\n  was.g.howmany = 10\n\n  return was.render (\"index.html\")\n\nAnd at jinja2 template,\n\n.. code:: html\n\n  Checkout for {{ was.g.howmany }} {{ was.g.product }}{{ was.g.howmany > 1 and \"s\" or \"\"}}\n\n\nIf you want modify Jinja2 envrionment, can through\nwas.app.jinja_env object.\n\n.. code:: python\n\n  def generate_form_token ():\n    ...\n\n  was.app.jinja_env.globals['form_token'] = generate_form_token\n\nAnd this is same as,\n\n.. code:: python\n\n  @app.template_global ('form_token')\n  def generate_form_token ():\n    ...\n\n\n*New in skitai version 0.15.16*\n\nAdded new app.jinja_overlay () for easy calling\napp.jinja_env.overlay ().\n\nRecently JS HTML renderers like Vue.js, React.js\nhave confilicts  with default jinja mustache variable.\nIn this case you mightbe need change it.\n\n.. code:: python\n\n  app = Atila (__name__)\n  app.debug = True\n  app.use_reloader = True\n  app.jinja_overlay (\n    variable_start_string = \"{{\",\n    variable_end_string = \"}}\",\n    block_start_string = \"{%\",\n    block_end_string = \"%}\",\n    comment_start_string = \"{#\",\n    comment_end_string = \"#}\",\n    line_statement_prefix = \"%\",\n    line_comment_prefix = \"%%\",\n    **kargs # Jinja2 Environment arguments\n  )\n\nTo add Jinja2 extensions,\n\n.. code:: python\n\n  app.add_jinja_ext ('jinja2.ext.i18n')\n\nCurrently, Atila use \"jinja2.ext.do\", \"jinja2.ext.loopcontrols\" defaultly.\n\nIf you want remove extensions,\n\n.. code:: python\n\n  app.jinja_overlay (extensions = [])\n\n\n.. _Jinja2: http://jinja.pocoo.org/\n.. _`Vue.js`: https://vuejs.org/\n\n\nUsing Skitai Async Requests Services Working With Jinja2 Template\n---------------------------------------------------------------------------\nIf you want to use Jinja2 template engine, install first.\n\n.. code:: bash\n\n  pip3 install -U jinja2\n\nBasic usage is here_.\n\n.. _here: https://pypi.org/project/skitai/#skitai-was-services\n\nAsync request's benefit will be maximied at your view template\nrather than your controller. At controller, you just fire your\nrequests and get responses at your template.\n\n.. code:: python\n\n  @app.route (\"/\")\n  @app.login_required\n  def intro (was):\n    was.g.aa = was.get (\"https://example.com/blur/blur\")\n    was.g.bb = was.get (\"https://example.com/blur/blur/more-blur\")\n    return was.render ('template.html')\n\nYour template,\n\n.. code:: html\n\n  {% set response = was.g.aa.dispatch () %}\n  {% if response.status == 3 %}\n    {{ was.response.throw (\"500 Internal Server Error\") }}\n  {% endif %}\n\n  {% if response.status_code == 200 %}\n    {% for each in response.data %}\n      ...\n    {% endfor %}\n  {% endif %}\n\n*Available only with Atila*\n\nShorter version is for dispatch and throw HTTP error,\n\n.. code:: html\n\n  {% set response = was.g.aa.dispatch_or_throw (\"500 Internal Server Error\") %}\n\n\nRegistering Global Template Function\n-------------------------------------------------------------\n\n*New in skitai version 0.26.16*\n\ntemplate_global decorator makes a function possible to use\nin your template,\n\n.. code:: python\n\n  @app.template_global (\"test_global\")\n  def test (was):\n    return \", \".join.(was.request.args.keys ())\n\nAt template,\n\n.. code:: html\n\n  {{ test_global () }}\n\nNote that all template global function's first parameter\nshould be *was*. But when calling, you SHOULDN't give *was*.\n\n\nRegistering Jinja2 Filter\n--------------------------------------------------------------\n\n*New in skitai version 0.26.16*\n\ntemplate_filter decorator makes a function possible\nto use in your template,\n\n.. code:: python\n\n  @app.template_filter (\"reverse\")\n  def reverse_filter (s):\n    return s [::-1]\n\nAt template,\n\n.. code:: html\n\n  {{ \"Hello\" | reverse }}\n\n\nCustom Error Template\n--------------------------------------------------------------\n\n*New in skitai version 0.26.7*\n\n.. code:: python\n\n  @app.default_error_handler\n  def default_error_handler (was, error):\n    return was.render ('default.htm', error = error)\n\n  @app.error_handler (404)\n  def not_found (was, error):\n    return was.render ('404.htm', error = error)\n\nTemplate file 404.html is like this:\n\n.. code:: html\n\n  <h1>{{ error.code }} {{ error.message }}</h1>\n  <p>{{ error.detail }}</p>\n  <hr>\n  <div>URL: {{ error.url }}</div>\n  <div>Time: {{ error.time }}</div>\n\nNote that custom error templates can not be used before\nrouting to the app.\n\n\nWorking With Chameleon Template Engine\n==============================================================\n\nChameleon_ is an beautiful HTML/XML template engine.\n\nFor using this engine you install first.\n\n.. code:: bash\n\n    pip3 install -U chameleon\n\nIf you save Chameleon template with '.pt' or '.ptal'\nextensions at templates directory, Atila will render\nthis template with Chameleon.\n\n.. _Chameleon: : https://pypi.org/project/Chameleon/\n\n\nWorking With Django\n===========================================\n\n*New in skitai version 0.26.15*\n\nI barely use Django, but recently I have opportunity using\nDjango and it is very fantastic and especially impressive\nto Django Admin System.\n\nHere are some examples collaborating with Djnago and Atila.\n\nBefore it begin, you should mount Django app,\n\n.. code:: python\n\n  # mount django admin\n  with skitai.preference () as pref:\n    pref.use_reloader = True\n    pref.use_debug = True\n    # '/' mapped with django.admin in urls.py\n    skitai.mount (\"/admin\", 'django/wsgi.py', 'application', pref)\n\n  # mount main app\n  with skitai.preference () as pref:\n    pref.use_reloader = True\n    pref.use_debug = True\n    skitai.mount ('/', 'app.py', pref = pref)\n\n  skitai.run ()\n\nWhen Django app is mounted, these will be processed.\n\n1. add django project root path will be added to sys.path\n2. app is mounted\n3. database alias (@mydjangoapp) will be created as\n   base name of django project root\n\nUsing Django Models\n------------------------------------\n\nYou can use also Django models without mount app.\n\nFirst of all, you should specify django setting with\nalias for django database engine.\n\n.. code:: python\n\n  skitai.alias (\"@django\", skitai.DJANGO, \"myapp/settings.py\")\n\nThen call django.setup ()  and you can use your models,\n\n.. code:: python\n\n  import django\n  django.setup () # should call\n  from mydjangoapp.photos import models\n\n  @app,route ('/django/hello')\n  def django_hello (was):\n    models.Photo.objects.create (user='Hans Roh', title = 'My Photo')\n    result = models.Photo.filter (user='hansroh').order_by ('-create_at')\n\nYou can use Django Query Set as SQL generator for\nSkitai's asynchronous query execution. But it has\nsome limitations.\n\n- just vaild only select query and prefetch_related ()\n- effetive only to PostgreSQL and SQLite3 (but SQLite3\n  dose not support asynchronous execution, so it is practically meaningless)\n\n.. code:: python\n\n  from mydjangoapp.photos import models\n\n  @app,route ('/hello')\n  def django_hello (was):\n    query = models.Photo.objects.filter (topic=1).order_by ('title')\n    return was.jstream (was.sqlite3 (\"@entity\").execute (query).dispatch ().data, 'data')\n\n\nHow To\n================\n\nResponse All Errors As JSON\n--------------------------------------\n\n.. code:: python\n\n  @app.default_error_handler\n  def default_error_handler (was, error):\n    code = error [\"errno\"] or str (error [\"code\"]) + '00'\n    return was.Fault (\n      error [\"message\"].lower (), code, None,\n      error [\"detail\"], exc_info = error [\"traceback\"]\n    )\n\n\nLinks\n======\n\n- `GitLab Repository`_\n- Bug Report: `GitLab issues`_\n\n.. _`GitLab Repository`: https://gitlab.com/hansroh/atila\n.. _`GitLab issues`: https://gitlab.com/hansroh/atila/issues\n\n\nChange Log\n============\n\n- 0.8  (Feb, 2020)\n\n  - add was.Static\n  - add *400 Not My Fault* with assert\n  - add notags and safes arguments to @app.require\n  - now, csrf token uses cookie not session and kept with browser\n  - add remove_csrf ()\n  - fix corequest cache sync\n  - update, config.MINIFY_HTML = None (default) | 'strip' | 'minify'\n  - add @app.csrf_verification_required\n  - add '@app.clarify_permission' and '@app.clarify_login' decorators\n  - add \\_\\_setup\\_\\_ hook for service packages.\\_\\_init\\_\\_.py\n\n- 0.7 (Dec, 2019)\n\n  - fix <path> type routing\n  - change URL build alias from was.urlspec ()\n  - change URL build alias from was.ab () to was.urlfor ()\n  - add alias was.urlpatch () for was.partial () for clarity\n  - add session.impending () and session.use_time ()\n  - change default options for Jinja2\n  - change session key name\n  - fix session expireation\n  - add extend param to session.mount ()\n  - add was.render_or_API ()\n  - add was.request.acceptables and was.request.acceptable (media)\n  - fix @app.fix testpass_required when reloading\n  - change session.mount spec\n  - fix multiple mount bug related `enable_namespace`\n  - fix websocket bug related `enable_namespace`\n  - `app.auto_mount` was deprecated\n  - default value of  `app.enable_namespace` has been\n    from False to True. ACTION REQUIRED, lower version\n    incompatible\n\n- 0.6 (Oct, 2019)\n\n  - fix query string exception handling\n  - readd Chameleon template engine chapter to README\n  - test on PyPy\n\n- 0.5 (Sep, 2019)\n\n  - add app example\n  - update requirements\n\n- 0.4 (Aug, 2019)\n\n  - now, modules within \\_\\_mount\\_\\_ are reloadable\n  - deprecated @app.test_params, use @app.require\n  - deprecated was.Future and was.Futures, it doesn't need.\n\n- 0.3 (Mar 13, 2019)\n\n  - remove proxing django route\n  - remove login service with django\n  - remove django model signal redirecting\n  - add @app.require\n  - change mount handler: def mount (app) =>\n    def __mount__ (app) but lower version compatible\n  - make available @app.route (\"\")\n  - add was.proxypass (alias, path, timeout = 3)\n  - add special pre-defined URL parameter value: me, notme, new\n  - add parameter validation, now response code 400,\n    if validatiion if failed\n  - fix implicit routing\n  - add conditional permission control\n\n- 0.2 (Feb 18, 2019)\n\n  - fix implicit routing for root\n  - remove jinja2 from requirements\n  - add app.websocket_send ()\n  - fix Futures respinse bugs\n  - add was.API (), was.Fault (), was.File and\n    was.Futures ()\n\n- 0.1 (Jan 17, 2019)\n\n  - was.promise () has been deprecated, use was.Futures ()\n  - add interval based maintain jobs executor\n  - change name from app.storage to app.store\n  - add default_bearer_handler\n  - fix routing bugs related fancy URL\n  - add was.request.URL, DEFAULT, FORM (former was.request.form ()),\n    JSON (former was.request.json ()), DATA (former was.request.data),\n    ARGS (former was.request.args)\n  - add @app.test_param (required = None, ints = None, floats = None)\n  - project has been seperated from skitai and rename from\n    saddle to atila, because saddle project is already exist on PYPI\n", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.python.org/pypi/atila", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/hansroh/atila", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "atila", "package_url": "https://pypi.org/project/atila/", "platform": "posix", "project_url": "https://pypi.org/project/atila/", "project_urls": {"Download": "https://pypi.python.org/pypi/atila", "Homepage": "https://gitlab.com/hansroh/atila"}, "release_url": "https://pypi.org/project/atila/0.8.3.11/", "requires_dist": null, "requires_python": "", "summary": "Atila Framework", "version": "0.8.3.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"atila\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Atila</a></h2>\n<p><em>Atila</em> is simple and minimal framework integrated with <a href=\"https://pypi.org/project/skitai/\" rel=\"nofollow\">Skitai App Engine</a>.\nIt is the easiest way to make backend API services.</p>\n<pre><span class=\"c1\"># serve.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">atila</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">atila</span><span class=\"o\">.</span><span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Hello, World\"</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__mame__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n  <span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">(</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n</pre>\n<p>And run,</p>\n<pre>python3 serve.py\n</pre>\n<p>And you can see <cite>Hello, World</cite> at <cite>http://localhost:5000</cite>.</p>\n<p>Here\u2019s a more practical example:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/&lt;int:uid&gt;/photos\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">])</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_required</span> <span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">photos</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">uid</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">DATA</span><span class=\"p\">):</span>\n  <span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">uid</span> <span class=\"o\">==</span> <span class=\"s2\">\"me\"</span> <span class=\"ow\">and</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">JWT</span> <span class=\"p\">[</span><span class=\"s2\">\"uid\"</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">uid</span>\n\n  <span class=\"k\">with</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"s2\">\"@mydb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">db</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">\"GET\"</span><span class=\"p\">:</span>\n      <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">select</span> <span class=\"p\">(</span><span class=\"s2\">\"photo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">uid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fetch</span> <span class=\"p\">()</span>\n      <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">rows</span><span class=\"p\">)</span> <span class=\"c1\"># [ {id: 1, ...}, ... ]</span>\n\n    <span class=\"k\">elif</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">\"DELETE\"</span><span class=\"p\">:</span>\n      <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"p\">(</span><span class=\"s2\">\"photo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">uid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">commit</span> <span class=\"p\">()</span>\n      <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"s2\">\"205 No Content\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">elif</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">:</span>\n      <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">DATA</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"title\"</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"400 Bad Request\"</span><span class=\"p\">,</span> <span class=\"s2\">\"title required\"</span><span class=\"p\">)</span>\n      <span class=\"n\">DATA</span> <span class=\"p\">[</span><span class=\"s2\">\"uid\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">uid</span>\n      <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"s2\">\"photo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">DATA</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">returning</span> <span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">one</span> <span class=\"p\">()</span>\n      <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"s2\">\"201 Created\"</span><span class=\"p\">,</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#atila\" id=\"id1\" rel=\"nofollow\">Atila</a></li>\n<li><a href=\"#important-notice\" id=\"id2\" rel=\"nofollow\">Important Notice</a></li>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#core-app-options\" id=\"id4\" rel=\"nofollow\">Core App Options</a></li>\n<li><a href=\"#default-app-configuration\" id=\"id5\" rel=\"nofollow\">Default App Configuration</a></li>\n<li><a href=\"#app-examples\" id=\"id6\" rel=\"nofollow\">App Examples</a></li>\n<li><a href=\"#atila-with-skitai-app-engine\" id=\"id7\" rel=\"nofollow\">Atila with Skitai App Engine</a><ul>\n<li><a href=\"#simple-app\" id=\"id8\" rel=\"nofollow\">Simple App</a></li>\n<li><a href=\"#resource-structure-for-larger-app\" id=\"id9\" rel=\"nofollow\">Resource Structure For Larger App</a></li>\n</ul>\n</li>\n<li><a href=\"#request-hanlding-with-atila\" id=\"id10\" rel=\"nofollow\">Request Hanlding with Atila</a><ul>\n<li><a href=\"#runtime-app-preference\" id=\"id11\" rel=\"nofollow\">Runtime App Preference</a><ul>\n<li><a href=\"#more-about-atila-app-initialization\" id=\"id12\" rel=\"nofollow\">More About Atila App Initialization</a></li>\n</ul>\n</li>\n<li><a href=\"#access-atila-app\" id=\"id13\" rel=\"nofollow\">Access Atila App</a></li>\n<li><a href=\"#debugging-and-reloading-app\" id=\"id14\" rel=\"nofollow\">Debugging and Reloading App</a><ul>\n<li><a href=\"#kill-switch\" id=\"id15\" rel=\"nofollow\">Kill Switch</a></li>\n</ul>\n</li>\n<li><a href=\"#routing\" id=\"id16\" rel=\"nofollow\">Routing</a></li>\n<li><a href=\"#request\" id=\"id17\" rel=\"nofollow\">Request</a></li>\n<li><a href=\"#getting-parameters\" id=\"id18\" rel=\"nofollow\">Getting Parameters</a><ul>\n<li><a href=\"#getting-url-parameters\" id=\"id19\" rel=\"nofollow\">Getting URL Parameters</a></li>\n<li><a href=\"#query-string-parameters\" id=\"id20\" rel=\"nofollow\">Query String Parameters</a></li>\n<li><a href=\"#getting-form-json-parameters\" id=\"id21\" rel=\"nofollow\">Getting Form/JSON Parameters</a></li>\n<li><a href=\"#getting-composed-parameters\" id=\"id22\" rel=\"nofollow\">Getting Composed Parameters</a></li>\n<li><a href=\"#testing-parameters\" id=\"id23\" rel=\"nofollow\">Testing Parameters</a></li>\n<li><a href=\"#pre-defined-parameter-values\" id=\"id24\" rel=\"nofollow\">Pre-Defined Parameter Values</a></li>\n<li><a href=\"#make-your-own-rule\" id=\"id25\" rel=\"nofollow\">Make Your Own Rule</a></li>\n</ul>\n</li>\n<li><a href=\"#response\" id=\"id26\" rel=\"nofollow\">Response</a><ul>\n<li><a href=\"#http-exception\" id=\"id27\" rel=\"nofollow\">HTTP Exception</a></li>\n<li><a href=\"#redirecting-to-static-file\" id=\"id28\" rel=\"nofollow\">Redirecting To Static File</a></li>\n<li><a href=\"#file-stream-on-local-file-system\" id=\"id29\" rel=\"nofollow\">File Stream On Local File System</a></li>\n<li><a href=\"#api-response\" id=\"id30\" rel=\"nofollow\">API Response</a></li>\n<li><a href=\"#selective-media-response-by-accept-header\" id=\"id31\" rel=\"nofollow\">Selective Media Response By Accept Header</a></li>\n<li><a href=\"#future-futures-response\" id=\"id32\" rel=\"nofollow\">Future / Futures Response</a></li>\n<li><a href=\"#process-thread-response\" id=\"id33\" rel=\"nofollow\">Process / Thread Response</a></li>\n<li><a href=\"#proxypass-response\" id=\"id34\" rel=\"nofollow\">Proxypass Response</a></li>\n</ul>\n</li>\n<li><a href=\"#mounting-resources-making-simpler-modular-app\" id=\"id35\" rel=\"nofollow\">Mounting Resources: Making Simpler &amp; Modular App</a><ul>\n<li><a href=\"#implicit-mount-services-on-your-app\" id=\"id36\" rel=\"nofollow\">Implicit Mount Services On Your App</a></li>\n<li><a href=\"#mounting-services-with-options\" id=\"id37\" rel=\"nofollow\">Mounting Services With Options</a></li>\n<li><a href=\"#setup-services\" id=\"id38\" rel=\"nofollow\">Setup Services</a></li>\n<li><a href=\"#mounting-package\" id=\"id39\" rel=\"nofollow\">Mounting Package</a></li>\n<li><a href=\"#unmounting-resources\" id=\"id40\" rel=\"nofollow\">Unmounting Resources</a></li>\n<li><a href=\"#more-about-namespace\" id=\"id41\" rel=\"nofollow\">More About Namespace</a></li>\n</ul>\n</li>\n<li><a href=\"#more-about-websocket\" id=\"id42\" rel=\"nofollow\">More About Websocket</a><ul>\n<li><a href=\"#ws-nothread\" id=\"id43\" rel=\"nofollow\">WS_NOTHREAD</a></li>\n<li><a href=\"#ws-session\" id=\"id44\" rel=\"nofollow\">WS_SESSION</a></li>\n</ul>\n</li>\n<li><a href=\"#pushing-message-through-connected-client\" id=\"id45\" rel=\"nofollow\">Pushing Message Through Connected Client</a></li>\n<li><a href=\"#building-url\" id=\"id46\" rel=\"nofollow\">Building URL</a><ul>\n<li><a href=\"#building-url-by-updating-parameters-partially\" id=\"id47\" rel=\"nofollow\">Building URL by Updating Parameters Partially</a></li>\n<li><a href=\"#building-base-url-without-parameters\" id=\"id48\" rel=\"nofollow\">Building Base URL without Parameters</a></li>\n</ul>\n</li>\n<li><a href=\"#access-environment-variables\" id=\"id49\" rel=\"nofollow\">Access Environment Variables</a></li>\n<li><a href=\"#access-cookie\" id=\"id50\" rel=\"nofollow\">Access Cookie</a></li>\n<li><a href=\"#access-session\" id=\"id51\" rel=\"nofollow\">Access Session</a></li>\n<li><a href=\"#messaging-box\" id=\"id52\" rel=\"nofollow\">Messaging Box</a></li>\n<li><a href=\"#named-session-messaging-box\" id=\"id53\" rel=\"nofollow\">Named Session &amp; Messaging Box</a></li>\n<li><a href=\"#file-upload\" id=\"id54\" rel=\"nofollow\">File Upload</a></li>\n<li><a href=\"#using-sql-map-with-sqlphile\" id=\"id55\" rel=\"nofollow\">Using SQL Map with SQLPhile</a></li>\n<li><a href=\"#registering-per-request-calling-functions\" id=\"id56\" rel=\"nofollow\">Registering Per Request Calling Functions</a></li>\n<li><a href=\"#define-autoruns\" id=\"id57\" rel=\"nofollow\">Define Autoruns</a></li>\n<li><a href=\"#define-conditional-prework\" id=\"id58\" rel=\"nofollow\">Define Conditional Prework</a></li>\n<li><a href=\"#inter-process-update-notification-and-consequences-automation\" id=\"id59\" rel=\"nofollow\">Inter Process Update Notification and Consequences Automation</a></li>\n<li><a href=\"#app-lifecycle-hook\" id=\"id60\" rel=\"nofollow\">App Lifecycle Hook</a></li>\n<li><a href=\"#login-and-permission-helper\" id=\"id61\" rel=\"nofollow\">Login and Permission Helper</a><ul>\n<li><a href=\"#conditional-permission-control\" id=\"id62\" rel=\"nofollow\">Conditional Permission Control</a></li>\n<li><a href=\"#testpassing\" id=\"id63\" rel=\"nofollow\">Testpassing</a></li>\n</ul>\n</li>\n<li><a href=\"#cross-site-request-forgery-token-csrf-token\" id=\"id64\" rel=\"nofollow\">Cross Site Request Forgery Token (CSRF Token)</a></li>\n<li><a href=\"#making-one-time-token\" id=\"id65\" rel=\"nofollow\">Making One-Time Token</a></li>\n<li><a href=\"#app-event-handling\" id=\"id66\" rel=\"nofollow\">App Event Handling</a></li>\n<li><a href=\"#app-storage\" id=\"id67\" rel=\"nofollow\">App Storage</a></li>\n<li><a href=\"#inverval-base-app-maintenancing\" id=\"id68\" rel=\"nofollow\">Inverval Base App Maintenancing</a></li>\n<li><a href=\"#creating-and-handling-custom-event\" id=\"id69\" rel=\"nofollow\">Creating and Handling Custom Event</a></li>\n<li><a href=\"#cross-app-communication-accessing-resources\" id=\"id70\" rel=\"nofollow\">Cross App Communication &amp; Accessing Resources</a><ul>\n<li><a href=\"#accessing-app-object-properties\" id=\"id71\" rel=\"nofollow\">Accessing App Object Properties</a></li>\n<li><a href=\"#url-building-for-resource-accessing\" id=\"id72\" rel=\"nofollow\">URL Building for Resource Accessing</a></li>\n<li><a href=\"#custom-error-handling\" id=\"id73\" rel=\"nofollow\">Custom Error Handling</a></li>\n<li><a href=\"#communication-with-event\" id=\"id74\" rel=\"nofollow\">Communication with Event</a></li>\n</ul>\n</li>\n<li><a href=\"#cors-cross-origin-resource-sharing-and-preflight\" id=\"id75\" rel=\"nofollow\">CORS (Cross Origin Resource Sharing) and Preflight</a></li>\n<li><a href=\"#www-authenticate\" id=\"id76\" rel=\"nofollow\">WWW-Authenticate</a><ul>\n<li><a href=\"#authentication-on-specific-methods\" id=\"id77\" rel=\"nofollow\">Authentication On Specific Methods</a></li>\n<li><a href=\"#password-provider\" id=\"id78\" rel=\"nofollow\">Password Provider</a></li>\n<li><a href=\"#authentication-on-entire-app\" id=\"id79\" rel=\"nofollow\">Authentication On Entire App</a></li>\n</ul>\n</li>\n<li><a href=\"#jwt-bearer-authorization\" id=\"id80\" rel=\"nofollow\">(JWT) Bearer Authorization</a></li>\n<li><a href=\"#implementing-xmlrpc-service\" id=\"id81\" rel=\"nofollow\">Implementing XMLRPC Service</a></li>\n<li><a href=\"#implementing-grpc-service\" id=\"id82\" rel=\"nofollow\">Implementing gRPC Service</a></li>\n<li><a href=\"#logging-and-traceback\" id=\"id83\" rel=\"nofollow\">Logging and Traceback</a></li>\n<li><a href=\"#exposing-api-specification\" id=\"id84\" rel=\"nofollow\">Exposing API Specification</a></li>\n<li><a href=\"#app-testing\" id=\"id85\" rel=\"nofollow\">App Testing</a></li>\n</ul>\n</li>\n<li><a href=\"#vuejs-with-skito-atila\" id=\"id86\" rel=\"nofollow\">VueJS with Skito-Atila</a><ul>\n<li><a href=\"#without-module-bundlers\" id=\"id87\" rel=\"nofollow\">Without Module Bundlers</a></li>\n<li><a href=\"#with-bundlers\" id=\"id88\" rel=\"nofollow\">With Bundlers</a></li>\n</ul>\n</li>\n<li><a href=\"#working-with-jinja2-template-engine\" id=\"id89\" rel=\"nofollow\">Working With Jinja2 Template Engine</a><ul>\n<li><a href=\"#using-skitai-async-requests-services-working-with-jinja2-template\" id=\"id90\" rel=\"nofollow\">Using Skitai Async Requests Services Working With Jinja2 Template</a></li>\n<li><a href=\"#registering-global-template-function\" id=\"id91\" rel=\"nofollow\">Registering Global Template Function</a></li>\n<li><a href=\"#registering-jinja2-filter\" id=\"id92\" rel=\"nofollow\">Registering Jinja2 Filter</a></li>\n<li><a href=\"#custom-error-template\" id=\"id93\" rel=\"nofollow\">Custom Error Template</a></li>\n</ul>\n</li>\n<li><a href=\"#working-with-chameleon-template-engine\" id=\"id94\" rel=\"nofollow\">Working With Chameleon Template Engine</a></li>\n<li><a href=\"#working-with-django\" id=\"id95\" rel=\"nofollow\">Working With Django</a><ul>\n<li><a href=\"#using-django-models\" id=\"id96\" rel=\"nofollow\">Using Django Models</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to\" id=\"id97\" rel=\"nofollow\">How To</a></li>\n<li><a href=\"#links\" id=\"id98\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#change-log\" id=\"id99\" rel=\"nofollow\">Change Log</a></li>\n</ul>\n</div>\n</div>\n<div id=\"important-notice\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Important Notice</a></h2>\n<p><em>CAUTION</em>: Atila is base on WSGI but can be run only\nwith <a href=\"https://pypi.org/project/skitai/\" rel=\"nofollow\">Skitai App Engine</a>.</p>\n<p>This means if you make your app with Atila, you have no\nchoice but Skitai as WSGI app server. And Atila\u2019s unique\nand unconventional style may become very hard work to port\nto other framework.</p>\n<p>I am currently enjoying to develop both Skitai and Atila,\nbut no one can expect future.</p>\n<p>So you should think twice before you decide to use this.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Installation</a></h2>\n<p><strong>Requirements</strong></p>\n<p>Python 3.5+\nPyPy3</p>\n<p><strong>Installation</strong></p>\n<p>Atila and other core base dependent libraries is developing on\nsingle milestone, install/upgrade all please. Otherwise it is\nhighly possible to meet some errors.</p>\n<p>With pip</p>\n<pre>pip3 install -U atila\n</pre>\n<p>With git</p>\n<pre>git clone https://gitlab.com/hansroh/atila.git\n<span class=\"nb\">cd</span> atila\npip3 install -e .\n</pre>\n</div>\n<div id=\"core-app-options\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Core App Options</a></h2>\n<p>These are for later quick copying.</p>\n<p><strong>Debug Options</strong></p>\n<ul>\n<li>debug = False</li>\n<li>use_reloader = False</li>\n</ul>\n<p><strong>CORS Options</strong></p>\n<ul>\n<li>access_control_allow_origin = None: list of origin</li>\n<li>access_control_max_age = 0</li>\n</ul>\n<p><strong>Session/Authenticating Options</strong></p>\n<ul>\n<li>authenticate = None: basic | digest | bearer</li>\n<li>securekey = None: string for encrypted session cookie</li>\n<li>session_timeout = None</li>\n</ul>\n<p><strong>Sub Module Mount Options</strong></p>\n<ul>\n<li><p>enable_namespace = True</p>\n<p><em>Default value has been changed in version 0.7: False -&gt; True</em></p>\n<p>If you didn\u2019t use this option with <cite>True</cite> under version 0.7 you\nmay set <cite>False</cite> in version 0.7 for for compatiblity.</p>\n<p>Also DO NOT use this option with <cite>False</cite> if not for compatiblity\nreason.</p>\n</li>\n<li><p>auto_mount</p>\n<p><em>Deprecated in version 0.7</em></p>\n<p>If you call app.mount () or pref.mount (), this option\nwill be disabled automatically. Otherwise Atila try to mount\nautomatically all sub modules has __mount__ ().</p>\n</li>\n</ul>\n</div>\n<div id=\"default-app-configuration\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Default App Configuration</a></h2>\n<p>Below configs are new in version <em>0.8</em>.</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">MINIFY_HTML</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"s1\">'strip'</span> <span class=\"o\">|</span> <span class=\"s1\">'minify'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">JSON_ENCODER</span> <span class=\"o\">=</span> <span class=\"s1\">'utcoffset'</span>\n</pre>\n<p>Note: below version 0.8, JSON_ENCODER works as app.config.JSON_ENCODER = \u2018str\u2019\nwhich is str (datetime) with system time zone. If you migrate to\nabove version 0.8 and you want keep this format, you shoud specify\napp.config.JSON_ENCODER = \u2018str\u2019.</p>\n</div>\n<div id=\"app-examples\">\n<h2><a href=\"#id6\" rel=\"nofollow\">App Examples</a></h2>\n<p>You can simply visit <a href=\"https://gitlab.com/hansroh/atila/tree/master/example\" rel=\"nofollow\">Atila app example</a> for sightseeing.</p>\n</div>\n<div id=\"atila-with-skitai-app-engine\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Atila with Skitai App Engine</a></h2>\n<div id=\"simple-app\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Simple App</a></h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atila</span> <span class=\"kn\">import</span> <span class=\"n\">Atila</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n  <span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n\n  <span class=\"k\">with</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">preference</span> <span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pref</span><span class=\"p\">:</span>\n    <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'./static'</span><span class=\"p\">)</span>\n    <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'app'</span><span class=\"p\">,</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">()</span>\n</pre>\n<p>If atila app exists seprated file:</p>\n<pre><span class=\"c1\"># serve.py</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n  <span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n\n  <span class=\"k\">with</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">preference</span> <span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pref</span><span class=\"p\">:</span>\n    <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'./static'</span><span class=\"p\">)</span>\n    <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'myapp/atila_app.py'</span><span class=\"p\">,</span> <span class=\"n\">pref</span> <span class=\"o\">=</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"resource-structure-for-larger-app\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Resource Structure For Larger App</a></h3>\n<p>If your app is simple, it can be made into single app.py\nand templates and static directory.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atila</span> <span class=\"kn\">import</span> <span class=\"n\">Atila</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n  <span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n\n  <span class=\"k\">with</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">preference</span> <span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pref</span><span class=\"p\">:</span>\n    <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'./static'</span><span class=\"p\">)</span>\n    <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'app'</span><span class=\"p\">,</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">()</span>\n</pre>\n<p>And run,</p>\n<pre>python3 app.py\n</pre>\n<p>But Your app is more bigger, it will be hard to make with single\napp file. Then, you can make services directory to seperate your\napp into several categories.</p>\n<pre>myapp/\n  app.py\n  services/\n  templates/\n  resources/\n  static/\nserve.py\n</pre>\n<p>All sub modules app need, can be placed into services/. services/*.py\nwill be watched for reloading if use_reloader = True.</p>\n<p>You can structuring any ways you like and I like this style:</p>\n<pre>services/views.py\nservices/apis.py\nservices/helpers.py\n</pre>\n<p>All modules to mount to app in services, should have def __mount__ (app).</p>\n<p>For example, views.py is like this,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">helpers</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">__mount__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"index.html\"</span><span class=\"p\">)</span>\n</pre>\n<p>Now you just import app decorable moduels at your app.py,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atila</span> <span class=\"kn\">import</span> <span class=\"n\">Atila</span>\n<span class=\"kn\">from</span> <span class=\"nn\">services</span> <span class=\"kn\">import</span> <span class=\"n\">views</span><span class=\"p\">,</span> <span class=\"n\">apis</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</pre>\n<p>That\u2019s it.</p>\n<p>If app scale is more bigger scale, services can be expanded to sub modules.</p>\n<pre>services/views/index.py, regist.py, search.py, ...\nservices/apis/codemap.py,\nservices/helpers/utils.py, ...\n</pre>\n<p>And import these from app.py,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">services.views</span> <span class=\"kn\">import</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">regist</span><span class=\"p\">,</span> <span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">services.apis</span> <span class=\"kn\">import</span> <span class=\"n\">codemap</span><span class=\"p\">,</span> <span class=\"o\">...</span>\n</pre>\n<p>Some more other informations will be mentioned at <em>Mounting Resources</em>\nsection again.</p>\n<p>Finally, your server.py:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n<span class=\"k\">with</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">preference</span> <span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pref</span><span class=\"p\">:</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'./static'</span><span class=\"p\">)</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'myapp/app.py'</span><span class=\"p\">,</span> <span class=\"s1\">'app'</span><span class=\"p\">,</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n<span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">()</span>\n</pre>\n<p>Also you can add myapp2, \u2026 and mount them.</p>\n</div>\n</div>\n<div id=\"request-hanlding-with-atila\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Request Hanlding with Atila</a></h2>\n<div id=\"runtime-app-preference\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Runtime App Preference</a></h3>\n<p><strong>New in skitai version 0.26</strong></p>\n<p>Usally, your app preference setting is like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atila</span> <span class=\"kn\">import</span> <span class=\"n\">Atila</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"p\">[</span><span class=\"s2\">\"prefA\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"p\">[</span><span class=\"s2\">\"prefB\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</pre>\n<p>Skitai provide runtime preference setting.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n\n<span class=\"k\">with</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">preference</span> <span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pref</span><span class=\"p\">:</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"p\">[</span><span class=\"s2\">\"prefA\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">prefB</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/v1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"app_v1/app.py\"</span><span class=\"p\">,</span> <span class=\"s2\">\"app\"</span><span class=\"p\">,</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n<span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">()</span>\n</pre>\n<p>Above pref\u2019s all properties will be overriden on your app.</p>\n<p>Runtime preference can be used with skitai initializing or\ncomplicated initializing process for your app.</p>\n<p>You can create __init__.py at same directory with app.py. And\nbootstrap () function is needed.</p>\n<p>__init__.py</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n<span class=\"kn\">import</span> <span class=\"nn\">atila</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bootstrap</span> <span class=\"p\">(</span><span class=\"n\">pref</span><span class=\"p\">):</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">register_states</span> <span class=\"p\">(</span><span class=\"s1\">'tbl.test'</span><span class=\"p\">)</span>\n\n  <span class=\"k\">with</span> <span class=\"nb\">open</span> <span class=\"p\">(</span><span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">urlfile</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">urllist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n      <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readline</span> <span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span> <span class=\"p\">()</span>\n      <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n      <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">urllist</span><span class=\"o\">.</span><span class=\"n\">append</span> <span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span> <span class=\"p\">(</span><span class=\"s2\">\"  \"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<div id=\"more-about-atila-app-initialization\">\n<h4><a href=\"#id12\" rel=\"nofollow\">More About Atila App Initialization</a></h4>\n<p><em>Note</em>: There\u2019are two important things for app.__init__.</p>\n<ul>\n<li>add skitai.register_states () if you need state management.\nInter process state sharing objects should be defined before\nrunning Skitai.</li>\n</ul>\n</div>\n</div>\n<div id=\"access-atila-app\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Access Atila App</a></h3>\n<p>You can access all Atila object from was.app.</p>\n<ul>\n<li>was.app.debug</li>\n<li>was.app.use_reloader</li>\n<li>was.app.config # use for custom configuration like</li>\n<li>was.app.config.my_setting = 1</li>\n<li>was.app.securekey</li>\n<li>was.app.session_timeout = None</li>\n<li>was.app.authorization = \u201cdigest\u201d</li>\n<li>was.app.authenticate = False</li>\n<li>was.app.realm = None</li>\n<li>was.app.users = {}</li>\n<li>was.app.jinja_env</li>\n<li>was.app.build_url () is equal to was.urlfor ()</li>\n</ul>\n<p>Currently was.app.config has these properties and you can\nreconfig by setting new value:</p>\n<ul>\n<li>was.app.config.max_post_body_size = 5 * 1024 * 1024</li>\n<li>was.app.config.max_cache_size = 5 * 1024 * 1024</li>\n<li>was.app.config.max_multipart_body_size = 20 * 1024 * 1024</li>\n<li>was.app.config.max_upload_file_size = 20000000</li>\n</ul>\n</div>\n<div id=\"debugging-and-reloading-app\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Debugging and Reloading App</a></h3>\n<p>If debug is True, all errors even server errors is shown on\nboth web browser and console window, otherhwise shown only on console.</p>\n<p>If use_reloader is True, Atila will detect file changes and reload\napp automatically, otherwise app will never be reloaded.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atila</span> <span class=\"kn\">import</span> <span class=\"n\">Atila</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"c1\"># output exception information</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"c1\"># auto realod on file changed</span>\n</pre>\n<div id=\"kill-switch\">\n<h4><a href=\"#id15\" rel=\"nofollow\">Kill Switch</a></h4>\n<p>Please see, <a href=\"https://pypi.org/project/skitai/#run-as-development-mode\" rel=\"nofollow\">\u2013devel</a> and <a href=\"https://pypi.org/project/skitai/#run-as-silent-mode\" rel=\"nofollow\">\u2013silent</a> options of Skitai App Engine.</p>\n</div>\n</div>\n<div id=\"routing\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Routing</a></h3>\n<p>Basic routing is like this:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">)</span>\n</pre>\n<p>For adding some restrictions:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">],</span> <span class=\"n\">content_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"text/xml\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">)</span>\n</pre>\n<p>And you can specifyt multiple routing,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">,</span> <span class=\"n\">mehotd</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">])</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">)</span>\n</pre>\n<p>If method is not GET, Atila will response http error code 405 (Method\nNot Allowed), and content-type is not text/xml, 415 (Unsupported Content Type).</p>\n<p>And here\u2019s a notalble routing rule.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">)</span>\n</pre>\n<p>This app is mounted to \u201c/sub\u201d on skitai, /sub URL is valid but\n\u201c/sub/\u201d will return 404 code.</p>\n<p>On the other hand,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">)</span>\n</pre>\n<p>\u201c/sub\u201d will return 301 code for \u201c/sub/\u201d and \u201c/sub/\u201d is valid URL.</p>\n</div>\n<div id=\"request\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Request</a></h3>\n<p>Reqeust object provides these methods and attributes:</p>\n<ul>\n<li>was.request.method # upper case GET, POST, \u2026</li>\n<li>was.request.command # lower case get, post, \u2026</li>\n<li>was.request.uri</li>\n<li>was.request.version # HTTP Version, 1.0, 1.1, 2.0, 3.0</li>\n<li>was.request.scheme # http or https</li>\n<li>was.request.headers # case insensitive dictioanry</li>\n<li>was.request.body # bytes object</li>\n<li>was.request.args # dictionary merged with url, query string,\nform data and JSON</li>\n<li>was.request.routed # routed function</li>\n<li>was.request.routable # {\u2018methods\u2019: [\u201cPOST\u201d, \u201cOPTIONS\u201d],\n\u2018content_types\u2019: [\u201ctext/xml\u201d], \u2018options\u2019: {\u2026},  \u2018mntopt\u2019: {\u2026}}</li>\n<li>was.request.acceptables # {\u2018text/html\u2019: {\u2018q\u2019: \u20180.9\u2019}}</li>\n<li>was.request.acceptable (media) # check if acceptable media type\nby given media</li>\n<li>was.request.split_uri () # (script, param, querystring, fragment)</li>\n<li>was.request.json () # decode request body from JSON</li>\n<li>was.request.form () # decode request body to dict\nif content-type is form data</li>\n<li>was.request.dict () # decode request body as dict\nif content-type is compatible with dict - form data or JSON</li>\n<li>was.request.get_header (\u201ccontent-type\u201d) # case insensitive</li>\n<li>was.request.get_headers () # retrun header all list</li>\n<li>was.request.get_body ()</li>\n<li>was.request.get_scheme () # http or https</li>\n<li>was.request.get_remote_addr ()</li>\n<li>was.request.get_user_agent ()</li>\n<li>was.request.get_content_type ()</li>\n<li>was.request.get_main_type ()</li>\n<li>was.request.get_sub_type ()</li>\n</ul>\n</div>\n<div id=\"getting-parameters\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Getting Parameters</a></h3>\n<p>Atila parameters are comceptually seperated 3 groups: URL, query\nstring and body.</p>\n<p>Below explaination may be a bit complicated but it is enough to\nremember 3 things:</p>\n<p>1. Atila resource parameters can be defined as function arguments\nand use theses native Python function arguments.</p>\n<ol>\n<li>Also you can access parameter groups by origin:</li>\n</ol>\n<blockquote>\n<ul>\n<li>was.request.DEFAULT: default arguments of your resource</li>\n<li>was.request.URL: url query string</li>\n<li>was.request.FORM</li>\n<li>was.request.JSON</li>\n<li>was.request.DATA: automatically choosen one of was.request.FORM\nor was.request.JSON by content-type header of request</li>\n<li>was.request.ARGS: eventaully was.request.ARGS contains all\nparameters of all origins including was.request.DEFAULT</li>\n</ul>\n</blockquote>\n<div id=\"getting-url-parameters\">\n<h4><a href=\"#id19\" rel=\"nofollow\">Getting URL Parameters</a></h4>\n<p>URL Parameters should be arguments of resource.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/episode/&lt;int:id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">episode</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"nb\">id</span>\n<span class=\"c1\"># http://127.0.0.1:5000/episode</span>\n</pre>\n<p>for fancy url building, available param types are:</p>\n<ul>\n<li>int: integers and INCLUDING \u2018me\u2019, \u2018notme\u2019 and \u2018new\u2019</li>\n<li>path: /download/&lt;int:major_ver&gt;/&lt;path&gt;, should be positioned\nat last like /download/1/version/1.1/win32</li>\n<li>If not provided, assume as string. and all space will be replaced to \u201c_\u201d</li>\n</ul>\n<p>At your template engine, you can access through was.request.PARAMS [\u201cid\u201d].</p>\n<p>It is also possible via keywords args,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/episode/&lt;int:id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">episode</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> \\<span class=\"o\">*</span>\\<span class=\"o\">*</span><span class=\"n\">karg</span><span class=\"p\">):</span>\n  <span class=\"n\">retrun</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">ARGS</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># http://127.0.0.1:5000/episode/100</span>\n</pre>\n<p>You can set default value to id,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/episode/&lt;int:id&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">episode</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">\"POST\"</span> <span class=\"ow\">and</span> <span class=\"nb\">id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">new_id</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"o\">...</span>\n</pre>\n<p>It makes this URL working,</p>\n<pre>http://127.0.0.1:5000/episode\n</pre>\n<p>And was.urlfor will behaive like as below,</p>\n<pre> was.urlfor <span class=\"o\">(</span><span class=\"s2\">\"episode\"</span><span class=\"o\">)</span>\n &gt;&gt; /episode\n\nwas.urlfor <span class=\"o\">(</span><span class=\"s2\">\"episode\"</span>, <span class=\"m\">100</span><span class=\"o\">)</span>\n &gt;&gt; /episode/100\n</pre>\n<p><em>Note</em> that this does not works for root resource,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/&lt;int:id&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">episode</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">\"POST\"</span> <span class=\"ow\">and</span> <span class=\"nb\">id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">new_id</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"o\">...</span>\n</pre>\n<p>By above code, <a href=\"http://127.0.0.1:5000/\" rel=\"nofollow\">http://127.0.0.1:5000/</a> will not work. You should define \u201c/\u201d route.</p>\n</div>\n<div id=\"query-string-parameters\">\n<h4><a href=\"#id20\" rel=\"nofollow\">Query String Parameters</a></h4>\n<p>qiery string parameter can be both resource arguments but needn\u2019t be.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">8</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">num</span>\n<span class=\"c1\"># http://127.0.0.1:5000/hello?num=100</span>\n</pre>\n<p>It is same as these,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">ARGS</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"num\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">url</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"num\"</span><span class=\"p\">)</span>\n  <span class=\"c1\"># of</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"num)</span>\n</pre>\n<p>Above 2 code blocks have a significant difference. First one can\nget only \u2018num\u2019 parameter. If URL query string contains other\nparameters, Skitai will raise 508 Error. But 2nd one can be any\nparameters.</p>\n</div>\n<div id=\"getting-form-json-parameters\">\n<h4><a href=\"#id21\" rel=\"nofollow\">Getting Form/JSON Parameters</a></h4>\n<p>Getting form is not different from the way for url parameters, but\ngenerally form parameters is too many to use with each function\nparameters, can take from single args **form or take mixed with\nnamed args and **form both.</p>\n<p>if request header has application/json</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">form</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Post </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"userid\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">),</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"comment\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">))</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">userid</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">form</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Post </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">userid</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"comment\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">))</span>\n</pre>\n<p>Note that for receiving request body via arguments, you specify\nkeywords args like **karg or specify parameter names of body data.</p>\n<p>If you want just handle POST body, you can use was.request.json ()\nor was.request.form () that will return dictionary object.</p>\n</div>\n<div id=\"getting-composed-parameters\">\n<h4><a href=\"#id22\" rel=\"nofollow\">Getting Composed Parameters</a></h4>\n<p>You can receive all type of parameters by resource arguments. Let\u2019s\nassume yotu resource URL is <a href=\"http://127.0.0.1:5000/episode/100?topic=Python\" rel=\"nofollow\">http://127.0.0.1:5000/episode/100?topic=Python</a>.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/episode/&lt;int:id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</pre>\n<p>if URL is <a href=\"http://127.0.0.1:5000/episode/100?topic=Python\" rel=\"nofollow\">http://127.0.0.1:5000/episode/100?topic=Python</a> with Form/JSON\ndata {\u201ccomment\u201d: \u201cIt is good idea\u201d}</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/episode/&lt;int:id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</pre>\n<p>Note that argument should be ordered by:</p>\n<ul>\n<li>URL parameters</li>\n<li>URL query string</li>\n<li>Form/JSON body</li>\n</ul>\n<p>And note if your request has both query string and form/JSON body,\nand want to receive form paramters via arguments, you should receive\nquery string parameters first. It is not allowed to skip query string.</p>\n<p>Also you can use keywords argument.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/episode/&lt;int:id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> \\<span class=\"o\">*</span>\\<span class=\"o\">*</span><span class=\"n\">karg</span><span class=\"p\">):</span>\n  <span class=\"n\">karg</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s1\">'topic'</span><span class=\"p\">)</span>\n</pre>\n<p>Note that **karg is contains both query string and form/JSON data\nand no retriction for parameter names.</p>\n<p>was.requests.args is merged dictionary for all type of parameters. If\nparameter name is duplicated, its value will be set to form of value\nlist (But If parameters exist both URL and form data, form data always\nhas priority. It means URL parameter will be ignored).</p>\n<p>Then simpletst way for getting parameters, use was.request.args.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/episode/&lt;int:id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s1\">'topic'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"testing-parameters\">\n<h4><a href=\"#id23\" rel=\"nofollow\">Testing Parameters</a></h4>\n<p>For parameter checking,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/test\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">require</span> <span class=\"p\">(</span><span class=\"s2\">\"ARGS\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"n\">ints</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"test.html\"</span><span class=\"p\">)</span>\n</pre>\n<p>\u2018id\u2019 is required and sholud be int type.</p>\n<p>Spec is,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">require</span> <span class=\"p\">(</span>\n  <span class=\"n\">scope</span><span class=\"p\">,</span> <span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ints</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">floats</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">emails</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">uuids</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nones</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">lists</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">booleans</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dicts</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">notags</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">safes</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"o\">**</span><span class=\"n\">kargs</span>\n<span class=\"p\">)</span>\n</pre>\n<ul>\n<li>notags: replace all &lt; and &gt;</li>\n<li>safes: reject if find XSS possible string</li>\n</ul>\n<p><em>scope</em> can be:</p>\n<ul>\n<li>URL</li>\n<li>FORM</li>\n<li>JSON</li>\n<li>ARGS: default, all of above</li>\n<li>GET</li>\n<li>DELETE</li>\n<li>PATCH</li>\n<li>POST</li>\n<li>PUT</li>\n</ul>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/1\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">require</span> <span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"n\">ints</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'offset'</span><span class=\"p\">,</span> <span class=\"s1\">'limit'</span><span class=\"p\">])</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">require</span> <span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">index6</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">DATA</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span> <span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"c1\"># limit converted into int type</span>\n    <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s1\">'PUT'</span><span class=\"p\">:</span>\n      <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">DATA</span> <span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span>\n</pre>\n<p>You can test more detail using kargs.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/1\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">require</span> <span class=\"p\">(</span><span class=\"s2\">\"ARGS\"</span><span class=\"p\">,</span> <span class=\"n\">a__gte</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">b__between</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">c__in</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">index6</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n</pre>\n<ul>\n<li>__between</li>\n<li>__neq</li>\n<li>__gt, __gte</li>\n<li>__lt, __lte</li>\n</ul>\n<p>Checking parameter with regular expression,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/2\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">require</span> <span class=\"p\">(</span><span class=\"s2\">\"ARGS\"</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span> <span class=\"p\">(</span><span class=\"s2\">\"^hans\"</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">index7</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n</pre>\n<p>Checking parameter length, use __len:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/3\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">require</span> <span class=\"p\">(</span><span class=\"s2\">\"ARGS\"</span><span class=\"p\">,</span> <span class=\"n\">a__len__between</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">index7</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n</pre>\n</div>\n<div id=\"pre-defined-parameter-values\">\n<h4><a href=\"#id24\" rel=\"nofollow\">Pre-Defined Parameter Values</a></h4>\n<p>\u2018me\u2019, \u2018notme\u2019 is special prameter value used by authentication.</p>\n<ul>\n<li>\u2018me\u2019 can be resolved into user ID on request handling</li>\n<li>\u2018notme\u2019 can ignore specific user ID for administative\nsearch purpose, BUT for your safey, \u2018notme\u2019 is allowed\nonly with \u201cGET\u201d request</li>\n<li>\u2018new\u2019 is dummy value especially with \u201cPOST\u201d method. But\nit is not restricted by methods. Maybe you can use \u2018new\u2019\nwith \u2018GET\u2019 for getting newlest items.</li>\n</ul>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/episodes/&lt;int:uid&gt;\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_required</span> <span class=\"p\">(</span><span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"staff\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">episodes</span> <span class=\"p\">(</span><span class=\"n\">uid</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre>\n<p>Now paramter \u2018uid\u2019 is bound with permission.</p>\n<p>Belows are all valid URI.</p>\n<ul>\n<li>GET /episodes/me, if request user have any permission</li>\n<li>DELETE /episodes/me if request user have any permission</li>\n<li>GET /episodes/4, if request user have staff permission,\nelse raise 403 error</li>\n<li>PATCH /episodes/4, if request user have staff permission,\nelse raise 403 error</li>\n<li>GET /episodes/new, if request user have staff permission,\nelse raise 403 error</li>\n<li>POST /episodes/new, if request user have staff permission,\nelse raise 403 error</li>\n<li>GET /episodes/notme, if request user have staff permission,\nelse raise 403 error</li>\n</ul>\n<p>But belows are all invalid and HTTP 421 error will be raised\nfor your safety reason. If these\u2019re allowed, there is lot of\ndanger delete/update all users (or all rows of database table).</p>\n<ul>\n<li>DELETE /episodes/notme</li>\n<li>POST /episodes/notme</li>\n<li>PATCH /episodes/notme</li>\n<li>PUT /episodes/notme</li>\n</ul>\n<p>Obviously, I am sure you already know exact resource ID for\nabove tasks.</p>\n</div>\n<div id=\"make-your-own-rule\">\n<h4><a href=\"#id25\" rel=\"nofollow\">Make Your Own Rule</a></h4>\n<p>The way to get parameters is little messy. But I want to try to\nmake more pythonic style. Even all routed method can be called by\nanother non app functions.</p>\n<p>Initially I want to use like this.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/pets/&lt;kind&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">pets</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">JSON</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre>\n<p>It can be requested by requests.</p>\n<pre><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span> <span class=\"p\">(</span>\n  <span class=\"s2\">\"http://localhost/pets/dog?limit=10\"</span><span class=\"p\">,</span>\n  <span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"area\"</span><span class=\"p\">:</span> <span class=\"s2\">\"LA\"</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If you need to check the origin of parameters, require decorator\nis useful.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/pets/&lt;kind&gt;\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">require</span> <span class=\"p\">(</span><span class=\"s2\">\"JSON\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"area\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">pets</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">JSON</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre>\n<p>That\u2019s just my opinion.</p>\n</div>\n</div>\n<div id=\"response\">\n<h3><a href=\"#id26\" rel=\"nofollow\">Response</a></h3>\n<p>Basically, just return contents.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you need set additional headers or HTTP status,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">),</span> <span class=\"p\">[(</span><span class=\"s2\">\"Cache-Control\"</span><span class=\"p\">,</span> <span class=\"s2\">\"max-age=60\"</span><span class=\"p\">)])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">),</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">\"Cache-Control\"</span><span class=\"p\">,</span> <span class=\"s2\">\"max-age=60\"</span><span class=\"p\">)]</span>\n  <span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">set_header</span> <span class=\"p\">(</span><span class=\"s2\">\"Cache-Control\"</span><span class=\"p\">,</span> <span class=\"s2\">\"max-age=60\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"hello.htm\"</span><span class=\"p\">)</span>\n</pre>\n<p>Above 3 examples will make exacltly same result.</p>\n<p>Sending specific HTTP status code,</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"404 Not Found\"</span><span class=\"p\">,</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"err404.htm\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"c1\"># if body is not given, automaticcally generated with default error template.</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"404 Not Found\"</span><span class=\"p\">)</span>\n</pre>\n<p>If app raise exception, traceback information will be displayed\nonly app.debug = True. But you intentionally send it inspite of\napp.debug = False:</p>\n<pre><span class=\"c1\"># File</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/raise_exception\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">raise_exception</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span> <span class=\"p\">(</span><span class=\"s2\">\"Test Error\"</span><span class=\"p\">)</span>\n  <span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"500 Internal Server Error\"</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exc_info</span> <span class=\"p\">())</span>\n</pre>\n<p>If you use custom error handler, you can set detail explaination\nto error [\u201cdetail\u201d].</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">default_error_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">default_error_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"errors/default.html\"</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">error</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">with_explain</span> <span class=\"p\">(</span><span class=\"s1\">'503 Serivce Unavaliable'</span><span class=\"p\">,</span> <span class=\"s2\">\"Please Visit On Thurse Day\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can return various objects.</p>\n<pre><span class=\"c1\"># File</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/streaming\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">streaming</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"nb\">open</span> <span class=\"p\">(</span><span class=\"s2\">\"mypicnic.mp4\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">),</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">\"Content-Type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"video/mp4\"</span><span class=\"p\">)])</span>\n\n<span class=\"c1\"># Generator</span>\n<span class=\"k\">def</span> <span class=\"nf\">build_csv</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">generate</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">iter_all_rows</span><span class=\"p\">():</span>\n      <span class=\"k\">yield</span> <span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"n\">generate</span> <span class=\"p\">(),</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">\"Content-Type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"text/csv\"</span><span class=\"p\">)])</span>\n</pre>\n<p>All available return types are:</p>\n<ul>\n<li>String, Bytes, Unicode</li>\n<li>File-like object has \u2018read (buffer_size)\u2019 method, optional \u2018close ()\u2019</li>\n<li>Iterator/Generator object has \u2018next() or _next()\u2019 method, optional\n\u2018close ()\u2019 and shoud raise StopIteration if no more data exists.</li>\n<li>Something object has \u2018more()\u2019 method, optional \u2018close ()\u2019</li>\n<li>Classes of skitai.lib.producers</li>\n<li>List/Tuple contains above objects</li>\n<li>XMLRPC dumpable object for if you want to response to XMLRPC</li>\n</ul>\n<p>The object has \u2018close ()\u2019 method, will be called when all data\nconsumed, or socket is disconnected with client by any reasons.</p>\n<ul>\n<li>was.response (status = \u201c200 OK\u201d, body = None, headers = None,\nexc_info = None)</li>\n<li>was.response.throw (status = \u201c200 OK\u201d): abort handling request,\ngenerated contents and return http error immediatly</li>\n<li>was.API (__data_dict__ = None, **kargs): return api\nresponse container</li>\n<li>was.Fault (status = \u201c200 OK\u201d,*args, **kargs): shortcut for\nwas.response (status, was.API (\u2026)) if status code is 2xx\nand was.response (status, was.Fault (\u2026))</li>\n<li>was.response.traceback (msg = \u201c\u201d, code = 10001,  debug = \u2018see traceback\u2019,\nmore_info = None):\nreturn api response container with setting traceback info</li>\n<li>was.response.set_status (status) # \u201c200 OK\u201d, \u201c404 Not Found\u201d</li>\n<li>was.response.get_status ()</li>\n<li>was.response.set_headers (headers) # [(key, value), \u2026]</li>\n<li>was.response.get_headers ()</li>\n<li>was.response.set_header (k, v)</li>\n<li>was.response.get_header (k)</li>\n<li>was.response.del_header (k)</li>\n<li>was.response.hint_promise (uri) # <em>New in skitai version 0.16.4</em>,\nonly works with HTTP/2.x and will be ignored HTTP/1.x</li>\n</ul>\n<div id=\"http-exception\">\n<h4><a href=\"#id27\" rel=\"nofollow\">HTTP Exception</a></h4>\n<p>Abort immediatly and send HTTP eroor content.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/&lt;filename&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">getfile</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span> <span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"404 Not Found\"</span><span class=\"p\">,</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\"> not exists\"</span><span class=\"o\">.</span><span class=\"n\">format</span> <span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">))</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">File</span> <span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>Using assert, you can quick send <em>400 Not My Fault</em></p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/&lt;filename&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">getfile</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>\n  <span class=\"k\">assert</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span> <span class=\"p\">(</span><span class=\"s1\">'.png'</span><span class=\"p\">),</span> <span class=\"s1\">'filename must be end with png'</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">File</span> <span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"redirecting-to-static-file\">\n<h4><a href=\"#id28\" rel=\"nofollow\">Redirecting To Static File</a></h4>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/robots.txt\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">robots</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">:</span>\n        <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">[</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'text/plain'</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"User-Agent: *</span><span class=\"se\">\\n</span><span class=\"s2\">Disallow: /</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Static</span> <span class=\"p\">(</span><span class=\"s1\">'/robots.real.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>It will handle ETag, Last-Modified, Range etc just like common static files.</p>\n</div>\n<div id=\"file-stream-on-local-file-system\">\n<h4><a href=\"#id29\" rel=\"nofollow\">File Stream On Local File System</a></h4>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/&lt;filename&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">getfile</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">File</span> <span class=\"p\">(</span><span class=\"s1\">'/data/</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"api-response\">\n<h4><a href=\"#id30\" rel=\"nofollow\">API Response</a></h4>\n<p><em>New in skitai version 0.26.15.9</em></p>\n<p>In cases you want to retrun JSON API reponse,</p>\n<pre><span class=\"c1\"># return JSON {data: [1,2,3]}</span>\n<span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Fault</span> <span class=\"p\">(</span><span class=\"s1\">'200 OK'</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"c1\"># return empty JSON {}</span>\n<span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Fault</span> <span class=\"p\">(</span><span class=\"mi\">201</span> <span class=\"n\">Accept</span><span class=\"s1\">')</span>\n\n<span class=\"c1\"># and shortcut if response HTTP status code is 200 OK,</span>\n<span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">=</span>  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># return empty JSON {}</span>\n<span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">()</span>\n</pre>\n<p>For sending error response with error information,</p>\n<pre><span class=\"c1\"># client will get, {\"message\": \"parameter q required\", \"code\": 10021}</span>\n<span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Fault</span> <span class=\"p\">(</span><span class=\"s1\">'400 Bad Request'</span><span class=\"p\">,</span> <span class=\"s1\">'missing parameter'</span><span class=\"p\">,</span> <span class=\"mi\">10021</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># with additional information,</span>\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Fault</span> <span class=\"p\">(</span>\n  <span class=\"s1\">'400 Bad Request'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'missing parameter'</span><span class=\"p\">,</span> <span class=\"mi\">10021</span><span class=\"p\">,</span>\n  <span class=\"s1\">'need parameter offset and limit'</span><span class=\"p\">,</span> <span class=\"c1\"># detailed debug information</span>\n  <span class=\"s1\">'http://127.0.0.1/moreinfo/10021'</span><span class=\"p\">,</span> <span class=\"c1\"># more detail URL something</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can send traceback information for debug purpose like in case\napp.debug = False,</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">do</span> <span class=\"n\">something</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Fault</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'500 Internal Server Error'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'somethig is not valid'</span><span class=\"p\">,</span>\n    <span class=\"mi\">10022</span><span class=\"p\">,</span>\n    <span class=\"n\">traceback</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n  <span class=\"p\">)</span>\n\n<span class=\"c1\"># client see,</span>\n<span class=\"p\">{</span>\n  <span class=\"s2\">\"code\"</span><span class=\"p\">:</span> <span class=\"mi\">10001</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"somethig is not valid\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"debug\"</span><span class=\"p\">:</span> <span class=\"s2\">\"see traceback\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"traceback\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name 'aa' is not defined\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"in file app.py at line 276, function search\"</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Important note that this response will return with HTTP 200 OK status.\nIf you want return 500 code, just let exception go.</p>\n<p>But if your client send header with \u2018Accept: application/json\u2019\nand app.debug is True, Skitai returns traceback information automatically.</p>\n<p><strong>Datetime Encoding JSON</strong></p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">JSON_ENCODER</span> <span class=\"o\">=</span> <span class=\"s1\">'utcoffset'</span>\n</pre>\n<ul>\n<li>utcoffset: 2030-12-24 15:09:00+00 (default, utc timezone)</li>\n<li>str: 2030-12-24 15:09:00 (with system timezone)</li>\n<li>iso: 2030-12-04T15:09:00 (utc timezone)</li>\n<li>unixepoch: 1582850951.0 (utc timezone)</li>\n<li>digit: 20301224150900 (utc timezone)</li>\n</ul>\n</div>\n<div id=\"selective-media-response-by-accept-header\">\n<h4><a href=\"#id31\" rel=\"nofollow\">Selective Media Response By Accept Header</a></h4>\n<p>If client\u2019s <cite>Accept</cite> header contains \u2018text/html\u2019, respond as rendered\nHTML or as JSON/XML API response.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render_or_API</span> <span class=\"p\">(</span><span class=\"s2\">\"index.html\"</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"future-futures-response\">\n<h4><a href=\"#id32\" rel=\"nofollow\">Future / Futures Response</a></h4>\n<ul>\n<li>New in version 0.2*</li>\n</ul>\n<p>With single thread it will be the problem using was\u2019 request services\nwith dispatch (), It is almost works as IO blocking situation.</p>\n<p>was.Tasks.then () / corequest.then () returns Futures instance for delaying\nresponse until every awaitable tasks are finished and every future tasks\nwill be executed concurrently.</p>\n<p><em>CAUTIONS:</em></p>\n<ol>\n<li>Futures escape ealry from current requet handling thread pool\nand enter to main  event loop. It means they will make connections\nto targets as possible as they can.\nIf hundreds of clients request resource using database/upstream server,\nIt will make error on target server like \u201ctoo manty connection error\u201d.\nIf you use Futures response, you SHOULD make sure these factors.</li>\n<li>Futures might be the most efficient if it satisfy 2 conditions, a\nfew simultaneously requesting clients, streaming data is relatively\nsmall size. Lot of clients will consume\nconnection resources fast and large data stream make blanch coroutine\nadvantages caused of expensive networking cost.</li>\n<li>Then you could consider using was.Tasks first because Tasks\nis within thread pool, it will be limit number of connections\nby number of thread pool.</li>\n</ol>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_futures</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">dbpath</span><span class=\"p\">):</span>\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n      <span class=\"k\">def</span> <span class=\"nf\">response</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">):</span>\n          <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">dispatch</span> <span class=\"p\">()])</span>\n\n      <span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n          <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"@pypi/project/skitai/\"</span><span class=\"p\">),</span>\n          <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"@pypi/project/rs4/\"</span><span class=\"p\">),</span>\n          <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"s2\">\"@sqlite\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM stocks WHERE symbol=?'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'RHAT'</span><span class=\"p\">,))</span>\n      <span class=\"p\">]</span>\n      <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Tasks</span> <span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"p\">,</span> <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">then</span> <span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">alias</span> <span class=\"p\">(</span><span class=\"s2\">\"@pypi\"</span><span class=\"p\">,</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">PROTO_HTTPS</span><span class=\"p\">,</span> <span class=\"s2\">\"pypi.org\"</span><span class=\"p\">)</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">alias</span> <span class=\"p\">(</span><span class=\"s2\">\"@sqlite\"</span><span class=\"p\">,</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">DB_SQLITE3</span><span class=\"p\">,</span> <span class=\"n\">dbpath</span><span class=\"p\">)</span>\n  <span class=\"k\">with</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">test_client</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">confutil</span><span class=\"o\">.</span><span class=\"n\">getroot</span> <span class=\"p\">())</span> <span class=\"k\">as</span> <span class=\"n\">cli</span><span class=\"p\">:</span>\n      <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n      <span class=\"k\">assert</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"p\">[</span><span class=\"s1\">'status_code'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">]</span>\n</pre>\n<p>Note that at callback, Futures is converted into <a href=\"https://pypi.org/project/skitai/#tasks\" rel=\"nofollow\">Tasks</a>. Then you\ncan use dispatch, wait, fetch \u2026 things.</p>\n<p>Another example,</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_futures</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">dbpath</span><span class=\"p\">):</span>\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n      <span class=\"k\">def</span> <span class=\"nf\">response</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">):</span>\n          <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">stock</span><span class=\"o\">.</span><span class=\"n\">announcements</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fetch</span> <span class=\"p\">()</span>\n          <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">stock</span><span class=\"p\">)</span>\n\n      <span class=\"n\">stock</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"s2\">\"@sqlite\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span> <span class=\"p\">(</span><span class=\"n\">stocks</span><span class=\"s2\">\").get (\"</span><span class=\"o\">*</span><span class=\"s2\">\").filter (symbol='RHAT').execute ().one ()</span>\n      <span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"s2\">\"@sqlite\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span> <span class=\"p\">(</span><span class=\"n\">announcements</span><span class=\"s2\">\").get (\"</span><span class=\"o\">*</span><span class=\"s2\">\").filter (id = stock.id).execute ()]</span>\n      <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Tasks</span> <span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"p\">,</span> <span class=\"n\">stock</span> <span class=\"o\">=</span> <span class=\"n\">stock</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">then</span> <span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">alias</span> <span class=\"p\">(</span><span class=\"s2\">\"@pypi\"</span><span class=\"p\">,</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">PROTO_HTTPS</span><span class=\"p\">,</span> <span class=\"s2\">\"pypi.org\"</span><span class=\"p\">)</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">alias</span> <span class=\"p\">(</span><span class=\"s2\">\"@sqlite\"</span><span class=\"p\">,</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">DB_SQLITE3</span><span class=\"p\">,</span> <span class=\"n\">dbpath</span><span class=\"p\">)</span>\n  <span class=\"k\">with</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">test_client</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">confutil</span><span class=\"o\">.</span><span class=\"n\">getroot</span> <span class=\"p\">())</span> <span class=\"k\">as</span> <span class=\"n\">cli</span><span class=\"p\">:</span>\n      <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n      <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</pre>\n<p>Chaining is also possible,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">repond</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"n\">status_code_db</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">dispatch</span> <span class=\"p\">()],</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">checkdb</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">):</span>\n        <span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"s2\">\"@sqlite\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM stocks WHERE symbol=?'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'RHAT'</span><span class=\"p\">,))]</span>\n        <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"k\">for</span> <span class=\"n\">rs</span> <span class=\"ow\">in</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">dispatch</span> <span class=\"p\">()]</span>\n        <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Tasks</span> <span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"n\">status_code</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">then</span> <span class=\"p\">(</span><span class=\"n\">repond</span><span class=\"p\">)</span>\n\n    <span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"@pypi/project/skitai/\"</span><span class=\"p\">),</span>\n        <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"@pypi/project/rs4/\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Tasks</span> <span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">then</span> <span class=\"p\">(</span><span class=\"n\">checkdb</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">alias</span> <span class=\"p\">(</span><span class=\"s2\">\"@pypi\"</span><span class=\"p\">,</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">PROTO_HTTPS</span><span class=\"p\">,</span> <span class=\"s2\">\"pypi.org\"</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">alias</span> <span class=\"p\">(</span><span class=\"s2\">\"@sqlite\"</span><span class=\"p\">,</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">DB_SQLITE3</span><span class=\"p\">,</span> <span class=\"n\">dbpath</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">test_client</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">confutil</span><span class=\"o\">.</span><span class=\"n\">getroot</span> <span class=\"p\">())</span> <span class=\"k\">as</span> <span class=\"n\">cli</span><span class=\"p\">:</span>\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s1\">'status_code'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">],</span> <span class=\"s1\">'status_code_db'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">]}</span>\n</pre>\n</div>\n<div id=\"process-thread-response\">\n<h4><a href=\"#id33\" rel=\"nofollow\">Process / Thread Response</a></h4>\n<p>These are very same with Future response.</p>\n<p>If you have CPU bound jobs, use was.Process.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'...'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span> <span class=\"p\">():</span>\n  <span class=\"k\">def</span> <span class=\"nf\">repond</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">fetch</span> <span class=\"p\">(),</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">meta</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Process</span> <span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">,</span> <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">4.0</span><span class=\"p\">,),</span> <span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">then</span> <span class=\"p\">(</span><span class=\"n\">respond</span><span class=\"p\">)</span>\n</pre>\n<p>If you have I/O bound jobs, use was.Thread.</p>\n</div>\n<div id=\"proxypass-response\">\n<h4><a href=\"#id34\" rel=\"nofollow\">Proxypass Response</a></h4>\n<p>Skitai\u2019s mounted proxypass is higher priority than WSGI app. If you\nwant make this to lower  priority, can use was.proxypass.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/&lt;path:path&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">proxy</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">proxypass</span> <span class=\"p\">(</span><span class=\"s2\">\"@myupstream\"</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<p>But it is valid only if request method is GET, because it is mainly\nused for building integrated development environment with\nfrontend frameworks linke Node.js.</p>\n</div>\n</div>\n<div id=\"mounting-resources-making-simpler-modular-app\">\n<h3><a href=\"#id35\" rel=\"nofollow\">Mounting Resources: Making Simpler &amp; Modular App</a></h3>\n<p><em>New in skitai version 0.26.17</em></p>\n<div id=\"implicit-mount-services-on-your-app\">\n<h4><a href=\"#id36\" rel=\"nofollow\">Implicit Mount Services On Your App</a></h4>\n<p>I already mentioned <em>App Structure</em> section, you can split yours views\nand help utilties into services directory.</p>\n<p>Assume your application directory structure is like this,</p>\n<pre>templates/*.html\nservices/*.py <span class=\"c1\"># app library, all modules in this directory will be watched for reloading\n</span>static/images <span class=\"c1\"># static files\n</span>static/js\nstatic/css\n\napp.py <span class=\"c1\"># this is starter script</span>\n</pre>\n<p>app.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">services</span> <span class=\"kn\">import</span> <span class=\"n\">auth</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">default_error_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">default_error_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"nb\">str</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<p>services/auth.py</p>\n<pre><span class=\"c1\"># shared utility functions used by views</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">titlize</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">__mount__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">login_handler</span>\n  <span class=\"k\">def</span> <span class=\"nf\">login_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span>\n    <span class=\"n\">next_url</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">endswith</span> <span class=\"p\">(</span><span class=\"s2\">\"signout\"</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">uri</span> <span class=\"ow\">or</span> <span class=\"s2\">\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">redirect</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"signin\"</span><span class=\"p\">,</span> <span class=\"n\">next_url</span><span class=\"p\">))</span>\n\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/signout\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">signout</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">remove</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">)</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">push</span> <span class=\"p\">(</span><span class=\"s2\">\"Signed out successfully\"</span><span class=\"p\">,</span> <span class=\"s2\">\"success\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">redirect</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s1\">'index'</span><span class=\"p\">))</span>\n\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/signin\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">signin</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">next_url</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">form</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">):</span>\n      <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">authenticate</span> <span class=\"p\">(</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s2\">\"username\"</span><span class=\"p\">],</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s2\">\"password\"</span><span class=\"p\">])</span>\n      <span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"p\">:</span>\n        <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s2\">\"username\"</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">redirect</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s2\">\"next_url\"</span><span class=\"p\">])</span>\n      <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">push</span> <span class=\"p\">(</span><span class=\"s2\">\"Invalid User Name or Password\"</span><span class=\"p\">,</span> <span class=\"s2\">\"error\"</span><span class=\"p\">,</span> <span class=\"n\">icon</span> <span class=\"o\">=</span> <span class=\"s2\">\"new_releases\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"sign/signin.html\"</span><span class=\"p\">,</span> <span class=\"n\">next_url</span> <span class=\"o\">=</span> <span class=\"n\">next_url</span> <span class=\"ow\">or</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"index\"</span><span class=\"p\">))</span>\n</pre>\n<p>You just import module from services. but <em>def __mount__ (app)</em> is core in\neach module. Every modules can have <em>__mount__ (app)</em> in <em>services</em>, so you\ncan split and modulize views and utility functions. __mount__ (app) will be\nautomatically executed on starting. If you set app.use_reloader, theses services\nwill be automatically reloaded and re-executed on file changing. Also you can\nmake global app sharable functions into seperate module like util.py without\nviews.</p>\n</div>\n<div id=\"mounting-services-with-options\">\n<h4><a href=\"#id37\" rel=\"nofollow\">Mounting Services With Options</a></h4>\n<p>If you need additional options on decorating,</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">__mount__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/login\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">login</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>And on app,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">services</span> <span class=\"kn\">import</span> <span class=\"n\">auth</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/regist'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, route of login is \u201c/regist/login\u201d.</p>\n<p>Sometimes function names are duplicated if like you\nimport contributed services.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">services</span> <span class=\"kn\">import</span> <span class=\"n\">auth</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span> <span class=\"s1\">'/regist'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"p\">,</span> <span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"s2\">\"regist\"</span><span class=\"p\">)</span>\n</pre>\n<p>Now, you can import iport without name collision. But be careful\nwhen use was.urlfor () etc.</p>\n<p>Note that options should be keyword arguments.</p>\n<pre><span class=\"p\">{{</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"regist.login\"</span><span class=\"p\">)</span> <span class=\"p\">}}</span>\n</pre>\n<p>If you want to mount only debug environment,</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"n\">auth</span><span class=\"p\">,</span> <span class=\"n\">debug_only</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to authentify to all services,</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"n\">auth</span><span class=\"p\">,</span> <span class=\"n\">authenticate</span> <span class=\"o\">=</span> <span class=\"s2\">\"bearer\"</span><span class=\"p\">)</span>\n</pre>\n<p>Currently <em>reserved arguments</em> are:</p>\n<ul>\n<li>ns</li>\n<li>authenticate</li>\n<li>debug_only</li>\n<li>point</li>\n</ul>\n<p>Your custom options can be accessed by __mntopt__ in your module.</p>\n<p>First, mount with redirect option.</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"n\">auth</span><span class=\"p\">,</span> <span class=\"n\">redirect</span> <span class=\"o\">=</span> <span class=\"s2\">\"index\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># automatically set to auth.__mntopt__ = {\"redirect\": \"index\"}</span>\n</pre>\n<p>then you can access in auth.py,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/regist/signout\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">signout</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">push</span> <span class=\"p\">(</span><span class=\"s2\">\"Signed out successfully\"</span><span class=\"p\">,</span> <span class=\"s2\">\"success\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">redirect</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"n\">__mntopt__</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"redirect\"</span><span class=\"p\">,</span> <span class=\"s1\">'index'</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"setup-services\">\n<h4><a href=\"#id38\" rel=\"nofollow\">Setup Services</a></h4>\n<p>all service can also have __setup__ hook.</p>\n<pre><span class=\"c1\"># foo.py</span>\n<span class=\"n\">BASE_PATH</span> <span class=\"o\">=</span> <span class=\"s1\">'/var'</span>\n<span class=\"k\">def</span> <span class=\"nf\">__setup__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">mntopt</span><span class=\"p\">):</span>\n  <span class=\"k\">global</span> <span class=\"n\">BASE_PATH</span>\n  <span class=\"n\">BASE_PATH</span> <span class=\"o\">=</span> <span class=\"n\">mntopt</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s1\">'base_path'</span><span class=\"p\">,</span> <span class=\"n\">BASE_PATH</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">__mount__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"c1\"># app.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">services</span> <span class=\"kn\">import</span> <span class=\"n\">foo</span>\n<span class=\"kn\">from</span> <span class=\"nn\">atila</span> <span class=\"kn\">import</span> <span class=\"n\">Atila</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">base_path</span> <span class=\"o\">=</span> <span class=\"s1\">'/home/ubuntu'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"mounting-package\">\n<h4><a href=\"#id39\" rel=\"nofollow\">Mounting Package</a></h4>\n<p>Assume you have examples package in your service.</p>\n<pre>services/examples/__init__.py\nservices/examples/foo.py\nservices/examples/bar.py\n</pre>\n<p>You can use __setup__ hook for mounting all sub services.</p>\n<pre><span class=\"c1\"># services/examples/__init__.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">__setup__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">mntopt</span><span class=\"p\">):</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/foo'</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"n\">mntopt</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s1\">'threashold'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/bar'</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can mount just top package one.</p>\n<pre><span class=\"c1\"># app.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">services</span> <span class=\"kn\">import</span> <span class=\"n\">examples</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/examples'</span><span class=\"p\">,</span> <span class=\"n\">examples</span><span class=\"p\">,</span> <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>As a result, foo will be mounted on <cite>/examples/foo</cite>.</p>\n</div>\n<div id=\"unmounting-resources\">\n<h4><a href=\"#id40\" rel=\"nofollow\">Unmounting Resources</a></h4>\n<p><em>New in skitai version 0.27</em></p>\n<p>Also \u2018umount\u2019 is avaliable for cleaning up module resource.</p>\n<pre><span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">__umount__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n  <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">close</span> <span class=\"p\">()</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">someghing</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<p>This will be automatically called when:</p>\n<ul>\n<li>before module itself is reloading</li>\n<li>before app is reloading</li>\n<li>app unmounted from Skitai</li>\n</ul>\n</div>\n<div id=\"more-about-namespace\">\n<h4><a href=\"#id41\" rel=\"nofollow\">More About Namespace</a></h4>\n<p>If you develop reusable task modules, pay attention to namespace\nand URL building.</p>\n<p>For example, below module is mount with app.mount (auth, ns = \u201cregist\u201d).</p>\n<pre><span class=\"c1\"># auth.py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">__mount__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/func1\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">func1</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/func2\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">func2</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"func1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n</pre>\n<p>This was.urlfor (\u201cfunc1\u201d) in func2 might be dangerous, because this task\nmodules may have namespace. Then you consider ns like this.</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">func1\"</span><span class=\"o\">.</span><span class=\"n\">format</span> <span class=\"p\">(</span><span class=\"n\">__mntopt__</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"ns\"</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">__mntopt__</span> <span class=\"p\">[</span><span class=\"s2\">\"ns\"</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\".\"</span> <span class=\"ow\">or</span> <span class=\"s2\">\"\"</span><span class=\"p\">),</span> <span class=\"p\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n</pre>\n<p>But it is not pretty, so you can pretty style,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/func2\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func2</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n</pre>\n<p><em>New in version 0.3.3</em></p>\n<p>If you want to access resources to another sub module, you can use\nwith full module name.</p>\n<p>For example,</p>\n<pre><span class=\"c1\"># services/v1/account.py</span>\n<span class=\"k\">def</span> <span class=\"nf\">__mount__</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/register\"</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">register</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>An you can access like this,</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"v1.account.register\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"more-about-websocket\">\n<h3><a href=\"#id42\" rel=\"nofollow\">More About Websocket</a></h3>\n<p><strong>websocket design specs</strong> can be choosen one of 2.</p>\n<p>WS_CHANNEL</p>\n<blockquote>\n<ul>\n<li>Thread pool manages n websocket connection</li>\n<li>It\u2019s simple request and response way like AJAX</li>\n<li>Low cost on threads resources, but reposne cost is relatvley\nhigh than the others</li>\n</ul>\n</blockquote>\n<p>WS_GROUPCHAT (New in version 0.24)</p>\n<blockquote>\n<ul>\n<li>Thread pool manages n websockets connection</li>\n<li>Chat room model</li>\n</ul>\n</blockquote>\n<p><strong>websocket message handling options</strong></p>\n<p>WS_THREAD</p>\n<blockquote>\n<ul>\n<li>default, function base websocket message handling</li>\n<li>it treats every single websocket message as single request to\nresources like url requests.</li>\n<li>on receiving message from client, it will call function\nfor handling with queue and thread pool, it is basically\nsame as request resource</li>\n</ul>\n</blockquote>\n<p>WS_NOTHREAD</p>\n<blockquote>\n<ul>\n<li>non-threaded function call base websocket message handling</li>\n<li>it is faster than WS_THREAD</li>\n</ul>\n</blockquote>\n<p>WS_SESSION (New in version 0.30)</p>\n<blockquote>\n<ul>\n<li>non-threaded generator base websocket message handling</li>\n<li>cannot use this option with WS_THREADSAFE</li>\n</ul>\n</blockquote>\n<p>WS_THREADSAFE (New in version 0.26)</p>\n<blockquote>\n<ul>\n<li>Mostly same as WS_THREAD</li>\n<li>Message sending is thread safe</li>\n<li>Most case you needn\u2019t this option, but you create yourself one or\nmore threads using websocket.send () method you need this for\nyour convinience</li>\n</ul>\n</blockquote>\n<p><em>Note:</em> WS_NOTHREAD and WS_SESSION will block SKitai event loop while\nyou generate message to respond. If sending messasge generation time is\nreltively long, use WS_THREAD or WS_THREADSAFE.</p>\n<p><strong>message_encoding</strong></p>\n<p>Websocket messages will be automatically converted to theses objects.\nNote that option is only available with Atila WSGI container.</p>\n<blockquote>\n<ul>\n<li>WS_MSG_JSON</li>\n<li>WS_MSG_XMLRPC</li>\n</ul>\n</blockquote>\n<p><em>New in skitai version 0.26.18</em></p>\n<p>Websokect usage is already explained, but Atila provide @app.websocket\ndecorator for more elegant way to use it.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">onopen</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'websocket opened'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">onclose</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'websocket closed'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/websocket\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">websocket</span> <span class=\"p\">(</span><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_CHANNEL</span><span class=\"p\">,</span> <span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"n\">onopen</span><span class=\"p\">,</span> <span class=\"n\">onclose</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">websocket</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s1\">'you said: '</span> <span class=\"o\">+</span> <span class=\"n\">message</span>\n</pre>\n<p>This decorator spec is,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">websocket</span> <span class=\"p\">(</span>\n  <span class=\"n\">spec</span><span class=\"p\">,</span> <span class=\"c1\"># one of skitai.WS_CHANNEL and skitai.WS_GROUPCHAT</span>\n  <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">60</span><span class=\"p\">,</span>\n  <span class=\"n\">onopen</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">onclose</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"p\">)</span>\n</pre>\n<p>In some cases, you need additional parameter for opening/closing websocket.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/websocket\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">websocket</span> <span class=\"p\">(</span><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_CHANNEL</span> <span class=\"o\">|</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_THREADSAFE</span><span class=\"p\">,</span> <span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"n\">onopen</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">websocket</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s1\">'you said: '</span> <span class=\"o\">+</span> <span class=\"n\">message</span>\n</pre>\n<p>Then, your onopen function must have additional parameters except <em>message</em>.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">onopen</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'websocket opened with'</span><span class=\"p\">,</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">ARGS</span> <span class=\"p\">[</span><span class=\"s2\">\"option\"</span><span class=\"p\">])</span>\n</pre>\n<p>Now, your websocket endpoint is \u201cws://127.0.0.1:5000/websocket?option=value\u201d</p>\n<div id=\"ws-nothread\">\n<h4><a href=\"#id43\" rel=\"nofollow\">WS_NOTHREAD</a></h4>\n<p>WS_NOTHREAD does not use queue or thread pool. In this case, response is\nmore faster but if response includes IO blocking operation, entire\nSkitai event loop will be blocked.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/websocket\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">websocket</span> <span class=\"p\">(</span><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_CHANNEL</span> <span class=\"o\">|</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_NOTHREAD</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">onopen</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">websocket</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s1\">'you said: '</span> <span class=\"o\">+</span> <span class=\"n\">message</span>\n</pre>\n</div>\n<div id=\"ws-session\">\n<h4><a href=\"#id44\" rel=\"nofollow\">WS_SESSION</a></h4>\n<p>With WS_SESSION should return Python generator object,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/websocket\"</span><span class=\"p\">)</span>\n  <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">websocket</span> <span class=\"p\">(</span><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_CHANNEL</span> <span class=\"o\">|</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_SESSION</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">websocket</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n      <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"k\">yield</span>\n      <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">message</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"c1\">#strop iterating</span>\n      <span class=\"k\">yield</span> <span class=\"s2\">\"ECHO:\"</span> <span class=\"o\">+</span> <span class=\"n\">message</span>\n</pre>\n<p><em>Note:</em> If you use WS_SESSION option, onopen and onclose should be None,\nbecause in session, you can handle open and close within your function.</p>\n</div>\n</div>\n<div id=\"pushing-message-through-connected-client\">\n<h3><a href=\"#id45\" rel=\"nofollow\">Pushing Message Through Connected Client</a></h3>\n<p>Save websocket client id to session.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">onopen</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"WS_ID\"</span><span class=\"p\">,</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">client_id</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">onclose</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">remove</span> <span class=\"p\">(</span><span class=\"s2\">\"WS_ID\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/websocket\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">websocket</span> <span class=\"p\">(</span><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_CHANNEL</span> <span class=\"o\">|</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">WS_FAST</span><span class=\"p\">,</span> <span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"n\">onopen</span><span class=\"p\">,</span> <span class=\"n\">onclose</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">websocket</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s1\">'you said: '</span> <span class=\"o\">+</span> <span class=\"n\">message</span>\n</pre>\n<p>And push message to client.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/item_in_stock\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">item_in_stock</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">websocket_send</span> <span class=\"p\">(</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"WS_ID\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"Item In Stock!\"</span>\n  <span class=\"p\">)</span>\n</pre>\n<p><em>Note:</em>: I\u2019m not sure it is works in all web browser.</p>\n</div>\n<div id=\"building-url\">\n<h3><a href=\"#id46\" rel=\"nofollow\">Building URL</a></h3>\n<p>If your app is mounted at \u201c/math\u201d,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/add\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">num1</span><span class=\"p\">,</span> <span class=\"n\">num2</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"nb\">int</span> <span class=\"p\">(</span><span class=\"n\">num1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">int</span> <span class=\"p\">(</span><span class=\"n\">num2</span><span class=\"p\">)</span>\n\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">build_url</span> <span class=\"p\">(</span><span class=\"s2\">\"add\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span> <span class=\"c1\"># returned '/math/add?num1=10&amp;num2=40'</span>\n\n<span class=\"c1\"># BUT it's too long to use practically,</span>\n<span class=\"c1\"># was.urlfor is acronym for was.app.build_url</span>\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"add\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span> <span class=\"c1\"># returned '/math/add?num1=10&amp;num2=40'</span>\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"add\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">num2</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span> <span class=\"c1\"># returned '/math/add?num1=10&amp;num2=60'</span>\n\n<span class=\"c1\">#You can use function directly as well,</span>\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span> <span class=\"c1\"># returned '/math/add?num1=10&amp;num2=40'</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello/&lt;name&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hans Roh\"</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Hello, </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Your Name\"</span><span class=\"p\">)</span> <span class=\"c1\"># returned '/math/hello/Your_Name'</span>\n</pre>\n<p>Basically, was.urlfor is same as Python function call.</p>\n<div id=\"building-url-by-updating-parameters-partially\">\n<h4><a href=\"#id47\" rel=\"nofollow\">Building URL by Updating Parameters Partially</a></h4>\n<p><strong>New in skitai version 0.27</strong></p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/navigate\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">navigate</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">pageno</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"o\">...</span>\n</pre>\n<p>If this resource was requested by /naviagte?limit=100&amp;pageno=2, and\nif you want to make new resource url with keep a\u2019s value (=100),\nyou can make URL like this,</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"navigate\"</span><span class=\"p\">,</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>But you can update only changed parameters partially,</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlpatch</span> <span class=\"p\">(</span><span class=\"s2\">\"add\"</span><span class=\"p\">,</span> <span class=\"n\">pageno</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>Parameter a\u2019s value will be kept with current requested parameters.\nNote that was.urlpatch can be recieved keyword arguments only except\nfirst resource name.</p>\n<p>was.urlpatch is used changing partial parameters (or none) based over\ncurrent parameters.</p>\n</div>\n<div id=\"building-base-url-without-parameters\">\n<h4><a href=\"#id48\" rel=\"nofollow\">Building Base URL without Parameters</a></h4>\n<p><strong>New in skitai version 0.27</strong></p>\n<p>Sometimes you need to know just resource\u2019s base path info - especially\nclient-side javascript URL building, then use <em>was.basepath</em>.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/navigate\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">navigate</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">pageno</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"o\">...</span>\n</pre>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">basepath</span> <span class=\"p\">(</span><span class=\"s2\">\"navigate\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"k\">return</span> <span class=\"s2\">\"/navigate\"</span>\n</pre>\n<p>For example, in your VueJS template,</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">:href</span><span class=\"o\">=</span><span class=\"s\">\"'{{ was.basepath ('navigate') }}?limit=' + limit_option + '&amp;pageno=' + (current_page + 1)\"</span><span class=\"p\">&gt;</span>Next Page<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Note that base path means for fancy Url,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/user/&lt;id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">base</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"s2\">\"/user/\"</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/user/&lt;id&gt;/pat\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">base</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"s2\">\"/user/\"</span>\n</pre>\n</div>\n</div>\n<div id=\"access-environment-variables\">\n<h3><a href=\"#id49\" rel=\"nofollow\">Access Environment Variables</a></h3>\n<p><strong>was.request.env</strong> (<em>alias: was.env</em>)</p>\n<p>was.request.env is just Python dictionary object.</p>\n<pre><span class=\"k\">if</span> <span class=\"s2\">\"HTTP_USER_AGENT\"</span> <span class=\"ow\">in</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">:</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"CONTENT_TYPE\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"access-cookie\">\n<h3><a href=\"#id50\" rel=\"nofollow\">Access Cookie</a></h3>\n<p><strong>was.request.cookie</strong> (<em>alias: was.cookie</em>)</p>\n<p>was.request.cookie has almost dictionary methods.</p>\n<pre><span class=\"k\">if</span> <span class=\"s2\">\"user_id\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">cookie</span><span class=\"p\">:</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">cookie</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hansroh\"</span><span class=\"p\">)</span>\n  <span class=\"c1\"># or</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">cookie</span> <span class=\"p\">[</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"hansroh\"</span>\n</pre>\n<p><em>Changed in version 0.15.30</em></p>\n<p>\u2018was.request.cookie.set()\u2019 method prototype has been changed.</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">cookie</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span>\n  <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span>\n  <span class=\"n\">expires</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">secure</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">http_only</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<p>\u2018expires\u2019 args is seconds to expire.</p>\n<blockquote>\n<ul>\n<li>if None, this cookie valid until browser closed</li>\n<li>if 0 or \u2018now\u2019, expired immediately</li>\n<li>if \u2018never\u2019, expire date will be set to a hundred years from now</li>\n</ul>\n</blockquote>\n<p>If \u2018secure\u2019 and \u2018http_only\u2019 options are set to True, \u2018Secure\u2019 and\n\u2018HttpOnly\u2019 parameters will be added to Set-Cookie header.</p>\n<p>If \u2018path\u2019 is None, every app\u2019s cookie path will be automaticaaly\nset to their mount point.</p>\n<p>For example, your admin app is mounted on \u201c/admin\u201d in configuration\nfile like this:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\n  <span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">(</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span><span class=\"p\">,</span>\n    <span class=\"n\">mount</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'/admin'</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"p\">}</span>\n  <span class=\"p\">)</span>\n</pre>\n<p>If you don\u2019t specify cookie path when set, cookie path will be automatically\nset to \u2018/admin\u2019. So you want to access from another apps, cookie should\nbe set with upper path = \u2018/\u2019.</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">cookie</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s1\">'private_cookie'</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">cookie</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s1\">'public_cookie'</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'/'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>was.request.cookie.set (key, val, expires = None, path = None,\ndomain = None, secure = False, http_only = False)</li>\n<li>was.request.cookie.remove (key, path, domain)</li>\n<li>was.request.cookie.clear (path, domain)</li>\n<li>was.request.cookie.keys ()</li>\n<li>was.request.cookie.values ()</li>\n<li>was.request.cookie.items ()</li>\n<li>was.request.cookie.has_key ()</li>\n</ul>\n</div>\n<div id=\"access-session\">\n<h3><a href=\"#id51\" rel=\"nofollow\">Access Session</a></h3>\n<p><strong>was.request.session</strong> (<em>alias: was.session</em>)</p>\n<p>Strictly speaking, Atila hasn\u2019t got traditional session which some data\nis stored on server side. And it doesn\u2019t provide any abstract classes or\nmethods for storing.</p>\n<p>Ailta\u2019s session is just one of cookie value which contains signature\nfor checking alternation by any other things except Atila.</p>\n<p>was.request.session has almost dictionary methods.</p>\n<p>To enable session for app, random string formatted securekey should\nbe set for encrypt/decrypt session values.</p>\n<p><em>WARNING</em>: <cite>securekey</cite> should be same on all skitai apps at least\nwithin a virtual hosing group, Otherwise it will be serious disaster.</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">securekey</span> <span class=\"o\">=</span> <span class=\"s2\">\"ds8fdsflksdjf9879dsf;?&lt;&gt;Asda\"</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">session_timeout</span> <span class=\"o\">=</span> <span class=\"mi\">1200</span> <span class=\"c1\"># sec</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/session\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">form</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"s2\">\"login\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">:</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"hansroh\"</span><span class=\"p\">))</span>\n    <span class=\"c1\"># or</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span> <span class=\"p\">[</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"hansroh\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you set, alter or remove session value, session expiry is automatically\nextended by app.session_timeout. But just getting value will not be extended.\nIf you extend explicit without altering value, you can use touch() or\nset_expiry(). session.touch() will extend by app.session_timeout.\nsession.set_expiry (timeout) will extend by timeout value.</p>\n<p>Once you set expiry, session auto extenstion will be disabled until\nexpiry time become shoter than new expiry time is calculated by\napp.session_timeout.</p>\n<ul>\n<li>was.request.session.set (key, val)</li>\n<li>was.request.session.get (key, default = None)</li>\n<li>was.request.session.source_verified (): If current IP address\nmatches with last IP accesss session</li>\n<li>was.request.session.getv (key, default = None): If not\nsource_verified (), return default</li>\n<li>was.request.session.remove (key)</li>\n<li>was.request.session.clear ()</li>\n<li>was.request.session.keys ()</li>\n<li>was.request.session.values ()</li>\n<li>was.request.session.items ()</li>\n<li>was.request.session.has_key ()</li>\n<li>was.request.session.set_expiry (timeout)</li>\n<li>was.request.session.touch ()</li>\n<li>was.request.session.expire ()</li>\n<li>was.request.session.use_time ()</li>\n<li>was.request.session.impending (): if session timeout remains 20%</li>\n</ul>\n</div>\n<div id=\"messaging-box\">\n<h3><a href=\"#id52\" rel=\"nofollow\">Messaging Box</a></h3>\n<p><strong>was.request.mbox</strong> (<em>alias: was.mbox</em>)</p>\n<p>Like Flask\u2019s flash feature, Skitai also provide messaging tool.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/msg\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">msg</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">send</span> <span class=\"p\">(</span><span class=\"s2\">\"This is Flash Message\"</span><span class=\"p\">,</span> <span class=\"s2\">\"flash\"</span><span class=\"p\">)</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">send</span> <span class=\"p\">(</span><span class=\"s2\">\"This is Alert Message Kept by 60 seconds on every request\"</span><span class=\"p\">,</span> <span class=\"s2\">\"alram\"</span><span class=\"p\">,</span> <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">redirect</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s2\">\"showmsg\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hans Roh\"</span><span class=\"p\">),</span> <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s2\">\"302 Object Moved\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/showmsg\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">showmsg</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"msg.htm\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p>A part of msg.htm is like this:</p>\n<pre>Messages To {{ name }},\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n  {% for message_id, category, created, valid, msg, extra in was.request.mbox.get () %}\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span> {{ mtype }}: {{ msg }}<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n  {% endfor %}\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Default value of valid argument is 0, which means if page called\nwas.request.mbox.get() is finished successfully, it is automatically deleted\nfrom mbox.</p>\n<p>But like flash message, if messages are delayed by next request, these\nmessages are save into secured cookie value, so delayed/long term valid\nmessages size is limited by cookie specificatio. Then shorter and fewer\nmesssages would be better as possible.</p>\n<p>\u2018was.request.mbox\u2019 can be used for general page creation like handling notice,\nalram or error messages consistently. In this case, these messages\n(valid=0) is consumed by current request, there\u2019s no particular size\nlimitation.</p>\n<p>Also note valid argument is 0, it will be shown at next request just one\ntime, but inspite of next request is after hundred years, it will be\nshown if browser has cookie values.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">before_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">has_new_item</span> <span class=\"p\">():</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">send</span> <span class=\"p\">(</span><span class=\"s2\">\"New Item Arrived\"</span><span class=\"p\">,</span> <span class=\"s2\">\"notice\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/main\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"news.htm\"</span><span class=\"p\">)</span>\n</pre>\n<p>news.htm like this:</p>\n<pre>News for {{ was.g.username }},\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n  {% for mid, category, created, valid, msg, extra in was.request.mbox.get (\"notice\", \"news\") %}\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"{{category}}\"</span><span class=\"p\">&gt;</span> {{ msg }}<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n  {% endfor %}\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre>\n<ul>\n<li>was.request.mbox.send (msg, category, valid_seconds, key=val, \u2026)</li>\n<li>was.request.mbox.get () return [(message_id, category, created_time,\nvalid_seconds, msg, extra_dict)]</li>\n<li>was.request.mbox.get (category) filtered by category</li>\n<li>was.request.mbox.get (key, val) filtered by extra_dict</li>\n<li>was.request.mbox.source_verified (): If current IP address\nmatches with last IP accesss mbox</li>\n<li>was.request.mbox.getv (\u2026) return get () if source_verified ()</li>\n<li>was.request.mbox.search (key, val): find in extra_dict. if val\nis not given or given None, compare with category name. return\n[message_id, \u2026]</li>\n<li>was.request.mbox.remove (message_id)</li>\n</ul>\n</div>\n<div id=\"named-session-messaging-box\">\n<h3><a href=\"#id53\" rel=\"nofollow\">Named Session &amp; Messaging Box</a></h3>\n<p><em>New in skitai version 0.15.30</em></p>\n<p>You can create multiple named session and mbox objects by mount() methods.</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">session_timeout</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">securekey</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">secure</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"n\">http_only</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"n\">extend</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n <span class=\"p\">)</span>\n\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">securekey</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">secure</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"n\">http_only</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<p>For example, your app need isolated session or mbox seperated\ndefault session for any reasons, can create session named \u2018ADM\u2019\nand if this session or mbox is valid at only /admin URL.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"ADM\"</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'/admin'</span><span class=\"p\">)</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"admin_login\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"ADM\"</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'/admin'</span><span class=\"p\">)</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">send</span> <span class=\"p\">(</span><span class=\"s2\">\"10 data has been deleted\"</span><span class=\"p\">,</span> <span class=\"s1\">'warning'</span><span class=\"p\">)</span>\n</pre>\n<p>SECUREKEY_STRING needn\u2019t same with app.securekey. And path, domain,\nsecure, http_only args is for session cookie, you can mount any\nnamed sessions or mboxes with upper cookie path and upper cookie\ndomain. In other words, to share session or mbox with another apps,\npath should be closer to root (/).</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"ADM\"</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'/'</span><span class=\"p\">)</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"admin_login\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Above \u2018ADM\u2019 sesion can be accessed by all mounted apps because path is \u2018/\u2019.</p>\n<p>Also note was.request.session.mount () is exactly same as mounting default session.</p>\n<p>mount() is create named session or mbox if not exists, exists() is\njust check wheather exists named session already.</p>\n<pre><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">exists</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Your session maybe expired or signed out, please sign in again\"</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">exists</span> <span class=\"p\">(</span><span class=\"s2\">\"ADM\"</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Your admin session maybe expired or signed out, please sign in again\"</span>\n</pre>\n</div>\n<div id=\"file-upload\">\n<h3><a href=\"#id54\" rel=\"nofollow\">File Upload</a></h3>\n<pre><span class=\"n\">FORM</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n  &lt;form enctype=\"multipart/form-data\" method=\"post\"&gt;\n  &lt;input type=\"hidden\" name=\"submit-hidden\" value=\"Genious\"&gt;\n  &lt;p&gt;&lt;/p&gt;What is your name? &lt;input type=\"text\" name=\"submit-name\" value=\"Hans Roh\"&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;/p&gt;What files are you sending? &lt;br /&gt;\n  &lt;input type=\"file\" name=\"file\"&gt;\n  &lt;/p&gt;\n  &lt;input type=\"submit\" value=\"Send\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n\"\"\"</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/upload\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">upload</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">form</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">command</span> <span class=\"o\">==</span> <span class=\"s2\">\"get\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">FORM</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"file\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n      <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">save</span> <span class=\"p\">(</span><span class=\"s2\">\"d:</span><span class=\"se\">\\\\</span><span class=\"s2\">var</span><span class=\"se\">\\\\</span><span class=\"s2\">upload\"</span><span class=\"p\">,</span> <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"s2\">\"o\"</span><span class=\"p\">)</span> <span class=\"c1\"># overwrite</span>\n</pre>\n<p>\u2018file\u2019 object\u2019s attributes are:</p>\n<ul>\n<li>file.path: temporary saved file full path</li>\n<li>file.name: original file name posted</li>\n<li>file.size</li>\n<li>file.mimetype</li>\n<li>file.save (into, name = None, mkdir = False, dup = \u201cu\u201d)</li>\n<li>file.remove ()</li>\n<li>file.read ()<ul>\n<li>if name is None, used file.name</li>\n<li>dup:<ul>\n<li>u - make unique (default)</li>\n<li>o - overwrite</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"using-sql-map-with-sqlphile\">\n<h3><a href=\"#id55\" rel=\"nofollow\">Using SQL Map with SQLPhile</a></h3>\n<p><em>New in Version 0.26.13</em></p>\n<p><a href=\"https://pypi.python.org/pypi/sqlphile\" rel=\"nofollow\">SQLPhile</a> is SQL generator and can be accessed from was.sql.</p>\n<p>was.sql is a instance of sqlphile.SQLPhile.</p>\n<p>If you want to use SQL templates, create sub directory \u2018sqlmaps\u2019\nand place sqlmap files.</p>\n<pre><span class=\"c1\"># default engine is skitai.DB_PGSQL and also available skitai.DB_SQLITE3</span>\n<span class=\"c1\"># no need call for skitai.DB_PGSQL</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">setup_sqlphile</span> <span class=\"p\">(</span><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">DB_SQLITE3</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">select</span> <span class=\"p\">(</span><span class=\"n\">tbl_</span><span class=\"s1\">'user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s1\">'id, name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n  <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"s2\">\"@db\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n  <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">dispatch</span> <span class=\"p\">()</span>\n</pre>\n<p><em>New in skitai version 0.27</em></p>\n<p>From version 0.27 <a href=\"https://pypi.python.org/pypi/sqlphile\" rel=\"nofollow\">SQLPhile</a> is integrated with PostgreSQL and SQLite3.</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">setup_sqlphile</span> <span class=\"p\">(</span><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">DB_PGSQL</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">query</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">dbo</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"s2\">\"@mypostgres\"</span><span class=\"p\">)</span>\n  <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">dbo</span><span class=\"o\">.</span><span class=\"n\">select</span> <span class=\"p\">(</span><span class=\"s2\">\"cities\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"id, name\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">name__like</span> <span class=\"o\">=</span> <span class=\"s2\">\"virginia\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">()</span>\n  <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">dispatch</span> <span class=\"p\">()</span>\n  <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">dispatch</span> <span class=\"p\">(</span><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"n\">dbo</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"s2\">\"cities\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"New York\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">wait_or_throw</span> <span class=\"p\">(</span><span class=\"s2\">\"500 Server Error\"</span><span class=\"p\">)</span>\n</pre>\n<p>Please, visit <a href=\"https://pypi.python.org/pypi/sqlphile\" rel=\"nofollow\">SQLPhile</a> for more detail.</p>\n</div>\n<div id=\"registering-per-request-calling-functions\">\n<h3><a href=\"#id56\" rel=\"nofollow\">Registering Per Request Calling Functions</a></h3>\n<p>Method decorators called automatically when each method is\nrequested in a app.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">before_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">login</span> <span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Not Authorized\"</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">finish_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">finish_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">user_id</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">user_status</span>\n  <span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">failed_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">failed_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">user_id</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">user_status</span>\n  <span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">teardown_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">teardown_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">resouce</span><span class=\"o\">.</span><span class=\"n\">close</span> <span class=\"p\">()</span>\n  <span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/view-account\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">view_account</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">userid</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"jerry\"</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">user_status</span> <span class=\"o\">=</span> <span class=\"s2\">\"active\"</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">resouce</span> <span class=\"o\">=</span> <span class=\"nb\">open</span> <span class=\"p\">()</span>\n  <span class=\"k\">return</span> <span class=\"o\">...</span>\n</pre>\n<p>For this situation, \u2018was\u2019 provide was.g that is empty class instance.\nwas.g is valid only in current request. After end of current request.</p>\n<p>If view_account is called, Atila execute these sequence:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">before_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">content</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"n\">content</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">view_account</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">karg</span><span class=\"p\">)</span>\n\n  <span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">failed_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exc_info</span> <span class=\"p\">())</span>\n    <span class=\"k\">if</span> <span class=\"n\">content</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n      <span class=\"k\">raise</span>\n\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">finish_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">)</span>\n\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n  <span class=\"n\">teardown_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">)</span>\n\n<span class=\"k\">return</span> <span class=\"n\">content</span>\n</pre>\n<p>Be attention, failed_request\u2019s 2nd arguments is sys.exc_info ().\nAlso finish_request and teardown_request (NOT failed_request)\nshould return None (or return nothing).</p>\n<p>If you handle exception with failed_request (), return custom error\ncontent, or exception will be reraised and Atila will handle exception.</p>\n<p><em>New in skitai version 0.14.13</em></p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">failed_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">failed_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"p\">):</span>\n  <span class=\"c1\"># releasing resources</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span>\n    <span class=\"s2\">\"501 Server Error\"</span><span class=\"p\">,</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"err501.htm\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">\"We're sorry but something's going wrong\"</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"define-autoruns\">\n<h3><a href=\"#id57\" rel=\"nofollow\">Define Autoruns</a></h3>\n<p><em>New in skitai version 0.26.18</em></p>\n<p>You can make automation for preworks and postworks.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">pre1</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pre2</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post1</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">run_before</span> <span class=\"p\">(</span><span class=\"n\">pre1</span><span class=\"p\">,</span> <span class=\"n\">pre2</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">run_after</span> <span class=\"p\">(</span><span class=\"n\">post1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s1\">'index.html'</span><span class=\"p\">)</span>\n</pre>\n<p>@app.run_before can return None or responsable contents for\naborting all next run_before and main request.</p>\n<p>@app.run_after return will be ignored</p>\n</div>\n<div id=\"define-conditional-prework\">\n<h3><a href=\"#id58\" rel=\"nofollow\">Define Conditional Prework</a></h3>\n<p><em>New in skitai version 0.26.18</em></p>\n<p>@app.if~s are conditional executing decorators.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">reload_config</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">if_file_modified</span> <span class=\"p\">(</span><span class=\"s1\">'/opt/myapp/config'</span><span class=\"p\">,</span> <span class=\"n\">reload_config</span><span class=\"p\">,</span> <span class=\"n\">interval</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s1\">'index.html'</span><span class=\"p\">)</span>\n</pre>\n<p>@app.if_updated need more explaination.</p>\n</div>\n<div id=\"inter-process-update-notification-and-consequences-automation\">\n<h3><a href=\"#id59\" rel=\"nofollow\">Inter Process Update Notification and Consequences Automation</a></h3>\n<p><em>New in skitai version 0.26.18</em></p>\n<p>@app.if_updated is related with skitai.register_states (), was.setlu()\nand was.getlu() and these are already explained was cache contorl\npart. And Atila app can use more conviniently.</p>\n<p>These\u2019re used for mostly inter-process notification protocol.</p>\n<p>Before skitai.run (), you should define updatable objects as\nstring keys:</p>\n<pre><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">register_states</span> <span class=\"p\">(</span><span class=\"s2\">\"weather-news\"</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Then one process update object and update time by setlu ().</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_weather</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"s2\">\"insert into weathers ...\"</span><span class=\"p\">)</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">setlu</span> <span class=\"p\">(</span><span class=\"s2\">\"weather-news\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"o\">...</span>\n</pre>\n<p>This update time stamp will be recorded in shared memory, then all skitai\nworker processes can catch this update by comparing previous last update\ntime and automate consequences like refreshing cache.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">reload_cache</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">if_updated</span> <span class=\"p\">(</span><span class=\"s1\">'weather-news'</span><span class=\"p\">,</span> <span class=\"n\">reload_cache</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s1\">'index.html'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"app-lifecycle-hook\">\n<h3><a href=\"#id60\" rel=\"nofollow\">App Lifecycle Hook</a></h3>\n<p>These app life cycle methods will be called by this order,</p>\n<ul>\n<li>before_mount (wac): when app imported on skitai server started</li>\n<li>mounted (<em>was</em>): called first with was (instance of wac)</li>\n<li>mounted_or_reloaded (<em>was</em>): called with was (instance of wac)</li>\n<li>loop whenever app is reloaded,<ul>\n<li>oldapp.before_reload (<em>was</em>)</li>\n<li>newapp.reloaded (<em>was</em>)</li>\n<li>mounted_or_reloaded (<em>was</em>): called with was (instance of wac)</li>\n</ul>\n</li>\n<li>before_umount (<em>was</em>): called last with was (instance of wac),\nadd shutting down process</li>\n<li>umounted (wac): when skitai server enter shutdown process</li>\n</ul>\n<p>Please note that first arg of startup, reload and shutdown is <em>wac</em>\nnot <em>was</em>. <em>wac</em> is Python Class object of \u2018was\u2019, so mainly used\nfor sharing Skitai server-wide object via was.object before\ninstancelizing to <em>was</em>.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">before_mount</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_mount</span> <span class=\"p\">(</span><span class=\"n\">wac</span><span class=\"p\">):</span>\n  <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"app\"</span><span class=\"p\">)</span>\n  <span class=\"c1\"># OR</span>\n  <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">make_logger</span> <span class=\"p\">(</span><span class=\"s2\">\"login\"</span><span class=\"p\">,</span> <span class=\"s2\">\"daily\"</span><span class=\"p\">)</span>\n  <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">config</span>\n  <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">register</span> <span class=\"p\">(</span><span class=\"s2\">\"loginengine\"</span><span class=\"p\">,</span> <span class=\"n\">SNSLoginEngine</span> <span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"p\">))</span>\n  <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">register</span> <span class=\"p\">(</span><span class=\"s2\">\"searcher\"</span><span class=\"p\">,</span> <span class=\"n\">FulltextSearcher</span> <span class=\"p\">(</span><span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">numthreads</span><span class=\"p\">))</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">before_reload</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_remount</span> <span class=\"p\">(</span><span class=\"n\">wac</span><span class=\"p\">):</span>\n  <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">loginengine</span><span class=\"o\">.</span><span class=\"n\">reset</span> <span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">umounted</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_umount</span> <span class=\"p\">(</span><span class=\"n\">wac</span><span class=\"p\">):</span>\n  <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">umounted</span><span class=\"o\">.</span><span class=\"n\">close</span> <span class=\"p\">()</span>\n\n  <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">unregister</span> <span class=\"p\">(</span><span class=\"s2\">\"loginengine\"</span><span class=\"p\">)</span>\n  <span class=\"n\">wac</span><span class=\"o\">.</span><span class=\"n\">unregister</span> <span class=\"p\">(</span><span class=\"s2\">\"searcher\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can access numthreads, logger, config from wac.</p>\n<p>As a result, myobject can be accessed by all your current app\nfunctions even all other apps mounted on Skitai.</p>\n<pre><span class=\"c1\"># app mounted to 'abc.com/register'</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">loginengine</span><span class=\"o\">.</span><span class=\"n\">check_user_to</span> <span class=\"p\">(</span><span class=\"s2\">\"facebook\"</span><span class=\"p\">)</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">searcher</span><span class=\"o\">.</span><span class=\"n\">query</span> <span class=\"p\">(</span><span class=\"s2\">\"ipad\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># app mounted to 'def.com/'</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">searcher</span><span class=\"o\">.</span><span class=\"n\">query</span> <span class=\"p\">(</span><span class=\"s2\">\"news\"</span><span class=\"p\">)</span>\n</pre>\n<p><em>Note:</em> The way to mount with host, see <em>\u2018Mounting With Virtual\nHost\u2019</em> chapter below.</p>\n<p>It maybe used like plugin system. If a app which should be mounted\nloads pulgin-like objects, theses can be used by Skitai server\nwide apps via was.object1, was.object2,\u2026</p>\n<p><em>New in skitai version 0.26</em></p>\n<p>If you have databases or API servers, and want to create cache object\non app starting, you can use @app.mounted decorator.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">create_cache</span> <span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">):</span>\n  <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n  <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"n\">d</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">name</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s1\">'STATENAMES'</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">mounted</span>\n<span class=\"k\">def</span> <span class=\"nf\">mounted</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"s1\">'@mydb'</span><span class=\"p\">,</span> <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">create_cache</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"s2\">\"select code, name from states;\"</span><span class=\"p\">)</span>\n  <span class=\"c1\"># or use REST API</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s1\">'@myapi/v1/states'</span><span class=\"p\">,</span> <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">create_cache</span><span class=\"p\">)</span>\n  <span class=\"c1\"># or use RPC</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">rpc</span> <span class=\"p\">(</span><span class=\"s1\">'@myrpc/rpc2'</span><span class=\"p\">,</span> <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">create_cache</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_states</span> <span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">reloaded</span>\n<span class=\"k\">def</span> <span class=\"nf\">reloaded</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">mounted</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">)</span> <span class=\"c1\"># same as mounted</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">before_umount</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_umount</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"p\">(</span><span class=\"s1\">'@session/v1/sessions'</span><span class=\"p\">,</span> <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>But both are not called by request, you CAN\u2019T use request related\nobjects like was.request, was.request.cookie etc. And SHOULD use callback\nbecause these are executed within Main thread.</p>\n</div>\n<div id=\"login-and-permission-helper\">\n<h3><a href=\"#id61\" rel=\"nofollow\">Login and Permission Helper</a></h3>\n<p><em>New in skitai version 0.26.16</em></p>\n<p>You can define login &amp; permissoin check handler,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">login_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">login_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"demo_username\"</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">verify_csrf</span> <span class=\"p\">():</span>\n      <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"400 Bad Request\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"signin\"</span><span class=\"p\">):</span>\n      <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">authenticate</span> <span class=\"p\">(</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s2\">\"username\"</span><span class=\"p\">],</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s2\">\"password\"</span><span class=\"p\">])</span>\n      <span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"p\">:</span>\n        <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"demo_username\"</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"demo_permission\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n      <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mbox</span><span class=\"o\">.</span><span class=\"n\">send</span> <span class=\"p\">(</span><span class=\"s2\">\"Invalid User Name or Password\"</span><span class=\"p\">,</span> <span class=\"s2\">\"error\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"login.html\"</span><span class=\"p\">,</span> <span class=\"n\">user_form</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">DemoUserForm</span> <span class=\"p\">())</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_check_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">permission_check_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">perms</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"demo_permission\"</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">perms</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"403 Permission Denied\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">staff_member_check_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">staff_check_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"demo_permission\"</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">'staff'</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"403 Staff Permission Required\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you are using JWT you can integrate with this, And it\nis replacable instead of app.authorization_required.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_check_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">permission_check_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">perms</span><span class=\"p\">):</span>\n    <span class=\"n\">claims</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">JWT</span>\n    <span class=\"k\">if</span> <span class=\"s2\">\"err\"</span> <span class=\"ow\">in</span> <span class=\"n\">claims</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">claims</span> <span class=\"p\">[</span><span class=\"s2\">\"err\"</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">perms</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"c1\"># permit</span>\n    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">claims</span> <span class=\"p\">[</span><span class=\"s2\">\"levels\"</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">perms</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"c1\"># permit</span>\n    <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"403 Permission Denied\"</span><span class=\"p\">)</span>\n</pre>\n<p>And use it for your resources if you need,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_required</span> <span class=\"p\">([</span><span class=\"s2\">\"admin\"</span><span class=\"p\">])</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">login_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Hello\"</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">staff_member_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">index2</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Hello\"</span>\n</pre>\n<p>If every thing is OK, it <em>SHOULD return None, not True</em>.</p>\n<p>\u2018clarify_permission\u2019 and \u2018clarify_login\u2019 will ignore any raise\nHTTP error but just try run \u2018permission_check_handler\u2019. You can\nset request.user object if user has permission.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_check_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">permission_check_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">perms</span><span class=\"p\">):</span>\n    <span class=\"n\">claims</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">JWT</span>\n    <span class=\"k\">if</span> <span class=\"s2\">\"err\"</span> <span class=\"ow\">in</span> <span class=\"n\">claims</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"n\">claims</span> <span class=\"p\">[</span><span class=\"s2\">\"err\"</span><span class=\"p\">]</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">claims</span> <span class=\"p\">[</span><span class=\"s1\">'uid'</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">perms</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"c1\"># permit</span>\n    <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"403 Permission Denied\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">clarify_permission</span> <span class=\"c1\"># ignore http error on handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'permission denied'</span>\n  <span class=\"k\">return</span> <span class=\"s1\">'permission granted'</span>\n</pre>\n<div id=\"conditional-permission-control\">\n<h4><a href=\"#id62\" rel=\"nofollow\">Conditional Permission Control</a></h4>\n<p><em>New in version 0.3</em></p>\n<p>Let\u2019s assume you manage permission by user levels: admin,\nstaff and user.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_check_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">permission_check_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">perms</span><span class=\"p\">):</span>\n  <span class=\"n\">claims</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">JWT</span>\n  <span class=\"k\">if</span> <span class=\"s2\">\"err\"</span> <span class=\"ow\">in</span> <span class=\"n\">claims</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">claims</span> <span class=\"p\">[</span><span class=\"s2\">\"err\"</span><span class=\"p\">]</span>\n\n  <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">perms</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"c1\"># permit for anyone who is authorized</span>\n  <span class=\"k\">if</span> <span class=\"n\">claims</span> <span class=\"p\">[</span><span class=\"s2\">\"level\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"admin\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"c1\"># premit always</span>\n  <span class=\"k\">if</span> <span class=\"s2\">\"admin\"</span> <span class=\"ow\">in</span> <span class=\"n\">perms</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"403 Permission Denied\"</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"s2\">\"staff\"</span> <span class=\"ow\">in</span> <span class=\"n\">prems</span> <span class=\"ow\">and</span> <span class=\"n\">claims</span> <span class=\"p\">[</span><span class=\"s2\">\"level\"</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">\"staff\"</span><span class=\"p\">:</span>\n      <span class=\"k\">raise</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Error</span> <span class=\"p\">(</span><span class=\"s2\">\"403 Permission Denied\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/animals/&lt;id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_required</span> <span class=\"p\">([],</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"staff\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">animals</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span> <span class=\"ow\">or</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">JWT</span> <span class=\"p\">[</span><span class=\"s2\">\"userid\"</span><span class=\"p\">]</span>\n</pre>\n<p>This resources required any permission for \u201c/animals/\u201d or\n\u201c/animals/me\u201d. But \u2018/animals/100\u2019 is required \u2018staff\u2019 permission.\nIt may make permission control more simpler.</p>\n<p>Also you can specify premissions per request methods.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/animals/&lt;id&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"DELETE\"</span><span class=\"p\">])</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">permission_required</span> <span class=\"p\">([</span><span class=\"s1\">'user'</span><span class=\"p\">],</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"staff\"</span><span class=\"p\">],</span> <span class=\"n\">DELETE</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"admin\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">animals</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span> <span class=\"ow\">or</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">JWT</span> <span class=\"p\">[</span><span class=\"s2\">\"userid\"</span><span class=\"p\">]</span>\n</pre>\n<p>This resources required \u2018user\u2019 permission for \u201c/animals/\u201d or \u201c/animals/me\u201d.\n\u2018/animals/100\u2019 is required \u2018staff\u2019 permission. It may make\npermission control more simpler.</p>\n</div>\n<div id=\"testpassing\">\n<h4><a href=\"#id63\" rel=\"nofollow\">Testpassing</a></h4>\n<p>Also you can test if user is valid,</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">is_superuser</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'root'</span><span class=\"p\">):</span>\n    <span class=\"n\">reutrn</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"403 Permission Denied\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">testpass_required</span> <span class=\"p\">(</span><span class=\"n\">is_superuser</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">modify_profile</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre>\n<p>The binded testpass_required function can return,</p>\n<ul>\n<li>True or None: continue request</li>\n<li>False: response 403 Permission Denied immediately</li>\n<li>Responsable object: response object immediately</li>\n</ul>\n</div>\n</div>\n<div id=\"cross-site-request-forgery-token-csrf-token\">\n<h3><a href=\"#id64\" rel=\"nofollow\">Cross Site Request Forgery Token (CSRF Token)</a></h3>\n<p><em>New in skitai version 0.26.16</em></p>\n<p>At template, insert CSRF Token,</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n{{ was.csrf_token_input }}\n...\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n</pre>\n<p>then verify token like this,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">before_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">verify_csrf</span> <span class=\"p\">():</span>\n      <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s2\">\"400 Bad Request\"</span><span class=\"p\">)</span>\n</pre>\n<p>Or use decorator,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">csrf_verification_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_request</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"making-one-time-token\">\n<h3><a href=\"#id65\" rel=\"nofollow\">Making One-Time Token</a></h3>\n<p><em>New in skitai version 0.26.17</em></p>\n<p>For creatiing onetime link url, you can convert your data to\nsignatured token string.</p>\n<p>Note: Like JWT token, this token contains data and decode easily,\nthen you should not contain important information like password or\nPIN. This token just make sure contained data is not altered by\ncomparing signature which is generated with your app scret key.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'/password-reset'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">password_reset</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s2\">\"hans\"</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">mkott</span> <span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"s2\">\"pwrset\"</span><span class=\"p\">)</span> <span class=\"c1\"># valid within 1 hour</span>\n    <span class=\"n\">pw_reset_url</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s1\">'reset_password'</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n    <span class=\"c1\"># send email</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s1\">'done.html'</span><span class=\"p\">)</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">(</span><span class=\"s1\">'token'</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">deott</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s1\">'token'</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">username</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span><span class=\"s1\">'400 Bad Request'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># processing password reset</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>If you want to expire token explicit, add session token key</p>\n<pre><span class=\"c1\"># valid within 1 hour and create session token named '_reset_token'</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">mkott</span> <span class=\"p\">(</span><span class=\"s2\">\"hans\"</span><span class=\"p\">,</span> <span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"s1\">'rset'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">kO6EYlNE2QLNnospJ</span><span class=\"o\">+</span><span class=\"n\">jjOMJjzbw</span><span class=\"err\">?</span><span class=\"n\">fXEAKFgGAAAAb2JqZWN0</span><span class=\"o\">...</span>\n\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">deott</span> <span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"s2\">\"hans\"</span>\n\n<span class=\"c1\"># if processing is done and for revoke token,</span>\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">rvott</span> <span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"app-event-handling\">\n<h3><a href=\"#id66\" rel=\"nofollow\">App Event Handling</a></h3>\n<p>Most of Atila\u2019s event handlings are implemented with\nexcellent <a href=\"https://pypi.python.org/pypi/event-bus\" rel=\"nofollow\">event-bus</a> library.</p>\n<p><em>New in skitai version 0.26.16</em>, <em>Availabe only on Python 3.5+</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">atila</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on</span> <span class=\"p\">(</span><span class=\"n\">atila</span><span class=\"o\">.</span><span class=\"n\">app_starting</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_starting_handler</span> <span class=\"p\">(</span><span class=\"n\">wasc</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s2\">\"I got it!\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on</span> <span class=\"p\">(</span><span class=\"n\">atila</span><span class=\"o\">.</span><span class=\"n\">request_failed</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">request_failed_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s2\">\"I got it!\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on</span> <span class=\"p\">(</span><span class=\"n\">atila</span><span class=\"o\">.</span><span class=\"n\">template_rendering</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">template_rendering_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s2\">\"I got it!\"</span><span class=\"p\">)</span>\n</pre>\n<p>There\u2019re some app events.</p>\n<ul>\n<li>atila.app_starting: required (wasc)</li>\n<li>atila.app_started: required (wasc)</li>\n<li>atila.app_restarting: required (wasc)</li>\n<li>atila.app_restarted: required (wasc)</li>\n<li>atila.app_mounted: required (was)</li>\n<li>atila.app_unmounting: required (was)</li>\n<li>atila.request_failed: required ( was, exc_info)</li>\n<li>atila.request_success: required (was)</li>\n<li>atila.request_tearing_down: required (was)</li>\n<li>atila.request_starting: required (was)</li>\n<li>atila.request_finished: required (was)</li>\n</ul>\n</div>\n<div id=\"app-storage\">\n<h3><a href=\"#id67\" rel=\"nofollow\">App Storage</a></h3>\n<p><em>app.store</em> object is ditionary like object and provide\nthread-safe accessing.</p>\n<p>It SHOULD be simple primitive value like string, int, float.\nAbout dictionary or class instances, It can\u2019t give no guarantee\nfor thread-safe.</p>\n<pre><span class=\"k\">def</span>  <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">current_users</span><span class=\"p\">):</span>\n  <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"total-user\"</span><span class=\"p\">)</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"total-user\"</span><span class=\"p\">,</span> <span class=\"n\">total</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"inverval-base-app-maintenancing\">\n<h3><a href=\"#id68\" rel=\"nofollow\">Inverval Base App Maintenancing</a></h3>\n<p>If you need interval base maintaining jobs,</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">maintain_interval</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>  <span class=\"c1\"># seconds</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">set</span> <span class=\"p\">(</span><span class=\"s2\">\"num-nodes\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\"># thread safe store</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">maintain</span>\n<span class=\"k\">def</span> <span class=\"nf\">maintain_num_nodes</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">now</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n  <span class=\"n\">num_nodes</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">getlu</span> <span class=\"p\">(</span><span class=\"s2\">\"cluster.num-nodes\"</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">store</span> <span class=\"p\">[</span><span class=\"s2\">\"num-nodes\"</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">num_nodes</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">store</span> <span class=\"p\">[</span><span class=\"s2\">\"num-nodes\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">num_nodes</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">broadcast</span> <span class=\"p\">(</span><span class=\"s2\">\"cluster:num_nodes\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can add multiple maintain jobs but maintain function\nnames is SHOULD be unique.</p>\n</div>\n<div id=\"creating-and-handling-custom-event\">\n<h3><a href=\"#id69\" rel=\"nofollow\">Creating and Handling Custom Event</a></h3>\n<p><em>Availabe only on Python 3.5+</em></p>\n<p>For creating custom event and event handler,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on</span> <span class=\"p\">(</span><span class=\"s2\">\"user-updated\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_updated</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre>\n<p>For emitting,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">users</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"p\">()</span>\n  <span class=\"o\">...</span>\n\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">emit</span> <span class=\"p\">(</span><span class=\"s2\">\"user-updated\"</span><span class=\"p\">,</span> <span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s1\">'userid'</span><span class=\"p\">])</span>\n\n  <span class=\"k\">return</span> <span class=\"s1\">''</span>\n</pre>\n<p>If event hasn\u2019t args, you can use <cite>emit_after</cite> decorator,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">])</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">emit_after</span> <span class=\"p\">(</span><span class=\"s2\">\"user-updated\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">users</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"p\">()</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">return</span> <span class=\"s1\">''</span>\n</pre>\n<p>Using this, you can build automatic excution chain,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on</span> <span class=\"p\">(</span><span class=\"s2\">\"photo-updated\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">photo_updated</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on</span> <span class=\"p\">(</span><span class=\"s2\">\"user-updated\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">emit_after</span> <span class=\"p\">(</span><span class=\"s2\">\"photo-updated\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_updated</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">])</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">emit_after</span> <span class=\"p\">(</span><span class=\"s2\">\"user-updated\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">users</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"p\">()</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">return</span> <span class=\"s1\">''</span>\n</pre>\n</div>\n<div id=\"cross-app-communication-accessing-resources\">\n<h3><a href=\"#id70\" rel=\"nofollow\">Cross App Communication &amp; Accessing Resources</a></h3>\n<p>Skitai prefer spliting apps to small microservices and mount\nthem each. This feature make easy to move some of your mounted\napps move to another machine. But this make difficult to\ncommunicate between apps.</p>\n<p>Here\u2019s some helpful solutions.</p>\n<div id=\"accessing-app-object-properties\">\n<h4><a href=\"#id71\" rel=\"nofollow\">Accessing App Object Properties</a></h4>\n<p><em>New in skitai version 0.26.7.2</em></p>\n<p>You can mount multiple app on Skitai, and maybe need to another\napp is mounted seperatly.</p>\n<pre><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"main.py\"</span><span class=\"p\">)</span>\n<span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/query\"</span><span class=\"p\">,</span> <span class=\"s2\">\"search.py\"</span><span class=\"p\">)</span>\n</pre>\n<p>And you can access from filename of app from each apps,</p>\n<pre><span class=\"n\">search_app</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">apps</span> <span class=\"p\">[</span><span class=\"s2\">\"search\"</span><span class=\"p\">]</span>\n<span class=\"n\">save_path</span> <span class=\"o\">=</span> <span class=\"n\">search_app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">save_path</span>\n</pre>\n</div>\n<div id=\"url-building-for-resource-accessing\">\n<h4><a href=\"#id72\" rel=\"nofollow\">URL Building for Resource Accessing</a></h4>\n<p><em>New in skitai version 0.26.7.2</em></p>\n<p>If you mount multiple apps like this,</p>\n<pre><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"main.py\"</span><span class=\"p\">)</span>\n<span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/search\"</span><span class=\"p\">,</span> <span class=\"s2\">\"search.py\"</span><span class=\"p\">)</span>\n</pre>\n<p>For building url in <cite>main.py</cite> app from a query function of\n<cite>search.py</cite> app, you should specify app file name with colon.</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">urlfor</span> <span class=\"p\">(</span><span class=\"s1\">'search:query'</span><span class=\"p\">,</span> <span class=\"s2\">\"Your Name\"</span><span class=\"p\">)</span> <span class=\"c1\"># returned '/search/query?q=Your%20Name'</span>\n</pre>\n<p>And this is exactly same as,</p>\n<blockquote>\nwas.apps [\u201csearch\u201d].build_url (\u201cquery\u201d, \u201cYour Name\u201d)</blockquote>\n<p>But this is only functioning between apps are mounted\nwithin same host.</p>\n</div>\n<div id=\"custom-error-handling\">\n<h4><a href=\"#id73\" rel=\"nofollow\">Custom Error Handling</a></h4>\n<p><em>New in skitai version 0.26.7</em></p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">default_error_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">default_error_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"&lt;h1&gt;</span><span class=\"si\">{code}</span><span class=\"s2\"> </span><span class=\"si\">{message}</span><span class=\"s2\">&lt;/h1&gt;\"</span><span class=\"o\">.</span><span class=\"n\">format</span> <span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">error</span><span class=\"p\">)</span>\n</pre>\n<p>Or you can respond with JSON only.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">error_handler</span> <span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">not_found</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"&lt;h1&gt;</span><span class=\"si\">{code}</span><span class=\"s2\"> </span><span class=\"si\">{message}</span><span class=\"s2\">&lt;/h1&gt;\"</span><span class=\"o\">.</span><span class=\"n\">format</span> <span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">error</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>code: error code</li>\n<li>message: error message</li>\n<li>detail: error detail</li>\n<li>mode: debug or normal</li>\n<li>debug: debug info</li>\n<li>time: time when error occured</li>\n<li>url: request url</li>\n<li>software: server name and version</li>\n<li>traceback: available only if app.debug = True or None</li>\n</ul>\n<p>Note that custom error templates can not be used before\nrouting to the app.</p>\n</div>\n<div id=\"communication-with-event\">\n<h4><a href=\"#id74\" rel=\"nofollow\">Communication with Event</a></h4>\n<p><em>New in skitai version 0.26.10</em>\n<em>Availabe only on Python 3.5+</em></p>\n<p>\u2018was\u2019 can work as an event bus using app.on_broadcast ()\n- was.broadcast () pair. Let\u2019s assume that an users.py app\nhandle only user data, and another photo.py app handle only\nphotos of users.</p>\n<pre><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"s1\">'users.py'</span><span class=\"p\">)</span>\n<span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/photos'</span><span class=\"p\">,</span> <span class=\"s1\">'photos.py'</span><span class=\"p\">)</span>\n</pre>\n<p>If a user update own profile, sometimes photo information\nshould be updated.</p>\n<p>At photos.py, you can prepare for listening to \u2018user:data-added\u2019\nevent and this event will be emited from \u2018was\u2019.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on_broadcast</span> <span class=\"p\">(</span><span class=\"s1\">'user:data-added'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">refresh_user_cache</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">userid</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">sqlite3</span> <span class=\"p\">(</span><span class=\"s1\">'@photodb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"s1\">'update ...'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">wait</span> <span class=\"p\">()</span>\n</pre>\n<p>and uses.py, you just emit \u2018user:data-added\u2019 event to \u2018was\u2019.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"PATCH\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">users</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"p\">()</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">sqlite3</span> <span class=\"p\">(</span><span class=\"s1\">'@userdb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"s1\">'update ...'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">wait</span> <span class=\"p\">()</span>\n\n  <span class=\"c1\"># broadcasting event to all mounted apps</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">broadcast</span> <span class=\"p\">(</span><span class=\"s1\">'user:data-added'</span><span class=\"p\">,</span> <span class=\"n\">args</span> <span class=\"p\">[</span><span class=\"s1\">'userid'</span><span class=\"p\">])</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"p\">(</span>\n    <span class=\"s2\">\"200 OK\"</span><span class=\"p\">,</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span> <span class=\"p\">({}),</span>\n    <span class=\"p\">[(</span><span class=\"s2\">\"Content-Type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"application/json\"</span><span class=\"p\">)]</span>\n  <span class=\"p\">)</span>\n</pre>\n<p>If resource always broadcasts event without args, use\n<cite>broadcast_after</cite> decorator.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">broadcast_after</span> <span class=\"p\">(</span><span class=\"s1\">'some-event'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">users</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"p\">()</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">sqlite3</span> <span class=\"p\">(</span><span class=\"s1\">'@userdb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"s1\">'update ...'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">wait</span> <span class=\"p\">()</span>\n</pre>\n<p>Note that this decorator cannot be routed by app.route ().</p>\n<p><strong>CAUTION</strong>: Do not use request specific variables - like request,\ncookie, session and etc in event handler.</p>\n</div>\n</div>\n<div id=\"cors-cross-origin-resource-sharing-and-preflight\">\n<h3><a href=\"#id75\" rel=\"nofollow\">CORS (Cross Origin Resource Sharing) and Preflight</a></h3>\n<p>For allowing CORS, you should do 2 things:</p>\n<ul>\n<li>set app.access_control_allow_origin</li>\n<li>allow OPTIONS methods for routing</li>\n</ul>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">access_control_allow_origin</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"*\"</span><span class=\"p\">]</span>\n<span class=\"c1\"># OR specific origins</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">access_control_allow_origin</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"http://www.skitai.com:5001\"</span><span class=\"p\">]</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">access_control_max_age</span> <span class=\"o\">=</span> <span class=\"mi\">3600</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/post\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">post</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"p\">()</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">jstream</span> <span class=\"p\">({</span><span class=\"o\">...</span><span class=\"p\">})</span>\n</pre>\n<p>If you want function specific CORS,</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span>\n <span class=\"s2\">\"/post\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">],</span>\n <span class=\"n\">access_control_allow_origin</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"http://www.skitai.com:5001\"</span><span class=\"p\">],</span>\n <span class=\"n\">access_control_max_age</span> <span class=\"o\">=</span> <span class=\"mi\">3600</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">post</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"p\">()</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">jstream</span> <span class=\"p\">({</span><span class=\"o\">...</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"www-authenticate\">\n<h3><a href=\"#id76\" rel=\"nofollow\">WWW-Authenticate</a></h3>\n<p><em>Changed in version 0.15.21</em></p>\n<blockquote>\n<ul>\n<li>removed app.user and app.password</li>\n<li>add app.users object has get(username) methods like dictionary</li>\n</ul>\n</blockquote>\n<p>Atila provide simple authenticate for administration or\nperform access control from other system\u2019s call.</p>\n<div id=\"authentication-on-specific-methods\">\n<h4><a href=\"#id77\" rel=\"nofollow\">Authentication On Specific Methods</a></h4>\n<p>Otherwise you can make some routes requirigng authorization\nlike this:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello/&lt;name&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">authenticate</span> <span class=\"o\">=</span> <span class=\"s2\">\"digest\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hans Roh\"</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Hello, </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n</pre>\n<p>Or you can use @app.authorization_required decorator.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello/&lt;name&gt;\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">authorization_required</span> <span class=\"p\">(</span><span class=\"s2\">\"digest\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hans Roh\"</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Hello, </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n</pre>\n<p>Available authorization methods are basic, digest and bearer.</p>\n</div>\n<div id=\"password-provider\">\n<h4><a href=\"#id78\" rel=\"nofollow\">Password Provider</a></h4>\n<p>You can provide password and user information getter by 2 ways.</p>\n<p>First, users object</p>\n<pre><span class=\"c1\"># users object shoukd have get(username) method</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"hansroh\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"1234\"</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)}</span>\n</pre>\n<p>Second, use decorator</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">authorization_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">auth_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"s2\">\"1234\"</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>The return object can be:</p>\n<blockquote>\n<ul>\n<li>(str password, boolean encrypted, obj userinfo)</li>\n<li>(str password, boolean encrypted)</li>\n<li>str password</li>\n<li>None if authorization failed</li>\n</ul>\n</blockquote>\n<p>If you use encrypted password, you should use digest authorization\nand password should encrypt by this way:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">md5</span>\n\n<span class=\"n\">encrypted_password</span> <span class=\"o\">=</span> <span class=\"n\">md5</span> <span class=\"p\">(</span>\n  <span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">encode</span> <span class=\"p\">(</span><span class=\"s2\">\"utf8\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span> <span class=\"p\">()</span>\n</pre>\n<p>If authorization is successful, app can access username and userinfo\nvi was.request.user.</p>\n<blockquote>\n<ul>\n<li>was.request.user.name</li>\n<li>was.request.user.realm</li>\n<li>was.request.user.info</li>\n</ul>\n</blockquote>\n<p>If your server run with SSL, you can use app.authorization = \u201cbasic\u201d,\notherwise recommend using \u201cdigest\u201d for your password safety.</p>\n</div>\n<div id=\"authentication-on-entire-app\">\n<h4><a href=\"#id79\" rel=\"nofollow\">Authentication On Entire App</a></h4>\n<p>For your convinient, you can set authorization requirements to app level.</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">authenticate</span> <span class=\"o\">=</span> <span class=\"s2\">\"digest\"</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"s2\">\"Partner App Area of mysite.com\"</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"app\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"iamyourpartnerapp\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"s1\">'root'</span><span class=\"p\">})}</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/hello/&lt;name&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hans Roh\"</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Hello, </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n</pre>\n<p>If app.authenticate is set, all routes of app require authorization\n(default is False).</p>\n</div>\n</div>\n<div id=\"jwt-bearer-authorization\">\n<h3><a href=\"#id80\" rel=\"nofollow\">(JWT) Bearer Authorization</a></h3>\n<p>To making JWT token, your app need securekey.</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">securekey</span> <span class=\"o\">=</span> <span class=\"s1\">'5b2c4f18-01fd-4b85-8cfa-01827878562f'</span>\n</pre>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">mkjwt</span> <span class=\"p\">({</span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hansroh\"</span><span class=\"p\">,</span> <span class=\"s2\">\"exp\"</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span> <span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXV</span><span class=\"o\">...</span>\n</pre>\n<p>Note: was.dejwt (token) is also available.</p>\n<p>Then client should add \u2018Authorization\u2019 to API request like,</p>\n<pre><span class=\"n\">Authorization</span><span class=\"p\">:</span> <span class=\"n\">Bearer</span> <span class=\"n\">eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXV</span><span class=\"o\">...</span>\n</pre>\n<p>And use bearer_handler decorators.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">bearer_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">bearer_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n  <span class=\"c1\"># if not JWT token,</span>\n  <span class=\"n\">claims</span> <span class=\"o\">=</span> <span class=\"n\">parse_your_token_yourself</span> <span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n  <span class=\"c1\"># if JWT, just use was.request.JWT</span>\n  <span class=\"n\">claims</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">JWT</span>\n  <span class=\"k\">if</span> <span class=\"s2\">\"err\"</span> <span class=\"ow\">in</span> <span class=\"n\">claims</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">claims</span> <span class=\"p\">[</span><span class=\"s2\">\"err\"</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/api/v1/predict\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">authorization_required</span> <span class=\"p\">(</span><span class=\"s2\">\"bearer\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">predict</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"c1\"># now you can use these</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"c1\"># hansroh</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">JWT</span> <span class=\"c1\"># dict {\"username\": \"hansroh\", \"exp\": 2900...}</span>\n</pre>\n<p>For your convinient, above bearer_handler is registered as\ndefault handler, but you can still override it.</p>\n</div>\n<div id=\"implementing-xmlrpc-service\">\n<h3><a href=\"#id81\" rel=\"nofollow\">Implementing XMLRPC Service</a></h3>\n<p>Client Side:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aquests</span>\n\n<span class=\"n\">stub</span> <span class=\"o\">=</span> <span class=\"n\">aquests</span><span class=\"o\">.</span><span class=\"n\">rpc</span> <span class=\"p\">(</span><span class=\"s2\">\"http://127.0.0.1:5000/rpc\"</span><span class=\"p\">)</span>\n<span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">add</span> <span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"n\">fetchall</span> <span class=\"p\">()</span>\n</pre>\n<p>Server Side:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/add\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">num1</span><span class=\"p\">,</span> <span class=\"n\">num2</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">num1</span> <span class=\"o\">+</span> <span class=\"n\">num2</span>\n</pre>\n<p>Is there nothing to diffrence? Yes. Atila app methods are also\nused for XMLRPC service if return values are XMLRPC dumpable.</p>\n</div>\n<div id=\"implementing-grpc-service\">\n<h3><a href=\"#id82\" rel=\"nofollow\">Implementing gRPC Service</a></h3>\n<p>Client Side:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aquests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">route_guide_pb2</span>\n\n<span class=\"n\">stub</span> <span class=\"o\">=</span> <span class=\"n\">aquests</span><span class=\"o\">.</span><span class=\"n\">grpc</span> <span class=\"p\">(</span><span class=\"s2\">\"http://127.0.0.1:5000/routeguide.RouteGuide\"</span><span class=\"p\">)</span>\n<span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">route_guide_pb2</span><span class=\"o\">.</span><span class=\"n\">Point</span> <span class=\"p\">(</span><span class=\"n\">latitude</span><span class=\"o\">=</span><span class=\"mi\">409146138</span><span class=\"p\">,</span> <span class=\"n\">longitude</span><span class=\"o\">=-</span><span class=\"mi\">746188906</span><span class=\"p\">)</span>\n<span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">GetFeature</span> <span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span>\n<span class=\"n\">aquests</span><span class=\"o\">.</span><span class=\"n\">fetchall</span> <span class=\"p\">()</span>\n</pre>\n<p>Server Side:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">route_guide_pb2</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_feature</span> <span class=\"p\">(</span><span class=\"n\">feature_db</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">):</span>\n  <span class=\"k\">for</span> <span class=\"n\">feature</span> <span class=\"ow\">in</span> <span class=\"n\">feature_db</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">location</span> <span class=\"o\">==</span> <span class=\"n\">point</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"n\">feature</span>\n  <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/GetFeature\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">GetFeature</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">):</span>\n  <span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">get_feature</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">feature</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">route_guide_pb2</span><span class=\"o\">.</span><span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"n\">point</span><span class=\"p\">)</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">feature</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\n<span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'/routeguide.RouteGuide'</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n<span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">urn</span> <span class=\"p\">()</span>\n</pre>\n<p>For an example, here\u2019s my <a href=\"https://pypi.python.org/pypi/tfserver\" rel=\"nofollow\">tfserver</a> for Tensor Flow Model Server.</p>\n<p>For more about gRPC and route_guide_pb2, go to <a href=\"http://www.grpc.io/docs/tutorials/basic/python.html\" rel=\"nofollow\">gRPC Basics - Python</a>.</p>\n<p>Note: I think I don\u2019t understand about gRPC\u2019s stream request and\nresponse. Does it means chatting style? Why does data stream has\ninterval like GPS data be handled as stream type? If it is chat style\nstream, is it more efficient that use proto buffer on Websocket protocol?\nIn this case, it is even possible collaborating between multiple gRPC\nclients.</p>\n</div>\n<div id=\"logging-and-traceback\">\n<h3><a href=\"#id83\" rel=\"nofollow\">Logging and Traceback</a></h3>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">sum</span> <span class=\"p\">():</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">log</span> <span class=\"p\">(</span><span class=\"s2\">\"called index\"</span><span class=\"p\">,</span> <span class=\"s2\">\"info\"</span><span class=\"p\">)</span>\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n  <span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">log</span> <span class=\"p\">(</span><span class=\"s2\">\"exception occured\"</span><span class=\"p\">,</span> <span class=\"s2\">\"error\"</span><span class=\"p\">)</span>\n    <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">traceback</span> <span class=\"p\">()</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">log</span> <span class=\"p\">(</span><span class=\"s2\">\"done index\"</span><span class=\"p\">,</span> <span class=\"s2\">\"info\"</span><span class=\"p\">)</span>\n</pre>\n<p>Note inspite of you do not handle exception, all app exceptions will\nbe logged automatically by Atila. And it includes app importing and\nreloading exceptions.</p>\n<ul>\n<li>was.log (msg, category = \u201cinfo\u201d)</li>\n<li>was.traceback (id = \u201c\u201d) # id is used as fast searching log line\nfor debug, if not given, id will be <em>Global transaction ID/Local\ntransaction ID</em></li>\n</ul>\n</div>\n<div id=\"exposing-api-specification\">\n<h3><a href=\"#id84\" rel=\"nofollow\">Exposing API Specification</a></h3>\n<p>For debugging and helping to write API specification, Atila\nexpose all specification of each resources.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/isitok/&lt;code&gt;/&lt;type&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PATCH\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">isitok</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s2\">\"ok\"</span><span class=\"p\">)</span>\n</pre>\n<p>That will return,</p>\n<pre><span class=\"p\">{</span><span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ok\"</span><span class=\"p\">}</span>\n</pre>\n<p>If you set like this,</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">expose_spec</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>Then will be returned with spec,</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ok\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"__spec__\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'isitok'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'routeopt'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'methods'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PATCH\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">],</span>\n          <span class=\"s1\">'route'</span><span class=\"p\">:</span> <span class=\"s1\">'/isitok/&lt;code&gt;/&lt;type&gt;'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'args'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'code'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">],</span>\n          <span class=\"s1\">'keywords'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n          <span class=\"s1\">'urlargs'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n          <span class=\"s1\">'mntopt'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"s1\">'module_name'</span><span class=\"p\">:</span> <span class=\"s1\">'services.v1.apis'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'point'</span><span class=\"p\">:</span> <span class=\"s1\">'/v1/apis'</span>\n          <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"s1\">'auth_requirements'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n      <span class=\"s1\">'parameter_requirements'</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n      <span class=\"s1\">'doc'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n      <span class=\"s1\">'current_request'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'http_method'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'http_version'</span><span class=\"p\">:</span> <span class=\"s1\">'1.1'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'uri'</span><span class=\"p\">:</span> <span class=\"s1\">'/v1/apis/isitok'</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Note: This will only work at your local machine (IP address\nstarts with 127.0.0.).</p>\n</div>\n<div id=\"app-testing\">\n<h3><a href=\"#id85\" rel=\"nofollow\">App Testing</a></h3>\n<p>For automated test, Atila provide test_client (). Test client\nwill just emulate client-server communication.</p>\n<p>myapp.py is:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"&lt;h1&gt;something&lt;/h1&gt;\"</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/apis/pets/&lt;int:id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">pets</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">API</span> <span class=\"p\">({</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"s2\">\"kind\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Monk\"</span><span class=\"p\">})</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">(</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n</pre>\n<p>If you run unittest with pytest, your test script is like this.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_myapp</span> <span class=\"p\">():</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">myapp</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n\n  <span class=\"k\">with</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">test_client</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">approot</span> <span class=\"o\">=</span> <span class=\"s2\">\".\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cli</span><span class=\"p\">:</span>\n    <span class=\"c1\"># html request</span>\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"s2\">\"something\"</span> <span class=\"ow\">in</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span>\n\n    <span class=\"c1\"># api call</span>\n    <span class=\"n\">stub</span> <span class=\"o\">=</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">api</span> <span class=\"p\">()</span>\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">apis</span><span class=\"o\">.</span><span class=\"n\">pets</span> <span class=\"p\">(</span><span class=\"mi\">45</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">45</span>\n\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">apis</span><span class=\"o\">.</span><span class=\"n\">pets</span> <span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>\n</pre>\n<p>Now run pytest.</p>\n<p>Above code works fine if your app is composed with single\nfile. If your app has sub modules, app will raise relative\nimport related error.</p>\n<p>..code:: python</p>\n<blockquote>\n<p>import skitai\nimport atila</p>\n<dl>\n<dt>def test_myapp ():</dt>\n<dd><dl>\n<dt>with skitai.preference () as pref:</dt>\n<dd>app = atila.load (\u201c./mayapp/app.py\u201d, pref)</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n<p>If your app is located as your module\u2019s export/skitai/__export__.py,</p>\n<p>..code:: python</p>\n<blockquote>\nimport your_module\napp = atila.load (your_module, pref)</blockquote>\n<p>Now, you are ready to test.</p>\n<p>Note: Internal requests like was.get, was.post, was.jsonrpc\nand database engine operations will work with synchronous\nmode and may will be slow.</p>\n</div>\n</div>\n<div id=\"vuejs-with-skito-atila\">\n<h2><a href=\"#id86\" rel=\"nofollow\">VueJS with Skito-Atila</a></h2>\n<div id=\"without-module-bundlers\">\n<h3><a href=\"#id87\" rel=\"nofollow\">Without Module Bundlers</a></h3>\n<p>I recently wrote about <a href=\"https://gitlab.com/hansroh/http-sfc\" rel=\"nofollow\">Single File Component Based Website</a>.</p>\n<p>It is based on <a href=\"https://github.com/FranckFreiburger/http-vue-loader\" rel=\"nofollow\">FranckFreiburger/http-vue-loader</a> and I made\nsome examplary templates.</p>\n</div>\n<div id=\"with-bundlers\">\n<h3><a href=\"#id88\" rel=\"nofollow\">With Bundlers</a></h3>\n<p>I prefer to build VueJS as frontend app and Atila as backend.</p>\n<p>Basic project directory stucture is,</p>\n<p>project root</p>\n<ul>\n<li>frontend (vue project)<ul>\n<li>&lt;dist&gt;</li>\n<li>&lt;node_modules&gt;</li>\n<li>&lt;src&gt;</li>\n<li>&lt;public&gt;</li>\n<li>package.json</li>\n<li>vue.config.js</li>\n<li>\u2026</li>\n</ul>\n</li>\n<li>backend<ul>\n<li>&lt;services&gt;</li>\n<li>serve.py</li>\n</ul>\n</li>\n</ul>\n<p>The core line sof serve.py,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atila</span> <span class=\"kn\">import</span> <span class=\"n\">Atila</span>\n<span class=\"kn\">import</span> <span class=\"nn\">skitai</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">services</span> <span class=\"kn\">import</span> <span class=\"n\">api</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/api/v1\"</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">)</span> <span class=\"c1\"># for backend API service</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/&lt;path:path&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">vapp</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">File</span> <span class=\"p\">(</span><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">joinpath</span> <span class=\"p\">(</span><span class=\"s2\">\"../frontend\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dist\"</span><span class=\"p\">,</span> <span class=\"s2\">\"index.html\"</span><span class=\"p\">),</span> <span class=\"s2\">\"text/html\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">preference</span> <span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pref</span><span class=\"p\">:</span>\n      <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">securekey</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n      <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">max_client_body_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">32</span>\n      <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">access_control_allow_origin</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"127.0.0.1:5000\"</span><span class=\"p\">]</span>\n\n      <span class=\"k\">if</span> <span class=\"s2\">\"---production\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">:</span>\n          <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n          <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n          <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">access_control_allow_origin</span><span class=\"o\">.</span><span class=\"n\">append</span> <span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1:8080\"</span><span class=\"p\">)</span>\n\n      <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n      <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"../frontend/dist\"</span><span class=\"p\">,</span> <span class=\"n\">pref</span> <span class=\"o\">=</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n    <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"myapp\"</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n</pre>\n<p>This skitai starting script do these things,</p>\n<ul>\n<li>If requested URL is one of atila routes, then routed to it</li>\n<li>Otherwise all URL is routed to vue SPA (dist/index.html)</li>\n<li>All static root mounted to frontend/dist directory\nfor service compiled js and css by webpack</li>\n</ul>\n<p>You can develop vue app by,</p>\n<pre>npm run serve\n<span class=\"c1\"># generally use port 8080</span>\n</pre>\n<p>And Atila app developing by,</p>\n<pre>python3 ../backend/serve.py\n<span class=\"c1\"># use port 5000</span>\n</pre>\n<p>Finally,</p>\n<pre>npm run build\npython3 ../backend/serve.py\n</pre>\n<p>If you interest about thi stuff, you can have <a href=\"https://gitlab.com/hansroh/skito-vue\" rel=\"nofollow\">reference</a>\nwhich I personally build as bolier-plate. But it is just planning stage.</p>\n</div>\n</div>\n<div id=\"working-with-jinja2-template-engine\">\n<h2><a href=\"#id89\" rel=\"nofollow\">Working With Jinja2 Template Engine</a></h2>\n<p>If you want to use Jinja2 template engine, install first.</p>\n<pre>pip3 install -U jinja2\n</pre>\n<p>Although You can use any template engine, Skitai provides was.render()\nwhich uses <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> template engine. For providing arguments to Jinja2,\nuse dictionary or keyword arguments.</p>\n<pre><span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"index.html\"</span><span class=\"p\">,</span> <span class=\"n\">choice</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"s2\">\"Apples\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#is same with:</span>\n\n<span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"index.html\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"choice\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"product\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Apples\"</span><span class=\"p\">})</span>\n\n<span class=\"c1\">#BUT CAN'T:</span>\n\n<span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"index.html\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"choice\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"s2\">\"Apples\"</span><span class=\"p\">)</span>\n</pre>\n<p>Directory structure sould be:</p>\n<ul>\n<li>/project_home/app.py</li>\n<li>/project_home/templates/index.html</li>\n</ul>\n<p>Within template, you can access <cite>was</cite> and aliases for your convinient.</p>\n<ul>\n<li>was</li>\n<li>app: alias for was.app which handling request</li>\n<li>request: alias for was.request</li>\n<li>response: alias for was.response</li>\n<li>context: namespace for given keyword arguments (or dictionary keys)</li>\n</ul>\n<p>Note that these names cannot ne used as context variable name.</p>\n<p>Also available registered with @app.template_global decorator and\ngiven keyword arguments (or dictionary keys).</p>\n<pre>{{ request.cookie.username }} choices item {{ request.ARGS.get (\"choice\", \"N/A\") }}.\n\n<span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{{ was.urlfor ('checkout', context.choice) }}\"</span><span class=\"p\">&gt;</span>Proceed<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Also \u2018was.g\u2019 is can be useful in case threr\u2019re lots\nof render parameters.</p>\n<pre><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"s2\">\"Apple\"</span>\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">howmany</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s2\">\"index.html\"</span><span class=\"p\">)</span>\n</pre>\n<p>And at jinja2 template,</p>\n<pre>Checkout for {{ was.g.howmany }} {{ was.g.product }}{{ was.g.howmany &gt; 1 and \"s\" or \"\"}}\n</pre>\n<p>If you want modify Jinja2 envrionment, can through\nwas.app.jinja_env object.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">generate_form_token</span> <span class=\"p\">():</span>\n  <span class=\"o\">...</span>\n\n<span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">jinja_env</span><span class=\"o\">.</span><span class=\"n\">globals</span><span class=\"p\">[</span><span class=\"s1\">'form_token'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">generate_form_token</span>\n</pre>\n<p>And this is same as,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">template_global</span> <span class=\"p\">(</span><span class=\"s1\">'form_token'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">generate_form_token</span> <span class=\"p\">():</span>\n  <span class=\"o\">...</span>\n</pre>\n<p><em>New in skitai version 0.15.16</em></p>\n<p>Added new app.jinja_overlay () for easy calling\napp.jinja_env.overlay ().</p>\n<p>Recently JS HTML renderers like Vue.js, React.js\nhave confilicts  with default jinja mustache variable.\nIn this case you mightbe need change it.</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Atila</span> <span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">jinja_overlay</span> <span class=\"p\">(</span>\n  <span class=\"n\">variable_start_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"{{\"</span><span class=\"p\">,</span>\n  <span class=\"n\">variable_end_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"}}\"</span><span class=\"p\">,</span>\n  <span class=\"n\">block_start_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"{%\"</span><span class=\"p\">,</span>\n  <span class=\"n\">block_end_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"%}\"</span><span class=\"p\">,</span>\n  <span class=\"n\">comment_start_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"{#\"</span><span class=\"p\">,</span>\n  <span class=\"n\">comment_end_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"#}\"</span><span class=\"p\">,</span>\n  <span class=\"n\">line_statement_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"%\"</span><span class=\"p\">,</span>\n  <span class=\"n\">line_comment_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">%%</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n  <span class=\"o\">**</span><span class=\"n\">kargs</span> <span class=\"c1\"># Jinja2 Environment arguments</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To add Jinja2 extensions,</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_jinja_ext</span> <span class=\"p\">(</span><span class=\"s1\">'jinja2.ext.i18n'</span><span class=\"p\">)</span>\n</pre>\n<p>Currently, Atila use \u201cjinja2.ext.do\u201d, \u201cjinja2.ext.loopcontrols\u201d defaultly.</p>\n<p>If you want remove extensions,</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">jinja_overlay</span> <span class=\"p\">(</span><span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[])</span>\n</pre>\n<div id=\"using-skitai-async-requests-services-working-with-jinja2-template\">\n<h3><a href=\"#id90\" rel=\"nofollow\">Using Skitai Async Requests Services Working With Jinja2 Template</a></h3>\n<p>If you want to use Jinja2 template engine, install first.</p>\n<pre>pip3 install -U jinja2\n</pre>\n<p>Basic usage is <a href=\"https://pypi.org/project/skitai/#skitai-was-services\" rel=\"nofollow\">here</a>.</p>\n<p>Async request\u2019s benefit will be maximied at your view template\nrather than your controller. At controller, you just fire your\nrequests and get responses at your template.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">login_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">intro</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">aa</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"https://example.com/blur/blur\"</span><span class=\"p\">)</span>\n  <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"p\">(</span><span class=\"s2\">\"https://example.com/blur/blur/more-blur\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s1\">'template.html'</span><span class=\"p\">)</span>\n</pre>\n<p>Your template,</p>\n<pre>{% set response = was.g.aa.dispatch () %}\n{% if response.status == 3 %}\n  {{ was.response.throw (\"500 Internal Server Error\") }}\n{% endif %}\n\n{% if response.status_code == 200 %}\n  {% for each in response.data %}\n    ...\n  {% endfor %}\n{% endif %}\n</pre>\n<p><em>Available only with Atila</em></p>\n<p>Shorter version is for dispatch and throw HTTP error,</p>\n<pre>{% set response = was.g.aa.dispatch_or_throw (\"500 Internal Server Error\") %}\n</pre>\n</div>\n<div id=\"registering-global-template-function\">\n<h3><a href=\"#id91\" rel=\"nofollow\">Registering Global Template Function</a></h3>\n<p><em>New in skitai version 0.26.16</em></p>\n<p>template_global decorator makes a function possible to use\nin your template,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">template_global</span> <span class=\"p\">(</span><span class=\"s2\">\"test_global\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">keys</span> <span class=\"p\">())</span>\n</pre>\n<p>At template,</p>\n<pre>{{ test_global () }}\n</pre>\n<p>Note that all template global function\u2019s first parameter\nshould be <em>was</em>. But when calling, you SHOULDN\u2019t give <em>was</em>.</p>\n</div>\n<div id=\"registering-jinja2-filter\">\n<h3><a href=\"#id92\" rel=\"nofollow\">Registering Jinja2 Filter</a></h3>\n<p><em>New in skitai version 0.26.16</em></p>\n<p>template_filter decorator makes a function possible\nto use in your template,</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">template_filter</span> <span class=\"p\">(</span><span class=\"s2\">\"reverse\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">reverse_filter</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">s</span> <span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<p>At template,</p>\n<pre>{{ \"Hello\" | reverse }}\n</pre>\n</div>\n<div id=\"custom-error-template\">\n<h3><a href=\"#id93\" rel=\"nofollow\">Custom Error Template</a></h3>\n<p><em>New in skitai version 0.26.7</em></p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">default_error_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">default_error_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s1\">'default.htm'</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">error_handler</span> <span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">not_found</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">render</span> <span class=\"p\">(</span><span class=\"s1\">'404.htm'</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"p\">)</span>\n</pre>\n<p>Template file 404.html is like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>{{ error.code }} {{ error.message }}<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>{{ error.detail }}<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">hr</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>URL: {{ error.url }}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>Time: {{ error.time }}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Note that custom error templates can not be used before\nrouting to the app.</p>\n</div>\n</div>\n<div id=\"working-with-chameleon-template-engine\">\n<h2><a href=\"#id94\" rel=\"nofollow\">Working With Chameleon Template Engine</a></h2>\n<p><a href=\":https://pypi.org/project/Chameleon/\" rel=\"nofollow\">Chameleon</a> is an beautiful HTML/XML template engine.</p>\n<p>For using this engine you install first.</p>\n<pre>pip3 install -U chameleon\n</pre>\n<p>If you save Chameleon template with \u2018.pt\u2019 or \u2018.ptal\u2019\nextensions at templates directory, Atila will render\nthis template with Chameleon.</p>\n</div>\n<div id=\"working-with-django\">\n<h2><a href=\"#id95\" rel=\"nofollow\">Working With Django</a></h2>\n<p><em>New in skitai version 0.26.15</em></p>\n<p>I barely use Django, but recently I have opportunity using\nDjango and it is very fantastic and especially impressive\nto Django Admin System.</p>\n<p>Here are some examples collaborating with Djnago and Atila.</p>\n<p>Before it begin, you should mount Django app,</p>\n<pre><span class=\"c1\"># mount django admin</span>\n<span class=\"k\">with</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">preference</span> <span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pref</span><span class=\"p\">:</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n  <span class=\"c1\"># '/' mapped with django.admin in urls.py</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s2\">\"/admin\"</span><span class=\"p\">,</span> <span class=\"s1\">'django/wsgi.py'</span><span class=\"p\">,</span> <span class=\"s1\">'application'</span><span class=\"p\">,</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mount main app</span>\n<span class=\"k\">with</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">preference</span> <span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pref</span><span class=\"p\">:</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_reloader</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n  <span class=\"n\">pref</span><span class=\"o\">.</span><span class=\"n\">use_debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n  <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">mount</span> <span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'app.py'</span><span class=\"p\">,</span> <span class=\"n\">pref</span> <span class=\"o\">=</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n\n<span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">()</span>\n</pre>\n<p>When Django app is mounted, these will be processed.</p>\n<ol>\n<li>add django project root path will be added to sys.path</li>\n<li>app is mounted</li>\n<li>database alias (@mydjangoapp) will be created as\nbase name of django project root</li>\n</ol>\n<div id=\"using-django-models\">\n<h3><a href=\"#id96\" rel=\"nofollow\">Using Django Models</a></h3>\n<p>You can use also Django models without mount app.</p>\n<p>First of all, you should specify django setting with\nalias for django database engine.</p>\n<pre><span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">alias</span> <span class=\"p\">(</span><span class=\"s2\">\"@django\"</span><span class=\"p\">,</span> <span class=\"n\">skitai</span><span class=\"o\">.</span><span class=\"n\">DJANGO</span><span class=\"p\">,</span> <span class=\"s2\">\"myapp/settings.py\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then call django.setup ()  and you can use your models,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">django</span>\n<span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">setup</span> <span class=\"p\">()</span> <span class=\"c1\"># should call</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mydjangoapp.photos</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"nd\">@app</span><span class=\"p\">,</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'/django/hello'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">django_hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Photo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span> <span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'Hans Roh'</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'My Photo'</span><span class=\"p\">)</span>\n  <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Photo</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'hansroh'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span> <span class=\"p\">(</span><span class=\"s1\">'-create_at'</span><span class=\"p\">)</span>\n</pre>\n<p>You can use Django Query Set as SQL generator for\nSkitai\u2019s asynchronous query execution. But it has\nsome limitations.</p>\n<ul>\n<li>just vaild only select query and prefetch_related ()</li>\n<li>effetive only to PostgreSQL and SQLite3 (but SQLite3\ndose not support asynchronous execution, so it is practically meaningless)</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mydjangoapp.photos</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"nd\">@app</span><span class=\"p\">,</span><span class=\"n\">route</span> <span class=\"p\">(</span><span class=\"s1\">'/hello'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">django_hello</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">):</span>\n  <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Photo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">jstream</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">sqlite3</span> <span class=\"p\">(</span><span class=\"s2\">\"@entity\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span> <span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dispatch</span> <span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"how-to\">\n<h2><a href=\"#id97\" rel=\"nofollow\">How To</a></h2>\n<h2 id=\"response-all-errors-as-json\"><span class=\"section-subtitle\">Response All Errors As JSON</span></h2>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">default_error_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">default_error_handler</span> <span class=\"p\">(</span><span class=\"n\">was</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n  <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"p\">[</span><span class=\"s2\">\"errno\"</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"nb\">str</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"p\">[</span><span class=\"s2\">\"code\"</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s1\">'00'</span>\n  <span class=\"k\">return</span> <span class=\"n\">was</span><span class=\"o\">.</span><span class=\"n\">Fault</span> <span class=\"p\">(</span>\n    <span class=\"n\">error</span> <span class=\"p\">[</span><span class=\"s2\">\"message\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span> <span class=\"p\">(),</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">error</span> <span class=\"p\">[</span><span class=\"s2\">\"detail\"</span><span class=\"p\">],</span> <span class=\"n\">exc_info</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"p\">[</span><span class=\"s2\">\"traceback\"</span><span class=\"p\">]</span>\n  <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"links\">\n<h2><a href=\"#id98\" rel=\"nofollow\">Links</a></h2>\n<ul>\n<li><a href=\"https://gitlab.com/hansroh/atila\" rel=\"nofollow\">GitLab Repository</a></li>\n<li>Bug Report: <a href=\"https://gitlab.com/hansroh/atila/issues\" rel=\"nofollow\">GitLab issues</a></li>\n</ul>\n</div>\n<div id=\"change-log\">\n<h2><a href=\"#id99\" rel=\"nofollow\">Change Log</a></h2>\n<ul>\n<li>0.8  (Feb, 2020)<ul>\n<li>add was.Static</li>\n<li>add <em>400 Not My Fault</em> with assert</li>\n<li>add notags and safes arguments to @app.require</li>\n<li>now, csrf token uses cookie not session and kept with browser</li>\n<li>add remove_csrf ()</li>\n<li>fix corequest cache sync</li>\n<li>update, config.MINIFY_HTML = None (default) | \u2018strip\u2019 | \u2018minify\u2019</li>\n<li>add @app.csrf_verification_required</li>\n<li>add <a href=\"mailto:'%40app.clarify_permission\">\u2018<span>@</span>app<span>.</span>clarify_permission</a>\u2019 and <a href=\"mailto:'%40app.clarify_login\">\u2018<span>@</span>app<span>.</span>clarify_login</a>\u2019 decorators</li>\n<li>add __setup__ hook for service packages.__init__.py</li>\n</ul>\n</li>\n<li>0.7 (Dec, 2019)<ul>\n<li>fix &lt;path&gt; type routing</li>\n<li>change URL build alias from was.urlspec ()</li>\n<li>change URL build alias from was.ab () to was.urlfor ()</li>\n<li>add alias was.urlpatch () for was.partial () for clarity</li>\n<li>add session.impending () and session.use_time ()</li>\n<li>change default options for Jinja2</li>\n<li>change session key name</li>\n<li>fix session expireation</li>\n<li>add extend param to session.mount ()</li>\n<li>add was.render_or_API ()</li>\n<li>add was.request.acceptables and was.request.acceptable (media)</li>\n<li>fix @app.fix testpass_required when reloading</li>\n<li>change session.mount spec</li>\n<li>fix multiple mount bug related <cite>enable_namespace</cite></li>\n<li>fix websocket bug related <cite>enable_namespace</cite></li>\n<li><cite>app.auto_mount</cite> was deprecated</li>\n<li>default value of  <cite>app.enable_namespace</cite> has been\nfrom False to True. ACTION REQUIRED, lower version\nincompatible</li>\n</ul>\n</li>\n<li>0.6 (Oct, 2019)<ul>\n<li>fix query string exception handling</li>\n<li>readd Chameleon template engine chapter to README</li>\n<li>test on PyPy</li>\n</ul>\n</li>\n<li>0.5 (Sep, 2019)<ul>\n<li>add app example</li>\n<li>update requirements</li>\n</ul>\n</li>\n<li>0.4 (Aug, 2019)<ul>\n<li>now, modules within __mount__ are reloadable</li>\n<li>deprecated @app.test_params, use @app.require</li>\n<li>deprecated was.Future and was.Futures, it doesn\u2019t need.</li>\n</ul>\n</li>\n<li>0.3 (Mar 13, 2019)<ul>\n<li>remove proxing django route</li>\n<li>remove login service with django</li>\n<li>remove django model signal redirecting</li>\n<li>add @app.require</li>\n<li>change mount handler: def mount (app) =&gt;\ndef __mount__ (app) but lower version compatible</li>\n<li>make available @app.route (\u201c\u201d)</li>\n<li>add was.proxypass (alias, path, timeout = 3)</li>\n<li>add special pre-defined URL parameter value: me, notme, new</li>\n<li>add parameter validation, now response code 400,\nif validatiion if failed</li>\n<li>fix implicit routing</li>\n<li>add conditional permission control</li>\n</ul>\n</li>\n<li>0.2 (Feb 18, 2019)<ul>\n<li>fix implicit routing for root</li>\n<li>remove jinja2 from requirements</li>\n<li>add app.websocket_send ()</li>\n<li>fix Futures respinse bugs</li>\n<li>add was.API (), was.Fault (), was.File and\nwas.Futures ()</li>\n</ul>\n</li>\n<li>0.1 (Jan 17, 2019)<ul>\n<li>was.promise () has been deprecated, use was.Futures ()</li>\n<li>add interval based maintain jobs executor</li>\n<li>change name from app.storage to app.store</li>\n<li>add default_bearer_handler</li>\n<li>fix routing bugs related fancy URL</li>\n<li>add was.request.URL, DEFAULT, FORM (former was.request.form ()),\nJSON (former was.request.json ()), DATA (former was.request.data),\nARGS (former was.request.args)</li>\n<li>add @app.test_param (required = None, ints = None, floats = None)</li>\n<li>project has been seperated from skitai and rename from\nsaddle to atila, because saddle project is already exist on PYPI</li>\n</ul>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7004225, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "be5e4bd163ff10f5af3cb64f92521f5d", "sha256": "de3b448d5e8727c45fb84bc6cbd5be91a0797e44811268554f35a3ab2ccef84f"}, "downloads": -1, "filename": "atila-0.1.tar.gz", "has_sig": false, "md5_digest": "be5e4bd163ff10f5af3cb64f92521f5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106545, "upload_time": "2019-01-26T13:45:05", "upload_time_iso_8601": "2019-01-26T13:45:05.502954Z", "url": "https://files.pythonhosted.org/packages/1f/46/dfacfe755f7b63a89ff6f75c809e84c25f622082e40788cb4467a2ba5713/atila-0.1.tar.gz", "yanked": false}], "0.1.0.1": [{"comment_text": "", "digests": {"md5": "8a37528090fe2a5d41503e6ca977f9bf", "sha256": "bdbb6790d64eab95ffa5576d5a4e2f7438d3c9cdc646f0871ec4b590a7a786f5"}, "downloads": -1, "filename": "atila-0.1.0.1.tar.gz", "has_sig": false, "md5_digest": "8a37528090fe2a5d41503e6ca977f9bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105467, "upload_time": "2019-02-01T08:21:46", "upload_time_iso_8601": "2019-02-01T08:21:46.615666Z", "url": "https://files.pythonhosted.org/packages/3a/fa/c7c20010a6231e4a1f6dbd8210a3198766a780a65203808008b2e01ba4ba/atila-0.1.0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f2c177d02569c5277007676bf78aa48b", "sha256": "77ee5ad20eb854a7ab9a8232a66c00a24a6aab15e699fbd6e7dda753a778661a"}, "downloads": -1, "filename": "atila-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f2c177d02569c5277007676bf78aa48b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105596, "upload_time": "2019-02-04T12:00:57", "upload_time_iso_8601": "2019-02-04T12:00:57.791825Z", "url": "https://files.pythonhosted.org/packages/76/65/86d2c4b324c055117b81e38e7dbcc54ccf063698b537db901c645895fb00/atila-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7889e5323e02e9457a9f74d3399e54c6", "sha256": "0038b0f6f99231d815b94607998239da9c796823efc92e49864c878be9dfd913"}, "downloads": -1, "filename": "atila-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7889e5323e02e9457a9f74d3399e54c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106196, "upload_time": "2019-02-06T02:10:33", "upload_time_iso_8601": "2019-02-06T02:10:33.602826Z", "url": "https://files.pythonhosted.org/packages/9a/93/8b7113060aa85cdb4dd80da1b1b754cc358023c28bc5b61d91a72280a9ed/atila-0.1.2.tar.gz", "yanked": false}], "0.1.2.1": [{"comment_text": "", "digests": {"md5": "1fe1c6acd2976cf47d4b4dbb92e97b1e", "sha256": "06d9d110f85bd4c6505327e8cf03924ef464b11e28cf5c99ed621b836e6c62db"}, "downloads": -1, "filename": "atila-0.1.2.1.tar.gz", "has_sig": false, "md5_digest": "1fe1c6acd2976cf47d4b4dbb92e97b1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108263, "upload_time": "2019-02-06T20:47:36", "upload_time_iso_8601": "2019-02-06T20:47:36.693714Z", "url": "https://files.pythonhosted.org/packages/58/f4/51e61a60995ff9a091ad30e276ea32709be89f59117e34b32a32740dfbd9/atila-0.1.2.1.tar.gz", "yanked": false}], "0.1.2.2": [{"comment_text": "", "digests": {"md5": "7bcbd303ef256f58f0d5d42c7721bd9d", "sha256": "6bee0cf27beaf3f3a00e7f7c37e42fa788b0f0b33257cb42132c652d32e3fc3c"}, "downloads": -1, "filename": "atila-0.1.2.2.tar.gz", "has_sig": false, "md5_digest": "7bcbd303ef256f58f0d5d42c7721bd9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109119, "upload_time": "2019-02-11T08:19:45", "upload_time_iso_8601": "2019-02-11T08:19:45.035232Z", "url": "https://files.pythonhosted.org/packages/39/63/ce6cabbf35502849f5399280ac4fa8f3ca7af5f2f640b17c02bb579d25f6/atila-0.1.2.2.tar.gz", "yanked": false}], "0.1.2.3": [{"comment_text": "", "digests": {"md5": "ee443a9c3285b2600b291d90a648e6b6", "sha256": "bbe4e7594432b7889c350f60a171c060aaf1c52094cd5e2a9a69ca923009a1ef"}, "downloads": -1, "filename": "atila-0.1.2.3.tar.gz", "has_sig": false, "md5_digest": "ee443a9c3285b2600b291d90a648e6b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109124, "upload_time": "2019-02-11T19:26:19", "upload_time_iso_8601": "2019-02-11T19:26:19.939067Z", "url": "https://files.pythonhosted.org/packages/2b/18/44dd4a2ebee7193bbd7f943552b1950c5dc92aac8474e6b968001cc8a81b/atila-0.1.2.3.tar.gz", "yanked": false}], "0.1.2.4": [{"comment_text": "", "digests": {"md5": "65db7907ae4c92dcc4552dfc35f04499", "sha256": "03dc520e5ce26c1bec5c9f1c791fcefd14a37345aa2cf2ef14b14226c0196705"}, "downloads": -1, "filename": "atila-0.1.2.4.tar.gz", "has_sig": false, "md5_digest": "65db7907ae4c92dcc4552dfc35f04499", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110421, "upload_time": "2019-02-13T06:59:38", "upload_time_iso_8601": "2019-02-13T06:59:38.896548Z", "url": "https://files.pythonhosted.org/packages/34/00/284db3de7682a738bbd980008b8fbebd693c630310505be5de88aa9ea4d2/atila-0.1.2.4.tar.gz", "yanked": false}], "0.1.2.5": [{"comment_text": "", "digests": {"md5": "7b15eb3f7432b8727a5c1991b977e1c7", "sha256": "838ef8db0daa016522bb80282782924b76a57261b2c289a7787fe6c1416101a0"}, "downloads": -1, "filename": "atila-0.1.2.5.tar.gz", "has_sig": false, "md5_digest": "7b15eb3f7432b8727a5c1991b977e1c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110955, "upload_time": "2019-02-15T02:03:28", "upload_time_iso_8601": "2019-02-15T02:03:28.042211Z", "url": "https://files.pythonhosted.org/packages/e4/88/842c9936be80fa27d3dd1cc0c6599918b72f885fe8656fe6f60945a25de4/atila-0.1.2.5.tar.gz", "yanked": false}], "0.1.2.6": [{"comment_text": "", "digests": {"md5": "7775d207922c675b94dda1dffcd02cb5", "sha256": "f4d659326fbfda6d038e255efaf2ac97c213726a7b0684a2d33a8100f65de445"}, "downloads": -1, "filename": "atila-0.1.2.6.tar.gz", "has_sig": false, "md5_digest": "7775d207922c675b94dda1dffcd02cb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107775, "upload_time": "2019-02-17T09:00:55", "upload_time_iso_8601": "2019-02-17T09:00:55.334461Z", "url": "https://files.pythonhosted.org/packages/48/fa/8f943c0edb24b35cc8d6293a3a7646ccfc406613116f7ee0e5cc6cb0bdd7/atila-0.1.2.6.tar.gz", "yanked": false}], "0.1.2.7": [{"comment_text": "", "digests": {"md5": "07eebab00673971c102178d2bb048d31", "sha256": "f568abc4d7cfa6bcdc640fb262eb211a29f2c73d780cfead0191dd3008633908"}, "downloads": -1, "filename": "atila-0.1.2.7.tar.gz", "has_sig": false, "md5_digest": "07eebab00673971c102178d2bb048d31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107762, "upload_time": "2019-02-17T11:42:03", "upload_time_iso_8601": "2019-02-17T11:42:03.388932Z", "url": "https://files.pythonhosted.org/packages/52/2b/51331fd57ee9691afcbe043b616e72d85da9c8eb6c68051e3201cd288387/atila-0.1.2.7.tar.gz", "yanked": false}], "0.1a1": [{"comment_text": "", "digests": {"md5": "cb58d97ad34f4d0985f1898e39a84d1f", "sha256": "6072cfee4c02aa2cd52b23daed9a155b4e948a683045913fd6a598cbf3d627f5"}, "downloads": -1, "filename": "atila-0.1a1.tar.gz", "has_sig": false, "md5_digest": "cb58d97ad34f4d0985f1898e39a84d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 178638, "upload_time": "2019-01-17T00:19:59", "upload_time_iso_8601": "2019-01-17T00:19:59.892852Z", "url": "https://files.pythonhosted.org/packages/0d/8a/e992eb828f45725080feb9eb271608c46cc12a44661cedd703b4123375be/atila-0.1a1.tar.gz", "yanked": false}], "0.1a2": [{"comment_text": "", "digests": {"md5": "45105424150f2deea524b1e072d03839", "sha256": "f7165f1c49057482af974e130ed5a6b83b8e1e2d79ac4a78c6fb5538174363ae"}, "downloads": -1, "filename": "atila-0.1a2.tar.gz", "has_sig": false, "md5_digest": "45105424150f2deea524b1e072d03839", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104138, "upload_time": "2019-01-17T06:06:58", "upload_time_iso_8601": "2019-01-17T06:06:58.531223Z", "url": "https://files.pythonhosted.org/packages/8d/20/e16e7f15796f4204fd300bddfe5740b55c03f8ecb1aeb37d2cb02964c273/atila-0.1a2.tar.gz", "yanked": false}], "0.1a3": [{"comment_text": "", "digests": {"md5": "f90859f856e9d7d76c7a99836768392a", "sha256": "e90fa20d122758471b48f5eb8826a59dbdde8f0ab37e0e03dec9959efe85714d"}, "downloads": -1, "filename": "atila-0.1a3.tar.gz", "has_sig": false, "md5_digest": "f90859f856e9d7d76c7a99836768392a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102516, "upload_time": "2019-01-17T13:36:10", "upload_time_iso_8601": "2019-01-17T13:36:10.830303Z", "url": "https://files.pythonhosted.org/packages/62/7b/b6bf76833b099c7653a74692cd5ce11824a02d24e3ba747c9568903ef44c/atila-0.1a3.tar.gz", "yanked": false}], "0.1a4": [{"comment_text": "", "digests": {"md5": "08ccb0f3236c09d4c8684cb4f70b1c27", "sha256": "74538879795988f31a1842f0d4e5f8e38c50913aae82f9c9051c1b6474c2577a"}, "downloads": -1, "filename": "atila-0.1a4.tar.gz", "has_sig": false, "md5_digest": "08ccb0f3236c09d4c8684cb4f70b1c27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104174, "upload_time": "2019-01-20T07:59:58", "upload_time_iso_8601": "2019-01-20T07:59:58.199456Z", "url": "https://files.pythonhosted.org/packages/61/24/a4d4c74595db646b7234f1f4828653b4117faa487343a955dfa9f6d9c972/atila-0.1a4.tar.gz", "yanked": false}], "0.1a5": [{"comment_text": "", "digests": {"md5": "f1a717b7fb53337df4a5857e5ff8fa40", "sha256": "c8a2beb12bd3ee61f22fe82124199a5432b60668d7510a95543edacea6c4f25d"}, "downloads": -1, "filename": "atila-0.1a5.tar.gz", "has_sig": false, "md5_digest": "f1a717b7fb53337df4a5857e5ff8fa40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104901, "upload_time": "2019-01-22T15:14:11", "upload_time_iso_8601": "2019-01-22T15:14:11.323652Z", "url": "https://files.pythonhosted.org/packages/03/fa/a0d217e5c1d552a23a80e8e6b10d4bd4eb807b7b4fe224ed44d99da04186/atila-0.1a5.tar.gz", "yanked": false}], "0.1a6": [{"comment_text": "", "digests": {"md5": "e958ca0d93991658f3c3bf237f0476fe", "sha256": "343a39c4f92cd1a40de013d9b946811b8f22ac0629e2ab11ea59d1211568566a"}, "downloads": -1, "filename": "atila-0.1a6.tar.gz", "has_sig": false, "md5_digest": "e958ca0d93991658f3c3bf237f0476fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104934, "upload_time": "2019-01-23T09:14:15", "upload_time_iso_8601": "2019-01-23T09:14:15.817564Z", "url": "https://files.pythonhosted.org/packages/80/57/508e14118e51b051ccdb748c0e754a92ea0d847cfe2f8cb29a0206883a1c/atila-0.1a6.tar.gz", "yanked": false}], "0.1a7": [{"comment_text": "", "digests": {"md5": "22b6116a4a81737c73a7b33b4841f658", "sha256": "f48f584940d8422c4a9ce637da176633dd3fb7b345afe4c2afdd8c804a677c3a"}, "downloads": -1, "filename": "atila-0.1a7.tar.gz", "has_sig": false, "md5_digest": "22b6116a4a81737c73a7b33b4841f658", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106561, "upload_time": "2019-01-24T11:10:25", "upload_time_iso_8601": "2019-01-24T11:10:25.245052Z", "url": "https://files.pythonhosted.org/packages/c9/7f/ffe44d7a6fb8b440bf36d9e63d23e27b3be3abed60dda48d8e2fae0baeb3/atila-0.1a7.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "35cfcf30888113cbc135fffcbef0a9bc", "sha256": "1308f707ef33b49e48e19698968c38f0c2d9c90ff2e11f9be910aa61c0be6185"}, "downloads": -1, "filename": "atila-0.2.tar.gz", "has_sig": false, "md5_digest": "35cfcf30888113cbc135fffcbef0a9bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111508, "upload_time": "2019-02-18T13:29:00", "upload_time_iso_8601": "2019-02-18T13:29:00.066232Z", "url": "https://files.pythonhosted.org/packages/e5/ad/4c6236727814941ff4de149d41cc7fbf275c2cad168d6993888a80986a24/atila-0.2.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "6e4582bcc29648cefcfd7fb7b0d684a8", "sha256": "3d0acdf5b4e48840c657206e1caf7d72f8c247225d8cfe3d6b77183474f5df12"}, "downloads": -1, "filename": "atila-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6e4582bcc29648cefcfd7fb7b0d684a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111585, "upload_time": "2019-02-19T03:05:04", "upload_time_iso_8601": "2019-02-19T03:05:04.936634Z", "url": "https://files.pythonhosted.org/packages/0e/af/2b4830acd4466c8d4fff8ac672a36f78cb8653be446e54a11a7951095875/atila-0.2.2.tar.gz", "yanked": false}], "0.2.2.1": [{"comment_text": "", "digests": {"md5": "f0264331b243174ffad85afaefbca60e", "sha256": "be70bb14fe42aa0faae349d9d42b0996e1bcd3b9b65a30b5fa15492032baf8a5"}, "downloads": -1, "filename": "atila-0.2.2.1.tar.gz", "has_sig": false, "md5_digest": "f0264331b243174ffad85afaefbca60e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 112579, "upload_time": "2019-02-19T05:53:06", "upload_time_iso_8601": "2019-02-19T05:53:06.233614Z", "url": "https://files.pythonhosted.org/packages/33/e8/4d187c0c211633f0886cfe181756c59c8a931c6ace9d2f24a6b4061a6561/atila-0.2.2.1.tar.gz", "yanked": false}], "0.2.2.10": [{"comment_text": "", "digests": {"md5": "60ab3f6de36b71ff13f86a2fccb0d172", "sha256": "b67c6cbf27bbe6ebd14dc6395f4fcac6da3a459f7175ff78a95ec82d1604e716"}, "downloads": -1, "filename": "atila-0.2.2.10.tar.gz", "has_sig": false, "md5_digest": "60ab3f6de36b71ff13f86a2fccb0d172", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115576, "upload_time": "2019-02-24T04:18:59", "upload_time_iso_8601": "2019-02-24T04:18:59.328526Z", "url": "https://files.pythonhosted.org/packages/a1/c2/11a93d1bdd3437e7d575e5ede6e4d9c27e6e349c7687a2b5a389ef429033/atila-0.2.2.10.tar.gz", "yanked": false}], "0.2.2.11": [{"comment_text": "", "digests": {"md5": "84bcae01e605b7c27a0b256f32068fc1", "sha256": "7029050482f0df51e5b3467cb155e8ee088949933fbfd2ef3ae8d43254e5ca6a"}, "downloads": -1, "filename": "atila-0.2.2.11.tar.gz", "has_sig": false, "md5_digest": "84bcae01e605b7c27a0b256f32068fc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115692, "upload_time": "2019-02-24T10:35:08", "upload_time_iso_8601": "2019-02-24T10:35:08.096034Z", "url": "https://files.pythonhosted.org/packages/9f/31/500d7f79a40f9ce586cef6a74fb869c8421c058525d4ff0ddf7ed9c134df/atila-0.2.2.11.tar.gz", "yanked": false}], "0.2.2.12": [{"comment_text": "", "digests": {"md5": "7fcb8e005a25ac5b60d44788072d48d6", "sha256": "033e92b435c045c0790a3e3b66bf3ed882bbd26d548467c273c44810d250043f"}, "downloads": -1, "filename": "atila-0.2.2.12.tar.gz", "has_sig": false, "md5_digest": "7fcb8e005a25ac5b60d44788072d48d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116318, "upload_time": "2019-02-24T12:10:38", "upload_time_iso_8601": "2019-02-24T12:10:38.933463Z", "url": "https://files.pythonhosted.org/packages/f8/83/b19f86904e9c8886321257f4d47957528391093049241652edfa24ccabc6/atila-0.2.2.12.tar.gz", "yanked": false}], "0.2.2.13": [{"comment_text": "", "digests": {"md5": "03c7923c50cd2c94a0ce51b03ab27ad9", "sha256": "1afe83abef4e7f5b5ce1ca54d8da2663dbbad5d6f0e7a99499bedf92c1c6046a"}, "downloads": -1, "filename": "atila-0.2.2.13.tar.gz", "has_sig": false, "md5_digest": "03c7923c50cd2c94a0ce51b03ab27ad9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116384, "upload_time": "2019-02-25T00:12:09", "upload_time_iso_8601": "2019-02-25T00:12:09.200819Z", "url": "https://files.pythonhosted.org/packages/bc/5c/51c429fce992d178a06817cca728399446a2d252607aedbaff3b907d0f1e/atila-0.2.2.13.tar.gz", "yanked": false}], "0.2.2.14": [{"comment_text": "", "digests": {"md5": "27ec8b85ae8a237a05b8e9236e428949", "sha256": "c0c30f46a2a111fa646f19df2cbeb55703226841fb089f4ed976d68c767bfca1"}, "downloads": -1, "filename": "atila-0.2.2.14.tar.gz", "has_sig": false, "md5_digest": "27ec8b85ae8a237a05b8e9236e428949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115661, "upload_time": "2019-02-25T03:34:42", "upload_time_iso_8601": "2019-02-25T03:34:42.597500Z", "url": "https://files.pythonhosted.org/packages/a4/a6/9f4599789532171ca12534a4712d040748d61824ee8b597e963a732b8f38/atila-0.2.2.14.tar.gz", "yanked": false}], "0.2.2.15": [{"comment_text": "", "digests": {"md5": "d7c770cad95e740d24485b068b79deec", "sha256": "bbb6292364979d3755b401154564824052da560498a3eb45c1eae0e8f4a6cdfe"}, "downloads": -1, "filename": "atila-0.2.2.15.tar.gz", "has_sig": false, "md5_digest": "d7c770cad95e740d24485b068b79deec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115660, "upload_time": "2019-02-26T01:43:45", "upload_time_iso_8601": "2019-02-26T01:43:45.289189Z", "url": "https://files.pythonhosted.org/packages/47/bf/b85043b104e9dfb1879d58d730bfcaefd782adf2461f9124ad0d51071a6a/atila-0.2.2.15.tar.gz", "yanked": false}], "0.2.2.16": [{"comment_text": "", "digests": {"md5": "55fd90d622fa06deea7c9b3c4d33206b", "sha256": "e735f19144e5c089eeecfc40cfb41bfa12d5266219f3eacd8ad769fd490c5703"}, "downloads": -1, "filename": "atila-0.2.2.16.tar.gz", "has_sig": false, "md5_digest": "55fd90d622fa06deea7c9b3c4d33206b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115719, "upload_time": "2019-02-27T05:09:17", "upload_time_iso_8601": "2019-02-27T05:09:17.394354Z", "url": "https://files.pythonhosted.org/packages/32/df/268a56e9fc0f71453a711d287513c698accf43369915b17d5ffef6f03eae/atila-0.2.2.16.tar.gz", "yanked": false}], "0.2.2.17": [{"comment_text": "", "digests": {"md5": "4d42c64dc1d40424d6b6a468ae88fb54", "sha256": "cdb87d1c78d70a857cd3968c4bc73fe3fc6fc980020d2930479a59f48f56c5c3"}, "downloads": -1, "filename": "atila-0.2.2.17.tar.gz", "has_sig": false, "md5_digest": "4d42c64dc1d40424d6b6a468ae88fb54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116115, "upload_time": "2019-02-27T06:38:49", "upload_time_iso_8601": "2019-02-27T06:38:49.635702Z", "url": "https://files.pythonhosted.org/packages/fe/45/335ff7d1fc213774fd01d78003fc773a084d84a19c5ba3617371c58222c1/atila-0.2.2.17.tar.gz", "yanked": false}], "0.2.2.18": [{"comment_text": "", "digests": {"md5": "36aab8f08132daad1b3830b7518e3eec", "sha256": "a948a50feb2626c6068750b9f1804f0cd3559f88a80faffa4a0858911f3a753a"}, "downloads": -1, "filename": "atila-0.2.2.18.tar.gz", "has_sig": false, "md5_digest": "36aab8f08132daad1b3830b7518e3eec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116123, "upload_time": "2019-02-27T06:54:16", "upload_time_iso_8601": "2019-02-27T06:54:16.690414Z", "url": "https://files.pythonhosted.org/packages/94/e6/9da92e040eb8fe33e982016ea591c9cc161ddf6594c3940204bf1ac04bbd/atila-0.2.2.18.tar.gz", "yanked": false}], "0.2.2.19": [{"comment_text": "", "digests": {"md5": "893999b4d73c698f1b50879f7e677745", "sha256": "bbc40dba1c082fcbc1bdbdc4b5c15e7747df1fd3ecc1b9007f98dbfbeb241322"}, "downloads": -1, "filename": "atila-0.2.2.19.tar.gz", "has_sig": false, "md5_digest": "893999b4d73c698f1b50879f7e677745", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116304, "upload_time": "2019-02-27T07:25:43", "upload_time_iso_8601": "2019-02-27T07:25:43.204287Z", "url": "https://files.pythonhosted.org/packages/c6/24/c591cf788f8092aa092c77a9bff13752407dbd25403bcbca470d210f3f79/atila-0.2.2.19.tar.gz", "yanked": false}], "0.2.2.2": [{"comment_text": "", "digests": {"md5": "6f8a34b06e7f5cf65c2724078cba3d42", "sha256": "d4f85f1845c7926748d3e3fa0270dc2dfa95f81d88f6dbb56e16461aeb400634"}, "downloads": -1, "filename": "atila-0.2.2.2.tar.gz", "has_sig": false, "md5_digest": "6f8a34b06e7f5cf65c2724078cba3d42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 112549, "upload_time": "2019-02-19T08:19:40", "upload_time_iso_8601": "2019-02-19T08:19:40.902484Z", "url": "https://files.pythonhosted.org/packages/68/57/81a604b0b9a67a2b913e5c8fa5575b10ea95e04204a0bd351422457150bf/atila-0.2.2.2.tar.gz", "yanked": false}], "0.2.2.20": [{"comment_text": "", "digests": {"md5": "8b4757c37aef371ae327bdc42d1fa5c0", "sha256": "f5d7db34e8ffa4b6e5556b363c8858d0068ee1880dc3433ba786be9966866606"}, "downloads": -1, "filename": "atila-0.2.2.20.tar.gz", "has_sig": false, "md5_digest": "8b4757c37aef371ae327bdc42d1fa5c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116320, "upload_time": "2019-02-28T07:48:44", "upload_time_iso_8601": "2019-02-28T07:48:44.108565Z", "url": "https://files.pythonhosted.org/packages/19/fc/8fffdacd3516ad43bc568dedff4bceaba5c150fdb0c5a3a43ff29d58c13c/atila-0.2.2.20.tar.gz", "yanked": false}], "0.2.2.21": [{"comment_text": "", "digests": {"md5": "910398aaeea508e5278f54b5ef181465", "sha256": "bd55f82ee1c0a929cc4499a368c958250afc30f52db30a7ed2b491899a280ed9"}, "downloads": -1, "filename": "atila-0.2.2.21.tar.gz", "has_sig": false, "md5_digest": "910398aaeea508e5278f54b5ef181465", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116316, "upload_time": "2019-03-01T08:13:45", "upload_time_iso_8601": "2019-03-01T08:13:45.134131Z", "url": "https://files.pythonhosted.org/packages/15/d1/430009f3e1e0de5df14b4d23345fb00457f555a8b49c41f388226f5bc2f4/atila-0.2.2.21.tar.gz", "yanked": false}], "0.2.2.22": [{"comment_text": "", "digests": {"md5": "d43e8c3272ef064d67300b27860d8f27", "sha256": "740ace8f9f75dabc9e54dca180b5539535860bcc21137083bd01a1014f09b33c"}, "downloads": -1, "filename": "atila-0.2.2.22.tar.gz", "has_sig": false, "md5_digest": "d43e8c3272ef064d67300b27860d8f27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116364, "upload_time": "2019-03-01T13:49:49", "upload_time_iso_8601": "2019-03-01T13:49:49.195611Z", "url": "https://files.pythonhosted.org/packages/c5/1b/66297b36808bd9052ccff371efffc13fea4fa84a26db1d535572b3f4462d/atila-0.2.2.22.tar.gz", "yanked": false}], "0.2.2.23": [{"comment_text": "", "digests": {"md5": "1ae157e49fe4eea033ed905b946ac09d", "sha256": "1be827e1e50379529a3962aa3cd79904f2fa7d277a26f43098143bef408ada13"}, "downloads": -1, "filename": "atila-0.2.2.23.tar.gz", "has_sig": false, "md5_digest": "1ae157e49fe4eea033ed905b946ac09d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116844, "upload_time": "2019-03-02T03:54:02", "upload_time_iso_8601": "2019-03-02T03:54:02.200047Z", "url": "https://files.pythonhosted.org/packages/9a/bb/4bdc7cc02b5c65206c6a4ee31f2a209b2feac5feeda397b9faf3fee532cc/atila-0.2.2.23.tar.gz", "yanked": false}], "0.2.2.24": [{"comment_text": "", "digests": {"md5": "d6dd85a14da5dc0c42a4a459396ee178", "sha256": "9402253af310a2a46139ffc58e546b3a88c3e8d7d5e0d0cb18a980cea433a368"}, "downloads": -1, "filename": "atila-0.2.2.24.tar.gz", "has_sig": false, "md5_digest": "d6dd85a14da5dc0c42a4a459396ee178", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117456, "upload_time": "2019-03-02T04:06:13", "upload_time_iso_8601": "2019-03-02T04:06:13.800546Z", "url": "https://files.pythonhosted.org/packages/31/2a/0a23f7375c7a85213c05376ac61bfa28f23a18709c868c91f077201ad357/atila-0.2.2.24.tar.gz", "yanked": false}], "0.2.2.25": [{"comment_text": "", "digests": {"md5": "578a0de8b1cc47cac29e5cf45824cbc5", "sha256": "a8eec50ae2bc198998babb875e9fe92d0327a4464f034b48425891b07f6c0024"}, "downloads": -1, "filename": "atila-0.2.2.25.tar.gz", "has_sig": false, "md5_digest": "578a0de8b1cc47cac29e5cf45824cbc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117508, "upload_time": "2019-03-02T06:06:10", "upload_time_iso_8601": "2019-03-02T06:06:10.734727Z", "url": "https://files.pythonhosted.org/packages/01/51/b08c37ad1f367826187b2767b0ea2fdd4d45342266bfa78cb27ea54b3d74/atila-0.2.2.25.tar.gz", "yanked": false}], "0.2.2.26": [{"comment_text": "", "digests": {"md5": "fd78d1a9a67c18770c59140f4f343117", "sha256": "89deaaadcf4b18d05caa2a489cc06c79d5851f0e1d6e6d2afd86bee0a0394b1b"}, "downloads": -1, "filename": "atila-0.2.2.26.tar.gz", "has_sig": false, "md5_digest": "fd78d1a9a67c18770c59140f4f343117", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117509, "upload_time": "2019-03-02T06:09:33", "upload_time_iso_8601": "2019-03-02T06:09:33.702954Z", "url": "https://files.pythonhosted.org/packages/b4/b1/67a33d02e2dace4b7a7b62f46ae8bc1022301e8936d35b83c1353749d5b7/atila-0.2.2.26.tar.gz", "yanked": false}], "0.2.2.27": [{"comment_text": "", "digests": {"md5": "a768c94bebbabdc3e7bafb5efde92a0f", "sha256": "bc14dd49585aee8e53f4099d87a9cefd3cd84c5497265d95510a5e6452d222ed"}, "downloads": -1, "filename": "atila-0.2.2.27.tar.gz", "has_sig": false, "md5_digest": "a768c94bebbabdc3e7bafb5efde92a0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117129, "upload_time": "2019-03-02T06:59:42", "upload_time_iso_8601": "2019-03-02T06:59:42.998701Z", "url": "https://files.pythonhosted.org/packages/8b/3f/0a593fc872d6cef9becf23f36a602bf752a04dc39273fb702e0c2915633b/atila-0.2.2.27.tar.gz", "yanked": false}], "0.2.2.28": [{"comment_text": "", "digests": {"md5": "cc0c239626d5105674d5bfcad4efe377", "sha256": "d2a65e26e071e9ec9456a51c4745a695a59c4da994765c4eafa694f28b17003f"}, "downloads": -1, "filename": "atila-0.2.2.28.tar.gz", "has_sig": false, "md5_digest": "cc0c239626d5105674d5bfcad4efe377", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117812, "upload_time": "2019-03-02T08:15:34", "upload_time_iso_8601": "2019-03-02T08:15:34.399196Z", "url": "https://files.pythonhosted.org/packages/70/44/df11f498482c38c55ff075d4097f6968ea19c7d5b1deaae57cebfecda85b/atila-0.2.2.28.tar.gz", "yanked": false}], "0.2.2.29": [{"comment_text": "", "digests": {"md5": "d1122c60cd68a1cabd40de5f4124860c", "sha256": "55d9663eddb16e9416db9d75471f70dc9732a1d4c55916ac822d64d5dfdb8974"}, "downloads": -1, "filename": "atila-0.2.2.29.tar.gz", "has_sig": false, "md5_digest": "d1122c60cd68a1cabd40de5f4124860c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117921, "upload_time": "2019-03-02T10:41:56", "upload_time_iso_8601": "2019-03-02T10:41:56.031698Z", "url": "https://files.pythonhosted.org/packages/39/8a/7dd92bcccb551e4c9b2c4df44273ac424bf1e7e3f7b0af9aa18d27cada0a/atila-0.2.2.29.tar.gz", "yanked": false}], "0.2.2.3": [{"comment_text": "", "digests": {"md5": "093d97eaf566829b150f13519afb3cc0", "sha256": "9535a4b6f47fa8257b76d3012082dd64eff40d639d3c17efb55ada879ef914ad"}, "downloads": -1, "filename": "atila-0.2.2.3.tar.gz", "has_sig": false, "md5_digest": "093d97eaf566829b150f13519afb3cc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113849, "upload_time": "2019-02-20T11:20:30", "upload_time_iso_8601": "2019-02-20T11:20:30.031312Z", "url": "https://files.pythonhosted.org/packages/33/9d/117aab4b126e0a260b88e2d5fe32be15f2fce959754eca1f9f3b0387a01d/atila-0.2.2.3.tar.gz", "yanked": false}], "0.2.2.30": [{"comment_text": "", "digests": {"md5": "9b52e4037bff5dc799581ef5afe88dca", "sha256": "a7ae84c9aaa18bddc94690f04eb55b9178a7f64b959904408cd1700c1df0c0b7"}, "downloads": -1, "filename": "atila-0.2.2.30.tar.gz", "has_sig": false, "md5_digest": "9b52e4037bff5dc799581ef5afe88dca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117966, "upload_time": "2019-03-02T13:52:51", "upload_time_iso_8601": "2019-03-02T13:52:51.957467Z", "url": "https://files.pythonhosted.org/packages/4f/8d/8da92f06c7672b1bd714ab509ed555a466b7329b6f2d8240a9a1cc921c96/atila-0.2.2.30.tar.gz", "yanked": false}], "0.2.2.31": [{"comment_text": "", "digests": {"md5": "2bbc022e54c3a656c98f348010308fb0", "sha256": "41099d0c6dbf9caaa8ea44892ccc4940d3b44be5315d123cc3cb735b3d76f559"}, "downloads": -1, "filename": "atila-0.2.2.31.tar.gz", "has_sig": false, "md5_digest": "2bbc022e54c3a656c98f348010308fb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117973, "upload_time": "2019-03-03T12:33:28", "upload_time_iso_8601": "2019-03-03T12:33:28.493982Z", "url": "https://files.pythonhosted.org/packages/88/f6/b55774765d188bc16e8924dd823a381310c746e7f248234cdfcc80284097/atila-0.2.2.31.tar.gz", "yanked": false}], "0.2.2.32": [{"comment_text": "", "digests": {"md5": "f8f93ba16684e8b3a2572ccfd7b6c41a", "sha256": "f15b6e45f72f857c984a52540d153eea0efd486a3652be4030307fd5bc49d5da"}, "downloads": -1, "filename": "atila-0.2.2.32.tar.gz", "has_sig": false, "md5_digest": "f8f93ba16684e8b3a2572ccfd7b6c41a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118123, "upload_time": "2019-03-04T00:21:20", "upload_time_iso_8601": "2019-03-04T00:21:20.296863Z", "url": "https://files.pythonhosted.org/packages/6f/89/afa7c351e7fd5816d19a0303d2fc25d43a7659868755c7f6e0305c6dd3dc/atila-0.2.2.32.tar.gz", "yanked": false}], "0.2.2.4": [{"comment_text": "", "digests": {"md5": "76a8a6c0d0217a3c03596129f706b225", "sha256": "bc4731c9eb73a1aad67f10c3c7d9d96361cbdca0a32e3ae1dbfa6ff65baad832"}, "downloads": -1, "filename": "atila-0.2.2.4.tar.gz", "has_sig": false, "md5_digest": "76a8a6c0d0217a3c03596129f706b225", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113797, "upload_time": "2019-02-21T00:15:55", "upload_time_iso_8601": "2019-02-21T00:15:55.540213Z", "url": "https://files.pythonhosted.org/packages/8e/be/ee8cc9afcc0e9e870151d7929d0996dc446fab801c441ce11870be7f2bbd/atila-0.2.2.4.tar.gz", "yanked": false}], "0.2.2.5": [{"comment_text": "", "digests": {"md5": "ab539f128de42f08cad7dc658637df22", "sha256": "c2cdee56c9463b762fcccfbc541bc427e376dcd3d5778f5acea91961a06a4789"}, "downloads": -1, "filename": "atila-0.2.2.5.tar.gz", "has_sig": false, "md5_digest": "ab539f128de42f08cad7dc658637df22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113804, "upload_time": "2019-02-21T00:55:20", "upload_time_iso_8601": "2019-02-21T00:55:20.831215Z", "url": "https://files.pythonhosted.org/packages/9c/6f/0d17d2367d83060f6e83b39476a02de74080453f82ec2b4bef57c2cef4c2/atila-0.2.2.5.tar.gz", "yanked": false}], "0.2.2.6": [{"comment_text": "", "digests": {"md5": "8eeb5e0437fd07ee8de8d7a6e1dbd28c", "sha256": "f064396fe0ad1531dfe0e50be846f70d4e3c865987a8fe1437e98786a2ea5f39"}, "downloads": -1, "filename": "atila-0.2.2.6.tar.gz", "has_sig": false, "md5_digest": "8eeb5e0437fd07ee8de8d7a6e1dbd28c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115390, "upload_time": "2019-02-21T04:28:44", "upload_time_iso_8601": "2019-02-21T04:28:44.625358Z", "url": "https://files.pythonhosted.org/packages/2e/5f/60c42f57f8a57639b119d7184736c89e16106b24acc6ddd37d4462d59c1f/atila-0.2.2.6.tar.gz", "yanked": false}], "0.2.2.7": [{"comment_text": "", "digests": {"md5": "2391e3f2cb036016d7aa97ecc70e15d7", "sha256": "764166c706ac6b98dd05defa78a6fdd1dcb711d508451ecc63b4147ed4db289e"}, "downloads": -1, "filename": "atila-0.2.2.7.tar.gz", "has_sig": false, "md5_digest": "2391e3f2cb036016d7aa97ecc70e15d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115409, "upload_time": "2019-02-22T09:46:09", "upload_time_iso_8601": "2019-02-22T09:46:09.940984Z", "url": "https://files.pythonhosted.org/packages/2f/a0/e03c421aaaf005010824c87bf85f39dc2a826ee908d939086f82221cf3ad/atila-0.2.2.7.tar.gz", "yanked": false}], "0.2.2.8": [{"comment_text": "", "digests": {"md5": "577b91f02ee77f47d5573e6e8e96804e", "sha256": "2cda9e14eb596105ea5c65d734e9141c98f193030e9aa4efa4da3ef6de9a976d"}, "downloads": -1, "filename": "atila-0.2.2.8.tar.gz", "has_sig": false, "md5_digest": "577b91f02ee77f47d5573e6e8e96804e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115388, "upload_time": "2019-02-23T14:31:06", "upload_time_iso_8601": "2019-02-23T14:31:06.591467Z", "url": "https://files.pythonhosted.org/packages/e3/c6/094f5d188417635773b4e20cdd600211d64db541b91dc04f09894ecfc1be/atila-0.2.2.8.tar.gz", "yanked": false}], "0.2.2.9": [{"comment_text": "", "digests": {"md5": "58b2a7aed51fea2a5399646cdaf4fc8b", "sha256": "e32bc5357f340d8025ea4eb246198a407383bd13d16f0721df4a09a6c5008b86"}, "downloads": -1, "filename": "atila-0.2.2.9.tar.gz", "has_sig": false, "md5_digest": "58b2a7aed51fea2a5399646cdaf4fc8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115538, "upload_time": "2019-02-24T01:34:36", "upload_time_iso_8601": "2019-02-24T01:34:36.045884Z", "url": "https://files.pythonhosted.org/packages/ee/56/07138fe133c665b313c8b25da6194eabff06c9f2118df302aaa499648b06/atila-0.2.2.9.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "1ec1830ad7534f102045f88a261e8b95", "sha256": "d834ff6472a8b7ef98d6f719d38459085a940c5427a2f6900d5bd3b85fd8c8f2"}, "downloads": -1, "filename": "atila-0.2.3.tar.gz", "has_sig": false, "md5_digest": "1ec1830ad7534f102045f88a261e8b95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120334, "upload_time": "2019-03-22T11:23:17", "upload_time_iso_8601": "2019-03-22T11:23:17.759957Z", "url": "https://files.pythonhosted.org/packages/fd/56/4298c28bacf686e1930cc6da711b8fee8725bf264fbc788fe5b24841d3d6/atila-0.2.3.tar.gz", "yanked": false}], "0.2.3.1": [{"comment_text": "", "digests": {"md5": "339fa8da4bf95a42bf6bb91bfc948bed", "sha256": "dc9973c912108d886b8a86bc63ad3f1eb2977bd0ba1527feeace52ec53286840"}, "downloads": -1, "filename": "atila-0.2.3.1.tar.gz", "has_sig": false, "md5_digest": "339fa8da4bf95a42bf6bb91bfc948bed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120554, "upload_time": "2019-03-23T01:12:22", "upload_time_iso_8601": "2019-03-23T01:12:22.301885Z", "url": "https://files.pythonhosted.org/packages/d9/a6/a04c382503ea330626a57ea26c7449bd28a9496f41cf8e1ae1ecd811c454/atila-0.2.3.1.tar.gz", "yanked": false}], "0.2.3.2": [{"comment_text": "", "digests": {"md5": "26038a5dcdcda66c082a9b817fa01781", "sha256": "e7b4ae5a7fae87d83824f8f533a83c6ea78823579a4616fa4484099cda00e15b"}, "downloads": -1, "filename": "atila-0.2.3.2.tar.gz", "has_sig": false, "md5_digest": "26038a5dcdcda66c082a9b817fa01781", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120584, "upload_time": "2019-03-24T07:45:52", "upload_time_iso_8601": "2019-03-24T07:45:52.006959Z", "url": "https://files.pythonhosted.org/packages/a4/6f/e8be4e1a67800b53b2c95039787a71784394d6a5198d76025035402e0e01/atila-0.2.3.2.tar.gz", "yanked": false}], "0.2.3.3": [{"comment_text": "", "digests": {"md5": "917cfbc523563f968104754b55749e60", "sha256": "6946dd57dd055fe1a0fef748cb5a99ee09c3c1ae2ecb2e7da19aaa8db37b51e6"}, "downloads": -1, "filename": "atila-0.2.3.3.tar.gz", "has_sig": false, "md5_digest": "917cfbc523563f968104754b55749e60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120643, "upload_time": "2019-03-28T04:09:47", "upload_time_iso_8601": "2019-03-28T04:09:47.041766Z", "url": "https://files.pythonhosted.org/packages/9e/10/552ae0435c83b96d9d5badcf9339debce3094b432a3cf87c1cb40801411e/atila-0.2.3.3.tar.gz", "yanked": false}], "0.2.3.4": [{"comment_text": "", "digests": {"md5": "0510e3167db49674c3218d4ce8eaddd3", "sha256": "d2be699b5ded75b4e30e86cecd3ce99cf15889269b9682cd5822fbe0c8240b91"}, "downloads": -1, "filename": "atila-0.2.3.4.tar.gz", "has_sig": false, "md5_digest": "0510e3167db49674c3218d4ce8eaddd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121516, "upload_time": "2019-03-30T11:58:17", "upload_time_iso_8601": "2019-03-30T11:58:17.608799Z", "url": "https://files.pythonhosted.org/packages/b3/1f/a5ced98549cf877220af7ba639c90fd3bebca697b9a239d29259446ad458/atila-0.2.3.4.tar.gz", "yanked": false}], "0.2.3.5": [{"comment_text": "", "digests": {"md5": "20280848dbb522074441c7c4ef84a908", "sha256": "4da2c6300ef387fe70567086b44f4d0d880f1125b38adcb407f49e1c8fe7ae25"}, "downloads": -1, "filename": "atila-0.2.3.5.tar.gz", "has_sig": false, "md5_digest": "20280848dbb522074441c7c4ef84a908", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121510, "upload_time": "2019-03-30T12:00:04", "upload_time_iso_8601": "2019-03-30T12:00:04.444580Z", "url": "https://files.pythonhosted.org/packages/f2/c9/a3eb4220492b0be2914387d96b6d61a877aded7ee9b6e77bccd2730cf087/atila-0.2.3.5.tar.gz", "yanked": false}], "0.2.3.6": [{"comment_text": "", "digests": {"md5": "e56b545974f18f2f2390dd6066f84d61", "sha256": "b648b28478c790aaa50264a0fd3cf2bd1740899518360b858b3e3c70fce14469"}, "downloads": -1, "filename": "atila-0.2.3.6.tar.gz", "has_sig": false, "md5_digest": "e56b545974f18f2f2390dd6066f84d61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121501, "upload_time": "2019-03-30T12:02:05", "upload_time_iso_8601": "2019-03-30T12:02:05.401862Z", "url": "https://files.pythonhosted.org/packages/61/e5/a15930881f50e9da9ff766e47368be01db139da9e9850ab3c5b8b275e241/atila-0.2.3.6.tar.gz", "yanked": false}], "0.2.3.7": [{"comment_text": "", "digests": {"md5": "bc283b4b7f902dd5cd96b290a0763485", "sha256": "ba670b06a6a85153880aa7314092433b728f3d25f4130e9e2d746f1e6da647e7"}, "downloads": -1, "filename": "atila-0.2.3.7.tar.gz", "has_sig": false, "md5_digest": "bc283b4b7f902dd5cd96b290a0763485", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121507, "upload_time": "2019-03-30T12:04:00", "upload_time_iso_8601": "2019-03-30T12:04:00.039594Z", "url": "https://files.pythonhosted.org/packages/d4/64/93c46f9987fd4bfd188af44fa8dcae1e935fe752df6d4d5b5bc449409d37/atila-0.2.3.7.tar.gz", "yanked": false}], "0.2.3.8": [{"comment_text": "", "digests": {"md5": "4d348725295bcd212d37dbe4551a3709", "sha256": "783adf45b20b812be5bd0e7b32d5ce71021b23da960251f68593930a2705b9f3"}, "downloads": -1, "filename": "atila-0.2.3.8.tar.gz", "has_sig": false, "md5_digest": "4d348725295bcd212d37dbe4551a3709", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121316, "upload_time": "2019-04-01T06:22:52", "upload_time_iso_8601": "2019-04-01T06:22:52.025918Z", "url": "https://files.pythonhosted.org/packages/71/a5/201bfe46fd6b3ac24d60e0c994d91c59ff7563378ba2430bbd6c14fe5319/atila-0.2.3.8.tar.gz", "yanked": false}], "0.2.3.9": [{"comment_text": "", "digests": {"md5": "c7af724c06fc4853c18a4b8f6fb8b239", "sha256": "fd2bc5e6f64706d7d4f995a7096d23ea6e9de9a81d5da67aa964aba98980d8a1"}, "downloads": -1, "filename": "atila-0.2.3.9.tar.gz", "has_sig": false, "md5_digest": "c7af724c06fc4853c18a4b8f6fb8b239", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121615, "upload_time": "2019-04-02T07:32:06", "upload_time_iso_8601": "2019-04-02T07:32:06.634453Z", "url": "https://files.pythonhosted.org/packages/66/3a/0aeb3c2fd305254da94c65bede6cfa3af12112a28720199e4204dc35e114/atila-0.2.3.9.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "4e9c2a47ab93615327b8c3b4942ce2f3", "sha256": "52598ffb1d4179499eadee02ccaa057b219328f669c95fcda52f10c95e341abb"}, "downloads": -1, "filename": "atila-0.2.4.tar.gz", "has_sig": false, "md5_digest": "4e9c2a47ab93615327b8c3b4942ce2f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122932, "upload_time": "2019-04-03T01:41:21", "upload_time_iso_8601": "2019-04-03T01:41:21.712276Z", "url": "https://files.pythonhosted.org/packages/00/5f/c99fed2f00e0756d3af843586cf724895b45a2014a3d766746df94384fd1/atila-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "f790b4a44819cf6faea5836248d59b55", "sha256": "3f7a8666640c18f0c9fcf5bd321fe7b448a862e42e65fea7f780811ae68a3acc"}, "downloads": -1, "filename": "atila-0.2.5.tar.gz", "has_sig": false, "md5_digest": "f790b4a44819cf6faea5836248d59b55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123414, "upload_time": "2019-04-04T12:17:12", "upload_time_iso_8601": "2019-04-04T12:17:12.292818Z", "url": "https://files.pythonhosted.org/packages/7d/21/11e675d77ab56bea6de21117bed9c409d385142539880e5cf6815d914bdb/atila-0.2.5.tar.gz", "yanked": false}], "0.2.5.1": [{"comment_text": "", "digests": {"md5": "587470677bf55b706740058b1c2399bc", "sha256": "6c6ff90027d9ded7f48866e4d90be368be689ef6bdefec91118caed30bce3b03"}, "downloads": -1, "filename": "atila-0.2.5.1.tar.gz", "has_sig": false, "md5_digest": "587470677bf55b706740058b1c2399bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123174, "upload_time": "2019-04-04T13:34:24", "upload_time_iso_8601": "2019-04-04T13:34:24.500277Z", "url": "https://files.pythonhosted.org/packages/a3/4f/6f6c6640eb2be2bf307562ae7e311008b3827814fe1d4becd9b10fa9dc0f/atila-0.2.5.1.tar.gz", "yanked": false}], "0.2.5.2": [{"comment_text": "", "digests": {"md5": "e4ded0a68120586bc54af983bd3b56b8", "sha256": "9b1d1d8ad51ced55cd7a53a3b8bdcddcbe48f2a4229b20c586797314b5592897"}, "downloads": -1, "filename": "atila-0.2.5.2.tar.gz", "has_sig": false, "md5_digest": "e4ded0a68120586bc54af983bd3b56b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123713, "upload_time": "2019-04-05T02:51:41", "upload_time_iso_8601": "2019-04-05T02:51:41.927182Z", "url": "https://files.pythonhosted.org/packages/31/c3/91a23e1cdd76d47d44e8065a285029c0d1b96066a4e8f2fc4dd463ee6263/atila-0.2.5.2.tar.gz", "yanked": false}], "0.2.5.3": [{"comment_text": "", "digests": {"md5": "acb111a4c7346153786fb6eb4edeaa73", "sha256": "72dfe998d53527fadadf488a25025cea43d497d845951a09c464986e2abee99a"}, "downloads": -1, "filename": "atila-0.2.5.3.tar.gz", "has_sig": false, "md5_digest": "acb111a4c7346153786fb6eb4edeaa73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123672, "upload_time": "2019-04-06T02:25:16", "upload_time_iso_8601": "2019-04-06T02:25:16.307800Z", "url": "https://files.pythonhosted.org/packages/7b/c3/0db4b33889d5ec79d822372a35bf69615cdee7b481fc12b34e64226a2221/atila-0.2.5.3.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "b6dfc2c16abfc7d0593eb1ab9fa3a05d", "sha256": "3c1acd38b472bd08ec2d321098e32daf5a4b69b0ef297dad81528c757ba36a21"}, "downloads": -1, "filename": "atila-0.2.6.tar.gz", "has_sig": false, "md5_digest": "b6dfc2c16abfc7d0593eb1ab9fa3a05d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124186, "upload_time": "2019-04-06T12:22:00", "upload_time_iso_8601": "2019-04-06T12:22:00.610963Z", "url": "https://files.pythonhosted.org/packages/24/67/5cccc6a99c6a013255ffddb900e791967f1a22237c5850b58fc65a275b1e/atila-0.2.6.tar.gz", "yanked": false}], "0.2.6.1": [{"comment_text": "", "digests": {"md5": "fa99255b9d97b2610b8bd7a7762c4a13", "sha256": "9437f6ff26121ef4fc52696e258e8247a2393ff6c2f934627cfeb34e01452967"}, "downloads": -1, "filename": "atila-0.2.6.1.tar.gz", "has_sig": false, "md5_digest": "fa99255b9d97b2610b8bd7a7762c4a13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124182, "upload_time": "2019-04-06T12:26:22", "upload_time_iso_8601": "2019-04-06T12:26:22.705027Z", "url": "https://files.pythonhosted.org/packages/ba/31/9f14e29c28b38cb50dd0000b6c1c34e2b5dad5a5cb8341220221c01df2ba/atila-0.2.6.1.tar.gz", "yanked": false}], "0.2.6.2": [{"comment_text": "", "digests": {"md5": "b6574cb92703d878ef13049e46e412d5", "sha256": "5a8ea88ca19837e37ea4ee04a901972113f50d16d7c0aef375bcbefd3a3f1524"}, "downloads": -1, "filename": "atila-0.2.6.2.tar.gz", "has_sig": false, "md5_digest": "b6574cb92703d878ef13049e46e412d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124057, "upload_time": "2019-04-09T07:20:36", "upload_time_iso_8601": "2019-04-09T07:20:36.191783Z", "url": "https://files.pythonhosted.org/packages/37/d8/fc2a13941968b81cda206704a6c2dcf7953760d1f7c05df400b8ad454c21/atila-0.2.6.2.tar.gz", "yanked": false}], "0.2.6.3": [{"comment_text": "", "digests": {"md5": "eac0cbbd5b469e26f30b7ebea1b093c7", "sha256": "8fa4b9ba3dd7302d403006e3df9f2f39b08f272bc6141bf9f5b4b8f09c6e8663"}, "downloads": -1, "filename": "atila-0.2.6.3.tar.gz", "has_sig": false, "md5_digest": "eac0cbbd5b469e26f30b7ebea1b093c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124582, "upload_time": "2019-04-09T11:47:03", "upload_time_iso_8601": "2019-04-09T11:47:03.611342Z", "url": "https://files.pythonhosted.org/packages/25/4f/1b99a16b3426f48ea42feaf201995177cf7082dcc03d94664e5ecbeb3860/atila-0.2.6.3.tar.gz", "yanked": false}], "0.2.6.4": [{"comment_text": "", "digests": {"md5": "41748d6bf471bc78e59b1cbaeac4a8c6", "sha256": "bf7e023fcda1938d50616927157ab989711b6a1f6ca9198ab34f51a1f2b8795b"}, "downloads": -1, "filename": "atila-0.2.6.4.tar.gz", "has_sig": false, "md5_digest": "41748d6bf471bc78e59b1cbaeac4a8c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124676, "upload_time": "2019-04-11T14:58:31", "upload_time_iso_8601": "2019-04-11T14:58:31.406017Z", "url": "https://files.pythonhosted.org/packages/66/81/0c8cce81739773fc1f9d66f5606b675d1283d14d3d392f5c90b3202c4ae6/atila-0.2.6.4.tar.gz", "yanked": false}], "0.2.6.5": [{"comment_text": "", "digests": {"md5": "cdac25677f585ddb080443d2e3786d2f", "sha256": "36c8d4bcd9babe36d5375429c032c664e3e95dfc5a33219e765381f6fb108ee6"}, "downloads": -1, "filename": "atila-0.2.6.5.tar.gz", "has_sig": false, "md5_digest": "cdac25677f585ddb080443d2e3786d2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124698, "upload_time": "2019-04-11T23:30:00", "upload_time_iso_8601": "2019-04-11T23:30:00.001053Z", "url": "https://files.pythonhosted.org/packages/20/8e/e876ae0f6e53624fb4d3c777fd901a9bcca5cf0f007122755cef6653e342/atila-0.2.6.5.tar.gz", "yanked": false}], "0.2.6.7": [{"comment_text": "", "digests": {"md5": "c81454661911bc33e4f15c1aee759e36", "sha256": "8768fc2596aa0748a94eb83c3c032247a898d5e6b36e54ddbaf0873931c1354e"}, "downloads": -1, "filename": "atila-0.2.6.7.tar.gz", "has_sig": false, "md5_digest": "c81454661911bc33e4f15c1aee759e36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124462, "upload_time": "2019-04-12T06:10:17", "upload_time_iso_8601": "2019-04-12T06:10:17.802070Z", "url": "https://files.pythonhosted.org/packages/e7/b5/1ace95520d80602be5fe6396011e93339be6ad78addf01d54169edce13fa/atila-0.2.6.7.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "8e757e9c5f1ff9280ffa8e42cc704a77", "sha256": "796ff3f469ac763cb72cedfa988ea94c09446231278e0621dd86ef1bf8bb3885"}, "downloads": -1, "filename": "atila-0.3.tar.gz", "has_sig": false, "md5_digest": "8e757e9c5f1ff9280ffa8e42cc704a77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118948, "upload_time": "2019-04-19T05:02:57", "upload_time_iso_8601": "2019-04-19T05:02:57.331529Z", "url": "https://files.pythonhosted.org/packages/14/66/90913b71897f44c300c9ff2530f76aa64760ae103d4f82d5f3f3cd40f5f3/atila-0.3.tar.gz", "yanked": false}], "0.3.0.1": [{"comment_text": "", "digests": {"md5": "ac737e705e322f968ddedf613b877c5d", "sha256": "1756a8bbfe97a9c4d4baf60db70093510331c871151b0fbddacf3b2e45376d0a"}, "downloads": -1, "filename": "atila-0.3.0.1.tar.gz", "has_sig": false, "md5_digest": "ac737e705e322f968ddedf613b877c5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118993, "upload_time": "2019-04-22T11:33:22", "upload_time_iso_8601": "2019-04-22T11:33:22.632060Z", "url": "https://files.pythonhosted.org/packages/9d/35/962f872e6b6a925d9ee70e63440fe194840bb8090372ef2cd578334019fa/atila-0.3.0.1.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "0257dcb802563b6d81a97af16bbd4bef", "sha256": "0c2b99fd1ee8d7d94b2c927dd9ebc8e0ddee5541806fbe0d7f864367a308dd05"}, "downloads": -1, "filename": "atila-0.3.1.tar.gz", "has_sig": false, "md5_digest": "0257dcb802563b6d81a97af16bbd4bef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119476, "upload_time": "2019-04-23T13:51:39", "upload_time_iso_8601": "2019-04-23T13:51:39.550978Z", "url": "https://files.pythonhosted.org/packages/82/25/f080fbcebe76506135f4ce72095a6a6342febfd929336204ac4da23c347b/atila-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "e410c143587593deeb20a5bd08294b10", "sha256": "6bed873fb9c298c001891d3116841d6ad72f672008652478c752da9aba6e2a4d"}, "downloads": -1, "filename": "atila-0.3.2.tar.gz", "has_sig": false, "md5_digest": "e410c143587593deeb20a5bd08294b10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119264, "upload_time": "2019-04-25T05:06:36", "upload_time_iso_8601": "2019-04-25T05:06:36.748864Z", "url": "https://files.pythonhosted.org/packages/b4/ce/48f12ee2003a513212a23eedd0171095c53cea24d47d91b578bef2a13f29/atila-0.3.2.tar.gz", "yanked": false}], "0.3.2.1": [{"comment_text": "", "digests": {"md5": "35b72e259853367055bb2175189f2d6c", "sha256": "9099821386f9f3ef38554ad136abac13c7e18f428d1b57448c62c66282ff772f"}, "downloads": -1, "filename": "atila-0.3.2.1.tar.gz", "has_sig": false, "md5_digest": "35b72e259853367055bb2175189f2d6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119774, "upload_time": "2019-04-26T10:41:14", "upload_time_iso_8601": "2019-04-26T10:41:14.549914Z", "url": "https://files.pythonhosted.org/packages/83/d8/78cc55dc727c9d4ecd118b1658d6e1bc465938044a8c4c3d90c9079c7228/atila-0.3.2.1.tar.gz", "yanked": false}], "0.3.2.10": [{"comment_text": "", "digests": {"md5": "b2f0408bd4d1512526ca90f29f0842e8", "sha256": "cb3028689c1b7c78ac86f45cc7df936bdc6fa8db3e234d05e216936278a03098"}, "downloads": -1, "filename": "atila-0.3.2.10.tar.gz", "has_sig": false, "md5_digest": "b2f0408bd4d1512526ca90f29f0842e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119920, "upload_time": "2019-05-24T16:43:32", "upload_time_iso_8601": "2019-05-24T16:43:32.736971Z", "url": "https://files.pythonhosted.org/packages/30/49/d8b067dc819c97ac556fecae88b6c5145f890d57ada583a370d835586c59/atila-0.3.2.10.tar.gz", "yanked": false}], "0.3.2.11": [{"comment_text": "", "digests": {"md5": "fb798600dfa0f834d20dd099e372e406", "sha256": "556e3088bbf142c77ca45ead229855d5bbb3229c9692e9c8ba25d93217da4587"}, "downloads": -1, "filename": "atila-0.3.2.11.tar.gz", "has_sig": false, "md5_digest": "fb798600dfa0f834d20dd099e372e406", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119932, "upload_time": "2019-05-25T03:47:39", "upload_time_iso_8601": "2019-05-25T03:47:39.848138Z", "url": "https://files.pythonhosted.org/packages/6c/6a/31018504df80964ddf17aee88aac61457e7a4593e10ce0ef6cb6cf3f9414/atila-0.3.2.11.tar.gz", "yanked": false}], "0.3.2.12": [{"comment_text": "", "digests": {"md5": "eda7a5566eabc62fdb655070bea6e6bf", "sha256": "d45d74871a09f60c56b91bbaf8a0885cb6a85c1fe9e789e4d40f45be128a8b48"}, "downloads": -1, "filename": "atila-0.3.2.12.tar.gz", "has_sig": false, "md5_digest": "eda7a5566eabc62fdb655070bea6e6bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119945, "upload_time": "2019-05-25T04:44:49", "upload_time_iso_8601": "2019-05-25T04:44:49.335856Z", "url": "https://files.pythonhosted.org/packages/a7/73/3da36f0e927721d21ca98ee77ab79ca4bb0633208a217f03e59bdafdff9a/atila-0.3.2.12.tar.gz", "yanked": false}], "0.3.2.13": [{"comment_text": "", "digests": {"md5": "7f465c2d1d411da8d513e10a9be0e389", "sha256": "6c5ea373c0372c93f276f694bb2901e301cb8cc14d0a30417565a14a90f78cfd"}, "downloads": -1, "filename": "atila-0.3.2.13.tar.gz", "has_sig": false, "md5_digest": "7f465c2d1d411da8d513e10a9be0e389", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119959, "upload_time": "2019-06-05T14:34:46", "upload_time_iso_8601": "2019-06-05T14:34:46.633037Z", "url": "https://files.pythonhosted.org/packages/b2/02/e6b37606de0579fcd397a0b7a8558ee9d865df27ef7bc8acb6d1bfe06cf2/atila-0.3.2.13.tar.gz", "yanked": false}], "0.3.2.14": [{"comment_text": "", "digests": {"md5": "f93f65608fa761abd73af0beb88600c4", "sha256": "261d25e91f9d874ce1a2633f59690a0f8dc8903ef91d624d7e43c366a51a73a2"}, "downloads": -1, "filename": "atila-0.3.2.14.tar.gz", "has_sig": false, "md5_digest": "f93f65608fa761abd73af0beb88600c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119934, "upload_time": "2019-06-05T14:40:08", "upload_time_iso_8601": "2019-06-05T14:40:08.164047Z", "url": "https://files.pythonhosted.org/packages/3b/b6/adf3bb3f4992172f6146265b2030f655a01c945a0a1473852249cf9eae8d/atila-0.3.2.14.tar.gz", "yanked": false}], "0.3.2.15": [{"comment_text": "", "digests": {"md5": "3fd3ecaca254fa452c92096da93ce695", "sha256": "81eef15afa7023d4271d2d6dad5ddc301aed71039efe48836e2cfd1b459d390a"}, "downloads": -1, "filename": "atila-0.3.2.15.tar.gz", "has_sig": false, "md5_digest": "3fd3ecaca254fa452c92096da93ce695", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120015, "upload_time": "2019-06-05T22:17:27", "upload_time_iso_8601": "2019-06-05T22:17:27.842963Z", "url": "https://files.pythonhosted.org/packages/79/19/4580e430281dcaa807ea7fa525d17650c8d5d2905e10d6e241c4c588c970/atila-0.3.2.15.tar.gz", "yanked": false}], "0.3.2.16": [{"comment_text": "", "digests": {"md5": "e525916e0aca5fef0db69cd70764de0c", "sha256": "ecc2563f645b6186023e0b212f63302a84f794338f0794f076276ab3c6d67ae6"}, "downloads": -1, "filename": "atila-0.3.2.16.tar.gz", "has_sig": false, "md5_digest": "e525916e0aca5fef0db69cd70764de0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120028, "upload_time": "2019-07-24T07:09:53", "upload_time_iso_8601": "2019-07-24T07:09:53.733236Z", "url": "https://files.pythonhosted.org/packages/2f/bd/9b6289c62d9187ed69da60996dbe4d1b0e3a85fa8bad048575e5af5f032a/atila-0.3.2.16.tar.gz", "yanked": false}], "0.3.2.17": [{"comment_text": "", "digests": {"md5": "33395733886b954e61e5ee32fd6a3835", "sha256": "71a829cd2da433ce10c9b9ba0e32a7941ba2b02f0d9557d9bb373f368e7239d1"}, "downloads": -1, "filename": "atila-0.3.2.17.tar.gz", "has_sig": false, "md5_digest": "33395733886b954e61e5ee32fd6a3835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120096, "upload_time": "2019-07-24T10:22:53", "upload_time_iso_8601": "2019-07-24T10:22:53.902074Z", "url": "https://files.pythonhosted.org/packages/32/a0/ea84071a248b81bfd80722c92a554b3b6f3b790ea4d319fbdc801ab2a92b/atila-0.3.2.17.tar.gz", "yanked": false}], "0.3.2.18": [{"comment_text": "", "digests": {"md5": "3b119accdfbe572d4879b5a3f2fbba18", "sha256": "c4fb4812834877b8c01d48c95af031d28a6fcdbb8d78858ccc69286b7cc28dbe"}, "downloads": -1, "filename": "atila-0.3.2.18.tar.gz", "has_sig": false, "md5_digest": "3b119accdfbe572d4879b5a3f2fbba18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120450, "upload_time": "2019-07-26T03:49:38", "upload_time_iso_8601": "2019-07-26T03:49:38.628467Z", "url": "https://files.pythonhosted.org/packages/1c/3d/e4a946ff0544a0d4cbe3c9c78f33529f214e5f46d2e298081f1687bcf028/atila-0.3.2.18.tar.gz", "yanked": false}], "0.3.2.19": [{"comment_text": "", "digests": {"md5": "d7e064fb858757682c410e723d566791", "sha256": "0884dd65a77d4fa316d6cc4529c5fd85acdd8e65e6688247acd28b75a62acd8d"}, "downloads": -1, "filename": "atila-0.3.2.19.tar.gz", "has_sig": false, "md5_digest": "d7e064fb858757682c410e723d566791", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120596, "upload_time": "2019-07-26T16:53:33", "upload_time_iso_8601": "2019-07-26T16:53:33.402782Z", "url": "https://files.pythonhosted.org/packages/9b/39/3aa1fe6c5e59b31e8d1219937f125e7d06329abd0c1532b1191b44c0212d/atila-0.3.2.19.tar.gz", "yanked": false}], "0.3.2.2": [{"comment_text": "", "digests": {"md5": "dab518b2c3a25e7954b6adf0d3c6d076", "sha256": "db203e9124256c1cf4488210092663a07eea8e4eab02eded5f272562cd4f172f"}, "downloads": -1, "filename": "atila-0.3.2.2.tar.gz", "has_sig": false, "md5_digest": "dab518b2c3a25e7954b6adf0d3c6d076", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119357, "upload_time": "2019-05-01T01:16:25", "upload_time_iso_8601": "2019-05-01T01:16:25.455733Z", "url": "https://files.pythonhosted.org/packages/32/aa/546dcb56173c46256ef156d43008844b04c4458bf402ea250fec542b7dc8/atila-0.3.2.2.tar.gz", "yanked": false}], "0.3.2.20": [{"comment_text": "", "digests": {"md5": "93929ecfca8322dcf99eb6a320e030d2", "sha256": "f29991bad1f8380846984cd26ba460abc9d8080843900cbf922df1b43c67aff9"}, "downloads": -1, "filename": "atila-0.3.2.20.tar.gz", "has_sig": false, "md5_digest": "93929ecfca8322dcf99eb6a320e030d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120674, "upload_time": "2019-07-26T17:18:24", "upload_time_iso_8601": "2019-07-26T17:18:24.814082Z", "url": "https://files.pythonhosted.org/packages/f4/ca/e0723ecb4c8d135ee9da2466a0c61fb51f29b1e3cf17f52d3ba01fccf06c/atila-0.3.2.20.tar.gz", "yanked": false}], "0.3.2.3": [{"comment_text": "", "digests": {"md5": "c8a295e0d1f201d1dd21bea34b8d625b", "sha256": "ff9ae0592e78aa2ae2aa3ccf5cec8653d4b0edeacb1fa5f7297d85d1eda40d3d"}, "downloads": -1, "filename": "atila-0.3.2.3.tar.gz", "has_sig": false, "md5_digest": "c8a295e0d1f201d1dd21bea34b8d625b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119367, "upload_time": "2019-05-03T06:23:39", "upload_time_iso_8601": "2019-05-03T06:23:39.694108Z", "url": "https://files.pythonhosted.org/packages/ee/d5/03209f7bdb46ca92f384f251e6f4f54473eaa67ab572c8e440f8fac9a820/atila-0.3.2.3.tar.gz", "yanked": false}], "0.3.2.4": [{"comment_text": "", "digests": {"md5": "17fd38eb1675b8109b22ccacb4f50104", "sha256": "7b9410c79cd6db4df55932472c30a6bf8d2803b93b082f51f243497318e07062"}, "downloads": -1, "filename": "atila-0.3.2.4.tar.gz", "has_sig": false, "md5_digest": "17fd38eb1675b8109b22ccacb4f50104", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119590, "upload_time": "2019-05-10T01:01:57", "upload_time_iso_8601": "2019-05-10T01:01:57.038230Z", "url": "https://files.pythonhosted.org/packages/b1/6c/a36c798fdb86953853b196170f0a24a4ef2facee6f5e9454ac0b6d46c3d3/atila-0.3.2.4.tar.gz", "yanked": false}], "0.3.2.5": [{"comment_text": "", "digests": {"md5": "17b83405265f5882bdce40607a5248e1", "sha256": "9d2d1f5083d63cdddc4238be5ffe3e7e46969e60e29938342d2e18f5537d4b38"}, "downloads": -1, "filename": "atila-0.3.2.5.tar.gz", "has_sig": false, "md5_digest": "17b83405265f5882bdce40607a5248e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119559, "upload_time": "2019-05-10T13:38:49", "upload_time_iso_8601": "2019-05-10T13:38:49.708022Z", "url": "https://files.pythonhosted.org/packages/01/a7/1fa4f4eae56d6fac2dd4862762ff1d8a8388580c70660baa1962a939163e/atila-0.3.2.5.tar.gz", "yanked": false}], "0.3.2.6": [{"comment_text": "", "digests": {"md5": "8f00262ddb310769a4117c70a072ca9f", "sha256": "6a7b6f10421880b07c961f9c4260d359c9697cdd16db50d5cc9a839677081256"}, "downloads": -1, "filename": "atila-0.3.2.6.tar.gz", "has_sig": false, "md5_digest": "8f00262ddb310769a4117c70a072ca9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119578, "upload_time": "2019-05-15T07:28:45", "upload_time_iso_8601": "2019-05-15T07:28:45.002817Z", "url": "https://files.pythonhosted.org/packages/a8/72/ddac14fdb04ddb9dd29d48da93c1cf9b51a5938451a5a60fdee47c12392e/atila-0.3.2.6.tar.gz", "yanked": false}], "0.3.2.7": [{"comment_text": "", "digests": {"md5": "4423145d6a7b000afe4d1b44203049e0", "sha256": "3c9b1e0e5a99a4f769dca1a95e78893193e57960006d61dc302d06129f7d56ae"}, "downloads": -1, "filename": "atila-0.3.2.7.tar.gz", "has_sig": false, "md5_digest": "4423145d6a7b000afe4d1b44203049e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119821, "upload_time": "2019-05-17T05:35:50", "upload_time_iso_8601": "2019-05-17T05:35:50.203450Z", "url": "https://files.pythonhosted.org/packages/a7/cc/b6d3e2609b0b97a18a1815cbd601581c8546c81c5ed6b124fb0ae322632f/atila-0.3.2.7.tar.gz", "yanked": false}], "0.3.2.8": [{"comment_text": "", "digests": {"md5": "94731c5fbe778e3e81ff0fb916c431b8", "sha256": "45c859f77aa4c13d3be9a149d9a652429e55581030c6f0e75f93de18d5a42b78"}, "downloads": -1, "filename": "atila-0.3.2.8.tar.gz", "has_sig": false, "md5_digest": "94731c5fbe778e3e81ff0fb916c431b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119885, "upload_time": "2019-05-24T16:16:53", "upload_time_iso_8601": "2019-05-24T16:16:53.289298Z", "url": "https://files.pythonhosted.org/packages/a7/fe/0dfae570f1df7f30a6fdfa8b0093b1dbbd49e50056ac48c475f140dd2dad/atila-0.3.2.8.tar.gz", "yanked": false}], "0.3.3.0": [{"comment_text": "", "digests": {"md5": "787fe6df7aa285a9fbcdb48856653c74", "sha256": "78bad0311fb994ec6625ad1509eb1f70dcb579f7e2eccfed759ff69e9da7d456"}, "downloads": -1, "filename": "atila-0.3.3.0.tar.gz", "has_sig": false, "md5_digest": "787fe6df7aa285a9fbcdb48856653c74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122276, "upload_time": "2019-07-27T05:28:28", "upload_time_iso_8601": "2019-07-27T05:28:28.390256Z", "url": "https://files.pythonhosted.org/packages/52/2e/62c1aac46074edcd4674bbb275d86594bf34c8d2e74dbe426e872fe528c5/atila-0.3.3.0.tar.gz", "yanked": false}], "0.3.3.1": [{"comment_text": "", "digests": {"md5": "f15abe1dc1c25d68e68995fe47ca7133", "sha256": "65cb1ea62b16bb12e372187a1e82086c94222c8106134f0e5fa333c4886b07cb"}, "downloads": -1, "filename": "atila-0.3.3.1.tar.gz", "has_sig": false, "md5_digest": "f15abe1dc1c25d68e68995fe47ca7133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122273, "upload_time": "2019-07-27T05:30:50", "upload_time_iso_8601": "2019-07-27T05:30:50.429409Z", "url": "https://files.pythonhosted.org/packages/5a/da/614a050717bc4b809affdf722f84701725909e21213596b520a9984f4fcf/atila-0.3.3.1.tar.gz", "yanked": false}], "0.4.0.0": [{"comment_text": "", "digests": {"md5": "33ce4f3dde0358c27213254ebf68b225", "sha256": "cafd59236c93ac1cee7042b17b8292915fe9c5a9b2c25b5c5bcf3577a5a83aa0"}, "downloads": -1, "filename": "atila-0.4.0.0.tar.gz", "has_sig": false, "md5_digest": "33ce4f3dde0358c27213254ebf68b225", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122508, "upload_time": "2019-08-13T00:55:47", "upload_time_iso_8601": "2019-08-13T00:55:47.856473Z", "url": "https://files.pythonhosted.org/packages/6c/4e/13f6ba897a02e65d7accab966ded9b9123a318ec17281d87f48abd186d19/atila-0.4.0.0.tar.gz", "yanked": false}], "0.4.0.1": [{"comment_text": "", "digests": {"md5": "3e549aef950bfea2108f504f3d12068c", "sha256": "9bf13a6a208fb92e5ec98b0a3932b30f6b5797164a08747e638bedc14b8afced"}, "downloads": -1, "filename": "atila-0.4.0.1.tar.gz", "has_sig": false, "md5_digest": "3e549aef950bfea2108f504f3d12068c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123121, "upload_time": "2019-08-14T07:24:02", "upload_time_iso_8601": "2019-08-14T07:24:02.752406Z", "url": "https://files.pythonhosted.org/packages/06/0c/e26865b3fdef3a080572b18989b1e0127703a056c30a13fd36ea1a0232c4/atila-0.4.0.1.tar.gz", "yanked": false}], "0.4.1.0": [{"comment_text": "", "digests": {"md5": "647a52af971fed0fa250071f8a52501f", "sha256": "e59143d8c8ff0d58f0d017a88a7124f70d18c8937c4628dbe40175685b0436a2"}, "downloads": -1, "filename": "atila-0.4.1.0.tar.gz", "has_sig": false, "md5_digest": "647a52af971fed0fa250071f8a52501f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123290, "upload_time": "2019-08-20T11:12:36", "upload_time_iso_8601": "2019-08-20T11:12:36.287502Z", "url": "https://files.pythonhosted.org/packages/9d/c3/cf782f1e80ab86d925486dd7cecac9983702043a855d47e855ddc0e0d318/atila-0.4.1.0.tar.gz", "yanked": false}], "0.4.1.1": [{"comment_text": "", "digests": {"md5": "3dd41374264fb895704cd7f1a1e882f6", "sha256": "a68f9f3f9c8a34673f65d203db8930af60b384239eb770d91247898a9ecb98ee"}, "downloads": -1, "filename": "atila-0.4.1.1.tar.gz", "has_sig": false, "md5_digest": "3dd41374264fb895704cd7f1a1e882f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123278, "upload_time": "2019-08-20T11:31:12", "upload_time_iso_8601": "2019-08-20T11:31:12.287235Z", "url": "https://files.pythonhosted.org/packages/51/c3/f612c451488f38ea8f1fd42306bb106ee43f1068b92a048ea09d75a67f52/atila-0.4.1.1.tar.gz", "yanked": false}], "0.4.2.0": [{"comment_text": "", "digests": {"md5": "d5f5e4c5863e65f4c4e9acc703027e70", "sha256": "018fe6b1dc7c0a23d54a6bcaf8ff0e34a819483d211fe5f4c2723fb2392c2164"}, "downloads": -1, "filename": "atila-0.4.2.0.tar.gz", "has_sig": false, "md5_digest": "d5f5e4c5863e65f4c4e9acc703027e70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123279, "upload_time": "2019-08-27T11:02:18", "upload_time_iso_8601": "2019-08-27T11:02:18.401083Z", "url": "https://files.pythonhosted.org/packages/38/08/b151c4c9a963ea30e5843cbbc46294445b43927fe621080e6ca19d3b8519/atila-0.4.2.0.tar.gz", "yanked": false}], "0.4.2.1": [{"comment_text": "", "digests": {"md5": "a1a256075dcd0fb89bb2d6f7c866e839", "sha256": "c12f3e275e1252eda5c50f20d03de4222be2470013b651aea0c1207950a2e9a4"}, "downloads": -1, "filename": "atila-0.4.2.1.tar.gz", "has_sig": false, "md5_digest": "a1a256075dcd0fb89bb2d6f7c866e839", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123281, "upload_time": "2019-08-28T00:50:27", "upload_time_iso_8601": "2019-08-28T00:50:27.530971Z", "url": "https://files.pythonhosted.org/packages/67/b7/dabcf1c3c728b7c1ec0c3d15f9e52f84caa037364786511f830c28a18248/atila-0.4.2.1.tar.gz", "yanked": false}], "0.4.2.2": [{"comment_text": "", "digests": {"md5": "dc022e70603a0f3d35ee7e998ca8bf21", "sha256": "171fc9387010929fd732dc63861cbafea9fa3c491b633fae6c425ad01a83483f"}, "downloads": -1, "filename": "atila-0.4.2.2.tar.gz", "has_sig": false, "md5_digest": "dc022e70603a0f3d35ee7e998ca8bf21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123371, "upload_time": "2019-09-07T05:41:35", "upload_time_iso_8601": "2019-09-07T05:41:35.832914Z", "url": "https://files.pythonhosted.org/packages/11/cb/a603d5bc148277c9ee3d8c965fd65dc36118cc8c7732e2e45c52ca9b1cf2/atila-0.4.2.2.tar.gz", "yanked": false}], "0.4.2.3": [{"comment_text": "", "digests": {"md5": "3695efe8eff5021149aec4320455b31e", "sha256": "3f4f2b864dfd8a8bbeecbe66c4367a65eb29f5e392ea558ab02fd3fa42a4b6e5"}, "downloads": -1, "filename": "atila-0.4.2.3.tar.gz", "has_sig": false, "md5_digest": "3695efe8eff5021149aec4320455b31e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123487, "upload_time": "2019-09-10T17:55:56", "upload_time_iso_8601": "2019-09-10T17:55:56.922791Z", "url": "https://files.pythonhosted.org/packages/d4/ba/c5a5d5010f98502e088c6cf31d589d23321491ef55613c235df191fc6db7/atila-0.4.2.3.tar.gz", "yanked": false}], "0.4.2.4": [{"comment_text": "", "digests": {"md5": "625e678ad33ecb40e273db560951a16e", "sha256": "ace60b7cf0fb18fcad77a0c3436e65bea562d8d28c618fb793f83ecdc7f9a1ae"}, "downloads": -1, "filename": "atila-0.4.2.4.tar.gz", "has_sig": false, "md5_digest": "625e678ad33ecb40e273db560951a16e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123488, "upload_time": "2019-09-11T10:09:47", "upload_time_iso_8601": "2019-09-11T10:09:47.835036Z", "url": "https://files.pythonhosted.org/packages/d7/51/5438bdb844cf2e052e3676a0ccfd05631f7e117fe575dcbe06602e7070c2/atila-0.4.2.4.tar.gz", "yanked": false}], "0.4.2.5": [{"comment_text": "", "digests": {"md5": "1d71054e3c72f2be2adc56f973691bf7", "sha256": "459cd779e8b26536a8297fe24d5cbcebb03957ac2ed1d6fbcfc3345e2497c5bc"}, "downloads": -1, "filename": "atila-0.4.2.5.tar.gz", "has_sig": false, "md5_digest": "1d71054e3c72f2be2adc56f973691bf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122591, "upload_time": "2019-09-22T10:51:26", "upload_time_iso_8601": "2019-09-22T10:51:26.706126Z", "url": "https://files.pythonhosted.org/packages/b6/8f/1ef70e0acbd497a5f6423acb687d10e24fc10e3ad5e70f7792d066d9570f/atila-0.4.2.5.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "7ebf974b9e66f4a3dc8c0a7c3512bcd1", "sha256": "dd53eb3c3307e463740e164d33c9a3531159757e5878e82e84757995538f77fd"}, "downloads": -1, "filename": "atila-0.5.0.tar.gz", "has_sig": false, "md5_digest": "7ebf974b9e66f4a3dc8c0a7c3512bcd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123737, "upload_time": "2019-09-23T11:14:15", "upload_time_iso_8601": "2019-09-23T11:14:15.404664Z", "url": "https://files.pythonhosted.org/packages/43/82/b613737267b78773e4efbff08243e3bfe596e9c9126daccd68d63a46928c/atila-0.5.0.tar.gz", "yanked": false}], "0.5.0.1": [{"comment_text": "", "digests": {"md5": "150d125dbf38f51dc92dfe5cd72ec322", "sha256": "8829023ed6b8af7cbb96939d733f91b7792e3a2455327a5a4f41242f3e68997f"}, "downloads": -1, "filename": "atila-0.5.0.1.tar.gz", "has_sig": false, "md5_digest": "150d125dbf38f51dc92dfe5cd72ec322", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123789, "upload_time": "2019-09-23T13:00:45", "upload_time_iso_8601": "2019-09-23T13:00:45.028976Z", "url": "https://files.pythonhosted.org/packages/d1/cf/fb0ed5ea3577c59a91f3f93c86a7a5015745c84148568838a0491110c4ca/atila-0.5.0.1.tar.gz", "yanked": false}], "0.5.0.2": [{"comment_text": "", "digests": {"md5": "dbe985d38431b852fb489982358b95e3", "sha256": "67627c70f03f9bafb7e4dab68a2d0128a3f07e143337043eb055b066d37d1fe2"}, "downloads": -1, "filename": "atila-0.5.0.2.tar.gz", "has_sig": false, "md5_digest": "dbe985d38431b852fb489982358b95e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124215, "upload_time": "2019-09-25T06:35:51", "upload_time_iso_8601": "2019-09-25T06:35:51.330062Z", "url": "https://files.pythonhosted.org/packages/fb/0a/85eea72b3ab3deff906315ce36adacf109bb21b8eebfb76023ab864e1d57/atila-0.5.0.2.tar.gz", "yanked": false}], "0.5.0.3": [{"comment_text": "", "digests": {"md5": "6bb39d9e52136329f4b1f66fcd211053", "sha256": "b02960e0a1c8d8659aa69b5ad9c5c3fcb280c30bcea9a3cbfacbe337c510ed5b"}, "downloads": -1, "filename": "atila-0.5.0.3.tar.gz", "has_sig": false, "md5_digest": "6bb39d9e52136329f4b1f66fcd211053", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124292, "upload_time": "2019-09-26T04:35:44", "upload_time_iso_8601": "2019-09-26T04:35:44.843678Z", "url": "https://files.pythonhosted.org/packages/2c/4b/2fa1a2facab793af88e95665ccae5415c9a9d6cbf2f7e4d52d581f41700b/atila-0.5.0.3.tar.gz", "yanked": false}], "0.5.0.4": [{"comment_text": "", "digests": {"md5": "74937f575774ba67387635892f3cdd78", "sha256": "a92e5aeff481bb57b1f53f3eb1a99c4564ed4fee13bc7dab2952664e7c0e0525"}, "downloads": -1, "filename": "atila-0.5.0.4.tar.gz", "has_sig": false, "md5_digest": "74937f575774ba67387635892f3cdd78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124090, "upload_time": "2019-09-26T13:46:06", "upload_time_iso_8601": "2019-09-26T13:46:06.231969Z", "url": "https://files.pythonhosted.org/packages/f7/07/8b662fdf5c03f4fcb66af823c62e2a84d5984579a4f0edd94b6ad86a41be/atila-0.5.0.4.tar.gz", "yanked": false}], "0.5.0.5": [{"comment_text": "", "digests": {"md5": "1739a9a04ee9a456055bf01920858ae2", "sha256": "7bb2c6e73f8a98a1556da7ed38b4d907ed9850fb69d516e3d73e421664e284f6"}, "downloads": -1, "filename": "atila-0.5.0.5.tar.gz", "has_sig": false, "md5_digest": "1739a9a04ee9a456055bf01920858ae2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124612, "upload_time": "2019-09-27T06:00:02", "upload_time_iso_8601": "2019-09-27T06:00:02.004760Z", "url": "https://files.pythonhosted.org/packages/fd/ba/f3c6e27a7f1427fbe84eea2f00d7c1df9124110ba3c19aa95385ff4e93db/atila-0.5.0.5.tar.gz", "yanked": false}], "0.5.0.6": [{"comment_text": "", "digests": {"md5": "525d87e6710a0fd5b5e56398426e24ad", "sha256": "5f3713f4b3979bf474a65748117040ab3c493645071adbf7ad8c4b75216e7f85"}, "downloads": -1, "filename": "atila-0.5.0.6.tar.gz", "has_sig": false, "md5_digest": "525d87e6710a0fd5b5e56398426e24ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124023, "upload_time": "2019-09-27T09:29:11", "upload_time_iso_8601": "2019-09-27T09:29:11.052417Z", "url": "https://files.pythonhosted.org/packages/76/fe/083a7f292f40fc622aadcaee53c1ea2558bd2ce0c09d91550b91c66a25e1/atila-0.5.0.6.tar.gz", "yanked": false}], "0.5.0b1": [{"comment_text": "", "digests": {"md5": "2efa6ea3297f1ace42c10c93a1d121f1", "sha256": "fdc23740972196d31b5df3b51c8a7956475da8ea8b035f982facf2714ac078cd"}, "downloads": -1, "filename": "atila-0.5.0b1.tar.gz", "has_sig": false, "md5_digest": "2efa6ea3297f1ace42c10c93a1d121f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123772, "upload_time": "2019-09-23T05:35:24", "upload_time_iso_8601": "2019-09-23T05:35:24.703375Z", "url": "https://files.pythonhosted.org/packages/14/a0/13326c3f5872df552c13b3e77490e8f2c31a0f50084c9b15b7abf1905414/atila-0.5.0b1.tar.gz", "yanked": false}], "0.5.1.0": [{"comment_text": "", "digests": {"md5": "22e3ff484601fc61556a1dcd79577bbe", "sha256": "cd8128bec79d48b6211575cc828d3802f25478ddce9e98bfbab4331531a7f863"}, "downloads": -1, "filename": "atila-0.5.1.0.tar.gz", "has_sig": false, "md5_digest": "22e3ff484601fc61556a1dcd79577bbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123980, "upload_time": "2019-09-27T14:03:55", "upload_time_iso_8601": "2019-09-27T14:03:55.703224Z", "url": "https://files.pythonhosted.org/packages/f5/be/0368eb4bc00afc3ef5e55310f46c4bfad7c5cc03590358b6989b1787bbeb/atila-0.5.1.0.tar.gz", "yanked": false}], "0.5.1.1": [{"comment_text": "", "digests": {"md5": "08aa1765355d44d9d8334083119bf133", "sha256": "9e433e1b0889c91402c429c2977bd40aefd41f5830b03639d71747445beba7e1"}, "downloads": -1, "filename": "atila-0.5.1.1.tar.gz", "has_sig": false, "md5_digest": "08aa1765355d44d9d8334083119bf133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124388, "upload_time": "2019-10-24T12:28:38", "upload_time_iso_8601": "2019-10-24T12:28:38.441678Z", "url": "https://files.pythonhosted.org/packages/7e/0e/3ce6b36932d3df85b36c5557a65f913122887daae08d6913af2eb2543f49/atila-0.5.1.1.tar.gz", "yanked": false}], "0.5.1.2": [{"comment_text": "", "digests": {"md5": "8a6ca2d00005bd8df8ab762258aa6990", "sha256": "2064c2884f352de54d130d4364a6ad34923314e35665962042cc3a9c22bd44db"}, "downloads": -1, "filename": "atila-0.5.1.2.tar.gz", "has_sig": false, "md5_digest": "8a6ca2d00005bd8df8ab762258aa6990", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124906, "upload_time": "2019-10-25T12:03:21", "upload_time_iso_8601": "2019-10-25T12:03:21.338814Z", "url": "https://files.pythonhosted.org/packages/e6/0d/be19a8a3abdf11d8d49694e7876dc61f8aa9fd04bcbf3184cee3e23c3f5e/atila-0.5.1.2.tar.gz", "yanked": false}], "0.5.1.3": [{"comment_text": "", "digests": {"md5": "a7b8852b104a8b824e06ce95a3d397cf", "sha256": "d1a1075332bc36039f01e9666f511f8c5192fcc449057d4a036f89270fe3c3f6"}, "downloads": -1, "filename": "atila-0.5.1.3.tar.gz", "has_sig": false, "md5_digest": "a7b8852b104a8b824e06ce95a3d397cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124897, "upload_time": "2019-10-25T13:45:02", "upload_time_iso_8601": "2019-10-25T13:45:02.714437Z", "url": "https://files.pythonhosted.org/packages/20/60/fa259744a97d83d732ec17856250a7e1e14c5d9d7d7c3035f540f9dfb11b/atila-0.5.1.3.tar.gz", "yanked": false}], "0.5.1.4": [{"comment_text": "", "digests": {"md5": "127b137a26a053d700aa47b41e558868", "sha256": "d29268cf407cf678bab43860efff7d971b8019315bf230ec535b6caa72e1e93d"}, "downloads": -1, "filename": "atila-0.5.1.4.tar.gz", "has_sig": false, "md5_digest": "127b137a26a053d700aa47b41e558868", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122747, "upload_time": "2019-10-25T14:55:30", "upload_time_iso_8601": "2019-10-25T14:55:30.135814Z", "url": "https://files.pythonhosted.org/packages/17/e3/d96154bcd89b4e409c94c9bdfecdb94e60e5591b01fcbcfea625b2f5723d/atila-0.5.1.4.tar.gz", "yanked": false}], "0.5.1.5": [{"comment_text": "", "digests": {"md5": "543f9a840e71546ac0ad5fc03b783607", "sha256": "63385315e0770aa973ed604dea27f4fcc14cd4baddd5603d42a66a25a69076d2"}, "downloads": -1, "filename": "atila-0.5.1.5.tar.gz", "has_sig": false, "md5_digest": "543f9a840e71546ac0ad5fc03b783607", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124914, "upload_time": "2019-10-25T15:49:51", "upload_time_iso_8601": "2019-10-25T15:49:51.209911Z", "url": "https://files.pythonhosted.org/packages/54/a1/2274f776084849ffe813e3a32b1bfe782b6aefaa0464c87c9f7ba8952ea4/atila-0.5.1.5.tar.gz", "yanked": false}], "0.5.1.6": [{"comment_text": "", "digests": {"md5": "24a46f4df6defd62eb8ce85cfd8d82e0", "sha256": "df4e95947bd9675f46015eca3bc668b29aa71a5a3f322b04b6f7116f0d9a4242"}, "downloads": -1, "filename": "atila-0.5.1.6.tar.gz", "has_sig": false, "md5_digest": "24a46f4df6defd62eb8ce85cfd8d82e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124860, "upload_time": "2019-10-25T15:58:51", "upload_time_iso_8601": "2019-10-25T15:58:51.038139Z", "url": "https://files.pythonhosted.org/packages/9a/46/775eeb657e65f8533b4916f51f471e89731f4edfa996b78be2c747ef2a3b/atila-0.5.1.6.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "b7a7e410fb3f25389cd2ea4c99789ea0", "sha256": "763da33b073deff4c80727f4c39ade0969eb92824d2d605473bb009e01dcc141"}, "downloads": -1, "filename": "atila-0.6.0.tar.gz", "has_sig": false, "md5_digest": "b7a7e410fb3f25389cd2ea4c99789ea0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125134, "upload_time": "2019-10-29T12:09:14", "upload_time_iso_8601": "2019-10-29T12:09:14.042815Z", "url": "https://files.pythonhosted.org/packages/ae/04/efea4de7ac09df399c15633b529323b7e8483db2377da0b7d7ff5e7d8ea0/atila-0.6.0.tar.gz", "yanked": false}], "0.6.0.1": [{"comment_text": "", "digests": {"md5": "62fbffeded65302f169f495b3e2ce4d5", "sha256": "1c75d05278a656a2d7b15cd4a7516072f76867523f1ca12311767a257c3f626e"}, "downloads": -1, "filename": "atila-0.6.0.1.tar.gz", "has_sig": false, "md5_digest": "62fbffeded65302f169f495b3e2ce4d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125079, "upload_time": "2019-11-07T16:45:41", "upload_time_iso_8601": "2019-11-07T16:45:41.222777Z", "url": "https://files.pythonhosted.org/packages/fd/a7/de298c741ef0fb82550eecd4677a2cea01c1795136df359aebab51c0d7b9/atila-0.6.0.1.tar.gz", "yanked": false}], "0.6.0.3": [{"comment_text": "", "digests": {"md5": "f3a3a38f300dccf07375a857adbbf06e", "sha256": "99724e12d9d50330e6a20c3261c986642d41822d0f5c5f70d2cd0512833f7b31"}, "downloads": -1, "filename": "atila-0.6.0.3.tar.gz", "has_sig": false, "md5_digest": "f3a3a38f300dccf07375a857adbbf06e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125301, "upload_time": "2019-11-08T10:14:42", "upload_time_iso_8601": "2019-11-08T10:14:42.021233Z", "url": "https://files.pythonhosted.org/packages/f8/04/c56adbb98cd9a45d9eee40acb78f73b64b7e6d588743744a98179a2aa832/atila-0.6.0.3.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "fbb464374b71790efff272a6a21a4d6c", "sha256": "70b861de6d0141fc3943f29053e3fe6db008aa5849c44dc770349baa2a3a6da5"}, "downloads": -1, "filename": "atila-0.7.0.tar.gz", "has_sig": false, "md5_digest": "fbb464374b71790efff272a6a21a4d6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125757, "upload_time": "2019-12-10T14:11:15", "upload_time_iso_8601": "2019-12-10T14:11:15.139589Z", "url": "https://files.pythonhosted.org/packages/14/15/1a12266a823f90b2b09ef836c66b82a4efd94b0325e9c7b41f9ac49558f6/atila-0.7.0.tar.gz", "yanked": false}], "0.7.0.1": [{"comment_text": "", "digests": {"md5": "49799dc446da405d82498c891f1f2c2d", "sha256": "46650b0ff095d18d225c621b29b56e38e64d9edd8fcd6673dcc4e1834a88dbc1"}, "downloads": -1, "filename": "atila-0.7.0.1.tar.gz", "has_sig": false, "md5_digest": "49799dc446da405d82498c891f1f2c2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126310, "upload_time": "2019-12-11T07:27:57", "upload_time_iso_8601": "2019-12-11T07:27:57.344418Z", "url": "https://files.pythonhosted.org/packages/39/34/b4c8b860ce1d562b9e336158c171dfde34a85384d44a0b6075dbad45d638/atila-0.7.0.1.tar.gz", "yanked": false}], "0.7.0.2": [{"comment_text": "", "digests": {"md5": "1691cc9f7cc06fed01394e169bd762a8", "sha256": "aac2af4ba58fa98b8030ee1f45324de79e593706068bf5e8b45f0c421824348a"}, "downloads": -1, "filename": "atila-0.7.0.2.tar.gz", "has_sig": false, "md5_digest": "1691cc9f7cc06fed01394e169bd762a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126536, "upload_time": "2019-12-11T07:37:20", "upload_time_iso_8601": "2019-12-11T07:37:20.347256Z", "url": "https://files.pythonhosted.org/packages/ba/ee/d29dde48c9d31f88eb2f7d6e35f778041ac3483ff52bd590791cfad67bad/atila-0.7.0.2.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "eb02ee38a0c48c8423bddf8c1ca3291e", "sha256": "20a642bb6c092af16fd1f3984b1dcc0f05c5a95e43c437340656ea160ac9049a"}, "downloads": -1, "filename": "atila-0.7.1.tar.gz", "has_sig": false, "md5_digest": "eb02ee38a0c48c8423bddf8c1ca3291e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126549, "upload_time": "2019-12-11T09:50:50", "upload_time_iso_8601": "2019-12-11T09:50:50.550383Z", "url": "https://files.pythonhosted.org/packages/b9/b0/c8f037116ed9dfca7461835c26e0745feafe2e7cd1dc4d628d77340080d1/atila-0.7.1.tar.gz", "yanked": false}], "0.7.1.1": [{"comment_text": "", "digests": {"md5": "3db2c283665aa0f77fe9b3c47e6b47f4", "sha256": "09fa81274e1c87d348b8177edd9f8acda17c523e0d0a3cb4954db1f870550e45"}, "downloads": -1, "filename": "atila-0.7.1.1.tar.gz", "has_sig": false, "md5_digest": "3db2c283665aa0f77fe9b3c47e6b47f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126619, "upload_time": "2019-12-11T10:21:09", "upload_time_iso_8601": "2019-12-11T10:21:09.233005Z", "url": "https://files.pythonhosted.org/packages/63/35/ef3c12a704cec003fedc8253bb5400bace338f054f64391daa86d87447ef/atila-0.7.1.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "080618f97fe3f6f91593540e7751ff3e", "sha256": "65058da952414725d97b5da5a7f5c939b395d12767c803790c967513fe66ad3f"}, "downloads": -1, "filename": "atila-0.7.2.tar.gz", "has_sig": false, "md5_digest": "080618f97fe3f6f91593540e7751ff3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125718, "upload_time": "2019-12-18T11:13:18", "upload_time_iso_8601": "2019-12-18T11:13:18.959260Z", "url": "https://files.pythonhosted.org/packages/8a/ce/b04ee00d3d7575d7a2489368aec7ae90873fb9710cef7332e0b216d688ea/atila-0.7.2.tar.gz", "yanked": false}], "0.7.2.1": [{"comment_text": "", "digests": {"md5": "eae8a4671adf95b4199ea61cb79271a3", "sha256": "90bbd7efb361b3da93b6f0ea3910ebefb5ee23d4a228f2c01c07fbfec1cbcdd9"}, "downloads": -1, "filename": "atila-0.7.2.1.tar.gz", "has_sig": false, "md5_digest": "eae8a4671adf95b4199ea61cb79271a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126014, "upload_time": "2019-12-18T13:28:15", "upload_time_iso_8601": "2019-12-18T13:28:15.305371Z", "url": "https://files.pythonhosted.org/packages/b6/e5/70f56bad3df6ccc0d1833a718f51b7ad1bb906b2fc6db29855e7f3fdeb94/atila-0.7.2.1.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "28ce4d5ea9999754771898ae0eb27b51", "sha256": "64b15564c54644abca1786ac5c9fb5dd3492a8807d0872043a19c758326a9ab9"}, "downloads": -1, "filename": "atila-0.7.3.tar.gz", "has_sig": false, "md5_digest": "28ce4d5ea9999754771898ae0eb27b51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126350, "upload_time": "2019-12-19T12:47:51", "upload_time_iso_8601": "2019-12-19T12:47:51.734508Z", "url": "https://files.pythonhosted.org/packages/dd/ea/6dae0aac34cefad44c92c97d41424a80c054b7df4a7ef4f663dad44a8b1b/atila-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "e902005ead5ee00ee51dbb589af6f5fd", "sha256": "6c07aeff2f04ce3d81f0c6a707eac85c05f7d16eef098c7fbe6e0bea18fb5117"}, "downloads": -1, "filename": "atila-0.7.4.tar.gz", "has_sig": false, "md5_digest": "e902005ead5ee00ee51dbb589af6f5fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126725, "upload_time": "2019-12-21T09:47:51", "upload_time_iso_8601": "2019-12-21T09:47:51.891039Z", "url": "https://files.pythonhosted.org/packages/05/9f/fb2857a02b7d3bcdf2595a66ae7d88a47350c1a6cc9313936cc79d9a43f1/atila-0.7.4.tar.gz", "yanked": false}], "0.7.4b1": [{"comment_text": "", "digests": {"md5": "7e17cbb00f5792852fcf6f35dc3c557a", "sha256": "785db37158c422e6cea0f1058280b6ddaa162e2e31161d14fc3aff12f24b3d8c"}, "downloads": -1, "filename": "atila-0.7.4b1.tar.gz", "has_sig": false, "md5_digest": "7e17cbb00f5792852fcf6f35dc3c557a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126739, "upload_time": "2019-12-21T08:18:54", "upload_time_iso_8601": "2019-12-21T08:18:54.003135Z", "url": "https://files.pythonhosted.org/packages/9e/6f/0ef7db9a179025455e7355a04a42ad7fbdee5303731d957d81c1ecd2b052/atila-0.7.4b1.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "484506fb1c10d3c203d5c7398d0ccc11", "sha256": "34131dcc707f9c6399797220352abe84a7c1f5e813b75f17121234f09bbf7c5b"}, "downloads": -1, "filename": "atila-0.7.5.tar.gz", "has_sig": false, "md5_digest": "484506fb1c10d3c203d5c7398d0ccc11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127111, "upload_time": "2019-12-22T07:55:48", "upload_time_iso_8601": "2019-12-22T07:55:48.400255Z", "url": "https://files.pythonhosted.org/packages/ec/5a/7d8a7deb2ff9f63a5fef44c2536fd0132165882f0141366568f3ea0a8183/atila-0.7.5.tar.gz", "yanked": false}], "0.7.6": [{"comment_text": "", "digests": {"md5": "061921a254ca71d55feab80c7bff7a52", "sha256": "15b38df5c2f1fe550e164faa14825511e6af9ec84823791a53e84eabea75c9f8"}, "downloads": -1, "filename": "atila-0.7.6.tar.gz", "has_sig": false, "md5_digest": "061921a254ca71d55feab80c7bff7a52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127300, "upload_time": "2019-12-24T13:00:17", "upload_time_iso_8601": "2019-12-24T13:00:17.901329Z", "url": "https://files.pythonhosted.org/packages/b0/36/cfb99915237fb0af6d53740a8e7da67b02931eb9fb1986d4d38bf86c6c74/atila-0.7.6.tar.gz", "yanked": false}], "0.7.6.2": [{"comment_text": "", "digests": {"md5": "6de756362ac0d5a60e33e6635d519de5", "sha256": "6942870802ee1fb2d77c5d5a9d0837a3559f4aadfb8741036360524f56e2b447"}, "downloads": -1, "filename": "atila-0.7.6.2.tar.gz", "has_sig": false, "md5_digest": "6de756362ac0d5a60e33e6635d519de5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126878, "upload_time": "2019-12-25T11:08:52", "upload_time_iso_8601": "2019-12-25T11:08:52.591534Z", "url": "https://files.pythonhosted.org/packages/c2/e2/cbc7320be3afda81323b6e1c6df8f70b78fa46a570d294f989871391740a/atila-0.7.6.2.tar.gz", "yanked": false}], "0.7.6.3": [{"comment_text": "", "digests": {"md5": "3b4d56d02ef54d11fbb1004ce6c45276", "sha256": "fbfc2d16f5930730444c402cd092eff0ef0dc694598f69440046d705ec75a7f4"}, "downloads": -1, "filename": "atila-0.7.6.3.tar.gz", "has_sig": false, "md5_digest": "3b4d56d02ef54d11fbb1004ce6c45276", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126895, "upload_time": "2019-12-26T15:42:47", "upload_time_iso_8601": "2019-12-26T15:42:47.295784Z", "url": "https://files.pythonhosted.org/packages/49/76/eb938b827db067e3a1b61044d3dd4fdcf72006b8ca6534e4b7acae59d170/atila-0.7.6.3.tar.gz", "yanked": false}], "0.7.6.5": [{"comment_text": "", "digests": {"md5": "9b5e79f7c36797c7a03b659d55ad7bea", "sha256": "c870c04350ddf97186d430da571662a650d8c7f02c39decaab66df28bf2338cf"}, "downloads": -1, "filename": "atila-0.7.6.5.tar.gz", "has_sig": false, "md5_digest": "9b5e79f7c36797c7a03b659d55ad7bea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127021, "upload_time": "2019-12-27T15:02:30", "upload_time_iso_8601": "2019-12-27T15:02:30.199202Z", "url": "https://files.pythonhosted.org/packages/03/59/ae1af7b790d486b1c49392d9660d717c71a8204d081ae6278ac488ad3b03/atila-0.7.6.5.tar.gz", "yanked": false}], "0.7.7": [{"comment_text": "", "digests": {"md5": "e7de661935ae6e441b94c84191bdbe1d", "sha256": "080c1aa026db861b8802d91789d8e697c99ed46caf5f2aa91239e58347559c3b"}, "downloads": -1, "filename": "atila-0.7.7.tar.gz", "has_sig": false, "md5_digest": "e7de661935ae6e441b94c84191bdbe1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126778, "upload_time": "2020-01-03T13:07:05", "upload_time_iso_8601": "2020-01-03T13:07:05.593337Z", "url": "https://files.pythonhosted.org/packages/18/77/f42b29256ffb33956ad53c61835bee0ef0f7d64a85c7efaebe6eccba8a16/atila-0.7.7.tar.gz", "yanked": false}], "0.7.7.1": [{"comment_text": "", "digests": {"md5": "5c68cfc1f0be491829538c17ffe0ee95", "sha256": "98ba128e80c0141fd85add16cb36d8ba072135ebb2fa1b11b413e243baac5a65"}, "downloads": -1, "filename": "atila-0.7.7.1.tar.gz", "has_sig": false, "md5_digest": "5c68cfc1f0be491829538c17ffe0ee95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127209, "upload_time": "2020-01-13T01:56:19", "upload_time_iso_8601": "2020-01-13T01:56:19.006159Z", "url": "https://files.pythonhosted.org/packages/01/6c/1ebcf485b3277aee690ed1ad53b165e1ccff32d7c677e3bc08622494678f/atila-0.7.7.1.tar.gz", "yanked": false}], "0.7.8": [{"comment_text": "", "digests": {"md5": "b41f12b3eb4b3161075c45655929cff0", "sha256": "d19c725ac403a96a8c8ed36d0a81287eef83fedbb2b4427bc775f4aaa8012ab0"}, "downloads": -1, "filename": "atila-0.7.8.tar.gz", "has_sig": false, "md5_digest": "b41f12b3eb4b3161075c45655929cff0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128514, "upload_time": "2020-02-16T09:20:17", "upload_time_iso_8601": "2020-02-16T09:20:17.632062Z", "url": "https://files.pythonhosted.org/packages/3e/33/1943f9e28205f8c11358372477c6ae3fe5fe846ca8d419e927a7d6a79ffa/atila-0.7.8.tar.gz", "yanked": false}], "0.8.0.1": [{"comment_text": "", "digests": {"md5": "dca31104e2bd185510ba5103b05ba555", "sha256": "379c89a9a44970106e4ab8ac657bb57edb4a38661968121c85587f30ebbaf7ee"}, "downloads": -1, "filename": "atila-0.8.0.1.tar.gz", "has_sig": false, "md5_digest": "dca31104e2bd185510ba5103b05ba555", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 130301, "upload_time": "2020-02-29T03:47:32", "upload_time_iso_8601": "2020-02-29T03:47:32.745708Z", "url": "https://files.pythonhosted.org/packages/05/31/5a312b8636fdde12ee55c68b60b851887a864584cde936a97eaad0305789/atila-0.8.0.1.tar.gz", "yanked": false}], "0.8.0.2": [{"comment_text": "", "digests": {"md5": "fb68b5ba450fa121fbd8834c74910858", "sha256": "df26eb32045a188c82ff5ca2123d800ad1103e1f0cc119a0fbe13ee587a1a78f"}, "downloads": -1, "filename": "atila-0.8.0.2.tar.gz", "has_sig": false, "md5_digest": "fb68b5ba450fa121fbd8834c74910858", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 130330, "upload_time": "2020-02-29T03:59:46", "upload_time_iso_8601": "2020-02-29T03:59:46.138574Z", "url": "https://files.pythonhosted.org/packages/85/e8/3bb7bcbc856e54caccf6155fc34353639d55cb527b89b2575c927a183330/atila-0.8.0.2.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "9b80c8e9089ecc582f4e989c75f3691e", "sha256": "cea389b6f91549169634957196b9028d75d48316e395ff247fa1cc12d2117448"}, "downloads": -1, "filename": "atila-0.8.1.tar.gz", "has_sig": false, "md5_digest": "9b80c8e9089ecc582f4e989c75f3691e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 130937, "upload_time": "2020-02-29T09:53:29", "upload_time_iso_8601": "2020-02-29T09:53:29.127649Z", "url": "https://files.pythonhosted.org/packages/31/11/1d21b71a81188edaa64a9ca8f936b4c6cf4d068d06c1c0782b819d6775d0/atila-0.8.1.tar.gz", "yanked": false}], "0.8.1.1": [{"comment_text": "", "digests": {"md5": "e7e4b3f94c8ced913a8305bc26e70847", "sha256": "5f716469e61970fa478a03eeb9fdb1c7ace3c1b0e6b5d198eb4e9786e2705c83"}, "downloads": -1, "filename": "atila-0.8.1.1.tar.gz", "has_sig": false, "md5_digest": "e7e4b3f94c8ced913a8305bc26e70847", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131149, "upload_time": "2020-03-01T08:59:07", "upload_time_iso_8601": "2020-03-01T08:59:07.527680Z", "url": "https://files.pythonhosted.org/packages/f8/b6/0ffdffe730485b2453d9f018922a33c482d25fdfbdebbea0ceae16056fbe/atila-0.8.1.1.tar.gz", "yanked": false}], "0.8.1.2": [{"comment_text": "", "digests": {"md5": "48e85b60beecf6397cea9390a2dcc572", "sha256": "1c9f6a39ebfcec47b6873b0db2c0555bc317c37ff3f347e80270d251d5ea3694"}, "downloads": -1, "filename": "atila-0.8.1.2.tar.gz", "has_sig": false, "md5_digest": "48e85b60beecf6397cea9390a2dcc572", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131158, "upload_time": "2020-03-01T11:18:12", "upload_time_iso_8601": "2020-03-01T11:18:12.378867Z", "url": "https://files.pythonhosted.org/packages/c9/ff/e4a8ab785661297e50606c6cbae0d3afd3944841b0fc9e33db0ef1814c3d/atila-0.8.1.2.tar.gz", "yanked": false}], "0.8.1.3": [{"comment_text": "", "digests": {"md5": "3717e360843b332039ecca8868e4a3d3", "sha256": "2316b6693174bd03f356111b19c408db06a07435fe32e5da61cc8fe0021fe05d"}, "downloads": -1, "filename": "atila-0.8.1.3.tar.gz", "has_sig": false, "md5_digest": "3717e360843b332039ecca8868e4a3d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131413, "upload_time": "2020-03-02T12:36:38", "upload_time_iso_8601": "2020-03-02T12:36:38.178253Z", "url": "https://files.pythonhosted.org/packages/66/a2/9043ffee92f1c64005ab0dc675d9c1cfc012659e7a41757cbaf19bb9ba87/atila-0.8.1.3.tar.gz", "yanked": false}], "0.8.1.4": [{"comment_text": "", "digests": {"md5": "4089d576026c4713c0a48de7471ca4fd", "sha256": "88bb8bf2a346bed938827acad8cb27ec9bfd36f6aeccb17b306383da72d57ea5"}, "downloads": -1, "filename": "atila-0.8.1.4.tar.gz", "has_sig": false, "md5_digest": "4089d576026c4713c0a48de7471ca4fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131428, "upload_time": "2020-03-02T13:19:32", "upload_time_iso_8601": "2020-03-02T13:19:32.787900Z", "url": "https://files.pythonhosted.org/packages/56/d7/8989973b2911dfa17e83cbca7548227152b8e9a44a94f56716a839ce57f3/atila-0.8.1.4.tar.gz", "yanked": false}], "0.8.1.5": [{"comment_text": "", "digests": {"md5": "714510e33351db75aaeadcaa6d6d0d74", "sha256": "684420cd5659443a80a44a7aa963ce140c980dd925d2af9bfabb56dacba0a3d1"}, "downloads": -1, "filename": "atila-0.8.1.5.tar.gz", "has_sig": false, "md5_digest": "714510e33351db75aaeadcaa6d6d0d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131422, "upload_time": "2020-03-02T14:35:37", "upload_time_iso_8601": "2020-03-02T14:35:37.991418Z", "url": "https://files.pythonhosted.org/packages/cb/18/d10a4bbf6f199853a82d2b03577f9fbef768337ffb7c67c4661f8a51dd28/atila-0.8.1.5.tar.gz", "yanked": false}], "0.8.1.6": [{"comment_text": "", "digests": {"md5": "96312801d49a07fbe4bdbbe4a3f23c83", "sha256": "2b1046f902d8b15ef2cb1e673f54b236b978a98a8208ffefe10524043d59d7a3"}, "downloads": -1, "filename": "atila-0.8.1.6.tar.gz", "has_sig": false, "md5_digest": "96312801d49a07fbe4bdbbe4a3f23c83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131474, "upload_time": "2020-03-02T14:43:51", "upload_time_iso_8601": "2020-03-02T14:43:51.567631Z", "url": "https://files.pythonhosted.org/packages/dc/f0/eb2646ba77f09e94b6381b3331fb7345a8714ee30c78aebb934ec3d87a8b/atila-0.8.1.6.tar.gz", "yanked": false}], "0.8.2.0": [{"comment_text": "", "digests": {"md5": "bfc86f60f048527ad655e65b35fffb88", "sha256": "6dc7373c8642e7123c4b150ad85f265cd9ffc99cdf119caa12897c08ef4590e3"}, "downloads": -1, "filename": "atila-0.8.2.0.tar.gz", "has_sig": false, "md5_digest": "bfc86f60f048527ad655e65b35fffb88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131560, "upload_time": "2020-03-03T12:24:52", "upload_time_iso_8601": "2020-03-03T12:24:52.295416Z", "url": "https://files.pythonhosted.org/packages/f3/c4/3d85311308abacc3c2ce46e1dd032cf690b5931ecb1a67d709400f1f1b18/atila-0.8.2.0.tar.gz", "yanked": false}], "0.8.2.1": [{"comment_text": "", "digests": {"md5": "4318686861a7a2344a3218d33d844a73", "sha256": "a24e5f3e90e5c9ca617bb557dc374d0373d6c2a0752489dd4ecc9dbc592ef56f"}, "downloads": -1, "filename": "atila-0.8.2.1.tar.gz", "has_sig": false, "md5_digest": "4318686861a7a2344a3218d33d844a73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132138, "upload_time": "2020-03-06T12:22:51", "upload_time_iso_8601": "2020-03-06T12:22:51.487298Z", "url": "https://files.pythonhosted.org/packages/82/81/603f36d525308fa40434529139c945cf65d1d5dd2c4fd964fdc27e3c51d0/atila-0.8.2.1.tar.gz", "yanked": false}], "0.8.2.2": [{"comment_text": "", "digests": {"md5": "98c87a2722223c757bf43cba8c428bb1", "sha256": "a7e1abd223b5c8d16503d561e42d5118715f7cf17727a08e185ef684de7f9dfc"}, "downloads": -1, "filename": "atila-0.8.2.2.tar.gz", "has_sig": false, "md5_digest": "98c87a2722223c757bf43cba8c428bb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132222, "upload_time": "2020-03-09T03:05:50", "upload_time_iso_8601": "2020-03-09T03:05:50.679781Z", "url": "https://files.pythonhosted.org/packages/c2/31/e8c3afd5e40de514cec37a09b5b924b3697a9e1702ba983de3659e1acd68/atila-0.8.2.2.tar.gz", "yanked": false}], "0.8.2.3": [{"comment_text": "", "digests": {"md5": "7bd695065c66044430c22cbce19f5edd", "sha256": "4cae19cb45185b2ba341a162660331d419635a09353d109010b627a4ee22c84f"}, "downloads": -1, "filename": "atila-0.8.2.3.tar.gz", "has_sig": false, "md5_digest": "7bd695065c66044430c22cbce19f5edd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132271, "upload_time": "2020-03-09T12:22:43", "upload_time_iso_8601": "2020-03-09T12:22:43.049957Z", "url": "https://files.pythonhosted.org/packages/e7/89/15095eb59e8fa2dc8f1c0643478f9aec66b30c9bc8df311fc137385e9031/atila-0.8.2.3.tar.gz", "yanked": false}], "0.8.2.4": [{"comment_text": "", "digests": {"md5": "2eb2aeeb89bb5fdeba4baed3b5fa8f3e", "sha256": "751b67cb40ed0c434c875c67e6c06eaa260ccab9b401b103045d0f4706301e07"}, "downloads": -1, "filename": "atila-0.8.2.4.tar.gz", "has_sig": false, "md5_digest": "2eb2aeeb89bb5fdeba4baed3b5fa8f3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132304, "upload_time": "2020-03-10T05:54:52", "upload_time_iso_8601": "2020-03-10T05:54:52.593467Z", "url": "https://files.pythonhosted.org/packages/02/5e/34acac04235066a0ab54617a9ef4bfe8fd520a192f85835d8f94696ae04d/atila-0.8.2.4.tar.gz", "yanked": false}], "0.8.2.5": [{"comment_text": "", "digests": {"md5": "fb9cc6c255766be4fbd563dcc3356506", "sha256": "ee4f4f854dc389ba5a48777ae66b3914bcdcb830271741cac599b4f93a5fca83"}, "downloads": -1, "filename": "atila-0.8.2.5.tar.gz", "has_sig": false, "md5_digest": "fb9cc6c255766be4fbd563dcc3356506", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132843, "upload_time": "2020-03-18T10:28:28", "upload_time_iso_8601": "2020-03-18T10:28:28.406998Z", "url": "https://files.pythonhosted.org/packages/c2/f2/cb9e3bf9e69087facae4aa7da611915282040c644f1276c6da6deeab4782/atila-0.8.2.5.tar.gz", "yanked": false}], "0.8.2.6": [{"comment_text": "", "digests": {"md5": "e65b140d2b8e0b9cfa95d0042563f393", "sha256": "50671b331a36de61b69af86b6de22a92845e752471d9d76ff9786e6bf25ec01a"}, "downloads": -1, "filename": "atila-0.8.2.6.tar.gz", "has_sig": false, "md5_digest": "e65b140d2b8e0b9cfa95d0042563f393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132882, "upload_time": "2020-03-19T02:25:57", "upload_time_iso_8601": "2020-03-19T02:25:57.506234Z", "url": "https://files.pythonhosted.org/packages/ca/ba/a367a41bfdad95c33e591dab783ca2e082617fead1c36459b913beb6127b/atila-0.8.2.6.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "c34552651031dfa9ae31b910694ecc7d", "sha256": "f4f0bebe11320b50714d27f3a24650f5ea5fc1bfa6fbd3c8c14220bc1c207e5c"}, "downloads": -1, "filename": "atila-0.8.3.tar.gz", "has_sig": false, "md5_digest": "c34552651031dfa9ae31b910694ecc7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132932, "upload_time": "2020-03-24T06:34:02", "upload_time_iso_8601": "2020-03-24T06:34:02.811991Z", "url": "https://files.pythonhosted.org/packages/18/cb/375cea39620c523c2f0636cb877541914a3bc8d344bab458a6eed78c9372/atila-0.8.3.tar.gz", "yanked": false}], "0.8.3.1": [{"comment_text": "", "digests": {"md5": "1a61fc77093691e7bcda3b7db6fd9493", "sha256": "3d4718594f9107ac1aa55d65d0dd03bf5304e1ad13054c58cc1269be3d5b723f"}, "downloads": -1, "filename": "atila-0.8.3.1.tar.gz", "has_sig": false, "md5_digest": "1a61fc77093691e7bcda3b7db6fd9493", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132930, "upload_time": "2020-03-24T15:56:47", "upload_time_iso_8601": "2020-03-24T15:56:47.214498Z", "url": "https://files.pythonhosted.org/packages/03/82/05bf09ae7c4f0a0183e5983999d80b2de90bf294c31b8208c7d755b42642/atila-0.8.3.1.tar.gz", "yanked": false}], "0.8.3.10": [{"comment_text": "", "digests": {"md5": "a4275b65ae13d0e566fa09485835e72d", "sha256": "da81ca8f7184053644fc35f151b2eae918caba0ce806a6d735715c92c800d4b7"}, "downloads": -1, "filename": "atila-0.8.3.10.tar.gz", "has_sig": false, "md5_digest": "a4275b65ae13d0e566fa09485835e72d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133435, "upload_time": "2020-04-11T05:58:01", "upload_time_iso_8601": "2020-04-11T05:58:01.182294Z", "url": "https://files.pythonhosted.org/packages/43/4a/3b1e78d8205b39dc348fcf252c2ec9b7449a8578aa76f61ec8581bad7826/atila-0.8.3.10.tar.gz", "yanked": false}], "0.8.3.11": [{"comment_text": "", "digests": {"md5": "57485fc5c4b13408a3526f80453d89f4", "sha256": "cf35feb43c9020306ea1a629eadca393dd331ed8f6a72e0c7aa400c2226c150a"}, "downloads": -1, "filename": "atila-0.8.3.11.tar.gz", "has_sig": false, "md5_digest": "57485fc5c4b13408a3526f80453d89f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133478, "upload_time": "2020-04-12T12:35:42", "upload_time_iso_8601": "2020-04-12T12:35:42.203505Z", "url": "https://files.pythonhosted.org/packages/6f/af/9fb49211495e70bb4e5abe53bc980b78ce5ce8ba2ee08c842c82e55435fd/atila-0.8.3.11.tar.gz", "yanked": false}], "0.8.3.2": [{"comment_text": "", "digests": {"md5": "ba7f60f13efda18d511534e092b28414", "sha256": "c21aa4a256252ce4e0928abbe9884e231a3efcc233e42e1abeaa5a2f81a2a67e"}, "downloads": -1, "filename": "atila-0.8.3.2.tar.gz", "has_sig": false, "md5_digest": "ba7f60f13efda18d511534e092b28414", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132880, "upload_time": "2020-03-25T00:11:57", "upload_time_iso_8601": "2020-03-25T00:11:57.981062Z", "url": "https://files.pythonhosted.org/packages/4c/b9/7b81796b3c8bcc0b466f026332ab02f2028453416a487ed2f528a4d4cf93/atila-0.8.3.2.tar.gz", "yanked": false}], "0.8.3.3": [{"comment_text": "", "digests": {"md5": "9d276228843855ddefd590b6694ddf45", "sha256": "6e39b0d23e3ebcc88f4b52054007b1932262d15ffdefe5b7b13d3254f3a03ad0"}, "downloads": -1, "filename": "atila-0.8.3.3.tar.gz", "has_sig": false, "md5_digest": "9d276228843855ddefd590b6694ddf45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132890, "upload_time": "2020-03-25T00:16:09", "upload_time_iso_8601": "2020-03-25T00:16:09.131320Z", "url": "https://files.pythonhosted.org/packages/2c/82/644131413794495d92745370d81866c76acbfbd9da5aca3f8d86121a5b83/atila-0.8.3.3.tar.gz", "yanked": false}], "0.8.3.5": [{"comment_text": "", "digests": {"md5": "7586d983baa9e48f2ad8536036d5515b", "sha256": "492d8c3b7a39fdca243f8b8eb2d64e43e5d2d080211dacdd2474d62b95515ee2"}, "downloads": -1, "filename": "atila-0.8.3.5.tar.gz", "has_sig": false, "md5_digest": "7586d983baa9e48f2ad8536036d5515b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132944, "upload_time": "2020-03-26T13:03:09", "upload_time_iso_8601": "2020-03-26T13:03:09.780526Z", "url": "https://files.pythonhosted.org/packages/18/af/a4b2f959d77ebab70cbc17c1be1a7591639a43b5eef0bbebfc2ba6293539/atila-0.8.3.5.tar.gz", "yanked": false}], "0.8.3.6": [{"comment_text": "", "digests": {"md5": "e50235a57f28970c4cb4227f55bc8a7e", "sha256": "4bff494262bf952ccbf1b9c87f4d9547bf41ba9947d4b8e0a93f0f55093efd4e"}, "downloads": -1, "filename": "atila-0.8.3.6.tar.gz", "has_sig": false, "md5_digest": "e50235a57f28970c4cb4227f55bc8a7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132970, "upload_time": "2020-03-26T14:55:02", "upload_time_iso_8601": "2020-03-26T14:55:02.975102Z", "url": "https://files.pythonhosted.org/packages/ad/cc/fe3d3492a59f91dba881064530ef20ffa7e7806789dc5cd8a96a177bef5d/atila-0.8.3.6.tar.gz", "yanked": false}], "0.8.3.7": [{"comment_text": "", "digests": {"md5": "573502158ce74239ba019baf78e0c212", "sha256": "0da19ae479120e20c721032fa8945fedb6a7bee9d2e864a5566b4be1ee911b6d"}, "downloads": -1, "filename": "atila-0.8.3.7.tar.gz", "has_sig": false, "md5_digest": "573502158ce74239ba019baf78e0c212", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132968, "upload_time": "2020-03-26T16:53:10", "upload_time_iso_8601": "2020-03-26T16:53:10.102765Z", "url": "https://files.pythonhosted.org/packages/a5/43/6a944be549b82fde42915a43064665b8fc22266cfc3e3aea44bf031c43c5/atila-0.8.3.7.tar.gz", "yanked": false}], "0.8.3.8": [{"comment_text": "", "digests": {"md5": "b3bb1395524b9b085235976b672bf32a", "sha256": "f07c5653813f311075c2fc8dafa33ce1faf9ec05fce4b48504005108256eb7b0"}, "downloads": -1, "filename": "atila-0.8.3.8.tar.gz", "has_sig": false, "md5_digest": "b3bb1395524b9b085235976b672bf32a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132973, "upload_time": "2020-03-27T15:07:37", "upload_time_iso_8601": "2020-03-27T15:07:37.554239Z", "url": "https://files.pythonhosted.org/packages/4e/d7/a2b31450675e3ed99f4dd9242627c2f20e98376fd0488486291af2892092/atila-0.8.3.8.tar.gz", "yanked": false}], "0.8.3.9": [{"comment_text": "", "digests": {"md5": "3c4e6de2634b6b1db2cb79d44f4b22f7", "sha256": "c84854d9c9591e1555bd1c5f4327c424a91ec00a04520a6915198a8aec0a40cc"}, "downloads": -1, "filename": "atila-0.8.3.9.tar.gz", "has_sig": false, "md5_digest": "3c4e6de2634b6b1db2cb79d44f4b22f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132898, "upload_time": "2020-04-06T07:07:06", "upload_time_iso_8601": "2020-04-06T07:07:06.881109Z", "url": "https://files.pythonhosted.org/packages/45/dd/fad5b0b788b5b2be913818b3c65bac4534e2e69b75705c48382b5e783772/atila-0.8.3.9.tar.gz", "yanked": false}], "0.8b0": [{"comment_text": "", "digests": {"md5": "e730ef1ba0cfb7f2c63ce105e14551ca", "sha256": "c0d893baf31807fa54af9b9cd5a4fa8089061e42066aa3173be15dced6bd6856"}, "downloads": -1, "filename": "atila-0.8b0.tar.gz", "has_sig": false, "md5_digest": "e730ef1ba0cfb7f2c63ce105e14551ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128505, "upload_time": "2020-02-14T13:42:10", "upload_time_iso_8601": "2020-02-14T13:42:10.506928Z", "url": "https://files.pythonhosted.org/packages/1b/f3/d3c751c9f6e8885d522dafbb82524d664857c754209b79d6af4953aa7c2d/atila-0.8b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "57485fc5c4b13408a3526f80453d89f4", "sha256": "cf35feb43c9020306ea1a629eadca393dd331ed8f6a72e0c7aa400c2226c150a"}, "downloads": -1, "filename": "atila-0.8.3.11.tar.gz", "has_sig": false, "md5_digest": "57485fc5c4b13408a3526f80453d89f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133478, "upload_time": "2020-04-12T12:35:42", "upload_time_iso_8601": "2020-04-12T12:35:42.203505Z", "url": "https://files.pythonhosted.org/packages/6f/af/9fb49211495e70bb4e5abe53bc980b78ce5ce8ba2ee08c842c82e55435fd/atila-0.8.3.11.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:35 2020"}