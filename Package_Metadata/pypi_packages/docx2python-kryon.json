{"info": {"author": "Fabian Gr\u00f6ger", "author_email": "fabian.groeger@bluewin.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5"], "description": "# docx2python - customized for Kryon\n\nExtract docx headers, footers, text, footnotes, endnotes, properties, and images to a Python object.\n\n[full documentation of forked project](https://docx2python.readthedocs.io/en/latest/index.html)\n\nThe code is an expansion/customization of [docx2python](https://github.com/ShayHill/docx2python) (Copyright (c) 2019 Shay Hill). \n\n__shared features__:\n* extracts text from docx files\n* extracts images from docx files\n* no dependencies (docx2python requires pytest to test)\n\n__additions:__\n* extracts footnotes and endnotes\n* converts bullets and numbered lists to ascii with indentation\n* retains some structure of the original file (more below)\n* extracts document properties (creator, lastModifiedBy, etc.)\n* inserts image placeholders in text (``'----media/image1.jpg----'``)\n* inserts plain text footnote and endnote references in text (``'----footnote1----'``)\n* (optionally) retains font size, font color, bold, italics, and underscore as html\n* full test coverage and documentation for developers\n\n__subtractions:__\n* no command-line interface\n* will only work with later versions of Python\n\n\n## Installation\n```bash\npip install docx2python-kryon\n```\n\n## Use\n\n```python\nfrom docx2python import docx2python\n\n# extract docx content\ndocx2python('path/to/file.docx')\n\n# extract docx content, write images to image_directory\ndocx2python('path/to/file.docx', 'path/to/image_directory')\n\n# extract docx content with basic font styles converted to html\ndocx2python('path/to/file.docx', html=True)\n```\n\nNote on html feature:\n* font size, font color, bold, italics, and underline supported\n* every tag open in a paragraph will be closed in that paragraph (and, where appropriate, reopened in the next paragraph). If two subsequenct paragraphs are bold, they will be returned as `<b>paragraph q</b>`, `<b>paragraph 2</b>`. This is intentional to make  each paragraph its own entity. \n* if you specify `export_font_style=True`, `>` and `<` in your docx text will be encoded as `&gt;` and `&lt;`\n\n## Return Value\n\nFunction `docx2python` returns an object with several attributes.\n\n__header__ - contents of the docx headers in the return format described herein\n\n__footer__ - contents of the docx footers in the return format described herein\n\n__body__ - contents of the docx in the return format described herein\n\n__footnotes__ - contents of the docx in the return format described herein\n\n__endnotes__ - contents of the docx in the return format described herein\n\n__document__ - header  + body + footer (read only)\n\n__text__ - all docx text as one string, similar to what you'd get from `python-docx2txt`\n\n__properties__ - docx property names mapped to values (e.g., `{\"lastModifiedBy\": \"Shay Hill\"}`)\n\n__images__ - image names mapped to images in binary format. Write to filesystem with\n\n```\nfor name, image in result.images.items():\n    with open(name, 'wb') as image_destination:\n        write(image_destination, image)\n```\n\n## Return Format\n\nSome structure will be maintained. Text will be returned in a nested list, with paragraphs always at depth 4 (i.e., `output.body[i][j][k][l]` will be a paragraph).\n\nIf your docx has no tables, output.body will appear as one a table with all contents in one cell:\n\n```python\n[  # document\n    [  # table\n        [  # row\n            [  # cell\n                \"Paragraph 1\",\n                \"Paragraph 2\",\n                \"- bulleted list\",\n                \"- continuing bulleted list\",\n                \"1)  numbered list\",\n                \"2)  continuing numbered list\"\n                \"    a)  sublist\",\n                \"        i)  sublist of sublist\",\n                \"3)  keeps track of indention levels\",\n                \"    a)  resets sublist counters\"\n            ]\n        ]\n     ]\n ]\n```\n\nTable cells will appear as table cells. Text outside tables will appear as table cells.\n\n\nTo preserve the even depth (text always at depth 4), nested tables will appear as new, top-level tables. This is clearer with an example:\n\n```python\n#  docx structure\n\n[  # document\n    [  # table A\n        [  # table A row\n            [  # table A cell 1\n                \"paragraph in table A cell 1\"\n            ],\n            [  # nested table B\n                [  # table B row\n                    [  # table B cell\n                        \"paragraph in table B\"\n                    ]\n                ]\n            ],\n            [  # table A cell 2\n                'paragraph in table A cell 2'\n            ]\n        ]\n    ]\n]\n```\n\nbecomes ...\n```python\n[  # document \n    [  # table A\n        [  # row in table A\n            [  # cell in table A\n                \"table A cell 1\"\n            ]\n        ]\n    ],\n    [  # table B\n        [  # row in table B\n            [  # cell in table B\n                \"table B cell\"\n            ]\n        ]\n    ],\n    [  # table C\n        [  # row in table C\n            [  # cell in table C\n                \"table A cell 2\"\n            ]\n        ]\n    ]\n]\n```\n\nThis ensures text appears\n\n1. only once\n1. in the order it appears on the docx\n1. always at depth four (i.e., `result.body[i][j][k][l]` will be a string).\n\n## Working with output\n\nThis package provides several documented helper functions in [the ``docx2python.iterators`` module](https://docx2python.readthedocs.io/en/latest/docx2python.html#module-iterators). Here are a few recipes possible with these functions:\n\n```python\nfrom docx2python.iterators import enum_cells\n\ndef remove_empty_paragraphs(tables):\n    for (i, j, k), cell in enum_cells(tables):\n        tables[i][j][k] = [x for x in cell if x]\n```\n\n```\n>>> tables = [[[['a', 'b'], ['a', '', 'd', '']]]]\n>>> remove_empty_paragraphs(tables)\n    [[[['a', 'b'], ['a', 'd']]]]\n```\n\n```python\nfrom docx2python.iterators import enum_at_depth\n\ndef html_map(tables) -> str:\n    \"\"\"Create an HTML map of document contents.\n\n    Render this in a browser to visually search for data.\n    \"\"\"\n    tables = self.document\n\n    # prepend index tuple to each paragraph\n    for (i, j, k, l), paragraph in enum_at_depth(tables, 4):\n        tables[i][j][k][l] = \" \".join([str((i, j, k, l)), paragraph])\n\n    # wrap each paragraph in <pre> tags\n    for (i, j, k), cell in enum_at_depth(tables, 3):\n        tables[i][j][k] = \"\".join([f\"<pre>{x}</pre>\" for x in cell])\n\n    # wrap each cell in <td> tags\n    for (i, j), row in enum_at_depth(tables, 2):\n        tables[i][j] = \"\".join([f\"<td>{x}</td>\" for x in row])\n\n    # wrap each row in <tr> tags\n    for (i,), table in enum_at_depth(tables, 1):\n        tables[i] = \"\".join(f\"<tr>{x}</tr>\" for x in table)\n\n    # wrap each table in <table> tags\n    tables = \"\".join([f'<table border=\"1\">{x}</table>' for x in tables])\n\n    return [\"<html><body>\"] + tables + [\"</body></html>\"]\n```\n\n```\n>>> tables = [[[['a', 'b'], ['a', 'd']]]]\n>>> html_toc(tables)\n<html>\n    <body>\n        <table border=\"1\">\n            <tr>\n                <td>\n                    '(0, 0, 0, 0) a'\n                    '(0, 0, 0, 1) b'\n                </td>\n                <td>\n                    '(0, 0, 1, 0) a'\n                    '(0, 0, 1, 1) d'\n                </td>\n            </tr>\n        </table>\n    </body>\n</html>\n```\n\n[See helper functions.](https://docx2python.readthedocs.io/en/latest/index.html)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FabianGroeger96/docx2python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "docx2python-kryon", "package_url": "https://pypi.org/project/docx2python-kryon/", "platform": "", "project_url": "https://pypi.org/project/docx2python-kryon/", "project_urls": {"Homepage": "https://github.com/FabianGroeger96/docx2python"}, "release_url": "https://pypi.org/project/docx2python-kryon/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Extract content from docx files. Edited for Kryon Studio (RPA).", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>docx2python - customized for Kryon</h1>\n<p>Extract docx headers, footers, text, footnotes, endnotes, properties, and images to a Python object.</p>\n<p><a href=\"https://docx2python.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">full documentation of forked project</a></p>\n<p>The code is an expansion/customization of <a href=\"https://github.com/ShayHill/docx2python\" rel=\"nofollow\">docx2python</a> (Copyright (c) 2019 Shay Hill).</p>\n<p><strong>shared features</strong>:</p>\n<ul>\n<li>extracts text from docx files</li>\n<li>extracts images from docx files</li>\n<li>no dependencies (docx2python requires pytest to test)</li>\n</ul>\n<p><strong>additions:</strong></p>\n<ul>\n<li>extracts footnotes and endnotes</li>\n<li>converts bullets and numbered lists to ascii with indentation</li>\n<li>retains some structure of the original file (more below)</li>\n<li>extracts document properties (creator, lastModifiedBy, etc.)</li>\n<li>inserts image placeholders in text (<code>'----media/image1.jpg----'</code>)</li>\n<li>inserts plain text footnote and endnote references in text (<code>'----footnote1----'</code>)</li>\n<li>(optionally) retains font size, font color, bold, italics, and underscore as html</li>\n<li>full test coverage and documentation for developers</li>\n</ul>\n<p><strong>subtractions:</strong></p>\n<ul>\n<li>no command-line interface</li>\n<li>will only work with later versions of Python</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install docx2python-kryon\n</pre>\n<h2>Use</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">docx2python</span> <span class=\"kn\">import</span> <span class=\"n\">docx2python</span>\n\n<span class=\"c1\"># extract docx content</span>\n<span class=\"n\">docx2python</span><span class=\"p\">(</span><span class=\"s1\">'path/to/file.docx'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># extract docx content, write images to image_directory</span>\n<span class=\"n\">docx2python</span><span class=\"p\">(</span><span class=\"s1\">'path/to/file.docx'</span><span class=\"p\">,</span> <span class=\"s1\">'path/to/image_directory'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># extract docx content with basic font styles converted to html</span>\n<span class=\"n\">docx2python</span><span class=\"p\">(</span><span class=\"s1\">'path/to/file.docx'</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Note on html feature:</p>\n<ul>\n<li>font size, font color, bold, italics, and underline supported</li>\n<li>every tag open in a paragraph will be closed in that paragraph (and, where appropriate, reopened in the next paragraph). If two subsequenct paragraphs are bold, they will be returned as <code>&lt;b&gt;paragraph q&lt;/b&gt;</code>, <code>&lt;b&gt;paragraph 2&lt;/b&gt;</code>. This is intentional to make  each paragraph its own entity.</li>\n<li>if you specify <code>export_font_style=True</code>, <code>&gt;</code> and <code>&lt;</code> in your docx text will be encoded as <code>&amp;gt;</code> and <code>&amp;lt;</code></li>\n</ul>\n<h2>Return Value</h2>\n<p>Function <code>docx2python</code> returns an object with several attributes.</p>\n<p><strong>header</strong> - contents of the docx headers in the return format described herein</p>\n<p><strong>footer</strong> - contents of the docx footers in the return format described herein</p>\n<p><strong>body</strong> - contents of the docx in the return format described herein</p>\n<p><strong>footnotes</strong> - contents of the docx in the return format described herein</p>\n<p><strong>endnotes</strong> - contents of the docx in the return format described herein</p>\n<p><strong>document</strong> - header  + body + footer (read only)</p>\n<p><strong>text</strong> - all docx text as one string, similar to what you'd get from <code>python-docx2txt</code></p>\n<p><strong>properties</strong> - docx property names mapped to values (e.g., <code>{\"lastModifiedBy\": \"Shay Hill\"}</code>)</p>\n<p><strong>images</strong> - image names mapped to images in binary format. Write to filesystem with</p>\n<pre><code>for name, image in result.images.items():\n    with open(name, 'wb') as image_destination:\n        write(image_destination, image)\n</code></pre>\n<h2>Return Format</h2>\n<p>Some structure will be maintained. Text will be returned in a nested list, with paragraphs always at depth 4 (i.e., <code>output.body[i][j][k][l]</code> will be a paragraph).</p>\n<p>If your docx has no tables, output.body will appear as one a table with all contents in one cell:</p>\n<pre><span class=\"p\">[</span>  <span class=\"c1\"># document</span>\n    <span class=\"p\">[</span>  <span class=\"c1\"># table</span>\n        <span class=\"p\">[</span>  <span class=\"c1\"># row</span>\n            <span class=\"p\">[</span>  <span class=\"c1\"># cell</span>\n                <span class=\"s2\">\"Paragraph 1\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"Paragraph 2\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"- bulleted list\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"- continuing bulleted list\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"1)  numbered list\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"2)  continuing numbered list\"</span>\n                <span class=\"s2\">\"    a)  sublist\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"        i)  sublist of sublist\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"3)  keeps track of indention levels\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"    a)  resets sublist counters\"</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n <span class=\"p\">]</span>\n</pre>\n<p>Table cells will appear as table cells. Text outside tables will appear as table cells.</p>\n<p>To preserve the even depth (text always at depth 4), nested tables will appear as new, top-level tables. This is clearer with an example:</p>\n<pre><span class=\"c1\">#  docx structure</span>\n\n<span class=\"p\">[</span>  <span class=\"c1\"># document</span>\n    <span class=\"p\">[</span>  <span class=\"c1\"># table A</span>\n        <span class=\"p\">[</span>  <span class=\"c1\"># table A row</span>\n            <span class=\"p\">[</span>  <span class=\"c1\"># table A cell 1</span>\n                <span class=\"s2\">\"paragraph in table A cell 1\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"p\">[</span>  <span class=\"c1\"># nested table B</span>\n                <span class=\"p\">[</span>  <span class=\"c1\"># table B row</span>\n                    <span class=\"p\">[</span>  <span class=\"c1\"># table B cell</span>\n                        <span class=\"s2\">\"paragraph in table B\"</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">],</span>\n            <span class=\"p\">[</span>  <span class=\"c1\"># table A cell 2</span>\n                <span class=\"s1\">'paragraph in table A cell 2'</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p>becomes ...</p>\n<pre><span class=\"p\">[</span>  <span class=\"c1\"># document </span>\n    <span class=\"p\">[</span>  <span class=\"c1\"># table A</span>\n        <span class=\"p\">[</span>  <span class=\"c1\"># row in table A</span>\n            <span class=\"p\">[</span>  <span class=\"c1\"># cell in table A</span>\n                <span class=\"s2\">\"table A cell 1\"</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>  <span class=\"c1\"># table B</span>\n        <span class=\"p\">[</span>  <span class=\"c1\"># row in table B</span>\n            <span class=\"p\">[</span>  <span class=\"c1\"># cell in table B</span>\n                <span class=\"s2\">\"table B cell\"</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>  <span class=\"c1\"># table C</span>\n        <span class=\"p\">[</span>  <span class=\"c1\"># row in table C</span>\n            <span class=\"p\">[</span>  <span class=\"c1\"># cell in table C</span>\n                <span class=\"s2\">\"table A cell 2\"</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p>This ensures text appears</p>\n<ol>\n<li>only once</li>\n<li>in the order it appears on the docx</li>\n<li>always at depth four (i.e., <code>result.body[i][j][k][l]</code> will be a string).</li>\n</ol>\n<h2>Working with output</h2>\n<p>This package provides several documented helper functions in <a href=\"https://docx2python.readthedocs.io/en/latest/docx2python.html#module-iterators\" rel=\"nofollow\">the <code>docx2python.iterators</code> module</a>. Here are a few recipes possible with these functions:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">docx2python.iterators</span> <span class=\"kn\">import</span> <span class=\"n\">enum_cells</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_empty_paragraphs</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">),</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">enum_cells</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">):</span>\n        <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">cell</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n</pre>\n<pre><code>&gt;&gt;&gt; tables = [[[['a', 'b'], ['a', '', 'd', '']]]]\n&gt;&gt;&gt; remove_empty_paragraphs(tables)\n    [[[['a', 'b'], ['a', 'd']]]]\n</code></pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">docx2python.iterators</span> <span class=\"kn\">import</span> <span class=\"n\">enum_at_depth</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">html_map</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Create an HTML map of document contents.</span>\n\n<span class=\"sd\">    Render this in a browser to visually search for data.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">document</span>\n\n    <span class=\"c1\"># prepend index tuple to each paragraph</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">),</span> <span class=\"n\">paragraph</span> <span class=\"ow\">in</span> <span class=\"n\">enum_at_depth</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">):</span>\n        <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\" \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">)),</span> <span class=\"n\">paragraph</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># wrap each paragraph in &lt;pre&gt; tags</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">),</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">enum_at_depth</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"sa\">f</span><span class=\"s2\">\"&lt;pre&gt;</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">&lt;/pre&gt;\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">cell</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># wrap each cell in &lt;td&gt; tags</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">enum_at_depth</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"sa\">f</span><span class=\"s2\">\"&lt;td&gt;</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">&lt;/td&gt;\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># wrap each row in &lt;tr&gt; tags</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,),</span> <span class=\"n\">table</span> <span class=\"ow\">in</span> <span class=\"n\">enum_at_depth</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"&lt;tr&gt;</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">&lt;/tr&gt;\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># wrap each table in &lt;table&gt; tags</span>\n    <span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"sa\">f</span><span class=\"s1\">'&lt;table border=\"1\"&gt;</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s1\">&lt;/table&gt;'</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">tables</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s2\">\"&lt;html&gt;&lt;body&gt;\"</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">tables</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s2\">\"&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"p\">]</span>\n</pre>\n<pre><code>&gt;&gt;&gt; tables = [[[['a', 'b'], ['a', 'd']]]]\n&gt;&gt;&gt; html_toc(tables)\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;table border=\"1\"&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    '(0, 0, 0, 0) a'\n                    '(0, 0, 0, 1) b'\n                &lt;/td&gt;\n                &lt;td&gt;\n                    '(0, 0, 1, 0) a'\n                    '(0, 0, 1, 1) d'\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><a href=\"https://docx2python.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">See helper functions.</a></p>\n\n          </div>"}, "last_serial": 6014118, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "cf6072783a8a1f3cc7670d5d3c756f8d", "sha256": "06911f24f9f43444429b9bf22086dac2af31d6f70e02fa042c17f02d65894841"}, "downloads": -1, "filename": "docx2python_kryon-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cf6072783a8a1f3cc7670d5d3c756f8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19953, "upload_time": "2019-09-02T15:33:24", "upload_time_iso_8601": "2019-09-02T15:33:24.764211Z", "url": "https://files.pythonhosted.org/packages/a3/c6/ac23779dad41fff07e35fd5191f6cb4fb472d1d23a96828134a8d4a18ef8/docx2python_kryon-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "3c51e944b308c10a1e8efce5ba9a14c2", "sha256": "bdc668e5208cc588b9566847453bc7871f67ee7f453fa7ca6f9c191d9b469929"}, "downloads": -1, "filename": "docx2python_kryon-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3c51e944b308c10a1e8efce5ba9a14c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19947, "upload_time": "2019-10-22T16:54:32", "upload_time_iso_8601": "2019-10-22T16:54:32.628485Z", "url": "https://files.pythonhosted.org/packages/34/63/f48063870ef375705294f1abcc1431fdb90624e87d684262652ca91b03e2/docx2python_kryon-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "371ae5a6b803a87476673c0cf3b4cb31", "sha256": "d9e8b445ba36d1f0df60628392ee5efcffa1a204ac5466110540193042e41a01"}, "downloads": -1, "filename": "docx2python-kryon-1.0.1.tar.gz", "has_sig": false, "md5_digest": "371ae5a6b803a87476673c0cf3b4cb31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24681, "upload_time": "2019-10-22T16:54:34", "upload_time_iso_8601": "2019-10-22T16:54:34.632847Z", "url": "https://files.pythonhosted.org/packages/12/c6/acc8e072c34b87d618a5cb9a2aa576e46fa51641789032ee50647d061e32/docx2python-kryon-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d98308245d0bf4b7090accd011e4e7d7", "sha256": "725e89c516f7c34fdbeeb4bd250c293637da070fde59b249e569686de3ab6959"}, "downloads": -1, "filename": "docx2python_kryon-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d98308245d0bf4b7090accd011e4e7d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19929, "upload_time": "2019-10-22T17:09:23", "upload_time_iso_8601": "2019-10-22T17:09:23.318781Z", "url": "https://files.pythonhosted.org/packages/2c/64/0e9fcaec92fb790a8b3f988715c00b4aae05d24c22a8c5e463e8594e1b94/docx2python_kryon-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "665b340c88ef247480dbe3550801c9a4", "sha256": "2ffa790ef6c05b3639f3b0dc18a1b406c6a40358db06fe41ffb7f20474417a67"}, "downloads": -1, "filename": "docx2python-kryon-1.0.2.tar.gz", "has_sig": false, "md5_digest": "665b340c88ef247480dbe3550801c9a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24631, "upload_time": "2019-10-22T17:09:24", "upload_time_iso_8601": "2019-10-22T17:09:24.857169Z", "url": "https://files.pythonhosted.org/packages/37/c5/69405646c66f947b9fe1cc2e59058add5f2d41ee5cd6fb564a6d52b24a0d/docx2python-kryon-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d98308245d0bf4b7090accd011e4e7d7", "sha256": "725e89c516f7c34fdbeeb4bd250c293637da070fde59b249e569686de3ab6959"}, "downloads": -1, "filename": "docx2python_kryon-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d98308245d0bf4b7090accd011e4e7d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19929, "upload_time": "2019-10-22T17:09:23", "upload_time_iso_8601": "2019-10-22T17:09:23.318781Z", "url": "https://files.pythonhosted.org/packages/2c/64/0e9fcaec92fb790a8b3f988715c00b4aae05d24c22a8c5e463e8594e1b94/docx2python_kryon-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "665b340c88ef247480dbe3550801c9a4", "sha256": "2ffa790ef6c05b3639f3b0dc18a1b406c6a40358db06fe41ffb7f20474417a67"}, "downloads": -1, "filename": "docx2python-kryon-1.0.2.tar.gz", "has_sig": false, "md5_digest": "665b340c88ef247480dbe3550801c9a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24631, "upload_time": "2019-10-22T17:09:24", "upload_time_iso_8601": "2019-10-22T17:09:24.857169Z", "url": "https://files.pythonhosted.org/packages/37/c5/69405646c66f947b9fe1cc2e59058add5f2d41ee5cd6fb564a6d52b24a0d/docx2python-kryon-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:38 2020"}