{"info": {"author": "ikame", "author_email": "anler86@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "Django-Blackhole\n================\n\nDjango application that let's you work in your templates apart from having or not the corresponding views created. This is very useful if you (or a member of your project) are working in a template and don't want to get bothered by if the view of your template is not done or is in an incomplete state or you have to be logged in and so on.\nWith this plugin you can easily access the template you want to work on, set context data directly via the url or set context data via fixtures.\n\nFeatures\n--------\n\n- Design your template without having the corresponding view created.\n- Pass data to your template via the url.\n- Specify a json fixture file in the url with your context data.\n- Patch Django's url reverse to avoid those annoying url reverse errors when working solely in a template.\n\nTutorial\n--------\n\nIn order to start using this plugin, you need to:\n\n1. Add application to your INSTALLED_APPS:\n.. code-block:: python\n\n   INSTALLED_APPS += ('blackhole',)\n\n2. Include plugin urls in your project urls:\n\n.. code-block:: python\n\n   if settings.DEBUG:\n       urlpatterns += patterns('', ('^_blackhole/', include('blackhole.urls'))\n\nWith that in place you should be able to access the url:\n\n``/_blackhole/templates/<template name>/?<template data>``\n\nLet's say you have the following template:\n\n.. code-block:: bash\n\n   myapp/\n     templates/\n        404.html\n        myapp/\n          hello.jinja\n\n\nAccessing the template through an url\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can access those templates through the urls:\n\n``/_blackhole/templates/404.html``\n\nand\n\n``/_blackhole/templates/myapp/hello.jinja``\n\nPassing data to the templates\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you have a **message** variable in **hello.jinja** you can set that variable with:\n\n``/_blackhole/templates/myapp/hello.jinja?message=hola``\n\nYou can also set nested values. Let's say you have the variable **person.name** in **hello.jinja**, you can set that variable with:\n\n``/_blackhole/templates/myapp/hello.jinja?person.name=john``\n\nPassing data to the templates via fixtures\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your template is too complex to set all the data it needs via the url you can use instead a fixture and specify that fixture via the url. Let's say you have:\n\n.. code-block:: bash\n\n   myapp/\n     fixtures/\n       myapp_template_data.json\n     templates/\n\nIf now you access:\n\n``/_blackhole/templates/myapp/hello.jinja?_fixture=myapp_template_data``\n\nThe template context will be updated with the context defined in the fixture. For example, if you have the fixture:\n\n.. code-block:: json\n\n  {\n    \"name\": \"some name\",\n    \"owner\": {\n      ...\n    }\n  }\n\nthe template context will have the variable ``name`` set to ``some name`` and the variable ``owner`` set\nto the dictionary associated to the owner key in the fixture.\n\n\nVisualizing the template in raw format\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you append ``/raw/`` to the url you can see the template in raw format:\n\n``/_blackhole/templates/myapp/hello.jinja/raw/``\n\nThe raw format is just the same response returned with ``text/plain`` as the *Content-Type*.\n\nIf you want to receive the response in another Content-Type just set the ``_mime`` param. By default the charset is utf-8 but you can also set it via the ``_charset`` param:\n\n``/_blackhole/templates/myapp/hello.jinja?message=hola&_mime=text/csv&_charset=utf-16``\n\nInstallation\n------------\n\nTo install, simply:\n\n.. code-block:: bash\n\n    $ pip install django-blackhole\n\nOr, directly from the main repository:\n\n.. code-block:: bash\n\n    $ pip install -e git+https://github.com/ikame/django-blackhole.git#egg=blackhole\n\nSee `project's website`_ for more information.\n\n.. _project's website: https://github.com/ikame/django-blackhole\n.. :changelog:\n\nHistory\n-------\n\n0.1.7 (Tue 29 Oct 2013 08:07:50 PM CET)\n+++++++++++++++++++++++++++++++++++++++\n\n- Fixtures support. Now you can specify a fixture via the url and the data in\nthat fixture is available in the context\n- Adding support for _mime and _charset GET param options to set response's\nmimetype and charset\n- Adding docs\n\n0.1.5 (Wed 16 Oct 2013 04:52:02 PM CEST)\n++++++++++++++++++++++++++++++++++++++++\n\n- Updating docs\n- Returning raw template as utf-8\n\n0.1.5 (Wed 16 Oct 2013 04:41:47 PM CEST)\n++++++++++++++++++++++++++++++++++++++++\n\n- Fixing an introduced errors in urls.py\n\n0.1.4 (Wed 16 Oct 2013 04:34:30 PM CEST)\n++++++++++++++++++++++++++++++++++++++++\n\n- Using the new url `/templates/<template name>/raw` you are able to see\nthe template in raw (Content type: text/plain) format.\n\n0.1.3 (Thu 10 Oct 2013 10:58:08 AM CEST)\n++++++++++++++++++++++++++++++++++++++++\n\n- Changing setup.py to include the main package\n\n0.1.2 (Thu 10 Oct 2013 10:58:08 AM CEST)\n++++++++++++++++++++++++++++++++++++++++\n\n- Removing version from the package\n\n0.1.1 (Thu 10 Oct 2013 10:58:08 AM CEST)\n++++++++++++++++++++++++++++++++++++++++\n\n- Updating documentation examples\n\n0.1.0 (Thu 10 Oct 2013 10:58:08 AM CEST)\n++++++++++++++++++++++++++++++++++++++++\n\n- First version!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ikame/django-blackhole", "keywords": "django debug views templates", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-blackhole", "package_url": "https://pypi.org/project/django-blackhole/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-blackhole/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ikame/django-blackhole"}, "release_url": "https://pypi.org/project/django-blackhole/0.1.7/", "requires_dist": null, "requires_python": null, "summary": "Django application that let's you work in your templates apart from having or not the\ncorresponding views created.", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            Django-Blackhole<br>================<br><br>Django application that let's you work in your templates apart from having or not the corresponding views created. This is very useful if you (or a member of your project) are working in a template and don't want to get bothered by if the view of your template is not done or is in an incomplete state or you have to be logged in and so on.<br>With this plugin you can easily access the template you want to work on, set context data directly via the url or set context data via fixtures.<br><br>Features<br>--------<br><br>- Design your template without having the corresponding view created.<br>- Pass data to your template via the url.<br>- Specify a json fixture file in the url with your context data.<br>- Patch Django's url reverse to avoid those annoying url reverse errors when working solely in a template.<br><br>Tutorial<br>--------<br><br>In order to start using this plugin, you need to:<br><br>1. Add application to your INSTALLED_APPS:<br>.. code-block:: python<br><br>   INSTALLED_APPS += ('blackhole',)<br><br>2. Include plugin urls in your project urls:<br><br>.. code-block:: python<br><br>   if settings.DEBUG:<br>       urlpatterns += patterns('', ('^_blackhole/', include('blackhole.urls'))<br><br>With that in place you should be able to access the url:<br><br>``/_blackhole/templates/&lt;template name&gt;/?&lt;template data&gt;``<br><br>Let's say you have the following template:<br><br>.. code-block:: bash<br><br>   myapp/<br>     templates/<br>        404.html<br>        myapp/<br>          hello.jinja<br><br><br>Accessing the template through an url<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>You can access those templates through the urls:<br><br>``/_blackhole/templates/404.html``<br><br>and<br><br>``/_blackhole/templates/myapp/hello.jinja``<br><br>Passing data to the templates<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>If you have a **message** variable in **hello.jinja** you can set that variable with:<br><br>``/_blackhole/templates/myapp/hello.jinja?message=hola``<br><br>You can also set nested values. Let's say you have the variable **person.name** in **hello.jinja**, you can set that variable with:<br><br>``/_blackhole/templates/myapp/hello.jinja?person.name=john``<br><br>Passing data to the templates via fixtures<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>If your template is too complex to set all the data it needs via the url you can use instead a fixture and specify that fixture via the url. Let's say you have:<br><br>.. code-block:: bash<br><br>   myapp/<br>     fixtures/<br>       myapp_template_data.json<br>     templates/<br><br>If now you access:<br><br>``/_blackhole/templates/myapp/hello.jinja?_fixture=myapp_template_data``<br><br>The template context will be updated with the context defined in the fixture. For example, if you have the fixture:<br><br>.. code-block:: json<br><br>  {<br>    \"name\": \"some name\",<br>    \"owner\": {<br>      ...<br>    }<br>  }<br><br>the template context will have the variable ``name`` set to ``some name`` and the variable ``owner`` set<br>to the dictionary associated to the owner key in the fixture.<br><br><br>Visualizing the template in raw format<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>If you append ``/raw/`` to the url you can see the template in raw format:<br><br>``/_blackhole/templates/myapp/hello.jinja/raw/``<br><br>The raw format is just the same response returned with ``text/plain`` as the *Content-Type*.<br><br>If you want to receive the response in another Content-Type just set the ``_mime`` param. By default the charset is utf-8 but you can also set it via the ``_charset`` param:<br><br>``/_blackhole/templates/myapp/hello.jinja?message=hola&amp;_mime=text/csv&amp;_charset=utf-16``<br><br>Installation<br>------------<br><br>To install, simply:<br><br>.. code-block:: bash<br><br>    $ pip install django-blackhole<br><br>Or, directly from the main repository:<br><br>.. code-block:: bash<br><br>    $ pip install -e git+https://github.com/ikame/django-blackhole.git#egg=blackhole<br><br>See `project's website`_ for more information.<br><br>.. _project's website: https://github.com/ikame/django-blackhole<br>.. :changelog:<br><br>History<br>-------<br><br>0.1.7 (Tue 29 Oct 2013 08:07:50 PM CET)<br>+++++++++++++++++++++++++++++++++++++++<br><br>- Fixtures support. Now you can specify a fixture via the url and the data in<br>that fixture is available in the context<br>- Adding support for _mime and _charset GET param options to set response's<br>mimetype and charset<br>- Adding docs<br><br>0.1.5 (Wed 16 Oct 2013 04:52:02 PM CEST)<br>++++++++++++++++++++++++++++++++++++++++<br><br>- Updating docs<br>- Returning raw template as utf-8<br><br>0.1.5 (Wed 16 Oct 2013 04:41:47 PM CEST)<br>++++++++++++++++++++++++++++++++++++++++<br><br>- Fixing an introduced errors in urls.py<br><br>0.1.4 (Wed 16 Oct 2013 04:34:30 PM CEST)<br>++++++++++++++++++++++++++++++++++++++++<br><br>- Using the new url `/templates/&lt;template name&gt;/raw` you are able to see<br>the template in raw (Content type: text/plain) format.<br><br>0.1.3 (Thu 10 Oct 2013 10:58:08 AM CEST)<br>++++++++++++++++++++++++++++++++++++++++<br><br>- Changing setup.py to include the main package<br><br>0.1.2 (Thu 10 Oct 2013 10:58:08 AM CEST)<br>++++++++++++++++++++++++++++++++++++++++<br><br>- Removing version from the package<br><br>0.1.1 (Thu 10 Oct 2013 10:58:08 AM CEST)<br>++++++++++++++++++++++++++++++++++++++++<br><br>- Updating documentation examples<br><br>0.1.0 (Thu 10 Oct 2013 10:58:08 AM CEST)<br>++++++++++++++++++++++++++++++++++++++++<br><br>- First version!\n          </div>"}, "last_serial": 906629, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ff2dfef22cde626aae75c16277936230", "sha256": "1881d7d4c6c6e114ea18148e34e8813266713a511f21367c84bb085a58a4d607"}, "downloads": -1, "filename": "django-blackhole-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ff2dfef22cde626aae75c16277936230", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1969, "upload_time": "2013-10-10T09:45:50", "upload_time_iso_8601": "2013-10-10T09:45:50.800588Z", "url": "https://files.pythonhosted.org/packages/73/89/e5bba920d5e5e603710865f6265516ddf64fa76af6e9bd29fcbcc9738522/django-blackhole-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a3ec13bf822b5e24f91288480a00256d", "sha256": "efe8b354b0e347404942280a8369f39b9fc0873dbb03405393508b22c141a68c"}, "downloads": -1, "filename": "django-blackhole-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a3ec13bf822b5e24f91288480a00256d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1993, "upload_time": "2013-10-10T10:09:25", "upload_time_iso_8601": "2013-10-10T10:09:25.012385Z", "url": "https://files.pythonhosted.org/packages/d0/8e/d5e1c35a4a8ec2eacbe0c4f616dca223d6fa6a4486378b43b51576808dda/django-blackhole-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ae43c95315ba1b989468cfd509109db3", "sha256": "007c67dcdb1634e0cd981e033355e78cf264060b00c92f00f3c14473ae11b1ee"}, "downloads": -1, "filename": "django-blackhole-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ae43c95315ba1b989468cfd509109db3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2000, "upload_time": "2013-10-10T10:20:59", "upload_time_iso_8601": "2013-10-10T10:20:59.540352Z", "url": "https://files.pythonhosted.org/packages/9d/d0/07142d3c6cc7271b26c81a9fd975aead2d9d778737d2b7351e8c5ff82127/django-blackhole-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1758763a40fee9af68509859f0e62fdd", "sha256": "ef29896dd62772bab6b99989b69e9a4b8db7bcb308c99727c7ed78fed6af287a"}, "downloads": -1, "filename": "django-blackhole-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1758763a40fee9af68509859f0e62fdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3007, "upload_time": "2013-10-10T10:29:41", "upload_time_iso_8601": "2013-10-10T10:29:41.090371Z", "url": "https://files.pythonhosted.org/packages/9a/3e/9537b995b5d68df5911dc52447d2ad052c7e6577e5d7cf2334b97feacd9d/django-blackhole-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "28e12e22c3870cad7cdfdbd9b4405b25", "sha256": "9d30c93dc3708aef3ce904cb43b2edbc6678a92f1432e6fc893b7bb83017ab8d"}, "downloads": -1, "filename": "django-blackhole-0.1.4.tar.gz", "has_sig": false, "md5_digest": "28e12e22c3870cad7cdfdbd9b4405b25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3154, "upload_time": "2013-10-16T14:36:50", "upload_time_iso_8601": "2013-10-16T14:36:50.507365Z", "url": "https://files.pythonhosted.org/packages/71/23/3c078ac0eeef56c66fa05545d482c42af7166329c55a0a1e89d5dec21a97/django-blackhole-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "229a702fbe07a17165ba664d8f5949e3", "sha256": "964eb2ee61f0ab9df98c0d249eb4c97e8041a58c7b158acdabf580ba48183798"}, "downloads": -1, "filename": "django-blackhole-0.1.5.tar.gz", "has_sig": false, "md5_digest": "229a702fbe07a17165ba664d8f5949e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3202, "upload_time": "2013-10-16T14:42:36", "upload_time_iso_8601": "2013-10-16T14:42:36.428856Z", "url": "https://files.pythonhosted.org/packages/b1/7d/55aa36d3ef1303a4e9f931aad5daa204a4e47889980672e3e4155d7fe7a9/django-blackhole-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "be09c9e46cd592c68fa5cc103a421401", "sha256": "dd4901847ac60ba7fb4e9a1740f8ea1a283d7fb26a28896083675033bc27adf4"}, "downloads": -1, "filename": "django-blackhole-0.1.6.tar.gz", "has_sig": false, "md5_digest": "be09c9e46cd592c68fa5cc103a421401", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3397, "upload_time": "2013-10-16T14:53:39", "upload_time_iso_8601": "2013-10-16T14:53:39.933414Z", "url": "https://files.pythonhosted.org/packages/d2/52/179b1c1650c189366f9f19dce1a4ab5a7fbdfdc0dcad66f2ef2687df36a2/django-blackhole-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "f2181d2eaad844d8365ccecd0d20a1bf", "sha256": "45026f4f27886e04882f02b8aae80ad8c1e011f3aa7aeef62e652fbd8ad43b5d"}, "downloads": -1, "filename": "django-blackhole-0.1.7.tar.gz", "has_sig": false, "md5_digest": "f2181d2eaad844d8365ccecd0d20a1bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5326, "upload_time": "2013-10-29T19:48:05", "upload_time_iso_8601": "2013-10-29T19:48:05.552583Z", "url": "https://files.pythonhosted.org/packages/94/d2/0b9abc94a000a811c2ed35362417e5c3638f4c8086763f449efe67245efd/django-blackhole-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2181d2eaad844d8365ccecd0d20a1bf", "sha256": "45026f4f27886e04882f02b8aae80ad8c1e011f3aa7aeef62e652fbd8ad43b5d"}, "downloads": -1, "filename": "django-blackhole-0.1.7.tar.gz", "has_sig": false, "md5_digest": "f2181d2eaad844d8365ccecd0d20a1bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5326, "upload_time": "2013-10-29T19:48:05", "upload_time_iso_8601": "2013-10-29T19:48:05.552583Z", "url": "https://files.pythonhosted.org/packages/94/d2/0b9abc94a000a811c2ed35362417e5c3638f4c8086763f449efe67245efd/django-blackhole-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:25 2020"}