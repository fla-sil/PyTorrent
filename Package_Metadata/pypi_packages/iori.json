{"info": {"author": "Kouhei Maeda", "author_email": "mkouhei@palmtb.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Topic :: System :: Systems Administration"], "description": "=====================================================\nIori is LXC deploying and config management tool.\n=====================================================\n\nWhat's \"Iori\"?\n--------------\n\n\"Iori\" is means a simple hut. It is written \"\u5eb5\" in Kanji, this caracter is 0x5EB5 in Unicode.\n \nIori is a command line tool for deploying and config management tool of Linux Containers (LXC). When you use LXC, you need to use LXC userland command line tool as start with \"lxc-\\*\" generally. LXC is provided template config file and scripts. But this way if you want to manage from a remote contoller host is difficult to treat containers by bulk. So this tool controls LXC with libvirt API, and manages these config files with Git repository.\n\nThis tool is enable to manage LXC container's multi hosts. It is that one branch is managed as one host. Branch name is generated from hostname(or FQDN) or IPv4 or IPv6 address. 'master' branch will be using for mapping. 'template' branch is used for template of each node.\n\nRequirements\n------------\n\n* Python 2.7\n* python-libvirt (0.9.12)\n* GitPython (0.3.2-rc1)\n* cdebootstrap (not test of debootstrap)\n\nYou do not need to install lxc package. :)\n\nSetup\n-----\n\nMount cgroup file system\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nMount cgroup filesystem firstly. Append next one line to /etc/fstab, execute \"sudo mount -a.\"::\n\n  cgroup /sys/fs/cgroup cgroup defaults 0 0\n \n\nIf you use Debian GNU/Linux Wheezy/Sid, set up below option to /etc/default/grub, then execute \"sudo update-grub2 && sudo shutdown -r now\".::\n\n  GRUB_CMDLINE_LINUX=\"cgroup_enable=memory\"\n\nUbuntu 12.04 is unnecessary to setup this option.\n\n\nInstall Debian packages that Iori depends on\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIori depends on GitPython, python-libvirt and libvirt, and Python2.7. Install these packages.::\n\n  $ sudo apt-get install python-git libvirt-bin python-libvirt\n\n\nInstall Iori\n^^^^^^^^^^^^\n\nInstall that choosing with one of three ways.\n\nfrom source\n\"\"\"\"\"\"\"\"\"\"\"\n::\n\n   $ git clone https://github.com/mkouhei/iori.git\n   $ cd iori\n   $ sudo python setup.py install\n\n\nPyPI\n\"\"\"\"\n::\n\n   $ pip install iori\n\nDebian package \n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nNot yet official package, then download python-iori-x.x_all.deb from https://github.com/mkouhei/iori/downloads and install with dpkg command.::\n\n  $ wget https://github.com/mkouhei/iori/download/python-iori_x.x-x_all.deb\n  $ sudo dpkg -i python-iori_x.x-x_all.deb\n\n\nAdd a user account to libvirt(libvirtd) group\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a user account for using iori to libvirt  or libvirtd group.::\n\n  $ sudo adduser <youraccount> libvirt\n\nlibvirt is for Debian, libvirtd is for Ubuntu.\n\n\nMake direcotry\n^^^^^^^^^^^^^^\n\nIf directory \"/var/lib/lxc\" is not existed, make it.::\n\n  $ sudo mkdir /var/lib/lxc\n\n\nHistory\n-------\n\nSee docs/HISTORY.rst\n\n\nQuick start guide\n-----------------\n\nCreate repository\n^^^^^^^^^^^^^^^^^\n\nCreate $HOME/.iori directory and initialize Git repository. ::\n\n  $ iori newrepo\n\nAdd LXC host node to Git repository\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMake branch of named hostname of LXC host node, checktout it.::\n\n  $ iori addnode -n localhost\n\nDefine libvirt XML file and create rootfs image\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGenerate XML file of libvirt domain, and define domain from this xml, create rootfs image with debootstrap command. Then save XML file of that domain.::\n\n  $ iori deploy -n localhost -c testcont01 --rootfs /var/lib/lxc/testcont01\n\n\nStart container\n^^^^^^^^^^^^^^^\n\nStart container from above domain.::\n\n  $ iori start -n localhost -c testcont01\n\n\nDevelopment\n-----------\n\nYou copy pre-commit hook scripts after git clone.::\n\n  $ cp -f utils/pre-commit.txt .git/hooks/pre-commit\n\nNext install python 2.7 later and nosetests, libvirt, python-libvirt, GitPython, cdebootstrap. Below way is for Debian GNU/Linux Sid system.::\n\n  $ sudo apt-get install python python-libvirt python-git python-nose\n\nThen checkout 'devel' branch for development, commit your changes. Before pull request, execute git rebase.\n\nSee also\n--------\n\n* `lxc Linux Containers <http://lxc.sourceforge.net/>`_\n* `libvirt The virtualization API <http://libvirt.org/>`_\n* `GitPython <http://packages.python.org/GitPython/0.3.2/>`_\n* `ElementTree XML API <http://www.python.jp/doc/release/library/xml.etree.elementtree.html?highlight=xml.etree.elementtree#xml.etree.ElementTree>`_ \n* `Appendix D. Random Bits - D.3. Installing Debian GNU/Linux from a Unix/Linux System <http://www.debian.org/releases/stable/amd64/apds03.html>`_\n\nSee also these documents.\n\nTODO\n----\n\n* Support remote host target with debootstrap\n* Detect to register same host when adding node\n* Adding unittest", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mkouhei/iori", "keywords": null, "license": "GNU General Public License version 3", "maintainer": null, "maintainer_email": null, "name": "iori", "package_url": "https://pypi.org/project/iori/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/iori/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mkouhei/iori"}, "release_url": "https://pypi.org/project/iori/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "LXC deploy and config management tool", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-s-iori\">\n<h2>What\u2019s \u201cIori\u201d?</h2>\n<p>\u201cIori\u201d is means a simple hut. It is written \u201c\u5eb5\u201d in Kanji, this caracter is 0x5EB5 in Unicode.</p>\n<p>Iori is a command line tool for deploying and config management tool of Linux Containers (LXC). When you use LXC, you need to use LXC userland command line tool as start with \u201clxc-*\u201d generally. LXC is provided template config file and scripts. But this way if you want to manage from a remote contoller host is difficult to treat containers by bulk. So this tool controls LXC with libvirt API, and manages these config files with Git repository.</p>\n<p>This tool is enable to manage LXC container\u2019s multi hosts. It is that one branch is managed as one host. Branch name is generated from hostname(or FQDN) or IPv4 or IPv6 address. \u2018master\u2019 branch will be using for mapping. \u2018template\u2019 branch is used for template of each node.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7</li>\n<li>python-libvirt (0.9.12)</li>\n<li>GitPython (0.3.2-rc1)</li>\n<li>cdebootstrap (not test of debootstrap)</li>\n</ul>\n<p>You do not need to install lxc package. :)</p>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<div id=\"mount-cgroup-file-system\">\n<h3>Mount cgroup file system</h3>\n<p>Mount cgroup filesystem firstly. Append next one line to /etc/fstab, execute \u201csudo mount -a.\u201d:</p>\n<pre>cgroup /sys/fs/cgroup cgroup defaults 0 0\n</pre>\n<p>If you use Debian GNU/Linux Wheezy/Sid, set up below option to /etc/default/grub, then execute \u201csudo update-grub2 &amp;&amp; sudo shutdown -r now\u201d.:</p>\n<pre>GRUB_CMDLINE_LINUX=\"cgroup_enable=memory\"\n</pre>\n<p>Ubuntu 12.04 is unnecessary to setup this option.</p>\n</div>\n<div id=\"install-debian-packages-that-iori-depends-on\">\n<h3>Install Debian packages that Iori depends on</h3>\n<p>Iori depends on GitPython, python-libvirt and libvirt, and Python2.7. Install these packages.:</p>\n<pre>$ sudo apt-get install python-git libvirt-bin python-libvirt\n</pre>\n</div>\n<div id=\"install-iori\">\n<h3>Install Iori</h3>\n<p>Install that choosing with one of three ways.</p>\n<div id=\"from-source\">\n<h4>from source</h4>\n<pre>$ git clone https://github.com/mkouhei/iori.git\n$ cd iori\n$ sudo python setup.py install\n</pre>\n</div>\n<div id=\"pypi\">\n<h4>PyPI</h4>\n<pre>$ pip install iori\n</pre>\n</div>\n<div id=\"debian-package\">\n<h4>Debian package</h4>\n<p>Not yet official package, then download python-iori-x.x_all.deb from <a href=\"https://github.com/mkouhei/iori/downloads\" rel=\"nofollow\">https://github.com/mkouhei/iori/downloads</a> and install with dpkg command.:</p>\n<pre>$ wget https://github.com/mkouhei/iori/download/python-iori_x.x-x_all.deb\n$ sudo dpkg -i python-iori_x.x-x_all.deb\n</pre>\n</div>\n</div>\n<div id=\"add-a-user-account-to-libvirt-libvirtd-group\">\n<h3>Add a user account to libvirt(libvirtd) group</h3>\n<p>Add a user account for using iori to libvirt  or libvirtd group.:</p>\n<pre>$ sudo adduser &lt;youraccount&gt; libvirt\n</pre>\n<p>libvirt is for Debian, libvirtd is for Ubuntu.</p>\n</div>\n<div id=\"make-direcotry\">\n<h3>Make direcotry</h3>\n<p>If directory \u201c/var/lib/lxc\u201d is not existed, make it.:</p>\n<pre>$ sudo mkdir /var/lib/lxc\n</pre>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<p>See docs/HISTORY.rst</p>\n</div>\n<div id=\"quick-start-guide\">\n<h2>Quick start guide</h2>\n<div id=\"create-repository\">\n<h3>Create repository</h3>\n<p>Create $HOME/.iori directory and initialize Git repository.</p>\n<pre>$ iori newrepo\n</pre>\n</div>\n<div id=\"add-lxc-host-node-to-git-repository\">\n<h3>Add LXC host node to Git repository</h3>\n<p>Make branch of named hostname of LXC host node, checktout it.:</p>\n<pre>$ iori addnode -n localhost\n</pre>\n</div>\n<div id=\"define-libvirt-xml-file-and-create-rootfs-image\">\n<h3>Define libvirt XML file and create rootfs image</h3>\n<p>Generate XML file of libvirt domain, and define domain from this xml, create rootfs image with debootstrap command. Then save XML file of that domain.:</p>\n<pre>$ iori deploy -n localhost -c testcont01 --rootfs /var/lib/lxc/testcont01\n</pre>\n</div>\n<div id=\"start-container\">\n<h3>Start container</h3>\n<p>Start container from above domain.:</p>\n<pre>$ iori start -n localhost -c testcont01\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>You copy pre-commit hook scripts after git clone.:</p>\n<pre>$ cp -f utils/pre-commit.txt .git/hooks/pre-commit\n</pre>\n<p>Next install python 2.7 later and nosetests, libvirt, python-libvirt, GitPython, cdebootstrap. Below way is for Debian GNU/Linux Sid system.:</p>\n<pre>$ sudo apt-get install python python-libvirt python-git python-nose\n</pre>\n<p>Then checkout \u2018devel\u2019 branch for development, commit your changes. Before pull request, execute git rebase.</p>\n</div>\n<div id=\"see-also\">\n<h2>See also</h2>\n<ul>\n<li><a href=\"http://lxc.sourceforge.net/\" rel=\"nofollow\">lxc Linux Containers</a></li>\n<li><a href=\"http://libvirt.org/\" rel=\"nofollow\">libvirt The virtualization API</a></li>\n<li><a href=\"http://packages.python.org/GitPython/0.3.2/\" rel=\"nofollow\">GitPython</a></li>\n<li><a href=\"http://www.python.jp/doc/release/library/xml.etree.elementtree.html?highlight=xml.etree.elementtree#xml.etree.ElementTree\" rel=\"nofollow\">ElementTree XML API</a></li>\n<li><a href=\"http://www.debian.org/releases/stable/amd64/apds03.html\" rel=\"nofollow\">Appendix D. Random Bits - D.3. Installing Debian GNU/Linux from a Unix/Linux System</a></li>\n</ul>\n<p>See also these documents.</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Support remote host target with debootstrap</li>\n<li>Detect to register same host when adding node</li>\n<li>Adding unittest</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 751980, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "aa04b76bd136578ac9d79c258a1a3f4a", "sha256": "ff009e7fa18fe21267794b3c2f51914b0b29f09601ba074c81002b5c4ffa1d13"}, "downloads": -1, "filename": "iori-0.1.tar.gz", "has_sig": false, "md5_digest": "aa04b76bd136578ac9d79c258a1a3f4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26677, "upload_time": "2012-07-25T12:47:31", "upload_time_iso_8601": "2012-07-25T12:47:31.692799Z", "url": "https://files.pythonhosted.org/packages/5a/94/4123697b1b3066416b4af8985658d1bb521dfff916c03decee701ec6e46c/iori-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "17a5a3e0bdaa29edce18c55ed9cc377f", "sha256": "509b4d7f87eea530295051508695d09d107ee02d269da25077964ec1e0d88980"}, "downloads": -1, "filename": "iori-0.1.1.tar.gz", "has_sig": false, "md5_digest": "17a5a3e0bdaa29edce18c55ed9cc377f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26729, "upload_time": "2012-07-25T14:08:36", "upload_time_iso_8601": "2012-07-25T14:08:36.763427Z", "url": "https://files.pythonhosted.org/packages/0d/d6/47e8f1b1b599c3f19fe17b1990e670212b2dfefa86c85d4e0b61967c5bda/iori-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17a5a3e0bdaa29edce18c55ed9cc377f", "sha256": "509b4d7f87eea530295051508695d09d107ee02d269da25077964ec1e0d88980"}, "downloads": -1, "filename": "iori-0.1.1.tar.gz", "has_sig": false, "md5_digest": "17a5a3e0bdaa29edce18c55ed9cc377f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26729, "upload_time": "2012-07-25T14:08:36", "upload_time_iso_8601": "2012-07-25T14:08:36.763427Z", "url": "https://files.pythonhosted.org/packages/0d/d6/47e8f1b1b599c3f19fe17b1990e670212b2dfefa86c85d4e0b61967c5bda/iori-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:57 2020"}