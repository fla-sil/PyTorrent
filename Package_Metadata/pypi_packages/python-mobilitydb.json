{"info": {"author": "MobilityDB Team", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Database :: Front-Ends", "Topic :: Scientific/Engineering :: GIS", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# python-mobilitydb\npython-mobilitydb is a database adapter to access [MobilityDB](https://github.com/ULB-CoDE-WIT/MobilityDB) from Python. It supports both the [psycopg2](https://github.com/psycopg/psycopg2) and the [asyncpg](https://github.com/MagicStack/asyncpg) adapters for PostgreSQL and uses the [postgis](https://github.com/tilery/python-postgis) adapter for PostGIS.\n\n\nInstall\n------------\n    pip install python-mobilitydb\n    \nRequirements\n------------\n - Python >= 3.0\n - MobilityDB\n \nBasic Usage\n------------\n\nUsing the psycopg2 adapter for PostgreSQL\n\n    import psycopg2\n    from postgis.psycopg import register\n    from mobilitydb.psycopg import register\n\n    connectionObject = None\n\n    try:\n        # Set the connection parameters to PostgreSQL\n        connection = psycopg2.connect(host='localhost', database='test', user='user', password='pw')\n        connection.autocommit = True\n\n        # Register MobilityDB data types\n        register(connection)\n\n        # Open a cursor to perform database operations\n        cursor = connection.cursor()\n\n        # Query the database and obtain data as Python objects\n        select_query = \"SELECT * FROM tbl_tfloatseq ORDER BY k LIMIT 10\"\n        cursor.execute(select_query)\n        rows = cursor.fetchall()\n\n        # Print the obtained rows and call a method on the instances\n        for row in rows:\n            print(\"key =\", row[0])\n            print(\"tfloatseq =\", row[1])\n            if not row[1]:\n                print(\"\")\n            else:\n                print(\"startTimestamp =\", row[1].startTimestamp(), \"\\n\")\n\n    except (Exception, psycopg2.Error) as error:\n        print(\"Error while connecting to PostgreSQL\", error)\n\n    finally:\n        # Close the connection\n        if connectionObject:\n            connectionObject.close()\n\nUsing the asyncg adapter for PostgreSQL\n\n    import asyncio\n    import asyncpg\n    from mobilitydb.asyncpg import register\n\n\n    async def run():\n        # Connect to an existing database\n        connection = await asyncpg.connect(host='localhost', database='test', user='user', password='pw')\n\n        try:\n            # Register MobilityDB data types\n            await register(connection)\n\n            # Query the database and obtain data as Python objects\n            select_query = \"SELECT * FROM tbl_tgeompointseq ORDER BY k LIMIT 10\"\n            rows = await connection.fetch(select_query)\n\n            # Print the obtained rows and call a method on the instances\n            for row in rows:\n                print(\"key =\", row[0])\n                print(\"tgeompointseq =\", row[1])\n                if not row[1]:\n                    print(\"\")\n                else:\n                    print(\"startTimestamp =\", row[1].startTimestamp(), \"\\n\")\n        finally:\n            # Close the connection\n            await connection.close()\n\n    # Launch the process\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n\nContributing\n------------\n\n[Issues](https://github.com/ULB-CoDE-WIT/python-mobilitydb/issues) and [Pull Requests](https://github.com/ULB-CoDE-WIT/python-mobilitydb/pulls) are welcome.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ULB-CoDE-WIT/python-mobilitydb", "keywords": "MobilityDB,Python", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-mobilitydb", "package_url": "https://pypi.org/project/python-mobilitydb/", "platform": "linux", "project_url": "https://pypi.org/project/python-mobilitydb/", "project_urls": {"Documentation": "https://docs.mobilitydb.com/nightly/mobilitydb.pdf", "Homepage": "https://github.com/ULB-CoDE-WIT/python-mobilitydb", "Source": "https://github.com/ULB-CoDE-WIT/python-mobilitydb"}, "release_url": "https://pypi.org/project/python-mobilitydb/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A database adapter to access MobilityDB from Python", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-mobilitydb</h1>\n<p>python-mobilitydb is a database adapter to access <a href=\"https://github.com/ULB-CoDE-WIT/MobilityDB\" rel=\"nofollow\">MobilityDB</a> from Python. It supports both the <a href=\"https://github.com/psycopg/psycopg2\" rel=\"nofollow\">psycopg2</a> and the <a href=\"https://github.com/MagicStack/asyncpg\" rel=\"nofollow\">asyncpg</a> adapters for PostgreSQL and uses the <a href=\"https://github.com/tilery/python-postgis\" rel=\"nofollow\">postgis</a> adapter for PostGIS.</p>\n<h2>Install</h2>\n<pre><code>pip install python-mobilitydb\n</code></pre>\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 3.0</li>\n<li>MobilityDB</li>\n</ul>\n<h2>Basic Usage</h2>\n<p>Using the psycopg2 adapter for PostgreSQL</p>\n<pre><code>import psycopg2\nfrom postgis.psycopg import register\nfrom mobilitydb.psycopg import register\n\nconnectionObject = None\n\ntry:\n    # Set the connection parameters to PostgreSQL\n    connection = psycopg2.connect(host='localhost', database='test', user='user', password='pw')\n    connection.autocommit = True\n\n    # Register MobilityDB data types\n    register(connection)\n\n    # Open a cursor to perform database operations\n    cursor = connection.cursor()\n\n    # Query the database and obtain data as Python objects\n    select_query = \"SELECT * FROM tbl_tfloatseq ORDER BY k LIMIT 10\"\n    cursor.execute(select_query)\n    rows = cursor.fetchall()\n\n    # Print the obtained rows and call a method on the instances\n    for row in rows:\n        print(\"key =\", row[0])\n        print(\"tfloatseq =\", row[1])\n        if not row[1]:\n            print(\"\")\n        else:\n            print(\"startTimestamp =\", row[1].startTimestamp(), \"\\n\")\n\nexcept (Exception, psycopg2.Error) as error:\n    print(\"Error while connecting to PostgreSQL\", error)\n\nfinally:\n    # Close the connection\n    if connectionObject:\n        connectionObject.close()\n</code></pre>\n<p>Using the asyncg adapter for PostgreSQL</p>\n<pre><code>import asyncio\nimport asyncpg\nfrom mobilitydb.asyncpg import register\n\n\nasync def run():\n    # Connect to an existing database\n    connection = await asyncpg.connect(host='localhost', database='test', user='user', password='pw')\n\n    try:\n        # Register MobilityDB data types\n        await register(connection)\n\n        # Query the database and obtain data as Python objects\n        select_query = \"SELECT * FROM tbl_tgeompointseq ORDER BY k LIMIT 10\"\n        rows = await connection.fetch(select_query)\n\n        # Print the obtained rows and call a method on the instances\n        for row in rows:\n            print(\"key =\", row[0])\n            print(\"tgeompointseq =\", row[1])\n            if not row[1]:\n                print(\"\")\n            else:\n                print(\"startTimestamp =\", row[1].startTimestamp(), \"\\n\")\n    finally:\n        # Close the connection\n        await connection.close()\n\n# Launch the process\nloop = asyncio.get_event_loop()\nloop.run_until_complete(run())\n</code></pre>\n<h2>Contributing</h2>\n<p><a href=\"https://github.com/ULB-CoDE-WIT/python-mobilitydb/issues\" rel=\"nofollow\">Issues</a> and <a href=\"https://github.com/ULB-CoDE-WIT/python-mobilitydb/pulls\" rel=\"nofollow\">Pull Requests</a> are welcome.</p>\n\n          </div>"}, "last_serial": 6440839, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "de2f771675ed40aaf289aeb2a227ac09", "sha256": "33ca5ca1afc59be2b87cbc9548b4675b3bc0e30f9dcd7fd977c5019f1b91ceb8"}, "downloads": -1, "filename": "python-mobilitydb-0.1.0.tar.gz", "has_sig": false, "md5_digest": "de2f771675ed40aaf289aeb2a227ac09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39303, "upload_time": "2020-01-09T16:50:05", "upload_time_iso_8601": "2020-01-09T16:50:05.577065Z", "url": "https://files.pythonhosted.org/packages/01/9e/a2846fe064dc2f7f0a753d0c14562a5dc114d604c1670f226f1a12b048b1/python-mobilitydb-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2a73a3c6a0dee729cc8e342cbf8c56e3", "sha256": "89ab11982fcc17138fa90969e514a4d1b9aa19accc9c68f119d2469fd1fee596"}, "downloads": -1, "filename": "python-mobilitydb-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2a73a3c6a0dee729cc8e342cbf8c56e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46374, "upload_time": "2020-01-12T18:38:52", "upload_time_iso_8601": "2020-01-12T18:38:52.078129Z", "url": "https://files.pythonhosted.org/packages/f6/5e/830e5cdd4d76321d4890cec1e3fd79351946a90b0c617a33ac3c0ec679d3/python-mobilitydb-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a73a3c6a0dee729cc8e342cbf8c56e3", "sha256": "89ab11982fcc17138fa90969e514a4d1b9aa19accc9c68f119d2469fd1fee596"}, "downloads": -1, "filename": "python-mobilitydb-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2a73a3c6a0dee729cc8e342cbf8c56e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46374, "upload_time": "2020-01-12T18:38:52", "upload_time_iso_8601": "2020-01-12T18:38:52.078129Z", "url": "https://files.pythonhosted.org/packages/f6/5e/830e5cdd4d76321d4890cec1e3fd79351946a90b0c617a33ac3c0ec679d3/python-mobilitydb-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:32 2020"}