{"info": {"author": "mnemonic AS", "author_email": "opensource@mnemonic.no", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: ISC License (ISCL)", "Topic :: Utilities"], "description": "# CAEP\n\nconfig module, supports loading config from ini, environment and arguments\n\nThe configuration presedence are (from lowest to highest):\n* argparse default\n* ini file\n* environment variable\n* command line argument\n\n# Config\n\nArguments are parsed in two phases. First, it will look for the argument --config argument\nwhich can be used to specify an alternative location for the ini file. If not --config argument\nis given it will look for an ini file in the following locations (~/.config has presedence):\n\n- ~/.config/<CONFIG_ID>/<CONFIG_FILE_NAME> (or directory specified by XDG_CONFIG_HOME)\n- /etc/<CONFIG_FILE_NAME>\n\nThe ini file can contain a \"[DEFAULT]\" section that will be used for all configurations.\nIn addition it can have a section that corresponds with <SECTION_NAME> that for\nspecific configuration, that will over override config from DEFAULT\n\n# Environment variables\n\nThe configuration step will also look for environment variables in uppercase and\nwith \"-\" replaced with \"_\". For the example below it will lookup the following environment\nvariables:\n\n- $NUMBER\n- $BOOL\n- $STR_ARG\n\nExample:\n\n```\n>>> parser = argparse.ArgumentParser(\"test argparse\")\n>>> parser.add_argument('--number', type=int, default=1)\n>>> parser.add_argument('--bool', action='store_true')\n>>> parser.add_argument('--str-arg')\n>>> args = config.handle_args(parser, <CONFIG_ID>, <CONFIG_FILE_NAME>, <SECTION_NAME>)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mnemonic-no/caep", "keywords": "mnemonic", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "caep", "package_url": "https://pypi.org/project/caep/", "platform": "", "project_url": "https://pypi.org/project/caep/", "project_urls": {"Homepage": "https://github.com/mnemonic-no/caep"}, "release_url": "https://pypi.org/project/caep/0.0.1/", "requires_dist": null, "requires_python": ">=3.6, <4", "summary": "Config Argument Env Parser (CAEP)", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CAEP</h1>\n<p>config module, supports loading config from ini, environment and arguments</p>\n<p>The configuration presedence are (from lowest to highest):</p>\n<ul>\n<li>argparse default</li>\n<li>ini file</li>\n<li>environment variable</li>\n<li>command line argument</li>\n</ul>\n<h1>Config</h1>\n<p>Arguments are parsed in two phases. First, it will look for the argument --config argument\nwhich can be used to specify an alternative location for the ini file. If not --config argument\nis given it will look for an ini file in the following locations (~/.config has presedence):</p>\n<ul>\n<li>~/.config/&lt;CONFIG_ID&gt;/&lt;CONFIG_FILE_NAME&gt; (or directory specified by XDG_CONFIG_HOME)</li>\n<li>/etc/&lt;CONFIG_FILE_NAME&gt;</li>\n</ul>\n<p>The ini file can contain a \"[DEFAULT]\" section that will be used for all configurations.\nIn addition it can have a section that corresponds with &lt;SECTION_NAME&gt; that for\nspecific configuration, that will over override config from DEFAULT</p>\n<h1>Environment variables</h1>\n<p>The configuration step will also look for environment variables in uppercase and\nwith \"-\" replaced with \"_\". For the example below it will lookup the following environment\nvariables:</p>\n<ul>\n<li>$NUMBER</li>\n<li>$BOOL</li>\n<li>$STR_ARG</li>\n</ul>\n<p>Example:</p>\n<pre><code>&gt;&gt;&gt; parser = argparse.ArgumentParser(\"test argparse\")\n&gt;&gt;&gt; parser.add_argument('--number', type=int, default=1)\n&gt;&gt;&gt; parser.add_argument('--bool', action='store_true')\n&gt;&gt;&gt; parser.add_argument('--str-arg')\n&gt;&gt;&gt; args = config.handle_args(parser, &lt;CONFIG_ID&gt;, &lt;CONFIG_FILE_NAME&gt;, &lt;SECTION_NAME&gt;)\n</code></pre>\n\n          </div>"}, "last_serial": 6791637, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1ab32dd5b572bc1bc27d379204ba6290", "sha256": "b09b9b873be1849052809a0c1615c21bd9150a0df6125becdc15669f899fd619"}, "downloads": -1, "filename": "caep-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1ab32dd5b572bc1bc27d379204ba6290", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 4397, "upload_time": "2020-03-11T11:43:18", "upload_time_iso_8601": "2020-03-11T11:43:18.863906Z", "url": "https://files.pythonhosted.org/packages/a7/18/dc31e3d2ddc6c471e036eef53c5cf5578731d361a2886cff5be7faa069de/caep-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ab32dd5b572bc1bc27d379204ba6290", "sha256": "b09b9b873be1849052809a0c1615c21bd9150a0df6125becdc15669f899fd619"}, "downloads": -1, "filename": "caep-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1ab32dd5b572bc1bc27d379204ba6290", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 4397, "upload_time": "2020-03-11T11:43:18", "upload_time_iso_8601": "2020-03-11T11:43:18.863906Z", "url": "https://files.pythonhosted.org/packages/a7/18/dc31e3d2ddc6c471e036eef53c5cf5578731d361a2886cff5be7faa069de/caep-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:41 2020"}