{"info": {"author": "Josh VanderLinden", "author_email": "codekoala at gmail com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Communications", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: News/Diary"], "description": "django-articles is a powerful, pluggable blogging application for\nDjango-powered sites.  It's also what powers http://www.codekoala.com/ and a\nhandful of other awesome sites.\n\nFeatures\n========\n\n* Tags for articles, with a tag cloud template tag\n* Auto-completion for tags in the Django admin\n* Auto-tagging: assigning existing tags to articles when they're present in the\n  article content\n* Ability to post in the future\n* Article expiration facilities\n* Articles from email\n* Article attachments\n* Article statuses--\"draft\" and \"finished\" are there by default\n* Allows articles to be written in plain text/HTML or using Markdown,\n  ReStructured Text, or Textile markup\n* Related articles\n* Follow-up articles\n* Comments by Disqus\n* Article archive, with pagination\n* Internationalization-ready\n* Detects links in articles and creates a per-article index for you\n* Word count\n* RSS feeds for the latest articles\n* RSS feeds for the latest articles by tag\n* South migrations\n\nRequirements\n============\n\n``django-articles`` wants a modern version of Django--something after 1.1.  It\nused to rely on ``django.contrib.comments`` for commenting needs, but I\nrecently switched to `Disqus <http://www.disqus.com/>`_.  Included herein is a\nmanagement command to convert ``django.contrib.comments`` comments to Disqus.\n\nThis project also expects ``django.contrib.sites``, ``django.contrib.admin``,\n``django.contrib.markup``, ``django.contrib.auth``,\n``django.contrib.humanize``, and ``django.contrib.syndication`` to be properly\ninstalled.\n\nIf you plan to use the schema migrations, you'll need to install `South\n<http://south.aeracode.org/>`_.\n\n.. note:: New in 2.1.0\n\nInstallation\n============\n\nDownload ``django-articles`` using *one* of the following methods:\n\nCheckout from Mercurial\n-----------------------\n\nUse one of the following commands::\n\n    hg clone http://bitbucket.org/codekoala/django-articles/\n    hg clone http://django-articles.googlecode.com/hg/ django-articles\n\nCheckout from GitHub\n--------------------\n\nUse the following command::\n\n    git clone http://github.com/codekoala/django-articles.git\n\nThe CheeseShop\n--------------\n\nUse one of the following commands::\n\n    pip install django-articles\n    easy_install django-articles\n\nConfiguration\n=============\n\nFirst of all, you must add this project to your list of ``INSTALLED_APPS`` in\n``settings.py``::\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.humanize',\n        'django.contrib.markup',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        'django.contrib.syndication',\n        ...\n        'articles',\n        'south',\n        ...\n    )\n\nRun ``python manage.py syncdb``.  This creates a few tables in your database\nthat are necessary for operation.  If you choose to use South, you'll probably\nneed to run ``python manage.py migrate articles`` instead.\n\nNext, set a couple of settings in your ``settings.py``:\n\n* ``DISQUS_USER_API_KEY``: Your user API key from Disqus.  This is free, and\n  you can learn how to get it from  `Disqus's API Page <http://2ze.us/ME>`_ or\n  you can try http://disqus.com/api/get_my_key/ when you're logged into Disqus.\n  You only need this one if you're going to be converting comments from\n  ``django.contrib.comments`` to Disqus.\n* ``DISQUS_FORUM_SHORTNAME``: The name of your Disqus site.  This is what's\n  used to link comments to your site.\n\nLess frequently changed settings:\n\n* ``ARTICLES_TEASER_LIMIT``: The number of words to display in the teaser.\n  Defaults to ``75``.\n* ``ARTICLES_AUTO_TAG``: Whether or not to automatically tag articles. Defaults\n  to ``True``.\n* ``ARTICLES_DEFAULT_DB``: Database in which to store articles. Defaults to\n  ``default``.\n* ``ARTICLES_LOOKUP_LINK_TITLE``: Whether to fetch the title of remote links or\n  use the local name of the link. Defaults to ``True``.\n\nAlso, make sure that you have the following context processors in your\n``TEMPLATE_CONTEXT_PROCESSORS`` tuple:\n\n* ``django.contrib.auth.context_processors.auth``\n* ``django.core.context_processors.i18n``\n* ``django.core.context_processors.media``\n* ``django.core.context_processors.request``\n\n.. note:: New in 2.1.2\n\nIf you want to specify the default database to use for ``django-articles``, you\ncan specify the ``ARTICLES_DEFAULT_DB`` setting.  This defaults to ``default``.\n\nTemplate Integration\n====================\n\nThere are several template blocks that ``django-articles`` expects your\n``base.html`` file to contain:\n\n* ``title``\n* ``meta-keywords``\n* ``meta-description``\n* ``extra-head``\n* ``content``\n* ``footer``\n\nTag Auto-Completion\n===================\n\nIf you would like to take advantage of the auto-completion feature for tags,\ncopy the files from the ``articles/media`` directories into your static media\ndirectory.  ``django-articles`` expects to find each of those directories/files\nin your ``settings.MEDIA_URL`` directory--if this does not suit your needs, you\nmay override the ``Media`` class of ``articles.forms.ArticleAdminForm`` with\nthe appropriate paths.\n\nAnother assumption that is made by this feature is that the prefix you assign\nto your ``django-articles`` installation in your ``ROOT_URLCONF`` will be\n``^blog/``.  For example::\n\n    url(r'^blog', include('articles.urls')),\n\nIf this does not match your installation, all you need to change is the\n``js/tag_autocomplete.js`` to reflect the proper path.\n\nWhen that's done, you should be able to begin using ``django-articles``!\n\nArticles From Email\n===================\n\n.. note:: New in 1.9.2\n\n.. admonition:: Version Dependencies\n\n    The articles from email feature requires Python 2.4 or greater.\n\nI've been working on making it possible for ``django-articles`` to post\narticles that you email to a special mailbox.  This seems to be working on the\nmost basic levels right now.  It's not been tested in very many scenarios, and\nI would appreciate it if you could post problems with it in the ticket tracker\nat http://bitbucket.org/codekoala/django-articles/ so we can make it work\nreally well.\n\nThings to keep in mind:\n\n* Any **active** user who is a ``django.contrib.auth.models.User`` and has an\n  email address associated with their user information is a valid sender for\n  articles from email.  This is how the author of an article is determined.\n* Only the following fields are currently populated by the articles from email\n  feature:\n\n    * author\n    * title\n    * slug (uniqueness is handled)\n    * content\n    * markup\n    * publish_date\n    * is_active\n\n  Any and all other attributes about an article must be configured later on\n  using the standard mechanisms (aka the Django admin).\n* There is a new management command to handle all of the magic for this\n  feature: ``check_for_articles_from_email``.  This command is intended to be\n  called either manually or via external scheduling utilities (like ``cron``)\n* Email messages **are deleted** after they are turned into articles.  This\n  means that you should probably have a *special mailbox dedicated to\n  django-articles and articles from email*.  However, only emails whose sender\n  matches the email address of an active user are deleted (as described above).\n* Attachments are currently not bothered with.  Don't worry, they will be in\n  the future. :D\n\nConfiguration\n-------------\n\nThere are several new variables that you can configure in your ``settings.py``\nto enable articles from email, specifying a ``ARTICLES_FROM_EMAIL`` dictionary:\n\n* ``protocol`` - Either ``IMAP4`` or ``POP3``.  *Default*: ``IMAP4``\n* ``host`` - The mail server. *Example*: ``mail.yourserver.com``\n* ``port`` - The port to use to connect to your mail server\n* ``keyfile`` - The keyfile used to access your mail server.  This is only used\n  if ``ssl`` is ``True``, and even then it's optional. *untested*\n* ``certfile`` - The certfile used to access your mail server.  This is only\n  used if ``ssl`` is ``True``, and even then it's optional. *untested*\n* ``user`` - The username used to access your mailbox\n* ``password`` - The password associated with the user to access your mailbox\n* ``ssl`` - Whether or not to connect to the mail server using SSL.  *Default*:\n  ``False``\n* ``autopost`` - Whether or not to automatically post articles that are created\n  from email messages.  If this is ``False``, the articles will be marked as\n  inactive and you must manually make them active. *Default*: ``False``\n* ``markup`` - The default markup language to use for articles from email.\n  Options include:\n\n    * ``h`` for HTML/plain text\n    * ``m`` for Markdown\n    * ``r`` for reStructuredText\n    * ``t`` for Textile\n\n  *Default*: ``h``\n* ``acknowledge`` - Whether or not to email out an acknowledgment\n  message when articles are created from email.  *Default*: ``False``\n\nExample configuration::\n\n    ARTICLES_FROM_EMAIL = {\n        'protocol': 'IMAP4',\n        'host': 'mail.yourserver.com',\n        'port': 9000,\n        'keyfile': '/path/to/keyfile',\n        'certfile': '/path/to/certfile',\n        'user': 'your_username',\n        'password': 'your_password',\n        'ssl': True,\n        'autopost': True,\n        'markup': 'r',\n        'acknowledge': True,\n    }\n\nArticle Attachments\n===================\n\n.. note:: New in 1.9.6\n\nYou can now attach files to your articles and have them be included with the\narticle on the site.  Attachments can be created using the Django admin while\ncomposing your articles.  You may also attach files to emails that you send to\nthe special mailbox (described above) if you so desire.\n\nArticle Statuses\n================\n\n.. note:: New in 1.9.6\n\nAs of ``1.9.6``, you may specify the state of an article when you save it.\nThis allows you to begin composing an article, save it, and come back later to\nfinish it.  In the past, this behavior was handled by not setting a publish\ndate for the article.  However, saving an unfinished article with a non-live\nstatus allows superusers to view the article on the site as though it were\nlive.  In the future, I plan to allow authors to view non-live versions of\ntheir articles.\n\nThe default status for an article will always be the Article Status object with\nthe lowest ``ordering`` value.  This includes negative integers.  If you want\nall articles to be ``Finished`` by default, go ahead and update the\n``ordering`` on that object to be less than the ``ordering`` value for the\n``Draft`` object (and/or any others you create).\n\nAuto-Tagging\n============\n\n.. note:: New in 2.1.0\n\nThe auto-tagging feature allows you to easily apply any of your current tags to\nyour articles.  When you save an Article object with auto-tagging enabled for\nthat article, ``django-articles`` will go through each of your existing tags to\nsee if the entire word appears anywhere in your article's content.  If a match\nis found, that tag will be added to the article.\n\nFor example, if you have tags ``test`` and ``art``, and you wrote a new\nauto-tagged Article with the text::\n\n    This is a test article.\n\n``django-articles`` would automatically apply the ``test`` tag to this article,\nbut not the ``art`` tag.  It will only apply the ``art`` tag automatically when\nthe actual word \"art\" appears in the content.\n\nAuto-tagging does not remove any tags that are already assigned to an article.\nThis means that you can still add tags the good, old-fashioned way in the\nDjango Admin without losing them.  Auto-tagging will *only* add to an article's\nexisting tags (if needed).\n\nAuto-tagging is enabled for all articles by default.  If you want to disable it\nby default (and enable it on a per-article basis), set ``ARTICLES_AUTO_TAG`` to\n``False`` in your ``settings.py`` file.\n\nAuto-Tagging **does not** attempt to produce any keywords that magically\nrepresent the content of your articles.  Only **existing** tags are used!!\n\nHelp & Contributing\n===================\n\nGood luck!  Please contact me with any questions or concerns you have with the\nproject!  If you're interested in reporting a bug or feature request, the\nofficial ticket tracker is at http://bitbucket.org/codekoala/django-articles/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/codekoala/django-articles/", "keywords": "django,blog,blogging,engine", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-articles", "package_url": "https://pypi.org/project/django-articles/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-articles/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/codekoala/django-articles/"}, "release_url": "https://pypi.org/project/django-articles/2.4.1/", "requires_dist": null, "requires_python": null, "summary": "Sophisticated blogging engine for Django-powered sites", "version": "2.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>django-articles is a powerful, pluggable blogging application for\nDjango-powered sites.  It\u2019s also what powers <a href=\"http://www.codekoala.com/\" rel=\"nofollow\">http://www.codekoala.com/</a> and a\nhandful of other awesome sites.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Tags for articles, with a tag cloud template tag</li>\n<li>Auto-completion for tags in the Django admin</li>\n<li>Auto-tagging: assigning existing tags to articles when they\u2019re present in the\narticle content</li>\n<li>Ability to post in the future</li>\n<li>Article expiration facilities</li>\n<li>Articles from email</li>\n<li>Article attachments</li>\n<li>Article statuses\u2013\u201cdraft\u201d and \u201cfinished\u201d are there by default</li>\n<li>Allows articles to be written in plain text/HTML or using Markdown,\nReStructured Text, or Textile markup</li>\n<li>Related articles</li>\n<li>Follow-up articles</li>\n<li>Comments by Disqus</li>\n<li>Article archive, with pagination</li>\n<li>Internationalization-ready</li>\n<li>Detects links in articles and creates a per-article index for you</li>\n<li>Word count</li>\n<li>RSS feeds for the latest articles</li>\n<li>RSS feeds for the latest articles by tag</li>\n<li>South migrations</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p><tt><span class=\"pre\">django-articles</span></tt> wants a modern version of Django\u2013something after 1.1.  It\nused to rely on <tt>django.contrib.comments</tt> for commenting needs, but I\nrecently switched to <a href=\"http://www.disqus.com/\" rel=\"nofollow\">Disqus</a>.  Included herein is a\nmanagement command to convert <tt>django.contrib.comments</tt> comments to Disqus.</p>\n<p>This project also expects <tt>django.contrib.sites</tt>, <tt>django.contrib.admin</tt>,\n<tt>django.contrib.markup</tt>, <tt>django.contrib.auth</tt>,\n<tt>django.contrib.humanize</tt>, and <tt>django.contrib.syndication</tt> to be properly\ninstalled.</p>\n<p>If you plan to use the schema migrations, you\u2019ll need to install <a href=\"http://south.aeracode.org/\" rel=\"nofollow\">South</a>.</p>\n<div>\n<p>Note</p>\n<p>New in 2.1.0</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Download <tt><span class=\"pre\">django-articles</span></tt> using <em>one</em> of the following methods:</p>\n<div id=\"checkout-from-mercurial\">\n<h3>Checkout from Mercurial</h3>\n<p>Use one of the following commands:</p>\n<pre>hg clone http://bitbucket.org/codekoala/django-articles/\nhg clone http://django-articles.googlecode.com/hg/ django-articles\n</pre>\n</div>\n<div id=\"checkout-from-github\">\n<h3>Checkout from GitHub</h3>\n<p>Use the following command:</p>\n<pre>git clone http://github.com/codekoala/django-articles.git\n</pre>\n</div>\n<div id=\"the-cheeseshop\">\n<h3>The CheeseShop</h3>\n<p>Use one of the following commands:</p>\n<pre>pip install django-articles\neasy_install django-articles\n</pre>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>First of all, you must add this project to your list of <tt>INSTALLED_APPS</tt> in\n<tt>settings.py</tt>:</p>\n<pre>INSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.humanize',\n    'django.contrib.markup',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.syndication',\n    ...\n    'articles',\n    'south',\n    ...\n)\n</pre>\n<p>Run <tt>python manage.py syncdb</tt>.  This creates a few tables in your database\nthat are necessary for operation.  If you choose to use South, you\u2019ll probably\nneed to run <tt>python manage.py migrate articles</tt> instead.</p>\n<p>Next, set a couple of settings in your <tt>settings.py</tt>:</p>\n<ul>\n<li><tt>DISQUS_USER_API_KEY</tt>: Your user API key from Disqus.  This is free, and\nyou can learn how to get it from  <a href=\"http://2ze.us/ME\" rel=\"nofollow\">Disqus\u2019s API Page</a> or\nyou can try <a href=\"http://disqus.com/api/get_my_key/\" rel=\"nofollow\">http://disqus.com/api/get_my_key/</a> when you\u2019re logged into Disqus.\nYou only need this one if you\u2019re going to be converting comments from\n<tt>django.contrib.comments</tt> to Disqus.</li>\n<li><tt>DISQUS_FORUM_SHORTNAME</tt>: The name of your Disqus site.  This is what\u2019s\nused to link comments to your site.</li>\n</ul>\n<p>Less frequently changed settings:</p>\n<ul>\n<li><tt>ARTICLES_TEASER_LIMIT</tt>: The number of words to display in the teaser.\nDefaults to <tt>75</tt>.</li>\n<li><tt>ARTICLES_AUTO_TAG</tt>: Whether or not to automatically tag articles. Defaults\nto <tt>True</tt>.</li>\n<li><tt>ARTICLES_DEFAULT_DB</tt>: Database in which to store articles. Defaults to\n<tt>default</tt>.</li>\n<li><tt>ARTICLES_LOOKUP_LINK_TITLE</tt>: Whether to fetch the title of remote links or\nuse the local name of the link. Defaults to <tt>True</tt>.</li>\n</ul>\n<p>Also, make sure that you have the following context processors in your\n<tt>TEMPLATE_CONTEXT_PROCESSORS</tt> tuple:</p>\n<ul>\n<li><tt>django.contrib.auth.context_processors.auth</tt></li>\n<li><tt>django.core.context_processors.i18n</tt></li>\n<li><tt>django.core.context_processors.media</tt></li>\n<li><tt>django.core.context_processors.request</tt></li>\n</ul>\n<div>\n<p>Note</p>\n<p>New in 2.1.2</p>\n</div>\n<p>If you want to specify the default database to use for <tt><span class=\"pre\">django-articles</span></tt>, you\ncan specify the <tt>ARTICLES_DEFAULT_DB</tt> setting.  This defaults to <tt>default</tt>.</p>\n</div>\n<div id=\"template-integration\">\n<h2>Template Integration</h2>\n<p>There are several template blocks that <tt><span class=\"pre\">django-articles</span></tt> expects your\n<tt>base.html</tt> file to contain:</p>\n<ul>\n<li><tt>title</tt></li>\n<li><tt><span class=\"pre\">meta-keywords</span></tt></li>\n<li><tt><span class=\"pre\">meta-description</span></tt></li>\n<li><tt><span class=\"pre\">extra-head</span></tt></li>\n<li><tt>content</tt></li>\n<li><tt>footer</tt></li>\n</ul>\n</div>\n<div id=\"tag-auto-completion\">\n<h2>Tag Auto-Completion</h2>\n<p>If you would like to take advantage of the auto-completion feature for tags,\ncopy the files from the <tt>articles/media</tt> directories into your static media\ndirectory.  <tt><span class=\"pre\">django-articles</span></tt> expects to find each of those directories/files\nin your <tt>settings.MEDIA_URL</tt> directory\u2013if this does not suit your needs, you\nmay override the <tt>Media</tt> class of <tt>articles.forms.ArticleAdminForm</tt> with\nthe appropriate paths.</p>\n<p>Another assumption that is made by this feature is that the prefix you assign\nto your <tt><span class=\"pre\">django-articles</span></tt> installation in your <tt>ROOT_URLCONF</tt> will be\n<tt>^blog/</tt>.  For example:</p>\n<pre>url(r'^blog', include('articles.urls')),\n</pre>\n<p>If this does not match your installation, all you need to change is the\n<tt>js/tag_autocomplete.js</tt> to reflect the proper path.</p>\n<p>When that\u2019s done, you should be able to begin using <tt><span class=\"pre\">django-articles</span></tt>!</p>\n</div>\n<div id=\"articles-from-email\">\n<h2>Articles From Email</h2>\n<div>\n<p>Note</p>\n<p>New in 1.9.2</p>\n</div>\n<div>\n<p>Version Dependencies</p>\n<p>The articles from email feature requires Python 2.4 or greater.</p>\n</div>\n<p>I\u2019ve been working on making it possible for <tt><span class=\"pre\">django-articles</span></tt> to post\narticles that you email to a special mailbox.  This seems to be working on the\nmost basic levels right now.  It\u2019s not been tested in very many scenarios, and\nI would appreciate it if you could post problems with it in the ticket tracker\nat <a href=\"http://bitbucket.org/codekoala/django-articles/\" rel=\"nofollow\">http://bitbucket.org/codekoala/django-articles/</a> so we can make it work\nreally well.</p>\n<p>Things to keep in mind:</p>\n<ul>\n<li><p>Any <strong>active</strong> user who is a <tt>django.contrib.auth.models.User</tt> and has an\nemail address associated with their user information is a valid sender for\narticles from email.  This is how the author of an article is determined.</p>\n</li>\n<li><p>Only the following fields are currently populated by the articles from email\nfeature:</p>\n<blockquote>\n<ul>\n<li>author</li>\n<li>title</li>\n<li>slug (uniqueness is handled)</li>\n<li>content</li>\n<li>markup</li>\n<li>publish_date</li>\n<li>is_active</li>\n</ul>\n</blockquote>\n<p>Any and all other attributes about an article must be configured later on\nusing the standard mechanisms (aka the Django admin).</p>\n</li>\n<li><p>There is a new management command to handle all of the magic for this\nfeature: <tt>check_for_articles_from_email</tt>.  This command is intended to be\ncalled either manually or via external scheduling utilities (like <tt>cron</tt>)</p>\n</li>\n<li><p>Email messages <strong>are deleted</strong> after they are turned into articles.  This\nmeans that you should probably have a <em>special mailbox dedicated to\ndjango-articles and articles from email</em>.  However, only emails whose sender\nmatches the email address of an active user are deleted (as described above).</p>\n</li>\n<li><p>Attachments are currently not bothered with.  Don\u2019t worry, they will be in\nthe future. :D</p>\n</li>\n</ul>\n<div id=\"id1\">\n<h3>Configuration</h3>\n<p>There are several new variables that you can configure in your <tt>settings.py</tt>\nto enable articles from email, specifying a <tt>ARTICLES_FROM_EMAIL</tt> dictionary:</p>\n<ul>\n<li><p><tt>protocol</tt> - Either <tt>IMAP4</tt> or <tt>POP3</tt>.  <em>Default</em>: <tt>IMAP4</tt></p>\n</li>\n<li><p><tt>host</tt> - The mail server. <em>Example</em>: <tt>mail.yourserver.com</tt></p>\n</li>\n<li><p><tt>port</tt> - The port to use to connect to your mail server</p>\n</li>\n<li><p><tt>keyfile</tt> - The keyfile used to access your mail server.  This is only used\nif <tt>ssl</tt> is <tt>True</tt>, and even then it\u2019s optional. <em>untested</em></p>\n</li>\n<li><p><tt>certfile</tt> - The certfile used to access your mail server.  This is only\nused if <tt>ssl</tt> is <tt>True</tt>, and even then it\u2019s optional. <em>untested</em></p>\n</li>\n<li><p><tt>user</tt> - The username used to access your mailbox</p>\n</li>\n<li><p><tt>password</tt> - The password associated with the user to access your mailbox</p>\n</li>\n<li><p><tt>ssl</tt> - Whether or not to connect to the mail server using SSL.  <em>Default</em>:\n<tt>False</tt></p>\n</li>\n<li><p><tt>autopost</tt> - Whether or not to automatically post articles that are created\nfrom email messages.  If this is <tt>False</tt>, the articles will be marked as\ninactive and you must manually make them active. <em>Default</em>: <tt>False</tt></p>\n</li>\n<li><p><tt>markup</tt> - The default markup language to use for articles from email.\nOptions include:</p>\n<blockquote>\n<ul>\n<li><tt>h</tt> for HTML/plain text</li>\n<li><tt>m</tt> for Markdown</li>\n<li><tt>r</tt> for reStructuredText</li>\n<li><tt>t</tt> for Textile</li>\n</ul>\n</blockquote>\n<p><em>Default</em>: <tt>h</tt></p>\n</li>\n<li><p><tt>acknowledge</tt> - Whether or not to email out an acknowledgment\nmessage when articles are created from email.  <em>Default</em>: <tt>False</tt></p>\n</li>\n</ul>\n<p>Example configuration:</p>\n<pre>ARTICLES_FROM_EMAIL = {\n    'protocol': 'IMAP4',\n    'host': 'mail.yourserver.com',\n    'port': 9000,\n    'keyfile': '/path/to/keyfile',\n    'certfile': '/path/to/certfile',\n    'user': 'your_username',\n    'password': 'your_password',\n    'ssl': True,\n    'autopost': True,\n    'markup': 'r',\n    'acknowledge': True,\n}\n</pre>\n</div>\n</div>\n<div id=\"article-attachments\">\n<h2>Article Attachments</h2>\n<div>\n<p>Note</p>\n<p>New in 1.9.6</p>\n</div>\n<p>You can now attach files to your articles and have them be included with the\narticle on the site.  Attachments can be created using the Django admin while\ncomposing your articles.  You may also attach files to emails that you send to\nthe special mailbox (described above) if you so desire.</p>\n</div>\n<div id=\"article-statuses\">\n<h2>Article Statuses</h2>\n<div>\n<p>Note</p>\n<p>New in 1.9.6</p>\n</div>\n<p>As of <tt>1.9.6</tt>, you may specify the state of an article when you save it.\nThis allows you to begin composing an article, save it, and come back later to\nfinish it.  In the past, this behavior was handled by not setting a publish\ndate for the article.  However, saving an unfinished article with a non-live\nstatus allows superusers to view the article on the site as though it were\nlive.  In the future, I plan to allow authors to view non-live versions of\ntheir articles.</p>\n<p>The default status for an article will always be the Article Status object with\nthe lowest <tt>ordering</tt> value.  This includes negative integers.  If you want\nall articles to be <tt>Finished</tt> by default, go ahead and update the\n<tt>ordering</tt> on that object to be less than the <tt>ordering</tt> value for the\n<tt>Draft</tt> object (and/or any others you create).</p>\n</div>\n<div id=\"auto-tagging\">\n<h2>Auto-Tagging</h2>\n<div>\n<p>Note</p>\n<p>New in 2.1.0</p>\n</div>\n<p>The auto-tagging feature allows you to easily apply any of your current tags to\nyour articles.  When you save an Article object with auto-tagging enabled for\nthat article, <tt><span class=\"pre\">django-articles</span></tt> will go through each of your existing tags to\nsee if the entire word appears anywhere in your article\u2019s content.  If a match\nis found, that tag will be added to the article.</p>\n<p>For example, if you have tags <tt>test</tt> and <tt>art</tt>, and you wrote a new\nauto-tagged Article with the text:</p>\n<pre>This is a test article.\n</pre>\n<p><tt><span class=\"pre\">django-articles</span></tt> would automatically apply the <tt>test</tt> tag to this article,\nbut not the <tt>art</tt> tag.  It will only apply the <tt>art</tt> tag automatically when\nthe actual word \u201cart\u201d appears in the content.</p>\n<p>Auto-tagging does not remove any tags that are already assigned to an article.\nThis means that you can still add tags the good, old-fashioned way in the\nDjango Admin without losing them.  Auto-tagging will <em>only</em> add to an article\u2019s\nexisting tags (if needed).</p>\n<p>Auto-tagging is enabled for all articles by default.  If you want to disable it\nby default (and enable it on a per-article basis), set <tt>ARTICLES_AUTO_TAG</tt> to\n<tt>False</tt> in your <tt>settings.py</tt> file.</p>\n<p>Auto-Tagging <strong>does not</strong> attempt to produce any keywords that magically\nrepresent the content of your articles.  Only <strong>existing</strong> tags are used!!</p>\n</div>\n<div id=\"help-contributing\">\n<h2>Help &amp; Contributing</h2>\n<p>Good luck!  Please contact me with any questions or concerns you have with the\nproject!  If you\u2019re interested in reporting a bug or feature request, the\nofficial ticket tracker is at <a href=\"http://bitbucket.org/codekoala/django-articles/\" rel=\"nofollow\">http://bitbucket.org/codekoala/django-articles/</a></p>\n</div>\n\n          </div>"}, "last_serial": 789110, "releases": {"1.5": [{"comment_text": "", "digests": {"md5": "c3df31c39945690104e5cf727671fe86", "sha256": "0e39c0bc48125185591025370f027a4eff54f42eea76f75ba982db4d7a0d16af"}, "downloads": -1, "filename": "django-articles-1.5.tar.gz", "has_sig": false, "md5_digest": "c3df31c39945690104e5cf727671fe86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18924, "upload_time": "2010-01-29T14:12:36", "upload_time_iso_8601": "2010-01-29T14:12:36.228684Z", "url": "https://files.pythonhosted.org/packages/d4/79/721879e7766bfffb1c9d85d7f6dfc5febd83f554c8f7a0d457cbe090fbee/django-articles-1.5.tar.gz", "yanked": false}], "1.6a": [{"comment_text": "", "digests": {"md5": "1d189932b16625c21bfe3921c1a2fe01", "sha256": "24658e7c7bc538bc0e75d17e928f8bafa7991fa4ef7d34d5c1eb82b2d225c4a4"}, "downloads": -1, "filename": "django-articles-1.6a.tar.gz", "has_sig": false, "md5_digest": "1d189932b16625c21bfe3921c1a2fe01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51925, "upload_time": "2010-01-29T20:00:26", "upload_time_iso_8601": "2010-01-29T20:00:26.087248Z", "url": "https://files.pythonhosted.org/packages/e4/fb/017487071c4dd506689a5f67a5125ff91204d5e48556caac7fdc97dab760/django-articles-1.6a.tar.gz", "yanked": false}], "1.8.1a": [{"comment_text": "", "digests": {"md5": "8f7ea0bf2b462e8693eda55022ce8258", "sha256": "266f703866fbb3189c5623c0e963995f1bff62399fe17da7f89b686debf8fe9d"}, "downloads": -1, "filename": "django-articles-1.8.1a.tar.gz", "has_sig": false, "md5_digest": "8f7ea0bf2b462e8693eda55022ce8258", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51355, "upload_time": "2010-04-19T21:45:30", "upload_time_iso_8601": "2010-04-19T21:45:30.624489Z", "url": "https://files.pythonhosted.org/packages/83/06/54f528bc2b0cf4f5939e8b9377607cedbd87614da1acde8be02e049a0e99/django-articles-1.8.1a.tar.gz", "yanked": false}], "1.8a": [{"comment_text": "", "digests": {"md5": "d490386ca4dd71b44281f3794b241c00", "sha256": "28f610322f014c867203024bbe3c3dd9307a735ddd72f5dfbac9ac33f8dabf83"}, "downloads": -1, "filename": "django-articles-1.8a.tar.gz", "has_sig": false, "md5_digest": "d490386ca4dd71b44281f3794b241c00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50742, "upload_time": "2010-04-19T21:14:31", "upload_time_iso_8601": "2010-04-19T21:14:31.739296Z", "url": "https://files.pythonhosted.org/packages/f9/58/d6e0afad9f5850d6a6c630d67a1a0025bf997187134ac74b32748b14615f/django-articles-1.8a.tar.gz", "yanked": false}], "1.9.1-pre": [{"comment_text": "", "digests": {"md5": "dc7603cba07d153f6522acdd04dd9051", "sha256": "6a40543475b9270f48ed6e2150c072524c6d5f303bc3db1f4415c251098fe928"}, "downloads": -1, "filename": "django-articles-1.9.1-pre.tar.gz", "has_sig": false, "md5_digest": "dc7603cba07d153f6522acdd04dd9051", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56092, "upload_time": "2010-05-19T06:19:37", "upload_time_iso_8601": "2010-05-19T06:19:37.615683Z", "url": "https://files.pythonhosted.org/packages/80/b5/1af8898620b795c13046466eb2de2a76a6a361a8bf7d931296fdfc8f1027/django-articles-1.9.1-pre.tar.gz", "yanked": false}], "1.9.2-pre": [{"comment_text": "", "digests": {"md5": "99737b5d40d0ce245547551d40f2abc0", "sha256": "dcde8e703022d33666bdd2a36ace3efed251f8f684c8538d4cbb56b05964c864"}, "downloads": -1, "filename": "django-articles-1.9.2-pre.tar.gz", "has_sig": false, "md5_digest": "99737b5d40d0ce245547551d40f2abc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56522, "upload_time": "2010-05-19T17:44:01", "upload_time_iso_8601": "2010-05-19T17:44:01.664776Z", "url": "https://files.pythonhosted.org/packages/18/21/b27cac063a3ea0247a723d0ad5d07a1af4f5c03745fcae73f56305045b5d/django-articles-1.9.2-pre.tar.gz", "yanked": false}], "1.9.2-pre2": [{"comment_text": "", "digests": {"md5": "def4b95b912dc90ac585c4af5b221f03", "sha256": "588e4793bdf04b3b1db24d9b38412bb1690b034bf9c5bab74c969d8832445edb"}, "downloads": -1, "filename": "django-articles-1.9.2-pre2.tar.gz", "has_sig": false, "md5_digest": "def4b95b912dc90ac585c4af5b221f03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56543, "upload_time": "2010-05-19T18:32:43", "upload_time_iso_8601": "2010-05-19T18:32:43.217837Z", "url": "https://files.pythonhosted.org/packages/ae/52/8de8a46848eea42903bde0702722bae92e53363b910f92a81299cf8e5873/django-articles-1.9.2-pre2.tar.gz", "yanked": false}], "1.9.3-pre1": [{"comment_text": "", "digests": {"md5": "e833b5feac3ba3aebef504e0003d9892", "sha256": "850f4432a892cda2801be65fcdc5fbd2cf43ebf97feba15aa11fe8e4845a7369"}, "downloads": -1, "filename": "django-articles-1.9.3-pre1.tar.gz", "has_sig": false, "md5_digest": "e833b5feac3ba3aebef504e0003d9892", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56514, "upload_time": "2010-05-19T19:24:04", "upload_time_iso_8601": "2010-05-19T19:24:04.719748Z", "url": "https://files.pythonhosted.org/packages/86/29/cc1c9d5d0e30423d11a6111b799950da16371cda07ab75e1acfdc8efbdd1/django-articles-1.9.3-pre1.tar.gz", "yanked": false}], "1.9.4-pre1": [{"comment_text": "", "digests": {"md5": "55c4944e7ce3a303c8be0cdd25c98107", "sha256": "0da883105edd0f9e170cd534fa6d75d4e1bcc0c819c48ac5e0240c10436e07b7"}, "downloads": -1, "filename": "django-articles-1.9.4-pre1.tar.gz", "has_sig": false, "md5_digest": "55c4944e7ce3a303c8be0cdd25c98107", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56597, "upload_time": "2010-05-21T17:53:19", "upload_time_iso_8601": "2010-05-21T17:53:19.261575Z", "url": "https://files.pythonhosted.org/packages/30/cb/aebfd396db2e89d3e2b8993ef98321a8776b159e7684d48a8cfbe254ba57/django-articles-1.9.4-pre1.tar.gz", "yanked": false}], "2.0.0-pre1": [{"comment_text": "", "digests": {"md5": "d49cec9439c32bc6c076b5e5bbbf532f", "sha256": "a60b664ed69afec12b004a5845192c8920229c8020fb6c8c9669677d2b4a121e"}, "downloads": -1, "filename": "django-articles-2.0.0-pre1.tar.gz", "has_sig": false, "md5_digest": "d49cec9439c32bc6c076b5e5bbbf532f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58812, "upload_time": "2010-05-26T18:32:38", "upload_time_iso_8601": "2010-05-26T18:32:38.422434Z", "url": "https://files.pythonhosted.org/packages/28/0a/807869ea511c3b4996dd834cf298374562c3bf20519a9e1ff934522432bd/django-articles-2.0.0-pre1.tar.gz", "yanked": false}], "2.0.0-pre2": [{"comment_text": "", "digests": {"md5": "664c97fb96c4db3bc1d0f472e3e3e922", "sha256": "e72077f260dd55785aff3bd6716a7a72eb37e4e4c529a2b5f4c56fb5b6b02ebe"}, "downloads": -1, "filename": "django-articles-2.0.0-pre2.tar.gz", "has_sig": false, "md5_digest": "664c97fb96c4db3bc1d0f472e3e3e922", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59049, "upload_time": "2010-05-26T21:40:38", "upload_time_iso_8601": "2010-05-26T21:40:38.661001Z", "url": "https://files.pythonhosted.org/packages/c4/4b/100d521b8cbe24b531b9dd90c2ce2dd9618bea904dcf551e457be1c20190/django-articles-2.0.0-pre2.tar.gz", "yanked": false}], "2.0.1-pre1": [{"comment_text": "", "digests": {"md5": "a74f1ae798093606a738b6fcd220aa6b", "sha256": "4558aa7122dd284b81997cfe1de9572bba219a8709cd8b64d9936deb0e4f6297"}, "downloads": -1, "filename": "django-articles-2.0.1-pre1.tar.gz", "has_sig": false, "md5_digest": "a74f1ae798093606a738b6fcd220aa6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59511, "upload_time": "2010-05-27T05:46:57", "upload_time_iso_8601": "2010-05-27T05:46:57.348299Z", "url": "https://files.pythonhosted.org/packages/c0/7f/ddf78e9911c3a3ea483b6529d04ad165093bdf98f34f7b9e491e23e684ef/django-articles-2.0.1-pre1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "616f4da5f08c86d53469b28ac83cef87", "sha256": "a22e035a96a62ad4088dc8bac4dda9d507ce91f38c8fd9a2d4437a59ad5782e3"}, "downloads": -1, "filename": "django-articles-2.0.2.tar.gz", "has_sig": false, "md5_digest": "616f4da5f08c86d53469b28ac83cef87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59499, "upload_time": "2010-06-21T22:54:36", "upload_time_iso_8601": "2010-06-21T22:54:36.116704Z", "url": "https://files.pythonhosted.org/packages/96/19/cbdeefd65901f6163c46221f10fca11399c1a6a241af8626af61a7ab30e0/django-articles-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "51a5d2aa441c2bd47cd08fc860341417", "sha256": "ffcd5db462c8642068d4341a9044fb189b861bcf7a01a18713bca7fa903f4254"}, "downloads": -1, "filename": "django-articles-2.0.3.tar.gz", "has_sig": false, "md5_digest": "51a5d2aa441c2bd47cd08fc860341417", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63714, "upload_time": "2010-08-28T04:25:59", "upload_time_iso_8601": "2010-08-28T04:25:59.158941Z", "url": "https://files.pythonhosted.org/packages/d8/6c/64eb338198d3b2b130cb4f66f218993e1d9e9316707b44b1fa46b2b31e64/django-articles-2.0.3.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "9d66dea19b8a7a8409e5cd9ba9364df2", "sha256": "4953f67c49df18577782c043bdd2592a46d5c158bf340c874425c40f7497fdfc"}, "downloads": -1, "filename": "django-articles-2.0.5.tar.gz", "has_sig": false, "md5_digest": "9d66dea19b8a7a8409e5cd9ba9364df2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64043, "upload_time": "2010-09-21T23:12:54", "upload_time_iso_8601": "2010-09-21T23:12:54.439302Z", "url": "https://files.pythonhosted.org/packages/d1/d3/79aca153aedc8c82ab1da526f39df31f1ca566ab771a5ac2be46f781527b/django-articles-2.0.5.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "43963d63b3355f40494cca035e0282e9", "sha256": "305df4b9d85ae9e595a364184811ee2b9968d0b8582f30b339838874c33a84c1"}, "downloads": -1, "filename": "django-articles-2.0.6.tar.gz", "has_sig": false, "md5_digest": "43963d63b3355f40494cca035e0282e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63942, "upload_time": "2010-10-02T00:15:55", "upload_time_iso_8601": "2010-10-02T00:15:55.655494Z", "url": "https://files.pythonhosted.org/packages/e2/b0/cfd86a168b69e2a8f46f9873fe7b08e2098bf49534934ebecf33d0d7b955/django-articles-2.0.6.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "9cf5fbfdad328c1776c2ca1651a8f5a9", "sha256": "8dd01df341612cb82295fef94d16659b8ab8d5c6463a88ef636a68bcfbadb374"}, "downloads": -1, "filename": "django-articles-2.1.0.tar.gz", "has_sig": false, "md5_digest": "9cf5fbfdad328c1776c2ca1651a8f5a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64297, "upload_time": "2010-11-11T07:59:35", "upload_time_iso_8601": "2010-11-11T07:59:35.929825Z", "url": "https://files.pythonhosted.org/packages/d9/35/2a977443a04f5d2d9f17401ad08ed2e565dea3e385b2782ad75fb2ea7b1c/django-articles-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "b19570df9612e54dbb894c13c5c71937", "sha256": "8bd7ff5fad13240f767730b9355aade44e9ac7cc2414efc2e24f5e2e6273c644"}, "downloads": -1, "filename": "django-articles-2.1.1.tar.gz", "has_sig": false, "md5_digest": "b19570df9612e54dbb894c13c5c71937", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64403, "upload_time": "2010-11-11T08:36:24", "upload_time_iso_8601": "2010-11-11T08:36:24.350636Z", "url": "https://files.pythonhosted.org/packages/41/1c/11cdfea1e79420543e7e47ff7ec683588edef0728a30b0058955f2915341/django-articles-2.1.1.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "5a7dd69957e3f36b6a0e7a758315cca2", "sha256": "dbc68ff377f40f82d542201156261d5d22b769d3c3d1d20af220c6a05039d285"}, "downloads": -1, "filename": "django-articles-2.4.0.tar.gz", "has_sig": false, "md5_digest": "5a7dd69957e3f36b6a0e7a758315cca2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69890, "upload_time": "2011-09-24T21:44:51", "upload_time_iso_8601": "2011-09-24T21:44:51.788558Z", "url": "https://files.pythonhosted.org/packages/2b/25/13bf6c9544eaf2b7982671c82dd6a32663e8559f22e8916659d0e68ba043/django-articles-2.4.0.tar.gz", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "df363f0ac79091910b8b2b2ee0480760", "sha256": "1d85ce2703114da364f8508583ec523ab6fd54f16121df723903f4a71ac0f00d"}, "downloads": -1, "filename": "django-articles-2.4.1.tar.gz", "has_sig": false, "md5_digest": "df363f0ac79091910b8b2b2ee0480760", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74756, "upload_time": "2011-09-24T22:01:20", "upload_time_iso_8601": "2011-09-24T22:01:20.817860Z", "url": "https://files.pythonhosted.org/packages/02/d9/3ff60ae4e4366fdd40ffee461ca8d51e93cccd9b7f47c8dd40b37b0cce74/django-articles-2.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df363f0ac79091910b8b2b2ee0480760", "sha256": "1d85ce2703114da364f8508583ec523ab6fd54f16121df723903f4a71ac0f00d"}, "downloads": -1, "filename": "django-articles-2.4.1.tar.gz", "has_sig": false, "md5_digest": "df363f0ac79091910b8b2b2ee0480760", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74756, "upload_time": "2011-09-24T22:01:20", "upload_time_iso_8601": "2011-09-24T22:01:20.817860Z", "url": "https://files.pythonhosted.org/packages/02/d9/3ff60ae4e4366fdd40ffee461ca8d51e93cccd9b7f47c8dd40b37b0cce74/django-articles-2.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:37 2020"}