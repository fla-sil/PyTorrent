{"info": {"author": "y19818", "author_email": "y19818@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Web3.py\n\n[![Join the chat at https://gitter.im/vnscoin/web3.py](https://badges.gitter.im/vnscoin/web3.py.svg)](https://gitter.im/vnscoin/web3.py?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://circleci.com/gh/vnscoin/web3.py.svg?style=shield)](https://circleci.com/gh/vnscoin/web3.py)\n\n\nA Python implementation of [web3.js](https://github.com/vnscoin/web3.js)\n\n* Python 3.6+ support\n\n## Developer Setup\n\n```sh# Web3.py\n\n[![Join the chat at https://gitter.im/vnscoin/web3.py](https://badges.gitter.im/vnscoin/web3.py.svg)](https://gitter.im/vnscoin/web3.py?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://circleci.com/gh/vnscoin/web3.py.svg?style=shield)](https://circleci.com/gh/vnscoin/web3.py)\n\n\nA Python implementation of [web3.js](https://github.com/vnscoin/web3.js)\n\n* Python 3.6+ support\n\n## Developer Setup\n\n```sh\ngit clone git@github.com:vnscoin/web3.py.git\ncd web3.py\n```\n\nPlease see OS-specific instructions for:\n\n- [Linux](docs/README-linux.md#Developer-Setup)\n- [Mac](docs/README-osx.md#Developer-Setup)\n- [Windows](docs/README-windows.md#Developer-Setup)\n\nThen run these install commands:\n```sh\nvirtualenv venv\n. venv/bin/activate\npip install -e .[dev]\n```\n\nFor different environments, you can set up multiple `virtualenv`. For example, if you want to create a `venvdocs`, then you do the following:\n\n```sh\nvirtualenv venvdocs\n. venvdocs/bin/activate\npip install -e .[docs]\npip install -e .\n```\n\n\n\n#### How to Execute the Tests?\n\n1. [Setup your development environment](https://github.com/vnscoin/web3.py/#developer-setup).\n\n2. Execute `tox` for the tests\n\nThere are multiple [components](https://github.com/vnscoin/web3.py/blob/master/.circleci/config.yml#L144) of the tests. You can run test to against specific component. For example:\n\n```sh\n# Run Tests for the Core component (for Python 3.6):\ntox -e py36-core\n\n# Run Tests for the Core component (for Python 3.7):\ntox -e py37-core\n```\n\nIf for some reason it is not working, add `--recreate` params.\n\n`tox` is good for testing against the full set of build targets. But if you want to run the tests individually, `pytest` is better for development workflow. For example, to run only the tests in one file:\n\n```sh\npytest tests/core/gas-strategies/test_time_based_gas_price_strategy.py\n```\n\n### Release setup\n\nFor Debian-like systems:\n```\napt install pandoc\n```\n\nTo release a new version:\n\n```sh\nmake release bump=$$VERSION_PART_TO_BUMP$$\n```\n\nTo preview the upcoming release notes:\n\n```sh\ntowncrier --draft\n```\n\n#### How to bumpversion\n\nThe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=devnum`.\n\nIf you are in a beta version, `make release bump=stage` will switch to a stable.\n\nTo issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `make release bump=\"--new-version 4.0.0-alpha.1 devnum\"`\n\ngit clone git@github.com:vnscoin/web3.py.git\ncd web3.py\n```\n\nPlease see OS-specific instructions for:\n\n- [Linux](docs/README-linux.md#Developer-Setup)\n- [Mac](docs/README-osx.md#Developer-Setup)\n- [Windows](docs/README-windows.md#Developer-Setup)\nThen run these install commands:\n\n```sh\nvirtualenv venv\n. venv/bin/activate\npip install -e .[dev]\n```\n\nFor different environments, you can set up multiple `virtualenv`. For example, if you want to create a `venvdocs`, then you do the following:\n\n```sh\nvirtualenv venvdocs\n. venvdocs/bin/activate\npip install -e .[docs]\npip install -e .\n```\n\n\n\n#### How to Execute the Tests?\n\n1. [Setup your development environment](https://github.com/vnscoin/web3.py/#developer-setup).\n\n2. Execute `tox` for the tests\n\nThere are multiple [components](https://github.com/vnscoin/web3.py/blob/master/.circleci/config.yml#L144) of the tests. You can run test to against specific component. For example:\n\n```sh\n# Run Tests for the Core component (for Python 3.6):\ntox -e py36-core\n\n# Run Tests for the Core component (for Python 3.7):\ntox -e py37-core\n```\n\nIf for some reason it is not working, add `--recreate` params.\n\n`tox` is good for testing against the full set of build targets. But if you want to run the tests individually, `pytest` is better for development workflow. For example, to run only the tests in one file:\n\n```sh\npytest tests/core/gas-strategies/test_time_based_gas_price_strategy.py\n```\n\n### Release setup\n\nFor Debian-like systems:\n```\napt install pandoc\n```\n\nTo release a new version:\n\n```sh\nmake release bump=$$VERSION_PART_TO_BUMP$$\n```\n\nTo preview the upcoming release notes:\n\n```sh\ntowncrier --draft\n```\n\n#### How to bumpversion\n\nThe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=devnum`.\n\nIf you are in a beta version, `make release bump=stage` will switch to a stable.\n\nTo issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `make release bump=\"--new-version 4.0.0-alpha.1 devnum\"`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/y19818/vns_web3.py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "vns-web3", "package_url": "https://pypi.org/project/vns-web3/", "platform": "", "project_url": "https://pypi.org/project/vns-web3/", "project_urls": {"Homepage": "https://github.com/y19818/vns_web3.py"}, "release_url": "https://pypi.org/project/vns-web3/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "vns web3.pyl", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Web3.py</h1>\n<p><a href=\"https://gitter.im/vnscoin/web3.py?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/vnscoin/web3.py\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6b053f37e5b98f21e6275f33b79c171ea39ed2a/68747470733a2f2f6261646765732e6769747465722e696d2f766e73636f696e2f776562332e70792e737667\"></a></p>\n<p><a href=\"https://circleci.com/gh/vnscoin/web3.py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db85be43067d5aa1068bcd3bfdb4d70b94231210/68747470733a2f2f636972636c6563692e636f6d2f67682f766e73636f696e2f776562332e70792e7376673f7374796c653d736869656c64\"></a></p>\n<p>A Python implementation of <a href=\"https://github.com/vnscoin/web3.js\" rel=\"nofollow\">web3.js</a></p>\n<ul>\n<li>Python 3.6+ support</li>\n</ul>\n<h2>Developer Setup</h2>\n<pre>[![Join the chat at https://gitter.im/vnscoin/web3.py](https://badges.gitter.im/vnscoin/web3.py.svg)](https://gitter.im/vnscoin/web3.py?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)\n\n[![Build Status](https://circleci.com/gh/vnscoin/web3.py.svg?style=shield)](https://circleci.com/gh/vnscoin/web3.py)\n\n\nA Python implementation of [web3.js](https://github.com/vnscoin/web3.js)\n\n* Python 3.6+ support\n\n## Developer Setup\n\n```sh\ngit clone git@github.com:vnscoin/web3.py.git\ncd web3.py\n</pre>\n<p>Please see OS-specific instructions for:</p>\n<ul>\n<li><a href=\"docs/README-linux.md#Developer-Setup\" rel=\"nofollow\">Linux</a></li>\n<li><a href=\"docs/README-osx.md#Developer-Setup\" rel=\"nofollow\">Mac</a></li>\n<li><a href=\"docs/README-windows.md#Developer-Setup\" rel=\"nofollow\">Windows</a></li>\n</ul>\n<p>Then run these install commands:</p>\n<pre>virtualenv venv\n. venv/bin/activate\npip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>For different environments, you can set up multiple <code>virtualenv</code>. For example, if you want to create a <code>venvdocs</code>, then you do the following:</p>\n<pre>virtualenv venvdocs\n. venvdocs/bin/activate\npip install -e .<span class=\"o\">[</span>docs<span class=\"o\">]</span>\npip install -e .\n</pre>\n<h4>How to Execute the Tests?</h4>\n<ol>\n<li>\n<p><a href=\"https://github.com/vnscoin/web3.py/#developer-setup\" rel=\"nofollow\">Setup your development environment</a>.</p>\n</li>\n<li>\n<p>Execute <code>tox</code> for the tests</p>\n</li>\n</ol>\n<p>There are multiple <a href=\"https://github.com/vnscoin/web3.py/blob/master/.circleci/config.yml#L144\" rel=\"nofollow\">components</a> of the tests. You can run test to against specific component. For example:</p>\n<pre><span class=\"c1\"># Run Tests for the Core component (for Python 3.6):</span>\ntox -e py36-core\n\n<span class=\"c1\"># Run Tests for the Core component (for Python 3.7):</span>\ntox -e py37-core\n</pre>\n<p>If for some reason it is not working, add <code>--recreate</code> params.</p>\n<p><code>tox</code> is good for testing against the full set of build targets. But if you want to run the tests individually, <code>pytest</code> is better for development workflow. For example, to run only the tests in one file:</p>\n<pre>pytest tests/core/gas-strategies/test_time_based_gas_price_strategy.py\n</pre>\n<h3>Release setup</h3>\n<p>For Debian-like systems:</p>\n<pre><code>apt install pandoc\n</code></pre>\n<p>To release a new version:</p>\n<pre>make release <span class=\"nv\">bump</span><span class=\"o\">=</span><span class=\"nv\">$$</span>VERSION_PART_TO_BUMP<span class=\"nv\">$$</span>\n</pre>\n<p>To preview the upcoming release notes:</p>\n<pre>towncrier --draft\n</pre>\n<h4>How to bumpversion</h4>\n<p>The version format for this repo is <code>{major}.{minor}.{patch}</code> for stable, and\n<code>{major}.{minor}.{patch}-{stage}.{devnum}</code> for unstable (<code>stage</code> can be alpha or beta).</p>\n<p>To issue the next version in line, specify which part to bump,\nlike <code>make release bump=minor</code> or <code>make release bump=devnum</code>.</p>\n<p>If you are in a beta version, <code>make release bump=stage</code> will switch to a stable.</p>\n<p>To issue an unstable version when the current version is stable, specify the\nnew version explicitly, like <code>make release bump=\"--new-version 4.0.0-alpha.1 devnum\"</code></p>\n<p>git clone <a href=\"mailto:git@github.com\">git@github.com</a>:vnscoin/web3.py.git\ncd web3.py</p>\n<pre><code>\nPlease see OS-specific instructions for:\n\n- [Linux](docs/README-linux.md#Developer-Setup)\n- [Mac](docs/README-osx.md#Developer-Setup)\n- [Windows](docs/README-windows.md#Developer-Setup)\nThen run these install commands:\n\n```sh\nvirtualenv venv\n. venv/bin/activate\npip install -e .[dev]\n</code></pre>\n<p>For different environments, you can set up multiple <code>virtualenv</code>. For example, if you want to create a <code>venvdocs</code>, then you do the following:</p>\n<pre>virtualenv venvdocs\n. venvdocs/bin/activate\npip install -e .<span class=\"o\">[</span>docs<span class=\"o\">]</span>\npip install -e .\n</pre>\n<h4>How to Execute the Tests?</h4>\n<ol>\n<li>\n<p><a href=\"https://github.com/vnscoin/web3.py/#developer-setup\" rel=\"nofollow\">Setup your development environment</a>.</p>\n</li>\n<li>\n<p>Execute <code>tox</code> for the tests</p>\n</li>\n</ol>\n<p>There are multiple <a href=\"https://github.com/vnscoin/web3.py/blob/master/.circleci/config.yml#L144\" rel=\"nofollow\">components</a> of the tests. You can run test to against specific component. For example:</p>\n<pre><span class=\"c1\"># Run Tests for the Core component (for Python 3.6):</span>\ntox -e py36-core\n\n<span class=\"c1\"># Run Tests for the Core component (for Python 3.7):</span>\ntox -e py37-core\n</pre>\n<p>If for some reason it is not working, add <code>--recreate</code> params.</p>\n<p><code>tox</code> is good for testing against the full set of build targets. But if you want to run the tests individually, <code>pytest</code> is better for development workflow. For example, to run only the tests in one file:</p>\n<pre>pytest tests/core/gas-strategies/test_time_based_gas_price_strategy.py\n</pre>\n<h3>Release setup</h3>\n<p>For Debian-like systems:</p>\n<pre><code>apt install pandoc\n</code></pre>\n<p>To release a new version:</p>\n<pre>make release <span class=\"nv\">bump</span><span class=\"o\">=</span><span class=\"nv\">$$</span>VERSION_PART_TO_BUMP<span class=\"nv\">$$</span>\n</pre>\n<p>To preview the upcoming release notes:</p>\n<pre>towncrier --draft\n</pre>\n<h4>How to bumpversion</h4>\n<p>The version format for this repo is <code>{major}.{minor}.{patch}</code> for stable, and\n<code>{major}.{minor}.{patch}-{stage}.{devnum}</code> for unstable (<code>stage</code> can be alpha or beta).</p>\n<p>To issue the next version in line, specify which part to bump,\nlike <code>make release bump=minor</code> or <code>make release bump=devnum</code>.</p>\n<p>If you are in a beta version, <code>make release bump=stage</code> will switch to a stable.</p>\n<p>To issue an unstable version when the current version is stable, specify the\nnew version explicitly, like <code>make release bump=\"--new-version 4.0.0-alpha.1 devnum\"</code></p>\n\n          </div>"}, "last_serial": 6354515, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6b476380d519df34cd2e71be82c1032c", "sha256": "abe72dd3fb37ecb867ad4027a3db83d8c740256e6a98225d3fd57379b1c59df7"}, "downloads": -1, "filename": "vns_web3-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6b476380d519df34cd2e71be82c1032c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179635, "upload_time": "2019-12-24T08:51:01", "upload_time_iso_8601": "2019-12-24T08:51:01.172676Z", "url": "https://files.pythonhosted.org/packages/d4/b2/3c3c55ce8d5cbaa0e09937e6539bbe92a39ab4c7e340f61eaee9c407c1e8/vns_web3-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8aa48e7967f37d2968485a93892888e8", "sha256": "350a9fdcf6ba2200e765eb9f50fe78696856a414bec1a5a78d90251ae10e9843"}, "downloads": -1, "filename": "vns_web3-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8aa48e7967f37d2968485a93892888e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 182285, "upload_time": "2019-12-24T09:21:27", "upload_time_iso_8601": "2019-12-24T09:21:27.635384Z", "url": "https://files.pythonhosted.org/packages/34/97/663a8f059ba2abb58d1ac079c4b16cb83fb2d2b1399484ac8567fc91ba91/vns_web3-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8aa48e7967f37d2968485a93892888e8", "sha256": "350a9fdcf6ba2200e765eb9f50fe78696856a414bec1a5a78d90251ae10e9843"}, "downloads": -1, "filename": "vns_web3-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8aa48e7967f37d2968485a93892888e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 182285, "upload_time": "2019-12-24T09:21:27", "upload_time_iso_8601": "2019-12-24T09:21:27.635384Z", "url": "https://files.pythonhosted.org/packages/34/97/663a8f059ba2abb58d1ac079c4b16cb83fb2d2b1399484ac8567fc91ba91/vns_web3-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:39 2020"}