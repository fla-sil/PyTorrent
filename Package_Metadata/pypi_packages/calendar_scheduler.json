{"info": {"author": "Partha Saradhi Konda", "author_email": "parthasaradhi1992@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# calendar_scheduler\nGoogle like calendar scheduler. Finding eta with given parameters is bit of challenging. I found a pattern here and made it as a package.\n\n# Installation\n\n    pip3 install calendar_scheduler\n\n# Usage\nThere are two types of schedulers that you can use of.<br>\n### 1. Date Specific<br >\nYou can specify single or multiple dates to get the eta referenced to current datetime\n\n\n    from scheduler import Scheduler\n\n    scheduler = Scheduler()\n\n    payload = {\n        \"schedule_type\": \"date_specific\",\n        \"timezone\": \"<valid_timezone>\",\n        \"schedules\": [\n            {\n                \"start_date\": \"<mm/dd/yyyy>*\",\n                \"start_time\": \"<HH:MM AM/PM>*\"\n            }\n        ]\n    }\n    eta = scheduler.get_next_eta(schedule_data=payload)\n    # This will return UTC converted eta (datetime obj)\n    # You can specify multiple dates\n\n### 2. Recurring using `cron`\nYou can specify a cron to get next eta with respect to current datetime and also you can specify the base datetime.\n\n    from scheduler import Scheduler\n\n    scheduler = Scheduler()\n\n    payload = {\n        \"schedule_type\": \"cron\",\n        \"timezone\": \"<valid_timezone>\",\n        \"start_date\": \"<mm/dd/yyyy>*\",\n        \"start_time\": \"<HH:MM AM/PM>*\",\n        \"end_date\": \"[<mm/dd/yyyy>]\",\n        \"end_time\": \"[<HH:MM AM/PM>]\",\n        \"cron\": \"<cron expression>\"\n    }\n    eta = scheduler.get_next_eta(schedule_data=payload)\n    # This will return UTC converted eta (datetime obj)\n\n# Unit Tests\n\n    python3 -m unittest discover scheduler.tests\n\n# Coverage\n\n    coverage run -m unittest discover scheduler.tests\n    coverage report\n\n# Cron generator\nhttps://www.npmjs.com/package/cron-builder\n\n# Thanks\nhttps://github.com/kiorky/croniter\n\n# How to contribute\n\n- Submit a PR, welcome for feedback\n\nNote: I've been using package from so long and it is in production. \n\n# Author\nPartha saradhi Konda <parthasaradhi1992@gmail.com>", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/parthakonda/calendar_scheduler", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "calendar_scheduler", "package_url": "https://pypi.org/project/calendar_scheduler/", "platform": "", "project_url": "https://pypi.org/project/calendar_scheduler/", "project_urls": {"Homepage": "https://github.com/parthakonda/calendar_scheduler"}, "release_url": "https://pypi.org/project/calendar_scheduler/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Scheduler program", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            # calendar_scheduler<br>Google like calendar scheduler. Finding eta with given parameters is bit of challenging. I found a pattern here and made it as a package.<br><br># Installation<br><br>    pip3 install calendar_scheduler<br><br># Usage<br>There are two types of schedulers that you can use of.&lt;br&gt;<br>### 1. Date Specific&lt;br &gt;<br>You can specify single or multiple dates to get the eta referenced to current datetime<br><br><br>    from scheduler import Scheduler<br><br>    scheduler = Scheduler()<br><br>    payload = {<br>        \"schedule_type\": \"date_specific\",<br>        \"timezone\": \"&lt;valid_timezone&gt;\",<br>        \"schedules\": [<br>            {<br>                \"start_date\": \"&lt;mm/dd/yyyy&gt;*\",<br>                \"start_time\": \"&lt;HH:MM AM/PM&gt;*\"<br>            }<br>        ]<br>    }<br>    eta = scheduler.get_next_eta(schedule_data=payload)<br>    # This will return UTC converted eta (datetime obj)<br>    # You can specify multiple dates<br><br>### 2. Recurring using `cron`<br>You can specify a cron to get next eta with respect to current datetime and also you can specify the base datetime.<br><br>    from scheduler import Scheduler<br><br>    scheduler = Scheduler()<br><br>    payload = {<br>        \"schedule_type\": \"cron\",<br>        \"timezone\": \"&lt;valid_timezone&gt;\",<br>        \"start_date\": \"&lt;mm/dd/yyyy&gt;*\",<br>        \"start_time\": \"&lt;HH:MM AM/PM&gt;*\",<br>        \"end_date\": \"[&lt;mm/dd/yyyy&gt;]\",<br>        \"end_time\": \"[&lt;HH:MM AM/PM&gt;]\",<br>        \"cron\": \"&lt;cron expression&gt;\"<br>    }<br>    eta = scheduler.get_next_eta(schedule_data=payload)<br>    # This will return UTC converted eta (datetime obj)<br><br># Unit Tests<br><br>    python3 -m unittest discover scheduler.tests<br><br># Coverage<br><br>    coverage run -m unittest discover scheduler.tests<br>    coverage report<br><br># Cron generator<br>https://www.npmjs.com/package/cron-builder<br><br># Thanks<br>https://github.com/kiorky/croniter<br><br># How to contribute<br><br>- Submit a PR, welcome for feedback<br><br>Note: I've been using package from so long and it is in production. <br><br># Author<br>Partha saradhi Konda &lt;parthasaradhi1992@gmail.com&gt;\n          </div>"}, "last_serial": 4921900, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a10a0b60f8227d2cd095f57b36d4f855", "sha256": "66088fc5dcf2ef392ad73f1a2dddb09908b4fa6c68cdc99c953d01357a822d43"}, "downloads": -1, "filename": "calendar_scheduler-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a10a0b60f8227d2cd095f57b36d4f855", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7526, "upload_time": "2019-03-10T14:15:04", "upload_time_iso_8601": "2019-03-10T14:15:04.754792Z", "url": "https://files.pythonhosted.org/packages/af/c9/9fa91b2e8d9c081a59adb181e08306905e95dc571406c81ced2125dd5f29/calendar_scheduler-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "35a21fe91b4c4cdeed3c862424de87ec", "sha256": "922d8b9cfef3476c8de81af331b364bee0ccb4b565bc3950c81ef892c65da4ca"}, "downloads": -1, "filename": "calendar_scheduler-0.0.2.tar.gz", "has_sig": false, "md5_digest": "35a21fe91b4c4cdeed3c862424de87ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8948, "upload_time": "2019-03-10T16:21:34", "upload_time_iso_8601": "2019-03-10T16:21:34.454175Z", "url": "https://files.pythonhosted.org/packages/70/3e/e117aa20b8f7ceac7612177780b0e5a7807936bdf64f956636c6a8688594/calendar_scheduler-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35a21fe91b4c4cdeed3c862424de87ec", "sha256": "922d8b9cfef3476c8de81af331b364bee0ccb4b565bc3950c81ef892c65da4ca"}, "downloads": -1, "filename": "calendar_scheduler-0.0.2.tar.gz", "has_sig": false, "md5_digest": "35a21fe91b4c4cdeed3c862424de87ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8948, "upload_time": "2019-03-10T16:21:34", "upload_time_iso_8601": "2019-03-10T16:21:34.454175Z", "url": "https://files.pythonhosted.org/packages/70/3e/e117aa20b8f7ceac7612177780b0e5a7807936bdf64f956636c6a8688594/calendar_scheduler-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:38 2020"}