{"info": {"author": "Michael F Bryan", "author_email": "michaelfbryan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "=================\r\nFlask API Builder\r\n=================\r\n\r\nA really simple app that allows you to write out your RESTful APIs spec in a\r\nlogical form and automatically generate stub functions for each endpoint.\r\n\r\n\r\nInstalling\r\n==========\r\n\r\nInstall from Source\r\n-------------------\r\n\r\nTo install from source, you will need to first clone the repository from\r\nGitHub::\r\n\r\n    git clone https://github.com/Michael-F-Bryan/flask_api_builder.git\r\n\r\nThen run the `setup.py` file::\r\n\r\n    python3 setup.py install\r\n\r\n\r\nWith Pip\r\n--------\r\n\r\nOr you can install directly from the Python Packaging Index::\r\n\r\n    pip install flask_api_builder\r\n\r\n\r\nUsage\r\n=====\r\n\r\nIn order to generate your base API, you first need to write up a spec for it.\r\nThe spec contains the definitions for each of your API's end points, as well as\r\nsome variables to customize the Blueprint each API endpoint is attached to.\r\n\r\n\r\nWriting The Spec File\r\n---------------------\r\n\r\nThe spec file is designed to be quite intuitive to use. It is set out in a\r\ntable-like format, with each column being aligned with spaces. Any line\r\nstarting with a \"#\" is interpreted as a comment and ignored by the parser.\r\n\r\n\r\nDefining Variables\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nDefining variables is really easy, just add a line with `variable-name: value`.\r\nThe variable names currently supported are:\r\n\r\nBlueprint-name\r\n    The name for your blueprint (defaults to \"api\")\r\nPrepend-with\r\n    The path that all endpoints attached to your API Blueprint are prepended\r\n    with (nothing by default)\r\nError-handlers\r\n    Add pre-made 404 and 500 error handlers. They will be included unless\r\n    something other than true, yes, 1, or y is entered (not case sensitive)\r\n\r\nAll variable names are **not case sensitive**.\r\n\r\n\r\nDefining Endpoints\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nAPI Endpoints are defined one per line, in a table-like format. Each line\r\nconsists of 3 or 4 fields delimited by two or more whitespace characters. This\r\nmeans that you need to separate your columns by **at least** two spaces so the\r\nparser will read them correctly.\r\n\r\nThe fields correspond to an endpoint's METHOD, URL, DESCRIPTION and\r\n(optionally) the NAME of the function generated. If no name is provided then\r\none will be generated for you given the method and URL parameters (no\r\nguarantees that the generated name will be intelligible though).\r\n\r\n\r\nHere is an example of a simple spec for a to-do list app::\r\n\r\n    blueprint-name: api\r\n    #Method    URL                       Description\r\n    GET       /tasks                     Retrieve list of tasks\r\n    GET       /tasks/<int:task_id>       Retrieve task number <task_id>\r\n    POST      /tasks                     Create a new task\r\n\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n[Unreleased]\r\n------------\r\n\r\nNew Features\r\n~~~~~~~~~~~~\r\n\r\n-  Added error handlers to the generated code\r\n\r\nVersion 0.1.1 (2016-44-23)\r\n--------------------------\r\n\r\nNew Features\r\n~~~~~~~~~~~~\r\n\r\n-  Added a commandline option to view an example spec\r\n-  Turned the module into a package and gave it a commandline entry\r\n   point\r\n\r\nDocumentation Changes\r\n~~~~~~~~~~~~~~~~~~~~~\r\n\r\n-  Wrote up a basic README\r\n-  Added an example spec file\r\n\r\nAdministration and Chores\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n-  Added a makefile to automate the boring stuff\r\n-  Turned the module into a package with a **main**.py file\r\n-  Added the ability to create sdist's and wheels properly\r\n\r\n\r\nVersion 0.1.0 (2016-05-22)\r\n--------------------------\r\n\r\nNew Features\r\n~~~~~~~~~~~~\r\n\r\n-  Copied the main file from a jupyter notebook and set up the project", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Michael-F-Bryan/flask_api_builder", "keywords": "", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "flask_api_builder", "package_url": "https://pypi.org/project/flask_api_builder/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/flask_api_builder/", "project_urls": {"Homepage": "https://github.com/Michael-F-Bryan/flask_api_builder"}, "release_url": "https://pypi.org/project/flask_api_builder/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "A shortcut for stubbing out your RESTful Flask APIs", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A really simple app that allows you to write out your RESTful APIs spec in a\nlogical form and automatically generate stub functions for each endpoint.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<div id=\"install-from-source\">\n<h3>Install from Source</h3>\n<p>To install from source, you will need to first clone the repository from\nGitHub:</p>\n<pre>git clone https://github.com/Michael-F-Bryan/flask_api_builder.git\n</pre>\n<p>Then run the <cite>setup.py</cite> file:</p>\n<pre>python3 setup.py install\n</pre>\n</div>\n<div id=\"with-pip\">\n<h3>With Pip</h3>\n<p>Or you can install directly from the Python Packaging Index:</p>\n<pre>pip install flask_api_builder\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In order to generate your base API, you first need to write up a spec for it.\nThe spec contains the definitions for each of your API\u2019s end points, as well as\nsome variables to customize the Blueprint each API endpoint is attached to.</p>\n<div id=\"writing-the-spec-file\">\n<h3>Writing The Spec File</h3>\n<p>The spec file is designed to be quite intuitive to use. It is set out in a\ntable-like format, with each column being aligned with spaces. Any line\nstarting with a \u201c#\u201d is interpreted as a comment and ignored by the parser.</p>\n<div id=\"defining-variables\">\n<h4>Defining Variables</h4>\n<p>Defining variables is really easy, just add a line with <cite>variable-name: value</cite>.\nThe variable names currently supported are:</p>\n<dl>\n<dt>Blueprint-name</dt>\n<dd>The name for your blueprint (defaults to \u201capi\u201d)</dd>\n<dt>Prepend-with</dt>\n<dd>The path that all endpoints attached to your API Blueprint are prepended\nwith (nothing by default)</dd>\n<dt>Error-handlers</dt>\n<dd>Add pre-made 404 and 500 error handlers. They will be included unless\nsomething other than true, yes, 1, or y is entered (not case sensitive)</dd>\n</dl>\n<p>All variable names are <strong>not case sensitive</strong>.</p>\n</div>\n<div id=\"defining-endpoints\">\n<h4>Defining Endpoints</h4>\n<p>API Endpoints are defined one per line, in a table-like format. Each line\nconsists of 3 or 4 fields delimited by two or more whitespace characters. This\nmeans that you need to separate your columns by <strong>at least</strong> two spaces so the\nparser will read them correctly.</p>\n<p>The fields correspond to an endpoint\u2019s METHOD, URL, DESCRIPTION and\n(optionally) the NAME of the function generated. If no name is provided then\none will be generated for you given the method and URL parameters (no\nguarantees that the generated name will be intelligible though).</p>\n<p>Here is an example of a simple spec for a to-do list app:</p>\n<pre>blueprint-name: api\n#Method    URL                       Description\nGET       /tasks                     Retrieve list of tasks\nGET       /tasks/&lt;int:task_id&gt;       Retrieve task number &lt;task_id&gt;\nPOST      /tasks                     Create a new task\n</pre>\n</div>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"unreleased\">\n<h3>[Unreleased]</h3>\n<h3 id=\"new-features\"><span class=\"section-subtitle\">New Features</span></h3>\n<ul>\n<li>Added error handlers to the generated code</li>\n</ul>\n</div>\n<div id=\"version-0-1-1-2016-44-23\">\n<h3>Version 0.1.1 (2016-44-23)</h3>\n<div id=\"id1\">\n<h4>New Features</h4>\n<ul>\n<li>Added a commandline option to view an example spec</li>\n<li>Turned the module into a package and gave it a commandline entry\npoint</li>\n</ul>\n</div>\n<div id=\"documentation-changes\">\n<h4>Documentation Changes</h4>\n<ul>\n<li>Wrote up a basic README</li>\n<li>Added an example spec file</li>\n</ul>\n</div>\n<div id=\"administration-and-chores\">\n<h4>Administration and Chores</h4>\n<ul>\n<li>Added a makefile to automate the boring stuff</li>\n<li>Turned the module into a package with a <strong>main</strong>.py file</li>\n<li>Added the ability to create sdist\u2019s and wheels properly</li>\n</ul>\n</div>\n</div>\n<div id=\"version-0-1-0-2016-05-22\">\n<h3>Version 0.1.0 (2016-05-22)</h3>\n<h3 id=\"id2\"><span class=\"section-subtitle\">New Features</span></h3>\n<ul>\n<li>Copied the main file from a jupyter notebook and set up the project</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2238523, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "30c717b665f9870af614f3188a9ddec9", "sha256": "70567395095906ea0463f08e1403c6768be6929c1245f6b8ae0d0eee2fcf5c59"}, "downloads": -1, "filename": "flask_api_builder-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "30c717b665f9870af614f3188a9ddec9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10056, "upload_time": "2016-07-22T17:37:41", "upload_time_iso_8601": "2016-07-22T17:37:41.481702Z", "url": "https://files.pythonhosted.org/packages/14/8d/3c6f5c246e58c3e0c06c3e72d6e9e0a7eadbabc8122fd81c6fcf7b7abb8c/flask_api_builder-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c49e25c44a4042e37040191563fc83c", "sha256": "501c497432e08d860df01a421695be280e7ccb7f11d8a678df29d3373fc8c085"}, "downloads": -1, "filename": "flask_api_builder-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6c49e25c44a4042e37040191563fc83c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7593, "upload_time": "2016-07-22T17:37:44", "upload_time_iso_8601": "2016-07-22T17:37:44.230376Z", "url": "https://files.pythonhosted.org/packages/40/a2/a7b2a296c6643ee6af4a805840f1e2a1dd207ea5bef2e43795092c1a9302/flask_api_builder-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "30c717b665f9870af614f3188a9ddec9", "sha256": "70567395095906ea0463f08e1403c6768be6929c1245f6b8ae0d0eee2fcf5c59"}, "downloads": -1, "filename": "flask_api_builder-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "30c717b665f9870af614f3188a9ddec9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10056, "upload_time": "2016-07-22T17:37:41", "upload_time_iso_8601": "2016-07-22T17:37:41.481702Z", "url": "https://files.pythonhosted.org/packages/14/8d/3c6f5c246e58c3e0c06c3e72d6e9e0a7eadbabc8122fd81c6fcf7b7abb8c/flask_api_builder-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c49e25c44a4042e37040191563fc83c", "sha256": "501c497432e08d860df01a421695be280e7ccb7f11d8a678df29d3373fc8c085"}, "downloads": -1, "filename": "flask_api_builder-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6c49e25c44a4042e37040191563fc83c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7593, "upload_time": "2016-07-22T17:37:44", "upload_time_iso_8601": "2016-07-22T17:37:44.230376Z", "url": "https://files.pythonhosted.org/packages/40/a2/a7b2a296c6643ee6af4a805840f1e2a1dd207ea5bef2e43795092c1a9302/flask_api_builder-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:10 2020"}