{"info": {"author": "Michael Ramsey", "author_email": "mike@hackerdise.me", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "WizardWebSSH\n------------\n\n|Build Status| |codecov| |PyPI - Python Version| |PyPI|\n\nIntroduction\n~~~~~~~~~~~~\n\nA simple web application to be used as an ssh client to connect to your\nssh servers. It is written in Python, base on tornado, paramiko and\nxterm.js.\n\nFeatures\n~~~~~~~~\n\n-  SSH password authentication supported, including empty password.\n-  SSH public-key authentication supported, including DSA RSA ECDSA\n   Ed25519 keys.\n-  SSH Agent Support\n-  Sqlite DB support for SSH Config.\n-  PyQT5 MultiTabbed Terminal Widget for embedding into PyQT5 apps.\n-  Encrypted keys supported.\n-  Two-Factor Authentication (time-based one-time password) supported.\n-  Fullscreen terminal supported.\n-  Terminal window resizable.\n-  Auto detect the ssh server's default encoding.\n-  Modern browsers including Chrome, Firefox, Safari, Edge, Opera\n   supported.\n\nPreview\n~~~~~~~\n\n|Login| |Terminal| |PyQT5 MultiTabbed Terminal Widget|\n\nHow it works\n~~~~~~~~~~~~\n\n::\n\n    +---------+     http     +--------+    ssh    +-----------+\n    | browser | <==========> | wizardwebssh | <=======> | ssh server|\n    +---------+   websocket  +--------+    ssh    +-----------+\n\nRequirements\n~~~~~~~~~~~~\n\n-  Python 2.7/3.4+\n\nQuickstart\n~~~~~~~~~~\n\n1. Install this app, run command ``pip install wizardwebssh``\n2. Start a webserver, run command ``wssh``\n3. Open your browser, navigate to ``127.0.0.1:8888``\n4. Input your data, submit the form.\n\nServer options\n~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    # start a http server with specified listen address and listen port\n    wssh --address='2.2.2.2' --port=8000\n\n    # start a https server, certfile and keyfile must be passed\n    wssh --certfile='/path/to/cert.crt' --keyfile='/path/to/cert.key'\n\n    # missing host key policy\n    wssh --policy=reject\n\n    # logging level\n    wssh --logging=debug\n\n    # log to file\n    wssh --log-file-prefix=main.log\n\n    # more options\n    wssh --help\n\nBrowser console\n~~~~~~~~~~~~~~~\n\n.. code:: javascript\n\n    // connect to your ssh server\n    wssh.connect(hostname, port, username, password, privatekey, passphrase, totp);\n\n    // pass an object to wssh.connect\n    var opts = {\n      hostname: 'hostname',\n      port: 'port',\n      username: 'username',\n      password: 'password',\n      privatekey: 'the private key text',\n      passphrase: 'passphrase',\n      totp: 'totp'\n    };\n    wssh.connect(opts);\n\n    // without an argument, wssh will use the form data to connect\n    wssh.connect();\n\n    // set a new encoding for client to use\n    wssh.set_encoding(encoding);\n\n    // reset encoding to use the default one\n    wssh.reset_encoding();\n\n    // send a command to the server\n    wssh.send('ls -l');\n\nCustom Font\n~~~~~~~~~~~\n\nTo use custom font, put your font file in the directory\n``wizardwebssh/static/css/fonts/`` and restart the server.\n\nURL Arguments\n~~~~~~~~~~~~~\n\nSupport passing arguments by url (query or fragment) like following\nexamples:\n\nPassing form data (password must be encoded in base64, privatekey not\nsupported)\n\n.. code:: bash\n\n    http://localhost:8888/?hostname=xx&username=yy&password=str_base64_encoded\n\nPassing a terminal background color\n\n.. code:: bash\n\n    http://localhost:8888/#bgcolor=green\n\nPassing a user defined title\n\n.. code:: bash\n\n    http://localhost:8888/?title=my-ssh-server\n\nPassing an encoding\n\n.. code:: bash\n\n    http://localhost:8888/#encoding=gbk\n\nPassing a command executed right after login\n\n.. code:: bash\n\n    http://localhost:8888/?command=pwd\n\nPassing a terminal type\n\n.. code:: bash\n\n    http://localhost:8888/?term=xterm-256color\n\nUse Docker\n~~~~~~~~~~\n\nStart up the app\n\n::\n\n    docker-compose up\n\nTear down the app\n\n::\n\n    docker-compose down\n\nTests\n~~~~~\n\nRequirements\n\n::\n\n    pip install pytest pytest-cov codecov flake8 mock\n\nUse unittest to run all tests\n\n::\n\n    python -m unittest discover tests\n\nUse pytest to run all tests\n\n::\n\n    python -m pytest tests\n\nDeployment\n~~~~~~~~~~\n\nRunning behind an Nginx server\n\n.. code:: bash\n\n    wssh --address='127.0.0.1' --port=8888 --policy=reject\n\n.. code:: nginx\n\n    # Nginx config example\n    location / {\n        proxy_pass http://127.0.0.1:8888;\n        proxy_http_version 1.1;\n        proxy_read_timeout 300;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Real-PORT $remote_port;\n    }\n\nRunning as a standalone server\n\n.. code:: bash\n\n    wssh --port=8080 --sslport=4433 --certfile='cert.crt' --keyfile='cert.key' --xheaders=False --policy=reject\n\nTips\n~~~~\n\n-  For whatever deployment choice you choose, don't forget to enable\n   SSL.\n-  By default plain http requests from a public network will be either\n   redirected or blocked and being redirected takes precedence over\n   being blocked.\n-  Try to use reject policy as the missing host key policy along with\n   your verified known\\_hosts, this will prevent man-in-the-middle\n   attacks. The idea is that it checks the system host keys\n   file(\"~/.ssh/known\\_hosts\") and the application host keys\n   file(\"./known\\_hosts\") in order, if the ssh server's hostname is not\n   found or the key is not matched, the connection will be aborted.\n\n.. |Build Status| image:: https://travis-ci.org/mikeramsey/wizardwebssh.svg?branch=master\n   :target: https://travis-ci.org/mikeramsey/wizardwebssh\n.. |codecov| image:: https://codecov.io/gh/mikeramsey/wizardwebssh/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/mikeramsey/wizardwebssh\n.. |PyPI - Python Version| image:: https://img.shields.io/pypi/pyversions/wizardwebssh.svg\n.. |PyPI| image:: https://img.shields.io/pypi/v/wizardwebssh.svg\n.. |Login| image:: https://gitlab.com/mikeramsey/wizardwebssh/raw/master/preview/login.png\n.. |Terminal| image:: https://gitlab.com/mikeramsey/wizardwebssh/raw/master/preview/terminal.png\n.. |PyQT5 MultiTabbed Terminal Widget| image:: https://gitlab.com/mikeramsey/wizardwebssh/-/raw/master/preview/multitabbedterminalwidget.png\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/mikeramsey/wizardwebssh", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wizardwebssh", "package_url": "https://pypi.org/project/wizardwebssh/", "platform": "", "project_url": "https://pypi.org/project/wizardwebssh/", "project_urls": {"Homepage": "https://gitlab.com/mikeramsey/wizardwebssh"}, "release_url": "https://pypi.org/project/wizardwebssh/1.5.6/", "requires_dist": ["tornado (>=4.5.0)", "paramiko (>=2.3.1)"], "requires_python": "", "summary": "Web based ssh client", "version": "1.5.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/mikeramsey/wizardwebssh\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5967005c70f39e32d947980a91710668184c62f8/68747470733a2f2f7472617669732d63692e6f72672f6d696b6572616d7365792f77697a6172647765627373682e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/mikeramsey/wizardwebssh\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1cab15503dc64618490fff4f438f804f91e9af8e/68747470733a2f2f636f6465636f762e696f2f67682f6d696b6572616d7365792f77697a6172647765627373682f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52113d48a0f1551f10c24290bb38c08e79577c52/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f77697a6172647765627373682e737667\"> <img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1cccc085352a5c6db55cf70f1029932f60bbe140/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f77697a6172647765627373682e737667\"></p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>A simple web application to be used as an ssh client to connect to your\nssh servers. It is written in Python, base on tornado, paramiko and\nxterm.js.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>SSH password authentication supported, including empty password.</li>\n<li>SSH public-key authentication supported, including DSA RSA ECDSA\nEd25519 keys.</li>\n<li>SSH Agent Support</li>\n<li>Sqlite DB support for SSH Config.</li>\n<li>PyQT5 MultiTabbed Terminal Widget for embedding into PyQT5 apps.</li>\n<li>Encrypted keys supported.</li>\n<li>Two-Factor Authentication (time-based one-time password) supported.</li>\n<li>Fullscreen terminal supported.</li>\n<li>Terminal window resizable.</li>\n<li>Auto detect the ssh server\u2019s default encoding.</li>\n<li>Modern browsers including Chrome, Firefox, Safari, Edge, Opera\nsupported.</li>\n</ul>\n</div>\n<div id=\"preview\">\n<h2>Preview</h2>\n<p><img alt=\"Login\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40f90aef9262ae05e5998a70e505a0a75d1f6e05/68747470733a2f2f6769746c61622e636f6d2f6d696b6572616d7365792f77697a6172647765627373682f7261772f6d61737465722f707265766965772f6c6f67696e2e706e67\"> <img alt=\"Terminal\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d1035e5a9ea03c1176994db7088798fd31825fc/68747470733a2f2f6769746c61622e636f6d2f6d696b6572616d7365792f77697a6172647765627373682f7261772f6d61737465722f707265766965772f7465726d696e616c2e706e67\"> <img alt=\"PyQT5 MultiTabbed Terminal Widget\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e51b0232f426dcd7d07b279ee5d420c07fec592/68747470733a2f2f6769746c61622e636f6d2f6d696b6572616d7365792f77697a6172647765627373682f2d2f7261772f6d61737465722f707265766965772f6d756c74697461626265647465726d696e616c7769646765742e706e67\"></p>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<pre>+---------+     http     +--------+    ssh    +-----------+\n| browser | &lt;==========&gt; | wizardwebssh | &lt;=======&gt; | ssh server|\n+---------+   websocket  +--------+    ssh    +-----------+\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7/3.4+</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<ol>\n<li>Install this app, run command <tt>pip install wizardwebssh</tt></li>\n<li>Start a webserver, run command <tt>wssh</tt></li>\n<li>Open your browser, navigate to <tt>127.0.0.1:8888</tt></li>\n<li>Input your data, submit the form.</li>\n</ol>\n</div>\n<div id=\"server-options\">\n<h2>Server options</h2>\n<pre><span class=\"c1\"># start a http server with specified listen address and listen port\n</span>wssh --address<span class=\"o\">=</span><span class=\"s1\">'2.2.2.2'</span> --port<span class=\"o\">=</span><span class=\"m\">8000</span>\n\n<span class=\"c1\"># start a https server, certfile and keyfile must be passed\n</span>wssh --certfile<span class=\"o\">=</span><span class=\"s1\">'/path/to/cert.crt'</span> --keyfile<span class=\"o\">=</span><span class=\"s1\">'/path/to/cert.key'</span>\n\n<span class=\"c1\"># missing host key policy\n</span>wssh --policy<span class=\"o\">=</span>reject\n\n<span class=\"c1\"># logging level\n</span>wssh --logging<span class=\"o\">=</span>debug\n\n<span class=\"c1\"># log to file\n</span>wssh --log-file-prefix<span class=\"o\">=</span>main.log\n\n<span class=\"c1\"># more options\n</span>wssh --help\n</pre>\n</div>\n<div id=\"browser-console\">\n<h2>Browser console</h2>\n<pre><span class=\"c1\">// connect to your ssh server\n</span><span class=\"nx\">wssh</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">hostname</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"nx\">username</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">,</span> <span class=\"nx\">privatekey</span><span class=\"p\">,</span> <span class=\"nx\">passphrase</span><span class=\"p\">,</span> <span class=\"nx\">totp</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// pass an object to wssh.connect\n</span><span class=\"kd\">var</span> <span class=\"nx\">opts</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">hostname</span><span class=\"o\">:</span> <span class=\"s1\">'hostname'</span><span class=\"p\">,</span>\n  <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"s1\">'port'</span><span class=\"p\">,</span>\n  <span class=\"nx\">username</span><span class=\"o\">:</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span>\n  <span class=\"nx\">password</span><span class=\"o\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n  <span class=\"nx\">privatekey</span><span class=\"o\">:</span> <span class=\"s1\">'the private key text'</span><span class=\"p\">,</span>\n  <span class=\"nx\">passphrase</span><span class=\"o\">:</span> <span class=\"s1\">'passphrase'</span><span class=\"p\">,</span>\n  <span class=\"nx\">totp</span><span class=\"o\">:</span> <span class=\"s1\">'totp'</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">wssh</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">opts</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// without an argument, wssh will use the form data to connect\n</span><span class=\"nx\">wssh</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// set a new encoding for client to use\n</span><span class=\"nx\">wssh</span><span class=\"p\">.</span><span class=\"nx\">set_encoding</span><span class=\"p\">(</span><span class=\"nx\">encoding</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// reset encoding to use the default one\n</span><span class=\"nx\">wssh</span><span class=\"p\">.</span><span class=\"nx\">reset_encoding</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// send a command to the server\n</span><span class=\"nx\">wssh</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">'ls -l'</span><span class=\"p\">);</span>\n</pre>\n</div>\n<div id=\"custom-font\">\n<h2>Custom Font</h2>\n<p>To use custom font, put your font file in the directory\n<tt>wizardwebssh/static/css/fonts/</tt> and restart the server.</p>\n</div>\n<div id=\"url-arguments\">\n<h2>URL Arguments</h2>\n<p>Support passing arguments by url (query or fragment) like following\nexamples:</p>\n<p>Passing form data (password must be encoded in base64, privatekey not\nsupported)</p>\n<pre>http://localhost:8888/?hostname<span class=\"o\">=</span>xx<span class=\"p\">&amp;</span><span class=\"nv\">username</span><span class=\"o\">=</span>yy<span class=\"p\">&amp;</span><span class=\"nv\">password</span><span class=\"o\">=</span>str_base64_encoded\n</pre>\n<p>Passing a terminal background color</p>\n<pre>http://localhost:8888/#bgcolor<span class=\"o\">=</span>green\n</pre>\n<p>Passing a user defined title</p>\n<pre>http://localhost:8888/?title<span class=\"o\">=</span>my-ssh-server\n</pre>\n<p>Passing an encoding</p>\n<pre>http://localhost:8888/#encoding<span class=\"o\">=</span>gbk\n</pre>\n<p>Passing a command executed right after login</p>\n<pre>http://localhost:8888/?command<span class=\"o\">=</span><span class=\"nb\">pwd</span>\n</pre>\n<p>Passing a terminal type</p>\n<pre>http://localhost:8888/?term<span class=\"o\">=</span>xterm-256color\n</pre>\n</div>\n<div id=\"use-docker\">\n<h2>Use Docker</h2>\n<p>Start up the app</p>\n<pre>docker-compose up\n</pre>\n<p>Tear down the app</p>\n<pre>docker-compose down\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Requirements</p>\n<pre>pip install pytest pytest-cov codecov flake8 mock\n</pre>\n<p>Use unittest to run all tests</p>\n<pre>python -m unittest discover tests\n</pre>\n<p>Use pytest to run all tests</p>\n<pre>python -m pytest tests\n</pre>\n</div>\n<div id=\"deployment\">\n<h2>Deployment</h2>\n<p>Running behind an Nginx server</p>\n<pre>wssh --address<span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span> --port<span class=\"o\">=</span><span class=\"m\">8888</span> --policy<span class=\"o\">=</span>reject\n</pre>\n<pre><span class=\"c1\"># Nginx config example\n</span><span class=\"k\">location</span> <span class=\"s\">/</span> <span class=\"p\">{</span>\n    <span class=\"kn\">proxy_pass</span> <span class=\"s\">http://127.0.0.1:8888</span><span class=\"p\">;</span>\n    <span class=\"kn\">proxy_http_version</span> <span class=\"mi\">1</span><span class=\"s\">.1</span><span class=\"p\">;</span>\n    <span class=\"kn\">proxy_read_timeout</span> <span class=\"mi\">300</span><span class=\"p\">;</span>\n    <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Upgrade</span> <span class=\"nv\">$http_upgrade</span><span class=\"p\">;</span>\n    <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Connection</span> <span class=\"s\">\"upgrade\"</span><span class=\"p\">;</span>\n    <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Host</span> <span class=\"nv\">$http_host</span><span class=\"p\">;</span>\n    <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Real-IP</span> <span class=\"nv\">$remote_addr</span><span class=\"p\">;</span>\n    <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Real-PORT</span> <span class=\"nv\">$remote_port</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Running as a standalone server</p>\n<pre>wssh --port<span class=\"o\">=</span><span class=\"m\">8080</span> --sslport<span class=\"o\">=</span><span class=\"m\">4433</span> --certfile<span class=\"o\">=</span><span class=\"s1\">'cert.crt'</span> --keyfile<span class=\"o\">=</span><span class=\"s1\">'cert.key'</span> --xheaders<span class=\"o\">=</span>False --policy<span class=\"o\">=</span>reject\n</pre>\n</div>\n<div id=\"tips\">\n<h2>Tips</h2>\n<ul>\n<li>For whatever deployment choice you choose, don\u2019t forget to enable\nSSL.</li>\n<li>By default plain http requests from a public network will be either\nredirected or blocked and being redirected takes precedence over\nbeing blocked.</li>\n<li>Try to use reject policy as the missing host key policy along with\nyour verified known_hosts, this will prevent man-in-the-middle\nattacks. The idea is that it checks the system host keys\nfile(\u201c~/.ssh/known_hosts\u201d) and the application host keys\nfile(\u201c./known_hosts\u201d) in order, if the ssh server\u2019s hostname is not\nfound or the key is not matched, the connection will be aborted.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6966297, "releases": {"1.5.6": [{"comment_text": "", "digests": {"md5": "23f7126606c1e590205f94621dc9e201", "sha256": "e33ea86d35dbec5f0122368259e9db34ae1131e328898470e8aa72df4c405b5a"}, "downloads": -1, "filename": "wizardwebssh-1.5.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "23f7126606c1e590205f94621dc9e201", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 165565, "upload_time": "2020-04-07T03:50:57", "upload_time_iso_8601": "2020-04-07T03:50:57.012790Z", "url": "https://files.pythonhosted.org/packages/7b/16/bb55468c57ec5fa45549d6d16bd101cd082db021ef686c1f6f821c9c69e4/wizardwebssh-1.5.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9da306e87236d845004a9468896457ab", "sha256": "c59178c65c9eb377da454c70d23851ce86bf28dc032d18d583eed0c14a450fb5"}, "downloads": -1, "filename": "wizardwebssh-1.5.6.tar.gz", "has_sig": false, "md5_digest": "9da306e87236d845004a9468896457ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 183604, "upload_time": "2020-04-07T03:51:04", "upload_time_iso_8601": "2020-04-07T03:51:04.125987Z", "url": "https://files.pythonhosted.org/packages/63/20/359af3c9e9d4a3f6dabff449863ddd622ec62836ac1dd47e6276af128a3b/wizardwebssh-1.5.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23f7126606c1e590205f94621dc9e201", "sha256": "e33ea86d35dbec5f0122368259e9db34ae1131e328898470e8aa72df4c405b5a"}, "downloads": -1, "filename": "wizardwebssh-1.5.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "23f7126606c1e590205f94621dc9e201", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 165565, "upload_time": "2020-04-07T03:50:57", "upload_time_iso_8601": "2020-04-07T03:50:57.012790Z", "url": "https://files.pythonhosted.org/packages/7b/16/bb55468c57ec5fa45549d6d16bd101cd082db021ef686c1f6f821c9c69e4/wizardwebssh-1.5.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9da306e87236d845004a9468896457ab", "sha256": "c59178c65c9eb377da454c70d23851ce86bf28dc032d18d583eed0c14a450fb5"}, "downloads": -1, "filename": "wizardwebssh-1.5.6.tar.gz", "has_sig": false, "md5_digest": "9da306e87236d845004a9468896457ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 183604, "upload_time": "2020-04-07T03:51:04", "upload_time_iso_8601": "2020-04-07T03:51:04.125987Z", "url": "https://files.pythonhosted.org/packages/63/20/359af3c9e9d4a3f6dabff449863ddd622ec62836ac1dd47e6276af128a3b/wizardwebssh-1.5.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:29 2020"}