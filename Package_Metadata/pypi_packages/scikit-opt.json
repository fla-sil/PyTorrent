{"info": {"author": "Guo Fei", "author_email": "guofei9987@foxmail.com", "bugtrack_url": null, "classifiers": [], "description": "# [scikit-opt](https://github.com/guofei9987/scikit-opt)\n\n[![PyPI](https://img.shields.io/pypi/v/scikit-opt)](https://pypi.org/project/scikit-opt/)\n[![Build Status](https://travis-ci.com/guofei9987/scikit-opt.svg?branch=master)](https://travis-ci.com/guofei9987/scikit-opt)\n[![codecov](https://codecov.io/gh/guofei9987/scikit-opt/branch/master/graph/badge.svg)](https://codecov.io/gh/guofei9987/scikit-opt)\n[![License](https://img.shields.io/pypi/l/scikit-opt.svg)](https://github.com/guofei9987/scikit-opt/blob/master/LICENSE)\n![Python](https://img.shields.io/badge/python->=3.5-green.svg)\n![Platform](https://img.shields.io/badge/platform-windows%20|%20linux%20|%20macos-green.svg)\n[![PyPI_downloads](https://img.shields.io/pypi/dm/scikit-opt)](https://pypi.org/project/scikit-opt/)\n[![Join the chat at https://gitter.im/guofei9987/scikit-opt](https://badges.gitter.im/guofei9987/scikit-opt.svg)](https://gitter.im/guofei9987/scikit-opt?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n\nSwarm Intelligence in Python  \n(Genetic Algorithm, Particle Swarm Optimization, Simulated Annealing, Ant Colony Algorithm, Immune Algorithm,Artificial Fish Swarm Algorithm in Python)  \n\n\n- **Documentation:** [https://scikit-opt.github.io/scikit-opt/#/en/](https://scikit-opt.github.io/scikit-opt/#/en/)\n- **\u6587\u6863\uff1a** [https://scikit-opt.github.io/scikit-opt/#/zh/](https://scikit-opt.github.io/scikit-opt/#/zh/)  \n- **Source code:** [https://github.com/guofei9987/scikit-opt](https://github.com/guofei9987/scikit-opt)\n- **Help us improve scikit-opt** [https://www.wjx.cn/jq/50964691.aspx](https://www.wjx.cn/jq/50964691.aspx)\n\n# install\n```bash\npip install scikit-opt\n```\n\nFor the current developer version:\n```bach\ngit clone git@github.com:guofei9987/scikit-opt.git\ncd scikit-opt\npip install .\n```\n\n# Features\n## Feature1: UDF\n\n**UDF** (user defined function) is available now!\n\nFor example, you just worked out a new type of `selection` function.  \nNow, your `selection` function is like this:  \n-> Demo code: [examples/demo_ga_udf.py#s1](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L1)\n```python\n# step1: define your own operator:\ndef selection_tournament(algorithm, tourn_size):\n    FitV = algorithm.FitV\n    sel_index = []\n    for i in range(algorithm.size_pop):\n        aspirants_index = np.random.choice(range(algorithm.size_pop), size=tourn_size)\n        sel_index.append(max(aspirants_index, key=lambda i: FitV[i]))\n    algorithm.Chrom = algorithm.Chrom[sel_index, :]  # next generation\n    return algorithm.Chrom\n\n\n```\n\nImport and build ga  \n-> Demo code: [examples/demo_ga_udf.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L12)\n```python\nimport numpy as np\nfrom sko.GA import GA, GA_TSP\n\ndemo_func = lambda x: x[0] ** 2 + (x[1] - 0.05) ** 2 + (x[2] - 0.5) ** 2\nga = GA(func=demo_func, n_dim=3, size_pop=100, max_iter=500, lb=[-1, -10, -5], ub=[2, 10, 2],\n        precision=[1e-7, 1e-7, 1])\n\n```\nRegist your udf to GA  \n-> Demo code: [examples/demo_ga_udf.py#s3](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L20)\n```python\nga.register(operator_name='selection', operator=selection_tournament, tourn_size=3)\n```\n\nscikit-opt also provide some operators  \n-> Demo code: [examples/demo_ga_udf.py#s4](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L22)\n```python\nfrom sko.operators import ranking, selection, crossover, mutation\n\nga.register(operator_name='ranking', operator=ranking.ranking). \\\n    register(operator_name='crossover', operator=crossover.crossover_2point). \\\n    register(operator_name='mutation', operator=mutation.mutation)\n```\nNow do GA as usual  \n-> Demo code: [examples/demo_ga_udf.py#s5](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L28)\n```python\nbest_x, best_y = ga.run()\nprint('best_x:', best_x, '\\n', 'best_y:', best_y)\n```\n\n> Until Now, the **udf** surport `crossover`, `mutation`, `selection`, `ranking` of GA\n> scikit-opt provide a dozen of operators, see [here](https://github.com/guofei9987/scikit-opt/tree/master/sko/operators)\n\nFor advanced users:\n\n-> Demo code: [examples/demo_ga_udf.py#s6](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L31)\n```python\nclass MyGA(GA):\n    def selection(self, tourn_size=3):\n        FitV = self.FitV\n        sel_index = []\n        for i in range(self.size_pop):\n            aspirants_index = np.random.choice(range(self.size_pop), size=tourn_size)\n            sel_index.append(max(aspirants_index, key=lambda i: FitV[i]))\n        self.Chrom = self.Chrom[sel_index, :]  # next generation\n        return self.Chrom\n\n    ranking = ranking.ranking\n\n\ndemo_func = lambda x: x[0] ** 2 + (x[1] - 0.05) ** 2 + (x[2] - 0.5) ** 2\nmy_ga = MyGA(func=demo_func, n_dim=3, size_pop=100, max_iter=500, lb=[-1, -10, -5], ub=[2, 10, 2],\n        precision=[1e-7, 1e-7, 1])\nbest_x, best_y = my_ga.run()\nprint('best_x:', best_x, '\\n', 'best_y:', best_y)\n```\n## feature2: GPU computation\n We are developing GPU computation, which will be stable on version 1.0.0  \nAn example is already available: [https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_gpu.py](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_gpu.py)\n\n##  feature3: continue to run\n(New in version 0.3.6)  \nRun an algorithm for 10 iterations, and then run another 20 iterations base on the 10 iterations before:\n```python\nfrom sko.GA import GA\n\nfunc = lambda x: x[0] ** 2\nga = GA(func=func, n_dim=1)\nga.run(10)\nga.run(20)\n```\n\n# Quick start\n\n## 1. Differential Evolution\n**Step1**\uff1adefine your problem  \n-> Demo code: [examples/demo_de.py#s1](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_de.py#L1)\n```python\n'''\nmin f(x1, x2, x3) = x1^2 + x2^2 + x3^2\ns.t.\n    x1*x2 >= 1\n    x1*x2 <= 5\n    x2 + x3 = 1\n    0 <= x1, x2, x3 <= 5\n'''\n\n\ndef obj_func(p):\n    x1, x2, x3 = p\n    return x1 ** 2 + x2 ** 2 + x3 ** 2\n\n\nconstraint_eq = [\n    lambda x: 1 - x[1] - x[2]\n]\n\nconstraint_ueq = [\n    lambda x: 1 - x[0] * x[1],\n    lambda x: x[0] * x[1] - 5\n]\n\n```\n\n**Step2**: do Differential Evolution  \n-> Demo code: [examples/demo_de.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_de.py#L25)\n```python\nfrom sko.DE import DE\n\nde = DE(func=obj_func, n_dim=3, size_pop=50, max_iter=800, lb=[0, 0, 0], ub=[5, 5, 5],\n        constraint_eq=constraint_eq, constraint_ueq=constraint_ueq)\n\nbest_x, best_y = de.run()\nprint('best_x:', best_x, '\\n', 'best_y:', best_y)\n\n```\n\n## 2. Genetic Algorithm\n\n**Step1**\uff1adefine your problem  \n-> Demo code: [examples/demo_ga.py#s1](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga.py#L1)\n```python\nimport numpy as np\n\n\ndef schaffer(p):\n    '''\n    This function has plenty of local minimum, with strong shocks\n    global minimum at (0,0) with value 0\n    '''\n    x1, x2 = p\n    x = np.square(x1) + np.square(x2)\n    return 0.5 + (np.sin(x) - 0.5) / np.square(1 + 0.001 * x)\n\n\n```\n\n**Step2**: do Genetic Algorithm  \n-> Demo code: [examples/demo_ga.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga.py#L14)\n```python\nfrom sko.GA import GA\n\nga = GA(func=schaffer, n_dim=2, size_pop=50, max_iter=800, lb=[-1, -1], ub=[1, 1], precision=1e-7)\nbest_x, best_y = ga.run()\nprint('best_x:', best_x, '\\n', 'best_y:', best_y)\n\n```\n\n**Step3**: plot the result  \n-> Demo code: [examples/demo_ga.py#s3](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga.py#L21)\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nY_history = pd.DataFrame(ga.all_history_Y)\nfig, ax = plt.subplots(2, 1)\nax[0].plot(Y_history.index, Y_history.values, '.', color='red')\nY_history.min(axis=1).cummin().plot(kind='line')\nplt.show()\n```\n\n![Figure_1-1](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/ga_1.png?raw=true)\n\n### 2.2 Genetic Algorithm for TSP(Travelling Salesman Problem)\nJust import the `GA_TSP`, it overloads the `crossover`, `mutation` to solve the TSP\n\n**Step1**: define your problem. Prepare your points coordinate and the distance matrix.  \nHere I generate the data randomly as a demo:  \n-> Demo code: [examples/demo_ga_tsp.py#s1](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_tsp.py#L1)\n```python\nimport numpy as np\nfrom scipy import spatial\nimport matplotlib.pyplot as plt\n\nnum_points = 50\n\npoints_coordinate = np.random.rand(num_points, 2)  # generate coordinate of points\ndistance_matrix = spatial.distance.cdist(points_coordinate, points_coordinate, metric='euclidean')\n\n\ndef cal_total_distance(routine):\n    '''The objective function. input routine, return total distance.\n    cal_total_distance(np.arange(num_points))\n    '''\n    num_points, = routine.shape\n    return sum([distance_matrix[routine[i % num_points], routine[(i + 1) % num_points]] for i in range(num_points)])\n\n\n```\n\n**Step2**: do GA  \n-> Demo code: [examples/demo_ga_tsp.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_tsp.py#L19)\n```python\n\nfrom sko.GA import GA_TSP\n\nga_tsp = GA_TSP(func=cal_total_distance, n_dim=num_points, size_pop=50, max_iter=500, prob_mut=1)\nbest_points, best_distance = ga_tsp.run()\n\n```\n\n**Step3**: Plot the result:  \n-> Demo code: [examples/demo_ga_tsp.py#s3](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_tsp.py#L26)\n```python\nfig, ax = plt.subplots(1, 2)\nbest_points_ = np.concatenate([best_points, [best_points[0]]])\nbest_points_coordinate = points_coordinate[best_points_, :]\nax[0].plot(best_points_coordinate[:, 0], best_points_coordinate[:, 1], 'o-r')\nax[1].plot(ga_tsp.generation_best_Y)\nplt.show()\n```\n\n![GA_TPS](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/ga_tsp.png?raw=true)\n\n\n## 3. PSO(Particle swarm optimization)\n\n### 3.1 PSO with constraint\n**Step1**: define your problem:  \n-> Demo code: [examples/demo_pso.py#s1](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso.py#L1)\n```python\ndef demo_func(x):\n    x1, x2, x3 = x\n    return x1 ** 2 + (x2 - 0.05) ** 2 + x3 ** 2\n\n\n```\n\n**Step2**: do PSO  \n-> Demo code: [examples/demo_pso.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso.py#L6)\n```python\nfrom sko.PSO import PSO\n\npso = PSO(func=demo_func, dim=3, pop=40, max_iter=150, lb=[0, -1, 0.5], ub=[1, 1, 1], w=0.8, c1=0.5, c2=0.5)\npso.run()\nprint('best_x is ', pso.gbest_x, 'best_y is', pso.gbest_y)\n\n```\n\n**Step3**: Plot the result  \n-> Demo code: [examples/demo_pso.py#s3](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso.py#L13)\n```python\nimport matplotlib.pyplot as plt\n\nplt.plot(pso.gbest_y_hist)\nplt.show()\n\n```\n\n\n![PSO_TPS](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/pso.png?raw=true)\n\n\n![pso_ani](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/pso.gif?raw=true)  \n\u2191**see [examples/demo_pso_ani.py](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso_ani.py)**\n\n### 3.2 PSO without constraint\n-> Demo code: [examples/demo_pso.py#s4](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso.py#L19)\n```python\npso = PSO(func=demo_func, dim=3)\nfitness = pso.run()\nprint('best_x is ', pso.gbest_x, 'best_y is', pso.gbest_y)\n```\n\n## 4. SA(Simulated Annealing)\n### 4.1 SA for multiple function\n**Step1**: define your problem  \n-> Demo code: [examples/demo_sa.py#s1](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa.py#L1)\n```python\ndemo_func = lambda x: x[0] ** 2 + (x[1] - 0.05) ** 2 + x[2] ** 2\n\n```\n**Step2**: do SA  \n-> Demo code: [examples/demo_sa.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa.py#L3)\n```python\nfrom sko.SA import SA\n\nsa = SA(func=demo_func, x0=[1, 1, 1], T_max=1, T_min=1e-9, L=300, max_stay_counter=150)\nbest_x, best_y = sa.run()\nprint('best_x:', best_x, 'best_y', best_y)\n\n```\n\n**Step3**: Plot the result  \n-> Demo code: [examples/demo_sa.py#s3](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa.py#L10)\n```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nplt.plot(pd.DataFrame(sa.best_y_history).cummin(axis=0))\nplt.show()\n\n```\n![sa](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/sa.png?raw=true)\n\n\nMoreover, scikit-opt provide 3 types of Simulated Annealing: Fast, Boltzmann, Cauchy. See [more sa](https://scikit-opt.github.io/scikit-opt/#/en/more_sa)\n### 4.2 SA for TSP\n**Step1**: oh, yes, define your problems. To boring to copy this step.  \n\n**Step2**: DO SA for TSP  \n-> Demo code: [examples/demo_sa_tsp.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa_tsp.py#L21)\n```python\nfrom sko.SA import SA_TSP\n\nsa_tsp = SA_TSP(func=cal_total_distance, x0=range(num_points), T_max=100, T_min=1, L=10 * num_points)\n\nbest_points, best_distance = sa_tsp.run()\nprint(best_points, best_distance, cal_total_distance(best_points))\n```\n\n**Step3**: plot the result  \n-> Demo code: [examples/demo_sa_tsp.py#s3](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa_tsp.py#L28)\n```python\nfrom matplotlib.ticker import FormatStrFormatter\n\nfig, ax = plt.subplots(1, 2)\n\nbest_points_ = np.concatenate([best_points, [best_points[0]]])\nbest_points_coordinate = points_coordinate[best_points_, :]\nax[0].plot(sa_tsp.best_y_history)\nax[0].set_xlabel(\"Iteration\")\nax[0].set_ylabel(\"Distance\")\nax[1].plot(best_points_coordinate[:, 0], best_points_coordinate[:, 1],\n           marker='o', markerfacecolor='b', color='c', linestyle='-')\nax[1].xaxis.set_major_formatter(FormatStrFormatter('%.3f'))\nax[1].yaxis.set_major_formatter(FormatStrFormatter('%.3f'))\nax[1].set_xlabel(\"Longitude\")\nax[1].set_ylabel(\"Latitude\")\nplt.show()\n\n```\n![sa](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/sa_tsp.png?raw=true)\n\n\nMore: Plot the animation:  \n\n![sa](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/sa_tsp1.gif?raw=true)  \n\u2191**see [examples/demo_sa_tsp.py](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa_tsp.py)**\n\n\n\n\n## 5. ACA (Ant Colony Algorithm) for tsp \n-> Demo code: [examples/demo_aca_tsp.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_aca_tsp.py#L17)\n```python\nfrom sko.ACA import ACA_TSP\n\naca = ACA_TSP(func=cal_total_distance, n_dim=num_points,\n              size_pop=50, max_iter=200,\n              distance_matrix=distance_matrix)\n\nbest_x, best_y = aca.run()\n\n```\n\n![ACA](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/aca_tsp.png?raw=true)\n\n\n## 6. immune algorithm (IA)\n-> Demo code: [examples/demo_ia.py#s2](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ia.py#L6)\n```python\n\nfrom sko.IA import IA_TSP\n\nia_tsp = IA_TSP(func=cal_total_distance, n_dim=num_points, size_pop=500, max_iter=800, prob_mut=0.2,\n                T=0.7, alpha=0.95)\nbest_points, best_distance = ia_tsp.run()\nprint('best routine:', best_points, 'best_distance:', best_distance)\n\n```\n\n![IA](https://github.com/guofei9987/pictures_for_blog/blob/master/heuristic_algorithm/ia2.png?raw=true)\n\n## 7. Artificial Fish Swarm Algorithm (AFSA)\n-> Demo code: [examples/demo_afsa.py#s1](https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_afsa.py#L1)\n```python\ndef func(x):\n    x1, x2 = x\n    return 1 / x1 ** 2 + x1 ** 2 + 1 / x2 ** 2 + x2 ** 2\n\n\nfrom sko.AFSA import AFSA\n\nafsa = AFSA(func, n_dim=2, size_pop=50, max_iter=300,\n            max_try_num=100, step=0.5, visual=0.3,\n            q=0.98, delta=0.5)\nbest_x, best_y = afsa.run()\nprint(best_x, best_y)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/guofei9987/scikit-opt", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "scikit-opt", "package_url": "https://pypi.org/project/scikit-opt/", "platform": "linux", "project_url": "https://pypi.org/project/scikit-opt/", "project_urls": {"Homepage": "https://github.com/guofei9987/scikit-opt"}, "release_url": "https://pypi.org/project/scikit-opt/0.5.6/", "requires_dist": ["numpy", "scipy"], "requires_python": ">=3.5", "summary": "Swarm Intelligence in Python", "version": "0.5.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://github.com/guofei9987/scikit-opt\" rel=\"nofollow\">scikit-opt</a></h1>\n<p><a href=\"https://pypi.org/project/scikit-opt/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/697eb7521566fead15e044b994b6258ae7a4f27c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7363696b69742d6f7074\"></a>\n<a href=\"https://travis-ci.com/guofei9987/scikit-opt\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c29743c9b3287d037d501b65d43f0c52ba76de88/68747470733a2f2f7472617669732d63692e636f6d2f67756f666569393938372f7363696b69742d6f70742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/guofei9987/scikit-opt\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de748f297a7b0792bd71b28bcfb73cf0c49d399c/68747470733a2f2f636f6465636f762e696f2f67682f67756f666569393938372f7363696b69742d6f70742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/guofei9987/scikit-opt/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a654b32f1af358e2f1bdfed285463931c9e4f0e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7363696b69742d6f70742e737667\"></a>\n<img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8ec286fce0d81801c0f414d501989493e983816/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d2533453d332e352d677265656e2e737667\">\n<img alt=\"Platform\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0720f3ca51232b63b7515bafe7bb58866c0003e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d77696e646f77732532302537432532306c696e75782532302537432532306d61636f732d677265656e2e737667\">\n<a href=\"https://pypi.org/project/scikit-opt/\" rel=\"nofollow\"><img alt=\"PyPI_downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acc98a103b1a37abead3507c5efb6e44a5248ba4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7363696b69742d6f7074\"></a>\n<a href=\"https://gitter.im/guofei9987/scikit-opt?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/guofei9987/scikit-opt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da5ef11fce5bb13edfcde3146c65dcf914562b26/68747470733a2f2f6261646765732e6769747465722e696d2f67756f666569393938372f7363696b69742d6f70742e737667\"></a></p>\n<p>Swarm Intelligence in Python<br>\n(Genetic Algorithm, Particle Swarm Optimization, Simulated Annealing, Ant Colony Algorithm, Immune Algorithm,Artificial Fish Swarm Algorithm in Python)</p>\n<ul>\n<li><strong>Documentation:</strong> <a href=\"https://scikit-opt.github.io/scikit-opt/#/en/\" rel=\"nofollow\">https://scikit-opt.github.io/scikit-opt/#/en/</a></li>\n<li><strong>\u6587\u6863\uff1a</strong> <a href=\"https://scikit-opt.github.io/scikit-opt/#/zh/\" rel=\"nofollow\">https://scikit-opt.github.io/scikit-opt/#/zh/</a></li>\n<li><strong>Source code:</strong> <a href=\"https://github.com/guofei9987/scikit-opt\" rel=\"nofollow\">https://github.com/guofei9987/scikit-opt</a></li>\n<li><strong>Help us improve scikit-opt</strong> <a href=\"https://www.wjx.cn/jq/50964691.aspx\" rel=\"nofollow\">https://www.wjx.cn/jq/50964691.aspx</a></li>\n</ul>\n<h1>install</h1>\n<pre>pip install scikit-opt\n</pre>\n<p>For the current developer version:</p>\n<pre>git clone git@github.com:guofei9987/scikit-opt.git\ncd scikit-opt\npip install .\n</pre>\n<h1>Features</h1>\n<h2>Feature1: UDF</h2>\n<p><strong>UDF</strong> (user defined function) is available now!</p>\n<p>For example, you just worked out a new type of <code>selection</code> function.<br>\nNow, your <code>selection</code> function is like this:<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L1\" rel=\"nofollow\">examples/demo_ga_udf.py#s1</a></p>\n<pre><span class=\"c1\"># step1: define your own operator:</span>\n<span class=\"k\">def</span> <span class=\"nf\">selection_tournament</span><span class=\"p\">(</span><span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">tourn_size</span><span class=\"p\">):</span>\n    <span class=\"n\">FitV</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">FitV</span>\n    <span class=\"n\">sel_index</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">size_pop</span><span class=\"p\">):</span>\n        <span class=\"n\">aspirants_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">size_pop</span><span class=\"p\">),</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">tourn_size</span><span class=\"p\">)</span>\n        <span class=\"n\">sel_index</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">aspirants_index</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">FitV</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n    <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">Chrom</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">Chrom</span><span class=\"p\">[</span><span class=\"n\">sel_index</span><span class=\"p\">,</span> <span class=\"p\">:]</span>  <span class=\"c1\"># next generation</span>\n    <span class=\"k\">return</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">Chrom</span>\n</pre>\n<p>Import and build ga<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L12\" rel=\"nofollow\">examples/demo_ga_udf.py#s2</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sko.GA</span> <span class=\"kn\">import</span> <span class=\"n\">GA</span><span class=\"p\">,</span> <span class=\"n\">GA_TSP</span>\n\n<span class=\"n\">demo_func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mf\">0.05</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"n\">ga</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">demo_func</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">size_pop</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">lb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">ub</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n        <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1e-7</span><span class=\"p\">,</span> <span class=\"mf\">1e-7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n<p>Regist your udf to GA<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L20\" rel=\"nofollow\">examples/demo_ga_udf.py#s3</a></p>\n<pre><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">operator_name</span><span class=\"o\">=</span><span class=\"s1\">'selection'</span><span class=\"p\">,</span> <span class=\"n\">operator</span><span class=\"o\">=</span><span class=\"n\">selection_tournament</span><span class=\"p\">,</span> <span class=\"n\">tourn_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>scikit-opt also provide some operators<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L22\" rel=\"nofollow\">examples/demo_ga_udf.py#s4</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.operators</span> <span class=\"kn\">import</span> <span class=\"n\">ranking</span><span class=\"p\">,</span> <span class=\"n\">selection</span><span class=\"p\">,</span> <span class=\"n\">crossover</span><span class=\"p\">,</span> <span class=\"n\">mutation</span>\n\n<span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">operator_name</span><span class=\"o\">=</span><span class=\"s1\">'ranking'</span><span class=\"p\">,</span> <span class=\"n\">operator</span><span class=\"o\">=</span><span class=\"n\">ranking</span><span class=\"o\">.</span><span class=\"n\">ranking</span><span class=\"p\">)</span><span class=\"o\">.</span> \\\n    <span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">operator_name</span><span class=\"o\">=</span><span class=\"s1\">'crossover'</span><span class=\"p\">,</span> <span class=\"n\">operator</span><span class=\"o\">=</span><span class=\"n\">crossover</span><span class=\"o\">.</span><span class=\"n\">crossover_2point</span><span class=\"p\">)</span><span class=\"o\">.</span> \\\n    <span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">operator_name</span><span class=\"o\">=</span><span class=\"s1\">'mutation'</span><span class=\"p\">,</span> <span class=\"n\">operator</span><span class=\"o\">=</span><span class=\"n\">mutation</span><span class=\"o\">.</span><span class=\"n\">mutation</span><span class=\"p\">)</span>\n</pre>\n<p>Now do GA as usual<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L28\" rel=\"nofollow\">examples/demo_ga_udf.py#s5</a></p>\n<pre><span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"n\">best_y</span> <span class=\"o\">=</span> <span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'best_x:'</span><span class=\"p\">,</span> <span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'best_y:'</span><span class=\"p\">,</span> <span class=\"n\">best_y</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Until Now, the <strong>udf</strong> surport <code>crossover</code>, <code>mutation</code>, <code>selection</code>, <code>ranking</code> of GA\nscikit-opt provide a dozen of operators, see <a href=\"https://github.com/guofei9987/scikit-opt/tree/master/sko/operators\" rel=\"nofollow\">here</a></p>\n</blockquote>\n<p>For advanced users:</p>\n<p>-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_udf.py#L31\" rel=\"nofollow\">examples/demo_ga_udf.py#s6</a></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyGA</span><span class=\"p\">(</span><span class=\"n\">GA</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">selection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tourn_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">FitV</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">FitV</span>\n        <span class=\"n\">sel_index</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size_pop</span><span class=\"p\">):</span>\n            <span class=\"n\">aspirants_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size_pop</span><span class=\"p\">),</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">tourn_size</span><span class=\"p\">)</span>\n            <span class=\"n\">sel_index</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">aspirants_index</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">FitV</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Chrom</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Chrom</span><span class=\"p\">[</span><span class=\"n\">sel_index</span><span class=\"p\">,</span> <span class=\"p\">:]</span>  <span class=\"c1\"># next generation</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Chrom</span>\n\n    <span class=\"n\">ranking</span> <span class=\"o\">=</span> <span class=\"n\">ranking</span><span class=\"o\">.</span><span class=\"n\">ranking</span>\n\n\n<span class=\"n\">demo_func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mf\">0.05</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"n\">my_ga</span> <span class=\"o\">=</span> <span class=\"n\">MyGA</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">demo_func</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">size_pop</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">lb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">ub</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n        <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1e-7</span><span class=\"p\">,</span> <span class=\"mf\">1e-7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"n\">best_y</span> <span class=\"o\">=</span> <span class=\"n\">my_ga</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'best_x:'</span><span class=\"p\">,</span> <span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'best_y:'</span><span class=\"p\">,</span> <span class=\"n\">best_y</span><span class=\"p\">)</span>\n</pre>\n<h2>feature2: GPU computation</h2>\n<p>We are developing GPU computation, which will be stable on version 1.0.0<br>\nAn example is already available: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_gpu.py\" rel=\"nofollow\">https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_gpu.py</a></p>\n<h2>feature3: continue to run</h2>\n<p>(New in version 0.3.6)<br>\nRun an algorithm for 10 iterations, and then run another 20 iterations base on the 10 iterations before:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.GA</span> <span class=\"kn\">import</span> <span class=\"n\">GA</span>\n\n<span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"n\">ga</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<h1>Quick start</h1>\n<h2>1. Differential Evolution</h2>\n<p><strong>Step1</strong>\uff1adefine your problem<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_de.py#L1\" rel=\"nofollow\">examples/demo_de.py#s1</a></p>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">min f(x1, x2, x3) = x1^2 + x2^2 + x3^2</span>\n<span class=\"sd\">s.t.</span>\n<span class=\"sd\">    x1*x2 &gt;= 1</span>\n<span class=\"sd\">    x1*x2 &lt;= 5</span>\n<span class=\"sd\">    x2 + x3 = 1</span>\n<span class=\"sd\">    0 &lt;= x1, x2, x3 &lt;= 5</span>\n<span class=\"sd\">'''</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">obj_func</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n    <span class=\"k\">return</span> <span class=\"n\">x1</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x2</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x3</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n\n\n<span class=\"n\">constraint_eq</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">constraint_ueq</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">5</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Step2</strong>: do Differential Evolution<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_de.py#L25\" rel=\"nofollow\">examples/demo_de.py#s2</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.DE</span> <span class=\"kn\">import</span> <span class=\"n\">DE</span>\n\n<span class=\"n\">de</span> <span class=\"o\">=</span> <span class=\"n\">DE</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">obj_func</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">size_pop</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"n\">lb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">ub</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n        <span class=\"n\">constraint_eq</span><span class=\"o\">=</span><span class=\"n\">constraint_eq</span><span class=\"p\">,</span> <span class=\"n\">constraint_ueq</span><span class=\"o\">=</span><span class=\"n\">constraint_ueq</span><span class=\"p\">)</span>\n\n<span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"n\">best_y</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'best_x:'</span><span class=\"p\">,</span> <span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'best_y:'</span><span class=\"p\">,</span> <span class=\"n\">best_y</span><span class=\"p\">)</span>\n</pre>\n<h2>2. Genetic Algorithm</h2>\n<p><strong>Step1</strong>\uff1adefine your problem<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga.py#L1\" rel=\"nofollow\">examples/demo_ga.py#s1</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">schaffer</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    This function has plenty of local minimum, with strong shocks</span>\n<span class=\"sd\">    global minimum at (0,0) with value 0</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mf\">0.5</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mf\">0.001</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Step2</strong>: do Genetic Algorithm<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga.py#L14\" rel=\"nofollow\">examples/demo_ga.py#s2</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.GA</span> <span class=\"kn\">import</span> <span class=\"n\">GA</span>\n\n<span class=\"n\">ga</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">schaffer</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">size_pop</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"n\">lb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">ub</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mf\">1e-7</span><span class=\"p\">)</span>\n<span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"n\">best_y</span> <span class=\"o\">=</span> <span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'best_x:'</span><span class=\"p\">,</span> <span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'best_y:'</span><span class=\"p\">,</span> <span class=\"n\">best_y</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Step3</strong>: plot the result<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga.py#L21\" rel=\"nofollow\">examples/demo_ga.py#s3</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">Y_history</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">all_history_Y</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">Y_history</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">Y_history</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">)</span>\n<span class=\"n\">Y_history</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cummin</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'line'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"Figure_1-1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1288436901e13f5ac86bd9edca2757c330415f94/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f67615f312e706e673f7261773d74727565\"></p>\n<h3>2.2 Genetic Algorithm for TSP(Travelling Salesman Problem)</h3>\n<p>Just import the <code>GA_TSP</code>, it overloads the <code>crossover</code>, <code>mutation</code> to solve the TSP</p>\n<p><strong>Step1</strong>: define your problem. Prepare your points coordinate and the distance matrix.<br>\nHere I generate the data randomly as a demo:<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_tsp.py#L1\" rel=\"nofollow\">examples/demo_ga_tsp.py#s1</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"kn\">import</span> <span class=\"n\">spatial</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n\n<span class=\"n\">points_coordinate</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">num_points</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># generate coordinate of points</span>\n<span class=\"n\">distance_matrix</span> <span class=\"o\">=</span> <span class=\"n\">spatial</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"o\">.</span><span class=\"n\">cdist</span><span class=\"p\">(</span><span class=\"n\">points_coordinate</span><span class=\"p\">,</span> <span class=\"n\">points_coordinate</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">'euclidean'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">cal_total_distance</span><span class=\"p\">(</span><span class=\"n\">routine</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''The objective function. input routine, return total distance.</span>\n<span class=\"sd\">    cal_total_distance(np.arange(num_points))</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"n\">num_points</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">routine</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">distance_matrix</span><span class=\"p\">[</span><span class=\"n\">routine</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">num_points</span><span class=\"p\">],</span> <span class=\"n\">routine</span><span class=\"p\">[(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">num_points</span><span class=\"p\">]]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_points</span><span class=\"p\">)])</span>\n</pre>\n<p><strong>Step2</strong>: do GA<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_tsp.py#L19\" rel=\"nofollow\">examples/demo_ga_tsp.py#s2</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.GA</span> <span class=\"kn\">import</span> <span class=\"n\">GA_TSP</span>\n\n<span class=\"n\">ga_tsp</span> <span class=\"o\">=</span> <span class=\"n\">GA_TSP</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">cal_total_distance</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"n\">num_points</span><span class=\"p\">,</span> <span class=\"n\">size_pop</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">prob_mut</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">best_points</span><span class=\"p\">,</span> <span class=\"n\">best_distance</span> <span class=\"o\">=</span> <span class=\"n\">ga_tsp</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Step3</strong>: Plot the result:<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ga_tsp.py#L26\" rel=\"nofollow\">examples/demo_ga_tsp.py#s3</a></p>\n<pre><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">best_points_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">best_points</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">best_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]])</span>\n<span class=\"n\">best_points_coordinate</span> <span class=\"o\">=</span> <span class=\"n\">points_coordinate</span><span class=\"p\">[</span><span class=\"n\">best_points_</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">best_points_coordinate</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">best_points_coordinate</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s1\">'o-r'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ga_tsp</span><span class=\"o\">.</span><span class=\"n\">generation_best_Y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"GA_TPS\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/961330a28cbbf7967ec1248163696fa2e882e9d2/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f67615f7473702e706e673f7261773d74727565\"></p>\n<h2>3. PSO(Particle swarm optimization)</h2>\n<h3>3.1 PSO with constraint</h3>\n<p><strong>Step1</strong>: define your problem:<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso.py#L1\" rel=\"nofollow\">examples/demo_pso.py#s1</a></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">demo_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n    <span class=\"k\">return</span> <span class=\"n\">x1</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x2</span> <span class=\"o\">-</span> <span class=\"mf\">0.05</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x3</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n</pre>\n<p><strong>Step2</strong>: do PSO<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso.py#L6\" rel=\"nofollow\">examples/demo_pso.py#s2</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.PSO</span> <span class=\"kn\">import</span> <span class=\"n\">PSO</span>\n\n<span class=\"n\">pso</span> <span class=\"o\">=</span> <span class=\"n\">PSO</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">demo_func</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">pop</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"n\">lb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">],</span> <span class=\"n\">ub</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">pso</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'best_x is '</span><span class=\"p\">,</span> <span class=\"n\">pso</span><span class=\"o\">.</span><span class=\"n\">gbest_x</span><span class=\"p\">,</span> <span class=\"s1\">'best_y is'</span><span class=\"p\">,</span> <span class=\"n\">pso</span><span class=\"o\">.</span><span class=\"n\">gbest_y</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Step3</strong>: Plot the result<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso.py#L13\" rel=\"nofollow\">examples/demo_pso.py#s3</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">pso</span><span class=\"o\">.</span><span class=\"n\">gbest_y_hist</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"PSO_TPS\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9516df19d4c2bd22b00ee636af9caf1fc1e98a33/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f70736f2e706e673f7261773d74727565\"></p>\n<p><img alt=\"pso_ani\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/839536c1f4501f4ce2bca77024f2391f0b3dd00e/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f70736f2e6769663f7261773d74727565\"><br>\n\u2191<strong>see <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso_ani.py\" rel=\"nofollow\">examples/demo_pso_ani.py</a></strong></p>\n<h3>3.2 PSO without constraint</h3>\n<p>-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_pso.py#L19\" rel=\"nofollow\">examples/demo_pso.py#s4</a></p>\n<pre><span class=\"n\">pso</span> <span class=\"o\">=</span> <span class=\"n\">PSO</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">demo_func</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">fitness</span> <span class=\"o\">=</span> <span class=\"n\">pso</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'best_x is '</span><span class=\"p\">,</span> <span class=\"n\">pso</span><span class=\"o\">.</span><span class=\"n\">gbest_x</span><span class=\"p\">,</span> <span class=\"s1\">'best_y is'</span><span class=\"p\">,</span> <span class=\"n\">pso</span><span class=\"o\">.</span><span class=\"n\">gbest_y</span><span class=\"p\">)</span>\n</pre>\n<h2>4. SA(Simulated Annealing)</h2>\n<h3>4.1 SA for multiple function</h3>\n<p><strong>Step1</strong>: define your problem<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa.py#L1\" rel=\"nofollow\">examples/demo_sa.py#s1</a></p>\n<pre><span class=\"n\">demo_func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mf\">0.05</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n</pre>\n<p><strong>Step2</strong>: do SA<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa.py#L3\" rel=\"nofollow\">examples/demo_sa.py#s2</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.SA</span> <span class=\"kn\">import</span> <span class=\"n\">SA</span>\n\n<span class=\"n\">sa</span> <span class=\"o\">=</span> <span class=\"n\">SA</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">demo_func</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">T_max</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">T_min</span><span class=\"o\">=</span><span class=\"mf\">1e-9</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">max_stay_counter</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span>\n<span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"n\">best_y</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'best_x:'</span><span class=\"p\">,</span> <span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"s1\">'best_y'</span><span class=\"p\">,</span> <span class=\"n\">best_y</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Step3</strong>: Plot the result<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa.py#L10\" rel=\"nofollow\">examples/demo_sa.py#s3</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">best_y_history</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cummin</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"sa\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c29748d9f79b6fa36b585a245618fd11963c40d4/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f73612e706e673f7261773d74727565\"></p>\n<p>Moreover, scikit-opt provide 3 types of Simulated Annealing: Fast, Boltzmann, Cauchy. See <a href=\"https://scikit-opt.github.io/scikit-opt/#/en/more_sa\" rel=\"nofollow\">more sa</a></p>\n<h3>4.2 SA for TSP</h3>\n<p><strong>Step1</strong>: oh, yes, define your problems. To boring to copy this step.</p>\n<p><strong>Step2</strong>: DO SA for TSP<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa_tsp.py#L21\" rel=\"nofollow\">examples/demo_sa_tsp.py#s2</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.SA</span> <span class=\"kn\">import</span> <span class=\"n\">SA_TSP</span>\n\n<span class=\"n\">sa_tsp</span> <span class=\"o\">=</span> <span class=\"n\">SA_TSP</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">cal_total_distance</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_points</span><span class=\"p\">),</span> <span class=\"n\">T_max</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">T_min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"o\">=</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">num_points</span><span class=\"p\">)</span>\n\n<span class=\"n\">best_points</span><span class=\"p\">,</span> <span class=\"n\">best_distance</span> <span class=\"o\">=</span> <span class=\"n\">sa_tsp</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">best_points</span><span class=\"p\">,</span> <span class=\"n\">best_distance</span><span class=\"p\">,</span> <span class=\"n\">cal_total_distance</span><span class=\"p\">(</span><span class=\"n\">best_points</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Step3</strong>: plot the result<br>\n-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa_tsp.py#L28\" rel=\"nofollow\">examples/demo_sa_tsp.py#s3</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matplotlib.ticker</span> <span class=\"kn\">import</span> <span class=\"n\">FormatStrFormatter</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">best_points_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">best_points</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">best_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]])</span>\n<span class=\"n\">best_points_coordinate</span> <span class=\"o\">=</span> <span class=\"n\">points_coordinate</span><span class=\"p\">[</span><span class=\"n\">best_points_</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">sa_tsp</span><span class=\"o\">.</span><span class=\"n\">best_y_history</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s2\">\"Iteration\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s2\">\"Distance\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">best_points_coordinate</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">best_points_coordinate</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n           <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">'o'</span><span class=\"p\">,</span> <span class=\"n\">markerfacecolor</span><span class=\"o\">=</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">'-'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">xaxis</span><span class=\"o\">.</span><span class=\"n\">set_major_formatter</span><span class=\"p\">(</span><span class=\"n\">FormatStrFormatter</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%.3f</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">yaxis</span><span class=\"o\">.</span><span class=\"n\">set_major_formatter</span><span class=\"p\">(</span><span class=\"n\">FormatStrFormatter</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%.3f</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s2\">\"Longitude\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s2\">\"Latitude\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"sa\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6d9bd4f695450c9b85bf03592b08114ff18e171/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f73615f7473702e706e673f7261773d74727565\"></p>\n<p>More: Plot the animation:</p>\n<p><img alt=\"sa\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50d788fe06155a6f80bd1a5b0d7597f2be711772/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f73615f747370312e6769663f7261773d74727565\"><br>\n\u2191<strong>see <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_sa_tsp.py\" rel=\"nofollow\">examples/demo_sa_tsp.py</a></strong></p>\n<h2>5. ACA (Ant Colony Algorithm) for tsp</h2>\n<p>-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_aca_tsp.py#L17\" rel=\"nofollow\">examples/demo_aca_tsp.py#s2</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.ACA</span> <span class=\"kn\">import</span> <span class=\"n\">ACA_TSP</span>\n\n<span class=\"n\">aca</span> <span class=\"o\">=</span> <span class=\"n\">ACA_TSP</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">cal_total_distance</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"n\">num_points</span><span class=\"p\">,</span>\n              <span class=\"n\">size_pop</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n              <span class=\"n\">distance_matrix</span><span class=\"o\">=</span><span class=\"n\">distance_matrix</span><span class=\"p\">)</span>\n\n<span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"n\">best_y</span> <span class=\"o\">=</span> <span class=\"n\">aca</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"ACA\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae7877bb16e5c0a5f6bada228afe12b3b3bc8834/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f6163615f7473702e706e673f7261773d74727565\"></p>\n<h2>6. immune algorithm (IA)</h2>\n<p>-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_ia.py#L6\" rel=\"nofollow\">examples/demo_ia.py#s2</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sko.IA</span> <span class=\"kn\">import</span> <span class=\"n\">IA_TSP</span>\n\n<span class=\"n\">ia_tsp</span> <span class=\"o\">=</span> <span class=\"n\">IA_TSP</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">cal_total_distance</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"n\">num_points</span><span class=\"p\">,</span> <span class=\"n\">size_pop</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"n\">prob_mut</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                <span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.95</span><span class=\"p\">)</span>\n<span class=\"n\">best_points</span><span class=\"p\">,</span> <span class=\"n\">best_distance</span> <span class=\"o\">=</span> <span class=\"n\">ia_tsp</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'best routine:'</span><span class=\"p\">,</span> <span class=\"n\">best_points</span><span class=\"p\">,</span> <span class=\"s1\">'best_distance:'</span><span class=\"p\">,</span> <span class=\"n\">best_distance</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"IA\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fef1b4db86d1c7530d5af940a3d07efc12f96d9/68747470733a2f2f6769746875622e636f6d2f67756f666569393938372f70696374757265735f666f725f626c6f672f626c6f622f6d61737465722f6865757269737469635f616c676f726974686d2f6961322e706e673f7261773d74727565\"></p>\n<h2>7. Artificial Fish Swarm Algorithm (AFSA)</h2>\n<p>-&gt; Demo code: <a href=\"https://github.com/guofei9987/scikit-opt/blob/master/examples/demo_afsa.py#L1\" rel=\"nofollow\">examples/demo_afsa.py#s1</a></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">x1</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x1</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">x2</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x2</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">sko.AFSA</span> <span class=\"kn\">import</span> <span class=\"n\">AFSA</span>\n\n<span class=\"n\">afsa</span> <span class=\"o\">=</span> <span class=\"n\">AFSA</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">size_pop</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span>\n            <span class=\"n\">max_try_num</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">visual</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n            <span class=\"n\">q</span><span class=\"o\">=</span><span class=\"mf\">0.98</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"n\">best_y</span> <span class=\"o\">=</span> <span class=\"n\">afsa</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">best_x</span><span class=\"p\">,</span> <span class=\"n\">best_y</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7048607, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "5364c78c07bf56255b97244ff3b2e6cd", "sha256": "1963adaf43b0a42d233c2020d21ab32566f895e674e275189599e0b0a2a1c2f4"}, "downloads": -1, "filename": "scikit_opt-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5364c78c07bf56255b97244ff3b2e6cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 16417, "upload_time": "2019-09-20T09:10:31", "upload_time_iso_8601": "2019-09-20T09:10:31.126411Z", "url": "https://files.pythonhosted.org/packages/02/70/d345818f77cfe310ea937267b06ed98a8c7912a9eb4edc28db349fcae54b/scikit_opt-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "6bccc9cc01544373b66a14210c6e19b1", "sha256": "ab71d546999cfeb158da3aaa014e76d3f77015ce21fc9017e16d0bc8da91e9fb"}, "downloads": -1, "filename": "scikit_opt-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6bccc9cc01544373b66a14210c6e19b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 17436, "upload_time": "2019-10-25T09:31:40", "upload_time_iso_8601": "2019-10-25T09:31:40.547455Z", "url": "https://files.pythonhosted.org/packages/d9/44/f31102fcc5d416e669d5c119f541566f97ea429ddbe62f2f76bce327edbd/scikit_opt-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "518aedfe102f369ff3ca7395b137ad17", "sha256": "41f5cf4e338f5561481ec3ae3e523ef7687f68e4ea9d8eea9ba0b041dd47abbd"}, "downloads": -1, "filename": "scikit-opt-0.3.2.tar.gz", "has_sig": false, "md5_digest": "518aedfe102f369ff3ca7395b137ad17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 13832, "upload_time": "2019-10-25T09:31:42", "upload_time_iso_8601": "2019-10-25T09:31:42.676000Z", "url": "https://files.pythonhosted.org/packages/8c/85/fcdb3359190b7a8f460016674b69f166895885ebf274e8837956c84b6814/scikit-opt-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "b5336758ee6c1c5857c0760ac2023180", "sha256": "f133dfd50a7b31e5a1f8b1785040bca4524bf9f57057a397787bc79a10cda7d1"}, "downloads": -1, "filename": "scikit_opt-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b5336758ee6c1c5857c0760ac2023180", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 19520, "upload_time": "2019-11-19T02:34:12", "upload_time_iso_8601": "2019-11-19T02:34:12.571680Z", "url": "https://files.pythonhosted.org/packages/c1/57/e11637081aaeafe038351fda7d49b3f7f7f8e01e8ad613b7b2f989db4e66/scikit_opt-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c24f3af276c64cfecfc53f0186c15f7c", "sha256": "f38e11599d963c6c2774aba9cd25075897d72c52c8bd81f2e6f2461c8f956656"}, "downloads": -1, "filename": "scikit-opt-0.3.3.tar.gz", "has_sig": false, "md5_digest": "c24f3af276c64cfecfc53f0186c15f7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 16331, "upload_time": "2019-11-19T02:34:16", "upload_time_iso_8601": "2019-11-19T02:34:16.198788Z", "url": "https://files.pythonhosted.org/packages/27/e9/a2d3c280a7493f69ccecb7b66755513e7fa03279413a064b7ea60303b24b/scikit-opt-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "f40f56431755bbe74815b276c925e77c", "sha256": "f1bde74b36d161079ab51931b45984be5b5039570f9194565553d5625d8ccfb7"}, "downloads": -1, "filename": "scikit_opt-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f40f56431755bbe74815b276c925e77c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 20074, "upload_time": "2019-11-21T16:12:07", "upload_time_iso_8601": "2019-11-21T16:12:07.333640Z", "url": "https://files.pythonhosted.org/packages/f0/9d/3f4368c1e62f7025b74c599a839ce740c25b95d2ac4be6cdc5f8c50ff353/scikit_opt-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "751747fdb001e20d3ada7a07e56c2478", "sha256": "6dc5794413cfc676bd40910173232f2d049291909b5e4a466116bacc6c9de6ce"}, "downloads": -1, "filename": "scikit-opt-0.3.4.tar.gz", "has_sig": false, "md5_digest": "751747fdb001e20d3ada7a07e56c2478", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 18063, "upload_time": "2019-11-21T16:12:11", "upload_time_iso_8601": "2019-11-21T16:12:11.054577Z", "url": "https://files.pythonhosted.org/packages/c7/de/27c7cece134fa3842562131c563e7a151209198d54ebe5790a84cc0d952a/scikit-opt-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "27174907ac281d94614d1fbc74c3657b", "sha256": "bac5899dea4c52df426ab10b8bf83c1b92cddabb1199caa2286b7d2653528517"}, "downloads": -1, "filename": "scikit_opt-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "27174907ac281d94614d1fbc74c3657b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 21342, "upload_time": "2019-11-25T13:21:26", "upload_time_iso_8601": "2019-11-25T13:21:26.205797Z", "url": "https://files.pythonhosted.org/packages/38/35/ee93af17916d8b4afe57a8fe66b7befab8306f47b2bc58184d13e40661f0/scikit_opt-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37be8bc5737eb50020241ab5be7e5a9f", "sha256": "20540cf1d6f5a64f581a7fe97438aef268a7637e1aacfd2c0cd252ac51394197"}, "downloads": -1, "filename": "scikit-opt-0.3.5.tar.gz", "has_sig": false, "md5_digest": "37be8bc5737eb50020241ab5be7e5a9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 19613, "upload_time": "2019-11-25T13:21:29", "upload_time_iso_8601": "2019-11-25T13:21:29.552352Z", "url": "https://files.pythonhosted.org/packages/a3/6e/61b42a69c9b6f3c38f4f882c838d4096d97b6cbae4116c4201dd8edb39a7/scikit-opt-0.3.5.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "1295fc956db8423bdfb160e7060190c9", "sha256": "8c10bd99733ec6347f624fe727bc009cf34309385cb20640b80ab81ffccf63e8"}, "downloads": -1, "filename": "scikit_opt-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1295fc956db8423bdfb160e7060190c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 30374, "upload_time": "2019-12-02T09:31:49", "upload_time_iso_8601": "2019-12-02T09:31:49.672273Z", "url": "https://files.pythonhosted.org/packages/b1/c4/35919cabffc2b5c76a792fed3c0de3548a9eed3ed1a86f6f2a4d25a24680/scikit_opt-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8988dc74b68ffce940f0a2746fe9f598", "sha256": "61a453a4446006dbf67b4cf8c52930a0e5ca6166c73a66e41b88efb1f4c13f3c"}, "downloads": -1, "filename": "scikit-opt-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8988dc74b68ffce940f0a2746fe9f598", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25015, "upload_time": "2019-12-02T09:31:52", "upload_time_iso_8601": "2019-12-02T09:31:52.024322Z", "url": "https://files.pythonhosted.org/packages/1f/31/8647a41ab8c86a88a8a4b4a15402958f9f6233ffaf000d5615f8c6a1bec5/scikit-opt-0.5.0.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "23b89cbb53ee9ed4e78977ec25afb123", "sha256": "16ce23358a6ba0212fe5b503a1985588c7c4ee7cd416ebae20a294eb583c08b0"}, "downloads": -1, "filename": "scikit_opt-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "23b89cbb53ee9ed4e78977ec25afb123", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 30456, "upload_time": "2019-12-22T07:18:59", "upload_time_iso_8601": "2019-12-22T07:18:59.484690Z", "url": "https://files.pythonhosted.org/packages/7f/81/f789a76fb450b796e98c6c2df591917ebeb9e177d6b229ffb07dce9a278a/scikit_opt-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b1afe118cd3bd5b292f9d95876df10c", "sha256": "53adb430fe95c9134a0c9659ba093cf4f4d78f59f624a2b84486e15017cf8240"}, "downloads": -1, "filename": "scikit-opt-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3b1afe118cd3bd5b292f9d95876df10c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25248, "upload_time": "2019-12-22T07:19:01", "upload_time_iso_8601": "2019-12-22T07:19:01.253031Z", "url": "https://files.pythonhosted.org/packages/ff/62/60e6d3ce3e3a630919c6909b329d0c0bcba38525470608a1e4dd4b487d21/scikit-opt-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "a1b0372f59ec3dd836f2f9e8ee60cf0c", "sha256": "dc89209f042c6155bacf26c17d931e19c3a0a29980856a63d28aec04fa78f785"}, "downloads": -1, "filename": "scikit_opt-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a1b0372f59ec3dd836f2f9e8ee60cf0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 30676, "upload_time": "2019-12-23T18:41:55", "upload_time_iso_8601": "2019-12-23T18:41:55.527483Z", "url": "https://files.pythonhosted.org/packages/86/e9/1aa54fc762ae83579f344c5ed6430fa8b216e0dfa36111e83b64e1e53409/scikit_opt-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66856e9139c1359b1e379d9e244c22ab", "sha256": "ebec4fc2eeddf8b0484c48470096fcf6db1c530401fcd78c83bd117051aa4102"}, "downloads": -1, "filename": "scikit-opt-0.5.3.tar.gz", "has_sig": false, "md5_digest": "66856e9139c1359b1e379d9e244c22ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25252, "upload_time": "2019-12-23T18:41:57", "upload_time_iso_8601": "2019-12-23T18:41:57.446497Z", "url": "https://files.pythonhosted.org/packages/41/f0/6532440283dacc72d899bd92e80d12ddef21fa7a490d0713bfbbede99fe4/scikit-opt-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "fcbb42a7745f9f98d3bcb77dd8057860", "sha256": "658e1cb1b95eadcfcbe64b368d75c26a9e119748be61ad83829065877a8091bc"}, "downloads": -1, "filename": "scikit_opt-0.5.4-py3-none-any.whl", "has_sig": false, "md5_digest": "fcbb42a7745f9f98d3bcb77dd8057860", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 30702, "upload_time": "2019-12-26T12:27:05", "upload_time_iso_8601": "2019-12-26T12:27:05.768977Z", "url": "https://files.pythonhosted.org/packages/37/4b/0018e4acf81b983953abd25bd5c698a313d2dd4003941fbc597df01828d9/scikit_opt-0.5.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f272f47a91f9839aa67e824ecec405dd", "sha256": "3da700db96b2472283e9e274aaa25bb8e870d98664e07d313c1dc00e767e9c46"}, "downloads": -1, "filename": "scikit-opt-0.5.4.tar.gz", "has_sig": false, "md5_digest": "f272f47a91f9839aa67e824ecec405dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25265, "upload_time": "2019-12-26T12:27:08", "upload_time_iso_8601": "2019-12-26T12:27:08.107576Z", "url": "https://files.pythonhosted.org/packages/03/2e/2a83bed45bfb262505362f318d75e7c67fa62b7c538909831d16c5a43d51/scikit-opt-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "1eed56db1b01f3b011cff5b8c1ff5b59", "sha256": "a32aa0ef5ffd986c1dd543f8625b647b1c6ef0742f8b14f7d89b93d746a7ad45"}, "downloads": -1, "filename": "scikit_opt-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1eed56db1b01f3b011cff5b8c1ff5b59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 32869, "upload_time": "2020-01-31T17:27:57", "upload_time_iso_8601": "2020-01-31T17:27:57.128903Z", "url": "https://files.pythonhosted.org/packages/86/25/38f81eb4bb81ef21814494a263631fd281a689d1625a88c195d5de8747ac/scikit_opt-0.5.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59e6a010afc9535ad4ad4e71bf1d68bc", "sha256": "fdb6bda513382faf9160dc9acf07b9216a0230da3d04d956c351e1cb220fc4f5"}, "downloads": -1, "filename": "scikit-opt-0.5.5.tar.gz", "has_sig": false, "md5_digest": "59e6a010afc9535ad4ad4e71bf1d68bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26325, "upload_time": "2020-01-31T17:27:58", "upload_time_iso_8601": "2020-01-31T17:27:58.887931Z", "url": "https://files.pythonhosted.org/packages/1f/20/769d480e9b5c4ca902af7955315eb29ec6aeffd1e85a7bfdfa7bcf39c52b/scikit-opt-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "e21db8b19a5bcdd6f1eac74953e81c44", "sha256": "2d02558c5a0e5d1bb148490bfbca1a458fb56772c60246e9355f820a6be0fdac"}, "downloads": -1, "filename": "scikit_opt-0.5.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e21db8b19a5bcdd6f1eac74953e81c44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27030, "upload_time": "2020-04-18T15:25:37", "upload_time_iso_8601": "2020-04-18T15:25:37.350264Z", "url": "https://files.pythonhosted.org/packages/d5/7b/0dd4d95e82749ede54654f5b802014b283a479c1161b828552a46a3c2572/scikit_opt-0.5.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d843bb6e6c2aaf4afa2c5d723de38b7", "sha256": "288dd1c4e27be972dbaa2f63ff04025461c7cee71466aeaec57caf7620bb61c9"}, "downloads": -1, "filename": "scikit-opt-0.5.6.tar.gz", "has_sig": false, "md5_digest": "5d843bb6e6c2aaf4afa2c5d723de38b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22044, "upload_time": "2020-04-18T15:25:39", "upload_time_iso_8601": "2020-04-18T15:25:39.935545Z", "url": "https://files.pythonhosted.org/packages/0f/f3/a5e631a84f63800f0a04a03bbedeae3e612ed54821d34947c9d2ba4697bc/scikit-opt-0.5.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e21db8b19a5bcdd6f1eac74953e81c44", "sha256": "2d02558c5a0e5d1bb148490bfbca1a458fb56772c60246e9355f820a6be0fdac"}, "downloads": -1, "filename": "scikit_opt-0.5.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e21db8b19a5bcdd6f1eac74953e81c44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27030, "upload_time": "2020-04-18T15:25:37", "upload_time_iso_8601": "2020-04-18T15:25:37.350264Z", "url": "https://files.pythonhosted.org/packages/d5/7b/0dd4d95e82749ede54654f5b802014b283a479c1161b828552a46a3c2572/scikit_opt-0.5.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d843bb6e6c2aaf4afa2c5d723de38b7", "sha256": "288dd1c4e27be972dbaa2f63ff04025461c7cee71466aeaec57caf7620bb61c9"}, "downloads": -1, "filename": "scikit-opt-0.5.6.tar.gz", "has_sig": false, "md5_digest": "5d843bb6e6c2aaf4afa2c5d723de38b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22044, "upload_time": "2020-04-18T15:25:39", "upload_time_iso_8601": "2020-04-18T15:25:39.935545Z", "url": "https://files.pythonhosted.org/packages/0f/f3/a5e631a84f63800f0a04a03bbedeae3e612ed54821d34947c9d2ba4697bc/scikit-opt-0.5.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:28 2020"}