{"info": {"author": "Juan-Pablo Scaletti", "author_email": "juanpablo@jpscaletti.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3"], "description": "# TextEditor\n\nProgrammatically open the system's editor from your Python program (like [webbrowser](https://docs.python.org/3.7/library/webbrowser.html) but for text editors).\n\nUnlike other libraries, *TextEditor* makes an effort to find the text editor the users really prefer, specially for those that doesn't know what an `EDITOR` environment variable is.\n\n```python\nimport texteditor\n\ntext = texteditor.open('This is the starting content')\n```\n\nOpens a temporary file with some content to edit, and returns the new content when\nthe user closes the editor.\n\n```python\ntext = texteditor.open(filename='README.md')\n\n# text = texteditor.open(\"This will be used instead of the file content\", filename='README.md')\n```\n\nYou can also edit an existing text file. If the file cannot be opened, an `OSError` is raised.\n\n\n## Installation\n\nUsing `pip` of course!\n\n```\npython -m pip install texteditor\n```\n\n## Usage\n\n*texteditor*.**open**(text=None, filename=None, extension='txt', encoding=None)\n\nOpens `filename` or a new temporary file in the default editor.\n\n- *text*:\n    The starting content for the edited file. This will also be used instead of the\n    original contents of `filename` if one is also defined.\n\n- *filename*:\n    Edit this file instead of a new temporary one.\n\n- *extension*:\n    When editing a new temporary file, this will help the editor recognize the\n    intended filetype, so syntax highlighting and custom settings for that\n    filetype can be used. Examples: `txt`, `md`, `ini`.\n    Ignored if `filename` is used.\n\n- *encoding*:\n    To encode the content and decode the result, `texteditor.open()` uses the default\n    encoding for the platform, but you can use an `encoding` argument to specify\n    any text encoding supported by Python.\n\n\n## How it Works\n\n`texteditor.open()` first looks for the `$EDITOR` environment variable. If set, it uses\nthe value as-is, including any command-line argument, without fallbacks.\n\nIf no `$EDITOR` is set, it will try to guess.\n\nOn MacOS, it calls the system default for *editing* that file extension.\n\nIn other operating systems, the function will search through a *very short* list of known editors, and use the\nfirst one that founds.\n\nYou might notice that vim and Emacs are not in that short list, that's because:\n\n1. If you are using it, you know what the `EDITOR` variable is, and you probably has set it already.\n2. If you aren't using it, finding yourself in their UI for the first time is going to be super confusing.\n   In fact \"How to exit vim\" is a common Stack Overflow question. Having to google how to set an EDITOR\n   variable is a less scary alternative.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jpscaletti/texteditor", "keywords": "", "license": "Apache License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "texteditor", "package_url": "https://pypi.org/project/texteditor/", "platform": "", "project_url": "https://pypi.org/project/texteditor/", "project_urls": {"Homepage": "https://github.com/jpscaletti/texteditor"}, "release_url": "https://pypi.org/project/texteditor/1.0.6/", "requires_dist": ["pytest ; extra == 'dev'", "tox ; extra == 'dev'", "flake8 ; extra == 'dev'", "pytest ; extra == 'testing'"], "requires_python": ">=3.5,<4.0", "summary": "Like webbrowser, but for the text editor.", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TextEditor</h1>\n<p>Programmatically open the system's editor from your Python program (like <a href=\"https://docs.python.org/3.7/library/webbrowser.html\" rel=\"nofollow\">webbrowser</a> but for text editors).</p>\n<p>Unlike other libraries, <em>TextEditor</em> makes an effort to find the text editor the users really prefer, specially for those that doesn't know what an <code>EDITOR</code> environment variable is.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">texteditor</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">texteditor</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'This is the starting content'</span><span class=\"p\">)</span>\n</pre>\n<p>Opens a temporary file with some content to edit, and returns the new content when\nthe user closes the editor.</p>\n<pre><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">texteditor</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'README.md'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># text = texteditor.open(\"This will be used instead of the file content\", filename='README.md')</span>\n</pre>\n<p>You can also edit an existing text file. If the file cannot be opened, an <code>OSError</code> is raised.</p>\n<h2>Installation</h2>\n<p>Using <code>pip</code> of course!</p>\n<pre><code>python -m pip install texteditor\n</code></pre>\n<h2>Usage</h2>\n<p><em>texteditor</em>.<strong>open</strong>(text=None, filename=None, extension='txt', encoding=None)</p>\n<p>Opens <code>filename</code> or a new temporary file in the default editor.</p>\n<ul>\n<li>\n<p><em>text</em>:\nThe starting content for the edited file. This will also be used instead of the\noriginal contents of <code>filename</code> if one is also defined.</p>\n</li>\n<li>\n<p><em>filename</em>:\nEdit this file instead of a new temporary one.</p>\n</li>\n<li>\n<p><em>extension</em>:\nWhen editing a new temporary file, this will help the editor recognize the\nintended filetype, so syntax highlighting and custom settings for that\nfiletype can be used. Examples: <code>txt</code>, <code>md</code>, <code>ini</code>.\nIgnored if <code>filename</code> is used.</p>\n</li>\n<li>\n<p><em>encoding</em>:\nTo encode the content and decode the result, <code>texteditor.open()</code> uses the default\nencoding for the platform, but you can use an <code>encoding</code> argument to specify\nany text encoding supported by Python.</p>\n</li>\n</ul>\n<h2>How it Works</h2>\n<p><code>texteditor.open()</code> first looks for the <code>$EDITOR</code> environment variable. If set, it uses\nthe value as-is, including any command-line argument, without fallbacks.</p>\n<p>If no <code>$EDITOR</code> is set, it will try to guess.</p>\n<p>On MacOS, it calls the system default for <em>editing</em> that file extension.</p>\n<p>In other operating systems, the function will search through a <em>very short</em> list of known editors, and use the\nfirst one that founds.</p>\n<p>You might notice that vim and Emacs are not in that short list, that's because:</p>\n<ol>\n<li>If you are using it, you know what the <code>EDITOR</code> variable is, and you probably has set it already.</li>\n<li>If you aren't using it, finding yourself in their UI for the first time is going to be super confusing.\nIn fact \"How to exit vim\" is a common Stack Overflow question. Having to google how to set an EDITOR\nvariable is a less scary alternative.</li>\n</ol>\n\n          </div>"}, "last_serial": 6220448, "releases": {"1.0.6": [{"comment_text": "", "digests": {"md5": "e865f10e921c0539af354ce1014a6cb1", "sha256": "8f4f1bec42e22f971b77caebef82d33d5758dc75c0a0b3185a33aad7423a7f9e"}, "downloads": -1, "filename": "texteditor-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e865f10e921c0539af354ce1014a6cb1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8477, "upload_time": "2019-11-30T03:51:58", "upload_time_iso_8601": "2019-11-30T03:51:58.713524Z", "url": "https://files.pythonhosted.org/packages/18/f6/e8b918ab3c02d355fd23b0590c497ddba796945fe812fed7646a6a7576e1/texteditor-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3efa76d714ee6798061bac7230ea55b", "sha256": "6faa3478d0ffd879f55504ebac60403a1bd94c761d061444e11a6cb87f6a8689"}, "downloads": -1, "filename": "texteditor-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b3efa76d714ee6798061bac7230ea55b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 7734, "upload_time": "2019-11-30T03:52:00", "upload_time_iso_8601": "2019-11-30T03:52:00.246035Z", "url": "https://files.pythonhosted.org/packages/26/63/888b2b42362ad904b62285e81f77273deb3b9a8657d57ac594c50b595cf5/texteditor-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e865f10e921c0539af354ce1014a6cb1", "sha256": "8f4f1bec42e22f971b77caebef82d33d5758dc75c0a0b3185a33aad7423a7f9e"}, "downloads": -1, "filename": "texteditor-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e865f10e921c0539af354ce1014a6cb1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8477, "upload_time": "2019-11-30T03:51:58", "upload_time_iso_8601": "2019-11-30T03:51:58.713524Z", "url": "https://files.pythonhosted.org/packages/18/f6/e8b918ab3c02d355fd23b0590c497ddba796945fe812fed7646a6a7576e1/texteditor-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3efa76d714ee6798061bac7230ea55b", "sha256": "6faa3478d0ffd879f55504ebac60403a1bd94c761d061444e11a6cb87f6a8689"}, "downloads": -1, "filename": "texteditor-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b3efa76d714ee6798061bac7230ea55b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 7734, "upload_time": "2019-11-30T03:52:00", "upload_time_iso_8601": "2019-11-30T03:52:00.246035Z", "url": "https://files.pythonhosted.org/packages/26/63/888b2b42362ad904b62285e81f77273deb3b9a8657d57ac594c50b595cf5/texteditor-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:04 2020"}