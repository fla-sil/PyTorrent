{"info": {"author": "Chengyu Tang", "author_email": "chyutang@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# LeetCode Toolkit (lctk)\nGitHub page: https://github.com/chengyutang/lctk\n\n**lctk** is tool for creating LeetCode test cases for the ease of local testing.\n\n## 1. Introduction\n[LeetCode](https://leetcode.com) is a website where people can improve their coding skills and get prepared for techical interviews by solving coding problems and discussing with other people. Users can use the online judge (OJ) to run and test their codes within the brower. But the OJ could sometimes be slow, due to network limit or server overflow, which is not very convenient and efficient, especially when submitting frequently. Therefore, some users prefer to write and test their codes locally for a more convenient test (and a better looking submission history :p).\n\nBut for some of the problems, where the inputs are customised data structures, such as linked list, binary tree and graph, it's difficult to come up with test cases locally, while LeetCode uses built-in data structures to represent them, which makes it much easier to create test cases. For example, linked lists and binary trees are represented by arrays, and graphs are represented by dictionaries. \n\nThis tool helps users with creating linked list, binary tree, and graph locally from array or dictionary, for the ease of local testing.\n\n## 2. Installation\nIf pip is installed, type the following command in the terminal to install this package\n```sh\npip install lctk\n```\nTo install pip, refer [here](https://pip.pypa.io/en/stable/installing/).\n\n## 3. Usage\nFirst import this package simply using\n```python\nimport lctk\n```\n\n### 3.1 Linked List\n**API:**\n```python\nlctk.linkedList(arr, cyclePos = -1)\n```\nLinked list is represented by array in LeetCode's console. To create the equivalent linked list from an array, use the following command\n```python\nhead = lctk.linkedList(arr)\n```\n`head` would be the head node (a `ListNode` object) of the linked list represented by the input array `arr`.\n\nAdditionally, if you want to construct a linked list that has a cycle, just simply specify the position that the cycle begins (0-indexed). For example:\n```python\nhead = lctk.linkedList(arr, 2)\n```\nTo print the values in a linked list, use the `linkedList2Arr` function, which also works with linked list that has a cycle.\n```python\narr = lctk.linkedList2Arr(linkedList)\nprint(arr)\n```\nPS: the definition of ListNode:\n```python\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n```\n\n### 3.2 Binary Tree\nSimilar with linked list, a binary tree is also represented by an array in LeetCode's console, and the order is a layer-wise, left-to-right travesal of the tree.\n\nGiven an input array `arr` that represents a binary tree, the following command\n```python\nroot = lctk.binaryTree(arr)\n ```\nwhere `root\t` would be the root node (a `TreeNode` object) of the equivalent binary tree.\n\nYou can also do the opposite, getting the array representation of a binary tree given a TreeNode `root` using\n```python\narr = lctk.binaryTree2Arr(root)\n```\nExample:\n```python\n>>> inArr = [1, 2, 3, 4, None, 5, None, 6, None, None, None, 7\n>>> root = lctk.binaryTree(inArr)\n>>> outArr = lctk.binaryTree2Arr(root)\n>>> inArr == outArr\nTrue\n```\nThe definition of TreeNode:\n```python\nclass TreeNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.left = None\n\t\tself.right = None\n```\n\n### 3.3 Graph (Directed and Undirected)\nIn LeetCode, a graph is typically represented by a dictionary, just like that in [Leetcode #133: Clone Graph](https://leetcode.com/problems/clone-graph/).\n```python\nroot = lctk.graph(inDict)\n```\n`root` would be the root node (a `GraphNode` object) of the graph represented by the input dictionary `inDict`.\nThe definition of graph node:\n\nAs always, you can also get the dictionary representation given a GraphNode `root` using\n```python\noutDict = lctk.graph2Dict(root)\n```\nExample:\n```python\n>>> inDict = {\"$id\":\"1\",\"neighbors\":[{\"$id\":\"2\",\"neighbors\":[{\"$ref\":\"1\"},{\"$id\":\"3\",\"neighbors\":[{\"$ref\":\"2\"},{\"$id\":\"4\",\"neighbors\":[{\"$ref\":\"3\"},{\"$ref\":\"1\"}],\"val\":4}],\"val\":3}],\"val\":2},{\"$ref\":\"4\"}],\"val\":1}\n>>> root = lctk.graph(inDict)\n>>> outDict = lctk.graph2Dict(root)\n>>> inDict == outDict\nTrue\n```\nThe definition of GraphNode:\n```python\nclass GraphNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.neighbors = []\n```\n## 4. Conclusion\nIf there were any error or suggestions, please let me know through the GitHub repository page shown above.\n\nHappy LeetCoding!\n\n## Version History\n0.0.1: Initial version.\n\n0.0.2: Added supported for linked list with cycle.\n\n0.0.3: Fixed bugs.\n\n0.0.4: Corrected the wrong usage description of linkedList API.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chengyutang/lctk", "keywords": "LeetCode", "license": "", "maintainer": "", "maintainer_email": "", "name": "lctk", "package_url": "https://pypi.org/project/lctk/", "platform": "", "project_url": "https://pypi.org/project/lctk/", "project_urls": {"Homepage": "https://github.com/chengyutang/lctk"}, "release_url": "https://pypi.org/project/lctk/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "A tool to create linked list, binary tree and graph from array or dictionary for the ease of local test", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>LeetCode Toolkit (lctk)</h1>\n<p>GitHub page: <a href=\"https://github.com/chengyutang/lctk\" rel=\"nofollow\">https://github.com/chengyutang/lctk</a></p>\n<p><strong>lctk</strong> is tool for creating LeetCode test cases for the ease of local testing.</p>\n<h2>1. Introduction</h2>\n<p><a href=\"https://leetcode.com\" rel=\"nofollow\">LeetCode</a> is a website where people can improve their coding skills and get prepared for techical interviews by solving coding problems and discussing with other people. Users can use the online judge (OJ) to run and test their codes within the brower. But the OJ could sometimes be slow, due to network limit or server overflow, which is not very convenient and efficient, especially when submitting frequently. Therefore, some users prefer to write and test their codes locally for a more convenient test (and a better looking submission history :p).</p>\n<p>But for some of the problems, where the inputs are customised data structures, such as linked list, binary tree and graph, it's difficult to come up with test cases locally, while LeetCode uses built-in data structures to represent them, which makes it much easier to create test cases. For example, linked lists and binary trees are represented by arrays, and graphs are represented by dictionaries.</p>\n<p>This tool helps users with creating linked list, binary tree, and graph locally from array or dictionary, for the ease of local testing.</p>\n<h2>2. Installation</h2>\n<p>If pip is installed, type the following command in the terminal to install this package</p>\n<pre>pip install lctk\n</pre>\n<p>To install pip, refer <a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"nofollow\">here</a>.</p>\n<h2>3. Usage</h2>\n<p>First import this package simply using</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">lctk</span>\n</pre>\n<h3>3.1 Linked List</h3>\n<p><strong>API:</strong></p>\n<pre><span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">linkedList</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">cyclePos</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Linked list is represented by array in LeetCode's console. To create the equivalent linked list from an array, use the following command</p>\n<pre><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">linkedList</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n</pre>\n<p><code>head</code> would be the head node (a <code>ListNode</code> object) of the linked list represented by the input array <code>arr</code>.</p>\n<p>Additionally, if you want to construct a linked list that has a cycle, just simply specify the position that the cycle begins (0-indexed). For example:</p>\n<pre><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">linkedList</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>To print the values in a linked list, use the <code>linkedList2Arr</code> function, which also works with linked list that has a cycle.</p>\n<pre><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">linkedList2Arr</span><span class=\"p\">(</span><span class=\"n\">linkedList</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n</pre>\n<p>PS: the definition of ListNode:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ListNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<h3>3.2 Binary Tree</h3>\n<p>Similar with linked list, a binary tree is also represented by an array in LeetCode's console, and the order is a layer-wise, left-to-right travesal of the tree.</p>\n<p>Given an input array <code>arr</code> that represents a binary tree, the following command</p>\n<pre><span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">binaryTree</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n</pre>\n<p>where <code>root</code> would be the root node (a <code>TreeNode</code> object) of the equivalent binary tree.</p>\n<p>You can also do the opposite, getting the array representation of a binary tree given a TreeNode <code>root</code> using</p>\n<pre><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">binaryTree2Arr</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">inArr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">7</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">binaryTree</span><span class=\"p\">(</span><span class=\"n\">inArr</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">outArr</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">binaryTree2Arr</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">inArr</span> <span class=\"o\">==</span> <span class=\"n\">outArr</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The definition of TreeNode:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<h3>3.3 Graph (Directed and Undirected)</h3>\n<p>In LeetCode, a graph is typically represented by a dictionary, just like that in <a href=\"https://leetcode.com/problems/clone-graph/\" rel=\"nofollow\">Leetcode #133: Clone Graph</a>.</p>\n<pre><span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">(</span><span class=\"n\">inDict</span><span class=\"p\">)</span>\n</pre>\n<p><code>root</code> would be the root node (a <code>GraphNode</code> object) of the graph represented by the input dictionary <code>inDict</code>.\nThe definition of graph node:</p>\n<p>As always, you can also get the dictionary representation given a GraphNode <code>root</code> using</p>\n<pre><span class=\"n\">outDict</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">graph2Dict</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">inDict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"$id\"</span><span class=\"p\">:</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"s2\">\"neighbors\"</span><span class=\"p\">:[{</span><span class=\"s2\">\"$id\"</span><span class=\"p\">:</span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span><span class=\"s2\">\"neighbors\"</span><span class=\"p\">:[{</span><span class=\"s2\">\"$ref\"</span><span class=\"p\">:</span><span class=\"s2\">\"1\"</span><span class=\"p\">},{</span><span class=\"s2\">\"$id\"</span><span class=\"p\">:</span><span class=\"s2\">\"3\"</span><span class=\"p\">,</span><span class=\"s2\">\"neighbors\"</span><span class=\"p\">:[{</span><span class=\"s2\">\"$ref\"</span><span class=\"p\">:</span><span class=\"s2\">\"2\"</span><span class=\"p\">},{</span><span class=\"s2\">\"$id\"</span><span class=\"p\">:</span><span class=\"s2\">\"4\"</span><span class=\"p\">,</span><span class=\"s2\">\"neighbors\"</span><span class=\"p\">:[{</span><span class=\"s2\">\"$ref\"</span><span class=\"p\">:</span><span class=\"s2\">\"3\"</span><span class=\"p\">},{</span><span class=\"s2\">\"$ref\"</span><span class=\"p\">:</span><span class=\"s2\">\"1\"</span><span class=\"p\">}],</span><span class=\"s2\">\"val\"</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">}],</span><span class=\"s2\">\"val\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}],</span><span class=\"s2\">\"val\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">},{</span><span class=\"s2\">\"$ref\"</span><span class=\"p\">:</span><span class=\"s2\">\"4\"</span><span class=\"p\">}],</span><span class=\"s2\">\"val\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">(</span><span class=\"n\">inDict</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">outDict</span> <span class=\"o\">=</span> <span class=\"n\">lctk</span><span class=\"o\">.</span><span class=\"n\">graph2Dict</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">inDict</span> <span class=\"o\">==</span> <span class=\"n\">outDict</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The definition of GraphNode:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">GraphNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre>\n<h2>4. Conclusion</h2>\n<p>If there were any error or suggestions, please let me know through the GitHub repository page shown above.</p>\n<p>Happy LeetCoding!</p>\n<h2>Version History</h2>\n<p>0.0.1: Initial version.</p>\n<p>0.0.2: Added supported for linked list with cycle.</p>\n<p>0.0.3: Fixed bugs.</p>\n<p>0.0.4: Corrected the wrong usage description of linkedList API.</p>\n\n          </div>"}, "last_serial": 5997346, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6762ff6d6e6aa7a370969fc78c1637da", "sha256": "b096b021394c8a511991b33b01f3d992e4ec5fa27bf9f872421b42ff189c705c"}, "downloads": -1, "filename": "lctk-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6762ff6d6e6aa7a370969fc78c1637da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4683, "upload_time": "2019-10-04T03:53:15", "upload_time_iso_8601": "2019-10-04T03:53:15.518535Z", "url": "https://files.pythonhosted.org/packages/d4/32/fade8f849353ac30784d530633d308ed9ecd141c96ccea47503611369fb2/lctk-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a296a22486d97b9d648133d23842a79", "sha256": "0b0f440dfa57b5b1286376e1ec02055fa35d18e66a55b62af494161b7ee0bf94"}, "downloads": -1, "filename": "lctk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6a296a22486d97b9d648133d23842a79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3721, "upload_time": "2019-10-04T03:53:18", "upload_time_iso_8601": "2019-10-04T03:53:18.078946Z", "url": "https://files.pythonhosted.org/packages/92/36/8b81694cf78f1cdabf8b0066ddb412c5abee9dd51d6eb5ec3718811ee29d/lctk-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3aaaf3255e3b0bb92b6d0b90866fad59", "sha256": "d9c2910a844f339dc4e7fc86e6ab0c0c63e5f31d34ac3afefdd860f5381ff192"}, "downloads": -1, "filename": "lctk-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3aaaf3255e3b0bb92b6d0b90866fad59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5094, "upload_time": "2019-10-04T20:58:15", "upload_time_iso_8601": "2019-10-04T20:58:15.365936Z", "url": "https://files.pythonhosted.org/packages/8e/74/f71853efd2570552b6ea3f85456fa6b131e5465dbda0a92cf8591c0566e5/lctk-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d085415ef266a50d9f0df21e4393422e", "sha256": "0e2f5ac15227fbdd224f0f3021c220bda6d8b3c967f4c9ed5f9861dad742c580"}, "downloads": -1, "filename": "lctk-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d085415ef266a50d9f0df21e4393422e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4247, "upload_time": "2019-10-04T20:58:16", "upload_time_iso_8601": "2019-10-04T20:58:16.994295Z", "url": "https://files.pythonhosted.org/packages/d8/95/99f39b4d0f458af7062a4e7915cb20205671182f79de250faa2d44110c67/lctk-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4b53abea295fd01e6054fea783eca4bf", "sha256": "573c276ded5d2f50e7061aaa65fda3ea159f3e5f8cbc095b237237e8e63bfb46"}, "downloads": -1, "filename": "lctk-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4b53abea295fd01e6054fea783eca4bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5074, "upload_time": "2019-10-04T21:11:48", "upload_time_iso_8601": "2019-10-04T21:11:48.804915Z", "url": "https://files.pythonhosted.org/packages/d9/18/1e72e85a7a9c3fe72c028833c20a3a0d1c14aadc1bff4723f2a8e2fe6cfa/lctk-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06a0deed2e73dff53c3f1b9983213c40", "sha256": "efaa6e41a662ef3395bc2df2d85e8afb108e897abaa810738cea5b77f26d4b27"}, "downloads": -1, "filename": "lctk-0.0.3.tar.gz", "has_sig": false, "md5_digest": "06a0deed2e73dff53c3f1b9983213c40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4234, "upload_time": "2019-10-04T21:11:50", "upload_time_iso_8601": "2019-10-04T21:11:50.507513Z", "url": "https://files.pythonhosted.org/packages/de/61/24c31228f2a1e91ca8f2011d23b359d0e5e578cc7089d116f61ec72e2dc6/lctk-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "83621590bf950ebe71bc0df21e65b6ae", "sha256": "cc423c890a68b722a450493d79534097f3c4e781f465b9da98a132c6f4b38af6"}, "downloads": -1, "filename": "lctk-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "83621590bf950ebe71bc0df21e65b6ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5116, "upload_time": "2019-10-18T20:15:19", "upload_time_iso_8601": "2019-10-18T20:15:19.346177Z", "url": "https://files.pythonhosted.org/packages/84/fa/9f277fc9acba1fd8df93dab8d7da83283ad95facf0337d7220324dc97d41/lctk-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5307172cc51e6a9f209993f4c476d473", "sha256": "1c6c93788aadb564aaefa5c4edb727fa7a5cc25992e86036737bcc41e6bbf8b3"}, "downloads": -1, "filename": "lctk-0.0.4.tar.gz", "has_sig": false, "md5_digest": "5307172cc51e6a9f209993f4c476d473", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4287, "upload_time": "2019-10-18T20:15:21", "upload_time_iso_8601": "2019-10-18T20:15:21.176331Z", "url": "https://files.pythonhosted.org/packages/f6/6a/150a20328d71f60d28d5ecc2507c8ab3b0e71c84e7519d10b9548c36f0a7/lctk-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83621590bf950ebe71bc0df21e65b6ae", "sha256": "cc423c890a68b722a450493d79534097f3c4e781f465b9da98a132c6f4b38af6"}, "downloads": -1, "filename": "lctk-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "83621590bf950ebe71bc0df21e65b6ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5116, "upload_time": "2019-10-18T20:15:19", "upload_time_iso_8601": "2019-10-18T20:15:19.346177Z", "url": "https://files.pythonhosted.org/packages/84/fa/9f277fc9acba1fd8df93dab8d7da83283ad95facf0337d7220324dc97d41/lctk-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5307172cc51e6a9f209993f4c476d473", "sha256": "1c6c93788aadb564aaefa5c4edb727fa7a5cc25992e86036737bcc41e6bbf8b3"}, "downloads": -1, "filename": "lctk-0.0.4.tar.gz", "has_sig": false, "md5_digest": "5307172cc51e6a9f209993f4c476d473", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4287, "upload_time": "2019-10-18T20:15:21", "upload_time_iso_8601": "2019-10-18T20:15:21.176331Z", "url": "https://files.pythonhosted.org/packages/f6/6a/150a20328d71f60d28d5ecc2507c8ab3b0e71c84e7519d10b9548c36f0a7/lctk-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:28 2020"}