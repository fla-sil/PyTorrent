{"info": {"author": "Marcel Rieger", "author_email": "python-jsonrpyc@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "<img src=\"https://raw.githubusercontent.com/riga/jsonrpyc/master/logo.png\" alt=\"jsonrpyc logo\" width=\"250\"/>\n-\n\n[![Build Status](https://travis-ci.org/riga/jsonrpyc.svg?branch=master)](https://travis-ci.org/riga/jsonrpyc) [![Documentation Status](https://readthedocs.org/projects/jsonrpyc/badge/?version=latest)](http://jsonrpyc.readthedocs.org/en/latest/?badge=latest)\n\nMinimal python RPC implementation in a single file based on the [JSON-RPC 2.0 specs](http://www.jsonrpc.org/specification).\n\n\n## Usage\n\n``jsonrpyc.RPC`` instances basically wrap an input stream and an output stream in order to communicate with other *services*. A service is not even forced to be written in Python as long as it strictly implements the JSON-RPC 2.0 specs. A suitable implementation for NodeJs is [node-json-rpc](https://github.com/riga/node-json-rpc). A ``jsonrpyc.RPC`` instance may wrap a *target* object. Incomming requests will be routed to methods of this object whose result might be sent back as a response. Example implementation:\n\n\n##### ``server.py``\n\n```python\nimport jsonrpyc\n\nclass MyTarget(object):\n\n    def greet(self, name):\n        return \"Hi, %s!\" % name\n\njsonrpyc.RPC(MyTarget())\n```\n\n\n##### ``client.py``\n\n```python\nimport jsonrpyc\nfrom subprocess import Popen, PIPE\n\np = Popen([\"python\", \"server.py\"], stdin=PIPE, stdout=PIPE)\nrpc = jsonrpyc.RPC(stdout=p.stdin, stdin=p.stdout)\n\n#\n# sync usage\n#\n\nprint(rpc(\"greet\", args=(\"John\",), block=0.1))\n# => \"Hi, John!\"\n\n\n#\n# async usage\n#\n\ndef cb(err, res=None):\n    if err:\n        raise err\n    print(\"callback got: \" + res)\n\nrpc(\"greet\", args=(\"John\",), callback=cb)\n\n# cb is called asynchronously which prints\n# => \"callback got: Hi, John!\"\n```\n\n\n## Installation\n\nVia [pip](https://pypi.python.org/pypi/jsonrpyc)\n\n```bash\npip install jsonrpyc\n```\n\nor by simply copying the file into your project.\n\n\n## Contributing\n\nIf you like to contribute to jsonrpyc, I'm happy to receive pull requests. Just make sure to add a new test cases and run them via:\n\n```bash\n> python -m unittest tests\n```\n\n\n## Development\n\n- Source hosted at [GitHub](https://github.com/riga/jsonrpyc)\n- Report issues, questions, feature requests on [GitHub Issues](https://github.com/riga/jsonrpyc/issues)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/riga/jsonrpyc", "keywords": "rpc,json,json-rpc,2.0", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "jsonrpyc", "package_url": "https://pypi.org/project/jsonrpyc/", "platform": "", "project_url": "https://pypi.org/project/jsonrpyc/", "project_urls": {"Homepage": "https://github.com/riga/jsonrpyc"}, "release_url": "https://pypi.org/project/jsonrpyc/1.1.0/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Minimal python RPC implementation in a single file based on the JSON-RPC 2.0 specs from", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"jsonrpyc logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/316b8798b4a7ee9e708a4cbec35253f492a1544a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f726967612f6a736f6e727079632f6d61737465722f6c6f676f2e706e67\" width=\"250\">\n-\n<p><a href=\"https://travis-ci.org/riga/jsonrpyc\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be7748fcf4f6bd59f63b41765f177311f5118f46/68747470733a2f2f7472617669732d63692e6f72672f726967612f6a736f6e727079632e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://jsonrpyc.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e547441542c033ef9094c4199407cd20951090d0/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6a736f6e727079632f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>Minimal python RPC implementation in a single file based on the <a href=\"http://www.jsonrpc.org/specification\" rel=\"nofollow\">JSON-RPC 2.0 specs</a>.</p>\n<h2>Usage</h2>\n<p><code>jsonrpyc.RPC</code> instances basically wrap an input stream and an output stream in order to communicate with other <em>services</em>. A service is not even forced to be written in Python as long as it strictly implements the JSON-RPC 2.0 specs. A suitable implementation for NodeJs is <a href=\"https://github.com/riga/node-json-rpc\" rel=\"nofollow\">node-json-rpc</a>. A <code>jsonrpyc.RPC</code> instance may wrap a <em>target</em> object. Incomming requests will be routed to methods of this object whose result might be sent back as a response. Example implementation:</p>\n<h5><code>server.py</code></h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jsonrpyc</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTarget</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Hi, </span><span class=\"si\">%s</span><span class=\"s2\">!\"</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n\n<span class=\"n\">jsonrpyc</span><span class=\"o\">.</span><span class=\"n\">RPC</span><span class=\"p\">(</span><span class=\"n\">MyTarget</span><span class=\"p\">())</span>\n</pre>\n<h5><code>client.py</code></h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jsonrpyc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">subprocess</span> <span class=\"kn\">import</span> <span class=\"n\">Popen</span><span class=\"p\">,</span> <span class=\"n\">PIPE</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Popen</span><span class=\"p\">([</span><span class=\"s2\">\"python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"server.py\"</span><span class=\"p\">],</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">PIPE</span><span class=\"p\">)</span>\n<span class=\"n\">rpc</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpyc</span><span class=\"o\">.</span><span class=\"n\">RPC</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># sync usage</span>\n<span class=\"c1\">#</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rpc</span><span class=\"p\">(</span><span class=\"s2\">\"greet\"</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"John\"</span><span class=\"p\">,),</span> <span class=\"n\">block</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">))</span>\n<span class=\"c1\"># =&gt; \"Hi, John!\"</span>\n\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># async usage</span>\n<span class=\"c1\">#</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cb</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">err</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"callback got: \"</span> <span class=\"o\">+</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"n\">rpc</span><span class=\"p\">(</span><span class=\"s2\">\"greet\"</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"John\"</span><span class=\"p\">,),</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">cb</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># cb is called asynchronously which prints</span>\n<span class=\"c1\"># =&gt; \"callback got: Hi, John!\"</span>\n</pre>\n<h2>Installation</h2>\n<p>Via <a href=\"https://pypi.python.org/pypi/jsonrpyc\" rel=\"nofollow\">pip</a></p>\n<pre>pip install jsonrpyc\n</pre>\n<p>or by simply copying the file into your project.</p>\n<h2>Contributing</h2>\n<p>If you like to contribute to jsonrpyc, I'm happy to receive pull requests. Just make sure to add a new test cases and run them via:</p>\n<pre>&gt; python -m unittest tests\n</pre>\n<h2>Development</h2>\n<ul>\n<li>Source hosted at <a href=\"https://github.com/riga/jsonrpyc\" rel=\"nofollow\">GitHub</a></li>\n<li>Report issues, questions, feature requests on <a href=\"https://github.com/riga/jsonrpyc/issues\" rel=\"nofollow\">GitHub Issues</a></li>\n</ul>\n\n          </div>"}, "last_serial": 5219301, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "57e39b158f63deb84652968bc027edfe", "sha256": "358b1e2de740b345a0999ebec407ebfed34cc70c049e05840ae8544f2d0fa8cb"}, "downloads": -1, "filename": "jsonrpyc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "57e39b158f63deb84652968bc027edfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1884, "upload_time": "2016-04-19T17:56:50", "upload_time_iso_8601": "2016-04-19T17:56:50.210352Z", "url": "https://files.pythonhosted.org/packages/75/15/8b12161555e934592192e16eccdd59cedd70e5940f64f1893fd695872432/jsonrpyc-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "d8df17525f86a140a946b895818a5dc6", "sha256": "927d44e412aea1d2bada205f9b4dbec7ece633c0fbd0172cdc923c40b3bbe193"}, "downloads": -1, "filename": "jsonrpyc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d8df17525f86a140a946b895818a5dc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7318, "upload_time": "2016-04-23T18:21:16", "upload_time_iso_8601": "2016-04-23T18:21:16.634185Z", "url": "https://files.pythonhosted.org/packages/a5/97/573113fbc7b890137d7a2f74ac0a40a2f4b4716ba700413acdd9ab902b88/jsonrpyc-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8546d95bf8fb0fd03b128a8c50567c84", "sha256": "9b0c197e4999f8aba830595618f2fdfa046ebb5e68a4330e6720d93616ee46a1"}, "downloads": -1, "filename": "jsonrpyc-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8546d95bf8fb0fd03b128a8c50567c84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7352, "upload_time": "2016-04-23T18:36:15", "upload_time_iso_8601": "2016-04-23T18:36:15.303941Z", "url": "https://files.pythonhosted.org/packages/63/55/e00bb3d7dff0c7e6e9c7a4c1d7a56c9e123333243a54f9d46e23bd5b10e3/jsonrpyc-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3f60ed75580b8a8c38f25c753deeb296", "sha256": "b2a278799a0e8724fe05d9f97eab8a24813b191b868befd1bd290fbd60a9a568"}, "downloads": -1, "filename": "jsonrpyc-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3f60ed75580b8a8c38f25c753deeb296", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7364, "upload_time": "2016-04-24T06:10:29", "upload_time_iso_8601": "2016-04-24T06:10:29.047703Z", "url": "https://files.pythonhosted.org/packages/73/13/34106147afb9cc133e7252bf04f2e94734db31686e7d64601ffbb6a329fb/jsonrpyc-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ede7a4d5a232b54567071cdd39eef64e", "sha256": "713a57660489e6c5689d88681542109563e51096cb6776a97dc31b7234e89ea8"}, "downloads": -1, "filename": "jsonrpyc-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ede7a4d5a232b54567071cdd39eef64e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7948, "upload_time": "2019-05-02T20:54:55", "upload_time_iso_8601": "2019-05-02T20:54:55.798820Z", "url": "https://files.pythonhosted.org/packages/73/c6/7c037c179e91a00359daa34fe97695f88540311646c97f484b594d57f8b9/jsonrpyc-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ede7a4d5a232b54567071cdd39eef64e", "sha256": "713a57660489e6c5689d88681542109563e51096cb6776a97dc31b7234e89ea8"}, "downloads": -1, "filename": "jsonrpyc-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ede7a4d5a232b54567071cdd39eef64e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7948, "upload_time": "2019-05-02T20:54:55", "upload_time_iso_8601": "2019-05-02T20:54:55.798820Z", "url": "https://files.pythonhosted.org/packages/73/c6/7c037c179e91a00359daa34fe97695f88540311646c97f484b594d57f8b9/jsonrpyc-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:39 2020"}