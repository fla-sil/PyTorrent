{"info": {"author": "Bitpanda GmbH", "author_email": "nosupport@bitpanda.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Topic :: Utilities", "Typing :: Typed"], "description": "[![Build Status](https://travis-ci.org/bitpanda-labs/loggo.svg?branch=master)](https://travis-ci.org/bitpanda-labs/loggo)\n[![codecov.io](https://codecov.io/gh/bitpanda-labs/loggo/branch/master/graph/badge.svg)](https://codecov.io/gh/bitpanda-labs/loggo)\n[![PyPI version](https://badge.fury.io/py/loggo.svg)](https://badge.fury.io/py/loggo)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# `@loggo`: automated logging for Python 3\n\n<!--- Don't edit the version line below manually. Let bump2version do it for you. -->\n> Version 8.1.0\n\n> You find Python's builtin `logging` module repetitive, tedious and ugly, and the logs you do write with it clash with your otherwise awesome style. `loggo` is here to help: it automates the boring stuff, simplifies the tricky stuff, hooks up effortlessly to [graylog](https://www.graylog.org/), and keeps an eye out for privacy and security if you need it to.\n\n## Install\n\n```bash\npip install loggo\n# or\npython setup.py install\n```\n\nTo install with Graylog support, do:\n```bash\npip install loggo[graylog]\n```\n\n## Setup\n\nTo get started, import and instantiate the main class, ideally somewhere at the core of your project. If you have a module with multiple files, do the initial configuration in the main `__init__.py`, or in a file called `log.py`. so you can import the same, ready-set-up logger easily.\n\nFor example, if your app was called `tester`, you could add the following to `tester/__init__.py`:\n\n```python\nfrom loggo import Loggo\n\n# all setup values are optional\nloggo = Loggo(\n    facility=\"tester\",  # name of program logging the message\n    graylog_address=(\"0.0.0.0\", 9999),  # address for graylog (ip, port)\n    do_print=True,  # print each log to console\n    do_write=True,  # write each log to file\n    logfile=\"mylog.txt\",  # custom path to logfile\n    truncation=1000,  # longest possible value in extra data\n    private_data={\"password\"},  # set of sensitive args/kwargs\n)\n```\n\n## Usage\n\nIn other parts of the project, you can then access the configured logger instance with:\n\n```python\nfrom tester import loggo\n```\n\n### Loggo as decorator\n\nYou can use `@loggo` as a decorator on any callable: a class, on its method, or on function. On classes, it will log every method; on methods and functions it will log the call signature, return and errors. The central idea behind `loggo` is that you can simply decorate every class in your project, as well as any important standalone functions, and have comprehensive, standardised information about your project's internals without any extra labour.\n\nIf a method within a decorated class is called too often, or if you don't need to keep an eye on it, you can use `@loggo.ignore` to ignore it. Also available is `@loggo.errors`, which will only log exceptions, not calls and returns.\n\nFor an example use-case, let's make a simple class that multiplies two numbers, but only if a password is supplied. We will ignore logging of the boring authentication system.\n\n```python\n@loggo\nclass Multiplier:\n    def __init__(self, base):\n        self.base = base\n\n    def multiply(self, n, password):\n        \"\"\"\n        Multiply by the number given during initialisation--requires password\n        \"\"\"\n        self.authenticated = self._do_authentication(password)\n        if not self.authenticated:\n            raise ValueError(\"Not authenticated!\")\n        return self.base * n\n\n    @loggo.ignore\n    def _do_authentication(self, password):\n        \"\"\"Not exactly Fort Knox\"\"\"\n        return password == \"tOpSeCrEt\"\n```\n\nFirst, let's use it properly, with our secret password passed in:\n\n```python\nmult = Multiplier(50)\nresult = mult.multiply(50, \"tOpSeCrEt\")\nassert result == 2500  # True\n```\n\nWe'll get some nice text in the console:\n\n```\n11.05 2018 17:14:54 *Called Multiplier.multiply(n=50, password='******')\n11.05 2018 17:14:54 *Returned from Multiplier.multiply(n=50, password='******') with int (2500)\n```\n\nNotice that our private argument `password` was successfully obscured, even without us naming the argument when we called the method. If you used `do_write=True`, this log will also be in your specified log file, also with password obscured.\n\n```python\nresult = mult.multiply(7, \"password123\")\n```\n\nHere an error will raise, a log will be generated, and we'll get extra info in the console, including traceback:\n\n```\n11.05 2018 17:19:43 *Called Multiplier.multiply(n=7, password='******')\n11.05 2018 17:19:43 *Errored during Multiplier.multiply(n=7, password='******') with ValueError \"Not authenticated!\"    20 -- see below:\nTraceback (most recent call last):\n  File \"/Users/danny/work/loggo/loggo/loggo.py\", line 137, in full_decoration\n    response = function(*args, **kwargs)\n  File \"tester.py\", line 13, in multiply\n    raise ValueError('Not authenticated!')\nValueError: Not authenticated!\n```\n\nIf you're using [graypy](https://github.com/severb/graypy/), you'll get a lot of extra goodness, such as key-value pairs for call signatures, timestamps, arguments, return values, exception information, and so on.\n\n### Custom messages\n\nWhen configuring `loggo`, you can use your own message format for the auto-generated logs. There are four keys, one for each autolog type:\n\n```python\nloggo = Loggo(\n    called=\"Log before callable is run\",\n    returned=\"Log for return from {call_signature} at {timestamp}\",\n    returned_none=\"Log when the return value of the callable is None\",\n    errored=\"Log string on exception: {exception_type}\",\n)\n\n\n@loggo\ndef test():\n    pass\n```\n\nIf you pass `None` for any of these keyword arguments, logs of that time will be completely suppressed. If you do not provide a value for `returned_none`, `loggo` will use the value you provided for `returned`, or fall back to its own default.\n\nNotice, in the example above, you can include particular format strings in the log message. Currently supported are:\n* `call_signature`: the callable name and its arguments and keyword arguments\n* `callable`: the `__qualname__` of the decorated object\n* `params`: comma separated key value pairs for arguments passed\n* `log_level`: the log level associated with this log\n* `timestamp`: time at time of logging\n* `couplet`: `uuid.uuid1()` for the called and returned/errored pair\n* `number_of_params`: total `args + kwargs` as int\n* `private_keys`: list of identified private argument names\n* `decorated`: always `True`\n\nThe `errored` log additionally supports:\n* `exception_type`: `ValueError`, `AttributeError`, etc.\n* `exception_msg`: details about the thrown exception\n* `traceback`: exception traceback\n\nAnd the `returned` and `returned_none` logs support:\n* `return_value`: the object returned by the callable\n* `return_type`: type of returned object\n\nAdding more such strings is trivial; submit an issue if there is something else you need.\n\n### Logging without decorators\n\nFor logging manually, `loggo` provides methods similar to the logging functions of the `logging` standard library: `loggo.log`, `loggo.debug`, `loggo.info`, `loggo.warning`, `loggo.error`, and `loggo.critical`. The methods use the configuration that has already been defined. The main method `loggo.log` takes three parameters:\n\n```python\nlevel = 50\nmsg = \"Message to log\"\nextra = dict(some=\"data\", that=\"will\", be=\"logged\")\nloggo.log(level, msg, extra)\n# console: 11.05 2018 17:36:24 Message to log  50\n# extra_data in log file if `do_print` setting is True\n```\n\nMethods `loggo.debug`, `loggo.info`, `loggo.warning`, `loggo.error` and `loggo.critical` are convenience methods for setting the log level. For instance,\n\n```python\nloggo.warning(\"A message\", dict(some=\"data\"))\n```\n\nis equivalent to\n\n```python\nloggo.log(logging.WARNING, \"A message\", dict(some=\"data\"))\n```\n\nwhere `logging.WARNING` is an integer constant imported from the standard library.\n\nThe advantage of using `loggo` for these kinds of logs is that `loggo` will make the extra data more readable and truncate very large strings. More importantly, you also still get whatever extras you've configured, like obfuscation of private data, or writing to console/file.\n\n### Methods\n\nYou can also start and stop logging with `loggo.start()` and `loggo.stop()`, at any point in your code, though by default, error logs will still get through. If you want to suppress errors too, you can pass in `allow_errors=False`.\n\n### Context managers\n\nYou can suppress logs using a context manager. Errors are allowed here by default too:\n\n```python\nwith loggo.pause(allow_errors=False):\n    do_something()\n```\n\n## Contributing\n\n### Style\nThe style is [Black](https://github.com/psf/black), with the following exceptions and extra strictness:\n* Maximum line length is 110\n* The comment syntax for types should not be used unless ignoring with `# type: ignore`. That is, write this:\n    ```python\n    def hello() -> str:\n        return_value: str = 'hello'\n        return return_value\n    ```\n    instead of writing this:\n    ```python\n    def hello(): # type: () -> str\n        return_value = 'hello'  # type: str\n        return return_value\n    ```\n\n### Making pull requests\n\nIssues, feature requests and code contributions are welcomed. Follow these steps to make a pull request:\n\n1. Fork/clone the repository.\n\n1. Install dependencies (you'll probably want to create a virtual environment, using your preferred method, first).\n    ```bash\n    pip install -e .[dev]\n    ```\n\n1. Install pre-commit hooks\n    ```bash\n    pre-commit install\n    ```\n\n1. After making changes and having written tests, make sure tests pass:\n    ```bash\n    python -m unittest\n    ```\n\n1. Commit, push, and make a PR.\n\n\n### Version bumping\n\n`loggo` adheres to semantic versioning, ideally via the `bump2version` utility. Install it with pip:\n\n```bash\npip install bump2version\n```\n\nWhenever you need to bump version, in the project root directory do:\n\n```bash\nbump2version (major | minor | patch)\ngit push <remote> <branch> --follow-tags \n```\n\n## Limitations\n\n`loggo` uses Python's standard library (`logging`) to generate logs. There are some gotchas when using it: for instance, in terms of the extra data that can be passed in, key names for this extra data cannot clash with some internal names used within the `logging` module (`message`, `args`, etc.). To get around this, you'll get a warning that your data contains a bad key name, and it will be changed (i.e. from `message` to `protected_message`).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bitpanda-labs/loggo", "keywords": "bitpanda utilities logging", "license": "", "maintainer": "", "maintainer_email": "", "name": "loggo", "package_url": "https://pypi.org/project/loggo/", "platform": "", "project_url": "https://pypi.org/project/loggo/", "project_urls": {"Changelog": "https://github.com/bitpanda-labs/loggo/blob/master/CHANGELOG.md", "Homepage": "https://github.com/bitpanda-labs/loggo"}, "release_url": "https://pypi.org/project/loggo/8.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Python logging tools", "version": "8.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/bitpanda-labs/loggo\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f3eb19a9ac3671cc15be163f3e00e5cf11e41e9/68747470733a2f2f7472617669732d63692e6f72672f62697470616e64612d6c6162732f6c6f67676f2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/bitpanda-labs/loggo\" rel=\"nofollow\"><img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f686aaa110fc20050e7fb3699c06c04958f1a607/68747470733a2f2f636f6465636f762e696f2f67682f62697470616e64612d6c6162732f6c6f67676f2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/loggo\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd23373acd05f5e518c7785b0b0f796b562f52db/68747470733a2f2f62616467652e667572792e696f2f70792f6c6f67676f2e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h1><code>@loggo</code>: automated logging for Python 3</h1>\n\n<blockquote>\n<p>Version 8.1.0</p>\n</blockquote>\n<blockquote>\n<p>You find Python's builtin <code>logging</code> module repetitive, tedious and ugly, and the logs you do write with it clash with your otherwise awesome style. <code>loggo</code> is here to help: it automates the boring stuff, simplifies the tricky stuff, hooks up effortlessly to <a href=\"https://www.graylog.org/\" rel=\"nofollow\">graylog</a>, and keeps an eye out for privacy and security if you need it to.</p>\n</blockquote>\n<h2>Install</h2>\n<pre>pip install loggo\n<span class=\"c1\"># or</span>\npython setup.py install\n</pre>\n<p>To install with Graylog support, do:</p>\n<pre>pip install loggo<span class=\"o\">[</span>graylog<span class=\"o\">]</span>\n</pre>\n<h2>Setup</h2>\n<p>To get started, import and instantiate the main class, ideally somewhere at the core of your project. If you have a module with multiple files, do the initial configuration in the main <code>__init__.py</code>, or in a file called <code>log.py</code>. so you can import the same, ready-set-up logger easily.</p>\n<p>For example, if your app was called <code>tester</code>, you could add the following to <code>tester/__init__.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">loggo</span> <span class=\"kn\">import</span> <span class=\"n\">Loggo</span>\n\n<span class=\"c1\"># all setup values are optional</span>\n<span class=\"n\">loggo</span> <span class=\"o\">=</span> <span class=\"n\">Loggo</span><span class=\"p\">(</span>\n    <span class=\"n\">facility</span><span class=\"o\">=</span><span class=\"s2\">\"tester\"</span><span class=\"p\">,</span>  <span class=\"c1\"># name of program logging the message</span>\n    <span class=\"n\">graylog_address</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"0.0.0.0\"</span><span class=\"p\">,</span> <span class=\"mi\">9999</span><span class=\"p\">),</span>  <span class=\"c1\"># address for graylog (ip, port)</span>\n    <span class=\"n\">do_print</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># print each log to console</span>\n    <span class=\"n\">do_write</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># write each log to file</span>\n    <span class=\"n\">logfile</span><span class=\"o\">=</span><span class=\"s2\">\"mylog.txt\"</span><span class=\"p\">,</span>  <span class=\"c1\"># custom path to logfile</span>\n    <span class=\"n\">truncation</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span>  <span class=\"c1\"># longest possible value in extra data</span>\n    <span class=\"n\">private_data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"password\"</span><span class=\"p\">},</span>  <span class=\"c1\"># set of sensitive args/kwargs</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Usage</h2>\n<p>In other parts of the project, you can then access the configured logger instance with:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tester</span> <span class=\"kn\">import</span> <span class=\"n\">loggo</span>\n</pre>\n<h3>Loggo as decorator</h3>\n<p>You can use <code>@loggo</code> as a decorator on any callable: a class, on its method, or on function. On classes, it will log every method; on methods and functions it will log the call signature, return and errors. The central idea behind <code>loggo</code> is that you can simply decorate every class in your project, as well as any important standalone functions, and have comprehensive, standardised information about your project's internals without any extra labour.</p>\n<p>If a method within a decorated class is called too often, or if you don't need to keep an eye on it, you can use <code>@loggo.ignore</code> to ignore it. Also available is <code>@loggo.errors</code>, which will only log exceptions, not calls and returns.</p>\n<p>For an example use-case, let's make a simple class that multiplies two numbers, but only if a password is supplied. We will ignore logging of the boring authentication system.</p>\n<pre><span class=\"nd\">@loggo</span>\n<span class=\"k\">class</span> <span class=\"nc\">Multiplier</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">base</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">multiply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Multiply by the number given during initialisation--requires password</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">authenticated</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_do_authentication</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">authenticated</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Not authenticated!\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n\n    <span class=\"nd\">@loggo</span><span class=\"o\">.</span><span class=\"n\">ignore</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_do_authentication</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Not exactly Fort Knox\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">password</span> <span class=\"o\">==</span> <span class=\"s2\">\"tOpSeCrEt\"</span>\n</pre>\n<p>First, let's use it properly, with our secret password passed in:</p>\n<pre><span class=\"n\">mult</span> <span class=\"o\">=</span> <span class=\"n\">Multiplier</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">mult</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s2\">\"tOpSeCrEt\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"mi\">2500</span>  <span class=\"c1\"># True</span>\n</pre>\n<p>We'll get some nice text in the console:</p>\n<pre><code>11.05 2018 17:14:54 *Called Multiplier.multiply(n=50, password='******')\n11.05 2018 17:14:54 *Returned from Multiplier.multiply(n=50, password='******') with int (2500)\n</code></pre>\n<p>Notice that our private argument <code>password</code> was successfully obscured, even without us naming the argument when we called the method. If you used <code>do_write=True</code>, this log will also be in your specified log file, also with password obscured.</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">mult</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s2\">\"password123\"</span><span class=\"p\">)</span>\n</pre>\n<p>Here an error will raise, a log will be generated, and we'll get extra info in the console, including traceback:</p>\n<pre><code>11.05 2018 17:19:43 *Called Multiplier.multiply(n=7, password='******')\n11.05 2018 17:19:43 *Errored during Multiplier.multiply(n=7, password='******') with ValueError \"Not authenticated!\"    20 -- see below:\nTraceback (most recent call last):\n  File \"/Users/danny/work/loggo/loggo/loggo.py\", line 137, in full_decoration\n    response = function(*args, **kwargs)\n  File \"tester.py\", line 13, in multiply\n    raise ValueError('Not authenticated!')\nValueError: Not authenticated!\n</code></pre>\n<p>If you're using <a href=\"https://github.com/severb/graypy/\" rel=\"nofollow\">graypy</a>, you'll get a lot of extra goodness, such as key-value pairs for call signatures, timestamps, arguments, return values, exception information, and so on.</p>\n<h3>Custom messages</h3>\n<p>When configuring <code>loggo</code>, you can use your own message format for the auto-generated logs. There are four keys, one for each autolog type:</p>\n<pre><span class=\"n\">loggo</span> <span class=\"o\">=</span> <span class=\"n\">Loggo</span><span class=\"p\">(</span>\n    <span class=\"n\">called</span><span class=\"o\">=</span><span class=\"s2\">\"Log before callable is run\"</span><span class=\"p\">,</span>\n    <span class=\"n\">returned</span><span class=\"o\">=</span><span class=\"s2\">\"Log for return from </span><span class=\"si\">{call_signature}</span><span class=\"s2\"> at </span><span class=\"si\">{timestamp}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">returned_none</span><span class=\"o\">=</span><span class=\"s2\">\"Log when the return value of the callable is None\"</span><span class=\"p\">,</span>\n    <span class=\"n\">errored</span><span class=\"o\">=</span><span class=\"s2\">\"Log string on exception: </span><span class=\"si\">{exception_type}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"nd\">@loggo</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>If you pass <code>None</code> for any of these keyword arguments, logs of that time will be completely suppressed. If you do not provide a value for <code>returned_none</code>, <code>loggo</code> will use the value you provided for <code>returned</code>, or fall back to its own default.</p>\n<p>Notice, in the example above, you can include particular format strings in the log message. Currently supported are:</p>\n<ul>\n<li><code>call_signature</code>: the callable name and its arguments and keyword arguments</li>\n<li><code>callable</code>: the <code>__qualname__</code> of the decorated object</li>\n<li><code>params</code>: comma separated key value pairs for arguments passed</li>\n<li><code>log_level</code>: the log level associated with this log</li>\n<li><code>timestamp</code>: time at time of logging</li>\n<li><code>couplet</code>: <code>uuid.uuid1()</code> for the called and returned/errored pair</li>\n<li><code>number_of_params</code>: total <code>args + kwargs</code> as int</li>\n<li><code>private_keys</code>: list of identified private argument names</li>\n<li><code>decorated</code>: always <code>True</code></li>\n</ul>\n<p>The <code>errored</code> log additionally supports:</p>\n<ul>\n<li><code>exception_type</code>: <code>ValueError</code>, <code>AttributeError</code>, etc.</li>\n<li><code>exception_msg</code>: details about the thrown exception</li>\n<li><code>traceback</code>: exception traceback</li>\n</ul>\n<p>And the <code>returned</code> and <code>returned_none</code> logs support:</p>\n<ul>\n<li><code>return_value</code>: the object returned by the callable</li>\n<li><code>return_type</code>: type of returned object</li>\n</ul>\n<p>Adding more such strings is trivial; submit an issue if there is something else you need.</p>\n<h3>Logging without decorators</h3>\n<p>For logging manually, <code>loggo</code> provides methods similar to the logging functions of the <code>logging</code> standard library: <code>loggo.log</code>, <code>loggo.debug</code>, <code>loggo.info</code>, <code>loggo.warning</code>, <code>loggo.error</code>, and <code>loggo.critical</code>. The methods use the configuration that has already been defined. The main method <code>loggo.log</code> takes three parameters:</p>\n<pre><span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">\"Message to log\"</span>\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">some</span><span class=\"o\">=</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"n\">that</span><span class=\"o\">=</span><span class=\"s2\">\"will\"</span><span class=\"p\">,</span> <span class=\"n\">be</span><span class=\"o\">=</span><span class=\"s2\">\"logged\"</span><span class=\"p\">)</span>\n<span class=\"n\">loggo</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"p\">)</span>\n<span class=\"c1\"># console: 11.05 2018 17:36:24 Message to log  50</span>\n<span class=\"c1\"># extra_data in log file if `do_print` setting is True</span>\n</pre>\n<p>Methods <code>loggo.debug</code>, <code>loggo.info</code>, <code>loggo.warning</code>, <code>loggo.error</code> and <code>loggo.critical</code> are convenience methods for setting the log level. For instance,</p>\n<pre><span class=\"n\">loggo</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"A message\"</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">some</span><span class=\"o\">=</span><span class=\"s2\">\"data\"</span><span class=\"p\">))</span>\n</pre>\n<p>is equivalent to</p>\n<pre><span class=\"n\">loggo</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">WARNING</span><span class=\"p\">,</span> <span class=\"s2\">\"A message\"</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">some</span><span class=\"o\">=</span><span class=\"s2\">\"data\"</span><span class=\"p\">))</span>\n</pre>\n<p>where <code>logging.WARNING</code> is an integer constant imported from the standard library.</p>\n<p>The advantage of using <code>loggo</code> for these kinds of logs is that <code>loggo</code> will make the extra data more readable and truncate very large strings. More importantly, you also still get whatever extras you've configured, like obfuscation of private data, or writing to console/file.</p>\n<h3>Methods</h3>\n<p>You can also start and stop logging with <code>loggo.start()</code> and <code>loggo.stop()</code>, at any point in your code, though by default, error logs will still get through. If you want to suppress errors too, you can pass in <code>allow_errors=False</code>.</p>\n<h3>Context managers</h3>\n<p>You can suppress logs using a context manager. Errors are allowed here by default too:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">loggo</span><span class=\"o\">.</span><span class=\"n\">pause</span><span class=\"p\">(</span><span class=\"n\">allow_errors</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">do_something</span><span class=\"p\">()</span>\n</pre>\n<h2>Contributing</h2>\n<h3>Style</h3>\n<p>The style is <a href=\"https://github.com/psf/black\" rel=\"nofollow\">Black</a>, with the following exceptions and extra strictness:</p>\n<ul>\n<li>Maximum line length is 110</li>\n<li>The comment syntax for types should not be used unless ignoring with <code># type: ignore</code>. That is, write this:\n<pre><span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">return_value</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'hello'</span>\n    <span class=\"k\">return</span> <span class=\"n\">return_value</span>\n</pre>\ninstead of writing this:\n<pre><span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span> <span class=\"c1\"># type: () -&gt; str</span>\n    <span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"s1\">'hello'</span>  <span class=\"c1\"># type: str</span>\n    <span class=\"k\">return</span> <span class=\"n\">return_value</span>\n</pre>\n</li>\n</ul>\n<h3>Making pull requests</h3>\n<p>Issues, feature requests and code contributions are welcomed. Follow these steps to make a pull request:</p>\n<ol>\n<li>\n<p>Fork/clone the repository.</p>\n</li>\n<li>\n<p>Install dependencies (you'll probably want to create a virtual environment, using your preferred method, first).</p>\n<pre>pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n</li>\n<li>\n<p>Install pre-commit hooks</p>\n<pre>pre-commit install\n</pre>\n</li>\n<li>\n<p>After making changes and having written tests, make sure tests pass:</p>\n<pre>python -m unittest\n</pre>\n</li>\n<li>\n<p>Commit, push, and make a PR.</p>\n</li>\n</ol>\n<h3>Version bumping</h3>\n<p><code>loggo</code> adheres to semantic versioning, ideally via the <code>bump2version</code> utility. Install it with pip:</p>\n<pre>pip install bump2version\n</pre>\n<p>Whenever you need to bump version, in the project root directory do:</p>\n<pre>bump2version <span class=\"o\">(</span>major <span class=\"p\">|</span> minor <span class=\"p\">|</span> patch<span class=\"o\">)</span>\ngit push &lt;remote&gt; &lt;branch&gt; --follow-tags \n</pre>\n<h2>Limitations</h2>\n<p><code>loggo</code> uses Python's standard library (<code>logging</code>) to generate logs. There are some gotchas when using it: for instance, in terms of the extra data that can be passed in, key names for this extra data cannot clash with some internal names used within the <code>logging</code> module (<code>message</code>, <code>args</code>, etc.). To get around this, you'll get a warning that your data contains a bad key name, and it will be changed (i.e. from <code>message</code> to <code>protected_message</code>).</p>\n\n          </div>"}, "last_serial": 6669324, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "abc588aa78da3609426753b04be5a5c1", "sha256": "e9b6eaa72a7cc32f215f9f1b1e95556f33072990091413f002736572b4ff1596"}, "downloads": -1, "filename": "loggo-0.0.1-py3.6.egg", "has_sig": false, "md5_digest": "abc588aa78da3609426753b04be5a5c1", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 20138, "upload_time": "2018-05-11T15:52:26", "upload_time_iso_8601": "2018-05-11T15:52:26.073706Z", "url": "https://files.pythonhosted.org/packages/42/b5/f7af39debb44e7f9d2c9e39e67cbe8ed50be407da7bcb7f0159a06d2b419/loggo-0.0.1-py3.6.egg", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "64b4a2665e5d3a77ea8dae6ab40dcbd5", "sha256": "add6a79049905c54d4af5e2afa92796670109f0a74571be15fba343bfa4040e3"}, "downloads": -1, "filename": "loggo-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "64b4a2665e5d3a77ea8dae6ab40dcbd5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17742, "upload_time": "2018-05-11T15:52:24", "upload_time_iso_8601": "2018-05-11T15:52:24.985516Z", "url": "https://files.pythonhosted.org/packages/da/bf/74785f923be311d417de4fc29877f135e37f989776d3d2671c93f740b2d3/loggo-0.1.0-py3-none-any.whl", "yanked": false}], "5.0.0": [{"comment_text": "", "digests": {"md5": "c8615a872d07663fd084ce29077139f7", "sha256": "caccd4cb7d3b9e658633096e389d8bd2b9fd2af0c9b878741bb0f1753cd60448"}, "downloads": -1, "filename": "loggo-5.0.0.tar.gz", "has_sig": false, "md5_digest": "c8615a872d07663fd084ce29077139f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17430, "upload_time": "2019-05-29T12:25:47", "upload_time_iso_8601": "2019-05-29T12:25:47.581717Z", "url": "https://files.pythonhosted.org/packages/ca/17/a13272f3e4672d66b3db42906f62fe46fe4b3ebad3cc0d56839aa4ec0ed2/loggo-5.0.0.tar.gz", "yanked": false}], "5.1.0": [{"comment_text": "", "digests": {"md5": "b36ce5fb011ab4e91af57954ce9c73b5", "sha256": "9372e02fa3146cc4b74814be907e6be02c24c957443b830d54f9f016d526c927"}, "downloads": -1, "filename": "loggo-5.1.0.tar.gz", "has_sig": false, "md5_digest": "b36ce5fb011ab4e91af57954ce9c73b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17594, "upload_time": "2019-06-03T11:36:01", "upload_time_iso_8601": "2019-06-03T11:36:01.937271Z", "url": "https://files.pythonhosted.org/packages/4d/be/84e1376ee1f13303ef7dc913c066926f7e9d71114fd2b0c185f54c7a15ec/loggo-5.1.0.tar.gz", "yanked": false}], "6.0.0": [{"comment_text": "", "digests": {"md5": "fed1c507445afce3088cbf5235a2eac9", "sha256": "fd0bf5132efb1aefc17675b91658a5c9806916fc2dcb6546c8b5efac2c6cb55b"}, "downloads": -1, "filename": "loggo-6.0.0.tar.gz", "has_sig": false, "md5_digest": "fed1c507445afce3088cbf5235a2eac9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17159, "upload_time": "2019-07-12T11:41:34", "upload_time_iso_8601": "2019-07-12T11:41:34.439758Z", "url": "https://files.pythonhosted.org/packages/02/32/c62a6879f77153f0838fd86fd361e96d6b9a78ac63d3b9a56b7ab381e9fe/loggo-6.0.0.tar.gz", "yanked": false}], "6.0.1": [{"comment_text": "", "digests": {"md5": "078ca6b66ee9dea4358d294e74d49217", "sha256": "7dcbea742b1c4e3e1a91c6c89b8e3c313b09919145cbeccecad30bb697902405"}, "downloads": -1, "filename": "loggo-6.0.1.tar.gz", "has_sig": false, "md5_digest": "078ca6b66ee9dea4358d294e74d49217", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17155, "upload_time": "2019-07-12T14:54:00", "upload_time_iso_8601": "2019-07-12T14:54:00.931732Z", "url": "https://files.pythonhosted.org/packages/b1/b2/d59461ea8598f6fe60b39794433809c6ca17cf83e830a2263048afe1008c/loggo-6.0.1.tar.gz", "yanked": false}], "7.0.0": [{"comment_text": "", "digests": {"md5": "b136481214297dabd45405f09a647f0b", "sha256": "166322e0b34645fb41339558209c4943b654eae34d4fec1dd0a261c34b76859b"}, "downloads": -1, "filename": "loggo-7.0.0.tar.gz", "has_sig": false, "md5_digest": "b136481214297dabd45405f09a647f0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18496, "upload_time": "2019-11-19T15:39:32", "upload_time_iso_8601": "2019-11-19T15:39:32.073957Z", "url": "https://files.pythonhosted.org/packages/d0/43/85e1fbb7606af2d9f8cade22b11ff41c4cbf63598e86c986f8827ef01d0d/loggo-7.0.0.tar.gz", "yanked": false}], "7.1.0": [{"comment_text": "", "digests": {"md5": "bda9f631ee8cc77cdae839250a04d79c", "sha256": "b9ae7a7c61c750975f77fa14226e490200eb81e2ee3c1d1f5d806f58c8da9d7f"}, "downloads": -1, "filename": "loggo-7.1.0.tar.gz", "has_sig": false, "md5_digest": "bda9f631ee8cc77cdae839250a04d79c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13668, "upload_time": "2020-02-20T17:02:54", "upload_time_iso_8601": "2020-02-20T17:02:54.042141Z", "url": "https://files.pythonhosted.org/packages/35/5b/199615d39906afd8bf9c57589f87c9da8686fe55479c4b9cd9958404b5d7/loggo-7.1.0.tar.gz", "yanked": false}], "8.0.0": [{"comment_text": "", "digests": {"md5": "eeb531e8aa7004e31093790be00ec12c", "sha256": "9217fe86a9a2fbc180e6d33da7462c190a8ce826f73c1c7edc729539f7653e7e"}, "downloads": -1, "filename": "loggo-8.0.0.tar.gz", "has_sig": false, "md5_digest": "eeb531e8aa7004e31093790be00ec12c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13991, "upload_time": "2020-02-12T17:05:19", "upload_time_iso_8601": "2020-02-12T17:05:19.043337Z", "url": "https://files.pythonhosted.org/packages/ad/e4/d7d9970fe57845a960326849de4decd76b80e6a4020edc86569ffc4c9bc9/loggo-8.0.0.tar.gz", "yanked": false}], "8.1.0": [{"comment_text": "", "digests": {"md5": "260e86dd076cc119f4d611936ac4253a", "sha256": "844f6ed6358a16dcc20a6db9ee531f8d3f415362c470502c81e42cc3d2ab8bf0"}, "downloads": -1, "filename": "loggo-8.1.0.tar.gz", "has_sig": false, "md5_digest": "260e86dd076cc119f4d611936ac4253a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14064, "upload_time": "2020-02-20T16:45:44", "upload_time_iso_8601": "2020-02-20T16:45:44.126280Z", "url": "https://files.pythonhosted.org/packages/76/b1/d0d61611044c582afe701948f4020defe71ee37c71e01106db87bf18e78c/loggo-8.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "260e86dd076cc119f4d611936ac4253a", "sha256": "844f6ed6358a16dcc20a6db9ee531f8d3f415362c470502c81e42cc3d2ab8bf0"}, "downloads": -1, "filename": "loggo-8.1.0.tar.gz", "has_sig": false, "md5_digest": "260e86dd076cc119f4d611936ac4253a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14064, "upload_time": "2020-02-20T16:45:44", "upload_time_iso_8601": "2020-02-20T16:45:44.126280Z", "url": "https://files.pythonhosted.org/packages/76/b1/d0d61611044c582afe701948f4020defe71ee37c71e01106db87bf18e78c/loggo-8.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:15 2020"}