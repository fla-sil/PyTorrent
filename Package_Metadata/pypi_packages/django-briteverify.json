{"info": {"author": "Uploadcare LLC", "author_email": "hello@uploadcare.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "Django-briteverify\n=======================\n\n.. image:: https://img.shields.io/pypi/v/django-briteverify.svg\n    :target: https://pypi.python.org/pypi/django-briteverify\n    :alt: Latest PyPI version\n\n.. image:: https://travis-ci.org/uploadcare/django-briteverify.svg?branch=master\n    :target: https://travis-ci.org/uploadcare/django-briteverify\n    :alt: Build status\n\nHelper for easy integration between django and briteverify.com service.\n\nIt supports Python2.6+, Django1.4+\n\nInstallation\n------------\n\n.. code:: bash\n\n    $ pip install django-briteverify\n\nUsage\n-----\n\nIn common case as you need is use ``BriteverifyFormMixin`` for your forms and specify a ``BRITEVERIFY_API_KEY``:\n\n.. code:: python\n\n    # your_app/forms.py\n    from django import forms\n    from django_briteverify import BriteverifyFormMixin\n\n    class RegisterForm(BriteverifyFormMixin, forms.Form):\n        email = forms.EmailField()\n\n\nSet ``BRITEVERIFY_API_KEY`` as environment variable:\n\n.. code:: bash\n\n    $ export BRITEVERIFY_API_KEY='YOUR_API_KEY'\n\n\nOr define it directly in settings\n\n.. code:: python\n\n    # settings.py\n    BRITEVERIFY_API_KEY = 'YOUR_API_KEY'\n\nYou can specify field name which be used as source for verifying:\n\n.. code:: python\n\n    class RegisterForm(BriteverifyFormMixin, forms.Form):\n        another_email = forms.EmailField()\n\n        EMAIL_FIELD_NAME = 'another_email'\n\nAlso you can override error messages which raised if validation didn't pass:\n\n.. code:: python\n\n    class RegisterForm(BriteverifyFormMixin, forms.Form):\n        error_messages = {\n            'invalid_email': _('This is an invalid email address. '\n                               'Maybe you mistyped?'),\n            'disposable_email': _('Please provide your real email address.')\n        }\n\n\nContributing\n------------\n\n1. Fork the ``django-briteverify`` repo on GitHub.\n2. Clone your fork locally:\n\n.. code:: bash\n\n    $ git clone git@github.com:your_name_here/django-briteverify.git\n\n3. Install your local copy into a virtualenv. Assuming you have ``virtualenvwrapper`` installed, this is how you set up your fork for local development:\n\n.. code:: bash\n\n    $ mkvirtualenv django-briteverify\n    $ cd django-briteverify/\n    $ python setup.py develop\n\n4. Create a branch for local development:\n\n.. code:: bash\n\n    $ git checkout -b name-of-your-bugfix-or-feature\n\n   Now you can make your changes locally.\n\n5. When you're done making changes, check that your changes pass the tests, including testing other Python versions with tox:\n\n.. code:: bash\n\n    $ pip install tox\n    $ tox\n\n6. Commit your changes and push your branch to GitHub:\n\n.. code:: bash\n\n    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n\n7. Submit a pull request through the GitHub website.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uploadcare/django-briteverify", "keywords": "django briteverify", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-briteverify", "package_url": "https://pypi.org/project/django-briteverify/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-briteverify/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/uploadcare/django-briteverify"}, "release_url": "https://pypi.org/project/django-briteverify/1.0/", "requires_dist": null, "requires_python": null, "summary": "Integration with briteverify API", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/django-briteverify\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b5e084d292238643657af6b3e4d50f7a6fae545/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d62726974657665726966792e737667\"></a>\n<a href=\"https://travis-ci.org/uploadcare/django-briteverify\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b23550fe0fe2a0a4ad00c1f7bb029450ce4ed4c5/68747470733a2f2f7472617669732d63692e6f72672f75706c6f6164636172652f646a616e676f2d62726974657665726966792e7376673f6272616e63683d6d6173746572\"></a>\n<p>Helper for easy integration between django and briteverify.com service.</p>\n<p>It supports Python2.6+, Django1.4+</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install django-briteverify\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In common case as you need is use <tt>BriteverifyFormMixin</tt> for your forms and specify a <tt>BRITEVERIFY_API_KEY</tt>:</p>\n<pre><span class=\"c1\"># your_app/forms.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_briteverify</span> <span class=\"kn\">import</span> <span class=\"n\">BriteverifyFormMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RegisterForm</span><span class=\"p\">(</span><span class=\"n\">BriteverifyFormMixin</span><span class=\"p\">,</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">()</span>\n</pre>\n<p>Set <tt>BRITEVERIFY_API_KEY</tt> as environment variable:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">BRITEVERIFY_API_KEY</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_API_KEY'</span>\n</pre>\n<p>Or define it directly in settings</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"n\">BRITEVERIFY_API_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'YOUR_API_KEY'</span>\n</pre>\n<p>You can specify field name which be used as source for verifying:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">RegisterForm</span><span class=\"p\">(</span><span class=\"n\">BriteverifyFormMixin</span><span class=\"p\">,</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">another_email</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">()</span>\n\n    <span class=\"n\">EMAIL_FIELD_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'another_email'</span>\n</pre>\n<p>Also you can override error messages which raised if validation didn\u2019t pass:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">RegisterForm</span><span class=\"p\">(</span><span class=\"n\">BriteverifyFormMixin</span><span class=\"p\">,</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">error_messages</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'invalid_email'</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'This is an invalid email address. '</span>\n                           <span class=\"s1\">'Maybe you mistyped?'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'disposable_email'</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Please provide your real email address.'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<ol>\n<li>Fork the <tt><span class=\"pre\">django-briteverify</span></tt> repo on GitHub.</li>\n<li>Clone your fork locally:</li>\n</ol>\n<pre>$ git clone git@github.com:your_name_here/django-briteverify.git\n</pre>\n<ol>\n<li>Install your local copy into a virtualenv. Assuming you have <tt>virtualenvwrapper</tt> installed, this is how you set up your fork for local development:</li>\n</ol>\n<pre>$ mkvirtualenv django-briteverify\n$ <span class=\"nb\">cd</span> django-briteverify/\n$ python setup.py develop\n</pre>\n<ol>\n<li>Create a branch for local development:</li>\n</ol>\n<pre> $ git checkout -b name-of-your-bugfix-or-feature\n\nNow you can make your changes locally.\n</pre>\n<ol>\n<li>When you\u2019re done making changes, check that your changes pass the tests, including testing other Python versions with tox:</li>\n</ol>\n<pre>$ pip install tox\n$ tox\n</pre>\n<ol>\n<li>Commit your changes and push your branch to GitHub:</li>\n</ol>\n<pre>$ git add .\n$ git commit -m <span class=\"s2\">\"Your detailed description of your changes.\"</span>\n$ git push origin name-of-your-bugfix-or-feature\n</pre>\n<ol>\n<li>Submit a pull request through the GitHub website.</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 1811359, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "1e2c8f863384d06f3dd202c3bb4453d8", "sha256": "d2b1b977403d210c30a0e8df5aad8b562f786b243bc96f836e4d772e5e03cb27"}, "downloads": -1, "filename": "django-briteverify-1.0.tar.gz", "has_sig": false, "md5_digest": "1e2c8f863384d06f3dd202c3bb4453d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4557, "upload_time": "2015-11-11T11:38:28", "upload_time_iso_8601": "2015-11-11T11:38:28.383267Z", "url": "https://files.pythonhosted.org/packages/ab/b0/2faf001450ff0fd1185293b97d1d9def8ee7296eac476df9537278051417/django-briteverify-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e2c8f863384d06f3dd202c3bb4453d8", "sha256": "d2b1b977403d210c30a0e8df5aad8b562f786b243bc96f836e4d772e5e03cb27"}, "downloads": -1, "filename": "django-briteverify-1.0.tar.gz", "has_sig": false, "md5_digest": "1e2c8f863384d06f3dd202c3bb4453d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4557, "upload_time": "2015-11-11T11:38:28", "upload_time_iso_8601": "2015-11-11T11:38:28.383267Z", "url": "https://files.pythonhosted.org/packages/ab/b0/2faf001450ff0fd1185293b97d1d9def8ee7296eac476df9537278051417/django-briteverify-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:20 2020"}