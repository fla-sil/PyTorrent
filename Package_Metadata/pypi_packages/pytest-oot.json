{"info": {"author": "Steven LI", "author_email": "steven004@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: System :: Logging", "Topic :: Utilities"], "description": "OOT library for the py.test runner\n==================================\n\n.. image:: https://pypip.in/v/pytest-oot/badge.png\n    :target: https://crate.io/packages/pytest.oot/\n\n.. image:: https://pypip.in/d/pytest-oot/badge.png\n    :target: https://crate.io/packages/pytest-oot/\n\npytest-oot implements a simple way to write a test step for test engineers.\nThis plug-in use test_steps module to implement the whole things.\n\nThe test engineer can simply create test_*.oot file to use a simple case/step language,\nby using the operators and options defined in test_steps module, or user-defined by you.\n\nFor detailed operators and options for steps, please refer to test_steps module:\n    https://pypi.python.org/pypi?:action=display&name=test_steps\n\n\nNote: while using this plug-in,\nyou do not need pytest-autochecklog any more. All functions have been included.\n\n\nInstall pytest-oot\n------------------\n\n::\n\n    pip install pytest-oot\n\n\n\nExample for test_*.oot file\n---------------------------\n\nOnce the plug-in is installed, the pytest will automatically collect test_*.oot files\nto get cases, and run each items in the files. In a test_*.oot file, each case is\na test item, and each line under it is a test step. For each test step, the syntax is\nthe same as a code string in checks(\"code string\") function defined in test_steps module.\n\n\n\nExample file: test_number.oot (you can get it from the source package)\n----------------------------------------------------------------------\n\n.. code-block:: python\n\n    # Any words after # in a line are just comments\n    # One file is a test suite. The test suite description\n    test_suite: Trial1\n\n    # Identify the test bed file, currently .py file is supported\n    # similar as 'import testbed.py' in test*.py file\n    # .yaml file is support too. You can use: (see more information in TestSteps package)\n    # test_bed: example.test.testbed.yaml\n    test_bed: example.test.testbed.py\n\n    # A case starts from a case_idString, the description is in the bracket\n    # This is to define one case, just like a function or method in a .py file\n    # case_id1 means the function name is \"id1\"\n    case_id1 (NumberBase add function):\n        # under a case, there could be multiple test steps, one step in one line\n        # step format: expression1 operator expression2 options\n            # An expression can use any objects defined in test bed file\n            # operator supports:\n            #   ==(equal to), !=(not equal to), >(larger than), <(less than), >=, <=,\n            #   =~(for string, contains, e.g. \"hello world\" =~ \"llo\", regex allowed\n            #   !~ (not contain)\n        # the following step is just like:\n        #   checks( \"num1.add(3,4,5,6) == 23 -t 3\" )\n        # in a python file, in which test_steps module is used.\n        num1.add(3,4,5,6) == 23 -t 3\n        num1.add(var1, var2, var3) == 18\n\n    case_id2 (NumberBase multiple function):\n        num1.multiple(2,4,5) == 200\n\n    case_id3 (NumberChange test):\n        # Every line under the case line is a step of a case\n        # there could be multiple lines; each line follows the format:\n        #   obj.method([parameter1 [,parameter 2 [, ...]]] operator ExpectedValue -options\n        # For details, see guidance ....\n        # options:\n        # --timeout 30 == -t 30: fail if the step could not complete in 30 seconds\n        # --repeat 30 == -r 30: repeat per second if fail until pass, timeout in 30s\n        # --duration 30 == -d 30: duration of the step is 30s, if completed early, just wait until 30s\n        # --expectedfail == -x true == -x: If step fail, then report pass\n        # --skip == -s: just skip this step\n        #\n        num1.add(4)\n        num2.add(3,4,5,6) == 23\n        num2.multiple(4,5) == 460 -x True -t 12 -r 10\n        num3.add(3,4,var2) == 1000 --skip -t 25\n\n    case_id4 (Reverse String test):\n        string1.range(1,4) == 'dlr' -d 6\n\n    case_async1 (To test async actions - timeout)\n        num_async.addw(var100, var100) == 100\n        num_async.data_sync() -t 18\n        num_async.get_value() == 300\n\n    case_async2 (To test async actions - repeat)\n        num_async.addw(var100, var100) >= 300\n        num_async.get_value() == 500 --repeat 20\n\nNote: the testbed file is a python file, which define all the variables and objects to be used in the test.\nIf it reports the testbed module could not be imported, please change the module path\nto make it right.\n\n\nOperators & Options\n-------------------\n\nSupported Operators by default:\n    == (eq), != (ne), < (lt), > (gt), <= (le), >=(ge), =~(match), !~(unmatch), =>(has), !>(hasnt)\n\nAgain, all operators defined in test_steps are supported, and you can also define them by yourself.\n\n\nSupported Options by default::\n\n    -t 30   or --timeout 30    in checks()             means       timeout=30    in check()\n    -r 10   or --repeat  10    in checks()             means       repeat=10\n    -d 10   or --duration 10                          means       duration=10\n    -x  or --xfail or -x True or --xfail True         means       xfail=True\n    -w  or --warning  or -w True  or --warning True   means       warning=True\n    -s  or --skip     or -s True  or --skip True      means       skip=True\n    -e MyException                                    means       exception=MyException\n    -p pass_str or --passdesc pass_str                means       passdesc=pass_str\n    -f fail_str or --faildesc fail_str                means       faildesc=fail_str\n\n\nTest bed\n--------\n\nIf you are using a test_*.oot file, you need to use\n\n::\n\n    testbed = [module.]testbedfilename\n\nto import all the objects defined in the testbedfilename.py file.\n\n\n\nExample for using step functions in a test_*.py\n-----------------------------------------------\n\nOf course, you can directly use test_steps functions in your test_*.py test scripts files.\nPlease refer to test_steps module for details. Some basic examples as below:\n\n\nExamples (Quick Start):\n\n1.  The Simplest step:\n\n    .. code-block:: python\n\n        check(\"num1.add(3,4,5) == 23\")\n\n    It is similar as:\n\n    .. code-block:: python\n\n        assert num1.add(3,4,5) == 23\n\n    very simple, right? (we do not consider advanced features here, e.g.\n    auto-logging)\n\n\n2.  Step with non-python-defined operators\n\n    .. code-block:: python\n\n        check(\"string1.range(1..4) !~ r'\\w\\-\\w'\")\n\n    Perl-like condition, =~ means 'contains', and !~ means 'not contains'.\n    btw, regex can be used. The step is like:\n\n    .. code-block:: python\n\n        import re\n        assert not re.compile(r'\\w\\-\\w').find(string1.range(1..4))\n\n3.  Step with timeout option\n\n    .. code-block:: python\n\n        check(\"num_async.data_sync() -t 15\")\n\n    A little complicated, -t means timeout. In this step, a time-out timer\n    is set to 15 seconds. It means this step is allowed to be completed\n    in 15 seconds, otherwise, it fails. no op (==, <, >, =~, etc.) in this step,\n    it means no assert required to check the return value\n\n    This is implemented by forking another thread to run the step.\n    Considering some tests require to wait for a response, but how long?\n    this can be useful\n\n4.  Step with repeat option:\n\n    .. code-block:: python\n\n        check(\"num_async.get_value() == 500 --repeat 20\")\n\n    Another option --repeat (same as -r).\n    The step means the step will be re-run every another second\n    in total 20 seconds, until the condition comes true\n\n    If the condition is always false in 20 seconds, then the step fails\n\n5.  Step with multiple options\n\n    .. code-block:: python\n\n        check(\"num2.multiple(4,5) == 460 -x True -t 12 -r 10\")\n\n    Multiple options for one step ::\n\n        -x (--expectedfail): pass if the condition is not met\n        -t (--timeout): set a timeout timer\n        -r (--repeat): repeat this step in 10 seconds until it comes true\n           (here false actually due to -x), or timeout\n\n6.  Use steps function to execute multiple steps\n\n    .. code-block:: python\n\n        checks('''\n            num1.add(4)\n            num2.add(3,4,5,6) == 23\n            num2.multiple(4,5) == 460 -x True -t 12 -r 10\n            num3.add(3,4,var2) == 1000 --skip -t 20\n        ''')\n\n7. Or you are lazy, just use s function like this:\n\n    .. code-block:: python\n\n       c(\"num2.multiple(4,5) == 460 -x True -t 12 -r 10\")\n       c('''\n            num1.add(4)\n            num2.add(3,4,5,6) == 23\n            num2.multiple(4,5) == 460 -x True -t 12 -r 10\n            num3.add(3,4,var2) == 1000 --skip -t 25\n        ''')\n\n\nNote: each line of the code strings in the checks functions can be a step in test_*.oot file.\n\n\nHooks\n-----\n\npytest-oot is to support multiple hooks for operator, logs, and options, refer to test_steps.\nPlease send mails to steven004@gmail.com if you have any comments or suggestions\n\n\nLicense\n-------\n\nThis software is licensed under the `MIT license <http://en.wikipedia.org/wiki/MIT_License>`_.\n\n\u00a9 2015 Steven LI\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/steven004/pytest_oot", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pytest-oot", "package_url": "https://pypi.org/project/pytest-oot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pytest-oot/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/steven004/pytest_oot"}, "release_url": "https://pypi.org/project/pytest-oot/0.6.1/", "requires_dist": null, "requires_python": null, "summary": "Run object-oriented tests in a simple format", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://crate.io/packages/pytest.oot/\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/pytest-oot/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f24da88d8ff5046ce28a4769a40050a315bcad05/68747470733a2f2f70797069702e696e2f762f7079746573742d6f6f742f62616467652e706e67\"></a>\n<a href=\"https://crate.io/packages/pytest-oot/\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/pytest-oot/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04c9d67cb383da7809f07e427a5c0a98ddec03c8/68747470733a2f2f70797069702e696e2f642f7079746573742d6f6f742f62616467652e706e67\"></a>\n<p>pytest-oot implements a simple way to write a test step for test engineers.\nThis plug-in use test_steps module to implement the whole things.</p>\n<p>The test engineer can simply create test_*.oot file to use a simple case/step language,\nby using the operators and options defined in test_steps module, or user-defined by you.</p>\n<dl>\n<dt>For detailed operators and options for steps, please refer to test_steps module:</dt>\n<dd><a href=\"https://pypi.python.org/pypi?:action=display&amp;name=test_steps\" rel=\"nofollow\">https://pypi.python.org/pypi?:action=display&amp;name=test_steps</a></dd>\n</dl>\n<p>Note: while using this plug-in,\nyou do not need pytest-autochecklog any more. All functions have been included.</p>\n<div id=\"install-pytest-oot\">\n<h2>Install pytest-oot</h2>\n<pre>pip install pytest-oot\n</pre>\n</div>\n<div id=\"example-for-test-oot-file\">\n<h2>Example for test_*.oot file</h2>\n<p>Once the plug-in is installed, the pytest will automatically collect test_*.oot files\nto get cases, and run each items in the files. In a test_*.oot file, each case is\na test item, and each line under it is a test step. For each test step, the syntax is\nthe same as a code string in checks(\u201ccode string\u201d) function defined in test_steps module.</p>\n</div>\n<div id=\"example-file-test-number-oot-you-can-get-it-from-the-source-package\">\n<h2>Example file: test_number.oot (you can get it from the source package)</h2>\n<pre><span class=\"c1\"># Any words after # in a line are just comments</span>\n<span class=\"c1\"># One file is a test suite. The test suite description</span>\n<span class=\"n\">test_suite</span><span class=\"p\">:</span> <span class=\"n\">Trial1</span>\n\n<span class=\"c1\"># Identify the test bed file, currently .py file is supported</span>\n<span class=\"c1\"># similar as 'import testbed.py' in test*.py file</span>\n<span class=\"c1\"># .yaml file is support too. You can use: (see more information in TestSteps package)</span>\n<span class=\"c1\"># test_bed: example.test.testbed.yaml</span>\n<span class=\"n\">test_bed</span><span class=\"p\">:</span> <span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">testbed</span><span class=\"o\">.</span><span class=\"n\">py</span>\n\n<span class=\"c1\"># A case starts from a case_idString, the description is in the bracket</span>\n<span class=\"c1\"># This is to define one case, just like a function or method in a .py file</span>\n<span class=\"c1\"># case_id1 means the function name is \"id1\"</span>\n<span class=\"n\">case_id1</span> <span class=\"p\">(</span><span class=\"n\">NumberBase</span> <span class=\"n\">add</span> <span class=\"n\">function</span><span class=\"p\">):</span>\n    <span class=\"c1\"># under a case, there could be multiple test steps, one step in one line</span>\n    <span class=\"c1\"># step format: expression1 operator expression2 options</span>\n        <span class=\"c1\"># An expression can use any objects defined in test bed file</span>\n        <span class=\"c1\"># operator supports:</span>\n        <span class=\"c1\">#   ==(equal to), !=(not equal to), &gt;(larger than), &lt;(less than), &gt;=, &lt;=,</span>\n        <span class=\"c1\">#   =~(for string, contains, e.g. \"hello world\" =~ \"llo\", regex allowed</span>\n        <span class=\"c1\">#   !~ (not contain)</span>\n    <span class=\"c1\"># the following step is just like:</span>\n    <span class=\"c1\">#   checks( \"num1.add(3,4,5,6) == 23 -t 3\" )</span>\n    <span class=\"c1\"># in a python file, in which test_steps module is used.</span>\n    <span class=\"n\">num1</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">23</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"mi\">3</span>\n    <span class=\"n\">num1</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">18</span>\n\n<span class=\"n\">case_id2</span> <span class=\"p\">(</span><span class=\"n\">NumberBase</span> <span class=\"n\">multiple</span> <span class=\"n\">function</span><span class=\"p\">):</span>\n    <span class=\"n\">num1</span><span class=\"o\">.</span><span class=\"n\">multiple</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n\n<span class=\"n\">case_id3</span> <span class=\"p\">(</span><span class=\"n\">NumberChange</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Every line under the case line is a step of a case</span>\n    <span class=\"c1\"># there could be multiple lines; each line follows the format:</span>\n    <span class=\"c1\">#   obj.method([parameter1 [,parameter 2 [, ...]]] operator ExpectedValue -options</span>\n    <span class=\"c1\"># For details, see guidance ....</span>\n    <span class=\"c1\"># options:</span>\n    <span class=\"c1\"># --timeout 30 == -t 30: fail if the step could not complete in 30 seconds</span>\n    <span class=\"c1\"># --repeat 30 == -r 30: repeat per second if fail until pass, timeout in 30s</span>\n    <span class=\"c1\"># --duration 30 == -d 30: duration of the step is 30s, if completed early, just wait until 30s</span>\n    <span class=\"c1\"># --expectedfail == -x true == -x: If step fail, then report pass</span>\n    <span class=\"c1\"># --skip == -s: just skip this step</span>\n    <span class=\"c1\">#</span>\n    <span class=\"n\">num1</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">num2</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">23</span>\n    <span class=\"n\">num2</span><span class=\"o\">.</span><span class=\"n\">multiple</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">460</span> <span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"kc\">True</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"mi\">12</span> <span class=\"o\">-</span><span class=\"n\">r</span> <span class=\"mi\">10</span>\n    <span class=\"n\">num3</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"n\">var2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1000</span> <span class=\"o\">--</span><span class=\"n\">skip</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"mi\">25</span>\n\n<span class=\"n\">case_id4</span> <span class=\"p\">(</span><span class=\"n\">Reverse</span> <span class=\"n\">String</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n    <span class=\"n\">string1</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'dlr'</span> <span class=\"o\">-</span><span class=\"n\">d</span> <span class=\"mi\">6</span>\n\n<span class=\"n\">case_async1</span> <span class=\"p\">(</span><span class=\"n\">To</span> <span class=\"n\">test</span> <span class=\"k\">async</span> <span class=\"n\">actions</span> <span class=\"o\">-</span> <span class=\"n\">timeout</span><span class=\"p\">)</span>\n    <span class=\"n\">num_async</span><span class=\"o\">.</span><span class=\"n\">addw</span><span class=\"p\">(</span><span class=\"n\">var100</span><span class=\"p\">,</span> <span class=\"n\">var100</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>\n    <span class=\"n\">num_async</span><span class=\"o\">.</span><span class=\"n\">data_sync</span><span class=\"p\">()</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"mi\">18</span>\n    <span class=\"n\">num_async</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">300</span>\n\n<span class=\"n\">case_async2</span> <span class=\"p\">(</span><span class=\"n\">To</span> <span class=\"n\">test</span> <span class=\"k\">async</span> <span class=\"n\">actions</span> <span class=\"o\">-</span> <span class=\"n\">repeat</span><span class=\"p\">)</span>\n    <span class=\"n\">num_async</span><span class=\"o\">.</span><span class=\"n\">addw</span><span class=\"p\">(</span><span class=\"n\">var100</span><span class=\"p\">,</span> <span class=\"n\">var100</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">300</span>\n    <span class=\"n\">num_async</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">500</span> <span class=\"o\">--</span><span class=\"n\">repeat</span> <span class=\"mi\">20</span>\n</pre>\n<p>Note: the testbed file is a python file, which define all the variables and objects to be used in the test.\nIf it reports the testbed module could not be imported, please change the module path\nto make it right.</p>\n</div>\n<div id=\"operators-options\">\n<h2>Operators &amp; Options</h2>\n<dl>\n<dt>Supported Operators by default:</dt>\n<dd>== (eq), != (ne), &lt; (lt), &gt; (gt), &lt;= (le), &gt;=(ge), =~(match), !~(unmatch), =&gt;(has), !&gt;(hasnt)</dd>\n</dl>\n<p>Again, all operators defined in test_steps are supported, and you can also define them by yourself.</p>\n<p>Supported Options by default:</p>\n<pre>-t 30   or --timeout 30    in checks()             means       timeout=30    in check()\n-r 10   or --repeat  10    in checks()             means       repeat=10\n-d 10   or --duration 10                          means       duration=10\n-x  or --xfail or -x True or --xfail True         means       xfail=True\n-w  or --warning  or -w True  or --warning True   means       warning=True\n-s  or --skip     or -s True  or --skip True      means       skip=True\n-e MyException                                    means       exception=MyException\n-p pass_str or --passdesc pass_str                means       passdesc=pass_str\n-f fail_str or --faildesc fail_str                means       faildesc=fail_str\n</pre>\n</div>\n<div id=\"test-bed\">\n<h2>Test bed</h2>\n<p>If you are using a test_*.oot file, you need to use</p>\n<pre>testbed = [module.]testbedfilename\n</pre>\n<p>to import all the objects defined in the testbedfilename.py file.</p>\n</div>\n<div id=\"example-for-using-step-functions-in-a-test-py\">\n<h2>Example for using step functions in a test_*.py</h2>\n<p>Of course, you can directly use test_steps functions in your test_*.py test scripts files.\nPlease refer to test_steps module for details. Some basic examples as below:</p>\n<p>Examples (Quick Start):</p>\n<ol>\n<li><p>The Simplest step:</p>\n<pre><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\"num1.add(3,4,5) == 23\"</span><span class=\"p\">)</span>\n</pre>\n<p>It is similar as:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">num1</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">23</span>\n</pre>\n<p>very simple, right? (we do not consider advanced features here, e.g.\nauto-logging)</p>\n</li>\n<li><p>Step with non-python-defined operators</p>\n<pre><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\"string1.range(1..4) !~ r'\\w\\-\\w'\"</span><span class=\"p\">)</span>\n</pre>\n<p>Perl-like condition, =~ means \u2018contains\u2019, and !~ means \u2018not contains\u2019.\nbtw, regex can be used. The step is like:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\w\\-\\w'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">string1</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"o\">.</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n</li>\n<li><p>Step with timeout option</p>\n<pre><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\"num_async.data_sync() -t 15\"</span><span class=\"p\">)</span>\n</pre>\n<p>A little complicated, -t means timeout. In this step, a time-out timer\nis set to 15 seconds. It means this step is allowed to be completed\nin 15 seconds, otherwise, it fails. no op (==, &lt;, &gt;, =~, etc.) in this step,\nit means no assert required to check the return value</p>\n<p>This is implemented by forking another thread to run the step.\nConsidering some tests require to wait for a response, but how long?\nthis can be useful</p>\n</li>\n<li><p>Step with repeat option:</p>\n<pre><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\"num_async.get_value() == 500 --repeat 20\"</span><span class=\"p\">)</span>\n</pre>\n<p>Another option \u2013repeat (same as -r).\nThe step means the step will be re-run every another second\nin total 20 seconds, until the condition comes true</p>\n<p>If the condition is always false in 20 seconds, then the step fails</p>\n</li>\n<li><p>Step with multiple options</p>\n<pre><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\"num2.multiple(4,5) == 460 -x True -t 12 -r 10\"</span><span class=\"p\">)</span>\n</pre>\n<p>Multiple options for one step</p>\n<pre>-x (--expectedfail): pass if the condition is not met\n-t (--timeout): set a timeout timer\n-r (--repeat): repeat this step in 10 seconds until it comes true\n   (here false actually due to -x), or timeout\n</pre>\n</li>\n<li><p>Use steps function to execute multiple steps</p>\n<pre><span class=\"n\">checks</span><span class=\"p\">(</span><span class=\"s1\">'''\n    num1.add(4)\n    num2.add(3,4,5,6) == 23\n    num2.multiple(4,5) == 460 -x True -t 12 -r 10\n    num3.add(3,4,var2) == 1000 --skip -t 20\n'''</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Or you are lazy, just use s function like this:</p>\n<blockquote>\n<pre><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s2\">\"num2.multiple(4,5) == 460 -x True -t 12 -r 10\"</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'''\n     num1.add(4)\n     num2.add(3,4,5,6) == 23\n     num2.multiple(4,5) == 460 -x True -t 12 -r 10\n     num3.add(3,4,var2) == 1000 --skip -t 25\n '''</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</li>\n</ol>\n<p>Note: each line of the code strings in the checks functions can be a step in test_*.oot file.</p>\n</div>\n<div id=\"hooks\">\n<h2>Hooks</h2>\n<p>pytest-oot is to support multiple hooks for operator, logs, and options, refer to test_steps.\nPlease send mails to <a href=\"mailto:steven004%40gmail.com\">steven004<span>@</span>gmail<span>.</span>com</a> if you have any comments or suggestions</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under the <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT license</a>.</p>\n<p>\u00a9 2015 Steven LI</p>\n</div>\n\n          </div>"}, "last_serial": 2348543, "releases": {"0.0.2": [], "0.1": [{"comment_text": "", "digests": {"md5": "d71de78d4d942cf9676aa39dd9bfcd02", "sha256": "beb0302afd63f1ca9caccf6a17933f9ac0215d5dc79a458ce9ee947c9f5706d5"}, "downloads": -1, "filename": "pytest-oot-0.1.tar.gz", "has_sig": false, "md5_digest": "d71de78d4d942cf9676aa39dd9bfcd02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3899, "upload_time": "2014-12-30T09:19:06", "upload_time_iso_8601": "2014-12-30T09:19:06.772953Z", "url": "https://files.pythonhosted.org/packages/2d/da/df84651bd30b5747652dcfbe0ea99720372888182fb0556fd50560a3e581/pytest-oot-0.1.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "dd3e87174eb3757623b089cc77f6cb7d", "sha256": "fa9736a11c64e22f048a48cf10f522f50f7889ec8811dcf7f947410a7073990f"}, "downloads": -1, "filename": "pytest-oot-0.2.1.tar.gz", "has_sig": false, "md5_digest": "dd3e87174eb3757623b089cc77f6cb7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8087, "upload_time": "2015-01-01T08:17:04", "upload_time_iso_8601": "2015-01-01T08:17:04.197532Z", "url": "https://files.pythonhosted.org/packages/ac/e5/e75c144596ce08eecd9240cf6971f6c627678a5953a9f44e5f35d4ecfe0e/pytest-oot-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "88ce0bd649f86bd89d97888bddf5d843", "sha256": "e1ff3411776930b6294ab73030bfb837573d5375fb3db56b03e6e161f3c45550"}, "downloads": -1, "filename": "pytest-oot-0.2.2.tar.gz", "has_sig": false, "md5_digest": "88ce0bd649f86bd89d97888bddf5d843", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8408, "upload_time": "2015-01-02T04:27:27", "upload_time_iso_8601": "2015-01-02T04:27:27.006894Z", "url": "https://files.pythonhosted.org/packages/9e/29/f823d5a41344b63ebd416c14c6e73e500cf4dde85b68cb9dc5c37a4c9b91/pytest-oot-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "ff188b89fd518caecd5cab0caa3cc2f0", "sha256": "22e93c73622a345975f4f4cf8c089a9131ba5794e2bf03c6464f41634e315800"}, "downloads": -1, "filename": "pytest-oot-0.2.3.tar.gz", "has_sig": false, "md5_digest": "ff188b89fd518caecd5cab0caa3cc2f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8490, "upload_time": "2015-01-02T05:14:57", "upload_time_iso_8601": "2015-01-02T05:14:57.617673Z", "url": "https://files.pythonhosted.org/packages/41/2a/d3219496801bb2a1a3ed975ce72b360ec997b78be400662a6757bdf0f485/pytest-oot-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "f0208ebbf36fcec2e58f82d9c904180d", "sha256": "224dec0d003a844a1055928f77f87ecff8ad03b6df1a3b3ab2e2ba3b00fc50d8"}, "downloads": -1, "filename": "pytest-oot-0.2.4.tar.gz", "has_sig": false, "md5_digest": "f0208ebbf36fcec2e58f82d9c904180d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8459, "upload_time": "2015-01-02T05:18:39", "upload_time_iso_8601": "2015-01-02T05:18:39.745193Z", "url": "https://files.pythonhosted.org/packages/39/d0/f47db4193be36db3bf2b701bbe7dfb97d117a28f784c540207a92aeb3326/pytest-oot-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d803ddafd5e84ac11bcfbde6dcbe88ba", "sha256": "1c2fbe8f189394af293b2928cecd95dcf307f65927af11253c1868a9004dce14"}, "downloads": -1, "filename": "pytest-oot-0.2.5.tar.gz", "has_sig": false, "md5_digest": "d803ddafd5e84ac11bcfbde6dcbe88ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8467, "upload_time": "2015-01-02T05:33:00", "upload_time_iso_8601": "2015-01-02T05:33:00.985814Z", "url": "https://files.pythonhosted.org/packages/07/95/8007087a4c6ad7397938b2ed0069b2a16f5145c5eef97f97907ff7bba95d/pytest-oot-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "f372a7b393352460d229bd93b01dffeb", "sha256": "f8511d918dc6d40a1d91d1d41a70b9e488bfba7e5ea3339006960ce3f9a8b194"}, "downloads": -1, "filename": "pytest-oot-0.2.6.tar.gz", "has_sig": false, "md5_digest": "f372a7b393352460d229bd93b01dffeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8469, "upload_time": "2015-01-02T09:39:14", "upload_time_iso_8601": "2015-01-02T09:39:14.299434Z", "url": "https://files.pythonhosted.org/packages/e1/c1/e31cbef0d7dd49d2e30cb2c9f250fcfc72d5f35e0ad78bfeb0535a343ebb/pytest-oot-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "31231d1770fd44113f54fabce974fa42", "sha256": "fa4f6b79ea14b30942264802b6eb76792efee698effcd9876c2a9d51b6750b38"}, "downloads": -1, "filename": "pytest-oot-0.2.7.tar.gz", "has_sig": false, "md5_digest": "31231d1770fd44113f54fabce974fa42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10803, "upload_time": "2015-01-03T08:24:42", "upload_time_iso_8601": "2015-01-03T08:24:42.090131Z", "url": "https://files.pythonhosted.org/packages/f3/40/1790555f7a1e3ac954ea9d4f998a186ebe82682a88220f9e4ae2669fde2c/pytest-oot-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "4008ad2e870fe4b0f406ce4d0d4c49a0", "sha256": "352c97bc3ad6a8cc5222a09bffbf1938e1b36a68599aacc16df8dc73e764ebd3"}, "downloads": -1, "filename": "pytest-oot-0.2.8.tar.gz", "has_sig": false, "md5_digest": "4008ad2e870fe4b0f406ce4d0d4c49a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10816, "upload_time": "2015-01-03T08:32:09", "upload_time_iso_8601": "2015-01-03T08:32:09.515182Z", "url": "https://files.pythonhosted.org/packages/7a/1f/e77d417e2e952d1271cddf2e43de9af4c84e3631e9e27bb8087d3b2bb4a1/pytest-oot-0.2.8.tar.gz", "yanked": false}], "0.2a": [{"comment_text": "", "digests": {"md5": "03b9aea70f0b32afb891eb4eba066320", "sha256": "961f9b2f2d1712677626e85c20898e615c7723aa0ef0608452a852a726e5fc10"}, "downloads": -1, "filename": "pytest-oot-0.2a.tar.gz", "has_sig": false, "md5_digest": "03b9aea70f0b32afb891eb4eba066320", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7331, "upload_time": "2014-12-31T09:22:01", "upload_time_iso_8601": "2014-12-31T09:22:01.426389Z", "url": "https://files.pythonhosted.org/packages/7c/4c/c3cfa11b321c25c24acfef3f74bd674c420a677b7992dc978d2ee4cbd6ee/pytest-oot-0.2a.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2d78d3322d12d205d92aa90c55ec3017", "sha256": "004d4cb400ea01891b100ae52177697285d39be6f1a1afb1cd4c7536e5c38e62"}, "downloads": -1, "filename": "pytest-oot-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d78d3322d12d205d92aa90c55ec3017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11387, "upload_time": "2015-01-05T03:19:14", "upload_time_iso_8601": "2015-01-05T03:19:14.101539Z", "url": "https://files.pythonhosted.org/packages/8e/f1/309633dcb59a65fd0a2104ab983fb5c9e20fd0eca7c5073e026c149f3460/pytest-oot-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5fe4ed515e79e22348a05ac473ced997", "sha256": "2793f7d802344f5c7c45a6c238c2a5535bd2b1d50cec5c40a0c203af41cb51d9"}, "downloads": -1, "filename": "pytest-oot-0.3.1.tar.gz", "has_sig": false, "md5_digest": "5fe4ed515e79e22348a05ac473ced997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11397, "upload_time": "2015-01-05T03:21:11", "upload_time_iso_8601": "2015-01-05T03:21:11.750692Z", "url": "https://files.pythonhosted.org/packages/75/f4/c2e5e549f1b4b4c1beb35406ae331dbfd17821cfa60791dc3912f195c2a1/pytest-oot-0.3.1.tar.gz", "yanked": false}], "0.5.05": [{"comment_text": "", "digests": {"md5": "8ac090a67aa477c23e1c884e7df51544", "sha256": "3a8033ebc2e5aa6a4979f33dc7e35e4ad8ec32abb8be0fb853ce0082424e0e08"}, "downloads": -1, "filename": "pytest-oot-0.5.05.tar.gz", "has_sig": false, "md5_digest": "8ac090a67aa477c23e1c884e7df51544", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9285, "upload_time": "2015-04-24T00:22:47", "upload_time_iso_8601": "2015-04-24T00:22:47.449990Z", "url": "https://files.pythonhosted.org/packages/e0/79/cd7ac5080f5841658bf0ee51d4d41aea9a2da465c693d71c3d847454cf36/pytest-oot-0.5.05.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "a60273eee255a1d49ce73d80dbbe48ef", "sha256": "4f2f68b289e1ba62729e7dbf4328b57f20edd3018bea5adacdd6c2c2cc168f91"}, "downloads": -1, "filename": "pytest-oot-0.5.6.tar.gz", "has_sig": false, "md5_digest": "a60273eee255a1d49ce73d80dbbe48ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9679, "upload_time": "2015-04-25T00:22:32", "upload_time_iso_8601": "2015-04-25T00:22:32.319510Z", "url": "https://files.pythonhosted.org/packages/1a/c9/56c28098ba891b5d6375360e319b2bbe076328f61865403d89a5461feafa/pytest-oot-0.5.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "8ffd9659be4c4ab0a8dd2890a909bc81", "sha256": "547b80e86cad80fecf7f60b7cb8fa68903126568e5df5312ab8bbe6f819efd67"}, "downloads": -1, "filename": "pytest-oot-0.6.1.tar.gz", "has_sig": false, "md5_digest": "8ffd9659be4c4ab0a8dd2890a909bc81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10637, "upload_time": "2016-09-18T02:19:32", "upload_time_iso_8601": "2016-09-18T02:19:32.128310Z", "url": "https://files.pythonhosted.org/packages/86/cf/dfcd0697bac0005331fd906ba1f8396d3b87c4efaaa70f9fc2f6c03fda34/pytest-oot-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ffd9659be4c4ab0a8dd2890a909bc81", "sha256": "547b80e86cad80fecf7f60b7cb8fa68903126568e5df5312ab8bbe6f819efd67"}, "downloads": -1, "filename": "pytest-oot-0.6.1.tar.gz", "has_sig": false, "md5_digest": "8ffd9659be4c4ab0a8dd2890a909bc81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10637, "upload_time": "2016-09-18T02:19:32", "upload_time_iso_8601": "2016-09-18T02:19:32.128310Z", "url": "https://files.pythonhosted.org/packages/86/cf/dfcd0697bac0005331fd906ba1f8396d3b87c4efaaa70f9fc2f6c03fda34/pytest-oot-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:54 2020"}