{"info": {"author": "David Martinez Martin", "author_email": "davidmtn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "# AwsLexAlexa  [![Generic badge](https://img.shields.io/badge/Python-3.4,%203.5,%203.6-green.svg)](https://shields.io/)\n\nThis library may wrap the internal logistic between Amazon Lex or Alexa (Amazon echo) using AWS Lambda as background serverless.\n\nYou can see the implementation in `lambda_function.py`.\n\n**Install**\n```bash\npip install AwsLexAlexa -t .\n```\n\n**Usage:**\n```python\nfrom awsLexAlexa.event_handler import EventHandler, LEX, ALEXA\n\nev = EventHandler()\n\n# Get logger with UserId included in log message: \nlogger = ev.get_configured_logger(\"mi_app_name\")\n\n@ev.handler_intent(intent='intent-name')\ndef foo(event):\n    # TODO: Implement logic required\n    return event.delegate_response()\n\n@ev.default_intent()\ndef default(event):\n    # TODO: Implement logic required\n    # Other intents which function have not be specified\n    return event.delegate_response()\n\n...\n...\n\ndef lambda_handler(event, context):\n    logger.debug('Request:\\n {}'.format(event))\n    action = ev.execute(event)\n    logger.debug('Response:\\n {}'.format(action))\n    return action\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dmmop/awsLexAlexa", "keywords": "", "license": "GNU General Public License v3", "maintainer": "", "maintainer_email": "", "name": "awsLexAlexa", "package_url": "https://pypi.org/project/awsLexAlexa/", "platform": "", "project_url": "https://pypi.org/project/awsLexAlexa/", "project_urls": {"Homepage": "https://github.com/dmmop/awsLexAlexa"}, "release_url": "https://pypi.org/project/awsLexAlexa/0.9/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AwsLexAlexa  <a href=\"https://shields.io/\" rel=\"nofollow\"><img alt=\"Generic badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/225fef2d086aeda29fc3ecae1c69a26e5bd48cf6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e342c253230332e352c253230332e362d677265656e2e737667\"></a></h1>\n<p>This library may wrap the internal logistic between Amazon Lex or Alexa (Amazon echo) using AWS Lambda as background serverless.</p>\n<p>You can see the implementation in <code>lambda_function.py</code>.</p>\n<p><strong>Install</strong></p>\n<pre>pip install AwsLexAlexa -t .\n</pre>\n<p><strong>Usage:</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">awsLexAlexa.event_handler</span> <span class=\"kn\">import</span> <span class=\"n\">EventHandler</span><span class=\"p\">,</span> <span class=\"n\">LEX</span><span class=\"p\">,</span> <span class=\"n\">ALEXA</span>\n\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">EventHandler</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get logger with UserId included in log message: </span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">get_configured_logger</span><span class=\"p\">(</span><span class=\"s2\">\"mi_app_name\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@ev</span><span class=\"o\">.</span><span class=\"n\">handler_intent</span><span class=\"p\">(</span><span class=\"n\">intent</span><span class=\"o\">=</span><span class=\"s1\">'intent-name'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"c1\"># TODO: Implement logic required</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">delegate_response</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@ev</span><span class=\"o\">.</span><span class=\"n\">default_intent</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"c1\"># TODO: Implement logic required</span>\n    <span class=\"c1\"># Other intents which function have not be specified</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">delegate_response</span><span class=\"p\">()</span>\n\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'Request:</span><span class=\"se\">\\n</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">))</span>\n    <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'Response:</span><span class=\"se\">\\n</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">action</span>\n</pre>\n\n          </div>"}, "last_serial": 6575455, "releases": {"0.6": [{"comment_text": "", "digests": {"md5": "435ecac97d2091b45c7132816824fd24", "sha256": "11b1c1381efb94033984d0b3ad2658e9344b9e978e8a9dc1c4f79a713a5111ee"}, "downloads": -1, "filename": "awsLexAlexa-0.6.tar.gz", "has_sig": false, "md5_digest": "435ecac97d2091b45c7132816824fd24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9616, "upload_time": "2018-08-27T07:55:40", "upload_time_iso_8601": "2018-08-27T07:55:40.695317Z", "url": "https://files.pythonhosted.org/packages/27/fa/ba92a090d090de2a01841af7631622b6081410beab3530c7d0addc884888/awsLexAlexa-0.6.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "8a5a3ff00f1c2e311c007421a3a90937", "sha256": "5b54783e73c5c98bbc7d10ab81386a584132608007771fe175a7d618ec2120b0"}, "downloads": -1, "filename": "awsLexAlexa-0.9.tar.gz", "has_sig": false, "md5_digest": "8a5a3ff00f1c2e311c007421a3a90937", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8176, "upload_time": "2020-02-05T11:29:41", "upload_time_iso_8601": "2020-02-05T11:29:41.354269Z", "url": "https://files.pythonhosted.org/packages/3d/e8/28c33e5eec04899251ef92476261c51831f965c850bcf970808aec7276a9/awsLexAlexa-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a5a3ff00f1c2e311c007421a3a90937", "sha256": "5b54783e73c5c98bbc7d10ab81386a584132608007771fe175a7d618ec2120b0"}, "downloads": -1, "filename": "awsLexAlexa-0.9.tar.gz", "has_sig": false, "md5_digest": "8a5a3ff00f1c2e311c007421a3a90937", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8176, "upload_time": "2020-02-05T11:29:41", "upload_time_iso_8601": "2020-02-05T11:29:41.354269Z", "url": "https://files.pythonhosted.org/packages/3d/e8/28c33e5eec04899251ef92476261c51831f965c850bcf970808aec7276a9/awsLexAlexa-0.9.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:38 2020"}