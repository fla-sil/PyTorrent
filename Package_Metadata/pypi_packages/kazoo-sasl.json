{"info": {"author": "Kazoo team", "author_email": "python-zk@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Communications", "Topic :: System :: Distributed Computing", "Topic :: System :: Networking"], "description": "Kazoo-sasl\n=====\n\n![Travis Build](https://travis-ci.org/StephenSorriaux/kazoo-sasl.svg?branch=master)\n\n![Latest Version](https://img.shields.io/pypi/v/kazoo-sasl.svg)\n\n![Downloads](https://img.shields.io/pypi/dm/kazoo-sasl.svg)\n\n`kazoo-sasl` is a fork of `kazoo` that implements a higher level API to [Apache\nZookeeper](http://zookeeper.apache.org/)  with SASL for Python clients.\n\nSee [the full docs](http://kazoo.rtfd.org/) for more information.\n\nLicense\n-------\n\n`kazoo-sasl` is offered under the Apache License 2.0.\n\nAuthors\n-------\n\n`kazoo` started under the [Nimbus\nProject](http://www.nimbusproject.org/) and through collaboration with\nthe open-source community has been merged with code from\n[Mozilla](http://www.mozilla.org/) and the [Zope\nCorporation](http://zope.com/). It has since gathered an active\ncommunity of over fifty contributors.\n\n\n<a name=\"2.6.0\"></a>\n## 2.6.0 (2018-07-24)\n\n#### Features\n\n* **recipe:**  added SASL digest MD5 support ([533adbba](https://github.com/python-zk/kazoo/commit/533adbbafdfb41c1bf01fdf3c188c063847b542b))\n\n<a name=\"2.5.0\"></a>\n## 2.5.0 (2018-06-01)\n\n\n#### Performance\n\n* **recipe:**  Give TreeCache standalone queue ([4456f180](https://github.com/python-zk/kazoo/commit/4456f180735a0f8520bfc42474de9d27fa01bb2c))\n\n#### Doc\n\n*   Correctly document supported versions ([f860de52](https://github.com/python-zk/kazoo/commit/f860de5284e8ba7d0ed4171d9e5c5bef41f6b64d))\n*   Add license to Wheel ([43d156de](https://github.com/python-zk/kazoo/commit/43d156de3d41173d7baf6e8edb4efa377b3732fc))\n*   minor tweaks to contributing.md (#464) ([5837d11b](https://github.com/python-zk/kazoo/commit/5837d11bb541be1296e1b3c1842b11ceb7e743d4))\n\n#### Features\n\n* **recipe:**  allow non ephemeral locking ([6f7a603d](https://github.com/python-zk/kazoo/commit/6f7a603de9f04ec46d9946c6f5b1cb6e2b913b63))\n\n#### Chore\n\n*   drop python 2.6 compatible gevent ([2e8dcd38](https://github.com/python-zk/kazoo/commit/2e8dcd3836d01640f07e8de911cdfb3639f97d20))\n*   remove debian packaging (#468) ([a28423aa](https://github.com/python-zk/kazoo/commit/a28423aac7f33111388372dec50653a3091b9045))\n*   stop bundling virtualenv ([af9b4cab](https://github.com/python-zk/kazoo/commit/af9b4cab39982d961647afca8119816ffe7bf5e6))\n*   remove python 3.3 from tox ([cf66474b](https://github.com/python-zk/kazoo/commit/cf66474b27b4efc9f65e292434c2fcffb697d34d))\n*   remove `easy_install` instructions ([6e6627d5](https://github.com/python-zk/kazoo/commit/6e6627d58628dec11d127fc5508f9a1d16e9c317))\n\n#### Bug Fixes\n\n*   Pass watch as keyword arg instead of positional arg (#495) ([23850792](https://github.com/python-zk/kazoo/commit/2385079267db0bea6793c4f20588644381803a98))\n*   need gevent >= 1.2, not > 1.1 ([18f3531b](https://github.com/python-zk/kazoo/commit/18f3531b605119a547cfc4d5a4223b4b3f185405))\n*   Remove use of \"async\" as a variable ([225d3369](https://github.com/python-zk/kazoo/commit/225d3369c7a0736125a9375951a079f70fbe9e79), closes [#455](https://github.com/python-zk/kazoo/issues/455))\n* **core:**\n  *  Fix gevent 1.3b1+ timeout import ([257b5896](https://github.com/python-zk/kazoo/commit/257b58961f7ddd9db04d6efa070739a1b0404487))\n  *  Correctly fire multiple callbacks ([0905c47b](https://github.com/python-zk/kazoo/commit/0905c47bff3cfc42382daff0d5ac81189c8ba46d))\n  *  resolve race in IAsyncResult.wait() (#487) ([4d268adf](https://github.com/python-zk/kazoo/commit/4d268adf9837836f05dde5ec81be0d7bbd759e78))\n* **recipe:**\n  *  conn hangs when TreeCache refreshing ([11194137](https://github.com/python-zk/kazoo/commit/111941371daec00a2ecb5d8c29b9b1d35d6aa4ff))\n  *  Unexpected exceptions break TreeCache ([db0c2d4f](https://github.com/python-zk/kazoo/commit/db0c2d4f8ab5ecfb367b7b2accfd9c52c1c91fcd))\n\n#### Refactor\n\n*   Unify queue factory in various handlers ([cbd02f5c](https://github.com/python-zk/kazoo/commit/cbd02f5ccc6ea9e6dd6b5da01a0397ea649143a0))\n\n\n\n<a name=\"2.4.0\"></a>\n## 2.4.0 (2017-06-14)\n\n**PYTHON SUPPORTED VERSIONS CHANGE**: Please note that Kazoo no longer tests\non Python 2.6 or 3.3. Tested versions are 2.7, 3.4, 3.5, 3.6, and PyPy. The\nmultiple endpoint support for KazooClient may not work correctly on 2.6.\n\n#### Bug Fixes\n\n*   add missed parens to LockingQueue function call. ([88cf4aa7](https://github.com/python-zk/kazoo/commit/88cf4aa7bcd1437a44f6d3aeec34989c467fcf9d))\n* **core:**  revert PR #305 SetWatches which caused RuntimeError ([a7b45390](https://github.com/python-zk/kazoo/commit/a7b45390f3720a33c9ad3896a8a185bfb2628839))\n\n#### Features\n\n*   pep8 all the things ([92880342](https://github.com/python-zk/kazoo/commit/928803420721b81962e50d425610e62b0c12e438), closes [#445](https://github.com/python-zk/kazoo/issues/445))\n*   drop Python 2.6/3.3 official support, add 3.5/3.6 testing ([2faba9ff](https://github.com/python-zk/kazoo/commit/2faba9ff3bdeff151ac6c922bf65b2dcf9c7bd7b), closes [#441](https://github.com/python-zk/kazoo/issues/441))\n* **core:**\n  *  allow multiple endpoints in KazooClient hosts arg ([72a8d96c](https://github.com/python-zk/kazoo/commit/72a8d96ca188c3c2e93bd0243283539ebd6c16f1), closes [#411](https://github.com/python-zk/kazoo/issues/411))\n  *  use epoll when available to support fds > 1023 ([267e61b4](https://github.com/python-zk/kazoo/commit/267e61b4323bc13505e8933fa9b89d0591af3a69), closes [#171](https://github.com/python-zk/kazoo/issues/171))\n* **recipe:**  Add TreeCache recipe ([ec8b337e](https://github.com/python-zk/kazoo/commit/ec8b337e6f1a4ff12e669f4b96ca98fb37ee5d8a))\n\n\n\n<a name=\"2.3.1\"></a>\n## 2.3.1 (2017-06-01)\n\n\n#### Chore\n\n*   update MANIFEST.in to reflect changes to filenames ([c9a38c5d](https://github.com/python-zk/kazoo/commit/c9a38c5d650d6d92ff30fd3c1c792fc71db9ce02))\n*   add travis deployment and update ZK versions ([7d5d59cb](https://github.com/python-zk/kazoo/commit/7d5d59cb049244b89625d621c9d91d9a44c4b051), closes [#436](https://github.com/python-zk/kazoo/issues/436))\n\n2.3.0 (2017-05-31)\n------------------\n\nPlease note, there have been a few dozen merges that failed to update the\nchangelog here. As such, the log here should not be considered conclusive as\nto the changes that are arriving in 2.3.0.\n\nChanges being made now to ensure more accuracy in the changelog will appear\nin all future versions going forward. Read the commit history for a better\nunderstanding of changes merged between 2.2.1 and 2.3.0.\n\nAll future commits must abide by the new CONTRIBUTING.md document describing\nhow to label commits so they can be automatically used to automatically\ngenerate an accurate changelog.\n\n*WARNING:* THIS IS THE LAST KAZOO RELEASE THAT SUPPORTS PYTHON 2.6. ALL FUTURE\nVERSIONS WILL REQUIRE PYTHON 2.7 AND ABOVE.\n\n### Features\n\n-   allow having observers and different sized clusters\n\n### Bug Handling\n\n-   \\#372: fully resolve multiple records for hosts in the zookeeper\n    connection string\n\n### Documentation\n\n-   Fix the recipe examples, so they actually work by connecting to\n    ZooKeeper. Without start() they just hang and can't be killed.\n\n2.2.1 (2015-06-17)\n------------------\n\n### Bug Handling\n\n-   handle NameError with basestring on py3k.\n\n### Documentation\n\n2.2 (2015-06-15)\n----------------\n\n### Documentation\n\n### Features\n\n-   Issue \\#234: Add support for reconfig cluster membership operation\n\n### Bug Handling\n\n-   \\#315: multiple acquires of a kazoo lock using the lock recipe would\n    block when using acquire even when non-blocking is specified (only\n    when the lock was/has been already acquired).\n-   \\#318: At exit register takes `*args` and `**kwargs` not args and\n    kargs\n\n### Documentation\n\n2.1 (2015-05-11)\n----------------\n\n### Features\n\n-   Start running tests against Zookeeper 3.5.0 alpha and explicitly\n    configure the admin.serverPort in tests to avoid port conflicts. The\n    Zookeeper alpha version is not yet officially supported.\n-   Integrate eventlet *handler* support into kazoo so that along with\n    [gevent, threading] handlers there can now be a dedicated eventlet\n    handler for projects that need to (or want to) use eventlet (such as\n    those working in the openstack community). The\n    `requirements_eventlet.txt` file lists the optional eventlet\n    requirement(s) that needs to be satisfied when this new handler is\n    used.\n-   Use `six` to nicely handle the cross compatibility of kazoo with\n    python 2.x and 3.x (reducing/removing the need to have custom\n    compatibility code that replicates what six already provides).\n-   Add `state_change_event` to\n    `kazoo_sasl.recipe.partitioner.SetPartitioner` which is set on every\n    state change.\n-   Add a NonBlockingLease recipe. The recipe allows e.g. cron jobs\n    scheduled on multiple machines to ensure that at most N instances\n    will run a particular job, with lease timeout for graceful handover\n    in case of node failures.\n\n### Bug Handling\n\n-   \\#291: Kazoo lock recipe was only partially re-entrant in that\n    multiple calls to acquire would obtain the the lock but the first\n    call to release would remove the underlying lock. This would leave\n    the X - 1 other acquire statements unprotected (and no longer\n    holding there expected lock). To fix this the comment about that\n    lock recipe being re-entrant has been removed and multiple acquires\n    will now block when attempted.\n-   \\#78: Kazoo now uses socketpairs instead of pipes making it\n    compatible with Windows.\n-   \\#144, \\#221: Let client.command work with IPv6 addresses.\n-   \\#216: Fixed timeout for ConnectionHandler.\\_invoke.\n-   \\#261: Creating a sequential znode under / doesn't work.\n-   \\#274: Add server\\_version() retries (by default 4 attempts will be\n    made) to better handle flakey responses.\n-   \\#271: Fixed handling of KazooState.SUSPENDED in SetPartitioner.\n-   \\#283: Fixed a race condition in SetPartitioner when party changes\n    during handling of lock acquisition.\n-   \\#303: don't crash on random input as the hosts string.\n\n### Documentation\n\n-   \\#222: Document that committed on the transaction is used to ensure\n    only one commit and is not an indicator of whether operations in the\n    transaction returned desired results.\n\n2.0 (2014-06-19)\n----------------\n\n### Documentation\n\n-   Extend support to Python 3.4, deprecating Python 3.2.\n-   Issue \\#198: Mention Zake as a sophisticated kazoo mock testing\n    library.\n-   Issue \\#181: Add documentation on basic logging setup.\n\n2.0b1 (2014-04-24)\n------------------\n\n### API Changes\n\n-   Null or None data is no longer treated as \"\". Pull req \\#165, patch\n    by Raul Gutierrez S. This will affect how you should treat null data\n    in a znode vs. an empty string.\n-   Passing acl=[] to create() now works properly instead of an\n    InvalidACLError as it returned before. Patch by Raul Gutierrez S in\n    PR \\#164.\n-   Removed the dependency on zope.interface. The classes in the\n    interfaces module are left for documentation purposes only (issue\n    \\#131).\n\n### Features\n\n-   Logging levels have been reduced.\n    -   Logging previously at the `logging.DEBUG` level is now logged at\n        the `kazoo_sasl.loggingsupport.BLATHER` level (5).\n    -   Some low-level logging previously at the `logging.INFO` level is\n        now logged at the `logging.DEBUG` level.\n-   Issue \\#133: Introduce a new environment variable\n    ZOOKEEPER\\_PORT\\_OFFSET for the testing support, to run the testing\n    cluster on a different range.\n\n### Bug Handling\n\n-   When authenticating via add\\_auth() the auth data will be saved to\n    ensure that the authentication happens on reconnect (as is the case\n    when feeding auth data via KazooClient's constructor). PR \\#172,\n    patch by Raul Gutierrez S.\n-   Change gevent import to remove deprecation warning when newer gevent\n    is used. PR \\#191, patch by Hiroaki Kawai.\n-   Lock recipe was failing to use the client's sleep\\_func causing\n    issues with gevent. Issue \\#150.\n-   Calling a DataWatch or ChildrenWatch instance twice (decorator) now\n    throws an exception as only a single function can be associated with\n    a single watcher. Issue \\#154.\n-   Another fix for atexit handling so that when disposing of\n    connections the atexit handler is removed. PR \\#190, patch by Devaev\n    Maxim.\n-   Fix atexit handling for kazoo threading handler, PR \\#183. Patch by\n    Brian Wickman.\n-   Partitioner should handle a suspended connection properly and\n    restore an allocated state if it was allocated previously. Patch by\n    Manish Tomar.\n-   Issue \\#167: Closing a client that was never started throws a type\n    error. Patch by Joshua Harlow.\n-   Passing dictionaries to KazooClient.\\_\\_init\\_\\_() wasn't actually\n    working properly. Patch by Ryan Uber.\n-   Issue \\#119: Handler timeout takes the max of the random interval or\n    the read timeout to ensure a negative number isn't used for the read\n    timeout.\n-   Fix ordering of exception catches in lock.acquire as it was\n    capturing a parent exception before the child. Patch by ReneSac.\n-   Fix issue with client.stop() not always setting the client state to\n    KeeperState.CLOSED. Patch by Jyrki Pulliainen in PR \\#174.\n-   Issue \\#169: Fixed pipes leaking into child processes.\n\n### Documentation\n\n-   Add section on contributing recipes, add maintainer/status\n    information for existing recipes.\n-   Add note about alternate use of DataWatch.\n\n1.3.1 (2013-09-25)\n------------------\n\n### Bug Handling\n\n-   \\#118, \\#125, \\#128: Fix unknown variable in KazooClient\n    command\\_retry argument handling.\n-   \\#126: Fix KazooRetry.copy to correctly copy sleep function.\n-   \\#118: Correct session/socket timeout conversion (int vs. float).\n\n### Documentation\n\n-   \\#121: Add a note about kazoo_sasl.recipe.queue.LockingQueue requiring a\n    Zookeeper 3.4+ server.\n\n1.3 (2013-09-05)\n----------------\n\n### Features\n\n-   \\#115: Limit the backends we use for SLF4J during tests.\n-   \\#112: Add IPv6 support. Patch by Dan Kruchinin.\n\n1.2.1 (2013-08-01)\n------------------\n\n### Bug Handling\n\n-   Issue \\#108: Circular import fail when importing\n    kazoo_sasl.recipe.watchers directly has now been resolved. Watchers and\n    partitioner properly import the KazooState from\n    kazoo_sasl.protocol.states rather than kazoo_sasl.client.\n-   Issue \\#109: Partials not usable properly as a datawatch call can\n    now be used. All funcs will be called with 3 args and fall back to 2\n    args if there's an argument error.\n-   Issue \\#106, \\#107: client.create\\_async didn't strip change root\n    from the returned path.\n\n1.2 (2013-07-24)\n----------------\n\n### Features\n\n-   KazooClient can now be stopped more reliably even if its in the\n    middle of a long retry sleep. This utilizes the new interrupt\n    feature of KazooRetry which lets the sleep be broken down into\n    chunks and an interrupt function called to determine if the retry\n    should fail early.\n-   Issue \\#62, \\#92, \\#89, \\#101, \\#102: Allow KazooRetry to have a max\n    deadline, transition properly when connection fails to LOST, and\n    setup separate connection retry behavior from client command retry\n    behavior. Patches by Mike Lundy.\n-   Issue \\#100: Make it easier to see exception context in threading\n    and connection modules.\n-   Issue \\#85: Increase information density of logs and don't prevent\n    dynamic reconfiguration of log levels at runtime.\n-   Data-watchers for the same node are no longer 'stacked'. That is, if\n    a get and an exists call occur for the same node with the same watch\n    function, then it will be registered only once. This change results\n    in Kazoo behaving per Zookeeper client spec regarding repeat watch\n    use.\n\n### Bug Handling\n\n-   Issue \\#53: Throw a warning upon starting if the chroot path doesn't\n    exist so that it's more obvious when the chroot should be created\n    before performing more operations.\n-   Kazoo previously would let the same function be registered as a\n    data-watch or child-watch multiple times, and then call it multiple\n    times upon being triggered. This was non-compliant Zookeeper client\n    behavior, the same watch can now only be registered once for the\n    same znode path per Zookeeper client documentation.\n-   Issue \\#105: Avoid rare import lock problems by moving module\n    imports in client.py to the module scope.\n-   Issue \\#103: Allow prefix-less sequential znodes.\n-   Issue \\#98: Extend testing ZK harness to work with different file\n    locations on some versions of Debian/Ubuntu.\n-   Issue \\#97: Update some docstrings to reflect current state of\n    handlers.\n-   Issue \\#62, \\#92, \\#89, \\#101, \\#102: Allow KazooRetry to have a max\n    deadline, transition properly when connection fails to LOST, and\n    setup separate connection retry behavior from client command retry\n    behavior. Patches by Mike Lundy.\n\n### API Changes\n\n-   The kazoo_sasl.testing.harness.KazooTestHarness class directly inherits\n    from unittest.TestCase and you need to ensure to call its\n    \\_\\_init\\_\\_ method.\n-   DataWatch no longer takes any parameters besides for the optional\n    function during instantiation. The additional options are now\n    implicitly True, with the user being left to ignore events as they\n    choose. See the DataWatch API docs for more information.\n-   Issue \\#99: Better exception raised when the writer fails to close.\n    A WriterNotClosedException that inherits from KazooException is now\n    raised when the writer fails to close in time.\n\n1.1 (2013-06-08)\n----------------\n\n### Features\n\n-   Issue \\#93: Add timeout option to lock/semaphore acquire methods.\n-   Issue \\#79 / \\#90: Add ability to pass the WatchedEvent to DataWatch\n    and ChildWatch functions.\n-   Respect large client timeout values when closing the connection.\n-   Add a max\\_leases consistency check to the semaphore recipe.\n-   Issue \\#76: Extend testing helpers to allow customization of the\n    Java classpath by specifying the new ZOOKEEPER\\_CLASSPATH\n    environment variable.\n-   Issue \\#65: Allow non-blocking semaphore acquisition.\n\n### Bug Handling\n\n-   Issue \\#96: Provide Windows compatibility in testing harness.\n-   Issue \\#95: Handle errors deserializing connection response.\n-   Issue \\#94: Clean up stray bytes in connection pipe.\n-   Issue \\#87 / \\#88: Allow re-acquiring lock after cancel.\n-   Issue \\#77: Use timeout in initial socket connection.\n-   Issue \\#69: Only ensure path once in lock and semaphore recipes.\n-   Issue \\#68: Closing the connection causes exceptions to be raised by\n    watchers which assume the connection won't be closed when running\n    commands.\n-   Issue \\#66: Require ping reply before sending another ping,\n    otherwise the connection will be considered dead and a\n    ConnectionDropped will be raised to trigger a reconnect.\n-   Issue \\#63: Watchers weren't reset on lost connection.\n-   Issue \\#58: DataWatcher failed to re-register for changes after\n    non-existent node was created then deleted.\n\n### API Changes\n\n-   KazooClient.create\\_async now supports the makepath argument.\n-   KazooClient.ensure\\_path now has an async version,\n    ensure\\_path\\_async.\n\n1.0 (2013-03-26)\n----------------\n\n### Features\n\n-   Added a LockingQueue recipe. The queue first locks an item and\n    removes it from the queue only after the consume() method is called.\n    This enables other nodes to retake the item if an error occurs on\n    the first node.\n\n### Bug Handling\n\n-   Issue \\#50: Avoid problems with sleep function in mixed\n    gevent/threading setup.\n-   Issue \\#56: Avoid issues with watch callbacks evaluating to false.\n\n1.0b1 (2013-02-24)\n------------------\n\n### Features\n\n-   Refactored the internal connection handler to use a single thread.\n    It now uses a deque and pipe to signal the ZK thread that there's a\n    new command to send, so that the ZK thread can send it, or retrieve\n    a response. Processing ZK requests and responses serially in a\n    single thread eliminates the need for a bunch of the locking, the\n    peekable queue and two threads working on the same underlying\n    socket.\n-   Issue \\#48: Added documentation for the retry helper module.\n-   Issue \\#55: Fix os.pipe file descriptor leak and introduce a\n    KazooClient.close method. The method is particular useful in tests,\n    where multiple KazooClients are created and closed in the same\n    process.\n\n### Bug Handling\n\n-   Issue \\#46: Avoid TypeError in GeneratorContextManager on process\n    shutdown.\n-   Issue \\#43: Let DataWatch return node data if allow\\_missing\\_node\n    is used.\n\n0.9 (2013-01-07)\n----------------\n\n### API Changes\n\n-   When a retry operation ultimately fails, it now raises a\n    kazoo_sasl.retry.RetryFailedError exception, instead of a general\n    Exception instance. RetryFailedError also inherits from the base\n    KazooException.\n\n### Features\n\n-   Improvements to Debian packaging rules.\n\n### Bug Handling\n\n-   Issue \\#39 / \\#41: Handle connection dropped errors during session\n    writes. Ensure client connection is re-established to a new ZK node\n    if available.\n-   Issue \\#38: Set CLOEXEC flag on all sockets when available.\n-   Issue \\#37 / \\#40: Handle timeout errors during select calls on\n    sockets.\n-   Issue \\#36: Correctly set ConnectionHandler.writer\\_stopped even if\n    an exception is raised inside the writer, like a retry operation\n    failing.\n\n0.8 (2012-10-26)\n----------------\n\n### API Changes\n\n-   The KazooClient.\\_\\_init\\_\\_ took as watcher argument as its second\n    keyword argument. The argument had no effect anymore since version\n    0.5 and was removed.\n\n### Bug Handling\n\n-   Issue \\#35: KazooClient.\\_\\_init\\_\\_ didn't pass on\n    retry\\_max\\_delay to the retry helper.\n-   Issue \\#34: Be more careful while handling socket connection errors.\n\n0.7 (2012-10-15)\n----------------\n\n### Features\n\n-   DataWatch now has a allow\\_missing\\_node setting that allows a watch\n    to be set on a node that doesn't exist when the DataWatch is\n    created.\n-   Add new Queue recipe, with optional priority support.\n-   Add new Counter recipe.\n-   Added debian packaging rules.\n\n### Bug Handling\n\n-   Issue \\#31 fixed: Only catch KazooExceptions in catch-all calls.\n-   Issue \\#15 fixed again: Force sleep delay to be a float to appease\n    gevent.\n-   Issue \\#29 fixed: DataWatch and ChildrenWatch properly re-register\n    their watches on server disconnect.\n\n0.6 (2012-09-27)\n----------------\n\n### API Changes\n\n-   Node paths are assumed to be Unicode objects. Under Python 2\n    pure-ascii strings will also be accepted. Node values are considered\n    bytes. The byte type is an alias for str under Python 2.\n-   New KeeperState.CONNECTED\\_RO state for Zookeeper servers connected\n    in read-only mode.\n-   New NotReadOnlyCallError exception when issuing a write change\n    against a server thats currently read-only.\n\n### Features\n\n-   Add support for Python 3.2, 3.3 and PyPy (only for the threading\n    handler).\n-   Handles connecting to Zookeeper 3.4+ read-only servers.\n-   Automatic background scanning for a Read/Write server when connected\n    to a server in read-only mode.\n-   Add new Semaphore recipe.\n-   Add a new retry\\_max\\_delay argument to the client and by default\n    limit the retry delay to at most an hour regardless of exponential\n    backoff settings.\n-   Add new randomize\\_hosts argument to KazooClient, allowing one to\n    disable host randomization.\n\n### Bug Handling\n\n-   Fix bug with locks not handling intermediary lock contenders\n    disappearing.\n-   Fix bug with set\\_data type check failing to catch unicode values.\n-   Fix bug with gevent 0.13.x backport of peekable queue.\n-   Fix PatientChildrenWatch to use handler specific sleep function.\n\n0.5 (2012-09-06)\n----------------\n\nSkipping a version to reflect the magnitude of the change. Kazoo is now\na pure Python client with no C bindings. This release should run without\na problem on alternate Python implementations such as PyPy and Jython.\nPorting to Python 3 in the future should also be much easier.\n\n### Documentation\n\n-   Docs have been restructured to handle the new classes and locations\n    of the methods from the pure Python refactor.\n\n### Bug Handling\n\nThis change may introduce new bugs, however there is no longer the\npossibility of a complete Python segfault due to errors in the C library\nand/or the C binding.\n\n-   Possible segfaults from the C lib are gone.\n-   Password mangling due to the C lib is gone.\n-   The party recipes didn't set their participating flag to False after\n    leaving.\n\n### Features\n\n-   New client.command and client.server\\_version API, exposing\n    Zookeeper's four letter commands and giving access to structured\n    version information.\n-   Added 'include\\_data' option for get\\_children to include the node's\n    Stat object.\n-   Substantial increase in logging data with debug mode. All\n    correspondence with the Zookeeper server can now be seen to help in\n    debugging.\n\n### API Changes\n\n-   The testing helpers have been moved from testing.\\_\\_init\\_\\_ into a\n    testing.harness module. The official API's of KazooTestCase and\n    KazooTestHarness can still be directly imported from testing.\n-   The kazoo_sasl.handlers.util module was removed.\n-   Backwards compatible exception class aliases are provided for now in\n    kazoo exceptions for the prior C exception names.\n-   Unicode strings now work fine for node names and are properly\n    converted to and from unicode objects.\n-   The data value argument for the create and create\\_async methods of\n    the client was made optional and defaults to an empty byte string.\n    The data value must be a byte string. Unicode values are no longer\n    allowed and will raise a TypeError.\n\n0.3 (2012-08-23)\n----------------\n\n### API Changes\n\n-   Handler interface now has an rlock\\_object for use by recipes.\n\n### Bug Handling\n\n-   Fixed password bug with updated zc-zookeeper-static release, which\n    retains null bytes in the password properly.\n-   Fixed reconnect hammering, so that the reconnection follows retry\n    jitter and retry backoff's.\n-   Fixed possible bug with using a threading.Condition in the set\n    partitioner. Set partitioner uses new rlock\\_object handler API to\n    get an appropriate RLock for gevent.\n-   Issue \\#17 fixed: Wrap timeout exceptions with staticmethod so they\n    can be used directly as intended. Patch by Bob Van Zant.\n-   Fixed bug with client reconnection looping indefinitely using an\n    expired session id.\n\n0.2 (2012-08-12)\n----------------\n\n### Documentation\n\n-   Fixed doc references to start\\_async using an AsyncResult object, it\n    uses an Event object.\n\n### Bug Handling\n\n-   Issue \\#16 fixed: gevent zookeeper logging failed to handle a monkey\n    patched logging setup. Logging is now setup such that a greenlet is\n    used for logging messages under gevent, and the thread one is used\n    otherwise.\n-   Fixed bug similar to \\#14 for ChildrenWatch on the session listener.\n-   Issue \\#14 fixed: DataWatch had inconsistent handling of the node it\n    was watching not existing. DataWatch also properly spawns its\n    \\_get\\_data function to avoid blocking session events.\n-   Issue \\#15 fixed: sleep\\_func for SequentialGeventHandler was not\n    set on the class appropriately leading to additional arguments being\n    passed to gevent.sleep.\n-   Issue \\#9 fixed: Threads/greenlets didn't gracefully shut down.\n    Handler now has a start/stop that is used by the client when calling\n    start and stop that shuts down the handler workers. This addresses\n    errors and warnings that could be emitted upon process shutdown\n    regarding a clean exit of the workers.\n-   Issue \\#12 fixed: gevent 0.13 doesn't use the same\n    start\\_new\\_thread as gevent 1.0 which resulted in a fully\n    monkey-patched environment halting due to the wrong thread. Updated\n    to use the older kazoo method of getting the real thread module\n    object.\n\n### API Changes\n\n-   The KazooClient handler is now officially exposed as\n    KazooClient.handler so that the appropriate sync objects can be used\n    by end-users.\n-   Refactored ChildrenWatcher used by SetPartitioner into a publicly\n    exposed PatientChildrenWatch under recipe.watchers.\n\n### Deprecations\n\n-   connect/connect\\_async has been renamed to start/start\\_async to\n    better match the stop to indicate connection handling. The prior\n    names are aliased for the time being.\n\n### Recipes\n\n-   Added Barrier and DoubleBarrier implementation.\n\n0.2b1 (2012-07-27)\n------------------\n\n### Bug Handling\n\n-   ZOOKEEPER-1318: SystemError is caught and rethrown as the proper\n    invalid state exception in older zookeeper python bindings where\n    this issue is still valid.\n-   ZOOKEEPER-1431: Install the latest zc-zookeeper-static library or\n    use the packaged ubuntu one for ubuntu 12.04 or later.\n-   ZOOKEEPER-553: State handling isn't checked via this method, we\n    track it in a simpler manner with the watcher to ensure we know the\n    right state.\n\n### Features\n\n-   Exponential backoff with jitter for retrying commands.\n-   Gevent 0.13 and 1.0b support.\n-   Lock, Party, SetPartitioner, and Election recipe implementations.\n-   Data and Children watching API's.\n-   State transition handling with listener registering to handle\n    session state changes (choose to fatal the app on session\n    expiration, etc.)\n-   Zookeeper logging stream redirected into Python logging channel\n    under the name 'Zookeeper'.\n-   Base client library with handler support for threading and gevent\n    async environments.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://kazoo.readthedocs.io", "keywords": "zookeeper lock leader configuration", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "kazoo-sasl", "package_url": "https://pypi.org/project/kazoo-sasl/", "platform": "", "project_url": "https://pypi.org/project/kazoo-sasl/", "project_urls": {"Homepage": "https://kazoo.readthedocs.io"}, "release_url": "https://pypi.org/project/kazoo-sasl/2.6.1/", "requires_dist": ["six", "six; extra == 'test'", "coverage; extra == 'test'", "mock; extra == 'test'", "nose; extra == 'test'", "flake8; extra == 'test'", "pure-sasl; extra == 'test'"], "requires_python": "", "summary": "Higher Level Zookeeper Client", "version": "2.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Kazoo-sasl<br>=====<br><br>![Travis Build](https://travis-ci.org/StephenSorriaux/kazoo-sasl.svg?branch=master)<br><br>![Latest Version](https://img.shields.io/pypi/v/kazoo-sasl.svg)<br><br>![Downloads](https://img.shields.io/pypi/dm/kazoo-sasl.svg)<br><br>`kazoo-sasl` is a fork of `kazoo` that implements a higher level API to [Apache<br>Zookeeper](http://zookeeper.apache.org/)  with SASL for Python clients.<br><br>See [the full docs](http://kazoo.rtfd.org/) for more information.<br><br>License<br>-------<br><br>`kazoo-sasl` is offered under the Apache License 2.0.<br><br>Authors<br>-------<br><br>`kazoo` started under the [Nimbus<br>Project](http://www.nimbusproject.org/) and through collaboration with<br>the open-source community has been merged with code from<br>[Mozilla](http://www.mozilla.org/) and the [Zope<br>Corporation](http://zope.com/). It has since gathered an active<br>community of over fifty contributors.<br><br><br>&lt;a name=\"2.6.0\"&gt;&lt;/a&gt;<br>## 2.6.0 (2018-07-24)<br><br>#### Features<br><br>* **recipe:**  added SASL digest MD5 support ([533adbba](https://github.com/python-zk/kazoo/commit/533adbbafdfb41c1bf01fdf3c188c063847b542b))<br><br>&lt;a name=\"2.5.0\"&gt;&lt;/a&gt;<br>## 2.5.0 (2018-06-01)<br><br><br>#### Performance<br><br>* **recipe:**  Give TreeCache standalone queue ([4456f180](https://github.com/python-zk/kazoo/commit/4456f180735a0f8520bfc42474de9d27fa01bb2c))<br><br>#### Doc<br><br>*   Correctly document supported versions ([f860de52](https://github.com/python-zk/kazoo/commit/f860de5284e8ba7d0ed4171d9e5c5bef41f6b64d))<br>*   Add license to Wheel ([43d156de](https://github.com/python-zk/kazoo/commit/43d156de3d41173d7baf6e8edb4efa377b3732fc))<br>*   minor tweaks to contributing.md (#464) ([5837d11b](https://github.com/python-zk/kazoo/commit/5837d11bb541be1296e1b3c1842b11ceb7e743d4))<br><br>#### Features<br><br>* **recipe:**  allow non ephemeral locking ([6f7a603d](https://github.com/python-zk/kazoo/commit/6f7a603de9f04ec46d9946c6f5b1cb6e2b913b63))<br><br>#### Chore<br><br>*   drop python 2.6 compatible gevent ([2e8dcd38](https://github.com/python-zk/kazoo/commit/2e8dcd3836d01640f07e8de911cdfb3639f97d20))<br>*   remove debian packaging (#468) ([a28423aa](https://github.com/python-zk/kazoo/commit/a28423aac7f33111388372dec50653a3091b9045))<br>*   stop bundling virtualenv ([af9b4cab](https://github.com/python-zk/kazoo/commit/af9b4cab39982d961647afca8119816ffe7bf5e6))<br>*   remove python 3.3 from tox ([cf66474b](https://github.com/python-zk/kazoo/commit/cf66474b27b4efc9f65e292434c2fcffb697d34d))<br>*   remove `easy_install` instructions ([6e6627d5](https://github.com/python-zk/kazoo/commit/6e6627d58628dec11d127fc5508f9a1d16e9c317))<br><br>#### Bug Fixes<br><br>*   Pass watch as keyword arg instead of positional arg (#495) ([23850792](https://github.com/python-zk/kazoo/commit/2385079267db0bea6793c4f20588644381803a98))<br>*   need gevent &gt;= 1.2, not &gt; 1.1 ([18f3531b](https://github.com/python-zk/kazoo/commit/18f3531b605119a547cfc4d5a4223b4b3f185405))<br>*   Remove use of \"async\" as a variable ([225d3369](https://github.com/python-zk/kazoo/commit/225d3369c7a0736125a9375951a079f70fbe9e79), closes [#455](https://github.com/python-zk/kazoo/issues/455))<br>* **core:**<br>  *  Fix gevent 1.3b1+ timeout import ([257b5896](https://github.com/python-zk/kazoo/commit/257b58961f7ddd9db04d6efa070739a1b0404487))<br>  *  Correctly fire multiple callbacks ([0905c47b](https://github.com/python-zk/kazoo/commit/0905c47bff3cfc42382daff0d5ac81189c8ba46d))<br>  *  resolve race in IAsyncResult.wait() (#487) ([4d268adf](https://github.com/python-zk/kazoo/commit/4d268adf9837836f05dde5ec81be0d7bbd759e78))<br>* **recipe:**<br>  *  conn hangs when TreeCache refreshing ([11194137](https://github.com/python-zk/kazoo/commit/111941371daec00a2ecb5d8c29b9b1d35d6aa4ff))<br>  *  Unexpected exceptions break TreeCache ([db0c2d4f](https://github.com/python-zk/kazoo/commit/db0c2d4f8ab5ecfb367b7b2accfd9c52c1c91fcd))<br><br>#### Refactor<br><br>*   Unify queue factory in various handlers ([cbd02f5c](https://github.com/python-zk/kazoo/commit/cbd02f5ccc6ea9e6dd6b5da01a0397ea649143a0))<br><br><br><br>&lt;a name=\"2.4.0\"&gt;&lt;/a&gt;<br>## 2.4.0 (2017-06-14)<br><br>**PYTHON SUPPORTED VERSIONS CHANGE**: Please note that Kazoo no longer tests<br>on Python 2.6 or 3.3. Tested versions are 2.7, 3.4, 3.5, 3.6, and PyPy. The<br>multiple endpoint support for KazooClient may not work correctly on 2.6.<br><br>#### Bug Fixes<br><br>*   add missed parens to LockingQueue function call. ([88cf4aa7](https://github.com/python-zk/kazoo/commit/88cf4aa7bcd1437a44f6d3aeec34989c467fcf9d))<br>* **core:**  revert PR #305 SetWatches which caused RuntimeError ([a7b45390](https://github.com/python-zk/kazoo/commit/a7b45390f3720a33c9ad3896a8a185bfb2628839))<br><br>#### Features<br><br>*   pep8 all the things ([92880342](https://github.com/python-zk/kazoo/commit/928803420721b81962e50d425610e62b0c12e438), closes [#445](https://github.com/python-zk/kazoo/issues/445))<br>*   drop Python 2.6/3.3 official support, add 3.5/3.6 testing ([2faba9ff](https://github.com/python-zk/kazoo/commit/2faba9ff3bdeff151ac6c922bf65b2dcf9c7bd7b), closes [#441](https://github.com/python-zk/kazoo/issues/441))<br>* **core:**<br>  *  allow multiple endpoints in KazooClient hosts arg ([72a8d96c](https://github.com/python-zk/kazoo/commit/72a8d96ca188c3c2e93bd0243283539ebd6c16f1), closes [#411](https://github.com/python-zk/kazoo/issues/411))<br>  *  use epoll when available to support fds &gt; 1023 ([267e61b4](https://github.com/python-zk/kazoo/commit/267e61b4323bc13505e8933fa9b89d0591af3a69), closes [#171](https://github.com/python-zk/kazoo/issues/171))<br>* **recipe:**  Add TreeCache recipe ([ec8b337e](https://github.com/python-zk/kazoo/commit/ec8b337e6f1a4ff12e669f4b96ca98fb37ee5d8a))<br><br><br><br>&lt;a name=\"2.3.1\"&gt;&lt;/a&gt;<br>## 2.3.1 (2017-06-01)<br><br><br>#### Chore<br><br>*   update MANIFEST.in to reflect changes to filenames ([c9a38c5d](https://github.com/python-zk/kazoo/commit/c9a38c5d650d6d92ff30fd3c1c792fc71db9ce02))<br>*   add travis deployment and update ZK versions ([7d5d59cb](https://github.com/python-zk/kazoo/commit/7d5d59cb049244b89625d621c9d91d9a44c4b051), closes [#436](https://github.com/python-zk/kazoo/issues/436))<br><br>2.3.0 (2017-05-31)<br>------------------<br><br>Please note, there have been a few dozen merges that failed to update the<br>changelog here. As such, the log here should not be considered conclusive as<br>to the changes that are arriving in 2.3.0.<br><br>Changes being made now to ensure more accuracy in the changelog will appear<br>in all future versions going forward. Read the commit history for a better<br>understanding of changes merged between 2.2.1 and 2.3.0.<br><br>All future commits must abide by the new CONTRIBUTING.md document describing<br>how to label commits so they can be automatically used to automatically<br>generate an accurate changelog.<br><br>*WARNING:* THIS IS THE LAST KAZOO RELEASE THAT SUPPORTS PYTHON 2.6. ALL FUTURE<br>VERSIONS WILL REQUIRE PYTHON 2.7 AND ABOVE.<br><br>### Features<br><br>-   allow having observers and different sized clusters<br><br>### Bug Handling<br><br>-   \\#372: fully resolve multiple records for hosts in the zookeeper<br>    connection string<br><br>### Documentation<br><br>-   Fix the recipe examples, so they actually work by connecting to<br>    ZooKeeper. Without start() they just hang and can't be killed.<br><br>2.2.1 (2015-06-17)<br>------------------<br><br>### Bug Handling<br><br>-   handle NameError with basestring on py3k.<br><br>### Documentation<br><br>2.2 (2015-06-15)<br>----------------<br><br>### Documentation<br><br>### Features<br><br>-   Issue \\#234: Add support for reconfig cluster membership operation<br><br>### Bug Handling<br><br>-   \\#315: multiple acquires of a kazoo lock using the lock recipe would<br>    block when using acquire even when non-blocking is specified (only<br>    when the lock was/has been already acquired).<br>-   \\#318: At exit register takes `*args` and `**kwargs` not args and<br>    kargs<br><br>### Documentation<br><br>2.1 (2015-05-11)<br>----------------<br><br>### Features<br><br>-   Start running tests against Zookeeper 3.5.0 alpha and explicitly<br>    configure the admin.serverPort in tests to avoid port conflicts. The<br>    Zookeeper alpha version is not yet officially supported.<br>-   Integrate eventlet *handler* support into kazoo so that along with<br>    [gevent, threading] handlers there can now be a dedicated eventlet<br>    handler for projects that need to (or want to) use eventlet (such as<br>    those working in the openstack community). The<br>    `requirements_eventlet.txt` file lists the optional eventlet<br>    requirement(s) that needs to be satisfied when this new handler is<br>    used.<br>-   Use `six` to nicely handle the cross compatibility of kazoo with<br>    python 2.x and 3.x (reducing/removing the need to have custom<br>    compatibility code that replicates what six already provides).<br>-   Add `state_change_event` to<br>    `kazoo_sasl.recipe.partitioner.SetPartitioner` which is set on every<br>    state change.<br>-   Add a NonBlockingLease recipe. The recipe allows e.g. cron jobs<br>    scheduled on multiple machines to ensure that at most N instances<br>    will run a particular job, with lease timeout for graceful handover<br>    in case of node failures.<br><br>### Bug Handling<br><br>-   \\#291: Kazoo lock recipe was only partially re-entrant in that<br>    multiple calls to acquire would obtain the the lock but the first<br>    call to release would remove the underlying lock. This would leave<br>    the X - 1 other acquire statements unprotected (and no longer<br>    holding there expected lock). To fix this the comment about that<br>    lock recipe being re-entrant has been removed and multiple acquires<br>    will now block when attempted.<br>-   \\#78: Kazoo now uses socketpairs instead of pipes making it<br>    compatible with Windows.<br>-   \\#144, \\#221: Let client.command work with IPv6 addresses.<br>-   \\#216: Fixed timeout for ConnectionHandler.\\_invoke.<br>-   \\#261: Creating a sequential znode under / doesn't work.<br>-   \\#274: Add server\\_version() retries (by default 4 attempts will be<br>    made) to better handle flakey responses.<br>-   \\#271: Fixed handling of KazooState.SUSPENDED in SetPartitioner.<br>-   \\#283: Fixed a race condition in SetPartitioner when party changes<br>    during handling of lock acquisition.<br>-   \\#303: don't crash on random input as the hosts string.<br><br>### Documentation<br><br>-   \\#222: Document that committed on the transaction is used to ensure<br>    only one commit and is not an indicator of whether operations in the<br>    transaction returned desired results.<br><br>2.0 (2014-06-19)<br>----------------<br><br>### Documentation<br><br>-   Extend support to Python 3.4, deprecating Python 3.2.<br>-   Issue \\#198: Mention Zake as a sophisticated kazoo mock testing<br>    library.<br>-   Issue \\#181: Add documentation on basic logging setup.<br><br>2.0b1 (2014-04-24)<br>------------------<br><br>### API Changes<br><br>-   Null or None data is no longer treated as \"\". Pull req \\#165, patch<br>    by Raul Gutierrez S. This will affect how you should treat null data<br>    in a znode vs. an empty string.<br>-   Passing acl=[] to create() now works properly instead of an<br>    InvalidACLError as it returned before. Patch by Raul Gutierrez S in<br>    PR \\#164.<br>-   Removed the dependency on zope.interface. The classes in the<br>    interfaces module are left for documentation purposes only (issue<br>    \\#131).<br><br>### Features<br><br>-   Logging levels have been reduced.<br>    -   Logging previously at the `logging.DEBUG` level is now logged at<br>        the `kazoo_sasl.loggingsupport.BLATHER` level (5).<br>    -   Some low-level logging previously at the `logging.INFO` level is<br>        now logged at the `logging.DEBUG` level.<br>-   Issue \\#133: Introduce a new environment variable<br>    ZOOKEEPER\\_PORT\\_OFFSET for the testing support, to run the testing<br>    cluster on a different range.<br><br>### Bug Handling<br><br>-   When authenticating via add\\_auth() the auth data will be saved to<br>    ensure that the authentication happens on reconnect (as is the case<br>    when feeding auth data via KazooClient's constructor). PR \\#172,<br>    patch by Raul Gutierrez S.<br>-   Change gevent import to remove deprecation warning when newer gevent<br>    is used. PR \\#191, patch by Hiroaki Kawai.<br>-   Lock recipe was failing to use the client's sleep\\_func causing<br>    issues with gevent. Issue \\#150.<br>-   Calling a DataWatch or ChildrenWatch instance twice (decorator) now<br>    throws an exception as only a single function can be associated with<br>    a single watcher. Issue \\#154.<br>-   Another fix for atexit handling so that when disposing of<br>    connections the atexit handler is removed. PR \\#190, patch by Devaev<br>    Maxim.<br>-   Fix atexit handling for kazoo threading handler, PR \\#183. Patch by<br>    Brian Wickman.<br>-   Partitioner should handle a suspended connection properly and<br>    restore an allocated state if it was allocated previously. Patch by<br>    Manish Tomar.<br>-   Issue \\#167: Closing a client that was never started throws a type<br>    error. Patch by Joshua Harlow.<br>-   Passing dictionaries to KazooClient.\\_\\_init\\_\\_() wasn't actually<br>    working properly. Patch by Ryan Uber.<br>-   Issue \\#119: Handler timeout takes the max of the random interval or<br>    the read timeout to ensure a negative number isn't used for the read<br>    timeout.<br>-   Fix ordering of exception catches in lock.acquire as it was<br>    capturing a parent exception before the child. Patch by ReneSac.<br>-   Fix issue with client.stop() not always setting the client state to<br>    KeeperState.CLOSED. Patch by Jyrki Pulliainen in PR \\#174.<br>-   Issue \\#169: Fixed pipes leaking into child processes.<br><br>### Documentation<br><br>-   Add section on contributing recipes, add maintainer/status<br>    information for existing recipes.<br>-   Add note about alternate use of DataWatch.<br><br>1.3.1 (2013-09-25)<br>------------------<br><br>### Bug Handling<br><br>-   \\#118, \\#125, \\#128: Fix unknown variable in KazooClient<br>    command\\_retry argument handling.<br>-   \\#126: Fix KazooRetry.copy to correctly copy sleep function.<br>-   \\#118: Correct session/socket timeout conversion (int vs. float).<br><br>### Documentation<br><br>-   \\#121: Add a note about kazoo_sasl.recipe.queue.LockingQueue requiring a<br>    Zookeeper 3.4+ server.<br><br>1.3 (2013-09-05)<br>----------------<br><br>### Features<br><br>-   \\#115: Limit the backends we use for SLF4J during tests.<br>-   \\#112: Add IPv6 support. Patch by Dan Kruchinin.<br><br>1.2.1 (2013-08-01)<br>------------------<br><br>### Bug Handling<br><br>-   Issue \\#108: Circular import fail when importing<br>    kazoo_sasl.recipe.watchers directly has now been resolved. Watchers and<br>    partitioner properly import the KazooState from<br>    kazoo_sasl.protocol.states rather than kazoo_sasl.client.<br>-   Issue \\#109: Partials not usable properly as a datawatch call can<br>    now be used. All funcs will be called with 3 args and fall back to 2<br>    args if there's an argument error.<br>-   Issue \\#106, \\#107: client.create\\_async didn't strip change root<br>    from the returned path.<br><br>1.2 (2013-07-24)<br>----------------<br><br>### Features<br><br>-   KazooClient can now be stopped more reliably even if its in the<br>    middle of a long retry sleep. This utilizes the new interrupt<br>    feature of KazooRetry which lets the sleep be broken down into<br>    chunks and an interrupt function called to determine if the retry<br>    should fail early.<br>-   Issue \\#62, \\#92, \\#89, \\#101, \\#102: Allow KazooRetry to have a max<br>    deadline, transition properly when connection fails to LOST, and<br>    setup separate connection retry behavior from client command retry<br>    behavior. Patches by Mike Lundy.<br>-   Issue \\#100: Make it easier to see exception context in threading<br>    and connection modules.<br>-   Issue \\#85: Increase information density of logs and don't prevent<br>    dynamic reconfiguration of log levels at runtime.<br>-   Data-watchers for the same node are no longer 'stacked'. That is, if<br>    a get and an exists call occur for the same node with the same watch<br>    function, then it will be registered only once. This change results<br>    in Kazoo behaving per Zookeeper client spec regarding repeat watch<br>    use.<br><br>### Bug Handling<br><br>-   Issue \\#53: Throw a warning upon starting if the chroot path doesn't<br>    exist so that it's more obvious when the chroot should be created<br>    before performing more operations.<br>-   Kazoo previously would let the same function be registered as a<br>    data-watch or child-watch multiple times, and then call it multiple<br>    times upon being triggered. This was non-compliant Zookeeper client<br>    behavior, the same watch can now only be registered once for the<br>    same znode path per Zookeeper client documentation.<br>-   Issue \\#105: Avoid rare import lock problems by moving module<br>    imports in client.py to the module scope.<br>-   Issue \\#103: Allow prefix-less sequential znodes.<br>-   Issue \\#98: Extend testing ZK harness to work with different file<br>    locations on some versions of Debian/Ubuntu.<br>-   Issue \\#97: Update some docstrings to reflect current state of<br>    handlers.<br>-   Issue \\#62, \\#92, \\#89, \\#101, \\#102: Allow KazooRetry to have a max<br>    deadline, transition properly when connection fails to LOST, and<br>    setup separate connection retry behavior from client command retry<br>    behavior. Patches by Mike Lundy.<br><br>### API Changes<br><br>-   The kazoo_sasl.testing.harness.KazooTestHarness class directly inherits<br>    from unittest.TestCase and you need to ensure to call its<br>    \\_\\_init\\_\\_ method.<br>-   DataWatch no longer takes any parameters besides for the optional<br>    function during instantiation. The additional options are now<br>    implicitly True, with the user being left to ignore events as they<br>    choose. See the DataWatch API docs for more information.<br>-   Issue \\#99: Better exception raised when the writer fails to close.<br>    A WriterNotClosedException that inherits from KazooException is now<br>    raised when the writer fails to close in time.<br><br>1.1 (2013-06-08)<br>----------------<br><br>### Features<br><br>-   Issue \\#93: Add timeout option to lock/semaphore acquire methods.<br>-   Issue \\#79 / \\#90: Add ability to pass the WatchedEvent to DataWatch<br>    and ChildWatch functions.<br>-   Respect large client timeout values when closing the connection.<br>-   Add a max\\_leases consistency check to the semaphore recipe.<br>-   Issue \\#76: Extend testing helpers to allow customization of the<br>    Java classpath by specifying the new ZOOKEEPER\\_CLASSPATH<br>    environment variable.<br>-   Issue \\#65: Allow non-blocking semaphore acquisition.<br><br>### Bug Handling<br><br>-   Issue \\#96: Provide Windows compatibility in testing harness.<br>-   Issue \\#95: Handle errors deserializing connection response.<br>-   Issue \\#94: Clean up stray bytes in connection pipe.<br>-   Issue \\#87 / \\#88: Allow re-acquiring lock after cancel.<br>-   Issue \\#77: Use timeout in initial socket connection.<br>-   Issue \\#69: Only ensure path once in lock and semaphore recipes.<br>-   Issue \\#68: Closing the connection causes exceptions to be raised by<br>    watchers which assume the connection won't be closed when running<br>    commands.<br>-   Issue \\#66: Require ping reply before sending another ping,<br>    otherwise the connection will be considered dead and a<br>    ConnectionDropped will be raised to trigger a reconnect.<br>-   Issue \\#63: Watchers weren't reset on lost connection.<br>-   Issue \\#58: DataWatcher failed to re-register for changes after<br>    non-existent node was created then deleted.<br><br>### API Changes<br><br>-   KazooClient.create\\_async now supports the makepath argument.<br>-   KazooClient.ensure\\_path now has an async version,<br>    ensure\\_path\\_async.<br><br>1.0 (2013-03-26)<br>----------------<br><br>### Features<br><br>-   Added a LockingQueue recipe. The queue first locks an item and<br>    removes it from the queue only after the consume() method is called.<br>    This enables other nodes to retake the item if an error occurs on<br>    the first node.<br><br>### Bug Handling<br><br>-   Issue \\#50: Avoid problems with sleep function in mixed<br>    gevent/threading setup.<br>-   Issue \\#56: Avoid issues with watch callbacks evaluating to false.<br><br>1.0b1 (2013-02-24)<br>------------------<br><br>### Features<br><br>-   Refactored the internal connection handler to use a single thread.<br>    It now uses a deque and pipe to signal the ZK thread that there's a<br>    new command to send, so that the ZK thread can send it, or retrieve<br>    a response. Processing ZK requests and responses serially in a<br>    single thread eliminates the need for a bunch of the locking, the<br>    peekable queue and two threads working on the same underlying<br>    socket.<br>-   Issue \\#48: Added documentation for the retry helper module.<br>-   Issue \\#55: Fix os.pipe file descriptor leak and introduce a<br>    KazooClient.close method. The method is particular useful in tests,<br>    where multiple KazooClients are created and closed in the same<br>    process.<br><br>### Bug Handling<br><br>-   Issue \\#46: Avoid TypeError in GeneratorContextManager on process<br>    shutdown.<br>-   Issue \\#43: Let DataWatch return node data if allow\\_missing\\_node<br>    is used.<br><br>0.9 (2013-01-07)<br>----------------<br><br>### API Changes<br><br>-   When a retry operation ultimately fails, it now raises a<br>    kazoo_sasl.retry.RetryFailedError exception, instead of a general<br>    Exception instance. RetryFailedError also inherits from the base<br>    KazooException.<br><br>### Features<br><br>-   Improvements to Debian packaging rules.<br><br>### Bug Handling<br><br>-   Issue \\#39 / \\#41: Handle connection dropped errors during session<br>    writes. Ensure client connection is re-established to a new ZK node<br>    if available.<br>-   Issue \\#38: Set CLOEXEC flag on all sockets when available.<br>-   Issue \\#37 / \\#40: Handle timeout errors during select calls on<br>    sockets.<br>-   Issue \\#36: Correctly set ConnectionHandler.writer\\_stopped even if<br>    an exception is raised inside the writer, like a retry operation<br>    failing.<br><br>0.8 (2012-10-26)<br>----------------<br><br>### API Changes<br><br>-   The KazooClient.\\_\\_init\\_\\_ took as watcher argument as its second<br>    keyword argument. The argument had no effect anymore since version<br>    0.5 and was removed.<br><br>### Bug Handling<br><br>-   Issue \\#35: KazooClient.\\_\\_init\\_\\_ didn't pass on<br>    retry\\_max\\_delay to the retry helper.<br>-   Issue \\#34: Be more careful while handling socket connection errors.<br><br>0.7 (2012-10-15)<br>----------------<br><br>### Features<br><br>-   DataWatch now has a allow\\_missing\\_node setting that allows a watch<br>    to be set on a node that doesn't exist when the DataWatch is<br>    created.<br>-   Add new Queue recipe, with optional priority support.<br>-   Add new Counter recipe.<br>-   Added debian packaging rules.<br><br>### Bug Handling<br><br>-   Issue \\#31 fixed: Only catch KazooExceptions in catch-all calls.<br>-   Issue \\#15 fixed again: Force sleep delay to be a float to appease<br>    gevent.<br>-   Issue \\#29 fixed: DataWatch and ChildrenWatch properly re-register<br>    their watches on server disconnect.<br><br>0.6 (2012-09-27)<br>----------------<br><br>### API Changes<br><br>-   Node paths are assumed to be Unicode objects. Under Python 2<br>    pure-ascii strings will also be accepted. Node values are considered<br>    bytes. The byte type is an alias for str under Python 2.<br>-   New KeeperState.CONNECTED\\_RO state for Zookeeper servers connected<br>    in read-only mode.<br>-   New NotReadOnlyCallError exception when issuing a write change<br>    against a server thats currently read-only.<br><br>### Features<br><br>-   Add support for Python 3.2, 3.3 and PyPy (only for the threading<br>    handler).<br>-   Handles connecting to Zookeeper 3.4+ read-only servers.<br>-   Automatic background scanning for a Read/Write server when connected<br>    to a server in read-only mode.<br>-   Add new Semaphore recipe.<br>-   Add a new retry\\_max\\_delay argument to the client and by default<br>    limit the retry delay to at most an hour regardless of exponential<br>    backoff settings.<br>-   Add new randomize\\_hosts argument to KazooClient, allowing one to<br>    disable host randomization.<br><br>### Bug Handling<br><br>-   Fix bug with locks not handling intermediary lock contenders<br>    disappearing.<br>-   Fix bug with set\\_data type check failing to catch unicode values.<br>-   Fix bug with gevent 0.13.x backport of peekable queue.<br>-   Fix PatientChildrenWatch to use handler specific sleep function.<br><br>0.5 (2012-09-06)<br>----------------<br><br>Skipping a version to reflect the magnitude of the change. Kazoo is now<br>a pure Python client with no C bindings. This release should run without<br>a problem on alternate Python implementations such as PyPy and Jython.<br>Porting to Python 3 in the future should also be much easier.<br><br>### Documentation<br><br>-   Docs have been restructured to handle the new classes and locations<br>    of the methods from the pure Python refactor.<br><br>### Bug Handling<br><br>This change may introduce new bugs, however there is no longer the<br>possibility of a complete Python segfault due to errors in the C library<br>and/or the C binding.<br><br>-   Possible segfaults from the C lib are gone.<br>-   Password mangling due to the C lib is gone.<br>-   The party recipes didn't set their participating flag to False after<br>    leaving.<br><br>### Features<br><br>-   New client.command and client.server\\_version API, exposing<br>    Zookeeper's four letter commands and giving access to structured<br>    version information.<br>-   Added 'include\\_data' option for get\\_children to include the node's<br>    Stat object.<br>-   Substantial increase in logging data with debug mode. All<br>    correspondence with the Zookeeper server can now be seen to help in<br>    debugging.<br><br>### API Changes<br><br>-   The testing helpers have been moved from testing.\\_\\_init\\_\\_ into a<br>    testing.harness module. The official API's of KazooTestCase and<br>    KazooTestHarness can still be directly imported from testing.<br>-   The kazoo_sasl.handlers.util module was removed.<br>-   Backwards compatible exception class aliases are provided for now in<br>    kazoo exceptions for the prior C exception names.<br>-   Unicode strings now work fine for node names and are properly<br>    converted to and from unicode objects.<br>-   The data value argument for the create and create\\_async methods of<br>    the client was made optional and defaults to an empty byte string.<br>    The data value must be a byte string. Unicode values are no longer<br>    allowed and will raise a TypeError.<br><br>0.3 (2012-08-23)<br>----------------<br><br>### API Changes<br><br>-   Handler interface now has an rlock\\_object for use by recipes.<br><br>### Bug Handling<br><br>-   Fixed password bug with updated zc-zookeeper-static release, which<br>    retains null bytes in the password properly.<br>-   Fixed reconnect hammering, so that the reconnection follows retry<br>    jitter and retry backoff's.<br>-   Fixed possible bug with using a threading.Condition in the set<br>    partitioner. Set partitioner uses new rlock\\_object handler API to<br>    get an appropriate RLock for gevent.<br>-   Issue \\#17 fixed: Wrap timeout exceptions with staticmethod so they<br>    can be used directly as intended. Patch by Bob Van Zant.<br>-   Fixed bug with client reconnection looping indefinitely using an<br>    expired session id.<br><br>0.2 (2012-08-12)<br>----------------<br><br>### Documentation<br><br>-   Fixed doc references to start\\_async using an AsyncResult object, it<br>    uses an Event object.<br><br>### Bug Handling<br><br>-   Issue \\#16 fixed: gevent zookeeper logging failed to handle a monkey<br>    patched logging setup. Logging is now setup such that a greenlet is<br>    used for logging messages under gevent, and the thread one is used<br>    otherwise.<br>-   Fixed bug similar to \\#14 for ChildrenWatch on the session listener.<br>-   Issue \\#14 fixed: DataWatch had inconsistent handling of the node it<br>    was watching not existing. DataWatch also properly spawns its<br>    \\_get\\_data function to avoid blocking session events.<br>-   Issue \\#15 fixed: sleep\\_func for SequentialGeventHandler was not<br>    set on the class appropriately leading to additional arguments being<br>    passed to gevent.sleep.<br>-   Issue \\#9 fixed: Threads/greenlets didn't gracefully shut down.<br>    Handler now has a start/stop that is used by the client when calling<br>    start and stop that shuts down the handler workers. This addresses<br>    errors and warnings that could be emitted upon process shutdown<br>    regarding a clean exit of the workers.<br>-   Issue \\#12 fixed: gevent 0.13 doesn't use the same<br>    start\\_new\\_thread as gevent 1.0 which resulted in a fully<br>    monkey-patched environment halting due to the wrong thread. Updated<br>    to use the older kazoo method of getting the real thread module<br>    object.<br><br>### API Changes<br><br>-   The KazooClient handler is now officially exposed as<br>    KazooClient.handler so that the appropriate sync objects can be used<br>    by end-users.<br>-   Refactored ChildrenWatcher used by SetPartitioner into a publicly<br>    exposed PatientChildrenWatch under recipe.watchers.<br><br>### Deprecations<br><br>-   connect/connect\\_async has been renamed to start/start\\_async to<br>    better match the stop to indicate connection handling. The prior<br>    names are aliased for the time being.<br><br>### Recipes<br><br>-   Added Barrier and DoubleBarrier implementation.<br><br>0.2b1 (2012-07-27)<br>------------------<br><br>### Bug Handling<br><br>-   ZOOKEEPER-1318: SystemError is caught and rethrown as the proper<br>    invalid state exception in older zookeeper python bindings where<br>    this issue is still valid.<br>-   ZOOKEEPER-1431: Install the latest zc-zookeeper-static library or<br>    use the packaged ubuntu one for ubuntu 12.04 or later.<br>-   ZOOKEEPER-553: State handling isn't checked via this method, we<br>    track it in a simpler manner with the watcher to ensure we know the<br>    right state.<br><br>### Features<br><br>-   Exponential backoff with jitter for retrying commands.<br>-   Gevent 0.13 and 1.0b support.<br>-   Lock, Party, SetPartitioner, and Election recipe implementations.<br>-   Data and Children watching API's.<br>-   State transition handling with listener registering to handle<br>    session state changes (choose to fatal the app on session<br>    expiration, etc.)<br>-   Zookeeper logging stream redirected into Python logging channel<br>    under the name 'Zookeeper'.<br>-   Base client library with handler support for threading and gevent<br>    async environments.<br><br><br>\n          </div>"}, "last_serial": 4101034, "releases": {"2.6.1": [{"comment_text": "", "digests": {"md5": "f6112d10db29dbce47b409a8753feb4e", "sha256": "9fb1445d90d81f3f890df1c480f3062663876ebff2304fcba5efdcfbfe37a86a"}, "downloads": -1, "filename": "kazoo_sasl-2.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6112d10db29dbce47b409a8753feb4e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 131295, "upload_time": "2018-07-25T15:46:30", "upload_time_iso_8601": "2018-07-25T15:46:30.304597Z", "url": "https://files.pythonhosted.org/packages/a9/a9/97c7323ac0c88422c9add0e5c12022401f0732248998c73c48990a6c6263/kazoo_sasl-2.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e281a42c2b40163701015074128f8db", "sha256": "475277e43aa640ec54554f2707a35b865a4646e98db3cd0f7d4365f594965c95"}, "downloads": -1, "filename": "kazoo-sasl-2.6.1.tar.gz", "has_sig": false, "md5_digest": "8e281a42c2b40163701015074128f8db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 148572, "upload_time": "2018-07-25T15:46:31", "upload_time_iso_8601": "2018-07-25T15:46:31.659619Z", "url": "https://files.pythonhosted.org/packages/43/e3/462ec2ff2cde1018742dd2f57ad5008fbc82749e082917a71eef5cd52cae/kazoo-sasl-2.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6112d10db29dbce47b409a8753feb4e", "sha256": "9fb1445d90d81f3f890df1c480f3062663876ebff2304fcba5efdcfbfe37a86a"}, "downloads": -1, "filename": "kazoo_sasl-2.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6112d10db29dbce47b409a8753feb4e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 131295, "upload_time": "2018-07-25T15:46:30", "upload_time_iso_8601": "2018-07-25T15:46:30.304597Z", "url": "https://files.pythonhosted.org/packages/a9/a9/97c7323ac0c88422c9add0e5c12022401f0732248998c73c48990a6c6263/kazoo_sasl-2.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e281a42c2b40163701015074128f8db", "sha256": "475277e43aa640ec54554f2707a35b865a4646e98db3cd0f7d4365f594965c95"}, "downloads": -1, "filename": "kazoo-sasl-2.6.1.tar.gz", "has_sig": false, "md5_digest": "8e281a42c2b40163701015074128f8db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 148572, "upload_time": "2018-07-25T15:46:31", "upload_time_iso_8601": "2018-07-25T15:46:31.659619Z", "url": "https://files.pythonhosted.org/packages/43/e3/462ec2ff2cde1018742dd2f57ad5008fbc82749e082917a71eef5cd52cae/kazoo-sasl-2.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:31 2020"}