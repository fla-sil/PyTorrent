{"info": {"author": "Spencer Mitchell", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "##########\nCuttlePool\n##########\n\n.. image:: https://travis-ci.org/smitchell556/cuttlepool.svg?branch=master\n   :target: https://travis-ci.org/smitchell556/cuttlepool\n\n\nCuttlePool is a general purpose, thread-safe resource pooling implementation\nfor use with long lived resources and/or resources that are expensive to\ninstantiate. It's key features are:\n\nPool overflow\n   Creates additional resources if the pool capacity has been reached and\n   will remove the overflow when demand for resources decreases.\n\nResource harvesting\n   Any resources that haven't been returned to the pool and are no longer\n   referenced by anything outside the pool are returned to the pool. This helps\n   prevent pool depletion when resources aren't explicitly returned to the\n   pool and the resource wrapper is garbage collected.\n\nResource queuing\n   If all else fails and no resource can be immediately found or made, the\n   pool will wait a specified amount of time for a resource to be returned\n   to the pool before raising an exception.\n\nHow-to Guide\n============\n\nUsing CuttlePool requires subclassing a ``CuttlePool`` object with a user\ndefined method ``normalize_resource()`` and ``ping()``. The example below uses\n``sqlite3`` connections as a resource, but CuttlePool is not limited to\nconnection drivers. ::\n\n  >>> import sqlite3\n  >>> from cuttlepool import CuttlePool\n  >>> class SQLitePool(CuttlePool):\n  ...     def normalize_resource(self, resource):\n  ...         resource.row_factory = None\n  ...     def ping(self, resource):\n  ...         try:\n  ...             rv = resource.execute('SELECT 1').fetchall()\n  ...             return (1,) in rv\n  ...         except sqlite3.Error:\n  ...             return False\n  >>> pool = SQLitePool(factory=sqlite3.connect, database='ricks_lab')\n\nLet's break this down line by line.\n\nFirst, the ``sqlite3`` module is imported. ``sqlite3.connect`` will be the\nunderlying resource factory.\n\n``CuttlePool`` is imported and subclassed. The ``normalize_resource()``\nmethod takes a resource, in this case a ``sqlite3.Connection`` instance created\nby ``sqlite3.connect``, as a parameter and changes it's properties. This is\nimportant because a resource can be modified while it's outside of the pool and\nany modifications made during that time will persist; this can have unintended\nconsequences when the resource is later retrieved from the pool.\n\nNext the ``ping()`` method is implemented, which also takes a resource, the\nsame as ``normalize_resource()``, as a parameter. ``ping()`` ensures the\nresource is functional; in this case, it checks that the ``sqlite3.Connection``\ninstance is open. If the resource is functional, ``ping()`` returns ``True``\nelse it returns ``False``. In the above example, a simple statement is executed\nand if the expected result is returned, it means the resource is open and\n``True`` is returned. The implementation of this method is really dependent on\nthe resource created by the pool and may not even be necessary.\n\nFinally an instance of ``SQLitePool`` is made. The ``sqlite3.connect`` method is\npassed to the instance along with the database name.\n\nThe ``CuttlePool`` object and as a result the ``SQLitePool`` object accepts any\nparameters that the underlying resource factory accepts as keyword arguments.\nThere are three other parameters the pool object accepts that are unrelated to\nthe resource factory. ``capacity`` sets the max number of resources the pool\nwill hold at any given time. ``overflow`` sets the max number of additional\nresources the pool will create when depleted. All overflow resources will be\nremoved from the pool if the pool is at capacity. ``timeout`` sets the amount\nof time in seconds the pool will wait for a resource to become free if the pool\nis depleted when a request for a resource is made.\n\nA resource from the pool can be treated the same way as an instance created by\nthe resource factory passed to the pool. In our example a resource can be used\njust like a ``sqlite3.Connection`` instance. ::\n\n  >>> con = pool.get_resource()\n  >>> cur = con.cursor()\n  >>> cur.execute(('INSERT INTO garage (invention_name, state) '\n  ...              'VALUES (%s, %s)'), ('Space Cruiser', 'damaged'))\n  >>> con.commit()\n  >>> cur.close()\n  >>> con.close()\n\nCalling ``close()`` on the resource returns it to the pool instead of closing\nit. It is not necessary to call ``close()`` though. The pool tracks resources\nso any unreferenced resources will be collected and returned to the pool. It is\nstill a good idea to call ``close()`` though, since explicit is better than\nimplicit.\n\n.. note::\n   Once ``close()`` is called on the resource object, it renders the\n   object useless. The resource object received from the pool is a wrapper\n   around the actual resource object and calling ``close()`` on it returns\n   the resource to the pool and removes it from the wrapper effectively\n   leaving it an empty shell to be garbage collected.\n\nTo automatically \"close\" resources, ``get_resource()`` can be used in a\n``with`` statement. ::\n\n  >>> with pool.get_resource() as con:\n  ...     cur = con.cursor()\n  ...     cur.execute(('INSERT INTO garage (invention_name, state) '\n  ...                  'VALUES (%s, %s)'), ('Space Cruiser', 'damaged'))\n  ...     con.commit()\n  ...     cur.close()\n\nAPI\n===\n\nThe API can be found at `read the docs <https://cuttlepool.readthedocs.io>`_.\n\nFAQ\n===\n\nHow do I install it?\n--------------------\n\n``pip install cuttlepool``\n\nContributing\n------------\n\nIt's highly recommended to develop in a virtualenv.\n\nFork the repository.\n\nClone the repository::\n\n  git clone https://github.com/<your_username>/cuttlepool.git\n\nInstall the package in editable mode::\n\n  cd cuttlepool\n  pip install -e .[dev]\n\nNow you're set. See the next section for running tests.\n\nRunning the tests\n-----------------\n\nTests can be run with the command ``pytest``.\n\nWhere can I get help?\n---------------------\n\nIf you haven't read the How-to guide above, please do that first. Otherwise,\ncheck the `issue tracker <https://github.com/smitchell556/cuttlepool/issues>`_.\nYour issue may be addressed there and if it isn't please file an issue :)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smitchell556/cuttlepool", "keywords": "sql connection pool", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "cuttlepool", "package_url": "https://pypi.org/project/cuttlepool/", "platform": "", "project_url": "https://pypi.org/project/cuttlepool/", "project_urls": {"Homepage": "https://github.com/smitchell556/cuttlepool"}, "release_url": "https://pypi.org/project/cuttlepool/0.9.1/", "requires_dist": ["pytest ; extra == 'dev'"], "requires_python": "", "summary": "A resource pool implementation", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/smitchell556/cuttlepool\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/smitchell556/cuttlepool.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/708f9589decb0f01136982a144d4bb9f00b90504/68747470733a2f2f7472617669732d63692e6f72672f736d69746368656c6c3535362f637574746c65706f6f6c2e7376673f6272616e63683d6d6173746572\"></a>\n<p>CuttlePool is a general purpose, thread-safe resource pooling implementation\nfor use with long lived resources and/or resources that are expensive to\ninstantiate. It\u2019s key features are:</p>\n<dl>\n<dt>Pool overflow</dt>\n<dd>Creates additional resources if the pool capacity has been reached and\nwill remove the overflow when demand for resources decreases.</dd>\n<dt>Resource harvesting</dt>\n<dd>Any resources that haven\u2019t been returned to the pool and are no longer\nreferenced by anything outside the pool are returned to the pool. This helps\nprevent pool depletion when resources aren\u2019t explicitly returned to the\npool and the resource wrapper is garbage collected.</dd>\n<dt>Resource queuing</dt>\n<dd>If all else fails and no resource can be immediately found or made, the\npool will wait a specified amount of time for a resource to be returned\nto the pool before raising an exception.</dd>\n</dl>\n<div id=\"how-to-guide\">\n<h2>How-to Guide</h2>\n<p>Using CuttlePool requires subclassing a <tt>CuttlePool</tt> object with a user\ndefined method <tt>normalize_resource()</tt> and <tt>ping()</tt>. The example below uses\n<tt>sqlite3</tt> connections as a resource, but CuttlePool is not limited to\nconnection drivers.</p>\n<pre>&gt;&gt;&gt; import sqlite3\n&gt;&gt;&gt; from cuttlepool import CuttlePool\n&gt;&gt;&gt; class SQLitePool(CuttlePool):\n...     def normalize_resource(self, resource):\n...         resource.row_factory = None\n...     def ping(self, resource):\n...         try:\n...             rv = resource.execute('SELECT 1').fetchall()\n...             return (1,) in rv\n...         except sqlite3.Error:\n...             return False\n&gt;&gt;&gt; pool = SQLitePool(factory=sqlite3.connect, database='ricks_lab')\n</pre>\n<p>Let\u2019s break this down line by line.</p>\n<p>First, the <tt>sqlite3</tt> module is imported. <tt>sqlite3.connect</tt> will be the\nunderlying resource factory.</p>\n<p><tt>CuttlePool</tt> is imported and subclassed. The <tt>normalize_resource()</tt>\nmethod takes a resource, in this case a <tt>sqlite3.Connection</tt> instance created\nby <tt>sqlite3.connect</tt>, as a parameter and changes it\u2019s properties. This is\nimportant because a resource can be modified while it\u2019s outside of the pool and\nany modifications made during that time will persist; this can have unintended\nconsequences when the resource is later retrieved from the pool.</p>\n<p>Next the <tt>ping()</tt> method is implemented, which also takes a resource, the\nsame as <tt>normalize_resource()</tt>, as a parameter. <tt>ping()</tt> ensures the\nresource is functional; in this case, it checks that the <tt>sqlite3.Connection</tt>\ninstance is open. If the resource is functional, <tt>ping()</tt> returns <tt>True</tt>\nelse it returns <tt>False</tt>. In the above example, a simple statement is executed\nand if the expected result is returned, it means the resource is open and\n<tt>True</tt> is returned. The implementation of this method is really dependent on\nthe resource created by the pool and may not even be necessary.</p>\n<p>Finally an instance of <tt>SQLitePool</tt> is made. The <tt>sqlite3.connect</tt> method is\npassed to the instance along with the database name.</p>\n<p>The <tt>CuttlePool</tt> object and as a result the <tt>SQLitePool</tt> object accepts any\nparameters that the underlying resource factory accepts as keyword arguments.\nThere are three other parameters the pool object accepts that are unrelated to\nthe resource factory. <tt>capacity</tt> sets the max number of resources the pool\nwill hold at any given time. <tt>overflow</tt> sets the max number of additional\nresources the pool will create when depleted. All overflow resources will be\nremoved from the pool if the pool is at capacity. <tt>timeout</tt> sets the amount\nof time in seconds the pool will wait for a resource to become free if the pool\nis depleted when a request for a resource is made.</p>\n<p>A resource from the pool can be treated the same way as an instance created by\nthe resource factory passed to the pool. In our example a resource can be used\njust like a <tt>sqlite3.Connection</tt> instance.</p>\n<pre>&gt;&gt;&gt; con = pool.get_resource()\n&gt;&gt;&gt; cur = con.cursor()\n&gt;&gt;&gt; cur.execute(('INSERT INTO garage (invention_name, state) '\n...              'VALUES (%s, %s)'), ('Space Cruiser', 'damaged'))\n&gt;&gt;&gt; con.commit()\n&gt;&gt;&gt; cur.close()\n&gt;&gt;&gt; con.close()\n</pre>\n<p>Calling <tt>close()</tt> on the resource returns it to the pool instead of closing\nit. It is not necessary to call <tt>close()</tt> though. The pool tracks resources\nso any unreferenced resources will be collected and returned to the pool. It is\nstill a good idea to call <tt>close()</tt> though, since explicit is better than\nimplicit.</p>\n<div>\n<p>Note</p>\n<p>Once <tt>close()</tt> is called on the resource object, it renders the\nobject useless. The resource object received from the pool is a wrapper\naround the actual resource object and calling <tt>close()</tt> on it returns\nthe resource to the pool and removes it from the wrapper effectively\nleaving it an empty shell to be garbage collected.</p>\n</div>\n<p>To automatically \u201cclose\u201d resources, <tt>get_resource()</tt> can be used in a\n<tt>with</tt> statement.</p>\n<pre>&gt;&gt;&gt; with pool.get_resource() as con:\n...     cur = con.cursor()\n...     cur.execute(('INSERT INTO garage (invention_name, state) '\n...                  'VALUES (%s, %s)'), ('Space Cruiser', 'damaged'))\n...     con.commit()\n...     cur.close()\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>The API can be found at <a href=\"https://cuttlepool.readthedocs.io\" rel=\"nofollow\">read the docs</a>.</p>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<div id=\"how-do-i-install-it\">\n<h3>How do I install it?</h3>\n<p><tt>pip install cuttlepool</tt></p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>It\u2019s highly recommended to develop in a virtualenv.</p>\n<p>Fork the repository.</p>\n<p>Clone the repository:</p>\n<pre>git clone https://github.com/&lt;your_username&gt;/cuttlepool.git\n</pre>\n<p>Install the package in editable mode:</p>\n<pre>cd cuttlepool\npip install -e .[dev]\n</pre>\n<p>Now you\u2019re set. See the next section for running tests.</p>\n</div>\n<div id=\"running-the-tests\">\n<h3>Running the tests</h3>\n<p>Tests can be run with the command <tt>pytest</tt>.</p>\n</div>\n<div id=\"where-can-i-get-help\">\n<h3>Where can I get help?</h3>\n<p>If you haven\u2019t read the How-to guide above, please do that first. Otherwise,\ncheck the <a href=\"https://github.com/smitchell556/cuttlepool/issues\" rel=\"nofollow\">issue tracker</a>.\nYour issue may be addressed there and if it isn\u2019t please file an issue :)</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6380827, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "31bb8b9c2a2ae580fafb059fca8f712e", "sha256": "7e2ea3217c4618896ae2b1137b3e7712473c0ae710a429ec72e419295c502ea9"}, "downloads": -1, "filename": "cuttlepool-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "31bb8b9c2a2ae580fafb059fca8f712e", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7603, "upload_time": "2017-04-06T22:54:15", "upload_time_iso_8601": "2017-04-06T22:54:15.834975Z", "url": "https://files.pythonhosted.org/packages/1b/bf/9f740c4561e3784009ad30aa867c13e924c78c962d3431b49638ec1677ce/cuttlepool-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49830e804c24d77cc2ffae7694b5e48d", "sha256": "f2f7c154747f3e7b4a3a0fb3ded45e8d489e6e1f2a3a0bfc02e4a87d606fbf1c"}, "downloads": -1, "filename": "cuttlepool-0.1.0.tar.gz", "has_sig": false, "md5_digest": "49830e804c24d77cc2ffae7694b5e48d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7260, "upload_time": "2017-04-06T22:54:17", "upload_time_iso_8601": "2017-04-06T22:54:17.321575Z", "url": "https://files.pythonhosted.org/packages/96/f1/f6caf58d4fb7137393a4683c5572a009392001918525b68237c2a0f54e53/cuttlepool-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e7e5870d4797fc3196c8001fd864603f", "sha256": "110a6fa178fd2370abc6033b8483f8c32f65a66c5dc1bf100c3e9cfed76a1b52"}, "downloads": -1, "filename": "cuttlepool-0.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "e7e5870d4797fc3196c8001fd864603f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7950, "upload_time": "2017-04-18T21:05:34", "upload_time_iso_8601": "2017-04-18T21:05:34.002855Z", "url": "https://files.pythonhosted.org/packages/fe/9f/d5c9519c1a93dbb3f6eaa643d11a0431e6d5ea328dd7ae933558d59690d5/cuttlepool-0.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79713a698547a12c42fab1050a3e2185", "sha256": "2e6cdc4bea9d3b12f3ae9f18723b96d1ea041d5427556740df999fdf2f5f98c0"}, "downloads": -1, "filename": "cuttlepool-0.2.1.tar.gz", "has_sig": false, "md5_digest": "79713a698547a12c42fab1050a3e2185", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7585, "upload_time": "2017-04-18T21:05:35", "upload_time_iso_8601": "2017-04-18T21:05:35.374048Z", "url": "https://files.pythonhosted.org/packages/11/f0/78e549e55e5d336374239bf2e2fb5dadc1828ab46433f2957822af3777c9/cuttlepool-0.2.1.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "c89d8fc2b3afb679abc086a568e43712", "sha256": "62496aac0342a1715d4a6dd76a5ec94f20d380ee07f26cacbaae0552e3e45278"}, "downloads": -1, "filename": "cuttlepool-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c89d8fc2b3afb679abc086a568e43712", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9470, "upload_time": "2017-05-15T22:26:55", "upload_time_iso_8601": "2017-05-15T22:26:55.842619Z", "url": "https://files.pythonhosted.org/packages/a3/c2/41db7fd3413fad9c77cad46a26bc5ce884c5d6a6092c8f6364f45cd402d3/cuttlepool-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b0093d15078dcbcc1f481e4603b6747", "sha256": "6f10762e3d50632e35b2d90fe00270889e4b315d698d3a9292afa315dba8fc1f"}, "downloads": -1, "filename": "cuttlepool-0.4.1.tar.gz", "has_sig": false, "md5_digest": "9b0093d15078dcbcc1f481e4603b6747", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9651, "upload_time": "2017-05-15T22:26:57", "upload_time_iso_8601": "2017-05-15T22:26:57.263370Z", "url": "https://files.pythonhosted.org/packages/b9/63/71d338ad5343549ae7870cec320e83284ff47db688e9c2f6d1decad20be1/cuttlepool-0.4.1.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "9a06c4b542d0bf200171ec4b3aec5245", "sha256": "0f4dee8f5ee9c383cf8d59a69183547e170bedc4bbb336d342d961e26062647c"}, "downloads": -1, "filename": "cuttlepool-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9a06c4b542d0bf200171ec4b3aec5245", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10107, "upload_time": "2018-01-04T22:29:43", "upload_time_iso_8601": "2018-01-04T22:29:43.272731Z", "url": "https://files.pythonhosted.org/packages/60/b0/8b2fa3f99954ff7a68a69b2b23358458c29c212ca7837e6bcd087fd9edc9/cuttlepool-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "299a5bd54f77fc415e0a3a8f21015636", "sha256": "5b196f7b6100dfa2f927b2ea2c7987371d3089c637504d92c1507d72dc153f78"}, "downloads": -1, "filename": "cuttlepool-0.5.1.tar.gz", "has_sig": false, "md5_digest": "299a5bd54f77fc415e0a3a8f21015636", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10132, "upload_time": "2018-01-04T22:29:44", "upload_time_iso_8601": "2018-01-04T22:29:44.306822Z", "url": "https://files.pythonhosted.org/packages/a0/db/8cf6403945e65bc282ca09af6e4defbcb7eee84e899a6f1ecc5fd29e8fd9/cuttlepool-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "2adeb494a1381b117d3384984a00c470", "sha256": "48c32df3f874915119f5072e491fdeeeddd6aa80d8fd6c670f47aae0a1a743ef"}, "downloads": -1, "filename": "cuttlepool-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2adeb494a1381b117d3384984a00c470", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9663, "upload_time": "2018-01-28T23:30:55", "upload_time_iso_8601": "2018-01-28T23:30:55.139972Z", "url": "https://files.pythonhosted.org/packages/e2/c5/2de1b7c3ad6ab913a752a81f0ec3a16e42404d91e68f7c15a5cbb070842a/cuttlepool-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "523863652220d5d722da42287f20c962", "sha256": "826bab73ddaff0f5763ed03af646d0add81bb048c9ed27b44caaa9e9498a17e4"}, "downloads": -1, "filename": "cuttlepool-0.6.0.tar.gz", "has_sig": false, "md5_digest": "523863652220d5d722da42287f20c962", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10071, "upload_time": "2018-01-28T23:30:56", "upload_time_iso_8601": "2018-01-28T23:30:56.848734Z", "url": "https://files.pythonhosted.org/packages/70/b7/a15ece0359188ff9e4f0ef4b18d29027d981f2caef19c78c5345ef257d04/cuttlepool-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "b47e9444d2a9e711ab2cb528f465193e", "sha256": "4d7f1dae80710c72574242e3db7a85e37653014d47b4b0d562873de4b5c540f6"}, "downloads": -1, "filename": "cuttlepool-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b47e9444d2a9e711ab2cb528f465193e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9596, "upload_time": "2018-02-09T18:16:47", "upload_time_iso_8601": "2018-02-09T18:16:47.161358Z", "url": "https://files.pythonhosted.org/packages/d9/e5/f5dfcb2f1821d2928b5adc83597babd7b8033cf433344aaaf2a1e000a695/cuttlepool-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b01c16fae37d3143a0ac352a2edd2c0", "sha256": "dd0c0e021f5528a1435464e181d9d4c166f2768df85b8e752ab8ce468c22dcb3"}, "downloads": -1, "filename": "cuttlepool-0.7.0.tar.gz", "has_sig": false, "md5_digest": "8b01c16fae37d3143a0ac352a2edd2c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10437, "upload_time": "2018-02-09T18:16:48", "upload_time_iso_8601": "2018-02-09T18:16:48.883877Z", "url": "https://files.pythonhosted.org/packages/77/80/373f795e65596721bcf164d7e9513c1769f57b2d94674d0758fef5307c2a/cuttlepool-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "e703245e27bf558fc2693649b2942c29", "sha256": "e00bbe2d1cf80506268dffb89ce6f180c850b3bacbf590a5ad8920fbb4f5b687"}, "downloads": -1, "filename": "cuttlepool-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e703245e27bf558fc2693649b2942c29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10426, "upload_time": "2018-02-28T23:23:47", "upload_time_iso_8601": "2018-02-28T23:23:47.796748Z", "url": "https://files.pythonhosted.org/packages/9c/21/d0b998f3c36ecd09c573755defd8c0cd2f71daeb414d3ec653123c5f70d7/cuttlepool-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e8cc65f3c564d27eb9fec239987b0a8", "sha256": "670207f3e47e9d44047207caddc5c7b52efb1444dacaa3651a55972b22c54ef5"}, "downloads": -1, "filename": "cuttlepool-0.8.0.tar.gz", "has_sig": false, "md5_digest": "1e8cc65f3c564d27eb9fec239987b0a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12705, "upload_time": "2018-02-28T23:23:49", "upload_time_iso_8601": "2018-02-28T23:23:49.785021Z", "url": "https://files.pythonhosted.org/packages/ab/88/a4e7190d383e12c85b25f2c6a012d58a3f013368e96cad174bee1fe233b9/cuttlepool-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "f8a10a3d447cdbdad032c3eae1f8dab5", "sha256": "f740847566d95a8e55b1ee7d5203c798f92d0a99b7186b635e26157cecb3e48c"}, "downloads": -1, "filename": "cuttlepool-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f8a10a3d447cdbdad032c3eae1f8dab5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8580, "upload_time": "2019-12-02T14:34:22", "upload_time_iso_8601": "2019-12-02T14:34:22.665960Z", "url": "https://files.pythonhosted.org/packages/e0/3e/46856a5c9d14589648439b3139373aee47ded1f45667c3928c8de0f99f6f/cuttlepool-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75d7389313c015e94c12cc43b4d8e33b", "sha256": "46b8c81df99052623683ed6d60a38c84ff0dc7a8cd0bad96914323cf6bd4a589"}, "downloads": -1, "filename": "cuttlepool-0.9.0.tar.gz", "has_sig": false, "md5_digest": "75d7389313c015e94c12cc43b4d8e33b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13076, "upload_time": "2019-12-02T14:34:23", "upload_time_iso_8601": "2019-12-02T14:34:23.913029Z", "url": "https://files.pythonhosted.org/packages/b1/17/568cfd9dbd418f0c81bee59ce37250e58bf3b0bdad5a41c8d3f0c9687913/cuttlepool-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "fcbff230c03e9a5189e0060970c2942e", "sha256": "b891d5a9a3c58fd28b66f6cd5868abc506b63e41fc5d3a685fb091bb399921fd"}, "downloads": -1, "filename": "cuttlepool-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fcbff230c03e9a5189e0060970c2942e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8682, "upload_time": "2019-12-31T21:56:48", "upload_time_iso_8601": "2019-12-31T21:56:48.155161Z", "url": "https://files.pythonhosted.org/packages/85/72/d1b6a6dda86f0c5509d95605f8c4fd19830e436e7a70c4a85591c1d19abd/cuttlepool-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1577d35c00044a343849ccb349bb86fc", "sha256": "6676b01e517f9e39c99129e3ee4522aebee6af654968de6e84b950648b3cf26e"}, "downloads": -1, "filename": "cuttlepool-0.9.1.tar.gz", "has_sig": false, "md5_digest": "1577d35c00044a343849ccb349bb86fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13295, "upload_time": "2019-12-31T21:56:49", "upload_time_iso_8601": "2019-12-31T21:56:49.868564Z", "url": "https://files.pythonhosted.org/packages/93/47/014620002fa760bdbc00ca9d42ee7b767bff8d0986ff1b89dfce9f01efc2/cuttlepool-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcbff230c03e9a5189e0060970c2942e", "sha256": "b891d5a9a3c58fd28b66f6cd5868abc506b63e41fc5d3a685fb091bb399921fd"}, "downloads": -1, "filename": "cuttlepool-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fcbff230c03e9a5189e0060970c2942e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8682, "upload_time": "2019-12-31T21:56:48", "upload_time_iso_8601": "2019-12-31T21:56:48.155161Z", "url": "https://files.pythonhosted.org/packages/85/72/d1b6a6dda86f0c5509d95605f8c4fd19830e436e7a70c4a85591c1d19abd/cuttlepool-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1577d35c00044a343849ccb349bb86fc", "sha256": "6676b01e517f9e39c99129e3ee4522aebee6af654968de6e84b950648b3cf26e"}, "downloads": -1, "filename": "cuttlepool-0.9.1.tar.gz", "has_sig": false, "md5_digest": "1577d35c00044a343849ccb349bb86fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13295, "upload_time": "2019-12-31T21:56:49", "upload_time_iso_8601": "2019-12-31T21:56:49.868564Z", "url": "https://files.pythonhosted.org/packages/93/47/014620002fa760bdbc00ca9d42ee7b767bff8d0986ff1b89dfce9f01efc2/cuttlepool-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:16 2020"}