{"info": {"author": "Dan", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development", "Topic :: Software Development :: Internationalization", "Topic :: Software Development :: Localization"], "description": "# Plate\n\n<img src=\"https://i.imgur.com/hZcl3uS.png\" width=\"160\" align=\"right\">\n\n> Internationalization Library for Python\n\n**Plate** (**P**ython trans**late**) is an i18n library for Python that gives your application the ability to\nspeak many languages. It is designed to be simple and straightforward to use for **developers** and easy for\n**translators**.\n\n## Features\n\n- Translations based on JSON files\n- Interpolated translations\n- Pluralization\n- Emoji\n\n## Installing\n\n``` shell\n$ pip3 install plate\n```\n\n## Setup\n\nPlate is not going to perform any translation; what it does, instead, is simply providing a way to manage\nalready-translated phrases so that they can be easily accessed from your application code.\n\nThese translated phrases are kept in JSON files stored in a folder inside the application working directory and\norganized by their respective language codes. The JSON keys are in common to all translations and the values\nof each contain the translated phrases.\n\n1. Create a new `locales` folder in your working directory to store translation files.\n2. Put files named after their language codes: `en_US.json`, `it_IT.json`, and so on. All available language codes can\n   be found [here](plate/languages.py).\n3. Start adding new phrases and translations. Here's an example for `en_US.json` and `it_IT.json`\n    ``` json\n    {\n        \"hello\": \"Hello\", \n        \"morning\": \"Good morning, {name}\",\n        \"drink\": \"Let's drink :SAKE: together\",\n        \"apples\": \"No apples | One apple | {count} apples\"\n    }\n    ```\n    ``` json\n    {\n        \"hello\": \"Ciao\", \n        \"morning\": \"Buongiorno, {name}\",\n        \"drink\": \"Beviamo :SAKE: insieme\",\n        \"apples\": \"Nessuna mela | Una mela | {count} mele\"\n    }\n    ```\n\n## Usage\n\n### Instantiation\n\nFirst of all, create a new `Plate` instance. Plate will automatically look for files inside the `locales` folder\nor another custom folder you pass to the *root* parameter. The default and the fallback locale is `en_US`, by default.\n\n``` python\nfrom plate import Plate\n\nplate = Plate()\n```\n\n### Translation\n\nTranslate a phrase by simply passing a key and a language code of the destination locale.\n\n``` python\nplate(\"hello\", \"it_IT\")  # Ciao\n```\n\nYou can also set a new default locale to have all subsequent translations in that language.\n\n``` python\nplate.set_locale(\"it_IT\")\nplate(\"hello\")  # Ciao\n```\n\nOr, get a translator for a given locale instead, so that the default locale will be kept unchanged.\n\n``` python\nitalian = plate.get_translator(\"it_IT\")\nitalian(\"hello\")  # Ciao\n```\n\n**Note**: The examples below will assume `plate.set_locale(\"it_IT\")` for conciseness.\n\n### Interpolation\n\nPass named arguments to interpolate your translations.\n\n``` python\nplate(\"morning\", name=\"Dan\")  # Buongiorno, Dan\n```\n\n### Emoji\n\nEmoji can be added with `:EMOJI_NAME:` inside your sources and are automatically inserted with the actual values.\nAll available emoji can be found [here](plate/emojipedia.py). You can search for, visualize them and grab their\nnames at https://emojipedia.org/.\n\n``` python\nplate(\"drink\")  # Beviamo \ud83c\udf76 insieme\n```\n\n### Pluralization\n\nPluralization is done by keeping all the plural cases separated by a pipe `|` (by default, customizable) and by using the special interpolation\nkey `{count}`. The following example shows how to translate and pluralize a phrase for count cases of zero, one and more.\n\n``` python\nplate(\"apples\", count=0)  # Nessuna mela\nplate(\"apples\", count=1)  # Una mela\nplate(\"apples\", count=7)  # 7 mele\n```\n\n## License\n\nMIT \u00a9 2020 [Dan](https://github.com/delivrance)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/delivrance/plate", "keywords": "i18n internationalization l10n localization library python json interpolation pluralization emoji", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Plate", "package_url": "https://pypi.org/project/Plate/", "platform": "", "project_url": "https://pypi.org/project/Plate/", "project_urls": {"Homepage": "https://github.com/delivrance/plate", "Source": "https://github.com/delivrance/plate", "Tracker": "https://github.com/delivrance/plate/issues"}, "release_url": "https://pypi.org/project/Plate/1.0.0/", "requires_dist": null, "requires_python": "~=3.5", "summary": "Internationalization Library for Python", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Plate</h1>\n<img align=\"right\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97c6426d313bf89fd253eaf50a762bb68ca6297/68747470733a2f2f692e696d6775722e636f6d2f685a636c3375532e706e67\" width=\"160\">\n<blockquote>\n<p>Internationalization Library for Python</p>\n</blockquote>\n<p><strong>Plate</strong> (<strong>P</strong>ython trans<strong>late</strong>) is an i18n library for Python that gives your application the ability to\nspeak many languages. It is designed to be simple and straightforward to use for <strong>developers</strong> and easy for\n<strong>translators</strong>.</p>\n<h2>Features</h2>\n<ul>\n<li>Translations based on JSON files</li>\n<li>Interpolated translations</li>\n<li>Pluralization</li>\n<li>Emoji</li>\n</ul>\n<h2>Installing</h2>\n<pre>$ pip3 install plate\n</pre>\n<h2>Setup</h2>\n<p>Plate is not going to perform any translation; what it does, instead, is simply providing a way to manage\nalready-translated phrases so that they can be easily accessed from your application code.</p>\n<p>These translated phrases are kept in JSON files stored in a folder inside the application working directory and\norganized by their respective language codes. The JSON keys are in common to all translations and the values\nof each contain the translated phrases.</p>\n<ol>\n<li>Create a new <code>locales</code> folder in your working directory to store translation files.</li>\n<li>Put files named after their language codes: <code>en_US.json</code>, <code>it_IT.json</code>, and so on. All available language codes can\nbe found <a href=\"plate/languages.py\" rel=\"nofollow\">here</a>.</li>\n<li>Start adding new phrases and translations. Here's an example for <code>en_US.json</code> and <code>it_IT.json</code>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> \n    <span class=\"nt\">\"morning\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Good morning, {name}\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"drink\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Let's drink :SAKE: together\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"apples\"</span><span class=\"p\">:</span> <span class=\"s2\">\"No apples | One apple | {count} apples\"</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ciao\"</span><span class=\"p\">,</span> \n    <span class=\"nt\">\"morning\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Buongiorno, {name}\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"drink\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Beviamo :SAKE: insieme\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"apples\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Nessuna mela | Una mela | {count} mele\"</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n</ol>\n<h2>Usage</h2>\n<h3>Instantiation</h3>\n<p>First of all, create a new <code>Plate</code> instance. Plate will automatically look for files inside the <code>locales</code> folder\nor another custom folder you pass to the <em>root</em> parameter. The default and the fallback locale is <code>en_US</code>, by default.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plate</span> <span class=\"kn\">import</span> <span class=\"n\">Plate</span>\n\n<span class=\"n\">plate</span> <span class=\"o\">=</span> <span class=\"n\">Plate</span><span class=\"p\">()</span>\n</pre>\n<h3>Translation</h3>\n<p>Translate a phrase by simply passing a key and a language code of the destination locale.</p>\n<pre><span class=\"n\">plate</span><span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"it_IT\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Ciao</span>\n</pre>\n<p>You can also set a new default locale to have all subsequent translations in that language.</p>\n<pre><span class=\"n\">plate</span><span class=\"o\">.</span><span class=\"n\">set_locale</span><span class=\"p\">(</span><span class=\"s2\">\"it_IT\"</span><span class=\"p\">)</span>\n<span class=\"n\">plate</span><span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Ciao</span>\n</pre>\n<p>Or, get a translator for a given locale instead, so that the default locale will be kept unchanged.</p>\n<pre><span class=\"n\">italian</span> <span class=\"o\">=</span> <span class=\"n\">plate</span><span class=\"o\">.</span><span class=\"n\">get_translator</span><span class=\"p\">(</span><span class=\"s2\">\"it_IT\"</span><span class=\"p\">)</span>\n<span class=\"n\">italian</span><span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Ciao</span>\n</pre>\n<p><strong>Note</strong>: The examples below will assume <code>plate.set_locale(\"it_IT\")</code> for conciseness.</p>\n<h3>Interpolation</h3>\n<p>Pass named arguments to interpolate your translations.</p>\n<pre><span class=\"n\">plate</span><span class=\"p\">(</span><span class=\"s2\">\"morning\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Dan\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Buongiorno, Dan</span>\n</pre>\n<h3>Emoji</h3>\n<p>Emoji can be added with <code>:EMOJI_NAME:</code> inside your sources and are automatically inserted with the actual values.\nAll available emoji can be found <a href=\"plate/emojipedia.py\" rel=\"nofollow\">here</a>. You can search for, visualize them and grab their\nnames at <a href=\"https://emojipedia.org/\" rel=\"nofollow\">https://emojipedia.org/</a>.</p>\n<pre><span class=\"n\">plate</span><span class=\"p\">(</span><span class=\"s2\">\"drink\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Beviamo \ud83c\udf76 insieme</span>\n</pre>\n<h3>Pluralization</h3>\n<p>Pluralization is done by keeping all the plural cases separated by a pipe <code>|</code> (by default, customizable) and by using the special interpolation\nkey <code>{count}</code>. The following example shows how to translate and pluralize a phrase for count cases of zero, one and more.</p>\n<pre><span class=\"n\">plate</span><span class=\"p\">(</span><span class=\"s2\">\"apples\"</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># Nessuna mela</span>\n<span class=\"n\">plate</span><span class=\"p\">(</span><span class=\"s2\">\"apples\"</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Una mela</span>\n<span class=\"n\">plate</span><span class=\"p\">(</span><span class=\"s2\">\"apples\"</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>  <span class=\"c1\"># 7 mele</span>\n</pre>\n<h2>License</h2>\n<p>MIT \u00a9 2020 <a href=\"https://github.com/delivrance\" rel=\"nofollow\">Dan</a></p>\n\n          </div>"}, "last_serial": 6847268, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3a1f87b5a4007f547d36f879deb34fc7", "sha256": "18f0e769f1a9fa1b94ff93184e92e634f8206c6f1deba3f896805565ea1d84ed"}, "downloads": -1, "filename": "Plate-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a1f87b5a4007f547d36f879deb34fc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 36138, "upload_time": "2020-03-20T02:42:35", "upload_time_iso_8601": "2020-03-20T02:42:35.958415Z", "url": "https://files.pythonhosted.org/packages/c5/8a/8658768297eb6d93fe5bc6bee62958a6521f48fc08fff8bc37becb75e099/Plate-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cf2ea515931b8c80e98014301ea76e9", "sha256": "54bf5252f34de9cd183446528ff19fb86e5f0f62d4a63601360c6f84103452d3"}, "downloads": -1, "filename": "Plate-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8cf2ea515931b8c80e98014301ea76e9", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 35589, "upload_time": "2020-03-20T02:42:36", "upload_time_iso_8601": "2020-03-20T02:42:36.984410Z", "url": "https://files.pythonhosted.org/packages/a0/d9/13f35546551666a10dcb7bd5e2d7f354c39a9e46d21b38cf085308c9b186/Plate-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a1f87b5a4007f547d36f879deb34fc7", "sha256": "18f0e769f1a9fa1b94ff93184e92e634f8206c6f1deba3f896805565ea1d84ed"}, "downloads": -1, "filename": "Plate-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a1f87b5a4007f547d36f879deb34fc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 36138, "upload_time": "2020-03-20T02:42:35", "upload_time_iso_8601": "2020-03-20T02:42:35.958415Z", "url": "https://files.pythonhosted.org/packages/c5/8a/8658768297eb6d93fe5bc6bee62958a6521f48fc08fff8bc37becb75e099/Plate-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cf2ea515931b8c80e98014301ea76e9", "sha256": "54bf5252f34de9cd183446528ff19fb86e5f0f62d4a63601360c6f84103452d3"}, "downloads": -1, "filename": "Plate-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8cf2ea515931b8c80e98014301ea76e9", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 35589, "upload_time": "2020-03-20T02:42:36", "upload_time_iso_8601": "2020-03-20T02:42:36.984410Z", "url": "https://files.pythonhosted.org/packages/a0/d9/13f35546551666a10dcb7bd5e2d7f354c39a9e46d21b38cf085308c9b186/Plate-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:37 2020"}