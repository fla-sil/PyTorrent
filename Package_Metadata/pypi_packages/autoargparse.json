{"info": {"author": "gLhookniano", "author_email": "gLhookniano@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# autoargparse\nMake CMD arg-parser easy and simple.\n\n## dependency\n* python can import argparse\n\n## How to use\n1. pip install autoargparse\n\n2. import autoargparse\n\n3. Initialize :           \ncmd = autoargparse.cmd()\n\n4. Use functon decorator :  <br>   \n    @cmd.args(short_name, long_name, nargs, help, action, type) <br>\n    set function argument as args type\n\n    @cmd.kwargs(arg_name=short_name, nargs, help, action, type) <br>\n    set function argument as kwargs type\n\n    @cmd.mark(run_order=None) <br>\n    set function run order(integer, bigger first run)\n\n5. Run:\ncmd.run()\n\n## example\n```python\n#!coding:utf-8\n\nimport autoargparse\n\ncmd = autoargparse.cmd('simple calculator for example.')\n\n@cmd.mark(1)\n@cmd.kwargs(ne='--negative', action='store_true')\n@cmd.kwargs(ma='--max', action='store_true')\n@cmd.args('-s', '--sum', '*', type=int)\ndef add(*args, ma, ne):\n    if args or ma or ne:\n        d = 0\n        if ma:\n            d = max(args)\n        else:\n            d = sum(args)\n        if ne:\n            d = -d\n        print(d)\n\n@cmd.mark(2)\n@cmd.args('-v', action='count')\n@cmd.args('-m', '--mul', 2, help='MUL!!!', type=int)\ndef mul(a,b,v=None):\n    if not v:\n        print(a*b)\n    elif v==1:\n        print('a * b =', a*b)\n    elif v==2:\n        print('func =', mul.__name__, 'args =', a, b, v)\n        print('a * b =', a*b)\n\n@cmd.mark(3)\n@cmd.args('g', type=int, help='print great')\ndef great(a):\n    if a==1:\n        print('!!!')\n    else:\n        print('Great !!!')\n\n\n\nif __name__ == \"__main__\":\n    cmd.run()\n```\n\n### OUTPUT\n\n> python .\\example.py -h\n\n```\nusage: test.py [-h] [-s [SUM [SUM ...]]] [--max] [--negative] [-m MUL MUL]\n               [-v]\n               g\n\nsimple calculator for test.\n\npositional arguments:\n  g                     print great\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s [SUM [SUM ...]], --sum [SUM [SUM ...]]\n  --max\n  --negative\n  -m MUL MUL, --mul MUL MUL\n                        MUL!!!\n  -v\n```\n\n> python .\\example.py 1\n```\n!!!\n```\n\n> python .\\example.py 2\n```\nGreat !!!\n```\n\n> python .\\example.py 1 -m 2 3\n```\n!!!\n6\n```\n\n> python .\\example.py 1 -m 2 3 -v\n```\n!!!\na * b = 6\n```\n\n> python .\\example.py 1 -m 2 3 -vv\n```\n!!!\nfunc = mul args = 2 3 2\na * b = 6\n```\n\n> python .\\example.py 1 -s 1 2 3 4\n```\n!!!\n10\n```\n\n> python .\\example.py 1 -s 1 2 3 4 --max\n```\n!!!\n4\n```\n\n> python .\\example.py 1 -s 1 2 3 4 --negative\n```\n!!!\n-10\n```\n\n\n## TODO\n* add GUI\n* more easy to use\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gLhookniano/autoargparse", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "autoargparse", "package_url": "https://pypi.org/project/autoargparse/", "platform": "", "project_url": "https://pypi.org/project/autoargparse/", "project_urls": {"Homepage": "https://github.com/gLhookniano/autoargparse"}, "release_url": "https://pypi.org/project/autoargparse/0.1.0/", "requires_dist": null, "requires_python": ">=3.5.0", "summary": "Make CMD arg-parser easy and simple.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>autoargparse</h1>\n<p>Make CMD arg-parser easy and simple.</p>\n<h2>dependency</h2>\n<ul>\n<li>python can import argparse</li>\n</ul>\n<h2>How to use</h2>\n<ol>\n<li>\n<p>pip install autoargparse</p>\n</li>\n<li>\n<p>import autoargparse</p>\n</li>\n<li>\n<p>Initialize :<br>\ncmd = autoargparse.cmd()</p>\n</li>\n<li>\n<p>Use functon decorator :  <br><br>\n@cmd.args(short_name, long_name, nargs, help, action, type) <br>\nset function argument as args type</p>\n<p>@cmd.kwargs(arg_name=short_name, nargs, help, action, type) <br>\nset function argument as kwargs type</p>\n<p>@cmd.mark(run_order=None) <br>\nset function run order(integer, bigger first run)</p>\n</li>\n<li>\n<p>Run:\ncmd.run()</p>\n</li>\n</ol>\n<h2>example</h2>\n<pre><span class=\"ch\">#!coding:utf-8</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">autoargparse</span>\n\n<span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">autoargparse</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'simple calculator for example.'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">(</span><span class=\"n\">ne</span><span class=\"o\">=</span><span class=\"s1\">'--negative'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">)</span>\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">(</span><span class=\"n\">ma</span><span class=\"o\">=</span><span class=\"s1\">'--max'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">)</span>\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"s1\">'-s'</span><span class=\"p\">,</span> <span class=\"s1\">'--sum'</span><span class=\"p\">,</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">ma</span><span class=\"p\">,</span> <span class=\"n\">ne</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">args</span> <span class=\"ow\">or</span> <span class=\"n\">ma</span> <span class=\"ow\">or</span> <span class=\"n\">ne</span><span class=\"p\">:</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">ma</span><span class=\"p\">:</span>\n            <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ne</span><span class=\"p\">:</span>\n            <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">d</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"s1\">'-v'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'count'</span><span class=\"p\">)</span>\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"s1\">'-m'</span><span class=\"p\">,</span> <span class=\"s1\">'--mul'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'MUL!!!'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'a * b ='</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"o\">==</span><span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'func ='</span><span class=\"p\">,</span> <span class=\"n\">mul</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">'args ='</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'a * b ='</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'print great'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">great</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'!!!'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Great !!!'</span><span class=\"p\">)</span>\n\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>OUTPUT</h3>\n<blockquote>\n<p>python .\\example.py -h</p>\n</blockquote>\n<pre><code>usage: test.py [-h] [-s [SUM [SUM ...]]] [--max] [--negative] [-m MUL MUL]\n               [-v]\n               g\n\nsimple calculator for test.\n\npositional arguments:\n  g                     print great\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s [SUM [SUM ...]], --sum [SUM [SUM ...]]\n  --max\n  --negative\n  -m MUL MUL, --mul MUL MUL\n                        MUL!!!\n  -v\n</code></pre>\n<blockquote>\n<p>python .\\example.py 1</p>\n</blockquote>\n<pre><code>!!!\n</code></pre>\n<blockquote>\n<p>python .\\example.py 2</p>\n</blockquote>\n<pre><code>Great !!!\n</code></pre>\n<blockquote>\n<p>python .\\example.py 1 -m 2 3</p>\n</blockquote>\n<pre><code>!!!\n6\n</code></pre>\n<blockquote>\n<p>python .\\example.py 1 -m 2 3 -v</p>\n</blockquote>\n<pre><code>!!!\na * b = 6\n</code></pre>\n<blockquote>\n<p>python .\\example.py 1 -m 2 3 -vv</p>\n</blockquote>\n<pre><code>!!!\nfunc = mul args = 2 3 2\na * b = 6\n</code></pre>\n<blockquote>\n<p>python .\\example.py 1 -s 1 2 3 4</p>\n</blockquote>\n<pre><code>!!!\n10\n</code></pre>\n<blockquote>\n<p>python .\\example.py 1 -s 1 2 3 4 --max</p>\n</blockquote>\n<pre><code>!!!\n4\n</code></pre>\n<blockquote>\n<p>python .\\example.py 1 -s 1 2 3 4 --negative</p>\n</blockquote>\n<pre><code>!!!\n-10\n</code></pre>\n<h2>TODO</h2>\n<ul>\n<li>add GUI</li>\n<li>more easy to use</li>\n</ul>\n\n          </div>"}, "last_serial": 4442748, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0a4bd2ba37bef3abe308768a0418f427", "sha256": "be3832f51d48b9d9ff32da0baeab5c6b8136974abfd68ffd5117315fabed2fe0"}, "downloads": -1, "filename": "autoargparse-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0a4bd2ba37bef3abe308768a0418f427", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 9291, "upload_time": "2018-11-01T23:41:39", "upload_time_iso_8601": "2018-11-01T23:41:39.716651Z", "url": "https://files.pythonhosted.org/packages/a7/d0/77169aca1c9af273c40da65d7c6951de195771a9571a32e59c805af80415/autoargparse-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90955837d08c748b2458f8a58312ed05", "sha256": "2c872d447f522cc7aa1897527def364439fec583b13d5b74ee8a295ad7944e7e"}, "downloads": -1, "filename": "autoargparse-0.1.0.tar.gz", "has_sig": false, "md5_digest": "90955837d08c748b2458f8a58312ed05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 6079, "upload_time": "2018-11-01T23:41:41", "upload_time_iso_8601": "2018-11-01T23:41:41.606032Z", "url": "https://files.pythonhosted.org/packages/9d/3c/95efdd61bcb899bef52728f798defc7928a7e0426153a19033e1f6931a52/autoargparse-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a4bd2ba37bef3abe308768a0418f427", "sha256": "be3832f51d48b9d9ff32da0baeab5c6b8136974abfd68ffd5117315fabed2fe0"}, "downloads": -1, "filename": "autoargparse-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0a4bd2ba37bef3abe308768a0418f427", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 9291, "upload_time": "2018-11-01T23:41:39", "upload_time_iso_8601": "2018-11-01T23:41:39.716651Z", "url": "https://files.pythonhosted.org/packages/a7/d0/77169aca1c9af273c40da65d7c6951de195771a9571a32e59c805af80415/autoargparse-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90955837d08c748b2458f8a58312ed05", "sha256": "2c872d447f522cc7aa1897527def364439fec583b13d5b74ee8a295ad7944e7e"}, "downloads": -1, "filename": "autoargparse-0.1.0.tar.gz", "has_sig": false, "md5_digest": "90955837d08c748b2458f8a58312ed05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 6079, "upload_time": "2018-11-01T23:41:41", "upload_time_iso_8601": "2018-11-01T23:41:41.606032Z", "url": "https://files.pythonhosted.org/packages/9d/3c/95efdd61bcb899bef52728f798defc7928a7e0426153a19033e1f6931a52/autoargparse-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:21 2020"}