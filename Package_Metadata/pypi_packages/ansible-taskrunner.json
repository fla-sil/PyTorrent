{"info": {"author": "Engelbert Tejeda", "author_email": "berttejeda@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Overview](#overview)\n- [TL;DR](#tldr)\n- [Use case and example](#use-case-and-example)\n  - [Given](#given)\n  - [Task](#task)\n  - [Investigation](#investigation)\n  - [Assessment](#assessment)\n  - [Proposed Solution](#proposed-solution)\n- [Technical Details](#technical-details)\n  - [Add hosts designation](#add-hosts-designation)\n  - [Add vars key](#add-vars-key)\n  - [Populate the vars block - defaults](#populate-the-vars-block---defaults)\n  - [Populate the vars block - cli options](#populate-the-vars-block---cli-options)\n    - [Populate the vars block - cli options - mapped variables](#populate-the-vars-block---cli-options---mapped-variables)\n  - [Populate the vars block - help/message](#populate-the-vars-block---helpmessage)\n  - [Populate the vars block - inventory](#populate-the-vars-block---inventory)\n  - [Populate the vars block - embedded make-style functions](#populate-the-vars-block---embedded-make-style-functions)\n    - [About make-style functions](#about-make-style-functions)\n      - [Bash example:](#bash-example)\n      - [Python example:](#python-example)\n      - [Ruby example:](#ruby-example)\n  - [Add tasks](#add-tasks)\n- [Usage Examples](#usage-examples)\n- [Installation](#installation)\n  - [More Examples](#more-examples)\n- [Appendix](#appendix)\n  - [Bastion Mode](#bastion-mode)\n  - [Special Variables](#special-variables)\n    - [ansible_playbook_command](#ansible_playbook_command)\n    - [cli_provider](#cli_provider)\n    - [__ansible_extra_options](#__ansible_extra_options)\n    - [__tasks_file__](#__tasks_file__)\n    - [__parameter_sets__](#__parameter_sets__)\n  - [Parameter Sets](#parameter-sets)\n  - [Mutually Exclusive Options](#mutually-exclusive-options)\n  - [Option Tags](#option-tags)\n    - [Prompt option tag](#prompt-option-tag)\n    - [Choice option tag](#choice-option-tag)\n    - [Combining option tags](#combining-option-tags)\n  - [Simple Templating](#simple-templating)\n  - [Single-Executable Releases](#single-executable-releases)\n  - [Unit Testing](#unit-testing)\n- [TODO - Add more tests!](#todo---add-more-tests)\n- [License and Credits](#license-and-credits)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<a name=\"top\"></a>\n<a name=\"overview\"></a>\n\n# Overview\n\nThis is a task runner that serves as a higher-level automation layer to ansible\n\nThe script expects an ansible-playbook file as the task manifest.\n\nBy default, this is a file named 'Taskfile.yaml' in the current working directory.\n\nThe inspiration for the tool comes from the gnu make command, which operates in similar fashion, i.e.\n\n- A Makefile defines available build steps\n- The make command consumes the Makefile at runtime and exposes these steps as command-line options\n\nIf you are running this tool from Windows, please read the section on [Bastion Mode](#bastion_mode)\n\n# TL;DR\n\n- Ever wanted to add custom switches to the `ansible-playbook` command? Something like this:<br /> \n`ansible-playbook -i myinventory.txt -d dbhost1 -w webhost1 -t value1 myplaybook.yaml`\n- Well, you can through the use of an ansible-playbook wrapper\n- That's where `tasks` comes in:<br />\n`tasks run -d dbhost1 -w webhost1 -t value1`<br />\ntranslates to:<br />\n`ansible-playbook -i /tmp/ansible-inventory16xdkrjd.tmp.ini -e dbhosts=\"dbhost1\" -e webhosts=\"webhost1\" -e some_value=\"value1\" -e echo=\"True\" Taskfile.yaml`\n\n1. Jump down to the [usage examples](#usage-examples) to see this in action\n2. Review the [installation](#installation) instructions if you want to test-drive it\n3. Read on if you want to dig deeper into the tool\n\n<a name=\"use-case-and-example\"></a>\n\n# Use case and example\n\n<a name=\"given\"></a>\n\n## Given\n\n1. An enterprise-grade application named contoso-app\n2. Multiple teams:\n- Development\n- Engineering\n- DBA\n- Operations\n- QA\n3. Ansible is the primary means of invoking business and operational processes across the numerous environment(s)\n\n<a name=\"task\"></a>\n\n## Task\n\nYou must ensure all teams adopt a standardized approach to running ansible workloads\n\n<a name=\"investigation\"></a>\n\n## Investigation\n\nUpon investigating the current approach, you observe the following: \n\n- Users tend to create wrapper scripts that call the ansible-playbook command\n- These scripts don't follow any naming convention, as you've noted:\n  - run.sh\n  - start.sh\n  - playbook.sh\n- These shell scripts have common attributes:\n  - Dynamically populate ansible-playbook variables via the --extra-vars option\n  - Dynamically creating ansible inventories\n  - Performing pre/post-flight tasks\n  - Providing a command-line interface\n\n<a name=\"assessment\"></a>\n\n## Assessment\n\nAdvantages to the above approach:\n- Quick-n-dirty, anyone can get started relatively quickly with writing ansible automation\n\nDisadvantages:\n- Lack of standards: \n- Leads to difficulty in collaboration and code refactoring\n- Decreased re-usability of codebase\n  - This design encourages standalone playbooks\n  - Makes it more difficult to package actions as roles\n  - Duplicate efforts across codebase\n\n<a name=\"proposed-solution\"></a>\n\n## Proposed Solution\n\nEmploy a pre-execution script that operates above the `ansible-playbook` command:\n  - Accomplishes the same as the above, but in more uniform manner\n  - Support for custom command-line parameters/flags\n  - Embedded dynamic inventory\n  - Embedded make-style shell functions\n\nAdvantages to this approach:\n- Easier to manage\n  - If you know YAML and Ansible, you can get started relatively quickly with writing ansible automation\n- Single executable (/usr/local/bin/tasks)\n\nDisadvantages:\n- Target ansible controller needs to have the `tasks` command installed\n\n[Back To Top](#top)\n<a name=\"technical-details\"></a>\n\n# Technical Details\n\nAs stated in the [overview](#overview), this tool functions much like the *make* command in that it accepts an input file that essentially extends its cli options.\n\nWe create a specially formatted ansible-playbook that serves as a task definition file (by default, Taskfile.yaml).\n\nThis task definition file:\n\n- Acts like a command-line script\n- Is a valid ansible playbook (Taskfile.yaml), and can thus be launched with the `ansible-playbook` command\n- Variables available to the pre-execution phase are also available to the ansible execution phase\n\nIn the following sections, we'll be building a sample manifest/playbook named *Taskfile.yaml*\n\n[Back To Top](#top)\n<a name=\"add-hosts-designation\"></a>\n\n## Add hosts designation\n\n<details>\n  <summary>Add hosts, gather_facts, etc</summary>\n\n*Taskfile.yaml*\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n```\n\n</details>\n\n[Back To Top](#top)\n<a name=\"add-vars-key\"></a>\n\n## Add vars key\n\nRemember, the task runner will ultimately be calling the `ansible-playbook` command against this very same file, so it must be conformant.\n\n<details>\n  <summary>We add the 'vars' key, which allows ansible to populate the variables we are defining in this block.</summary>\n\n*Taskfile.yaml*\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n```\n\n</details>\n\n[Back To Top](#top)\n<a name=\"populate-the-vars-block---defaults\"></a>\n\n## Populate the vars block - defaults\n\n<details>\n  <summary>Let's add some default variables to the playbook:</summary>\n\n*Taskfile.yaml*\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n```\n\n</details>\n\nAs you can see, we've defined a number of variables holding different values.\n\nThe rules for defining these play out as follows:\n\n```\nVariable                                     | Ansible Evaluation      | Bash Evaluation\n-------------------------------------------- | ----------------------- | -----------------------\nstr_var: myvalue1                            | String                  | String\nnum_var: 3                                   | Digit                   | String\nmultiline_var: |                             | Multiline String        | String (heredoc)\n  This is a multi-line value\n  of type string\nlist_var:                                    | List Object             | String (heredoc)\n  - item1\n  - item2\ndict_var:                                    | Dictionary Object       | None, Skipped # TODO Add interpolation of yaml dictionary objects for subprocess\n  key1: somevalue1\n  key2: somevalue2\nshell_var: $(grep somestring /some/file.txt) | Depends on output       | String\n```\n\n[Back To Top](#top)\n<a name=\"populate-the-vars-block---cli-options\"></a>\n\n## Populate the vars block - cli options\n\n<details>\n  <summary>Next, we add the cli interface: </summary>\n\n*Taskfile.yaml*\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n```   \n\n</details>\n\nNotice the parameter definitions:\n  - required_parameters\n  - optional_paramters\n\nThese are yaml list objects that expose optional and required command-line options.\n\nThe syntax for the options is as follows:\n\n```\nOptions                                      | Mapped Variable\n-------------------------------------------- | ----------------------\n-{{ short_option }}|--{{ long_option }}      | {{ mapped_variable }} ## {{ Help Text }}\n-{{ switch }}                                | {{ mapped_variable }} (boolean) ## {{ Help Text }}\n--{{ switch }}                               | {{ mapped_variable }} (boolean) ## {{ Help Text }}\n```\n\nEssentially, any option with a pipe '|' character in its name is evaluated as a click option, which means you must provide an argument to said option.\n\nAnything else is treated as a switch, which evaluates to `True` if specified, and undefined otherwise (unless you provide a default in your `vars` declaration).\n\nAlso, an option's help text can be included alongside the mapped variable, and must conform to the following syntax: `## {{ HELP TEXT }}`\n\nMore Examples:\n\n```\nOptions       | Mapped Variable\n------------- | -------------\n-f|--foo      | some_foo_variable ## This is some foo option\n-b|--bar      | some_bar_variable ## This is some bar option\n-F|--foo-bar  | some_other_variable ## This is some foo bar option\n-a|--all-else | [remaining_args] (behaves like click's variadic arguments (nargs=*)) ## This option will 'eat' up all remaining commandline arguments\n--some-option | some_switch (behaves like click switches, holds the value of True if specified) ## This is some boolean option\n```\n\nMore flexibility can be achieved through the use of [parameter sets](#parameter-sets).\n\nSee the [appendix](#parameter_sets) for more information.\n\n[Back To Top](#top)\n<a name=\"populate-the-vars-block---cli-options---mapped-variables\"></a>\n\n### Populate the vars block - cli options - mapped variables\n\nIt's important to note that the above mapped variables can be used during runtime, i.e. referenced in any defined functions, embedded inventory logic, etc.\n\nConsider the `-f|-foo` option above.\n\nWhatever argument you pass to this option becomes the value for the mapped variable.\n\nAgain, this variable is made available to the underlying subprocess call, and within the ansible playbook itself.\n\n<a name=\"populate-the-vars-block---helpmessage\"></a>\n\n## Populate the vars block - help/message\n\n<details>\n  <summary>Next, we add the help/message section</summary>\n\n*Taskfile.yaml*\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n    help:\n      message: |\n        Do something against db and web hosts\n      epilog: |\n        This line will be displayed at the end of the help text message\n      examples:\n        - example1: |\n            Usage example 1\n        - example2: |\n            Usage example 2\n```\n\n</details>\n\n[Back To Top](#top)\n<a name=\"populate-the-vars-block---inventory\"></a>\n\n## Populate the vars block - inventory\n\n<details>\n  <summary>Add the dynamic inventory section</summary>\n\n*Taskfile.yaml*\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n    help:\n      message: |\n        Do something against db and web hosts\n      epilog: |\n        This line will be displayed at the end of the help text message\n      examples:\n        - example1: |\n            Usage example 1\n        - example2: |\n            Usage example 2\n    inventory: |\n      [web-hosts]\n      $(echo ${webhosts} | tr ',' '\\\\n')\n      [db-hosts]\n      $(echo ${dbhosts} | tr ',' '\\\\n')\n      [myhosts:children]\n      deployment-hosts\n      web-hosts\n      db-hosts\n```\n\n</details>\n\n<a name=\"populate-the-vars-block---embedded-make-style-functions\"></a>\n\n## Populate the vars block - embedded make-style functions\n\n<details>\n  <summary>Add embedded make-style functions: </summary>\n\n*Taskfile.yaml*\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n    help:\n      message: |\n        Do something against db and web hosts\n      epilog: |\n        This line will be displayed at the end of the help text message\n      examples:\n        - example1: |\n            Usage example 1\n        - example2: |\n            Usage example 2\n    inventory: |\n      [web-hosts]\n      $(echo ${webhosts} | tr ',' '\\\\n')\n      [db-hosts]\n      $(echo ${dbhosts} | tr ',' '\\\\n')\n      [myhosts:children]\n      deployment-hosts\n      web-hosts\n      db-hosts\n    functions:\n      hello:\n        shell: bash\n        help: Say Hello\n        hidden: false\n        source: |-\n          echo hello\n      preflight_and_run:\n        shell: bash\n        help: Execute Preflight Tasks and Run\n        hidden: false\n        source: |-\n          echo 'Running Preflight Tasks!'\n          tasks run -d dbhost1 -w webhost1 -t value1\n```\n\n</details>\n\nNotice the two switches `-A` and `-PR`.\n\nThese map to corresponding keys in the embedded `functions` stanza.\nAs such, specifying the options in your `tasks` invocation \nwill short-circuit normal operation and execute the corresponding functions in the order you called them.\n\nFor usage examples, see the [appendix](#usage-examples).\n\n<a name=\"about-make-style-functions\"></a>\n\n### About make-style functions\n\nLet's briefly side-step into make-style functions \n\nThe syntax for nesting these under the _functions_ key is as follows:\n\n```\n      name_of_function:\n        shell: bash, ruby, or python\n        help: Help Text to Display\n        hidden: false/true\n        source: |-\n          {{ code }}\n```\n\n[Back To Top](#top)\n<a name=\"bash-example\"></a>\n\n#### Bash example:\n\n```\n      hello:\n        shell: bash\n        help: Hello World in Bash\n        hidden: false\n        source: |-\n          echo 'Hello World!'\n```\n\n<a name=\"python-example\"></a>\n\n#### Python example:\n\n```\n      hello:\n        shell: python\n        help: Hello World in Python\n        hidden: false\n        source: |-\n          print('Hello World!')\n```\n\n<a name=\"ruby-example\"></a>\n\n#### Ruby example:\n\n```\n      hello:\n        shell: ruby\n        help: Hello World in Ruby\n        hidden: false\n        source: |-\n          puts 'Hello World!'\n```\n\n[Back To Top](#top)\n<a name=\"add-tasks\"></a>\n\n## Add tasks\n\n<details>\n  <summary>Finally, we add tasks!</summary>\n\n*Taskfile.yaml*\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n    help:\n      message: |\n        Do something against db and web hosts\n      epilog: |\n        This line will be displayed at the end of the help text message\n      examples:\n        - example1: |\n            Usage example 1\n        - example2: |\n            Usage example 2\n    inventory: |\n      [web-hosts]\n      $(echo ${webhosts} | tr ',' '\\\\n')\n      [db-hosts]\n      $(echo ${dbhosts} | tr ',' '\\\\n')\n      [myhosts:children]\n      deployment-hosts\n      web-hosts\n      db-hosts\n    functions:\n      hello:\n        shell: bash\n        help: Say Hello\n        hidden: false\n        source: |-\n          echo hello\n  tasks:\n    - debug: \n        msg: |\n          Hello from Ansible!\n          You specified: {{ some_value }}\n```\n\n</details>\n\n<a name=\"usage-examples\"></a>\n\n# Usage Examples\n\nQuick usage examples:\n\n* Display help for main command<br />\n  `tasks --help`\n* Display help for the *run* subcommand<br />\n  `tasks run --help`\n* Initialize your workspace<br />\n  `tasks init`<br />\n* Run the Taskfile.yaml playbook, passing in additional options to the underlying subprocess<br />\n  `tasks run -d dbhost1 -w webhost1 -t value1 ---raw -vvv`</br>\n* Don't do anything, just echo the underlying shell command<br />\n  `tasks run -d dbhost1 -w webhost1 -t value1 ---echo`<br />\n  Result should be similar to:<br />\n  `ansible-playbook -i C:\\Users\\${USERNAME}\\AppData\\Local\\Temp\\ansible-inventory16xdkrjd.tmp.ini -e dbhosts=\"dbhost1\" -e webhosts=\"webhost1\" -e some_value=\"value1\" -e echo=\"True\" Taskfile.yaml`\n* Run the Taskfile.yaml playbook<br />\n  `tasks run -d dbhost1 -w webhost1 -t value1`\n* Run the embedded function `preflight_and_run`<br />\n  `tasks run -d dbhost1 -w webhost1 -t value1 -PR`\n* Run the embedded functions `hello` and `preflight_and_run`<br />\n  `tasks run -d dbhost1 -w webhost1 -t value1 -A -PR`\n\n[Back To Top](#top)\n<a name=\"installation\"></a>\n\n# Installation\n\nAnsible-taskrunner consists of the `tasks` binary (for now), and it can be installed in a few ways:\n\n1. pip install ansible-taskrunner\n2. pip install git+https://github.com/berttejeda/ansible-taskrunner.git\n3. Obtaining a [release](#single-executable-releases)\n\nNote: You'll need to pre-install a python distribution for the Windows MSI release.\nNot yet sure if I am doing something wrong or if that's by design.\nI lean toward the former :|\n\n<a name=\"more-examples\"></a>\n\n## More Examples\n\nReview the [examples](examples) directory for more hands-on usage samples.\n\n<a name=\"appendix\"></a>\n\n# Appendix\n\n<a name=\"bastion_mode\"></a>\n\n## Bastion Mode\n\nIf you're launching the `tasks` command from a Windows host, this tool will automatically execute in _Bastion Mode_\n\nUnder Bastion Mode, the `tasks` command will:\n- Execute the `ansible-playbook` subprocess via a _bastion host_, i.e. a remote machine that has `ansible` installed\n- This is done via ssh using the [paramiko](http://www.paramiko.org/) module\n\nAs you would expect, running in Bastion Mode requires a configuration file containing the ssh connection settings.\n\nTo initialize this configuration file, you can simply run `tasks init`.\n\nFor full usage options, enter in `tasks init --help`.\n\nOnce you've initialized the configuration file, you should see *sftp-config.json* in your workspace.\n\nThis configuration file is fashioned after the [sftp](https://packagecontrol.io/packages/SFTP) plugin for [Sublime Text](https://www.sublimetext.com/)\nand is thus compatible.\n\n<a name=\"special-variables\"></a>\n\n## Special Variables\n\n<a name=\"ansible_playbook_command\"></a>\n\n### ansible_playbook_command\n\nIf you define the playbook variable *ansible_playbook_command*, this will override the underlying ansible-playbook command invocation.\n\nAs an example, suppose I define this variable in the above *Taskfile.yaml*, as follows:\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    ansible_playbook_command: 'python ${HOME}/ansible_2.7.8/ansible-playbook'\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    # ...\n```\nUpon invoking the `tasks` command with the `---echo` flag:\n\n- The temporary inventory is revealed as:<br />\n\n```\nif [[ ($inventory) && ( 'True' == 'True') ]];then\necho -e \"\"\"[web-hosts]\n$(echo ${webhosts} | tr ',' '\\\\n')\n[db-hosts]\n$(echo ${dbhosts} | tr ',' '\\\\n')\n[myhosts:children]\ndeployment-hosts\nweb-hosts\ndb-hosts\n\"\"\" | while read line;do\neval \"echo -e ${line}\" >> \"C:\\Users\\${USERNAME}\\AppData\\Local\\Temp\\ansible-inventory16xdkrjd.tmp.ini\"\ndone\nfi\n```\n\n- And the underlying shell command would be revealed as:<br />\n\n`python ${HOME}/ansible_2.7.8/ansible-playbook -i C:\\Users\\${USERNAME}\\AppData\\Local\\Temp\\ansible-inventory16xdkrjd.tmp.ini -e dbhosts=\"dbhost1\" -e webhosts=\"webhost1\" -e some_value=\"value1\" -e echo=\"True\" Taskfile.yaml`\n\n[Back To Top](#top)\n<a name=\"cli_provider\"></a>\n\n### cli_provider\n\nYou can override the underlying command-line provider in two ways:\n\n- Via the tasks config file (see [examples](#examples))\n- By defining the variable *cli_provider* in the specified Taskfile\n\nAs an example, suppose I define this variable in the above *Taskfile.yaml*, as follows:\n\n```\n- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    cli_provider: bash\n    # ...\n```\n\nUpon invoking the `tasks` command, you will note that the app no longer operates in an **ansible-playbook** mode, but rather as yaml-abstracted bash-script.\n\nThere are three cli-providers built in to the tasks command:\n\n- ansible\n- bash\n- vagrant\n\n<a name=\"__ansible_extra_options\"></a>\n\n### __ansible_extra_options\n\nApart from utilizing the `---raw` flag, you can specify additional options to pass to the underlying `ansible-playbook` subprocess by setting an appropriate value for the **__ansible_extra_options** Environmental variable.\n\n<a name=\"__tasks_file__\"></a>\n\n### __tasks_file__\n\nThe **\\_\\_tasks_file\\_\\_** variable points to the current Taskfile.\n\nIt is available to the underlying subprocess shell.\n\n<a name=\"__parameter_sets__\"></a>\n\n### __parameter_sets__\n\nAs explained [above](#parameter_sets), the **\\_\\_parameter_sets\\_\\_** variable tracks whatever parameter sets you've specified during runtime.\n\nThe variable will hod the values as a space-delimited string, and is available to the underlying subprocess.\n\nYou can use this behavior to detect when a given parameter set has been activated.\n\n[Back To Top](#top)\n<a name=\"parameter-sets\"></a>\n\n## Parameter Sets\n\nWhat if you wanted to operate under multiple contexts?\n\ne.g. You want to be able to interact with Amazon Web Services (AWS) and Google Cloud Platform (GCP)?\n\nSure, you could add paramters to your heart's content, but you'll pollute the output from `--help`\n\nThis is where parameter sets come into play.\n\nThe functionality is simple. Precede the `run` subcommand with the keys you specify as parameter sets in your task manifest.\n\nThese words act as _mini_ subcommands, and _unlock_ the command-line options defined by the corresponding key in the appropriate options section of your manifest.\n\nHere's an example:\n\n```\n    required_parameters:\n      aws:\n       -d|--db-hosts: dbhosts_aws ## Specify AWS DBHost\n        -a|--some-special-aws-flag: aws_flag ## Specify Some Special AWS Option\n      gcp:\n        -d|--db-hosts: dbhosts_gcp ## Specify GCP DBHost\n        -g|--some-special-gcp-flag: gcp_flag ## Specify Some Special GCP Option\n```\n\nNote the _aws_ and _gcp_ keys.\n\nYou'll notice that the output of `--help` will change depending on what parameter sets you specify, e.g.\n\n`tasks aws run --help`\n\n`tasks gcp run --help`\n\n`tasks aws gcp run --help`\n\nAnother thing to note is that the parameter set you specify is tracked during runtime as the variable _parameter_sets_\n\nYou can use this behavior to detect when a given parameter set has been activated.\n\n[Back To Top](#top)\n<a name=\"mutually-exclusive-options\"></a>\n\n## Mutually Exclusive Options\n\nTaken from [Mutually exclusive option groups in python Click - Stack Overflow](https://stackoverflow.com/questions/37310718/mutually-exclusive-option-groups-in-python-click).\n\nSuppose you want a set of options such that:\n- You want to accept one option but only if another, related option has not been specified\n\nYou can accomplish this by defining your options with an ' or ' format, as with:\n\n```\n-a|--auth-token: auth_token ## Specify auth token\n-u|--username or -a|--auth-token: username ## Specify Username\n-p|--password or -a|--auth-token: password ## Specify Password\n```\n\nIn the above configuration, calling the options for \nusername and password will render the option for auth token _optional_, \nthat is, you don't need to specify the auth token if you've specified \nthe username and password.\n\nA sample is provided in the [examples](examples) directory.\n\n<a name=\"option-tags\"></a>\n## Option Tags\n\nOption tags provide an elegant mechanism for further \ncustomizing the behavior of your command-line options.\n\nThe logic treats anything after the first two pipe ('|') characters as option tags.\n\nSo far, four option tags are honored, and these are:\n- prompt\n- sprompt\n- choice\n- env\n\nNote that these can be combined.\n\n<a name=\"prompt-options\"></a>\n### Prompt option tag\n\nTaken from [Options \u2014 Click Documentation (7.x)](https://click.palletsprojects.com/en/7.x/options/#prompting)\n\nSuppose you want a set of *optional* options such that:\n- You will be prompted if said option is not provided a value\n\nYou can accomplish this by defining your options with a 'prompt' option tag, as with:\n```\noptional_parameters:\n  -u|--username|prompt: username ## Specify password\n  -p|--password|sprompt: password ## Specify password\n```\n\nIn the above configuration, *not* calling the options for \nusername and password invoke a prompt\n\nThere are two types of option tags related to prompting:\n- prompt\n- sprompt\n\nThe latter will hide the input, and so is best used for accepting sensitive input, such as passwords.\n\nA sample is provided in the [examples](examples) directory.\n\n<a name=\"choice-options\"></a>\n### Choice option tag\n\nTaken from [Options \u2014 Click Documentation (7.x)](https://click.palletsprojects.com/en/7.x/options/#choice-options)\n\nSuppose you want a set of options such that:\n- The value you provide for such an option must come from a list of pre-defined values.\n\nYou can accomplish this by defining your options with a 'choice' option tag, as with:\n\n```\n-s|--selection|choice: selection ## Specify a selection\n  - choice1\n  - choice2\n  - choice3\n```\n\nIn the above configuration, providing a value for _selection_\nwill limit you to the values defined in the option list.\n\nA sample is provided in the [examples](examples) directory.\n\n\n<a name=\"combining-option-tags\"></a>\n### Combining option tags\n\nSuppose you want a set of options that combine some or all of the behavior described above.\n\nYou can accomplish this by defining your options with a multiple tags, as with:\n\n```\n-u|--username|env|prompt: username ## Specify password\n-p|--password|env|sprompt: password ## Specify password\n```\n\nNote that the _choice_ option tag only works with values that are a list type, \nso you can't do something like:\n\n```\n-u|--username|env|choice: username ## Specify password\n-p|--password|env|choice: password ## Specify password\n```\n\n<a name=\"simple-templating\"></a>\n\n## Simple Templating\n\nAs of version 1.1.5, simple templating is available to the following objects:\n\n- Help messages\n- Examples\n- Options\n- Options values\n\nWhat this means is that we expose a limited set of internal variables to the above.\n\nAs an example:\n\n```\n      examples:\n        - example1: |\n            tasks -f $tf_path --foo foo --bar bar\n        - example2: |\n            tasks -f $tf_path --foo foo --baz baz\n```            \n\nIn the above strings, `$tf_path` will expand to the internal variable tf_path,\nwhich holds the relative path to the current tasks file.\n\nBelow is a list of available variables for your convenience:\n\n- cli_args\n- cli_args_short\n- parameter_sets\n- tf_path\n\n```\nVariable        | Description\n-------------   | -------------\nexe_path        | The absolute path to the tasks executable\ncli_args        | The current command-line invocation\ncli_args_short  | The current command-line invocation, minus the executable\nparameter_sets  | The parameter sets you have invoked\nsys_platform    | The OS Platform as detected by Python\ntf_path         | The relative path to the specified Taskfile\n```\n\n[Back To Top](#top)\n<a name=\"single-executable-releases\"></a>\n\n## Single-Executable Releases\n\nThis script also ships as a zipapp executable (similar to a windows .exe).\n\nHead over to the [releases page](https://github.com/berttejeda/ansible-taskrunner/releases) for release downloads.\n\nYou can also build your own single-executable zipapp, as follows:\n\n1. Make sure you have the [make-zipapp](https://github.com/berttejeda/make-zipapp) executable in your path\n1. Invoking build tasks\n  - Build zipapp: `python ansible_taskrunner/cli.py -f Makefile.yaml run ---make zipapp`\n  - Build zipapp and push to remote host (via scp): `python ansible_taskrunner/cli.py -f Makefile.yaml run ---make zipapp -bp someserver.somedomain.local:/home/${USER-USERNAME}`\n\nRead More on zipapps: [zipapp \u2014 Manage executable Python zip archives \u2014 Python 3.7.4rc2 documentation](https://docs.python.org/3/library/zipapp.html)\n\n<a name=\"unit-testing\"></a>\n\n## Unit Testing\n\nTo run all tests, simply call the test script, as with:\n\n`python tests/test_ansible_taskrunner.py`\n\n# TODO - Add more tests!\n\n[Back To Top](#top)\n<a name=\"license-and-credits\"></a>\n\n# License and Credits\n\nThis project adopts the the MIT distribution License.\n\n[Releases](https://github.com/berttejeda/ansible-taskrunner/releases) come bundled with the following opensource python packages:\n\n- [click](https://github.com/pallets/click), licensed under BSD-3-Clause\n- [pyYaml](https://github.com/yaml/pyyaml), licensed under MIT\n\nLastly, this package was created with Cookiecutter and the `audreyr/cookiecutter-pypackage` project template.\n\n- Cookiecutter: https://github.com/audreyr/cookiecutter\n- audreyr/cookiecutter-pypackage: https://github.com/audreyr/cookiecutter-pypackage\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/berttejeda/ansible_taskrunner", "keywords": "ansible,playbook,wrapper,bash,python,click,task-runner,subprocess,yaml,cli,options", "license": "", "maintainer": "", "maintainer_email": "", "name": "ansible-taskrunner", "package_url": "https://pypi.org/project/ansible-taskrunner/", "platform": "", "project_url": "https://pypi.org/project/ansible-taskrunner/", "project_urls": {"Homepage": "https://github.com/berttejeda/ansible_taskrunner"}, "release_url": "https://pypi.org/project/ansible-taskrunner/1.4.0/", "requires_dist": ["click (==7.0)", "colorama (==0.4.3)", "PyYAML (==4.2b1)", "paramiko (==2.6.0) ; sys_platform == \"win32\" or sys_platform == \"cygwin\"", "pytest ; extra == 'tests'", "pytest-cov ; extra == 'tests'", "coveralls ; extra == 'tests'", "flake8 ; extra == 'tests'", "mypy ; extra == 'tests'"], "requires_python": ">=2.7", "summary": "ansible-playbook wrapper with YAML-abstracted python click cli options", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Table of Contents</strong>  <em>generated with <a href=\"https://github.com/thlorenz/doctoc\" rel=\"nofollow\">DocToc</a></em></p>\n<ul>\n<li><a href=\"#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#tldr\" rel=\"nofollow\">TL;DR</a></li>\n<li><a href=\"#use-case-and-example\" rel=\"nofollow\">Use case and example</a>\n<ul>\n<li><a href=\"#given\" rel=\"nofollow\">Given</a></li>\n<li><a href=\"#task\" rel=\"nofollow\">Task</a></li>\n<li><a href=\"#investigation\" rel=\"nofollow\">Investigation</a></li>\n<li><a href=\"#assessment\" rel=\"nofollow\">Assessment</a></li>\n<li><a href=\"#proposed-solution\" rel=\"nofollow\">Proposed Solution</a></li>\n</ul>\n</li>\n<li><a href=\"#technical-details\" rel=\"nofollow\">Technical Details</a>\n<ul>\n<li><a href=\"#add-hosts-designation\" rel=\"nofollow\">Add hosts designation</a></li>\n<li><a href=\"#add-vars-key\" rel=\"nofollow\">Add vars key</a></li>\n<li><a href=\"#populate-the-vars-block---defaults\" rel=\"nofollow\">Populate the vars block - defaults</a></li>\n<li><a href=\"#populate-the-vars-block---cli-options\" rel=\"nofollow\">Populate the vars block - cli options</a>\n<ul>\n<li><a href=\"#populate-the-vars-block---cli-options---mapped-variables\" rel=\"nofollow\">Populate the vars block - cli options - mapped variables</a></li>\n</ul>\n</li>\n<li><a href=\"#populate-the-vars-block---helpmessage\" rel=\"nofollow\">Populate the vars block - help/message</a></li>\n<li><a href=\"#populate-the-vars-block---inventory\" rel=\"nofollow\">Populate the vars block - inventory</a></li>\n<li><a href=\"#populate-the-vars-block---embedded-make-style-functions\" rel=\"nofollow\">Populate the vars block - embedded make-style functions</a>\n<ul>\n<li><a href=\"#about-make-style-functions\" rel=\"nofollow\">About make-style functions</a>\n<ul>\n<li><a href=\"#bash-example\" rel=\"nofollow\">Bash example:</a></li>\n<li><a href=\"#python-example\" rel=\"nofollow\">Python example:</a></li>\n<li><a href=\"#ruby-example\" rel=\"nofollow\">Ruby example:</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#add-tasks\" rel=\"nofollow\">Add tasks</a></li>\n</ul>\n</li>\n<li><a href=\"#usage-examples\" rel=\"nofollow\">Usage Examples</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#more-examples\" rel=\"nofollow\">More Examples</a></li>\n</ul>\n</li>\n<li><a href=\"#appendix\" rel=\"nofollow\">Appendix</a>\n<ul>\n<li><a href=\"#bastion-mode\" rel=\"nofollow\">Bastion Mode</a></li>\n<li><a href=\"#special-variables\" rel=\"nofollow\">Special Variables</a>\n<ul>\n<li><a href=\"#ansible_playbook_command\" rel=\"nofollow\">ansible_playbook_command</a></li>\n<li><a href=\"#cli_provider\" rel=\"nofollow\">cli_provider</a></li>\n<li><a href=\"#__ansible_extra_options\" rel=\"nofollow\">__ansible_extra_options</a></li>\n<li><a href=\"#__tasks_file__\" rel=\"nofollow\"><strong>tasks_file</strong></a></li>\n<li><a href=\"#__parameter_sets__\" rel=\"nofollow\"><strong>parameter_sets</strong></a></li>\n</ul>\n</li>\n<li><a href=\"#parameter-sets\" rel=\"nofollow\">Parameter Sets</a></li>\n<li><a href=\"#mutually-exclusive-options\" rel=\"nofollow\">Mutually Exclusive Options</a></li>\n<li><a href=\"#option-tags\" rel=\"nofollow\">Option Tags</a>\n<ul>\n<li><a href=\"#prompt-option-tag\" rel=\"nofollow\">Prompt option tag</a></li>\n<li><a href=\"#choice-option-tag\" rel=\"nofollow\">Choice option tag</a></li>\n<li><a href=\"#combining-option-tags\" rel=\"nofollow\">Combining option tags</a></li>\n</ul>\n</li>\n<li><a href=\"#simple-templating\" rel=\"nofollow\">Simple Templating</a></li>\n<li><a href=\"#single-executable-releases\" rel=\"nofollow\">Single-Executable Releases</a></li>\n<li><a href=\"#unit-testing\" rel=\"nofollow\">Unit Testing</a></li>\n</ul>\n</li>\n<li><a href=\"#todo---add-more-tests\" rel=\"nofollow\">TODO - Add more tests!</a></li>\n<li><a href=\"#license-and-credits\" rel=\"nofollow\">License and Credits</a></li>\n</ul>\n\n<p><a></a>\n<a></a></p>\n<h1>Overview</h1>\n<p>This is a task runner that serves as a higher-level automation layer to ansible</p>\n<p>The script expects an ansible-playbook file as the task manifest.</p>\n<p>By default, this is a file named 'Taskfile.yaml' in the current working directory.</p>\n<p>The inspiration for the tool comes from the gnu make command, which operates in similar fashion, i.e.</p>\n<ul>\n<li>A Makefile defines available build steps</li>\n<li>The make command consumes the Makefile at runtime and exposes these steps as command-line options</li>\n</ul>\n<p>If you are running this tool from Windows, please read the section on <a href=\"#bastion_mode\" rel=\"nofollow\">Bastion Mode</a></p>\n<h1>TL;DR</h1>\n<ul>\n<li>Ever wanted to add custom switches to the <code>ansible-playbook</code> command? Something like this:<br>\n<code>ansible-playbook -i myinventory.txt -d dbhost1 -w webhost1 -t value1 myplaybook.yaml</code></li>\n<li>Well, you can through the use of an ansible-playbook wrapper</li>\n<li>That's where <code>tasks</code> comes in:<br>\n<code>tasks run -d dbhost1 -w webhost1 -t value1</code><br>\ntranslates to:<br>\n<code>ansible-playbook -i /tmp/ansible-inventory16xdkrjd.tmp.ini -e dbhosts=\"dbhost1\" -e webhosts=\"webhost1\" -e some_value=\"value1\" -e echo=\"True\" Taskfile.yaml</code></li>\n</ul>\n<ol>\n<li>Jump down to the <a href=\"#usage-examples\" rel=\"nofollow\">usage examples</a> to see this in action</li>\n<li>Review the <a href=\"#installation\" rel=\"nofollow\">installation</a> instructions if you want to test-drive it</li>\n<li>Read on if you want to dig deeper into the tool</li>\n</ol>\n<p><a></a></p>\n<h1>Use case and example</h1>\n<p><a></a></p>\n<h2>Given</h2>\n<ol>\n<li>An enterprise-grade application named contoso-app</li>\n<li>Multiple teams:</li>\n</ol>\n<ul>\n<li>Development</li>\n<li>Engineering</li>\n<li>DBA</li>\n<li>Operations</li>\n<li>QA</li>\n</ul>\n<ol>\n<li>Ansible is the primary means of invoking business and operational processes across the numerous environment(s)</li>\n</ol>\n<p><a></a></p>\n<h2>Task</h2>\n<p>You must ensure all teams adopt a standardized approach to running ansible workloads</p>\n<p><a></a></p>\n<h2>Investigation</h2>\n<p>Upon investigating the current approach, you observe the following:</p>\n<ul>\n<li>Users tend to create wrapper scripts that call the ansible-playbook command</li>\n<li>These scripts don't follow any naming convention, as you've noted:\n<ul>\n<li>run.sh</li>\n<li>start.sh</li>\n<li>playbook.sh</li>\n</ul>\n</li>\n<li>These shell scripts have common attributes:\n<ul>\n<li>Dynamically populate ansible-playbook variables via the --extra-vars option</li>\n<li>Dynamically creating ansible inventories</li>\n<li>Performing pre/post-flight tasks</li>\n<li>Providing a command-line interface</li>\n</ul>\n</li>\n</ul>\n<p><a></a></p>\n<h2>Assessment</h2>\n<p>Advantages to the above approach:</p>\n<ul>\n<li>Quick-n-dirty, anyone can get started relatively quickly with writing ansible automation</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Lack of standards:</li>\n<li>Leads to difficulty in collaboration and code refactoring</li>\n<li>Decreased re-usability of codebase\n<ul>\n<li>This design encourages standalone playbooks</li>\n<li>Makes it more difficult to package actions as roles</li>\n<li>Duplicate efforts across codebase</li>\n</ul>\n</li>\n</ul>\n<p><a></a></p>\n<h2>Proposed Solution</h2>\n<p>Employ a pre-execution script that operates above the <code>ansible-playbook</code> command:</p>\n<ul>\n<li>Accomplishes the same as the above, but in more uniform manner</li>\n<li>Support for custom command-line parameters/flags</li>\n<li>Embedded dynamic inventory</li>\n<li>Embedded make-style shell functions</li>\n</ul>\n<p>Advantages to this approach:</p>\n<ul>\n<li>Easier to manage\n<ul>\n<li>If you know YAML and Ansible, you can get started relatively quickly with writing ansible automation</li>\n</ul>\n</li>\n<li>Single executable (/usr/local/bin/tasks)</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Target ansible controller needs to have the <code>tasks</code> command installed</li>\n</ul>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h1>Technical Details</h1>\n<p>As stated in the <a href=\"#overview\" rel=\"nofollow\">overview</a>, this tool functions much like the <em>make</em> command in that it accepts an input file that essentially extends its cli options.</p>\n<p>We create a specially formatted ansible-playbook that serves as a task definition file (by default, Taskfile.yaml).</p>\n<p>This task definition file:</p>\n<ul>\n<li>Acts like a command-line script</li>\n<li>Is a valid ansible playbook (Taskfile.yaml), and can thus be launched with the <code>ansible-playbook</code> command</li>\n<li>Variables available to the pre-execution phase are also available to the ansible execution phase</li>\n</ul>\n<p>In the following sections, we'll be building a sample manifest/playbook named <em>Taskfile.yaml</em></p>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Add hosts designation</h2>\n<details>\n  <summary>Add hosts, gather_facts, etc</summary>\n<p><em>Taskfile.yaml</em></p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n</code></pre>\n</details>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Add vars key</h2>\n<p>Remember, the task runner will ultimately be calling the <code>ansible-playbook</code> command against this very same file, so it must be conformant.</p>\n<details>\n  <summary>We add the 'vars' key, which allows ansible to populate the variables we are defining in this block.</summary>\n<p><em>Taskfile.yaml</em></p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n</code></pre>\n</details>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Populate the vars block - defaults</h2>\n<details>\n  <summary>Let's add some default variables to the playbook:</summary>\n<p><em>Taskfile.yaml</em></p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n</code></pre>\n</details>\n<p>As you can see, we've defined a number of variables holding different values.</p>\n<p>The rules for defining these play out as follows:</p>\n<pre><code>Variable                                     | Ansible Evaluation      | Bash Evaluation\n-------------------------------------------- | ----------------------- | -----------------------\nstr_var: myvalue1                            | String                  | String\nnum_var: 3                                   | Digit                   | String\nmultiline_var: |                             | Multiline String        | String (heredoc)\n  This is a multi-line value\n  of type string\nlist_var:                                    | List Object             | String (heredoc)\n  - item1\n  - item2\ndict_var:                                    | Dictionary Object       | None, Skipped # TODO Add interpolation of yaml dictionary objects for subprocess\n  key1: somevalue1\n  key2: somevalue2\nshell_var: $(grep somestring /some/file.txt) | Depends on output       | String\n</code></pre>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Populate the vars block - cli options</h2>\n<details>\n  <summary>Next, we add the cli interface: </summary>\n<p><em>Taskfile.yaml</em></p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n</code></pre>\n</details>\n<p>Notice the parameter definitions:</p>\n<ul>\n<li>required_parameters</li>\n<li>optional_paramters</li>\n</ul>\n<p>These are yaml list objects that expose optional and required command-line options.</p>\n<p>The syntax for the options is as follows:</p>\n<pre><code>Options                                      | Mapped Variable\n-------------------------------------------- | ----------------------\n-{{ short_option }}|--{{ long_option }}      | {{ mapped_variable }} ## {{ Help Text }}\n-{{ switch }}                                | {{ mapped_variable }} (boolean) ## {{ Help Text }}\n--{{ switch }}                               | {{ mapped_variable }} (boolean) ## {{ Help Text }}\n</code></pre>\n<p>Essentially, any option with a pipe '|' character in its name is evaluated as a click option, which means you must provide an argument to said option.</p>\n<p>Anything else is treated as a switch, which evaluates to <code>True</code> if specified, and undefined otherwise (unless you provide a default in your <code>vars</code> declaration).</p>\n<p>Also, an option's help text can be included alongside the mapped variable, and must conform to the following syntax: <code>## {{ HELP TEXT }}</code></p>\n<p>More Examples:</p>\n<pre><code>Options       | Mapped Variable\n------------- | -------------\n-f|--foo      | some_foo_variable ## This is some foo option\n-b|--bar      | some_bar_variable ## This is some bar option\n-F|--foo-bar  | some_other_variable ## This is some foo bar option\n-a|--all-else | [remaining_args] (behaves like click's variadic arguments (nargs=*)) ## This option will 'eat' up all remaining commandline arguments\n--some-option | some_switch (behaves like click switches, holds the value of True if specified) ## This is some boolean option\n</code></pre>\n<p>More flexibility can be achieved through the use of <a href=\"#parameter-sets\" rel=\"nofollow\">parameter sets</a>.</p>\n<p>See the <a href=\"#parameter_sets\" rel=\"nofollow\">appendix</a> for more information.</p>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h3>Populate the vars block - cli options - mapped variables</h3>\n<p>It's important to note that the above mapped variables can be used during runtime, i.e. referenced in any defined functions, embedded inventory logic, etc.</p>\n<p>Consider the <code>-f|-foo</code> option above.</p>\n<p>Whatever argument you pass to this option becomes the value for the mapped variable.</p>\n<p>Again, this variable is made available to the underlying subprocess call, and within the ansible playbook itself.</p>\n<p><a></a></p>\n<h2>Populate the vars block - help/message</h2>\n<details>\n  <summary>Next, we add the help/message section</summary>\n<p><em>Taskfile.yaml</em></p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n    help:\n      message: |\n        Do something against db and web hosts\n      epilog: |\n        This line will be displayed at the end of the help text message\n      examples:\n        - example1: |\n            Usage example 1\n        - example2: |\n            Usage example 2\n</code></pre>\n</details>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Populate the vars block - inventory</h2>\n<details>\n  <summary>Add the dynamic inventory section</summary>\n<p><em>Taskfile.yaml</em></p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n    help:\n      message: |\n        Do something against db and web hosts\n      epilog: |\n        This line will be displayed at the end of the help text message\n      examples:\n        - example1: |\n            Usage example 1\n        - example2: |\n            Usage example 2\n    inventory: |\n      [web-hosts]\n      $(echo ${webhosts} | tr ',' '\\\\n')\n      [db-hosts]\n      $(echo ${dbhosts} | tr ',' '\\\\n')\n      [myhosts:children]\n      deployment-hosts\n      web-hosts\n      db-hosts\n</code></pre>\n</details>\n<p><a></a></p>\n<h2>Populate the vars block - embedded make-style functions</h2>\n<details>\n  <summary>Add embedded make-style functions: </summary>\n<p><em>Taskfile.yaml</em></p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n    help:\n      message: |\n        Do something against db and web hosts\n      epilog: |\n        This line will be displayed at the end of the help text message\n      examples:\n        - example1: |\n            Usage example 1\n        - example2: |\n            Usage example 2\n    inventory: |\n      [web-hosts]\n      $(echo ${webhosts} | tr ',' '\\\\n')\n      [db-hosts]\n      $(echo ${dbhosts} | tr ',' '\\\\n')\n      [myhosts:children]\n      deployment-hosts\n      web-hosts\n      db-hosts\n    functions:\n      hello:\n        shell: bash\n        help: Say Hello\n        hidden: false\n        source: |-\n          echo hello\n      preflight_and_run:\n        shell: bash\n        help: Execute Preflight Tasks and Run\n        hidden: false\n        source: |-\n          echo 'Running Preflight Tasks!'\n          tasks run -d dbhost1 -w webhost1 -t value1\n</code></pre>\n</details>\n<p>Notice the two switches <code>-A</code> and <code>-PR</code>.</p>\n<p>These map to corresponding keys in the embedded <code>functions</code> stanza.\nAs such, specifying the options in your <code>tasks</code> invocation\nwill short-circuit normal operation and execute the corresponding functions in the order you called them.</p>\n<p>For usage examples, see the <a href=\"#usage-examples\" rel=\"nofollow\">appendix</a>.</p>\n<p><a></a></p>\n<h3>About make-style functions</h3>\n<p>Let's briefly side-step into make-style functions</p>\n<p>The syntax for nesting these under the <em>functions</em> key is as follows:</p>\n<pre><code>      name_of_function:\n        shell: bash, ruby, or python\n        help: Help Text to Display\n        hidden: false/true\n        source: |-\n          {{ code }}\n</code></pre>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h4>Bash example:</h4>\n<pre><code>      hello:\n        shell: bash\n        help: Hello World in Bash\n        hidden: false\n        source: |-\n          echo 'Hello World!'\n</code></pre>\n<p><a></a></p>\n<h4>Python example:</h4>\n<pre><code>      hello:\n        shell: python\n        help: Hello World in Python\n        hidden: false\n        source: |-\n          print('Hello World!')\n</code></pre>\n<p><a></a></p>\n<h4>Ruby example:</h4>\n<pre><code>      hello:\n        shell: ruby\n        help: Hello World in Ruby\n        hidden: false\n        source: |-\n          puts 'Hello World!'\n</code></pre>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Add tasks</h2>\n<details>\n  <summary>Finally, we add tasks!</summary>\n<p><em>Taskfile.yaml</em></p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    myvar4: |\n      This is a multi-line value\n      of type string\n    myvar5:\n      - mylistvalue1\n      - mylistvalue2\n      - mylistvalue3\n      - mylistvalue4\n    myvar6: $(grep somestring /some/file.txt)\n    required_parameters:\n      -d|--db-hosts: dbhosts ## Specify DB Host targets\n      -w|--web-hosts: webhosts ## Specify Web Host targets\n      -t|--some-parameter: some_value ## Specify some value\n    optional_parameters:\n      -l|--another-parameter: another_value ## Specify another value\n      -A: hello ## Invoke the 'hello' make-style function\n      -PR: preflight_and_run ## Invoke the 'preflight_and_run' make-style function\n      --debug-mode: debug_mode ## Enable debug mode\n    help:\n      message: |\n        Do something against db and web hosts\n      epilog: |\n        This line will be displayed at the end of the help text message\n      examples:\n        - example1: |\n            Usage example 1\n        - example2: |\n            Usage example 2\n    inventory: |\n      [web-hosts]\n      $(echo ${webhosts} | tr ',' '\\\\n')\n      [db-hosts]\n      $(echo ${dbhosts} | tr ',' '\\\\n')\n      [myhosts:children]\n      deployment-hosts\n      web-hosts\n      db-hosts\n    functions:\n      hello:\n        shell: bash\n        help: Say Hello\n        hidden: false\n        source: |-\n          echo hello\n  tasks:\n    - debug: \n        msg: |\n          Hello from Ansible!\n          You specified: {{ some_value }}\n</code></pre>\n</details>\n<p><a></a></p>\n<h1>Usage Examples</h1>\n<p>Quick usage examples:</p>\n<ul>\n<li>Display help for main command<br>\n<code>tasks --help</code></li>\n<li>Display help for the <em>run</em> subcommand<br>\n<code>tasks run --help</code></li>\n<li>Initialize your workspace<br>\n<code>tasks init</code><br></li>\n<li>Run the Taskfile.yaml playbook, passing in additional options to the underlying subprocess<br>\n<code>tasks run -d dbhost1 -w webhost1 -t value1 ---raw -vvv</code><br></li>\n<li>Don't do anything, just echo the underlying shell command<br>\n<code>tasks run -d dbhost1 -w webhost1 -t value1 ---echo</code><br>\nResult should be similar to:<br>\n<code>ansible-playbook -i C:\\Users\\${USERNAME}\\AppData\\Local\\Temp\\ansible-inventory16xdkrjd.tmp.ini -e dbhosts=\"dbhost1\" -e webhosts=\"webhost1\" -e some_value=\"value1\" -e echo=\"True\" Taskfile.yaml</code></li>\n<li>Run the Taskfile.yaml playbook<br>\n<code>tasks run -d dbhost1 -w webhost1 -t value1</code></li>\n<li>Run the embedded function <code>preflight_and_run</code><br>\n<code>tasks run -d dbhost1 -w webhost1 -t value1 -PR</code></li>\n<li>Run the embedded functions <code>hello</code> and <code>preflight_and_run</code><br>\n<code>tasks run -d dbhost1 -w webhost1 -t value1 -A -PR</code></li>\n</ul>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h1>Installation</h1>\n<p>Ansible-taskrunner consists of the <code>tasks</code> binary (for now), and it can be installed in a few ways:</p>\n<ol>\n<li>pip install ansible-taskrunner</li>\n<li>pip install git+<a href=\"https://github.com/berttejeda/ansible-taskrunner.git\" rel=\"nofollow\">https://github.com/berttejeda/ansible-taskrunner.git</a></li>\n<li>Obtaining a <a href=\"#single-executable-releases\" rel=\"nofollow\">release</a></li>\n</ol>\n<p>Note: You'll need to pre-install a python distribution for the Windows MSI release.\nNot yet sure if I am doing something wrong or if that's by design.\nI lean toward the former :|</p>\n<p><a></a></p>\n<h2>More Examples</h2>\n<p>Review the <a href=\"examples\" rel=\"nofollow\">examples</a> directory for more hands-on usage samples.</p>\n<p><a></a></p>\n<h1>Appendix</h1>\n<p><a></a></p>\n<h2>Bastion Mode</h2>\n<p>If you're launching the <code>tasks</code> command from a Windows host, this tool will automatically execute in <em>Bastion Mode</em></p>\n<p>Under Bastion Mode, the <code>tasks</code> command will:</p>\n<ul>\n<li>Execute the <code>ansible-playbook</code> subprocess via a <em>bastion host</em>, i.e. a remote machine that has <code>ansible</code> installed</li>\n<li>This is done via ssh using the <a href=\"http://www.paramiko.org/\" rel=\"nofollow\">paramiko</a> module</li>\n</ul>\n<p>As you would expect, running in Bastion Mode requires a configuration file containing the ssh connection settings.</p>\n<p>To initialize this configuration file, you can simply run <code>tasks init</code>.</p>\n<p>For full usage options, enter in <code>tasks init --help</code>.</p>\n<p>Once you've initialized the configuration file, you should see <em>sftp-config.json</em> in your workspace.</p>\n<p>This configuration file is fashioned after the <a href=\"https://packagecontrol.io/packages/SFTP\" rel=\"nofollow\">sftp</a> plugin for <a href=\"https://www.sublimetext.com/\" rel=\"nofollow\">Sublime Text</a>\nand is thus compatible.</p>\n<p><a></a></p>\n<h2>Special Variables</h2>\n<p><a></a></p>\n<h3>ansible_playbook_command</h3>\n<p>If you define the playbook variable <em>ansible_playbook_command</em>, this will override the underlying ansible-playbook command invocation.</p>\n<p>As an example, suppose I define this variable in the above <em>Taskfile.yaml</em>, as follows:</p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    ansible_playbook_command: 'python ${HOME}/ansible_2.7.8/ansible-playbook'\n    myvar1: myvalue1\n    myvar2: myvalue2\n    myvar3: myvalue3\n    # ...\n</code></pre>\n<p>Upon invoking the <code>tasks</code> command with the <code>---echo</code> flag:</p>\n<ul>\n<li>The temporary inventory is revealed as:<br></li>\n</ul>\n<pre><code>if [[ ($inventory) &amp;&amp; ( 'True' == 'True') ]];then\necho -e \"\"\"[web-hosts]\n$(echo ${webhosts} | tr ',' '\\\\n')\n[db-hosts]\n$(echo ${dbhosts} | tr ',' '\\\\n')\n[myhosts:children]\ndeployment-hosts\nweb-hosts\ndb-hosts\n\"\"\" | while read line;do\neval \"echo -e ${line}\" &gt;&gt; \"C:\\Users\\${USERNAME}\\AppData\\Local\\Temp\\ansible-inventory16xdkrjd.tmp.ini\"\ndone\nfi\n</code></pre>\n<ul>\n<li>And the underlying shell command would be revealed as:<br></li>\n</ul>\n<p><code>python ${HOME}/ansible_2.7.8/ansible-playbook -i C:\\Users\\${USERNAME}\\AppData\\Local\\Temp\\ansible-inventory16xdkrjd.tmp.ini -e dbhosts=\"dbhost1\" -e webhosts=\"webhost1\" -e some_value=\"value1\" -e echo=\"True\" Taskfile.yaml</code></p>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h3>cli_provider</h3>\n<p>You can override the underlying command-line provider in two ways:</p>\n<ul>\n<li>Via the tasks config file (see <a href=\"#examples\" rel=\"nofollow\">examples</a>)</li>\n<li>By defining the variable <em>cli_provider</em> in the specified Taskfile</li>\n</ul>\n<p>As an example, suppose I define this variable in the above <em>Taskfile.yaml</em>, as follows:</p>\n<pre><code>- hosts: myhosts\n  gather_facts: true\n  become: true\n  vars:\n    cli_provider: bash\n    # ...\n</code></pre>\n<p>Upon invoking the <code>tasks</code> command, you will note that the app no longer operates in an <strong>ansible-playbook</strong> mode, but rather as yaml-abstracted bash-script.</p>\n<p>There are three cli-providers built in to the tasks command:</p>\n<ul>\n<li>ansible</li>\n<li>bash</li>\n<li>vagrant</li>\n</ul>\n<p><a></a></p>\n<h3>__ansible_extra_options</h3>\n<p>Apart from utilizing the <code>---raw</code> flag, you can specify additional options to pass to the underlying <code>ansible-playbook</code> subprocess by setting an appropriate value for the <strong>__ansible_extra_options</strong> Environmental variable.</p>\n<p><a></a></p>\n<h3><strong>tasks_file</strong></h3>\n<p>The <strong>__tasks_file__</strong> variable points to the current Taskfile.</p>\n<p>It is available to the underlying subprocess shell.</p>\n<p><a></a></p>\n<h3><strong>parameter_sets</strong></h3>\n<p>As explained <a href=\"#parameter_sets\" rel=\"nofollow\">above</a>, the <strong>__parameter_sets__</strong> variable tracks whatever parameter sets you've specified during runtime.</p>\n<p>The variable will hod the values as a space-delimited string, and is available to the underlying subprocess.</p>\n<p>You can use this behavior to detect when a given parameter set has been activated.</p>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Parameter Sets</h2>\n<p>What if you wanted to operate under multiple contexts?</p>\n<p>e.g. You want to be able to interact with Amazon Web Services (AWS) and Google Cloud Platform (GCP)?</p>\n<p>Sure, you could add paramters to your heart's content, but you'll pollute the output from <code>--help</code></p>\n<p>This is where parameter sets come into play.</p>\n<p>The functionality is simple. Precede the <code>run</code> subcommand with the keys you specify as parameter sets in your task manifest.</p>\n<p>These words act as <em>mini</em> subcommands, and <em>unlock</em> the command-line options defined by the corresponding key in the appropriate options section of your manifest.</p>\n<p>Here's an example:</p>\n<pre><code>    required_parameters:\n      aws:\n       -d|--db-hosts: dbhosts_aws ## Specify AWS DBHost\n        -a|--some-special-aws-flag: aws_flag ## Specify Some Special AWS Option\n      gcp:\n        -d|--db-hosts: dbhosts_gcp ## Specify GCP DBHost\n        -g|--some-special-gcp-flag: gcp_flag ## Specify Some Special GCP Option\n</code></pre>\n<p>Note the <em>aws</em> and <em>gcp</em> keys.</p>\n<p>You'll notice that the output of <code>--help</code> will change depending on what parameter sets you specify, e.g.</p>\n<p><code>tasks aws run --help</code></p>\n<p><code>tasks gcp run --help</code></p>\n<p><code>tasks aws gcp run --help</code></p>\n<p>Another thing to note is that the parameter set you specify is tracked during runtime as the variable <em>parameter_sets</em></p>\n<p>You can use this behavior to detect when a given parameter set has been activated.</p>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Mutually Exclusive Options</h2>\n<p>Taken from <a href=\"https://stackoverflow.com/questions/37310718/mutually-exclusive-option-groups-in-python-click\" rel=\"nofollow\">Mutually exclusive option groups in python Click - Stack Overflow</a>.</p>\n<p>Suppose you want a set of options such that:</p>\n<ul>\n<li>You want to accept one option but only if another, related option has not been specified</li>\n</ul>\n<p>You can accomplish this by defining your options with an ' or ' format, as with:</p>\n<pre><code>-a|--auth-token: auth_token ## Specify auth token\n-u|--username or -a|--auth-token: username ## Specify Username\n-p|--password or -a|--auth-token: password ## Specify Password\n</code></pre>\n<p>In the above configuration, calling the options for\nusername and password will render the option for auth token <em>optional</em>,\nthat is, you don't need to specify the auth token if you've specified\nthe username and password.</p>\n<p>A sample is provided in the <a href=\"examples\" rel=\"nofollow\">examples</a> directory.</p>\n<p><a></a></p>\n<h2>Option Tags</h2>\n<p>Option tags provide an elegant mechanism for further\ncustomizing the behavior of your command-line options.</p>\n<p>The logic treats anything after the first two pipe ('|') characters as option tags.</p>\n<p>So far, four option tags are honored, and these are:</p>\n<ul>\n<li>prompt</li>\n<li>sprompt</li>\n<li>choice</li>\n<li>env</li>\n</ul>\n<p>Note that these can be combined.</p>\n<p><a></a></p>\n<h3>Prompt option tag</h3>\n<p>Taken from <a href=\"https://click.palletsprojects.com/en/7.x/options/#prompting\" rel=\"nofollow\">Options \u2014 Click Documentation (7.x)</a></p>\n<p>Suppose you want a set of <em>optional</em> options such that:</p>\n<ul>\n<li>You will be prompted if said option is not provided a value</li>\n</ul>\n<p>You can accomplish this by defining your options with a 'prompt' option tag, as with:</p>\n<pre><code>optional_parameters:\n  -u|--username|prompt: username ## Specify password\n  -p|--password|sprompt: password ## Specify password\n</code></pre>\n<p>In the above configuration, <em>not</em> calling the options for\nusername and password invoke a prompt</p>\n<p>There are two types of option tags related to prompting:</p>\n<ul>\n<li>prompt</li>\n<li>sprompt</li>\n</ul>\n<p>The latter will hide the input, and so is best used for accepting sensitive input, such as passwords.</p>\n<p>A sample is provided in the <a href=\"examples\" rel=\"nofollow\">examples</a> directory.</p>\n<p><a></a></p>\n<h3>Choice option tag</h3>\n<p>Taken from <a href=\"https://click.palletsprojects.com/en/7.x/options/#choice-options\" rel=\"nofollow\">Options \u2014 Click Documentation (7.x)</a></p>\n<p>Suppose you want a set of options such that:</p>\n<ul>\n<li>The value you provide for such an option must come from a list of pre-defined values.</li>\n</ul>\n<p>You can accomplish this by defining your options with a 'choice' option tag, as with:</p>\n<pre><code>-s|--selection|choice: selection ## Specify a selection\n  - choice1\n  - choice2\n  - choice3\n</code></pre>\n<p>In the above configuration, providing a value for <em>selection</em>\nwill limit you to the values defined in the option list.</p>\n<p>A sample is provided in the <a href=\"examples\" rel=\"nofollow\">examples</a> directory.</p>\n<p><a></a></p>\n<h3>Combining option tags</h3>\n<p>Suppose you want a set of options that combine some or all of the behavior described above.</p>\n<p>You can accomplish this by defining your options with a multiple tags, as with:</p>\n<pre><code>-u|--username|env|prompt: username ## Specify password\n-p|--password|env|sprompt: password ## Specify password\n</code></pre>\n<p>Note that the <em>choice</em> option tag only works with values that are a list type,\nso you can't do something like:</p>\n<pre><code>-u|--username|env|choice: username ## Specify password\n-p|--password|env|choice: password ## Specify password\n</code></pre>\n<p><a></a></p>\n<h2>Simple Templating</h2>\n<p>As of version 1.1.5, simple templating is available to the following objects:</p>\n<ul>\n<li>Help messages</li>\n<li>Examples</li>\n<li>Options</li>\n<li>Options values</li>\n</ul>\n<p>What this means is that we expose a limited set of internal variables to the above.</p>\n<p>As an example:</p>\n<pre><code>      examples:\n        - example1: |\n            tasks -f $tf_path --foo foo --bar bar\n        - example2: |\n            tasks -f $tf_path --foo foo --baz baz\n</code></pre>\n<p>In the above strings, <code>$tf_path</code> will expand to the internal variable tf_path,\nwhich holds the relative path to the current tasks file.</p>\n<p>Below is a list of available variables for your convenience:</p>\n<ul>\n<li>cli_args</li>\n<li>cli_args_short</li>\n<li>parameter_sets</li>\n<li>tf_path</li>\n</ul>\n<pre><code>Variable        | Description\n-------------   | -------------\nexe_path        | The absolute path to the tasks executable\ncli_args        | The current command-line invocation\ncli_args_short  | The current command-line invocation, minus the executable\nparameter_sets  | The parameter sets you have invoked\nsys_platform    | The OS Platform as detected by Python\ntf_path         | The relative path to the specified Taskfile\n</code></pre>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h2>Single-Executable Releases</h2>\n<p>This script also ships as a zipapp executable (similar to a windows .exe).</p>\n<p>Head over to the <a href=\"https://github.com/berttejeda/ansible-taskrunner/releases\" rel=\"nofollow\">releases page</a> for release downloads.</p>\n<p>You can also build your own single-executable zipapp, as follows:</p>\n<ol>\n<li>Make sure you have the <a href=\"https://github.com/berttejeda/make-zipapp\" rel=\"nofollow\">make-zipapp</a> executable in your path</li>\n<li>Invoking build tasks</li>\n</ol>\n<ul>\n<li>Build zipapp: <code>python ansible_taskrunner/cli.py -f Makefile.yaml run ---make zipapp</code></li>\n<li>Build zipapp and push to remote host (via scp): <code>python ansible_taskrunner/cli.py -f Makefile.yaml run ---make zipapp -bp someserver.somedomain.local:/home/${USER-USERNAME}</code></li>\n</ul>\n<p>Read More on zipapps: <a href=\"https://docs.python.org/3/library/zipapp.html\" rel=\"nofollow\">zipapp \u2014 Manage executable Python zip archives \u2014 Python 3.7.4rc2 documentation</a></p>\n<p><a></a></p>\n<h2>Unit Testing</h2>\n<p>To run all tests, simply call the test script, as with:</p>\n<p><code>python tests/test_ansible_taskrunner.py</code></p>\n<h1>TODO - Add more tests!</h1>\n<p><a href=\"#top\" rel=\"nofollow\">Back To Top</a>\n<a></a></p>\n<h1>License and Credits</h1>\n<p>This project adopts the the MIT distribution License.</p>\n<p><a href=\"https://github.com/berttejeda/ansible-taskrunner/releases\" rel=\"nofollow\">Releases</a> come bundled with the following opensource python packages:</p>\n<ul>\n<li><a href=\"https://github.com/pallets/click\" rel=\"nofollow\">click</a>, licensed under BSD-3-Clause</li>\n<li><a href=\"https://github.com/yaml/pyyaml\" rel=\"nofollow\">pyYaml</a>, licensed under MIT</li>\n</ul>\n<p>Lastly, this package was created with Cookiecutter and the <code>audreyr/cookiecutter-pypackage</code> project template.</p>\n<ul>\n<li>Cookiecutter: <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">https://github.com/audreyr/cookiecutter</a></li>\n<li>audreyr/cookiecutter-pypackage: <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">https://github.com/audreyr/cookiecutter-pypackage</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6616366, "releases": {"0.0.18": [{"comment_text": "", "digests": {"md5": "683eaa3638e548cad95475a2f19f5dd7", "sha256": "90b749cc6eb10682e7d1491a1523ebaf0d23e99d4618351df403b12629e315cb"}, "downloads": -1, "filename": "ansible_taskrunner-0.0.18-py3-none-any.whl", "has_sig": false, "md5_digest": "683eaa3638e548cad95475a2f19f5dd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 2.7", "size": 26917, "upload_time": "2019-07-23T21:58:03", "upload_time_iso_8601": "2019-07-23T21:58:03.638215Z", "url": "https://files.pythonhosted.org/packages/e2/de/584f9d6507877047940f726258250d3626843e8d7b7cea9b8835542d1884/ansible_taskrunner-0.0.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "166148f0832bd5ef9aa93ffea62a975b", "sha256": "5a8cbee39cf6fe32bca0208fb072df2e02f6e594369c143065ed2b5a9c6ce0d3"}, "downloads": -1, "filename": "ansible_taskrunner-0.0.18.tar.gz", "has_sig": false, "md5_digest": "166148f0832bd5ef9aa93ffea62a975b", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 2.7", "size": 30997, "upload_time": "2019-07-23T21:58:06", "upload_time_iso_8601": "2019-07-23T21:58:06.736568Z", "url": "https://files.pythonhosted.org/packages/68/4d/3419101992cd1c8a6f9ee0cdc9e0e108634bff16ba194547e94c4da39c3f/ansible_taskrunner-0.0.18.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "9ec9d774cd248cc3c1672fa238974773", "sha256": "6907820a486c2bdbe106314abfbd10acc126f2ca1d9eb1beef1b9e6761b5a397"}, "downloads": -1, "filename": "ansible_taskrunner-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9ec9d774cd248cc3c1672fa238974773", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 2.7", "size": 28080, "upload_time": "2019-08-02T22:31:23", "upload_time_iso_8601": "2019-08-02T22:31:23.871396Z", "url": "https://files.pythonhosted.org/packages/5a/88/3ad198f9789e215de1d8f303ab67833c1c9d6ffd908d62253fdc5e060095/ansible_taskrunner-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c01fbfd18a3223827f243e052d93eb15", "sha256": "445003cc214bc0e1a898224627f7f3eb39e41ecc2cf7f86bcb54d02cd8ed06e1"}, "downloads": -1, "filename": "ansible_taskrunner-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c01fbfd18a3223827f243e052d93eb15", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 2.7", "size": 36756, "upload_time": "2019-08-02T22:31:25", "upload_time_iso_8601": "2019-08-02T22:31:25.183954Z", "url": "https://files.pythonhosted.org/packages/64/2b/dc56b21219ed07cdc384305d8b8e23c8514b6f8f5983ba8f8a84a2cecccb/ansible_taskrunner-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "6f8b2778c3bd51c5f6f69b703ce6698b", "sha256": "519ef88ea5d34b1329c68fcb63cd44d37425ff5a0fe2c87c4d8d77eda79d7cef"}, "downloads": -1, "filename": "ansible_taskrunner-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f8b2778c3bd51c5f6f69b703ce6698b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 2.7", "size": 28808, "upload_time": "2019-09-16T13:14:33", "upload_time_iso_8601": "2019-09-16T13:14:33.367805Z", "url": "https://files.pythonhosted.org/packages/47/18/2393c9bf0d0c22a5ef4ea46194bc34235f2dbbb97bc83d81d089a448a5f0/ansible_taskrunner-1.0.2-py3-none-any.whl", "yanked": false}], "1.1.10": [{"comment_text": "", "digests": {"md5": "8330818f04957d2ee3037de9d3a5cb56", "sha256": "868f42e41647be158e395a3ba30f70fe34f5b6b5fc13aca3894db345d2c4af33"}, "downloads": -1, "filename": "ansible_taskrunner-1.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "8330818f04957d2ee3037de9d3a5cb56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 2.7", "size": 42994, "upload_time": "2019-09-27T21:34:54", "upload_time_iso_8601": "2019-09-27T21:34:54.230930Z", "url": "https://files.pythonhosted.org/packages/04/ba/015038c104b9d99f4bcf7385c4a1faf50756d35028e8bc6717b9830b0462/ansible_taskrunner-1.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5c3e5b177937ba14dc82652580e9cf8", "sha256": "52e1ade7611e4f4ad185bcf3501d3f8ec0888da39a6515d740c4fa845543728a"}, "downloads": -1, "filename": "ansible_taskrunner-1.1.10.tar.gz", "has_sig": false, "md5_digest": "f5c3e5b177937ba14dc82652580e9cf8", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 2.7", "size": 56203, "upload_time": "2019-09-27T21:34:56", "upload_time_iso_8601": "2019-09-27T21:34:56.140309Z", "url": "https://files.pythonhosted.org/packages/9f/03/a086b4a642e8131b37477291f24e90c6f37718e4768f79ef5b5821d64bae/ansible_taskrunner-1.1.10.tar.gz", "yanked": false}], "1.2.10": [{"comment_text": "", "digests": {"md5": "1e0f799b5a014fcdf7e96108d9601fa8", "sha256": "40fa38e8aa80642a08159c35170f05778465aef326a8ec77a312574a731cedb1"}, "downloads": -1, "filename": "ansible_taskrunner-1.2.10-py2-none-any.whl", "has_sig": false, "md5_digest": "1e0f799b5a014fcdf7e96108d9601fa8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 48128, "upload_time": "2019-10-11T18:41:47", "upload_time_iso_8601": "2019-10-11T18:41:47.146779Z", "url": "https://files.pythonhosted.org/packages/9f/b1/b9396e6850a5a8c1f5211bef8ad645546d2f1bad0f27dc4392994400ff2a/ansible_taskrunner-1.2.10-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be06bb80ef739a4b5935afcd596e3c8d", "sha256": "67417dbd78006057eaa2b37ce20862b0481bf0e3e7b8111a57cb083836df56b8"}, "downloads": -1, "filename": "ansible_taskrunner-1.2.10.tar.gz", "has_sig": false, "md5_digest": "be06bb80ef739a4b5935afcd596e3c8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 63872, "upload_time": "2019-10-11T18:41:49", "upload_time_iso_8601": "2019-10-11T18:41:49.170783Z", "url": "https://files.pythonhosted.org/packages/65/64/e79bbaaf1121236693c427a327f4dfa54a13118ecfaa862b74ef9d57f101/ansible_taskrunner-1.2.10.tar.gz", "yanked": false}], "1.2.8": [{"comment_text": "", "digests": {"md5": "50aac9d0b8447c473a3ab95f1e5f7303", "sha256": "f20128fe4c6005aea6e744bf0275b1a40388407ee50a8016678e451124405c54"}, "downloads": -1, "filename": "ansible_taskrunner-1.2.8-py2-none-any.whl", "has_sig": false, "md5_digest": "50aac9d0b8447c473a3ab95f1e5f7303", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 48129, "upload_time": "2019-10-11T17:26:30", "upload_time_iso_8601": "2019-10-11T17:26:30.338055Z", "url": "https://files.pythonhosted.org/packages/1b/8e/026e29f8d3be84e254555d211aea758731972abe8a6d74021f180c0e675d/ansible_taskrunner-1.2.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0a456683767837843ffbf494febfbda", "sha256": "42763f175902a97be6eae67ff787ba6925a49b38ae48ab49e3867ce6ab63e509"}, "downloads": -1, "filename": "ansible_taskrunner-1.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f0a456683767837843ffbf494febfbda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 48087, "upload_time": "2019-10-11T17:26:32", "upload_time_iso_8601": "2019-10-11T17:26:32.013404Z", "url": "https://files.pythonhosted.org/packages/6d/21/2dd4b5f818e57f0b012063cf410ae9678af7b3ed800e2faa01ab15845f43/ansible_taskrunner-1.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b8dc134cbd92496123b6556360a4637", "sha256": "7e8a13faeae0297373a3538fdb70ccbec54adcb242c619a5a704b5e6dcbdd488"}, "downloads": -1, "filename": "ansible_taskrunner-1.2.8.tar.gz", "has_sig": false, "md5_digest": "7b8dc134cbd92496123b6556360a4637", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 63665, "upload_time": "2019-10-11T17:26:33", "upload_time_iso_8601": "2019-10-11T17:26:33.826783Z", "url": "https://files.pythonhosted.org/packages/30/e0/36cac0894d65797a7fb7c6ca168a0876ee30de95e88e9400b2a74146b814/ansible_taskrunner-1.2.8.tar.gz", "yanked": false}], "1.2.9": [{"comment_text": "", "digests": {"md5": "08f861779be75bf7ca385594e6747100", "sha256": "554bd63edff91572d5c9c6172174f2380f0d4394c3e23ff342ccc542798d6b29"}, "downloads": -1, "filename": "ansible_taskrunner-1.2.9-py2-none-any.whl", "has_sig": false, "md5_digest": "08f861779be75bf7ca385594e6747100", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 48131, "upload_time": "2019-10-11T17:51:10", "upload_time_iso_8601": "2019-10-11T17:51:10.526670Z", "url": "https://files.pythonhosted.org/packages/a1/0b/d3ed1ced30fa3a5f9b89d7b198e667e10da3044e00294a9eb36a7583361f/ansible_taskrunner-1.2.9-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16b421fb3b9923283ce8eafc5de0095b", "sha256": "4a6e98e1c54f69be5c9535772d483dda0f32c06f9fe635535210ee713b08fbfd"}, "downloads": -1, "filename": "ansible_taskrunner-1.2.9.tar.gz", "has_sig": false, "md5_digest": "16b421fb3b9923283ce8eafc5de0095b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 63843, "upload_time": "2019-10-11T17:51:13", "upload_time_iso_8601": "2019-10-11T17:51:13.730407Z", "url": "https://files.pythonhosted.org/packages/eb/9c/0df2fb344afac54a4a17bc1433d35e653b9f8fd09fcc43dbd8bc6d0d6ef7/ansible_taskrunner-1.2.9.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "3ff78b62be69e60bdb828fb037c20ff9", "sha256": "17718baa1461cde90ac15c77e41a35355930b5e589780d6151fc386ea4bad198"}, "downloads": -1, "filename": "ansible_taskrunner-1.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "3ff78b62be69e60bdb828fb037c20ff9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 48718, "upload_time": "2019-10-16T16:23:40", "upload_time_iso_8601": "2019-10-16T16:23:40.634777Z", "url": "https://files.pythonhosted.org/packages/8e/8f/663b6a1e491371aa0cbde122d767c6e6b83a375516b8509373a8b831da19/ansible_taskrunner-1.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc109381f27537978f131215f30f457e", "sha256": "e3901408a05ac2c8d9d491b596f9230f842fb186037a9d5b07f571d5e083df90"}, "downloads": -1, "filename": "ansible_taskrunner-1.3.0.tar.gz", "has_sig": false, "md5_digest": "bc109381f27537978f131215f30f457e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 64392, "upload_time": "2019-10-16T16:23:43", "upload_time_iso_8601": "2019-10-16T16:23:43.204781Z", "url": "https://files.pythonhosted.org/packages/68/92/b3212f4e82a3095485caa804f1e1595a9bddddda525a72169dc04877b7bd/ansible_taskrunner-1.3.0.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "7ad936653094ce22389ad1e8552daa82", "sha256": "000fbd33e68d8b002fc4fc5178fb610de90ffac4e304c8e8dcb970a80e8be8e8"}, "downloads": -1, "filename": "ansible_taskrunner-1.3.4-py2-none-any.whl", "has_sig": false, "md5_digest": "7ad936653094ce22389ad1e8552daa82", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 50715, "upload_time": "2019-11-04T15:49:17", "upload_time_iso_8601": "2019-11-04T15:49:17.347307Z", "url": "https://files.pythonhosted.org/packages/e1/eb/ba9a615adbfe5ca2b42b033536acf5a2e1d742a617d5251bd2da97795bc8/ansible_taskrunner-1.3.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1fe363146759be29acdefb2292cc155", "sha256": "01599ffa292a4a0a796e5b4e575f3b96497519c5860776a78817b1cf0bf2be69"}, "downloads": -1, "filename": "ansible_taskrunner-1.3.4.tar.gz", "has_sig": false, "md5_digest": "a1fe363146759be29acdefb2292cc155", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 68634, "upload_time": "2019-11-04T15:49:19", "upload_time_iso_8601": "2019-11-04T15:49:19.019419Z", "url": "https://files.pythonhosted.org/packages/e6/6b/6d3490bd02822bbc9d1f46053d1c76c6382a468495408b87e61405389aac/ansible_taskrunner-1.3.4.tar.gz", "yanked": false}], "1.3.6": [{"comment_text": "", "digests": {"md5": "7e5cb894786f0adbd7ab8b92603c1289", "sha256": "a98b47fc8703653f66ca34152a92329a8c746deda0551293d1fbedfdfb803577"}, "downloads": -1, "filename": "ansible_taskrunner-1.3.6-py2-none-any.whl", "has_sig": false, "md5_digest": "7e5cb894786f0adbd7ab8b92603c1289", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 50925, "upload_time": "2019-11-12T02:43:27", "upload_time_iso_8601": "2019-11-12T02:43:27.045411Z", "url": "https://files.pythonhosted.org/packages/a6/bc/3259eb4e54ae4d9bdb04a699860d3a8dbcd6d10a6fd3fcf9a464bf3ba37e/ansible_taskrunner-1.3.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac841533f7054980e2798da25b3e3853", "sha256": "864b056e936337fd11cc2bc90c40ce2a66a9d0f0b2ae3dc8fd7d561b0c224996"}, "downloads": -1, "filename": "ansible_taskrunner-1.3.6.tar.gz", "has_sig": false, "md5_digest": "ac841533f7054980e2798da25b3e3853", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 69037, "upload_time": "2019-11-12T02:43:29", "upload_time_iso_8601": "2019-11-12T02:43:29.974252Z", "url": "https://files.pythonhosted.org/packages/52/4e/2e8f5219ce7ed45b942fa4f25298e5237ec76ef4cdb5222c7b5ceba6247e/ansible_taskrunner-1.3.6.tar.gz", "yanked": false}], "1.3.9": [{"comment_text": "", "digests": {"md5": "3ad03d305376149e235fabe235a1e59f", "sha256": "d2111a1af5acda0d73ea46de7e5c27278f7349f259d9c70f1bf8d0883cd41870"}, "downloads": -1, "filename": "ansible_taskrunner-1.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "3ad03d305376149e235fabe235a1e59f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 52292, "upload_time": "2020-01-13T19:40:36", "upload_time_iso_8601": "2020-01-13T19:40:36.200601Z", "url": "https://files.pythonhosted.org/packages/1a/7f/9a2de6ee4e9392d60935fa93c52e937f5f71ed0ba357026aa924c4ceeb28/ansible_taskrunner-1.3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3827de5b2ea44b1bf121167bcb3857a8", "sha256": "982ea552f4674dcf583c5eb8076364b2b042979182595e1fbe84b187bdd1a7a3"}, "downloads": -1, "filename": "ansible_taskrunner-1.3.9.tar.gz", "has_sig": false, "md5_digest": "3827de5b2ea44b1bf121167bcb3857a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 72630, "upload_time": "2020-01-13T19:40:37", "upload_time_iso_8601": "2020-01-13T19:40:37.739322Z", "url": "https://files.pythonhosted.org/packages/2f/87/73684b10dcb36792c6a0c2ae48cf3d2af1de014a4e34e6b89b6f67078a31/ansible_taskrunner-1.3.9.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "62cade35966339751a93a82b62319b68", "sha256": "f00d0b9da1e5d228f7eba18cdf86865b857f72300fae349e61275a03bcc73c38"}, "downloads": -1, "filename": "ansible_taskrunner-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62cade35966339751a93a82b62319b68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 52583, "upload_time": "2020-02-12T14:05:45", "upload_time_iso_8601": "2020-02-12T14:05:45.070603Z", "url": "https://files.pythonhosted.org/packages/c8/11/b3c294fdc9b68bf50229d6c54881a999dab094e003faaf1e7d0ef3b4c2ba/ansible_taskrunner-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f108d08b454bac7888ec9c9210a5fc8a", "sha256": "cb38960186fd90817847413f881aa454a7ca9ad633820acd085a7b23da2b01a9"}, "downloads": -1, "filename": "ansible_taskrunner-1.4.0.tar.gz", "has_sig": false, "md5_digest": "f108d08b454bac7888ec9c9210a5fc8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 70444, "upload_time": "2020-02-12T14:05:47", "upload_time_iso_8601": "2020-02-12T14:05:47.378957Z", "url": "https://files.pythonhosted.org/packages/ae/37/56f2000c4e5c0483ecd1cff4704a3ead45c7bd7d478a7d6e17623229e691/ansible_taskrunner-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "62cade35966339751a93a82b62319b68", "sha256": "f00d0b9da1e5d228f7eba18cdf86865b857f72300fae349e61275a03bcc73c38"}, "downloads": -1, "filename": "ansible_taskrunner-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62cade35966339751a93a82b62319b68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 52583, "upload_time": "2020-02-12T14:05:45", "upload_time_iso_8601": "2020-02-12T14:05:45.070603Z", "url": "https://files.pythonhosted.org/packages/c8/11/b3c294fdc9b68bf50229d6c54881a999dab094e003faaf1e7d0ef3b4c2ba/ansible_taskrunner-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f108d08b454bac7888ec9c9210a5fc8a", "sha256": "cb38960186fd90817847413f881aa454a7ca9ad633820acd085a7b23da2b01a9"}, "downloads": -1, "filename": "ansible_taskrunner-1.4.0.tar.gz", "has_sig": false, "md5_digest": "f108d08b454bac7888ec9c9210a5fc8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 70444, "upload_time": "2020-02-12T14:05:47", "upload_time_iso_8601": "2020-02-12T14:05:47.378957Z", "url": "https://files.pythonhosted.org/packages/ae/37/56f2000c4e5c0483ecd1cff4704a3ead45c7bd7d478a7d6e17623229e691/ansible_taskrunner-1.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:03 2020"}