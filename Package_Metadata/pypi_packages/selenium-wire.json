{"info": {"author": "Will Keeling", "author_email": "will@zifferent.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Selenium Wire\n=============\n\nSelenium Wire extends Selenium's Python bindings to give your tests access to the underlying requests made by the browser. It is a lightweight library designed for ease of use with minimal external dependencies.\n\nWith Selenium Wire, you author your tests in just the same way as you do with Selenium, but you get an additional user-friendly API for accessing things such as the request/response headers, status code and body content.\n\n.. image:: https://travis-ci.org/wkeeling/selenium-wire.svg?branch=master\n        :target: https://travis-ci.org/wkeeling/selenium-wire\n\n.. image:: https://codecov.io/gh/wkeeling/selenium-wire/branch/master/graph/badge.svg\n        :target: https://codecov.io/gh/wkeeling/selenium-wire\n\n.. image:: https://img.shields.io/badge/python-3.4%2C%203.5%2C%203.6%2C%203.7-blue.svg\n        :target: https://pypi.python.org/pypi/selenium-wire\n\n.. image:: https://img.shields.io/pypi/v/selenium-wire.svg\n        :target: https://pypi.python.org/pypi/selenium-wire\n\n.. image:: https://img.shields.io/pypi/l/selenium-wire.svg\n        :target: https://pypi.python.org/pypi/selenium-wire\n\nSimple Example\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from seleniumwire import webdriver  # Import from seleniumwire\n\n    # Create a new instance of the Firefox driver\n    driver = webdriver.Firefox()\n\n    # Go to the Google home page\n    driver.get('https://www.google.com')\n\n    # Access requests via the `requests` attribute\n    for request in driver.requests:\n        if request.response:\n            print(\n                request.path,\n                request.response.status_code,\n                request.response.headers['Content-Type']\n            )\n\nPrints:\n\n.. code:: bash\n\n    https://www.google.com/ 200 text/html; charset=UTF-8\n    https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png 200 image/png\n    https://consent.google.com/status?continue=https://www.google.com&pc=s&timestamp=1531511954&gl=GB 204 text/html; charset=utf-8\n    https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png 200 image/png\n    https://ssl.gstatic.com/gb/images/i2_2ec824b0.png 200 image/png\n    https://www.google.com/gen_204?s=webaft&t=aft&atyp=csi&ei=kgRJW7DBONKTlwTK77wQ&rt=wsrt.366,aft.58,prt.58 204 text/html; charset=UTF-8\n    ...\n\nFeatures\n~~~~~~~~\n\n* Straightforward, user-friendly API\n* All HTTP/HTTPS requests captured\n* Access to request/response bodies\n* Modify responses\n* Header injection/filtering\n* URL rewriting\n* Proxy server support\n\n\nCompatibilty\n~~~~~~~~~~~~\n\n* Python 3.4+\n* Selenium 3.4.0+\n* Firefox, Chrome, Safari and Edge are supported\n\nTable of Contents\n~~~~~~~~~~~~~~~~~\n\n- `Installation`_\n\n  * `OpenSSL`_\n  * `Browser Setup`_\n\n- `Usage`_\n\n  * `Creating the Webdriver`_\n  * `Using Self-Signed Certificates`_\n  * `Accessing Requests`_\n  * `Waiting for a Request`_\n  * `Clearing Requests`_\n  * `Scoping Request Capture`_\n\n- `Request Attributes`_\n\n- `Response Attributes`_\n\n- `Modifying Requests`_\n\n  * `Modifying Headers`_\n  * `Rewriting URLs`_\n\n- `Proxies`_\n\n- `Other Options`_\n\n- `Limitations`_\n\n- `License`_\n\nInstallation\n~~~~~~~~~~~~\n\nInstall using pip:\n\n.. code:: bash\n\n    pip install selenium-wire\n\nOpenSSL\n-------\n\nSelenium Wire requires OpenSSL for capturing HTTPS requests.\n\n**Linux**\n\n.. code:: bash\n\n    # For apt based Linux systems\n    sudo apt install openssl\n\n    # For RPM based Linux systems\n    sudo yum install openssl\n\n**MacOS**\n\n.. code:: bash\n\n    brew install openssl\n\n**Windows**\n\nNo installation is required. OpenSSL for Windows is bundled with Selenium Wire.\n\n\nBrowser Setup\n-------------\n\n**Firefox and Chrome**\n\nNo specific configuration should be necessary - everything should just work.\n\nYou will however need to ensure that you have downloaded the `Gecko driver`_ and `Chrome driver`_ for Firefox and Chrome to be remotely controlled - the same as if you were using Selenium directly. Once downloaded, these executables should be placed somewhere on the system path.\n\n.. _`Gecko driver`: https://github.com/mozilla/geckodriver/\n\n.. _`Chrome driver`: https://sites.google.com/a/chromium.org/chromedriver/\n\n**Safari**\n\nThere are a few `manual steps`_ that have to be carried out before you can use Safari with Selenium Wire.\n\n.. _`manual steps`: ./safari_setup.rst\n\n**Edge**\n\nLike Safari, Microsoft Edge requires some `manual configuration`_ before it can be used with Selenium Wire.\n\n.. _`manual configuration`: ./edge_setup.rst\n\nUsage\n~~~~~\n\nEnsure that you import ``webdriver`` from the ``seleniumwire`` package:\n\n.. code:: python\n\n    from seleniumwire import webdriver\n\n* For sub-packages of ``webdriver``, you should continue to import these directly from ``selenium``. For example, to import ``WebDriverWait``:\n\n.. code:: python\n\n    # Sub-packages of webdriver must still be imported from `selenium` itself\n    from selenium.webdriver.support.ui import WebDriverWait\n\nCreating the Webdriver\n----------------------\n\nFor Firefox and Chrome, you don't need to do anything special. Just instantiate the webdriver as you would normally, passing in Selenium specific options if you have any. Selenium Wire also has it's `own options`_ that can be passed in the ``seleniumwire_options`` attribute.\n\n.. _`own options`: #other-options\n\n**Firefox**\n\n.. code:: python\n\n    driver = webdriver.Firefox()\n\n**Chrome**\n\n.. code:: python\n\n    driver = webdriver.Chrome()\n\n**Safari**\n\nFor Safari, you need to tell Selenium Wire the port number you selected when you configured the browser in `Browser Setup`_.\nFor example, if you chose port 12345, then you would pass it in the ``seleniumwire_options`` like this:\n\n.. code:: python\n\n    driver = webdriver.Safari(seleniumwire_options={'port': 12345})\n\n**Edge**\n\nFor Edge, you need to tell Selenium Wire the port number you selected when you configured the browser in `Browser Setup`_.\nFor example, if you chose port 12345, then you would pass it in the ``seleniumwire_options`` like this:\n\n.. code:: python\n\n    driver = webdriver.Edge(seleniumwire_options={'port': 12345})\n\nUsing Self-Signed Certificates\n------------------------------\n\nIf the site you are testing uses a self-signed certificate then you must set the ``verify_ssl`` option to ``False`` in the ``seleniumwire_options``:\n\n.. code:: python\n\n    driver = webdriver.Firefox(seleniumwire_options={'verify_ssl': False})\n\nThis this will need to be done regardless of the type of browser you are using.\n\nAccessing Requests\n------------------\n\nSelenium Wire captures all HTTP/HTTPS traffic made by the browser during a test.\n\n**driver.requests**\n\nYou can retrieve all requests with the ``driver.requests`` attribute. The requests are just a list and can be iterated (like in the opening example) and indexed:\n\n.. code:: python\n\n    first_request = driver.requests[0]\n\n**driver.last_request**\n\nThe list of requests held by ``driver.requests`` is in chronological order. If you want to access the most recent request, use the dedicated ``driver.last_request`` attribute:\n\n.. code:: python\n\n    last_request = driver.last_request\n\nThis is more efficient than using ``driver.requests[-1]``.\n\nWaiting for a Request\n---------------------\n\nWhen you ask for captured requests using ``driver.requests`` or ``driver.last_request`` you have to be sure that the requests you're interested in have actually been captured. If you ask too soon, then you may find that a request is not yet present, or is present but has no associated response.\n\n**driver.wait_for_request()**\n\nThis method will wait for a previous request with a specific path to complete before allowing the test to continue. The path can be a unique part of the URL or the full URL itself.\n\nFor example, to wait for an AJAX request to return after a button is clicked:\n\n.. code:: python\n\n    # Click a button that triggers a background request to https://server/api/products/12345/\n    button_element.click()\n\n    # Wait for the request/response to complete\n    request = driver.wait_for_request('/api/products/12345/')\n\n* Note that ``driver.wait_for_request()`` doesn't *make* a request, it just *waits* for a previous request made by some other action.\n\nThe ``wait_for_request()`` method will return the first *fully completed* request it finds that matches the supplied path. Fully completed meaning that the response must have returned. The method will wait up to 10 seconds by default but you can vary that with the ``timeout`` argument:\n\n.. code:: python\n\n    # Wait up to 30 seconds for a request/response\n    request = driver.wait_for_request('/api/products/12345/', timeout=30)\n\nIf a fully completed request is not seen within the timeout period a ``TimeoutException`` is raised.\n\nClearing Requests\n-----------------\n\nTo clear previously captured requests, use ``del``:\n\n.. code:: python\n\n    del driver.requests\n\nScoping Request Capture\n-----------------------\n\nBy default, Selenium Wire will capture all requests the browser makes during a test. You may want to restrict this to particular URLs - e.g. for performance reasons.\n\nTo restrict request capture use the ``scopes`` attribute. This accepts a list of regular expressions that will match URLs to be captured.\n\n.. code:: python\n\n    driver.scopes = [\n        '.*stackoverflow.*',\n        '.*github.*'\n    ]\n\n    # Only request URLs containing \"stackoverflow\" or \"github\" will now be captured...\n\nRequest Attributes\n~~~~~~~~~~~~~~~~~~\n\nRequests have the following attributes.\n\n``method``\n    The HTTP method type such as ``GET`` or ``POST``.\n\n``path``\n    The request path.\n\n``headers``\n    A case-insensitive dictionary of request headers. Asking for ``request.headers['user-agent']`` will return the value of the ``User-Agent`` header.\n\n``body``\n    The request body as ``bytes``. If the request has no body the value of ``body`` will be ``None``.\n\n``response``\n   The response associated with the request. This will be ``None`` if the request has no response.\n\nResponse Attributes\n~~~~~~~~~~~~~~~~~~~\n\nThe response can be retrieved from a request via the ``response`` attribute. A response may be ``None`` if it was never captured, which may happen if you asked for it before it returned or if the server timed out etc. A response has the following attributes.\n\n``status_code``\n    The status code of the response such as ``200`` or ``404``.\n\n``reason``\n    The reason phrase such as ``OK`` or ``Not Found``.\n\n``headers``\n     A case-insensitive dictionary of response headers. Asking for ``response.headers['content-length']`` will return the value of the ``Content-Length`` header.\n\n``body``\n    The response body as ``bytes``. If the response has no body the value of ``body`` will be ``None``.\n\n\nModifying Requests\n~~~~~~~~~~~~~~~~~~\n\nSelenium Wire allows you to modify the request headers the browser sends as well as rewrite any part of the request URL.\n\nModifying Headers\n-----------------\n\nThe ``driver.header_overrides`` attribute is used for modifying headers.\n\nTo add one or more new headers to a request, create a dictionary containing those headers and set it as the value of ``header_overrides``.\n\n.. code:: python\n\n    driver.header_overrides = {\n        'New-Header1': 'Some Value',\n        'New-Header2': 'Some Value'\n    }\n\n    # All subsequent requests will now contain New-Header1 and New-Header2\n\nIf a header already exists in a request it will be overwritten by the one in the dictionary. Header names are case-insensitive.\n\nTo filter out one or more headers from a request, set the value of those headers to ``None``.\n\n.. code:: python\n\n    driver.header_overrides = {\n        'Existing-Header1': None,\n        'Existing-Header2': None\n    }\n\n    # All subsequent requests will now *not* contain Existing-Header1 or Existing-Header2\n\nTo clear the header overrides that you have set, use ``del``:\n\n.. code:: python\n\n    del driver.header_overrides\n\nHeader overrides can also be applied on a per-URL basis, in the following format:\n\n.. code:: python\n\n    driver.header_overrides = [\n        ('.*prod1.server.com.*', {'User-Agent': 'Test_User_Agent_String',\n                                  'New-Header': 'HeaderValue'}),\n        ('.*prod2.server.com.*', {'User-Agent2': 'Test_User_Agent_String2',\n                                  'New-Header2': 'HeaderValue'})\n    ]\n\n    # Only requests to prod1.server.com or prod2.server.com will have their headers modified\n\n\nRewriting URLs\n--------------\n\nThe ``driver.rewrite_rules`` attribute is used for rewriting request URLs.\n\nEach rewrite rule should be specified as a 2-tuple or list, the first element containing the URL pattern to match and the second element the replacement. One or more rewrite rules can be supplied.\n\n.. code:: python\n\n    driver.rewrite_rules = [\n        (r'(https?://)prod1.server.com(.*)', r'\\1prod2.server.com\\2'),\n    ]\n\n    # All subsequent requests that match http://prod1.server.com... or https://prod1.server.com...\n    # will be rewritten to http://prod2.server.com... or https://prod2.server.com...\n\nThe match and replacement syntax is just Python's regex syntax. See `re.sub`_ for more information.\n\n.. _`re.sub`: https://docs.python.org/3/library/re.html#re.sub\n\nTo clear the rewrite rules that you have set, use ``del``:\n\n.. code:: python\n\n    del driver.rewrite_rules\n\nProxies\n~~~~~~~\n\nSelenium Wire captures requests by using its own proxy server under the covers. This means you cannot use the webdriver's ``DesiredCapabilities`` API to configure your own proxy, like you might when using Selenium directly.\n\nIf the site you are testing sits behind a proxy server you can tell Selenium Wire about that proxy server in the options you pass to the webdriver instance. The configuration takes the following format:\n\n.. code:: python\n\n    options = {\n        'proxy': {\n            'http': 'http://username:password@host:port',\n            'https': 'https://username:password@host:port',\n            'no_proxy': 'localhost,127.0.0.1,dev_server:8080'\n        }\n    }\n    driver = webdriver.Firefox(seleniumwire_options=options)\n\nThe username and password are optional and can be specified when a proxy server requires authentication. Basic authentication is assumed by default.\n\nThe proxy configuration can also be loaded through environment variables called ``http``, ``https`` and ``no_proxy``. The proxy configuration in the options passed to the webdriver instance will take precedence over environment variable configuration if both are specified.\n\n**Proxy authentication other than Basic**\n\nBasic authentication is used by default when supplying a username and password in the URL. If you are connecting to an upstream proxy server that uses an authentication scheme different to Basic, then you can supply the full value for the ``Proxy-Authorization`` header using the ``custom_authorization`` option. For example, if your proxy used the Bearer scheme:\n\n.. code:: python\n\n    options = {\n        'proxy': {\n            'http': 'http://host:port',\n            'https': 'https://host:port',\n            'no_proxy': 'localhost,127.0.0.1,dev_server:8080',\n            'custom_authorization': 'Bearer mytoken123'  # Custom Proxy-Authorization header value\n        }\n    }\n    driver = webdriver.Firefox(seleniumwire_options=options)\n\nOther Options\n~~~~~~~~~~~~~\n\nOther options that can be passed to Selenium Wire via the ``seleniumwire_options`` webdriver attribute:\n\n``connection_timeout``\n    The number of seconds Selenium Wire should wait before timing out requests. The default is 5 seconds. Increase this value if you're working with a slow server that needs more time to respond. Set to ``None`` for no timeout.\n\n.. code:: python\n\n    options = {\n        'connection_timeout': None  # Never timeout\n    }\n    driver = webdriver.Firefox(seleniumwire_options=options)\n\n``custom_response_handler``\n    This function that should be passed in custom response handlers should maintain a signature that it compatible with ``CaptureRequestHandler.response_handler``, as all arguments passed to that function will in turn be passed to your function. In order to modify the response data, you will need to return it from your function (the response data for the request is given in the ``res_body`` argument).\n\n.. code:: python\n\n    def custom(req, req_body, res, res_body):\n        print(f'res_body length: {len(res_body)}')\n\n    options = {\n        'custom_response_handler': custom\n    }\n    drv = webdriver.Firefox(seleniumwire_options=options)\n    drv.get('https://example.com')\n\nThe code above will print something like this to the console (loading a page will almost always initiate more than one request):\n\n.. code:: python\n\n    res_body length: 471\n    res_body length: 606\n\n\n\n``ignore_http_methods``\n    A list of HTTP methods (specified as uppercase strings) that should be ignored by Selenium Wire and not captured. The default is ``['OPTIONS']`` which ignores all OPTIONS requests. To capture all request methods, set ``ignore_http_methods`` to an empty list:\n\n.. code:: python\n\n    options = {\n        'ignore_http_methods': []  # Capture all requests, including OPTIONS requests\n    }\n    driver = webdriver.Firefox(seleniumwire_options=options)\n\n``disable_encoding``\n    Whether to disable content encoding. When set to ``True``, the ``Accept-Encoding`` header will be set to ``identity`` for all requests. This tells the server to not compress/modify the response. The default is ``False``.\n\n.. code:: python\n\n    options = {\n        'disable_encoding': True  # Tell the server not to compress the response\n    }\n    driver = webdriver.Firefox(seleniumwire_options=options)\n\n``suppress_connection_errors``\n    Whether to suppress connection related tracebacks. The default is ``True`` so that harmless errors that commonly occur at browser shutdown do not alarm users. When suppressed, the connection error message is logged at DEBUG level without a traceback. Set to ``False`` to allow exception propagation and see full tracebacks.\n\n.. code:: python\n\n    options = {\n        'suppress_connection_errors': False  # Show full tracebacks for any connection errors\n    }\n    driver = webdriver.Firefox(seleniumwire_options=options)\n\nLimitations\n~~~~~~~~~~~\n\n* Selenium Wire will currently work with tests that run on the same machine as the browser. A distributed setup using Selenium Grid is not yet supported.\n* Sites that use NTLM authentication (Windows authentication) cannot currently be tested with Selenium Wire. NTLM authentication is not supported.\n\nLicense\n~~~~~~~\n\nMIT\n\n\nHistory\n~~~~~~~\n\n1.0.11 (2019-12-31)\n-------------------\n\n* Fix duplication of content-length header when altering body content\n\n1.0.10 (2019-09-22)\n-------------------\n\n* Scope request capture.\n* Apply header filtering on a per-URL basis.\n\n1.0.9 (2019-08-25)\n------------------\n\n* Add ability to provide a custom response handler method.\n\n1.0.8 (2019-08-01)\n------------------\n\n* Remove signal handler from AdminClient to allow running in multi-threaded environment.\n* Make connection timeout configurable.\n\n1.0.7 (2019-07-30)\n------------------\n\n* Fix bug where temporary storage cleanup would sometimes fail when running in a multi-threaded environment.\n* Don't rely on signal handlers for temporary storage cleanup. Signal handlers are not compatible with multiple threads. Use driver.quit() for explicit cleanup.\n\n1.0.6 (2019-07-14)\n------------------\n\n* Support for disabling SSL verification when using self-signed certificates.\n\n1.0.5 (2019-06-15)\n------------------\n\n* Improve performance on Windows by explicitly closing the response output stream.\n* Capture stderr leaking from openssl to the console.\n* Ensure subjectAltName is added to self signed certificates.\n* Refactor certificate generation code.\n* More robust handling of socket errors.\n* Decode response bodies at the point a client asks for them, not at the point a response is captured.\n\n1.0.4 (2019-04-04)\n------------------\n\n* Clean up cached request directory tree on driver.quit().\n* Suppress connection related errors by default.\n\n1.0.3 (2019-04-01)\n------------------\n\n* Responses are no longer sent chunk by chunk where they are missing a Content-Type header.\n* Ensure delayed responses don't cause errors when server is not explicitly shutdown.\n\n1.0.2 (2019-03-10)\n------------------\n\n* Support for authentication when using http based proxies.\n* Fix bug where JSON response bodies were being decoded rather than being sent through as bytes.\n\n1.0.1 (2019-02-07)\n------------------\n\n* Support PATCH requests\n\n1.0.0 (2018-12-31)\n------------------\n\n* Ensure stored response body is always retrieved as bytes when asked for by the test.\n* Updates to README.\n* Use reverse chronological ordering of HISTORY.\n\n0.10.0 (2018-10-30)\n-------------------\n\n* Fix issue where ignoring OPTIONS requests would trigger AttributeError.\n* Allow proxy settings to be explicitly set to None.\n\n0.9.0 (2018-10-28)\n------------------\n\n* Ignore OPTIONS requests by default, and allow list of methods to be configurable via the ignore_http_methods option.\n* Move default Selenium Wire request storage from system temp to user home to prevent permission collisions.\n\n0.8.0 (2018-09-20)\n------------------\n\n* Fix issue where new headers were not being added to the request when using driver.header_overrides.\n\n0.7.0 (2018-08-29)\n------------------\n\n* README and doc updates.\n\n0.6.0 (2018-08-21)\n------------------\n\n* Bundle openssl.cnf for Windows.\n\n0.5.0 (2018-08-19)\n------------------\n\n* Clearer README instructions.\n\n0.4.0 (2018-08-19)\n------------------\n\n* OpenSSL for Windows now bundled.\n* Setup instructions for Edge.\n\n0.3.0 (2018-08-07)\n------------------\n\n* Fix remote proxy basic authentication.\n* Updates to README.\n\n0.2.0 (2018-08-04)\n------------------\n\n* Load proxy settings from env variables.\n* Support disabling of content encoding.\n* Updates to README.\n\n0.1.0 (2018-06-19)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wkeeling/selenium-wire", "keywords": "selenium-wire", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "selenium-wire", "package_url": "https://pypi.org/project/selenium-wire/", "platform": "", "project_url": "https://pypi.org/project/selenium-wire/", "project_urls": {"Homepage": "https://github.com/wkeeling/selenium-wire"}, "release_url": "https://pypi.org/project/selenium-wire/1.0.11/", "requires_dist": ["selenium (>=3.4.0)"], "requires_python": "", "summary": "Extends Selenium to give you the ability to inspect requests made by the browser.", "version": "1.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Selenium Wire extends Selenium\u2019s Python bindings to give your tests access to the underlying requests made by the browser. It is a lightweight library designed for ease of use with minimal external dependencies.</p>\n<p>With Selenium Wire, you author your tests in just the same way as you do with Selenium, but you get an additional user-friendly API for accessing things such as the request/response headers, status code and body content.</p>\n<a href=\"https://travis-ci.org/wkeeling/selenium-wire\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/wkeeling/selenium-wire.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71137ea3002d0ce05fed16353a39689bdecfe924/68747470733a2f2f7472617669732d63692e6f72672f776b65656c696e672f73656c656e69756d2d776972652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/wkeeling/selenium-wire\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/wkeeling/selenium-wire/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35c33b96a1477bf2f2b37df57dc551ae406e8a0e/68747470733a2f2f636f6465636f762e696f2f67682f776b65656c696e672f73656c656e69756d2d776972652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/selenium-wire\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/python-3.4%2C%203.5%2C%203.6%2C%203.7-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be316eac78093291a4747c3e9ff1e1871aee1950/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e34253243253230332e35253243253230332e36253243253230332e372d626c75652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/selenium-wire\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/selenium-wire.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98074c0bf88ace4d01da9b016fdf11b0da7eed73/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73656c656e69756d2d776972652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/selenium-wire\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/selenium-wire.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9678d64f08bff47657311975e76e976837fc14a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f73656c656e69756d2d776972652e737667\"></a>\n<div id=\"simple-example\">\n<h2>Simple Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">seleniumwire</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>  <span class=\"c1\"># Import from seleniumwire</span>\n\n<span class=\"c1\"># Create a new instance of the Firefox driver</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Go to the Google home page</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://www.google.com'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access requests via the `requests` attribute</span>\n<span class=\"k\">for</span> <span class=\"n\">request</span> <span class=\"ow\">in</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">requests</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>Prints:</p>\n<pre>https://www.google.com/ <span class=\"m\">200</span> text/html<span class=\"p\">;</span> <span class=\"nv\">charset</span><span class=\"o\">=</span>UTF-8\nhttps://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png <span class=\"m\">200</span> image/png\nhttps://consent.google.com/status?continue<span class=\"o\">=</span>https://www.google.com<span class=\"p\">&amp;</span><span class=\"nv\">pc</span><span class=\"o\">=</span>s<span class=\"p\">&amp;</span><span class=\"nv\">timestamp</span><span class=\"o\">=</span><span class=\"m\">1531511954</span><span class=\"p\">&amp;</span><span class=\"nv\">gl</span><span class=\"o\">=</span>GB <span class=\"m\">204</span> text/html<span class=\"p\">;</span> <span class=\"nv\">charset</span><span class=\"o\">=</span>utf-8\nhttps://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png <span class=\"m\">200</span> image/png\nhttps://ssl.gstatic.com/gb/images/i2_2ec824b0.png <span class=\"m\">200</span> image/png\nhttps://www.google.com/gen_204?s<span class=\"o\">=</span>webaft<span class=\"p\">&amp;</span><span class=\"nv\">t</span><span class=\"o\">=</span>aft<span class=\"p\">&amp;</span><span class=\"nv\">atyp</span><span class=\"o\">=</span>csi<span class=\"p\">&amp;</span><span class=\"nv\">ei</span><span class=\"o\">=</span>kgRJW7DBONKTlwTK77wQ<span class=\"p\">&amp;</span><span class=\"nv\">rt</span><span class=\"o\">=</span>wsrt.366,aft.58,prt.58 <span class=\"m\">204</span> text/html<span class=\"p\">;</span> <span class=\"nv\">charset</span><span class=\"o\">=</span>UTF-8\n...\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Straightforward, user-friendly API</li>\n<li>All HTTP/HTTPS requests captured</li>\n<li>Access to request/response bodies</li>\n<li>Modify responses</li>\n<li>Header injection/filtering</li>\n<li>URL rewriting</li>\n<li>Proxy server support</li>\n</ul>\n</div>\n<div id=\"compatibilty\">\n<h2>Compatibilty</h2>\n<ul>\n<li>Python 3.4+</li>\n<li>Selenium 3.4.0+</li>\n<li>Firefox, Chrome, Safari and Edge are supported</li>\n</ul>\n</div>\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#openssl\" rel=\"nofollow\">OpenSSL</a></li>\n<li><a href=\"#browser-setup\" rel=\"nofollow\">Browser Setup</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#creating-the-webdriver\" rel=\"nofollow\">Creating the Webdriver</a></li>\n<li><a href=\"#using-self-signed-certificates\" rel=\"nofollow\">Using Self-Signed Certificates</a></li>\n<li><a href=\"#accessing-requests\" rel=\"nofollow\">Accessing Requests</a></li>\n<li><a href=\"#waiting-for-a-request\" rel=\"nofollow\">Waiting for a Request</a></li>\n<li><a href=\"#clearing-requests\" rel=\"nofollow\">Clearing Requests</a></li>\n<li><a href=\"#scoping-request-capture\" rel=\"nofollow\">Scoping Request Capture</a></li>\n</ul>\n</li>\n<li><a href=\"#request-attributes\" rel=\"nofollow\">Request Attributes</a></li>\n<li><a href=\"#response-attributes\" rel=\"nofollow\">Response Attributes</a></li>\n<li><a href=\"#modifying-requests\" rel=\"nofollow\">Modifying Requests</a><ul>\n<li><a href=\"#modifying-headers\" rel=\"nofollow\">Modifying Headers</a></li>\n<li><a href=\"#rewriting-urls\" rel=\"nofollow\">Rewriting URLs</a></li>\n</ul>\n</li>\n<li><a href=\"#proxies\" rel=\"nofollow\">Proxies</a></li>\n<li><a href=\"#other-options\" rel=\"nofollow\">Other Options</a></li>\n<li><a href=\"#limitations\" rel=\"nofollow\">Limitations</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using pip:</p>\n<pre>pip install selenium-wire\n</pre>\n<div id=\"openssl\">\n<h3>OpenSSL</h3>\n<p>Selenium Wire requires OpenSSL for capturing HTTPS requests.</p>\n<p><strong>Linux</strong></p>\n<pre><span class=\"c1\"># For apt based Linux systems\n</span>sudo apt install openssl\n\n<span class=\"c1\"># For RPM based Linux systems\n</span>sudo yum install openssl\n</pre>\n<p><strong>MacOS</strong></p>\n<pre>brew install openssl\n</pre>\n<p><strong>Windows</strong></p>\n<p>No installation is required. OpenSSL for Windows is bundled with Selenium Wire.</p>\n</div>\n<div id=\"browser-setup\">\n<h3>Browser Setup</h3>\n<p><strong>Firefox and Chrome</strong></p>\n<p>No specific configuration should be necessary - everything should just work.</p>\n<p>You will however need to ensure that you have downloaded the <a href=\"https://github.com/mozilla/geckodriver/\" rel=\"nofollow\">Gecko driver</a> and <a href=\"https://sites.google.com/a/chromium.org/chromedriver/\" rel=\"nofollow\">Chrome driver</a> for Firefox and Chrome to be remotely controlled - the same as if you were using Selenium directly. Once downloaded, these executables should be placed somewhere on the system path.</p>\n<p><strong>Safari</strong></p>\n<p>There are a few <a href=\"./safari_setup.rst\" rel=\"nofollow\">manual steps</a> that have to be carried out before you can use Safari with Selenium Wire.</p>\n<p><strong>Edge</strong></p>\n<p>Like Safari, Microsoft Edge requires some <a href=\"./edge_setup.rst\" rel=\"nofollow\">manual configuration</a> before it can be used with Selenium Wire.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Ensure that you import <tt>webdriver</tt> from the <tt>seleniumwire</tt> package:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">seleniumwire</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n</pre>\n<ul>\n<li>For sub-packages of <tt>webdriver</tt>, you should continue to import these directly from <tt>selenium</tt>. For example, to import <tt>WebDriverWait</tt>:</li>\n</ul>\n<pre><span class=\"c1\"># Sub-packages of webdriver must still be imported from `selenium` itself</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.support.ui</span> <span class=\"kn\">import</span> <span class=\"n\">WebDriverWait</span>\n</pre>\n<div id=\"creating-the-webdriver\">\n<h3>Creating the Webdriver</h3>\n<p>For Firefox and Chrome, you don\u2019t need to do anything special. Just instantiate the webdriver as you would normally, passing in Selenium specific options if you have any. Selenium Wire also has it\u2019s <a href=\"#other-options\" rel=\"nofollow\">own options</a> that can be passed in the <tt>seleniumwire_options</tt> attribute.</p>\n<p><strong>Firefox</strong></p>\n<pre><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Chrome</strong></p>\n<pre><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Chrome</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Safari</strong></p>\n<p>For Safari, you need to tell Selenium Wire the port number you selected when you configured the browser in <a href=\"#browser-setup\" rel=\"nofollow\">Browser Setup</a>.\nFor example, if you chose port 12345, then you would pass it in the <tt>seleniumwire_options</tt> like this:</p>\n<pre><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Safari</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">12345</span><span class=\"p\">})</span>\n</pre>\n<p><strong>Edge</strong></p>\n<p>For Edge, you need to tell Selenium Wire the port number you selected when you configured the browser in <a href=\"#browser-setup\" rel=\"nofollow\">Browser Setup</a>.\nFor example, if you chose port 12345, then you would pass it in the <tt>seleniumwire_options</tt> like this:</p>\n<pre><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Edge</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">12345</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"using-self-signed-certificates\">\n<h3>Using Self-Signed Certificates</h3>\n<p>If the site you are testing uses a self-signed certificate then you must set the <tt>verify_ssl</tt> option to <tt>False</tt> in the <tt>seleniumwire_options</tt>:</p>\n<pre><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'verify_ssl'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">})</span>\n</pre>\n<p>This this will need to be done regardless of the type of browser you are using.</p>\n</div>\n<div id=\"accessing-requests\">\n<h3>Accessing Requests</h3>\n<p>Selenium Wire captures all HTTP/HTTPS traffic made by the browser during a test.</p>\n<p><strong>driver.requests</strong></p>\n<p>You can retrieve all requests with the <tt>driver.requests</tt> attribute. The requests are just a list and can be iterated (like in the opening example) and indexed:</p>\n<pre><span class=\"n\">first_request</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">requests</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<p><strong>driver.last_request</strong></p>\n<p>The list of requests held by <tt>driver.requests</tt> is in chronological order. If you want to access the most recent request, use the dedicated <tt>driver.last_request</tt> attribute:</p>\n<pre><span class=\"n\">last_request</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">last_request</span>\n</pre>\n<p>This is more efficient than using <tt><span class=\"pre\">driver.requests[-1]</span></tt>.</p>\n</div>\n<div id=\"waiting-for-a-request\">\n<h3>Waiting for a Request</h3>\n<p>When you ask for captured requests using <tt>driver.requests</tt> or <tt>driver.last_request</tt> you have to be sure that the requests you\u2019re interested in have actually been captured. If you ask too soon, then you may find that a request is not yet present, or is present but has no associated response.</p>\n<p><strong>driver.wait_for_request()</strong></p>\n<p>This method will wait for a previous request with a specific path to complete before allowing the test to continue. The path can be a unique part of the URL or the full URL itself.</p>\n<p>For example, to wait for an AJAX request to return after a button is clicked:</p>\n<pre><span class=\"c1\"># Click a button that triggers a background request to https://server/api/products/12345/</span>\n<span class=\"n\">button_element</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Wait for the request/response to complete</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">wait_for_request</span><span class=\"p\">(</span><span class=\"s1\">'/api/products/12345/'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Note that <tt>driver.wait_for_request()</tt> doesn\u2019t <em>make</em> a request, it just <em>waits</em> for a previous request made by some other action.</li>\n</ul>\n<p>The <tt>wait_for_request()</tt> method will return the first <em>fully completed</em> request it finds that matches the supplied path. Fully completed meaning that the response must have returned. The method will wait up to 10 seconds by default but you can vary that with the <tt>timeout</tt> argument:</p>\n<pre><span class=\"c1\"># Wait up to 30 seconds for a request/response</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">wait_for_request</span><span class=\"p\">(</span><span class=\"s1\">'/api/products/12345/'</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n<p>If a fully completed request is not seen within the timeout period a <tt>TimeoutException</tt> is raised.</p>\n</div>\n<div id=\"clearing-requests\">\n<h3>Clearing Requests</h3>\n<p>To clear previously captured requests, use <tt>del</tt>:</p>\n<pre><span class=\"k\">del</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">requests</span>\n</pre>\n</div>\n<div id=\"scoping-request-capture\">\n<h3>Scoping Request Capture</h3>\n<p>By default, Selenium Wire will capture all requests the browser makes during a test. You may want to restrict this to particular URLs - e.g. for performance reasons.</p>\n<p>To restrict request capture use the <tt>scopes</tt> attribute. This accepts a list of regular expressions that will match URLs to be captured.</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">scopes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'.*stackoverflow.*'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'.*github.*'</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Only request URLs containing \"stackoverflow\" or \"github\" will now be captured...</span>\n</pre>\n</div>\n</div>\n<div id=\"request-attributes\">\n<h2>Request Attributes</h2>\n<p>Requests have the following attributes.</p>\n<dl>\n<dt><tt>method</tt></dt>\n<dd>The HTTP method type such as <tt>GET</tt> or <tt>POST</tt>.</dd>\n<dt><tt>path</tt></dt>\n<dd>The request path.</dd>\n<dt><tt>headers</tt></dt>\n<dd>A case-insensitive dictionary of request headers. Asking for <tt><span class=\"pre\">request.headers['user-agent']</span></tt> will return the value of the <tt><span class=\"pre\">User-Agent</span></tt> header.</dd>\n<dt><tt>body</tt></dt>\n<dd>The request body as <tt>bytes</tt>. If the request has no body the value of <tt>body</tt> will be <tt>None</tt>.</dd>\n<dt><tt>response</tt></dt>\n<dd>The response associated with the request. This will be <tt>None</tt> if the request has no response.</dd>\n</dl>\n</div>\n<div id=\"response-attributes\">\n<h2>Response Attributes</h2>\n<p>The response can be retrieved from a request via the <tt>response</tt> attribute. A response may be <tt>None</tt> if it was never captured, which may happen if you asked for it before it returned or if the server timed out etc. A response has the following attributes.</p>\n<dl>\n<dt><tt>status_code</tt></dt>\n<dd>The status code of the response such as <tt>200</tt> or <tt>404</tt>.</dd>\n<dt><tt>reason</tt></dt>\n<dd>The reason phrase such as <tt>OK</tt> or <tt>Not Found</tt>.</dd>\n<dt><tt>headers</tt></dt>\n<dd>A case-insensitive dictionary of response headers. Asking for <tt><span class=\"pre\">response.headers['content-length']</span></tt> will return the value of the <tt><span class=\"pre\">Content-Length</span></tt> header.</dd>\n<dt><tt>body</tt></dt>\n<dd>The response body as <tt>bytes</tt>. If the response has no body the value of <tt>body</tt> will be <tt>None</tt>.</dd>\n</dl>\n</div>\n<div id=\"modifying-requests\">\n<h2>Modifying Requests</h2>\n<p>Selenium Wire allows you to modify the request headers the browser sends as well as rewrite any part of the request URL.</p>\n<div id=\"modifying-headers\">\n<h3>Modifying Headers</h3>\n<p>The <tt>driver.header_overrides</tt> attribute is used for modifying headers.</p>\n<p>To add one or more new headers to a request, create a dictionary containing those headers and set it as the value of <tt>header_overrides</tt>.</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">header_overrides</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'New-Header1'</span><span class=\"p\">:</span> <span class=\"s1\">'Some Value'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'New-Header2'</span><span class=\"p\">:</span> <span class=\"s1\">'Some Value'</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># All subsequent requests will now contain New-Header1 and New-Header2</span>\n</pre>\n<p>If a header already exists in a request it will be overwritten by the one in the dictionary. Header names are case-insensitive.</p>\n<p>To filter out one or more headers from a request, set the value of those headers to <tt>None</tt>.</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">header_overrides</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'Existing-Header1'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'Existing-Header2'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># All subsequent requests will now *not* contain Existing-Header1 or Existing-Header2</span>\n</pre>\n<p>To clear the header overrides that you have set, use <tt>del</tt>:</p>\n<pre><span class=\"k\">del</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">header_overrides</span>\n</pre>\n<p>Header overrides can also be applied on a per-URL basis, in the following format:</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">header_overrides</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s1\">'.*prod1.server.com.*'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'User-Agent'</span><span class=\"p\">:</span> <span class=\"s1\">'Test_User_Agent_String'</span><span class=\"p\">,</span>\n                              <span class=\"s1\">'New-Header'</span><span class=\"p\">:</span> <span class=\"s1\">'HeaderValue'</span><span class=\"p\">}),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'.*prod2.server.com.*'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'User-Agent2'</span><span class=\"p\">:</span> <span class=\"s1\">'Test_User_Agent_String2'</span><span class=\"p\">,</span>\n                              <span class=\"s1\">'New-Header2'</span><span class=\"p\">:</span> <span class=\"s1\">'HeaderValue'</span><span class=\"p\">})</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Only requests to prod1.server.com or prod2.server.com will have their headers modified</span>\n</pre>\n</div>\n<div id=\"rewriting-urls\">\n<h3>Rewriting URLs</h3>\n<p>The <tt>driver.rewrite_rules</tt> attribute is used for rewriting request URLs.</p>\n<p>Each rewrite rule should be specified as a 2-tuple or list, the first element containing the URL pattern to match and the second element the replacement. One or more rewrite rules can be supplied.</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">rewrite_rules</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'(https?://)prod1.server.com(.*)'</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">'\\1prod2.server.com\\2'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># All subsequent requests that match http://prod1.server.com... or https://prod1.server.com...</span>\n<span class=\"c1\"># will be rewritten to http://prod2.server.com... or https://prod2.server.com...</span>\n</pre>\n<p>The match and replacement syntax is just Python\u2019s regex syntax. See <a href=\"https://docs.python.org/3/library/re.html#re.sub\" rel=\"nofollow\">re.sub</a> for more information.</p>\n<p>To clear the rewrite rules that you have set, use <tt>del</tt>:</p>\n<pre><span class=\"k\">del</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">rewrite_rules</span>\n</pre>\n</div>\n</div>\n<div id=\"proxies\">\n<h2>Proxies</h2>\n<p>Selenium Wire captures requests by using its own proxy server under the covers. This means you cannot use the webdriver\u2019s <tt>DesiredCapabilities</tt> API to configure your own proxy, like you might when using Selenium directly.</p>\n<p>If the site you are testing sits behind a proxy server you can tell Selenium Wire about that proxy server in the options you pass to the webdriver instance. The configuration takes the following format:</p>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'proxy'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'http'</span><span class=\"p\">:</span> <span class=\"s1\">'http://username:password@host:port'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'https'</span><span class=\"p\">:</span> <span class=\"s1\">'https://username:password@host:port'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'no_proxy'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost,127.0.0.1,dev_server:8080'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<p>The username and password are optional and can be specified when a proxy server requires authentication. Basic authentication is assumed by default.</p>\n<p>The proxy configuration can also be loaded through environment variables called <tt>http</tt>, <tt>https</tt> and <tt>no_proxy</tt>. The proxy configuration in the options passed to the webdriver instance will take precedence over environment variable configuration if both are specified.</p>\n<p><strong>Proxy authentication other than Basic</strong></p>\n<p>Basic authentication is used by default when supplying a username and password in the URL. If you are connecting to an upstream proxy server that uses an authentication scheme different to Basic, then you can supply the full value for the <tt><span class=\"pre\">Proxy-Authorization</span></tt> header using the <tt>custom_authorization</tt> option. For example, if your proxy used the Bearer scheme:</p>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'proxy'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'http'</span><span class=\"p\">:</span> <span class=\"s1\">'http://host:port'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'https'</span><span class=\"p\">:</span> <span class=\"s1\">'https://host:port'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'no_proxy'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost,127.0.0.1,dev_server:8080'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'custom_authorization'</span><span class=\"p\">:</span> <span class=\"s1\">'Bearer mytoken123'</span>  <span class=\"c1\"># Custom Proxy-Authorization header value</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"other-options\">\n<h2>Other Options</h2>\n<p>Other options that can be passed to Selenium Wire via the <tt>seleniumwire_options</tt> webdriver attribute:</p>\n<dl>\n<dt><tt>connection_timeout</tt></dt>\n<dd>The number of seconds Selenium Wire should wait before timing out requests. The default is 5 seconds. Increase this value if you\u2019re working with a slow server that needs more time to respond. Set to <tt>None</tt> for no timeout.</dd>\n</dl>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'connection_timeout'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Never timeout</span>\n<span class=\"p\">}</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<dl>\n<dt><tt>custom_response_handler</tt></dt>\n<dd>This function that should be passed in custom response handlers should maintain a signature that it compatible with <tt>CaptureRequestHandler.response_handler</tt>, as all arguments passed to that function will in turn be passed to your function. In order to modify the response data, you will need to return it from your function (the response data for the request is given in the <tt>res_body</tt> argument).</dd>\n</dl>\n<pre><span class=\"k\">def</span> <span class=\"nf\">custom</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">req_body</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">res_body</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'res_body length: </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res_body</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'custom_response_handler'</span><span class=\"p\">:</span> <span class=\"n\">custom</span>\n<span class=\"p\">}</span>\n<span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n<span class=\"n\">drv</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://example.com'</span><span class=\"p\">)</span>\n</pre>\n<p>The code above will print something like this to the console (loading a page will almost always initiate more than one request):</p>\n<pre><span class=\"n\">res_body</span> <span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"mi\">471</span>\n<span class=\"n\">res_body</span> <span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"mi\">606</span>\n</pre>\n<dl>\n<dt><tt>ignore_http_methods</tt></dt>\n<dd>A list of HTTP methods (specified as uppercase strings) that should be ignored by Selenium Wire and not captured. The default is <tt>['OPTIONS']</tt> which ignores all OPTIONS requests. To capture all request methods, set <tt>ignore_http_methods</tt> to an empty list:</dd>\n</dl>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'ignore_http_methods'</span><span class=\"p\">:</span> <span class=\"p\">[]</span>  <span class=\"c1\"># Capture all requests, including OPTIONS requests</span>\n<span class=\"p\">}</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<dl>\n<dt><tt>disable_encoding</tt></dt>\n<dd>Whether to disable content encoding. When set to <tt>True</tt>, the <tt><span class=\"pre\">Accept-Encoding</span></tt> header will be set to <tt>identity</tt> for all requests. This tells the server to not compress/modify the response. The default is <tt>False</tt>.</dd>\n</dl>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'disable_encoding'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>  <span class=\"c1\"># Tell the server not to compress the response</span>\n<span class=\"p\">}</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<dl>\n<dt><tt>suppress_connection_errors</tt></dt>\n<dd>Whether to suppress connection related tracebacks. The default is <tt>True</tt> so that harmless errors that commonly occur at browser shutdown do not alarm users. When suppressed, the connection error message is logged at DEBUG level without a traceback. Set to <tt>False</tt> to allow exception propagation and see full tracebacks.</dd>\n</dl>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'suppress_connection_errors'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>  <span class=\"c1\"># Show full tracebacks for any connection errors</span>\n<span class=\"p\">}</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">seleniumwire_options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<ul>\n<li>Selenium Wire will currently work with tests that run on the same machine as the browser. A distributed setup using Selenium Grid is not yet supported.</li>\n<li>Sites that use NTLM authentication (Windows authentication) cannot currently be tested with Selenium Wire. NTLM authentication is not supported.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>1.0.11 (2019-12-31)</h3>\n<ul>\n<li>Fix duplication of content-length header when altering body content</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.10 (2019-09-22)</h3>\n<ul>\n<li>Scope request capture.</li>\n<li>Apply header filtering on a per-URL basis.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.9 (2019-08-25)</h3>\n<ul>\n<li>Add ability to provide a custom response handler method.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.8 (2019-08-01)</h3>\n<ul>\n<li>Remove signal handler from AdminClient to allow running in multi-threaded environment.</li>\n<li>Make connection timeout configurable.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0.7 (2019-07-30)</h3>\n<ul>\n<li>Fix bug where temporary storage cleanup would sometimes fail when running in a multi-threaded environment.</li>\n<li>Don\u2019t rely on signal handlers for temporary storage cleanup. Signal handlers are not compatible with multiple threads. Use driver.quit() for explicit cleanup.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.0.6 (2019-07-14)</h3>\n<ul>\n<li>Support for disabling SSL verification when using self-signed certificates.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.0.5 (2019-06-15)</h3>\n<ul>\n<li>Improve performance on Windows by explicitly closing the response output stream.</li>\n<li>Capture stderr leaking from openssl to the console.</li>\n<li>Ensure subjectAltName is added to self signed certificates.</li>\n<li>Refactor certificate generation code.</li>\n<li>More robust handling of socket errors.</li>\n<li>Decode response bodies at the point a client asks for them, not at the point a response is captured.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.0.4 (2019-04-04)</h3>\n<ul>\n<li>Clean up cached request directory tree on driver.quit().</li>\n<li>Suppress connection related errors by default.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.0.3 (2019-04-01)</h3>\n<ul>\n<li>Responses are no longer sent chunk by chunk where they are missing a Content-Type header.</li>\n<li>Ensure delayed responses don\u2019t cause errors when server is not explicitly shutdown.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.0.2 (2019-03-10)</h3>\n<ul>\n<li>Support for authentication when using http based proxies.</li>\n<li>Fix bug where JSON response bodies were being decoded rather than being sent through as bytes.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.0.1 (2019-02-07)</h3>\n<ul>\n<li>Support PATCH requests</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>1.0.0 (2018-12-31)</h3>\n<ul>\n<li>Ensure stored response body is always retrieved as bytes when asked for by the test.</li>\n<li>Updates to README.</li>\n<li>Use reverse chronological ordering of HISTORY.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.10.0 (2018-10-30)</h3>\n<ul>\n<li>Fix issue where ignoring OPTIONS requests would trigger AttributeError.</li>\n<li>Allow proxy settings to be explicitly set to None.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.9.0 (2018-10-28)</h3>\n<ul>\n<li>Ignore OPTIONS requests by default, and allow list of methods to be configurable via the ignore_http_methods option.</li>\n<li>Move default Selenium Wire request storage from system temp to user home to prevent permission collisions.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>0.8.0 (2018-09-20)</h3>\n<ul>\n<li>Fix issue where new headers were not being added to the request when using driver.header_overrides.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>0.7.0 (2018-08-29)</h3>\n<ul>\n<li>README and doc updates.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>0.6.0 (2018-08-21)</h3>\n<ul>\n<li>Bundle openssl.cnf for Windows.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>0.5.0 (2018-08-19)</h3>\n<ul>\n<li>Clearer README instructions.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>0.4.0 (2018-08-19)</h3>\n<ul>\n<li>OpenSSL for Windows now bundled.</li>\n<li>Setup instructions for Edge.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>0.3.0 (2018-08-07)</h3>\n<ul>\n<li>Fix remote proxy basic authentication.</li>\n<li>Updates to README.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3>0.2.0 (2018-08-04)</h3>\n<ul>\n<li>Load proxy settings from env variables.</li>\n<li>Support disabling of content encoding.</li>\n<li>Updates to README.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>0.1.0 (2018-06-19)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6378831, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6cc321dd53104cd2f79eb8e2641891a1", "sha256": "7281d6af59bda22b9959b231a18a4ed17e208047d0d03dd82f27eb8f6fb379ed"}, "downloads": -1, "filename": "selenium-wire-0.1.0.macosx-10.11-x86_64.tar.gz", "has_sig": false, "md5_digest": "6cc321dd53104cd2f79eb8e2641891a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67715, "upload_time": "2018-08-01T20:42:41", "upload_time_iso_8601": "2018-08-01T20:42:41.729790Z", "url": "https://files.pythonhosted.org/packages/82/e5/950a92e4fc34a0ff3d029227f4f8b055565b91e6e41d066e062c532f6f19/selenium-wire-0.1.0.macosx-10.11-x86_64.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "c7e77d6a0065bd2009bb6a3852bc3793", "sha256": "bc0af7e482ac65f7740a7246c4604107c422a8e02209a18442b94a1b08525449"}, "downloads": -1, "filename": "selenium_wire-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c7e77d6a0065bd2009bb6a3852bc3793", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 811195, "upload_time": "2018-10-30T21:15:21", "upload_time_iso_8601": "2018-10-30T21:15:21.932888Z", "url": "https://files.pythonhosted.org/packages/43/a4/43fcdb82e7abf8e5012b7b46d3121a84f133767c25d445f7d54ad60abe13/selenium_wire-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0115fc639ead194e4befd34aa290a7c8", "sha256": "11113c0cf682ab6db7559cde2c7a01ce0d7c500f6219cee7a93bf1bb2a77b60f"}, "downloads": -1, "filename": "selenium-wire-0.10.0.tar.gz", "has_sig": false, "md5_digest": "0115fc639ead194e4befd34aa290a7c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 824686, "upload_time": "2018-10-30T21:15:23", "upload_time_iso_8601": "2018-10-30T21:15:23.893362Z", "url": "https://files.pythonhosted.org/packages/40/c9/b278a1f0cc896b737d3bd5a25b633f4918623fe8097d37ad3ddd76720901/selenium-wire-0.10.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a54d05818c14697b690c72c3d9d4d17b", "sha256": "6185ebcb73fc693ef0489c3d2de270eaa5c9332a9d7e2519003000cf1cb2692c"}, "downloads": -1, "filename": "selenium_wire-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a54d05818c14697b690c72c3d9d4d17b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32310, "upload_time": "2018-08-04T09:51:38", "upload_time_iso_8601": "2018-08-04T09:51:38.775287Z", "url": "https://files.pythonhosted.org/packages/8b/21/ca180aad16b7ef499e6d653330fe1bcd6b90eff1a1888199bba9eca789a9/selenium_wire-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35dc413c88ee23fb383fbed22dfcdd1d", "sha256": "4e3f12904934fa2f66fb9d750a9a8209e61d7c9c8bcfbddbb307310533ae9714"}, "downloads": -1, "filename": "selenium-wire-0.2.0.tar.gz", "has_sig": false, "md5_digest": "35dc413c88ee23fb383fbed22dfcdd1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36984, "upload_time": "2018-08-04T09:51:39", "upload_time_iso_8601": "2018-08-04T09:51:39.964086Z", "url": "https://files.pythonhosted.org/packages/17/ae/15369f8e939da32a9d80a0d7c5cdb49af396bd204aff1418a54b003db137/selenium-wire-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "57cf339b555e2d53466f8fae477f2377", "sha256": "3a5db260a8697d1e6ce2b036d2c414fde98d48d2cd91868291ee72ec9da62e9d"}, "downloads": -1, "filename": "selenium_wire-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "57cf339b555e2d53466f8fae477f2377", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32347, "upload_time": "2018-08-07T15:10:16", "upload_time_iso_8601": "2018-08-07T15:10:16.020677Z", "url": "https://files.pythonhosted.org/packages/34/de/0ed2a1ac8d79179de241c7b835d0427a297d36b2dc25123a794b8adcdc05/selenium_wire-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "971f342920f3cf62eba99189f2298311", "sha256": "cc413cf1d51e25d1a8002416c2e1890701c64192bda93ef3948b2370c2c036df"}, "downloads": -1, "filename": "selenium-wire-0.3.0.tar.gz", "has_sig": false, "md5_digest": "971f342920f3cf62eba99189f2298311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37090, "upload_time": "2018-08-07T15:10:17", "upload_time_iso_8601": "2018-08-07T15:10:17.357662Z", "url": "https://files.pythonhosted.org/packages/3d/67/915058a3c04cc9609921d9b608c2045f5a619491b687d0ab6e2ab02ecd11/selenium-wire-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "48335e9cf4986ef2942d30c313496cc7", "sha256": "5f0bee1a33c2a2f3364cadd1a2a3ec53321bbab63ae230bb4b1844f1a1b3fea1"}, "downloads": -1, "filename": "selenium_wire-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48335e9cf4986ef2942d30c313496cc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 804658, "upload_time": "2018-08-19T11:43:03", "upload_time_iso_8601": "2018-08-19T11:43:03.041927Z", "url": "https://files.pythonhosted.org/packages/74/de/066de450749978604b9a5c4b3310b6ab769477d0b3c831e38e957f78d935/selenium_wire-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac621f3544df11e084d129ecb8e168bf", "sha256": "a7394bb20d9549c74815c1ae96218d922918208ecc837ef3bf686f1a69b9bb15"}, "downloads": -1, "filename": "selenium-wire-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ac621f3544df11e084d129ecb8e168bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 808756, "upload_time": "2018-08-19T11:43:06", "upload_time_iso_8601": "2018-08-19T11:43:06.515793Z", "url": "https://files.pythonhosted.org/packages/89/00/8067e1e74574a508355482f1871ca183a5d43c30c387d561540beef81980/selenium-wire-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "b41195b204d7b9ffdf7eb9c2df1ef689", "sha256": "778f4f7b36e6db0419488dfa1528b3411fde4d8922bb6c0d6f66d34a84d2d410"}, "downloads": -1, "filename": "selenium_wire-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b41195b204d7b9ffdf7eb9c2df1ef689", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 804741, "upload_time": "2018-08-19T12:31:16", "upload_time_iso_8601": "2018-08-19T12:31:16.453195Z", "url": "https://files.pythonhosted.org/packages/f6/82/1788a46e7d54adc0ff892592d53eae62d76e0fd12cd8b3a034b6b595cc02/selenium_wire-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2555a8847a2b5f3787b0c883d7c915b0", "sha256": "6d21605a9e748a3630a6a15fa2b6cef57b2a291e6da051c70e5c695578d78f7a"}, "downloads": -1, "filename": "selenium-wire-0.5.0.tar.gz", "has_sig": false, "md5_digest": "2555a8847a2b5f3787b0c883d7c915b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 813472, "upload_time": "2018-08-19T12:31:18", "upload_time_iso_8601": "2018-08-19T12:31:18.672650Z", "url": "https://files.pythonhosted.org/packages/84/23/5649542bfba990f254204be5eaf76426b424192ad934c9f2dddb819ec5bb/selenium-wire-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "678524988ecacadabfa19a0ae52c52a3", "sha256": "8d7662db8a1d5cc266a0fd1a56149b41d5638f0ee067bedb2c973e2cfda91d3b"}, "downloads": -1, "filename": "selenium_wire-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "678524988ecacadabfa19a0ae52c52a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 808153, "upload_time": "2018-08-21T20:32:47", "upload_time_iso_8601": "2018-08-21T20:32:47.228744Z", "url": "https://files.pythonhosted.org/packages/16/b9/6ca5f39cff8672d633817356833ebc75962dd97a605065984a2631ff9275/selenium_wire-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a631e501fe608148680085a239e3763", "sha256": "846d57b286b575819ec9b7e0d395fd28d0d40be57868f805f21cc8ef7bf2625e"}, "downloads": -1, "filename": "selenium-wire-0.6.0.tar.gz", "has_sig": false, "md5_digest": "6a631e501fe608148680085a239e3763", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 816334, "upload_time": "2018-08-21T20:32:49", "upload_time_iso_8601": "2018-08-21T20:32:49.098838Z", "url": "https://files.pythonhosted.org/packages/b4/ef/290941273b3c1c5efcd2385b0d157708eaa0e2b3290df653c7dda10145d7/selenium-wire-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "7f18adac2a23e00254b51be0a28d22bd", "sha256": "62e911cf92cd7d1feb862add4cea22b8ac7f73d82d76b5650f5cb93da55cdfc0"}, "downloads": -1, "filename": "selenium_wire-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7f18adac2a23e00254b51be0a28d22bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 808140, "upload_time": "2018-08-29T19:34:02", "upload_time_iso_8601": "2018-08-29T19:34:02.937549Z", "url": "https://files.pythonhosted.org/packages/b2/26/b9f565fe1cfa9993de89bca0f0cb9f23ca0c1f020449a3df1d5ede79a579/selenium_wire-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae84f3fa24ae823432bd14cebcc6d6cf", "sha256": "de77e61cb1f099ec1a55f2035ccbe46ec5f09422771bbe04eb45e2d89fa093e6"}, "downloads": -1, "filename": "selenium-wire-0.7.0.tar.gz", "has_sig": false, "md5_digest": "ae84f3fa24ae823432bd14cebcc6d6cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 816376, "upload_time": "2018-08-29T19:34:04", "upload_time_iso_8601": "2018-08-29T19:34:04.526567Z", "url": "https://files.pythonhosted.org/packages/f3/4b/14444c515de393ca8c469835d7227f974311849165e2a264e7e92d629374/selenium-wire-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "3fe649aaab861cd6f83e3a9cfe313a9b", "sha256": "dadb6f95bc2d56641d9eb9cd540578445484ebf3d5af9e8a897f58fd07fd4faf"}, "downloads": -1, "filename": "selenium_wire-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3fe649aaab861cd6f83e3a9cfe313a9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 808248, "upload_time": "2018-09-20T15:13:57", "upload_time_iso_8601": "2018-09-20T15:13:57.027643Z", "url": "https://files.pythonhosted.org/packages/a8/b7/7d4339128ac00fd4a4daa40d562cf6cecc08fca7a7d7de8d57ab23c41501/selenium_wire-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cce2ac4879c4b0d5ffd307206ef2b84a", "sha256": "5e129ff57446a130115d30961a668eb8394a521f2434200d13f258d8f2c78cbe"}, "downloads": -1, "filename": "selenium-wire-0.8.0.tar.gz", "has_sig": false, "md5_digest": "cce2ac4879c4b0d5ffd307206ef2b84a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 816581, "upload_time": "2018-09-20T15:13:59", "upload_time_iso_8601": "2018-09-20T15:13:59.504938Z", "url": "https://files.pythonhosted.org/packages/48/0a/c09755bb46db6d01775bc9f73f2b22247e62af93ca81041c4f93017bb392/selenium-wire-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "0c3d53d5a9091d25bbf1503d225f572e", "sha256": "b61c15fb1bbaed31a75b96b2940d3709a20fccca395717aad754fca395c8600b"}, "downloads": -1, "filename": "selenium_wire-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c3d53d5a9091d25bbf1503d225f572e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 811114, "upload_time": "2018-10-28T14:15:35", "upload_time_iso_8601": "2018-10-28T14:15:35.803369Z", "url": "https://files.pythonhosted.org/packages/48/3a/6709555766c12abc20911d5d921e3a1e7dd63849d655b351f1c04686d17f/selenium_wire-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efdaaef8acae8acaee114ccae4f1585e", "sha256": "9229b3518499b5acdca346650e001f1eca1393050d0df41ad9983ace58d1d299"}, "downloads": -1, "filename": "selenium-wire-0.9.0.tar.gz", "has_sig": false, "md5_digest": "efdaaef8acae8acaee114ccae4f1585e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 823966, "upload_time": "2018-10-28T14:15:37", "upload_time_iso_8601": "2018-10-28T14:15:37.884807Z", "url": "https://files.pythonhosted.org/packages/d6/e1/bd0f0db32909441707d1fc34f7dcbbc5b1cfc6691692198920aa196e5f8a/selenium-wire-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f2301f1b8fef550098d5a0f68e19dfe9", "sha256": "0a1f1e01455fc8d4f0429508ed82f4120e6a60843bbcafeeb48dd830a4c890a1"}, "downloads": -1, "filename": "selenium_wire-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2301f1b8fef550098d5a0f68e19dfe9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 811256, "upload_time": "2018-12-31T09:32:56", "upload_time_iso_8601": "2018-12-31T09:32:56.108933Z", "url": "https://files.pythonhosted.org/packages/fb/64/7803440c75488629ea80b95e70be7dcf6a2f5cd5b372ac7fe8c5e569fea2/selenium_wire-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e76c10678a563f2aa93f0613756795a5", "sha256": "a57ee38169c6d1da6522f4d55a3cd627bdccbedd84c1035b68c3f12faf5e328f"}, "downloads": -1, "filename": "selenium-wire-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e76c10678a563f2aa93f0613756795a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 825691, "upload_time": "2018-12-31T09:32:58", "upload_time_iso_8601": "2018-12-31T09:32:58.414922Z", "url": "https://files.pythonhosted.org/packages/c8/f4/a7f7b504191f9fcbbe4c7edadc05c6e63fe97c168cd366a1de6dc9e396c5/selenium-wire-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "255a01d4a7b095121b28a80cd7511c5a", "sha256": "a35837a25c7046833d4c022de03309336c7b3f5055d0b8db267f2f3e9829c7c6"}, "downloads": -1, "filename": "selenium_wire-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "255a01d4a7b095121b28a80cd7511c5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 811278, "upload_time": "2019-02-07T14:24:12", "upload_time_iso_8601": "2019-02-07T14:24:12.835925Z", "url": "https://files.pythonhosted.org/packages/17/5c/5b81b5a644f87b9e4a8947c788cc7ae2a626d4af6157c6ae4bd021fe9575/selenium_wire-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1e4e80ec11c7a18e110c367a48dacb5", "sha256": "dd52803e4624ae460e0c263191a301aa2d1a08e669c36132b34ee6540f4bdf7c"}, "downloads": -1, "filename": "selenium-wire-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f1e4e80ec11c7a18e110c367a48dacb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 825770, "upload_time": "2019-02-07T14:24:14", "upload_time_iso_8601": "2019-02-07T14:24:14.821693Z", "url": "https://files.pythonhosted.org/packages/5a/f9/d924fa5d58e0ddf1a01d5711a91a80f05508b9b5c4f7b30c779dcc9037be/selenium-wire-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "eb3be7b8baa4bf6b1f82ac7051fa8f7b", "sha256": "b14c4f94f5be1d49815c80e2d50bfee5ffd61274375171d7b72aec25c5d8ff12"}, "downloads": -1, "filename": "selenium_wire-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "eb3be7b8baa4bf6b1f82ac7051fa8f7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 812668, "upload_time": "2019-09-22T15:13:57", "upload_time_iso_8601": "2019-09-22T15:13:57.615017Z", "url": "https://files.pythonhosted.org/packages/c7/de/f25ba2bfabe70bd3b45b97dce7bc5af5509a0558310c3a579b691a117a5f/selenium_wire-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a9e3474ef237278b008fd83d92d96b8", "sha256": "f474d56b9f72413ca67e20e85c7a76191bad7dd0bb0080cccbf25729b5fce8cd"}, "downloads": -1, "filename": "selenium-wire-1.0.10.tar.gz", "has_sig": false, "md5_digest": "4a9e3474ef237278b008fd83d92d96b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 821489, "upload_time": "2019-09-22T15:14:00", "upload_time_iso_8601": "2019-09-22T15:14:00.214580Z", "url": "https://files.pythonhosted.org/packages/74/c9/39fe257608d0e93b9349c1179be2dced73e5cb40e651f177b88035055e37/selenium-wire-1.0.10.tar.gz", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "7414eaadda353a4f98f68e2ecd8cea78", "sha256": "0904e2aded41226d52d9e670349a3b094341296fe6ce26eb7f666e02f9a8867c"}, "downloads": -1, "filename": "selenium_wire-1.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "7414eaadda353a4f98f68e2ecd8cea78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 812706, "upload_time": "2019-12-31T09:33:19", "upload_time_iso_8601": "2019-12-31T09:33:19.391191Z", "url": "https://files.pythonhosted.org/packages/3a/ec/2381d89f14b81a8445af06a1eebd528cf03aeaf72d19c8d632dcd188017c/selenium_wire-1.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd8892da5cb3cf66e648fd40d669ca82", "sha256": "b3152abd0a5556711e3466e59f877bf17eb17ec6c4339e6f6774dacd0d8cddbf"}, "downloads": -1, "filename": "selenium-wire-1.0.11.tar.gz", "has_sig": false, "md5_digest": "bd8892da5cb3cf66e648fd40d669ca82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 821559, "upload_time": "2019-12-31T09:33:22", "upload_time_iso_8601": "2019-12-31T09:33:22.109256Z", "url": "https://files.pythonhosted.org/packages/f7/2f/c93ff4cdf9d55cf87c0e9c51f5890b1bd421360d58640e868a8c129fdc44/selenium-wire-1.0.11.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "b78acb59d1776fd37d0e66f72b7fc332", "sha256": "8dfc8bf648fbd9c4c88881af289452cfc59c5550b913dfac8a0b5fe50b9b3e13"}, "downloads": -1, "filename": "selenium_wire-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b78acb59d1776fd37d0e66f72b7fc332", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 811812, "upload_time": "2019-03-10T21:48:12", "upload_time_iso_8601": "2019-03-10T21:48:12.938341Z", "url": "https://files.pythonhosted.org/packages/3b/e2/214ec6a410e4bc9e5c302ce93acda2230906c54910684fc3a9ed22e54652/selenium_wire-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "590c548994cc4ba5265ac02c90ae738d", "sha256": "27461915101a5341168101ab7624d2e750a46574006ac4825f6d69ac23a57cd4"}, "downloads": -1, "filename": "selenium-wire-1.0.2.tar.gz", "has_sig": false, "md5_digest": "590c548994cc4ba5265ac02c90ae738d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 826825, "upload_time": "2019-03-10T21:48:14", "upload_time_iso_8601": "2019-03-10T21:48:14.845693Z", "url": "https://files.pythonhosted.org/packages/63/ca/3888772229bd208f52b71172194f0fe71a24dc9e25e2b6a9f37e344dbd8f/selenium-wire-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "e7fca6ccbbce61761cd7f4bf29b7c810", "sha256": "becb0254f81b3208735f29196999e5fcec18713f0e281b28e85cdd0a6ed56954"}, "downloads": -1, "filename": "selenium_wire-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e7fca6ccbbce61761cd7f4bf29b7c810", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 811771, "upload_time": "2019-04-01T16:05:17", "upload_time_iso_8601": "2019-04-01T16:05:17.374185Z", "url": "https://files.pythonhosted.org/packages/7d/96/c3c2795ff24d8d6cd95c8cad4606f28d23780d02e19c1ec5e621a97ed7d3/selenium_wire-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dfd74e35b02d49ded0ef51cea8c168b", "sha256": "a250f30b7ae0053a7498617f3840b48930cb9e3bf61ec87a3bbf9f6c7eedaefa"}, "downloads": -1, "filename": "selenium-wire-1.0.3.tar.gz", "has_sig": false, "md5_digest": "8dfd74e35b02d49ded0ef51cea8c168b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 826897, "upload_time": "2019-04-01T16:05:19", "upload_time_iso_8601": "2019-04-01T16:05:19.217628Z", "url": "https://files.pythonhosted.org/packages/c8/ee/c3472f450099a83f0bb3b72f7c7b4294385605aec7ecda31c9a5de940f27/selenium-wire-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "5386e8a9d8a4ec8bce125ecea715ec04", "sha256": "70a208fc8c72040c2d189a54d4aeefdc509054dbc9bf2269c4dc8ab577b157af"}, "downloads": -1, "filename": "selenium_wire-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "5386e8a9d8a4ec8bce125ecea715ec04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 812091, "upload_time": "2019-04-04T13:33:37", "upload_time_iso_8601": "2019-04-04T13:33:37.815296Z", "url": "https://files.pythonhosted.org/packages/23/32/c635e7eb3d48605a1c5d3e0f10183f72d75ead96197416178e023001721c/selenium_wire-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a928bcdfc266e2018021b01d5d70eaff", "sha256": "639f1f0ad32528608a904d06d7e0e8ea2d1c1a44c03770e107f34f7bc2fb678b"}, "downloads": -1, "filename": "selenium-wire-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a928bcdfc266e2018021b01d5d70eaff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 827644, "upload_time": "2019-04-04T13:33:39", "upload_time_iso_8601": "2019-04-04T13:33:39.582300Z", "url": "https://files.pythonhosted.org/packages/2b/23/4434868dd61ef0b9efd4f6b3402fc35e0c3e9d415f52320091dd573d392e/selenium-wire-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "e745524350583029c5c9af8ca52b94db", "sha256": "b7fa44e03a9bc303e8c7ee8ce08ad3903bbc8b0e15abb299d0a30b608df3d25f"}, "downloads": -1, "filename": "selenium_wire-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e745524350583029c5c9af8ca52b94db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 812081, "upload_time": "2019-06-15T07:32:27", "upload_time_iso_8601": "2019-06-15T07:32:27.493364Z", "url": "https://files.pythonhosted.org/packages/35/0a/dc420ce1e94bc21663d37053673d8ee4023410853da7fa7a6831ed4de2f1/selenium_wire-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb534c639628424c0aadc53765e5a4f3", "sha256": "3ab2e50049a1c5967f8d8410cce82d2b75ae18f45284700a17fc759ab3ae52f4"}, "downloads": -1, "filename": "selenium-wire-1.0.5.tar.gz", "has_sig": false, "md5_digest": "cb534c639628424c0aadc53765e5a4f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 828148, "upload_time": "2019-06-15T07:32:29", "upload_time_iso_8601": "2019-06-15T07:32:29.910808Z", "url": "https://files.pythonhosted.org/packages/db/71/8e721ffa754480e4fecd614735568c2cf1ba3dc2edf18dc472d83d5b8f6f/selenium-wire-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "911d18d31b2f258213d1092a2acd6be4", "sha256": "a8c7772856e0c776d85682aef88093cd1fc5f590349a614233f3358b21e60f23"}, "downloads": -1, "filename": "selenium_wire-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "911d18d31b2f258213d1092a2acd6be4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 812268, "upload_time": "2019-07-14T07:53:46", "upload_time_iso_8601": "2019-07-14T07:53:46.094255Z", "url": "https://files.pythonhosted.org/packages/26/df/f8d1043656edd0b7ce9fd77ea3fba06a3d95aaefa5dec0d1db1e864ade03/selenium_wire-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a40cbcfbb160623135fd45f59d4001b5", "sha256": "d9918dc33c2682ba7abb7bc9c971e8dabcb6ab8cc4b114050ec89f84fda54c3b"}, "downloads": -1, "filename": "selenium-wire-1.0.6.tar.gz", "has_sig": false, "md5_digest": "a40cbcfbb160623135fd45f59d4001b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 828617, "upload_time": "2019-07-14T07:53:48", "upload_time_iso_8601": "2019-07-14T07:53:48.506907Z", "url": "https://files.pythonhosted.org/packages/ae/c8/a35caa63dd98b8c3a4aaf8774f0765ffa3fcc9c6589b95b0942177d67a85/selenium-wire-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "873419988f2fde054d91dca28c195bce", "sha256": "6d1e8604c5d19c7d6ec41b04b5c722e35b334b57c841ef776af934c4c82d16a6"}, "downloads": -1, "filename": "selenium_wire-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "873419988f2fde054d91dca28c195bce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 812337, "upload_time": "2019-07-30T20:28:01", "upload_time_iso_8601": "2019-07-30T20:28:01.239095Z", "url": "https://files.pythonhosted.org/packages/c7/88/f10a659e9194537a9d7a44cee6e254ce2447b77218955fed92e08e761e83/selenium_wire-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba58deb691ab6303609298e7757a99dd", "sha256": "e09e2a66225a585479d7ee609481068b5143f39c3d979a7d25afa5c5927009a4"}, "downloads": -1, "filename": "selenium-wire-1.0.7.tar.gz", "has_sig": false, "md5_digest": "ba58deb691ab6303609298e7757a99dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 821403, "upload_time": "2019-07-30T20:28:04", "upload_time_iso_8601": "2019-07-30T20:28:04.039117Z", "url": "https://files.pythonhosted.org/packages/a4/bc/5aba640382c1fa9db0489e6eb6396a7387f4c59609fda48c75293c299fde/selenium-wire-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "38019d79b3f75c1b252652d82f5e3c21", "sha256": "cf1a7eb0b3802f6bacf944a0b94a86b8e088813d90a2075b040ee0b2ffcc3c3c"}, "downloads": -1, "filename": "selenium_wire-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "38019d79b3f75c1b252652d82f5e3c21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 812488, "upload_time": "2019-08-01T20:27:09", "upload_time_iso_8601": "2019-08-01T20:27:09.139091Z", "url": "https://files.pythonhosted.org/packages/5f/06/3131244ba9687820858dd8569f988e5d89233a8c5519e10d4c9bb3c96eb6/selenium_wire-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5b49e843e7f00cbe46a9c4c4f75c9f1", "sha256": "468a369f36b4d1b7e5e2a443d4ef9fb28aa891c3f33863709935c2d6d2225fff"}, "downloads": -1, "filename": "selenium-wire-1.0.8.tar.gz", "has_sig": false, "md5_digest": "a5b49e843e7f00cbe46a9c4c4f75c9f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 828506, "upload_time": "2019-08-01T20:27:12", "upload_time_iso_8601": "2019-08-01T20:27:12.050784Z", "url": "https://files.pythonhosted.org/packages/0d/ba/e1e827dd4fb17a68c454e935ae3502a7e18da0ffd348b8315cb670fdd9fe/selenium-wire-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "26956e3feaf73f2e654966d0a01a4a62", "sha256": "b550c4e61c713f4e19a758f826adfbbfacde208fde4e5e29684d9e60f5639218"}, "downloads": -1, "filename": "selenium_wire-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "26956e3feaf73f2e654966d0a01a4a62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 811555, "upload_time": "2019-08-25T10:36:03", "upload_time_iso_8601": "2019-08-25T10:36:03.310271Z", "url": "https://files.pythonhosted.org/packages/e6/88/aeceeb4317a9fee4a6bd5a5d14aaa54466300c7d560897f1bd069c6c8401/selenium_wire-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "999a248024fe288cd6ec81453a60269a", "sha256": "dd4fc1b0c98b17675220a67c8f5566f46d5b40a8799b6f32e4353ab15fc46260"}, "downloads": -1, "filename": "selenium-wire-1.0.9.tar.gz", "has_sig": false, "md5_digest": "999a248024fe288cd6ec81453a60269a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 819439, "upload_time": "2019-08-25T10:36:06", "upload_time_iso_8601": "2019-08-25T10:36:06.444914Z", "url": "https://files.pythonhosted.org/packages/aa/ce/8c988a73b0cdb52bf000bd9dac1e2523e8fc65163c1e23ebf58313c921cf/selenium-wire-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7414eaadda353a4f98f68e2ecd8cea78", "sha256": "0904e2aded41226d52d9e670349a3b094341296fe6ce26eb7f666e02f9a8867c"}, "downloads": -1, "filename": "selenium_wire-1.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "7414eaadda353a4f98f68e2ecd8cea78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 812706, "upload_time": "2019-12-31T09:33:19", "upload_time_iso_8601": "2019-12-31T09:33:19.391191Z", "url": "https://files.pythonhosted.org/packages/3a/ec/2381d89f14b81a8445af06a1eebd528cf03aeaf72d19c8d632dcd188017c/selenium_wire-1.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd8892da5cb3cf66e648fd40d669ca82", "sha256": "b3152abd0a5556711e3466e59f877bf17eb17ec6c4339e6f6774dacd0d8cddbf"}, "downloads": -1, "filename": "selenium-wire-1.0.11.tar.gz", "has_sig": false, "md5_digest": "bd8892da5cb3cf66e648fd40d669ca82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 821559, "upload_time": "2019-12-31T09:33:22", "upload_time_iso_8601": "2019-12-31T09:33:22.109256Z", "url": "https://files.pythonhosted.org/packages/f7/2f/c93ff4cdf9d55cf87c0e9c51f5890b1bd421360d58640e868a8c129fdc44/selenium-wire-1.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:27 2020"}