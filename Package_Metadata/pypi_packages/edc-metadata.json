{"info": {"author": "Erik van Widenfelt", "author_email": "ew2789@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "|pypi| |travis| |codecov| |downloads|\n\nedc_metadata\n------------\n\n``edc-metadata`` puts a \"metadata\" layer on top of your data collection forms, namely CRFs and Requisitions. The \"metadata\" is used on the data entry dashboard (see also `edc_dashboard`). The metadata may be queried directly by a data manager to review the completion status of CRF and Requisition forms.\n\n* Metadata is stored in two models, ``CrfMetaData`` and ``RequisitionMetaData``. One metadata record is created per form per visit. Metadata is only created for the data collection forms of a visit as defined in the ``visit schedule``.\n* Metadata model instances are created for each visit when the ``visit`` model is saved. ``edc_metadata`` reads from the ``visit_schedule`` to decide which data collection form metadata model instances to create for a visit. (Note: See ``edc_visit_schedule``)  \n* Metadata is guaranteed to exist for every form defined in a visit after the visit form has been submitted.\n\n\n Note: This module is coupled with ``edc_metadata_files`` and ``edc_reference``.\n\n``metadata`` model instances\n============================\n\nEach  ``metadata`` model instance, ``CrfMetadata`` or ``RequisitionMetadata``, is managed by an actual CRF or REQUISITION model listed in the ``visit_schedule``. \n``CrfMetadata` model instances are created for each CRF listed in the visit schedule. That is, if the visit schedule schedules a CRF for 5 different visits, 5 ``CrfMetadata` model instances will eventually be created. Metadata model instances are created when the ``visit`` model for a timepoint is saved.\nWhen you  ``save`` a CRF within a visit, the ``entry_status`` of the the metadata instance's it manages is updated from ``REQUIRED`` to ``KEYED``.\n\n    The same applies to ``RequisitionMetadata`` for REQUISITIONS.   \n\nEntry status\n============\n\nBy default the ``entry_status`` field attribute is set to ``REQUIRED``. You can change the default of each CRF to ``NOT_REQUIRED`` in your declaration in the visit schedule.  See ``visit_schedule.crf``.\n\n    The same applies to REQUISITIONS.   \n\n\n``metadata_rules`` manipulate ``metadata`` model instances\n==========================================================\n\n``metadata_rules`` are declared to manipulate ``metadata`` model instances. The rules change the ``entry_status`` field attribute from ``REQUIRED`` to ``NOT_REQUIRED`` or visa-versa. \nIf the manager of the metadata instance, the CRF or REQUISITION model instance, exists, the entry status is updated to ``KEYED``and the ``metadata_rules`` targeting the metadata instance are ignored.\n``metadata rules`` are run on each ``save`` of the visit and managing model instances.\nIf a value on some other form implies that your form should not be completed, your form's metadata \"entry_status\" will change from REQUIRED to NOT REQUIRED upon ``save`` of the other form.\nMetadata is ``updated`` through a ``post_save`` signal that re-runs the ``metadata rules``.\n\n    See also ``edc_metadata_rules``\n\n\n``metadata_rules`` access data through ``edc_reference``\n========================================================\n\nIn order to de-couple the ``metadata rules`` from each managing model class, ``metadata rules`` access the field values for each model via ``edc_reference`` instead of directly from the model. It would be too complex and resource intensive to directly query each model separately every time the ``metadata rules`` are run.\nEach managing model class referenced by ``metadata rules`` must be declared with the ``ReferenceModelMixin`` and the fields list registered with ``site_reference_configs`` global. This applies to all managing models, ``source_model`` and ``target_models``. \n\n    See also ``edc_reference``\n\n\nGetting started\n---------------\n\nModels: Visit, Crfs and Requisitions\n====================================\n\nLet's prepare the models that will be used in the scheduled data collection. These models are your visit models, crf models and requisition models.\n\nYour application also has one or more ``Visit`` models. Each visit model is declared with the ``CreatesMetadataModelMixin``:\n\n.. code-block:: python\n\n    class SubjectVisit(CreatesMetadataModelMixin, PreviousVisitMixin, VisitModelMixin,\n                       RequiresConsentModelMixin, BaseUuidModel):\n\n        appointment = models.OneToOneField(Appointment)\n\n        class Meta(RequiresConsentModelMixin.Meta):\n            app_label = 'example'\n\nYour ``Crf`` models are declared with the ``CrfModelMixin`` and ``ReferenceModelMixin``:\n\n.. code-block:: python\n\n    class CrfOne(CrfModelMixin, ReferenceModelMixin, BaseUuidModel):\n\n        subject_visit = models.ForeignKey(SubjectVisit)\n\n        f1 = models.CharField(max_length=10, default='erik')\n\n        class Meta:\n            app_label = 'example'\n\nYour ``Requisition`` models are declared with the ``RequisitionModelMixin`` and ``ReferenceModelMixin``:\n\n.. code-block:: python\n\n    class SubjectRequisition(RequisitionModelMixin, ReferenceModelMixin, BaseUuidModel):\n\n        subject_visit = models.ForeignKey(SubjectVisit)\n\n        f1 = models.CharField(max_length=10, default='erik')\n\n        class Meta:\n            app_label = 'example'\n\nmetadata_rules\n--------------\n\nAs described above, ``metadata_rules`` manipulate the ``entry_status`` of CRF and Requisition ``metadata``. ``metadata_rules`` are registered to ``site_metadata_rules`` in module ``metadata_rules.py``. Place this file in the root of your app. Each app can have one ``metadata_rules.py``.\n\n See also ``edc_metadata_rules``\n\nautodiscovering metadata_rules\n==============================\n\nAppConfig will ``autodiscover`` the rule files and print to the console whatever it finds:\n\n* checking for metadata_rules ...\n* registered metadata_rules from application 'edc_example'\n\nInspect metadata_rules\n======================\n\nInspect ``metadata_rules`` from the site registry:\n\n.. code-block:: python\n\n    >>> from edc_metadata.rules.site_metadata_rules import site_metadata_rules\n\n    >>> for rule_groups in site_metadata_rules.registry.values():\n    >>>    for rule_group in rule_groups:\n    >>>        print(rule_group._meta.rules)\n\n    (<edc_example.rule_groups.ExampleRuleGroup: crfs_male>, <edc_example.rule_groups.ExampleRuleGroup: crfs_female>)\n    (<edc_example.rule_groups.ExampleRuleGroup2: bicycle>, <edc_example.rule_groups.ExampleRuleGroup2: car>)    \n\nWriting metadata_rules\n======================\n\n``metadata_rules`` are declared in a ``RuleGroup``. The syntax is similar to the ``django`` model class. \n\nLet's start with an example from the perspective of the person entering subject data. On a dashboard there are 4 forms (models) to complete. The \"rule\" is that if the subject is male, only the first two forms should be complete. If the subject is female, only the last two forms should be complete. So the metadata should show:\n\n**Subject is Male:**\n\n* crf_one - REQUIRED, link to entry screen available\n* crf_two - REQUIRED, link to entry screen available\n* crf_three - NOT REQUIRED, link to entry screen not available\n* crf_four - NOT REQUIRED, link to entry screen not available\n\n**Subject is Female:**\n\n* crf_one - NOT REQUIRED\n* crf_two - NOT REQUIRED\n* crf_three - REQUIRED\n* crf_four - REQUIRED\n\nA ``Rule`` that changes the ``metadata`` if the subject is male would look like this:\n\n.. code-block:: python\n\n    crfs_male = CrfRule(\n        predicate=P('gender', 'eq', 'MALE'),\n        consequence=REQUIRED,\n        alternative=NOT_REQUIRED,\n        target_models=['crfone', 'crftwo'])\n\nThe rule above has a ``predicate`` that evaluates to True or not. If ``gender`` is equal to ``MALE`` the consequence is ``REQUIRED``, else ``NOT_REQUIRED``. For this rule, for a MALE, the metadata ``entry_status`` for ``crf_one`` and ``crf_two`` will be updated to ``REQUIRED``. For a FEMALE both will be set to ``NOT_REQUIRED``.\n\nRules are declared as attributes of a RuleGroup much like fields in a ``django`` model:\n\n.. code-block:: python\n\n    @register()\n    class ExampleRuleGroup(CrfRuleGroup):\n\n        crfs_male = CrfRule(\n            predicate=P('gender', 'eq', 'MALE'),\n            consequence=REQUIRED,\n            alternative=NOT_REQUIRED,\n            target_models=['crfone', 'crftwo'])\n\n        crfs_female = CrfRule(\n            predicate=P('gender', 'eq', FEMALE),\n            consequence=REQUIRED,\n            alternative=NOT_REQUIRED,\n            target_models=['crfthree', 'crffour'])\n\n        class Meta:\n            app_label = 'edc_example'\n\n``RuleGroup`` class declarations are placed in file ``metadata_rules.py`` in the root of your application. They are registered in the order in which they appear in the file. All rule groups are available from the ``site_metadata_rules`` global.\n\nMore on Rules\n=============\n\nThe rule ``consequence`` and ``alternative`` except these values:\n\n.. code-block:: python\n\n    from edc_metadata.constants import REQUIRED, NOT_REQUIRED\n    from edc_metadata.rules.constants import DO_NOTHING\n\n* REQUIRED\n* NOT_REQUIRED\n* DO_NOTHING \n\nIt is recommended to write the logic so that the ``consequence`` is REQUIRED if the ``predicate`` evaluates to  ``True``.\n\nIn the examples above, the rule ``predicate`` can only access values that can be found on the subjects's current ``visit`` instance or ``registered_subject`` instance. If the value you need for the rule ``predicate`` is not on either of those instances, you can pass a ``source_model``. With the ``source_model`` declared you would have these data available:\n\n* current visit model instance\n* registered subject (see ``edc_registration``)\n* source model instance for the current visit\n\nLet's say the rules changes and instead of refering to ``gender`` (male/female) you wish to refer to the value field of ``favorite_transport`` on model ``CrfTransport``. ``favorite_transport`` can be \"car\" or \"bicycle\". You want the first rule ``predicate`` to read as:\n\n* \"If ``favorite_transport`` is equal to ``bicycle`` then set the metadata ``entry_status`` for ``crf_one`` and ``crf_two`` to REQUIRED, if not, set both to NOT_REQUIRED\" \n\nand the second to read as:\n\n* \"If ``favorite_transport`` is equal to ``car`` then set the metadata ``entry_status`` for ``crf_three`` and ``crf_four`` to REQUIRED, if not, set both to NOT_REQUIRED\".\n\nThe field for car/bicycle, ``favorite_transport`` is on model ``CrfTransport``. The RuleGroup might look like this: \n\n.. code-block:: python\n\n    @register()\n    class ExampleRuleGroup(RuleGroup):\n\n        bicycle = CrfRule(\n            predicate=P('favorite_transport', 'eq', 'bicycle'),\n            consequence=REQUIRED,\n            alternative=NOT_REQUIRED,\n            target_models=['crfone', 'crftwo'])\n\n        car = CrfRule(\n            predicate=P('favorite_transport', 'eq', car),\n            consequence=REQUIRED,\n            alternative=NOT_REQUIRED,\n            target_models=['crfthree', 'crffour'])\n\n        class Meta:\n            app_label = 'edc_example'\n            source_model = 'CrfTransport'\n\nNote that ``CrfTransport`` is a ``crf`` model in the Edc. That is, it has a ``foreign key`` to the visit model. Internally the query will be constructed like this:\n\n.. code-block:: python\n\n    # source model instance for the current visit \n    visit_attr = 'subject_visit'\n    source_obj = CrfTansport.objects.get(**{visit_attr: visit}) \n\n    # queryset of source model for the current subject_identifier\n    visit_attr = 'subject_visit'\n    source_qs = CrfTansport.objects.filter(**{'{}__subject_identifier'.format(visit_attr): subject_identifier}) \n\n* If the source model instance does not exist, the rules in the rule group will not run. \n* If the target model instance exists, no rule can change it's metadata from KEYED. \n\nMore Complex Rule Predicates\n============================\n\nThere are two provided classes for the rule ``predicate``, ``P`` and ``PF``. With ``P`` you can make simple rule predicates like those used in the examples above. All standard opertors can be used. For example:\n\n.. code-block:: python\n\n    predicate = P('gender', 'eq', 'MALE')\n    predicate = P('referral_datetime', 'is not', None)\n    predicate = P('age', '<=', 64)\n\nIf the logic needs to a bit more complicated, the ``PF`` class allows you to pass a ``lambda`` function directly:\n\n.. code-block:: python\n\n    predicate = PF('age', func=lambda x: True if x >= 18 and x <= 64 else False)\n\n    predicate = PF('age', 'gender', func=lambda x, y: True if x >= 18 and x <= 64 and y == MALE else False)\n\nIf the logic needs to be more complicated than is recommended for a simple lambda, you can just pass a function. When writing your function just remember that the rule ``predicate`` must always evaluate to True or False. \n\n.. code-block:: python\n\n    def my_func(visit, registered_subject, source_obj, source_qs):\n        if source_obj.married and registered_subject.gender == FEMALE:\n            return True\n        return False\n\n    predicate = my_func\n\n\nRule Group Order\n================\n\n    **IMPORTANT**: RuleGroups are evaluated in the order they are registered and the rules within each rule group are evaluated in the order they are declared on the RuleGroup.\n\n\nTesting\n=======\n\nSince the order in which rules run matters, it is essential to test the rules together. See ``tests`` for some examples. When writing tests it may be helpful to know the following:\n\n* the standard Edc model configuration assumes you have consent->enrollment->appointments->visit->crfs and requisitions. \n* rules can be instected after boot up in the global registry ``site_metadata_rules``.\n* all rules are run when the visit  is saved.\n\nMore examples\n=============\n\nSee ``edc_example`` for working RuleGroups and how models are configured with the ``edc_metadata`` mixins. The ``tests`` in ``edc_metadata.rules`` use the rule group and model classes in ``edc_example``. \n\n\nNotes on Edc \n============\n\nThe standard Edc model configuration assumes you have a data entry flow like this:::\n\n    consent->enrollment->appointment->visit (1000)->crfs and requisitions\n                         appointment->visit (2000)->crfs and requisitions\n                         appointment->visit (3000)->crfs and requisitions\n                         appointment->visit (4000)->crfs and requisitions\n\nYou should also see the other dependencies, ``edc_consent``, ``edc_visit_schedule``, ``edc_appointment``, ``edc_visit_tracking``, ``edc_metadata``, etc.\n\nSignals\n=======\n\nIn the ``signals`` file: \n\n**visit model ``post_save``:**\n\n* Metadata is created for a particular visit and visit code, e.g. 1000, when the ``visit`` model is saved for a subject and visit code using the default ``entry_status`` configured in the ``visit_schedule``.\n* Immediately after creating metadata, all rules for the ``app_label`` are run in order. The ``app_label`` is the ``app_label`` of the visit model.\n\n**crf or requisition model ``post_save``:**\n\n* the metadata instance for the crf/requisition is updated and then all rules are run.\n\n**crf or requisition model ``post_delete``:**\n\n* the metadata instance for the crf/requisition is reset to the default ``entry_status`` and then all rules are run.\n\n\nChanging visit_schedule name and/ or schedule name\n==================================================\n\n\nIf the visit_schedule_name or schedule_name changes, the existing metadata must be manually updated. For example;\n\n\n.. code-block:: sql\n\n    update edc_metadata_crfmetadata set visit_schedule_name='visit_schedule'\n    where visit_schedule_name='old_visit_schedule';\n\n    update edc_metadata_crfmetadata set schedule_name='schedule'\n    where schedule_name='old_schedule';\n\n    update edc_metadata_requisitionmetadata set visit_schedule_name='visit_schedule'\n    where visit_schedule_name='old_visit_schedule';\n\n    update edc_metadata_requisitionmetadata set schedule_name='schedule'\n    where schedule_name='old_schedule';\n\nYou also need to update any existing enrollment and disenrollment model data. For example;\n\n.. code-block:: sql\n\n    update ambition_subject_enrollment set visit_schedule_name='visit_schedule'\n    where visit_schedule_name='old_visit_schedule';\n\n    update ambition_subject_enrollment set schedule_name='schedule'\n    where schedule_name='old_schedule';\n\nFor any other table that use these fields:\n\n.. code-block:: sql\n\n    SELECT DISTINCT TABLE_NAME \n        FROM INFORMATION_SCHEMA.COLUMNS\n        WHERE COLUMN_NAME IN ('visit_schedule_name','schedule_name')\n            AND TABLE_SCHEMA='edc';\n\nA typical list of tables that need to be updated may look like this::\n\n    +------------------------------------------+\n    | TABLE_NAME                               |\n    +------------------------------------------+\n    | ambition_subject_disenrollment           |\n    | ambition_subject_enrollment              |\n    | ambition_subject_historicaldisenrollment |\n    | ambition_subject_historicalenrollment    |\n    | ambition_subject_historicalsubjectvisit  |\n    | ambition_subject_subjectvisit            |\n    | edc_appointment_appointment              |\n    | edc_appointment_historicalappointment    |\n    | edc_metadata_crfmetadata                 |\n    | edc_metadata_requisitionmetadata         |\n    +------------------------------------------+\n\nIn the code you need to update where the visit_schedule or schedule are hard coded.\n\n* visit schedule, schedule\n* Meta attributes on the enrollment and disenrollment models.\n\n\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/edc-metadata.svg\n    :target: https://pypi.python.org/pypi/edc-metadata\n\n.. |travis| image:: https://travis-ci.com/clinicedc/edc-metadata.svg?branch=develop\n    :target: https://travis-ci.com/clinicedc/edc-metadata\n\n.. |codecov| image:: https://codecov.io/gh/clinicedc/edc-metadata/branch/develop/graph/badge.svg\n  :target: https://codecov.io/gh/clinicedc/edc-metadata\n\n.. |downloads| image:: https://pepy.tech/badge/edc-metadata\n   :target: https://pepy.tech/project/edc-metadata\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github/clinicedc/edc-metadata", "keywords": "django Edc data entry metadata", "license": "GPL license, see LICENSE", "maintainer": "", "maintainer_email": "", "name": "edc-metadata", "package_url": "https://pypi.org/project/edc-metadata/", "platform": "", "project_url": "https://pypi.org/project/edc-metadata/", "project_urls": {"Homepage": "http://github/clinicedc/edc-metadata"}, "release_url": "https://pypi.org/project/edc-metadata/0.2.59/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Add a metadata layer to data entry.", "version": "0.2.59", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/edc-metadata\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca03149afae69e0dcafc7ba750c462a414b5905b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6564632d6d657461646174612e737667\"></a> <a href=\"https://travis-ci.com/clinicedc/edc-metadata\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddd860f7ae4c1035029322808c1bae1a20124a16/68747470733a2f2f7472617669732d63692e636f6d2f636c696e69636564632f6564632d6d657461646174612e7376673f6272616e63683d646576656c6f70\"></a> <a href=\"https://codecov.io/gh/clinicedc/edc-metadata\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68e92fa7734fad01caaf756115da5d1149c93f7f/68747470733a2f2f636f6465636f762e696f2f67682f636c696e69636564632f6564632d6d657461646174612f6272616e63682f646576656c6f702f67726170682f62616467652e737667\"></a> <a href=\"https://pepy.tech/project/edc-metadata\" rel=\"nofollow\"><img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b014c401c56c279e78572726c4eec1dc28d2409/68747470733a2f2f706570792e746563682f62616467652f6564632d6d65746164617461\"></a></p>\n<div id=\"edc-metadata\">\n<h2>edc_metadata</h2>\n<p><tt><span class=\"pre\">edc-metadata</span></tt> puts a \u201cmetadata\u201d layer on top of your data collection forms, namely CRFs and Requisitions. The \u201cmetadata\u201d is used on the data entry dashboard (see also <cite>edc_dashboard</cite>). The metadata may be queried directly by a data manager to review the completion status of CRF and Requisition forms.</p>\n<ul>\n<li>Metadata is stored in two models, <tt>CrfMetaData</tt> and <tt>RequisitionMetaData</tt>. One metadata record is created per form per visit. Metadata is only created for the data collection forms of a visit as defined in the <tt>visit schedule</tt>.</li>\n<li>Metadata model instances are created for each visit when the <tt>visit</tt> model is saved. <tt>edc_metadata</tt> reads from the <tt>visit_schedule</tt> to decide which data collection form metadata model instances to create for a visit. (Note: See <tt>edc_visit_schedule</tt>)</li>\n<li>Metadata is guaranteed to exist for every form defined in a visit after the visit form has been submitted.</li>\n</ul>\n<blockquote>\nNote: This module is coupled with <tt>edc_metadata_files</tt> and <tt>edc_reference</tt>.</blockquote>\n<div id=\"metadata-model-instances\">\n<h3><tt>metadata</tt> model instances</h3>\n<p>Each  <tt>metadata</tt> model instance, <tt>CrfMetadata</tt> or <tt>RequisitionMetadata</tt>, is managed by an actual CRF or REQUISITION model listed in the <tt>visit_schedule</tt>.\n<tt>CrfMetadata` model instances are created for each CRF listed in the visit schedule. That is, if the visit schedule schedules a CRF for 5 different visits, 5 ``CrfMetadata` model instances will eventually be created. Metadata model instances are created when the ``visit</tt> model for a timepoint is saved.\nWhen you  <tt>save</tt> a CRF within a visit, the <tt>entry_status</tt> of the the metadata instance\u2019s it manages is updated from <tt>REQUIRED</tt> to <tt>KEYED</tt>.</p>\n<blockquote>\nThe same applies to <tt>RequisitionMetadata</tt> for REQUISITIONS.</blockquote>\n</div>\n<div id=\"entry-status\">\n<h3>Entry status</h3>\n<p>By default the <tt>entry_status</tt> field attribute is set to <tt>REQUIRED</tt>. You can change the default of each CRF to <tt>NOT_REQUIRED</tt> in your declaration in the visit schedule.  See <tt>visit_schedule.crf</tt>.</p>\n<blockquote>\nThe same applies to REQUISITIONS.</blockquote>\n</div>\n<div id=\"metadata-rules-manipulate-metadata-model-instances\">\n<h3><tt>metadata_rules</tt> manipulate <tt>metadata</tt> model instances</h3>\n<p><tt>metadata_rules</tt> are declared to manipulate <tt>metadata</tt> model instances. The rules change the <tt>entry_status</tt> field attribute from <tt>REQUIRED</tt> to <tt>NOT_REQUIRED</tt> or visa-versa.\nIf the manager of the metadata instance, the CRF or REQUISITION model instance, exists, the entry status is updated to <tt><span class=\"pre\">KEYED``and</span> the ``metadata_rules</tt> targeting the metadata instance are ignored.\n<tt>metadata rules</tt> are run on each <tt>save</tt> of the visit and managing model instances.\nIf a value on some other form implies that your form should not be completed, your form\u2019s metadata \u201centry_status\u201d will change from REQUIRED to NOT REQUIRED upon <tt>save</tt> of the other form.\nMetadata is <tt>updated</tt> through a <tt>post_save</tt> signal that re-runs the <tt>metadata rules</tt>.</p>\n<blockquote>\nSee also <tt>edc_metadata_rules</tt></blockquote>\n</div>\n<div id=\"metadata-rules-access-data-through-edc-reference\">\n<h3><tt>metadata_rules</tt> access data through <tt>edc_reference</tt></h3>\n<p>In order to de-couple the <tt>metadata rules</tt> from each managing model class, <tt>metadata rules</tt> access the field values for each model via <tt>edc_reference</tt> instead of directly from the model. It would be too complex and resource intensive to directly query each model separately every time the <tt>metadata rules</tt> are run.\nEach managing model class referenced by <tt>metadata rules</tt> must be declared with the <tt>ReferenceModelMixin</tt> and the fields list registered with <tt>site_reference_configs</tt> global. This applies to all managing models, <tt>source_model</tt> and <tt>target_models</tt>.</p>\n<blockquote>\nSee also <tt>edc_reference</tt></blockquote>\n</div>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<h2 id=\"models-visit-crfs-and-requisitions\"><span class=\"section-subtitle\">Models: Visit, Crfs and Requisitions</span></h2>\n<p>Let\u2019s prepare the models that will be used in the scheduled data collection. These models are your visit models, crf models and requisition models.</p>\n<p>Your application also has one or more <tt>Visit</tt> models. Each visit model is declared with the <tt>CreatesMetadataModelMixin</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SubjectVisit</span><span class=\"p\">(</span><span class=\"n\">CreatesMetadataModelMixin</span><span class=\"p\">,</span> <span class=\"n\">PreviousVisitMixin</span><span class=\"p\">,</span> <span class=\"n\">VisitModelMixin</span><span class=\"p\">,</span>\n                   <span class=\"n\">RequiresConsentModelMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseUuidModel</span><span class=\"p\">):</span>\n\n    <span class=\"n\">appointment</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span><span class=\"n\">Appointment</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">RequiresConsentModelMixin</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s1\">'example'</span>\n</pre>\n<p>Your <tt>Crf</tt> models are declared with the <tt>CrfModelMixin</tt> and <tt>ReferenceModelMixin</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CrfOne</span><span class=\"p\">(</span><span class=\"n\">CrfModelMixin</span><span class=\"p\">,</span> <span class=\"n\">ReferenceModelMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseUuidModel</span><span class=\"p\">):</span>\n\n    <span class=\"n\">subject_visit</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">SubjectVisit</span><span class=\"p\">)</span>\n\n    <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'erik'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s1\">'example'</span>\n</pre>\n<p>Your <tt>Requisition</tt> models are declared with the <tt>RequisitionModelMixin</tt> and <tt>ReferenceModelMixin</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SubjectRequisition</span><span class=\"p\">(</span><span class=\"n\">RequisitionModelMixin</span><span class=\"p\">,</span> <span class=\"n\">ReferenceModelMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseUuidModel</span><span class=\"p\">):</span>\n\n    <span class=\"n\">subject_visit</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">SubjectVisit</span><span class=\"p\">)</span>\n\n    <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'erik'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s1\">'example'</span>\n</pre>\n</div>\n<div id=\"metadata-rules\">\n<h2>metadata_rules</h2>\n<p>As described above, <tt>metadata_rules</tt> manipulate the <tt>entry_status</tt> of CRF and Requisition <tt>metadata</tt>. <tt>metadata_rules</tt> are registered to <tt>site_metadata_rules</tt> in module <tt>metadata_rules.py</tt>. Place this file in the root of your app. Each app can have one <tt>metadata_rules.py</tt>.</p>\n<blockquote>\nSee also <tt>edc_metadata_rules</tt></blockquote>\n<div id=\"autodiscovering-metadata-rules\">\n<h3>autodiscovering metadata_rules</h3>\n<p>AppConfig will <tt>autodiscover</tt> the rule files and print to the console whatever it finds:</p>\n<ul>\n<li>checking for metadata_rules \u2026</li>\n<li>registered metadata_rules from application \u2018edc_example\u2019</li>\n</ul>\n</div>\n<div id=\"inspect-metadata-rules\">\n<h3>Inspect metadata_rules</h3>\n<p>Inspect <tt>metadata_rules</tt> from the site registry:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">edc_metadata.rules.site_metadata_rules</span> <span class=\"kn\">import</span> <span class=\"n\">site_metadata_rules</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">rule_groups</span> <span class=\"ow\">in</span> <span class=\"n\">site_metadata_rules</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n<span class=\"o\">&gt;&gt;&gt;</span>    <span class=\"k\">for</span> <span class=\"n\">rule_group</span> <span class=\"ow\">in</span> <span class=\"n\">rule_groups</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rule_group</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">rules</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">edc_example</span><span class=\"o\">.</span><span class=\"n\">rule_groups</span><span class=\"o\">.</span><span class=\"n\">ExampleRuleGroup</span><span class=\"p\">:</span> <span class=\"n\">crfs_male</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">edc_example</span><span class=\"o\">.</span><span class=\"n\">rule_groups</span><span class=\"o\">.</span><span class=\"n\">ExampleRuleGroup</span><span class=\"p\">:</span> <span class=\"n\">crfs_female</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">edc_example</span><span class=\"o\">.</span><span class=\"n\">rule_groups</span><span class=\"o\">.</span><span class=\"n\">ExampleRuleGroup2</span><span class=\"p\">:</span> <span class=\"n\">bicycle</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">edc_example</span><span class=\"o\">.</span><span class=\"n\">rule_groups</span><span class=\"o\">.</span><span class=\"n\">ExampleRuleGroup2</span><span class=\"p\">:</span> <span class=\"n\">car</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"writing-metadata-rules\">\n<h3>Writing metadata_rules</h3>\n<p><tt>metadata_rules</tt> are declared in a <tt>RuleGroup</tt>. The syntax is similar to the <tt>django</tt> model class.</p>\n<p>Let\u2019s start with an example from the perspective of the person entering subject data. On a dashboard there are 4 forms (models) to complete. The \u201crule\u201d is that if the subject is male, only the first two forms should be complete. If the subject is female, only the last two forms should be complete. So the metadata should show:</p>\n<p><strong>Subject is Male:</strong></p>\n<ul>\n<li>crf_one - REQUIRED, link to entry screen available</li>\n<li>crf_two - REQUIRED, link to entry screen available</li>\n<li>crf_three - NOT REQUIRED, link to entry screen not available</li>\n<li>crf_four - NOT REQUIRED, link to entry screen not available</li>\n</ul>\n<p><strong>Subject is Female:</strong></p>\n<ul>\n<li>crf_one - NOT REQUIRED</li>\n<li>crf_two - NOT REQUIRED</li>\n<li>crf_three - REQUIRED</li>\n<li>crf_four - REQUIRED</li>\n</ul>\n<p>A <tt>Rule</tt> that changes the <tt>metadata</tt> if the subject is male would look like this:</p>\n<pre><span class=\"n\">crfs_male</span> <span class=\"o\">=</span> <span class=\"n\">CrfRule</span><span class=\"p\">(</span>\n    <span class=\"n\">predicate</span><span class=\"o\">=</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"s1\">'MALE'</span><span class=\"p\">),</span>\n    <span class=\"n\">consequence</span><span class=\"o\">=</span><span class=\"n\">REQUIRED</span><span class=\"p\">,</span>\n    <span class=\"n\">alternative</span><span class=\"o\">=</span><span class=\"n\">NOT_REQUIRED</span><span class=\"p\">,</span>\n    <span class=\"n\">target_models</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'crfone'</span><span class=\"p\">,</span> <span class=\"s1\">'crftwo'</span><span class=\"p\">])</span>\n</pre>\n<p>The rule above has a <tt>predicate</tt> that evaluates to True or not. If <tt>gender</tt> is equal to <tt>MALE</tt> the consequence is <tt>REQUIRED</tt>, else <tt>NOT_REQUIRED</tt>. For this rule, for a MALE, the metadata <tt>entry_status</tt> for <tt>crf_one</tt> and <tt>crf_two</tt> will be updated to <tt>REQUIRED</tt>. For a FEMALE both will be set to <tt>NOT_REQUIRED</tt>.</p>\n<p>Rules are declared as attributes of a RuleGroup much like fields in a <tt>django</tt> model:</p>\n<pre><span class=\"nd\">@register</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExampleRuleGroup</span><span class=\"p\">(</span><span class=\"n\">CrfRuleGroup</span><span class=\"p\">):</span>\n\n    <span class=\"n\">crfs_male</span> <span class=\"o\">=</span> <span class=\"n\">CrfRule</span><span class=\"p\">(</span>\n        <span class=\"n\">predicate</span><span class=\"o\">=</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"s1\">'MALE'</span><span class=\"p\">),</span>\n        <span class=\"n\">consequence</span><span class=\"o\">=</span><span class=\"n\">REQUIRED</span><span class=\"p\">,</span>\n        <span class=\"n\">alternative</span><span class=\"o\">=</span><span class=\"n\">NOT_REQUIRED</span><span class=\"p\">,</span>\n        <span class=\"n\">target_models</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'crfone'</span><span class=\"p\">,</span> <span class=\"s1\">'crftwo'</span><span class=\"p\">])</span>\n\n    <span class=\"n\">crfs_female</span> <span class=\"o\">=</span> <span class=\"n\">CrfRule</span><span class=\"p\">(</span>\n        <span class=\"n\">predicate</span><span class=\"o\">=</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"n\">FEMALE</span><span class=\"p\">),</span>\n        <span class=\"n\">consequence</span><span class=\"o\">=</span><span class=\"n\">REQUIRED</span><span class=\"p\">,</span>\n        <span class=\"n\">alternative</span><span class=\"o\">=</span><span class=\"n\">NOT_REQUIRED</span><span class=\"p\">,</span>\n        <span class=\"n\">target_models</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'crfthree'</span><span class=\"p\">,</span> <span class=\"s1\">'crffour'</span><span class=\"p\">])</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s1\">'edc_example'</span>\n</pre>\n<p><tt>RuleGroup</tt> class declarations are placed in file <tt>metadata_rules.py</tt> in the root of your application. They are registered in the order in which they appear in the file. All rule groups are available from the <tt>site_metadata_rules</tt> global.</p>\n</div>\n<div id=\"more-on-rules\">\n<h3>More on Rules</h3>\n<p>The rule <tt>consequence</tt> and <tt>alternative</tt> except these values:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">edc_metadata.constants</span> <span class=\"kn\">import</span> <span class=\"n\">REQUIRED</span><span class=\"p\">,</span> <span class=\"n\">NOT_REQUIRED</span>\n<span class=\"kn\">from</span> <span class=\"nn\">edc_metadata.rules.constants</span> <span class=\"kn\">import</span> <span class=\"n\">DO_NOTHING</span>\n</pre>\n<ul>\n<li>REQUIRED</li>\n<li>NOT_REQUIRED</li>\n<li>DO_NOTHING</li>\n</ul>\n<p>It is recommended to write the logic so that the <tt>consequence</tt> is REQUIRED if the <tt>predicate</tt> evaluates to  <tt>True</tt>.</p>\n<p>In the examples above, the rule <tt>predicate</tt> can only access values that can be found on the subjects\u2019s current <tt>visit</tt> instance or <tt>registered_subject</tt> instance. If the value you need for the rule <tt>predicate</tt> is not on either of those instances, you can pass a <tt>source_model</tt>. With the <tt>source_model</tt> declared you would have these data available:</p>\n<ul>\n<li>current visit model instance</li>\n<li>registered subject (see <tt>edc_registration</tt>)</li>\n<li>source model instance for the current visit</li>\n</ul>\n<p>Let\u2019s say the rules changes and instead of refering to <tt>gender</tt> (male/female) you wish to refer to the value field of <tt>favorite_transport</tt> on model <tt>CrfTransport</tt>. <tt>favorite_transport</tt> can be \u201ccar\u201d or \u201cbicycle\u201d. You want the first rule <tt>predicate</tt> to read as:</p>\n<ul>\n<li>\u201cIf <tt>favorite_transport</tt> is equal to <tt>bicycle</tt> then set the metadata <tt>entry_status</tt> for <tt>crf_one</tt> and <tt>crf_two</tt> to REQUIRED, if not, set both to NOT_REQUIRED\u201d</li>\n</ul>\n<p>and the second to read as:</p>\n<ul>\n<li>\u201cIf <tt>favorite_transport</tt> is equal to <tt>car</tt> then set the metadata <tt>entry_status</tt> for <tt>crf_three</tt> and <tt>crf_four</tt> to REQUIRED, if not, set both to NOT_REQUIRED\u201d.</li>\n</ul>\n<p>The field for car/bicycle, <tt>favorite_transport</tt> is on model <tt>CrfTransport</tt>. The RuleGroup might look like this:</p>\n<pre><span class=\"nd\">@register</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExampleRuleGroup</span><span class=\"p\">(</span><span class=\"n\">RuleGroup</span><span class=\"p\">):</span>\n\n    <span class=\"n\">bicycle</span> <span class=\"o\">=</span> <span class=\"n\">CrfRule</span><span class=\"p\">(</span>\n        <span class=\"n\">predicate</span><span class=\"o\">=</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"s1\">'favorite_transport'</span><span class=\"p\">,</span> <span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"s1\">'bicycle'</span><span class=\"p\">),</span>\n        <span class=\"n\">consequence</span><span class=\"o\">=</span><span class=\"n\">REQUIRED</span><span class=\"p\">,</span>\n        <span class=\"n\">alternative</span><span class=\"o\">=</span><span class=\"n\">NOT_REQUIRED</span><span class=\"p\">,</span>\n        <span class=\"n\">target_models</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'crfone'</span><span class=\"p\">,</span> <span class=\"s1\">'crftwo'</span><span class=\"p\">])</span>\n\n    <span class=\"n\">car</span> <span class=\"o\">=</span> <span class=\"n\">CrfRule</span><span class=\"p\">(</span>\n        <span class=\"n\">predicate</span><span class=\"o\">=</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"s1\">'favorite_transport'</span><span class=\"p\">,</span> <span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"n\">car</span><span class=\"p\">),</span>\n        <span class=\"n\">consequence</span><span class=\"o\">=</span><span class=\"n\">REQUIRED</span><span class=\"p\">,</span>\n        <span class=\"n\">alternative</span><span class=\"o\">=</span><span class=\"n\">NOT_REQUIRED</span><span class=\"p\">,</span>\n        <span class=\"n\">target_models</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'crfthree'</span><span class=\"p\">,</span> <span class=\"s1\">'crffour'</span><span class=\"p\">])</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s1\">'edc_example'</span>\n        <span class=\"n\">source_model</span> <span class=\"o\">=</span> <span class=\"s1\">'CrfTransport'</span>\n</pre>\n<p>Note that <tt>CrfTransport</tt> is a <tt>crf</tt> model in the Edc. That is, it has a <tt>foreign key</tt> to the visit model. Internally the query will be constructed like this:</p>\n<pre><span class=\"c1\"># source model instance for the current visit</span>\n<span class=\"n\">visit_attr</span> <span class=\"o\">=</span> <span class=\"s1\">'subject_visit'</span>\n<span class=\"n\">source_obj</span> <span class=\"o\">=</span> <span class=\"n\">CrfTansport</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">{</span><span class=\"n\">visit_attr</span><span class=\"p\">:</span> <span class=\"n\">visit</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># queryset of source model for the current subject_identifier</span>\n<span class=\"n\">visit_attr</span> <span class=\"o\">=</span> <span class=\"s1\">'subject_visit'</span>\n<span class=\"n\">source_qs</span> <span class=\"o\">=</span> <span class=\"n\">CrfTansport</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">__subject_identifier'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">visit_attr</span><span class=\"p\">):</span> <span class=\"n\">subject_identifier</span><span class=\"p\">})</span>\n</pre>\n<ul>\n<li>If the source model instance does not exist, the rules in the rule group will not run.</li>\n<li>If the target model instance exists, no rule can change it\u2019s metadata from KEYED.</li>\n</ul>\n</div>\n<div id=\"more-complex-rule-predicates\">\n<h3>More Complex Rule Predicates</h3>\n<p>There are two provided classes for the rule <tt>predicate</tt>, <tt>P</tt> and <tt>PF</tt>. With <tt>P</tt> you can make simple rule predicates like those used in the examples above. All standard opertors can be used. For example:</p>\n<pre><span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"s1\">'MALE'</span><span class=\"p\">)</span>\n<span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"s1\">'referral_datetime'</span><span class=\"p\">,</span> <span class=\"s1\">'is not'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;='</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">)</span>\n</pre>\n<p>If the logic needs to a bit more complicated, the <tt>PF</tt> class allows you to pass a <tt>lambda</tt> function directly:</p>\n<pre><span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"n\">PF</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">64</span> <span class=\"k\">else</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"n\">PF</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">64</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">MALE</span> <span class=\"k\">else</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>If the logic needs to be more complicated than is recommended for a simple lambda, you can just pass a function. When writing your function just remember that the rule <tt>predicate</tt> must always evaluate to True or False.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">visit</span><span class=\"p\">,</span> <span class=\"n\">registered_subject</span><span class=\"p\">,</span> <span class=\"n\">source_obj</span><span class=\"p\">,</span> <span class=\"n\">source_qs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">source_obj</span><span class=\"o\">.</span><span class=\"n\">married</span> <span class=\"ow\">and</span> <span class=\"n\">registered_subject</span><span class=\"o\">.</span><span class=\"n\">gender</span> <span class=\"o\">==</span> <span class=\"n\">FEMALE</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"n\">my_func</span>\n</pre>\n</div>\n<div id=\"rule-group-order\">\n<h3>Rule Group Order</h3>\n<blockquote>\n<strong>IMPORTANT</strong>: RuleGroups are evaluated in the order they are registered and the rules within each rule group are evaluated in the order they are declared on the RuleGroup.</blockquote>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>Since the order in which rules run matters, it is essential to test the rules together. See <tt>tests</tt> for some examples. When writing tests it may be helpful to know the following:</p>\n<ul>\n<li>the standard Edc model configuration assumes you have consent-&gt;enrollment-&gt;appointments-&gt;visit-&gt;crfs and requisitions.</li>\n<li>rules can be instected after boot up in the global registry <tt>site_metadata_rules</tt>.</li>\n<li>all rules are run when the visit  is saved.</li>\n</ul>\n</div>\n<div id=\"more-examples\">\n<h3>More examples</h3>\n<p>See <tt>edc_example</tt> for working RuleGroups and how models are configured with the <tt>edc_metadata</tt> mixins. The <tt>tests</tt> in <tt>edc_metadata.rules</tt> use the rule group and model classes in <tt>edc_example</tt>.</p>\n</div>\n<div id=\"notes-on-edc\">\n<h3>Notes on Edc</h3>\n<p>The standard Edc model configuration assumes you have a data entry flow like this::</p>\n<pre>consent-&gt;enrollment-&gt;appointment-&gt;visit (1000)-&gt;crfs and requisitions\n                     appointment-&gt;visit (2000)-&gt;crfs and requisitions\n                     appointment-&gt;visit (3000)-&gt;crfs and requisitions\n                     appointment-&gt;visit (4000)-&gt;crfs and requisitions\n</pre>\n<p>You should also see the other dependencies, <tt>edc_consent</tt>, <tt>edc_visit_schedule</tt>, <tt>edc_appointment</tt>, <tt>edc_visit_tracking</tt>, <tt>edc_metadata</tt>, etc.</p>\n</div>\n<div id=\"signals\">\n<h3>Signals</h3>\n<p>In the <tt>signals</tt> file:</p>\n<p><strong>visit model ``post_save``:</strong></p>\n<ul>\n<li>Metadata is created for a particular visit and visit code, e.g. 1000, when the <tt>visit</tt> model is saved for a subject and visit code using the default <tt>entry_status</tt> configured in the <tt>visit_schedule</tt>.</li>\n<li>Immediately after creating metadata, all rules for the <tt>app_label</tt> are run in order. The <tt>app_label</tt> is the <tt>app_label</tt> of the visit model.</li>\n</ul>\n<p><strong>crf or requisition model ``post_save``:</strong></p>\n<ul>\n<li>the metadata instance for the crf/requisition is updated and then all rules are run.</li>\n</ul>\n<p><strong>crf or requisition model ``post_delete``:</strong></p>\n<ul>\n<li>the metadata instance for the crf/requisition is reset to the default <tt>entry_status</tt> and then all rules are run.</li>\n</ul>\n</div>\n<div id=\"changing-visit-schedule-name-and-or-schedule-name\">\n<h3>Changing visit_schedule name and/ or schedule name</h3>\n<p>If the visit_schedule_name or schedule_name changes, the existing metadata must be manually updated. For example;</p>\n<pre><span class=\"k\">update</span> <span class=\"n\">edc_metadata_crfmetadata</span> <span class=\"k\">set</span> <span class=\"n\">visit_schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'visit_schedule'</span>\n<span class=\"k\">where</span> <span class=\"n\">visit_schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'old_visit_schedule'</span><span class=\"p\">;</span>\n\n<span class=\"k\">update</span> <span class=\"n\">edc_metadata_crfmetadata</span> <span class=\"k\">set</span> <span class=\"n\">schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'schedule'</span>\n<span class=\"k\">where</span> <span class=\"n\">schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'old_schedule'</span><span class=\"p\">;</span>\n\n<span class=\"k\">update</span> <span class=\"n\">edc_metadata_requisitionmetadata</span> <span class=\"k\">set</span> <span class=\"n\">visit_schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'visit_schedule'</span>\n<span class=\"k\">where</span> <span class=\"n\">visit_schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'old_visit_schedule'</span><span class=\"p\">;</span>\n\n<span class=\"k\">update</span> <span class=\"n\">edc_metadata_requisitionmetadata</span> <span class=\"k\">set</span> <span class=\"n\">schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'schedule'</span>\n<span class=\"k\">where</span> <span class=\"n\">schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'old_schedule'</span><span class=\"p\">;</span>\n</pre>\n<p>You also need to update any existing enrollment and disenrollment model data. For example;</p>\n<pre><span class=\"k\">update</span> <span class=\"n\">ambition_subject_enrollment</span> <span class=\"k\">set</span> <span class=\"n\">visit_schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'visit_schedule'</span>\n<span class=\"k\">where</span> <span class=\"n\">visit_schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'old_visit_schedule'</span><span class=\"p\">;</span>\n\n<span class=\"k\">update</span> <span class=\"n\">ambition_subject_enrollment</span> <span class=\"k\">set</span> <span class=\"n\">schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'schedule'</span>\n<span class=\"k\">where</span> <span class=\"n\">schedule_name</span><span class=\"o\">=</span><span class=\"s1\">'old_schedule'</span><span class=\"p\">;</span>\n</pre>\n<p>For any other table that use these fields:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"k\">DISTINCT</span> <span class=\"k\">TABLE_NAME</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">INFORMATION_SCHEMA</span><span class=\"p\">.</span><span class=\"n\">COLUMNS</span>\n    <span class=\"k\">WHERE</span> <span class=\"k\">COLUMN_NAME</span> <span class=\"k\">IN</span> <span class=\"p\">(</span><span class=\"s1\">'visit_schedule_name'</span><span class=\"p\">,</span><span class=\"s1\">'schedule_name'</span><span class=\"p\">)</span>\n        <span class=\"k\">AND</span> <span class=\"n\">TABLE_SCHEMA</span><span class=\"o\">=</span><span class=\"s1\">'edc'</span><span class=\"p\">;</span>\n</pre>\n<p>A typical list of tables that need to be updated may look like this:</p>\n<pre>+------------------------------------------+\n| TABLE_NAME                               |\n+------------------------------------------+\n| ambition_subject_disenrollment           |\n| ambition_subject_enrollment              |\n| ambition_subject_historicaldisenrollment |\n| ambition_subject_historicalenrollment    |\n| ambition_subject_historicalsubjectvisit  |\n| ambition_subject_subjectvisit            |\n| edc_appointment_appointment              |\n| edc_appointment_historicalappointment    |\n| edc_metadata_crfmetadata                 |\n| edc_metadata_requisitionmetadata         |\n+------------------------------------------+\n</pre>\n<p>In the code you need to update where the visit_schedule or schedule are hard coded.</p>\n<ul>\n<li>visit schedule, schedule</li>\n<li>Meta attributes on the enrollment and disenrollment models.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6956899, "releases": {"0.2.12": [{"comment_text": "", "digests": {"md5": "14a928f3c7d73f9f25b520487a21b0d5", "sha256": "48b41fe2c2eeecdb2f098eccadb5f7634ca4f8f27337c86ff181be0906416859"}, "downloads": -1, "filename": "edc-metadata-0.2.12.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "14a928f3c7d73f9f25b520487a21b0d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79669, "upload_time": "2018-07-21T09:27:17", "upload_time_iso_8601": "2018-07-21T09:27:17.664549Z", "url": "https://files.pythonhosted.org/packages/54/b8/4033bb7c47b0dd9cd782dc42f3304b1f6fd29290f6d057af150d84db81e0/edc-metadata-0.2.12.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "34f6fcce6604532cd9351f259ed559d9", "sha256": "ce9cba79b66a958991aedb08abc5125dc1d220c20344f051fb972e14c9d278de"}, "downloads": -1, "filename": "edc_metadata-0.2.12-py3-none-any.whl", "has_sig": false, "md5_digest": "34f6fcce6604532cd9351f259ed559d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57645, "upload_time": "2018-07-21T09:27:14", "upload_time_iso_8601": "2018-07-21T09:27:14.787135Z", "url": "https://files.pythonhosted.org/packages/58/d6/b31820f44036a2eca0a47adc57ba36a0321544a70e4fac14686ead03bd8d/edc_metadata-0.2.12-py3-none-any.whl", "yanked": false}], "0.2.13": [{"comment_text": "", "digests": {"md5": "c1dc801054bd2a22bf92d845ce1c1be2", "sha256": "ea6592ec5eab54431bc2bbf62487586bcaebf530183d77c49909e67a7b9415e1"}, "downloads": -1, "filename": "edc-metadata-0.2.13.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "c1dc801054bd2a22bf92d845ce1c1be2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79697, "upload_time": "2018-08-01T01:39:48", "upload_time_iso_8601": "2018-08-01T01:39:48.915448Z", "url": "https://files.pythonhosted.org/packages/6a/14/92e148de15a39152866b9f59812264a72a18c15eb46c55f1f45db3e9c631/edc-metadata-0.2.13.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "e164878e7b142719db7eb59da6f677a3", "sha256": "bb3e52b233a9d07cf4b1ac03ba28f82ad6f02f7b945250257a4f7ac196a1a8bb"}, "downloads": -1, "filename": "edc_metadata-0.2.13-py3-none-any.whl", "has_sig": false, "md5_digest": "e164878e7b142719db7eb59da6f677a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57639, "upload_time": "2018-08-01T01:39:46", "upload_time_iso_8601": "2018-08-01T01:39:46.405999Z", "url": "https://files.pythonhosted.org/packages/50/27/33c4f1fb795e48d10cee50e17185c52381f8634565dc21fc37b5cf20b81c/edc_metadata-0.2.13-py3-none-any.whl", "yanked": false}], "0.2.14": [{"comment_text": "", "digests": {"md5": "4cf7c0bd62733bb66a978e73235b896d", "sha256": "22e3631d05778aef17627ff0f5b7a29e7974a21a7437e285147aa687e5148bd2"}, "downloads": -1, "filename": "edc-metadata-0.2.14.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "4cf7c0bd62733bb66a978e73235b896d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79230, "upload_time": "2018-08-07T21:27:12", "upload_time_iso_8601": "2018-08-07T21:27:12.943291Z", "url": "https://files.pythonhosted.org/packages/7d/e2/ec7de2b8505f1ed29d2a81444c4dec9ecd23d8eba1212cbee4e4bcd5c72c/edc-metadata-0.2.14.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8f66eeb4049eb0b17d2005a2f0e5761", "sha256": "402ed91bfe31bd556e12b8fb781c16417b7b4cb8b638d6013fa9e259150658a3"}, "downloads": -1, "filename": "edc_metadata-0.2.14-py3-none-any.whl", "has_sig": false, "md5_digest": "f8f66eeb4049eb0b17d2005a2f0e5761", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57671, "upload_time": "2018-08-07T21:27:11", "upload_time_iso_8601": "2018-08-07T21:27:11.598467Z", "url": "https://files.pythonhosted.org/packages/ec/ed/befbf9af3a6e132fd6bd6ce42ef5007e5aa69b8cd8cf79c2599092d7931d/edc_metadata-0.2.14-py3-none-any.whl", "yanked": false}], "0.2.15": [{"comment_text": "", "digests": {"md5": "87a6e629311e032c188d8abdcb6a9083", "sha256": "bc688b48364a8ed473cd165a6cbec3219d161a61408184db921c95811faa63bd"}, "downloads": -1, "filename": "edc-metadata-0.2.15.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "87a6e629311e032c188d8abdcb6a9083", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79733, "upload_time": "2018-08-09T19:23:17", "upload_time_iso_8601": "2018-08-09T19:23:17.835868Z", "url": "https://files.pythonhosted.org/packages/00/c4/122b6fe32f7bbfbba97cf4361e1d97a16358ffde09a8b6c5e5e6207eb96d/edc-metadata-0.2.15.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "891116c7b6fb8034b2d6ad4b3415e0e7", "sha256": "026862be22daf8a7e26fbd89202234b823de149198c7f6169832c9e326508c97"}, "downloads": -1, "filename": "edc_metadata-0.2.15-py3-none-any.whl", "has_sig": false, "md5_digest": "891116c7b6fb8034b2d6ad4b3415e0e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57673, "upload_time": "2018-08-09T19:23:16", "upload_time_iso_8601": "2018-08-09T19:23:16.326123Z", "url": "https://files.pythonhosted.org/packages/76/6a/2a236c4ef832338a37044339d4c40946261629c3ef8a42c0c72b242ebae3/edc_metadata-0.2.15-py3-none-any.whl", "yanked": false}], "0.2.16": [{"comment_text": "", "digests": {"md5": "6e419fe018c83fc6714f7d58b4cc1f89", "sha256": "408318ff42612044e5dcad05ac6fcec5e88a82717e6f26ad7fd0ab4531a8f35f"}, "downloads": -1, "filename": "edc-metadata-0.2.16.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "6e419fe018c83fc6714f7d58b4cc1f89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79749, "upload_time": "2018-08-18T02:15:11", "upload_time_iso_8601": "2018-08-18T02:15:11.799260Z", "url": "https://files.pythonhosted.org/packages/11/36/3efd3efb95deeec322d977e1a70af591255dbf85aec967b8f94652f9845e/edc-metadata-0.2.16.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cdb1efe5ca71103cb8a7004729d9169", "sha256": "e3eadb79b345f4668dc67cfe84563818230e075cd32813baddb7ebb75ecca5c8"}, "downloads": -1, "filename": "edc_metadata-0.2.16-py3-none-any.whl", "has_sig": false, "md5_digest": "5cdb1efe5ca71103cb8a7004729d9169", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57684, "upload_time": "2018-08-18T02:15:09", "upload_time_iso_8601": "2018-08-18T02:15:09.864662Z", "url": "https://files.pythonhosted.org/packages/55/22/af9e6159c57eeb5059f100b6dde31ef06e936275348530e0de9023927922/edc_metadata-0.2.16-py3-none-any.whl", "yanked": false}], "0.2.17": [{"comment_text": "", "digests": {"md5": "1c3d795ecb7cec57ee1897bc4a815bdb", "sha256": "e46273c25657fc5594ef37f006becb9f75fea3a266420ddb101ec1acc7d3a141"}, "downloads": -1, "filename": "edc-metadata-0.2.17.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "1c3d795ecb7cec57ee1897bc4a815bdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80263, "upload_time": "2018-09-03T00:20:08", "upload_time_iso_8601": "2018-09-03T00:20:08.072169Z", "url": "https://files.pythonhosted.org/packages/56/f6/ec0a4e56f7575ef8d623a9db6432a4bd4599fb016f746432d95c0ecbc123/edc-metadata-0.2.17.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae4540665fa0346194fa25c3e51f347b", "sha256": "9ee33fe63de7f3ce87ded6e4c710e867e0b5536a755663df8fe32c8868f9baa3"}, "downloads": -1, "filename": "edc_metadata-0.2.17-py3-none-any.whl", "has_sig": false, "md5_digest": "ae4540665fa0346194fa25c3e51f347b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57893, "upload_time": "2018-09-03T00:20:06", "upload_time_iso_8601": "2018-09-03T00:20:06.599904Z", "url": "https://files.pythonhosted.org/packages/59/75/e1e63f0c206d6266f1081829a6387e9f524f6bd7cd1024d21d9419afb04b/edc_metadata-0.2.17-py3-none-any.whl", "yanked": false}], "0.2.18": [{"comment_text": "", "digests": {"md5": "9317a75d588d107ec90f4bc35241a3b3", "sha256": "32e6373c11504636c058f3cf724e6704cd3cb921a071e6a33567b7b4c5b74b69"}, "downloads": -1, "filename": "edc-metadata-0.2.18.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "9317a75d588d107ec90f4bc35241a3b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80304, "upload_time": "2018-09-23T17:26:39", "upload_time_iso_8601": "2018-09-23T17:26:39.374709Z", "url": "https://files.pythonhosted.org/packages/93/69/64b9f884af54b827c4ced49d1b401ce07d45c6b7d766818143f35c80e6d6/edc-metadata-0.2.18.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c14ef0dce66ea4fea3cef7558145f7b", "sha256": "62b535dde6ee991f82ef70b80583e78c62e4f271cee44365bc86b9742a87f30d"}, "downloads": -1, "filename": "edc_metadata-0.2.18-py3-none-any.whl", "has_sig": false, "md5_digest": "6c14ef0dce66ea4fea3cef7558145f7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57912, "upload_time": "2018-09-23T17:26:37", "upload_time_iso_8601": "2018-09-23T17:26:37.789665Z", "url": "https://files.pythonhosted.org/packages/a3/3b/b3e57aaac7923c6a5eefa0b360501a0795992e3e6d9ac4b9ed45c1672feb/edc_metadata-0.2.18-py3-none-any.whl", "yanked": false}], "0.2.19": [{"comment_text": "", "digests": {"md5": "205093498baae4f7c5e726ce7f52d772", "sha256": "fedbc98020edfc7149e2ed8d40c2e179e3608394428264877ae49aa91574fabc"}, "downloads": -1, "filename": "edc-metadata-0.2.19.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "205093498baae4f7c5e726ce7f52d772", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80450, "upload_time": "2018-10-17T02:03:59", "upload_time_iso_8601": "2018-10-17T02:03:59.322426Z", "url": "https://files.pythonhosted.org/packages/d4/2e/bd7ccac94c79da332f54dc2b6e5b63a2644952a3d73208d62f53ffc1bc9e/edc-metadata-0.2.19.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "e18e8a90a48ea35ad15652d4f56b9b6f", "sha256": "49018bd7a2c3d66bf032f2bdfbdc0eda40ca739e8835f615120bf7bad41d83b4"}, "downloads": -1, "filename": "edc_metadata-0.2.19-py3-none-any.whl", "has_sig": false, "md5_digest": "e18e8a90a48ea35ad15652d4f56b9b6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57938, "upload_time": "2018-10-17T02:03:57", "upload_time_iso_8601": "2018-10-17T02:03:57.499242Z", "url": "https://files.pythonhosted.org/packages/99/28/4b9f13f45266c5b3935cda22fb1bca212ebc6bff3acf45db03e43d57190c/edc_metadata-0.2.19-py3-none-any.whl", "yanked": false}], "0.2.20": [{"comment_text": "", "digests": {"md5": "1ebf6fddef2d64cf4bffc764be40d087", "sha256": "9beb41100a29adb98fcfeacff0e7c7523599ebe38d521728fe349f1f3d1d17b2"}, "downloads": -1, "filename": "edc-metadata-0.2.20.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "1ebf6fddef2d64cf4bffc764be40d087", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80490, "upload_time": "2018-10-23T03:03:04", "upload_time_iso_8601": "2018-10-23T03:03:04.796945Z", "url": "https://files.pythonhosted.org/packages/c0/36/5a0a7ad182b77a9e3f1bde3dfe10af152ccc212ccbf8f6d1699509c54bbf/edc-metadata-0.2.20.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fa5c23d51da80afe62ab7ddedacae8d", "sha256": "ef36f6f3f2e390b74d0bd4a1158b08ff61c58c65987aafaba27459fced090e74"}, "downloads": -1, "filename": "edc_metadata-0.2.20-py3-none-any.whl", "has_sig": false, "md5_digest": "8fa5c23d51da80afe62ab7ddedacae8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57967, "upload_time": "2018-10-23T03:03:03", "upload_time_iso_8601": "2018-10-23T03:03:03.256604Z", "url": "https://files.pythonhosted.org/packages/78/42/e3c17e25d05d1e198a8503b560dccf98dd3ddc2f71da44e990e5c04c3fdb/edc_metadata-0.2.20-py3-none-any.whl", "yanked": false}], "0.2.22": [{"comment_text": "", "digests": {"md5": "6acdbbf6386830097b8e00cb81c891cb", "sha256": "aaa0be03f82898e0be0e2983e2b8af891238659a0ca9f02ccda996aa099be376"}, "downloads": -1, "filename": "edc-metadata-0.2.22.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "6acdbbf6386830097b8e00cb81c891cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80174, "upload_time": "2018-10-31T02:02:51", "upload_time_iso_8601": "2018-10-31T02:02:51.463211Z", "url": "https://files.pythonhosted.org/packages/c2/c9/9c7d5529f8b3960221a2434f20a22c0f64f388efb1c3836a04926400e2d6/edc-metadata-0.2.22.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "af5db04cc5a411ac413ed8b9e12a17bd", "sha256": "1a1c7b00b64414ef2fd334e2e75d37a66a5117a52ce8596a2c0142a003d11504"}, "downloads": -1, "filename": "edc_metadata-0.2.22-py3-none-any.whl", "has_sig": false, "md5_digest": "af5db04cc5a411ac413ed8b9e12a17bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 64927, "upload_time": "2018-10-31T02:02:49", "upload_time_iso_8601": "2018-10-31T02:02:49.730643Z", "url": "https://files.pythonhosted.org/packages/5b/cc/5db0d066c8021f4d8a3784f084b03be6d5236f1fbff8a5a09aa12ef0a0d6/edc_metadata-0.2.22-py3-none-any.whl", "yanked": false}], "0.2.23": [{"comment_text": "", "digests": {"md5": "bd238fa8f54549d8cfcb18825d742d56", "sha256": "378264754b89f82a09e04372f89c0ad7c6f10adad9d319bad47abf0f39916a32"}, "downloads": -1, "filename": "edc-metadata-0.2.23.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "bd238fa8f54549d8cfcb18825d742d56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80574, "upload_time": "2018-12-07T19:55:41", "upload_time_iso_8601": "2018-12-07T19:55:41.970934Z", "url": "https://files.pythonhosted.org/packages/81/62/91d97e4f2a382d8037ea074130210121560caa4aff036a3858024745949e/edc-metadata-0.2.23.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a5c3563395438e73e030929c10faf4d", "sha256": "6f8d6f85a0d643f2c0953a28f9aad3cdb15f5702fdf635a35c0ab8f4e739989c"}, "downloads": -1, "filename": "edc_metadata-0.2.23-py3-none-any.whl", "has_sig": false, "md5_digest": "9a5c3563395438e73e030929c10faf4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57955, "upload_time": "2018-12-07T19:55:39", "upload_time_iso_8601": "2018-12-07T19:55:39.436476Z", "url": "https://files.pythonhosted.org/packages/35/17/40898f8cc72ae289e0647b391f43f4a543680ac11288b394ae6b485773cc/edc_metadata-0.2.23-py3-none-any.whl", "yanked": false}], "0.2.24": [{"comment_text": "", "digests": {"md5": "61701f461da708ec6de490925bdbc741", "sha256": "5f6790531a7d94c88ae001bcf8558a99c22fa1d332936c908d5b749edffe1a5b"}, "downloads": -1, "filename": "edc-metadata-0.2.24.macosx-10.7-x86_64.tar.gz", "has_sig": false, "md5_digest": "61701f461da708ec6de490925bdbc741", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 81152, "upload_time": "2019-01-30T17:01:05", "upload_time_iso_8601": "2019-01-30T17:01:05.719623Z", "url": "https://files.pythonhosted.org/packages/37/07/c498d6daebfb2b741b67eb42262712c9ed7cbfa9ec0cae837ff2b0db7630/edc-metadata-0.2.24.macosx-10.7-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c5ed6458ffa044aba68b084c87e9b78", "sha256": "af42a2a327ea2c989004bb4e81a5920ecb88be109fa2ac100df5d9e3259afcef"}, "downloads": -1, "filename": "edc_metadata-0.2.24-py3-none-any.whl", "has_sig": false, "md5_digest": "9c5ed6458ffa044aba68b084c87e9b78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65557, "upload_time": "2019-01-30T17:01:04", "upload_time_iso_8601": "2019-01-30T17:01:04.041523Z", "url": "https://files.pythonhosted.org/packages/17/d6/6d1497e858680fb6b09b5b326483c3a3d30137bd1fd16077754805840553/edc_metadata-0.2.24-py3-none-any.whl", "yanked": false}], "0.2.25": [{"comment_text": "", "digests": {"md5": "d1894c4ad92daf82c557d1be333a964e", "sha256": "346d405a9690ec5e517b6e384be02fb6df6cb9ab3a97b4c93780a66317fffcf7"}, "downloads": -1, "filename": "edc_metadata-0.2.25-py3-none-any.whl", "has_sig": false, "md5_digest": "d1894c4ad92daf82c557d1be333a964e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65600, "upload_time": "2019-02-11T05:26:24", "upload_time_iso_8601": "2019-02-11T05:26:24.638854Z", "url": "https://files.pythonhosted.org/packages/56/51/5a6aaab422851c898127a4787c66a8721d325b81384eaf6942c6aa9f710c/edc_metadata-0.2.25-py3-none-any.whl", "yanked": false}], "0.2.26": [{"comment_text": "", "digests": {"md5": "813bd9c80b9be90f92731c0207b55114", "sha256": "41a6fa4d614b521a51bdd50bd3305b481aa8d9483fbe63d0bd436f8bb9568d1e"}, "downloads": -1, "filename": "edc_metadata-0.2.26-py3-none-any.whl", "has_sig": false, "md5_digest": "813bd9c80b9be90f92731c0207b55114", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65557, "upload_time": "2019-02-27T14:36:42", "upload_time_iso_8601": "2019-02-27T14:36:42.069139Z", "url": "https://files.pythonhosted.org/packages/17/6a/78b292fb5a84dc3b80ef6dc6e9984ee49972eef3f90530b268164bd0ba3a/edc_metadata-0.2.26-py3-none-any.whl", "yanked": false}], "0.2.27": [{"comment_text": "", "digests": {"md5": "1cfc9e444b036d17f5cadeedc819fac8", "sha256": "caea34f1a45fb6d04ab5cf8a8898b0bfd45e0203483dc876e844b8be55319c8d"}, "downloads": -1, "filename": "edc_metadata-0.2.27-py3-none-any.whl", "has_sig": false, "md5_digest": "1cfc9e444b036d17f5cadeedc819fac8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66282, "upload_time": "2019-03-05T00:11:50", "upload_time_iso_8601": "2019-03-05T00:11:50.294996Z", "url": "https://files.pythonhosted.org/packages/ef/fb/2acaf4f9e44e6d6f2a4b2955c96348ff161b355712fde2833e6a64baf478/edc_metadata-0.2.27-py3-none-any.whl", "yanked": false}], "0.2.28": [{"comment_text": "", "digests": {"md5": "4128e3f919b60682fc4ff48b1efb70e4", "sha256": "f5dfb50f667c5b9b2cb2ad840eb1ef33312558a6939112007bff9a1a3b9fa115"}, "downloads": -1, "filename": "edc_metadata-0.2.28-py3-none-any.whl", "has_sig": false, "md5_digest": "4128e3f919b60682fc4ff48b1efb70e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66716, "upload_time": "2019-03-17T01:16:31", "upload_time_iso_8601": "2019-03-17T01:16:31.256495Z", "url": "https://files.pythonhosted.org/packages/b5/9d/c9a7bbb69024095ce59fbb16a5dd305e43919dd891d6bf20ec091ed31f74/edc_metadata-0.2.28-py3-none-any.whl", "yanked": false}], "0.2.29": [{"comment_text": "", "digests": {"md5": "2e73c6820884d8432ec57b2644a31a84", "sha256": "c70ed790944483b734fc5f4bdb1635f8b7044e72b1b5f276c80677c4dc51b295"}, "downloads": -1, "filename": "edc_metadata-0.2.29-py3-none-any.whl", "has_sig": false, "md5_digest": "2e73c6820884d8432ec57b2644a31a84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66786, "upload_time": "2019-03-23T03:56:41", "upload_time_iso_8601": "2019-03-23T03:56:41.545732Z", "url": "https://files.pythonhosted.org/packages/da/29/2fa375e7ba86895d21101387b4b46a2b3349697fcef30869a2fde3f8d5c5/edc_metadata-0.2.29-py3-none-any.whl", "yanked": false}], "0.2.30": [{"comment_text": "", "digests": {"md5": "47c6466ba24a7224892ece14207fcf9e", "sha256": "8307cce66b891e07e991125e36350a4affc15f2db6bb379728a2c28763773825"}, "downloads": -1, "filename": "edc_metadata-0.2.30-py3-none-any.whl", "has_sig": false, "md5_digest": "47c6466ba24a7224892ece14207fcf9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66805, "upload_time": "2019-03-23T18:32:41", "upload_time_iso_8601": "2019-03-23T18:32:41.590206Z", "url": "https://files.pythonhosted.org/packages/8e/c0/a6212a7b91d616ac9469564ace487d9600b5c4ba4fc01814432d68fac1c5/edc_metadata-0.2.30-py3-none-any.whl", "yanked": false}], "0.2.31": [{"comment_text": "", "digests": {"md5": "3542651fe1d3e197637963923fd5f6be", "sha256": "1145e66a15ee30bf7ff053c6222856cf856b8f4b43c4482a96dbf6d7f1cea9c6"}, "downloads": -1, "filename": "edc_metadata-0.2.31-py3-none-any.whl", "has_sig": false, "md5_digest": "3542651fe1d3e197637963923fd5f6be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66777, "upload_time": "2019-03-25T23:47:55", "upload_time_iso_8601": "2019-03-25T23:47:55.696136Z", "url": "https://files.pythonhosted.org/packages/d3/18/2613afc80cfdf75d92ebcb122d574c9a6351023b33d91bd469edc90bbbcb/edc_metadata-0.2.31-py3-none-any.whl", "yanked": false}], "0.2.32": [{"comment_text": "", "digests": {"md5": "86e6787052be44280d0eb235479caf65", "sha256": "abafa9b34cade37177286b09bf3350923b53aa0600eaceb7fd5895fd05148a5a"}, "downloads": -1, "filename": "edc_metadata-0.2.32-py3-none-any.whl", "has_sig": false, "md5_digest": "86e6787052be44280d0eb235479caf65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 67112, "upload_time": "2019-03-26T20:55:27", "upload_time_iso_8601": "2019-03-26T20:55:27.851778Z", "url": "https://files.pythonhosted.org/packages/2e/15/a1f4d180f846a0f629175df053e7736e63675a833f77a0c18976781f7b63/edc_metadata-0.2.32-py3-none-any.whl", "yanked": false}], "0.2.33": [{"comment_text": "", "digests": {"md5": "128dbb399fc4dab0c8101ddf98155d4c", "sha256": "2ecc5f0d9711b47eeb4e5d58f456d6b26f8f47a11a8924860dc7563412350f38"}, "downloads": -1, "filename": "edc_metadata-0.2.33-py3-none-any.whl", "has_sig": false, "md5_digest": "128dbb399fc4dab0c8101ddf98155d4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 67121, "upload_time": "2019-03-27T22:22:22", "upload_time_iso_8601": "2019-03-27T22:22:22.535410Z", "url": "https://files.pythonhosted.org/packages/c3/39/ae5d47f48847f1669a6e97f779eada6d6122b911b1bf4365eb152f26f579/edc_metadata-0.2.33-py3-none-any.whl", "yanked": false}], "0.2.34": [{"comment_text": "", "digests": {"md5": "5ca38f509f9002b7e31134d43195052d", "sha256": "34be66f634f04645e94aced3ccfe97af1b9d15ba343f13072a828ba831bb6ff4"}, "downloads": -1, "filename": "edc_metadata-0.2.34-py3-none-any.whl", "has_sig": false, "md5_digest": "5ca38f509f9002b7e31134d43195052d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65251, "upload_time": "2019-04-08T04:03:33", "upload_time_iso_8601": "2019-04-08T04:03:33.773893Z", "url": "https://files.pythonhosted.org/packages/b0/d4/8db6f995a10693c134521012a0a22e9f25e1efc017af1522b406b5295a7c/edc_metadata-0.2.34-py3-none-any.whl", "yanked": false}], "0.2.35": [{"comment_text": "", "digests": {"md5": "d5e973122e30e36f1860af13d948d522", "sha256": "85dd6eddce43683952f51f531b51d1a521bc255c039c0100247608cb771c99ae"}, "downloads": -1, "filename": "edc_metadata-0.2.35-py3-none-any.whl", "has_sig": false, "md5_digest": "d5e973122e30e36f1860af13d948d522", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65251, "upload_time": "2019-04-08T14:34:59", "upload_time_iso_8601": "2019-04-08T14:34:59.984587Z", "url": "https://files.pythonhosted.org/packages/09/09/71882faa667a46fcf9babbb40feb2ca749e5cb8bd4a274acc23be7a47b20/edc_metadata-0.2.35-py3-none-any.whl", "yanked": false}], "0.2.37": [{"comment_text": "", "digests": {"md5": "68a8456d268e60d627e7a1f4c3bb6a92", "sha256": "afd3f0945c161b177966b613509405a393b74f84bf620eb843f659fd63ebb78a"}, "downloads": -1, "filename": "edc_metadata-0.2.37-py3-none-any.whl", "has_sig": false, "md5_digest": "68a8456d268e60d627e7a1f4c3bb6a92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65383, "upload_time": "2019-05-15T04:53:41", "upload_time_iso_8601": "2019-05-15T04:53:41.665203Z", "url": "https://files.pythonhosted.org/packages/70/b0/206212fb75f9a5aab0ec2de914ede0b5fc5fc319d8f7cfb087e0962c4014/edc_metadata-0.2.37-py3-none-any.whl", "yanked": false}], "0.2.38": [{"comment_text": "", "digests": {"md5": "b93705e1f3480c1565db259cd6efa7c9", "sha256": "310cfc43cc98c8e366cda52884790ecaa7ee3de077ac9a066457ed9328b5e792"}, "downloads": -1, "filename": "edc_metadata-0.2.38-py3-none-any.whl", "has_sig": false, "md5_digest": "b93705e1f3480c1565db259cd6efa7c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65384, "upload_time": "2019-05-16T15:20:31", "upload_time_iso_8601": "2019-05-16T15:20:31.284165Z", "url": "https://files.pythonhosted.org/packages/84/33/06043dd3774941c7c8485276032d35bacb1c473c715da4c04fa48550bb6f/edc_metadata-0.2.38-py3-none-any.whl", "yanked": false}], "0.2.39": [{"comment_text": "", "digests": {"md5": "d64a3d07d9bb624830ea321ec6786d9c", "sha256": "53d22120979d96023bbcb7807b606ca9f560bdf39e1c9f3f862751462749b76c"}, "downloads": -1, "filename": "edc_metadata-0.2.39-py3-none-any.whl", "has_sig": false, "md5_digest": "d64a3d07d9bb624830ea321ec6786d9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65409, "upload_time": "2019-06-25T00:17:13", "upload_time_iso_8601": "2019-06-25T00:17:13.719545Z", "url": "https://files.pythonhosted.org/packages/06/8f/fdf9e7b300cf73d660d4876d438bc0267b4063f4f7e06d0b0e69ce5d91e8/edc_metadata-0.2.39-py3-none-any.whl", "yanked": false}], "0.2.40": [{"comment_text": "", "digests": {"md5": "07a9465e4655d3fb51d28714216b8605", "sha256": "cbf8f69eb1c368c6a50643be7cd2e775459b85ff4b719baa9d8f9c439f34fd90"}, "downloads": -1, "filename": "edc_metadata-0.2.40-py3-none-any.whl", "has_sig": false, "md5_digest": "07a9465e4655d3fb51d28714216b8605", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66171, "upload_time": "2019-06-27T21:31:30", "upload_time_iso_8601": "2019-06-27T21:31:30.829807Z", "url": "https://files.pythonhosted.org/packages/94/61/4bd56f3b1cd12f686a67be5acc158d9d95779e3a16269ef1ad704f2962b3/edc_metadata-0.2.40-py3-none-any.whl", "yanked": false}], "0.2.41": [{"comment_text": "", "digests": {"md5": "cd36a6320a6aa374dd055af88f88d8d0", "sha256": "6b96c4134e64b6b08a568fcf8bff1c7483f5d4ca7364037a2a15da680f2adaf3"}, "downloads": -1, "filename": "edc_metadata-0.2.41-py3-none-any.whl", "has_sig": false, "md5_digest": "cd36a6320a6aa374dd055af88f88d8d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66288, "upload_time": "2019-06-29T01:22:00", "upload_time_iso_8601": "2019-06-29T01:22:00.041029Z", "url": "https://files.pythonhosted.org/packages/1d/c7/328831cabf1f5d684ab92a75c79e4d57f60693a33ff7bab69a38152b5eb5/edc_metadata-0.2.41-py3-none-any.whl", "yanked": false}], "0.2.42": [{"comment_text": "", "digests": {"md5": "d2de690a5b8dcdb542781a3cb404e02e", "sha256": "58886b72b0c3ffa59e5efa8241468781c659bf5fa9a613ae0b160338f711f529"}, "downloads": -1, "filename": "edc_metadata-0.2.42-py3-none-any.whl", "has_sig": false, "md5_digest": "d2de690a5b8dcdb542781a3cb404e02e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 67068, "upload_time": "2019-07-05T23:12:16", "upload_time_iso_8601": "2019-07-05T23:12:16.773406Z", "url": "https://files.pythonhosted.org/packages/0a/0d/619ec5dadc5b51ebc5bafad37381fdf8567d7f084371849e7e7b098451fd/edc_metadata-0.2.42-py3-none-any.whl", "yanked": false}], "0.2.43": [{"comment_text": "", "digests": {"md5": "651cbc5f24b137d60561e4e9dac9240e", "sha256": "2706be8fd554648eb2cd2488190015136a4363189edf045695e4e8ac815bc76e"}, "downloads": -1, "filename": "edc_metadata-0.2.43-py3-none-any.whl", "has_sig": false, "md5_digest": "651cbc5f24b137d60561e4e9dac9240e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 67129, "upload_time": "2019-07-06T02:53:52", "upload_time_iso_8601": "2019-07-06T02:53:52.018551Z", "url": "https://files.pythonhosted.org/packages/f7/e8/da02c374226e0e609e550881304edf9a6b14d028ce310cb294ad1488a80d/edc_metadata-0.2.43-py3-none-any.whl", "yanked": false}], "0.2.44": [{"comment_text": "", "digests": {"md5": "46e07ffa3b754d3d768c9bd7bf8fdc25", "sha256": "d0744fa0e1027544e44d1fb800a3766530e7a076741b1e4c926031659a9d50b4"}, "downloads": -1, "filename": "edc_metadata-0.2.44-py3-none-any.whl", "has_sig": false, "md5_digest": "46e07ffa3b754d3d768c9bd7bf8fdc25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 69163, "upload_time": "2019-07-09T01:00:34", "upload_time_iso_8601": "2019-07-09T01:00:34.379219Z", "url": "https://files.pythonhosted.org/packages/b1/7f/6b88b3524e2d9b0c8f39806ed195440081649b3baf521a128247aae2922c/edc_metadata-0.2.44-py3-none-any.whl", "yanked": false}], "0.2.45": [{"comment_text": "", "digests": {"md5": "308e8440eea0e57455c02d44d69b2cae", "sha256": "48b07bb5402c334c78d7747aee4efd664d06cc07538808aebfe785285b9ea511"}, "downloads": -1, "filename": "edc_metadata-0.2.45-py3-none-any.whl", "has_sig": false, "md5_digest": "308e8440eea0e57455c02d44d69b2cae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 69171, "upload_time": "2019-07-17T21:00:36", "upload_time_iso_8601": "2019-07-17T21:00:36.785430Z", "url": "https://files.pythonhosted.org/packages/ca/3e/fe66c87aa13c2847aa5ea22ae107b7f3d1fbe8a103cf4224b9e903bcb9fc/edc_metadata-0.2.45-py3-none-any.whl", "yanked": false}], "0.2.46": [{"comment_text": "", "digests": {"md5": "0c3e5625c70be423aa50190c518f8dcd", "sha256": "1e4e0ce22ee750f759026329304a940edffde1d845caf7f0fbfe7f010a7be0fb"}, "downloads": -1, "filename": "edc_metadata-0.2.46-py3-none-any.whl", "has_sig": false, "md5_digest": "0c3e5625c70be423aa50190c518f8dcd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 69693, "upload_time": "2019-09-22T12:19:29", "upload_time_iso_8601": "2019-09-22T12:19:29.318781Z", "url": "https://files.pythonhosted.org/packages/f0/77/a81bc02e67df0f08c5ad0dc7355f6d96c0657e244f1791498fab5f7fb846/edc_metadata-0.2.46-py3-none-any.whl", "yanked": false}], "0.2.47": [{"comment_text": "", "digests": {"md5": "0f546c7f990498aa74df2cbe169edf6e", "sha256": "6c9ff0ea5246d6f9f265bf9c43824b5db60a9c02214a981726c2585d36bef7b5"}, "downloads": -1, "filename": "edc_metadata-0.2.47-py3-none-any.whl", "has_sig": false, "md5_digest": "0f546c7f990498aa74df2cbe169edf6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 69730, "upload_time": "2019-10-02T21:53:06", "upload_time_iso_8601": "2019-10-02T21:53:06.377768Z", "url": "https://files.pythonhosted.org/packages/24/82/64a556f3f3bc86bc4a0db4c27aa4c3fefc274588460adda947c4b27adbbb/edc_metadata-0.2.47-py3-none-any.whl", "yanked": false}], "0.2.48": [{"comment_text": "", "digests": {"md5": "a65b88a99c73baa151faa1703864ee91", "sha256": "b3232655efd1679c12e2efb9f465706a5a428e21ae8ad6a0acf86a4b998f786d"}, "downloads": -1, "filename": "edc_metadata-0.2.48-py3-none-any.whl", "has_sig": false, "md5_digest": "a65b88a99c73baa151faa1703864ee91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 70274, "upload_time": "2019-10-24T07:10:52", "upload_time_iso_8601": "2019-10-24T07:10:52.342124Z", "url": "https://files.pythonhosted.org/packages/b6/ba/a928679844ee7c23dcef4356213ddbf2ae2c85943f18be70386c8d7e639d/edc_metadata-0.2.48-py3-none-any.whl", "yanked": false}], "0.2.49": [{"comment_text": "", "digests": {"md5": "e50f9255da784845d13cb25c4436c8c5", "sha256": "3f7f1c4746c168d568ddfa96727ae60a4ec911316ec6378b71b3a12d848ae19d"}, "downloads": -1, "filename": "edc_metadata-0.2.49-py3-none-any.whl", "has_sig": false, "md5_digest": "e50f9255da784845d13cb25c4436c8c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 71673, "upload_time": "2019-11-19T23:56:00", "upload_time_iso_8601": "2019-11-19T23:56:00.770092Z", "url": "https://files.pythonhosted.org/packages/7f/66/8113b1861443122133c12c295efc69507c196e4e258e574d1288c482aedd/edc_metadata-0.2.49-py3-none-any.whl", "yanked": false}], "0.2.50": [{"comment_text": "", "digests": {"md5": "4c696ecfb2b43d9b73ca3125cf1c4a8e", "sha256": "594ccd3b44e93ce58f22e931a2597c7fbe0520e26dd35471cc872a1821accc72"}, "downloads": -1, "filename": "edc_metadata-0.2.50-py3-none-any.whl", "has_sig": false, "md5_digest": "4c696ecfb2b43d9b73ca3125cf1c4a8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72344, "upload_time": "2020-01-10T12:53:14", "upload_time_iso_8601": "2020-01-10T12:53:14.397975Z", "url": "https://files.pythonhosted.org/packages/74/74/25cb3c6f90f729ac7985136635db4ce390a0eccaa94e2a0c9808aa19533e/edc_metadata-0.2.50-py3-none-any.whl", "yanked": false}], "0.2.51": [{"comment_text": "", "digests": {"md5": "17abc83064d4cb3a4377fceecdec5cae", "sha256": "c8d15aa6eff690bd0853ca893052094b5c4e17c7cd2616860a24550177edfcbc"}, "downloads": -1, "filename": "edc_metadata-0.2.51-py3-none-any.whl", "has_sig": false, "md5_digest": "17abc83064d4cb3a4377fceecdec5cae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72315, "upload_time": "2020-01-22T20:16:31", "upload_time_iso_8601": "2020-01-22T20:16:31.769007Z", "url": "https://files.pythonhosted.org/packages/c2/5b/b74ff1686eff2c4bd5769a3b175b10a32cdfc8a08d25c405a7930e9fbe39/edc_metadata-0.2.51-py3-none-any.whl", "yanked": false}], "0.2.52": [{"comment_text": "", "digests": {"md5": "7f2460592c0f55879e0d3e0af9ede6e0", "sha256": "9ffdcdf4fe18ba33be2216f8a57ded94614997d647a0935c8edee35f07fef1ab"}, "downloads": -1, "filename": "edc_metadata-0.2.52-py3-none-any.whl", "has_sig": false, "md5_digest": "7f2460592c0f55879e0d3e0af9ede6e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72319, "upload_time": "2020-02-11T23:07:26", "upload_time_iso_8601": "2020-02-11T23:07:26.085458Z", "url": "https://files.pythonhosted.org/packages/c2/17/ffd875dd69612176e60dfcff37836310fe76fa8c51b8965ec21dcd0e1ca4/edc_metadata-0.2.52-py3-none-any.whl", "yanked": false}], "0.2.54": [{"comment_text": "", "digests": {"md5": "16e6d9017beb0ec71aeca89e6749befd", "sha256": "0dbddc25ec3e315f515aec8c59a974a506411d96b2c771bdcf170be41e5ea25d"}, "downloads": -1, "filename": "edc_metadata-0.2.54-py3-none-any.whl", "has_sig": false, "md5_digest": "16e6d9017beb0ec71aeca89e6749befd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72256, "upload_time": "2020-02-28T00:12:47", "upload_time_iso_8601": "2020-02-28T00:12:47.793726Z", "url": "https://files.pythonhosted.org/packages/91/d1/58498e32a15d6b27a8ddc1cca8df395f50820443027c8e818530d2560984/edc_metadata-0.2.54-py3-none-any.whl", "yanked": false}], "0.2.55": [{"comment_text": "", "digests": {"md5": "bccf0a1e18d0728a1b8f3592f1641a00", "sha256": "816fc12260638e5b4af2129ef441317fb508804a895b693679e8cdd427f20d9b"}, "downloads": -1, "filename": "edc_metadata-0.2.55-py3-none-any.whl", "has_sig": false, "md5_digest": "bccf0a1e18d0728a1b8f3592f1641a00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72008, "upload_time": "2020-03-02T01:57:13", "upload_time_iso_8601": "2020-03-02T01:57:13.748248Z", "url": "https://files.pythonhosted.org/packages/17/69/dcd27ab54d9d2839b1b4ecbe0f1d24865186994358d36db75c7d23eabe43/edc_metadata-0.2.55-py3-none-any.whl", "yanked": false}], "0.2.56": [{"comment_text": "", "digests": {"md5": "1bb681fc91a1e775305974c2d2199841", "sha256": "da53c4633a8697f6557c3d39cfd87f78bc945357b7d1d917854ae44c670fed5a"}, "downloads": -1, "filename": "edc_metadata-0.2.56-py3-none-any.whl", "has_sig": false, "md5_digest": "1bb681fc91a1e775305974c2d2199841", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72009, "upload_time": "2020-03-06T12:19:45", "upload_time_iso_8601": "2020-03-06T12:19:45.569397Z", "url": "https://files.pythonhosted.org/packages/a4/1f/c31e60d789add05548896e82e9435122c8983c462dbad8303b306e973b3a/edc_metadata-0.2.56-py3-none-any.whl", "yanked": false}], "0.2.57": [{"comment_text": "", "digests": {"md5": "d78ce40d591a309cf081befdc484d34b", "sha256": "915e16a167203090004c0085aede46362955df0d48a668475ac643a7c9da11f9"}, "downloads": -1, "filename": "edc_metadata-0.2.57-py3-none-any.whl", "has_sig": false, "md5_digest": "d78ce40d591a309cf081befdc484d34b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72008, "upload_time": "2020-03-12T18:51:41", "upload_time_iso_8601": "2020-03-12T18:51:41.520868Z", "url": "https://files.pythonhosted.org/packages/50/39/517e4eaa2c88a2512756ee472dad592dd21867773486e9c13b6873ba3aad/edc_metadata-0.2.57-py3-none-any.whl", "yanked": false}], "0.2.58": [{"comment_text": "", "digests": {"md5": "f6657bd4a988fef81ad44c10f84c4cd1", "sha256": "51b73db79b7a1a724eff1fb0bf780a7459b99fc8de3ea2cc49c6cc86b53c5118"}, "downloads": -1, "filename": "edc_metadata-0.2.58-py3-none-any.whl", "has_sig": false, "md5_digest": "f6657bd4a988fef81ad44c10f84c4cd1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72010, "upload_time": "2020-03-13T03:15:21", "upload_time_iso_8601": "2020-03-13T03:15:21.343456Z", "url": "https://files.pythonhosted.org/packages/2c/d0/67190e8bd6604ad6b231099ab7d44270e53cde58b28cbbc74c157561cefb/edc_metadata-0.2.58-py3-none-any.whl", "yanked": false}], "0.2.59": [{"comment_text": "", "digests": {"md5": "74eb7f55c30aaa949b9c217befcf1a16", "sha256": "1ab17498151d219f5e726311ce1bcf56791cf62ab287f4dcf1b180754860b301"}, "downloads": -1, "filename": "edc_metadata-0.2.59-py3-none-any.whl", "has_sig": false, "md5_digest": "74eb7f55c30aaa949b9c217befcf1a16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72012, "upload_time": "2020-04-05T17:31:14", "upload_time_iso_8601": "2020-04-05T17:31:14.951826Z", "url": "https://files.pythonhosted.org/packages/7d/7b/cc6791afba222e862f80a2fd57ec917964252eda3c64e0c0e568c5249d50/edc_metadata-0.2.59-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74eb7f55c30aaa949b9c217befcf1a16", "sha256": "1ab17498151d219f5e726311ce1bcf56791cf62ab287f4dcf1b180754860b301"}, "downloads": -1, "filename": "edc_metadata-0.2.59-py3-none-any.whl", "has_sig": false, "md5_digest": "74eb7f55c30aaa949b9c217befcf1a16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 72012, "upload_time": "2020-04-05T17:31:14", "upload_time_iso_8601": "2020-04-05T17:31:14.951826Z", "url": "https://files.pythonhosted.org/packages/7d/7b/cc6791afba222e862f80a2fd57ec917964252eda3c64e0c0e568c5249d50/edc_metadata-0.2.59-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:47:51 2020"}