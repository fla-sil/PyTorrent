{"info": {"author": "mittelholcz", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# quntoken\n\nNew Hungarian tokenizer based on quex and huntoken.\nThis tool is also [integrated](https://github.com/dlt-rilmta/hunlp-GATE)\ninto the [e-magyar](http://www.e-magyar.hu) language processing system\nunder the name [emToken](http://e-magyar.hu/hu/textmodules/emtoken).\n\n## Requirements\n\n* OS: linux x86-64\n* python 3.6+\n\nDeveloper requirements: \n\n* python 2.7 (for quex)\n* g++ = 5\n\n## Install\n\n```sh\npip3 install quntoken\n```\n\n## Usage\n\n\n### Command line\n\n*quntoken* reads plain text in UTF-8 from STDIN and writes to STDOUT.\n\nThe default (and recommended) format of output is TSV. It has two columns.\nThe first contains the token, the second contains the white space sequence\nafter the token. Sentence boundaries are marked with empty lines.\n\nExample: tokenizing *input.txt* file, writing the TSV output into *output.tsv* file.\n\n```\nquntoken <input.txt >output.tsv\n```\n\nOptional arguments:\n\n```txt\n  -h, --help            show this help message and exit\n  -f FORM, --form FORM  Valid formats: json, tsv, xml and spl (sentence per\n                        line). Default format: tsv.\n  -m MODE, --mode MODE  Modes: sentence or token. Default: token\n  -w, --word-break      Eliminate word break from end of lines.\n  -v, --version         show program's version number and exit\n```\n\n### Python API\n\nquntoken.**tokenize**(*inp=sys.stdin, form='tsv', mode='token',\nword_break=False*)\n\n>Entry point, returns an iterator object. Parameters:\n>\n>- *inp*: Input iterator, default: *sys.stdin*.\n>- *form*: Format of output. Valid formats: `'tsv'` (default), `'json'`, `'xml'`\n>and `'spl'` (sentence per line).\n>- *mode*: `'sentence'` (only sentence segmenting) or `'token'` (full\n>tokenization - default).\n>- *word_break*: If `'True'`, eliminates word break from end of lines. Default:\n>`'False'`.\n\nExample:\n\n```py\nfrom quntoken import tokenize\n\nfor tok in tokenize(open('input.txt')):\n    print(tok, end='')\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dlt-rilmta/quntoken", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "quntoken", "package_url": "https://pypi.org/project/quntoken/", "platform": "", "project_url": "https://pypi.org/project/quntoken/", "project_urls": {"Homepage": "https://github.com/dlt-rilmta/quntoken"}, "release_url": "https://pypi.org/project/quntoken/3.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Hungarian tokenizer based on quex and huntoken.", "version": "3.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>quntoken</h1>\n<p>New Hungarian tokenizer based on quex and huntoken.\nThis tool is also <a href=\"https://github.com/dlt-rilmta/hunlp-GATE\" rel=\"nofollow\">integrated</a>\ninto the <a href=\"http://www.e-magyar.hu\" rel=\"nofollow\">e-magyar</a> language processing system\nunder the name <a href=\"http://e-magyar.hu/hu/textmodules/emtoken\" rel=\"nofollow\">emToken</a>.</p>\n<h2>Requirements</h2>\n<ul>\n<li>OS: linux x86-64</li>\n<li>python 3.6+</li>\n</ul>\n<p>Developer requirements:</p>\n<ul>\n<li>python 2.7 (for quex)</li>\n<li>g++ = 5</li>\n</ul>\n<h2>Install</h2>\n<pre>pip3 install quntoken\n</pre>\n<h2>Usage</h2>\n<h3>Command line</h3>\n<p><em>quntoken</em> reads plain text in UTF-8 from STDIN and writes to STDOUT.</p>\n<p>The default (and recommended) format of output is TSV. It has two columns.\nThe first contains the token, the second contains the white space sequence\nafter the token. Sentence boundaries are marked with empty lines.</p>\n<p>Example: tokenizing <em>input.txt</em> file, writing the TSV output into <em>output.tsv</em> file.</p>\n<pre><code>quntoken &lt;input.txt &gt;output.tsv\n</code></pre>\n<p>Optional arguments:</p>\n<pre>  -h, --help            show this help message and exit\n  -f FORM, --form FORM  Valid formats: json, tsv, xml and spl (sentence per\n                        line). Default format: tsv.\n  -m MODE, --mode MODE  Modes: sentence or token. Default: token\n  -w, --word-break      Eliminate word break from end of lines.\n  -v, --version         show program's version number and exit\n</pre>\n<h3>Python API</h3>\n<p>quntoken.<strong>tokenize</strong>(<em>inp=sys.stdin, form='tsv', mode='token',\nword_break=False</em>)</p>\n<blockquote>\n<p>Entry point, returns an iterator object. Parameters:</p>\n<ul>\n<li><em>inp</em>: Input iterator, default: <em>sys.stdin</em>.</li>\n<li><em>form</em>: Format of output. Valid formats: <code>'tsv'</code> (default), <code>'json'</code>, <code>'xml'</code>\nand <code>'spl'</code> (sentence per line).</li>\n<li><em>mode</em>: <code>'sentence'</code> (only sentence segmenting) or <code>'token'</code> (full\ntokenization - default).</li>\n<li><em>word_break</em>: If <code>'True'</code>, eliminates word break from end of lines. Default:\n<code>'False'</code>.</li>\n</ul>\n</blockquote>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">quntoken</span> <span class=\"kn\">import</span> <span class=\"n\">tokenize</span>\n\n<span class=\"k\">for</span> <span class=\"n\">tok</span> <span class=\"ow\">in</span> <span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'input.txt'</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tok</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7165207, "releases": {"3.0.1": [{"comment_text": "", "digests": {"md5": "50522e1e4487cf7e2d6a29a14fc9e650", "sha256": "bb504e959a34414142acacd7f10b0ed3717ca219ed861260b1e3be972a5f8e04"}, "downloads": -1, "filename": "quntoken-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "50522e1e4487cf7e2d6a29a14fc9e650", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9839920, "upload_time": "2020-04-29T17:15:37", "upload_time_iso_8601": "2020-04-29T17:15:37.546824Z", "url": "https://files.pythonhosted.org/packages/d6/91/ac343a13184472d06fc59719f704e312b17343829ba7391d1bc32148986f/quntoken-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b9963bfe8d73999870e144297449275", "sha256": "12289b197966d88752629377406b10cefb24d2579874ef2d75fd021c74a98f60"}, "downloads": -1, "filename": "quntoken-3.0.1.tar.gz", "has_sig": false, "md5_digest": "0b9963bfe8d73999870e144297449275", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9764082, "upload_time": "2020-04-29T17:16:19", "upload_time_iso_8601": "2020-04-29T17:16:19.944822Z", "url": "https://files.pythonhosted.org/packages/75/c1/ffd56bf1a259a1bea15f14a02726511b0d8f58148a0e59face4ba2ee67d3/quntoken-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "7b4bd1de6026142ba6a5d80e6909c927", "sha256": "5f6d88010819adbd1dcfd8e2653a78aaabb98ad9482025b84679bc0c8685200d"}, "downloads": -1, "filename": "quntoken-3.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7b4bd1de6026142ba6a5d80e6909c927", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9839981, "upload_time": "2020-05-04T15:34:16", "upload_time_iso_8601": "2020-05-04T15:34:16.232769Z", "url": "https://files.pythonhosted.org/packages/33/c0/c0f9113f00ce35079f4f58e5d9c82de487ca1dad5fb2745642b96ec720f0/quntoken-3.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2832a867307c03087bb22438fa63900b", "sha256": "24909a2479405d812b549521d27371c07ab661d77d2553887f2e8e3c75bc7d79"}, "downloads": -1, "filename": "quntoken-3.0.2.tar.gz", "has_sig": false, "md5_digest": "2832a867307c03087bb22438fa63900b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9764128, "upload_time": "2020-05-04T15:34:46", "upload_time_iso_8601": "2020-05-04T15:34:46.776111Z", "url": "https://files.pythonhosted.org/packages/a7/5c/f0f2d6e4ef49e53ee2f961f2e1945b9123d9fb48e1f83854a795e60a52e6/quntoken-3.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b4bd1de6026142ba6a5d80e6909c927", "sha256": "5f6d88010819adbd1dcfd8e2653a78aaabb98ad9482025b84679bc0c8685200d"}, "downloads": -1, "filename": "quntoken-3.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7b4bd1de6026142ba6a5d80e6909c927", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9839981, "upload_time": "2020-05-04T15:34:16", "upload_time_iso_8601": "2020-05-04T15:34:16.232769Z", "url": "https://files.pythonhosted.org/packages/33/c0/c0f9113f00ce35079f4f58e5d9c82de487ca1dad5fb2745642b96ec720f0/quntoken-3.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2832a867307c03087bb22438fa63900b", "sha256": "24909a2479405d812b549521d27371c07ab661d77d2553887f2e8e3c75bc7d79"}, "downloads": -1, "filename": "quntoken-3.0.2.tar.gz", "has_sig": false, "md5_digest": "2832a867307c03087bb22438fa63900b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9764128, "upload_time": "2020-05-04T15:34:46", "upload_time_iso_8601": "2020-05-04T15:34:46.776111Z", "url": "https://files.pythonhosted.org/packages/a7/5c/f0f2d6e4ef49e53ee2f961f2e1945b9123d9fb48e1f83854a795e60a52e6/quntoken-3.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:18 2020"}