{"info": {"author": "Alpaca", "author_email": "oss@alpaca.markets", "bugtrack_url": null, "classifiers": [], "description": "# pymarketstore\nPython driver for MarketStore\n\nBuild Status: ![build status](https://circleci.com/gh/alpacahq/pymarketstore/tree/master.png?971fa5b1079e8af0568db6caf772132c54f04dc2)\n\nPymarketstore can query and write financial timeseries data from [MarketStore](https://github.com/alpacahq/marketstore)\n\nTested with 2.7, 3.3+\n\n## How to install\n\n```\n$ pip install pymarketstore\n```\n\n## Examples\n\n```\nIn [1]: import pymarketstore as pymkts\n\n## query data\n\nIn [2]: param = pymkts.Params('BTC', '1Min', 'OHLCV', limit=10)\n\nIn [3]: cli = pymkts.Client()\n\nIn [4]: reply = cli.query(param)\n\nIn [5]: reply.first().df()\nOut[5]:\n                               Open      High       Low     Close     Volume\nEpoch\n2018-01-17 17:19:00+00:00  10400.00  10400.25  10315.00  10337.25   7.772154\n2018-01-17 17:20:00+00:00  10328.22  10359.00  10328.22  10337.00  14.206040\n2018-01-17 17:21:00+00:00  10337.01  10337.01  10180.01  10192.15   7.906481\n2018-01-17 17:22:00+00:00  10199.99  10200.00  10129.88  10160.08  28.119562\n2018-01-17 17:23:00+00:00  10140.01  10161.00  10115.00  10115.01  11.283704\n2018-01-17 17:24:00+00:00  10115.00  10194.99  10102.35  10194.99  10.617131\n2018-01-17 17:25:00+00:00  10194.99  10240.00  10194.98  10220.00   8.586766\n2018-01-17 17:26:00+00:00  10210.02  10210.02  10101.00  10138.00   6.616969\n2018-01-17 17:27:00+00:00  10137.99  10138.00  10108.76  10124.94   9.962978\n2018-01-17 17:28:00+00:00  10124.95  10142.39  10124.94  10142.39   2.262249\n\n## write data\n\nIn [7]: import numpy as np\n\nIn [8]: import pandas as pd\n\nIn [9]: data = np.array([(pd.Timestamp('2017-01-01 00:00').value / 10**9, 10.0)], dtype=[('Epoch', 'i8'), ('Ask', 'f4')])\n\nIn [10]: cli.write(data, 'TEST/1Min/Tick')\nOut[10]: {'responses': None}\n\nIn [11]: cli.query(pymkts.Params('TEST', '1Min', 'Tick')).first().df()\nOut[11]:\n                            Ask\nEpoch\n2017-01-01 00:00:00+00:00  10.0\n\n```\n\n## Client\n\n`pymkts.Client(endpoint='http://localhost:5993/rpc')`\n\nConstruct a client object with endpoint.\n\n## Query\n\n`pymkts.Client#query(symbols, timeframe, attrgroup, start=None, end=None, limit=None, limit_from_start=False)`\n\nYou can build parameters using `pymkts.Params`.\n\n- symbols: string for a single symbol or a list of symbol string for multi-symbol query\n- timeframe: timeframe string\n- attrgroup: attribute group string.  symbols, timeframe and attrgroup compose a bucket key to query in the server\n- start: unix epoch second (int), datetime object or timestamp string. The result will include only data timestamped equal to or after this time.\n- end: unix epoch second (int), datetime object or timestamp string.  The result will include only data timestamped equal to or before this time.\n- limit: the number of records to be returned, counting from either start or end boundary.\n- limit_from_start: boolean to indicate `limit` is from the start boundary.  Defaults to False.\n\nPass one or multiple instances of `Params` to `Client.query()`.  It will return `QueryReply` object which holds internal numpy array data returned from the server.\n\n## Write\n\n`pymkts.Client#write(data, tbk)`\n\nYou can write a numpy array to the server via `Client.write()` method.  The data parameter must be numpy's [recarray type](https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.recarray.html) with\na column named `Epoch` in int64 type at the first column.  `tbk` is the bucket key of the data records.\n\n## List Symbols\n\n`pymkts.Client#list_symbols()`\n\nThe list of all symbols stored in the server are returned.\n\n## Server version\n\n`pymkts.Client#server_version()`\n\nReturns a string of Marketstore-Version header from a server response.\n\n## Streaming\n\nIf the server supports WebSocket streaming, you can connect to it using\n`pymkts.StreamConn` class.  For convenience, you can call `pymkts.Client#stream()` to obtain the instance with the same server\ninformation as REST client.\n\nOnce you have this instance, you will set up some event handles by\neither `register()` method or `@on()` decorator.  These methods accept\nregular expressions to filter which stream to act on.\n\nTo actually connect and start receiving the messages from the server,\nyou will call `run()` with the stream names.  By default, it subscribes\nto all by `*/*/*`.\n\n`pymkts.Client#stream()`\n\nReturn a `StreamConn` which is a websocket connection to the server.\n\n`pymkts.StreamConn#(endpoint)`\n\nCreate a connection instance to the `endpoint` server. The endpoint\nstring is a full URL with \"ws\" or \"wss\" scheme with the port and path.\n\n`pymkts.StreamConn#register(stream_path, func)`\n`@pymkts.StreamConn#on(stream_path)`\n\nAdd a new message handler to the connection.  The function will be called\nwith `handler(StreamConn, {\"key\": \"...\", \"data\": {...,}})` if the key\n(time bucket key) matches with the `stream_path` regular expression.\nThe `on` method is a decorator version of `register`.\n\n`pymkts.StreamConn#run([stream1, stream2, ...])`\n\nStart communication with the server and go into an indefinite loop. It\ndoes not return until unhandled exception is raised, in which case the\nconnection is closed so you need to implement retry.  Also, since this is\na blocking method, you may need to run it in a background thread.\n\n\nAn example code is as follows.\n\n```\nimport pymarketstore as pymkts\n\nconn = pymkts.StreamConn('ws://localhost:5993/ws')\n\n@conn.on(r'^BTC/')\ndef on_btc(conn, msg):\n    print('received btc', msg['data'])\n\nconn.run(['BTC/*/*'])  # runs until exception\n\n-> received btc {'Open': 4370.0, 'High': 4372.93, 'Low': 4370.0, 'Close': 4371.74, 'Volume': 3.3880948699999993, 'Epoch': 1507299600}\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alpacahq/pymarketstore", "keywords": "database,pandas,financial,timeseries", "license": "", "maintainer": "", "maintainer_email": "", "name": "pymarketstore", "package_url": "https://pypi.org/project/pymarketstore/", "platform": "", "project_url": "https://pypi.org/project/pymarketstore/", "project_urls": {"Homepage": "https://github.com/alpacahq/pymarketstore"}, "release_url": "https://pypi.org/project/pymarketstore/0.17/", "requires_dist": ["msgpack-python", "numpy", "requests", "pandas", "six", "urllib3", "pytest", "websocket-client"], "requires_python": "", "summary": "Marketstore python driver", "version": "0.17", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pymarketstore</h1>\n<p>Python driver for MarketStore</p>\n<p>Build Status: <img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3cb1859c0b7c8be449b0bdf928d51a4e9000f340/68747470733a2f2f636972636c6563692e636f6d2f67682f616c7061636168712f70796d61726b657473746f72652f747265652f6d61737465722e706e673f39373166613562313037396538616630353638646236636166373732313332633534663034646332\"></p>\n<p>Pymarketstore can query and write financial timeseries data from <a href=\"https://github.com/alpacahq/marketstore\" rel=\"nofollow\">MarketStore</a></p>\n<p>Tested with 2.7, 3.3+</p>\n<h2>How to install</h2>\n<pre><code>$ pip install pymarketstore\n</code></pre>\n<h2>Examples</h2>\n<pre><code>In [1]: import pymarketstore as pymkts\n\n## query data\n\nIn [2]: param = pymkts.Params('BTC', '1Min', 'OHLCV', limit=10)\n\nIn [3]: cli = pymkts.Client()\n\nIn [4]: reply = cli.query(param)\n\nIn [5]: reply.first().df()\nOut[5]:\n                               Open      High       Low     Close     Volume\nEpoch\n2018-01-17 17:19:00+00:00  10400.00  10400.25  10315.00  10337.25   7.772154\n2018-01-17 17:20:00+00:00  10328.22  10359.00  10328.22  10337.00  14.206040\n2018-01-17 17:21:00+00:00  10337.01  10337.01  10180.01  10192.15   7.906481\n2018-01-17 17:22:00+00:00  10199.99  10200.00  10129.88  10160.08  28.119562\n2018-01-17 17:23:00+00:00  10140.01  10161.00  10115.00  10115.01  11.283704\n2018-01-17 17:24:00+00:00  10115.00  10194.99  10102.35  10194.99  10.617131\n2018-01-17 17:25:00+00:00  10194.99  10240.00  10194.98  10220.00   8.586766\n2018-01-17 17:26:00+00:00  10210.02  10210.02  10101.00  10138.00   6.616969\n2018-01-17 17:27:00+00:00  10137.99  10138.00  10108.76  10124.94   9.962978\n2018-01-17 17:28:00+00:00  10124.95  10142.39  10124.94  10142.39   2.262249\n\n## write data\n\nIn [7]: import numpy as np\n\nIn [8]: import pandas as pd\n\nIn [9]: data = np.array([(pd.Timestamp('2017-01-01 00:00').value / 10**9, 10.0)], dtype=[('Epoch', 'i8'), ('Ask', 'f4')])\n\nIn [10]: cli.write(data, 'TEST/1Min/Tick')\nOut[10]: {'responses': None}\n\nIn [11]: cli.query(pymkts.Params('TEST', '1Min', 'Tick')).first().df()\nOut[11]:\n                            Ask\nEpoch\n2017-01-01 00:00:00+00:00  10.0\n\n</code></pre>\n<h2>Client</h2>\n<p><code>pymkts.Client(endpoint='http://localhost:5993/rpc')</code></p>\n<p>Construct a client object with endpoint.</p>\n<h2>Query</h2>\n<p><code>pymkts.Client#query(symbols, timeframe, attrgroup, start=None, end=None, limit=None, limit_from_start=False)</code></p>\n<p>You can build parameters using <code>pymkts.Params</code>.</p>\n<ul>\n<li>symbols: string for a single symbol or a list of symbol string for multi-symbol query</li>\n<li>timeframe: timeframe string</li>\n<li>attrgroup: attribute group string.  symbols, timeframe and attrgroup compose a bucket key to query in the server</li>\n<li>start: unix epoch second (int), datetime object or timestamp string. The result will include only data timestamped equal to or after this time.</li>\n<li>end: unix epoch second (int), datetime object or timestamp string.  The result will include only data timestamped equal to or before this time.</li>\n<li>limit: the number of records to be returned, counting from either start or end boundary.</li>\n<li>limit_from_start: boolean to indicate <code>limit</code> is from the start boundary.  Defaults to False.</li>\n</ul>\n<p>Pass one or multiple instances of <code>Params</code> to <code>Client.query()</code>.  It will return <code>QueryReply</code> object which holds internal numpy array data returned from the server.</p>\n<h2>Write</h2>\n<p><code>pymkts.Client#write(data, tbk)</code></p>\n<p>You can write a numpy array to the server via <code>Client.write()</code> method.  The data parameter must be numpy's <a href=\"https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.recarray.html\" rel=\"nofollow\">recarray type</a> with\na column named <code>Epoch</code> in int64 type at the first column.  <code>tbk</code> is the bucket key of the data records.</p>\n<h2>List Symbols</h2>\n<p><code>pymkts.Client#list_symbols()</code></p>\n<p>The list of all symbols stored in the server are returned.</p>\n<h2>Server version</h2>\n<p><code>pymkts.Client#server_version()</code></p>\n<p>Returns a string of Marketstore-Version header from a server response.</p>\n<h2>Streaming</h2>\n<p>If the server supports WebSocket streaming, you can connect to it using\n<code>pymkts.StreamConn</code> class.  For convenience, you can call <code>pymkts.Client#stream()</code> to obtain the instance with the same server\ninformation as REST client.</p>\n<p>Once you have this instance, you will set up some event handles by\neither <code>register()</code> method or <code>@on()</code> decorator.  These methods accept\nregular expressions to filter which stream to act on.</p>\n<p>To actually connect and start receiving the messages from the server,\nyou will call <code>run()</code> with the stream names.  By default, it subscribes\nto all by <code>*/*/*</code>.</p>\n<p><code>pymkts.Client#stream()</code></p>\n<p>Return a <code>StreamConn</code> which is a websocket connection to the server.</p>\n<p><code>pymkts.StreamConn#(endpoint)</code></p>\n<p>Create a connection instance to the <code>endpoint</code> server. The endpoint\nstring is a full URL with \"ws\" or \"wss\" scheme with the port and path.</p>\n<p><code>pymkts.StreamConn#register(stream_path, func)</code>\n<code>@pymkts.StreamConn#on(stream_path)</code></p>\n<p>Add a new message handler to the connection.  The function will be called\nwith <code>handler(StreamConn, {\"key\": \"...\", \"data\": {...,}})</code> if the key\n(time bucket key) matches with the <code>stream_path</code> regular expression.\nThe <code>on</code> method is a decorator version of <code>register</code>.</p>\n<p><code>pymkts.StreamConn#run([stream1, stream2, ...])</code></p>\n<p>Start communication with the server and go into an indefinite loop. It\ndoes not return until unhandled exception is raised, in which case the\nconnection is closed so you need to implement retry.  Also, since this is\na blocking method, you may need to run it in a background thread.</p>\n<p>An example code is as follows.</p>\n<pre><code>import pymarketstore as pymkts\n\nconn = pymkts.StreamConn('ws://localhost:5993/ws')\n\n@conn.on(r'^BTC/')\ndef on_btc(conn, msg):\n    print('received btc', msg['data'])\n\nconn.run(['BTC/*/*'])  # runs until exception\n\n-&gt; received btc {'Open': 4370.0, 'High': 4372.93, 'Low': 4370.0, 'Close': 4371.74, 'Volume': 3.3880948699999993, 'Epoch': 1507299600}\n</code></pre>\n\n          </div>"}, "last_serial": 4890410, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "585d5a9b54ad998e0a8dba9ae3e21c16", "sha256": "13de19082dfde98f85c96d57baa7a2de12810c6bce5351ff8816df29b62b99ad"}, "downloads": -1, "filename": "pymarketstore-0.10.tar.gz", "has_sig": false, "md5_digest": "585d5a9b54ad998e0a8dba9ae3e21c16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5499, "upload_time": "2018-02-07T06:43:17", "upload_time_iso_8601": "2018-02-07T06:43:17.681189Z", "url": "https://files.pythonhosted.org/packages/11/7e/3ac9a7434a8d59f4a98342040d8dda8f018e724fd6beada3c9449971c423/pymarketstore-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "9efe4af522f2eb20cb95a53ffaf264d4", "sha256": "1027d03a5a0d819a33b2819fd6af4c680107a3300e929e1498bc8de2462d50d3"}, "downloads": -1, "filename": "pymarketstore-0.11.tar.gz", "has_sig": false, "md5_digest": "9efe4af522f2eb20cb95a53ffaf264d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5504, "upload_time": "2018-02-08T23:13:22", "upload_time_iso_8601": "2018-02-08T23:13:22.426503Z", "url": "https://files.pythonhosted.org/packages/9a/63/224c7e908d937cca1063271085aafd643d6fb7ad1c47f6524b6cb18cc382/pymarketstore-0.11.tar.gz", "yanked": false}], "0.11a0": [{"comment_text": "", "digests": {"md5": "e488cb01116e61b0be87de17ee4bbade", "sha256": "18ba8605124aed1fb1b92ef440395420a6b046731cffd83739850071b5aa2d3f"}, "downloads": -1, "filename": "pymarketstore-0.11a0.tar.gz", "has_sig": false, "md5_digest": "e488cb01116e61b0be87de17ee4bbade", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5506, "upload_time": "2018-02-08T23:22:21", "upload_time_iso_8601": "2018-02-08T23:22:21.165183Z", "url": "https://files.pythonhosted.org/packages/7d/45/47a94378e0f2a16a8955f2e2ffa3a2a6851b981541dd946b0987a45cf818/pymarketstore-0.11a0.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "343f2e0fd96496b4504dc8d62d093b66", "sha256": "516b3e3d63bccab15102995017f37dc76c51f0936497cc11b3ca788468096424"}, "downloads": -1, "filename": "pymarketstore-0.12.tar.gz", "has_sig": false, "md5_digest": "343f2e0fd96496b4504dc8d62d093b66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5500, "upload_time": "2018-02-09T00:21:41", "upload_time_iso_8601": "2018-02-09T00:21:41.888520Z", "url": "https://files.pythonhosted.org/packages/96/a6/174e27e43df8e61fde0e0b8d1077ffb7d33df293694629e7c26c831d9a8f/pymarketstore-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "5df7d566c3fc31b038cb73ad824bde6b", "sha256": "faa1c6f2f3ff36fb9204d51e566ffb248ca3495025552668a26c6510ff782475"}, "downloads": -1, "filename": "pymarketstore-0.13.tar.gz", "has_sig": false, "md5_digest": "5df7d566c3fc31b038cb73ad824bde6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5894, "upload_time": "2018-05-06T06:04:02", "upload_time_iso_8601": "2018-05-06T06:04:02.312870Z", "url": "https://files.pythonhosted.org/packages/3f/7d/79a919488ef4bbec18e74d91a0f55acd5026379ca08b07e40da49d301dba/pymarketstore-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "d1b64646cabfd180cfad1a4aa5bf2669", "sha256": "3c11cc087325b61e0bb30f16ac88cbca3403e5638dd006cdc52665fe3d72b628"}, "downloads": -1, "filename": "pymarketstore-0.14.tar.gz", "has_sig": false, "md5_digest": "d1b64646cabfd180cfad1a4aa5bf2669", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5935, "upload_time": "2018-05-24T20:44:58", "upload_time_iso_8601": "2018-05-24T20:44:58.473878Z", "url": "https://files.pythonhosted.org/packages/7a/16/a6ded4651d7dc5eb8f721ed6d147575bfa41673d98764886f78b6895e5a6/pymarketstore-0.14.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "21123e3b44d00b38fc58f4a22973f87a", "sha256": "44d4e02ec17b32a72f340067dbc49ff4d31a7a8519e8ec20f021b8c00358c07f"}, "downloads": -1, "filename": "pymarketstore-0.15.tar.gz", "has_sig": false, "md5_digest": "21123e3b44d00b38fc58f4a22973f87a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7618, "upload_time": "2018-05-29T00:46:18", "upload_time_iso_8601": "2018-05-29T00:46:18.291269Z", "url": "https://files.pythonhosted.org/packages/4f/66/3415dbf061df680a5a717cf830d8e34bb3a951b233bd75b80e2e90a7ac36/pymarketstore-0.15.tar.gz", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "d865c7adb360ff486c676a0c80b982e8", "sha256": "7341f2552b90ff432713de66d743d530a49f2e00fb55da5b238a3beae6881a72"}, "downloads": -1, "filename": "pymarketstore-0.16-py3-none-any.whl", "has_sig": false, "md5_digest": "d865c7adb360ff486c676a0c80b982e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8382, "upload_time": "2018-09-11T04:53:13", "upload_time_iso_8601": "2018-09-11T04:53:13.870819Z", "url": "https://files.pythonhosted.org/packages/16/e0/ddcb87ed37c3af60617a5287c9b7ba4f34e72a3eb8d031522937aea06191/pymarketstore-0.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66dfd520e736a8ea1b7b8cbb44b0270c", "sha256": "a8184b02f4425eb1971ea7318ebd67cba874f44048b685d6ea06d30037e5af0a"}, "downloads": -1, "filename": "pymarketstore-0.16.tar.gz", "has_sig": false, "md5_digest": "66dfd520e736a8ea1b7b8cbb44b0270c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7650, "upload_time": "2018-09-11T04:53:15", "upload_time_iso_8601": "2018-09-11T04:53:15.326928Z", "url": "https://files.pythonhosted.org/packages/e6/8c/1503237957a7c4afcd1345bc0c32a324572c1b80143884a475a7418410c0/pymarketstore-0.16.tar.gz", "yanked": false}], "0.17": [{"comment_text": "", "digests": {"md5": "769a08be26d5bd559f9da20aefc98fe7", "sha256": "c17c26faf9fbda442c1919334e7156b9782d4410724a6fc0589da46d1fdd5dc3"}, "downloads": -1, "filename": "pymarketstore-0.17-py3-none-any.whl", "has_sig": false, "md5_digest": "769a08be26d5bd559f9da20aefc98fe7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12521, "upload_time": "2019-03-03T09:16:31", "upload_time_iso_8601": "2019-03-03T09:16:31.527551Z", "url": "https://files.pythonhosted.org/packages/15/3b/a63e90ab735951aeefa89437785f8515705ab21aaa57aafeb7ef0489c5d5/pymarketstore-0.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5d9c553f262206a8f603765f6b0890b", "sha256": "a0222381f04ce6dee74fc04b45459abca1defbd0572052847b0a0e082abc0d20"}, "downloads": -1, "filename": "pymarketstore-0.17.tar.gz", "has_sig": false, "md5_digest": "d5d9c553f262206a8f603765f6b0890b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7665, "upload_time": "2019-03-03T09:16:32", "upload_time_iso_8601": "2019-03-03T09:16:32.789249Z", "url": "https://files.pythonhosted.org/packages/d3/76/6337959af4f0190fa2dac9e43168ab1756d38b296623c753f58a64318b79/pymarketstore-0.17.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "84cae441919f77f00034d07dce95a3fb", "sha256": "45105b0f0a788be23e5ba286d73c6d48e0ce864fda530f75e97ebfb965964255"}, "downloads": -1, "filename": "pymarketstore-0.9.tar.gz", "has_sig": false, "md5_digest": "84cae441919f77f00034d07dce95a3fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3938, "upload_time": "2018-01-17T18:09:49", "upload_time_iso_8601": "2018-01-17T18:09:49.086721Z", "url": "https://files.pythonhosted.org/packages/3c/ea/957e2d4c86759b06688bc5c5c3d226c8e9e965cbfb531e615a8b0f4bc571/pymarketstore-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "769a08be26d5bd559f9da20aefc98fe7", "sha256": "c17c26faf9fbda442c1919334e7156b9782d4410724a6fc0589da46d1fdd5dc3"}, "downloads": -1, "filename": "pymarketstore-0.17-py3-none-any.whl", "has_sig": false, "md5_digest": "769a08be26d5bd559f9da20aefc98fe7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12521, "upload_time": "2019-03-03T09:16:31", "upload_time_iso_8601": "2019-03-03T09:16:31.527551Z", "url": "https://files.pythonhosted.org/packages/15/3b/a63e90ab735951aeefa89437785f8515705ab21aaa57aafeb7ef0489c5d5/pymarketstore-0.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5d9c553f262206a8f603765f6b0890b", "sha256": "a0222381f04ce6dee74fc04b45459abca1defbd0572052847b0a0e082abc0d20"}, "downloads": -1, "filename": "pymarketstore-0.17.tar.gz", "has_sig": false, "md5_digest": "d5d9c553f262206a8f603765f6b0890b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7665, "upload_time": "2019-03-03T09:16:32", "upload_time_iso_8601": "2019-03-03T09:16:32.789249Z", "url": "https://files.pythonhosted.org/packages/d3/76/6337959af4f0190fa2dac9e43168ab1756d38b296623c753f58a64318b79/pymarketstore-0.17.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:32 2020"}