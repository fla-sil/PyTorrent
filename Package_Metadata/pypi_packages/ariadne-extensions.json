{"info": {"author": "Ales Zoulek", "author_email": "ales.zoulek@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Ariadne Extensions\n\n[![Build Status](https://travis-ci.org/pantheon-systems/ariadne-extensions.svg?branch=master)](https://travis-ci.org/pantheon-systems/ariadne-extensions)\n[![Coverage Status](https://coveralls.io/repos/github/pantheon-systems/ariadne-extensions/badge.svg?branch=master)](https://coveralls.io/github/pantheon-systems/ariadne-extensions?branch=master)\n\nSet of scripts and helper utilities to extend [Ariadne GraphQL library](https://github.com/mirumee/ariadne)\n\n## Install\n\n`pip install ariadne-extensions`\n\n## Features\n\n\n### Federation support\n\nSupport for [Federation Specification](https://www.apollographql.com/docs/apollo-server/federation/federation-spec/)\n\n#### Features\n\n1. Generate federation schema types and directives (`_Any`, `_FieldSet`, ...)\n1. Implements `{_service{sdl}}` query\n1. Detects boundary types and generates `_Entities` union\n1. Implements resolve reference helpers for boundary types queried over `{_entities}` query (`resolve_reference` and `resolve_references` decorators)\n\n\n#### Documentation\n\n##### `ariadne_extensions.federation.FederatedManager`\n\n`FederatedManager` is a class responsible for creating and executable schema that complies with Federation Specification. Similar to what `make_executable_schema` does with ordinary schema file.\n\nCreate a FederatedManager instance passing in path to your schema file and QueryType instance. Manager needs to query_type to register `_entities` and `_service` resolvers.\n\n``` python\nquery_type = QueryType()\nmanager = federation.FederatedManager(\n    schema_sdl_file='/some/path/schema.graphql',\n    query=query_type,\n)\n```\n\nRegister any other `ObjectType`s and resolvers by either calling and `add_types` method, or by extending `manager.types` list.\n\n``` python\nphoto_type = ObjectType('Photo')\nthumbnail_type = ObjectType('Thumbnail')\n\nmanager.add_types(photo_type, thumbnail_type)\nmanager.types.append(snake_case_fallback_resolvers)\n```\n\nFinally, get a combiled schema. This compiled schema will extend types defined in '/some/path/schema.graphql' with directives, types and queries, that required by Federation Specification protocol.\n\n``` python\nschema = manager.get_schema()\n```\n\n\n##### `ariadne_extensions.federation.FederatedObjectType`\n\nIf you are using GraphQL Federation, your service schema probably implements some so called \"boundary objects\". That's where `FederatedObjectType` is useful.\n\n`FederatedObjectType` implements `resolve_reference` and `resolve_references` decorator. Those are used to register functions, that will be called when a federation gateway calls `{_entities{}}` query.\n\nLet's say `User` is a boundary type, with a single `id` key. You need to implement a function, that will accept a dictionary of keys (`{'id': ...} in our example`) and return a `User` instance.\nFederatedManager will call this function for every `_entities([{__typename: 'User', id: ...}])` query.\n\n``` python\nuser_type = federation.FederatedObjectType('User')\n\n@user_type.resolve_reference\ndef resolve_user_reference(representation, obj, info):\n    user_id = representation.get('id')\n    return get_user_by_id(user_id)\n```\n\n`FederatedObjectType` extends Ariadne's `ObjectType`. You can still use the `field` decorator, `set_alias` method and others as in regular `ObjectType`, and others.\n\n``` python\n@user_type.field('name')\ndef resolve_billing_account(obj, *_, id):\n    return f'{obj.first_name} {obj_last_name}'\n```\n\nDon't forget to add `user_type` to our manager.\n\n``` python\nmanager.add_types(user_type)\n```\n\n\n#### Example\n\n```\ntype User @key(fields: \"id\") @extends {\n    id: ID! @external\n    photos: [Photo]!\n}\n\ntype Photo {\n    id: ID!\n    url: String!\n    description: String\n}\n```\n\n``` python\nfrom os.path import dirname, join\nfrom ariadne import QueryType, ObjectType, snake_case_fallback_resolvers\n\nfrom ariadne_extensions import federation\n\nquery_type = QueryType()\nmanager = federation.FederatedManager(\n    schema_sdl_file=join(dirname(__file__), 'schema.graphql'),\n    query=query_type,\n)\n\nuser_type = federation.FederatedObjectType('User')\nphoto_type = ObjectType('Photo')\n\n@user_type.resolve_reference\ndef resolve_user_reference(representation, obj, info):\n    user_id = representation.get('id')\n    return get_user_by_id(user_id)\n\n@user_type.field('name')\ndef resolve_billing_account(obj, *_, id):\n    return f'{obj.first_name} {obj_last_name}'\n\nmanager.add_types(user_type, photo_type)\nmanager.add_types(snake_case_fallback_resolvers)\n\nschema = manager.get_schema()\n\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aleszoulek/ariadne-extensions", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ariadne-extensions", "package_url": "https://pypi.org/project/ariadne-extensions/", "platform": "", "project_url": "https://pypi.org/project/ariadne-extensions/", "project_urls": {"Homepage": "https://github.com/aleszoulek/ariadne-extensions"}, "release_url": "https://pypi.org/project/ariadne-extensions/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "Set of scripts and helper utilities to extend Ariadne GraphQL library", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Ariadne Extensions</h1>\n<p><a href=\"https://travis-ci.org/pantheon-systems/ariadne-extensions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2612f1917fa189dd937dea1121cb3782aae36987/68747470733a2f2f7472617669732d63692e6f72672f70616e7468656f6e2d73797374656d732f61726961646e652d657874656e73696f6e732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/pantheon-systems/ariadne-extensions?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4269f677e3688b8e3342296dfed703153cf1ad0f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f70616e7468656f6e2d73797374656d732f61726961646e652d657874656e73696f6e732f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Set of scripts and helper utilities to extend <a href=\"https://github.com/mirumee/ariadne\" rel=\"nofollow\">Ariadne GraphQL library</a></p>\n<h2>Install</h2>\n<p><code>pip install ariadne-extensions</code></p>\n<h2>Features</h2>\n<h3>Federation support</h3>\n<p>Support for <a href=\"https://www.apollographql.com/docs/apollo-server/federation/federation-spec/\" rel=\"nofollow\">Federation Specification</a></p>\n<h4>Features</h4>\n<ol>\n<li>Generate federation schema types and directives (<code>_Any</code>, <code>_FieldSet</code>, ...)</li>\n<li>Implements <code>{_service{sdl}}</code> query</li>\n<li>Detects boundary types and generates <code>_Entities</code> union</li>\n<li>Implements resolve reference helpers for boundary types queried over <code>{_entities}</code> query (<code>resolve_reference</code> and <code>resolve_references</code> decorators)</li>\n</ol>\n<h4>Documentation</h4>\n<h5><code>ariadne_extensions.federation.FederatedManager</code></h5>\n<p><code>FederatedManager</code> is a class responsible for creating and executable schema that complies with Federation Specification. Similar to what <code>make_executable_schema</code> does with ordinary schema file.</p>\n<p>Create a FederatedManager instance passing in path to your schema file and QueryType instance. Manager needs to query_type to register <code>_entities</code> and <code>_service</code> resolvers.</p>\n<pre><span class=\"n\">query_type</span> <span class=\"o\">=</span> <span class=\"n\">QueryType</span><span class=\"p\">()</span>\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">federation</span><span class=\"o\">.</span><span class=\"n\">FederatedManager</span><span class=\"p\">(</span>\n    <span class=\"n\">schema_sdl_file</span><span class=\"o\">=</span><span class=\"s1\">'/some/path/schema.graphql'</span><span class=\"p\">,</span>\n    <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query_type</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Register any other <code>ObjectType</code>s and resolvers by either calling and <code>add_types</code> method, or by extending <code>manager.types</code> list.</p>\n<pre><span class=\"n\">photo_type</span> <span class=\"o\">=</span> <span class=\"n\">ObjectType</span><span class=\"p\">(</span><span class=\"s1\">'Photo'</span><span class=\"p\">)</span>\n<span class=\"n\">thumbnail_type</span> <span class=\"o\">=</span> <span class=\"n\">ObjectType</span><span class=\"p\">(</span><span class=\"s1\">'Thumbnail'</span><span class=\"p\">)</span>\n\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">add_types</span><span class=\"p\">(</span><span class=\"n\">photo_type</span><span class=\"p\">,</span> <span class=\"n\">thumbnail_type</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">snake_case_fallback_resolvers</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, get a combiled schema. This compiled schema will extend types defined in '/some/path/schema.graphql' with directives, types and queries, that required by Federation Specification protocol.</p>\n<pre><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">get_schema</span><span class=\"p\">()</span>\n</pre>\n<h5><code>ariadne_extensions.federation.FederatedObjectType</code></h5>\n<p>If you are using GraphQL Federation, your service schema probably implements some so called \"boundary objects\". That's where <code>FederatedObjectType</code> is useful.</p>\n<p><code>FederatedObjectType</code> implements <code>resolve_reference</code> and <code>resolve_references</code> decorator. Those are used to register functions, that will be called when a federation gateway calls <code>{_entities{}}</code> query.</p>\n<p>Let's say <code>User</code> is a boundary type, with a single <code>id</code> key. You need to implement a function, that will accept a dictionary of keys (<code>{'id': ...} in our example</code>) and return a <code>User</code> instance.\nFederatedManager will call this function for every <code>_entities([{__typename: 'User', id: ...}])</code> query.</p>\n<pre><span class=\"n\">user_type</span> <span class=\"o\">=</span> <span class=\"n\">federation</span><span class=\"o\">.</span><span class=\"n\">FederatedObjectType</span><span class=\"p\">(</span><span class=\"s1\">'User'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@user_type</span><span class=\"o\">.</span><span class=\"n\">resolve_reference</span>\n<span class=\"k\">def</span> <span class=\"nf\">resolve_user_reference</span><span class=\"p\">(</span><span class=\"n\">representation</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">representation</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_user_by_id</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n</pre>\n<p><code>FederatedObjectType</code> extends Ariadne's <code>ObjectType</code>. You can still use the <code>field</code> decorator, <code>set_alias</code> method and others as in regular <code>ObjectType</code>, and others.</p>\n<pre><span class=\"nd\">@user_type</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">resolve_billing_account</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">obj_last_name</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n</pre>\n<p>Don't forget to add <code>user_type</code> to our manager.</p>\n<pre><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">add_types</span><span class=\"p\">(</span><span class=\"n\">user_type</span><span class=\"p\">)</span>\n</pre>\n<h4>Example</h4>\n<pre><code>type User @key(fields: \"id\") @extends {\n    id: ID! @external\n    photos: [Photo]!\n}\n\ntype Photo {\n    id: ID!\n    url: String!\n    description: String\n}\n</code></pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"kn\">import</span> <span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">join</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ariadne</span> <span class=\"kn\">import</span> <span class=\"n\">QueryType</span><span class=\"p\">,</span> <span class=\"n\">ObjectType</span><span class=\"p\">,</span> <span class=\"n\">snake_case_fallback_resolvers</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ariadne_extensions</span> <span class=\"kn\">import</span> <span class=\"n\">federation</span>\n\n<span class=\"n\">query_type</span> <span class=\"o\">=</span> <span class=\"n\">QueryType</span><span class=\"p\">()</span>\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">federation</span><span class=\"o\">.</span><span class=\"n\">FederatedManager</span><span class=\"p\">(</span>\n    <span class=\"n\">schema_sdl_file</span><span class=\"o\">=</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"s1\">'schema.graphql'</span><span class=\"p\">),</span>\n    <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query_type</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">user_type</span> <span class=\"o\">=</span> <span class=\"n\">federation</span><span class=\"o\">.</span><span class=\"n\">FederatedObjectType</span><span class=\"p\">(</span><span class=\"s1\">'User'</span><span class=\"p\">)</span>\n<span class=\"n\">photo_type</span> <span class=\"o\">=</span> <span class=\"n\">ObjectType</span><span class=\"p\">(</span><span class=\"s1\">'Photo'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@user_type</span><span class=\"o\">.</span><span class=\"n\">resolve_reference</span>\n<span class=\"k\">def</span> <span class=\"nf\">resolve_user_reference</span><span class=\"p\">(</span><span class=\"n\">representation</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">representation</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_user_by_id</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@user_type</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">resolve_billing_account</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">obj_last_name</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">add_types</span><span class=\"p\">(</span><span class=\"n\">user_type</span><span class=\"p\">,</span> <span class=\"n\">photo_type</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">add_types</span><span class=\"p\">(</span><span class=\"n\">snake_case_fallback_resolvers</span><span class=\"p\">)</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">get_schema</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6609528, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "bfda7d6c0ed68ee7fd9e6eb8e5773fb8", "sha256": "9ecc60200cecb1888910344710b4649165bbb0b365ee5521556c4da36e6c657d"}, "downloads": -1, "filename": "ariadne-extensions-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bfda7d6c0ed68ee7fd9e6eb8e5773fb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2774, "upload_time": "2019-08-20T10:45:56", "upload_time_iso_8601": "2019-08-20T10:45:56.503174Z", "url": "https://files.pythonhosted.org/packages/8e/7f/ac8467a2b469c033416b73f619abb95c448e23a0a82b9aa2c0f92dd7e9c6/ariadne-extensions-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d7e6fcc0e0c5d8548b8513e2fe608b98", "sha256": "ec552abd607b462d0da8a865340069e246bd1700cd4a55855710e2e440526279"}, "downloads": -1, "filename": "ariadne-extensions-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d7e6fcc0e0c5d8548b8513e2fe608b98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3081, "upload_time": "2019-08-20T11:04:52", "upload_time_iso_8601": "2019-08-20T11:04:52.531271Z", "url": "https://files.pythonhosted.org/packages/d2/70/939292c417ed5d1cee56acb8772211305e776540ba7e02881cfa79bca8fc/ariadne-extensions-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0d76037564244a3b13088936a8697ea1", "sha256": "e7df2ef6b83b252942a0e3e4aed31d52d1aaf51358cc4f680095596a06f03232"}, "downloads": -1, "filename": "ariadne-extensions-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0d76037564244a3b13088936a8697ea1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3092, "upload_time": "2019-08-20T11:06:55", "upload_time_iso_8601": "2019-08-20T11:06:55.815847Z", "url": "https://files.pythonhosted.org/packages/f8/cf/6bca7fafd4fea4298d236fb972aa865279e073a6fd6cc80f35c937477aca/ariadne-extensions-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "9f1b46c77b8f1a39adae48531a94ac0e", "sha256": "64bb4810d638717ee07b2ad96ef1571201351f27a53d0fd62b276847edf270b7"}, "downloads": -1, "filename": "ariadne-extensions-0.1.4.tar.gz", "has_sig": false, "md5_digest": "9f1b46c77b8f1a39adae48531a94ac0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4553, "upload_time": "2019-09-16T10:29:55", "upload_time_iso_8601": "2019-09-16T10:29:55.164899Z", "url": "https://files.pythonhosted.org/packages/62/72/e922c642d7bc21f346601125434a45fe8b7181741d317f3e805d9dbcf9c9/ariadne-extensions-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "4b8de5fc3e8fe61f75b2d396117129ca", "sha256": "5cbd2132f14f53de989ff051334180c20afbbc295df76c0032ba0cf41be72a89"}, "downloads": -1, "filename": "ariadne-extensions-0.1.5.tar.gz", "has_sig": false, "md5_digest": "4b8de5fc3e8fe61f75b2d396117129ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4580, "upload_time": "2019-09-16T13:01:00", "upload_time_iso_8601": "2019-09-16T13:01:00.520876Z", "url": "https://files.pythonhosted.org/packages/ca/29/f265372b753c262230a1fdc9519671146900ad6c4b0e39abcbd614bcf96f/ariadne-extensions-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "4fdde9aafa4079ee84357a23de3ce5c1", "sha256": "95e7b01d42cf768d61ba28c6cc838b8ba0f94fe9bc7a96d16b0f2125e5ce8303"}, "downloads": -1, "filename": "ariadne-extensions-0.1.6.tar.gz", "has_sig": false, "md5_digest": "4fdde9aafa4079ee84357a23de3ce5c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4867, "upload_time": "2020-02-11T13:38:25", "upload_time_iso_8601": "2020-02-11T13:38:25.147072Z", "url": "https://files.pythonhosted.org/packages/c1/75/7105bdaa3f4314978675e72a8bc235362fff6ebd79ba2dc591c9c4e56fe0/ariadne-extensions-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4fdde9aafa4079ee84357a23de3ce5c1", "sha256": "95e7b01d42cf768d61ba28c6cc838b8ba0f94fe9bc7a96d16b0f2125e5ce8303"}, "downloads": -1, "filename": "ariadne-extensions-0.1.6.tar.gz", "has_sig": false, "md5_digest": "4fdde9aafa4079ee84357a23de3ce5c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4867, "upload_time": "2020-02-11T13:38:25", "upload_time_iso_8601": "2020-02-11T13:38:25.147072Z", "url": "https://files.pythonhosted.org/packages/c1/75/7105bdaa3f4314978675e72a8bc235362fff6ebd79ba2dc591c9c4e56fe0/ariadne-extensions-0.1.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:15 2020"}