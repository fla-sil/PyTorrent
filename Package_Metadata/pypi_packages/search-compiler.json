{"info": {"author": "LBNL - AQT", "author_email": "marc.davis@lbl.gov", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Compilers"], "description": "# search_compiler\nAn implementation of a quantum gate synthesis algorithm based on A* and numerical optimization.  It relies on [NumPy](https://numpy.org) and [SciPy](https://www.scipy.org).  It can export code for [Qiskit](https://qiskit.org) and [OpenQASM](https://github.com/Qiskit/openqasm).\n\nThis is an implementation of the algorithm described in the paper *[Heuristics for Quantum Compiling with a Continuous Gate Set](https://arxiv.org/abs/1912.02727)*.\n\n# Installation\nThis is a python package which can be installed using pip.  You will need a Python version of at least 3.6. The search compiler currently only runs on macOS, Linux, and [the Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10). You can install it from [PyPi](https://pypi.org) using:\n```\npip3 install search_compiler \n```\nYou can also install from a downloaded copy of the repository:\n```\ngit clone git@github.com:WolfLink/search_compiler.git\npip3 install ./search_compiler\n```\nIf you make changes to your local copy, you can reinstall the package:\n```\npip3 install --upgrade ./search_compiler\n```\n\n\nOnce installed, you can import the library like any other python package:\n```\nimport search_compiler as sc\n```\n### Native Gateset\nThere is a gateset that is implemented in native code to be faster.  [See the wiki for installation instructions](https://github.com/WolfLink/search_compiler/wiki/Native-Gateset).\n# Getting Started: search_compiler Projects\nThe simplest way to use the search_compiler library is by using a Project. When you create a project, you provide a path where a directory will be created to contain the project's files.\n```\nimport search_compiler as sc\nmyproject = sc.Project(\"desired/path/to/project/directory\")\n```\nYou can then add unitaries to compile, and set compiler properties. Unitary matrices should be provided as `numpy` ndarrays using `dtype=\"complex128\"`.\n```\nmyproject.add_compilation(\"gate_name\", gate_unitary)\nmyproject[\"compiler_option\"] = value\n```\nOnce your project is configured, you can start your project by calling `run()`. The compiler uses an automatic checkpoint system, so if it is killed while in-progress, it can be resumed by calling `run()` again.\n```\nmyproject.run()\n```\nOnce your project is finished, you can get openqasm output:\n```\nmyproject.assemble(\"gate_name\") # This will write the qasm to stdout\nmyproject.assemble(\"gate_name\", write_location=\"path/to/output/file\") # This will write the qasm to the specified path.\n```\n[See the wiki for details on compiler properties and other Project features](https://github.com/WolfLink/search_compiler/wiki/Advanced-Project-Features).\n\n# Compiling Without Projects\nIf you would like to avoid working with Projects, you can use the `SearchCompiler` class directly.\n```\nimport search_compiler as sc\ncompiler = sc.SearchCompiler()\ncircuit, vector = compiler.compile(target_unitary)\n```\nThe `SearchCompiler` class and the `compile` function can take extra arguments to further configure the compiler.  The return values are, in order, the unitary that represents the implemented circuit, the `sc.QuantumStep` representation of the circuit structure, and the vector of parameters for the circuit structure.\n\nTo export openqasm code, use the `assemble` function from `assembler.py`.\n```\nmyqasm = sc.assembler.assemble(circuit, vector, sc.assembler.ASSEMBLY_IBMOPENQASM) # to get output as a string\nsc.assembler.assemble(circuit, vector, sc.assembler.ASSEMBLY_IBMOPENQASM, write_location=\"myqasm.txt\") # to write the output to a file\n```\n\n[See the wiki for details on compiler properties](https://github.com/WolfLink/search_compiler/wiki/Advanced-Compiler-Features).\n\n# A Note On Endianness\nWe use the physics convention of using big endian when naming our qubits.  Some quantum programs, including IBM's Qiskit, use little endian.  This means you will need to reverse the endianness of a unitary designed for Qiskit in order to work with our code, or visa versa.  We provide a function that performs endian reversal on numpy matrices:\n```\nlittle_endian = sc.utils.endian_reverse(big_endian) # you can use the same function to convert in the other direction as well\n```\n\n## Find information on customizing the compiler in the [wiki](https://github.com/WolfLink/search_compiler/wiki).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "quantum compilers synthesis computing", "license": "", "maintainer": "", "maintainer_email": "", "name": "search-compiler", "package_url": "https://pypi.org/project/search-compiler/", "platform": "", "project_url": "https://pypi.org/project/search-compiler/", "project_urls": null, "release_url": "https://pypi.org/project/search-compiler/1.2.1/", "requires_dist": ["numpy", "scipy", "scrs (>=0.6)", "cma ; extra == 'cma'", "matplotlib ; extra == 'graphics'"], "requires_python": ">=3.6, <4", "summary": "Search-Based Quantum Synthesis/Compilation", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>search_compiler</h1>\n<p>An implementation of a quantum gate synthesis algorithm based on A* and numerical optimization.  It relies on <a href=\"https://numpy.org\" rel=\"nofollow\">NumPy</a> and <a href=\"https://www.scipy.org\" rel=\"nofollow\">SciPy</a>.  It can export code for <a href=\"https://qiskit.org\" rel=\"nofollow\">Qiskit</a> and <a href=\"https://github.com/Qiskit/openqasm\" rel=\"nofollow\">OpenQASM</a>.</p>\n<p>This is an implementation of the algorithm described in the paper <em><a href=\"https://arxiv.org/abs/1912.02727\" rel=\"nofollow\">Heuristics for Quantum Compiling with a Continuous Gate Set</a></em>.</p>\n<h1>Installation</h1>\n<p>This is a python package which can be installed using pip.  You will need a Python version of at least 3.6. The search compiler currently only runs on macOS, Linux, and <a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\" rel=\"nofollow\">the Windows Subsystem for Linux</a>. You can install it from <a href=\"https://pypi.org\" rel=\"nofollow\">PyPi</a> using:</p>\n<pre><code>pip3 install search_compiler \n</code></pre>\n<p>You can also install from a downloaded copy of the repository:</p>\n<pre><code>git clone git@github.com:WolfLink/search_compiler.git\npip3 install ./search_compiler\n</code></pre>\n<p>If you make changes to your local copy, you can reinstall the package:</p>\n<pre><code>pip3 install --upgrade ./search_compiler\n</code></pre>\n<p>Once installed, you can import the library like any other python package:</p>\n<pre><code>import search_compiler as sc\n</code></pre>\n<h3>Native Gateset</h3>\n<p>There is a gateset that is implemented in native code to be faster.  <a href=\"https://github.com/WolfLink/search_compiler/wiki/Native-Gateset\" rel=\"nofollow\">See the wiki for installation instructions</a>.</p>\n<h1>Getting Started: search_compiler Projects</h1>\n<p>The simplest way to use the search_compiler library is by using a Project. When you create a project, you provide a path where a directory will be created to contain the project's files.</p>\n<pre><code>import search_compiler as sc\nmyproject = sc.Project(\"desired/path/to/project/directory\")\n</code></pre>\n<p>You can then add unitaries to compile, and set compiler properties. Unitary matrices should be provided as <code>numpy</code> ndarrays using <code>dtype=\"complex128\"</code>.</p>\n<pre><code>myproject.add_compilation(\"gate_name\", gate_unitary)\nmyproject[\"compiler_option\"] = value\n</code></pre>\n<p>Once your project is configured, you can start your project by calling <code>run()</code>. The compiler uses an automatic checkpoint system, so if it is killed while in-progress, it can be resumed by calling <code>run()</code> again.</p>\n<pre><code>myproject.run()\n</code></pre>\n<p>Once your project is finished, you can get openqasm output:</p>\n<pre><code>myproject.assemble(\"gate_name\") # This will write the qasm to stdout\nmyproject.assemble(\"gate_name\", write_location=\"path/to/output/file\") # This will write the qasm to the specified path.\n</code></pre>\n<p><a href=\"https://github.com/WolfLink/search_compiler/wiki/Advanced-Project-Features\" rel=\"nofollow\">See the wiki for details on compiler properties and other Project features</a>.</p>\n<h1>Compiling Without Projects</h1>\n<p>If you would like to avoid working with Projects, you can use the <code>SearchCompiler</code> class directly.</p>\n<pre><code>import search_compiler as sc\ncompiler = sc.SearchCompiler()\ncircuit, vector = compiler.compile(target_unitary)\n</code></pre>\n<p>The <code>SearchCompiler</code> class and the <code>compile</code> function can take extra arguments to further configure the compiler.  The return values are, in order, the unitary that represents the implemented circuit, the <code>sc.QuantumStep</code> representation of the circuit structure, and the vector of parameters for the circuit structure.</p>\n<p>To export openqasm code, use the <code>assemble</code> function from <code>assembler.py</code>.</p>\n<pre><code>myqasm = sc.assembler.assemble(circuit, vector, sc.assembler.ASSEMBLY_IBMOPENQASM) # to get output as a string\nsc.assembler.assemble(circuit, vector, sc.assembler.ASSEMBLY_IBMOPENQASM, write_location=\"myqasm.txt\") # to write the output to a file\n</code></pre>\n<p><a href=\"https://github.com/WolfLink/search_compiler/wiki/Advanced-Compiler-Features\" rel=\"nofollow\">See the wiki for details on compiler properties</a>.</p>\n<h1>A Note On Endianness</h1>\n<p>We use the physics convention of using big endian when naming our qubits.  Some quantum programs, including IBM's Qiskit, use little endian.  This means you will need to reverse the endianness of a unitary designed for Qiskit in order to work with our code, or visa versa.  We provide a function that performs endian reversal on numpy matrices:</p>\n<pre><code>little_endian = sc.utils.endian_reverse(big_endian) # you can use the same function to convert in the other direction as well\n</code></pre>\n<h2>Find information on customizing the compiler in the <a href=\"https://github.com/WolfLink/search_compiler/wiki\" rel=\"nofollow\">wiki</a>.</h2>\n\n          </div>"}, "last_serial": 7134557, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "881ba1db9fbb1ee14620cb33b7634263", "sha256": "f43348b7799dca3caf7db6ad8d33cf9b86cd7ddeca63f3458497f78d58b235db"}, "downloads": -1, "filename": "search_compiler-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "881ba1db9fbb1ee14620cb33b7634263", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <4", "size": 27660, "upload_time": "2020-02-29T04:18:45", "upload_time_iso_8601": "2020-02-29T04:18:45.167581Z", "url": "https://files.pythonhosted.org/packages/6e/ba/b871ab23a462803d6b6cedacac0fd8de035c4c69c2db203e8103a9957b91/search_compiler-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1c17cf51dd43b7467f0a4695130def2", "sha256": "21a3582d42855a6da155d45052689417603cac112dab2541b0fcaf2fd9a425b7"}, "downloads": -1, "filename": "search_compiler-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b1c17cf51dd43b7467f0a4695130def2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 23986, "upload_time": "2020-02-29T04:18:47", "upload_time_iso_8601": "2020-02-29T04:18:47.436802Z", "url": "https://files.pythonhosted.org/packages/bb/30/722ccc3514d82fb8c622c26d0169d37d5048b2d58786b15e5dad321e36ad/search_compiler-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8aab844d0243ddac814383b2ca6629e0", "sha256": "32f3dfaf7d350415e3bc7c203de1eab04145221cb618bd07dd8be983be5cae77"}, "downloads": -1, "filename": "search_compiler-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8aab844d0243ddac814383b2ca6629e0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <4", "size": 29210, "upload_time": "2020-04-10T10:16:11", "upload_time_iso_8601": "2020-04-10T10:16:11.669426Z", "url": "https://files.pythonhosted.org/packages/21/c0/f4efc722c65648cd6e3ab4cd5e685b99254e6bed2f251c801195f9b4c9c2/search_compiler-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95cda10171a89a6819d690bef39906d5", "sha256": "45b5aa57fa6cb7a9e5314fc33db5305757956e3f71cc69ef6034e9b84793bafa"}, "downloads": -1, "filename": "search_compiler-1.1.0.tar.gz", "has_sig": false, "md5_digest": "95cda10171a89a6819d690bef39906d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 25859, "upload_time": "2020-04-10T10:16:12", "upload_time_iso_8601": "2020-04-10T10:16:12.609143Z", "url": "https://files.pythonhosted.org/packages/2d/61/9c0e6559b2ed25404bc94d7a1ddf4d9dec64adec319e94a0731a6b95d40a/search_compiler-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "5380beface03bf6a56d53ea536fc3532", "sha256": "8e9b740ec23c2cdc47f29a9ea720be888811af5e5b4db6a797fbaf14ef7e725c"}, "downloads": -1, "filename": "search_compiler-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5380beface03bf6a56d53ea536fc3532", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <4", "size": 30542, "upload_time": "2020-04-30T02:25:30", "upload_time_iso_8601": "2020-04-30T02:25:30.549162Z", "url": "https://files.pythonhosted.org/packages/49/2e/722a5c874b60da828a8db831e194f9bb63b1f21fac110b4bd868c4fc3f00/search_compiler-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32c785853208be1c609abbe9e8f9930e", "sha256": "f1470866b64db524d412eaf78570bd4e3b132c946f84b40f9cd12d248b892bf1"}, "downloads": -1, "filename": "search_compiler-1.2.0.tar.gz", "has_sig": false, "md5_digest": "32c785853208be1c609abbe9e8f9930e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 27348, "upload_time": "2020-04-30T02:21:57", "upload_time_iso_8601": "2020-04-30T02:21:57.843988Z", "url": "https://files.pythonhosted.org/packages/d7/a8/2bcaef7e7da2ad5dcc59e90098f49d3cd0279c149c44701b5eabd9a61a9d/search_compiler-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "b837184e83cd5dc4135ebc5342c52b5a", "sha256": "e396b7744c5f1998a58ffa3f3b7d0f6ffc5d7c8938d3c65aa359b45e562d9f33"}, "downloads": -1, "filename": "search_compiler-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b837184e83cd5dc4135ebc5342c52b5a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <4", "size": 30536, "upload_time": "2020-04-30T03:09:24", "upload_time_iso_8601": "2020-04-30T03:09:24.472099Z", "url": "https://files.pythonhosted.org/packages/c6/88/2a5bd647e163a1893844b8257764aa5103f97a9d85c75e5ff27cebea0613/search_compiler-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df30b8c21e14baed9bc9e6f9dae624d8", "sha256": "bb8b96b3520a5b689d70d9e7204a5f61c82452604a48b8a923ed008b33cf87af"}, "downloads": -1, "filename": "search_compiler-1.2.1.tar.gz", "has_sig": false, "md5_digest": "df30b8c21e14baed9bc9e6f9dae624d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 27351, "upload_time": "2020-04-30T03:09:25", "upload_time_iso_8601": "2020-04-30T03:09:25.615187Z", "url": "https://files.pythonhosted.org/packages/54/6e/c55542951923eb0a3c1677dc660966d05378090c0272bf5ab70aaaa88989/search_compiler-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b837184e83cd5dc4135ebc5342c52b5a", "sha256": "e396b7744c5f1998a58ffa3f3b7d0f6ffc5d7c8938d3c65aa359b45e562d9f33"}, "downloads": -1, "filename": "search_compiler-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b837184e83cd5dc4135ebc5342c52b5a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <4", "size": 30536, "upload_time": "2020-04-30T03:09:24", "upload_time_iso_8601": "2020-04-30T03:09:24.472099Z", "url": "https://files.pythonhosted.org/packages/c6/88/2a5bd647e163a1893844b8257764aa5103f97a9d85c75e5ff27cebea0613/search_compiler-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df30b8c21e14baed9bc9e6f9dae624d8", "sha256": "bb8b96b3520a5b689d70d9e7204a5f61c82452604a48b8a923ed008b33cf87af"}, "downloads": -1, "filename": "search_compiler-1.2.1.tar.gz", "has_sig": false, "md5_digest": "df30b8c21e14baed9bc9e6f9dae624d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 27351, "upload_time": "2020-04-30T03:09:25", "upload_time_iso_8601": "2020-04-30T03:09:25.615187Z", "url": "https://files.pythonhosted.org/packages/54/6e/c55542951923eb0a3c1677dc660966d05378090c0272bf5ab70aaaa88989/search_compiler-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:06 2020"}