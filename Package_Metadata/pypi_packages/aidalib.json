{"info": {"author": "Giulio Bottari", "author_email": "giuliobottari@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "# Aida Lib\n\nAida is a language agnostic library for text generation.\n\n## Usage\n\nA simple hello world script would look like this:\n\n```Python\nfrom aida import render, Empty, Var\n\n# create a variable to hold a name\nname_var = Var('name')\n\n# create a simple phrase\nnode = (Empty + 'hello,' | name_var).to_phrase()\n\n# assign a value to the variable\nname_var.assign('World')\n\n# render the node\nprint(render(node))  # 'Hello, World.'\n```\n\n## Install\n\nDownload and install with pip:\n\n```bash\npip install aidalib\n```\n\n## Core Concepts\n\nWhen using Aida, first you compose a tree of operations on your text that include conditions via branches and other control flow. Later, you fill the tree with data and render the text.\n\nA building block is the variable class: `Var`. Use it to represent a value that you want to control later. A variable can hold numbers (e.g. `float`, `int`) or strings.\n\nYou can create branches and complex logic with `Branch`. In the example below, if `x` is greater than 1, it will render `many`, otherwise `single`.\n\n```Python\nx = Var('x')\nBranch(x > 1, 'many', 'single')\n```\n\n### Context\n\nThe context, represented by the class `Ctx`, is useful to create rules that depends on what has been written before. Each object or literal that is passed to Aida is remembered by the context.\n\n```Python\nname = Const('Bob')\nalt_name = Const('He')\nbob = Branch(~name.in_ctx(), name, alt_name)\nctx = Ctx()\n\nrender(bob | 'is a cool guy.' | bob | 'doesn\\'t mind.', ctx)\n# Bob is a cool guy. He doesn't mind.\n```\n\nCreating a reference expression is a common use-case, so we have a helper function called `create_ref`.\n\n```Python\nbob = create_ref('Bob', 'He')\n```\n\n### Operators\n\nYou can compose operations on your text with some handy operators.\n\n#### Concatenation (`+` and `|`)\n\n```Python\n'the' | 'quick' | 'brown' | 'fox'  # 'the quick brown fox'\n\n'the' + 'quick' + 'brown' + 'fox'  # 'thequickbrownfox'\n```\n\n#### Check context (`in_ctx`)\n\nCheck if the current node is in the context.\n\n```Python\nConst('something').in_ctx()\n```\n\n#### Create a sentence (`sentence`)\n\nFormats a line into a sentence, capitalizing the first word and adding a period.\n\n```Python\nConst('hello world').sentence()  # 'Hello world.'\n```\n\n#### Logical and numeric operators\n\n| operator              | example  |\n| --------------------- | -------- |\n| negation              | `!x`     |\n| greater than          | `x > y`  |\n| greater or equal than | `x >= y` |\n| less than             | `x < y`  |\n| less or equal than    | `x <= y` |\n| equal                 | `x == y` |\n| not equal             | `x != y` |\n| or                    | `x | y`  |\n| and                   | `x & y`  |\n| plus                  | `x + y`  |\n\n### Random choice\n\nRandomly draws one node from a list of possibilities.\n\n```Python\nChoice('Alice', 'Bob', 'Chris')  # either 'Alice', 'Bob', or 'Chris'\n```\n\n### Injector\n\nThe `Injector` class assigns values to variables from a list each time it is rendered. Very useful to automatically fill values based on data.\n\n```Python\nanimal = Var('animal')\nsound = Var('sound')\nnode = animal | 'makes' | sound\nnode = Injector([animal, sound], node)\n\n# assign multiple values\nnode.assign([\n  {'animal': 'cat', 'sound': 'meaw'},\n  {'animal': 'dog', 'sound': 'roof'},\n])\n\nrender(node) # 'cat makes meaw'\n\nrender(node) # 'dog makes roof'\n```\n\n### For-loops with `Repeat`\n\nUse `Repeat` to render a node multiple times. At the simplest level, you have this:\n\n```Python\nrender(Repeat('buffalo').assign(8))\n# 'buffalo buffalo buffalo buffalo buffalo buffalo buffalo buffalo'\n```\n\n`Repeat` is very useful when used with `Injector`, like this:\n\n```Python\nanimal = Var('animal')\nsound = Var('sound')\nnode = animal | 'makes' | sound\nnode = Injector([animal, sound], node)\nrepeat = Repeat(node)\n\n# assign multiple values\ndata = [\n  {'animal': 'cat', 'sound': 'meaw'},\n  {'animal': 'dog', 'sound': 'roof'},\n]\nnode.assign(data)\nrepeat.assign(len(data))\n\n# renders text based on data\nrender(node)  # cat makes meaw dog makes roof\n```\n\n## Language Concepts\n\nThere are some experimental features that allows you to create text that adapts to common language features, like grammatical _number_ and _person_.\n\n### Enumerate items\n\nUse `LangConfig` to setup language features and then call `create_enumeration()`.\n\n```Python\nfrom aida import create_enumeration, LangConfig, Lang, render\n\nrender(create_enumeration(LangConfig(lang=Lang.ENGLISH), 'Alice', 'Bob', 'Chris'))\n# 'Alice, Bob, and Chris'\n\nrender(create_enumeration(LangConfig(lang=Lang.PORTUGUESE), 'Alice', 'Bob', 'Chris'))\n# 'Alice, Bob e Chris'\n```\n\n### Sentence Structure\n\nYou can compose sentences using special structures: `NP` (noun phrase) and `VP` (verb phrase) along with `LangConfig`.\n\n```Python\nfrom aida import NP, VP, LangConfig\n\nsubj = NP('the dog')\nverb = VP('barked')\n\ns = (subj | verb).sentence()\n\nrender(LangConfig(s))  # The dog barked.\n```\n\nWhat really makes this different from just using `Const` is that we can create rules that change the output of `NP` and `VP` based on various language features. The system will try to use the rule that matches most features from the given `LangConfig`.\n\n```Python\nfrom aida import NP, VP, LangConfig, GNumber, GPerson\n\nsubj = (NP('I')\n        .add_mapping('I', GNumber.SINGULAR, GPerson.FIRST)\n        .add_mapping('he', GNumber.SINGULAR, GPerson.THIRD))\n        .add_mapping('we', GNumber.PLURAL, GPerson.FIRST))\nverb = (VP('drive')\n        .add_mapping('drive', GPerson.FIRST)\n        .add_mapping('drives', GPerson.THIRD))\n\ns = (subj | verb | 'a nice car').sentence()\n\nrender(LangConfig(s, number=GNumber.SINGULAR, person=GPerson.FIRST))  # I drive a nice car.\nrender(LangConfig(s, number=GNumber.SINGULAR, person=GPerson.THIRD))  # He drives a nice car.\nrender(LangConfig(s, number=GNumber.PLURAL, person=GPerson.FIRST))  # We drive a nice car.\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mediatechlab/aida-lib", "keywords": "nlg natural-language-generation text-generation library", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aidalib", "package_url": "https://pypi.org/project/aidalib/", "platform": "", "project_url": "https://pypi.org/project/aidalib/", "project_urls": {"Bus Tracker": "https://github.com/mediatechlab/aida-lib/issues", "Documentation": "https://github.com/mediatechlab/aida-lib/blob/master/README.md", "Homepage": "https://github.com/mediatechlab/aida-lib", "Source Code": "https://github.com/mediatechlab/aida-lib"}, "release_url": "https://pypi.org/project/aidalib/0.2/", "requires_dist": null, "requires_python": "", "summary": "Aida is a language agnostic library for text generation.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Aida Lib</h1>\n<p>Aida is a language agnostic library for text generation.</p>\n<h2>Usage</h2>\n<p>A simple hello world script would look like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aida</span> <span class=\"kn\">import</span> <span class=\"n\">render</span><span class=\"p\">,</span> <span class=\"n\">Empty</span><span class=\"p\">,</span> <span class=\"n\">Var</span>\n\n<span class=\"c1\"># create a variable to hold a name</span>\n<span class=\"n\">name_var</span> <span class=\"o\">=</span> <span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a simple phrase</span>\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Empty</span> <span class=\"o\">+</span> <span class=\"s1\">'hello,'</span> <span class=\"o\">|</span> <span class=\"n\">name_var</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_phrase</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># assign a value to the variable</span>\n<span class=\"n\">name_var</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"s1\">'World'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># render the node</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">))</span>  <span class=\"c1\"># 'Hello, World.'</span>\n</pre>\n<h2>Install</h2>\n<p>Download and install with pip:</p>\n<pre>pip install aidalib\n</pre>\n<h2>Core Concepts</h2>\n<p>When using Aida, first you compose a tree of operations on your text that include conditions via branches and other control flow. Later, you fill the tree with data and render the text.</p>\n<p>A building block is the variable class: <code>Var</code>. Use it to represent a value that you want to control later. A variable can hold numbers (e.g. <code>float</code>, <code>int</code>) or strings.</p>\n<p>You can create branches and complex logic with <code>Branch</code>. In the example below, if <code>x</code> is greater than 1, it will render <code>many</code>, otherwise <code>single</code>.</p>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">Branch</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'many'</span><span class=\"p\">,</span> <span class=\"s1\">'single'</span><span class=\"p\">)</span>\n</pre>\n<h3>Context</h3>\n<p>The context, represented by the class <code>Ctx</code>, is useful to create rules that depends on what has been written before. Each object or literal that is passed to Aida is remembered by the context.</p>\n<pre><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"s1\">'Bob'</span><span class=\"p\">)</span>\n<span class=\"n\">alt_name</span> <span class=\"o\">=</span> <span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"s1\">'He'</span><span class=\"p\">)</span>\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Branch</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">in_ctx</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">alt_name</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">Ctx</span><span class=\"p\">()</span>\n\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">bob</span> <span class=\"o\">|</span> <span class=\"s1\">'is a cool guy.'</span> <span class=\"o\">|</span> <span class=\"n\">bob</span> <span class=\"o\">|</span> <span class=\"s1\">'doesn</span><span class=\"se\">\\'</span><span class=\"s1\">t mind.'</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">)</span>\n<span class=\"c1\"># Bob is a cool guy. He doesn't mind.</span>\n</pre>\n<p>Creating a reference expression is a common use-case, so we have a helper function called <code>create_ref</code>.</p>\n<pre><span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">create_ref</span><span class=\"p\">(</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'He'</span><span class=\"p\">)</span>\n</pre>\n<h3>Operators</h3>\n<p>You can compose operations on your text with some handy operators.</p>\n<h4>Concatenation (<code>+</code> and <code>|</code>)</h4>\n<pre><span class=\"s1\">'the'</span> <span class=\"o\">|</span> <span class=\"s1\">'quick'</span> <span class=\"o\">|</span> <span class=\"s1\">'brown'</span> <span class=\"o\">|</span> <span class=\"s1\">'fox'</span>  <span class=\"c1\"># 'the quick brown fox'</span>\n\n<span class=\"s1\">'the'</span> <span class=\"o\">+</span> <span class=\"s1\">'quick'</span> <span class=\"o\">+</span> <span class=\"s1\">'brown'</span> <span class=\"o\">+</span> <span class=\"s1\">'fox'</span>  <span class=\"c1\"># 'thequickbrownfox'</span>\n</pre>\n<h4>Check context (<code>in_ctx</code>)</h4>\n<p>Check if the current node is in the context.</p>\n<pre><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"s1\">'something'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">in_ctx</span><span class=\"p\">()</span>\n</pre>\n<h4>Create a sentence (<code>sentence</code>)</h4>\n<p>Formats a line into a sentence, capitalizing the first word and adding a period.</p>\n<pre><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sentence</span><span class=\"p\">()</span>  <span class=\"c1\"># 'Hello world.'</span>\n</pre>\n<h4>Logical and numeric operators</h4>\n<table>\n<thead>\n<tr>\n<th>operator</th>\n<th>example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>negation</td>\n<td><code>!x</code></td>\n</tr>\n<tr>\n<td>greater than</td>\n<td><code>x &gt; y</code></td>\n</tr>\n<tr>\n<td>greater or equal than</td>\n<td><code>x &gt;= y</code></td>\n</tr>\n<tr>\n<td>less than</td>\n<td><code>x &lt; y</code></td>\n</tr>\n<tr>\n<td>less or equal than</td>\n<td><code>x &lt;= y</code></td>\n</tr>\n<tr>\n<td>equal</td>\n<td><code>x == y</code></td>\n</tr>\n<tr>\n<td>not equal</td>\n<td><code>x != y</code></td>\n</tr>\n<tr>\n<td>or</td>\n<td>`x</td>\n</tr>\n<tr>\n<td>and</td>\n<td><code>x &amp; y</code></td>\n</tr>\n<tr>\n<td>plus</td>\n<td><code>x + y</code></td>\n</tr></tbody></table>\n<h3>Random choice</h3>\n<p>Randomly draws one node from a list of possibilities.</p>\n<pre><span class=\"n\">Choice</span><span class=\"p\">(</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Chris'</span><span class=\"p\">)</span>  <span class=\"c1\"># either 'Alice', 'Bob', or 'Chris'</span>\n</pre>\n<h3>Injector</h3>\n<p>The <code>Injector</code> class assigns values to variables from a list each time it is rendered. Very useful to automatically fill values based on data.</p>\n<pre><span class=\"n\">animal</span> <span class=\"o\">=</span> <span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"s1\">'animal'</span><span class=\"p\">)</span>\n<span class=\"n\">sound</span> <span class=\"o\">=</span> <span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"s1\">'sound'</span><span class=\"p\">)</span>\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">animal</span> <span class=\"o\">|</span> <span class=\"s1\">'makes'</span> <span class=\"o\">|</span> <span class=\"n\">sound</span>\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">([</span><span class=\"n\">animal</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"p\">],</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># assign multiple values</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">([</span>\n  <span class=\"p\">{</span><span class=\"s1\">'animal'</span><span class=\"p\">:</span> <span class=\"s1\">'cat'</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">:</span> <span class=\"s1\">'meaw'</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'animal'</span><span class=\"p\">:</span> <span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">:</span> <span class=\"s1\">'roof'</span><span class=\"p\">},</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span> <span class=\"c1\"># 'cat makes meaw'</span>\n\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span> <span class=\"c1\"># 'dog makes roof'</span>\n</pre>\n<h3>For-loops with <code>Repeat</code></h3>\n<p>Use <code>Repeat</code> to render a node multiple times. At the simplest level, you have this:</p>\n<pre><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Repeat</span><span class=\"p\">(</span><span class=\"s1\">'buffalo'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"c1\"># 'buffalo buffalo buffalo buffalo buffalo buffalo buffalo buffalo'</span>\n</pre>\n<p><code>Repeat</code> is very useful when used with <code>Injector</code>, like this:</p>\n<pre><span class=\"n\">animal</span> <span class=\"o\">=</span> <span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"s1\">'animal'</span><span class=\"p\">)</span>\n<span class=\"n\">sound</span> <span class=\"o\">=</span> <span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"s1\">'sound'</span><span class=\"p\">)</span>\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">animal</span> <span class=\"o\">|</span> <span class=\"s1\">'makes'</span> <span class=\"o\">|</span> <span class=\"n\">sound</span>\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">([</span><span class=\"n\">animal</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"p\">],</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n<span class=\"n\">repeat</span> <span class=\"o\">=</span> <span class=\"n\">Repeat</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># assign multiple values</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s1\">'animal'</span><span class=\"p\">:</span> <span class=\"s1\">'cat'</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">:</span> <span class=\"s1\">'meaw'</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'animal'</span><span class=\"p\">:</span> <span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">:</span> <span class=\"s1\">'roof'</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">repeat</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># renders text based on data</span>\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>  <span class=\"c1\"># cat makes meaw dog makes roof</span>\n</pre>\n<h2>Language Concepts</h2>\n<p>There are some experimental features that allows you to create text that adapts to common language features, like grammatical <em>number</em> and <em>person</em>.</p>\n<h3>Enumerate items</h3>\n<p>Use <code>LangConfig</code> to setup language features and then call <code>create_enumeration()</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aida</span> <span class=\"kn\">import</span> <span class=\"n\">create_enumeration</span><span class=\"p\">,</span> <span class=\"n\">LangConfig</span><span class=\"p\">,</span> <span class=\"n\">Lang</span><span class=\"p\">,</span> <span class=\"n\">render</span>\n\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">create_enumeration</span><span class=\"p\">(</span><span class=\"n\">LangConfig</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"n\">Lang</span><span class=\"o\">.</span><span class=\"n\">ENGLISH</span><span class=\"p\">),</span> <span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Chris'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 'Alice, Bob, and Chris'</span>\n\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">create_enumeration</span><span class=\"p\">(</span><span class=\"n\">LangConfig</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"n\">Lang</span><span class=\"o\">.</span><span class=\"n\">PORTUGUESE</span><span class=\"p\">),</span> <span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Chris'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 'Alice, Bob e Chris'</span>\n</pre>\n<h3>Sentence Structure</h3>\n<p>You can compose sentences using special structures: <code>NP</code> (noun phrase) and <code>VP</code> (verb phrase) along with <code>LangConfig</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aida</span> <span class=\"kn\">import</span> <span class=\"n\">NP</span><span class=\"p\">,</span> <span class=\"n\">VP</span><span class=\"p\">,</span> <span class=\"n\">LangConfig</span>\n\n<span class=\"n\">subj</span> <span class=\"o\">=</span> <span class=\"n\">NP</span><span class=\"p\">(</span><span class=\"s1\">'the dog'</span><span class=\"p\">)</span>\n<span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"n\">VP</span><span class=\"p\">(</span><span class=\"s1\">'barked'</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">subj</span> <span class=\"o\">|</span> <span class=\"n\">verb</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sentence</span><span class=\"p\">()</span>\n\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">LangConfig</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>  <span class=\"c1\"># The dog barked.</span>\n</pre>\n<p>What really makes this different from just using <code>Const</code> is that we can create rules that change the output of <code>NP</code> and <code>VP</code> based on various language features. The system will try to use the rule that matches most features from the given <code>LangConfig</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aida</span> <span class=\"kn\">import</span> <span class=\"n\">NP</span><span class=\"p\">,</span> <span class=\"n\">VP</span><span class=\"p\">,</span> <span class=\"n\">LangConfig</span><span class=\"p\">,</span> <span class=\"n\">GNumber</span><span class=\"p\">,</span> <span class=\"n\">GPerson</span>\n\n<span class=\"n\">subj</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">NP</span><span class=\"p\">(</span><span class=\"s1\">'I'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">add_mapping</span><span class=\"p\">(</span><span class=\"s1\">'I'</span><span class=\"p\">,</span> <span class=\"n\">GNumber</span><span class=\"o\">.</span><span class=\"n\">SINGULAR</span><span class=\"p\">,</span> <span class=\"n\">GPerson</span><span class=\"o\">.</span><span class=\"n\">FIRST</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">add_mapping</span><span class=\"p\">(</span><span class=\"s1\">'he'</span><span class=\"p\">,</span> <span class=\"n\">GNumber</span><span class=\"o\">.</span><span class=\"n\">SINGULAR</span><span class=\"p\">,</span> <span class=\"n\">GPerson</span><span class=\"o\">.</span><span class=\"n\">THIRD</span><span class=\"p\">))</span>\n        <span class=\"o\">.</span><span class=\"n\">add_mapping</span><span class=\"p\">(</span><span class=\"s1\">'we'</span><span class=\"p\">,</span> <span class=\"n\">GNumber</span><span class=\"o\">.</span><span class=\"n\">PLURAL</span><span class=\"p\">,</span> <span class=\"n\">GPerson</span><span class=\"o\">.</span><span class=\"n\">FIRST</span><span class=\"p\">))</span>\n<span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">VP</span><span class=\"p\">(</span><span class=\"s1\">'drive'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">add_mapping</span><span class=\"p\">(</span><span class=\"s1\">'drive'</span><span class=\"p\">,</span> <span class=\"n\">GPerson</span><span class=\"o\">.</span><span class=\"n\">FIRST</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">add_mapping</span><span class=\"p\">(</span><span class=\"s1\">'drives'</span><span class=\"p\">,</span> <span class=\"n\">GPerson</span><span class=\"o\">.</span><span class=\"n\">THIRD</span><span class=\"p\">))</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">subj</span> <span class=\"o\">|</span> <span class=\"n\">verb</span> <span class=\"o\">|</span> <span class=\"s1\">'a nice car'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sentence</span><span class=\"p\">()</span>\n\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">LangConfig</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"n\">GNumber</span><span class=\"o\">.</span><span class=\"n\">SINGULAR</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"o\">=</span><span class=\"n\">GPerson</span><span class=\"o\">.</span><span class=\"n\">FIRST</span><span class=\"p\">))</span>  <span class=\"c1\"># I drive a nice car.</span>\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">LangConfig</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"n\">GNumber</span><span class=\"o\">.</span><span class=\"n\">SINGULAR</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"o\">=</span><span class=\"n\">GPerson</span><span class=\"o\">.</span><span class=\"n\">THIRD</span><span class=\"p\">))</span>  <span class=\"c1\"># He drives a nice car.</span>\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">LangConfig</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"n\">GNumber</span><span class=\"o\">.</span><span class=\"n\">PLURAL</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"o\">=</span><span class=\"n\">GPerson</span><span class=\"o\">.</span><span class=\"n\">FIRST</span><span class=\"p\">))</span>  <span class=\"c1\"># We drive a nice car.</span>\n</pre>\n\n          </div>"}, "last_serial": 6653612, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cecd6ef2178fc8dbd4a8cec09f463eba", "sha256": "52fb47d59a9952b3b305343ac417971385596d9eea3dc767184146d29996b9dc"}, "downloads": -1, "filename": "aidalib-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cecd6ef2178fc8dbd4a8cec09f463eba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7465, "upload_time": "2020-02-14T17:45:38", "upload_time_iso_8601": "2020-02-14T17:45:38.284157Z", "url": "https://files.pythonhosted.org/packages/71/a4/176388d6836f89cfe20dc4cef03302adaebce025404a8bcd6420d09f89c0/aidalib-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d14353e49151511c4e1bcc6d7f91f97b", "sha256": "39dcb66fd4778d956f543c754c739dd389634e40544a1c03eeac353c3608a496"}, "downloads": -1, "filename": "aidalib-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d14353e49151511c4e1bcc6d7f91f97b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8876, "upload_time": "2020-02-18T14:27:54", "upload_time_iso_8601": "2020-02-18T14:27:54.493323Z", "url": "https://files.pythonhosted.org/packages/57/f2/30609e22cab09323740b6ef302bf34fe2f559a4f14d9c1d5ad9a32eb9699/aidalib-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d14353e49151511c4e1bcc6d7f91f97b", "sha256": "39dcb66fd4778d956f543c754c739dd389634e40544a1c03eeac353c3608a496"}, "downloads": -1, "filename": "aidalib-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d14353e49151511c4e1bcc6d7f91f97b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8876, "upload_time": "2020-02-18T14:27:54", "upload_time_iso_8601": "2020-02-18T14:27:54.493323Z", "url": "https://files.pythonhosted.org/packages/57/f2/30609e22cab09323740b6ef302bf34fe2f559a4f14d9c1d5ad9a32eb9699/aidalib-0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:22:09 2020"}