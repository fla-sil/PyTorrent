{"info": {"author": "Rodrigo Ar\u0125imede\u03c2 \u2133ontegasppa \u212dacilh\u03b1\u03c2", "author_email": "batalema@cacilhas.info", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4", "Topic :: Games/Entertainment", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. _L\u00d6VE: http://www.love2d.org/\n        .. _Lua: http://www.lua.org/\n        .. _PyGame: http://www.pygame.org/\n        \n        \n        Kundalini\n        =========\n        \n        L\u00d6VE_ is an **awesome** framework you can use to make 2D games in Lua_,\n        in a very similar way with PyGame_.\n        \n        Kundalini intends to offer an API similar to that of L\u00d6VE to develop\n        games using PyGame.\n        \n        \n        Usage\n        -----\n        \n        Subclass ``kundalini.FrameManager`` and override the method::\n            @abstractmethod\n            def build_screen(self) -> Surface:\n                pass\n        \n        \n        It must return a ``pygame.surface.Surface``, like, for example, the\n        object returned by ``pygame.display.set_mode()``.\n        \n        You also can override::\n            def load(self) -> None:\n                pass\n        \n        \n            def draw(self) -> None:\n                self.screen.fill((0, 0, 0))\n        \n        \n            def handle_event(self, event:Event) -> None:\n                pass\n        \n        \n            def update(self, delta:float) -> None:\n                pass\n        \n        \n        The method ``load()`` is performed by ``init()`` call, just after\n        ``pygame.init()``.\n        \n        The method ``draw()`` is performed every drawing loop.\n        \n        The method ``handle_event()`` is performed for each occuring event. It\n        receives the event as parameter.\n        \n        The method ``update()`` is performed about 1024 times a second, and\n        receives the time delta in seconds since last performing as parameter.", "description_content_type": null, "docs_url": null, "download_url": "https://bitbucket.org/cacilhas/kundalini/branch/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cacilhas/kundalini", "keywords": null, "license": "BSD 3-Clausule License", "maintainer": null, "maintainer_email": null, "name": "kundalini", "package_url": "https://pypi.org/project/kundalini/", "platform": "any", "project_url": "https://pypi.org/project/kundalini/", "project_urls": {"Download": "https://bitbucket.org/cacilhas/kundalini/branch/master", "Homepage": "https://bitbucket.org/cacilhas/kundalini"}, "release_url": "https://pypi.org/project/kundalini/0.4/", "requires_dist": null, "requires_python": null, "summary": "L\u00d6VE-like PyGame API", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. _L\u00d6VE: http://www.love2d.org/<br>        .. _Lua: http://www.lua.org/<br>        .. _PyGame: http://www.pygame.org/<br>        <br>        <br>        Kundalini<br>        =========<br>        <br>        L\u00d6VE_ is an **awesome** framework you can use to make 2D games in Lua_,<br>        in a very similar way with PyGame_.<br>        <br>        Kundalini intends to offer an API similar to that of L\u00d6VE to develop<br>        games using PyGame.<br>        <br>        <br>        Usage<br>        -----<br>        <br>        Subclass ``kundalini.FrameManager`` and override the method::<br>            @abstractmethod<br>            def build_screen(self) -&gt; Surface:<br>                pass<br>        <br>        <br>        It must return a ``pygame.surface.Surface``, like, for example, the<br>        object returned by ``pygame.display.set_mode()``.<br>        <br>        You also can override::<br>            def load(self) -&gt; None:<br>                pass<br>        <br>        <br>            def draw(self) -&gt; None:<br>                self.screen.fill((0, 0, 0))<br>        <br>        <br>            def handle_event(self, event:Event) -&gt; None:<br>                pass<br>        <br>        <br>            def update(self, delta:float) -&gt; None:<br>                pass<br>        <br>        <br>        The method ``load()`` is performed by ``init()`` call, just after<br>        ``pygame.init()``.<br>        <br>        The method ``draw()`` is performed every drawing loop.<br>        <br>        The method ``handle_event()`` is performed for each occuring event. It<br>        receives the event as parameter.<br>        <br>        The method ``update()`` is performed about 1024 times a second, and<br>        receives the time delta in seconds since last performing as parameter.\n          </div>"}, "last_serial": 1254808, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "d1f92d2bc22da33c2b9f5aa3a4db7a97", "sha256": "dd2015f4d8149d9db717fadaa6e56a66e7332d8565da6e6028388c48c439484f"}, "downloads": -1, "filename": "kundalini-0.4.tar.gz", "has_sig": false, "md5_digest": "d1f92d2bc22da33c2b9f5aa3a4db7a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4302, "upload_time": "2014-10-10T23:27:55", "upload_time_iso_8601": "2014-10-10T23:27:55.505149Z", "url": "https://files.pythonhosted.org/packages/65/9d/ab9f7e12c9d33b814eb043c28ca004dc5969d44493ebc059cfcbb40072bf/kundalini-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d1f92d2bc22da33c2b9f5aa3a4db7a97", "sha256": "dd2015f4d8149d9db717fadaa6e56a66e7332d8565da6e6028388c48c439484f"}, "downloads": -1, "filename": "kundalini-0.4.tar.gz", "has_sig": false, "md5_digest": "d1f92d2bc22da33c2b9f5aa3a4db7a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4302, "upload_time": "2014-10-10T23:27:55", "upload_time_iso_8601": "2014-10-10T23:27:55.505149Z", "url": "https://files.pythonhosted.org/packages/65/9d/ab9f7e12c9d33b814eb043c28ca004dc5969d44493ebc059cfcbb40072bf/kundalini-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:34 2020"}