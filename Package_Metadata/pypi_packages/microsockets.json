{"info": {"author": "David Parker", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Microsockets\n\n## ASGI Websocket Server made with simplicity in mind.\n\n### Install\n```bash\npip install microsockets\n```\n\n### Make an app\n```python\nimport microsockets\n\napp = microsockets.Application(\n    # event_router, defaults to microsockets.events.EventRouter\n    # room_manager, defaults to microsockets.rooms.RoomManager\n)\n```\n\n### Add an event handler\n```python\n@app.on(\"join\")\nasync def handle(ws):\n    room = ws.payload[\"room\"]\n    user = ws.payload[\"user\"]\n    # Rooms managed by rooms.RoomManager, which can be subclassed/replaced\n    await ws.join(room)\n    # Emit event back to client, may pass a payload as second argument\n    await ws.emit(\"joined\")\n    # Broadcast to all other users in the room. skip_self=False would send it to current client as well.\n    await ws.broadcast(\"user joined\", json.dumps(dict(user=user)), to=[room])\n```\n\n### Add middleware\n```python\n@app.hooks.before_on\nasync def load_payload(ws, func):\n    ws.payload = json.loads(ws.payload)\n    await func(ws)\n```\n\n### Run with ASGI Server\n```bash\npip install uvicorn\n```\n\n```bash\nuvicorn example:app\n```\n\n### Install JS client\n```bash\nnpm install microsockets\n```\n\n### Make client side handlers and emit events\n```javascript\nimport MicroSocket from microsockets;\nconst socket = MicroSocket(\"ws://127.0.0.1:8000\");\n// socket.on(event, handler): Add event handler\n// socket.off(event, handler?): Remove event handler(s)\n// socket.send(event, payload): Overridden WebSocket method, requires event. Payload defaults to \"\".\n\n// MicroSocket returns a modified WebSocket, so the full WebSocket API is still available.\nsocket.onopen = function (e) {\n    document.write(\"[open] Connection established <br />\");\n    document.write(\"Joining room <br />\");\n    socket.send(\"join\", JSON.stringify({ room: \"gamers\", user: Math.random() }));\n};\n\nsocket.on(\"joined\", function (payload) {\n    document.write(`[joined] Payload: ${payload} <br />`);\n});\n\nsocket.on(\"user joined\", function (payload) {\n    document.write(`[user joined] Payload: ${payload} <br />`);\n});\n```\n\nRun `example.py` and open `example.html` in multiple browser tabs to see this basic example.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ParkerD559/microsockets-py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "microsockets", "package_url": "https://pypi.org/project/microsockets/", "platform": "", "project_url": "https://pypi.org/project/microsockets/", "project_urls": {"Homepage": "https://github.com/ParkerD559/microsockets-py"}, "release_url": "https://pypi.org/project/microsockets/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "ASGI Websocket server made with simplicity in mind.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Microsockets</h1>\n<h2>ASGI Websocket Server made with simplicity in mind.</h2>\n<h3>Install</h3>\n<pre>pip install microsockets\n</pre>\n<h3>Make an app</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">microsockets</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">microsockets</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span>\n    <span class=\"c1\"># event_router, defaults to microsockets.events.EventRouter</span>\n    <span class=\"c1\"># room_manager, defaults to microsockets.rooms.RoomManager</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Add an event handler</h3>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"s2\">\"join\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"p\">):</span>\n    <span class=\"n\">room</span> <span class=\"o\">=</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s2\">\"room\"</span><span class=\"p\">]</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Rooms managed by rooms.RoomManager, which can be subclassed/replaced</span>\n    <span class=\"k\">await</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">room</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Emit event back to client, may pass a payload as second argument</span>\n    <span class=\"k\">await</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s2\">\"joined\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Broadcast to all other users in the room. skip_self=False would send it to current client as well.</span>\n    <span class=\"k\">await</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">broadcast</span><span class=\"p\">(</span><span class=\"s2\">\"user joined\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">)),</span> <span class=\"n\">to</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">room</span><span class=\"p\">])</span>\n</pre>\n<h3>Add middleware</h3>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">hooks</span><span class=\"o\">.</span><span class=\"n\">before_on</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">load_payload</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">):</span>\n    <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"p\">)</span>\n</pre>\n<h3>Run with ASGI Server</h3>\n<pre>pip install uvicorn\n</pre>\n<pre>uvicorn example:app\n</pre>\n<h3>Install JS client</h3>\n<pre>npm install microsockets\n</pre>\n<h3>Make client side handlers and emit events</h3>\n<pre><span class=\"kr\">import</span> <span class=\"nx\">MicroSocket</span> <span class=\"nx\">from</span> <span class=\"nx\">microsockets</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">socket</span> <span class=\"o\">=</span> <span class=\"nx\">MicroSocket</span><span class=\"p\">(</span><span class=\"s2\">\"ws://127.0.0.1:8000\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// socket.on(event, handler): Add event handler</span>\n<span class=\"c1\">// socket.off(event, handler?): Remove event handler(s)</span>\n<span class=\"c1\">// socket.send(event, payload): Overridden WebSocket method, requires event. Payload defaults to \"\".</span>\n\n<span class=\"c1\">// MicroSocket returns a modified WebSocket, so the full WebSocket API is still available.</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">onopen</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">\"[open] Connection established &lt;br /&gt;\"</span><span class=\"p\">);</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s2\">\"Joining room &lt;br /&gt;\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s2\">\"join\"</span><span class=\"p\">,</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span> <span class=\"nx\">room</span><span class=\"o\">:</span> <span class=\"s2\">\"gamers\"</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"o\">:</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"p\">}));</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"joined\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"sb\">`[joined] Payload: </span><span class=\"si\">${</span><span class=\"nx\">payload</span><span class=\"si\">}</span><span class=\"sb\"> &lt;br /&gt;`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"user joined\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"sb\">`[user joined] Payload: </span><span class=\"si\">${</span><span class=\"nx\">payload</span><span class=\"si\">}</span><span class=\"sb\"> &lt;br /&gt;`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</pre>\n<p>Run <code>example.py</code> and open <code>example.html</code> in multiple browser tabs to see this basic example.</p>\n\n          </div>"}, "last_serial": 5773505, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3b86aca13e564b8f553c292320016e30", "sha256": "c0ce0024a017c3f2714526ab86652455a2e9c4ca94d452d8a0d6af49958b302e"}, "downloads": -1, "filename": "microsockets-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b86aca13e564b8f553c292320016e30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5846, "upload_time": "2019-09-03T02:30:56", "upload_time_iso_8601": "2019-09-03T02:30:56.783384Z", "url": "https://files.pythonhosted.org/packages/8f/41/375bea9af06caa924d0c7afe50a371ac8333f5167ebdf6441c072bd20e45/microsockets-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a87f44a043d8f2f2aca19508c37173d", "sha256": "cc5ee30d75bc737fb989c32d5370b217fdc5f336e96687526daad548d93211c1"}, "downloads": -1, "filename": "microsockets-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6a87f44a043d8f2f2aca19508c37173d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3994, "upload_time": "2019-09-03T02:30:59", "upload_time_iso_8601": "2019-09-03T02:30:59.133732Z", "url": "https://files.pythonhosted.org/packages/b3/5e/739c5c0d1c40cfa6bf4cda50b4116094b5758e5c87766baa4d2374f21f5a/microsockets-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b86aca13e564b8f553c292320016e30", "sha256": "c0ce0024a017c3f2714526ab86652455a2e9c4ca94d452d8a0d6af49958b302e"}, "downloads": -1, "filename": "microsockets-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b86aca13e564b8f553c292320016e30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5846, "upload_time": "2019-09-03T02:30:56", "upload_time_iso_8601": "2019-09-03T02:30:56.783384Z", "url": "https://files.pythonhosted.org/packages/8f/41/375bea9af06caa924d0c7afe50a371ac8333f5167ebdf6441c072bd20e45/microsockets-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a87f44a043d8f2f2aca19508c37173d", "sha256": "cc5ee30d75bc737fb989c32d5370b217fdc5f336e96687526daad548d93211c1"}, "downloads": -1, "filename": "microsockets-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6a87f44a043d8f2f2aca19508c37173d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3994, "upload_time": "2019-09-03T02:30:59", "upload_time_iso_8601": "2019-09-03T02:30:59.133732Z", "url": "https://files.pythonhosted.org/packages/b3/5e/739c5c0d1c40cfa6bf4cda50b4116094b5758e5c87766baa4d2374f21f5a/microsockets-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:56 2020"}