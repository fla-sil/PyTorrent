{"info": {"author": "Dmitry Orlov <me@mosquito.su>", "author_email": "me@mosquito.su", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Programming Language :: Python"], "description": "Simple AES\n==========\n\nVery simple encryption helper for pycripto\n\nInstallation\n++++++++++++\n\n        pip install simple-aes\n\nUsing\n+++++\n\n    >>> from simple_aes import SimpleAES\n    >>> enc = SimpleAES('test', use_salt=True)\n    >>> encrypted = enc.encrypt('test')\n    >>> enc.decrypt(encrypted)\n    'test'\n\nParameter \"use salt\" use salted algorithm. You get different encrypted values each times.\nBut you must be careful. Sometimes this may make encryption of weaker. I will try to explain it.\nIf you try to encrypt identical phrase more times with salt in theory your encryption key may be opened via differential analysis.\nBut when you sure what you not doing it, it's makes encryption stronger.\n\nEncrypting big files\n++++++++++++++++++++\n\nFor encrypting big files you may using EncryptIO like this:\n\n    >>> print \"Encrypting...\"\n    >>> f = EncryptIO('secret', open('test', 'wb+'))\n    >>> f.write('Hello world 1024 times. ' * 1024)\n    >>> f.close()\n    >>> d = EncryptIO('secret', open('test', 'rb'))\n    >>> print \"Decrypting...\"\n    >>> data = ''\n    >>> for i in d.decrypt():\n    ...     data += i\n    >>> print data\n\nThis write data to file with encrypting and ZLIB compression.\nYou may change compressor via changing class-property COMPRESSOR.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mosquito/simpleaes", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "simple_aes", "package_url": "https://pypi.org/project/simple_aes/", "platform": "all", "project_url": "https://pypi.org/project/simple_aes/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mosquito/simpleaes"}, "release_url": "https://pypi.org/project/simple_aes/0.4.7/", "requires_dist": null, "requires_python": null, "summary": "Very simple pycrypto AES helper.", "version": "0.4.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Very simple encryption helper for pycripto</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\npip install simple-aes</blockquote>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; from simple_aes import SimpleAES\n&gt;&gt;&gt; enc = SimpleAES('test', use_salt=True)\n&gt;&gt;&gt; encrypted = enc.encrypt('test')\n&gt;&gt;&gt; enc.decrypt(encrypted)\n'test'\n</pre>\n</blockquote>\n<p>Parameter \u201cuse salt\u201d use salted algorithm. You get different encrypted values each times.\nBut you must be careful. Sometimes this may make encryption of weaker. I will try to explain it.\nIf you try to encrypt identical phrase more times with salt in theory your encryption key may be opened via differential analysis.\nBut when you sure what you not doing it, it\u2019s makes encryption stronger.</p>\n</div>\n<div id=\"encrypting-big-files\">\n<h2>Encrypting big files</h2>\n<p>For encrypting big files you may using EncryptIO like this:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print \"Encrypting...\"\n&gt;&gt;&gt; f = EncryptIO('secret', open('test', 'wb+'))\n&gt;&gt;&gt; f.write('Hello world 1024 times. ' * 1024)\n&gt;&gt;&gt; f.close()\n&gt;&gt;&gt; d = EncryptIO('secret', open('test', 'rb'))\n&gt;&gt;&gt; print \"Decrypting...\"\n&gt;&gt;&gt; data = ''\n&gt;&gt;&gt; for i in d.decrypt():\n...     data += i\n&gt;&gt;&gt; print data\n</pre>\n</blockquote>\n<p>This write data to file with encrypting and ZLIB compression.\nYou may change compressor via changing class-property COMPRESSOR.</p>\n</div>\n\n          </div>"}, "last_serial": 1167640, "releases": {"0.4.7": [{"comment_text": "", "digests": {"md5": "b7d71d5ee148a16051ff0bf9850cc4db", "sha256": "4198523f3f41aa2ecd7552be641a0eecac2a1654ff6c4b41f42859b0c67bd9f8"}, "downloads": -1, "filename": "simple_aes-0.4.7.tar.gz", "has_sig": false, "md5_digest": "b7d71d5ee148a16051ff0bf9850cc4db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3432, "upload_time": "2014-07-24T07:53:01", "upload_time_iso_8601": "2014-07-24T07:53:01.100668Z", "url": "https://files.pythonhosted.org/packages/dc/65/5526c08b69dc561383a509cd3d2e2f040486dfca0049e7d9ec4932c8ff50/simple_aes-0.4.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7d71d5ee148a16051ff0bf9850cc4db", "sha256": "4198523f3f41aa2ecd7552be641a0eecac2a1654ff6c4b41f42859b0c67bd9f8"}, "downloads": -1, "filename": "simple_aes-0.4.7.tar.gz", "has_sig": false, "md5_digest": "b7d71d5ee148a16051ff0bf9850cc4db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3432, "upload_time": "2014-07-24T07:53:01", "upload_time_iso_8601": "2014-07-24T07:53:01.100668Z", "url": "https://files.pythonhosted.org/packages/dc/65/5526c08b69dc561383a509cd3d2e2f040486dfca0049e7d9ec4932c8ff50/simple_aes-0.4.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:05 2020"}