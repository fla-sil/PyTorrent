{"info": {"author": "Bochul Choi", "author_email": "vio.bo94@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "========\nBynamoDB\n========\n\nHigh-Level DynamoDB Interface for Python wrapping Low-Level Interface of boto\n\nInstallation\n============\n\nFrom PyPi::\n\n    $ pip install bynamodb\n\nFrom GitHub::\n\n    $ pip install git+https://github.com/teddychoi/BynamoDB#egg=bynamodb\n\nPatch DynamoDBConnection\n========================\n\nSet DynamoDBConnection default host and port.\n\n.. code-block:: python\n\n    from bynamodb.patcher import patch_dynamodb_connection\n\n    patch_dynamodb_connection(host='localhost', port=8000)\n\nModel Definition\n================\n.. code-block:: python\n\n    import datetime\n    from bynamodb.attributes import StringAttribute, StringSetAttribute\n    from bynamodb.indexes import GlobalAllIndex\n    from bynamodb.model import Model\n    \n    class Article(Model):\n        published_at = StringAttribute(hash_key=True)\n        id = StringAttribute(range_key=True)\n        title = StringAttribute()\n        content = StringAttribute()\n        author = StringAttribute()\n        write_time = StringAttribute(\n            default=lambda: str(datetime.datetime.now()))\n        tags = StringSetAttribute(default=set())\n        thumbnail = StringAttribute(null=True)\n        \n        class AuthorIndex(GlobalAllIndex):\n            read_throughput = 5\n            write_throughput = 5\n            hash_key = 'author'\n            range_key = 'published_at'\n\nPut Item & Get Item\n===================\n.. code-block:: python\n\n    Article.put_item(\n        published_at='2014-12-09',\n        id='1',\n        title='This is the title',\n        content='This is the content',\n        author='Bochul Choi'\n    )\n    article = Article.get_item(hash_key='2014-12-09', range_key='1')\n\nGet Item from Raw Data\n======================\n\nYou can get items from raw data retrieved from `boto`'s low level API\n\n.. code-block:: python\n\n    from boto.dynamodb2.layer1 import DynamoDBConnection\n\n    conn = DynamoDBConnection()\n    raw_data = conn.get_item(\n        'Article',\n        {\n            'published_at': {'S': '2014-12-09'},\n            'id': {'S': '1'}\n        }\n    )\n    article = Article.from_raw_data(raw_data['Item'])\n\nSimple Scan & Query\n===================\n.. code-block:: python\n\n    # Scan all articles that the title starts with \"Title\"\n    articles = Article.scan(title__startswith='Title')\n    # Get the total count of matching items\n    count = articles.count()\n    # Get the iterator of matching items\n    items = iter(articles)\n\n    # Query articles that author is \"Bochul Choi\"\n    articles = Article.query(author__eq='Bochul Choi', index_name='AuthorIndex')\n    # The query result also provide the count method and iterator\n    count = articles.count()\n    items = iter(articles)\n\nComplex lookups in Scan & Query\n===============================\n.. code-block:: python\n\n    from bynamodb.filterexps import Contains, GT\n    \n    keyword = 'bynamodb'\n    filter_exp = GT('published_at', '2014-12-01') & (\n        Contains('title', keyword) | Contains('content', keyword.upper()))\n    \n    # Scan all articles that match the filter expression\n    articles = Article.scan(filter_exp)\n    \n    # Query articles that match the filter expression and the author condition\n    author = 'Bochul Choi'\n    articles = Atricle.query(author__eq=author, filter_builder=filter_exp,\n                             index_name='AuthorIndex')\n\n\nBatch Writing & Batch Reading\n=============================\n.. code-block:: python\n\n    with Article.batch_write() as batch:\n        batch.put_item({\n            'published_at': '2015-02-23',\n            'id': '1',\n            'title': 'Article 1',\n            'content': 'This is the content',\n            'author': 'Bochul Choi'\n        })\n        batch.put_item({\n            'published_at': '2015-02-23',\n            'id': '2',\n            'title': 'Article 2',\n            'content': 'This is the content',\n            'author': 'Bochul Choi'\n        })\n\n    articles = Article.batch_get(\n        ('2015-02-23', '1'),\n        ('2015-02-23', '2'),\n    )\n\n\nChangelog\n=========\n0.1.7\n    - Skip decoding non-existent attribute.\n0.1.6\n    - Fix `ResultSet` to stop fetching items regardless of the limit param.\n0.1.5\n    - Add support `scan_index_forward` and `limit` pamareter for Query API.\n0.1.4\n    - Set `ExclusiveStartKey` as the untransformed `LastEvaluatedKey`.\n0.1.3\n    - `Model.delete` needs to use encoded key.\n0.1.2\n    - `Model.put_item` returns created item.\n0.1.1\n    - `NumberAttribute` is only saved as number in db.\n", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/teddychoi/BynamoDB", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "bynamodb", "package_url": "https://pypi.org/project/bynamodb/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bynamodb/", "project_urls": {"Homepage": "https://github.com/teddychoi/BynamoDB"}, "release_url": "https://pypi.org/project/bynamodb/0.1.7/", "requires_dist": null, "requires_python": null, "summary": "High-Level DynamoDB Interface for Pythonwrapping Low-Level Interface of boto", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>High-Level DynamoDB Interface for Python wrapping Low-Level Interface of boto</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From PyPi:</p>\n<pre>$ pip install bynamodb\n</pre>\n<p>From GitHub:</p>\n<pre>$ pip install git+https://github.com/teddychoi/BynamoDB#egg=bynamodb\n</pre>\n</div>\n<div id=\"patch-dynamodbconnection\">\n<h2>Patch DynamoDBConnection</h2>\n<p>Set DynamoDBConnection default host and port.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bynamodb.patcher</span> <span class=\"kn\">import</span> <span class=\"n\">patch_dynamodb_connection</span>\n\n<span class=\"n\">patch_dynamodb_connection</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"model-definition\">\n<h2>Model Definition</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bynamodb.attributes</span> <span class=\"kn\">import</span> <span class=\"n\">StringAttribute</span><span class=\"p\">,</span> <span class=\"n\">StringSetAttribute</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bynamodb.indexes</span> <span class=\"kn\">import</span> <span class=\"n\">GlobalAllIndex</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bynamodb.model</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">published_at</span> <span class=\"o\">=</span> <span class=\"n\">StringAttribute</span><span class=\"p\">(</span><span class=\"n\">hash_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">StringAttribute</span><span class=\"p\">(</span><span class=\"n\">range_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">StringAttribute</span><span class=\"p\">()</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">StringAttribute</span><span class=\"p\">()</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">StringAttribute</span><span class=\"p\">()</span>\n    <span class=\"n\">write_time</span> <span class=\"o\">=</span> <span class=\"n\">StringAttribute</span><span class=\"p\">(</span>\n        <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()))</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">StringSetAttribute</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">())</span>\n    <span class=\"n\">thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">StringAttribute</span><span class=\"p\">(</span><span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">AuthorIndex</span><span class=\"p\">(</span><span class=\"n\">GlobalAllIndex</span><span class=\"p\">):</span>\n        <span class=\"n\">read_throughput</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n        <span class=\"n\">write_throughput</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n        <span class=\"n\">hash_key</span> <span class=\"o\">=</span> <span class=\"s1\">'author'</span>\n        <span class=\"n\">range_key</span> <span class=\"o\">=</span> <span class=\"s1\">'published_at'</span>\n</pre>\n</div>\n<div id=\"put-item-get-item\">\n<h2>Put Item &amp; Get Item</h2>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">put_item</span><span class=\"p\">(</span>\n    <span class=\"n\">published_at</span><span class=\"o\">=</span><span class=\"s1\">'2014-12-09'</span><span class=\"p\">,</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">,</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'This is the title'</span><span class=\"p\">,</span>\n    <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"s1\">'This is the content'</span><span class=\"p\">,</span>\n    <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"s1\">'Bochul Choi'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">article</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">get_item</span><span class=\"p\">(</span><span class=\"n\">hash_key</span><span class=\"o\">=</span><span class=\"s1\">'2014-12-09'</span><span class=\"p\">,</span> <span class=\"n\">range_key</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-item-from-raw-data\">\n<h2>Get Item from Raw Data</h2>\n<p>You can get items from raw data retrieved from <cite>boto</cite>\u2019s low level API</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">boto.dynamodb2.layer1</span> <span class=\"kn\">import</span> <span class=\"n\">DynamoDBConnection</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">DynamoDBConnection</span><span class=\"p\">()</span>\n<span class=\"n\">raw_data</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_item</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'published_at'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'S'</span><span class=\"p\">:</span> <span class=\"s1\">'2014-12-09'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'S'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"n\">article</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">from_raw_data</span><span class=\"p\">(</span><span class=\"n\">raw_data</span><span class=\"p\">[</span><span class=\"s1\">'Item'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"simple-scan-query\">\n<h2>Simple Scan &amp; Query</h2>\n<pre><span class=\"c1\"># Scan all articles that the title starts with \"Title\"</span>\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">title__startswith</span><span class=\"o\">=</span><span class=\"s1\">'Title'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Get the total count of matching items</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">articles</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"c1\"># Get the iterator of matching items</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Query articles that author is \"Bochul Choi\"</span>\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">author__eq</span><span class=\"o\">=</span><span class=\"s1\">'Bochul Choi'</span><span class=\"p\">,</span> <span class=\"n\">index_name</span><span class=\"o\">=</span><span class=\"s1\">'AuthorIndex'</span><span class=\"p\">)</span>\n<span class=\"c1\"># The query result also provide the count method and iterator</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">articles</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"complex-lookups-in-scan-query\">\n<h2>Complex lookups in Scan &amp; Query</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bynamodb.filterexps</span> <span class=\"kn\">import</span> <span class=\"n\">Contains</span><span class=\"p\">,</span> <span class=\"n\">GT</span>\n\n<span class=\"n\">keyword</span> <span class=\"o\">=</span> <span class=\"s1\">'bynamodb'</span>\n<span class=\"n\">filter_exp</span> <span class=\"o\">=</span> <span class=\"n\">GT</span><span class=\"p\">(</span><span class=\"s1\">'published_at'</span><span class=\"p\">,</span> <span class=\"s1\">'2014-12-01'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span>\n    <span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s1\">'content'</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()))</span>\n\n<span class=\"c1\"># Scan all articles that match the filter expression</span>\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">filter_exp</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Query articles that match the filter expression and the author condition</span>\n<span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"s1\">'Bochul Choi'</span>\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">Atricle</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">author__eq</span><span class=\"o\">=</span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"n\">filter_builder</span><span class=\"o\">=</span><span class=\"n\">filter_exp</span><span class=\"p\">,</span>\n                         <span class=\"n\">index_name</span><span class=\"o\">=</span><span class=\"s1\">'AuthorIndex'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"batch-writing-batch-reading\">\n<h2>Batch Writing &amp; Batch Reading</h2>\n<pre><span class=\"k\">with</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">batch_write</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">batch</span><span class=\"p\">:</span>\n    <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">put_item</span><span class=\"p\">({</span>\n        <span class=\"s1\">'published_at'</span><span class=\"p\">:</span> <span class=\"s1\">'2015-02-23'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Article 1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'content'</span><span class=\"p\">:</span> <span class=\"s1\">'This is the content'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'Bochul Choi'</span>\n    <span class=\"p\">})</span>\n    <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">put_item</span><span class=\"p\">({</span>\n        <span class=\"s1\">'published_at'</span><span class=\"p\">:</span> <span class=\"s1\">'2015-02-23'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Article 2'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'content'</span><span class=\"p\">:</span> <span class=\"s1\">'This is the content'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'Bochul Choi'</span>\n    <span class=\"p\">})</span>\n\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">batch_get</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"s1\">'2015-02-23'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'2015-02-23'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<dl>\n<dt>0.1.7</dt>\n<dd><ul>\n<li>Skip decoding non-existent attribute.</li>\n</ul>\n</dd>\n<dt>0.1.6</dt>\n<dd><ul>\n<li>Fix <cite>ResultSet</cite> to stop fetching items regardless of the limit param.</li>\n</ul>\n</dd>\n<dt>0.1.5</dt>\n<dd><ul>\n<li>Add support <cite>scan_index_forward</cite> and <cite>limit</cite> pamareter for Query API.</li>\n</ul>\n</dd>\n<dt>0.1.4</dt>\n<dd><ul>\n<li>Set <cite>ExclusiveStartKey</cite> as the untransformed <cite>LastEvaluatedKey</cite>.</li>\n</ul>\n</dd>\n<dt>0.1.3</dt>\n<dd><ul>\n<li><cite>Model.delete</cite> needs to use encoded key.</li>\n</ul>\n</dd>\n<dt>0.1.2</dt>\n<dd><ul>\n<li><cite>Model.put_item</cite> returns created item.</li>\n</ul>\n</dd>\n<dt>0.1.1</dt>\n<dd><ul>\n<li><cite>NumberAttribute</cite> is only saved as number in db.</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 1637385, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "95cbb368c44aa8532c4c7bcdd920ed72", "sha256": "119b9fd4aa977322c6c96a0e179cb294a73f2371fd7453cc94004d4053d36502"}, "downloads": -1, "filename": "bynamodb-0.1.0.tar.gz", "has_sig": false, "md5_digest": "95cbb368c44aa8532c4c7bcdd920ed72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8196, "upload_time": "2015-02-23T04:48:16", "upload_time_iso_8601": "2015-02-23T04:48:16.563072Z", "url": "https://files.pythonhosted.org/packages/72/48/88119f59e6fadeb2bf5d1921c7e16933edce16e63896a05bf74c6f41077e/bynamodb-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "68f68f57bf4e8e97486e9e8beb136ad8", "sha256": "bac4b394c1926463e5d9d1ea8515f10b7fc20fc8c0982106361c9797c0f3a5ed"}, "downloads": -1, "filename": "bynamodb-0.1.1.tar.gz", "has_sig": false, "md5_digest": "68f68f57bf4e8e97486e9e8beb136ad8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8160, "upload_time": "2015-02-25T08:24:06", "upload_time_iso_8601": "2015-02-25T08:24:06.411959Z", "url": "https://files.pythonhosted.org/packages/7d/e8/2e81cea0aa4f2d782274421b7ab0a6dd342dfa51f7e2af221194759f1974/bynamodb-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7ab5b92cb5ef80289778a16fea32fc02", "sha256": "d402b91ac3a8a9fd5dc5424ad0dfb5277c791ef752e87b47bd6c653bb05cfac5"}, "downloads": -1, "filename": "bynamodb-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7ab5b92cb5ef80289778a16fea32fc02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8253, "upload_time": "2015-02-26T06:56:13", "upload_time_iso_8601": "2015-02-26T06:56:13.291926Z", "url": "https://files.pythonhosted.org/packages/a4/6f/0915b2de4f3732d8e24789ecd8a325185cd7935db55115e5f0c37a610a16/bynamodb-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "dcf685e211753ec48c49dabe8d2a6fcc", "sha256": "8651a64fd4f660c4eb6a57e64608016fcc1dd555f5f5524387565b3fe6aa9471"}, "downloads": -1, "filename": "bynamodb-0.1.3.tar.gz", "has_sig": false, "md5_digest": "dcf685e211753ec48c49dabe8d2a6fcc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8224, "upload_time": "2015-03-18T00:33:35", "upload_time_iso_8601": "2015-03-18T00:33:35.302532Z", "url": "https://files.pythonhosted.org/packages/7d/71/9a46e6c29fd0f7597101af89365d1eba1c88e09515143ba5b78a14670808/bynamodb-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d06c26f12f21043f425ab5d733f3f42e", "sha256": "869d279254438c272ae8a525957af445e893923f55bcff611484bf316538b7df"}, "downloads": -1, "filename": "bynamodb-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d06c26f12f21043f425ab5d733f3f42e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8194, "upload_time": "2015-03-24T12:01:47", "upload_time_iso_8601": "2015-03-24T12:01:47.076627Z", "url": "https://files.pythonhosted.org/packages/06/b4/29d6045c8a6f9a98760dce1601750ab928a00b86a329d128551eb5402884/bynamodb-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "aa4b4f0ae71fdb817865d64b3c23eb9f", "sha256": "17971fd9bb7629c21f6233d6be0b1625f09ed66f069d0033592f77704ddc28a5"}, "downloads": -1, "filename": "bynamodb-0.1.5.tar.gz", "has_sig": false, "md5_digest": "aa4b4f0ae71fdb817865d64b3c23eb9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8275, "upload_time": "2015-04-14T01:02:28", "upload_time_iso_8601": "2015-04-14T01:02:28.555206Z", "url": "https://files.pythonhosted.org/packages/c6/ce/a64d18d18fab539d96f55b9585947888e18295ab675b3078be8071dcb8e5/bynamodb-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "2090d8912f075a018afebcb05740b8d6", "sha256": "90d93eeceeb9f04a3ae36814497e4c5f317f268167ef70876ac052f4495113a3"}, "downloads": -1, "filename": "bynamodb-0.1.6.tar.gz", "has_sig": false, "md5_digest": "2090d8912f075a018afebcb05740b8d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8420, "upload_time": "2015-04-14T10:22:50", "upload_time_iso_8601": "2015-04-14T10:22:50.892372Z", "url": "https://files.pythonhosted.org/packages/b1/ea/569a760e0c2bacf837b4d639f204c94c6ab3b3236407275a4f39afeeecc7/bynamodb-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "8e562247afe8cb12ee1d9dd41ec2da37", "sha256": "da5d5b355f568ec1d47206237e3ca17b3045282dadf97751386558383fa432af"}, "downloads": -1, "filename": "bynamodb-0.1.7.tar.gz", "has_sig": false, "md5_digest": "8e562247afe8cb12ee1d9dd41ec2da37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8460, "upload_time": "2015-07-17T05:59:34", "upload_time_iso_8601": "2015-07-17T05:59:34.513902Z", "url": "https://files.pythonhosted.org/packages/d7/1f/461f4c9b6e67980820a136fef018cc7af950bb75b12763aa3e8ee2849e09/bynamodb-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e562247afe8cb12ee1d9dd41ec2da37", "sha256": "da5d5b355f568ec1d47206237e3ca17b3045282dadf97751386558383fa432af"}, "downloads": -1, "filename": "bynamodb-0.1.7.tar.gz", "has_sig": false, "md5_digest": "8e562247afe8cb12ee1d9dd41ec2da37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8460, "upload_time": "2015-07-17T05:59:34", "upload_time_iso_8601": "2015-07-17T05:59:34.513902Z", "url": "https://files.pythonhosted.org/packages/d7/1f/461f4c9b6e67980820a136fef018cc7af950bb75b12763aa3e8ee2849e09/bynamodb-0.1.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:52 2020"}