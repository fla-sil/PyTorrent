{"info": {"author": "Thomas Touhey", "author_email": "thomas@touhey.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Topic :: Internet :: Finger", "Topic :: Utilities"], "description": "finger (RFC 1288) server-side daemon\n====================================\n\nfinger is both a protocol and a utility to get the information and status\nfrom a user on a distant machine. It was standardized in `RFC 742`_\nin 1977, then in `RFC 1288`_ in 1991, and has been abandoned since.\n\nWhile describing the protocol in `a blog post of mine`_, I wanted\nto implement this protocol for fun, but didn't want to present the\nreal information about the users on my server, so I made this to present some\nfictional information in order to be able to tell a story through finger.\n\nThe finger server should be available through the TCP port 79, which can only\nbe opened by ``root`` on UNIX-like machines. Instead of using this port\ndirectly, which forces the use of the ``root`` user to manage the service,\nyou can redirect the incoming transmissions from an interface on TCP port 79\nto another TCP port which you can open as a user (port number over 1024)\nby appending a rule in ``iptables``:\n\n.. code-block:: sh\n\n\tiptables -t nat -A OUTPUT -p tcp [-s <source ip>] [-d <destination ip>] \\\n\t\t--dport 79 -j DNAT --to <ip:port>\n\nWhere ``<source ip>`` is the source IP address or network that are redirected,\n``<destination ip>`` is the destination IP address or network for which the\nrequests are redirected and ``<ip:port>`` is the IP and port\nyou want to forward the packets to, e.g. ``127.0.0.1:4000``.\n\nThe basic configuration of the server is stored in the ``actions.ini`` file,\nsee the comments for how to make it do what you want it to do. Other\nconfiguration files are described in their specific sections.\n\nTo run the application, use the following command:\n\n.. code-block:: sh\n\n\tpython3 -m fingerd <command line options>\n\nActions timeline\n----------------\n\nThe actions are stored as a TOML document. Each action is stored under its\ntime offset, using an array section, where the time offset is represented\nthis way:\n\n\t-?(<weeks>w)?(<days>[jd])?(<hours>h)?(<minutes>m)?(<seconds>s)?\n\nWhere negative times, starting with a dash (``-``), are the initial situation,\nwhat is supposed to have happened before the beginning.\n\nFor example, ``-1w5d2h`` means \u201c1 week, 5 days and 2 hours before the\norigin\u201d and ``2j`` means \u201c2 days after the origin\u201d. So if we want to make\nan action that takes place 5 seconds after the origin, the first line of the\naction will be the following one:\n\n.. code-block::\n\n\t[[5s]]\n\nAll actions have a type represented by the ``type`` property, and other\nproperties depending on the type. Types and related properties are\ndescribed in the sections below.\n\nFlow-related actions\n~~~~~~~~~~~~~~~~~~~~\n\nThe following are related to the action flow:\n\n``loop``\n\tThe actions restart from the beginning.\n\n``interrupt``\n\tThe server freezes on the latest situation.\n\n``stop``\n\tThe server stops on the event.\n\nAll the actions after the time of any of these will be ignored.\n\nUser-related actions\n~~~~~~~~~~~~~~~~~~~~\n\nUser-related actions' types can be of the following:\n\n``create``\n\tA user has been created.\n\n``update``\n\tA user's information has been updated.\n\n``delete``\n\tA user has been deleted.\n\n``login``\n\tA user has logged in and is active.\n\n``cd``\n\tA user has changed their working directory.\n\n``idle``\n\tA user is now idle (not typing on the keyboard anymore.\n\n``active``\n\tA user is now active (typing every now and then).\n\n``logout``\n\tA user has logged out.\n\nAs all of these actions are about users, they all take an additional\n``login`` argument which is the affected user's name, e.g. ``rinehart``.\n\nThe ``create`` and ``update`` events takes some more arguments\n(\u201cman.\u201d means mandatory):\n\n``name``\n\tThe user full name, e.g. \u201cMark J. Rinehart\u201d.\n\n``shell``\n\tThe selected login shell.\n\n``home``\n\tThe home directory.\n\nThe ``login`` operation takes the information about the originating shell:\n\n``office``\n\tThe office name, e.g. \u201cMark's office\u201d.\n\nThe ``cd`` operation takes the information about the directory to which the\nshell changes:\n\n``dir``\n\tThe absolute path of the new directory, e.g. \u201c/var/www\u201d.\n\nWhat is left to do\n------------------\n\n- separate users and sessions, so that there can be several sessions\n  displayed as in these examples:\n\n  .. code-block::\n\n    Login    Name                    Tty      Idle  Login Time   Office     Office Phone\n    cake     Thomas Touhey           pts/0          Sep 12 22:51 (XXXX::XXXX)\n    cake     Thomas Touhey           pts/1          Sep 12 22:51 (XXXX::XXXX)\n\n  .. code-block::\n\n    Login: cake           \t\t\t        Name: Thomas Touhey\n    Directory: /home/cake               \tShell: /bin/zsh\n    On since Wed Sep 12 22:51 (CEST) on pts/0 from XXXX::XXXX\n        8 seconds idle\n    On since Wed Sep 12 22:51 (CEST) on pts/1 from XXXX::XXXX\n        4 seconds idle\n    No Plan.\n\n.. _RFC 742: https://tools.ietf.org/html/rfc742\n.. _RFC 1288: https://tools.ietf.org/html/rfc1288\n.. _a blog post of mine: #actually-it-is-still-a-work-in-progress", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://forge.touhey.fr/fingerd.git/", "keywords": "finger,fingerd,rfc742,rfc1288,79,tcp/79", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fingerd", "package_url": "https://pypi.org/project/fingerd/", "platform": "", "project_url": "https://pypi.org/project/fingerd/", "project_urls": {"Homepage": "https://forge.touhey.fr/fingerd.git/"}, "release_url": "https://pypi.org/project/fingerd/0.1/", "requires_dist": null, "requires_python": "", "summary": "finger (RFC 1288) server-side daemon.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>finger is both a protocol and a utility to get the information and status\nfrom a user on a distant machine. It was standardized in <a href=\"https://tools.ietf.org/html/rfc742\" rel=\"nofollow\">RFC 742</a>\nin 1977, then in <a href=\"https://tools.ietf.org/html/rfc1288\" rel=\"nofollow\">RFC 1288</a> in 1991, and has been abandoned since.</p>\n<p>While describing the protocol in <a href=\"#actually-it-is-still-a-work-in-progress\" rel=\"nofollow\">a blog post of mine</a>, I wanted\nto implement this protocol for fun, but didn\u2019t want to present the\nreal information about the users on my server, so I made this to present some\nfictional information in order to be able to tell a story through finger.</p>\n<p>The finger server should be available through the TCP port 79, which can only\nbe opened by <tt>root</tt> on UNIX-like machines. Instead of using this port\ndirectly, which forces the use of the <tt>root</tt> user to manage the service,\nyou can redirect the incoming transmissions from an interface on TCP port 79\nto another TCP port which you can open as a user (port number over 1024)\nby appending a rule in <tt>iptables</tt>:</p>\n<pre>iptables -t nat -A OUTPUT -p tcp <span class=\"o\">[</span>-s &lt;<span class=\"nb\">source</span> ip&gt;<span class=\"o\">]</span> <span class=\"o\">[</span>-d &lt;destination ip&gt;<span class=\"o\">]</span> <span class=\"se\">\\\n</span>        --dport <span class=\"m\">79</span> -j DNAT --to &lt;ip:port&gt;\n</pre>\n<p>Where <tt>&lt;source ip&gt;</tt> is the source IP address or network that are redirected,\n<tt>&lt;destination ip&gt;</tt> is the destination IP address or network for which the\nrequests are redirected and <tt>&lt;ip:port&gt;</tt> is the IP and port\nyou want to forward the packets to, e.g. <tt>127.0.0.1:4000</tt>.</p>\n<p>The basic configuration of the server is stored in the <tt>actions.ini</tt> file,\nsee the comments for how to make it do what you want it to do. Other\nconfiguration files are described in their specific sections.</p>\n<p>To run the application, use the following command:</p>\n<pre>python3 -m fingerd &lt;<span class=\"nb\">command</span> line options&gt;\n</pre>\n<div id=\"actions-timeline\">\n<h2>Actions timeline</h2>\n<p>The actions are stored as a TOML document. Each action is stored under its\ntime offset, using an array section, where the time offset is represented\nthis way:</p>\n<blockquote>\n-?(&lt;weeks&gt;w)?(&lt;days&gt;[jd])?(&lt;hours&gt;h)?(&lt;minutes&gt;m)?(&lt;seconds&gt;s)?</blockquote>\n<p>Where negative times, starting with a dash (<tt>-</tt>), are the initial situation,\nwhat is supposed to have happened before the beginning.</p>\n<p>For example, <tt><span class=\"pre\">-1w5d2h</span></tt> means \u201c1 week, 5 days and 2 hours before the\norigin\u201d and <tt>2j</tt> means \u201c2 days after the origin\u201d. So if we want to make\nan action that takes place 5 seconds after the origin, the first line of the\naction will be the following one:</p>\n<pre>[[5s]]\n</pre>\n<p>All actions have a type represented by the <tt>type</tt> property, and other\nproperties depending on the type. Types and related properties are\ndescribed in the sections below.</p>\n<div id=\"flow-related-actions\">\n<h3>Flow-related actions</h3>\n<p>The following are related to the action flow:</p>\n<dl>\n<dt><tt>loop</tt></dt>\n<dd>The actions restart from the beginning.</dd>\n<dt><tt>interrupt</tt></dt>\n<dd>The server freezes on the latest situation.</dd>\n<dt><tt>stop</tt></dt>\n<dd>The server stops on the event.</dd>\n</dl>\n<p>All the actions after the time of any of these will be ignored.</p>\n</div>\n<div id=\"user-related-actions\">\n<h3>User-related actions</h3>\n<p>User-related actions\u2019 types can be of the following:</p>\n<dl>\n<dt><tt>create</tt></dt>\n<dd>A user has been created.</dd>\n<dt><tt>update</tt></dt>\n<dd>A user\u2019s information has been updated.</dd>\n<dt><tt>delete</tt></dt>\n<dd>A user has been deleted.</dd>\n<dt><tt>login</tt></dt>\n<dd>A user has logged in and is active.</dd>\n<dt><tt>cd</tt></dt>\n<dd>A user has changed their working directory.</dd>\n<dt><tt>idle</tt></dt>\n<dd>A user is now idle (not typing on the keyboard anymore.</dd>\n<dt><tt>active</tt></dt>\n<dd>A user is now active (typing every now and then).</dd>\n<dt><tt>logout</tt></dt>\n<dd>A user has logged out.</dd>\n</dl>\n<p>As all of these actions are about users, they all take an additional\n<tt>login</tt> argument which is the affected user\u2019s name, e.g. <tt>rinehart</tt>.</p>\n<p>The <tt>create</tt> and <tt>update</tt> events takes some more arguments\n(\u201cman.\u201d means mandatory):</p>\n<dl>\n<dt><tt>name</tt></dt>\n<dd>The user full name, e.g. \u201cMark J. Rinehart\u201d.</dd>\n<dt><tt>shell</tt></dt>\n<dd>The selected login shell.</dd>\n<dt><tt>home</tt></dt>\n<dd>The home directory.</dd>\n</dl>\n<p>The <tt>login</tt> operation takes the information about the originating shell:</p>\n<dl>\n<dt><tt>office</tt></dt>\n<dd>The office name, e.g. \u201cMark\u2019s office\u201d.</dd>\n</dl>\n<p>The <tt>cd</tt> operation takes the information about the directory to which the\nshell changes:</p>\n<dl>\n<dt><tt>dir</tt></dt>\n<dd>The absolute path of the new directory, e.g. \u201c/var/www\u201d.</dd>\n</dl>\n</div>\n</div>\n<div id=\"what-is-left-to-do\">\n<h2>What is left to do</h2>\n<ul>\n<li><p>separate users and sessions, so that there can be several sessions\ndisplayed as in these examples:</p>\n<pre>Login    Name                    Tty      Idle  Login Time   Office     Office Phone\ncake     Thomas Touhey           pts/0          Sep 12 22:51 (XXXX::XXXX)\ncake     Thomas Touhey           pts/1          Sep 12 22:51 (XXXX::XXXX)\n</pre>\n<pre>Login: cake                                         Name: Thomas Touhey\nDirectory: /home/cake                       Shell: /bin/zsh\nOn since Wed Sep 12 22:51 (CEST) on pts/0 from XXXX::XXXX\n    8 seconds idle\nOn since Wed Sep 12 22:51 (CEST) on pts/1 from XXXX::XXXX\n    4 seconds idle\nNo Plan.\n</pre>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4266476, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d0b0bab8667479537d8635689ca64b88", "sha256": "980b242ce53613c6fb56db62885b16f3cc66958db50e81f7a87ba8ee7781bb9a"}, "downloads": -1, "filename": "fingerd-0.1.tar.gz", "has_sig": false, "md5_digest": "d0b0bab8667479537d8635689ca64b88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16103, "upload_time": "2018-09-12T20:58:34", "upload_time_iso_8601": "2018-09-12T20:58:34.852668Z", "url": "https://files.pythonhosted.org/packages/96/64/27944a3496631175a7c5b7a08daede823ed415daebe1101877a16e166396/fingerd-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d0b0bab8667479537d8635689ca64b88", "sha256": "980b242ce53613c6fb56db62885b16f3cc66958db50e81f7a87ba8ee7781bb9a"}, "downloads": -1, "filename": "fingerd-0.1.tar.gz", "has_sig": false, "md5_digest": "d0b0bab8667479537d8635689ca64b88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16103, "upload_time": "2018-09-12T20:58:34", "upload_time_iso_8601": "2018-09-12T20:58:34.852668Z", "url": "https://files.pythonhosted.org/packages/96/64/27944a3496631175a7c5b7a08daede823ed415daebe1101877a16e166396/fingerd-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:22 2020"}