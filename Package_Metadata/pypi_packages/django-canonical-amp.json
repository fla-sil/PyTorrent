{"info": {"author": "Matthias Rohmer", "author_email": "rohmer.matthias@anyvent.org", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "[![PyPI version](https://badge.fury.io/py/django-canonical-amp.svg)](https://badge.fury.io/py/django-canonical-amp)\n\n# django-canonical-amp\n\nA small set of tools meant to make building canonical [AMP](https://amp.dev) pages with [Django](https://www.djangoproject.com/) a little easier.\n\n## Installation\n\nTo enable the functionality of this package you need to add it to various keys of your project settings (settings.py per default) just as with other Django apps.\n\n#### INSTALLED_APPS\ndjango-canonical-amp needs to be added to your installed apps.\n\n```python\nINSTALLED_APPS = [\n  # ...\n  'amp',\n]\n```\n\n#### TEMPLATES\nAdditionally you need to update your template settings to use the django-canonical-amp backend which is just a wrapper around Django's default backend.\n\n\n```python\nTEMPLATES = [\n  {\n    'BACKEND': 'amp.template.backends.amp.AmpTemplates',\n    # ...\n  },\n]\n```\n\n#### MIDDLEWARE\nThis step is optional but if you want to serve [server-side-rendered AMP](https://github.com/ampproject/amphtml/blob/master/spec/amp-cache-modifications.md) straight from your Django app you can add the transformer middleware to your stack.\n\n**Important:** this is experimental. The transformations happen by using a shared library built from the Go implementation of the [amppackager](https://github.com/ampproject/amppackager/tree/releases/transformer). This package ships with compiled versions for *linux/amd64* and *darwin/amd64* operating systems.\n\nIf you want to use this middleware you also need to make sure your production system is able to perform requests to https://cdn.ampproject.org/rtv/metadata for the transformer to be able to fetch the current runtime version.\n\n```python\nMIDDLEWARE = [\n  # ...\n  'amp.middleware.AmpOptimizerMiddleware',\n]\n```\n\nThis middleware needs to execute before Django's `django.middleware.gzip.GZipMiddleware` for the transformer to be able to alter the response.\n\nIf you make use of this middleware you can additionally set `AMP_REWRITE_URLS` in your settings to `False`. By doing so you instruct the transformer to leave your URLs alone and don't rewrite them to a AMP cache URL - this comes with pros and cons: delivery times might be better from the cache though there's no guarantee your content (and assets) are already available from the cache. This settings defaults to `not DEBUG` to don't rewrite URLs for all non-production environments.\n\nAMP components relying on API endpoints served by your application need them to be served according to [AMP's CORS specification](https://amp.dev/documentation/guides-and-tutorials/learn/amp-caches-and-cors/amp-cors-requests). django-canonical-amp ships with another middleware that adds the required headers. For it to work make sure your server is able to access https://cdn.ampproject.org/caches.json. Then add the middleware to your stack:\n\n```python\nMIDDLEWARE = [\n  # ...\n  'amp.middleware.AmpCorsMiddleware',\n]\n```\n\n## Usage\nThe basic functionality of the package are two template tags that are available after installation. They make it able to dynamically define used [AMP components](https://amp.dev/documentation/components/). For them to and up in the `<head>` of your HTML make sure you add the `{% amp.components %}` tag like so:\n\n```html\n{% load amp %}\n\n<!DOCTYPE html>\n<html \u26a1 lang=\"de\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1\">\n    <meta name=\"description\" content=\"{{ description }}\">\n\n    <link rel=\"preload\" as=\"script\" href=\"https://cdn.ampproject.org/v0.js\">\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n    {% amp.components %}\n    <!-- This will expand to a list of <script> tags:\n    <script async custom-element=\"amp-...\" src=\"https://cdn.ampproject.org/v0/amp-...-0.1.js\"></script>\n    -->\n\n    <style amp-custom>\n    {% block style %}\n    {% endblock %}\n    </style>\n```\n\nSomewhere else in your templates you can then define dependencies by calling `{% amp.require_component \"<component>\" \"<version>\" %}` like in the following example:\n\n```html\n{% if youtube_id %}\n{% amp.require_component \"amp-youtube\" %}\n<amp-youtube\n    data-videoid=\"{{ youtube_id }}\"\n    layout=\"responsive\"\n    width=\"480\" height=\"270\"></amp-youtube>\n{% endif %}\n```\n\n If `youtube_id` evaluates to `False` in the above example the `amp-youtube` extension would not be injected to your page and it would stay AMP valid.\n\nThe version can be omitted. It will then default to 0.1.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matthiasrohmer/django-amp", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "django-canonical-amp", "package_url": "https://pypi.org/project/django-canonical-amp/", "platform": "", "project_url": "https://pypi.org/project/django-canonical-amp/", "project_urls": {"Homepage": "https://github.com/matthiasrohmer/django-amp"}, "release_url": "https://pypi.org/project/django-canonical-amp/0.1b1/", "requires_dist": null, "requires_python": "", "summary": "Template tags and middlewares to build canonical AMP pages with Django easily.", "version": "0.1b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/django-canonical-amp\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89e6d9a9a30296655de748a8b21158995ef78918/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d63616e6f6e6963616c2d616d702e737667\"></a></p>\n<h1>django-canonical-amp</h1>\n<p>A small set of tools meant to make building canonical <a href=\"https://amp.dev\" rel=\"nofollow\">AMP</a> pages with <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> a little easier.</p>\n<h2>Installation</h2>\n<p>To enable the functionality of this package you need to add it to various keys of your project settings (settings.py per default) just as with other Django apps.</p>\n<h4>INSTALLED_APPS</h4>\n<p>django-canonical-amp needs to be added to your installed apps.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"c1\"># ...</span>\n  <span class=\"s1\">'amp'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<h4>TEMPLATES</h4>\n<p>Additionally you need to update your template settings to use the django-canonical-amp backend which is just a wrapper around Django's default backend.</p>\n<pre><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s1\">'amp.template.backends.amp.AmpTemplates'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre>\n<h4>MIDDLEWARE</h4>\n<p>This step is optional but if you want to serve <a href=\"https://github.com/ampproject/amphtml/blob/master/spec/amp-cache-modifications.md\" rel=\"nofollow\">server-side-rendered AMP</a> straight from your Django app you can add the transformer middleware to your stack.</p>\n<p><strong>Important:</strong> this is experimental. The transformations happen by using a shared library built from the Go implementation of the <a href=\"https://github.com/ampproject/amppackager/tree/releases/transformer\" rel=\"nofollow\">amppackager</a>. This package ships with compiled versions for <em>linux/amd64</em> and <em>darwin/amd64</em> operating systems.</p>\n<p>If you want to use this middleware you also need to make sure your production system is able to perform requests to <a href=\"https://cdn.ampproject.org/rtv/metadata\" rel=\"nofollow\">https://cdn.ampproject.org/rtv/metadata</a> for the transformer to be able to fetch the current runtime version.</p>\n<pre><span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"c1\"># ...</span>\n  <span class=\"s1\">'amp.middleware.AmpOptimizerMiddleware'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>This middleware needs to execute before Django's <code>django.middleware.gzip.GZipMiddleware</code> for the transformer to be able to alter the response.</p>\n<p>If you make use of this middleware you can additionally set <code>AMP_REWRITE_URLS</code> in your settings to <code>False</code>. By doing so you instruct the transformer to leave your URLs alone and don't rewrite them to a AMP cache URL - this comes with pros and cons: delivery times might be better from the cache though there's no guarantee your content (and assets) are already available from the cache. This settings defaults to <code>not DEBUG</code> to don't rewrite URLs for all non-production environments.</p>\n<p>AMP components relying on API endpoints served by your application need them to be served according to <a href=\"https://amp.dev/documentation/guides-and-tutorials/learn/amp-caches-and-cors/amp-cors-requests\" rel=\"nofollow\">AMP's CORS specification</a>. django-canonical-amp ships with another middleware that adds the required headers. For it to work make sure your server is able to access <a href=\"https://cdn.ampproject.org/caches.json\" rel=\"nofollow\">https://cdn.ampproject.org/caches.json</a>. Then add the middleware to your stack:</p>\n<pre><span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"c1\"># ...</span>\n  <span class=\"s1\">'amp.middleware.AmpCorsMiddleware'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Usage</h2>\n<p>The basic functionality of the package are two template tags that are available after installation. They make it able to dynamically define used <a href=\"https://amp.dev/documentation/components/\" rel=\"nofollow\">AMP components</a>. For them to and up in the <code>&lt;head&gt;</code> of your HTML make sure you add the <code>{% amp.components %}</code> tag like so:</p>\n<pre>{% load amp %}\n\n<span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"err\">\u26a1</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"de\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">\"width=device-width,minimum-scale=1\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"description\"</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">\"{{ description }}\"</span><span class=\"p\">&gt;</span>\n\n    <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"preload\"</span> <span class=\"na\">as</span><span class=\"o\">=</span><span class=\"s\">\"script\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://cdn.ampproject.org/v0.js\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">async</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://cdn.ampproject.org/v0.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n    {% amp.components %}\n    <span class=\"c\">&lt;!-- This will expand to a list of &lt;script&gt; tags:</span>\n<span class=\"c\">    &lt;script async custom-element=\"amp-...\" src=\"https://cdn.ampproject.org/v0/amp-...-0.1.js\"&gt;&lt;/script&gt;</span>\n<span class=\"c\">    --&gt;</span>\n\n    <span class=\"p\">&lt;</span><span class=\"nt\">style</span> <span class=\"na\">amp-custom</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">{</span><span class=\"err\">%</span> <span class=\"err\">block</span> <span class=\"err\">style</span> <span class=\"err\">%</span><span class=\"p\">}</span>\n    <span class=\"p\">{</span><span class=\"err\">%</span> <span class=\"err\">endblock</span> <span class=\"err\">%</span><span class=\"p\">}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Somewhere else in your templates you can then define dependencies by calling <code>{% amp.require_component \"&lt;component&gt;\" \"&lt;version&gt;\" %}</code> like in the following example:</p>\n<pre>{% if youtube_id %}\n{% amp.require_component \"amp-youtube\" %}\n<span class=\"p\">&lt;</span><span class=\"nt\">amp-youtube</span>\n    <span class=\"na\">data-videoid</span><span class=\"o\">=</span><span class=\"s\">\"{{ youtube_id }}\"</span>\n    <span class=\"na\">layout</span><span class=\"o\">=</span><span class=\"s\">\"responsive\"</span>\n    <span class=\"na\">width</span><span class=\"o\">=</span><span class=\"s\">\"480\"</span> <span class=\"na\">height</span><span class=\"o\">=</span><span class=\"s\">\"270\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">amp-youtube</span><span class=\"p\">&gt;</span>\n{% endif %}\n</pre>\n<p>If <code>youtube_id</code> evaluates to <code>False</code> in the above example the <code>amp-youtube</code> extension would not be injected to your page and it would stay AMP valid.</p>\n<p>The version can be omitted. It will then default to 0.1.</p>\n\n          </div>"}, "last_serial": 5369078, "releases": {"0.1b0": [{"comment_text": "", "digests": {"md5": "9bc7bf2a10674cc12349225df69e1895", "sha256": "3c52d66092030e5cad76f31dc5c91c8f201497b87778a31e8df9804ff135845b"}, "downloads": -1, "filename": "django-canonical-amp-0.1b0.tar.gz", "has_sig": false, "md5_digest": "9bc7bf2a10674cc12349225df69e1895", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4702823, "upload_time": "2019-06-04T21:37:24", "upload_time_iso_8601": "2019-06-04T21:37:24.129662Z", "url": "https://files.pythonhosted.org/packages/58/f0/aaabe1d31afb523ef599d666055646515c8c70aca520295cee81a1083f3c/django-canonical-amp-0.1b0.tar.gz", "yanked": false}], "0.1b1": [{"comment_text": "", "digests": {"md5": "ee99cb455aa691fce254d5073234b3c5", "sha256": "947c546477b9915c889432db1b95d3f1f8f494d35fb1b075c7fd442de9f3aac2"}, "downloads": -1, "filename": "django-canonical-amp-0.1b1.tar.gz", "has_sig": false, "md5_digest": "ee99cb455aa691fce254d5073234b3c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4702861, "upload_time": "2019-06-06T21:23:34", "upload_time_iso_8601": "2019-06-06T21:23:34.215897Z", "url": "https://files.pythonhosted.org/packages/ef/11/40338167c680f218cbc03b3dbc239152c2da9994e443c9035d8e4cb5f152/django-canonical-amp-0.1b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee99cb455aa691fce254d5073234b3c5", "sha256": "947c546477b9915c889432db1b95d3f1f8f494d35fb1b075c7fd442de9f3aac2"}, "downloads": -1, "filename": "django-canonical-amp-0.1b1.tar.gz", "has_sig": false, "md5_digest": "ee99cb455aa691fce254d5073234b3c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4702861, "upload_time": "2019-06-06T21:23:34", "upload_time_iso_8601": "2019-06-06T21:23:34.215897Z", "url": "https://files.pythonhosted.org/packages/ef/11/40338167c680f218cbc03b3dbc239152c2da9994e443c9035d8e4cb5f152/django-canonical-amp-0.1b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:15 2020"}