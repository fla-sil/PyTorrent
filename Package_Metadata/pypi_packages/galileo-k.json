{"info": {"author": "Kevin Hu", "author_email": "kevin.w.hu@yale.edy", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# galileo\n\nThis package contains several functions for explorative data analysis with a focus on association mining between variable pairs. The methods used here are optimized for Pandas dataframes and are inspired by the `corrcoef` function provided by `numpy`. \n\nBecause these functions rely on native matrix-level operations provided by `numpy`,  many are orders of magnitude faster than naive looping-based alternatives. This makes them useful for constructing large association networks or for feature extraction, which have important uses in areas such as biomarker discovery.\n\nThe current functions available are listed below by variable comparison type. Benchmarks are also provided with comparisons to an equivalent looping-based method.\n\nRequirements: Python 3, `numpy`,  `pandas`, `scipy`, `statsmodels`.\n\n## Functions\n\n### Continuous vs. continuous\n\n`mat_corrs(A, B, method=\"pearson\")`\n\nComputes pairwise Pearson or Spearman correlations between columns of A and B, provided that there are no missing values in either matrix.\n\n`mat_corrs_nan(A, B, method=\"pearson\")`\n\nComputes pairwise Pearson or Spearman correlations between A and the columns of B, provided that A is a series and B is a dataframe that may or may not contain some missing values.\n\n`mat_corrs_naive(A, B, method=\"pearson\") `\n\nSame functionality as `mat_corrs`, but uses a double loop for direct computation of statistics.\n\n### Continuous vs. categorical\n\n`mat_mwus(A, B, use_continuity=True)` \n\nComputes pairwise Mann-Whitney U tests between columns of A (continuous samples) and B (binary samples). Assumes that A and B both do not contain any missing values.\n\n`mat_mwus_naive(A, B, use_continuity=True) `\n\nSame functionality as `mat_mwus`, but uses a double loop for direct computation of statistics.\n\n### Categorical vs. categorical\n\n`mat_fishers(A, B)`\n\nComputes pairwise Fisher's exact tests between columns of A and B, provided that both are boolean-castable matrices and do not contain any missing values.\n\n`mat_fishers_nan(A, B)`\n\nComputes pairwise Fisher's exact tests between columns of A and B, provided that both are boolean-castable matrices and may or may not contain missing values.\n\n`mat_fishers_naive(A, B) `\n\nSame functionality as `mat_fishers`, but uses a double loop for direct computation of statistics.\n\n### Utilities\n\n`generate_test(n_samples, A_n_cols, B_n_cols, A_type=\"continuous\", B_type=\"continuous\", nans=False)`\n\nGenerates randomly-initialized matrix pairs for testing and benchmarking.\n\n## Benchmarks\n\nThese benchmarks were run with 1,000 samples per variable (i.e. setting each input matrice to have 1,000 rows). The number of variables in A was set to 100, and the number of variables in B was varied as shown below. The number of pairwise comparisons calaulated (equivalent to the product of A and B's column counts) is also indicated.\n\nBenchmark scripts can be found in `/test/benchmarks.ipynb`.\n\n### Pearson correlations\n\n| Column count of B | Total comparisons | Runtime, `mat_corrs_naive`, seconds | Runtime,  `mat_corrs`, seconds | Speedup factor |\n| ----------------- | ----------------- | ----------------------------------- | ------------------------------ | -------------- |\n| 10                | 1,000             | 3.27                                | **0.020**                      | **\u00d7163**       |\n| 100               | 10,000            | 30.55                               | **0.066**                      | **\u00d7461**       |\n| 1,000             | 100,000           | 303.30                              | **0.53**                       | **\u00d7574**       |\n\n### Spearman correlations\n\n| Column count of B | Total comparisons | Runtime, `mat_corrs_naive`, seconds | Runtime, `mat_corrs`, seconds | Speedup factor |\n| ----------------- | ----------------- | ----------------------------------- | ----------------------------- | -------------- |\n| 10                | 1,000             | 4.47                                | **0.026**                     | **\u00d7171**       |\n| 100               | 10,000            | 44.55                               | **0.081**                     | **\u00d7553**       |\n| 1,000             | 100,000           | 493.73                              | **0.70**                      | **\u00d7704**       |\n\n### Mann-Whitney U tests\n\n| Column count of B | Total comparisons | Runtime, `mat_mwus_naive`, seconds | Runtime, `mat_mwus`, seconds | Speedup factor |\n| ----------------- | ----------------- | ---------------------------------- | ---------------------------- | -------------- |\n| 10                | 1,000             | 6.94                               | **0.18**                     | **\u00d738**        |\n| 100               | 10,000            | 60.68                              | **1.09**                     | **\u00d756**        |\n| 1,000             | 100,000           | 615.59                             | **8.15**                     | **\u00d776**        |\n\n### Fisher's exact tests\n\n| Column count of B | Total comparisons | Runtime, `mat_fishers_naive`, seconds | Runtime, `mat_fishers`, seconds | Speedup factor |\n| ----------------- | ----------------- | ------------------------------------- | ------------------------------- | -------------- |\n| 10                | 1,000             | 2.63                                  | **0.41**                        | **\u00d76**         |\n| 100               | 10,000            | 25.19                                 | **3.78**                        | **\u00d77**         |\n| 1,000             | 100,000           | 254.19                                | **37.57**                       | **\u00d77**         |\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kevinhu/galileo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "galileo-k", "package_url": "https://pypi.org/project/galileo-k/", "platform": "", "project_url": "https://pypi.org/project/galileo-k/", "project_urls": {"Homepage": "https://github.com/kevinhu/galileo"}, "release_url": "https://pypi.org/project/galileo-k/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Fast correlations", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>galileo</h1>\n<p>This package contains several functions for explorative data analysis with a focus on association mining between variable pairs. The methods used here are optimized for Pandas dataframes and are inspired by the <code>corrcoef</code> function provided by <code>numpy</code>.</p>\n<p>Because these functions rely on native matrix-level operations provided by <code>numpy</code>,  many are orders of magnitude faster than naive looping-based alternatives. This makes them useful for constructing large association networks or for feature extraction, which have important uses in areas such as biomarker discovery.</p>\n<p>The current functions available are listed below by variable comparison type. Benchmarks are also provided with comparisons to an equivalent looping-based method.</p>\n<p>Requirements: Python 3, <code>numpy</code>,  <code>pandas</code>, <code>scipy</code>, <code>statsmodels</code>.</p>\n<h2>Functions</h2>\n<h3>Continuous vs. continuous</h3>\n<p><code>mat_corrs(A, B, method=\"pearson\")</code></p>\n<p>Computes pairwise Pearson or Spearman correlations between columns of A and B, provided that there are no missing values in either matrix.</p>\n<p><code>mat_corrs_nan(A, B, method=\"pearson\")</code></p>\n<p>Computes pairwise Pearson or Spearman correlations between A and the columns of B, provided that A is a series and B is a dataframe that may or may not contain some missing values.</p>\n<p><code>mat_corrs_naive(A, B, method=\"pearson\")</code></p>\n<p>Same functionality as <code>mat_corrs</code>, but uses a double loop for direct computation of statistics.</p>\n<h3>Continuous vs. categorical</h3>\n<p><code>mat_mwus(A, B, use_continuity=True)</code></p>\n<p>Computes pairwise Mann-Whitney U tests between columns of A (continuous samples) and B (binary samples). Assumes that A and B both do not contain any missing values.</p>\n<p><code>mat_mwus_naive(A, B, use_continuity=True)</code></p>\n<p>Same functionality as <code>mat_mwus</code>, but uses a double loop for direct computation of statistics.</p>\n<h3>Categorical vs. categorical</h3>\n<p><code>mat_fishers(A, B)</code></p>\n<p>Computes pairwise Fisher's exact tests between columns of A and B, provided that both are boolean-castable matrices and do not contain any missing values.</p>\n<p><code>mat_fishers_nan(A, B)</code></p>\n<p>Computes pairwise Fisher's exact tests between columns of A and B, provided that both are boolean-castable matrices and may or may not contain missing values.</p>\n<p><code>mat_fishers_naive(A, B)</code></p>\n<p>Same functionality as <code>mat_fishers</code>, but uses a double loop for direct computation of statistics.</p>\n<h3>Utilities</h3>\n<p><code>generate_test(n_samples, A_n_cols, B_n_cols, A_type=\"continuous\", B_type=\"continuous\", nans=False)</code></p>\n<p>Generates randomly-initialized matrix pairs for testing and benchmarking.</p>\n<h2>Benchmarks</h2>\n<p>These benchmarks were run with 1,000 samples per variable (i.e. setting each input matrice to have 1,000 rows). The number of variables in A was set to 100, and the number of variables in B was varied as shown below. The number of pairwise comparisons calaulated (equivalent to the product of A and B's column counts) is also indicated.</p>\n<p>Benchmark scripts can be found in <code>/test/benchmarks.ipynb</code>.</p>\n<h3>Pearson correlations</h3>\n<table>\n<thead>\n<tr>\n<th>Column count of B</th>\n<th>Total comparisons</th>\n<th>Runtime, <code>mat_corrs_naive</code>, seconds</th>\n<th>Runtime,  <code>mat_corrs</code>, seconds</th>\n<th>Speedup factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td>1,000</td>\n<td>3.27</td>\n<td><strong>0.020</strong></td>\n<td><strong>\u00d7163</strong></td>\n</tr>\n<tr>\n<td>100</td>\n<td>10,000</td>\n<td>30.55</td>\n<td><strong>0.066</strong></td>\n<td><strong>\u00d7461</strong></td>\n</tr>\n<tr>\n<td>1,000</td>\n<td>100,000</td>\n<td>303.30</td>\n<td><strong>0.53</strong></td>\n<td><strong>\u00d7574</strong></td>\n</tr></tbody></table>\n<h3>Spearman correlations</h3>\n<table>\n<thead>\n<tr>\n<th>Column count of B</th>\n<th>Total comparisons</th>\n<th>Runtime, <code>mat_corrs_naive</code>, seconds</th>\n<th>Runtime, <code>mat_corrs</code>, seconds</th>\n<th>Speedup factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td>1,000</td>\n<td>4.47</td>\n<td><strong>0.026</strong></td>\n<td><strong>\u00d7171</strong></td>\n</tr>\n<tr>\n<td>100</td>\n<td>10,000</td>\n<td>44.55</td>\n<td><strong>0.081</strong></td>\n<td><strong>\u00d7553</strong></td>\n</tr>\n<tr>\n<td>1,000</td>\n<td>100,000</td>\n<td>493.73</td>\n<td><strong>0.70</strong></td>\n<td><strong>\u00d7704</strong></td>\n</tr></tbody></table>\n<h3>Mann-Whitney U tests</h3>\n<table>\n<thead>\n<tr>\n<th>Column count of B</th>\n<th>Total comparisons</th>\n<th>Runtime, <code>mat_mwus_naive</code>, seconds</th>\n<th>Runtime, <code>mat_mwus</code>, seconds</th>\n<th>Speedup factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td>1,000</td>\n<td>6.94</td>\n<td><strong>0.18</strong></td>\n<td><strong>\u00d738</strong></td>\n</tr>\n<tr>\n<td>100</td>\n<td>10,000</td>\n<td>60.68</td>\n<td><strong>1.09</strong></td>\n<td><strong>\u00d756</strong></td>\n</tr>\n<tr>\n<td>1,000</td>\n<td>100,000</td>\n<td>615.59</td>\n<td><strong>8.15</strong></td>\n<td><strong>\u00d776</strong></td>\n</tr></tbody></table>\n<h3>Fisher's exact tests</h3>\n<table>\n<thead>\n<tr>\n<th>Column count of B</th>\n<th>Total comparisons</th>\n<th>Runtime, <code>mat_fishers_naive</code>, seconds</th>\n<th>Runtime, <code>mat_fishers</code>, seconds</th>\n<th>Speedup factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td>1,000</td>\n<td>2.63</td>\n<td><strong>0.41</strong></td>\n<td><strong>\u00d76</strong></td>\n</tr>\n<tr>\n<td>100</td>\n<td>10,000</td>\n<td>25.19</td>\n<td><strong>3.78</strong></td>\n<td><strong>\u00d77</strong></td>\n</tr>\n<tr>\n<td>1,000</td>\n<td>100,000</td>\n<td>254.19</td>\n<td><strong>37.57</strong></td>\n<td><strong>\u00d77</strong></td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6049001, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d85b830842477e29d7f10d2c1c89bd8d", "sha256": "6a5f2ca8b30aa2c1472a00e008184ce24e5f6c72621d110881a4d8180e0f52a1"}, "downloads": -1, "filename": "galileo_k-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d85b830842477e29d7f10d2c1c89bd8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13082, "upload_time": "2019-10-29T20:02:33", "upload_time_iso_8601": "2019-10-29T20:02:33.051279Z", "url": "https://files.pythonhosted.org/packages/ee/c2/c1b563c5b77827f562a20215434e48b30e5701d90216fb28b3686d052403/galileo_k-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fde00903507a1502c787ffb1e5ce2c41", "sha256": "899b1159562ea400fa39d26c8bc52999f7df115148a4c78a73f4d68b6150a36e"}, "downloads": -1, "filename": "galileo-k-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fde00903507a1502c787ffb1e5ce2c41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10590, "upload_time": "2019-10-29T20:02:35", "upload_time_iso_8601": "2019-10-29T20:02:35.890028Z", "url": "https://files.pythonhosted.org/packages/d9/e8/1e4b3d0f17f0f6ebcf552a687edbb2df516b8427296876b5728df90f6c77/galileo-k-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d85b830842477e29d7f10d2c1c89bd8d", "sha256": "6a5f2ca8b30aa2c1472a00e008184ce24e5f6c72621d110881a4d8180e0f52a1"}, "downloads": -1, "filename": "galileo_k-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d85b830842477e29d7f10d2c1c89bd8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13082, "upload_time": "2019-10-29T20:02:33", "upload_time_iso_8601": "2019-10-29T20:02:33.051279Z", "url": "https://files.pythonhosted.org/packages/ee/c2/c1b563c5b77827f562a20215434e48b30e5701d90216fb28b3686d052403/galileo_k-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fde00903507a1502c787ffb1e5ce2c41", "sha256": "899b1159562ea400fa39d26c8bc52999f7df115148a4c78a73f4d68b6150a36e"}, "downloads": -1, "filename": "galileo-k-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fde00903507a1502c787ffb1e5ce2c41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10590, "upload_time": "2019-10-29T20:02:35", "upload_time_iso_8601": "2019-10-29T20:02:35.890028Z", "url": "https://files.pythonhosted.org/packages/d9/e8/1e4b3d0f17f0f6ebcf552a687edbb2df516b8427296876b5728df90f6c77/galileo-k-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:17 2020"}