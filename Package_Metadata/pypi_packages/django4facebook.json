{"info": {"author": "Martey Dodoo", "author_email": "django4facebook@marteydodoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Facebook integration for your Django website\n=============================================\n\nInstallation:\n------------\nSimply add ``django_facebook`` to your INSTALLED_APPS and configure\nthe following settings:\n\n    FACEBOOK_APP_ID = ''\n    FACEBOOK_SECRET_KEY = ''\n\n    # Optionally set default permissions to request, e.g: ['email', 'user_about_me']\n    FACEBOOK_PERMS = []\n    \n    # And for local debugging, use one of the debug middlewares and set:\n    FACEBOOK_DEBUG_TOKEN = ''\n    FACEBOOK_DEBUG_UID = ''\n    FACEBOOK_DEBUG_COOKIE = ''\n    FACEBOOK_DEBUG_SIGNEDREQ = ''\n\n\nTemplates:\n---------\nA few helpers for using the Javascript SDK can be enabled by adding\nthis to your base template in the ``<head>`` section:\n\n    {% load facebook %}\n    {% facebook_init %}\n        {% block facebook_code %}{% endblock %}\n    {% endfacebook %}\n\nAnd this should be added just before your ``</html>`` tag:\n\n    {% facebook_load %}\n    \nThe ``facebook_load`` template tag inserts the code required to\nasynchronously load the facebook javascript SDK. The ``facebook_init``\ntag calls ``FB.init`` with your configured application settings. It is\nbest to put your facebook related javascript into the ``facebook_code``\nregion so that it can be called by the asynchronous handler.\n\nYou may find the ``facebook_perms`` tag useful, which takes the setting\nin FACEBOOK_PERMS and prints the extended permissions out in a\ncomma-separated list.\n\n    <fb:login-button show-faces=\"false\" width=\"200\" max-rows=\"1\"\n      perms=\"{% facebook_perms %}\"></fb:login-button>\n\n\nA helpful debugging page to view the status of your facebook login can\nbe enabled by adding this to your url configuration:\n\n    (r'^facebook_debug/', direct_to_template, {'template':'facebook_debug.html'}),  \n\n\nOnce this is in place you are ready to start with the facebook javascript SDK!\n\nThis module also provides all of the tools necessary for working with facebook\non the backend:\n\n\nMiddleware:\n----------\nThis provides seamless access to the Facebook Graph via request object.\n\nIf a user accesses your site with:\n- a valid cookie (Javascript SDK), or\n- a valid ``signed_request`` parameter (Facebook Canvas App),\nthen your views will have access to request.facebook.graph and you can\nbegin querying the graph immediately. For example, to get the users friends:\n\n    def friends(request):\n      if request.facebook:\n        friends = request.facebook.graph.get_connections('me', 'friends')\n        \nTo use the middleware, simply add this to your MIDDLEWARE_CLASSES:\n    'django_facebook.middleware.FacebookMiddleware'\n\n\n``FacebookDebugCookieMiddleware`` allows you to set a cookie in your settings\nfile and use this to simulate facebook logins offline.\n\n``FacebookDebugTokenMiddleware`` allows you to set a uid and access_token to\nforce facebook graph availability.\n\n``FacebookDebugCanvasMiddleware`` allows you to set a signed_request to mimic\na page being loaded as a canvas inside Facebook.\n\n\nAuthentication:\n--------------\nThis provides seamless integration with the Django user system.\n\nIf a user accesses your site with a valid facebook cookie, a user\naccount is automatically created or retrieved based on the facebook UID.\n\nTo use the backend, add this to your AUTHENTICATION_BACKENDS:\n    'django_facebook.auth.FacebookBackend'\n\nTo automatically populate your User and Profile models with facebook data, use:\n    'django_facebook.auth.FacebookProfileBackend'\n  \nDon't forget to include the default backend if you want to use standard\nlogins for users as well:\n    'django.contrib.auth.backends.ModelBackend'\n\n\nDecorators:\n----------\n``@facebook_required`` is a decorator which ensures the user is currently\nlogged in with facebook and has access to the facebook graph. It is a replacement\nfor ``@login_required`` if you are not using the facebook authentication backend.\n\n``@canvas_only`` is a decorater to ensure the view is being loaded with\na valid ``signed_request`` via Facebook Canvas. If signed_request is not found, the\ndecorator will return a HTTP 400. If signed_request is found but the user has not\nauthorised, the decorator will redirect the user to authorise.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pythonforfacebook/django-facebook", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django4facebook", "package_url": "https://pypi.org/project/django4facebook/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django4facebook/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/pythonforfacebook/django-facebook"}, "release_url": "https://pypi.org/project/django4facebook/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Facebook integration for your Django website.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Facebook integration for your Django website<br>=============================================<br><br>Installation:<br>------------<br>Simply add ``django_facebook`` to your INSTALLED_APPS and configure<br>the following settings:<br><br>    FACEBOOK_APP_ID = ''<br>    FACEBOOK_SECRET_KEY = ''<br><br>    # Optionally set default permissions to request, e.g: ['email', 'user_about_me']<br>    FACEBOOK_PERMS = []<br>    <br>    # And for local debugging, use one of the debug middlewares and set:<br>    FACEBOOK_DEBUG_TOKEN = ''<br>    FACEBOOK_DEBUG_UID = ''<br>    FACEBOOK_DEBUG_COOKIE = ''<br>    FACEBOOK_DEBUG_SIGNEDREQ = ''<br><br><br>Templates:<br>---------<br>A few helpers for using the Javascript SDK can be enabled by adding<br>this to your base template in the ``&lt;head&gt;`` section:<br><br>    {% load facebook %}<br>    {% facebook_init %}<br>        {% block facebook_code %}{% endblock %}<br>    {% endfacebook %}<br><br>And this should be added just before your ``&lt;/html&gt;`` tag:<br><br>    {% facebook_load %}<br>    <br>The ``facebook_load`` template tag inserts the code required to<br>asynchronously load the facebook javascript SDK. The ``facebook_init``<br>tag calls ``FB.init`` with your configured application settings. It is<br>best to put your facebook related javascript into the ``facebook_code``<br>region so that it can be called by the asynchronous handler.<br><br>You may find the ``facebook_perms`` tag useful, which takes the setting<br>in FACEBOOK_PERMS and prints the extended permissions out in a<br>comma-separated list.<br><br>    &lt;fb:login-button show-faces=\"false\" width=\"200\" max-rows=\"1\"<br>      perms=\"{% facebook_perms %}\"&gt;&lt;/fb:login-button&gt;<br><br><br>A helpful debugging page to view the status of your facebook login can<br>be enabled by adding this to your url configuration:<br><br>    (r'^facebook_debug/', direct_to_template, {'template':'facebook_debug.html'}),  <br><br><br>Once this is in place you are ready to start with the facebook javascript SDK!<br><br>This module also provides all of the tools necessary for working with facebook<br>on the backend:<br><br><br>Middleware:<br>----------<br>This provides seamless access to the Facebook Graph via request object.<br><br>If a user accesses your site with:<br>- a valid cookie (Javascript SDK), or<br>- a valid ``signed_request`` parameter (Facebook Canvas App),<br>then your views will have access to request.facebook.graph and you can<br>begin querying the graph immediately. For example, to get the users friends:<br><br>    def friends(request):<br>      if request.facebook:<br>        friends = request.facebook.graph.get_connections('me', 'friends')<br>        <br>To use the middleware, simply add this to your MIDDLEWARE_CLASSES:<br>    'django_facebook.middleware.FacebookMiddleware'<br><br><br>``FacebookDebugCookieMiddleware`` allows you to set a cookie in your settings<br>file and use this to simulate facebook logins offline.<br><br>``FacebookDebugTokenMiddleware`` allows you to set a uid and access_token to<br>force facebook graph availability.<br><br>``FacebookDebugCanvasMiddleware`` allows you to set a signed_request to mimic<br>a page being loaded as a canvas inside Facebook.<br><br><br>Authentication:<br>--------------<br>This provides seamless integration with the Django user system.<br><br>If a user accesses your site with a valid facebook cookie, a user<br>account is automatically created or retrieved based on the facebook UID.<br><br>To use the backend, add this to your AUTHENTICATION_BACKENDS:<br>    'django_facebook.auth.FacebookBackend'<br><br>To automatically populate your User and Profile models with facebook data, use:<br>    'django_facebook.auth.FacebookProfileBackend'<br>  <br>Don't forget to include the default backend if you want to use standard<br>logins for users as well:<br>    'django.contrib.auth.backends.ModelBackend'<br><br><br>Decorators:<br>----------<br>``@facebook_required`` is a decorator which ensures the user is currently<br>logged in with facebook and has access to the facebook graph. It is a replacement<br>for ``@login_required`` if you are not using the facebook authentication backend.<br><br>``@canvas_only`` is a decorater to ensure the view is being loaded with<br>a valid ``signed_request`` via Facebook Canvas. If signed_request is not found, the<br>decorator will return a HTTP 400. If signed_request is found but the user has not<br>authorised, the decorator will redirect the user to authorise.\n          </div>"}, "last_serial": 773243, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "06febf431ef423935588bbf6ea973b3c", "sha256": "025b883b69e5a3c6766208194569db58be5a40b3913cc42fc7868a0e774f4c8c"}, "downloads": -1, "filename": "django4facebook-0.1.0.tar.gz", "has_sig": false, "md5_digest": "06febf431ef423935588bbf6ea973b3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6951, "upload_time": "2012-06-23T15:56:01", "upload_time_iso_8601": "2012-06-23T15:56:01.258056Z", "url": "https://files.pythonhosted.org/packages/8e/ef/a4f747d89239d196c67047b2b45f433ec9ed3f5e2c998aeb9fbd67f218ae/django4facebook-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06febf431ef423935588bbf6ea973b3c", "sha256": "025b883b69e5a3c6766208194569db58be5a40b3913cc42fc7868a0e774f4c8c"}, "downloads": -1, "filename": "django4facebook-0.1.0.tar.gz", "has_sig": false, "md5_digest": "06febf431ef423935588bbf6ea973b3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6951, "upload_time": "2012-06-23T15:56:01", "upload_time_iso_8601": "2012-06-23T15:56:01.258056Z", "url": "https://files.pythonhosted.org/packages/8e/ef/a4f747d89239d196c67047b2b45f433ec9ed3f5e2c998aeb9fbd67f218ae/django4facebook-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:54 2020"}