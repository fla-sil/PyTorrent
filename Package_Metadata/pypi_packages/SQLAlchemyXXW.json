{"info": {"author": "Mike Bayer", "author_email": "mike_mp@zzzcomputing.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database :: Front-Ends"], "description": "SQLAlchemy\n==========\n\nThe Python SQL Toolkit and Object Relational Mapper\n\nIntroduction\n-------------\n\nSQLAlchemy is the Python SQL toolkit and Object Relational Mapper\nthat gives application developers the full power and\nflexibility of SQL. SQLAlchemy provides a full suite\nof well known enterprise-level persistence patterns,\ndesigned for efficient and high-performing database\naccess, adapted into a simple and Pythonic domain\nlanguage.\n\nMajor SQLAlchemy features include:\n\n* An industrial strength ORM, built \n  from the core on the identity map, unit of work,\n  and data mapper patterns.   These patterns\n  allow transparent persistence of objects \n  using a declarative configuration system.\n  Domain models\n  can be constructed and manipulated naturally,\n  and changes are synchronized with the\n  current transaction automatically.\n* A relationally-oriented query system, exposing\n  the full range of SQL's capabilities \n  explicitly, including joins, subqueries, \n  correlation, and most everything else, \n  in terms of the object model.\n  Writing queries with the ORM uses the same \n  techniques of relational composition you use \n  when writing SQL.  While you can drop into\n  literal SQL at any time, it's virtually never\n  needed.\n* A comprehensive and flexible system \n  of eager loading for related collections and objects.\n  Collections are cached within a session,\n  and can be loaded on individual access, all \n  at once using joins, or by query per collection\n  across the full result set.\n* A Core SQL construction system and DBAPI \n  interaction layer.  The SQLAlchemy Core is\n  separate from the ORM and is a full database\n  abstraction layer in its own right, and includes\n  an extensible Python-based SQL expression \n  language, schema metadata, connection pooling, \n  type coercion, and custom types.\n* All primary and foreign key constraints are \n  assumed to be composite and natural.  Surrogate\n  integer primary keys are of course still the \n  norm, but SQLAlchemy never assumes or hardcodes\n  to this model.\n* Database introspection and generation.  Database\n  schemas can be \"reflected\" in one step into\n  Python structures representing database metadata;\n  those same structures can then generate \n  CREATE statements right back out - all within\n  the Core, independent of the ORM.\n\nSQLAlchemy's philosophy:\n\n* SQL databases behave less and less like object\n  collections the more size and performance start to\n  matter; object collections behave less and less like\n  tables and rows the more abstraction starts to matter.\n  SQLAlchemy aims to accommodate both of these\n  principles.\n* An ORM doesn't need to hide the \"R\".   A relational\n  database provides rich, set-based functionality\n  that should be fully exposed.   SQLAlchemy's\n  ORM provides an open-ended set of patterns\n  that allow a developer to construct a custom\n  mediation layer between a domain model and \n  a relational schema, turning the so-called\n  \"object relational impedance\" issue into\n  a distant memory.\n* The developer, in all cases, makes all decisions\n  regarding the design, structure, and naming conventions\n  of both the object model as well as the relational\n  schema.   SQLAlchemy only provides the means\n  to automate the execution of these decisions.\n* With SQLAlchemy, there's no such thing as \n  \"the ORM generated a bad query\" - you \n  retain full control over the structure of \n  queries, including how joins are organized,\n  how subqueries and correlation is used, what \n  columns are requested.  Everything SQLAlchemy\n  does is ultimately the result of a developer-\n  initiated decision.\n* Don't use an ORM if the problem doesn't need one.\n  SQLAlchemy consists of a Core and separate ORM\n  component.   The Core offers a full SQL expression\n  language that allows Pythonic construction \n  of SQL constructs that render directly to SQL\n  strings for a target database, returning\n  result sets that are essentially enhanced DBAPI\n  cursors.\n* Transactions should be the norm.  With SQLAlchemy's\n  ORM, nothing goes to permanent storage until\n  commit() is called.  SQLAlchemy encourages applications\n  to create a consistent means of delineating\n  the start and end of a series of operations.\n* Never render a literal value in a SQL statement.\n  Bound parameters are used to the greatest degree\n  possible, allowing query optimizers to cache \n  query plans effectively and making SQL injection\n  attacks a non-issue.\n\nDocumentation\n-------------\n\nLatest documentation is at:\n\nhttp://www.sqlalchemy.org/docs/\n\nInstallation / Requirements\n---------------------------\n\nFull documentation for installation is at \n`Installation <http://www.sqlalchemy.org/docs/intro.html#installation>`_.\n\nGetting Help / Development / Bug reporting\n------------------------------------------\n\nPlease refer to the `SQLAlchemy Community Guide <http://www.sqlalchemy.org/support.html>`_.\n\nLicense\n-------\n\nSQLAlchemy is distributed under the `MIT license\n<http://www.opensource.org/licenses/mit-license.php>`_.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.sqlalchemy.org", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "SQLAlchemyXXW", "package_url": "https://pypi.org/project/SQLAlchemyXXW/", "platform": "", "project_url": "https://pypi.org/project/SQLAlchemyXXW/", "project_urls": {"Homepage": "http://www.sqlalchemy.org"}, "release_url": "https://pypi.org/project/SQLAlchemyXXW/1.2.10.dev0/", "requires_dist": null, "requires_python": "", "summary": "Database Abstraction Library", "version": "1.2.10.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Python SQL Toolkit and Object Relational Mapper</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>SQLAlchemy is the Python SQL toolkit and Object Relational Mapper\nthat gives application developers the full power and\nflexibility of SQL. SQLAlchemy provides a full suite\nof well known enterprise-level persistence patterns,\ndesigned for efficient and high-performing database\naccess, adapted into a simple and Pythonic domain\nlanguage.</p>\n<p>Major SQLAlchemy features include:</p>\n<ul>\n<li>An industrial strength ORM, built\nfrom the core on the identity map, unit of work,\nand data mapper patterns.   These patterns\nallow transparent persistence of objects\nusing a declarative configuration system.\nDomain models\ncan be constructed and manipulated naturally,\nand changes are synchronized with the\ncurrent transaction automatically.</li>\n<li>A relationally-oriented query system, exposing\nthe full range of SQL\u2019s capabilities\nexplicitly, including joins, subqueries,\ncorrelation, and most everything else,\nin terms of the object model.\nWriting queries with the ORM uses the same\ntechniques of relational composition you use\nwhen writing SQL.  While you can drop into\nliteral SQL at any time, it\u2019s virtually never\nneeded.</li>\n<li>A comprehensive and flexible system\nof eager loading for related collections and objects.\nCollections are cached within a session,\nand can be loaded on individual access, all\nat once using joins, or by query per collection\nacross the full result set.</li>\n<li>A Core SQL construction system and DBAPI\ninteraction layer.  The SQLAlchemy Core is\nseparate from the ORM and is a full database\nabstraction layer in its own right, and includes\nan extensible Python-based SQL expression\nlanguage, schema metadata, connection pooling,\ntype coercion, and custom types.</li>\n<li>All primary and foreign key constraints are\nassumed to be composite and natural.  Surrogate\ninteger primary keys are of course still the\nnorm, but SQLAlchemy never assumes or hardcodes\nto this model.</li>\n<li>Database introspection and generation.  Database\nschemas can be \u201creflected\u201d in one step into\nPython structures representing database metadata;\nthose same structures can then generate\nCREATE statements right back out - all within\nthe Core, independent of the ORM.</li>\n</ul>\n<p>SQLAlchemy\u2019s philosophy:</p>\n<ul>\n<li>SQL databases behave less and less like object\ncollections the more size and performance start to\nmatter; object collections behave less and less like\ntables and rows the more abstraction starts to matter.\nSQLAlchemy aims to accommodate both of these\nprinciples.</li>\n<li>An ORM doesn\u2019t need to hide the \u201cR\u201d.   A relational\ndatabase provides rich, set-based functionality\nthat should be fully exposed.   SQLAlchemy\u2019s\nORM provides an open-ended set of patterns\nthat allow a developer to construct a custom\nmediation layer between a domain model and\na relational schema, turning the so-called\n\u201cobject relational impedance\u201d issue into\na distant memory.</li>\n<li>The developer, in all cases, makes all decisions\nregarding the design, structure, and naming conventions\nof both the object model as well as the relational\nschema.   SQLAlchemy only provides the means\nto automate the execution of these decisions.</li>\n<li>With SQLAlchemy, there\u2019s no such thing as\n\u201cthe ORM generated a bad query\u201d - you\nretain full control over the structure of\nqueries, including how joins are organized,\nhow subqueries and correlation is used, what\ncolumns are requested.  Everything SQLAlchemy\ndoes is ultimately the result of a developer-\ninitiated decision.</li>\n<li>Don\u2019t use an ORM if the problem doesn\u2019t need one.\nSQLAlchemy consists of a Core and separate ORM\ncomponent.   The Core offers a full SQL expression\nlanguage that allows Pythonic construction\nof SQL constructs that render directly to SQL\nstrings for a target database, returning\nresult sets that are essentially enhanced DBAPI\ncursors.</li>\n<li>Transactions should be the norm.  With SQLAlchemy\u2019s\nORM, nothing goes to permanent storage until\ncommit() is called.  SQLAlchemy encourages applications\nto create a consistent means of delineating\nthe start and end of a series of operations.</li>\n<li>Never render a literal value in a SQL statement.\nBound parameters are used to the greatest degree\npossible, allowing query optimizers to cache\nquery plans effectively and making SQL injection\nattacks a non-issue.</li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Latest documentation is at:</p>\n<p><a href=\"http://www.sqlalchemy.org/docs/\" rel=\"nofollow\">http://www.sqlalchemy.org/docs/</a></p>\n</div>\n<div id=\"installation-requirements\">\n<h2>Installation / Requirements</h2>\n<p>Full documentation for installation is at\n<a href=\"http://www.sqlalchemy.org/docs/intro.html#installation\" rel=\"nofollow\">Installation</a>.</p>\n</div>\n<div id=\"getting-help-development-bug-reporting\">\n<h2>Getting Help / Development / Bug reporting</h2>\n<p>Please refer to the <a href=\"http://www.sqlalchemy.org/support.html\" rel=\"nofollow\">SQLAlchemy Community Guide</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>SQLAlchemy is distributed under the <a href=\"http://www.opensource.org/licenses/mit-license.php\" rel=\"nofollow\">MIT license</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 4351982, "releases": {"1.2.10.dev0": [{"comment_text": "", "digests": {"md5": "7db0da710a261a916f466262013311bd", "sha256": "ad201fc98fef57e11862067c65b70883e2f98389fac55423dfaa9cc81b1d7dae"}, "downloads": -1, "filename": "SQLAlchemyXXW-1.2.10.dev0.tar.gz", "has_sig": false, "md5_digest": "7db0da710a261a916f466262013311bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2836892, "upload_time": "2018-10-08T13:09:15", "upload_time_iso_8601": "2018-10-08T13:09:15.677971Z", "url": "https://files.pythonhosted.org/packages/76/c6/4d7d57e8cb5a432262bca789967c011725e371a46cd3a5c6d56fb474712b/SQLAlchemyXXW-1.2.10.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7db0da710a261a916f466262013311bd", "sha256": "ad201fc98fef57e11862067c65b70883e2f98389fac55423dfaa9cc81b1d7dae"}, "downloads": -1, "filename": "SQLAlchemyXXW-1.2.10.dev0.tar.gz", "has_sig": false, "md5_digest": "7db0da710a261a916f466262013311bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2836892, "upload_time": "2018-10-08T13:09:15", "upload_time_iso_8601": "2018-10-08T13:09:15.677971Z", "url": "https://files.pythonhosted.org/packages/76/c6/4d7d57e8cb5a432262bca789967c011725e371a46cd3a5c6d56fb474712b/SQLAlchemyXXW-1.2.10.dev0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:50 2020"}