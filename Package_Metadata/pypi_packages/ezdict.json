{"info": {"author": "Jacob Morris", "author_email": "blendingjake@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "# EZDict\n\nMaking Python's `dict` easier to work with by adding object notation and grouping.\n 1. Allows keys to be accessed as attributes, so `ezdict.attr` can be used instead of \n `ezdict[\"attr\"]`. Note, this only works with string keys. Additionally, any\n keys that overlap with method names will be shadowed, so to access the key `keys`,\n use `ezdict[\"keys\"]` instead of `ezdict.keys`.\n 2. Provide two methods, `incrementer` and `appender`, to support the common operations\n of counting the occurrences of a key and grouping values by a key, respectively.\n\n## Installation\n\n```\npip install ezdict\n```\n\n## Import\n\n```python\nfrom ezdict import EZDict\n```\n\n## Usage\n\n### Accessing Keys as Attributes\n\n```python\nfrom ezdict import EZDict\n\nez = EZDict({\n    \"id\": \"5e2797c05aa0585816ce8b8c\",\n    \"title\": \"EZDict\",\n    \"description\": \"Super cool Python package\",\n    \"author\": \"Jacob Morris (BlendingJake)\",\n    \"meta\": {\n        \"created\": \"March 27th, 2020\"\n    }\n})\n\nprint(ez.title)  # >>> \"EZDict\"\nprint(ez.meta.created)  # >>> \"March 27th, 2020\"\n```\n\n### Grouping/Counting Like a Pro\n```python\nfrom ezdict import EZDict\n\n# tried of this?\niterable = [ ... ]\ngrouped = {}\nfor item in iterable:\n    if item[\"key\"] in grouped:\n        grouped[item[\"key\"]] += 1\n        # OR grouped[item[\"key\"]].append(item)\n    else:\n        grouped[item[\"key\"]] = 1\n        # OR grouped[item[\"key\"]] = [item]\n\n# do this instead\niterable = [ ... ]\ngrouped = EZDict()\nfor item in iterable:\n    grouped.incrementer(item[\"key\"])\n    # OR grouped.appender(item[\"key\"], item)\n```\n\n#### `incrementer(key, increment=1)`\n\n>Increment `key` by `increment` if the key has already been seen. Otherwise,\n>set the key equal to `increment`.\n\n\n#### `appender(key, value)`\n\n>Append `value` to the list of values associated with `key` if that key was\n>already been seen. Otherwise, set the key equal to `[value]`.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BlendingJake/EZDict", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ezdict", "package_url": "https://pypi.org/project/ezdict/", "platform": "", "project_url": "https://pypi.org/project/ezdict/", "project_urls": {"Homepage": "https://github.com/BlendingJake/EZDict"}, "release_url": "https://pypi.org/project/ezdict/1.0.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Making Python's `dict` easier to work with by adding object notation and grouping", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EZDict</h1>\n<p>Making Python's <code>dict</code> easier to work with by adding object notation and grouping.</p>\n<ol>\n<li>Allows keys to be accessed as attributes, so <code>ezdict.attr</code> can be used instead of\n<code>ezdict[\"attr\"]</code>. Note, this only works with string keys. Additionally, any\nkeys that overlap with method names will be shadowed, so to access the key <code>keys</code>,\nuse <code>ezdict[\"keys\"]</code> instead of <code>ezdict.keys</code>.</li>\n<li>Provide two methods, <code>incrementer</code> and <code>appender</code>, to support the common operations\nof counting the occurrences of a key and grouping values by a key, respectively.</li>\n</ol>\n<h2>Installation</h2>\n<pre><code>pip install ezdict\n</code></pre>\n<h2>Import</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ezdict</span> <span class=\"kn\">import</span> <span class=\"n\">EZDict</span>\n</pre>\n<h2>Usage</h2>\n<h3>Accessing Keys as Attributes</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ezdict</span> <span class=\"kn\">import</span> <span class=\"n\">EZDict</span>\n\n<span class=\"n\">ez</span> <span class=\"o\">=</span> <span class=\"n\">EZDict</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5e2797c05aa0585816ce8b8c\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EZDict\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Super cool Python package\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jacob Morris (BlendingJake)\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"meta\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"March 27th, 2020\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ez</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt;&gt;&gt; \"EZDict\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ez</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">created</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt;&gt;&gt; \"March 27th, 2020\"</span>\n</pre>\n<h3>Grouping/Counting Like a Pro</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ezdict</span> <span class=\"kn\">import</span> <span class=\"n\">EZDict</span>\n\n<span class=\"c1\"># tried of this?</span>\n<span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"p\">]</span>\n<span class=\"n\">grouped</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterable</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">\"key\"</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">grouped</span><span class=\"p\">:</span>\n        <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">\"key\"</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"c1\"># OR grouped[item[\"key\"]].append(item)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">\"key\"</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"c1\"># OR grouped[item[\"key\"]] = [item]</span>\n\n<span class=\"c1\"># do this instead</span>\n<span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"p\">]</span>\n<span class=\"n\">grouped</span> <span class=\"o\">=</span> <span class=\"n\">EZDict</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">iterable</span><span class=\"p\">:</span>\n    <span class=\"n\">grouped</span><span class=\"o\">.</span><span class=\"n\">incrementer</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">\"key\"</span><span class=\"p\">])</span>\n    <span class=\"c1\"># OR grouped.appender(item[\"key\"], item)</span>\n</pre>\n<h4><code>incrementer(key, increment=1)</code></h4>\n<blockquote>\n<p>Increment <code>key</code> by <code>increment</code> if the key has already been seen. Otherwise,\nset the key equal to <code>increment</code>.</p>\n</blockquote>\n<h4><code>appender(key, value)</code></h4>\n<blockquote>\n<p>Append <code>value</code> to the list of values associated with <code>key</code> if that key was\nalready been seen. Otherwise, set the key equal to <code>[value]</code>.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6908323, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f7ede3b0ce941b1a9ed6dd4657a998b2", "sha256": "34e92c3cd28143251ab767d5a02b6cd1fb2d2133b7effa603a0941c705367c09"}, "downloads": -1, "filename": "ezdict-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f7ede3b0ce941b1a9ed6dd4657a998b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15654, "upload_time": "2020-03-29T19:39:08", "upload_time_iso_8601": "2020-03-29T19:39:08.314784Z", "url": "https://files.pythonhosted.org/packages/35/77/7efaa4fb3d488c164e14ed8f9ba0bb7a3cc00f4d823d141a9d1d59f106aa/ezdict-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59324143c4564a78bbb3967a2d0fb5eb", "sha256": "98f5574c2b82108d9bb8852724d6d4188e2670e0857628f523b6c267480b3e1d"}, "downloads": -1, "filename": "ezdict-1.0.0.tar.gz", "has_sig": false, "md5_digest": "59324143c4564a78bbb3967a2d0fb5eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2902, "upload_time": "2020-03-29T19:39:10", "upload_time_iso_8601": "2020-03-29T19:39:10.286315Z", "url": "https://files.pythonhosted.org/packages/d6/86/aef76cb5409fc47324b5fc9cbab748a3b00b3abba4af9d5c932d27738698/ezdict-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f7ede3b0ce941b1a9ed6dd4657a998b2", "sha256": "34e92c3cd28143251ab767d5a02b6cd1fb2d2133b7effa603a0941c705367c09"}, "downloads": -1, "filename": "ezdict-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f7ede3b0ce941b1a9ed6dd4657a998b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15654, "upload_time": "2020-03-29T19:39:08", "upload_time_iso_8601": "2020-03-29T19:39:08.314784Z", "url": "https://files.pythonhosted.org/packages/35/77/7efaa4fb3d488c164e14ed8f9ba0bb7a3cc00f4d823d141a9d1d59f106aa/ezdict-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59324143c4564a78bbb3967a2d0fb5eb", "sha256": "98f5574c2b82108d9bb8852724d6d4188e2670e0857628f523b6c267480b3e1d"}, "downloads": -1, "filename": "ezdict-1.0.0.tar.gz", "has_sig": false, "md5_digest": "59324143c4564a78bbb3967a2d0fb5eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2902, "upload_time": "2020-03-29T19:39:10", "upload_time_iso_8601": "2020-03-29T19:39:10.286315Z", "url": "https://files.pythonhosted.org/packages/d6/86/aef76cb5409fc47324b5fc9cbab748a3b00b3abba4af9d5c932d27738698/ezdict-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:24 2020"}