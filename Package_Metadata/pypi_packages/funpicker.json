{"info": {"author": "Kevin Hill", "author_email": "kevin@funguana.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Funpicker - A way of collecting price information for your trading bot.\n\n\n\n`Funpicker` is a library funguana created to get the price information for exchanges. This relies most on the cryptocompare api. However, there are parts that use ccxt to pull exchange specific information.\n\nThis library is to make our application highly modular. The basic premise of it is very simple: \n\n1. You explain which information you want to collect in a context\n2. You get a return with that information\n3. You store what you intend using another library (such as `funtime` or sql)\n\n**Understand `funpicker` is a firm wrapper around `ccxt` and `request`. Its job is to make pricing easier to access for the common bot maker**\n\n\n## What makes `funpicker` better?\nThe single thing that makes funpicker better than all other platforms is that it relies 100% on making the process simipler for the user. There's only a couple of functions to be able to start getting information from exchanges immediately for either storage or analytics:\n\nIt is a layer on top of `request` and `ccxt`. We added the following:\n\n* An easy way to find data\n* The user will have easy query options to get data with extra grainularity\n* Easy access to orderbook information. Has an option of an in-memory queue to deal with rate limits. Or you could let it fail and not acknowledge it.\n\n\n## How does it work?\nUsing a few functions, we reach out to various API's to do the following:\n\n* Get orderbook information\n* Get pricing\n\nIn the future the plan is to introduce the following:\n\n* General sentiment data\n* Generic Twitter Streams\n* Generic Reddit Streams\n\n\n\n### Example:\n---\n```python\nfrom funpicker import Queuy # this is the main query object\n\n# Initialize the query class. \n# It has a lot of default values at the start that we could use\nfpq = Query()\n\n# This gets all of the minutely historical price information for bitcoin.\n# This should work out the box\ninitial = fpq.get()\n\n```\n\n\n### Setting Desired Parameters dynamically\n```python\nfrom funpicker import Query, QueryType\n\n# Now this gets the last 30 hours of ETH to USD prices. \n# This is in price format and this should be return all of the compressed candlebars\nfpq = Query().set_crypto(\"ETH\").set_fiat(\"USD\").set_exchange(\"binance\").set_period(\"hour\").set_limit(30).get()\n```\n\n### Can directly get the single price data as well dynamically from an exchange. \nThis price information is entirely. It has all of the information availble to send directly into `funtime`. The time-series database\n\n```python\nfrom funpicker import Query, QueryType\n\n# Same as before. Only it gets the latest price information for one period of time. \n# This should be within 30-40 seconds of getting posted onto the exchange according to cryptocompare\nfpq = Query().set_crypto(\"ETH\").set_fiat(\"USD\").set_exchange(\"binance\").set_period(\"hour\").set_limit(30).get(QueryType.price)\n```\n\n\n### Get the order book\n\nAs a data scientist, you may want to handle your data in dataframe format. With `funtime`, you can get your timestamp information in both `pandas.DataFrame` and `dask.DataFrame` format. You would use the `Converter` import. \n\n```python\nfrom funpicker import Query, QueryType\n\n# Similar as before, only it gets the orderbook when returned\nfpq = Query().set_crypto(\"ETH\").set_fiat(\"USD\").set_exchange(\"binance\").get(QueryType.orderbook)\n```\n\n\n\n## How to install\n\nThis requires an internet connection. Using `pip` or `pipenv`, run:\n\n\n```\npip install funpicker\n```\n\nOr you can use `pipenv` for it:\n\n```\npipenv install funpicker\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "funpicker", "package_url": "https://pypi.org/project/funpicker/", "platform": "", "project_url": "https://pypi.org/project/funpicker/", "project_urls": null, "release_url": "https://pypi.org/project/funpicker/0.2.2/", "requires_dist": ["cryptocompare", "ccxt", "requests"], "requires_python": "", "summary": "A library to collect information for your trading bot. Use with `funtime` time series library", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Funpicker - A way of collecting price information for your trading bot.</h1>\n<p><code>Funpicker</code> is a library funguana created to get the price information for exchanges. This relies most on the cryptocompare api. However, there are parts that use ccxt to pull exchange specific information.</p>\n<p>This library is to make our application highly modular. The basic premise of it is very simple:</p>\n<ol>\n<li>You explain which information you want to collect in a context</li>\n<li>You get a return with that information</li>\n<li>You store what you intend using another library (such as <code>funtime</code> or sql)</li>\n</ol>\n<p><strong>Understand <code>funpicker</code> is a firm wrapper around <code>ccxt</code> and <code>request</code>. Its job is to make pricing easier to access for the common bot maker</strong></p>\n<h2>What makes <code>funpicker</code> better?</h2>\n<p>The single thing that makes funpicker better than all other platforms is that it relies 100% on making the process simipler for the user. There's only a couple of functions to be able to start getting information from exchanges immediately for either storage or analytics:</p>\n<p>It is a layer on top of <code>request</code> and <code>ccxt</code>. We added the following:</p>\n<ul>\n<li>An easy way to find data</li>\n<li>The user will have easy query options to get data with extra grainularity</li>\n<li>Easy access to orderbook information. Has an option of an in-memory queue to deal with rate limits. Or you could let it fail and not acknowledge it.</li>\n</ul>\n<h2>How does it work?</h2>\n<p>Using a few functions, we reach out to various API's to do the following:</p>\n<ul>\n<li>Get orderbook information</li>\n<li>Get pricing</li>\n</ul>\n<p>In the future the plan is to introduce the following:</p>\n<ul>\n<li>General sentiment data</li>\n<li>Generic Twitter Streams</li>\n<li>Generic Reddit Streams</li>\n</ul>\n<h3>Example:</h3>\n<hr>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">funpicker</span> <span class=\"kn\">import</span> <span class=\"n\">Queuy</span> <span class=\"c1\"># this is the main query object</span>\n\n<span class=\"c1\"># Initialize the query class. </span>\n<span class=\"c1\"># It has a lot of default values at the start that we could use</span>\n<span class=\"n\">fpq</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># This gets all of the minutely historical price information for bitcoin.</span>\n<span class=\"c1\"># This should work out the box</span>\n<span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"n\">fpq</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<h3>Setting Desired Parameters dynamically</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">funpicker</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">QueryType</span>\n\n<span class=\"c1\"># Now this gets the last 30 hours of ETH to USD prices. </span>\n<span class=\"c1\"># This is in price format and this should be return all of the compressed candlebars</span>\n<span class=\"n\">fpq</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_crypto</span><span class=\"p\">(</span><span class=\"s2\">\"ETH\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_fiat</span><span class=\"p\">(</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_exchange</span><span class=\"p\">(</span><span class=\"s2\">\"binance\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_period</span><span class=\"p\">(</span><span class=\"s2\">\"hour\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_limit</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<h3>Can directly get the single price data as well dynamically from an exchange.</h3>\n<p>This price information is entirely. It has all of the information availble to send directly into <code>funtime</code>. The time-series database</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">funpicker</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">QueryType</span>\n\n<span class=\"c1\"># Same as before. Only it gets the latest price information for one period of time. </span>\n<span class=\"c1\"># This should be within 30-40 seconds of getting posted onto the exchange according to cryptocompare</span>\n<span class=\"n\">fpq</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_crypto</span><span class=\"p\">(</span><span class=\"s2\">\"ETH\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_fiat</span><span class=\"p\">(</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_exchange</span><span class=\"p\">(</span><span class=\"s2\">\"binance\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_period</span><span class=\"p\">(</span><span class=\"s2\">\"hour\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_limit</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">QueryType</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">)</span>\n</pre>\n<h3>Get the order book</h3>\n<p>As a data scientist, you may want to handle your data in dataframe format. With <code>funtime</code>, you can get your timestamp information in both <code>pandas.DataFrame</code> and <code>dask.DataFrame</code> format. You would use the <code>Converter</code> import.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">funpicker</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">QueryType</span>\n\n<span class=\"c1\"># Similar as before, only it gets the orderbook when returned</span>\n<span class=\"n\">fpq</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_crypto</span><span class=\"p\">(</span><span class=\"s2\">\"ETH\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_fiat</span><span class=\"p\">(</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_exchange</span><span class=\"p\">(</span><span class=\"s2\">\"binance\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">QueryType</span><span class=\"o\">.</span><span class=\"n\">orderbook</span><span class=\"p\">)</span>\n</pre>\n<h2>How to install</h2>\n<p>This requires an internet connection. Using <code>pip</code> or <code>pipenv</code>, run:</p>\n<pre><code>pip install funpicker\n</code></pre>\n<p>Or you can use <code>pipenv</code> for it:</p>\n<pre><code>pipenv install funpicker\n</code></pre>\n\n          </div>"}, "last_serial": 4213379, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "870107d5db860c852ab74f2c0e5f0033", "sha256": "242d8b49096b969d2b6ffe9b7f6b6bb315293ecf1b92ea42200165ae37c1278e"}, "downloads": -1, "filename": "funpicker-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "870107d5db860c852ab74f2c0e5f0033", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4906, "upload_time": "2018-08-19T05:03:30", "upload_time_iso_8601": "2018-08-19T05:03:30.623516Z", "url": "https://files.pythonhosted.org/packages/ed/cb/5f33d1281ecdb9009ea7b327128851fdbb1e937a8283cf447e12642980f5/funpicker-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92c5c1c81a6b9e2c05f903aa10b474ef", "sha256": "40c0a0ee677fc13274dc15621afd58bf995ecf6cf265bcc3128bb33166563a4b"}, "downloads": -1, "filename": "funpicker-0.1.1.tar.gz", "has_sig": false, "md5_digest": "92c5c1c81a6b9e2c05f903aa10b474ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4209, "upload_time": "2018-08-19T05:03:32", "upload_time_iso_8601": "2018-08-19T05:03:32.014038Z", "url": "https://files.pythonhosted.org/packages/dc/2a/aa4eae1c71b1e01d8d64a862b48c06112688e58a9f168a251b51a8d0dc7a/funpicker-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2d1bb556bf0a0b14ac9f68d14b5e6711", "sha256": "252c2dcf080d115a1d34179069776cbdfcfdeefde8c42455888f71c5e545fba0"}, "downloads": -1, "filename": "funpicker-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2d1bb556bf0a0b14ac9f68d14b5e6711", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5013, "upload_time": "2018-08-20T17:53:20", "upload_time_iso_8601": "2018-08-20T17:53:20.110729Z", "url": "https://files.pythonhosted.org/packages/a5/16/2b585cab1b0759a538f9eb6003a794581c8b23ac230e9b1f851570a25038/funpicker-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a10288aa33e4309f648ed9805360c703", "sha256": "9ae0c443c9acf3be325cb01b3c2a1ce972bf7568731e28fbf433253b7aea4193"}, "downloads": -1, "filename": "funpicker-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a10288aa33e4309f648ed9805360c703", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4304, "upload_time": "2018-08-20T17:53:23", "upload_time_iso_8601": "2018-08-20T17:53:23.418817Z", "url": "https://files.pythonhosted.org/packages/7a/0d/fbe4729edd86deb465553d2d370c148e1280182bf83d6a96b97385b52b1d/funpicker-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "baf73407e3bbe0a22d9a31dbcbad6039", "sha256": "4b125f8519834e9c25acd9c9f70f1264be2b105cd49ee4a245159c50f4bd12a5"}, "downloads": -1, "filename": "funpicker-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "baf73407e3bbe0a22d9a31dbcbad6039", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5543, "upload_time": "2018-08-21T08:10:26", "upload_time_iso_8601": "2018-08-21T08:10:26.078916Z", "url": "https://files.pythonhosted.org/packages/0d/5c/f222a6d08e0aef494c9cc87518747d1bf29f66061d24efd86924a4a20a9e/funpicker-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9841f115486b39c1390435d083e21db1", "sha256": "3610537360f5b9f042a87a9a892720e1834ce507a412590e703ec1c15f0117ec"}, "downloads": -1, "filename": "funpicker-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9841f115486b39c1390435d083e21db1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4542, "upload_time": "2018-08-21T08:10:28", "upload_time_iso_8601": "2018-08-21T08:10:28.954217Z", "url": "https://files.pythonhosted.org/packages/8b/4a/a18dc7061a254e0ba4c5495c31d89038cd3eaf06ce06056f45cca3ea2224/funpicker-0.1.3.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "9177e4f424fef7dfc3cae7123e241cb5", "sha256": "199fc95a66c9ab8e0f12e0969f004509e58c23503020f8b7455c44650f7fc521"}, "downloads": -1, "filename": "funpicker-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9177e4f424fef7dfc3cae7123e241cb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5578, "upload_time": "2018-08-23T19:09:06", "upload_time_iso_8601": "2018-08-23T19:09:06.142007Z", "url": "https://files.pythonhosted.org/packages/db/51/4054684818b4d6dc81e8033df77445e392fdd9fb565a48137c6a49797d35/funpicker-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8f745ed9bd228dddd2750c3714ca26a", "sha256": "ef2d2b3f93e9c83961f2ff283e35546ae9e7d9aeb3003022e9ffdba280a90bd7"}, "downloads": -1, "filename": "funpicker-0.2.tar.gz", "has_sig": false, "md5_digest": "e8f745ed9bd228dddd2750c3714ca26a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4957, "upload_time": "2018-08-23T19:09:08", "upload_time_iso_8601": "2018-08-23T19:09:08.958636Z", "url": "https://files.pythonhosted.org/packages/d0/22/81b5198f44c8f48951ce95ae9111175a870b06d674f0018386ea19f6c397/funpicker-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "6343300ac0f45ecefc6222b2de20ef91", "sha256": "93f21bba6bfc919d4e9852c480e230931f9e2c2acd96f1e65d4c7120dbad560c"}, "downloads": -1, "filename": "funpicker-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6343300ac0f45ecefc6222b2de20ef91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5592, "upload_time": "2018-08-24T05:12:08", "upload_time_iso_8601": "2018-08-24T05:12:08.756399Z", "url": "https://files.pythonhosted.org/packages/15/1c/fe27a0ad2e4d598120b0872beb23c35bb68685976b4678f6fd2d0bf6c989/funpicker-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb0f4aeb683b9d45ef7b2f5f9e1386bc", "sha256": "75d420bdf75e5448712e6f55c779ab59bddc7fbce7fe0fa0603220be0ba1d345"}, "downloads": -1, "filename": "funpicker-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fb0f4aeb683b9d45ef7b2f5f9e1386bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4955, "upload_time": "2018-08-24T05:12:09", "upload_time_iso_8601": "2018-08-24T05:12:09.982768Z", "url": "https://files.pythonhosted.org/packages/b4/49/6c4e7bc7acdce0bdc76cd84b46643d5ada06bde3c53c59c33233324d67ee/funpicker-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "76a2dabee51abdc2d91186e250a5041b", "sha256": "b57d8b243fa81e164e1b47587c2f1eac4d6cee0d5811dff0d4321d2ae3005f3c"}, "downloads": -1, "filename": "funpicker-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "76a2dabee51abdc2d91186e250a5041b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5594, "upload_time": "2018-08-28T02:55:48", "upload_time_iso_8601": "2018-08-28T02:55:48.722987Z", "url": "https://files.pythonhosted.org/packages/fd/df/3e6cb00960b873ee4be8e5648c0e97804e44208b0b89ec1e9a12cde869e2/funpicker-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40e10f2612b2aff7d020c2ca3242b4a5", "sha256": "0b7867bdd1b359e53243d17420d678233efa15d5c59cf4642234bcae286b0b94"}, "downloads": -1, "filename": "funpicker-0.2.2.tar.gz", "has_sig": false, "md5_digest": "40e10f2612b2aff7d020c2ca3242b4a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4968, "upload_time": "2018-08-28T02:55:50", "upload_time_iso_8601": "2018-08-28T02:55:50.225485Z", "url": "https://files.pythonhosted.org/packages/4a/67/155c025ef73dede9d516eaf87de9dabe83ad0332c2ae091be6feb9c1c358/funpicker-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76a2dabee51abdc2d91186e250a5041b", "sha256": "b57d8b243fa81e164e1b47587c2f1eac4d6cee0d5811dff0d4321d2ae3005f3c"}, "downloads": -1, "filename": "funpicker-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "76a2dabee51abdc2d91186e250a5041b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5594, "upload_time": "2018-08-28T02:55:48", "upload_time_iso_8601": "2018-08-28T02:55:48.722987Z", "url": "https://files.pythonhosted.org/packages/fd/df/3e6cb00960b873ee4be8e5648c0e97804e44208b0b89ec1e9a12cde869e2/funpicker-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40e10f2612b2aff7d020c2ca3242b4a5", "sha256": "0b7867bdd1b359e53243d17420d678233efa15d5c59cf4642234bcae286b0b94"}, "downloads": -1, "filename": "funpicker-0.2.2.tar.gz", "has_sig": false, "md5_digest": "40e10f2612b2aff7d020c2ca3242b4a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4968, "upload_time": "2018-08-28T02:55:50", "upload_time_iso_8601": "2018-08-28T02:55:50.225485Z", "url": "https://files.pythonhosted.org/packages/4a/67/155c025ef73dede9d516eaf87de9dabe83ad0332c2ae091be6feb9c1c358/funpicker-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:37 2020"}