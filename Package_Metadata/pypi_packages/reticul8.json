{"info": {"author": "xlfe", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## reticul8\n\n**Remotely articulated MCU endpoints for Python**\n\nreticul8 allows you to use Python to remotely control a compatible microcontroller \nsuch as an Arduino or ESP32.\n\nOn the Python side, it uses Python 3.5+ and asyncio\n\nOn the microcontroller side it uses [PJON](https://github.com/gioblu/PJON) \nand [PJON-cython](https://github.com/xlfe/PJON-cython) to communicate with \nthe micro controller - anything uC that can run PJON should be compatible.\n\nIt also uses [protocol buffers](reticul8.proto) to encapsulate the RPC messages.\n\nFor example, you could use the following setup to wirelessly control an\nESP32 using ESPNOW\n\n```\n                                          \n\"HUB\" (Running Python) <--Serial/UART--> NODE 1 (ESP32)\n                                          ^--ESPNOW --> NODE 2 (ESP32)\n                                          ^--ESPNOW --> NODE n (ESP32)\n```\n\n### Rationale\n\nreticul8 is designed to meet the following requirements :-\n\n* The system should be able to run \"complex application logic\" and be \"internet connected\"\n* Nodes in the system should be able to connect to the hub using a variety of mediums (wired and wireless)\n* Nodes should be able to run on common MCU hardware (Arduino and ESP32 targeted initially)\n* Nodes should be fast and reliable, but don't need to be \"smart\" - application logic can live elsewhere\n* Communication between nodes and controller should be fast and reliable (ie not over the internet!)\n\nNotice that one key requirement is the **absence of internet connectivity**. What happens to your home\nautomation system when the internet goes down? \n\nreticul8 is designed for a home automation system where the nodes are not (necessarily) directly connected\nto the internet. This also has the benefit of making communication between the controller/hub and the nodes much \nfaster than something like pub/sub (<70ms rtt for a two node setup with ESPNOW and ThroughSerial).\n\nBuilding on PJON as the communication medium between the nodes allows for plenty of options.\n\nreticul8 is designed to be part of a home automation system - specifically it allows nodes (eg an ESP32 or Arduino) to \noperate as dumb remote endpoints controlled by a smart controller (eg Python running on RaspberryPi).\n\nCompeting projects include :-\n\n* Mongoose OS - An open source Operating System for the Internet of Things\n* MicroPython - Python for microcontrollers\n* Zerynth - The Middleware for IoT using Python on Microcontrollers\n\nBut when I looked at the features I required, none of these seemed like a good fit. MicroPython and Zerynth seemed to \nbe too \"resource heavy\" to run a simple dumb endpoint. Mongoose OS was a pretty close fit but it still assumes your \nnodes are on the internet.\n\n### Arduino-like API:\n\nThe nodes (endpoints) are controlled using Remote Procedure Calls (RPC) defined with [protocolbuf](reticul8.proto).\n\nAn Arduino-like API is provided :-\n\n```python\nimport asyncio\nimport uvloop\nfrom reticul8 import rpc, pjon_strategies\nfrom reticul8.arduino import *\n\nclass Node(rpc.Node):\n\n    async def notify_startup(self):\n        print(\"Received startup message from {}\".format(self.device_id))\n\n        with self:\n\n            # schedule the inbuilt LED to blink 10 times\n            with Schedule(count=10, after_ms=100, every_ms=500):\n                await digitalWrite(22, LOW)\n\n            with Schedule(count=10, after_ms=600, every_ms=500):\n                await digitalWrite(22, HIGH)\n\n            await asyncio.sleep(10)\n\n            #manually blink the LED \n\n            await pinMode(22, OUTPUT)\n            for i in range(5):\n                await digitalWrite(22, HIGH)\n                await sleep(.1)\n                await digitalWrite(22, LOW)\n                await sleep(.1)\n                \n            #read the value of the pin\n            await pinMode(19, INPUT_PULLUP)\n            value = await digitalRead(19)\n            print(\"HIGH\" if value == HIGH else \"LOW\")\n\n            #ping the remote node\n            for i in range(10):\n                await ping()\n\n            #an ESP32 feature - built in PWM\n            await PWM_config(22)\n            while True:\n                await PWM_fade(pin=22, duty=0, fade_ms=500)\n                await sleep(1)\n                await PWM_fade(pin=22, duty=8192, fade_ms=500)\n                await sleep(1)\n\n\nclass PJON(pjon_strategies.SerialAsyncio):\n\n    def notify_connection_made(self):\n        print(\"ESP32 connected\")\n\n    def notify_connection_lost(self):\n        asyncio.get_event_loop().stop()\n        \n\nasyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\nloop = asyncio.get_event_loop()\ntransport = PJON(device_id=10, url=\"/dev/ttyUSB0\", baudrate=115200)\nNode(remote_device_id=11, transport=PJON)\nloop.run_forever()\nloop.close()\n```\n\n## Supported RPCs\n\nGPIO \n* pinMode()\n* digitalRead()\n* digitalWrite()\n* INPUT -> Watch pin for changes with callback on change, debounce\n\nI2C\n* i2c_read\n* i2c_write\n\nESP32 specific features:\n* PWM (ledc)\n* OTA Update \n\nreticul8 helpers\n* schedule commands to run repeatedly\n* run multiple commands \n\n\n## Planned features\n\n* Analog output\n* Analog input\n* Touch sensor (ESP32)\n* Pulse counter (ESP32)\n\n\n## Building an ESP-IDF component node\n\n[Create a new ESP-IDF project](https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html), \nand [add the Arduino component](https://github.com/espressif/arduino-esp32/blob/master/docs/esp-idf_component.md).\n\nAdd reticul8 as a component :-\n\n```bash\ncd components\ngit clone https://github.com/xlfe/reticul8\n```\n\nYour `main.cpp` just needs to setup your PJON buses, and pass these to the reticul8 class. Call setup and loop as per\nthe arduino functions.\n\n```cpp\n\n// Define Wifi config for ESPNOW \n\n#include \"esp_wifi_types.h\"\nstatic wifi_country_t wifi_country = {\n        cc:     \"AU\",\n        schan:  1,\n        nchan:  14,\n        max_tx_power: 80, // Level 10\n        policy: WIFI_COUNTRY_POLICY_MANUAL\n};\n\n#include \"Arduino.h\"\n\n# PJON defines\n\n#define PJON_INCLUDE_ANY\n#define PJON_INCLUDE_TSA\n#define PJON_INCLUDE_EN\n#define TSA_RESPONSE_TIME_OUT 100000\n\n#include <reticul8.h>\n\nPJON<Any> *bus = NULL;\nRETICUL8 *r8 = NULL;\n\nvoid loop() {\n    r8->loop();\n}\n\nvoid setup() {\n\n    Serial.begin(115200);\n    Serial.flush();\n\n    //EPSNOW\n    StrategyLink <ESPNOW> *link_esp = new StrategyLink<ESPNOW>;\n    PJON<Any> *bus_esp = new PJON<Any>();\n\n    bus_esp->set_asynchronous_acknowledge(false);\n    bus_esp->set_synchronous_acknowledge(true);\n    bus_esp->set_packet_id(true);\n    bus_esp->set_crc_32(true);\n    bus_esp->strategy.set_link(link_esp);\n\n    //Uncomment the line below to make a single bus device (eg leaf)\n    // otherwise the device is initialised as a bridge between esp-now and serial\n\n    // r8 = new RETICUL8(bus_esp, 10); /*\n\n\n    //Serial\n    StrategyLink <ThroughSerialAsync> *link_tsa = new StrategyLink<ThroughSerialAsync>;\n    link_tsa->strategy.set_serial(&Serial);\n\n    bus = new PJON<Any>(11);\n    bus->strategy.set_link(link_tsa);\n    bus->set_asynchronous_acknowledge(false);\n    bus->set_synchronous_acknowledge(false);\n    bus->set_packet_id(false);\n    bus->set_crc_32(false);\n\n    PJON<Any> *secondary[1] = {bus_esp};\n    r8 = new RETICUL8(bus, 10, secondary, 1);\n    //*/\n\n    r8->begin();\n}\n```\n\nFinally, make sure your `component.mk` (in same directory as main.cpp) includes the following :-\n\n```cmake\nCOMPONENT_DEPENDS += reticul8\n\n#Used for build timestamp\nCPPFLAGS += -D\"__COMPILE_TIME__ =`date '+%s'`\"\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xlfe/reticul8", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "reticul8", "package_url": "https://pypi.org/project/reticul8/", "platform": "", "project_url": "https://pypi.org/project/reticul8/", "project_urls": {"Homepage": "https://github.com/xlfe/reticul8"}, "release_url": "https://pypi.org/project/reticul8/0.1/", "requires_dist": null, "requires_python": "", "summary": "What do you get if you combine Python and and MCUs?", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>reticul8</h2>\n<p><strong>Remotely articulated MCU endpoints for Python</strong></p>\n<p>reticul8 allows you to use Python to remotely control a compatible microcontroller\nsuch as an Arduino or ESP32.</p>\n<p>On the Python side, it uses Python 3.5+ and asyncio</p>\n<p>On the microcontroller side it uses <a href=\"https://github.com/gioblu/PJON\" rel=\"nofollow\">PJON</a>\nand <a href=\"https://github.com/xlfe/PJON-cython\" rel=\"nofollow\">PJON-cython</a> to communicate with\nthe micro controller - anything uC that can run PJON should be compatible.</p>\n<p>It also uses <a href=\"reticul8.proto\" rel=\"nofollow\">protocol buffers</a> to encapsulate the RPC messages.</p>\n<p>For example, you could use the following setup to wirelessly control an\nESP32 using ESPNOW</p>\n<pre><code>                                          \n\"HUB\" (Running Python) &lt;--Serial/UART--&gt; NODE 1 (ESP32)\n                                          ^--ESPNOW --&gt; NODE 2 (ESP32)\n                                          ^--ESPNOW --&gt; NODE n (ESP32)\n</code></pre>\n<h3>Rationale</h3>\n<p>reticul8 is designed to meet the following requirements :-</p>\n<ul>\n<li>The system should be able to run \"complex application logic\" and be \"internet connected\"</li>\n<li>Nodes in the system should be able to connect to the hub using a variety of mediums (wired and wireless)</li>\n<li>Nodes should be able to run on common MCU hardware (Arduino and ESP32 targeted initially)</li>\n<li>Nodes should be fast and reliable, but don't need to be \"smart\" - application logic can live elsewhere</li>\n<li>Communication between nodes and controller should be fast and reliable (ie not over the internet!)</li>\n</ul>\n<p>Notice that one key requirement is the <strong>absence of internet connectivity</strong>. What happens to your home\nautomation system when the internet goes down?</p>\n<p>reticul8 is designed for a home automation system where the nodes are not (necessarily) directly connected\nto the internet. This also has the benefit of making communication between the controller/hub and the nodes much\nfaster than something like pub/sub (&lt;70ms rtt for a two node setup with ESPNOW and ThroughSerial).</p>\n<p>Building on PJON as the communication medium between the nodes allows for plenty of options.</p>\n<p>reticul8 is designed to be part of a home automation system - specifically it allows nodes (eg an ESP32 or Arduino) to\noperate as dumb remote endpoints controlled by a smart controller (eg Python running on RaspberryPi).</p>\n<p>Competing projects include :-</p>\n<ul>\n<li>Mongoose OS - An open source Operating System for the Internet of Things</li>\n<li>MicroPython - Python for microcontrollers</li>\n<li>Zerynth - The Middleware for IoT using Python on Microcontrollers</li>\n</ul>\n<p>But when I looked at the features I required, none of these seemed like a good fit. MicroPython and Zerynth seemed to\nbe too \"resource heavy\" to run a simple dumb endpoint. Mongoose OS was a pretty close fit but it still assumes your\nnodes are on the internet.</p>\n<h3>Arduino-like API:</h3>\n<p>The nodes (endpoints) are controlled using Remote Procedure Calls (RPC) defined with <a href=\"reticul8.proto\" rel=\"nofollow\">protocolbuf</a>.</p>\n<p>An Arduino-like API is provided :-</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uvloop</span>\n<span class=\"kn\">from</span> <span class=\"nn\">reticul8</span> <span class=\"kn\">import</span> <span class=\"n\">rpc</span><span class=\"p\">,</span> <span class=\"n\">pjon_strategies</span>\n<span class=\"kn\">from</span> <span class=\"nn\">reticul8.arduino</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">(</span><span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">notify_startup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Received startup message from </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">device_id</span><span class=\"p\">))</span>\n\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"p\">:</span>\n\n            <span class=\"c1\"># schedule the inbuilt LED to blink 10 times</span>\n            <span class=\"k\">with</span> <span class=\"n\">Schedule</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">after_ms</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">every_ms</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">):</span>\n                <span class=\"k\">await</span> <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">LOW</span><span class=\"p\">)</span>\n\n            <span class=\"k\">with</span> <span class=\"n\">Schedule</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">after_ms</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"n\">every_ms</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">):</span>\n                <span class=\"k\">await</span> <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">HIGH</span><span class=\"p\">)</span>\n\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n            <span class=\"c1\">#manually blink the LED </span>\n\n            <span class=\"k\">await</span> <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">OUTPUT</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n                <span class=\"k\">await</span> <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">HIGH</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">LOW</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                \n            <span class=\"c1\">#read the value of the pin</span>\n            <span class=\"k\">await</span> <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"n\">INPUT_PULLUP</span><span class=\"p\">)</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">digitalRead</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"HIGH\"</span> <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"n\">HIGH</span> <span class=\"k\">else</span> <span class=\"s2\">\"LOW\"</span><span class=\"p\">)</span>\n\n            <span class=\"c1\">#ping the remote node</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n                <span class=\"k\">await</span> <span class=\"n\">ping</span><span class=\"p\">()</span>\n\n            <span class=\"c1\">#an ESP32 feature - built in PWM</span>\n            <span class=\"k\">await</span> <span class=\"n\">PWM_config</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">)</span>\n            <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                <span class=\"k\">await</span> <span class=\"n\">PWM_fade</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">duty</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">fade_ms</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">PWM_fade</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">duty</span><span class=\"o\">=</span><span class=\"mi\">8192</span><span class=\"p\">,</span> <span class=\"n\">fade_ms</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PJON</span><span class=\"p\">(</span><span class=\"n\">pjon_strategies</span><span class=\"o\">.</span><span class=\"n\">SerialAsyncio</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">notify_connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ESP32 connected\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">notify_connection_lost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n        \n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop_policy</span><span class=\"p\">(</span><span class=\"n\">uvloop</span><span class=\"o\">.</span><span class=\"n\">EventLoopPolicy</span><span class=\"p\">())</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">transport</span> <span class=\"o\">=</span> <span class=\"n\">PJON</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"/dev/ttyUSB0\"</span><span class=\"p\">,</span> <span class=\"n\">baudrate</span><span class=\"o\">=</span><span class=\"mi\">115200</span><span class=\"p\">)</span>\n<span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">remote_device_id</span><span class=\"o\">=</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">transport</span><span class=\"o\">=</span><span class=\"n\">PJON</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Supported RPCs</h2>\n<p>GPIO</p>\n<ul>\n<li>pinMode()</li>\n<li>digitalRead()</li>\n<li>digitalWrite()</li>\n<li>INPUT -&gt; Watch pin for changes with callback on change, debounce</li>\n</ul>\n<p>I2C</p>\n<ul>\n<li>i2c_read</li>\n<li>i2c_write</li>\n</ul>\n<p>ESP32 specific features:</p>\n<ul>\n<li>PWM (ledc)</li>\n<li>OTA Update</li>\n</ul>\n<p>reticul8 helpers</p>\n<ul>\n<li>schedule commands to run repeatedly</li>\n<li>run multiple commands</li>\n</ul>\n<h2>Planned features</h2>\n<ul>\n<li>Analog output</li>\n<li>Analog input</li>\n<li>Touch sensor (ESP32)</li>\n<li>Pulse counter (ESP32)</li>\n</ul>\n<h2>Building an ESP-IDF component node</h2>\n<p><a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html\" rel=\"nofollow\">Create a new ESP-IDF project</a>,\nand <a href=\"https://github.com/espressif/arduino-esp32/blob/master/docs/esp-idf_component.md\" rel=\"nofollow\">add the Arduino component</a>.</p>\n<p>Add reticul8 as a component :-</p>\n<pre><span class=\"nb\">cd</span> components\ngit clone https://github.com/xlfe/reticul8\n</pre>\n<p>Your <code>main.cpp</code> just needs to setup your PJON buses, and pass these to the reticul8 class. Call setup and loop as per\nthe arduino functions.</p>\n<pre><span class=\"c1\">// Define Wifi config for ESPNOW </span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"esp_wifi_types.h\"</span><span class=\"cp\"></span>\n<span class=\"k\">static</span> <span class=\"n\">wifi_country_t</span> <span class=\"n\">wifi_country</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"nl\">cc</span><span class=\"p\">:</span>     <span class=\"s\">\"AU\"</span><span class=\"p\">,</span>\n        <span class=\"nl\">schan</span><span class=\"p\">:</span>  <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"nl\">nchan</span><span class=\"p\">:</span>  <span class=\"mi\">14</span><span class=\"p\">,</span>\n        <span class=\"nl\">max_tx_power</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"c1\">// Level 10</span>\n        <span class=\"nl\">policy</span><span class=\"p\">:</span> <span class=\"n\">WIFI_COUNTRY_POLICY_MANUAL</span>\n<span class=\"p\">};</span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"Arduino.h\"</span><span class=\"cp\"></span>\n\n<span class=\"cp\"># PJON defines</span>\n\n<span class=\"cp\">#define PJON_INCLUDE_ANY</span>\n<span class=\"cp\">#define PJON_INCLUDE_TSA</span>\n<span class=\"cp\">#define PJON_INCLUDE_EN</span>\n<span class=\"cp\">#define TSA_RESPONSE_TIME_OUT 100000</span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;reticul8.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">PJON</span><span class=\"o\">&lt;</span><span class=\"n\">Any</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"n\">RETICUL8</span> <span class=\"o\">*</span><span class=\"n\">r8</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">loop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">r8</span><span class=\"o\">-&gt;</span><span class=\"n\">loop</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"mi\">115200</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">//EPSNOW</span>\n    <span class=\"n\">StrategyLink</span> <span class=\"o\">&lt;</span><span class=\"n\">ESPNOW</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">link_esp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StrategyLink</span><span class=\"o\">&lt;</span><span class=\"n\">ESPNOW</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"n\">PJON</span><span class=\"o\">&lt;</span><span class=\"n\">Any</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">bus_esp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PJON</span><span class=\"o\">&lt;</span><span class=\"n\">Any</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n\n    <span class=\"n\">bus_esp</span><span class=\"o\">-&gt;</span><span class=\"n\">set_asynchronous_acknowledge</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">bus_esp</span><span class=\"o\">-&gt;</span><span class=\"n\">set_synchronous_acknowledge</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n    <span class=\"n\">bus_esp</span><span class=\"o\">-&gt;</span><span class=\"n\">set_packet_id</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n    <span class=\"n\">bus_esp</span><span class=\"o\">-&gt;</span><span class=\"n\">set_crc_32</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n    <span class=\"n\">bus_esp</span><span class=\"o\">-&gt;</span><span class=\"n\">strategy</span><span class=\"p\">.</span><span class=\"n\">set_link</span><span class=\"p\">(</span><span class=\"n\">link_esp</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">//Uncomment the line below to make a single bus device (eg leaf)</span>\n    <span class=\"c1\">// otherwise the device is initialised as a bridge between esp-now and serial</span>\n\n    <span class=\"c1\">// r8 = new RETICUL8(bus_esp, 10); /*</span>\n\n\n    <span class=\"c1\">//Serial</span>\n    <span class=\"n\">StrategyLink</span> <span class=\"o\">&lt;</span><span class=\"n\">ThroughSerialAsync</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">link_tsa</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StrategyLink</span><span class=\"o\">&lt;</span><span class=\"n\">ThroughSerialAsync</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n    <span class=\"n\">link_tsa</span><span class=\"o\">-&gt;</span><span class=\"n\">strategy</span><span class=\"p\">.</span><span class=\"n\">set_serial</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Serial</span><span class=\"p\">);</span>\n\n    <span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PJON</span><span class=\"o\">&lt;</span><span class=\"n\">Any</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">);</span>\n    <span class=\"n\">bus</span><span class=\"o\">-&gt;</span><span class=\"n\">strategy</span><span class=\"p\">.</span><span class=\"n\">set_link</span><span class=\"p\">(</span><span class=\"n\">link_tsa</span><span class=\"p\">);</span>\n    <span class=\"n\">bus</span><span class=\"o\">-&gt;</span><span class=\"n\">set_asynchronous_acknowledge</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">bus</span><span class=\"o\">-&gt;</span><span class=\"n\">set_synchronous_acknowledge</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">bus</span><span class=\"o\">-&gt;</span><span class=\"n\">set_packet_id</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">bus</span><span class=\"o\">-&gt;</span><span class=\"n\">set_crc_32</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n\n    <span class=\"n\">PJON</span><span class=\"o\">&lt;</span><span class=\"n\">Any</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">secondary</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">bus_esp</span><span class=\"p\">};</span>\n    <span class=\"n\">r8</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">RETICUL8</span><span class=\"p\">(</span><span class=\"n\">bus</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">secondary</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"c1\">//*/</span>\n\n    <span class=\"n\">r8</span><span class=\"o\">-&gt;</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Finally, make sure your <code>component.mk</code> (in same directory as main.cpp) includes the following :-</p>\n<pre><span class=\"err\">COMPONENT_DEPENDS</span> <span class=\"err\">+=</span> <span class=\"err\">reticul8</span>\n\n<span class=\"c\">#Used for build timestamp</span>\n<span class=\"err\">CPPFLAGS</span> <span class=\"err\">+=</span> <span class=\"err\">-D\"__COMPILE_TIME__</span> <span class=\"err\">=`date</span> <span class=\"err\">'+%s'`\"</span>\n</pre>\n\n          </div>"}, "last_serial": 4396395, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bfea16933b517e0661dd7c76f74ddc36", "sha256": "3fc7aae8c662c3053d7592ca1375dc594f80f919fc328a4e4b7f5152c41b0968"}, "downloads": -1, "filename": "reticul8-0.1.tar.gz", "has_sig": false, "md5_digest": "bfea16933b517e0661dd7c76f74ddc36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19901, "upload_time": "2018-10-20T03:34:50", "upload_time_iso_8601": "2018-10-20T03:34:50.823978Z", "url": "https://files.pythonhosted.org/packages/fe/72/ef604987e94e3a0737b1138bed194baffef763adf92d4911102aed055242/reticul8-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bfea16933b517e0661dd7c76f74ddc36", "sha256": "3fc7aae8c662c3053d7592ca1375dc594f80f919fc328a4e4b7f5152c41b0968"}, "downloads": -1, "filename": "reticul8-0.1.tar.gz", "has_sig": false, "md5_digest": "bfea16933b517e0661dd7c76f74ddc36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19901, "upload_time": "2018-10-20T03:34:50", "upload_time_iso_8601": "2018-10-20T03:34:50.823978Z", "url": "https://files.pythonhosted.org/packages/fe/72/ef604987e94e3a0737b1138bed194baffef763adf92d4911102aed055242/reticul8-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:26 2020"}