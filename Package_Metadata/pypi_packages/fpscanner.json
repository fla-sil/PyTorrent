{"info": {"author": "Alexey Niktin", "author_email": "nikialeksey@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "# Python driver for fingerprint sensors by Zhiantec - ZFM-20 series\r\n\r\n## Is your scanner can be managed by this library?\r\nIf your scanner is ZFM-20 or his cheap clone then it possible. I made this library inspired by \r\n[pyfingerprint](https://github.com/bastianraschke/pyfingerprint), so it may also work with ZFM-60, ZFM-70, ZFM-100,\r\nR303 and R305.\r\n\r\n## Terminology\r\n\r\n**Image**\r\n\r\n  Image is a Fingerprint scanned grayscale image. Image can be scanned and stored in volatile image buffer.\r\n\r\n**Characteristic**\r\n\r\n  Characteristic is a fingerprint characteristic. It represented by a bytearray. Characteristic can be created from \r\n  fingerprint image and stored in volatile characteristic buffer.\r\n\r\n**Template**\r\n\r\n  Template is a registered fingerprint model stored in scanner nonvolatile memory. \r\n  We can not see or feel the template, we only can ask scanner if characteristic look like some template \r\n  in scanner memory.\r\n\r\n## Working with sensor\r\n\r\n### Handshake\r\n\r\nFirst of all you need make a handshake to verify connection:\r\n ```python\r\nwith SerialPort(Serial(port='<COM1 or /dev/ttyUSB0>', baudrate=9600 * 6, timeout=2)) as port:\r\n    rq = RqCommand(port)\r\n    rs = RsSimple(port)\r\n    Handshake(rq, rs).make()\r\n```\r\nAs you see you will need to know serial port name of your scanner device. For windows users it may looks like `COM1`,\r\nfor unix users it may looks like `/dev/ttyUSB0`.\r\n\r\n### Fingerprint image\r\n\r\nMore complex task - make an image of your fingerprint:\r\n```python\r\nwith SerialPort(Serial(port='...', baudrate=9600 * 6, timeout=2)) as port:\r\n    rq = RqCommand(port)\r\n    rs = RsSimple(port)\r\n    print 'Waiting for finger...'\r\n    while not Scan(rq, rs).is_scanned():\r\n        pass\r\n    print 'Finger has been scanned! Downloading the finger image...'\r\n    image = UpImage(rq, rs).image()\r\n    image.show()\r\n```\r\n\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nikialeksey/fpscanner", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fpscanner", "package_url": "https://pypi.org/project/fpscanner/", "platform": "", "project_url": "https://pypi.org/project/fpscanner/", "project_urls": {"Homepage": "https://github.com/nikialeksey/fpscanner"}, "release_url": "https://pypi.org/project/fpscanner/0.1.0/", "requires_dist": ["Pillow (>=5.2.0)", "pyserial (>=3.4)"], "requires_python": "", "summary": "", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python driver for fingerprint sensors by Zhiantec - ZFM-20 series</h1>\n<h2>Is your scanner can be managed by this library?</h2>\n<p>If your scanner is ZFM-20 or his cheap clone then it possible. I made this library inspired by\n<a href=\"https://github.com/bastianraschke/pyfingerprint\" rel=\"nofollow\">pyfingerprint</a>, so it may also work with ZFM-60, ZFM-70, ZFM-100,\nR303 and R305.</p>\n<h2>Terminology</h2>\n<p><strong>Image</strong></p>\n<p>Image is a Fingerprint scanned grayscale image. Image can be scanned and stored in volatile image buffer.</p>\n<p><strong>Characteristic</strong></p>\n<p>Characteristic is a fingerprint characteristic. It represented by a bytearray. Characteristic can be created from\nfingerprint image and stored in volatile characteristic buffer.</p>\n<p><strong>Template</strong></p>\n<p>Template is a registered fingerprint model stored in scanner nonvolatile memory.\nWe can not see or feel the template, we only can ask scanner if characteristic look like some template\nin scanner memory.</p>\n<h2>Working with sensor</h2>\n<h3>Handshake</h3>\n<p>First of all you need make a handshake to verify connection:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">SerialPort</span><span class=\"p\">(</span><span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'&lt;COM1 or /dev/ttyUSB0&gt;'</span><span class=\"p\">,</span> <span class=\"n\">baudrate</span><span class=\"o\">=</span><span class=\"mi\">9600</span> <span class=\"o\">*</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">port</span><span class=\"p\">:</span>\n   <span class=\"n\">rq</span> <span class=\"o\">=</span> <span class=\"n\">RqCommand</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">)</span>\n   <span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">RsSimple</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">)</span>\n   <span class=\"n\">Handshake</span><span class=\"p\">(</span><span class=\"n\">rq</span><span class=\"p\">,</span> <span class=\"n\">rs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">()</span>\n</pre>\n<p>As you see you will need to know serial port name of your scanner device. For windows users it may looks like <code>COM1</code>,\nfor unix users it may looks like <code>/dev/ttyUSB0</code>.</p>\n<h3>Fingerprint image</h3>\n<p>More complex task - make an image of your fingerprint:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">SerialPort</span><span class=\"p\">(</span><span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'...'</span><span class=\"p\">,</span> <span class=\"n\">baudrate</span><span class=\"o\">=</span><span class=\"mi\">9600</span> <span class=\"o\">*</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">port</span><span class=\"p\">:</span>\n    <span class=\"n\">rq</span> <span class=\"o\">=</span> <span class=\"n\">RqCommand</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">)</span>\n    <span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">RsSimple</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'Waiting for finger...'</span>\n    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">Scan</span><span class=\"p\">(</span><span class=\"n\">rq</span><span class=\"p\">,</span> <span class=\"n\">rs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_scanned</span><span class=\"p\">():</span>\n        <span class=\"k\">pass</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'Finger has been scanned! Downloading the finger image...'</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">UpImage</span><span class=\"p\">(</span><span class=\"n\">rq</span><span class=\"p\">,</span> <span class=\"n\">rs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">()</span>\n    <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 4208550, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2b3a6e6871312bbb03e9c13858c6e9de", "sha256": "4ebe77aa14795529635a8935959305ca7c3f958476a9d05e05c8d977f706ea1a"}, "downloads": -1, "filename": "fpscanner-0.1.0-py2-none-any.whl", "has_sig": true, "md5_digest": "2b3a6e6871312bbb03e9c13858c6e9de", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 55198, "upload_time": "2018-08-26T15:26:59", "upload_time_iso_8601": "2018-08-26T15:26:59.081499Z", "url": "https://files.pythonhosted.org/packages/b5/8f/ce9a886883b660d3d2eead383c1a4acbbcf4882002e29cc203ae72f799d0/fpscanner-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa1782c9eb9088910b5e14367a93ec11", "sha256": "858de932e7ebd276515729aba30cae9e28559871eae9c52d9b698034231a1cd6"}, "downloads": -1, "filename": "fpscanner-0.1.0.tar.gz", "has_sig": true, "md5_digest": "fa1782c9eb9088910b5e14367a93ec11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9839, "upload_time": "2018-08-26T15:27:00", "upload_time_iso_8601": "2018-08-26T15:27:00.858051Z", "url": "https://files.pythonhosted.org/packages/ff/e4/3bb001a93c42910102183cdc3c63153930538e4296918d8320a9c1a34521/fpscanner-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b3a6e6871312bbb03e9c13858c6e9de", "sha256": "4ebe77aa14795529635a8935959305ca7c3f958476a9d05e05c8d977f706ea1a"}, "downloads": -1, "filename": "fpscanner-0.1.0-py2-none-any.whl", "has_sig": true, "md5_digest": "2b3a6e6871312bbb03e9c13858c6e9de", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 55198, "upload_time": "2018-08-26T15:26:59", "upload_time_iso_8601": "2018-08-26T15:26:59.081499Z", "url": "https://files.pythonhosted.org/packages/b5/8f/ce9a886883b660d3d2eead383c1a4acbbcf4882002e29cc203ae72f799d0/fpscanner-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa1782c9eb9088910b5e14367a93ec11", "sha256": "858de932e7ebd276515729aba30cae9e28559871eae9c52d9b698034231a1cd6"}, "downloads": -1, "filename": "fpscanner-0.1.0.tar.gz", "has_sig": true, "md5_digest": "fa1782c9eb9088910b5e14367a93ec11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9839, "upload_time": "2018-08-26T15:27:00", "upload_time_iso_8601": "2018-08-26T15:27:00.858051Z", "url": "https://files.pythonhosted.org/packages/ff/e4/3bb001a93c42910102183cdc3c63153930538e4296918d8320a9c1a34521/fpscanner-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:36 2020"}