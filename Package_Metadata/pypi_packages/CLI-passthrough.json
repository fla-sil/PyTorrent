{"info": {"author": "Terminal Labs", "author_email": "solutions@terminallabs.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Topic :: Utilities"], "description": "# README\n\n## Install\n\nInstall with `pip install cli-passthrough` / `pip install -e .` if you have this repo.\n\n\n## How to Use\n\n\nFrom the terminal:\n\n```bash\n$ cli-passthrough echo 'hi'\nhi\n$ echo 'hi'\nhi\n$ cli-passthrough python --error\nUnknown option: --\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nTry `python -h' for more information.\n$ python --error\nUnknown option: --\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nTry `python -h' for more information.\n```\n\nFrom Python:\n```ipython\nIn [1]: from cli_passthrough import cli_passthrough\n\nIn [2]: cli_passthrough(\"echo 'hi'\")\nhi\nOut[2]: 0\n\nIn [3]: cli_passthrough(\"python --error\")\nUnknown option: --\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nTry `python -h' for more information.\nOut[3]: 2\n\n```\n\n## What does it do?\n\n\nThis project provides an entry point `cli-passthrough` in the terminal that accepts any amount of parameters, and runs those parameters as it's own command. Except in a few special cases, this will output to the terminal exactly what the command would have, including any formatting done with escape sequences. Both the combined stdout and stderr are logged, with order preserved, in `logs/history.log`, and the stderr by itself is logged in `/logs/stderr.log`. These log files are written to in realtime. The output to the terminal is also in realtime. The original intent was to dump all output back to the screen, while saving both stdout and stderr. Future work will be to return those outputs to Python as well.\n\nThis project was motivated by making a wrapper on another application which needed to be used over the CLI. I wanted to also use the wrapper from the CLI as well. I wanted to see the output of the program I was invoking in real-time, in the same formatting, and log everything. In other words, I wanted the following:\n\n1. ANY COMMAND: Run nearly any command given to it.\n2. FLEXIBLE LOGGING: Capture stdout and stderr independently for flexible logging.\n3. ORDER PESERVATION: Preserve order of stdout and stderr\n4. REALTIME OUTPUT: Output to the screen in realtime, i.e. don't wait for the command to exit before dumping to the screen.\n5. EXIT STATUS: Capture exit code\n6. FORMATTING PRESERVED: Preserve ANSI escape sequences so most things are still formatted as if not run through this passthrough.\n\n\n|                              | 1 | 2 | 3 | 4 | 5 | 6   | note |\n|------------------------------|---|---|---|---|---|-----|------|\n| os.system                    | Y | N | Y | Y | Y | Y   | Doesn't capture output at all |\n| os.popen                     | N | N | Y | N | N | Y   | Deprecated & obsolete |\n| os.exec*                     | Y | N | - | N | N | N   | Really not the intended use |\n| pexpect                      | Y | N | Y | Y | Y | Y   | Bad logging |\n| subprocess.popen + threads   | Y | Y | Y | N | Y | Y/N | Doesn't have real-time output because it's often dependent on buffer flushes of blocks. |\n| subprocess.popen + pty       | Y | Y | Y | Y | Y | Y   | We got it! |\n\n\n## Known Limitations\n\nThis implementation of subprocess.popen + pty currently has the following limitations:\n\n1. It doesn't run *every* command. Commands that need input from the user do not work, such as `ssh` or `ipython`.\n\n1. It makes assumptions about the terminal size. It would be better if it detected the terminal the python is ran in, and use the same dimensions.\n\nThis is very much largely adapted (copied) from [this SO post](https://stackoverflow.com/a/31953436). I just wrapped it up into an importable function, gave it a CLI itself, and made basic logging to illustrate the point. Feel free to copy/paste/tweek it yourself.\n\n**If you find something better** please let me know! I'd be more than happy to upgrade or replace this. This is simply the best I've found so far.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/terminal-labs/cli-passthrough", "keywords": "cli utilities logging pty subprocess terminal", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "CLI-passthrough", "package_url": "https://pypi.org/project/CLI-passthrough/", "platform": "", "project_url": "https://pypi.org/project/CLI-passthrough/", "project_urls": {"Homepage": "https://github.com/terminal-labs/cli-passthrough"}, "release_url": "https://pypi.org/project/CLI-passthrough/0.1.3/", "requires_dist": ["click", "ipdb ; extra == 'dev'", "pre-commit ; extra == 'dev'"], "requires_python": "", "summary": "Importable CLI-passthrough with bells and whistles.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>README</h1>\n<h2>Install</h2>\n<p>Install with <code>pip install cli-passthrough</code> / <code>pip install -e .</code> if you have this repo.</p>\n<h2>How to Use</h2>\n<p>From the terminal:</p>\n<pre>$ cli-passthrough <span class=\"nb\">echo</span> <span class=\"s1\">'hi'</span>\nhi\n$ <span class=\"nb\">echo</span> <span class=\"s1\">'hi'</span>\nhi\n$ cli-passthrough python --error\nUnknown option: --\nusage: python <span class=\"o\">[</span>option<span class=\"o\">]</span> ... <span class=\"o\">[</span>-c cmd <span class=\"p\">|</span> -m mod <span class=\"p\">|</span> file <span class=\"p\">|</span> -<span class=\"o\">]</span> <span class=\"o\">[</span>arg<span class=\"o\">]</span> ...\nTry <span class=\"sb\">`</span>python -h<span class=\"s1\">' for more information.</span>\n<span class=\"s1\">$ python --error</span>\n<span class=\"s1\">Unknown option: --</span>\n<span class=\"s1\">usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...</span>\n<span class=\"s1\">Try `python -h'</span> <span class=\"k\">for</span> more information.\n</pre>\n<p>From Python:</p>\n<pre>In [1]: from cli_passthrough import cli_passthrough\n\nIn [2]: cli_passthrough(\"echo 'hi'\")\nhi\nOut[2]: 0\n\nIn [3]: cli_passthrough(\"python --error\")\nUnknown option: --\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nTry `python -h' for more information.\nOut[3]: 2\n</pre>\n<h2>What does it do?</h2>\n<p>This project provides an entry point <code>cli-passthrough</code> in the terminal that accepts any amount of parameters, and runs those parameters as it's own command. Except in a few special cases, this will output to the terminal exactly what the command would have, including any formatting done with escape sequences. Both the combined stdout and stderr are logged, with order preserved, in <code>logs/history.log</code>, and the stderr by itself is logged in <code>/logs/stderr.log</code>. These log files are written to in realtime. The output to the terminal is also in realtime. The original intent was to dump all output back to the screen, while saving both stdout and stderr. Future work will be to return those outputs to Python as well.</p>\n<p>This project was motivated by making a wrapper on another application which needed to be used over the CLI. I wanted to also use the wrapper from the CLI as well. I wanted to see the output of the program I was invoking in real-time, in the same formatting, and log everything. In other words, I wanted the following:</p>\n<ol>\n<li>ANY COMMAND: Run nearly any command given to it.</li>\n<li>FLEXIBLE LOGGING: Capture stdout and stderr independently for flexible logging.</li>\n<li>ORDER PESERVATION: Preserve order of stdout and stderr</li>\n<li>REALTIME OUTPUT: Output to the screen in realtime, i.e. don't wait for the command to exit before dumping to the screen.</li>\n<li>EXIT STATUS: Capture exit code</li>\n<li>FORMATTING PRESERVED: Preserve ANSI escape sequences so most things are still formatted as if not run through this passthrough.</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>os.system</td>\n<td>Y</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Doesn't capture output at all</td>\n</tr>\n<tr>\n<td>os.popen</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>Deprecated &amp; obsolete</td>\n</tr>\n<tr>\n<td>os.exec*</td>\n<td>Y</td>\n<td>N</td>\n<td>-</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Really not the intended use</td>\n</tr>\n<tr>\n<td>pexpect</td>\n<td>Y</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Bad logging</td>\n</tr>\n<tr>\n<td>subprocess.popen + threads</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n<td>Y</td>\n<td>Y/N</td>\n<td>Doesn't have real-time output because it's often dependent on buffer flushes of blocks.</td>\n</tr>\n<tr>\n<td>subprocess.popen + pty</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>We got it!</td>\n</tr></tbody></table>\n<h2>Known Limitations</h2>\n<p>This implementation of subprocess.popen + pty currently has the following limitations:</p>\n<ol>\n<li>\n<p>It doesn't run <em>every</em> command. Commands that need input from the user do not work, such as <code>ssh</code> or <code>ipython</code>.</p>\n</li>\n<li>\n<p>It makes assumptions about the terminal size. It would be better if it detected the terminal the python is ran in, and use the same dimensions.</p>\n</li>\n</ol>\n<p>This is very much largely adapted (copied) from <a href=\"https://stackoverflow.com/a/31953436\" rel=\"nofollow\">this SO post</a>. I just wrapped it up into an importable function, gave it a CLI itself, and made basic logging to illustrate the point. Feel free to copy/paste/tweek it yourself.</p>\n<p><strong>If you find something better</strong> please let me know! I'd be more than happy to upgrade or replace this. This is simply the best I've found so far.</p>\n\n          </div>"}, "last_serial": 6084233, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "53f3eaef5e423a859e9f5356eba908e3", "sha256": "98bf5e8142049424cb08b654e4c0646b9e6bd50e1196f8a555ce54a54d3597a0"}, "downloads": -1, "filename": "CLI_passthrough-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "53f3eaef5e423a859e9f5356eba908e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5039, "upload_time": "2018-05-09T19:45:44", "upload_time_iso_8601": "2018-05-09T19:45:44.241443Z", "url": "https://files.pythonhosted.org/packages/ec/32/4109fd6e896172da80a7b2fccd8280c6f63c8aab689e685e51cb20f50f8c/CLI_passthrough-0.1-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3763a9032086bbea90d740344bbcd90d", "sha256": "5c2ba6bcd70921068246c90bfb4c591070b1d0b919fc0cc6610271e0dc290ad2"}, "downloads": -1, "filename": "CLI_passthrough-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3763a9032086bbea90d740344bbcd90d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5298, "upload_time": "2018-05-09T19:50:45", "upload_time_iso_8601": "2018-05-09T19:50:45.353730Z", "url": "https://files.pythonhosted.org/packages/be/c2/d7b80c4a7d417b9ff441ff7fad6e5014fec3e690d8de1d287d6416a5d3df/CLI_passthrough-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "75fe400b205feb2534ec5566ec9c821a", "sha256": "006f15aad1c034bdb9b8bb0cbdb8e476de9fb96d39cc2f6e2606d768234ed180"}, "downloads": -1, "filename": "CLI_passthrough-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "75fe400b205feb2534ec5566ec9c821a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5211, "upload_time": "2018-05-09T21:44:48", "upload_time_iso_8601": "2018-05-09T21:44:48.431518Z", "url": "https://files.pythonhosted.org/packages/b1/6b/ad79fcfb12983b584bd300f6b269c26fc5a7770107f13aeab0b987b2d76a/CLI_passthrough-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b1ab4cb63382e7309c1b071241a7a4e4", "sha256": "b71b7f777d4b18ed3b6d4b232e9b33a3e065291bc5e254c6df0b443a3eda617f"}, "downloads": -1, "filename": "CLI-passthrough-0.1.3.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "b1ab4cb63382e7309c1b071241a7a4e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6921, "upload_time": "2019-11-06T01:43:23", "upload_time_iso_8601": "2019-11-06T01:43:23.703712Z", "url": "https://files.pythonhosted.org/packages/f6/73/a26855d13e32b14b00d2f093a1de881275f2a17146ca502bc076d7de7280/CLI-passthrough-0.1.3.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba9b222f5a4de3f1e08f36db6c2cb0ef", "sha256": "ab407862f520baacfedff6ab6bcb9985f56832e6bb1d2f7deb111d9bd305deb5"}, "downloads": -1, "filename": "CLI_passthrough-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ba9b222f5a4de3f1e08f36db6c2cb0ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6624, "upload_time": "2019-11-06T01:43:22", "upload_time_iso_8601": "2019-11-06T01:43:22.606526Z", "url": "https://files.pythonhosted.org/packages/53/f9/fab7e9a395d0f7825d6d19662ebad060ac3f0686d4b9b8ae70d1dd1a8212/CLI_passthrough-0.1.3-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1ab4cb63382e7309c1b071241a7a4e4", "sha256": "b71b7f777d4b18ed3b6d4b232e9b33a3e065291bc5e254c6df0b443a3eda617f"}, "downloads": -1, "filename": "CLI-passthrough-0.1.3.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "b1ab4cb63382e7309c1b071241a7a4e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6921, "upload_time": "2019-11-06T01:43:23", "upload_time_iso_8601": "2019-11-06T01:43:23.703712Z", "url": "https://files.pythonhosted.org/packages/f6/73/a26855d13e32b14b00d2f093a1de881275f2a17146ca502bc076d7de7280/CLI-passthrough-0.1.3.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba9b222f5a4de3f1e08f36db6c2cb0ef", "sha256": "ab407862f520baacfedff6ab6bcb9985f56832e6bb1d2f7deb111d9bd305deb5"}, "downloads": -1, "filename": "CLI_passthrough-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ba9b222f5a4de3f1e08f36db6c2cb0ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6624, "upload_time": "2019-11-06T01:43:22", "upload_time_iso_8601": "2019-11-06T01:43:22.606526Z", "url": "https://files.pythonhosted.org/packages/53/f9/fab7e9a395d0f7825d6d19662ebad060ac3f0686d4b9b8ae70d1dd1a8212/CLI_passthrough-0.1.3-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:18:57 2020"}