{"info": {"author": "Keen IO", "author_email": "team@keen.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Keen IO Official Python Client Library\n======================================\n\n|build-status| |pypi-version|\n\nThis is the official Python Client for the `Keen IO <https://keen.io/>`_ API. The\nKeen IO API lets developers build analytics features directly into their apps.\n\nThis is still under active development. Stay tuned for improvements!\n\nInstallation\n------------\n\nUse pip to install!\n\n::\n\n    pip install keen\n\nThis client is known to work on Python 2.7, 3.5, 3.6, 3.7 and 3.8.\n\nFor versions of Python < 2.7.9, you\u2019ll need to install pyasn1, ndg-httpsclient, pyOpenSSL.\n\nUsage\n-----\n\nTo use this client with the Keen IO API, you have to configure your Keen IO Project ID and its access\nkeys (if you need an account, `sign up here <https://keen.io/>`_ - it's free).\n\nSetting a write key is required for publishing events. Setting a read key is required for\nrunning queries. The recommended way to set this configuration information is via the environment.\nThe keys you can set are `KEEN_PROJECT_ID`, `KEEN_WRITE_KEY`, `KEEN_READ_KEY`, and `KEEN_MASTER_KEY`.\nAs per the `Principle of Least Privilege <https://en.wikipedia.org/wiki/Principle_of_least_privilege>`_, it's recommended that you not use the master_key if not \nnecessary. This SDK will expect and use the precise key for a given operation, and throw an\nexception in cases of misuse.\n\nIf you don't want to use environment variables for some reason, you can directly set values as follows:\n\n.. code-block:: python\n\n    keen.project_id = \"xxxx\"\n    keen.write_key = \"yyyy\"\n    keen.read_key = \"zzzz\"\n    keen.master_key = \"abcd\" # not required for typical usage\n\n\nFor information on how to configure unique client instances, take a look at the\n`Advanced Usage <#advanced-usage>`_ section below.\n\nSend Events to Keen IO\n``````````````````````\n\nOnce you've set `KEEN_PROJECT_ID` and `KEEN_WRITE_KEY`, sending events is simple:\n\n.. code-block:: python\n\n    keen.add_event(\"sign_ups\", {\n        \"username\": \"lloyd\",\n        \"referred_by\": \"harry\"\n    })\n\nData Enrichment\n```````````````\n\nA data enrichment is a powerful add-on to enrich the data you're already streaming to Keen IO by pre-processing the data and adding helpful data properties. To activate add-ons, you simply add some new properties within the \"keen\" namespace in your events. Detailed documentation for the configuration of our add-ons is available `here <https://keen.io/docs/api/python#data-enrichment>`_.\n\nHere is an example of using the `URL parser <https://keen.io/docs/streams/data-enrichment-overview/#addon-url-parser>`_:\n\n.. code-block:: python\n\n    keen.add_event(\"requests\", {\n        \"page_url\" : \"http://my-website.com/cool/link?source=twitter&foo=bar/#title\",\n        \"keen\" : {\n            \"addons\" : [\n            {\n                \"name\" : \"keen:url_parser\",\n                \"input\" : {\n                    \"url\" : \"page_url\"\n                },\n                \"output\" : \"parsed_page_url\"\n              }\n            ]\n        }\n    })\n\nKeen IO will parse the URL for you and that would equivalent to:\n\n.. code-block:: python\n\n    keen.add_event(\"request\", {\n        \"page_url\" : \"http://my-website.com/cool/link?source=twitter&foo=bar/#title\",\n        \"parsed_page_url\": {\n            \"protocol\" : \"http\",\n            \"domain\" : \"my-website.com\",\n            \"path\" : \"/cool/link\",\n            \"anchor\" : \"title\",\n            \"query_string\" : {\n                \"source\" : \"twitter\",\n                \"foo\" : \"bar\"\n            }\n        }\n    })\n\nHere is another example of using the `Datetime parser <https://keen.io/docs/api/?shell#datetime-parser>`_. Let's assume you want to do a deeper analysis on the \"purchases\" event by day of the week (Monday, Tuesday, Wednesday, etc.) and other interesting Datetime components. You can use \"keen.timestamp\" property that is included in your event automatically.\n\n.. code-block:: python\n\n    keen.add_event(\"purchases\", {\n        \"keen\": {\n            \"addons\": [\n            {\n                \"name\": \"keen:date_time_parser\",\n                \"input\": {\n                    \"date_time\" : \"keen.timestamp\"\n                },\n                \"output\": \"timestamp_info\"\n            }\n            ]\n        },\n        \"price\": 500\n    })\n\nOther Data Enrichment add-ons are located in the `API reference docs <https://keen.io/docs/api/python#data-enrichment>`_.\n\nSend Batch Events to Keen IO\n````````````````````````````\n\nYou can upload Events in a batch, like so:\n\n.. code-block:: python\n\n    # uploads 4 events total - 2 to the \"sign_ups\" collection and 2 to the \"purchases\" collection\n    keen.add_events({\n        \"sign_ups\": [\n            { \"username\": \"nameuser1\" },\n            { \"username\": \"nameuser2\" }\n        ],\n        \"purchases\": [\n            { \"price\": 5 },\n            { \"price\": 6 }\n        ]\n    })\n\n\nThat's it! After running your code, check your Keen IO Project to see the event/events has been added.\n\nDo analysis with Keen IO\n````````````````````````\n\nHere are some examples of querying. Let's assume you've added some events to the \"purchases\" collection.\nFor more code samples, take a look at Keen's `docs <https://keen.io/docs/api/?python#>`_\n\n.. code-block:: python\n\n    keen.count(\"purchases\", timeframe=\"this_14_days\") # => 100\n    keen.sum(\"purchases\", target_property=\"price\", timeframe=\"this_14_days\") # => 10000\n    keen.minimum(\"purchases\", target_property=\"price\", timeframe=\"this_14_days\") # => 20\n    keen.maximum(\"purchases\", target_property=\"price\", timeframe=\"this_14_days\") # => 100\n    keen.average(\"purchases\", target_property=\"price\", timeframe=\"this_14_days\") # => 49.2\n\n    keen.sum(\"purchases\", target_property=\"price\", group_by=\"item.id\", timeframe=\"this_14_days\") # => [{ \"item.id\": 123, \"result\": 240 }, { ... }]\n\n    keen.count_unique(\"purchases\", target_property=\"user.id\", timeframe=\"this_14_days\") # => 3\n    keen.select_unique(\"purchases\", target_property=\"user.email\", timeframe=\"this_14_days\") # => [\"bob@aol.com\", \"joe@yahoo.biz\"]\n\n    # Alpha support for ordering your results and limiting what is returned is now supported in the Python SDK.\n    # Keep in mind that even if you limit your results with the \"limit\" keyword, you are still querying over the\n    # normal amount of data, and thus your compute costs will not change. Limit only changes what is displayed.\n\n    # The keyword \"limit\" must be a positive integer. The keyword \"order_by\" must be a dictionary with a required\n    # \"property_name\" specified and optionally a \"direction\". The \"property_name\" must be one of the \"group_by\"\n    # properties or \"result\". The \"direction\" may be either keen.direction.DESCENDING or keen.direction.ASCENDING.\n    # Ascending is the default direction used if no \"direction\" is supplied. No other keywords may be used in the\n    # \"order_by\" dictionary.\n\n    # You may only use \"order_by\" if you supply a \"group_by\". You may only use \"limit\" if you supply an \"order_by\".\n\n    # This will run a count query with results grouped by zip code.\n    # It will display only the top ten zip code results based upon how many times users in those zip codes logged in.\n    keen.count(\"purchases\", group_by=\"zip_code\", timeframe=\"this_14_days\", limit=10,\n               order_by={\"property_name\": \"result\", \"direction\": keen.direction.DESCENDING})\n\n    keen.extraction(\"purchases\", timeframe=\"today\") # => [{ \"price\" => 20, ... }, { ... }]\n\n    keen.multi_analysis(\n        \"purchases\",\n        analyses={\n            \"total\":{\n                \"analysis_type\": \"sum\",\n                \"target_property\": \"price\"\n            },\n            \"average\":{\n                \"analysis_type\": \"average\",\n                \"target_property\": \"price\"\n            }\n        },\n        timeframe='this_14_days'\n    ) # => {\"total\":10329.03, \"average\":933.93}\n\n    step1 = {\n        \"event_collection\": \"sign_ups\",\n        \"actor_property\": \"user.email\"\n    }\n    step2 = {\n        \"event_collection\": \"purchases\",\n        \"actor_property\": \"user.email\"\n    }\n    keen.funnel([step1, step2], timeframe=\"today\") # => [2039, 201]\n\n\nTo return the full API response from a funnel analysis (as opposed to the singular \"result\" key), set `all_keys=True`.\n\nFor example, `keen.funnel([step1, step2], timeframe=\"today\", all_keys=True)` would return \"result\", \"actors\" and \"steps\" keys.\n\nDelete Events\n`````````````\n\nThe Keen IO API allows you to `delete events <https://keen.io/docs/api/#delete-events>`_ from event collections, optionally supplying filters, timeframe or timezone to narrow the scope of what you would like to delete.\n\nYou'll need to set your master_key.\n\n.. code-block:: python\n\n    keen.delete_events(\"event_collection\", filters=[{\"property_name\": 'username', \"operator\": 'eq', \"property_value\": 'Bob'}])\n\nAdvanced Usage\n``````````````\n\nSee below for more options.\n\nCheck Batch Upload Response For Errors\n''''''''''''''''''''''''''''''''''''''\n\nWhen you upload events in a batch, some of them may succeed and some of them may have errors. The Keen API returns information on each. Here's an example:\n\nUpload code (remember, Keen IO doesn't allow periods in property names):\n\n.. code-block:: python\n\n    response = keen.add_events({\n        \"sign_ups\": [\n            { \"username\": \"nameuser1\" },\n            { \"username\": \"nameuser2\", \"an.invalid.property.name\": 1 }\n        ],\n        \"purchases\": [\n            { \"price\": 5 },\n            { \"price\": 6 }\n        ]\n    })\n\nThat code would result in the following API JSON response:\n\n.. code-block:: javascript\n\n    {\n        \"sign_ups\": [\n            {\"success\": true},\n            {\"success\": false, \"error\": {\"name\": \"some_error_name\", \"description\": \"some longer description\"}}\n        ],\n        \"purchases\": [\n            {\"success\": true},\n            {\"success\": true}\n        ]\n    }\n\nSo in python, to check on the results of your batch, you'd have code like so:\n\n.. code-block:: python\n\n    batch = {\n        \"sign_ups\": [\n            { \"username\": \"nameuser1\" },\n            { \"username\": \"nameuser2\", \"an.invalid.property.name\": 1 }\n        ],\n        \"purchases\": [\n            { \"price\": 5 },\n            { \"price\": 6 }\n        ]\n    }\n    response = keen.add_events(batch)\n\n    for collection in response:\n        collection_result = response[collection]\n        event_count = 0\n        for individual_result in collection_result:\n            if not individual_result[\"success\"]:\n                print(\"Event had error! Collection: '{}'. Event body: '{}'.\".format(collection, batch[collection][event_count]))\n            event_count += 1\n\nConfigure Unique Client Instances\n'''''''''''''''''''''''''''''''''\n\nIf you intend to send events or query from different projects within the same python file, you'll need to set up\nunique client instances (one per project). You can do this by assigning an instance of KeenClient to a variable like so:\n\n.. code-block:: python\n\n    from keen.client import KeenClient\n\n    client = KeenClient(\n        project_id=\"xxxx\",  # your project ID for collecting cycling data\n        write_key=\"yyyy\",\n        read_key=\"zzzz\",\n        master_key=\"abcd\" # not required for typical usage\n    )\n\n    client_hike = KeenClient(\n        project_id=\"xxxx\",  # your project ID for collecting hiking data (different from the one above)\n        write_key=\"yyyy\",\n        read_key=\"zzzz\",\n        master_key=\"abcd\" # not required for typical usage\n    )\n\n\nYou can send events like this:\n\n.. code-block:: python\n\n    # add an event to an event collection in your cycling project\n    client.add_event(...)\n\n    # or add an event to an event collection in your hiking project\n    client_hike.add_event(...)\n\n\nSimilarly, you can query events like this:\n\n.. code-block:: python\n\n    client.count(...)\n\n\nSaved Queries\n'''''''''''''\n\nYou can manage your `saved queries <https://keen.io/docs/api/?shell#saved-queries>`_ from the Keen python client.\n\n.. code-block:: python\n\n    # Create your KeenClient\n    from keen.client import KeenClient\n\n    client = KeenClient(\n        project_id=\"xxxx\",  # your project ID\n        read_key=\"zzzz\",\n        master_key=\"abcd\" # Most Saved Query functionality requires master_key\n    )\n\n    # Create a saved query\n    saved_query_attributes = {\n        # NOTE : For now, refresh_rate must explicitly be set to 0 unless you\n        # intend to create a Cached Query.\n        \"refresh_rate\": 0,\n        \"query\": {\n            \"analysis_type\": \"count\",\n            \"event_collection\": \"purchases\",\n            \"timeframe\": \"this_2_weeks\",\n            \"filters\": [{\n                \"property_name\": \"price\",\n                \"operator\": \"gte\",\n                \"property_value\": 1.00\n            }]\n        }\n    }\n\n    client.saved_queries.create(\"saved-query-name\", saved_query_attributes)\n\n    # Get all saved queries\n    client.saved_queries.all()\n\n    # Get one saved query\n    client.saved_queries.get(\"saved-query-name\")\n\n    # Get saved query with results\n    client.saved_queries.results(\"saved-query-name\")\n\n    # NOTE : Updating Saved Queries requires sending the entire query definition. Any attribute not\n    # sent is interpreted as being cleared/removed. This means that properties set via another\n    # client, including the Projects Explorer Web UI, will be lost this way.\n    # \n    # The update() function makes this easier by allowing client code to just specify the\n    # properties that need updating. To do this, it will retrieve the existing query definition\n    # first, which means there will be two HTTP requests. Use update_full() in code that already\n    # has a full query definition that can reasonably be expected to be current.\n\n    # Update a saved query to now be a cached query with the minimum refresh rate of 4 hrs...\n\n    # ...using partial update:\n    client.saved_queries.update(\"saved-query-name\", { \"refresh_rate\": 14400 })\n\n    # ...using full update, if we've already fetched the query definition:\n    saved_query_attributes[\"refresh_rate\"] = 14400\n    client.saved_queries.update_full(\"saved-query-name\", saved_query_attributes)\n\n    # Update a saved query to a new resource name...\n\n    # ...using partial update:\n    client.saved_queries.update(\"saved-query-name\", { \"query_name\": \"cached-query-name\" })\n\n    # ...using full update, if we've already fetched the query definition or have it lying around\n    # for whatever reason. We send \"refresh_rate\" again, along with the entire definition, or else\n    # it would be reset:\n    saved_query_attributes[\"query_name\"] = \"cached-query-name\"\n    client.saved_queries.update_full(\"saved-query-name\", saved_query_attributes)\n\n    # Delete a saved query (use the new resource name since we just changed it)\n    client.saved_queries.delete(\"cached-query-name\")\n\nCached Datasets\n'''''''''''''''\n.. code-block:: python\n\n    # Create your KeenClient\n    from keen.client import KeenClient\n\n    client = KeenClient(\n        project_id=\"xxxx\",  # your project ID\n        read_key=\"zzzz\",\n        master_key=\"abcd\" \n    )\n\n    # Create a Cached Dataset\n    dataset_name = \"NEW_DATASET\"\n    display_name = \"My new dataset\"\n    query = {\n        \"project_id\": \"PROJECT ID\",\n        \"analysis_type\": \"count\",\n        \"event_collection\": \"purchases\",\n        \"filters\": [\n            {\n                \"property_name\": \"price\",\n                \"operator\": \"gte\",\n                \"property_value\": 100\n            }\n        ],\n        \"timeframe\": \"this_500_days\",\n        \"timezone\": None,\n        \"interval\": \"daily\",\n        \"group_by\": [\"ip_geo_info.country\"]\n    }\n    index_by = \"product.id\"\n    client.cached_datasets.create(\n        dataset_name,\n        query,\n        index_by,\n        display_name\n    )\n\n    # Get all Cached Datasets\n    client.cached_datasets.all()\n\n    # Get one Cached Dataset\n    client.cached_datasets.get(dataset_name)\n\n    # Retrieve Cached Dataset results\n    index_by = \"a_project_id\"\n    timeframe =\"this_2_hours\"\n    client.cached_datasets.results(\n        dataset_name,\n        index_by,\n        timeframe\n    )\n\n    # Using an absolute timeframe\n    timeframe = {\n        \"start\": \"2018-11-02T00:00:00.000Z\",\n        \"end\": \"2018-11-02T02:00:00.000Z\"\n    }\n    client.cached_datasets.results(\n        dataset_name,\n        index_by,\n        timeframe\n    )\n\n    # Using multiple index_by values\n    index_by = {\n        \"project.id\": \"a_project_id\",\n        \"project.foo\": \"bar\"\n    }\n    client.cached_datasets.results(\n        \"dataset_with_multiple_indexes\",\n        index_by,\n        timeframe\n    )\n\n    # Delete a Cached Dataset\n    client.cached_datasets.delete(dataset_name)\n\nOverwriting event timestamps\n''''''''''''''''''''''''''''\n\nTwo time-related properties are included in your event automatically. The properties \u201ckeen.timestamp\u201d\nand \u201ckeen.created_at\u201d are set at the time your event is recorded. You have the ability to overwrite the\nkeen.timestamp property. This could be useful, for example, if you are backfilling historical data. Be\nsure to use `ISO-8601 Format <https://keen.io/docs/event-data-modeling/event-data-intro/#iso-8601-format>`_.\n\nKeen stores all date and time information in UTC!\n\n.. code-block:: python\n\n    keen.add_event(\"sign_ups\", {\n        \"keen\": {\n            \"timestamp\": \"2012-07-06T02:09:10.141Z\"\n        },\n        \"username\": \"lloyd\",\n        \"referred_by\": \"harry\"\n    })\n\n\nGet from Keen IO with a Timeout\n'''''''''''''''''''''''''''''''\n\nBy default, GET requests will timeout after 305 seconds. If you want to manually override this, you can\ncreate a KeenClient with the \"get_timeout\" parameter. This client will fail GETs if no bytes have been\nreturned by the server in the specified time. For example:\n\n.. code-block:: python\n\n    from keen.client import KeenClient\n\n    client = KeenClient(\n        project_id=\"xxxx\",\n        write_key=\"yyyy\",\n        read_key=\"zzzz\",\n        get_timeout=100\n    )\n\n\nThis will cause queries such as count(), sum(), and average() to timeout after 100 seconds. If this timeout\nlimit is hit, a requests.Timeout will be raised. Due to a bug in the requests library, you might also see an\nSSLError (`#1294 <https://github.com/kennethreitz/requests/issues/1294>`_)\n\nSend to Keen IO with a Timeout\n''''''''''''''''''''''''''''''\n\nBy default, POST requests will timeout after 305 seconds. If you want to manually override this, you can\ncreate a KeenClient with the \"post_timeout\" parameter. This client will fail POSTs if no bytes have been\nreturned by the server in the specified time. For example:\n\n.. code-block:: python\n\n    from keen.client import KeenClient\n\n    client = KeenClient(\n        project_id=\"xxxx\",\n        write_key=\"yyyy\",\n        post_timeout=100\n    )\n\n\nThis will cause both add_event() and add_events() to timeout after 100 seconds. If this timeout limit is hit, a requests.Timeout will be raised. Due to a bug in the requests library, you might also see an SSLError (https://github.com/kennethreitz/requests/issues/1294)\n\nCreate Access Keys\n''''''''''''''''''\n\nThe Python client enables the creation and manipulation of `Access Keys <https://keen.io/docs/access/access-keys>`_. Examples:\n\n.. code-block:: python\n\n    from keen.client import KeenClient\n    # You could also simply use: import keen\n    # If you do this, you will need your project ID and master key set in environment variables.\n\n    client = KeenClient(\n        project_id=\"xxxx\",\n        master_key=\"zzzz\"\n    )\n\n    # Create an access key. See: https://keen.io/docs/access/access-keys/#customizing-your-access-key\n    client.create_access_key(name=\"Dave_Barry_Key\", is_active=True, permitted=[\"writes\", \"cached_queries\"],\n                             options={\"cached_queries\": {\"allowed\": [\"dave_barry_in_cyberspace_sales\"]}})\n\n    # Display all access keys associated with this client's project.\n    client.list_access_keys()\n\n    # Get details on a particular access key.\n    client.get_access_key(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n    # Revoke (disable) an access key.\n    client.revoke_access_key(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n    # Unrevoke (re-enable) an access key.\n    client.unrevoke_access_key(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n    # Delete an access key\n    client.delete_access_key(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n    # Change just the name of an access key.\n    client.update_access_key_name(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", name=\"Some_New_Name\")\n\n    # Add new access key permissions to existing permissions on a given key.\n    # In this case the set of permissions currently contains \"writes\" and \"cached_queries\".\n    # This function call keeps the old permissions and adds \"queries\" to that set.\n    #     (\"writes\", \"cached_queries\") + (\"queries\") = (\"writes\", \"cached_queries\", \"queries\")\n    client.add_access_key_permissions(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", permissions=[\"queries\"])\n\n    # Remove one or more access key permissions from a given key.\n    # In this case the set of permissions currently contains \"writes\", \"cached_queries\", and \"queries\".\n    # This function call will keep the old permissions not explicitly removed here.\n    # So we will remove both \"writes\" and \"queries\" from the set, leaving only \"cached_queries\".\n    #     (\"writes\", \"cached_queries\", \"queries\") - (\"writes\", \"queries\") = (\"cached_queries\")\n    client.remove_access_key_permissions(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", permissions=[\"writes\", \"queries\"])\n\n    # We can also perform a full update on the permissions, replacing all existing permissions with a new list.\n    # In this case our existing permissions contains only \"cached_queries\".\n    # We will replace this set with the \"writes\" permission with this function call.\n    #     (\"cached_queries\") REPLACE-WITH (\"writes\") = (\"writes\")\n    client.update_access_key_permissions(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", permissions=[\"writes\"])\n\n    # Replace all existing key options with this new options object.\n    client.update_access_key_options(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", options={\"writes\": {\n        \"autofill\": {\n            \"customer\": {\n                \"id\": \"93iskds39kd93id\",\n                \"name\": \"Ada Corp.\"\n            }\n        }\n    }})\n\n    # Replace everything but the key ID with what is supplied here.\n    # If a field is not supplied here, it will be set to a blank value.\n    # In this case, no options are supplied, so all options will be removed.\n    client.update_access_key_full(key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", name=\"Strong_Bad\", is_active=True, permitted=[\"queries\"])\n\n\nCreate Scoped Keys (**Deprecated**)\n'''''''''''''''''''''''''''''''''''\n\nThe Python client enables you to create `Scoped Keys <https://keen.io/docs/security/#scoped-key>`_ easily, but Access Keys are better! \nIf you need to use them anyway, for legacy reasons, here's how:\n\n.. code-block:: python\n\n    from keen.client import KeenClient\n    from keen import scoped_keys\n\n    api_key = KEEN_MASTER_KEY\n\n    write_key = scoped_keys.encrypt(api_key, {\"allowed_operations\": [\"write\"]})\n    read_key = scoped_keys.encrypt(api_key, {\"allowed_operations\": [\"read\"]})\n\n\n`write_key` and `read_key` now contain scoped keys based on your master API key.\n\nTesting\n-------\n\nTo run tests:\n\n::\n\n    python setup.py test\n\n\nChangelog\n---------\n\nThis project is in alpha stage at version 0.6.1. See the full `CHANGELOG <./CHANGELOG.rst>`_.\n\n\nQuestions & Support\n-------------------\n\nIf you have any questions, bugs, or suggestions, please\nreport them via Github `Issues <./issues>`_. We'd love to hear your feedback and ideas!\n\nContributing\n------------\n\nThis is an open source project and we love involvement from the community! Hit us up with pull requests and issues. \n\n`Learn more about contributing to this project <./CONTRIBUTING.md>`_.\n\n.. |build-status| image:: https://img.shields.io/travis/keenlabs/KeenClient-Python.svg?maxAge=600\n    :target: http://travis-ci.org/keenlabs/KeenClient-Python\n    :alt: Build status\n\n.. |pypi-version| image:: https://img.shields.io/pypi/v/keen.svg?maxAge=600 \n    :target: https://pypi.python.org/pypi/keen/\n    :alt: Keen on PyPI", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/keenlabs/KeenClient-Python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "keen", "package_url": "https://pypi.org/project/keen/", "platform": "", "project_url": "https://pypi.org/project/keen/", "project_urls": {"Homepage": "https://github.com/keenlabs/KeenClient-Python"}, "release_url": "https://pypi.org/project/keen/0.6.1/", "requires_dist": null, "requires_python": "", "summary": "Python Client for Keen IO", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://travis-ci.org/keenlabs/KeenClient-Python\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60bca0151ea40681b5b5aa43b95d28cff9191674/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6b65656e6c6162732f4b65656e436c69656e742d507974686f6e2e7376673f6d61784167653d363030\"></a> <a href=\"https://pypi.python.org/pypi/keen/\" rel=\"nofollow\"><img alt=\"Keen on PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b540c150b3f25dfa9802a033962579bdf5b1efba/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b65656e2e7376673f6d61784167653d363030\"></a></p>\n<p>This is the official Python Client for the <a href=\"https://keen.io/\" rel=\"nofollow\">Keen IO</a> API. The\nKeen IO API lets developers build analytics features directly into their apps.</p>\n<p>This is still under active development. Stay tuned for improvements!</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use pip to install!</p>\n<pre>pip install keen\n</pre>\n<p>This client is known to work on Python 2.7, 3.5, 3.6, 3.7 and 3.8.</p>\n<p>For versions of Python &lt; 2.7.9, you\u2019ll need to install pyasn1, ndg-httpsclient, pyOpenSSL.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use this client with the Keen IO API, you have to configure your Keen IO Project ID and its access\nkeys (if you need an account, <a href=\"https://keen.io/\" rel=\"nofollow\">sign up here</a> - it\u2019s free).</p>\n<p>Setting a write key is required for publishing events. Setting a read key is required for\nrunning queries. The recommended way to set this configuration information is via the environment.\nThe keys you can set are <cite>KEEN_PROJECT_ID</cite>, <cite>KEEN_WRITE_KEY</cite>, <cite>KEEN_READ_KEY</cite>, and <cite>KEEN_MASTER_KEY</cite>.\nAs per the <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\" rel=\"nofollow\">Principle of Least Privilege</a>, it\u2019s recommended that you not use the master_key if not\nnecessary. This SDK will expect and use the precise key for a given operation, and throw an\nexception in cases of misuse.</p>\n<p>If you don\u2019t want to use environment variables for some reason, you can directly set values as follows:</p>\n<pre><span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">project_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"xxxx\"</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">write_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"yyyy\"</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">read_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"zzzz\"</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">master_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"abcd\"</span> <span class=\"c1\"># not required for typical usage</span>\n</pre>\n<p>For information on how to configure unique client instances, take a look at the\n<a href=\"#advanced-usage\" rel=\"nofollow\">Advanced Usage</a> section below.</p>\n<div id=\"send-events-to-keen-io\">\n<h3>Send Events to Keen IO</h3>\n<p>Once you\u2019ve set <cite>KEEN_PROJECT_ID</cite> and <cite>KEEN_WRITE_KEY</cite>, sending events is simple:</p>\n<pre><span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s2\">\"sign_ups\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"lloyd\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"referred_by\"</span><span class=\"p\">:</span> <span class=\"s2\">\"harry\"</span>\n<span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"data-enrichment\">\n<h3>Data Enrichment</h3>\n<p>A data enrichment is a powerful add-on to enrich the data you\u2019re already streaming to Keen IO by pre-processing the data and adding helpful data properties. To activate add-ons, you simply add some new properties within the \u201ckeen\u201d namespace in your events. Detailed documentation for the configuration of our add-ons is available <a href=\"https://keen.io/docs/api/python#data-enrichment\" rel=\"nofollow\">here</a>.</p>\n<p>Here is an example of using the <a href=\"https://keen.io/docs/streams/data-enrichment-overview/#addon-url-parser\" rel=\"nofollow\">URL parser</a>:</p>\n<pre><span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s2\">\"requests\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"page_url\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"http://my-website.com/cool/link?source=twitter&amp;foo=bar/#title\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"keen\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"addons\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"keen:url_parser\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"input\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"url\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"page_url\"</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">\"output\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"parsed_page_url\"</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Keen IO will parse the URL for you and that would equivalent to:</p>\n<pre><span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s2\">\"request\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"page_url\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"http://my-website.com/cool/link?source=twitter&amp;foo=bar/#title\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"parsed_page_url\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"protocol\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"http\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"domain\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"my-website.com\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"path\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"/cool/link\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"anchor\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"title\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"query_string\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"source\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"twitter\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"foo\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Here is another example of using the <a href=\"https://keen.io/docs/api/?shell#datetime-parser\" rel=\"nofollow\">Datetime parser</a>. Let\u2019s assume you want to do a deeper analysis on the \u201cpurchases\u201d event by day of the week (Monday, Tuesday, Wednesday, etc.) and other interesting Datetime components. You can use \u201ckeen.timestamp\u201d property that is included in your event automatically.</p>\n<pre><span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"keen\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"addons\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"keen:date_time_parser\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"input\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"date_time\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"keen.timestamp\"</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"s2\">\"timestamp_info\"</span>\n        <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"mi\">500</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Other Data Enrichment add-ons are located in the <a href=\"https://keen.io/docs/api/python#data-enrichment\" rel=\"nofollow\">API reference docs</a>.</p>\n</div>\n<div id=\"send-batch-events-to-keen-io\">\n<h3>Send Batch Events to Keen IO</h3>\n<p>You can upload Events in a batch, like so:</p>\n<pre><span class=\"c1\"># uploads 4 events total - 2 to the \"sign_ups\" collection and 2 to the \"purchases\" collection</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">add_events</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"sign_ups\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameuser1\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameuser2\"</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"purchases\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span> <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</pre>\n<p>That\u2019s it! After running your code, check your Keen IO Project to see the event/events has been added.</p>\n</div>\n<div id=\"do-analysis-with-keen-io\">\n<h3>Do analysis with Keen IO</h3>\n<p>Here are some examples of querying. Let\u2019s assume you\u2019ve added some events to the \u201cpurchases\u201d collection.\nFor more code samples, take a look at Keen\u2019s <a href=\"https://keen.io/docs/api/?python#\" rel=\"nofollow\">docs</a></p>\n<pre><span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 100</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">target_property</span><span class=\"o\">=</span><span class=\"s2\">\"price\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 10000</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">target_property</span><span class=\"o\">=</span><span class=\"s2\">\"price\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 20</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">maximum</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">target_property</span><span class=\"o\">=</span><span class=\"s2\">\"price\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 100</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">target_property</span><span class=\"o\">=</span><span class=\"s2\">\"price\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 49.2</span>\n\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">target_property</span><span class=\"o\">=</span><span class=\"s2\">\"price\"</span><span class=\"p\">,</span> <span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"s2\">\"item.id\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; [{ \"item.id\": 123, \"result\": 240 }, { ... }]</span>\n\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">count_unique</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">target_property</span><span class=\"o\">=</span><span class=\"s2\">\"user.id\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 3</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">select_unique</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">target_property</span><span class=\"o\">=</span><span class=\"s2\">\"user.email\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; [\"bob@aol.com\", \"joe@yahoo.biz\"]</span>\n\n<span class=\"c1\"># Alpha support for ordering your results and limiting what is returned is now supported in the Python SDK.</span>\n<span class=\"c1\"># Keep in mind that even if you limit your results with the \"limit\" keyword, you are still querying over the</span>\n<span class=\"c1\"># normal amount of data, and thus your compute costs will not change. Limit only changes what is displayed.</span>\n\n<span class=\"c1\"># The keyword \"limit\" must be a positive integer. The keyword \"order_by\" must be a dictionary with a required</span>\n<span class=\"c1\"># \"property_name\" specified and optionally a \"direction\". The \"property_name\" must be one of the \"group_by\"</span>\n<span class=\"c1\"># properties or \"result\". The \"direction\" may be either keen.direction.DESCENDING or keen.direction.ASCENDING.</span>\n<span class=\"c1\"># Ascending is the default direction used if no \"direction\" is supplied. No other keywords may be used in the</span>\n<span class=\"c1\"># \"order_by\" dictionary.</span>\n\n<span class=\"c1\"># You may only use \"order_by\" if you supply a \"group_by\". You may only use \"limit\" if you supply an \"order_by\".</span>\n\n<span class=\"c1\"># This will run a count query with results grouped by zip code.</span>\n<span class=\"c1\"># It will display only the top ten zip code results based upon how many times users in those zip codes logged in.</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"s2\">\"zip_code\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"this_14_days\"</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n           <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"property_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"result\"</span><span class=\"p\">,</span> <span class=\"s2\">\"direction\"</span><span class=\"p\">:</span> <span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">direction</span><span class=\"o\">.</span><span class=\"n\">DESCENDING</span><span class=\"p\">})</span>\n\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">extraction</span><span class=\"p\">(</span><span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"today\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; [{ \"price\" =&gt; 20, ... }, { ... }]</span>\n\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">multi_analysis</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span>\n    <span class=\"n\">analyses</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"total\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"analysis_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sum\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"target_property\"</span><span class=\"p\">:</span> <span class=\"s2\">\"price\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"average\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"analysis_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"average\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"target_property\"</span><span class=\"p\">:</span> <span class=\"s2\">\"price\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s1\">'this_14_days'</span>\n<span class=\"p\">)</span> <span class=\"c1\"># =&gt; {\"total\":10329.03, \"average\":933.93}</span>\n\n<span class=\"n\">step1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"event_collection\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sign_ups\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"actor_property\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user.email\"</span>\n<span class=\"p\">}</span>\n<span class=\"n\">step2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"event_collection\"</span><span class=\"p\">:</span> <span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"actor_property\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user.email\"</span>\n<span class=\"p\">}</span>\n<span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">funnel</span><span class=\"p\">([</span><span class=\"n\">step1</span><span class=\"p\">,</span> <span class=\"n\">step2</span><span class=\"p\">],</span> <span class=\"n\">timeframe</span><span class=\"o\">=</span><span class=\"s2\">\"today\"</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; [2039, 201]</span>\n</pre>\n<p>To return the full API response from a funnel analysis (as opposed to the singular \u201cresult\u201d key), set <cite>all_keys=True</cite>.</p>\n<p>For example, <cite>keen.funnel([step1, step2], timeframe=\u201dtoday\u201d, all_keys=True)</cite> would return \u201cresult\u201d, \u201cactors\u201d and \u201csteps\u201d keys.</p>\n</div>\n<div id=\"delete-events\">\n<h3>Delete Events</h3>\n<p>The Keen IO API allows you to <a href=\"https://keen.io/docs/api/#delete-events\" rel=\"nofollow\">delete events</a> from event collections, optionally supplying filters, timeframe or timezone to narrow the scope of what you would like to delete.</p>\n<p>You\u2019ll need to set your master_key.</p>\n<pre><span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">delete_events</span><span class=\"p\">(</span><span class=\"s2\">\"event_collection\"</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s2\">\"property_name\"</span><span class=\"p\">:</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s2\">\"operator\"</span><span class=\"p\">:</span> <span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"s2\">\"property_value\"</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">}])</span>\n</pre>\n</div>\n<div id=\"id2\">\n<h3>Advanced Usage</h3>\n<p>See below for more options.</p>\n<div id=\"check-batch-upload-response-for-errors\">\n<h4>Check Batch Upload Response For Errors</h4>\n<p>When you upload events in a batch, some of them may succeed and some of them may have errors. The Keen API returns information on each. Here\u2019s an example:</p>\n<p>Upload code (remember, Keen IO doesn\u2019t allow periods in property names):</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">add_events</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"sign_ups\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameuser1\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameuser2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"an.invalid.property.name\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"purchases\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span> <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</pre>\n<p>That code would result in the following API JSON response:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"sign_ups\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"success\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"success\"</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"some_error_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"description\"</span><span class=\"o\">:</span> <span class=\"s2\">\"some longer description\"</span><span class=\"p\">}}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"purchases\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"success\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"success\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>So in python, to check on the results of your batch, you\u2019d have code like so:</p>\n<pre><span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"sign_ups\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameuser1\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameuser2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"an.invalid.property.name\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"purchases\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span> <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">add_events</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">collection</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n    <span class=\"n\">collection_result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"n\">collection</span><span class=\"p\">]</span>\n    <span class=\"n\">event_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">individual_result</span> <span class=\"ow\">in</span> <span class=\"n\">collection_result</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">individual_result</span><span class=\"p\">[</span><span class=\"s2\">\"success\"</span><span class=\"p\">]:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Event had error! Collection: '</span><span class=\"si\">{}</span><span class=\"s2\">'. Event body: '</span><span class=\"si\">{}</span><span class=\"s2\">'.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"p\">[</span><span class=\"n\">collection</span><span class=\"p\">][</span><span class=\"n\">event_count</span><span class=\"p\">]))</span>\n        <span class=\"n\">event_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre>\n</div>\n<div id=\"configure-unique-client-instances\">\n<h4>Configure Unique Client Instances</h4>\n<p>If you intend to send events or query from different projects within the same python file, you\u2019ll need to set up\nunique client instances (one per project). You can do this by assigning an instance of KeenClient to a variable like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keen.client</span> <span class=\"kn\">import</span> <span class=\"n\">KeenClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">KeenClient</span><span class=\"p\">(</span>\n    <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"s2\">\"xxxx\"</span><span class=\"p\">,</span>  <span class=\"c1\"># your project ID for collecting cycling data</span>\n    <span class=\"n\">write_key</span><span class=\"o\">=</span><span class=\"s2\">\"yyyy\"</span><span class=\"p\">,</span>\n    <span class=\"n\">read_key</span><span class=\"o\">=</span><span class=\"s2\">\"zzzz\"</span><span class=\"p\">,</span>\n    <span class=\"n\">master_key</span><span class=\"o\">=</span><span class=\"s2\">\"abcd\"</span> <span class=\"c1\"># not required for typical usage</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">client_hike</span> <span class=\"o\">=</span> <span class=\"n\">KeenClient</span><span class=\"p\">(</span>\n    <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"s2\">\"xxxx\"</span><span class=\"p\">,</span>  <span class=\"c1\"># your project ID for collecting hiking data (different from the one above)</span>\n    <span class=\"n\">write_key</span><span class=\"o\">=</span><span class=\"s2\">\"yyyy\"</span><span class=\"p\">,</span>\n    <span class=\"n\">read_key</span><span class=\"o\">=</span><span class=\"s2\">\"zzzz\"</span><span class=\"p\">,</span>\n    <span class=\"n\">master_key</span><span class=\"o\">=</span><span class=\"s2\">\"abcd\"</span> <span class=\"c1\"># not required for typical usage</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can send events like this:</p>\n<pre><span class=\"c1\"># add an event to an event collection in your cycling project</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or add an event to an event collection in your hiking project</span>\n<span class=\"n\">client_hike</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Similarly, you can query events like this:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"saved-queries\">\n<h4>Saved Queries</h4>\n<p>You can manage your <a href=\"https://keen.io/docs/api/?shell#saved-queries\" rel=\"nofollow\">saved queries</a> from the Keen python client.</p>\n<pre><span class=\"c1\"># Create your KeenClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keen.client</span> <span class=\"kn\">import</span> <span class=\"n\">KeenClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">KeenClient</span><span class=\"p\">(</span>\n    <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"s2\">\"xxxx\"</span><span class=\"p\">,</span>  <span class=\"c1\"># your project ID</span>\n    <span class=\"n\">read_key</span><span class=\"o\">=</span><span class=\"s2\">\"zzzz\"</span><span class=\"p\">,</span>\n    <span class=\"n\">master_key</span><span class=\"o\">=</span><span class=\"s2\">\"abcd\"</span> <span class=\"c1\"># Most Saved Query functionality requires master_key</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a saved query</span>\n<span class=\"n\">saved_query_attributes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># NOTE : For now, refresh_rate must explicitly be set to 0 unless you</span>\n    <span class=\"c1\"># intend to create a Cached Query.</span>\n    <span class=\"s2\">\"refresh_rate\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"query\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"analysis_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"count\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"event_collection\"</span><span class=\"p\">:</span> <span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"timeframe\"</span><span class=\"p\">:</span> <span class=\"s2\">\"this_2_weeks\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"filters\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">\"property_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"price\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"operator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"gte\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"property_value\"</span><span class=\"p\">:</span> <span class=\"mf\">1.00</span>\n        <span class=\"p\">}]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"saved-query-name\"</span><span class=\"p\">,</span> <span class=\"n\">saved_query_attributes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get all saved queries</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get one saved query</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"saved-query-name\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get saved query with results</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">(</span><span class=\"s2\">\"saved-query-name\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># NOTE : Updating Saved Queries requires sending the entire query definition. Any attribute not</span>\n<span class=\"c1\"># sent is interpreted as being cleared/removed. This means that properties set via another</span>\n<span class=\"c1\"># client, including the Projects Explorer Web UI, will be lost this way.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># The update() function makes this easier by allowing client code to just specify the</span>\n<span class=\"c1\"># properties that need updating. To do this, it will retrieve the existing query definition</span>\n<span class=\"c1\"># first, which means there will be two HTTP requests. Use update_full() in code that already</span>\n<span class=\"c1\"># has a full query definition that can reasonably be expected to be current.</span>\n\n<span class=\"c1\"># Update a saved query to now be a cached query with the minimum refresh rate of 4 hrs...</span>\n\n<span class=\"c1\"># ...using partial update:</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s2\">\"saved-query-name\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">\"refresh_rate\"</span><span class=\"p\">:</span> <span class=\"mi\">14400</span> <span class=\"p\">})</span>\n\n<span class=\"c1\"># ...using full update, if we've already fetched the query definition:</span>\n<span class=\"n\">saved_query_attributes</span><span class=\"p\">[</span><span class=\"s2\">\"refresh_rate\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">14400</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">update_full</span><span class=\"p\">(</span><span class=\"s2\">\"saved-query-name\"</span><span class=\"p\">,</span> <span class=\"n\">saved_query_attributes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Update a saved query to a new resource name...</span>\n\n<span class=\"c1\"># ...using partial update:</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s2\">\"saved-query-name\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">\"query_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cached-query-name\"</span> <span class=\"p\">})</span>\n\n<span class=\"c1\"># ...using full update, if we've already fetched the query definition or have it lying around</span>\n<span class=\"c1\"># for whatever reason. We send \"refresh_rate\" again, along with the entire definition, or else</span>\n<span class=\"c1\"># it would be reset:</span>\n<span class=\"n\">saved_query_attributes</span><span class=\"p\">[</span><span class=\"s2\">\"query_name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"cached-query-name\"</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">update_full</span><span class=\"p\">(</span><span class=\"s2\">\"saved-query-name\"</span><span class=\"p\">,</span> <span class=\"n\">saved_query_attributes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete a saved query (use the new resource name since we just changed it)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">saved_queries</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"cached-query-name\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"cached-datasets\">\n<h4>Cached Datasets</h4>\n<pre><span class=\"c1\"># Create your KeenClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keen.client</span> <span class=\"kn\">import</span> <span class=\"n\">KeenClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">KeenClient</span><span class=\"p\">(</span>\n    <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"s2\">\"xxxx\"</span><span class=\"p\">,</span>  <span class=\"c1\"># your project ID</span>\n    <span class=\"n\">read_key</span><span class=\"o\">=</span><span class=\"s2\">\"zzzz\"</span><span class=\"p\">,</span>\n    <span class=\"n\">master_key</span><span class=\"o\">=</span><span class=\"s2\">\"abcd\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a Cached Dataset</span>\n<span class=\"n\">dataset_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"NEW_DATASET\"</span>\n<span class=\"n\">display_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"My new dataset\"</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"project_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"PROJECT ID\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"analysis_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"count\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"event_collection\"</span><span class=\"p\">:</span> <span class=\"s2\">\"purchases\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"filters\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"property_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"price\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"operator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"gte\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"property_value\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"timeframe\"</span><span class=\"p\">:</span> <span class=\"s2\">\"this_500_days\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"interval\"</span><span class=\"p\">:</span> <span class=\"s2\">\"daily\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"group_by\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"ip_geo_info.country\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"n\">index_by</span> <span class=\"o\">=</span> <span class=\"s2\">\"product.id\"</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cached_datasets</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">dataset_name</span><span class=\"p\">,</span>\n    <span class=\"n\">query</span><span class=\"p\">,</span>\n    <span class=\"n\">index_by</span><span class=\"p\">,</span>\n    <span class=\"n\">display_name</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Get all Cached Datasets</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cached_datasets</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get one Cached Dataset</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cached_datasets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">dataset_name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve Cached Dataset results</span>\n<span class=\"n\">index_by</span> <span class=\"o\">=</span> <span class=\"s2\">\"a_project_id\"</span>\n<span class=\"n\">timeframe</span> <span class=\"o\">=</span><span class=\"s2\">\"this_2_hours\"</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cached_datasets</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">(</span>\n    <span class=\"n\">dataset_name</span><span class=\"p\">,</span>\n    <span class=\"n\">index_by</span><span class=\"p\">,</span>\n    <span class=\"n\">timeframe</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Using an absolute timeframe</span>\n<span class=\"n\">timeframe</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"start\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2018-11-02T00:00:00.000Z\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"end\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2018-11-02T02:00:00.000Z\"</span>\n<span class=\"p\">}</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cached_datasets</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">(</span>\n    <span class=\"n\">dataset_name</span><span class=\"p\">,</span>\n    <span class=\"n\">index_by</span><span class=\"p\">,</span>\n    <span class=\"n\">timeframe</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Using multiple index_by values</span>\n<span class=\"n\">index_by</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"project.id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a_project_id\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"project.foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span>\n<span class=\"p\">}</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cached_datasets</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"dataset_with_multiple_indexes\"</span><span class=\"p\">,</span>\n    <span class=\"n\">index_by</span><span class=\"p\">,</span>\n    <span class=\"n\">timeframe</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete a Cached Dataset</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cached_datasets</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">dataset_name</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"overwriting-event-timestamps\">\n<h4>Overwriting event timestamps</h4>\n<p>Two time-related properties are included in your event automatically. The properties \u201ckeen.timestamp\u201d\nand \u201ckeen.created_at\u201d are set at the time your event is recorded. You have the ability to overwrite the\nkeen.timestamp property. This could be useful, for example, if you are backfilling historical data. Be\nsure to use <a href=\"https://keen.io/docs/event-data-modeling/event-data-intro/#iso-8601-format\" rel=\"nofollow\">ISO-8601 Format</a>.</p>\n<p>Keen stores all date and time information in UTC!</p>\n<pre><span class=\"n\">keen</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s2\">\"sign_ups\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"keen\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2012-07-06T02:09:10.141Z\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"lloyd\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"referred_by\"</span><span class=\"p\">:</span> <span class=\"s2\">\"harry\"</span>\n<span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"get-from-keen-io-with-a-timeout\">\n<h4>Get from Keen IO with a Timeout</h4>\n<p>By default, GET requests will timeout after 305 seconds. If you want to manually override this, you can\ncreate a KeenClient with the \u201cget_timeout\u201d parameter. This client will fail GETs if no bytes have been\nreturned by the server in the specified time. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keen.client</span> <span class=\"kn\">import</span> <span class=\"n\">KeenClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">KeenClient</span><span class=\"p\">(</span>\n    <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"s2\">\"xxxx\"</span><span class=\"p\">,</span>\n    <span class=\"n\">write_key</span><span class=\"o\">=</span><span class=\"s2\">\"yyyy\"</span><span class=\"p\">,</span>\n    <span class=\"n\">read_key</span><span class=\"o\">=</span><span class=\"s2\">\"zzzz\"</span><span class=\"p\">,</span>\n    <span class=\"n\">get_timeout</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This will cause queries such as count(), sum(), and average() to timeout after 100 seconds. If this timeout\nlimit is hit, a requests.Timeout will be raised. Due to a bug in the requests library, you might also see an\nSSLError (<a href=\"https://github.com/kennethreitz/requests/issues/1294\" rel=\"nofollow\">#1294</a>)</p>\n</div>\n<div id=\"send-to-keen-io-with-a-timeout\">\n<h4>Send to Keen IO with a Timeout</h4>\n<p>By default, POST requests will timeout after 305 seconds. If you want to manually override this, you can\ncreate a KeenClient with the \u201cpost_timeout\u201d parameter. This client will fail POSTs if no bytes have been\nreturned by the server in the specified time. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keen.client</span> <span class=\"kn\">import</span> <span class=\"n\">KeenClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">KeenClient</span><span class=\"p\">(</span>\n    <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"s2\">\"xxxx\"</span><span class=\"p\">,</span>\n    <span class=\"n\">write_key</span><span class=\"o\">=</span><span class=\"s2\">\"yyyy\"</span><span class=\"p\">,</span>\n    <span class=\"n\">post_timeout</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This will cause both add_event() and add_events() to timeout after 100 seconds. If this timeout limit is hit, a requests.Timeout will be raised. Due to a bug in the requests library, you might also see an SSLError (<a href=\"https://github.com/kennethreitz/requests/issues/1294\" rel=\"nofollow\">https://github.com/kennethreitz/requests/issues/1294</a>)</p>\n</div>\n<div id=\"create-access-keys\">\n<h4>Create Access Keys</h4>\n<p>The Python client enables the creation and manipulation of <a href=\"https://keen.io/docs/access/access-keys\" rel=\"nofollow\">Access Keys</a>. Examples:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keen.client</span> <span class=\"kn\">import</span> <span class=\"n\">KeenClient</span>\n<span class=\"c1\"># You could also simply use: import keen</span>\n<span class=\"c1\"># If you do this, you will need your project ID and master key set in environment variables.</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">KeenClient</span><span class=\"p\">(</span>\n    <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"s2\">\"xxxx\"</span><span class=\"p\">,</span>\n    <span class=\"n\">master_key</span><span class=\"o\">=</span><span class=\"s2\">\"zzzz\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Create an access key. See: https://keen.io/docs/access/access-keys/#customizing-your-access-key</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_access_key</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Dave_Barry_Key\"</span><span class=\"p\">,</span> <span class=\"n\">is_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">permitted</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"writes\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cached_queries\"</span><span class=\"p\">],</span>\n                         <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"cached_queries\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"allowed\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"dave_barry_in_cyberspace_sales\"</span><span class=\"p\">]}})</span>\n\n<span class=\"c1\"># Display all access keys associated with this client's project.</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">list_access_keys</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get details on a particular access key.</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_access_key</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Revoke (disable) an access key.</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">revoke_access_key</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Unrevoke (re-enable) an access key.</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">unrevoke_access_key</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete an access key</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_access_key</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Change just the name of an access key.</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_access_key_name</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Some_New_Name\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add new access key permissions to existing permissions on a given key.</span>\n<span class=\"c1\"># In this case the set of permissions currently contains \"writes\" and \"cached_queries\".</span>\n<span class=\"c1\"># This function call keeps the old permissions and adds \"queries\" to that set.</span>\n<span class=\"c1\">#     (\"writes\", \"cached_queries\") + (\"queries\") = (\"writes\", \"cached_queries\", \"queries\")</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_access_key_permissions</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">,</span> <span class=\"n\">permissions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"queries\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Remove one or more access key permissions from a given key.</span>\n<span class=\"c1\"># In this case the set of permissions currently contains \"writes\", \"cached_queries\", and \"queries\".</span>\n<span class=\"c1\"># This function call will keep the old permissions not explicitly removed here.</span>\n<span class=\"c1\"># So we will remove both \"writes\" and \"queries\" from the set, leaving only \"cached_queries\".</span>\n<span class=\"c1\">#     (\"writes\", \"cached_queries\", \"queries\") - (\"writes\", \"queries\") = (\"cached_queries\")</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">remove_access_key_permissions</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">,</span> <span class=\"n\">permissions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"writes\"</span><span class=\"p\">,</span> <span class=\"s2\">\"queries\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># We can also perform a full update on the permissions, replacing all existing permissions with a new list.</span>\n<span class=\"c1\"># In this case our existing permissions contains only \"cached_queries\".</span>\n<span class=\"c1\"># We will replace this set with the \"writes\" permission with this function call.</span>\n<span class=\"c1\">#     (\"cached_queries\") REPLACE-WITH (\"writes\") = (\"writes\")</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_access_key_permissions</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">,</span> <span class=\"n\">permissions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"writes\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Replace all existing key options with this new options object.</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_access_key_options</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"writes\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"autofill\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"customer\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"93iskds39kd93id\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ada Corp.\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}})</span>\n\n<span class=\"c1\"># Replace everything but the key ID with what is supplied here.</span>\n<span class=\"c1\"># If a field is not supplied here, it will be set to a blank value.</span>\n<span class=\"c1\"># In this case, no options are supplied, so all options will be removed.</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_access_key_full</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Strong_Bad\"</span><span class=\"p\">,</span> <span class=\"n\">is_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">permitted</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"queries\"</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"create-scoped-keys-deprecated\">\n<h4>Create Scoped Keys (<strong>Deprecated</strong>)</h4>\n<p>The Python client enables you to create <a href=\"https://keen.io/docs/security/#scoped-key\" rel=\"nofollow\">Scoped Keys</a> easily, but Access Keys are better!\nIf you need to use them anyway, for legacy reasons, here\u2019s how:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keen.client</span> <span class=\"kn\">import</span> <span class=\"n\">KeenClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keen</span> <span class=\"kn\">import</span> <span class=\"n\">scoped_keys</span>\n\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">KEEN_MASTER_KEY</span>\n\n<span class=\"n\">write_key</span> <span class=\"o\">=</span> <span class=\"n\">scoped_keys</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"allowed_operations\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"write\"</span><span class=\"p\">]})</span>\n<span class=\"n\">read_key</span> <span class=\"o\">=</span> <span class=\"n\">scoped_keys</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"allowed_operations\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"read\"</span><span class=\"p\">]})</span>\n</pre>\n<p><cite>write_key</cite> and <cite>read_key</cite> now contain scoped keys based on your master API key.</p>\n</div>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>To run tests:</p>\n<pre>python setup.py test\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>This project is in alpha stage at version 0.6.1. See the full <a href=\"./CHANGELOG.rst\" rel=\"nofollow\">CHANGELOG</a>.</p>\n</div>\n<div id=\"questions-support\">\n<h2>Questions &amp; Support</h2>\n<p>If you have any questions, bugs, or suggestions, please\nreport them via Github <a href=\"./issues\" rel=\"nofollow\">Issues</a>. We\u2019d love to hear your feedback and ideas!</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>This is an open source project and we love involvement from the community! Hit us up with pull requests and issues.</p>\n<p><a href=\"./CONTRIBUTING.md\" rel=\"nofollow\">Learn more about contributing to this project</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6851197, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "a9dd8ce4da5ab3df75951ba3aac7113e", "sha256": "c5239d74891830436fa05349d8e744460e9395806d77cbb127d9081f4fe5f37d"}, "downloads": -1, "filename": "keen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a9dd8ce4da5ab3df75951ba3aac7113e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2814, "upload_time": "2012-07-24T19:55:19", "upload_time_iso_8601": "2012-07-24T19:55:19.454589Z", "url": "https://files.pythonhosted.org/packages/99/c7/9493a2e83a7a2f54692db2479a64748ef1863a01911be0074574a7c81a37/keen-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9d63159dc6b06453f69340cb39be8c57", "sha256": "7a47aacebd65c93ed5fc2ff39aac42eba3d4942e47327c3f79b076dec0d552a4"}, "downloads": -1, "filename": "keen-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9d63159dc6b06453f69340cb39be8c57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2818, "upload_time": "2012-10-02T04:27:11", "upload_time_iso_8601": "2012-10-02T04:27:11.881492Z", "url": "https://files.pythonhosted.org/packages/5c/cc/94ad07b2cbb60c903a489ccad71ece2d18a1b0572e0b95a15f8ccb52c4be/keen-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d88d83b188ccea130c3e691917f62b81", "sha256": "440d4819bada269d0f3e6a4900848bbbc4190e047628ebd27b3de5c46563d576"}, "downloads": -1, "filename": "keen-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d88d83b188ccea130c3e691917f62b81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2839, "upload_time": "2012-10-10T00:35:47", "upload_time_iso_8601": "2012-10-10T00:35:47.595805Z", "url": "https://files.pythonhosted.org/packages/68/6c/8d5d52c6a228f67e2079da2a529d6ec0dbbddeedb09bd9e12e176e07b8e5/keen-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "8610b720682d60eb1032ef8289854729", "sha256": "23ef22cfb1494a69ced7dcdbe037538c2ef663c368686ba7b6ddcd2fc64897bc"}, "downloads": -1, "filename": "keen-0.1.5.tar.gz", "has_sig": false, "md5_digest": "8610b720682d60eb1032ef8289854729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2694, "upload_time": "2013-02-26T01:01:05", "upload_time_iso_8601": "2013-02-26T01:01:05.385684Z", "url": "https://files.pythonhosted.org/packages/66/6c/ca1df650bffa5f5072926334366a9507fa4674e95311ab594b0a6544be46/keen-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "13169299d2f4089d78d6050e79895318", "sha256": "174641aa3be996d7442d535893a35acedc9969c961bc7d78809e664c5fc436ed"}, "downloads": -1, "filename": "keen-0.1.6.tar.gz", "has_sig": false, "md5_digest": "13169299d2f4089d78d6050e79895318", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6396, "upload_time": "2013-05-01T19:45:28", "upload_time_iso_8601": "2013-05-01T19:45:28.276877Z", "url": "https://files.pythonhosted.org/packages/2e/3c/2a9d19cb64aaa8ece0d00ed7c2dbb018d17e9eaa99e9dfc23493914ec125/keen-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "fa7cd18da6749557b990dfd3b76dbb66", "sha256": "710908d9076810ca4d7e84bc0583920cbe73129bda152f3ea232d4ec9b57b284"}, "downloads": -1, "filename": "keen-0.1.7.tar.gz", "has_sig": false, "md5_digest": "fa7cd18da6749557b990dfd3b76dbb66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6413, "upload_time": "2013-05-08T17:21:03", "upload_time_iso_8601": "2013-05-08T17:21:03.775938Z", "url": "https://files.pythonhosted.org/packages/ac/28/377bd516f809b6d234ded93ef80b05a0d5ae0386013c1ede9e2d845716b1/keen-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "d1715cb810495c640d02d30bcfb9c501", "sha256": "1fded007a4581cbe865440274101323861f9686bf38746a2840281a253c83cb7"}, "downloads": -1, "filename": "keen-0.1.8.tar.gz", "has_sig": false, "md5_digest": "d1715cb810495c640d02d30bcfb9c501", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7943, "upload_time": "2013-05-29T00:49:23", "upload_time_iso_8601": "2013-05-29T00:49:23.169638Z", "url": "https://files.pythonhosted.org/packages/4d/04/0c71633247652c815d7d1d6625cb28b69e35b408d706762242ae4f48b672/keen-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "61b0088171a227588aa0074ba92b9675", "sha256": "970f5f87434896feccfd7beac48a67aeaf83650f4a03c949d862c3f46b730659"}, "downloads": -1, "filename": "keen-0.1.9.tar.gz", "has_sig": false, "md5_digest": "61b0088171a227588aa0074ba92b9675", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8832, "upload_time": "2013-06-09T21:38:23", "upload_time_iso_8601": "2013-06-09T21:38:23.470290Z", "url": "https://files.pythonhosted.org/packages/42/fa/46c580848f34e5426e0d72b2cba642eb9f0f1852a26d6ef3d078ae93ce5a/keen-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "560d3c1ba4031130af3193c46267f8a6", "sha256": "282bde087749901988dfe8f042470838807a0348c7bbc89c05d1cccf42bd3387"}, "downloads": -1, "filename": "keen-0.2.0.tar.gz", "has_sig": false, "md5_digest": "560d3c1ba4031130af3193c46267f8a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9173, "upload_time": "2013-08-21T08:09:23", "upload_time_iso_8601": "2013-08-21T08:09:23.807399Z", "url": "https://files.pythonhosted.org/packages/3f/21/d100741efa3581cbab3bf31443ab76223412b6a4b289506704b500de0970/keen-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a377cb645dd7bbf089375b6d0d6410b7", "sha256": "b55c404d27cbb40f7893373bd55a1bcc4d91314a5c129c5c79bf58b50f48961b"}, "downloads": -1, "filename": "keen-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a377cb645dd7bbf089375b6d0d6410b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9298, "upload_time": "2013-09-30T16:20:05", "upload_time_iso_8601": "2013-09-30T16:20:05.294835Z", "url": "https://files.pythonhosted.org/packages/ab/01/28215af2e537c2036b32d54b72740597ce3049217bf27e67293863a2be95/keen-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "50df37e42d03d0b0045fac682d3b9eb6", "sha256": "bda74970b96b918b5d759ce48f4f7dd63329c2cd098211391e228eec1ae003a0"}, "downloads": -1, "filename": "keen-0.2.2.tar.gz", "has_sig": false, "md5_digest": "50df37e42d03d0b0045fac682d3b9eb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9374, "upload_time": "2013-10-29T18:01:12", "upload_time_iso_8601": "2013-10-29T18:01:12.364217Z", "url": "https://files.pythonhosted.org/packages/fc/da/0976300b0953bb648c3f91f88f74ca816c93b12fc3b6dab32dce88a0db18/keen-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "130943f2a6f15d1aecc244403ea4ae7c", "sha256": "841199cc8474df07d230ee825aaf0e348329643cd9ba5bc1cdc81de09c04b249"}, "downloads": -1, "filename": "keen-0.2.3.tar.gz", "has_sig": false, "md5_digest": "130943f2a6f15d1aecc244403ea4ae7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9466, "upload_time": "2013-12-12T00:43:01", "upload_time_iso_8601": "2013-12-12T00:43:01.596532Z", "url": "https://files.pythonhosted.org/packages/e4/31/f8f023a95744e80f5b2d0d7adf42a40c635358f37f392085c1b229cc615b/keen-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f598dae78c8ca25f1544bacf8f54b670", "sha256": "a470ba366b8cad1040ea438ff0d9db9e01d411527a491f5da33c9f8481e61d94"}, "downloads": -1, "filename": "keen-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f598dae78c8ca25f1544bacf8f54b670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9851, "upload_time": "2014-05-06T23:08:54", "upload_time_iso_8601": "2014-05-06T23:08:54.997458Z", "url": "https://files.pythonhosted.org/packages/b6/7b/bd430520210e7266ae1bb6b3f07e277dc244638efe6350a83d5434ecb852/keen-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "93187e77bfa7ca95fea35999e5db52df", "sha256": "8a423195a300a76d422df3ffd2763432d5cebd5bbd2a10d6aba40f454c428b23"}, "downloads": -1, "filename": "keen-0.3.1.tar.gz", "has_sig": false, "md5_digest": "93187e77bfa7ca95fea35999e5db52df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9932, "upload_time": "2014-09-11T02:17:10", "upload_time_iso_8601": "2014-09-11T02:17:10.314615Z", "url": "https://files.pythonhosted.org/packages/23/27/7e108620a09b65bc9370ff7599a5ca5be2aa504d78031d5d6bebf8b9d2e6/keen-0.3.1.tar.gz", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "2453c42ae7fc1e2d0462f2b4e66e091a", "sha256": "b12b166056488f7e23fb035e88af15711c2923d05b76d5ae68da28c072319804"}, "downloads": -1, "filename": "keen-0.3.10.tar.gz", "has_sig": false, "md5_digest": "2453c42ae7fc1e2d0462f2b4e66e091a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11707, "upload_time": "2015-03-20T21:29:55", "upload_time_iso_8601": "2015-03-20T21:29:55.311952Z", "url": "https://files.pythonhosted.org/packages/9e/cd/5a21af56296d68ad88f8b8bd343a2af819b00948f1f23ee73dbe644023f1/keen-0.3.10.tar.gz", "yanked": false}], "0.3.11": [{"comment_text": "", "digests": {"md5": "a43d335d4dfad43a8759306dc69721af", "sha256": "056b018405b16339a839558bb4803c4235bfad2741540511e76cb1c4840d9198"}, "downloads": -1, "filename": "keen-0.3.11.tar.gz", "has_sig": false, "md5_digest": "a43d335d4dfad43a8759306dc69721af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15296, "upload_time": "2015-03-21T03:49:23", "upload_time_iso_8601": "2015-03-21T03:49:23.063388Z", "url": "https://files.pythonhosted.org/packages/e3/bf/2e0b0653d4cee6dcc12be88398bd5cf6c398c93cfba4c793a9b26b43005d/keen-0.3.11.tar.gz", "yanked": false}], "0.3.12": [{"comment_text": "", "digests": {"md5": "aa1f25e6b4f6dd36f8d41f0f62bdfb99", "sha256": "f8c0ae89d06d3646cf1af45c8b18274850e93f052679d675d63880a15b75ea3f"}, "downloads": -1, "filename": "keen-0.3.12.tar.gz", "has_sig": false, "md5_digest": "aa1f25e6b4f6dd36f8d41f0f62bdfb99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15308, "upload_time": "2015-03-23T02:06:02", "upload_time_iso_8601": "2015-03-23T02:06:02.313655Z", "url": "https://files.pythonhosted.org/packages/57/51/0c9581d720bfdcdb004ba51a01d2653dcc8e5e44be143965df5716d23e70/keen-0.3.12.tar.gz", "yanked": false}], "0.3.13": [{"comment_text": "", "digests": {"md5": "1ca9c950f13b651de97e983ae4be36a3", "sha256": "04084b76e04c8469701154e8644b749ddfc5b15826d4811a1a6745cd91f6a824"}, "downloads": -1, "filename": "keen-0.3.13.tar.gz", "has_sig": false, "md5_digest": "1ca9c950f13b651de97e983ae4be36a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15382, "upload_time": "2015-05-04T19:04:50", "upload_time_iso_8601": "2015-05-04T19:04:50.430662Z", "url": "https://files.pythonhosted.org/packages/d4/02/53ef853836e4a07e9d546bec5db5fe4c67407e3d2767efbc9a2bbce4f789/keen-0.3.13.tar.gz", "yanked": false}], "0.3.14": [{"comment_text": "", "digests": {"md5": "eaf591113155c94c3d9a4d4b6fe1c707", "sha256": "c84ae25e6536c3f612e6b412ddf8689fa57781b22bd8eb4315aee34702c53d47"}, "downloads": -1, "filename": "keen-0.3.14.tar.gz", "has_sig": false, "md5_digest": "eaf591113155c94c3d9a4d4b6fe1c707", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15499, "upload_time": "2015-06-03T19:50:25", "upload_time_iso_8601": "2015-06-03T19:50:25.535011Z", "url": "https://files.pythonhosted.org/packages/ea/8c/1855346696561d9a475dd0ac23e70a82f593a1e730957e6f3e9edbb5b421/keen-0.3.14.tar.gz", "yanked": false}], "0.3.15": [{"comment_text": "", "digests": {"md5": "03da2284c988b33fc5b8dfa9e700d2c8", "sha256": "5ebe5a5cf0d268dfaaaea71a3a52a3394af8da4418e200d89b6186ffeb4cb63f"}, "downloads": -1, "filename": "keen-0.3.15.tar.gz", "has_sig": false, "md5_digest": "03da2284c988b33fc5b8dfa9e700d2c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15754, "upload_time": "2015-06-12T00:12:40", "upload_time_iso_8601": "2015-06-12T00:12:40.696599Z", "url": "https://files.pythonhosted.org/packages/fa/41/f1786326b45fd5946aa4634142feca0ff6e0e6d9221344fcb2ef06f7bdb3/keen-0.3.15.tar.gz", "yanked": false}], "0.3.16": [{"comment_text": "", "digests": {"md5": "c19eed03441ef2966c10de3a5bb10591", "sha256": "2a8187ec9b025903f712ef32260dd8e880c063bd60ee274ab503ee4da41a7332"}, "downloads": -1, "filename": "keen-0.3.16.tar.gz", "has_sig": false, "md5_digest": "c19eed03441ef2966c10de3a5bb10591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16450, "upload_time": "2015-06-30T21:18:44", "upload_time_iso_8601": "2015-06-30T21:18:44.227765Z", "url": "https://files.pythonhosted.org/packages/a5/09/11d5c4d9d91ffbe0559d7e5f5a7da1955289e73b2f1d87dfed5ce6139248/keen-0.3.16.tar.gz", "yanked": false}], "0.3.17": [{"comment_text": "", "digests": {"md5": "be6f6aae846cd0a6bf28a572192a863b", "sha256": "7feda3ba5ee9869bc1974858852a83ca74fbbbdde210a8a1fc38834aaadca7e4"}, "downloads": -1, "filename": "keen-0.3.17.tar.gz", "has_sig": false, "md5_digest": "be6f6aae846cd0a6bf28a572192a863b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16885, "upload_time": "2015-08-20T17:26:03", "upload_time_iso_8601": "2015-08-20T17:26:03.639090Z", "url": "https://files.pythonhosted.org/packages/2a/96/b3f5adfe8f4ecdd8da7f04059a8d7d892aa9762bb371a7ef7b10cb74082e/keen-0.3.17.tar.gz", "yanked": false}], "0.3.18": [{"comment_text": "", "digests": {"md5": "8cd9b97f6ce7ce6a0afb990774082272", "sha256": "adc397cc6d0b3062b2f69ae3aa485c01d35687d51cb77fee452b204c13c653be"}, "downloads": -1, "filename": "keen-0.3.18.tar.gz", "has_sig": false, "md5_digest": "8cd9b97f6ce7ce6a0afb990774082272", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16915, "upload_time": "2015-10-14T21:37:51", "upload_time_iso_8601": "2015-10-14T21:37:51.385355Z", "url": "https://files.pythonhosted.org/packages/82/66/ac95a46f0b250b7d81b2bc3040a981168c628bad458dac9c1ef0c616fab8/keen-0.3.18.tar.gz", "yanked": false}], "0.3.19": [{"comment_text": "", "digests": {"md5": "a8de7198f852d2c92984aa68d63ddbad", "sha256": "ba383e2d79f22cb2a6c36b8cbc2e01fd69ebcb17f6138526e5712ec36f691e8e"}, "downloads": -1, "filename": "keen-0.3.19.tar.gz", "has_sig": false, "md5_digest": "a8de7198f852d2c92984aa68d63ddbad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16982, "upload_time": "2015-11-25T00:57:45", "upload_time_iso_8601": "2015-11-25T00:57:45.333089Z", "url": "https://files.pythonhosted.org/packages/ff/b5/48563e0a36fef678ac022aa8aa028fa2040f1a2edd919d20048fc48e118d/keen-0.3.19.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "55305069b39481f4750bc4fd70977249", "sha256": "b4979b5ba547097933d06cc146d50c15e66e92db3240b69e71e51a63544d37e8"}, "downloads": -1, "filename": "keen-0.3.2.tar.gz", "has_sig": false, "md5_digest": "55305069b39481f4750bc4fd70977249", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9995, "upload_time": "2014-09-14T18:09:47", "upload_time_iso_8601": "2014-09-14T18:09:47.383709Z", "url": "https://files.pythonhosted.org/packages/7a/50/f2cb10c3d11fa4afbdfd69968578b8435f0e9c90b73476fc4cc7baf169c1/keen-0.3.2.tar.gz", "yanked": false}], "0.3.20": [{"comment_text": "", "digests": {"md5": "1608dda67b2a79853339c333a44b43e2", "sha256": "d882dd6b56fa583254bc0492edfe6db73f063ab1e1c2e90321c5b918d735884d"}, "downloads": -1, "filename": "keen-0.3.20.tar.gz", "has_sig": false, "md5_digest": "1608dda67b2a79853339c333a44b43e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17938, "upload_time": "2015-11-25T23:34:49", "upload_time_iso_8601": "2015-11-25T23:34:49.228772Z", "url": "https://files.pythonhosted.org/packages/2f/6a/879fe7d16e25c3ac2767350b80507ed75fdcec16fdc7d0081f112e73afdb/keen-0.3.20.tar.gz", "yanked": false}], "0.3.21": [{"comment_text": "", "digests": {"md5": "798ab7fc72d2383d9328d8cd8b9bd686", "sha256": "d52191aa4fae6fa76a9f79f81701532cec8dc2891c7af094711fef3385a76762"}, "downloads": -1, "filename": "keen-0.3.21.tar.gz", "has_sig": false, "md5_digest": "798ab7fc72d2383d9328d8cd8b9bd686", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18605, "upload_time": "2016-03-15T21:30:06", "upload_time_iso_8601": "2016-03-15T21:30:06.143394Z", "url": "https://files.pythonhosted.org/packages/d2/fa/ba29141692d70e7725f4836cef90c0df56efccad848b6faa3537ee8e8901/keen-0.3.21.tar.gz", "yanked": false}], "0.3.22": [{"comment_text": "", "digests": {"md5": "3a5ac1574e48cf6d2a7c903bcfd92c72", "sha256": "9eb1a81ebf4ace83c59cd16a95ca01fde63c3a24280333c5e4ae436045926780"}, "downloads": -1, "filename": "keen-0.3.22.tar.gz", "has_sig": false, "md5_digest": "3a5ac1574e48cf6d2a7c903bcfd92c72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18622, "upload_time": "2016-04-26T22:45:51", "upload_time_iso_8601": "2016-04-26T22:45:51.588808Z", "url": "https://files.pythonhosted.org/packages/4e/98/4c30b3ee3ef5d81f59acd5c4a65504e3bff2b522eadf4d9ba0c9feb97429/keen-0.3.22.tar.gz", "yanked": false}], "0.3.23": [{"comment_text": "", "digests": {"md5": "d512b1ec0376c1ffad897dbb0d5838b0", "sha256": "b3bb49a03e99e614abde7b2bb5d73ba30c2686966e7abd7507fa890c283d862f"}, "downloads": -1, "filename": "keen-0.3.23.tar.gz", "has_sig": false, "md5_digest": "d512b1ec0376c1ffad897dbb0d5838b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18649, "upload_time": "2016-05-10T20:17:10", "upload_time_iso_8601": "2016-05-10T20:17:10.497283Z", "url": "https://files.pythonhosted.org/packages/b3/0b/12b064b8b6b57a0b6d1b8f70b49d79d08e5d35332e5301dc1ac6e9445b9c/keen-0.3.23.tar.gz", "yanked": false}], "0.3.24": [{"comment_text": "", "digests": {"md5": "51eb389df739eeadc274f61274b28b8e", "sha256": "53ef7a0e8baa5383d2df917b47b1cbe5b7616629a0eb0ee3a70593ab35c8694e"}, "downloads": -1, "filename": "keen-0.3.24.tar.gz", "has_sig": false, "md5_digest": "51eb389df739eeadc274f61274b28b8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20474, "upload_time": "2016-06-29T23:37:08", "upload_time_iso_8601": "2016-06-29T23:37:08.242944Z", "url": "https://files.pythonhosted.org/packages/e6/cb/603f89c39416d0c6ede4e1f292a08c83fce4852d864fe23270fc73cd6c0d/keen-0.3.24.tar.gz", "yanked": false}], "0.3.25": [{"comment_text": "", "digests": {"md5": "a849f8c89ddc9eefd7a53cad76ed7891", "sha256": "f371d5c737114ce6894cb35940a915d821f7edc376a9ae1f92966c1bb1e4079f"}, "downloads": -1, "filename": "keen-0.3.25.tar.gz", "has_sig": false, "md5_digest": "a849f8c89ddc9eefd7a53cad76ed7891", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20523, "upload_time": "2016-08-15T18:05:58", "upload_time_iso_8601": "2016-08-15T18:05:58.230085Z", "url": "https://files.pythonhosted.org/packages/6e/e0/8859fd5e6815e4abf950457cbad5f408e76205074e5b150813963624ec8b/keen-0.3.25.tar.gz", "yanked": false}], "0.3.26": [{"comment_text": "", "digests": {"md5": "6a99ca44695945048d021aaa0d9bddd2", "sha256": "b2d8df6b20e73550f9eb339a3d686bea0efe6bf2d25dd76fbef1ef7ab42bad77"}, "downloads": -1, "filename": "keen-0.3.26.tar.gz", "has_sig": false, "md5_digest": "6a99ca44695945048d021aaa0d9bddd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20560, "upload_time": "2016-08-31T22:23:01", "upload_time_iso_8601": "2016-08-31T22:23:01.355343Z", "url": "https://files.pythonhosted.org/packages/2a/db/b9b784a6adec0502612ec5cdc6addd866e5a7de29288161fba1ddd3c73d3/keen-0.3.26.tar.gz", "yanked": false}], "0.3.27": [{"comment_text": "", "digests": {"md5": "51e7722c83c55dc090608254304cc351", "sha256": "485e4f96bd762efd21bd219ad37ba10f8b37ab23bf53d66e23eb0248a1472de5"}, "downloads": -1, "filename": "keen-0.3.27.tar.gz", "has_sig": false, "md5_digest": "51e7722c83c55dc090608254304cc351", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21232, "upload_time": "2016-11-29T17:15:04", "upload_time_iso_8601": "2016-11-29T17:15:04.090182Z", "url": "https://files.pythonhosted.org/packages/41/da/bd1639f46f010baf861b75a2181339b61369404edea002da0708e18de9ac/keen-0.3.27.tar.gz", "yanked": false}], "0.3.28": [{"comment_text": "", "digests": {"md5": "bcd2221e90f82337b29dea1959eeff92", "sha256": "bdebd96093977a89f69335dc3d58e963dfc3efceb1dd23de25e57f7d6aaba15e"}, "downloads": -1, "filename": "keen-0.3.28.tar.gz", "has_sig": false, "md5_digest": "bcd2221e90f82337b29dea1959eeff92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21302, "upload_time": "2016-11-29T17:48:53", "upload_time_iso_8601": "2016-11-29T17:48:53.026123Z", "url": "https://files.pythonhosted.org/packages/57/13/eb95f285189a323e68ba35b839252df30b4fdb826557354366e983926056/keen-0.3.28.tar.gz", "yanked": false}], "0.3.29": [], "0.3.3": [{"comment_text": "", "digests": {"md5": "d6aa21078237ffcb36eeb4ef080ea5c7", "sha256": "ef70c186ba54df39901f0db2601930482c3db3b28b9edd6dde923c6e75e2c2c5"}, "downloads": -1, "filename": "keen-0.3.3.tar.gz", "has_sig": false, "md5_digest": "d6aa21078237ffcb36eeb4ef080ea5c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10002, "upload_time": "2014-09-18T18:33:19", "upload_time_iso_8601": "2014-09-18T18:33:19.233095Z", "url": "https://files.pythonhosted.org/packages/69/01/d8a574b83ad553ac16361432f0473703e2c87fa0c3310c1d9dcdeeb6e442/keen-0.3.3.tar.gz", "yanked": false}], "0.3.30": [{"comment_text": "", "digests": {"md5": "0b0363b3910457b74cb453ed4138e4a2", "sha256": "6f65dfa2b6d7ee4c2963d8ba144d24ab708773ad6aa0c9aab8b42fbf97cfe6e6"}, "downloads": -1, "filename": "keen-0.3.30.tar.gz", "has_sig": false, "md5_digest": "0b0363b3910457b74cb453ed4138e4a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21651, "upload_time": "2017-02-23T19:48:07", "upload_time_iso_8601": "2017-02-23T19:48:07.166904Z", "url": "https://files.pythonhosted.org/packages/27/46/a9289574ac53531345769f4277ac1b7b5500427597bea173c2710bf813d2/keen-0.3.30.tar.gz", "yanked": false}], "0.3.31": [{"comment_text": "", "digests": {"md5": "2f144bca45f51c1115b91f1c1d37c5ba", "sha256": "fd8a2c8016ec473b8ae26868540c41f219aee6a56e09464c079f533c96844a63"}, "downloads": -1, "filename": "keen-0.3.31.tar.gz", "has_sig": false, "md5_digest": "2f144bca45f51c1115b91f1c1d37c5ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21544, "upload_time": "2017-03-06T23:56:09", "upload_time_iso_8601": "2017-03-06T23:56:09.986595Z", "url": "https://files.pythonhosted.org/packages/49/f2/d75f08666f3b1ceccb49932a565f57d88b0214fa6a72c4c3a4c7ec4451f2/keen-0.3.31.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "8d43e05802f95986ec657d919bb005e5", "sha256": "b75e4ecd8c0f0af8c66b5b1f648edd6de4db531210c8514559a784d64af0f67e"}, "downloads": -1, "filename": "keen-0.3.4.tar.gz", "has_sig": false, "md5_digest": "8d43e05802f95986ec657d919bb005e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10212, "upload_time": "2014-11-24T19:37:44", "upload_time_iso_8601": "2014-11-24T19:37:44.428106Z", "url": "https://files.pythonhosted.org/packages/65/28/c363f2218876f06b4749c004e33ed6b26883add1312c6d2bcc97d1e1dace/keen-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "136081356d65e9ce61bd452ef3b1f137", "sha256": "0a6734c6f14a7c6167409ddd140b95b72d60a5f2b7d6bf035afe2fcefaf8eec0"}, "downloads": -1, "filename": "keen-0.3.5.tar.gz", "has_sig": false, "md5_digest": "136081356d65e9ce61bd452ef3b1f137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10338, "upload_time": "2014-11-25T21:14:59", "upload_time_iso_8601": "2014-11-25T21:14:59.894346Z", "url": "https://files.pythonhosted.org/packages/78/44/732d35c57c2899251717b2601b0258774a5fd1fd34ba613c190d44e21e40/keen-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "1f59bfd0a0c948bd0e024a3bf9c91f01", "sha256": "18dd40d2de38fa76a473f057ab17d5b5999d2833024974b9762d416e4c08611b"}, "downloads": -1, "filename": "keen-0.3.6.tar.gz", "has_sig": false, "md5_digest": "1f59bfd0a0c948bd0e024a3bf9c91f01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10521, "upload_time": "2014-12-05T23:41:01", "upload_time_iso_8601": "2014-12-05T23:41:01.328820Z", "url": "https://files.pythonhosted.org/packages/b8/f4/ff9ae26b41d6668bb44847a86b656f2af48eb13e9489a61044d8d749d1f1/keen-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "9984f9bf56430cdc77f13f81614776f1", "sha256": "932e587a0386a7e0123d1dbba307905fe234375fb51b8ad5d27c6b5a47f2493e"}, "downloads": -1, "filename": "keen-0.3.7.tar.gz", "has_sig": false, "md5_digest": "9984f9bf56430cdc77f13f81614776f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10511, "upload_time": "2015-01-15T17:00:53", "upload_time_iso_8601": "2015-01-15T17:00:53.275356Z", "url": "https://files.pythonhosted.org/packages/ca/a9/cb0a8d83fce4c164ba95bcf10c25fdf3560f714a61e8b3327725b3673c9e/keen-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "5098f8170789a2539122aca21b90d002", "sha256": "0bdc4f45537b084990e0bc6074be8a5767b5b2bcdb88ccd98e4a8a63e55b4048"}, "downloads": -1, "filename": "keen-0.3.8.tar.gz", "has_sig": false, "md5_digest": "5098f8170789a2539122aca21b90d002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11389, "upload_time": "2015-02-06T22:37:37", "upload_time_iso_8601": "2015-02-06T22:37:37.878736Z", "url": "https://files.pythonhosted.org/packages/34/d4/c3da10f745760d432b9bee062dd2c3203ec5db1e9d4fdef046a051bbe618/keen-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "8f477b958e0f5c0966c407c5f4ddf654", "sha256": "a7098751bd4382d0eb908da4bfa7e6f2b72578559248070d5a2e59ed44ca636a"}, "downloads": -1, "filename": "keen-0.3.9.tar.gz", "has_sig": false, "md5_digest": "8f477b958e0f5c0966c407c5f4ddf654", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11471, "upload_time": "2015-02-09T23:13:15", "upload_time_iso_8601": "2015-02-09T23:13:15.389053Z", "url": "https://files.pythonhosted.org/packages/a4/05/f5b52b7ae5dc869d58a3853bbad04c205aa611b6f2f19c5f95a6dcddf554/keen-0.3.9.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "981915179ab7c4f94f7f9d350f45de3a", "sha256": "47fe10fd3001177f11fad487ec11891380044d6057224e2a12ec745af901cd89"}, "downloads": -1, "filename": "keen-0.4.0.tar.gz", "has_sig": false, "md5_digest": "981915179ab7c4f94f7f9d350f45de3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24085, "upload_time": "2017-05-22T15:44:28", "upload_time_iso_8601": "2017-05-22T15:44:28.889884Z", "url": "https://files.pythonhosted.org/packages/08/cd/b15cde8b77910fbc9d7a4ab9cc759361a0687005e8e6b2fabaf4d12567f2/keen-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "01d8cb99eda14832bed7e9ee511a1c83", "sha256": "75fddd87e188cd41b01cf238f9ac55584c819dc60bdac9a4113c472fef04f125"}, "downloads": -1, "filename": "keen-0.5.0.tar.gz", "has_sig": false, "md5_digest": "01d8cb99eda14832bed7e9ee511a1c83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34879, "upload_time": "2017-10-23T15:44:29", "upload_time_iso_8601": "2017-10-23T15:44:29.897697Z", "url": "https://files.pythonhosted.org/packages/bc/a0/8a408db60308bd34f310c6373c09498822c1e2a00f01401ef5c0fed208b4/keen-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "08230a992d9440c1829b0b61ea24f0e4", "sha256": "a6c42cb5828bab8b192b5e694299113db419149ea730a66164fb17ca7f72b3c4"}, "downloads": -1, "filename": "keen-0.5.1.tar.gz", "has_sig": false, "md5_digest": "08230a992d9440c1829b0b61ea24f0e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34889, "upload_time": "2017-10-30T20:46:57", "upload_time_iso_8601": "2017-10-30T20:46:57.520719Z", "url": "https://files.pythonhosted.org/packages/64/0e/72c5bf067018de964700928d01e89d9691c59c829d7c26e4f22950e6f304/keen-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "d7419220a9deca227da71a612012605f", "sha256": "a4853bbc330e560d401c7729b794ee8ac492c0664192724868d39e9a14f7dbcb"}, "downloads": -1, "filename": "keen-0.5.2.tar.gz", "has_sig": false, "md5_digest": "d7419220a9deca227da71a612012605f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38518, "upload_time": "2020-03-20T10:09:40", "upload_time_iso_8601": "2020-03-20T10:09:40.042835Z", "url": "https://files.pythonhosted.org/packages/84/84/0365ee48c0e80e449dabd1f0131084ff3702538cc3052506dbecd4f2d118/keen-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "95578415f68cb8b4ac3318cfc79ac4e4", "sha256": "e11c497f663b29342f1c03909aae681d34743dc9722cb75ef43e94cbff9b6c77"}, "downloads": -1, "filename": "keen-0.6.0.tar.gz", "has_sig": false, "md5_digest": "95578415f68cb8b4ac3318cfc79ac4e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38605, "upload_time": "2020-03-20T16:54:23", "upload_time_iso_8601": "2020-03-20T16:54:23.896720Z", "url": "https://files.pythonhosted.org/packages/eb/11/c9fc27d941b8cb13c85002a28c21ccd8be6309f2d0882b190397cf45c575/keen-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "17483caa87f7618479a4281d6204ac01", "sha256": "f32c49b45b320222cac63297530104b458efc4e475c22c29139413820f4ba652"}, "downloads": -1, "filename": "keen-0.6.1.tar.gz", "has_sig": false, "md5_digest": "17483caa87f7618479a4281d6204ac01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38597, "upload_time": "2020-03-20T17:00:50", "upload_time_iso_8601": "2020-03-20T17:00:50.458625Z", "url": "https://files.pythonhosted.org/packages/cf/11/40b4d8405e5ecf5049902dce0dd061948efa38a25541674d7909998e1cac/keen-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17483caa87f7618479a4281d6204ac01", "sha256": "f32c49b45b320222cac63297530104b458efc4e475c22c29139413820f4ba652"}, "downloads": -1, "filename": "keen-0.6.1.tar.gz", "has_sig": false, "md5_digest": "17483caa87f7618479a4281d6204ac01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38597, "upload_time": "2020-03-20T17:00:50", "upload_time_iso_8601": "2020-03-20T17:00:50.458625Z", "url": "https://files.pythonhosted.org/packages/cf/11/40b4d8405e5ecf5049902dce0dd061948efa38a25541674d7909998e1cac/keen-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:22 2020"}