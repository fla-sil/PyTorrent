{"info": {"author": "Sam Beck", "author_email": "notsambeck@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "![pandabase_logo](https://github.com/notsambeck/notsambeck.github.io/blob/master/media/pandabase_logo.jpg?raw=true)\n\n##### pip install pandabase\n[![Build Status](https://travis-ci.org/notsambeck/pandabase.svg?branch=master)](https://travis-ci.org/notsambeck/pandabase)\n[![Coverage Status](https://coveralls.io/repos/github/notsambeck/pandabase/badge.svg?branch=master)](https://coveralls.io/github/notsambeck/pandabase?branch=master)\n\npandabase links pandas DataFrames to SQL databases, supporting read, append, upsert, and basic database management operations. \n\nBy default, uses DataFrame.index as the primary key. By using an explicit primary key, pandabase makes rational database schemas the obvious choice, and makes it easy to maintain clean data even when it must be updated frequently. \n\nDesigned specifically for time-series datasets that need to be stored to disk permanently, but are updated over time and used primarily in-memory for computation. All supported types are nullable, great for flexible ML applications.\n\nTested under:\n* Python >= 3.6\n* Pandas >= 0.24, including 1.0\n* SQLAlchemy >= 1.3 \n* SQLite\n* Postgres\n    * requires psycopg2 and postgres >= 8\n\n### Features\n* pandabase.to_sql replaces df.to_sql\n* pandabase.read_sql replaces pd.read_sql\n* primary key support:\n    * by default, uses df.index as table PK (must have name != None)\n    * filter results with lowest/highest kwargs: lowest <= results.pk <= highest \n    * (new in 0.4): support for multi-indexes\n    * optionally, generate integer index (with parameter auto_index=True)\n* multiple insert modes: how='create_only', 'upsert', or 'append'\n* datatypes (all nullable): \n    * boolean\n    * int\n    * float\n    * datetime (UTC only)\n    * string\n\n### Bonus Features\n* moderately smart insertion handles new records that 'almost correspond' with database schema automatically\n* to_sql can automatically add new columns to database as needed with kwarg: add_new_columns=True\n* supports arbitrary schemas in Postgres with kwarg: schema=name\n* comprehensive test suite (pytest)\n* companda(df1, df2) test tool: rich comparisons of DataFrames\n\n### Design Considerations\n* Minimal dependencies: Pandas (>= 0.24) & SQLAlchemy (>= 1.3) are the only requirements\n* Database is the source of truth: will coerce incoming DataFrames to fit existing schema\n  * but also is reasonably smart about how new tables are created from DataFrames\n* Not horrendously slow (?)\n\n### License\nMIT license\n\n### Thanks\nCode partially stolen from:\n[Dataset](https://github.com/pudo/dataset) (nice, more general-purpose SQL interaction library) and \n[pandas.sql](https://github.com/pandas-dev/pandas/blob/master/pandas/io/sql.py)\n\n### Installation\nFrom your inside your virtual environment of choice:\n\n```bash\n~/$ pip install pandabase\n```\n\nFor latest version:\n\n```bash\n~/$ git clone https://github.com/notsambeck/pandabase\n~/$ cd pandabase\n~/pandabase/$ pip install -r requirements.txt\n~/pandabase/$ pip install .\n```\n\n### Usage\n```python\n# Python >= 3.6\n>>> import pandas as pd\n>>> import numpy as np\n>>> import pandabase\n>>> my_data = pd.DataFrame(index=range(7, 12), \n                           columns=['some_number'],\n                           data=np.random.random((5,1)))\n>>> my_data.index.name = 'my_index_name'        # index must be named to use as PK\n>>> pandabase.to_sql(my_data, table_name='my_table', con='sqlite:///new_sqlite_db.sqlite', how='create_only')\nTable('my_table', ...\n>>> exit()\n```\n\nYour data is now persistently stored in a SQLite database, using my_data.index as primary key. To append or update data, replace 'create_only' with 'append' or 'upsert'. To store records without an explicit index, use 'autoindex=True'.\n\n```bash\n~/pandabase$ ls\nnew_sqlite_db.sqlite\n```\n\n```python\n>>> import pandabase\n>>> df = pandabase.read_sql('my_table', con='sqlite:///new_sqlite_db.sqlite'))\n>>> df\n    some_number \n7   0.722416 \n8   0.076045 \n9   0.213118 \n10  0.453716 \n11  0.406995\n```\n\nAdditional keyword arguments for pandabase.read_sql:\n\n[lowest, highest]: minimum/maximum values for PK that will be retrieved. Can be used independently of each other.\n\nFor multi-index tables, use e.g. highest=(max_value_for_pk0, max_value_for_pk1, ), lowest=(min_value_for_pk0, min_value_for_pk1, )\n\nMinor bug: note that selecting an empty subset of data will raise an error if type(lowest) != type(data), even if the types are comparible (e.g. float vs. int)\n\n### Using Extra Features\nCompanda - rich comparisons of DataFrames. call companda on two DataFrames, get a Companda object back (that evaluates to True/False).\n\n```python\n>>> from pandabse.companda import companda\n>>> df = pandabase.read_sql('my_table', con='sqlite:///new_sqlite_db.sqlite'))\n>>> companda(df, df.copy())\nCompanda(True, message='DataFrames are equal')\n>>> bool(companda(df, df.copy()))\nTrue\n\n>>> df2 = df.copy\n>>> df2.iloc[1, 2] = -1000\n>>> companda(df, df2)\nCompanda(False, message='Columns and indices are equal, but unequal values in columns [col_a]...')\n>>> bool(companda(df, df2))\nFalse\n```\n\n### Table utility functions:\n\nUnder basic use cases, Pandabase can handle database administration tasks. All support schema=name kwarg in Postgres.\n\n* drop_db_table(table_name, con):\n    * Drop table [table_name] from con - be careful with this!\n* get_db_table_names(con):\n    * Get a list of table names from database.\n* get_table_column_names(con, table_name):\n    * Get a list of column names from database, table.\n* describe_database(con):\n    * Get a description of database content: {table_names: {table_info_dicts}}.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/notsambeck/pandabase", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pandabase", "package_url": "https://pypi.org/project/pandabase/", "platform": "", "project_url": "https://pypi.org/project/pandabase/", "project_urls": {"Homepage": "https://github.com/notsambeck/pandabase"}, "release_url": "https://pypi.org/project/pandabase/0.4.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "pandabase links pandas DataFrames to SQL databases. Upsert, append, read, drop, describe...", "version": "0.4.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"pandabase_logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79628fe594d7d0718ca1de28e56a2cf59d9199b4/68747470733a2f2f6769746875622e636f6d2f6e6f7473616d6265636b2f6e6f7473616d6265636b2e6769746875622e696f2f626c6f622f6d61737465722f6d656469612f70616e6461626173655f6c6f676f2e6a70673f7261773d74727565\"></p>\n<h5>pip install pandabase</h5>\n<p><a href=\"https://travis-ci.org/notsambeck/pandabase\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d401125e9eb3372b5896f68b9929ab4d383d6bab/68747470733a2f2f7472617669732d63692e6f72672f6e6f7473616d6265636b2f70616e6461626173652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/notsambeck/pandabase?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e81a369b6871468ee731ce4e8a4f00f9c17faf0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6e6f7473616d6265636b2f70616e6461626173652f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>pandabase links pandas DataFrames to SQL databases, supporting read, append, upsert, and basic database management operations.</p>\n<p>By default, uses DataFrame.index as the primary key. By using an explicit primary key, pandabase makes rational database schemas the obvious choice, and makes it easy to maintain clean data even when it must be updated frequently.</p>\n<p>Designed specifically for time-series datasets that need to be stored to disk permanently, but are updated over time and used primarily in-memory for computation. All supported types are nullable, great for flexible ML applications.</p>\n<p>Tested under:</p>\n<ul>\n<li>Python &gt;= 3.6</li>\n<li>Pandas &gt;= 0.24, including 1.0</li>\n<li>SQLAlchemy &gt;= 1.3</li>\n<li>SQLite</li>\n<li>Postgres\n<ul>\n<li>requires psycopg2 and postgres &gt;= 8</li>\n</ul>\n</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>pandabase.to_sql replaces df.to_sql</li>\n<li>pandabase.read_sql replaces pd.read_sql</li>\n<li>primary key support:\n<ul>\n<li>by default, uses df.index as table PK (must have name != None)</li>\n<li>filter results with lowest/highest kwargs: lowest &lt;= results.pk &lt;= highest</li>\n<li>(new in 0.4): support for multi-indexes</li>\n<li>optionally, generate integer index (with parameter auto_index=True)</li>\n</ul>\n</li>\n<li>multiple insert modes: how='create_only', 'upsert', or 'append'</li>\n<li>datatypes (all nullable):\n<ul>\n<li>boolean</li>\n<li>int</li>\n<li>float</li>\n<li>datetime (UTC only)</li>\n<li>string</li>\n</ul>\n</li>\n</ul>\n<h3>Bonus Features</h3>\n<ul>\n<li>moderately smart insertion handles new records that 'almost correspond' with database schema automatically</li>\n<li>to_sql can automatically add new columns to database as needed with kwarg: add_new_columns=True</li>\n<li>supports arbitrary schemas in Postgres with kwarg: schema=name</li>\n<li>comprehensive test suite (pytest)</li>\n<li>companda(df1, df2) test tool: rich comparisons of DataFrames</li>\n</ul>\n<h3>Design Considerations</h3>\n<ul>\n<li>Minimal dependencies: Pandas (&gt;= 0.24) &amp; SQLAlchemy (&gt;= 1.3) are the only requirements</li>\n<li>Database is the source of truth: will coerce incoming DataFrames to fit existing schema\n<ul>\n<li>but also is reasonably smart about how new tables are created from DataFrames</li>\n</ul>\n</li>\n<li>Not horrendously slow (?)</li>\n</ul>\n<h3>License</h3>\n<p>MIT license</p>\n<h3>Thanks</h3>\n<p>Code partially stolen from:\n<a href=\"https://github.com/pudo/dataset\" rel=\"nofollow\">Dataset</a> (nice, more general-purpose SQL interaction library) and\n<a href=\"https://github.com/pandas-dev/pandas/blob/master/pandas/io/sql.py\" rel=\"nofollow\">pandas.sql</a></p>\n<h3>Installation</h3>\n<p>From your inside your virtual environment of choice:</p>\n<pre>~/$ pip install pandabase\n</pre>\n<p>For latest version:</p>\n<pre>~/$ git clone https://github.com/notsambeck/pandabase\n~/$ <span class=\"nb\">cd</span> pandabase\n~/pandabase/$ pip install -r requirements.txt\n~/pandabase/$ pip install .\n</pre>\n<h3>Usage</h3>\n<pre><span class=\"c1\"># Python &gt;= 3.6</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandabase</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span> \n                           <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'some_number'</span><span class=\"p\">],</span>\n                           <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_data</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'my_index_name'</span>        <span class=\"c1\"># index must be named to use as PK</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pandabase</span><span class=\"o\">.</span><span class=\"n\">to_sql</span><span class=\"p\">(</span><span class=\"n\">my_data</span><span class=\"p\">,</span> <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'my_table'</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"o\">=</span><span class=\"s1\">'sqlite:///new_sqlite_db.sqlite'</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">'create_only'</span><span class=\"p\">)</span>\n<span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'my_table'</span><span class=\"p\">,</span> <span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exit</span><span class=\"p\">()</span>\n</pre>\n<p>Your data is now persistently stored in a SQLite database, using my_data.index as primary key. To append or update data, replace 'create_only' with 'append' or 'upsert'. To store records without an explicit index, use 'autoindex=True'.</p>\n<pre>~/pandabase$ ls\nnew_sqlite_db.sqlite\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandabase</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pandabase</span><span class=\"o\">.</span><span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"s1\">'my_table'</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"o\">=</span><span class=\"s1\">'sqlite:///new_sqlite_db.sqlite'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span>\n    <span class=\"n\">some_number</span> \n<span class=\"mi\">7</span>   <span class=\"mf\">0.722416</span> \n<span class=\"mi\">8</span>   <span class=\"mf\">0.076045</span> \n<span class=\"mi\">9</span>   <span class=\"mf\">0.213118</span> \n<span class=\"mi\">10</span>  <span class=\"mf\">0.453716</span> \n<span class=\"mi\">11</span>  <span class=\"mf\">0.406995</span>\n</pre>\n<p>Additional keyword arguments for pandabase.read_sql:</p>\n<p>[lowest, highest]: minimum/maximum values for PK that will be retrieved. Can be used independently of each other.</p>\n<p>For multi-index tables, use e.g. highest=(max_value_for_pk0, max_value_for_pk1, ), lowest=(min_value_for_pk0, min_value_for_pk1, )</p>\n<p>Minor bug: note that selecting an empty subset of data will raise an error if type(lowest) != type(data), even if the types are comparible (e.g. float vs. int)</p>\n<h3>Using Extra Features</h3>\n<p>Companda - rich comparisons of DataFrames. call companda on two DataFrames, get a Companda object back (that evaluates to True/False).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pandabse.companda</span> <span class=\"kn\">import</span> <span class=\"n\">companda</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pandabase</span><span class=\"o\">.</span><span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"s1\">'my_table'</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"o\">=</span><span class=\"s1\">'sqlite:///new_sqlite_db.sqlite'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">companda</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">())</span>\n<span class=\"n\">Companda</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'DataFrames are equal'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">companda</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()))</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1000</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">companda</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">df2</span><span class=\"p\">)</span>\n<span class=\"n\">Companda</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'Columns and indices are equal, but unequal values in columns [col_a]...'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">companda</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">df2</span><span class=\"p\">))</span>\n<span class=\"kc\">False</span>\n</pre>\n<h3>Table utility functions:</h3>\n<p>Under basic use cases, Pandabase can handle database administration tasks. All support schema=name kwarg in Postgres.</p>\n<ul>\n<li>drop_db_table(table_name, con):\n<ul>\n<li>Drop table [table_name] from con - be careful with this!</li>\n</ul>\n</li>\n<li>get_db_table_names(con):\n<ul>\n<li>Get a list of table names from database.</li>\n</ul>\n</li>\n<li>get_table_column_names(con, table_name):\n<ul>\n<li>Get a list of column names from database, table.</li>\n</ul>\n</li>\n<li>describe_database(con):\n<ul>\n<li>Get a description of database content: {table_names: {table_info_dicts}}.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6627598, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "bce945cb7433202b663d2977330b4ceb", "sha256": "0bac8b4f47d2c60835d9866eea4d759ff494292e1f29bdf27bc9e623d1be1b12"}, "downloads": -1, "filename": "pandabase-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bce945cb7433202b663d2977330b4ceb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11453, "upload_time": "2019-08-12T00:14:55", "upload_time_iso_8601": "2019-08-12T00:14:55.964098Z", "url": "https://files.pythonhosted.org/packages/3d/0f/f054480fea20fef416b38147dd628d84e59af39c81eefbf74bb74cfc416f/pandabase-0.1.1-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "24152057d1968994ef236046d9c2285f", "sha256": "f2634d36bb384198f90804b5ae89f798f36bea2a0c2bb524ad9bc707754f9a7d"}, "downloads": -1, "filename": "pandabase-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "24152057d1968994ef236046d9c2285f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12926, "upload_time": "2019-09-10T03:53:44", "upload_time_iso_8601": "2019-09-10T03:53:44.073622Z", "url": "https://files.pythonhosted.org/packages/80/97/14dd35b2a5c8a153180361d344f34a1da379127704ddd46b7b0d50f2bbcb/pandabase-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "334d424f06b2db269d62b42c61d1cece", "sha256": "5be24f147f5e0d77df126227e1c10d94f9ba4a98298332a5a4219d6eed5da2e3"}, "downloads": -1, "filename": "pandabase-0.2.1.tar.gz", "has_sig": false, "md5_digest": "334d424f06b2db269d62b42c61d1cece", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12323, "upload_time": "2019-09-10T03:53:45", "upload_time_iso_8601": "2019-09-10T03:53:45.832837Z", "url": "https://files.pythonhosted.org/packages/03/a9/7c4644d8a6d2cef4bc2093cdb01f279620ad80d2813311cadba4c0ba00c2/pandabase-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4432dee05f6c20634cea6d38b4e7a41f", "sha256": "f7de7545ae2cd56e7b1a7595df7f10297996f7b46a4b31255df15188719c6f4b"}, "downloads": -1, "filename": "pandabase-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4432dee05f6c20634cea6d38b4e7a41f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14105, "upload_time": "2019-11-28T22:24:02", "upload_time_iso_8601": "2019-11-28T22:24:02.361747Z", "url": "https://files.pythonhosted.org/packages/37/26/85d8f9b7eea0eb4900782d0aaf2dd8ec8115e9412d63731d6d1cd2133804/pandabase-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33a07aa4bd441e7c27634200e9334a54", "sha256": "00fe79721b7ab60b526fe29204477ccb57771548bb88cb1da7e4414a63bef568"}, "downloads": -1, "filename": "pandabase-0.3.tar.gz", "has_sig": false, "md5_digest": "33a07aa4bd441e7c27634200e9334a54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13890, "upload_time": "2019-11-28T22:24:03", "upload_time_iso_8601": "2019-11-28T22:24:03.771021Z", "url": "https://files.pythonhosted.org/packages/30/38/0c300beebd66b2377764f0e02f8523f2e2d74b9501634e74a7e3ace5f852/pandabase-0.3.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "f313d7adb4f5dc65920ec50baa6aaaaa", "sha256": "dbcacc75dc42638d81e703bf94f71e7136035e9b9d9ebdce32382f2d6c556ab5"}, "downloads": -1, "filename": "pandabase-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f313d7adb4f5dc65920ec50baa6aaaaa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16594, "upload_time": "2020-02-14T01:48:10", "upload_time_iso_8601": "2020-02-14T01:48:10.344462Z", "url": "https://files.pythonhosted.org/packages/36/7d/cd0fe71e082c388f3f545a41137a4aafc204ec72708bb2f3be9f412a25b2/pandabase-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdbcfd024da5867d1e0c7abd490b7fa1", "sha256": "3698388b7a538ebb47d83c18803402fbffd37f78fbd808bae60f6e45203e7c1a"}, "downloads": -1, "filename": "pandabase-0.4.5.tar.gz", "has_sig": false, "md5_digest": "bdbcfd024da5867d1e0c7abd490b7fa1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16203, "upload_time": "2020-02-14T01:44:52", "upload_time_iso_8601": "2020-02-14T01:44:52.065209Z", "url": "https://files.pythonhosted.org/packages/69/70/a90f9b0182be283a3b0cf5ecce73e9e2b67ea8cfc823218cb6e0374ade03/pandabase-0.4.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f313d7adb4f5dc65920ec50baa6aaaaa", "sha256": "dbcacc75dc42638d81e703bf94f71e7136035e9b9d9ebdce32382f2d6c556ab5"}, "downloads": -1, "filename": "pandabase-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f313d7adb4f5dc65920ec50baa6aaaaa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16594, "upload_time": "2020-02-14T01:48:10", "upload_time_iso_8601": "2020-02-14T01:48:10.344462Z", "url": "https://files.pythonhosted.org/packages/36/7d/cd0fe71e082c388f3f545a41137a4aafc204ec72708bb2f3be9f412a25b2/pandabase-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdbcfd024da5867d1e0c7abd490b7fa1", "sha256": "3698388b7a538ebb47d83c18803402fbffd37f78fbd808bae60f6e45203e7c1a"}, "downloads": -1, "filename": "pandabase-0.4.5.tar.gz", "has_sig": false, "md5_digest": "bdbcfd024da5867d1e0c7abd490b7fa1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16203, "upload_time": "2020-02-14T01:44:52", "upload_time_iso_8601": "2020-02-14T01:44:52.065209Z", "url": "https://files.pythonhosted.org/packages/69/70/a90f9b0182be283a3b0cf5ecce73e9e2b67ea8cfc823218cb6e0374ade03/pandabase-0.4.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:38 2020"}