{"info": {"author": "John T. Leonard", "author_email": "jtleona01@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.com/jlnerd/pyDSlib.svg?branch=master)](https://travis-ci.com/jlnerd/pyDSlib)\n[![codecov](https://codecov.io/gh/jlnerd/pyDSlib/branch/master/graph/badge.svg)](https://codecov.io/gh/jlnerd/pyDSlib)\n\n\n# Python Data Science Library (pyDSlib)\n__Author: [John T. Leonard](https://www.linkedin.com/in/johntleonard/)__<br>\n__Repo: [pyDSlib](https://github.com/jlnerd/pyDSlib)__\n\nCustom modules/classes/methods for various data science, computer vision, and machine learning operations in python\n\n## Installing & Importing\nIn your command line interface (CLI):\n```\n$ pip install --upgrade pyDSlib\n```\nAfter this, the package can be imported into jupyter notebook or python in general via the comman:\n```import pyDSlib```\n\n\n# Modules:\n```\npyDSlib.ML\npyDSlib.plot\npyDSlib.img\npyDSlib.video\npyDSlib.file_utils\npyDSlib.summary_tables\npyDSlib.kaggle\n```\n\n## Modules Overview\n\nBelow, we highlight several of the most interesting modules in more detail.\n\n### pyDSlib.ML\nMachine learning module for python focusing on streamlining and wrapping sklearn, xgboost, dask_ml, & tensorflow/keras functions\n\n__pyDSlib.ML Sub-Modules:__\n```\npyDSlib.ML.preprocessing \npyDSlib.ML.model_selection\npyDSlib.ML.NeuralNet\npyDSlib.ML.inspection\npyDSlib.ML.postprocessing\n````\n\nThe sub-modules within pyDSlib.ML are summarized below:\n\n#### pyDSlib.ML.preprocessing \nFunctions related to preprocessing/feature engineering for machine learning\n\nThe main class of interest is the ```pyDSlib.ML.preprocessing.Preprocessing_pipe``` class, which iterates through a standard preprocessing sequence and saves the resulting engineered data. The standard sequence is:\n\n1. LabelEncode.categorical_features\n2. Scale.continuous_features\n    * for Scaler_ID in Scalers_dict.keys()\n3. Impute.categorical_features\n    * for Imputer_cat_ID in Imputer_categorical_dict[Imputer_cat_ID].keys():<br>\n        *for Imputer_iter_class_ID in Imputer_categorical_dict[Imputer_cat_ID].keys():\n4. Imputer.continuous_features\n    * for Imputer_cont_ID in Imputer_continuous_dict.keys():\n        * for Imputer_iter_reg_ID in Imputer_continuous_dict[Imputer_cont_ID].keys():\n5. OneHotEncode\n6. CorrCoeffThreshold\nFinished!\n\n#### pyDSlib.ML.model_selection\nFunctions/classes for running hyperparameter searches across multiple types of models & comparing those models\n\nThe main classes of interest are the ```pyDSlib.ML.model_selection.GridSearchCV``` class and the ```pyDSlib.ML.model_selection.BayesianSearchCV``` class, which run hyperparameter GridSearchCV and BayesianSearchCV optimizations across different types of models & compares the results to allow one to find the best-of-best (BoB) model. The ```.fit``` functions for both these classes are compatible with evaluating sklearn models, tensorflow/keras models, and xgboost models. Check out the doc-strings for each class for additional notes on implementation.\n\n#### pyDSlib.ML.NeuralNet\nsub-modules/functions/classes for streamlining common neural-net architectures implemented in tensorflow/keras.\n\nThe most notetable sub-modules are the ```DenseNet``` and ```Conv2D``` modules, which provide a keras implementation of a general dense neural network & 2D convolutional neural network, where the depth & general architecture of the network s are defined by generic hyperparameters, such that one can easily perform a grid search across multiple neural network architectures.\n\n#### pyDSlib.ML.inspection\nFunctions to inspect features and/or models after training\n\n#### pyDSlib.ML.postprocessing\nML model outputs postprocessing helper functions\n\n\n### pyDSlib.plot\nThis module contains helper functions related to common plotting operations via matplotlib.\n\nThe most noteable functions are:\n\n```pyDSlib.plot.corr_matrix()```: Plot a correlation matrix chart\n\n```pyDSlib.plot.ccorr_pareto()```: Plot a pareto bar-chart for 1 label of interest within a correlation dataframe\n\n```pyDSlib.plot.hist_or_bar()```: Iterate through each column in a dataframe and plot the histogram or bar chart for the data.\n\n### pyDSlib.img\nThis module contains functions/classes related to image analysis, most of which wrap SciKit image functions in some way.\n\nThe most noteable functions are: \n\n```pyDSlib.img.auto_crop.use_edges()```: Use skimage.feature.canny method to find edges in the image passed and autocrop on the outermost edges\n\n```pyDSlib.img.decompose_video_to_img()```: Use cv2 to pull out image frames from a video and save them as png files\n\n\n### pyDSlib.kaggle\nThis module contains functions for interacting with kaggle. The simplest and most useful function is:\n```\npyDSlib.kaggle.competition_download_files(competition)\n```\nwhere ```competition``` is the competition name, such as  \"home-credit-default-risk\"\n\n### pyDSlib.file_utils\nThis module contains simple but extremely useful helper functions to save and load standard file types including 'hdf', 'csv', 'json', 'dill'. Essentially the ```save``` and ```load``` functions take care of the boiler plate operations related to saving or loading on the file-types specified above.\n\n# Example Notebooks\nBasic notebook examples can be found in the (notebooks)[notebooks] folder. Some examples include:\n* [example_ML_NeuralNet_Bert_Word2Vec](notebooks/example_ML_NeuralNet_Bert_Word2Vec.ipynb)\n* [example_ML_model_selection_BayesianSearchCV](notebooks/example_ML_model_selection_BayesianSearchCV.ipynb)\n* [example_Conv2D_AutoEncoder](notebooks/example_Conv2D_AutoEncoder.ipynb)\n* [examples_RCNN](notebooks/examples_RCNN)\n     * This folder contains various examples related to region-based Conv. Nets., which are typically used for object detections tasks\n     * [example-RCNN-mask-pretrained-coco](example-RCNN-mask-pretrained-coco.ipynb\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jlnerd/pyDSlib.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyDSlib", "package_url": "https://pypi.org/project/pyDSlib/", "platform": "", "project_url": "https://pypi.org/project/pyDSlib/", "project_urls": {"Homepage": "https://github.com/jlnerd/pyDSlib.git"}, "release_url": "https://pypi.org/project/pyDSlib/0.3.5/", "requires_dist": ["pytest", "pytest-cov", "codecov", "gitpython", "numpy", "pandas", "matplotlib", "scipy", "sklearn", "tensorflow-gpu", "tensorflow", "keras", "torch", "transformers", "hyperopt", "bson", "scikit-image", "Pillow", "opencv-python", "imgaug", "nose", "dill", "h5py", "dask", "dask[dataframe]", "fsspec (>=0.3.3)", "dask-ml", "dask-xgboost", "xgboost", "lightgbm", "pydicom", "kaggle"], "requires_python": "", "summary": "General utilities to streamline data science and machine learning routines in python", "version": "0.3.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/jlnerd/pyDSlib\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/293553df85d6af30745bcab4da5f495c740454b5/68747470733a2f2f7472617669732d63692e636f6d2f6a6c6e6572642f707944536c69622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/jlnerd/pyDSlib\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18d6a6aeb39e668d099c0756225afa058a46f200/68747470733a2f2f636f6465636f762e696f2f67682f6a6c6e6572642f707944536c69622f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>Python Data Science Library (pyDSlib)</h1>\n<p><strong>Author: <a href=\"https://www.linkedin.com/in/johntleonard/\" rel=\"nofollow\">John T. Leonard</a></strong><br>\n<strong>Repo: <a href=\"https://github.com/jlnerd/pyDSlib\" rel=\"nofollow\">pyDSlib</a></strong></p>\n<p>Custom modules/classes/methods for various data science, computer vision, and machine learning operations in python</p>\n<h2>Installing &amp; Importing</h2>\n<p>In your command line interface (CLI):</p>\n<pre><code>$ pip install --upgrade pyDSlib\n</code></pre>\n<p>After this, the package can be imported into jupyter notebook or python in general via the comman:\n<code>import pyDSlib</code></p>\n<h1>Modules:</h1>\n<pre><code>pyDSlib.ML\npyDSlib.plot\npyDSlib.img\npyDSlib.video\npyDSlib.file_utils\npyDSlib.summary_tables\npyDSlib.kaggle\n</code></pre>\n<h2>Modules Overview</h2>\n<p>Below, we highlight several of the most interesting modules in more detail.</p>\n<h3>pyDSlib.ML</h3>\n<p>Machine learning module for python focusing on streamlining and wrapping sklearn, xgboost, dask_ml, &amp; tensorflow/keras functions</p>\n<p><strong>pyDSlib.ML Sub-Modules:</strong></p>\n<pre><code>pyDSlib.ML.preprocessing \npyDSlib.ML.model_selection\npyDSlib.ML.NeuralNet\npyDSlib.ML.inspection\npyDSlib.ML.postprocessing\n</code></pre>\n<p>The sub-modules within pyDSlib.ML are summarized below:</p>\n<h4>pyDSlib.ML.preprocessing</h4>\n<p>Functions related to preprocessing/feature engineering for machine learning</p>\n<p>The main class of interest is the <code>pyDSlib.ML.preprocessing.Preprocessing_pipe</code> class, which iterates through a standard preprocessing sequence and saves the resulting engineered data. The standard sequence is:</p>\n<ol>\n<li>LabelEncode.categorical_features</li>\n<li>Scale.continuous_features\n<ul>\n<li>for Scaler_ID in Scalers_dict.keys()</li>\n</ul>\n</li>\n<li>Impute.categorical_features\n<ul>\n<li>for Imputer_cat_ID in Imputer_categorical_dict[Imputer_cat_ID].keys():<br>\n*for Imputer_iter_class_ID in Imputer_categorical_dict[Imputer_cat_ID].keys():</li>\n</ul>\n</li>\n<li>Imputer.continuous_features\n<ul>\n<li>for Imputer_cont_ID in Imputer_continuous_dict.keys():\n<ul>\n<li>for Imputer_iter_reg_ID in Imputer_continuous_dict[Imputer_cont_ID].keys():</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>OneHotEncode</li>\n<li>CorrCoeffThreshold\nFinished!</li>\n</ol>\n<h4>pyDSlib.ML.model_selection</h4>\n<p>Functions/classes for running hyperparameter searches across multiple types of models &amp; comparing those models</p>\n<p>The main classes of interest are the <code>pyDSlib.ML.model_selection.GridSearchCV</code> class and the <code>pyDSlib.ML.model_selection.BayesianSearchCV</code> class, which run hyperparameter GridSearchCV and BayesianSearchCV optimizations across different types of models &amp; compares the results to allow one to find the best-of-best (BoB) model. The <code>.fit</code> functions for both these classes are compatible with evaluating sklearn models, tensorflow/keras models, and xgboost models. Check out the doc-strings for each class for additional notes on implementation.</p>\n<h4>pyDSlib.ML.NeuralNet</h4>\n<p>sub-modules/functions/classes for streamlining common neural-net architectures implemented in tensorflow/keras.</p>\n<p>The most notetable sub-modules are the <code>DenseNet</code> and <code>Conv2D</code> modules, which provide a keras implementation of a general dense neural network &amp; 2D convolutional neural network, where the depth &amp; general architecture of the network s are defined by generic hyperparameters, such that one can easily perform a grid search across multiple neural network architectures.</p>\n<h4>pyDSlib.ML.inspection</h4>\n<p>Functions to inspect features and/or models after training</p>\n<h4>pyDSlib.ML.postprocessing</h4>\n<p>ML model outputs postprocessing helper functions</p>\n<h3>pyDSlib.plot</h3>\n<p>This module contains helper functions related to common plotting operations via matplotlib.</p>\n<p>The most noteable functions are:</p>\n<p><code>pyDSlib.plot.corr_matrix()</code>: Plot a correlation matrix chart</p>\n<p><code>pyDSlib.plot.ccorr_pareto()</code>: Plot a pareto bar-chart for 1 label of interest within a correlation dataframe</p>\n<p><code>pyDSlib.plot.hist_or_bar()</code>: Iterate through each column in a dataframe and plot the histogram or bar chart for the data.</p>\n<h3>pyDSlib.img</h3>\n<p>This module contains functions/classes related to image analysis, most of which wrap SciKit image functions in some way.</p>\n<p>The most noteable functions are:</p>\n<p><code>pyDSlib.img.auto_crop.use_edges()</code>: Use skimage.feature.canny method to find edges in the image passed and autocrop on the outermost edges</p>\n<p><code>pyDSlib.img.decompose_video_to_img()</code>: Use cv2 to pull out image frames from a video and save them as png files</p>\n<h3>pyDSlib.kaggle</h3>\n<p>This module contains functions for interacting with kaggle. The simplest and most useful function is:</p>\n<pre><code>pyDSlib.kaggle.competition_download_files(competition)\n</code></pre>\n<p>where <code>competition</code> is the competition name, such as  \"home-credit-default-risk\"</p>\n<h3>pyDSlib.file_utils</h3>\n<p>This module contains simple but extremely useful helper functions to save and load standard file types including 'hdf', 'csv', 'json', 'dill'. Essentially the <code>save</code> and <code>load</code> functions take care of the boiler plate operations related to saving or loading on the file-types specified above.</p>\n<h1>Example Notebooks</h1>\n<p>Basic notebook examples can be found in the (notebooks)[notebooks] folder. Some examples include:</p>\n<ul>\n<li><a href=\"notebooks/example_ML_NeuralNet_Bert_Word2Vec.ipynb\" rel=\"nofollow\">example_ML_NeuralNet_Bert_Word2Vec</a></li>\n<li><a href=\"notebooks/example_ML_model_selection_BayesianSearchCV.ipynb\" rel=\"nofollow\">example_ML_model_selection_BayesianSearchCV</a></li>\n<li><a href=\"notebooks/example_Conv2D_AutoEncoder.ipynb\" rel=\"nofollow\">example_Conv2D_AutoEncoder</a></li>\n<li><a href=\"notebooks/examples_RCNN\" rel=\"nofollow\">examples_RCNN</a>\n<ul>\n<li>This folder contains various examples related to region-based Conv. Nets., which are typically used for object detections tasks</li>\n<li>[example-RCNN-mask-pretrained-coco](example-RCNN-mask-pretrained-coco.ipynb</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6267577, "releases": {"0.3.5": [{"comment_text": "", "digests": {"md5": "f1af491b992e221d15b6b2cb912a7751", "sha256": "b920d16a649de2490e28d5057c372107aa8484e417360c7c6cfe7a416c6ebc90"}, "downloads": -1, "filename": "pyDSlib-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f1af491b992e221d15b6b2cb912a7751", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 138009, "upload_time": "2019-12-09T17:38:00", "upload_time_iso_8601": "2019-12-09T17:38:00.408318Z", "url": "https://files.pythonhosted.org/packages/cc/ee/2783294d8a5f6d9c30dc4f0c38028c9ef403d22b30f388185bdcc00ca1f8/pyDSlib-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a75cdfec3652a0c6a400d300aafa99fb", "sha256": "e7f7872cf8a5fe4985ec16e676e8e5cd277a608014a68caa7aafbd2c86a4b078"}, "downloads": -1, "filename": "pyDSlib-0.3.5.tar.gz", "has_sig": false, "md5_digest": "a75cdfec3652a0c6a400d300aafa99fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117657, "upload_time": "2019-12-09T17:38:03", "upload_time_iso_8601": "2019-12-09T17:38:03.650777Z", "url": "https://files.pythonhosted.org/packages/f9/60/30ed6a61cbf97f50947f7dd3157b741756a357a9b667cff12fa5f088ecea/pyDSlib-0.3.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f1af491b992e221d15b6b2cb912a7751", "sha256": "b920d16a649de2490e28d5057c372107aa8484e417360c7c6cfe7a416c6ebc90"}, "downloads": -1, "filename": "pyDSlib-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f1af491b992e221d15b6b2cb912a7751", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 138009, "upload_time": "2019-12-09T17:38:00", "upload_time_iso_8601": "2019-12-09T17:38:00.408318Z", "url": "https://files.pythonhosted.org/packages/cc/ee/2783294d8a5f6d9c30dc4f0c38028c9ef403d22b30f388185bdcc00ca1f8/pyDSlib-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a75cdfec3652a0c6a400d300aafa99fb", "sha256": "e7f7872cf8a5fe4985ec16e676e8e5cd277a608014a68caa7aafbd2c86a4b078"}, "downloads": -1, "filename": "pyDSlib-0.3.5.tar.gz", "has_sig": false, "md5_digest": "a75cdfec3652a0c6a400d300aafa99fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117657, "upload_time": "2019-12-09T17:38:03", "upload_time_iso_8601": "2019-12-09T17:38:03.650777Z", "url": "https://files.pythonhosted.org/packages/f9/60/30ed6a61cbf97f50947f7dd3157b741756a357a9b667cff12fa5f088ecea/pyDSlib-0.3.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:44 2020"}