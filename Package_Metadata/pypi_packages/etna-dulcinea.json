{"info": {"author": "Cl\u00e9ment Doumergue", "author_email": "clement.doumergue@etna.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Dulcinea\n========\n\nScript allowing to test Quixote moulinettes locally.\n\n## Install\n```\npip install -r requirements.txt\n```\n\n## How to use dulcinea\n\n```\nusage: dulcinea [-h] [-c CONFIG_FILE] [-i INFO_FILE | --auto-info]\n                [-r ROOT_DIR] [--docker-bridge-ip DOCKER_BRIDGE_IP]\n                [--override-deliveries OVERRIDE_DELIVERIES]\n                moulinette_directory\n\npositional arguments:\n  moulinette_directory\n\noptional arguments:\n  -h, --help                                show this help message and exit\n  -c CONFIG_FILE, --config-file CONFIG_FILE json file containing the user informations\n  -i INFO_FILE,\t --info-file INFO_FILE      json file containing the information of the jobs to execute\n  -r ROOT_DIR,\t--root-dir ROOT_DIR         directory where the jobs will be executed\n  --override-deliveries DELIVERIES          directory containing the deliveries to use\n  --auto-info                               when using --override-deliveries, deduce the group IDs\n```\n\n### Conf file example\n\nThe conf file can be given using the `-c` option and contains useful meta-data to insert in the context such as the user's information.\n\n```json\n{\n  \"intra_user\": \"login_z\",\n  \"intra_password\": \"superPassSecure\",\n  \"gitlab_token\": \"superCuteToken\"\n}\n```\n\n### Blueprint\n\nIn order to test the moulinette locally, the script must be able to fetch some dummy deliveries to test.\n\nTypically, it can be achieved by replacing the fetching step with a \"local\" fetch using the `fetch.copy` built-in:\n\n```python\nimport quixote.fetch.copy as fetch\n\n@quixote.fetcher\ndef fetch_by_copying():\n    fetch.copy(path_to_the_dummy_delivery_folder)\n```\n\n> The dummy delivery folder must contain a directory for each `group_id` specified in the info file,\n> which will act as dummy delivery for the specific job. See the documentation for `fetch.copy`.\n\nHowever, the `--override-deliveries` can be used to provide a directory containing the dummy deliveries, and ask\nDulcinea to automatically override the existing fetchers with data from the given directory.  \nThis solution is preferred as it is easier to use when testing simple blueprints.\n\n### Info file example\n\nThe info file must be given using the `-i` option and should contain the meta-data of all dummy deliveries.\n\n```\n[\n    {\n        \"module_id\": 1,\n        \"activity_id\": 1,\n        \"group_id\": 1,\n        \"leader\": \"login_x\"\n    },\n    {\n        \"module_id\": 1,\n        \"activity_id\": 1,\n        \"group_id\": 2,\n        \"leader\": \"login_y\"\n    }\n]\n```\n\n> The only mandatory value is `group_id`, which must match the directory name inside the dummy delivery folder.\n> If any other value is missing, Dulcinea will use a default value instead.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/etna-alternance/dulcinea", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "etna-dulcinea", "package_url": "https://pypi.org/project/etna-dulcinea/", "platform": "", "project_url": "https://pypi.org/project/etna-dulcinea/", "project_urls": {"Homepage": "https://github.com/etna-alternance/dulcinea"}, "release_url": "https://pypi.org/project/etna-dulcinea/1.1.1/", "requires_dist": ["etna-panza", "etna-quixote"], "requires_python": "", "summary": "Script to test Quixote moulinettes locally", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dulcinea</h1>\n<p>Script allowing to test Quixote moulinettes locally.</p>\n<h2>Install</h2>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<h2>How to use dulcinea</h2>\n<pre><code>usage: dulcinea [-h] [-c CONFIG_FILE] [-i INFO_FILE | --auto-info]\n                [-r ROOT_DIR] [--docker-bridge-ip DOCKER_BRIDGE_IP]\n                [--override-deliveries OVERRIDE_DELIVERIES]\n                moulinette_directory\n\npositional arguments:\n  moulinette_directory\n\noptional arguments:\n  -h, --help                                show this help message and exit\n  -c CONFIG_FILE, --config-file CONFIG_FILE json file containing the user informations\n  -i INFO_FILE,\t --info-file INFO_FILE      json file containing the information of the jobs to execute\n  -r ROOT_DIR,\t--root-dir ROOT_DIR         directory where the jobs will be executed\n  --override-deliveries DELIVERIES          directory containing the deliveries to use\n  --auto-info                               when using --override-deliveries, deduce the group IDs\n</code></pre>\n<h3>Conf file example</h3>\n<p>The conf file can be given using the <code>-c</code> option and contains useful meta-data to insert in the context such as the user's information.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"intra_user\"</span><span class=\"p\">:</span> <span class=\"s2\">\"login_z\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"intra_password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"superPassSecure\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"gitlab_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"superCuteToken\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Blueprint</h3>\n<p>In order to test the moulinette locally, the script must be able to fetch some dummy deliveries to test.</p>\n<p>Typically, it can be achieved by replacing the fetching step with a \"local\" fetch using the <code>fetch.copy</code> built-in:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">quixote.fetch.copy</span> <span class=\"k\">as</span> <span class=\"nn\">fetch</span>\n\n<span class=\"nd\">@quixote</span><span class=\"o\">.</span><span class=\"n\">fetcher</span>\n<span class=\"k\">def</span> <span class=\"nf\">fetch_by_copying</span><span class=\"p\">():</span>\n    <span class=\"n\">fetch</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">path_to_the_dummy_delivery_folder</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>The dummy delivery folder must contain a directory for each <code>group_id</code> specified in the info file,\nwhich will act as dummy delivery for the specific job. See the documentation for <code>fetch.copy</code>.</p>\n</blockquote>\n<p>However, the <code>--override-deliveries</code> can be used to provide a directory containing the dummy deliveries, and ask\nDulcinea to automatically override the existing fetchers with data from the given directory.<br>\nThis solution is preferred as it is easier to use when testing simple blueprints.</p>\n<h3>Info file example</h3>\n<p>The info file must be given using the <code>-i</code> option and should contain the meta-data of all dummy deliveries.</p>\n<pre><code>[\n    {\n        \"module_id\": 1,\n        \"activity_id\": 1,\n        \"group_id\": 1,\n        \"leader\": \"login_x\"\n    },\n    {\n        \"module_id\": 1,\n        \"activity_id\": 1,\n        \"group_id\": 2,\n        \"leader\": \"login_y\"\n    }\n]\n</code></pre>\n<blockquote>\n<p>The only mandatory value is <code>group_id</code>, which must match the directory name inside the dummy delivery folder.\nIf any other value is missing, Dulcinea will use a default value instead.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 7026320, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0c9dad9c07dc0ca97ec5f47738cccea9", "sha256": "c3ea33b2bfad203ab14ad845d07fb1394897bae01502eb5f99c5486fde09d75f"}, "downloads": -1, "filename": "etna_dulcinea-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c9dad9c07dc0ca97ec5f47738cccea9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3099, "upload_time": "2019-09-11T13:06:24", "upload_time_iso_8601": "2019-09-11T13:06:24.310796Z", "url": "https://files.pythonhosted.org/packages/1c/be/f73b74094e682df584c272e91f3251afb52d809809a1778b1f17d014d6ea/etna_dulcinea-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b21b47bf9cc233e20041e3e836f2fe7f", "sha256": "2faa677047f377117696adf9239ec60306ed2c3b3af530cbc6df8c33223d13e4"}, "downloads": -1, "filename": "etna_dulcinea-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b21b47bf9cc233e20041e3e836f2fe7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3153, "upload_time": "2019-09-30T10:37:10", "upload_time_iso_8601": "2019-09-30T10:37:10.072426Z", "url": "https://files.pythonhosted.org/packages/c1/75/c310e925385cf527e7ef442697599511a0fc14be6a0b8b37fae80963199d/etna_dulcinea-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bbe66154975b79949f7dcafa2739902a", "sha256": "7d8e219412b0e7843a373f744992648dfb67d15b3272619ed0a5867f9712be06"}, "downloads": -1, "filename": "etna_dulcinea-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bbe66154975b79949f7dcafa2739902a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3316, "upload_time": "2019-12-18T15:43:42", "upload_time_iso_8601": "2019-12-18T15:43:42.626848Z", "url": "https://files.pythonhosted.org/packages/fa/d4/418c18faf8bff520658ef2714ea67ddc33042a9d816f7fdfec4368e06394/etna_dulcinea-1.0.2-py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b38f7ff01e8d08d7df1ca30fa42c237b", "sha256": "d1616c0adf0307d756f5a80cead03e21785b27e14b271a4f0c7eb8ae598911dc"}, "downloads": -1, "filename": "etna_dulcinea-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b38f7ff01e8d08d7df1ca30fa42c237b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3466, "upload_time": "2020-03-26T20:17:53", "upload_time_iso_8601": "2020-03-26T20:17:53.858146Z", "url": "https://files.pythonhosted.org/packages/3f/2a/8ada99afd80a649e3ac813413e6a51f3499302526a392857bbbf0d368099/etna_dulcinea-1.0.3-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6a05c1c0b92399a7aa36cc68719bad1f", "sha256": "d649584ca9f5911850a372fbc4f361b11b4fa9acc379c757780cef62e35e01f5"}, "downloads": -1, "filename": "etna_dulcinea-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6a05c1c0b92399a7aa36cc68719bad1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3941, "upload_time": "2020-04-09T18:58:33", "upload_time_iso_8601": "2020-04-09T18:58:33.086925Z", "url": "https://files.pythonhosted.org/packages/4c/e5/78147298dc8797b0e330d02917d7aace7a1f2a6044137b3d53fc57b3c899/etna_dulcinea-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "2fc04a48647d095488d2aac838a404c0", "sha256": "50e208688c27bc1d0beb119f63779c5621cba9109f35fc57bae71d38a7387a79"}, "downloads": -1, "filename": "etna_dulcinea-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2fc04a48647d095488d2aac838a404c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3989, "upload_time": "2020-04-15T18:07:56", "upload_time_iso_8601": "2020-04-15T18:07:56.536467Z", "url": "https://files.pythonhosted.org/packages/c4/b1/faf8b3c9b8327d543583bbdfa6898af1380b3a488431d08bfb61edefc585/etna_dulcinea-1.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2fc04a48647d095488d2aac838a404c0", "sha256": "50e208688c27bc1d0beb119f63779c5621cba9109f35fc57bae71d38a7387a79"}, "downloads": -1, "filename": "etna_dulcinea-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2fc04a48647d095488d2aac838a404c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3989, "upload_time": "2020-04-15T18:07:56", "upload_time_iso_8601": "2020-04-15T18:07:56.536467Z", "url": "https://files.pythonhosted.org/packages/c4/b1/faf8b3c9b8327d543583bbdfa6898af1380b3a488431d08bfb61edefc585/etna_dulcinea-1.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:22 2020"}