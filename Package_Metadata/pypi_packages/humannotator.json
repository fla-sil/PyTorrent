{"info": {"author": "L.C. Vriend, D.E. Kim", "author_email": "vanboefer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Text Processing :: Linguistic", "Topic :: Utilities"], "description": "# Humannotator\n\n**Library for conveniently creating simple customizable annotators \nfor manual annotation of your data**  \n*Jenia Kim, Lawrence Vriend*\n\nWorks well with Jupyter notebooks:\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/lcvriend/humannotator/master?filepath=examples%2Fexamples.ipynb)\n\n## Use case\n\nThe humannotator provides an easy way to set up custom annotators.\nThis tool is for you if manual annotation is part of your workflow \nand you are looking for a solution that is:\n\n- Lightweight\n- Customizable\n- Easy to set up\n- Integrates with Jupyter/pandas/Python\n\n## Quick start\n\n### Install the humannotator\n\nInstall with conda:\n\n```\n    conda install -c lcvriend humannotator\n```\n\nOr use pip:\n\n```\n    pip install humannotator\n```\n\n### Create a simple annotator\n\n1. [Load the data](#load-data)\n2. [Define the tasks](#define-tasks)\n3. [Instantiate the annotator](#annotator)\n\n```Python\n    import pandas as pd\n    from humannotator import Annotator\n\n    # load data\n    df = pd.read_csv('examples/popcorn_classics.csv', sep=';', index_col=0)\n\n    # set up the annotator\n    ratings = [\n        'One bag',\n        'Two bags',\n        'Three bags',\n        'Four bags',\n        'Five-bagger',\n    ]\n    annotator = Annotator(df, name='VFA | Rate my popcorn classics')\n    annotator.tasks['Bags of popcorn'] = ratings\n\n    # run annotator\n    annotator(user='GT')\n```\n\nIn Jupyter this gives:\n\n<img src=\"examples/popcorn_classics.png\" alt=\"Humannotator\" width=\"726\">\n\n### Annotate your data\n\n- Use the annotator by calling it: `annotator()`.\n- The annotator keeps track of where you were.\n- Highlight phrases with the 'phrases' argument.\n- The annotator stores user (if provided) and timestamp with the annotation.\n\n### Access your annotations\n\n- The annotations are conveniently stored in a pandas `DataFrame`.\n- Access the annotations with the `annotated` attribute.\n- Get the indeces of the records without annotation with `unannotated`.\n- Return the data merged with its annotations with the `merged` method.\n\n### Store your annotations\n\n- Store the annotator with the `save` method.\n- Load the annotator with the `load` method.\n\n## Load data\n\nThe annotator accepts `list`, `dict`, `Series` and `DataFrame` objects as data.  \nThe data will be converted to a dataframe internally.\n\n### Dataframes\n\n- By default, the annotator will use the dataframe's `index` and all `columns`.\n- Use `load_data` to easily create a `data` object if you need more control:\n    1. `id_col` sets the column to be used as index.\n    2. `item_cols` set the column or columns to be displayed.\n\n## Define tasks\n\nTasks can be set up through subscription or with the `task_factory`.\n\n### Setting up tasks with the task factory\nCreate a task by passing `task_factory`:\n\n- the `kind` of task\n- the `name` of the task\n- (optionally) an `instruction`\n- (optionally) a list of `dependencies`\n- whether it is `nullable` (default is False)\n- any [kwargs](#Available-tasks) necessary (depends on the kind of task)\n\nTypically: \n```Python\n    task_factory(\n        'kind',\n        'name',\n        instruction='instruction',\n        dependencies=dependencies,\n        nullable=True/False,\n        **kwargs,\n    )\n```\n\nPassing a dict or list to `kind` will create a categorical task.  \nIn this case the `categories` kwarg is ignored.\n\n### Setting up tasks through subscription\n\nIt is also possible to instantiate an annotator and add tasks through subscription:  \n\n```Python\n    a = Annotator()\n    a.tasks['topic'] = ['economy', 'politics', 'media', 'other']\n    a.tasks['factual'] = bool, \"Is the article factual?\", False\n```\n\nTo add a task like this, you minimally need to provide the `kind` of task you are trying to create.\nOptionally, you can add `instruction`, `nullability`, `dependencies` and any other kwargs (as dictionary).\nChange the order in which tasks are prompted to the user with the `order` attribute on `tasks`.\n\n### Available tasks\n\nkind      | kwargs     | dtype            | description\n--------- | -----------| ---------------- | ----------------\nstr       |            | object           | String\nregex     | regex      | object           | String validated by regex\nint       |            | Int64            | Nullable integer\nfloat     |            | float64          | Float\nbool      |            | bool             | Boolean\ncategory  | categories | CategoricalDtype | Categorical variable\ndate      |            | datetime64[ns]   | Date\n\n### Dependencies\n\nDependencies consist of a *condition* and a *value*, that can be passed as tuple:\n\n```Python\n    (\"col1 == 'x'\", False)\n```\n\nThe condition is a [pandas query statement](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query).\nBefore prompting the user for input, the condition is evaluated on the current annotation.\nIf the query evaluates to True then the value will be assigned automatically.\n\n## Annotator\n\n### Calling the annotator\n\nThe annotator detects if it is run from Jupyter.\nIf so, the annotator will render itself in html and css.\nIf not, the annotator will render itself as text.\nYou can annotate a selection of records by passing a list of ids to the annotator call. If you want to reannotate ids that have already been annotated, then set `redo` to True when calling the annotator.\n\n### Instantiating the annotator\n\n> arguments\n> ---------\n> tasks : *Task, list of Task objects, Tasks, Annotations or DataFrame*\n>\n>     Annotation task(s).\n>     If passed a DataFrame, then the tasks will be inferred from it.\n>     Annotation data in the dataframe will also be initialized.\n>\n> data : *data, list-/dict-like, Series or DataFrame, default None*  \n>\n>     Data to be annotated.\n>     If `data` is not already a data object,\n>     then it will be passed through `load_data`.\n>     The annotator can be instantiated without data,\n>     but will only work after data is loaded.\n>\n> user : *str, default None*  \n>\n>     Name of the user.\n>\n> name : *str, default 'HUMANNOTATOR'*  \n>\n>     Name of the annotator.\n>\n> save_data : *boolean, default False*  \n>\n>     Set flag to True if you want to store the data with the annotator.\n>     This will ensure that the pickled object, will contain the data.\n> \n> other parameters\n> ----------------\n> **DISPLAY**  \n> text_display : *boolean, default None*  \n>\n>     If True will display the annotator in plain text instead of html.\n>\n> **HTML**  \n>\n> markdown : *boolean, default {markdown}*\n>\n>      If True will pass values through markdown before rendering.\n>\n> markdown_extensions : *list, default {markdown_extensions}*\n>\n>      List of markdown extensions to apply.\n>\n> escape_html : *boolean, default {escape_html}*\n>\n>     If true will escape html content within items.\n>\n> maxheight : *str, default '{maxheight_items}'*\n>\n>     Max height before item gets y-scroll bar.\n>     Set to None to have no maximum.\n>\n> **DATA**  \n> item_cols : *str or list of str, default None*  \n>\n>     Name(s) of dataframe column(s) to display when annotating.\n>     By default: display all columns.\n>\n> id_col : *str, default None*  \n>\n>     Name of dataframe column to use as index.\n>     By default: use the dataframe's index.\n> \n> **HIGHLIGHTER**  \n> phrases : *str, list of str, default None*  \n>\n>     Phrases to highlight in the display.\n>     The phrases can be regexes.\n>     It also to pass in a dict where:\n>     - the keys are the phrases\n>     - the values are the css styling\n>\n> escape : *boolean, default False*  \n>\n>     Set escape to True in order to escape the phrases.\n>\n> flags : *int, default 0 (no flags)*  \n>\n>     Flags to pass through to the re module, e.g. re.IGNORECASE.\n> \n> **TRUNCATER**  \n> truncate : *boolean, default {truncate}*  \n>\n>     Set to False to not truncate items.\n>\n> trunc_limit : *int, default {truncate_word_limit}*  \n>\n>     The number of words beyond which an item will be truncated.\n>\n\nThe module contains a [configuration file](humannotator/config.ini) in which some of the default behaviour of the humannotator can be configured.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/lcvriend/humannotator", "keywords": "annotation annotator text data pandas", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "humannotator", "package_url": "https://pypi.org/project/humannotator/", "platform": "", "project_url": "https://pypi.org/project/humannotator/", "project_urls": {"Homepage": "http://github.com/lcvriend/humannotator"}, "release_url": "https://pypi.org/project/humannotator/0.0.3/", "requires_dist": ["pandas (>=0.24.0)", "markdown"], "requires_python": ">=3.6", "summary": "Customizable tool for easy manual annotation", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Humannotator</h1>\n<p><strong>Library for conveniently creating simple customizable annotators\nfor manual annotation of your data</strong><br>\n<em>Jenia Kim, Lawrence Vriend</em></p>\n<p>Works well with Jupyter notebooks:</p>\n<p><a href=\"https://mybinder.org/v2/gh/lcvriend/humannotator/master?filepath=examples%2Fexamples.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<h2>Use case</h2>\n<p>The humannotator provides an easy way to set up custom annotators.\nThis tool is for you if manual annotation is part of your workflow\nand you are looking for a solution that is:</p>\n<ul>\n<li>Lightweight</li>\n<li>Customizable</li>\n<li>Easy to set up</li>\n<li>Integrates with Jupyter/pandas/Python</li>\n</ul>\n<h2>Quick start</h2>\n<h3>Install the humannotator</h3>\n<p>Install with conda:</p>\n<pre><code>    conda install -c lcvriend humannotator\n</code></pre>\n<p>Or use pip:</p>\n<pre><code>    pip install humannotator\n</code></pre>\n<h3>Create a simple annotator</h3>\n<ol>\n<li><a href=\"#load-data\" rel=\"nofollow\">Load the data</a></li>\n<li><a href=\"#define-tasks\" rel=\"nofollow\">Define the tasks</a></li>\n<li><a href=\"#annotator\" rel=\"nofollow\">Instantiate the annotator</a></li>\n</ol>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">humannotator</span> <span class=\"kn\">import</span> <span class=\"n\">Annotator</span>\n\n    <span class=\"c1\"># load data</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'examples/popcorn_classics.csv'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set up the annotator</span>\n    <span class=\"n\">ratings</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'One bag'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Two bags'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Three bags'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Four bags'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Five-bagger'</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">annotator</span> <span class=\"o\">=</span> <span class=\"n\">Annotator</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'VFA | Rate my popcorn classics'</span><span class=\"p\">)</span>\n    <span class=\"n\">annotator</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s1\">'Bags of popcorn'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ratings</span>\n\n    <span class=\"c1\"># run annotator</span>\n    <span class=\"n\">annotator</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'GT'</span><span class=\"p\">)</span>\n</pre>\n<p>In Jupyter this gives:</p>\n<img alt=\"Humannotator\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b46f8985c24c37e4382dba698c280ed57309e915/6578616d706c65732f706f70636f726e5f636c6173736963732e706e67\" width=\"726\">\n<h3>Annotate your data</h3>\n<ul>\n<li>Use the annotator by calling it: <code>annotator()</code>.</li>\n<li>The annotator keeps track of where you were.</li>\n<li>Highlight phrases with the 'phrases' argument.</li>\n<li>The annotator stores user (if provided) and timestamp with the annotation.</li>\n</ul>\n<h3>Access your annotations</h3>\n<ul>\n<li>The annotations are conveniently stored in a pandas <code>DataFrame</code>.</li>\n<li>Access the annotations with the <code>annotated</code> attribute.</li>\n<li>Get the indeces of the records without annotation with <code>unannotated</code>.</li>\n<li>Return the data merged with its annotations with the <code>merged</code> method.</li>\n</ul>\n<h3>Store your annotations</h3>\n<ul>\n<li>Store the annotator with the <code>save</code> method.</li>\n<li>Load the annotator with the <code>load</code> method.</li>\n</ul>\n<h2>Load data</h2>\n<p>The annotator accepts <code>list</code>, <code>dict</code>, <code>Series</code> and <code>DataFrame</code> objects as data.<br>\nThe data will be converted to a dataframe internally.</p>\n<h3>Dataframes</h3>\n<ul>\n<li>By default, the annotator will use the dataframe's <code>index</code> and all <code>columns</code>.</li>\n<li>Use <code>load_data</code> to easily create a <code>data</code> object if you need more control:\n<ol>\n<li><code>id_col</code> sets the column to be used as index.</li>\n<li><code>item_cols</code> set the column or columns to be displayed.</li>\n</ol>\n</li>\n</ul>\n<h2>Define tasks</h2>\n<p>Tasks can be set up through subscription or with the <code>task_factory</code>.</p>\n<h3>Setting up tasks with the task factory</h3>\n<p>Create a task by passing <code>task_factory</code>:</p>\n<ul>\n<li>the <code>kind</code> of task</li>\n<li>the <code>name</code> of the task</li>\n<li>(optionally) an <code>instruction</code></li>\n<li>(optionally) a list of <code>dependencies</code></li>\n<li>whether it is <code>nullable</code> (default is False)</li>\n<li>any <a href=\"#Available-tasks\" rel=\"nofollow\">kwargs</a> necessary (depends on the kind of task)</li>\n</ul>\n<p>Typically:</p>\n<pre>    <span class=\"n\">task_factory</span><span class=\"p\">(</span>\n        <span class=\"s1\">'kind'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">,</span>\n        <span class=\"n\">instruction</span><span class=\"o\">=</span><span class=\"s1\">'instruction'</span><span class=\"p\">,</span>\n        <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"n\">dependencies</span><span class=\"p\">,</span>\n        <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"o\">/</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Passing a dict or list to <code>kind</code> will create a categorical task.<br>\nIn this case the <code>categories</code> kwarg is ignored.</p>\n<h3>Setting up tasks through subscription</h3>\n<p>It is also possible to instantiate an annotator and add tasks through subscription:</p>\n<pre>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Annotator</span><span class=\"p\">()</span>\n    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s1\">'topic'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'economy'</span><span class=\"p\">,</span> <span class=\"s1\">'politics'</span><span class=\"p\">,</span> <span class=\"s1\">'media'</span><span class=\"p\">,</span> <span class=\"s1\">'other'</span><span class=\"p\">]</span>\n    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s1\">'factual'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"s2\">\"Is the article factual?\"</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n</pre>\n<p>To add a task like this, you minimally need to provide the <code>kind</code> of task you are trying to create.\nOptionally, you can add <code>instruction</code>, <code>nullability</code>, <code>dependencies</code> and any other kwargs (as dictionary).\nChange the order in which tasks are prompted to the user with the <code>order</code> attribute on <code>tasks</code>.</p>\n<h3>Available tasks</h3>\n<table>\n<thead>\n<tr>\n<th>kind</th>\n<th>kwargs</th>\n<th>dtype</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>str</td>\n<td></td>\n<td>object</td>\n<td>String</td>\n</tr>\n<tr>\n<td>regex</td>\n<td>regex</td>\n<td>object</td>\n<td>String validated by regex</td>\n</tr>\n<tr>\n<td>int</td>\n<td></td>\n<td>Int64</td>\n<td>Nullable integer</td>\n</tr>\n<tr>\n<td>float</td>\n<td></td>\n<td>float64</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>bool</td>\n<td></td>\n<td>bool</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>category</td>\n<td>categories</td>\n<td>CategoricalDtype</td>\n<td>Categorical variable</td>\n</tr>\n<tr>\n<td>date</td>\n<td></td>\n<td>datetime64[ns]</td>\n<td>Date</td>\n</tr></tbody></table>\n<h3>Dependencies</h3>\n<p>Dependencies consist of a <em>condition</em> and a <em>value</em>, that can be passed as tuple:</p>\n<pre>    <span class=\"p\">(</span><span class=\"s2\">\"col1 == 'x'\"</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>The condition is a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query\" rel=\"nofollow\">pandas query statement</a>.\nBefore prompting the user for input, the condition is evaluated on the current annotation.\nIf the query evaluates to True then the value will be assigned automatically.</p>\n<h2>Annotator</h2>\n<h3>Calling the annotator</h3>\n<p>The annotator detects if it is run from Jupyter.\nIf so, the annotator will render itself in html and css.\nIf not, the annotator will render itself as text.\nYou can annotate a selection of records by passing a list of ids to the annotator call. If you want to reannotate ids that have already been annotated, then set <code>redo</code> to True when calling the annotator.</p>\n<h3>Instantiating the annotator</h3>\n<blockquote>\n<h2>arguments</h2>\n<p>tasks : <em>Task, list of Task objects, Tasks, Annotations or DataFrame</em></p>\n<pre><code>Annotation task(s).\nIf passed a DataFrame, then the tasks will be inferred from it.\nAnnotation data in the dataframe will also be initialized.\n</code></pre>\n<p>data : <em>data, list-/dict-like, Series or DataFrame, default None</em></p>\n<pre><code>Data to be annotated.\nIf `data` is not already a data object,\nthen it will be passed through `load_data`.\nThe annotator can be instantiated without data,\nbut will only work after data is loaded.\n</code></pre>\n<p>user : <em>str, default None</em></p>\n<pre><code>Name of the user.\n</code></pre>\n<p>name : <em>str, default 'HUMANNOTATOR'</em></p>\n<pre><code>Name of the annotator.\n</code></pre>\n<p>save_data : <em>boolean, default False</em></p>\n<pre><code>Set flag to True if you want to store the data with the annotator.\nThis will ensure that the pickled object, will contain the data.\n</code></pre>\n<h2>other parameters</h2>\n<p><strong>DISPLAY</strong><br>\ntext_display : <em>boolean, default None</em></p>\n<pre><code>If True will display the annotator in plain text instead of html.\n</code></pre>\n<p><strong>HTML</strong></p>\n<p>markdown : <em>boolean, default {markdown}</em></p>\n<pre><code> If True will pass values through markdown before rendering.\n</code></pre>\n<p>markdown_extensions : <em>list, default {markdown_extensions}</em></p>\n<pre><code> List of markdown extensions to apply.\n</code></pre>\n<p>escape_html : <em>boolean, default {escape_html}</em></p>\n<pre><code>If true will escape html content within items.\n</code></pre>\n<p>maxheight : <em>str, default '{maxheight_items}'</em></p>\n<pre><code>Max height before item gets y-scroll bar.\nSet to None to have no maximum.\n</code></pre>\n<p><strong>DATA</strong><br>\nitem_cols : <em>str or list of str, default None</em></p>\n<pre><code>Name(s) of dataframe column(s) to display when annotating.\nBy default: display all columns.\n</code></pre>\n<p>id_col : <em>str, default None</em></p>\n<pre><code>Name of dataframe column to use as index.\nBy default: use the dataframe's index.\n</code></pre>\n<p><strong>HIGHLIGHTER</strong><br>\nphrases : <em>str, list of str, default None</em></p>\n<pre><code>Phrases to highlight in the display.\nThe phrases can be regexes.\nIt also to pass in a dict where:\n- the keys are the phrases\n- the values are the css styling\n</code></pre>\n<p>escape : <em>boolean, default False</em></p>\n<pre><code>Set escape to True in order to escape the phrases.\n</code></pre>\n<p>flags : <em>int, default 0 (no flags)</em></p>\n<pre><code>Flags to pass through to the re module, e.g. re.IGNORECASE.\n</code></pre>\n<p><strong>TRUNCATER</strong><br>\ntruncate : <em>boolean, default {truncate}</em></p>\n<pre><code>Set to False to not truncate items.\n</code></pre>\n<p>trunc_limit : <em>int, default {truncate_word_limit}</em></p>\n<pre><code>The number of words beyond which an item will be truncated.\n</code></pre>\n</blockquote>\n<p>The module contains a <a href=\"humannotator/config.ini\" rel=\"nofollow\">configuration file</a> in which some of the default behaviour of the humannotator can be configured.</p>\n\n          </div>"}, "last_serial": 6410886, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "72e6c7187e97ecaa8fcbdbfc2fd5997c", "sha256": "42e770b231b3579115ad2ba7307cd34638d3299c275c4a65b37bf94874c26963"}, "downloads": -1, "filename": "humannotator-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "72e6c7187e97ecaa8fcbdbfc2fd5997c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 47947, "upload_time": "2019-10-05T17:18:30", "upload_time_iso_8601": "2019-10-05T17:18:30.856036Z", "url": "https://files.pythonhosted.org/packages/c3/d5/4a904086009bd4786654750e8e049af65d9b4e61fd6d10763670c153d01a/humannotator-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89c99dfc6a02f5aa832b248af248cf08", "sha256": "2c1b26208157ebaf1bc16bcecbb7d035c495a8208b0ebcfb98404283c3add3d1"}, "downloads": -1, "filename": "humannotator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "89c99dfc6a02f5aa832b248af248cf08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27451, "upload_time": "2019-10-05T17:18:33", "upload_time_iso_8601": "2019-10-05T17:18:33.706394Z", "url": "https://files.pythonhosted.org/packages/45/9f/2ec9c92b6ac78e2c82aa079f56bee42b108ba18bc685673720c5653aebe9/humannotator-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "75b20c2a5acdde6adcd63ddb8ada188c", "sha256": "6da40fccffd11b4e6cc82b44bd84a453dd794f315dc247477ec35ca405e4f8c4"}, "downloads": -1, "filename": "humannotator-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "75b20c2a5acdde6adcd63ddb8ada188c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49097, "upload_time": "2019-11-04T20:24:00", "upload_time_iso_8601": "2019-11-04T20:24:00.398900Z", "url": "https://files.pythonhosted.org/packages/34/80/d6fdc8b5c0149614f6ae5924c4c233c37bc2be08abdc400b7afabd11a759/humannotator-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6339c090aae74fa4edea2261e70d95d6", "sha256": "5fe9d68e5715b070f14de14d5e1e2f284a9b0bbc73b8779b4f3f66676c7acbca"}, "downloads": -1, "filename": "humannotator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6339c090aae74fa4edea2261e70d95d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28884, "upload_time": "2019-11-04T20:24:03", "upload_time_iso_8601": "2019-11-04T20:24:03.759359Z", "url": "https://files.pythonhosted.org/packages/d7/77/69107396c9343e9ff60530b8d448179d32e64c8efd20d239c051e43ab0ed/humannotator-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "55b1f8b4785958c7625451c906f5474d", "sha256": "855be9499234780b145e0eb5ae1c87fdc1e5c79d322f7f466decca16ce1dd98e"}, "downloads": -1, "filename": "humannotator-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "55b1f8b4785958c7625451c906f5474d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49880, "upload_time": "2020-01-07T20:59:13", "upload_time_iso_8601": "2020-01-07T20:59:13.700924Z", "url": "https://files.pythonhosted.org/packages/1e/2b/6db3892bc7c72bbf6776458e8efeb9db7cc897a6fb23afac1716f0d72eec/humannotator-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee6617f766dbd936ced079c03235003c", "sha256": "7c3f49e541a0810624c2d27bfdc45c890cb7b7a9ba4a93fca395fafe30e7d50b"}, "downloads": -1, "filename": "humannotator-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ee6617f766dbd936ced079c03235003c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29834, "upload_time": "2020-01-07T20:59:17", "upload_time_iso_8601": "2020-01-07T20:59:17.568258Z", "url": "https://files.pythonhosted.org/packages/0d/2a/682df18374a76bc4fd472796771224e5888803941e2badc3f0fcefabcdf4/humannotator-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55b1f8b4785958c7625451c906f5474d", "sha256": "855be9499234780b145e0eb5ae1c87fdc1e5c79d322f7f466decca16ce1dd98e"}, "downloads": -1, "filename": "humannotator-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "55b1f8b4785958c7625451c906f5474d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49880, "upload_time": "2020-01-07T20:59:13", "upload_time_iso_8601": "2020-01-07T20:59:13.700924Z", "url": "https://files.pythonhosted.org/packages/1e/2b/6db3892bc7c72bbf6776458e8efeb9db7cc897a6fb23afac1716f0d72eec/humannotator-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee6617f766dbd936ced079c03235003c", "sha256": "7c3f49e541a0810624c2d27bfdc45c890cb7b7a9ba4a93fca395fafe30e7d50b"}, "downloads": -1, "filename": "humannotator-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ee6617f766dbd936ced079c03235003c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29834, "upload_time": "2020-01-07T20:59:17", "upload_time_iso_8601": "2020-01-07T20:59:17.568258Z", "url": "https://files.pythonhosted.org/packages/0d/2a/682df18374a76bc4fd472796771224e5888803941e2badc3f0fcefabcdf4/humannotator-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:52 2020"}