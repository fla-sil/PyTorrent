{"info": {"author": "Liwen Sun, Benno Rice, Richard Jones and Jens Engel", "author_email": "behave-users@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: Jython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing"], "description": ".. image:: https://travis-ci.org/sunliwen/behave.png?branch=py3\n    :target: https://travis-ci.org/sunliwen/behave\n    :alt: Travis CI Build Status\n\n.. image:: https://pypip.in/v/behave-py3/badge.png\n    :target: https://pypi.python.org/pypi/behave-py3\n    :alt: Latest Version\n\n.. image:: https://pypip.in/d/behave-py3/badge.png\n    :target: https://pypi.python.org/pypi/behave-py3\n    :alt: Downloads\n\n.. image:: https://pypip.in/license/behave-py3/badge.png\n    :target: https://pypi.python.org/pypi/behave-py3/\n    :alt: License\n\n.. |logo| image:: https://raw.github.com/behave/behave/master/docs/_static/behave_logo1.png\n\nbehave is behavior-driven development, Python style.\n\n|logo|\n\nBehavior-driven development (or BDD) is an agile software development\ntechnique that encourages collaboration between developers, QA and\nnon-technical or business participants in a software project.\n\n*behave* uses tests written in a natural language style, backed up by Python\ncode.\n\nFirst, `install *behave*.`_\n\n\nNow make a directory called \"features/\".\nIn that directory create a file called \"example.feature\" containing:\n\n.. code-block:: gherkin\n\n    # -- FILE: features/example.feature\n    Feature: Showing off behave\n\n      Scenario: Run a simple test\n        Given we have behave installed\n         When we implement 5 tests\n         Then behave will test them for us!\n\nMake a new directory called \"features/steps/\".\nIn that directory create a file called \"example_steps.py\" containing:\n\n.. code-block:: python\n\n    # -- FILE: features/steps/example_steps.py\n    from behave import given, when, then, step\n\n    @given('we have behave installed')\n    def step_impl(context):\n        pass\n\n    @when('we implement {number:d} tests')\n    def step_impl(context, number):  # -- NOTE: number is converted into integer\n        assert number > 1 or number == 0\n        context.tests_count = number\n\n    @then('behave will test them for us!')\n    def step_impl(context):\n        assert context.failed is False\n        assert context.tests_count >= 0\n\nRun behave:\n\n.. code-block:: bash\n\n    $ behave\n    Feature: Showin off behave # features/example.feature:2\n\n      Scenario: Run a simple test          # features/example.feature:4\n        Given we have behave installed     # features/steps/example_steps.py:4\n        When we implement 5 tests          # features/steps/example_steps.py:8\n        Then behave will test them for us! # features/steps/example_steps.py:13\n\n    1 feature passed, 0 failed, 0 skipped\n    1 scenario passed, 0 failed, 0 skipped\n    3 steps passed, 0 failed, 0 skipped, 0 undefined\n\nNow, continue reading to learn how to the most of *behave*. To get started,\nwe recommend the `tutorial`_ and then the `feature testing language`_ and\n`api`_ references.\n\n\n.. _`Install *behave*.`: http://pythonhosted.org/behave/install.html\n.. _`tutorial`: http://pythonhosted.org/behave/tutorial.html#features\n.. _`feature testing language`: http://pythonhosted.org/behave/gherkin.html\n.. _`api`: http://pythonhosted.org/behave/api.html\n\n\nMore Information\n-------------------------------------------------------------------------------\n\n* `behave documentation`_ (`latest changes`_)\n* `behave.example`_: Behave Examples and Tutorials (docs, executable examples).\n\n.. _behave documentation: http://pythonhosted.org/behave/\n.. _latest changes: https://github.com/behave/behave/blob/master/CHANGES.rst\n.. _behave.example: https://github.com/jenisys/behave.example\n\n\nTesting Domains\n-------------------------------------------------------------------------------\n\nBehave and other BDD frameworks allow you to provide **step libraries**\nto reuse step definitions in similar projects that address the same \nproblem domain.\n\nSupport of the following testing domains is currently known:\n\n=============== ================= =========================================================\nTesting Domain   Name              Description\n=============== ================= =========================================================\nCommand-line    `behave4cmd`_     Test command-line tools, like behave, etc. (coming soon).\nWeb Apps        `django-behave`_  Test Django Web apps with behave.\nWeb, SMS, ...   `behaving`_       Test Web Apps, Email, SMS, Personas (step library).\n=============== ================= =========================================================\n\n.. _behave4cmd: https://github.com/jenisys/behave4cmd\n.. _django-behave: https://github.com/rwillmer/django-behave\n.. _behaving: https://github.com/ggozad/behaving", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/sunliwen/behave", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "behave-py3", "package_url": "https://pypi.org/project/behave-py3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/behave-py3/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/sunliwen/behave"}, "release_url": "https://pypi.org/project/behave-py3/1.2.5-r2014122202/", "requires_dist": null, "requires_python": null, "summary": "behave is behaviour-driven development, Python style.behave-py3 is a personal fork with python 3 support.Hope it could be merged back to upstream.", "version": "1.2.5-r2014122202", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/sunliwen/behave\" rel=\"nofollow\"><img alt=\"Travis CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78e36b1b6c83d36b0c20edfbc0444c5479f7b3b5/68747470733a2f2f7472617669732d63692e6f72672f73756e6c6977656e2f6265686176652e706e673f6272616e63683d707933\"></a>\n<a href=\"https://pypi.python.org/pypi/behave-py3\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/922b2b39017c150f1e60b87b1ecd29f3e60cfff3/68747470733a2f2f70797069702e696e2f762f6265686176652d7079332f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/behave-py3\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4cb827d8a384a5244cdc2e211aeb5b2dc35abc56/68747470733a2f2f70797069702e696e2f642f6265686176652d7079332f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/behave-py3/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8a849c492fe3d79f59fcbbf3cb25e638d4b5c90/68747470733a2f2f70797069702e696e2f6c6963656e73652f6265686176652d7079332f62616467652e706e67\"></a>\n<p>behave is behavior-driven development, Python style.</p>\n<p><img alt=\"logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b046ad42380f4a376f5df7074ae8fff346de56a/68747470733a2f2f7261772e6769746875622e636f6d2f6265686176652f6265686176652f6d61737465722f646f63732f5f7374617469632f6265686176655f6c6f676f312e706e67\"></p>\n<p>Behavior-driven development (or BDD) is an agile software development\ntechnique that encourages collaboration between developers, QA and\nnon-technical or business participants in a software project.</p>\n<p><em>behave</em> uses tests written in a natural language style, backed up by Python\ncode.</p>\n<p>First, <a href=\"http://pythonhosted.org/behave/install.html\" rel=\"nofollow\">install *behave*.</a></p>\n<p>Now make a directory called \u201cfeatures/\u201d.\nIn that directory create a file called \u201cexample.feature\u201d containing:</p>\n<pre><span class=\"c\"># -- FILE: features/example.feature</span><span class=\"nf\">\n</span><span class=\"k\">Feature:</span><span class=\"nf\"> Showing off behave\n\n  </span><span class=\"k\">Scenario:</span><span class=\"nf\"> Run a simple test\n</span><span class=\"k\">    Given </span><span class=\"nf\">we have behave installed\n     </span><span class=\"k\">When </span><span class=\"nf\">we implement </span><span class=\"s\">5</span><span class=\"nf\"> tests</span><span class=\"k\"></span><span class=\"nf\">\n     </span><span class=\"k\">Then </span><span class=\"nf\">behave will test them for us!</span><span class=\"k\"></span>\n</pre>\n<p>Make a new directory called \u201cfeatures/steps/\u201d.\nIn that directory create a file called \u201cexample_steps.py\u201d containing:</p>\n<pre><span class=\"c1\"># -- FILE: features/steps/example_steps.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">behave</span> <span class=\"kn\">import</span> <span class=\"n\">given</span><span class=\"p\">,</span> <span class=\"n\">when</span><span class=\"p\">,</span> <span class=\"n\">then</span><span class=\"p\">,</span> <span class=\"n\">step</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"s1\">'we have behave installed'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"s1\">'we implement </span><span class=\"si\">{number:d}</span><span class=\"s1\"> tests'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">):</span>  <span class=\"c1\"># -- NOTE: number is converted into integer</span>\n    <span class=\"k\">assert</span> <span class=\"n\">number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"n\">number</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">tests_count</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n<span class=\"nd\">@then</span><span class=\"p\">(</span><span class=\"s1\">'behave will test them for us!'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">failed</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n    <span class=\"k\">assert</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">tests_count</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n</pre>\n<p>Run behave:</p>\n<pre>$ behave\nFeature: Showin off behave <span class=\"c1\"># features/example.feature:2\n</span>\n  Scenario: Run a simple <span class=\"nb\">test</span>          <span class=\"c1\"># features/example.feature:4\n</span>    Given we have behave installed     <span class=\"c1\"># features/steps/example_steps.py:4\n</span>    When we implement <span class=\"m\">5</span> tests          <span class=\"c1\"># features/steps/example_steps.py:8\n</span>    Then behave will <span class=\"nb\">test</span> them <span class=\"k\">for</span> us! <span class=\"c1\"># features/steps/example_steps.py:13\n</span>\n<span class=\"m\">1</span> feature passed, <span class=\"m\">0</span> failed, <span class=\"m\">0</span> skipped\n<span class=\"m\">1</span> scenario passed, <span class=\"m\">0</span> failed, <span class=\"m\">0</span> skipped\n<span class=\"m\">3</span> steps passed, <span class=\"m\">0</span> failed, <span class=\"m\">0</span> skipped, <span class=\"m\">0</span> undefined\n</pre>\n<p>Now, continue reading to learn how to the most of <em>behave</em>. To get started,\nwe recommend the <a href=\"http://pythonhosted.org/behave/tutorial.html#features\" rel=\"nofollow\">tutorial</a> and then the <a href=\"http://pythonhosted.org/behave/gherkin.html\" rel=\"nofollow\">feature testing language</a> and\n<a href=\"http://pythonhosted.org/behave/api.html\" rel=\"nofollow\">api</a> references.</p>\n<div id=\"more-information\">\n<h2>More Information</h2>\n<ul>\n<li><a href=\"http://pythonhosted.org/behave/\" rel=\"nofollow\">behave documentation</a> (<a href=\"https://github.com/behave/behave/blob/master/CHANGES.rst\" rel=\"nofollow\">latest changes</a>)</li>\n<li><a href=\"https://github.com/jenisys/behave.example\" rel=\"nofollow\">behave.example</a>: Behave Examples and Tutorials (docs, executable examples).</li>\n</ul>\n</div>\n<div id=\"testing-domains\">\n<h2>Testing Domains</h2>\n<p>Behave and other BDD frameworks allow you to provide <strong>step libraries</strong>\nto reuse step definitions in similar projects that address the same\nproblem domain.</p>\n<p>Support of the following testing domains is currently known:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Testing Domain</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Command-line</td>\n<td><a href=\"https://github.com/jenisys/behave4cmd\" rel=\"nofollow\">behave4cmd</a></td>\n<td>Test command-line tools, like behave, etc. (coming soon).</td>\n</tr>\n<tr><td>Web Apps</td>\n<td><a href=\"https://github.com/rwillmer/django-behave\" rel=\"nofollow\">django-behave</a></td>\n<td>Test Django Web apps with behave.</td>\n</tr>\n<tr><td>Web, SMS, \u2026</td>\n<td><a href=\"https://github.com/ggozad/behaving\" rel=\"nofollow\">behaving</a></td>\n<td>Test Web Apps, Email, SMS, Personas (step library).</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 2227539, "releases": {"1.2.5-r2014122202": [{"comment_text": "", "digests": {"md5": "e84b228d687da03bb84c90574b3af673", "sha256": "9a141fcd400face03b497a714f738116846f2feb5a6f581d8bfe2dd669d11963"}, "downloads": -1, "filename": "behave-py3-1.2.5-r2014122202.tar.gz", "has_sig": false, "md5_digest": "e84b228d687da03bb84c90574b3af673", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 369964, "upload_time": "2014-12-22T05:20:13", "upload_time_iso_8601": "2014-12-22T05:20:13.000547Z", "url": "https://files.pythonhosted.org/packages/17/81/2f15b1ec648d9459eb9356d40a1ebd1a73faa1093e069bcecee5b1bfd493/behave-py3-1.2.5-r2014122202.tar.gz", "yanked": false}], "1.2.5a1": [{"comment_text": "", "digests": {"md5": "e5bd1ff18fd843a12d3a2d8ae0fce69c", "sha256": "51b53a9a3e5e100f4906110b16cc94914f7379e54920ba9e8e80f13d38965042"}, "downloads": -1, "filename": "behave-py3-1.2.5a1.tar.gz", "has_sig": false, "md5_digest": "e5bd1ff18fd843a12d3a2d8ae0fce69c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 369928, "upload_time": "2014-12-22T05:01:47", "upload_time_iso_8601": "2014-12-22T05:01:47.446309Z", "url": "https://files.pythonhosted.org/packages/4f/a5/b54be15475e23dc957063c84a333ea73b226c23f5bcc9bb071b2d4fa9d62/behave-py3-1.2.5a1.tar.gz", "yanked": false}], "1.2.5a1-2014122201": [{"comment_text": "", "digests": {"md5": "63cf7a55959ed46fed3a2bb657ea0bc9", "sha256": "42f16a2d06a14e1490db6ca51e2408b5161a1753d3a56bde48bcbab1d39f3e2f"}, "downloads": -1, "filename": "behave-py3-1.2.5a1-2014122201.tar.gz", "has_sig": false, "md5_digest": "63cf7a55959ed46fed3a2bb657ea0bc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 369998, "upload_time": "2014-12-22T05:10:38", "upload_time_iso_8601": "2014-12-22T05:10:38.311807Z", "url": "https://files.pythonhosted.org/packages/70/7a/f1ff0ce20c5285f759c549f002b65241970f3b4d41e71d0f2d35652548c9/behave-py3-1.2.5a1-2014122201.tar.gz", "yanked": false}], "1.2.5a1-2014122202": [{"comment_text": "", "digests": {"md5": "8a7e8962055913498a249274a83b176d", "sha256": "a6ad944c26a03ef5333c3482fe93b2917fbcb3bd027853cfa2c975fe85d90494"}, "downloads": -1, "filename": "behave-py3-1.2.5a1-2014122202.tar.gz", "has_sig": false, "md5_digest": "8a7e8962055913498a249274a83b176d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 369991, "upload_time": "2014-12-22T05:13:07", "upload_time_iso_8601": "2014-12-22T05:13:07.643954Z", "url": "https://files.pythonhosted.org/packages/a5/22/6cc9a4b47fe5f74b6213b30d8c41fbb04e963913d39aadb84c3dce3b2cb4/behave-py3-1.2.5a1-2014122202.tar.gz", "yanked": false}], "1.2.5a1-r2014122202": [{"comment_text": "", "digests": {"md5": "a7ba9b57172ba68aedc9ec0e07643ac8", "sha256": "48f94af701f8ce1f1c07eb377ef8b39cba060ea7f5f7d8dcc1acda9abfa53bf7"}, "downloads": -1, "filename": "behave-py3-1.2.5a1-r2014122202.tar.gz", "has_sig": false, "md5_digest": "a7ba9b57172ba68aedc9ec0e07643ac8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 369986, "upload_time": "2014-12-22T05:18:21", "upload_time_iso_8601": "2014-12-22T05:18:21.207785Z", "url": "https://files.pythonhosted.org/packages/a7/50/8d7ef19786499685e4683538352ea7fa346bf0904c330e53a958afc53ffe/behave-py3-1.2.5a1-r2014122202.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e84b228d687da03bb84c90574b3af673", "sha256": "9a141fcd400face03b497a714f738116846f2feb5a6f581d8bfe2dd669d11963"}, "downloads": -1, "filename": "behave-py3-1.2.5-r2014122202.tar.gz", "has_sig": false, "md5_digest": "e84b228d687da03bb84c90574b3af673", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 369964, "upload_time": "2014-12-22T05:20:13", "upload_time_iso_8601": "2014-12-22T05:20:13.000547Z", "url": "https://files.pythonhosted.org/packages/17/81/2f15b1ec648d9459eb9356d40a1ebd1a73faa1093e069bcecee5b1bfd493/behave-py3-1.2.5-r2014122202.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:50 2020"}