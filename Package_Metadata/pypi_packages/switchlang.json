{"info": {"author": "Michael Kennedy", "author_email": "michael@talkpython.fm", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# switchlang\n[![](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/) \n[![](https://img.shields.io/pypi/l/markdown-subtemplate.svg)](https://github.com/mikeckennedy/python-switch/blob/master/LICENSE)\n[![](https://img.shields.io/pypi/dm/python-switch.svg)](https://test.pypi.org/project/switchlang/)\n\n\nAdds switch blocks to the Python language.\n\nThis module adds explicit switch functionality to Python \nwithout changing the language. It builds upon a standard\nway to define execution blocks: the `with` statement.\n\n## Example\n\n```python\nfrom switchlang import switch\n\nnum = 7\nval = input(\"Enter a character, a, b, c or any other: \")\n\nwith switch(val) as s:\n    s.case('a', process_a)\n    s.case('b', lambda: process_with_data(val, num, 'other values still'))\n    s.default(process_any)\n\ndef process_a():\n    print(\"Found A!\")\n\ndef process_any():\n    print(\"Found Default!\")\n\ndef process_with_data(*value):\n    print(\"Found with data: {}\".format(value))\n``` \n\n## Installation\n\nSimply install via pip:\n\n```bash\npip install switchlang\n```\n\n## Features\n\n* More explicit than using dictionaries with functions as values.\n* Verifies the signatures of the methods\n* Supports default case\n* Checks for duplicate keys / cases\n* Keys can be anything hashable (numbers, strings, objects, etc.)\n* Could be extended for \"fall-through\" cases (doesn't yet)\n* Use range and list for multiple cases mapped to a single action\n\n## Multiple cases, one action\n\nYou can map ranges and lists of cases to a single action as follows:\n\n```python\n# with lists:\nvalue = 4  # matches even number case\n\nwith switch(value) as s:\n    s.case([1, 3, 5, 7], lambda: ...)\n    s.case([0, 2, 4, 6, 8], lambda: ...)\n    s.default(lambda: ...)\n```\n\n```python\n# with ranges:\nvalue = 4  # matches first case\n\nwith switch(value) as s:\n    s.case(range(1, 6), lambda: ...)\n    s.case(range(6, 10), lambda: ...)\n    s.default(lambda: ...)\n```\n\n## Closed vs. Open ranges\n\nLooking at the above code it's a bit weird that 6 appears \nat the end of one case, beginning of the next. But `range()` is\nhalf open/closed. \n\nTo handle the inclusive case, I've added `closed_range(start, stop)`.\nFor example, `closed_range(1,5)` -> `[1,2,3,4,5]` \n\n## Why not just raw `dict`?\n\nThe biggest push back on this idea is that we already have this problem solved.\nYou write the following code.\n\n```python\nswitch = {\n    1: method_on_one,\n    2: method_on_two,\n    3: method_three\n}\n\nresult = switch.get(value, default_method_to_run)()\n```\n\nThis works but is very low on the functionality level. We have a better solution here \nI believe. Let's take this example and see how it looks in python-switch vs raw dicts:\n\n```python\n# with python-switch:\n\nwhile True:\n    action = get_action(action)\n\n    with switch(action) as s:\n        s.case(['c', 'a'], create_account)\n        s.case('l', log_into_account)\n        s.case('r', register_cage)\n        s.case('u', update_availability)\n        s.case(['v', 'b'], view_bookings)\n        s.case('x', exit_app)\n        s.case('', lambda: None)\n        s.case(range(1,6), lambda: set_level(action))\n        s.default(unknown_command)\n\n    print('Result is {}'.format(s.result))\n```\n\nNow compare that to the espoused *pythonic* way:\n\n```python\n# with raw dicts\n\nwhile True:\n    action = get_action(action)\n\n    switch = {\n        'c': create_account,\n        'a': create_account,\n        'l': log_into_account,\n        'r': register_cage,\n        'u': update_availability,\n        'v': view_bookings,\n        'b': view_bookings,\n        'x': exit_app,\n        1: lambda: set_level(action),\n        2: lambda: set_level(action),\n        3: lambda: set_level(action),\n        4: lambda: set_level(action),\n        5: lambda: set_level(action),\n        '': lambda: None,\n    }\n    result = switch.get(action, unknown_command)()\n    print('Result is {}'.format(result))\n```\n\nPersonally, I much prefer to read and write the one above. That's why I wrote this module.\nIt seems to convey the intent of switch way more than the dict. But either are options.\n\n## Why not just `if / elif / else`?\n\nThe another push back on this idea is that we already have this problem solved.\nSwitch statements are really if / elif / else blocks. So you write the following code.\n\n```python\n# with if / elif / else\n\nwhile True:\n    action = get_action(action)\n\n    if action == 'c' or action == 'a':\n        result = create_account()\n    elif action == 'l':\n        result = log_into_account()\n    elif action == 'r':\n        result = register_cage()\n    elif action == 'a':\n        result = update_availability()\n    elif action == 'v' or action == 'b':\n        result = view_bookings()\n    elif action == 'x':\n        result = exit_app()\n    elif action in {1, 2, 3, 4, 5}:\n        result = set_level(action)\n    else:\n        unknown_command()\n\n    print('Result is {}'.format(result))\n```\n\nI actually believe this is a little better than the \n[raw dict option](https://github.com/mikeckennedy/python-switch#why-not-just-raw-dict).\nBut there are still things that are harder. \n\n* How would you deal with fall-through cleanly?\n* Did you notice the bug? We forgot to set result in default case (`else`) and will result in a runtime error (but only if that case hits).\n* There is another bug. Update `update_availability` will never run because it's command (`a`) is bound to two cases. \nThis is guarded against in switch and you would receive a duplicate case error the first time it runs at all.\n* While it's pretty clear, it's much more verbose and less declarative than the switch version. \n\nAgain, compare the if / elif / else to what you have with switch. This code is identical except \ndoesn't have the default case bug.\n\n```python\nwhile True:\n    action = get_action(action)\n\n    with switch(action) as s:\n        s.case(['c', 'a'], create_account)\n        s.case('l', log_into_account)\n        s.case('r', register_cage)\n        s.case('u', update_availability)\n        s.case(['v', 'b'], view_bookings)\n        s.case('x', exit_app)\n        s.case('', lambda: None)\n        s.case(range(1,6), lambda: set_level(action))\n        s.default(unknown_command)\n\n    print('Result is {}'.format(s.result))\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mikeckennedy/python-switch", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "switchlang", "package_url": "https://pypi.org/project/switchlang/", "platform": "", "project_url": "https://pypi.org/project/switchlang/", "project_urls": {"Homepage": "https://github.com/mikeckennedy/python-switch"}, "release_url": "https://pypi.org/project/switchlang/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Adds switch blocks to the Python language.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>switchlang</h1>\n<p><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a042d910c74fbce532a01da853019c164ef42a8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362b2d626c75652e737667\"></a>\n<a href=\"https://github.com/mikeckennedy/python-switch/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9521d570c249a7cdb4513ebe353a195b697ff028/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d61726b646f776e2d73756274656d706c6174652e737667\"></a>\n<a href=\"https://test.pypi.org/project/switchlang/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98c96c53bfe6d43b5aad18a5ae1aa990b55f2d8f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f707974686f6e2d7377697463682e737667\"></a></p>\n<p>Adds switch blocks to the Python language.</p>\n<p>This module adds explicit switch functionality to Python\nwithout changing the language. It builds upon a standard\nway to define execution blocks: the <code>with</code> statement.</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">switchlang</span> <span class=\"kn\">import</span> <span class=\"n\">switch</span>\n\n<span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Enter a character, a, b, c or any other: \"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">switch</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">process_a</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">process_with_data</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"s1\">'other values still'</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"n\">process_any</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_a</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Found A!\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_any</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Found Default!\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_with_data</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Found with data: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n</pre>\n<h2>Installation</h2>\n<p>Simply install via pip:</p>\n<pre>pip install switchlang\n</pre>\n<h2>Features</h2>\n<ul>\n<li>More explicit than using dictionaries with functions as values.</li>\n<li>Verifies the signatures of the methods</li>\n<li>Supports default case</li>\n<li>Checks for duplicate keys / cases</li>\n<li>Keys can be anything hashable (numbers, strings, objects, etc.)</li>\n<li>Could be extended for \"fall-through\" cases (doesn't yet)</li>\n<li>Use range and list for multiple cases mapped to a single action</li>\n</ul>\n<h2>Multiple cases, one action</h2>\n<p>You can map ranges and lists of cases to a single action as follows:</p>\n<pre><span class=\"c1\"># with lists:</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>  <span class=\"c1\"># matches even number case</span>\n\n<span class=\"k\">with</span> <span class=\"n\">switch</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># with ranges:</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>  <span class=\"c1\"># matches first case</span>\n\n<span class=\"k\">with</span> <span class=\"n\">switch</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h2>Closed vs. Open ranges</h2>\n<p>Looking at the above code it's a bit weird that 6 appears\nat the end of one case, beginning of the next. But <code>range()</code> is\nhalf open/closed.</p>\n<p>To handle the inclusive case, I've added <code>closed_range(start, stop)</code>.\nFor example, <code>closed_range(1,5)</code> -&gt; <code>[1,2,3,4,5]</code></p>\n<h2>Why not just raw <code>dict</code>?</h2>\n<p>The biggest push back on this idea is that we already have this problem solved.\nYou write the following code.</p>\n<pre><span class=\"n\">switch</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">method_on_one</span><span class=\"p\">,</span>\n    <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"n\">method_on_two</span><span class=\"p\">,</span>\n    <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"n\">method_three</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">switch</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">default_method_to_run</span><span class=\"p\">)()</span>\n</pre>\n<p>This works but is very low on the functionality level. We have a better solution here\nI believe. Let's take this example and see how it looks in python-switch vs raw dicts:</p>\n<pre><span class=\"c1\"># with python-switch:</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">get_action</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">switch</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">([</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">],</span> <span class=\"n\">create_account</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'l'</span><span class=\"p\">,</span> <span class=\"n\">log_into_account</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">register_cage</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'u'</span><span class=\"p\">,</span> <span class=\"n\">update_availability</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">([</span><span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">],</span> <span class=\"n\">view_bookings</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">exit_app</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">set_level</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">))</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"n\">unknown_command</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Result is </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">))</span>\n</pre>\n<p>Now compare that to the espoused <em>pythonic</em> way:</p>\n<pre><span class=\"c1\"># with raw dicts</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">get_action</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n\n    <span class=\"n\">switch</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"n\">create_account</span><span class=\"p\">,</span>\n        <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"n\">create_account</span><span class=\"p\">,</span>\n        <span class=\"s1\">'l'</span><span class=\"p\">:</span> <span class=\"n\">log_into_account</span><span class=\"p\">,</span>\n        <span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"n\">register_cage</span><span class=\"p\">,</span>\n        <span class=\"s1\">'u'</span><span class=\"p\">:</span> <span class=\"n\">update_availability</span><span class=\"p\">,</span>\n        <span class=\"s1\">'v'</span><span class=\"p\">:</span> <span class=\"n\">view_bookings</span><span class=\"p\">,</span>\n        <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"n\">view_bookings</span><span class=\"p\">,</span>\n        <span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"n\">exit_app</span><span class=\"p\">,</span>\n        <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">set_level</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">),</span>\n        <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">set_level</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">),</span>\n        <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">set_level</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">),</span>\n        <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">set_level</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">),</span>\n        <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">set_level</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">),</span>\n        <span class=\"s1\">''</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">switch</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">unknown_command</span><span class=\"p\">)()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Result is </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n</pre>\n<p>Personally, I much prefer to read and write the one above. That's why I wrote this module.\nIt seems to convey the intent of switch way more than the dict. But either are options.</p>\n<h2>Why not just <code>if / elif / else</code>?</h2>\n<p>The another push back on this idea is that we already have this problem solved.\nSwitch statements are really if / elif / else blocks. So you write the following code.</p>\n<pre><span class=\"c1\"># with if / elif / else</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">get_action</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">'c'</span> <span class=\"ow\">or</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">'a'</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">create_account</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">'l'</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">log_into_account</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">'r'</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">register_cage</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">'a'</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">update_availability</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">'v'</span> <span class=\"ow\">or</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">view_bookings</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">'x'</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">exit_app</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">}:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">set_level</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">unknown_command</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Result is </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n</pre>\n<p>I actually believe this is a little better than the\n<a href=\"https://github.com/mikeckennedy/python-switch#why-not-just-raw-dict\" rel=\"nofollow\">raw dict option</a>.\nBut there are still things that are harder.</p>\n<ul>\n<li>How would you deal with fall-through cleanly?</li>\n<li>Did you notice the bug? We forgot to set result in default case (<code>else</code>) and will result in a runtime error (but only if that case hits).</li>\n<li>There is another bug. Update <code>update_availability</code> will never run because it's command (<code>a</code>) is bound to two cases.\nThis is guarded against in switch and you would receive a duplicate case error the first time it runs at all.</li>\n<li>While it's pretty clear, it's much more verbose and less declarative than the switch version.</li>\n</ul>\n<p>Again, compare the if / elif / else to what you have with switch. This code is identical except\ndoesn't have the default case bug.</p>\n<pre><span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">get_action</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">switch</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">([</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">],</span> <span class=\"n\">create_account</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'l'</span><span class=\"p\">,</span> <span class=\"n\">log_into_account</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">register_cage</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'u'</span><span class=\"p\">,</span> <span class=\"n\">update_availability</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">([</span><span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">],</span> <span class=\"n\">view_bookings</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">exit_app</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">set_level</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">))</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"n\">unknown_command</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Result is </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 6852574, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "753e7776887c2ab46a7e4fb6f1d5f5d4", "sha256": "bb440c1e865bac15ad4230902c6bd4f4d737c0ec7ac5496c62d2028122af4bea"}, "downloads": -1, "filename": "switchlang-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "753e7776887c2ab46a7e4fb6f1d5f5d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6299, "upload_time": "2020-03-20T20:27:18", "upload_time_iso_8601": "2020-03-20T20:27:18.149284Z", "url": "https://files.pythonhosted.org/packages/06/c4/7c3745fcd6196939e8a0b9fab8c7d09e276b12e707190fff5599d10e6565/switchlang-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d58720757ae064c1c802a4dcc8e44b2d", "sha256": "9d19f7c58358edd08c7919f72bbb01bc0854570af6a39a9d94651a893ec01a82"}, "downloads": -1, "filename": "switchlang-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d58720757ae064c1c802a4dcc8e44b2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5573, "upload_time": "2020-03-20T20:27:20", "upload_time_iso_8601": "2020-03-20T20:27:20.566624Z", "url": "https://files.pythonhosted.org/packages/50/70/9942bda4d515eaf0f4fe92200c070d92968d23a3c01f3dd4b1c63ddbdeb3/switchlang-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "753e7776887c2ab46a7e4fb6f1d5f5d4", "sha256": "bb440c1e865bac15ad4230902c6bd4f4d737c0ec7ac5496c62d2028122af4bea"}, "downloads": -1, "filename": "switchlang-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "753e7776887c2ab46a7e4fb6f1d5f5d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6299, "upload_time": "2020-03-20T20:27:18", "upload_time_iso_8601": "2020-03-20T20:27:18.149284Z", "url": "https://files.pythonhosted.org/packages/06/c4/7c3745fcd6196939e8a0b9fab8c7d09e276b12e707190fff5599d10e6565/switchlang-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d58720757ae064c1c802a4dcc8e44b2d", "sha256": "9d19f7c58358edd08c7919f72bbb01bc0854570af6a39a9d94651a893ec01a82"}, "downloads": -1, "filename": "switchlang-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d58720757ae064c1c802a4dcc8e44b2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5573, "upload_time": "2020-03-20T20:27:20", "upload_time_iso_8601": "2020-03-20T20:27:20.566624Z", "url": "https://files.pythonhosted.org/packages/50/70/9942bda4d515eaf0f4fe92200c070d92968d23a3c01f3dd4b1c63ddbdeb3/switchlang-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:23 2020"}