{"info": {"author": "Todd Francis DeLuca", "author_email": "todddeluca@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "## Introduction\n\n\nThis idea is inspired by Git and Django, which assume projects are organized\nwithin a directory.  Many other applications and projects work this way, like\nRuby on Rails and Maven.\n\nMany projects, like source code repositories, web applications, etc., store\nlocations of code, configuration, scripts, virtual environments, etc., relative\nto the root directory of the project or application.\n\nWhen a script, application, executable, binary, program, or command is\nexecuted, it needs to find the root directory of the project it is supposed to\noperate on.  For example, `git status` only works when called from within\na git repository.  Alternatively, a Django `manage.py` script can be run from\nanywhere, yet it knows to operate on the web application it is located within.\n\nThere are two sub-organizing principles seen in project commands, based around\nhow they find the root directory of the project:\n\n- In the \"cwd\" approach, exemplified by `git`, code and executables find the\n  project based on the current working directory.  For example, to work in a\n  git repository, one must first `cd` to somewhere in the repository directory\n  tree.\n- In the \"which\" approach, exemplified by a django `manage.py` script, code and\n  executables find the project based on the path of the executable itself.  For\n  example, a django `manage.py` script expects to be located in the root of\n  the project.\n\nAn advantage of the \"cwd\" approach is that one set of binaries can be used\nwith multiple projects.\n\nAn advantages of the \"which\" approach are that one can run the binaries from\nanywhere.  Another advantage is that a different version of code/binaries can\nbe associated with each project.  This can be useful for deployments of\nmultiple version of an application.\n\n\n## Contribute\n\nFeel free to make a pull request on github.\n\n\n## Requirements\n\n- Probably Python 2.7 (since that is the only version it has been tested with.)\n\n\n## Installation\n\n\n### Install from pypi.python.org\n\nDownload and install using pip:\n\n    pip install projd\n\n\n### Install from github.com\n\nUsing github, one can clone and install a specific version of the package:\n\n    cd ~\n    git clone git@github.com:todddeluca/projd.git\n    cd projd\n    python setup.py install\n\nOr use pip:\n\n    pip install git+git://github.com/todddeluca/projd.git#egg=projd\n\n\n## Usage\n\nThere are two functions for finding the root directory of a project based on\nthat root directory containing a specific token, a file or directory.  One\nfunction works based on the current working directory.  \n\nFor example to find the root directory of a git repository one would do:\n\n    import projd\n    root = projd.cwd_token_dir('.git')\n\nTo find the root directory of a project containing the script being executed\n(similar to how a django manage.py file works), one would do:\n\n    import projd\n    root = projd.script_token_dir('.git')", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/todddeluca/projd", "keywords": "python project directory application", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "projd", "package_url": "https://pypi.org/project/projd/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/projd/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/todddeluca/projd"}, "release_url": "https://pypi.org/project/projd/0.1/", "requires_dist": null, "requires_python": null, "summary": "Utilities for working with projects and applications organized within a root directory.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>## Introduction</p>\n<p>This idea is inspired by Git and Django, which assume projects are organized\nwithin a directory.  Many other applications and projects work this way, like\nRuby on Rails and Maven.</p>\n<p>Many projects, like source code repositories, web applications, etc., store\nlocations of code, configuration, scripts, virtual environments, etc., relative\nto the root directory of the project or application.</p>\n<p>When a script, application, executable, binary, program, or command is\nexecuted, it needs to find the root directory of the project it is supposed to\noperate on.  For example, <cite>git status</cite> only works when called from within\na git repository.  Alternatively, a Django <cite>manage.py</cite> script can be run from\nanywhere, yet it knows to operate on the web application it is located within.</p>\n<p>There are two sub-organizing principles seen in project commands, based around\nhow they find the root directory of the project:</p>\n<ul>\n<li>In the \u201ccwd\u201d approach, exemplified by <cite>git</cite>, code and executables find the\nproject based on the current working directory.  For example, to work in a\ngit repository, one must first <cite>cd</cite> to somewhere in the repository directory\ntree.</li>\n<li>In the \u201cwhich\u201d approach, exemplified by a django <cite>manage.py</cite> script, code and\nexecutables find the project based on the path of the executable itself.  For\nexample, a django <cite>manage.py</cite> script expects to be located in the root of\nthe project.</li>\n</ul>\n<p>An advantage of the \u201ccwd\u201d approach is that one set of binaries can be used\nwith multiple projects.</p>\n<p>An advantages of the \u201cwhich\u201d approach are that one can run the binaries from\nanywhere.  Another advantage is that a different version of code/binaries can\nbe associated with each project.  This can be useful for deployments of\nmultiple version of an application.</p>\n<p>## Contribute</p>\n<p>Feel free to make a pull request on github.</p>\n<p>## Requirements</p>\n<ul>\n<li>Probably Python 2.7 (since that is the only version it has been tested with.)</li>\n</ul>\n<p>## Installation</p>\n<p>### Install from pypi.python.org</p>\n<p>Download and install using pip:</p>\n<blockquote>\npip install projd</blockquote>\n<p>### Install from github.com</p>\n<p>Using github, one can clone and install a specific version of the package:</p>\n<blockquote>\ncd ~\ngit clone <a href=\"mailto:git%40github.com\">git<span>@</span>github<span>.</span>com</a>:todddeluca/projd.git\ncd projd\npython setup.py install</blockquote>\n<p>Or use pip:</p>\n<blockquote>\npip install git+git://github.com/todddeluca/projd.git#egg=projd</blockquote>\n<p>## Usage</p>\n<p>There are two functions for finding the root directory of a project based on\nthat root directory containing a specific token, a file or directory.  One\nfunction works based on the current working directory.</p>\n<p>For example to find the root directory of a git repository one would do:</p>\n<blockquote>\nimport projd\nroot = projd.cwd_token_dir(\u2018.git\u2019)</blockquote>\n<p>To find the root directory of a project containing the script being executed\n(similar to how a django manage.py file works), one would do:</p>\n<blockquote>\nimport projd\nroot = projd.script_token_dir(\u2018.git\u2019)</blockquote>\n\n          </div>"}, "last_serial": 796725, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "921f0bacdcdc4c6e729d082f5e96a1a6", "sha256": "eb6c902b39b7104fce78a1f4846f2c88e59b6e3b65251329dc930a5e6748a4b9"}, "downloads": -1, "filename": "projd-0.1.tar.gz", "has_sig": false, "md5_digest": "921f0bacdcdc4c6e729d082f5e96a1a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4487, "upload_time": "2013-02-10T03:35:21", "upload_time_iso_8601": "2013-02-10T03:35:21.509416Z", "url": "https://files.pythonhosted.org/packages/04/6d/9f441dd5703e7969df77349d1b0132785eda21c2ba08649b4041c601b847/projd-0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "1856a5804096fd6809843e8572f090cd", "sha256": "859b779e6f900f49acb3570ee6201dd2795c01f4cc57b3b51a886017c57a9488"}, "downloads": -1, "filename": "projd-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1856a5804096fd6809843e8572f090cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4487, "upload_time": "2013-02-13T21:25:28", "upload_time_iso_8601": "2013-02-13T21:25:28.842696Z", "url": "https://files.pythonhosted.org/packages/49/a1/7a72f5468adc5ba44cad40459627a65b5dc2c237294d0d5700191177b651/projd-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "921f0bacdcdc4c6e729d082f5e96a1a6", "sha256": "eb6c902b39b7104fce78a1f4846f2c88e59b6e3b65251329dc930a5e6748a4b9"}, "downloads": -1, "filename": "projd-0.1.tar.gz", "has_sig": false, "md5_digest": "921f0bacdcdc4c6e729d082f5e96a1a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4487, "upload_time": "2013-02-10T03:35:21", "upload_time_iso_8601": "2013-02-10T03:35:21.509416Z", "url": "https://files.pythonhosted.org/packages/04/6d/9f441dd5703e7969df77349d1b0132785eda21c2ba08649b4041c601b847/projd-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:21 2020"}