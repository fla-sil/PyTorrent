{"info": {"author": "Charles Gobber", "author_email": "charles26f@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# sklearn-export\n\nThis package is based on sklearn port from [https://github.com/nok/sklearn-porter](https://github.com/nok/sklearn-porter).  I chose to build it because sklearn port saves data in matrix format. However, most popular algebra libraries are used to working with vectors. Then, sklearn-export saves the sklearn model data in Json format (as column vectors).  Note that this is a beta version yet, then only some models and functionalities are supported.\n\n## New features (0.0.4)\n\nBug corrections and add support to SVR and LinearSVR.\n\n## Support\n\n|  Class | Details  |\n| ------------ | ------ |\n| [sklearn.svm.SVC](http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html)| C-Support Vector Classification. The multiclass support is handled according to a one-vs-one scheme.|\n| [sklearn.svm.NuSVC](http://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVC.html) | Nu-Support Vector Classification. Similar to SVC but uses a parameter to control the number of support vectors. |\n|[sklearn.svc.LinearSVC](http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html) | Linear Support Vector Classification.|\n|[sklearn.neural_network.MLPClassifier](http://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html)| Multi-layer Perceptron classifier.|\n|[sklearn.neural_network.MLPRegressor](http://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html)|Multi-layer Perceptron regressor.|\n|[sklearn.linear_model.LogisticRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)|Logistic Regression (aka logit, MaxEnt) classifier.|\n|[sklearn.linear_model.LinearRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html)|Ordinary least squares Linear Regression.|\n|[sklearn.preprocessing.MinMaxScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html)|Transforms features by scaling each feature to a given range.|\n|[sklearn.preprocessing.StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)|Standardize features by removing the mean and scaling to unit variance|\n|[sklearn.svm.SVR](https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html)|Epsilon-Support Vector Regression.|\n|[sklearn.svm.LinearSVR](https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVR.html)|Linear Support Vector Regression.|\n\n**Observation**: details where extracted from sklearn documentation.\n## Installation\nWe recommend to make a instalation using pip:\n```bash\n$ pip install sklearn_export\n```\nIf you are using jupyter notebooks consider to install sklearn_export through a notebook cell. Then, you can type and execute the following:\n```python\nimport sys\n!{sys.executable} -m pip install sklearn_export\n```\n## Usage\n\nActually sklearn-export can save Classifiers, Regressions and some Scalers (see Support session).\n\n ### Saving a Model or Scaler\n\n The basic usage is to save a simple model.\n```python\n# Basic imports\nfrom sklearn.datasets import load_iris\nfrom sklearn_export import Export\nfrom sklearn.neural_network import MLPRegressor\n\n# Load data and train model\nsamples = load_iris()\nX, y = samples.data, samples.target\nclf = MLPRegressor()\nclf.fit(X, y)\n\n# Save using sklearn_export\nexport = Export(clf)\nexport.to_json()\n```\nThe result is a Json file that can be load in any language.\n\n### Saving a Model and a Scaler\nThe sklearn-export can also save more then one class in the same Json. This is usefull to store a Classifier and a Scaler (for example). To be honest, actually is only possible to store a pair Model and Scaler.\n```python\n# Basic imports\nfrom sklearn.datasets import load_iris\nfrom sklearn_export import Export\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPRegressor\n\n# Load data\nsamples = load_iris()\nX, y = samples.data, samples.target\n\n# Normalize data\nscaler = StandardScaler()\nXz = scaler.fit_transform(X)\n\n# Train model with normalized data\nclf = MLPRegressor()\nclf.fit(Xz, y)\n\n# Save model and scaler using sklearn_export\nexport = Export([scaler, clf])\nexport.to_json()\n```\n The result is a Json file that contains information about a Model and a Scaler. The file can be load in any language.\n\n### Extra options\n\nThe method `to_json()` also support some other parameters:\n\n|  Parameter | Details  | Default |\n| -------- | ------ | ------ |\n| `filename` | Name of the output Json file | `data.json` |\n| `directory` | Path to save the file | `.` |\n| `with_md5_hash` | Name of the output Json file | `False` |\n\n## Questions\nIf you have any question please send me a mail <charles26f@gmail.com>.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gobber/sklearn-export", "keywords": "sklearn,scikit-learn", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sklearn-export", "package_url": "https://pypi.org/project/sklearn-export/", "platform": "", "project_url": "https://pypi.org/project/sklearn-export/", "project_urls": {"Homepage": "https://github.com/gobber/sklearn-export"}, "release_url": "https://pypi.org/project/sklearn-export/0.0.5/", "requires_dist": ["six", "scikit-learn (>=0.14.1)"], "requires_python": "", "summary": "Export sklearn models to Json.", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sklearn-export</h1>\n<p>This package is based on sklearn port from <a href=\"https://github.com/nok/sklearn-porter\" rel=\"nofollow\">https://github.com/nok/sklearn-porter</a>.  I chose to build it because sklearn port saves data in matrix format. However, most popular algebra libraries are used to working with vectors. Then, sklearn-export saves the sklearn model data in Json format (as column vectors).  Note that this is a beta version yet, then only some models and functionalities are supported.</p>\n<h2>New features (0.0.4)</h2>\n<p>Bug corrections and add support to SVR and LinearSVR.</p>\n<h2>Support</h2>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html\" rel=\"nofollow\">sklearn.svm.SVC</a></td>\n<td>C-Support Vector Classification. The multiclass support is handled according to a one-vs-one scheme.</td>\n</tr>\n<tr>\n<td><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVC.html\" rel=\"nofollow\">sklearn.svm.NuSVC</a></td>\n<td>Nu-Support Vector Classification. Similar to SVC but uses a parameter to control the number of support vectors.</td>\n</tr>\n<tr>\n<td><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html\" rel=\"nofollow\">sklearn.svc.LinearSVC</a></td>\n<td>Linear Support Vector Classification.</td>\n</tr>\n<tr>\n<td><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html\" rel=\"nofollow\">sklearn.neural_network.MLPClassifier</a></td>\n<td>Multi-layer Perceptron classifier.</td>\n</tr>\n<tr>\n<td><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html\" rel=\"nofollow\">sklearn.neural_network.MLPRegressor</a></td>\n<td>Multi-layer Perceptron regressor.</td>\n</tr>\n<tr>\n<td><a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\" rel=\"nofollow\">sklearn.linear_model.LogisticRegression</a></td>\n<td>Logistic Regression (aka logit, MaxEnt) classifier.</td>\n</tr>\n<tr>\n<td><a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\" rel=\"nofollow\">sklearn.linear_model.LinearRegression</a></td>\n<td>Ordinary least squares Linear Regression.</td>\n</tr>\n<tr>\n<td><a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html\" rel=\"nofollow\">sklearn.preprocessing.MinMaxScaler</a></td>\n<td>Transforms features by scaling each feature to a given range.</td>\n</tr>\n<tr>\n<td><a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html\" rel=\"nofollow\">sklearn.preprocessing.StandardScaler</a></td>\n<td>Standardize features by removing the mean and scaling to unit variance</td>\n</tr>\n<tr>\n<td><a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html\" rel=\"nofollow\">sklearn.svm.SVR</a></td>\n<td>Epsilon-Support Vector Regression.</td>\n</tr>\n<tr>\n<td><a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVR.html\" rel=\"nofollow\">sklearn.svm.LinearSVR</a></td>\n<td>Linear Support Vector Regression.</td>\n</tr></tbody></table>\n<p><strong>Observation</strong>: details where extracted from sklearn documentation.</p>\n<h2>Installation</h2>\n<p>We recommend to make a instalation using pip:</p>\n<pre>$ pip install sklearn_export\n</pre>\n<p>If you are using jupyter notebooks consider to install sklearn_export through a notebook cell. Then, you can type and execute the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"err\">!</span><span class=\"p\">{</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"p\">}</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">sklearn_export</span>\n</pre>\n<h2>Usage</h2>\n<p>Actually sklearn-export can save Classifiers, Regressions and some Scalers (see Support session).</p>\n<h3>Saving a Model or Scaler</h3>\n<p>The basic usage is to save a simple model.</p>\n<pre><span class=\"c1\"># Basic imports</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_iris</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn_export</span> <span class=\"kn\">import</span> <span class=\"n\">Export</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.neural_network</span> <span class=\"kn\">import</span> <span class=\"n\">MLPRegressor</span>\n\n<span class=\"c1\"># Load data and train model</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">load_iris</span><span class=\"p\">()</span>\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">MLPRegressor</span><span class=\"p\">()</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save using sklearn_export</span>\n<span class=\"n\">export</span> <span class=\"o\">=</span> <span class=\"n\">Export</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">)</span>\n<span class=\"n\">export</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n</pre>\n<p>The result is a Json file that can be load in any language.</p>\n<h3>Saving a Model and a Scaler</h3>\n<p>The sklearn-export can also save more then one class in the same Json. This is usefull to store a Classifier and a Scaler (for example). To be honest, actually is only possible to store a pair Model and Scaler.</p>\n<pre><span class=\"c1\"># Basic imports</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_iris</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn_export</span> <span class=\"kn\">import</span> <span class=\"n\">Export</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">StandardScaler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.neural_network</span> <span class=\"kn\">import</span> <span class=\"n\">MLPRegressor</span>\n\n<span class=\"c1\"># Load data</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">load_iris</span><span class=\"p\">()</span>\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"c1\"># Normalize data</span>\n<span class=\"n\">scaler</span> <span class=\"o\">=</span> <span class=\"n\">StandardScaler</span><span class=\"p\">()</span>\n<span class=\"n\">Xz</span> <span class=\"o\">=</span> <span class=\"n\">scaler</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Train model with normalized data</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">MLPRegressor</span><span class=\"p\">()</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">Xz</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save model and scaler using sklearn_export</span>\n<span class=\"n\">export</span> <span class=\"o\">=</span> <span class=\"n\">Export</span><span class=\"p\">([</span><span class=\"n\">scaler</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"p\">])</span>\n<span class=\"n\">export</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n</pre>\n<p>The result is a Json file that contains information about a Model and a Scaler. The file can be load in any language.</p>\n<h3>Extra options</h3>\n<p>The method <code>to_json()</code> also support some other parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Details</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>filename</code></td>\n<td>Name of the output Json file</td>\n<td><code>data.json</code></td>\n</tr>\n<tr>\n<td><code>directory</code></td>\n<td>Path to save the file</td>\n<td><code>.</code></td>\n</tr>\n<tr>\n<td><code>with_md5_hash</code></td>\n<td>Name of the output Json file</td>\n<td><code>False</code></td>\n</tr></tbody></table>\n<h2>Questions</h2>\n<p>If you have any question please send me a mail <a href=\"mailto:charles26f@gmail.com\">charles26f@gmail.com</a>.</p>\n\n          </div>"}, "last_serial": 6055887, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "743289472c0399f4153a3e134af148bb", "sha256": "a150d306a401c7e1b6d4642d52ed04fe8750fe86361a962db263cdc9e5268d9d"}, "downloads": -1, "filename": "sklearn-export-0.0.3.tar.gz", "has_sig": false, "md5_digest": "743289472c0399f4153a3e134af148bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11130, "upload_time": "2019-02-23T17:53:08", "upload_time_iso_8601": "2019-02-23T17:53:08.241801Z", "url": "https://files.pythonhosted.org/packages/3e/e1/6e567a69d109e2cbaac8a2f20d019e7a596aaf92184b3a8ebd45b566ec83/sklearn-export-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "2d548ee62aabe6ef996f6479be65cc90", "sha256": "79df25c83d11eb0b5dba4e34a31e85e6930d5f0f520dee833f8289cf1bfb9a5a"}, "downloads": -1, "filename": "sklearn_export-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2d548ee62aabe6ef996f6479be65cc90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21058, "upload_time": "2019-03-11T05:41:47", "upload_time_iso_8601": "2019-03-11T05:41:47.740773Z", "url": "https://files.pythonhosted.org/packages/3e/a8/d21ba4af522b64ee02d2f010792d8de0e1fc8cedd93d1adba54c40808906/sklearn_export-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdb1feb267747c587daded9a357469f2", "sha256": "2d4948af8e2e3f6353dfd47455955cc8cdccbb3cb0712b955d3f0a2be1928fcd"}, "downloads": -1, "filename": "sklearn-export-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bdb1feb267747c587daded9a357469f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11672, "upload_time": "2019-03-11T05:41:49", "upload_time_iso_8601": "2019-03-11T05:41:49.165083Z", "url": "https://files.pythonhosted.org/packages/19/73/5430da5594fce57ed86117afebdbf5ddf44b73f35e30e34017caece81fdc/sklearn-export-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "b2737191f870b4cb1a29aa379cdb916a", "sha256": "32a8dc777094795e42697b4673fa4e77bdb84a9b1f658d1957c9bd3892bfde74"}, "downloads": -1, "filename": "sklearn_export-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b2737191f870b4cb1a29aa379cdb916a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21028, "upload_time": "2019-10-31T03:00:03", "upload_time_iso_8601": "2019-10-31T03:00:03.645013Z", "url": "https://files.pythonhosted.org/packages/94/93/e622e6460fbf6ea756cfca1b2950125fee0375aa83877badaf9e2918f30b/sklearn_export-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "451ad669afb6a9d1a4a89e477600a975", "sha256": "281a9c835bcf0ab3ea39b40fae941276deb540abc016c2a6bc5516076b850a69"}, "downloads": -1, "filename": "sklearn-export-0.0.5.tar.gz", "has_sig": false, "md5_digest": "451ad669afb6a9d1a4a89e477600a975", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11674, "upload_time": "2019-10-31T03:00:05", "upload_time_iso_8601": "2019-10-31T03:00:05.986777Z", "url": "https://files.pythonhosted.org/packages/7b/34/6c8908b4ab098c07530768af44b397336819d9d836335fe41ad5682f53cf/sklearn-export-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2737191f870b4cb1a29aa379cdb916a", "sha256": "32a8dc777094795e42697b4673fa4e77bdb84a9b1f658d1957c9bd3892bfde74"}, "downloads": -1, "filename": "sklearn_export-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b2737191f870b4cb1a29aa379cdb916a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21028, "upload_time": "2019-10-31T03:00:03", "upload_time_iso_8601": "2019-10-31T03:00:03.645013Z", "url": "https://files.pythonhosted.org/packages/94/93/e622e6460fbf6ea756cfca1b2950125fee0375aa83877badaf9e2918f30b/sklearn_export-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "451ad669afb6a9d1a4a89e477600a975", "sha256": "281a9c835bcf0ab3ea39b40fae941276deb540abc016c2a6bc5516076b850a69"}, "downloads": -1, "filename": "sklearn-export-0.0.5.tar.gz", "has_sig": false, "md5_digest": "451ad669afb6a9d1a4a89e477600a975", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11674, "upload_time": "2019-10-31T03:00:05", "upload_time_iso_8601": "2019-10-31T03:00:05.986777Z", "url": "https://files.pythonhosted.org/packages/7b/34/6c8908b4ab098c07530768af44b397336819d9d836335fe41ad5682f53cf/sklearn-export-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:57 2020"}