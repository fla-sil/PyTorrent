{"info": {"author": "Scott Bradley", "author_email": "scott@scott2b.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "## sortables\n\n\nNot to be confused with `sortable`, which is a Grappelli admin UI sorter for Django.\n\n**Note:** I have not yet sorted out (hee hee) the compatible Python versions, but this does use type hints, so it will end up being at least 3.5+. There are also some places in the code that depend on the new specification of retained order in dicts, being a Python 3.7+ specific feature. I have not yet decided whether to fix this for 3.5, 3.6 compatibility.\n\nThis initial (very alpha) state of the project was developed in Python 3.7.2.\n\n### Sanely sortable Python data structures\n\nSort Python data structures without awkward itemgetter, attrgettr, or lambda syntax.\n\nPython's sorting syntax is not always expressive or easy to remember. Why do this:\n\n```\nsorted(d, key=operator.itemgetter(1))\n```\n\nwhen you could do this?\n\n```\nd.sorted(by_value=True)\n```\n\nOr how about sorting a named tuple. Instead of this:\n\n```\nsorted(t, key=operator.attrgetter('myproperty'))\n```\n\nwe can do this:\n\n```\nt.sorted(key='myproperty')\n```\n\n... and more.\n\n### Sort a series of tuples by an internal index.\n\n```\n>>> t = ( ('apples', 3), ('oranges', 1), ('bananas', 2) )\n>>> st = Sortable(t)\n>>> st.sorted()\n[('apples', 3), ('bananas', 2), ('oranges', 1)]\n>>> st.sorted(key=1)\n[('oranges', 1), ('bananas', 2), ('apples', 3)]\n>>> st.sorted(key=1, reverse=True)\n[('apples', 3), ('bananas', 2), ('oranges', 1)]\n```\n\n### Sort a dict by value.\n\n```\n>>> sd = Sortable(dict(t))\n>>> sd.sorted()\n{'apples': 3, 'bananas': 2, 'oranges': 1}\n>>> sd.sorted(by_value=True)\n{'oranges': 1, 'bananas': 2, 'apples': 3}\n>>> sd.sorted(by_value=True, reverse=True)\n{'apples': 3, 'bananas': 2, 'oranges': 1}\n```\n\n### Sort a series of named tuples by internal named property.\n\n```\n>>> from collections import namedtuple\n>>> Fruit = namedtuple('Fruit', ['name', 'number'])\n>>> sl = Sortable([ Fruit(name='apples', number=3), Fruit(name='bananas', number=2), Fruit(name='oranges', number=1) ])\n>>> sl.sorted()\n[Fruit(name='apples', number=3), Fruit(name='bananas', number=2), Fruit(name='oranges', number=1)]\n>>> sl.sorted(key='number')\n[Fruit(name='oranges', number=1), Fruit(name='bananas', number=2), Fruit(name='apples', number=3)]\n>>> sl.sorted(key='number', reverse=True)\n[Fruit(name='apples', number=3), Fruit(name='bananas', number=2), Fruit(name='oranges', number=1)]\n```\n\n### Sort by method call.\n\n```\n>>> class Fruit(object):\n...     def __init__(self, name, number):\n...         self.name = name\n...         self.number = number\n...     def get_name(self):\n...         return self.name\n...     def get_number(self):\n...         return self.number\n...     def __repr__(self):\n...         return '%s:%s' % (self.name, self.number)\n...\n>>> s = Sortable(set([Fruit('apples', 3), Fruit('bananas', 2), Fruit('oranges', 1)]))\n>>> s.sorted(method='get_name')\n[apples:3, bananas:2, oranges:1]\n>>> s.sorted(method='get_number')\n[oranges:1, bananas:2, apples:3]\n>>> s.sorted(method='get_name', reverse=True)\n[oranges:1, bananas:2, apples:3]\n```\n\n## Goals & philsophy\n\n * create an intuitive and readable sorting syntax\n * be as unabtrusive as possible\n * don't break existing sort approaches\n * don't try to be all things to all sorting needs\n\nToward these ideals, sortables:\n\n * replaces awkward operator and lambda syntax with a simple readable syntax\n * uses a single Sortable factory for all series data structures and dicts\n * mimics (and internally utilizes) Python's `sorted` builtin, but does not replace it\n * focuses on the most common use cases. Fall back to the builtin `sorted` as needed.\n\n## `sorted` returns a Sortable\n\nA Sortable's sorted method, as well as a Sortable dict's `items` method return\na Sortable series. As with the `sorted` builtin, the series type is generally\na list.\n\n## Regarding efficiency\n\nIn general, you can expect this to work as well as the `sorted` builtin since\nthat is what it uses internally.\n\nSortable `sorted` methods always return a copy of the data. This also goes for\nthe Sortable dict `items` method, which differs from the view-based `dict_items`\nof a regular dictionary.\n\nI have used operator getters rather than lambda based key interpretations mainly\nbecause this was slightly faster for me in the few timeit tests that I ran to\nmake the decision.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scott2b/sortables", "keywords": "sort,sorting,data structures,dict,tuple,list,set", "license": "", "maintainer": "Scott Bradley", "maintainer_email": "scott@scott2b.com", "name": "sortables", "package_url": "https://pypi.org/project/sortables/", "platform": "", "project_url": "https://pypi.org/project/sortables/", "project_urls": {"Homepage": "https://github.com/scott2b/sortables", "Repository": "https://github.com/scott2b/sortables"}, "release_url": "https://pypi.org/project/sortables/0.1.1/", "requires_dist": null, "requires_python": ">=3.7,<4.0", "summary": "sanely sortable Python data structures", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>sortables</h2>\n<p>Not to be confused with <code>sortable</code>, which is a Grappelli admin UI sorter for Django.</p>\n<p><strong>Note:</strong> I have not yet sorted out (hee hee) the compatible Python versions, but this does use type hints, so it will end up being at least 3.5+. There are also some places in the code that depend on the new specification of retained order in dicts, being a Python 3.7+ specific feature. I have not yet decided whether to fix this for 3.5, 3.6 compatibility.</p>\n<p>This initial (very alpha) state of the project was developed in Python 3.7.2.</p>\n<h3>Sanely sortable Python data structures</h3>\n<p>Sort Python data structures without awkward itemgetter, attrgettr, or lambda syntax.</p>\n<p>Python's sorting syntax is not always expressive or easy to remember. Why do this:</p>\n<pre><code>sorted(d, key=operator.itemgetter(1))\n</code></pre>\n<p>when you could do this?</p>\n<pre><code>d.sorted(by_value=True)\n</code></pre>\n<p>Or how about sorting a named tuple. Instead of this:</p>\n<pre><code>sorted(t, key=operator.attrgetter('myproperty'))\n</code></pre>\n<p>we can do this:</p>\n<pre><code>t.sorted(key='myproperty')\n</code></pre>\n<p>... and more.</p>\n<h3>Sort a series of tuples by an internal index.</h3>\n<pre><code>&gt;&gt;&gt; t = ( ('apples', 3), ('oranges', 1), ('bananas', 2) )\n&gt;&gt;&gt; st = Sortable(t)\n&gt;&gt;&gt; st.sorted()\n[('apples', 3), ('bananas', 2), ('oranges', 1)]\n&gt;&gt;&gt; st.sorted(key=1)\n[('oranges', 1), ('bananas', 2), ('apples', 3)]\n&gt;&gt;&gt; st.sorted(key=1, reverse=True)\n[('apples', 3), ('bananas', 2), ('oranges', 1)]\n</code></pre>\n<h3>Sort a dict by value.</h3>\n<pre><code>&gt;&gt;&gt; sd = Sortable(dict(t))\n&gt;&gt;&gt; sd.sorted()\n{'apples': 3, 'bananas': 2, 'oranges': 1}\n&gt;&gt;&gt; sd.sorted(by_value=True)\n{'oranges': 1, 'bananas': 2, 'apples': 3}\n&gt;&gt;&gt; sd.sorted(by_value=True, reverse=True)\n{'apples': 3, 'bananas': 2, 'oranges': 1}\n</code></pre>\n<h3>Sort a series of named tuples by internal named property.</h3>\n<pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Fruit = namedtuple('Fruit', ['name', 'number'])\n&gt;&gt;&gt; sl = Sortable([ Fruit(name='apples', number=3), Fruit(name='bananas', number=2), Fruit(name='oranges', number=1) ])\n&gt;&gt;&gt; sl.sorted()\n[Fruit(name='apples', number=3), Fruit(name='bananas', number=2), Fruit(name='oranges', number=1)]\n&gt;&gt;&gt; sl.sorted(key='number')\n[Fruit(name='oranges', number=1), Fruit(name='bananas', number=2), Fruit(name='apples', number=3)]\n&gt;&gt;&gt; sl.sorted(key='number', reverse=True)\n[Fruit(name='apples', number=3), Fruit(name='bananas', number=2), Fruit(name='oranges', number=1)]\n</code></pre>\n<h3>Sort by method call.</h3>\n<pre><code>&gt;&gt;&gt; class Fruit(object):\n...     def __init__(self, name, number):\n...         self.name = name\n...         self.number = number\n...     def get_name(self):\n...         return self.name\n...     def get_number(self):\n...         return self.number\n...     def __repr__(self):\n...         return '%s:%s' % (self.name, self.number)\n...\n&gt;&gt;&gt; s = Sortable(set([Fruit('apples', 3), Fruit('bananas', 2), Fruit('oranges', 1)]))\n&gt;&gt;&gt; s.sorted(method='get_name')\n[apples:3, bananas:2, oranges:1]\n&gt;&gt;&gt; s.sorted(method='get_number')\n[oranges:1, bananas:2, apples:3]\n&gt;&gt;&gt; s.sorted(method='get_name', reverse=True)\n[oranges:1, bananas:2, apples:3]\n</code></pre>\n<h2>Goals &amp; philsophy</h2>\n<ul>\n<li>create an intuitive and readable sorting syntax</li>\n<li>be as unabtrusive as possible</li>\n<li>don't break existing sort approaches</li>\n<li>don't try to be all things to all sorting needs</li>\n</ul>\n<p>Toward these ideals, sortables:</p>\n<ul>\n<li>replaces awkward operator and lambda syntax with a simple readable syntax</li>\n<li>uses a single Sortable factory for all series data structures and dicts</li>\n<li>mimics (and internally utilizes) Python's <code>sorted</code> builtin, but does not replace it</li>\n<li>focuses on the most common use cases. Fall back to the builtin <code>sorted</code> as needed.</li>\n</ul>\n<h2><code>sorted</code> returns a Sortable</h2>\n<p>A Sortable's sorted method, as well as a Sortable dict's <code>items</code> method return\na Sortable series. As with the <code>sorted</code> builtin, the series type is generally\na list.</p>\n<h2>Regarding efficiency</h2>\n<p>In general, you can expect this to work as well as the <code>sorted</code> builtin since\nthat is what it uses internally.</p>\n<p>Sortable <code>sorted</code> methods always return a copy of the data. This also goes for\nthe Sortable dict <code>items</code> method, which differs from the view-based <code>dict_items</code>\nof a regular dictionary.</p>\n<p>I have used operator getters rather than lambda based key interpretations mainly\nbecause this was slightly faster for me in the few timeit tests that I ran to\nmake the decision.</p>\n\n          </div>"}, "last_serial": 6102371, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "eca5f4e2a5272e8317561c26e3c32db7", "sha256": "b549606c6153969c256f54b202b8714117ce85e55bc1b153c4acd0ef20162e9b"}, "downloads": -1, "filename": "sortables-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eca5f4e2a5272e8317561c26e3c32db7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6528, "upload_time": "2019-11-09T01:19:12", "upload_time_iso_8601": "2019-11-09T01:19:12.262439Z", "url": "https://files.pythonhosted.org/packages/f4/60/7f63f0d942788dbea5a8d57e593a02f729497d985b1a3b9f05031893b36c/sortables-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14759ad0a02b3728e5350bed8d4346f9", "sha256": "c17b5c226a176ecfead6e889de52cd0cdfd93982ff71df7ae46288db77c4ad18"}, "downloads": -1, "filename": "sortables-0.1.0.tar.gz", "has_sig": false, "md5_digest": "14759ad0a02b3728e5350bed8d4346f9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5251, "upload_time": "2019-11-09T01:19:14", "upload_time_iso_8601": "2019-11-09T01:19:14.192435Z", "url": "https://files.pythonhosted.org/packages/ea/32/d70b0107c60600feac9dc1d98d3c0e8a236c4af0483e1a2ca4b22ab13d0b/sortables-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "51d9f3bd958a3d704a151f1b9bf81515", "sha256": "2780a1e195700e691e1783fca749562a1af6d88e7ff765279c862581f0079304"}, "downloads": -1, "filename": "sortables-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "51d9f3bd958a3d704a151f1b9bf81515", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6551, "upload_time": "2019-11-09T01:23:45", "upload_time_iso_8601": "2019-11-09T01:23:45.138238Z", "url": "https://files.pythonhosted.org/packages/b7/f2/0f285b7a6937c74b66687b48157dd1210dd1369707a726b137470eb0d883/sortables-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c50c1d8b23af49cdcecb45cd0cbbdac8", "sha256": "adc61b83ab36e6d759a792293d83501d4c0b2f17e6cd98229855e9af4eb3495c"}, "downloads": -1, "filename": "sortables-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c50c1d8b23af49cdcecb45cd0cbbdac8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5261, "upload_time": "2019-11-09T01:23:46", "upload_time_iso_8601": "2019-11-09T01:23:46.445881Z", "url": "https://files.pythonhosted.org/packages/83/aa/aac10d28a2d648f07fd6555cc7ff61f6a2838bd64d1d5fc8209ad10bd997/sortables-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51d9f3bd958a3d704a151f1b9bf81515", "sha256": "2780a1e195700e691e1783fca749562a1af6d88e7ff765279c862581f0079304"}, "downloads": -1, "filename": "sortables-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "51d9f3bd958a3d704a151f1b9bf81515", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6551, "upload_time": "2019-11-09T01:23:45", "upload_time_iso_8601": "2019-11-09T01:23:45.138238Z", "url": "https://files.pythonhosted.org/packages/b7/f2/0f285b7a6937c74b66687b48157dd1210dd1369707a726b137470eb0d883/sortables-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c50c1d8b23af49cdcecb45cd0cbbdac8", "sha256": "adc61b83ab36e6d759a792293d83501d4c0b2f17e6cd98229855e9af4eb3495c"}, "downloads": -1, "filename": "sortables-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c50c1d8b23af49cdcecb45cd0cbbdac8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5261, "upload_time": "2019-11-09T01:23:46", "upload_time_iso_8601": "2019-11-09T01:23:46.445881Z", "url": "https://files.pythonhosted.org/packages/83/aa/aac10d28a2d648f07fd6555cc7ff61f6a2838bd64d1d5fc8209ad10bd997/sortables-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:29 2020"}