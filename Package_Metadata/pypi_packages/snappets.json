{"info": {"author": "Wolfgang Scherer", "author_email": "wolfgang.scherer@gmx.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": ".. -*- coding: utf-8 -*-\n.. \\||<-snip->|| start\n.. \\||<-snap->|| include ^doc_defs.snip$\n.. \\||<-snap->|| part_top\n.. Copyright (C) 2018, Wolfgang Scherer, <Wolfgang.Scherer at gmx.de>\n.. Sponsored by Wiedenmann-Seile GmbH, http://ws-gruppe.de\n..\n.. This file is part of Snappets.\n..\n.. Permission is granted to copy, distribute and/or modify this document\n.. under the terms of the GNU Free Documentation License, Version 1.3\n.. or any later version published by the Free Software Foundation;\n.. with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\n.. A copy of the license is included in the main documentation of Snappets.\n\n.. inline comments (with du_comment_role)\n.. role:: rem(comment)\n.. role:: html(raw)\n   :format: html\n.. role:: shx(code)\n   :language: sh\n\n.. \\||<-snap->|| part_top\n.. \\||<-snap->|| part_title\n\n##################################################\nSnappets\n##################################################\n.. \\||<-snap->|| part_title\n.. \\||<-snap->|| part_contents\n\nThe `full HTML document <doc/_build/html/index.html>`_ is available in\nthe `Sphinx HTML build directory <doc/_build/html/>`_\n\n:Author: `Wolfgang Scherer`_\n\n.. \\||<-snap->|| part_contents\n.. \\||<-snap->|| part_abstract\n.. >>CODD See `the components of a doctoral dissertation and their order <http://site.uit.no/english/writing-style/bookstructure/>`_\n.. >>CODD Dedication\n.. >>CODD Epigraph\n.. >>CODD Abstract\n.. \\||<-snap->|| subst seclevel section\n.. \\||<-snap->|| not_doc_standalone\n.. \\||<-snap->|| subst seclevel chapter\n.. \\||<-snap->|| not_doc_standalone\n\n.. raw:: latex\n\n   \\iffalse\n\n.. rubric:: Quickstart\n.. raw:: latex\n\n   \\fi\n   \\section*{Quickstart}\n   \\addcontentsline{toc}{@seclevel@}{Quickstart}%\n   \\markboth{Quickstart}{Quickstart}%\n   \\phantomsection\n\n.. \\|:here:|\n\n.. \\||<-snap->|| not_doc_chapter\n\n.. raw:: latex\n\n   \\iffalse\n\n.. rubric:: Abstract\n.. raw:: latex\n\n   \\fi\n   \\section*{Abstract}\n   \\addcontentsline{toc}{@seclevel@}{Abstract}%\n   \\markboth{Abstract}{Abstract}%\n   \\phantomsection\n\n.. \\||<-snap->|| not_doc_chapter\n\n.. compound::\n\n   Snap-on snippets for web and CLI.\n\n   .. \\|:here:|\n\n.. \\||<-snap->|| part_abstract\n.. \\||<-snap->|| part_contents\n.. >>CODD Contents page\n\n.. contents::\n..\n\n.. >>CODD List of Illustrations\n.. >>CODD List of Tables\n.. \\||<-snap->|| part_contents\n.. \\||<-snap->|| part_abstract\n.. \\||<-snap->|| not_doc_overview\n.. \\||<-snap->|| not_doc_chapter\n.. >>CODD Acknowledgements\n.. >>CODD Note on Transliterations\n.. >>CODD List of Abbreviations\n\n.. raw:: latex\n\n   \\iffalse\n\n.. rubric:: Abbreviations\n.. raw:: latex\n\n   \\fi\n   \\section*{Abbreviations}\n   \\addcontentsline{toc}{@seclevel@}{Abbreviations}%\n   \\markboth{Abbreviations}{Abbreviations}%\n   \\phantomsection\n\n.. \\||<-snap->|| doc_standalone\n.. include:: doc/abbrevs.inc\n.. \\||<-snap->|| doc_standalone\n.. \\||<-snap->|| not_doc_standalone\n.. @include_directive_combined@  abbrevs.inc\n.. \\||<-snap->|| not_doc_standalone\n.. \\||<-snap->|| not_doc_chapter\n.. \\||<-snap->|| not_doc_overview\n.. \\||<-snap->|| part_abstract\n.. \\||<-snap->|| inc_standalone ^standalone-header.snip$\n.. \\||<-snap->|| inc_index ^index-header.snip$\n.. \\||<-snap->|| inc_overview ^overview-header.snip$\n.. \\||<-snap->|| inc_chapter ^chapter-header.snip$\n.. \\||<-snap->|| part_body\n.. >>CODD Introduction\n\n==================================================\nIntroduction\n==================================================\n\n.. >>CODD Chapter\n.. >>CODD Conclusion\n.. >>CODD Appendix A\n\n.. \\|:here:|\n\n.. >>CODD Notes\n.. ==================================================\n.. Footnotes\n.. ==================================================\n\n:html:`<hr>`\n\n.. \\[#]\n\n.. >>CODD Reference List/Bibliography\n.. ==================================================\n.. References\n.. ==================================================\n\n.. \\||<-snap->|| part_body\n.. \\||<-snap->|| part_defs\n.. \\||<-snap->|| doc_standalone\n.. include:: doc/doc_defs.inc\n.. include:: doc/doc_defs_standalone.inc\n.. \\||<-snap->|| doc_standalone\n.. \\||<-snap->|| not_doc_standalone\n.. @include_directive_combined@ doc_defs.inc\n.. @include_directive_combined@ doc_defs_combined.inc\n.. \\||<-snap->|| not_doc_standalone\n.. \\||<-snap->|| part_defs\n.. \\||<-snap->|| inc_standalone ^standalone-footer.snip$\n.. \\||<-snap->|| inc_index ^index-footer.snip$\n.. \\||<-snap->|| inc_overview ^overview-footer.snip$\n.. \\||<-snap->|| inc_chapter ^chapter-footer.snip$\n.. \\||<-snap->|| part_bottom\n.. \\||<-snap->|| doc_standalone\n\n**Copyright**\n\nCopyright (C) 2018, `Wolfgang Scherer`_.\nSponsored by `Wiedenmann-Seile GmbH`_.\nSee the document source for conditions of use under the GNU Free\nDocumentation License.\n\n.. \\||<-snap->|| doc_standalone\n\n.. _`Wiedenmann-Seile GmbH`: http://ws-gruppe.de\n.. _`Wolfgang Scherer`: wolfgang.scherer@ws-gruppe.de\n\n.. \\||<-snap->|| part_bottom\n.. \\||<-snip->|| stop\n\n.. ==================================================\n.. END\n.. ==================================================\n\n.. (progn (forward-line 1) (snip-insert \"rst_t.ide-update\" t t \"rst\") (insert \"\\n\"))\n.. \f\n.. :ide-menu: Emacs IDE Main Menu - Buffer @BUFFER@\n.. . M-x `eIDE-menu' ()(eIDE-menu \"z\")\n\n.. :ide: DELIM: SNIPPETS (ABOUT)       |q|<- SYM ->||,   ||<- SYM ->||,  @| SYM @\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@|\") (cons \"@\" nil)))))\n\n.. :ide: DELIM: SNIPPETS (DOC)          ||<- SYM ->||,     |: SYM :|,     ` SYM `\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"\\\\(\\\\`\\\\|[^\\\\]\\\\)\" \"`\") (cons \"`\" nil)))))\n\n.. :ide: DELIM: SNIPPETS (SNIP DOC)     ||<- SYM ->||,     |: SYM :|,     @ SYM @\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)))))\n\n.. :ide: DELIM: SNIPPETS (FILLME)       ||<- SYM ->||,     :: SYM ::,     @ SYM @\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)))))\n\n.. :ide: DELIM: SNIPPETS (SUBST)        ||<- SYM ->||,      @ SYM @,      @ SYM @\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`\" nil)))))\n\n.. :ide: +#-\n.. . Snippet Delimiter Sets ()\n\n.. :ide: DELIM: ReST (links)              ` SYM `_,    .. _` SYM `,      ` SYM `\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`_\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \".. _`\") (cons \"`:\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"\\\\(\\\\`\\\\|[^\\\\]\\\\)\" \"`\") (cons \"`\" nil)))))\n\n.. :ide: DELIM: STANDARD (GNU quoting)    |: SYM :|,       :: SYM ::,     ` SYM '\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"`\") (cons \"'\" nil)))))\n\n.. :ide: DELIM: STANDARD (ReST quoting)   |: SYM :|,       :: SYM ::,     ` SYM `\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`\" nil)))))\n\n.. :ide: +#-\n.. . Delimiter Sets ()\n\n.. :ide: COMPILE: render reST as LaTeX\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2latex.py --traceback | tee \" (shell-quote-argument fn) \".tex\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as MAN\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2man.py --traceback \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as TXT (via MAN)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2man.py --traceback | man -l -\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; snr \" args))))\n\n.. :ide: COMPILE: render reST as ODT --strip-comments\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2odt.py --traceback --strip-comments | cat >\" (shell-quote-argument fn) \".odt \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as LaTeX, compile PDF and view with xdg-open\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2latex.py --traceback | tee \" (shell-quote-argument fn) \".tex && pdflatex '\\\\nonstopmode\\\\input \" (shell-quote-argument fn) \".tex' && xdg-open \" (shell-quote-argument fn) \".pdf\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as PDF\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2pdf -e ws_docutils.raw_role >\" (shell-quote-argument fn) \".pdf\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as HTML\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2html.py --traceback --cloak-email-addresses | ${SED__PROG-sed} '\\n/<\\\\/head>/i\\\\\\n<style type=\\\"text/css\\\">\\\\\\nimg { max-width\\: 1200px; }\\\\\\n</style>\\n' | tee \" (shell-quote-argument fn) \".html \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: +#-\n.. . Process with ws_rst2xxx ()\n\n.. :ide: CMD: show doc/_build PDF output\n.. . (let* ((fp (buffer-file-name)) (fd (file-name-directory fp))) (shell-command (concat \"xdg-open \\\"$( ls \" fd \"doc/_build/latex/*.aux | sed 's,\\\\.aux,.pdf,' )\\\"\" ) nil))\n\n.. :ide: CMD: show doc/_build HTML output\n.. . (let* ((fp (buffer-file-name)) (fd (file-name-directory fp))) (shell-command (concat \"xdg-open \" fd \"doc/_build/html/index.html\" ) nil))\n\n.. :ide: CMD: show PDF output\n.. . (let* ((fp (buffer-file-name)) (fb (file-name-sans-extension fp))) (shell-command (concat \"xdg-open '\" fb \".pdf'\")))\n\n.. :ide: CMD: show HTML output\n.. . (let* ((fp (buffer-file-name)) (fb (file-name-sans-extension fp))) (shell-command (concat \"xdg-open '\" fb \".html'\")))\n\n.. :ide: +#-\n.. . Show Ouput ()\n\n.. :ide: COMPILE: clean _build directory\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" && cd doc && rm -rf _build *.rst.auto\" ) nil))\n\n.. :ide: #\n.. . ()\n\n.. :ide: COMPILE: Complete versions (HTML/PDF)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" && cd doc && make html && make latexpdf\" ) nil))\n\n.. :ide: COMPILE: Standalone Versions (HTML/PDF)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" && PATH=\\\".:$PATH\\\" && sphinx-readme.sh  --format singlehtml \" fn \" && PATH=\\\".:$PATH\\\" && sphinx-readme.sh  --format pdf \" fn ) nil))\n\n.. :ide: COMPILE: All versions (HTML/PDF)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" && PATH=\\\".:$PATH\\\" && sphinx-readme.sh  --format singlehtml \" fn \" && PATH=\\\".:$PATH\\\" && sphinx-readme.sh  --format pdf \" fn \" && cd doc && make html && make latexpdf\" ) nil))\n\n.. :ide: #\n.. . ()\n\n.. :ide: COMPILE: render reST as EPUB (sphinx-readme.sh)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format epub \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))\n\n.. :ide: COMPILE: render reST as PDF  (sphinx-readme.sh)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format pdf \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))\n\n.. :ide: COMPILE: render doc as HTML  (sphinx-build in doc)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let () (save-buffer) (compile (concat \"cd doc && make html\"))))\n\n.. :ide: COMPILE: render reST as HTML (sphinx-readme.sh)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format singlehtml \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))\n\n.. :ide: +#-\n.. . Process with sphinx-readme.sh ()\n\n.. :ide: COMPILE: render reST as pseudoXML\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --traceback \" (shell-quote-argument fp) \" 2>&1 #| tee \" (shell-quote-argument fn) \".pxml\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; ws_rst2pseudoxml.py \" args))))\n\n.. :ide: +#-\n.. . Process ()\n\n.. :ide: QUO: ~~ Subsubsection ~~\n.. . (insert \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\:rem\\:`|\\:sec\\:|`\\\\ ::fillme\\::\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\" )\n\n.. :ide: QUO: -- Subsection --\n.. . (insert \"--------------------------------------------------\\n\\:rem\\:`||\\:sec\\:||`\\\\ ::fillme\\::\\n--------------------------------------------------\\n\" )\n\n.. :ide: QUO: == Section ==\n.. . (insert \"==================================================\\n\\:rem\\:`|||\\:sec\\:|||`\\\\ ::fillme\\::\\n==================================================\\n\" )\n\n.. :ide: +#-\n.. . Sections ()\n\n.. :ide: OCCUR-OUTLINE:  `|||: sec :|||' + ^.. + command comments\n.. . (x-symbol-tag-occur-outline \"sec\" '(\"|:\" \":|\") (cons (cons \"^\" \".. \") (cons nil nil)) \"\\\\(_`[^`\\n]+`\\\\|\\\\[[^]\\n]+\\\\]\\\\|[|][^|\\n]+[|]\\\\|[^:\\n]+::\\\\)\")\n\n.. :ide: MENU-OUTLINE:  `|||: sec :|||' + ^.. + command comments\n.. . (x-eIDE-menu-outline \"sec\" '(\"|:\" \":|\") (cons (cons \"^\" \".. \") (cons nil nil)) \"\\\\(_`[^`\\n]+`\\\\|\\\\[[^]\\n]+\\\\]\\\\|[|][^|\\n]+[|]\\\\|[^:\\n]+::\\\\)\")\n\n.. \f\n.. Local Variables:\n.. mode: rst\n.. snip-mode: rst\n.. truncate-lines: t\n.. symbol-tag-symbol-regexp: \"[-0-9A-Za-z_#]\\\\([-0-9A-Za-z_. ]*[-0-9A-Za-z_]\\\\|\\\\)\"\n.. symbol-tag-auto-comment-mode: nil\n.. symbol-tag-srx-is-safe-with-nil-delimiters: nil\n.. End:\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/wolfmanx/snappets", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "snappets", "package_url": "https://pypi.org/project/snappets/", "platform": "", "project_url": "https://pypi.org/project/snappets/", "project_urls": {"Homepage": "https://bitbucket.org/wolfmanx/snappets"}, "release_url": "https://pypi.org/project/snappets/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Snippets in Python", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. -*- coding: utf-8 -*-<br>.. \\||&lt;-snip-&gt;|| start<br>.. \\||&lt;-snap-&gt;|| include ^doc_defs.snip$<br>.. \\||&lt;-snap-&gt;|| part_top<br>.. Copyright (C) 2018, Wolfgang Scherer, &lt;Wolfgang.Scherer at gmx.de&gt;<br>.. Sponsored by Wiedenmann-Seile GmbH, http://ws-gruppe.de<br>..<br>.. This file is part of Snappets.<br>..<br>.. Permission is granted to copy, distribute and/or modify this document<br>.. under the terms of the GNU Free Documentation License, Version 1.3<br>.. or any later version published by the Free Software Foundation;<br>.. with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.<br>.. A copy of the license is included in the main documentation of Snappets.<br><br>.. inline comments (with du_comment_role)<br>.. role:: rem(comment)<br>.. role:: html(raw)<br>   :format: html<br>.. role:: shx(code)<br>   :language: sh<br><br>.. \\||&lt;-snap-&gt;|| part_top<br>.. \\||&lt;-snap-&gt;|| part_title<br><br>##################################################<br>Snappets<br>##################################################<br>.. \\||&lt;-snap-&gt;|| part_title<br>.. \\||&lt;-snap-&gt;|| part_contents<br><br>The `full HTML document &lt;doc/_build/html/index.html&gt;`_ is available in<br>the `Sphinx HTML build directory &lt;doc/_build/html/&gt;`_<br><br>:Author: `Wolfgang Scherer`_<br><br>.. \\||&lt;-snap-&gt;|| part_contents<br>.. \\||&lt;-snap-&gt;|| part_abstract<br>.. &gt;&gt;CODD See `the components of a doctoral dissertation and their order &lt;http://site.uit.no/english/writing-style/bookstructure/&gt;`_<br>.. &gt;&gt;CODD Dedication<br>.. &gt;&gt;CODD Epigraph<br>.. &gt;&gt;CODD Abstract<br>.. \\||&lt;-snap-&gt;|| subst seclevel section<br>.. \\||&lt;-snap-&gt;|| not_doc_standalone<br>.. \\||&lt;-snap-&gt;|| subst seclevel chapter<br>.. \\||&lt;-snap-&gt;|| not_doc_standalone<br><br>.. raw:: latex<br><br>   \\iffalse<br><br>.. rubric:: Quickstart<br>.. raw:: latex<br><br>   \\fi<br>   \\section*{Quickstart}<br>   \\addcontentsline{toc}{@seclevel@}{Quickstart}%<br>   \\markboth{Quickstart}{Quickstart}%<br>   \\phantomsection<br><br>.. \\|:here:|<br><br>.. \\||&lt;-snap-&gt;|| not_doc_chapter<br><br>.. raw:: latex<br><br>   \\iffalse<br><br>.. rubric:: Abstract<br>.. raw:: latex<br><br>   \\fi<br>   \\section*{Abstract}<br>   \\addcontentsline{toc}{@seclevel@}{Abstract}%<br>   \\markboth{Abstract}{Abstract}%<br>   \\phantomsection<br><br>.. \\||&lt;-snap-&gt;|| not_doc_chapter<br><br>.. compound::<br><br>   Snap-on snippets for web and CLI.<br><br>   .. \\|:here:|<br><br>.. \\||&lt;-snap-&gt;|| part_abstract<br>.. \\||&lt;-snap-&gt;|| part_contents<br>.. &gt;&gt;CODD Contents page<br><br>.. contents::<br>..<br><br>.. &gt;&gt;CODD List of Illustrations<br>.. &gt;&gt;CODD List of Tables<br>.. \\||&lt;-snap-&gt;|| part_contents<br>.. \\||&lt;-snap-&gt;|| part_abstract<br>.. \\||&lt;-snap-&gt;|| not_doc_overview<br>.. \\||&lt;-snap-&gt;|| not_doc_chapter<br>.. &gt;&gt;CODD Acknowledgements<br>.. &gt;&gt;CODD Note on Transliterations<br>.. &gt;&gt;CODD List of Abbreviations<br><br>.. raw:: latex<br><br>   \\iffalse<br><br>.. rubric:: Abbreviations<br>.. raw:: latex<br><br>   \\fi<br>   \\section*{Abbreviations}<br>   \\addcontentsline{toc}{@seclevel@}{Abbreviations}%<br>   \\markboth{Abbreviations}{Abbreviations}%<br>   \\phantomsection<br><br>.. \\||&lt;-snap-&gt;|| doc_standalone<br>.. include:: doc/abbrevs.inc<br>.. \\||&lt;-snap-&gt;|| doc_standalone<br>.. \\||&lt;-snap-&gt;|| not_doc_standalone<br>.. @include_directive_combined@  abbrevs.inc<br>.. \\||&lt;-snap-&gt;|| not_doc_standalone<br>.. \\||&lt;-snap-&gt;|| not_doc_chapter<br>.. \\||&lt;-snap-&gt;|| not_doc_overview<br>.. \\||&lt;-snap-&gt;|| part_abstract<br>.. \\||&lt;-snap-&gt;|| inc_standalone ^standalone-header.snip$<br>.. \\||&lt;-snap-&gt;|| inc_index ^index-header.snip$<br>.. \\||&lt;-snap-&gt;|| inc_overview ^overview-header.snip$<br>.. \\||&lt;-snap-&gt;|| inc_chapter ^chapter-header.snip$<br>.. \\||&lt;-snap-&gt;|| part_body<br>.. &gt;&gt;CODD Introduction<br><br>==================================================<br>Introduction<br>==================================================<br><br>.. &gt;&gt;CODD Chapter<br>.. &gt;&gt;CODD Conclusion<br>.. &gt;&gt;CODD Appendix A<br><br>.. \\|:here:|<br><br>.. &gt;&gt;CODD Notes<br>.. ==================================================<br>.. Footnotes<br>.. ==================================================<br><br>:html:`&lt;hr&gt;`<br><br>.. \\[#]<br><br>.. &gt;&gt;CODD Reference List/Bibliography<br>.. ==================================================<br>.. References<br>.. ==================================================<br><br>.. \\||&lt;-snap-&gt;|| part_body<br>.. \\||&lt;-snap-&gt;|| part_defs<br>.. \\||&lt;-snap-&gt;|| doc_standalone<br>.. include:: doc/doc_defs.inc<br>.. include:: doc/doc_defs_standalone.inc<br>.. \\||&lt;-snap-&gt;|| doc_standalone<br>.. \\||&lt;-snap-&gt;|| not_doc_standalone<br>.. @include_directive_combined@ doc_defs.inc<br>.. @include_directive_combined@ doc_defs_combined.inc<br>.. \\||&lt;-snap-&gt;|| not_doc_standalone<br>.. \\||&lt;-snap-&gt;|| part_defs<br>.. \\||&lt;-snap-&gt;|| inc_standalone ^standalone-footer.snip$<br>.. \\||&lt;-snap-&gt;|| inc_index ^index-footer.snip$<br>.. \\||&lt;-snap-&gt;|| inc_overview ^overview-footer.snip$<br>.. \\||&lt;-snap-&gt;|| inc_chapter ^chapter-footer.snip$<br>.. \\||&lt;-snap-&gt;|| part_bottom<br>.. \\||&lt;-snap-&gt;|| doc_standalone<br><br>**Copyright**<br><br>Copyright (C) 2018, `Wolfgang Scherer`_.<br>Sponsored by `Wiedenmann-Seile GmbH`_.<br>See the document source for conditions of use under the GNU Free<br>Documentation License.<br><br>.. \\||&lt;-snap-&gt;|| doc_standalone<br><br>.. _`Wiedenmann-Seile GmbH`: http://ws-gruppe.de<br>.. _`Wolfgang Scherer`: wolfgang.scherer@ws-gruppe.de<br><br>.. \\||&lt;-snap-&gt;|| part_bottom<br>.. \\||&lt;-snip-&gt;|| stop<br><br>.. ==================================================<br>.. END<br>.. ==================================================<br><br>.. (progn (forward-line 1) (snip-insert \"rst_t.ide-update\" t t \"rst\") (insert \"\\n\"))<br>.. <br>.. :ide-menu: Emacs IDE Main Menu - Buffer @BUFFER@<br>.. . M-x `eIDE-menu' ()(eIDE-menu \"z\")<br><br>.. :ide: DELIM: SNIPPETS (ABOUT)       |q|&lt;- SYM -&gt;||,   ||&lt;- SYM -&gt;||,  @| SYM @<br>.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"||&lt;-\") (cons \"-&gt;||\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||&lt;-\") (cons \"-&gt;||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@|\") (cons \"@\" nil)))))<br><br>.. :ide: DELIM: SNIPPETS (DOC)          ||&lt;- SYM -&gt;||,     |: SYM :|,     ` SYM `<br>.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||&lt;-\") (cons \"-&gt;||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"\\\\(\\\\`\\\\|[^\\\\]\\\\)\" \"`\") (cons \"`\" nil)))))<br><br>.. :ide: DELIM: SNIPPETS (SNIP DOC)     ||&lt;- SYM -&gt;||,     |: SYM :|,     @ SYM @<br>.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||&lt;-\") (cons \"-&gt;||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)))))<br><br>.. :ide: DELIM: SNIPPETS (FILLME)       ||&lt;- SYM -&gt;||,     :: SYM ::,     @ SYM @<br>.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||&lt;-\") (cons \"-&gt;||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)))))<br><br>.. :ide: DELIM: SNIPPETS (SUBST)        ||&lt;- SYM -&gt;||,      @ SYM @,      @ SYM @<br>.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||&lt;-\") (cons \"-&gt;||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`\" nil)))))<br><br>.. :ide: +#-<br>.. . Snippet Delimiter Sets ()<br><br>.. :ide: DELIM: ReST (links)              ` SYM `_,    .. _` SYM `,      ` SYM `<br>.. . (let nil (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`_\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \".. _`\") (cons \"`:\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"\\\\(\\\\`\\\\|[^\\\\]\\\\)\" \"`\") (cons \"`\" nil)))))<br><br>.. :ide: DELIM: STANDARD (GNU quoting)    |: SYM :|,       :: SYM ::,     ` SYM '<br>.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"`\") (cons \"'\" nil)))))<br><br>.. :ide: DELIM: STANDARD (ReST quoting)   |: SYM :|,       :: SYM ::,     ` SYM `<br>.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`\" nil)))))<br><br>.. :ide: +#-<br>.. . Delimiter Sets ()<br><br>.. :ide: COMPILE: render reST as LaTeX<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2latex.py --traceback | tee \" (shell-quote-argument fn) \".tex\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))<br><br>.. :ide: COMPILE: render reST as MAN<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2man.py --traceback \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))<br><br>.. :ide: COMPILE: render reST as TXT (via MAN)<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2man.py --traceback | man -l -\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; snr \" args))))<br><br>.. :ide: COMPILE: render reST as ODT --strip-comments<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2odt.py --traceback --strip-comments | cat &gt;\" (shell-quote-argument fn) \".odt \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))<br><br>.. :ide: COMPILE: render reST as LaTeX, compile PDF and view with xdg-open<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2latex.py --traceback | tee \" (shell-quote-argument fn) \".tex &amp;&amp; pdflatex '\\\\nonstopmode\\\\input \" (shell-quote-argument fn) \".tex' &amp;&amp; xdg-open \" (shell-quote-argument fn) \".pdf\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))<br><br>.. :ide: COMPILE: render reST as PDF<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2pdf -e ws_docutils.raw_role &gt;\" (shell-quote-argument fn) \".pdf\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))<br><br>.. :ide: COMPILE: render reST as HTML<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2html.py --traceback --cloak-email-addresses | ${SED__PROG-sed} '\\n/&lt;\\\\/head&gt;/i\\\\\\n&lt;style type=\\\"text/css\\\"&gt;\\\\\\nimg { max-width\\: 1200px; }\\\\\\n&lt;/style&gt;\\n' | tee \" (shell-quote-argument fn) \".html \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))<br><br>.. :ide: +#-<br>.. . Process with ws_rst2xxx ()<br><br>.. :ide: CMD: show doc/_build PDF output<br>.. . (let* ((fp (buffer-file-name)) (fd (file-name-directory fp))) (shell-command (concat \"xdg-open \\\"$( ls \" fd \"doc/_build/latex/*.aux | sed 's,\\\\.aux,.pdf,' )\\\"\" ) nil))<br><br>.. :ide: CMD: show doc/_build HTML output<br>.. . (let* ((fp (buffer-file-name)) (fd (file-name-directory fp))) (shell-command (concat \"xdg-open \" fd \"doc/_build/html/index.html\" ) nil))<br><br>.. :ide: CMD: show PDF output<br>.. . (let* ((fp (buffer-file-name)) (fb (file-name-sans-extension fp))) (shell-command (concat \"xdg-open '\" fb \".pdf'\")))<br><br>.. :ide: CMD: show HTML output<br>.. . (let* ((fp (buffer-file-name)) (fb (file-name-sans-extension fp))) (shell-command (concat \"xdg-open '\" fb \".html'\")))<br><br>.. :ide: +#-<br>.. . Show Ouput ()<br><br>.. :ide: COMPILE: clean _build directory<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" &amp;&amp; cd doc &amp;&amp; rm -rf _build *.rst.auto\" ) nil))<br><br>.. :ide: #<br>.. . ()<br><br>.. :ide: COMPILE: Complete versions (HTML/PDF)<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" &amp;&amp; cd doc &amp;&amp; make html &amp;&amp; make latexpdf\" ) nil))<br><br>.. :ide: COMPILE: Standalone Versions (HTML/PDF)<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" &amp;&amp; PATH=\\\".:$PATH\\\" &amp;&amp; sphinx-readme.sh  --format singlehtml \" fn \" &amp;&amp; PATH=\\\".:$PATH\\\" &amp;&amp; sphinx-readme.sh  --format pdf \" fn ) nil))<br><br>.. :ide: COMPILE: All versions (HTML/PDF)<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" &amp;&amp; PATH=\\\".:$PATH\\\" &amp;&amp; sphinx-readme.sh  --format singlehtml \" fn \" &amp;&amp; PATH=\\\".:$PATH\\\" &amp;&amp; sphinx-readme.sh  --format pdf \" fn \" &amp;&amp; cd doc &amp;&amp; make html &amp;&amp; make latexpdf\" ) nil))<br><br>.. :ide: #<br>.. . ()<br><br>.. :ide: COMPILE: render reST as EPUB (sphinx-readme.sh)<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format epub \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))<br><br>.. :ide: COMPILE: render reST as PDF  (sphinx-readme.sh)<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format pdf \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))<br><br>.. :ide: COMPILE: render doc as HTML  (sphinx-build in doc)<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let () (save-buffer) (compile (concat \"cd doc &amp;&amp; make html\"))))<br><br>.. :ide: COMPILE: render reST as HTML (sphinx-readme.sh)<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format singlehtml \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))<br><br>.. :ide: +#-<br>.. . Process with sphinx-readme.sh ()<br><br>.. :ide: COMPILE: render reST as pseudoXML<br>.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --traceback \" (shell-quote-argument fp) \" 2&gt;&amp;1 #| tee \" (shell-quote-argument fn) \".pxml\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; ws_rst2pseudoxml.py \" args))))<br><br>.. :ide: +#-<br>.. . Process ()<br><br>.. :ide: QUO: ~~ Subsubsection ~~<br>.. . (insert \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\:rem\\:`|\\:sec\\:|`\\\\ ::fillme\\::\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\" )<br><br>.. :ide: QUO: -- Subsection --<br>.. . (insert \"--------------------------------------------------\\n\\:rem\\:`||\\:sec\\:||`\\\\ ::fillme\\::\\n--------------------------------------------------\\n\" )<br><br>.. :ide: QUO: == Section ==<br>.. . (insert \"==================================================\\n\\:rem\\:`|||\\:sec\\:|||`\\\\ ::fillme\\::\\n==================================================\\n\" )<br><br>.. :ide: +#-<br>.. . Sections ()<br><br>.. :ide: OCCUR-OUTLINE:  `|||: sec :|||' + ^.. + command comments<br>.. . (x-symbol-tag-occur-outline \"sec\" '(\"|:\" \":|\") (cons (cons \"^\" \".. \") (cons nil nil)) \"\\\\(_`[^`\\n]+`\\\\|\\\\[[^]\\n]+\\\\]\\\\|[|][^|\\n]+[|]\\\\|[^:\\n]+::\\\\)\")<br><br>.. :ide: MENU-OUTLINE:  `|||: sec :|||' + ^.. + command comments<br>.. . (x-eIDE-menu-outline \"sec\" '(\"|:\" \":|\") (cons (cons \"^\" \".. \") (cons nil nil)) \"\\\\(_`[^`\\n]+`\\\\|\\\\[[^]\\n]+\\\\]\\\\|[|][^|\\n]+[|]\\\\|[^:\\n]+::\\\\)\")<br><br>.. <br>.. Local Variables:<br>.. mode: rst<br>.. snip-mode: rst<br>.. truncate-lines: t<br>.. symbol-tag-symbol-regexp: \"[-0-9A-Za-z_#]\\\\([-0-9A-Za-z_. ]*[-0-9A-Za-z_]\\\\|\\\\)\"<br>.. symbol-tag-auto-comment-mode: nil<br>.. symbol-tag-srx-is-safe-with-nil-delimiters: nil<br>.. End:<br>\n          </div>"}, "last_serial": 4294676, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "a792859efad76eaf35da4cdfe40e8526", "sha256": "2b681e930a777305cdcbcf40a3336ffb551f9a24fa644b684b573d38016bcac8"}, "downloads": -1, "filename": "snappets-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a792859efad76eaf35da4cdfe40e8526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22941, "upload_time": "2018-09-21T01:27:26", "upload_time_iso_8601": "2018-09-21T01:27:26.869987Z", "url": "https://files.pythonhosted.org/packages/a7/40/cc4765df51a7988e41f4933c86c6d2e2f85481ca8348c4185e53342d9534/snappets-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a792859efad76eaf35da4cdfe40e8526", "sha256": "2b681e930a777305cdcbcf40a3336ffb551f9a24fa644b684b573d38016bcac8"}, "downloads": -1, "filename": "snappets-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a792859efad76eaf35da4cdfe40e8526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22941, "upload_time": "2018-09-21T01:27:26", "upload_time_iso_8601": "2018-09-21T01:27:26.869987Z", "url": "https://files.pythonhosted.org/packages/a7/40/cc4765df51a7988e41f4933c86c6d2e2f85481ca8348c4185e53342d9534/snappets-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:34 2020"}