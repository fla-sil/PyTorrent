{"info": {"author": "Jean-S\u00e9bastien SUZANNE", "author_email": "jssuzanne@anybox.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. This file is a part of the AnyBlok Marshmallow project\n..\n..    Copyright (C) 2017 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..\n.. This Source Code Form is subject to the terms of the Mozilla Public License,\n.. v. 2.0. If a copy of the MPL was not distributed with this file,You can\n.. obtain one at http://mozilla.org/MPL/2.0/.\n\n.. image:: https://img.shields.io/pypi/pyversions/anyblok_marshmallow.svg?longCache=True\n    :alt: Python versions\n\n.. image:: https://img.shields.io/pypi/v/AnyBlok_Marshmallow.svg\n   :target: https://pypi.python.org/pypi/AnyBlok_Marshmallow/\n   :alt: Version status\n\n.. image:: https://travis-ci.org/AnyBlok/AnyBlok_Marshmallow.svg?branch=master\n    :target: https://travis-ci.org/AnyBlok/AnyBlok_Marshmallow\n    :alt: Build status\n\n.. image:: https://coveralls.io/repos/github/AnyBlok/AnyBlok_Marshmallow/badge.svg?branch=master\n    :target: https://coveralls.io/github/AnyBlok/AnyBlok_Marshmallow?branch=master\n    :alt: Coverage\n\n.. image:: https://img.shields.io/pypi/v/AnyBlok_Marshmallow.svg\n   :target: https://pypi.python.org/pypi/AnyBlok_Marshmallow/\n   :alt: Version status\n\n.. image:: https://readthedocs.org/projects/anyblok-marshmallow/badge/?version=latest\n    :alt: Documentation Status\n    :scale: 100%\n    :target: https://doc.anyblok-marshmallow.anyblok.org/?badge=latest\n\n\nAnyBlok Marshmallow\n===================\n\nImprove `AnyBlok <http://doc.anyblok.org>`_ to add validator, serializer and \ndeserializer schema with `marshmallow <https://marshmallow.readthedocs.io/en/latest/>`_.\n\nThis module is a wrapper of `marshmallow-sqlalchemy <https://marshmallow-sqlalchemy.readthedocs.io/en/latest/>`_,\nthe goal is to give the SQLAlchemy Model build by AnyBlok to this librairy\n\nAnyBlok Marshmallow is released under the terms of the `Mozilla Public License`.\n\nSee the `latest documentation <http://doc.anyblok-marshmallow.anyblok.org/>`_\n\n\n.. This file is a part of the AnyBlok / Marshmallow project\n..\n..    Copyright (C) 2017 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..    Copyright (C) 2019 Jean-Sebastien SUZANNE <js.suzanne@gmail.com>\n..\n.. This Source Code Form is subject to the terms of the Mozilla Public License,\n.. v. 2.0. If a copy of the MPL was not distributed with this file,You can\n.. obtain one at http://mozilla.org/MPL/2.0/.\n\n.. contents::\n\nFront Matter\n============\n\nInformation about the AnyBlok / Marshmallow project.\n\nProject Homepage\n----------------\n\nAnyBlok is hosted on `github <http://github.com>`_ - the main project\npage is at https://github.com/AnyBlok/AnyBlok_Marshmallow. Source code is\ntracked here using `GIT <https://git-scm.com>`_.\n\nReleases and project status are available on Pypi at\nhttp://pypi.python.org/pypi/anyblok_marshmallow.\n\nThe most recent published version of this documentation should be at\nhttp://doc.anyblok-marshmallow.anyblok.org.\n\nProject Status\n--------------\n\nAnyBlok with Marshmallow is currently in beta status and is expected to be fairly\nstable.   Users should take care to report bugs and missing features on an as-needed\nbasis.  It should be expected that the development version may be required\nfor proper implementation of recently repaired issues in between releases;\n\nInstallation\n------------\n\nInstall released versions of AnyBlok from the Python package index with\n`pip <http://pypi.python.org/pypi/pip>`_ or a similar tool::\n\n    pip install anyblok_marshmallow\n\nInstallation via source distribution is via the ``setup.py`` script::\n\n    python setup.py install\n\nInstallation will add the ``anyblok`` commands to the environment.\n\nUnit Test\n---------\n\nRun the test with ``pytest``::\n\n    pip install pytest pytest-cov\n    ANYBLOK_DRIVER_NAME=postgres ANYBLOK_DATABASE_NAME=mybase pytest anyblok_marshmallow/tests\n\nDependencies\n------------\n\nAnyBlok works with **Python 3.6** and later. The install process will\nensure that `AnyBlok <http://doc.anyblok.org>`_,\n`marshmallow >= 3.2.0 <https://marshmallow.readthedocs.io/en/latest/>`_ and \n`marshmallow-sqlalchemy <https://marshmallow-sqlalchemy.readthedocs.io/en/latest/>`_ \nare installed, in addition to other dependencies. \nThe latest version of them is strongly recommended.\n\n\nContributing (hackers needed!)\n------------------------------\n\nAnyblok / Marshmallow is at a very early stage, feel free to fork, talk with core\ndev, and spread the word!\n\nAuthor\n------\n\nJean-S\u00e9bastien Suzanne\n\nContributors\n------------\n\n`Anybox <http://anybox.fr>`_ team:\n\n* Jean-S\u00e9bastien Suzanne\n\n`Sensee <http://sensee.com>`_ team:\n\n* Franck Bret\n\nBugs\n----\n\nBugs and feature enhancements to AnyBlok should be reported on the `Issue\ntracker <https://github.com/AnyBlok/AnyBlok_Marshmallow/issues>`_.\n\n.. This file is a part of the AnyBlok / Marshmallow project\n..\n..    Copyright (C) 2017 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..\n.. This Source Code Form is subject to the terms of the Mozilla Public License,\n.. v. 2.0. If a copy of the MPL was not distributed with this file,You can\n.. obtain one at http://mozilla.org/MPL/2.0/.\n\n.. contents::\n\nMemento\n=======\n\nDeclare your **AnyBlok model**\n------------------------------\n\n::\n\n    from anyblok.column import Integer, String\n    from anyblok.relationship import Many2One, Many2Many\n    from anyblok import Declarations\n\n\n    @Declarations.register(Declarations.Model)\n    class City:\n\n        id = Integer(primary_key=True)\n        name = String(nullable=False)\n        zipcode = String(nullable=False)\n\n        def __repr__(self):\n            return '<City(name={self.name!r})>'.format(self=self)\n\n\n    @Declarations.register(Declarations.Model)\n    class Tag:\n\n        id = Integer(primary_key=True)\n        name = String(nullable=False)\n\n        def __repr__(self):\n            return '<Tag(name={self.name!r})>'.format(self=self)\n\n\n    @Declarations.register(Declarations.Model)\n    class Customer:\n        id = Integer(primary_key=True)\n        name = String(nullable=False)\n        tags = Many2Many(model=Declarations.Model.Tag)\n\n        def __repr__(self):\n            return '<Customer(name={self.name!r}, '\n                   'tags={self.tags!r})>'.format(self=self)\n\n\n    @Declarations.register(Declarations.Model)\n    class Address:\n\n        id = Integer(primary_key=True)\n        street = String(nullable=False)\n        city = Many2One(model=Declarations.Model.City, nullable=False)\n        customer = Many2One(\n            model=Declarations.Model.Customer, nullable=False,\n            one2many=\"addresses\")\n\n\n.. warning::\n\n    The **AnyBlok model** must be declared in a blok\n\n\nDeclare your schema\n-------------------\n\n::\n\n    from anyblok_marshmallow import SchemaWrapper, PostLoadSchema, Nested\n\n    class CitySchema(SchemaWrapper):\n        model = 'Model.City'\n\n\n    class TagSchema(SchemaWrapper):\n        model = 'Model.Tag'\n\n\n    class AddressSchema(SchemaWrapper):\n        model = 'Model.Address'\n\n        class Schema:\n            # Add some marshmallow fields or behaviours\n\n            # follow the relationship Many2One and One2One\n            city = Nested(CitySchema)\n\n\n    class CustomerSchema(SchemaWrapper):\n        model = 'Model.Customer'\n        # optionally attach an AnyBlok registry\n        # to use for serialization, desarialization and validation\n        registry = registry\n\n        class Schema(PostLoadSchema):\n            # follow the relationship One2Many and Many2Many\n            # - the many=True is required because it is *2Many\n            # - exclude is used to forbid the recurse loop\n            addresses = Nested(AddressSchema, many=True, exclude=('customer', ))\n            tags = Nested(TagSchema, many=True)\n\n\n    customer_schema = CustomerSchema()\n\n\n.. note::\n\n    **New** in version **1.1.0** the Nested field must come from **anyblok_marshmallow**,\n    because **marshmallow** cache the Nested field with the context. And the context is not propagated\n    again if it changed\n\n.. note::\n\n    **Ref** in version **1.4.0**, ``post_load_return_instance`` was replaced by the mixin class\n    ``PostLoadSchema``\n\n.. note::\n\n    **Ref** in version **2.1.0**, ``ModelSchema`` was replaced by ``SchemaWrapper``. This action\n    break the compatibility with the previous version, but allow to follow the upgrade of **marshmallow**\n\n\n(De)serialize your data and validate it\n---------------------------------------\n\n::\n\n    customer = registry.Customer.insert(name=\"JS Suzanne\")\n    tag1 = registry.Tag.insert(name=\"tag 1\")\n    customer.tags.append(tag1)\n    tag2 = registry.Tag.insert(name=\"tag 2\")\n    customer.tags.append(tag2)\n    rouen = registry.City.insert(name=\"Rouen\", zipcode=\"76000\")\n    paris = registry.City.insert(name=\"Paris\", zipcode=\"75000\")\n    registry.Address.insert(customer=customer, street=\"Somewhere\", city=rouen)\n    registry.Address.insert(customer=customer, street=\"Another place\", city=paris)\n\n    dump_data = customer_schema.dump(customer).data\n    # {\n    #     'id': 1,\n    #     'name': 'JS Suzanne',\n    #     'tags': [\n    #         {\n    #             'id': 1,\n    #             'name': 'tag 1',\n    #         },\n    #         {\n    #             'id': 2,\n    #             'name': 'tag 2',\n    #         },\n    #     ],\n    #     'addresses': [\n    #         {\n    #             'id': 1\n    #             'street': 'Somewhere'\n    #             'city': {\n    #                 'id': 1,\n    #                 'name': 'Rouen',\n    #                 'zipcode': '76000',\n    #             },\n    #         },\n    #         {\n    #             'id': 2\n    #             'street': 'Another place'\n    #             'city': {\n    #                 'id': 2,\n    #                 'name': 'Paris',\n    #                 'zipcode': '75000',\n    #             },\n    #         },\n    #     ],\n    # }\n\n    customer_schema.load(dump_data).data\n    # <Customer(name='JS Suzanne' tags=[<Tag(name='tag 1')>, <Tag (name='tag 2')>])>\n\n    errors = customer_schema.validate(dump_data)\n    # dict with all the validating errors\n\n.. note::\n\n    We have an instance of the model cause of the mixin ``PostLoadSchema``\n\n\nGive the registry\n-----------------\n\nThe schema need to have the registry.\n\nIf no registry found when the de(serialization) or validation then the \n**RegistryNotFound** exception will be raised.\n\nAdd the **registry** by the class attribute\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is the solution given in the main exemple::\n\n    class CustomerSchema(SchemaWrapper):\n        model = 'Model.Customer'\n        registry = registry\n\n\nAdd the **registry** during init\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis solution is use during the instanciation\n\n::\n\n    customer_schema = CustomerSchema(registry=registry)\n\n\nAdd the **registry** by the context\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis solution is use during the instanciation or after\n\n::\n\n    customer_schema = CustomerSchema(context={'registry': registry})\n\nor\n\n::\n\n    customer_schema = CustomerSchema()\n    customer_schema.context['registry'] = registry\n\n\nAdd the **registry** when the de(serialization or validator is called\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    customer_schema.dumps(customer, registry=registry)\n    customer_schema.dump(customer, registry=registry)\n    customer_schema.loads(dump_data, registry=registry)\n    customer_schema.load(dump_data, registry=registry)\n    customer_schema.validate(dump_data, registry=registry)\n\n\n**model** option\n----------------\n\nThis option add in the model name. As the registry, this option\ncan be passed by definition, initialization, context or during the call of the (de)serialization / validation\n\n::\n\n    class AnySchema(SchemaWrapper):\n        model = \"Model.Customer\"\n\nor\n\n::\n\n    any_schema = AnySchema(model=\"Model.customer\")\n\nor\n\n::\n\n    any_schema.context['model'] = \"Model.Customer\"\n\nor\n\n::\n\n    any_schema.dumps(instance, model=\"Model.Customer\")\n    any_schema.dump(instance, model=\"Model.Customer\")\n    any_schema.loads(dump_data, model=\"Model.Customer\")\n    any_schema.load(dump_data, model=\"Model.Customer\")\n    any_schema.validate(dump_data, model=\"Model.Customer\")\n\n\n**only_primary_key** option\n---------------------------\n\nThis option add in the only argument the primary keys of the model. As the registry, this option\ncan be passed by definition, initialization, context or during the call of the (de)serialization / validation\n\n::\n\n    class CustomerSchema(SchemaWrapper):\n        model = \"Model.Customer\"\n        only_primary_key = True\n\nor\n\n::\n\n    customer_schema = CustomerSchema(only_primary_key=True)\n\nor\n\n::\n\n    customer_schema.context['only_primary_key'] = True\n\nor\n\n::\n\n    customer_schema.dumps(instance, only_primary_key=True)\n    customer_schema.dump(instance, only_primary_key=True)\n    customer_schema.loads(dump_data, only_primary_key=True)\n    customer_schema.load(dump_data, only_primary_key=True)\n    customer_schema.validate(dump_data, only_primary_key=True)\n\n\n**required_fields** option\n--------------------------\n\nThis option force the generated fields, and only them to be requried.\n\n::\n\n    class CustomerSchema(SchemaWrapper):\n        model = \"Model.Customer\"\n        required_fields = True\n        # or required_fields = [ list of fieldname ]\n\nor\n\n::\n\n    customer_schema = CustomerSchema(required_fields=True)\n\nor\n\n::\n\n    customer_schema.context['required_fields'] = True\n\nor\n\n::\n\n    customer_schema.loads(dump_data, required_fields=True)\n    customer_schema.load(dump_data, required_fields=True)\n    customer_schema.validate(dump_data, required_fields=True)\n\n.. note:: All the attributes can take **True** or the list of the fieldname to be required\n\nUse the field JsonCollection\n----------------------------\n\nThis field allow the schema to inspect an AnyBlok.fields.Json in an any specific instance to \nvalidate the value.\n\nAnyBlok models::\n\n    @register(Model)\n    class Template:\n        name = anyblok.column.String(primary_key=True)\n        properties = anyblok.column.Json(defaumt={})\n\n    @register(Model)\n    class SaleOrder:\n        id = anyblok.column.Integer(primary_key=True)\n        number = anyblok.column.Integer(nullable=False)\n        discount = anyblok.column.Integer()\n\nAnyBlok / Marchmallow schema::\n\n    class SaleOrderSchema(SchemaWrapper):\n        model = 'Model.SaleOrder'\n\n        class Schema:\n            discount = JsonCollection(\n                fieldname='properties',\n                keys=['allowed_discount'],\n                cls_or_instance_type=marshmallow.fields.Integer(required=True)\n            )\n\nUse::\n\n    goodcustomer = registry.Template.insert(\n        name='Good customer',\n        properties={'allowed_discount': [10, 15, 30]\n    )\n    customer = registry.Template.insert(\n        name='Customer',\n        properties={'allowed_discount': [0, 5, 10]\n    )\n    badcustomer = registry.Template.insert(\n        name='Bad customer',\n        properties={'allowed_discount': [0]\n    )\n\n    schema = SaleOrderSchema(registry=registry)\n\n    --------------------------\n\n    data = schema.load(\n        {\n            number='SO0001',\n            discount=10,\n        },\n        instances={'default': goodcustomer}\n    )\n\n    --------------------------\n\n    data = schema.load(\n        {\n            number='SO0001',\n            discount=10,\n        },\n        instances={'default': customer}\n    )\n    ==> error = {}\n\n    --------------------------\n\n    data = schema.load(\n        {\n            number='SO0001',\n            discount=10,\n        },\n        instances={'default': badcustomer}\n    )\n    ==> error = {'discount': ['Not a valid choice']}\n\n.. This file is a part of the AnyBlok / Marshmallow project\n..\n..    Copyright (C) 2017 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..    Copyright (C) 2018 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..    Copyright (C) 2019 Jean-Sebastien SUZANNE <js.suzanne@gmail.com>\n..\n.. This Source Code Form is subject to the terms of the Mozilla Public License,\n.. v. 2.0. If a copy of the MPL was not distributed with this file,You can\n.. obtain one at http://mozilla.org/MPL/2.0/.\n\n.. contents::\n\nCHANGELOG\n=========\n\n2.3.0 (2019-10-31)\n------------------\n\n* Fixed du of Marshmallow 3.2.1 release\n\n2.2.3 (2019-05-06)\n------------------\n\n* Fixed du of Marshmallow 3.0.0RC5 release\n* Refactored unittest from nosetest to pytest\n\n2.2.2 (2018-12-06)\n------------------\n\n* Fixed du of Marshmallow 3.0.0RC1 release\n\n2.2.1 (2018-10-26)\n------------------\n\n* Fixed du of Marshmallow 3.0.0b19 release\n\n2.2.0 (2018-10-17)\n------------------\n\n* Fixed the convertion of type between **AnyBlok.Column** and **marshmallow.Field**\n\n2.1.0 (2018-09-26)\n------------------\n\n* Fixed the compatibility with **Marshmallow > 3.0.0b8**\n* Removed ``ModelSchema`` class\n* Added ``SchemaWrapper``, this is the best way to defined a generated\n  schema with the **marshmallow_sqlalchemy** library\n\n.. warning::\n\n    This version break the compatibility with previous version, in the only\n    goal to be adapted with the latest version of **marshmallow**\n\n2.0.1 (2018-06-07)\n------------------\n\n* Fix required_field put allow_none to False\n\n2.0.0 (2018-05-30)\n------------------\n\n* Add JsonCollection field, Allow to add a check in function of an collection\n  stored in a AnyBlok.fields.Json\n* Add Text field, to represent an ``anyblok.column.Text``\n* Migration of the code and unit test to marshmallow 3.0.0\n* Add Email matching for ``anyblok.column.Email``\n* Add URL matching for ``anyblok.column.URL``\n* Add PhoneNumber matching for ``anyblok.column.PhoneNumber``\n* Add Country matching for ``anyblok.column.Country``\n* Add required_fields option\n* Add InstanceField\n\n1.4.0 (2018-04-07)\n------------------\n\n* Replace **post_load_return_instance** method by **PostLoadSchema** class\n* In the case of the field **Selection**, the validator **OneOf** is \n  applied with the available values come from the AnyBlok columns\n* Replace **marshmallow_sqlalchemy.fields.Related** by \n  **anyblok_marshmallow.fields.Nested**. The goal is to improve the consistent \n  between all field in the schema\n\n1.3.0 (2017-12-23)\n------------------\n\n* [ADD] unittest on some case\n* [FIX] AnyBlok field.Function is return as MarshMallow fields.Raw\n* [ADD] fields.File, type to encode and decode to/from base 64\n\n1.2.0 (2017-11-30)\n------------------\n\n* [REF] decrease complexity\n* [IMP] Add ``validates_schema`` on ModelSchema to automaticly check\n  if the field exist on the model\n\n1.1.0 (2017-11-02)\n------------------\n\n* Add option put only the primary keys\n* Fix the Front page\n* REF model option, can be given by another way than Meta\n* Put RegistryNotFound in exceptions\n* Add Nested field, this field is not and have not to be cached\n\n1.0.2 (2017-10-25)\n------------------\n\n* Fix pypi documentation\n\n1.0.0 (2017-10-24)\n------------------\n\n* Add marshmallow schema for AnyBlok for:\n\n  - Serialization\n  - Deserialization\n  - Validation\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://anyblok-marshmallow.readthedocs.io/en/2.3.0", "keywords": "anyblok_marshmallow", "license": "", "maintainer": "", "maintainer_email": "", "name": "anyblok_marshmallow", "package_url": "https://pypi.org/project/anyblok_marshmallow/", "platform": "", "project_url": "https://pypi.org/project/anyblok_marshmallow/", "project_urls": {"Homepage": "https://anyblok-marshmallow.readthedocs.io/en/2.3.0"}, "release_url": "https://pypi.org/project/anyblok_marshmallow/2.3.0/", "requires_dist": null, "requires_python": "", "summary": "Add validator, serializer and deserializer to AnyBlok", "version": "2.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a5b81f35bc273a113064dc4e3181939bbfa8cf3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f616e79626c6f6b5f6d617273686d616c6c6f772e7376673f6c6f6e6743616368653d54727565\">\n<a href=\"https://pypi.python.org/pypi/AnyBlok_Marshmallow/\" rel=\"nofollow\"><img alt=\"Version status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c6b91d656e65a51bac2a2184460e3e573bce798/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f416e79426c6f6b5f4d617273686d616c6c6f772e737667\"></a>\n<a href=\"https://travis-ci.org/AnyBlok/AnyBlok_Marshmallow\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b62d9d062accb6597604f748b7f4e584c007a8c8/68747470733a2f2f7472617669732d63692e6f72672f416e79426c6f6b2f416e79426c6f6b5f4d617273686d616c6c6f772e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/AnyBlok/AnyBlok_Marshmallow?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/157fde32b966c67c84d2eff7960ea170c832b278/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f416e79426c6f6b2f416e79426c6f6b5f4d617273686d616c6c6f772f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/AnyBlok_Marshmallow/\" rel=\"nofollow\"><img alt=\"Version status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c6b91d656e65a51bac2a2184460e3e573bce798/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f416e79426c6f6b5f4d617273686d616c6c6f772e737667\"></a>\n<a href=\"https://doc.anyblok-marshmallow.anyblok.org/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a0a5e47a6c252f1dab5c06b756933cd46d7618c/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f616e79626c6f6b2d6d617273686d616c6c6f772f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div id=\"anyblok-marshmallow\">\n<h2><a href=\"#id97\" rel=\"nofollow\">AnyBlok Marshmallow</a></h2>\n<p>Improve <a href=\"http://doc.anyblok.org\" rel=\"nofollow\">AnyBlok</a> to add validator, serializer and\ndeserializer schema with <a href=\"https://marshmallow.readthedocs.io/en/latest/\" rel=\"nofollow\">marshmallow</a>.</p>\n<p>This module is a wrapper of <a href=\"https://marshmallow-sqlalchemy.readthedocs.io/en/latest/\" rel=\"nofollow\">marshmallow-sqlalchemy</a>,\nthe goal is to give the SQLAlchemy Model build by AnyBlok to this librairy</p>\n<p>AnyBlok Marshmallow is released under the terms of the <cite>Mozilla Public License</cite>.</p>\n<p>See the <a href=\"http://doc.anyblok-marshmallow.anyblok.org/\" rel=\"nofollow\">latest documentation</a></p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#anyblok-marshmallow\" id=\"id19\" rel=\"nofollow\">AnyBlok Marshmallow</a></li>\n<li><a href=\"#front-matter\" id=\"id20\" rel=\"nofollow\">Front Matter</a><ul>\n<li><a href=\"#project-homepage\" id=\"id21\" rel=\"nofollow\">Project Homepage</a></li>\n<li><a href=\"#project-status\" id=\"id22\" rel=\"nofollow\">Project Status</a></li>\n<li><a href=\"#installation\" id=\"id23\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#unit-test\" id=\"id24\" rel=\"nofollow\">Unit Test</a></li>\n<li><a href=\"#dependencies\" id=\"id25\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#contributing-hackers-needed\" id=\"id26\" rel=\"nofollow\">Contributing (hackers needed!)</a></li>\n<li><a href=\"#author\" id=\"id27\" rel=\"nofollow\">Author</a></li>\n<li><a href=\"#contributors\" id=\"id28\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#bugs\" id=\"id29\" rel=\"nofollow\">Bugs</a></li>\n</ul>\n</li>\n<li><a href=\"#memento\" id=\"id30\" rel=\"nofollow\">Memento</a><ul>\n<li><a href=\"#declare-your-anyblok-model\" id=\"id31\" rel=\"nofollow\">Declare your <strong>AnyBlok model</strong></a></li>\n<li><a href=\"#declare-your-schema\" id=\"id32\" rel=\"nofollow\">Declare your schema</a></li>\n<li><a href=\"#de-serialize-your-data-and-validate-it\" id=\"id33\" rel=\"nofollow\">(De)serialize your data and validate it</a></li>\n<li><a href=\"#give-the-registry\" id=\"id34\" rel=\"nofollow\">Give the registry</a><ul>\n<li><a href=\"#add-the-registry-by-the-class-attribute\" id=\"id35\" rel=\"nofollow\">Add the <strong>registry</strong> by the class attribute</a></li>\n<li><a href=\"#add-the-registry-during-init\" id=\"id36\" rel=\"nofollow\">Add the <strong>registry</strong> during init</a></li>\n<li><a href=\"#add-the-registry-by-the-context\" id=\"id37\" rel=\"nofollow\">Add the <strong>registry</strong> by the context</a></li>\n<li><a href=\"#add-the-registry-when-the-de-serialization-or-validator-is-called\" id=\"id38\" rel=\"nofollow\">Add the <strong>registry</strong> when the de(serialization or validator is called</a></li>\n</ul>\n</li>\n<li><a href=\"#model-option\" id=\"id39\" rel=\"nofollow\"><strong>model</strong> option</a></li>\n<li><a href=\"#only-primary-key-option\" id=\"id40\" rel=\"nofollow\"><strong>only_primary_key</strong> option</a></li>\n<li><a href=\"#required-fields-option\" id=\"id41\" rel=\"nofollow\"><strong>required_fields</strong> option</a></li>\n<li><a href=\"#use-the-field-jsoncollection\" id=\"id42\" rel=\"nofollow\">Use the field JsonCollection</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id43\" rel=\"nofollow\">CHANGELOG</a><ul>\n<li><a href=\"#id5\" id=\"id44\" rel=\"nofollow\">2.3.0 (2019-10-31)</a></li>\n<li><a href=\"#id6\" id=\"id45\" rel=\"nofollow\">2.2.3 (2019-05-06)</a></li>\n<li><a href=\"#id7\" id=\"id46\" rel=\"nofollow\">2.2.2 (2018-12-06)</a></li>\n<li><a href=\"#id8\" id=\"id47\" rel=\"nofollow\">2.2.1 (2018-10-26)</a></li>\n<li><a href=\"#id9\" id=\"id48\" rel=\"nofollow\">2.2.0 (2018-10-17)</a></li>\n<li><a href=\"#id10\" id=\"id49\" rel=\"nofollow\">2.1.0 (2018-09-26)</a></li>\n<li><a href=\"#id11\" id=\"id50\" rel=\"nofollow\">2.0.1 (2018-06-07)</a></li>\n<li><a href=\"#id12\" id=\"id51\" rel=\"nofollow\">2.0.0 (2018-05-30)</a></li>\n<li><a href=\"#id13\" id=\"id52\" rel=\"nofollow\">1.4.0 (2018-04-07)</a></li>\n<li><a href=\"#id14\" id=\"id53\" rel=\"nofollow\">1.3.0 (2017-12-23)</a></li>\n<li><a href=\"#id15\" id=\"id54\" rel=\"nofollow\">1.2.0 (2017-11-30)</a></li>\n<li><a href=\"#id16\" id=\"id55\" rel=\"nofollow\">1.1.0 (2017-11-02)</a></li>\n<li><a href=\"#id17\" id=\"id56\" rel=\"nofollow\">1.0.2 (2017-10-25)</a></li>\n<li><a href=\"#id18\" id=\"id57\" rel=\"nofollow\">1.0.0 (2017-10-24)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"front-matter\">\n<h2><a href=\"#id98\" rel=\"nofollow\">Front Matter</a></h2>\n<p>Information about the AnyBlok / Marshmallow project.</p>\n<div id=\"project-homepage\">\n<h3><a href=\"#id99\" rel=\"nofollow\">Project Homepage</a></h3>\n<p>AnyBlok is hosted on <a href=\"http://github.com\" rel=\"nofollow\">github</a> - the main project\npage is at <a href=\"https://github.com/AnyBlok/AnyBlok_Marshmallow\" rel=\"nofollow\">https://github.com/AnyBlok/AnyBlok_Marshmallow</a>. Source code is\ntracked here using <a href=\"https://git-scm.com\" rel=\"nofollow\">GIT</a>.</p>\n<p>Releases and project status are available on Pypi at\n<a href=\"http://pypi.python.org/pypi/anyblok_marshmallow\" rel=\"nofollow\">http://pypi.python.org/pypi/anyblok_marshmallow</a>.</p>\n<p>The most recent published version of this documentation should be at\n<a href=\"http://doc.anyblok-marshmallow.anyblok.org\" rel=\"nofollow\">http://doc.anyblok-marshmallow.anyblok.org</a>.</p>\n</div>\n<div id=\"project-status\">\n<h3><a href=\"#id100\" rel=\"nofollow\">Project Status</a></h3>\n<p>AnyBlok with Marshmallow is currently in beta status and is expected to be fairly\nstable.   Users should take care to report bugs and missing features on an as-needed\nbasis.  It should be expected that the development version may be required\nfor proper implementation of recently repaired issues in between releases;</p>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id101\" rel=\"nofollow\">Installation</a></h3>\n<p>Install released versions of AnyBlok from the Python package index with\n<a href=\"http://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a> or a similar tool:</p>\n<pre>pip install anyblok_marshmallow\n</pre>\n<p>Installation via source distribution is via the <tt>setup.py</tt> script:</p>\n<pre>python setup.py install\n</pre>\n<p>Installation will add the <tt>anyblok</tt> commands to the environment.</p>\n</div>\n<div id=\"unit-test\">\n<h3><a href=\"#id102\" rel=\"nofollow\">Unit Test</a></h3>\n<p>Run the test with <tt>pytest</tt>:</p>\n<pre>pip install pytest pytest-cov\nANYBLOK_DRIVER_NAME=postgres ANYBLOK_DATABASE_NAME=mybase pytest anyblok_marshmallow/tests\n</pre>\n</div>\n<div id=\"dependencies\">\n<h3><a href=\"#id103\" rel=\"nofollow\">Dependencies</a></h3>\n<p>AnyBlok works with <strong>Python 3.6</strong> and later. The install process will\nensure that <a href=\"http://doc.anyblok.org\" rel=\"nofollow\">AnyBlok</a>,\n<a href=\"https://marshmallow.readthedocs.io/en/latest/\" rel=\"nofollow\">marshmallow &gt;= 3.2.0</a> and\n<a href=\"https://marshmallow-sqlalchemy.readthedocs.io/en/latest/\" rel=\"nofollow\">marshmallow-sqlalchemy</a>\nare installed, in addition to other dependencies.\nThe latest version of them is strongly recommended.</p>\n</div>\n<div id=\"contributing-hackers-needed\">\n<h3><a href=\"#id104\" rel=\"nofollow\">Contributing (hackers needed!)</a></h3>\n<p>Anyblok / Marshmallow is at a very early stage, feel free to fork, talk with core\ndev, and spread the word!</p>\n</div>\n<div id=\"author\">\n<h3><a href=\"#id105\" rel=\"nofollow\">Author</a></h3>\n<p>Jean-S\u00e9bastien Suzanne</p>\n</div>\n<div id=\"contributors\">\n<h3><a href=\"#id106\" rel=\"nofollow\">Contributors</a></h3>\n<p><a href=\"http://anybox.fr\" rel=\"nofollow\">Anybox</a> team:</p>\n<ul>\n<li>Jean-S\u00e9bastien Suzanne</li>\n</ul>\n<p><a href=\"http://sensee.com\" rel=\"nofollow\">Sensee</a> team:</p>\n<ul>\n<li>Franck Bret</li>\n</ul>\n</div>\n<div id=\"bugs\">\n<h3><a href=\"#id107\" rel=\"nofollow\">Bugs</a></h3>\n<p>Bugs and feature enhancements to AnyBlok should be reported on the <a href=\"https://github.com/AnyBlok/AnyBlok_Marshmallow/issues\" rel=\"nofollow\">Issue\ntracker</a>.</p>\n<div id=\"id3\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#anyblok-marshmallow\" id=\"id58\" rel=\"nofollow\">AnyBlok Marshmallow</a></li>\n<li><a href=\"#front-matter\" id=\"id59\" rel=\"nofollow\">Front Matter</a><ul>\n<li><a href=\"#project-homepage\" id=\"id60\" rel=\"nofollow\">Project Homepage</a></li>\n<li><a href=\"#project-status\" id=\"id61\" rel=\"nofollow\">Project Status</a></li>\n<li><a href=\"#installation\" id=\"id62\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#unit-test\" id=\"id63\" rel=\"nofollow\">Unit Test</a></li>\n<li><a href=\"#dependencies\" id=\"id64\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#contributing-hackers-needed\" id=\"id65\" rel=\"nofollow\">Contributing (hackers needed!)</a></li>\n<li><a href=\"#author\" id=\"id66\" rel=\"nofollow\">Author</a></li>\n<li><a href=\"#contributors\" id=\"id67\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#bugs\" id=\"id68\" rel=\"nofollow\">Bugs</a></li>\n</ul>\n</li>\n<li><a href=\"#memento\" id=\"id69\" rel=\"nofollow\">Memento</a><ul>\n<li><a href=\"#declare-your-anyblok-model\" id=\"id70\" rel=\"nofollow\">Declare your <strong>AnyBlok model</strong></a></li>\n<li><a href=\"#declare-your-schema\" id=\"id71\" rel=\"nofollow\">Declare your schema</a></li>\n<li><a href=\"#de-serialize-your-data-and-validate-it\" id=\"id72\" rel=\"nofollow\">(De)serialize your data and validate it</a></li>\n<li><a href=\"#give-the-registry\" id=\"id73\" rel=\"nofollow\">Give the registry</a><ul>\n<li><a href=\"#add-the-registry-by-the-class-attribute\" id=\"id74\" rel=\"nofollow\">Add the <strong>registry</strong> by the class attribute</a></li>\n<li><a href=\"#add-the-registry-during-init\" id=\"id75\" rel=\"nofollow\">Add the <strong>registry</strong> during init</a></li>\n<li><a href=\"#add-the-registry-by-the-context\" id=\"id76\" rel=\"nofollow\">Add the <strong>registry</strong> by the context</a></li>\n<li><a href=\"#add-the-registry-when-the-de-serialization-or-validator-is-called\" id=\"id77\" rel=\"nofollow\">Add the <strong>registry</strong> when the de(serialization or validator is called</a></li>\n</ul>\n</li>\n<li><a href=\"#model-option\" id=\"id78\" rel=\"nofollow\"><strong>model</strong> option</a></li>\n<li><a href=\"#only-primary-key-option\" id=\"id79\" rel=\"nofollow\"><strong>only_primary_key</strong> option</a></li>\n<li><a href=\"#required-fields-option\" id=\"id80\" rel=\"nofollow\"><strong>required_fields</strong> option</a></li>\n<li><a href=\"#use-the-field-jsoncollection\" id=\"id81\" rel=\"nofollow\">Use the field JsonCollection</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id82\" rel=\"nofollow\">CHANGELOG</a><ul>\n<li><a href=\"#id5\" id=\"id83\" rel=\"nofollow\">2.3.0 (2019-10-31)</a></li>\n<li><a href=\"#id6\" id=\"id84\" rel=\"nofollow\">2.2.3 (2019-05-06)</a></li>\n<li><a href=\"#id7\" id=\"id85\" rel=\"nofollow\">2.2.2 (2018-12-06)</a></li>\n<li><a href=\"#id8\" id=\"id86\" rel=\"nofollow\">2.2.1 (2018-10-26)</a></li>\n<li><a href=\"#id9\" id=\"id87\" rel=\"nofollow\">2.2.0 (2018-10-17)</a></li>\n<li><a href=\"#id10\" id=\"id88\" rel=\"nofollow\">2.1.0 (2018-09-26)</a></li>\n<li><a href=\"#id11\" id=\"id89\" rel=\"nofollow\">2.0.1 (2018-06-07)</a></li>\n<li><a href=\"#id12\" id=\"id90\" rel=\"nofollow\">2.0.0 (2018-05-30)</a></li>\n<li><a href=\"#id13\" id=\"id91\" rel=\"nofollow\">1.4.0 (2018-04-07)</a></li>\n<li><a href=\"#id14\" id=\"id92\" rel=\"nofollow\">1.3.0 (2017-12-23)</a></li>\n<li><a href=\"#id15\" id=\"id93\" rel=\"nofollow\">1.2.0 (2017-11-30)</a></li>\n<li><a href=\"#id16\" id=\"id94\" rel=\"nofollow\">1.1.0 (2017-11-02)</a></li>\n<li><a href=\"#id17\" id=\"id95\" rel=\"nofollow\">1.0.2 (2017-10-25)</a></li>\n<li><a href=\"#id18\" id=\"id96\" rel=\"nofollow\">1.0.0 (2017-10-24)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"memento\">\n<h2><a href=\"#id108\" rel=\"nofollow\">Memento</a></h2>\n<div id=\"declare-your-anyblok-model\">\n<h3><a href=\"#id109\" rel=\"nofollow\">Declare your <strong>AnyBlok model</strong></a></h3>\n<pre>from anyblok.column import Integer, String\nfrom anyblok.relationship import Many2One, Many2Many\nfrom anyblok import Declarations\n\n\n@Declarations.register(Declarations.Model)\nclass City:\n\n    id = Integer(primary_key=True)\n    name = String(nullable=False)\n    zipcode = String(nullable=False)\n\n    def __repr__(self):\n        return '&lt;City(name={self.name!r})&gt;'.format(self=self)\n\n\n@Declarations.register(Declarations.Model)\nclass Tag:\n\n    id = Integer(primary_key=True)\n    name = String(nullable=False)\n\n    def __repr__(self):\n        return '&lt;Tag(name={self.name!r})&gt;'.format(self=self)\n\n\n@Declarations.register(Declarations.Model)\nclass Customer:\n    id = Integer(primary_key=True)\n    name = String(nullable=False)\n    tags = Many2Many(model=Declarations.Model.Tag)\n\n    def __repr__(self):\n        return '&lt;Customer(name={self.name!r}, '\n               'tags={self.tags!r})&gt;'.format(self=self)\n\n\n@Declarations.register(Declarations.Model)\nclass Address:\n\n    id = Integer(primary_key=True)\n    street = String(nullable=False)\n    city = Many2One(model=Declarations.Model.City, nullable=False)\n    customer = Many2One(\n        model=Declarations.Model.Customer, nullable=False,\n        one2many=\"addresses\")\n</pre>\n<div>\n<p>Warning</p>\n<p>The <strong>AnyBlok model</strong> must be declared in a blok</p>\n</div>\n</div>\n<div id=\"declare-your-schema\">\n<h3><a href=\"#id110\" rel=\"nofollow\">Declare your schema</a></h3>\n<pre>from anyblok_marshmallow import SchemaWrapper, PostLoadSchema, Nested\n\nclass CitySchema(SchemaWrapper):\n    model = 'Model.City'\n\n\nclass TagSchema(SchemaWrapper):\n    model = 'Model.Tag'\n\n\nclass AddressSchema(SchemaWrapper):\n    model = 'Model.Address'\n\n    class Schema:\n        # Add some marshmallow fields or behaviours\n\n        # follow the relationship Many2One and One2One\n        city = Nested(CitySchema)\n\n\nclass CustomerSchema(SchemaWrapper):\n    model = 'Model.Customer'\n    # optionally attach an AnyBlok registry\n    # to use for serialization, desarialization and validation\n    registry = registry\n\n    class Schema(PostLoadSchema):\n        # follow the relationship One2Many and Many2Many\n        # - the many=True is required because it is *2Many\n        # - exclude is used to forbid the recurse loop\n        addresses = Nested(AddressSchema, many=True, exclude=('customer', ))\n        tags = Nested(TagSchema, many=True)\n\n\ncustomer_schema = CustomerSchema()\n</pre>\n<div>\n<p>Note</p>\n<p><strong>New</strong> in version <strong>1.1.0</strong> the Nested field must come from <strong>anyblok_marshmallow</strong>,\nbecause <strong>marshmallow</strong> cache the Nested field with the context. And the context is not propagated\nagain if it changed</p>\n</div>\n<div>\n<p>Note</p>\n<p><strong>Ref</strong> in version <strong>1.4.0</strong>, <tt>post_load_return_instance</tt> was replaced by the mixin class\n<tt>PostLoadSchema</tt></p>\n</div>\n<div>\n<p>Note</p>\n<p><strong>Ref</strong> in version <strong>2.1.0</strong>, <tt>ModelSchema</tt> was replaced by <tt>SchemaWrapper</tt>. This action\nbreak the compatibility with the previous version, but allow to follow the upgrade of <strong>marshmallow</strong></p>\n</div>\n</div>\n<div id=\"de-serialize-your-data-and-validate-it\">\n<h3><a href=\"#id111\" rel=\"nofollow\">(De)serialize your data and validate it</a></h3>\n<pre>customer = registry.Customer.insert(name=\"JS Suzanne\")\ntag1 = registry.Tag.insert(name=\"tag 1\")\ncustomer.tags.append(tag1)\ntag2 = registry.Tag.insert(name=\"tag 2\")\ncustomer.tags.append(tag2)\nrouen = registry.City.insert(name=\"Rouen\", zipcode=\"76000\")\nparis = registry.City.insert(name=\"Paris\", zipcode=\"75000\")\nregistry.Address.insert(customer=customer, street=\"Somewhere\", city=rouen)\nregistry.Address.insert(customer=customer, street=\"Another place\", city=paris)\n\ndump_data = customer_schema.dump(customer).data\n# {\n#     'id': 1,\n#     'name': 'JS Suzanne',\n#     'tags': [\n#         {\n#             'id': 1,\n#             'name': 'tag 1',\n#         },\n#         {\n#             'id': 2,\n#             'name': 'tag 2',\n#         },\n#     ],\n#     'addresses': [\n#         {\n#             'id': 1\n#             'street': 'Somewhere'\n#             'city': {\n#                 'id': 1,\n#                 'name': 'Rouen',\n#                 'zipcode': '76000',\n#             },\n#         },\n#         {\n#             'id': 2\n#             'street': 'Another place'\n#             'city': {\n#                 'id': 2,\n#                 'name': 'Paris',\n#                 'zipcode': '75000',\n#             },\n#         },\n#     ],\n# }\n\ncustomer_schema.load(dump_data).data\n# &lt;Customer(name='JS Suzanne' tags=[&lt;Tag(name='tag 1')&gt;, &lt;Tag (name='tag 2')&gt;])&gt;\n\nerrors = customer_schema.validate(dump_data)\n# dict with all the validating errors\n</pre>\n<div>\n<p>Note</p>\n<p>We have an instance of the model cause of the mixin <tt>PostLoadSchema</tt></p>\n</div>\n</div>\n<div id=\"give-the-registry\">\n<h3><a href=\"#id112\" rel=\"nofollow\">Give the registry</a></h3>\n<p>The schema need to have the registry.</p>\n<p>If no registry found when the de(serialization) or validation then the\n<strong>RegistryNotFound</strong> exception will be raised.</p>\n<div id=\"add-the-registry-by-the-class-attribute\">\n<h4><a href=\"#id113\" rel=\"nofollow\">Add the <strong>registry</strong> by the class attribute</a></h4>\n<p>This is the solution given in the main exemple:</p>\n<pre>class CustomerSchema(SchemaWrapper):\n    model = 'Model.Customer'\n    registry = registry\n</pre>\n</div>\n<div id=\"add-the-registry-during-init\">\n<h4><a href=\"#id114\" rel=\"nofollow\">Add the <strong>registry</strong> during init</a></h4>\n<p>This solution is use during the instanciation</p>\n<pre>customer_schema = CustomerSchema(registry=registry)\n</pre>\n</div>\n<div id=\"add-the-registry-by-the-context\">\n<h4><a href=\"#id115\" rel=\"nofollow\">Add the <strong>registry</strong> by the context</a></h4>\n<p>This solution is use during the instanciation or after</p>\n<pre>customer_schema = CustomerSchema(context={'registry': registry})\n</pre>\n<p>or</p>\n<pre>customer_schema = CustomerSchema()\ncustomer_schema.context['registry'] = registry\n</pre>\n</div>\n<div id=\"add-the-registry-when-the-de-serialization-or-validator-is-called\">\n<h4><a href=\"#id116\" rel=\"nofollow\">Add the <strong>registry</strong> when the de(serialization or validator is called</a></h4>\n<pre>customer_schema.dumps(customer, registry=registry)\ncustomer_schema.dump(customer, registry=registry)\ncustomer_schema.loads(dump_data, registry=registry)\ncustomer_schema.load(dump_data, registry=registry)\ncustomer_schema.validate(dump_data, registry=registry)\n</pre>\n</div>\n</div>\n<div id=\"model-option\">\n<h3><a href=\"#id117\" rel=\"nofollow\"><strong>model</strong> option</a></h3>\n<p>This option add in the model name. As the registry, this option\ncan be passed by definition, initialization, context or during the call of the (de)serialization / validation</p>\n<pre>class AnySchema(SchemaWrapper):\n    model = \"Model.Customer\"\n</pre>\n<p>or</p>\n<pre>any_schema = AnySchema(model=\"Model.customer\")\n</pre>\n<p>or</p>\n<pre>any_schema.context['model'] = \"Model.Customer\"\n</pre>\n<p>or</p>\n<pre>any_schema.dumps(instance, model=\"Model.Customer\")\nany_schema.dump(instance, model=\"Model.Customer\")\nany_schema.loads(dump_data, model=\"Model.Customer\")\nany_schema.load(dump_data, model=\"Model.Customer\")\nany_schema.validate(dump_data, model=\"Model.Customer\")\n</pre>\n</div>\n<div id=\"only-primary-key-option\">\n<h3><a href=\"#id118\" rel=\"nofollow\"><strong>only_primary_key</strong> option</a></h3>\n<p>This option add in the only argument the primary keys of the model. As the registry, this option\ncan be passed by definition, initialization, context or during the call of the (de)serialization / validation</p>\n<pre>class CustomerSchema(SchemaWrapper):\n    model = \"Model.Customer\"\n    only_primary_key = True\n</pre>\n<p>or</p>\n<pre>customer_schema = CustomerSchema(only_primary_key=True)\n</pre>\n<p>or</p>\n<pre>customer_schema.context['only_primary_key'] = True\n</pre>\n<p>or</p>\n<pre>customer_schema.dumps(instance, only_primary_key=True)\ncustomer_schema.dump(instance, only_primary_key=True)\ncustomer_schema.loads(dump_data, only_primary_key=True)\ncustomer_schema.load(dump_data, only_primary_key=True)\ncustomer_schema.validate(dump_data, only_primary_key=True)\n</pre>\n</div>\n<div id=\"required-fields-option\">\n<h3><a href=\"#id119\" rel=\"nofollow\"><strong>required_fields</strong> option</a></h3>\n<p>This option force the generated fields, and only them to be requried.</p>\n<pre>class CustomerSchema(SchemaWrapper):\n    model = \"Model.Customer\"\n    required_fields = True\n    # or required_fields = [ list of fieldname ]\n</pre>\n<p>or</p>\n<pre>customer_schema = CustomerSchema(required_fields=True)\n</pre>\n<p>or</p>\n<pre>customer_schema.context['required_fields'] = True\n</pre>\n<p>or</p>\n<pre>customer_schema.loads(dump_data, required_fields=True)\ncustomer_schema.load(dump_data, required_fields=True)\ncustomer_schema.validate(dump_data, required_fields=True)\n</pre>\n<div>\n<p>Note</p>\n<p>All the attributes can take <strong>True</strong> or the list of the fieldname to be required</p>\n</div>\n</div>\n<div id=\"use-the-field-jsoncollection\">\n<h3><a href=\"#id120\" rel=\"nofollow\">Use the field JsonCollection</a></h3>\n<p>This field allow the schema to inspect an AnyBlok.fields.Json in an any specific instance to\nvalidate the value.</p>\n<p>AnyBlok models:</p>\n<pre>@register(Model)\nclass Template:\n    name = anyblok.column.String(primary_key=True)\n    properties = anyblok.column.Json(defaumt={})\n\n@register(Model)\nclass SaleOrder:\n    id = anyblok.column.Integer(primary_key=True)\n    number = anyblok.column.Integer(nullable=False)\n    discount = anyblok.column.Integer()\n</pre>\n<p>AnyBlok / Marchmallow schema:</p>\n<pre>class SaleOrderSchema(SchemaWrapper):\n    model = 'Model.SaleOrder'\n\n    class Schema:\n        discount = JsonCollection(\n            fieldname='properties',\n            keys=['allowed_discount'],\n            cls_or_instance_type=marshmallow.fields.Integer(required=True)\n        )\n</pre>\n<p>Use:</p>\n<pre>goodcustomer = registry.Template.insert(\n    name='Good customer',\n    properties={'allowed_discount': [10, 15, 30]\n)\ncustomer = registry.Template.insert(\n    name='Customer',\n    properties={'allowed_discount': [0, 5, 10]\n)\nbadcustomer = registry.Template.insert(\n    name='Bad customer',\n    properties={'allowed_discount': [0]\n)\n\nschema = SaleOrderSchema(registry=registry)\n\n--------------------------\n\ndata = schema.load(\n    {\n        number='SO0001',\n        discount=10,\n    },\n    instances={'default': goodcustomer}\n)\n\n--------------------------\n\ndata = schema.load(\n    {\n        number='SO0001',\n        discount=10,\n    },\n    instances={'default': customer}\n)\n==&gt; error = {}\n\n--------------------------\n\ndata = schema.load(\n    {\n        number='SO0001',\n        discount=10,\n    },\n    instances={'default': badcustomer}\n)\n==&gt; error = {'discount': ['Not a valid choice']}\n</pre>\n<div id=\"id4\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#anyblok-marshmallow\" id=\"id97\" rel=\"nofollow\">AnyBlok Marshmallow</a></li>\n<li><a href=\"#front-matter\" id=\"id98\" rel=\"nofollow\">Front Matter</a><ul>\n<li><a href=\"#project-homepage\" id=\"id99\" rel=\"nofollow\">Project Homepage</a></li>\n<li><a href=\"#project-status\" id=\"id100\" rel=\"nofollow\">Project Status</a></li>\n<li><a href=\"#installation\" id=\"id101\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#unit-test\" id=\"id102\" rel=\"nofollow\">Unit Test</a></li>\n<li><a href=\"#dependencies\" id=\"id103\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#contributing-hackers-needed\" id=\"id104\" rel=\"nofollow\">Contributing (hackers needed!)</a></li>\n<li><a href=\"#author\" id=\"id105\" rel=\"nofollow\">Author</a></li>\n<li><a href=\"#contributors\" id=\"id106\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#bugs\" id=\"id107\" rel=\"nofollow\">Bugs</a></li>\n</ul>\n</li>\n<li><a href=\"#memento\" id=\"id108\" rel=\"nofollow\">Memento</a><ul>\n<li><a href=\"#declare-your-anyblok-model\" id=\"id109\" rel=\"nofollow\">Declare your <strong>AnyBlok model</strong></a></li>\n<li><a href=\"#declare-your-schema\" id=\"id110\" rel=\"nofollow\">Declare your schema</a></li>\n<li><a href=\"#de-serialize-your-data-and-validate-it\" id=\"id111\" rel=\"nofollow\">(De)serialize your data and validate it</a></li>\n<li><a href=\"#give-the-registry\" id=\"id112\" rel=\"nofollow\">Give the registry</a><ul>\n<li><a href=\"#add-the-registry-by-the-class-attribute\" id=\"id113\" rel=\"nofollow\">Add the <strong>registry</strong> by the class attribute</a></li>\n<li><a href=\"#add-the-registry-during-init\" id=\"id114\" rel=\"nofollow\">Add the <strong>registry</strong> during init</a></li>\n<li><a href=\"#add-the-registry-by-the-context\" id=\"id115\" rel=\"nofollow\">Add the <strong>registry</strong> by the context</a></li>\n<li><a href=\"#add-the-registry-when-the-de-serialization-or-validator-is-called\" id=\"id116\" rel=\"nofollow\">Add the <strong>registry</strong> when the de(serialization or validator is called</a></li>\n</ul>\n</li>\n<li><a href=\"#model-option\" id=\"id117\" rel=\"nofollow\"><strong>model</strong> option</a></li>\n<li><a href=\"#only-primary-key-option\" id=\"id118\" rel=\"nofollow\"><strong>only_primary_key</strong> option</a></li>\n<li><a href=\"#required-fields-option\" id=\"id119\" rel=\"nofollow\"><strong>required_fields</strong> option</a></li>\n<li><a href=\"#use-the-field-jsoncollection\" id=\"id120\" rel=\"nofollow\">Use the field JsonCollection</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id121\" rel=\"nofollow\">CHANGELOG</a><ul>\n<li><a href=\"#id5\" id=\"id122\" rel=\"nofollow\">2.3.0 (2019-10-31)</a></li>\n<li><a href=\"#id6\" id=\"id123\" rel=\"nofollow\">2.2.3 (2019-05-06)</a></li>\n<li><a href=\"#id7\" id=\"id124\" rel=\"nofollow\">2.2.2 (2018-12-06)</a></li>\n<li><a href=\"#id8\" id=\"id125\" rel=\"nofollow\">2.2.1 (2018-10-26)</a></li>\n<li><a href=\"#id9\" id=\"id126\" rel=\"nofollow\">2.2.0 (2018-10-17)</a></li>\n<li><a href=\"#id10\" id=\"id127\" rel=\"nofollow\">2.1.0 (2018-09-26)</a></li>\n<li><a href=\"#id11\" id=\"id128\" rel=\"nofollow\">2.0.1 (2018-06-07)</a></li>\n<li><a href=\"#id12\" id=\"id129\" rel=\"nofollow\">2.0.0 (2018-05-30)</a></li>\n<li><a href=\"#id13\" id=\"id130\" rel=\"nofollow\">1.4.0 (2018-04-07)</a></li>\n<li><a href=\"#id14\" id=\"id131\" rel=\"nofollow\">1.3.0 (2017-12-23)</a></li>\n<li><a href=\"#id15\" id=\"id132\" rel=\"nofollow\">1.2.0 (2017-11-30)</a></li>\n<li><a href=\"#id16\" id=\"id133\" rel=\"nofollow\">1.1.0 (2017-11-02)</a></li>\n<li><a href=\"#id17\" id=\"id134\" rel=\"nofollow\">1.0.2 (2017-10-25)</a></li>\n<li><a href=\"#id18\" id=\"id135\" rel=\"nofollow\">1.0.0 (2017-10-24)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id121\" rel=\"nofollow\">CHANGELOG</a></h2>\n<div id=\"id5\">\n<h3><a href=\"#id122\" rel=\"nofollow\">2.3.0 (2019-10-31)</a></h3>\n<ul>\n<li>Fixed du of Marshmallow 3.2.1 release</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id123\" rel=\"nofollow\">2.2.3 (2019-05-06)</a></h3>\n<ul>\n<li>Fixed du of Marshmallow 3.0.0RC5 release</li>\n<li>Refactored unittest from nosetest to pytest</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id124\" rel=\"nofollow\">2.2.2 (2018-12-06)</a></h3>\n<ul>\n<li>Fixed du of Marshmallow 3.0.0RC1 release</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id125\" rel=\"nofollow\">2.2.1 (2018-10-26)</a></h3>\n<ul>\n<li>Fixed du of Marshmallow 3.0.0b19 release</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id126\" rel=\"nofollow\">2.2.0 (2018-10-17)</a></h3>\n<ul>\n<li>Fixed the convertion of type between <strong>AnyBlok.Column</strong> and <strong>marshmallow.Field</strong></li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id127\" rel=\"nofollow\">2.1.0 (2018-09-26)</a></h3>\n<ul>\n<li>Fixed the compatibility with <strong>Marshmallow &gt; 3.0.0b8</strong></li>\n<li>Removed <tt>ModelSchema</tt> class</li>\n<li>Added <tt>SchemaWrapper</tt>, this is the best way to defined a generated\nschema with the <strong>marshmallow_sqlalchemy</strong> library</li>\n</ul>\n<div>\n<p>Warning</p>\n<p>This version break the compatibility with previous version, in the only\ngoal to be adapted with the latest version of <strong>marshmallow</strong></p>\n</div>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id128\" rel=\"nofollow\">2.0.1 (2018-06-07)</a></h3>\n<ul>\n<li>Fix required_field put allow_none to False</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id129\" rel=\"nofollow\">2.0.0 (2018-05-30)</a></h3>\n<ul>\n<li>Add JsonCollection field, Allow to add a check in function of an collection\nstored in a AnyBlok.fields.Json</li>\n<li>Add Text field, to represent an <tt>anyblok.column.Text</tt></li>\n<li>Migration of the code and unit test to marshmallow 3.0.0</li>\n<li>Add Email matching for <tt>anyblok.column.Email</tt></li>\n<li>Add URL matching for <tt>anyblok.column.URL</tt></li>\n<li>Add PhoneNumber matching for <tt>anyblok.column.PhoneNumber</tt></li>\n<li>Add Country matching for <tt>anyblok.column.Country</tt></li>\n<li>Add required_fields option</li>\n<li>Add InstanceField</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id130\" rel=\"nofollow\">1.4.0 (2018-04-07)</a></h3>\n<ul>\n<li>Replace <strong>post_load_return_instance</strong> method by <strong>PostLoadSchema</strong> class</li>\n<li>In the case of the field <strong>Selection</strong>, the validator <strong>OneOf</strong> is\napplied with the available values come from the AnyBlok columns</li>\n<li>Replace <strong>marshmallow_sqlalchemy.fields.Related</strong> by\n<strong>anyblok_marshmallow.fields.Nested</strong>. The goal is to improve the consistent\nbetween all field in the schema</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id131\" rel=\"nofollow\">1.3.0 (2017-12-23)</a></h3>\n<ul>\n<li>[ADD] unittest on some case</li>\n<li>[FIX] AnyBlok field.Function is return as MarshMallow fields.Raw</li>\n<li>[ADD] fields.File, type to encode and decode to/from base 64</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id132\" rel=\"nofollow\">1.2.0 (2017-11-30)</a></h3>\n<ul>\n<li>[REF] decrease complexity</li>\n<li>[IMP] Add <tt>validates_schema</tt> on ModelSchema to automaticly check\nif the field exist on the model</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3><a href=\"#id133\" rel=\"nofollow\">1.1.0 (2017-11-02)</a></h3>\n<ul>\n<li>Add option put only the primary keys</li>\n<li>Fix the Front page</li>\n<li>REF model option, can be given by another way than Meta</li>\n<li>Put RegistryNotFound in exceptions</li>\n<li>Add Nested field, this field is not and have not to be cached</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id134\" rel=\"nofollow\">1.0.2 (2017-10-25)</a></h3>\n<ul>\n<li>Fix pypi documentation</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3><a href=\"#id135\" rel=\"nofollow\">1.0.0 (2017-10-24)</a></h3>\n<ul>\n<li>Add marshmallow schema for AnyBlok for:<ul>\n<li>Serialization</li>\n<li>Deserialization</li>\n<li>Validation</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6059033, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "fbca021ee266c444e54aa68cdab099e6", "sha256": "88dbf09ac7c1f28e92c78b84b4e26391d2eb6e89b3bbe13102afddb0316344e9"}, "downloads": -1, "filename": "anyblok_marshmallow-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fbca021ee266c444e54aa68cdab099e6", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 24477, "upload_time": "2017-10-24T16:11:59", "upload_time_iso_8601": "2017-10-24T16:11:59.390696Z", "url": "https://files.pythonhosted.org/packages/93/32/3ef853e3af3b216addc4aae5aa8b0de27425011d96317d2b60fda6768adb/anyblok_marshmallow-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35cf22e48d08f9f4eacbfd084a0a4f99", "sha256": "9de80bc720d09fb6d0de31cfd0012d9078e06cbefec95dc36d548c489eaf5cfa"}, "downloads": -1, "filename": "anyblok_marshmallow-1.0.1.tar.gz", "has_sig": false, "md5_digest": "35cf22e48d08f9f4eacbfd084a0a4f99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17974, "upload_time": "2017-10-24T16:11:55", "upload_time_iso_8601": "2017-10-24T16:11:55.836821Z", "url": "https://files.pythonhosted.org/packages/40/ca/49a79be7e53339bcdd77e3215889c97d56b06c947a140c99522b16978700/anyblok_marshmallow-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "fccabbb090067453f881d9b1e2f7fa20", "sha256": "c47c6176e199fd6931b627038459ddfd594f131e380764883ff4cd644bf8bf7c"}, "downloads": -1, "filename": "anyblok_marshmallow-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fccabbb090067453f881d9b1e2f7fa20", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 24514, "upload_time": "2017-10-25T05:30:32", "upload_time_iso_8601": "2017-10-25T05:30:32.703107Z", "url": "https://files.pythonhosted.org/packages/c6/f2/a6d2912b27d72376c3bf379cadbec6590a4a04efeb9e78d7b8ce00a523eb/anyblok_marshmallow-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3772f08f6edc2103ec7ca991ebea25d5", "sha256": "e2215fa7d0e4c5c1899c925bb09804dc2a6c23542ed9f7d77eaf86329dd679f8"}, "downloads": -1, "filename": "anyblok_marshmallow-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3772f08f6edc2103ec7ca991ebea25d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18009, "upload_time": "2017-10-25T05:30:27", "upload_time_iso_8601": "2017-10-25T05:30:27.956476Z", "url": "https://files.pythonhosted.org/packages/5c/d2/aa574ab6b4ce972c5f67ab2d88d5ea28a1cb4f2b738ef32e53aeb8fcb4ee/anyblok_marshmallow-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f7196c686aa6501c9fca1d9379049144", "sha256": "cf73583a3126b62f944db1a9a2737ec0b507f94eb7080f78062b7d9fc706a5c3"}, "downloads": -1, "filename": "anyblok_marshmallow-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f7196c686aa6501c9fca1d9379049144", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 28478, "upload_time": "2017-11-02T10:31:45", "upload_time_iso_8601": "2017-11-02T10:31:45.829293Z", "url": "https://files.pythonhosted.org/packages/74/10/92ee23614f14c2bd3053cdce873cfc6dbc1be5976e946f4b3bf754e1df9f/anyblok_marshmallow-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b3405c77bd159bb7dbc7195a238eddd", "sha256": "63925709982e7bc9048f683f74e3bd097b28b2a1c15c02cdc50c6dca0a413b42"}, "downloads": -1, "filename": "anyblok_marshmallow-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2b3405c77bd159bb7dbc7195a238eddd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19565, "upload_time": "2017-11-02T10:31:43", "upload_time_iso_8601": "2017-11-02T10:31:43.078275Z", "url": "https://files.pythonhosted.org/packages/a1/c0/2d4b1539de657fe2e895d5d1cce6b81db838fa6c1f00f572f095419afdcc/anyblok_marshmallow-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "b26c0bd400393eeb66b1d1c63bb59e2e", "sha256": "72dca0dd2094cfa467ab35df0ef22cf81b226833ef6a21cc2739ad86c7aa8e5d"}, "downloads": -1, "filename": "anyblok_marshmallow-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b26c0bd400393eeb66b1d1c63bb59e2e", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 28893, "upload_time": "2017-11-30T09:59:26", "upload_time_iso_8601": "2017-11-30T09:59:26.593532Z", "url": "https://files.pythonhosted.org/packages/51/e1/9ab67ff9526c07b19fb0d705e91d112acc887443e3d4599e7c4789f563fe/anyblok_marshmallow-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc8d7f3962983a6e782bb7f009112aa8", "sha256": "ac85024f54118fd07a880e65bcfc5a1f8e05f084d8cb37d2aa15e0bde7cd3545"}, "downloads": -1, "filename": "anyblok_marshmallow-1.2.0.tar.gz", "has_sig": false, "md5_digest": "fc8d7f3962983a6e782bb7f009112aa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19972, "upload_time": "2017-11-30T09:59:24", "upload_time_iso_8601": "2017-11-30T09:59:24.845443Z", "url": "https://files.pythonhosted.org/packages/38/8a/381a098c9a1322177982fe7b32bbc4e975801ad9832e25ef962714a1eea8/anyblok_marshmallow-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "2c18175fa99f6143e48849f8a0d6f097", "sha256": "fab83d8feb7e9fd99f694885fee84fdf0b0032abbcf9944ddde0cb86e7e4c864"}, "downloads": -1, "filename": "anyblok_marshmallow-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2c18175fa99f6143e48849f8a0d6f097", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 31890, "upload_time": "2017-12-23T11:30:00", "upload_time_iso_8601": "2017-12-23T11:30:00.188129Z", "url": "https://files.pythonhosted.org/packages/af/77/ae121ed04e0430d38e62d20337783419f083fdd949ef70870f82c8a6bb5d/anyblok_marshmallow-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2ac71373b1fd41a8b534f056e442586", "sha256": "c05cd680d7f30df10b82073857dad2287872646218135609dc1f858a29182f48"}, "downloads": -1, "filename": "anyblok_marshmallow-1.3.0.tar.gz", "has_sig": false, "md5_digest": "b2ac71373b1fd41a8b534f056e442586", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21628, "upload_time": "2017-12-23T11:29:57", "upload_time_iso_8601": "2017-12-23T11:29:57.574145Z", "url": "https://files.pythonhosted.org/packages/e8/93/5fd768491415e2a2b50354ad0e20d24016b52830917feb0d146edf30fbad/anyblok_marshmallow-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "4c2e61c18d37ed2ac7cbfa2878ba76db", "sha256": "14fb7c5800ac847b00e236eb7c390b7742b19744b0a0aa350c612dce9952755c"}, "downloads": -1, "filename": "anyblok_marshmallow-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4c2e61c18d37ed2ac7cbfa2878ba76db", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 28232, "upload_time": "2018-04-07T08:41:00", "upload_time_iso_8601": "2018-04-07T08:41:00.418927Z", "url": "https://files.pythonhosted.org/packages/b5/9b/cc7a7e77eb6f2c727360aff9e62d9897c35ae17c2951d74f7d73da29951b/anyblok_marshmallow-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3abd31fdf71db7a35a7fb77a76a90d8f", "sha256": "f9dd69ef6eb70d0145385084f8c539bb365e39c12b0d1a09a78ee6c330d38a15"}, "downloads": -1, "filename": "anyblok_marshmallow-1.4.0.tar.gz", "has_sig": false, "md5_digest": "3abd31fdf71db7a35a7fb77a76a90d8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17217, "upload_time": "2018-04-07T08:40:58", "upload_time_iso_8601": "2018-04-07T08:40:58.086981Z", "url": "https://files.pythonhosted.org/packages/23/17/9904d586ad61d1e8e6203d7c703bb649c61e7e2ddc980f7fc3994af8f01c/anyblok_marshmallow-1.4.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "74a8335e072c0bac735e8d241d8d673f", "sha256": "7d31574f1a0fb1e229976a4d7e78ae25583af59890b935cae7d67655817cd51a"}, "downloads": -1, "filename": "anyblok_marshmallow-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "74a8335e072c0bac735e8d241d8d673f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 30650, "upload_time": "2018-05-30T13:41:17", "upload_time_iso_8601": "2018-05-30T13:41:17.302812Z", "url": "https://files.pythonhosted.org/packages/c2/2e/6655484763ca24ff2a5f15d3869d3e32c2e52703aa9b24a142a757a983d5/anyblok_marshmallow-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3da382d6985b02c7d0dcc226c530395", "sha256": "68c228b9b1c54526002bc46220e52fe2048446b8d30071a279b2fe2000382ca5"}, "downloads": -1, "filename": "anyblok_marshmallow-2.0.0.tar.gz", "has_sig": false, "md5_digest": "e3da382d6985b02c7d0dcc226c530395", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24847, "upload_time": "2018-05-30T13:41:15", "upload_time_iso_8601": "2018-05-30T13:41:15.282715Z", "url": "https://files.pythonhosted.org/packages/e7/76/b7f1f101a5404f6905bc9c9c44b8fbab1234ad453e4c362da91ea82976e7/anyblok_marshmallow-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "75de044c8bb976c50e1aa1c3d212f90b", "sha256": "5811448374dd02d307645127b390211221921897266363aa6f0a0b7a1afccd55"}, "downloads": -1, "filename": "anyblok_marshmallow-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "75de044c8bb976c50e1aa1c3d212f90b", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 30690, "upload_time": "2018-06-07T08:03:02", "upload_time_iso_8601": "2018-06-07T08:03:02.398643Z", "url": "https://files.pythonhosted.org/packages/f3/a5/d93b403b1ac66b08b200ce4baec25c2ede52f5e81df1214b05431c025f66/anyblok_marshmallow-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c85e781028bab68518646915f0d3eb4c", "sha256": "c0a575e4baf2d99cff415d488f014581df6c150ee5b77200aa9847eaf5fbe72e"}, "downloads": -1, "filename": "anyblok_marshmallow-2.0.1.tar.gz", "has_sig": false, "md5_digest": "c85e781028bab68518646915f0d3eb4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24910, "upload_time": "2018-06-07T08:02:59", "upload_time_iso_8601": "2018-06-07T08:02:59.892889Z", "url": "https://files.pythonhosted.org/packages/92/2d/d1f19a86d5e085b1e44f3e7ff17e7dbddbad75ce74ad757bc6989c71550e/anyblok_marshmallow-2.0.1.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "b888f9721a08bd2fba0e7fa36094ad21", "sha256": "32468ff0436c9202dbf097257217846df362af9cc4f1e29710b1b589cae2354c"}, "downloads": -1, "filename": "anyblok_marshmallow-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b888f9721a08bd2fba0e7fa36094ad21", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 31096, "upload_time": "2018-09-26T07:19:43", "upload_time_iso_8601": "2018-09-26T07:19:43.449721Z", "url": "https://files.pythonhosted.org/packages/97/b6/85cadac6d16349d5f17557b9bb5c9bdd6e54e863a097be43e66c5d5a0aa0/anyblok_marshmallow-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28e929a5b20c0c164703fae222af4895", "sha256": "22bdfb339d8e64e62c4cad76662c4c239e17d5628b3fefadbb459f45b324707e"}, "downloads": -1, "filename": "anyblok_marshmallow-2.1.0.tar.gz", "has_sig": false, "md5_digest": "28e929a5b20c0c164703fae222af4895", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25569, "upload_time": "2018-09-26T07:19:41", "upload_time_iso_8601": "2018-09-26T07:19:41.151962Z", "url": "https://files.pythonhosted.org/packages/a6/50/b6ee1b44566fb1a4b86c19dd3b57f80627b990cfcfc0f663dea638e23eee/anyblok_marshmallow-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "ae3f57df83ad71443faabd4a09bb3ab1", "sha256": "569f0b00c69bdc674b02a2ccec35cd134d7f0a5f3525055441a36a6f5c3f6160"}, "downloads": -1, "filename": "anyblok_marshmallow-2.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ae3f57df83ad71443faabd4a09bb3ab1", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 31614, "upload_time": "2018-10-17T09:10:11", "upload_time_iso_8601": "2018-10-17T09:10:11.443578Z", "url": "https://files.pythonhosted.org/packages/29/0a/63eb1daad72a6bf5b9896328cba350452f7faa74a748253696ce6340b7a9/anyblok_marshmallow-2.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "deff6b4af9460a6be8c9588d28a4fad0", "sha256": "18d0446553b395250a392566897f7e68a84df4f8c85576b5d49ead923acbb472"}, "downloads": -1, "filename": "anyblok_marshmallow-2.2.0.tar.gz", "has_sig": false, "md5_digest": "deff6b4af9460a6be8c9588d28a4fad0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26115, "upload_time": "2018-10-17T09:10:09", "upload_time_iso_8601": "2018-10-17T09:10:09.044251Z", "url": "https://files.pythonhosted.org/packages/49/1e/e01d1cd9f1ff6d3da5847a3639d7eba880772fac9387fdbc215252db0867/anyblok_marshmallow-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "af9be88c20bb55ba82ac9d17ac985251", "sha256": "4e3534128810b6551c2da98bc24f9f6bc00a13ff9a826f9eb333ab2715696a49"}, "downloads": -1, "filename": "anyblok_marshmallow-2.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "af9be88c20bb55ba82ac9d17ac985251", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 31626, "upload_time": "2018-10-26T14:43:14", "upload_time_iso_8601": "2018-10-26T14:43:14.431238Z", "url": "https://files.pythonhosted.org/packages/d5/97/fefe34bb7c98b0285db545882449af71298aa4d927d7a318640c8217d04b/anyblok_marshmallow-2.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d6fb9aa280640beb353e574dfd92287", "sha256": "999817b2eed221060c032b9a8056a243984dc88a3281affc36dda73cba1f1519"}, "downloads": -1, "filename": "anyblok_marshmallow-2.2.1.tar.gz", "has_sig": false, "md5_digest": "1d6fb9aa280640beb353e574dfd92287", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26187, "upload_time": "2018-10-26T14:43:12", "upload_time_iso_8601": "2018-10-26T14:43:12.009203Z", "url": "https://files.pythonhosted.org/packages/b0/ac/05faf14bf8523b3c46b3b7810d77050ac511f3cfc39281c44da4a2b24768/anyblok_marshmallow-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "cb78a23b20371a938dc0d41546e8334c", "sha256": "f757459492bc4ddbb95d24e644983f8cbe1257c0d73032863850961c40d3f59b"}, "downloads": -1, "filename": "anyblok_marshmallow-2.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cb78a23b20371a938dc0d41546e8334c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 31647, "upload_time": "2018-12-07T17:10:15", "upload_time_iso_8601": "2018-12-07T17:10:15.782780Z", "url": "https://files.pythonhosted.org/packages/d8/64/672a69b424818d47acc518ea3e4341387dd587836d512c6a0e6f57c6f7cb/anyblok_marshmallow-2.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "059710fa3bd7bf46c90be92a969d8834", "sha256": "41c13ae604b3a7fbcb3b33102f67fb2c9037ca184ecd2d0ae733ef107d494354"}, "downloads": -1, "filename": "anyblok_marshmallow-2.2.2.tar.gz", "has_sig": false, "md5_digest": "059710fa3bd7bf46c90be92a969d8834", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26221, "upload_time": "2018-12-07T17:10:13", "upload_time_iso_8601": "2018-12-07T17:10:13.303019Z", "url": "https://files.pythonhosted.org/packages/70/e2/32184955cfe40f904efbe92fcc0bb5eefba12d1cfc286d2b8f891771f4a5/anyblok_marshmallow-2.2.2.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "ee2ac2e52eff8aac831fdc8db6a618bf", "sha256": "036db1173cc5b7a4a5dda978019f61080e751816f002edde58e0fe67c6017551"}, "downloads": -1, "filename": "anyblok_marshmallow-2.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ee2ac2e52eff8aac831fdc8db6a618bf", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 34676, "upload_time": "2019-05-06T12:29:30", "upload_time_iso_8601": "2019-05-06T12:29:30.214678Z", "url": "https://files.pythonhosted.org/packages/a3/74/e7e36076b605778d2b9c5c0e8e1199f945f5f101ed18c2ba8c69b111a7be/anyblok_marshmallow-2.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2546e37130cb5022c900551c4020fca", "sha256": "914b18b96fd11fbedb1f0b44c5efd1cfe58a924fb349c6637c3e0ca6ce1794d0"}, "downloads": -1, "filename": "anyblok_marshmallow-2.2.3.tar.gz", "has_sig": false, "md5_digest": "b2546e37130cb5022c900551c4020fca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28352, "upload_time": "2019-05-06T12:29:27", "upload_time_iso_8601": "2019-05-06T12:29:27.798214Z", "url": "https://files.pythonhosted.org/packages/44/1d/e7d9f186e374e4fe53aac752a6420afef7567bcc8b8af860c896597d873f/anyblok_marshmallow-2.2.3.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "df00a7c97245c699afd4461b3df193cc", "sha256": "360e9f6c76990d073a160934be87fab2cb14c69efbd107520f6b2f63e70b0762"}, "downloads": -1, "filename": "anyblok_marshmallow-2.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df00a7c97245c699afd4461b3df193cc", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 34474, "upload_time": "2019-10-31T15:22:00", "upload_time_iso_8601": "2019-10-31T15:22:00.497352Z", "url": "https://files.pythonhosted.org/packages/1a/af/5e10f1299cbbf4f470a7d00864bb15ec73b390152c07f5f87280687ce1f2/anyblok_marshmallow-2.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4bb3d42c0b348ec55abc394199d9d82", "sha256": "3da4497406958ad45fd144b695b925b442f35f57480bd158f06359fa3897dff5"}, "downloads": -1, "filename": "anyblok_marshmallow-2.3.0.tar.gz", "has_sig": false, "md5_digest": "b4bb3d42c0b348ec55abc394199d9d82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27861, "upload_time": "2019-10-31T15:21:58", "upload_time_iso_8601": "2019-10-31T15:21:58.181427Z", "url": "https://files.pythonhosted.org/packages/97/b6/7b99a66d70d2cb6b01bb4cf322a4222a595ad6b7416eaee97d8c6093dd2e/anyblok_marshmallow-2.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df00a7c97245c699afd4461b3df193cc", "sha256": "360e9f6c76990d073a160934be87fab2cb14c69efbd107520f6b2f63e70b0762"}, "downloads": -1, "filename": "anyblok_marshmallow-2.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df00a7c97245c699afd4461b3df193cc", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 34474, "upload_time": "2019-10-31T15:22:00", "upload_time_iso_8601": "2019-10-31T15:22:00.497352Z", "url": "https://files.pythonhosted.org/packages/1a/af/5e10f1299cbbf4f470a7d00864bb15ec73b390152c07f5f87280687ce1f2/anyblok_marshmallow-2.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4bb3d42c0b348ec55abc394199d9d82", "sha256": "3da4497406958ad45fd144b695b925b442f35f57480bd158f06359fa3897dff5"}, "downloads": -1, "filename": "anyblok_marshmallow-2.3.0.tar.gz", "has_sig": false, "md5_digest": "b4bb3d42c0b348ec55abc394199d9d82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27861, "upload_time": "2019-10-31T15:21:58", "upload_time_iso_8601": "2019-10-31T15:21:58.181427Z", "url": "https://files.pythonhosted.org/packages/97/b6/7b99a66d70d2cb6b01bb4cf322a4222a595ad6b7416eaee97d8c6093dd2e/anyblok_marshmallow-2.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:57 2020"}