{"info": {"author": "Tristan de Lataillade", "author_email": "delataillade.tristan@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pycatenary\n\n## Features\n\nThis python package solves catenary equations for cables at static equilibrium.\n\n- Elasticity taken into account\n- Contact with floor/seabed taken into account\n- Handles partly or fully lifted lines\n- Multisegmented cables possible\n\n## Installation\n\n```\npython setup.py install --user\n```\n\n## Getting Started\n\nTo create a cable:\n\n```python\nfrom pycatenary import cable\n\n# define properties of cable\nlength = 6.98  # length of line\nw = 1.036  # submerged weight\nEA = 560e3  # axial stiffness\nfloor = True  # if True, contact is possible at the level of the anchor\nanchor = [0., 0., 0.]\nfairlead = [5.3, 0., 2.65]\n\n# create cable instance\nl1 = cable.MooringLine(L=length,\n                       w=w,\n                       EA=EA,\n                       anchor=anchor,\n                       fairlead=fairlead,\n                       floor=True)\n\n# compute calculations\nl1.computeSolution()\n```\n\nPosition of fairlead and anchor can be changed as follows:\n\n```python\n# change fairlead position\nl1.setFairleadCoords([5.4, 0., 2.65])\n\n# recompute solution\nl1.computeSolution()\n```\n\nOther functions exist:\n\n```python\n# get tension along line (between 0. and total line length)\ns = 5.\nT = l1.getTension(s)\n\n# get xyz coordinates along line\nxyz = l1.s2xyz(s)\n\n```\n\nFor extra functionality, please refer to the documentation: https://tridelat.github.io/pycatenary\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/tridelat/pycatenary/archive/v0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tridelat/pycatenary", "keywords": "catenary,mooring,python", "license": "", "maintainer": "", "maintainer_email": "", "name": "pycatenary", "package_url": "https://pypi.org/project/pycatenary/", "platform": "", "project_url": "https://pypi.org/project/pycatenary/", "project_urls": {"Download": "https://github.com/tridelat/pycatenary/archive/v0.3.tar.gz", "Homepage": "https://github.com/tridelat/pycatenary"}, "release_url": "https://pypi.org/project/pycatenary/0.3/", "requires_dist": null, "requires_python": "", "summary": "A Python library for solving catenary equations", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pycatenary</h1>\n<h2>Features</h2>\n<p>This python package solves catenary equations for cables at static equilibrium.</p>\n<ul>\n<li>Elasticity taken into account</li>\n<li>Contact with floor/seabed taken into account</li>\n<li>Handles partly or fully lifted lines</li>\n<li>Multisegmented cables possible</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>python setup.py install --user\n</code></pre>\n<h2>Getting Started</h2>\n<p>To create a cable:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycatenary</span> <span class=\"kn\">import</span> <span class=\"n\">cable</span>\n\n<span class=\"c1\"># define properties of cable</span>\n<span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mf\">6.98</span>  <span class=\"c1\"># length of line</span>\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mf\">1.036</span>  <span class=\"c1\"># submerged weight</span>\n<span class=\"n\">EA</span> <span class=\"o\">=</span> <span class=\"mf\">560e3</span>  <span class=\"c1\"># axial stiffness</span>\n<span class=\"n\">floor</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># if True, contact is possible at the level of the anchor</span>\n<span class=\"n\">anchor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">]</span>\n<span class=\"n\">fairlead</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">5.3</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">2.65</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># create cable instance</span>\n<span class=\"n\">l1</span> <span class=\"o\">=</span> <span class=\"n\">cable</span><span class=\"o\">.</span><span class=\"n\">MooringLine</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"o\">=</span><span class=\"n\">length</span><span class=\"p\">,</span>\n                       <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"n\">w</span><span class=\"p\">,</span>\n                       <span class=\"n\">EA</span><span class=\"o\">=</span><span class=\"n\">EA</span><span class=\"p\">,</span>\n                       <span class=\"n\">anchor</span><span class=\"o\">=</span><span class=\"n\">anchor</span><span class=\"p\">,</span>\n                       <span class=\"n\">fairlead</span><span class=\"o\">=</span><span class=\"n\">fairlead</span><span class=\"p\">,</span>\n                       <span class=\"n\">floor</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># compute calculations</span>\n<span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">computeSolution</span><span class=\"p\">()</span>\n</pre>\n<p>Position of fairlead and anchor can be changed as follows:</p>\n<pre><span class=\"c1\"># change fairlead position</span>\n<span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">setFairleadCoords</span><span class=\"p\">([</span><span class=\"mf\">5.4</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">2.65</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># recompute solution</span>\n<span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">computeSolution</span><span class=\"p\">()</span>\n</pre>\n<p>Other functions exist:</p>\n<pre><span class=\"c1\"># get tension along line (between 0. and total line length)</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mf\">5.</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">getTension</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get xyz coordinates along line</span>\n<span class=\"n\">xyz</span> <span class=\"o\">=</span> <span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">s2xyz</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</pre>\n<p>For extra functionality, please refer to the documentation: <a href=\"https://tridelat.github.io/pycatenary\" rel=\"nofollow\">https://tridelat.github.io/pycatenary</a></p>\n\n          </div>"}, "last_serial": 7094066, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "f84387fbe94f0cf4d17ba1bac373d351", "sha256": "a2e1b618bffe174d23e05c1aa63919b3cf51a936819b192b0170d36060f7edfe"}, "downloads": -1, "filename": "pycatenary-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f84387fbe94f0cf4d17ba1bac373d351", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9110, "upload_time": "2020-04-24T16:00:11", "upload_time_iso_8601": "2020-04-24T16:00:11.031051Z", "url": "https://files.pythonhosted.org/packages/c9/94/3ad15e88b87b278aca70ea6509c632ae2a21b8afc5861d16d5ebc5117ff6/pycatenary-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "deba25d3aa5858a98ae2717dcd06308e", "sha256": "e6b5c7a0beeb0a84e39d6fbc56d4de48d82e67b6d1d4f0e700af038a90541b69"}, "downloads": -1, "filename": "pycatenary-0.3.tar.gz", "has_sig": false, "md5_digest": "deba25d3aa5858a98ae2717dcd06308e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8033, "upload_time": "2020-04-24T16:00:13", "upload_time_iso_8601": "2020-04-24T16:00:13.164353Z", "url": "https://files.pythonhosted.org/packages/f8/7f/ff96e9e86b73c49a2f190f4711c012ae37992848cc489a3e3c98c6c0fb37/pycatenary-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f84387fbe94f0cf4d17ba1bac373d351", "sha256": "a2e1b618bffe174d23e05c1aa63919b3cf51a936819b192b0170d36060f7edfe"}, "downloads": -1, "filename": "pycatenary-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f84387fbe94f0cf4d17ba1bac373d351", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9110, "upload_time": "2020-04-24T16:00:11", "upload_time_iso_8601": "2020-04-24T16:00:11.031051Z", "url": "https://files.pythonhosted.org/packages/c9/94/3ad15e88b87b278aca70ea6509c632ae2a21b8afc5861d16d5ebc5117ff6/pycatenary-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "deba25d3aa5858a98ae2717dcd06308e", "sha256": "e6b5c7a0beeb0a84e39d6fbc56d4de48d82e67b6d1d4f0e700af038a90541b69"}, "downloads": -1, "filename": "pycatenary-0.3.tar.gz", "has_sig": false, "md5_digest": "deba25d3aa5858a98ae2717dcd06308e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8033, "upload_time": "2020-04-24T16:00:13", "upload_time_iso_8601": "2020-04-24T16:00:13.164353Z", "url": "https://files.pythonhosted.org/packages/f8/7f/ff96e9e86b73c49a2f190f4711c012ae37992848cc489a3e3c98c6c0fb37/pycatenary-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:43 2020"}