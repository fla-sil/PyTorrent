{"info": {"author": "irakli khitarishvili", "author_email": "iraklikhitarishvili@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Installation\r\n============\r\n\r\n::\r\n\r\n    run  pip install django-html5croppingtools\r\n\r\nConfigure settings.py\r\n======================\r\n\r\n::\r\n\r\n     Add html5croppingtools to INSTALLED_APPS\r\n\r\nmanage.py\r\n=========\r\n\r\n::\r\n\r\n     run manage.py collectstatic\r\n\r\nExamples\r\n========\r\n\r\nAdmin example without saving original image\r\n-------------------------------------------\r\n\r\n.. code:: python\r\n\r\n            #models.py\r\n            class MyModel(models.Model):\r\n                ...\r\n                image = models.ImageField(upload_to='<upload path>')\r\n                ...\r\n\r\n            #admin.py\r\n            ....\r\n            from html5croppingtools.fields import CropImageField\r\n            from html5croppingtools.forms import CropImageFormMixin\r\n            ....\r\n\r\n            class MyModelForm(CropImageFormMixin, ModelForm):\r\n                \"\"\"\r\n                :param max_size maximum size of image width or height(depends on which is greater) in pixels\r\n                :param width_ratio and height_ratio using this two parameters code calculates ratio\r\n                       between width and height of image and helps when selecting cropping area in admin by fixing ratio between sides\r\n                \"\"\"\r\n                image = CropImageField(max_size=900, width_ratio=500,height_ratio=300)\r\n                ....\r\n\r\n\r\n            @admin.register(MyModel)\r\n            class MyModelAdmin(admin.ModelAdmin):\r\n                form = MyModel\r\n                ....\r\n\r\nAdmin example with saving original image\r\n----------------------------------------\r\n\r\n.. code:: python\r\n\r\n            ...\r\n            class MyModel(models.Model):\r\n                    ...\r\n                    image = models.ImageField(upload_to='<upload path>')\r\n                    original_image = models.ImageField(upload_to='<upload path>')\r\n                    ...\r\n            ...\r\n            class MyModelForm(CropImageFormMixin, ModelForm):\r\n                \"\"\"\r\n                :param original_field name of corresponding model's field where you want to save original image\r\n                \"\"\"\r\n                image = CropImageField(\r\n                    original_field='original_image', max_size=900,\r\n                    width_ratio=500, height_ratio=300,\r\n                )\r\n                ....\r\n\r\nOn the fly cropping\r\n===================\r\n\r\nAdd html5croppingtools.imagecrop.ImageCropMiddleware to MIDDLEWARE\\_CLASSES\r\n---------------------------------------------------------------------------\r\n\r\n::\r\n\r\n    after adding html5croppingtools.imagecrop.ImageCropMiddleware to MIDDLEWARE_CLASSES\r\n    you can add \"quality=<int>&dimensions=<int x0 >x<int y0 >x<int x1 >x<int y1>\" this parameters to GET querystring\r\n    and middleware will serve corresponding image cropped and resized\r\n\r\nMiddleware working steps:\r\n-------------------------\r\n\r\n1. If \u201cquality\u201d is supplied, image will be resized\r\n2. If crop \u201cdimensions\u201d are supplied, image will be cropped\r\n3. return image\r\n\r\n**Note:** \u201cdimensions\u201d and \u201cquality\u201d parameters are optional\r\n\r\nExample\r\n=======\r\n\r\n/media/image/my\\_image\\_guid.jpeg?quality=1200&dimensions=300x200x900x800\r\n\r\n1. middleware will resize image proportionally making It\u2019s bigger side\r\n   equal to 1200 pixels\r\n2. after shrinking it will crop x1=300 y1=200 x2=900 y2=800 rectangle\r\n3. return image\r\n\r\nTemplate example\r\n================\r\n\r\n.. code:: html\r\n\r\n    {% load croppingtools_extra %}\r\n    <img src=\"{% html5crop MyModel.image dimensions='100x100x300x300' quality=500 %}\">\r\n\r\ntakes \"ImageFiled\", \"dimensions\" and \"quality\" parameters and returns url \"/media/image/my_image_guid.jpeg?quality=500&dimensions=100x100x300x300\" after which middleware will serve cropped and resized image\r\n\r\nNote: \"dimensions\" and \"quality\" parameters are optional", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iraklikhitarishvili/django-html5croppingtools", "keywords": "django, html5, cropping, on the fly cropping,", "license": "BSD License", "maintainer": "irakli khitarishvili", "maintainer_email": "iraklikhitarishvili@yahoo.com", "name": "django-html5croppingtools", "package_url": "https://pypi.org/project/django-html5croppingtools/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-html5croppingtools/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/iraklikhitarishvili/django-html5croppingtools"}, "release_url": "https://pypi.org/project/django-html5croppingtools/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "A simple Django app to crop and resize images", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"installation\">\n<h2>Installation</h2>\n<pre>run  pip install django-html5croppingtools\n</pre>\n</div>\n<div id=\"configure-settings-py\">\n<h2>Configure settings.py</h2>\n<pre>Add html5croppingtools to INSTALLED_APPS\n</pre>\n</div>\n<div id=\"manage-py\">\n<h2>manage.py</h2>\n<pre>run manage.py collectstatic\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"admin-example-without-saving-original-image\">\n<h3>Admin example without saving original image</h3>\n<pre><span class=\"c1\">#models.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'&lt;upload path&gt;'</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\">#admin.py</span>\n<span class=\"o\">....</span>\n<span class=\"kn\">from</span> <span class=\"nn\">html5croppingtools.fields</span> <span class=\"kn\">import</span> <span class=\"n\">CropImageField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">html5croppingtools.forms</span> <span class=\"kn\">import</span> <span class=\"n\">CropImageFormMixin</span>\n<span class=\"o\">....</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModelForm</span><span class=\"p\">(</span><span class=\"n\">CropImageFormMixin</span><span class=\"p\">,</span> <span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    :param max_size maximum size of image width or height(depends on which is greater) in pixels\n    :param width_ratio and height_ratio using this two parameters code calculates ratio\n           between width and height of image and helps when selecting cropping area in admin by fixing ratio between sides\n    \"\"\"</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">CropImageField</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"n\">width_ratio</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"n\">height_ratio</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n    <span class=\"o\">....</span>\n\n\n<span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">MyModel</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyModelAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span>\n    <span class=\"o\">....</span>\n</pre>\n</div>\n<div id=\"admin-example-with-saving-original-image\">\n<h3>Admin example with saving original image</h3>\n<pre><span class=\"o\">...</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'&lt;upload path&gt;'</span><span class=\"p\">)</span>\n        <span class=\"n\">original_image</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'&lt;upload path&gt;'</span><span class=\"p\">)</span>\n        <span class=\"o\">...</span>\n<span class=\"o\">...</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyModelForm</span><span class=\"p\">(</span><span class=\"n\">CropImageFormMixin</span><span class=\"p\">,</span> <span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    :param original_field name of corresponding model's field where you want to save original image\n    \"\"\"</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">CropImageField</span><span class=\"p\">(</span>\n        <span class=\"n\">original_field</span><span class=\"o\">=</span><span class=\"s1\">'original_image'</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">900</span><span class=\"p\">,</span>\n        <span class=\"n\">width_ratio</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">height_ratio</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"o\">....</span>\n</pre>\n</div>\n</div>\n<div id=\"on-the-fly-cropping\">\n<h2>On the fly cropping</h2>\n<div id=\"add-html5croppingtools-imagecrop-imagecropmiddleware-to-middleware-classes\">\n<h3>Add html5croppingtools.imagecrop.ImageCropMiddleware to MIDDLEWARE_CLASSES</h3>\n<pre>after adding html5croppingtools.imagecrop.ImageCropMiddleware to MIDDLEWARE_CLASSES\nyou can add \"quality=&lt;int&gt;&amp;dimensions=&lt;int x0 &gt;x&lt;int y0 &gt;x&lt;int x1 &gt;x&lt;int y1&gt;\" this parameters to GET querystring\nand middleware will serve corresponding image cropped and resized\n</pre>\n</div>\n<div id=\"middleware-working-steps\">\n<h3>Middleware working steps:</h3>\n<ol>\n<li>If \u201cquality\u201d is supplied, image will be resized</li>\n<li>If crop \u201cdimensions\u201d are supplied, image will be cropped</li>\n<li>return image</li>\n</ol>\n<p><strong>Note:</strong> \u201cdimensions\u201d and \u201cquality\u201d parameters are optional</p>\n</div>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>/media/image/my_image_guid.jpeg?quality=1200&amp;dimensions=300x200x900x800</p>\n<ol>\n<li>middleware will resize image proportionally making It\u2019s bigger side\nequal to 1200 pixels</li>\n<li>after shrinking it will crop x1=300 y1=200 x2=900 y2=800 rectangle</li>\n<li>return image</li>\n</ol>\n</div>\n<div id=\"template-example\">\n<h2>Template example</h2>\n<pre>{% load croppingtools_extra %}\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"{% html5crop MyModel.image dimensions='100x100x300x300' quality=500 %}\"</span><span class=\"p\">&gt;</span>\n</pre>\n<p>takes \u201cImageFiled\u201d, \u201cdimensions\u201d and \u201cquality\u201d parameters and returns url \u201c/media/image/my_image_guid.jpeg?quality=500&amp;dimensions=100x100x300x300\u201d after which middleware will serve cropped and resized image</p>\n<p>Note: \u201cdimensions\u201d and \u201cquality\u201d parameters are optional</p>\n</div>\n\n          </div>"}, "last_serial": 1862884, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "fee7c8476d7ef189f0ce0d1ff953ea5d", "sha256": "1e4fdecc180061df1f14424045017a7aea1a1c71aecb2f2d56af1202150786ae"}, "downloads": -1, "filename": "django_html5croppingtools-0.1.1-py3.4-none-any.whl", "has_sig": false, "md5_digest": "fee7c8476d7ef189f0ce0d1ff953ea5d", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 5494272, "upload_time": "2015-07-09T14:46:38", "upload_time_iso_8601": "2015-07-09T14:46:38.849813Z", "url": "https://files.pythonhosted.org/packages/4f/da/17aa679f4966c1d89e4cc38a19374016fd7244b0b9f4966839f673b7b661/django_html5croppingtools-0.1.1-py3.4-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f04a6efd454d119f9838ea05fc17eef5", "sha256": "6b825ecfa6cb079ec9a1b27abf64b1ff4eac7e3e26f4b2f0d2429490c6e87f07"}, "downloads": -1, "filename": "django_html5croppingtools-0.1.2-py3.4-none-any.whl", "has_sig": false, "md5_digest": "f04a6efd454d119f9838ea05fc17eef5", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 5496269, "upload_time": "2015-07-22T21:34:19", "upload_time_iso_8601": "2015-07-22T21:34:19.339506Z", "url": "https://files.pythonhosted.org/packages/a8/fb/a8c2d64470928c59f0c2d1566ccb7441706e2767c15932140c2353cf5c63/django_html5croppingtools-0.1.2-py3.4-none-any.whl", "yanked": false}], "0.1.2": [], "0.1.3": [{"comment_text": "", "digests": {"md5": "c4313a267efb3e049b3491a6b41f2ef2", "sha256": "817cc0a6054e0b7168fda3757bd69a49383ab2125766079229e49f42e34a7265"}, "downloads": -1, "filename": "django_html5croppingtools-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c4313a267efb3e049b3491a6b41f2ef2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74876, "upload_time": "2015-07-30T20:32:40", "upload_time_iso_8601": "2015-07-30T20:32:40.712287Z", "url": "https://files.pythonhosted.org/packages/12/06/b304387ef8c73f06de6ea032d23cabcead755f2378d9a6032d61966e5446/django_html5croppingtools-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b73ea1e81d58d0df0a3f429187a381d", "sha256": "3b91fdfc8b9bab4b6c73dd451361da6f104424aa0fbeb9e4e767a648daccb1ea"}, "downloads": -1, "filename": "django-html5croppingtools-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6b73ea1e81d58d0df0a3f429187a381d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67631, "upload_time": "2015-07-30T20:16:47", "upload_time_iso_8601": "2015-07-30T20:16:47.002980Z", "url": "https://files.pythonhosted.org/packages/16/d5/60711e09d27f6283cec63c48c32c44b3018346e03f0471e2d9c2841824e9/django-html5croppingtools-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c4313a267efb3e049b3491a6b41f2ef2", "sha256": "817cc0a6054e0b7168fda3757bd69a49383ab2125766079229e49f42e34a7265"}, "downloads": -1, "filename": "django_html5croppingtools-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c4313a267efb3e049b3491a6b41f2ef2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74876, "upload_time": "2015-07-30T20:32:40", "upload_time_iso_8601": "2015-07-30T20:32:40.712287Z", "url": "https://files.pythonhosted.org/packages/12/06/b304387ef8c73f06de6ea032d23cabcead755f2378d9a6032d61966e5446/django_html5croppingtools-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b73ea1e81d58d0df0a3f429187a381d", "sha256": "3b91fdfc8b9bab4b6c73dd451361da6f104424aa0fbeb9e4e767a648daccb1ea"}, "downloads": -1, "filename": "django-html5croppingtools-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6b73ea1e81d58d0df0a3f429187a381d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67631, "upload_time": "2015-07-30T20:16:47", "upload_time_iso_8601": "2015-07-30T20:16:47.002980Z", "url": "https://files.pythonhosted.org/packages/16/d5/60711e09d27f6283cec63c48c32c44b3018346e03f0471e2d9c2841824e9/django-html5croppingtools-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:41 2020"}