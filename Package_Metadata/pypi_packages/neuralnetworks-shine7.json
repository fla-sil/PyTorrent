{"info": {"author": "Subhash Sarangi", "author_email": "subhashsarangi123@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Feed Forward Neural Networks using NumPy\nThis library is a modification of my previous one. [Click Here](https://github.com/Subhash3/Neural-Networks/tree/master/Feed_Forward_Networks) to check my previous library.\n\n\n## Installation  \n```bash\n$ [sudo] pip3 install neuralnetworks-shine7\n``` \n\n## Development Installation\n```bash\n$ git clone https://github.com/Subhash3/Neural_Net_Using_NumPy.git\n```\n\n## Usage\n\n```python3\n>>> from Model import NeuralNetwork\n```\n### Creating a Neural Network\n```python3\ninputs = 2\noutputs = 1\nnetwork = NeuralNetwork(inputs, outputs)\n\n# Add 2 hidden layers with 16 neurons each and activation function 'tanh'\nnetwork.addLayer(16, activation_function=\"tanh\") \nnetwork.addLayer(16, activation_function=\"tanh\")\n\n# Finish the neural network by adding the output layer with sigmoid activation function.\nnetwork.compile(activation_function=\"sigmoid\")\n```\n### Building a dataset\nThe package contains a Dataset class to create a dataset.\n\n```python3\n>>> from Model import Dataset\n```\n\nMake sure you have inputs and target values in seperate files in csv format.\n\n```python3\ninput_file = \"inputs.csv\"\ntarget_file = \"targets.csv\"\n\n# Create a dataset object with the same inputs and outputs defined for the network.\ndatasetCreator = Dataset(inputs, outputs)\ndatasetCreator.makeDataset(input_file, target_file)\ndata, size = datasetCreator.getRawData()\n```\n\nIf you want to manually make a dataset, follow these rules:\n- Dataset must be a list of data samples.\n- A data sample is a list containing inputs and target values.\n- Input and target values are column vector of size (inputs x 1) and (outputs x 1) respectively.\n\nFor eg, a typical XOR data set looks something like :\n```python3\n>>> XOR_data = [\n    [\n        np.array([[0], [0]]),\n        np.array([[0]])\n    ],\n    [\n        np.array([[0], [1]]),\n        np.array([[1]])\n    ],\n    [\n        np.array([[1], [0]]),\n        np.array([[1]])\n    ],\n    [\n        np.array([[1], [1]]),\n        np.array([[0]])\n    ]\n]\n>>> size = 4\n```\n\n### Training The network\nThe library provides a *Train* function which accepts the dataset, dataset size, and two optional parameters epochs, and logging.\n```python3\ndef Train(dataset, size, epochs=5000, logging=True) :\n\t....\n\t....\n```\nFor Eg: If you want to train your network for 1000 epochs.\n```python3\n>>> network.Train(data, size, epochs=1000)\n```\nNotice that I didn't change the value of log_outputs as I want the output to printed for each epoch.\n\n\n### Debugging\nPlot a nice epoch vs error graph\n```python3\n>>> network.epoch_vs_error()\n```\n\nKnow how well the model performed.\n```python3\n>>> network.evaluate()\n```\n\nTo take a look at all the layers' info\n```python3\n>>> network.display()\n```\n\n### Exporting Model\nYou can export a trained model to a json file which can be loaded and used for predictions in the future.\n```python3\nfilename = \"model.json\"\nnetwork.export_model(filename)\n```\n\n### Load Model\nTo load a model from an exported model (json) file.\nload\\_model is a static function, so you must not call this on a NeuralNetwork object!.\n```python3\nfilename = \"model.json\"\nnetwork = NeuralNetwork.load_model(filename)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Subhash3/Neural_Net_Using_NumPy/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "neuralnetworks-shine7", "package_url": "https://pypi.org/project/neuralnetworks-shine7/", "platform": "", "project_url": "https://pypi.org/project/neuralnetworks-shine7/", "project_urls": {"Homepage": "https://github.com/Subhash3/Neural_Net_Using_NumPy/"}, "release_url": "https://pypi.org/project/neuralnetworks-shine7/0.0.7/", "requires_dist": ["numpy (>=1.18.1)", "matplotlib (>=3.1.3)"], "requires_python": "", "summary": "Feed Forward Neural Networks", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Feed Forward Neural Networks using NumPy</h1>\n<p>This library is a modification of my previous one. <a href=\"https://github.com/Subhash3/Neural-Networks/tree/master/Feed_Forward_Networks\" rel=\"nofollow\">Click Here</a> to check my previous library.</p>\n<h2>Installation</h2>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip3 install neuralnetworks-shine7\n</pre>\n<h2>Development Installation</h2>\n<pre>$ git clone https://github.com/Subhash3/Neural_Net_Using_NumPy.git\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">Model</span> <span class=\"kn\">import</span> <span class=\"n\">NeuralNetwork</span>\n</pre>\n<h3>Creating a Neural Network</h3>\n<pre><span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">network</span> <span class=\"o\">=</span> <span class=\"n\">NeuralNetwork</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">outputs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add 2 hidden layers with 16 neurons each and activation function 'tanh'</span>\n<span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">addLayer</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">activation_function</span><span class=\"o\">=</span><span class=\"s2\">\"tanh\"</span><span class=\"p\">)</span> \n<span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">addLayer</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">activation_function</span><span class=\"o\">=</span><span class=\"s2\">\"tanh\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Finish the neural network by adding the output layer with sigmoid activation function.</span>\n<span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">activation_function</span><span class=\"o\">=</span><span class=\"s2\">\"sigmoid\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Building a dataset</h3>\n<p>The package contains a Dataset class to create a dataset.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">Model</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n</pre>\n<p>Make sure you have inputs and target values in seperate files in csv format.</p>\n<pre><span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"s2\">\"inputs.csv\"</span>\n<span class=\"n\">target_file</span> <span class=\"o\">=</span> <span class=\"s2\">\"targets.csv\"</span>\n\n<span class=\"c1\"># Create a dataset object with the same inputs and outputs defined for the network.</span>\n<span class=\"n\">datasetCreator</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">outputs</span><span class=\"p\">)</span>\n<span class=\"n\">datasetCreator</span><span class=\"o\">.</span><span class=\"n\">makeDataset</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">target_file</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">datasetCreator</span><span class=\"o\">.</span><span class=\"n\">getRawData</span><span class=\"p\">()</span>\n</pre>\n<p>If you want to manually make a dataset, follow these rules:</p>\n<ul>\n<li>Dataset must be a list of data samples.</li>\n<li>A data sample is a list containing inputs and target values.</li>\n<li>Input and target values are column vector of size (inputs x 1) and (outputs x 1) respectively.</li>\n</ul>\n<p>For eg, a typical XOR data set looks something like :</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">XOR_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]),</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]),</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]),</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]),</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n</pre>\n<h3>Training The network</h3>\n<p>The library provides a <em>Train</em> function which accepts the dataset, dataset size, and two optional parameters epochs, and logging.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">Train</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">logging</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n\t<span class=\"o\">....</span>\n\t<span class=\"o\">....</span>\n</pre>\n<p>For Eg: If you want to train your network for 1000 epochs.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">Train</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p>Notice that I didn't change the value of log_outputs as I want the output to printed for each epoch.</p>\n<h3>Debugging</h3>\n<p>Plot a nice epoch vs error graph</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">epoch_vs_error</span><span class=\"p\">()</span>\n</pre>\n<p>Know how well the model performed.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span>\n</pre>\n<p>To take a look at all the layers' info</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">()</span>\n</pre>\n<h3>Exporting Model</h3>\n<p>You can export a trained model to a json file which can be loaded and used for predictions in the future.</p>\n<pre><span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"model.json\"</span>\n<span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">export_model</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<h3>Load Model</h3>\n<p>To load a model from an exported model (json) file.\nload_model is a static function, so you must not call this on a NeuralNetwork object!.</p>\n<pre><span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"model.json\"</span>\n<span class=\"n\">network</span> <span class=\"o\">=</span> <span class=\"n\">NeuralNetwork</span><span class=\"o\">.</span><span class=\"n\">load_model</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7161566, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5adc430010bded0efa2f3da4854713ae", "sha256": "8449bd09dd405f9eef086f7b9d6403df7182e3d7750db9059190bc386873854f"}, "downloads": -1, "filename": "neuralnetworks_shine7-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5adc430010bded0efa2f3da4854713ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5893, "upload_time": "2020-04-28T08:31:12", "upload_time_iso_8601": "2020-04-28T08:31:12.518800Z", "url": "https://files.pythonhosted.org/packages/9e/95/8a675da72ce008230b9f7b23ad04003ed5e9a12ab7199c4e0a9fe4def4e2/neuralnetworks_shine7-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "159f9a7eec295318ef28e3dda295b87b", "sha256": "d24b03c1e2f6182a5e7aaac4f3f71c1cc78a81cf24f8ebf9ba8c7398aa6e80a6"}, "downloads": -1, "filename": "neuralnetworks-shine7-0.0.1.tar.gz", "has_sig": false, "md5_digest": "159f9a7eec295318ef28e3dda295b87b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5258, "upload_time": "2020-04-28T08:31:15", "upload_time_iso_8601": "2020-04-28T08:31:15.333154Z", "url": "https://files.pythonhosted.org/packages/48/1a/bce8e597e91a679491c8468ed0e3524d7021098b67f260114186d2d2a58d/neuralnetworks-shine7-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "05885c188f3f5405776176a6859d0a16", "sha256": "77e73d6915d0f44665810a04148b0bcbbd3790441cabad3fbff1677e9602ab79"}, "downloads": -1, "filename": "neuralnetworks_shine7-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "05885c188f3f5405776176a6859d0a16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7454, "upload_time": "2020-04-28T09:24:00", "upload_time_iso_8601": "2020-04-28T09:24:00.197509Z", "url": "https://files.pythonhosted.org/packages/fe/66/c7bfd854fde94547cc07b2aed0e6433398b6ecc1fbc91d087762133e7b98/neuralnetworks_shine7-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df04ed316638be38cd06265cc56f11e2", "sha256": "9dc31c5223afb7a42607ca7fb59bec82e90f5137c2e5fcb08498e9bc7d34b914"}, "downloads": -1, "filename": "neuralnetworks-shine7-0.0.2.tar.gz", "has_sig": false, "md5_digest": "df04ed316638be38cd06265cc56f11e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6092, "upload_time": "2020-04-28T09:24:01", "upload_time_iso_8601": "2020-04-28T09:24:01.692937Z", "url": "https://files.pythonhosted.org/packages/d0/57/b9a4c434f867586e35f3089de2359667170bb1ed76754f25bb744ea1ba29/neuralnetworks-shine7-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "98af191900a198cbd8129ab1d6b2af7e", "sha256": "263ab893463b6afebda927ad2908ef0a532687a4dd2e63ae95f6f781074e6d83"}, "downloads": -1, "filename": "neuralnetworks_shine7-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "98af191900a198cbd8129ab1d6b2af7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7463, "upload_time": "2020-04-28T09:46:03", "upload_time_iso_8601": "2020-04-28T09:46:03.916318Z", "url": "https://files.pythonhosted.org/packages/1a/e4/ae478a894d0418aec048a523c7b88cb5ff74774da03f0bc55ff3fff9b733/neuralnetworks_shine7-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a115f29fa35bc64cfaf4703efa3f378", "sha256": "34bb93aa23052b3814f080184c42f55340a19c570d8dc0a36af09627c4afaaa5"}, "downloads": -1, "filename": "neuralnetworks-shine7-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1a115f29fa35bc64cfaf4703efa3f378", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6091, "upload_time": "2020-04-28T09:46:06", "upload_time_iso_8601": "2020-04-28T09:46:06.021193Z", "url": "https://files.pythonhosted.org/packages/b5/d9/6b6511bb2f13ddc506fdc9e75428d56fae712ef9741c2667cc884cf8bcca/neuralnetworks-shine7-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "13687fc5d8d965c824315cdded57823b", "sha256": "1c904ff3f9112797966eaf70b95847e21c4a9286e21ea203199364f6f8740976"}, "downloads": -1, "filename": "neuralnetworks_shine7-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "13687fc5d8d965c824315cdded57823b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7450, "upload_time": "2020-04-29T03:33:28", "upload_time_iso_8601": "2020-04-29T03:33:28.335016Z", "url": "https://files.pythonhosted.org/packages/8e/8a/da9dcd891b57804f7ececc25babbd9f7a9eb1bf915d7e51102409a49d330/neuralnetworks_shine7-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92dc8f5ff3b6eaaed84818e3154984c7", "sha256": "d71cade7bda89a1b8e17be0dfb66d6c3a7a0b4b346fe04fe06a39a37dea6b6bd"}, "downloads": -1, "filename": "neuralnetworks-shine7-0.0.4.tar.gz", "has_sig": false, "md5_digest": "92dc8f5ff3b6eaaed84818e3154984c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6097, "upload_time": "2020-04-29T03:33:30", "upload_time_iso_8601": "2020-04-29T03:33:30.035452Z", "url": "https://files.pythonhosted.org/packages/a7/79/c82bf2c6466c6d964bea117442f860f41ba245cbe5ee25aae3b58628ff37/neuralnetworks-shine7-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "8fd69760d777bbf4113a57c32c5430a6", "sha256": "50b4af2437f87a5c41d154c806f1f84c4c974ed39f008a1e6106e9e061700196"}, "downloads": -1, "filename": "neuralnetworks_shine7-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8fd69760d777bbf4113a57c32c5430a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8613, "upload_time": "2020-05-01T07:42:04", "upload_time_iso_8601": "2020-05-01T07:42:04.104861Z", "url": "https://files.pythonhosted.org/packages/75/76/c7a381fff14871f417ca2ddc8bed0f5b56c096b48642ab7d6e12117e40bc/neuralnetworks_shine7-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6638360e1ed82414974ecdfa5d31af13", "sha256": "45455159dcfbf9fa56b4580835d2c0313350ecf744d1c7cdfc2a3c5ef8945c14"}, "downloads": -1, "filename": "neuralnetworks-shine7-0.0.5.tar.gz", "has_sig": false, "md5_digest": "6638360e1ed82414974ecdfa5d31af13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7334, "upload_time": "2020-05-01T07:42:06", "upload_time_iso_8601": "2020-05-01T07:42:06.716059Z", "url": "https://files.pythonhosted.org/packages/c2/f6/83103c09bc661cb31ef4de16a3b140738d0fdaa0f2c2089e00ce18a2115f/neuralnetworks-shine7-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "73704fa7d0ecf7675079597eea211f0a", "sha256": "15b0ff19048fdb707f126de6dedddb902ab4174bba7a82036f780ac742a9881f"}, "downloads": -1, "filename": "neuralnetworks_shine7-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "73704fa7d0ecf7675079597eea211f0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9738, "upload_time": "2020-05-04T05:20:28", "upload_time_iso_8601": "2020-05-04T05:20:28.883774Z", "url": "https://files.pythonhosted.org/packages/b1/73/fb8d1174eeb3fdb5a52353bae1c382b72b5e352f1356f86b951d18aa9958/neuralnetworks_shine7-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a01e64df62f549998e3859be61070151", "sha256": "afc1e5ab73e78b7d14b491d1b6b83870ed7b64ab1806aaa440488b7a9938e0e2"}, "downloads": -1, "filename": "neuralnetworks-shine7-0.0.6.tar.gz", "has_sig": false, "md5_digest": "a01e64df62f549998e3859be61070151", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7290, "upload_time": "2020-05-04T05:20:30", "upload_time_iso_8601": "2020-05-04T05:20:30.199550Z", "url": "https://files.pythonhosted.org/packages/55/af/4c86c8db7f63f0c722777d26d5511eb6694667c30a5742ee67c99b5df631/neuralnetworks-shine7-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "1fabdaf7ee8f5861d9f074eee68981ac", "sha256": "d2bb99862553251f68e85eb07fd8bb833fd633c68006023817ae8e3f41a7ed17"}, "downloads": -1, "filename": "neuralnetworks_shine7-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1fabdaf7ee8f5861d9f074eee68981ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7508, "upload_time": "2020-05-04T05:47:47", "upload_time_iso_8601": "2020-05-04T05:47:47.606473Z", "url": "https://files.pythonhosted.org/packages/94/5a/552f86c67f396a0cb17ea17710f91faa1f04c1292518aafd59111b475a3c/neuralnetworks_shine7-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "737bf5b6bc319269f852b7d7d61faa12", "sha256": "a0fea04fe7f499ca5f42361b6d69e7fd5e4d738e0202e23fbbf002ca6e376f5c"}, "downloads": -1, "filename": "neuralnetworks-shine7-0.0.7.tar.gz", "has_sig": false, "md5_digest": "737bf5b6bc319269f852b7d7d61faa12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7276, "upload_time": "2020-05-04T05:47:49", "upload_time_iso_8601": "2020-05-04T05:47:49.736218Z", "url": "https://files.pythonhosted.org/packages/7e/ce/0e30e78f504c80fb06bc7cd2f2a865c6acecaffac35e3528f354316b797c/neuralnetworks-shine7-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1fabdaf7ee8f5861d9f074eee68981ac", "sha256": "d2bb99862553251f68e85eb07fd8bb833fd633c68006023817ae8e3f41a7ed17"}, "downloads": -1, "filename": "neuralnetworks_shine7-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1fabdaf7ee8f5861d9f074eee68981ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7508, "upload_time": "2020-05-04T05:47:47", "upload_time_iso_8601": "2020-05-04T05:47:47.606473Z", "url": "https://files.pythonhosted.org/packages/94/5a/552f86c67f396a0cb17ea17710f91faa1f04c1292518aafd59111b475a3c/neuralnetworks_shine7-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "737bf5b6bc319269f852b7d7d61faa12", "sha256": "a0fea04fe7f499ca5f42361b6d69e7fd5e4d738e0202e23fbbf002ca6e376f5c"}, "downloads": -1, "filename": "neuralnetworks-shine7-0.0.7.tar.gz", "has_sig": false, "md5_digest": "737bf5b6bc319269f852b7d7d61faa12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7276, "upload_time": "2020-05-04T05:47:49", "upload_time_iso_8601": "2020-05-04T05:47:49.736218Z", "url": "https://files.pythonhosted.org/packages/7e/ce/0e30e78f504c80fb06bc7cd2f2a865c6acecaffac35e3528f354316b797c/neuralnetworks-shine7-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:48 2020"}