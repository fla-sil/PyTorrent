{"info": {"author": "Taric S.A.", "author_email": "appregs@taric.es", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Testing"], "description": "Custom Hamcrest Matchers\n========================\n\nHighly reusable custom hamcrest matchers\n\nFunctions\n---------\n\n-  assert\\_that\\_raises\n\nAvailable matchers\n------------------\n\n-  empty\n-  date\\_iso (ISO 8601 formatted date string)\n-  iterable\n-  has\\_len\n-  has\\_keys\n-  matches\\_re\n-  callable\\_\n-  json\\_\n-  subset\\_of\n-  superset\\_of\n-  disjoint\\_with\n\nxml matchers\n~~~~~~~~~~~~\n\n-  xml\\_document\n-  xml\\_root\n-  xml\\_element\n-  xml\\_contains\\_element\n-  xml\\_namespaced\n-  soap\\_document\n-  soap\\_message\n\nselenium matchers\n~~~~~~~~~~~~~~~~~\n\n-  is\\_displayed\n\nInstallation\n------------\n\n::\n\n    python setup.py install\n\nDependences\n-----------\n\n-  pyHamcrest\n\nDocumentation\n-------------\n\nassert\\_that\\_raises\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import assert_that_raises\n\n    with assert_that_raises(Warning):\n        raise Warning()\n\n    with assert_that_raises(instance_of(Warning)):\n        raise Warning()\n\n    with assert_that_raises(has_property('message', has_string(u'warning'))):\n        raise Warning(u'this is a warning')\n\n    # this raises AssertionError: no Exception raised\n    with assert_that_raises(NameError):\n        raise Warning()\n\n    # {'exception': Warning(u'this is a warning')}\n    with assert_that_raises(Warning) as captured:\n        raise Warning(u'this is a warning')\n\n    print captured['exception']\n\nempty\n~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import empty\n\n    assert_that(str(), is_(empty()))\n    assert_that(set(), is_(empty()))\n    assert_that(dict(), is_(empty()))\n    assert_that(list(), is_(empty()))\n    assert_that(tuple(), is_(empty()))\n    assert_that(unicode(), is_(empty()))\n\nIt's smart enough to deal with iterators and generators\n\n.. code:: python\n\n    assert_that(iter([]), is_(empty()))\n    assert_that((i for i in []), is_(empty()))\n\ndate\\_iso (ISO 8601 formatted date string)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import date_iso\n\n    assert_that('1988-10-04T06:15:00.230943Z', is_(date_iso()))\n\niterable\n~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import iterable\n\n\n    assert_that(list(), is_(iterable()))\n    assert_that(dict(), is_(iterable()))\n    assert_that(tuple(), is_(iterable()))\n    assert_that(set(), is_(iterable()))\n\n    assert_that(str(), is_(iterable()))\n    assert_that(unicode(), is_(iterable()))\n\n    assert_that((i for i in []), is_(iterable()))\n    assert_that(iter([]), is_(iterable()))\n\n    class IterateMe(object):\n        l = list()\n        def __iter__(self):\n            return iter(l)\n\n    assert_that(IterateMe(), is_(iterable()))\n\nhas\\_len\n~~~~~~~~\n\nReimplementation of has\\_length made to work with generators as well\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import has_len\n\n    assert_that((i for i in [1, 2, 3]), has_len(3))\n\nhas\\_keys\n~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import has_keys\n\n    dictionary = {\n        'first': 'foo',\n        'second': 'bar'\n    }\n\n    assert_that(dictionary, has_keys(['first', 'second']))\n\nmatches\\_re\n~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import matches_re\n\n    assert_that('pattern', matches_re(r'pattern'))\n\ncallable\\_\n~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import callable_\n\n    assert_that(lambda : 'foo', is_(callable_()))\n\njson\\_\n~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import json_\n\n    assert_that(\"{'foo': ['bar']}\", is_(json_()))\n    assert_that(\"{'foo': ['bar']}\", is_(json_(has_key('foo'))))\n\nsubset\\_of\n~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import subset_of\n\n    assert_that([1, 2], is_(subset_of([1, 2, 3])))\n\nsuperset\\_of\n~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import superset_of\n\n    assert_that([1, 2, 3], is_(superset_of([1, 2])))\n\ndisjoint\\_with\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import disjoint_with\n\n    assert_that([1, 2, 3], is_(disjoint_with([4, 5, 6])))\n\nxml\\_document\n~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import xml_document\n    from xml.etree import Element\n\n    assert_that('<element/>', is_(xml_document()))\n    assert_that('<element/>', is_(xml_document(instance_of(Element))))\n\nxml\\_root\n~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import xml_root\n\n    assert_that('<element/>', xml_root(tag='element'))\n\nxml\\_element\n~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import xml_document, xml_element\n\n    assert_that('<element/>', is_(xml_element('element')))\n    assert_that('<element/>', is_(xml_element('element', another_matcher)))\n    assert_that('<foo:element/>', is_(xml_element(tag='element', ns='foo')))\n\nxml\\_contains\\_element\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import xml_root, xml_element, xml_contains_element\n\n    assert_that('<parent><child/></parent>', \n        is_(xml_element('parent', xml_contains_element('child'))))\n\n    assert_that('<parent><child/></parent>', \n        xml_root(is_(xml_element('parent', xml_contains_element('child')))))\n\nxml\\_namespaced\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import xml_namespaced\n\n    assert_that('<element xmlns=\"http://foo.com\"/>',\n        is_(xml_namespaced('http://foo.com')))\n\nsoap\\_document\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import xml_document, soap_document\n\n    ns_url = \"http://schemas.xmlsoap.org/soap/envelope/\"\n    string = \"<Envelope xmlns='\" + ns_url + \"' />\"\n\n    assert_that(string, is_(xml_document(is_(soap_document()))))\n\nsoap\\_message\n~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import xml_document, soap_document, soap_message\n\n    ns_url = \"http://schemas.xmlsoap.org/soap/envelope/\"\n    string = \"\"\"\n        <Envelope xmlns='\"\"\" + ns_url + \"\"\"' >\"\n            <Body/>\n        </Envelope>\n    \"\"\"\n\n    assert_that(string, \n            is_(xml_document(is_(soap_document(is_(soap_message()))))))\n\nis\\_displayed\n~~~~~~~~~~~~~\n\n.. code:: python\n\n    from hamcrest import *\n    from matchers import is_displayed\n\n    from selenium import webdriver\n\n    browser = webdriver.Firefox()\n    browser.open('wwww.google.com')\n\n    logo = browser.find_element_by_css_selector('#hplogo')\n\n    assert_that(logo, is_displayed())", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/grupotaric/matchers/tags", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/grupotaric/matchers", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "matchers", "package_url": "https://pypi.org/project/matchers/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/matchers/", "project_urls": {"Download": "https://github.com/grupotaric/matchers/tags", "Homepage": "https://github.com/grupotaric/matchers"}, "release_url": "https://pypi.org/project/matchers/0.22/", "requires_dist": null, "requires_python": null, "summary": "Collection of highly reusable hamcrest matchers", "version": "0.22", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Highly reusable custom hamcrest matchers</p>\n<div id=\"functions\">\n<h2>Functions</h2>\n<ul>\n<li>assert_that_raises</li>\n</ul>\n</div>\n<div id=\"available-matchers\">\n<h2>Available matchers</h2>\n<ul>\n<li>empty</li>\n<li>date_iso (ISO 8601 formatted date string)</li>\n<li>iterable</li>\n<li>has_len</li>\n<li>has_keys</li>\n<li>matches_re</li>\n<li>callable_</li>\n<li>json_</li>\n<li>subset_of</li>\n<li>superset_of</li>\n<li>disjoint_with</li>\n</ul>\n<div id=\"xml-matchers\">\n<h3>xml matchers</h3>\n<ul>\n<li>xml_document</li>\n<li>xml_root</li>\n<li>xml_element</li>\n<li>xml_contains_element</li>\n<li>xml_namespaced</li>\n<li>soap_document</li>\n<li>soap_message</li>\n</ul>\n</div>\n<div id=\"selenium-matchers\">\n<h3>selenium matchers</h3>\n<ul>\n<li>is_displayed</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"dependences\">\n<h2>Dependences</h2>\n<ul>\n<li>pyHamcrest</li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<div id=\"assert-that-raises\">\n<h3>assert_that_raises</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">assert_that_raises</span>\n\n<span class=\"k\">with</span> <span class=\"n\">assert_that_raises</span><span class=\"p\">(</span><span class=\"ne\">Warning</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Warning</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">assert_that_raises</span><span class=\"p\">(</span><span class=\"n\">instance_of</span><span class=\"p\">(</span><span class=\"ne\">Warning</span><span class=\"p\">)):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Warning</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">assert_that_raises</span><span class=\"p\">(</span><span class=\"n\">has_property</span><span class=\"p\">(</span><span class=\"s1\">'message'</span><span class=\"p\">,</span> <span class=\"n\">has_string</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'warning'</span><span class=\"p\">))):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Warning</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'this is a warning'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this raises AssertionError: no Exception raised</span>\n<span class=\"k\">with</span> <span class=\"n\">assert_that_raises</span><span class=\"p\">(</span><span class=\"ne\">NameError</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Warning</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># {'exception': Warning(u'this is a warning')}</span>\n<span class=\"k\">with</span> <span class=\"n\">assert_that_raises</span><span class=\"p\">(</span><span class=\"ne\">Warning</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">captured</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Warning</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'this is a warning'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">captured</span><span class=\"p\">[</span><span class=\"s1\">'exception'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"empty\">\n<h3>empty</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">empty</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"n\">unicode</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()))</span>\n</pre>\n<p>It\u2019s smart enough to deal with iterators and generators</p>\n<pre><span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">([]),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">((</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">[]),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()))</span>\n</pre>\n</div>\n<div id=\"date-iso-iso-8601-formatted-date-string\">\n<h3>date_iso (ISO 8601 formatted date string)</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">date_iso</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'1988-10-04T06:15:00.230943Z'</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">date_iso</span><span class=\"p\">()))</span>\n</pre>\n</div>\n<div id=\"iterable\">\n<h3>iterable</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">iterable</span>\n\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"n\">unicode</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">((</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">[]),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">([]),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">IterateMe</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"n\">IterateMe</span><span class=\"p\">(),</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">()))</span>\n</pre>\n</div>\n<div id=\"has-len\">\n<h3>has_len</h3>\n<p>Reimplementation of has_length made to work with generators as well</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">has_len</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">((</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"n\">has_len</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"has-keys\">\n<h3>has_keys</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">has_keys</span>\n\n<span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'first'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'second'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">,</span> <span class=\"n\">has_keys</span><span class=\"p\">([</span><span class=\"s1\">'first'</span><span class=\"p\">,</span> <span class=\"s1\">'second'</span><span class=\"p\">]))</span>\n</pre>\n</div>\n<div id=\"matches-re\">\n<h3>matches_re</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">matches_re</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'pattern'</span><span class=\"p\">,</span> <span class=\"n\">matches_re</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'pattern'</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"callable\">\n<h3>callable_</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">callable_</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">callable_</span><span class=\"p\">()))</span>\n</pre>\n</div>\n<div id=\"json\">\n<h3>json_</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">json_</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s2\">\"{'foo': ['bar']}\"</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">json_</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s2\">\"{'foo': ['bar']}\"</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">json_</span><span class=\"p\">(</span><span class=\"n\">has_key</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">))))</span>\n</pre>\n</div>\n<div id=\"subset-of\">\n<h3>subset_of</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">subset_of</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">subset_of</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])))</span>\n</pre>\n</div>\n<div id=\"superset-of\">\n<h3>superset_of</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">superset_of</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">superset_of</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])))</span>\n</pre>\n</div>\n<div id=\"disjoint-with\">\n<h3>disjoint_with</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">disjoint_with</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">disjoint_with</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])))</span>\n</pre>\n</div>\n<div id=\"xml-document\">\n<h3>xml_document</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">xml_document</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xml.etree</span> <span class=\"kn\">import</span> <span class=\"n\">Element</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;element/&gt;'</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_document</span><span class=\"p\">()))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;element/&gt;'</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_document</span><span class=\"p\">(</span><span class=\"n\">instance_of</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">))))</span>\n</pre>\n</div>\n<div id=\"xml-root\">\n<h3>xml_root</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">xml_root</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;element/&gt;'</span><span class=\"p\">,</span> <span class=\"n\">xml_root</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'element'</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"xml-element\">\n<h3>xml_element</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">xml_document</span><span class=\"p\">,</span> <span class=\"n\">xml_element</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;element/&gt;'</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">(</span><span class=\"s1\">'element'</span><span class=\"p\">)))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;element/&gt;'</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">(</span><span class=\"s1\">'element'</span><span class=\"p\">,</span> <span class=\"n\">another_matcher</span><span class=\"p\">)))</span>\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;foo:element/&gt;'</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'element'</span><span class=\"p\">,</span> <span class=\"n\">ns</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"xml-contains-element\">\n<h3>xml_contains_element</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">xml_root</span><span class=\"p\">,</span> <span class=\"n\">xml_element</span><span class=\"p\">,</span> <span class=\"n\">xml_contains_element</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;parent&gt;&lt;child/&gt;&lt;/parent&gt;'</span><span class=\"p\">,</span>\n    <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">,</span> <span class=\"n\">xml_contains_element</span><span class=\"p\">(</span><span class=\"s1\">'child'</span><span class=\"p\">))))</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;parent&gt;&lt;child/&gt;&lt;/parent&gt;'</span><span class=\"p\">,</span>\n    <span class=\"n\">xml_root</span><span class=\"p\">(</span><span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">,</span> <span class=\"n\">xml_contains_element</span><span class=\"p\">(</span><span class=\"s1\">'child'</span><span class=\"p\">)))))</span>\n</pre>\n</div>\n<div id=\"xml-namespaced\">\n<h3>xml_namespaced</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">xml_namespaced</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"s1\">'&lt;element xmlns=\"http://foo.com\"/&gt;'</span><span class=\"p\">,</span>\n    <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_namespaced</span><span class=\"p\">(</span><span class=\"s1\">'http://foo.com'</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"soap-document\">\n<h3>soap_document</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">xml_document</span><span class=\"p\">,</span> <span class=\"n\">soap_document</span>\n\n<span class=\"n\">ns_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://schemas.xmlsoap.org/soap/envelope/\"</span>\n<span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;Envelope xmlns='\"</span> <span class=\"o\">+</span> <span class=\"n\">ns_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"' /&gt;\"</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_document</span><span class=\"p\">(</span><span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">soap_document</span><span class=\"p\">()))))</span>\n</pre>\n</div>\n<div id=\"soap-message\">\n<h3>soap_message</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">xml_document</span><span class=\"p\">,</span> <span class=\"n\">soap_document</span><span class=\"p\">,</span> <span class=\"n\">soap_message</span>\n\n<span class=\"n\">ns_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://schemas.xmlsoap.org/soap/envelope/\"</span>\n<span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n    &lt;Envelope xmlns='\"\"\"</span> <span class=\"o\">+</span> <span class=\"n\">ns_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"\"\"' &gt;\"\n        &lt;Body/&gt;\n    &lt;/Envelope&gt;\n\"\"\"</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span>\n        <span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">xml_document</span><span class=\"p\">(</span><span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">soap_document</span><span class=\"p\">(</span><span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"n\">soap_message</span><span class=\"p\">()))))))</span>\n</pre>\n</div>\n<div id=\"is-displayed\">\n<h3>is_displayed</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hamcrest</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matchers</span> <span class=\"kn\">import</span> <span class=\"n\">is_displayed</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">selenium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n\n<span class=\"n\">browser</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">()</span>\n<span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'wwww.google.com'</span><span class=\"p\">)</span>\n\n<span class=\"n\">logo</span> <span class=\"o\">=</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">find_element_by_css_selector</span><span class=\"p\">(</span><span class=\"s1\">'#hplogo'</span><span class=\"p\">)</span>\n\n<span class=\"n\">assert_that</span><span class=\"p\">(</span><span class=\"n\">logo</span><span class=\"p\">,</span> <span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 794559, "releases": {"0.18": [{"comment_text": "", "digests": {"md5": "33df2febcc1631d4bebbd4dd87287f57", "sha256": "bd026a1b553183f9e8253dc59c97c7d631dfde097e6a815448048bd52443fbcd"}, "downloads": -1, "filename": "matchers-0.18.tar.gz", "has_sig": false, "md5_digest": "33df2febcc1631d4bebbd4dd87287f57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6096, "upload_time": "2013-02-28T17:02:41", "upload_time_iso_8601": "2013-02-28T17:02:41.455671Z", "url": "https://files.pythonhosted.org/packages/b3/40/a7b45025560c622f0c18bf741bb35c5486dc74019dc1e01b19615b7e7a26/matchers-0.18.tar.gz", "yanked": false}], "0.19": [{"comment_text": "", "digests": {"md5": "8e6a9406a4ac2f698fd719527675c99f", "sha256": "d47ff9286916dd758b8e17d906c4b94b627de8b6d1c857e37f15a37b10d9993d"}, "downloads": -1, "filename": "matchers-0.19.tar.gz", "has_sig": false, "md5_digest": "8e6a9406a4ac2f698fd719527675c99f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6639, "upload_time": "2013-03-04T11:47:39", "upload_time_iso_8601": "2013-03-04T11:47:39.356692Z", "url": "https://files.pythonhosted.org/packages/9c/d4/65bd6840fc884dd0406a1145b92e315da2d7b38c7d46c5b5055bf8065771/matchers-0.19.tar.gz", "yanked": false}], "0.20": [{"comment_text": "", "digests": {"md5": "bd22a5882b8cb1f6def9e32d11662d94", "sha256": "d4b86a6fc4dfb1ae32292f34fb1a43391ce2971b88ccb9698af6c7b3a599824e"}, "downloads": -1, "filename": "matchers-0.20.tar.gz", "has_sig": false, "md5_digest": "bd22a5882b8cb1f6def9e32d11662d94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6780, "upload_time": "2013-03-04T12:03:28", "upload_time_iso_8601": "2013-03-04T12:03:28.106575Z", "url": "https://files.pythonhosted.org/packages/c4/f7/15d9f139d703c73d28d5a45d3b10aa2847ef1af19154e2e9173ea25d4912/matchers-0.20.tar.gz", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "fd8aaa814175cc2653924399cda4476e", "sha256": "9061dc4827e3de8a52c5643a4fc5103947023b3718ca24707925949b1674ec70"}, "downloads": -1, "filename": "matchers-0.22.tar.gz", "has_sig": false, "md5_digest": "fd8aaa814175cc2653924399cda4476e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6993, "upload_time": "2013-03-12T09:59:11", "upload_time_iso_8601": "2013-03-12T09:59:11.691903Z", "url": "https://files.pythonhosted.org/packages/70/21/65db7b32dfd506a71f896c5b12cebf7e9b38080604406195ebae4434f2b1/matchers-0.22.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fd8aaa814175cc2653924399cda4476e", "sha256": "9061dc4827e3de8a52c5643a4fc5103947023b3718ca24707925949b1674ec70"}, "downloads": -1, "filename": "matchers-0.22.tar.gz", "has_sig": false, "md5_digest": "fd8aaa814175cc2653924399cda4476e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6993, "upload_time": "2013-03-12T09:59:11", "upload_time_iso_8601": "2013-03-12T09:59:11.691903Z", "url": "https://files.pythonhosted.org/packages/70/21/65db7b32dfd506a71f896c5b12cebf7e9b38080604406195ebae4434f2b1/matchers-0.22.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:25 2020"}