{"info": {"author": "Andr\u00e9s Moya Vel\u00e1zquez", "author_email": "andres.moya@kaleidos.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "django-validated-file\n=====================\n\n.. image:: https://travis-ci.org/kaleidos/django-validated-file.png?branch=master\n    :target: https://travis-ci.org/kaleidos/django-validated-file\n\n.. image:: https://coveralls.io/repos/kaleidos/django-validated-file/badge.png?branch=master\n    :target: https://coveralls.io/r/kaleidos/django-validated-file?branch=master\n\n.. image:: https://pypip.in/v/django-validated-file/badge.png\n    :target: https://crate.io/packages/django-validated-file\n\n.. image:: https://pypip.in/d/django-validated-file/badge.png\n    :target: https://crate.io/packages/django-validated-file\n\n\nThis Django app adds a new field type, ValidatedFileField, that add the\ncapability of checking the document size and types the user may send.\n\nInstallation\n------------\n\n * Download and install package with python setup.py install.\n * Note that this package depends on python-magic (to check field types).\n * Add 'validatedfile' to your INSTALLED_APPS in settings.py.\n\nValidate single file\n--------------------\n\nCreate a model and add a field of type ValidatedFileField. You can add a maximum size in bytes\nand a list of valid mime types that will be allowed. The list of all mime types is available\nhere: http://www.iana.org/assignments/media-types/index.html::\n\n    from django.db import models\n    from validatedfile.fields import ValidatedFileField\n\n    class TestModel(models.Model):\n        the_file = ValidatedFileField(\n                        null = True,\n                        blank = True,\n                        upload_to = 'testfile',\n                        max_upload_size = 10240,\n                        content_types = ['image/png'])\n\nThe model can be used in forms or model forms like a normal FileField. If a user tries to upload\na file with too much size or without a valid type, a form validation error will occur.\n\n\nValidate quota usage\n--------------------\n\nThis example also checks the total size of all files uploaded by one user::\n\n    (in models.py)\n\n    from django.contrib.auth.models import User\n    from django.db import models\n    from validatedfile.fields import ValidatedFileField\n\n    class TestModel(models.Model):\n        user = models.ForeignKey(\n                        User,\n                        null = False,\n                        blank = False,\n                        related_name = 'test_models')\n        the_file = ValidatedFileField(\n                        null = True,\n                        blank = True,\n                        upload_to = 'testfile',\n                        max_upload_size = 10240,\n                        content_types = ['image/png'])\n\n    (in forms.py)\n\n    from django import forms\n    from validatedfile.fields import QuotaValidator\n    from models.py import TestModel\n\n    class TestModelForm(models.ModelForm):\n        the_file = forms.FileField(\n                        required = True,\n                        validators = [QuotaValidator(max_usage = 102400)])\n\n        class Meta:\n            model = TestModel\n            fields = ['the_file']\n\n        def __init__(self, user, *args, **kwargs):\n            super(TestModelForm, self).__init__(*args, **kwargs)\n            self.user = user\n            self.fields['the_file'].validators[0].update_quota(\n                    items = self.user.test_models.all(),\n                    attr_name = 'the_file',\n                )\n\n        def exceeds_quota(self):\n            return self.fields['the_file'].validators[0].quota.exceeds()\n\n        def save(self, *args, **kwargs):\n            model = super(TestModelForm, self).save(commit = False)\n            model.user = self.user\n            model.save()\n\n\nNote on DOS attacks\n-------------------\n\nImportant note: the check of the file size is made by Django once the whole file has been uploaded\nto the server and stored in a temp directory (or in memory if the file is small). Thus, this is\nuseful to guarantee the quota of the users, for example, but will not stop an attacking user that\nwants to block the server by sending huge files (e. g. of several Gb).\n\nTo avoid this, you need to configure your front end to limit the size of uploaded files. How to do\nit depends on the software you are using. For example, if you use apache, you should use\n**LimitRequestBody** directive (http://httpd.apache.org/docs/2.2/mod/core.html#limitrequestbody).\n\nThis is a complementary measure, because you'll usually want normal users that exceed the size by a\nreasonable amount to get a friendly form validation message, while attacking users will see how their\nconnection is abruptly cut before the file finishes uploading. So the recommended setting is to give\n`max_upload_size` a small value (e.g. 5Mb) and `LimitRequestBody` a higher one (e.g. 100Mb).\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaleidos/django-validated-file", "keywords": "django,filefield,validation", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-validated-file", "package_url": "https://pypi.org/project/django-validated-file/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-validated-file/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kaleidos/django-validated-file"}, "release_url": "https://pypi.org/project/django-validated-file/2.0.1/", "requires_dist": null, "requires_python": null, "summary": "This Django app adds a new field type, ValidatedFileField, that add the capability of checking the document size and types the user may send.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/kaleidos/django-validated-file\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/kaleidos/django-validated-file.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6b02e9d1628bcc463e077d6790875af225eee38/68747470733a2f2f7472617669732d63692e6f72672f6b616c6569646f732f646a616e676f2d76616c6964617465642d66696c652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/kaleidos/django-validated-file?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/kaleidos/django-validated-file/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6cf3b055657643049c41d79174f22fde1bc782a8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6b616c6569646f732f646a616e676f2d76616c6964617465642d66696c652f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://crate.io/packages/django-validated-file\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/django-validated-file/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca522155a4f79c64866f5eb2b34caf9e8a6d94a0/68747470733a2f2f70797069702e696e2f762f646a616e676f2d76616c6964617465642d66696c652f62616467652e706e67\"></a>\n<a href=\"https://crate.io/packages/django-validated-file\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/django-validated-file/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/441b0ec577714a17267343d8c6616a24a0126354/68747470733a2f2f70797069702e696e2f642f646a616e676f2d76616c6964617465642d66696c652f62616467652e706e67\"></a>\n<p>This Django app adds a new field type, ValidatedFileField, that add the\ncapability of checking the document size and types the user may send.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\n<ul>\n<li>Download and install package with python setup.py install.</li>\n<li>Note that this package depends on python-magic (to check field types).</li>\n<li>Add \u2018validatedfile\u2019 to your INSTALLED_APPS in settings.py.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"validate-single-file\">\n<h2>Validate single file</h2>\n<p>Create a model and add a field of type ValidatedFileField. You can add a maximum size in bytes\nand a list of valid mime types that will be allowed. The list of all mime types is available\nhere: <a href=\"http://www.iana.org/assignments/media-types/index.html\" rel=\"nofollow\">http://www.iana.org/assignments/media-types/index.html</a>:</p>\n<pre>from django.db import models\nfrom validatedfile.fields import ValidatedFileField\n\nclass TestModel(models.Model):\n    the_file = ValidatedFileField(\n                    null = True,\n                    blank = True,\n                    upload_to = 'testfile',\n                    max_upload_size = 10240,\n                    content_types = ['image/png'])\n</pre>\n<p>The model can be used in forms or model forms like a normal FileField. If a user tries to upload\na file with too much size or without a valid type, a form validation error will occur.</p>\n</div>\n<div id=\"validate-quota-usage\">\n<h2>Validate quota usage</h2>\n<p>This example also checks the total size of all files uploaded by one user:</p>\n<pre>(in models.py)\n\nfrom django.contrib.auth.models import User\nfrom django.db import models\nfrom validatedfile.fields import ValidatedFileField\n\nclass TestModel(models.Model):\n    user = models.ForeignKey(\n                    User,\n                    null = False,\n                    blank = False,\n                    related_name = 'test_models')\n    the_file = ValidatedFileField(\n                    null = True,\n                    blank = True,\n                    upload_to = 'testfile',\n                    max_upload_size = 10240,\n                    content_types = ['image/png'])\n\n(in forms.py)\n\nfrom django import forms\nfrom validatedfile.fields import QuotaValidator\nfrom models.py import TestModel\n\nclass TestModelForm(models.ModelForm):\n    the_file = forms.FileField(\n                    required = True,\n                    validators = [QuotaValidator(max_usage = 102400)])\n\n    class Meta:\n        model = TestModel\n        fields = ['the_file']\n\n    def __init__(self, user, *args, **kwargs):\n        super(TestModelForm, self).__init__(*args, **kwargs)\n        self.user = user\n        self.fields['the_file'].validators[0].update_quota(\n                items = self.user.test_models.all(),\n                attr_name = 'the_file',\n            )\n\n    def exceeds_quota(self):\n        return self.fields['the_file'].validators[0].quota.exceeds()\n\n    def save(self, *args, **kwargs):\n        model = super(TestModelForm, self).save(commit = False)\n        model.user = self.user\n        model.save()\n</pre>\n</div>\n<div id=\"note-on-dos-attacks\">\n<h2>Note on DOS attacks</h2>\n<p>Important note: the check of the file size is made by Django once the whole file has been uploaded\nto the server and stored in a temp directory (or in memory if the file is small). Thus, this is\nuseful to guarantee the quota of the users, for example, but will not stop an attacking user that\nwants to block the server by sending huge files (e. g. of several Gb).</p>\n<p>To avoid this, you need to configure your front end to limit the size of uploaded files. How to do\nit depends on the software you are using. For example, if you use apache, you should use\n<strong>LimitRequestBody</strong> directive (<a href=\"http://httpd.apache.org/docs/2.2/mod/core.html#limitrequestbody\" rel=\"nofollow\">http://httpd.apache.org/docs/2.2/mod/core.html#limitrequestbody</a>).</p>\n<p>This is a complementary measure, because you\u2019ll usually want normal users that exceed the size by a\nreasonable amount to get a friendly form validation message, while attacking users will see how their\nconnection is abruptly cut before the file finishes uploading. So the recommended setting is to give\n<cite>max_upload_size</cite> a small value (e.g. 5Mb) and <cite>LimitRequestBody</cite> a higher one (e.g. 100Mb).</p>\n</div>\n\n          </div>"}, "last_serial": 1221642, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "626179bf8cded8a79ecdd8cc0b2c8a7c", "sha256": "a9ee8cb92b0099017ae7dcece1cf95a8202265645efa4b664078be377fe2dfba"}, "downloads": -1, "filename": "django-validated-file-1.0.tar.gz", "has_sig": false, "md5_digest": "626179bf8cded8a79ecdd8cc0b2c8a7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7197, "upload_time": "2013-04-08T15:06:32", "upload_time_iso_8601": "2013-04-08T15:06:32.769374Z", "url": "https://files.pythonhosted.org/packages/da/d4/c4a051f29851e648679931769dcf8cdec7bb38845552ea1efef8cb12ab90/django-validated-file-1.0.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "f25434951080617918214fd41a10caab", "sha256": "0854447cedeeddfbe20cef75a83e1f3bf8bdf9b09520bbcc1953873e0ca536b7"}, "downloads": -1, "filename": "django-validated-file-2.0.tar.gz", "has_sig": false, "md5_digest": "f25434951080617918214fd41a10caab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7310, "upload_time": "2013-06-19T21:37:22", "upload_time_iso_8601": "2013-06-19T21:37:22.015326Z", "url": "https://files.pythonhosted.org/packages/36/fd/44c29ba813ed90c42fca3e8d7ca15a3aae050c6efebfb66208026a839028/django-validated-file-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "d40ee5b7d8a7eacd9d622f91683e9b1f", "sha256": "ed77cf26aa64447f118884ed74276302bd855bbef45d1e405fdb2a560538eee2"}, "downloads": -1, "filename": "django-validated-file-2.0.1.tar.gz", "has_sig": false, "md5_digest": "d40ee5b7d8a7eacd9d622f91683e9b1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8033, "upload_time": "2014-09-12T08:22:13", "upload_time_iso_8601": "2014-09-12T08:22:13.252757Z", "url": "https://files.pythonhosted.org/packages/8d/b1/30fcb9bea5a4be4220853f6b1ad5ef4f8bdd551e405070ce0259b28e7c0d/django-validated-file-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d40ee5b7d8a7eacd9d622f91683e9b1f", "sha256": "ed77cf26aa64447f118884ed74276302bd855bbef45d1e405fdb2a560538eee2"}, "downloads": -1, "filename": "django-validated-file-2.0.1.tar.gz", "has_sig": false, "md5_digest": "d40ee5b7d8a7eacd9d622f91683e9b1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8033, "upload_time": "2014-09-12T08:22:13", "upload_time_iso_8601": "2014-09-12T08:22:13.252757Z", "url": "https://files.pythonhosted.org/packages/8d/b1/30fcb9bea5a4be4220853f6b1ad5ef4f8bdd551e405070ce0259b28e7c0d/django-validated-file-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:05 2020"}