{"info": {"author": "Ren\u00e9 Wirnata", "author_email": "rene.wirnata@pandascience.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: X11 Applications :: Qt", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Physics"], "description": "## Elk Optics Analyzer (ElkOA)\n[![Python version](https://img.shields.io/pypi/pyversions/elkoa.svg?style=flat-square)](https://pypi.org/project/elkoa/)\n[![PyPi version](https://img.shields.io/pypi/v/elkoa.svg?style=flat-square)](https://pypi.org/project/elkoa/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/python/black)\n[![License: GPL v3+](https://img.shields.io/pypi/l/elkoa.svg?style=flat-square)](http://www.gnu.org/licenses/gpl-3.0)\n<!-- [![License: GPL v3+](https://img.shields.io/github/license/PandaScience/ElkOpticsAnalyzer.svg?style=flat-square)](http://www.gnu.org/licenses/gpl-3.0) -->\n\n> \u26a0\ufe0f **NOTE**: You may also try the develop branch via `git clone -b develop ...` \n\n### Description\nElk Optics Analyzer (ElkOA) helps to analyze optics output data from \n[The Elk Code](http://elk.sourceforge.net).\n\n### Features\n\nElk Optics Analyzer...\n\n* Gives you quick and painless visual access to many ELK output files\n* Comes with an easy to use GUI as well as a python CLI for experts\n* Recognizes available tasks / (tensor) fields automatically\n* Is easily extendable\n\nUsers can...\n\n* Create and save publication-ready pictures via matplotlib's user interface\n* Visualize real and imaginary parts of Elk optics output data in various ways\n* Cycle through available datasets quickly via <kbd>Tab</kbd> and \n  <kbd>Shift+Tab</kbd>\n* Select tensor elements to plot via dialog <kbd>Ctrl+T</kbd>\n* Use global tensor elements settings across all available tasks <kbd>Ctrl+G</kdb>\n* Batch-load parameter studies to visually analyze the impact of different\n  parameter settings <kbd>Ctrl+B</kbd>\n* Import and plot additional data files on top (e.g. experimental measurements)\n  <kbd>Ctrl+O</kbd>\n* Write out currently displayed data in different formats <kbd>Ctrl+S</kbd>\n* Manipulate field data tab-wise, e.g. shift graph(s) to left/right, take \n  square root etc. <kbd>Ctrl+M</kbd>\n* Convert response functions via \n  [Universal Response Relations](https://arxiv.org/abs/1401.6800), e.g. \u03b5 \u2799 \u03c3\n  <kbd>Ctrl+C</kbd> **\u26a0\ufe0f experimental\u2757**\n* Convert dielectric tensors computed in the optical limit (q \u2799 0) \n  into ordinary and extra-ordinary refractive indices for arbitrary wavevectors \n  <kbd>Ctrl+C</kbd> **\u26a0\ufe0f experimental\u2757**\n\nPossible new features for next releases:\n\n* Most certainly and foremost: Bugfixes\n* 3D-plotting of index ellipsoids\n* Batch-convert for a set of different q-points\n* Sample/geometry-dependent (i.e. thin films) conversions of response functions\n\n### Requirements\n* [Python 3.x](https://www.python.org)\n* [numpy](https://www.numpy.org/)\n* [matplotlib](https://matplotlib.org)\n* [PyQt5](http://pyqt.sourceforge.net/Docs/PyQt5/installation.html)\n* [pbr](https://docs.openstack.org/pbr/latest/)\n* [wrapt](https://wrapt.readthedocs.io/en/latest/)\n* [numexpr](https://numexpr.readthedocs.io/en/latest/)\n\nYou should use the packages provided by your linux distribution. On recent \nDebian systems for example, you can get all requirements by running\n```bash\napt install python3-numpy python3-matplotlib python3-pyqt5 python3-pbr python3-wrapt python3-numexpr\n```\n\nAlternatively, you can get the latest PyPI versions of each package\nautomatically as dependencies by installing ElkOA via pip (see below).\n\nFor testing purposes, you additionally need the following packages:\n\n* [pytest](https://docs.pytest.org/en/latest/)\n* [pytest-qt](https://pytest-qt.readthedocs.io/en/latest/)\n* [pytest-mpl](https://github.com/astrofrog/pytest-mpl)\n* [nose](https://nose.readthedocs.io/en/latest/)\n\n### Installation\n\nThe easiest way to install ElkOA is via pip, either from PyPI directly\n```bash\npip install elkoa\n```\nor, if you want the latest git release, \n```bash\ngit clone https://github.com/PandaScience/ElkOpticsAnalyzer.git\ncd ElkOpticsAnalyzer\npip install .\n```\nThis will also install all required but absent python packages automatically\nfrom PyPI.\n\nIf you like to install ElkOA only for the current user, add the flag `--user`.\nIf you want to take care of the required python packages yourself (i.e. by\nusing the ones provided by your Linux distribution), add `--no-deps`.  If you\nlike to run a developer installation (no copying of files, instead use git repo\nfiles directly), add `-e`. \n\n**Note:** On newer systems you possibly encounter \n`error: option --user not recognized` during the developer installation. This\nis due to a bug in pypa/setuptools and can be worked around using the flag \n`--no-build-isolation`. However, you then have to take care of all build\ndependencies yourself.\n\nFor example, on my Arch Linux system, I use\n`pip install --user --no-deps --no-build-isolation -e .`\nwithin the repository's folder.\n\nIn any case, after installation you can run the ElkOA GUI from everywhere in a\nterminal using either `elkoa` or `ElkOpticsAnalyzer`.\n\nAnother way to install is by cloning the repo as above and instead of\ninstalling via pip, put something like\n```bash\nexport PATH=$PATH:/path/to/ElkOpticsAnalyzer/elkoa/gui\nexport PYTHONPATH=$PYTHONPATH:/path/to/ElkOpticsAnalyzer/\n```\nto your `.bashrc` or `.bash_profile`. Then you can start the ElkOA GUI with\n`ElkOpticsAnalyzer.py`.\n\n\n### Tests\n\nTesting is done using the `pytest` library. Make sure you installed all\nadditional requirements beforehand.\n\n1. Download and extract the sample data\n\t- TODO\n2. Run (--mpl flag is mandatory!)\n```python\npytest test_figures.py --mpl\n```\n\n\n### Python CLI\n\nIn an Elk output directory containing e.g. the files\n```bash\nEPSILON_TDDFT_11.OUT EPSILON_TDDFT_12.OUT EPSILON_TDDFT_13.OUT \nEPSILON_TDDFT_21.OUT EPSILON_TDDFT_22.OUT EPSILON_TDDFT_23.OUT \nEPSILON_TDDFT_31.OUT EPSILON_TDDFT_32.OUT EPSILON_TDDFT_33.OUT elk.in INFO.OUT \n```\nyou can run in a python3 interpreter:\n```python\n# import helpful submodules from elkoa package\nfrom elkoa.utils import elk, io, convert\n# parse Elk input file\nelk_input = elk.ElkInput(verbose=True)\neta = elk_input.swidth\n# or read specific input parameter directly\neta = elk.readElkInputParameter(\"swidth\")\n# read tensorial Elk optics output (ij = dummy for 11, 12, etc.)\nfreqs, epsilon = io.readTensor(\"EPSILON_TDDFT_ij.OUT\")\n# find cartesian representation of q-vector from elk.in\nq = elk_input.q_cart\n# save crystal lattice vectors in cartesian basis as column-wise matrix\nB = elk_input.B\n# create converter instance with conventional frequency regularization\nconverter = convert.Converter(q, B, freqs, eta, reg=\"conv\")\n# convert dielectric tensor to optical conductivity\nsigma = converter.eps_to_sig(epsilon)\n# write out converted tensor\nio.writeTensor(\"sigma_ij_test.dat\", freqs, sigma, threeColumn=True)\n# write out only 11 and 22 element of converted tensor\nio.writeTensor(\"sigma_ij_test.dat\", freqs, sigma, elements=[11, 22])\n```\n\n\n### Misc\n\n* Loading additional data into existing plot:\n  ElkOA supports auto-converting filenames to tex-labels. For this feature to\n  work however, filenames must follow the pattern `root`+`_sub`+`.ext`, which\n  will show up as root<sub>sub</sub>. In case `root` contains a\n  case-insensitive substring like eps, EPSILON, Sig, SIGma etc., corresponding\n  greek letters will be used, i.e. eps_ex.dat \u2799 \u03b5<sub>ex</sub>.\n* The number of additional plots is restricted to 6, but in return we use \n  consistent coloring after consecutively adding more plots.\n\n\n### Extend ElkOA\n\nUsers can extend ElkOA easily by modifying the file `elkoa/utils/dicts.py`, \nwhere all GUI-available tasks/output files, parameters and converters are set \nincluding naming of axes and tabs.\n\n### Usage Examples GUI\n\n#### Tensor plotting and \"on-top-data\"\n![](screenshots/basic.gif)  \n\n#### Batch loading for parameter studies\n![](screenshots/batchload.gif)  \n\n#### Converter tools for response functions\n![](screenshots/convert.gif)\n\n#### Manipulating field data and visible frequency range\n\n![](screenshots/manipulate.gif)\n\n\u2799 if images are not shown visit https://github.com/PandaScience/ElkOpticsAnalyzer/\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PandaScience/ElkOpticsAnalyzer", "keywords": "elk ab-initio simulation postprocessing optics analyze physics", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "elkoa", "package_url": "https://pypi.org/project/elkoa/", "platform": "", "project_url": "https://pypi.org/project/elkoa/", "project_urls": {"Homepage": "https://github.com/PandaScience/ElkOpticsAnalyzer"}, "release_url": "https://pypi.org/project/elkoa/1.5.1/", "requires_dist": ["pip", "pbr", "setuptools", "pyqt5", "numpy", "matplotlib", "wrapt", "numexpr"], "requires_python": ">=3", "summary": "plot and analyze Elk optics output data", "version": "1.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Elk Optics Analyzer (ElkOA)</h2>\n<p><a href=\"https://pypi.org/project/elkoa/\" rel=\"nofollow\"><img alt=\"Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/008c36b610d729ad0a0bad13ba894d250c58d7e1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f656c6b6f612e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.org/project/elkoa/\" rel=\"nofollow\"><img alt=\"PyPi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7a1f2e82e8158d70e271214e2df14e77ca0d892/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f656c6b6f612e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/python/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c326c58e924b9f3508f32a8ac6b3ee91f40b090/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"http://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3+\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9782e7559b32d58de60dc6e551d09b2c64950f42/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f656c6b6f612e7376673f7374796c653d666c61742d737175617265\"></a></p>\n\n<blockquote>\n<p>\u26a0\ufe0f <strong>NOTE</strong>: You may also try the develop branch via <code>git clone -b develop ...</code></p>\n</blockquote>\n<h3>Description</h3>\n<p>Elk Optics Analyzer (ElkOA) helps to analyze optics output data from\n<a href=\"http://elk.sourceforge.net\" rel=\"nofollow\">The Elk Code</a>.</p>\n<h3>Features</h3>\n<p>Elk Optics Analyzer...</p>\n<ul>\n<li>Gives you quick and painless visual access to many ELK output files</li>\n<li>Comes with an easy to use GUI as well as a python CLI for experts</li>\n<li>Recognizes available tasks / (tensor) fields automatically</li>\n<li>Is easily extendable</li>\n</ul>\n<p>Users can...</p>\n<ul>\n<li>Create and save publication-ready pictures via matplotlib's user interface</li>\n<li>Visualize real and imaginary parts of Elk optics output data in various ways</li>\n<li>Cycle through available datasets quickly via <kbd>Tab</kbd> and\n<kbd>Shift+Tab</kbd></li>\n<li>Select tensor elements to plot via dialog <kbd>Ctrl+T</kbd></li>\n<li>Use global tensor elements settings across all available tasks <kbd>Ctrl+G&lt;/kdb&gt;</kbd></li>\n<li>Batch-load parameter studies to visually analyze the impact of different\nparameter settings <kbd>Ctrl+B</kbd></li>\n<li>Import and plot additional data files on top (e.g. experimental measurements)\n<kbd>Ctrl+O</kbd></li>\n<li>Write out currently displayed data in different formats <kbd>Ctrl+S</kbd></li>\n<li>Manipulate field data tab-wise, e.g. shift graph(s) to left/right, take\nsquare root etc. <kbd>Ctrl+M</kbd></li>\n<li>Convert response functions via\n<a href=\"https://arxiv.org/abs/1401.6800\" rel=\"nofollow\">Universal Response Relations</a>, e.g. \u03b5 \u2799 \u03c3\n<kbd>Ctrl+C</kbd> <strong>\u26a0\ufe0f experimental\u2757</strong></li>\n<li>Convert dielectric tensors computed in the optical limit (q \u2799 0)\ninto ordinary and extra-ordinary refractive indices for arbitrary wavevectors\n<kbd>Ctrl+C</kbd> <strong>\u26a0\ufe0f experimental\u2757</strong></li>\n</ul>\n<p>Possible new features for next releases:</p>\n<ul>\n<li>Most certainly and foremost: Bugfixes</li>\n<li>3D-plotting of index ellipsoids</li>\n<li>Batch-convert for a set of different q-points</li>\n<li>Sample/geometry-dependent (i.e. thin films) conversions of response functions</li>\n</ul>\n<h3>Requirements</h3>\n<ul>\n<li><a href=\"https://www.python.org\" rel=\"nofollow\">Python 3.x</a></li>\n<li><a href=\"https://www.numpy.org/\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a></li>\n<li><a href=\"http://pyqt.sourceforge.net/Docs/PyQt5/installation.html\" rel=\"nofollow\">PyQt5</a></li>\n<li><a href=\"https://docs.openstack.org/pbr/latest/\" rel=\"nofollow\">pbr</a></li>\n<li><a href=\"https://wrapt.readthedocs.io/en/latest/\" rel=\"nofollow\">wrapt</a></li>\n<li><a href=\"https://numexpr.readthedocs.io/en/latest/\" rel=\"nofollow\">numexpr</a></li>\n</ul>\n<p>You should use the packages provided by your linux distribution. On recent\nDebian systems for example, you can get all requirements by running</p>\n<pre>apt install python3-numpy python3-matplotlib python3-pyqt5 python3-pbr python3-wrapt python3-numexpr\n</pre>\n<p>Alternatively, you can get the latest PyPI versions of each package\nautomatically as dependencies by installing ElkOA via pip (see below).</p>\n<p>For testing purposes, you additionally need the following packages:</p>\n<ul>\n<li><a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a></li>\n<li><a href=\"https://pytest-qt.readthedocs.io/en/latest/\" rel=\"nofollow\">pytest-qt</a></li>\n<li><a href=\"https://github.com/astrofrog/pytest-mpl\" rel=\"nofollow\">pytest-mpl</a></li>\n<li><a href=\"https://nose.readthedocs.io/en/latest/\" rel=\"nofollow\">nose</a></li>\n</ul>\n<h3>Installation</h3>\n<p>The easiest way to install ElkOA is via pip, either from PyPI directly</p>\n<pre>pip install elkoa\n</pre>\n<p>or, if you want the latest git release,</p>\n<pre>git clone https://github.com/PandaScience/ElkOpticsAnalyzer.git\n<span class=\"nb\">cd</span> ElkOpticsAnalyzer\npip install .\n</pre>\n<p>This will also install all required but absent python packages automatically\nfrom PyPI.</p>\n<p>If you like to install ElkOA only for the current user, add the flag <code>--user</code>.\nIf you want to take care of the required python packages yourself (i.e. by\nusing the ones provided by your Linux distribution), add <code>--no-deps</code>.  If you\nlike to run a developer installation (no copying of files, instead use git repo\nfiles directly), add <code>-e</code>.</p>\n<p><strong>Note:</strong> On newer systems you possibly encounter\n<code>error: option --user not recognized</code> during the developer installation. This\nis due to a bug in pypa/setuptools and can be worked around using the flag\n<code>--no-build-isolation</code>. However, you then have to take care of all build\ndependencies yourself.</p>\n<p>For example, on my Arch Linux system, I use\n<code>pip install --user --no-deps --no-build-isolation -e .</code>\nwithin the repository's folder.</p>\n<p>In any case, after installation you can run the ElkOA GUI from everywhere in a\nterminal using either <code>elkoa</code> or <code>ElkOpticsAnalyzer</code>.</p>\n<p>Another way to install is by cloning the repo as above and instead of\ninstalling via pip, put something like</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"nv\">$PATH</span>:/path/to/ElkOpticsAnalyzer/elkoa/gui\n<span class=\"nb\">export</span> <span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span><span class=\"nv\">$PYTHONPATH</span>:/path/to/ElkOpticsAnalyzer/\n</pre>\n<p>to your <code>.bashrc</code> or <code>.bash_profile</code>. Then you can start the ElkOA GUI with\n<code>ElkOpticsAnalyzer.py</code>.</p>\n<h3>Tests</h3>\n<p>Testing is done using the <code>pytest</code> library. Make sure you installed all\nadditional requirements beforehand.</p>\n<ol>\n<li>Download and extract the sample data\n<ul>\n<li>TODO</li>\n</ul>\n</li>\n<li>Run (--mpl flag is mandatory!)</li>\n</ol>\n<pre><span class=\"n\">pytest</span> <span class=\"n\">test_figures</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"o\">--</span><span class=\"n\">mpl</span>\n</pre>\n<h3>Python CLI</h3>\n<p>In an Elk output directory containing e.g. the files</p>\n<pre>EPSILON_TDDFT_11.OUT EPSILON_TDDFT_12.OUT EPSILON_TDDFT_13.OUT \nEPSILON_TDDFT_21.OUT EPSILON_TDDFT_22.OUT EPSILON_TDDFT_23.OUT \nEPSILON_TDDFT_31.OUT EPSILON_TDDFT_32.OUT EPSILON_TDDFT_33.OUT elk.in INFO.OUT \n</pre>\n<p>you can run in a python3 interpreter:</p>\n<pre><span class=\"c1\"># import helpful submodules from elkoa package</span>\n<span class=\"kn\">from</span> <span class=\"nn\">elkoa.utils</span> <span class=\"kn\">import</span> <span class=\"n\">elk</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"p\">,</span> <span class=\"n\">convert</span>\n<span class=\"c1\"># parse Elk input file</span>\n<span class=\"n\">elk_input</span> <span class=\"o\">=</span> <span class=\"n\">elk</span><span class=\"o\">.</span><span class=\"n\">ElkInput</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">eta</span> <span class=\"o\">=</span> <span class=\"n\">elk_input</span><span class=\"o\">.</span><span class=\"n\">swidth</span>\n<span class=\"c1\"># or read specific input parameter directly</span>\n<span class=\"n\">eta</span> <span class=\"o\">=</span> <span class=\"n\">elk</span><span class=\"o\">.</span><span class=\"n\">readElkInputParameter</span><span class=\"p\">(</span><span class=\"s2\">\"swidth\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># read tensorial Elk optics output (ij = dummy for 11, 12, etc.)</span>\n<span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">epsilon</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">readTensor</span><span class=\"p\">(</span><span class=\"s2\">\"EPSILON_TDDFT_ij.OUT\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># find cartesian representation of q-vector from elk.in</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">elk_input</span><span class=\"o\">.</span><span class=\"n\">q_cart</span>\n<span class=\"c1\"># save crystal lattice vectors in cartesian basis as column-wise matrix</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">elk_input</span><span class=\"o\">.</span><span class=\"n\">B</span>\n<span class=\"c1\"># create converter instance with conventional frequency regularization</span>\n<span class=\"n\">converter</span> <span class=\"o\">=</span> <span class=\"n\">convert</span><span class=\"o\">.</span><span class=\"n\">Converter</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">eta</span><span class=\"p\">,</span> <span class=\"n\">reg</span><span class=\"o\">=</span><span class=\"s2\">\"conv\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># convert dielectric tensor to optical conductivity</span>\n<span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"n\">converter</span><span class=\"o\">.</span><span class=\"n\">eps_to_sig</span><span class=\"p\">(</span><span class=\"n\">epsilon</span><span class=\"p\">)</span>\n<span class=\"c1\"># write out converted tensor</span>\n<span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">writeTensor</span><span class=\"p\">(</span><span class=\"s2\">\"sigma_ij_test.dat\"</span><span class=\"p\">,</span> <span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">threeColumn</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># write out only 11 and 22 element of converted tensor</span>\n<span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">writeTensor</span><span class=\"p\">(</span><span class=\"s2\">\"sigma_ij_test.dat\"</span><span class=\"p\">,</span> <span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">elements</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">])</span>\n</pre>\n<h3>Misc</h3>\n<ul>\n<li>Loading additional data into existing plot:\nElkOA supports auto-converting filenames to tex-labels. For this feature to\nwork however, filenames must follow the pattern <code>root</code>+<code>_sub</code>+<code>.ext</code>, which\nwill show up as root<sub>sub</sub>. In case <code>root</code> contains a\ncase-insensitive substring like eps, EPSILON, Sig, SIGma etc., corresponding\ngreek letters will be used, i.e. eps_ex.dat \u2799 \u03b5<sub>ex</sub>.</li>\n<li>The number of additional plots is restricted to 6, but in return we use\nconsistent coloring after consecutively adding more plots.</li>\n</ul>\n<h3>Extend ElkOA</h3>\n<p>Users can extend ElkOA easily by modifying the file <code>elkoa/utils/dicts.py</code>,\nwhere all GUI-available tasks/output files, parameters and converters are set\nincluding naming of axes and tabs.</p>\n<h3>Usage Examples GUI</h3>\n<h4>Tensor plotting and \"on-top-data\"</h4>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00558da18c42a2b063a43ded90a6e6013291e0d8/73637265656e73686f74732f62617369632e676966\"></p>\n<h4>Batch loading for parameter studies</h4>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e29d031fad9d671447c49566c446c7ba3b57106/73637265656e73686f74732f62617463686c6f61642e676966\"></p>\n<h4>Converter tools for response functions</h4>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42666d098034657eea4cfac0fa3c0cf4cac854a9/73637265656e73686f74732f636f6e766572742e676966\"></p>\n<h4>Manipulating field data and visible frequency range</h4>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/efc1c9a1f1700cb3fc0029a280361f686758403f/73637265656e73686f74732f6d616e6970756c6174652e676966\"></p>\n<p>\u2799 if images are not shown visit <a href=\"https://github.com/PandaScience/ElkOpticsAnalyzer/\" rel=\"nofollow\">https://github.com/PandaScience/ElkOpticsAnalyzer/</a></p>\n\n          </div>"}, "last_serial": 6186434, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "01f22cb435a1f63431270706338d7202", "sha256": "8461f48eb54df8aefe8e226f600eb9c0562e2ad96954e693e700a4e0baa7da99"}, "downloads": -1, "filename": "elkoa-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "01f22cb435a1f63431270706338d7202", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 278387, "upload_time": "2019-04-04T14:38:38", "upload_time_iso_8601": "2019-04-04T14:38:38.094960Z", "url": "https://files.pythonhosted.org/packages/0b/85/49f56770e5d8c43386fe077a5be3bbd95ba42959278aa8866f3b9aa51127/elkoa-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea7fecaccf977523978c0449c78abf8e", "sha256": "371055ec1be0c655e6780f713c75ebe1ba38813a8c37b0bfa0e3ae075b02bdfe"}, "downloads": -1, "filename": "elkoa-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ea7fecaccf977523978c0449c78abf8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2221584, "upload_time": "2019-04-04T14:38:41", "upload_time_iso_8601": "2019-04-04T14:38:41.437431Z", "url": "https://files.pythonhosted.org/packages/4d/58/b054db589417ebad04a0be090f66669cf7e191e378dabfe0e4d4a1014abd/elkoa-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "dc8cc1c85d1d33e742a0bfcf6ded6510", "sha256": "d0b3d95e2d685c69dcffc5e0386dc63f50d402a6aa3511fe095d1e0dae77c97c"}, "downloads": -1, "filename": "elkoa-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dc8cc1c85d1d33e742a0bfcf6ded6510", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 300645, "upload_time": "2019-05-13T19:02:32", "upload_time_iso_8601": "2019-05-13T19:02:32.736116Z", "url": "https://files.pythonhosted.org/packages/ee/cf/9e43f358d657f55ccfdd31e9f95891c1e1eee3790df2d067e3643939311a/elkoa-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aadd0daf48a037c881ecf7f8948c089e", "sha256": "ecbe6baa7143984758cef88b4fda8854c747f40d371ac7887861ed6d3fa5cee4"}, "downloads": -1, "filename": "elkoa-1.3.0.tar.gz", "has_sig": false, "md5_digest": "aadd0daf48a037c881ecf7f8948c089e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2244587, "upload_time": "2019-05-13T19:02:38", "upload_time_iso_8601": "2019-05-13T19:02:38.179188Z", "url": "https://files.pythonhosted.org/packages/1d/62/0283f1547732251c3049c72f2b944c8ce71a40665903c54975e6b9d2ed8d/elkoa-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "d73514db41382606bc12f32188808bb6", "sha256": "03f31f7f4049a5863852189106ba700c98298a968c14bf237c6cf9e5ecd78f42"}, "downloads": -1, "filename": "elkoa-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d73514db41382606bc12f32188808bb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 307945, "upload_time": "2019-11-06T13:04:34", "upload_time_iso_8601": "2019-11-06T13:04:34.478807Z", "url": "https://files.pythonhosted.org/packages/47/43/c65219c1dc6a28bdea56de24df85da1d84716efd284171412032735c5f37/elkoa-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50ef55c803653fcd5c993c3d745fec54", "sha256": "60e6a5bbe2867c0c07a513984bb52d400775a5eb855e6bb409ff793c585228b3"}, "downloads": -1, "filename": "elkoa-1.4.0.tar.gz", "has_sig": false, "md5_digest": "50ef55c803653fcd5c993c3d745fec54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3169021, "upload_time": "2019-11-06T13:04:37", "upload_time_iso_8601": "2019-11-06T13:04:37.726346Z", "url": "https://files.pythonhosted.org/packages/8c/ac/c877588c69f2c89596ecc95a2cdc0b8740c68649e75fc408e1ab464eb5f4/elkoa-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "6568e5073a0d3df95be1c4ff85c008cc", "sha256": "f7e4a325eb30f7a5d870c1cb4a4691fa71b8b2f0eafcdee69f7c695a2ad67536"}, "downloads": -1, "filename": "elkoa-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6568e5073a0d3df95be1c4ff85c008cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 313438, "upload_time": "2019-11-14T07:21:10", "upload_time_iso_8601": "2019-11-14T07:21:10.797703Z", "url": "https://files.pythonhosted.org/packages/8b/1c/9a9b7419d7f56c98d15cb52e0df9571623544cc5a84fbc03b63fcca44ed9/elkoa-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cee3935e8b4cc13640e628ea43b421c4", "sha256": "c52df45026003f9d1ced4e0bf167e8f5df0d2d1d289f52158a15d5422f53c527"}, "downloads": -1, "filename": "elkoa-1.5.0.tar.gz", "has_sig": false, "md5_digest": "cee3935e8b4cc13640e628ea43b421c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3172490, "upload_time": "2019-11-14T07:21:13", "upload_time_iso_8601": "2019-11-14T07:21:13.987876Z", "url": "https://files.pythonhosted.org/packages/f1/9f/d519eed4127e797dd151f145e28b037795f261a69d47e8a8cd8e906708c2/elkoa-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "55c4c510a9a9873bef9f1963633f40d4", "sha256": "90794a95d97ef1c4d966174b68c92edb66b8770a2672af728338f295c38ca101"}, "downloads": -1, "filename": "elkoa-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "55c4c510a9a9873bef9f1963633f40d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 316066, "upload_time": "2019-11-23T13:11:19", "upload_time_iso_8601": "2019-11-23T13:11:19.685999Z", "url": "https://files.pythonhosted.org/packages/d4/9c/df00c3450cfa0d971400d7282ee5710646346b2757faab8ea5e66293c6ce/elkoa-1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7daddcdccddef10556bf0a892892566f", "sha256": "51c9599689889eb2de70740d85c22d720919cada496a7876c785178a0fec686d"}, "downloads": -1, "filename": "elkoa-1.5.1.tar.gz", "has_sig": false, "md5_digest": "7daddcdccddef10556bf0a892892566f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3581548, "upload_time": "2019-11-23T13:11:26", "upload_time_iso_8601": "2019-11-23T13:11:26.873943Z", "url": "https://files.pythonhosted.org/packages/ba/27/e69146a785a70b30669f1f038b6ba11a71eec60b6154b0724cc77a13cef2/elkoa-1.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55c4c510a9a9873bef9f1963633f40d4", "sha256": "90794a95d97ef1c4d966174b68c92edb66b8770a2672af728338f295c38ca101"}, "downloads": -1, "filename": "elkoa-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "55c4c510a9a9873bef9f1963633f40d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 316066, "upload_time": "2019-11-23T13:11:19", "upload_time_iso_8601": "2019-11-23T13:11:19.685999Z", "url": "https://files.pythonhosted.org/packages/d4/9c/df00c3450cfa0d971400d7282ee5710646346b2757faab8ea5e66293c6ce/elkoa-1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7daddcdccddef10556bf0a892892566f", "sha256": "51c9599689889eb2de70740d85c22d720919cada496a7876c785178a0fec686d"}, "downloads": -1, "filename": "elkoa-1.5.1.tar.gz", "has_sig": false, "md5_digest": "7daddcdccddef10556bf0a892892566f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3581548, "upload_time": "2019-11-23T13:11:26", "upload_time_iso_8601": "2019-11-23T13:11:26.873943Z", "url": "https://files.pythonhosted.org/packages/ba/27/e69146a785a70b30669f1f038b6ba11a71eec60b6154b0724cc77a13cef2/elkoa-1.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:48 2020"}