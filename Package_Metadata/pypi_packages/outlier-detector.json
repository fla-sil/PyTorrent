{"info": {"author": "Fabio Veronese", "author_email": "fveronese85@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Outlier Detector toolkit\n[![Build Status](https://travis-ci.com/docet85/outlier_detector.svg?branch=dev)](https://travis-ci.com/docet85/outlier_detector)\n[![codecov](https://codecov.io/gh/docet85/outlier_detector/branch/dev/graph/badge.svg)](https://codecov.io/gh/docet85/outlier_detector)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\n\nThis project features a set of tools for outlier detection, marking or filtering away samples\nas they come to your Python analysis code.\n\nMost of the tools rely on double tailed Dixon's Q-test (https://en.wikipedia.org/wiki/Dixon%27s_Q_test).\n\n## Installation\n```bash\npip install outlier-detector\n```\n\n## TL;DR\n<details>\n   <summary>I have a <code>sample</code>, and a know data <code>distribution</code>: is the sample an outlier?</summary>\n\n```python\nsample = -14.5\ndistribution = [0.1, 1.1, 4.78, 2.0, 7.2, 5.3]\n\nfrom outlier_detector.functions import is_outlier\nprint(is_outlier(distribution, sample))\n```\n\n</details>\n\n<details>\n   <summary>I have a <code>distribution</code> and I iterate over it: is the n-th <code>sample</code>\n   an outlier?</summary>\n\n```python\ndistribution = [0.1, 1.1, 4.78, 2.0, 7.2, 5.3, 8.1, -14.1, 5.4]\nfrom outlier_detector.detectors import OutlierDetector\nod = OutlierDetector(buffer_samples=5)\nfor sample in distribution:\n    print(od.is_outlier(sample))\n```\n</details>\n\n<details>\n   <summary>I have a generating object from which I <code>pop</code> samples; and I want only valid samples:\n    how can I reject outliers?</summary>\n\n```python\ndistribution = [0.1, 1.1, 4.78, 2.0, 7.2, 5.3, 8.1, -14.1, 5.4]\nfrom outlier_detector.filters import filter_outlier\n\nclass MyGen:\n    def __init__(self):\n        self.cursor = -1\n\n    @filter_outlier()\n    def pop(self):\n        self.cursor += 1\n        return distribution[self.cursor]\n\ng = MyGen()\nwhile True:\n    try:\n        r = g.pop()\n        print(r)\n    except IndexError:\n        print('No more data')\n        break\n\n```\n</details>\n\n<details>\n   <summary>I have a generating object from which I <code>pop</code> samples; and I want to iterate only on valid samples:\n    how can I reject outliers and get an iterator?</summary>\n\n```python\ndistribution = [0.1, 1.1, 4.78, 2.0, 7.2, 5.3, 8.1, -14.1, 5.4]\nfrom outlier_detector.filters import OutlierFilter\n\nclass MyGen:\n    def __init__(self):\n        self.cursor = -1\n\n    def pop(self):\n        self.cursor += 1\n        return distribution[self.cursor]\n\ng = MyGen()\nof = OutlierFilter()\ntry:\n    for sample in of.filter(g.pop):\n        print(sample)\nexcept IndexError:\n    print('No more data')\n\n\n```\n</details>\n\n## Documentation\nThe toolkit is organized so you can exploit one of the following pattern in the easiest way possible:\n`functions` for static analysis, `detectors` for objects with internal buffers, and `filters` for decorators.\n\nFor documentation see [doc file](https://github.com/docet85/outlier_detector/blob/dev/DOC.md)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/docet85/outlier_detector", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "outlier-detector", "package_url": "https://pypi.org/project/outlier-detector/", "platform": "", "project_url": "https://pypi.org/project/outlier-detector/", "project_urls": {"Homepage": "https://github.com/docet85/outlier_detector"}, "release_url": "https://pypi.org/project/outlier-detector/0.0.3/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Minimal tool for outliers detection on small samples set", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Outlier Detector toolkit</h1>\n<p><a href=\"https://travis-ci.com/docet85/outlier_detector\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c40b4a14d47afedfd32ae534f68cd3cfb6fd60b2/68747470733a2f2f7472617669732d63692e636f6d2f646f63657438352f6f75746c6965725f6465746563746f722e7376673f6272616e63683d646576\"></a>\n<a href=\"https://codecov.io/gh/docet85/outlier_detector\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/594a4782660bfa94da91af72feece41369fb63d2/68747470733a2f2f636f6465636f762e696f2f67682f646f63657438352f6f75746c6965725f6465746563746f722f6272616e63682f6465762f67726170682f62616467652e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://github.com/pre-commit/pre-commit\" rel=\"nofollow\"><img alt=\"pre-commit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d861174d9af84b80d393b2e7c89badabc5e04097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7072652d2d636f6d6d69742d656e61626c65642d627269676874677265656e3f6c6f676f3d7072652d636f6d6d6974266c6f676f436f6c6f723d7768697465\"></a></p>\n<p>This project features a set of tools for outlier detection, marking or filtering away samples\nas they come to your Python analysis code.</p>\n<p>Most of the tools rely on double tailed Dixon's Q-test (<a href=\"https://en.wikipedia.org/wiki/Dixon%27s_Q_test\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Dixon%27s_Q_test</a>).</p>\n<h2>Installation</h2>\n<pre>pip install outlier-detector\n</pre>\n<h2>TL;DR</h2>\n<details>\n   <summary>I have a <code>sample</code>, and a know data <code>distribution</code>: is the sample an outlier?</summary>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">14.5</span>\n<span class=\"n\">distribution</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">4.78</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">7.2</span><span class=\"p\">,</span> <span class=\"mf\">5.3</span><span class=\"p\">]</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">outlier_detector.functions</span> <span class=\"kn\">import</span> <span class=\"n\">is_outlier</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">is_outlier</span><span class=\"p\">(</span><span class=\"n\">distribution</span><span class=\"p\">,</span> <span class=\"n\">sample</span><span class=\"p\">))</span>\n</pre>\n</details>\n<details>\n   <summary>I have a <code>distribution</code> and I iterate over it: is the n-th <code>sample</code>\n   an outlier?</summary>\n<pre><span class=\"n\">distribution</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">4.78</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">7.2</span><span class=\"p\">,</span> <span class=\"mf\">5.3</span><span class=\"p\">,</span> <span class=\"mf\">8.1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">14.1</span><span class=\"p\">,</span> <span class=\"mf\">5.4</span><span class=\"p\">]</span>\n<span class=\"kn\">from</span> <span class=\"nn\">outlier_detector.detectors</span> <span class=\"kn\">import</span> <span class=\"n\">OutlierDetector</span>\n<span class=\"n\">od</span> <span class=\"o\">=</span> <span class=\"n\">OutlierDetector</span><span class=\"p\">(</span><span class=\"n\">buffer_samples</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">sample</span> <span class=\"ow\">in</span> <span class=\"n\">distribution</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">od</span><span class=\"o\">.</span><span class=\"n\">is_outlier</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">))</span>\n</pre>\n</details>\n<details>\n   <summary>I have a generating object from which I <code>pop</code> samples; and I want only valid samples:\n    how can I reject outliers?</summary>\n<pre><span class=\"n\">distribution</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">4.78</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">7.2</span><span class=\"p\">,</span> <span class=\"mf\">5.3</span><span class=\"p\">,</span> <span class=\"mf\">8.1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">14.1</span><span class=\"p\">,</span> <span class=\"mf\">5.4</span><span class=\"p\">]</span>\n<span class=\"kn\">from</span> <span class=\"nn\">outlier_detector.filters</span> <span class=\"kn\">import</span> <span class=\"n\">filter_outlier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyGen</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n    <span class=\"nd\">@filter_outlier</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">distribution</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">]</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">MyGen</span><span class=\"p\">()</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'No more data'</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n</pre>\n</details>\n<details>\n   <summary>I have a generating object from which I <code>pop</code> samples; and I want to iterate only on valid samples:\n    how can I reject outliers and get an iterator?</summary>\n<pre><span class=\"n\">distribution</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">4.78</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">7.2</span><span class=\"p\">,</span> <span class=\"mf\">5.3</span><span class=\"p\">,</span> <span class=\"mf\">8.1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">14.1</span><span class=\"p\">,</span> <span class=\"mf\">5.4</span><span class=\"p\">]</span>\n<span class=\"kn\">from</span> <span class=\"nn\">outlier_detector.filters</span> <span class=\"kn\">import</span> <span class=\"n\">OutlierFilter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyGen</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">distribution</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">]</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">MyGen</span><span class=\"p\">()</span>\n<span class=\"n\">of</span> <span class=\"o\">=</span> <span class=\"n\">OutlierFilter</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">sample</span> <span class=\"ow\">in</span> <span class=\"n\">of</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'No more data'</span><span class=\"p\">)</span>\n</pre>\n</details>\n<h2>Documentation</h2>\n<p>The toolkit is organized so you can exploit one of the following pattern in the easiest way possible:\n<code>functions</code> for static analysis, <code>detectors</code> for objects with internal buffers, and <code>filters</code> for decorators.</p>\n<p>For documentation see <a href=\"https://github.com/docet85/outlier_detector/blob/dev/DOC.md\" rel=\"nofollow\">doc file</a></p>\n\n          </div>"}, "last_serial": 7148831, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1dba14f9f87bb9345d862aac4682408c", "sha256": "a8e030f251a8a2595940cc4f5797660a0a69efbe3d90fcfbc9ce10533bff096e"}, "downloads": -1, "filename": "outlier_detector-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1dba14f9f87bb9345d862aac4682408c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12469, "upload_time": "2020-04-25T21:16:09", "upload_time_iso_8601": "2020-04-25T21:16:09.816547Z", "url": "https://files.pythonhosted.org/packages/cb/5d/4866b079c64f5b55a3ffbf910d79136f99bc163c72308d0d0fe8525bc299/outlier_detector-0.0.1-py3-none-any.whl", "yanked": true}, {"comment_text": "", "digests": {"md5": "a5cd65c344f8f5bfb90810952ecb8c1c", "sha256": "605a541f63957a9a6c6a297f57b4534353a954b64298205056987ac3793aaef8"}, "downloads": -1, "filename": "outlier_detector-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a5cd65c344f8f5bfb90810952ecb8c1c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8276, "upload_time": "2020-04-25T21:16:12", "upload_time_iso_8601": "2020-04-25T21:16:12.000914Z", "url": "https://files.pythonhosted.org/packages/f8/5e/5378daf239b868c9f986562a15a4333a43bc37fd7a234534a050df19c799/outlier_detector-0.0.1.tar.gz", "yanked": true}], "0.0.2": [{"comment_text": "", "digests": {"md5": "02225afa09b1d26cf1c24ddf1d4871ad", "sha256": "aa13ba678fc24fc50c766c1c4954a24edfc691f54d6d1c67bb86f739f6e54394"}, "downloads": -1, "filename": "outlier_detector-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "02225afa09b1d26cf1c24ddf1d4871ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12499, "upload_time": "2020-04-25T22:16:02", "upload_time_iso_8601": "2020-04-25T22:16:02.874123Z", "url": "https://files.pythonhosted.org/packages/a6/d1/e403c9c717489bb10f6279606370ec843fea77060c826eb8f84cd4215ed2/outlier_detector-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e24aacf1431bab807e4a9ea41aa53b18", "sha256": "fc6c9bba98a20d8941847cc542464f6e72414b0e2953ba44b286fa811eeb0d45"}, "downloads": -1, "filename": "outlier_detector-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e24aacf1431bab807e4a9ea41aa53b18", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8317, "upload_time": "2020-04-25T22:16:04", "upload_time_iso_8601": "2020-04-25T22:16:04.371458Z", "url": "https://files.pythonhosted.org/packages/b0/73/79e6ef21e16582f12e06c968f82b3d033de325cc72a3b437044dfc7f3a84/outlier_detector-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "7264ada4f20de00e7dcd959733998b6a", "sha256": "5966e26339bfc7f6da32c68da163073a6ea22be2f2172c6816bea143470a99c0"}, "downloads": -1, "filename": "outlier_detector-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7264ada4f20de00e7dcd959733998b6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10950, "upload_time": "2020-05-01T23:11:50", "upload_time_iso_8601": "2020-05-01T23:11:50.282352Z", "url": "https://files.pythonhosted.org/packages/60/ef/035c637063fa7576a85c5a12a7e1176fd28b4a6f3df297123d804a14c73e/outlier_detector-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7264ada4f20de00e7dcd959733998b6a", "sha256": "5966e26339bfc7f6da32c68da163073a6ea22be2f2172c6816bea143470a99c0"}, "downloads": -1, "filename": "outlier_detector-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7264ada4f20de00e7dcd959733998b6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10950, "upload_time": "2020-05-01T23:11:50", "upload_time_iso_8601": "2020-05-01T23:11:50.282352Z", "url": "https://files.pythonhosted.org/packages/60/ef/035c637063fa7576a85c5a12a7e1176fd28b4a6f3df297123d804a14c73e/outlier_detector-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:41 2020"}