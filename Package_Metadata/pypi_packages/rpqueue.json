{"info": {"author": "Josiah Carlson", "author_email": "josiah.carlson@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Description\n===========\n\nThis package intends to offer a priority-based remote task queue solution\nusing Redis as the transport and persistence layer, and JSON for a common\ninterchange format.\n\nSemantically, this module implements a 0/1 or 1+ queue with optional retries.\nThat is, it attempts to execute every task once by default, or >1 manually, or\n>1 automatically with 'visibility timeouts'.\n\nIf a 'manual' retry task raises an exception, it will not automatically retry,\nbut you can manually retry the task and specify the maximum attempts. Similarly,\nfor tasks with visibility timeouts, if the task rasises an exception or doesn't\ncomplete, it will be retried up to the limit of retries provided.\n\nSee the `Retries`_ section below.\n\nFull documentation is available: `https://josiahcarlson.github.io/rpqueue/\n<https://josiahcarlson.github.io/rpqueue/>`_\n\nGetting started\n===============\n\nIn order to execute tasks, you must ensure that rpqueue knows about your\ntasks that can be executed, you must configure rpqueue to connect to your\nRedis server, then you must start the task execution daemon::\n\n    from mytasks import usertasks1, usertasks2, ...\n    import rpqueue\n\n    rpqueue.set_redis_connection_settings(host, port, db)\n    rpqueue.execute_tasks()\n\nAlternatively, rpqueue offers a command-line interface to do the same, though\nyou must provide the name of a module or package that imports all modules or\npackages that define tasks that you want to run. For example::\n\n    # tasks.py\n    from tasks import accounting, cleanup, ...\n    # any other imports or configuration necessary, put them here\n\n    # run from the command-line\n    python -m rpqueue.run --module=tasks --host=... --port=... --db=...\n\n\nExample uses\n============\n\nSay that you have a module ``usertasks1`` with a task to be executed called\n``echo_to_stdout``. Your module may look like the following::\n\n    from rpqueue import task\n\n    @task\n    def echo_to_stdout(message):\n        print(message)\n\nTo call the above task, you would use::\n\n    echo_to_stdout.execute(...)\n    echo_to_stdout.execute(..., delay=delay_in_seconds)\n\nYou can also schedule a task to be repeatedly executed with the\n``periodic_task`` decorator::\n\n    @periodic_task(25, queue=\"low\")\n    def function1():\n        # Will be executed every 25 seconds from within the 'low' queue.\n        pass\n\n\nRetries\n=======\n\nTasks may be provided an optional ``attempts`` argument, which specifies the\ntotal number of times the task will try to be executed before failing. By\ndefault, all tasks have ``attempts`` set at 1, unless otherwise specified::\n\n    @task(attempts=3)\n    def fail_until_zero(value, **kwargs):\n        try:\n            if value != 0:\n                value -= 1\n                raise Exception\n        except:\n            fail_until_zero.retry(value, **kwargs)\n        else:\n            print \"succeeded\"\n\nIf passed the value ``3``, \"succeeded\" will never be printed. Why? The first\ntry has value=3, attempts=3, and fails. The second pass has value=2,\nattempts=2, and fails. The third pass has value=1, attempts=1, fails, and the\nretry returns without retrying. The ``attempts`` value is the total number of\nattempts, including the first, and all retries.\n\nAutomatic retries with vis_timeout\n----------------------------------\n\nIncluded with rpqueue 0.30.0 or later, you can give tasks (and now data queues)\na visibility timeout, which is (per Amazon SQS-style semantics) a time for how\nlong the task has to execute correctly before being automatically re-entered\ninto the queue.::\n\n    @task(attempts=20, vis_timeout=5, use_dead=False)\n    def usually_eventually_succeed(**kwargs):\n        # (4/5)**20  is ~ 0.0115, so call chain fails about 1% of the time\n        if not random.randrange(5):\n            return \"done!\"\n\n        time.sleep(6) # fail silently\n\nDeadletter task queue\n---------------------\n\nIf you would like to know which tasks failed, failed calls can be automatically\nentered into a deadletter queue.::\n\n        @rpqueue.task(attempts=5, vis_timeout=5, use_dead=True)\n        def fails_to_dead(**kwargs):\n            # (4/5)**5  is 0.32768, so call chain fails about 33% of the time\n            if not random.randrange(5):\n                return \"done!\"\n\n            time.sleep(6) # fail silently\n\n        task_deadletter = rpqueue.Data(rpqueue.DEADLETTER_QUEUE, is_tasks=True)\n        dead_tasks = task_deadletter.get_data(items=5)\n\n\nSee ``help(rpqueue.Data)`` for more.\n\nWaiting for task execution\n==========================\n\nAs of version .19, RPQueue offers the ability to wait on a task until it\nbegins execution::\n\n    @task\n    def my_task(args):\n        # do something\n\n    executing_task = my_task.execute()\n    if executing_task.wait(5):\n        # task is either being executed, or it is done\n    else:\n        # task has not started execution yet\n\nWith the ability to wait for a task to complete, you can have the ability to\nadd deadlines by inserting a call to ``executing_task.cancel()`` in the else\nblock above.\n\n\nAutomatically storing results of tasks\n======================================\n\nAs of version .19, RPQueue offers the ability to store the result returned by\na task as it completes::\n\n    @task(save_results=30)\n    def task_with_results():\n        return 5\n\n    etask = task_with_results.execute()\n    if etask.wait(5):\n        print etask.result # should print 5\n\nThe ``save_results`` argument can be passed to tasks, periodic tasks, and even\ncron tasks (described below). The value passed will be how long the result is\nstored in Redis, in seconds. All results must be json-encodable.\n\n\nAdditional features\n===================\n\nCrontab\n-------\n\nSupport for cron_tasks using a crontab-like syntax requires the Python crontab\nmodule: http://pypi.python.org/pypi/crontab/ , allowing for::\n\n    @cron_task('0 5 tue * *')\n    def function2():\n        # Will be executed every Tuesday at 5AM.\n        pass\n\nData queues\n-----------\n\nPut data in queues, not tasks. I mean, should have probably been here from the\nstart, but it's here now.\n\nConvenient features:\n * 1-1000 data items per read, at your discretion\n * ``vis_timeout``\n * ``attempts``\n * ``use_dead``\n * refresh data if you want to keep working on it (we don't identify the reader, so you should use an explicit lock if you want guaranteed exclusivity)\n\nA few examples::\n\n    # 0/1 queue\n    dq = rpqueue.Data('best_effort')\n    dq.put_data([item1, item2, item3, ...])\n    items = dq.get_data(2) # {<uuid>: <item>, ...}\n\n    # Up to 5 deliveries, with 5 second delay before re-insertion\n    dq5 = rpqueue.Data('retry_processing', attempts=5, vis_timeout=5)\n    dq5.put_data([item1, item2, item3, ...])\n    items = dq5.get_data(2) # {<uuid>: <item>, ...}\n    items2 = dq5.get_data(2, vis_timeout=20) # override timeout on read\n    refreshed = set(dq5.refresh_data(items, vis_timeout=7)) # refresh our lock\n    items = {k:v for k,v in items if k in refreshed}\n    dq5.done_data(items)\n    dq5.done_data(items2)\n\n    # Up to 1 try with a 5 second delay before insertion into deadletter queue\n    dqd = rpqueue.Data('retry_processing', attempts=1, vis_timeout=5, use_dead=True)\n    dqd.put_data([item1, item2, item3, ...])\n    items = dqd.get_data(2) # {<uuid>: <item>, ...}\n    items2 = dqd.get_data(2, vis_timeout=20) # override timeout on read\n    refreshed = set(dqd.refresh_data(items, vis_timeout=7)) # refresh our lock\n    items = {k:v for k,v in items if k in refreshed}\n    dqd.done_data(items)\n    time.sleep(20)\n    # items2 are now \"dead\"\n    dead = rpqueue.Data(rpqueue.DEADLETTER_QUEUE)\n    dead_items = dead.get_data(2) # these have a different format, see docs!\n\nA longer example closer to what would be seen in practice::\n\n    aggregate_queue = rpqueue.Data(\"aggregate_stats\", vis_timeout=30, use_dead=False)\n\n    @rpqueue.periodic_task(60)\n    def aggregate():\n        # If vis_timeout is not provided, will use the queue default.\n        # If vis_timeout is <= 0, will act as a 0/1 queue, and later \"done data\"\n        # calling is unnecessary.\n        data = aggregate_queue.get_data(items=100, vis_timeout=5)\n        # data is a dictionary: {<uuid>: <item>, <uuid>: <item>, ...}\n        # do something with data\n        done_with = []\n        for id, value in data.items():\n            # do something with value\n            done_with.append(id)\n\n        aggregate_queue.refresh_data(data) # still working!\n\n        # You can pass any iterator that naturally iterates over the uuids you\n        # want to be \"done\" with.\n        aggregate_queue.done_data(done_with)\n        # also okay:\n        # aggregate_queue.done_data(data)\n        # aggregate_queue.done_data(tuple(data))\n        # aggregate_queue.done_data(list(data))\n\nSponsors\n========\n\nDon't like LGPL? Sponsor the project and get almost any license you want.\n\nThis project has been partly sponsored by structd.com and hCaptcha.com, both of\nwhom received licenses that match their needs appropriately.", "description_content_type": "", "docs_url": "https://pythonhosted.org/rpqueue/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/josiahcarlson/rpqueue", "keywords": "", "license": "GNU LGPL v2.1", "maintainer": "", "maintainer_email": "", "name": "rpqueue", "package_url": "https://pypi.org/project/rpqueue/", "platform": "", "project_url": "https://pypi.org/project/rpqueue/", "project_urls": {"Homepage": "https://github.com/josiahcarlson/rpqueue"}, "release_url": "https://pypi.org/project/rpqueue/0.33.2/", "requires_dist": null, "requires_python": "", "summary": "Use Redis as a priority-enabled and time-based task queue.", "version": "0.33.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p>This package intends to offer a priority-based remote task queue solution\nusing Redis as the transport and persistence layer, and JSON for a common\ninterchange format.</p>\n<p>Semantically, this module implements a 0/1 or 1+ queue with optional retries.\nThat is, it attempts to execute every task once by default, or &gt;1 manually, or\n&gt;1 automatically with \u2018visibility timeouts\u2019.</p>\n<p>If a \u2018manual\u2019 retry task raises an exception, it will not automatically retry,\nbut you can manually retry the task and specify the maximum attempts. Similarly,\nfor tasks with visibility timeouts, if the task rasises an exception or doesn\u2019t\ncomplete, it will be retried up to the limit of retries provided.</p>\n<p>See the <a href=\"#retries\" rel=\"nofollow\">Retries</a> section below.</p>\n<p>Full documentation is available: <a href=\"https://josiahcarlson.github.io/rpqueue/\" rel=\"nofollow\">https://josiahcarlson.github.io/rpqueue/</a></p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>In order to execute tasks, you must ensure that rpqueue knows about your\ntasks that can be executed, you must configure rpqueue to connect to your\nRedis server, then you must start the task execution daemon:</p>\n<pre>from mytasks import usertasks1, usertasks2, ...\nimport rpqueue\n\nrpqueue.set_redis_connection_settings(host, port, db)\nrpqueue.execute_tasks()\n</pre>\n<p>Alternatively, rpqueue offers a command-line interface to do the same, though\nyou must provide the name of a module or package that imports all modules or\npackages that define tasks that you want to run. For example:</p>\n<pre># tasks.py\nfrom tasks import accounting, cleanup, ...\n# any other imports or configuration necessary, put them here\n\n# run from the command-line\npython -m rpqueue.run --module=tasks --host=... --port=... --db=...\n</pre>\n</div>\n<div id=\"example-uses\">\n<h2>Example uses</h2>\n<p>Say that you have a module <tt>usertasks1</tt> with a task to be executed called\n<tt>echo_to_stdout</tt>. Your module may look like the following:</p>\n<pre>from rpqueue import task\n\n@task\ndef echo_to_stdout(message):\n    print(message)\n</pre>\n<p>To call the above task, you would use:</p>\n<pre>echo_to_stdout.execute(...)\necho_to_stdout.execute(..., delay=delay_in_seconds)\n</pre>\n<p>You can also schedule a task to be repeatedly executed with the\n<tt>periodic_task</tt> decorator:</p>\n<pre>@periodic_task(25, queue=\"low\")\ndef function1():\n    # Will be executed every 25 seconds from within the 'low' queue.\n    pass\n</pre>\n</div>\n<div id=\"retries\">\n<h2>Retries</h2>\n<p>Tasks may be provided an optional <tt>attempts</tt> argument, which specifies the\ntotal number of times the task will try to be executed before failing. By\ndefault, all tasks have <tt>attempts</tt> set at 1, unless otherwise specified:</p>\n<pre>@task(attempts=3)\ndef fail_until_zero(value, **kwargs):\n    try:\n        if value != 0:\n            value -= 1\n            raise Exception\n    except:\n        fail_until_zero.retry(value, **kwargs)\n    else:\n        print \"succeeded\"\n</pre>\n<p>If passed the value <tt>3</tt>, \u201csucceeded\u201d will never be printed. Why? The first\ntry has value=3, attempts=3, and fails. The second pass has value=2,\nattempts=2, and fails. The third pass has value=1, attempts=1, fails, and the\nretry returns without retrying. The <tt>attempts</tt> value is the total number of\nattempts, including the first, and all retries.</p>\n<div id=\"automatic-retries-with-vis-timeout\">\n<h3>Automatic retries with vis_timeout</h3>\n<p>Included with rpqueue 0.30.0 or later, you can give tasks (and now data queues)\na visibility timeout, which is (per Amazon SQS-style semantics) a time for how\nlong the task has to execute correctly before being automatically re-entered\ninto the queue.:</p>\n<pre>@task(attempts=20, vis_timeout=5, use_dead=False)\ndef usually_eventually_succeed(**kwargs):\n    # (4/5)**20  is ~ 0.0115, so call chain fails about 1% of the time\n    if not random.randrange(5):\n        return \"done!\"\n\n    time.sleep(6) # fail silently\n</pre>\n</div>\n<div id=\"deadletter-task-queue\">\n<h3>Deadletter task queue</h3>\n<p>If you would like to know which tasks failed, failed calls can be automatically\nentered into a deadletter queue.:</p>\n<pre>@rpqueue.task(attempts=5, vis_timeout=5, use_dead=True)\ndef fails_to_dead(**kwargs):\n    # (4/5)**5  is 0.32768, so call chain fails about 33% of the time\n    if not random.randrange(5):\n        return \"done!\"\n\n    time.sleep(6) # fail silently\n\ntask_deadletter = rpqueue.Data(rpqueue.DEADLETTER_QUEUE, is_tasks=True)\ndead_tasks = task_deadletter.get_data(items=5)\n</pre>\n<p>See <tt>help(rpqueue.Data)</tt> for more.</p>\n</div>\n</div>\n<div id=\"waiting-for-task-execution\">\n<h2>Waiting for task execution</h2>\n<p>As of version .19, RPQueue offers the ability to wait on a task until it\nbegins execution:</p>\n<pre>@task\ndef my_task(args):\n    # do something\n\nexecuting_task = my_task.execute()\nif executing_task.wait(5):\n    # task is either being executed, or it is done\nelse:\n    # task has not started execution yet\n</pre>\n<p>With the ability to wait for a task to complete, you can have the ability to\nadd deadlines by inserting a call to <tt>executing_task.cancel()</tt> in the else\nblock above.</p>\n</div>\n<div id=\"automatically-storing-results-of-tasks\">\n<h2>Automatically storing results of tasks</h2>\n<p>As of version .19, RPQueue offers the ability to store the result returned by\na task as it completes:</p>\n<pre>@task(save_results=30)\ndef task_with_results():\n    return 5\n\netask = task_with_results.execute()\nif etask.wait(5):\n    print etask.result # should print 5\n</pre>\n<p>The <tt>save_results</tt> argument can be passed to tasks, periodic tasks, and even\ncron tasks (described below). The value passed will be how long the result is\nstored in Redis, in seconds. All results must be json-encodable.</p>\n</div>\n<div id=\"additional-features\">\n<h2>Additional features</h2>\n<div id=\"crontab\">\n<h3>Crontab</h3>\n<p>Support for cron_tasks using a crontab-like syntax requires the Python crontab\nmodule: <a href=\"http://pypi.python.org/pypi/crontab/\" rel=\"nofollow\">http://pypi.python.org/pypi/crontab/</a> , allowing for:</p>\n<pre>@cron_task('0 5 tue * *')\ndef function2():\n    # Will be executed every Tuesday at 5AM.\n    pass\n</pre>\n</div>\n<div id=\"data-queues\">\n<h3>Data queues</h3>\n<p>Put data in queues, not tasks. I mean, should have probably been here from the\nstart, but it\u2019s here now.</p>\n<dl>\n<dt>Convenient features:</dt>\n<dd><ul>\n<li>1-1000 data items per read, at your discretion</li>\n<li><tt>vis_timeout</tt></li>\n<li><tt>attempts</tt></li>\n<li><tt>use_dead</tt></li>\n<li>refresh data if you want to keep working on it (we don\u2019t identify the reader, so you should use an explicit lock if you want guaranteed exclusivity)</li>\n</ul>\n</dd>\n</dl>\n<p>A few examples:</p>\n<pre># 0/1 queue\ndq = rpqueue.Data('best_effort')\ndq.put_data([item1, item2, item3, ...])\nitems = dq.get_data(2) # {&lt;uuid&gt;: &lt;item&gt;, ...}\n\n# Up to 5 deliveries, with 5 second delay before re-insertion\ndq5 = rpqueue.Data('retry_processing', attempts=5, vis_timeout=5)\ndq5.put_data([item1, item2, item3, ...])\nitems = dq5.get_data(2) # {&lt;uuid&gt;: &lt;item&gt;, ...}\nitems2 = dq5.get_data(2, vis_timeout=20) # override timeout on read\nrefreshed = set(dq5.refresh_data(items, vis_timeout=7)) # refresh our lock\nitems = {k:v for k,v in items if k in refreshed}\ndq5.done_data(items)\ndq5.done_data(items2)\n\n# Up to 1 try with a 5 second delay before insertion into deadletter queue\ndqd = rpqueue.Data('retry_processing', attempts=1, vis_timeout=5, use_dead=True)\ndqd.put_data([item1, item2, item3, ...])\nitems = dqd.get_data(2) # {&lt;uuid&gt;: &lt;item&gt;, ...}\nitems2 = dqd.get_data(2, vis_timeout=20) # override timeout on read\nrefreshed = set(dqd.refresh_data(items, vis_timeout=7)) # refresh our lock\nitems = {k:v for k,v in items if k in refreshed}\ndqd.done_data(items)\ntime.sleep(20)\n# items2 are now \"dead\"\ndead = rpqueue.Data(rpqueue.DEADLETTER_QUEUE)\ndead_items = dead.get_data(2) # these have a different format, see docs!\n</pre>\n<p>A longer example closer to what would be seen in practice:</p>\n<pre>aggregate_queue = rpqueue.Data(\"aggregate_stats\", vis_timeout=30, use_dead=False)\n\n@rpqueue.periodic_task(60)\ndef aggregate():\n    # If vis_timeout is not provided, will use the queue default.\n    # If vis_timeout is &lt;= 0, will act as a 0/1 queue, and later \"done data\"\n    # calling is unnecessary.\n    data = aggregate_queue.get_data(items=100, vis_timeout=5)\n    # data is a dictionary: {&lt;uuid&gt;: &lt;item&gt;, &lt;uuid&gt;: &lt;item&gt;, ...}\n    # do something with data\n    done_with = []\n    for id, value in data.items():\n        # do something with value\n        done_with.append(id)\n\n    aggregate_queue.refresh_data(data) # still working!\n\n    # You can pass any iterator that naturally iterates over the uuids you\n    # want to be \"done\" with.\n    aggregate_queue.done_data(done_with)\n    # also okay:\n    # aggregate_queue.done_data(data)\n    # aggregate_queue.done_data(tuple(data))\n    # aggregate_queue.done_data(list(data))\n</pre>\n</div>\n</div>\n<div id=\"sponsors\">\n<h2>Sponsors</h2>\n<p>Don\u2019t like LGPL? Sponsor the project and get almost any license you want.</p>\n<p>This project has been partly sponsored by structd.com and hCaptcha.com, both of\nwhom received licenses that match their needs appropriately.</p>\n</div>\n\n          </div>"}, "last_serial": 5996973, "releases": {"0.21": [{"comment_text": "", "digests": {"md5": "e1fa0f5335996a2bf6f32c5b99c2510a", "sha256": "55dbe87b0c17af68a32466132c4d7a9d4ab1a56238daf99831df67bb9aec1e38"}, "downloads": -1, "filename": "rpqueue-0.21.tar.gz", "has_sig": false, "md5_digest": "e1fa0f5335996a2bf6f32c5b99c2510a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13988, "upload_time": "2013-09-20T07:09:36", "upload_time_iso_8601": "2013-09-20T07:09:36.238573Z", "url": "https://files.pythonhosted.org/packages/64/4a/f32a10a0c22eb47302a1858f5e8230a07f9e70c4dba1857ee57bbd14420b/rpqueue-0.21.tar.gz", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "78919ee27e93f518d4aa3d6043d05c75", "sha256": "c266e20dd841304cb824f504aec74e713fdafa100869b7148513dfc5680ef8ea"}, "downloads": -1, "filename": "rpqueue-0.22.tar.gz", "has_sig": false, "md5_digest": "78919ee27e93f518d4aa3d6043d05c75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14001, "upload_time": "2013-10-09T01:29:45", "upload_time_iso_8601": "2013-10-09T01:29:45.064839Z", "url": "https://files.pythonhosted.org/packages/a9/66/39d758cdd96bb77a43f5d98c73346f70f8d34c21ac6ccfff8e3e7ebc1b0d/rpqueue-0.22.tar.gz", "yanked": false}], "0.23": [{"comment_text": "", "digests": {"md5": "2f869ffed52607c6ac1c2060aa0c95b7", "sha256": "4958b288ebdb05eb555867f49677963a9b044f28140c2ed815c87775251bc996"}, "downloads": -1, "filename": "rpqueue-0.23.tar.gz", "has_sig": false, "md5_digest": "2f869ffed52607c6ac1c2060aa0c95b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14576, "upload_time": "2015-05-24T05:58:51", "upload_time_iso_8601": "2015-05-24T05:58:51.690475Z", "url": "https://files.pythonhosted.org/packages/51/aa/bd8156d871052cae5425c46ca7cc150ffef2f1fefbd021cf21758c26b1c6/rpqueue-0.23.tar.gz", "yanked": false}], "0.24.0": [{"comment_text": "", "digests": {"md5": "a0b09a1dd44af1c4793ff8d37490e5c0", "sha256": "93717b40f11d1467d48785237f4cb6c2a066b24c0673424b3f33fff75e98adf9"}, "downloads": -1, "filename": "rpqueue-0.24.0.tar.gz", "has_sig": false, "md5_digest": "a0b09a1dd44af1c4793ff8d37490e5c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14642, "upload_time": "2015-08-11T03:47:37", "upload_time_iso_8601": "2015-08-11T03:47:37.141881Z", "url": "https://files.pythonhosted.org/packages/26/61/78789359d0c436aa01981c439717d623e3c36b362ec19e5b23e6933c3d55/rpqueue-0.24.0.tar.gz", "yanked": false}], "0.24.1": [{"comment_text": "", "digests": {"md5": "1fafdef97197c8aebe5934bc1d73759a", "sha256": "9ece4f2733d1a884cd3c0543d4326037381dc84fa316be99428babbc34e6c51f"}, "downloads": -1, "filename": "rpqueue-0.24.1.tar.gz", "has_sig": false, "md5_digest": "1fafdef97197c8aebe5934bc1d73759a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13722, "upload_time": "2015-09-18T21:59:51", "upload_time_iso_8601": "2015-09-18T21:59:51.588605Z", "url": "https://files.pythonhosted.org/packages/96/f1/f2e268f96ef2a115dc2cc6d76c2b61c2eb89678f767a71b434a0cb14d1e9/rpqueue-0.24.1.tar.gz", "yanked": false}], "0.25.0": [{"comment_text": "", "digests": {"md5": "ffdf192cec808e9d086d54be39a29b03", "sha256": "4f5f78365ecf550debe425acb30a0e66735bea1d30891556e8b1878716d9dfb1"}, "downloads": -1, "filename": "rpqueue-0.25.0.tar.gz", "has_sig": false, "md5_digest": "ffdf192cec808e9d086d54be39a29b03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14636, "upload_time": "2016-03-21T05:42:56", "upload_time_iso_8601": "2016-03-21T05:42:56.900110Z", "url": "https://files.pythonhosted.org/packages/8b/f8/b40ed3bc6373596ffc8b3eb4aeced529eb4e506776db2f2a9c51f4a5b0a0/rpqueue-0.25.0.tar.gz", "yanked": false}], "0.25.1": [{"comment_text": "", "digests": {"md5": "4092adfb0fb3b54f82f88a7706166186", "sha256": "a006633529cc05446ec517cc3c89207c63fcc73db8893c77c8ae03d7e8c9b59f"}, "downloads": -1, "filename": "rpqueue-0.25.1.tar.gz", "has_sig": false, "md5_digest": "4092adfb0fb3b54f82f88a7706166186", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14635, "upload_time": "2016-03-21T06:20:16", "upload_time_iso_8601": "2016-03-21T06:20:16.945457Z", "url": "https://files.pythonhosted.org/packages/dd/d9/c25fc4413de6b664534968e32e45db07bc3f2ecbab97677b47edfcc0cf7e/rpqueue-0.25.1.tar.gz", "yanked": false}], "0.25.2": [{"comment_text": "", "digests": {"md5": "cac87a772bb76d779ffac3384fe5cd7f", "sha256": "f1e8f27b6a2ee16edf6d19bff74f13d068959195fd0a1e7ba723bcfb1159a140"}, "downloads": -1, "filename": "rpqueue-0.25.2.tar.gz", "has_sig": false, "md5_digest": "cac87a772bb76d779ffac3384fe5cd7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15555, "upload_time": "2016-03-26T04:54:40", "upload_time_iso_8601": "2016-03-26T04:54:40.337994Z", "url": "https://files.pythonhosted.org/packages/a6/22/4c49774b1bd7d48f69e31689bd5efa0a317f41140354b470f90f3d37b6a7/rpqueue-0.25.2.tar.gz", "yanked": false}], "0.25.5": [{"comment_text": "", "digests": {"md5": "335449c3268227e0717ae0d0fb20a413", "sha256": "63534f2ca2cebd39f037627129cb1d2d19b7e802b2810616c6f1a3b457278784"}, "downloads": -1, "filename": "rpqueue-0.25.5.tar.gz", "has_sig": false, "md5_digest": "335449c3268227e0717ae0d0fb20a413", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15588, "upload_time": "2016-03-28T17:34:31", "upload_time_iso_8601": "2016-03-28T17:34:31.082235Z", "url": "https://files.pythonhosted.org/packages/73/bf/9259e3c4dd82766d58a9d96d8e48dda9fe8bcd5d9038ce2e7d533e0b1a32/rpqueue-0.25.5.tar.gz", "yanked": false}], "0.25.6": [{"comment_text": "", "digests": {"md5": "2c68786f182149cc513e86316115f7b0", "sha256": "a9daaa9b82f0b28729bbb332d87ebb1e49ee74a8830445358f9913f923397f95"}, "downloads": -1, "filename": "rpqueue-0.25.6.tar.gz", "has_sig": false, "md5_digest": "2c68786f182149cc513e86316115f7b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15834, "upload_time": "2016-10-02T20:20:17", "upload_time_iso_8601": "2016-10-02T20:20:17.496195Z", "url": "https://files.pythonhosted.org/packages/82/99/615fa9826fefaab8850740bc82b2242362d91809decf35c314f3b01d0d74/rpqueue-0.25.6.tar.gz", "yanked": false}], "0.26.0": [{"comment_text": "", "digests": {"md5": "e7f79c86d594dbd9c710d801c08beaec", "sha256": "e918e2a912a7b672cba2b26307889dbde68f3dbf37c3e8886e152f8d9741c5ba"}, "downloads": -1, "filename": "rpqueue-0.26.0.tar.gz", "has_sig": false, "md5_digest": "e7f79c86d594dbd9c710d801c08beaec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16408, "upload_time": "2016-12-02T05:02:13", "upload_time_iso_8601": "2016-12-02T05:02:13.207982Z", "url": "https://files.pythonhosted.org/packages/ef/28/75ccceab53a6316f0ff55c230448e41c2a8917207611035998f89cc6f38c/rpqueue-0.26.0.tar.gz", "yanked": false}], "0.26.1": [{"comment_text": "", "digests": {"md5": "88fcf5c80b7813771eb1c560879df54b", "sha256": "61860bc315c6b3f1c5065f7b832210311383160880192f9b9865b3463dd4c4c3"}, "downloads": -1, "filename": "rpqueue-0.26.1.tar.gz", "has_sig": false, "md5_digest": "88fcf5c80b7813771eb1c560879df54b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16426, "upload_time": "2017-03-08T04:34:04", "upload_time_iso_8601": "2017-03-08T04:34:04.772411Z", "url": "https://files.pythonhosted.org/packages/4d/69/0f7152224385df000ac1648f37fbc03e35a1cae97783c3f5c3b32f05fcce/rpqueue-0.26.1.tar.gz", "yanked": false}], "0.27.0": [{"comment_text": "", "digests": {"md5": "b75c87ca026cbc2cf2b55fe874245a3e", "sha256": "04982efb3f815c79539ca1f5397d8fa17449b7d30accf887944ebce5925550f3"}, "downloads": -1, "filename": "rpqueue-0.27.0.tar.gz", "has_sig": false, "md5_digest": "b75c87ca026cbc2cf2b55fe874245a3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16426, "upload_time": "2017-06-05T04:31:03", "upload_time_iso_8601": "2017-06-05T04:31:03.236747Z", "url": "https://files.pythonhosted.org/packages/16/c0/c36e79047e6b12ec1678d2643de0b2ada8353f29175f0a7291e634e0656e/rpqueue-0.27.0.tar.gz", "yanked": false}], "0.27.1": [{"comment_text": "", "digests": {"md5": "5bf7ef81a97e817bc445ae9fa9db0373", "sha256": "58c112dec2c9b950ce59debf4ba144165cd6e2b417be6e358ad5f3caa0df41aa"}, "downloads": -1, "filename": "rpqueue-0.27.1.tar.gz", "has_sig": false, "md5_digest": "5bf7ef81a97e817bc445ae9fa9db0373", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16481, "upload_time": "2019-01-16T21:23:30", "upload_time_iso_8601": "2019-01-16T21:23:30.243856Z", "url": "https://files.pythonhosted.org/packages/f4/25/e7440ca059e301ca35e51b0d0e25808c4d2bb7ca8cbb132552606692e5ee/rpqueue-0.27.1.tar.gz", "yanked": false}], "0.30.0": [{"comment_text": "", "digests": {"md5": "e76d8c9807b403cf123b22c08765b746", "sha256": "a69755c58f7eaf4618748acbcf011ee9f107a43b362075a3433773b1111df04c"}, "downloads": -1, "filename": "rpqueue-0.30.0.tar.gz", "has_sig": false, "md5_digest": "e76d8c9807b403cf123b22c08765b746", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22524, "upload_time": "2019-07-30T17:26:47", "upload_time_iso_8601": "2019-07-30T17:26:47.822410Z", "url": "https://files.pythonhosted.org/packages/fa/32/71d63362591e64eac557ed468c4a4d1d54ca9595a760a8f8ea5d22f8ca8d/rpqueue-0.30.0.tar.gz", "yanked": false}], "0.30.1": [{"comment_text": "", "digests": {"md5": "2916502415ece3e6f7835e68273e8135", "sha256": "4df3d5ec90510d349ce849d85056ddd1eaaae6a6216c8385538a0e9c79869218"}, "downloads": -1, "filename": "rpqueue-0.30.1.tar.gz", "has_sig": false, "md5_digest": "2916502415ece3e6f7835e68273e8135", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22529, "upload_time": "2019-07-30T18:03:23", "upload_time_iso_8601": "2019-07-30T18:03:23.429423Z", "url": "https://files.pythonhosted.org/packages/69/40/95a5494b21e47713fbb266c4659f406d33886a218af3bb5e1ddaff0943be/rpqueue-0.30.1.tar.gz", "yanked": false}], "0.30.2": [{"comment_text": "", "digests": {"md5": "60f414ed09b9f09390b6f634e1267454", "sha256": "ed5c03618809b6f7a0769d72c0993a7a918b1452567aea626c7ee3b32427ff36"}, "downloads": -1, "filename": "rpqueue-0.30.2.tar.gz", "has_sig": false, "md5_digest": "60f414ed09b9f09390b6f634e1267454", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22633, "upload_time": "2019-08-05T18:44:33", "upload_time_iso_8601": "2019-08-05T18:44:33.923396Z", "url": "https://files.pythonhosted.org/packages/7a/46/70d98fd4db3e6b87f41af0968aaa0032f3a258b772f5cb952964a7f817d7/rpqueue-0.30.2.tar.gz", "yanked": false}], "0.30.3": [{"comment_text": "", "digests": {"md5": "dfc2087b384ca82a7c66c82503210283", "sha256": "4d610390c0e013eceaf3fb9d6135845848da6232eb6423a2928a7ff8d41afdc8"}, "downloads": -1, "filename": "rpqueue-0.30.3.tar.gz", "has_sig": false, "md5_digest": "dfc2087b384ca82a7c66c82503210283", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22627, "upload_time": "2019-08-05T18:49:26", "upload_time_iso_8601": "2019-08-05T18:49:26.251051Z", "url": "https://files.pythonhosted.org/packages/ed/b7/2aff9b6c8320051a8e296898aa154970dfe7c574526c9680d556b61f6458/rpqueue-0.30.3.tar.gz", "yanked": false}], "0.30.4": [{"comment_text": "", "digests": {"md5": "8ac968a795b43c071f9dbd8052c80317", "sha256": "22e379f005f336a6e6612415c3a2ed2a17f726f5575bca4e9bfea70b28b2d279"}, "downloads": -1, "filename": "rpqueue-0.30.4.tar.gz", "has_sig": false, "md5_digest": "8ac968a795b43c071f9dbd8052c80317", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22645, "upload_time": "2019-08-06T17:24:19", "upload_time_iso_8601": "2019-08-06T17:24:19.169724Z", "url": "https://files.pythonhosted.org/packages/bb/ae/bc33f188a5d7d9f97feb47d1931778cba392cc6a372c708da920b84ec166/rpqueue-0.30.4.tar.gz", "yanked": false}], "0.30.5": [{"comment_text": "", "digests": {"md5": "240950140a504159c104a2c4883ef79a", "sha256": "a168952901f49cb61246d3a75fa63f121e9fd4bf283418abbe8367812e7cce62"}, "downloads": -1, "filename": "rpqueue-0.30.5.tar.gz", "has_sig": false, "md5_digest": "240950140a504159c104a2c4883ef79a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22671, "upload_time": "2019-08-06T20:46:00", "upload_time_iso_8601": "2019-08-06T20:46:00.915777Z", "url": "https://files.pythonhosted.org/packages/59/09/4421fbdd8db33e5945ad9b9e871a76fe1896774701b3a095dce59a0c1c87/rpqueue-0.30.5.tar.gz", "yanked": false}], "0.30.6": [{"comment_text": "", "digests": {"md5": "b011b897ff9d60e254ea0486fb2ac510", "sha256": "173c0f4b83bb8274b66f15e1a563815cd8705004cc8ab375cafdb48b721e96ac"}, "downloads": -1, "filename": "rpqueue-0.30.6.tar.gz", "has_sig": false, "md5_digest": "b011b897ff9d60e254ea0486fb2ac510", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22665, "upload_time": "2019-08-07T18:40:37", "upload_time_iso_8601": "2019-08-07T18:40:37.524256Z", "url": "https://files.pythonhosted.org/packages/9c/58/9a712baa8d4494a143ecd8103966303702bc13049619ed1562e6e99d921c/rpqueue-0.30.6.tar.gz", "yanked": false}], "0.31.0": [{"comment_text": "", "digests": {"md5": "6f2585308a2fd486125cfcc57ea8b353", "sha256": "959aafc1f54bd919dda88e328059941b2c066e0e74cc2c82e96b863e773cb3e0"}, "downloads": -1, "filename": "rpqueue-0.31.0.tar.gz", "has_sig": false, "md5_digest": "6f2585308a2fd486125cfcc57ea8b353", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22689, "upload_time": "2019-08-08T00:54:53", "upload_time_iso_8601": "2019-08-08T00:54:53.252084Z", "url": "https://files.pythonhosted.org/packages/fd/63/e4b0a199c25fdd60b8052bc9fe3841a06d257fdf2f472381a9ec4e0f94ec/rpqueue-0.31.0.tar.gz", "yanked": false}], "0.31.1": [{"comment_text": "", "digests": {"md5": "38e203a8bf17dcf36c2e7e04a86351c2", "sha256": "e961609517b46a2813519ce4c99e6e4d2d7bd4a5c52b1743e087868bfa41e249"}, "downloads": -1, "filename": "rpqueue-0.31.1.tar.gz", "has_sig": false, "md5_digest": "38e203a8bf17dcf36c2e7e04a86351c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22691, "upload_time": "2019-08-08T16:46:52", "upload_time_iso_8601": "2019-08-08T16:46:52.535460Z", "url": "https://files.pythonhosted.org/packages/e7/40/2cea8002e5b8da74555275f96d8a7c7e2d4875746287549319101ec529ed/rpqueue-0.31.1.tar.gz", "yanked": false}], "0.31.2": [{"comment_text": "", "digests": {"md5": "5c8e59638c482cc0d40358bfc5c9b098", "sha256": "05bc0a2b018402e58e5dd898eae560194f935d0cd56ae8bfe0aa14fbea577c2a"}, "downloads": -1, "filename": "rpqueue-0.31.2.tar.gz", "has_sig": false, "md5_digest": "5c8e59638c482cc0d40358bfc5c9b098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22776, "upload_time": "2019-09-18T22:17:14", "upload_time_iso_8601": "2019-09-18T22:17:14.229435Z", "url": "https://files.pythonhosted.org/packages/81/14/4d0aaffebcb51350d1d8f7e546e0af16832fcffa1f5a2c938fe4a66e7338/rpqueue-0.31.2.tar.gz", "yanked": false}], "0.32.0": [{"comment_text": "", "digests": {"md5": "79991e7ff7523e36eb8386f84a721e66", "sha256": "d4ce78db136db799cd2ba33d01ddeb897917f606242c29ede812a72f1fc48a34"}, "downloads": -1, "filename": "rpqueue-0.32.0.tar.gz", "has_sig": false, "md5_digest": "79991e7ff7523e36eb8386f84a721e66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23925, "upload_time": "2019-09-24T17:57:13", "upload_time_iso_8601": "2019-09-24T17:57:13.689885Z", "url": "https://files.pythonhosted.org/packages/c9/7a/9d495d82630bc88e449e2efdb1546fd853e0f2fd17202d751024eb1cac3d/rpqueue-0.32.0.tar.gz", "yanked": false}], "0.32.1": [{"comment_text": "", "digests": {"md5": "c5bdf7ebcd3c70547a17b5cc5e4c2fb1", "sha256": "3e2e298145823130ccdb2e326d16c25fd6049458692833daf42e5e87ed1d2da2"}, "downloads": -1, "filename": "rpqueue-0.32.1.tar.gz", "has_sig": false, "md5_digest": "c5bdf7ebcd3c70547a17b5cc5e4c2fb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24090, "upload_time": "2019-09-25T22:20:57", "upload_time_iso_8601": "2019-09-25T22:20:57.702212Z", "url": "https://files.pythonhosted.org/packages/13/00/da6c7dbc0daf453c6d2c0a3b9e4002c2ddfd2b083de45dfd17184cd5787a/rpqueue-0.32.1.tar.gz", "yanked": false}], "0.33.0": [{"comment_text": "", "digests": {"md5": "9f9ffedbb8bb2b433b7235dc3ba740b9", "sha256": "6df027134715ca187825f952f61fbc6897f48ae4f7cd84fee5e8977a8ce84af6"}, "downloads": -1, "filename": "rpqueue-0.33.0.tar.gz", "has_sig": false, "md5_digest": "9f9ffedbb8bb2b433b7235dc3ba740b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26324, "upload_time": "2019-10-14T19:11:26", "upload_time_iso_8601": "2019-10-14T19:11:26.044856Z", "url": "https://files.pythonhosted.org/packages/e9/0d/55d51d92c1d3e2fcab9eb985ce15cfb74a1fdd0b86d000b56b35d633199a/rpqueue-0.33.0.tar.gz", "yanked": false}], "0.33.1": [{"comment_text": "", "digests": {"md5": "7e61ad86f620fa27fd07cee122443b9c", "sha256": "444a1360f8b217371e10f2bb9c801db04d64c8ee5445f1a9fcbfec8093e074ac"}, "downloads": -1, "filename": "rpqueue-0.33.1.tar.gz", "has_sig": false, "md5_digest": "7e61ad86f620fa27fd07cee122443b9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26305, "upload_time": "2019-10-15T21:22:25", "upload_time_iso_8601": "2019-10-15T21:22:25.030808Z", "url": "https://files.pythonhosted.org/packages/66/46/c9a3c960c2a1d0d3d88b1595dd5a716a307c6ddffcd9fa2cd477f039c543/rpqueue-0.33.1.tar.gz", "yanked": false}], "0.33.2": [{"comment_text": "", "digests": {"md5": "ed52b7893d1bccd76918b86f386b3adc", "sha256": "2a9275387417ebe6fc2abc9b3fa40dbe9049dd6b57c1e6faeaef071783b534d3"}, "downloads": -1, "filename": "rpqueue-0.33.2.tar.gz", "has_sig": false, "md5_digest": "ed52b7893d1bccd76918b86f386b3adc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26313, "upload_time": "2019-10-18T18:33:07", "upload_time_iso_8601": "2019-10-18T18:33:07.056490Z", "url": "https://files.pythonhosted.org/packages/e2/bb/23f5de839a0bd35d6652aa9ec21b153de9f2fb8f460d67b3547beefc8f11/rpqueue-0.33.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed52b7893d1bccd76918b86f386b3adc", "sha256": "2a9275387417ebe6fc2abc9b3fa40dbe9049dd6b57c1e6faeaef071783b534d3"}, "downloads": -1, "filename": "rpqueue-0.33.2.tar.gz", "has_sig": false, "md5_digest": "ed52b7893d1bccd76918b86f386b3adc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26313, "upload_time": "2019-10-18T18:33:07", "upload_time_iso_8601": "2019-10-18T18:33:07.056490Z", "url": "https://files.pythonhosted.org/packages/e2/bb/23f5de839a0bd35d6652aa9ec21b153de9f2fb8f460d67b3547beefc8f11/rpqueue-0.33.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:50 2020"}