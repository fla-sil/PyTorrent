{"info": {"author": "Jaime Sanchez (@segofensiva), moonbaseDelta", "author_email": "jsanchez@seguridadofensiva.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Security", "Topic :: System :: Networking"], "description": "<p align=\"center\">\n<img width=\"256\" src=\"https://i.ibb.co/DLnNK9J/268497.png\">\n</p>\n<br>\n\n# OSfooler-NG\n [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n![Version: 1.0b](https://img.shields.io/badge/version-1.0b-blue.svg)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-blue.svg)](https://GitHub.com/segofensiva/OSfooler-ng/graphs/commit-activity)\n\n# Synopsis\n\nCheck [original repo](https://pypi.org/project/NetfilterQueue/0.8.1/) for info and stuff. \nYou may also be interested of the OSfooler-ng author's speech at [DEF CON 27](https://www.defcon.org/) (running at Aug 8-11 2019)\n\nThis fork based on change of Python's nfqueue (NetfilterQueue) version from 0.5 to 0.8.1 for the sake of run the OSfooler-ng on different distros, not just deb-based.\n\n**You may help hugely by trying this on different distros.**\nBy now it's been tested fine on Arch and CentOS7.\n\n\n\n# Install\nTo get this version, just use git:\n```\n$ git clone https://github.com/moonbaseDelta/OSfooler-ng.git\n```\n\n\nYou need to install python NetfilterQueue (v0.8.1 or more) linux package. Download from [PyPi](https://pypi.org/project/NetfilterQueue/0.8.1/):\n``` \n$ wget https://files.pythonhosted.org/packages/39/c4/8f73f70442aa4094b3c37876c96cddad2c3e74c058f6cd9cb017d37ffac0/NetfilterQueue-0.8.1.tar.gz\n$ tar -xzf NetfilterQueue-0.8.1.tar.gz\n$ cd NetfilterQueue-0.8.1\n$ sudo python setup.py install\n```\nor try: \n```\n$ pip install NetfilterQueue\n```\n\nInstall OSfooler-ng in the standard way:\n```\n$ sudo python setup.py install\n```\n\n\n## Known issues \nNo such device IO error (error code 19): \n  * By default program uses 'eth0' interface that may not be even exist on your machine\n  * Find your main TCP/IP interface (you can find it by 'ip a' command)\n  * Run OSfooler-ng commands with:\n```\n$ <osfooler command> -i 'YOURINTERFACE'\n```\n\n\n# Usage\n## Active Fingerprinting: nmap\nTo get the full list of OS to emulate, just use the flag '-n':\n```\n$ osfooler-ng -n\n [+] Please, select nmap OS to emulate\n    + \"2N Helios IP VoIP doorbell\"\n    + \"2Wire BT2700HG-V ADSL modem\"\n    + \"2Wire 1701HG wireless ADSL modem\"\n    [...]\n    + \"ZyXEL Prestige 660HW-61 ADSL router (ZyNOS 3.40)\"\n    + \"ZyXEL Prestige 660HW-D1 wireless ADSL router\"\n    + \"ZyXEL ZyWALL 2 Plus firewall\"\n```\n\nTo emulate an specific OS, just use the flag '-o' with the OS you want to emulate:\n```\n$ osfooler-ng -m \"Sony Ericsson W705 or W715 Walkman mobile phone\"\n [+] Mutating to nmap:\n      Fingerprint Sony Ericsson W705 or W715 Walkman mobile phone\n      Class Sony Ericsson | embedded || phone\n      CPE cpe:/h:sonyericsson:w705\n      CPE cpe:/h:sonyericsson:w715\n      SEQ(CI=RD%II=I)\n      OPS(R=N)\n      WIN(R=N)\n      ECN(R=N)\n      T1(R=N)\n      T2(R=Y%DF=N%T=3B-45%TG=40%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)\n      T3(R=N)\n      T4(R=Y%DF=N%T=3B-45%TG=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n      T5(R=Y%DF=N%T=3B-45%TG=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)\n      T6(R=Y%DF=N%T=3B-45%TG=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n      T7(R=Y%DF=N%T=3B-45%TG=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)\n      U1(DF=N%T=3B-45%TG=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)\n      IE(DFI=N%T=3B-45%TG=40%CD=S)\n [+] Activating queues\n      [->] Process-1: nmap packet processor\n```\n\n## Passive Fingerprinting: p0f v2\nTo get the full list of OS to emulate, just use the flag '-l':\n```\n$ osfooler-ng -p \nPlease, select p0f OS Genre and Details\n        OS Genre=\"AIX\" Details=\"4.3\"\n        OS Genre=\"AIX\" Details=\"4.3.2 and earlier\"\n        OS Genre=\"AIX\" Details=\"4.3.3-5.2 (1)\"\n        [...]\n        OS Genre=\"-*NMAP\" Details=\"OS detection probe w/flags (3)\"\n        OS Genre=\"-*NMAP\" Details=\"OS detection probe w/flags (4)\"\n        OS Genre=\"-*NAST\" Details=\"syn scan\"\n```\n\nTo emulate any p0f OS, just use the flag '-o' with the OS Genre. This will choose the main OS and custom version will be randomly loaded when a SYN packet is detected. For example:\n```\n$ osfooler-ng -o \"PalmOS\"\n [+] Mutating to p0f:\n      WWW:S9|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:Tungsten T3/C\n      WWW:S5|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:3/4\n      WWW:S4|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:3.5\n      WWW:2948|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:3.5.3 (Handera)\n      WWW:S29|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:5.0\n      WWW:16384|TTL:255|D:0|SS:44|OOO:M1398|QQ:.|OS:PalmOS|DETAILS:5.2 (Clie)\n      WWW:S14|TTL:255|D:0|SS:44|OOO:M1350|QQ:.|OS:PalmOS|DETAILS:5.2.1 (Treo)\n      WWW:16384|TTL:255|D:0|SS:44|OOO:M1400|QQ:.|OS:PalmOS|DETAILS:5.2 (Sony)\n [+] Activating queues\n      [->] Process-1: p0f packet processor\n```\n\n You can also emulate the full p0f OS, using '-' with the OS Genre and '-d' with custom details:\n ```\n $ osfooler-ng -o \"Windows\" -d \"XP bare-bone\"\n  [+] Mutating to p0f:\n      WWW:65520|TTL:128|D:1|SS:48|OOO:M*,N,N,S|QQ:.|OS:Windows|DETAILS:XP bare-bone\n [+] Activating queues\n      [->] Process-1: p0f packet processor\n ```\n\n## Active and Passive Fingerprinting: nmap & p0f\nOSfooler-ng is also capable os emulating both OS to defeat nmap and p0f. Just combine the parameters above:\n```\n$ osfooler-ng -m \"Microsoft Windows 2000 SP4\" -o \"Windows\" -d \"2000 SP4\"\n [+] Mutating to nmap:\n      Fingerprint Microsoft Windows 2000 SP4\n      Class Microsoft | Windows | 2000 | general purpose\n      CPE cpe:/o:microsoft:windows_2000::sp4\n      SEQ(SP=7C-86%GCD=1-6%ISR=95-9F%TI=I%II=I%SS=O|S%TS=0)\n      OPS(O1=NNT11|M5B4NW0NNT00NNS%O2=NNT11|M5B4NW0NNT00NNS%O3=NNT11|M5B4NW0NNT00%O4=NNT11|M5B4NW0NNT00NNS%O5=NNT11|M5B4NW0NNT00NNS%O6=NNT11|M5B4NNT00NNS)\n      WIN(W1=FFFF%W2=FFFF%W3=FFFF%W4=FFFF%W5=FFFF%W6=FFFF)\n      ECN(R=Y%DF=N%T=7B-85%TG=80%W=0%O=%CC=N%Q=U)\n      T1(R=Y%DF=Y%T=7B-85%TG=80%S=O%A=O|S+%F=A|AS%RD=0%Q=|U)\n      T2(R=Y%DF=N%T=7B-85%TG=80%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=U)\n      T3(R=Y%DF=N%T=7B-85%TG=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=U)\n      T4(R=Y%DF=N%T=7B-85%TG=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=U)\n      T5(R=Y%DF=N%T=7B-85%TG=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=U)\n      T6(R=Y%DF=N%T=7B-85%TG=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=U)\n      T7(R=Y%DF=N%T=7B-85%TG=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=U)\n      U1(DF=N%T=7B-85%TG=80%IPL=38%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)\n      IE(DFI=S%T=7B-85%TG=80%CD=Z)\n [+] Mutating to p0f:\n      WWW:40320|TTL:128|D:1|SS:48|OOO:M*,N,N,S|QQ:.|OS:Windows|DETAILS:2000 SP4\n [+] Activating queues\n      [->] Process-1: nmap packet processor\n      [->] Process-2: p0f packet processor\n```\n\n## Searching for Operating Systems\nYou can search inside nmap/p0f database for a specific OS, instead of getting the whole list. Just use the flag '-s' and enter the keyword you want to search for (case insensitive). You'll get any match found, and if it belongs to nmap or p0f databases:\n```\n$ osfooler-ng -s playstation\n [+] Searching databases for: 'playstation'\n      [nmap] \"Sony Playstation 4 or FreeBSD 10.2-RELEASE\"\n      [nmap] \"Sony PlayStation 2 game console test kit 2.2.1\"\n      [nmap] \"Sony PlayStation 3 game console\"\n      [nmap] \"Sony PlayStation 3 game console test kit\"\n      [nmap] \"Sony PlayStation 2 game console\"\n      [p0f] OS: \"Sony\" DETAILS: \"Playstation 2 (SOCOM?)\"\n```\n\n## Update nmap database\nUse the flag '-u' to check if there's a new version of nmap's database avaiable and to download it\n```\n$ osfooler-ng -u\n [+] Checking nmap database... latest!\n```\n\n## Custom flags\nThere are other interesting flags:\n  * '-v': Show info about every modified packet\n  * '-i <interface>': Choose network interface (eth0 by default)\n  * '-V': Show OSfooler-ng banner and current version installed\n\n# Authors\n* **[Jaime S\u00e1nchez](https://www.seguridadofensiva.com) ([@segofensiva)](https://twitter.com/segofensiva)**\n\n# License\n\nThis project is licensed under the The **GNU General Public License v3.0** - see the [LICENSE.md](LICENSE.md) file for details\n\n# Acknowledgments\n\n* https://github.com/segofensiva/OSfooler-ng#acknowledgments\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/moonbaseDelta/OSfooler-ng", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "OSfooler-ng-openwrt", "package_url": "https://pypi.org/project/OSfooler-ng-openwrt/", "platform": "", "project_url": "https://pypi.org/project/OSfooler-ng-openwrt/", "project_urls": {"Homepage": "https://github.com/moonbaseDelta/OSfooler-ng"}, "release_url": "https://pypi.org/project/OSfooler-ng-openwrt/1.1/", "requires_dist": ["dpkt", "scapy"], "requires_python": "", "summary": "OSfooler-ng prevents remote OS active/passive fingerprinting by tools like nmap or p0f. This fork based on change of Python nfqueue (NetfilterQueue) version from 0.5 to 0.8.1 for the sake of run the OSfooler-ng on different distros, not just deb-based.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e90d3bcc6838b2cd170125a9846d3e2182e092d/68747470733a2f2f692e6962622e636f2f444c6e4e4b394a2f3236383439372e706e67\" width=\"256\">\n</p>\n<br>\n<h1>OSfooler-NG</h1>\n<p><a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></a>\n<img alt=\"Version: 1.0b\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07925ee56cdcf17e7f371556a9c2b4582c59ffeb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d312e30622d626c75652e737667\">\n<a href=\"https://GitHub.com/segofensiva/OSfooler-ng/graphs/commit-activity\" rel=\"nofollow\"><img alt=\"Maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7cc6bd63f11d492ce23ae6d3fcbde7c9e8a4b5f8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d7965732d626c75652e737667\"></a></p>\n<h1>Synopsis</h1>\n<p>Check <a href=\"https://pypi.org/project/NetfilterQueue/0.8.1/\" rel=\"nofollow\">original repo</a> for info and stuff.\nYou may also be interested of the OSfooler-ng author's speech at <a href=\"https://www.defcon.org/\" rel=\"nofollow\">DEF CON 27</a> (running at Aug 8-11 2019)</p>\n<p>This fork based on change of Python's nfqueue (NetfilterQueue) version from 0.5 to 0.8.1 for the sake of run the OSfooler-ng on different distros, not just deb-based.</p>\n<p><strong>You may help hugely by trying this on different distros.</strong>\nBy now it's been tested fine on Arch and CentOS7.</p>\n<h1>Install</h1>\n<p>To get this version, just use git:</p>\n<pre><code>$ git clone https://github.com/moonbaseDelta/OSfooler-ng.git\n</code></pre>\n<p>You need to install python NetfilterQueue (v0.8.1 or more) linux package. Download from <a href=\"https://pypi.org/project/NetfilterQueue/0.8.1/\" rel=\"nofollow\">PyPi</a>:</p>\n<pre><code>$ wget https://files.pythonhosted.org/packages/39/c4/8f73f70442aa4094b3c37876c96cddad2c3e74c058f6cd9cb017d37ffac0/NetfilterQueue-0.8.1.tar.gz\n$ tar -xzf NetfilterQueue-0.8.1.tar.gz\n$ cd NetfilterQueue-0.8.1\n$ sudo python setup.py install\n</code></pre>\n<p>or try:</p>\n<pre><code>$ pip install NetfilterQueue\n</code></pre>\n<p>Install OSfooler-ng in the standard way:</p>\n<pre><code>$ sudo python setup.py install\n</code></pre>\n<h2>Known issues</h2>\n<p>No such device IO error (error code 19):</p>\n<ul>\n<li>By default program uses 'eth0' interface that may not be even exist on your machine</li>\n<li>Find your main TCP/IP interface (you can find it by 'ip a' command)</li>\n<li>Run OSfooler-ng commands with:</li>\n</ul>\n<pre><code>$ &lt;osfooler command&gt; -i 'YOURINTERFACE'\n</code></pre>\n<h1>Usage</h1>\n<h2>Active Fingerprinting: nmap</h2>\n<p>To get the full list of OS to emulate, just use the flag '-n':</p>\n<pre><code>$ osfooler-ng -n\n [+] Please, select nmap OS to emulate\n    + \"2N Helios IP VoIP doorbell\"\n    + \"2Wire BT2700HG-V ADSL modem\"\n    + \"2Wire 1701HG wireless ADSL modem\"\n    [...]\n    + \"ZyXEL Prestige 660HW-61 ADSL router (ZyNOS 3.40)\"\n    + \"ZyXEL Prestige 660HW-D1 wireless ADSL router\"\n    + \"ZyXEL ZyWALL 2 Plus firewall\"\n</code></pre>\n<p>To emulate an specific OS, just use the flag '-o' with the OS you want to emulate:</p>\n<pre><code>$ osfooler-ng -m \"Sony Ericsson W705 or W715 Walkman mobile phone\"\n [+] Mutating to nmap:\n      Fingerprint Sony Ericsson W705 or W715 Walkman mobile phone\n      Class Sony Ericsson | embedded || phone\n      CPE cpe:/h:sonyericsson:w705\n      CPE cpe:/h:sonyericsson:w715\n      SEQ(CI=RD%II=I)\n      OPS(R=N)\n      WIN(R=N)\n      ECN(R=N)\n      T1(R=N)\n      T2(R=Y%DF=N%T=3B-45%TG=40%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)\n      T3(R=N)\n      T4(R=Y%DF=N%T=3B-45%TG=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n      T5(R=Y%DF=N%T=3B-45%TG=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)\n      T6(R=Y%DF=N%T=3B-45%TG=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)\n      T7(R=Y%DF=N%T=3B-45%TG=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)\n      U1(DF=N%T=3B-45%TG=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)\n      IE(DFI=N%T=3B-45%TG=40%CD=S)\n [+] Activating queues\n      [-&gt;] Process-1: nmap packet processor\n</code></pre>\n<h2>Passive Fingerprinting: p0f v2</h2>\n<p>To get the full list of OS to emulate, just use the flag '-l':</p>\n<pre><code>$ osfooler-ng -p \nPlease, select p0f OS Genre and Details\n        OS Genre=\"AIX\" Details=\"4.3\"\n        OS Genre=\"AIX\" Details=\"4.3.2 and earlier\"\n        OS Genre=\"AIX\" Details=\"4.3.3-5.2 (1)\"\n        [...]\n        OS Genre=\"-*NMAP\" Details=\"OS detection probe w/flags (3)\"\n        OS Genre=\"-*NMAP\" Details=\"OS detection probe w/flags (4)\"\n        OS Genre=\"-*NAST\" Details=\"syn scan\"\n</code></pre>\n<p>To emulate any p0f OS, just use the flag '-o' with the OS Genre. This will choose the main OS and custom version will be randomly loaded when a SYN packet is detected. For example:</p>\n<pre><code>$ osfooler-ng -o \"PalmOS\"\n [+] Mutating to p0f:\n      WWW:S9|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:Tungsten T3/C\n      WWW:S5|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:3/4\n      WWW:S4|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:3.5\n      WWW:2948|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:3.5.3 (Handera)\n      WWW:S29|TTL:255|D:0|SS:44|OOO:M536|QQ:.|OS:PalmOS|DETAILS:5.0\n      WWW:16384|TTL:255|D:0|SS:44|OOO:M1398|QQ:.|OS:PalmOS|DETAILS:5.2 (Clie)\n      WWW:S14|TTL:255|D:0|SS:44|OOO:M1350|QQ:.|OS:PalmOS|DETAILS:5.2.1 (Treo)\n      WWW:16384|TTL:255|D:0|SS:44|OOO:M1400|QQ:.|OS:PalmOS|DETAILS:5.2 (Sony)\n [+] Activating queues\n      [-&gt;] Process-1: p0f packet processor\n</code></pre>\n<p>You can also emulate the full p0f OS, using '-' with the OS Genre and '-d' with custom details:</p>\n<pre><code>$ osfooler-ng -o \"Windows\" -d \"XP bare-bone\"\n [+] Mutating to p0f:\n     WWW:65520|TTL:128|D:1|SS:48|OOO:M*,N,N,S|QQ:.|OS:Windows|DETAILS:XP bare-bone\n[+] Activating queues\n     [-&gt;] Process-1: p0f packet processor\n</code></pre>\n<h2>Active and Passive Fingerprinting: nmap &amp; p0f</h2>\n<p>OSfooler-ng is also capable os emulating both OS to defeat nmap and p0f. Just combine the parameters above:</p>\n<pre><code>$ osfooler-ng -m \"Microsoft Windows 2000 SP4\" -o \"Windows\" -d \"2000 SP4\"\n [+] Mutating to nmap:\n      Fingerprint Microsoft Windows 2000 SP4\n      Class Microsoft | Windows | 2000 | general purpose\n      CPE cpe:/o:microsoft:windows_2000::sp4\n      SEQ(SP=7C-86%GCD=1-6%ISR=95-9F%TI=I%II=I%SS=O|S%TS=0)\n      OPS(O1=NNT11|M5B4NW0NNT00NNS%O2=NNT11|M5B4NW0NNT00NNS%O3=NNT11|M5B4NW0NNT00%O4=NNT11|M5B4NW0NNT00NNS%O5=NNT11|M5B4NW0NNT00NNS%O6=NNT11|M5B4NNT00NNS)\n      WIN(W1=FFFF%W2=FFFF%W3=FFFF%W4=FFFF%W5=FFFF%W6=FFFF)\n      ECN(R=Y%DF=N%T=7B-85%TG=80%W=0%O=%CC=N%Q=U)\n      T1(R=Y%DF=Y%T=7B-85%TG=80%S=O%A=O|S+%F=A|AS%RD=0%Q=|U)\n      T2(R=Y%DF=N%T=7B-85%TG=80%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=U)\n      T3(R=Y%DF=N%T=7B-85%TG=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=U)\n      T4(R=Y%DF=N%T=7B-85%TG=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=U)\n      T5(R=Y%DF=N%T=7B-85%TG=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=U)\n      T6(R=Y%DF=N%T=7B-85%TG=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=U)\n      T7(R=Y%DF=N%T=7B-85%TG=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=U)\n      U1(DF=N%T=7B-85%TG=80%IPL=38%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)\n      IE(DFI=S%T=7B-85%TG=80%CD=Z)\n [+] Mutating to p0f:\n      WWW:40320|TTL:128|D:1|SS:48|OOO:M*,N,N,S|QQ:.|OS:Windows|DETAILS:2000 SP4\n [+] Activating queues\n      [-&gt;] Process-1: nmap packet processor\n      [-&gt;] Process-2: p0f packet processor\n</code></pre>\n<h2>Searching for Operating Systems</h2>\n<p>You can search inside nmap/p0f database for a specific OS, instead of getting the whole list. Just use the flag '-s' and enter the keyword you want to search for (case insensitive). You'll get any match found, and if it belongs to nmap or p0f databases:</p>\n<pre><code>$ osfooler-ng -s playstation\n [+] Searching databases for: 'playstation'\n      [nmap] \"Sony Playstation 4 or FreeBSD 10.2-RELEASE\"\n      [nmap] \"Sony PlayStation 2 game console test kit 2.2.1\"\n      [nmap] \"Sony PlayStation 3 game console\"\n      [nmap] \"Sony PlayStation 3 game console test kit\"\n      [nmap] \"Sony PlayStation 2 game console\"\n      [p0f] OS: \"Sony\" DETAILS: \"Playstation 2 (SOCOM?)\"\n</code></pre>\n<h2>Update nmap database</h2>\n<p>Use the flag '-u' to check if there's a new version of nmap's database avaiable and to download it</p>\n<pre><code>$ osfooler-ng -u\n [+] Checking nmap database... latest!\n</code></pre>\n<h2>Custom flags</h2>\n<p>There are other interesting flags:</p>\n<ul>\n<li>'-v': Show info about every modified packet</li>\n<li>'-i &lt;interface&gt;': Choose network interface (eth0 by default)</li>\n<li>'-V': Show OSfooler-ng banner and current version installed</li>\n</ul>\n<h1>Authors</h1>\n<ul>\n<li><strong><a href=\"https://www.seguridadofensiva.com\" rel=\"nofollow\">Jaime S\u00e1nchez</a> (<a href=\"https://twitter.com/segofensiva\" rel=\"nofollow\">@segofensiva)</a></strong></li>\n</ul>\n<h1>License</h1>\n<p>This project is licensed under the The <strong>GNU General Public License v3.0</strong> - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details</p>\n<h1>Acknowledgments</h1>\n<ul>\n<li><a href=\"https://github.com/segofensiva/OSfooler-ng#acknowledgments\" rel=\"nofollow\">https://github.com/segofensiva/OSfooler-ng#acknowledgments</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6554429, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "58cdd6fd7054da035561118101d3f2cc", "sha256": "959bafcee5daad1b1c1b99c8547e3fa30bf6f874e5449e2a63fbed87cbb15e9f"}, "downloads": -1, "filename": "OSfooler_ng_openwrt-1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "58cdd6fd7054da035561118101d3f2cc", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 595711, "upload_time": "2020-02-01T14:37:44", "upload_time_iso_8601": "2020-02-01T14:37:44.495569Z", "url": "https://files.pythonhosted.org/packages/f3/98/cd76b8478e822c1f004320f97dda1820025584803801585d9d7f7e083713/OSfooler_ng_openwrt-1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "063fc0bc75c9af02a10e64033230e5cc", "sha256": "66c803a4a8640776b22d33e7281e9fea3eb087430ee9b09be66b4104b54e16dd"}, "downloads": -1, "filename": "OSfooler-ng-openwrt-1.1.tar.gz", "has_sig": false, "md5_digest": "063fc0bc75c9af02a10e64033230e5cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 587193, "upload_time": "2020-02-01T14:37:49", "upload_time_iso_8601": "2020-02-01T14:37:49.971945Z", "url": "https://files.pythonhosted.org/packages/ec/d3/b64300166b67764ea67e217d7f3176979c134c7da77376c364c9331b27dc/OSfooler-ng-openwrt-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58cdd6fd7054da035561118101d3f2cc", "sha256": "959bafcee5daad1b1c1b99c8547e3fa30bf6f874e5449e2a63fbed87cbb15e9f"}, "downloads": -1, "filename": "OSfooler_ng_openwrt-1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "58cdd6fd7054da035561118101d3f2cc", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 595711, "upload_time": "2020-02-01T14:37:44", "upload_time_iso_8601": "2020-02-01T14:37:44.495569Z", "url": "https://files.pythonhosted.org/packages/f3/98/cd76b8478e822c1f004320f97dda1820025584803801585d9d7f7e083713/OSfooler_ng_openwrt-1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "063fc0bc75c9af02a10e64033230e5cc", "sha256": "66c803a4a8640776b22d33e7281e9fea3eb087430ee9b09be66b4104b54e16dd"}, "downloads": -1, "filename": "OSfooler-ng-openwrt-1.1.tar.gz", "has_sig": false, "md5_digest": "063fc0bc75c9af02a10e64033230e5cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 587193, "upload_time": "2020-02-01T14:37:49", "upload_time_iso_8601": "2020-02-01T14:37:49.971945Z", "url": "https://files.pythonhosted.org/packages/ec/d3/b64300166b67764ea67e217d7f3176979c134c7da77376c364c9331b27dc/OSfooler-ng-openwrt-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:19 2020"}