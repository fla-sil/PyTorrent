{"info": {"author": "Julian Berman", "author_email": "Julian@GrayVines.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "==========\njsonschema\n==========\n\n|PyPI| |Pythons| |Travis| |AppVeyor|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg\n   :alt: PyPI version\n   :target: https://pypi.python.org/pypi/jsonschema\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg\n   :alt: Supported Python versions\n   :target: https://pypi.python.org/pypi/jsonschema\n\n.. |Travis| image:: https://travis-ci.org/Julian/jsonschema.svg?branch=master\n   :alt: Travis build status\n   :target: https://travis-ci.org/Julian/jsonschema\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/adtt0aiaihy6muyn?svg=true\n   :alt: AppVeyor build status\n   :target: https://ci.appveyor.com/project/Julian/jsonschema\n\n\n``jsonschema`` is an implementation of `JSON Schema <http://json-schema.org>`_\nfor Python (supporting 2.7+ including Python 3).\n\n.. code-block:: python\n\n    >>> from jsonschema import validate\n\n    >>> # A sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # If no exception is raised by validate(), the instance is valid.\n    >>> validate({\"name\" : \"Eggs\", \"price\" : 34.99}, schema)\n\n    >>> validate(\n    ...     {\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema\n    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValidationError: 'Invalid' is not of type 'number'\n\nIt can also be used from console:\n\n.. code-block:: bash\n\n    $ jsonschema -i sample.json sample.schema\n\nFeatures\n--------\n\n* Full support for\n  `Draft 6 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft6Validator>`_,\n  `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator>`_\n  and\n  `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator>`_\n\n* `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors>`_\n  that can iteratively report *all* validation errors.\n\n* Small and extensible\n\n* `Programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonschema>`_\n  of which properties or items failed validation.\n\n\nRelease Notes\n-------------\n\nVersion 2.6.0 drops support for Python 2.6.X (ha ha) and contains a\nnumber of small improvements in error messages, as well as a bug fix for\n``ErrorTree``.\n\n\nRunning the Test Suite\n----------------------\n\nIf you have ``tox`` installed (perhaps via ``pip install tox`` or your\npackage manager), running ``tox`` in the directory of your source checkout will\nrun ``jsonschema``'s test suite on all of the versions of Python ``jsonschema``\nsupports. Note that you'll need to have all of those versions installed in\norder to run the tests on each of them, otherwise ``tox`` will skip (and fail)\nthe tests on that version.\n\nOf course you're also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the ``jsonschema.tests`` package.\n\n\nBenchmarks\n----------\n\n``jsonschema``'s benchmarks make use of `perf <https://perf.readthedocs.io>`_.\n\nRunning them can be done via ``tox -e perf``, or by invoking the ``perf``\ncommands externally (after ensuring that both it and ``jsonschema`` itself are\ninstalled)::\n\n    $ python -m perf jsonschema/benchmarks/test_suite.py --hist --output results.json\n\nTo compare to a previous run, use::\n\n    $ python -m perf compare_to --table reference.json results.json\n\nSee the ``perf`` documentation for more details.\n\n\nCommunity\n---------\n\nThere's a `mailing list <https://groups.google.com/forum/#!forum/jsonschema>`_\nfor this implementation on Google Groups.\n\nPlease join, and feel free to send questions there.\n\n\nContributing\n------------\n\nI'm Julian Berman.\n\n``jsonschema`` is on `GitHub <http://github.com/Julian/jsonschema>`_.\n\nGet in touch, via GitHub or otherwise, if you've got something to contribute,\nit'd be most welcome!\n\nYou can also generally find me on Freenode (nick: ``tos9``) in various\nchannels, including ``#python``.\n\nIf you feel overwhelmingly grateful, you can woo me with beer money via\nGoogle Pay with the email in my GitHub profile.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Julian/jsonschema", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jsonschema-extended", "package_url": "https://pypi.org/project/jsonschema-extended/", "platform": "", "project_url": "https://pypi.org/project/jsonschema-extended/", "project_urls": {"Homepage": "http://github.com/Julian/jsonschema"}, "release_url": "https://pypi.org/project/jsonschema-extended/0.6/", "requires_dist": null, "requires_python": "", "summary": "An implementation of JSON Schema validation for Python", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/jsonschema\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a28b3023297c6c5cac127426135e97d32cf9cf4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a736f6e736368656d612e737667\"></a> <a href=\"https://pypi.python.org/pypi/jsonschema\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71d74ed1b66ad0b480b892d179a639d8f50ef112/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6a736f6e736368656d612e737667\"></a> <a href=\"https://travis-ci.org/Julian/jsonschema\" rel=\"nofollow\"><img alt=\"Travis build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55f355d9c8bfab31374513fcc9ff8feb42f4d135/68747470733a2f2f7472617669732d63692e6f72672f4a756c69616e2f6a736f6e736368656d612e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://ci.appveyor.com/project/Julian/jsonschema\" rel=\"nofollow\"><img alt=\"AppVeyor build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc079dc742edb30c60c32816a78d5c28b6c3dd5e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6164747430616961696879366d75796e3f7376673d74727565\"></a></p>\n<p><tt>jsonschema</tt> is an implementation of <a href=\"http://json-schema.org\" rel=\"nofollow\">JSON Schema</a>\nfor Python (supporting 2.7+ including Python 3).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonschema</span> <span class=\"kn\">import</span> <span class=\"n\">validate</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># A sample schema, like what we'd get from json.load()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"properties\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"number\"</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># If no exception is raised by validate(), the instance is valid.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validate</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"mf\">34.99</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validate</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Invalid\"</span><span class=\"p\">},</span> <span class=\"n\">schema</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>                                   <span class=\"c1\"># doctest: +IGNORE_EXCEPTION_DETAIL</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"s1\">'Invalid'</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"s1\">'number'</span>\n</pre>\n<p>It can also be used from console:</p>\n<pre>$ jsonschema -i sample.json sample.schema\n</pre>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Full support for\n<a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft6Validator\" rel=\"nofollow\">Draft 6</a>,\n<a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator\" rel=\"nofollow\">Draft 4</a>\nand\n<a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator\" rel=\"nofollow\">Draft 3</a></li>\n<li><a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors\" rel=\"nofollow\">Lazy validation</a>\nthat can iteratively report <em>all</em> validation errors.</li>\n<li>Small and extensible</li>\n<li><a href=\"https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonschema\" rel=\"nofollow\">Programmatic querying</a>\nof which properties or items failed validation.</li>\n</ul>\n</div>\n<div id=\"release-notes\">\n<h2>Release Notes</h2>\n<p>Version 2.6.0 drops support for Python 2.6.X (ha ha) and contains a\nnumber of small improvements in error messages, as well as a bug fix for\n<tt>ErrorTree</tt>.</p>\n</div>\n<div id=\"running-the-test-suite\">\n<h2>Running the Test Suite</h2>\n<p>If you have <tt>tox</tt> installed (perhaps via <tt>pip install tox</tt> or your\npackage manager), running <tt>tox</tt> in the directory of your source checkout will\nrun <tt>jsonschema</tt>\u2019s test suite on all of the versions of Python <tt>jsonschema</tt>\nsupports. Note that you\u2019ll need to have all of those versions installed in\norder to run the tests on each of them, otherwise <tt>tox</tt> will skip (and fail)\nthe tests on that version.</p>\n<p>Of course you\u2019re also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the <tt>jsonschema.tests</tt> package.</p>\n</div>\n<div id=\"benchmarks\">\n<h2>Benchmarks</h2>\n<p><tt>jsonschema</tt>\u2019s benchmarks make use of <a href=\"https://perf.readthedocs.io\" rel=\"nofollow\">perf</a>.</p>\n<p>Running them can be done via <tt>tox <span class=\"pre\">-e</span> perf</tt>, or by invoking the <tt>perf</tt>\ncommands externally (after ensuring that both it and <tt>jsonschema</tt> itself are\ninstalled):</p>\n<pre>$ python -m perf jsonschema/benchmarks/test_suite.py --hist --output results.json\n</pre>\n<p>To compare to a previous run, use:</p>\n<pre>$ python -m perf compare_to --table reference.json results.json\n</pre>\n<p>See the <tt>perf</tt> documentation for more details.</p>\n</div>\n<div id=\"community\">\n<h2>Community</h2>\n<p>There\u2019s a <a href=\"https://groups.google.com/forum/#!forum/jsonschema\" rel=\"nofollow\">mailing list</a>\nfor this implementation on Google Groups.</p>\n<p>Please join, and feel free to send questions there.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>I\u2019m Julian Berman.</p>\n<p><tt>jsonschema</tt> is on <a href=\"http://github.com/Julian/jsonschema\" rel=\"nofollow\">GitHub</a>.</p>\n<p>Get in touch, via GitHub or otherwise, if you\u2019ve got something to contribute,\nit\u2019d be most welcome!</p>\n<p>You can also generally find me on Freenode (nick: <tt>tos9</tt>) in various\nchannels, including <tt>#python</tt>.</p>\n<p>If you feel overwhelmingly grateful, you can woo me with beer money via\nGoogle Pay with the email in my GitHub profile.</p>\n</div>\n\n          </div>"}, "last_serial": 4072778, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "5024ea15566bcf073fe4ee62450423a7", "sha256": "b9622b2d39a40212cc4f72f8543d10f50f0e48a10614834dd649df6e37c81699"}, "downloads": -1, "filename": "jsonschema-extended-0.5.tar.gz", "has_sig": false, "md5_digest": "5024ea15566bcf073fe4ee62450423a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 141948, "upload_time": "2018-07-16T14:18:30", "upload_time_iso_8601": "2018-07-16T14:18:30.559459Z", "url": "https://files.pythonhosted.org/packages/ae/3f/96a6aae3501593f015ac280d734c224cbe23148b43501016cdded3dfd493/jsonschema-extended-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "093004a79b72888b0de7b9162b973ce6", "sha256": "386d22c37d6c68cd46b42eb91385b108f1fe2e9ab7a4f9ffe746a37fd9fc87b6"}, "downloads": -1, "filename": "jsonschema-extended-0.6.tar.gz", "has_sig": false, "md5_digest": "093004a79b72888b0de7b9162b973ce6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117264, "upload_time": "2018-07-17T08:41:30", "upload_time_iso_8601": "2018-07-17T08:41:30.587065Z", "url": "https://files.pythonhosted.org/packages/12/a8/fa46251d3a81c3b92bac284e4755cec121a18589439a885d3cc8a07dff5d/jsonschema-extended-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "093004a79b72888b0de7b9162b973ce6", "sha256": "386d22c37d6c68cd46b42eb91385b108f1fe2e9ab7a4f9ffe746a37fd9fc87b6"}, "downloads": -1, "filename": "jsonschema-extended-0.6.tar.gz", "has_sig": false, "md5_digest": "093004a79b72888b0de7b9162b973ce6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117264, "upload_time": "2018-07-17T08:41:30", "upload_time_iso_8601": "2018-07-17T08:41:30.587065Z", "url": "https://files.pythonhosted.org/packages/12/a8/fa46251d3a81c3b92bac284e4755cec121a18589439a885d3cc8a07dff5d/jsonschema-extended-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:38 2020"}