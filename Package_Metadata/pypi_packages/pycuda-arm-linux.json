{"info": {"author": "Andreas Kloeckner", "author_email": "inform@tiker.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: C++", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics", "Topic :: Scientific/Engineering :: Visualization"], "description": "PyCUDA lets you access `Nvidia <http://nvidia.com>`_'s `CUDA\n<http://nvidia.com/cuda/>`_ parallel computation API from Python.\nSeveral wrappers of the CUDA API already exist-so what's so special\nabout PyCUDA?\n\n.. image:: https://badge.fury.io/py/pycuda.png\n    :target: http://pypi.python.org/pypi/pycuda\n\n* Object cleanup tied to lifetime of objects. This idiom, often\n  called\n  `RAII <http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization>`_\n  in C++, makes it much easier to write correct, leak- and\n  crash-free code. PyCUDA knows about dependencies, too, so (for\n  example) it won't detach from a context before all memory\n  allocated in it is also freed.\n\n* Convenience. Abstractions like pycuda.driver.SourceModule and\n  pycuda.gpuarray.GPUArray make CUDA programming even more\n  convenient than with Nvidia's C-based runtime.\n\n* Completeness. PyCUDA puts the full power of CUDA's driver API at\n  your disposal, if you wish. It also includes code for\n  interoperability with OpenGL.\n\n* Automatic Error Checking. All CUDA errors are automatically\n  translated into Python exceptions.\n\n* Speed. PyCUDA's base layer is written in C++, so all the niceties\n  above are virtually free.\n\n* Helpful `Documentation <http://documen.tician.de/pycuda>`_ and a\n  `Wiki <http://wiki.tiker.net/PyCuda>`_.\n\nRelatedly, like-minded computing goodness for `OpenCL <http://khronos.org>`_\nis provided by PyCUDA's sister project `PyOpenCL <http://pypi.python.org/pypi/pyopencl>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://mathema.tician.de/software/pycuda", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pycuda-arm-linux", "package_url": "https://pypi.org/project/pycuda-arm-linux/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pycuda-arm-linux/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://mathema.tician.de/software/pycuda"}, "release_url": "https://pypi.org/project/pycuda-arm-linux/2015.1.3/", "requires_dist": null, "requires_python": null, "summary": "pyCUDA for ARM (armv7l) Linux GNUroot Debian on NVIDIA Shield Tablet [Tegra K1] - EXPERIMENTAL: much of cuda driver API works but no cuda runtime API. REQUIRES: Linux for Tegra cuda-6.5-toolkit [.deb package] and libcuda.so.1.1 in /usr/lib (from Jetson TK1 Driver Package) @ https://developer.nvidia.com/linux-tegra-rel-21 ", "version": "2015.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyCUDA lets you access <a href=\"http://nvidia.com\" rel=\"nofollow\">Nvidia</a>\u2019s <a href=\"http://nvidia.com/cuda/\" rel=\"nofollow\">CUDA</a> parallel computation API from Python.\nSeveral wrappers of the CUDA API already exist-so what\u2019s so special\nabout PyCUDA?</p>\n<a href=\"http://pypi.python.org/pypi/pycuda\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pycuda.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d10ba834d3dd77428ca0a507eae6db7c7871da2/68747470733a2f2f62616467652e667572792e696f2f70792f7079637564612e706e67\"></a>\n<ul>\n<li>Object cleanup tied to lifetime of objects. This idiom, often\ncalled\n<a href=\"http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\" rel=\"nofollow\">RAII</a>\nin C++, makes it much easier to write correct, leak- and\ncrash-free code. PyCUDA knows about dependencies, too, so (for\nexample) it won\u2019t detach from a context before all memory\nallocated in it is also freed.</li>\n<li>Convenience. Abstractions like pycuda.driver.SourceModule and\npycuda.gpuarray.GPUArray make CUDA programming even more\nconvenient than with Nvidia\u2019s C-based runtime.</li>\n<li>Completeness. PyCUDA puts the full power of CUDA\u2019s driver API at\nyour disposal, if you wish. It also includes code for\ninteroperability with OpenGL.</li>\n<li>Automatic Error Checking. All CUDA errors are automatically\ntranslated into Python exceptions.</li>\n<li>Speed. PyCUDA\u2019s base layer is written in C++, so all the niceties\nabove are virtually free.</li>\n<li>Helpful <a href=\"http://documen.tician.de/pycuda\" rel=\"nofollow\">Documentation</a> and a\n<a href=\"http://wiki.tiker.net/PyCuda\" rel=\"nofollow\">Wiki</a>.</li>\n</ul>\n<p>Relatedly, like-minded computing goodness for <a href=\"http://khronos.org\" rel=\"nofollow\">OpenCL</a>\nis provided by PyCUDA\u2019s sister project <a href=\"http://pypi.python.org/pypi/pyopencl\" rel=\"nofollow\">PyOpenCL</a>.</p>\n\n          </div>"}, "last_serial": 1874266, "releases": {"2015.1.3": [{"comment_text": "", "digests": {"md5": "7e3d96bada67f00a2498cc4669dffc28", "sha256": "ef060f9fb21e79b8c879db55c3548abf51c81e4715bccdcbc7687cabed3243ad"}, "downloads": -1, "filename": "pycuda_arm_linux-2015.1.3-py2.7-linux-armv7l.egg", "has_sig": false, "md5_digest": "7e3d96bada67f00a2498cc4669dffc28", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 3770480, "upload_time": "2015-12-22T16:27:28", "upload_time_iso_8601": "2015-12-22T16:27:28.302060Z", "url": "https://files.pythonhosted.org/packages/72/5d/3f00789b1e39f1a008209cfe5f73ea00b1b73c644d45bbbc910cfd461731/pycuda_arm_linux-2015.1.3-py2.7-linux-armv7l.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7e3d96bada67f00a2498cc4669dffc28", "sha256": "ef060f9fb21e79b8c879db55c3548abf51c81e4715bccdcbc7687cabed3243ad"}, "downloads": -1, "filename": "pycuda_arm_linux-2015.1.3-py2.7-linux-armv7l.egg", "has_sig": false, "md5_digest": "7e3d96bada67f00a2498cc4669dffc28", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 3770480, "upload_time": "2015-12-22T16:27:28", "upload_time_iso_8601": "2015-12-22T16:27:28.302060Z", "url": "https://files.pythonhosted.org/packages/72/5d/3f00789b1e39f1a008209cfe5f73ea00b1b73c644d45bbbc910cfd461731/pycuda_arm_linux-2015.1.3-py2.7-linux-armv7l.egg", "yanked": false}], "timestamp": "Fri May  8 03:07:35 2020"}