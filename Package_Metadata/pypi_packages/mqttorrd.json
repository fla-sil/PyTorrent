{"info": {"author": "Ond\u0159ej T\u016fma", "author_email": "mcbig@zeropage.cz", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: No Input/Output (Daemon)", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: System :: Monitoring"], "description": "MQTToRRD\n========\n\nLike as `MQTT2RRD <https://github.com/irvined1982/MQTT2RRD>`_ and it's forks,\nMQTToRRD create round robin database files from MQTT messages.\n\nTool daemon is based on ``poho-mqtt`` and ``python-daemon`` packages. All\ndependencies are listed in ``requirements.txt`` file. As Python 2.x\nis deprecated, tool is write for Python 3.5 or more only. For example\n``signal.Signals`` class is use.\n\nUsage\n-----\n\n.. code::\n\n    usage: $(prog)s [options] command\n\n    Create round robind database files form MQTT.\n\n    positional arguments:\n      command               Daemon action (start|stop|restart|status)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -c <file>, --config <file>\n                            Path to config file.\n      -f, --foreground      Run as script on foreground\n\nInstall\n-------\n\n.. code:: bash\n\n    ~# pip3 install mqttorrd\n\nConfiguration\n-------------\n\n[daemon]\n~~~~~~~~\n:data_dir:  Directory to store round robin database files. Default value is\n            ``/var/lib/mqttorrd``.\n:pid_file:  Path of file with pid. Default value is ``/var/run/mqttorrd.pid``.\n:user:      Daemon user, default ``nobody``.\n:group:     Daemon group, default ``nogroup``.\n\nData directory must be writer with user or group as pid file. Each value from\nMQTT broker is store to it's rrd file with path from topic. For example:\n``/var/lib/mqttorrd/garden/pool/temperature.rrd``.\n\n[logging]\n~~~~~~~~~\n:handler:   Python logging handler. Possible values are ``file`` or ``syslog``.\n            When tool is run at foreground, ``stderr`` handler is use. On UNIX\n            like systems, `WatchedFileHandler\n            <https://docs.python.org/3/library/logging.handlers.html#watchedfilehandler>`_\n            is used. Defaults to ``syslog``.\n:syslog:    Syslog connection, ``/dev/log`` by default. ``LOG_DAEMON`` facility\n            is used.\n:file:      Path to log file if ``file`` handler is used. Defaults to\n            ``/var/log/mqttorrd.log``.\n:level:     One of Python logging level: ``DEBUG, INFO, WARNING, ERROR,\n            CRITICAL``. Default value is ``ERROR``.\n:format:    Logging format. Default value is\n            ``%(asctime)s %(levelname)s: %(name)s: %(message)s \"{%(funcName)s():%(lineno)d}``.\n\n[mqtt]\n~~~~~~\n:client_id: MQTT client id. If is not defined, it is generate automatically.\n:hostname:  Broker hostname, ``localhost`` by default.\n:port:      Broker port, ``1883`` is **allways** default.\n:keepalive: The keepalive timeout value for the client. Defaults to ``60``\n            seconds.\n:tls:       TLS connection, default ``False``.\n:ca_certs:  Path to the Certificate Authority certificate. If is not set, system\n            certs path is use.\n:certfile:  Client public certificate file.\n:keyfile:   Client primary key file.\n:username:  Client username\n:password:  Client password\n:subscriptions: Coma separated topics to subscribe. Default value is ``/#``.\n\n[/#]\n~~~~\nFor any topics could be defined own RRD parameters. MQTT characters like ``#``\nand ``+`` could be use. If new topic message was received,first definition,\nwhich is matched is used. If database file is exist yet, only value are update.\nFor more information see https://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html.\n\n:step:      Round Robin Database step. Defaults to ``60`` seconds.\n:DS:        Data source definition. Default value is\n            ``DS:{topic}:GAUGE:120:U:U``, where ``{topic}`` is replaced with\n            file name as last topics part.\n:RRA:       Value archive definition. Default value is\n\n.. code::\n\n        RRA:AVERAGE:0.5:2:30,\n        RRA:AVERAGE:0.5:5:288,\n        RRA:AVERAGE:0.5:30:336,\n        RRA:AVERAGE:0.5:60:1488,\n        RRA:AVERAGE:0.5:720:744,\n        RRA:AVERAGE:0.5:1440:265\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ondratu/mqttorrd", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "mqttorrd", "package_url": "https://pypi.org/project/mqttorrd/", "platform": "", "project_url": "https://pypi.org/project/mqttorrd/", "project_urls": {"Homepage": "https://github.com/ondratu/mqttorrd"}, "release_url": "https://pypi.org/project/mqttorrd/0.1.0/", "requires_dist": ["rrdtool", "python-daemon", "lockfile", "paho-mqtt"], "requires_python": ">=3.5", "summary": "Create round robind database files form MQTT messages.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Like as <a href=\"https://github.com/irvined1982/MQTT2RRD\" rel=\"nofollow\">MQTT2RRD</a> and it\u2019s forks,\nMQTToRRD create round robin database files from MQTT messages.</p>\n<p>Tool daemon is based on <tt><span class=\"pre\">poho-mqtt</span></tt> and <tt><span class=\"pre\">python-daemon</span></tt> packages. All\ndependencies are listed in <tt>requirements.txt</tt> file. As Python 2.x\nis deprecated, tool is write for Python 3.5 or more only. For example\n<tt>signal.Signals</tt> class is use.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>usage: $(prog)s [options] command\n\nCreate round robind database files form MQTT.\n\npositional arguments:\n  command               Daemon action (start|stop|restart|status)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c &lt;file&gt;, --config &lt;file&gt;\n                        Path to config file.\n  -f, --foreground      Run as script on foreground\n</pre>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>~# pip3 install mqttorrd\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"daemon\">\n<h3>[daemon]</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>data_dir:</th><td>Directory to store round robin database files. Default value is\n<tt>/var/lib/mqttorrd</tt>.</td>\n</tr>\n<tr><th>pid_file:</th><td>Path of file with pid. Default value is <tt>/var/run/mqttorrd.pid</tt>.</td>\n</tr>\n<tr><th>user:</th><td>Daemon user, default <tt>nobody</tt>.</td>\n</tr>\n<tr><th>group:</th><td>Daemon group, default <tt>nogroup</tt>.</td>\n</tr>\n</tbody>\n</table>\n<p>Data directory must be writer with user or group as pid file. Each value from\nMQTT broker is store to it\u2019s rrd file with path from topic. For example:\n<tt>/var/lib/mqttorrd/garden/pool/temperature.rrd</tt>.</p>\n</div>\n<div id=\"logging\">\n<h3>[logging]</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>handler:</th><td>Python logging handler. Possible values are <tt>file</tt> or <tt>syslog</tt>.\nWhen tool is run at foreground, <tt>stderr</tt> handler is use. On UNIX\nlike systems, <a href=\"https://docs.python.org/3/library/logging.handlers.html#watchedfilehandler\" rel=\"nofollow\">WatchedFileHandler</a>\nis used. Defaults to <tt>syslog</tt>.</td>\n</tr>\n<tr><th>syslog:</th><td>Syslog connection, <tt>/dev/log</tt> by default. <tt>LOG_DAEMON</tt> facility\nis used.</td>\n</tr>\n<tr><th>file:</th><td>Path to log file if <tt>file</tt> handler is used. Defaults to\n<tt>/var/log/mqttorrd.log</tt>.</td>\n</tr>\n<tr><th>level:</th><td>One of Python logging level: <tt>DEBUG, INFO, WARNING, ERROR,\nCRITICAL</tt>. Default value is <tt>ERROR</tt>.</td>\n</tr>\n<tr><th>format:</th><td>Logging format. Default value is\n<tt>%(asctime)s %(levelname)s: %(name)s: %(message)s <span class=\"pre\">\"{%(funcName)s():%(lineno)d}</span></tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"mqtt\">\n<h3>[mqtt]</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>client_id:</th><td>MQTT client id. If is not defined, it is generate automatically.</td>\n</tr>\n<tr><th>hostname:</th><td>Broker hostname, <tt>localhost</tt> by default.</td>\n</tr>\n<tr><th>port:</th><td>Broker port, <tt>1883</tt> is <strong>allways</strong> default.</td>\n</tr>\n<tr><th>keepalive:</th><td>The keepalive timeout value for the client. Defaults to <tt>60</tt>\nseconds.</td>\n</tr>\n<tr><th>tls:</th><td>TLS connection, default <tt>False</tt>.</td>\n</tr>\n<tr><th>ca_certs:</th><td>Path to the Certificate Authority certificate. If is not set, system\ncerts path is use.</td>\n</tr>\n<tr><th>certfile:</th><td>Client public certificate file.</td>\n</tr>\n<tr><th>keyfile:</th><td>Client primary key file.</td>\n</tr>\n<tr><th>username:</th><td>Client username</td>\n</tr>\n<tr><th>password:</th><td>Client password</td>\n</tr>\n<tr><th>subscriptions:</th><td>Coma separated topics to subscribe. Default value is <tt>/#</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"id1\">\n<h3>[/#]</h3>\n<p>For any topics could be defined own RRD parameters. MQTT characters like <tt>#</tt>\nand <tt>+</tt> could be use. If new topic message was received,first definition,\nwhich is matched is used. If database file is exist yet, only value are update.\nFor more information see <a href=\"https://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html\" rel=\"nofollow\">https://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html</a>.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>step:</th><td>Round Robin Database step. Defaults to <tt>60</tt> seconds.</td>\n</tr>\n<tr><th>DS:</th><td>Data source definition. Default value is\n<tt><span class=\"pre\">DS:{topic}:GAUGE:120:U:U</span></tt>, where <tt>{topic}</tt> is replaced with\nfile name as last topics part.</td>\n</tr>\n<tr><th>RRA:</th><td>Value archive definition. Default value is</td>\n</tr>\n</tbody>\n</table>\n<pre>RRA:AVERAGE:0.5:2:30,\nRRA:AVERAGE:0.5:5:288,\nRRA:AVERAGE:0.5:30:336,\nRRA:AVERAGE:0.5:60:1488,\nRRA:AVERAGE:0.5:720:744,\nRRA:AVERAGE:0.5:1440:265\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3978842, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9a9844a9c9ea56b1b689deacb5917fcc", "sha256": "613d0602797595d70ead1c73a0fb0643f336ed82b9591ffe237580d8c24c67ef"}, "downloads": -1, "filename": "mqttorrd-0.1.0-py3-none-any.whl", "has_sig": true, "md5_digest": "9a9844a9c9ea56b1b689deacb5917fcc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11647, "upload_time": "2018-06-19T19:56:39", "upload_time_iso_8601": "2018-06-19T19:56:39.343811Z", "url": "https://files.pythonhosted.org/packages/00/88/4f74c47cbf2d4b345f9f56105e0d486a1fe1e422ba4a25d8676e1ca52393/mqttorrd-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d25a2912146efa4830a400bb501e30ea", "sha256": "941c4afed0e5939771fd08e3d05427d0aeabc0eda5c9e0b0c1f9bfba5e71da47"}, "downloads": -1, "filename": "mqttorrd-0.1.0.tar.gz", "has_sig": true, "md5_digest": "d25a2912146efa4830a400bb501e30ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9002, "upload_time": "2018-06-19T19:56:40", "upload_time_iso_8601": "2018-06-19T19:56:40.867299Z", "url": "https://files.pythonhosted.org/packages/e1/73/a517fac656626153046d8897da1c64881d4b12ec2ae235e27a5e229c3563/mqttorrd-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9a9844a9c9ea56b1b689deacb5917fcc", "sha256": "613d0602797595d70ead1c73a0fb0643f336ed82b9591ffe237580d8c24c67ef"}, "downloads": -1, "filename": "mqttorrd-0.1.0-py3-none-any.whl", "has_sig": true, "md5_digest": "9a9844a9c9ea56b1b689deacb5917fcc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11647, "upload_time": "2018-06-19T19:56:39", "upload_time_iso_8601": "2018-06-19T19:56:39.343811Z", "url": "https://files.pythonhosted.org/packages/00/88/4f74c47cbf2d4b345f9f56105e0d486a1fe1e422ba4a25d8676e1ca52393/mqttorrd-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d25a2912146efa4830a400bb501e30ea", "sha256": "941c4afed0e5939771fd08e3d05427d0aeabc0eda5c9e0b0c1f9bfba5e71da47"}, "downloads": -1, "filename": "mqttorrd-0.1.0.tar.gz", "has_sig": true, "md5_digest": "d25a2912146efa4830a400bb501e30ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9002, "upload_time": "2018-06-19T19:56:40", "upload_time_iso_8601": "2018-06-19T19:56:40.867299Z", "url": "https://files.pythonhosted.org/packages/e1/73/a517fac656626153046d8897da1c64881d4b12ec2ae235e27a5e229c3563/mqttorrd-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:06 2020"}