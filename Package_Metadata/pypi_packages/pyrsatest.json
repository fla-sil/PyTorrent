{"info": {"author": "Paul Davis", "author_email": "pjdavis@gmx.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "**Pyramid SQLAlchemy unit testing utilities**\n\nA package which provides Python classes that enables SQLAlchemy functionality to be\nmocked in unit tests for an application written in Pyramid or a similar framework.\n\nThese utilities are designed to help in writing unit tests for situations \nwhere test setup is overly time-consuming or otherwise problematic. \nThis may include the requirement for extensive amounts of request data for which\nqueries filter upon, or for an extensive variety of related records\nto be created due to complex database schemas etc.\n\nIn mocking and explicitly setting return\nvalues for SQLAlchemy queries, the appreciation of\ncontrol flow is made easier in many cases. Note that in using the provided objects,\nsuch as mocking SQLAlchemy ORM queries through `MockDbSession`,\nwhether queries are written correctly or return results are as expected\nis left untested. \n\nThe source for this project is available [here](https://github.com/paulosjd/pyrasatest).\n\n----\n**Available functionality and example usage**\n\n**`MockModel`** \n\nUseful for representing objects such as ORM query results. \nDesired attributes are set in their construction from keywords arguments.\n\n    >>> from pyrasatest import MockModel\n    >>> mm = MockModel(name='Paul', age='34')\n    >>> print(f'My name is {mm.name} and my age is {mm.age}')\n    My name is Paul and my age is 34\n\nFor testing code which accesses an SQLAlchemy query result object using indexing\nas an alternative to dotted attribute lookup (i.e. `namedtuple`-like access),\nvalues will be returned according to ordering of kwargs which are passed to the constructor, for example:\n\n    >>> mock_model = MockModel(foo='0', bar='1')\n    >>> mock_model[0]\n    '0'\n\nFor Python versions before 3.6, where dictionaries have no ordering, the following\nmethod should be used to specify return values from indexing:\n\n    >>> mock_model.set_result_items(['foo_value', 'bar_value'])\n    >>> mock_model[0]\n    'foo_value'\n\n`LazyAttrMockModel` is similar to `MockModel` except that in the case of a \nfailed attribute lookup, it will return `None` instead of raising `AttributeError`.\n\n**`MockRequest`**\n\n`MockRequest` objects, which inherit from `Pyramid.testing.DummyRequest`,\nhave an instance of `MockDbSession` as an attribute. \nDatabase interactions, which would usually involve an SQLAlchemy session instance\nthrough `request.dbsession`, will use an instance of `MockDbSession` instead. \nThis can be customized accordingly, usage is demonstrated below.\n\n**`MockDbSession`**\n\nTo set query results more generally, see `MockQuery` usage notes.\nQuery results can be set in a specific manner,\naccording to the model or model property which \nis the first positional argument passed to `dbession.query` in the unit of code\nbeing tested. The following view callable has multiple `dbession.query` calls:\n\n    class ExampleView:\n        def __init__(self, request):\n            self.request = request\n\n        @view_config(route_name='order_info', renderer='../templates/mytemplate.mako')\n        def get_order_info(self):\n            try:\n                order = self.request.dbsession.query(models.Order).filter(\n                    models.Order.id == self.request.params.get('order_id')).one()\n                a = type(order)\n            except exc.SQLAlchemyError:\n                return {'status': 'order not found'}\n\n            try:\n                product_id = self.request.dbsession.query(models.Product.id).filter(\n                    models.Product.number == self.request.params.get('product_number')).one()[0]\n            except exc.SQLAlchemyError:\n                return {'status': f'product not found for order id {order.id}'}\n\n            try:\n                acc_name = self.request.dbsession.query(models.Account.name).filter(\n                    models.Account.id == self.request.params.get('account_id')).one()[0]\n            except exc.SQLAlchemyError:\n                return {'status': f'account not found for order id {order.id}'}\n\n            return {\n                'status': 'ok',\n                'order_number': order.number,\n                'product_id': product_id,\n                'account_name': acc_name,\n            }\n\nThe following tests for the above demonstrates the setting of return values \nfor specific queries:\n\n    ...\n    from pyrasatest import MockModel, MockRequest\n    from sqlalchemy import exc\n\n    from app.models import Account, Order, Product\n    from app.views.default import ExampleView\n\n    class ExampleViewTestCase(unittest.TestCase):\n        def setUp(self):\n            self.view = ExampleView(MockRequest())\n\n        def test_get_order_info_order_not_found(self):\n            self.view.request.dbsession.query_return_values = {\n                Order: exc.SQLAlchemyError\n            }\n            self.assertEqual(\n                {'status': 'order not found'},\n                self.view.get_order_info()\n            )\n\n        def test_get_order_info_product_not_found(self):\n            mock_order = MockModel(id=12)\n            self.view.request.dbsession.query_return_values = {\n                # MockQuery can be used as a value, this allows customization\n                # Order: MockQuery(one_=mock_order) \n                Order: mock_order,\n                Product.id: exc.SQLAlchemyError\n            }\n            self.assertEqual(\n                {'status': f'product not found for order id {mock_order.id}'},\n                self.view.get_order_info()\n            )\n\n        def test_get_order_info_account_not_found(self):\n            mock_order = MockModel(id=12)\n            self.view.request.dbsession.query_return_values = {\n                Order: mock_order,\n                Product.id: MockModel(id=25),\n                Account.name: exc.SQLAlchemyError\n            }\n            self.assertEqual(\n                {'status': f'account not found for order id {mock_order.id}'},\n                self.view.get_order_info()\n            )\n\n        def test_get_order_info(self):\n            mock_order = MockModel(id=12, number=5)\n            mock_product = MockModel(id=25)\n            mock_account = MockModel(name='test_acc')\n            query_return_values = {\n                Order: mock_order,\n                Product.id: mock_product,\n                Account.name: mock_account\n            }\n            self.view.request.dbsession.query_return_values = query_return_values\n            expected_output = {\n                'status': 'ok',\n                'order_number': mock_order.number,\n                'product_id': mock_product[0],\n                'account_name': mock_account[0],\n            }\n            self.assertEqual(expected_output, self.view.get_order_info())\n\n**`PartialMockDbSession`**\n\nSubclasses `MockDbSession` and makes it so ORM query mocking is restricted to \nonly the specified queries. In creating an instance,\na test database session instance must be provided,\nas well as a `dict` whose data specifies which queries \nto mock along with desired return values.\n\nIf a `dbsession.query` call contains no key matching the first positional \nargument passed to it, then that call will not be mocked. \nOtherwise it is used as the return value from any \nchained `.one()`, `.first()` or `.all()` calls,\nor an `Exception` raised if the value is an `Exception` class. \n\nIn the following example, suppose a unit of code being tested contained the\nfollowing `dbsession.query` calls:\n\n    accounts = request.dbsession.query(Account).filter(...).one()\n    supplier = request.dbsession.query(Supplier, Country.id).filter(...).one()\n    products = request.dbsession.query(Product.id).filter(...).all()\n\nThen to selectively mock the last two calls (and leave the first one unmocked), \n`PartialMockDbSession` can be used as follows:\n\n    ...\n    from pyramid.testing import DummyRequest\n    from pyrasatest import PartialMockDbSession\n    from sqlalchemy import exc\n\n    from app.models import Account, Supplier, Product\n    from app.models.meta import Base\n    from app.views import ExampleView\n\n    class ExampleViewTestCase(unittest.TestCase):\n        @classmethod\n        def setUpClass(cls):\n            engine = create_engine('sqlite:///:memory:')\n            cls.session = scoped_session(sessionmaker(bind=engine))\n            Base.metadata.create_all(engine)\n            request = DummyRequest()\n            request.dbsession = cls.session\n            cls.view = ExampleView(request)\n            acc1 = Account(name='acc1', number='123')\n            ...\n\n\n        def test_get_account_and_product_number_with_mocked_product_query(self):\n            self.view.request.params = {'account_id': self.accounts[0].id}\n            mock_product = MockModel(number=32)\n            self.view.request.dbsession = PartialMockDbSession(\n                query_return_values={Product.id: mock_product},\n                dbsession=self.session\n            )\n            acc_name = self.accounts[0].name\n            self.assertEqual(\n                {'account_name': acc_name, 'product_number': mock_product[0]},\n                self.view.get_account_and_product_number()\n            )\n\n**`MockQuery`**\n\nAs defined in `MockQuery.__init__`, a number of keywords arguments have meaning\nwhich affect behavior on subsequent method calls.\n\nTo set returns values for queries which end in `.first()` and `.one()` as in the\nfollowing view callable:\n\n    class ExampleView:\n        def __init__(self, request):\n            self.request = request\n\n        @view_config(route_name='account_info', renderer=template_path)\n        def get_account_info(self):\n            account = self.request.dbsession.query(models.Account).filter(\n                models.Account.id == self.request.params.get('account_id')\n            ).first()\n            if not account:\n                try:\n                    account = self.request.dbsession.query(models.Account).filter(\n                        models.Account.name == 'guest'\n                    ).one()\n                except exc.SQLAlchemyError:\n                    return {}\n            return {'account_name': account.name, 'account_number': account.number}\n\nInstantiate `MockQuery` with the appropriate keyword arguments and assign to `self.request.dbsession`\nas in the following example. Usage also involves testing of a condition where \n`exc.SQLAlchemy` is raised:\n\n    from pyrasatest import MockModel, MockQuery\n    from sqlalchemy import exc\n\n    from app.views.default import ExampleView\n\n    class ExampleViewTestCase(unittest.TestCase):\n        def setUp(self):\n            self.view = ExampleView(MockRequest()) \n\n        def test_get_account_info(self):\n            mock_acc = MockModel(name='Abc', number='123')\n            self.view.request.dbsession.return_value = MockQuery(first_=mock_acc)\n            self.assertEqual(\n                {'account_name': mock_acc.name, 'account_number': mock_acc.number},\n                self.view.get_account_info()\n            )\n\n        def test_get_account_info_account_not_found(self):\n            self.view.request.dbsession.return_value = MockQuery(\n                first_=None,\n                raise_exc=exc.SQLAlchemyError\n            )\n            self.assertEqual({}, self.view.get_account_info())\n\nFor query results returned by `.all()`, where the code being tested iterates \nover the result, pass in the desired return value in a manner similar to:  \n`MockQuery(all_=['result1', 'result2'])`\n\n----\n\n**Installation**\n\nTo install the package you can use pip:\n\n    $ pip install pyrasatest\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paulosjd/pyrasatest", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyrsatest", "package_url": "https://pypi.org/project/pyrsatest/", "platform": "", "project_url": "https://pypi.org/project/pyrsatest/", "project_urls": {"Homepage": "https://github.com/paulosjd/pyrasatest"}, "release_url": "https://pypi.org/project/pyrsatest/1.3.1/", "requires_dist": ["pyramid", "SQLAlchemy"], "requires_python": ">=3.6", "summary": "Unit testing utilities for Pyramid applications", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Pyramid SQLAlchemy unit testing utilities</strong></p>\n<p>A package which provides Python classes that enables SQLAlchemy functionality to be\nmocked in unit tests for an application written in Pyramid or a similar framework.</p>\n<p>These utilities are designed to help in writing unit tests for situations\nwhere test setup is overly time-consuming or otherwise problematic.\nThis may include the requirement for extensive amounts of request data for which\nqueries filter upon, or for an extensive variety of related records\nto be created due to complex database schemas etc.</p>\n<p>In mocking and explicitly setting return\nvalues for SQLAlchemy queries, the appreciation of\ncontrol flow is made easier in many cases. Note that in using the provided objects,\nsuch as mocking SQLAlchemy ORM queries through <code>MockDbSession</code>,\nwhether queries are written correctly or return results are as expected\nis left untested.</p>\n<p>The source for this project is available <a href=\"https://github.com/paulosjd/pyrasatest\" rel=\"nofollow\">here</a>.</p>\n<hr>\n<p><strong>Available functionality and example usage</strong></p>\n<p><strong><code>MockModel</code></strong></p>\n<p>Useful for representing objects such as ORM query results.\nDesired attributes are set in their construction from keywords arguments.</p>\n<pre><code>&gt;&gt;&gt; from pyrasatest import MockModel\n&gt;&gt;&gt; mm = MockModel(name='Paul', age='34')\n&gt;&gt;&gt; print(f'My name is {mm.name} and my age is {mm.age}')\nMy name is Paul and my age is 34\n</code></pre>\n<p>For testing code which accesses an SQLAlchemy query result object using indexing\nas an alternative to dotted attribute lookup (i.e. <code>namedtuple</code>-like access),\nvalues will be returned according to ordering of kwargs which are passed to the constructor, for example:</p>\n<pre><code>&gt;&gt;&gt; mock_model = MockModel(foo='0', bar='1')\n&gt;&gt;&gt; mock_model[0]\n'0'\n</code></pre>\n<p>For Python versions before 3.6, where dictionaries have no ordering, the following\nmethod should be used to specify return values from indexing:</p>\n<pre><code>&gt;&gt;&gt; mock_model.set_result_items(['foo_value', 'bar_value'])\n&gt;&gt;&gt; mock_model[0]\n'foo_value'\n</code></pre>\n<p><code>LazyAttrMockModel</code> is similar to <code>MockModel</code> except that in the case of a\nfailed attribute lookup, it will return <code>None</code> instead of raising <code>AttributeError</code>.</p>\n<p><strong><code>MockRequest</code></strong></p>\n<p><code>MockRequest</code> objects, which inherit from <code>Pyramid.testing.DummyRequest</code>,\nhave an instance of <code>MockDbSession</code> as an attribute.\nDatabase interactions, which would usually involve an SQLAlchemy session instance\nthrough <code>request.dbsession</code>, will use an instance of <code>MockDbSession</code> instead.\nThis can be customized accordingly, usage is demonstrated below.</p>\n<p><strong><code>MockDbSession</code></strong></p>\n<p>To set query results more generally, see <code>MockQuery</code> usage notes.\nQuery results can be set in a specific manner,\naccording to the model or model property which\nis the first positional argument passed to <code>dbession.query</code> in the unit of code\nbeing tested. The following view callable has multiple <code>dbession.query</code> calls:</p>\n<pre><code>class ExampleView:\n    def __init__(self, request):\n        self.request = request\n\n    @view_config(route_name='order_info', renderer='../templates/mytemplate.mako')\n    def get_order_info(self):\n        try:\n            order = self.request.dbsession.query(models.Order).filter(\n                models.Order.id == self.request.params.get('order_id')).one()\n            a = type(order)\n        except exc.SQLAlchemyError:\n            return {'status': 'order not found'}\n\n        try:\n            product_id = self.request.dbsession.query(models.Product.id).filter(\n                models.Product.number == self.request.params.get('product_number')).one()[0]\n        except exc.SQLAlchemyError:\n            return {'status': f'product not found for order id {order.id}'}\n\n        try:\n            acc_name = self.request.dbsession.query(models.Account.name).filter(\n                models.Account.id == self.request.params.get('account_id')).one()[0]\n        except exc.SQLAlchemyError:\n            return {'status': f'account not found for order id {order.id}'}\n\n        return {\n            'status': 'ok',\n            'order_number': order.number,\n            'product_id': product_id,\n            'account_name': acc_name,\n        }\n</code></pre>\n<p>The following tests for the above demonstrates the setting of return values\nfor specific queries:</p>\n<pre><code>...\nfrom pyrasatest import MockModel, MockRequest\nfrom sqlalchemy import exc\n\nfrom app.models import Account, Order, Product\nfrom app.views.default import ExampleView\n\nclass ExampleViewTestCase(unittest.TestCase):\n    def setUp(self):\n        self.view = ExampleView(MockRequest())\n\n    def test_get_order_info_order_not_found(self):\n        self.view.request.dbsession.query_return_values = {\n            Order: exc.SQLAlchemyError\n        }\n        self.assertEqual(\n            {'status': 'order not found'},\n            self.view.get_order_info()\n        )\n\n    def test_get_order_info_product_not_found(self):\n        mock_order = MockModel(id=12)\n        self.view.request.dbsession.query_return_values = {\n            # MockQuery can be used as a value, this allows customization\n            # Order: MockQuery(one_=mock_order) \n            Order: mock_order,\n            Product.id: exc.SQLAlchemyError\n        }\n        self.assertEqual(\n            {'status': f'product not found for order id {mock_order.id}'},\n            self.view.get_order_info()\n        )\n\n    def test_get_order_info_account_not_found(self):\n        mock_order = MockModel(id=12)\n        self.view.request.dbsession.query_return_values = {\n            Order: mock_order,\n            Product.id: MockModel(id=25),\n            Account.name: exc.SQLAlchemyError\n        }\n        self.assertEqual(\n            {'status': f'account not found for order id {mock_order.id}'},\n            self.view.get_order_info()\n        )\n\n    def test_get_order_info(self):\n        mock_order = MockModel(id=12, number=5)\n        mock_product = MockModel(id=25)\n        mock_account = MockModel(name='test_acc')\n        query_return_values = {\n            Order: mock_order,\n            Product.id: mock_product,\n            Account.name: mock_account\n        }\n        self.view.request.dbsession.query_return_values = query_return_values\n        expected_output = {\n            'status': 'ok',\n            'order_number': mock_order.number,\n            'product_id': mock_product[0],\n            'account_name': mock_account[0],\n        }\n        self.assertEqual(expected_output, self.view.get_order_info())\n</code></pre>\n<p><strong><code>PartialMockDbSession</code></strong></p>\n<p>Subclasses <code>MockDbSession</code> and makes it so ORM query mocking is restricted to\nonly the specified queries. In creating an instance,\na test database session instance must be provided,\nas well as a <code>dict</code> whose data specifies which queries\nto mock along with desired return values.</p>\n<p>If a <code>dbsession.query</code> call contains no key matching the first positional\nargument passed to it, then that call will not be mocked.\nOtherwise it is used as the return value from any\nchained <code>.one()</code>, <code>.first()</code> or <code>.all()</code> calls,\nor an <code>Exception</code> raised if the value is an <code>Exception</code> class.</p>\n<p>In the following example, suppose a unit of code being tested contained the\nfollowing <code>dbsession.query</code> calls:</p>\n<pre><code>accounts = request.dbsession.query(Account).filter(...).one()\nsupplier = request.dbsession.query(Supplier, Country.id).filter(...).one()\nproducts = request.dbsession.query(Product.id).filter(...).all()\n</code></pre>\n<p>Then to selectively mock the last two calls (and leave the first one unmocked),\n<code>PartialMockDbSession</code> can be used as follows:</p>\n<pre><code>...\nfrom pyramid.testing import DummyRequest\nfrom pyrasatest import PartialMockDbSession\nfrom sqlalchemy import exc\n\nfrom app.models import Account, Supplier, Product\nfrom app.models.meta import Base\nfrom app.views import ExampleView\n\nclass ExampleViewTestCase(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        engine = create_engine('sqlite:///:memory:')\n        cls.session = scoped_session(sessionmaker(bind=engine))\n        Base.metadata.create_all(engine)\n        request = DummyRequest()\n        request.dbsession = cls.session\n        cls.view = ExampleView(request)\n        acc1 = Account(name='acc1', number='123')\n        ...\n\n\n    def test_get_account_and_product_number_with_mocked_product_query(self):\n        self.view.request.params = {'account_id': self.accounts[0].id}\n        mock_product = MockModel(number=32)\n        self.view.request.dbsession = PartialMockDbSession(\n            query_return_values={Product.id: mock_product},\n            dbsession=self.session\n        )\n        acc_name = self.accounts[0].name\n        self.assertEqual(\n            {'account_name': acc_name, 'product_number': mock_product[0]},\n            self.view.get_account_and_product_number()\n        )\n</code></pre>\n<p><strong><code>MockQuery</code></strong></p>\n<p>As defined in <code>MockQuery.__init__</code>, a number of keywords arguments have meaning\nwhich affect behavior on subsequent method calls.</p>\n<p>To set returns values for queries which end in <code>.first()</code> and <code>.one()</code> as in the\nfollowing view callable:</p>\n<pre><code>class ExampleView:\n    def __init__(self, request):\n        self.request = request\n\n    @view_config(route_name='account_info', renderer=template_path)\n    def get_account_info(self):\n        account = self.request.dbsession.query(models.Account).filter(\n            models.Account.id == self.request.params.get('account_id')\n        ).first()\n        if not account:\n            try:\n                account = self.request.dbsession.query(models.Account).filter(\n                    models.Account.name == 'guest'\n                ).one()\n            except exc.SQLAlchemyError:\n                return {}\n        return {'account_name': account.name, 'account_number': account.number}\n</code></pre>\n<p>Instantiate <code>MockQuery</code> with the appropriate keyword arguments and assign to <code>self.request.dbsession</code>\nas in the following example. Usage also involves testing of a condition where\n<code>exc.SQLAlchemy</code> is raised:</p>\n<pre><code>from pyrasatest import MockModel, MockQuery\nfrom sqlalchemy import exc\n\nfrom app.views.default import ExampleView\n\nclass ExampleViewTestCase(unittest.TestCase):\n    def setUp(self):\n        self.view = ExampleView(MockRequest()) \n\n    def test_get_account_info(self):\n        mock_acc = MockModel(name='Abc', number='123')\n        self.view.request.dbsession.return_value = MockQuery(first_=mock_acc)\n        self.assertEqual(\n            {'account_name': mock_acc.name, 'account_number': mock_acc.number},\n            self.view.get_account_info()\n        )\n\n    def test_get_account_info_account_not_found(self):\n        self.view.request.dbsession.return_value = MockQuery(\n            first_=None,\n            raise_exc=exc.SQLAlchemyError\n        )\n        self.assertEqual({}, self.view.get_account_info())\n</code></pre>\n<p>For query results returned by <code>.all()</code>, where the code being tested iterates\nover the result, pass in the desired return value in a manner similar to:<br>\n<code>MockQuery(all_=['result1', 'result2'])</code></p>\n<hr>\n<p><strong>Installation</strong></p>\n<p>To install the package you can use pip:</p>\n<pre><code>$ pip install pyrasatest\n</code></pre>\n\n          </div>"}, "last_serial": 6388662, "releases": {"1.1.3": [{"comment_text": "", "digests": {"md5": "a03de4639d320275e784c6ee45329f0b", "sha256": "09d04ddb9f4908fef3f1698875d6493cf35cf3d1bf50b34c7f76964f3a5f7a74"}, "downloads": -1, "filename": "pyrsatest-1.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a03de4639d320275e784c6ee45329f0b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 5637, "upload_time": "2019-12-28T18:01:19", "upload_time_iso_8601": "2019-12-28T18:01:19.256776Z", "url": "https://files.pythonhosted.org/packages/a2/01/11712ff10928f5e4c0da5c8cde4f5b5ca7d5e66f49a4f4950be2d353875b/pyrsatest-1.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b49c2f6a816f93ab7a8a567266a2ee99", "sha256": "b6a3ac6ef484e9772fa6e5cd49b4e3bf95ee0a1d9bd539de1d7ecdfae2b8cea4"}, "downloads": -1, "filename": "pyrsatest-1.1.3.tar.gz", "has_sig": false, "md5_digest": "b49c2f6a816f93ab7a8a567266a2ee99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4376, "upload_time": "2019-12-28T18:01:24", "upload_time_iso_8601": "2019-12-28T18:01:24.096723Z", "url": "https://files.pythonhosted.org/packages/c4/14/ea2689f9465a6b016fdfc04d7a77980189fa86b36cd5a0a089d8affed411/pyrsatest-1.1.3.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "586171955ca9b04ae1448b2e2270b575", "sha256": "084ce45dec52f94c7b91993b40e80f2e3a94c8f6b5709aaa69a7a207a88a5b12"}, "downloads": -1, "filename": "pyrsatest-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "586171955ca9b04ae1448b2e2270b575", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8094, "upload_time": "2019-12-30T00:34:07", "upload_time_iso_8601": "2019-12-30T00:34:07.796006Z", "url": "https://files.pythonhosted.org/packages/ba/da/1b5f5ca3cf050af24be291ae02023fe6d3889b21bf7e2219c4c452605251/pyrsatest-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1742ce3c91d4791d8165287ecc70a574", "sha256": "f60ddb84343e61fbe7fb1deb979f6a6164a617522e8c51b7e92422ee31631ed4"}, "downloads": -1, "filename": "pyrsatest-1.2.1.tar.gz", "has_sig": false, "md5_digest": "1742ce3c91d4791d8165287ecc70a574", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8541, "upload_time": "2019-12-30T00:34:12", "upload_time_iso_8601": "2019-12-30T00:34:12.151901Z", "url": "https://files.pythonhosted.org/packages/7c/05/6a1e58101a983be6a532a50df6f03f9d1aa683680ec3420ace7530026335/pyrsatest-1.2.1.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "56e2b75c70d2441f87cfdfd06b8b257c", "sha256": "d6679356b7586f8ef50baf0c024cf3fabb333e916b60ea270ebec7de3750f0a2"}, "downloads": -1, "filename": "pyrsatest-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "56e2b75c70d2441f87cfdfd06b8b257c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 9025, "upload_time": "2020-01-02T23:03:57", "upload_time_iso_8601": "2020-01-02T23:03:57.882720Z", "url": "https://files.pythonhosted.org/packages/66/3e/b05f1ff7aae6806aaafa1db91f7ad3263978f25705bf67a6d27e112950d8/pyrsatest-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b8d9aec6a485beb46661ebe1b4139b2", "sha256": "315a3a852def2cea833a7dd8ae2f3d51f02b84a9da207ffc92db24ab3cb4bce9"}, "downloads": -1, "filename": "pyrsatest-1.3.1.tar.gz", "has_sig": false, "md5_digest": "0b8d9aec6a485beb46661ebe1b4139b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9771, "upload_time": "2020-01-02T23:04:04", "upload_time_iso_8601": "2020-01-02T23:04:04.058323Z", "url": "https://files.pythonhosted.org/packages/79/0d/f0b50d5049d8f85c99aeba81371482bafdf89474cb66f322645f10604b96/pyrsatest-1.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56e2b75c70d2441f87cfdfd06b8b257c", "sha256": "d6679356b7586f8ef50baf0c024cf3fabb333e916b60ea270ebec7de3750f0a2"}, "downloads": -1, "filename": "pyrsatest-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "56e2b75c70d2441f87cfdfd06b8b257c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 9025, "upload_time": "2020-01-02T23:03:57", "upload_time_iso_8601": "2020-01-02T23:03:57.882720Z", "url": "https://files.pythonhosted.org/packages/66/3e/b05f1ff7aae6806aaafa1db91f7ad3263978f25705bf67a6d27e112950d8/pyrsatest-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b8d9aec6a485beb46661ebe1b4139b2", "sha256": "315a3a852def2cea833a7dd8ae2f3d51f02b84a9da207ffc92db24ab3cb4bce9"}, "downloads": -1, "filename": "pyrsatest-1.3.1.tar.gz", "has_sig": false, "md5_digest": "0b8d9aec6a485beb46661ebe1b4139b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9771, "upload_time": "2020-01-02T23:04:04", "upload_time_iso_8601": "2020-01-02T23:04:04.058323Z", "url": "https://files.pythonhosted.org/packages/79/0d/f0b50d5049d8f85c99aeba81371482bafdf89474cb66f322645f10604b96/pyrsatest-1.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:33 2020"}