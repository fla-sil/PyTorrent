{"info": {"author": "Omar Nasr", "author_email": "omar@omarnasr.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Libraries"], "description": "# moduconfig \u2699\ufe0f\n\nA declarative and powerful configuration API for application configuration and documentation. \n\n## Basic Usage \ud83e\udd37\u200d\u2642\ufe0f\nCreate a file that you can import across your application. This can be a python or JSON file. This example uses a python file called configuration.py within a \nconfig module in our source (src) module. If our entrypoint for our application is main.py, we will be able to import the configuration.py module and it's content \nlike so ```from src.config.configuration import *``` anywhere in the application.\n\n```\nsrc/\n    config/\n        __init__.py\n        configuration.py\n        # file with production variables\n        production.py\n        # file with development variables\n        development.py\n    __init__.py\nmain.py\n```\n\nconfiguration.py will have our configuration definition. You can also choose to do this in a JSON file as stated above which moduconfig will load and use. \n\nHere for example we are configuring an application that will connect to a database\n\n```py\n# configuration.py\n\nAPP_CONFIGS = {\n    # the name of your application, used to prefix the names of configuration variables for their environment variables \n    # {applicationName}_{variableName} \n    \"applicationName\": \"MY_AWESOME_APP\",\n\n    # we define our modes for our application, usually production and development but can be anything you like\n    # the key is the mode name and the value is the description of what the mode does \n    \"modes\": {\n        \"testing\": \"Mode for integration tests to ensure application is functioning correctly\",\n        \"development\": \"Mode for developing the application, should only be used to develop locally and not to serve clients\",\n        \"production\": \"Mode for running the application to serve clients\" \n    }\n    \"variables\":{\n        \"DATABASE_HOST\":{\n            # error will be thrown if a value cannot be obtained \n            \"required\": True,\n            \"default\":{\n                # default only in the selected modes \n                \"development\": \"localhost\",\n                \"testing\": \"localhost\"\n            },\n\n            # NOTE: if this is a JSON file, simply wrap the type around qoutations\n            \"type\": str,\n\n            # An optional description to the variable \n            \"description\": \"The host name of the database without the port\"\n        },\n        \"DATABASE_PORT\": {\n            \"required\": True,\n            # default across all modes\n            \"default\": 5432,\n\n            # environment variables are always strings, moduconfig will attempt to cast the value to the specified type if it's not a str\n            \"type\": int\n        },\n\n        \"DATABASE_USER\":{\n            \"required\": True,\n\n            \"default\":{\n                \"development\": \"postgres\",\n                \"testing\": \"postgres\"\n            },\n\n            # configuring where to load the variable from \n            \"configOpts\": {\n\n                # Only allow loading from an environment variable, we might want to do this for security reasons for example \n                \"environmentVariable\": True\n            },\n\n            \"type\": str\n        },\n\n        \"DATABASE_NAME\":{\n            \"required\": True,\n            \"default\": \"myawesomedb\",\n            \"type\": str\n        },\n        \"DATABASE_PASSWORD\":{\n            \"required\": True,\n            \"default\":{\n                \"development\": \"postgres\",\n                \"testing\": \"postgres\"\n            },\n            \"configOpts\": {\n                \"environmentVariable\": True\n            },\n            \"type\" : str\n        },\n\n\n        \"DATABASE_URI\": {\n            # downstream configuration variable built on defined variables \ud83d\udd25\n            \"dependsOn\": [\n                \"DATABASE_HOST\",\n                \"DATABASE_NAME\",\n                \"DATABASE_PORT\",\n                \"DATABASE_PASSWORD\",\n                \"DATABASE_USER\"\n            ]\n\n            # build variable based upon depended on variables.\n            \"format\":\"postgresql+psycopg2://{DATABASE_USER}:{DATABASE_PASSWORD}@{DATABASE_HOST}:{DATABASE_PORT}/{DATABASE_NAME}\"\n        }\n    }\n}\n\n```\n\n\nNow we use moduconfig to load variables into a simple python dict based on our specifications.\n\n\n```py\n# main.py\nimport os\nfrom moduconfig import load_configuration_variables\nfrom src.config.configuration import APP_CONFIGS\nfrom src.config import production, development\n\napp_env = os.environ.get(\"APP_ENV\") or \"production\"\n\nvariables = load_configuration_variables(\n    spec = APP_CONFIGS,\n    environment=app_env,\n\n    # we have specified our production and development configuration files to be python modules however, this can be a python dictionary, a path to a JSON file, or a path to an .env file\n    # if no file is defined for a specific mode then configuration variables will only be loaded from environment variables\n    # you can also specify a single file to be used across all modes e.g.\n    # configuration_modules=default\n    # this can be a python module, python dictionary, path to JSON file or path to .env file\n    configuration_modules={\n        \"development\": development,\n        \"production\": production\n    }\n)\n```\n\nVariables will be loaded into a python dict and returned from load_configuration_variables. Here are some configuration variables returned when our mode is development\n\n```py\n{\n    \"DATABASE_NAME\": \"mydatabase\",\n    \"DATABASE_HOST\": \"localhost\",\n    \"DATABASE_PORT\": 5432,\n    \"DATABASE_USER\": \"postgres\",\n    \"DATABASE_PASSWORD\": \"postgres\"\n    \"DATABASE_URI\": \"postgresql+psycopg2://postgres:postgres@localhost:5432/mydatabase\"\n}\n```\n\nwe have specified a value other than the default by specifying an environment variable\n\n```sh \n$ export MY_AWESOME_APP_DATABASE_NAME=\"mydatabase\"\n```\n\nif you look closely you can see this is a concatination of the ```applicationName``` setting and the variable name. This ensures environment variables are unique to this application and we don't load a value from another application with a conflicting environment variable name.\n\nYou can now use these values to configure your application.\n\nIt doesn't stop there however ! We can generate documentation for our configuration using the moduconfig CLI ! \n\n```sh\n# make sure you activate your virtualenv if you installed moduconfig there \n\n$ ls\nmain.py src/\n$ moduconfig -c src/config/configuration.py:APP_CONFIGS -o HOW_TO_CONFIGURE.md\n```\n\nwe specify our configuration file using the -c argument. If it is a python module this will be the file path ( src/config/configuration.py in our case) followed by the variable to \naccess ( APP_CONFIG ) seperated by a colon. If it is a JSON file this will just be the path to the JSON file\n\nWe specify the output by the -o argument. Here we define the filename and path to the markdown file we want to generate. In this case we want to generate a markdown file at the root \nof our project called HOW_TO_CONFIGURE.\n\nAs your application grows it's simple to add configuration variables, simply go back to configuration.py and add the variable definition to you variables dictionary. Then call the moduconfig cli \nto regenerate your documentation! No figuring out, where you need to modify repeated code, add more boilerplate or add to the documentation. \n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Moro-Code/moduconfig", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "moduconfig", "package_url": "https://pypi.org/project/moduconfig/", "platform": "", "project_url": "https://pypi.org/project/moduconfig/", "project_urls": {"Homepage": "https://github.com/Moro-Code/moduconfig"}, "release_url": "https://pypi.org/project/moduconfig/0.0.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A declarative and powerful configuration APIfor application configuration and documentation", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>moduconfig \u2699\ufe0f</h1>\n<p>A declarative and powerful configuration API for application configuration and documentation.</p>\n<h2>Basic Usage \ud83e\udd37\u200d\u2642\ufe0f</h2>\n<p>Create a file that you can import across your application. This can be a python or JSON file. This example uses a python file called configuration.py within a\nconfig module in our source (src) module. If our entrypoint for our application is main.py, we will be able to import the configuration.py module and it's content\nlike so <code>from src.config.configuration import *</code> anywhere in the application.</p>\n<pre><code>src/\n    config/\n        __init__.py\n        configuration.py\n        # file with production variables\n        production.py\n        # file with development variables\n        development.py\n    __init__.py\nmain.py\n</code></pre>\n<p>configuration.py will have our configuration definition. You can also choose to do this in a JSON file as stated above which moduconfig will load and use.</p>\n<p>Here for example we are configuring an application that will connect to a database</p>\n<pre><span class=\"c1\"># configuration.py</span>\n\n<span class=\"n\">APP_CONFIGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># the name of your application, used to prefix the names of configuration variables for their environment variables </span>\n    <span class=\"c1\"># {applicationName}_{variableName} </span>\n    <span class=\"s2\">\"applicationName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MY_AWESOME_APP\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># we define our modes for our application, usually production and development but can be anything you like</span>\n    <span class=\"c1\"># the key is the mode name and the value is the description of what the mode does </span>\n    <span class=\"s2\">\"modes\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"testing\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mode for integration tests to ensure application is functioning correctly\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"development\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mode for developing the application, should only be used to develop locally and not to serve clients\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"production\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mode for running the application to serve clients\"</span> \n    <span class=\"p\">}</span>\n    <span class=\"s2\">\"variables\"</span><span class=\"p\">:{</span>\n        <span class=\"s2\">\"DATABASE_HOST\"</span><span class=\"p\">:{</span>\n            <span class=\"c1\"># error will be thrown if a value cannot be obtained </span>\n            <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"default\"</span><span class=\"p\">:{</span>\n                <span class=\"c1\"># default only in the selected modes </span>\n                <span class=\"s2\">\"development\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"testing\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span>\n            <span class=\"p\">},</span>\n\n            <span class=\"c1\"># NOTE: if this is a JSON file, simply wrap the type around qoutations</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># An optional description to the variable </span>\n            <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"The host name of the database without the port\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"DATABASE_PORT\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"c1\"># default across all modes</span>\n            <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"mi\">5432</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># environment variables are always strings, moduconfig will attempt to cast the value to the specified type if it's not a str</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n        <span class=\"p\">},</span>\n\n        <span class=\"s2\">\"DATABASE_USER\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n\n            <span class=\"s2\">\"default\"</span><span class=\"p\">:{</span>\n                <span class=\"s2\">\"development\"</span><span class=\"p\">:</span> <span class=\"s2\">\"postgres\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"testing\"</span><span class=\"p\">:</span> <span class=\"s2\">\"postgres\"</span>\n            <span class=\"p\">},</span>\n\n            <span class=\"c1\"># configuring where to load the variable from </span>\n            <span class=\"s2\">\"configOpts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\n                <span class=\"c1\"># Only allow loading from an environment variable, we might want to do this for security reasons for example </span>\n                <span class=\"s2\">\"environmentVariable\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n            <span class=\"p\">},</span>\n\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n        <span class=\"p\">},</span>\n\n        <span class=\"s2\">\"DATABASE_NAME\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"s2\">\"myawesomedb\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"DATABASE_PASSWORD\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"default\"</span><span class=\"p\">:{</span>\n                <span class=\"s2\">\"development\"</span><span class=\"p\">:</span> <span class=\"s2\">\"postgres\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"testing\"</span><span class=\"p\">:</span> <span class=\"s2\">\"postgres\"</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">\"configOpts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"environmentVariable\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n        <span class=\"p\">},</span>\n\n\n        <span class=\"s2\">\"DATABASE_URI\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># downstream configuration variable built on defined variables \ud83d\udd25</span>\n            <span class=\"s2\">\"dependsOn\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"DATABASE_HOST\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"DATABASE_NAME\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"DATABASE_PORT\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"DATABASE_PASSWORD\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"DATABASE_USER\"</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"c1\"># build variable based upon depended on variables.</span>\n            <span class=\"s2\">\"format\"</span><span class=\"p\">:</span><span class=\"s2\">\"postgresql+psycopg2://</span><span class=\"si\">{DATABASE_USER}</span><span class=\"s2\">:</span><span class=\"si\">{DATABASE_PASSWORD}</span><span class=\"s2\">@</span><span class=\"si\">{DATABASE_HOST}</span><span class=\"s2\">:</span><span class=\"si\">{DATABASE_PORT}</span><span class=\"s2\">/</span><span class=\"si\">{DATABASE_NAME}</span><span class=\"s2\">\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Now we use moduconfig to load variables into a simple python dict based on our specifications.</p>\n<pre><span class=\"c1\"># main.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">moduconfig</span> <span class=\"kn\">import</span> <span class=\"n\">load_configuration_variables</span>\n<span class=\"kn\">from</span> <span class=\"nn\">src.config.configuration</span> <span class=\"kn\">import</span> <span class=\"n\">APP_CONFIGS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">src.config</span> <span class=\"kn\">import</span> <span class=\"n\">production</span><span class=\"p\">,</span> <span class=\"n\">development</span>\n\n<span class=\"n\">app_env</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"APP_ENV\"</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"s2\">\"production\"</span>\n\n<span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"n\">load_configuration_variables</span><span class=\"p\">(</span>\n    <span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">APP_CONFIGS</span><span class=\"p\">,</span>\n    <span class=\"n\">environment</span><span class=\"o\">=</span><span class=\"n\">app_env</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># we have specified our production and development configuration files to be python modules however, this can be a python dictionary, a path to a JSON file, or a path to an .env file</span>\n    <span class=\"c1\"># if no file is defined for a specific mode then configuration variables will only be loaded from environment variables</span>\n    <span class=\"c1\"># you can also specify a single file to be used across all modes e.g.</span>\n    <span class=\"c1\"># configuration_modules=default</span>\n    <span class=\"c1\"># this can be a python module, python dictionary, path to JSON file or path to .env file</span>\n    <span class=\"n\">configuration_modules</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"development\"</span><span class=\"p\">:</span> <span class=\"n\">development</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"production\"</span><span class=\"p\">:</span> <span class=\"n\">production</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Variables will be loaded into a python dict and returned from load_configuration_variables. Here are some configuration variables returned when our mode is development</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"DATABASE_NAME\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mydatabase\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"DATABASE_HOST\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"DATABASE_PORT\"</span><span class=\"p\">:</span> <span class=\"mi\">5432</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"DATABASE_USER\"</span><span class=\"p\">:</span> <span class=\"s2\">\"postgres\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"DATABASE_PASSWORD\"</span><span class=\"p\">:</span> <span class=\"s2\">\"postgres\"</span>\n    <span class=\"s2\">\"DATABASE_URI\"</span><span class=\"p\">:</span> <span class=\"s2\">\"postgresql+psycopg2://postgres:postgres@localhost:5432/mydatabase\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>we have specified a value other than the default by specifying an environment variable</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">MY_AWESOME_APP_DATABASE_NAME</span><span class=\"o\">=</span><span class=\"s2\">\"mydatabase\"</span>\n</pre>\n<p>if you look closely you can see this is a concatination of the <code>applicationName</code> setting and the variable name. This ensures environment variables are unique to this application and we don't load a value from another application with a conflicting environment variable name.</p>\n<p>You can now use these values to configure your application.</p>\n<p>It doesn't stop there however ! We can generate documentation for our configuration using the moduconfig CLI !</p>\n<pre><span class=\"c1\"># make sure you activate your virtualenv if you installed moduconfig there </span>\n\n$ ls\nmain.py src/\n$ moduconfig -c src/config/configuration.py:APP_CONFIGS -o HOW_TO_CONFIGURE.md\n</pre>\n<p>we specify our configuration file using the -c argument. If it is a python module this will be the file path ( src/config/configuration.py in our case) followed by the variable to\naccess ( APP_CONFIG ) seperated by a colon. If it is a JSON file this will just be the path to the JSON file</p>\n<p>We specify the output by the -o argument. Here we define the filename and path to the markdown file we want to generate. In this case we want to generate a markdown file at the root\nof our project called HOW_TO_CONFIGURE.</p>\n<p>As your application grows it's simple to add configuration variables, simply go back to configuration.py and add the variable definition to you variables dictionary. Then call the moduconfig cli\nto regenerate your documentation! No figuring out, where you need to modify repeated code, add more boilerplate or add to the documentation.</p>\n\n          </div>"}, "last_serial": 6479982, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0caa7e9eaff0e7c9bd350f9748dc8e48", "sha256": "e3a236c77acbd6a4f3722a6c66624411e3ffb7a441857655be64d8bd8e77f0e3"}, "downloads": -1, "filename": "moduconfig-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0caa7e9eaff0e7c9bd350f9748dc8e48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4641, "upload_time": "2020-01-18T23:13:21", "upload_time_iso_8601": "2020-01-18T23:13:21.708035Z", "url": "https://files.pythonhosted.org/packages/e2/e5/8da81804cd945edcb99519314bc428a0e9fcc14b380935f3ec4a83a8d2dd/moduconfig-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c088eaefce438a7671a2f7cac1377b9", "sha256": "3f56e8d746216e17ddac4ed3f0abcc8e8428c0771d21e11b43d02ecadeb8fd06"}, "downloads": -1, "filename": "moduconfig-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2c088eaefce438a7671a2f7cac1377b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4162, "upload_time": "2020-01-18T23:13:24", "upload_time_iso_8601": "2020-01-18T23:13:24.208897Z", "url": "https://files.pythonhosted.org/packages/40/81/f34bbcd8c84e0d65fedad3a297db3364ddf0db38b11c57b172732b20d534/moduconfig-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0caa7e9eaff0e7c9bd350f9748dc8e48", "sha256": "e3a236c77acbd6a4f3722a6c66624411e3ffb7a441857655be64d8bd8e77f0e3"}, "downloads": -1, "filename": "moduconfig-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0caa7e9eaff0e7c9bd350f9748dc8e48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4641, "upload_time": "2020-01-18T23:13:21", "upload_time_iso_8601": "2020-01-18T23:13:21.708035Z", "url": "https://files.pythonhosted.org/packages/e2/e5/8da81804cd945edcb99519314bc428a0e9fcc14b380935f3ec4a83a8d2dd/moduconfig-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c088eaefce438a7671a2f7cac1377b9", "sha256": "3f56e8d746216e17ddac4ed3f0abcc8e8428c0771d21e11b43d02ecadeb8fd06"}, "downloads": -1, "filename": "moduconfig-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2c088eaefce438a7671a2f7cac1377b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4162, "upload_time": "2020-01-18T23:13:24", "upload_time_iso_8601": "2020-01-18T23:13:24.208897Z", "url": "https://files.pythonhosted.org/packages/40/81/f34bbcd8c84e0d65fedad3a297db3364ddf0db38b11c57b172732b20d534/moduconfig-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:44 2020"}