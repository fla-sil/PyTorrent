{"info": {"author": "salpreh", "author_email": "salva.perez46@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# tablat\n\n\n[![PyPI version](https://badge.fury.io/py/tablat.svg)](https://badge.fury.io/py/tablat)\n[![PyPI version](https://img.shields.io/github/license/salpreh/tablat.svg)](https://img.shields.io/github/license/salpreh/tablat.svg)\n\n**A simple way to print output in a table**\n\n---\n## Basic usage\nJust create a `Table` object and give it a headers list and the data. The number of columns will be calculated from the number of headers.\n\n#### Code sample\n```py\nfrom pathlib import Path\nfrom tablat import Table\n\nfolder_path = Path('./')\nheader = ['FILE_NAME', 'FOLDER', 'FILES_IN']\ndata = []\n\nfor file_path in folder_path.iterdir():\n    data.append(file_path.name)\n    if file_path.is_dir():\n        data.extend(['YES', len([f for f in file_path.iterdir()])])\n\n    else:\n        data.extend(['NO', 0])\n\nmy_table = Table(data, header)\nmy_table.print_table()\n```\n*Note: `print(my_table)` is also valid*\n\n#### Output\n<img src=\"https://raw.githubusercontent.com/salpreh/tablat/master/assets/tablat_output.png\" alt=\"table_output\">\n\n---\n## Installation\nYou can intall the package using [pip](https://pip.pypa.io/en/stable/) (Python Package Installer)\n```sh\npip install tablat\n```\nor\n```sh\npython -m pip install tablat\n```\n\n---\n## Usage\n\n### Creating and modifying `Table`\n\n`Table` object can be initialized with the data or empty:\n```py\nmy_table = Table(data=my_data, headers=my_headers)\n```\nIf it is initialized empty it can be modified or updated later:\n```py\nmy_table = Table()\nmy_table.headers = ['FILE_NAME', 'IS_DIR']\nmy_table.table_data = ['My docs', True, 'profile_pic.png', False]\n```\nTable data can be expanded anytime:\n```py\nfor file_path in Path('./').iterdir():\n  my_table.add_data([file_path.name, file_path.is_dir()])\n```\n\n#### Loading `Table` data by column\n\nYou can use the method `set_column_content(column_dict)` to init the `Table` by columns.\nThis method expects a `dict` with the column names as **keys** and a list with the column data as **values**.\n\n```json\n{\n  \"column_name1\": [\"item11\", \"item12\", \"item13\"],\n  \"column_name2\": [\"item21\", \"item21\", \"item23\"],\n  .\n  .\n  .\n}\n```\n\nHere is the example from the begining modified:\n```py\nfrom pathlib import Path\nfrom tablat import Table\n\nfolder_path = Path('./')\ncolumn_data = {\n    'FILE_NAME': [],\n    'FOLDER': [],\n    'FILES_IN': []\n}\nfor file_path in test_path.iterdir():\n    column_data['FILE_NAME'].append(file_path.name)\n    column_data['FOLDER'].append('Y' if file_path.is_dir() else 'N')\n    column_data['FILES_IN'].append(len([f for f in file_path.iterdir()]) if file_path.is_dir() else 0)\n\nTable().set_column_content(column_data).print_table()\n```\n\nThe method `get_column_conten()` returns a `dict` with the same structure even if you didn't initialized the table with `set_column_content(column_dict)`.\n\n#### Loading `Table` data from _json_\n\nThe method `load_data(file_path)` initializes the table from a _json_ file. The _json_ file should\nhave the same structure that `set_column_content(column_dict)`, column name as **key** and column content list as **value**:\n```json\n{\n  \"column_name1\": [\"item11\", \"item12\", \"item13\"],\n  \"column_name2\": [\"item21\", \"item21\", \"item23\"],\n  .\n  .\n  .\n}\n```\n\n### Modifying column alignment\nBy default first column will be aligned to left and the rest to right. The alignment\nfollows the same encoding as the string `format` function, a character can be passed to set the alignment:\n\n- Right align: `>`\n- Left align: `<`\n- Center align: `^`\n\nColumn alignment can be changed with `alignment` attribute or `set_column_align()` method.\n\nWith `alignment` attribute you can provide a list with the alignment for each column:\n```py\nmy_table.alignment = ['^', '^', '>']\n```\n\nWith `set_column_align(index, align_char)` you can change a specific column alignment (_column index starts form 0)_:\n```py\nmy_table.set_column_align(0, '<')\n```\n\n### Filtering columns to print\nBy default `print_table()` will print all columns in the table, but you can filter what columns should be printed.\n\n`print_table()` have two optional arguments: `show_columns` and `hide_columns`. This arguments expects a list with the indexes of the columns to print or hide respectively. If the two arguments are used `hide_columns` will be ignored.\n```py\n# Shows first and third column\nmy_table.print_table(show_columns=[0, 2])\n\n# Hide third column and shows the rest\nmy_table.print_table(hide_columns=[2])\n```\n\n### Additional Notes\nYou can retrieve data form the table using indices\n\n```py\n# Get first row data\nmy_table[0]\n\n# Get third row, second column\nmy_table[2][1]\n```\n\n---\n## `Table` style\n### Syling the table with `TabStyle`\n\n`TabStyle` class is used to encapsulate style options for the table. Current values are:\n\n- Table borders\n- Row separators\n- Column separators\n\n*Note: default style is **with borders** and **no separators** for rows and columns*\n\nUsing `TabStyle` to configure the style:\n```py\nform tablat import Table, TabStyle\n\n\n# Style object with no borders and row separators\npref_style = TabStyle(borders=False, row_sep=True)\n.\n.\n.\n# Initializing Table with our prefered style\nsome_tab = Table(data, headers, pref_style)\n.\n.\n.\n# Restoring Table default style\nsome_tab.style = TabStyle()\n```\n\n`Table` objects are initialized with a default `TabStyle` that can be modified\n```py\nmy_table = Table()\n\n# Disabling borders\nmy_table.syle.borders = False\n\n# Modifying style properties at once\nmy_table.style.update(col_sep=True, row_sep=True)\n```\n\n### Sample table with style modifications\n<img src=\"https://raw.githubusercontent.com/salpreh/tablat/master/assets/full_tab.png\" alt=\"table with borders and separators\">\n<img src=\"https://raw.githubusercontent.com/salpreh/tablat/master/assets/col_sep.png\" alt=\"table with row separators\">\n\n<img src=\"https://raw.githubusercontent.com/salpreh/tablat/master/assets/borders_cols.png\" alt=\"table with borders and column separator\">\n<img src=\"https://raw.githubusercontent.com/salpreh/tablat/master/assets/clean_tab.png\" alt=\"table with no borders nor separators\">\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/salpreh/tablat", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "tablat", "package_url": "https://pypi.org/project/tablat/", "platform": "", "project_url": "https://pypi.org/project/tablat/", "project_urls": {"Homepage": "https://github.com/salpreh/tablat"}, "release_url": "https://pypi.org/project/tablat/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Print basic tables in python", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tablat</h1>\n<p><a href=\"https://badge.fury.io/py/tablat\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/992a818e9fbfdac9744cdc1a093271f2667ffa2e/68747470733a2f2f62616467652e667572792e696f2f70792f7461626c61742e737667\"></a>\n<a href=\"https://img.shields.io/github/license/salpreh/tablat.svg\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a9afda8f3a7341e566a1d2d444cfcb60eb0347a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f73616c707265682f7461626c61742e737667\"></a></p>\n<p><strong>A simple way to print output in a table</strong></p>\n<hr>\n<h2>Basic usage</h2>\n<p>Just create a <code>Table</code> object and give it a headers list and the data. The number of columns will be calculated from the number of headers.</p>\n<h4>Code sample</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tablat</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span>\n\n<span class=\"n\">folder_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'./'</span><span class=\"p\">)</span>\n<span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'FILE_NAME'</span><span class=\"p\">,</span> <span class=\"s1\">'FOLDER'</span><span class=\"p\">,</span> <span class=\"s1\">'FILES_IN'</span><span class=\"p\">]</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">file_path</span> <span class=\"ow\">in</span> <span class=\"n\">folder_path</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">():</span>\n    <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">():</span>\n        <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s1\">'YES'</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">([</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()])])</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s1\">'NO'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">my_table</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">)</span>\n<span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">print_table</span><span class=\"p\">()</span>\n</pre>\n<p><em>Note: <code>print(my_table)</code> is also valid</em></p>\n<h4>Output</h4>\n<img alt=\"table_output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cccedbc03952a8d8a0e8f6e6502dcf3c3bbc88e2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f7461626c61742f6d61737465722f6173736574732f7461626c61745f6f75747075742e706e67\">\n<hr>\n<h2>Installation</h2>\n<p>You can intall the package using <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> (Python Package Installer)</p>\n<pre>pip install tablat\n</pre>\n<p>or</p>\n<pre>python -m pip install tablat\n</pre>\n<hr>\n<h2>Usage</h2>\n<h3>Creating and modifying <code>Table</code></h3>\n<p><code>Table</code> object can be initialized with the data or empty:</p>\n<pre><span class=\"n\">my_table</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">my_data</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">my_headers</span><span class=\"p\">)</span>\n</pre>\n<p>If it is initialized empty it can be modified or updated later:</p>\n<pre><span class=\"n\">my_table</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">()</span>\n<span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'FILE_NAME'</span><span class=\"p\">,</span> <span class=\"s1\">'IS_DIR'</span><span class=\"p\">]</span>\n<span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">table_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'My docs'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'profile_pic.png'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n</pre>\n<p>Table data can be expanded anytime:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">file_path</span> <span class=\"ow\">in</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'./'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">():</span>\n  <span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">add_data</span><span class=\"p\">([</span><span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()])</span>\n</pre>\n<h4>Loading <code>Table</code> data by column</h4>\n<p>You can use the method <code>set_column_content(column_dict)</code> to init the <code>Table</code> by columns.\nThis method expects a <code>dict</code> with the column names as <strong>keys</strong> and a list with the column data as <strong>values</strong>.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"column_name1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"item11\"</span><span class=\"p\">,</span> <span class=\"s2\">\"item12\"</span><span class=\"p\">,</span> <span class=\"s2\">\"item13\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"column_name2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"item21\"</span><span class=\"p\">,</span> <span class=\"s2\">\"item21\"</span><span class=\"p\">,</span> <span class=\"s2\">\"item23\"</span><span class=\"p\">],</span>\n  <span class=\"err\">.</span>\n  <span class=\"err\">.</span>\n  <span class=\"err\">.</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Here is the example from the begining modified:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tablat</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span>\n\n<span class=\"n\">folder_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'./'</span><span class=\"p\">)</span>\n<span class=\"n\">column_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'FILE_NAME'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s1\">'FOLDER'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s1\">'FILES_IN'</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">for</span> <span class=\"n\">file_path</span> <span class=\"ow\">in</span> <span class=\"n\">test_path</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">():</span>\n    <span class=\"n\">column_data</span><span class=\"p\">[</span><span class=\"s1\">'FILE_NAME'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"n\">column_data</span><span class=\"p\">[</span><span class=\"s1\">'FOLDER'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Y'</span> <span class=\"k\">if</span> <span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"s1\">'N'</span><span class=\"p\">)</span>\n    <span class=\"n\">column_data</span><span class=\"p\">[</span><span class=\"s1\">'FILES_IN'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">([</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()])</span> <span class=\"k\">if</span> <span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">Table</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_column_content</span><span class=\"p\">(</span><span class=\"n\">column_data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">print_table</span><span class=\"p\">()</span>\n</pre>\n<p>The method <code>get_column_conten()</code> returns a <code>dict</code> with the same structure even if you didn't initialized the table with <code>set_column_content(column_dict)</code>.</p>\n<h4>Loading <code>Table</code> data from <em>json</em></h4>\n<p>The method <code>load_data(file_path)</code> initializes the table from a <em>json</em> file. The <em>json</em> file should\nhave the same structure that <code>set_column_content(column_dict)</code>, column name as <strong>key</strong> and column content list as <strong>value</strong>:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"column_name1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"item11\"</span><span class=\"p\">,</span> <span class=\"s2\">\"item12\"</span><span class=\"p\">,</span> <span class=\"s2\">\"item13\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"column_name2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"item21\"</span><span class=\"p\">,</span> <span class=\"s2\">\"item21\"</span><span class=\"p\">,</span> <span class=\"s2\">\"item23\"</span><span class=\"p\">],</span>\n  <span class=\"err\">.</span>\n  <span class=\"err\">.</span>\n  <span class=\"err\">.</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Modifying column alignment</h3>\n<p>By default first column will be aligned to left and the rest to right. The alignment\nfollows the same encoding as the string <code>format</code> function, a character can be passed to set the alignment:</p>\n<ul>\n<li>Right align: <code>&gt;</code></li>\n<li>Left align: <code>&lt;</code></li>\n<li>Center align: <code>^</code></li>\n</ul>\n<p>Column alignment can be changed with <code>alignment</code> attribute or <code>set_column_align()</code> method.</p>\n<p>With <code>alignment</code> attribute you can provide a list with the alignment for each column:</p>\n<pre><span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">alignment</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'^'</span><span class=\"p\">,</span> <span class=\"s1\">'^'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">]</span>\n</pre>\n<p>With <code>set_column_align(index, align_char)</code> you can change a specific column alignment (<em>column index starts form 0)</em>:</p>\n<pre><span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">set_column_align</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;'</span><span class=\"p\">)</span>\n</pre>\n<h3>Filtering columns to print</h3>\n<p>By default <code>print_table()</code> will print all columns in the table, but you can filter what columns should be printed.</p>\n<p><code>print_table()</code> have two optional arguments: <code>show_columns</code> and <code>hide_columns</code>. This arguments expects a list with the indexes of the columns to print or hide respectively. If the two arguments are used <code>hide_columns</code> will be ignored.</p>\n<pre><span class=\"c1\"># Shows first and third column</span>\n<span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">print_table</span><span class=\"p\">(</span><span class=\"n\">show_columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Hide third column and shows the rest</span>\n<span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">print_table</span><span class=\"p\">(</span><span class=\"n\">hide_columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n<h3>Additional Notes</h3>\n<p>You can retrieve data form the table using indices</p>\n<pre><span class=\"c1\"># Get first row data</span>\n<span class=\"n\">my_table</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get third row, second column</span>\n<span class=\"n\">my_table</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<hr>\n<h2><code>Table</code> style</h2>\n<h3>Syling the table with <code>TabStyle</code></h3>\n<p><code>TabStyle</code> class is used to encapsulate style options for the table. Current values are:</p>\n<ul>\n<li>Table borders</li>\n<li>Row separators</li>\n<li>Column separators</li>\n</ul>\n<p><em>Note: default style is <strong>with borders</strong> and <strong>no separators</strong> for rows and columns</em></p>\n<p>Using <code>TabStyle</code> to configure the style:</p>\n<pre><span class=\"n\">form</span> <span class=\"n\">tablat</span> <span class=\"kn\">import</span> <span class=\"nn\">Table</span><span class=\"o\">,</span> <span class=\"nn\">TabStyle</span>\n\n\n<span class=\"c1\"># Style object with no borders and row separators</span>\n<span class=\"n\">pref_style</span> <span class=\"o\">=</span> <span class=\"n\">TabStyle</span><span class=\"p\">(</span><span class=\"n\">borders</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">row_sep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">.</span>\n<span class=\"o\">.</span>\n<span class=\"o\">.</span>\n<span class=\"c1\"># Initializing Table with our prefered style</span>\n<span class=\"n\">some_tab</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">pref_style</span><span class=\"p\">)</span>\n<span class=\"o\">.</span>\n<span class=\"o\">.</span>\n<span class=\"o\">.</span>\n<span class=\"c1\"># Restoring Table default style</span>\n<span class=\"n\">some_tab</span><span class=\"o\">.</span><span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"n\">TabStyle</span><span class=\"p\">()</span>\n</pre>\n<p><code>Table</code> objects are initialized with a default <code>TabStyle</code> that can be modified</p>\n<pre><span class=\"n\">my_table</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Disabling borders</span>\n<span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">syle</span><span class=\"o\">.</span><span class=\"n\">borders</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Modifying style properties at once</span>\n<span class=\"n\">my_table</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">col_sep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">row_sep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Sample table with style modifications</h3>\n<img alt=\"table with borders and separators\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad27c77dd9a7451936ad294544ecb595938ff479/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f7461626c61742f6d61737465722f6173736574732f66756c6c5f7461622e706e67\">\n<img alt=\"table with row separators\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e50f51204f33c49c50e475ea79e735dd90a38973/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f7461626c61742f6d61737465722f6173736574732f636f6c5f7365702e706e67\">\n<img alt=\"table with borders and column separator\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0de7bd1b16ea839c63df43550c63ecb27104a8a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f7461626c61742f6d61737465722f6173736574732f626f72646572735f636f6c732e706e67\">\n<img alt=\"table with no borders nor separators\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf86974fd19d225cf3e5d8bbace59044d45817e4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f7461626c61742f6d61737465722f6173736574732f636c65616e5f7461622e706e67\">\n\n          </div>"}, "last_serial": 4964202, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "dde5760309bc18bdc21f2a1dcae634b2", "sha256": "d36a036b42a2c7208ebe70505eb7b41ab6f0042a600871e918e47dcfb591cf34"}, "downloads": -1, "filename": "tablat-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dde5760309bc18bdc21f2a1dcae634b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3470, "upload_time": "2019-03-01T11:54:53", "upload_time_iso_8601": "2019-03-01T11:54:53.626838Z", "url": "https://files.pythonhosted.org/packages/4e/f3/52e9bede37ae362d1d0ded4c446ee9b5fe62f43e2414c4b3cb1fcc3e8f4c/tablat-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "833416c62ceff30101d851d1009a08ad", "sha256": "8975461070ed5cb65b2d69d3d3b8d39c75b286120861f9eef25e1b4e47185ee6"}, "downloads": -1, "filename": "tablat-0.1.0.tar.gz", "has_sig": false, "md5_digest": "833416c62ceff30101d851d1009a08ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2299, "upload_time": "2019-03-01T11:54:55", "upload_time_iso_8601": "2019-03-01T11:54:55.626778Z", "url": "https://files.pythonhosted.org/packages/33/0a/f189b80f93cd541fc565120b2736ef2d39aec38db7694d279407ddb0374e/tablat-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4ac405b8aa03526c56066e73db02a556", "sha256": "6d6ee9b17a97fdb53ffbfd2b232f265558368aec89773e24aa93fba809df1feb"}, "downloads": -1, "filename": "tablat-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4ac405b8aa03526c56066e73db02a556", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4473, "upload_time": "2019-03-03T15:50:39", "upload_time_iso_8601": "2019-03-03T15:50:39.518645Z", "url": "https://files.pythonhosted.org/packages/99/de/205f98cdac808ffcff19d8592f5005578ed43509d381732e284969d377a6/tablat-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7bdfc991c386178ad49f14a36ef8f41", "sha256": "1d58365b88355c1918fb2f7e50755626759764e78a3d8fa7e5997b16002f1267"}, "downloads": -1, "filename": "tablat-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c7bdfc991c386178ad49f14a36ef8f41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3716, "upload_time": "2019-03-03T15:50:40", "upload_time_iso_8601": "2019-03-03T15:50:40.712532Z", "url": "https://files.pythonhosted.org/packages/0a/2b/28338b8959198cf42b832f1aefcf838c84b8be485ff52085321b1fa7bf4f/tablat-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "bf20d77871045f35e5c889392ac01676", "sha256": "4b1da365e2845e3c5d9f40a20a4f49381fa308086dd929d08c983aa4924b8203"}, "downloads": -1, "filename": "tablat-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bf20d77871045f35e5c889392ac01676", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4021, "upload_time": "2019-03-03T16:19:05", "upload_time_iso_8601": "2019-03-03T16:19:05.570227Z", "url": "https://files.pythonhosted.org/packages/a2/74/1df56ab078399d708bde31de89b00bc1ad755b496890a9ba9daad57ef6dd/tablat-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffbc0f46419a9ce24177b284ae3f59ea", "sha256": "f5c8e7c841bac636c7488f1cf093bd3c55acf3b35ed8cba7e274965175d39a09"}, "downloads": -1, "filename": "tablat-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ffbc0f46419a9ce24177b284ae3f59ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3669, "upload_time": "2019-03-03T16:19:06", "upload_time_iso_8601": "2019-03-03T16:19:06.963820Z", "url": "https://files.pythonhosted.org/packages/fa/ef/90231ad15d0ea1c4dc03a1e1fe20568fe3f7a227d15766d21f1848c1fbd2/tablat-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "35f1fcd3d8a6daa3f77cfb4524c1feb2", "sha256": "3e41f88e1221ef42088f85e9f9df8b27c7f019503a49263f8720a571f02fce6b"}, "downloads": -1, "filename": "tablat-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "35f1fcd3d8a6daa3f77cfb4524c1feb2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5912, "upload_time": "2019-03-06T19:28:46", "upload_time_iso_8601": "2019-03-06T19:28:46.547201Z", "url": "https://files.pythonhosted.org/packages/5d/c6/ef784cd3e05896166730de1b7f6af2f00d9d63570ac6805f91a6f2f25822/tablat-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edef11cd40eb9d674b71d66ae2b82116", "sha256": "6cf9a0582c4ba287b9a28c739a500a650cbd98756e470f247efb69afba171915"}, "downloads": -1, "filename": "tablat-0.1.3.tar.gz", "has_sig": false, "md5_digest": "edef11cd40eb9d674b71d66ae2b82116", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5543, "upload_time": "2019-03-06T19:28:47", "upload_time_iso_8601": "2019-03-06T19:28:47.727407Z", "url": "https://files.pythonhosted.org/packages/4c/ad/3aba3560baceee2fcf7bc7a3898c410f3c6f0041dd960591beb2e8d255ed/tablat-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c46dbae89401c22048be3d6081793fb3", "sha256": "516fc7d68b5311c1b68c3082a93a04361743e434a3cb04ec995fa233d6832e09"}, "downloads": -1, "filename": "tablat-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c46dbae89401c22048be3d6081793fb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7665, "upload_time": "2019-03-19T15:26:49", "upload_time_iso_8601": "2019-03-19T15:26:49.224858Z", "url": "https://files.pythonhosted.org/packages/a1/27/fdc6f8033bb7057cd573aa5bb7c2a7d59ecc9046b2bab50d138090481fe3/tablat-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64845ecbb7782e085a0803166ef0b3aa", "sha256": "692ed0e328c494439f701d91278ba189fc5df69d394952bd0d6786e9d1872147"}, "downloads": -1, "filename": "tablat-0.1.4.tar.gz", "has_sig": false, "md5_digest": "64845ecbb7782e085a0803166ef0b3aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7879, "upload_time": "2019-03-19T15:26:50", "upload_time_iso_8601": "2019-03-19T15:26:50.517100Z", "url": "https://files.pythonhosted.org/packages/8b/ed/aa879c366289f7e1e0ced94bd655c0637b5eef0d3e551f0e8cb35ce2b643/tablat-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "fcf60015dae969c48c93238132906d48", "sha256": "0182dcbd061fbf2a864bac6bbd5b434de044dc2283d70105bda202e74e7cf8bf"}, "downloads": -1, "filename": "tablat-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fcf60015dae969c48c93238132906d48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7664, "upload_time": "2019-03-19T23:02:02", "upload_time_iso_8601": "2019-03-19T23:02:02.287995Z", "url": "https://files.pythonhosted.org/packages/00/3b/eddd43fb8e9c171638050cbe91cb946293764a357ad64718f526e0d5dcd6/tablat-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b066eadf2ca2776796f982a9360d108a", "sha256": "309cb62e6ad5b549d7e3fe81a4e00c4e6c1045f7419e0e84e065ae0cc5ac6be2"}, "downloads": -1, "filename": "tablat-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b066eadf2ca2776796f982a9360d108a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8426, "upload_time": "2019-03-19T23:02:03", "upload_time_iso_8601": "2019-03-19T23:02:03.575968Z", "url": "https://files.pythonhosted.org/packages/7b/59/a1edda0c8e6b50d5b8f23a6fd54e2b16e31436443d4d2cfe1d2665d30b01/tablat-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6dbb3bdff3a35f135f7097abb12247de", "sha256": "44d5d1803dfd5c06457ecff0e263e33132faff8d78dd67217984a8ff5ec6becf"}, "downloads": -1, "filename": "tablat-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6dbb3bdff3a35f135f7097abb12247de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8772, "upload_time": "2019-03-20T15:01:16", "upload_time_iso_8601": "2019-03-20T15:01:16.192520Z", "url": "https://files.pythonhosted.org/packages/a7/e1/5633e9276f4f1f9323e73fa39feefe2d05e49e40922038acb69b4f6df29b/tablat-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5842048d6fa822a2228114e11a2fb532", "sha256": "570afe0d2775181f37a496ba7bebd93cde5c9d2626a2ffeb56ca29d7ac5b0eeb"}, "downloads": -1, "filename": "tablat-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5842048d6fa822a2228114e11a2fb532", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9951, "upload_time": "2019-03-20T15:01:17", "upload_time_iso_8601": "2019-03-20T15:01:17.674031Z", "url": "https://files.pythonhosted.org/packages/f1/c4/06db3e7bb573e2ebac025be0212bde0b93ea5d40f65a0ec408625698e11b/tablat-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6dbb3bdff3a35f135f7097abb12247de", "sha256": "44d5d1803dfd5c06457ecff0e263e33132faff8d78dd67217984a8ff5ec6becf"}, "downloads": -1, "filename": "tablat-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6dbb3bdff3a35f135f7097abb12247de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8772, "upload_time": "2019-03-20T15:01:16", "upload_time_iso_8601": "2019-03-20T15:01:16.192520Z", "url": "https://files.pythonhosted.org/packages/a7/e1/5633e9276f4f1f9323e73fa39feefe2d05e49e40922038acb69b4f6df29b/tablat-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5842048d6fa822a2228114e11a2fb532", "sha256": "570afe0d2775181f37a496ba7bebd93cde5c9d2626a2ffeb56ca29d7ac5b0eeb"}, "downloads": -1, "filename": "tablat-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5842048d6fa822a2228114e11a2fb532", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9951, "upload_time": "2019-03-20T15:01:17", "upload_time_iso_8601": "2019-03-20T15:01:17.674031Z", "url": "https://files.pythonhosted.org/packages/f1/c4/06db3e7bb573e2ebac025be0212bde0b93ea5d40f65a0ec408625698e11b/tablat-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:45 2020"}