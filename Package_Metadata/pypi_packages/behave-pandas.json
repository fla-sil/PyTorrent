{"info": {"author": "Cl\u00e9ment Bouscasse", "author_email": "clement.bouscasse@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# behave-pandas\n\nUtility package for the [Behave](https://github.com/behave/behave) BDD testing framework, to make converting gherkin tables\nto and from [pandas](https://github.com/pandas-dev/pandas) data frames a breeze.\n\n## Build Status\n![Travis CI badge](https://travis-ci.org/clembou/behave-pandas.svg?branch=master)\n\n## Installation\n\n```bash\npip install behave-pandas\n```\n\n## Features\n\n* Easily convert a Gherkin table into a pandas data frame with explicit dtype information\n* Easily convert a pandas data frame into a behave table that can be parsed by behave-pandas\n* Support converting data frames with multiple index levels either on columns or rows\n* Handle missing data for dtypes that support it.\n\n## API\n\nThe behave-pandas api is extremely simple, and consists in two functions:\n\n```python\nfrom behave_pandas import table_to_dataframe, dataframe_to_table\n```\n\n## Example\n\n```gherkin\nFeature: Table printer\n\n  as a tester\n  I want to be able to create gherkin tables from existing data frames\n\n  Scenario: simple index\n    Given a gherkin table as input\n      | str       | float     | str                 |\n      | index_col | float_col | str_col             |\n      | egg       | 3.0       | silly walks         |\n      | spam      | 4.1       | spanish inquisition |\n      | bacon     | 5.2       | dead parrot         |\n    When converted to a data frame using 1 row as column names and 1 column as index\n    And printed using data_frame_to_table\n    Then it prints a valid string copy pasteable into gherkin files\n    \"\"\"\n    | object    | float64   | object              |\n    | index_col | float_col | str_col             |\n    | egg       | 3.0       | silly walks         |\n    | spam      | 4.1       | spanish inquisition |\n    | bacon     | 5.2       | dead parrot         |\n    \"\"\"\n```\n\nAssociated steps:\n\n```python\nfrom behave import *\nfrom behave_pandas import table_to_dataframe, dataframe_to_table\n\nuse_step_matcher(\"parse\")\n\n@given(\"a gherkin table as input\")\ndef step_impl(context,):\n    context.input = context.table\n\n@when('converted to a data frame using {column_levels:d} row as column names and {index_levels:d} column as index')\ndef step_impl(context, column_levels, index_levels):\n    context.parsed = table_to_dataframe(context.input, column_levels=column_levels, index_levels=index_levels)\n\n\n@then(\"it prints a valid string copy pasteable into gherkin files\")\ndef step_impl(context):\n    assert context.result == context.text\n\n\n@step(\"printed using data_frame_to_table\")\ndef step_impl(context):\n    context.result = dataframe_to_table(context.parsed)\n```\n\nParsed dataframe:\n\n```\n>>> context.parsed\n           float_col              str_col\nindex_col\negg              3.0          silly walks\nspam             4.1  spanish inquisition\nbacon            5.2          dead parrot\n\n>>> context.parsed.info()\n<class 'pandas.core.frame.DataFrame'>\nIndex: 3 entries, egg to bacon\nData columns (total 2 columns):\nfloat_col    3 non-null float64\nstr_col      3 non-null object\ndtypes: float64(1), object(1)\nmemory usage: 72.0+ bytes\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/clembou/behave-pandas", "keywords": "behave pandas testing bdd", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "behave-pandas", "package_url": "https://pypi.org/project/behave-pandas/", "platform": "", "project_url": "https://pypi.org/project/behave-pandas/", "project_urls": {"Homepage": "https://github.com/clembou/behave-pandas"}, "release_url": "https://pypi.org/project/behave-pandas/0.4.0/", "requires_dist": ["behave", "pandas (>=0.21)", "tabulate"], "requires_python": ">=3.5", "summary": "Provides helper functions to help converting behave tables into pandas dataframes and vice versa.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>behave-pandas</h1>\n<p>Utility package for the <a href=\"https://github.com/behave/behave\" rel=\"nofollow\">Behave</a> BDD testing framework, to make converting gherkin tables\nto and from <a href=\"https://github.com/pandas-dev/pandas\" rel=\"nofollow\">pandas</a> data frames a breeze.</p>\n<h2>Build Status</h2>\n<p><img alt=\"Travis CI badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2937ddccb13f039b6ae5331e2329d71f56efd37e/68747470733a2f2f7472617669732d63692e6f72672f636c656d626f752f6265686176652d70616e6461732e7376673f6272616e63683d6d6173746572\"></p>\n<h2>Installation</h2>\n<pre>pip install behave-pandas\n</pre>\n<h2>Features</h2>\n<ul>\n<li>Easily convert a Gherkin table into a pandas data frame with explicit dtype information</li>\n<li>Easily convert a pandas data frame into a behave table that can be parsed by behave-pandas</li>\n<li>Support converting data frames with multiple index levels either on columns or rows</li>\n<li>Handle missing data for dtypes that support it.</li>\n</ul>\n<h2>API</h2>\n<p>The behave-pandas api is extremely simple, and consists in two functions:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">behave_pandas</span> <span class=\"kn\">import</span> <span class=\"n\">table_to_dataframe</span><span class=\"p\">,</span> <span class=\"n\">dataframe_to_table</span>\n</pre>\n<h2>Example</h2>\n<pre><span class=\"k\">Feature:</span><span class=\"nf\"> Table printer</span>\n\n<span class=\"nf\">  as a tester</span>\n<span class=\"nf\">  I want to be able to create gherkin tables from existing data frames</span>\n\n<span class=\"nf\">  </span><span class=\"k\">Scenario:</span><span class=\"nf\"> simple index</span>\n<span class=\"k\">    Given </span><span class=\"nf\">a gherkin table as input</span>\n<span class=\"k\">      |</span><span class=\"s\"> str</span><span class=\"k\">       |</span><span class=\"s\"> float</span><span class=\"k\">     |</span><span class=\"s\"> str</span><span class=\"k\">                 |</span><span class=\"nf\"></span>\n<span class=\"k\">      |</span><span class=\"s\"> index_col</span><span class=\"k\"> |</span><span class=\"s\"> float_col</span><span class=\"k\"> |</span><span class=\"s\"> str_col</span><span class=\"k\">             |</span><span class=\"nf\"></span>\n<span class=\"k\">      |</span><span class=\"s\"> egg</span><span class=\"k\">       |</span><span class=\"s\"> 3.0</span><span class=\"k\">       |</span><span class=\"s\"> silly walks</span><span class=\"k\">         |</span><span class=\"nf\"></span>\n<span class=\"k\">      |</span><span class=\"s\"> spam</span><span class=\"k\">      |</span><span class=\"s\"> 4.1</span><span class=\"k\">       |</span><span class=\"s\"> spanish inquisition</span><span class=\"k\"> |</span><span class=\"nf\"></span>\n<span class=\"k\">      |</span><span class=\"s\"> bacon</span><span class=\"k\">     |</span><span class=\"s\"> 5.2</span><span class=\"k\">       |</span><span class=\"s\"> dead parrot</span><span class=\"k\">         |</span><span class=\"nf\"></span>\n<span class=\"nf\">    </span><span class=\"k\">When </span><span class=\"nf\">converted to a data frame using </span><span class=\"s\">1</span><span class=\"nf\"> row as column names and </span><span class=\"s\">1</span><span class=\"nf\"> column as index</span>\n<span class=\"nf\">    </span><span class=\"k\">And </span><span class=\"nf\">printed using data_frame_to_table</span>\n<span class=\"nf\">    </span><span class=\"k\">Then </span><span class=\"nf\">it prints a valid string copy pasteable into gherkin files</span>\n<span class=\"nf\">    </span><span class=\"k\">\"\"\"</span><span class=\"s\"></span>\n<span class=\"s\">    | object    | float64   | object              |</span>\n<span class=\"s\">    | index_col | float_col | str_col             |</span>\n<span class=\"s\">    | egg       | 3.0       | silly walks         |</span>\n<span class=\"s\">    | spam      | 4.1       | spanish inquisition |</span>\n<span class=\"s\">    | bacon     | 5.2       | dead parrot         |</span>\n<span class=\"s\">    </span><span class=\"k\">\"\"\"</span><span class=\"nf\"></span>\n</pre>\n<p>Associated steps:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">behave</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">behave_pandas</span> <span class=\"kn\">import</span> <span class=\"n\">table_to_dataframe</span><span class=\"p\">,</span> <span class=\"n\">dataframe_to_table</span>\n\n<span class=\"n\">use_step_matcher</span><span class=\"p\">(</span><span class=\"s2\">\"parse\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"s2\">\"a gherkin table as input\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">table</span>\n\n<span class=\"nd\">@when</span><span class=\"p\">(</span><span class=\"s1\">'converted to a data frame using </span><span class=\"si\">{column_levels:d}</span><span class=\"s1\"> row as column names and </span><span class=\"si\">{index_levels:d}</span><span class=\"s1\"> column as index'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">column_levels</span><span class=\"p\">,</span> <span class=\"n\">index_levels</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">table_to_dataframe</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"n\">column_levels</span><span class=\"o\">=</span><span class=\"n\">column_levels</span><span class=\"p\">,</span> <span class=\"n\">index_levels</span><span class=\"o\">=</span><span class=\"n\">index_levels</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@then</span><span class=\"p\">(</span><span class=\"s2\">\"it prints a valid string copy pasteable into gherkin files\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">text</span>\n\n\n<span class=\"nd\">@step</span><span class=\"p\">(</span><span class=\"s2\">\"printed using data_frame_to_table\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dataframe_to_table</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">parsed</span><span class=\"p\">)</span>\n</pre>\n<p>Parsed dataframe:</p>\n<pre><code>&gt;&gt;&gt; context.parsed\n           float_col              str_col\nindex_col\negg              3.0          silly walks\nspam             4.1  spanish inquisition\nbacon            5.2          dead parrot\n\n&gt;&gt;&gt; context.parsed.info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 3 entries, egg to bacon\nData columns (total 2 columns):\nfloat_col    3 non-null float64\nstr_col      3 non-null object\ndtypes: float64(1), object(1)\nmemory usage: 72.0+ bytes\n</code></pre>\n\n          </div>"}, "last_serial": 6598838, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "001f4ee14d6c60ab8e30d5e789115ed4", "sha256": "913831c7791a75c600a27bb4d3f085d326f40986bd7873e665610479d6845ff8"}, "downloads": -1, "filename": "behave_pandas-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "001f4ee14d6c60ab8e30d5e789115ed4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7374, "upload_time": "2018-02-10T22:01:55", "upload_time_iso_8601": "2018-02-10T22:01:55.636191Z", "url": "https://files.pythonhosted.org/packages/d8/d9/431b0a940140b4ab49b4baacf05a909431fde84950aff8da90ee7e8f3855/behave_pandas-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.0.dev1": [{"comment_text": "", "digests": {"md5": "18feebd9029c6d2e6b58816fab2eed87", "sha256": "f90637bb3cfce64bd3fdb8665ee3aea15bd94e56739bc8f675f6f25bfd41d05e"}, "downloads": -1, "filename": "behave_pandas-0.1.0.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "18feebd9029c6d2e6b58816fab2eed87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4755, "upload_time": "2018-02-07T21:08:53", "upload_time_iso_8601": "2018-02-07T21:08:53.898755Z", "url": "https://files.pythonhosted.org/packages/d8/bf/e057ab3f5a79db512816d35fdb8d34dd7d275c235a78ec8b3cbd16b60385/behave_pandas-0.1.0.dev1-py3-none-any.whl", "yanked": false}], "0.1.0.dev2": [{"comment_text": "", "digests": {"md5": "63193af126ec7d536f10f67b1a77bd8d", "sha256": "0e3d434d6ad4d3eb19b5f1d0ee8fba518caeb540d90c4ca9123c7a86dac5006d"}, "downloads": -1, "filename": "behave_pandas-0.1.0.dev2-py3-none-any.whl", "has_sig": false, "md5_digest": "63193af126ec7d536f10f67b1a77bd8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7143, "upload_time": "2018-02-10T18:00:04", "upload_time_iso_8601": "2018-02-10T18:00:04.637209Z", "url": "https://files.pythonhosted.org/packages/e4/25/3c392a211e90c88ad4091e5ce339dd32c3e85742b6e94428eb30fd445117/behave_pandas-0.1.0.dev2-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ea6dd43744449efbb03450d79f3b902a", "sha256": "8a9cfb0eaa0cfc4fc1b6e8679dc7c1f33fe48a4d95b92e6510c23c528737bb14"}, "downloads": -1, "filename": "behave_pandas-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ea6dd43744449efbb03450d79f3b902a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5368, "upload_time": "2018-06-03T18:27:48", "upload_time_iso_8601": "2018-06-03T18:27:48.065125Z", "url": "https://files.pythonhosted.org/packages/b0/3a/13b21e0cd2bb0ed5cd04c8b761df0c988c84ced96f32dd21dd87ae773f47/behave_pandas-0.2.0-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "83a755af1b09c157fdc77ad1cb48abdb", "sha256": "edd7d43a512d342d9e945a444514fb4b6a57ac2913f3b8653a57eee27529450e"}, "downloads": -1, "filename": "behave_pandas-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "83a755af1b09c157fdc77ad1cb48abdb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6333, "upload_time": "2019-01-16T23:08:07", "upload_time_iso_8601": "2019-01-16T23:08:07.683862Z", "url": "https://files.pythonhosted.org/packages/e5/84/ce70ad9edca2b1beadc6bc2195a758439e0bddaf2cc5ea24e4016a162d48/behave_pandas-0.3.0-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "513e896b33b77466f84cc61a149937a9", "sha256": "5ec73e644c487d9384650f110cdd994416e4ee73e96a263a657c89c4c5d74618"}, "downloads": -1, "filename": "behave_pandas-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "513e896b33b77466f84cc61a149937a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6646, "upload_time": "2020-02-09T19:14:10", "upload_time_iso_8601": "2020-02-09T19:14:10.429551Z", "url": "https://files.pythonhosted.org/packages/9e/15/1499dd1a17dec8f8e0dba05137e4609404730fc568da4ca18aa0f600c44a/behave_pandas-0.4.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "513e896b33b77466f84cc61a149937a9", "sha256": "5ec73e644c487d9384650f110cdd994416e4ee73e96a263a657c89c4c5d74618"}, "downloads": -1, "filename": "behave_pandas-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "513e896b33b77466f84cc61a149937a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6646, "upload_time": "2020-02-09T19:14:10", "upload_time_iso_8601": "2020-02-09T19:14:10.429551Z", "url": "https://files.pythonhosted.org/packages/9e/15/1499dd1a17dec8f8e0dba05137e4609404730fc568da4ca18aa0f600c44a/behave_pandas-0.4.0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:37:51 2020"}