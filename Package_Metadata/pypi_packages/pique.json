{"info": {"author": "Russell Neches", "author_email": "ryneches@ucdavis.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Programming Language :: Cython", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "The pique package is a high efficiency peak finder for ChIP-seq\nexperiments that yield high coverage allignments to the reference\ngenome. It was developed for studying gene expression in Halobacterium\nsalinarum sp. NRC1, sequenced using barcoded 40bp Illumina reads as\npart of an ongoing project in Marc Facciotti's lab at UC Davis.\n\nAUTHOR & CONTACT INFORMATION\n----------------------------\n\nPique was written by Russell Neches, a graduate student in Jonathan\nEisen's laboratory. \n\n    Russell's Blog    : http://vort.org/\n    Russell's Twitter : @ryneches\n    Russell's Email   : ryneches at ucdavis dot edu\n    Lab homepage      : http://phylogenomics.wordpress.com/\n    Project Page      : http://ryneches.github.com/pique/\n\nINSTALLING\n----------\n\nGeneral Instructions : You can do the usual python thing. We recommend using\nvirtualenv, because it's nice.\n\n    $ cd ~\n    $ virtualenv --system-site-packages opt\n    $ PATH=~/opt/bin:$PATH\n    $ pip install numpy         # prerequisite\n    $ pip install scipy         # prerequisite\n    $ pip install cython        # prerequisite\n    $ pip install pysam         # prerequisite\n    $ pip install argcomplete   # suggested package\n    $ pip install matplotlib    # suggested package\n    $ pip install ipython       # suggested package\n    $ pip install pique         # install Pique\n    $ pique test\n\nDebian and Ubuntu : We recommend using apt-get for most of the\nprerequisites.\n\n    $ sudo apt-get install  python-numpy        \\\n                            python-scipy        \\\n                            python-matplotlib   \\\n                            python-virtualenv   \\\n                            cython              \\\n                            ipython\n    $ cd ~\n    $ virtualenv --system-site-packages opt\n    $ PATH=~/opt/bin:$PATH\n    $ pip install pysam\n    $ pip install argcomplete\n    $ pip install pique\n    $ pique test\n\nIn your .bashrc file, we suggest adding ~/opt/bin to your PATH :\n    \n    $ cd ~\n    $ cat >> .bashrc\n    PATH=~/opt/bin:$PATH\n    export PATH\n    [ctrl-D]\n\nMacOS : Unfortunately, MacOS doesn't come with virtualenv or any sort\nof useful global package management system. Here's how to fix that :\n\n    $ sudo easy_install pip     # install pip globally\n\nMake sure pip works :\n\n    $ pip\n    Usage: pip COMMAND [OPTIONS]\n    pip: error: You must give a command (use \"pip help\" to see a \n    list of commands)\n\nNow, install virtualenv :\n\n    $ sudo pip install virtualenv\n\nMake sure that works :\n\n    $ virtualenv\n    You must provide a DEST_DIR\n    ...\n\nNow, scroll back up and follow the General Instructions.\n\n\nUsing argcomplete : If you installed argcomplete, you can enable tab\ncompletion for pique commands by placing this into your .bashrc :\n\n    eval \"$(register-python-argcomplete pique)\"\n\n\nTESTING DATA\n------------\n\nA testing data set is [available on\nFigshare](http://figshare.com/articles/A_ChIP-seq_test_dataset/98106).\nIt was made from a his-tagged tfbD pulldown in _Halobacterium\nsalinarum_, sequenced on the Illumina GAII. The reads were mapped\nusing [bowtie](http://bowtie-bio.sourceforge.net/) to a cut-down\nchromosome and one plasmid. Unmapped reads were discarded. The dataset\ncan be cited separately as :\n\n    A ChIP-seq test dataset. Russell Neches, Marc Facciotti, Elizabeth\n    G. Wilbanks, Phillip M. Seitzer. **figshare**.\n    Retrieved 06:12, Nov 27, 2012 (GMT)\n    http://dx.doi.org/10.6084/m9.figshare.98106\n\nIf you want to try out the test data, simply run :\n\n    $ pique test\n\nThe test data will automatically be downloaded to `/tmp/pique/`, and\nthe resulting output data will be written to your current working\ndirectory.\n\nTESTS\n-----\n\nTests are designed to be used with nose. \n\n    http://somethingaboutorange.com/mrl/projects/nose/\n\nThe tests (stupidly) depend on hard-coded paths to find the test data\nfiles, so you have to run nosetests from the main module directory\n(i.e., the one that has setup.py in it).\n\n    $ cd pique\n    $ nosetests\n\nDEPENDENCIES\n------------\n\nThis package requires the following packages :\n\n    scipy\n    numpy\n    pysam\n    cython\n        \nSuggested :\n\n    matplotlib\n    ipython\n    samtools\n    argcomplete\n    Gaggle Genome Browser\n\nUSAGE\n-----\n\nThis software can be used either as a stand-alone application, or as a\nlibrary accessed by your own software.\n\nTo use pique as a stand-alone application, there is a self-documenting\ncommand line interface :\n\n    $ pique --help\n    usage: pique [-h] {batch,tk,test,bam2wav,mapmaker} ...\n    \n    Pique, a ChIP-seq analytical tool.\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n\n    commands:\n      {batch,tk,test,bam2wav,mapmaker}\n        batch               command-line mode for peak detection\n        tk                  GUI mode for peak detection\n        test                testing mode, downloads online test data\n        bam2wav             BAM to WAV conversion utility\n        mapmaker            genome analysis region mapping utility\n\n\nThe application has four modes, batch, tk, test and mapmaker. To access\nthe GUI interface, run :\n\n    $ pique tk\n\nThe application window will appear. Enter a name for your project in\nthe 'Project name' field; this will be the name prefix for the output\nfiles. Choose files for the IP and BG (background) tracks; these\nshould be indexed BAM files, created by mapping your IP and control\nreads to the reference sequence. Many different tools can be used for\nthis, such as bowtie, bwa and SHRiMP.\n\nThe IP and background BAM files must contain identical contig names.\n\nIf desired, choose a genome map file ('Map (optional)'). See below for\nhow to create one.\n\nEnter the dominant fragment length of the sequencing library, and the\nread length used for the sequencing run. If you have performed quality\ntrimming, you may wish to use the average or median read length after\ntrimming for the read length.\n\nThen, click 'Run.' Your BAM files will be loaded and processed, and\noutput files will be written in the directory from which pique.py was\ninvoked. Run time for a bacterial genome depends on the number of\nmapped reads and the length of the genome. For our projects, we have\nfound that a run takes about one to five minutes.\n\nBATCH MODE\n----------\n\nIf you have many experiments to process, it may be more convenient to\nrun pique from a script. \n\n    $ pique batch -h\n    usage: pique batch [-h] -name NAME -ip IPFILE -bg BGFILE -map MAPFILE\n                       [-a ALPHA] [-l L_THRESH] [-p]\n\n    optional arguments:\n      -h, --help    show this help message and exit\n      -name NAME    project name\n      -ip IPFILE    BAM file for IP data\n      -bg BGFILE    BAM file for control data\n      -map MAPFILE  genome map file\n      -a ALPHA      read length\n      -l L_THRESH   expected binding footprint\n      -p            make a pickel file\n\nThe arguments are essentially the same as those found in the GUI,\nexcept for the option of making a pickle file. If this option is\nenabled, after completing the anaysis, pique will dump the entire\nanalysis workbench object into a pickle file. This can be very useful\nfor debugging and data post-processing in Python. For example, the\npickle file can be used to load the analysis workbench into an\ninteractive ipython session and used to generate figures.\n\n    http://docs.python.org/2/library/pickle.html\n\nMAPMAKER MODE\n-------------\n\n    $ pique mapmaker -h\n    usage: pique mapmaker [-h] -name NAME -bamfile BAMFILE [-window\n    WINDOW]\n                          [-stride STRIDE] -highest HIGHEST -lowest LOWEST\n                          [-bins BINS]\n\n    optional arguments:\n      -h, --help        show this help message and exit\n      -name NAME        project name\n      -bamfile BAMFILE  BAM file of aligned data\n      -window WINDOW    sliding window size\n      -stride STRIDE    stride length\n      -highest HIGHEST  highest histogram bin\n      -lowest LOWEST    lowest histogram bin\n      -bins BINS        number of histogram bins\n\nBAM2WAV MODE\n------------\n\nAs an alternative to visualization, pique contains a utility for \nconverting ChIP-seq data into audio data. The background alignment \nis subtracted from the IP alignment, and a separate WAV file is \nwritten for each contig. Coverage information for reads that map \nin the forward and reverse orientations is represented on the left \nand right audio channels, respectively.\n\n    $ pique bam2wav -h\n    usage: pique bam2wav [-h] -name NAME -ip IPFILE -bg BGFILE\n    \n    optional arguments:\n      -h, --help  show this help message and exit\n      -name NAME  project name\n      -ip IPFILE  BAM file for IP data\n      -bg BGFILE  BAM file for control data\n\n\nGENOME MAP FILE\n---------------\n\nThe Genome Map File is a GFF-formatted file describing three kinds of\nfeatures; analysis regions, masking regions, and normalization\nregions. Analysis and masking region annotations are optional;\nhowever, each analysis region MUST have at least one normalization\nregion. (Note : If you do not describe any analysis regions, one will\nautomatically be created spanning each contig. So, if you do not\ndescribe any analysis regions for a contig, you must still describe at\nleast one normalization region for that contig.)\n\nAnalysis regions should use the feature name 'analysis_region' in the\nfile, and describe sub-regions of the contig that you wish to process\nindependently. For example, if there are inconsistencies in coverage\nlevel due to gene dosage variations with respect to the reference,\nprocessing the dosage regions separately can improve peak detection.\n\nMasking regions should use the feature name 'mask' in the file, and\ndescribe sub-regions of the analysis regions that you wish to delete\nfrom the analysis. (Note: Masking regions *must* fall completely\nwithin an analysis region.) This is useful for hiding coverage\naberrations due to repetitive regions, such as IS elements.\n\nBy default, an analysis region describing the whole contig is created\nfor each contig. When an analysis region is loaded by the user via the\nmapping file, the default analysis region for that contig is deleted. \n\nNormalization regions should use the name 'norm_region' in the map\nfile, and describe regions (within analysis regions) in which there\nare thought to be no binding events. These regions will be used to\ncalibrate the sequencing coverage between the IP track and the control\ntrack. If the user chooses poor normalization regions, Pique will\nstill function, but will produce incorrect normalization factors and\nmay set the peak detection cutoff too stringently.\n\nFeatures described in the genome map file must use the same contig\nnames as the IP and background BAM files. To see them, run :\n\n    $ samtools view -H BAMfile.bam\n\nMost columns in the GFF file are unused, and may be left empty (as\nlong as the correct number of tabs are present). The required fields\nare :\n\n    0   contig name\n    2   'analysis_region', 'mask' or 'norm_region'\n    3   start coordinate\n    4   end coordinate\n\nAn example genome map file is provided (data/map.gff).\n\nOUTPUT FILES\n------------\n\n    <name>.IP.track  : A GGB-formatted track file of the IP data\n    <name>.BG.track  : A GGB-formatted track file of the BG data\n    <name>.bookmark  : A list of GGB bookmarks for each peak\n    <name>.qp        : GGB-formatted quantitative positional data \n                       of binding coordinates\n    <name>.gff       : A GFF file of each peak\n    <name>.peak.tsv  : Peak statistical quantities in TSV format\n\nThe GFF output file includes the following columns :\n\n    0   contig name\n    1   software version\n    2   feature description\n    3   start coordinate\n    4   end coordinate\n    5   enrichment ratio relative to background\n\nThe TSV output includes the following columns :\n\n    0   contig\n    1   start\n    2   stop\n    3   binds_at            # binding coordinate\n    4   enrichment_ratio    \n    5   average_contig_norm # mean of all norms\n    6   std_contig_norm     # standard deviation of all norms\n    7..                     # all subsequent colunms are the norms\n\nThe bookmark file contains some additional annotations in addition to\nthe required GGB bookmark information :\n\n    binds_at            estimated binding coordinate\n    enrichment_ratio    enrichment ratio relative to background\n    norm_0, norm_1...   the normalization factors calculated from the\n                        normilization regions\n\nCAVEATS\n-------\n\nBinding coordinates : The peak calling step (pique.py) will attempt to\ncalculate a binding coordinate for the putative peaks it finds. The\nmethod used is extremely naive, but we find that it generally comes\nwithin about 5bp of the expected binding site.\n\nDouble peaks : Some enriched regions contain two binding sites, but\nthe algorithm is unable to de-convolute them. We have tried running\nthese regions through several other peak callers with little success.\nWe have included a script for identifying sites that are likely to be\ndouble peaks to assist with curation.\n\nDOWNSTREAM ANALYSIS\n-------------------\n\nPique does not attempt to filter peaks that are statistically\ninsignificant. We have found that this part of the analysis is rather\nspecific to the data and to the experiment. \n\nTo address this, Pique is designed to achieve a low false-negative\nrate at the cost of a potentially high false-positive rate (it appears\nthat the false-positive rate is in practice rather low compared to\nother software, but we have not implemented any filtering to prevent\nthem from happening). The idea is that it is painstaking work to find\na putative peak, it is less difficult to discard unsatisfactory peaks\nonce they have been found.  Thus, some kind of post-filtering is\nnecessary. Pique provides the user with output that can be used to\nsupport a variety of such statistical tests.\n\nSome recommended filtering might include :\n\n    [1] Eliminate peaks that are significantly narrower than the size\n        range of the sequencing library, and perhaps other peaks that\n        cluster with them.\n\n    [2] Eliminate peaks with a normalized enrichment ratio below 1.0,\n        or peaks that cluster with them.\n\n    [3] Eliminate peaks that have predicted binding sites that are\n        very skewed from the center of the enriched region.\n\nDepending on how many peaks are recovered, the user may wish to try\none or all of these, perhaps with clustering to avoid arbitrary\ncutoffs.\n\nHowever, we do not recommend trying to generate a \"perfect\" peak list\nby statistical analysis alone.\n\nMANUAL CURATION\n---------------\n\nMicrobial genomes are fairly small. It is probably not worth the\neffort to undertake a very complicated statistical effort to eliminate\nall false positives. We recommend applying a few basic statistical\ntests, and then loading tracks, quantitative positionals and bookmarks\ninto the Gaggle Genome Browser.\n\nOnce the data is loaded into the browser, view the bookmark list. When\nyou select a bookmark, the browser will automatically scan to that\nregion of the genome and highlight the putative peak region. If you\nthink the peak is a false positive, press the delete key.\n\nWhen you are finished, save a copy of the bookmark file. We find that\ncuration of a microbial genome in this way takes about ten to twenty\nminutes.\n\nINSPIRATIONAL QUOTE\n-------------------\n\nI met men at every turn who owned from one thousand to thirty thousand\n\"feet\" in undeveloped silver mines, every single foot of which they\nbelieved would shortly be worth from fifty to a thousand dollars\u2014and\nas often as any other way they were men who had not twenty-five\ndollars in the world. Every man you met had his new mine to boast of,\nand his \"specimens\" ready; and if the opportunity offered, he would\ninfallibly back you into a corner and offer as a favor to you, not to\nhim, to part with just a few feet in the \"Golden Age,\" or the \"Sarah\nJane,\" or some other unknown stack of croppings, for money enough to\nget a \"square meal\" with, as the phrase went. And you were never to\nreveal that he had made you the offer at such a ruinous price, for it\nwas only out of friendship for you that he was willing to make the\nsacrifice. Then he would fish a piece of rock out of his pocket, and\nafter looking mysteriously around as if he feared he might be waylaid\nand robbed if caught with such wealth in his possession, he would dab\nthe rock against his tongue, clap an eyeglass to it, and exclaim:\n\n\"Look at that! Right there in that red dirt! See it? See the specks of\ngold? And the streak of silver? That's from the Uncle Abe. There's a\nhundred thousand tons like that in sight! Right in sight, mind you!\nAnd when we get down on it and the ledge comes in solid, it will be\nthe richest thing in the world! Look at the assay! I don't want you to\nbelieve me\u2014look at the assay!\"\n\nThen he would get out a greasy sheet of paper which showed that the\nportion of rock assayed had given evidence of containing silver and\ngold in the proportion of so many hundreds or thousands of dollars to\nthe ton.\n\nI little knew, then, that the custom was to hunt out the richest piece\nof rock and get it assayed! Very often, that piece, the size of a\nfilbert, was the only fragment in a ton that had a particle of metal\nin it\u2014and yet the assay made it pretend to represent the average value\nof the ton of rubbish it came from!\n\n    - Mark Twain, Roughing It\n\n\nLEGAL STUFF\n-----------\n\nCopyright (c) 2012, Russell Neches\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright \n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in \n      the documentation and/or other materials provided with the \n      distribution.\n\n    * Neither the name of the University of California, Davis nor the \n      names of its contributors may be used to endorse or promote \n      products derived from this software without specific prior \n      written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ryneches/pique", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "pique", "package_url": "https://pypi.org/project/pique/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pique/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ryneches/pique"}, "release_url": "https://pypi.org/project/pique/0.1.7/", "requires_dist": null, "requires_python": null, "summary": "An efficient peak finder for high coverage ChIP-seq experiments.", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            The pique package is a high efficiency peak finder for ChIP-seq<br>experiments that yield high coverage allignments to the reference<br>genome. It was developed for studying gene expression in Halobacterium<br>salinarum sp. NRC1, sequenced using barcoded 40bp Illumina reads as<br>part of an ongoing project in Marc Facciotti's lab at UC Davis.<br><br>AUTHOR &amp; CONTACT INFORMATION<br>----------------------------<br><br>Pique was written by Russell Neches, a graduate student in Jonathan<br>Eisen's laboratory. <br><br>    Russell's Blog    : http://vort.org/<br>    Russell's Twitter : @ryneches<br>    Russell's Email   : ryneches at ucdavis dot edu<br>    Lab homepage      : http://phylogenomics.wordpress.com/<br>    Project Page      : http://ryneches.github.com/pique/<br><br>INSTALLING<br>----------<br><br>General Instructions : You can do the usual python thing. We recommend using<br>virtualenv, because it's nice.<br><br>    $ cd ~<br>    $ virtualenv --system-site-packages opt<br>    $ PATH=~/opt/bin:$PATH<br>    $ pip install numpy         # prerequisite<br>    $ pip install scipy         # prerequisite<br>    $ pip install cython        # prerequisite<br>    $ pip install pysam         # prerequisite<br>    $ pip install argcomplete   # suggested package<br>    $ pip install matplotlib    # suggested package<br>    $ pip install ipython       # suggested package<br>    $ pip install pique         # install Pique<br>    $ pique test<br><br>Debian and Ubuntu : We recommend using apt-get for most of the<br>prerequisites.<br><br>    $ sudo apt-get install  python-numpy        \\<br>                            python-scipy        \\<br>                            python-matplotlib   \\<br>                            python-virtualenv   \\<br>                            cython              \\<br>                            ipython<br>    $ cd ~<br>    $ virtualenv --system-site-packages opt<br>    $ PATH=~/opt/bin:$PATH<br>    $ pip install pysam<br>    $ pip install argcomplete<br>    $ pip install pique<br>    $ pique test<br><br>In your .bashrc file, we suggest adding ~/opt/bin to your PATH :<br>    <br>    $ cd ~<br>    $ cat &gt;&gt; .bashrc<br>    PATH=~/opt/bin:$PATH<br>    export PATH<br>    [ctrl-D]<br><br>MacOS : Unfortunately, MacOS doesn't come with virtualenv or any sort<br>of useful global package management system. Here's how to fix that :<br><br>    $ sudo easy_install pip     # install pip globally<br><br>Make sure pip works :<br><br>    $ pip<br>    Usage: pip COMMAND [OPTIONS]<br>    pip: error: You must give a command (use \"pip help\" to see a <br>    list of commands)<br><br>Now, install virtualenv :<br><br>    $ sudo pip install virtualenv<br><br>Make sure that works :<br><br>    $ virtualenv<br>    You must provide a DEST_DIR<br>    ...<br><br>Now, scroll back up and follow the General Instructions.<br><br><br>Using argcomplete : If you installed argcomplete, you can enable tab<br>completion for pique commands by placing this into your .bashrc :<br><br>    eval \"$(register-python-argcomplete pique)\"<br><br><br>TESTING DATA<br>------------<br><br>A testing data set is [available on<br>Figshare](http://figshare.com/articles/A_ChIP-seq_test_dataset/98106).<br>It was made from a his-tagged tfbD pulldown in _Halobacterium<br>salinarum_, sequenced on the Illumina GAII. The reads were mapped<br>using [bowtie](http://bowtie-bio.sourceforge.net/) to a cut-down<br>chromosome and one plasmid. Unmapped reads were discarded. The dataset<br>can be cited separately as :<br><br>    A ChIP-seq test dataset. Russell Neches, Marc Facciotti, Elizabeth<br>    G. Wilbanks, Phillip M. Seitzer. **figshare**.<br>    Retrieved 06:12, Nov 27, 2012 (GMT)<br>    http://dx.doi.org/10.6084/m9.figshare.98106<br><br>If you want to try out the test data, simply run :<br><br>    $ pique test<br><br>The test data will automatically be downloaded to `/tmp/pique/`, and<br>the resulting output data will be written to your current working<br>directory.<br><br>TESTS<br>-----<br><br>Tests are designed to be used with nose. <br><br>    http://somethingaboutorange.com/mrl/projects/nose/<br><br>The tests (stupidly) depend on hard-coded paths to find the test data<br>files, so you have to run nosetests from the main module directory<br>(i.e., the one that has setup.py in it).<br><br>    $ cd pique<br>    $ nosetests<br><br>DEPENDENCIES<br>------------<br><br>This package requires the following packages :<br><br>    scipy<br>    numpy<br>    pysam<br>    cython<br>        <br>Suggested :<br><br>    matplotlib<br>    ipython<br>    samtools<br>    argcomplete<br>    Gaggle Genome Browser<br><br>USAGE<br>-----<br><br>This software can be used either as a stand-alone application, or as a<br>library accessed by your own software.<br><br>To use pique as a stand-alone application, there is a self-documenting<br>command line interface :<br><br>    $ pique --help<br>    usage: pique [-h] {batch,tk,test,bam2wav,mapmaker} ...<br>    <br>    Pique, a ChIP-seq analytical tool.<br>    <br>    optional arguments:<br>      -h, --help            show this help message and exit<br><br>    commands:<br>      {batch,tk,test,bam2wav,mapmaker}<br>        batch               command-line mode for peak detection<br>        tk                  GUI mode for peak detection<br>        test                testing mode, downloads online test data<br>        bam2wav             BAM to WAV conversion utility<br>        mapmaker            genome analysis region mapping utility<br><br><br>The application has four modes, batch, tk, test and mapmaker. To access<br>the GUI interface, run :<br><br>    $ pique tk<br><br>The application window will appear. Enter a name for your project in<br>the 'Project name' field; this will be the name prefix for the output<br>files. Choose files for the IP and BG (background) tracks; these<br>should be indexed BAM files, created by mapping your IP and control<br>reads to the reference sequence. Many different tools can be used for<br>this, such as bowtie, bwa and SHRiMP.<br><br>The IP and background BAM files must contain identical contig names.<br><br>If desired, choose a genome map file ('Map (optional)'). See below for<br>how to create one.<br><br>Enter the dominant fragment length of the sequencing library, and the<br>read length used for the sequencing run. If you have performed quality<br>trimming, you may wish to use the average or median read length after<br>trimming for the read length.<br><br>Then, click 'Run.' Your BAM files will be loaded and processed, and<br>output files will be written in the directory from which pique.py was<br>invoked. Run time for a bacterial genome depends on the number of<br>mapped reads and the length of the genome. For our projects, we have<br>found that a run takes about one to five minutes.<br><br>BATCH MODE<br>----------<br><br>If you have many experiments to process, it may be more convenient to<br>run pique from a script. <br><br>    $ pique batch -h<br>    usage: pique batch [-h] -name NAME -ip IPFILE -bg BGFILE -map MAPFILE<br>                       [-a ALPHA] [-l L_THRESH] [-p]<br><br>    optional arguments:<br>      -h, --help    show this help message and exit<br>      -name NAME    project name<br>      -ip IPFILE    BAM file for IP data<br>      -bg BGFILE    BAM file for control data<br>      -map MAPFILE  genome map file<br>      -a ALPHA      read length<br>      -l L_THRESH   expected binding footprint<br>      -p            make a pickel file<br><br>The arguments are essentially the same as those found in the GUI,<br>except for the option of making a pickle file. If this option is<br>enabled, after completing the anaysis, pique will dump the entire<br>analysis workbench object into a pickle file. This can be very useful<br>for debugging and data post-processing in Python. For example, the<br>pickle file can be used to load the analysis workbench into an<br>interactive ipython session and used to generate figures.<br><br>    http://docs.python.org/2/library/pickle.html<br><br>MAPMAKER MODE<br>-------------<br><br>    $ pique mapmaker -h<br>    usage: pique mapmaker [-h] -name NAME -bamfile BAMFILE [-window<br>    WINDOW]<br>                          [-stride STRIDE] -highest HIGHEST -lowest LOWEST<br>                          [-bins BINS]<br><br>    optional arguments:<br>      -h, --help        show this help message and exit<br>      -name NAME        project name<br>      -bamfile BAMFILE  BAM file of aligned data<br>      -window WINDOW    sliding window size<br>      -stride STRIDE    stride length<br>      -highest HIGHEST  highest histogram bin<br>      -lowest LOWEST    lowest histogram bin<br>      -bins BINS        number of histogram bins<br><br>BAM2WAV MODE<br>------------<br><br>As an alternative to visualization, pique contains a utility for <br>converting ChIP-seq data into audio data. The background alignment <br>is subtracted from the IP alignment, and a separate WAV file is <br>written for each contig. Coverage information for reads that map <br>in the forward and reverse orientations is represented on the left <br>and right audio channels, respectively.<br><br>    $ pique bam2wav -h<br>    usage: pique bam2wav [-h] -name NAME -ip IPFILE -bg BGFILE<br>    <br>    optional arguments:<br>      -h, --help  show this help message and exit<br>      -name NAME  project name<br>      -ip IPFILE  BAM file for IP data<br>      -bg BGFILE  BAM file for control data<br><br><br>GENOME MAP FILE<br>---------------<br><br>The Genome Map File is a GFF-formatted file describing three kinds of<br>features; analysis regions, masking regions, and normalization<br>regions. Analysis and masking region annotations are optional;<br>however, each analysis region MUST have at least one normalization<br>region. (Note : If you do not describe any analysis regions, one will<br>automatically be created spanning each contig. So, if you do not<br>describe any analysis regions for a contig, you must still describe at<br>least one normalization region for that contig.)<br><br>Analysis regions should use the feature name 'analysis_region' in the<br>file, and describe sub-regions of the contig that you wish to process<br>independently. For example, if there are inconsistencies in coverage<br>level due to gene dosage variations with respect to the reference,<br>processing the dosage regions separately can improve peak detection.<br><br>Masking regions should use the feature name 'mask' in the file, and<br>describe sub-regions of the analysis regions that you wish to delete<br>from the analysis. (Note: Masking regions *must* fall completely<br>within an analysis region.) This is useful for hiding coverage<br>aberrations due to repetitive regions, such as IS elements.<br><br>By default, an analysis region describing the whole contig is created<br>for each contig. When an analysis region is loaded by the user via the<br>mapping file, the default analysis region for that contig is deleted. <br><br>Normalization regions should use the name 'norm_region' in the map<br>file, and describe regions (within analysis regions) in which there<br>are thought to be no binding events. These regions will be used to<br>calibrate the sequencing coverage between the IP track and the control<br>track. If the user chooses poor normalization regions, Pique will<br>still function, but will produce incorrect normalization factors and<br>may set the peak detection cutoff too stringently.<br><br>Features described in the genome map file must use the same contig<br>names as the IP and background BAM files. To see them, run :<br><br>    $ samtools view -H BAMfile.bam<br><br>Most columns in the GFF file are unused, and may be left empty (as<br>long as the correct number of tabs are present). The required fields<br>are :<br><br>    0   contig name<br>    2   'analysis_region', 'mask' or 'norm_region'<br>    3   start coordinate<br>    4   end coordinate<br><br>An example genome map file is provided (data/map.gff).<br><br>OUTPUT FILES<br>------------<br><br>    &lt;name&gt;.IP.track  : A GGB-formatted track file of the IP data<br>    &lt;name&gt;.BG.track  : A GGB-formatted track file of the BG data<br>    &lt;name&gt;.bookmark  : A list of GGB bookmarks for each peak<br>    &lt;name&gt;.qp        : GGB-formatted quantitative positional data <br>                       of binding coordinates<br>    &lt;name&gt;.gff       : A GFF file of each peak<br>    &lt;name&gt;.peak.tsv  : Peak statistical quantities in TSV format<br><br>The GFF output file includes the following columns :<br><br>    0   contig name<br>    1   software version<br>    2   feature description<br>    3   start coordinate<br>    4   end coordinate<br>    5   enrichment ratio relative to background<br><br>The TSV output includes the following columns :<br><br>    0   contig<br>    1   start<br>    2   stop<br>    3   binds_at            # binding coordinate<br>    4   enrichment_ratio    <br>    5   average_contig_norm # mean of all norms<br>    6   std_contig_norm     # standard deviation of all norms<br>    7..                     # all subsequent colunms are the norms<br><br>The bookmark file contains some additional annotations in addition to<br>the required GGB bookmark information :<br><br>    binds_at            estimated binding coordinate<br>    enrichment_ratio    enrichment ratio relative to background<br>    norm_0, norm_1...   the normalization factors calculated from the<br>                        normilization regions<br><br>CAVEATS<br>-------<br><br>Binding coordinates : The peak calling step (pique.py) will attempt to<br>calculate a binding coordinate for the putative peaks it finds. The<br>method used is extremely naive, but we find that it generally comes<br>within about 5bp of the expected binding site.<br><br>Double peaks : Some enriched regions contain two binding sites, but<br>the algorithm is unable to de-convolute them. We have tried running<br>these regions through several other peak callers with little success.<br>We have included a script for identifying sites that are likely to be<br>double peaks to assist with curation.<br><br>DOWNSTREAM ANALYSIS<br>-------------------<br><br>Pique does not attempt to filter peaks that are statistically<br>insignificant. We have found that this part of the analysis is rather<br>specific to the data and to the experiment. <br><br>To address this, Pique is designed to achieve a low false-negative<br>rate at the cost of a potentially high false-positive rate (it appears<br>that the false-positive rate is in practice rather low compared to<br>other software, but we have not implemented any filtering to prevent<br>them from happening). The idea is that it is painstaking work to find<br>a putative peak, it is less difficult to discard unsatisfactory peaks<br>once they have been found.  Thus, some kind of post-filtering is<br>necessary. Pique provides the user with output that can be used to<br>support a variety of such statistical tests.<br><br>Some recommended filtering might include :<br><br>    [1] Eliminate peaks that are significantly narrower than the size<br>        range of the sequencing library, and perhaps other peaks that<br>        cluster with them.<br><br>    [2] Eliminate peaks with a normalized enrichment ratio below 1.0,<br>        or peaks that cluster with them.<br><br>    [3] Eliminate peaks that have predicted binding sites that are<br>        very skewed from the center of the enriched region.<br><br>Depending on how many peaks are recovered, the user may wish to try<br>one or all of these, perhaps with clustering to avoid arbitrary<br>cutoffs.<br><br>However, we do not recommend trying to generate a \"perfect\" peak list<br>by statistical analysis alone.<br><br>MANUAL CURATION<br>---------------<br><br>Microbial genomes are fairly small. It is probably not worth the<br>effort to undertake a very complicated statistical effort to eliminate<br>all false positives. We recommend applying a few basic statistical<br>tests, and then loading tracks, quantitative positionals and bookmarks<br>into the Gaggle Genome Browser.<br><br>Once the data is loaded into the browser, view the bookmark list. When<br>you select a bookmark, the browser will automatically scan to that<br>region of the genome and highlight the putative peak region. If you<br>think the peak is a false positive, press the delete key.<br><br>When you are finished, save a copy of the bookmark file. We find that<br>curation of a microbial genome in this way takes about ten to twenty<br>minutes.<br><br>INSPIRATIONAL QUOTE<br>-------------------<br><br>I met men at every turn who owned from one thousand to thirty thousand<br>\"feet\" in undeveloped silver mines, every single foot of which they<br>believed would shortly be worth from fifty to a thousand dollars\u2014and<br>as often as any other way they were men who had not twenty-five<br>dollars in the world. Every man you met had his new mine to boast of,<br>and his \"specimens\" ready; and if the opportunity offered, he would<br>infallibly back you into a corner and offer as a favor to you, not to<br>him, to part with just a few feet in the \"Golden Age,\" or the \"Sarah<br>Jane,\" or some other unknown stack of croppings, for money enough to<br>get a \"square meal\" with, as the phrase went. And you were never to<br>reveal that he had made you the offer at such a ruinous price, for it<br>was only out of friendship for you that he was willing to make the<br>sacrifice. Then he would fish a piece of rock out of his pocket, and<br>after looking mysteriously around as if he feared he might be waylaid<br>and robbed if caught with such wealth in his possession, he would dab<br>the rock against his tongue, clap an eyeglass to it, and exclaim:<br><br>\"Look at that! Right there in that red dirt! See it? See the specks of<br>gold? And the streak of silver? That's from the Uncle Abe. There's a<br>hundred thousand tons like that in sight! Right in sight, mind you!<br>And when we get down on it and the ledge comes in solid, it will be<br>the richest thing in the world! Look at the assay! I don't want you to<br>believe me\u2014look at the assay!\"<br><br>Then he would get out a greasy sheet of paper which showed that the<br>portion of rock assayed had given evidence of containing silver and<br>gold in the proportion of so many hundreds or thousands of dollars to<br>the ton.<br><br>I little knew, then, that the custom was to hunt out the richest piece<br>of rock and get it assayed! Very often, that piece, the size of a<br>filbert, was the only fragment in a ton that had a particle of metal<br>in it\u2014and yet the assay made it pretend to represent the average value<br>of the ton of rubbish it came from!<br><br>    - Mark Twain, Roughing It<br><br><br>LEGAL STUFF<br>-----------<br><br>Copyright (c) 2012, Russell Neches<br>All rights reserved.<br><br>Redistribution and use in source and binary forms, with or without<br>modification, are permitted provided that the following conditions are<br>met:<br><br>    * Redistributions of source code must retain the above copyright <br>      notice, this list of conditions and the following disclaimer.<br><br>    * Redistributions in binary form must reproduce the above copyright<br>      notice, this list of conditions and the following disclaimer in <br>      the documentation and/or other materials provided with the <br>      distribution.<br><br>    * Neither the name of the University of California, Davis nor the <br>      names of its contributors may be used to endorse or promote <br>      products derived from this software without specific prior <br>      written permission.<br><br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS<br>\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT<br>LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR<br>A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT<br>HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,<br>SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT<br>LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,<br>DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY<br>THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT<br>(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE<br>OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<br><br>\n          </div>"}, "last_serial": 796292, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "352e4e7a6f801775e3d551386230da25", "sha256": "eaa0251954039086c5dfe9679861a743bad433b22254d55870bd71e52477e9a5"}, "downloads": -1, "filename": "pique-0.1.tar.gz", "has_sig": true, "md5_digest": "352e4e7a6f801775e3d551386230da25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20578, "upload_time": "2012-11-27T05:58:44", "upload_time_iso_8601": "2012-11-27T05:58:44.806774Z", "url": "https://files.pythonhosted.org/packages/8b/14/3be1f35789bf50f000c64b787bd4b1141a301fcc31aadc9b1b9fb9f93ca9/pique-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a02d43141c98bdec19323aa7002e5879", "sha256": "0dc6584eebdef9e886727edb90783908331b6b20b56a9eb3fc41a4cc7abba9fe"}, "downloads": -1, "filename": "pique-0.1.1.tar.gz", "has_sig": true, "md5_digest": "a02d43141c98bdec19323aa7002e5879", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21174, "upload_time": "2012-11-27T06:33:32", "upload_time_iso_8601": "2012-11-27T06:33:32.891593Z", "url": "https://files.pythonhosted.org/packages/ad/a1/2c685a78fb0c2d40748ebb797d0c508436634084e5b7aedbf7eba0b7b793/pique-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "af887e0b5f70324ffe4e13cc9de0f373", "sha256": "fc8cf295e77f2abc5bb3b4596de9c3b854ed5235b0b783833de2590d45d4adeb"}, "downloads": -1, "filename": "pique-0.1.2.tar.gz", "has_sig": false, "md5_digest": "af887e0b5f70324ffe4e13cc9de0f373", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57167, "upload_time": "2012-12-01T08:40:54", "upload_time_iso_8601": "2012-12-01T08:40:54.747798Z", "url": "https://files.pythonhosted.org/packages/6c/1d/cbbbb02eb542699815ec8cc4449a83aadf4b9361368f7d122eaf302ff506/pique-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "654f92f1399909fbcb14a1ffca95b94f", "sha256": "6804321ed8af4693d3e3d293050617ed990e86d4051d0f6e1c2fcf2fcc4c3ebd"}, "downloads": -1, "filename": "pique-0.1.3.tar.gz", "has_sig": false, "md5_digest": "654f92f1399909fbcb14a1ffca95b94f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57223, "upload_time": "2012-12-12T01:04:09", "upload_time_iso_8601": "2012-12-12T01:04:09.593271Z", "url": "https://files.pythonhosted.org/packages/cc/c8/91745370faa91ab57e91a98e571139d07ce990cc88523f22a1621bfd2af0/pique-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "46c5fe4c927ef93091a2b427316f123f", "sha256": "227a2a9e3fb5c68ab53d568d4da9e08e1f12f9a70b3225d33a78ce9d9d56d1ad"}, "downloads": -1, "filename": "pique-0.1.4.tar.gz", "has_sig": false, "md5_digest": "46c5fe4c927ef93091a2b427316f123f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57300, "upload_time": "2012-12-12T02:13:58", "upload_time_iso_8601": "2012-12-12T02:13:58.883156Z", "url": "https://files.pythonhosted.org/packages/d5/48/641c7cad711b451a2d9149605d55c5953b62e1f1457e93c2a5b2c953d984/pique-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "2d14219f9242936ee98df0c99bc1222a", "sha256": "c43212936cd34939a3399524c567074ac7513eb3dfb1e4df61ee74c1ca0a57c8"}, "downloads": -1, "filename": "pique-0.1.5.tar.gz", "has_sig": false, "md5_digest": "2d14219f9242936ee98df0c99bc1222a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58200, "upload_time": "2013-01-01T09:32:38", "upload_time_iso_8601": "2013-01-01T09:32:38.223689Z", "url": "https://files.pythonhosted.org/packages/7d/3e/37933792a997a1f57aceba17ae6f452671fd911e97ac0bcb96eaae0588bd/pique-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "f4981d7cc38391bf2eee6fbd57dfbbe6", "sha256": "c7ff39d3853f79eaa99194ad3c49337f110ba7094eace2e6fbe65fac9d37d9da"}, "downloads": -1, "filename": "pique-0.1.6.tar.gz", "has_sig": false, "md5_digest": "f4981d7cc38391bf2eee6fbd57dfbbe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58210, "upload_time": "2013-01-26T01:31:43", "upload_time_iso_8601": "2013-01-26T01:31:43.883267Z", "url": "https://files.pythonhosted.org/packages/b5/d1/fc0caf4d78ee76ed55319b046368074f5eae852f99900bda8f6066d86c61/pique-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "8218cdef3e256561b165a5ca738d3612", "sha256": "26a228e124490c5a46e501d4be6a26046fdcafc91840c4bae491373b642ad2bd"}, "downloads": -1, "filename": "pique-0.1.7.tar.gz", "has_sig": false, "md5_digest": "8218cdef3e256561b165a5ca738d3612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58262, "upload_time": "2013-06-14T11:27:24", "upload_time_iso_8601": "2013-06-14T11:27:24.740273Z", "url": "https://files.pythonhosted.org/packages/46/cf/0c58b9033c02b32d41d13ff001dea816923aebfd40ca0f817a41ff70f075/pique-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8218cdef3e256561b165a5ca738d3612", "sha256": "26a228e124490c5a46e501d4be6a26046fdcafc91840c4bae491373b642ad2bd"}, "downloads": -1, "filename": "pique-0.1.7.tar.gz", "has_sig": false, "md5_digest": "8218cdef3e256561b165a5ca738d3612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58262, "upload_time": "2013-06-14T11:27:24", "upload_time_iso_8601": "2013-06-14T11:27:24.740273Z", "url": "https://files.pythonhosted.org/packages/46/cf/0c58b9033c02b32d41d13ff001dea816923aebfd40ca0f817a41ff70f075/pique-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:03 2020"}