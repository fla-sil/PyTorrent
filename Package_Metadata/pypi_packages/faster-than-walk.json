{"info": {"author": "Juan Carlos", "author_email": "juancarlospaco@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Other Environment", "Intended Audience :: Developers", "Intended Audience :: Other Audience", "Natural Language :: English", "Operating System :: OS Independent", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development"], "description": "<meta name='keywords' content='walk, os.walk, python, faster, speed, benchmark, rapido, velocidad, optimizacion, cython, pypy, cpython, docker, json, ndjson, rapido, veloz, performance, critical, compiled, module, modulo, loc, minimalismo, minimalism, simple, small, tiny, argentina, spanish, compare, mejora'>\n\n# Faster-than-Walk\n\n[![screenshot](https://source.unsplash.com/eH_ftJYhaTY/800x402)](https://youtu.be/QiKwnlyhKrk?t=5)\n\n![](https://img.shields.io/github/languages/top/juancarlospaco/faster-than-walk?style=for-the-badge)\n![](https://img.shields.io/github/languages/count/juancarlospaco/faster-than-walk?logoColor=green&style=for-the-badge)\n![](https://img.shields.io/github/stars/juancarlospaco/faster-than-walk?style=for-the-badge \"Star faster-than-walk on GitHub!\")\n![](https://img.shields.io/maintenance/yes/2019?style=for-the-badge \"2019\")\n![](https://img.shields.io/github/languages/code-size/juancarlospaco/faster-than-walk?style=for-the-badge)\n![](https://img.shields.io/github/issues-raw/juancarlospaco/faster-than-walk?style=for-the-badge \"Bugs\")\n![](https://img.shields.io/github/issues-pr-raw/juancarlospaco/faster-than-walk?style=for-the-badge \"PRs\")\n![](https://img.shields.io/github/commit-activity/y/juancarlospaco/faster-than-walk?style=for-the-badge)\n![](https://img.shields.io/github/last-commit/juancarlospaco/faster-than-walk?style=for-the-badge \"Commits\")\n\n| Library                       | Speed    |\n|-------------------------------|----------|\n| os.walk (std lib)             | `225.98` |\n| faster_than_walk              | `70.0`   |\n\n<details>\n\n- Benchmarks run on Docker from Dockerfile on this repo.\n- Speed is IRL time to complete 10000 full recursive directory walks to `/usr/share/`.\n- This depends a lot on I/O but overall most of times is faster.\n- Stats as of year 2019.\n- x86_64 64Bit AMD, SSD, Arch Linux.\n\n</details>\n\n\n# Use\n\n```python\nimport faster_than_walk as ftw\n\nprint(ftw.walk(\"/path/to/some/folder\"))                   # From path string\nprint(ftw.walk(\"/path/to/some/folder\", [\".py\", \".txt\"]))  # Filter by Extension\nprint(ftw.walk(\"/path/to/some/folder\", [\".py\"], followlinks=True))  # Follow SymLinks\nprint(ftw.walk(\"/path/to/some/folder\", [\".py\"], followlinks=True, yieldfiles=False)) # Folders only\nprint(ftw.walk_glob(\"*.txt\"))           # Standard POSIX Globs\nprint(ftw.walk_glob(\"**/*.txt\"))        # Recursive standard POSIX Globs\n```\n\n\n# walk()\n<details>\n\n**Description:**\nTakes a path string, makes a full recursive walk of folders and returns a list with the result.\nRecursive directory walk from path to list of strings.\n\n**Arguments:**\n- `folderpath` A local path, `str` type, required, must not be empty string.\n- `extensions` list of file Extensions, `list` type, optional, list must contain `str`, must not be empty list.\n- `followlinks` Set to `True` to follow SymLinks, `bool` type, optional.\n- `yieldfiles` Set to `False` to return folders only, `bool` type, optional.\n- `debugs` Set to `True` for Debug mode, `bool` type, optional, not needed for normal usage.\n\n**Returns:**\nResult, `list` type, values of the list are `str` type.\n\n</details>\n\n\n# walk_glob()\n<details>\n\n**Description:**\nTakes a path string, makes a full recursive walk of folders and returns a list with the result.\nRecursive directory walk from standard POSIX like Glob Pattern string to list of strings, allows Recursive and Non-Recursive Globs.\n\n**Arguments:**\n- `globpattern` A standard POSIX like Glob Pattern string, `str` type, required, must not be empty string.\n\n**Returns:**\nResult, `list` type, values of the list are `str` type.\n\n</details>\n\n\n# walk_simple()\n<details>\n\n**Description:**\nTakes a path string, makes a full recursive walk of folders and returns a list with the result.\nRecursive directory walk from path to list of strings.\n\n**Arguments:**\n- `folderpath` A local path, `str` type, required, must not be empty string.\n- `recursive` Set to `True` to be Recursive, `bool` type, optional.\n- `relative` Set to `True` to Relative paths, `bool` type, optional.\n\n**Returns:**\nResult, `list` type, values of the list are `str` type.\n\n</details>\n\n\n# walk_files()\n<details>\n\n**Description:**\nTakes a path string, makes a full recursive walk of folders and returns a list with the result.\nRecursive directory walk from path to list of strings.\n\n**Arguments:**\n- `globpattern` A standard POSIX like Glob Pattern string, `str` type, required, must not be empty string.\n- `folders_only` Set to `True` to be only return Folders, `bool` type, optional.\n\n**Returns:**\nResult, `list` type, values of the list are `str` type.\n\n</details>\n\n\n## debugs()\n<details>\n\n**Description:**\nDebug the internal Configuration of the library, takes no arguments, returns nothing,\nprints the pretty-printed human-friendly multi-line JSON Configuration to standard output terminal.\nUse it for copy&paste into new Bug Reports!!!.\n\n**Arguments:** None.\n\n**Returns:** None.\n\n</details>\n\n\n[**For more Examples check the Examples.**](https://github.com/juancarlospaco/faster-than-walk/blob/master/examples/example.py)\n\nInstead of having a pair of functions with a lot of arguments that you should provide to make it work,\nwe have tiny functions with very few arguments that do one thing and do it as fast as possible.\n\n\n# Install\n\n- `pip install faster_than_walk`\n\n\n# Dependencies\n\n- **None**\n\n\n# Docker\n\n- Make a quick test drive on Docker!.\n\n```bash\n$ ./build-docker.sh\n$ ./run-docker.sh\n$ ./run-benchmark.sh  # Inside Docker.\n```\n\n\n# Platforms\n\n- \u2705 Linux\n- \u2705 Windows\n- \u2705 Mac\n- \u2705 Android\n- \u2705 Raspberry Pi\n- \u2705 BSD\n\n\n# Extras\n\nMore Faster Libraries...\n\n- https://github.com/juancarlospaco/faster-than-csv#faster-than-csv\n- https://github.com/juancarlospaco/faster-than-requests#faster-than-requests\n- We want to make Open Source faster, better, stronger.\n\n\n# Requisites\n\n- Python 3.\n- GCC.\n- 64 Bit.\n\n\n# Stars\n\n![Star faster-than-walk on GitHub](https://starchart.cc/juancarlospaco/faster-than-walk.svg \"Star faster-than-walk on GitHub!\")\n\n\n# FAQ\n\n- Whats the idea, inspiration, reason, etc ?.\n\n[Feel free to Fork, Clone, Download, Improve, Reimplement, Play with this Open Source. Make it 10 times faster, 10 times smaller.](http://tonsky.me/blog/disenchantment)\n\n- This requires Cython ?.\n\nNo.\n\n- This runs on PyPy ?.\n\nNo.\n\n- This runs on Python2 ?.\n\nI dunno. (Not supported)\n\n- This runs on 32Bit ?.\n\nNo.\n\n- This runs with Clang ?.\n\nNo.\n\n- How can I Install it ?.\n\n`pip install faster_than_walk`\n\n- How can be faster than `os.walk` ?.\n\nI dunno.\n\n- How to Filter by File Extensions ?.\n\n`extensions = [\".py\", \".txt\", \".tar.gz\"]`\n\n(Glob Pattern may be faster for several file extensions than the extensions argument)\n\n- How to force Follow SymLinks ?.\n\n`followlinks = True`\n\n- How to force return Folders only and Not Files ?.\n\n`yieldfiles = False`\n\n- How to enable Debug ?.\n\n`debugs = True`\n\n- How to use a Glob Pattern ?.\n\n`globpattern = \"*.txt\"`\n\n- How to use a Recursive Glob Pattern ?.\n\n`globpattern = \"**/*.txt\"`\n\n- I need to `import glob` on my code to use a Glob Pattern ?.\n\nNo.\n\n- Whats a Glob Pattern ?.\n\nhttps://en.wikipedia.org/wiki/Glob_%28programming%29\n\n- Why needs 64Bit ?.\n\nMaybe it works on 32Bit, but is not supported, integer sizes are too small, and performance can be worse.\n\n- Why needs Python 3 ?.\n\nMaybe it works on Python 2, but is not supported, and performance can be worse, we suggest to migrate to Python3.\n\n- Can I wrap the functions on a `try: except:` block ?.\n\nFunctions do not have internal `try: except:` blocks,\nso you can wrap them inside `try: except:` blocks if you need very resilient code.\n\n- PIP fails to install or fails build the wheel ?.\n\nAdd at the end of the PIP install command:\n\n` --isolated --disable-pip-version-check --no-cache-dir --no-binary :all: `\n\nNot my Bug.\n\n- How to Build the project ?.\n\n`build.sh`\n\n- How to Package the project ?.\n\n`package.sh`\n\n- This requires Nimble ?.\n\nNo.\n\n- Whats the unit of measurement for speed ?.\n\nUnmmodified raw output of Python `timeit` module.\n\nPlease send Pull Request to Python to improve the output of `timeit`.\n\n- How does this compare to `scandir` ?.\n\n**Scandir:**\n- Not Recursive.\n- Returns iterator.\n- Items yielded in random order.\n\n**ftw:**\n- Recursive.\n- Returns `list`.\n- Items preserve order.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/juancarlospaco/faster-than-walk/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/juancarlospaco/faster-than-walk#faster-than-walk", "keywords": "python3,cpython,speed,walk,cython,performance,c", "license": "MIT", "maintainer": "Juan Carlos", "maintainer_email": "juancarlospaco@gmail.com", "name": "faster-than-walk", "package_url": "https://pypi.org/project/faster-than-walk/", "platform": "Linux", "project_url": "https://pypi.org/project/faster-than-walk/", "project_urls": {"Bugs": "https://github.com/juancarlospaco/faster-than-walk/issues", "CoC": "https://github.com/juancarlospaco/faster-than-walk/blob/master/CODE_OF_CONDUCT.md", "Docs": "https://github.com/juancarlospaco/faster-than-walk#faster-than-walk", "Download": "https://github.com/juancarlospaco/faster-than-walk/releases", "Homepage": "https://github.com/juancarlospaco/faster-than-walk#faster-than-walk"}, "release_url": "https://pypi.org/project/faster-than-walk/0.9.1/", "requires_dist": null, "requires_python": ">3.6", "summary": "Faster recursive directory walk for Python.", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            &lt;meta name='keywords' content='walk, os.walk, python, faster, speed, benchmark, rapido, velocidad, optimizacion, cython, pypy, cpython, docker, json, ndjson, rapido, veloz, performance, critical, compiled, module, modulo, loc, minimalismo, minimalism, simple, small, tiny, argentina, spanish, compare, mejora'&gt;\n<h1>Faster-than-Walk</h1>\n<p><a href=\"https://youtu.be/QiKwnlyhKrk?t=5\" rel=\"nofollow\"><img alt=\"screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d2993481369f36c80455adaeada026f9978958c/68747470733a2f2f736f757263652e756e73706c6173682e636f6d2f65485f66744a59686154592f38303078343032\"></a></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d92916a16a7825e72a1438cef9cc24d41cfe040/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f746f702f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b3f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d67e4eed114ee560156b9528c2bf9071c5bf690/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f636f756e742f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b3f6c6f676f436f6c6f723d677265656e267374796c653d666f722d7468652d6261646765\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a8de1ef8c491f9fe0349db73cf57ba21e45cd22/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b3f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/305d86c4de4ac7f42819993f548b0cbe996df05e/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f323031393f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af71b545c440fa5a5d6e009417f2b6aa51f0c4d4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f636f64652d73697a652f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b3f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c99e9ff3f1ceab331371c63ae76ec51a8c092601/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b3f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aea43cc5cc4592163d16938b7fb53c25adcf373b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722d7261772f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b3f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/774f45e8ac2313d182db105f6426344759020bbd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f792f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b3f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6aa06916d943f548450f7e46a5366c3dc42d10da/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b3f7374796c653d666f722d7468652d6261646765\"></p>\n<table>\n<thead>\n<tr>\n<th>Library</th>\n<th>Speed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>os.walk (std lib)</td>\n<td><code>225.98</code></td>\n</tr>\n<tr>\n<td>faster_than_walk</td>\n<td><code>70.0</code></td>\n</tr></tbody></table>\n<details>\n<ul>\n<li>Benchmarks run on Docker from Dockerfile on this repo.</li>\n<li>Speed is IRL time to complete 10000 full recursive directory walks to <code>/usr/share/</code>.</li>\n<li>This depends a lot on I/O but overall most of times is faster.</li>\n<li>Stats as of year 2019.</li>\n<li>x86_64 64Bit AMD, SSD, Arch Linux.</li>\n</ul>\n</details>\n<h1>Use</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">faster_than_walk</span> <span class=\"k\">as</span> <span class=\"nn\">ftw</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ftw</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/some/folder\"</span><span class=\"p\">))</span>                   <span class=\"c1\"># From path string</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ftw</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/some/folder\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\".py\"</span><span class=\"p\">,</span> <span class=\"s2\">\".txt\"</span><span class=\"p\">]))</span>  <span class=\"c1\"># Filter by Extension</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ftw</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/some/folder\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\".py\"</span><span class=\"p\">],</span> <span class=\"n\">followlinks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>  <span class=\"c1\"># Follow SymLinks</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ftw</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/some/folder\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\".py\"</span><span class=\"p\">],</span> <span class=\"n\">followlinks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">yieldfiles</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span> <span class=\"c1\"># Folders only</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ftw</span><span class=\"o\">.</span><span class=\"n\">walk_glob</span><span class=\"p\">(</span><span class=\"s2\">\"*.txt\"</span><span class=\"p\">))</span>           <span class=\"c1\"># Standard POSIX Globs</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ftw</span><span class=\"o\">.</span><span class=\"n\">walk_glob</span><span class=\"p\">(</span><span class=\"s2\">\"**/*.txt\"</span><span class=\"p\">))</span>        <span class=\"c1\"># Recursive standard POSIX Globs</span>\n</pre>\n<h1>walk()</h1>\n<details>\n<p><strong>Description:</strong>\nTakes a path string, makes a full recursive walk of folders and returns a list with the result.\nRecursive directory walk from path to list of strings.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>folderpath</code> A local path, <code>str</code> type, required, must not be empty string.</li>\n<li><code>extensions</code> list of file Extensions, <code>list</code> type, optional, list must contain <code>str</code>, must not be empty list.</li>\n<li><code>followlinks</code> Set to <code>True</code> to follow SymLinks, <code>bool</code> type, optional.</li>\n<li><code>yieldfiles</code> Set to <code>False</code> to return folders only, <code>bool</code> type, optional.</li>\n<li><code>debugs</code> Set to <code>True</code> for Debug mode, <code>bool</code> type, optional, not needed for normal usage.</li>\n</ul>\n<p><strong>Returns:</strong>\nResult, <code>list</code> type, values of the list are <code>str</code> type.</p>\n</details>\n<h1>walk_glob()</h1>\n<details>\n<p><strong>Description:</strong>\nTakes a path string, makes a full recursive walk of folders and returns a list with the result.\nRecursive directory walk from standard POSIX like Glob Pattern string to list of strings, allows Recursive and Non-Recursive Globs.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>globpattern</code> A standard POSIX like Glob Pattern string, <code>str</code> type, required, must not be empty string.</li>\n</ul>\n<p><strong>Returns:</strong>\nResult, <code>list</code> type, values of the list are <code>str</code> type.</p>\n</details>\n<h1>walk_simple()</h1>\n<details>\n<p><strong>Description:</strong>\nTakes a path string, makes a full recursive walk of folders and returns a list with the result.\nRecursive directory walk from path to list of strings.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>folderpath</code> A local path, <code>str</code> type, required, must not be empty string.</li>\n<li><code>recursive</code> Set to <code>True</code> to be Recursive, <code>bool</code> type, optional.</li>\n<li><code>relative</code> Set to <code>True</code> to Relative paths, <code>bool</code> type, optional.</li>\n</ul>\n<p><strong>Returns:</strong>\nResult, <code>list</code> type, values of the list are <code>str</code> type.</p>\n</details>\n<h1>walk_files()</h1>\n<details>\n<p><strong>Description:</strong>\nTakes a path string, makes a full recursive walk of folders and returns a list with the result.\nRecursive directory walk from path to list of strings.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>globpattern</code> A standard POSIX like Glob Pattern string, <code>str</code> type, required, must not be empty string.</li>\n<li><code>folders_only</code> Set to <code>True</code> to be only return Folders, <code>bool</code> type, optional.</li>\n</ul>\n<p><strong>Returns:</strong>\nResult, <code>list</code> type, values of the list are <code>str</code> type.</p>\n</details>\n<h2>debugs()</h2>\n<details>\n<p><strong>Description:</strong>\nDebug the internal Configuration of the library, takes no arguments, returns nothing,\nprints the pretty-printed human-friendly multi-line JSON Configuration to standard output terminal.\nUse it for copy&amp;paste into new Bug Reports!!!.</p>\n<p><strong>Arguments:</strong> None.</p>\n<p><strong>Returns:</strong> None.</p>\n</details>\n<p><a href=\"https://github.com/juancarlospaco/faster-than-walk/blob/master/examples/example.py\" rel=\"nofollow\"><strong>For more Examples check the Examples.</strong></a></p>\n<p>Instead of having a pair of functions with a lot of arguments that you should provide to make it work,\nwe have tiny functions with very few arguments that do one thing and do it as fast as possible.</p>\n<h1>Install</h1>\n<ul>\n<li><code>pip install faster_than_walk</code></li>\n</ul>\n<h1>Dependencies</h1>\n<ul>\n<li><strong>None</strong></li>\n</ul>\n<h1>Docker</h1>\n<ul>\n<li>Make a quick test drive on Docker!.</li>\n</ul>\n<pre>$ ./build-docker.sh\n$ ./run-docker.sh\n$ ./run-benchmark.sh  <span class=\"c1\"># Inside Docker.</span>\n</pre>\n<h1>Platforms</h1>\n<ul>\n<li>\u2705 Linux</li>\n<li>\u2705 Windows</li>\n<li>\u2705 Mac</li>\n<li>\u2705 Android</li>\n<li>\u2705 Raspberry Pi</li>\n<li>\u2705 BSD</li>\n</ul>\n<h1>Extras</h1>\n<p>More Faster Libraries...</p>\n<ul>\n<li><a href=\"https://github.com/juancarlospaco/faster-than-csv#faster-than-csv\" rel=\"nofollow\">https://github.com/juancarlospaco/faster-than-csv#faster-than-csv</a></li>\n<li><a href=\"https://github.com/juancarlospaco/faster-than-requests#faster-than-requests\" rel=\"nofollow\">https://github.com/juancarlospaco/faster-than-requests#faster-than-requests</a></li>\n<li>We want to make Open Source faster, better, stronger.</li>\n</ul>\n<h1>Requisites</h1>\n<ul>\n<li>Python 3.</li>\n<li>GCC.</li>\n<li>64 Bit.</li>\n</ul>\n<h1>Stars</h1>\n<p><img alt=\"Star faster-than-walk on GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b2f63ec818f05e69cd7a5db8565e57ad2bddeba/68747470733a2f2f7374617263686172742e63632f6a75616e6361726c6f737061636f2f6661737465722d7468616e2d77616c6b2e737667\"></p>\n<h1>FAQ</h1>\n<ul>\n<li>Whats the idea, inspiration, reason, etc ?.</li>\n</ul>\n<p><a href=\"http://tonsky.me/blog/disenchantment\" rel=\"nofollow\">Feel free to Fork, Clone, Download, Improve, Reimplement, Play with this Open Source. Make it 10 times faster, 10 times smaller.</a></p>\n<ul>\n<li>This requires Cython ?.</li>\n</ul>\n<p>No.</p>\n<ul>\n<li>This runs on PyPy ?.</li>\n</ul>\n<p>No.</p>\n<ul>\n<li>This runs on Python2 ?.</li>\n</ul>\n<p>I dunno. (Not supported)</p>\n<ul>\n<li>This runs on 32Bit ?.</li>\n</ul>\n<p>No.</p>\n<ul>\n<li>This runs with Clang ?.</li>\n</ul>\n<p>No.</p>\n<ul>\n<li>How can I Install it ?.</li>\n</ul>\n<p><code>pip install faster_than_walk</code></p>\n<ul>\n<li>How can be faster than <code>os.walk</code> ?.</li>\n</ul>\n<p>I dunno.</p>\n<ul>\n<li>How to Filter by File Extensions ?.</li>\n</ul>\n<p><code>extensions = [\".py\", \".txt\", \".tar.gz\"]</code></p>\n<p>(Glob Pattern may be faster for several file extensions than the extensions argument)</p>\n<ul>\n<li>How to force Follow SymLinks ?.</li>\n</ul>\n<p><code>followlinks = True</code></p>\n<ul>\n<li>How to force return Folders only and Not Files ?.</li>\n</ul>\n<p><code>yieldfiles = False</code></p>\n<ul>\n<li>How to enable Debug ?.</li>\n</ul>\n<p><code>debugs = True</code></p>\n<ul>\n<li>How to use a Glob Pattern ?.</li>\n</ul>\n<p><code>globpattern = \"*.txt\"</code></p>\n<ul>\n<li>How to use a Recursive Glob Pattern ?.</li>\n</ul>\n<p><code>globpattern = \"**/*.txt\"</code></p>\n<ul>\n<li>I need to <code>import glob</code> on my code to use a Glob Pattern ?.</li>\n</ul>\n<p>No.</p>\n<ul>\n<li>Whats a Glob Pattern ?.</li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Glob_%28programming%29\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Glob_%28programming%29</a></p>\n<ul>\n<li>Why needs 64Bit ?.</li>\n</ul>\n<p>Maybe it works on 32Bit, but is not supported, integer sizes are too small, and performance can be worse.</p>\n<ul>\n<li>Why needs Python 3 ?.</li>\n</ul>\n<p>Maybe it works on Python 2, but is not supported, and performance can be worse, we suggest to migrate to Python3.</p>\n<ul>\n<li>Can I wrap the functions on a <code>try: except:</code> block ?.</li>\n</ul>\n<p>Functions do not have internal <code>try: except:</code> blocks,\nso you can wrap them inside <code>try: except:</code> blocks if you need very resilient code.</p>\n<ul>\n<li>PIP fails to install or fails build the wheel ?.</li>\n</ul>\n<p>Add at the end of the PIP install command:</p>\n<p><code>--isolated --disable-pip-version-check --no-cache-dir --no-binary :all:</code></p>\n<p>Not my Bug.</p>\n<ul>\n<li>How to Build the project ?.</li>\n</ul>\n<p><code>build.sh</code></p>\n<ul>\n<li>How to Package the project ?.</li>\n</ul>\n<p><code>package.sh</code></p>\n<ul>\n<li>This requires Nimble ?.</li>\n</ul>\n<p>No.</p>\n<ul>\n<li>Whats the unit of measurement for speed ?.</li>\n</ul>\n<p>Unmmodified raw output of Python <code>timeit</code> module.</p>\n<p>Please send Pull Request to Python to improve the output of <code>timeit</code>.</p>\n<ul>\n<li>How does this compare to <code>scandir</code> ?.</li>\n</ul>\n<p><strong>Scandir:</strong></p>\n<ul>\n<li>Not Recursive.</li>\n<li>Returns iterator.</li>\n<li>Items yielded in random order.</li>\n</ul>\n<p><strong>ftw:</strong></p>\n<ul>\n<li>Recursive.</li>\n<li>Returns <code>list</code>.</li>\n<li>Items preserve order.</li>\n</ul>\n\n          </div>"}, "last_serial": 6235244, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "63066cdb449254ef47ad81ca14610d80", "sha256": "21af300a7912e9923b14185fc58d334b134a9dbf08c1038301c1e7e16d3251e2"}, "downloads": -1, "filename": "faster_than_walk-0.1.zip", "has_sig": false, "md5_digest": "63066cdb449254ef47ad81ca14610d80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106666, "upload_time": "2019-01-04T18:55:51", "upload_time_iso_8601": "2019-01-04T18:55:51.743224Z", "url": "https://files.pythonhosted.org/packages/3f/df/dfcd4a19ef492dfd7a08f4fc3de33deafc600029fb77ca5a11133b06ad89/faster_than_walk-0.1.zip", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "080ae442c8177a333c0a67ac348ca5cd", "sha256": "aa5c0dd068b2caef380299e2e5d904f893186f0620d01bfbb956bb8f211dd509"}, "downloads": -1, "filename": "faster_than_walk-0.5.zip", "has_sig": false, "md5_digest": "080ae442c8177a333c0a67ac348ca5cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 115746, "upload_time": "2019-05-22T06:02:41", "upload_time_iso_8601": "2019-05-22T06:02:41.594409Z", "url": "https://files.pythonhosted.org/packages/94/88/89bf68d0470947551d6b7916d0c9f0789c502cd41386c52538f75eb4cb80/faster_than_walk-0.5.zip", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "b68c885dc5c20830516cf186a706d48a", "sha256": "7a2feefd53407dbdcca5a3664358b8f7eca7b0f6bafc9224cbe4cc5846e76550"}, "downloads": -1, "filename": "faster_than_walk-0.9.1.zip", "has_sig": false, "md5_digest": "b68c885dc5c20830516cf186a706d48a", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 116710, "upload_time": "2019-12-03T14:14:26", "upload_time_iso_8601": "2019-12-03T14:14:26.946303Z", "url": "https://files.pythonhosted.org/packages/c6/75/80372a864e98c5fee3be65544d8b4b75cd77ba113058ff4e24785b64494f/faster_than_walk-0.9.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b68c885dc5c20830516cf186a706d48a", "sha256": "7a2feefd53407dbdcca5a3664358b8f7eca7b0f6bafc9224cbe4cc5846e76550"}, "downloads": -1, "filename": "faster_than_walk-0.9.1.zip", "has_sig": false, "md5_digest": "b68c885dc5c20830516cf186a706d48a", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 116710, "upload_time": "2019-12-03T14:14:26", "upload_time_iso_8601": "2019-12-03T14:14:26.946303Z", "url": "https://files.pythonhosted.org/packages/c6/75/80372a864e98c5fee3be65544d8b4b75cd77ba113058ff4e24785b64494f/faster_than_walk-0.9.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:43:33 2020"}