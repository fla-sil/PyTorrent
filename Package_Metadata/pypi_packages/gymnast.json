{"info": {"author": "Andrew Marks", "author_email": "ajmarks@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3 :: Only", "Topic :: Text Processing", "Topic :: Utilities"], "description": "Gymnast: It's not Acrobat\r\n----------------------------\r\n\r\n|GitHub license| |Code Issues|\r\n\r\nPDF parser written in Python 3 (backport to 2.7 in the works). This was\r\ndesigned to provide a Pythonic interface to access (and, eventually,\r\nwrite) Adobe PDF files. Some of attributes have non-Pythonic\r\ncapitalization, but that is to match the underlying structure of the PDF\r\ndocument (doing otherwise would get very confusing).\r\n\r\nUsage\r\n-----\r\n\r\n.. code:: python\r\n\r\n    import io\r\n    from gymnast          import PdfDocument\r\n    from gymnast.renderer import PdfBaseRenderer\r\n\r\n    class PdfSimpleRenderer(PdfBaseRenderer):\r\n        \"\"\"Simple renderer example that just extracts text with no processing\"\"\"\r\n        def __init__(self, page):\r\n            super().__init__(page)\r\n            self._text = io.StringIO()\r\n        def _render_text(self, text, new_state):\r\n            self._text.write(self.active_font.decode_string(text))\r\n        def _return(self):\r\n            return self._text.getvalue()\r\n\r\n    fname = '/path/to/file.pdf'\r\n    pdf   = PdfDocument(fname).parse()\r\n    text  = SimpleRenderer(pdf.Pages[-3]).render()\r\n\r\nTODO (in no particular order)\r\n-----------------------------\r\n\r\n-  **Features and functionality**\r\n-  [x] Rewrite the parser and document class to lazy-load the document\r\n   based on the xrefs table\r\n-  [x] Complete the base page renderer\r\n-  [ ] Page Rendering\r\n\r\n   -  [x] Getting the ``BaseRenderer`` class working\r\n   -  [x] Implement a proof of concept extractor that just dumps strings\r\n   -  [ ] Get a bit fancier, assigning textblocks to lines and such\r\n\r\n-  [ ] Handle page numbering more fully\r\n\r\n   -  [ ] Add a method to ``PdfDocument`` to get a page by number\r\n   -  [ ] Add propreties to ``PdfPage`` for the page number (both as an\r\n      ``int`` and a formatted ``str`` according to\r\n      ``PdfDocument.Root.PageLabels['Nums']``)\r\n\r\n-  [ ] Backport to Python 2.7 (about 80% done or so)\r\n-  [ ] Font stuff\r\n\r\n   -  [x] Carve the ``PdfFont`` class into an abstract ``PdfBaseFont``\r\n      and a ``PdfType1Font`` implementation\r\n   -  [x] ``PdfFont.__new__`` will pick the correct subclass based on\r\n      the font's Subtype element\r\n   -  [x] PdfBasefFont class will also have an abstract method for the\r\n      glyph space to text space transformation\r\n   -  [ ] Add subcless for Type3 fonts\r\n   -  [x] Add subcless for TrueType fonts\r\n   -  [ ] Add subcless for composite fonts\r\n   -  [x] Add legacy support for the 14 standard fonts\r\n   -  [ ] Font-to-unicode CMAPs\r\n\r\n-  [ ] Implement the remaining ``StreamFilter``\\ s (will probably have\r\n   the image ones return a ``PIL.Image``)\r\n\r\n   -  [ ] ``RunLengthDecode``\r\n   -  [ ] ``CCITTFaxDecode``\r\n   -  [ ] ``JBIG2Decode``\r\n   -  [ ] ``DCTDecode``\r\n   -  [ ] ``JPXDecode``\r\n   -  [ ] ``Crypt``\r\n\r\n-  [ ] Implement remaining object types\r\n\r\n   -  [ ] ``ObjStm``\r\n   -  [x] ``XRef``\r\n   -  [ ] ``Filespec``\r\n   -  [ ] ``EmbeddedFile``\r\n   -  [ ] ``CollectionItem`` / ``CollectionSubitem``\r\n   -  [ ] ``XObject``\r\n\r\n-  [ ] Handle document encryption\r\n-  [ ] Start on graphics stuff (maybe)\r\n-  [ ] Interactive forms (AcroForms)\r\n-  **Administrative**\r\n-  [ ] Write tests for existing code\r\n-  [x] Come up with a better name\r\n-  [ ] Document everything much, much better internally\r\n-  [ ] Package it up neatly and pypi it\r\n-  [ ] Write some proper documentation\r\n\r\n.. |GitHub license| image:: https://img.shields.io/github/license/mashape/apistatus.svg\r\n   :target: https://github.com/ajmarks/pdf_parser/blob/master/LICENSE\r\n.. |Code Issues| image:: https://www.quantifiedcode.com/api/v1/project/d0106c63f4f8467586aae7498f148e94/badge.svg\r\n   :target: https://www.quantifiedcode.com/app/project/d0106c63f4f8467586aae7498f148e94", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/ajmarks/gymnast/tarball/0.1a5", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ajmarks/gymnast/", "keywords": "pdf,acrobat", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "gymnast", "package_url": "https://pypi.org/project/gymnast/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gymnast/", "project_urls": {"Download": "https://github.com/ajmarks/gymnast/tarball/0.1a5", "Homepage": "https://github.com/ajmarks/gymnast/"}, "release_url": "https://pypi.org/project/gymnast/0.1a5/", "requires_dist": null, "requires_python": null, "summary": "Gymnast: PDF document parser in Python 3", "version": "0.1a5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"gymnast-it-s-not-acrobat\">\n<h2>Gymnast: It\u2019s not Acrobat</h2>\n<p><a href=\"https://github.com/ajmarks/pdf_parser/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36686084675cebbeff3809cb9d8291b8e6ebd672/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\"></a> <a href=\"https://www.quantifiedcode.com/app/project/d0106c63f4f8467586aae7498f148e94\" rel=\"nofollow\"><img alt=\"Code Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a01c50044e213ad97ce6b1996c8d7bb63ce80ae/68747470733a2f2f7777772e7175616e746966696564636f64652e636f6d2f6170692f76312f70726f6a6563742f64303130366336336634663834363735383661616537343938663134386539342f62616467652e737667\"></a></p>\n<p>PDF parser written in Python 3 (backport to 2.7 in the works). This was\ndesigned to provide a Pythonic interface to access (and, eventually,\nwrite) Adobe PDF files. Some of attributes have non-Pythonic\ncapitalization, but that is to match the underlying structure of the PDF\ndocument (doing otherwise would get very confusing).</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gymnast</span>          <span class=\"kn\">import</span> <span class=\"n\">PdfDocument</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gymnast.renderer</span> <span class=\"kn\">import</span> <span class=\"n\">PdfBaseRenderer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PdfSimpleRenderer</span><span class=\"p\">(</span><span class=\"n\">PdfBaseRenderer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Simple renderer example that just extracts text with no processing\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_text</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_render_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">new_state</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_text</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_font</span><span class=\"o\">.</span><span class=\"n\">decode_string</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_return</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_text</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span>\n\n<span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/file.pdf'</span>\n<span class=\"n\">pdf</span>   <span class=\"o\">=</span> <span class=\"n\">PdfDocument</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n<span class=\"n\">text</span>  <span class=\"o\">=</span> <span class=\"n\">SimpleRenderer</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">Pages</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"todo-in-no-particular-order\">\n<h2>TODO (in no particular order)</h2>\n<ul>\n<li><strong>Features and functionality</strong></li>\n<li>[x] Rewrite the parser and document class to lazy-load the document\nbased on the xrefs table</li>\n<li>[x] Complete the base page renderer</li>\n<li>[ ] Page Rendering<ul>\n<li>[x] Getting the <tt>BaseRenderer</tt> class working</li>\n<li>[x] Implement a proof of concept extractor that just dumps strings</li>\n<li>[ ] Get a bit fancier, assigning textblocks to lines and such</li>\n</ul>\n</li>\n<li>[ ] Handle page numbering more fully<ul>\n<li>[ ] Add a method to <tt>PdfDocument</tt> to get a page by number</li>\n<li>[ ] Add propreties to <tt>PdfPage</tt> for the page number (both as an\n<tt>int</tt> and a formatted <tt>str</tt> according to\n<tt><span class=\"pre\">PdfDocument.Root.PageLabels['Nums']</span></tt>)</li>\n</ul>\n</li>\n<li>[ ] Backport to Python 2.7 (about 80% done or so)</li>\n<li>[ ] Font stuff<ul>\n<li>[x] Carve the <tt>PdfFont</tt> class into an abstract <tt>PdfBaseFont</tt>\nand a <tt>PdfType1Font</tt> implementation</li>\n<li>[x] <tt>PdfFont.__new__</tt> will pick the correct subclass based on\nthe font\u2019s Subtype element</li>\n<li>[x] PdfBasefFont class will also have an abstract method for the\nglyph space to text space transformation</li>\n<li>[ ] Add subcless for Type3 fonts</li>\n<li>[x] Add subcless for TrueType fonts</li>\n<li>[ ] Add subcless for composite fonts</li>\n<li>[x] Add legacy support for the 14 standard fonts</li>\n<li>[ ] Font-to-unicode CMAPs</li>\n</ul>\n</li>\n<li>[ ] Implement the remaining <tt>StreamFilter</tt>s (will probably have\nthe image ones return a <tt>PIL.Image</tt>)<ul>\n<li>[ ] <tt>RunLengthDecode</tt></li>\n<li>[ ] <tt>CCITTFaxDecode</tt></li>\n<li>[ ] <tt>JBIG2Decode</tt></li>\n<li>[ ] <tt>DCTDecode</tt></li>\n<li>[ ] <tt>JPXDecode</tt></li>\n<li>[ ] <tt>Crypt</tt></li>\n</ul>\n</li>\n<li>[ ] Implement remaining object types<ul>\n<li>[ ] <tt>ObjStm</tt></li>\n<li>[x] <tt>XRef</tt></li>\n<li>[ ] <tt>Filespec</tt></li>\n<li>[ ] <tt>EmbeddedFile</tt></li>\n<li>[ ] <tt>CollectionItem</tt> / <tt>CollectionSubitem</tt></li>\n<li>[ ] <tt>XObject</tt></li>\n</ul>\n</li>\n<li>[ ] Handle document encryption</li>\n<li>[ ] Start on graphics stuff (maybe)</li>\n<li>[ ] Interactive forms (AcroForms)</li>\n<li><strong>Administrative</strong></li>\n<li>[ ] Write tests for existing code</li>\n<li>[x] Come up with a better name</li>\n<li>[ ] Document everything much, much better internally</li>\n<li>[ ] Package it up neatly and pypi it</li>\n<li>[ ] Write some proper documentation</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1824960, "releases": {"0.1a5": [{"comment_text": "", "digests": {"md5": "09ad7634c63246c7bc128d55ec9abae4", "sha256": "66eeb12762d7af83acacf2c3af69ab0af282cb7150167106ac6aef2e05de0b51"}, "downloads": -1, "filename": "gymnast-0.1a5.zip", "has_sig": false, "md5_digest": "09ad7634c63246c7bc128d55ec9abae4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 212024, "upload_time": "2015-11-18T23:22:10", "upload_time_iso_8601": "2015-11-18T23:22:10.415801Z", "url": "https://files.pythonhosted.org/packages/0d/47/2bf455d7817f0fe22de578d3467892fbb9eca551684b3cc6ae963153f96c/gymnast-0.1a5.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09ad7634c63246c7bc128d55ec9abae4", "sha256": "66eeb12762d7af83acacf2c3af69ab0af282cb7150167106ac6aef2e05de0b51"}, "downloads": -1, "filename": "gymnast-0.1a5.zip", "has_sig": false, "md5_digest": "09ad7634c63246c7bc128d55ec9abae4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 212024, "upload_time": "2015-11-18T23:22:10", "upload_time_iso_8601": "2015-11-18T23:22:10.415801Z", "url": "https://files.pythonhosted.org/packages/0d/47/2bf455d7817f0fe22de578d3467892fbb9eca551684b3cc6ae963153f96c/gymnast-0.1a5.zip", "yanked": false}], "timestamp": "Fri May  8 00:53:00 2020"}