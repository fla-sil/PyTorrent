{"info": {"author": "Ravin Kumar", "author_email": "mr.ravin_kumar@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta"], "description": "#####################################################################\r\n                      Ravdec- LossLess Data Compression\r\nAlgorithm Designer, and Module Developer: Mr. Ravin Kumar\r\nEmail    : mr.ravin_kumar@hotmail.com\r\nlinkedin : https://in.linkedin.com/in/ravinkumar21\r\n#####################################################################\r\nRavdec is based on a Lossless Data Compression Algorithm  which is designed and developed by Mr.Ravin Kumar on 19 September, 2016.This compression algorithm have a fixed compression ratio of 1.1429 in all possible cases, It accepts data of following format: alphabets,numbers, and symbols.\r\nExample: It can compress 1 GB to 896 MB.\r\n\r\n=======Application of Ravdec =========\r\n\r\nIt can be  used where the machine generates data at a very fast rate, that it became difficult for other algorithms to calculate the propability of a symbol, as data keeps on getting large, and is transmitted over the network with a much faster rate. In this case also, \r\nthe above module, and algorithm gives the same compression ratio.\r\n\r\n=======Application of Ravdec =========\r\n\r\nNOTE- The data that is to be compressed should have length of multiple of 8.(i.e 8 elements, or 16 elemnts or 24...so on)\r\n\r\n1) file_compression(filename) : \r\nIt is used to read data from a file, and create a compressed file wit extention of \".rav\" \r\n\r\n2) file_decompression(filename)\r\nIt is used to read data from a previously compressed file, and create a decompressed file wit extention of \".dec\" \r\n\r\n\r\n Example:\r\n ------------------------------\r\n import ravdec \r\n\r\n # to compress the file have elements of multiple of 8.\r\n ravdec.file_compression(\"filename.txt\")\r\n\r\n # to decompress the previously compressed file.\r\n ravdec.file_decompression(\"filename.rav\")\r\n\r\n ------------------------------\r\n\r\n\r\n3) net_compression(\"data to be compressed of length of multiple of 8 \") - To compress the  original data to transmit, that is needed to be   \r\n transmitted.\r\n\r\n4) net_decompression(\" previously compressed data\")  - To decompress the previously compressed data, that is received.\r\n\r\nIt is used where the machine generates data at a very fast rate, that it became difficult for other algorithms to calculate the propability of\r\na symbol, as data keeps on getting large, and is transmitted over the network with a much faster rate.\r\n\r\nExample:\r\n------------------------------\r\nimport ravdec\r\n\r\n# for compression\r\ncompressed_data=ravdec.net_compression(\"ASDFGHJK\")\r\n\r\n# note- data to be compressed should have length of multiple of 8.(i.e 8 elements, or 16 elements or 24...so on)\r\n# for decompression\r\n\r\ndecompressed_data=ravdec.decompression(\"previously compressed data\")\r\n\r\n------------------------------\r\n\r\nThis module is a free ware, build with the intention to help communities in data compression aspects.\r\n\r\nApplication of this module:\r\n*It can be  used where the machine generates data at a very fast rate, that it became difficult for other algorithms to calculate the\r\n probability of a symbol, as data keeps on getting large, and is transmitted over the network with a much faster rate. In this case also, the\r\n above module, and algorithm gives the same compression ratio.", "description_content_type": null, "docs_url": "https://pythonhosted.org/ravdec/", "download_url": "http://github.com/mr-ravin/ravdec", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mr-ravin/ravdec", "keywords": "lossless data compression", "license": "MIT", "maintainer": "Ravin Kumar", "maintainer_email": "mr.ravin_kumar@hotmail.com", "name": "ravdec", "package_url": "https://pypi.org/project/ravdec/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ravdec/", "project_urls": {"Download": "http://github.com/mr-ravin/ravdec", "Homepage": "http://github.com/mr-ravin/ravdec"}, "release_url": "https://pypi.org/project/ravdec/1.0/", "requires_dist": null, "requires_python": null, "summary": "Lossless Data Compression", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            #####################################################################\n<br>                      Ravdec- LossLess Data Compression\n<br>Algorithm Designer, and Module Developer: Mr. Ravin Kumar\n<br>Email    : mr.ravin_kumar@hotmail.com\n<br>linkedin : https://in.linkedin.com/in/ravinkumar21\n<br>#####################################################################\n<br>Ravdec is based on a Lossless Data Compression Algorithm  which is designed and developed by Mr.Ravin Kumar on 19 September, 2016.This compression algorithm have a fixed compression ratio of 1.1429 in all possible cases, It accepts data of following format: alphabets,numbers, and symbols.\n<br>Example: It can compress 1 GB to 896 MB.\n<br>\n<br>=======Application of Ravdec =========\n<br>\n<br>It can be  used where the machine generates data at a very fast rate, that it became difficult for other algorithms to calculate the propability of a symbol, as data keeps on getting large, and is transmitted over the network with a much faster rate. In this case also, \n<br>the above module, and algorithm gives the same compression ratio.\n<br>\n<br>=======Application of Ravdec =========\n<br>\n<br>NOTE- The data that is to be compressed should have length of multiple of 8.(i.e 8 elements, or 16 elemnts or 24...so on)\n<br>\n<br>1) file_compression(filename) : \n<br>It is used to read data from a file, and create a compressed file wit extention of \".rav\" \n<br>\n<br>2) file_decompression(filename)\n<br>It is used to read data from a previously compressed file, and create a decompressed file wit extention of \".dec\" \n<br>\n<br>\n<br> Example:\n<br> ------------------------------\n<br> import ravdec \n<br>\n<br> # to compress the file have elements of multiple of 8.\n<br> ravdec.file_compression(\"filename.txt\")\n<br>\n<br> # to decompress the previously compressed file.\n<br> ravdec.file_decompression(\"filename.rav\")\n<br>\n<br> ------------------------------\n<br>\n<br>\n<br>3) net_compression(\"data to be compressed of length of multiple of 8 \") - To compress the  original data to transmit, that is needed to be   \n<br> transmitted.\n<br>\n<br>4) net_decompression(\" previously compressed data\")  - To decompress the previously compressed data, that is received.\n<br>\n<br>It is used where the machine generates data at a very fast rate, that it became difficult for other algorithms to calculate the propability of\n<br>a symbol, as data keeps on getting large, and is transmitted over the network with a much faster rate.\n<br>\n<br>Example:\n<br>------------------------------\n<br>import ravdec\n<br>\n<br># for compression\n<br>compressed_data=ravdec.net_compression(\"ASDFGHJK\")\n<br>\n<br># note- data to be compressed should have length of multiple of 8.(i.e 8 elements, or 16 elements or 24...so on)\n<br># for decompression\n<br>\n<br>decompressed_data=ravdec.decompression(\"previously compressed data\")\n<br>\n<br>------------------------------\n<br>\n<br>This module is a free ware, build with the intention to help communities in data compression aspects.\n<br>\n<br>Application of this module:\n<br>*It can be  used where the machine generates data at a very fast rate, that it became difficult for other algorithms to calculate the\n<br> probability of a symbol, as data keeps on getting large, and is transmitted over the network with a much faster rate. In this case also, the\n<br> above module, and algorithm gives the same compression ratio.\n          </div>"}, "last_serial": 2640286, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "0bb0f00a3ef7656ae0cb8936e0c3fc77", "sha256": "525dbc9b83dcb52098897dd11015ba3ca0ce27c1331e1b6cc4c8be793be219f1"}, "downloads": -1, "filename": "ravdec-1.0.tar.gz", "has_sig": false, "md5_digest": "0bb0f00a3ef7656ae0cb8936e0c3fc77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2234, "upload_time": "2016-09-19T19:21:33", "upload_time_iso_8601": "2016-09-19T19:21:33.153723Z", "url": "https://files.pythonhosted.org/packages/93/68/a74e743ceafdaf25b2f1e619839cdb1f34a7d0d18b84340b5b2665aa9db9/ravdec-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0bb0f00a3ef7656ae0cb8936e0c3fc77", "sha256": "525dbc9b83dcb52098897dd11015ba3ca0ce27c1331e1b6cc4c8be793be219f1"}, "downloads": -1, "filename": "ravdec-1.0.tar.gz", "has_sig": false, "md5_digest": "0bb0f00a3ef7656ae0cb8936e0c3fc77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2234, "upload_time": "2016-09-19T19:21:33", "upload_time_iso_8601": "2016-09-19T19:21:33.153723Z", "url": "https://files.pythonhosted.org/packages/93/68/a74e743ceafdaf25b2f1e619839cdb1f34a7d0d18b84340b5b2665aa9db9/ravdec-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:03 2020"}