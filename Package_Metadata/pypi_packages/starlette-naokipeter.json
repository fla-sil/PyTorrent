{"info": {"author": "Tom Christie", "author_email": "tom@tomchristie.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "<p align=\"center\">\n  <a href=\"https://www.starlette.io/\"><img width=\"320\" height=\"192\" src=\"https://raw.githubusercontent.com/encode/starlette/master/docs/starlette.png\" alt='starlette'></a>\n</p>\n<p align=\"center\">\n    <em>\u2728 The little ASGI framework that shines. \u2728</em>\n</p>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/encode/starlette\">\n    <img src=\"https://travis-ci.org/encode/starlette.svg?branch=master\" alt=\"Build Status\">\n</a>\n<a href=\"https://codecov.io/gh/encode/starlette\">\n    <img src=\"https://codecov.io/gh/encode/starlette/branch/master/graph/badge.svg\" alt=\"Coverage\">\n</a>\n<a href=\"https://pypi.org/project/starlette/\">\n    <img src=\"https://badge.fury.io/py/starlette.svg\" alt=\"Package version\">\n</a>\n</p>\n\n---\n\n**Documentation**: [https://www.starlette.io/](https://www.starlette.io/)\n\n---\n\n# Starlette\n\nStarlette is a lightweight [ASGI](https://asgi.readthedocs.io/en/latest/) framework/toolkit,\nwhich is ideal for building high performance asyncio services.\n\nIt is production-ready, and gives you the following:\n\n* Seriously impressive performance.\n* WebSocket support.\n* GraphQL support.\n* In-process background tasks.\n* Startup and shutdown events.\n* Test client built on `requests`.\n* CORS, GZip, Static Files, Streaming responses.\n* Session and Cookie support.\n* 100% test coverage.\n* 100% type annotated codebase.\n* Zero hard dependencies.\n\n## Requirements\n\nPython 3.6+\n\n## Installation\n\n```shell\n$ pip3 install starlette\n```\n\nYou'll also want to install an ASGI server, such as [uvicorn](http://www.uvicorn.org/), [daphne](https://github.com/django/daphne/), or [hypercorn](https://pgjones.gitlab.io/hypercorn/).\n\n```shell\n$ pip3 install uvicorn\n```\n\n## Example\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nimport uvicorn\n\napp = Starlette(debug=True)\n\n\n@app.route('/')\nasync def homepage(request):\n    return JSONResponse({'hello': 'world'})\n\nif __name__ == '__main__':\n    uvicorn.run(app, host='0.0.0.0', port=8000)\n```\n\nFor a more complete example, see [encode/starlette-example](https://github.com/encode/starlette-example).\n\n## Dependencies\n\nStarlette does not have any hard dependencies, but the following are optional:\n\n* [`requests`][requests] - Required if you want to use the `TestClient`.\n* [`aiofiles`][aiofiles] - Required if you want to use `FileResponse` or `StaticFiles`.\n* [`jinja2`][jinja2] - Required if you want to use `Jinja2Templates`.\n* [`python-multipart`][python-multipart] - Required if you want to support form parsing, with `request.form()`.\n* [`itsdangerous`][itsdangerous] - Required for `SessionMiddleware` support.\n* [`pyyaml`][pyyaml] - Required for `SchemaGenerator` support.\n* [`graphene`][graphene] - Required for `GraphQLApp` support.\n* [`ujson`][ujson] - Required if you want to use `UJSONResponse`.\n\nYou can install all of these with `pip3 install starlette[full]`.\n\n## Framework or Toolkit\n\nStarlette is designed to be used either as a complete framework, or as\nan ASGI toolkit. You can use any of its components independently.\n\n```python\nfrom starlette.responses import PlainTextResponse\n\n\nclass App:\n    def __init__(self, scope):\n        assert scope['type'] == 'http'\n        self.scope = scope\n\n    async def __call__(self, receive, send):\n        response = PlainTextResponse('Hello, world!')\n        await response(receive, send)\n```\n\nRun the `App` application in `example.py`:\n\n```shell\n$ uvicorn example:App\nINFO: Started server process [11509]\nINFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\nRun uvicorn with `--reload` to enable auto-reloading on code changes.\n\n## Modularity\n\nThe modularity that Starlette is designed on promotes building re-usable\ncomponents that can be shared between any ASGI framework. This should enable\nan ecosystem of shared middleware and mountable applications.\n\nThe clean API separation also means it's easier to understand each component\nin isolation.\n\n## Performance\n\nIndependent TechEmpower benchmarks show Starlette applications running under Uvicorn\nas [one of the fastest Python frameworks available](https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=fortune&l=zijzen-1). *(\\*)*\n\nFor high throughput loads you should:\n\n* Make sure to install `ujson` and use `UJSONResponse`.\n* Run using gunicorn using the `uvicorn` worker class.\n* Use one or two workers per-CPU core. (You might need to experiment with this.)\n* Disable access logging.\n\nEg.\n\n```shell\ngunicorn -w 4 -k uvicorn.workers.UvicornWorker --log-level warning example:app\n```\n\nSeveral of the ASGI servers also have pure Python implementations available,\nso you can also run under `PyPy` if your application code has parts that are\nCPU constrained.\n\nEither programatically:\n\n```python\nuvicorn.run(..., http='h11', loop='asyncio')\n```\n\nOr using Gunicorn:\n\n```shell\ngunicorn -k uvicorn.workers.UvicornH11Worker ...\n```\n\n<p align=\"center\">&mdash; \u2b50\ufe0f &mdash;</p>\n<p align=\"center\"><i>Starlette is <a href=\"https://github.com/encode/starlette/blob/master/LICENSE.md\">BSD licensed</a> code. Designed & built in Brighton, England.</i></p>\n\n[requests]: http://docs.python-requests.org/en/master/\n[aiofiles]: https://github.com/Tinche/aiofiles\n[jinja2]: http://jinja.pocoo.org/\n[python-multipart]: https://andrew-d.github.io/python-multipart/\n[graphene]: https://graphene-python.org/\n[itsdangerous]: https://pythonhosted.org/itsdangerous/\n[sqlalchemy]: https://www.sqlalchemy.org\n[pyyaml]: https://pyyaml.org/wiki/PyYAMLDocumentation\n[ujson]: https://github.com/esnme/ultrajson\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/naokipeter/starlette", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "starlette-naokipeter", "package_url": "https://pypi.org/project/starlette-naokipeter/", "platform": "", "project_url": "https://pypi.org/project/starlette-naokipeter/", "project_urls": {"Homepage": "https://github.com/naokipeter/starlette"}, "release_url": "https://pypi.org/project/starlette-naokipeter/0.12.0b3/", "requires_dist": ["aiofiles ; extra == 'full'", "asyncpg ; extra == 'full'", "graphene ; extra == 'full'", "itsdangerous ; extra == 'full'", "jinja2 ; extra == 'full'", "python-multipart ; extra == 'full'", "pyyaml ; extra == 'full'", "requests ; extra == 'full'", "ujson ; extra == 'full'"], "requires_python": ">=3.6", "summary": "The little ASGI library that shines.", "version": "0.12.0b3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <a href=\"https://www.starlette.io/\" rel=\"nofollow\"><img alt=\"starlette\" height=\"192\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a518491eeedf673b84b794c678853bf9c9393bc/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f656e636f64652f737461726c657474652f6d61737465722f646f63732f737461726c657474652e706e67\" width=\"320\"></a>\n</p>\n<p align=\"center\">\n    <em>\u2728 The little ASGI framework that shines. \u2728</em>\n</p>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/encode/starlette\" rel=\"nofollow\">\n    <img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92556c55ac68ae5aaa59b889ba9bf32fd3a54602/68747470733a2f2f7472617669732d63692e6f72672f656e636f64652f737461726c657474652e7376673f6272616e63683d6d6173746572\">\n</a>\n<a href=\"https://codecov.io/gh/encode/starlette\" rel=\"nofollow\">\n    <img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91ebda485bc9a1efa9f17d83734f7faca42ee983/68747470733a2f2f636f6465636f762e696f2f67682f656e636f64652f737461726c657474652f6272616e63682f6d61737465722f67726170682f62616467652e737667\">\n</a>\n<a href=\"https://pypi.org/project/starlette/\" rel=\"nofollow\">\n    <img alt=\"Package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6506f4c9efa0a119d1c8f4eaf71c112daa2865c/68747470733a2f2f62616467652e667572792e696f2f70792f737461726c657474652e737667\">\n</a>\n</p>\n<hr>\n<p><strong>Documentation</strong>: <a href=\"https://www.starlette.io/\" rel=\"nofollow\">https://www.starlette.io/</a></p>\n<hr>\n<h1>Starlette</h1>\n<p>Starlette is a lightweight <a href=\"https://asgi.readthedocs.io/en/latest/\" rel=\"nofollow\">ASGI</a> framework/toolkit,\nwhich is ideal for building high performance asyncio services.</p>\n<p>It is production-ready, and gives you the following:</p>\n<ul>\n<li>Seriously impressive performance.</li>\n<li>WebSocket support.</li>\n<li>GraphQL support.</li>\n<li>In-process background tasks.</li>\n<li>Startup and shutdown events.</li>\n<li>Test client built on <code>requests</code>.</li>\n<li>CORS, GZip, Static Files, Streaming responses.</li>\n<li>Session and Cookie support.</li>\n<li>100% test coverage.</li>\n<li>100% type annotated codebase.</li>\n<li>Zero hard dependencies.</li>\n</ul>\n<h2>Requirements</h2>\n<p>Python 3.6+</p>\n<h2>Installation</h2>\n<pre>$ pip3 install starlette\n</pre>\n<p>You'll also want to install an ASGI server, such as <a href=\"http://www.uvicorn.org/\" rel=\"nofollow\">uvicorn</a>, <a href=\"https://github.com/django/daphne/\" rel=\"nofollow\">daphne</a>, or <a href=\"https://pgjones.gitlab.io/hypercorn/\" rel=\"nofollow\">hypercorn</a>.</p>\n<pre>$ pip3 install uvicorn\n</pre>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uvicorn</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">homepage</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">})</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">uvicorn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'0.0.0.0'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n</pre>\n<p>For a more complete example, see <a href=\"https://github.com/encode/starlette-example\" rel=\"nofollow\">encode/starlette-example</a>.</p>\n<h2>Dependencies</h2>\n<p>Starlette does not have any hard dependencies, but the following are optional:</p>\n<ul>\n<li><a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\"><code>requests</code></a> - Required if you want to use the <code>TestClient</code>.</li>\n<li><a href=\"https://github.com/Tinche/aiofiles\" rel=\"nofollow\"><code>aiofiles</code></a> - Required if you want to use <code>FileResponse</code> or <code>StaticFiles</code>.</li>\n<li><a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\"><code>jinja2</code></a> - Required if you want to use <code>Jinja2Templates</code>.</li>\n<li><a href=\"https://andrew-d.github.io/python-multipart/\" rel=\"nofollow\"><code>python-multipart</code></a> - Required if you want to support form parsing, with <code>request.form()</code>.</li>\n<li><a href=\"https://pythonhosted.org/itsdangerous/\" rel=\"nofollow\"><code>itsdangerous</code></a> - Required for <code>SessionMiddleware</code> support.</li>\n<li><a href=\"https://pyyaml.org/wiki/PyYAMLDocumentation\" rel=\"nofollow\"><code>pyyaml</code></a> - Required for <code>SchemaGenerator</code> support.</li>\n<li><a href=\"https://graphene-python.org/\" rel=\"nofollow\"><code>graphene</code></a> - Required for <code>GraphQLApp</code> support.</li>\n<li><a href=\"https://github.com/esnme/ultrajson\" rel=\"nofollow\"><code>ujson</code></a> - Required if you want to use <code>UJSONResponse</code>.</li>\n</ul>\n<p>You can install all of these with <code>pip3 install starlette[full]</code>.</p>\n<h2>Framework or Toolkit</h2>\n<p>Starlette is designed to be used either as a complete framework, or as\nan ASGI toolkit. You can use any of its components independently.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">PlainTextResponse</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'http'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span> <span class=\"o\">=</span> <span class=\"n\">scope</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">receive</span><span class=\"p\">,</span> <span class=\"n\">send</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">(</span><span class=\"s1\">'Hello, world!'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">(</span><span class=\"n\">receive</span><span class=\"p\">,</span> <span class=\"n\">send</span><span class=\"p\">)</span>\n</pre>\n<p>Run the <code>App</code> application in <code>example.py</code>:</p>\n<pre>$ uvicorn example:App\nINFO: Started server process <span class=\"o\">[</span><span class=\"m\">11509</span><span class=\"o\">]</span>\nINFO: Uvicorn running on http://127.0.0.1:8000 <span class=\"o\">(</span>Press CTRL+C to quit<span class=\"o\">)</span>\n</pre>\n<p>Run uvicorn with <code>--reload</code> to enable auto-reloading on code changes.</p>\n<h2>Modularity</h2>\n<p>The modularity that Starlette is designed on promotes building re-usable\ncomponents that can be shared between any ASGI framework. This should enable\nan ecosystem of shared middleware and mountable applications.</p>\n<p>The clean API separation also means it's easier to understand each component\nin isolation.</p>\n<h2>Performance</h2>\n<p>Independent TechEmpower benchmarks show Starlette applications running under Uvicorn\nas <a href=\"https://www.techempower.com/benchmarks/#section=data-r17&amp;hw=ph&amp;test=fortune&amp;l=zijzen-1\" rel=\"nofollow\">one of the fastest Python frameworks available</a>. <em>(*)</em></p>\n<p>For high throughput loads you should:</p>\n<ul>\n<li>Make sure to install <code>ujson</code> and use <code>UJSONResponse</code>.</li>\n<li>Run using gunicorn using the <code>uvicorn</code> worker class.</li>\n<li>Use one or two workers per-CPU core. (You might need to experiment with this.)</li>\n<li>Disable access logging.</li>\n</ul>\n<p>Eg.</p>\n<pre>gunicorn -w <span class=\"m\">4</span> -k uvicorn.workers.UvicornWorker --log-level warning example:app\n</pre>\n<p>Several of the ASGI servers also have pure Python implementations available,\nso you can also run under <code>PyPy</code> if your application code has parts that are\nCPU constrained.</p>\n<p>Either programatically:</p>\n<pre><span class=\"n\">uvicorn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"o\">=</span><span class=\"s1\">'h11'</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"s1\">'asyncio'</span><span class=\"p\">)</span>\n</pre>\n<p>Or using Gunicorn:</p>\n<pre>gunicorn -k uvicorn.workers.UvicornH11Worker ...\n</pre>\n<p align=\"center\">\u2014 \u2b50\ufe0f \u2014</p>\n<p align=\"center\"><i>Starlette is <a href=\"https://github.com/encode/starlette/blob/master/LICENSE.md\" rel=\"nofollow\">BSD licensed</a> code. Designed &amp; built in Brighton, England.</i></p>\n\n          </div>"}, "last_serial": 5293149, "releases": {"0.12.0b3": [{"comment_text": "", "digests": {"md5": "9e69b4f71fb4740308933f289f7fa9ec", "sha256": "f48e392c65a50d8b245a09ba504e3766aeac8801ce9714f7ddfbb0ef41585db7"}, "downloads": -1, "filename": "starlette_naokipeter-0.12.0b3-py3-none-any.whl", "has_sig": false, "md5_digest": "9e69b4f71fb4740308933f289f7fa9ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 55880, "upload_time": "2019-05-20T16:05:40", "upload_time_iso_8601": "2019-05-20T16:05:40.843383Z", "url": "https://files.pythonhosted.org/packages/c9/8b/0dbd84b25a6b371725a353503d8a95ec8c145a79e367d1f354c8b6633365/starlette_naokipeter-0.12.0b3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e69b4f71fb4740308933f289f7fa9ec", "sha256": "f48e392c65a50d8b245a09ba504e3766aeac8801ce9714f7ddfbb0ef41585db7"}, "downloads": -1, "filename": "starlette_naokipeter-0.12.0b3-py3-none-any.whl", "has_sig": false, "md5_digest": "9e69b4f71fb4740308933f289f7fa9ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 55880, "upload_time": "2019-05-20T16:05:40", "upload_time_iso_8601": "2019-05-20T16:05:40.843383Z", "url": "https://files.pythonhosted.org/packages/c9/8b/0dbd84b25a6b371725a353503d8a95ec8c145a79e367d1f354c8b6633365/starlette_naokipeter-0.12.0b3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:02:36 2020"}