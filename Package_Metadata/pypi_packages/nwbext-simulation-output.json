{"info": {"author": "Ben Dichter", "author_email": "ben.dichter@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# nwbext_simulation_output: An extension for output data of large-scale simulations\n Developed in collaboration between the Soltesz lab and the Allen Institute during [NWB Hackathon #4](https://github.com/NeurodataWithoutBorders/nwb_hackathons/tree/master/HCK04_2018_Seattle/Projects/NetworkOutput) by Ben Dichter*, Kael Dai*, Aaron Milstein, Yazan Billeh, Andrew Tritt, Jean-Christophe Fillion-Robin, Anton Akhipov, Oliver Ruebel, Nicholas Cain, Kristofer Bouchard, and Ivan Soltesz\n\nThis extension defines a single NWB data type, `CompartmentSeries`, that allows you to store continuous data (e.g. membrane potential) from many compartments of many cells in a scalable way. \n\n![Image of CompartmentSeries](docs/source/_static/multicompartment_schema_1.png)\n\nThis structure stores an arbitrarily large number of cells and cellular compartments with 5 datasets. It can scale to a million or more neurons, and enables efficient parallel read and write. It is designed to handle NEURON output data and to easily interface with the SONATA format.\n\n## Guide\n### python\n#### installation\n```\npip install git+https://github.com/bendichter/simulation_output.git\n```\n\n#### usage\n```python\nfrom pynwb import NWBHDF5IO, NWBFile\nfrom datetime import datetime\nfrom nwbext_simulation_output import CompartmentSeries, Compartments\nimport numpy as np\n\n\ncompartments = Compartments()\ncompartments.add_row(number=[0, 1, 2, 3, 4], position=[0.1, 0.2, 0.3, 0.4, 0.5])\ncompartments.add_row(number=[0], position=[np.nan])\ncs = CompartmentSeries('membrane_potential', np.random.randn(10, 6),\n                       compartments=compartments,\n                       unit='V', rate=100.)\nnwbfile = NWBFile('description', 'id', datetime.now().astimezone())\nnwbfile.add_acquisition(compartments)\nnwbfile.add_acquisition(cs)\n\nwith NWBHDF5IO('test_compartment_series.nwb', 'w') as io:\n    io.write(nwbfile)\n```\n\n### MATLAB\n#### installation\n\ncommand line:\n```\ngit clone https://github.com/bendichter/nwbext_simulation_output.git\n```\n\nin matlab:\n```matlab\ngenerateExtension('/path/to/nwbext_simulation_output/nwbext_simulation_output/nwbext_simulation_output.namespace.yaml');\n```\n\n#### usage\n```matlab\n[number, number_index] = util.create_indexed_column( ...\n    {[0, 1, 2, 3, 4], 0}, '/acquisition/compartments/number');\n\n[position, position_index] = util.create_indexed_column( ...\n    {[0.1, 0.2, 0.3, 0.4, 0.5], 0}, '/acquisition/compartments/position');\n\ncompartments = types.simulation_output.Compartments( ...\n    'colnames', {'number', 'position'}, ...\n    'description', 'membrane potential from various compartments', ...\n    'id', types.core.ElementIdentifiers('data', int64(0:5)));\n\ncompartments.position = position;\ncompartments.position_index = position_index;\ncompartments.number = number;\ncompartments.number_index = number_index;\n\nmembrane_potential = types.simulation_output.CompartmentSeries( ...\n    'data', randn(10,6), ...\n    'compartments', types.untyped.SoftLink('/acquisition/compartments'), ...\n    'data_unit', 'V', ...\n    'starting_time_rate', 100., ...\n    'starting_time', 0.0);\n\nnwb.acquisition.set('compartments', compartments);\nnwb.acquisition.set('membrane_potential', membrane_potential);\n```\n\n## Talks\nBen Dichter*, Kael Dai*, Aaron Milstein, Yazan Billeh, Andrew Tritt, Jean-Christophe Fillion-Robin, Anton Akhipov, Oliver Ruebel, Nicholas Cain, Kristofer Bouchard, Ivan Soltesz. NWB extension for storing results of large-scale neural network simulations. NeuroInformatics. Montreal, Canada (2018). [video](https://www.youtube.com/watch?v=uuYQW0EE2GY).\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "nwb,extension", "license": "", "maintainer": "", "maintainer_email": "", "name": "nwbext-simulation-output", "package_url": "https://pypi.org/project/nwbext-simulation-output/", "platform": "", "project_url": "https://pypi.org/project/nwbext-simulation-output/", "project_urls": null, "release_url": "https://pypi.org/project/nwbext-simulation-output/0.1/", "requires_dist": ["pynwb", "hdmf", "numpy"], "requires_python": "", "summary": "Extension for storing large-scale simulation output in the Neurodata Without Borders: Neurophysiology format", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # nwbext_simulation_output: An extension for output data of large-scale simulations<br> Developed in collaboration between the Soltesz lab and the Allen Institute during [NWB Hackathon #4](https://github.com/NeurodataWithoutBorders/nwb_hackathons/tree/master/HCK04_2018_Seattle/Projects/NetworkOutput) by Ben Dichter*, Kael Dai*, Aaron Milstein, Yazan Billeh, Andrew Tritt, Jean-Christophe Fillion-Robin, Anton Akhipov, Oliver Ruebel, Nicholas Cain, Kristofer Bouchard, and Ivan Soltesz<br><br>This extension defines a single NWB data type, `CompartmentSeries`, that allows you to store continuous data (e.g. membrane potential) from many compartments of many cells in a scalable way. <br><br>![Image of CompartmentSeries](docs/source/_static/multicompartment_schema_1.png)<br><br>This structure stores an arbitrarily large number of cells and cellular compartments with 5 datasets. It can scale to a million or more neurons, and enables efficient parallel read and write. It is designed to handle NEURON output data and to easily interface with the SONATA format.<br><br>## Guide<br>### python<br>#### installation<br>```<br>pip install git+https://github.com/bendichter/simulation_output.git<br>```<br><br>#### usage<br>```python<br>from pynwb import NWBHDF5IO, NWBFile<br>from datetime import datetime<br>from nwbext_simulation_output import CompartmentSeries, Compartments<br>import numpy as np<br><br><br>compartments = Compartments()<br>compartments.add_row(number=[0, 1, 2, 3, 4], position=[0.1, 0.2, 0.3, 0.4, 0.5])<br>compartments.add_row(number=[0], position=[np.nan])<br>cs = CompartmentSeries('membrane_potential', np.random.randn(10, 6),<br>                       compartments=compartments,<br>                       unit='V', rate=100.)<br>nwbfile = NWBFile('description', 'id', datetime.now().astimezone())<br>nwbfile.add_acquisition(compartments)<br>nwbfile.add_acquisition(cs)<br><br>with NWBHDF5IO('test_compartment_series.nwb', 'w') as io:<br>    io.write(nwbfile)<br>```<br><br>### MATLAB<br>#### installation<br><br>command line:<br>```<br>git clone https://github.com/bendichter/nwbext_simulation_output.git<br>```<br><br>in matlab:<br>```matlab<br>generateExtension('/path/to/nwbext_simulation_output/nwbext_simulation_output/nwbext_simulation_output.namespace.yaml');<br>```<br><br>#### usage<br>```matlab<br>[number, number_index] = util.create_indexed_column( ...<br>    {[0, 1, 2, 3, 4], 0}, '/acquisition/compartments/number');<br><br>[position, position_index] = util.create_indexed_column( ...<br>    {[0.1, 0.2, 0.3, 0.4, 0.5], 0}, '/acquisition/compartments/position');<br><br>compartments = types.simulation_output.Compartments( ...<br>    'colnames', {'number', 'position'}, ...<br>    'description', 'membrane potential from various compartments', ...<br>    'id', types.core.ElementIdentifiers('data', int64(0:5)));<br><br>compartments.position = position;<br>compartments.position_index = position_index;<br>compartments.number = number;<br>compartments.number_index = number_index;<br><br>membrane_potential = types.simulation_output.CompartmentSeries( ...<br>    'data', randn(10,6), ...<br>    'compartments', types.untyped.SoftLink('/acquisition/compartments'), ...<br>    'data_unit', 'V', ...<br>    'starting_time_rate', 100., ...<br>    'starting_time', 0.0);<br><br>nwb.acquisition.set('compartments', compartments);<br>nwb.acquisition.set('membrane_potential', membrane_potential);<br>```<br><br>## Talks<br>Ben Dichter*, Kael Dai*, Aaron Milstein, Yazan Billeh, Andrew Tritt, Jean-Christophe Fillion-Robin, Anton Akhipov, Oliver Ruebel, Nicholas Cain, Kristofer Bouchard, Ivan Soltesz. NWB extension for storing results of large-scale neural network simulations. NeuroInformatics. Montreal, Canada (2018). [video](https://www.youtube.com/watch?v=uuYQW0EE2GY).<br><br><br>\n          </div>"}, "last_serial": 5182975, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "88c5b7ab67399047a510106b2f661e31", "sha256": "6bb1dfa836e6ae45ae7040177b1b1a170ee2e6ba9449e512d8d81c5eadff26a3"}, "downloads": -1, "filename": "nwbext_simulation_output-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "88c5b7ab67399047a510106b2f661e31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6563, "upload_time": "2019-04-24T15:40:44", "upload_time_iso_8601": "2019-04-24T15:40:44.757255Z", "url": "https://files.pythonhosted.org/packages/f1/73/5c50223e1e02f54cc74a13effe5974cf4d515afedc303edf838ca42416a9/nwbext_simulation_output-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "946c15ae1b4673142588ab4e0a03456f", "sha256": "04e27b1f4b96d123a19a38667cd82da78ee57ec379c6bee61dc11f2bb61ff466"}, "downloads": -1, "filename": "nwbext_simulation_output-0.1.tar.gz", "has_sig": false, "md5_digest": "946c15ae1b4673142588ab4e0a03456f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5426, "upload_time": "2019-04-24T15:40:46", "upload_time_iso_8601": "2019-04-24T15:40:46.903623Z", "url": "https://files.pythonhosted.org/packages/cc/1a/b465d98ce7f21bb4d825aa49a5a04854a973bca3ed5506162b383f841891/nwbext_simulation_output-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "88c5b7ab67399047a510106b2f661e31", "sha256": "6bb1dfa836e6ae45ae7040177b1b1a170ee2e6ba9449e512d8d81c5eadff26a3"}, "downloads": -1, "filename": "nwbext_simulation_output-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "88c5b7ab67399047a510106b2f661e31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6563, "upload_time": "2019-04-24T15:40:44", "upload_time_iso_8601": "2019-04-24T15:40:44.757255Z", "url": "https://files.pythonhosted.org/packages/f1/73/5c50223e1e02f54cc74a13effe5974cf4d515afedc303edf838ca42416a9/nwbext_simulation_output-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "946c15ae1b4673142588ab4e0a03456f", "sha256": "04e27b1f4b96d123a19a38667cd82da78ee57ec379c6bee61dc11f2bb61ff466"}, "downloads": -1, "filename": "nwbext_simulation_output-0.1.tar.gz", "has_sig": false, "md5_digest": "946c15ae1b4673142588ab4e0a03456f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5426, "upload_time": "2019-04-24T15:40:46", "upload_time_iso_8601": "2019-04-24T15:40:46.903623Z", "url": "https://files.pythonhosted.org/packages/cc/1a/b465d98ce7f21bb4d825aa49a5a04854a973bca3ed5506162b383f841891/nwbext_simulation_output-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:03 2020"}