{"info": {"author": "Ernst Odolphi", "author_email": "ernst.odolphi@gmail.com", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://drone.io/bitbucket.org/eodolphi/json-hyper-schema/status.png\n   :target: https://drone.io/bitbucket.org/eodolphi/json-hyper-schema/latest\n\n\nJSON Hyper Schema\n=============\n\nImplementation of json schema draft 03\n\nhttp://tools.ietf.org/html/draft-zyp-json-schema-03\n\nInstallation\n------------\n\n $ pip install json_hyper_schema\n\nUsage\n------------\n\nJSON Hyper Schema makes it possible to validate arbitrary json objects against a json schema.\n\n>>> form json_hyper_schema import Schema\n\n>>> schema = Schema(\n    {\n        'properties': {\n            'a': {'type': 'string', 'enum': ['a', 'b']},\n            'b': {\n                'type': 'array',\n                'items': {\n                    'properties': {\n                        'b': {'type': 'string', 'enum': ['c', 'd']},\n                        'c': {'uuid': True}\n                        }\n                    }\n                },\n            'c': {'default': 'blabla'}\n            },\n        'links': [\n            {\n                'href': '/id/{a}',\n                'rel': 'self'\n            }]\n        })\n\n>>> schema.validate({'a': 'b', 'b': [{'b': 'c'}, {'b': 'd'}]})\n\nIf the data is not valid against the schema a `json_schema.ValidationError` will be raised. This will contain a dictionary of errors. The keys of the dictionary are `json_pointer.Pointer` pointers to the invalid field", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "json_hyper_schema", "package_url": "https://pypi.org/project/json_hyper_schema/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/json_hyper_schema/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/json_hyper_schema/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. image:: https://drone.io/bitbucket.org/eodolphi/json-hyper-schema/status.png<br>   :target: https://drone.io/bitbucket.org/eodolphi/json-hyper-schema/latest<br><br><br>JSON Hyper Schema<br>=============<br><br>Implementation of json schema draft 03<br><br>http://tools.ietf.org/html/draft-zyp-json-schema-03<br><br>Installation<br>------------<br><br> $ pip install json_hyper_schema<br><br>Usage<br>------------<br><br>JSON Hyper Schema makes it possible to validate arbitrary json objects against a json schema.<br><br>&gt;&gt;&gt; form json_hyper_schema import Schema<br><br>&gt;&gt;&gt; schema = Schema(<br>    {<br>        'properties': {<br>            'a': {'type': 'string', 'enum': ['a', 'b']},<br>            'b': {<br>                'type': 'array',<br>                'items': {<br>                    'properties': {<br>                        'b': {'type': 'string', 'enum': ['c', 'd']},<br>                        'c': {'uuid': True}<br>                        }<br>                    }<br>                },<br>            'c': {'default': 'blabla'}<br>            },<br>        'links': [<br>            {<br>                'href': '/id/{a}',<br>                'rel': 'self'<br>            }]<br>        })<br><br>&gt;&gt;&gt; schema.validate({'a': 'b', 'b': [{'b': 'c'}, {'b': 'd'}]})<br><br>If the data is not valid against the schema a `json_schema.ValidationError` will be raised. This will contain a dictionary of errors. The keys of the dictionary are `json_pointer.Pointer` pointers to the invalid field\n          </div>"}, "last_serial": 944966, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "61d9e4974fc9a6765f5c450732c52f3d", "sha256": "7241aa8ad05a9ef05a63377fe682e508e66882cebdcf7f14ca6cd99df3a9965a"}, "downloads": -1, "filename": "json_hyper_schema-0.3.tar.gz", "has_sig": false, "md5_digest": "61d9e4974fc9a6765f5c450732c52f3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8610, "upload_time": "2013-10-22T19:41:30", "upload_time_iso_8601": "2013-10-22T19:41:30.155048Z", "url": "https://files.pythonhosted.org/packages/70/33/ff6500317514f54f84ddede893fbd5c0ab481c8297a83495f5e1de721dac/json_hyper_schema-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "07f1c9a4b999d246d430cb04d5df1e1a", "sha256": "b99e869ac9be299255491944fb0d391aee99f1e20fa31907772fda598b7c90ef"}, "downloads": -1, "filename": "json_hyper_schema-0.4.tar.gz", "has_sig": false, "md5_digest": "07f1c9a4b999d246d430cb04d5df1e1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8709, "upload_time": "2013-10-25T22:26:59", "upload_time_iso_8601": "2013-10-25T22:26:59.049924Z", "url": "https://files.pythonhosted.org/packages/e9/9c/998c42ea4946c694be82d67b990604b877c7cb00fdddf6b6c051cbf79186/json_hyper_schema-0.4.tar.gz", "yanked": false}], "0.4.1": []}, "urls": [], "timestamp": "Fri May  8 00:51:47 2020"}