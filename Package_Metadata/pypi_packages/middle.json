{"info": {"author": "Richard Kuesters", "author_email": "rkuesters@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Utilities"], "description": "==========\n``middle``\n==========\n\n\n\nFlexible, extensible Python data structures for general usage. Get data in and out, reliably, without boilerplate and with speed!\n\n``middle`` stands on the shoulders of ``attrs`` and aims to be as simple as possible to get data from complex objects to Python primitives and vice-versa, with validators, converters, a lot of sugar and other utilities! ``middle`` can be used with your preferred web framework, background job application, configuration parser and more!\n\nSneak peek\n----------\n\nThe most simple example of ``middle`` and some of its features (using Python 3.6+ syntax):\n\n.. code-block:: pycon\n\n    >>> import typing\n    >>> import middle\n\n    >>> class Address(middle.Model):\n    ...     street_name: str\n    ...     number: typing.Optional[int]\n    ...     city: str\n\n    >>> class Person(middle.Model):\n    ...     name: str\n    ...     age: int\n    ...     address: typing.Dict[str, Address]\n\n    >>> data = {\n    ...     \"name\": \"John Doe\",\n    ...     \"age\": 42,\n    ...     \"address\": {\n    ...         \"home\": {\n    ...             \"street_name\": \"Foo St\",\n    ...             \"number\": None,\n    ...             \"city\": \"Python Park\"\n    ...         },\n    ...         \"work\": {\n    ...             \"street_name\": \"Bar Blvd\",\n    ...             \"number\": \"1337\",\n    ...             \"city\": \"Park City\"\n    ...         }\n    ...     }\n    ... }\n\n    >>> person = Person(data)\n\n    >>> person\n    Person(name='John Doe', age=42, address={'home': Address(street_name='Foo St', number=None, city='Python Park'), 'work': Address(street_name='Bar Blvd', number=1337, city='Park City')})\n\n    >>> middle.asdict(person)\n    {'name': 'John Doe', 'age': 42, 'address': {'home': {'street_name': 'Foo St', 'number': None, 'city': 'Python Park'}, 'work': {'street_name': 'Bar Blvd', 'number': 1337, 'city': 'Park City'}}}\n\nWanted a more complex example, with Python 3.5 compatible syntax? For sure!\n\n.. code-block:: pycon\n\n    >>> from typing import Dict, List\n    >>> import middle\n\n    >>> class Game(middle.Model):\n    ...     name: str = middle.field()\n    ...     score: float = middle.field(minimum=0, maximum=10)\n    ...     resolution_tested: str = middle.field(pattern=\"^\\d+x\\d+$\")\n    ...     genre: List[str] = middle.field(unique_items=True)\n    ...     rating: Dict[str, float] = middle.field(max_properties=5)\n\n    >>> data = {\n    ...     \"name\": \"Cities: Skylines\",\n    ...     \"score\": 9.0,\n    ...     \"resolution_tested\": \"1920x1200\",\n    ...     \"genre\": [\"Simulators\", \"City Building\"],\n    ...     \"rating\": {\n    ...         \"IGN\": 8.5,\n    ...         \"Gamespot\": 8.0,\n    ...         \"Steam\": 4.5\n    ...     }\n    ... }\n\n    >>> game = Game(**data)\n\n    >>> game\n    Game(name='Cities: Skylines', score=9.0, resolution_tested='1920x1200', genre=['Simulators', 'City Building'], rating={'IGN': 8.5, 'Gamespot': 8.0, 'Steam': 4.5})\n\n    >>> middle.asdict(game)\n    {'name': 'Cities: Skylines', 'score': 9.0, 'resolution_tested': '1920x1200', 'genre': ['Simulators', 'City Building'], 'rating': {'IGN': 8.5, 'Gamespot': 8.0, 'Steam': 4.5}}\n\n\n``middle`` is flexible enough to understand ``Enum``, nested models and a large variety of types declared on the ``typing`` module out of the box. Also, you can `extend it <https://middle.readthedocs.io/en/latest/extending.html>`_ to your own classes!\n\n.. warning::\n\n    **IMPORTANT**: ``middle`` is in **very early stages** of development. There are some requirements (like ``python-dateutil``) that would not be required in future releases; as there's a lot of functionalities that needs to be implemented and some known misbehaviors to be addressed, not to mention it needs a lot of testing before moving to any other status rather than **alpha**.\n\nTODO\n====\n\n- Alias options (keys) to populate classes;\n- Read-only and write-only fields;\n- Better error handling (almost everywhere);\n- Create a benchmark suite against other solutions;\n- Formatters are still missing;\n- Possibility to \"cast\" an instance to another instance where the original object is a subclass of it;\n\nDone\n----\n\n- If possible, fine grain the converters, so a ``str`` input value of ``{}`` doesn't end up as ``str({})``;\n- Get ``date`` and ``datetime`` converters to be customizable, instead of an ``if isinstance`` statement;\n- Implement more validators and a registerable for more metadata options;\n- Implement a better \"type dispatcher\" based on more complex rules (other than ``type(field.type)`` delivered by ``functools.singledispatch``) because the ``typing`` module has changed **a bit** between Python 3.6 and 3.7;\n- Support more types (``typing.Tuple``, ``decimal.Decimal``);\n- Get 100% (or closer) in code coverage;\n- Lots of documentation;\n- Python 3.5 support (with the exception of Windows platforms, see warning for Windows developers below);\n\nFuture discussions\n------------------\n\n- In Python 3.7, a neat feature was added: ``dataclasses``. I know it sounds really awesome to not depend on a 3rd-party library - such as ``attrs``, but the latest provides a lot of functionalities that can't be found on Python 3.7 ``dataclasses`` (for now), so I'll leave this open for further discussion.\n\nWarning for Windows developers\n------------------------------\n\nIf you're using Windows and Python 3.5, I think ``middle`` would not work well for you. CI in AppVeyor was disabled for Python 3.5 because of `this issue <https://github.com/python/typing/issues/523>`_. If Guido doesn't care, why should I (or you) ?\n\nDocumentation\n=============\n\nhttps://middle.readthedocs.io/en/latest/\n\nUseful links\n------------\n\n* `Source code <https://github.com/vltr/middle>`_\n* `Issues <https://github.com/vltr/middle/issues>`_\n\nInspirations and thanks\n=======================\n\nSome libs that inspired the creation of ``middle``:\n\n- `attrs <http://www.attrs.org/en/stable/>`_: how such a simple library can be such flexible, extendable and fast?\n- `cattrs <https://github.com/Tinche/cattrs>`_: for its speed on creating ``attrs`` instances from ``dict`` and to instances again;\n- `pydantic <https://pydantic-docs.helpmanual.io/>`_: for such pythonic and beautiful approach on creating classes using ``typing`` hints;\n- `mashmallow <https://marshmallow.readthedocs.io/en/latest/>`_: it is one of the most feature rich modelling APIs I've seen;\n- `apistar <https://docs.apistar.com/>`_: it's almost magical!\n- `Sanic <http://sanic.readthedocs.io/en/latest/>`_: \"*Gotta go fast!*\"\n- `ionelmc/cookiecutter-pylibrary <https://github.com/ionelmc/cookiecutter-pylibrary>`_: The most complete (or interesting) ``cookiecutter`` template I found so far (make sure to `read this article <https://blog.ionelmc.ro/2014/05/25/python-packaging/>`_ too);\n\nLicense\n=======\n\n``middle`` is a free software distributed under the `MIT <https://choosealicense.com/licenses/mit/>`_ license.\n\n\nChangelog\n=========\n\nv0.2.2 on 2018-10-28\n--------------------\n\n* Added the possibility for models to have methods, functions, properties and etc.\n\nv0.2.1 on 2018-07-26\n--------------------\n\n* Quick fix related to the change log and MANIFEST.in files\n\nv0.2.0 on 2018-07-26\n--------------------\n\n* Released (part) of the documentation\n* Got 99% coverage (finally combined)\n* Python 3.5 support added\n\nv0.1.1 on 2018-07-02\n--------------------\n\n* Add proper unit testing and support for Python 3.6 and 3.7\n* Made the API a bit more flexible\n* Code format and check done with `black <https://github.com/ambv/black>`_\n\nv0.1.0 on 2018-06-21\n--------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vltr/middle", "keywords": "attrs,object,primitives,serialization,models,hooks,customizable,utilities", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "middle", "package_url": "https://pypi.org/project/middle/", "platform": "", "project_url": "https://pypi.org/project/middle/", "project_urls": {"Homepage": "https://github.com/vltr/middle"}, "release_url": "https://pypi.org/project/middle/0.2.4/", "requires_dist": ["attrs (>=19.1.0)", "python-dateutil (>=2.8.0)"], "requires_python": "", "summary": "Flexible, extensible Python data structures for general usage", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Flexible, extensible Python data structures for general usage. Get data in and out, reliably, without boilerplate and with speed!</p>\n<p><tt>middle</tt> stands on the shoulders of <tt>attrs</tt> and aims to be as simple as possible to get data from complex objects to Python primitives and vice-versa, with validators, converters, a lot of sugar and other utilities! <tt>middle</tt> can be used with your preferred web framework, background job application, configuration parser and more!</p>\n<div id=\"sneak-peek\">\n<h2>Sneak peek</h2>\n<p>The most simple example of <tt>middle</tt> and some of its features (using Python 3.6+ syntax):</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">middle</span>\n<span class=\"go\">\n</span><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Address</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">street_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"gp\">... </span>    <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>\n<span class=\"gp\">... </span>    <span class=\"n\">city</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"go\">\n</span><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"gp\">... </span>    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"gp\">... </span>    <span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Address</span><span class=\"p\">]</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">\"home\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"street_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Foo St\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"number\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Python Park\"</span>\n<span class=\"gp\">... </span>        <span class=\"p\">},</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">\"work\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"street_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bar Blvd\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"number\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1337\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Park City\"</span>\n<span class=\"gp\">... </span>        <span class=\"p\">}</span>\n<span class=\"gp\">... </span>    <span class=\"p\">}</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">person</span>\n<span class=\"go\">Person(name='John Doe', age=42, address={'home': Address(street_name='Foo St', number=None, city='Python Park'), 'work': Address(street_name='Bar Blvd', number=1337, city='Park City')})\n\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n<span class=\"go\">{'name': 'John Doe', 'age': 42, 'address': {'home': {'street_name': 'Foo St', 'number': None, 'city': 'Python Park'}, 'work': {'street_name': 'Bar Blvd', 'number': 1337, 'city': 'Park City'}}}</span>\n</pre>\n<p>Wanted a more complex example, with Python 3.5 compatible syntax? For sure!</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">middle</span>\n<span class=\"go\">\n</span><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Game</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">minimum</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">maximum</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">resolution_tested</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s2\">\"^\\d+x\\d+$\"</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">genre</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">unique_items</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">rating</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">max_properties</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Cities: Skylines\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">\"score\"</span><span class=\"p\">:</span> <span class=\"mf\">9.0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">\"resolution_tested\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1920x1200\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">\"genre\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Simulators\"</span><span class=\"p\">,</span> <span class=\"s2\">\"City Building\"</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">\"rating\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">\"IGN\"</span><span class=\"p\">:</span> <span class=\"mf\">8.5</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">\"Gamespot\"</span><span class=\"p\">:</span> <span class=\"mf\">8.0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">\"Steam\"</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span>\n<span class=\"gp\">... </span>    <span class=\"p\">}</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">game</span> <span class=\"o\">=</span> <span class=\"n\">Game</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">game</span>\n<span class=\"go\">Game(name='Cities: Skylines', score=9.0, resolution_tested='1920x1200', genre=['Simulators', 'City Building'], rating={'IGN': 8.5, 'Gamespot': 8.0, 'Steam': 4.5})\n\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"p\">)</span>\n<span class=\"go\">{'name': 'Cities: Skylines', 'score': 9.0, 'resolution_tested': '1920x1200', 'genre': ['Simulators', 'City Building'], 'rating': {'IGN': 8.5, 'Gamespot': 8.0, 'Steam': 4.5}}</span>\n</pre>\n<p><tt>middle</tt> is flexible enough to understand <tt>Enum</tt>, nested models and a large variety of types declared on the <tt>typing</tt> module out of the box. Also, you can <a href=\"https://middle.readthedocs.io/en/latest/extending.html\" rel=\"nofollow\">extend it</a> to your own classes!</p>\n<div>\n<p>Warning</p>\n<p><strong>IMPORTANT</strong>: <tt>middle</tt> is in <strong>very early stages</strong> of development. There are some requirements (like <tt><span class=\"pre\">python-dateutil</span></tt>) that would not be required in future releases; as there\u2019s a lot of functionalities that needs to be implemented and some known misbehaviors to be addressed, not to mention it needs a lot of testing before moving to any other status rather than <strong>alpha</strong>.</p>\n</div>\n<div id=\"todo\">\n<h3>TODO</h3>\n<ul>\n<li>Alias options (keys) to populate classes;</li>\n<li>Read-only and write-only fields;</li>\n<li>Better error handling (almost everywhere);</li>\n<li>Create a benchmark suite against other solutions;</li>\n<li>Formatters are still missing;</li>\n<li>Possibility to \u201ccast\u201d an instance to another instance where the original object is a subclass of it;</li>\n</ul>\n</div>\n</div>\n<div id=\"done\">\n<h2>Done</h2>\n<ul>\n<li>If possible, fine grain the converters, so a <tt>str</tt> input value of <tt>{}</tt> doesn\u2019t end up as <tt><span class=\"pre\">str({})</span></tt>;</li>\n<li>Get <tt>date</tt> and <tt>datetime</tt> converters to be customizable, instead of an <tt>if isinstance</tt> statement;</li>\n<li>Implement more validators and a registerable for more metadata options;</li>\n<li>Implement a better \u201ctype dispatcher\u201d based on more complex rules (other than <tt>type(field.type)</tt> delivered by <tt>functools.singledispatch</tt>) because the <tt>typing</tt> module has changed <strong>a bit</strong> between Python 3.6 and 3.7;</li>\n<li>Support more types (<tt>typing.Tuple</tt>, <tt>decimal.Decimal</tt>);</li>\n<li>Get 100% (or closer) in code coverage;</li>\n<li>Lots of documentation;</li>\n<li>Python 3.5 support (with the exception of Windows platforms, see warning for Windows developers below);</li>\n</ul>\n</div>\n<div id=\"future-discussions\">\n<h2>Future discussions</h2>\n<ul>\n<li>In Python 3.7, a neat feature was added: <tt>dataclasses</tt>. I know it sounds really awesome to not depend on a 3rd-party library - such as <tt>attrs</tt>, but the latest provides a lot of functionalities that can\u2019t be found on Python 3.7 <tt>dataclasses</tt> (for now), so I\u2019ll leave this open for further discussion.</li>\n</ul>\n</div>\n<div id=\"warning-for-windows-developers\">\n<h2>Warning for Windows developers</h2>\n<p>If you\u2019re using Windows and Python 3.5, I think <tt>middle</tt> would not work well for you. CI in AppVeyor was disabled for Python 3.5 because of <a href=\"https://github.com/python/typing/issues/523\" rel=\"nofollow\">this issue</a>. If Guido doesn\u2019t care, why should I (or you) ?</p>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p><a href=\"https://middle.readthedocs.io/en/latest/\" rel=\"nofollow\">https://middle.readthedocs.io/en/latest/</a></p>\n</div>\n</div>\n<div id=\"useful-links\">\n<h2>Useful links</h2>\n<ul>\n<li><a href=\"https://github.com/vltr/middle\" rel=\"nofollow\">Source code</a></li>\n<li><a href=\"https://github.com/vltr/middle/issues\" rel=\"nofollow\">Issues</a></li>\n</ul>\n<div id=\"inspirations-and-thanks\">\n<h3>Inspirations and thanks</h3>\n<p>Some libs that inspired the creation of <tt>middle</tt>:</p>\n<ul>\n<li><a href=\"http://www.attrs.org/en/stable/\" rel=\"nofollow\">attrs</a>: how such a simple library can be such flexible, extendable and fast?</li>\n<li><a href=\"https://github.com/Tinche/cattrs\" rel=\"nofollow\">cattrs</a>: for its speed on creating <tt>attrs</tt> instances from <tt>dict</tt> and to instances again;</li>\n<li><a href=\"https://pydantic-docs.helpmanual.io/\" rel=\"nofollow\">pydantic</a>: for such pythonic and beautiful approach on creating classes using <tt>typing</tt> hints;</li>\n<li><a href=\"https://marshmallow.readthedocs.io/en/latest/\" rel=\"nofollow\">mashmallow</a>: it is one of the most feature rich modelling APIs I\u2019ve seen;</li>\n<li><a href=\"https://docs.apistar.com/\" rel=\"nofollow\">apistar</a>: it\u2019s almost magical!</li>\n<li><a href=\"http://sanic.readthedocs.io/en/latest/\" rel=\"nofollow\">Sanic</a>: \u201c<em>Gotta go fast!</em>\u201d</li>\n<li><a href=\"https://github.com/ionelmc/cookiecutter-pylibrary\" rel=\"nofollow\">ionelmc/cookiecutter-pylibrary</a>: The most complete (or interesting) <tt>cookiecutter</tt> template I found so far (make sure to <a href=\"https://blog.ionelmc.ro/2014/05/25/python-packaging/\" rel=\"nofollow\">read this article</a> too);</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p><tt>middle</tt> is a free software distributed under the <a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a> license.</p>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n</div>\n</div>\n<div id=\"v0-2-2-on-2018-10-28\">\n<h2>v0.2.2 on 2018-10-28</h2>\n<ul>\n<li>Added the possibility for models to have methods, functions, properties and etc.</li>\n</ul>\n</div>\n<div id=\"v0-2-1-on-2018-07-26\">\n<h2>v0.2.1 on 2018-07-26</h2>\n<ul>\n<li>Quick fix related to the change log and MANIFEST.in files</li>\n</ul>\n</div>\n<div id=\"v0-2-0-on-2018-07-26\">\n<h2>v0.2.0 on 2018-07-26</h2>\n<ul>\n<li>Released (part) of the documentation</li>\n<li>Got 99% coverage (finally combined)</li>\n<li>Python 3.5 support added</li>\n</ul>\n</div>\n<div id=\"v0-1-1-on-2018-07-02\">\n<h2>v0.1.1 on 2018-07-02</h2>\n<ul>\n<li>Add proper unit testing and support for Python 3.6 and 3.7</li>\n<li>Made the API a bit more flexible</li>\n<li>Code format and check done with <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">black</a></li>\n</ul>\n</div>\n<div id=\"v0-1-0-on-2018-06-21\">\n<h2>v0.1.0 on 2018-06-21</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5415936, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bfcd871c21bb1b43364584939c4e088d", "sha256": "13d521384174a62a3cc202a04089111c0a0001ea75631c81f9d52a233fc31f57"}, "downloads": -1, "filename": "middle-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bfcd871c21bb1b43364584939c4e088d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9521, "upload_time": "2018-06-21T20:01:25", "upload_time_iso_8601": "2018-06-21T20:01:25.897145Z", "url": "https://files.pythonhosted.org/packages/6f/9c/5c34d71fa1a603a4bdeac57b5ce18bc67cf52933b1801ef178a3ad700374/middle-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "339d5f018765d37788c1c359a9376066", "sha256": "2fd80d80abbadb1f1b88178c369a073beb326d5fb5a65e9177847cb5affdfd60"}, "downloads": -1, "filename": "middle-0.1.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "339d5f018765d37788c1c359a9376066", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23794, "upload_time": "2018-07-02T18:28:54", "upload_time_iso_8601": "2018-07-02T18:28:54.519111Z", "url": "https://files.pythonhosted.org/packages/c1/a7/9e0ee4184fba3cd685b4bbda6ec28005cb83dce066e5e7f2be88dbf34810/middle-0.1.1.linux-x86_64.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "feb97e54600f9e4628001114cde8a252", "sha256": "b9fa7f05be81c0e46efaee4120d66b3b4b60764395a5334ba46cd71e22cf0adc"}, "downloads": -1, "filename": "middle-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "feb97e54600f9e4628001114cde8a252", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18204, "upload_time": "2018-07-26T20:12:54", "upload_time_iso_8601": "2018-07-26T20:12:54.808687Z", "url": "https://files.pythonhosted.org/packages/ed/a2/de8be360659afde5609ea80b333e524d4dbc93531bf53faf6eb937ef9bad/middle-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "340f05eb40285802b13b92262c020607", "sha256": "68004f207e3ecbe6f6e33e7cac4b70603ef2adbe53c4d2af1234b4c25206be76"}, "downloads": -1, "filename": "middle-0.2.0.tar.gz", "has_sig": false, "md5_digest": "340f05eb40285802b13b92262c020607", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63676, "upload_time": "2018-07-26T20:12:56", "upload_time_iso_8601": "2018-07-26T20:12:56.438449Z", "url": "https://files.pythonhosted.org/packages/1c/c9/a1b53472bc37a28ecc8bab8675a73b61431e5217ae6755b6a36624572358/middle-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "48c09ac3f04856cabea9fddc9dc191d6", "sha256": "9ef8b9cfb6d3d6b8fe2e1eb4064d7df133fb13ac47f593ac08b00a77c124bf44"}, "downloads": -1, "filename": "middle-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "48c09ac3f04856cabea9fddc9dc191d6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18256, "upload_time": "2018-07-26T20:24:03", "upload_time_iso_8601": "2018-07-26T20:24:03.020881Z", "url": "https://files.pythonhosted.org/packages/18/4e/be515ce78bf8a633bd2377b41bb9c8c920a071a8809c0ed78b5f06e75770/middle-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cdc25f6ad7e8ddf90e50b4a63958ad6", "sha256": "5ed98047a4ccbfffa59b0a583a281d6f6a39f806719372d146b7539dd00f5a29"}, "downloads": -1, "filename": "middle-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9cdc25f6ad7e8ddf90e50b4a63958ad6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63783, "upload_time": "2018-07-26T20:24:04", "upload_time_iso_8601": "2018-07-26T20:24:04.698804Z", "url": "https://files.pythonhosted.org/packages/e8/b0/fe4040dc501ca41745c8dcec02e8a2ae0555d9f0a0fd037f255c825f7362/middle-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "3d8ea01de2d5d62c1c766b9f8f3c9bb8", "sha256": "3a821786eaeab41c1ce6c4110d84105fda2a1eb5421018009ec2589374c7bba9"}, "downloads": -1, "filename": "middle-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3d8ea01de2d5d62c1c766b9f8f3c9bb8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20017, "upload_time": "2018-10-26T15:35:08", "upload_time_iso_8601": "2018-10-26T15:35:08.491592Z", "url": "https://files.pythonhosted.org/packages/58/27/464407640308033d70594360b620606ac13d66274d4ad0043402423d181e/middle-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91fc9c8de6a7a03134d6c8678dafc470", "sha256": "53da043ec7a74e6a84a4280f356ab6d246e84356bb4cb42ebfa03c5e547fb0e8"}, "downloads": -1, "filename": "middle-0.2.2.tar.gz", "has_sig": false, "md5_digest": "91fc9c8de6a7a03134d6c8678dafc470", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61154, "upload_time": "2018-10-26T15:35:10", "upload_time_iso_8601": "2018-10-26T15:35:10.227240Z", "url": "https://files.pythonhosted.org/packages/c2/73/ac9341bd9cb326961d64bb675592c9a12a0a8f544014fa1e70c1c9d37734/middle-0.2.2.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "c64753af3a80e3ecaba28bc462922872", "sha256": "d5d2d0b62ce8f33d29c1a8bc193754019b401e9395f323e6afc00f69e4215564"}, "downloads": -1, "filename": "middle-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c64753af3a80e3ecaba28bc462922872", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20029, "upload_time": "2019-06-18T15:13:56", "upload_time_iso_8601": "2019-06-18T15:13:56.988976Z", "url": "https://files.pythonhosted.org/packages/8e/70/856c72196dd8c22850fc0bb0ca31e9c10d3467bca0a6fe67bff3a0c0ce0e/middle-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79814741ec0b0a6dd1bd9052d603145e", "sha256": "95c3971b7bf7fe8c98e112be098b38e519a572cfa18870811388c2daa3c62a89"}, "downloads": -1, "filename": "middle-0.2.4.tar.gz", "has_sig": false, "md5_digest": "79814741ec0b0a6dd1bd9052d603145e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61007, "upload_time": "2019-06-18T15:13:59", "upload_time_iso_8601": "2019-06-18T15:13:59.479624Z", "url": "https://files.pythonhosted.org/packages/0a/81/1021ea18bbb00f76e24a0681dbdfa05f3f28ed0ac65fdc3724263a84456b/middle-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c64753af3a80e3ecaba28bc462922872", "sha256": "d5d2d0b62ce8f33d29c1a8bc193754019b401e9395f323e6afc00f69e4215564"}, "downloads": -1, "filename": "middle-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c64753af3a80e3ecaba28bc462922872", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20029, "upload_time": "2019-06-18T15:13:56", "upload_time_iso_8601": "2019-06-18T15:13:56.988976Z", "url": "https://files.pythonhosted.org/packages/8e/70/856c72196dd8c22850fc0bb0ca31e9c10d3467bca0a6fe67bff3a0c0ce0e/middle-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79814741ec0b0a6dd1bd9052d603145e", "sha256": "95c3971b7bf7fe8c98e112be098b38e519a572cfa18870811388c2daa3c62a89"}, "downloads": -1, "filename": "middle-0.2.4.tar.gz", "has_sig": false, "md5_digest": "79814741ec0b0a6dd1bd9052d603145e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61007, "upload_time": "2019-06-18T15:13:59", "upload_time_iso_8601": "2019-06-18T15:13:59.479624Z", "url": "https://files.pythonhosted.org/packages/0a/81/1021ea18bbb00f76e24a0681dbdfa05f3f28ed0ac65fdc3724263a84456b/middle-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:52 2020"}