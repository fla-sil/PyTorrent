{"info": {"author": "Grant E Murray", "author_email": "gmurray203@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "[![Documentation Status](https://readthedocs.org/projects/snowmobile/badge/?version=latest)](https://snowmobile.readthedocs.io/en/latest/?badge=latest)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/GEM7318/Snowmobile/blob/master/LICENSE.txt)\n\n# snowmobile\n\n`snowmobile` is a simple set of modules for streamlined interaction with the Snowflake Database for Data Scientists and Business Analysts.\n\nAs such the included codes are intended to be used for the execution of raw SQL and don't make use any ORM to map Python objects to tabular Snowflake\ncounterparts.\n\nA quick overview of simplified usage and a description of of each module is outlined below.\n\n---\n## Basic usage\n1. Install with `pip install snowmobile`\n\n2. Create file called *snowflake_credentials.json* following the below structure with as many sets of credentials\nas desired and store anywhere on local file system\n    ```json\n    {\n        \"Connection1\": {\n        \"username\":\t\"\",\n        \"password\":\t\"\",\n        \"role\": \"\",\n        \"account\": \"\",\n        \"warehouse\": \"warehouse #1\",\n        \"database\":\t\"database #1\",\n        \"schema\": \"schema #1\"\n      },\n        \"SANDBOX\": {\n        \"username\":\t\"\",\n        \"password\":\t\"\",\n        \"role\": \"\",\n        \"account\": \"\",\n        \"warehouse\": \"warehouse #1\",\n        \"database\":\t\"database #1\",\n        \"schema\": \"SANDBOX\"\n      }\n    }\n   ```\n\n3. Import desired modules and execute a statement to test connection\n    ```python\n    # bundled authentication & statement-execution module  \n    from snowmobile import snowquery\n\n    # Instantiate an instance of a connection\n    sf = snowquery.Snowflake(conn_name='SANDBOX')\n\n    # Execute statements on that connection \n    sample_table = sf.execute_query('SELECT * FROM SAMPLE_TABLE')\n    ```\n\n---\n## snowcreds\n`snowcreds` is comprised of a single class intentionally isolated for easier evolving along with security standards, \nits instantiation of `Credentials()` accepts the below two arguments and associated defaults\n```python\ndef __init__(self, config_file: str = 'snowflake_credentials.json',\n                 conn_name: str = '') -> None:\n        \"\"\"\n        Instantiates an instance of credentials file\n\n        Args:\n            config_file: Name of .json configuration file following the\n            format of connection_credentials_SAMPLE.json.\n            conn_name: Name of connection within json file to use, will\n            use first set of credentials in the file if no argument is passed.\n        \"\"\"\n        self.config_file = config_file\n        self.conn_name = conn_name\n```\nOnce instantiated, the `.get()` method will traverse a user's file system and return the full path to the first file it finds with a filename matching `config_file`.\n\n**The .json file itself is assumed to store its credentials following [this](https://github.com/GEM7318/Snowmobile/blob/master/connection_credentials_SAMPLE.json) format**\n\n---\n## snowconn\n`snowconn` is also comprised of a single class, `Connection()`, that inherits `Credentials()` to retrieve a set of credentials with which to establish a connection to the database.\n\nOnce instantiated with the inherited `config_file` and `conn_name` attributes, the `.get_conn()` method will locate the credentials file, import the specified credentials, authenticate and return a `conn` \nobject as shown below for an illustrative **SANDBOX** set of credentials within the config file.\n```python\nfrom snowmobile import snowconn\ncreds = snowconn.Connection(conn_name='SANDBOX').get_conn()\n```\n\n---\n## snowquery\n`snowquery` makes use of the two modules above for simplified execution of statements against the database via an `execute_query()` method, which, itself\nuses [pandas'](https://pandas.pydata.org/) `pd.read_sql` function in conjunction to execute the SQL and will return results from the DataBase\nin the form of a [dataframe](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html) by default.\n\nIts usage to query via set of credentials stored in _snowflake_credentials.json_ labeled **SANDBOX** is as follows.\n\n```python\nfrom snowmobile import snowquery\nsf = snowquery.Snowflake(conn_name='SANDBOX')\nsample_table = sf.execute_query('SELECT * FROM SAMPLE_TABLE')\n```\n\n\n---\n## snowloader\n`snowloader` streamlines the bulk-loading protocol outlined in the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/data-load-overview.html)\nin the form of a `df_to_snowflake()` function and is intended to be a one-stop solution for the quick loading of data.\n\nIts main features are:\n- Standardizing of DataFrame's columns prior to loading into the warehouse\n- DDL creation & execution if a pre-defined table to load data into doesn't exist \n- Parameter-based flexibility to append DataFrame's contents or replace pre-existing contents\n- Returns a boolean indicating whether or not a load was successful for exception-handling when iteratively loading/appending multiple files\ninto a single table.\n\nContinuing on the example above, the below will convert all columns in the _sample_table_ DataFrame to floats and re-load it into the warehouse,\nexecuting new-DDL to create the table with float data types and loading all data back into the table.\n\n```python\n# ... continuation from snowquery example above\n\nfrom snowmobile import snowloader\nfloated_sample = sample_table.applymap(float)\n\n# Option 1 \nsnowloader.df_to_snowflake(df=floated_sample, table_name='SAMPLE_TABLE', force_recreate=True,\n                            snowflake=sf)\n\n# Option 2 \nsnowloader.df_to_snowflake(df=floated_sample, table_name='SAMPLE_TABLE', force_recreate=True)\n``` \n\nIn the above,\n- *Option 1* will load the data back into Snowflake on the same connection that was established in the\n  `sf = snowquery.Snowflake(conn_name='SANDBOX')` statement by use of the `snowflake=sf` parameter\n- In *Option 2* this argument is omitted and the function will instantiate a new connection based on the first set of credentials in **snowflake_credentials.json**\n\n\nIn general and particularly when iteratively loaded multiple files into the database, it will be faster to instantiate a single instance of `snowquery`\nthat's passed into the `df_to_snowflake()` function so that it does not need to find, read-in and parse the credentials file each time its called.\n\n---\n## scriptparser\n`scriptparser` is a simple module for parsing statements and *spans* of statements from within _.sql_ files via the `get_statement()` method.\n\n`scriptparser` assumes headers have been added above each statement following the regex pattern:\n- /\\*-statement_header-\\*/\n\nUsage in its simplest form is as follows:\n```python\nfrom snowmobile import scriptparser as sp\nscript = sp.ParseScript(full_path_to_script.sql)\nscript.get_statement('header_of_desired_statement')\n```\n\nIts primary benefit is that it re-imports the _.sql_ file each time the `get_statement()` method is called, avoiding\nthe need to re-instantiate or import an instance of `script` each time an edit is made to the _.sql_ file \n\n\n\n", "description_content_type": "text/markdown; charset=UTF-8; variant=GFM", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GEM7318/Snowmobile", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "snowmobile", "package_url": "https://pypi.org/project/snowmobile/", "platform": "any", "project_url": "https://pypi.org/project/snowmobile/", "project_urls": {"Documentation": "https://snowmobile.readthedocs.io/en/latest/index.html", "Homepage": "https://github.com/GEM7318/Snowmobile"}, "release_url": "https://pypi.org/project/snowmobile/0.0.18/", "requires_dist": ["pandas", "snowflake-connector-python", "sqlparse", "pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": ">=3.7.", "summary": "A simple set of modules for streamlined interaction with the Snowflake Database", "version": "0.0.18", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://snowmobile.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f586d7ffff836c0a841d31c98cb9f1576159583/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736e6f776d6f62696c652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/GEM7318/Snowmobile/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<h1>snowmobile</h1>\n<p><code>snowmobile</code> is a simple set of modules for streamlined interaction with the Snowflake Database for Data Scientists and Business Analysts.</p>\n<p>As such the included codes are intended to be used for the execution of raw SQL and don't make use any ORM to map Python objects to tabular Snowflake\ncounterparts.</p>\n<p>A quick overview of simplified usage and a description of of each module is outlined below.</p>\n<hr>\n<h2>Basic usage</h2>\n<ol>\n<li>\n<p>Install with <code>pip install snowmobile</code></p>\n</li>\n<li>\n<p>Create file called <em>snowflake_credentials.json</em> following the below structure with as many sets of credentials\nas desired and store anywhere on local file system</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"Connection1\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"username\"</span><span class=\"p\">:</span>\t<span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"password\"</span><span class=\"p\">:</span>\t<span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"role\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"account\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"warehouse\"</span><span class=\"p\">:</span> <span class=\"s2\">\"warehouse #1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"database\"</span><span class=\"p\">:</span>\t<span class=\"s2\">\"database #1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"schema #1\"</span>\n  <span class=\"p\">},</span>\n    <span class=\"nt\">\"SANDBOX\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"username\"</span><span class=\"p\">:</span>\t<span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"password\"</span><span class=\"p\">:</span>\t<span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"role\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"account\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"warehouse\"</span><span class=\"p\">:</span> <span class=\"s2\">\"warehouse #1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"database\"</span><span class=\"p\">:</span>\t<span class=\"s2\">\"database #1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"SANDBOX\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p>Import desired modules and execute a statement to test connection</p>\n<pre><span class=\"c1\"># bundled authentication &amp; statement-execution module  </span>\n<span class=\"kn\">from</span> <span class=\"nn\">snowmobile</span> <span class=\"kn\">import</span> <span class=\"n\">snowquery</span>\n\n<span class=\"c1\"># Instantiate an instance of a connection</span>\n<span class=\"n\">sf</span> <span class=\"o\">=</span> <span class=\"n\">snowquery</span><span class=\"o\">.</span><span class=\"n\">Snowflake</span><span class=\"p\">(</span><span class=\"n\">conn_name</span><span class=\"o\">=</span><span class=\"s1\">'SANDBOX'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Execute statements on that connection </span>\n<span class=\"n\">sample_table</span> <span class=\"o\">=</span> <span class=\"n\">sf</span><span class=\"o\">.</span><span class=\"n\">execute_query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM SAMPLE_TABLE'</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<hr>\n<h2>snowcreds</h2>\n<p><code>snowcreds</code> is comprised of a single class intentionally isolated for easier evolving along with security standards,\nits instantiation of <code>Credentials()</code> accepts the below two arguments and associated defaults</p>\n<pre><span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'snowflake_credentials.json'</span><span class=\"p\">,</span>\n                 <span class=\"n\">conn_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Instantiates an instance of credentials file</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            config_file: Name of .json configuration file following the</span>\n<span class=\"sd\">            format of connection_credentials_SAMPLE.json.</span>\n<span class=\"sd\">            conn_name: Name of connection within json file to use, will</span>\n<span class=\"sd\">            use first set of credentials in the file if no argument is passed.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_file</span> <span class=\"o\">=</span> <span class=\"n\">config_file</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conn_name</span> <span class=\"o\">=</span> <span class=\"n\">conn_name</span>\n</pre>\n<p>Once instantiated, the <code>.get()</code> method will traverse a user's file system and return the full path to the first file it finds with a filename matching <code>config_file</code>.</p>\n<p><strong>The .json file itself is assumed to store its credentials following <a href=\"https://github.com/GEM7318/Snowmobile/blob/master/connection_credentials_SAMPLE.json\" rel=\"nofollow\">this</a> format</strong></p>\n<hr>\n<h2>snowconn</h2>\n<p><code>snowconn</code> is also comprised of a single class, <code>Connection()</code>, that inherits <code>Credentials()</code> to retrieve a set of credentials with which to establish a connection to the database.</p>\n<p>Once instantiated with the inherited <code>config_file</code> and <code>conn_name</code> attributes, the <code>.get_conn()</code> method will locate the credentials file, import the specified credentials, authenticate and return a <code>conn</code>\nobject as shown below for an illustrative <strong>SANDBOX</strong> set of credentials within the config file.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snowmobile</span> <span class=\"kn\">import</span> <span class=\"n\">snowconn</span>\n<span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">snowconn</span><span class=\"o\">.</span><span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">conn_name</span><span class=\"o\">=</span><span class=\"s1\">'SANDBOX'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_conn</span><span class=\"p\">()</span>\n</pre>\n<hr>\n<h2>snowquery</h2>\n<p><code>snowquery</code> makes use of the two modules above for simplified execution of statements against the database via an <code>execute_query()</code> method, which, itself\nuses <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas'</a> <code>pd.read_sql</code> function in conjunction to execute the SQL and will return results from the DataBase\nin the form of a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html\" rel=\"nofollow\">dataframe</a> by default.</p>\n<p>Its usage to query via set of credentials stored in <em>snowflake_credentials.json</em> labeled <strong>SANDBOX</strong> is as follows.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snowmobile</span> <span class=\"kn\">import</span> <span class=\"n\">snowquery</span>\n<span class=\"n\">sf</span> <span class=\"o\">=</span> <span class=\"n\">snowquery</span><span class=\"o\">.</span><span class=\"n\">Snowflake</span><span class=\"p\">(</span><span class=\"n\">conn_name</span><span class=\"o\">=</span><span class=\"s1\">'SANDBOX'</span><span class=\"p\">)</span>\n<span class=\"n\">sample_table</span> <span class=\"o\">=</span> <span class=\"n\">sf</span><span class=\"o\">.</span><span class=\"n\">execute_query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM SAMPLE_TABLE'</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h2>snowloader</h2>\n<p><code>snowloader</code> streamlines the bulk-loading protocol outlined in the <a href=\"https://docs.snowflake.com/en/user-guide/data-load-overview.html\" rel=\"nofollow\">Snowflake documentation</a>\nin the form of a <code>df_to_snowflake()</code> function and is intended to be a one-stop solution for the quick loading of data.</p>\n<p>Its main features are:</p>\n<ul>\n<li>Standardizing of DataFrame's columns prior to loading into the warehouse</li>\n<li>DDL creation &amp; execution if a pre-defined table to load data into doesn't exist</li>\n<li>Parameter-based flexibility to append DataFrame's contents or replace pre-existing contents</li>\n<li>Returns a boolean indicating whether or not a load was successful for exception-handling when iteratively loading/appending multiple files\ninto a single table.</li>\n</ul>\n<p>Continuing on the example above, the below will convert all columns in the <em>sample_table</em> DataFrame to floats and re-load it into the warehouse,\nexecuting new-DDL to create the table with float data types and loading all data back into the table.</p>\n<pre><span class=\"c1\"># ... continuation from snowquery example above</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">snowmobile</span> <span class=\"kn\">import</span> <span class=\"n\">snowloader</span>\n<span class=\"n\">floated_sample</span> <span class=\"o\">=</span> <span class=\"n\">sample_table</span><span class=\"o\">.</span><span class=\"n\">applymap</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Option 1 </span>\n<span class=\"n\">snowloader</span><span class=\"o\">.</span><span class=\"n\">df_to_snowflake</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">floated_sample</span><span class=\"p\">,</span> <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'SAMPLE_TABLE'</span><span class=\"p\">,</span> <span class=\"n\">force_recreate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">snowflake</span><span class=\"o\">=</span><span class=\"n\">sf</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Option 2 </span>\n<span class=\"n\">snowloader</span><span class=\"o\">.</span><span class=\"n\">df_to_snowflake</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">floated_sample</span><span class=\"p\">,</span> <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'SAMPLE_TABLE'</span><span class=\"p\">,</span> <span class=\"n\">force_recreate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>In the above,</p>\n<ul>\n<li><em>Option 1</em> will load the data back into Snowflake on the same connection that was established in the\n<code>sf = snowquery.Snowflake(conn_name='SANDBOX')</code> statement by use of the <code>snowflake=sf</code> parameter</li>\n<li>In <em>Option 2</em> this argument is omitted and the function will instantiate a new connection based on the first set of credentials in <strong>snowflake_credentials.json</strong></li>\n</ul>\n<p>In general and particularly when iteratively loaded multiple files into the database, it will be faster to instantiate a single instance of <code>snowquery</code>\nthat's passed into the <code>df_to_snowflake()</code> function so that it does not need to find, read-in and parse the credentials file each time its called.</p>\n<hr>\n<h2>scriptparser</h2>\n<p><code>scriptparser</code> is a simple module for parsing statements and <em>spans</em> of statements from within <em>.sql</em> files via the <code>get_statement()</code> method.</p>\n<p><code>scriptparser</code> assumes headers have been added above each statement following the regex pattern:</p>\n<ul>\n<li>/*-statement_header-*/</li>\n</ul>\n<p>Usage in its simplest form is as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snowmobile</span> <span class=\"kn\">import</span> <span class=\"n\">scriptparser</span> <span class=\"k\">as</span> <span class=\"n\">sp</span>\n<span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">ParseScript</span><span class=\"p\">(</span><span class=\"n\">full_path_to_script</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n<span class=\"n\">script</span><span class=\"o\">.</span><span class=\"n\">get_statement</span><span class=\"p\">(</span><span class=\"s1\">'header_of_desired_statement'</span><span class=\"p\">)</span>\n</pre>\n<p>Its primary benefit is that it re-imports the <em>.sql</em> file each time the <code>get_statement()</code> method is called, avoiding\nthe need to re-instantiate or import an instance of <code>script</code> each time an edit is made to the <em>.sql</em> file</p>\n\n          </div>"}, "last_serial": 7192677, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "8aa9ee41e0b50cf945d0db05c4ca172d", "sha256": "294b57f9ce639f07fb922e1b5009f13ddb56c1c29819874d2581920479c7ecd1"}, "downloads": -1, "filename": "snowmobile-0.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8aa9ee41e0b50cf945d0db05c4ca172d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 17946, "upload_time": "2020-05-03T22:15:31", "upload_time_iso_8601": "2020-05-03T22:15:31.613202Z", "url": "https://files.pythonhosted.org/packages/a1/3c/efd0cf4aaac2c32d8350cfff16a1dcc9b361fd9af4f8740a3b79fb06b666/snowmobile-0.0.10-py2.py3-none-any.whl", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "e41e15e82575a439d214454cb71b569a", "sha256": "576c28d87ba665b09f94b215f50e13ca3c79a4acbfa7ca0dd8a636c4a6d92920"}, "downloads": -1, "filename": "snowmobile-0.0.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e41e15e82575a439d214454cb71b569a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 18887, "upload_time": "2020-05-03T22:38:51", "upload_time_iso_8601": "2020-05-03T22:38:51.188639Z", "url": "https://files.pythonhosted.org/packages/3c/68/8f347eea961925a4be726a0413898966c8291b24c24a11050de684cc7faf/snowmobile-0.0.11-py2.py3-none-any.whl", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "020b67dc013b886e2f214c13691975ee", "sha256": "5b6299e15244a2187904c8f709d426cdda700f956013b59e17c1b5b799f0fa15"}, "downloads": -1, "filename": "snowmobile-0.0.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "020b67dc013b886e2f214c13691975ee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 19093, "upload_time": "2020-05-03T22:58:02", "upload_time_iso_8601": "2020-05-03T22:58:02.942688Z", "url": "https://files.pythonhosted.org/packages/7b/62/6f0966893f542262e17b94b6c5117275198b9b807e61e8785cf81f5e75b9/snowmobile-0.0.12-py2.py3-none-any.whl", "yanked": true}], "0.0.13": [{"comment_text": "", "digests": {"md5": "70b3138a7df0a7fa2e7d2b828819303a", "sha256": "94d9aad6e83ea44c9ad53052c02ad742482ea84e266a9b1f0252a415b074efeb"}, "downloads": -1, "filename": "snowmobile-0.0.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "70b3138a7df0a7fa2e7d2b828819303a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 11930, "upload_time": "2020-05-03T23:23:42", "upload_time_iso_8601": "2020-05-03T23:23:42.417795Z", "url": "https://files.pythonhosted.org/packages/4c/52/ddce427580525e804bd916cd591010ab5cd22e135df24452d1129467b1b7/snowmobile-0.0.13-py2.py3-none-any.whl", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "48fd0ecc476ffa4c3c1ff8f3967d73d8", "sha256": "1dec86197a4eac7f53f3df818a786d518c579b63b012a31ea9ae170a88111a02"}, "downloads": -1, "filename": "snowmobile-0.0.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "48fd0ecc476ffa4c3c1ff8f3967d73d8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "==3.7", "size": 15103, "upload_time": "2020-05-04T14:08:09", "upload_time_iso_8601": "2020-05-04T14:08:09.185536Z", "url": "https://files.pythonhosted.org/packages/08/03/768470d20532296d9cd111cfb895cb86fc9719100a2554698a8b5f2844f0/snowmobile-0.0.15-py2.py3-none-any.whl", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "fa62765958ee7110a503ecbc9c68e96c", "sha256": "29d61cf53ad98dbaab6dd754393e3ef9b48415eba518d3d8fddfbaa4d5c14ad1"}, "downloads": -1, "filename": "snowmobile-0.0.16-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa62765958ee7110a503ecbc9c68e96c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "==3.7", "size": 15665, "upload_time": "2020-05-04T16:26:49", "upload_time_iso_8601": "2020-05-04T16:26:49.799720Z", "url": "https://files.pythonhosted.org/packages/2c/af/bf219f2cd0e3327f27e353f9bae363ff47d1100b9604dacdf643d972fdc4/snowmobile-0.0.16-py2.py3-none-any.whl", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "d9a3c666bee168b8cc8e83286f7ed4ea", "sha256": "10ccbfa1887ccc302516c1038096ed1ffab516675e6efc4cedbc7b06d92f2f04"}, "downloads": -1, "filename": "snowmobile-0.0.17-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d9a3c666bee168b8cc8e83286f7ed4ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "==3.7.*", "size": 15749, "upload_time": "2020-05-06T16:32:42", "upload_time_iso_8601": "2020-05-06T16:32:42.326711Z", "url": "https://files.pythonhosted.org/packages/03/b8/af9b6c133afde2d5569a6194a6274df9f9b7eb46c8f973e499731d82f7ab/snowmobile-0.0.17-py2.py3-none-any.whl", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "591776e947704dc91de9f560f7fc29db", "sha256": "1c42b55d6f85a508a284ff80f2ab5ea3dd1e014d8f2160256dcb0fd5c6985dfd"}, "downloads": -1, "filename": "snowmobile-0.0.18-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "591776e947704dc91de9f560f7fc29db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7.", "size": 15835, "upload_time": "2020-05-07T22:22:29", "upload_time_iso_8601": "2020-05-07T22:22:29.131014Z", "url": "https://files.pythonhosted.org/packages/77/45/d2e04823346be918e1e1b7727ed108063e66fcf3f8f2d7f9f5e9b5689bb4/snowmobile-0.0.18-py2.py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e532f95e6cc5b5a866f8bcc263db05d4", "sha256": "6ac74c540cc838cf01966511699db24207a8b565e3d6716a5338b97b82bb4984"}, "downloads": -1, "filename": "snowmobile-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e532f95e6cc5b5a866f8bcc263db05d4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10080, "upload_time": "2020-05-02T19:42:21", "upload_time_iso_8601": "2020-05-02T19:42:21.438511Z", "url": "https://files.pythonhosted.org/packages/70/08/ce047f0a197f26f80bee49cbcf244418223dfc3d74b1e0ffa9723a8551d2/snowmobile-0.0.2-py2.py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a3a6bc1e539b155c5d55a0c5ab955cdf", "sha256": "119e3264f1f8d71cf0cd5fd31289192877ba97d7d49e72710885e16616c5a522"}, "downloads": -1, "filename": "snowmobile-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a3a6bc1e539b155c5d55a0c5ab955cdf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3215, "upload_time": "2020-05-02T20:32:44", "upload_time_iso_8601": "2020-05-02T20:32:44.235223Z", "url": "https://files.pythonhosted.org/packages/b2/79/a8dd780c7b08e1da86b21cffe4f20022fc0a83d06ef36bd58f75749f0d3c/snowmobile-0.0.3-py2.py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d5169870b018e22945815dde717ffde8", "sha256": "81bd521fabb66926c5519632b2d08f49c8a7e80aceb2b8082c1ee57388f8fccc"}, "downloads": -1, "filename": "snowmobile-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d5169870b018e22945815dde717ffde8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10735, "upload_time": "2020-05-02T20:50:11", "upload_time_iso_8601": "2020-05-02T20:50:11.645528Z", "url": "https://files.pythonhosted.org/packages/86/8b/1abfe37a4f91b22ff8be8d666c48993a52783aa6854d62532c7f0a2b7b68/snowmobile-0.0.4-py2.py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "d7641e04ccd652fb548698c5389bbd67", "sha256": "77d44be83531c81988a64bcc6fe5f726cefce15a031bb094b91fc52f089c218f"}, "downloads": -1, "filename": "snowmobile-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d7641e04ccd652fb548698c5389bbd67", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10729, "upload_time": "2020-05-02T21:06:21", "upload_time_iso_8601": "2020-05-02T21:06:21.473974Z", "url": "https://files.pythonhosted.org/packages/20/6e/9e5b26d9a015231cdf76e0d695b901e7163a868755a9306a635121d0fcc2/snowmobile-0.0.5-py2.py3-none-any.whl", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "603b7b5c90f65b028d64d076d8657c4d", "sha256": "e6a54ae9e91e924a5039a0ea05058d11c314d2b959d87a4b2dd553f27b573bf1"}, "downloads": -1, "filename": "snowmobile-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "603b7b5c90f65b028d64d076d8657c4d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10729, "upload_time": "2020-05-02T21:10:03", "upload_time_iso_8601": "2020-05-02T21:10:03.415082Z", "url": "https://files.pythonhosted.org/packages/e6/77/9eabc434233767f62ad8f1499c17ea73002b8fa88e414c3d57d917890f48/snowmobile-0.0.6-py2.py3-none-any.whl", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "d80d6b7733b5ee3e49a1856d3ed090c8", "sha256": "88e335019297ae6761a13fff4d078767f63c1dc3e75d8d72ae48dea95c7b9714"}, "downloads": -1, "filename": "snowmobile-0.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d80d6b7733b5ee3e49a1856d3ed090c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 10757, "upload_time": "2020-05-02T23:13:04", "upload_time_iso_8601": "2020-05-02T23:13:04.005816Z", "url": "https://files.pythonhosted.org/packages/95/33/31d2f290cec42e8c63fd44225a43ee316cdc6888c084a929eb39d82c2a51/snowmobile-0.0.9-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "591776e947704dc91de9f560f7fc29db", "sha256": "1c42b55d6f85a508a284ff80f2ab5ea3dd1e014d8f2160256dcb0fd5c6985dfd"}, "downloads": -1, "filename": "snowmobile-0.0.18-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "591776e947704dc91de9f560f7fc29db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7.", "size": 15835, "upload_time": "2020-05-07T22:22:29", "upload_time_iso_8601": "2020-05-07T22:22:29.131014Z", "url": "https://files.pythonhosted.org/packages/77/45/d2e04823346be918e1e1b7727ed108063e66fcf3f8f2d7f9f5e9b5689bb4/snowmobile-0.0.18-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:07:13 2020"}