{"info": {"author": "kdmal", "author_email": "kdmal@yandex.ru", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "**esprima-compiler** is a es6-compatible javascript minifier written by python.\n**esprima-compiler** uses `esprima-python <https://github.com/Kronuz/esprima-python>`__\nas javascript parser library\n\nFeatures\n~~~~~~~~\n\n-  ES6 support\n-  Mangling function and variable names\n-  Ident output\n-  Obfuscate strings\n\nInstallation\n~~~~~~~~~~~~\n\n.. code:: shell\n\n    pip install esprima-compiler\n\nExamples\n~~~~~~~~\n\nExample javascript file\n\n.. code:: javascript\n\n    const Aconst = Math.PI, Bconst = \"Bconst\";\n    const Cconst = \"Cconst\";\n\n    function add(a, b){\n            function foo(){\n                    return a+b;\n            }\n            return foo();\n    }\n\n    const Dconst=\"Dconst\";\n\n    function mul(a, b){\n            return a*b;\n    }\n\n\n    const Econst=\"Econst\";\n    let Alet=\"Alet\";\n    const Fconst=\"Fconst\", Gconst=\"Gconst\";\n\n\nRearrange and mangle variables:\n\n.. code:: shell\n\n    python -m esprima_compiler -r --mangle-variable test.js\n\n.. code:: javascript\n\n    const Aconst=Math.PI,Bconst=\"Bconst\",Cconst=\"Cconst\";\n    function add($a,$b){\n      function foo(){\n        return $a+$b;\n      }\n      return foo();\n    }\n    const Dconst=\"Dconst\";\n    function mul($a,$b){\n      return $a*$b;\n    }\n    const Econst=\"Econst\",Fconst=\"Fconst\",Gconst=\"Gconst\";\n    let Alet=\"Alet\";\n\n\nRearrange variables and mangle variables (include top level) and function names (except top-level):\n\n.. code:: shell\n\n    python -m esprima_compiler -r --mangle-variable-top --mangle-function test.js\n\n\n.. code:: javascript\n\n    const $a=Math.PI,$b=\"Bconst\",$c=\"Cconst\";\n    function add($d,$e){\n      function $f(){\n        return $d+$e;\n      }\n      return $f();\n    }\n    const $d=\"Dconst\";\n    function mul($e,$f){\n      return $e*$f;\n    }\n    const $e=\"Econst\",$f=\"Fconst\",$g=\"Gconst\";\n    let $h=\"Alet\";\n\nRearrange variables and mangle variables and function names (include top level) without identing:\n\n.. code:: shell\n\n    python -m esprima_compiler -i 0 -r --mangle-variable-top --mangle-function-top --mangle-function test.js\n\n.. code:: javascript\n\n    const $a=Math.PI,$b=\"Bconst\",$c=\"Cconst\";function $d($e,$f){function $g(){return $e+$f;}return $g();}const $e=\"Dconst\";function $f($g,$h){return $g*$h;}const $g=\"Econst\",$h=\"Fconst\",$i=\"Gconst\";let $j=\"Alet\";\n\n\nAPI\n~~~\n\nCompile javascript string:\n\n.. code:: python\n\n    >>> from esprima_compiler.compiler import Compiler\n    >>> c = Compiler(rearrange=True, mangle_variable=True, mangle_variable_top=True)\n    >>> js = \"\"\"\n    ... const A=1;\n    ... const B=2;\n    ... let C=3;\n    ...\n    ... class TestClass extends Object{\n    ...   constructor(a, b){\n    ...     this._a=a;\n    ...     this.b=b;\n    ...   }\n    ...   static get a(){\n    ...     return this._a;\n    ...   }\n    ...   set b(b){\n    ...     this.b=b;\n    ...   }\n    ...\n    ...   static async sum(){\n    ...     return this.a+this.b\n    ...   }\n    ... }\n    ... \"\"\"\n    >>> buf = c.compile(js)\n    >>> print(buf.read())\n    const $a=1,$b=2;\n    let $c=3;\n    class TestClass extends Object{\n      constructor($d,$e){\n        this._a=$d;\n        this.b=$e;\n      }\n      static get a(){\n        return this._a;\n      }\n      set b($d){\n        this.b=$d;\n      }\n      static async sum(){\n        return this.a+this.b;\n      }\n    }\n    >>>", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/humkanet/esprimajs", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "esprimajs", "package_url": "https://pypi.org/project/esprimajs/", "platform": "", "project_url": "https://pypi.org/project/esprimajs/", "project_urls": {"Homepage": "https://github.com/humkanet/esprimajs"}, "release_url": "https://pypi.org/project/esprimajs/0.1.0/", "requires_dist": null, "requires_python": ">=3", "summary": "es6-compatible javascript minifier", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>esprima-compiler</strong> is a es6-compatible javascript minifier written by python.\n<strong>esprima-compiler</strong> uses <a href=\"https://github.com/Kronuz/esprima-python\" rel=\"nofollow\">esprima-python</a>\nas javascript parser library</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>ES6 support</li>\n<li>Mangling function and variable names</li>\n<li>Ident output</li>\n<li>Obfuscate strings</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install esprima-compiler\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Example javascript file</p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">Aconst</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span><span class=\"p\">,</span> <span class=\"nx\">Bconst</span> <span class=\"o\">=</span> <span class=\"s2\">\"Bconst\"</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">Cconst</span> <span class=\"o\">=</span> <span class=\"s2\">\"Cconst\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">){</span>\n        <span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">(){</span>\n                <span class=\"k\">return</span> <span class=\"nx\">a</span><span class=\"o\">+</span><span class=\"nx\">b</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">foo</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Dconst</span><span class=\"o\">=</span><span class=\"s2\">\"Dconst\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">mul</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">){</span>\n        <span class=\"k\">return</span> <span class=\"nx\">a</span><span class=\"o\">*</span><span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kr\">const</span> <span class=\"nx\">Econst</span><span class=\"o\">=</span><span class=\"s2\">\"Econst\"</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">Alet</span><span class=\"o\">=</span><span class=\"s2\">\"Alet\"</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">Fconst</span><span class=\"o\">=</span><span class=\"s2\">\"Fconst\"</span><span class=\"p\">,</span> <span class=\"nx\">Gconst</span><span class=\"o\">=</span><span class=\"s2\">\"Gconst\"</span><span class=\"p\">;</span>\n</pre>\n<p>Rearrange and mangle variables:</p>\n<pre>python -m esprima_compiler -r --mangle-variable test.js\n</pre>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">Aconst</span><span class=\"o\">=</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span><span class=\"p\">,</span><span class=\"nx\">Bconst</span><span class=\"o\">=</span><span class=\"s2\">\"Bconst\"</span><span class=\"p\">,</span><span class=\"nx\">Cconst</span><span class=\"o\">=</span><span class=\"s2\">\"Cconst\"</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">$a</span><span class=\"p\">,</span><span class=\"nx\">$b</span><span class=\"p\">){</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">$a</span><span class=\"o\">+</span><span class=\"nx\">$b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">foo</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">const</span> <span class=\"nx\">Dconst</span><span class=\"o\">=</span><span class=\"s2\">\"Dconst\"</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">mul</span><span class=\"p\">(</span><span class=\"nx\">$a</span><span class=\"p\">,</span><span class=\"nx\">$b</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">$a</span><span class=\"o\">*</span><span class=\"nx\">$b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">const</span> <span class=\"nx\">Econst</span><span class=\"o\">=</span><span class=\"s2\">\"Econst\"</span><span class=\"p\">,</span><span class=\"nx\">Fconst</span><span class=\"o\">=</span><span class=\"s2\">\"Fconst\"</span><span class=\"p\">,</span><span class=\"nx\">Gconst</span><span class=\"o\">=</span><span class=\"s2\">\"Gconst\"</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">Alet</span><span class=\"o\">=</span><span class=\"s2\">\"Alet\"</span><span class=\"p\">;</span>\n</pre>\n<p>Rearrange variables and mangle variables (include top level) and function names (except top-level):</p>\n<pre>python -m esprima_compiler -r --mangle-variable-top --mangle-function test.js\n</pre>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">$a</span><span class=\"o\">=</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span><span class=\"p\">,</span><span class=\"nx\">$b</span><span class=\"o\">=</span><span class=\"s2\">\"Bconst\"</span><span class=\"p\">,</span><span class=\"nx\">$c</span><span class=\"o\">=</span><span class=\"s2\">\"Cconst\"</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">$d</span><span class=\"p\">,</span><span class=\"nx\">$e</span><span class=\"p\">){</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">$f</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">$d</span><span class=\"o\">+</span><span class=\"nx\">$e</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">$f</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">const</span> <span class=\"nx\">$d</span><span class=\"o\">=</span><span class=\"s2\">\"Dconst\"</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">mul</span><span class=\"p\">(</span><span class=\"nx\">$e</span><span class=\"p\">,</span><span class=\"nx\">$f</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">$e</span><span class=\"o\">*</span><span class=\"nx\">$f</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">const</span> <span class=\"nx\">$e</span><span class=\"o\">=</span><span class=\"s2\">\"Econst\"</span><span class=\"p\">,</span><span class=\"nx\">$f</span><span class=\"o\">=</span><span class=\"s2\">\"Fconst\"</span><span class=\"p\">,</span><span class=\"nx\">$g</span><span class=\"o\">=</span><span class=\"s2\">\"Gconst\"</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">$h</span><span class=\"o\">=</span><span class=\"s2\">\"Alet\"</span><span class=\"p\">;</span>\n</pre>\n<p>Rearrange variables and mangle variables and function names (include top level) without identing:</p>\n<pre>python -m esprima_compiler -i <span class=\"m\">0</span> -r --mangle-variable-top --mangle-function-top --mangle-function test.js\n</pre>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">$a</span><span class=\"o\">=</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span><span class=\"p\">,</span><span class=\"nx\">$b</span><span class=\"o\">=</span><span class=\"s2\">\"Bconst\"</span><span class=\"p\">,</span><span class=\"nx\">$c</span><span class=\"o\">=</span><span class=\"s2\">\"Cconst\"</span><span class=\"p\">;</span><span class=\"kd\">function</span> <span class=\"nx\">$d</span><span class=\"p\">(</span><span class=\"nx\">$e</span><span class=\"p\">,</span><span class=\"nx\">$f</span><span class=\"p\">){</span><span class=\"kd\">function</span> <span class=\"nx\">$g</span><span class=\"p\">(){</span><span class=\"k\">return</span> <span class=\"nx\">$e</span><span class=\"o\">+</span><span class=\"nx\">$f</span><span class=\"p\">;}</span><span class=\"k\">return</span> <span class=\"nx\">$g</span><span class=\"p\">();}</span><span class=\"kr\">const</span> <span class=\"nx\">$e</span><span class=\"o\">=</span><span class=\"s2\">\"Dconst\"</span><span class=\"p\">;</span><span class=\"kd\">function</span> <span class=\"nx\">$f</span><span class=\"p\">(</span><span class=\"nx\">$g</span><span class=\"p\">,</span><span class=\"nx\">$h</span><span class=\"p\">){</span><span class=\"k\">return</span> <span class=\"nx\">$g</span><span class=\"o\">*</span><span class=\"nx\">$h</span><span class=\"p\">;}</span><span class=\"kr\">const</span> <span class=\"nx\">$g</span><span class=\"o\">=</span><span class=\"s2\">\"Econst\"</span><span class=\"p\">,</span><span class=\"nx\">$h</span><span class=\"o\">=</span><span class=\"s2\">\"Fconst\"</span><span class=\"p\">,</span><span class=\"nx\">$i</span><span class=\"o\">=</span><span class=\"s2\">\"Gconst\"</span><span class=\"p\">;</span><span class=\"kd\">let</span> <span class=\"nx\">$j</span><span class=\"o\">=</span><span class=\"s2\">\"Alet\"</span><span class=\"p\">;</span>\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>Compile javascript string:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">esprima_compiler.compiler</span> <span class=\"kn\">import</span> <span class=\"n\">Compiler</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Compiler</span><span class=\"p\">(</span><span class=\"n\">rearrange</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">mangle_variable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">mangle_variable_top</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">js</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n... const A=1;\n... const B=2;\n... let C=3;\n...\n... class TestClass extends Object{\n...   constructor(a, b){\n...     this._a=a;\n...     this.b=b;\n...   }\n...   static get a(){\n...     return this._a;\n...   }\n...   set b(b){\n...     this.b=b;\n...   }\n...\n...   static async sum(){\n...     return this.a+this.b\n...   }\n... }\n... \"\"\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">js</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"n\">const</span> <span class=\"err\">$</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"err\">$</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"n\">let</span> <span class=\"err\">$</span><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestClass</span> <span class=\"n\">extends</span> <span class=\"n\">Object</span><span class=\"p\">{</span>\n  <span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"err\">$</span><span class=\"n\">e</span><span class=\"p\">){</span>\n    <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">_a</span><span class=\"o\">=</span><span class=\"err\">$</span><span class=\"n\">d</span><span class=\"p\">;</span>\n    <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"err\">$</span><span class=\"n\">e</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">static</span> <span class=\"n\">get</span> <span class=\"n\">a</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">_a</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nb\">set</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"n\">d</span><span class=\"p\">){</span>\n    <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"err\">$</span><span class=\"n\">d</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">static</span> <span class=\"k\">async</span> <span class=\"nb\">sum</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5653978, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8859e09cac45155eb26aacd78bd94362", "sha256": "590511d479eba35f389a9caa64d274c2a6aa4243ac2a910b0e27dbe7927a298f"}, "downloads": -1, "filename": "esprimajs-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8859e09cac45155eb26aacd78bd94362", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13312, "upload_time": "2019-08-09T07:16:46", "upload_time_iso_8601": "2019-08-09T07:16:46.031523Z", "url": "https://files.pythonhosted.org/packages/6c/29/941f3a74cf776ddad73832596516e68aef6ab87d5512754347ac96478233/esprimajs-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8859e09cac45155eb26aacd78bd94362", "sha256": "590511d479eba35f389a9caa64d274c2a6aa4243ac2a910b0e27dbe7927a298f"}, "downloads": -1, "filename": "esprimajs-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8859e09cac45155eb26aacd78bd94362", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13312, "upload_time": "2019-08-09T07:16:46", "upload_time_iso_8601": "2019-08-09T07:16:46.031523Z", "url": "https://files.pythonhosted.org/packages/6c/29/941f3a74cf776ddad73832596516e68aef6ab87d5512754347ac96478233/esprimajs-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:36 2020"}