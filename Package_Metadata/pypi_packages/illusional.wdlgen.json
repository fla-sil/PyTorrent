{"info": {"author": "Michael Franklin", "author_email": "michael.franklin@petermac.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Topic :: Scientific/Engineering"], "description": "# python-wdlgen\n\n[![Build Status](https://travis-ci.org/PMCC-BioinformaticsCore/python-wdlgen.svg?branch=master)](https://travis-ci.org/PMCC-BioinformaticsCore/python-wdlgen)\n[![PyPI version](https://badge.fury.io/py/illusional.wdlgen.svg)](https://badge.fury.io/py/illusional.wdlgen)\n \n[Workflow Description Language](http://www.openwdl.org) is way to describe tasks and workflows in a \"_human readable and writable way_\". It was initially developed and offered by [Broad Institute](https://software.broadinstitute.org/) to be paired with their workflow engine [Cromwell](https://cromwell.readthedocs.io/en/stable/), however it has since been made open source with other engines such as [Toil](http://toil.readthedocs.io/en/3.14.0/running/wdl.html) and [DNAnexus\\*](https://github.com/dnanexus/dxWDL).\n\n\n### WARNING\n\nThis module now only generates developmental WDL, this includes Directories and wrapping all inputs in an input block. \nTo use this generated WDL, you must use a version of **Cromwell higher than 37**. \n\nThis module automatically includes `version development` in the Workflow and Task outputs. \nThe guides below may not reflect the current version of this repository, but will be updated soon.\n\nThis syntax is based on the [Developmental Workflow Description Language specification](https://github.com/openwdl/wdl/blob/master/versions/development/SPEC.md).\n\n___\n\n## Motiviation\n\nI needed an easy way to generate some _BASIC_ WDL through some in memory objects, and I was using ([a fork](https://github.com/illusional/python-cwlgen) of) [common-workflow-language/python-cwlgen](https://github.com/common-workflow-language/python-cwlgen), I figured I could open this up to see what use it has.\n\n## Installation\n\n```\npip install illusional.wdlgen\n```\n\n## General support\n\nThis software is provided as-is, without warranty of any kind ... and so on.\n\nIt's a pretty dumb wrapper that uses string interpolation to generate the structure. It wouldn't handle automatically escaping illegal characters.\n\nGenerally it supports:\n\n- Types - All types are represented as a `WdlType`, which can either be a [`PrimitiveType`](https://github.com/openwdl/wdl/blob/master/versions/1.0/SPEC.md#types), or an `ArrayType` (see [goal](#goals)). Also supports the postfix quantifiers.\n\n- Workflow creation (`wdlgen.Workflow`)\n\t- manual imports (`wdlgen.Workflow.WorkflowImport`)\n\t- inputs (`wdlgen.Input`)\n\t- outputs (`wdlgen.Output`)\n\t- calls:\n\t\t- general call (`wdlgen.WorkflowCall`)\n\t\t- scatter (`wdlgen.WorkflowScatter(WorkflowCall[])`)\n    - meta: `wdlgen.Meta`\n    - parameter_meta: `wdlgen.ParameterMeta`\n    \n- Task creation (`wdlgen.Task`) - This is based similar to how [CWL constructs its commands](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineTool).\n\t- inputs: `wdlgen.Input`\n\t- outputs: `wdlgen.Output`\n\t- runtime: `wdlgen.Task.Runtime`\n\t- command: `wdlgen.Task.Command`\n\t\t- arguments: `wdlgen.Task.Command.Argument`\n\t\t- inputs: `wdlgen.Task.Command.Input`\n    - meta: `wdlgen.Meta`\n    - parameter_meta: `wdlgen.ParameterMeta`\n\n## How to use\n\nThis will give you a _brief_ overview on how to _use_ python-wdlgen. Goals are to improve the write a proper documentation spec, but if you have a moderate understanding of workflows in either CWL or WDL, this code will hopefully be fairly intuitive.\n\nEvery class inherits from a `WDLBase` which means it must have a `get_string()` method which returns the string representation of the class, calling this on any children it may have.\n\n### Types\n\nAll types are represented as a WDLType, which has a parse method. It's a little overkill in some cases, but makes managing attributes a bit easier.\n\n```python\nparsed_string = wdlgen.WdlType.parse(\"String\")\t# WdlType<PrimitiveType<String>>\nparsed_op_str = wdlgen.WdlType.parse(\"String?\") # WdlType<PrimtiveType<String>>\nparsed_array = wdlgen.WDLType.parse(\"File[]\")\t# WdlType<ArrayType<File>>\nparsed_ar_oq = wdlgen.WdlType(parse(\"Int?[]+\"))\t# WdlType<ArrayType<Int?> (+)>\n```\n\nYou can also construct these manually:\n```python\nparsed_string = WdlType(PrimitiveType(\"String\"))\nparsed_op_str = WdlType(PrimtiveType(\"String\", optional=True))\nparsed_array = WdlType(ArrayType(WdlType(PrimitiveType(\"File\"))))\nparsed_ar_q = WdlType(ArrayType(WdlType(PrimitiveType(\"Int\"), optional=True), requires_multiple=True))\n```\n\n### Input / Output\nInput: `wdlgen.Input(data_type: WdlType, name: str, expression: str = None)`\n\nOutput: `wdlgen.Output(data_type: WdlType, name: str, expression: str = None)`\n\nboth of which output something like:\n\t`{WdlType} {name} [= {expression}]`\n\n### Task\n\nA task is a collection of Inputs, Outputs and a Command that are identified by a _name_. Inputs and Outputs are as above. Note that you can use functions such as `stdout()` or other for the expression.\n\n> If you don't want to play by these rules, don't include any inputs or outputs and just provide your whole string to the initializer for command.\n\n```python\nt = wdlgen.Task(\"task_name\")\nt.inputs.append(wdlgen.Input(wdlgen.WdlType.parse(\"String\"), \"taskGreeting\"))\n# command in next section\nt.outputs.append(wdlgen.Output(wdlgen.WdlType.parse(\"File\"), \"standardOut\", \"stdout()\"))\n```\n\n#### Command\n\nThe command is broken up similar to how CWL breaks its command generation up, by itself it has a _base command_. Each component has a corresponding input (else use the `wdlgen.Task.Command.Argument` class), optionality, position, prefix (and whether the value should be separated from prefix; think `-o {val}` vs `outputDir={val}`) and potentially a default.\n\nConstruct a command like the following:\n```python\ncommand = wdlgen.Task.Command(\"echo\")\ncommand.inputs.append(wdlgen.Task.Command.CommandInput(\"taskGreeting\", optional=False, position=None, prefix=\"-a\", separate_value_from_prefix=True, default=None))\ncommand.inputs.append(wdlgen.Task.Command.CommandInput(\"otherInput\", optional=True, position=2, prefix=\"optional-param=\", separate_value_from_prefix=False, default=None))\n\n# t is the task\nt.command = command\nprint(command.get_string())\n```\n\nThis will result in the following WDL command:\n```bash\necho \\\n  -a ${taskGreeting} \\\n  ${\"optional-param=\" + otherInput}\n```\n\n#### Task output:\n\nThe combination of the task and command outputs:\n```wdl\nversion development\n\ntask task_name {\n  input {\n    String taskGreeting\n  }\n  command {\n    echo \\\n      -a ${taskGreeting} \\\n      ${\"optional-param=\" + otherInput}\n  }\n\n  output {\n    File standardOut = stdout()\n  }\n}\n```\n\n### Workflow\n\nYou should have moderate idea of the structure of WDL as there's no cleverness or abstraction done anywhere. Beware: there's also no checking attributes (to see if your `inputMap` actually corresponds to inputs).\n\nThe structure of a workflow is m\n\n```python\nw = wdlgen.Workflow(\"workflow_name\")\n\nw.imports.append(wdlgen.Workflow.WorkflowImport(\"tool_file\", \"\"))\nw.inputs.append(\n    wdlgen.Input(\n        wdlgen.WdlType.parse(\"String\"), \n        \"inputGreeting\"\n    )\n)\n\n\ninputs_map = {\"taskGreeting\": \"inputGreeting\"}\nw.calls.append(wdlgen.WorkflowCall(\"Q.namspaced_task_identifier\", \"task_alias\", inputs_map))\nw.outputs.append(wdlgen.Output(wdlgen.WdlType.parse(\"File\"), \"standardOut\", \"task_alias.standardOut\")\n```\n\nWhich outputs:\n```wdl\nversion development\n\nimport \"tools/tool_file.wdl\"\n\nworkflow workflow_name {\n  input { \n    String inputGreeting\n  }\n  call Q.namspaced_task_identifier as task_alias {\n    input:\n      taskGreeting=inputGreeting\n  }\n  output {\n    File standardOut = task_alias.standardOut\n  }\n}\n```\n\n\n## Known limitations\n\nI'm not a fan of the string interpolation generation of WDL that this module does. I think trying to build an [Abstract syntax tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) and then there should be something that convert that into the DSL that WDL uses.\n\nYou could also cause syntax errors in generated WDL by providing illegal characters. \n\n## Goals\n\n- Improve code-level documentation.\n- Increase the testing coverage + quality of unit tests.\n- Better represent the WDL spec.\n- ~~Find an easier distribution / release method - such as PIP.~~\n- ~~Automate testing and delivery through TravisCI / CircleCI or similar.~~\n- Validate each value by [WDL's language specifications](https://github.com/openwdl/wdl/blob/master/versions/1.0/SPEC.md#language-specification).\n- Add support for structs\n\n### Long goals\n- Write a documentation site.\n- Make classes convert into AST and then into DSL.\n\n## Issues and Pull Requests\nFeel free to log issues and make pull requests. I make no guarantee to the existence or timeliness of replies.\n\n\nLinks:\n\n- WDL description: https://github.com/openwdl/wdl/blob/master/versions/1.0/SPEC.md", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/illusional/python-wdlgen", "keywords": "", "license": "GNU", "maintainer": "", "maintainer_email": "", "name": "illusional.wdlgen", "package_url": "https://pypi.org/project/illusional.wdlgen/", "platform": "", "project_url": "https://pypi.org/project/illusional.wdlgen/", "project_urls": {"Homepage": "https://github.com/illusional/python-wdlgen"}, "release_url": "https://pypi.org/project/illusional.wdlgen/0.2.10/", "requires_dist": null, "requires_python": "", "summary": "Contains classes and helpers to generate WDL without worrying about the syntax. This is primarily intended for generating WDL from other in-memory representations of a workflow.", "version": "0.2.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-wdlgen</h1>\n<p><a href=\"https://travis-ci.org/PMCC-BioinformaticsCore/python-wdlgen\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8704267ab94f57372764c585f64cac4cf0db1e2/68747470733a2f2f7472617669732d63692e6f72672f504d43432d42696f696e666f726d6174696373436f72652f707974686f6e2d77646c67656e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/illusional.wdlgen\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76e1eefb0a37cdcba4fd8f53db996f393d3acc67/68747470733a2f2f62616467652e667572792e696f2f70792f696c6c7573696f6e616c2e77646c67656e2e737667\"></a></p>\n<p><a href=\"http://www.openwdl.org\" rel=\"nofollow\">Workflow Description Language</a> is way to describe tasks and workflows in a \"<em>human readable and writable way</em>\". It was initially developed and offered by <a href=\"https://software.broadinstitute.org/\" rel=\"nofollow\">Broad Institute</a> to be paired with their workflow engine <a href=\"https://cromwell.readthedocs.io/en/stable/\" rel=\"nofollow\">Cromwell</a>, however it has since been made open source with other engines such as <a href=\"http://toil.readthedocs.io/en/3.14.0/running/wdl.html\" rel=\"nofollow\">Toil</a> and <a href=\"https://github.com/dnanexus/dxWDL\" rel=\"nofollow\">DNAnexus*</a>.</p>\n<h3>WARNING</h3>\n<p>This module now only generates developmental WDL, this includes Directories and wrapping all inputs in an input block.\nTo use this generated WDL, you must use a version of <strong>Cromwell higher than 37</strong>.</p>\n<p>This module automatically includes <code>version development</code> in the Workflow and Task outputs.\nThe guides below may not reflect the current version of this repository, but will be updated soon.</p>\n<p>This syntax is based on the <a href=\"https://github.com/openwdl/wdl/blob/master/versions/development/SPEC.md\" rel=\"nofollow\">Developmental Workflow Description Language specification</a>.</p>\n<hr>\n<h2>Motiviation</h2>\n<p>I needed an easy way to generate some <em>BASIC</em> WDL through some in memory objects, and I was using (<a href=\"https://github.com/illusional/python-cwlgen\" rel=\"nofollow\">a fork</a> of) <a href=\"https://github.com/common-workflow-language/python-cwlgen\" rel=\"nofollow\">common-workflow-language/python-cwlgen</a>, I figured I could open this up to see what use it has.</p>\n<h2>Installation</h2>\n<pre><code>pip install illusional.wdlgen\n</code></pre>\n<h2>General support</h2>\n<p>This software is provided as-is, without warranty of any kind ... and so on.</p>\n<p>It's a pretty dumb wrapper that uses string interpolation to generate the structure. It wouldn't handle automatically escaping illegal characters.</p>\n<p>Generally it supports:</p>\n<ul>\n<li>\n<p>Types - All types are represented as a <code>WdlType</code>, which can either be a <a href=\"https://github.com/openwdl/wdl/blob/master/versions/1.0/SPEC.md#types\" rel=\"nofollow\"><code>PrimitiveType</code></a>, or an <code>ArrayType</code> (see <a href=\"#goals\" rel=\"nofollow\">goal</a>). Also supports the postfix quantifiers.</p>\n</li>\n<li>\n<p>Workflow creation (<code>wdlgen.Workflow</code>)</p>\n<ul>\n<li>manual imports (<code>wdlgen.Workflow.WorkflowImport</code>)</li>\n<li>inputs (<code>wdlgen.Input</code>)</li>\n<li>outputs (<code>wdlgen.Output</code>)</li>\n<li>calls:\n<ul>\n<li>general call (<code>wdlgen.WorkflowCall</code>)</li>\n<li>scatter (<code>wdlgen.WorkflowScatter(WorkflowCall[])</code>)</li>\n</ul>\n</li>\n<li>meta: <code>wdlgen.Meta</code></li>\n<li>parameter_meta: <code>wdlgen.ParameterMeta</code></li>\n</ul>\n</li>\n<li>\n<p>Task creation (<code>wdlgen.Task</code>) - This is based similar to how <a href=\"https://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineTool\" rel=\"nofollow\">CWL constructs its commands</a>.</p>\n<ul>\n<li>inputs: <code>wdlgen.Input</code></li>\n<li>outputs: <code>wdlgen.Output</code></li>\n<li>runtime: <code>wdlgen.Task.Runtime</code></li>\n<li>command: <code>wdlgen.Task.Command</code>\n<ul>\n<li>arguments: <code>wdlgen.Task.Command.Argument</code></li>\n<li>inputs: <code>wdlgen.Task.Command.Input</code></li>\n</ul>\n</li>\n<li>meta: <code>wdlgen.Meta</code></li>\n<li>parameter_meta: <code>wdlgen.ParameterMeta</code></li>\n</ul>\n</li>\n</ul>\n<h2>How to use</h2>\n<p>This will give you a <em>brief</em> overview on how to <em>use</em> python-wdlgen. Goals are to improve the write a proper documentation spec, but if you have a moderate understanding of workflows in either CWL or WDL, this code will hopefully be fairly intuitive.</p>\n<p>Every class inherits from a <code>WDLBase</code> which means it must have a <code>get_string()</code> method which returns the string representation of the class, calling this on any children it may have.</p>\n<h3>Types</h3>\n<p>All types are represented as a WDLType, which has a parse method. It's a little overkill in some cases, but makes managing attributes a bit easier.</p>\n<pre><span class=\"n\">parsed_string</span> <span class=\"o\">=</span> <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WdlType</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"String\"</span><span class=\"p\">)</span>\t<span class=\"c1\"># WdlType&lt;PrimitiveType&lt;String&gt;&gt;</span>\n<span class=\"n\">parsed_op_str</span> <span class=\"o\">=</span> <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WdlType</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"String?\"</span><span class=\"p\">)</span> <span class=\"c1\"># WdlType&lt;PrimtiveType&lt;String&gt;&gt;</span>\n<span class=\"n\">parsed_array</span> <span class=\"o\">=</span> <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WDLType</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"File[]\"</span><span class=\"p\">)</span>\t<span class=\"c1\"># WdlType&lt;ArrayType&lt;File&gt;&gt;</span>\n<span class=\"n\">parsed_ar_oq</span> <span class=\"o\">=</span> <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WdlType</span><span class=\"p\">(</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"Int?[]+\"</span><span class=\"p\">))</span>\t<span class=\"c1\"># WdlType&lt;ArrayType&lt;Int?&gt; (+)&gt;</span>\n</pre>\n<p>You can also construct these manually:</p>\n<pre><span class=\"n\">parsed_string</span> <span class=\"o\">=</span> <span class=\"n\">WdlType</span><span class=\"p\">(</span><span class=\"n\">PrimitiveType</span><span class=\"p\">(</span><span class=\"s2\">\"String\"</span><span class=\"p\">))</span>\n<span class=\"n\">parsed_op_str</span> <span class=\"o\">=</span> <span class=\"n\">WdlType</span><span class=\"p\">(</span><span class=\"n\">PrimtiveType</span><span class=\"p\">(</span><span class=\"s2\">\"String\"</span><span class=\"p\">,</span> <span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"n\">parsed_array</span> <span class=\"o\">=</span> <span class=\"n\">WdlType</span><span class=\"p\">(</span><span class=\"n\">ArrayType</span><span class=\"p\">(</span><span class=\"n\">WdlType</span><span class=\"p\">(</span><span class=\"n\">PrimitiveType</span><span class=\"p\">(</span><span class=\"s2\">\"File\"</span><span class=\"p\">))))</span>\n<span class=\"n\">parsed_ar_q</span> <span class=\"o\">=</span> <span class=\"n\">WdlType</span><span class=\"p\">(</span><span class=\"n\">ArrayType</span><span class=\"p\">(</span><span class=\"n\">WdlType</span><span class=\"p\">(</span><span class=\"n\">PrimitiveType</span><span class=\"p\">(</span><span class=\"s2\">\"Int\"</span><span class=\"p\">),</span> <span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">requires_multiple</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<h3>Input / Output</h3>\n<p>Input: <code>wdlgen.Input(data_type: WdlType, name: str, expression: str = None)</code></p>\n<p>Output: <code>wdlgen.Output(data_type: WdlType, name: str, expression: str = None)</code></p>\n<p>both of which output something like:\n<code>{WdlType} {name} [= {expression}]</code></p>\n<h3>Task</h3>\n<p>A task is a collection of Inputs, Outputs and a Command that are identified by a <em>name</em>. Inputs and Outputs are as above. Note that you can use functions such as <code>stdout()</code> or other for the expression.</p>\n<blockquote>\n<p>If you don't want to play by these rules, don't include any inputs or outputs and just provide your whole string to the initializer for command.</p>\n</blockquote>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"s2\">\"task_name\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WdlType</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"String\"</span><span class=\"p\">),</span> <span class=\"s2\">\"taskGreeting\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># command in next section</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WdlType</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"File\"</span><span class=\"p\">),</span> <span class=\"s2\">\"standardOut\"</span><span class=\"p\">,</span> <span class=\"s2\">\"stdout()\"</span><span class=\"p\">))</span>\n</pre>\n<h4>Command</h4>\n<p>The command is broken up similar to how CWL breaks its command generation up, by itself it has a <em>base command</em>. Each component has a corresponding input (else use the <code>wdlgen.Task.Command.Argument</code> class), optionality, position, prefix (and whether the value should be separated from prefix; think <code>-o {val}</code> vs <code>outputDir={val}</code>) and potentially a default.</p>\n<p>Construct a command like the following:</p>\n<pre><span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"p\">(</span><span class=\"s2\">\"echo\"</span><span class=\"p\">)</span>\n<span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"o\">.</span><span class=\"n\">CommandInput</span><span class=\"p\">(</span><span class=\"s2\">\"taskGreeting\"</span><span class=\"p\">,</span> <span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"-a\"</span><span class=\"p\">,</span> <span class=\"n\">separate_value_from_prefix</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n<span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"o\">.</span><span class=\"n\">CommandInput</span><span class=\"p\">(</span><span class=\"s2\">\"otherInput\"</span><span class=\"p\">,</span> <span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"optional-param=\"</span><span class=\"p\">,</span> <span class=\"n\">separate_value_from_prefix</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># t is the task</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">command</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">get_string</span><span class=\"p\">())</span>\n</pre>\n<p>This will result in the following WDL command:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"se\">\\</span>\n  -a <span class=\"si\">${</span><span class=\"nv\">taskGreeting</span><span class=\"si\">}</span> <span class=\"se\">\\</span>\n  <span class=\"si\">${</span><span class=\"s2\">\"optional-param=\"</span><span class=\"p\"> + otherInput</span><span class=\"si\">}</span>\n</pre>\n<h4>Task output:</h4>\n<p>The combination of the task and command outputs:</p>\n<pre>version development\n\ntask task_name {\n  input {\n    String taskGreeting\n  }\n  command {\n    echo \\\n      -a ${taskGreeting} \\\n      ${\"optional-param=\" + otherInput}\n  }\n\n  output {\n    File standardOut = stdout()\n  }\n}\n</pre>\n<h3>Workflow</h3>\n<p>You should have moderate idea of the structure of WDL as there's no cleverness or abstraction done anywhere. Beware: there's also no checking attributes (to see if your <code>inputMap</code> actually corresponds to inputs).</p>\n<p>The structure of a workflow is m</p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Workflow</span><span class=\"p\">(</span><span class=\"s2\">\"workflow_name\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">imports</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Workflow</span><span class=\"o\">.</span><span class=\"n\">WorkflowImport</span><span class=\"p\">(</span><span class=\"s2\">\"tool_file\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">))</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span>\n        <span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WdlType</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"String\"</span><span class=\"p\">),</span> \n        <span class=\"s2\">\"inputGreeting\"</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">inputs_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"taskGreeting\"</span><span class=\"p\">:</span> <span class=\"s2\">\"inputGreeting\"</span><span class=\"p\">}</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">calls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WorkflowCall</span><span class=\"p\">(</span><span class=\"s2\">\"Q.namspaced_task_identifier\"</span><span class=\"p\">,</span> <span class=\"s2\">\"task_alias\"</span><span class=\"p\">,</span> <span class=\"n\">inputs_map</span><span class=\"p\">))</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">wdlgen</span><span class=\"o\">.</span><span class=\"n\">WdlType</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"File\"</span><span class=\"p\">),</span> <span class=\"s2\">\"standardOut\"</span><span class=\"p\">,</span> <span class=\"s2\">\"task_alias.standardOut\"</span><span class=\"p\">)</span>\n</pre>\n<p>Which outputs:</p>\n<pre>version development\n\nimport \"tools/tool_file.wdl\"\n\nworkflow workflow_name {\n  input { \n    String inputGreeting\n  }\n  call Q.namspaced_task_identifier as task_alias {\n    input:\n      taskGreeting=inputGreeting\n  }\n  output {\n    File standardOut = task_alias.standardOut\n  }\n}\n</pre>\n<h2>Known limitations</h2>\n<p>I'm not a fan of the string interpolation generation of WDL that this module does. I think trying to build an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\" rel=\"nofollow\">Abstract syntax tree</a> and then there should be something that convert that into the DSL that WDL uses.</p>\n<p>You could also cause syntax errors in generated WDL by providing illegal characters.</p>\n<h2>Goals</h2>\n<ul>\n<li>Improve code-level documentation.</li>\n<li>Increase the testing coverage + quality of unit tests.</li>\n<li>Better represent the WDL spec.</li>\n<li><del>Find an easier distribution / release method - such as PIP.</del></li>\n<li><del>Automate testing and delivery through TravisCI / CircleCI or similar.</del></li>\n<li>Validate each value by <a href=\"https://github.com/openwdl/wdl/blob/master/versions/1.0/SPEC.md#language-specification\" rel=\"nofollow\">WDL's language specifications</a>.</li>\n<li>Add support for structs</li>\n</ul>\n<h3>Long goals</h3>\n<ul>\n<li>Write a documentation site.</li>\n<li>Make classes convert into AST and then into DSL.</li>\n</ul>\n<h2>Issues and Pull Requests</h2>\n<p>Feel free to log issues and make pull requests. I make no guarantee to the existence or timeliness of replies.</p>\n<p>Links:</p>\n<ul>\n<li>WDL description: <a href=\"https://github.com/openwdl/wdl/blob/master/versions/1.0/SPEC.md\" rel=\"nofollow\">https://github.com/openwdl/wdl/blob/master/versions/1.0/SPEC.md</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6832719, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "daf321d6d6879246d71fdfc69adfb1b2", "sha256": "5312a9d06b9caa79d9f56ee41aeb520b69262699caf35c4ac78dd88ced733dbf"}, "downloads": -1, "filename": "illusional.wdlgen-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "daf321d6d6879246d71fdfc69adfb1b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11340, "upload_time": "2019-01-31T03:56:39", "upload_time_iso_8601": "2019-01-31T03:56:39.654785Z", "url": "https://files.pythonhosted.org/packages/e9/3b/53f57fe74e271c660634df532763b103a51dbb9f156dc9e9e0a343e4cd96/illusional.wdlgen-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d7dc07d9ca8b96fe39108fd5face2822", "sha256": "760e94cb8fa5f628bbee5ffa34c0611504e8f855f82caaca8d343fc9289912d2"}, "downloads": -1, "filename": "illusional.wdlgen-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d7dc07d9ca8b96fe39108fd5face2822", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12103, "upload_time": "2019-01-31T04:26:55", "upload_time_iso_8601": "2019-01-31T04:26:55.297923Z", "url": "https://files.pythonhosted.org/packages/56/84/a67ed424018159d674319c46309a8d05bf391a05a19948cadb6f6b2752d6/illusional.wdlgen-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "18205754a2728b879cb8c07ac65c16f2", "sha256": "fa5a795805e69c72ed9875e719733e0611a519ab3c4b7bfc43469a27d8712485"}, "downloads": -1, "filename": "illusional.wdlgen-0.1.0.tar.gz", "has_sig": false, "md5_digest": "18205754a2728b879cb8c07ac65c16f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13096, "upload_time": "2019-03-01T05:52:25", "upload_time_iso_8601": "2019-03-01T05:52:25.573209Z", "url": "https://files.pythonhosted.org/packages/7b/78/de050017c412748123da1994e55125fe864e578d9fd8b04e6131685b24d8/illusional.wdlgen-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "998b233fd527113c8c087dcb924d9d3a", "sha256": "c9fd76446a0bf62d4f0e5dc611e09a56f06945169d77cf16f08d8fdc00b21d2c"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.0.tar.gz", "has_sig": false, "md5_digest": "998b233fd527113c8c087dcb924d9d3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13240, "upload_time": "2019-04-11T23:44:59", "upload_time_iso_8601": "2019-04-11T23:44:59.485906Z", "url": "https://files.pythonhosted.org/packages/d7/dd/4139da88e3da153ff61fc19d1e8b501e6c31502db871350208eb6e7d140f/illusional.wdlgen-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "bf14eced847cac9e2d8f3de95df28576", "sha256": "14ad3e010d5141f5b616aaef9b4e49b39bb6f3c8b5d72f42e427fce06356ff63"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.1.tar.gz", "has_sig": false, "md5_digest": "bf14eced847cac9e2d8f3de95df28576", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13373, "upload_time": "2019-04-28T22:00:38", "upload_time_iso_8601": "2019-04-28T22:00:38.083215Z", "url": "https://files.pythonhosted.org/packages/44/9e/9802109a523d21f1cd2d973b6105069f7c96db59b35bd0297f69853cdb9a/illusional.wdlgen-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "679d7aa2ae22d1ff31471136d6e8bf85", "sha256": "abb29b91f9a95223d29229ebc58066c371d3574112d4657536cf78353b636f4d"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.10.tar.gz", "has_sig": false, "md5_digest": "679d7aa2ae22d1ff31471136d6e8bf85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12015, "upload_time": "2020-03-18T01:36:08", "upload_time_iso_8601": "2020-03-18T01:36:08.545778Z", "url": "https://files.pythonhosted.org/packages/ec/ba/0d0ebe2303d59da7c9e43405f3ca1ee33763f2d4b5c2545de39692477764/illusional.wdlgen-0.2.10.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "3c076e3cbaa4d4fc976b7575183beaec", "sha256": "d5ec9d7e72e3d4a8b65dc3142519b97a58e624a92d1b1e53b25fbeed968987fb"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.2.tar.gz", "has_sig": false, "md5_digest": "3c076e3cbaa4d4fc976b7575183beaec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13374, "upload_time": "2019-05-09T12:23:30", "upload_time_iso_8601": "2019-05-09T12:23:30.850950Z", "url": "https://files.pythonhosted.org/packages/a4/7a/6369f5a260eef7c548d2ef12f996e0158ada8f795c859427a5768308498a/illusional.wdlgen-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "be737598917a3d66a73998c49cd86343", "sha256": "44b3420547daf288f7eb9e5be363f61ecbd4eb43e7cddc5ba7368f46fecd5b58"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.3.tar.gz", "has_sig": false, "md5_digest": "be737598917a3d66a73998c49cd86343", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13474, "upload_time": "2019-07-11T03:59:05", "upload_time_iso_8601": "2019-07-11T03:59:05.764363Z", "url": "https://files.pythonhosted.org/packages/78/25/d6b4a320303f762df49ed5afb0004642bde00452c37f5be3114ad6a0e357/illusional.wdlgen-0.2.3.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d9f8a69255623c28daceb58e15ea9789", "sha256": "c80eb4431c97c18cb0a5f1a6657a54e6d5835f1af58b0cda92eed7212c835eca"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.5.tar.gz", "has_sig": false, "md5_digest": "d9f8a69255623c28daceb58e15ea9789", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10883, "upload_time": "2019-09-09T05:03:36", "upload_time_iso_8601": "2019-09-09T05:03:36.335040Z", "url": "https://files.pythonhosted.org/packages/02/c1/639283ce6550e2704012b279e29c96c189334a433c4c6fc8d6bcc0c45f58/illusional.wdlgen-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "8a5d969c2c2d325431ae9700f4a1ad24", "sha256": "21593d3089925e7d4b007c2a035c88fc9f06e702d5f837741011a173a9204c93"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.6.tar.gz", "has_sig": false, "md5_digest": "8a5d969c2c2d325431ae9700f4a1ad24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10906, "upload_time": "2020-01-07T20:44:22", "upload_time_iso_8601": "2020-01-07T20:44:22.268051Z", "url": "https://files.pythonhosted.org/packages/7c/bc/616ceec5b08bceca53b14c077422d7e172296466ad0d789db155d7a645d0/illusional.wdlgen-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "aa853d9f89b52cd9f921fce29d41c086", "sha256": "bb6588c2fe20c48a5f1908ee40534409ae82af8987891a4130e62415249824a4"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.7.tar.gz", "has_sig": false, "md5_digest": "aa853d9f89b52cd9f921fce29d41c086", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10983, "upload_time": "2020-01-08T23:52:03", "upload_time_iso_8601": "2020-01-08T23:52:03.920743Z", "url": "https://files.pythonhosted.org/packages/95/20/fa29586c3851c21731716f7ea71e5ca96ff0c3befaf1ebb184a775ca9e4c/illusional.wdlgen-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "3b048639f7689e08f4989b5449ac7790", "sha256": "ad2d63bff2d72e994f235b85e9e342df542f9798e38beb3d13d617a7b1fc0d0a"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.8.tar.gz", "has_sig": false, "md5_digest": "3b048639f7689e08f4989b5449ac7790", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11322, "upload_time": "2020-02-18T03:13:10", "upload_time_iso_8601": "2020-02-18T03:13:10.458328Z", "url": "https://files.pythonhosted.org/packages/c7/7c/3c8bfdb855400c43c749358754af844264d6ef2ba7fa3e6269894c2dd712/illusional.wdlgen-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "d00fad350b082b7104124de4a1ebd210", "sha256": "c0644a3b1da7168184e168e1ca466587788dca214fe204702990e86fe2ccbb7f"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.9.tar.gz", "has_sig": false, "md5_digest": "d00fad350b082b7104124de4a1ebd210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11327, "upload_time": "2020-03-18T01:33:03", "upload_time_iso_8601": "2020-03-18T01:33:03.700992Z", "url": "https://files.pythonhosted.org/packages/ad/75/8bfaf7acdc984e21840d0cf8831ced9e43286d190f65843bd53934efcbb8/illusional.wdlgen-0.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "679d7aa2ae22d1ff31471136d6e8bf85", "sha256": "abb29b91f9a95223d29229ebc58066c371d3574112d4657536cf78353b636f4d"}, "downloads": -1, "filename": "illusional.wdlgen-0.2.10.tar.gz", "has_sig": false, "md5_digest": "679d7aa2ae22d1ff31471136d6e8bf85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12015, "upload_time": "2020-03-18T01:36:08", "upload_time_iso_8601": "2020-03-18T01:36:08.545778Z", "url": "https://files.pythonhosted.org/packages/ec/ba/0d0ebe2303d59da7c9e43405f3ca1ee33763f2d4b5c2545de39692477764/illusional.wdlgen-0.2.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:58 2020"}