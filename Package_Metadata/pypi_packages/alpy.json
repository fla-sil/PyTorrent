{"info": {"author": "Alexey Bogdanenko", "author_email": "alexey@bogdanenko.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "####\nAlpy\n####\n\n*Test network virtual appliance using Docker containers*\n\n.. contents::\n   :backlinks: none\n\nGeneral information\n===================\n\nThe project\n-----------\n\nThis project is a Python library for testing network virtual appliances.\n\nAuthor\n------\n\nAlexey Bogdanenko\n\nLicense\n-------\n\nAlpy is licensed under ``SPDX-License-Identifier: GPL-3.0-or-later``. See\n``COPYING`` for more details.\n\nDescription\n-----------\n\nAlpy manages containers via `Docker Python API`__.\n\n__ https://github.com/docker/docker-py\n\nAlpy interacts with QEMU__ using Python API of the `QEMU Monitor Protocol`__\n(QMP). QMP is a JSON-based protocol that allows applications to communicate with\na QEMU instance.\n\n__ https://www.qemu.org\n__ https://pypi.org/project/qmp/\n\nAlpy gives user Pexpect__ object to interact with a serial console. The Pexpect\nobject is configured to log console input and output via the standard `logging\nmodule`__.\n\n__ https://pexpect.readthedocs.io\n__ https://docs.python.org/3/library/logging.html\n\nAlpy is packaged and deployed to PyPI. The package__ can be installed using\n*pip*.\n\n__ https://pypi.org/project/alpy/\n\nThere are unit tests (pytest__) and integration tests in GitLab CI pipeline.\nAlpy is tested and works on the latest Ubuntu, the latest Ubuntu LTS release and\non `Alpine Linux`__.\n\n__ https://docs.pytest.org/en/latest/\n__ https://alpinelinux.org/\n\nExamples\n========\n\nThe alpy library repository includes scripts and modules to build a simple\nappliance called Rabbit. Rabbit is Alpine Linux with a few packages\npre-installed. Having this simple DUT allows to demonstrate the library\nfeatures and capabilities. The tests verify a few features of the network\nappliance, for example:\n\n- IPv4 routing (see ``rabbit/tests/forward-ipv4/main.py``)\n- rate-limiting network traffic (see ``rabbit/tests/rate-limit/main.py``)\n- load-balancing HTTP requests (see ``rabbit/tests/load-balancing/main.py``)\n\nThe tests are executed automatically in the GitLab CI pipeline.\n\nExample network (test *rate-limit*)::\n\n   +-------------------------------------+\n   |                                     |\n   |          Device under test          |\n   |          rate limit = 1mbps         |\n   +-------+--------------------+--------+\n           |                    |\n           |                    |\n           |                    |\n   +-------+--------+   +-------+--------+\n   |                |   |                |\n   | 192.168.1.1/24 |   | 192.168.1.2/24 |\n   |                |   |                |\n   | node0          |   | node1          |\n   | iperf3 client  |   | iperf3 server  |\n   +----------------+   +----------------+\n\nExample test output::\n\n   INFO     __main__               Test description: Check that rabbit rate-limits traffic.\n   INFO     alpy.node              Create tap interfaces...\n   INFO     alpy.node              Create tap interfaces... done\n   INFO     alpy.qemu              Initialize QMP monitor...\n   INFO     alpy.qemu              Initialize QMP monitor... done\n   INFO     alpy.qemu              Start QEMU...\n   INFO     alpy.qemu              Start QEMU... done\n   INFO     alpy.qemu              Accept connection from QEMU to QMP monitor...\n   INFO     alpy.qemu              Accept connection from QEMU to QMP monitor... done\n   INFO     alpy.node              Create nodes...\n   INFO     alpy.node              Create nodes... done\n   INFO     alpy.console           Connect to console...\n   INFO     alpy.console           Connect to console... done\n   INFO     alpy.utils             Enter test environment\n   INFO     __main__               Start iperf3 server on node 1...\n   INFO     __main__               Start iperf3 server on node 1... done\n   INFO     alpy.qemu              Start virtual CPU...\n   INFO     alpy.qemu              Start virtual CPU... done\n   INFO     alpine                 Wait for the system to boot...\n   INFO     alpine                 Wait for the system to boot... done\n   INFO     alpine                 Login to the system...\n   INFO     alpine                 Login to the system... done\n   INFO     alpy.remote_shell      Type in script configure-rabbit...\n   INFO     alpy.remote_shell      Type in script configure-rabbit... done\n   INFO     alpy.remote_shell      Run script configure-rabbit...\n   INFO     alpy.remote_shell      Run script configure-rabbit... done\n   INFO     __main__               Start iperf3 client on node 0...\n   INFO     __main__               Measure rate...\n   INFO     __main__               Measure rate... done\n   INFO     __main__               Parse iperf3 report...\n   INFO     __main__               Parse iperf3 report... done\n   INFO     __main__               Start iperf3 client on node 0... done\n   INFO     alpine                 Initiate system shutdown...\n   INFO     alpine                 Initiate system shutdown... done\n   INFO     alpy.qemu              Wait until the VM is powered down...\n   INFO     alpy.qemu              Wait until the VM is powered down... done\n   INFO     alpy.qemu              Wait until the VM is stopped...\n   INFO     alpy.qemu              Wait until the VM is stopped... done\n   INFO     __main__               Rate received, bits per second: 976321\n   INFO     __main__               Check rate...\n   INFO     __main__               Check rate... done\n   INFO     alpy.utils             Exit test environment with success\n   INFO     alpy.console           Close console...\n   INFO     alpy.console           Close console... done\n   INFO     alpy.qemu              Quit QEMU...\n   INFO     alpy.qemu              Quit QEMU... done\n   INFO     alpy.utils             Test passed\n\nThe tests for the Rabbit device share a lot of code so the code is organized as\na library. The library is called *carrot*.\n\nFeatures\n========\n\nThe simplest docker to QEMU networking connection\n-------------------------------------------------\n\nNothing in the middle. No bridges, no veth pairs, no NAT etc.\n\nEach layer 2 frame emitted is delivered unmodified, reliably.\n\nReliable packet capture\n-----------------------\n\nEach frame is captured reliably thanks to the QEMU *filter-dump* feature.\n\nFirst-class Docker container support\n------------------------------------\n\nAlpy follows and encourages single process per container design.\n\nLogging\n-------\n\nTest logs are easy to configure and customize. Alpy consistently uses Python\n*logging* module.\n\nAlpy collects serial console log in binary as well as text (escaped) form.\n\nNo trash left behind\n--------------------\n\nAlpy cleans up after itself:\n\n- processes stopped with error codes and logs collected,\n- files, directories unmounted,\n- temporary files removed,\n- sockets closed,\n- interfaces removed...\n\n... reliably.\n\nNo root required\n----------------\n\nRun as a regular user.\n\nAPI documentation\n=================\n\nThe documentation is published on GitLab Pages of your GitLab project (if GitLab\nPages is enabled on your GitLab instance). For example, upstream project\ndocumentation lives at https://abogdanenko.gitlab.io/alpy.\n\nAlpy API documentation is generated using Sphinx__. To generate HTML API\ndocumentation locally, install `Sphinx package`__ and run the following\ncommand::\n\n   PYTHONPATH=. sphinx-build docs public\n\nTo view the generated documentation, open ``public/index.html`` in a browser.\n\n__ https://www.sphinx-doc.org/\n__ https://pypi.org/project/Sphinx/\n\nNetwork design\n==============\n\nThe appliance being tested is referred to as a *device under test* or *DUT*.\n\nThe DUT communicates with containers attached to each of its network links.\n\nGuest network adapters are connected to the host via tap devices (Figure 1)::\n\n   +-----QEMU hypervisor------+\n   |                          |   +-------------+\n   | +-----Guest OS-----+     |   |             |\n   | |                  |     |   |  docker     |\n   | | +--------------+ |     |   |  container  |\n   | | |              | |     |   |  network    |\n   | | |  NIC driver  | |     |   |  namespace  |\n   | | |              | |     |   |             |\n   | +------------------+     |   |   +-----+   |\n   |   |              |       |   |   |     |   |\n   |   | NIC hardware +---+-----------+ tap |   |\n   |   |              |   |   |   |   |     |   |\n   |   +--------------+   |   |   |   +-----+   |\n   |                      |   |   |             |\n   +--------------------------+   +-------------+\n                          |\n                          |\n                          v\n                    +-----------+\n                    |           |\n                    | pcap file |\n                    |           |\n                    +-----------+\n\n*Figure 1. Network link between QEMU guest and a docker container.*\n\nEach tap device lives in its network namespace. This namespace belongs to a\ndedicated container - a *node*. The node's purpose is to keep the namespace\nalive during the lifetime of a test.\n\nFor an application to be able to communicate with the DUT the application is\ncontainerized. The application container must be created in a special way: it\nmust share network namespace with one of the nodes.\n\nFigure 2 shows an example where application containers *app0* and *app1* share\nnetwork namespace with node container *node0*. Application container *app2*\nshares another network namespace with *node2*.\n\nThis sharing is supported by Docker. All we have to do is to create the\napplication container with the ``--network=container:NODE_NAME`` Docker option.\nFor example, if we want to send traffic to the DUT via its first link, we create\na traffic generator container with Docker option ``--network=container:node0``.\n\n::\n\n   +----QEMU---+   +------shared network namespace-----+\n   |           |   |                                   |\n   |           |   |    eth0                           |\n   |   +---+   |   |   +---+   +-----+ +----+ +----+   |\n   |   |NIC+-----------+tap|   |node0| |app0| |app1|   |\n   |   +---+   |   |   +---+   +-----+ +----+ +----+   |\n   |           |   |                                   |\n   |           |   +-----------------------------------+\n   |           |\n   |           |\n   |           |\n   |           |   +------shared network namespace-----+\n   |           |   |                                   |\n   |           |   |    eth0                           |\n   |   +---+   |   |   +---+   +-----+                 |\n   |   |NIC+-----------+tap|   |node1|                 |\n   |   +---+   |   |   +---+   +-----+                 |\n   |           |   |                                   |\n   |           |   +-----------------------------------+\n   |           |\n   |           |\n   |           |\n   |           |   +------shared network namespace-----+\n   |           |   |                                   |\n   |           |   |    eth0                           |\n   |   +---+   |   |   +---+   +-----+ +----+          |\n   |   |NIC+-----------+tap|   |node2| |app2|          |\n   |   +---+   |   |   +---+   +-----+ +----+          |\n   |           |   |                                   |\n   +-----------+   +-----------------------------------+\n\n*Figure 2. Application containers attached to the DUT links.*\n\nBuilding a network of nodes\n===========================\n\nNetwork configuration operations are performed by temporary one-off Docker\ncontainers by calling *ip* commands inside the containers.\n\nA distinction is made between a simplified version of the *ip* binary and the\nfull version. The simplified version is a busybox__ applet. The full version is\nshipped in the iproute2__ package.\n\n__ https://busybox.net/\n__ https://wiki.linuxfoundation.org/networking/iproute2\n\nHere is a list of features which alpy requires but which are missing from the\nsimplified version:\n\n1. Move a network interface to a different namespace (\"ip link set netns ...\")\n\n2. Create a tap interface (\"ip tuntap add mode tap ...\")\n\nThe image which contains the simplified version is called `busybox_image` while\nthe full image is called `iproute2_image`.\n\nThe images must be provided by the caller and must be present on the system. For\nexample, set::\n\n   busybox_image = \"busybox:latest\"\n   iproute2_image = \"debian:testing\"\n\n\nFAQ\n===\n\nHow do I watch serial console?\n------------------------------\n\nUse *tail*::\n\n   tail --follow name --retry console.log\n\nThe same command, but shorter::\n\n   tail -F console.log\n\nHow do I watch traffic on an interface?\n---------------------------------------\n\nUse tcpdump::\n\n   tail --bytes +0 --follow name --retry link0.pcap | tcpdump -n -r -\n\nThe same command, but shorter::\n\n   tail -Fc +0 link0.pcap | tcpdump -nr-\n\nCan I use Wireshark to watch traffic on an interface?\n-----------------------------------------------------\n\nYes, you can::\n\n   tail --bytes +0 --follow name --retry link0.pcap | wireshark -k -i -\n\nThe same command, but shorter::\n\n   tail -Fc +0 link0.pcap | wireshark -ki-\n\nHow do I debug my program?\n--------------------------\n\nUse `The Python Debugger <https://docs.python.org/3/library/pdb.html>`_.\n\nHow do I enter node network namespace?\n--------------------------------------\n\n#. Get node pid::\n\n      docker inspect --format '{{.State.Pid}}' node0\n\n#. Jump into node namespace using that pid::\n\n      nsenter --net --target \"$pid\"\n\nOne-liner::\n\n   nsenter --net --target \"$(docker inspect --format '{{.State.Pid}}' node0)\"\n\nA note about GitLab Container Registry\n======================================\n\nMany CI jobs use one of the custom images built on the \"build-docker-images\"\nstage. The images are stored in the GitLab Container Registry.\n\nThe images are pulled from locations specified by GitLab variables. By default,\nthe variables point to the registry of the current GitLab project.\n\nIf you forked this project and GitLab Container Registry is disabled in your\nproject, override the variables on a project level so that the images are pulled\nfrom some other registry.\n\nFor example, set ``IMAGE_ALPINE=registry.gitlab.com/abogdanenko/alpy/alpine``.\n\nRelated projects\n================\n\n- `Containernet <https://containernet.github.io/>`_\n\n- `Kathar\u00e1 <http://www.kathara.org/>`_\n\n- `Netkit <http://wiki.netkit.org/index.php/Main_Page>`_\n\n- `GNS3 <https://www.gns3.com/>`_\n\n- `Virtual Networks over linuX (VNX)\n  <http://web.dit.upm.es/vnxwiki/index.php/Main_Page>`_\n\n- `Pipework: Software-Defined Networking for Linux Containers\n  <https://github.com/jpetazzo/pipework>`_\n\n- `Eve-NG <https://www.eve-ng.net/>`_\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/abogdanenko/alpy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "alpy", "package_url": "https://pypi.org/project/alpy/", "platform": "", "project_url": "https://pypi.org/project/alpy/", "project_urls": {"Homepage": "https://gitlab.com/abogdanenko/alpy"}, "release_url": "https://pypi.org/project/alpy/1.0.0/", "requires_dist": ["docker", "pexpect", "qmp"], "requires_python": "", "summary": "Library for testing network virtual appliances using Docker", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Test network virtual appliance using Docker containers</em></p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#general-information\" id=\"id13\" rel=\"nofollow\">General information</a><ul>\n<li><a href=\"#the-project\" id=\"id14\" rel=\"nofollow\">The project</a></li>\n<li><a href=\"#author\" id=\"id15\" rel=\"nofollow\">Author</a></li>\n<li><a href=\"#license\" id=\"id16\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#description\" id=\"id17\" rel=\"nofollow\">Description</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" id=\"id18\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#features\" id=\"id19\" rel=\"nofollow\">Features</a><ul>\n<li><a href=\"#the-simplest-docker-to-qemu-networking-connection\" id=\"id20\" rel=\"nofollow\">The simplest docker to QEMU networking connection</a></li>\n<li><a href=\"#reliable-packet-capture\" id=\"id21\" rel=\"nofollow\">Reliable packet capture</a></li>\n<li><a href=\"#first-class-docker-container-support\" id=\"id22\" rel=\"nofollow\">First-class Docker container support</a></li>\n<li><a href=\"#logging\" id=\"id23\" rel=\"nofollow\">Logging</a></li>\n<li><a href=\"#no-trash-left-behind\" id=\"id24\" rel=\"nofollow\">No trash left behind</a></li>\n<li><a href=\"#no-root-required\" id=\"id25\" rel=\"nofollow\">No root required</a></li>\n</ul>\n</li>\n<li><a href=\"#api-documentation\" id=\"id26\" rel=\"nofollow\">API documentation</a></li>\n<li><a href=\"#network-design\" id=\"id27\" rel=\"nofollow\">Network design</a></li>\n<li><a href=\"#building-a-network-of-nodes\" id=\"id28\" rel=\"nofollow\">Building a network of nodes</a></li>\n<li><a href=\"#faq\" id=\"id29\" rel=\"nofollow\">FAQ</a><ul>\n<li><a href=\"#how-do-i-watch-serial-console\" id=\"id30\" rel=\"nofollow\">How do I watch serial console?</a></li>\n<li><a href=\"#how-do-i-watch-traffic-on-an-interface\" id=\"id31\" rel=\"nofollow\">How do I watch traffic on an interface?</a></li>\n<li><a href=\"#can-i-use-wireshark-to-watch-traffic-on-an-interface\" id=\"id32\" rel=\"nofollow\">Can I use Wireshark to watch traffic on an interface?</a></li>\n<li><a href=\"#how-do-i-debug-my-program\" id=\"id33\" rel=\"nofollow\">How do I debug my program?</a></li>\n<li><a href=\"#how-do-i-enter-node-network-namespace\" id=\"id34\" rel=\"nofollow\">How do I enter node network namespace?</a></li>\n</ul>\n</li>\n<li><a href=\"#a-note-about-gitlab-container-registry\" id=\"id35\" rel=\"nofollow\">A note about GitLab Container Registry</a></li>\n<li><a href=\"#related-projects\" id=\"id36\" rel=\"nofollow\">Related projects</a></li>\n</ul>\n</div>\n<div id=\"general-information\">\n<h2>General information</h2>\n<div id=\"the-project\">\n<h3>The project</h3>\n<p>This project is a Python library for testing network virtual appliances.</p>\n</div>\n<div id=\"author\">\n<h3>Author</h3>\n<p>Alexey Bogdanenko</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Alpy is licensed under <tt><span class=\"pre\">SPDX-License-Identifier:</span> <span class=\"pre\">GPL-3.0-or-later</span></tt>. See\n<tt>COPYING</tt> for more details.</p>\n</div>\n<div id=\"description\">\n<h3>Description</h3>\n<p>Alpy manages containers via <a href=\"https://github.com/docker/docker-py\" rel=\"nofollow\">Docker Python API</a>.</p>\n<p>Alpy interacts with <a href=\"https://www.qemu.org\" rel=\"nofollow\">QEMU</a> using Python API of the <a href=\"https://pypi.org/project/qmp/\" rel=\"nofollow\">QEMU Monitor Protocol</a>\n(QMP). QMP is a JSON-based protocol that allows applications to communicate with\na QEMU instance.</p>\n<p>Alpy gives user <a href=\"https://pexpect.readthedocs.io\" rel=\"nofollow\">Pexpect</a> object to interact with a serial console. The Pexpect\nobject is configured to log console input and output via the standard <a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\">logging\nmodule</a>.</p>\n<p>Alpy is packaged and deployed to PyPI. The <a href=\"https://pypi.org/project/alpy/\" rel=\"nofollow\">package</a> can be installed using\n<em>pip</em>.</p>\n<p>There are unit tests (<a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>) and integration tests in GitLab CI pipeline.\nAlpy is tested and works on the latest Ubuntu, the latest Ubuntu LTS release and\non <a href=\"https://alpinelinux.org/\" rel=\"nofollow\">Alpine Linux</a>.</p>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>The alpy library repository includes scripts and modules to build a simple\nappliance called Rabbit. Rabbit is Alpine Linux with a few packages\npre-installed. Having this simple DUT allows to demonstrate the library\nfeatures and capabilities. The tests verify a few features of the network\nappliance, for example:</p>\n<ul>\n<li>IPv4 routing (see <tt><span class=\"pre\">rabbit/tests/forward-ipv4/main.py</span></tt>)</li>\n<li>rate-limiting network traffic (see <tt><span class=\"pre\">rabbit/tests/rate-limit/main.py</span></tt>)</li>\n<li>load-balancing HTTP requests (see <tt><span class=\"pre\">rabbit/tests/load-balancing/main.py</span></tt>)</li>\n</ul>\n<p>The tests are executed automatically in the GitLab CI pipeline.</p>\n<p>Example network (test <em>rate-limit</em>):</p>\n<pre>+-------------------------------------+\n|                                     |\n|          Device under test          |\n|          rate limit = 1mbps         |\n+-------+--------------------+--------+\n        |                    |\n        |                    |\n        |                    |\n+-------+--------+   +-------+--------+\n|                |   |                |\n| 192.168.1.1/24 |   | 192.168.1.2/24 |\n|                |   |                |\n| node0          |   | node1          |\n| iperf3 client  |   | iperf3 server  |\n+----------------+   +----------------+\n</pre>\n<p>Example test output:</p>\n<pre>INFO     __main__               Test description: Check that rabbit rate-limits traffic.\nINFO     alpy.node              Create tap interfaces...\nINFO     alpy.node              Create tap interfaces... done\nINFO     alpy.qemu              Initialize QMP monitor...\nINFO     alpy.qemu              Initialize QMP monitor... done\nINFO     alpy.qemu              Start QEMU...\nINFO     alpy.qemu              Start QEMU... done\nINFO     alpy.qemu              Accept connection from QEMU to QMP monitor...\nINFO     alpy.qemu              Accept connection from QEMU to QMP monitor... done\nINFO     alpy.node              Create nodes...\nINFO     alpy.node              Create nodes... done\nINFO     alpy.console           Connect to console...\nINFO     alpy.console           Connect to console... done\nINFO     alpy.utils             Enter test environment\nINFO     __main__               Start iperf3 server on node 1...\nINFO     __main__               Start iperf3 server on node 1... done\nINFO     alpy.qemu              Start virtual CPU...\nINFO     alpy.qemu              Start virtual CPU... done\nINFO     alpine                 Wait for the system to boot...\nINFO     alpine                 Wait for the system to boot... done\nINFO     alpine                 Login to the system...\nINFO     alpine                 Login to the system... done\nINFO     alpy.remote_shell      Type in script configure-rabbit...\nINFO     alpy.remote_shell      Type in script configure-rabbit... done\nINFO     alpy.remote_shell      Run script configure-rabbit...\nINFO     alpy.remote_shell      Run script configure-rabbit... done\nINFO     __main__               Start iperf3 client on node 0...\nINFO     __main__               Measure rate...\nINFO     __main__               Measure rate... done\nINFO     __main__               Parse iperf3 report...\nINFO     __main__               Parse iperf3 report... done\nINFO     __main__               Start iperf3 client on node 0... done\nINFO     alpine                 Initiate system shutdown...\nINFO     alpine                 Initiate system shutdown... done\nINFO     alpy.qemu              Wait until the VM is powered down...\nINFO     alpy.qemu              Wait until the VM is powered down... done\nINFO     alpy.qemu              Wait until the VM is stopped...\nINFO     alpy.qemu              Wait until the VM is stopped... done\nINFO     __main__               Rate received, bits per second: 976321\nINFO     __main__               Check rate...\nINFO     __main__               Check rate... done\nINFO     alpy.utils             Exit test environment with success\nINFO     alpy.console           Close console...\nINFO     alpy.console           Close console... done\nINFO     alpy.qemu              Quit QEMU...\nINFO     alpy.qemu              Quit QEMU... done\nINFO     alpy.utils             Test passed\n</pre>\n<p>The tests for the Rabbit device share a lot of code so the code is organized as\na library. The library is called <em>carrot</em>.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<div id=\"the-simplest-docker-to-qemu-networking-connection\">\n<h3>The simplest docker to QEMU networking connection</h3>\n<p>Nothing in the middle. No bridges, no veth pairs, no NAT etc.</p>\n<p>Each layer 2 frame emitted is delivered unmodified, reliably.</p>\n</div>\n<div id=\"reliable-packet-capture\">\n<h3>Reliable packet capture</h3>\n<p>Each frame is captured reliably thanks to the QEMU <em>filter-dump</em> feature.</p>\n</div>\n<div id=\"first-class-docker-container-support\">\n<h3>First-class Docker container support</h3>\n<p>Alpy follows and encourages single process per container design.</p>\n</div>\n<div id=\"logging\">\n<h3>Logging</h3>\n<p>Test logs are easy to configure and customize. Alpy consistently uses Python\n<em>logging</em> module.</p>\n<p>Alpy collects serial console log in binary as well as text (escaped) form.</p>\n</div>\n<div id=\"no-trash-left-behind\">\n<h3>No trash left behind</h3>\n<p>Alpy cleans up after itself:</p>\n<ul>\n<li>processes stopped with error codes and logs collected,</li>\n<li>files, directories unmounted,</li>\n<li>temporary files removed,</li>\n<li>sockets closed,</li>\n<li>interfaces removed\u2026</li>\n</ul>\n<p>\u2026 reliably.</p>\n</div>\n<div id=\"no-root-required\">\n<h3>No root required</h3>\n<p>Run as a regular user.</p>\n</div>\n</div>\n<div id=\"api-documentation\">\n<h2>API documentation</h2>\n<p>The documentation is published on GitLab Pages of your GitLab project (if GitLab\nPages is enabled on your GitLab instance). For example, upstream project\ndocumentation lives at <a href=\"https://abogdanenko.gitlab.io/alpy\" rel=\"nofollow\">https://abogdanenko.gitlab.io/alpy</a>.</p>\n<p>Alpy API documentation is generated using <a href=\"https://www.sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a>. To generate HTML API\ndocumentation locally, install <a href=\"https://pypi.org/project/Sphinx/\" rel=\"nofollow\">Sphinx package</a> and run the following\ncommand:</p>\n<pre>PYTHONPATH=. sphinx-build docs public\n</pre>\n<p>To view the generated documentation, open <tt>public/index.html</tt> in a browser.</p>\n</div>\n<div id=\"network-design\">\n<h2>Network design</h2>\n<p>The appliance being tested is referred to as a <em>device under test</em> or <em>DUT</em>.</p>\n<p>The DUT communicates with containers attached to each of its network links.</p>\n<p>Guest network adapters are connected to the host via tap devices (Figure 1):</p>\n<pre>+-----QEMU hypervisor------+\n|                          |   +-------------+\n| +-----Guest OS-----+     |   |             |\n| |                  |     |   |  docker     |\n| | +--------------+ |     |   |  container  |\n| | |              | |     |   |  network    |\n| | |  NIC driver  | |     |   |  namespace  |\n| | |              | |     |   |             |\n| +------------------+     |   |   +-----+   |\n|   |              |       |   |   |     |   |\n|   | NIC hardware +---+-----------+ tap |   |\n|   |              |   |   |   |   |     |   |\n|   +--------------+   |   |   |   +-----+   |\n|                      |   |   |             |\n+--------------------------+   +-------------+\n                       |\n                       |\n                       v\n                 +-----------+\n                 |           |\n                 | pcap file |\n                 |           |\n                 +-----------+\n</pre>\n<p><em>Figure 1. Network link between QEMU guest and a docker container.</em></p>\n<p>Each tap device lives in its network namespace. This namespace belongs to a\ndedicated container - a <em>node</em>. The node\u2019s purpose is to keep the namespace\nalive during the lifetime of a test.</p>\n<p>For an application to be able to communicate with the DUT the application is\ncontainerized. The application container must be created in a special way: it\nmust share network namespace with one of the nodes.</p>\n<p>Figure 2 shows an example where application containers <em>app0</em> and <em>app1</em> share\nnetwork namespace with node container <em>node0</em>. Application container <em>app2</em>\nshares another network namespace with <em>node2</em>.</p>\n<p>This sharing is supported by Docker. All we have to do is to create the\napplication container with the <tt><span class=\"pre\">--network=container:NODE_NAME</span></tt> Docker option.\nFor example, if we want to send traffic to the DUT via its first link, we create\na traffic generator container with Docker option <tt><span class=\"pre\">--network=container:node0</span></tt>.</p>\n<pre>+----QEMU---+   +------shared network namespace-----+\n|           |   |                                   |\n|           |   |    eth0                           |\n|   +---+   |   |   +---+   +-----+ +----+ +----+   |\n|   |NIC+-----------+tap|   |node0| |app0| |app1|   |\n|   +---+   |   |   +---+   +-----+ +----+ +----+   |\n|           |   |                                   |\n|           |   +-----------------------------------+\n|           |\n|           |\n|           |\n|           |   +------shared network namespace-----+\n|           |   |                                   |\n|           |   |    eth0                           |\n|   +---+   |   |   +---+   +-----+                 |\n|   |NIC+-----------+tap|   |node1|                 |\n|   +---+   |   |   +---+   +-----+                 |\n|           |   |                                   |\n|           |   +-----------------------------------+\n|           |\n|           |\n|           |\n|           |   +------shared network namespace-----+\n|           |   |                                   |\n|           |   |    eth0                           |\n|   +---+   |   |   +---+   +-----+ +----+          |\n|   |NIC+-----------+tap|   |node2| |app2|          |\n|   +---+   |   |   +---+   +-----+ +----+          |\n|           |   |                                   |\n+-----------+   +-----------------------------------+\n</pre>\n<p><em>Figure 2. Application containers attached to the DUT links.</em></p>\n</div>\n<div id=\"building-a-network-of-nodes\">\n<h2>Building a network of nodes</h2>\n<p>Network configuration operations are performed by temporary one-off Docker\ncontainers by calling <em>ip</em> commands inside the containers.</p>\n<p>A distinction is made between a simplified version of the <em>ip</em> binary and the\nfull version. The simplified version is a <a href=\"https://busybox.net/\" rel=\"nofollow\">busybox</a> applet. The full version is\nshipped in the <a href=\"https://wiki.linuxfoundation.org/networking/iproute2\" rel=\"nofollow\">iproute2</a> package.</p>\n<p>Here is a list of features which alpy requires but which are missing from the\nsimplified version:</p>\n<ol>\n<li>Move a network interface to a different namespace (\u201cip link set netns \u2026\u201d)</li>\n<li>Create a tap interface (\u201cip tuntap add mode tap \u2026\u201d)</li>\n</ol>\n<p>The image which contains the simplified version is called <cite>busybox_image</cite> while\nthe full image is called <cite>iproute2_image</cite>.</p>\n<p>The images must be provided by the caller and must be present on the system. For\nexample, set:</p>\n<pre>busybox_image = \"busybox:latest\"\niproute2_image = \"debian:testing\"\n</pre>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<div id=\"how-do-i-watch-serial-console\">\n<h3>How do I watch serial console?</h3>\n<p>Use <em>tail</em>:</p>\n<pre>tail --follow name --retry console.log\n</pre>\n<p>The same command, but shorter:</p>\n<pre>tail -F console.log\n</pre>\n</div>\n<div id=\"how-do-i-watch-traffic-on-an-interface\">\n<h3>How do I watch traffic on an interface?</h3>\n<p>Use tcpdump:</p>\n<pre>tail --bytes +0 --follow name --retry link0.pcap | tcpdump -n -r -\n</pre>\n<p>The same command, but shorter:</p>\n<pre>tail -Fc +0 link0.pcap | tcpdump -nr-\n</pre>\n</div>\n<div id=\"can-i-use-wireshark-to-watch-traffic-on-an-interface\">\n<h3>Can I use Wireshark to watch traffic on an interface?</h3>\n<p>Yes, you can:</p>\n<pre>tail --bytes +0 --follow name --retry link0.pcap | wireshark -k -i -\n</pre>\n<p>The same command, but shorter:</p>\n<pre>tail -Fc +0 link0.pcap | wireshark -ki-\n</pre>\n</div>\n<div id=\"how-do-i-debug-my-program\">\n<h3>How do I debug my program?</h3>\n<p>Use <a href=\"https://docs.python.org/3/library/pdb.html\" rel=\"nofollow\">The Python Debugger</a>.</p>\n</div>\n<div id=\"how-do-i-enter-node-network-namespace\">\n<h3>How do I enter node network namespace?</h3>\n<ol>\n<li><p>Get node pid:</p>\n<pre>docker inspect --format '{{.State.Pid}}' node0\n</pre>\n</li>\n<li><p>Jump into node namespace using that pid:</p>\n<pre>nsenter --net --target \"$pid\"\n</pre>\n</li>\n</ol>\n<p>One-liner:</p>\n<pre>nsenter --net --target \"$(docker inspect --format '{{.State.Pid}}' node0)\"\n</pre>\n</div>\n</div>\n<div id=\"a-note-about-gitlab-container-registry\">\n<h2>A note about GitLab Container Registry</h2>\n<p>Many CI jobs use one of the custom images built on the \u201cbuild-docker-images\u201d\nstage. The images are stored in the GitLab Container Registry.</p>\n<p>The images are pulled from locations specified by GitLab variables. By default,\nthe variables point to the registry of the current GitLab project.</p>\n<p>If you forked this project and GitLab Container Registry is disabled in your\nproject, override the variables on a project level so that the images are pulled\nfrom some other registry.</p>\n<p>For example, set <tt>IMAGE_ALPINE=registry.gitlab.com/abogdanenko/alpy/alpine</tt>.</p>\n</div>\n<div id=\"related-projects\">\n<h2>Related projects</h2>\n<ul>\n<li><a href=\"https://containernet.github.io/\" rel=\"nofollow\">Containernet</a></li>\n<li><a href=\"http://www.kathara.org/\" rel=\"nofollow\">Kathar\u00e1</a></li>\n<li><a href=\"http://wiki.netkit.org/index.php/Main_Page\" rel=\"nofollow\">Netkit</a></li>\n<li><a href=\"https://www.gns3.com/\" rel=\"nofollow\">GNS3</a></li>\n<li><a href=\"http://web.dit.upm.es/vnxwiki/index.php/Main_Page\" rel=\"nofollow\">Virtual Networks over linuX (VNX)</a></li>\n<li><a href=\"https://github.com/jpetazzo/pipework\" rel=\"nofollow\">Pipework: Software-Defined Networking for Linux Containers</a></li>\n<li><a href=\"https://www.eve-ng.net/\" rel=\"nofollow\">Eve-NG</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6112727, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "e390a6cc971d6db1c7e954fe99446464", "sha256": "bca61fa2fa41a0615a47290fe017aadf55e6c8cd77e3310e664447881611bfc3"}, "downloads": -1, "filename": "alpy-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e390a6cc971d6db1c7e954fe99446464", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20802, "upload_time": "2019-04-07T18:47:04", "upload_time_iso_8601": "2019-04-07T18:47:04.222392Z", "url": "https://files.pythonhosted.org/packages/a3/46/48afb02e95ae4605fb4dfeab3b08fc4d5b9069d2dfb415c4d577e8b19733/alpy-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1f9f0dd2db77eab5e2155bce2821553", "sha256": "077cb938d550f9d0a396048bc7c907398733f5c4b4c25cbe98cc8fcdfc3a28f6"}, "downloads": -1, "filename": "alpy-0.10.0.tar.gz", "has_sig": false, "md5_digest": "d1f9f0dd2db77eab5e2155bce2821553", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6384, "upload_time": "2019-04-07T18:47:06", "upload_time_iso_8601": "2019-04-07T18:47:06.796647Z", "url": "https://files.pythonhosted.org/packages/9a/a3/4db400c9f750415375a776a56179b65c3bd8771a215fa8f301976eb2ccfe/alpy-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "a45a8903b19ca5c907e0d00122750267", "sha256": "5c23d78cd490891c8af2646f6c2925cd7de0caf96a6aa6880c1ab2b02a104307"}, "downloads": -1, "filename": "alpy-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a45a8903b19ca5c907e0d00122750267", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21869, "upload_time": "2019-04-14T18:11:09", "upload_time_iso_8601": "2019-04-14T18:11:09.757042Z", "url": "https://files.pythonhosted.org/packages/0e/eb/f04cbcf616304d264906978a51ad0f62f3deb25762aedfbadd5ad8ff0c0b/alpy-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ec36cac0fc8f8814b31571b17733087", "sha256": "473d172f1536ec835b5026cb9101b0271eaeff6f51b936988d416c28e48121fb"}, "downloads": -1, "filename": "alpy-0.11.0.tar.gz", "has_sig": false, "md5_digest": "7ec36cac0fc8f8814b31571b17733087", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8194, "upload_time": "2019-04-14T18:11:11", "upload_time_iso_8601": "2019-04-14T18:11:11.326737Z", "url": "https://files.pythonhosted.org/packages/83/0c/5bf8f6020083ff0bc089f3d72a1bb94fa6cc04f17e683f3fa42053ced848/alpy-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "7095ec712734b9da38da38c4908cf2e6", "sha256": "5848511d82df243235ddf7f374aba86ae81e3327d5b80204561568d75b4b7422"}, "downloads": -1, "filename": "alpy-0.12.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7095ec712734b9da38da38c4908cf2e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22275, "upload_time": "2019-04-21T18:34:18", "upload_time_iso_8601": "2019-04-21T18:34:18.947154Z", "url": "https://files.pythonhosted.org/packages/47/45/3eca25cb6c9228291b82ec236f4c45990745867165a2d60118e94ff61a12/alpy-0.12.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff15d6084616e5c9381f01e4774ad744", "sha256": "a6f7e70b09730cd7471b10de581476f173e4af96fa6a6dcb26b82facaa2b0f4d"}, "downloads": -1, "filename": "alpy-0.12.0.tar.gz", "has_sig": false, "md5_digest": "ff15d6084616e5c9381f01e4774ad744", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8531, "upload_time": "2019-04-21T18:34:20", "upload_time_iso_8601": "2019-04-21T18:34:20.305906Z", "url": "https://files.pythonhosted.org/packages/d0/d0/e0cbd0e3cc3c89127c67ba5b9a092d7f0536330457f3b95a5b6b40126916/alpy-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "5c0e6f0bf68c3cbac338d9e1ede4226d", "sha256": "aa77422b507d7274cf25839e3158868b7f44d2e9c05734d91bbc00ca7825be0d"}, "downloads": -1, "filename": "alpy-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c0e6f0bf68c3cbac338d9e1ede4226d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22936, "upload_time": "2019-05-02T17:08:53", "upload_time_iso_8601": "2019-05-02T17:08:53.584066Z", "url": "https://files.pythonhosted.org/packages/f6/68/0ca9b3fa3fef8f4363178002db05d0d831e95000db93aa5ac3a38081a5f8/alpy-0.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab2cd8fa0012807b104711dbfd88bd88", "sha256": "f8d974e3f6a3343e75804913cbb1e95408fac786cdc36b6908b0e7f0b78f50eb"}, "downloads": -1, "filename": "alpy-0.13.0.tar.gz", "has_sig": false, "md5_digest": "ab2cd8fa0012807b104711dbfd88bd88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9740, "upload_time": "2019-05-02T17:08:54", "upload_time_iso_8601": "2019-05-02T17:08:54.972947Z", "url": "https://files.pythonhosted.org/packages/cf/86/fc13d3c51128420d608e21f02dd45a0d5c1a8ba0c01b8df5c18eafce6bad/alpy-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "5b31c900a20546afba38d19ddde921ff", "sha256": "2484f723b9bcc08de54dbf9fc71b4bdd73bc1ec859f52b92b5fa1b7c7be182de"}, "downloads": -1, "filename": "alpy-0.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5b31c900a20546afba38d19ddde921ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22689, "upload_time": "2019-05-05T19:25:22", "upload_time_iso_8601": "2019-05-05T19:25:22.004190Z", "url": "https://files.pythonhosted.org/packages/8e/b1/eabde3c0de9f53724163bdaca70b84e3882cacff903f6b1ead8dd0430879/alpy-0.14.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "907ddd64a6227e9e4a35b4271c780d10", "sha256": "3414e9bcdd9309b5daab0c9f5e17019e4e4b91636450e2b2501d993765fb8998"}, "downloads": -1, "filename": "alpy-0.14.0.tar.gz", "has_sig": false, "md5_digest": "907ddd64a6227e9e4a35b4271c780d10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9578, "upload_time": "2019-05-05T19:25:23", "upload_time_iso_8601": "2019-05-05T19:25:23.384657Z", "url": "https://files.pythonhosted.org/packages/87/e4/ba534c08fcffaa18f070eda1b82a3c595d820b164c51dbdd9b347bf7c092/alpy-0.14.0.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "02e17e6b10934d0470ddaf4b72124c60", "sha256": "45881ec7ce3c2074eb31c7cde2055975bc674cfa299cdc3d2539ec24f38af0dc"}, "downloads": -1, "filename": "alpy-0.15.0-py3-none-any.whl", "has_sig": false, "md5_digest": "02e17e6b10934d0470ddaf4b72124c60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22952, "upload_time": "2019-05-11T17:21:51", "upload_time_iso_8601": "2019-05-11T17:21:51.941101Z", "url": "https://files.pythonhosted.org/packages/10/1a/a213880f086e54de1cb35f9ba2ecc215c6d0dd18bd3633e242fdba980e08/alpy-0.15.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10287e6c256999fbc70aab9da3425f2d", "sha256": "52eeb5f06a5473beaca6920ed03e92cbefbd912ba6c1a5492ebc0c94e736235e"}, "downloads": -1, "filename": "alpy-0.15.0.tar.gz", "has_sig": false, "md5_digest": "10287e6c256999fbc70aab9da3425f2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9615, "upload_time": "2019-05-11T17:21:53", "upload_time_iso_8601": "2019-05-11T17:21:53.366610Z", "url": "https://files.pythonhosted.org/packages/e9/51/4aa4fe7d7eb57721f0d4a04b14360704e22e8db6746b9ff6feeeb7331160/alpy-0.15.0.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "9a830d97856e8c06edc7de4252bb3653", "sha256": "f3388ea386ee7992f720d7346a6794315f4a835a3c32a084eadd995f16ec5198"}, "downloads": -1, "filename": "alpy-0.16.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9a830d97856e8c06edc7de4252bb3653", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23260, "upload_time": "2019-05-18T16:13:39", "upload_time_iso_8601": "2019-05-18T16:13:39.751240Z", "url": "https://files.pythonhosted.org/packages/62/ca/34a2713c6d1bd3b462e1b83a18bdc9eb2a91a28f921b254c5b445fcad723/alpy-0.16.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dda9050dabfa26943322e21e9fce0612", "sha256": "6e987ce6c0351a16a0e30c83119029c1081a34899354eea784fecf966b2b2022"}, "downloads": -1, "filename": "alpy-0.16.0.tar.gz", "has_sig": false, "md5_digest": "dda9050dabfa26943322e21e9fce0612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10252, "upload_time": "2019-05-18T16:13:41", "upload_time_iso_8601": "2019-05-18T16:13:41.202653Z", "url": "https://files.pythonhosted.org/packages/cf/0e/aeb4d26c560878c4a7c1930e6148c36bf6c9ae1773f39d96afcf55a12ba2/alpy-0.16.0.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "441f3c7309fe34399e1b000b532390fb", "sha256": "811287d70128f1147ed7f636182a9b722b6d4c42b7914b3b25457eecee985622"}, "downloads": -1, "filename": "alpy-0.17.0-py3-none-any.whl", "has_sig": false, "md5_digest": "441f3c7309fe34399e1b000b532390fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23673, "upload_time": "2019-06-01T16:13:01", "upload_time_iso_8601": "2019-06-01T16:13:01.858934Z", "url": "https://files.pythonhosted.org/packages/b3/cf/7721b0440b14a53d99fa4cb00344d45830be86715d4cae642130f2d3311b/alpy-0.17.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19555122b6c4047a21fe81128f3c68df", "sha256": "8d0e28605696e0a59294eaf1c71526923f83ae6e0995a082537cc87788090365"}, "downloads": -1, "filename": "alpy-0.17.0.tar.gz", "has_sig": false, "md5_digest": "19555122b6c4047a21fe81128f3c68df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10466, "upload_time": "2019-06-01T16:13:03", "upload_time_iso_8601": "2019-06-01T16:13:03.478423Z", "url": "https://files.pythonhosted.org/packages/9e/cf/c5442feaadc4f95bb11c3e005ec5b6efa2083cf85b428112a623c239835a/alpy-0.17.0.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "1853fb87af9308c72610ecac226c001f", "sha256": "8d78e3735c5c12534e163f2af6368d3440f526d0f0693edc6e4ea462bbcc4528"}, "downloads": -1, "filename": "alpy-0.18.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1853fb87af9308c72610ecac226c001f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24089, "upload_time": "2019-06-16T18:42:27", "upload_time_iso_8601": "2019-06-16T18:42:27.693734Z", "url": "https://files.pythonhosted.org/packages/a5/10/f4eb9369482de98d3be35255bcb06d41eec40ae6d68a1d79c2643349538c/alpy-0.18.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9a68c08fb7dc4b0eb613ce0d91c7b39", "sha256": "3ab480d970712fce0f1ccd32c9a260c185a803737975609bf11a08014b242ead"}, "downloads": -1, "filename": "alpy-0.18.0.tar.gz", "has_sig": false, "md5_digest": "e9a68c08fb7dc4b0eb613ce0d91c7b39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10763, "upload_time": "2019-06-16T18:42:29", "upload_time_iso_8601": "2019-06-16T18:42:29.619878Z", "url": "https://files.pythonhosted.org/packages/2b/67/9fd36aeadbb004f9737eb161e20b54705045931e0bf3b5c1d64bb7dba40e/alpy-0.18.0.tar.gz", "yanked": false}], "0.19.0": [{"comment_text": "", "digests": {"md5": "282fe7e5a4eeb0f420ba2da1e37eb06a", "sha256": "f6209348b7a9acc16f12d2fd21d6622f59896a92ae545a7f2bc44e67386711e5"}, "downloads": -1, "filename": "alpy-0.19.0-py3-none-any.whl", "has_sig": false, "md5_digest": "282fe7e5a4eeb0f420ba2da1e37eb06a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23541, "upload_time": "2019-06-23T15:42:58", "upload_time_iso_8601": "2019-06-23T15:42:58.219339Z", "url": "https://files.pythonhosted.org/packages/cf/f0/9944a969684a2bf92dbdf827192146b2eaeb2734c04798a238245ec4e807/alpy-0.19.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4b3d6a96ae7bc2cab1f37e3b4792ec3", "sha256": "d00bdb8a1b795822e9419fa139fbbee63558901a7591f8ba8ecc25aac8b5118e"}, "downloads": -1, "filename": "alpy-0.19.0.tar.gz", "has_sig": false, "md5_digest": "a4b3d6a96ae7bc2cab1f37e3b4792ec3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10283, "upload_time": "2019-06-23T15:42:59", "upload_time_iso_8601": "2019-06-23T15:42:59.394742Z", "url": "https://files.pythonhosted.org/packages/e8/d8/362605b6a6a3406f0131fcf4928584d5e0f8a2a970758b82daca8a0d7f80/alpy-0.19.0.tar.gz", "yanked": false}], "0.20.0": [{"comment_text": "", "digests": {"md5": "35b884aa84f086bbceb1f15329614c5b", "sha256": "edf46aa74534d1e8b219bb363c1bac21b423dee7b2fe24355e33c4ce102212d3"}, "downloads": -1, "filename": "alpy-0.20.0-py3-none-any.whl", "has_sig": false, "md5_digest": "35b884aa84f086bbceb1f15329614c5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23366, "upload_time": "2019-07-06T18:35:30", "upload_time_iso_8601": "2019-07-06T18:35:30.986062Z", "url": "https://files.pythonhosted.org/packages/87/f2/b18b4fe4f0613b8f73c4991279ac9c95432813b8f8346bd0504597e8fcef/alpy-0.20.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "608e0f06b971cb2023f5588336f7323a", "sha256": "a9a909fff83c5983094cb22d7c28f0b43c4b8cf14ba185774ac2632717bbddec"}, "downloads": -1, "filename": "alpy-0.20.0.tar.gz", "has_sig": false, "md5_digest": "608e0f06b971cb2023f5588336f7323a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10289, "upload_time": "2019-07-06T18:35:32", "upload_time_iso_8601": "2019-07-06T18:35:32.367978Z", "url": "https://files.pythonhosted.org/packages/c6/f4/250087ef3dffb61e5fe02120c0298d265abb79110c042c4053aaba633b47/alpy-0.20.0.tar.gz", "yanked": false}], "0.21.0": [{"comment_text": "", "digests": {"md5": "d17ef9fdf5c7872aecc499cd00f075cc", "sha256": "a8671fa0615fa36636ebbc896e5d53902585c6f2feaa8e8656f91f73bb433e7f"}, "downloads": -1, "filename": "alpy-0.21.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d17ef9fdf5c7872aecc499cd00f075cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23389, "upload_time": "2019-07-13T13:01:58", "upload_time_iso_8601": "2019-07-13T13:01:58.634833Z", "url": "https://files.pythonhosted.org/packages/df/6e/23467dc292d573c3d32ab36fd1ac72d1b160397af428521bde8282ba8289/alpy-0.21.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38a599857ac35dce9fafd20354800614", "sha256": "138889912cb5a3bf0cceebedd9556361d63e036bdca65992f1dfbc7522d06cce"}, "downloads": -1, "filename": "alpy-0.21.0.tar.gz", "has_sig": false, "md5_digest": "38a599857ac35dce9fafd20354800614", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10310, "upload_time": "2019-07-13T13:02:00", "upload_time_iso_8601": "2019-07-13T13:02:00.291319Z", "url": "https://files.pythonhosted.org/packages/7d/b0/7723fb7eb27c64e79065cd306940a8ed2f746f341fcde4624b49cc920b7b/alpy-0.21.0.tar.gz", "yanked": false}], "0.22.0": [{"comment_text": "", "digests": {"md5": "08520ae0be36dd5eeaa820b55a9d917f", "sha256": "3b561ddd629d38405845811c70efca8f8db7c08730fc51c92b6892014166e605"}, "downloads": -1, "filename": "alpy-0.22.0-py3-none-any.whl", "has_sig": false, "md5_digest": "08520ae0be36dd5eeaa820b55a9d917f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23395, "upload_time": "2019-07-21T11:07:07", "upload_time_iso_8601": "2019-07-21T11:07:07.706244Z", "url": "https://files.pythonhosted.org/packages/5d/c6/8646fb73f297b99d2dc664a5159c2be99a17e802972a2b565a830a361242/alpy-0.22.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5b621f0597aa9822a07083fb8580849", "sha256": "be63995646e6dbac48adb8dca322d37496a6718f68d60aded39f7e9a41195905"}, "downloads": -1, "filename": "alpy-0.22.0.tar.gz", "has_sig": false, "md5_digest": "c5b621f0597aa9822a07083fb8580849", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10314, "upload_time": "2019-07-21T11:07:09", "upload_time_iso_8601": "2019-07-21T11:07:09.202634Z", "url": "https://files.pythonhosted.org/packages/ed/0e/3cd5f6f1392bc3209a60183d14cd4f15dcf522b1ea82e7c6ba66e107e519/alpy-0.22.0.tar.gz", "yanked": false}], "0.23.0": [{"comment_text": "", "digests": {"md5": "0d1472d14684589bb06cf6b1a17f22d1", "sha256": "c34615775a218b1cd126ced3e5ee437238d8931047fe6ee408ea0542ae08c551"}, "downloads": -1, "filename": "alpy-0.23.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0d1472d14684589bb06cf6b1a17f22d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24800, "upload_time": "2019-10-20T10:27:13", "upload_time_iso_8601": "2019-10-20T10:27:13.724104Z", "url": "https://files.pythonhosted.org/packages/f9/14/08110e82844de1481700f1e1b1e6b398935950063e1035e985038e7ea4d2/alpy-0.23.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebb9e2c02f19d9a26ce3fb7dc02f5289", "sha256": "11d535ca717f701d99527483acbf5660618d9165901e75d814611c95ea715e72"}, "downloads": -1, "filename": "alpy-0.23.0.tar.gz", "has_sig": false, "md5_digest": "ebb9e2c02f19d9a26ce3fb7dc02f5289", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13935, "upload_time": "2019-10-20T10:27:15", "upload_time_iso_8601": "2019-10-20T10:27:15.836924Z", "url": "https://files.pythonhosted.org/packages/0a/02/5077b6a0e2eaa3f6b7135c8d6df2abf417cf17e753a3f1a5a713ed5f2bf6/alpy-0.23.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "498a19f24172ad18928dd09859785c91", "sha256": "c174d3ccd0901550175714df1742e561f224e0c65f357456dca17187ee142cb3"}, "downloads": -1, "filename": "alpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "498a19f24172ad18928dd09859785c91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32809, "upload_time": "2019-11-10T19:35:26", "upload_time_iso_8601": "2019-11-10T19:35:26.208723Z", "url": "https://files.pythonhosted.org/packages/6f/76/f37731702c0adee9549c2561d68f001ff4bf8ee04d00b57bdf5f0aa10a1a/alpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8e332d1d908498997a62c199c7a6c41", "sha256": "54c674eeaa0dcb9703f292883828d2a3d7d12546af77780df6b1dbc07a625dd8"}, "downloads": -1, "filename": "alpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e8e332d1d908498997a62c199c7a6c41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22388, "upload_time": "2019-11-10T19:35:27", "upload_time_iso_8601": "2019-11-10T19:35:27.973058Z", "url": "https://files.pythonhosted.org/packages/c6/f8/00f611dd6f4135df3159373e08db459330b4e5de1d51d1a697bca756258b/alpy-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "498a19f24172ad18928dd09859785c91", "sha256": "c174d3ccd0901550175714df1742e561f224e0c65f357456dca17187ee142cb3"}, "downloads": -1, "filename": "alpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "498a19f24172ad18928dd09859785c91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32809, "upload_time": "2019-11-10T19:35:26", "upload_time_iso_8601": "2019-11-10T19:35:26.208723Z", "url": "https://files.pythonhosted.org/packages/6f/76/f37731702c0adee9549c2561d68f001ff4bf8ee04d00b57bdf5f0aa10a1a/alpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8e332d1d908498997a62c199c7a6c41", "sha256": "54c674eeaa0dcb9703f292883828d2a3d7d12546af77780df6b1dbc07a625dd8"}, "downloads": -1, "filename": "alpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e8e332d1d908498997a62c199c7a6c41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22388, "upload_time": "2019-11-10T19:35:27", "upload_time_iso_8601": "2019-11-10T19:35:27.973058Z", "url": "https://files.pythonhosted.org/packages/c6/f8/00f611dd6f4135df3159373e08db459330b4e5de1d51d1a697bca756258b/alpy-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:28 2020"}