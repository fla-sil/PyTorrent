{"info": {"author": "Yifan He", "author_email": "he.yifan.xs@alumni.tsukuba.ac.jp", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<h1>\n<p align=\"center\"># PyBenchFCN #</p>\n<p align=\"center\">A python implementation of optimization benchmarks</p>\n</h1>\n\n<p align=\"center\">\n<img src=\"./image/f51_3D.png\" width=300><img src=\"./image/f51_2D.png\" width=300></p>\n<p align=\"center\"><img src=\"./image/f58_2D.png\" width=300><img src=\"./image/f58_3D.png\" width=300></p>\n\n- [How to Install](#how-to-install)\n- [How to Use](#how-to-use)\n  - [Set Benchmark Function](#set-benchmark-function)\n  - [Plot Fitness Landscape](#plot-fitness-landscape)\n- [List of Functions](#list-of-functions)\n  - [Classical Single-Objective Optimization](#classical-single-objective-optimization)\n  - [Discrete Optimization](#discrete-optimization)\n  - [Multi-Objective Optimization](#multi-objective-optimization)\n  - [Real-World Optimization](#real-world-optimization)\n- [Authors](#authors)\n- [License](#license)\n- [Acknowledgement](#acknowledgement)\n\n## How to Install\n\nThis library is a python implementation for the MatLab package [BenchmarkFcns Toolbox](http://benchmarkfcns.xyz/).\n\nYou can simply install with command ```pip install PyBenchFCN```.\n- Pre-request: ```numpy```, ```matplotlib```\n\n## How to Use\n\nThe input of each numerical optimization problem could be a 1-D ndarray, or 2-D ndarray.\n- **1-D array**\n  - an example of **a solution (individual)** for 10D problem is ```np.random.uniform(0, 1, 10)```, where each entry is a decision variable.\n  - <u>use ```f()``` to return a fitness value (scalar for SOP, 1D-array for MOP).</u>\n- **2-D array**\n  - an example of **group of solutions (population)** for 10D problem is ```np.random.uniform(0, 1, (5, 10))```, where each row (totally 5) is an individual.\n  - <u>use ```F()``` to return an array of fitness value (1-D array for SOP, 2-D array for MOP).</u>\n\n### Set Benchmark Function\n\nTo set a benchmark function, one may see the sample code in ```Factory.py``` in the [repository](https://github.com/Y1fanHE/PyBenchFCN), or follow the script below. Also, there is a sample optimization program provided in ```sample.py```.\n\n```python3\nimport numpy as np\n\n# import single objective problems from PyBenchFCN\nfrom PyBenchFCN import SingleObjectiveProblem as SOP\n\nn_var = 10                                      # dimension of problem\nn_pop = 3                                       # size of population\n\nproblem = SOP.ackleyfcn(n_var)                  # Ackley problem\n\n'''same function as the code above\nfrom PyBenchFCN import Factory\nproblem = Factory.set_sop(\"f1\", n_var)\n'''\n\nprint( np.round(problem.optimalF, 5) )          # show rounded optimal value\n\nxl, xu = problem.boundaries                     # bound of problem\n\nx = np.random.uniform(xl, xu, n_var)            # initialize a solution\nprint( problem.f(x) )                           # show fitness value as scalar\n\nX = np.random.uniform( xl, xu, (n_pop, n_var) ) # initialize a population\nprint( problem.F(X) )                           # show fitness values as 1d-array\n```\n\n### Plot Fitness Landscape\n\nTo plot a fitness landscape (2D space), one can use the code below. **Notice, this function only works for continuous SOPs.**\n\n```python3\nfrom PyBenchFCN import Tool\nTool.plot_sop(\"sphere\", mode=\"save\")            # plot and save landscape of Sphere function\nTool.plot_sop(\"schwefel\", plot_type=\"contour\")  # plot contour plot of Schwefel function\n```\n\n## List of Functions\n\n### Classical Single-Objective Optimization\n\nTotally, [61 single-objective functions](./SingleObjectiveProblem.md) are implemented. The plot of 2D versions of 59 problems are provided. Please check the homepage of [BenchmarkFcns Toolbox](http://benchmarkfcns.xyz/) or [this website](https://www.sfu.ca/~ssurjano/optimization.html) for the further documentation.\n\n### Discrete Optimization\n\n*Under development ...*\n\n### Multi-Objective Optimization\n\n*Under development ...*\n\n### Real-World Optimization\n\n*Under development ...*\n\n## Authors\n\n[Yifan He](https://y1fanhe.github.io) @ Dept. of CS, UTsukuba\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](./LICENSE) file for details.\n\n## Acknowledgement\n\nPyBenchFCN is maintained by [Yifan He](https://y1fanhe.github.io). The author of this repostory is very grateful to Mr. Mazhar Ansari Ardeh, who implemented the MatLab package BenchFCNs Toolbox.\n\n- If you find any mistakes, please report at a new issue.\n- If you want to help me implement more benchmarks (discrete optimization, multi-objective optimization), please contact at [he.yifan.xs@alumni.tsukuba.ac.jp](mailto:he.yifan.xs@alumni.tsukuba.ac.jp).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Y1fanHE/PyBenchFCN", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "PyBenchFCN", "package_url": "https://pypi.org/project/PyBenchFCN/", "platform": "", "project_url": "https://pypi.org/project/PyBenchFCN/", "project_urls": {"Homepage": "https://github.com/Y1fanHE/PyBenchFCN"}, "release_url": "https://pypi.org/project/PyBenchFCN/1.0.3/", "requires_dist": ["numpy", "matplotlib"], "requires_python": ">=3.6", "summary": "A python implementation of optimization benchmarks", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\n</h1><p align=\"center\"># PyBenchFCN #</p>\n<p align=\"center\">A python implementation of optimization benchmarks</p>\n\n<p align=\"center\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/828cd13a04cb4a484891762d9e588df57a9416c4/2e2f696d6167652f6635315f33442e706e67\" width=\"300\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52dcd9e259afa6d01ba985ad944fcbf74b68457d/2e2f696d6167652f6635315f32442e706e67\" width=\"300\"></p>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b4c90fe099c4ecc7008de4c708ff8b49f6f31b1/2e2f696d6167652f6635385f32442e706e67\" width=\"300\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf7a1603fe8ddc14df829624654c6141c8624bf6/2e2f696d6167652f6635385f33442e706e67\" width=\"300\"></p>\n<ul>\n<li><a href=\"#how-to-install\" rel=\"nofollow\">How to Install</a></li>\n<li><a href=\"#how-to-use\" rel=\"nofollow\">How to Use</a>\n<ul>\n<li><a href=\"#set-benchmark-function\" rel=\"nofollow\">Set Benchmark Function</a></li>\n<li><a href=\"#plot-fitness-landscape\" rel=\"nofollow\">Plot Fitness Landscape</a></li>\n</ul>\n</li>\n<li><a href=\"#list-of-functions\" rel=\"nofollow\">List of Functions</a>\n<ul>\n<li><a href=\"#classical-single-objective-optimization\" rel=\"nofollow\">Classical Single-Objective Optimization</a></li>\n<li><a href=\"#discrete-optimization\" rel=\"nofollow\">Discrete Optimization</a></li>\n<li><a href=\"#multi-objective-optimization\" rel=\"nofollow\">Multi-Objective Optimization</a></li>\n<li><a href=\"#real-world-optimization\" rel=\"nofollow\">Real-World Optimization</a></li>\n</ul>\n</li>\n<li><a href=\"#authors\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#acknowledgement\" rel=\"nofollow\">Acknowledgement</a></li>\n</ul>\n<h2>How to Install</h2>\n<p>This library is a python implementation for the MatLab package <a href=\"http://benchmarkfcns.xyz/\" rel=\"nofollow\">BenchmarkFcns Toolbox</a>.</p>\n<p>You can simply install with command <code>pip install PyBenchFCN</code>.</p>\n<ul>\n<li>Pre-request: <code>numpy</code>, <code>matplotlib</code></li>\n</ul>\n<h2>How to Use</h2>\n<p>The input of each numerical optimization problem could be a 1-D ndarray, or 2-D ndarray.</p>\n<ul>\n<li><strong>1-D array</strong>\n<ul>\n<li>an example of <strong>a solution (individual)</strong> for 10D problem is <code>np.random.uniform(0, 1, 10)</code>, where each entry is a decision variable.</li>\n<li>&lt;u&gt;use <code>f()</code> to return a fitness value (scalar for SOP, 1D-array for MOP).&lt;/u&gt;</li>\n</ul>\n</li>\n<li><strong>2-D array</strong>\n<ul>\n<li>an example of <strong>group of solutions (population)</strong> for 10D problem is <code>np.random.uniform(0, 1, (5, 10))</code>, where each row (totally 5) is an individual.</li>\n<li>&lt;u&gt;use <code>F()</code> to return an array of fitness value (1-D array for SOP, 2-D array for MOP).&lt;/u&gt;</li>\n</ul>\n</li>\n</ul>\n<h3>Set Benchmark Function</h3>\n<p>To set a benchmark function, one may see the sample code in <code>Factory.py</code> in the <a href=\"https://github.com/Y1fanHE/PyBenchFCN\" rel=\"nofollow\">repository</a>, or follow the script below. Also, there is a sample optimization program provided in <code>sample.py</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># import single objective problems from PyBenchFCN</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PyBenchFCN</span> <span class=\"kn\">import</span> <span class=\"n\">SingleObjectiveProblem</span> <span class=\"k\">as</span> <span class=\"n\">SOP</span>\n\n<span class=\"n\">n_var</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>                                      <span class=\"c1\"># dimension of problem</span>\n<span class=\"n\">n_pop</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>                                       <span class=\"c1\"># size of population</span>\n\n<span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">SOP</span><span class=\"o\">.</span><span class=\"n\">ackleyfcn</span><span class=\"p\">(</span><span class=\"n\">n_var</span><span class=\"p\">)</span>                  <span class=\"c1\"># Ackley problem</span>\n\n<span class=\"sd\">'''same function as the code above</span>\n<span class=\"sd\">from PyBenchFCN import Factory</span>\n<span class=\"sd\">problem = Factory.set_sop(\"f1\", n_var)</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">optimalF</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">)</span>          <span class=\"c1\"># show rounded optimal value</span>\n\n<span class=\"n\">xl</span><span class=\"p\">,</span> <span class=\"n\">xu</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">boundaries</span>                     <span class=\"c1\"># bound of problem</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">xl</span><span class=\"p\">,</span> <span class=\"n\">xu</span><span class=\"p\">,</span> <span class=\"n\">n_var</span><span class=\"p\">)</span>            <span class=\"c1\"># initialize a solution</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">)</span>                           <span class=\"c1\"># show fitness value as scalar</span>\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span> <span class=\"n\">xl</span><span class=\"p\">,</span> <span class=\"n\">xu</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">n_pop</span><span class=\"p\">,</span> <span class=\"n\">n_var</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"c1\"># initialize a population</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"p\">)</span>                           <span class=\"c1\"># show fitness values as 1d-array</span>\n</pre>\n<h3>Plot Fitness Landscape</h3>\n<p>To plot a fitness landscape (2D space), one can use the code below. <strong>Notice, this function only works for continuous SOPs.</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyBenchFCN</span> <span class=\"kn\">import</span> <span class=\"n\">Tool</span>\n<span class=\"n\">Tool</span><span class=\"o\">.</span><span class=\"n\">plot_sop</span><span class=\"p\">(</span><span class=\"s2\">\"sphere\"</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"save\"</span><span class=\"p\">)</span>            <span class=\"c1\"># plot and save landscape of Sphere function</span>\n<span class=\"n\">Tool</span><span class=\"o\">.</span><span class=\"n\">plot_sop</span><span class=\"p\">(</span><span class=\"s2\">\"schwefel\"</span><span class=\"p\">,</span> <span class=\"n\">plot_type</span><span class=\"o\">=</span><span class=\"s2\">\"contour\"</span><span class=\"p\">)</span>  <span class=\"c1\"># plot contour plot of Schwefel function</span>\n</pre>\n<h2>List of Functions</h2>\n<h3>Classical Single-Objective Optimization</h3>\n<p>Totally, <a href=\"./SingleObjectiveProblem.md\" rel=\"nofollow\">61 single-objective functions</a> are implemented. The plot of 2D versions of 59 problems are provided. Please check the homepage of <a href=\"http://benchmarkfcns.xyz/\" rel=\"nofollow\">BenchmarkFcns Toolbox</a> or <a href=\"https://www.sfu.ca/%7Essurjano/optimization.html\" rel=\"nofollow\">this website</a> for the further documentation.</p>\n<h3>Discrete Optimization</h3>\n<p><em>Under development ...</em></p>\n<h3>Multi-Objective Optimization</h3>\n<p><em>Under development ...</em></p>\n<h3>Real-World Optimization</h3>\n<p><em>Under development ...</em></p>\n<h2>Authors</h2>\n<p><a href=\"https://y1fanhe.github.io\" rel=\"nofollow\">Yifan He</a> @ Dept. of CS, UTsukuba</p>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"./LICENSE\" rel=\"nofollow\">LICENSE</a> file for details.</p>\n<h2>Acknowledgement</h2>\n<p>PyBenchFCN is maintained by <a href=\"https://y1fanhe.github.io\" rel=\"nofollow\">Yifan He</a>. The author of this repostory is very grateful to Mr. Mazhar Ansari Ardeh, who implemented the MatLab package BenchFCNs Toolbox.</p>\n<ul>\n<li>If you find any mistakes, please report at a new issue.</li>\n<li>If you want to help me implement more benchmarks (discrete optimization, multi-objective optimization), please contact at <a href=\"mailto:he.yifan.xs@alumni.tsukuba.ac.jp\">he.yifan.xs@alumni.tsukuba.ac.jp</a>.</li>\n</ul>\n\n          </div>"}, "last_serial": 7151974, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "c597f2f561bbe6f8cced84518519e49b", "sha256": "b64b08d3b71c459d1cdc0cd4d2ca4c12ddd0e0132eb19721e0dcf293adb04097"}, "downloads": -1, "filename": "PyBenchFCN-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c597f2f561bbe6f8cced84518519e49b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10505, "upload_time": "2020-04-29T18:09:54", "upload_time_iso_8601": "2020-04-29T18:09:54.686895Z", "url": "https://files.pythonhosted.org/packages/bd/12/7c5f4fcd3d686532bfb15e1fc0a7c73b19c8f569f97cdab10635a7eb319b/PyBenchFCN-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fab0c0b3549dfdb8c31ebcc79e42d73e", "sha256": "c41f55ebd32417fb0ea6716eabf39f502ea24003b1b0f113dc7bb5dbd4d10b4f"}, "downloads": -1, "filename": "PyBenchFCN-0.0.2.tar.gz", "has_sig": false, "md5_digest": "fab0c0b3549dfdb8c31ebcc79e42d73e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10193, "upload_time": "2020-04-29T18:09:56", "upload_time_iso_8601": "2020-04-29T18:09:56.753941Z", "url": "https://files.pythonhosted.org/packages/2c/c3/5535bf807e7d009b009203039590591ad3a3914aecbd306dceeadf21c694/PyBenchFCN-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c4fa2ff8fbe6dc8b4c1535fad89001e5", "sha256": "f02785223b5871297b2c1f0e073518635a2f1533c3083a096b3998b6244d7d7a"}, "downloads": -1, "filename": "PyBenchFCN-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c4fa2ff8fbe6dc8b4c1535fad89001e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12267, "upload_time": "2020-04-30T03:17:02", "upload_time_iso_8601": "2020-04-30T03:17:02.465568Z", "url": "https://files.pythonhosted.org/packages/c1/b5/8e2ec6bfd72ea2c30e23ccf26cc2a76be6b76ca228fb0c1c4a21c0169882/PyBenchFCN-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d2bed823e5775d5412316ad6b3cfbf5", "sha256": "fa4af34ab49eecfaabdefee2b52b78e136055b0897db2e4a2015fdd9bbbda274"}, "downloads": -1, "filename": "PyBenchFCN-0.0.3.tar.gz", "has_sig": false, "md5_digest": "0d2bed823e5775d5412316ad6b3cfbf5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12326, "upload_time": "2020-04-30T03:17:03", "upload_time_iso_8601": "2020-04-30T03:17:03.696978Z", "url": "https://files.pythonhosted.org/packages/63/be/1c7060848b8dbe35406aa673b5dc38bdca8315a7929d7353d00df6c4c97a/PyBenchFCN-0.0.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "ce48d35bba4cf778d63bc116f2843856", "sha256": "bc9cc7007fbc764e35efa4c18c72130fc6ce5c1cc47908aa56b1396a89f23b3c"}, "downloads": -1, "filename": "PyBenchFCN-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ce48d35bba4cf778d63bc116f2843856", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13444, "upload_time": "2020-04-30T03:49:15", "upload_time_iso_8601": "2020-04-30T03:49:15.798373Z", "url": "https://files.pythonhosted.org/packages/6e/cc/ebac197acd9f1b40733efd6229edd51cb31065f9149d31aea2aacdfa53bb/PyBenchFCN-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6089d96160746637252bb0f033c5f2c", "sha256": "237aa379ca5c8a908948d7466790da96811728079aad8752b9b6020ad71b9744"}, "downloads": -1, "filename": "PyBenchFCN-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c6089d96160746637252bb0f033c5f2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13304, "upload_time": "2020-04-30T03:49:17", "upload_time_iso_8601": "2020-04-30T03:49:17.027437Z", "url": "https://files.pythonhosted.org/packages/ff/a2/9e545e5d73c092d8ba431ebb3f55fcd79354822df45579ae60004e33ecf8/PyBenchFCN-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "72de157970595ff05c50aad1c4c91579", "sha256": "27cb835f133122fc659e88dec1c6ff98641bc869ce53ba8c09dfe45d59403da9"}, "downloads": -1, "filename": "PyBenchFCN-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "72de157970595ff05c50aad1c4c91579", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15275, "upload_time": "2020-04-30T11:26:07", "upload_time_iso_8601": "2020-04-30T11:26:07.286391Z", "url": "https://files.pythonhosted.org/packages/0c/81/51885f51c5c59865319382bb461f1f4501cf74ee8c173f4d42161ab90671/PyBenchFCN-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c63a653c7da48cc333b42194dd99371", "sha256": "c29deac3866cf897f2b7531d01abaa11fd0f3398ce2b68b9fcc38f6d1e991256"}, "downloads": -1, "filename": "PyBenchFCN-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2c63a653c7da48cc333b42194dd99371", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16091, "upload_time": "2020-04-30T11:26:08", "upload_time_iso_8601": "2020-04-30T11:26:08.932958Z", "url": "https://files.pythonhosted.org/packages/cf/9f/62f0b0347d9f63b70484f1cc0b3050349e8deeeb66755cb85e3c4461a7ae/PyBenchFCN-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ddd794b030232164e3cbe530a0cce871", "sha256": "0692eaf6e198b6950e36719ef01e47058780bee8e04d0011bb9e617a97bc6b1e"}, "downloads": -1, "filename": "PyBenchFCN-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ddd794b030232164e3cbe530a0cce871", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15081, "upload_time": "2020-05-02T14:50:48", "upload_time_iso_8601": "2020-05-02T14:50:48.070037Z", "url": "https://files.pythonhosted.org/packages/e0/3e/d48a536516b9337dabb2ef2e66276a62410cebd0ada16394192ee86821f3/PyBenchFCN-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd13675e1e7e3135705ac7429987fce5", "sha256": "0317cc5652d8d10903a6eda7dc2af929b82cca76c91a974602a7238e72eecc2b"}, "downloads": -1, "filename": "PyBenchFCN-1.0.2.tar.gz", "has_sig": false, "md5_digest": "bd13675e1e7e3135705ac7429987fce5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15559, "upload_time": "2020-05-02T14:50:49", "upload_time_iso_8601": "2020-05-02T14:50:49.535131Z", "url": "https://files.pythonhosted.org/packages/f0/2a/9ac5ca32004c1d0e5f962923b4e75eb9e38283c5ca572a017dc29e09dc5b/PyBenchFCN-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b31d40595072bcf69a9e286ebe5fc867", "sha256": "940e7d3b23f91ca96a830a1eb62c22542ffb9d381daa55798d2bccd94604eaa0"}, "downloads": -1, "filename": "PyBenchFCN-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b31d40595072bcf69a9e286ebe5fc867", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15083, "upload_time": "2020-05-02T15:21:59", "upload_time_iso_8601": "2020-05-02T15:21:59.028134Z", "url": "https://files.pythonhosted.org/packages/c1/ba/12fc6e710774428b0aa7f5043d5b1e4bd2664e4c8a992d2dd92556a5cacc/PyBenchFCN-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d0158d876715c3948467599d1dd5711", "sha256": "d10fc0fec9f9c342c859b06c61369610e32fdfe6eeb7853159be3df71ce27b0c"}, "downloads": -1, "filename": "PyBenchFCN-1.0.3.tar.gz", "has_sig": false, "md5_digest": "4d0158d876715c3948467599d1dd5711", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15541, "upload_time": "2020-05-02T15:22:01", "upload_time_iso_8601": "2020-05-02T15:22:01.215630Z", "url": "https://files.pythonhosted.org/packages/a2/80/290a159344b3b38ea4c160e6eb9ba9e3893c475eef100bb2be8b45ce1908/PyBenchFCN-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b31d40595072bcf69a9e286ebe5fc867", "sha256": "940e7d3b23f91ca96a830a1eb62c22542ffb9d381daa55798d2bccd94604eaa0"}, "downloads": -1, "filename": "PyBenchFCN-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b31d40595072bcf69a9e286ebe5fc867", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15083, "upload_time": "2020-05-02T15:21:59", "upload_time_iso_8601": "2020-05-02T15:21:59.028134Z", "url": "https://files.pythonhosted.org/packages/c1/ba/12fc6e710774428b0aa7f5043d5b1e4bd2664e4c8a992d2dd92556a5cacc/PyBenchFCN-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d0158d876715c3948467599d1dd5711", "sha256": "d10fc0fec9f9c342c859b06c61369610e32fdfe6eeb7853159be3df71ce27b0c"}, "downloads": -1, "filename": "PyBenchFCN-1.0.3.tar.gz", "has_sig": false, "md5_digest": "4d0158d876715c3948467599d1dd5711", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15541, "upload_time": "2020-05-02T15:22:01", "upload_time_iso_8601": "2020-05-02T15:22:01.215630Z", "url": "https://files.pythonhosted.org/packages/a2/80/290a159344b3b38ea4c160e6eb9ba9e3893c475eef100bb2be8b45ce1908/PyBenchFCN-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:17 2020"}