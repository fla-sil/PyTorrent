{"info": {"author": "Claudio Giovanni Mattera", "author_email": "claudio@mattera.it", "bugtrack_url": null, "classifiers": [], "description": "Stanley Python Library (PyStanley)\n===========\n\nAn open-source Python 3 library for interfacing to [Stanley] time-series database.\nIt uses the [asyncio] framework and it returns [pandas] data-frames and time-series.\n\nhttps://gitlab.com/claudiomattera/pystanley/\n\nhttps://gitlab.com/claudiomattera/stanley/\n\nCopyright Claudio Mattera 2019\n\nYou are free to copy, modify, and distribute PyStanley with attribution under the terms of the MIT license. See the `License.txt` file for details.\n\nThis library originated from a similar library for interfacing to sMAP servers, developed at the Center for Energy Informatics and also available under the MIT license at <https://sdu-cfei.github.io/cfei-smap/>.\nNote that pystanley is neither developed nor anyway endorsed by the Center of Energy Informatics.\n\n\nFeatures\n----\n\n*   **Fetching historical data**.\n    The user specifies a time interval and a list of paths, and the library returns all related time-series.\n\n    The user can also request a single time-series.\n    In that case, all resulting time-series will be intertwined to generate a single one.\n    This is useful when time-series are split in multiple streams.\n\n*   **Subscribing to real-time data**.\n    The user specifies a list of paths and a callback, and the library will call the callback whenever a new reading is available.\n\n    Since the library supports IO concurrency, the application can perform other operations, while waiting for new data.\n\n*   **Posting data**.\n    The users specifies a set of readings and a path.\n\n*   **Concurrent requests**.\n    The user can instantiate multiple concurrent requests to the Stanley archiver, the library (or, better, the asyncio framework) will execute them in parallel.\n\n    A parameter defines how many concurrent requests to execute (default: 10) to not overload the archiver.\n    Any further request will be transparently enqueued and executed as soon as a slot is free.\n\n*   **Local caching**.\n    Readings can be cached on the local machine.\n    The library can detect when the requested time interval (or larger) is available locally.\n    This saves execution time, network traffic and server load.\n    If the cache does not correspond to the requested paths, it is invalidated and data is automatically fetched from the server.\n\n    *Note*: the library cannot detect when readings are replaced/added on the server.\n    Cache should be used only for immutable historical data, not for data that can change.\n\n*   **Command line tool**.\n    The tool can be used to quickly plot single time-series data, or to export them to CSV files.\n\n\nInstallation\n----\n\nThe library can be installed using `pip`:\n\n    pip install pystanley\n\nIn alternative, the library is also available as three different packages listed in the *tags* section:\n\n-   Debian package, usable on Debian/Ubuntu and derivatives (anything that uses `apt`/`apt-get`).\n    Install it with the following command (possibly prepended with `sudo`).\n\n        dpkg -i /path/to/python3-pystanley_1.0.0-1_all.deb\n\n-   Python wheel package, usable on Windows and almost every system with a Python 3 distribution.\n    Install it with the following command (possibly prepended with `sudo`, or passing the `--user` option).\n\n        pip3 install /path/to/pystanley-1.0.0-py3-none-any.whl\n\n-   Tarball source package.\n    It can be used by maintainers to generate a custom package.\n\n\nUsage\n----\n\n### General Instructions\n\nThis library uses the [asyncio] framework, and returns [pandas] data-frames and time-series.\n\nMost of the features are available as member functions of objects implementing `StanleyInterface`.\nClients should first create one of the concrete classes, e.g., `StanleyAiohttpInterface`, and then call its methods.\n\n~~~~python\nfrom pystanley import StanleyAiohttpInterface\n\n...\n\nstanley = StanleyAiohttpInterface(\"https://hostname.com:8443\")\n\nawait stanley.fetch_readings(...)\n~~~~\n\n\n### Important Note about Timezones\n\nWhenever using time-series data, proper care should be taken to correctly store and represent timezones.\nUnfortunately, many tools lack support for timezones, and many users assume localtime is good enough.\nThis often results in issues when sharing time-series with other persons, or storing them in databases.\nIt also causes problems at daylight saving time changes, when the time offset of a timezone changes.\nTherefore, this library enforces using timezone-aware datetimes.\nWhenever a date is expected, it *must* be a timezone-aware datetime object in UTC, otherwise an exception will be generated.\n\nThis could make things more complicate and cumbersome when users are interested in localtime dynamics, such as occupancy behaviour or price trends, because they have to manually convert to and from UTC.\nAn example on how to convert back and forth from UTC is included in :ref:`timezones`.\n\n\n### Fetching Data\n\nTo fetch data from Stanley, the caller must specify the interval as a pair of `datetime` objects and a list of paths.\n\n~~~~python\nfrom datetime import datetime\n\nimport pytz\n\nfrom pystanley import StanleyAiohttpInterface\n\n\nasync def main():\n    stanley = StanleyAiohttpInterface(\"https://hostname.com:8443\")\n\n    start = pytz.UTC.localize(datetime(2018, 1, 1, 10, 15))\n    end = pytz.UTC.localize(datetime(2018, 1, 8, 4, 5))\n\n    paths = [\n        \"/some/path\",\n        \"/some/other/path\",\n    ]\n\n    readings_by_path = await stanley.fetch_readings(start, end, paths)\n\n    # It returns a dict[Path, pd.Series]\n\n    readings = await stanley.fetch_readings_intertwined(start, end, paths)\n\n    # It returns a single pd.Series obtained by intertwining all the results\n~~~~\n\n#### Note\n\nIf there are readings at `start` and `end` instants, the returned time-series will be defined on the *closed* interval [`start`, `end`].\nOtherwise, which is a more common scenario, the returned time-series will be defined on the *open* interval ]`start`, `end`[.\n\n\n### Posting Data\n\nUsers can post data (a sequence of readings, i.e., timestamp, value pairs) to any number of time-series.\n\n~~~~python\nfrom datetime import datetime\n\nimport pandas as pd\n\nfrom pystanley import StanleyAiohttpInterface\n\nasync def main():\n    series = pd.Series(...)\n    path = \"/some/path\"\n\n    await stanley.post_readings({\n        path: series\n    })\n~~~~\n\n\n### Subscribing to real-time data\n\nUsers can subscribe to Stanley, and be notified of every new available reading.\n\n~~~~python\nfrom pystanley import StanleyAiohttpInterface\n\n\nasync def callback(path, series):\n    for timestamp, value in series.iteritems():\n        print(\"{}: {}\".format(timestamp, value))\n\n\nasync def main():\n    stanley = StanleyAiohttpInterface(\"https://hostname.com:8443\")\n\n    paths = [\n        \"/some/path\",\n        \"/some/other/path\",\n    ]\n\n    await stanley.subscribe(paths, callback)\n~~~~\n\n\n### Enabling Local Cache\n\nPass `cache=True` to the `StanleyInterface` constructor to enable local cache.\n\n~~~~python\nfrom pystanley import StanleyAiohttpInterface\n\n\nasync def main():\n    stanley = StanleyAiohttpInterface(\"https://hostname.com:8443\", cache=True)\n\n    # The first time data are fetched from server and cached locally.\n    await stanley.fetch_readings(start, end, paths)\n\n    # The second time they are loaded from local cache.\n    await stanley.fetch_readings(start, end, paths)\n\n    # This interval is strictly contained in the previous one, so data can\n    # still be loaded from local cache.\n    await stanley.fetch_readings(\n        start + timedelta(days=3),\n        end - timedelta(days=2),\n        paths\n    )\n\n    # This interval is *NOT* strictly contained in the previous one, cache\n    # will be invalidated and data will be fetched from server.\n    await stanley.fetch_readings(\n        start - timedelta(days=3),\n        end,\n        paths\n    )\n~~~~\n\n\n### Note about *asyncio*\n\nThis library uses the *asyncio* framework.\nThis means that all functions and methods are actually coroutines, and they need to be called accordingly.\nThe caller can retrieve the event loop, and explicitly execute a coroutine\n\n~~~~python\nimport asyncio\n\nloop = asyncio.get_event_loop()\n\nresult = loop.run_until_complete(\n    stanley.method(arguments)\n)\n~~~~\n\nOtherwise, if the caller is itself a coroutine, it can use the corresponding syntax in Pyhton 3.5+\n\n~~~~python\nasync def external_coroutine():\n    result = await stanley.method(arguments)\n~~~~\n\n\nCommand Line Utility\n----\n\nThis library includes a command line utility named `pystanley`, which can be used to retrieve and plot data from a Stanley archiver.\n\n~~~~text\nusage: pystanley [-h] [-v] --url URL [--ca-cert CA_CERT] [--plot]\n                 [--plot-markers] [--csv] [--start DATETIME]\n                 [--end DATETIME]\n                 PATH [PATH ...]\n\nFetch data from Stanley\n\npositional arguments:\n  PATH               Time-series path\n\noptional arguments:\n  -h, --help         show this help message and exit\n  -v, --verbose      increase output\n  --url URL          Stanley archiver URL\n  --ca-cert CA_CERT  Custom certification authority certificate\n  --plot             plot results\n  --plot-markers     show plot markers\n  --csv              print results to stdout in CSV format\n  --start DATETIME   initial time (default: 24h ago)\n  --end DATETIME     final time (default: now)\n~~~~\n\nFor instance, to export a single time-series to CSV file:\n\n~~~~bash\npystanley -vv --url https://localhost.localdomain:8443/ \\\n    \"/some/path\" \"/some/other/path\" --start 2018-01-17T00:00:00Z \\\n    --csv > output.csv\n~~~~\n\n\n[Stanley]: https://gitlab.com/claudiomattera/stanley/\n\n[asyncio]: https://docs.python.org/3/library/asyncio.html\n\n[pandas]: https://pandas.pydata.org/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/claudiomattera/pystanley/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pystanley", "package_url": "https://pypi.org/project/pystanley/", "platform": "", "project_url": "https://pypi.org/project/pystanley/", "project_urls": {"Homepage": "https://gitlab.com/claudiomattera/pystanley/"}, "release_url": "https://pypi.org/project/pystanley/0.1.0/", "requires_dist": ["pandas", "aiohttp", "websockets", "appdirs", "jsonschema", "iso8601", "matplotlib ; extra == 'plot'"], "requires_python": "", "summary": "Interface to Stanley time-series database", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Stanley Python Library (PyStanley)</h1>\n<p>An open-source Python 3 library for interfacing to <a href=\"https://gitlab.com/claudiomattera/stanley/\" rel=\"nofollow\">Stanley</a> time-series database.\nIt uses the <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a> framework and it returns <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas</a> data-frames and time-series.</p>\n<p><a href=\"https://gitlab.com/claudiomattera/pystanley/\" rel=\"nofollow\">https://gitlab.com/claudiomattera/pystanley/</a></p>\n<p><a href=\"https://gitlab.com/claudiomattera/stanley/\" rel=\"nofollow\">https://gitlab.com/claudiomattera/stanley/</a></p>\n<p>Copyright Claudio Mattera 2019</p>\n<p>You are free to copy, modify, and distribute PyStanley with attribution under the terms of the MIT license. See the <code>License.txt</code> file for details.</p>\n<p>This library originated from a similar library for interfacing to sMAP servers, developed at the Center for Energy Informatics and also available under the MIT license at <a href=\"https://sdu-cfei.github.io/cfei-smap/\" rel=\"nofollow\">https://sdu-cfei.github.io/cfei-smap/</a>.\nNote that pystanley is neither developed nor anyway endorsed by the Center of Energy Informatics.</p>\n<h2>Features</h2>\n<ul>\n<li>\n<p><strong>Fetching historical data</strong>.\nThe user specifies a time interval and a list of paths, and the library returns all related time-series.</p>\n<p>The user can also request a single time-series.\nIn that case, all resulting time-series will be intertwined to generate a single one.\nThis is useful when time-series are split in multiple streams.</p>\n</li>\n<li>\n<p><strong>Subscribing to real-time data</strong>.\nThe user specifies a list of paths and a callback, and the library will call the callback whenever a new reading is available.</p>\n<p>Since the library supports IO concurrency, the application can perform other operations, while waiting for new data.</p>\n</li>\n<li>\n<p><strong>Posting data</strong>.\nThe users specifies a set of readings and a path.</p>\n</li>\n<li>\n<p><strong>Concurrent requests</strong>.\nThe user can instantiate multiple concurrent requests to the Stanley archiver, the library (or, better, the asyncio framework) will execute them in parallel.</p>\n<p>A parameter defines how many concurrent requests to execute (default: 10) to not overload the archiver.\nAny further request will be transparently enqueued and executed as soon as a slot is free.</p>\n</li>\n<li>\n<p><strong>Local caching</strong>.\nReadings can be cached on the local machine.\nThe library can detect when the requested time interval (or larger) is available locally.\nThis saves execution time, network traffic and server load.\nIf the cache does not correspond to the requested paths, it is invalidated and data is automatically fetched from the server.</p>\n<p><em>Note</em>: the library cannot detect when readings are replaced/added on the server.\nCache should be used only for immutable historical data, not for data that can change.</p>\n</li>\n<li>\n<p><strong>Command line tool</strong>.\nThe tool can be used to quickly plot single time-series data, or to export them to CSV files.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>The library can be installed using <code>pip</code>:</p>\n<pre><code>pip install pystanley\n</code></pre>\n<p>In alternative, the library is also available as three different packages listed in the <em>tags</em> section:</p>\n<ul>\n<li>\n<p>Debian package, usable on Debian/Ubuntu and derivatives (anything that uses <code>apt</code>/<code>apt-get</code>).\nInstall it with the following command (possibly prepended with <code>sudo</code>).</p>\n<pre><code>dpkg -i /path/to/python3-pystanley_1.0.0-1_all.deb\n</code></pre>\n</li>\n<li>\n<p>Python wheel package, usable on Windows and almost every system with a Python 3 distribution.\nInstall it with the following command (possibly prepended with <code>sudo</code>, or passing the <code>--user</code> option).</p>\n<pre><code>pip3 install /path/to/pystanley-1.0.0-py3-none-any.whl\n</code></pre>\n</li>\n<li>\n<p>Tarball source package.\nIt can be used by maintainers to generate a custom package.</p>\n</li>\n</ul>\n<h2>Usage</h2>\n<h3>General Instructions</h3>\n<p>This library uses the <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a> framework, and returns <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas</a> data-frames and time-series.</p>\n<p>Most of the features are available as member functions of objects implementing <code>StanleyInterface</code>.\nClients should first create one of the concrete classes, e.g., <code>StanleyAiohttpInterface</code>, and then call its methods.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pystanley</span> <span class=\"kn\">import</span> <span class=\"n\">StanleyAiohttpInterface</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">stanley</span> <span class=\"o\">=</span> <span class=\"n\">StanleyAiohttpInterface</span><span class=\"p\">(</span><span class=\"s2\">\"https://hostname.com:8443\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">fetch_readings</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h3>Important Note about Timezones</h3>\n<p>Whenever using time-series data, proper care should be taken to correctly store and represent timezones.\nUnfortunately, many tools lack support for timezones, and many users assume localtime is good enough.\nThis often results in issues when sharing time-series with other persons, or storing them in databases.\nIt also causes problems at daylight saving time changes, when the time offset of a timezone changes.\nTherefore, this library enforces using timezone-aware datetimes.\nWhenever a date is expected, it <em>must</em> be a timezone-aware datetime object in UTC, otherwise an exception will be generated.</p>\n<p>This could make things more complicate and cumbersome when users are interested in localtime dynamics, such as occupancy behaviour or price trends, because they have to manually convert to and from UTC.\nAn example on how to convert back and forth from UTC is included in :ref:<code>timezones</code>.</p>\n<h3>Fetching Data</h3>\n<p>To fetch data from Stanley, the caller must specify the interval as a pair of <code>datetime</code> objects and a list of paths.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pytz</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pystanley</span> <span class=\"kn\">import</span> <span class=\"n\">StanleyAiohttpInterface</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">stanley</span> <span class=\"o\">=</span> <span class=\"n\">StanleyAiohttpInterface</span><span class=\"p\">(</span><span class=\"s2\">\"https://hostname.com:8443\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">UTC</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n    <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">UTC</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n\n    <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"/some/path\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"/some/other/path\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">readings_by_path</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">fetch_readings</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">paths</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># It returns a dict[Path, pd.Series]</span>\n\n    <span class=\"n\">readings</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">fetch_readings_intertwined</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">paths</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># It returns a single pd.Series obtained by intertwining all the results</span>\n</pre>\n<h4>Note</h4>\n<p>If there are readings at <code>start</code> and <code>end</code> instants, the returned time-series will be defined on the <em>closed</em> interval [<code>start</code>, <code>end</code>].\nOtherwise, which is a more common scenario, the returned time-series will be defined on the <em>open</em> interval ]<code>start</code>, <code>end</code>[.</p>\n<h3>Posting Data</h3>\n<p>Users can post data (a sequence of readings, i.e., timestamp, value pairs) to any number of time-series.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pystanley</span> <span class=\"kn\">import</span> <span class=\"n\">StanleyAiohttpInterface</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s2\">\"/some/path\"</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">post_readings</span><span class=\"p\">({</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">series</span>\n    <span class=\"p\">})</span>\n</pre>\n<h3>Subscribing to real-time data</h3>\n<p>Users can subscribe to Stanley, and be notified of every new available reading.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pystanley</span> <span class=\"kn\">import</span> <span class=\"n\">StanleyAiohttpInterface</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">series</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">timestamp</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">timestamp</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">stanley</span> <span class=\"o\">=</span> <span class=\"n\">StanleyAiohttpInterface</span><span class=\"p\">(</span><span class=\"s2\">\"https://hostname.com:8443\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"/some/path\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"/some/other/path\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span>\n</pre>\n<h3>Enabling Local Cache</h3>\n<p>Pass <code>cache=True</code> to the <code>StanleyInterface</code> constructor to enable local cache.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pystanley</span> <span class=\"kn\">import</span> <span class=\"n\">StanleyAiohttpInterface</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">stanley</span> <span class=\"o\">=</span> <span class=\"n\">StanleyAiohttpInterface</span><span class=\"p\">(</span><span class=\"s2\">\"https://hostname.com:8443\"</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The first time data are fetched from server and cached locally.</span>\n    <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">fetch_readings</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">paths</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The second time they are loaded from local cache.</span>\n    <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">fetch_readings</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">paths</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># This interval is strictly contained in the previous one, so data can</span>\n    <span class=\"c1\"># still be loaded from local cache.</span>\n    <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">fetch_readings</span><span class=\"p\">(</span>\n        <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n        <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n        <span class=\"n\">paths</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># This interval is *NOT* strictly contained in the previous one, cache</span>\n    <span class=\"c1\"># will be invalidated and data will be fetched from server.</span>\n    <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">fetch_readings</span><span class=\"p\">(</span>\n        <span class=\"n\">start</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n        <span class=\"n\">end</span><span class=\"p\">,</span>\n        <span class=\"n\">paths</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>Note about <em>asyncio</em></h3>\n<p>This library uses the <em>asyncio</em> framework.\nThis means that all functions and methods are actually coroutines, and they need to be called accordingly.\nThe caller can retrieve the event loop, and explicitly execute a coroutine</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span>\n    <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Otherwise, if the caller is itself a coroutine, it can use the corresponding syntax in Pyhton 3.5+</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">external_coroutine</span><span class=\"p\">():</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">stanley</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">)</span>\n</pre>\n<h2>Command Line Utility</h2>\n<p>This library includes a command line utility named <code>pystanley</code>, which can be used to retrieve and plot data from a Stanley archiver.</p>\n<pre>usage: pystanley [-h] [-v] --url URL [--ca-cert CA_CERT] [--plot]\n                 [--plot-markers] [--csv] [--start DATETIME]\n                 [--end DATETIME]\n                 PATH [PATH ...]\n\nFetch data from Stanley\n\npositional arguments:\n  PATH               Time-series path\n\noptional arguments:\n  -h, --help         show this help message and exit\n  -v, --verbose      increase output\n  --url URL          Stanley archiver URL\n  --ca-cert CA_CERT  Custom certification authority certificate\n  --plot             plot results\n  --plot-markers     show plot markers\n  --csv              print results to stdout in CSV format\n  --start DATETIME   initial time (default: 24h ago)\n  --end DATETIME     final time (default: now)\n</pre>\n<p>For instance, to export a single time-series to CSV file:</p>\n<pre>pystanley -vv --url https://localhost.localdomain:8443/ <span class=\"se\">\\</span>\n    <span class=\"s2\">\"/some/path\"</span> <span class=\"s2\">\"/some/other/path\"</span> --start <span class=\"m\">2018</span>-01-17T00:00:00Z <span class=\"se\">\\</span>\n    --csv &gt; output.csv\n</pre>\n\n          </div>"}, "last_serial": 6149870, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "807f76ae13d066f42a4cacaeecd35eec", "sha256": "38a0fc1288f940a660c3e2fe6b145c702c38f8dc8ab11dc3ef782f5b3630bb1e"}, "downloads": -1, "filename": "pystanley-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "807f76ae13d066f42a4cacaeecd35eec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16530, "upload_time": "2019-11-17T09:16:48", "upload_time_iso_8601": "2019-11-17T09:16:48.155452Z", "url": "https://files.pythonhosted.org/packages/cc/05/ce894b61b39f807de7aa64f8cba0c280d6feea0f486ef004c36db0b0485b/pystanley-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "628c275fcf189d027edc37e07812d63c", "sha256": "a2f6e641e5debefa6db821f8e4b58805263e17caa66ced9b693810895f009fb1"}, "downloads": -1, "filename": "pystanley-0.1.0.tar.gz", "has_sig": false, "md5_digest": "628c275fcf189d027edc37e07812d63c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13650, "upload_time": "2019-11-17T09:16:50", "upload_time_iso_8601": "2019-11-17T09:16:50.933774Z", "url": "https://files.pythonhosted.org/packages/14/30/598e56a436f3702e3457209fe8126334568ca87ef8a4307fdea9edf998fb/pystanley-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "807f76ae13d066f42a4cacaeecd35eec", "sha256": "38a0fc1288f940a660c3e2fe6b145c702c38f8dc8ab11dc3ef782f5b3630bb1e"}, "downloads": -1, "filename": "pystanley-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "807f76ae13d066f42a4cacaeecd35eec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16530, "upload_time": "2019-11-17T09:16:48", "upload_time_iso_8601": "2019-11-17T09:16:48.155452Z", "url": "https://files.pythonhosted.org/packages/cc/05/ce894b61b39f807de7aa64f8cba0c280d6feea0f486ef004c36db0b0485b/pystanley-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "628c275fcf189d027edc37e07812d63c", "sha256": "a2f6e641e5debefa6db821f8e4b58805263e17caa66ced9b693810895f009fb1"}, "downloads": -1, "filename": "pystanley-0.1.0.tar.gz", "has_sig": false, "md5_digest": "628c275fcf189d027edc37e07812d63c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13650, "upload_time": "2019-11-17T09:16:50", "upload_time_iso_8601": "2019-11-17T09:16:50.933774Z", "url": "https://files.pythonhosted.org/packages/14/30/598e56a436f3702e3457209fe8126334568ca87ef8a4307fdea9edf998fb/pystanley-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:02 2020"}