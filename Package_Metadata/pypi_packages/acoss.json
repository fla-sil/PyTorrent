{"info": {"author": "Albin Correya, Furkan Yesiler, Chris Traile, Philip Tovstogan, and Diego Silva", "author_email": "albin.correya@upf.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Affero General Public License v3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Multimedia :: Sound/Audio :: Analysis"], "description": "# acoss: Audio Cover Song Suite\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/acoss.svg)](https://pypi.python.org/pypi/acoss/)\n[![Build Status](https://travis-ci.org/furkanyesiler/acoss.svg?branch=master)](https://travis-ci.org/furkanyesiler/acoss)\n[![License: AGPL v3](https://img.shields.io/badge/License-AGPL%20v3-blue.svg)](https://www.gnu.org/licenses/agpl-3.0)\n\n[acoss: Audio Cover Song Suite](https://github.com/furkanyesiler/acoss) is a feature extraction and benchmarking frameworks for the \ncover song identification (CSI) tasks. This tool has been developed along with the new [DA-TACOS](https://mtg.github.io/da-tacos) dataset. \n\n\n`acoss` includes a standard feature extraction framework with state-of-art audio features for CSI task and open source implementations of seven state-of-the-art CSI algorithms to facilitate the future work in this\nline of research. Using this framework, researchers can easily compare existing algorithms on different datasets,\nand we encourage all CSI researchers to incorporate their\nalgorithms into this framework which can easily done following the usage examples. \n\nPlease site our paper if you use this tool in your resarch.\n\n> [Furkan Yesiler, Chris Tralie, Albin Correya, Diego F. Silva, Philip Tovstogan, Emilia G\u00f3mez, and Xavier Serra. Da-TACOS: A Dataset for Cover Song Identification and Understanding. In 20th International Society for Music Information Retrieval Conference (ISMIR 2019), Delft, The Netherlands, 2019.](https://repositori.upf.edu/bitstream/handle/10230/42771/yesiler_ismir19_datacos.pdf?sequence=1&isAllowed=y)\n\n\nBenchmarking results on [Da-Tacos](https://mtg.github.io/da-tacos) dataset can be found in the paper.\n\n## Setup & Installation\n\nWe recommend you to install the package inside a python [virtualenv](https://docs.python.org/3/tutorial/venv.html). \n\n\n#### Install using pip \n\n```bash\npip install acoss\n```\n\nOR\n\n#### Install from source (recommended)\n\n- Clone or download the repo.\n- Install `acoss` package by using the following command inside the directory.\n```bash\npython3 setup.py install\n```\n\n\n#### Additional dependencies\n\n`acoss` requires a local installation of madmom library for computing some audio features and essentia library for similarity algorithms. \n\nFor linux-based distro users,\n```\npip install \"acoss[extra-deps]\"\n```\n\nor if you are a Mac OSX user, \n\nyou can install madmom from pip\n```\npip install madmom\n```\n\nyou can install `essentia` from homebrew \n```\nbrew tap MTG/essentia\nbrew install essentia --HEAD\n```\n\n## Documentation and examples\n\n[`acoss`](/) mainly provides the following python sub-modules-\n\n- `acoss.algorithms`: Sub-module with various cover identification algorithms, utilities for similarity comparison and an template for adding new algorithms. \n\n- `acoss.coverid`: Interface to benchmark a specific cover identification algorithms.\n\n- `acoss.features`: Sub-module with implementation of various audio features.\n\n- `acoss.extractors` : Interface to do efficient batch audio feature extraction for an audio dataset.\n\n- `acoss.utils` : Utility functions used in acoss package.\n\n### [`acoss.coverid.benchmark`]()\n\n| Cover Song Identification algorithms in `acoss`  |  |    \n|---|---|\n|  `Serra09`  | [Paper](https://iopscience.iop.org/article/10.1088/1367-2630/11/9/093017)  | \n|  `LateFusionChen`  | [Paper](https://link.springer.com/article/10.1186/s13636-017-0108-2)  | \n|  `EarlyFusionTraile`  | [Paper](https://arxiv.org/pdf/1707.04680.pdf)  | \n|  `SiMPle`  | [Paper](https://www.cs.ucr.edu/~eamonn/MP_Music_ISMIR.pdf)  | \n|  `FTM2D`  | [Paper](https://academiccommons.columbia.edu/doi/10.7916/D8Z60ZBV)  | \n|  `MOVE`  | adding soon ...  | \n\n\n### [`acoss.extractors.batch_feature_extractor`]()\n```\n{\n\t\"chroma_cens\": numpy.ndarray,\n\t\"crema\": numpy.ndarray,\n\t\"hpcp\": numpy.ndarray,\n\t\"key_extractor\": {\n\t\t\"key\": numpy.str_,\n\t\t\"scale\": numpy.str_,_\n\t\t\"strength\": numpy.float64\n\t},\n\t\"madmom_features\": {\n\t\t\"novfn\": numpy.ndarray, \n\t\t\"onsets\": numpy.ndarray,\n\t\t\"snovfn\": numpy.ndarray,\n\t\t\"tempos\": numpy.ndarray\n\t}\n\t\"mfcc_htk\": numpy.ndarray,\n\t\"label\": numpy.str_,\n\t\"track_id\": numpy.str_\n}\n```\n\n### Dataset structure required for acoss\n\n\n#### Audio data\n\n```\naudio_dir\n    /work_id\n        /track_id.mp3\n```   \n\n#### Feature file\n\n```\nfeature_dir\n    /work_id\n        /track_id.h5 \n```   \n\n```python\nimport deepdish as dd\n\nfeature = dd.load(\"feature_file.h5\")\n```\n\nAn example feature file will be in the following structure.\n\n ```\n{\n    'feature_1': [],\n    'feature_2': [],\n    'feature_3': {'type_1': [], 'type_2': [], ...},\n    ......  \n}\n```\n\n#### CSV annotation file for a dataset\n\n\n| work_id  | track_id  |  \n|---|---|\n|  `W_163930` | `P_546633`  | \n|  ... | ...  | \n\n\n`acoss` benchmark methods expect the dataset annotation csv file in the above given format.\n\n\nThere are also some utility functions in `acoss` which generates the csv annotation file automatically for da-tacos from it's subset metadata file and for covers80 dataset from it's audio data directory.\n```python\nfrom acoss.utils import da_tacos_metadata_to_acoss_csv\nda_tacos_metadata_to_acoss_csv(\"da-tacos_benchmark_subset_metadata.json\", \n                            \"da-tacos_benchmark_subset.csv\")\n\n\nfrom acoss.utils import generate_covers80_acoss_csv\ngenerate_covers80_acoss_csv(\"coversongs/covers32k/\", \n                            \"covers80_annotations.csv\")\n```\n\n\n\nFor quick prototyping, let's use the tiny [covers80](), dataset.\n\n### Audio feature extraction\n\n```python\nfrom acoss.utils import COVERS_80_CSV\nfrom acoss.extractors import batch_feature_extractor\nfrom acoss.extractors import PROFILE\n\nprint(PROFILE)\n```\n\n\n> {\n    'sample_rate': 44100,\n    'input_audio_format': '.mp3',\n    'downsample_audio': False,\n    'downsample_factor': 2,\n    'endtime': None,\n    'features': ['hpcp',\n        'key_extractor',\n        'madmom_features',\n        'mfcc_htk']\n}\n\n\nCompute\n\n```python\n# Let's define a custom acoss extractor profile\nextractor_profile = {\n           'sample_rate': 32000,\n           'input_audio_format': '.mp3',\n           'downsample_audio': True,\n           'downsample_factor': 2,\n           'endtime': None,\n           'features': ['hpcp']\n}\n\n# path to audio data\naudio_dir = \"../coversongs/covers32k/\"\n# path where you wanna store your data\nfeature_dir = \"features/\"\n\n# Run the batch feature extractor with 4 parallel workers\nbatch_feature_extractor(dataset_csv=COVERS_80_CSV, \n                        audio_dir=audio_dir, \n                        feature_dir=feature_dir,\n                        n_workers=4,\n                        mode=\"parallel\", \n                        params=extractor_profile)\n```\n\n### Benchmarking\n\n```python\nfrom acoss.coverid import benchmark, algorithm_names\nfrom acoss.utils import COVERS_80_CSV\n\n# path to where your audio feature h5 files are located\nfeature_dir = \"features/\"\n\n# list all the available algorithms in acoss \nprint(algorithm_names)\n\n# we can easily benchmark any of the given cover id algorithm\n# on the given dataset using the following function\nbenchmark(dataset_csv=COVERS_80_CSV, \n        feature_dir=feature_dir,\n        algorithm=\"Serra09\", \n        parallel=False)\n# result of the evaluation will be stored in a csv file \n# in the current working directory.\n```\n\n## How to add my algorithm in `acoss`?\n\n### Defining my algorithm\n```python\nfrom acoss.algorithms.algorithm_template import CoverSimilarity\n\nclass MyCoverIDAlgorithm(CoverSimilarity):\n    def __init__(self, \n                dataset_csv, \n                datapath, \n                name=\"MyAlgorithm\", \n                shortname=\"mca\"):\n        CoverAlgorithm.__init__(self, \n                                dataset_csv=dataset_csv, \n                                name=name, \n                                datapath=datapath, \n                                shortname=shortname)\n\n    def load_features(self, i):\n        \"\"\"Define how to want to load the features\"\"\"\n        feats = CoverAlgorithm.load_features(self, i)\n        # add your modification to feature arrays\n        return\n\n    def similarity(self, idxs):\n        \"\"\"Define how you want to compute the cover song similarity\"\"\"\n        return\n\n```\n\n### Running benchmark on my algorithm\n```python\n# create an instance your algorithm\nmy_awesome_algorithm = MyCoverIDAlgorithm(dataset_csv, datapath)\n\n# run pairwise comparison\nmy_awesome_algorithm.all_pairwise()\n\n# Compute standard evaluation metrics\nfor similarity_type in my_awesome_algorithm.Ds.keys():\n        print(similarity_type)\n        my_awesome_algorithm.getEvalStatistics(similarity_type)\n\nmy_awesome_algorithm.cleanup_memmap()\n```\n\n\n\n## How to contribute?\n\n* Fork the repo!\n* Create your feature branch: git checkout -b my-new-feature\n* Add your new audio feature or cover identification algorithm to acoss.\n* Commit your changes: git commit -am 'Add some feature'\n* Push to the branch: git push origin my-new-feature\n* Submit a pull request\n\n\n## Acknowledgments\n\nThis project has received funding from the European Union's Horizon 2020 research and innovation programme under the Marie Sk\u0142odowska-Curie grant agreement No. 765068 (MIP-Frontiers).\n\nThis work has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 770376 (Trompa).\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b7/Flag_of_Europe.svg\" height=\"64\" hspace=\"20\">", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/furkanyesiler/acoss", "keywords": "audio music dsp musicinformationretireval coversongidentification", "license": "AGPL3.0", "maintainer": "", "maintainer_email": "", "name": "acoss", "package_url": "https://pypi.org/project/acoss/", "platform": "", "project_url": "https://pypi.org/project/acoss/", "project_urls": {"Homepage": "https://github.com/furkanyesiler/acoss", "Source": "https://github.com/furkanyesiler/acoss", "Tracker": "https://github.com/furkanyesiler/acoss/issues"}, "release_url": "https://pypi.org/project/acoss/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Audio Cover Song Suite (acoss): A feature extraction and benchmarking suite for cover song identification tasks", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>acoss: Audio Cover Song Suite</h1>\n<p><a href=\"https://pypi.python.org/pypi/acoss/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7e04e9c3198a902ab068e4999e987019830f7ec/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61636f73732e737667\"></a>\n<a href=\"https://travis-ci.org/furkanyesiler/acoss\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b119e80793b625f03f7ce440c5dfbda322e49682/68747470733a2f2f7472617669732d63692e6f72672f6675726b616e796573696c65722f61636f73732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://www.gnu.org/licenses/agpl-3.0\" rel=\"nofollow\"><img alt=\"License: AGPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f911b8188c89b9c92c672604b630cd7354a956f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4147504c25323076332d626c75652e737667\"></a></p>\n<p><a href=\"https://github.com/furkanyesiler/acoss\" rel=\"nofollow\">acoss: Audio Cover Song Suite</a> is a feature extraction and benchmarking frameworks for the\ncover song identification (CSI) tasks. This tool has been developed along with the new <a href=\"https://mtg.github.io/da-tacos\" rel=\"nofollow\">DA-TACOS</a> dataset.</p>\n<p><code>acoss</code> includes a standard feature extraction framework with state-of-art audio features for CSI task and open source implementations of seven state-of-the-art CSI algorithms to facilitate the future work in this\nline of research. Using this framework, researchers can easily compare existing algorithms on different datasets,\nand we encourage all CSI researchers to incorporate their\nalgorithms into this framework which can easily done following the usage examples.</p>\n<p>Please site our paper if you use this tool in your resarch.</p>\n<blockquote>\n<p><a href=\"https://repositori.upf.edu/bitstream/handle/10230/42771/yesiler_ismir19_datacos.pdf?sequence=1&amp;isAllowed=y\" rel=\"nofollow\">Furkan Yesiler, Chris Tralie, Albin Correya, Diego F. Silva, Philip Tovstogan, Emilia G\u00f3mez, and Xavier Serra. Da-TACOS: A Dataset for Cover Song Identification and Understanding. In 20th International Society for Music Information Retrieval Conference (ISMIR 2019), Delft, The Netherlands, 2019.</a></p>\n</blockquote>\n<p>Benchmarking results on <a href=\"https://mtg.github.io/da-tacos\" rel=\"nofollow\">Da-Tacos</a> dataset can be found in the paper.</p>\n<h2>Setup &amp; Installation</h2>\n<p>We recommend you to install the package inside a python <a href=\"https://docs.python.org/3/tutorial/venv.html\" rel=\"nofollow\">virtualenv</a>.</p>\n<h4>Install using pip</h4>\n<pre>pip install acoss\n</pre>\n<p>OR</p>\n<h4>Install from source (recommended)</h4>\n<ul>\n<li>Clone or download the repo.</li>\n<li>Install <code>acoss</code> package by using the following command inside the directory.</li>\n</ul>\n<pre>python3 setup.py install\n</pre>\n<h4>Additional dependencies</h4>\n<p><code>acoss</code> requires a local installation of madmom library for computing some audio features and essentia library for similarity algorithms.</p>\n<p>For linux-based distro users,</p>\n<pre><code>pip install \"acoss[extra-deps]\"\n</code></pre>\n<p>or if you are a Mac OSX user,</p>\n<p>you can install madmom from pip</p>\n<pre><code>pip install madmom\n</code></pre>\n<p>you can install <code>essentia</code> from homebrew</p>\n<pre><code>brew tap MTG/essentia\nbrew install essentia --HEAD\n</code></pre>\n<h2>Documentation and examples</h2>\n<p><a href=\"/\" rel=\"nofollow\"><code>acoss</code></a> mainly provides the following python sub-modules-</p>\n<ul>\n<li>\n<p><code>acoss.algorithms</code>: Sub-module with various cover identification algorithms, utilities for similarity comparison and an template for adding new algorithms.</p>\n</li>\n<li>\n<p><code>acoss.coverid</code>: Interface to benchmark a specific cover identification algorithms.</p>\n</li>\n<li>\n<p><code>acoss.features</code>: Sub-module with implementation of various audio features.</p>\n</li>\n<li>\n<p><code>acoss.extractors</code> : Interface to do efficient batch audio feature extraction for an audio dataset.</p>\n</li>\n<li>\n<p><code>acoss.utils</code> : Utility functions used in acoss package.</p>\n</li>\n</ul>\n<h3><a href=\"\" rel=\"nofollow\"><code>acoss.coverid.benchmark</code></a></h3>\n<table>\n<thead>\n<tr>\n<th>Cover Song Identification algorithms in <code>acoss</code></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Serra09</code></td>\n<td><a href=\"https://iopscience.iop.org/article/10.1088/1367-2630/11/9/093017\" rel=\"nofollow\">Paper</a></td>\n</tr>\n<tr>\n<td><code>LateFusionChen</code></td>\n<td><a href=\"https://link.springer.com/article/10.1186/s13636-017-0108-2\" rel=\"nofollow\">Paper</a></td>\n</tr>\n<tr>\n<td><code>EarlyFusionTraile</code></td>\n<td><a href=\"https://arxiv.org/pdf/1707.04680.pdf\" rel=\"nofollow\">Paper</a></td>\n</tr>\n<tr>\n<td><code>SiMPle</code></td>\n<td><a href=\"https://www.cs.ucr.edu/%7Eeamonn/MP_Music_ISMIR.pdf\" rel=\"nofollow\">Paper</a></td>\n</tr>\n<tr>\n<td><code>FTM2D</code></td>\n<td><a href=\"https://academiccommons.columbia.edu/doi/10.7916/D8Z60ZBV\" rel=\"nofollow\">Paper</a></td>\n</tr>\n<tr>\n<td><code>MOVE</code></td>\n<td>adding soon ...</td>\n</tr></tbody></table>\n<h3><a href=\"\" rel=\"nofollow\"><code>acoss.extractors.batch_feature_extractor</code></a></h3>\n<pre><code>{\n\t\"chroma_cens\": numpy.ndarray,\n\t\"crema\": numpy.ndarray,\n\t\"hpcp\": numpy.ndarray,\n\t\"key_extractor\": {\n\t\t\"key\": numpy.str_,\n\t\t\"scale\": numpy.str_,_\n\t\t\"strength\": numpy.float64\n\t},\n\t\"madmom_features\": {\n\t\t\"novfn\": numpy.ndarray, \n\t\t\"onsets\": numpy.ndarray,\n\t\t\"snovfn\": numpy.ndarray,\n\t\t\"tempos\": numpy.ndarray\n\t}\n\t\"mfcc_htk\": numpy.ndarray,\n\t\"label\": numpy.str_,\n\t\"track_id\": numpy.str_\n}\n</code></pre>\n<h3>Dataset structure required for acoss</h3>\n<h4>Audio data</h4>\n<pre><code>audio_dir\n    /work_id\n        /track_id.mp3\n</code></pre>\n<h4>Feature file</h4>\n<pre><code>feature_dir\n    /work_id\n        /track_id.h5 \n</code></pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">deepdish</span> <span class=\"k\">as</span> <span class=\"nn\">dd</span>\n\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">dd</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"feature_file.h5\"</span><span class=\"p\">)</span>\n</pre>\n<p>An example feature file will be in the following structure.</p>\n<pre><code>{\n   'feature_1': [],\n   'feature_2': [],\n   'feature_3': {'type_1': [], 'type_2': [], ...},\n   ......  \n}\n</code></pre>\n<h4>CSV annotation file for a dataset</h4>\n<table>\n<thead>\n<tr>\n<th>work_id</th>\n<th>track_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>W_163930</code></td>\n<td><code>P_546633</code></td>\n</tr>\n<tr>\n<td>...</td>\n<td>...</td>\n</tr></tbody></table>\n<p><code>acoss</code> benchmark methods expect the dataset annotation csv file in the above given format.</p>\n<p>There are also some utility functions in <code>acoss</code> which generates the csv annotation file automatically for da-tacos from it's subset metadata file and for covers80 dataset from it's audio data directory.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acoss.utils</span> <span class=\"kn\">import</span> <span class=\"n\">da_tacos_metadata_to_acoss_csv</span>\n<span class=\"n\">da_tacos_metadata_to_acoss_csv</span><span class=\"p\">(</span><span class=\"s2\">\"da-tacos_benchmark_subset_metadata.json\"</span><span class=\"p\">,</span> \n                            <span class=\"s2\">\"da-tacos_benchmark_subset.csv\"</span><span class=\"p\">)</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">acoss.utils</span> <span class=\"kn\">import</span> <span class=\"n\">generate_covers80_acoss_csv</span>\n<span class=\"n\">generate_covers80_acoss_csv</span><span class=\"p\">(</span><span class=\"s2\">\"coversongs/covers32k/\"</span><span class=\"p\">,</span> \n                            <span class=\"s2\">\"covers80_annotations.csv\"</span><span class=\"p\">)</span>\n</pre>\n<p>For quick prototyping, let's use the tiny <a href=\"\" rel=\"nofollow\">covers80</a>, dataset.</p>\n<h3>Audio feature extraction</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acoss.utils</span> <span class=\"kn\">import</span> <span class=\"n\">COVERS_80_CSV</span>\n<span class=\"kn\">from</span> <span class=\"nn\">acoss.extractors</span> <span class=\"kn\">import</span> <span class=\"n\">batch_feature_extractor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">acoss.extractors</span> <span class=\"kn\">import</span> <span class=\"n\">PROFILE</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">PROFILE</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>{\n'sample_rate': 44100,\n'input_audio_format': '.mp3',\n'downsample_audio': False,\n'downsample_factor': 2,\n'endtime': None,\n'features': ['hpcp',\n'key_extractor',\n'madmom_features',\n'mfcc_htk']\n}</p>\n</blockquote>\n<p>Compute</p>\n<pre><span class=\"c1\"># Let's define a custom acoss extractor profile</span>\n<span class=\"n\">extractor_profile</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n           <span class=\"s1\">'sample_rate'</span><span class=\"p\">:</span> <span class=\"mi\">32000</span><span class=\"p\">,</span>\n           <span class=\"s1\">'input_audio_format'</span><span class=\"p\">:</span> <span class=\"s1\">'.mp3'</span><span class=\"p\">,</span>\n           <span class=\"s1\">'downsample_audio'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n           <span class=\"s1\">'downsample_factor'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n           <span class=\"s1\">'endtime'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n           <span class=\"s1\">'features'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'hpcp'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># path to audio data</span>\n<span class=\"n\">audio_dir</span> <span class=\"o\">=</span> <span class=\"s2\">\"../coversongs/covers32k/\"</span>\n<span class=\"c1\"># path where you wanna store your data</span>\n<span class=\"n\">feature_dir</span> <span class=\"o\">=</span> <span class=\"s2\">\"features/\"</span>\n\n<span class=\"c1\"># Run the batch feature extractor with 4 parallel workers</span>\n<span class=\"n\">batch_feature_extractor</span><span class=\"p\">(</span><span class=\"n\">dataset_csv</span><span class=\"o\">=</span><span class=\"n\">COVERS_80_CSV</span><span class=\"p\">,</span> \n                        <span class=\"n\">audio_dir</span><span class=\"o\">=</span><span class=\"n\">audio_dir</span><span class=\"p\">,</span> \n                        <span class=\"n\">feature_dir</span><span class=\"o\">=</span><span class=\"n\">feature_dir</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n                        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"parallel\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">extractor_profile</span><span class=\"p\">)</span>\n</pre>\n<h3>Benchmarking</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acoss.coverid</span> <span class=\"kn\">import</span> <span class=\"n\">benchmark</span><span class=\"p\">,</span> <span class=\"n\">algorithm_names</span>\n<span class=\"kn\">from</span> <span class=\"nn\">acoss.utils</span> <span class=\"kn\">import</span> <span class=\"n\">COVERS_80_CSV</span>\n\n<span class=\"c1\"># path to where your audio feature h5 files are located</span>\n<span class=\"n\">feature_dir</span> <span class=\"o\">=</span> <span class=\"s2\">\"features/\"</span>\n\n<span class=\"c1\"># list all the available algorithms in acoss </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">algorithm_names</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># we can easily benchmark any of the given cover id algorithm</span>\n<span class=\"c1\"># on the given dataset using the following function</span>\n<span class=\"n\">benchmark</span><span class=\"p\">(</span><span class=\"n\">dataset_csv</span><span class=\"o\">=</span><span class=\"n\">COVERS_80_CSV</span><span class=\"p\">,</span> \n        <span class=\"n\">feature_dir</span><span class=\"o\">=</span><span class=\"n\">feature_dir</span><span class=\"p\">,</span>\n        <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"s2\">\"Serra09\"</span><span class=\"p\">,</span> \n        <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># result of the evaluation will be stored in a csv file </span>\n<span class=\"c1\"># in the current working directory.</span>\n</pre>\n<h2>How to add my algorithm in <code>acoss</code>?</h2>\n<h3>Defining my algorithm</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acoss.algorithms.algorithm_template</span> <span class=\"kn\">import</span> <span class=\"n\">CoverSimilarity</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCoverIDAlgorithm</span><span class=\"p\">(</span><span class=\"n\">CoverSimilarity</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> \n                <span class=\"n\">dataset_csv</span><span class=\"p\">,</span> \n                <span class=\"n\">datapath</span><span class=\"p\">,</span> \n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"MyAlgorithm\"</span><span class=\"p\">,</span> \n                <span class=\"n\">shortname</span><span class=\"o\">=</span><span class=\"s2\">\"mca\"</span><span class=\"p\">):</span>\n        <span class=\"n\">CoverAlgorithm</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> \n                                <span class=\"n\">dataset_csv</span><span class=\"o\">=</span><span class=\"n\">dataset_csv</span><span class=\"p\">,</span> \n                                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> \n                                <span class=\"n\">datapath</span><span class=\"o\">=</span><span class=\"n\">datapath</span><span class=\"p\">,</span> \n                                <span class=\"n\">shortname</span><span class=\"o\">=</span><span class=\"n\">shortname</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_features</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Define how to want to load the features\"\"\"</span>\n        <span class=\"n\">feats</span> <span class=\"o\">=</span> <span class=\"n\">CoverAlgorithm</span><span class=\"o\">.</span><span class=\"n\">load_features</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"c1\"># add your modification to feature arrays</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">similarity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">idxs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Define how you want to compute the cover song similarity\"\"\"</span>\n        <span class=\"k\">return</span>\n</pre>\n<h3>Running benchmark on my algorithm</h3>\n<pre><span class=\"c1\"># create an instance your algorithm</span>\n<span class=\"n\">my_awesome_algorithm</span> <span class=\"o\">=</span> <span class=\"n\">MyCoverIDAlgorithm</span><span class=\"p\">(</span><span class=\"n\">dataset_csv</span><span class=\"p\">,</span> <span class=\"n\">datapath</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># run pairwise comparison</span>\n<span class=\"n\">my_awesome_algorithm</span><span class=\"o\">.</span><span class=\"n\">all_pairwise</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Compute standard evaluation metrics</span>\n<span class=\"k\">for</span> <span class=\"n\">similarity_type</span> <span class=\"ow\">in</span> <span class=\"n\">my_awesome_algorithm</span><span class=\"o\">.</span><span class=\"n\">Ds</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">similarity_type</span><span class=\"p\">)</span>\n        <span class=\"n\">my_awesome_algorithm</span><span class=\"o\">.</span><span class=\"n\">getEvalStatistics</span><span class=\"p\">(</span><span class=\"n\">similarity_type</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_awesome_algorithm</span><span class=\"o\">.</span><span class=\"n\">cleanup_memmap</span><span class=\"p\">()</span>\n</pre>\n<h2>How to contribute?</h2>\n<ul>\n<li>Fork the repo!</li>\n<li>Create your feature branch: git checkout -b my-new-feature</li>\n<li>Add your new audio feature or cover identification algorithm to acoss.</li>\n<li>Commit your changes: git commit -am 'Add some feature'</li>\n<li>Push to the branch: git push origin my-new-feature</li>\n<li>Submit a pull request</li>\n</ul>\n<h2>Acknowledgments</h2>\n<p>This project has received funding from the European Union's Horizon 2020 research and innovation programme under the Marie Sk\u0142odowska-Curie grant agreement No. 765068 (MIP-Frontiers).</p>\n<p>This work has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 770376 (Trompa).</p>\n<img height=\"64\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/744ea25c3411db95cf990b9257501d25179f3883/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f622f62372f466c61675f6f665f4575726f70652e737667\">\n\n          </div>"}, "last_serial": 6812447, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "275f3ef0e5988f724e218e762a7e0f5f", "sha256": "1149d7453d2b94f6dd9e3f137998f4d2b2d3de1bd757994941a6b1e708664f6b"}, "downloads": -1, "filename": "acoss-0.0.1-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "275f3ef0e5988f724e218e762a7e0f5f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 106580, "upload_time": "2019-10-15T11:33:28", "upload_time_iso_8601": "2019-10-15T11:33:28.473111Z", "url": "https://files.pythonhosted.org/packages/e9/42/e1f21ac83140e3eceb322543c936629183810ddd6432e90074c242bf47c1/acoss-0.0.1-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8418084af3e4bc8922bc266e13d54d69", "sha256": "bb3863fb6b1134216abe2a432dc81ca65615cfc299dc78e562f5bbeb18bb276f"}, "downloads": -1, "filename": "acoss-0.0.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8418084af3e4bc8922bc266e13d54d69", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 111715, "upload_time": "2019-10-15T11:33:32", "upload_time_iso_8601": "2019-10-15T11:33:32.062973Z", "url": "https://files.pythonhosted.org/packages/80/ce/6f1bd996e25c450d319b25fa6ec021b8e5d350ef1b2c36c0be1bb5af8a76/acoss-0.0.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}], "0.0.2.dev0": [{"comment_text": "", "digests": {"md5": "5677a8d7689f12e41eb90cd475a841f9", "sha256": "0d8f695ecd09bce0ef13840761fe447cfb92abb86ef7483b5dc0aa5a127d66f9"}, "downloads": -1, "filename": "acoss-0.0.2.dev0.tar.gz", "has_sig": false, "md5_digest": "5677a8d7689f12e41eb90cd475a841f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123226, "upload_time": "2020-03-14T18:50:56", "upload_time_iso_8601": "2020-03-14T18:50:56.702541Z", "url": "https://files.pythonhosted.org/packages/d1/51/99c7239e8cc02d11161bc5b14709f700997d517817e3e718e79a04875fc3/acoss-0.0.2.dev0.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6f9dea20bfabfa546be9f72428dc293a", "sha256": "8c3b171e0ce5b275c0f17ba3ec02a31fb7db103551dc6f533098d8d745ba172d"}, "downloads": -1, "filename": "acoss-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6f9dea20bfabfa546be9f72428dc293a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123189, "upload_time": "2020-03-14T18:59:14", "upload_time_iso_8601": "2020-03-14T18:59:14.744539Z", "url": "https://files.pythonhosted.org/packages/be/d1/53b4b4de99a6dabb906f0f90c324ff37b68c0e4a63e8aca5476d5845edc9/acoss-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f9dea20bfabfa546be9f72428dc293a", "sha256": "8c3b171e0ce5b275c0f17ba3ec02a31fb7db103551dc6f533098d8d745ba172d"}, "downloads": -1, "filename": "acoss-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6f9dea20bfabfa546be9f72428dc293a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123189, "upload_time": "2020-03-14T18:59:14", "upload_time_iso_8601": "2020-03-14T18:59:14.744539Z", "url": "https://files.pythonhosted.org/packages/be/d1/53b4b4de99a6dabb906f0f90c324ff37b68c0e4a63e8aca5476d5845edc9/acoss-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:32 2020"}