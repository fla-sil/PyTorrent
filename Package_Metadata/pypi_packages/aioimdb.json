{"info": {"author": "Francesco Pierfederici", "author_email": "fpierfed@megabeets.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP"], "description": "# aioimdb (IMDb + Python 3.6 + Asyncio)\n\n[![Build Status](https://travis-ci.org/fpierfed/aioimdb.png?branch=master)](https://travis-ci.org/fpierfed/aioimdb)\n\nPython asyncio IMDb client using the IMDb JSON web service made available for their iOS app. This version requires Python 3.6 or later. It is based off of the [synchronous version by Richard O'Dwyer](https://github.com/richardARPANET/imdb-pie).\n\n## API Terminology\n\n- `Title` this can be a movie, tv show, video, documentary etc.\n- `Name` this can be a credit, cast member, any person generally.\n\n## Installation\n\nTo install aioimdb, simply:\n```bash\npip install aioimdb\n```\n\n## How To Use\n\n### Initialise The Client\n```python\nfrom aioimdb import Imdb\nasync with Imdb() as imdb\n    result = await imdb.<method call>    # <-- see Available Methods below\n```\n\nExample:\n```python\nfrom aioimdb import Imdb\nasync with Imdb() as imdb\n    result = await imdb.get_title('tt0111161')\n```\n\n\n### Available Methods\n\nNOTE: For each client method, if the resource cannot be found they will raise `LookupError`, if there is an API error then `ImdbAPIError` will raise.\n\nExample | Description\n--------- | ---------\n`await get_title('tt0111161')` | Returns a dict containing title information\n`await search_for_title(\"The Dark Knight\")` | Returns a dict of results\n`await search_for_name(\"Christian Bale)` | Returns a dict of results\n`await title_exits('tt0111161')` | Returns True if exists otherwise False\n`await get_title_genres('tt0303461')` | Returns a dict containing title genres information\n`await get_title_credits('tt0303461')` | Returns a dict containing title credits information\n`await get_title_quotes('tt0303461')` | Returns a dict containing title quotes information\n`await get_title_ratings('tt0303461')` | Returns a dict containing title ratings information\n`await get_title_connections('tt0303461')` | Returns a dict containing title connections information\n`await get_title_similarities('tt0303461')` | Returns a dict containing title similarities information\n`await get_title_videos('tt0303461')` | Returns a dict containing title videos information\n`await get_title_news('tt0303461')` | Returns a dict containing news\n`await get_title_trivia('tt0303461')` | Returns a dict containing trivia\n`await get_title_soundtracks('tt0303461')` | Returns a dict containing soundtracks information\n`await get_title_goofs('tt0303461')` | Returns a dict containing \"goofs\" and teaser information\n`await get_title_technical('tt0303461')` | Returns a dict containing technical information\n`await get_title_companies('tt0303461')` | Returns a dict containing information about companies related to title\n`await get_title_episodes('tt0303461')` | Returns a dict containing season and episodes information\n`await get_title_episodes_detailed(imdb_id='tt0303461', season=1)` | Returns a dict containing detailed season episodes information\n`await get_title_top_crew('tt0303461')` | Returns a dict containing detailed information about title's top crew (ie: directors, writters, etc.)\n`await get_title_plot('tt0111161')` | Returns a dict containing title plot information\n`await get_title_plot_synopsis('tt0111161')` | Returns a dict containing title plot synopsis information\n`await get_title_awards('tt0111161')` |Returns a dict containing title plot information\n`await get_title_releases('tt0111161')` | Returns a dict containing releases information\n`await get_title_versions('tt0111161')` | Returns a dict containing versions information (meaning different versions of this title for different regions, or different versions for DVD vs Cinema)\n`await get_title_user_reviews('tt0111161')` | Returns a dict containing user review information\n`await get_title_metacritic_reviews('tt0111161')` | Returns a dict containing metacritic review information\n`await get_title_images('tt0111161')` | Returns a dict containing title images information\n`await get_name('nm0000151')` | Returns a dict containing person/name information\n`await get_name_filmography('nm0000151')` | Returns a dict containing person/name filmography information\n`await get_name_images('nm0000032')` | Returns a dict containing person/name images information\n`await get_name_videos('nm0000032')` | Returns a dict containing person/name videos information\n`validate_imdb_id('tt0111161')` | Raises `ValueError` if not valid \n`await get_popular_titles()` | Returns a dict containing popular titles information\n`await get_popular_shows()` | Returns a dict containing popular tv shows\n`await get_popular_movies()` | Returns a dict containing popular movies \n\n\n## Requirements\n\n    1. Python 3.6 or later\n    2. See requirements.txt\n\n\n## Running The Tests\n\n```bash\npip install -r test_requirements.txt\npy.test tests\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fpierfed/aioimdb", "keywords": "", "license": "Creative Commons Attribution-Noncommercial-Share Alike license", "maintainer": "", "maintainer_email": "", "name": "aioimdb", "package_url": "https://pypi.org/project/aioimdb/", "platform": "", "project_url": "https://pypi.org/project/aioimdb/", "project_urls": {"Homepage": "https://github.com/fpierfed/aioimdb"}, "release_url": "https://pypi.org/project/aioimdb/1.1.2/", "requires_dist": ["wheel (==0.31.0)", "boto (==2.48.0)", "python-dateutil (==2.7.2)", "diskcache (==3.0.1)", "aiohttp (==3.1.1)", "setuptools (==39.0.1)"], "requires_python": ">=3.6", "summary": "Python asyncio IMDB client using the IMDB json web service made available for their iOS app.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aioimdb (IMDb + Python 3.6 + Asyncio)</h1>\n<p><a href=\"https://travis-ci.org/fpierfed/aioimdb\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e729cd8a214c1f632801fdcd383676c1bf960815/68747470733a2f2f7472617669732d63692e6f72672f66706965726665642f61696f696d64622e706e673f6272616e63683d6d6173746572\"></a></p>\n<p>Python asyncio IMDb client using the IMDb JSON web service made available for their iOS app. This version requires Python 3.6 or later. It is based off of the <a href=\"https://github.com/richardARPANET/imdb-pie\" rel=\"nofollow\">synchronous version by Richard O'Dwyer</a>.</p>\n<h2>API Terminology</h2>\n<ul>\n<li><code>Title</code> this can be a movie, tv show, video, documentary etc.</li>\n<li><code>Name</code> this can be a credit, cast member, any person generally.</li>\n</ul>\n<h2>Installation</h2>\n<p>To install aioimdb, simply:</p>\n<pre>pip install aioimdb\n</pre>\n<h2>How To Use</h2>\n<h3>Initialise The Client</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioimdb</span> <span class=\"kn\">import</span> <span class=\"n\">Imdb</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">Imdb</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">imdb</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">imdb</span><span class=\"o\">.&lt;</span><span class=\"n\">method</span> <span class=\"n\">call</span><span class=\"o\">&gt;</span>    <span class=\"c1\"># &lt;-- see Available Methods below</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioimdb</span> <span class=\"kn\">import</span> <span class=\"n\">Imdb</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">Imdb</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">imdb</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">imdb</span><span class=\"o\">.</span><span class=\"n\">get_title</span><span class=\"p\">(</span><span class=\"s1\">'tt0111161'</span><span class=\"p\">)</span>\n</pre>\n<h3>Available Methods</h3>\n<p>NOTE: For each client method, if the resource cannot be found they will raise <code>LookupError</code>, if there is an API error then <code>ImdbAPIError</code> will raise.</p>\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>await get_title('tt0111161')</code></td>\n<td>Returns a dict containing title information</td>\n</tr>\n<tr>\n<td><code>await search_for_title(\"The Dark Knight\")</code></td>\n<td>Returns a dict of results</td>\n</tr>\n<tr>\n<td><code>await search_for_name(\"Christian Bale)</code></td>\n<td>Returns a dict of results</td>\n</tr>\n<tr>\n<td><code>await title_exits('tt0111161')</code></td>\n<td>Returns True if exists otherwise False</td>\n</tr>\n<tr>\n<td><code>await get_title_genres('tt0303461')</code></td>\n<td>Returns a dict containing title genres information</td>\n</tr>\n<tr>\n<td><code>await get_title_credits('tt0303461')</code></td>\n<td>Returns a dict containing title credits information</td>\n</tr>\n<tr>\n<td><code>await get_title_quotes('tt0303461')</code></td>\n<td>Returns a dict containing title quotes information</td>\n</tr>\n<tr>\n<td><code>await get_title_ratings('tt0303461')</code></td>\n<td>Returns a dict containing title ratings information</td>\n</tr>\n<tr>\n<td><code>await get_title_connections('tt0303461')</code></td>\n<td>Returns a dict containing title connections information</td>\n</tr>\n<tr>\n<td><code>await get_title_similarities('tt0303461')</code></td>\n<td>Returns a dict containing title similarities information</td>\n</tr>\n<tr>\n<td><code>await get_title_videos('tt0303461')</code></td>\n<td>Returns a dict containing title videos information</td>\n</tr>\n<tr>\n<td><code>await get_title_news('tt0303461')</code></td>\n<td>Returns a dict containing news</td>\n</tr>\n<tr>\n<td><code>await get_title_trivia('tt0303461')</code></td>\n<td>Returns a dict containing trivia</td>\n</tr>\n<tr>\n<td><code>await get_title_soundtracks('tt0303461')</code></td>\n<td>Returns a dict containing soundtracks information</td>\n</tr>\n<tr>\n<td><code>await get_title_goofs('tt0303461')</code></td>\n<td>Returns a dict containing \"goofs\" and teaser information</td>\n</tr>\n<tr>\n<td><code>await get_title_technical('tt0303461')</code></td>\n<td>Returns a dict containing technical information</td>\n</tr>\n<tr>\n<td><code>await get_title_companies('tt0303461')</code></td>\n<td>Returns a dict containing information about companies related to title</td>\n</tr>\n<tr>\n<td><code>await get_title_episodes('tt0303461')</code></td>\n<td>Returns a dict containing season and episodes information</td>\n</tr>\n<tr>\n<td><code>await get_title_episodes_detailed(imdb_id='tt0303461', season=1)</code></td>\n<td>Returns a dict containing detailed season episodes information</td>\n</tr>\n<tr>\n<td><code>await get_title_top_crew('tt0303461')</code></td>\n<td>Returns a dict containing detailed information about title's top crew (ie: directors, writters, etc.)</td>\n</tr>\n<tr>\n<td><code>await get_title_plot('tt0111161')</code></td>\n<td>Returns a dict containing title plot information</td>\n</tr>\n<tr>\n<td><code>await get_title_plot_synopsis('tt0111161')</code></td>\n<td>Returns a dict containing title plot synopsis information</td>\n</tr>\n<tr>\n<td><code>await get_title_awards('tt0111161')</code></td>\n<td>Returns a dict containing title plot information</td>\n</tr>\n<tr>\n<td><code>await get_title_releases('tt0111161')</code></td>\n<td>Returns a dict containing releases information</td>\n</tr>\n<tr>\n<td><code>await get_title_versions('tt0111161')</code></td>\n<td>Returns a dict containing versions information (meaning different versions of this title for different regions, or different versions for DVD vs Cinema)</td>\n</tr>\n<tr>\n<td><code>await get_title_user_reviews('tt0111161')</code></td>\n<td>Returns a dict containing user review information</td>\n</tr>\n<tr>\n<td><code>await get_title_metacritic_reviews('tt0111161')</code></td>\n<td>Returns a dict containing metacritic review information</td>\n</tr>\n<tr>\n<td><code>await get_title_images('tt0111161')</code></td>\n<td>Returns a dict containing title images information</td>\n</tr>\n<tr>\n<td><code>await get_name('nm0000151')</code></td>\n<td>Returns a dict containing person/name information</td>\n</tr>\n<tr>\n<td><code>await get_name_filmography('nm0000151')</code></td>\n<td>Returns a dict containing person/name filmography information</td>\n</tr>\n<tr>\n<td><code>await get_name_images('nm0000032')</code></td>\n<td>Returns a dict containing person/name images information</td>\n</tr>\n<tr>\n<td><code>await get_name_videos('nm0000032')</code></td>\n<td>Returns a dict containing person/name videos information</td>\n</tr>\n<tr>\n<td><code>validate_imdb_id('tt0111161')</code></td>\n<td>Raises <code>ValueError</code> if not valid</td>\n</tr>\n<tr>\n<td><code>await get_popular_titles()</code></td>\n<td>Returns a dict containing popular titles information</td>\n</tr>\n<tr>\n<td><code>await get_popular_shows()</code></td>\n<td>Returns a dict containing popular tv shows</td>\n</tr>\n<tr>\n<td><code>await get_popular_movies()</code></td>\n<td>Returns a dict containing popular movies</td>\n</tr></tbody></table>\n<h2>Requirements</h2>\n<pre><code>1. Python 3.6 or later\n2. See requirements.txt\n</code></pre>\n<h2>Running The Tests</h2>\n<pre>pip install -r test_requirements.txt\npy.test tests\n</pre>\n\n          </div>"}, "last_serial": 3737586, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "71feb5a04682485a7b4a7159fe0d7a01", "sha256": "c5aa0abf62d200153be9237e14a10e5b7e6f3f0e850cac2aa35abf4a4e5f009a"}, "downloads": -1, "filename": "aioimdb-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "71feb5a04682485a7b4a7159fe0d7a01", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7907, "upload_time": "2018-02-09T11:35:10", "upload_time_iso_8601": "2018-02-09T11:35:10.259868Z", "url": "https://files.pythonhosted.org/packages/1f/8d/dc84cd32d1f216908952fd717bd2248c58451fe45395e2b5f945a727ba7d/aioimdb-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9077cc8bc2622c010b5f0666d77c9f0", "sha256": "7d040a35af2edbef7a9e3f30056c5a5c1d2cb66b5b7f3aa45ad61fdf89de5955"}, "downloads": -1, "filename": "aioimdb-1.0.tar.gz", "has_sig": false, "md5_digest": "f9077cc8bc2622c010b5f0666d77c9f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9296, "upload_time": "2018-02-09T11:35:11", "upload_time_iso_8601": "2018-02-09T11:35:11.234703Z", "url": "https://files.pythonhosted.org/packages/23/fe/851c46e36d3300270cc46efaf07cf41cc1596cdfd1d5957d141eebdbd0d1/aioimdb-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7095c764991544742ebb6865bf66bade", "sha256": "cc3dac21bbedc231dbfc498fa2d3907e16e17f99e61ff389e3455e7d24ccce77"}, "downloads": -1, "filename": "aioimdb-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7095c764991544742ebb6865bf66bade", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10153, "upload_time": "2018-04-04T12:55:29", "upload_time_iso_8601": "2018-04-04T12:55:29.626432Z", "url": "https://files.pythonhosted.org/packages/13/fc/9f6372203e6ccdb6f0be80383708ab317574d05d5a4eb71297cbefe1044c/aioimdb-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e0144c2a77a0272824bb246b4d07051b", "sha256": "91190b3814e4276439571b5a0597bc495c4de2d85dfe3398e86c2aecc32f661d"}, "downloads": -1, "filename": "aioimdb-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e0144c2a77a0272824bb246b4d07051b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8161, "upload_time": "2018-04-04T13:30:07", "upload_time_iso_8601": "2018-04-04T13:30:07.564619Z", "url": "https://files.pythonhosted.org/packages/79/a9/dd74cc30b29bf569eda6954a2eee86e73e616609c6514a4e4b8bc7640721/aioimdb-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f33a35d5c55e076429023b42dbd9914", "sha256": "6584650680d00a0d8701747dd04a2176e6c4debba50b9b87e656a05921e7be3f"}, "downloads": -1, "filename": "aioimdb-1.0.2.tar.gz", "has_sig": false, "md5_digest": "4f33a35d5c55e076429023b42dbd9914", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10076, "upload_time": "2018-04-04T13:30:08", "upload_time_iso_8601": "2018-04-04T13:30:08.525222Z", "url": "https://files.pythonhosted.org/packages/cf/0b/7c5d00090d82d4bee90d18f1ff53b653aab43a47ae32dc807d1c5864ddb6/aioimdb-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "7251f14d319b0156dcbc01c369faca46", "sha256": "f91954b20ee5bdff6fec8e2960aff9be010624e72abf96ba7d55452b810fa420"}, "downloads": -1, "filename": "aioimdb-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7251f14d319b0156dcbc01c369faca46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8155, "upload_time": "2018-04-04T13:33:30", "upload_time_iso_8601": "2018-04-04T13:33:30.236602Z", "url": "https://files.pythonhosted.org/packages/18/47/aec6fae805eb9302c809cdd372cfbf3523f42a23cd475caf5394e4f90b84/aioimdb-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfe47da1e76e86e2225cdd919548657b", "sha256": "263e457381aa521768564fda928c79db4c725a96ae43dd373819d1c37010cda9"}, "downloads": -1, "filename": "aioimdb-1.0.3.tar.gz", "has_sig": false, "md5_digest": "cfe47da1e76e86e2225cdd919548657b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10073, "upload_time": "2018-04-04T13:33:31", "upload_time_iso_8601": "2018-04-04T13:33:31.247765Z", "url": "https://files.pythonhosted.org/packages/ab/ba/d7d9ecc9030d53b1b99cbe020dae95f7eca8ae1eaa598d3b20f58ca1a796/aioimdb-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "db0aba3ea08ded841d1fb7692331aaa5", "sha256": "bf2cdd1ace2629ff0aa99a3f06e7ce24fb988ef096544bb4f64e969d921fc33a"}, "downloads": -1, "filename": "aioimdb-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "db0aba3ea08ded841d1fb7692331aaa5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10498, "upload_time": "2018-04-04T14:30:10", "upload_time_iso_8601": "2018-04-04T14:30:10.882562Z", "url": "https://files.pythonhosted.org/packages/8d/33/6090c262e6c518dbd78577297d4c3373fe442c2e6fae2f693f4c7183feea/aioimdb-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5e78ed59b96024adf668efa5e11dc0f", "sha256": "fe24e3a04ff6b1f484bc3a711969d36744ccbbd3c103c30283d2b841607468d8"}, "downloads": -1, "filename": "aioimdb-1.0.4.tar.gz", "has_sig": false, "md5_digest": "e5e78ed59b96024adf668efa5e11dc0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10185, "upload_time": "2018-04-04T14:30:12", "upload_time_iso_8601": "2018-04-04T14:30:12.031965Z", "url": "https://files.pythonhosted.org/packages/88/af/5f455c9f9420a6b54a991dd9691b4d4fd811b0078b953c9ad209324017a0/aioimdb-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "1c48c7a37798f721cb3e5a0ce678d373", "sha256": "40383656d5c43d1d49b27769205a3d8fc37ae40d31f126b028a6c15870e5613a"}, "downloads": -1, "filename": "aioimdb-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1c48c7a37798f721cb3e5a0ce678d373", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8119, "upload_time": "2018-04-05T09:49:10", "upload_time_iso_8601": "2018-04-05T09:49:10.441597Z", "url": "https://files.pythonhosted.org/packages/b1/43/61d30e9257bdd743649dad336afd189f106844981a203eef53a71279e571/aioimdb-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ce2055c35aa33e274a33106376bf8fa", "sha256": "1cd81d955761f198fada8030b54e865566cb71dc2a37e72af6b26b36db140ce9"}, "downloads": -1, "filename": "aioimdb-1.0.5.tar.gz", "has_sig": false, "md5_digest": "5ce2055c35aa33e274a33106376bf8fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10195, "upload_time": "2018-04-05T09:49:11", "upload_time_iso_8601": "2018-04-05T09:49:11.541950Z", "url": "https://files.pythonhosted.org/packages/6f/b5/85f48f368e6c14f7e20519720165b6088cba10625b5437a3a34233841e81/aioimdb-1.0.5.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "d57dc02950c6eab7042a7e1ac3c2827b", "sha256": "aa9d7d2548e4b8dcc4440667c36a7a48d59011aaf1e9005134e52c8ea41b58f4"}, "downloads": -1, "filename": "aioimdb-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d57dc02950c6eab7042a7e1ac3c2827b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8575, "upload_time": "2018-04-05T14:02:54", "upload_time_iso_8601": "2018-04-05T14:02:54.458450Z", "url": "https://files.pythonhosted.org/packages/6f/9d/26ba69b475298a57f9cd9ce360ca062e22c2d08e6d3adca0cd057d372479/aioimdb-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e43446e72df643bb9c45ccc84b7e529", "sha256": "f926a429752cc5ecd10ad5b9876bfe97dedead54b4ef021805ce35bba358455a"}, "downloads": -1, "filename": "aioimdb-1.1.2.tar.gz", "has_sig": false, "md5_digest": "1e43446e72df643bb9c45ccc84b7e529", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10603, "upload_time": "2018-04-05T14:02:55", "upload_time_iso_8601": "2018-04-05T14:02:55.442659Z", "url": "https://files.pythonhosted.org/packages/02/1e/2f5af9992a2bf68529acddeaeea099867c8bf943c8f5470751925f5285a3/aioimdb-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d57dc02950c6eab7042a7e1ac3c2827b", "sha256": "aa9d7d2548e4b8dcc4440667c36a7a48d59011aaf1e9005134e52c8ea41b58f4"}, "downloads": -1, "filename": "aioimdb-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d57dc02950c6eab7042a7e1ac3c2827b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8575, "upload_time": "2018-04-05T14:02:54", "upload_time_iso_8601": "2018-04-05T14:02:54.458450Z", "url": "https://files.pythonhosted.org/packages/6f/9d/26ba69b475298a57f9cd9ce360ca062e22c2d08e6d3adca0cd057d372479/aioimdb-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e43446e72df643bb9c45ccc84b7e529", "sha256": "f926a429752cc5ecd10ad5b9876bfe97dedead54b4ef021805ce35bba358455a"}, "downloads": -1, "filename": "aioimdb-1.1.2.tar.gz", "has_sig": false, "md5_digest": "1e43446e72df643bb9c45ccc84b7e529", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10603, "upload_time": "2018-04-05T14:02:55", "upload_time_iso_8601": "2018-04-05T14:02:55.442659Z", "url": "https://files.pythonhosted.org/packages/02/1e/2f5af9992a2bf68529acddeaeea099867c8bf943c8f5470751925f5285a3/aioimdb-1.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:11 2020"}