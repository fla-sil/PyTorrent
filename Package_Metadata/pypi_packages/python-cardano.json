{"info": {"author": "huangyi", "author_email": "yi.codeplayer@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Python-Cardano\n==============\n\nPython implementation of Cardano project, including network protocol, crypto primitives, wallet logic, and more.\n\nWhy This Project\n----------------\n\n* We want to explore alternate design decisions to support lightweight wallet, and start developing the mobile wallet for Cardano. Current official wallet node is not enough yet.\n* Explore the design space of clustered wallet node.\n* Provide alternative implementation of Cardano protocols and specifications in another programming language.\n* In the future, it could be an alternative foundation for projects in Cardano ecosystem: wallets, side-chains, MPCs.\n\nWhy Python\n----------\n\nPython is still one of the most cleanly designed, developer friendly programming language out there, has a reputation of\nexecutable pseudocode. And lightweight thread provided by gevent makes it suitable to write networking software, and easy\ninteroperability with C thanks to Cython enables us to improve performance incrementally.\n\nWith python, we can develop clean prototype very fast, with good performance. And in the future we can always move the CPU intensive code to C\nafter we indentified the hotspot.\n\nBuild & Test\n------------\n\n.. code-block:: shell\n\n    $ virtualenv -p python3 .env\n    $ source .env/bin/activate\n    $ pip install -r requirements.txt\n    $ python setup.py build_ext --inplace\n\n    $ mkdir ./test_db\n    $ python scripts/pycardano.py run\n    sync block data from mainnet and subscribing for new blocks automatically.\n    $ python scripts/pycardano.py wallet create default\n    generate wallet\n\nFeatures\n--------\n\n* Store block data of different epochs in seperate rocksdb database, provides better disk usage(fully synchronized mainchain takes 1.3G disk space), and allows faster synchronization in the future.\n* ``pycardano.py sign`` sign a message with wallet, prove an wallet address belongs to you.\n* ``pycardano.py verify`` verify a signed message.\n* ``pycardano.py utxo stat`` Some statistics of global UTxOs.\n\nModules\n-------\n\n* ``cardano.address``\n\n  Implement Cardano HD address derivation and encoding, and wallet recovering for lagacy address format.\n\n* ``cardano.transport``\n\n  Implement Haskell's network-transport-tcp, multiplex multiple lightweight unidirectional connections on a single tcp connection.\n\n* ``cardano.node``\n\n  Implement cardano-sl's ``Node``, allow bidirectional conversation between endpoints.\n\n* ``cardano.storage``\n\n  Storage api of block and wallet's data.\n\n* ``cardano.block``\n\n  Block data structures.\n\n* ``cardano.logic``\n\n  Workers and listeners of default node.\n\n* ``cardano.retrieve``\n\n  Retrieve block data with cardano-sl mainnet.\n\n* ``cardano.wallet``\n\n  Implement wallet logic according to formal specification.\n\nTODOs\n-----\n\n* wallet state storage, a simple solution first, hopefully something like Haskell's acid-state in the end.\n* block verification.\n* relay block data with stream api.\n* wallet cli app.\n* wallet V1 api and api for SPV light client.\n* clustered wallet storage.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/safeada/python-cardano", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-cardano", "package_url": "https://pypi.org/project/python-cardano/", "platform": "OS Independent", "project_url": "https://pypi.org/project/python-cardano/", "project_urls": {"Homepage": "https://github.com/safeada/python-cardano"}, "release_url": "https://pypi.org/project/python-cardano/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "implement Cardano blockchain project in python", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python implementation of Cardano project, including network protocol, crypto primitives, wallet logic, and more.</p>\n<div id=\"why-this-project\">\n<h2>Why This Project</h2>\n<ul>\n<li>We want to explore alternate design decisions to support lightweight wallet, and start developing the mobile wallet for Cardano. Current official wallet node is not enough yet.</li>\n<li>Explore the design space of clustered wallet node.</li>\n<li>Provide alternative implementation of Cardano protocols and specifications in another programming language.</li>\n<li>In the future, it could be an alternative foundation for projects in Cardano ecosystem: wallets, side-chains, MPCs.</li>\n</ul>\n</div>\n<div id=\"why-python\">\n<h2>Why Python</h2>\n<p>Python is still one of the most cleanly designed, developer friendly programming language out there, has a reputation of\nexecutable pseudocode. And lightweight thread provided by gevent makes it suitable to write networking software, and easy\ninteroperability with C thanks to Cython enables us to improve performance incrementally.</p>\n<p>With python, we can develop clean prototype very fast, with good performance. And in the future we can always move the CPU intensive code to C\nafter we indentified the hotspot.</p>\n</div>\n<div id=\"build-test\">\n<h2>Build &amp; Test</h2>\n<pre>$ virtualenv -p python3 .env\n$ <span class=\"nb\">source</span> .env/bin/activate\n$ pip install -r requirements.txt\n$ python setup.py build_ext --inplace\n\n$ mkdir ./test_db\n$ python scripts/pycardano.py run\nsync block data from mainnet and subscribing <span class=\"k\">for</span> new blocks automatically.\n$ python scripts/pycardano.py wallet create default\ngenerate wallet\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Store block data of different epochs in seperate rocksdb database, provides better disk usage(fully synchronized mainchain takes 1.3G disk space), and allows faster synchronization in the future.</li>\n<li><tt>pycardano.py sign</tt> sign a message with wallet, prove an wallet address belongs to you.</li>\n<li><tt>pycardano.py verify</tt> verify a signed message.</li>\n<li><tt>pycardano.py utxo stat</tt> Some statistics of global UTxOs.</li>\n</ul>\n</div>\n<div id=\"modules\">\n<h2>Modules</h2>\n<ul>\n<li><p><tt>cardano.address</tt></p>\n<p>Implement Cardano HD address derivation and encoding, and wallet recovering for lagacy address format.</p>\n</li>\n<li><p><tt>cardano.transport</tt></p>\n<p>Implement Haskell\u2019s network-transport-tcp, multiplex multiple lightweight unidirectional connections on a single tcp connection.</p>\n</li>\n<li><p><tt>cardano.node</tt></p>\n<p>Implement cardano-sl\u2019s <tt>Node</tt>, allow bidirectional conversation between endpoints.</p>\n</li>\n<li><p><tt>cardano.storage</tt></p>\n<p>Storage api of block and wallet\u2019s data.</p>\n</li>\n<li><p><tt>cardano.block</tt></p>\n<p>Block data structures.</p>\n</li>\n<li><p><tt>cardano.logic</tt></p>\n<p>Workers and listeners of default node.</p>\n</li>\n<li><p><tt>cardano.retrieve</tt></p>\n<p>Retrieve block data with cardano-sl mainnet.</p>\n</li>\n<li><p><tt>cardano.wallet</tt></p>\n<p>Implement wallet logic according to formal specification.</p>\n</li>\n</ul>\n</div>\n<div id=\"todos\">\n<h2>TODOs</h2>\n<ul>\n<li>wallet state storage, a simple solution first, hopefully something like Haskell\u2019s acid-state in the end.</li>\n<li>block verification.</li>\n<li>relay block data with stream api.</li>\n<li>wallet cli app.</li>\n<li>wallet V1 api and api for SPV light client.</li>\n<li>clustered wallet storage.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4451258, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "002ea8d88bccacb06cdc6ea0aa3ddb32", "sha256": "826fa4709d905e5c8875e840a0e60891c15020edd1851c5c90ad663c25dd126b"}, "downloads": -1, "filename": "python-cardano-1.0.1.tar.gz", "has_sig": false, "md5_digest": "002ea8d88bccacb06cdc6ea0aa3ddb32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1261415, "upload_time": "2018-11-05T02:15:30", "upload_time_iso_8601": "2018-11-05T02:15:30.178675Z", "url": "https://files.pythonhosted.org/packages/d4/9d/d221f219fbc01fccdbf744d974dd107a81a3b6f5f3732b0ec9757be0e411/python-cardano-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "002ea8d88bccacb06cdc6ea0aa3ddb32", "sha256": "826fa4709d905e5c8875e840a0e60891c15020edd1851c5c90ad663c25dd126b"}, "downloads": -1, "filename": "python-cardano-1.0.1.tar.gz", "has_sig": false, "md5_digest": "002ea8d88bccacb06cdc6ea0aa3ddb32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1261415, "upload_time": "2018-11-05T02:15:30", "upload_time_iso_8601": "2018-11-05T02:15:30.178675Z", "url": "https://files.pythonhosted.org/packages/d4/9d/d221f219fbc01fccdbf744d974dd107a81a3b6f5f3732b0ec9757be0e411/python-cardano-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:31 2020"}