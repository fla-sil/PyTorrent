{"info": {"author": "Micha\u00ebl Baudin and Pamphile Roy", "author_email": "michael.baudin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Natural Language :: English", "Operating System :: Unix", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Documentation :: Sphinx", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "[![CircleCI](https://circleci.com/gh/mbaudin47/othdrplot.svg?style=svg)](https://circleci.com/gh/mbaudin47/othdrplot)\n[![Python](https://img.shields.io/badge/python-3.7-blue.svg)](\n    https://python.org)\n[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0)\n\n# otHDRPlot\n\n## What is it?\n\nThis project implements the Functional highest density region boxplot technique (Hyndman and Shang, 2009). \n\nWhen you have functional data (i.e. a set of curves), you will want to answer\nsome questions such as:\n\n* What is the median curve?\n* Can I draw a confidence interval?\n* Or, is there any outlier curves?\n\nThis module allows you to do this: \n\n```\nhdr = ProcessHighDensityRegionAlgorithm(processSample)\nhdr.setOutlierAlpha(0.8)\nhdr.run()\nhdr.drawOutlierTrajectories()\n```\n\nThe output is the following figure: \n\n![npfda-elnino](doc/images/npfda-elnino-OutlierTrajectoryPlot.png)\n\nWith a multivariate sample, the \nMatrixPlot class allows to plot the \nscatter plot matrix, with the density on the diagonal.\n\n```\t\nmp = MatrixPlot(sample)\n_ = mp.draw()\n```\t\n\nThe output is the following figure: \n\n![MatrixPlot-3D](doc/images/MatrixPlot-3D.png)\n\nIn the situation where a multivariate sample is given, the \nHighDensityRegionAlgorithm allows to plot the \nregions where the density is associated with a \ngiven fraction of the population.\n\n```\n# Estimate the distribution\nmyks = ot.KernelSmoothing()\ndistribution = myks.build(sample)\n# Create the HDR algorithm\nmydp = HighDensityRegionAlgorithm(sample, distribution)\nmydp.run()\n_ = mydp.drawContour(drawData=False, drawOutliers=True)\n```\t\n\nThe output is the following figure: \n\n![gauss-mixture-OutlierPlot](doc/images/gauss-mixture-OutlierPlot.png)\n\n## How to install?\n\n### Requirements\n\n[numpy]: http://www.numpy.org\n[matplotlib]: https://matplotlib.org\n[OpenTURNS]: http://www.openturns.org\n\nThe dependencies are: \n\n- Python >= 2.7 or >= 3.3\n- [numpy] >= 0.10\n- [matplotlib] >= 1.5.3\n- [OpenTURNS] >= 1.14\n\n### Installation\n\nUsing the latest python version is prefered! Then to install::\n\n```\ngit clone git@github.com:mbaudin47/othdrplot.git\ncd othdrplot\npython setup.py install\n```\n\n## Examples\n\n[doc]: https://github.com/mbaudin47/othdrplot/tree/master/doc/examples\n[MatrixPlot example]: https://github.com/mbaudin47/othdrplot/tree/master/doc/examples/MatrixPlot.ipynb\n[HDRAlgorithm 3D example]: https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/HighDensityRegionAlgorithm-3D-example.ipynb\n[HDRAlgorithm 2D example]: https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/HighDensityRegionAlgorithm-example.ipynb\n[ProcessHDR in 2D]: https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/ProcessHighDensityRegionAlgorithm-example.ipynb\n[ProcessHDR in 3D]: https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/ProcessHighDensityRegionAlgorithm-3D-example.ipynb\n[ProcessHDR on logistic case]: https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/ProcessHDRAlgorithm-logistic.ipynb\n[ProcessHDR on free fall case]: https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/ProcessHDRAlgorithm-chute.ipynb\n\nSeveral examples are available in the [doc] directory.\n* a [MatrixPlot example]\n* a [HDRAlgorithm 2D example]\n* a [HDRAlgorithm 3D example]\n* a [ProcessHDR in 2D] on the El-Nino data\n* a [ProcessHDR in 3D] on the El-Nino data\n* a [ProcessHDR on logistic case]\n* a [ProcessHDR on free fall case]\n\n## References\n\n* Rob J Hyndman and Han Lin Shang. Rainbow plots , bagplots and boxplots for functional data. Journal of Computational and Graphical Statistics, 19:29-45, 2009\n\n## Algorithms\n\nThree classes are provided:\n\n- `MatrixPlot` : For a multivariate sample, a matrix of scatter plots with the density on the diagonal.\n- `HighDensityRegionAlgorithm` : An algorithm to draw the density of a multivariate sample. \n- `ProcessHighDensityRegionAlgorithm` : An algorithm to compute and draw the density of a multivariate process sample. \n\n### The `HighDensityRegionAlgorithm` class\n\nThis is an algorithm to draw the density of a multivariate sample.\n\n- Compute the minimum levelset associated with the sample.\n- Plots the required minimum level sets and the outliers. \n- Compute and draw the inliers and the outliers, based on the `MatrixPlot`.\n- The main ingredient is distribution of the sample, which is required. \n\nThe basic method to estimate this distribution is kernel smoothing, \nbut any other method can be used, such as a gaussian mixture for example. \n\n### The `ProcessHighDensityRegionAlgorithm` class\n\nThis is an algorithm to draw the density of a process sample. \n\n- Plots the trajectories in the physical space.\n- Plots the projection of the trajectories in the reduced space, based on the `HighDensityRegionAlgorithm`. \n- The main ingredients are the dimension reduction method and the method to estimate the density in the reduced space. \n\nIn the current implementation, the dimension reduction must be provided \nand based on the KarhunenLoeve decomposition (which can be computed \nfrom the SVD or other methods as well). \nThe method to estimate the density in the reduced space is necessarily the \nkernel smoothing in the current implementation. \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mbaudin47/othdrplot", "keywords": "graphics", "license": "LGPL", "maintainer": "", "maintainer_email": "", "name": "othdrplot", "package_url": "https://pypi.org/project/othdrplot/", "platform": "", "project_url": "https://pypi.org/project/othdrplot/", "project_urls": {"Homepage": "https://github.com/mbaudin47/othdrplot"}, "release_url": "https://pypi.org/project/othdrplot/1.0.1/", "requires_dist": ["numpy", "matplotlib", "openturns"], "requires_python": "", "summary": "High Density Region plot", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/mbaudin47/othdrplot\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/804b06f16a2ebd9ec6c6495d48e3643589e942b1/68747470733a2f2f636972636c6563692e636f6d2f67682f6d62617564696e34372f6f74686472706c6f742e7376673f7374796c653d737667\"></a>\n<a href=\"https://python.org\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99a5180f32db379110e9948c7de1aaf8f77bf2e8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e372d626c75652e737667\"></a>\n<a href=\"https://www.gnu.org/licenses/lgpl-3.0\" rel=\"nofollow\"><img alt=\"License: LGPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77342686f9f0a3212f9c057c2a584cc63c77fe0e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4c47504c25323076332d626c75652e737667\"></a></p>\n<h1>otHDRPlot</h1>\n<h2>What is it?</h2>\n<p>This project implements the Functional highest density region boxplot technique (Hyndman and Shang, 2009).</p>\n<p>When you have functional data (i.e. a set of curves), you will want to answer\nsome questions such as:</p>\n<ul>\n<li>What is the median curve?</li>\n<li>Can I draw a confidence interval?</li>\n<li>Or, is there any outlier curves?</li>\n</ul>\n<p>This module allows you to do this:</p>\n<pre><code>hdr = ProcessHighDensityRegionAlgorithm(processSample)\nhdr.setOutlierAlpha(0.8)\nhdr.run()\nhdr.drawOutlierTrajectories()\n</code></pre>\n<p>The output is the following figure:</p>\n<p><img alt=\"npfda-elnino\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ebddd42360f0df6f08aed8a706f3d7c1266f261/646f632f696d616765732f6e706664612d656c6e696e6f2d4f75746c6965725472616a6563746f7279506c6f742e706e67\"></p>\n<p>With a multivariate sample, the\nMatrixPlot class allows to plot the\nscatter plot matrix, with the density on the diagonal.</p>\n<pre><code>mp = MatrixPlot(sample)\n_ = mp.draw()\n</code></pre>\n<p>The output is the following figure:</p>\n<p><img alt=\"MatrixPlot-3D\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca58e56015c15639dfb4ed2783ecb01456a7e015/646f632f696d616765732f4d6174726978506c6f742d33442e706e67\"></p>\n<p>In the situation where a multivariate sample is given, the\nHighDensityRegionAlgorithm allows to plot the\nregions where the density is associated with a\ngiven fraction of the population.</p>\n<pre><code># Estimate the distribution\nmyks = ot.KernelSmoothing()\ndistribution = myks.build(sample)\n# Create the HDR algorithm\nmydp = HighDensityRegionAlgorithm(sample, distribution)\nmydp.run()\n_ = mydp.drawContour(drawData=False, drawOutliers=True)\n</code></pre>\n<p>The output is the following figure:</p>\n<p><img alt=\"gauss-mixture-OutlierPlot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3fad41282bfe31f99c120351a77445e70685c03d/646f632f696d616765732f67617573732d6d6978747572652d4f75746c696572506c6f742e706e67\"></p>\n<h2>How to install?</h2>\n<h3>Requirements</h3>\n<p>The dependencies are:</p>\n<ul>\n<li>Python &gt;= 2.7 or &gt;= 3.3</li>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">numpy</a> &gt;= 0.10</li>\n<li><a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a> &gt;= 1.5.3</li>\n<li><a href=\"http://www.openturns.org\" rel=\"nofollow\">OpenTURNS</a> &gt;= 1.14</li>\n</ul>\n<h3>Installation</h3>\n<p>Using the latest python version is prefered! Then to install::</p>\n<pre><code>git clone git@github.com:mbaudin47/othdrplot.git\ncd othdrplot\npython setup.py install\n</code></pre>\n<h2>Examples</h2>\n<p>Several examples are available in the <a href=\"https://github.com/mbaudin47/othdrplot/tree/master/doc/examples\" rel=\"nofollow\">doc</a> directory.</p>\n<ul>\n<li>a <a href=\"https://github.com/mbaudin47/othdrplot/tree/master/doc/examples/MatrixPlot.ipynb\" rel=\"nofollow\">MatrixPlot example</a></li>\n<li>a <a href=\"https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/HighDensityRegionAlgorithm-example.ipynb\" rel=\"nofollow\">HDRAlgorithm 2D example</a></li>\n<li>a <a href=\"https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/HighDensityRegionAlgorithm-3D-example.ipynb\" rel=\"nofollow\">HDRAlgorithm 3D example</a></li>\n<li>a <a href=\"https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/ProcessHighDensityRegionAlgorithm-example.ipynb\" rel=\"nofollow\">ProcessHDR in 2D</a> on the El-Nino data</li>\n<li>a <a href=\"https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/ProcessHighDensityRegionAlgorithm-3D-example.ipynb\" rel=\"nofollow\">ProcessHDR in 3D</a> on the El-Nino data</li>\n<li>a <a href=\"https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/ProcessHDRAlgorithm-logistic.ipynb\" rel=\"nofollow\">ProcessHDR on logistic case</a></li>\n<li>a <a href=\"https://github.com/mbaudin47/othdrplot/blob/master/doc/examples/ProcessHDRAlgorithm-chute.ipynb\" rel=\"nofollow\">ProcessHDR on free fall case</a></li>\n</ul>\n<h2>References</h2>\n<ul>\n<li>Rob J Hyndman and Han Lin Shang. Rainbow plots , bagplots and boxplots for functional data. Journal of Computational and Graphical Statistics, 19:29-45, 2009</li>\n</ul>\n<h2>Algorithms</h2>\n<p>Three classes are provided:</p>\n<ul>\n<li><code>MatrixPlot</code> : For a multivariate sample, a matrix of scatter plots with the density on the diagonal.</li>\n<li><code>HighDensityRegionAlgorithm</code> : An algorithm to draw the density of a multivariate sample.</li>\n<li><code>ProcessHighDensityRegionAlgorithm</code> : An algorithm to compute and draw the density of a multivariate process sample.</li>\n</ul>\n<h3>The <code>HighDensityRegionAlgorithm</code> class</h3>\n<p>This is an algorithm to draw the density of a multivariate sample.</p>\n<ul>\n<li>Compute the minimum levelset associated with the sample.</li>\n<li>Plots the required minimum level sets and the outliers.</li>\n<li>Compute and draw the inliers and the outliers, based on the <code>MatrixPlot</code>.</li>\n<li>The main ingredient is distribution of the sample, which is required.</li>\n</ul>\n<p>The basic method to estimate this distribution is kernel smoothing,\nbut any other method can be used, such as a gaussian mixture for example.</p>\n<h3>The <code>ProcessHighDensityRegionAlgorithm</code> class</h3>\n<p>This is an algorithm to draw the density of a process sample.</p>\n<ul>\n<li>Plots the trajectories in the physical space.</li>\n<li>Plots the projection of the trajectories in the reduced space, based on the <code>HighDensityRegionAlgorithm</code>.</li>\n<li>The main ingredients are the dimension reduction method and the method to estimate the density in the reduced space.</li>\n</ul>\n<p>In the current implementation, the dimension reduction must be provided\nand based on the KarhunenLoeve decomposition (which can be computed\nfrom the SVD or other methods as well).\nThe method to estimate the density in the reduced space is necessarily the\nkernel smoothing in the current implementation.</p>\n\n          </div>"}, "last_serial": 6953037, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "8e79ffa9c224e8df132d6a59ca7f2410", "sha256": "322a27e707b02273e46235f720a1051e8adbe0d50f60d353e81ab538fb17b68a"}, "downloads": -1, "filename": "othdrplot-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8e79ffa9c224e8df132d6a59ca7f2410", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1936823, "upload_time": "2020-04-04T21:39:04", "upload_time_iso_8601": "2020-04-04T21:39:04.631053Z", "url": "https://files.pythonhosted.org/packages/ef/6c/bf39e5d55258c7f7839730f622d7e8420eb9fe422d5a201b987a492b4da9/othdrplot-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d556b3a5ff8c55bdc252f872f3955788", "sha256": "d1d88b822d9f51565ac837e6681260dcdc5d88a25cf2d975d66469248e71039e"}, "downloads": -1, "filename": "othdrplot-1.0.tar.gz", "has_sig": false, "md5_digest": "d556b3a5ff8c55bdc252f872f3955788", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3635287, "upload_time": "2020-04-04T21:39:47", "upload_time_iso_8601": "2020-04-04T21:39:47.871169Z", "url": "https://files.pythonhosted.org/packages/48/78/207bcc5771d87c05ac2ae4c1aa47553ebd52ea9c6ccf4c4d0faca64a9fb1/othdrplot-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "508673e681addf99ef27a3e55dff5e4e", "sha256": "c4d6d966359b12123bb9319b7193edf58fa4cec6e08ab97ee6988f299c768317"}, "downloads": -1, "filename": "othdrplot-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "508673e681addf99ef27a3e55dff5e4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1936851, "upload_time": "2020-04-04T22:17:27", "upload_time_iso_8601": "2020-04-04T22:17:27.587882Z", "url": "https://files.pythonhosted.org/packages/7c/f3/8c08c01222e4027635871106e806eff51262e21fb3b9440f4201e987aec7/othdrplot-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f861765634059b43db97d5cd7aa565dc", "sha256": "25bc8d6459cc3e658fda2ccd8f6542576b246c1fc159a88eb9f1e907cacd01ca"}, "downloads": -1, "filename": "othdrplot-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f861765634059b43db97d5cd7aa565dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3635313, "upload_time": "2020-04-04T22:18:11", "upload_time_iso_8601": "2020-04-04T22:18:11.435420Z", "url": "https://files.pythonhosted.org/packages/ac/f3/b97773dbfabc55dd8b84ec7ba969fa4065423e2deaf9dc06d42b5f7bce88/othdrplot-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "508673e681addf99ef27a3e55dff5e4e", "sha256": "c4d6d966359b12123bb9319b7193edf58fa4cec6e08ab97ee6988f299c768317"}, "downloads": -1, "filename": "othdrplot-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "508673e681addf99ef27a3e55dff5e4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1936851, "upload_time": "2020-04-04T22:17:27", "upload_time_iso_8601": "2020-04-04T22:17:27.587882Z", "url": "https://files.pythonhosted.org/packages/7c/f3/8c08c01222e4027635871106e806eff51262e21fb3b9440f4201e987aec7/othdrplot-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f861765634059b43db97d5cd7aa565dc", "sha256": "25bc8d6459cc3e658fda2ccd8f6542576b246c1fc159a88eb9f1e907cacd01ca"}, "downloads": -1, "filename": "othdrplot-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f861765634059b43db97d5cd7aa565dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3635313, "upload_time": "2020-04-04T22:18:11", "upload_time_iso_8601": "2020-04-04T22:18:11.435420Z", "url": "https://files.pythonhosted.org/packages/ac/f3/b97773dbfabc55dd8b84ec7ba969fa4065423e2deaf9dc06d42b5f7bce88/othdrplot-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:51 2020"}