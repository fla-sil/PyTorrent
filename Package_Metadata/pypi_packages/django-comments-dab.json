{"info": {"author": "Radico", "author_email": "mus.radi85@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": ".. image:: https://badge.fury.io/py/django-comments-dab.svg\n    :target: https://badge.fury.io/py/django-comments-dab\n\n.. image:: https://badge.fury.io/gh/radi85%2FComment.svg\n    :target: https://badge.fury.io/gh/radi85%2FComment\n\n.. image:: https://travis-ci.org/Radi85/Comment.svg\n    :target: https://travis-ci.org/Radi85/Comment\n\n.. image:: https://coveralls.io/repos/github/Radi85/Comment/badge.svg\n    :target: https://coveralls.io/github/Radi85/Comment\n\n.. image:: https://img.shields.io/pypi/pyversions/django-comments-dab.svg\n   :target: https://pypi.python.org/pypi/django-comments-dab/\n\n.. image:: https://img.shields.io/pypi/djversions/django-comments-dab.svg\n   :target: https://pypi.python.org/pypi/django-comments-dab/\n\ndjango-comments-dab\n===================\n\n**dab stands for Django-Ajax-Bootstrap**\n\n``django-comments-dab`` is a commenting application for Django-powered\nwebsites.\n\nIt allows you to integrate commenting functionality with any model you have e.g. blogs, pictures, video etc\u2026\n\n*List of actions the authenticated user can do:*\n\n    1. Post a new comment.\n\n    2. Reply to an existing comment.\n\n    3. Edit a comment you posted.\n\n    4. Delete a comment you posted.\n\n\n- All actions are done by ajax calls - JQuery 3.2.1\n\n- Bootstrap 4.1.1 is used in comment templates for responsive design.\n\n\nInstallation\n------------\n\nRequirements:\n~~~~~~~~~~~~~\n\n    1. **django>=2.1**\n    2. **djangorestframework**  # only for API Framework\n    3. **Bootstrap 4.1.1**\n    4. **jQuery 3.2.1**\n\n\nInstallation:\n~~~~~~~~~~~~~\n\n\nInstallation is available via ``pip``\n\n::\n\n    $ pip install django-comments-dab\n\n\nor via source on github\n\n::\n\n    $ git clone https://github.com/radi85/Comment.git\n    $ cd Comment\n    $ python setup.py install\n\n\nComment Settings and urls:\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    1. Add ``comment`` to your installed_apps in your ``settings.py`` file. It should be added after ``django.contrib.auth``.\n    2. ``LOGIN_URL`` shall be defined in the settings.\n\nyour ``settings.py`` should look like the following:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        ...\n        'comment',\n        ..\n    )\n\n    LOGIN_URL = 'login'  # or your actual url\n\nIn your ``urls.py``:\n\n.. code:: python\n\n    urlpatterns = patterns(\n        path('admin/', admin.site.urls),\n        path('comment/', include('comment.urls')),\n        ...\n        path('api/', include('comment.api.urls')),  # only for API Framework\n        ...\n    )\n\nMigrations:\n~~~~~~~~~~~\n\nMigrate comment app:\n\n::\n\n    $ python manage.py migrate comment\n\n\n\nSetup\n-----\n\nStep 1 - Connecting comment model with the target model\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn your models.py add the field ``comments`` as a ``GenericRelation`` field to the required model.\n\nPS: Please note that field name must be ``comments`` **NOT** ``comment``.\n\nE.g. ``Post`` model, as shown below:\n\n.. code:: python\n\n    from django.contrib.contenttypes.fields import GenericRelation\n    from comment.models import Comment\n\n    class Post(models.Model):\n        author = models.ForeignKey(User)\n        title = models.CharField(max_length=200)\n        body = models.TextField()\n        # the field name should be comments\n        comments = GenericRelation(Comment)\n\nStep 2 - Adding template tags:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``render_comments`` *tag uses 2 positional and 2 optional args*:\n\n    1. Instance of the targeted model. (**positional**)\n    2. Request object. (**positional**)\n    3. oauth. (optional - Default is false)\n    4. comments_per_page (number of Comments Per Page - Default is 10)\n\n\n1. Basics usage:\n^^^^^^^^^^^^^^^^\n\n``include_static`` this tag will include required jquery and javascript file,\nif you already use jquery please make sure it is not the slim version which doesn't support ajax.\n``include_bootstrap`` tag is for bootstrap-4.1.1, if it\u2019s already included\nin your project, get rid of this tag.\n\nIn your template (e.g. post_detail.html) add the following template tags where ``obj`` is the instance of post model.\n\n.. code:: python\n\n    {% load comment_tags %}  # Loading the template tag\n    {% render_comments obj request %}  # Render all the comments belonging to a passed object\n\n\n**Include static files:**\n\nThe ``comment`` app has three template tags for static files that the app requires.\nThese tags need to be included in the end of your base template.\n\n\n- **Case 1:** You already have jQuery in your project then the following tags shall be included below jQuery file:\n\n.. code:: html\n\n    {% load comment_tags %}  <!-- Loading the template tag -->\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.js\"></script>\n    {% include_static %}  <!-- Include comment.js file only -->\n    {% include_bootstrap %}  <!-- Include bootstrap-4.1.1 - remove this line if it is already used in your project -->\n\n\n- **Case 2:** You don't have jQuery in your project then the following tags shall be included:\n\n.. code:: html\n\n    {% load comment_tags %}  <!-- Loading the template tag -->\n\n    {% include_static_jquery %}  <!-- Include mini jQuery 3.2.1 and required js file -->\n    {% include_bootstrap %}  <!-- Include bootstrap 4.1.1 - remove this line if BS 4.1.1 is already used in your project -->\n\n\n2. Advanced usage:\n^^^^^^^^^^^^^^^^^^\n\n    **1. Customize or remove the pagination:**\n\n    By default the comments will be paginated, 10 comments per page.\n    To disabled the pagination pass ``comments_per_page=None``\n    To change the default number, pass ``comments_per_page=number`` to ``render_comments``.\n\n    .. code:: html\n\n        {% load comment_tags %}  <!-- Loading the template tag -->\n\n        {% render_comments obj request comments_per_page=5 %}  <!-- Include all the comments belonging to a certain object -->\n        {% include_bootstrap %} <!-- Include bootstrap 4.1.1 - remove this line if BS 4.1.1 is already used in your project -->\n        {% include_static %} <!-- Include jQuery 3.2.1 and required js file -->\n\n\n\n    **2. Integrate existing profile app with comments app:**\n\n    If you have a profile model for the user and you would like to show the\n    profile image next to each comment, do the following steps:\n\n    - Add ``PROFILE_APP_NAME`` and ``PROFILE_MODEL_NAME`` variables to your ``settings.py`` file.\n        e.g if user profile app is called ``accounts`` and profile model is called ``UserProfile``\n\n        ``settings.py``:\n\n        .. code:: python\n\n            PROFILE_APP_NAME = 'accounts'\n            PROFILE_MODEL_NAME = 'UserProfile' # letter case insensitive\n\n\n\n    - Make sure that ``get_absolute_url`` method is defined in your profile model.\n\n        .. code:: python\n\n            from django.urls import reverse\n\n            class UserProfile(models.Model):\n                user = models.OneToOneField(User, on_delete=models.CASCADE)\n                ...\n                ...\n\n                # this method must be defined for appropriate url mapping in comments section\n                def get_absolute_url(self):\n                    return reverse('your_profile_url_name')\n\n\nWeb API\n-------\n\ndjango-comments-dab uses django-rest-framework to expose a Web API that provides\ndevelopers with access to the same functionality offered through the web user interface.\n\nThere are 5 methods available to perform the following actions:\n\n\n    1. Post a new comment. (Authenticated)\n\n    2. Reply to an existing comment. (Authenticated)\n\n    3. Edit a comment you posted. (Authenticated)\n\n    4. Delete a comment you posted. (Authenticated)\n\n    5. Retrieve the list of comments and associated replies to a given content type and object ID.\n\nThese actions are explained below.\n\nSetup:\n~~~~~~\n\nTo integrate the comment API in your content type (e.g Post model), in ``serializers.py``\nfor the Post model add comments field as shown below:\n\n\n.. code:: python\n\n    from rest_framework import serializers\n    from comment.models import Comment\n    from comment.api.serializers import CommentSerializer\n\n\n    class PostSerializer(serializers.ModelSerializer):\n\n        comments = serializers.SerializerMethodField()\n\n        class Meta:\n            model = Post\n            fields = ('id',\n                      ...\n                      ...\n                      'comments')\n\n        def get_comments(self, obj):\n            comments_qs = Comment.objects.filter_parents_by_object(obj)\n            return CommentSerializer(comments_qs, many=True).data\n\n\nBy default all fields in profile model will be nested inside the user object in JSON response.\nThis can only happen if the profile attributes are defined in your ``settings.py``.\nIn case you would like to serialize particular fields in the profile model you should explicitly\ndeclare the ``COMMENT_PROFILE_API_FIELDS`` tuple inside your ``settings.py``:\n\n\n.. code:: python\n\n        PROFILE_APP_NAME = 'accounts'\n        PROFILE_MODEL_NAME = 'userprofile'\n        # the field names below must be similar to your profile model fields\n        COMMENT_PROFILE_API_FIELDS = ('display_name', 'birth_date', 'image')\n\n\nComment API actions:\n~~~~~~~~~~~~~~~~~~~~\n\n    **1- Retrieve the list of comments and associated replies to a given content type and object ID:**\n\n    This action can be performed by providing the url with data queries related to the content type.\n\n    Get request accepts 3 params:\n\n\n    - ``type``: is the model name of the content type that have comments associated with it.\n    - ``id``: is the id of an object of that model\n\n\n\n\n    For example if you are using axios to retrieve the comment list of second object (id=2) of a model (content type) called post.\n    you can do the following:\n\n    ::\n\n        $ curl 'http://localhost:8000/api/comments/?type=TYPE&id=ID'\n\n\n    **2- Post a comment or reply to an existing comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    - ``parent_id``: is 0 or **NOT PROVIDED** for parent comments and for reply comments must be the id of parent comment\n\n\n    Example: posting a parent comment\n\n    ::\n\n        $ curl -X POST -u USERNAME:PASSWORD -d \"content=CONTENT\" \"http://localhost:8000/api/comments/create/?type=MODEL&id=ID&parent_id=0\"\n\n\n    **3- Update a comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    This action requires the ``comment.id`` that you want to update:\n\n\n    ::\n\n        $ curl -X PUT -u USERNAME:PASSWORD -d \"content=CONTENT\" \"http://localhost:8000/api/comments/ID/\n\n\n\n    **4- Delete a comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    This action requires the ``comment.id`` that you want to delete:\n\n    ::\n\n        $ curl -X DELETE -u USERNAME:PASSWORD \"http://localhost:8000/api/comments/ID/\n\n\n\nStyle Customize:\n----------------\n\n1- Bootstrap classes:\n~~~~~~~~~~~~~~~~~~~~~\n\nBS class used in the default template can be now customized from within your templates directory as follows:\n\n    1. Create ``comment`` folder inside your templates directory.\n\n    2. Create new template file ``.html`` with the same name of the default template you wish to override BS classes in it.\n\n\nfor example to override the BS classes of comment and reply btn do the following:\n\ncreate ``templates/comment/create_comment.html``\n\n.. code:: python\n\n    {% extends \"comment/create_comment.html\" %}\n\n    {% block post_btn_cls %}\n    btn btn-primary btn-block btn-sm\n    {% endblock post_btn_cls %}\n\n`Read the Doc`_ for more info about template names and block tags name.\n\n.. _`Read the Doc`: https://django-comment-dab.readthedocs.io/\n\n\n2- CSS file:\n~~~~~~~~~~~~\n\nIf you want to customize the default style of comments app , you can do the following steps:\n\n    1. Create a ``comment.css`` file inside your ``static/css`` directory.\n\n    2. The new created file will override the original file used in the app.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/radi85/Comment", "keywords": "comment comment development", "license": "MIT", "maintainer": "Radi Mustafa", "maintainer_email": "mus.radi85@gmail.com", "name": "django-comments-dab", "package_url": "https://pypi.org/project/django-comments-dab/", "platform": "", "project_url": "https://pypi.org/project/django-comments-dab/", "project_urls": {"Documentation": "https://django-comment-dab.readthedocs.io/index.html", "Homepage": "https://github.com/radi85/Comment", "Source Code": "https://github.com/radi85/Comment"}, "release_url": "https://pypi.org/project/django-comments-dab/1.4.0/", "requires_dist": null, "requires_python": "", "summary": "Django Comment app. It can be associated with any given model.", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/django-comments-dab\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-comments-dab.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/158a28786b225963ffad299c6d4d7fd975889bc0/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d636f6d6d656e74732d6461622e737667\"></a>\n<a href=\"https://badge.fury.io/gh/radi85%2FComment\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/gh/radi85%2FComment.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88ed128aeeb8a63bc2e925be8b420e7824b76695/68747470733a2f2f62616467652e667572792e696f2f67682f726164693835253246436f6d6d656e742e737667\"></a>\n<a href=\"https://travis-ci.org/Radi85/Comment\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/Radi85/Comment.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fec115116771c96449cd02b5c1808da6ce1047b8/68747470733a2f2f7472617669732d63692e6f72672f5261646938352f436f6d6d656e742e737667\"></a>\n<a href=\"https://coveralls.io/github/Radi85/Comment\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/Radi85/Comment/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b1512b9522d2c9ac4b88687b762a044b2aeee4a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5261646938352f436f6d6d656e742f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-comments-dab/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/django-comments-dab.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d420f233ec151c73a85e22f0107ffc79ad06d52c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d636f6d6d656e74732d6461622e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-comments-dab/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/djversions/django-comments-dab.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d703210dc916d5bed7b98aaa491534215947fe8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646a76657273696f6e732f646a616e676f2d636f6d6d656e74732d6461622e737667\"></a>\n<div id=\"django-comments-dab\">\n<h2>django-comments-dab</h2>\n<p><strong>dab stands for Django-Ajax-Bootstrap</strong></p>\n<p><tt><span class=\"pre\">django-comments-dab</span></tt> is a commenting application for Django-powered\nwebsites.</p>\n<p>It allows you to integrate commenting functionality with any model you have e.g. blogs, pictures, video etc\u2026</p>\n<p><em>List of actions the authenticated user can do:</em></p>\n<blockquote>\n<ol>\n<li>Post a new comment.</li>\n<li>Reply to an existing comment.</li>\n<li>Edit a comment you posted.</li>\n<li>Delete a comment you posted.</li>\n</ol>\n</blockquote>\n<ul>\n<li>All actions are done by ajax calls - JQuery 3.2.1</li>\n<li>Bootstrap 4.1.1 is used in comment templates for responsive design.</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<div id=\"requirements\">\n<h4>Requirements:</h4>\n<blockquote>\n<ol>\n<li><strong>django&gt;=2.1</strong></li>\n<li><strong>djangorestframework</strong>  # only for API Framework</li>\n<li><strong>Bootstrap 4.1.1</strong></li>\n<li><strong>jQuery 3.2.1</strong></li>\n</ol>\n</blockquote>\n</div>\n<div id=\"id1\">\n<h4>Installation:</h4>\n<p>Installation is available via <tt>pip</tt></p>\n<pre>$ pip install django-comments-dab\n</pre>\n<p>or via source on github</p>\n<pre>$ git clone https://github.com/radi85/Comment.git\n$ cd Comment\n$ python setup.py install\n</pre>\n</div>\n<div id=\"comment-settings-and-urls\">\n<h4>Comment Settings and urls:</h4>\n<blockquote>\n<ol>\n<li>Add <tt>comment</tt> to your installed_apps in your <tt>settings.py</tt> file. It should be added after <tt>django.contrib.auth</tt>.</li>\n<li><tt>LOGIN_URL</tt> shall be defined in the settings.</li>\n</ol>\n</blockquote>\n<p>your <tt>settings.py</tt> should look like the following:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'comment'</span><span class=\"p\">,</span>\n    <span class=\"o\">..</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">LOGIN_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'login'</span>  <span class=\"c1\"># or your actual url</span>\n</pre>\n<p>In your <tt>urls.py</tt>:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'comment/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'comment.urls'</span><span class=\"p\">)),</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'api/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'comment.api.urls'</span><span class=\"p\">)),</span>  <span class=\"c1\"># only for API Framework</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"migrations\">\n<h4>Migrations:</h4>\n<p>Migrate comment app:</p>\n<pre>$ python manage.py migrate comment\n</pre>\n</div>\n</div>\n<div id=\"setup\">\n<h3>Setup</h3>\n<div id=\"step-1-connecting-comment-model-with-the-target-model\">\n<h4>Step 1 - Connecting comment model with the target model</h4>\n<p>In your models.py add the field <tt>comments</tt> as a <tt>GenericRelation</tt> field to the required model.</p>\n<p>PS: Please note that field name must be <tt>comments</tt> <strong>NOT</strong> <tt>comment</tt>.</p>\n<p>E.g. <tt>Post</tt> model, as shown below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.contenttypes.fields</span> <span class=\"kn\">import</span> <span class=\"n\">GenericRelation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comment.models</span> <span class=\"kn\">import</span> <span class=\"n\">Comment</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"c1\"># the field name should be comments</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">GenericRelation</span><span class=\"p\">(</span><span class=\"n\">Comment</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"step-2-adding-template-tags\">\n<h4>Step 2 - Adding template tags:</h4>\n<p><tt>render_comments</tt> <em>tag uses 2 positional and 2 optional args</em>:</p>\n<blockquote>\n<ol>\n<li>Instance of the targeted model. (<strong>positional</strong>)</li>\n<li>Request object. (<strong>positional</strong>)</li>\n<li>oauth. (optional - Default is false)</li>\n<li>comments_per_page (number of Comments Per Page - Default is 10)</li>\n</ol>\n</blockquote>\n<div id=\"basics-usage\">\n<h5>1. Basics usage:</h5>\n<p><tt>include_static</tt> this tag will include required jquery and javascript file,\nif you already use jquery please make sure it is not the slim version which doesn\u2019t support ajax.\n<tt>include_bootstrap</tt> tag is for bootstrap-4.1.1, if it\u2019s already included\nin your project, get rid of this tag.</p>\n<p>In your template (e.g. post_detail.html) add the following template tags where <tt>obj</tt> is the instance of post model.</p>\n<pre><span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">load</span> <span class=\"n\">comment_tags</span> <span class=\"o\">%</span><span class=\"p\">}</span>  <span class=\"c1\"># Loading the template tag</span>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">render_comments</span> <span class=\"n\">obj</span> <span class=\"n\">request</span> <span class=\"o\">%</span><span class=\"p\">}</span>  <span class=\"c1\"># Render all the comments belonging to a passed object</span>\n</pre>\n<p><strong>Include static files:</strong></p>\n<p>The <tt>comment</tt> app has three template tags for static files that the app requires.\nThese tags need to be included in the end of your base template.</p>\n<ul>\n<li><strong>Case 1:</strong> You already have jQuery in your project then the following tags shall be included below jQuery file:</li>\n</ul>\n<pre>{% load comment_tags %}  <span class=\"c\">&lt;!-- Loading the template tag --&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://code.jquery.com/jquery-3.3.1.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n{% include_static %}  <span class=\"c\">&lt;!-- Include comment.js file only --&gt;</span>\n{% include_bootstrap %}  <span class=\"c\">&lt;!-- Include bootstrap-4.1.1 - remove this line if it is already used in your project --&gt;</span>\n</pre>\n<ul>\n<li><strong>Case 2:</strong> You don\u2019t have jQuery in your project then the following tags shall be included:</li>\n</ul>\n<pre>{% load comment_tags %}  <span class=\"c\">&lt;!-- Loading the template tag --&gt;</span>\n\n{% include_static_jquery %}  <span class=\"c\">&lt;!-- Include mini jQuery 3.2.1 and required js file --&gt;</span>\n{% include_bootstrap %}  <span class=\"c\">&lt;!-- Include bootstrap 4.1.1 - remove this line if BS 4.1.1 is already used in your project --&gt;</span>\n</pre>\n</div>\n<div id=\"advanced-usage\">\n<h5>2. Advanced usage:</h5>\n<blockquote>\n<p><strong>1. Customize or remove the pagination:</strong></p>\n<p>By default the comments will be paginated, 10 comments per page.\nTo disabled the pagination pass <tt>comments_per_page=None</tt>\nTo change the default number, pass <tt>comments_per_page=number</tt> to <tt>render_comments</tt>.</p>\n<pre>{% load comment_tags %}  <span class=\"c\">&lt;!-- Loading the template tag --&gt;</span>\n\n{% render_comments obj request comments_per_page=5 %}  <span class=\"c\">&lt;!-- Include all the comments belonging to a certain object --&gt;</span>\n{% include_bootstrap %} <span class=\"c\">&lt;!-- Include bootstrap 4.1.1 - remove this line if BS 4.1.1 is already used in your project --&gt;</span>\n{% include_static %} <span class=\"c\">&lt;!-- Include jQuery 3.2.1 and required js file --&gt;</span>\n</pre>\n<p><strong>2. Integrate existing profile app with comments app:</strong></p>\n<p>If you have a profile model for the user and you would like to show the\nprofile image next to each comment, do the following steps:</p>\n<ul>\n<li><dl>\n<dt>Add <tt>PROFILE_APP_NAME</tt> and <tt>PROFILE_MODEL_NAME</tt> variables to your <tt>settings.py</tt> file.</dt>\n<dd><p>e.g if user profile app is called <tt>accounts</tt> and profile model is called <tt>UserProfile</tt></p>\n<p><tt>settings.py</tt>:</p>\n<pre><span class=\"n\">PROFILE_APP_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'accounts'</span>\n<span class=\"n\">PROFILE_MODEL_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'UserProfile'</span> <span class=\"c1\"># letter case insensitive</span>\n</pre>\n</dd>\n</dl>\n</li>\n<li><p>Make sure that <tt>get_absolute_url</tt> method is defined in your profile model.</p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserProfile</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"c1\"># this method must be defined for appropriate url mapping in comments section</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s1\">'your_profile_url_name'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</div>\n</div>\n</div>\n<div id=\"web-api\">\n<h3>Web API</h3>\n<p>django-comments-dab uses django-rest-framework to expose a Web API that provides\ndevelopers with access to the same functionality offered through the web user interface.</p>\n<p>There are 5 methods available to perform the following actions:</p>\n<blockquote>\n<ol>\n<li>Post a new comment. (Authenticated)</li>\n<li>Reply to an existing comment. (Authenticated)</li>\n<li>Edit a comment you posted. (Authenticated)</li>\n<li>Delete a comment you posted. (Authenticated)</li>\n<li>Retrieve the list of comments and associated replies to a given content type and object ID.</li>\n</ol>\n</blockquote>\n<p>These actions are explained below.</p>\n<div id=\"id2\">\n<h4>Setup:</h4>\n<p>To integrate the comment API in your content type (e.g Post model), in <tt>serializers.py</tt>\nfor the Post model add comments field as shown below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">serializers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comment.models</span> <span class=\"kn\">import</span> <span class=\"n\">Comment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comment.api.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">CommentSerializer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">SerializerMethodField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span>\n                  <span class=\"o\">...</span>\n                  <span class=\"o\">...</span>\n                  <span class=\"s1\">'comments'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_comments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"n\">comments_qs</span> <span class=\"o\">=</span> <span class=\"n\">Comment</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter_parents_by_object</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">CommentSerializer</span><span class=\"p\">(</span><span class=\"n\">comments_qs</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</pre>\n<p>By default all fields in profile model will be nested inside the user object in JSON response.\nThis can only happen if the profile attributes are defined in your <tt>settings.py</tt>.\nIn case you would like to serialize particular fields in the profile model you should explicitly\ndeclare the <tt>COMMENT_PROFILE_API_FIELDS</tt> tuple inside your <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">PROFILE_APP_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'accounts'</span>\n<span class=\"n\">PROFILE_MODEL_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'userprofile'</span>\n<span class=\"c1\"># the field names below must be similar to your profile model fields</span>\n<span class=\"n\">COMMENT_PROFILE_API_FIELDS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'display_name'</span><span class=\"p\">,</span> <span class=\"s1\">'birth_date'</span><span class=\"p\">,</span> <span class=\"s1\">'image'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"comment-api-actions\">\n<h4>Comment API actions:</h4>\n<blockquote>\n<p><strong>1- Retrieve the list of comments and associated replies to a given content type and object ID:</strong></p>\n<p>This action can be performed by providing the url with data queries related to the content type.</p>\n<p>Get request accepts 3 params:</p>\n<ul>\n<li><tt>type</tt>: is the model name of the content type that have comments associated with it.</li>\n<li><tt>id</tt>: is the id of an object of that model</li>\n</ul>\n<p>For example if you are using axios to retrieve the comment list of second object (id=2) of a model (content type) called post.\nyou can do the following:</p>\n<pre>$ curl 'http://localhost:8000/api/comments/?type=TYPE&amp;id=ID'\n</pre>\n<p><strong>2- Post a comment or reply to an existing comment:</strong></p>\n<p>Authorization must be provided as a TOKEN or USERNAME:PASSWORD.</p>\n<ul>\n<li><tt>parent_id</tt>: is 0 or <strong>NOT PROVIDED</strong> for parent comments and for reply comments must be the id of parent comment</li>\n</ul>\n<p>Example: posting a parent comment</p>\n<pre>$ curl -X POST -u USERNAME:PASSWORD -d \"content=CONTENT\" \"http://localhost:8000/api/comments/create/?type=MODEL&amp;id=ID&amp;parent_id=0\"\n</pre>\n<p><strong>3- Update a comment:</strong></p>\n<p>Authorization must be provided as a TOKEN or USERNAME:PASSWORD.</p>\n<p>This action requires the <tt>comment.id</tt> that you want to update:</p>\n<pre>$ curl -X PUT -u USERNAME:PASSWORD -d \"content=CONTENT\" \"http://localhost:8000/api/comments/ID/\n</pre>\n<p><strong>4- Delete a comment:</strong></p>\n<p>Authorization must be provided as a TOKEN or USERNAME:PASSWORD.</p>\n<p>This action requires the <tt>comment.id</tt> that you want to delete:</p>\n<pre>$ curl -X DELETE -u USERNAME:PASSWORD \"http://localhost:8000/api/comments/ID/\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"style-customize\">\n<h3>Style Customize:</h3>\n<div id=\"bootstrap-classes\">\n<h4>1- Bootstrap classes:</h4>\n<p>BS class used in the default template can be now customized from within your templates directory as follows:</p>\n<blockquote>\n<ol>\n<li>Create <tt>comment</tt> folder inside your templates directory.</li>\n<li>Create new template file <tt>.html</tt> with the same name of the default template you wish to override BS classes in it.</li>\n</ol>\n</blockquote>\n<p>for example to override the BS classes of comment and reply btn do the following:</p>\n<p>create <tt>templates/comment/create_comment.html</tt></p>\n<pre><span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">extends</span> <span class=\"s2\">\"comment/create_comment.html\"</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">block</span> <span class=\"n\">post_btn_cls</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"n\">btn</span> <span class=\"n\">btn</span><span class=\"o\">-</span><span class=\"n\">primary</span> <span class=\"n\">btn</span><span class=\"o\">-</span><span class=\"n\">block</span> <span class=\"n\">btn</span><span class=\"o\">-</span><span class=\"n\">sm</span>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">endblock</span> <span class=\"n\">post_btn_cls</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n</pre>\n<p><a href=\"https://django-comment-dab.readthedocs.io/\" rel=\"nofollow\">Read the Doc</a> for more info about template names and block tags name.</p>\n</div>\n<div id=\"css-file\">\n<h4>2- CSS file:</h4>\n<p>If you want to customize the default style of comments app , you can do the following steps:</p>\n<blockquote>\n<ol>\n<li>Create a <tt>comment.css</tt> file inside your <tt>static/css</tt> directory.</li>\n<li>The new created file will override the original file used in the app.</li>\n</ol>\n</blockquote>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7106127, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "389cee15f77aeb2b47b925e3493ca963", "sha256": "78d45d89e115d5d28605fdd55298460a613b2fdcdd5a80c25a5fc97e15646e1b"}, "downloads": -1, "filename": "django-comments-dab-1.0.0.tar.gz", "has_sig": false, "md5_digest": "389cee15f77aeb2b47b925e3493ca963", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64062, "upload_time": "2018-09-01T20:28:34", "upload_time_iso_8601": "2018-09-01T20:28:34.323871Z", "url": "https://files.pythonhosted.org/packages/01/d9/4a269ab87323affcfda6182657e9ee472aa9240514f1195b1e6abd6495f9/django-comments-dab-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8ac67b1c86f04c2f8fe666665df31b9f", "sha256": "09060e74e62f1c5f416c34469044239b14b94e91775ed720b82447d025bb0a95"}, "downloads": -1, "filename": "django-comments-dab-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8ac67b1c86f04c2f8fe666665df31b9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68666, "upload_time": "2018-09-03T14:55:15", "upload_time_iso_8601": "2018-09-03T14:55:15.185140Z", "url": "https://files.pythonhosted.org/packages/00/3c/6efd0a73c8298f7aa3ac6d6e0433358e30d40b485ca3fb3614c2be56fea1/django-comments-dab-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c8f482f6b91672be6ddaaba5ecb717b6", "sha256": "d0f36f5777ab43108179abde576c103b8ec3dce099db3c20b8ad2a970c96e044"}, "downloads": -1, "filename": "django-comments-dab-1.1.0.tar.gz", "has_sig": false, "md5_digest": "c8f482f6b91672be6ddaaba5ecb717b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69751, "upload_time": "2018-09-05T12:29:13", "upload_time_iso_8601": "2018-09-05T12:29:13.010490Z", "url": "https://files.pythonhosted.org/packages/1a/c3/cdaefade13800c211750185d4e7aafa81926d4415d62800b7b059f7736d7/django-comments-dab-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "414d88227d9aadedd478fe2b3db01bbe", "sha256": "5092e1317588ac663320eebef8497998b17a483f7f94cf4ff10ce3cf5c2b32b1"}, "downloads": -1, "filename": "django-comments-dab-1.1.1.tar.gz", "has_sig": false, "md5_digest": "414d88227d9aadedd478fe2b3db01bbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70209, "upload_time": "2018-09-08T14:13:47", "upload_time_iso_8601": "2018-09-08T14:13:47.286301Z", "url": "https://files.pythonhosted.org/packages/3e/e3/2917d535d693777178b5f2c7a05dd5a8f9871763df3697d454fc6a356a6c/django-comments-dab-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "77304556e1fd62547610f5de62f6cef4", "sha256": "ff7680070324f18a267bde19c6bcf08b1cc320e7567583aa8e6950337e213b5b"}, "downloads": -1, "filename": "django-comments-dab-1.2.0.tar.gz", "has_sig": false, "md5_digest": "77304556e1fd62547610f5de62f6cef4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73035, "upload_time": "2018-10-07T14:31:41", "upload_time_iso_8601": "2018-10-07T14:31:41.490171Z", "url": "https://files.pythonhosted.org/packages/b0/f3/565779fa8e136112ae41841a9435250849ced8c808b47c22de4f74fe54fb/django-comments-dab-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "ce3cbade454e337fe34b7ffc8ce20bf8", "sha256": "0feca15f9d8947e1231c6f30f43e6528ad64fbf6b6357151671cd28ec31e87ba"}, "downloads": -1, "filename": "django-comments-dab-1.2.1.tar.gz", "has_sig": false, "md5_digest": "ce3cbade454e337fe34b7ffc8ce20bf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88008, "upload_time": "2018-10-10T14:43:35", "upload_time_iso_8601": "2018-10-10T14:43:35.488709Z", "url": "https://files.pythonhosted.org/packages/b9/30/5b1d83843ee9d9e0cced9bc08009a37b789f9a6c26334085d6c98e753d66/django-comments-dab-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "df55b0635e07264d7f2d410b509b2351", "sha256": "56b081805280ff619c1b84b6822078ff29694c70a6b7913641661f1ba8e97fc4"}, "downloads": -1, "filename": "django-comments-dab-1.2.2.tar.gz", "has_sig": false, "md5_digest": "df55b0635e07264d7f2d410b509b2351", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88913, "upload_time": "2018-10-27T13:12:43", "upload_time_iso_8601": "2018-10-27T13:12:43.375822Z", "url": "https://files.pythonhosted.org/packages/0f/bc/25fe0d3c413f162bc291ad9c76115473c4877be11ff67157c83e08b3df53/django-comments-dab-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "314d1df71fcd71b5bcc088e9aa13938d", "sha256": "bba9e18c1af4766ac8f7dc48d066b7ad151a1a118c2b72949a76ae59240ef9cb"}, "downloads": -1, "filename": "django-comments-dab-1.2.3.tar.gz", "has_sig": false, "md5_digest": "314d1df71fcd71b5bcc088e9aa13938d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89227, "upload_time": "2018-11-07T17:30:03", "upload_time_iso_8601": "2018-11-07T17:30:03.760302Z", "url": "https://files.pythonhosted.org/packages/b8/f4/081786c0e8c1b74ff2141438e2bfe19ecd1be276b1056d8673771ce3686d/django-comments-dab-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "92bf37fb69399552d495ce97e1feefc8", "sha256": "0348ecf671f3011ca54c3035d3bdc51391642ab905e463b1d6a401494b498488"}, "downloads": -1, "filename": "django-comments-dab-1.2.4.tar.gz", "has_sig": false, "md5_digest": "92bf37fb69399552d495ce97e1feefc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91773, "upload_time": "2018-11-11T14:01:08", "upload_time_iso_8601": "2018-11-11T14:01:08.805686Z", "url": "https://files.pythonhosted.org/packages/05/a2/37c5a885e1ab0d71b9109268770a03554b918c9e893ec6f0dbafbfb0f97c/django-comments-dab-1.2.4.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "da14f1604f1ca471bd6531a0fa3d0168", "sha256": "47c51b6cbf3a71cce49dd450e5c57231cb54f2bc7bc6f4002848dc5b7d9aa15b"}, "downloads": -1, "filename": "django-comments-dab-1.3.0.tar.gz", "has_sig": false, "md5_digest": "da14f1604f1ca471bd6531a0fa3d0168", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91996, "upload_time": "2019-01-14T18:23:11", "upload_time_iso_8601": "2019-01-14T18:23:11.825526Z", "url": "https://files.pythonhosted.org/packages/c7/8d/1014b1e1ea8cf433c04f499048aa076623e7a3571d652fff9d44adb54ffe/django-comments-dab-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "44bdd12d61f43228d72a968bc11aca76", "sha256": "82af4b8550bf14c5c61a9bf1969e2ef96873f065a6915bd72006f9d607e989f5"}, "downloads": -1, "filename": "django-comments-dab-1.4.0.tar.gz", "has_sig": false, "md5_digest": "44bdd12d61f43228d72a968bc11aca76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100506, "upload_time": "2020-04-26T18:01:16", "upload_time_iso_8601": "2020-04-26T18:01:16.511001Z", "url": "https://files.pythonhosted.org/packages/7b/ce/098862793ffc0e7ca71a2cfe2acaaa4bd3df4500da057bf45cc1e7deb902/django-comments-dab-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "44bdd12d61f43228d72a968bc11aca76", "sha256": "82af4b8550bf14c5c61a9bf1969e2ef96873f065a6915bd72006f9d607e989f5"}, "downloads": -1, "filename": "django-comments-dab-1.4.0.tar.gz", "has_sig": false, "md5_digest": "44bdd12d61f43228d72a968bc11aca76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100506, "upload_time": "2020-04-26T18:01:16", "upload_time_iso_8601": "2020-04-26T18:01:16.511001Z", "url": "https://files.pythonhosted.org/packages/7b/ce/098862793ffc0e7ca71a2cfe2acaaa4bd3df4500da057bf45cc1e7deb902/django-comments-dab-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:56 2020"}