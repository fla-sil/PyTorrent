{"info": {"author": "Zaytsev Dmitriy", "author_email": "zaytsev_dmitriy@aol.com", "bugtrack_url": null, "classifiers": [], "description": "Django Imperavi editor\n======================\nSupported versions\n------------\nSupports Django >=1.8 and Python 2/3\n\nInstallation\n------------\n```\npip install git+https://github.com/dzaytsev91/django-imperavi-widget.git\n```\n\n* Add ``imperavi`` to your ``INSTALLED_APPS`` setting.\n\n* Add imperavi URL include to your project's ``urls.py`` file::\n\n```\nurl(r'^imperavi/', include('imperavi.urls')),\n```\n\nExample\n-----\n```\ncd example/\npython manage.py migrate\n./manage.py shell -c \"from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin')\"\npython manage.py runserver\n```\nThen go to [http://127.0.0.1:8000/admin/](127.0.0.1:8000/admin/) and try to create post instance\n\nlogin: admin \npassword: admin\n\n\nUsage\n-----\n\nThe quickest way to add rich text editing capabilities to your admin is to use the included ``ImperaviAdmin`` class. For example::\n\n    from .models import Category\n    from imperavi.admin import ImperaviAdmin\n\n    class CategotyAdmin(ImperaviAdmin):\n        pass\n\n    admin.site.register(Category, CategotyAdmin)\n\nIf you want to use it with inline admin models you need to use ``ImperaviStackedInlineAdmin`` class::\n\n    from .models import Post\n    from imperavi.admin import ImperaviStackedInlineAdmin\n\n    class PostInline(ImperaviStackedInlineAdmin):\n        model = Post\n        extra = 1\n\nCustom settings\n---------------\n\nAdd a ``IMPERAVI_CUSTOM_SETTINGS`` variable to your ``settings.py`` with custom config::\n\n    IMPERAVI_CUSTOM_SETTINGS = {\n        'resize': true\n    }\n\nFull list of settings is here.\n[http://redactorjs.com/docs/settings/](ttp://redactorjs.com/docs/settings/)\n\nMedia URL\n---------\n\nYou can also customize the URL that django-imperavi-widget will look for the Editor media at by adding ``IMPERAVI_UPLOAD_PATH`` to your ``settings.py`` file like this::\n\n    IMPERAVI_UPLOAD_PATH = 'imperavi-uploads/'\n\nThe default value is ``'imperavi/'``.\n\n\nUnique images per model\n-----------------------\n\nIf you want to serve unique media content for specific model you can add ``unique_media = True`` to your admin class::\n\n    from .models import Category\n    from imperavi.admin import ImperaviAdmin\n\n    class CategotyAdmin(ImperaviAdmin):\n        unique_media = True\n\n    admin.site.register(Category, CategotyAdmin)\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dzaytsev91/django-imperavi-widget", "keywords": "django admin imperavi widget", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "django-imperavi-widget", "package_url": "https://pypi.org/project/django-imperavi-widget/", "platform": "any", "project_url": "https://pypi.org/project/django-imperavi-widget/", "project_urls": {"Homepage": "https://github.com/dzaytsev91/django-imperavi-widget"}, "release_url": "https://pypi.org/project/django-imperavi-widget/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A django admin widget to render a         text field as beautiful Imperavi WYSIWYG editor http://redactorjs.com/", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            Django Imperavi editor<br>======================<br>Supported versions<br>------------<br>Supports Django &gt;=1.8 and Python 2/3<br><br>Installation<br>------------<br>```<br>pip install git+https://github.com/dzaytsev91/django-imperavi-widget.git<br>```<br><br>* Add ``imperavi`` to your ``INSTALLED_APPS`` setting.<br><br>* Add imperavi URL include to your project's ``urls.py`` file::<br><br>```<br>url(r'^imperavi/', include('imperavi.urls')),<br>```<br><br>Example<br>-----<br>```<br>cd example/<br>python manage.py migrate<br>./manage.py shell -c \"from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin')\"<br>python manage.py runserver<br>```<br>Then go to [http://127.0.0.1:8000/admin/](127.0.0.1:8000/admin/) and try to create post instance<br><br>login: admin <br>password: admin<br><br><br>Usage<br>-----<br><br>The quickest way to add rich text editing capabilities to your admin is to use the included ``ImperaviAdmin`` class. For example::<br><br>    from .models import Category<br>    from imperavi.admin import ImperaviAdmin<br><br>    class CategotyAdmin(ImperaviAdmin):<br>        pass<br><br>    admin.site.register(Category, CategotyAdmin)<br><br>If you want to use it with inline admin models you need to use ``ImperaviStackedInlineAdmin`` class::<br><br>    from .models import Post<br>    from imperavi.admin import ImperaviStackedInlineAdmin<br><br>    class PostInline(ImperaviStackedInlineAdmin):<br>        model = Post<br>        extra = 1<br><br>Custom settings<br>---------------<br><br>Add a ``IMPERAVI_CUSTOM_SETTINGS`` variable to your ``settings.py`` with custom config::<br><br>    IMPERAVI_CUSTOM_SETTINGS = {<br>        'resize': true<br>    }<br><br>Full list of settings is here.<br>[http://redactorjs.com/docs/settings/](ttp://redactorjs.com/docs/settings/)<br><br>Media URL<br>---------<br><br>You can also customize the URL that django-imperavi-widget will look for the Editor media at by adding ``IMPERAVI_UPLOAD_PATH`` to your ``settings.py`` file like this::<br><br>    IMPERAVI_UPLOAD_PATH = 'imperavi-uploads/'<br><br>The default value is ``'imperavi/'``.<br><br><br>Unique images per model<br>-----------------------<br><br>If you want to serve unique media content for specific model you can add ``unique_media = True`` to your admin class::<br><br>    from .models import Category<br>    from imperavi.admin import ImperaviAdmin<br><br>    class CategotyAdmin(ImperaviAdmin):<br>        unique_media = True<br><br>    admin.site.register(Category, CategotyAdmin)<br>\n          </div>"}, "last_serial": 2985878, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "c684391b750191b1c67929cf30b16a3b", "sha256": "f5d645cf08714d53801a3fd016e408054de144472eff000b65f7a07a0a560f2c"}, "downloads": -1, "filename": "django-imperavi-widget-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c684391b750191b1c67929cf30b16a3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159002, "upload_time": "2017-06-27T11:53:09", "upload_time_iso_8601": "2017-06-27T11:53:09.076627Z", "url": "https://files.pythonhosted.org/packages/c0/93/f937fbd48b9b89177bc8870490dfd07408d8b20ccc2788c0453c2dd9d33e/django-imperavi-widget-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c684391b750191b1c67929cf30b16a3b", "sha256": "f5d645cf08714d53801a3fd016e408054de144472eff000b65f7a07a0a560f2c"}, "downloads": -1, "filename": "django-imperavi-widget-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c684391b750191b1c67929cf30b16a3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159002, "upload_time": "2017-06-27T11:53:09", "upload_time_iso_8601": "2017-06-27T11:53:09.076627Z", "url": "https://files.pythonhosted.org/packages/c0/93/f937fbd48b9b89177bc8870490dfd07408d8b20ccc2788c0453c2dd9d33e/django-imperavi-widget-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:37 2020"}