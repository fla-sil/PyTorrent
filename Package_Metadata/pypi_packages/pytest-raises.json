{"info": {"author": "Authentise, Inc.", "author_email": "engineering@authentise.com", "bugtrack_url": null, "classifiers": [], "description": "pytest-raises\n===================================\n[![Build Status](https://travis-ci.com/Lemmons/pytest-raises.svg?branch=master)](https://travis-ci.com/Lemmons/pytest-raises) [![codecov](https://codecov.io/gh/Lemmons/pytest-raises/branch/master/graph/badge.svg)](https://codecov.io/gh/Lemmons/pytest-raises)\n\nA [pytest][] plugin implementation of pytest.raises as a pytest.mark fixture.\n\n**Contents**\n\n- [Features](#features)\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Available Markers](#available-markers)\n    - [Limitations on Markers](#limitations-on-markers)\n    - [Available Parameters](#available-parameters)\n    - [`@pytest.mark.raises` Examples](#pytestmarkraises-examples)\n    - [`@pytest.mark.setup_raises` Examples](#pytestmarksetup_raises-examples)\n- [License](#license)\n- [Issues](#issues)\n\nFeatures\n--------\n\nAdds functionality for marking tests with a `pytest.mark.raises` fixture, which\nfunctions similarly to using `with pytest.raises`\n\n\nRequirements\n------------\n\n- python 2.7 or above\n- pytest 2.8.1 or above\n\n\nInstallation\n------------\n\nYou can install \"pytest-raises\" via [pip][] from [PyPI][]\n\n```\n$ pip install pytest-raises\n```\n\nUsage\n-----\n\nMarking a test with the `@pytest.mark.raises()` or\n`@pytest.mark.setup_raises` decorator will mark that the code the test\nexecutes is **expected** to raise an error.  This is different from\n`@pytest.mark.xfail()` as it does not mean the test itself might fail, but\ninstead that the \"pass\" for the test is that the code raises an error.\n\nIt will allow tests which raise errors to pass.  The main usage is to assert\nthat an error of a specific type is raise.\n\nIf a test is marked with `@pytest.mark.raises` or\n`@pytest.mark.setup_raises` and it does **not** `raise` in the appropriate\ntesting phase, the test will be failed.\n\n### Available Markers\n\nThis extension provides two markers for different phases of `pytest`:\n\n- `@pytest.mark.raises`: for marking a function that should `raise` during\n  the `pytest_runtest_call` phase.\n    - This decorator can be used in place of the\n      [`with pytest.raises(...)` context manager](https://docs.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions).\n- `@pytest.mark.setup_raises`: for marking a function that should `raise`\n  during the `pytest_runtest_setup` phase.\n\n### Limitations on Markers\n\n1. Any test function decorated with `@pytest.mark.setup_raises` is assumed\n   to have an empty function body\n\n   ```python\n   @pytest.mark.setup_raises()\n   def test_something():\n       pass\n   ```\n\n   This is because `pytest_runtest_call` may still be executed depending on\n   what raised when.  So any code in the test function body may cause\n   erroneous errors (particularly if you are using fixtures, since the\n   fixture setup may be incomplete).\n\n   See the [`@pytest.mark.setup_raises` Examples](#pytestmarksetup_raises-examples)\n   for more information.\n\n2. Since the function body of anything decorated with\n   `@pytest.mark.setup_raises` is assumed to be empty, test functions that\n   are decorated with both `@pytest.mark.raises`and\n   `@pytest.mark.setup_raises` is **not** supported.\n\n   The implementation details of this limitation are further documented in\n   the `_pytest_raises_validation` function.\n\n### Available Parameters\n\nBoth markers accept the following optional parameters:\n\n- `exception=<Some Exception Class>`: the exact exception **class** that is\n  expected to be raised.\n- `message='some string'`: a verbatim message that is expected to be in the\n  raised exception message.  Note that when `message` is supplied, the check\n  performed is essentially `message in exception_message`.  So any substring\n  can be used, but if the message is \"too simple\" you may get false\n  positives.\n- `match=r'some regular expression'`: a regular expression to be matched for\n  in the raised exception message.  Note that\n  [`re.match`](https://docs.python.org/3/library/re.html#re.match) is used\n  (rather than `re.search`).  This behavior is identical to the\n  `with pytest.raises` context manager.\n- `match_flags=<regular expression flags>`: any regular expression _flags_\n  desired to be used with the `match` argument.  For example,\n  `match_flags=(re.IGNORECASE | re.DOTALL)`.  No validity checks are\n  performed on the specified flags, but you will receive an error when the\n  match is performed and invalid flags are provided (since the `re` module\n  will not understand the flags).\n\n**Note**: _the `message` and `match` arguments may **not** be supplied at the\nsame time.  Only one or the other may be provided._\n\n### `@pytest.mark.raises` Examples\n\nA very simple example is:\n\n```python\nimport pytest\n\nclass SomeException(Exception):\n    pass\n\nclass AnotherException(Exception):\n    pass\n\n@pytest.mark.raises(exception=SomeException)\ndef test_mark_raises_named():\n    raise SomeException('the message')\n\n@pytest.mark.raises()\ndef test_mark_raises_general():\n    raise AnotherException('the message')\n\n```\n\nA more useful example using test parametrization is:\n\n```python\nimport pytest\n\nclass SomeException(Exception):\n    pass\n\nclass AnotherException(Exception):\n    pass\n\n@pytest.mark.parametrize('error', [\n    None,\n    pytest.param(\n        SomeException('the message'),\n        marks=pytest.mark.raises(exception=SomeException)\n    ),\n    pytest.param(\n        AnotherException('the message'),\n        marks=pytest.mark.raises(exception=AnotherException)\n    ),\n    pytest.param(\n        Exception('the message'),\n        marks=pytest.mark.raises()\n    )\n])\ndef test_mark_raises_demo(error):\n    if error:\n        raise error\n\n```\n\nAll of these tests pass.  These examples are actual [tests for this plugin][]\n(exact test case is in `test_pytest_raises_parametrize_demo` test).\n\n### `@pytest.mark.setup_raises` Examples\n\nUsage of the `@pytest.mark.setup_raises` decorator is likely to be uncommon,\nbut when it is needed there is no known alternative.  Consider the following\ncontrived example, where in a `conftest.py` we have the following check for\nsome custom marker we are concerned about:\n\n```python\n# in conftest.py\ndef pytest_runtest_setup(item):\n    custom_marker = item.get_closest_marker('custom_marker')\n    if custom_marker:\n        valid = custom_marker.kwargs.get('valid', True)\n        if not valid:\n            raise ValueError('custom_marker.valid was False')\n```\n\nand two tests using this marker\n\n```python\nimport pytest\n\n@pytest.mark.custom_marker(valid=False)\n@pytest.mark.setup_raises(\n    exception=ValueError, match=r'.*was False$'\n)\ndef test_mark_setup_raises_demo():\n    pass\n\n@pytest.mark.custom_marker(valid=True)\ndef test_all_good():\n    pass\n```\n\nThis example is in the [tests for this plugin][] in the\n`test_pytest_mark_setup_raises_demo` test case.  This example is awkward, but\nthe idea is you can use `@pytest.mark.setup_raises` to catch expected errors\nduring the `pytest_runtest_setup` phase.  So when we used `custom_marker`\nwith `valid=False`, the `pytest_runtest_setup` will `raise` as expected, but\nnot when `valid=True`.\n\nIn the real world, the utility of `@pytest.mark.setup_raises` comes in when\nyou have potentially less control over the execution of fixtures or perhaps\nwant to stress-test custom markers or fixtures.  Consider writing a decorator\nthat auto-uses a fixture for a given test function, but deliberately provides\ninvalid arguments to the fixture.\n\nIn short: the chances are good that you will **not** need\n`@pytest.mark.setup_raises` in the average testing framework.  However, if\nyou need to verify failures during the `pytest_runtest_setup` phase, it is\nan invaluable tool.\n\n**Reminder**: notice that when `@pytest.mark.setup_raises` is used, **the\nfunction body should be exactly `pass`**.  The `pytest_runtest_setup` phase\nhas raised, meaning the setup for the test is incomplete.  Anything other\nthan an empty test function body of `pass` is **not** supported by this\nextension.\n\nLicense\n-------\n\nDistributed under the terms of the [MIT][] license, \"pytest-raises\" is free and\nopen source software.\n\n\nIssues\n------\n\nIf you encounter any problems, please [file an issue][] along with a detailed\ndescription.\n\n[MIT]: http://opensource.org/licenses/MIT\n[file an issue]: https://github.com/Authentise/pytest-raises/issues\n[pytest]: https://github.com/pytest-dev/pytest\n[tests for this plugin]: https://github.com/Authentise/pytest-raises/blob/master/tests/test_raises.py\n[pip]: https://pypi.python.org/pypi/pip/\n[PyPI]: https://pypi.python.org/pypi\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Authentise/pytest-raises", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pytest-raises", "package_url": "https://pypi.org/project/pytest-raises/", "platform": "", "project_url": "https://pypi.org/project/pytest-raises/", "project_urls": {"Homepage": "https://github.com/Authentise/pytest-raises"}, "release_url": "https://pypi.org/project/pytest-raises/0.11/", "requires_dist": ["pytest (>=3.2.2)", "pylint ; extra == 'develop'", "pytest-cov ; extra == 'develop'"], "requires_python": "", "summary": "An implementation of pytest.raises as a pytest.mark fixture", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pytest-raises</h1>\n<p><a href=\"https://travis-ci.com/Lemmons/pytest-raises\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/205f61ea6ef63e8c02087ad9dc1faf1edcc6a136/68747470733a2f2f7472617669732d63692e636f6d2f4c656d6d6f6e732f7079746573742d7261697365732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/Lemmons/pytest-raises\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c77624300456b4398799958137fe1c5455d185e5/68747470733a2f2f636f6465636f762e696f2f67682f4c656d6d6f6e732f7079746573742d7261697365732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>A <a href=\"https://github.com/pytest-dev/pytest\" rel=\"nofollow\">pytest</a> plugin implementation of pytest.raises as a pytest.mark fixture.</p>\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#available-markers\" rel=\"nofollow\">Available Markers</a></li>\n<li><a href=\"#limitations-on-markers\" rel=\"nofollow\">Limitations on Markers</a></li>\n<li><a href=\"#available-parameters\" rel=\"nofollow\">Available Parameters</a></li>\n<li><a href=\"#pytestmarkraises-examples\" rel=\"nofollow\"><code>@pytest.mark.raises</code> Examples</a></li>\n<li><a href=\"#pytestmarksetup_raises-examples\" rel=\"nofollow\"><code>@pytest.mark.setup_raises</code> Examples</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#issues\" rel=\"nofollow\">Issues</a></li>\n</ul>\n<h2>Features</h2>\n<p>Adds functionality for marking tests with a <code>pytest.mark.raises</code> fixture, which\nfunctions similarly to using <code>with pytest.raises</code></p>\n<h2>Requirements</h2>\n<ul>\n<li>python 2.7 or above</li>\n<li>pytest 2.8.1 or above</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install \"pytest-raises\" via <a href=\"https://pypi.python.org/pypi/pip/\" rel=\"nofollow\">pip</a> from <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPI</a></p>\n<pre><code>$ pip install pytest-raises\n</code></pre>\n<h2>Usage</h2>\n<p>Marking a test with the <code>@pytest.mark.raises()</code> or\n<code>@pytest.mark.setup_raises</code> decorator will mark that the code the test\nexecutes is <strong>expected</strong> to raise an error.  This is different from\n<code>@pytest.mark.xfail()</code> as it does not mean the test itself might fail, but\ninstead that the \"pass\" for the test is that the code raises an error.</p>\n<p>It will allow tests which raise errors to pass.  The main usage is to assert\nthat an error of a specific type is raise.</p>\n<p>If a test is marked with <code>@pytest.mark.raises</code> or\n<code>@pytest.mark.setup_raises</code> and it does <strong>not</strong> <code>raise</code> in the appropriate\ntesting phase, the test will be failed.</p>\n<h3>Available Markers</h3>\n<p>This extension provides two markers for different phases of <code>pytest</code>:</p>\n<ul>\n<li><code>@pytest.mark.raises</code>: for marking a function that should <code>raise</code> during\nthe <code>pytest_runtest_call</code> phase.\n<ul>\n<li>This decorator can be used in place of the\n<a href=\"https://docs.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions\" rel=\"nofollow\"><code>with pytest.raises(...)</code> context manager</a>.</li>\n</ul>\n</li>\n<li><code>@pytest.mark.setup_raises</code>: for marking a function that should <code>raise</code>\nduring the <code>pytest_runtest_setup</code> phase.</li>\n</ul>\n<h3>Limitations on Markers</h3>\n<ol>\n<li>\n<p>Any test function decorated with <code>@pytest.mark.setup_raises</code> is assumed\nto have an empty function body</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">setup_raises</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>This is because <code>pytest_runtest_call</code> may still be executed depending on\nwhat raised when.  So any code in the test function body may cause\nerroneous errors (particularly if you are using fixtures, since the\nfixture setup may be incomplete).</p>\n<p>See the <a href=\"#pytestmarksetup_raises-examples\" rel=\"nofollow\"><code>@pytest.mark.setup_raises</code> Examples</a>\nfor more information.</p>\n</li>\n<li>\n<p>Since the function body of anything decorated with\n<code>@pytest.mark.setup_raises</code> is assumed to be empty, test functions that\nare decorated with both <code>@pytest.mark.raises</code>and\n<code>@pytest.mark.setup_raises</code> is <strong>not</strong> supported.</p>\n<p>The implementation details of this limitation are further documented in\nthe <code>_pytest_raises_validation</code> function.</p>\n</li>\n</ol>\n<h3>Available Parameters</h3>\n<p>Both markers accept the following optional parameters:</p>\n<ul>\n<li><code>exception=&lt;Some Exception Class&gt;</code>: the exact exception <strong>class</strong> that is\nexpected to be raised.</li>\n<li><code>message='some string'</code>: a verbatim message that is expected to be in the\nraised exception message.  Note that when <code>message</code> is supplied, the check\nperformed is essentially <code>message in exception_message</code>.  So any substring\ncan be used, but if the message is \"too simple\" you may get false\npositives.</li>\n<li><code>match=r'some regular expression'</code>: a regular expression to be matched for\nin the raised exception message.  Note that\n<a href=\"https://docs.python.org/3/library/re.html#re.match\" rel=\"nofollow\"><code>re.match</code></a> is used\n(rather than <code>re.search</code>).  This behavior is identical to the\n<code>with pytest.raises</code> context manager.</li>\n<li><code>match_flags=&lt;regular expression flags&gt;</code>: any regular expression <em>flags</em>\ndesired to be used with the <code>match</code> argument.  For example,\n<code>match_flags=(re.IGNORECASE | re.DOTALL)</code>.  No validity checks are\nperformed on the specified flags, but you will receive an error when the\nmatch is performed and invalid flags are provided (since the <code>re</code> module\nwill not understand the flags).</li>\n</ul>\n<p><strong>Note</strong>: <em>the <code>message</code> and <code>match</code> arguments may <strong>not</strong> be supplied at the\nsame time.  Only one or the other may be provided.</em></p>\n<h3><code>@pytest.mark.raises</code> Examples</h3>\n<p>A very simple example is:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AnotherException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">SomeException</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_mark_raises_named</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"n\">SomeException</span><span class=\"p\">(</span><span class=\"s1\">'the message'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_mark_raises_general</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"n\">AnotherException</span><span class=\"p\">(</span><span class=\"s1\">'the message'</span><span class=\"p\">)</span>\n</pre>\n<p>A more useful example using test parametrization is:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AnotherException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n    <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">(</span>\n        <span class=\"n\">SomeException</span><span class=\"p\">(</span><span class=\"s1\">'the message'</span><span class=\"p\">),</span>\n        <span class=\"n\">marks</span><span class=\"o\">=</span><span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">SomeException</span><span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">(</span>\n        <span class=\"n\">AnotherException</span><span class=\"p\">(</span><span class=\"s1\">'the message'</span><span class=\"p\">),</span>\n        <span class=\"n\">marks</span><span class=\"o\">=</span><span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">AnotherException</span><span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">(</span>\n        <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'the message'</span><span class=\"p\">),</span>\n        <span class=\"n\">marks</span><span class=\"o\">=</span><span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_mark_raises_demo</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">error</span>\n</pre>\n<p>All of these tests pass.  These examples are actual <a href=\"https://github.com/Authentise/pytest-raises/blob/master/tests/test_raises.py\" rel=\"nofollow\">tests for this plugin</a>\n(exact test case is in <code>test_pytest_raises_parametrize_demo</code> test).</p>\n<h3><code>@pytest.mark.setup_raises</code> Examples</h3>\n<p>Usage of the <code>@pytest.mark.setup_raises</code> decorator is likely to be uncommon,\nbut when it is needed there is no known alternative.  Consider the following\ncontrived example, where in a <code>conftest.py</code> we have the following check for\nsome custom marker we are concerned about:</p>\n<pre><span class=\"c1\"># in conftest.py</span>\n<span class=\"k\">def</span> <span class=\"nf\">pytest_runtest_setup</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"n\">custom_marker</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">get_closest_marker</span><span class=\"p\">(</span><span class=\"s1\">'custom_marker'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">custom_marker</span><span class=\"p\">:</span>\n        <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">custom_marker</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'valid'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">valid</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'custom_marker.valid was False'</span><span class=\"p\">)</span>\n</pre>\n<p>and two tests using this marker</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">custom_marker</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">setup_raises</span><span class=\"p\">(</span>\n    <span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'.*was False$'</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_mark_setup_raises_demo</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">custom_marker</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_all_good</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>This example is in the <a href=\"https://github.com/Authentise/pytest-raises/blob/master/tests/test_raises.py\" rel=\"nofollow\">tests for this plugin</a> in the\n<code>test_pytest_mark_setup_raises_demo</code> test case.  This example is awkward, but\nthe idea is you can use <code>@pytest.mark.setup_raises</code> to catch expected errors\nduring the <code>pytest_runtest_setup</code> phase.  So when we used <code>custom_marker</code>\nwith <code>valid=False</code>, the <code>pytest_runtest_setup</code> will <code>raise</code> as expected, but\nnot when <code>valid=True</code>.</p>\n<p>In the real world, the utility of <code>@pytest.mark.setup_raises</code> comes in when\nyou have potentially less control over the execution of fixtures or perhaps\nwant to stress-test custom markers or fixtures.  Consider writing a decorator\nthat auto-uses a fixture for a given test function, but deliberately provides\ninvalid arguments to the fixture.</p>\n<p>In short: the chances are good that you will <strong>not</strong> need\n<code>@pytest.mark.setup_raises</code> in the average testing framework.  However, if\nyou need to verify failures during the <code>pytest_runtest_setup</code> phase, it is\nan invaluable tool.</p>\n<p><strong>Reminder</strong>: notice that when <code>@pytest.mark.setup_raises</code> is used, <strong>the\nfunction body should be exactly <code>pass</code></strong>.  The <code>pytest_runtest_setup</code> phase\nhas raised, meaning the setup for the test is incomplete.  Anything other\nthan an empty test function body of <code>pass</code> is <strong>not</strong> supported by this\nextension.</p>\n<h2>License</h2>\n<p>Distributed under the terms of the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a> license, \"pytest-raises\" is free and\nopen source software.</p>\n<h2>Issues</h2>\n<p>If you encounter any problems, please <a href=\"https://github.com/Authentise/pytest-raises/issues\" rel=\"nofollow\">file an issue</a> along with a detailed\ndescription.</p>\n\n          </div>"}, "last_serial": 7081568, "releases": {"0.0.1": [], "0.10": [{"comment_text": "", "digests": {"md5": "1e8f9f040cc47ebb322b10c26a763250", "sha256": "4710a8921b0b7425cd2073d696862ecf99922ef522e681cc63a52008112d63d9"}, "downloads": -1, "filename": "pytest-raises-0.10.tar.gz", "has_sig": false, "md5_digest": "1e8f9f040cc47ebb322b10c26a763250", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7274, "upload_time": "2018-11-08T19:05:16", "upload_time_iso_8601": "2018-11-08T19:05:16.637645Z", "url": "https://files.pythonhosted.org/packages/6f/37/e1682534d84899dab81943bc69fb0f01fd3164d0fa889480ce1937589533/pytest-raises-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "16ff72dc4e5198e2b6143d257a00277d", "sha256": "33a1351f2debb9f74ca6ef70e374899f608a1217bf13ca4a0767f37b49e9cdda"}, "downloads": -1, "filename": "pytest_raises-0.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "16ff72dc4e5198e2b6143d257a00277d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9391, "upload_time": "2020-04-23T04:11:38", "upload_time_iso_8601": "2020-04-23T04:11:38.778326Z", "url": "https://files.pythonhosted.org/packages/9f/9b/3201a24d75c89d69be72d8628af73d1780e5857d86eb4b7df41efe238210/pytest_raises-0.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14af98bce38d31ffe4a88f8f9a76c9a7", "sha256": "f64a4dbcb5f89c100670fe83d87a5cd9d956586db461c5c628f7eb94b749c90b"}, "downloads": -1, "filename": "pytest-raises-0.11.tar.gz", "has_sig": false, "md5_digest": "14af98bce38d31ffe4a88f8f9a76c9a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11761, "upload_time": "2020-04-23T04:11:39", "upload_time_iso_8601": "2020-04-23T04:11:39.963833Z", "url": "https://files.pythonhosted.org/packages/2d/a1/cfb28f1bc8b7a99aa48fb6719640071a5fd00a8b5d78a693635c51ac6822/pytest-raises-0.11.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "46d5467accddd9f1c8add0c6bb125d1e", "sha256": "12e5626b2eb0d8c4befec49a810e2960ad31af3d0cb68ba435ad1963ba8df406"}, "downloads": -1, "filename": "pytest-raises-0.2.tar.gz", "has_sig": false, "md5_digest": "46d5467accddd9f1c8add0c6bb125d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3494, "upload_time": "2016-03-21T23:49:37", "upload_time_iso_8601": "2016-03-21T23:49:37.956739Z", "url": "https://files.pythonhosted.org/packages/b0/c8/295ac4d600ca84a5eb1d3e67a5e7e2f92f53c2d49880a5326d6e613fed28/pytest-raises-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2efe1365270062e2328d7724d4632a90", "sha256": "2302bf4a0ef31a4b7cb4d248127e47dedf42dbb083d442c4b54b4d3e002a3cb1"}, "downloads": -1, "filename": "pytest-raises-0.3.tar.gz", "has_sig": false, "md5_digest": "2efe1365270062e2328d7724d4632a90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3747, "upload_time": "2016-03-21T23:59:42", "upload_time_iso_8601": "2016-03-21T23:59:42.636051Z", "url": "https://files.pythonhosted.org/packages/e8/aa/f96100d632f25c2669ff1301f1eee71f8dcb0071f276d35baa8261b7b80f/pytest-raises-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "0da5c58c1cb40fc21d1394898361667d", "sha256": "0702264d5e78cdeaf3b592bebbaeed0575a0a7f156174994a08c527bf626d032"}, "downloads": -1, "filename": "pytest-raises-0.4.tar.gz", "has_sig": false, "md5_digest": "0da5c58c1cb40fc21d1394898361667d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3893, "upload_time": "2016-03-24T19:34:09", "upload_time_iso_8601": "2016-03-24T19:34:09.128537Z", "url": "https://files.pythonhosted.org/packages/5f/f1/cf37a9662e058bfa94d0d591bdef20dd2c6bb1407fdec9078703ce68085a/pytest-raises-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "b0c72bb6f551fb2560bc73a773b3eb07", "sha256": "4fcb0e8a6f5b392e3336302c7ce8f79c0087b79c0b830a017f6d78ee7077f684"}, "downloads": -1, "filename": "pytest-raises-0.5.tar.gz", "has_sig": false, "md5_digest": "b0c72bb6f551fb2560bc73a773b3eb07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3747, "upload_time": "2016-04-26T17:15:50", "upload_time_iso_8601": "2016-04-26T17:15:50.325781Z", "url": "https://files.pythonhosted.org/packages/78/89/96bba4183b97308df961108a8b150e1f414cd95275a01d6f9bec79b41e30/pytest-raises-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "fc59c5e61fb0b1757d8e37ae3afb24ab", "sha256": "3fdf1a1e0a001653bfd7bd59c9d1360ebb292052e5b2008287e7f2a7a2fc54fd"}, "downloads": -1, "filename": "pytest-raises-0.6.tar.gz", "has_sig": false, "md5_digest": "fc59c5e61fb0b1757d8e37ae3afb24ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3758, "upload_time": "2016-06-10T16:49:52", "upload_time_iso_8601": "2016-06-10T16:49:52.485160Z", "url": "https://files.pythonhosted.org/packages/2c/24/2014219e606046ca8e4f062388f11dab604826cd93465ae39960276d57bb/pytest-raises-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "96d55a1a827d1af0ad81c23b2753d9ca", "sha256": "03845e093f53ff3d5bb21a9d0525cb5ea8c36bd887887203ac7b1db8b5f85fc0"}, "downloads": -1, "filename": "pytest-raises-0.7.tar.gz", "has_sig": false, "md5_digest": "96d55a1a827d1af0ad81c23b2753d9ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3886, "upload_time": "2017-10-16T17:49:41", "upload_time_iso_8601": "2017-10-16T17:49:41.766453Z", "url": "https://files.pythonhosted.org/packages/05/ce/e77800866e07239135b022f433ff40dce5671b8a62dcaffcb8d74e0c2ec5/pytest-raises-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "66138de71823aad736c394c68ce9c1f3", "sha256": "881f5ef2ebca4b8d7d47b6608b9b4407a87b84f7954e776a09e2b4cbfb0dc6ae"}, "downloads": -1, "filename": "pytest-raises-0.8.tar.gz", "has_sig": false, "md5_digest": "66138de71823aad736c394c68ce9c1f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3925, "upload_time": "2018-05-30T18:07:38", "upload_time_iso_8601": "2018-05-30T18:07:38.519045Z", "url": "https://files.pythonhosted.org/packages/9e/dc/dbb517aa9e9a47c432ca0d64ab4e5b68a219eb10ebcaada114cf6b5cea62/pytest-raises-0.8.tar.gz", "yanked": false}], "0.8.post0.dev3": [{"comment_text": "", "digests": {"md5": "6514e85876e2e9b3622b6f059da65dfe", "sha256": "784e3e42fc6be9985ad83cb1290304c1e31a0de4605100d2d8c0984464ffdfd8"}, "downloads": -1, "filename": "pytest-raises-0.8.post0.dev3.tar.gz", "has_sig": false, "md5_digest": "6514e85876e2e9b3622b6f059da65dfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4086, "upload_time": "2018-09-24T19:42:28", "upload_time_iso_8601": "2018-09-24T19:42:28.270517Z", "url": "https://files.pythonhosted.org/packages/85/8b/c965c91b352703885f948c47d4cea4ba1bfbeb2cea5fe82368771a369bf1/pytest-raises-0.8.post0.dev3.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "a25d687502df9b94e1b365fcac25ce5f", "sha256": "6844e7b85e44bd383911844ed004b38b9c5a6cb2c56641af8fdc8dad322e4141"}, "downloads": -1, "filename": "pytest-raises-0.9.tar.gz", "has_sig": false, "md5_digest": "a25d687502df9b94e1b365fcac25ce5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4078, "upload_time": "2018-09-24T19:48:40", "upload_time_iso_8601": "2018-09-24T19:48:40.800609Z", "url": "https://files.pythonhosted.org/packages/8d/0b/6167cc3013ea64b9b8cbc1e934006a97d36313fc8d9bd1bc0af1c2ed7e34/pytest-raises-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16ff72dc4e5198e2b6143d257a00277d", "sha256": "33a1351f2debb9f74ca6ef70e374899f608a1217bf13ca4a0767f37b49e9cdda"}, "downloads": -1, "filename": "pytest_raises-0.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "16ff72dc4e5198e2b6143d257a00277d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9391, "upload_time": "2020-04-23T04:11:38", "upload_time_iso_8601": "2020-04-23T04:11:38.778326Z", "url": "https://files.pythonhosted.org/packages/9f/9b/3201a24d75c89d69be72d8628af73d1780e5857d86eb4b7df41efe238210/pytest_raises-0.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14af98bce38d31ffe4a88f8f9a76c9a7", "sha256": "f64a4dbcb5f89c100670fe83d87a5cd9d956586db461c5c628f7eb94b749c90b"}, "downloads": -1, "filename": "pytest-raises-0.11.tar.gz", "has_sig": false, "md5_digest": "14af98bce38d31ffe4a88f8f9a76c9a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11761, "upload_time": "2020-04-23T04:11:39", "upload_time_iso_8601": "2020-04-23T04:11:39.963833Z", "url": "https://files.pythonhosted.org/packages/2d/a1/cfb28f1bc8b7a99aa48fb6719640071a5fd00a8b5d78a693635c51ac6822/pytest-raises-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:48 2020"}