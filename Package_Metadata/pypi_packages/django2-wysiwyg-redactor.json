{"info": {"author": "Alon Raizman", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "A lightweight wysiwyg editor for Django\n=======================================\n\nScreenshot\n----------\n\n.. image:: https://raw.githubusercontent.com/douglasmiranda/django-wysiwyg-redactor/master/screenshots/redactor.jpg\n\nWhat's that\n-----------------\n\n*django-wysiwyg-redactor* is a text editor application for Django, using `Redactor WYSIWYG editor <https://imperavi.com/redactor/>`_\n\nDependency\n----------\n\n- `Pillow or PIL` # for image upload\n\nGetting started\n---------------\n\n- Install *django-wysiwyg-redactor*:\n\n``pip install django-wysiwyg-redactor``\n\n- Add `'redactor'` to INSTALLED_APPS.\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        # ...\n        'redactor',\n        # ...\n    )\n\n- Add `url(r'^redactor/', include('redactor.urls'))`, to urls.py\n\n.. code-block:: python\n\n    urlpatterns = [\n        # ...\n        url(r'^redactor/', include('redactor.urls')),\n        # ...\n    ]\n\n\n- Add default config in settings.py\n\n.. code-block:: python\n\n    REDACTOR_OPTIONS = {'lang': 'en'}\n    REDACTOR_UPLOAD = 'uploads/'\n\nMore `redactor settings <http://imperavi.com/redactor/docs/settings/>`_.\n\nUsing in model\n--------------\n\n.. code-block:: python\n\n    from django.db import models\n    from redactor.fields import RedactorField\n\n    class Entry(models.Model):\n        title = models.CharField(max_length=250, verbose_name=u'Title')\n        short_text = RedactorField(verbose_name=u'Text')\n\nor use custom parameters:\n\n.. code-block:: python\n\n    short_text = RedactorField(\n        verbose_name=u'Text',\n        redactor_options={'lang': 'en', 'focus': True},\n        upload_to='tmp/',\n        allow_file_upload=True,\n        allow_image_upload=True\n    )\n\nUsing only in Django Admin\n--------------------------\n\n.. code-block:: python\n\n    from django import forms\n    from redactor.widgets import RedactorEditor\n    from blog.models import Entry\n\n    class EntryAdminForm(forms.ModelForm):\n        class Meta:\n            model = Entry\n            widgets = {\n               'short_text': RedactorEditor(),\n            }\n\n    class EntryAdmin(admin.ModelAdmin):\n        form = EntryAdminForm\n\n`RedactorEditor` takes the same parameters as `RedactorField`.\n\nUsing Plugins\n-------------\n`Download <http://imperavi.com/redactor/plugins/>`_ the plugin you want or `create a custom plugin <http://imperavi.com/redactor/docs/how-to-create-plugin/>`_.\n\nThen:\n\n.. code-block:: python\n\n    from django.db import models\n    from redactor.fields import RedactorField\n\n    class Entry(models.Model):\n        title = models.CharField(max_length=250, verbose_name=u'Title')\n        short_text = RedactorField(\n            verbose_name=u'Text',\n            # for example, if you downloaded the 'table' plugin:\n            redactor_options={'plugins': ['table']}\n        )\n\nOR (on settings.py):\n\n.. code-block:: python\n\n    REDACTOR_OPTIONS = {'lang': 'en', 'plugins': ['table']}\n\nImportant: if you set a plugin called \"table\", you must create/paste the \"table.js\" on **YOUR_STATIC_FILES_FOLDER/redactor/plugins/table.js**\n\nUpload Handlers\n---------------\nSimpleUploader - The Standard Uploader. Will upload your file to REDACTOR_UPLOAD.\n\nUUIDUploader - This handler will replace the original file name for an UUID.\n\nDateDirectoryUploader - This handler saves the file in a directory based on the current server date.\n\nUsage:\n\nFor example, if I want to use the DateDirectoryUploader handler, I will put this on settings.py:\n\n.. code-block:: python\n\n    REDACTOR_UPLOAD_HANDLER = 'redactor.handlers.DateDirectoryUploader'\n\nUpload permissions\n------------------\nBy default django-wysiwyg-redactor uses `staff_member_required` decorator from\n`django.contrib.admin.views.decorators` package to control access to dispatch\nmethod.\n\nTo use custom authentication decorator, set `REDACTOR_AUTH_DECORATOR` to\nanything else, eg. if every authenticated user should have permissions to\nupload files/images/etc.:\n\n.. code-block:: python\n\n    REDACTOR_AUTH_DECORATOR = 'django.contrib.auth.decorators.login_required'\n\nFile Storages\n-------------\n*django-wysiwyg-redactor* defaults to using the default media storage for your Django application.\n\nThis can be overridden to use a different storage backend with this settings.py variable:\n\n.. code-block::\n\n    REDACTOR_FILE_STORAGE = 'my_site.file_storages.StorageClass'\n\nInformation on writing a custom storage backend is `here in the Django documentation <https://docs.djangoproject.com/en/1.7/howto/custom-file-storage/>`_.\n\nOther third-party libraries exist to provide storage backends for cloud object storages (e.g. `django-cumulus <https://github.com/django-cumulus/django-cumulus/>`_ for Rackspace/OpenStack or `django-storages <http://django-storages.readthedocs.org/en/latest/backends/amazon-S3.html>`_ for Amazon S3). For example, following should be enough to store all your files and images to Amazon S3, even if the rest of the application uses different storage.\n\n.. code-block:: python\n\n    REDACTOR_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'\n    AWS_ACCESS_KEY_ID = '...'\n    AWS_SECRET_ACCESS_KEY = '...'\n    AWS_STORAGE_BUCKET_NAME = '...'\n\n\nNOTE: Soon we will have a better documentation.\n\nContributing\n------------\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request =]\n\nMade by robots, or what?\n------------------------\nAwesome people, you should see the `AUTHORS <https://github.com/douglasmiranda/django-wysiwyg-redactor/blob/master/AUTHORS>`_ file.\n\nAbout the licensing\n-------------------\nYou may want to see the `LICENSE <https://github.com/douglasmiranda/django-wysiwyg-redactor/blob/master/LICENSE>`_ file.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alonraiz/django2-wysiwyg-redactor", "keywords": "django,admin,wysiwyg,editor,redactor,redactorjs", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django2-wysiwyg-redactor", "package_url": "https://pypi.org/project/django2-wysiwyg-redactor/", "platform": "", "project_url": "https://pypi.org/project/django2-wysiwyg-redactor/", "project_urls": {"Homepage": "https://github.com/alonraiz/django2-wysiwyg-redactor"}, "release_url": "https://pypi.org/project/django2-wysiwyg-redactor/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "django-wysiwyg-redactor is a lightweight responsive wysiwyg editor for Django", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"screenshot\">\n<h2>Screenshot</h2>\n<img alt=\"https://raw.githubusercontent.com/douglasmiranda/django-wysiwyg-redactor/master/screenshots/redactor.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f2c811d9a6585ce4896615b4d53a1443cd5b896/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646f75676c61736d6972616e64612f646a616e676f2d777973697779672d7265646163746f722f6d61737465722f73637265656e73686f74732f7265646163746f722e6a7067\">\n</div>\n<div id=\"what-s-that\">\n<h2>What\u2019s that</h2>\n<p><em>django-wysiwyg-redactor</em> is a text editor application for Django, using <a href=\"https://imperavi.com/redactor/\" rel=\"nofollow\">Redactor WYSIWYG editor</a></p>\n</div>\n<div id=\"dependency\">\n<h2>Dependency</h2>\n<ul>\n<li><cite>Pillow or PIL</cite> # for image upload</li>\n</ul>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<ul>\n<li>Install <em>django-wysiwyg-redactor</em>:</li>\n</ul>\n<p><tt>pip install <span class=\"pre\">django-wysiwyg-redactor</span></tt></p>\n<ul>\n<li>Add <cite>\u2018redactor\u2019</cite> to INSTALLED_APPS.</li>\n</ul>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'redactor'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Add <cite>url(r\u2019^redactor/\u2019, include(\u2018redactor.urls\u2019))</cite>, to urls.py</li>\n</ul>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^redactor/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'redactor.urls'</span><span class=\"p\">)),</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre>\n<ul>\n<li>Add default config in settings.py</li>\n</ul>\n<pre><span class=\"n\">REDACTOR_OPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'lang'</span><span class=\"p\">:</span> <span class=\"s1\">'en'</span><span class=\"p\">}</span>\n<span class=\"n\">REDACTOR_UPLOAD</span> <span class=\"o\">=</span> <span class=\"s1\">'uploads/'</span>\n</pre>\n<p>More <a href=\"http://imperavi.com/redactor/docs/settings/\" rel=\"nofollow\">redactor settings</a>.</p>\n</div>\n<div id=\"using-in-model\">\n<h2>Using in model</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redactor.fields</span> <span class=\"kn\">import</span> <span class=\"n\">RedactorField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Entry</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Title'</span><span class=\"p\">)</span>\n    <span class=\"n\">short_text</span> <span class=\"o\">=</span> <span class=\"n\">RedactorField</span><span class=\"p\">(</span><span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Text'</span><span class=\"p\">)</span>\n</pre>\n<p>or use custom parameters:</p>\n<pre><span class=\"n\">short_text</span> <span class=\"o\">=</span> <span class=\"n\">RedactorField</span><span class=\"p\">(</span>\n    <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Text'</span><span class=\"p\">,</span>\n    <span class=\"n\">redactor_options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'lang'</span><span class=\"p\">:</span> <span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'focus'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n    <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'tmp/'</span><span class=\"p\">,</span>\n    <span class=\"n\">allow_file_upload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">allow_image_upload</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-only-in-django-admin\">\n<h2>Using only in Django Admin</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redactor.widgets</span> <span class=\"kn\">import</span> <span class=\"n\">RedactorEditor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">blog.models</span> <span class=\"kn\">import</span> <span class=\"n\">Entry</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EntryAdminForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span>\n        <span class=\"n\">widgets</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n           <span class=\"s1\">'short_text'</span><span class=\"p\">:</span> <span class=\"n\">RedactorEditor</span><span class=\"p\">(),</span>\n        <span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EntryAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">EntryAdminForm</span>\n</pre>\n<p><cite>RedactorEditor</cite> takes the same parameters as <cite>RedactorField</cite>.</p>\n</div>\n<div id=\"using-plugins\">\n<h2>Using Plugins</h2>\n<p><a href=\"http://imperavi.com/redactor/plugins/\" rel=\"nofollow\">Download</a> the plugin you want or <a href=\"http://imperavi.com/redactor/docs/how-to-create-plugin/\" rel=\"nofollow\">create a custom plugin</a>.</p>\n<p>Then:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redactor.fields</span> <span class=\"kn\">import</span> <span class=\"n\">RedactorField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Entry</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Title'</span><span class=\"p\">)</span>\n    <span class=\"n\">short_text</span> <span class=\"o\">=</span> <span class=\"n\">RedactorField</span><span class=\"p\">(</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Text'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># for example, if you downloaded the 'table' plugin:</span>\n        <span class=\"n\">redactor_options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'plugins'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'table'</span><span class=\"p\">]}</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>OR (on settings.py):</p>\n<pre><span class=\"n\">REDACTOR_OPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'lang'</span><span class=\"p\">:</span> <span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'plugins'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'table'</span><span class=\"p\">]}</span>\n</pre>\n<p>Important: if you set a plugin called \u201ctable\u201d, you must create/paste the \u201ctable.js\u201d on <strong>YOUR_STATIC_FILES_FOLDER/redactor/plugins/table.js</strong></p>\n</div>\n<div id=\"upload-handlers\">\n<h2>Upload Handlers</h2>\n<p>SimpleUploader - The Standard Uploader. Will upload your file to REDACTOR_UPLOAD.</p>\n<p>UUIDUploader - This handler will replace the original file name for an UUID.</p>\n<p>DateDirectoryUploader - This handler saves the file in a directory based on the current server date.</p>\n<p>Usage:</p>\n<p>For example, if I want to use the DateDirectoryUploader handler, I will put this on settings.py:</p>\n<pre><span class=\"n\">REDACTOR_UPLOAD_HANDLER</span> <span class=\"o\">=</span> <span class=\"s1\">'redactor.handlers.DateDirectoryUploader'</span>\n</pre>\n</div>\n<div id=\"upload-permissions\">\n<h2>Upload permissions</h2>\n<p>By default django-wysiwyg-redactor uses <cite>staff_member_required</cite> decorator from\n<cite>django.contrib.admin.views.decorators</cite> package to control access to dispatch\nmethod.</p>\n<p>To use custom authentication decorator, set <cite>REDACTOR_AUTH_DECORATOR</cite> to\nanything else, eg. if every authenticated user should have permissions to\nupload files/images/etc.:</p>\n<pre><span class=\"n\">REDACTOR_AUTH_DECORATOR</span> <span class=\"o\">=</span> <span class=\"s1\">'django.contrib.auth.decorators.login_required'</span>\n</pre>\n</div>\n<div id=\"file-storages\">\n<h2>File Storages</h2>\n<p><em>django-wysiwyg-redactor</em> defaults to using the default media storage for your Django application.</p>\n<p>This can be overridden to use a different storage backend with this settings.py variable:</p>\n<pre>REDACTOR_FILE_STORAGE = 'my_site.file_storages.StorageClass'\n</pre>\n<p>Information on writing a custom storage backend is <a href=\"https://docs.djangoproject.com/en/1.7/howto/custom-file-storage/\" rel=\"nofollow\">here in the Django documentation</a>.</p>\n<p>Other third-party libraries exist to provide storage backends for cloud object storages (e.g. <a href=\"https://github.com/django-cumulus/django-cumulus/\" rel=\"nofollow\">django-cumulus</a> for Rackspace/OpenStack or <a href=\"http://django-storages.readthedocs.org/en/latest/backends/amazon-S3.html\" rel=\"nofollow\">django-storages</a> for Amazon S3). For example, following should be enough to store all your files and images to Amazon S3, even if the rest of the application uses different storage.</p>\n<pre><span class=\"n\">REDACTOR_FILE_STORAGE</span> <span class=\"o\">=</span> <span class=\"s1\">'storages.backends.s3boto.S3BotoStorage'</span>\n<span class=\"n\">AWS_ACCESS_KEY_ID</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n<span class=\"n\">AWS_SECRET_ACCESS_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n<span class=\"n\">AWS_STORAGE_BUCKET_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n</pre>\n<p>NOTE: Soon we will have a better documentation.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<ol>\n<li>Fork it!</li>\n<li>Create your feature branch: <cite>git checkout -b my-new-feature</cite></li>\n<li>Commit your changes: <cite>git commit -am \u2018Add some feature\u2019</cite></li>\n<li>Push to the branch: <cite>git push origin my-new-feature</cite></li>\n<li>Submit a pull request =]</li>\n</ol>\n</div>\n<div id=\"made-by-robots-or-what\">\n<h2>Made by robots, or what?</h2>\n<p>Awesome people, you should see the <a href=\"https://github.com/douglasmiranda/django-wysiwyg-redactor/blob/master/AUTHORS\" rel=\"nofollow\">AUTHORS</a> file.</p>\n</div>\n<div id=\"about-the-licensing\">\n<h2>About the licensing</h2>\n<p>You may want to see the <a href=\"https://github.com/douglasmiranda/django-wysiwyg-redactor/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file.</p>\n</div>\n\n          </div>"}, "last_serial": 4828711, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4ba674e674e3f445b15b83a6977ca528", "sha256": "b5736731911cc1d0532a490092ac70a18af28f3a788d1f81b4374e0c0d2ce8d3"}, "downloads": -1, "filename": "django2-wysiwyg-redactor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4ba674e674e3f445b15b83a6977ca528", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151804, "upload_time": "2019-02-16T13:00:35", "upload_time_iso_8601": "2019-02-16T13:00:35.292839Z", "url": "https://files.pythonhosted.org/packages/62/1d/4361f44c27bbe15c050dd75eedd5071fbb01f3c4b06a3281ed4a5486aaca/django2-wysiwyg-redactor-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ba674e674e3f445b15b83a6977ca528", "sha256": "b5736731911cc1d0532a490092ac70a18af28f3a788d1f81b4374e0c0d2ce8d3"}, "downloads": -1, "filename": "django2-wysiwyg-redactor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4ba674e674e3f445b15b83a6977ca528", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151804, "upload_time": "2019-02-16T13:00:35", "upload_time_iso_8601": "2019-02-16T13:00:35.292839Z", "url": "https://files.pythonhosted.org/packages/62/1d/4361f44c27bbe15c050dd75eedd5071fbb01f3c4b06a3281ed4a5486aaca/django2-wysiwyg-redactor-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:55 2020"}