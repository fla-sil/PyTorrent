{"info": {"author": "BlueDynamics Alliance", "author_email": "dev@bluedynamics.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development"], "description": "relstorage_packer\n=================\n\nPacks a ZODB in a *history-free* PostgreSQL RelStorage with blobs in\nfilesystem.\n\n\nOverview\n--------\n\nThis script works also for very large Relstorage ZODBs with several million\nobjects. The original pack script took several days and consumed lots of RAM.\nSo there was need to accelerate the process of packing.\n\nThis script does not consume relevant amounts of RAM, runs much faster than the\noriginal. Where the old took 3.5 days only for analysis it takes now about 6\nhours. On subsequent runs it only processes changes after last run: it\nconsiders only transactions newer than last processed transaction of the prior\nrun.\n\nAt time of writing processing 44mio objects takes initially about 3-6h\ndepending on hardware and configuration of Postgresql.\n\nThe script creates an inverse object graph, this takes little extra space in DB.\n\n\nLimitations\n-----------\n\nAt time of development the critical production environment was a postgresql\ndatabase running relstorage with blobs stored on a fileserver in history free\nmode. So this is implemented.\n\nI'am sure its easily possible to make this work on MySQL and Oracle too.\nAlso considering blobs inside DB is for sure possible.\n\nI'am not sure if this way of cleanup makes sense for non-history-free mode. At\nleast it needs a lot of love and understanding of ZODB to refactor and\nimplement.\n\nContributions are welcome!\n\n\nUsage\n-----\n\nCreate a configuration file. It is the same as used in classical pack script\ndeployed with Relstorage::\n\n    <relstorage>\n        create-schema false\n        keep-history false\n        shared-blob-dir true\n        blob-dir var/blobstorage\n        commit-lock-timeout 600\n        <postgresql>\n            dsn dbname='test_site' host='127.0.0.1' user='zodb' password='secret'\n        </postgresql>\n    </relstorage>\n\nAfter installation a script ``relstorage_pack`` is available::\n\n    Usage: relstorage_pack config_file\n\n    Fast ZODB Relstorage Packer for history free PostgreSQL\n    \n    Options:\n      -h, --help     show this help message and exit\n      -i, --init     Removes all reference counts and starts from scratch.\n      -v, --verbose  More verbose output, includes debug messages.\n\nWhen running first time with your database pass ``--init`` as parameter. This\ndrops and recreates the packing table.\n\n\nHow it works\n============\n\nAt first run it creates a table ``object_inrefs`` used for inverse reference\ncounting. The table has:\n\n``zoid BIGINT NOT NULL,``\n    this is the object id where incoming references are counted  for\n\n``tid BIGINT NOT NULL CHECK (tid > 0)``\n    transaction id of the zoid\n\n``inref BIGINT,``\n    the object id of the incoming reference OR\n    the same as zoid.\n\n``numinrefs BIGINT NOT NULL DEFAULT 0,``\n    if zoid==inref this is the counter field, otherwise it is not relevant.\n\nSo this table is used for two different things:\n\n1) keeping track of the incoming references\n\n2) counting the incoming references.\n\nThe code runs in three main phases:\n\ninitial preparation phase\n    creates missing tables, cleans object_inrefs table and runs through all\n    transactions in order to count and record all transactions.\n\nsubsequent runs preparation phase\n    1) starts at last know tid and then runs through all new\n       transactions in order to count and record changes of new transactions.\n    2) for each new transaction zoid (current) check also if there where\n       references gone meanwhile. so get all prior filed references of current\n       and remove any not valid anymore. For each removed decrement the counter\n       on ``object_inrefs`` where zoid=reference and inref=reference.\n\ncleanup phase\n    1) select an orphan, a zoid with no incoming refs\n    2) get all zoids referenced by this orphan\n    3) for each of this reference delete the entry from ``object_inrefs`` where\n       inref=orphan and zoid=reference\n    4) decrement counter on the entry where zoid=reference and inref=reference\n    5) delete the entry with the orphaned zoid from ``object_state`` (real data)\n    6) start with (1) unless theres no orphan any more.\n\n\nSource Code\n===========\n\nThe sources are in a GIT DVCS with its main branches at\n`github <http://github.com/bluedynamics/relstorage_packer>`_.\n\nWe'd be happy to see many forks and pull-requests to make this package even\nbetter.\n\nUsing integrated buildout and testing\n-------------------------------------\n\nTesting this code i not easy and writing good tests is a task to be done.\nAt the moment you can try the code bu running a\npostgres database on localhost (unless you want to change ``buildout.cfg``).\nThen run as database-user (named ``postgres`` on debian) the commands::\n\n    psql -c \"CREATE USER zope WITH PASSWORD 'secret';\"\n    psql -c \"CREATE DATABASE relstorage_packer_test OWNER zope;\"\n    psql -c \"REVOKE connect ON DATABASE relstorage_packer_test FROM PUBLIC;\"\n    psql -c \"GRANT connect ON DATABASE relstorage_packer_test TO zope;\"\n \nNext (because of my laziness) run ``./bin/instance start`` which starts a Plone.\nAdd a Plone Site, add and delete some content to fill the database with\nsomething to pack.\n\nNext run the packer.\n\nIf you dont like this: pull requests are always welcome.\n\nContributors\n============\n\n- Jens W. Klein <jens@bluedynamics.com> (Maintainer)\n\nThanks to Robert Penz for some good ideas at our Linux User Group Tirol Meeting.\nAlso thanks to Shane Hathaway for ``Relstorage`` and Jim Fulton for ZODB and\n``zc.zodbdgc`` (which unfortunately does not work with Relstorage).\n\nHistory\n=======\n\n2.1 (2014-02-19)\n----------------\n\n- refactored logging, because it was always in my way when changing other parts \n  of the code.\n  [jensens, 2014-02-19]\n\n- after long running connections postgresql takes lots of RAM. So we reconnect\n  every 5000 cycles (TID analyzing or ZOID removal).\n  [jensens, 2014-02-18]\n\n- we had a whole bunch of ``idle in transaction (aborted)`` postgres\n  processes running after packing. This resulted in in an ``OperationalError:\n  out of shared memory HINT: You might need to increase\n  max_pred_locks_per_transaction.`` Error. As a result I refactored the\n  transaction handling and rollback and use explicit commit instead of using\n  the relstorage ``storage._with_store``. Now this part is very controlled\n  and not the source of hanging connections w/o rollback.\n  [jensens, 2014-02-18]\n\n\n2.0.2 (2014-02-05)\n------------------\n\n- also support storages w/o blobstorage\n  [jensens, 2014-02-05]\n\n\n2.0.1 (2014-02-03)\n------------------\n\n- unlock in a finally to really unlock an failure\n  [jensens, 2014-02-03]\n\n- use non-zero exit code if lock could not be aquired.\n  [saily]\n\n\n2.0\n---\n\n- refactored the way of collecting and using the reference counts. faster now.\n  [jensens, 2014-01-11]\n\n1.0\n---\n\n- started package\n  [jensens, 2013-11-23]\n\nLicense\n=======\n\nCopyright (c) 2013, BlueDynamics Alliance, Austria, Germany, Switzerland\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this \n  list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this \n  list of conditions and the following disclaimer in the documentation and/or \n  other materials provided with the distribution.\n* Neither the name of the BlueDynamics Alliance nor the names of its \n  contributors may be used to endorse or promote products derived from this \n  software without specific prior written permission.\n      \nTHIS SOFTWARE IS PROVIDED BY BlueDynamics Alliance ``AS IS`` AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL BlueDynamics Alliance BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/relstorage_packer", "keywords": "postgresql zodb pack zope", "license": "Simplified BSD", "maintainer": null, "maintainer_email": null, "name": "relstorage_packer", "package_url": "https://pypi.org/project/relstorage_packer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/relstorage_packer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/relstorage_packer"}, "release_url": "https://pypi.org/project/relstorage_packer/2.1/", "requires_dist": null, "requires_python": null, "summary": "Packs a History Free PostgreSQL RelStorage for ZODB.", "version": "2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"relstorage-packer\">\n<h2>relstorage_packer</h2>\n<p>Packs a ZODB in a <em>history-free</em> PostgreSQL RelStorage with blobs in\nfilesystem.</p>\n<div id=\"overview\">\n<h3>Overview</h3>\n<p>This script works also for very large Relstorage ZODBs with several million\nobjects. The original pack script took several days and consumed lots of RAM.\nSo there was need to accelerate the process of packing.</p>\n<p>This script does not consume relevant amounts of RAM, runs much faster than the\noriginal. Where the old took 3.5 days only for analysis it takes now about 6\nhours. On subsequent runs it only processes changes after last run: it\nconsiders only transactions newer than last processed transaction of the prior\nrun.</p>\n<p>At time of writing processing 44mio objects takes initially about 3-6h\ndepending on hardware and configuration of Postgresql.</p>\n<p>The script creates an inverse object graph, this takes little extra space in DB.</p>\n</div>\n<div id=\"limitations\">\n<h3>Limitations</h3>\n<p>At time of development the critical production environment was a postgresql\ndatabase running relstorage with blobs stored on a fileserver in history free\nmode. So this is implemented.</p>\n<p>I\u2019am sure its easily possible to make this work on MySQL and Oracle too.\nAlso considering blobs inside DB is for sure possible.</p>\n<p>I\u2019am not sure if this way of cleanup makes sense for non-history-free mode. At\nleast it needs a lot of love and understanding of ZODB to refactor and\nimplement.</p>\n<p>Contributions are welcome!</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Create a configuration file. It is the same as used in classical pack script\ndeployed with Relstorage:</p>\n<pre>&lt;relstorage&gt;\n    create-schema false\n    keep-history false\n    shared-blob-dir true\n    blob-dir var/blobstorage\n    commit-lock-timeout 600\n    &lt;postgresql&gt;\n        dsn dbname='test_site' host='127.0.0.1' user='zodb' password='secret'\n    &lt;/postgresql&gt;\n&lt;/relstorage&gt;\n</pre>\n<p>After installation a script <tt>relstorage_pack</tt> is available:</p>\n<pre>Usage: relstorage_pack config_file\n\nFast ZODB Relstorage Packer for history free PostgreSQL\n\nOptions:\n  -h, --help     show this help message and exit\n  -i, --init     Removes all reference counts and starts from scratch.\n  -v, --verbose  More verbose output, includes debug messages.\n</pre>\n<p>When running first time with your database pass <tt><span class=\"pre\">--init</span></tt> as parameter. This\ndrops and recreates the packing table.</p>\n</div>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>At first run it creates a table <tt>object_inrefs</tt> used for inverse reference\ncounting. The table has:</p>\n<dl>\n<dt><tt>zoid BIGINT NOT NULL,</tt></dt>\n<dd>this is the object id where incoming references are counted  for</dd>\n<dt><tt>tid BIGINT NOT NULL CHECK (tid &gt; 0)</tt></dt>\n<dd>transaction id of the zoid</dd>\n<dt><tt>inref BIGINT,</tt></dt>\n<dd>the object id of the incoming reference OR\nthe same as zoid.</dd>\n<dt><tt>numinrefs BIGINT NOT NULL DEFAULT 0,</tt></dt>\n<dd>if zoid==inref this is the counter field, otherwise it is not relevant.</dd>\n</dl>\n<p>So this table is used for two different things:</p>\n<ol>\n<li>keeping track of the incoming references</li>\n<li>counting the incoming references.</li>\n</ol>\n<p>The code runs in three main phases:</p>\n<dl>\n<dt>initial preparation phase</dt>\n<dd>creates missing tables, cleans object_inrefs table and runs through all\ntransactions in order to count and record all transactions.</dd>\n<dt>subsequent runs preparation phase</dt>\n<dd><ol>\n<li>starts at last know tid and then runs through all new\ntransactions in order to count and record changes of new transactions.</li>\n<li>for each new transaction zoid (current) check also if there where\nreferences gone meanwhile. so get all prior filed references of current\nand remove any not valid anymore. For each removed decrement the counter\non <tt>object_inrefs</tt> where zoid=reference and inref=reference.</li>\n</ol>\n</dd>\n<dt>cleanup phase</dt>\n<dd><ol>\n<li>select an orphan, a zoid with no incoming refs</li>\n<li>get all zoids referenced by this orphan</li>\n<li>for each of this reference delete the entry from <tt>object_inrefs</tt> where\ninref=orphan and zoid=reference</li>\n<li>decrement counter on the entry where zoid=reference and inref=reference</li>\n<li>delete the entry with the orphaned zoid from <tt>object_state</tt> (real data)</li>\n<li>start with (1) unless theres no orphan any more.</li>\n</ol>\n</dd>\n</dl>\n</div>\n<div id=\"source-code\">\n<h2>Source Code</h2>\n<p>The sources are in a GIT DVCS with its main branches at\n<a href=\"http://github.com/bluedynamics/relstorage_packer\" rel=\"nofollow\">github</a>.</p>\n<p>We\u2019d be happy to see many forks and pull-requests to make this package even\nbetter.</p>\n<div id=\"using-integrated-buildout-and-testing\">\n<h3>Using integrated buildout and testing</h3>\n<p>Testing this code i not easy and writing good tests is a task to be done.\nAt the moment you can try the code bu running a\npostgres database on localhost (unless you want to change <tt>buildout.cfg</tt>).\nThen run as database-user (named <tt>postgres</tt> on debian) the commands:</p>\n<pre>psql -c \"CREATE USER zope WITH PASSWORD 'secret';\"\npsql -c \"CREATE DATABASE relstorage_packer_test OWNER zope;\"\npsql -c \"REVOKE connect ON DATABASE relstorage_packer_test FROM PUBLIC;\"\npsql -c \"GRANT connect ON DATABASE relstorage_packer_test TO zope;\"\n</pre>\n<p>Next (because of my laziness) run <tt>./bin/instance start</tt> which starts a Plone.\nAdd a Plone Site, add and delete some content to fill the database with\nsomething to pack.</p>\n<p>Next run the packer.</p>\n<p>If you dont like this: pull requests are always welcome.</p>\n</div>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Jens W. Klein &lt;<a href=\"mailto:jens%40bluedynamics.com\">jens<span>@</span>bluedynamics<span>.</span>com</a>&gt; (Maintainer)</li>\n</ul>\n<p>Thanks to Robert Penz for some good ideas at our Linux User Group Tirol Meeting.\nAlso thanks to Shane Hathaway for <tt>Relstorage</tt> and Jim Fulton for ZODB and\n<tt>zc.zodbdgc</tt> (which unfortunately does not work with Relstorage).</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>2.1 (2014-02-19)</h3>\n<ul>\n<li>refactored logging, because it was always in my way when changing other parts\nof the code.\n[jensens, 2014-02-19]</li>\n<li>after long running connections postgresql takes lots of RAM. So we reconnect\nevery 5000 cycles (TID analyzing or ZOID removal).\n[jensens, 2014-02-18]</li>\n<li>we had a whole bunch of <tt>idle in transaction (aborted)</tt> postgres\nprocesses running after packing. This resulted in in an <tt>OperationalError:\nout of shared memory HINT: You might need to increase\nmax_pred_locks_per_transaction.</tt> Error. As a result I refactored the\ntransaction handling and rollback and use explicit commit instead of using\nthe relstorage <tt>storage._with_store</tt>. Now this part is very controlled\nand not the source of hanging connections w/o rollback.\n[jensens, 2014-02-18]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.0.2 (2014-02-05)</h3>\n<ul>\n<li>also support storages w/o blobstorage\n[jensens, 2014-02-05]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>2.0.1 (2014-02-03)</h3>\n<ul>\n<li>unlock in a finally to really unlock an failure\n[jensens, 2014-02-03]</li>\n<li>use non-zero exit code if lock could not be aquired.\n[saily]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>2.0</h3>\n<ul>\n<li>refactored the way of collecting and using the reference counts. faster now.\n[jensens, 2014-01-11]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0</h3>\n<ul>\n<li>started package\n[jensens, 2013-11-23]</li>\n</ul>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2013, BlueDynamics Alliance, Austria, Germany, Switzerland\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:</p>\n<ul>\n<li>Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.</li>\n<li>Neither the name of the BlueDynamics Alliance nor the names of its\ncontributors may be used to endorse or promote products derived from this\nsoftware without specific prior written permission.</li>\n</ul>\n<p>THIS SOFTWARE IS PROVIDED BY BlueDynamics Alliance <tt>AS IS</tt> AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL BlueDynamics Alliance BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n</div>\n\n          </div>"}, "last_serial": 1004784, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2412ef57bcfc05cc3951702a0cb50f89", "sha256": "80d772e85f3ce6031d10b213df96d1b3cfd176869c89289535f34ca1607d45d1"}, "downloads": -1, "filename": "relstorage_packer-1.0.tar.gz", "has_sig": false, "md5_digest": "2412ef57bcfc05cc3951702a0cb50f89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7972, "upload_time": "2013-11-21T22:50:54", "upload_time_iso_8601": "2013-11-21T22:50:54.146330Z", "url": "https://files.pythonhosted.org/packages/ab/60/201de34086efe453a6e4a42a5709997554485b7e9ca5e94e6c6bb9410aef/relstorage_packer-1.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "f5c913ed3244edbad9185c400caf68a2", "sha256": "9173bca33b265599dbf2873a16b684afa9aeb1f8a031aed3eadc0287089b59c5"}, "downloads": -1, "filename": "relstorage_packer-2.0.1.zip", "has_sig": false, "md5_digest": "f5c913ed3244edbad9185c400caf68a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19297, "upload_time": "2014-02-03T10:40:51", "upload_time_iso_8601": "2014-02-03T10:40:51.470068Z", "url": "https://files.pythonhosted.org/packages/9d/15/f3d78ba0f7c728d37f049ff9a3f6c2d7ca74d0830219622e60700ee9a770/relstorage_packer-2.0.1.zip", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "0514e54c38a3308e8a90188ce5cd7459", "sha256": "038a93e30d2cc4df4a8a11d908442bd988102bd2c8bcd2484d89759ced4ac099"}, "downloads": -1, "filename": "relstorage_packer-2.0.2.zip", "has_sig": false, "md5_digest": "0514e54c38a3308e8a90188ce5cd7459", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19420, "upload_time": "2014-02-05T14:43:10", "upload_time_iso_8601": "2014-02-05T14:43:10.585400Z", "url": "https://files.pythonhosted.org/packages/2b/9b/52b984825275e4921efad1d9e4eccfc7be1f06d516dd1d884e9eba57e129/relstorage_packer-2.0.2.zip", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "4ab7ae96ea3d652bf0c2560da50ff22c", "sha256": "16122098263731996d1db1fe45f9c30db42e9775949c44f52614f450942886a1"}, "downloads": -1, "filename": "relstorage_packer-2.1.tar.gz", "has_sig": false, "md5_digest": "4ab7ae96ea3d652bf0c2560da50ff22c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11154, "upload_time": "2014-02-19T12:07:05", "upload_time_iso_8601": "2014-02-19T12:07:05.173254Z", "url": "https://files.pythonhosted.org/packages/ac/f2/27233ae523db5a1af754640821ee5c2161ba0d563978a507f1302be84299/relstorage_packer-2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ab7ae96ea3d652bf0c2560da50ff22c", "sha256": "16122098263731996d1db1fe45f9c30db42e9775949c44f52614f450942886a1"}, "downloads": -1, "filename": "relstorage_packer-2.1.tar.gz", "has_sig": false, "md5_digest": "4ab7ae96ea3d652bf0c2560da50ff22c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11154, "upload_time": "2014-02-19T12:07:05", "upload_time_iso_8601": "2014-02-19T12:07:05.173254Z", "url": "https://files.pythonhosted.org/packages/ac/f2/27233ae523db5a1af754640821ee5c2161ba0d563978a507f1302be84299/relstorage_packer-2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:57 2020"}