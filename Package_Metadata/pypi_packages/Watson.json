{"info": {"author": "Babbaco", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "Watson\n======\n\nThe Chatbot that won America's hearts in the 80's is back! And this time, he means business!\n\n===\n\n## What Is Watson?\n\nWatson is a python package that allows you to write and host your very own chatbot that will listen to your chat conversations and perform tasks based on certain commands. Watson is based on [Hubot](http://hubot.github.com/) from GitHub, but done in Python. It's easy to install and add your own modules; you should be able to get set up in a matter of minutes!\n\nWe love Hubot, but we also love the ease and readability of Python. That's why we designed Watson's chat modules to be as readable as possible and, well, modular. When you create your Chatbot, you are free to add or remove any modules you want, without having to remove any files. Modules can easily be turned on and off easily, even while the bot is running. Plus, since it runs on Python, all you need to ensure you have is pip, and then with a simple pip install Watson will be up and running easily.\n\nFurthermore, we decided that each chat command's syntax should be as readable as the rest of your code. That's why, instead of using regular expressions (which can be prone to becoming fairly obtuse to even regex experts), we use a simple command syntax with one basic idea: Your command syntax should be exactly what you would type to a human if you were explaining how to run your command. Thus \"/mo?ustasche(?: me)? (.*)/i\" becomes \"m[o]ustache [me] <actor>\" in Watson, which is something you can send to someone who has never programmed, and they'd be able to figure out the command.\n\nCurrently, Watson will chat over two networks: Google Talk (and other Jabber networks, but really who uses those?), and Campfire. We are working on an implementation for HipChat as well. Need Watson to work on another chat network? Let us know, or feel free to write your own and submit a pull request!\n\nWatson takes simple chat commands, based on which chat modules you have installed on your particular bot. By default, Watson commands must be prefaced with the word \"watson\" as in the following examples:\n\n\twatson how was wreck it ralph?\n\twatson pugme\n\twatson help images\n\nBut everything in Watson is configurable, and you're free to rename it for your needs!\n\n## Installation\n\nWatson can be installed using pip, with the following command:\n\n\tpip install watson\n\nAfter that, you should have everything you need to create and run your very own chat bot. \n\n## Setting Up Your Watson\n\nWatson runs on Twisted, and can be run as a Twisted Daemon. Several examples are included in the examples directory of how to set up bots for both Campfire and Jabber. We've even included the init.d files that you can modify to point to your code, so you can run your Watson as a service on your favorite Redhat-based server.\n\nOnce Watson is installed, All you need to do is create a .tac file (These are just Python files that Twisted uses to start Daemons). Assume we're creating a Campfire bot, we'll create campfire_bot.tac. To start up a basic bot, simply have the following in the file:\n\n\tfrom watson.firebot import Firebot\n\t\n\tfrom watson.modules.images import ImageModule\n\tfrom watson.modules.help import HelpModule\n\t\n\tSUBDOMAIN=\"SUBDOMAIN\"\n\tAUTH_TOKEN=\"AUTHTOKEN\"\n\tCOMMAND_NAMES=(\"watson\",\"watson,\")\n\tNAME = \"Watson\"\n\tROOM_NAME = \"ROOMNAME\"\n\t\n\tbot = Firebot(NAME,COMMAND_NAMES,AUTH_TOKEN,SUBDOMAIN,ROOM_NAME)\n\tbot.add_module(ImageModule())\n\tbot.add_module(HelpModule())\n\tapplication = bot.connect()\n\nNote that every .tac file MUST have a variable named application, which is returned by the bot.connect() call. Twisted uses that to run the application, and will error without it.\n\nWith that file made, all you need to do to run it is the following command:\n\n`twistd -ny campfire_bot.tac`\n\nNote that the bot above only includes the Images module, and the Help module (It's always a good idea to include Help...), but you can see how to add the rest of our default modules in the examples directory.\n\n\n## Writing Your Own Module\n\nThe fun part of a chatbot is modifying it to suit your own particular needs. We designed Watson to be easily extensible, and we welcome any submissions for default modules we can add to Watson!\n\nSo, if you're reading this, you probably want to write your own chat module. First, it would be a good idea to check out all our default chat modules under the \"modules\" directory, that we've included as basic examples of Watson's functionality.\n\nOnce you've done that, let's just write an example module. For this example, we'll create a module even simpler than any we've included with Watson, let's call it PingModule. In your project, create ping.py, that looks like the following:\n\n\tfrom watson.modules.chatmodule import ChatModule, command_function\n\t\n\tclass PingModule(ChatModule):\n    \n    \t__module_name__ = \"ping\"\n    \t__module_description__ = \"Plays ping-pong\"\n\t\n\t    @command_function(\"ping\")\n    \tdef ping(self,user):\n    \t\t'''\n    \t\tThe game of ping pong.\n    \t\t'''\n    \t\tself.speak(user,\"pong\")\n\nNote that the module name and description are required. You are free to have any functions within the class, but only functions that are decorated with @command_function will be registered as valid Watson commands.\n\nThe command_function takes a command syntax (to be discussed later), and it must take a user as its first argument. That is because the \"speak\" function requires a user, and you will almost always want to speak in every command (when Watson's silent it's hard to tell if he listened to you).\n\nWith this file saved, just go to your .tac file, import the PingModule class, and call .add_module(PingModule) on your bot you've created. There, it's all installed! Start up Watson, send him the command \"watson ping\" and he will play ping pong with you!\n\n## Command Syntax\n\nIn the above example, we have a very simple command of \"ping\" which can be activated by the chat command \"watson ping\" but obviously that's not very useful or exciting. Don't worry, you can create much more complicated command syntaxes!\n\nBelow is a list of the basic functionality a command syntax can have. Though, the best way to learn is often through example. Take this time to go ahead and read through some of the default chat modules (We suggest the quips.py module for starters) to see some command syntaxes in their native environments.\n\nOnce you've done that, on with the tutorial!\n\n* __String Literals__: In the above example, \"ping\" is a string literal. The command must have that word in that exact spot. Simply write the word in the command, as in `@command_function(\"ping\")` Watson will only run that function once it gets the command, \"watson ping.\" All string literals are tokenized via spaces, so anything separated by whitespace is considered a separate token.\n\n* __String Literals With Multiple Values__: People always have different ways of phrasing things. When you write commands, you should be aware of this, and we've provided a way for your commands to give a little leeway. Simply add a forward slash between values a string literal can have. For example, `@command_function(\"show me the money/monies/monkeys\")` has four string literals in it, \"show\", \"me\", \"the\", and one that can have any of the values of \"money\", \"monies\", and \"monkeys\". This would work for any of the commands \"watson show me the money\" or \"watson show me the monkeys\" Note that the command \"watson show me the money/monies/monkeys\" will fail, and that you must send only one of the options\n\n* __Variable__: Say you want to get a value from a command. We can do that! In the following command, \"direction\" is a variable that will get passed to the function:\n  `@command_function(\"go <direction>\")\n   def go(self, user, direction):`\nNote that the function must take an argument with the same name as each variable in the command. In this example, the command \"watson go up\" would pass the string \"up\" to the go() function.\n   \n* __Variables With Prefixes and/or Postfixes__: Variables don't have to be whole words. The following is completely valid: `@command_function(\"deploy branch=<branch>\")` Note, though, that any given token cannot have multiple variable tags. The following is INVALID: `@command_function(\"deploy branch=<branch>&user=<user>\")` but the following case is perfectly fine: `@command_function(\"deploy branch=<branch> user=<user>\")` This is because each variable is tokenized out via whitespace.\n\n* __Variable With Required Values__: In the above example, the command would accept \"watson go fish\" and \"watson go fubar\" as valid directions, but sometimes you want to limit choices. Check out the following command syntax: `@command_function(\"go <direction=north/west/east/south/up/down>\"` In this case, only those six directions would be considered valid, and the command \"go fish\" would not trigger this function.\n\n* __Optional Parts__: In the Watson command syntax, you can specify part of a command as optional. To do this, just surround it with square brackets. Like the following: `@command_function(\"m[o]ustachify <actor>\")` and `@command_function(\"deploy <branch> [because <reason>]` In the first example, the \"o\" is optional, and the command will work with or without it. In the latter example, you can run it with or without adding a reason, but note that if no reason is supplied, your function will not be passed a \"reason\" variable, and you must provide a default value for it.\n\n## Advanced Techniques\n\n### Protect With Math\n\nWe've included a module, MathModule that does not seem that interesting on its own. But, it provides a potentially useful functionality of protecting a command with beer goggles. Every time someone performs the command, they are asked to solve a very simple algebra problem in order to ensure that they really mean to do what they're doing. This is useful in case (like us) you use Watson to control your infrastructure and project deployments. In order to accomplish this, write a module like the following:\n\n\tfrom watson.modules.chatmodule import ChatModule, command_function\n\tfrom watson.modules.mathchallenge import protect_with_math\n\t\n\tclass SecretModule(ChatModule):\n    \n    \t__module_name__ = \"secret\"\n    \t__module_description__ = \"Tells a secret\"\n    \t__module_dependencies__ = [\"math challenge\"]\n\n\t    @command_function(\"tell me a secret\")\n\t    @protect_with_math()\n    \tdef secret(self,user):\n    \t\t'''\n    \t\tTells a secret\n    \t\t'''\n    \t\tself.speak(user,\"It is a secret to everyone\")\n\nNote that the module has a dependency on the Math Challenge module, so the Math Challenge module must be added to the bot before the Secret Module is. Read the documentation on protect_with_math() for more information.\n\n### @overhear_function()\n\nYou may notice that the command structure of Watson is fairly rigid, so you don't accidentally end up deploying things on your server when you're trying to talk about what you did over the weekend. But, sometimes, you want Watson to be a little more talkative.\n\nFor this reason, we've included the `@overhear_function()` decorator that takes a regular expression and wraps any function inside a chat module. The reason that these functions take regular expressions and not more readable command syntax is that these functions should never be intended to be invoked directly. The Help module specifically overlooks these functions and will not tell the users how to trigger them.\n\nAs soon as Watson overhears any non-command phrase that matches the regular expression, Watson will run the wrapped function. You can see an example of this in the ImagesModule. Note that because these functions are run much more easily than commands, they should not be used for anything important that Watson needs to hear. They should only be used for things it happens to overhear.\n\n### Adventure Game\n\nWatson can even be used to create a group-based text adventure game. We've included AdventureGameModule to illustrate this fact, and you can simply extend that to create your own adventure (that hopefully will be more exciting than ours...)\n\n\n## Requirements\n\nWatson requires Python 2.6+, and requires the following modules:\n* Twisted >= 12.2.0\n* Wokkel >= 0.7.0 (for the Google Talk bot)\n* Pinder >= 1.0.1 (for the Campfire bot)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Babbaco/Watson", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "Watson", "package_url": "https://pypi.org/project/Watson/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Watson/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Babbaco/Watson"}, "release_url": "https://pypi.org/project/Watson/0.1.05/", "requires_dist": null, "requires_python": null, "summary": "The Chatbot that won America's hearts in the 80's is back! And this time, he means business!", "version": "0.1.05", "yanked": false, "html_description": "<div class=\"project-description\">\n            Watson<br>======<br><br>The Chatbot that won America's hearts in the 80's is back! And this time, he means business!<br><br>===<br><br>## What Is Watson?<br><br>Watson is a python package that allows you to write and host your very own chatbot that will listen to your chat conversations and perform tasks based on certain commands. Watson is based on [Hubot](http://hubot.github.com/) from GitHub, but done in Python. It's easy to install and add your own modules; you should be able to get set up in a matter of minutes!<br><br>We love Hubot, but we also love the ease and readability of Python. That's why we designed Watson's chat modules to be as readable as possible and, well, modular. When you create your Chatbot, you are free to add or remove any modules you want, without having to remove any files. Modules can easily be turned on and off easily, even while the bot is running. Plus, since it runs on Python, all you need to ensure you have is pip, and then with a simple pip install Watson will be up and running easily.<br><br>Furthermore, we decided that each chat command's syntax should be as readable as the rest of your code. That's why, instead of using regular expressions (which can be prone to becoming fairly obtuse to even regex experts), we use a simple command syntax with one basic idea: Your command syntax should be exactly what you would type to a human if you were explaining how to run your command. Thus \"/mo?ustasche(?: me)? (.*)/i\" becomes \"m[o]ustache [me] &lt;actor&gt;\" in Watson, which is something you can send to someone who has never programmed, and they'd be able to figure out the command.<br><br>Currently, Watson will chat over two networks: Google Talk (and other Jabber networks, but really who uses those?), and Campfire. We are working on an implementation for HipChat as well. Need Watson to work on another chat network? Let us know, or feel free to write your own and submit a pull request!<br><br>Watson takes simple chat commands, based on which chat modules you have installed on your particular bot. By default, Watson commands must be prefaced with the word \"watson\" as in the following examples:<br><br>\twatson how was wreck it ralph?<br>\twatson pugme<br>\twatson help images<br><br>But everything in Watson is configurable, and you're free to rename it for your needs!<br><br>## Installation<br><br>Watson can be installed using pip, with the following command:<br><br>\tpip install watson<br><br>After that, you should have everything you need to create and run your very own chat bot. <br><br>## Setting Up Your Watson<br><br>Watson runs on Twisted, and can be run as a Twisted Daemon. Several examples are included in the examples directory of how to set up bots for both Campfire and Jabber. We've even included the init.d files that you can modify to point to your code, so you can run your Watson as a service on your favorite Redhat-based server.<br><br>Once Watson is installed, All you need to do is create a .tac file (These are just Python files that Twisted uses to start Daemons). Assume we're creating a Campfire bot, we'll create campfire_bot.tac. To start up a basic bot, simply have the following in the file:<br><br>\tfrom watson.firebot import Firebot<br>\t<br>\tfrom watson.modules.images import ImageModule<br>\tfrom watson.modules.help import HelpModule<br>\t<br>\tSUBDOMAIN=\"SUBDOMAIN\"<br>\tAUTH_TOKEN=\"AUTHTOKEN\"<br>\tCOMMAND_NAMES=(\"watson\",\"watson,\")<br>\tNAME = \"Watson\"<br>\tROOM_NAME = \"ROOMNAME\"<br>\t<br>\tbot = Firebot(NAME,COMMAND_NAMES,AUTH_TOKEN,SUBDOMAIN,ROOM_NAME)<br>\tbot.add_module(ImageModule())<br>\tbot.add_module(HelpModule())<br>\tapplication = bot.connect()<br><br>Note that every .tac file MUST have a variable named application, which is returned by the bot.connect() call. Twisted uses that to run the application, and will error without it.<br><br>With that file made, all you need to do to run it is the following command:<br><br>`twistd -ny campfire_bot.tac`<br><br>Note that the bot above only includes the Images module, and the Help module (It's always a good idea to include Help...), but you can see how to add the rest of our default modules in the examples directory.<br><br><br>## Writing Your Own Module<br><br>The fun part of a chatbot is modifying it to suit your own particular needs. We designed Watson to be easily extensible, and we welcome any submissions for default modules we can add to Watson!<br><br>So, if you're reading this, you probably want to write your own chat module. First, it would be a good idea to check out all our default chat modules under the \"modules\" directory, that we've included as basic examples of Watson's functionality.<br><br>Once you've done that, let's just write an example module. For this example, we'll create a module even simpler than any we've included with Watson, let's call it PingModule. In your project, create ping.py, that looks like the following:<br><br>\tfrom watson.modules.chatmodule import ChatModule, command_function<br>\t<br>\tclass PingModule(ChatModule):<br>    <br>    \t__module_name__ = \"ping\"<br>    \t__module_description__ = \"Plays ping-pong\"<br>\t<br>\t    @command_function(\"ping\")<br>    \tdef ping(self,user):<br>    \t\t'''<br>    \t\tThe game of ping pong.<br>    \t\t'''<br>    \t\tself.speak(user,\"pong\")<br><br>Note that the module name and description are required. You are free to have any functions within the class, but only functions that are decorated with @command_function will be registered as valid Watson commands.<br><br>The command_function takes a command syntax (to be discussed later), and it must take a user as its first argument. That is because the \"speak\" function requires a user, and you will almost always want to speak in every command (when Watson's silent it's hard to tell if he listened to you).<br><br>With this file saved, just go to your .tac file, import the PingModule class, and call .add_module(PingModule) on your bot you've created. There, it's all installed! Start up Watson, send him the command \"watson ping\" and he will play ping pong with you!<br><br>## Command Syntax<br><br>In the above example, we have a very simple command of \"ping\" which can be activated by the chat command \"watson ping\" but obviously that's not very useful or exciting. Don't worry, you can create much more complicated command syntaxes!<br><br>Below is a list of the basic functionality a command syntax can have. Though, the best way to learn is often through example. Take this time to go ahead and read through some of the default chat modules (We suggest the quips.py module for starters) to see some command syntaxes in their native environments.<br><br>Once you've done that, on with the tutorial!<br><br>* __String Literals__: In the above example, \"ping\" is a string literal. The command must have that word in that exact spot. Simply write the word in the command, as in `@command_function(\"ping\")` Watson will only run that function once it gets the command, \"watson ping.\" All string literals are tokenized via spaces, so anything separated by whitespace is considered a separate token.<br><br>* __String Literals With Multiple Values__: People always have different ways of phrasing things. When you write commands, you should be aware of this, and we've provided a way for your commands to give a little leeway. Simply add a forward slash between values a string literal can have. For example, `@command_function(\"show me the money/monies/monkeys\")` has four string literals in it, \"show\", \"me\", \"the\", and one that can have any of the values of \"money\", \"monies\", and \"monkeys\". This would work for any of the commands \"watson show me the money\" or \"watson show me the monkeys\" Note that the command \"watson show me the money/monies/monkeys\" will fail, and that you must send only one of the options<br><br>* __Variable__: Say you want to get a value from a command. We can do that! In the following command, \"direction\" is a variable that will get passed to the function:<br>  `@command_function(\"go &lt;direction&gt;\")<br>   def go(self, user, direction):`<br>Note that the function must take an argument with the same name as each variable in the command. In this example, the command \"watson go up\" would pass the string \"up\" to the go() function.<br>   <br>* __Variables With Prefixes and/or Postfixes__: Variables don't have to be whole words. The following is completely valid: `@command_function(\"deploy branch=&lt;branch&gt;\")` Note, though, that any given token cannot have multiple variable tags. The following is INVALID: `@command_function(\"deploy branch=&lt;branch&gt;&amp;user=&lt;user&gt;\")` but the following case is perfectly fine: `@command_function(\"deploy branch=&lt;branch&gt; user=&lt;user&gt;\")` This is because each variable is tokenized out via whitespace.<br><br>* __Variable With Required Values__: In the above example, the command would accept \"watson go fish\" and \"watson go fubar\" as valid directions, but sometimes you want to limit choices. Check out the following command syntax: `@command_function(\"go &lt;direction=north/west/east/south/up/down&gt;\"` In this case, only those six directions would be considered valid, and the command \"go fish\" would not trigger this function.<br><br>* __Optional Parts__: In the Watson command syntax, you can specify part of a command as optional. To do this, just surround it with square brackets. Like the following: `@command_function(\"m[o]ustachify &lt;actor&gt;\")` and `@command_function(\"deploy &lt;branch&gt; [because &lt;reason&gt;]` In the first example, the \"o\" is optional, and the command will work with or without it. In the latter example, you can run it with or without adding a reason, but note that if no reason is supplied, your function will not be passed a \"reason\" variable, and you must provide a default value for it.<br><br>## Advanced Techniques<br><br>### Protect With Math<br><br>We've included a module, MathModule that does not seem that interesting on its own. But, it provides a potentially useful functionality of protecting a command with beer goggles. Every time someone performs the command, they are asked to solve a very simple algebra problem in order to ensure that they really mean to do what they're doing. This is useful in case (like us) you use Watson to control your infrastructure and project deployments. In order to accomplish this, write a module like the following:<br><br>\tfrom watson.modules.chatmodule import ChatModule, command_function<br>\tfrom watson.modules.mathchallenge import protect_with_math<br>\t<br>\tclass SecretModule(ChatModule):<br>    <br>    \t__module_name__ = \"secret\"<br>    \t__module_description__ = \"Tells a secret\"<br>    \t__module_dependencies__ = [\"math challenge\"]<br><br>\t    @command_function(\"tell me a secret\")<br>\t    @protect_with_math()<br>    \tdef secret(self,user):<br>    \t\t'''<br>    \t\tTells a secret<br>    \t\t'''<br>    \t\tself.speak(user,\"It is a secret to everyone\")<br><br>Note that the module has a dependency on the Math Challenge module, so the Math Challenge module must be added to the bot before the Secret Module is. Read the documentation on protect_with_math() for more information.<br><br>### @overhear_function()<br><br>You may notice that the command structure of Watson is fairly rigid, so you don't accidentally end up deploying things on your server when you're trying to talk about what you did over the weekend. But, sometimes, you want Watson to be a little more talkative.<br><br>For this reason, we've included the `@overhear_function()` decorator that takes a regular expression and wraps any function inside a chat module. The reason that these functions take regular expressions and not more readable command syntax is that these functions should never be intended to be invoked directly. The Help module specifically overlooks these functions and will not tell the users how to trigger them.<br><br>As soon as Watson overhears any non-command phrase that matches the regular expression, Watson will run the wrapped function. You can see an example of this in the ImagesModule. Note that because these functions are run much more easily than commands, they should not be used for anything important that Watson needs to hear. They should only be used for things it happens to overhear.<br><br>### Adventure Game<br><br>Watson can even be used to create a group-based text adventure game. We've included AdventureGameModule to illustrate this fact, and you can simply extend that to create your own adventure (that hopefully will be more exciting than ours...)<br><br><br>## Requirements<br><br>Watson requires Python 2.6+, and requires the following modules:<br>* Twisted &gt;= 12.2.0<br>* Wokkel &gt;= 0.7.0 (for the Google Talk bot)<br>* Pinder &gt;= 1.0.1 (for the Campfire bot)\n          </div>"}, "last_serial": 785987, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "42568e2d8193fb902389705320823fb4", "sha256": "f878f82cfc69f98ed28b4e9a030343aa237a5fdb73a193611d7b76a5b2a2eff3"}, "downloads": -1, "filename": "Watson-0.1.0.tar.gz", "has_sig": false, "md5_digest": "42568e2d8193fb902389705320823fb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17417, "upload_time": "2012-12-06T19:27:08", "upload_time_iso_8601": "2012-12-06T19:27:08.770653Z", "url": "https://files.pythonhosted.org/packages/a9/0b/09ffda76c75efc1f0d3736bdb131d5cbc11fe85a42fec13ed4265a73579a/Watson-0.1.0.tar.gz", "yanked": false}], "0.1.01": [{"comment_text": "", "digests": {"md5": "3463bd93b08fc0f251b743db2e065397", "sha256": "b6bae313789df2ace5ef684e9d37d9629a5f6878ed92499fdca1e537f675a1b8"}, "downloads": -1, "filename": "Watson-0.1.01.tar.gz", "has_sig": false, "md5_digest": "3463bd93b08fc0f251b743db2e065397", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17449, "upload_time": "2012-12-06T19:29:54", "upload_time_iso_8601": "2012-12-06T19:29:54.207927Z", "url": "https://files.pythonhosted.org/packages/2a/f4/cb5fb7d41c77571226944f6ec28c0e5ab21fb060b5eb1176ba1bf15eab56/Watson-0.1.01.tar.gz", "yanked": false}], "0.1.02": [{"comment_text": "", "digests": {"md5": "cc6b5c2ec70a468151869ec20586b646", "sha256": "ddd6ac9a9b09fd1941e369132c06d33571fb44e3ec2d2c53836d20ac6ad169d6"}, "downloads": -1, "filename": "Watson-0.1.02.tar.gz", "has_sig": false, "md5_digest": "cc6b5c2ec70a468151869ec20586b646", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18591, "upload_time": "2012-12-06T19:39:44", "upload_time_iso_8601": "2012-12-06T19:39:44.404596Z", "url": "https://files.pythonhosted.org/packages/98/a4/4cfc36c3287491fb755068ebc4ff1f17e7f78f3b3a7c6c41514949b74502/Watson-0.1.02.tar.gz", "yanked": false}], "0.1.03": [{"comment_text": "", "digests": {"md5": "826635bdcc41b130ae39b410a70de470", "sha256": "0276b782cfec264b041dccd233dcb6a178be59a060274fad0940259ec315cc04"}, "downloads": -1, "filename": "Watson-0.1.03.tar.gz", "has_sig": false, "md5_digest": "826635bdcc41b130ae39b410a70de470", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19267, "upload_time": "2012-12-06T20:11:23", "upload_time_iso_8601": "2012-12-06T20:11:23.726428Z", "url": "https://files.pythonhosted.org/packages/78/bc/4e8069083566a5e21d3b03c0df53bfb073c56757dc88cb1fc3ffcea8f97f/Watson-0.1.03.tar.gz", "yanked": false}], "0.1.04": [{"comment_text": "", "digests": {"md5": "c02cd71f3f12ad77e938ffc9e01e0522", "sha256": "6b6516379ecf72b92118258d94287e0052c290a5076c727cc209c35cb4cee524"}, "downloads": -1, "filename": "Watson-0.1.04.tar.gz", "has_sig": false, "md5_digest": "c02cd71f3f12ad77e938ffc9e01e0522", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23240, "upload_time": "2012-12-10T17:03:58", "upload_time_iso_8601": "2012-12-10T17:03:58.001028Z", "url": "https://files.pythonhosted.org/packages/bb/e7/cf533a87a7c67a8713fe854452a7387267ee47763dd551b42bb8e75d7781/Watson-0.1.04.tar.gz", "yanked": false}], "0.1.05": [{"comment_text": "", "digests": {"md5": "a3b4cc796daf4efe880e794ba03872b0", "sha256": "e835b8bb361a46fa6a46a2a015556783f6922def7971474c3375812c05a1dfba"}, "downloads": -1, "filename": "Watson-0.1.05.tar.gz", "has_sig": false, "md5_digest": "a3b4cc796daf4efe880e794ba03872b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24574, "upload_time": "2013-01-16T15:46:58", "upload_time_iso_8601": "2013-01-16T15:46:58.983111Z", "url": "https://files.pythonhosted.org/packages/e4/41/287e486bd4ba438997b9602ac65088fcb1ade1d8c64d18b858e0e905edc1/Watson-0.1.05.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3b4cc796daf4efe880e794ba03872b0", "sha256": "e835b8bb361a46fa6a46a2a015556783f6922def7971474c3375812c05a1dfba"}, "downloads": -1, "filename": "Watson-0.1.05.tar.gz", "has_sig": false, "md5_digest": "a3b4cc796daf4efe880e794ba03872b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24574, "upload_time": "2013-01-16T15:46:58", "upload_time_iso_8601": "2013-01-16T15:46:58.983111Z", "url": "https://files.pythonhosted.org/packages/e4/41/287e486bd4ba438997b9602ac65088fcb1ade1d8c64d18b858e0e905edc1/Watson-0.1.05.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:05 2020"}