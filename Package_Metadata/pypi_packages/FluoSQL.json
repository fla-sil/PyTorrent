{"info": {"author": "Cyril Coelho", "author_email": "informabox.contact@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Communications"], "description": "# FluoSQL\nOutil pour le SQL\n\nIl faut savoir utiliser le SQL avant de se simplifier la vie.\n\nCreez une base de donn\u00e9e pour tester \"Exemples\" et importez le fichier sql dans le dossier exemples.\n\nAuteur: Cyril Coelho \n\n# Pas besoin de paniquer ceci va vous aider a comprendre comment \u00e7a marche\nLes dependances sont locale a python\nApr\u00e8s il est possible qu'il est necessaire d'installer: httplib, urllib\nInstallez le avec pip:\n<pre><code>\npip install FluoSQL\n</code></pre>\n\nSi \u00e7a ne marche pas:\n<pre><code>\ngit clone https://gitlab.com/LaGvidilo/FluoSQL.git\ncd FluoSQL\nsudo pip install -e .\n</code></pre>\nA noter que vous pouvez aussi utiliser \"setup.py install\"\n\nEnsuite voil\u00e0 comment utiliser cette librairie:\n\nJuste se connecter a une base de donn\u00e9e directement avec le connecteur par d\u00e9fault:\n<pre><code>\nfrom FluoSQL import FluoSQL as FSQL #import FluoSQL and alias this\nSQL_base = FSQL(IP=\"192.168.1.20\",user=\"admin\",password=\"1234\",base=\"Exemple\")\n</code></pre>\n\nEt ensuite faire une requ\u00eate:\n<pre><code>\nprint SQL_base.make_simple_request(type_request = \"select\", selected_row=\"site,visit\", selected_from=\"stats\", WHERE={'visit>':0})\n</code></pre>\n\nEnsuite voil\u00e0 un client http FluoSQL:\n<pre><code>\nIP = \"localhost\"#IP of http server\nusername = \"name@mail.com\"#username (in Auth Table of database \"Exemple\")\npassword = \"1234\"#password (in Auth Table of database \"Exemple\")\nRESULT =\"NO RETURN\"#Start message\n\nimport FluoSQL#Import FluoSQL\ntry:\n\tSQL = FluoSQL.FluoSQL(IP=IP, user=username, password=password,http=True)#connection\n\n\n\t#utilisation\n\t#Set request\n\tSQL.make_simple_request(type_request = \"select\", selected_row=\"site,visit\", selected_from=\"stats\", WHERE={'visit>':0}, set_current=True,mode=-1)\n\tRESULT = SQL.send_request()#And send request & commit\nexcept:\n\tprint \"error: connector\"#if error of connector\n\nprint \"RESULT:\"\nprint RESULT\n</code></pre>\n\nEt voil\u00e0 son serveur:\n<pre><code>\n#coding: utf-8\nfrom FluoSQL import FluoSQL as FSQL\nSQL_base = FSQL(IP=\"192.168.1.21\",user=\"admin\",password=\"1234\",base=\"Exemple\")#For make request simple\nSQL_common = FSQL(IP=\"192.168.1.21\",user=\"admin\",password=\"1234\",base=\"Exemple\")#For send request\n\n\n#SERVEUR FluoSQL======================================START\nfrom bottle import route, run, template, get, post, request, response, static_file, redirect\n\n@post('/connect')\ndef connect_fluo():\n\tmode = request.POST['@mode']\n\tusername = request.POST['@username']\n\tpasshash = request.POST['@hash']\n\tif mode == \"connect\":\n\t\tprint \"\\n/connect\"\n\t\tSQL_base.make_simple_request(type_request = \"select\", selected_row=\"email, HASH, blocked\", selected_from=\"Auth\", WHERE={'email':username,'HASH':passhash}, set_current=True)\n\t\tprint \"REQUEST:\",SQL_base.__REQUEST__\n\t\tRES = SQL_common.set_request(SQL_base.__REQUEST__,1)\n\t\tprint \"RESULT:\",RES\n\t\treturn str(RES)\n\telse:\n\t\treturn None\n\n@post('/req')\ndef request_fluo():\n\tusername = request.POST['@username']\n\tpasshash = request.POST['@hash']\n\tsecurelogin=False\n\tSQL_base.make_simple_request(type_request = \"select\", selected_row=\"email, HASH, blocked\", selected_from=\"Auth\", WHERE={'email':username,'HASH':passhash}, set_current=True)\n\tprint \"SQL_base.__REQUEST__\",SQL_base.__REQUEST__,'\\n'\n\tRES = SQL_common.set_request(SQL_base.__REQUEST__,1)\n\ttry:\n\t\tu,h,b = RES['email'],RES['HASH'],RES['blocked']\n\t\tif b==0:\n\t\t\tif u == username: \n\t\t\t\tif h == passhash:\n\t\t\t\t\tsecurelogin=True\n\texcept:\n\t\tprint \"Pas connect\u00e9\"\n\n\tif (securelogin==False): \n\t\treturn \"<AUTH_ERROR>\"\n\telse:\n\t\tReq = str(request.POST['@req'])+';'\n\t\tprint \"\\n/req\"\n\t\tprint \"(\",Req,\")\"\n\t\ttry:\n\t\t\tprint \"REQUEST:\",Req\n\t\t\tprint \"RESULT:\",str(SQL_common.set_request(Req))\n\t\t\treturn str(SQL_common.set_request(Req))\n\t\texcept:\n\t\t\treturn \"<SQL_ERROR>\"\n\t\t\t\nrun(host='0.0.0.0', port=8000)\n#SERVEUR FluoSQL======================================END\n</code></pre>\n\nJe vous conseil de pas toucher au code serveur si vous voulez que \u00e7a marche.\nPour le serveur il y a une d\u00e9pendance: bottle.\nInstallez le avant de tester:\n<pre><code>\npip install bottle\n</code></pre>\n\nVoila c'est pas plus compliqu\u00e9\n\n\nEnsuite en d\u00e9tail:\nVous pouvez utiliser l'autoloader html & template de FluoSQL:\n<pre><code>\nfrom FluoSQL import autoload\nautoload = autoload()\npages = autoload.load_html()\ntpl = autoload.load_tpl()\n</code></pre>\n\nS\u00e9curiser un mot de passe:\n<pre><code>\nfrom FluoSQL import hash_\nprint hash_(\"test\")\n</code></pre>\n\nCharger un site en lecture seule:\n<pre><code>\nfrom FluoSQL import Fluo\na = Fluo()\na.make_simple_get() \na.execute()\n</code></pre>\n\n\nSe connecter avec le connecteur par d\u00e9faut:\n<pre><code>\nFrom FluoSQL import FluoSQL\nSQL = FluoSQL(IP=\"192.168.1.21\",user=\"phpmyadmin\",password=\"6345\",base=\"Exemple\",http=False)\n</code></pre> \n\nSe connecter avec le connecteur FluoSQL(http):\n<pre><code>\nFrom FluoSQL import FluoSQL\nSQL = FluoSQL(IP=\"192.168.1.21\",user=\"phpmyadmin\",password=\"6345\",base=\"Exemple\",http=True)\n</code></pre> \n\nSe deconnecter:\n<pre><code>\nSQL.db_close()\n</code></pre> \n\n\nUn simple select:\nid>2\n<pre><code>\nSQL.make_simple_request(type_request = \"select\", selected_row=\"*\", values=\"\", selected_from=\"Auth\", WHERE={'id>':2}, mode=0, set_current=False, inc=False)\n</code></pre>\nid = 1 \n<pre><code>\nSQL.make_simple_request(type_request = \"select\", selected_row=\"*\", values=\"\", selected_from=\"Auth\", WHERE={'id':1}, mode=0, set_current=False, inc=False)\n</code></pre> \nMode : 0 ----> fetchall (dict)\nMode : 1 ----> fetchone (dict)\nMode : -1 ---> fetch element\n\n\nRetourner la reponse:\n<pre><code>\nSQL.get_reponse(mode=1)\n</code></pre> \nMode : 0 ----> fetchall (dict)\nMode : 1 ----> fetchone (dict)\nMode : -1 ---> fetch element\n\nPour fabriquer une requete custom:\n<pre><code>\nSQL.set_request(request,mode=0)\n</code></pre> \nMode : 0 ----> fetchall (dict)\nMode : 1 ----> fetchone (dict)\nMode : -1 ---> fetch element\n\n\nPour envoyer une requete:\n<pre><code>\nSQL.send_request()\n</code></pre> \n\n\nVoil\u00e0 c'est tout, plut\u00f4t puissant comme outils hien?\nJe l'ai cr\u00e9\u00e9 a cause de nombreux probl\u00e8me pour faire des applications connectees propres et stable avec le framework kivy.\n\nFonctionne sous kivy et android! ;) \n\n\nA venir: un exemple de serveur SQLITE3(SQLITE3 n'a pas de connecteur online mais je compte en fabriquer un)\n\nPlus d'exemple si besoin.\n\nContactez moi si vous avez des questions int\u00e9lligentes.\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/LaGvidilo/FluoSQL", "keywords": "", "license": "COPYLEFT", "maintainer": "", "maintainer_email": "", "name": "FluoSQL", "package_url": "https://pypi.org/project/FluoSQL/", "platform": "", "project_url": "https://pypi.org/project/FluoSQL/", "project_urls": {"Homepage": "https://gitlab.com/LaGvidilo/FluoSQL"}, "release_url": "https://pypi.org/project/FluoSQL/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Connecteur SQL via HTTP & Outils SQL", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # FluoSQL<br>Outil pour le SQL<br><br>Il faut savoir utiliser le SQL avant de se simplifier la vie.<br><br>Creez une base de donn\u00e9e pour tester \"Exemples\" et importez le fichier sql dans le dossier exemples.<br><br>Auteur: Cyril Coelho <br><br># Pas besoin de paniquer ceci va vous aider a comprendre comment \u00e7a marche<br>Les dependances sont locale a python<br>Apr\u00e8s il est possible qu'il est necessaire d'installer: httplib, urllib<br>Installez le avec pip:<br>&lt;pre&gt;&lt;code&gt;<br>pip install FluoSQL<br>&lt;/code&gt;&lt;/pre&gt;<br><br>Si \u00e7a ne marche pas:<br>&lt;pre&gt;&lt;code&gt;<br>git clone https://gitlab.com/LaGvidilo/FluoSQL.git<br>cd FluoSQL<br>sudo pip install -e .<br>&lt;/code&gt;&lt;/pre&gt;<br>A noter que vous pouvez aussi utiliser \"setup.py install\"<br><br>Ensuite voil\u00e0 comment utiliser cette librairie:<br><br>Juste se connecter a une base de donn\u00e9e directement avec le connecteur par d\u00e9fault:<br>&lt;pre&gt;&lt;code&gt;<br>from FluoSQL import FluoSQL as FSQL #import FluoSQL and alias this<br>SQL_base = FSQL(IP=\"192.168.1.20\",user=\"admin\",password=\"1234\",base=\"Exemple\")<br>&lt;/code&gt;&lt;/pre&gt;<br><br>Et ensuite faire une requ\u00eate:<br>&lt;pre&gt;&lt;code&gt;<br>print SQL_base.make_simple_request(type_request = \"select\", selected_row=\"site,visit\", selected_from=\"stats\", WHERE={'visit&gt;':0})<br>&lt;/code&gt;&lt;/pre&gt;<br><br>Ensuite voil\u00e0 un client http FluoSQL:<br>&lt;pre&gt;&lt;code&gt;<br>IP = \"localhost\"#IP of http server<br>username = \"name@mail.com\"#username (in Auth Table of database \"Exemple\")<br>password = \"1234\"#password (in Auth Table of database \"Exemple\")<br>RESULT =\"NO RETURN\"#Start message<br><br>import FluoSQL#Import FluoSQL<br>try:<br>\tSQL = FluoSQL.FluoSQL(IP=IP, user=username, password=password,http=True)#connection<br><br><br>\t#utilisation<br>\t#Set request<br>\tSQL.make_simple_request(type_request = \"select\", selected_row=\"site,visit\", selected_from=\"stats\", WHERE={'visit&gt;':0}, set_current=True,mode=-1)<br>\tRESULT = SQL.send_request()#And send request &amp; commit<br>except:<br>\tprint \"error: connector\"#if error of connector<br><br>print \"RESULT:\"<br>print RESULT<br>&lt;/code&gt;&lt;/pre&gt;<br><br>Et voil\u00e0 son serveur:<br>&lt;pre&gt;&lt;code&gt;<br>#coding: utf-8<br>from FluoSQL import FluoSQL as FSQL<br>SQL_base = FSQL(IP=\"192.168.1.21\",user=\"admin\",password=\"1234\",base=\"Exemple\")#For make request simple<br>SQL_common = FSQL(IP=\"192.168.1.21\",user=\"admin\",password=\"1234\",base=\"Exemple\")#For send request<br><br><br>#SERVEUR FluoSQL======================================START<br>from bottle import route, run, template, get, post, request, response, static_file, redirect<br><br>@post('/connect')<br>def connect_fluo():<br>\tmode = request.POST['@mode']<br>\tusername = request.POST['@username']<br>\tpasshash = request.POST['@hash']<br>\tif mode == \"connect\":<br>\t\tprint \"\\n/connect\"<br>\t\tSQL_base.make_simple_request(type_request = \"select\", selected_row=\"email, HASH, blocked\", selected_from=\"Auth\", WHERE={'email':username,'HASH':passhash}, set_current=True)<br>\t\tprint \"REQUEST:\",SQL_base.__REQUEST__<br>\t\tRES = SQL_common.set_request(SQL_base.__REQUEST__,1)<br>\t\tprint \"RESULT:\",RES<br>\t\treturn str(RES)<br>\telse:<br>\t\treturn None<br><br>@post('/req')<br>def request_fluo():<br>\tusername = request.POST['@username']<br>\tpasshash = request.POST['@hash']<br>\tsecurelogin=False<br>\tSQL_base.make_simple_request(type_request = \"select\", selected_row=\"email, HASH, blocked\", selected_from=\"Auth\", WHERE={'email':username,'HASH':passhash}, set_current=True)<br>\tprint \"SQL_base.__REQUEST__\",SQL_base.__REQUEST__,'\\n'<br>\tRES = SQL_common.set_request(SQL_base.__REQUEST__,1)<br>\ttry:<br>\t\tu,h,b = RES['email'],RES['HASH'],RES['blocked']<br>\t\tif b==0:<br>\t\t\tif u == username: <br>\t\t\t\tif h == passhash:<br>\t\t\t\t\tsecurelogin=True<br>\texcept:<br>\t\tprint \"Pas connect\u00e9\"<br><br>\tif (securelogin==False): <br>\t\treturn \"&lt;AUTH_ERROR&gt;\"<br>\telse:<br>\t\tReq = str(request.POST['@req'])+';'<br>\t\tprint \"\\n/req\"<br>\t\tprint \"(\",Req,\")\"<br>\t\ttry:<br>\t\t\tprint \"REQUEST:\",Req<br>\t\t\tprint \"RESULT:\",str(SQL_common.set_request(Req))<br>\t\t\treturn str(SQL_common.set_request(Req))<br>\t\texcept:<br>\t\t\treturn \"&lt;SQL_ERROR&gt;\"<br>\t\t\t<br>run(host='0.0.0.0', port=8000)<br>#SERVEUR FluoSQL======================================END<br>&lt;/code&gt;&lt;/pre&gt;<br><br>Je vous conseil de pas toucher au code serveur si vous voulez que \u00e7a marche.<br>Pour le serveur il y a une d\u00e9pendance: bottle.<br>Installez le avant de tester:<br>&lt;pre&gt;&lt;code&gt;<br>pip install bottle<br>&lt;/code&gt;&lt;/pre&gt;<br><br>Voila c'est pas plus compliqu\u00e9<br><br><br>Ensuite en d\u00e9tail:<br>Vous pouvez utiliser l'autoloader html &amp; template de FluoSQL:<br>&lt;pre&gt;&lt;code&gt;<br>from FluoSQL import autoload<br>autoload = autoload()<br>pages = autoload.load_html()<br>tpl = autoload.load_tpl()<br>&lt;/code&gt;&lt;/pre&gt;<br><br>S\u00e9curiser un mot de passe:<br>&lt;pre&gt;&lt;code&gt;<br>from FluoSQL import hash_<br>print hash_(\"test\")<br>&lt;/code&gt;&lt;/pre&gt;<br><br>Charger un site en lecture seule:<br>&lt;pre&gt;&lt;code&gt;<br>from FluoSQL import Fluo<br>a = Fluo()<br>a.make_simple_get() <br>a.execute()<br>&lt;/code&gt;&lt;/pre&gt;<br><br><br>Se connecter avec le connecteur par d\u00e9faut:<br>&lt;pre&gt;&lt;code&gt;<br>From FluoSQL import FluoSQL<br>SQL = FluoSQL(IP=\"192.168.1.21\",user=\"phpmyadmin\",password=\"6345\",base=\"Exemple\",http=False)<br>&lt;/code&gt;&lt;/pre&gt; <br><br>Se connecter avec le connecteur FluoSQL(http):<br>&lt;pre&gt;&lt;code&gt;<br>From FluoSQL import FluoSQL<br>SQL = FluoSQL(IP=\"192.168.1.21\",user=\"phpmyadmin\",password=\"6345\",base=\"Exemple\",http=True)<br>&lt;/code&gt;&lt;/pre&gt; <br><br>Se deconnecter:<br>&lt;pre&gt;&lt;code&gt;<br>SQL.db_close()<br>&lt;/code&gt;&lt;/pre&gt; <br><br><br>Un simple select:<br>id&gt;2<br>&lt;pre&gt;&lt;code&gt;<br>SQL.make_simple_request(type_request = \"select\", selected_row=\"*\", values=\"\", selected_from=\"Auth\", WHERE={'id&gt;':2}, mode=0, set_current=False, inc=False)<br>&lt;/code&gt;&lt;/pre&gt;<br>id = 1 <br>&lt;pre&gt;&lt;code&gt;<br>SQL.make_simple_request(type_request = \"select\", selected_row=\"*\", values=\"\", selected_from=\"Auth\", WHERE={'id':1}, mode=0, set_current=False, inc=False)<br>&lt;/code&gt;&lt;/pre&gt; <br>Mode : 0 ----&gt; fetchall (dict)<br>Mode : 1 ----&gt; fetchone (dict)<br>Mode : -1 ---&gt; fetch element<br><br><br>Retourner la reponse:<br>&lt;pre&gt;&lt;code&gt;<br>SQL.get_reponse(mode=1)<br>&lt;/code&gt;&lt;/pre&gt; <br>Mode : 0 ----&gt; fetchall (dict)<br>Mode : 1 ----&gt; fetchone (dict)<br>Mode : -1 ---&gt; fetch element<br><br>Pour fabriquer une requete custom:<br>&lt;pre&gt;&lt;code&gt;<br>SQL.set_request(request,mode=0)<br>&lt;/code&gt;&lt;/pre&gt; <br>Mode : 0 ----&gt; fetchall (dict)<br>Mode : 1 ----&gt; fetchone (dict)<br>Mode : -1 ---&gt; fetch element<br><br><br>Pour envoyer une requete:<br>&lt;pre&gt;&lt;code&gt;<br>SQL.send_request()<br>&lt;/code&gt;&lt;/pre&gt; <br><br><br>Voil\u00e0 c'est tout, plut\u00f4t puissant comme outils hien?<br>Je l'ai cr\u00e9\u00e9 a cause de nombreux probl\u00e8me pour faire des applications connectees propres et stable avec le framework kivy.<br><br>Fonctionne sous kivy et android! ;) <br><br><br>A venir: un exemple de serveur SQLITE3(SQLITE3 n'a pas de connecteur online mais je compte en fabriquer un)<br><br>Plus d'exemple si besoin.<br><br>Contactez moi si vous avez des questions int\u00e9lligentes.<br><br>\n          </div>"}, "last_serial": 3219141, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9d4de96c234b8374a54989eb1e951084", "sha256": "6effb5de2ced7e6b543eaa985a018cc1ecb1658b467b403771cf4406594f265d"}, "downloads": -1, "filename": "FluoSQL-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9d4de96c234b8374a54989eb1e951084", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3231, "upload_time": "2017-10-02T13:34:55", "upload_time_iso_8601": "2017-10-02T13:34:55.774044Z", "url": "https://files.pythonhosted.org/packages/d7/ac/6fc8e7be39fed13896438fc1e6c229d07aecc90f2fd6a110334a92c0ee0d/FluoSQL-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d4de96c234b8374a54989eb1e951084", "sha256": "6effb5de2ced7e6b543eaa985a018cc1ecb1658b467b403771cf4406594f265d"}, "downloads": -1, "filename": "FluoSQL-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9d4de96c234b8374a54989eb1e951084", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3231, "upload_time": "2017-10-02T13:34:55", "upload_time_iso_8601": "2017-10-02T13:34:55.774044Z", "url": "https://files.pythonhosted.org/packages/d7/ac/6fc8e7be39fed13896438fc1e6c229d07aecc90f2fd6a110334a92c0ee0d/FluoSQL-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:25 2020"}