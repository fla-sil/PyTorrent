{"info": {"author": "Clear Street", "author_email": "engineering@clearstreet.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": "# Gestalt\n\n![Builds](https://github.com/clear-street/gestalt/workflows/Python%20package/badge.svg) [![codecov](https://codecov.io/gh/clear-street/gestalt/branch/master/graph/badge.svg)](https://codecov.io/gh/clear-street/gestalt) [![PyPI download month](https://img.shields.io/pypi/dm/gestalt-cfg.svg)](https://pypi.python.org/pypi/gestalt-cfg/) [![PyPI version shields.io](https://img.shields.io/pypi/v/gestalt-cfg.svg)](https://pypi.python.org/pypi/gestalt-cfg/) [![PyPI license](https://img.shields.io/pypi/l/gestalt-cfg.svg)](https://pypi.python.org/pypi/gestalt-cfg/)\n\n> Gestalt (/\u0261\u0259\u02c8SHt\u00e4lt/) - _noun_ - an organized whole that is perceived as more than the sum of its parts.\n\nGestalt is an opinionated, strongly typed, configuration library for Python 3.6+. Gestalt aims to simplify configuration loading, getting/setting, and management by letting the user focus on writing programs, and letting Gestalt check configuration types, location, and environment variable overrides.\n\n\n\n## Install\n\n```python\npip install gestalt\n```\n\n## Why use Gestalt?\n\nIn short, Gestalt does the following:\n\n1. Automatically loads configuration files from a directory\n2. Allows for runtime overrides\n3. Allows for runtime defaults\n4. Allows for default values when trying to get a config\n5. Allows for environment variable overrides\n6. Type checks _everything_\n\nSpecifically, Gestalt enforces configs in the following order:\n\n1. Calls to `set_*`\n2. Environment Variables\n3. Config Files\n4. Defaults provided in `get_*`\n5. Set default values\n\n## Usage\n\n### TL;DR\n\n```python\nfrom gestalt import gestalt\n\ng = gestalt.Gestalt()\ng.add_config_path('./testdata')\ng.build_config()\n\nmy_val_1 = g.get_string('some.nested.string')\nmy_val_2 = g.get_int('someint')\nmy_val_3 = g.get_float('somekey', 57.29) # If 'somekey' doesn't exist, retrun default value\n\ng.set_bool('my_custom_config', True)\ng.get_list('my_custom_config') # Raises TypeError, as this key is a bool, and we asked for a list\n```\n\n### Initialization\n\nBeginning to use Gestalt is as simple as:\n\n```python\nfrom gestalt import gestalt\n\ng = gestalt.Gestalt()\n```\n\n### Loading Configuration Files\n\nLoading a directory of configuration files is done by calling `add_config_path`\n\n```python\ng.add_config_path('./testdata')\n```\n\nMultiple directory paths can be added:\n\n```python\ng.add_config_path('./testdata2')\ng.add_config_path('./testdata3')\n```\n\nAfter all the directory paths are added, we can render them:\n\n```python\ng.build_config()\n```\n\nNote that the the last added directory path takes the most precedence, and will override conflicting keys from previous paths. In addition to this, the rendering flattens the config, for example, the configuration:\n\n```json\n{\n  \"yarn\": \"blue skies\",\n  \"numbers\": 12345678,\n  \"strangenumbers\": 123.456,\n  \"truthy\": true,\n  \"listing\": [\"dog\", \"cat\"],\n  \"deep\": {\n    \"nested1\": \"hello\",\n    \"nested2\": \"world\"\n  }\n}\n\n```\n\nWill be rendered to this in the internal data structure:\n\n```json\n{\n    \"yarn\": \"blue skies\",\n    \"numbers\": 12345678,\n    \"strangenumbers\": 123.456,\n    \"truthy\": true,\n    \"listing\": [\n        \"dog\",\n        \"cat\"\n    ],\n    \"deep.nested1\": \"hello\",\n    \"deep.nested2\": \"world\"\n}\n\n```\n\nThe nested values are flattened and delimited by periods, making access simpler. **Note**, Gestalt will not normalize names in config files, so keys are case sensitive.\n\n### Environment Variables\n\nEnvironment variable overrides are not enabled by default. To enable it:\n\n```python\ng.auto_env()\n```\n\nWith this, Gestalt will check to see if a corresponding environment variable exists, for example if checking for the key `some.nested.key`, Gestalt will search for `SOME_NESTED_KEY`, and attempt to convert it to the desired type.\n\n### Setting and Getting Values\n\n#### Types\n\nCurrently, Gestalt supports 5 basic types:\n\n1. String\n2. Int\n3. Float\n4. Bool\n5. List\n\nFor each of these types, there is a corresponding `get` and `set` function, allowing for Gestalt to guarantee types.\n\n#### Setting\n\nTo set a configuration value programmatically:\n\n```python\ng.set_string('some.k', 'value')\n```\n\nDefined by the function signature:\n\n```python\nset_string(self, key: str, value: str) -> None\n```\n\nThe same applies to the remaining types that Gestalt supports:\n\n```python\nset_int(key: str, value: int) -> None\nset_float(key: str, value: float) -> None\nset_bool(key: str, value: bool) -> None\nset_list(key: str, value: List[Any]) -> None\n```\n\nNote that all of these functions, in addition from being type hinted, also strongly enforce types, and will raise TypeErrors in the following cases:\n\n1. Setting a key that is not a string\n2. Setting a value that does not match the function signature\n3. Overriding an existing set value of type `a` with type `b`\n\n#### Setting Default Values\n\nTo set a default configuration value programmatically:\n\n```python\ng.set_defualt_string('some.default.k', 'default value')\n```\nDefined by the function signature\n\n```python\nset_default_string(key: str, value: str) -> None\n```\nThe same applies to the remaining types that Gestalt supports:\n\n```python\nset_default_int(key: str, value: int) -> None\nset_default_float(key: str, value: float) -> None\nset_default_bool(key: str, value: bool) -> None\nset_default_list(key: str, value: List[Any]) -> None\n```\n\nNote that all of these functions, in addition from being type hinted, also strongly enforce types, and will raise TypeErrors in the following cases:\n\n1. Setting a key that is not a string\n2. Setting a value that does not match the function signature\n3. Overriding an existing default set value of type `a` with type `b`\n\n#### Getting Values\n\nTo get a configuration value:\n\n```python\ng.get_string('some.key')\n```\n\nThis will attempt to retrieve the given key from the configuration, in order of precedence. If no such key exists in all configurations, a `ValueError` will be raised.\n\nIn addition to this, a default can be passed:\n\n```python\ng.get_string('some.key', 'some default value')\n```\n\nThe `get` function will raise `TypeError`s in the following cases:\n\n1. The key is not a string\n2. The default value does not match the desired type\n3. The configuration has the key with a value of type `a`, when the user desires a value of type `b`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/clear-street/gestalt", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gestalt-cfg", "package_url": "https://pypi.org/project/gestalt-cfg/", "platform": "", "project_url": "https://pypi.org/project/gestalt-cfg/", "project_urls": {"Homepage": "https://github.com/clear-street/gestalt"}, "release_url": "https://pypi.org/project/gestalt-cfg/1.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A sensible configuration library for Python", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Gestalt</h1>\n<p><img alt=\"Builds\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d717523854b9b1a2f1a8d836e48800b0939bb4b/68747470733a2f2f6769746875622e636f6d2f636c6561722d7374726565742f67657374616c742f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"> <a href=\"https://codecov.io/gh/clear-street/gestalt\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6c29e333d9b133a9e81e2fdf1c9f097e4e6da09/68747470733a2f2f636f6465636f762e696f2f67682f636c6561722d7374726565742f67657374616c742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/gestalt-cfg/\" rel=\"nofollow\"><img alt=\"PyPI download month\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a24c68e64892797c4500146e591fe44915782d1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f67657374616c742d6366672e737667\"></a> <a href=\"https://pypi.python.org/pypi/gestalt-cfg/\" rel=\"nofollow\"><img alt=\"PyPI version shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02889916070ce8b3ddf34fed1234a4f8350871ce/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f67657374616c742d6366672e737667\"></a> <a href=\"https://pypi.python.org/pypi/gestalt-cfg/\" rel=\"nofollow\"><img alt=\"PyPI license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d81029bbb0ce884c493f49d67c71cd6b814b107/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f67657374616c742d6366672e737667\"></a></p>\n<blockquote>\n<p>Gestalt (/\u0261\u0259\u02c8SHt\u00e4lt/) - <em>noun</em> - an organized whole that is perceived as more than the sum of its parts.</p>\n</blockquote>\n<p>Gestalt is an opinionated, strongly typed, configuration library for Python 3.6+. Gestalt aims to simplify configuration loading, getting/setting, and management by letting the user focus on writing programs, and letting Gestalt check configuration types, location, and environment variable overrides.</p>\n<h2>Install</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">gestalt</span>\n</pre>\n<h2>Why use Gestalt?</h2>\n<p>In short, Gestalt does the following:</p>\n<ol>\n<li>Automatically loads configuration files from a directory</li>\n<li>Allows for runtime overrides</li>\n<li>Allows for runtime defaults</li>\n<li>Allows for default values when trying to get a config</li>\n<li>Allows for environment variable overrides</li>\n<li>Type checks <em>everything</em></li>\n</ol>\n<p>Specifically, Gestalt enforces configs in the following order:</p>\n<ol>\n<li>Calls to <code>set_*</code></li>\n<li>Environment Variables</li>\n<li>Config Files</li>\n<li>Defaults provided in <code>get_*</code></li>\n<li>Set default values</li>\n</ol>\n<h2>Usage</h2>\n<h3>TL;DR</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gestalt</span> <span class=\"kn\">import</span> <span class=\"n\">gestalt</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">gestalt</span><span class=\"o\">.</span><span class=\"n\">Gestalt</span><span class=\"p\">()</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_config_path</span><span class=\"p\">(</span><span class=\"s1\">'./testdata'</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">build_config</span><span class=\"p\">()</span>\n\n<span class=\"n\">my_val_1</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">get_string</span><span class=\"p\">(</span><span class=\"s1\">'some.nested.string'</span><span class=\"p\">)</span>\n<span class=\"n\">my_val_2</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">get_int</span><span class=\"p\">(</span><span class=\"s1\">'someint'</span><span class=\"p\">)</span>\n<span class=\"n\">my_val_3</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">get_float</span><span class=\"p\">(</span><span class=\"s1\">'somekey'</span><span class=\"p\">,</span> <span class=\"mf\">57.29</span><span class=\"p\">)</span> <span class=\"c1\"># If 'somekey' doesn't exist, retrun default value</span>\n\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">set_bool</span><span class=\"p\">(</span><span class=\"s1\">'my_custom_config'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">get_list</span><span class=\"p\">(</span><span class=\"s1\">'my_custom_config'</span><span class=\"p\">)</span> <span class=\"c1\"># Raises TypeError, as this key is a bool, and we asked for a list</span>\n</pre>\n<h3>Initialization</h3>\n<p>Beginning to use Gestalt is as simple as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gestalt</span> <span class=\"kn\">import</span> <span class=\"n\">gestalt</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">gestalt</span><span class=\"o\">.</span><span class=\"n\">Gestalt</span><span class=\"p\">()</span>\n</pre>\n<h3>Loading Configuration Files</h3>\n<p>Loading a directory of configuration files is done by calling <code>add_config_path</code></p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_config_path</span><span class=\"p\">(</span><span class=\"s1\">'./testdata'</span><span class=\"p\">)</span>\n</pre>\n<p>Multiple directory paths can be added:</p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_config_path</span><span class=\"p\">(</span><span class=\"s1\">'./testdata2'</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_config_path</span><span class=\"p\">(</span><span class=\"s1\">'./testdata3'</span><span class=\"p\">)</span>\n</pre>\n<p>After all the directory paths are added, we can render them:</p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">build_config</span><span class=\"p\">()</span>\n</pre>\n<p>Note that the the last added directory path takes the most precedence, and will override conflicting keys from previous paths. In addition to this, the rendering flattens the config, for example, the configuration:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"yarn\"</span><span class=\"p\">:</span> <span class=\"s2\">\"blue skies\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"numbers\"</span><span class=\"p\">:</span> <span class=\"mi\">12345678</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"strangenumbers\"</span><span class=\"p\">:</span> <span class=\"mf\">123.456</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"truthy\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"listing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cat\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"deep\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"nested1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"nested2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Will be rendered to this in the internal data structure:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"yarn\"</span><span class=\"p\">:</span> <span class=\"s2\">\"blue skies\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"numbers\"</span><span class=\"p\">:</span> <span class=\"mi\">12345678</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"strangenumbers\"</span><span class=\"p\">:</span> <span class=\"mf\">123.456</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"truthy\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"listing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"dog\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"cat\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"deep.nested1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"deep.nested2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The nested values are flattened and delimited by periods, making access simpler. <strong>Note</strong>, Gestalt will not normalize names in config files, so keys are case sensitive.</p>\n<h3>Environment Variables</h3>\n<p>Environment variable overrides are not enabled by default. To enable it:</p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">auto_env</span><span class=\"p\">()</span>\n</pre>\n<p>With this, Gestalt will check to see if a corresponding environment variable exists, for example if checking for the key <code>some.nested.key</code>, Gestalt will search for <code>SOME_NESTED_KEY</code>, and attempt to convert it to the desired type.</p>\n<h3>Setting and Getting Values</h3>\n<h4>Types</h4>\n<p>Currently, Gestalt supports 5 basic types:</p>\n<ol>\n<li>String</li>\n<li>Int</li>\n<li>Float</li>\n<li>Bool</li>\n<li>List</li>\n</ol>\n<p>For each of these types, there is a corresponding <code>get</code> and <code>set</code> function, allowing for Gestalt to guarantee types.</p>\n<h4>Setting</h4>\n<p>To set a configuration value programmatically:</p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">set_string</span><span class=\"p\">(</span><span class=\"s1\">'some.k'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n</pre>\n<p>Defined by the function signature:</p>\n<pre><span class=\"n\">set_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>The same applies to the remaining types that Gestalt supports:</p>\n<pre><span class=\"n\">set_int</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n<span class=\"n\">set_float</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n<span class=\"n\">set_bool</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n<span class=\"n\">set_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>Note that all of these functions, in addition from being type hinted, also strongly enforce types, and will raise TypeErrors in the following cases:</p>\n<ol>\n<li>Setting a key that is not a string</li>\n<li>Setting a value that does not match the function signature</li>\n<li>Overriding an existing set value of type <code>a</code> with type <code>b</code></li>\n</ol>\n<h4>Setting Default Values</h4>\n<p>To set a default configuration value programmatically:</p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">set_defualt_string</span><span class=\"p\">(</span><span class=\"s1\">'some.default.k'</span><span class=\"p\">,</span> <span class=\"s1\">'default value'</span><span class=\"p\">)</span>\n</pre>\n<p>Defined by the function signature</p>\n<pre><span class=\"n\">set_default_string</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>The same applies to the remaining types that Gestalt supports:</p>\n<pre><span class=\"n\">set_default_int</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n<span class=\"n\">set_default_float</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n<span class=\"n\">set_default_bool</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n<span class=\"n\">set_default_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>Note that all of these functions, in addition from being type hinted, also strongly enforce types, and will raise TypeErrors in the following cases:</p>\n<ol>\n<li>Setting a key that is not a string</li>\n<li>Setting a value that does not match the function signature</li>\n<li>Overriding an existing default set value of type <code>a</code> with type <code>b</code></li>\n</ol>\n<h4>Getting Values</h4>\n<p>To get a configuration value:</p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">get_string</span><span class=\"p\">(</span><span class=\"s1\">'some.key'</span><span class=\"p\">)</span>\n</pre>\n<p>This will attempt to retrieve the given key from the configuration, in order of precedence. If no such key exists in all configurations, a <code>ValueError</code> will be raised.</p>\n<p>In addition to this, a default can be passed:</p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">get_string</span><span class=\"p\">(</span><span class=\"s1\">'some.key'</span><span class=\"p\">,</span> <span class=\"s1\">'some default value'</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>get</code> function will raise <code>TypeError</code>s in the following cases:</p>\n<ol>\n<li>The key is not a string</li>\n<li>The default value does not match the desired type</li>\n<li>The configuration has the key with a value of type <code>a</code>, when the user desires a value of type <code>b</code></li>\n</ol>\n\n          </div>"}, "last_serial": 6907246, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "42e14554ef06b7fd3cccc62904cbe286", "sha256": "9154ed8a02cd72ed3658c564a7fb2c40b8603c82c45abad75c98d67bd0079986"}, "downloads": -1, "filename": "gestalt_cfg-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "42e14554ef06b7fd3cccc62904cbe286", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7061, "upload_time": "2020-01-06T22:12:38", "upload_time_iso_8601": "2020-01-06T22:12:38.630914Z", "url": "https://files.pythonhosted.org/packages/e3/91/79d5c8ef78656c7e5eb5cf56b936f6d383742880a794a08200eb07366e86/gestalt_cfg-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0f5b9c23973b2f1c1dd297c09c75727", "sha256": "8fe97af528a8c0ec25baa831c6cbbaa8b1db6e912c70e51377d7c33757cb814c"}, "downloads": -1, "filename": "gestalt-cfg-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e0f5b9c23973b2f1c1dd297c09c75727", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7766, "upload_time": "2020-01-06T22:12:40", "upload_time_iso_8601": "2020-01-06T22:12:40.796038Z", "url": "https://files.pythonhosted.org/packages/1c/7d/85876cd326ad0585d8cf514830bb358d4f6786248aca7ae83da3acc12d9d/gestalt-cfg-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "1e5e29b1588ae3aff613fe62dc305425", "sha256": "96545243881e60442f30ac827f1deee17367f6685972e436c062db6e40bc509c"}, "downloads": -1, "filename": "gestalt_cfg-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1e5e29b1588ae3aff613fe62dc305425", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7053, "upload_time": "2020-01-16T00:09:03", "upload_time_iso_8601": "2020-01-16T00:09:03.798217Z", "url": "https://files.pythonhosted.org/packages/3b/46/147243dd317f05ae63b64074754db6d0789db4865abae30bd0d701978d45/gestalt_cfg-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e6a1d0977ccf7f35c352b5771ba9a99", "sha256": "13ad3075ba4b7152b8509f65ccd26df6a4814c1cfe6f5def7758e6ae5f5c1e2d"}, "downloads": -1, "filename": "gestalt-cfg-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3e6a1d0977ccf7f35c352b5771ba9a99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7762, "upload_time": "2020-01-16T00:09:05", "upload_time_iso_8601": "2020-01-16T00:09:05.456717Z", "url": "https://files.pythonhosted.org/packages/a6/fc/033982bb9892dd4fd1c4dd4defc354262a24714d9ab98337707bde383082/gestalt-cfg-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "9b63a63fae15014df0df99b80c175b64", "sha256": "4bf28ea89fb6b2f98ba46187d21b6f2508d8df5dd2b81d1fe22f897b15097fa4"}, "downloads": -1, "filename": "gestalt_cfg-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9b63a63fae15014df0df99b80c175b64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7285, "upload_time": "2020-03-29T15:49:53", "upload_time_iso_8601": "2020-03-29T15:49:53.043370Z", "url": "https://files.pythonhosted.org/packages/10/89/0f41c0eb4ffaf0372d80c02615a4e1ad8c3c7dcffbcbf219856aeac92b56/gestalt_cfg-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16e9dc341ac1ad15b00b1eb481697356", "sha256": "7719a8ba189d13e576beac2ebbb9c3033e99571736abd9e5ecab3dc1d3b0d993"}, "downloads": -1, "filename": "gestalt-cfg-1.0.4.tar.gz", "has_sig": false, "md5_digest": "16e9dc341ac1ad15b00b1eb481697356", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9024, "upload_time": "2020-03-29T15:49:54", "upload_time_iso_8601": "2020-03-29T15:49:54.294497Z", "url": "https://files.pythonhosted.org/packages/e2/cf/092e40a72c9ec9807402ea8867b4b612c74e071006c39588d193d2cee1d4/gestalt-cfg-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b63a63fae15014df0df99b80c175b64", "sha256": "4bf28ea89fb6b2f98ba46187d21b6f2508d8df5dd2b81d1fe22f897b15097fa4"}, "downloads": -1, "filename": "gestalt_cfg-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9b63a63fae15014df0df99b80c175b64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7285, "upload_time": "2020-03-29T15:49:53", "upload_time_iso_8601": "2020-03-29T15:49:53.043370Z", "url": "https://files.pythonhosted.org/packages/10/89/0f41c0eb4ffaf0372d80c02615a4e1ad8c3c7dcffbcbf219856aeac92b56/gestalt_cfg-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16e9dc341ac1ad15b00b1eb481697356", "sha256": "7719a8ba189d13e576beac2ebbb9c3033e99571736abd9e5ecab3dc1d3b0d993"}, "downloads": -1, "filename": "gestalt-cfg-1.0.4.tar.gz", "has_sig": false, "md5_digest": "16e9dc341ac1ad15b00b1eb481697356", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9024, "upload_time": "2020-03-29T15:49:54", "upload_time_iso_8601": "2020-03-29T15:49:54.294497Z", "url": "https://files.pythonhosted.org/packages/e2/cf/092e40a72c9ec9807402ea8867b4b612c74e071006c39588d193d2cee1d4/gestalt-cfg-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:51 2020"}