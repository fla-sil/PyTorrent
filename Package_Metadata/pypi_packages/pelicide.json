{"info": {"author": "Ingmar Steen", "author_email": "iksteen@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2 :: Only", "Topic :: Internet :: WWW/HTTP"], "description": "Pelicide\n========\n\nAn IDE for Pelican sites.\n\nInstallation\n------------\n\nInstalling pelicide should be easy::\n\n    $ pip install pelicide\n\nDevelopment\n-----------\n\nHowever, pelicide hasn't been released to pypi yet. To build a working\npelicide install, there are some requirements:\n\n- **Python 2.7** *(unfortunately, not all dependencies are python 3\n  compatible)*\n- **Node.js** *(required to host jspm)*\n- **jspm** *(required to collect all javascript dependencies and build\n  the production javascript files, install it using npm install jspm)*\n- **git** *(required to get the actual code and the dependencies)*\n\nOnce those dependencies are installed, you can get the pelicide source code,\ninstall it's dependencies using jspm and pip::\n\n    $ git clone git@github.com:iksteen/pelicide.git\n    $ cd pelicide\n    $ jspm install\n    $ python setup.py develop\n\nRunning pelicide\n----------------\n\nCreate a project file (pelicide.ini) in your pelican directory::\n\n    [pelicide]\n    pelicanconf=pelicanconf.py\n    python=~/.pyenv/pelican/bin/python\n    deploy=make rsync_upload\n    tempdir=tmp\n\nAll settings are optional (in fact, you can run pelicide without a project\nfile). The default value for the ``pelicanconf`` setting is *pelicanconf.py*,\nthe default python interpreter is the interpreter used to execute pelicide.\n\nThe specified python interpreter will be used to set up the pelican\nenvironment. This can be useful if you install pelicide in a different virtual\nenvironment than the one you build your site with.\n\nThe deploy option specifies what command to execute to deploy (or publish)\nyour site. You can specify any shell command. The command will be executed in\nthe directory your pelican config file resides in.\n\nBy default, pelicide will create a temporary directory to store the output\nfiles in (and cleans it up when pelicide exits). If you have a lot of media\nfiles that need to be copied and you restart pelicide often, you may want to\nspecify a persistent output using *tempdir*.\n\nYou can also create a global configuration file in\n*~/.config/pelicide/pelicide.ini*. This config file will be loaded first and\ncan contain the same options as the project file.\n\nNow, start pelicide::\n\n    pelicide pelicide.ini\n\nPelicide will output a lot of debug information (in fact, it is the debug\noutput of pelican which builds your site into a temporary directory) and\nfinally it will tell you to go to a website::\n\n    Pelicide is running. Please visit http://127.0.0.1:6300/\n\nNote that if you run pelicide without a project file and without a global\nconfiguration file, it will look for pelicanconf.py in the current directory\nand it will use the python interpreter used to run pelicide itself.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/iksteen/pelicide/tarball/v0.0.0.dev0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iksteen/pelicide/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pelicide", "package_url": "https://pypi.org/project/pelicide/", "platform": "Platform Independent", "project_url": "https://pypi.org/project/pelicide/", "project_urls": {"Download": "https://github.com/iksteen/pelicide/tarball/v0.0.0.dev0", "Homepage": "https://github.com/iksteen/pelicide/"}, "release_url": "https://pypi.org/project/pelicide/0.0.0.dev0/", "requires_dist": null, "requires_python": null, "summary": "An IDE for Pelican sites.", "version": "0.0.0.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An IDE for Pelican sites.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installing pelicide should be easy:</p>\n<pre>$ pip install pelicide\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>However, pelicide hasn\u2019t been released to pypi yet. To build a working\npelicide install, there are some requirements:</p>\n<ul>\n<li><strong>Python 2.7</strong> <em>(unfortunately, not all dependencies are python 3\ncompatible)</em></li>\n<li><strong>Node.js</strong> <em>(required to host jspm)</em></li>\n<li><strong>jspm</strong> <em>(required to collect all javascript dependencies and build\nthe production javascript files, install it using npm install jspm)</em></li>\n<li><strong>git</strong> <em>(required to get the actual code and the dependencies)</em></li>\n</ul>\n<p>Once those dependencies are installed, you can get the pelicide source code,\ninstall it\u2019s dependencies using jspm and pip:</p>\n<pre>$ git clone git@github.com:iksteen/pelicide.git\n$ cd pelicide\n$ jspm install\n$ python setup.py develop\n</pre>\n</div>\n<div id=\"running-pelicide\">\n<h2>Running pelicide</h2>\n<p>Create a project file (pelicide.ini) in your pelican directory:</p>\n<pre>[pelicide]\npelicanconf=pelicanconf.py\npython=~/.pyenv/pelican/bin/python\ndeploy=make rsync_upload\ntempdir=tmp\n</pre>\n<p>All settings are optional (in fact, you can run pelicide without a project\nfile). The default value for the <tt>pelicanconf</tt> setting is <em>pelicanconf.py</em>,\nthe default python interpreter is the interpreter used to execute pelicide.</p>\n<p>The specified python interpreter will be used to set up the pelican\nenvironment. This can be useful if you install pelicide in a different virtual\nenvironment than the one you build your site with.</p>\n<p>The deploy option specifies what command to execute to deploy (or publish)\nyour site. You can specify any shell command. The command will be executed in\nthe directory your pelican config file resides in.</p>\n<p>By default, pelicide will create a temporary directory to store the output\nfiles in (and cleans it up when pelicide exits). If you have a lot of media\nfiles that need to be copied and you restart pelicide often, you may want to\nspecify a persistent output using <em>tempdir</em>.</p>\n<p>You can also create a global configuration file in\n<em>~/.config/pelicide/pelicide.ini</em>. This config file will be loaded first and\ncan contain the same options as the project file.</p>\n<p>Now, start pelicide:</p>\n<pre>pelicide pelicide.ini\n</pre>\n<p>Pelicide will output a lot of debug information (in fact, it is the debug\noutput of pelican which builds your site into a temporary directory) and\nfinally it will tell you to go to a website:</p>\n<pre>Pelicide is running. Please visit http://127.0.0.1:6300/\n</pre>\n<p>Note that if you run pelicide without a project file and without a global\nconfiguration file, it will look for pelicanconf.py in the current directory\nand it will use the python interpreter used to run pelicide itself.</p>\n</div>\n\n          </div>"}, "last_serial": 2686784, "releases": {"0.0.0.dev0": []}, "urls": [], "timestamp": "Fri May  8 02:56:37 2020"}