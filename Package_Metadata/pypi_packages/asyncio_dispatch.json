{"info": {"author": "Mike Lenzen", "author_email": "lenzenmi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": "README\r\n======\r\n.. image:: https://travis-ci.org/lenzenmi/asyncio_dispatch.svg?branch=master\r\n    :target: https://travis-ci.org/lenzenmi/asyncio_dispatch\r\n\r\n.. image:: https://readthedocs.org/projects/asyncio-dispatch/badge/?version=latest\r\n    :target: http://asyncio-dispatch.readthedocs.org/en/latest/?badge=latest\r\n    :alt: Documentation Status\r\n\r\n.. image:: https://coveralls.io/repos/lenzenmi/asyncio_dispatch/badge.svg?branch=master&service=github \r\n    :target: https://coveralls.io/github/lenzenmi/asyncio_dispatch?branch=master \r\n\r\n\r\n\r\n``asyncio_dispatch`` is a is a signal dispatcher for the ``asyncio`` event loop found in Python versions 3.4 and up.\r\n\r\nCheck out the `official documentation <https://asyncio-dispatch.readthedocs.org/en/latest/>`_\r\n\r\nSynopsis\r\n--------\r\n\r\nMany callbacks can be connected to a Signal. When the Signal is triggered using its ``send()`` method, all connected callbacks will be scheduled for asynchronous execution.\r\n\r\nConnections can optionally be made with two types of filters, ``senders`` and ``keys``. If filters are used, the callback is only scheduled for execution if the Signal is sent with at least one matching ``sender`` or ``key``. A ``sender`` can be any object, while a ``key`` is more likely to be a ``string``. Under the hood, they use ``id()`` and ``hash()`` respectively.\r\n\r\nCallbacks are invoked with keyword arguments that allow the callback to determine which Signal is calling it and which ``senders`` and ``keys`` were specified. Additional keyword arguments can be added to the Signal when it is instantiated, and their default values can be replaced when the Signal is sent.\r\n\r\nExample\r\n-------\r\n\r\n.. code:: python\r\n\r\n    import asyncio\r\n    from asyncio_dispatch import Signal\r\n    \r\n    \r\n    @asyncio.coroutine\r\n    def callback(**kwargs):\r\n        print('callback was called!')\r\n    \r\n    \r\n    loop = asyncio.get_event_loop()\r\n    \r\n    # create the signal\r\n    signal = Signal(loop=loop)\r\n    \r\n    # connect the callback to the Signal - This is a coroutine!\r\n    loop.run_until_complete(loop.create_task(signal.connect(callback)))\r\n    \r\n    # send the signal - This is also a coroutine!\r\n    print('sending the signal.')\r\n    loop.run_until_complete(loop.create_task(signal.send()))\r\n    \r\n    \r\nThe above example will print the following:\r\n\r\n.. code:: bash\r\n\r\n    sending the signal.\r\n    callback was called!\r\n    \r\nFeatures\r\n--------\r\n\r\n* Supports the new async/await syntax found in python 3.5 and up\r\n* Callbacks can be a function, asyncio.coroutine, async def, class method, @staticmethod, or @classmethod\r\n* Multiple callbacks can be connected to the same signal\r\n* Callbacks can be called with additional keyword arguments containing references to arbitrary objects\r\n* Callbacks can be disconnected from a signal\r\n* Signals can hold weak or strong references to callbacks, allowing for automatic disconnection if a reference to a callback is not maintained, or conversely to persist one-off ``lambda`` expressions without needing to maintain a reference\r\n* Callbacks receive the ``Signal`` object that was used to schedule it, so multiple signals can be attached to the same callback and handled differently\r\n* Callbacks can be connected with ``senders`` or ``keys`` which cause the Signal to ignore the callback unless the signal is sent with a matching *Object* or *str* \r\n\r\nLicense\r\n-------\r\n\r\nReleased under the MIT license.\r\n\r\nInstallation\r\n------------\r\n.. code:: bash\r\n    \r\n    pip install asyncio_dispatch", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lenzenmi/asyncio_dispatch/", "keywords": "asyncio_dispatch asyncio dispatch signal event", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "asyncio_dispatch", "package_url": "https://pypi.org/project/asyncio_dispatch/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/asyncio_dispatch/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/lenzenmi/asyncio_dispatch/"}, "release_url": "https://pypi.org/project/asyncio_dispatch/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "asyncio_dispatch is a is a signal dispatcher for the asyncio event loop found in Python versions 3.4 and up.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/lenzenmi/asyncio_dispatch\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/lenzenmi/asyncio_dispatch.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85adbed9002e40e1dbf6227463fef44767e8332e/68747470733a2f2f7472617669732d63692e6f72672f6c656e7a656e6d692f6173796e63696f5f64697370617463682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://asyncio-dispatch.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72134d2c42cedbb41b962bba0bd8f0696a08162d/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6173796e63696f2d64697370617463682f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://coveralls.io/github/lenzenmi/asyncio_dispatch?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/lenzenmi/asyncio_dispatch/badge.svg?branch=master&amp;service=github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4f35c1d3d755e407a8f47e77d5c33cdf0061106/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6c656e7a656e6d692f6173796e63696f5f64697370617463682f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<p><tt>asyncio_dispatch</tt> is a is a signal dispatcher for the <tt>asyncio</tt> event loop found in Python versions 3.4 and up.</p>\n<p>Check out the <a href=\"https://asyncio-dispatch.readthedocs.org/en/latest/\" rel=\"nofollow\">official documentation</a></p>\n<div id=\"synopsis\">\n<h2>Synopsis</h2>\n<p>Many callbacks can be connected to a Signal. When the Signal is triggered using its <tt>send()</tt> method, all connected callbacks will be scheduled for asynchronous execution.</p>\n<p>Connections can optionally be made with two types of filters, <tt>senders</tt> and <tt>keys</tt>. If filters are used, the callback is only scheduled for execution if the Signal is sent with at least one matching <tt>sender</tt> or <tt>key</tt>. A <tt>sender</tt> can be any object, while a <tt>key</tt> is more likely to be a <tt>string</tt>. Under the hood, they use <tt>id()</tt> and <tt>hash()</tt> respectively.</p>\n<p>Callbacks are invoked with keyword arguments that allow the callback to determine which Signal is calling it and which <tt>senders</tt> and <tt>keys</tt> were specified. Additional keyword arguments can be added to the Signal when it is instantiated, and their default values can be replaced when the Signal is sent.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">asyncio_dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">Signal</span>\n\n\n<span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'callback was called!'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create the signal</span>\n<span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># connect the callback to the Signal - This is a coroutine!</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># send the signal - This is also a coroutine!</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sending the signal.'</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()))</span>\n</pre>\n<p>The above example will print the following:</p>\n<pre>sending the signal.\ncallback was called!\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Supports the new async/await syntax found in python 3.5 and up</li>\n<li>Callbacks can be a function, asyncio.coroutine, async def, class method, @staticmethod, or @classmethod</li>\n<li>Multiple callbacks can be connected to the same signal</li>\n<li>Callbacks can be called with additional keyword arguments containing references to arbitrary objects</li>\n<li>Callbacks can be disconnected from a signal</li>\n<li>Signals can hold weak or strong references to callbacks, allowing for automatic disconnection if a reference to a callback is not maintained, or conversely to persist one-off <tt>lambda</tt> expressions without needing to maintain a reference</li>\n<li>Callbacks receive the <tt>Signal</tt> object that was used to schedule it, so multiple signals can be attached to the same callback and handled differently</li>\n<li>Callbacks can be connected with <tt>senders</tt> or <tt>keys</tt> which cause the Signal to ignore the callback unless the signal is sent with a matching <em>Object</em> or <em>str</em></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Released under the MIT license.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install asyncio_dispatch\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1812854, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "958f3cb511ef154716e1b193c7ee3d01", "sha256": "7e3860ad2efed6af4fd185ab0153485b4a239c15bfd053316e0586e4812a3f66"}, "downloads": -1, "filename": "asyncio_dispatch-1.0.0.tar.gz", "has_sig": false, "md5_digest": "958f3cb511ef154716e1b193c7ee3d01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5273, "upload_time": "2015-10-03T07:11:07", "upload_time_iso_8601": "2015-10-03T07:11:07.453838Z", "url": "https://files.pythonhosted.org/packages/4b/90/939fea7de2a683054676954fc46bf66ef7a86c2a7e1899c5705e7db8c58f/asyncio_dispatch-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4a20d776ea3728d74f896b8f390ca813", "sha256": "49c49fd0140d7bc83d1b4f831e4f4473e70126ec55952c85f6d3b9428816e7ca"}, "downloads": -1, "filename": "asyncio_dispatch-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4a20d776ea3728d74f896b8f390ca813", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5290, "upload_time": "2015-10-04T11:19:04", "upload_time_iso_8601": "2015-10-04T11:19:04.224556Z", "url": "https://files.pythonhosted.org/packages/df/49/04fde4496ed239ad47e9430e23be36620550975358a7f64b58e940ac76c9/asyncio_dispatch-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "fb8188b7170d61830101db1a1138b04c", "sha256": "997519deb233a2986aad2d151814e3ea53634845f682589dfdbb612462c75c36"}, "downloads": -1, "filename": "asyncio_dispatch-1.1.0.tar.gz", "has_sig": false, "md5_digest": "fb8188b7170d61830101db1a1138b04c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5754, "upload_time": "2015-10-05T13:06:04", "upload_time_iso_8601": "2015-10-05T13:06:04.041698Z", "url": "https://files.pythonhosted.org/packages/42/ab/231c8ac5f58b400ebdcf1684499777bf928ebbf5aeaaf69eaf7a6043f643/asyncio_dispatch-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb8188b7170d61830101db1a1138b04c", "sha256": "997519deb233a2986aad2d151814e3ea53634845f682589dfdbb612462c75c36"}, "downloads": -1, "filename": "asyncio_dispatch-1.1.0.tar.gz", "has_sig": false, "md5_digest": "fb8188b7170d61830101db1a1138b04c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5754, "upload_time": "2015-10-05T13:06:04", "upload_time_iso_8601": "2015-10-05T13:06:04.041698Z", "url": "https://files.pythonhosted.org/packages/42/ab/231c8ac5f58b400ebdcf1684499777bf928ebbf5aeaaf69eaf7a6043f643/asyncio_dispatch-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:44 2020"}