{"info": {"author": "Detrack", "author_email": "chester@detack.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.com/detrack/elasticroute-python.svg?branch=master)](https://travis-ci.com/detrack/elasticroute-python)\n[![PyPI version](https://badge.fury.io/py/elasticroute.svg)](https://badge.fury.io/py/elasticroute)\n[![Python Versions](https://img.shields.io/pypi/pyversions/elasticroute.svg)](https://pypi.org/project/elasticroute/)\n[![Coverage Status](https://coveralls.io/repos/github/detrack/elasticroute-python/badge.svg?branch=master)](https://coveralls.io/github/detrack/elasticroute-python?branch=master)\n\n# ElasticRoute for Python\n\n![ElasticRoute Logo](http://elasticroute.staging.wpengine.com/wp-content/uploads/2019/02/Elastic-Route-Logo-Text-on-right-e1551344046806.png)\n\n### API for solving large scale travelling salesman/fleet routing problems\n\nYou have a fleet of just 10 vehicles to serve 500 spots in the city. Some vehicles are only available in the day. Some stops can only be served at night. How would you solve this problem?\n\nYou don't need to. Just throw us a list of stops, vehicles and depots and we will do the heavy lifting for you. _Routing as a Service!_\n\n## Preamble\n\nWe offer two API's: The Dashboard API, for developers looking to integrate their existing system with our [ElasticRoute Dashboard](https://www.elasticroute.com/); and the Routing Engine API, for developers looking to solve the Vehicle Routing Problem in a headless environment. The Routing Engine API is only available by request, while the Dashboard API is generally available. Read more [here](https://www.elasticroute.com/routing-engine-api-documentation/).\n\n**Backwards-compatibility notice:** Due to significant overhauls in the backend API, major version 2 of this library is _not_ compatible with code written to work with version 1 of this library.\n\n## Quick Start Guide (Dashboard API)\n\nInstall with pip:\n\n    pip install elasticroute\n\nCreate an instance of `DashboardClient`, passing your API key to the constructor. The API Key can be retrieved from the dashboard of the [web application](https://app.elasticroute.com)).\n\n```python\nfrom elasticroute.clients import DashboardClient\n\ndashboard = DashboardClient(\"YOUR_API_KEY_HERE\")\n```\n\nYou can then programmatically create stops to appear on your Dashboard:\n\n```python\nfrom elasticroute.dashboard import Stop\n\nstop = Stop()\nstop[\"name\"] = \"Changi Airport\"\nstop[\"address\"] = \"80 Airport Boulevard (S)819642\"\n\ndashboard.stops.create(stop)\n```\n\nData attributes of models in this library are accessed and modified using the index operator `[]`. You can get/set any attributes listed in [this page](https://www.elasticroute.com/dashboard-api-documentation/) (under _Field Headers and Description_) that are not marked as **Result** or **Readonly**. Keys passed to the index operator **must** be strings. Passing non-string keys or attempting to modify readonly attributes will trigger a warning.\n\nBy default, this creates a stop on today's date. Change the date by passing the `date` keyword argument:\n\n```python\ndashboard.stops.create(stop, date=\"2019-01-01\")\n```\n\nDate strings must follow the `YYYY-MM-DD` format.\n\nAll CRUD operations are available for stops with the following method signatures:\n\n```python\ndashboard.stops.create(stop)\ndashboard.stops.retrieve(stop_name)\ndashboard.stops.update(stop)\ndashboard.stops.delete(stop)\n```\n\nAll methods accept the `date` keyword argument. The `create` method throws an exception (`elasticroute.errors.repository.ERServiceException`) if a stop with an existing name already exists on the same day, while the `retrieve`, `update` and `delete` methods will throw an exception if a stop with the given name does not exist on that day.\n\nCRUD operations are also available for Vehicles:\n\n```python\nfrom elasticroute.dashboard import Vehicle\n\nvehicle = Vehicle()\nvehicle[\"name\"] = \"Morning shift driver\"\nvehicle[\"avail_from\"] = 900\nvehicle[\"avail_to\"] = 1200\n\ndashboard.vehicles.create(vehicle)\ndashboard.vehicles.retrieve(vehicle_name)\ndashboard.vehicles.update(vehicle)\ndashboard.vehicles.delete(vehicle)\n```\n\nLike for stops, the `create` method throws `elasticroute.errors.repository.ERServiceException` if a vehicle with the same name already exists on the same account, while `retrieve`, `update`, `delete` methods will throw an exception if a vehicle with the given name does not yet exist in the account.\n\nUnlike stops, vehicles are not bound by date, and are present across all dates.\n\nBoth stops and vehicles accept a dictionary in their constructor that automatically sets their corresponding data attributes.\n\nThe library helps you check for invalid values before requests are sent to the server. For instance, setting a vehicle's `avail_to` data attribute to `2500` will trigger a `elasticroute.errors.validator.BadFieldError` when performing any CRUD operations.\n\nCurrently, the Dashboard API is unable to perform CRUD operations on depots. Since the details of depots are likely not going to be changed frequently, please configure (using the web application) all the depots that your team has before using this library to perform plans.\n\n### Programmatically starting the planning process\n\nOnce you have created more than one stop for the day (and created a starting depot via the web application), you can remotely start and stop the planning process:\n```python\n    # where dashboard is an instance of elasticroute.clients.DashboardClient and date is a string in YYYY-MM-DD format\n    dashboard.stops.start_planning(date)\n    dashboard.stops.stop_planning(date)\n```\n## Quick Start Guide (Routing Engine API)\n\nThe Routing Engine API is only available by request; please get in touch with us if you require our headless routing capabilities. Attempting to use the Routing Engine API with an unauthorized API Key will result in your requests being rejected.\n\nIf you haven't already, install this library:\n\n    pip install elasticroute>=2.0.0\n\nCreate an instance of `RoutingClient`, passing your API key in the constructor:\n\n```python\nfrom elasticroute.clients import RoutingClient\n\nrouter = RoutingClient(\"YOUR_API_KEY_HERE\")\n```\n\nCreate a new `Plan` object:\n\n```python\nfrom elasticroute.routing import Plan\n\nplan = Plan(\"some-unique-id\")\n```\n\nGive us a list of stops:\n\n```python\nfrom elasticroute.routing import Stop\nplan.stops = [\n    Stop({\n        \"name\": \"Changi Airport\",\n        \"address\": \"80 Airport Boulevard (S)819642\",\n    }),\n    Stop({\n        \"name\": \"Gardens By the Bay\",\n        \"lat\": \"1.281407\",\n        \"lng\": \"103.865770\",\n    }),\n    # add more stops!\n    # both human-readable addresses and machine-friendly coordinates work!\n]\n```\n\nGive us a list of your available vehicles:\n\n```python\nfrom elasticroute.routing import Vehicle\nplan.vehicles = [\n    Vehicle({\n        \"name\": \"Van 1\"\n    }),\n    Vehicle({\n        \"name\": \"Van 2\"\n    }),\n]\n```\n\nGive us a list of depots (warehouses):\n\n```python\nfrom elasticroute.routing import Depot\nplan.depots = [\n    Depot({\n        \"name\": \"Main Warehouse\",\n        \"address\":  \"61 Kaki Bukit Ave 1 #04-34, Shun Li Ind Park Singapore 417943\",\n    }),\n]\n```\n\nSet your country and timezone:\n\n```python\nplan.generalSettings[\"country\"] = \"SG\"\nplan.generalSettings[\"timezone\"] = \"Asia/Singapore\"\n```\n\nUse the client to submit the plan:\n\n```python\nplan = router.plans.create(plan)\n```\n\nThe planning process is asynchronous as it takes some time to complete. Persist the value of the plan id you used earlier, and retrieve it in a separate process at a later time:\n\n```python\nplan = router.plans.retrieve(plan_id)\n```\n\n`plan.status` should give you `\"planned\"` when the process is complete. Inspect the solution:\n\n```python\nfor stop in plan.stops:\n  print(\"Stop {} will be served by {} at time {}\".format(stop[\"name\"], stop[\"assign_to\"], stop[\"eta\"]))\n```\n\n## Advanced Usage\n\n### Setting time constraints\n\nTime constraints for Stops and Vehicles can be set with the `from` and `till` keys of `elasticroute.common.Stop`, and the `avail_from` and `avail_to` keys of `elasticroute.common.Vehicle`:\n\n```python\nmorning_only_stop = Stop()\nmorning_only_stop[\"name\"] = \"Morning Delivery 1\"\nmorning_only_stop[\"from\"] = 900\nmorning_only_stop[\"till\"] = 1200\n# add address and add to plan...\nmorning_shift_van = Vehicle()\nmorning_shift_van[\"name\"] = \"Morning Shift 1\"\nmorning_shift_van[\"avail_from\"] = 900\nmorning_shift_van[\"avail_till\"] - 1200\n# add to plan and solve, or upload to dashboard using DashboardClient\n```\n\n`elasticroute.common.Stop` is the parent class of `elasticroute.routing.Stop` and `elasticroute.dashboard.Stop`; Vehicles work in a similar manner\n\n### Setting home depots\n\nA \"home depot\" can be set for both Stops and Vehicles. A depot for stops indicate where a vehicle must pick up a stop's goods before arriving, and a depot for vehicles indicate the start and end point of a Vehicle's journey (this implicitly assigns the possible jobs a Vehicle can take).\nBy default, for every stop and vehicle, if the depot field is not specified we will assume it to be the first depot.\n\n```python\ncommon_stop = Stop()\ncommon_stop[\"name\"] = \"Normal Delivery 1\"\ncommon_stop[\"depot\"] = \"Main Warehouse\"\n# set stop address\nrare_stop = Stop()\nrare_stop[\"name\"] = \"Uncommon Delivery 1\"\nrare_stop[\"depot\"] = \"Auxillary Warehouse\"\n# set stop address\nmain_warehouse_van = Vehicle({\n    \"name\": \"Main Warehouse Van\",\n    \"depot\": \"Main Warehouse\"\n})\naux_warehouse_van = Vehicle({\n    \"name\": \"Auxillary Warehouse Van\",\n    \"depot\": \"Auxillary Warehouse\"\n})\n\n# if using DashboardClient:\ndashboard.stops.create(common_stop)\ndashboard.stops.create(rare_stop)\ndashboard.vehicles.create(main_warehouse_van)\ndashboard.vehicles.create(aux_warehouse_van)\n\n# if using RoutingClient:\nplan = Plan(\"my_plan\")\nplan.stops = [common_stop, rare_stop]\nplan.vehicles = [main_warehouse_van, aux_warehouse_van]\nplan.depots = [\n    Depot({\n        \"name\": \"Main Warehouse\",\n        \"address\": \"Somewhere\"\n    }),\n    Depot({\n        \"name\": \"Auxillary Warehouse\",\n        \"address\": \"Somewhere else\"\n    })\n]\nrouter.plans.create(plan)\n```\n\nFor this to work, there must be a corresponding depot with the same name in the dashboard (if using `DashboardClient`) or in the same plan (if using `RoutingClient`)\n\n### Setting load constraints\n\nEach vehicle can be set to have a cumulative maximum weight, volume and (non-cumulative) seating capacity which can be used to determine how many stops it can serve before it has to return to the depot. Conversely, each stop can also be assigned weight, volume and seating loads.\nThe keys are `weight_load`, `volume_load`, `seating_load` for Stops and `weight_capacity`, `volume_capacity` and `seating_capacity` for Vehicles.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/detrack/elasticroute-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "elasticroute", "package_url": "https://pypi.org/project/elasticroute/", "platform": "", "project_url": "https://pypi.org/project/elasticroute/", "project_urls": {"Homepage": "https://github.com/detrack/elasticroute-python"}, "release_url": "https://pypi.org/project/elasticroute/2.0.0/", "requires_dist": ["requests"], "requires_python": "", "summary": "Free, intelligent routing for your logistics \u2013 now on Python", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/detrack/elasticroute-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6eeb9fd5993d462d00246bf8a5e9f486abc5dd89/68747470733a2f2f7472617669732d63692e636f6d2f6465747261636b2f656c6173746963726f7574652d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/elasticroute\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0bbeccf266caf3c0db9756650680b07ebf6661c/68747470733a2f2f62616467652e667572792e696f2f70792f656c6173746963726f7574652e737667\"></a>\n<a href=\"https://pypi.org/project/elasticroute/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1b05d19e6fd2c706f9646196034da70f51c95cb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f656c6173746963726f7574652e737667\"></a>\n<a href=\"https://coveralls.io/github/detrack/elasticroute-python?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ede54f807511b6371eb560411e35b5a5211ab0d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6465747261636b2f656c6173746963726f7574652d707974686f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>ElasticRoute for Python</h1>\n<p><img alt=\"ElasticRoute Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0bdabb12c9b538cb9b4016db809b1d016c6c81c2/687474703a2f2f656c6173746963726f7574652e73746167696e672e7770656e67696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031392f30322f456c61737469632d526f7574652d4c6f676f2d546578742d6f6e2d72696768742d65313535313334343034363830362e706e67\"></p>\n<h3>API for solving large scale travelling salesman/fleet routing problems</h3>\n<p>You have a fleet of just 10 vehicles to serve 500 spots in the city. Some vehicles are only available in the day. Some stops can only be served at night. How would you solve this problem?</p>\n<p>You don't need to. Just throw us a list of stops, vehicles and depots and we will do the heavy lifting for you. <em>Routing as a Service!</em></p>\n<h2>Preamble</h2>\n<p>We offer two API's: The Dashboard API, for developers looking to integrate their existing system with our <a href=\"https://www.elasticroute.com/\" rel=\"nofollow\">ElasticRoute Dashboard</a>; and the Routing Engine API, for developers looking to solve the Vehicle Routing Problem in a headless environment. The Routing Engine API is only available by request, while the Dashboard API is generally available. Read more <a href=\"https://www.elasticroute.com/routing-engine-api-documentation/\" rel=\"nofollow\">here</a>.</p>\n<p><strong>Backwards-compatibility notice:</strong> Due to significant overhauls in the backend API, major version 2 of this library is <em>not</em> compatible with code written to work with version 1 of this library.</p>\n<h2>Quick Start Guide (Dashboard API)</h2>\n<p>Install with pip:</p>\n<pre><code>pip install elasticroute\n</code></pre>\n<p>Create an instance of <code>DashboardClient</code>, passing your API key to the constructor. The API Key can be retrieved from the dashboard of the <a href=\"https://app.elasticroute.com\" rel=\"nofollow\">web application</a>).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticroute.clients</span> <span class=\"kn\">import</span> <span class=\"n\">DashboardClient</span>\n\n<span class=\"n\">dashboard</span> <span class=\"o\">=</span> <span class=\"n\">DashboardClient</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_API_KEY_HERE\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can then programmatically create stops to appear on your Dashboard:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticroute.dashboard</span> <span class=\"kn\">import</span> <span class=\"n\">Stop</span>\n\n<span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"n\">Stop</span><span class=\"p\">()</span>\n<span class=\"n\">stop</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Changi Airport\"</span>\n<span class=\"n\">stop</span><span class=\"p\">[</span><span class=\"s2\">\"address\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"80 Airport Boulevard (S)819642\"</span>\n\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n</pre>\n<p>Data attributes of models in this library are accessed and modified using the index operator <code>[]</code>. You can get/set any attributes listed in <a href=\"https://www.elasticroute.com/dashboard-api-documentation/\" rel=\"nofollow\">this page</a> (under <em>Field Headers and Description</em>) that are not marked as <strong>Result</strong> or <strong>Readonly</strong>. Keys passed to the index operator <strong>must</strong> be strings. Passing non-string keys or attempting to modify readonly attributes will trigger a warning.</p>\n<p>By default, this creates a stop on today's date. Change the date by passing the <code>date</code> keyword argument:</p>\n<pre><span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"s2\">\"2019-01-01\"</span><span class=\"p\">)</span>\n</pre>\n<p>Date strings must follow the <code>YYYY-MM-DD</code> format.</p>\n<p>All CRUD operations are available for stops with the following method signatures:</p>\n<pre><span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"n\">stop_name</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n</pre>\n<p>All methods accept the <code>date</code> keyword argument. The <code>create</code> method throws an exception (<code>elasticroute.errors.repository.ERServiceException</code>) if a stop with an existing name already exists on the same day, while the <code>retrieve</code>, <code>update</code> and <code>delete</code> methods will throw an exception if a stop with the given name does not exist on that day.</p>\n<p>CRUD operations are also available for Vehicles:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticroute.dashboard</span> <span class=\"kn\">import</span> <span class=\"n\">Vehicle</span>\n\n<span class=\"n\">vehicle</span> <span class=\"o\">=</span> <span class=\"n\">Vehicle</span><span class=\"p\">()</span>\n<span class=\"n\">vehicle</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Morning shift driver\"</span>\n<span class=\"n\">vehicle</span><span class=\"p\">[</span><span class=\"s2\">\"avail_from\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">900</span>\n<span class=\"n\">vehicle</span><span class=\"p\">[</span><span class=\"s2\">\"avail_to\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1200</span>\n\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">vehicle</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"n\">vehicle_name</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">vehicle</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">vehicle</span><span class=\"p\">)</span>\n</pre>\n<p>Like for stops, the <code>create</code> method throws <code>elasticroute.errors.repository.ERServiceException</code> if a vehicle with the same name already exists on the same account, while <code>retrieve</code>, <code>update</code>, <code>delete</code> methods will throw an exception if a vehicle with the given name does not yet exist in the account.</p>\n<p>Unlike stops, vehicles are not bound by date, and are present across all dates.</p>\n<p>Both stops and vehicles accept a dictionary in their constructor that automatically sets their corresponding data attributes.</p>\n<p>The library helps you check for invalid values before requests are sent to the server. For instance, setting a vehicle's <code>avail_to</code> data attribute to <code>2500</code> will trigger a <code>elasticroute.errors.validator.BadFieldError</code> when performing any CRUD operations.</p>\n<p>Currently, the Dashboard API is unable to perform CRUD operations on depots. Since the details of depots are likely not going to be changed frequently, please configure (using the web application) all the depots that your team has before using this library to perform plans.</p>\n<h3>Programmatically starting the planning process</h3>\n<p>Once you have created more than one stop for the day (and created a starting depot via the web application), you can remotely start and stop the planning process:</p>\n<pre>    <span class=\"c1\"># where dashboard is an instance of elasticroute.clients.DashboardClient and date is a string in YYYY-MM-DD format</span>\n    <span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">start_planning</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span>\n    <span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">stop_planning</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span>\n</pre>\n<h2>Quick Start Guide (Routing Engine API)</h2>\n<p>The Routing Engine API is only available by request; please get in touch with us if you require our headless routing capabilities. Attempting to use the Routing Engine API with an unauthorized API Key will result in your requests being rejected.</p>\n<p>If you haven't already, install this library:</p>\n<pre><code>pip install elasticroute&gt;=2.0.0\n</code></pre>\n<p>Create an instance of <code>RoutingClient</code>, passing your API key in the constructor:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticroute.clients</span> <span class=\"kn\">import</span> <span class=\"n\">RoutingClient</span>\n\n<span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"n\">RoutingClient</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_API_KEY_HERE\"</span><span class=\"p\">)</span>\n</pre>\n<p>Create a new <code>Plan</code> object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticroute.routing</span> <span class=\"kn\">import</span> <span class=\"n\">Plan</span>\n\n<span class=\"n\">plan</span> <span class=\"o\">=</span> <span class=\"n\">Plan</span><span class=\"p\">(</span><span class=\"s2\">\"some-unique-id\"</span><span class=\"p\">)</span>\n</pre>\n<p>Give us a list of stops:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticroute.routing</span> <span class=\"kn\">import</span> <span class=\"n\">Stop</span>\n<span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">stops</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Stop</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Changi Airport\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"80 Airport Boulevard (S)819642\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n    <span class=\"n\">Stop</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Gardens By the Bay\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lat\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.281407\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lng\"</span><span class=\"p\">:</span> <span class=\"s2\">\"103.865770\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n    <span class=\"c1\"># add more stops!</span>\n    <span class=\"c1\"># both human-readable addresses and machine-friendly coordinates work!</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Give us a list of your available vehicles:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticroute.routing</span> <span class=\"kn\">import</span> <span class=\"n\">Vehicle</span>\n<span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">vehicles</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Vehicle</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Van 1\"</span>\n    <span class=\"p\">}),</span>\n    <span class=\"n\">Vehicle</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Van 2\"</span>\n    <span class=\"p\">}),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Give us a list of depots (warehouses):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticroute.routing</span> <span class=\"kn\">import</span> <span class=\"n\">Depot</span>\n<span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">depots</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Depot</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Main Warehouse\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"address\"</span><span class=\"p\">:</span>  <span class=\"s2\">\"61 Kaki Bukit Ave 1 #04-34, Shun Li Ind Park Singapore 417943\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Set your country and timezone:</p>\n<pre><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">generalSettings</span><span class=\"p\">[</span><span class=\"s2\">\"country\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"SG\"</span>\n<span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">generalSettings</span><span class=\"p\">[</span><span class=\"s2\">\"timezone\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Asia/Singapore\"</span>\n</pre>\n<p>Use the client to submit the plan:</p>\n<pre><span class=\"n\">plan</span> <span class=\"o\">=</span> <span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">plans</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">plan</span><span class=\"p\">)</span>\n</pre>\n<p>The planning process is asynchronous as it takes some time to complete. Persist the value of the plan id you used earlier, and retrieve it in a separate process at a later time:</p>\n<pre><span class=\"n\">plan</span> <span class=\"o\">=</span> <span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">plans</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"n\">plan_id</span><span class=\"p\">)</span>\n</pre>\n<p><code>plan.status</code> should give you <code>\"planned\"</code> when the process is complete. Inspect the solution:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">stop</span> <span class=\"ow\">in</span> <span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Stop </span><span class=\"si\">{}</span><span class=\"s2\"> will be served by </span><span class=\"si\">{}</span><span class=\"s2\"> at time </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">],</span> <span class=\"n\">stop</span><span class=\"p\">[</span><span class=\"s2\">\"assign_to\"</span><span class=\"p\">],</span> <span class=\"n\">stop</span><span class=\"p\">[</span><span class=\"s2\">\"eta\"</span><span class=\"p\">]))</span>\n</pre>\n<h2>Advanced Usage</h2>\n<h3>Setting time constraints</h3>\n<p>Time constraints for Stops and Vehicles can be set with the <code>from</code> and <code>till</code> keys of <code>elasticroute.common.Stop</code>, and the <code>avail_from</code> and <code>avail_to</code> keys of <code>elasticroute.common.Vehicle</code>:</p>\n<pre><span class=\"n\">morning_only_stop</span> <span class=\"o\">=</span> <span class=\"n\">Stop</span><span class=\"p\">()</span>\n<span class=\"n\">morning_only_stop</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Morning Delivery 1\"</span>\n<span class=\"n\">morning_only_stop</span><span class=\"p\">[</span><span class=\"s2\">\"from\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">900</span>\n<span class=\"n\">morning_only_stop</span><span class=\"p\">[</span><span class=\"s2\">\"till\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1200</span>\n<span class=\"c1\"># add address and add to plan...</span>\n<span class=\"n\">morning_shift_van</span> <span class=\"o\">=</span> <span class=\"n\">Vehicle</span><span class=\"p\">()</span>\n<span class=\"n\">morning_shift_van</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Morning Shift 1\"</span>\n<span class=\"n\">morning_shift_van</span><span class=\"p\">[</span><span class=\"s2\">\"avail_from\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">900</span>\n<span class=\"n\">morning_shift_van</span><span class=\"p\">[</span><span class=\"s2\">\"avail_till\"</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1200</span>\n<span class=\"c1\"># add to plan and solve, or upload to dashboard using DashboardClient</span>\n</pre>\n<p><code>elasticroute.common.Stop</code> is the parent class of <code>elasticroute.routing.Stop</code> and <code>elasticroute.dashboard.Stop</code>; Vehicles work in a similar manner</p>\n<h3>Setting home depots</h3>\n<p>A \"home depot\" can be set for both Stops and Vehicles. A depot for stops indicate where a vehicle must pick up a stop's goods before arriving, and a depot for vehicles indicate the start and end point of a Vehicle's journey (this implicitly assigns the possible jobs a Vehicle can take).\nBy default, for every stop and vehicle, if the depot field is not specified we will assume it to be the first depot.</p>\n<pre><span class=\"n\">common_stop</span> <span class=\"o\">=</span> <span class=\"n\">Stop</span><span class=\"p\">()</span>\n<span class=\"n\">common_stop</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Normal Delivery 1\"</span>\n<span class=\"n\">common_stop</span><span class=\"p\">[</span><span class=\"s2\">\"depot\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Main Warehouse\"</span>\n<span class=\"c1\"># set stop address</span>\n<span class=\"n\">rare_stop</span> <span class=\"o\">=</span> <span class=\"n\">Stop</span><span class=\"p\">()</span>\n<span class=\"n\">rare_stop</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Uncommon Delivery 1\"</span>\n<span class=\"n\">rare_stop</span><span class=\"p\">[</span><span class=\"s2\">\"depot\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Auxillary Warehouse\"</span>\n<span class=\"c1\"># set stop address</span>\n<span class=\"n\">main_warehouse_van</span> <span class=\"o\">=</span> <span class=\"n\">Vehicle</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Main Warehouse Van\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"depot\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Main Warehouse\"</span>\n<span class=\"p\">})</span>\n<span class=\"n\">aux_warehouse_van</span> <span class=\"o\">=</span> <span class=\"n\">Vehicle</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Auxillary Warehouse Van\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"depot\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Auxillary Warehouse\"</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># if using DashboardClient:</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">common_stop</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">stops</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">rare_stop</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">main_warehouse_van</span><span class=\"p\">)</span>\n<span class=\"n\">dashboard</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">aux_warehouse_van</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># if using RoutingClient:</span>\n<span class=\"n\">plan</span> <span class=\"o\">=</span> <span class=\"n\">Plan</span><span class=\"p\">(</span><span class=\"s2\">\"my_plan\"</span><span class=\"p\">)</span>\n<span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">stops</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">common_stop</span><span class=\"p\">,</span> <span class=\"n\">rare_stop</span><span class=\"p\">]</span>\n<span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">vehicles</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">main_warehouse_van</span><span class=\"p\">,</span> <span class=\"n\">aux_warehouse_van</span><span class=\"p\">]</span>\n<span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">depots</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Depot</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Main Warehouse\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Somewhere\"</span>\n    <span class=\"p\">}),</span>\n    <span class=\"n\">Depot</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Auxillary Warehouse\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Somewhere else\"</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">]</span>\n<span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">plans</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">plan</span><span class=\"p\">)</span>\n</pre>\n<p>For this to work, there must be a corresponding depot with the same name in the dashboard (if using <code>DashboardClient</code>) or in the same plan (if using <code>RoutingClient</code>)</p>\n<h3>Setting load constraints</h3>\n<p>Each vehicle can be set to have a cumulative maximum weight, volume and (non-cumulative) seating capacity which can be used to determine how many stops it can serve before it has to return to the depot. Conversely, each stop can also be assigned weight, volume and seating loads.\nThe keys are <code>weight_load</code>, <code>volume_load</code>, <code>seating_load</code> for Stops and <code>weight_capacity</code>, <code>volume_capacity</code> and <code>seating_capacity</code> for Vehicles.</p>\n\n          </div>"}, "last_serial": 6017389, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5cfd5cac1acc41674aaaefd6784b5f0e", "sha256": "fb53da486b2a5ed29c3d9ef0f54c71f819393063451a3c35dded26222bb4e587"}, "downloads": -1, "filename": "elasticroute-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5cfd5cac1acc41674aaaefd6784b5f0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8786, "upload_time": "2019-04-11T19:36:33", "upload_time_iso_8601": "2019-04-11T19:36:33.817276Z", "url": "https://files.pythonhosted.org/packages/d6/d6/f61b72823e0010f3888cfdf2c4b9cc90d10a17fcde1cdd2a3710bd382104/elasticroute-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "625ca99e895da842d5258b2aa90f1b63", "sha256": "7cbc69e283005633cdc062a718a047ff596b09a8a41274f095b136a56708759c"}, "downloads": -1, "filename": "elasticroute-1.0.0.tar.gz", "has_sig": false, "md5_digest": "625ca99e895da842d5258b2aa90f1b63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9349, "upload_time": "2019-04-11T19:36:35", "upload_time_iso_8601": "2019-04-11T19:36:35.574088Z", "url": "https://files.pythonhosted.org/packages/3c/12/855bb77d941402f2e2187979f10b2537acf29510f18639144ba26d43f188/elasticroute-1.0.0.tar.gz", "yanked": false}], "1.0.0rc0": [{"comment_text": "", "digests": {"md5": "31d6424233d2d9faf73774fbff5dc1a7", "sha256": "991e0d3aa9595441e8299d5f11b8d7f9ae04ba82c89931e8764276348c5d2f31"}, "downloads": -1, "filename": "elasticroute-1.0.0rc0-py3-none-any.whl", "has_sig": false, "md5_digest": "31d6424233d2d9faf73774fbff5dc1a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1614, "upload_time": "2019-03-25T04:54:27", "upload_time_iso_8601": "2019-03-25T04:54:27.307707Z", "url": "https://files.pythonhosted.org/packages/4e/15/496890b7e69220c7beed4a760c4de29f0ef17a2bfcbaa72dbd7a79af0461/elasticroute-1.0.0rc0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e48390bcc9a26daa717837dda2e2dea", "sha256": "8ac90e055253614a64c66599ea759e7f800eec102754072eeadd962c08dcec62"}, "downloads": -1, "filename": "elasticroute-1.0.0rc0.tar.gz", "has_sig": false, "md5_digest": "0e48390bcc9a26daa717837dda2e2dea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1390, "upload_time": "2019-03-25T04:54:29", "upload_time_iso_8601": "2019-03-25T04:54:29.466388Z", "url": "https://files.pythonhosted.org/packages/4d/3f/55cedd200bf816e15af52aa29ad4ed9a0a88cff317892918b21cf4fb8633/elasticroute-1.0.0rc0.tar.gz", "yanked": false}], "1.0.0rc1": [{"comment_text": "", "digests": {"md5": "40d00d23581706360ffb3225aa1519bb", "sha256": "22cc89a3faaf472a7f3f3accac65e7baa56c4b6b657dc128e8af25ef6dde6aba"}, "downloads": -1, "filename": "elasticroute-1.0.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "40d00d23581706360ffb3225aa1519bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1633, "upload_time": "2019-03-25T05:58:50", "upload_time_iso_8601": "2019-03-25T05:58:50.815494Z", "url": "https://files.pythonhosted.org/packages/53/80/2dac1cb9d8e55fb7987cdb3707547dbd1fdfb3da2a27b10163a4bd2042ee/elasticroute-1.0.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "661df4017d1ebdbf07a619f9a21cf40e", "sha256": "6246918433c5a1df7f8606acf09ed850897dd16539cb855a852e6327ae622e67"}, "downloads": -1, "filename": "elasticroute-1.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "661df4017d1ebdbf07a619f9a21cf40e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1445, "upload_time": "2019-03-25T05:58:52", "upload_time_iso_8601": "2019-03-25T05:58:52.252324Z", "url": "https://files.pythonhosted.org/packages/97/60/7df75d4cb75980932072f97c744175015320a54ff8a33a10fc06e883f5c3/elasticroute-1.0.0rc1.tar.gz", "yanked": false}], "1.0.0rc2": [{"comment_text": "", "digests": {"md5": "255cba51409580e3422db3fddabe8a5a", "sha256": "0ebfa0bac6e71dea3817721941253dd07d8720af693170fbe395f2e98bb3feec"}, "downloads": -1, "filename": "elasticroute-1.0.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "255cba51409580e3422db3fddabe8a5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1839, "upload_time": "2019-03-25T06:41:40", "upload_time_iso_8601": "2019-03-25T06:41:40.255896Z", "url": "https://files.pythonhosted.org/packages/a5/85/ea5b519517cf7810f27c0fe81cf9765ae403a01dcde2e15dde92b69f4cfd/elasticroute-1.0.0rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eefd7f6f7c4862c812461028242598b", "sha256": "0680c7d4df9b01e6d162d4b001f99ab2977327d6f8f639076341c6b7636a65d8"}, "downloads": -1, "filename": "elasticroute-1.0.0rc2.tar.gz", "has_sig": false, "md5_digest": "6eefd7f6f7c4862c812461028242598b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1503, "upload_time": "2019-03-25T06:41:41", "upload_time_iso_8601": "2019-03-25T06:41:41.702365Z", "url": "https://files.pythonhosted.org/packages/5b/27/17aedaa36b736f6b70cbfb40a226f7d94d5873a7ff3aa67470de9f99927f/elasticroute-1.0.0rc2.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "92cffa0af2115e05abbb9a9015d956dc", "sha256": "90c8e535a83dc60945137c4859ca3408bc08206578314058ed8ba4eaf82130e2"}, "downloads": -1, "filename": "elasticroute-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "92cffa0af2115e05abbb9a9015d956dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8763, "upload_time": "2019-04-11T19:48:57", "upload_time_iso_8601": "2019-04-11T19:48:57.869194Z", "url": "https://files.pythonhosted.org/packages/32/41/e77e98d6dc0c95afcfef4f0c56a77082a0dd8bcab8020334dd2a2271de0b/elasticroute-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c251d5d1cdca822a4d876b2f5bb45269", "sha256": "e1fb8d9862faf0333ba1e01d93cd00305adfe10644fd0d68841dd0961b92dfa7"}, "downloads": -1, "filename": "elasticroute-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c251d5d1cdca822a4d876b2f5bb45269", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9261, "upload_time": "2019-04-11T19:49:00", "upload_time_iso_8601": "2019-04-11T19:49:00.548014Z", "url": "https://files.pythonhosted.org/packages/01/31/4daceb35e8ff72dc88e67e43c913c6d68fb406e298ef42fe61d1bd51d089/elasticroute-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "0baeafd6bb3641cbeb84122bebc040fd", "sha256": "5baab34ab96e1942f23a738411ffd0fd673cf400cb6e74f878f86f2606397364"}, "downloads": -1, "filename": "elasticroute-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0baeafd6bb3641cbeb84122bebc040fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9581, "upload_time": "2019-04-13T18:53:13", "upload_time_iso_8601": "2019-04-13T18:53:13.687740Z", "url": "https://files.pythonhosted.org/packages/fe/26/4d9687f4f9430c36065f97733882805c8ec634db7bd13bb1701f4e00e44f/elasticroute-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67875045d4a6ab94bb78bbe27ac5a1a7", "sha256": "aedf736397851d0e0a82bb11d0dbcb6b04b92875cfb0e9d7ee1be1e14620ebae"}, "downloads": -1, "filename": "elasticroute-1.0.2.tar.gz", "has_sig": false, "md5_digest": "67875045d4a6ab94bb78bbe27ac5a1a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9268, "upload_time": "2019-04-13T18:53:16", "upload_time_iso_8601": "2019-04-13T18:53:16.763029Z", "url": "https://files.pythonhosted.org/packages/3f/45/d6050134f6a96fb800ab29cc33a54e6d22dc692ed74c1c322c9028127977/elasticroute-1.0.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "5a0f1f9550a9790c52375e030da5dec0", "sha256": "3424b65478b7361d3b0d06f21eaa299a87469c54128d5afe95279618a25c133a"}, "downloads": -1, "filename": "elasticroute-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a0f1f9550a9790c52375e030da5dec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18649, "upload_time": "2019-10-23T08:59:07", "upload_time_iso_8601": "2019-10-23T08:59:07.127574Z", "url": "https://files.pythonhosted.org/packages/96/85/f85c5cebf3d13f5fd2ddd60a70b93a9ac1ac5d1cc166af38e81570a5d0bd/elasticroute-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a726793f3165667159cd2824ce6ebcba", "sha256": "e672faa4556dd7b1604e96a26d7ba7468aa847d4fb651a4ee7aa92b55a2c7efb"}, "downloads": -1, "filename": "elasticroute-2.0.0.tar.gz", "has_sig": false, "md5_digest": "a726793f3165667159cd2824ce6ebcba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15181, "upload_time": "2019-10-23T08:59:09", "upload_time_iso_8601": "2019-10-23T08:59:09.394777Z", "url": "https://files.pythonhosted.org/packages/e9/be/e45ffb8be0e85cc25fea15319d728f7be28df142cfaf6151fe61efefdc8d/elasticroute-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5a0f1f9550a9790c52375e030da5dec0", "sha256": "3424b65478b7361d3b0d06f21eaa299a87469c54128d5afe95279618a25c133a"}, "downloads": -1, "filename": "elasticroute-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a0f1f9550a9790c52375e030da5dec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18649, "upload_time": "2019-10-23T08:59:07", "upload_time_iso_8601": "2019-10-23T08:59:07.127574Z", "url": "https://files.pythonhosted.org/packages/96/85/f85c5cebf3d13f5fd2ddd60a70b93a9ac1ac5d1cc166af38e81570a5d0bd/elasticroute-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a726793f3165667159cd2824ce6ebcba", "sha256": "e672faa4556dd7b1604e96a26d7ba7468aa847d4fb651a4ee7aa92b55a2c7efb"}, "downloads": -1, "filename": "elasticroute-2.0.0.tar.gz", "has_sig": false, "md5_digest": "a726793f3165667159cd2824ce6ebcba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15181, "upload_time": "2019-10-23T08:59:09", "upload_time_iso_8601": "2019-10-23T08:59:09.394777Z", "url": "https://files.pythonhosted.org/packages/e9/be/e45ffb8be0e85cc25fea15319d728f7be28df142cfaf6151fe61efefdc8d/elasticroute-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:02 2020"}