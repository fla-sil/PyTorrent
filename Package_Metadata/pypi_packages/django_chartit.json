{"info": {"author": "Alexander Todorov", "author_email": "atodorov@mrsenko.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "################\nDjango-Chartit\n################\n\n.. image:: https://readthedocs.org/projects/django-chartit/badge/?version=latest\n    :target: http://django-chartit.readthedocs.org/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://travis-ci.org/chartit/django-chartit.svg?branch=master\n    :target: https://travis-ci.org/chartit/django-chartit\n\n.. image:: https://landscape.io/github/chartit/django-chartit/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/chartit/django-chartit/master\n   :alt: Code Health\n\n.. image:: https://coveralls.io/repos/github/chartit/django-chartit/badge.svg?branch=master\n  :target: https://coveralls.io/github/chartit/django-chartit?branch=master\n\n\nDjango Chartit is a Django app that can be used to easily create charts from the data\nin your database. The charts are rendered using ``Highcharts`` and ``jQuery``\nJavaScript libraries. Data in your database can be plotted as simple line\ncharts, column charts, area charts, scatter plots, and many more chart types.\nData can also be plotted as Pivot Charts where the data is grouped and/or\npivoted by specific column(s).\n\n=========\nChangelog\n=========\n\n* 0.2.9 (January 17, 2017)\n    * Enable pylint during testing but don't block Travis-CI on failures. Closes\n      `#42 <https://github.com/chartit/django-chartit/issues/42>`_.\n    * Handle unicode data in pie and scatter plot charts under Python 2.7.\n      `PR#47 <https://github.com/chartit/django-chartit/pull/47>`_.\n\n\n* 0.2.8 (December 4, 2016)\n    * ``PivotChart`` and ``PivotDataPool`` **will be deprecated soon**. Both\n      are marked with deprecation warnings. There is a lot of duplication and\n      special handling between those classes and the ``Chart`` and ``DataPool``\n      classes which make it harder to expand the feature set for django-chartit.\n      The next release will focus on consolidating all the functionality into\n      ``Chart`` and ``DataPool`` so that users will still be able to draw pivot\n      charts. You will have to construct your pivot charts manually though!\n    * ``DataPool`` terms now supports model properties. Fixes\n      `#35 <https://github.com/chartit/django-chartit/issues/35>`_.\n      Model properties are **not** supported for ``PivotDataPool``!\n      **WARNING: when using model properties chartit can't make use of\n      ``QuerySet.values()`` internally. This means results will not be groupped\n      by the values of the fields you supplied. This may lead to unexpected\n      query results/charts!**\n    * ``DataPool`` now supports ``RawQuerySet`` as data source. Fixes\n      `#44 <https://github.com/chartit/django-chartit/issues/44>`_.\n      ``RawQuerySet`` is **not** supported for ``PivotDataPool``!\n      **WARNING: when using ``RawQuerySet`` don't use double underscores\n      in field names because these are interpreted internally by chartit and\n      will cause exceptions. For example don't do this\n      ``SELECT AVG(rating) as rating__avg`` instead write it as\n      ``SELECT AVG(rating) as rating_avg``!**\n    * README now tells how to execute ``demoproject/``\n\n* 0.2.7 (September 14, 2016)\n    * Don't use ``super(self.__class__)`` b/c that breaks chart class\n      inheritance.\n      Fixes `#41 <https://github.com/chartit/django-chartit/issues/41>`_\n\n* 0.2.6 (August 16, 2016)\n    * Merge ``chartit_tests/`` with ``demoproject/``\n    * Load test DB with real data to use during testing\n    * Add more tests\n    * Update the path to demoproject.settings when building docs. Fixes\n      a problem which caused some API docs to be empty\n    * Fix ValueError: not enough values to unpack (expected 2, got 0)\n      with PivotChart when the QuerySet returns empty data\n    * Dropped requirement on ``simplejson``\n    * Properly handle unicode data in Pivot charts. Fixes\n      `#5 <https://github.com/chartit/django-chartit/issues/5>`_\n    * Demo project updated with Chart and PivotChart examples of\n      rendering DateField values on the X axis\n    * Allow charting of ``extra()`` or ``annotate()`` fields. Fixes\n      `#8 <https://github.com/chartit/django-chartit/issues/8>`_ and\n      `#12 <https://github.com/chartit/django-chartit/issues/12>`_\n    * Refactor ``RecursiveDefaultDict`` to allow chart objects to be\n      serialized to/from cache. Fixes\n      `#10 <https://github.com/chartit/django-chartit/issues/10>`_\n    * Add information about supported 3rd party JavaScript versions. Fixes\n      `#14 <https://github.com/chartit/django-chartit/issues/14>`_\n\n* 0.2.5 (August 3, 2016)\n    * Workaround Python 3 vs. Python 2 list sort issue which breaks\n      charts with multiple data sources displayed on the same axis!\n    * Make demoproject/ compatible with Django 1.10\n\n* 0.2.4 (August 2, 2016)\n    * Fix for ``get_all_field_names()`` and ``get_field_by_name()`` removal\n      in Django 1.10. Fixes\n      `#39 <https://github.com/chartit/django-chartit/issues/39>`_\n    * Updated for django.db.sql.query.Query.aggregates removal\n\n* 0.2.3 (July 30, 2016)\n    * New to_json() method for charts. Useful for creating Highcharts in AJAX\n    * Merged with *django-chartit2* fork by\n      `Grant McConnaughey <https://github.com/grantmcconnaughey>`_ which adds\n      Python 3 and latest Django 1.8.x and 1.9.x support\n    * Allow dictionary fields in conjunction with lambda fields. Closes\n      `#26 <https://github.com/chartit/django-chartit/issues/26>`_\n    * Documentation improvements\n    * Lots of code cleanups and style improvements\n\n* 0.2.2 as django-chartit2 (January 28, 2016)\n    * Fixed another issue that prevented installation via PyPI\n\n* 0.2.0 as django-chartit2 (January 20, 2016):\n    * Fixed issue that could prevent installation via PyPI\n\n* 0.1 (November 5, 2011)\n    * Initial release of django-chartit\n\n========\nFeatures\n========\n\n- Plot charts from models.\n- Plot data from multiple models on the same axis on a chart.\n- Plot pivot charts from models. Data can be pivoted by across multiple\n  columns.\n- Legend pivot charts by multiple columns.\n- Combine data from multiple models to plot on same pivot charts.\n- Plot a pareto chart, paretoed by a specific column.\n- Plot only a top few items per category in a pivot chart.\n- Python 3 compatibility\n- Django 1.8 and 1.9 compatibility\n- Documentation to ReadTheDocs\n- Automated testing via Travis CI\n- Test coverage tracking via Coveralls\n\n============\nInstallation\n============\n\nYou can install Django-Chartit from PyPI. Just do ::\n\n    $ pip install django_chartit\n\nThen, add `chartit` to `INSTALLED_APPS` in \"settings.py\".\n\nYou also need supporting JavaScript libraries. See the\n`Required JavaScript Libraries`_ section for more details.\n\n==========\nHow to Use\n==========\n\nPlotting a chart or pivot chart on a webpage involves the following steps.\n\n1. Create a ``DataPool`` or ``PivotDataPool`` object that specifies what data\n   you need to retrieve and from where.\n2. Create a ``Chart`` or ``PivotChart`` object to plot the data in the\n   ``DataPool`` or ``PivotDataPool`` respectively.\n3. Return the ``Chart``/``PivotChart`` object from a django ``view`` function\n   to the django template.\n4. Use the ``load_charts`` template tag to load the charts to HTML tags with\n   specific `ids`.\n\nIt is easier to explain the steps above with examples. So read on.\n\n====================\nHow to Create Charts\n====================\n\nHere is a short example of how to create a line chart. Let's say we have a\nsimple model with 3 fields - one for month and two for temperatures of Boston\nand Houston. ::\n\n   class MonthlyWeatherByCity(models.Model):\n       month = models.IntegerField()\n       boston_temp = models.DecimalField(max_digits=5, decimal_places=1)\n       houston_temp = models.DecimalField(max_digits=5, decimal_places=1)\n\nAnd let's say we want to create a simple line chart of month on the x-axis\nand the temperatures of the two cities on the y-axis. ::\n\n   from chartit import DataPool, Chart\n\n   def weather_chart_view(request):\n       #Step 1: Create a DataPool with the data we want to retrieve.\n       weatherdata = \\\n           DataPool(\n              series=\n               [{'options': {\n                  'source': MonthlyWeatherByCity.objects.all()},\n                 'terms': [\n                   'month',\n                   'houston_temp',\n                   'boston_temp']}\n                ])\n\n       #Step 2: Create the Chart object\n       cht = Chart(\n               datasource = weatherdata,\n               series_options =\n                 [{'options':{\n                     'type': 'line',\n                     'stacking': False},\n                   'terms':{\n                     'month': [\n                       'boston_temp',\n                       'houston_temp']\n                     }}],\n               chart_options =\n                 {'title': {\n                      'text': 'Weather Data of Boston and Houston'},\n                  'xAxis': {\n                       'title': {\n                          'text': 'Month number'}}})\n\n       #Step 3: Send the chart object to the template.\n       return render_to_response({'weatherchart': cht})\n\nAnd you can use the ``load_charts`` filter in the django template to render\nthe chart. ::\n\n  <head>\n      <!-- code to include the highcharts and jQuery libraries goes here -->\n      <!-- load_charts filter takes a comma-separated list of id's where -->\n      <!-- the charts need to be rendered to                             -->\n      {% load chartit %}\n      {{ weatherchart|load_charts:\"container\" }}\n  </head>\n  <body>\n      <div id='container'> Chart will be rendered here </div>\n  </body>\n\n===========================\nHow to Create Pivot Charts\n===========================\n\nHere is an example of how to create a pivot chart. Let's say we have the\nfollowing model. ::\n\n   class DailyWeather(models.Model):\n       month = models.IntegerField()\n       day = models.IntegerField()\n       temperature = models.DecimalField(max_digits=5, decimal_places=1)\n       rainfall = models.DecimalField(max_digits=5, decimal_places=1)\n       city = models.CharField(max_length=50)\n       state = models.CharField(max_length=2)\n\nWe want to plot a pivot chart of month (along the x-axis) versus the average\nrainfall (along the y-axis) of the top 3 cities with highest average\nrainfall in each month. ::\n\n    from django.db.models import Avg\n    from chartit import PivotDataPool, PivotChart\n\n    def rainfall_pivot_chart_view(request):\n        # Step 1: Create a PivotDataPool with the data we want to retrieve.\n        rainpivotdata = PivotDataPool(\n            series=[{\n                'options': {\n                    'source': DailyWeather.objects.all(),\n                    'categories': ['month'],\n                    'legend_by': 'city',\n                    'top_n_per_cat': 3,\n                },\n                'terms': {\n                    'avg_rain': Avg('rainfall'),\n                }\n            }]\n        )\n\n        # Step 2: Create the PivotChart object\n        rainpivcht = PivotChart(\n            datasource=rainpivotdata,\n            series_options=[{\n                'options': {\n                    'type': 'column',\n                    'stacking': True\n                },\n                'terms': ['avg_rain']\n            }],\n            chart_options={\n                'title': {\n                    'text': 'Rain by Month in top 3 cities'\n                },\n                'xAxis': {\n                    'title': {\n                        'text': 'Month'\n                    }\n                }\n            }\n        )\n\n        # Step 3: Send the PivotChart object to the template.\n        return render_to_response({'rainpivchart': rainpivcht})\n\nAnd you can use the ``load_charts`` filter in the django template to render\nthe chart. ::\n\n  <head>\n      <!-- code to include the highcharts and jQuery libraries goes here -->\n      <!-- load_charts filter takes a comma-separated list of id's where -->\n      <!-- the charts need to be rendered to                             -->\n      {% load chartit %}\n      {{ rainpivchart|load_charts:\"container\" }}\n  </head>\n  <body>\n      <div id='container'> Chart will be rendered here </div>\n  </body>\n\n=========================\nRendering multiple charts\n=========================\n\nIt is possible to render multiple charts in the same template. The first\nargument to ``load_charts`` is the Chart object or a list of Chart objects,\nand the second is a comma separated list of HTML IDs where the charts will\nbe rendered.\n\nWhen calling Django's ``render`` you have to pass all you charts as a list::\n\n    return render(request, 'index.html',\n                 {\n                    'chart_list' : [chart_1, chart_2],\n                 }\n            )\n\nThen in your template you have to use the proper syntax::\n\n    <head>\n        {% load chartit %}\n        {{ chart_list|load_charts:\"chart_1,chart_2\" }}\n    </head>\n    <body>\n        <div id=\"chart_1\">First chart will be rendered here</div>\n        <div id=\"chart_2\">Second chart will be rendered here</div>\n    </body>\n\n====\nDemo\n====\n\nThe above examples are just a brief taste of what you can do with\nDjango-Chartit. For more examples and to look at the charts in actions, check\nout the ``demoproject/`` directory. To execute the demo run the commands ::\n\n    cd demoproject/\n    PYTHONPATH=../ python ./manage.py migrate\n    PYTHONPATH=../ python ./manage.py runserver\n\n===============\nDocumentation\n===============\n\nFull documentation is available\n`here <http://django-chartit.readthedocs.org/en/latest/?badge=latest>`_ .\n\n=============================\nRequired JavaScript Libraries\n=============================\n\nThe following JavaScript Libraries are required for using Django-Chartit.\n\n- `jQuery <http://jquery.com>`_ - versions 1.6.4 and 1.7 are known\n  to work well with django-chartit.\n- `Highcharts <http://highcharts.com>`_ - versions 2.1.7 and 2.2.0 are known\n  to work well with django-chartit.\n\n.. note:: While ``Django-Chartit`` itself is licensed under the BSD license,\n   ``Highcharts`` is licensed under the `Highcharts license\n   <http://www.highcharts.com/license>`_ and ``jQuery`` is licensed under both\n   MIT License and GNU General Public License (GPL) Version 2. It is your own\n   responsibility to abide by respective licenses when downloading and using\n   the supporting JavaScript libraries.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chartit/django-chartit", "keywords": "django charts", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django_chartit", "package_url": "https://pypi.org/project/django_chartit/", "platform": "any", "project_url": "https://pypi.org/project/django_chartit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/chartit/django-chartit"}, "release_url": "https://pypi.org/project/django_chartit/0.2.9/", "requires_dist": null, "requires_python": null, "summary": "A Django app to plot charts and pivot charts directly from the models. Uses HighCharts and jQuery JavaScript libraries to render the charts on the webpage.", "version": "0.2.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://django-chartit.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2044f643e2ef25e1b8bcec324bedce131f552ce0/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646a616e676f2d636861727469742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/chartit/django-chartit\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/chartit/django-chartit.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecfc1bba17a455017338b8c05233a2e08db52b32/68747470733a2f2f7472617669732d63692e6f72672f636861727469742f646a616e676f2d636861727469742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://landscape.io/github/chartit/django-chartit/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9451f62672ea6e4832ea7dad35b5fbac97e8fdf2/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f636861727469742f646a616e676f2d636861727469742f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://coveralls.io/github/chartit/django-chartit?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/chartit/django-chartit/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb94b4226dbdd5f15d5890deaeca90f1f7bfe3ae/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f636861727469742f646a616e676f2d636861727469742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Django Chartit is a Django app that can be used to easily create charts from the data\nin your database. The charts are rendered using <tt>Highcharts</tt> and <tt>jQuery</tt>\nJavaScript libraries. Data in your database can be plotted as simple line\ncharts, column charts, area charts, scatter plots, and many more chart types.\nData can also be plotted as Pivot Charts where the data is grouped and/or\npivoted by specific column(s).</p>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<ul>\n<li><dl>\n<dt>0.2.9 (January 17, 2017)</dt>\n<dd><ul>\n<li>Enable pylint during testing but don\u2019t block Travis-CI on failures. Closes\n<a href=\"https://github.com/chartit/django-chartit/issues/42\" rel=\"nofollow\">#42</a>.</li>\n<li>Handle unicode data in pie and scatter plot charts under Python 2.7.\n<a href=\"https://github.com/chartit/django-chartit/pull/47\" rel=\"nofollow\">PR#47</a>.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.2.8 (December 4, 2016)</dt>\n<dd><ul>\n<li><tt>PivotChart</tt> and <tt>PivotDataPool</tt> <strong>will be deprecated soon</strong>. Both\nare marked with deprecation warnings. There is a lot of duplication and\nspecial handling between those classes and the <tt>Chart</tt> and <tt>DataPool</tt>\nclasses which make it harder to expand the feature set for django-chartit.\nThe next release will focus on consolidating all the functionality into\n<tt>Chart</tt> and <tt>DataPool</tt> so that users will still be able to draw pivot\ncharts. You will have to construct your pivot charts manually though!</li>\n<li><tt>DataPool</tt> terms now supports model properties. Fixes\n<a href=\"https://github.com/chartit/django-chartit/issues/35\" rel=\"nofollow\">#35</a>.\nModel properties are <strong>not</strong> supported for <tt>PivotDataPool</tt>!\n<strong>WARNING: when using model properties chartit can\u2019t make use of\n``QuerySet.values()`` internally. This means results will not be groupped\nby the values of the fields you supplied. This may lead to unexpected\nquery results/charts!</strong></li>\n<li><tt>DataPool</tt> now supports <tt>RawQuerySet</tt> as data source. Fixes\n<a href=\"https://github.com/chartit/django-chartit/issues/44\" rel=\"nofollow\">#44</a>.\n<tt>RawQuerySet</tt> is <strong>not</strong> supported for <tt>PivotDataPool</tt>!\n<strong>WARNING: when using ``RawQuerySet`` don\u2019t use double underscores\nin field names because these are interpreted internally by chartit and\nwill cause exceptions. For example don\u2019t do this\n``SELECT AVG(rating) as rating__avg`` instead write it as\n``SELECT AVG(rating) as rating_avg``!</strong></li>\n<li>README now tells how to execute <tt>demoproject/</tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.2.7 (September 14, 2016)</dt>\n<dd><ul>\n<li>Don\u2019t use <tt>super(self.__class__)</tt> b/c that breaks chart class\ninheritance.\nFixes <a href=\"https://github.com/chartit/django-chartit/issues/41\" rel=\"nofollow\">#41</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.2.6 (August 16, 2016)</dt>\n<dd><ul>\n<li>Merge <tt>chartit_tests/</tt> with <tt>demoproject/</tt></li>\n<li>Load test DB with real data to use during testing</li>\n<li>Add more tests</li>\n<li>Update the path to demoproject.settings when building docs. Fixes\na problem which caused some API docs to be empty</li>\n<li>Fix ValueError: not enough values to unpack (expected 2, got 0)\nwith PivotChart when the QuerySet returns empty data</li>\n<li>Dropped requirement on <tt>simplejson</tt></li>\n<li>Properly handle unicode data in Pivot charts. Fixes\n<a href=\"https://github.com/chartit/django-chartit/issues/5\" rel=\"nofollow\">#5</a></li>\n<li>Demo project updated with Chart and PivotChart examples of\nrendering DateField values on the X axis</li>\n<li>Allow charting of <tt>extra()</tt> or <tt>annotate()</tt> fields. Fixes\n<a href=\"https://github.com/chartit/django-chartit/issues/8\" rel=\"nofollow\">#8</a> and\n<a href=\"https://github.com/chartit/django-chartit/issues/12\" rel=\"nofollow\">#12</a></li>\n<li>Refactor <tt>RecursiveDefaultDict</tt> to allow chart objects to be\nserialized to/from cache. Fixes\n<a href=\"https://github.com/chartit/django-chartit/issues/10\" rel=\"nofollow\">#10</a></li>\n<li>Add information about supported 3rd party JavaScript versions. Fixes\n<a href=\"https://github.com/chartit/django-chartit/issues/14\" rel=\"nofollow\">#14</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.2.5 (August 3, 2016)</dt>\n<dd><ul>\n<li>Workaround Python 3 vs. Python 2 list sort issue which breaks\ncharts with multiple data sources displayed on the same axis!</li>\n<li>Make demoproject/ compatible with Django 1.10</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.2.4 (August 2, 2016)</dt>\n<dd><ul>\n<li>Fix for <tt>get_all_field_names()</tt> and <tt>get_field_by_name()</tt> removal\nin Django 1.10. Fixes\n<a href=\"https://github.com/chartit/django-chartit/issues/39\" rel=\"nofollow\">#39</a></li>\n<li>Updated for django.db.sql.query.Query.aggregates removal</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.2.3 (July 30, 2016)</dt>\n<dd><ul>\n<li>New to_json() method for charts. Useful for creating Highcharts in AJAX</li>\n<li>Merged with <em>django-chartit2</em> fork by\n<a href=\"https://github.com/grantmcconnaughey\" rel=\"nofollow\">Grant McConnaughey</a> which adds\nPython 3 and latest Django 1.8.x and 1.9.x support</li>\n<li>Allow dictionary fields in conjunction with lambda fields. Closes\n<a href=\"https://github.com/chartit/django-chartit/issues/26\" rel=\"nofollow\">#26</a></li>\n<li>Documentation improvements</li>\n<li>Lots of code cleanups and style improvements</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.2.2 as django-chartit2 (January 28, 2016)</dt>\n<dd><ul>\n<li>Fixed another issue that prevented installation via PyPI</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.2.0 as django-chartit2 (January 20, 2016):</dt>\n<dd><ul>\n<li>Fixed issue that could prevent installation via PyPI</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>0.1 (November 5, 2011)</dt>\n<dd><ul>\n<li>Initial release of django-chartit</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Plot charts from models.</li>\n<li>Plot data from multiple models on the same axis on a chart.</li>\n<li>Plot pivot charts from models. Data can be pivoted by across multiple\ncolumns.</li>\n<li>Legend pivot charts by multiple columns.</li>\n<li>Combine data from multiple models to plot on same pivot charts.</li>\n<li>Plot a pareto chart, paretoed by a specific column.</li>\n<li>Plot only a top few items per category in a pivot chart.</li>\n<li>Python 3 compatibility</li>\n<li>Django 1.8 and 1.9 compatibility</li>\n<li>Documentation to ReadTheDocs</li>\n<li>Automated testing via Travis CI</li>\n<li>Test coverage tracking via Coveralls</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install Django-Chartit from PyPI. Just do</p>\n<pre>$ pip install django_chartit\n</pre>\n<p>Then, add <cite>chartit</cite> to <cite>INSTALLED_APPS</cite> in \u201csettings.py\u201d.</p>\n<p>You also need supporting JavaScript libraries. See the\n<a href=\"#required-javascript-libraries\" rel=\"nofollow\">Required JavaScript Libraries</a> section for more details.</p>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<p>Plotting a chart or pivot chart on a webpage involves the following steps.</p>\n<ol>\n<li>Create a <tt>DataPool</tt> or <tt>PivotDataPool</tt> object that specifies what data\nyou need to retrieve and from where.</li>\n<li>Create a <tt>Chart</tt> or <tt>PivotChart</tt> object to plot the data in the\n<tt>DataPool</tt> or <tt>PivotDataPool</tt> respectively.</li>\n<li>Return the <tt>Chart</tt>/<tt>PivotChart</tt> object from a django <tt>view</tt> function\nto the django template.</li>\n<li>Use the <tt>load_charts</tt> template tag to load the charts to HTML tags with\nspecific <cite>ids</cite>.</li>\n</ol>\n<p>It is easier to explain the steps above with examples. So read on.</p>\n</div>\n<div id=\"how-to-create-charts\">\n<h2>How to Create Charts</h2>\n<p>Here is a short example of how to create a line chart. Let\u2019s say we have a\nsimple model with 3 fields - one for month and two for temperatures of Boston\nand Houston.</p>\n<pre>class MonthlyWeatherByCity(models.Model):\n    month = models.IntegerField()\n    boston_temp = models.DecimalField(max_digits=5, decimal_places=1)\n    houston_temp = models.DecimalField(max_digits=5, decimal_places=1)\n</pre>\n<p>And let\u2019s say we want to create a simple line chart of month on the x-axis\nand the temperatures of the two cities on the y-axis.</p>\n<pre>from chartit import DataPool, Chart\n\ndef weather_chart_view(request):\n    #Step 1: Create a DataPool with the data we want to retrieve.\n    weatherdata = \\\n        DataPool(\n           series=\n            [{'options': {\n               'source': MonthlyWeatherByCity.objects.all()},\n              'terms': [\n                'month',\n                'houston_temp',\n                'boston_temp']}\n             ])\n\n    #Step 2: Create the Chart object\n    cht = Chart(\n            datasource = weatherdata,\n            series_options =\n              [{'options':{\n                  'type': 'line',\n                  'stacking': False},\n                'terms':{\n                  'month': [\n                    'boston_temp',\n                    'houston_temp']\n                  }}],\n            chart_options =\n              {'title': {\n                   'text': 'Weather Data of Boston and Houston'},\n               'xAxis': {\n                    'title': {\n                       'text': 'Month number'}}})\n\n    #Step 3: Send the chart object to the template.\n    return render_to_response({'weatherchart': cht})\n</pre>\n<p>And you can use the <tt>load_charts</tt> filter in the django template to render\nthe chart.</p>\n<pre>&lt;head&gt;\n    &lt;!-- code to include the highcharts and jQuery libraries goes here --&gt;\n    &lt;!-- load_charts filter takes a comma-separated list of id's where --&gt;\n    &lt;!-- the charts need to be rendered to                             --&gt;\n    {% load chartit %}\n    {{ weatherchart|load_charts:\"container\" }}\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id='container'&gt; Chart will be rendered here &lt;/div&gt;\n&lt;/body&gt;\n</pre>\n</div>\n<div id=\"how-to-create-pivot-charts\">\n<h2>How to Create Pivot Charts</h2>\n<p>Here is an example of how to create a pivot chart. Let\u2019s say we have the\nfollowing model.</p>\n<pre>class DailyWeather(models.Model):\n    month = models.IntegerField()\n    day = models.IntegerField()\n    temperature = models.DecimalField(max_digits=5, decimal_places=1)\n    rainfall = models.DecimalField(max_digits=5, decimal_places=1)\n    city = models.CharField(max_length=50)\n    state = models.CharField(max_length=2)\n</pre>\n<p>We want to plot a pivot chart of month (along the x-axis) versus the average\nrainfall (along the y-axis) of the top 3 cities with highest average\nrainfall in each month.</p>\n<pre>from django.db.models import Avg\nfrom chartit import PivotDataPool, PivotChart\n\ndef rainfall_pivot_chart_view(request):\n    # Step 1: Create a PivotDataPool with the data we want to retrieve.\n    rainpivotdata = PivotDataPool(\n        series=[{\n            'options': {\n                'source': DailyWeather.objects.all(),\n                'categories': ['month'],\n                'legend_by': 'city',\n                'top_n_per_cat': 3,\n            },\n            'terms': {\n                'avg_rain': Avg('rainfall'),\n            }\n        }]\n    )\n\n    # Step 2: Create the PivotChart object\n    rainpivcht = PivotChart(\n        datasource=rainpivotdata,\n        series_options=[{\n            'options': {\n                'type': 'column',\n                'stacking': True\n            },\n            'terms': ['avg_rain']\n        }],\n        chart_options={\n            'title': {\n                'text': 'Rain by Month in top 3 cities'\n            },\n            'xAxis': {\n                'title': {\n                    'text': 'Month'\n                }\n            }\n        }\n    )\n\n    # Step 3: Send the PivotChart object to the template.\n    return render_to_response({'rainpivchart': rainpivcht})\n</pre>\n<p>And you can use the <tt>load_charts</tt> filter in the django template to render\nthe chart.</p>\n<pre>&lt;head&gt;\n    &lt;!-- code to include the highcharts and jQuery libraries goes here --&gt;\n    &lt;!-- load_charts filter takes a comma-separated list of id's where --&gt;\n    &lt;!-- the charts need to be rendered to                             --&gt;\n    {% load chartit %}\n    {{ rainpivchart|load_charts:\"container\" }}\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id='container'&gt; Chart will be rendered here &lt;/div&gt;\n&lt;/body&gt;\n</pre>\n</div>\n<div id=\"rendering-multiple-charts\">\n<h2>Rendering multiple charts</h2>\n<p>It is possible to render multiple charts in the same template. The first\nargument to <tt>load_charts</tt> is the Chart object or a list of Chart objects,\nand the second is a comma separated list of HTML IDs where the charts will\nbe rendered.</p>\n<p>When calling Django\u2019s <tt>render</tt> you have to pass all you charts as a list:</p>\n<pre>return render(request, 'index.html',\n             {\n                'chart_list' : [chart_1, chart_2],\n             }\n        )\n</pre>\n<p>Then in your template you have to use the proper syntax:</p>\n<pre>&lt;head&gt;\n    {% load chartit %}\n    {{ chart_list|load_charts:\"chart_1,chart_2\" }}\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"chart_1\"&gt;First chart will be rendered here&lt;/div&gt;\n    &lt;div id=\"chart_2\"&gt;Second chart will be rendered here&lt;/div&gt;\n&lt;/body&gt;\n</pre>\n</div>\n<div id=\"demo\">\n<h2>Demo</h2>\n<p>The above examples are just a brief taste of what you can do with\nDjango-Chartit. For more examples and to look at the charts in actions, check\nout the <tt>demoproject/</tt> directory. To execute the demo run the commands</p>\n<pre>cd demoproject/\nPYTHONPATH=../ python ./manage.py migrate\nPYTHONPATH=../ python ./manage.py runserver\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Full documentation is available\n<a href=\"http://django-chartit.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\">here</a> .</p>\n</div>\n<div id=\"required-javascript-libraries\">\n<h2>Required JavaScript Libraries</h2>\n<p>The following JavaScript Libraries are required for using Django-Chartit.</p>\n<ul>\n<li><a href=\"http://jquery.com\" rel=\"nofollow\">jQuery</a> - versions 1.6.4 and 1.7 are known\nto work well with django-chartit.</li>\n<li><a href=\"http://highcharts.com\" rel=\"nofollow\">Highcharts</a> - versions 2.1.7 and 2.2.0 are known\nto work well with django-chartit.</li>\n</ul>\n<div>\n<p>Note</p>\n<p>While <tt><span class=\"pre\">Django-Chartit</span></tt> itself is licensed under the BSD license,\n<tt>Highcharts</tt> is licensed under the <a href=\"http://www.highcharts.com/license\" rel=\"nofollow\">Highcharts license</a> and <tt>jQuery</tt> is licensed under both\nMIT License and GNU General Public License (GPL) Version 2. It is your own\nresponsibility to abide by respective licenses when downloading and using\nthe supporting JavaScript libraries.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2579893, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bd9123eb77b3f43f61142a6bf6bde534", "sha256": "2a8f6170519a80bc6ff7a9a3cb025fb0d88a0993ddcdf1718bab001004de1059"}, "downloads": -1, "filename": "django_chartit-0.1.tar.gz", "has_sig": false, "md5_digest": "bd9123eb77b3f43f61142a6bf6bde534", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20011, "upload_time": "2011-11-05T19:14:52", "upload_time_iso_8601": "2011-11-05T19:14:52.066063Z", "url": "https://files.pythonhosted.org/packages/e4/1a/e15c967e364eba60ffedf4ce56a716bb4fe8651d1c294214e5b889a060a1/django_chartit-0.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "ddb09b62f78c3538d4d75c97030bf8ec", "sha256": "dbd9d4ac4f68dec44c8e7761139ce109c50ea39df0b1379c6a7c4629b4acb409"}, "downloads": -1, "filename": "django_chartit-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ddb09b62f78c3538d4d75c97030bf8ec", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 28313, "upload_time": "2016-07-30T14:18:52", "upload_time_iso_8601": "2016-07-30T14:18:52.896653Z", "url": "https://files.pythonhosted.org/packages/8b/8b/4162d1f45b1638051c9b4fda836b70b6e128da5307aed056a3d62689452d/django_chartit-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbeafbfcd88767db6ccbdfa4a10010a6", "sha256": "28df5d9955b065b1fdf6abbc30144475823d7b74d0454f91deaeb1bbb56e2a85"}, "downloads": -1, "filename": "django_chartit-0.2.3.tar.gz", "has_sig": false, "md5_digest": "dbeafbfcd88767db6ccbdfa4a10010a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24143, "upload_time": "2016-07-30T14:18:50", "upload_time_iso_8601": "2016-07-30T14:18:50.244371Z", "url": "https://files.pythonhosted.org/packages/de/91/fc94efe1ee4c304f66da68e0f3ecc3d88b3cf0c5d71f4bdadccaf1f6f675/django_chartit-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "ca05917173ebe53e4db9a8f16f1acafa", "sha256": "253e9a40dd6e3c3a7def8b719772af8e5ecdaaa265dbd5c880cdbaf4fc09bb59"}, "downloads": -1, "filename": "django_chartit-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ca05917173ebe53e4db9a8f16f1acafa", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 28596, "upload_time": "2016-08-02T10:27:14", "upload_time_iso_8601": "2016-08-02T10:27:14.179525Z", "url": "https://files.pythonhosted.org/packages/ad/6a/c1c8a951cb922ddab24616c77c1e27612a7c5fcdaca39be90dbd7297f91a/django_chartit-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "708a7dc792406384b39655cbb3182e67", "sha256": "a33ca8489424e243e712e44194350a9c8482dc893cc15c19b1442f6765bf6062"}, "downloads": -1, "filename": "django_chartit-0.2.4.tar.gz", "has_sig": false, "md5_digest": "708a7dc792406384b39655cbb3182e67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24442, "upload_time": "2016-08-02T10:27:11", "upload_time_iso_8601": "2016-08-02T10:27:11.097845Z", "url": "https://files.pythonhosted.org/packages/64/42/5ed449ea003327d1b0599878cd1587c791436704230761d52ca02aac6656/django_chartit-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d197f6884143392e1a119d49fabffaf9", "sha256": "2c30c36bb5e8859bf8b9f1a354b807349747aeba7c28b6b0f9bc91741ac6c2b2"}, "downloads": -1, "filename": "django_chartit-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d197f6884143392e1a119d49fabffaf9", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 29243, "upload_time": "2016-08-03T13:54:25", "upload_time_iso_8601": "2016-08-03T13:54:25.062339Z", "url": "https://files.pythonhosted.org/packages/6a/2f/c8122a29f9fb94e81a3f38104b7f5c44b7bb86dd58bff640680a2a6147f4/django_chartit-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e83481854d9a4a33f7dc569a4a78bf1e", "sha256": "272a5d96af8295301fc52fe5db1525495429cd1d6c8476387f63b83d67ad4d54"}, "downloads": -1, "filename": "django_chartit-0.2.5.tar.gz", "has_sig": false, "md5_digest": "e83481854d9a4a33f7dc569a4a78bf1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25015, "upload_time": "2016-08-03T13:54:21", "upload_time_iso_8601": "2016-08-03T13:54:21.569434Z", "url": "https://files.pythonhosted.org/packages/45/0e/d45e9d2cbc018c0e52f6081baf22216bddc4b84595c49fd5d34c7dc2fcbb/django_chartit-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "8d763078c1cd3d13ac51b238378d8952", "sha256": "77f33894f4988305df535e669fd791a5621ac5b591fb05ffd4c127745f7e89a2"}, "downloads": -1, "filename": "django_chartit-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8d763078c1cd3d13ac51b238378d8952", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 30761, "upload_time": "2016-08-16T08:05:50", "upload_time_iso_8601": "2016-08-16T08:05:50.897898Z", "url": "https://files.pythonhosted.org/packages/a7/2d/554fbeb8c35d0cb271f9ec9332a6f2ffb07a04c9ad790588085630093be5/django_chartit-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04703319c3c4e53b5df800b2888caca9", "sha256": "d3448f1b633a1157e4c605572106366bacc04b724d89a296d777912b6da990b3"}, "downloads": -1, "filename": "django_chartit-0.2.6.tar.gz", "has_sig": false, "md5_digest": "04703319c3c4e53b5df800b2888caca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26168, "upload_time": "2016-08-16T08:05:47", "upload_time_iso_8601": "2016-08-16T08:05:47.322213Z", "url": "https://files.pythonhosted.org/packages/d6/82/708b87ce9fd666e8a884f101cb943c4de5a09a055ae7ccbd719dd2c435e5/django_chartit-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "848ae5e426aa672db20cba4590ec1485", "sha256": "e74bf8ab27274cf50b20a334dcedaac7bfe2ab13c6efa110c7ed6cc1b04daf56"}, "downloads": -1, "filename": "django_chartit-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "848ae5e426aa672db20cba4590ec1485", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 30867, "upload_time": "2016-09-14T09:59:54", "upload_time_iso_8601": "2016-09-14T09:59:54.654260Z", "url": "https://files.pythonhosted.org/packages/46/fe/cd1c2ff79e9e06e6caf59c4a219c84b3594c326611611ee6ab57af5e4e5a/django_chartit-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f02c6d82bb366c31a9b48db1375e001", "sha256": "b58663d3164d5142aceb628140bc0b6142dcf4b0d0ed45ac79df5dabe2f29e3f"}, "downloads": -1, "filename": "django_chartit-0.2.7.tar.gz", "has_sig": false, "md5_digest": "6f02c6d82bb366c31a9b48db1375e001", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26214, "upload_time": "2016-09-14T09:59:51", "upload_time_iso_8601": "2016-09-14T09:59:51.107194Z", "url": "https://files.pythonhosted.org/packages/6b/c0/72f426b59eb02e2fbf8454d2422ffe6c5033c9f1099d4fbe8bb3e7913dd5/django_chartit-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "df3dcf47166e6427502cfa1b31f0cc7f", "sha256": "d07c0d4eb507bf7fea1a3482828d2fa621f52dd9632b62d79e3dcdea679333fe"}, "downloads": -1, "filename": "django_chartit-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "df3dcf47166e6427502cfa1b31f0cc7f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 32532, "upload_time": "2016-12-04T13:44:38", "upload_time_iso_8601": "2016-12-04T13:44:38.893265Z", "url": "https://files.pythonhosted.org/packages/bc/c8/6ec1c0bc6f3c3968257b2e8e09b647a8341961d62c85c56e89ac795fed2e/django_chartit-0.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d095807e074fd7dbc1b2501a800f0b31", "sha256": "7136720f46c480c922db2f287653abf51d712aad81bd264b8105545948d1371c"}, "downloads": -1, "filename": "django_chartit-0.2.8.tar.gz", "has_sig": false, "md5_digest": "d095807e074fd7dbc1b2501a800f0b31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27475, "upload_time": "2016-12-04T13:44:35", "upload_time_iso_8601": "2016-12-04T13:44:35.879414Z", "url": "https://files.pythonhosted.org/packages/0f/62/dab141f4b12de5f3745ee69a8c3de4d9cfe920f72029741dc29b51432526/django_chartit-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "cbca04de84e4ba06843f6a31aad61c6f", "sha256": "f680523eb3aea8fd81fd0241278971919f028ab1fee492561e6e39b6848083e4"}, "downloads": -1, "filename": "django_chartit-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "cbca04de84e4ba06843f6a31aad61c6f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 32362, "upload_time": "2017-01-17T15:17:18", "upload_time_iso_8601": "2017-01-17T15:17:18.790957Z", "url": "https://files.pythonhosted.org/packages/1c/50/f0db4c57450747380579043637a0c22bae37668017f112bfd6cd061ee79b/django_chartit-0.2.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b726b390fa29f655ba7c90c34983d03c", "sha256": "e798e3ffa19c1c90b6fec3257778c49c62ee96d292949d1495e68ba0446fae9c"}, "downloads": -1, "filename": "django_chartit-0.2.9.tar.gz", "has_sig": false, "md5_digest": "b726b390fa29f655ba7c90c34983d03c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27562, "upload_time": "2017-01-17T15:17:16", "upload_time_iso_8601": "2017-01-17T15:17:16.699734Z", "url": "https://files.pythonhosted.org/packages/64/8c/873df78150ba9f8b2fc6230058743e60e8873bd430100958c9099ea9a570/django_chartit-0.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cbca04de84e4ba06843f6a31aad61c6f", "sha256": "f680523eb3aea8fd81fd0241278971919f028ab1fee492561e6e39b6848083e4"}, "downloads": -1, "filename": "django_chartit-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "cbca04de84e4ba06843f6a31aad61c6f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 32362, "upload_time": "2017-01-17T15:17:18", "upload_time_iso_8601": "2017-01-17T15:17:18.790957Z", "url": "https://files.pythonhosted.org/packages/1c/50/f0db4c57450747380579043637a0c22bae37668017f112bfd6cd061ee79b/django_chartit-0.2.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b726b390fa29f655ba7c90c34983d03c", "sha256": "e798e3ffa19c1c90b6fec3257778c49c62ee96d292949d1495e68ba0446fae9c"}, "downloads": -1, "filename": "django_chartit-0.2.9.tar.gz", "has_sig": false, "md5_digest": "b726b390fa29f655ba7c90c34983d03c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27562, "upload_time": "2017-01-17T15:17:16", "upload_time_iso_8601": "2017-01-17T15:17:16.699734Z", "url": "https://files.pythonhosted.org/packages/64/8c/873df78150ba9f8b2fc6230058743e60e8873bd430100958c9099ea9a570/django_chartit-0.2.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:11 2020"}