{"info": {"author": "Jhon Byaka", "author_email": "byaka.life@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "|python27| |License| |PyPI version| |PyPI downloads|\n\nflaskJSONRPCServer\n==================\n\nThis library is an extended implementation of server for JSON-RPC\nprotocol. It supports only json-rpc 2.0 specification for now, which\nincludes batch submission, keyword arguments, notifications, etc.\n\nComments, bug reports\n~~~~~~~~~~~~~~~~~~~~~\n\nflaskJSONRPCServer resides on **github**. You can file issues or pull\nrequests `there <https://github.com/byaka/flaskJSONRPCServer/issues>`__.\n\nRequirements\n~~~~~~~~~~~~\n\n-  **Python2.6** or **Python2.7**\n-  **Flask** >= 0.10 (not tested with older version)\n-  **Gevent** >= 1.0 (optionally, but recommended)\n\n`How to install <#install>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`Documentation <https://byaka.github.io/flaskJSONRPCServer-docs/>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`Simple example <#examples>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`Licensing <#license>`__\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nPros\n~~~~\n\n-  Lib ready for **production**, we use it in some products\n-  Lib tested over **\"highload\"** (over 60 connections per second, 24/7\n   and it's not simulation) with **Gevent** enabled and no stability\n   issues or memory leak (this is why i'm wrote this library)\n-  Auto **CORS**\n-  Simple switching to **Gevent** as backend\n-  Auto fallback to **JSONP** on GET requests (for old browsers, that\n   don't support CORS like **IE**\\ <10)\n-  Dispatchers can simply get info about connection (**IP**,\n   **Cookies**, **Headers**)\n-  Dispatchers can simply set **Cookies**, change output **Headers**,\n   change output format for **JSONP** requests\n-  Lib fully support **Notification** requests (see *example/notify.py*)\n-  Lib supports **restarting** server (see *example/restart.py*)\n-  Lib supports **hot-reloading** of API (see *example/hotReload1.py*,\n   *example/hotReload2.py*)\n-  Lib supports **multiple servers** in one app (see\n   *example/multiple.py*)\n-  Lib supports **merging** with another WSGI app on the same IP:PORT\n   (see *example/mergeFlaskApp.py*)\n-  Lib supports different **execution-backends**, for example\n   multiprocessing (see *example/parallelExecuting.py*)\n-  Lib supports **locking** (you can lock all server or specific\n   dispatchers)\n-  Lib supports different **serializing-backends** so you can implement\n   any protocol, not only JSON\n-  Lib supports **individual settings** for different dispatchers. For\n   example one of them can be processed with parallel (multiprocess)\n   backend, other with standard processing\n-  Lib collects self **speed-stats**\n\nCons\n~~~~\n\n-  Not fully **documentated**. For now only examples in package and `API\n   documentation <https://byaka.github.io/flaskJSONRPCServer-docs/>`__.\n-  Lib not has **decorators**, so it not a \"Flask-way\" (this can be\n   simply added, but i not use decorators, sorry)\n-  Lib not covered with **tests**.\n\nInstall\n~~~~~~~\n\n``pip install flaskJSONRPCServer``\n\nExamples\n~~~~~~~~\n\nSimple server. More examples you can find in directory *example/*\n\n.. code:: python\n\n    import sys, time, random\n    from flaskJSONRPCServer import flaskJSONRPCServer\n\n    class mySharedMethods:\n       def random(self):\n          # Sipmly return random value (0..mult)\n          return int(random.random()*65536)\n\n    class mySharedMethods2:\n       def random(self):\n          # Sipmly return random value (0..mult)\n          return round(random.random()*1, 1)\n\n    def echo(data='Hello world!'):\n       # Simply echo\n       return data\n    echo._alias='helloworld' #setting alias for method\n\n    def myip(_connection=None):\n       # Return client's IP\n       return 'Hello, %s!'%(_connection.ip)\n\n    def setcookie(_connection=None):\n       # Set cookie to client\n       print _connection.cookies\n       _connection.cookiesOut.append({'name':'myTestCookie', 'value':'Your IP is %s'%_connection.ip, 'domain':'byaka.name'})\n       return 'Setted'\n\n    def stats(_connection=None):\n       #return server's speed stats\n       return _connection.server.stats(inMS=True) #inMS=True return stats in milliseconds\n\n    def big(_connection=None):\n       _connection.allowCompress=True #allow compression for this method only\n       s=\"\"\"\n    ... large data here ...\n       \"\"\"\n       return s\n\n    big._alias=['bigdata', 'compressed'] #setting alias for method\n\n    if __name__=='__main__':\n       print 'Running api..'\n       # Creating instance of server\n       #    <blocking>         switch server to sync mode when <gevent> is False\n       #    <cors>             switch auto CORS support\n       #    <gevent>           switch to using Gevent as backend\n       #    <debug>            switch to logging connection's info from Flask\n       #    <log>              switch to logging debug info from flaskJSONRPCServer\n       #    <fallback>         switch auto fallback to JSONP on GET requests\n       #    <allowCompress>    switch auto compression\n       #    <compressMinSize>  set min limit for compression\n       #    <tweakDescriptors> set descriptor's limit for server\n       #    <jsonBackend>      set JSON backend. Auto fallback to native when problems\n       #    <notifBackend>     set backend for Notify-requests\n       server=flaskJSONRPCServer((\"0.0.0.0\", 7001), blocking=False, cors=True, gevent=True, debug=False, log=False, fallback=True, allowCompress=False, jsonBackend='simplejson', notifBackend='simple', tweakDescriptors=[1000, 1000])\n       # Register dispatcher for all methods of instance\n       server.registerInstance(mySharedMethods(), path='/api')\n       # same name, but another path\n       server.registerInstance(mySharedMethods2(), path='/api2')\n       # Register dispatchers for single functions\n       server.registerFunction(setcookie, path='/api')\n       server.registerFunction(echo, path='/api')\n       server.registerFunction(myip, path='/api')\n       server.registerFunction(big, path='/api')\n       server.registerFunction(stats, path='/api')\n       # Run server\n       server.serveForever()\n       # Now you can access this api by path http://127.0.0.1:7001/api for JSON-RPC requests\n       # Or by path http://127.0.0.1:7001/api/<method>?jsonp=<callback>&(params) for JSONP requests\n       #    For example by http://127.0.0.1:7001/api/echo?data=test_data&jsonp=jsonpCallback_129620\n\nLicense\n~~~~~~~\n\nIt is licensed under the Apache License, Version 2.0\n(`read <http://www.apache.org/licenses/LICENSE-2.0.html>`__).\n\n.. |python27| image:: https://img.shields.io/badge/python-2.7-blue.svg\n   :target: https://github.com/byaka/flaskJSONRPCServer\n.. |License| image:: https://img.shields.io/pypi/l/flaskJSONRPCServer.svg\n   :target: http://www.apache.org/licenses/LICENSE-2.0.html\n.. |PyPI version| image:: https://img.shields.io/pypi/v/flaskJSONRPCServer.svg\n   :target: https://pypi.python.org/pypi/flaskJSONRPCServer\n.. |PyPI downloads| image:: https://img.shields.io/pypi/dm/flaskJSONRPCServer.svg\n   :target: https://pypi.python.org/pypi/flaskJSONRPCServer", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/byaka/flaskJSONRPCServer/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://byaka.github.io/flaskJSONRPCServer/", "keywords": "flask json-rpc jsonrpc gevent", "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "flaskJSONRPCServer", "package_url": "https://pypi.org/project/flaskJSONRPCServer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/flaskJSONRPCServer/", "project_urls": {"Download": "https://github.com/byaka/flaskJSONRPCServer/tarball/master", "Homepage": "https://byaka.github.io/flaskJSONRPCServer/"}, "release_url": "https://pypi.org/project/flaskJSONRPCServer/0.9.3/", "requires_dist": null, "requires_python": null, "summary": "A Python JSON-RPC over HTTP with flask and gevent", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/byaka/flaskJSONRPCServer\" rel=\"nofollow\"><img alt=\"python27\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab443a453fb606db77dbc21b88fe1c3e09744428/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d322e372d626c75652e737667\"></a> <a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/64390cd716e3a2934af6fed2b1886f8ceb6a343f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f666c61736b4a534f4e5250435365727665722e737667\"></a> <a href=\"https://pypi.python.org/pypi/flaskJSONRPCServer\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6980211823d9f92e6ab0206d4ca931b9697a504/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b4a534f4e5250435365727665722e737667\"></a> <a href=\"https://pypi.python.org/pypi/flaskJSONRPCServer\" rel=\"nofollow\"><img alt=\"PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2461b78e127d1563299a743d5b2ba48918b5371/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f666c61736b4a534f4e5250435365727665722e737667\"></a></p>\n<div id=\"flaskjsonrpcserver\">\n<h2>flaskJSONRPCServer</h2>\n<p>This library is an extended implementation of server for JSON-RPC\nprotocol. It supports only json-rpc 2.0 specification for now, which\nincludes batch submission, keyword arguments, notifications, etc.</p>\n<div id=\"comments-bug-reports\">\n<h3>Comments, bug reports</h3>\n<p>flaskJSONRPCServer resides on <strong>github</strong>. You can file issues or pull\nrequests <a href=\"https://github.com/byaka/flaskJSONRPCServer/issues\" rel=\"nofollow\">there</a>.</p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li><strong>Python2.6</strong> or <strong>Python2.7</strong></li>\n<li><strong>Flask</strong> &gt;= 0.10 (not tested with older version)</li>\n<li><strong>Gevent</strong> &gt;= 1.0 (optionally, but recommended)</li>\n</ul>\n<div id=\"how-to-install\">\n<h4><a href=\"#install\" rel=\"nofollow\">How to install</a></h4>\n</div>\n<div id=\"documentation\">\n<h4><a href=\"https://byaka.github.io/flaskJSONRPCServer-docs/\" rel=\"nofollow\">Documentation</a></h4>\n</div>\n<div id=\"simple-example\">\n<h4><a href=\"#examples\" rel=\"nofollow\">Simple example</a></h4>\n</div>\n<div id=\"licensing\">\n<h4><a href=\"#license\" rel=\"nofollow\">Licensing</a></h4>\n</div>\n</div>\n<div id=\"pros\">\n<h3>Pros</h3>\n<ul>\n<li>Lib ready for <strong>production</strong>, we use it in some products</li>\n<li>Lib tested over <strong>\u201chighload\u201d</strong> (over 60 connections per second, 24/7\nand it\u2019s not simulation) with <strong>Gevent</strong> enabled and no stability\nissues or memory leak (this is why i\u2019m wrote this library)</li>\n<li>Auto <strong>CORS</strong></li>\n<li>Simple switching to <strong>Gevent</strong> as backend</li>\n<li>Auto fallback to <strong>JSONP</strong> on GET requests (for old browsers, that\ndon\u2019t support CORS like <strong>IE</strong>&lt;10)</li>\n<li>Dispatchers can simply get info about connection (<strong>IP</strong>,\n<strong>Cookies</strong>, <strong>Headers</strong>)</li>\n<li>Dispatchers can simply set <strong>Cookies</strong>, change output <strong>Headers</strong>,\nchange output format for <strong>JSONP</strong> requests</li>\n<li>Lib fully support <strong>Notification</strong> requests (see <em>example/notify.py</em>)</li>\n<li>Lib supports <strong>restarting</strong> server (see <em>example/restart.py</em>)</li>\n<li>Lib supports <strong>hot-reloading</strong> of API (see <em>example/hotReload1.py</em>,\n<em>example/hotReload2.py</em>)</li>\n<li>Lib supports <strong>multiple servers</strong> in one app (see\n<em>example/multiple.py</em>)</li>\n<li>Lib supports <strong>merging</strong> with another WSGI app on the same IP:PORT\n(see <em>example/mergeFlaskApp.py</em>)</li>\n<li>Lib supports different <strong>execution-backends</strong>, for example\nmultiprocessing (see <em>example/parallelExecuting.py</em>)</li>\n<li>Lib supports <strong>locking</strong> (you can lock all server or specific\ndispatchers)</li>\n<li>Lib supports different <strong>serializing-backends</strong> so you can implement\nany protocol, not only JSON</li>\n<li>Lib supports <strong>individual settings</strong> for different dispatchers. For\nexample one of them can be processed with parallel (multiprocess)\nbackend, other with standard processing</li>\n<li>Lib collects self <strong>speed-stats</strong></li>\n</ul>\n</div>\n<div id=\"cons\">\n<h3>Cons</h3>\n<ul>\n<li>Not fully <strong>documentated</strong>. For now only examples in package and <a href=\"https://byaka.github.io/flaskJSONRPCServer-docs/\" rel=\"nofollow\">API\ndocumentation</a>.</li>\n<li>Lib not has <strong>decorators</strong>, so it not a \u201cFlask-way\u201d (this can be\nsimply added, but i not use decorators, sorry)</li>\n<li>Lib not covered with <strong>tests</strong>.</li>\n</ul>\n</div>\n<div id=\"install\">\n<h3>Install</h3>\n<p><tt>pip install flaskJSONRPCServer</tt></p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Simple server. More examples you can find in directory <em>example/</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"o\">,</span> <span class=\"nn\">time</span><span class=\"o\">,</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flaskJSONRPCServer</span> <span class=\"kn\">import</span> <span class=\"n\">flaskJSONRPCServer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">mySharedMethods</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">random</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"c1\"># Sipmly return random value (0..mult)</span>\n      <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"mi\">65536</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">mySharedMethods2</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">random</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"c1\"># Sipmly return random value (0..mult)</span>\n      <span class=\"k\">return</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s1\">'Hello world!'</span><span class=\"p\">):</span>\n   <span class=\"c1\"># Simply echo</span>\n   <span class=\"k\">return</span> <span class=\"n\">data</span>\n<span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">_alias</span><span class=\"o\">=</span><span class=\"s1\">'helloworld'</span> <span class=\"c1\">#setting alias for method</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">myip</span><span class=\"p\">(</span><span class=\"n\">_connection</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n   <span class=\"c1\"># Return client's IP</span>\n   <span class=\"k\">return</span> <span class=\"s1\">'Hello, </span><span class=\"si\">%s</span><span class=\"s1\">!'</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">_connection</span><span class=\"o\">.</span><span class=\"n\">ip</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">setcookie</span><span class=\"p\">(</span><span class=\"n\">_connection</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n   <span class=\"c1\"># Set cookie to client</span>\n   <span class=\"nb\">print</span> <span class=\"n\">_connection</span><span class=\"o\">.</span><span class=\"n\">cookies</span>\n   <span class=\"n\">_connection</span><span class=\"o\">.</span><span class=\"n\">cookiesOut</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span><span class=\"s1\">'myTestCookie'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span><span class=\"s1\">'Your IP is </span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"o\">%</span><span class=\"n\">_connection</span><span class=\"o\">.</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"s1\">'domain'</span><span class=\"p\">:</span><span class=\"s1\">'byaka.name'</span><span class=\"p\">})</span>\n   <span class=\"k\">return</span> <span class=\"s1\">'Setted'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">stats</span><span class=\"p\">(</span><span class=\"n\">_connection</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n   <span class=\"c1\">#return server's speed stats</span>\n   <span class=\"k\">return</span> <span class=\"n\">_connection</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"n\">inMS</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\">#inMS=True return stats in milliseconds</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">big</span><span class=\"p\">(</span><span class=\"n\">_connection</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n   <span class=\"n\">_connection</span><span class=\"o\">.</span><span class=\"n\">allowCompress</span><span class=\"o\">=</span><span class=\"kc\">True</span> <span class=\"c1\">#allow compression for this method only</span>\n   <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"\n... large data here ...\n   \"\"\"</span>\n   <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n<span class=\"n\">big</span><span class=\"o\">.</span><span class=\"n\">_alias</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'bigdata'</span><span class=\"p\">,</span> <span class=\"s1\">'compressed'</span><span class=\"p\">]</span> <span class=\"c1\">#setting alias for method</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span><span class=\"o\">==</span><span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n   <span class=\"nb\">print</span> <span class=\"s1\">'Running api..'</span>\n   <span class=\"c1\"># Creating instance of server</span>\n   <span class=\"c1\">#    &lt;blocking&gt;         switch server to sync mode when &lt;gevent&gt; is False</span>\n   <span class=\"c1\">#    &lt;cors&gt;             switch auto CORS support</span>\n   <span class=\"c1\">#    &lt;gevent&gt;           switch to using Gevent as backend</span>\n   <span class=\"c1\">#    &lt;debug&gt;            switch to logging connection's info from Flask</span>\n   <span class=\"c1\">#    &lt;log&gt;              switch to logging debug info from flaskJSONRPCServer</span>\n   <span class=\"c1\">#    &lt;fallback&gt;         switch auto fallback to JSONP on GET requests</span>\n   <span class=\"c1\">#    &lt;allowCompress&gt;    switch auto compression</span>\n   <span class=\"c1\">#    &lt;compressMinSize&gt;  set min limit for compression</span>\n   <span class=\"c1\">#    &lt;tweakDescriptors&gt; set descriptor's limit for server</span>\n   <span class=\"c1\">#    &lt;jsonBackend&gt;      set JSON backend. Auto fallback to native when problems</span>\n   <span class=\"c1\">#    &lt;notifBackend&gt;     set backend for Notify-requests</span>\n   <span class=\"n\">server</span><span class=\"o\">=</span><span class=\"n\">flaskJSONRPCServer</span><span class=\"p\">((</span><span class=\"s2\">\"0.0.0.0\"</span><span class=\"p\">,</span> <span class=\"mi\">7001</span><span class=\"p\">),</span> <span class=\"n\">blocking</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">gevent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">log</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">fallback</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">allowCompress</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">jsonBackend</span><span class=\"o\">=</span><span class=\"s1\">'simplejson'</span><span class=\"p\">,</span> <span class=\"n\">notifBackend</span><span class=\"o\">=</span><span class=\"s1\">'simple'</span><span class=\"p\">,</span> <span class=\"n\">tweakDescriptors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">])</span>\n   <span class=\"c1\"># Register dispatcher for all methods of instance</span>\n   <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">registerInstance</span><span class=\"p\">(</span><span class=\"n\">mySharedMethods</span><span class=\"p\">(),</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/api'</span><span class=\"p\">)</span>\n   <span class=\"c1\"># same name, but another path</span>\n   <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">registerInstance</span><span class=\"p\">(</span><span class=\"n\">mySharedMethods2</span><span class=\"p\">(),</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/api2'</span><span class=\"p\">)</span>\n   <span class=\"c1\"># Register dispatchers for single functions</span>\n   <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">registerFunction</span><span class=\"p\">(</span><span class=\"n\">setcookie</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/api'</span><span class=\"p\">)</span>\n   <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">registerFunction</span><span class=\"p\">(</span><span class=\"n\">echo</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/api'</span><span class=\"p\">)</span>\n   <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">registerFunction</span><span class=\"p\">(</span><span class=\"n\">myip</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/api'</span><span class=\"p\">)</span>\n   <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">registerFunction</span><span class=\"p\">(</span><span class=\"n\">big</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/api'</span><span class=\"p\">)</span>\n   <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">registerFunction</span><span class=\"p\">(</span><span class=\"n\">stats</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/api'</span><span class=\"p\">)</span>\n   <span class=\"c1\"># Run server</span>\n   <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serveForever</span><span class=\"p\">()</span>\n   <span class=\"c1\"># Now you can access this api by path http://127.0.0.1:7001/api for JSON-RPC requests</span>\n   <span class=\"c1\"># Or by path http://127.0.0.1:7001/api/&lt;method&gt;?jsonp=&lt;callback&gt;&amp;(params) for JSONP requests</span>\n   <span class=\"c1\">#    For example by http://127.0.0.1:7001/api/echo?data=test_data&amp;jsonp=jsonpCallback_129620</span>\n</pre>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>It is licensed under the Apache License, Version 2.0\n(<a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\">read</a>).</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2189947, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "cfc2f41ad6d8ddf009e4f6e375f1aea0", "sha256": "0e7e1291bb534881fedfd50d1efaf4935f58d470de1bd17c66ad9882c0952640"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.3.1.tar.gz", "has_sig": false, "md5_digest": "cfc2f41ad6d8ddf009e4f6e375f1aea0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10794, "upload_time": "2015-05-02T00:19:23", "upload_time_iso_8601": "2015-05-02T00:19:23.529132Z", "url": "https://files.pythonhosted.org/packages/ff/c8/35557d3c6e1daba66dd951d60bd31b9c8964d667781a1da863749fe66a49/flaskJSONRPCServer-0.3.1.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "aff92442b684ac2228903c22028a3007", "sha256": "88b1d2067d606d29bae509ee4101962c852b42b127be4b9426f4afca3f743f34"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.4.1.tar.gz", "has_sig": false, "md5_digest": "aff92442b684ac2228903c22028a3007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13823, "upload_time": "2015-06-21T12:00:56", "upload_time_iso_8601": "2015-06-21T12:00:56.531127Z", "url": "https://files.pythonhosted.org/packages/12/d5/861179fa6a3ea9a8b252a26a4344683eb6ec2a4ef7178992a62913da5b4b/flaskJSONRPCServer-0.4.1.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "27ca6627c74b4230c0cd513c81ce23de", "sha256": "2d6d5942ea8c0abf56ccca552c7ca2d753fdb9f989102d6ac65d23faf65f17b1"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.5.1.tar.gz", "has_sig": false, "md5_digest": "27ca6627c74b4230c0cd513c81ce23de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19408, "upload_time": "2015-10-25T22:50:42", "upload_time_iso_8601": "2015-10-25T22:50:42.868500Z", "url": "https://files.pythonhosted.org/packages/e9/50/32fce0c1b11a5afbba61dccfeae71a4993abad4cd025bfb966e65d2ec69d/flaskJSONRPCServer-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "a7a9bacf4278d6f35c1d3aeaf6b51ce2", "sha256": "248c8c3b5f44feef02610ed0bb3e1c80bd6cf9a60f0ea8a1b782760c6fb23edf"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.5.2.tar.gz", "has_sig": false, "md5_digest": "a7a9bacf4278d6f35c1d3aeaf6b51ce2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19409, "upload_time": "2015-10-25T22:56:21", "upload_time_iso_8601": "2015-10-25T22:56:21.840943Z", "url": "https://files.pythonhosted.org/packages/67/fc/66f378e75be94538ab66f185f5e9518bf91a73e916f5558da199c3259b26/flaskJSONRPCServer-0.5.2.tar.gz", "yanked": false}], "0.5.21": [{"comment_text": "", "digests": {"md5": "f1f08c71ec30306c06c5c335983e0812", "sha256": "9fcb728259589de819fef62c888c3923ef2f4a662bfba7255c78e5cd9140109b"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.5.21.tar.gz", "has_sig": false, "md5_digest": "f1f08c71ec30306c06c5c335983e0812", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23927, "upload_time": "2015-10-25T23:15:06", "upload_time_iso_8601": "2015-10-25T23:15:06.870343Z", "url": "https://files.pythonhosted.org/packages/84/c7/b15d748e6b70e57b1cf504f755306c2c9cae2c44cfd1301107e1c57a7d9b/flaskJSONRPCServer-0.5.21.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "0a73c47771eb84c2ad4dcb72e5502d2c", "sha256": "b9d0bad4c940788453131064c0b238a8b5a9bd3d9ceef4a0616eef3d5a7d95fb"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.9.0.tar.gz", "has_sig": false, "md5_digest": "0a73c47771eb84c2ad4dcb72e5502d2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85765, "upload_time": "2016-05-04T14:20:56", "upload_time_iso_8601": "2016-05-04T14:20:56.784710Z", "url": "https://files.pythonhosted.org/packages/69/8d/b7f8bd4c9f5741d3b0caf012b49963ce8069215cacd2a50a0c1d9850e842/flaskJSONRPCServer-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "dd0bdb8a650e86e0f05004041a85477e", "sha256": "5a6dec381b55ceb28e01c18a178f5736227507f07094791bf6c598944020cbae"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.9.1.tar.gz", "has_sig": false, "md5_digest": "dd0bdb8a650e86e0f05004041a85477e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63378, "upload_time": "2016-05-04T14:52:03", "upload_time_iso_8601": "2016-05-04T14:52:03.122647Z", "url": "https://files.pythonhosted.org/packages/4e/50/3684fef9a77f6386d01d7e549371fabd5052445e04a5dc2060d9b7d7c6f3/flaskJSONRPCServer-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "f3010e54a7a3f33dbbd5f0ddb101a579", "sha256": "0033c5aeacefa1ff7f3e269d401db591d7d6fce027ad805a33c49cac00784ae0"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.9.2.tar.gz", "has_sig": false, "md5_digest": "f3010e54a7a3f33dbbd5f0ddb101a579", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60426, "upload_time": "2016-05-16T12:40:40", "upload_time_iso_8601": "2016-05-16T12:40:40.442454Z", "url": "https://files.pythonhosted.org/packages/1d/90/d292d15671cb9717d336d72bb262aca3df4c3c0e6519300a1f43752373ee/flaskJSONRPCServer-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "38b7fa959d4570c02ebdd6f69faad163", "sha256": "25c7244e22d9745d8e0433c8c7b0b6902d10d8fabe7f5dbe566827df929dea93"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.9.3.tar.gz", "has_sig": false, "md5_digest": "38b7fa959d4570c02ebdd6f69faad163", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60443, "upload_time": "2016-06-27T17:27:07", "upload_time_iso_8601": "2016-06-27T17:27:07.247320Z", "url": "https://files.pythonhosted.org/packages/5a/f1/9bfc8dddb4dee60f56a487d7b54c9e4687afa3a2c208f068043db16363f2/flaskJSONRPCServer-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "38b7fa959d4570c02ebdd6f69faad163", "sha256": "25c7244e22d9745d8e0433c8c7b0b6902d10d8fabe7f5dbe566827df929dea93"}, "downloads": -1, "filename": "flaskJSONRPCServer-0.9.3.tar.gz", "has_sig": false, "md5_digest": "38b7fa959d4570c02ebdd6f69faad163", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60443, "upload_time": "2016-06-27T17:27:07", "upload_time_iso_8601": "2016-06-27T17:27:07.247320Z", "url": "https://files.pythonhosted.org/packages/5a/f1/9bfc8dddb4dee60f56a487d7b54c9e4687afa3a2c208f068043db16363f2/flaskJSONRPCServer-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:43 2020"}