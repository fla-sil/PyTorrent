{"info": {"author": "Joaquin Duo", "author_email": "joaduo@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "The rel_imp utility\n====================\n\n|Codeship Status for joaduo/rel_imp|\n\nEnabling explicit relative imports in main modules the easy way.\n\nFor enabling relative import in ``__main__`` module PEP 366 presents a\nworkaround like:\n\n.. code:: python\n\n    if __name__ == \"__main__\" and __package__ is None:\n        __package__ = \"my_pkg\"\n\n    from .foo import bar\n\nWith ``rel_imp`` you can rewrite it as:\n\n.. code:: python\n\n    import rel_imp; rel_imp.init()\n    from .foo import bar\n\nCleaner, faster and less coupled. (you don't need to specify the package\nmanually)\n\n**Note:** In order to use ``rel_imp`` the module you are coding must be\ninside a package or a sub-package.\n\nWhy using explicit relative imports?\n------------------------------------\n\nPython 2 still supports implicit relative import and will be deprecated\nin Python 3, so you will want to migrate those scripts using implicit\nrelative import to explicit relative import. Check more on the `PEP\n404 <http://legacy.python.org/dev/peps/pep-0404/#id18>`__.\n\nExplicit relative imports makes your code less coupled. As `PEP\n328 <http://legacy.python.org/dev/peps/pep-0328/#rationale-for-relative-imports>`__\nsays:\n\n    Several use cases were presented, the most important of which is\n    being able to rearrange the structure of large packages without\n    having to edit sub-packages. In addition, a module inside a package\n    can't easily import itself without relative imports.\n\nAlthough it is still a matter of taste. (I personally prefer less code\nto express the same)\n\nWhy running sub-modules as main?\n--------------------------------\n\nSome reasons:\n\n1. A submodule can become a command line tool if called as main.\n2. You can have unit test or smoke test within the module.\n3. You simply want to run it without any explicit test to see if at\n   least it imports everything it needs.\n\nInstallation and Uninstallation\n-------------------------------\n\nInstall via pip\n~~~~~~~~~~~~~~~\n\n::\n\n    pip install rel_imp\n\nRemove it with:\n\n::\n\n    pip uninstall rel_imp\n\nInstall downloading the file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDownload the ``rel_imp.py`` in one your Python's search path.\n\n::\n\n    wget https://raw.githubusercontent.com/joaduo/rel_imp/master/rel_imp.py\n\nExample\n-------\n\nImagine you have 2 modules inside a package called \"my_pkg\".\n\nThat would be:\n\n-  ``my_pkg/__init__.py``\n-  ``my_pkg/math_lib.py``\n-  ``my_pkg/test.py``\n\nSo in test.py we could have\n\n.. code:: python\n\n    from .math_lib import factorize\n\n    def factorize_and_print(number):\n        num = factorize(number)\n        print num\n\n    if __name__ == '__main__':\n        #Small smoke test\n        factorize_and_print(10)\n        factorize_and_print(0)\n        factorize_and_print(-10)\n\nIf you do ``python my_pkg/test.py`` it will throw an exception because\nof the relative import at the first line.\n\nSo you can use ``rel_imp`` to make your code look nicer. Simply do:\n\n.. code:: python\n\n    import rel_imp; rel_imp.init()\n    from .math_lib import factorize\n\nIt is equivalent as the prior solution but you don't have to worry about\nkeeping in sync ``__package__``'s value.\n\nHow does it work?\n-----------------\n\nIt uses the same technique in PEP 366 but ``__package__``'s value is set\nthrough dynamic inspection of the stack. To solve the value of\n``__package__`` it compares the current ``__main__``'s file with search\npaths in sys.path - or, optionally, a list of paths given in the\nsettings -.\n\nFor example, for a file in\n``/home/user/projects/python/math/my_pkg/test.py`` given the following\npaths in sys.path:\n\n.. code:: python\n\n    [\n    '/home/user/projects/python/',\n    '/home/user/projects/python/math/',\n    '/home/user/projects/python/math/my_pkg/',\n    ]\n\nIt will pick the closest path to the ``__main__``'s file that is not the\n``__main__``'s file's directory.\n\nThen the base path use to solve ``__package__`` variable will be\n``/home/user/projects/python/math/``\n\nDisabling rel_imp\n------------------\n\nRelative import shouldn't have any non-desired side effect, but if for\nsome reason you want to disable it:\n\n1. Replace the ``def init()`` function in the ``rel_imp.py`` file (if\n   you downloaded it)\n2. Create an empty ``rel_imp.py`` with a dummy ``init()`` in a\n   PYTHONPATH with higher priority than the installed one (or optionally\n   uninstall the original one)\n\n``rel_imp`` is really lightweight so you won't gain any performance\ndifference disabling it.\n\nFeedback or bugs reporting\n--------------------------\n\nFile an issue through github's `issue tracking\nsystem <https://github.com/joaduo/rel_imp/issues>`__.\n\nYou can optionally contact me at joaduo gmail com.\n\nRelated PEPs\n------------\n\n-  http://legacy.python.org/dev/peps/pep-0328/\n-  http://legacy.python.org/dev/peps/pep-0366/\n\n.. |Codeship Status for joaduo/rel_imp| image:: https://codeship.com/projects/6634b790-b2f6-0132-44e8-3a4b0bbda320/status?branch=master\n   :target: https://codeship.com/projects/70108", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joaduo/rel_imp", "keywords": "explicit,relative,import", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rel_imp", "package_url": "https://pypi.org/project/rel_imp/", "platform": "", "project_url": "https://pypi.org/project/rel_imp/", "project_urls": {"Homepage": "https://github.com/joaduo/rel_imp"}, "release_url": "https://pypi.org/project/rel_imp/0.2.7/", "requires_dist": null, "requires_python": "", "summary": "Enable explicit relative imports in __main__ module.", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://codeship.com/projects/70108\" rel=\"nofollow\"><img alt=\"Codeship Status for joaduo/rel_imp\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de0738b0ac791708e7afb26b28a043279c67dda3/68747470733a2f2f636f6465736869702e636f6d2f70726f6a656374732f36363334623739302d623266362d303133322d343465382d3361346230626264613332302f7374617475733f6272616e63683d6d6173746572\"></a></p>\n<p>Enabling explicit relative imports in main modules the easy way.</p>\n<p>For enabling relative import in <tt>__main__</tt> module PEP 366 presents a\nworkaround like:</p>\n<pre><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span> <span class=\"ow\">and</span> <span class=\"n\">__package__</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">__package__</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_pkg\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.foo</span> <span class=\"kn\">import</span> <span class=\"n\">bar</span>\n</pre>\n<p>With <tt>rel_imp</tt> you can rewrite it as:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rel_imp</span><span class=\"p\">;</span> <span class=\"n\">rel_imp</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.foo</span> <span class=\"kn\">import</span> <span class=\"n\">bar</span>\n</pre>\n<p>Cleaner, faster and less coupled. (you don\u2019t need to specify the package\nmanually)</p>\n<p><strong>Note:</strong> In order to use <tt>rel_imp</tt> the module you are coding must be\ninside a package or a sub-package.</p>\n<div id=\"why-using-explicit-relative-imports\">\n<h2>Why using explicit relative imports?</h2>\n<p>Python 2 still supports implicit relative import and will be deprecated\nin Python 3, so you will want to migrate those scripts using implicit\nrelative import to explicit relative import. Check more on the <a href=\"http://legacy.python.org/dev/peps/pep-0404/#id18\" rel=\"nofollow\">PEP\n404</a>.</p>\n<p>Explicit relative imports makes your code less coupled. As <a href=\"http://legacy.python.org/dev/peps/pep-0328/#rationale-for-relative-imports\" rel=\"nofollow\">PEP\n328</a>\nsays:</p>\n<blockquote>\nSeveral use cases were presented, the most important of which is\nbeing able to rearrange the structure of large packages without\nhaving to edit sub-packages. In addition, a module inside a package\ncan\u2019t easily import itself without relative imports.</blockquote>\n<p>Although it is still a matter of taste. (I personally prefer less code\nto express the same)</p>\n</div>\n<div id=\"why-running-sub-modules-as-main\">\n<h2>Why running sub-modules as main?</h2>\n<p>Some reasons:</p>\n<ol>\n<li>A submodule can become a command line tool if called as main.</li>\n<li>You can have unit test or smoke test within the module.</li>\n<li>You simply want to run it without any explicit test to see if at\nleast it imports everything it needs.</li>\n</ol>\n</div>\n<div id=\"installation-and-uninstallation\">\n<h2>Installation and Uninstallation</h2>\n<div id=\"install-via-pip\">\n<h3>Install via pip</h3>\n<pre>pip install rel_imp\n</pre>\n<p>Remove it with:</p>\n<pre>pip uninstall rel_imp\n</pre>\n</div>\n<div id=\"install-downloading-the-file\">\n<h3>Install downloading the file</h3>\n<p>Download the <tt>rel_imp.py</tt> in one your Python\u2019s search path.</p>\n<pre>wget https://raw.githubusercontent.com/joaduo/rel_imp/master/rel_imp.py\n</pre>\n</div>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Imagine you have 2 modules inside a package called \u201cmy_pkg\u201d.</p>\n<p>That would be:</p>\n<ul>\n<li><tt>my_pkg/__init__.py</tt></li>\n<li><tt>my_pkg/math_lib.py</tt></li>\n<li><tt>my_pkg/test.py</tt></li>\n</ul>\n<p>So in test.py we could have</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.math_lib</span> <span class=\"kn\">import</span> <span class=\"n\">factorize</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">factorize_and_print</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">factorize</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"n\">num</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\">#Small smoke test</span>\n    <span class=\"n\">factorize_and_print</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">factorize_and_print</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">factorize_and_print</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>If you do <tt>python my_pkg/test.py</tt> it will throw an exception because\nof the relative import at the first line.</p>\n<p>So you can use <tt>rel_imp</tt> to make your code look nicer. Simply do:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rel_imp</span><span class=\"p\">;</span> <span class=\"n\">rel_imp</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.math_lib</span> <span class=\"kn\">import</span> <span class=\"n\">factorize</span>\n</pre>\n<p>It is equivalent as the prior solution but you don\u2019t have to worry about\nkeeping in sync <tt>__package__</tt>\u2019s value.</p>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work?</h2>\n<p>It uses the same technique in PEP 366 but <tt>__package__</tt>\u2019s value is set\nthrough dynamic inspection of the stack. To solve the value of\n<tt>__package__</tt> it compares the current <tt>__main__</tt>\u2019s file with search\npaths in sys.path - or, optionally, a list of paths given in the\nsettings -.</p>\n<p>For example, for a file in\n<tt>/home/user/projects/python/math/my_pkg/test.py</tt> given the following\npaths in sys.path:</p>\n<pre><span class=\"p\">[</span>\n<span class=\"s1\">'/home/user/projects/python/'</span><span class=\"p\">,</span>\n<span class=\"s1\">'/home/user/projects/python/math/'</span><span class=\"p\">,</span>\n<span class=\"s1\">'/home/user/projects/python/math/my_pkg/'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>It will pick the closest path to the <tt>__main__</tt>\u2019s file that is not the\n<tt>__main__</tt>\u2019s file\u2019s directory.</p>\n<p>Then the base path use to solve <tt>__package__</tt> variable will be\n<tt>/home/user/projects/python/math/</tt></p>\n</div>\n<div id=\"disabling-rel-imp\">\n<h2>Disabling rel_imp</h2>\n<p>Relative import shouldn\u2019t have any non-desired side effect, but if for\nsome reason you want to disable it:</p>\n<ol>\n<li>Replace the <tt>def init()</tt> function in the <tt>rel_imp.py</tt> file (if\nyou downloaded it)</li>\n<li>Create an empty <tt>rel_imp.py</tt> with a dummy <tt>init()</tt> in a\nPYTHONPATH with higher priority than the installed one (or optionally\nuninstall the original one)</li>\n</ol>\n<p><tt>rel_imp</tt> is really lightweight so you won\u2019t gain any performance\ndifference disabling it.</p>\n</div>\n<div id=\"feedback-or-bugs-reporting\">\n<h2>Feedback or bugs reporting</h2>\n<p>File an issue through github\u2019s <a href=\"https://github.com/joaduo/rel_imp/issues\" rel=\"nofollow\">issue tracking\nsystem</a>.</p>\n<p>You can optionally contact me at joaduo gmail com.</p>\n</div>\n<div id=\"related-peps\">\n<h2>Related PEPs</h2>\n<ul>\n<li><a href=\"http://legacy.python.org/dev/peps/pep-0328/\" rel=\"nofollow\">http://legacy.python.org/dev/peps/pep-0328/</a></li>\n<li><a href=\"http://legacy.python.org/dev/peps/pep-0366/\" rel=\"nofollow\">http://legacy.python.org/dev/peps/pep-0366/</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3983065, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e3e2474e953167e8a0a6c20458d045ac", "sha256": "011480b893170e6f561b05d10173f7450aca4e832d3ab6c606a8d37df393cefe"}, "downloads": -1, "filename": "rel_imp-0.1.tar.gz", "has_sig": false, "md5_digest": "e3e2474e953167e8a0a6c20458d045ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5787, "upload_time": "2014-09-25T23:36:25", "upload_time_iso_8601": "2014-09-25T23:36:25.379546Z", "url": "https://files.pythonhosted.org/packages/cd/d8/7a79b24d44d167f5cb9ae72270a48309a09a51e441fe9952dfbdd0ea1bb3/rel_imp-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "82a1c305e28883e6b483b56b98d59527", "sha256": "1f152eea5d9352e2673541855fb6cb97fdc07bd59d7f6d2450851a22eec769b9"}, "downloads": -1, "filename": "rel_imp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "82a1c305e28883e6b483b56b98d59527", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6035, "upload_time": "2014-09-26T05:02:38", "upload_time_iso_8601": "2014-09-26T05:02:38.993085Z", "url": "https://files.pythonhosted.org/packages/98/e5/936785d2a8404d1f26cd4f1dbd638b00afe5a6c2f6ab037f52a427f31b54/rel_imp-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "97d485f6d6e6a05922bddfe922e6cc48", "sha256": "277182986696c4975bd512d6426bf8eae8134405980b79a3ad1e7233a6c7a250"}, "downloads": -1, "filename": "rel_imp-0.1.2.tar.gz", "has_sig": false, "md5_digest": "97d485f6d6e6a05922bddfe922e6cc48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6013, "upload_time": "2014-09-29T19:59:48", "upload_time_iso_8601": "2014-09-29T19:59:48.886269Z", "url": "https://files.pythonhosted.org/packages/12/a5/2f520fd9943da89065710d4e487f1aa048022feda0fa43531ac292e3ceb8/rel_imp-0.1.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "73da2736137b76d15b3911b6e8f90705", "sha256": "22accca720bdd2461144b9a654c93f3079a14644198807994e1cd8b25cbdb499"}, "downloads": -1, "filename": "rel_imp-0.2.1.tar.gz", "has_sig": false, "md5_digest": "73da2736137b76d15b3911b6e8f90705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6847, "upload_time": "2016-06-09T16:20:11", "upload_time_iso_8601": "2016-06-09T16:20:11.431597Z", "url": "https://files.pythonhosted.org/packages/bf/86/4e1a3039943dff02e01850fb323de481c6a1e304d48da9af67953f1bce05/rel_imp-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "e8b98f836f545955bbec6d799d4a00aa", "sha256": "0755441ceca12b54fe661a8a2ced696908638a52f2e50f7efcc62262fba44aab"}, "downloads": -1, "filename": "rel_imp-0.2.2.tar.gz", "has_sig": false, "md5_digest": "e8b98f836f545955bbec6d799d4a00aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6966, "upload_time": "2016-06-13T13:41:22", "upload_time_iso_8601": "2016-06-13T13:41:22.199467Z", "url": "https://files.pythonhosted.org/packages/84/2e/8228f37739e3d2b17d61fd053bca4d17709b99a804ac434443d9aa342f6a/rel_imp-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "5e71f36dbec772e25df8da83d33b4b7b", "sha256": "d7f5599d133b04bb8f3ef0aad29666599feb9d228f9f992aa3df82bdc0a3df1f"}, "downloads": -1, "filename": "rel_imp-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5e71f36dbec772e25df8da83d33b4b7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6994, "upload_time": "2016-06-13T15:05:19", "upload_time_iso_8601": "2016-06-13T15:05:19.400124Z", "url": "https://files.pythonhosted.org/packages/2a/6a/edecef9a55abd0627fa5f099bbe3cc0924e93d3727041c6e4df50bffd40d/rel_imp-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "a5d3fd0895e237dbdbc1c8dc5ba82d80", "sha256": "177a6d94cf2a49056bfb27f4ded84e4004f147aa415fb266feea1ff55d05cf69"}, "downloads": -1, "filename": "rel_imp-0.2.4.tar.gz", "has_sig": false, "md5_digest": "a5d3fd0895e237dbdbc1c8dc5ba82d80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6998, "upload_time": "2016-06-18T02:41:23", "upload_time_iso_8601": "2016-06-18T02:41:23.962506Z", "url": "https://files.pythonhosted.org/packages/11/e9/ab5502a8d01fd0c76a7c18e4b27eaa4dd9e9afd4d7dee858e36d1bcbd83e/rel_imp-0.2.4.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "4d2d4496a39cbe37c3e48339c31d7abf", "sha256": "6fe6463dabc84ffe390226569f13aff7b0a9c1744d4afa6a30be1296615bdc7b"}, "downloads": -1, "filename": "rel_imp-0.2.6.tar.gz", "has_sig": false, "md5_digest": "4d2d4496a39cbe37c3e48339c31d7abf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6645, "upload_time": "2017-04-07T08:15:45", "upload_time_iso_8601": "2017-04-07T08:15:45.907911Z", "url": "https://files.pythonhosted.org/packages/ec/25/a2889c7d1822d96548b3809559dc94d614c9fc5e5332c19b892a0cb4efce/rel_imp-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "f975213e1237ee1187670086bdeebf8e", "sha256": "08be01476c014cd9bd8af3174dd5b0f26c8cc8d3dda5bf15fc0e65f335f58ac9"}, "downloads": -1, "filename": "rel_imp-0.2.7.tar.gz", "has_sig": false, "md5_digest": "f975213e1237ee1187670086bdeebf8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6657, "upload_time": "2018-06-20T21:39:57", "upload_time_iso_8601": "2018-06-20T21:39:57.876230Z", "url": "https://files.pythonhosted.org/packages/65/9b/db7aba3158667c9646cda8211f30282d41bcaff7babe2f5c10e2dfc82f87/rel_imp-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f975213e1237ee1187670086bdeebf8e", "sha256": "08be01476c014cd9bd8af3174dd5b0f26c8cc8d3dda5bf15fc0e65f335f58ac9"}, "downloads": -1, "filename": "rel_imp-0.2.7.tar.gz", "has_sig": false, "md5_digest": "f975213e1237ee1187670086bdeebf8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6657, "upload_time": "2018-06-20T21:39:57", "upload_time_iso_8601": "2018-06-20T21:39:57.876230Z", "url": "https://files.pythonhosted.org/packages/65/9b/db7aba3158667c9646cda8211f30282d41bcaff7babe2f5c10e2dfc82f87/rel_imp-0.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:00 2020"}