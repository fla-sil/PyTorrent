{"info": {"author": "Paul Triantafyllou", "author_email": "trianta@research.att.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": ".. ===============LICENSE_START=======================================================\n.. Acumos CC-BY-4.0\n.. ===================================================================================\n.. Copyright (C) 2017-2018 AT&T Intellectual Property & Tech Mahindra. All rights reserved.\n.. ===================================================================================\n.. This Acumos documentation file is distributed by AT&T and Tech Mahindra\n.. under the Creative Commons Attribution 4.0 International License (the \"License\");\n.. you may not use this file except in compliance with the License.\n.. You may obtain a copy of the License at\n..\n..      http://creativecommons.org/licenses/by/4.0\n..\n.. This file is distributed on an \"AS IS\" BASIS,\n.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n.. See the License for the specific language governing permissions and\n.. limitations under the License.\n.. ===============LICENSE_END=========================================================\n\n===============================\nAcumos Python Client User Guide\n===============================\n\n\n|Build Status|\n\n``acumos`` is a client library that allows modelers to push their Python models\nto the `Acumos platform <https://www.acumos.org/>`__.\n\nInstallation\n============\n\nYou will need a Python 3.6 environment in order to install ``acumos``.\nYou can use `Anaconda <https://www.anaconda.com/download/>`__\n(preferred) or `pyenv <https://github.com/pyenv/pyenv>`__ to install and\nmanage Python environments.\n\nIf you\u2019re new to Python and need an IDE to start developing, we\nrecommend using `Spyder <https://github.com/spyder-ide/spyder>`__ which\ncan easily be installed with Anaconda.\n\nThe ``acumos`` package can be installed with pip:\n\n.. code:: bash\n\n    pip install acumos\n\n\nProtocol Buffers\n----------------\n\nThe ``acumos`` package uses protocol buffers and **assumes you have\nthe protobuf compiler** ``protoc`` **installed**. Please visit the `protobuf\nrepository <https://github.com/google/protobuf/releases/tag/v3.4.0>`__\nand install the appropriate ``protoc`` for your operating system.\nInstallation is as easy as downloading a binary release and adding it to\nyour system ``$PATH``. This is a temporary requirement that will be\nremoved in a future version of ``acumos``.\n\n**Anaconda Users**: You can easily install ``protoc`` from `an Anaconda\npackage <https://anaconda.org/anaconda/libprotobuf>`__ via:\n\n.. code:: bash\n\n    conda install -c anaconda libprotobuf\n\n\n.. |Build Status| image:: https://jenkins.acumos.org/buildStatus/icon?job=acumos-python-client-tox-verify-master\n   :target: https://jenkins.acumos.org/job/acumos-python-client-tox-verify-master/\n\n.. ===============LICENSE_START=======================================================\n.. Acumos CC-BY-4.0\n.. ===================================================================================\n.. Copyright (C) 2017-2018 AT&T Intellectual Property & Tech Mahindra. All rights reserved.\n.. ===================================================================================\n.. This Acumos documentation file is distributed by AT&T and Tech Mahindra\n.. under the Creative Commons Attribution 4.0 International License (the \"License\");\n.. you may not use this file except in compliance with the License.\n.. You may obtain a copy of the License at\n..\n..      http://creativecommons.org/licenses/by/4.0\n..\n.. This file is distributed on an \"AS IS\" BASIS,\n.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n.. See the License for the specific language governing permissions and\n.. limitations under the License.\n.. ===============LICENSE_END=========================================================\n\n=============================\nAcumos Python Client Tutorial\n=============================\n\nThis tutorial provides a brief overview of ``acumos`` for creating\nAcumos models. The tutorial is meant to be followed linearly, and some\ncode snippets depend on earlier imports and objects. Full examples are\navailable in the ``examples/`` directory of the `Acumos Python client repository <https://gerrit.acumos.org/r/gitweb?p=acumos-python-client.git;a=summary>`__.\n\n#.  `Importing Acumos`_\n#.  `Creating A Session`_\n#.  `A Simple Model`_\n#.  `Exporting Models`_\n#.  `Defining Types`_\n#.  `Using DataFrames with scikit-learn`_\n#.  `Declaring Requirements`_\n#.  `Declaring Options`_\n#.  `Keras and TensorFlow`_\n#. `Testing Models`_\n#. `More Examples`_\n\nImporting Acumos\n================\n\nFirst import the modeling and session packages:\n\n.. code:: python\n\n    from acumos.modeling import Model, List, Dict, create_namedtuple, create_dataframe\n    from acumos.session import AcumosSession\n\nCreating A Session\n==================\n\nAn ``AcumosSession`` allows you to export your models to Acumos. You can\neither dump a model to disk locally, so that you can upload it via the\nAcumos website, or push the model to Acumos directly.\n\nIf you\u2019d like to push directly to Acumos, create a session with the ``push_api`` argument:\n\n.. code:: python\n\n    session = AcumosSession(push_api=\"https://my.acumos.instance.com/push\")\n\nSee the onboarding page of your Acumos instance website to find the correct\n``push_api`` URL to use.\n\nIf you\u2019re only interested in dumping a model to disk, arguments aren\u2019t needed:\n\n.. code:: python\n\n    session = AcumosSession()\n\nA Simple Model\n==============\n\nAny Python function can be used to define an Acumos model using `Python\ntype hints <https://docs.python.org/3/library/typing.html>`__.\n\nLet\u2019s first create a simple model that adds two integers together.\nAcumos needs to know what the inputs and outputs of your functions are.\nWe can use the Python type annotation syntax to specify the function\nsignature.\n\nBelow we define a function ``add_numbers`` with ``int`` type parameters\n``x`` and ``y``, and an ``int`` return type. We then build an Acumos\nmodel with an ``add`` method.\n\n**Note:** Function\n`docstrings <https://www.python.org/dev/peps/pep-0257/>`__ are included\nwith your model and used for documentation, so be sure to include one!\n\n.. code:: python\n\n    def add_numbers(x: int, y: int) -> int:\n        '''Returns the sum of x and y'''\n        return x + y\n\n    model = Model(add=add_numbers)\n\nExporting Models\n================\n\nWe can now export our model using the ``AcumosSession`` object created\nearlier. The ``push`` and ``dump`` APIs are shown below. The ``dump`` method will\nsave the model to disk so that it can be onboarded via the Acumos website. The\n``push`` method pushes the model directly to Acumos.\n\n.. code:: python\n\n    session.push(model, 'my-model')\n    session.dump(model, 'my-model', '~/')  # creates ~/my-model\n\nFor more information on how to onboard a dumped model via the Acumos website,\nsee the `web onboarding guide <https://docs.acumos.org/en/latest/submodules/portal-marketplace/docs/user-guides/portal-user/portal/portal-onboarding-intro.html#on-boarding-by-web>`__.\n\n**Note:** Pushing a model to Acumos will prompt you for an onboarding token if\nyou have not previously provided one. The interactive prompt can be avoided by\nexporting the ``ACUMOS_TOKEN`` environment variable, which corresponds to an\nauthentication token that can be found in your account settings on the Acumos\nwebsite.\n\nDefining Types\n==============\n\nIn this example, we make a model that can read binary images and output\nsome metadata about them. This model makes use of a custom type\n``ImageShape``.\n\nWe first create a ``NamedTuple`` type called ``ImageShape``, which is\nlike an ordinary ``tuple`` but with field accessors. We can then use\n``ImageShape`` as the return type of ``get_shape``. Note how\n``ImageShape`` can be instantiated as a new object.\n\n.. code:: python\n\n    import io\n    import PIL\n\n    ImageShape = create_namedtuple('ImageShape', [('width', int), ('height', int)])\n\n    def get_format(data: bytes) -> str:\n        '''Returns the format of an image'''\n        buffer = io.BytesIO(data)\n        img = PIL.Image.open(buffer)\n        return img.format\n\n    def get_shape(data: bytes) -> ImageShape:\n        '''Returns the width and height of an image'''\n        buffer = io.BytesIO(data)\n        img = PIL.Image.open(buffer)\n        shape = ImageShape(width=img.width, height=img.height)\n        return shape\n\n    model = Model(get_format=get_format, get_shape=get_shape)\n\n**Note:** Starting in Python 3.6, you can alternatively use this simpler\nsyntax:\n\n.. code:: python\n\n    from acumos.modeling import NamedTuple\n\n    class ImageShape(NamedTuple):\n        '''Type representing the shape of an image'''\n        width: int\n        height: int\n\nDefining Unstructured Types\n===========================\n\nThe `create_namedtuple` function allows us to create types with structure,\nhowever sometimes it's useful to work with unstructured data, such as plain\ntext, dictionaries or byte strings. The `new_type` function allows for just\nthat.\n\nFor example, here's a model that takes in unstructured text, and returns the\nnumber of words in the text:\n\n.. code:: python\n\n    from acumos.modeling import new_type\n\n    Text = new_type(str, 'Text')\n\n    def count(text: Text) -> Text:\n        '''Counts the number of words in the text'''\n        return len(text.split(' '))\n\nBy using the `new_type` function, you inform `acumos` that `Text` is\nunstructured, and therefore `acumos` will not create any structured types or\nmessages for the `count` function.\nVersion 0.9.x of acumos allows only the use of unstructured types in input and output of\nthe user defined function.\n\nYou can use the `new_type` function to create dictionaries or byte string\ntype unstructured data as shown below.\n\n.. code:: python\n\n   from acumos.modeling import new_type\n\n   Dict = new_type(dict, 'Dict')\n\n   Image = new_type(byte, 'Image')\n\nUsing DataFrames with scikit-learn\n==================================\n\nIn this example, we train a ``RandomForestClassifier`` using\n``scikit-learn`` and use it to create an Acumos model.\n\nWhen making machine learning models, it\u2019s common to use a dataframe data\nstructure to represent data. To make things easier, ``acumos`` can\ncreate ``NamedTuple`` types directly from ``pandas.DataFrame`` objects.\n\n``NamedTuple`` types created from ``pandas.DataFrame`` objects store\ncolumns as named attributes and preserve column order. Because\n``NamedTuple`` types are like ordinary ``tuple`` types, the resulting\nobject can be iterated over. Thus, iterating over a ``NamedTuple``\ndataframe object is the same as iterating over the columns of a\n``pandas.DataFrame``. As a consequence, note how ``np.column_stack`` can\nbe used to create a ``numpy.ndarray`` from the input ``df``.\n\nFinally, the model returns a ``numpy.ndarray`` of ``int`` corresponding\nto predicted iris classes. The ``classify_iris`` function represents\nthis as ``List[int]`` in the signature return.\n\n.. code:: python\n\n    import numpy as np\n    import pandas as pd\n    from sklearn.datasets import load_iris\n    from sklearn.ensemble import RandomForestClassifier\n\n    iris = load_iris()\n    X = iris.data\n    y = iris.target\n\n    clf = RandomForestClassifier(random_state=0)\n    clf.fit(X, y)\n\n    # here, an appropriate NamedTuple type is inferred from a pandas DataFrame\n    X_df = pd.DataFrame(X, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])\n    IrisDataFrame = create_dataframe('IrisDataFrame', X_df)\n\n    # ==================================================================================\n    # # or equivalently:\n    #\n    # IrisDataFrame = create_namedtuple('IrisDataFrame', [('sepal_length', List[float]),\n    #                                                     ('sepal_width', List[float]),\n    #                                                     ('petal_length', List[float]),\n    #                                                     ('petal_width', List[float])])\n    # ==================================================================================\n\n    def classify_iris(df: IrisDataFrame) -> List[int]:\n        '''Returns an array of iris classifications'''\n        X = np.column_stack(df)\n        return clf.predict(X)\n\n    model = Model(classify=classify_iris)\n\nCheck out the ``sklearn`` examples in the examples directory for full\nrunnable scripts.\n\nDeclaring Requirements\n======================\n\nIf your model depends on another Python script or package that you wrote, you can\ndeclare the dependency via the ``acumos.metadata.Requirements`` class:\n\n.. code:: python\n\n    from acumos.metadata import Requirements\n\nNote that only pure Python is supported at this time.\n\nCustom Scripts\n--------------\n\nCustom scripts can be included by giving ``Requirements`` a sequence of paths\nto Python scripts, or directories containing Python scripts. For example, if the\nmodel defined in ``model.py`` depended on ``helper1.py``:\n\n::\n\n    model_workspace/\n    \u251c\u2500\u2500 model.py\n    \u251c\u2500\u2500 helper1.py\n    \u2514\u2500\u2500 helper2.py\n\nthis dependency could be declared like so:\n\n.. code:: python\n\n    from helper1 import do_thing\n\n    def transform(x: int) -> int:\n        '''Does the thing'''\n        return do_thing(x)\n\n    model = Model(transform=transform)\n\n    reqs = Requirements(scripts=['./helper1.py'])\n\n    # using the AcumosSession created earlier:\n    session.push(model, 'my-model', reqs)\n    session.dump(model, 'my-model', '~/', reqs)  # creates ~/my-model\n\nAlternatively, all Python scripts within ``model_workspace/`` could be included\nusing:\n\n.. code:: python\n\n    reqs = Requirements(scripts=['.'])\n\nCustom Packages\n---------------\n\nCustom packages can be included by giving ``Requirements`` a sequence of paths to\nPython packages, i.e. directories with an ``__init__.py`` file. Assuming that the\npackage ``~/repos/my_pkg`` contains:\n\n::\n\n    my_pkg/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 bar.py\n    \u2514\u2500\u2500 foo.py\n\nthen you can bundle ``my_pkg`` with your model like so:\n\n.. code:: python\n\n    from my_pkg.bar import do_thing\n\n    def transform(x: int) -> int:\n        '''Does the thing'''\n        return do_thing(x)\n\n    model = Model(transform=transform)\n\n    reqs = Requirements(packages=['~/repos/my_pkg'])\n\n    # using the AcumosSession created earlier:\n    session.push(model, 'my-model', reqs)\n    session.dump(model, 'my-model', '~/', reqs)  # creates ~/my-model\n\nRequirement Mapping\n-------------------\n\nPython packaging and `PyPI <https://pypi.org/>`__ aren\u2019t\nperfect, and sometimes the name of the Python package you import in your\ncode is different than the package name used to install it. One example\nof this is the ``PIL`` package, which is commonly installed using `a fork\ncalled pillow <https://pillow.readthedocs.io>`_ (i.e.\n``pip install pillow`` will provide the ``PIL`` package).\n\nTo address this inconsistency, the ``Requirements``\nclass allows you to map Python package names to PyPI package names. When\nyour model is analyzed for dependencies by ``acumos``, this mapping is\nused to ensure the correct PyPI packages will be used.\n\nIn the example below, the ``req_map`` parameter is used to declare a\nrequirements mapping from the ``PIL`` Python package to the ``pillow``\nPyPI package:\n\n.. code:: python\n\n    reqs = Requirements(req_map={'PIL': 'pillow'})\n\nDeclaring Options\n=================\n\nThe ``acumos.metadata.Options`` class is a collection of options that users may\nwish to specify along with their Acumos model. If an ``Options`` instance is not\nprovided to ``AcumosSession.push``, then default options are applied. See the\nclass docstring for more details.\n\nBelow, we demonstrate how options can be used to include additional model metadata\nand influence the behavior of the Acumos platform. For example, a license can be\nincluded with a model via the ``license`` parameter, either by providing a license\nstring or a path to a license file. Likewise, we can specify whether or not the Acumos\nplatform should eagerly build the model microservice via the ``create_microservice``\nparameter.\n\n.. code:: python\n\n    from acumos.metadata import Options\n\n    opts = Options(license=\"Apache 2.0\",       # \"./path/to/license_file\" also works\n                   create_microservice=False,  # don't build the microservice yet\n\n    session.push(model, 'my-model', options=opts)\n\nKeras and TensorFlow\n====================\n\nCheck out the Keras and TensorFlow examples in the ``examples/`` directory of\nthe `Acumos Python client repository <https://gerrit.acumos.org/r/gitweb?p=acumos-python-client.git;a=summary>`__.\n\nTesting Models\n==============\n\nThe ``acumos.modeling.Model`` class wraps your custom functions and\nproduces corresponding input and output types. This section shows how to\naccess those types for the purpose of testing. For simplicity, we\u2019ll\ncreate a model using the ``add_numbers`` function again:\n\n.. code:: python\n\n    def add_numbers(x: int, y: int) -> int:\n        '''Returns the sum of x and y'''\n        return x + y\n\n    model = Model(add=add_numbers)\n\nThe ``model`` object now has an ``add`` attribute, which acts as a\nwrapper around ``add_numbers``. The ``add_numbers`` function can be\ninvoked like so:\n\n.. code:: python\n\n    result = model.add.inner(1, 2)\n    print(result)  # 3\n\nThe ``model.add`` object also has a corresponding *wrapped* function\nthat is generated by ``acumos.modeling.Model``. The wrapped function is\nthe primary way your model will be used within Acumos.\n\nWe can access the ``input_type`` and ``output_type`` attributes to test\nthat the function works as expected:\n\n.. code:: python\n\n    AddIn = model.add.input_type\n    AddOut = model.add.output_type\n\n    add_in = AddIn(1, 2)\n    print(add_in)  # AddIn(x=1, y=2)\n\n    add_out = AddOut(3)\n    print(add_out)  # AddOut(value=3)\n\n    model.add.wrapped(add_in) == add_out  # True\n\nMore Examples\n=============\n\nBelow are some additional function examples. Note how ``numpy`` types\ncan even be used in type hints, as shown in the ``numpy_sum`` function.\n\n.. code:: python\n\n    from collections import Counter\n    import numpy as np\n\n    def list_sum(x: List[int]) -> int:\n        '''Computes the sum of a sequence of integers'''\n        return sum(x)\n\n    def numpy_sum(x: List[np.int32]) -> np.int32:\n        '''Uses numpy to compute a vectorized sum over x'''\n        return np.sum(x)\n\n    def count_strings(x: List[str]) -> Dict[str, int]:\n        '''Returns a count mapping from a sequence of strings'''\n        return Counter(x)\n\n.. ===============LICENSE_START=======================================================\n.. Acumos CC-BY-4.0\n.. ===================================================================================\n.. Copyright (C) 2017-2018 AT&T Intellectual Property & Tech Mahindra. All rights reserved.\n.. ===================================================================================\n.. This Acumos documentation file is distributed by AT&T and Tech Mahindra\n.. under the Creative Commons Attribution 4.0 International License (the \"License\");\n.. you may not use this file except in compliance with the License.\n.. You may obtain a copy of the License at\n..\n..      http://creativecommons.org/licenses/by/4.0\n..\n.. This file is distributed on an \"AS IS\" BASIS,\n.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n.. See the License for the specific language governing permissions and\n.. limitations under the License.\n.. ===============LICENSE_END=========================================================\n\n==================================\nAcumos Python Client Release Notes\n==================================\n\nv0.9.4, 05 April 2020\n=====================\n\n* give image tag URL from python client 'ACUMOS-3956 <https://jira.acumos.org/browse/ACUMOS-3961>'_\n\nv0.9.3, 30 Mar 2020\n===================\n\n* Modify unstructured type section in pypi 'ACUMOS-3956 <https://jira.acumos.org/browse/ACUMOS-3956>'_\n* Raise an Error when using asymetric type 'ACUMOS-3956 <https://jira.acumos.org/browse/ACUMOS-3956>'_\n\nv0.9.2, 31 Jan 2020\n===================\n\n* remove support for python 3.5 `Gerrit-6275 <https://gerrit.acumos.org/r/c/acumos-python-client/+/6275>`_\n\nv0.9.1\n======\n\n* add raw format support `ACUMOS-2712 <https://jira.acumos.org/browse/ACUMOS-2712>`_\n* publish content type for long description `Gerrit-5504 <https://gerrit.acumos.org/r/c/acumos-python-client/+/5504>`_\n\nv0.8.0\n======\n(This is the recommended version for the Clio release)\n\n-  Enhancements\n\n   - Users may now specify additional options when pushing their Acumos model. See the options section in the tutorial for more information.\n   - ``acumos`` now supports Keras models built with ``tensorflow.keras``\n\n-  Support changes\n\n   - ``acumos`` no longer supports Python 3.4\n\n\nv0.7.2\n======\n\n-  Bug fixes\n\n   - The deprecated authentication API is now considered optional\n   - A more portable path solution is now used when saving models, to avoid issues with models developed in Windows\n\n\nv0.7.1\n======\n\n-  Authentication\n\n   - Username and password authentication has been deprecated\n   - Users are now interactively prompted for an onboarding token, as opposed to a username and password\n\nv0.7.0\n======\n\n-  Requirements\n\n   - Python script dependencies can now be specified using a Requirements object\n   - Python script dependencies found during the introspection stage are now included with the model\n\nv0.6.5\n======\n\n-  Bug fixes\n\n   - Don't attempt to use an empty auth token (avoids blank strings to be set in environment)\n\nv0.6.4\n======\n\n-  Bug fixes\n\n   - The normalized path of the system base prefix is now used for identifying stdlib packages\n\nv0.6.3\n======\n\n-  Bug fixes\n\n   - Improved dependency inspection when using a virtualenv\n   - Removed custom packages from model metadata, as it caused image build failures\n   - Fixed Python 3.5.2 ordering bug in wrapped model usage\n\nv0.6.2\n======\n\n-  TensorFlow\n\n   - Fixed a serialization issue that occurred when using a frozen graph\n\nv0.6.1\n======\n\n-  Model upload\n\n   - The JWT is now cleared immediately after a failed upload\n   - Additional HTTP information is now included in the error message\n\nv0.6.0\n======\n\n-  Authentication token\n\n   -  A new environment variable ``ACUMOS_TOKEN`` can be used to short-circuit\n      the authentication process\n\n-  Extra headers\n\n   -  ``AcumosSession.push`` now accepts an optional ``extra_headers`` argument,\n      which will allow users and systems to include additional information when\n      pushing models to the onboarding server\n\nv0.5.0\n======\n\n-  Modeling\n\n   -  Python 3.6 NamedTuple syntax support now tested\n   -  User documentation includes example of new NamedTuple syntax\n\n-  Model wrapper\n\n   -  Model wrapper now has APIs for consuming and producing Python\n      dicts and JSON strings\n\n-  Protobuf and protoc\n\n   -  An explicit check for protoc is now made, which raises a more\n      informative error message\n   -  User documentation is more clear about dependence on protoc, and\n      provides an easier way to install protoc via Anaconda\n\n-  Keras\n\n   -  The active keras backend is now included as a tracked module\n   -  keras_contrib layers are now supported\n\nv0.4.0\n======\n\n-  Replaced library-specific onboarding functions with \u201cnew-style\u201d\n   models\n\n   -  Support for arbitrary Python functions using type hints\n   -  Support for custom user-defined types\n   -  Support for TensorFlow models\n   -  Improved dependency introspection\n   -  Improved object serialization mechanisms\n\n.. ===============LICENSE_START=======================================================\n.. Acumos CC-BY-4.0\n.. ===================================================================================\n.. Copyright (C) 2017-2018 AT&T Intellectual Property & Tech Mahindra. All rights reserved.\n.. ===================================================================================\n.. This Acumos documentation file is distributed by AT&T and Tech Mahindra\n.. under the Creative Commons Attribution 4.0 International License (the \"License\");\n.. you may not use this file except in compliance with the License.\n.. You may obtain a copy of the License at\n..\n..      http://creativecommons.org/licenses/by/4.0\n..\n.. This file is distributed on an \"AS IS\" BASIS,\n.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n.. See the License for the specific language governing permissions and\n.. limitations under the License.\n.. ===============LICENSE_END=========================================================\n\n====================================\nAcumos Python Client Developer Guide\n====================================\n\nTesting\n=======\n\nWe use a combination of ``tox``, ``pytest``, and ``flake8`` to test\n``acumos``. Code which is not PEP8 compliant (aside from E501) will be\nconsidered a failing test. You can use tools like ``autopep8`` to\n\u201cclean\u201d your code as follows:\n\n.. code:: bash\n\n    $ pip install autopep8\n    $ cd acumos-python-client\n    $ autopep8 -r --in-place --ignore E501 acumos/ testing/ examples/\n\nRun tox directly:\n\n.. code:: bash\n\n    $ cd acumos-python-client\n    $ export WORKSPACE=$(pwd)  # env var normally provided by Jenkins\n    $ tox\n\nYou can also specify certain tox environments to test:\n\n.. code:: bash\n\n    $ tox -e py36  # only test against Python 3.6\n    $ tox -e flake8  # only lint code\n\nPackaging\n=========\n\nThe RST files in the docs/ directory are used to publish HTML pages to\nReadTheDocs.io and to build the package long description in setup.py.\nThe symlink from the subdirectory acumos-package to the docs/ directory\nis required for the Python packaging tools.  Those tools build a source\ndistribution from files in the package root, the directory acumos-package.\nThe MANIFEST.in file directs the tools to pull files from directory docs/,\nand the symlink makes it possible because the tools only look within the\npackage root.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gerrit.acumos.org/r/gitweb?p=acumos-python-client.git", "keywords": "acumos machine learning model modeling artificial intelligence ml ai", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "acumos", "package_url": "https://pypi.org/project/acumos/", "platform": "", "project_url": "https://pypi.org/project/acumos/", "project_urls": {"Homepage": "https://gerrit.acumos.org/r/gitweb?p=acumos-python-client.git"}, "release_url": "https://pypi.org/project/acumos/0.9.4/", "requires_dist": ["protobuf", "requests", "numpy", "dill", "appdirs", "filelock", "grpcio", "Werkzeug (<1.0)", "mock", "zipp"], "requires_python": ">=3.6, <3.7", "summary": "Acumos client library for building and pushing Python models", "version": "0.9.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"acumos-python-client-user-guide\">\n<h2>Acumos Python Client User Guide</h2>\n<p><a href=\"https://jenkins.acumos.org/job/acumos-python-client-tox-verify-master/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1208b82a14c0bfc84ef8211e0c26e4d9366cf195/68747470733a2f2f6a656e6b696e732e6163756d6f732e6f72672f6275696c645374617475732f69636f6e3f6a6f623d6163756d6f732d707974686f6e2d636c69656e742d746f782d7665726966792d6d6173746572\"></a></p>\n<p><tt>acumos</tt> is a client library that allows modelers to push their Python models\nto the <a href=\"https://www.acumos.org/\" rel=\"nofollow\">Acumos platform</a>.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>You will need a Python 3.6 environment in order to install <tt>acumos</tt>.\nYou can use <a href=\"https://www.anaconda.com/download/\" rel=\"nofollow\">Anaconda</a>\n(preferred) or <a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a> to install and\nmanage Python environments.</p>\n<p>If you\u2019re new to Python and need an IDE to start developing, we\nrecommend using <a href=\"https://github.com/spyder-ide/spyder\" rel=\"nofollow\">Spyder</a> which\ncan easily be installed with Anaconda.</p>\n<p>The <tt>acumos</tt> package can be installed with pip:</p>\n<pre>pip install acumos\n</pre>\n<div id=\"protocol-buffers\">\n<h4>Protocol Buffers</h4>\n<p>The <tt>acumos</tt> package uses protocol buffers and <strong>assumes you have\nthe protobuf compiler</strong> <tt>protoc</tt> <strong>installed</strong>. Please visit the <a href=\"https://github.com/google/protobuf/releases/tag/v3.4.0\" rel=\"nofollow\">protobuf\nrepository</a>\nand install the appropriate <tt>protoc</tt> for your operating system.\nInstallation is as easy as downloading a binary release and adding it to\nyour system <tt>$PATH</tt>. This is a temporary requirement that will be\nremoved in a future version of <tt>acumos</tt>.</p>\n<p><strong>Anaconda Users</strong>: You can easily install <tt>protoc</tt> from <a href=\"https://anaconda.org/anaconda/libprotobuf\" rel=\"nofollow\">an Anaconda\npackage</a> via:</p>\n<pre>conda install -c anaconda libprotobuf\n</pre>\n</div>\n</div>\n</div>\n<div id=\"acumos-python-client-tutorial\">\n<h2>Acumos Python Client Tutorial</h2>\n<p>This tutorial provides a brief overview of <tt>acumos</tt> for creating\nAcumos models. The tutorial is meant to be followed linearly, and some\ncode snippets depend on earlier imports and objects. Full examples are\navailable in the <tt>examples/</tt> directory of the <a href=\"https://gerrit.acumos.org/r/gitweb?p=acumos-python-client.git;a=summary\" rel=\"nofollow\">Acumos Python client repository</a>.</p>\n<ol>\n<li><a href=\"#importing-acumos\" rel=\"nofollow\">Importing Acumos</a></li>\n<li><a href=\"#creating-a-session\" rel=\"nofollow\">Creating A Session</a></li>\n<li><a href=\"#a-simple-model\" rel=\"nofollow\">A Simple Model</a></li>\n<li><a href=\"#exporting-models\" rel=\"nofollow\">Exporting Models</a></li>\n<li><a href=\"#defining-types\" rel=\"nofollow\">Defining Types</a></li>\n<li><a href=\"#using-dataframes-with-scikit-learn\" rel=\"nofollow\">Using DataFrames with scikit-learn</a></li>\n<li><a href=\"#declaring-requirements\" rel=\"nofollow\">Declaring Requirements</a></li>\n<li><a href=\"#declaring-options\" rel=\"nofollow\">Declaring Options</a></li>\n<li><a href=\"#keras-and-tensorflow\" rel=\"nofollow\">Keras and TensorFlow</a></li>\n<li><a href=\"#testing-models\" rel=\"nofollow\">Testing Models</a></li>\n<li><a href=\"#more-examples\" rel=\"nofollow\">More Examples</a></li>\n</ol>\n<div id=\"importing-acumos\">\n<h3>Importing Acumos</h3>\n<p>First import the modeling and session packages:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acumos.modeling</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">create_namedtuple</span><span class=\"p\">,</span> <span class=\"n\">create_dataframe</span>\n<span class=\"kn\">from</span> <span class=\"nn\">acumos.session</span> <span class=\"kn\">import</span> <span class=\"n\">AcumosSession</span>\n</pre>\n</div>\n<div id=\"creating-a-session\">\n<h3>Creating A Session</h3>\n<p>An <tt>AcumosSession</tt> allows you to export your models to Acumos. You can\neither dump a model to disk locally, so that you can upload it via the\nAcumos website, or push the model to Acumos directly.</p>\n<p>If you\u2019d like to push directly to Acumos, create a session with the <tt>push_api</tt> argument:</p>\n<pre><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">AcumosSession</span><span class=\"p\">(</span><span class=\"n\">push_api</span><span class=\"o\">=</span><span class=\"s2\">\"https://my.acumos.instance.com/push\"</span><span class=\"p\">)</span>\n</pre>\n<p>See the onboarding page of your Acumos instance website to find the correct\n<tt>push_api</tt> URL to use.</p>\n<p>If you\u2019re only interested in dumping a model to disk, arguments aren\u2019t needed:</p>\n<pre><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">AcumosSession</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"a-simple-model\">\n<h3>A Simple Model</h3>\n<p>Any Python function can be used to define an Acumos model using <a href=\"https://docs.python.org/3/library/typing.html\" rel=\"nofollow\">Python\ntype hints</a>.</p>\n<p>Let\u2019s first create a simple model that adds two integers together.\nAcumos needs to know what the inputs and outputs of your functions are.\nWe can use the Python type annotation syntax to specify the function\nsignature.</p>\n<p>Below we define a function <tt>add_numbers</tt> with <tt>int</tt> type parameters\n<tt>x</tt> and <tt>y</tt>, and an <tt>int</tt> return type. We then build an Acumos\nmodel with an <tt>add</tt> method.</p>\n<p><strong>Note:</strong> Function\n<a href=\"https://www.python.org/dev/peps/pep-0257/\" rel=\"nofollow\">docstrings</a> are included\nwith your model and used for documentation, so be sure to include one!</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">add_numbers</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Returns the sum of x and y'''</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">=</span><span class=\"n\">add_numbers</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"exporting-models\">\n<h3>Exporting Models</h3>\n<p>We can now export our model using the <tt>AcumosSession</tt> object created\nearlier. The <tt>push</tt> and <tt>dump</tt> APIs are shown below. The <tt>dump</tt> method will\nsave the model to disk so that it can be onboarded via the Acumos website. The\n<tt>push</tt> method pushes the model directly to Acumos.</p>\n<pre><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"s1\">'my-model'</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"s1\">'my-model'</span><span class=\"p\">,</span> <span class=\"s1\">'~/'</span><span class=\"p\">)</span>  <span class=\"c1\"># creates ~/my-model</span>\n</pre>\n<p>For more information on how to onboard a dumped model via the Acumos website,\nsee the <a href=\"https://docs.acumos.org/en/latest/submodules/portal-marketplace/docs/user-guides/portal-user/portal/portal-onboarding-intro.html#on-boarding-by-web\" rel=\"nofollow\">web onboarding guide</a>.</p>\n<p><strong>Note:</strong> Pushing a model to Acumos will prompt you for an onboarding token if\nyou have not previously provided one. The interactive prompt can be avoided by\nexporting the <tt>ACUMOS_TOKEN</tt> environment variable, which corresponds to an\nauthentication token that can be found in your account settings on the Acumos\nwebsite.</p>\n</div>\n<div id=\"defining-types\">\n<h3>Defining Types</h3>\n<p>In this example, we make a model that can read binary images and output\nsome metadata about them. This model makes use of a custom type\n<tt>ImageShape</tt>.</p>\n<p>We first create a <tt>NamedTuple</tt> type called <tt>ImageShape</tt>, which is\nlike an ordinary <tt>tuple</tt> but with field accessors. We can then use\n<tt>ImageShape</tt> as the return type of <tt>get_shape</tt>. Note how\n<tt>ImageShape</tt> can be instantiated as a new object.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">PIL</span>\n\n<span class=\"n\">ImageShape</span> <span class=\"o\">=</span> <span class=\"n\">create_namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'ImageShape'</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"s1\">'width'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'height'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Returns the format of an image'''</span>\n    <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">format</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_shape</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ImageShape</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Returns the width and height of an image'''</span>\n    <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n    <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">ImageShape</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">shape</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">get_format</span><span class=\"o\">=</span><span class=\"n\">get_format</span><span class=\"p\">,</span> <span class=\"n\">get_shape</span><span class=\"o\">=</span><span class=\"n\">get_shape</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note:</strong> Starting in Python 3.6, you can alternatively use this simpler\nsyntax:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acumos.modeling</span> <span class=\"kn\">import</span> <span class=\"n\">NamedTuple</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ImageShape</span><span class=\"p\">(</span><span class=\"n\">NamedTuple</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Type representing the shape of an image'''</span>\n    <span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n</pre>\n</div>\n<div id=\"defining-unstructured-types\">\n<h3>Defining Unstructured Types</h3>\n<p>The <cite>create_namedtuple</cite> function allows us to create types with structure,\nhowever sometimes it\u2019s useful to work with unstructured data, such as plain\ntext, dictionaries or byte strings. The <cite>new_type</cite> function allows for just\nthat.</p>\n<p>For example, here\u2019s a model that takes in unstructured text, and returns the\nnumber of words in the text:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acumos.modeling</span> <span class=\"kn\">import</span> <span class=\"n\">new_type</span>\n\n<span class=\"n\">Text</span> <span class=\"o\">=</span> <span class=\"n\">new_type</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s1\">'Text'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Text</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Text</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Counts the number of words in the text'''</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">))</span>\n</pre>\n<p>By using the <cite>new_type</cite> function, you inform <cite>acumos</cite> that <cite>Text</cite> is\nunstructured, and therefore <cite>acumos</cite> will not create any structured types or\nmessages for the <cite>count</cite> function.\nVersion 0.9.x of acumos allows only the use of unstructured types in input and output of\nthe user defined function.</p>\n<p>You can use the <cite>new_type</cite> function to create dictionaries or byte string\ntype unstructured data as shown below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acumos.modeling</span> <span class=\"kn\">import</span> <span class=\"n\">new_type</span>\n\n<span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"n\">new_type</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"s1\">'Dict'</span><span class=\"p\">)</span>\n\n<span class=\"n\">Image</span> <span class=\"o\">=</span> <span class=\"n\">new_type</span><span class=\"p\">(</span><span class=\"n\">byte</span><span class=\"p\">,</span> <span class=\"s1\">'Image'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-dataframes-with-scikit-learn\">\n<h3>Using DataFrames with scikit-learn</h3>\n<p>In this example, we train a <tt>RandomForestClassifier</tt> using\n<tt><span class=\"pre\">scikit-learn</span></tt> and use it to create an Acumos model.</p>\n<p>When making machine learning models, it\u2019s common to use a dataframe data\nstructure to represent data. To make things easier, <tt>acumos</tt> can\ncreate <tt>NamedTuple</tt> types directly from <tt>pandas.DataFrame</tt> objects.</p>\n<p><tt>NamedTuple</tt> types created from <tt>pandas.DataFrame</tt> objects store\ncolumns as named attributes and preserve column order. Because\n<tt>NamedTuple</tt> types are like ordinary <tt>tuple</tt> types, the resulting\nobject can be iterated over. Thus, iterating over a <tt>NamedTuple</tt>\ndataframe object is the same as iterating over the columns of a\n<tt>pandas.DataFrame</tt>. As a consequence, note how <tt>np.column_stack</tt> can\nbe used to create a <tt>numpy.ndarray</tt> from the input <tt>df</tt>.</p>\n<p>Finally, the model returns a <tt>numpy.ndarray</tt> of <tt>int</tt> corresponding\nto predicted iris classes. The <tt>classify_iris</tt> function represents\nthis as <tt>List[int]</tt> in the signature return.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_iris</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n\n<span class=\"n\">iris</span> <span class=\"o\">=</span> <span class=\"n\">load_iris</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># here, an appropriate NamedTuple type is inferred from a pandas DataFrame</span>\n<span class=\"n\">X_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'sepal_length'</span><span class=\"p\">,</span> <span class=\"s1\">'sepal_width'</span><span class=\"p\">,</span> <span class=\"s1\">'petal_length'</span><span class=\"p\">,</span> <span class=\"s1\">'petal_width'</span><span class=\"p\">])</span>\n<span class=\"n\">IrisDataFrame</span> <span class=\"o\">=</span> <span class=\"n\">create_dataframe</span><span class=\"p\">(</span><span class=\"s1\">'IrisDataFrame'</span><span class=\"p\">,</span> <span class=\"n\">X_df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ==================================================================================</span>\n<span class=\"c1\"># # or equivalently:</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># IrisDataFrame = create_namedtuple('IrisDataFrame', [('sepal_length', List[float]),</span>\n<span class=\"c1\">#                                                     ('sepal_width', List[float]),</span>\n<span class=\"c1\">#                                                     ('petal_length', List[float]),</span>\n<span class=\"c1\">#                                                     ('petal_width', List[float])])</span>\n<span class=\"c1\"># ==================================================================================</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">classify_iris</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">IrisDataFrame</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"sd\">'''Returns an array of iris classifications'''</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">column_stack</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">classify</span><span class=\"o\">=</span><span class=\"n\">classify_iris</span><span class=\"p\">)</span>\n</pre>\n<p>Check out the <tt>sklearn</tt> examples in the examples directory for full\nrunnable scripts.</p>\n</div>\n<div id=\"declaring-requirements\">\n<h3>Declaring Requirements</h3>\n<p>If your model depends on another Python script or package that you wrote, you can\ndeclare the dependency via the <tt>acumos.metadata.Requirements</tt> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acumos.metadata</span> <span class=\"kn\">import</span> <span class=\"n\">Requirements</span>\n</pre>\n<p>Note that only pure Python is supported at this time.</p>\n<div id=\"custom-scripts\">\n<h4>Custom Scripts</h4>\n<p>Custom scripts can be included by giving <tt>Requirements</tt> a sequence of paths\nto Python scripts, or directories containing Python scripts. For example, if the\nmodel defined in <tt>model.py</tt> depended on <tt>helper1.py</tt>:</p>\n<pre>model_workspace/\n\u251c\u2500\u2500 model.py\n\u251c\u2500\u2500 helper1.py\n\u2514\u2500\u2500 helper2.py\n</pre>\n<p>this dependency could be declared like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">helper1</span> <span class=\"kn\">import</span> <span class=\"n\">do_thing</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Does the thing'''</span>\n    <span class=\"k\">return</span> <span class=\"n\">do_thing</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">transform</span><span class=\"p\">)</span>\n\n<span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"n\">Requirements</span><span class=\"p\">(</span><span class=\"n\">scripts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'./helper1.py'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># using the AcumosSession created earlier:</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"s1\">'my-model'</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"s1\">'my-model'</span><span class=\"p\">,</span> <span class=\"s1\">'~/'</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"p\">)</span>  <span class=\"c1\"># creates ~/my-model</span>\n</pre>\n<p>Alternatively, all Python scripts within <tt>model_workspace/</tt> could be included\nusing:</p>\n<pre><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"n\">Requirements</span><span class=\"p\">(</span><span class=\"n\">scripts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'.'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"custom-packages\">\n<h4>Custom Packages</h4>\n<p>Custom packages can be included by giving <tt>Requirements</tt> a sequence of paths to\nPython packages, i.e. directories with an <tt>__init__.py</tt> file. Assuming that the\npackage <tt>~/repos/my_pkg</tt> contains:</p>\n<pre>my_pkg/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 bar.py\n\u2514\u2500\u2500 foo.py\n</pre>\n<p>then you can bundle <tt>my_pkg</tt> with your model like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_pkg.bar</span> <span class=\"kn\">import</span> <span class=\"n\">do_thing</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Does the thing'''</span>\n    <span class=\"k\">return</span> <span class=\"n\">do_thing</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">transform</span><span class=\"p\">)</span>\n\n<span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"n\">Requirements</span><span class=\"p\">(</span><span class=\"n\">packages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'~/repos/my_pkg'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># using the AcumosSession created earlier:</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"s1\">'my-model'</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"s1\">'my-model'</span><span class=\"p\">,</span> <span class=\"s1\">'~/'</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"p\">)</span>  <span class=\"c1\"># creates ~/my-model</span>\n</pre>\n</div>\n<div id=\"requirement-mapping\">\n<h4>Requirement Mapping</h4>\n<p>Python packaging and <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPI</a> aren\u2019t\nperfect, and sometimes the name of the Python package you import in your\ncode is different than the package name used to install it. One example\nof this is the <tt>PIL</tt> package, which is commonly installed using <a href=\"https://pillow.readthedocs.io\" rel=\"nofollow\">a fork\ncalled pillow</a> (i.e.\n<tt>pip install pillow</tt> will provide the <tt>PIL</tt> package).</p>\n<p>To address this inconsistency, the <tt>Requirements</tt>\nclass allows you to map Python package names to PyPI package names. When\nyour model is analyzed for dependencies by <tt>acumos</tt>, this mapping is\nused to ensure the correct PyPI packages will be used.</p>\n<p>In the example below, the <tt>req_map</tt> parameter is used to declare a\nrequirements mapping from the <tt>PIL</tt> Python package to the <tt>pillow</tt>\nPyPI package:</p>\n<pre><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"n\">Requirements</span><span class=\"p\">(</span><span class=\"n\">req_map</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'PIL'</span><span class=\"p\">:</span> <span class=\"s1\">'pillow'</span><span class=\"p\">})</span>\n</pre>\n</div>\n</div>\n<div id=\"declaring-options\">\n<h3>Declaring Options</h3>\n<p>The <tt>acumos.metadata.Options</tt> class is a collection of options that users may\nwish to specify along with their Acumos model. If an <tt>Options</tt> instance is not\nprovided to <tt>AcumosSession.push</tt>, then default options are applied. See the\nclass docstring for more details.</p>\n<p>Below, we demonstrate how options can be used to include additional model metadata\nand influence the behavior of the Acumos platform. For example, a license can be\nincluded with a model via the <tt>license</tt> parameter, either by providing a license\nstring or a path to a license file. Likewise, we can specify whether or not the Acumos\nplatform should eagerly build the model microservice via the <tt>create_microservice</tt>\nparameter.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acumos.metadata</span> <span class=\"kn\">import</span> <span class=\"n\">Options</span>\n\n<span class=\"n\">opts</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">(</span><span class=\"n\">license</span><span class=\"o\">=</span><span class=\"s2\">\"Apache 2.0\"</span><span class=\"p\">,</span>       <span class=\"c1\"># \"./path/to/license_file\" also works</span>\n               <span class=\"n\">create_microservice</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>  <span class=\"c1\"># don't build the microservice yet</span>\n\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"s1\">'my-model'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">opts</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"keras-and-tensorflow\">\n<h3>Keras and TensorFlow</h3>\n<p>Check out the Keras and TensorFlow examples in the <tt>examples/</tt> directory of\nthe <a href=\"https://gerrit.acumos.org/r/gitweb?p=acumos-python-client.git;a=summary\" rel=\"nofollow\">Acumos Python client repository</a>.</p>\n</div>\n<div id=\"testing-models\">\n<h3>Testing Models</h3>\n<p>The <tt>acumos.modeling.Model</tt> class wraps your custom functions and\nproduces corresponding input and output types. This section shows how to\naccess those types for the purpose of testing. For simplicity, we\u2019ll\ncreate a model using the <tt>add_numbers</tt> function again:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">add_numbers</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Returns the sum of x and y'''</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"o\">=</span><span class=\"n\">add_numbers</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>model</tt> object now has an <tt>add</tt> attribute, which acts as a\nwrapper around <tt>add_numbers</tt>. The <tt>add_numbers</tt> function can be\ninvoked like so:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"o\">.</span><span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>  <span class=\"c1\"># 3</span>\n</pre>\n<p>The <tt>model.add</tt> object also has a corresponding <em>wrapped</em> function\nthat is generated by <tt>acumos.modeling.Model</tt>. The wrapped function is\nthe primary way your model will be used within Acumos.</p>\n<p>We can access the <tt>input_type</tt> and <tt>output_type</tt> attributes to test\nthat the function works as expected:</p>\n<pre><span class=\"n\">AddIn</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"o\">.</span><span class=\"n\">input_type</span>\n<span class=\"n\">AddOut</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"o\">.</span><span class=\"n\">output_type</span>\n\n<span class=\"n\">add_in</span> <span class=\"o\">=</span> <span class=\"n\">AddIn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">add_in</span><span class=\"p\">)</span>  <span class=\"c1\"># AddIn(x=1, y=2)</span>\n\n<span class=\"n\">add_out</span> <span class=\"o\">=</span> <span class=\"n\">AddOut</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">add_out</span><span class=\"p\">)</span>  <span class=\"c1\"># AddOut(value=3)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"o\">.</span><span class=\"n\">wrapped</span><span class=\"p\">(</span><span class=\"n\">add_in</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">add_out</span>  <span class=\"c1\"># True</span>\n</pre>\n</div>\n<div id=\"more-examples\">\n<h3>More Examples</h3>\n<p>Below are some additional function examples. Note how <tt>numpy</tt> types\ncan even be used in type hints, as shown in the <tt>numpy_sum</tt> function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">list_sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Computes the sum of a sequence of integers'''</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">numpy_sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">:</span>\n    <span class=\"sd\">'''Uses numpy to compute a vectorized sum over x'''</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_strings</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"sd\">'''Returns a count mapping from a sequence of strings'''</span>\n    <span class=\"k\">return</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"acumos-python-client-release-notes\">\n<h2>Acumos Python Client Release Notes</h2>\n<div id=\"v0-9-4-05-april-2020\">\n<h3>v0.9.4, 05 April 2020</h3>\n<ul>\n<li>give image tag URL from python client \u2018ACUMOS-3956 &lt;<a href=\"https://jira.acumos.org/browse/ACUMOS-3961\" rel=\"nofollow\">https://jira.acumos.org/browse/ACUMOS-3961</a>&gt;\u2019_</li>\n</ul>\n</div>\n<div id=\"v0-9-3-30-mar-2020\">\n<h3>v0.9.3, 30 Mar 2020</h3>\n<ul>\n<li>Modify unstructured type section in pypi \u2018ACUMOS-3956 &lt;<a href=\"https://jira.acumos.org/browse/ACUMOS-3956\" rel=\"nofollow\">https://jira.acumos.org/browse/ACUMOS-3956</a>&gt;\u2019_</li>\n<li>Raise an Error when using asymetric type \u2018ACUMOS-3956 &lt;<a href=\"https://jira.acumos.org/browse/ACUMOS-3956\" rel=\"nofollow\">https://jira.acumos.org/browse/ACUMOS-3956</a>&gt;\u2019_</li>\n</ul>\n</div>\n<div id=\"v0-9-2-31-jan-2020\">\n<h3>v0.9.2, 31 Jan 2020</h3>\n<ul>\n<li>remove support for python 3.5 <a href=\"https://gerrit.acumos.org/r/c/acumos-python-client/+/6275\" rel=\"nofollow\">Gerrit-6275</a></li>\n</ul>\n</div>\n<div id=\"v0-9-1\">\n<h3>v0.9.1</h3>\n<ul>\n<li>add raw format support <a href=\"https://jira.acumos.org/browse/ACUMOS-2712\" rel=\"nofollow\">ACUMOS-2712</a></li>\n<li>publish content type for long description <a href=\"https://gerrit.acumos.org/r/c/acumos-python-client/+/5504\" rel=\"nofollow\">Gerrit-5504</a></li>\n</ul>\n</div>\n<div id=\"v0-8-0\">\n<h3>v0.8.0</h3>\n<p>(This is the recommended version for the Clio release)</p>\n<ul>\n<li>Enhancements<ul>\n<li>Users may now specify additional options when pushing their Acumos model. See the options section in the tutorial for more information.</li>\n<li><tt>acumos</tt> now supports Keras models built with <tt>tensorflow.keras</tt></li>\n</ul>\n</li>\n<li>Support changes<ul>\n<li><tt>acumos</tt> no longer supports Python 3.4</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-7-2\">\n<h3>v0.7.2</h3>\n<ul>\n<li>Bug fixes<ul>\n<li>The deprecated authentication API is now considered optional</li>\n<li>A more portable path solution is now used when saving models, to avoid issues with models developed in Windows</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-7-1\">\n<h3>v0.7.1</h3>\n<ul>\n<li>Authentication<ul>\n<li>Username and password authentication has been deprecated</li>\n<li>Users are now interactively prompted for an onboarding token, as opposed to a username and password</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-7-0\">\n<h3>v0.7.0</h3>\n<ul>\n<li>Requirements<ul>\n<li>Python script dependencies can now be specified using a Requirements object</li>\n<li>Python script dependencies found during the introspection stage are now included with the model</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-6-5\">\n<h3>v0.6.5</h3>\n<ul>\n<li>Bug fixes<ul>\n<li>Don\u2019t attempt to use an empty auth token (avoids blank strings to be set in environment)</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-6-4\">\n<h3>v0.6.4</h3>\n<ul>\n<li>Bug fixes<ul>\n<li>The normalized path of the system base prefix is now used for identifying stdlib packages</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-6-3\">\n<h3>v0.6.3</h3>\n<ul>\n<li>Bug fixes<ul>\n<li>Improved dependency inspection when using a virtualenv</li>\n<li>Removed custom packages from model metadata, as it caused image build failures</li>\n<li>Fixed Python 3.5.2 ordering bug in wrapped model usage</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-6-2\">\n<h3>v0.6.2</h3>\n<ul>\n<li>TensorFlow<ul>\n<li>Fixed a serialization issue that occurred when using a frozen graph</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-6-1\">\n<h3>v0.6.1</h3>\n<ul>\n<li>Model upload<ul>\n<li>The JWT is now cleared immediately after a failed upload</li>\n<li>Additional HTTP information is now included in the error message</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-6-0\">\n<h3>v0.6.0</h3>\n<ul>\n<li>Authentication token<ul>\n<li>A new environment variable <tt>ACUMOS_TOKEN</tt> can be used to short-circuit\nthe authentication process</li>\n</ul>\n</li>\n<li>Extra headers<ul>\n<li><tt>AcumosSession.push</tt> now accepts an optional <tt>extra_headers</tt> argument,\nwhich will allow users and systems to include additional information when\npushing models to the onboarding server</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-5-0\">\n<h3>v0.5.0</h3>\n<ul>\n<li>Modeling<ul>\n<li>Python 3.6 NamedTuple syntax support now tested</li>\n<li>User documentation includes example of new NamedTuple syntax</li>\n</ul>\n</li>\n<li>Model wrapper<ul>\n<li>Model wrapper now has APIs for consuming and producing Python\ndicts and JSON strings</li>\n</ul>\n</li>\n<li>Protobuf and protoc<ul>\n<li>An explicit check for protoc is now made, which raises a more\ninformative error message</li>\n<li>User documentation is more clear about dependence on protoc, and\nprovides an easier way to install protoc via Anaconda</li>\n</ul>\n</li>\n<li>Keras<ul>\n<li>The active keras backend is now included as a tracked module</li>\n<li>keras_contrib layers are now supported</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"v0-4-0\">\n<h3>v0.4.0</h3>\n<ul>\n<li>Replaced library-specific onboarding functions with \u201cnew-style\u201d\nmodels<ul>\n<li>Support for arbitrary Python functions using type hints</li>\n<li>Support for custom user-defined types</li>\n<li>Support for TensorFlow models</li>\n<li>Improved dependency introspection</li>\n<li>Improved object serialization mechanisms</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"acumos-python-client-developer-guide\">\n<h2>Acumos Python Client Developer Guide</h2>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>We use a combination of <tt>tox</tt>, <tt>pytest</tt>, and <tt>flake8</tt> to test\n<tt>acumos</tt>. Code which is not PEP8 compliant (aside from E501) will be\nconsidered a failing test. You can use tools like <tt>autopep8</tt> to\n\u201cclean\u201d your code as follows:</p>\n<pre>$ pip install autopep8\n$ <span class=\"nb\">cd</span> acumos-python-client\n$ autopep8 -r --in-place --ignore E501 acumos/ testing/ examples/\n</pre>\n<p>Run tox directly:</p>\n<pre>$ <span class=\"nb\">cd</span> acumos-python-client\n$ <span class=\"nb\">export</span> <span class=\"nv\">WORKSPACE</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>  <span class=\"c1\"># env var normally provided by Jenkins\n</span>$ tox\n</pre>\n<p>You can also specify certain tox environments to test:</p>\n<pre>$ tox -e py36  <span class=\"c1\"># only test against Python 3.6\n</span>$ tox -e flake8  <span class=\"c1\"># only lint code</span>\n</pre>\n</div>\n<div id=\"packaging\">\n<h3>Packaging</h3>\n<p>The RST files in the docs/ directory are used to publish HTML pages to\nReadTheDocs.io and to build the package long description in setup.py.\nThe symlink from the subdirectory acumos-package to the docs/ directory\nis required for the Python packaging tools.  Those tools build a source\ndistribution from files in the package root, the directory acumos-package.\nThe MANIFEST.in file directs the tools to pull files from directory docs/,\nand the symlink makes it possible because the tools only look within the\npackage root.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6967664, "releases": {"0.5.3": [{"comment_text": "", "digests": {"md5": "35a2a2246455ac4eedf3bd46660f5144", "sha256": "17fc94b607f5707a37f0a923d6dce922c49889b12c272a1d55e61a7233e3deed"}, "downloads": -1, "filename": "acumos-0.5.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "35a2a2246455ac4eedf3bd46660f5144", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36113, "upload_time": "2018-03-09T21:46:17", "upload_time_iso_8601": "2018-03-09T21:46:17.910205Z", "url": "https://files.pythonhosted.org/packages/79/eb/c1a790684c0e1bbdfbe426ddd906dd44f5847cb57d8834736e550ad00c3e/acumos-0.5.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8a22e14bc33bcdd3469611002d618ff", "sha256": "3b9b1bf49d31e9621d47fe404f55f564dfb77e6440609fea2ba7be9b0917981b"}, "downloads": -1, "filename": "acumos-0.5.3.tar.gz", "has_sig": false, "md5_digest": "f8a22e14bc33bcdd3469611002d618ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27822, "upload_time": "2018-03-09T21:46:19", "upload_time_iso_8601": "2018-03-09T21:46:19.720193Z", "url": "https://files.pythonhosted.org/packages/3f/b5/5368c4cbb5f1f9dcf3d40fa12421ddbce2490ad066dc2aad9b15dd6c1b94/acumos-0.5.3.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "5e7e289e32509f352d0ef18ac66a293f", "sha256": "3ede69dc6cdb21caa42f69af146667d59676efd97feed96e145ba5f37f5ee167"}, "downloads": -1, "filename": "acumos-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5e7e289e32509f352d0ef18ac66a293f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36934, "upload_time": "2018-03-21T23:12:34", "upload_time_iso_8601": "2018-03-21T23:12:34.650655Z", "url": "https://files.pythonhosted.org/packages/21/e2/039d4478a0ff6c982d724df3bcdef16fcebf91df6d60ebd2f6bee59f6345/acumos-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4939db9471f45bf60ab27a931366d88e", "sha256": "d58495dd72db0093d2311eeb03c54cd59e80317c67b589b7db52a3052eca8212"}, "downloads": -1, "filename": "acumos-0.6.0.tar.gz", "has_sig": false, "md5_digest": "4939db9471f45bf60ab27a931366d88e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28676, "upload_time": "2018-03-21T23:12:36", "upload_time_iso_8601": "2018-03-21T23:12:36.378769Z", "url": "https://files.pythonhosted.org/packages/a7/21/b80eb23a74be5e543a7b78da5fcdcb3a3c18bb989ab8398222bf0d1b5332/acumos-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "c08ccae93708afaed5211a2d465839c5", "sha256": "9c3f6200debd018779e529b936685c1d24821c2d59bf02d25fa5c3ec84ac4bda"}, "downloads": -1, "filename": "acumos-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c08ccae93708afaed5211a2d465839c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37160, "upload_time": "2018-03-23T20:16:19", "upload_time_iso_8601": "2018-03-23T20:16:19.751829Z", "url": "https://files.pythonhosted.org/packages/fb/d1/f0cfcf9380ad4e637699f4be2a2ea7547bfb91d4835cafe60444ac34c9b9/acumos-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "978c00d8c69fdb0e08fe8e52165d99d7", "sha256": "d07cbc02193165b1d0cd12163bb2b1aa2ad8cc427a4c9d0d4dc41e199f20492e"}, "downloads": -1, "filename": "acumos-0.6.1.tar.gz", "has_sig": false, "md5_digest": "978c00d8c69fdb0e08fe8e52165d99d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29254, "upload_time": "2018-03-23T20:16:20", "upload_time_iso_8601": "2018-03-23T20:16:20.667655Z", "url": "https://files.pythonhosted.org/packages/74/d0/3a4d57bbe5d02ad652e7102b86b1c9ac1b006f695ad677c542fdfd5e3d1d/acumos-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "36d87223553ba9acb190aac8acdc0a30", "sha256": "f66d59f5ce518f75dea7eab4b7deac87cb8cc34c276f707297cd35ba1d94bf9f"}, "downloads": -1, "filename": "acumos-0.6.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "36d87223553ba9acb190aac8acdc0a30", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30323, "upload_time": "2018-04-06T20:19:59", "upload_time_iso_8601": "2018-04-06T20:19:59.179045Z", "url": "https://files.pythonhosted.org/packages/27/bf/162ef72d58a921c8f0ab0e25e0bbbd6cedd8cc86d5c469c3d99e401ef345/acumos-0.6.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eed9886623d6a8c1cda826ad08629204", "sha256": "b88165733b51c7f0b192875f068212c4cc766f488abc94973a94aff254ea23d6"}, "downloads": -1, "filename": "acumos-0.6.2.tar.gz", "has_sig": false, "md5_digest": "eed9886623d6a8c1cda826ad08629204", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29266, "upload_time": "2018-04-06T20:20:00", "upload_time_iso_8601": "2018-04-06T20:20:00.200898Z", "url": "https://files.pythonhosted.org/packages/ea/e1/646e37b7432bfa598814a6191cd73bc218e3a429cc6b525ed3aa91aa8d3d/acumos-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "78f330a67d739aadc2563bc6c689aaf9", "sha256": "6f78462949d20ff599311f21fd620f94b51cc8b7e085283b1d16c9572d2ed23f"}, "downloads": -1, "filename": "acumos-0.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "78f330a67d739aadc2563bc6c689aaf9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30589, "upload_time": "2018-04-27T16:34:47", "upload_time_iso_8601": "2018-04-27T16:34:47.625954Z", "url": "https://files.pythonhosted.org/packages/bd/db/1b37a6f6d41d5a2f1fe901a80a9ac6a37b5acb29301ab4f547a3c515a704/acumos-0.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "573794fa2a78699eeb96996826401f19", "sha256": "4f87d08a0e0a3bc3fc1da164b21c8be6398e6d60f379cab9f4435efa64498786"}, "downloads": -1, "filename": "acumos-0.6.3.tar.gz", "has_sig": false, "md5_digest": "573794fa2a78699eeb96996826401f19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29569, "upload_time": "2018-04-27T16:34:48", "upload_time_iso_8601": "2018-04-27T16:34:48.750059Z", "url": "https://files.pythonhosted.org/packages/2f/c8/632be135488cdc39e3cf229335e682522bc802b601e576ad2827ccbae241/acumos-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "1ac5b525135af642df3f34f5230d2c1b", "sha256": "192a8c652f57f20f24485b9dd68e3a2ad087e37462e06d97fef3984fca16f1c0"}, "downloads": -1, "filename": "acumos-0.6.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ac5b525135af642df3f34f5230d2c1b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30634, "upload_time": "2018-05-31T19:27:50", "upload_time_iso_8601": "2018-05-31T19:27:50.280683Z", "url": "https://files.pythonhosted.org/packages/e1/b0/3cc0d6417f794e93058eb68983468be8da22d3e16e3f9834acd29604a8c2/acumos-0.6.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d769aebf7df551ab3f51b7b0f0622165", "sha256": "433c01301b30d18527b5a7055bde7435f3bac74c68650bbfa33af32cf52c90d7"}, "downloads": -1, "filename": "acumos-0.6.4.tar.gz", "has_sig": false, "md5_digest": "d769aebf7df551ab3f51b7b0f0622165", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29693, "upload_time": "2018-05-31T19:27:51", "upload_time_iso_8601": "2018-05-31T19:27:51.204159Z", "url": "https://files.pythonhosted.org/packages/54/da/f5c06c4ee2ee53b12df92dc3cf5dc10874cf69594c2166dba2d0490d17be/acumos-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "3718f873e1f573fcfff26cde72622d7c", "sha256": "d3996cc44288d6e3c800230ff6af6601be7931327ccf8f22d7baa1d925430d22"}, "downloads": -1, "filename": "acumos-0.6.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3718f873e1f573fcfff26cde72622d7c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30673, "upload_time": "2018-06-15T20:45:40", "upload_time_iso_8601": "2018-06-15T20:45:40.380016Z", "url": "https://files.pythonhosted.org/packages/8d/c2/837e1a6599905a9d4cffd3efaa04a1ea3fa78a86ac7f3d8dcf7f671fbc63/acumos-0.6.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "960dc8091a89e021ee013a1b3c947376", "sha256": "1112beb615bc4aacce8ddc6be4bb3fc690e65a4c082a77b35bc57cc729fc0aed"}, "downloads": -1, "filename": "acumos-0.6.5.tar.gz", "has_sig": false, "md5_digest": "960dc8091a89e021ee013a1b3c947376", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29795, "upload_time": "2018-06-15T20:45:41", "upload_time_iso_8601": "2018-06-15T20:45:41.667179Z", "url": "https://files.pythonhosted.org/packages/da/b2/f9ed4247a6ab61011d061e62e41bab7164c7ebb6f4d99b60927892a50019/acumos-0.6.5.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "5e19fe5aa05368b98057dc2b182ca5bc", "sha256": "1d56d271fa775d0803bbd1dfe2df505860aeb982f1ccc30f5582ccf761e88c8c"}, "downloads": -1, "filename": "acumos-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5e19fe5aa05368b98057dc2b182ca5bc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31719, "upload_time": "2018-06-20T14:19:48", "upload_time_iso_8601": "2018-06-20T14:19:48.742561Z", "url": "https://files.pythonhosted.org/packages/9b/cb/192af4f59ba4d441ab77307aa6329eee0230336232e7b2df7c24263e4f34/acumos-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1ccf4a85253172a8670db4ba56986cd", "sha256": "fe70f26a41a4707e4a75e26ee08dcd2fd8b3428c86f4f7c3f5c58ab1e88286e4"}, "downloads": -1, "filename": "acumos-0.7.0.tar.gz", "has_sig": false, "md5_digest": "e1ccf4a85253172a8670db4ba56986cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31159, "upload_time": "2018-06-20T14:19:49", "upload_time_iso_8601": "2018-06-20T14:19:49.963741Z", "url": "https://files.pythonhosted.org/packages/bf/64/488fb619d08c73128cf5063f52fff39856cea0d288cf2edc6707a61b469a/acumos-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "22db5b6424fc5a046f44ff112a84617d", "sha256": "dd77b1bf700d48bef3b23eec38bbd079d3e357c47c2e574b9c2c51dd54c61bce"}, "downloads": -1, "filename": "acumos-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "22db5b6424fc5a046f44ff112a84617d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 39341, "upload_time": "2018-10-17T20:22:34", "upload_time_iso_8601": "2018-10-17T20:22:34.373046Z", "url": "https://files.pythonhosted.org/packages/eb/54/d9f0deb8d6afec70b88359c545ab58ecb9b26ea8db12edfb13f119fbed1c/acumos-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be0b2dd4e68e2b429811d2ea2688151e", "sha256": "d023ceac5f346d7081a4063813afab837288daafe5890d27aa61963651035e19"}, "downloads": -1, "filename": "acumos-0.7.1.tar.gz", "has_sig": false, "md5_digest": "be0b2dd4e68e2b429811d2ea2688151e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 31509, "upload_time": "2018-10-17T20:22:36", "upload_time_iso_8601": "2018-10-17T20:22:36.089559Z", "url": "https://files.pythonhosted.org/packages/99/6b/1f2e32782436611b402900a4ccf45afb3c8b6da29d155a789fc873b4d7f0/acumos-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "a30e6731f719b2308bb978b08b696d32", "sha256": "86cec04349c0977e1be746ac3ad1b8b1900c7d2272bb6b8a9c1ac5b235b8d341"}, "downloads": -1, "filename": "acumos-0.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a30e6731f719b2308bb978b08b696d32", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 39590, "upload_time": "2019-01-19T02:55:06", "upload_time_iso_8601": "2019-01-19T02:55:06.096909Z", "url": "https://files.pythonhosted.org/packages/26/7d/0fae8018745aaf81f897de3fd64e75accb8c3d7383a1b576c8b10b009036/acumos-0.7.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "978d41d1b5bb30e8c80e394f5465aa9b", "sha256": "d05fd160041eb7f9ddb534841fa39c622bbd82a6bf7a9fe4e9a6e4664e33a4a1"}, "downloads": -1, "filename": "acumos-0.7.2.tar.gz", "has_sig": false, "md5_digest": "978d41d1b5bb30e8c80e394f5465aa9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 31800, "upload_time": "2019-01-19T02:55:07", "upload_time_iso_8601": "2019-01-19T02:55:07.377855Z", "url": "https://files.pythonhosted.org/packages/90/a0/681587481abda2be0ef2f584aa768486af202873ef9afb989b25ced5e964/acumos-0.7.2.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "7308b83df2caae2ee207a5f54feb5d7a", "sha256": "bc4360d4ddc715c8aa092bfde2996f94a8a45797f1a4ee445a24fe938f0d9dee"}, "downloads": -1, "filename": "acumos-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7308b83df2caae2ee207a5f54feb5d7a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5, <3.7", "size": 40928, "upload_time": "2019-04-22T16:03:01", "upload_time_iso_8601": "2019-04-22T16:03:01.204510Z", "url": "https://files.pythonhosted.org/packages/26/5c/8291481e0a5b4e5e2129c0f4d852eac852023bbf995f9f16e9d4bc4de5ba/acumos-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cf9d87cf280745542e1da1418eca71c", "sha256": "6986c0cad04fc1cf0364c058dd45f522b0ffb5c35fba492eb459ddb94bcff2fd"}, "downloads": -1, "filename": "acumos-0.8.0.tar.gz", "has_sig": false, "md5_digest": "9cf9d87cf280745542e1da1418eca71c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.7", "size": 34075, "upload_time": "2019-04-22T16:03:02", "upload_time_iso_8601": "2019-04-22T16:03:02.910140Z", "url": "https://files.pythonhosted.org/packages/77/29/1af417848399a233d765062fb02f8a76cee61b460138913cedb0d94974ff/acumos-0.8.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "a7512cef39c413d5a773b86d1c7fafb9", "sha256": "7bd00a917d6aa82857530c7ded3ba790119cfeb46faf82c21033d741e3085369"}, "downloads": -1, "filename": "acumos-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a7512cef39c413d5a773b86d1c7fafb9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5, <3.7", "size": 35003, "upload_time": "2020-01-08T14:16:50", "upload_time_iso_8601": "2020-01-08T14:16:50.029265Z", "url": "https://files.pythonhosted.org/packages/34/67/10fdd24ba2c00fdca7d9930ac7b6853f91140bff4e74dfce5feb0b39a9e5/acumos-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ffdab2947799eb5867c866b29286179", "sha256": "977e8b2db27e9498e7229723b1fd43a7564f09f8d0e23864035b6898ec061bc1"}, "downloads": -1, "filename": "acumos-0.9.1.tar.gz", "has_sig": false, "md5_digest": "0ffdab2947799eb5867c866b29286179", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.7", "size": 37131, "upload_time": "2020-01-08T14:16:52", "upload_time_iso_8601": "2020-01-08T14:16:52.318780Z", "url": "https://files.pythonhosted.org/packages/2a/1d/0283c3e77d97dd9d1454a9ced72dbaedc21e01c0b4dff52eac6ec0e81667/acumos-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "afa5f30648adeccdde79257e0a06438d", "sha256": "ea0362c67af9a02b85bea3e5af7599d3869d81a6c51ce1381dcb62cf014f5563"}, "downloads": -1, "filename": "acumos-0.9.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "afa5f30648adeccdde79257e0a06438d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <3.7", "size": 34493, "upload_time": "2020-02-20T17:19:11", "upload_time_iso_8601": "2020-02-20T17:19:11.408122Z", "url": "https://files.pythonhosted.org/packages/84/b6/655fa38fd614bea9427d91d678171cbd5aefbaa8d683c8c7d5b479c28484/acumos-0.9.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00d1628fbea6abafaa02d33400a4eedf", "sha256": "f049bcb8f692bf0b1d3f2ca3a87cc81ff53a49b05a0751e4cc90e35bc3fdf4ef"}, "downloads": -1, "filename": "acumos-0.9.2.tar.gz", "has_sig": false, "md5_digest": "00d1628fbea6abafaa02d33400a4eedf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.7", "size": 38227, "upload_time": "2020-02-20T17:19:12", "upload_time_iso_8601": "2020-02-20T17:19:12.960458Z", "url": "https://files.pythonhosted.org/packages/a1/25/211da2914c8c8a4864fc0254cf9be3fb70950da009a76d0c37bd53e0242f/acumos-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "21ed7aead39260155d7addfb5de76b5e", "sha256": "944fa3a708e8536b51fd295574fa95cdf6c8544da8a4e9bcd11bff841bad2f1c"}, "downloads": -1, "filename": "acumos-0.9.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "21ed7aead39260155d7addfb5de76b5e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <3.7", "size": 34713, "upload_time": "2020-04-01T10:00:45", "upload_time_iso_8601": "2020-04-01T10:00:45.491653Z", "url": "https://files.pythonhosted.org/packages/14/b6/281fbb8e499d9a37575668f91b559ece48495ed7d0b81da7fc4dfc134253/acumos-0.9.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc6fbc20762b8e0ae2a75ad54e7178c6", "sha256": "47de2ecd3ca2df122e6ba10eea2e6e9ab336505c1c99bc17cee4109678d595c2"}, "downloads": -1, "filename": "acumos-0.9.3.tar.gz", "has_sig": false, "md5_digest": "dc6fbc20762b8e0ae2a75ad54e7178c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.7", "size": 39064, "upload_time": "2020-04-01T10:00:47", "upload_time_iso_8601": "2020-04-01T10:00:47.480635Z", "url": "https://files.pythonhosted.org/packages/3f/9e/3abdb0356273ee87c8ca3b572607ad379e6471f66ffd13d15b7f817cf006/acumos-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "d9692e8949c746827c565d8a7faa3832", "sha256": "dd1262a98ca04dda61c3e8487df08e8d4d290176c926460fa1a2f843eb838ae6"}, "downloads": -1, "filename": "acumos-0.9.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d9692e8949c746827c565d8a7faa3832", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <3.7", "size": 34909, "upload_time": "2020-04-07T08:52:20", "upload_time_iso_8601": "2020-04-07T08:52:20.024082Z", "url": "https://files.pythonhosted.org/packages/c9/db/44bb6e589e2480fddf66076eb186b7dedd69e3981bd39159032f1b0fbe8b/acumos-0.9.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1c08ca23b5b4c5375e6eedc755c4722", "sha256": "6a37f52a6ce02e2bf1014bb443dd4ffc36fcfb2221836972e16ce3b2b8e22f5e"}, "downloads": -1, "filename": "acumos-0.9.4.tar.gz", "has_sig": false, "md5_digest": "c1c08ca23b5b4c5375e6eedc755c4722", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.7", "size": 39323, "upload_time": "2020-04-07T08:52:21", "upload_time_iso_8601": "2020-04-07T08:52:21.905199Z", "url": "https://files.pythonhosted.org/packages/e3/f2/74b7a0155574512eb5a4d5886adeae9c3c1fd9d0259eb5f1ad29d7b31be7/acumos-0.9.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d9692e8949c746827c565d8a7faa3832", "sha256": "dd1262a98ca04dda61c3e8487df08e8d4d290176c926460fa1a2f843eb838ae6"}, "downloads": -1, "filename": "acumos-0.9.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d9692e8949c746827c565d8a7faa3832", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <3.7", "size": 34909, "upload_time": "2020-04-07T08:52:20", "upload_time_iso_8601": "2020-04-07T08:52:20.024082Z", "url": "https://files.pythonhosted.org/packages/c9/db/44bb6e589e2480fddf66076eb186b7dedd69e3981bd39159032f1b0fbe8b/acumos-0.9.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1c08ca23b5b4c5375e6eedc755c4722", "sha256": "6a37f52a6ce02e2bf1014bb443dd4ffc36fcfb2221836972e16ce3b2b8e22f5e"}, "downloads": -1, "filename": "acumos-0.9.4.tar.gz", "has_sig": false, "md5_digest": "c1c08ca23b5b4c5375e6eedc755c4722", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.7", "size": 39323, "upload_time": "2020-04-07T08:52:21", "upload_time_iso_8601": "2020-04-07T08:52:21.905199Z", "url": "https://files.pythonhosted.org/packages/e3/f2/74b7a0155574512eb5a4d5886adeae9c3c1fd9d0259eb5f1ad29d7b31be7/acumos-0.9.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:13 2020"}