{"info": {"author": "Jens Diemer", "author_email": "dwload_server@jensdiemer.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: MacOS X", "Environment :: Other Environment", "Environment :: Win32 (MS Windows)", "Environment :: X11 Applications", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Assemblers", "Topic :: Software Development :: Testing", "Topic :: System :: Emulators"], "description": "=============\nDWLOAD Server\n=============\n\nDWLOAD server implemented in Python (OpenSource, GPL v3 or above).\n\n--------\nfeatures\n--------\n\nHere a feature list:\n\n* load/save files via DWLOAD\n\n* on-the-fly converting ASCII BASIC listing (see below)\n\n* dynamic \"AUTOLOAD.DWL\" (see below)\n\n* backup all files on save\n\n* Support `USB Adapter <http://archive.worldofdragon.org/index.php?title=Dragon_32/64_Drivewire_Adapter>`_ and `Becker TCP/IP Interface <http://www.6809.org.uk/xroar/doc/xroar.shtml#Becker-port>`_.\n\ncurrent state\n=============\n\nOnly tested with Python 3 !\n\nTested DWEEBS:\n\n+------------+-------------------------------+------------------------------------------------+\n| DWEEB      | example                       | Description                                    |\n+============+===============================+================================================+\n| **DLOAD**  | ``DLOAD``                     | Load ``AUTOLOAD.DWL`` (Used on Dragon startup) |\n+------------+-------------------------------+------------------------------------------------+\n| **SAVE**   | ``DLOAD\"SAVE\"\"MYFILE.BAS\"``   | Save BASIC listing                             |\n+------------+-------------------------------+------------------------------------------------+\n| **RESAVE** | ``DLOAD\"RESAVE\"\"MYFILE.BAS\"`` | Save BASIC listing                             |\n+------------+-------------------------------+------------------------------------------------+\n\nImplemented DriveWire Transactions:\n\n+-----+-----+-------------------+--------------------------------------------------------------------------+\n| hex | dez | DW name           | Description                                                              |\n+=====+=====+===================+==========================================================================+\n| $01 | 1   | OP_NAMEOBJ_MOUNT  | Mount a file to a virtual drive number                                   |\n+-----+-----+-------------------+--------------------------------------------------------------------------+\n| $02 | 2   | OP_NAMEOBJ_CREATE | (Does in this implementation the same as OP_NAMEOBJ_MOUNT)               |\n+-----+-----+-------------------+--------------------------------------------------------------------------+\n| $d2 | 210 | OP_READEX         | Send 256 bytes sector from the DWLOAD server to the client               |\n+-----+-----+-------------------+--------------------------------------------------------------------------+\n| $57 | 87  | OP_WRITE          | Write 256 bytes sector of data from the client into a file on the server |\n+-----+-----+-------------------+--------------------------------------------------------------------------+\n\nTODO\n====\n\n* enhance ``AUTOLOAD.DWL.py``, see: `http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4977 <http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4977>`_\n\n* compare checksum\n\n* add support for Python 2.7\n\n* write unittests\n\npyscripts\n=========\n\nThere is a general machanism to generate DLOAD responses via Python:\n\n* Store in server root a python script, e.g.: \"FOO.BAR.py\"\n\n* DLOAD the file (without .py extension) on client, e.g.: ``DLOAD\"FOO.BAR\"``\n\nThe script will be called via subprocess and it must write the Dragon DOS binary data back to stdout.\n\nCurrently there is only one *pyscript* file: ``AUTOLOAD.DWL.py`` (see below)\n\ndynamic \"AUTOLOAD.DWL\"\n----------------------\n\nThere exist a way to generate a dynamic DWLOAD menu.\nJust copy the file `/dwload-demo-files/AUTOLOAD.DWL.py <https://github.com/6809/DwLoadServer/blob/master/dwload-demo-files/AUTOLOAD.DWL.py>`_ into your server root.\n\nThe generated listing looks like this:\n\n::\n\n    10 CLS\n    20 PRINT\" *** DYNAMIC MENU ***  14:11:18\"\n    30 PRINT\"/HOME/JENS/DWLOAD-FILES\"\n    40 PRINT\" 0 - HEXVIEW.BAS\"\n    50 PRINT\" 1 - TEST.BAS\"\n    60 PRINT\" 2 - SAVE\"\n    70 PRINT\"PLEASE SELECT (X FOR RELOAD) !\"\n    80 A$=INKEY$:IF A$=\"\" GOTO 80\n    90 IF A$=\"X\" THEN DLOAD\n    100 IF A$=\"0\" THEN DLOAD\"HEXVIEW.BAS\"\n    110 IF A$=\"1\" THEN DLOAD\"TEST.BAS\"\n    120 IF A$=\"2\" THEN DLOAD\"SAVE\"\n    130 GOTO 10\n\ns.: `http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4977`_\n\nThis feature make the following file:\n\n+---------------------------------------------+---------------------------------+\n| `/dwload_server/hooks/dynamic_dwl.py`_      | general API to 'pyscript' files |\n+---------------------------------------------+---------------------------------+\n| `/dwload_server/pyscripts/autoload_dwl.py`_ | generates the DWLOAD menu       |\n+---------------------------------------------+---------------------------------+\n\n.. _/dwload_server/hooks/dynamic_dwl.py: https://github.com/6809/DwLoadServer/blob/master/dwload_server/hooks/dynamic_dwl.py\n.. _/dwload_server/pyscripts/autoload_dwl.py: https://github.com/6809/DwLoadServer/blob/master/dwload_server/pyscripts/autoload_dwl.py\n\non-the-fly converting ASCII BASIC listing\n=========================================\n\nThe server read/save ASCII BASIC listing and send/store them to the DWLOAD client on-the-fly.\nSo you can edit listings on your PC and try them on your Dragon without any external conventions!\n\ne.g.: save\n\n::\n\n    10 PRINT\"HELLO WORLD!\"\n    DLOAD\"SAVE\"\"HELLO.BAS\"\n    DWLOAD\n    !\n    OK\n\nThe server will create two files:\n\n+-----------+----------------------+------------------------------------------------------------------+\n| filename  | format               | description                                                      |\n+===========+======================+==================================================================+\n| HELLO.DWL | raw tokenized binary | Dragon DOS Binary Format data from the Dragon (256 Bytes padded) |\n+-----------+----------------------+------------------------------------------------------------------+\n| HELLO.BAS | ASCII listing        | on-the-fly converted ASCII BASIC listing                         |\n+-----------+----------------------+------------------------------------------------------------------+\n\ne.g. load (and execute):\n\n::\n\n    DLOAD\"HELLO.BAS\"\n    !HELLO WORLD!\n    OK\n\n(Note: the first ``!`` is from DWLOAD ROM routine)\n\nThe server will read the ``HELLO.BAS`` ASCII listing and convert is on-the-fly to the needed Dragon DOS Binary Format\nand send this back to the Dragon.\n\nThis feature make the following files:\n\n+---------------------------------------+-------------------------------------------------+\n| `/dwload_server/hooks/read_ascii.py`_ | read ASCII listing and send as binary to client |\n+---------------------------------------+-------------------------------------------------+\n| `/dwload_server/hooks/save_ascii.py`_ | save binary from client as ASCII on server      |\n+---------------------------------------+-------------------------------------------------+\n\n.. _/dwload_server/hooks/read_ascii.py: https://github.com/6809/DwLoadServer/blob/master/dwload_server/hooks/read_ascii.py\n.. _/dwload_server/hooks/save_ascii.py: https://github.com/6809/DwLoadServer/blob/master/dwload_server/hooks/save_ascii.py\n\n------------\ninstallation\n------------\n\nLinux\n=====\n\nThe is a virtualenv bootstrap file, created with `bootstrap_env <https://github.com/jedie/bootstrap_env>`_, for easy installation.\n\nGet the bootstrap file:\n\n::\n\n    /home/FooBar$ wget https://raw.githubusercontent.com/6809/DwLoadServer/master/boot_dwload_server.py\n\nThere are tree types of installation:\n\n+------------------+------------------------------------------------------------------------+\n| option           | desciption                                                             |\n+==================+========================================================================+\n| **pypi**         | use `Python Package Index`_ (for all normal user!)                     |\n+------------------+------------------------------------------------------------------------+\n| **git_readonly** | use ``git`` to get the sourcecode (for developer without write access) |\n+------------------+------------------------------------------------------------------------+\n| **dev**          | use ``git`` with write access                                          |\n+------------------+------------------------------------------------------------------------+\n\n.. _Python Package Index: http://www.python.org/pypi/\n\ne.g.:\n\n::\n\n    /home/FooBar$ python3 boot_dwload_server.py ~/DwLoadServer_env --install_type git_readonly\n\nThis creates a virtualenv in **``~/DwLoadServer_env``** and used ``git`` to checkout the needed repositories.\n\nIn this case (using --install_type=**git_readonly**) the git repository are in: **.../DwLoadServer_env/src/**\nSo you can easy update them e.g.:\n\n::\n\n    /home/FooBar$ cd ~/DwLoadServer_env/src/dwload-server\n    /home/FooBar/DwLoadServer_env/src/dwload-server$ git pull\n\nWindows\n=======\n\nThere are several ways to install the project under windows.\n\nThe following is hopeful the easiest one:\n\n* Install Python 3, e.g.: `https://www.python.org/downloads/ <https://www.python.org/downloads/>`_\n\n* Download the ``DWLOAD Server`` git snapshot from Github: `master.zip <https://github.com/6809/DwLoadServer/archive/master.zip>`_\n\n* Extract the Archive somewhere\n\n* Maybe, adjust paths in ``boot_dwload_server.cmd``\n\n* Run ``boot_dwload_server.cmd``\n\nThe default ``boot_dwload_server.cmd`` will install via ``Python Package Index`` (PyPi) into ``%APPDATA%\\DwLoadServer_env``\n\nThere are two batch files, for easy startup the server under Windows:\n\n* `/scripts/start_serial_DWLOAD_server.cmd <https://github.com/6809/DwLoadServer/blob/master/scripts/start_serial_DWLOAD_server.cmd>`_\n\n* `/scripts/start_becker_DWLOAD_server.cmd <https://github.com/6809/DwLoadServer/blob/master/scripts/start_becker_DWLOAD_server.cmd>`_\n\nCopy these files into ``%APPDATA%\\DwLoadServer_env\\`` and edit it for your needs.\nJust double click to start the server.\n\nstart by cli (windows)\n----------------------\n\nThere is a batch file to open a commandline with a activated virtualenv:\n\n* `/scripts/cmd_here.cmd <https://github.com/6809/DwLoadServer/blob/master/scripts/cmd_here.cmd>`_\n\ncopy this into ``%APPDATA%\\DwLoadServer_env\\`` and double click it ;)\n\nby hand: Start **cmd.exe** and do this:\n\n::\n\n    C:\\Windows\\system32>cd /d %APPDATA%\\DwLoadServer_env\\\n    C:\\Users\\FOO\\AppData\\Roaming\\DwLoadServer_env>call Scripts\\activate.bat\n    (DwLoadServer_env) C:\\Users\\FOO\\AppData\\Roaming\\DwLoadServer_env>\n\nSo use the DWLOAD-Server CLI, e.g:\n\n::\n\n    (DwLoadServer_env) C:\\Users\\FOO\\AppData\\Roaming\\DwLoadServer_env> python.exe -m dwload_server.dwload_server_cli --root_dir=%APPDATA%\\dwload-files\\ --log_level=10 serial --port=COM3\n\nDo see the CLI help page:\n\n::\n\n    (DwLoadServer_env) C:\\Users\\FOO\\AppData\\Roaming\\DwLoadServer_env> python.exe -m dwload_server.dwload_server_cli --help\n    \n    DWLOAD Server written in Python (GNU GPL v3+) v0.2.0\n    \n    usage: dwload_server_cli.py [-h] [--version] [--root_dir ROOT_DIR]\n                                [--log_level {0,10,20,30,30,40,50,99,100}]\n                                {becker,serial} ...\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n      --root_dir ROOT_DIR   Server root directory for load/store requested files\n      --log_level {0,10,20,30,30,40,50,99,100}\n                            Logging level: 10=DEBUG, 20=INFO, 30=WARNING,\n                            40=ERROR, 50=CRITICAL/FATAL\n    \n    Interface:\n      {becker,serial}\n        becker              Use the Becker interface\n        serial              Use the serial interface\n    \n    example usage:\n        dwload_server_cli.py --root_dir=./dwload-files/ serial --port=/dev/ttyUSB0\n        dwload_server_cli.py --root_dir=./dwload-files/ becker\n    \n    Interface help:\n        dwload_server_cli.py serial --help\n        dwload_server_cli.py becker --help\n\nstartup linux\n=============\n\nThere are two shell scripts, for easy startup the server under Linux:\n\n* `/scripts/start_serial_DWLOAD_server.sh <https://github.com/6809/DwLoadServer/blob/master/scripts/start_serial_DWLOAD_server.sh>`_\n\n* `/scripts/start_becker_DWLOAD_server.sh <https://github.com/6809/DwLoadServer/blob/master/scripts/start_becker_DWLOAD_server.sh>`_\n\nCopy these files into ``~/DwLoadServer_env/`` and edit it for your needs.\n\nThe default DWLOAD-Server-root-directory is: ``~/dwload-files/``\ne.g.: Download ``dwload-demo-files.tar.xz.zip`` from `http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4964 <http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4964>`_\nand extract the files into ``~/dwload-files/``\n\nstart by cli (linux)\n--------------------\n\ne.g.:\n\n::\n\n    /home/FooBar $ cd ~/DwLoadServer_env/\n    /home/FooBar/DwLoadServer_env/ $ source bin/activate\n    (DwLoadServer_env) ~/DwLoadServer_env $ python3 -m dwload_server.dwload_server_cli --root_dir=~/dwload-files --log_level=10 serial --port=/dev/ttyUSB0\n\nDisplay CLI help, e.g:\n\n::\n\n    /home/FooBar $ cd ~/DwLoadServer_env/\n    /home/FooBar/DwLoadServer_env/ $ source bin/activate\n    (DwLoadServer_env) ~/DwLoadServer_env $ python3 -m dwload_server.dwload_server_cli --help\n    \n    DWLOAD Server written in Python (GNU GPL v3+) v0.2.0\n    \n    usage: dwload_server_cli.py [-h] [--version] [--root_dir ROOT_DIR]\n                                [--log_level {0,10,20,30,30,40,50,99,100}]\n                                {becker,serial} ...\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n      --root_dir ROOT_DIR   Server root directory for load/store requested files\n      --log_level {0,10,20,30,30,40,50,99,100}\n                            Logging level: 10=DEBUG, 20=INFO, 30=WARNING,\n                            40=ERROR, 50=CRITICAL/FATAL\n    \n    Interface:\n      {becker,serial}\n        becker              Use the Becker interface\n        serial              Use the serial interface\n    \n    example usage:\n        dwload_server_cli.py --root_dir=./dwload-files/ serial --port=/dev/ttyUSB0\n        dwload_server_cli.py --root_dir=./dwload-files/ becker\n    \n    Interface help:\n        dwload_server_cli.py serial --help\n        dwload_server_cli.py becker --help\n\n-------\nHistory\n-------\n\n* 19.11.2014 - v0.3.0 - Convert \"ASCII BASIC listing\" <-> \"Dragon DOS Binary\" on-the-fly while read/write\n\n* 17.11.2014 - v0.2.0 - Support Becker and Serial interface.\n\n* 14.11.2014 - v0.1.0 - Create bootstrap file that work under linux and windows.\n\n* 12.11.2014 - v0.0.1 - send a file works rudimentary\n\n* 30.09.2014 - Idea was born: `Forum post 11893 <http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=8&t=4946#p11893>`_\n\n-----\nLinks\n-----\n\n+--------------+---------------------------------------------------------------------+\n| Forum Thread | `http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=8&t=4946`_ |\n+--------------+---------------------------------------------------------------------+\n| IRC          | `#pylucid on freenode.net`_                                         |\n+--------------+---------------------------------------------------------------------+\n| Jabber       | pylucid@conference.jabber.org                                       |\n+--------------+---------------------------------------------------------------------+\n| PyPi         | `https://pypi.python.org/pypi/dwload_server/`_                      |\n+--------------+---------------------------------------------------------------------+\n| Github       | `https://github.com/6809/DwLoadServer`_                             |\n+--------------+---------------------------------------------------------------------+\n\n.. _http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=8&t=4946: http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=8&t=4946\n.. _#pylucid on freenode.net: http://www.pylucid.org/permalink/304/irc-channel\n.. _https://pypi.python.org/pypi/dwload_server/: https://pypi.python.org/pypi/dwload_server/\n.. _https://github.com/6809/DwLoadServer: https://github.com/6809/DwLoadServer\n\nsome project related links:\n\n* About DWLOAD: `http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4964`_\n\n* DWEEBS application Thread: `http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4968 <http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&t=4968>`_\n\n* Dragon 32/64 DriveWire Adapter: `http://archive.worldofdragon.org/index.php?title=Dragon_32/64_Drivewire_Adapter <http://archive.worldofdragon.org/index.php?title=Dragon_32/64_Drivewire_Adapter>`_\n\n* Drivewire for dummies: `http://archive.worldofdragon.org/index.php?title=Drivewire_for_dummies <http://archive.worldofdragon.org/index.php?title=Drivewire_for_dummies>`_\n\n* `http://sourceforge.net/p/drivewireserver/wiki/DriveWire_Specification/ <http://sourceforge.net/p/drivewireserver/wiki/DriveWire_Specification/>`_\n\n* `http://sourceforge.net/p/drivewireserver/wiki/ <http://sourceforge.net/p/drivewireserver/wiki/>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DWLOAD/DwLoadServer", "keywords": "6809 Dragon CoCo DriveWire", "license": "GPL v3+", "maintainer": null, "maintainer_email": null, "name": "dwload_server", "package_url": "https://pypi.org/project/dwload_server/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dwload_server/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/DWLOAD/DwLoadServer"}, "release_url": "https://pypi.org/project/dwload_server/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "DWLOAD server implemented in Python", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>DWLOAD server implemented in Python (OpenSource, GPL v3 or above).</p>\n<div id=\"features\">\n<h2>features</h2>\n<p>Here a feature list:</p>\n<ul>\n<li>load/save files via DWLOAD</li>\n<li>on-the-fly converting ASCII BASIC listing (see below)</li>\n<li>dynamic \u201cAUTOLOAD.DWL\u201d (see below)</li>\n<li>backup all files on save</li>\n<li>Support <a href=\"http://archive.worldofdragon.org/index.php?title=Dragon_32/64_Drivewire_Adapter\" rel=\"nofollow\">USB Adapter</a> and <a href=\"http://www.6809.org.uk/xroar/doc/xroar.shtml#Becker-port\" rel=\"nofollow\">Becker TCP/IP Interface</a>.</li>\n</ul>\n<div id=\"current-state\">\n<h3>current state</h3>\n<p>Only tested with Python 3 !</p>\n<p>Tested DWEEBS:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>DWEEB</th>\n<th>example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><strong>DLOAD</strong></td>\n<td><tt>DLOAD</tt></td>\n<td>Load <tt>AUTOLOAD.DWL</tt> (Used on Dragon startup)</td>\n</tr>\n<tr><td><strong>SAVE</strong></td>\n<td><tt><span class=\"pre\">DLOAD\"SAVE\"\"MYFILE.BAS\"</span></tt></td>\n<td>Save BASIC listing</td>\n</tr>\n<tr><td><strong>RESAVE</strong></td>\n<td><tt><span class=\"pre\">DLOAD\"RESAVE\"\"MYFILE.BAS\"</span></tt></td>\n<td>Save BASIC listing</td>\n</tr>\n</tbody>\n</table>\n<p>Implemented DriveWire Transactions:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>hex</th>\n<th>dez</th>\n<th>DW name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>$01</td>\n<td>1</td>\n<td>OP_NAMEOBJ_MOUNT</td>\n<td>Mount a file to a virtual drive number</td>\n</tr>\n<tr><td>$02</td>\n<td>2</td>\n<td>OP_NAMEOBJ_CREATE</td>\n<td>(Does in this implementation the same as OP_NAMEOBJ_MOUNT)</td>\n</tr>\n<tr><td>$d2</td>\n<td>210</td>\n<td>OP_READEX</td>\n<td>Send 256 bytes sector from the DWLOAD server to the client</td>\n</tr>\n<tr><td>$57</td>\n<td>87</td>\n<td>OP_WRITE</td>\n<td>Write 256 bytes sector of data from the client into a file on the server</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"todo\">\n<h3>TODO</h3>\n<ul>\n<li>enhance <tt>AUTOLOAD.DWL.py</tt>, see: <a href=\"http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4977\" rel=\"nofollow\">http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4977</a></li>\n<li>compare checksum</li>\n<li>add support for Python 2.7</li>\n<li>write unittests</li>\n</ul>\n</div>\n<div id=\"pyscripts\">\n<h3>pyscripts</h3>\n<p>There is a general machanism to generate DLOAD responses via Python:</p>\n<ul>\n<li>Store in server root a python script, e.g.: \u201cFOO.BAR.py\u201d</li>\n<li>DLOAD the file (without .py extension) on client, e.g.: <tt>DLOAD\"FOO.BAR\"</tt></li>\n</ul>\n<p>The script will be called via subprocess and it must write the Dragon DOS binary data back to stdout.</p>\n<p>Currently there is only one <em>pyscript</em> file: <tt>AUTOLOAD.DWL.py</tt> (see below)</p>\n<div id=\"dynamic-autoload-dwl\">\n<h4>dynamic \u201cAUTOLOAD.DWL\u201d</h4>\n<p>There exist a way to generate a dynamic DWLOAD menu.\nJust copy the file <a href=\"https://github.com/6809/DwLoadServer/blob/master/dwload-demo-files/AUTOLOAD.DWL.py\" rel=\"nofollow\">/dwload-demo-files/AUTOLOAD.DWL.py</a> into your server root.</p>\n<p>The generated listing looks like this:</p>\n<pre>10 CLS\n20 PRINT\" *** DYNAMIC MENU ***  14:11:18\"\n30 PRINT\"/HOME/JENS/DWLOAD-FILES\"\n40 PRINT\" 0 - HEXVIEW.BAS\"\n50 PRINT\" 1 - TEST.BAS\"\n60 PRINT\" 2 - SAVE\"\n70 PRINT\"PLEASE SELECT (X FOR RELOAD) !\"\n80 A$=INKEY$:IF A$=\"\" GOTO 80\n90 IF A$=\"X\" THEN DLOAD\n100 IF A$=\"0\" THEN DLOAD\"HEXVIEW.BAS\"\n110 IF A$=\"1\" THEN DLOAD\"TEST.BAS\"\n120 IF A$=\"2\" THEN DLOAD\"SAVE\"\n130 GOTO 10\n</pre>\n<p>s.: <a href=\"http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4977\" rel=\"nofollow\">http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4977</a></p>\n<p>This feature make the following file:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"https://github.com/6809/DwLoadServer/blob/master/dwload_server/hooks/dynamic_dwl.py\" rel=\"nofollow\">/dwload_server/hooks/dynamic_dwl.py</a></td>\n<td>general API to \u2018pyscript\u2019 files</td>\n</tr>\n<tr><td><a href=\"https://github.com/6809/DwLoadServer/blob/master/dwload_server/pyscripts/autoload_dwl.py\" rel=\"nofollow\">/dwload_server/pyscripts/autoload_dwl.py</a></td>\n<td>generates the DWLOAD menu</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"on-the-fly-converting-ascii-basic-listing\">\n<h3>on-the-fly converting ASCII BASIC listing</h3>\n<p>The server read/save ASCII BASIC listing and send/store them to the DWLOAD client on-the-fly.\nSo you can edit listings on your PC and try them on your Dragon without any external conventions!</p>\n<p>e.g.: save</p>\n<pre>10 PRINT\"HELLO WORLD!\"\nDLOAD\"SAVE\"\"HELLO.BAS\"\nDWLOAD\n!\nOK\n</pre>\n<p>The server will create two files:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>filename</th>\n<th>format</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>HELLO.DWL</td>\n<td>raw tokenized binary</td>\n<td>Dragon DOS Binary Format data from the Dragon (256 Bytes padded)</td>\n</tr>\n<tr><td>HELLO.BAS</td>\n<td>ASCII listing</td>\n<td>on-the-fly converted ASCII BASIC listing</td>\n</tr>\n</tbody>\n</table>\n<p>e.g. load (and execute):</p>\n<pre>DLOAD\"HELLO.BAS\"\n!HELLO WORLD!\nOK\n</pre>\n<p>(Note: the first <tt>!</tt> is from DWLOAD ROM routine)</p>\n<p>The server will read the <tt>HELLO.BAS</tt> ASCII listing and convert is on-the-fly to the needed Dragon DOS Binary Format\nand send this back to the Dragon.</p>\n<p>This feature make the following files:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"https://github.com/6809/DwLoadServer/blob/master/dwload_server/hooks/read_ascii.py\" rel=\"nofollow\">/dwload_server/hooks/read_ascii.py</a></td>\n<td>read ASCII listing and send as binary to client</td>\n</tr>\n<tr><td><a href=\"https://github.com/6809/DwLoadServer/blob/master/dwload_server/hooks/save_ascii.py\" rel=\"nofollow\">/dwload_server/hooks/save_ascii.py</a></td>\n<td>save binary from client as ASCII on server</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"installation\">\n<h2>installation</h2>\n<div id=\"linux\">\n<h3>Linux</h3>\n<p>The is a virtualenv bootstrap file, created with <a href=\"https://github.com/jedie/bootstrap_env\" rel=\"nofollow\">bootstrap_env</a>, for easy installation.</p>\n<p>Get the bootstrap file:</p>\n<pre>/home/FooBar$ wget https://raw.githubusercontent.com/6809/DwLoadServer/master/boot_dwload_server.py\n</pre>\n<p>There are tree types of installation:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>option</th>\n<th>desciption</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><strong>pypi</strong></td>\n<td>use <a href=\"http://www.python.org/pypi/\" rel=\"nofollow\">Python Package Index</a> (for all normal user!)</td>\n</tr>\n<tr><td><strong>git_readonly</strong></td>\n<td>use <tt>git</tt> to get the sourcecode (for developer without write access)</td>\n</tr>\n<tr><td><strong>dev</strong></td>\n<td>use <tt>git</tt> with write access</td>\n</tr>\n</tbody>\n</table>\n<p>e.g.:</p>\n<pre>/home/FooBar$ python3 boot_dwload_server.py ~/DwLoadServer_env --install_type git_readonly\n</pre>\n<p>This creates a virtualenv in <strong>``~/DwLoadServer_env``</strong> and used <tt>git</tt> to checkout the needed repositories.</p>\n<p>In this case (using \u2013install_type=**git_readonly**) the git repository are in: <strong>\u2026/DwLoadServer_env/src/</strong>\nSo you can easy update them e.g.:</p>\n<pre>/home/FooBar$ cd ~/DwLoadServer_env/src/dwload-server\n/home/FooBar/DwLoadServer_env/src/dwload-server$ git pull\n</pre>\n</div>\n<div id=\"windows\">\n<h3>Windows</h3>\n<p>There are several ways to install the project under windows.</p>\n<p>The following is hopeful the easiest one:</p>\n<ul>\n<li>Install Python 3, e.g.: <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">https://www.python.org/downloads/</a></li>\n<li>Download the <tt>DWLOAD Server</tt> git snapshot from Github: <a href=\"https://github.com/6809/DwLoadServer/archive/master.zip\" rel=\"nofollow\">master.zip</a></li>\n<li>Extract the Archive somewhere</li>\n<li>Maybe, adjust paths in <tt>boot_dwload_server.cmd</tt></li>\n<li>Run <tt>boot_dwload_server.cmd</tt></li>\n</ul>\n<p>The default <tt>boot_dwload_server.cmd</tt> will install via <tt>Python Package Index</tt> (PyPi) into <tt><span class=\"pre\">%APPDATA%\\DwLoadServer_env</span></tt></p>\n<p>There are two batch files, for easy startup the server under Windows:</p>\n<ul>\n<li><a href=\"https://github.com/6809/DwLoadServer/blob/master/scripts/start_serial_DWLOAD_server.cmd\" rel=\"nofollow\">/scripts/start_serial_DWLOAD_server.cmd</a></li>\n<li><a href=\"https://github.com/6809/DwLoadServer/blob/master/scripts/start_becker_DWLOAD_server.cmd\" rel=\"nofollow\">/scripts/start_becker_DWLOAD_server.cmd</a></li>\n</ul>\n<p>Copy these files into <tt><span class=\"pre\">%APPDATA%\\DwLoadServer_env\\</span></tt> and edit it for your needs.\nJust double click to start the server.</p>\n<div id=\"start-by-cli-windows\">\n<h4>start by cli (windows)</h4>\n<p>There is a batch file to open a commandline with a activated virtualenv:</p>\n<ul>\n<li><a href=\"https://github.com/6809/DwLoadServer/blob/master/scripts/cmd_here.cmd\" rel=\"nofollow\">/scripts/cmd_here.cmd</a></li>\n</ul>\n<p>copy this into <tt><span class=\"pre\">%APPDATA%\\DwLoadServer_env\\</span></tt> and double click it ;)</p>\n<p>by hand: Start <strong>cmd.exe</strong> and do this:</p>\n<pre>C:\\Windows\\system32&gt;cd /d %APPDATA%\\DwLoadServer_env\\\nC:\\Users\\FOO\\AppData\\Roaming\\DwLoadServer_env&gt;call Scripts\\activate.bat\n(DwLoadServer_env) C:\\Users\\FOO\\AppData\\Roaming\\DwLoadServer_env&gt;\n</pre>\n<p>So use the DWLOAD-Server CLI, e.g:</p>\n<pre>(DwLoadServer_env) C:\\Users\\FOO\\AppData\\Roaming\\DwLoadServer_env&gt; python.exe -m dwload_server.dwload_server_cli --root_dir=%APPDATA%\\dwload-files\\ --log_level=10 serial --port=COM3\n</pre>\n<p>Do see the CLI help page:</p>\n<pre>(DwLoadServer_env) C:\\Users\\FOO\\AppData\\Roaming\\DwLoadServer_env&gt; python.exe -m dwload_server.dwload_server_cli --help\n\nDWLOAD Server written in Python (GNU GPL v3+) v0.2.0\n\nusage: dwload_server_cli.py [-h] [--version] [--root_dir ROOT_DIR]\n                            [--log_level {0,10,20,30,30,40,50,99,100}]\n                            {becker,serial} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --root_dir ROOT_DIR   Server root directory for load/store requested files\n  --log_level {0,10,20,30,30,40,50,99,100}\n                        Logging level: 10=DEBUG, 20=INFO, 30=WARNING,\n                        40=ERROR, 50=CRITICAL/FATAL\n\nInterface:\n  {becker,serial}\n    becker              Use the Becker interface\n    serial              Use the serial interface\n\nexample usage:\n    dwload_server_cli.py --root_dir=./dwload-files/ serial --port=/dev/ttyUSB0\n    dwload_server_cli.py --root_dir=./dwload-files/ becker\n\nInterface help:\n    dwload_server_cli.py serial --help\n    dwload_server_cli.py becker --help\n</pre>\n</div>\n</div>\n<div id=\"startup-linux\">\n<h3>startup linux</h3>\n<p>There are two shell scripts, for easy startup the server under Linux:</p>\n<ul>\n<li><a href=\"https://github.com/6809/DwLoadServer/blob/master/scripts/start_serial_DWLOAD_server.sh\" rel=\"nofollow\">/scripts/start_serial_DWLOAD_server.sh</a></li>\n<li><a href=\"https://github.com/6809/DwLoadServer/blob/master/scripts/start_becker_DWLOAD_server.sh\" rel=\"nofollow\">/scripts/start_becker_DWLOAD_server.sh</a></li>\n</ul>\n<p>Copy these files into <tt>~/DwLoadServer_env/</tt> and edit it for your needs.</p>\n<p>The default DWLOAD-Server-root-directory is: <tt><span class=\"pre\">~/dwload-files/</span></tt>\ne.g.: Download <tt><span class=\"pre\">dwload-demo-files.tar.xz.zip</span></tt> from <a href=\"http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4964\" rel=\"nofollow\">http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4964</a>\nand extract the files into <tt><span class=\"pre\">~/dwload-files/</span></tt></p>\n<div id=\"start-by-cli-linux\">\n<h4>start by cli (linux)</h4>\n<p>e.g.:</p>\n<pre>/home/FooBar $ cd ~/DwLoadServer_env/\n/home/FooBar/DwLoadServer_env/ $ source bin/activate\n(DwLoadServer_env) ~/DwLoadServer_env $ python3 -m dwload_server.dwload_server_cli --root_dir=~/dwload-files --log_level=10 serial --port=/dev/ttyUSB0\n</pre>\n<p>Display CLI help, e.g:</p>\n<pre>/home/FooBar $ cd ~/DwLoadServer_env/\n/home/FooBar/DwLoadServer_env/ $ source bin/activate\n(DwLoadServer_env) ~/DwLoadServer_env $ python3 -m dwload_server.dwload_server_cli --help\n\nDWLOAD Server written in Python (GNU GPL v3+) v0.2.0\n\nusage: dwload_server_cli.py [-h] [--version] [--root_dir ROOT_DIR]\n                            [--log_level {0,10,20,30,30,40,50,99,100}]\n                            {becker,serial} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --root_dir ROOT_DIR   Server root directory for load/store requested files\n  --log_level {0,10,20,30,30,40,50,99,100}\n                        Logging level: 10=DEBUG, 20=INFO, 30=WARNING,\n                        40=ERROR, 50=CRITICAL/FATAL\n\nInterface:\n  {becker,serial}\n    becker              Use the Becker interface\n    serial              Use the serial interface\n\nexample usage:\n    dwload_server_cli.py --root_dir=./dwload-files/ serial --port=/dev/ttyUSB0\n    dwload_server_cli.py --root_dir=./dwload-files/ becker\n\nInterface help:\n    dwload_server_cli.py serial --help\n    dwload_server_cli.py becker --help\n</pre>\n</div>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<ul>\n<li>19.11.2014 - v0.3.0 - Convert \u201cASCII BASIC listing\u201d &lt;-&gt; \u201cDragon DOS Binary\u201d on-the-fly while read/write</li>\n<li>17.11.2014 - v0.2.0 - Support Becker and Serial interface.</li>\n<li>14.11.2014 - v0.1.0 - Create bootstrap file that work under linux and windows.</li>\n<li>12.11.2014 - v0.0.1 - send a file works rudimentary</li>\n<li>30.09.2014 - Idea was born: <a href=\"http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=8&amp;t=4946#p11893\" rel=\"nofollow\">Forum post 11893</a></li>\n</ul>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Forum Thread</td>\n<td><a href=\"http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=8&amp;t=4946\" rel=\"nofollow\">http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=8&amp;t=4946</a></td>\n</tr>\n<tr><td>IRC</td>\n<td><a href=\"http://www.pylucid.org/permalink/304/irc-channel\" rel=\"nofollow\">#pylucid on freenode.net</a></td>\n</tr>\n<tr><td>Jabber</td>\n<td><a href=\"mailto:pylucid%40conference.jabber.org\">pylucid<span>@</span>conference<span>.</span>jabber<span>.</span>org</a></td>\n</tr>\n<tr><td>PyPi</td>\n<td><a href=\"https://pypi.python.org/pypi/dwload_server/\" rel=\"nofollow\">https://pypi.python.org/pypi/dwload_server/</a></td>\n</tr>\n<tr><td>Github</td>\n<td><a href=\"https://github.com/6809/DwLoadServer\" rel=\"nofollow\">https://github.com/6809/DwLoadServer</a></td>\n</tr>\n</tbody>\n</table>\n<p>some project related links:</p>\n<ul>\n<li>About DWLOAD: <a href=\"http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4964\" rel=\"nofollow\">http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4964</a></li>\n<li>DWEEBS application Thread: <a href=\"http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4968\" rel=\"nofollow\">http://archive.worldofdragon.org/phpBB3/viewtopic.php?f=5&amp;t=4968</a></li>\n<li>Dragon 32/64 DriveWire Adapter: <a href=\"http://archive.worldofdragon.org/index.php?title=Dragon_32/64_Drivewire_Adapter\" rel=\"nofollow\">http://archive.worldofdragon.org/index.php?title=Dragon_32/64_Drivewire_Adapter</a></li>\n<li>Drivewire for dummies: <a href=\"http://archive.worldofdragon.org/index.php?title=Drivewire_for_dummies\" rel=\"nofollow\">http://archive.worldofdragon.org/index.php?title=Drivewire_for_dummies</a></li>\n<li><a href=\"http://sourceforge.net/p/drivewireserver/wiki/DriveWire_Specification/\" rel=\"nofollow\">http://sourceforge.net/p/drivewireserver/wiki/DriveWire_Specification/</a></li>\n<li><a href=\"http://sourceforge.net/p/drivewireserver/wiki/\" rel=\"nofollow\">http://sourceforge.net/p/drivewireserver/wiki/</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1314378, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "384e01ba6057d5cb0ea3ddb1880ca97b", "sha256": "3122a021949c935c6fbd244c133dbcdf1a1e1b0f15546e09e9850c70cf14eb15"}, "downloads": -1, "filename": "dwload_server-0.1.0.tar.gz", "has_sig": false, "md5_digest": "384e01ba6057d5cb0ea3ddb1880ca97b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7470, "upload_time": "2014-11-14T09:00:20", "upload_time_iso_8601": "2014-11-14T09:00:20.572088Z", "url": "https://files.pythonhosted.org/packages/47/d5/bd20ae921ffe0bd8d88512fc0663f77af84536dce7f7031312cd1b85011b/dwload_server-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "23480a42b164b56f8238580da773f8f8", "sha256": "f5a744012fd2287412ba9e68ad943e86e4d41c5507fdc781fa2183b9a0a7ed7a"}, "downloads": -1, "filename": "dwload_server-0.1.1.tar.gz", "has_sig": false, "md5_digest": "23480a42b164b56f8238580da773f8f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8819, "upload_time": "2014-11-14T14:18:31", "upload_time_iso_8601": "2014-11-14T14:18:31.028384Z", "url": "https://files.pythonhosted.org/packages/f8/b9/b5f35e8be725d90e9b79c0b41070b7f7943b81cec0fe3da9a6bb9a0467f4/dwload_server-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d6b606ea4ec6655866cfcfd9abbeebda", "sha256": "ac19b297a7a34896428d7eda605deff7bd18753d6f70c9500a1eca2ebc2d06dd"}, "downloads": -1, "filename": "dwload_server-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d6b606ea4ec6655866cfcfd9abbeebda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1065203, "upload_time": "2014-11-17T13:21:55", "upload_time_iso_8601": "2014-11-17T13:21:55.232740Z", "url": "https://files.pythonhosted.org/packages/4e/0e/ba7e56add4fa83e519c87c11c1e2ab42f86af3445ebf9a31435b42f77729/dwload_server-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e229fb778054eaf6a1b1cecad9a939b7", "sha256": "fa3dc68b2174a50a63ad341c3cd2bc20a7008a1fa99fd340eb5d1c06fc5489d7"}, "downloads": -1, "filename": "dwload_server-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e229fb778054eaf6a1b1cecad9a939b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1068863, "upload_time": "2014-11-19T12:29:14", "upload_time_iso_8601": "2014-11-19T12:29:14.610785Z", "url": "https://files.pythonhosted.org/packages/0b/ef/285c091c0608824ec1ddbd3bc0eeab869df1a03367fa3aaf137fe63431d6/dwload_server-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e9e0bf7b0b0fce1004a0f8a359fafa97", "sha256": "6bd22351454b917e12418ee85ef50a8e65bbb107dc14735599ed0e181d669ecc"}, "downloads": -1, "filename": "dwload_server-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e9e0bf7b0b0fce1004a0f8a359fafa97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1074428, "upload_time": "2014-11-20T13:20:46", "upload_time_iso_8601": "2014-11-20T13:20:46.264518Z", "url": "https://files.pythonhosted.org/packages/53/26/4aed9d310a7ced7f7482b2c38ec8c241d40b55731fcf8d4ba10836c38d85/dwload_server-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9e0bf7b0b0fce1004a0f8a359fafa97", "sha256": "6bd22351454b917e12418ee85ef50a8e65bbb107dc14735599ed0e181d669ecc"}, "downloads": -1, "filename": "dwload_server-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e9e0bf7b0b0fce1004a0f8a359fafa97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1074428, "upload_time": "2014-11-20T13:20:46", "upload_time_iso_8601": "2014-11-20T13:20:46.264518Z", "url": "https://files.pythonhosted.org/packages/53/26/4aed9d310a7ced7f7482b2c38ec8c241d40b55731fcf8d4ba10836c38d85/dwload_server-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:50 2020"}