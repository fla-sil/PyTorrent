{"info": {"author": "Alan Yorinks", "author_email": "MisterYsLab@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Other Environment", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Education", "Topic :: Utilities"], "description": "## Control A Circuit Playground Express From Your PC With An Easy To Use Python 3 API\n\nView the Installation and Usage Guide [Here.](https://mryslab.github.io/pymata-cpx/)\n\nIt supports the following CPX devices:\n* The Buttons and Slide Switch.\n* The D13 Board LED.\n* The 10 onboard neo-pixels.\n* Tone generation using the onboard speaker.\n* The accelerometer, including tap sensing.\n* The temperature sensor.\n* The light sensor.\n* The sound sensor.\n* Touchpad sensors.\n\nAn example to animate the neopixels and to start and stop the animation\nby simply tapping the Playground Express:\n\n```python\nimport random\nimport time\n\nfrom pymata_cpx.pymata_cpx import PyMataCpx\n\n\nclass TheTapper():\n    \"\"\"\n    Illuminate the neopixels in a counter-clockwise fashion with randomly generated colors.\n    When you tap the playground express, the neopixels will stop changing and the\n    program pauses. Tap again and the neopixels will start again.\n    \"\"\"\n    def __init__(self):\n        # create an instance of the API\n        self.p = PyMataCpx()\n\n        print('Tap the playground express to stop the neopixels from moving.')\n        print('Tap again, to start them up')\n        print('The tap state will be printed to the console')\n\n        # Start monitoring for tap events and\n        # send event notifications to the \"tapped\" callback method.\n        self.p.cpx_tap_start(self.tapped)\n\n        # flag to start and stop the light show\n        self.go = True\n\n        while True:\n            try:\n                # run the light show\n                for neopixel in range(0, 10):\n                    # check the go flag\n                    if self.go:\n                        self.p.cpx_pixels_clear()\n                        self.p.cpx_pixels_show()\n                        r = random.randint(0, 254)\n                        g = random.randint(0, 254)\n                        b = random.randint(0, 254)\n                        self.p.cpx_pixel_set(neopixel, r, g, b)\n                        self.p.cpx_pixels_show()\n                        time.sleep(.2)\n                    else:\n                        self.p.cpx_pixels_clear()\n                        self.p.cpx_pixels_show()\n                        time.sleep(.001)\n            except KeyboardInterrupt:\n                # If you press control-C, cleanly exit\n                self.p.cpx_pixels_clear()\n                self.p.cpx_pixels_show()\n                self.p.cpx_close_and_exit()\n\n    def tapped(self, data):\n        \"\"\"\n        :param data: data[0] = data type (analog = 2, digital =32)\n                     data[1] = pin for device 27\n                     data[2] = tap data - list of booleans.\n                               First value for 1 tap\n                               Second value for 2 taps\n        \"\"\"\n        # for any taps, toggle the go flag\n        # print out the current go state\n        if data[2] != [False, False]:\n            self.go = not self.go\n            print(self.go)\n\n# start the program\nTheTapper()\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/MrYsLab/pymata-cpx", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://mryslab.github.io/pymata-cpx/", "keywords": "Circuit Playground Express,Python", "license": "GNU Affero General Public License v3 or later (AGPLv3+)", "maintainer": "", "maintainer_email": "", "name": "pymata-cpx", "package_url": "https://pypi.org/project/pymata-cpx/", "platform": "", "project_url": "https://pypi.org/project/pymata-cpx/", "project_urls": {"Download": "https://github.com/MrYsLab/pymata-cpx", "Homepage": "https://mryslab.github.io/pymata-cpx/"}, "release_url": "https://pypi.org/project/pymata-cpx/1.0/", "requires_dist": ["pyserial"], "requires_python": "", "summary": "A Python API For The Circuit Playground Express", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Control A Circuit Playground Express From Your PC With An Easy To Use Python 3 API</h2>\n<p>View the Installation and Usage Guide <a href=\"https://mryslab.github.io/pymata-cpx/\" rel=\"nofollow\">Here.</a></p>\n<p>It supports the following CPX devices:</p>\n<ul>\n<li>The Buttons and Slide Switch.</li>\n<li>The D13 Board LED.</li>\n<li>The 10 onboard neo-pixels.</li>\n<li>Tone generation using the onboard speaker.</li>\n<li>The accelerometer, including tap sensing.</li>\n<li>The temperature sensor.</li>\n<li>The light sensor.</li>\n<li>The sound sensor.</li>\n<li>Touchpad sensors.</li>\n</ul>\n<p>An example to animate the neopixels and to start and stop the animation\nby simply tapping the Playground Express:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pymata_cpx.pymata_cpx</span> <span class=\"kn\">import</span> <span class=\"n\">PyMataCpx</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TheTapper</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Illuminate the neopixels in a counter-clockwise fashion with randomly generated colors.</span>\n<span class=\"sd\">    When you tap the playground express, the neopixels will stop changing and the</span>\n<span class=\"sd\">    program pauses. Tap again and the neopixels will start again.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># create an instance of the API</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PyMataCpx</span><span class=\"p\">()</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Tap the playground express to stop the neopixels from moving.'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Tap again, to start them up'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The tap state will be printed to the console'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Start monitoring for tap events and</span>\n        <span class=\"c1\"># send event notifications to the \"tapped\" callback method.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_tap_start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tapped</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># flag to start and stop the light show</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"c1\"># run the light show</span>\n                <span class=\"k\">for</span> <span class=\"n\">neopixel</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># check the go flag</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_pixels_clear</span><span class=\"p\">()</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_pixels_show</span><span class=\"p\">()</span>\n                        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">254</span><span class=\"p\">)</span>\n                        <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">254</span><span class=\"p\">)</span>\n                        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">254</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_pixel_set</span><span class=\"p\">(</span><span class=\"n\">neopixel</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_pixels_show</span><span class=\"p\">()</span>\n                        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_pixels_clear</span><span class=\"p\">()</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_pixels_show</span><span class=\"p\">()</span>\n                        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">001</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n                <span class=\"c1\"># If you press control-C, cleanly exit</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_pixels_clear</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_pixels_show</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cpx_close_and_exit</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tapped</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        :param data: data[0] = data type (analog = 2, digital =32)</span>\n<span class=\"sd\">                     data[1] = pin for device 27</span>\n<span class=\"sd\">                     data[2] = tap data - list of booleans.</span>\n<span class=\"sd\">                               First value for 1 tap</span>\n<span class=\"sd\">                               Second value for 2 taps</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># for any taps, toggle the go flag</span>\n        <span class=\"c1\"># print out the current go state</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># start the program</span>\n<span class=\"n\">TheTapper</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6377268, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "45dbf78b48b29567550352306f13ba19", "sha256": "01577d8f0ba675c2cbd17a8ca55a8d385a6a8eafa8a141cc4d96d99f1853e41e"}, "downloads": -1, "filename": "pymata_cpx-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "45dbf78b48b29567550352306f13ba19", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21978, "upload_time": "2019-12-30T23:24:37", "upload_time_iso_8601": "2019-12-30T23:24:37.906594Z", "url": "https://files.pythonhosted.org/packages/07/be/127fa8050df883de19bcc2193cedcc698ae82213c6234422dd0154eec20f/pymata_cpx-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ed2c448979368fef66ca9aed4a225c7", "sha256": "ef7b96eeebfe3717e7f6858c9438268181c308aeba3712306437a66e3217751f"}, "downloads": -1, "filename": "pymata-cpx-1.0.tar.gz", "has_sig": false, "md5_digest": "9ed2c448979368fef66ca9aed4a225c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20486, "upload_time": "2019-12-30T23:24:40", "upload_time_iso_8601": "2019-12-30T23:24:40.131421Z", "url": "https://files.pythonhosted.org/packages/4f/be/094b8c990980f48d7d3f2b923b6b0ee43243d01f4204514d6c404ebdf0c6/pymata-cpx-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "45dbf78b48b29567550352306f13ba19", "sha256": "01577d8f0ba675c2cbd17a8ca55a8d385a6a8eafa8a141cc4d96d99f1853e41e"}, "downloads": -1, "filename": "pymata_cpx-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "45dbf78b48b29567550352306f13ba19", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21978, "upload_time": "2019-12-30T23:24:37", "upload_time_iso_8601": "2019-12-30T23:24:37.906594Z", "url": "https://files.pythonhosted.org/packages/07/be/127fa8050df883de19bcc2193cedcc698ae82213c6234422dd0154eec20f/pymata_cpx-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ed2c448979368fef66ca9aed4a225c7", "sha256": "ef7b96eeebfe3717e7f6858c9438268181c308aeba3712306437a66e3217751f"}, "downloads": -1, "filename": "pymata-cpx-1.0.tar.gz", "has_sig": false, "md5_digest": "9ed2c448979368fef66ca9aed4a225c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20486, "upload_time": "2019-12-30T23:24:40", "upload_time_iso_8601": "2019-12-30T23:24:40.131421Z", "url": "https://files.pythonhosted.org/packages/4f/be/094b8c990980f48d7d3f2b923b6b0ee43243d01f4204514d6c404ebdf0c6/pymata-cpx-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:29 2020"}