{"info": {"author": "Sergey Porivaev", "author_email": "porivaevs@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "|travis| |coveralls| |pypi|\n\nSanic-GraphQL\n=============\n\nAdds `GraphQL <http://graphql.org/>`__ support to your `Sanic <https://github.com/channelcat/sanic>`__ application.\n\nBased on `flask-graphql`_ by `Syrus Akbary`_.\n\nUsage\n-----\n\nJust use the ``GraphQLView`` view from ``sanic_graphql``\n\n.. code:: python\n\n    from sanic_graphql import GraphQLView\n\n    app.add_route(GraphQLView.as_view(schema=Schema, graphiql=True), '/graphql')\n\n    # Optional, for adding batch query support (used in Apollo-Client)\n    app.add_route(GraphQLView.as_view(schema=Schema, batch=True), '/graphql/batch')\n\nThis will add ``/graphql`` endpoint to your app.\n\nSharing eventloop with Sanic\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to pass Sanic's eventloop to GraphQL's ``AsyncioExecutor``, use ``before_start`` listener:\n\n.. code:: python\n\n    @app.listener('before_server_start')\n    def init_graphql(app, loop):\n        app.add_route(GraphQLView.as_view(schema=Schema, executor=AsyncioExecutor(loop=loop)), '/graphql')\n\n\nSupported options\n~~~~~~~~~~~~~~~~~\n\n-  ``schema``: The ``GraphQLSchema`` object that you want the view to\n   execute when it gets a valid request.\n-  ``context``: A value to pass as the ``context`` to the ``graphql()``\n   function. By default is set to ``dict`` with request object at key ``request``.\n-  ``root_value``: The ``root_value`` you want to provide to\n   ``executor.execute``.\n-  ``pretty``: Whether or not you want the response to be pretty printed\n   JSON.\n-  ``executor``: The ``Executor`` that you want to use to execute queries. If an ``AsyncioExecutor`` instance is provided,\n   performs queries asynchronously within executor's loop.\n-  ``graphiql``: If ``True``, may present\n   `GraphiQL <https://github.com/graphql/graphiql>`__ when loaded\n   directly from a browser (a useful tool for debugging and\n   exploration).\n-  ``graphiql_template``: Inject a Jinja template string to customize\n   GraphiQL.\n-  ``jinja_env``: Sets jinja environment to be used to process GraphiQL template. If Jinja's async mode is enabled (by ``enable_async=True``), uses\n   ``Template.render_async`` instead of ``Template.render``. If environment is not set, fallbacks to simple regex-based renderer.\n-  ``batch``: Set the GraphQL view as batch (for using in\n   `Apollo-Client <http://dev.apollodata.com/core/network.html#query-batching>`__\n   or\n   `ReactRelayNetworkLayer <https://github.com/nodkz/react-relay-network-layer>`__)\n\n\nYou can also subclass ``GraphQLView`` and overwrite\n``get_root_value(self, request)`` to have a dynamic root value per\nrequest.\n\n.. code:: python\n\n    class UserRootValue(GraphQLView):\n        def get_root_value(self, request):\n            return request.user\n\nLicense\n-------\n\nCopyright for portions of project `sanic-graphql`_ are held by `Syrus Akbary`_ as part of project `flask-graphql`_. All other copyright for project `sanic-graphql`_ \nare held by `Sergey Porivaev <https://github.com/grazor>`__.\n\nThis project is licensed under MIT License.\n\n\n\n.. _`flask-graphql` : https://github.com/graphql-python/flask-graphql\n.. _`Syrus Akbary`: https://github.com/syrusakbary\n.. _`sanic-graphql`: https://github.com/grazor/sanic-graphql\n\n.. |travis| image:: https://travis-ci.org/graphql-python/sanic-graphql.svg?branch=master\n                  :target: https://travis-ci.org/graphql-python/sanic-graphql\n\n.. |coveralls| image:: https://coveralls.io/repos/github/graphql-python/sanic-graphql/badge.svg?branch=master\n                     :target: https://coveralls.io/github/graphql-python/sanic-graphql?branch=master\n\n.. |pypi| image:: https://badge.fury.io/py/Sanic-GraphQL.svg\n                :target: https://badge.fury.io/py/Sanic-GraphQL", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/graphql-python/sanic-graphql/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/graphql-python/sanic-graphql", "keywords": "api graphql protocol sanic", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Sanic-GraphQL", "package_url": "https://pypi.org/project/Sanic-GraphQL/", "platform": "any", "project_url": "https://pypi.org/project/Sanic-GraphQL/", "project_urls": {"Download": "https://github.com/graphql-python/sanic-graphql/releases", "Homepage": "https://github.com/graphql-python/sanic-graphql"}, "release_url": "https://pypi.org/project/Sanic-GraphQL/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Adds GraphQL support to your Sanic application", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/graphql-python/sanic-graphql\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18b202d287574070a875028f275c0b7c8c1b9b3c/68747470733a2f2f7472617669732d63692e6f72672f6772617068716c2d707974686f6e2f73616e69632d6772617068716c2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/graphql-python/sanic-graphql?branch=master\" rel=\"nofollow\"><img alt=\"coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a202f7eb9b22ebcbe354ade0ee65668c3fe7d373/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6772617068716c2d707974686f6e2f73616e69632d6772617068716c2f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/Sanic-GraphQL\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38d516d990c69e6baf9bef2be561098ae3eeb7a3/68747470733a2f2f62616467652e667572792e696f2f70792f53616e69632d4772617068514c2e737667\"></a></p>\n<div id=\"sanic-graphql\">\n<h2>Sanic-GraphQL</h2>\n<p>Adds <a href=\"http://graphql.org/\" rel=\"nofollow\">GraphQL</a> support to your <a href=\"https://github.com/channelcat/sanic\" rel=\"nofollow\">Sanic</a> application.</p>\n<p>Based on <a href=\"https://github.com/graphql-python/flask-graphql\" rel=\"nofollow\">flask-graphql</a> by <a href=\"https://github.com/syrusakbary\" rel=\"nofollow\">Syrus Akbary</a>.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Just use the <tt>GraphQLView</tt> view from <tt>sanic_graphql</tt></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sanic_graphql</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLView</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"n\">GraphQLView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">graphiql</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"s1\">'/graphql'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Optional, for adding batch query support (used in Apollo-Client)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"n\">GraphQLView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"s1\">'/graphql/batch'</span><span class=\"p\">)</span>\n</pre>\n<p>This will add <tt>/graphql</tt> endpoint to your app.</p>\n<div id=\"sharing-eventloop-with-sanic\">\n<h4>Sharing eventloop with Sanic</h4>\n<p>In order to pass Sanic\u2019s eventloop to GraphQL\u2019s <tt>AsyncioExecutor</tt>, use <tt>before_start</tt> listener:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">listener</span><span class=\"p\">(</span><span class=\"s1\">'before_server_start'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">init_graphql</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"n\">GraphQLView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">AsyncioExecutor</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)),</span> <span class=\"s1\">'/graphql'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"supported-options\">\n<h4>Supported options</h4>\n<ul>\n<li><tt>schema</tt>: The <tt>GraphQLSchema</tt> object that you want the view to\nexecute when it gets a valid request.</li>\n<li><tt>context</tt>: A value to pass as the <tt>context</tt> to the <tt>graphql()</tt>\nfunction. By default is set to <tt>dict</tt> with request object at key <tt>request</tt>.</li>\n<li><tt>root_value</tt>: The <tt>root_value</tt> you want to provide to\n<tt>executor.execute</tt>.</li>\n<li><tt>pretty</tt>: Whether or not you want the response to be pretty printed\nJSON.</li>\n<li><tt>executor</tt>: The <tt>Executor</tt> that you want to use to execute queries. If an <tt>AsyncioExecutor</tt> instance is provided,\nperforms queries asynchronously within executor\u2019s loop.</li>\n<li><tt>graphiql</tt>: If <tt>True</tt>, may present\n<a href=\"https://github.com/graphql/graphiql\" rel=\"nofollow\">GraphiQL</a> when loaded\ndirectly from a browser (a useful tool for debugging and\nexploration).</li>\n<li><tt>graphiql_template</tt>: Inject a Jinja template string to customize\nGraphiQL.</li>\n<li><tt>jinja_env</tt>: Sets jinja environment to be used to process GraphiQL template. If Jinja\u2019s async mode is enabled (by <tt>enable_async=True</tt>), uses\n<tt>Template.render_async</tt> instead of <tt>Template.render</tt>. If environment is not set, fallbacks to simple regex-based renderer.</li>\n<li><tt>batch</tt>: Set the GraphQL view as batch (for using in\n<a href=\"http://dev.apollodata.com/core/network.html#query-batching\" rel=\"nofollow\">Apollo-Client</a>\nor\n<a href=\"https://github.com/nodkz/react-relay-network-layer\" rel=\"nofollow\">ReactRelayNetworkLayer</a>)</li>\n</ul>\n<p>You can also subclass <tt>GraphQLView</tt> and overwrite\n<tt>get_root_value(self, request)</tt> to have a dynamic root value per\nrequest.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserRootValue</span><span class=\"p\">(</span><span class=\"n\">GraphQLView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_root_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Copyright for portions of project <a href=\"https://github.com/grazor/sanic-graphql\" rel=\"nofollow\">sanic-graphql</a> are held by <a href=\"https://github.com/syrusakbary\" rel=\"nofollow\">Syrus Akbary</a> as part of project <a href=\"https://github.com/graphql-python/flask-graphql\" rel=\"nofollow\">flask-graphql</a>. All other copyright for project <a href=\"https://github.com/grazor/sanic-graphql\" rel=\"nofollow\">sanic-graphql</a>\nare held by <a href=\"https://github.com/grazor\" rel=\"nofollow\">Sergey Porivaev</a>.</p>\n<p>This project is licensed under MIT License.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6839761, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bba0969cf4bb751553b3f4105beb6cc5", "sha256": "ed6dbb6c44bf49a2e6ab0ee7b82bcb412485a317856acb3df58c7bc83750e2a9"}, "downloads": -1, "filename": "Sanic-GraphQL-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bba0969cf4bb751553b3f4105beb6cc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7861, "upload_time": "2017-03-01T17:17:25", "upload_time_iso_8601": "2017-03-01T17:17:25.566025Z", "url": "https://files.pythonhosted.org/packages/0e/af/d5fd0f5b56e3ee322c108bbf4b03b0bc2ff4082f0fd50359553cd0bba8a7/Sanic-GraphQL-1.0.0.tar.gz", "yanked": false}], "1.0.1": [], "1.0.2": [{"comment_text": "", "digests": {"md5": "ce95ee487ff9051997b95f1868ace467", "sha256": "4dbfcf9a58bb12e3a7333fdf9a0c983582cefb464d4de2f90c0ba7bd0380f15d"}, "downloads": -1, "filename": "Sanic-GraphQL-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ce95ee487ff9051997b95f1868ace467", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8043, "upload_time": "2017-03-05T12:50:10", "upload_time_iso_8601": "2017-03-05T12:50:10.044031Z", "url": "https://files.pythonhosted.org/packages/ec/9a/47f94904a52db3678b228cce752ea34d2aa903f8403c6d883c7b57390407/Sanic-GraphQL-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1a03c11580f5914a71b0b8dd48053370", "sha256": "6aab908e849bbbc5dc5ba01df7599769a03fc9693fb793654c6537f7aaec4e2d"}, "downloads": -1, "filename": "Sanic-GraphQL-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1a03c11580f5914a71b0b8dd48053370", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7421, "upload_time": "2017-04-18T16:22:37", "upload_time_iso_8601": "2017-04-18T16:22:37.331240Z", "url": "https://files.pythonhosted.org/packages/df/a7/6664520baddce5dae741fb05a49228da838110672150803782e49ec0b705/Sanic-GraphQL-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a03c11580f5914a71b0b8dd48053370", "sha256": "6aab908e849bbbc5dc5ba01df7599769a03fc9693fb793654c6537f7aaec4e2d"}, "downloads": -1, "filename": "Sanic-GraphQL-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1a03c11580f5914a71b0b8dd48053370", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7421, "upload_time": "2017-04-18T16:22:37", "upload_time_iso_8601": "2017-04-18T16:22:37.331240Z", "url": "https://files.pythonhosted.org/packages/df/a7/6664520baddce5dae741fb05a49228da838110672150803782e49ec0b705/Sanic-GraphQL-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:46 2020"}