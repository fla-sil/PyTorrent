{"info": {"author": "Chu-Hsuan Lee", "author_email": "joseph.chuhsuanlee@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# guacamoleETL - Document\n\nAn ETL pipeline tool that\n* pre-process\n  * extracts data from a .txt file ([Challenge_me.txt](Challenge_me.txt))\n  * cleans up the data with invalid information\n* transforms the data through given specifications into a matrix (list of lists)\n* loads the data into a .csv file ([output.csv](output.csv))\n\n## Installation\nThis tool can be installed with `pip`<br>\nCopy-paste and run this command in the terminal\n```\npip install guacamoleETL\n```\n\n## Usage\nThis ETL pipeline can be part of predictive model training and feed the data directly to the model\n```py\nimport guacamoleETL\n\ndataFile = 'Challenge_me.txt'\n\nguacamoleETL.load(dataFile)\nresult = guacamoleETL.transform(dataFile)\npredictive_model = model_training(result)\n```\n\n## Functions\n* __extract_data(txt_file):__\n  __Extract data from a .txt file to a temporary .csv file__<br>\n  Leading or trailing whitespace are removed during the extraction\n* __clean_up():__\n  __Clean up the data with invalid information__<br>\n  Rows with the placeholder '-' (NA) in any of the specified columns are excluded\n* __transform(path):__\n  __Transform the data from pre-process through given specifications into a matrix__<br>\n  `engine-location` is split into two columns, `engine-location_front` and `engine-location_rear` and one-hot-encoded<br>\n  `num-of-cylinders` is transformed from word into integer through a pre-defined dictionary<br>\n  `engine-size` is transformed into integer<br>\n  `weight` is transformed into integer<br>\n  `horsepower` is transformed from German decimal notation string into float number<br>\n  `aspiration` is modified as `aspiration_turbo` so that turbo engines are marked as 1<br>\n  `price` is converted from minor units to major units<br>\n  `make` is not transformed but kept in the dataset\n* __load(path):__\n  __Load the data from previous transformation into a .csv file__\n\n\n## Architecture\nAll the functions are implemented in the [\\_\\_init\\_\\_.py](guacamoleETL/__init__.py), this decision is made based on the following reasons:\n* After the package is imported, if we want to use the transform and load functions directly as sub-module, the functions must be imported or defined in `__init__.py`.\n* Since they are all connected to each other, such as the transform function takes the result from pre-process (extract and clean up) and the load function also takes the result from transform function, it's easier to follow the flow if they are all in the same file.\n* This might not be the best architecture implementation, but while starting from small, simplicity is always a good consideration.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chuhsuanlee/guacamoleETL", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "guacamoleETL", "package_url": "https://pypi.org/project/guacamoleETL/", "platform": "", "project_url": "https://pypi.org/project/guacamoleETL/", "project_urls": {"Homepage": "https://github.com/chuhsuanlee/guacamoleETL"}, "release_url": "https://pypi.org/project/guacamoleETL/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "ETL package for AUTO1 challenge", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>guacamoleETL - Document</h1>\n<p>An ETL pipeline tool that</p>\n<ul>\n<li>pre-process\n<ul>\n<li>extracts data from a .txt file (<a href=\"Challenge_me.txt\" rel=\"nofollow\">Challenge_me.txt</a>)</li>\n<li>cleans up the data with invalid information</li>\n</ul>\n</li>\n<li>transforms the data through given specifications into a matrix (list of lists)</li>\n<li>loads the data into a .csv file (<a href=\"output.csv\" rel=\"nofollow\">output.csv</a>)</li>\n</ul>\n<h2>Installation</h2>\n<p>This tool can be installed with <code>pip</code><br>\nCopy-paste and run this command in the terminal</p>\n<pre><code>pip install guacamoleETL\n</code></pre>\n<h2>Usage</h2>\n<p>This ETL pipeline can be part of predictive model training and feed the data directly to the model</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">guacamoleETL</span>\n\n<span class=\"n\">dataFile</span> <span class=\"o\">=</span> <span class=\"s1\">'Challenge_me.txt'</span>\n\n<span class=\"n\">guacamoleETL</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">dataFile</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">guacamoleETL</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">dataFile</span><span class=\"p\">)</span>\n<span class=\"n\">predictive_model</span> <span class=\"o\">=</span> <span class=\"n\">model_training</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<h2>Functions</h2>\n<ul>\n<li><strong>extract_data(txt_file):</strong>\n<strong>Extract data from a .txt file to a temporary .csv file</strong><br>\nLeading or trailing whitespace are removed during the extraction</li>\n<li><strong>clean_up():</strong>\n<strong>Clean up the data with invalid information</strong><br>\nRows with the placeholder '-' (NA) in any of the specified columns are excluded</li>\n<li><strong>transform(path):</strong>\n<strong>Transform the data from pre-process through given specifications into a matrix</strong><br>\n<code>engine-location</code> is split into two columns, <code>engine-location_front</code> and <code>engine-location_rear</code> and one-hot-encoded<br>\n<code>num-of-cylinders</code> is transformed from word into integer through a pre-defined dictionary<br>\n<code>engine-size</code> is transformed into integer<br>\n<code>weight</code> is transformed into integer<br>\n<code>horsepower</code> is transformed from German decimal notation string into float number<br>\n<code>aspiration</code> is modified as <code>aspiration_turbo</code> so that turbo engines are marked as 1<br>\n<code>price</code> is converted from minor units to major units<br>\n<code>make</code> is not transformed but kept in the dataset</li>\n<li><strong>load(path):</strong>\n<strong>Load the data from previous transformation into a .csv file</strong></li>\n</ul>\n<h2>Architecture</h2>\n<p>All the functions are implemented in the <a href=\"guacamoleETL/__init__.py\" rel=\"nofollow\">__init__.py</a>, this decision is made based on the following reasons:</p>\n<ul>\n<li>After the package is imported, if we want to use the transform and load functions directly as sub-module, the functions must be imported or defined in <code>__init__.py</code>.</li>\n<li>Since they are all connected to each other, such as the transform function takes the result from pre-process (extract and clean up) and the load function also takes the result from transform function, it's easier to follow the flow if they are all in the same file.</li>\n<li>This might not be the best architecture implementation, but while starting from small, simplicity is always a good consideration.</li>\n</ul>\n\n          </div>"}, "last_serial": 4503889, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "175c6fd4fa2ef3002f7a12d929b355ff", "sha256": "c8cd67437a41fb259151da2682366e5c6806c5cb8316f02b3e97aaeb24a57fb3"}, "downloads": -1, "filename": "guacamoleETL-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "175c6fd4fa2ef3002f7a12d929b355ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6456, "upload_time": "2018-11-19T17:55:16", "upload_time_iso_8601": "2018-11-19T17:55:16.950693Z", "url": "https://files.pythonhosted.org/packages/bc/f4/c0508079f244172f00f7353c59999e2ced8ab4e9c5b662facdcc0ae554b1/guacamoleETL-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a331408b17a67742197856510acd52ee", "sha256": "2c5ccdcfec63b51a6c6e39ff6177b3b17f297e53927e12c7fbc178319b50c47a"}, "downloads": -1, "filename": "guacamoleETL-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a331408b17a67742197856510acd52ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3111, "upload_time": "2018-11-19T17:55:18", "upload_time_iso_8601": "2018-11-19T17:55:18.816430Z", "url": "https://files.pythonhosted.org/packages/fe/f8/f32e0da8ab4a45f488d7dd1cb49b31664624e831e45c5ef552d9e9e1e0fe/guacamoleETL-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "175c6fd4fa2ef3002f7a12d929b355ff", "sha256": "c8cd67437a41fb259151da2682366e5c6806c5cb8316f02b3e97aaeb24a57fb3"}, "downloads": -1, "filename": "guacamoleETL-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "175c6fd4fa2ef3002f7a12d929b355ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6456, "upload_time": "2018-11-19T17:55:16", "upload_time_iso_8601": "2018-11-19T17:55:16.950693Z", "url": "https://files.pythonhosted.org/packages/bc/f4/c0508079f244172f00f7353c59999e2ced8ab4e9c5b662facdcc0ae554b1/guacamoleETL-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a331408b17a67742197856510acd52ee", "sha256": "2c5ccdcfec63b51a6c6e39ff6177b3b17f297e53927e12c7fbc178319b50c47a"}, "downloads": -1, "filename": "guacamoleETL-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a331408b17a67742197856510acd52ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3111, "upload_time": "2018-11-19T17:55:18", "upload_time_iso_8601": "2018-11-19T17:55:18.816430Z", "url": "https://files.pythonhosted.org/packages/fe/f8/f32e0da8ab4a45f488d7dd1cb49b31664624e831e45c5ef552d9e9e1e0fe/guacamoleETL-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:28 2020"}