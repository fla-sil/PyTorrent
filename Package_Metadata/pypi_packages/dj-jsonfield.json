{"info": {"author": "Ratson", "author_email": "contact@ratson.name", "bugtrack_url": null, "classifiers": ["Framework :: Django", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "dj-jsonfield\n===================\n\nWhy fork\n--------\n\nThis is a fork of `django-jsonfield`_.\nI need to use `django-jsonfield`_ with `jsonfield`_.\nUnfortunately, both have been using the same package name ``jsonfield``,\nso I have to maintain a fork.\n\nDifference from upstream\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Rename package name from ``jsonfield`` to ``dj_jsonfield``.\n\n.. _django-jsonfield: https://bitbucket.org/schinckel/django-jsonfield\n.. _jsonfield: https://github.com/bradjasper/django-jsonfield/\n\nIntroduction\n------------\n\nI had a serious need for a JSON field for django. There were a couple out\nthere, but none packaged up nicely on bitbucket/github that were usable\nwith ``pip install -e``.\n\nSo I took the code from `David Cramer's blog`_, and packaged it up.\n\nUsage\n-----\n\nTo use, just install the package, and then use the field::\n\n    from django.db import models\n    import dj_jsonfield\n\n    class MyModel(models.Model):\n        the_json = dj_jsonfield.JSONField()\n\nYou can assign any JSON-encodable object to this field. It will be\nJSON-encoded before being stored in the database as a text value and it\nwill be turned back into a python list/dict/string upon retrieval from the\ndatabase.\n\nThere is also a ``TypedJSONField``, that allows you to define data types that must be included within each object in the array. More documentation to follow.\n\n\nNotes\n~~~~~\n\nIf no ``default`` is provided, and ``null=True`` is not passed in to the\nfield constructor, then a default of ``{}`` will be used.\n\n\nSupported django versions\n-------------------------\n\nAll versions of Django from 1.8 onwards are tested, however, if you are using Postgres, I highly recommend that you consider using the ``django.contrib.postgres`` module's ``JSONField`` instead.\n\nExtras\n------\n\njsonify templatetag\n~~~~~~~~~~~~~~~~~~~\nThis allows you to convert a python data structure into JSON within a template::\n\n    {% load jsonify %}\n\n    <script>\n    var foo = {{ bar|jsonify|safe }};\n    </script>\n\nNote that you must only use the \"safe\" filter when you use the jsonify\nfilter within a <script> tag (which is parsed like a CDATA section).\n\nIf you use it in some other places like in an HTML attribute, then\nyou must not use the safe filter so that its output is properly escaped::\n\n    <div data-foo=\"{{ bar|jsonify }}\">\n\nThe above rules are important to avoid XSS attacks with unsafe strings\nstored in the converted data structure.\n\nHistory\n----------\n\n1.0.1\n~~~~~~\nFix issue with Postgres JSONB fields.\nLimit XSS attacks with jsonify template tag.\n\n\n1.0.0\n~~~~~\n\nAdd support for Django 1.8 and 1.9 (without warnings). Remove support for Django < 1.8\nas none of those releases are supported upstream anyway.\n\nWith this version, ``JSONField`` no longer decodes assigned string values as JSON. Instead it assumes that any value that you assign is the decoded value which will be JSON-encoded before storage in the database. This explains the bump to version 1.0 as it's a backwards incompatible change.\n\n0.9.19\n~~~~~~\nAllow passing `decoder_kwargs` as an argument to a field. This dict will be passed as kwargs to\nthe `json.loads()` calls when loading data that is a string.\n\nYou may also set this as a global value in settings.JSONFIELD_DECODER_KWARGS.\n\nA new dict is created for each field: so if this value is altered after field definition, it shouldn't\naffect already attached fields.\n\n0.9.16\n~~~~~~\nAllow passing an argument of `encoder_class` to a field, which will result in that object (or\nthe object located at that path, for instance `core.utils.JSONEncoder`) being used as the `cls`\nargument when serializing objects.\n\nYou may also set this as a global value in settings.JSONFIELD_ENCODER_CLASS\n\n0.9.15\n~~~~~~\nBump version number to get around uploading issues.\n\n0.9.14\n~~~~~~\nNo longer hit the db to work out db_type.\n\n0.9.12\n~~~~~~\nCache the result of db_type.\nHandle incoming data from multiple select widget better.\n\n0.9.9\n~~~~~\nFinally strip out non-required files.\n\n0.9.8\n~~~~~\nRemove freezegun workarounds.\nFix broken build.\n\n0.9.4\n~~~~~\nFixes for mutable defaults: we serialize and then deserialize in this\ncase, so you can still use ``default={}``.\n\n0.9.3\n~~~~~\nRemove support for storing data using Postgres' 9.2's JSON data type, as\nyou cannot currently query against this!\n\nRemove support for django < 1.3.\n\n\n0.9.0\n~~~~~\nAdd LICENSE file.\nAdded TypedJSONField.\n\n\n0.8.10\n~~~~~~\nAllow ``{{ variable|jsonify }}`` to work with querysets.\n\n0.8.8\n~~~~~\nPrevent circular import problem with django 1.3.1 and gargoyle.\n\n0.8.7\n~~~~~\nBetter handle null=True and blank=True: it should make sense what they do now.\n\n0.8.5\n~~~~~\nAllow for '{}' and '[]', and make them not appear to be None.\n\n0.8.4\n~~~~~\nEnsure the version number file is installed with the package.\n\n0.8.3\n~~~~~\nStore the version number in one place only, now.\n\n0.8.2\n~~~~~\nOops. Packaging error prevented install from pypi. Added README.rst to manifest.\n\n0.8.1\n~~~~~\nConverting to string does nothing, as serializing a model instance with a JSONField would have a string version of that field, instead of it embedded inline. (Back to pre 0.8 behaviour).\n\nAdded better querying support: (``field__contains={'key':'value','key2':'value2'}`` works.)\n\nRemoved JSONTableWidget from package.\n\n0.8\n~~~\n(Many thanks to `IanLewis`_ for these features)\n\nSupports django 1.2\n\nSupports callable and json serializable objects as default\n\nImplemented get_db_prep_value()\n\nAdd tests and test runner.\n\nRemoved JSONTableWidget from README.\n\n0.7.1\n~~~~~\nDon't fail when trying to install before django is installed.\n\n0.7\n~~~\nFirst time I tagged releases.\n\n\nTodo\n----------\nAllow for passing in a function to use for processing unknown data types.\n\nConvert date/time objects nicely to/from ISO strings (YYYY-mm-dd HH:MM:SS\nTZNAME). This is actually a bit tricky, as we don't know if we are expecting\na date/time object. We may parse objects as we go, but there could be\nsome performance issues with this. I'm tempted to say \"only do this on TypedJSONField()\"\n\n.. _David Cramer's blog: http://justcramer.com/2009/04/14/cleaning-up-with-json-and-sql/\n.. _IanLewis: https://bitbucket.org/IanLewis", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ratson/dj-jsonfield/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "dj-jsonfield", "package_url": "https://pypi.org/project/dj-jsonfield/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dj-jsonfield/", "project_urls": {"Homepage": "https://github.com/ratson/dj-jsonfield/"}, "release_url": "https://pypi.org/project/dj-jsonfield/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "JSONField for django models", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"why-fork\">\n<h2>Why fork</h2>\n<p>This is a fork of <a href=\"https://bitbucket.org/schinckel/django-jsonfield\" rel=\"nofollow\">django-jsonfield</a>.\nI need to use <a href=\"https://bitbucket.org/schinckel/django-jsonfield\" rel=\"nofollow\">django-jsonfield</a> with <a href=\"https://github.com/bradjasper/django-jsonfield/\" rel=\"nofollow\">jsonfield</a>.\nUnfortunately, both have been using the same package name <tt>jsonfield</tt>,\nso I have to maintain a fork.</p>\n<div id=\"difference-from-upstream\">\n<h3>Difference from upstream</h3>\n<ul>\n<li>Rename package name from <tt>jsonfield</tt> to <tt>dj_jsonfield</tt>.</li>\n</ul>\n</div>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>I had a serious need for a JSON field for django. There were a couple out\nthere, but none packaged up nicely on bitbucket/github that were usable\nwith <tt>pip install <span class=\"pre\">-e</span></tt>.</p>\n<p>So I took the code from <a href=\"http://justcramer.com/2009/04/14/cleaning-up-with-json-and-sql/\" rel=\"nofollow\">David Cramer\u2019s blog</a>, and packaged it up.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use, just install the package, and then use the field:</p>\n<pre>from django.db import models\nimport dj_jsonfield\n\nclass MyModel(models.Model):\n    the_json = dj_jsonfield.JSONField()\n</pre>\n<p>You can assign any JSON-encodable object to this field. It will be\nJSON-encoded before being stored in the database as a text value and it\nwill be turned back into a python list/dict/string upon retrieval from the\ndatabase.</p>\n<p>There is also a <tt>TypedJSONField</tt>, that allows you to define data types that must be included within each object in the array. More documentation to follow.</p>\n<div id=\"notes\">\n<h3>Notes</h3>\n<p>If no <tt>default</tt> is provided, and <tt>null=True</tt> is not passed in to the\nfield constructor, then a default of <tt>{}</tt> will be used.</p>\n</div>\n</div>\n<div id=\"supported-django-versions\">\n<h2>Supported django versions</h2>\n<p>All versions of Django from 1.8 onwards are tested, however, if you are using Postgres, I highly recommend that you consider using the <tt>django.contrib.postgres</tt> module\u2019s <tt>JSONField</tt> instead.</p>\n</div>\n<div id=\"extras\">\n<h2>Extras</h2>\n<h2 id=\"jsonify-templatetag\"><span class=\"section-subtitle\">jsonify templatetag</span></h2>\n<p>This allows you to convert a python data structure into JSON within a template:</p>\n<pre>{% load jsonify %}\n\n&lt;script&gt;\nvar foo = {{ bar|jsonify|safe }};\n&lt;/script&gt;\n</pre>\n<p>Note that you must only use the \u201csafe\u201d filter when you use the jsonify\nfilter within a &lt;script&gt; tag (which is parsed like a CDATA section).</p>\n<p>If you use it in some other places like in an HTML attribute, then\nyou must not use the safe filter so that its output is properly escaped:</p>\n<pre>&lt;div data-foo=\"{{ bar|jsonify }}\"&gt;\n</pre>\n<p>The above rules are important to avoid XSS attacks with unsafe strings\nstored in the converted data structure.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>1.0.1</h3>\n<p>Fix issue with Postgres JSONB fields.\nLimit XSS attacks with jsonify template tag.</p>\n</div>\n<div id=\"id2\">\n<h3>1.0.0</h3>\n<p>Add support for Django 1.8 and 1.9 (without warnings). Remove support for Django &lt; 1.8\nas none of those releases are supported upstream anyway.</p>\n<p>With this version, <tt>JSONField</tt> no longer decodes assigned string values as JSON. Instead it assumes that any value that you assign is the decoded value which will be JSON-encoded before storage in the database. This explains the bump to version 1.0 as it\u2019s a backwards incompatible change.</p>\n</div>\n<div id=\"id3\">\n<h3>0.9.19</h3>\n<p>Allow passing <cite>decoder_kwargs</cite> as an argument to a field. This dict will be passed as kwargs to\nthe <cite>json.loads()</cite> calls when loading data that is a string.</p>\n<p>You may also set this as a global value in settings.JSONFIELD_DECODER_KWARGS.</p>\n<p>A new dict is created for each field: so if this value is altered after field definition, it shouldn\u2019t\naffect already attached fields.</p>\n</div>\n<div id=\"id4\">\n<h3>0.9.16</h3>\n<p>Allow passing an argument of <cite>encoder_class</cite> to a field, which will result in that object (or\nthe object located at that path, for instance <cite>core.utils.JSONEncoder</cite>) being used as the <cite>cls</cite>\nargument when serializing objects.</p>\n<p>You may also set this as a global value in settings.JSONFIELD_ENCODER_CLASS</p>\n</div>\n<div id=\"id5\">\n<h3>0.9.15</h3>\n<p>Bump version number to get around uploading issues.</p>\n</div>\n<div id=\"id6\">\n<h3>0.9.14</h3>\n<p>No longer hit the db to work out db_type.</p>\n</div>\n<div id=\"id7\">\n<h3>0.9.12</h3>\n<p>Cache the result of db_type.\nHandle incoming data from multiple select widget better.</p>\n</div>\n<div id=\"id8\">\n<h3>0.9.9</h3>\n<p>Finally strip out non-required files.</p>\n</div>\n<div id=\"id9\">\n<h3>0.9.8</h3>\n<p>Remove freezegun workarounds.\nFix broken build.</p>\n</div>\n<div id=\"id10\">\n<h3>0.9.4</h3>\n<p>Fixes for mutable defaults: we serialize and then deserialize in this\ncase, so you can still use <tt><span class=\"pre\">default={}</span></tt>.</p>\n</div>\n<div id=\"id11\">\n<h3>0.9.3</h3>\n<p>Remove support for storing data using Postgres\u2019 9.2\u2019s JSON data type, as\nyou cannot currently query against this!</p>\n<p>Remove support for django &lt; 1.3.</p>\n</div>\n<div id=\"id12\">\n<h3>0.9.0</h3>\n<p>Add LICENSE file.\nAdded TypedJSONField.</p>\n</div>\n<div id=\"id13\">\n<h3>0.8.10</h3>\n<p>Allow <tt>{{ variable|jsonify }}</tt> to work with querysets.</p>\n</div>\n<div id=\"id14\">\n<h3>0.8.8</h3>\n<p>Prevent circular import problem with django 1.3.1 and gargoyle.</p>\n</div>\n<div id=\"id15\">\n<h3>0.8.7</h3>\n<p>Better handle null=True and blank=True: it should make sense what they do now.</p>\n</div>\n<div id=\"id16\">\n<h3>0.8.5</h3>\n<p>Allow for \u2018{}\u2019 and \u2018[]\u2019, and make them not appear to be None.</p>\n</div>\n<div id=\"id17\">\n<h3>0.8.4</h3>\n<p>Ensure the version number file is installed with the package.</p>\n</div>\n<div id=\"id18\">\n<h3>0.8.3</h3>\n<p>Store the version number in one place only, now.</p>\n</div>\n<div id=\"id19\">\n<h3>0.8.2</h3>\n<p>Oops. Packaging error prevented install from pypi. Added README.rst to manifest.</p>\n</div>\n<div id=\"id20\">\n<h3>0.8.1</h3>\n<p>Converting to string does nothing, as serializing a model instance with a JSONField would have a string version of that field, instead of it embedded inline. (Back to pre 0.8 behaviour).</p>\n<p>Added better querying support: (<tt><span class=\"pre\">field__contains={'key':'value','key2':'value2'}</span></tt> works.)</p>\n<p>Removed JSONTableWidget from package.</p>\n</div>\n<div id=\"id21\">\n<h3>0.8</h3>\n<p>(Many thanks to <a href=\"https://bitbucket.org/IanLewis\" rel=\"nofollow\">IanLewis</a> for these features)</p>\n<p>Supports django 1.2</p>\n<p>Supports callable and json serializable objects as default</p>\n<p>Implemented get_db_prep_value()</p>\n<p>Add tests and test runner.</p>\n<p>Removed JSONTableWidget from README.</p>\n</div>\n<div id=\"id22\">\n<h3>0.7.1</h3>\n<p>Don\u2019t fail when trying to install before django is installed.</p>\n</div>\n<div id=\"id23\">\n<h3>0.7</h3>\n<p>First time I tagged releases.</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<p>Allow for passing in a function to use for processing unknown data types.</p>\n<p>Convert date/time objects nicely to/from ISO strings (YYYY-mm-dd HH:MM:SS\nTZNAME). This is actually a bit tricky, as we don\u2019t know if we are expecting\na date/time object. We may parse objects as we go, but there could be\nsome performance issues with this. I\u2019m tempted to say \u201conly do this on TypedJSONField()\u201d</p>\n</div>\n\n          </div>"}, "last_serial": 2404411, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e91f9b2bfdc1efd5de4fee30b1ed5701", "sha256": "a6d33af62e8486c985d392ff5cf0fc156e9d718b0d3fae6dc8802a25de934c1c"}, "downloads": -1, "filename": "dj_jsonfield-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e91f9b2bfdc1efd5de4fee30b1ed5701", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15807, "upload_time": "2016-10-17T16:02:35", "upload_time_iso_8601": "2016-10-17T16:02:35.026729Z", "url": "https://files.pythonhosted.org/packages/d3/a2/53e4a694cdd79926b56b51127ec0fcfe91609da5fb9b451831ef33fd12c8/dj_jsonfield-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bf07b0d549e46187bddc891a4732909", "sha256": "94f6cca0052f8a411c90e157ff6bd52afbd927389d979adb38bf68a4f7a9f4f5"}, "downloads": -1, "filename": "dj-jsonfield-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7bf07b0d549e46187bddc891a4732909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10749, "upload_time": "2016-10-17T16:02:37", "upload_time_iso_8601": "2016-10-17T16:02:37.005231Z", "url": "https://files.pythonhosted.org/packages/71/8c/652afdcbb7f5507a1deb75d14fa0021fb07bcf837fc9e0312a91ff0a3722/dj-jsonfield-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e91f9b2bfdc1efd5de4fee30b1ed5701", "sha256": "a6d33af62e8486c985d392ff5cf0fc156e9d718b0d3fae6dc8802a25de934c1c"}, "downloads": -1, "filename": "dj_jsonfield-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e91f9b2bfdc1efd5de4fee30b1ed5701", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15807, "upload_time": "2016-10-17T16:02:35", "upload_time_iso_8601": "2016-10-17T16:02:35.026729Z", "url": "https://files.pythonhosted.org/packages/d3/a2/53e4a694cdd79926b56b51127ec0fcfe91609da5fb9b451831ef33fd12c8/dj_jsonfield-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bf07b0d549e46187bddc891a4732909", "sha256": "94f6cca0052f8a411c90e157ff6bd52afbd927389d979adb38bf68a4f7a9f4f5"}, "downloads": -1, "filename": "dj-jsonfield-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7bf07b0d549e46187bddc891a4732909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10749, "upload_time": "2016-10-17T16:02:37", "upload_time_iso_8601": "2016-10-17T16:02:37.005231Z", "url": "https://files.pythonhosted.org/packages/71/8c/652afdcbb7f5507a1deb75d14fa0021fb07bcf837fc9e0312a91ff0a3722/dj-jsonfield-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:33 2020"}