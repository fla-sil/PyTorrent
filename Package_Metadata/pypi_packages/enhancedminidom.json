{"info": {"author": "Yves-Gwenael Bourhis", "author_email": "ygbourhis at gmail.com", "bugtrack_url": null, "classifiers": [], "description": "This module enhances minidom and will allow you to have ordered\nattributes instead of having them sorted automaticaly.\n\nIt is relevent in the fact that you may want to script the\nloading/modification/saving of xml files and then print out a diff.\nwith the normal minidom since attributes are sorted automaticaly you can\nhave an unwanted diff for each unchaged line just because the order of\nthe attributes changed.\n\nonce you load this module, just use minidom normaly.\n\nexample::\n\n    >>> from xml.dom import minidom\n    >>> import enhancedminidom\n\nthen use minidom normaly except that:\n\n+ Document and Element classes have a 'getElementsByAttributeName'\n  method which can be verry handy.\n+ 'toxml' and 'toprettyxml' will print attributes in the order they are\n  created/loaded if 'minidom.SORTEDATTRIBUTES = False' (default)\n\nexample to get all nodes having a \"foo\" attribute::\n\n    >>> document = minidom.parse('yourfile.xml')\n    >>> nodes_with_foo = document.getElementsByAttributeName('foo')\n\nexample to get all nodes having a \"foo\" attribute if they are in a \"fum\" tag::\n\n    >>> document = minidom.parse('yourfile.xml')\n    >>> nodes_with_foo = document.getElementsByAttributeName('foo', 'fum')\n\n\n\n===============\nRelease Notes :\n===============\n\nRelease 0.1:\n============\n\nFirst Version\n\nRelease 0.2:\n============\n\nFixed a typo in this doc", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "GNU General Public License version 2.0", "maintainer": null, "maintainer_email": null, "name": "enhancedminidom", "package_url": "https://pypi.org/project/enhancedminidom/", "platform": "Windows,Linux,Mac OS", "project_url": "https://pypi.org/project/enhancedminidom/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/enhancedminidom/0.2/", "requires_dist": null, "requires_python": null, "summary": "Enhance minidom in order to have ordered (instead of sorted) attributes, and a 'getElementsByAttributeName' method", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module enhances minidom and will allow you to have ordered\nattributes instead of having them sorted automaticaly.</p>\n<p>It is relevent in the fact that you may want to script the\nloading/modification/saving of xml files and then print out a diff.\nwith the normal minidom since attributes are sorted automaticaly you can\nhave an unwanted diff for each unchaged line just because the order of\nthe attributes changed.</p>\n<p>once you load this module, just use minidom normaly.</p>\n<p>example:</p>\n<pre>&gt;&gt;&gt; from xml.dom import minidom\n&gt;&gt;&gt; import enhancedminidom\n</pre>\n<p>then use minidom normaly except that:</p>\n<ul>\n<li>Document and Element classes have a \u2018getElementsByAttributeName\u2019\nmethod which can be verry handy.</li>\n<li>\u2018toxml\u2019 and \u2018toprettyxml\u2019 will print attributes in the order they are\ncreated/loaded if \u2018minidom.SORTEDATTRIBUTES = False\u2019 (default)</li>\n</ul>\n<p>example to get all nodes having a \u201cfoo\u201d attribute:</p>\n<pre>&gt;&gt;&gt; document = minidom.parse('yourfile.xml')\n&gt;&gt;&gt; nodes_with_foo = document.getElementsByAttributeName('foo')\n</pre>\n<p>example to get all nodes having a \u201cfoo\u201d attribute if they are in a \u201cfum\u201d tag:</p>\n<pre>&gt;&gt;&gt; document = minidom.parse('yourfile.xml')\n&gt;&gt;&gt; nodes_with_foo = document.getElementsByAttributeName('foo', 'fum')\n</pre>\n<div id=\"release-notes\">\n<h2>Release Notes :</h2>\n<div id=\"release-0-1\">\n<h3>Release 0.1:</h3>\n<p>First Version</p>\n</div>\n<div id=\"release-0-2\">\n<h3>Release 0.2:</h3>\n<p>Fixed a typo in this doc</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 791652, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "90f76c0a4c5672051a32610b680beaa8", "sha256": "1020cc084bf7eacceb1faeb83d6916f511503c436bc607013bf9016fdf39a394"}, "downloads": -1, "filename": "enhancedminidom-0.1.zip", "has_sig": false, "md5_digest": "90f76c0a4c5672051a32610b680beaa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3004, "upload_time": "2012-02-17T12:02:24", "upload_time_iso_8601": "2012-02-17T12:02:24.570024Z", "url": "https://files.pythonhosted.org/packages/5e/fe/0277e554bdcb61a9505cac4ebae9f032f3155ba6d36d64aa1725e031a9e0/enhancedminidom-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e67a57d9e1049d7e6d7260687231a210", "sha256": "a25bc181a71ba7e9814ee5d71a07ed7327faed195376d3f276c1c7f0da156ea1"}, "downloads": -1, "filename": "enhancedminidom-0.2.zip", "has_sig": false, "md5_digest": "e67a57d9e1049d7e6d7260687231a210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3040, "upload_time": "2012-02-17T12:05:47", "upload_time_iso_8601": "2012-02-17T12:05:47.546316Z", "url": "https://files.pythonhosted.org/packages/df/76/a194e4942036e9cc3fc06d2386f68aebe874dbda77162b7f984cac7b537f/enhancedminidom-0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e67a57d9e1049d7e6d7260687231a210", "sha256": "a25bc181a71ba7e9814ee5d71a07ed7327faed195376d3f276c1c7f0da156ea1"}, "downloads": -1, "filename": "enhancedminidom-0.2.zip", "has_sig": false, "md5_digest": "e67a57d9e1049d7e6d7260687231a210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3040, "upload_time": "2012-02-17T12:05:47", "upload_time_iso_8601": "2012-02-17T12:05:47.546316Z", "url": "https://files.pythonhosted.org/packages/df/76/a194e4942036e9cc3fc06d2386f68aebe874dbda77162b7f984cac7b537f/enhancedminidom-0.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:46:20 2020"}