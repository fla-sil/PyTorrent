{"info": {"author": "Warren Weckesser", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "las\n===\n\nThe ``las`` module implements a reader for LAS (Log ASCII Standard) well log files (LAS 2.0).\nFor more information about this format, see the Canadian Well Logging Society web page\n(http://www.cwls.org/las/).\n\nExample 1\n---------\n\nThe following file, \"example1.las\", is from \"LAS Version 2.0: A Digital Standard for\nLogs; Updated January 2014\"::\n\n    ~VERSION INFORMATION\n    VERS.                          2.0 :   CWLS LOG ASCII STANDARD -VERSION 2.0\n    WRAP.                          NO  :   ONE LINE PER DEPTH STEP\n    ~WELL INFORMATION \n    #MNEM.UNIT              DATA                       DESCRIPTION\n    #----- -----            ----------               -------------------------\n    STRT    .M              1670.0000                :START DEPTH\n    STOP    .M              1669.7500                :STOP DEPTH\n    STEP    .M              -0.1250                  :STEP \n    NULL    .               -999.25                  :NULL VALUE\n    COMP    .       ANY OIL COMPANY INC.             :COMPANY\n    WELL    .       ANY ET AL 12-34-12-34            :WELL\n    FLD     .       WILDCAT                          :FIELD\n    LOC     .       12-34-12-34W5M                   :LOCATION\n    PROV    .       ALBERTA                          :PROVINCE \n    SRVC    .       ANY LOGGING COMPANY INC.         :SERVICE COMPANY\n    DATE    .       13-DEC-86                        :LOG DATE\n    UWI     .       100123401234W500                 :UNIQUE WELL ID\n    ~CURVE INFORMATION\n    #MNEM.UNIT              API CODES                   CURVE DESCRIPTION\n    #------------------     ------------              -------------------------\n     DEPT   .M                                       :  1  DEPTH\n     DT     .US/M           60 520 32 00             :  2  SONIC TRANSIT TIME\n     RHOB   .K/M3           45 350 01 00             :  3  BULK DENSITY\n     NPHI   .V/V            42 890 00 00             :  4  NEUTRON POROSITY\n     SFLU   .OHMM           07 220 04 00             :  5  SHALLOW RESISTIVITY\n     SFLA   .OHMM           07 222 01 00             :  6  SHALLOW RESISTIVITY\n     ILM    .OHMM           07 120 44 00             :  7  MEDIUM RESISTIVITY\n     ILD    .OHMM           07 120 46 00             :  8  DEEP RESISTIVITY\n    ~PARAMETER INFORMATION\n    #MNEM.UNIT              VALUE             DESCRIPTION\n    #--------------     ----------------      -----------------------------------------------\n     MUD    .               GEL CHEM        :   MUD TYPE\n     BHT    .DEGC           35.5000         :   BOTTOM HOLE TEMPERATURE\n     BS     .MM             200.0000        :   BIT SIZE\n     FD     .K/M3           1000.0000       :   FLUID DENSITY\n     MATR   .               SAND            :   NEUTRON MATRIX\n     MDEN   .               2710.0000       :   LOGGING MATRIX DENSITY\n     RMF    .OHMM           0.2160          :   MUD FILTRATE RESISTIVITY\n     DFD    .K/M3           1525.0000       :   DRILL FLUID DENSITY\n    ~OTHER\n         Note: The logging tools became stuck at 625 metres causing the data \n         between 625 metres and 615 metres to be invalid.\n    ~A  DEPTH     DT    RHOB        NPHI   SFLU    SFLA      ILM      ILD\n    1670.000   123.450 2550.000    0.450  123.450  123.450  110.200  105.600\n    1669.875   123.450 2550.000    0.450  123.450  123.450  110.200  105.600\n    1669.750   123.450 2550.000    0.450  123.450  123.450  110.200  105.600\n\n\nSample python session::\n\n    >>> import las\n    >>> log = las.LASReader('example1.las')\n    >>> log.start\n    1670.0\n    >>> log.stop\n    1669.75\n    >>> log.step\n    -0.125\n    >>> log.null\n    -999.25\n    >>> log.well.COMP\n    LASItem(name='COMP', units='', data='ANY OIL COMPANY INC.', descr='COMPANY')\n    >>> log.well.COMP.value\n    'ANY OIL COMPANY INC.'\n    >>> log.well.FLD.value\n    'WILDCAT'\n    >>> print(log.other)\n         Note: The logging tools became stuck at 625 metres causing the data \n         between 625 metres and 615 metres to be invalid.\n\n\nThe log data is stored as a numpy structured array in ``log.data``::\n\n    >>> log.data\n    array([(1670.0, 123.45, 2550.0, 0.45, 123.45, 123.45, 110.2, 105.6),\n           (1669.875, 123.45, 2550.0, 0.45, 123.45, 123.45, 110.2, 105.6),\n           (1669.75, 123.45, 2550.0, 0.45, 123.45, 123.45, 110.2, 105.6)], \n          dtype=[('DEPT', '<f8'), ('DT', '<f8'), ('RHOB', '<f8'), ('NPHI', '<f8'), ('SFLU', '<f8'), ('SFLA', '<f8'), ('ILM', '<f8'), ('ILD', '<f8')])\n    >>> log.data['RHOB']\n    array([ 2550.,  2550.,  2550.])\n    >>> log.data[0]\n    (1670.0, 123.45, 2550.0, 0.45, 123.45, 123.45, 110.2, 105.6)\n\nThe data is also available as a two-dimensional numpy array.  First we'll\nadjust numpy's output format.  This is not necessary, but it makes the values\neasier to read::\n\n    >>> import numpy as np\n    >>> np.set_printoptions(precision=4)\n\nThe two-dimensional view of the data is called ``data2d``::\n\n    >>> log.data2d\n    array([[  1.6700e+03,   1.2345e+02,   2.5500e+03,   4.5000e-01,\n              1.2345e+02,   1.2345e+02,   1.1020e+02,   1.0560e+02],\n           [  1.6699e+03,   1.2345e+02,   2.5500e+03,   4.5000e-01,\n              1.2345e+02,   1.2345e+02,   1.1020e+02,   1.0560e+02],\n           [  1.6698e+03,   1.2345e+02,   2.5500e+03,   4.5000e-01,\n              1.2345e+02,   1.2345e+02,   1.1020e+02,   1.0560e+02]])\n    >>> log.data2d.shape\n    (3, 8)\n\n\nExample 2\n---------\n\nThe next example reads a file from the Kansas Geological Survey and makes\na plot of the gamma ray data versus depth using ``matplotlib``.\n\nFirst, the imports::\n\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> import las\n    >>> import io\n    >>> try:\n    ...     from urllib.request import urlopen\n    ... except ImportError:\n    ...     from urllib import urlopen\n    ...\n\nNext, read the file::\n\n    >>> url = \"http://www.kgs.ku.edu/software/DEWL/HELP/pc_read/Shamar-1.las\"\n    >>> f = io.StringIO(urlopen(url).read().decode('iso-8859-1'))\n    >>> log = las.LASReader(f, null_subs=np.nan)\n\nFinally, make the plot using ``matplotlib``::\n\n    >>> plt.figure(figsize=(9, 5))\n    >>> plt.plot(log.data['DEPT'], log.data['GR'])\n    >>> plt.xlabel(log.curves.DEPT.descr + \" (%s)\" % log.curves.DEPT.units)\n    >>> plt.ylabel(log.curves.GR.descr + \" (%s)\" % log.curves.GR.units)\n    >>> plt.title(log.well.WELL.data + ', ' + log.well.DATE.data)\n    >>> plt.grid()\n    >>> plt.show()\n\n.. image:: https://raw.githubusercontent.com/WarrenWeckesser/las/master/examples/example2.png\n   :alt: Example 2 plot\n   :align: center", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/WarrenWeckesser/las", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "las", "package_url": "https://pypi.org/project/las/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/las/", "project_urls": {"Homepage": "https://github.com/WarrenWeckesser/las"}, "release_url": "https://pypi.org/project/las/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A reader for Canadian Well Logging Society LAS (Log ASCII Standard) files.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The <tt>las</tt> module implements a reader for LAS (Log ASCII Standard) well log files (LAS 2.0).\nFor more information about this format, see the Canadian Well Logging Society web page\n(<a href=\"http://www.cwls.org/las/\" rel=\"nofollow\">http://www.cwls.org/las/</a>).</p>\n<div id=\"example-1\">\n<h2>Example 1</h2>\n<p>The following file, \u201cexample1.las\u201d, is from \u201cLAS Version 2.0: A Digital Standard for\nLogs; Updated January 2014\u201d:</p>\n<pre>~VERSION INFORMATION\nVERS.                          2.0 :   CWLS LOG ASCII STANDARD -VERSION 2.0\nWRAP.                          NO  :   ONE LINE PER DEPTH STEP\n~WELL INFORMATION\n#MNEM.UNIT              DATA                       DESCRIPTION\n#----- -----            ----------               -------------------------\nSTRT    .M              1670.0000                :START DEPTH\nSTOP    .M              1669.7500                :STOP DEPTH\nSTEP    .M              -0.1250                  :STEP\nNULL    .               -999.25                  :NULL VALUE\nCOMP    .       ANY OIL COMPANY INC.             :COMPANY\nWELL    .       ANY ET AL 12-34-12-34            :WELL\nFLD     .       WILDCAT                          :FIELD\nLOC     .       12-34-12-34W5M                   :LOCATION\nPROV    .       ALBERTA                          :PROVINCE\nSRVC    .       ANY LOGGING COMPANY INC.         :SERVICE COMPANY\nDATE    .       13-DEC-86                        :LOG DATE\nUWI     .       100123401234W500                 :UNIQUE WELL ID\n~CURVE INFORMATION\n#MNEM.UNIT              API CODES                   CURVE DESCRIPTION\n#------------------     ------------              -------------------------\n DEPT   .M                                       :  1  DEPTH\n DT     .US/M           60 520 32 00             :  2  SONIC TRANSIT TIME\n RHOB   .K/M3           45 350 01 00             :  3  BULK DENSITY\n NPHI   .V/V            42 890 00 00             :  4  NEUTRON POROSITY\n SFLU   .OHMM           07 220 04 00             :  5  SHALLOW RESISTIVITY\n SFLA   .OHMM           07 222 01 00             :  6  SHALLOW RESISTIVITY\n ILM    .OHMM           07 120 44 00             :  7  MEDIUM RESISTIVITY\n ILD    .OHMM           07 120 46 00             :  8  DEEP RESISTIVITY\n~PARAMETER INFORMATION\n#MNEM.UNIT              VALUE             DESCRIPTION\n#--------------     ----------------      -----------------------------------------------\n MUD    .               GEL CHEM        :   MUD TYPE\n BHT    .DEGC           35.5000         :   BOTTOM HOLE TEMPERATURE\n BS     .MM             200.0000        :   BIT SIZE\n FD     .K/M3           1000.0000       :   FLUID DENSITY\n MATR   .               SAND            :   NEUTRON MATRIX\n MDEN   .               2710.0000       :   LOGGING MATRIX DENSITY\n RMF    .OHMM           0.2160          :   MUD FILTRATE RESISTIVITY\n DFD    .K/M3           1525.0000       :   DRILL FLUID DENSITY\n~OTHER\n     Note: The logging tools became stuck at 625 metres causing the data\n     between 625 metres and 615 metres to be invalid.\n~A  DEPTH     DT    RHOB        NPHI   SFLU    SFLA      ILM      ILD\n1670.000   123.450 2550.000    0.450  123.450  123.450  110.200  105.600\n1669.875   123.450 2550.000    0.450  123.450  123.450  110.200  105.600\n1669.750   123.450 2550.000    0.450  123.450  123.450  110.200  105.600\n</pre>\n<p>Sample python session:</p>\n<pre>&gt;&gt;&gt; import las\n&gt;&gt;&gt; log = las.LASReader('example1.las')\n&gt;&gt;&gt; log.start\n1670.0\n&gt;&gt;&gt; log.stop\n1669.75\n&gt;&gt;&gt; log.step\n-0.125\n&gt;&gt;&gt; log.null\n-999.25\n&gt;&gt;&gt; log.well.COMP\nLASItem(name='COMP', units='', data='ANY OIL COMPANY INC.', descr='COMPANY')\n&gt;&gt;&gt; log.well.COMP.value\n'ANY OIL COMPANY INC.'\n&gt;&gt;&gt; log.well.FLD.value\n'WILDCAT'\n&gt;&gt;&gt; print(log.other)\n     Note: The logging tools became stuck at 625 metres causing the data\n     between 625 metres and 615 metres to be invalid.\n</pre>\n<p>The log data is stored as a numpy structured array in <tt>log.data</tt>:</p>\n<pre>&gt;&gt;&gt; log.data\narray([(1670.0, 123.45, 2550.0, 0.45, 123.45, 123.45, 110.2, 105.6),\n       (1669.875, 123.45, 2550.0, 0.45, 123.45, 123.45, 110.2, 105.6),\n       (1669.75, 123.45, 2550.0, 0.45, 123.45, 123.45, 110.2, 105.6)],\n      dtype=[('DEPT', '&lt;f8'), ('DT', '&lt;f8'), ('RHOB', '&lt;f8'), ('NPHI', '&lt;f8'), ('SFLU', '&lt;f8'), ('SFLA', '&lt;f8'), ('ILM', '&lt;f8'), ('ILD', '&lt;f8')])\n&gt;&gt;&gt; log.data['RHOB']\narray([ 2550.,  2550.,  2550.])\n&gt;&gt;&gt; log.data[0]\n(1670.0, 123.45, 2550.0, 0.45, 123.45, 123.45, 110.2, 105.6)\n</pre>\n<p>The data is also available as a two-dimensional numpy array.  First we\u2019ll\nadjust numpy\u2019s output format.  This is not necessary, but it makes the values\neasier to read:</p>\n<pre>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.set_printoptions(precision=4)\n</pre>\n<p>The two-dimensional view of the data is called <tt>data2d</tt>:</p>\n<pre>&gt;&gt;&gt; log.data2d\narray([[  1.6700e+03,   1.2345e+02,   2.5500e+03,   4.5000e-01,\n          1.2345e+02,   1.2345e+02,   1.1020e+02,   1.0560e+02],\n       [  1.6699e+03,   1.2345e+02,   2.5500e+03,   4.5000e-01,\n          1.2345e+02,   1.2345e+02,   1.1020e+02,   1.0560e+02],\n       [  1.6698e+03,   1.2345e+02,   2.5500e+03,   4.5000e-01,\n          1.2345e+02,   1.2345e+02,   1.1020e+02,   1.0560e+02]])\n&gt;&gt;&gt; log.data2d.shape\n(3, 8)\n</pre>\n</div>\n<div id=\"example-2\">\n<h2>Example 2</h2>\n<p>The next example reads a file from the Kansas Geological Survey and makes\na plot of the gamma ray data versus depth using <tt>matplotlib</tt>.</p>\n<p>First, the imports:</p>\n<pre>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import matplotlib.pyplot as plt\n&gt;&gt;&gt; import las\n&gt;&gt;&gt; import io\n&gt;&gt;&gt; try:\n...     from urllib.request import urlopen\n... except ImportError:\n...     from urllib import urlopen\n...\n</pre>\n<p>Next, read the file:</p>\n<pre>&gt;&gt;&gt; url = \"http://www.kgs.ku.edu/software/DEWL/HELP/pc_read/Shamar-1.las\"\n&gt;&gt;&gt; f = io.StringIO(urlopen(url).read().decode('iso-8859-1'))\n&gt;&gt;&gt; log = las.LASReader(f, null_subs=np.nan)\n</pre>\n<p>Finally, make the plot using <tt>matplotlib</tt>:</p>\n<pre>&gt;&gt;&gt; plt.figure(figsize=(9, 5))\n&gt;&gt;&gt; plt.plot(log.data['DEPT'], log.data['GR'])\n&gt;&gt;&gt; plt.xlabel(log.curves.DEPT.descr + \" (%s)\" % log.curves.DEPT.units)\n&gt;&gt;&gt; plt.ylabel(log.curves.GR.descr + \" (%s)\" % log.curves.GR.units)\n&gt;&gt;&gt; plt.title(log.well.WELL.data + ', ' + log.well.DATE.data)\n&gt;&gt;&gt; plt.grid()\n&gt;&gt;&gt; plt.show()\n</pre>\n<img alt=\"Example 2 plot\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e9406e6daa3d1402a05a30ee7ddc051326dd585/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f57617272656e5765636b65737365722f6c61732f6d61737465722f6578616d706c65732f6578616d706c65322e706e67\">\n</div>\n\n          </div>"}, "last_serial": 1854927, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "b58fd871ed293dbafe62469739ad4791", "sha256": "e99ed119b8d0ccf2c3bf92b3693caffc365cebcc1d2abb15a3b0c25df0833ad3"}, "downloads": -1, "filename": "las-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b58fd871ed293dbafe62469739ad4791", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8303, "upload_time": "2015-12-10T04:57:21", "upload_time_iso_8601": "2015-12-10T04:57:21.758743Z", "url": "https://files.pythonhosted.org/packages/47/66/ab21ba986336873495237b20e9210a3fc33c0695c2a476db9171be1e8fb2/las-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "b6fdcc1b00e49942564c98ec506dd99a", "sha256": "6470f3499da91b67a7fd88924967230e7c68320b3b64d516e7c646ead030b7a4"}, "downloads": -1, "filename": "las-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b6fdcc1b00e49942564c98ec506dd99a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8420, "upload_time": "2015-12-10T06:27:54", "upload_time_iso_8601": "2015-12-10T06:27:54.033337Z", "url": "https://files.pythonhosted.org/packages/a7/9d/cc63b11598e685cdbfc3c81ac75690584b46af68af784ea5585be1132780/las-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6fdcc1b00e49942564c98ec506dd99a", "sha256": "6470f3499da91b67a7fd88924967230e7c68320b3b64d516e7c646ead030b7a4"}, "downloads": -1, "filename": "las-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b6fdcc1b00e49942564c98ec506dd99a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8420, "upload_time": "2015-12-10T06:27:54", "upload_time_iso_8601": "2015-12-10T06:27:54.033337Z", "url": "https://files.pythonhosted.org/packages/a7/9d/cc63b11598e685cdbfc3c81ac75690584b46af68af784ea5585be1132780/las-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:49 2020"}