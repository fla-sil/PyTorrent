{"info": {"author": "Vars Bhat", "author_email": "emailvarsbhat@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# ytspy\n## Implementation of YTS API v2 in Python\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install `ytspy`.\n\n```bash\npip install ytspy\n```\n\n## Usage\n\n### Importing\n\nThis is a module which needs to be imported.\n\n```python\nimport ytspy\n```\n\n### Creating `ytspy` object\n\nTo use ytspy , you need to create ytspy object with  YTS Server URL . Since YTS URLs keep on changing from time to time , and  since this package is intended to work with all any Server which implements YTS APIv2 , URL is not hardcoded (also,it is illegal to hardcode the URL).\n\n```python\nytsapp = ytspy.YtsInstance(\"https://ytsinstance\") # Replace url by legit working URL\n```\n\n### Setting Values\n\nYou need to call methods to set different values required to perform different operations. Operations may or may not require some values , so it is optional to set some values.\n\n#### setlimit\nsettlimit is optionally only by listmovies() and defaults to 20 if not set . It refers to the limit of results per page . It is optional .It's range is 1 - 50 (inclusive) .\n\n```python\nytsapp.setlimit(20)\n```\n\n### setpage\nsetpage is setting page number.For example ,limit=15 and page=2 will show you movies 15-30 . It is optional and optionally required only by listmovies() .\n\n```python\nytsapp.setpage(1)\n```\n\n### setquality\nsetquality is used to filter list by a given quality . It can be either '720p','1080p', '2160p' , '3D' .\nIt is optional and optionally required only by listmovies() . If not set , it defaults to 'All' .\n\n```python\nytsapp.setquality('720p')\n```\n\n### setminrating\nsetminrating is used to filter movie by a given minimum IMDb rating . It can be in range from 0-9(inclusive) .\nIt is optional and optionally required only by listmovies() . If not set , it defaults to 0 .\n\n```python\nytsapp.setminrating(1)\n```\n### setquery\n\nsetquery is used for movie search, matching on: Movie Title/IMDb Code, Actor Name/IMDb Code, Director Name/IMDb Code. It can be any string .\nIt is optional and optionally required only by listmovies() . If not set , it defaults to nothing .\n\n```python\nytsapp.setquery('Batman')\n```\n\n### setgenre\n\nsetgenre is used to filter movie by genre . It can be either'Action', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Game Show', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'News', 'Reality-TV', 'Romance', 'Sci-Fi', 'Sport', 'Superhero', 'Talk Show', 'Thriller', 'War' , 'Western' . It is optional and optionally required only by listmovies() . If not set , it defaults to 'All' .\n\n```python\nytsapp.setgenre('Action')\n```\n\n### sortby\n\nsortby is used to get results sorted by choosen value . It can be either 'title', 'year', 'rating', 'peers', 'seeds', 'download_count', 'like_count' or 'date_added' . It is optional and optionally required only by listmovies() . If not set , it defaults to 'date_added' .\n\n```python\nytsapp.sortby('title')\n```\n### orderby\n\nsortby is used to get results ordered by choosen value . It can be either 'desc' (descending) or 'asc' (ascending) . It is optional and optionally required only by listmovies() . If not set , it defaults to 'desc' .\n\n```python\nytsapp.orderby('desc')\n```\n\n### withrtratings\n\nwithrtratings returns the list with the Rotten Tomatoes rating included if True Boolean value is passed to it. If False Boolean value is passed to it , it returns the list with the Rotten Tomatoes rating excluded . It is optional and optionally required only by listmovies() . If not set , it defaults to False Boolean value.\n\n```python\nytsapp.withrtratings(False)\n```\n### setmovieid\n\nsetmovieid is used to set ID of movie . Setting movieid is requirement for moviedetails() , moviesuggestions() ,  movieparentalguides() .\n\n```python\nytsapp.setmovieid(20)\n```\n### withimages\n\nwithimages is used to include image URLs in returned data . It is optional and required by moviedetails() . Boolean values True or False must be passed to it . If not set , withimages defaults to False Boolean value.\n\n```python\nytsapp.withimages(True)\n```\n### withcast\n\nwithimages is used to include information about cast in returned data . It is optional and required by moviedetails() . Boolean values True or False must be passed to it . If not set , withcast defaults to False Boolean value.\n\n```python\nytsapp.withcast(False)\n```\n\n\n### Classes\n\n1. Torrent:\n    Torent is dataclass consisting Torrent Information.\n\n    ```\n    date_uploaded: str\n    date_uploaded_unix: str\n    torrent_hash: str\n    peers: int\n    quality: str\n    seeds: int\n    size: str\n    size_bytes: str\n    torrent_type: str\n    url: str\n    ```\n\n2. Cast:\n    Cast is dataclass consisting Cast Information.\n\n    ```\n    character_name: str\n    imdb_code: int\n    name: str\n    url_small_image: str\n    ```\n\n\n3. Movie:\n    Movie is dataclass consisting Movie Information.\n\n    ```\n    background_image: str\n    background_image_original: str\n    cast: [Cast]\n    date_uploaded: str\n    date_uploaded_unix: str\n    description_full: str\n    description_intro: str\n    download_count: int\n    genres: []\n    movie_id: int\n    imdb_code: str\n    language: str\n    large_cover_image: str\n    large_screenshot_image1: str\n    large_screenshot_image2: str\n    large_screenshot_image3: str\n    like_count: int\n    medium_cover_image: str\n    medium_screenshot_image1: str\n    medium_screenshot_image2: str\n    medium_screenshot_image3: str\n    mpa_rating: str\n    rating: float\n    runtime: int\n    slug: str\n    small_cover_image: str\n    state: str\n    summary: str\n    synopsis: str\n    title: str\n    title_english: str\n    title_long: str\n    torrents: [Torrent]\n    url: str\n    year: int\n    yt_trailer_code: str\n    ```\n\n## Functions\n\n### listmovies()\n\nlistmovies() function returns list of Movies(where each Movie is Movie Class).Passing string Argument to this function sets the Search Query(which can also be set through setquery() method). Except withimages() and withcast() it considers every other methods . If not set ,it defaults to default values , so setting methods is optional for listmovies() .\n\n```python\n        listofmovies=ytsapp.listmovies(\"Harry Potter\")\n        # Returns list of Movies(each is Movie Class)\n```\n\n### moviedetails()\n\nlistmovies() function returns Detail of Movie specified by MovieID(Returned Movie is Movie Class).Passing integer Argument to this function sets the movieid(which can also be set through setmovieid() method). Setting MovieID is requirement for this function . Optionally it considers withimages() and withcast() .\n\n\n```python\n        moviedetail=ytsapp.moviedetails(555)\n        # Returns details of Movie(returns single Movie Class)\n```\n\n### moviesuggestions()\n\nmoviesuggestions() function returns Suggestions of Movies(where each Movie is Movie Class).Passing string Argument to this function sets the Search Query(which can also be set through setquery() method). Setting MovieID is requirement for this function.\n\n```python\n        listofmovies=ytsapp.moviesuggestions(555)\n        # Returns list of Movies(each is Movie Class)\n```\n\n### movieparentalguides()\n\nmovieparentalguides() function returns Parental Guide score of Movie specified by MovieID(Returned Movie is Movie Class).Passing integer Argument to this function sets the movieid(which can also be set through setmovieid() method) . Setting MovieID is requirement for this function .\n\n\n```python\n        movieparentalguide=ytsapp.movieparentalguides(555)\n        # Returns parental score of Movie\n```\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n[GPLv3](https://github.com/varsbhat/ytspy/blob/master/LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/varsbhat/ytspy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ytspy", "package_url": "https://pypi.org/project/ytspy/", "platform": "", "project_url": "https://pypi.org/project/ytspy/", "project_urls": {"Homepage": "https://github.com/varsbhat/ytspy"}, "release_url": "https://pypi.org/project/ytspy/1.0.11/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Implementation of YTS APIv2 in Python", "version": "1.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ytspy</h1>\n<h2>Implementation of YTS API v2 in Python</h2>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install <code>ytspy</code>.</p>\n<pre>pip install ytspy\n</pre>\n<h2>Usage</h2>\n<h3>Importing</h3>\n<p>This is a module which needs to be imported.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ytspy</span>\n</pre>\n<h3>Creating <code>ytspy</code> object</h3>\n<p>To use ytspy , you need to create ytspy object with  YTS Server URL . Since YTS URLs keep on changing from time to time , and  since this package is intended to work with all any Server which implements YTS APIv2 , URL is not hardcoded (also,it is illegal to hardcode the URL).</p>\n<pre><span class=\"n\">ytsapp</span> <span class=\"o\">=</span> <span class=\"n\">ytspy</span><span class=\"o\">.</span><span class=\"n\">YtsInstance</span><span class=\"p\">(</span><span class=\"s2\">\"https://ytsinstance\"</span><span class=\"p\">)</span> <span class=\"c1\"># Replace url by legit working URL</span>\n</pre>\n<h3>Setting Values</h3>\n<p>You need to call methods to set different values required to perform different operations. Operations may or may not require some values , so it is optional to set some values.</p>\n<h4>setlimit</h4>\n<p>settlimit is optionally only by listmovies() and defaults to 20 if not set . It refers to the limit of results per page . It is optional .It's range is 1 - 50 (inclusive) .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">setlimit</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<h3>setpage</h3>\n<p>setpage is setting page number.For example ,limit=15 and page=2 will show you movies 15-30 . It is optional and optionally required only by listmovies() .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">setpage</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h3>setquality</h3>\n<p>setquality is used to filter list by a given quality . It can be either '720p','1080p', '2160p' , '3D' .\nIt is optional and optionally required only by listmovies() . If not set , it defaults to 'All' .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">setquality</span><span class=\"p\">(</span><span class=\"s1\">'720p'</span><span class=\"p\">)</span>\n</pre>\n<h3>setminrating</h3>\n<p>setminrating is used to filter movie by a given minimum IMDb rating . It can be in range from 0-9(inclusive) .\nIt is optional and optionally required only by listmovies() . If not set , it defaults to 0 .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">setminrating</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h3>setquery</h3>\n<p>setquery is used for movie search, matching on: Movie Title/IMDb Code, Actor Name/IMDb Code, Director Name/IMDb Code. It can be any string .\nIt is optional and optionally required only by listmovies() . If not set , it defaults to nothing .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">setquery</span><span class=\"p\">(</span><span class=\"s1\">'Batman'</span><span class=\"p\">)</span>\n</pre>\n<h3>setgenre</h3>\n<p>setgenre is used to filter movie by genre . It can be either'Action', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Game Show', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'News', 'Reality-TV', 'Romance', 'Sci-Fi', 'Sport', 'Superhero', 'Talk Show', 'Thriller', 'War' , 'Western' . It is optional and optionally required only by listmovies() . If not set , it defaults to 'All' .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">setgenre</span><span class=\"p\">(</span><span class=\"s1\">'Action'</span><span class=\"p\">)</span>\n</pre>\n<h3>sortby</h3>\n<p>sortby is used to get results sorted by choosen value . It can be either 'title', 'year', 'rating', 'peers', 'seeds', 'download_count', 'like_count' or 'date_added' . It is optional and optionally required only by listmovies() . If not set , it defaults to 'date_added' .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">sortby</span><span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">)</span>\n</pre>\n<h3>orderby</h3>\n<p>sortby is used to get results ordered by choosen value . It can be either 'desc' (descending) or 'asc' (ascending) . It is optional and optionally required only by listmovies() . If not set , it defaults to 'desc' .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">orderby</span><span class=\"p\">(</span><span class=\"s1\">'desc'</span><span class=\"p\">)</span>\n</pre>\n<h3>withrtratings</h3>\n<p>withrtratings returns the list with the Rotten Tomatoes rating included if True Boolean value is passed to it. If False Boolean value is passed to it , it returns the list with the Rotten Tomatoes rating excluded . It is optional and optionally required only by listmovies() . If not set , it defaults to False Boolean value.</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">withrtratings</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h3>setmovieid</h3>\n<p>setmovieid is used to set ID of movie . Setting movieid is requirement for moviedetails() , moviesuggestions() ,  movieparentalguides() .</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">setmovieid</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<h3>withimages</h3>\n<p>withimages is used to include image URLs in returned data . It is optional and required by moviedetails() . Boolean values True or False must be passed to it . If not set , withimages defaults to False Boolean value.</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">withimages</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>withcast</h3>\n<p>withimages is used to include information about cast in returned data . It is optional and required by moviedetails() . Boolean values True or False must be passed to it . If not set , withcast defaults to False Boolean value.</p>\n<pre><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">withcast</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h3>Classes</h3>\n<ol>\n<li>\n<p>Torrent:\nTorent is dataclass consisting Torrent Information.</p>\n<pre><code>date_uploaded: str\ndate_uploaded_unix: str\ntorrent_hash: str\npeers: int\nquality: str\nseeds: int\nsize: str\nsize_bytes: str\ntorrent_type: str\nurl: str\n</code></pre>\n</li>\n<li>\n<p>Cast:\nCast is dataclass consisting Cast Information.</p>\n<pre><code>character_name: str\nimdb_code: int\nname: str\nurl_small_image: str\n</code></pre>\n</li>\n<li>\n<p>Movie:\nMovie is dataclass consisting Movie Information.</p>\n<pre><code>background_image: str\nbackground_image_original: str\ncast: [Cast]\ndate_uploaded: str\ndate_uploaded_unix: str\ndescription_full: str\ndescription_intro: str\ndownload_count: int\ngenres: []\nmovie_id: int\nimdb_code: str\nlanguage: str\nlarge_cover_image: str\nlarge_screenshot_image1: str\nlarge_screenshot_image2: str\nlarge_screenshot_image3: str\nlike_count: int\nmedium_cover_image: str\nmedium_screenshot_image1: str\nmedium_screenshot_image2: str\nmedium_screenshot_image3: str\nmpa_rating: str\nrating: float\nruntime: int\nslug: str\nsmall_cover_image: str\nstate: str\nsummary: str\nsynopsis: str\ntitle: str\ntitle_english: str\ntitle_long: str\ntorrents: [Torrent]\nurl: str\nyear: int\nyt_trailer_code: str\n</code></pre>\n</li>\n</ol>\n<h2>Functions</h2>\n<h3>listmovies()</h3>\n<p>listmovies() function returns list of Movies(where each Movie is Movie Class).Passing string Argument to this function sets the Search Query(which can also be set through setquery() method). Except withimages() and withcast() it considers every other methods . If not set ,it defaults to default values , so setting methods is optional for listmovies() .</p>\n<pre>        <span class=\"n\">listofmovies</span><span class=\"o\">=</span><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">listmovies</span><span class=\"p\">(</span><span class=\"s2\">\"Harry Potter\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Returns list of Movies(each is Movie Class)</span>\n</pre>\n<h3>moviedetails()</h3>\n<p>listmovies() function returns Detail of Movie specified by MovieID(Returned Movie is Movie Class).Passing integer Argument to this function sets the movieid(which can also be set through setmovieid() method). Setting MovieID is requirement for this function . Optionally it considers withimages() and withcast() .</p>\n<pre>        <span class=\"n\">moviedetail</span><span class=\"o\">=</span><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">moviedetails</span><span class=\"p\">(</span><span class=\"mi\">555</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Returns details of Movie(returns single Movie Class)</span>\n</pre>\n<h3>moviesuggestions()</h3>\n<p>moviesuggestions() function returns Suggestions of Movies(where each Movie is Movie Class).Passing string Argument to this function sets the Search Query(which can also be set through setquery() method). Setting MovieID is requirement for this function.</p>\n<pre>        <span class=\"n\">listofmovies</span><span class=\"o\">=</span><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">moviesuggestions</span><span class=\"p\">(</span><span class=\"mi\">555</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Returns list of Movies(each is Movie Class)</span>\n</pre>\n<h3>movieparentalguides()</h3>\n<p>movieparentalguides() function returns Parental Guide score of Movie specified by MovieID(Returned Movie is Movie Class).Passing integer Argument to this function sets the movieid(which can also be set through setmovieid() method) . Setting MovieID is requirement for this function .</p>\n<pre>        <span class=\"n\">movieparentalguide</span><span class=\"o\">=</span><span class=\"n\">ytsapp</span><span class=\"o\">.</span><span class=\"n\">movieparentalguides</span><span class=\"p\">(</span><span class=\"mi\">555</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Returns parental score of Movie</span>\n</pre>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<h2>License</h2>\n<p><a href=\"https://github.com/varsbhat/ytspy/blob/master/LICENSE\" rel=\"nofollow\">GPLv3</a></p>\n\n          </div>"}, "last_serial": 6835828, "releases": {"1.0.11": [{"comment_text": "", "digests": {"md5": "c5aa1a2f64aea20dba366422f401b2e9", "sha256": "334b74344b5a63380a59d4f585a7fc5c03ae7f6c5ffdcd75d9372583c1934043"}, "downloads": -1, "filename": "ytspy-1.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "c5aa1a2f64aea20dba366422f401b2e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19099, "upload_time": "2020-03-18T12:09:39", "upload_time_iso_8601": "2020-03-18T12:09:39.474326Z", "url": "https://files.pythonhosted.org/packages/e3/c4/5295dae135a2a908f99ac890fe2ba7ad28aa6d932e82758ff70f38bc3c93/ytspy-1.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a079226e59f68e1e84b6cf2d3a0b8c98", "sha256": "cffe55714165198f69ebeb104632ba4a2006c6f114522418ffb577145b0c2752"}, "downloads": -1, "filename": "ytspy-1.0.11.tar.gz", "has_sig": false, "md5_digest": "a079226e59f68e1e84b6cf2d3a0b8c98", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9015, "upload_time": "2020-03-18T12:09:41", "upload_time_iso_8601": "2020-03-18T12:09:41.020440Z", "url": "https://files.pythonhosted.org/packages/14/79/67db266fcc00ad8ec23e4d16bc0499f0e5906d16c54e3fc016a69c206f2b/ytspy-1.0.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c5aa1a2f64aea20dba366422f401b2e9", "sha256": "334b74344b5a63380a59d4f585a7fc5c03ae7f6c5ffdcd75d9372583c1934043"}, "downloads": -1, "filename": "ytspy-1.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "c5aa1a2f64aea20dba366422f401b2e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19099, "upload_time": "2020-03-18T12:09:39", "upload_time_iso_8601": "2020-03-18T12:09:39.474326Z", "url": "https://files.pythonhosted.org/packages/e3/c4/5295dae135a2a908f99ac890fe2ba7ad28aa6d932e82758ff70f38bc3c93/ytspy-1.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a079226e59f68e1e84b6cf2d3a0b8c98", "sha256": "cffe55714165198f69ebeb104632ba4a2006c6f114522418ffb577145b0c2752"}, "downloads": -1, "filename": "ytspy-1.0.11.tar.gz", "has_sig": false, "md5_digest": "a079226e59f68e1e84b6cf2d3a0b8c98", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9015, "upload_time": "2020-03-18T12:09:41", "upload_time_iso_8601": "2020-03-18T12:09:41.020440Z", "url": "https://files.pythonhosted.org/packages/14/79/67db266fcc00ad8ec23e4d16bc0499f0e5906d16c54e3fc016a69c206f2b/ytspy-1.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:27 2020"}