{"info": {"author": "Will Larson", "author_email": "lethain@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "==========\nExtraction\n==========\n\nExtraction is a Python package for extracting titles, descriptions,\nimages and canonical urls from web pages. You might want to use Extraction\nif you're building a link aggregator where users submit links and you\nwant to display them (like submitting a link to Facebook, Digg or Delicious).\n\nExtraction is not a web crawling or content retrieval mechanism, rather\nit is a tool to use on data which has always been retrieved or crawled\nby a different tool.\n\nUpdated to work with Python3. `See the last Python 2.x compatible version here <https://github.com/lethain/extraction/tree/c96afe2a9fd6a6d1fc1ad8eb793b43e2b9c1484c>`_.\n\nSee on `Github <https://github.com/lethain/extraction>`_, or on\n`PyPi <http://pypi.python.org/pypi/extraction/0.1.0>`_.\n\n\nHello World Usage\n=================\n\nAn extremely simple example of using `extraction` is::\n\n    >>> import extraction\n    >>> import requests\n    >>> url = \"http://lethain.com/social-hierarchies-in-engineering-organizations/\"\n    >>> html = requests.get(url).text\n    >>> extracted = extraction.Extractor().extract(html, source_url=url)\n    >>> extracted.title\n    >>> \"Social Hierarchies in Engineering Organizations - Irrational Exuberance\"\n    >>> print extracted.title, extracted.description, extracted.image, extracted.url\n    >>> print extracted.titles, extracted.descriptions, extracted.images, extracted.urls\n\nNote that `source_url` is optional in extract, but is recommended\nas it makes it possible to rewrite relative urls and image urls\ninto absolute paths. `source_url` is not used for fetching data,\nbut can be used for targetting extraction techniques to the correct\ndomain.\n\nMore details usage examples, including how to add your own\nextraction mechanisms, are beneath the installation section.\n\n\nInstallation\n============\n\nThe simplest way to install Extraction is via PyPi::\n\n    pip install extraction\n\nYou'll also have to install a parser for `BeautifulSoup4 <http://www.crummy.com/software/BeautifulSoup/>`_,\nand while ``extraction`` already pulls down `html5lib <http://code.google.com/p/html5lib/>`_\nthrough it's requirements, I really recommend installing `lxml <http://lxml.de/>`_ as well,\nbecause there are some extremely gnarly issues with `html5lib`\nfailing to parse XHTML pages (for example, PyPi fails to parse entirely\nwith html5lib::\n\n    >>> bs4.BeautifulSoup(text, [\"html5lib\"]).find_all(\"title\")\n    []\n    >>> bs4.BeautifulSoup(text, [\"lxml\"]).find_all(\"title\")\n    [<title>extraction 0.1.3 : Python Package Index</title>]\n\nYou should be able to install `lxml <http://lxml.de/>`_ via pip::\n\n    pip install lxml\n\nIf you want to develop extraction, then after installing `lxml`,\nyou can install from GitHub::\n\n    git clone\n    cd extraction\n    python3 -m venv env    \n    . ./env/bin/activate\n    pip install -r requirements.txt\n    pip install -e .\n\nThen you can run the tests::\n\n    python tests/tests.py\n\nAll of which should pass in a sane installation.\n\n\nUsing Extraction\n================\n\nThis section covers various ways to use extraction, both using\nthe existing extraction techniques as well as add your own.\n\nFor more examples, please look in the `extraction/examples`\ndirectory.\n\n\nBasic Usage\n-----------\n\nThe simplest possible example is the \"Hello World\" example from above::\n\n    >>> import extraction\n    >>> import requests\n    >>> url = \"http://lethain.com/social-hierarchies-in-engineering-organizations/\"\n    >>> html = requests.get(url).text\n    >>> extracted = extraction.Extractor().extract(html, source_url=url)\n    >>> extracted.title\n    >>> \"Social Hierarchies in Engineering Organizations - Irrational Exuberance\"\n    >>> print extracted.title, extracted.description, extracted.image, extracted.url\n\nYou can get the best title, description and such out of an `Extracted`\ninstance (which are returned by `Extractor.extract`) by::\n\n    >>> print extracted.title\n    >>> print extracted.description\n    >>> print extracted.url\n    >>> print extracted.image\n    >>> print extracted.feed\n\nYou can get the full list of extracted values using the plural versions::\n\n    >>> print extracted.titles\n    >>> print extracted.descriptions\n    >>> print extracted.urls\n    >>> print extracted.images\n    >>> print extracted.feeds\n\nIf you're looking for data which is being extracted but doesn't fall into\none of those categories (perhaps using a custom technique), then\ntake a look at the `Extracted._unexpected_values` dictionary::\n\n    >>> print extracted._unexpected_values\n\nAny type of metadata which isn't anticipated is stored there\n(look at `Subclassing Extracted to Extract New Types of Data`\nif this is something you're running into frequently).\n\n\nUsing Custom Techniques and Changing Technique Ordering\n-------------------------------------------------------\n\nThe order techniques are run in is significant, and the most accurate\ntechniques should always run first, and more general, lower quality\ntechniques later on.\n\nThis is because titles, descriptions, images and urls are stored\ninternally in a list, which is built up as techniques are run,\nand the `title`, `url`, `image` and `description` properties\nsimply return the first item from the corresponding list.\n\nTechniques are represented by a string with the full path to the\ntechnique, including its class. For example `\"extraction.technique.FacebookOpengraphTags\"`\nis a valid representation of a technique.\n\nThe default ordering of techniques is within the  extraction.Extractor's\n`techniques` class variable, and is::\n\n    extraction.techniques.FacebookOpengraphTags\n    extraction.techniques.TwitterSummaryCardTags\n    extraction.techniques.HTML5SemanticTags\n    extraction.techniques.HeadTags\n    extraction.techniques.SemanticTags\n\nYou can modify the order and inclusion of techniques in three ways.\nFirst, you can modify it by passing in a list of techniques to the\noptional `techniques` parameter when initializing an extraction.Extractor::\n\n    >>> techniques = [\"my_module.MyTechnique\", \"extraction.techniques.FacebookOpengraphTags\"]\n    >>> extractor = extraction.Extractor(techniques=techniques)\n\nThe second approach is to subclass Extractor with a different value of `techniques`::\n\n    from extraction import Extractor\n\n    class MyExtractor(Extractor):\n        techniques = [\"my_module.MyTechnique\"]\n\nFinally, the third option is to directly modify the `techniques` class variable.\nThis is probably the most unpredictable technique, as it's possible for mutiple\npieces of code to perform this modification and to create havoc, if possible\nuse one of the previous two techniques to avoid future debugging::\n\n    >>> import extraction\n    >>> extraction.Extractor.techniques.insert(0, \"my_module.MyAwesomeTechnique\")\n    >>> extraction.Extractor.techniques.append(\"my_module.MyLastReportTechnique\")\n\nAgain, please try the first two techniques instead if you value sanity.\n\n\nWriting New Technique\n---------------------\n\nIt may be that you're frequently parsing a given website and\naren't impressed with how the default extraction techniques are\nperforming. In that case, consider writng your own technique.\n\nLet's take for example a blog entry at `lethain.com <http://lethain.com/social-hierarchies-in-engineering-organizations/>`_,\nwhich uses the `H1` tag to represent the overall blogs title,\nand always uses the first `H2` tag in `DIV.page` for its actual\ntitle.\n\nA technique to properly extract this data would look like::\n\n    from extraction.techniques import Technique\n    from bs4 import BeautifulSoup\n    class LethainComTechnique(Technique):\n        def extract(self, html):\n            \"Extract data from lethain.com.\"\n            soup = BeautifulSoup(html)\n            page_div = soup.find('div', class_='page')\n            text_div = soup.find('div', class_='text')\n            return { 'titles': [page_div.find('h2').string],\n                     'dates': [page_div.find('span', class_='date').string],\n                     'descriptions': [\" \".join(text_div.find('p').strings)],\n                     'tags': [x.find('a').string for x in page_div.find_all('span', class_='tag')],\n                     'images': [x.attrs['src'] for x in text_div.find_all('img')],\n                     }\n\nTo integrate your technique, take a look at the `Using Custom Techniques and Changing Technique Ordering`\nsection above.\n\nAdding new techniques incorporating microformats is an interesting\narea for some consideration. Most microformats have very limited\nusage, but where they are in use they tend to be high quality sources\nof information.\n\n\nSubclassing Extracted to Extract New Types of Data\n--------------------------------------------------\n\nYour techniques can return non-standard keys in the dictionary\nreturned by `extract`, which will be available in the `Extracted()._unexpected_values`\ndictionary. In this way you could fairly easily add support for extracting\naddresses or whatnot.\n\nFor a contrived example, we'll extract my address from `willarson.com <http://willarson.com/>`_,\nwhich is in no way a realistic example of extracting an address, and is\nonly meant as an example of how to add a new type of extracted data.\n\nAs such, to add support for extracting address should look like (a fuller,\ncommented version of this example is available in `extraction/examples/new_return_type.py`,\nI've written this as concisely as possible to fit into this doc more cleanly)::\n\n    from extraction.techniques import Technique\n    from extraction import Extractor, Extracted\n    from bs4 import BeautifulSoup\n\n    class AddressExtracted(Extracted):\n        def __init__(self, addresses=None, *args, **kwargs):\n            self.addresses = addresses or []\n            super(AddressExtracted, self).__init__(*args, **kwargs)\n\n        @property\n        def address(self):\n            return self.addresses[0] if self.addresses else None\n\n    class AddressExtractor(Extractor):\n        \"Extractor which supports addresses as first-class data.\"\n        extracted_class = AddressExtracted\n        text_types = [\"titles\", \"descriptions\", \"addresses\"]\n\n    class AddressTechnique(Technique):\n        def extract(self, html):\n            \"Extract address data from willarson.com.\"\n            soup = BeautifulSoup(html)\n            return {'addresses': [\" \".join(soup.find('div', id='address').strings)]}\n\nUsage would then look like::\n\n    >>> import requests\n    >>> from extraction.examples.new_return_type import AddressExtractor\n    >>> extractor = AddressExtractor()\n    >>> extractor.techniques = [\"extraction.examples.new_return_type.AddressTechnique\"]\n    >>> extracted = extractor.extract(requests.get(\"http://willarson.com/\"))\n    >>> extracted.address\n    \"Cole Valey San Francisco, CA USA\"\n\nThere you have it, extracted addresses as first class extracted data.\n\n\nPassing Parameters to Techniques\n--------------------------------\n\nThere isn't a mechanism for passing parameters to Techniques\nwhen they are initialized, but it is possible to customize\nthe behavior of Techniques in a couple of ways.\n\nFirst, you can simply subclass the Technique with the specific\nbehavior you want, perhaps pulling the data from Django settings\nor what not::\n\n    class MyTechnique(Technique):\n        def __init__(self, *args, **kwargs):\n            if 'something' in kwargs:\n                self.something = kwargs['something']\n\t        del kwargs['something']\n            else:\n                self.something = \"something else\"\n            return super(MyTechnique, self).__init__(*args, **kwargs)\n\n        def extract(html, source_url=None):\n            print self.something\n            return super(MyTechnique, self).extract(html, source_url=source_url)\n\nSecond, all techniques are passed in the Extractor being used\nto process them, so you can bake the customization into an\nextraction.Extractor subclass::\n\n    from extraction import Extractor\n    from extraction.techniques import Technique\n\n    class MyExtractor(Extractor):\n        techniques = [\"my_module.MyTechnique\"]\n        def __init__(self, something, *args, **kwargs):\n            self.something = something\n            super(MyExtractor, self).__init__(*args, **kwargs)\n\n    class MyTechnique(Technique):\n        class extract(self, html, source_url=None):\n            print self.extractor.something\n            return super(MyTechnique, self).extract(html, source_url=source_url)\n\nBetween these two techniques, it should be feasible to get the\ncustomization of behavior you need.\n\n\nExtraction Techniques\n=====================\n\nThis section lists the current techniques used by extraction.\nTo rerank the techniques, remove techniques or add new techniques\nof your own, look at the `Using Extraction` section below.\n\n\nextraction.techniques.HeadTags\n------------------------------\n\nEvery webpage's head tag contains has a title tag, and many also\ninclude additional data like descriptions, RSS feeds and such.\nThis technique parses data that looks like::\n\n    <head>\n        <meta name=\"description\" content=\"Will Larson&#39;s blog about programming and other things.\" />\n        <link rel=\"alternate\" type=\"application/rss+xml\" title=\"Page Feed\" href=\"/feeds/\" />\n        <link rel=\"canonical\" href=\"http://lethain.com/digg-v4-architecture-process/\">\n        <title>Digg v4&#39;s Architecture and Development Processes - Irrational Exuberance</title>\n    </head>\n\nWhile the head tag is authoritative source of canonical URLs and RSS,\nit's often very hit or miss for titles, descriptions and such.\nAt worst, it's better than nothing.\n\nextraction.techniques.FacebookOpengraphTags\n-------------------------------------------\n\nFor better or for worse, the highest quality source of page data is usually\nthe `Facebook Opengraph meta tags <https://developers.facebook.com/docs/opengraphprotocol/>`_.\nThis technique uses Opengraph tags, which look like this::\n\n    <head>\n        ...\n        <meta property=\"og:title\" content=\"Something\"/>\n        <meta property=\"og:url\" content=\"http://www.example.org/something//\"/>\n        <meta property=\"og:image\" content=\"http://images.example.org/a/\"/>\n        <meta property=\"og:description\" content=\"Something amazing.\"/>\n        ...\n    </head>\n\nas their source of data.\n\n\nextraction.techniques.TwitterSummaryCardTags\n-------------------------------------------\n\nAnother, increasingly common set of meta tags is the `Twitter Card tags <https://dev.twitter.com/docs/cards/types/summary-card>`_.\nThis technique parses those tags, which look like::\n\n    <head>\n        ...\n        <meta name=\"twitter:card\" content=\"summary\">\n        <meta name=\"twitter:site\" content=\"@nytimes\">\n        <meta name=\"twitter:creator\" content=\"@SarahMaslinNir\">\n        <meta name=\"twitter:title\" content=\"Parade of Fans for Houston\u2019s Funeral\">\n        <meta name=\"twitter:description\" content=\"NEWARK - The guest list and parade...\">\n        <meta name=\"twitter:image\" content=\"http://graphics8.nytimes.com/images/2012/02/19/us/19whitney-span/19whitney-span-article.jpg\">\n        ...\n    </head>\n\nFor sites with cards integration (which many high quality sites have, because it's necessary for\nrendering with images in the Twitter feed), this will be a very high quality source of data.\n\nOne oddity is that Twitter cards don't include a URL tag, so they don't help much with\ncanonicalizing articles.\n\n\nextraction.techniques.HTML5SemanticTags\n---------------------------------------\n\nThe HTML5 `article` tag, and also the `video` tag give us some useful\nhints for extracting page information for the sites which happen to\nutilize these tags.\n\nThis technique will extract information from pages formed like::\n\n    <html>\n      <body>\n        <h1>This is not a title to HTML5SemanticTags</h1>\n        <article>\n          <h1>This is a title</h1>\n          <p>This is a description.</p>\n          <p>This is not a description.</p>\n        </article>\n        <video>\n          <source src=\"this_is_a_video.mp4\">\n        </video>\n      </body>\n    </html>\n\nNote that `HTML5SemanticTags` is intentionally much more conservative than\n`SemanticTags`, as it provides high quality information in the small number\nof cases where it hits, and otherwise expects `SemanticTags` to run sweep\nbehind it for the lower quality, more abundant hits it discovers.\n\n\nextraction.techniques.SemanticTags\n----------------------------------\n\nThis technique relies on the basic tags themselves--for example,\nall `img` tags include images, most `h1` and `h2` tags include titles,\nand `p` tags often include text usable as descriptions::\n\n    <html>\n      <body>\n        <h1>This will be extracted as a title.</h1>\n        <h2>So will this, but after all H1s.</h2>\n        <img src=\"this_will_be_extracted_as_an_img.png\">\n        <p>And this as a description.</p>\n        <p>This as another possible description.</p>\n        <p>This as a third possible description.</p>\n      </body>\n    </html>\n\nThere is a limit, defined within `SemanticTags` of how many\ntags of a given type will be consumed, and is usually 3-5,\nwith the exception of images, where it is 10 (as this is\nactually a valid way to detect images, unlike the others).\n\nThis is a true last resort technique.\n\n\nImplementation Details\n======================\n\nI've tried to comment the classes and modules themselves in a fairly\nindepth fashion, and would recommend reading them for the most details,\nthe recommended reading order is::\n\n    extraction/tests.py\n    extraction/__init__.py\n    extraction/techniques.py\n\nHopefully all questions are answered therein.\n\n\nContributions, Questions, Concerns\n==================================\n\nPlease open a GitHub pull-request with any improvements,\npreferably with tests, and I'll be glad to merge it in.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/extraction/", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "extraction", "package_url": "https://pypi.org/project/extraction/", "platform": "", "project_url": "https://pypi.org/project/extraction/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/extraction/"}, "release_url": "https://pypi.org/project/extraction/0.3/", "requires_dist": ["beautifulsoup4", "html5lib"], "requires_python": "", "summary": "Extract basic info from HTML webpages.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==========<br>Extraction<br>==========<br><br>Extraction is a Python package for extracting titles, descriptions,<br>images and canonical urls from web pages. You might want to use Extraction<br>if you're building a link aggregator where users submit links and you<br>want to display them (like submitting a link to Facebook, Digg or Delicious).<br><br>Extraction is not a web crawling or content retrieval mechanism, rather<br>it is a tool to use on data which has always been retrieved or crawled<br>by a different tool.<br><br>Updated to work with Python3. `See the last Python 2.x compatible version here &lt;https://github.com/lethain/extraction/tree/c96afe2a9fd6a6d1fc1ad8eb793b43e2b9c1484c&gt;`_.<br><br>See on `Github &lt;https://github.com/lethain/extraction&gt;`_, or on<br>`PyPi &lt;http://pypi.python.org/pypi/extraction/0.1.0&gt;`_.<br><br><br>Hello World Usage<br>=================<br><br>An extremely simple example of using `extraction` is::<br><br>    &gt;&gt;&gt; import extraction<br>    &gt;&gt;&gt; import requests<br>    &gt;&gt;&gt; url = \"http://lethain.com/social-hierarchies-in-engineering-organizations/\"<br>    &gt;&gt;&gt; html = requests.get(url).text<br>    &gt;&gt;&gt; extracted = extraction.Extractor().extract(html, source_url=url)<br>    &gt;&gt;&gt; extracted.title<br>    &gt;&gt;&gt; \"Social Hierarchies in Engineering Organizations - Irrational Exuberance\"<br>    &gt;&gt;&gt; print extracted.title, extracted.description, extracted.image, extracted.url<br>    &gt;&gt;&gt; print extracted.titles, extracted.descriptions, extracted.images, extracted.urls<br><br>Note that `source_url` is optional in extract, but is recommended<br>as it makes it possible to rewrite relative urls and image urls<br>into absolute paths. `source_url` is not used for fetching data,<br>but can be used for targetting extraction techniques to the correct<br>domain.<br><br>More details usage examples, including how to add your own<br>extraction mechanisms, are beneath the installation section.<br><br><br>Installation<br>============<br><br>The simplest way to install Extraction is via PyPi::<br><br>    pip install extraction<br><br>You'll also have to install a parser for `BeautifulSoup4 &lt;http://www.crummy.com/software/BeautifulSoup/&gt;`_,<br>and while ``extraction`` already pulls down `html5lib &lt;http://code.google.com/p/html5lib/&gt;`_<br>through it's requirements, I really recommend installing `lxml &lt;http://lxml.de/&gt;`_ as well,<br>because there are some extremely gnarly issues with `html5lib`<br>failing to parse XHTML pages (for example, PyPi fails to parse entirely<br>with html5lib::<br><br>    &gt;&gt;&gt; bs4.BeautifulSoup(text, [\"html5lib\"]).find_all(\"title\")<br>    []<br>    &gt;&gt;&gt; bs4.BeautifulSoup(text, [\"lxml\"]).find_all(\"title\")<br>    [&lt;title&gt;extraction 0.1.3 : Python Package Index&lt;/title&gt;]<br><br>You should be able to install `lxml &lt;http://lxml.de/&gt;`_ via pip::<br><br>    pip install lxml<br><br>If you want to develop extraction, then after installing `lxml`,<br>you can install from GitHub::<br><br>    git clone<br>    cd extraction<br>    python3 -m venv env    <br>    . ./env/bin/activate<br>    pip install -r requirements.txt<br>    pip install -e .<br><br>Then you can run the tests::<br><br>    python tests/tests.py<br><br>All of which should pass in a sane installation.<br><br><br>Using Extraction<br>================<br><br>This section covers various ways to use extraction, both using<br>the existing extraction techniques as well as add your own.<br><br>For more examples, please look in the `extraction/examples`<br>directory.<br><br><br>Basic Usage<br>-----------<br><br>The simplest possible example is the \"Hello World\" example from above::<br><br>    &gt;&gt;&gt; import extraction<br>    &gt;&gt;&gt; import requests<br>    &gt;&gt;&gt; url = \"http://lethain.com/social-hierarchies-in-engineering-organizations/\"<br>    &gt;&gt;&gt; html = requests.get(url).text<br>    &gt;&gt;&gt; extracted = extraction.Extractor().extract(html, source_url=url)<br>    &gt;&gt;&gt; extracted.title<br>    &gt;&gt;&gt; \"Social Hierarchies in Engineering Organizations - Irrational Exuberance\"<br>    &gt;&gt;&gt; print extracted.title, extracted.description, extracted.image, extracted.url<br><br>You can get the best title, description and such out of an `Extracted`<br>instance (which are returned by `Extractor.extract`) by::<br><br>    &gt;&gt;&gt; print extracted.title<br>    &gt;&gt;&gt; print extracted.description<br>    &gt;&gt;&gt; print extracted.url<br>    &gt;&gt;&gt; print extracted.image<br>    &gt;&gt;&gt; print extracted.feed<br><br>You can get the full list of extracted values using the plural versions::<br><br>    &gt;&gt;&gt; print extracted.titles<br>    &gt;&gt;&gt; print extracted.descriptions<br>    &gt;&gt;&gt; print extracted.urls<br>    &gt;&gt;&gt; print extracted.images<br>    &gt;&gt;&gt; print extracted.feeds<br><br>If you're looking for data which is being extracted but doesn't fall into<br>one of those categories (perhaps using a custom technique), then<br>take a look at the `Extracted._unexpected_values` dictionary::<br><br>    &gt;&gt;&gt; print extracted._unexpected_values<br><br>Any type of metadata which isn't anticipated is stored there<br>(look at `Subclassing Extracted to Extract New Types of Data`<br>if this is something you're running into frequently).<br><br><br>Using Custom Techniques and Changing Technique Ordering<br>-------------------------------------------------------<br><br>The order techniques are run in is significant, and the most accurate<br>techniques should always run first, and more general, lower quality<br>techniques later on.<br><br>This is because titles, descriptions, images and urls are stored<br>internally in a list, which is built up as techniques are run,<br>and the `title`, `url`, `image` and `description` properties<br>simply return the first item from the corresponding list.<br><br>Techniques are represented by a string with the full path to the<br>technique, including its class. For example `\"extraction.technique.FacebookOpengraphTags\"`<br>is a valid representation of a technique.<br><br>The default ordering of techniques is within the  extraction.Extractor's<br>`techniques` class variable, and is::<br><br>    extraction.techniques.FacebookOpengraphTags<br>    extraction.techniques.TwitterSummaryCardTags<br>    extraction.techniques.HTML5SemanticTags<br>    extraction.techniques.HeadTags<br>    extraction.techniques.SemanticTags<br><br>You can modify the order and inclusion of techniques in three ways.<br>First, you can modify it by passing in a list of techniques to the<br>optional `techniques` parameter when initializing an extraction.Extractor::<br><br>    &gt;&gt;&gt; techniques = [\"my_module.MyTechnique\", \"extraction.techniques.FacebookOpengraphTags\"]<br>    &gt;&gt;&gt; extractor = extraction.Extractor(techniques=techniques)<br><br>The second approach is to subclass Extractor with a different value of `techniques`::<br><br>    from extraction import Extractor<br><br>    class MyExtractor(Extractor):<br>        techniques = [\"my_module.MyTechnique\"]<br><br>Finally, the third option is to directly modify the `techniques` class variable.<br>This is probably the most unpredictable technique, as it's possible for mutiple<br>pieces of code to perform this modification and to create havoc, if possible<br>use one of the previous two techniques to avoid future debugging::<br><br>    &gt;&gt;&gt; import extraction<br>    &gt;&gt;&gt; extraction.Extractor.techniques.insert(0, \"my_module.MyAwesomeTechnique\")<br>    &gt;&gt;&gt; extraction.Extractor.techniques.append(\"my_module.MyLastReportTechnique\")<br><br>Again, please try the first two techniques instead if you value sanity.<br><br><br>Writing New Technique<br>---------------------<br><br>It may be that you're frequently parsing a given website and<br>aren't impressed with how the default extraction techniques are<br>performing. In that case, consider writng your own technique.<br><br>Let's take for example a blog entry at `lethain.com &lt;http://lethain.com/social-hierarchies-in-engineering-organizations/&gt;`_,<br>which uses the `H1` tag to represent the overall blogs title,<br>and always uses the first `H2` tag in `DIV.page` for its actual<br>title.<br><br>A technique to properly extract this data would look like::<br><br>    from extraction.techniques import Technique<br>    from bs4 import BeautifulSoup<br>    class LethainComTechnique(Technique):<br>        def extract(self, html):<br>            \"Extract data from lethain.com.\"<br>            soup = BeautifulSoup(html)<br>            page_div = soup.find('div', class_='page')<br>            text_div = soup.find('div', class_='text')<br>            return { 'titles': [page_div.find('h2').string],<br>                     'dates': [page_div.find('span', class_='date').string],<br>                     'descriptions': [\" \".join(text_div.find('p').strings)],<br>                     'tags': [x.find('a').string for x in page_div.find_all('span', class_='tag')],<br>                     'images': [x.attrs['src'] for x in text_div.find_all('img')],<br>                     }<br><br>To integrate your technique, take a look at the `Using Custom Techniques and Changing Technique Ordering`<br>section above.<br><br>Adding new techniques incorporating microformats is an interesting<br>area for some consideration. Most microformats have very limited<br>usage, but where they are in use they tend to be high quality sources<br>of information.<br><br><br>Subclassing Extracted to Extract New Types of Data<br>--------------------------------------------------<br><br>Your techniques can return non-standard keys in the dictionary<br>returned by `extract`, which will be available in the `Extracted()._unexpected_values`<br>dictionary. In this way you could fairly easily add support for extracting<br>addresses or whatnot.<br><br>For a contrived example, we'll extract my address from `willarson.com &lt;http://willarson.com/&gt;`_,<br>which is in no way a realistic example of extracting an address, and is<br>only meant as an example of how to add a new type of extracted data.<br><br>As such, to add support for extracting address should look like (a fuller,<br>commented version of this example is available in `extraction/examples/new_return_type.py`,<br>I've written this as concisely as possible to fit into this doc more cleanly)::<br><br>    from extraction.techniques import Technique<br>    from extraction import Extractor, Extracted<br>    from bs4 import BeautifulSoup<br><br>    class AddressExtracted(Extracted):<br>        def __init__(self, addresses=None, *args, **kwargs):<br>            self.addresses = addresses or []<br>            super(AddressExtracted, self).__init__(*args, **kwargs)<br><br>        @property<br>        def address(self):<br>            return self.addresses[0] if self.addresses else None<br><br>    class AddressExtractor(Extractor):<br>        \"Extractor which supports addresses as first-class data.\"<br>        extracted_class = AddressExtracted<br>        text_types = [\"titles\", \"descriptions\", \"addresses\"]<br><br>    class AddressTechnique(Technique):<br>        def extract(self, html):<br>            \"Extract address data from willarson.com.\"<br>            soup = BeautifulSoup(html)<br>            return {'addresses': [\" \".join(soup.find('div', id='address').strings)]}<br><br>Usage would then look like::<br><br>    &gt;&gt;&gt; import requests<br>    &gt;&gt;&gt; from extraction.examples.new_return_type import AddressExtractor<br>    &gt;&gt;&gt; extractor = AddressExtractor()<br>    &gt;&gt;&gt; extractor.techniques = [\"extraction.examples.new_return_type.AddressTechnique\"]<br>    &gt;&gt;&gt; extracted = extractor.extract(requests.get(\"http://willarson.com/\"))<br>    &gt;&gt;&gt; extracted.address<br>    \"Cole Valey San Francisco, CA USA\"<br><br>There you have it, extracted addresses as first class extracted data.<br><br><br>Passing Parameters to Techniques<br>--------------------------------<br><br>There isn't a mechanism for passing parameters to Techniques<br>when they are initialized, but it is possible to customize<br>the behavior of Techniques in a couple of ways.<br><br>First, you can simply subclass the Technique with the specific<br>behavior you want, perhaps pulling the data from Django settings<br>or what not::<br><br>    class MyTechnique(Technique):<br>        def __init__(self, *args, **kwargs):<br>            if 'something' in kwargs:<br>                self.something = kwargs['something']<br>\t        del kwargs['something']<br>            else:<br>                self.something = \"something else\"<br>            return super(MyTechnique, self).__init__(*args, **kwargs)<br><br>        def extract(html, source_url=None):<br>            print self.something<br>            return super(MyTechnique, self).extract(html, source_url=source_url)<br><br>Second, all techniques are passed in the Extractor being used<br>to process them, so you can bake the customization into an<br>extraction.Extractor subclass::<br><br>    from extraction import Extractor<br>    from extraction.techniques import Technique<br><br>    class MyExtractor(Extractor):<br>        techniques = [\"my_module.MyTechnique\"]<br>        def __init__(self, something, *args, **kwargs):<br>            self.something = something<br>            super(MyExtractor, self).__init__(*args, **kwargs)<br><br>    class MyTechnique(Technique):<br>        class extract(self, html, source_url=None):<br>            print self.extractor.something<br>            return super(MyTechnique, self).extract(html, source_url=source_url)<br><br>Between these two techniques, it should be feasible to get the<br>customization of behavior you need.<br><br><br>Extraction Techniques<br>=====================<br><br>This section lists the current techniques used by extraction.<br>To rerank the techniques, remove techniques or add new techniques<br>of your own, look at the `Using Extraction` section below.<br><br><br>extraction.techniques.HeadTags<br>------------------------------<br><br>Every webpage's head tag contains has a title tag, and many also<br>include additional data like descriptions, RSS feeds and such.<br>This technique parses data that looks like::<br><br>    &lt;head&gt;<br>        &lt;meta name=\"description\" content=\"Will Larson&amp;#39;s blog about programming and other things.\" /&gt;<br>        &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"Page Feed\" href=\"/feeds/\" /&gt;<br>        &lt;link rel=\"canonical\" href=\"http://lethain.com/digg-v4-architecture-process/\"&gt;<br>        &lt;title&gt;Digg v4&amp;#39;s Architecture and Development Processes - Irrational Exuberance&lt;/title&gt;<br>    &lt;/head&gt;<br><br>While the head tag is authoritative source of canonical URLs and RSS,<br>it's often very hit or miss for titles, descriptions and such.<br>At worst, it's better than nothing.<br><br>extraction.techniques.FacebookOpengraphTags<br>-------------------------------------------<br><br>For better or for worse, the highest quality source of page data is usually<br>the `Facebook Opengraph meta tags &lt;https://developers.facebook.com/docs/opengraphprotocol/&gt;`_.<br>This technique uses Opengraph tags, which look like this::<br><br>    &lt;head&gt;<br>        ...<br>        &lt;meta property=\"og:title\" content=\"Something\"/&gt;<br>        &lt;meta property=\"og:url\" content=\"http://www.example.org/something//\"/&gt;<br>        &lt;meta property=\"og:image\" content=\"http://images.example.org/a/\"/&gt;<br>        &lt;meta property=\"og:description\" content=\"Something amazing.\"/&gt;<br>        ...<br>    &lt;/head&gt;<br><br>as their source of data.<br><br><br>extraction.techniques.TwitterSummaryCardTags<br>-------------------------------------------<br><br>Another, increasingly common set of meta tags is the `Twitter Card tags &lt;https://dev.twitter.com/docs/cards/types/summary-card&gt;`_.<br>This technique parses those tags, which look like::<br><br>    &lt;head&gt;<br>        ...<br>        &lt;meta name=\"twitter:card\" content=\"summary\"&gt;<br>        &lt;meta name=\"twitter:site\" content=\"@nytimes\"&gt;<br>        &lt;meta name=\"twitter:creator\" content=\"@SarahMaslinNir\"&gt;<br>        &lt;meta name=\"twitter:title\" content=\"Parade of Fans for Houston\u2019s Funeral\"&gt;<br>        &lt;meta name=\"twitter:description\" content=\"NEWARK - The guest list and parade...\"&gt;<br>        &lt;meta name=\"twitter:image\" content=\"http://graphics8.nytimes.com/images/2012/02/19/us/19whitney-span/19whitney-span-article.jpg\"&gt;<br>        ...<br>    &lt;/head&gt;<br><br>For sites with cards integration (which many high quality sites have, because it's necessary for<br>rendering with images in the Twitter feed), this will be a very high quality source of data.<br><br>One oddity is that Twitter cards don't include a URL tag, so they don't help much with<br>canonicalizing articles.<br><br><br>extraction.techniques.HTML5SemanticTags<br>---------------------------------------<br><br>The HTML5 `article` tag, and also the `video` tag give us some useful<br>hints for extracting page information for the sites which happen to<br>utilize these tags.<br><br>This technique will extract information from pages formed like::<br><br>    &lt;html&gt;<br>      &lt;body&gt;<br>        &lt;h1&gt;This is not a title to HTML5SemanticTags&lt;/h1&gt;<br>        &lt;article&gt;<br>          &lt;h1&gt;This is a title&lt;/h1&gt;<br>          &lt;p&gt;This is a description.&lt;/p&gt;<br>          &lt;p&gt;This is not a description.&lt;/p&gt;<br>        &lt;/article&gt;<br>        &lt;video&gt;<br>          &lt;source src=\"this_is_a_video.mp4\"&gt;<br>        &lt;/video&gt;<br>      &lt;/body&gt;<br>    &lt;/html&gt;<br><br>Note that `HTML5SemanticTags` is intentionally much more conservative than<br>`SemanticTags`, as it provides high quality information in the small number<br>of cases where it hits, and otherwise expects `SemanticTags` to run sweep<br>behind it for the lower quality, more abundant hits it discovers.<br><br><br>extraction.techniques.SemanticTags<br>----------------------------------<br><br>This technique relies on the basic tags themselves--for example,<br>all `img` tags include images, most `h1` and `h2` tags include titles,<br>and `p` tags often include text usable as descriptions::<br><br>    &lt;html&gt;<br>      &lt;body&gt;<br>        &lt;h1&gt;This will be extracted as a title.&lt;/h1&gt;<br>        &lt;h2&gt;So will this, but after all H1s.&lt;/h2&gt;<br>        &lt;img src=\"this_will_be_extracted_as_an_img.png\"&gt;<br>        &lt;p&gt;And this as a description.&lt;/p&gt;<br>        &lt;p&gt;This as another possible description.&lt;/p&gt;<br>        &lt;p&gt;This as a third possible description.&lt;/p&gt;<br>      &lt;/body&gt;<br>    &lt;/html&gt;<br><br>There is a limit, defined within `SemanticTags` of how many<br>tags of a given type will be consumed, and is usually 3-5,<br>with the exception of images, where it is 10 (as this is<br>actually a valid way to detect images, unlike the others).<br><br>This is a true last resort technique.<br><br><br>Implementation Details<br>======================<br><br>I've tried to comment the classes and modules themselves in a fairly<br>indepth fashion, and would recommend reading them for the most details,<br>the recommended reading order is::<br><br>    extraction/tests.py<br>    extraction/__init__.py<br>    extraction/techniques.py<br><br>Hopefully all questions are answered therein.<br><br><br>Contributions, Questions, Concerns<br>==================================<br><br>Please open a GitHub pull-request with any improvements,<br>preferably with tests, and I'll be glad to merge it in.<br><br><br><br>\n          </div>"}, "last_serial": 4498268, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "392014d64e26ad9dfe81181e2f6fca9e", "sha256": "ea17d45f0f7c2bc86770b53c0ee6a3fa07803b319d9d483dff65bf7954fb1a69"}, "downloads": -1, "filename": "extraction-0.1.0.tar.gz", "has_sig": false, "md5_digest": "392014d64e26ad9dfe81181e2f6fca9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15081, "upload_time": "2012-11-24T02:08:05", "upload_time_iso_8601": "2012-11-24T02:08:05.918108Z", "url": "https://files.pythonhosted.org/packages/29/55/95b378c27f64629cea9f534caa02088733ad77b36c998278a734d98031d7/extraction-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7bc8acc31127d82fd25903af2a20c2f3", "sha256": "3688212a0c85d162ed066caedb2cc588c2222aa0ab49ef615fbbf4cd275fa98b"}, "downloads": -1, "filename": "extraction-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7bc8acc31127d82fd25903af2a20c2f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15181, "upload_time": "2012-11-24T02:41:14", "upload_time_iso_8601": "2012-11-24T02:41:14.356530Z", "url": "https://files.pythonhosted.org/packages/15/e9/caa425764327518acc0b8dd82ef8276026f791107ac30ccdf1f61a462bcd/extraction-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "8368c561f6ffc61702f65f1946915483", "sha256": "3a8d89595c568791ef33ad98ced0f368d471b892ccc2b9dce4b387a3a1cd9314"}, "downloads": -1, "filename": "extraction-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8368c561f6ffc61702f65f1946915483", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15188, "upload_time": "2012-11-24T02:44:18", "upload_time_iso_8601": "2012-11-24T02:44:18.085271Z", "url": "https://files.pythonhosted.org/packages/51/53/ba8318b247295759fc858c375895d762da0293efbd78aee4fbfa924dcc78/extraction-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "bb7366d38e44efc4e329c96049536649", "sha256": "2574bd4bdcb2e6307b89c6100fc01bfa309bd38ba9b902e492e2fb6f07ed53fb"}, "downloads": -1, "filename": "extraction-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bb7366d38e44efc4e329c96049536649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15554, "upload_time": "2012-11-24T03:21:59", "upload_time_iso_8601": "2012-11-24T03:21:59.253793Z", "url": "https://files.pythonhosted.org/packages/8d/2b/21cb7cd3b248eba4d23860c8e25b7bee1e213409946830377a63090713fb/extraction-0.1.3.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3921212ba48693074d086b432a599702", "sha256": "7130f9f7e1956313a8125c79ed5eed211430242b3c12d37f7307fc2f3ba25492"}, "downloads": -1, "filename": "extraction-0.2.macosx-10.9-intel.exe", "has_sig": false, "md5_digest": "3921212ba48693074d086b432a599702", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 97964, "upload_time": "2014-06-06T15:37:24", "upload_time_iso_8601": "2014-06-06T15:37:24.202919Z", "url": "https://files.pythonhosted.org/packages/88/ce/e4a6def8732bb9d61f35e960f1eaf6c5cb2342fa45746f83ef4f5543afe8/extraction-0.2.macosx-10.9-intel.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "a18ed0e35954def7b7d9ed5069297935", "sha256": "cf2ac4fa42a6175d98b9e90988f3b1d12ef9360b489309853ac1fb007187bfd0"}, "downloads": -1, "filename": "extraction-0.2.tar.gz", "has_sig": false, "md5_digest": "a18ed0e35954def7b7d9ed5069297935", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17377, "upload_time": "2014-06-06T15:37:20", "upload_time_iso_8601": "2014-06-06T15:37:20.389681Z", "url": "https://files.pythonhosted.org/packages/a6/4e/d599117d97d7067cd8e8d1d8a843060108687729e6d4f12b21b1ad89c647/extraction-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "e1c6e786a19b669751c2c31b4899661d", "sha256": "c39f204d1394055cd68cef1f61cfc9b231af0dc13aeb5d2d6bd85e48b69f8d1b"}, "downloads": -1, "filename": "extraction-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e1c6e786a19b669751c2c31b4899661d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21240, "upload_time": "2018-11-17T22:15:05", "upload_time_iso_8601": "2018-11-17T22:15:05.148341Z", "url": "https://files.pythonhosted.org/packages/8a/f3/17aaa649ca30a321ded2098927a9ba586a559bbbc94a897070426e0008cf/extraction-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44dec4a187c18ad0594f393407ee5f30", "sha256": "8449cb3454380689fee892c2190a6f5a3acce7d64608bff504891eb54a332858"}, "downloads": -1, "filename": "extraction-0.3.tar.gz", "has_sig": false, "md5_digest": "44dec4a187c18ad0594f393407ee5f30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18534, "upload_time": "2018-11-17T22:15:07", "upload_time_iso_8601": "2018-11-17T22:15:07.929481Z", "url": "https://files.pythonhosted.org/packages/41/34/954819612945cc79ad78f0a2c756cadf6907f38a28cf2d19a7a7a8919a60/extraction-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1c6e786a19b669751c2c31b4899661d", "sha256": "c39f204d1394055cd68cef1f61cfc9b231af0dc13aeb5d2d6bd85e48b69f8d1b"}, "downloads": -1, "filename": "extraction-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e1c6e786a19b669751c2c31b4899661d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21240, "upload_time": "2018-11-17T22:15:05", "upload_time_iso_8601": "2018-11-17T22:15:05.148341Z", "url": "https://files.pythonhosted.org/packages/8a/f3/17aaa649ca30a321ded2098927a9ba586a559bbbc94a897070426e0008cf/extraction-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44dec4a187c18ad0594f393407ee5f30", "sha256": "8449cb3454380689fee892c2190a6f5a3acce7d64608bff504891eb54a332858"}, "downloads": -1, "filename": "extraction-0.3.tar.gz", "has_sig": false, "md5_digest": "44dec4a187c18ad0594f393407ee5f30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18534, "upload_time": "2018-11-17T22:15:07", "upload_time_iso_8601": "2018-11-17T22:15:07.929481Z", "url": "https://files.pythonhosted.org/packages/41/34/954819612945cc79ad78f0a2c756cadf6907f38a28cf2d19a7a7a8919a60/extraction-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:30 2020"}