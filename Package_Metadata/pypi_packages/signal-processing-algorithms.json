{"info": {"author": "Alexander Costas", "author_email": "alexander.costas@mongodb.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Signal Processing Algorithms\n\nA suite of algorithms implementing [E-Divisive with Means](https://arxiv.org/pdf/1306.4933.pdf) and\n [Generalized ESD Test for Outliers](https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm) in python.\n\n## Getting Started - Users\n```\npip install signal-processing-algorithms\n```\n\n## Getting Started - Developers\n\nGetting the code:\n\n```\n$ git clone git@github.com:mongodb/signal-processing-algorithms.git\n$ cd signal-processing-algorithms\n```\n\nMaking a virtual environment and installing the stuff you need into it:\n```\n$ virtualenv -p python3 venv\n$ source venv/bin/activate\n$ pip install -e .\n$ pip install -r requirements.txt\n```\nTesting stuff:\n```\n$ pytest\n```\n\nRunning the slow tests:\n```\n$ pytest --runslow\n```\n\n**Some of the larger tests can take a significant amount of time (more than 2 hours).**\n\nThe linters:\n```\n$ pytest src --flake8 --black --pydocstyle --mypy\n```\n\n## Intro to E-Divisive\n\nDetecting distributional changes in a series of numerical values can be surprisingly difficult. Simple systems based on thresholds or\n mean values can be yield false positives due to outliers in the data, and will fail to detect changes in the noise\n profile of the series you are analyzing.\n \nOne robust way of detecting many of the changes missed by other approaches is to use [E-Divisive with Means](https://arxiv.org/pdf/1306.4933.pdf), an energy\n statistic based approach that compares the expected distance (Euclidean norm) between samples of two portions of the\n series with the expected distance between samples within those portions.\n \nThat is to say, assuming that the two portions can each be modeled as i.i.d. samples drawn from distinct random variables\n (X for the first portion, Y for the second portion), you would expect the following to be non-zero if there is a\n sdifference between the two portions: \n \n <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\varepsilon&space;(X,&space;Y;&space;\\alpha&space;)&space;=&space;2E|X-Y|^\\alpha&space;-&space;E|X-X'|^\\alpha&space;-&space;E|Y-Y'|^\\alpha\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\varepsilon&space;(X,&space;Y;&space;\\alpha&space;)&space;=&space;2E|X-Y|^\\alpha&space;-&space;E|X-X'|^\\alpha&space;-&space;E|Y-Y'|^\\alpha\" title=\"\\varepsilon (X, Y; \\alpha ) = 2E|X-Y|^\\alpha - E|X-X'|^\\alpha - E|Y-Y'|^\\alpha\" /></a>\n\nWhere alpha is some fixed constant in (0, 2).\nThis can be calculated empirically with samples from the portions corresponding to X, Y as follows:\n \n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\frac{2}{mn}&space;\\underset{i=1}{\\overset{n}{\\sum}}\\underset{j=1}{\\overset{m}{\\sum}}|X_{i}-Y_{j}|^\\alpha&space;-\\binom{n}{2}^{-1}\\underset{1\\leq&space;i<k\\leq&space;n}{\\sum}|X_{i}-X_{k}|^\\alpha&space;-&space;\\binom{m}{2}^{-1}\\underset{1&space;\\leq&space;j<k&space;\\leq&space;m}{\\sum}|Y_{j}-Y_{k}|^\\alpha\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\frac{2}{mn}&space;\\underset{i=1}{\\overset{n}{\\sum}}\\underset{j=1}{\\overset{m}{\\sum}}|X_{i}-Y_{j}|^\\alpha&space;-\\binom{n}{2}^{-1}\\underset{1\\leq&space;i<k\\leq&space;n}{\\sum}|X_{i}-X_{k}|^\\alpha&space;-&space;\\binom{m}{2}^{-1}\\underset{1&space;\\leq&space;j<k&space;\\leq&space;m}{\\sum}|Y_{j}-Y_{k}|^\\alpha\" title=\"\\frac{2}{mn} \\underset{i=1}{\\overset{n}{\\sum}}\\underset{j=1}{\\overset{m}{\\sum}}|X_{i}-Y_{j}|^\\alpha -\\binom{n}{2}^{-1}\\underset{1\\leq i<k\\leq n}{\\sum}|X_{i}-X_{k}|^\\alpha - \\binom{m}{2}^{-1}\\underset{1 \\leq j<k \\leq m}{\\sum}|Y_{j}-Y_{k}|^\\alpha\" /></a>\n \nThus for a series Z of length L, we find the most likely change point by solving the following for argmax(&tau;) (with a scaling factor of mn/(m+n) and &alpha;=1 for simplicity):\n\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=Z&space;=&space;\\{Z_{1},&space;...,&space;Z_{\\tau}&space;,&space;...&space;,&space;Z_{L}\\},&space;X&space;=\\{Z_{1},...,Z_{\\tau}\\},&space;Y=\\{Z_{\\tau&plus;1}\\,...,Z_{L}\\}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?Z&space;=&space;\\{Z_{1},&space;...,&space;Z_{\\tau}&space;,&space;...&space;,&space;Z_{L}\\},&space;X&space;=\\{Z_{1},...,Z_{\\tau}\\},&space;Y=\\{Z_{\\tau&plus;1}\\,...,Z_{L}\\}\" title=\"Z = \\{Z_{1}, ..., Z_{\\tau} , ... , Z_{L}\\}, X =\\{Z_{1},...,Z_{\\tau}\\}, Y=\\{Z_{\\tau+1}\\,...,Z_{L}\\}\" /></a>\n\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\frac{2}{L}(&space;\\underset{i=1}{\\overset{\\tau}{\\sum}}\\underset{j=\\tau&plus;1}{\\overset{L}{\\sum}}|X_{i}-Y_{j}|&space;-\\frac{L-\\tau}{\\tau-1}\\underset{1\\leq&space;i<k\\leq&space;\\tau}{\\sum}|X_{i}-X_{k}|&space;-&space;\\frac{\\tau}{L-\\tau-1}\\underset{\\tau&space;<&space;j<k&space;\\leq&space;L}{\\sum}|Y_{j}-Y_{k}|)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\frac{2}{L}(&space;\\underset{i=1}{\\overset{\\tau}{\\sum}}\\underset{j=\\tau&plus;1}{\\overset{L}{\\sum}}|X_{i}-Y_{j}|&space;-\\frac{L-\\tau}{\\tau-1}\\underset{1\\leq&space;i<k\\leq&space;\\tau}{\\sum}|X_{i}-X_{k}|&space;-&space;\\frac{\\tau}{L-\\tau-1}\\underset{\\tau&space;<&space;j<k&space;\\leq&space;L}{\\sum}|Y_{j}-Y_{k}|)\" title=\"\\frac{2}{L}( \\underset{i=1}{\\overset{\\tau}{\\sum}}\\underset{j=\\tau+1}{\\overset{L}{\\sum}}|X_{i}-Y_{j}| -\\frac{L-\\tau}{\\tau-1}\\underset{1\\leq i<k\\leq \\tau}{\\sum}|X_{i}-X_{k}| - \\frac{\\tau}{L-\\tau-1}\\underset{\\tau < j<k \\leq L}{\\sum}|Y_{j}-Y_{k}|)\" /></a>\n\n### Multiple Change Points\n\nThe algorithm for finding multiple change points is also simple.\n\nAssuming you have some k known change points:\n1. Partition the series into segments between/around these change points.\n2. Find the maximum value of our divergence metric _within_ each partition.\n3. Take the maximum of the maxima we have just found --> this is our k+1th change point.\n4. Return to step 1 and continue until reaching your stopping criterion.\n\n### Stopping Criterion\n\nIn this package we have implemented a permutation based test as a stopping criterion:\n\nAfter step 3 of the multiple change point procedure above, randomly permute all of the data _within_ each cluster, and\n find the most likely change point for this permuted data using the procedure laid out above. \n \nAfter performing this operation z times, count the number of\n permuted change points z' that have higher divergence metrics than the change point you calculated with un-permuted data.\n The significance level of your change point is thus z'/(z+1). \n\nWe allow users to configure a permutation tester with `pvalue`\n and `permutations` representing the significance cutoff for algorithm termination and permutations to perform for each\n test, respectively.\n \n### Example\n```\nfrom signal_processing_algorithms.e_divisive import EDivisive\nfrom signal_processing_algorithms.e_divisive.calculators import cext_calculator\nfrom signal_processing_algorithms.e_divisive.significance_test import QHatPermutationsSignificanceTester\nfrom some_module import series\n\n// Use C-Extension calculator for calculating divergence metrics\ncalculator = cext_calculator\n// Permutation tester with 1% significance threshold performing 100 permutations for each change point candidate\ntester = QHatPermutationsSignificanceTester(\n    calculator=calculator, pvalue=0.01, permutations=100\n)\nalgo = EDivisive(calculator=calculator, significance_tester=tester)\n\nchange_points = algo.get_change_points(series)\n```\n\n## Interactive Documentation\n\nIn addition to the package itself and this readme, we have a set of interactive documents that you can use to recreate experiments and investigations of this package, play with them, and make your own!\n\nThe requirement for running these documents are:\n* Docker\n* Docker Compose\n\nOnce you have these, simply navigate to [`$REPO/docs`](./docs), execute `docker-compose up` and follow the link!\n\nYou can also view these documents in non-interactive form w/o docker+compose:\n* [Profiling](./docs/profiling/algorithm_implementations.ipynb)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mongodb/signal-processing-algorithms", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "signal-processing-algorithms", "package_url": "https://pypi.org/project/signal-processing-algorithms/", "platform": "", "project_url": "https://pypi.org/project/signal-processing-algorithms/", "project_urls": {"Homepage": "https://github.com/mongodb/signal-processing-algorithms", "Repository": "https://github.com/mongodb/signal-processing-algorithms"}, "release_url": "https://pypi.org/project/signal-processing-algorithms/1.2.1/", "requires_dist": ["misc-utils-py (>=0.1.0,<0.2.0)", "more-itertools (>=8.2.0,<9.0.0)", "numpy (>=1.18.1,<2.0.0)", "scipy (>=1.3,<2.0)", "structlog (>=19.1,<20.0)", "typing-extensions (>=3.7.4,<4.0.0)"], "requires_python": ">=3.7,<4.0", "summary": "Signal Processing Algorithms from MongoDB", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Signal Processing Algorithms</h1>\n<p>A suite of algorithms implementing <a href=\"https://arxiv.org/pdf/1306.4933.pdf\" rel=\"nofollow\">E-Divisive with Means</a> and\n<a href=\"https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\" rel=\"nofollow\">Generalized ESD Test for Outliers</a> in python.</p>\n<h2>Getting Started - Users</h2>\n<pre><code>pip install signal-processing-algorithms\n</code></pre>\n<h2>Getting Started - Developers</h2>\n<p>Getting the code:</p>\n<pre><code>$ git clone git@github.com:mongodb/signal-processing-algorithms.git\n$ cd signal-processing-algorithms\n</code></pre>\n<p>Making a virtual environment and installing the stuff you need into it:</p>\n<pre><code>$ virtualenv -p python3 venv\n$ source venv/bin/activate\n$ pip install -e .\n$ pip install -r requirements.txt\n</code></pre>\n<p>Testing stuff:</p>\n<pre><code>$ pytest\n</code></pre>\n<p>Running the slow tests:</p>\n<pre><code>$ pytest --runslow\n</code></pre>\n<p><strong>Some of the larger tests can take a significant amount of time (more than 2 hours).</strong></p>\n<p>The linters:</p>\n<pre><code>$ pytest src --flake8 --black --pydocstyle --mypy\n</code></pre>\n<h2>Intro to E-Divisive</h2>\n<p>Detecting distributional changes in a series of numerical values can be surprisingly difficult. Simple systems based on thresholds or\nmean values can be yield false positives due to outliers in the data, and will fail to detect changes in the noise\nprofile of the series you are analyzing.</p>\n<p>One robust way of detecting many of the changes missed by other approaches is to use <a href=\"https://arxiv.org/pdf/1306.4933.pdf\" rel=\"nofollow\">E-Divisive with Means</a>, an energy\nstatistic based approach that compares the expected distance (Euclidean norm) between samples of two portions of the\nseries with the expected distance between samples within those portions.</p>\n<p>That is to say, assuming that the two portions can each be modeled as i.i.d. samples drawn from distinct random variables\n(X for the first portion, Y for the second portion), you would expect the following to be non-zero if there is a\nsdifference between the two portions:</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=%5Cvarepsilon&amp;space;(X,&amp;space;Y;&amp;space;%5Calpha&amp;space;)&amp;space;=&amp;space;2E%7CX-Y%7C%5E%5Calpha&amp;space;-&amp;space;E%7CX-X'%7C%5E%5Calpha&amp;space;-&amp;space;E%7CY-Y'%7C%5E%5Calpha\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b946c66216e4f3e05783a318a6c6d3a97ba8210/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f5c766172657073696c6f6e2673706163653b28582c2673706163653b593b2673706163653b5c616c7068612673706163653b292673706163653b3d2673706163653b32457c582d597c5e5c616c7068612673706163653b2d2673706163653b457c582d58277c5e5c616c7068612673706163653b2d2673706163653b457c592d59277c5e5c616c706861\"></a></p>\n<p>Where alpha is some fixed constant in (0, 2).\nThis can be calculated empirically with samples from the portions corresponding to X, Y as follows:</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=%5Cfrac%7B2%7D%7Bmn%7D&amp;space;%5Cunderset%7Bi=1%7D%7B%5Coverset%7Bn%7D%7B%5Csum%7D%7D%5Cunderset%7Bj=1%7D%7B%5Coverset%7Bm%7D%7B%5Csum%7D%7D%7CX_%7Bi%7D-Y_%7Bj%7D%7C%5E%5Calpha&amp;space;-%5Cbinom%7Bn%7D%7B2%7D%5E%7B-1%7D%5Cunderset%7B1%5Cleq&amp;space;i&lt;k%5Cleq&amp;space;n%7D%7B%5Csum%7D%7CX_%7Bi%7D-X_%7Bk%7D%7C%5E%5Calpha&amp;space;-&amp;space;%5Cbinom%7Bm%7D%7B2%7D%5E%7B-1%7D%5Cunderset%7B1&amp;space;%5Cleq&amp;space;j&lt;k&amp;space;%5Cleq&amp;space;m%7D%7B%5Csum%7D%7CY_%7Bj%7D-Y_%7Bk%7D%7C%5E%5Calpha\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/623f364da77c9a0fbcd193d55a7045625f2651eb/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f5c667261637b327d7b6d6e7d2673706163653b5c756e6465727365747b693d317d7b5c6f7665727365747b6e7d7b5c73756d7d7d5c756e6465727365747b6a3d317d7b5c6f7665727365747b6d7d7b5c73756d7d7d7c585f7b697d2d595f7b6a7d7c5e5c616c7068612673706163653b2d5c62696e6f6d7b6e7d7b327d5e7b2d317d5c756e6465727365747b315c6c65712673706163653b693c6b5c6c65712673706163653b6e7d7b5c73756d7d7c585f7b697d2d585f7b6b7d7c5e5c616c7068612673706163653b2d2673706163653b5c62696e6f6d7b6d7d7b327d5e7b2d317d5c756e6465727365747b312673706163653b5c6c65712673706163653b6a3c6b2673706163653b5c6c65712673706163653b6d7d7b5c73756d7d7c595f7b6a7d2d595f7b6b7d7c5e5c616c706861\"></a></p>\n<p>Thus for a series Z of length L, we find the most likely change point by solving the following for argmax(\u03c4) (with a scaling factor of mn/(m+n) and \u03b1=1 for simplicity):</p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=Z&amp;space;=&amp;space;%5C%7BZ_%7B1%7D,&amp;space;...,&amp;space;Z_%7B%5Ctau%7D&amp;space;,&amp;space;...&amp;space;,&amp;space;Z_%7BL%7D%5C%7D,&amp;space;X&amp;space;=%5C%7BZ_%7B1%7D,...,Z_%7B%5Ctau%7D%5C%7D,&amp;space;Y=%5C%7BZ_%7B%5Ctau&amp;plus;1%7D%5C,...,Z_%7BL%7D%5C%7D\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52e3ff263545f9bfedce5d79530456c8cb3f99c0/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f5a2673706163653b3d2673706163653b5c7b5a5f7b317d2c2673706163653b2e2e2e2c2673706163653b5a5f7b5c7461757d2673706163653b2c2673706163653b2e2e2e2673706163653b2c2673706163653b5a5f7b4c7d5c7d2c2673706163653b582673706163653b3d5c7b5a5f7b317d2c2e2e2e2c5a5f7b5c7461757d5c7d2c2673706163653b593d5c7b5a5f7b5c74617526706c75733b317d5c2c2e2e2e2c5a5f7b4c7d5c7d\"></a></p>\n<p><a href=\"https://www.codecogs.com/eqnedit.php?latex=%5Cfrac%7B2%7D%7BL%7D(&amp;space;%5Cunderset%7Bi=1%7D%7B%5Coverset%7B%5Ctau%7D%7B%5Csum%7D%7D%5Cunderset%7Bj=%5Ctau&amp;plus;1%7D%7B%5Coverset%7BL%7D%7B%5Csum%7D%7D%7CX_%7Bi%7D-Y_%7Bj%7D%7C&amp;space;-%5Cfrac%7BL-%5Ctau%7D%7B%5Ctau-1%7D%5Cunderset%7B1%5Cleq&amp;space;i&lt;k%5Cleq&amp;space;%5Ctau%7D%7B%5Csum%7D%7CX_%7Bi%7D-X_%7Bk%7D%7C&amp;space;-&amp;space;%5Cfrac%7B%5Ctau%7D%7BL-%5Ctau-1%7D%5Cunderset%7B%5Ctau&amp;space;&lt;&amp;space;j&lt;k&amp;space;%5Cleq&amp;space;L%7D%7B%5Csum%7D%7CY_%7Bj%7D-Y_%7Bk%7D%7C)\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/472eeaa600d9c0994b616f379a3eafe2a3f05bba/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f5c667261637b327d7b4c7d282673706163653b5c756e6465727365747b693d317d7b5c6f7665727365747b5c7461757d7b5c73756d7d7d5c756e6465727365747b6a3d5c74617526706c75733b317d7b5c6f7665727365747b4c7d7b5c73756d7d7d7c585f7b697d2d595f7b6a7d7c2673706163653b2d5c667261637b4c2d5c7461757d7b5c7461752d317d5c756e6465727365747b315c6c65712673706163653b693c6b5c6c65712673706163653b5c7461757d7b5c73756d7d7c585f7b697d2d585f7b6b7d7c2673706163653b2d2673706163653b5c667261637b5c7461757d7b4c2d5c7461752d317d5c756e6465727365747b5c7461752673706163653b3c2673706163653b6a3c6b2673706163653b5c6c65712673706163653b4c7d7b5c73756d7d7c595f7b6a7d2d595f7b6b7d7c29\"></a></p>\n<h3>Multiple Change Points</h3>\n<p>The algorithm for finding multiple change points is also simple.</p>\n<p>Assuming you have some k known change points:</p>\n<ol>\n<li>Partition the series into segments between/around these change points.</li>\n<li>Find the maximum value of our divergence metric <em>within</em> each partition.</li>\n<li>Take the maximum of the maxima we have just found --&gt; this is our k+1th change point.</li>\n<li>Return to step 1 and continue until reaching your stopping criterion.</li>\n</ol>\n<h3>Stopping Criterion</h3>\n<p>In this package we have implemented a permutation based test as a stopping criterion:</p>\n<p>After step 3 of the multiple change point procedure above, randomly permute all of the data <em>within</em> each cluster, and\nfind the most likely change point for this permuted data using the procedure laid out above.</p>\n<p>After performing this operation z times, count the number of\npermuted change points z' that have higher divergence metrics than the change point you calculated with un-permuted data.\nThe significance level of your change point is thus z'/(z+1).</p>\n<p>We allow users to configure a permutation tester with <code>pvalue</code>\nand <code>permutations</code> representing the significance cutoff for algorithm termination and permutations to perform for each\ntest, respectively.</p>\n<h3>Example</h3>\n<pre><code>from signal_processing_algorithms.e_divisive import EDivisive\nfrom signal_processing_algorithms.e_divisive.calculators import cext_calculator\nfrom signal_processing_algorithms.e_divisive.significance_test import QHatPermutationsSignificanceTester\nfrom some_module import series\n\n// Use C-Extension calculator for calculating divergence metrics\ncalculator = cext_calculator\n// Permutation tester with 1% significance threshold performing 100 permutations for each change point candidate\ntester = QHatPermutationsSignificanceTester(\n    calculator=calculator, pvalue=0.01, permutations=100\n)\nalgo = EDivisive(calculator=calculator, significance_tester=tester)\n\nchange_points = algo.get_change_points(series)\n</code></pre>\n<h2>Interactive Documentation</h2>\n<p>In addition to the package itself and this readme, we have a set of interactive documents that you can use to recreate experiments and investigations of this package, play with them, and make your own!</p>\n<p>The requirement for running these documents are:</p>\n<ul>\n<li>Docker</li>\n<li>Docker Compose</li>\n</ul>\n<p>Once you have these, simply navigate to <a href=\"./docs\" rel=\"nofollow\"><code>$REPO/docs</code></a>, execute <code>docker-compose up</code> and follow the link!</p>\n<p>You can also view these documents in non-interactive form w/o docker+compose:</p>\n<ul>\n<li><a href=\"./docs/profiling/algorithm_implementations.ipynb\" rel=\"nofollow\">Profiling</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6995760, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "693f2b3d6f1b87500bd917f15da4e255", "sha256": "35f29025c4daa80caabacdc1f70fdf4853198c99dd5d09f344a4a852b07c66d2"}, "downloads": -1, "filename": "signal_processing_algorithms-0.0.0-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "693f2b3d6f1b87500bd917f15da4e255", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7,<4.0", "size": 22533, "upload_time": "2020-03-16T18:45:11", "upload_time_iso_8601": "2020-03-16T18:45:11.548942Z", "url": "https://files.pythonhosted.org/packages/77/12/9dd892b3082b460a682a23dfd28546711d06e956669b656e125fdf7131a2/signal_processing_algorithms-0.0.0-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0177ef816a45f84680dc2940bed33a94", "sha256": "c106a98cecc5bec07f33910d7914f26ceff3bba5c01637efcd4197992cb82821"}, "downloads": -1, "filename": "signal-processing-algorithms-0.0.0.tar.gz", "has_sig": false, "md5_digest": "0177ef816a45f84680dc2940bed33a94", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18939, "upload_time": "2020-03-16T18:45:10", "upload_time_iso_8601": "2020-03-16T18:45:10.396385Z", "url": "https://files.pythonhosted.org/packages/11/85/1b28e021157f8c34bf4ad3d9d161f30041acdd9622181744daa16e199c95/signal-processing-algorithms-0.0.0.tar.gz", "yanked": false}], "0.0.0rc1": [{"comment_text": "", "digests": {"md5": "dde1267b8600a5880a79b6d7f045cfe5", "sha256": "1c2fd464e6414b544ba6638c44d87f093a3ed35af8c5db4c7c3f6d2c9c8d5002"}, "downloads": -1, "filename": "signal_processing_algorithms-0.0.0rc1-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "dde1267b8600a5880a79b6d7f045cfe5", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7,<4.0", "size": 22580, "upload_time": "2020-03-16T18:52:50", "upload_time_iso_8601": "2020-03-16T18:52:50.602003Z", "url": "https://files.pythonhosted.org/packages/70/5d/e5e9e4ecc639ff61f5567797f0df9f3767d94de87ddaea2d29e5630dba4a/signal_processing_algorithms-0.0.0rc1-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d4e21ee789cc725ac5b3f23bd8d6c17", "sha256": "8d1e7d9be13ebd9159dda15d62c04109afc2aa6419069d463707b93e2177a9a8"}, "downloads": -1, "filename": "signal-processing-algorithms-0.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "3d4e21ee789cc725ac5b3f23bd8d6c17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 19014, "upload_time": "2020-03-16T18:52:49", "upload_time_iso_8601": "2020-03-16T18:52:49.580479Z", "url": "https://files.pythonhosted.org/packages/72/63/12437e0d39f59ab346e86fa6789daf42605780d6ee685c0e6dacf3d69537/signal-processing-algorithms-0.0.0rc1.tar.gz", "yanked": false}], "0.0.0rc2": [{"comment_text": "", "digests": {"md5": "42a4c007d665be2be3abe5e89ab6600e", "sha256": "bc1a77fe7f81bcf06e84f95ae64fdc9967aa820850447e06e4a60b1bc2248502"}, "downloads": -1, "filename": "signal_processing_algorithms-0.0.0rc2-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "42a4c007d665be2be3abe5e89ab6600e", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7,<4.0", "size": 22596, "upload_time": "2020-03-16T18:54:08", "upload_time_iso_8601": "2020-03-16T18:54:08.651150Z", "url": "https://files.pythonhosted.org/packages/b7/07/84a1447d027e0cd9d97585b36c5e85121ba6d3983c2801de0658f9f29b74/signal_processing_algorithms-0.0.0rc2-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "221dfe2a9aa11566d6b3046b4341ca4d", "sha256": "8e6d1b257ce713912dd9a576038b216bb3a94d4b02b39dbbff62e939fc603584"}, "downloads": -1, "filename": "signal-processing-algorithms-0.0.0rc2.tar.gz", "has_sig": false, "md5_digest": "221dfe2a9aa11566d6b3046b4341ca4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 19046, "upload_time": "2020-03-16T18:54:07", "upload_time_iso_8601": "2020-03-16T18:54:07.451624Z", "url": "https://files.pythonhosted.org/packages/69/99/b0eca649bca82ad70084b9200b6d2d328b940899d5352436c1ca5253c66f/signal-processing-algorithms-0.0.0rc2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "0fd500c6469337acfa6af3e33ac33184", "sha256": "01a3557dbdb741e73d1e903cab099d76456baed3f3db143480234154cdd0d78c"}, "downloads": -1, "filename": "signal_processing_algorithms-1.0.4-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "0fd500c6469337acfa6af3e33ac33184", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3", "size": 21431, "upload_time": "2020-02-12T21:32:47", "upload_time_iso_8601": "2020-02-12T21:32:47.566912Z", "url": "https://files.pythonhosted.org/packages/9e/aa/c096194a90d511c3d9bedfc36d3481d9f497638eb9675114b6d2bf60a979/signal_processing_algorithms-1.0.4-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52f183ca4e2eec9b2f1483d00c9ae649", "sha256": "30c77b508f703228648cf760759b248bd6b834fb326ccd30988a9121818dab16"}, "downloads": -1, "filename": "signal_processing_algorithms-1.0.4.tar.gz", "has_sig": false, "md5_digest": "52f183ca4e2eec9b2f1483d00c9ae649", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 14699, "upload_time": "2020-02-12T21:32:49", "upload_time_iso_8601": "2020-02-12T21:32:49.586091Z", "url": "https://files.pythonhosted.org/packages/90/71/068a6b72ed76dd379a768e1ff48b624bda29458c9e91da21715569248698/signal_processing_algorithms-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2fd1e9f31912e79fc3a824575113ffca", "sha256": "d286d75bb5981730d978849961d7cc84e40c94620393214639af31be1151262c"}, "downloads": -1, "filename": "signal_processing_algorithms-1.1.0-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "2fd1e9f31912e79fc3a824575113ffca", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7,<4.0", "size": 22564, "upload_time": "2020-03-17T13:54:09", "upload_time_iso_8601": "2020-03-17T13:54:09.990881Z", "url": "https://files.pythonhosted.org/packages/70/94/53121604b2dd84a16a17d1c00d462dc3085aea1e8a84fa5a95c618856e75/signal_processing_algorithms-1.1.0-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eb2a170c117b57b885394888d0c9228", "sha256": "2c3e753b8f7f66559fb9c93d0ae60e92d224bd269831ef8e36ade35aabfcc280"}, "downloads": -1, "filename": "signal-processing-algorithms-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6eb2a170c117b57b885394888d0c9228", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 19004, "upload_time": "2020-03-17T13:54:08", "upload_time_iso_8601": "2020-03-17T13:54:08.864602Z", "url": "https://files.pythonhosted.org/packages/e5/54/9841779a691f0585057e0ea6286f6af58eaf31720dfe9d900243f4ec61ca/signal-processing-algorithms-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "d0617ddd8d01e0217c16e89ac6f153aa", "sha256": "8ce99708c5d53b6a3e86faf7fef2fc255f078133761d44b50b0810e6b2c26037"}, "downloads": -1, "filename": "signal-processing-algorithms-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d0617ddd8d01e0217c16e89ac6f153aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18835, "upload_time": "2020-03-17T19:35:47", "upload_time_iso_8601": "2020-03-17T19:35:47.177093Z", "url": "https://files.pythonhosted.org/packages/0b/96/b676812e3826101968bbf85da37b71b380f7440795bd54bda50763c178a4/signal-processing-algorithms-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "ca563876dc910a709d7de66dc32046f2", "sha256": "8efe41bec7a7794a04ddf0575c3499a805cd5e6e5e70ca380a68d0495aa3c578"}, "downloads": -1, "filename": "signal-processing-algorithms-1.2.1.tar.gz", "has_sig": false, "md5_digest": "ca563876dc910a709d7de66dc32046f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 19370, "upload_time": "2020-04-10T18:51:03", "upload_time_iso_8601": "2020-04-10T18:51:03.707208Z", "url": "https://files.pythonhosted.org/packages/b6/55/56ef926640e9406f7b35e400ba46cc80a9bb37858a8aa5486336ee6f8d7a/signal-processing-algorithms-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca563876dc910a709d7de66dc32046f2", "sha256": "8efe41bec7a7794a04ddf0575c3499a805cd5e6e5e70ca380a68d0495aa3c578"}, "downloads": -1, "filename": "signal-processing-algorithms-1.2.1.tar.gz", "has_sig": false, "md5_digest": "ca563876dc910a709d7de66dc32046f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 19370, "upload_time": "2020-04-10T18:51:03", "upload_time_iso_8601": "2020-04-10T18:51:03.707208Z", "url": "https://files.pythonhosted.org/packages/b6/55/56ef926640e9406f7b35e400ba46cc80a9bb37858a8aa5486336ee6f8d7a/signal-processing-algorithms-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:44 2020"}