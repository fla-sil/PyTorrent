{"info": {"author": "rgutierrez-cotech", "author_email": "gutierrez@carnegiehub.org", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "============================\nDjango Cloud Tasks\n============================\n* Forked from https://github.com/GeorgeLubaretsi/django-cloud-tasks\n\nIntegrate `Google Cloud Tasks <https://goo.gl/Ya0AZd>`_ with Django.\n\nPackage provides easy to use decorator to create task handlers.\n\nApp looks for tasks in ``cloud_tasks.py`` files in your installed applications and auto-registers them.\n\nPackage is in early alpha and it does not have any real security at the moment. You need to authorize requests coming\nto your instances yourself.\n\nPrerequisites\n=============\n\n- Django 1.8+\n- Python 3.4, 3.5, 3.6\n\nDependencies\n============\n\n- `google-api-python-client <https://pypi.python.org/pypi/google-api-python-client/>`_\n\nDocumentation\n=============\n\nTODO\n\nInstallation\n============\n\n(1) Install latest version from Github (PyPy package will be available as soon as stable version is released):\n\n    .. code-block:: sh\n\n        pip install -e git+git@github.com:rgutierrez-cotech/django-cloud-tasks.git#egg=django_cloud_tasks\n\n\n(2) Add ``django_cloud_tasks`` to ``INSTALLED_APPS``:\n\n    .. code-block:: python\n\n        INSTALLED_APPS = (\n            # ...\n            'django_cloud_tasks',\n            # ...\n        )\n\n\n(3) Optionally, set up Google Cloud credentials in your settings.py for use with Django Cloud Tasks. If you are using a service account, make sure the account has the \"Cloud Tasks Admin\" permission.\n\n    .. code-block:: python\n\n        # install these if they are not already installed\n        import google.auth\n        from google.oauth2 import service_account\n\n        # ...\n\n        # To use application default credentials:\n        google_cloud_credentials, project = google.auth.default()\n\n        # To use a service account JSON file:\n        google_cloud_credentials = service_account.Credentials.from_service_account_file(\n                '/path/to/key.json')\n\n\n(4) Add configuration to your settings\n\n    .. code-block:: python\n\n        DJANGO_CLOUD_TASKS={\n            'project_location_name': 'projects/{project_name}/locations/us-central1',\n            'task_handler_root_url': '/_tasks/',\n        },\n\n        # This setting allows you to debug your cloud tasks by running actual task handler function locally\n        # instead of sending them to the task queue. Default: False\n        DJANGO_CLOUD_TASKS_EXECUTE_LOCALLY = False\n\n        # If False, running `.execute()` on remote task will simply log the task data instead of adding it to\n        # the queue. Useful for debugging. Default: True\n        DJANGO_CLOUD_TASKS_BLOCK_REMOTE_TASKS = False\n\n        # Optional argument. Specify a google.auth.credentials.Credentials object to use with the API \n        # Discovery service. Can be application default credentials or credentials generated from a \n        # service account JSON file. Default: None\n        DJANGO_CLOUD_TASKS_CREDENTIALS = None # or google_cloud_credentials if you defined this above\n\n\n(5) Add cloud task views to your urls.py (must resolve to the same url as ``task_handler_root_url``)\n\n    .. code-block:: python\n\n        # urls.py\n        # ...\n        from django.urls import path, include\n        from django_cloud_tasks import urls as dct_urls\n\n        urlpatterns = [\n            # ...\n            path('_tasks/', include(dct_urls)),\n        ]\n\n\n\nQuick start\n===========\n\nSimply import the task decorator and define the task inside ``cloud_tasks.py`` in your app.\nFirst parameter should always be ``request`` which is populated after task is executed by Cloud Task service.\n\nYou can get actual request coming from Cloud Task service by accessing ``request.request`` in your task body and\nadditional attributes such as: ``request.task_id```, ```request.request_headers```\n\n.. code-block:: python\n\n    # cloud_tasks.py\n    # ...\n    from django_cloud_tasks.decorators import task\n\n    @task(queue='default')\n    def example_task(request, p1, p2):\n        print(p1, p2)\n        print(request.task_id)\n\n\nPushing the task to the queue:\n\n.. code-block:: python\n\n    from my_app.cloud_tasks import example_task\n\n    example_task(p1='1', p2='2').execute()\n\n\nPushing remote task to the queue (when task handler is defined elsewhere):\n\n.. code-block:: python\n\n    from django_cloud_tasks import remote_task\n    from django_cloud_tasks import batch_execute\n\n    example_task = remote_task(queue='my-queue', handler='remote_app.cloud_tasks.example_task'):\n    payload_1 = example_task(payload={'p1': 1, 'p2': '2'})\n    payload_2 = example_task(payload={'p1': 2, 'p2': '3'})\n\n    # Execute in batch:\n    batch_execute([payload_1, payload_2])\n\n    # Or one by one:\n    payload_1.execute()\n    payload_2.execute()\n\n\nYou can also send tasks in batch if latency is an issue and you have to send many small tasks to the queue\n(limited to 1000 at a time):\n\n.. code-block:: python\n\n    from my_app.cloud_tasks import example_task\n    from django_cloud_tasks import batch_execute\n\n    tasks = []\n    for i in range(0, 420):\n        task = example_task(p1=i, p2=i)\n        tasks.append(task)\n\n    batch_execute(tasks)\n\n\n\nIt is also possible to run an actual function using ``run`` method of ``CloudTaskWrapper`` object instance that is returned after task is called (this can be useful for debugging):\n\n.. code-block:: python\n\n    task = example_task(p1=i, p2=i)\n    task.run()", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/rgutierrez-cotech/django-cloud-tasks/archive/0.0.4a.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rgutierrez-cotech/django-cloud-tasks", "keywords": "django cloudtasks cloud tasks", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-cloud-tasks-withcredentials", "package_url": "https://pypi.org/project/django-cloud-tasks-withcredentials/", "platform": "", "project_url": "https://pypi.org/project/django-cloud-tasks-withcredentials/", "project_urls": {"Download": "https://github.com/rgutierrez-cotech/django-cloud-tasks/archive/0.0.4a.tar.gz", "Homepage": "https://github.com/rgutierrez-cotech/django-cloud-tasks"}, "release_url": "https://pypi.org/project/django-cloud-tasks-withcredentials/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Google Cloud Tasks integration for Django. Forked from https://github.com/GeorgeLubaretsi/django-cloud-tasks", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li>Forked from <a href=\"https://github.com/GeorgeLubaretsi/django-cloud-tasks\" rel=\"nofollow\">https://github.com/GeorgeLubaretsi/django-cloud-tasks</a></li>\n</ul>\n<p>Integrate <a href=\"https://goo.gl/Ya0AZd\" rel=\"nofollow\">Google Cloud Tasks</a> with Django.</p>\n<p>Package provides easy to use decorator to create task handlers.</p>\n<p>App looks for tasks in <tt>cloud_tasks.py</tt> files in your installed applications and auto-registers them.</p>\n<p>Package is in early alpha and it does not have any real security at the moment. You need to authorize requests coming\nto your instances yourself.</p>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<ul>\n<li>Django 1.8+</li>\n<li>Python 3.4, 3.5, 3.6</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/google-api-python-client/\" rel=\"nofollow\">google-api-python-client</a></li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>TODO</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install latest version from Github (PyPy package will be available as soon as stable version is released):</p>\n<pre>pip install -e git+git@github.com:rgutierrez-cotech/django-cloud-tasks.git#egg<span class=\"o\">=</span>django_cloud_tasks\n</pre>\n</li>\n<li><p>Add <tt>django_cloud_tasks</tt> to <tt>INSTALLED_APPS</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'django_cloud_tasks'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Optionally, set up Google Cloud credentials in your settings.py for use with Django Cloud Tasks. If you are using a service account, make sure the account has the \u201cCloud Tasks Admin\u201d permission.</p>\n<pre><span class=\"c1\"># install these if they are not already installed</span>\n<span class=\"kn\">import</span> <span class=\"nn\">google.auth</span>\n<span class=\"kn\">from</span> <span class=\"nn\">google.oauth2</span> <span class=\"kn\">import</span> <span class=\"n\">service_account</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># To use application default credentials:</span>\n<span class=\"n\">google_cloud_credentials</span><span class=\"p\">,</span> <span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># To use a service account JSON file:</span>\n<span class=\"n\">google_cloud_credentials</span> <span class=\"o\">=</span> <span class=\"n\">service_account</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">from_service_account_file</span><span class=\"p\">(</span>\n        <span class=\"s1\">'/path/to/key.json'</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Add configuration to your settings</p>\n<pre><span class=\"n\">DJANGO_CLOUD_TASKS</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'project_location_name'</span><span class=\"p\">:</span> <span class=\"s1\">'projects/</span><span class=\"si\">{project_name}</span><span class=\"s1\">/locations/us-central1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'task_handler_root_url'</span><span class=\"p\">:</span> <span class=\"s1\">'/_tasks/'</span><span class=\"p\">,</span>\n<span class=\"p\">},</span>\n\n<span class=\"c1\"># This setting allows you to debug your cloud tasks by running actual task handler function locally</span>\n<span class=\"c1\"># instead of sending them to the task queue. Default: False</span>\n<span class=\"n\">DJANGO_CLOUD_TASKS_EXECUTE_LOCALLY</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># If False, running `.execute()` on remote task will simply log the task data instead of adding it to</span>\n<span class=\"c1\"># the queue. Useful for debugging. Default: True</span>\n<span class=\"n\">DJANGO_CLOUD_TASKS_BLOCK_REMOTE_TASKS</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Optional argument. Specify a google.auth.credentials.Credentials object to use with the API</span>\n<span class=\"c1\"># Discovery service. Can be application default credentials or credentials generated from a</span>\n<span class=\"c1\"># service account JSON file. Default: None</span>\n<span class=\"n\">DJANGO_CLOUD_TASKS_CREDENTIALS</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"c1\"># or google_cloud_credentials if you defined this above</span>\n</pre>\n</li>\n<li><p>Add cloud task views to your urls.py (must resolve to the same url as <tt>task_handler_root_url</tt>)</p>\n<pre><span class=\"c1\"># urls.py</span>\n<span class=\"c1\"># ...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_cloud_tasks</span> <span class=\"kn\">import</span> <span class=\"n\">urls</span> <span class=\"k\">as</span> <span class=\"n\">dct_urls</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'_tasks/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">dct_urls</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<p>Simply import the task decorator and define the task inside <tt>cloud_tasks.py</tt> in your app.\nFirst parameter should always be <tt>request</tt> which is populated after task is executed by Cloud Task service.</p>\n<p>You can get actual request coming from Cloud Task service by accessing <tt>request.request</tt> in your task body and\nadditional attributes such as: <tt>request.task_id`</tt>, <tt>`request.request_headers`</tt></p>\n<pre><span class=\"c1\"># cloud_tasks.py</span>\n<span class=\"c1\"># ...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_cloud_tasks.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">task</span>\n\n<span class=\"nd\">@task</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example_task</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">task_id</span><span class=\"p\">)</span>\n</pre>\n<p>Pushing the task to the queue:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_app.cloud_tasks</span> <span class=\"kn\">import</span> <span class=\"n\">example_task</span>\n\n<span class=\"n\">example_task</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"s1\">'2'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<p>Pushing remote task to the queue (when task handler is defined elsewhere):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_cloud_tasks</span> <span class=\"kn\">import</span> <span class=\"n\">remote_task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_cloud_tasks</span> <span class=\"kn\">import</span> <span class=\"n\">batch_execute</span>\n\n<span class=\"n\">example_task</span> <span class=\"o\">=</span> <span class=\"n\">remote_task</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'my-queue'</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"s1\">'remote_app.cloud_tasks.example_task'</span><span class=\"p\">):</span>\n<span class=\"n\">payload_1</span> <span class=\"o\">=</span> <span class=\"n\">example_task</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'p1'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'p2'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">})</span>\n<span class=\"n\">payload_2</span> <span class=\"o\">=</span> <span class=\"n\">example_task</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'p1'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'p2'</span><span class=\"p\">:</span> <span class=\"s1\">'3'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Execute in batch:</span>\n<span class=\"n\">batch_execute</span><span class=\"p\">([</span><span class=\"n\">payload_1</span><span class=\"p\">,</span> <span class=\"n\">payload_2</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Or one by one:</span>\n<span class=\"n\">payload_1</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"n\">payload_2</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<p>You can also send tasks in batch if latency is an issue and you have to send many small tasks to the queue\n(limited to 1000 at a time):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_app.cloud_tasks</span> <span class=\"kn\">import</span> <span class=\"n\">example_task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_cloud_tasks</span> <span class=\"kn\">import</span> <span class=\"n\">batch_execute</span>\n\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">420</span><span class=\"p\">):</span>\n    <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">example_task</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n\n<span class=\"n\">batch_execute</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">)</span>\n</pre>\n<p>It is also possible to run an actual function using <tt>run</tt> method of <tt>CloudTaskWrapper</tt> object instance that is returned after task is called (this can be useful for debugging):</p>\n<pre><span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">example_task</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6633681, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "d337d40c2e09f146a335e53e9cf3fd7e", "sha256": "9e2b3e78cfd0b4f5cce46e698de82b6e9c1264a2d56e4cd4eaa907df8954b2af"}, "downloads": -1, "filename": "django-cloud-tasks-withcredentials-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d337d40c2e09f146a335e53e9cf3fd7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10889, "upload_time": "2020-02-14T21:23:27", "upload_time_iso_8601": "2020-02-14T21:23:27.741277Z", "url": "https://files.pythonhosted.org/packages/84/ae/15b64a822cc2cb2c8a7e2c323c34aed60240a0a9647392786f4ab6708358/django-cloud-tasks-withcredentials-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d337d40c2e09f146a335e53e9cf3fd7e", "sha256": "9e2b3e78cfd0b4f5cce46e698de82b6e9c1264a2d56e4cd4eaa907df8954b2af"}, "downloads": -1, "filename": "django-cloud-tasks-withcredentials-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d337d40c2e09f146a335e53e9cf3fd7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10889, "upload_time": "2020-02-14T21:23:27", "upload_time_iso_8601": "2020-02-14T21:23:27.741277Z", "url": "https://files.pythonhosted.org/packages/84/ae/15b64a822cc2cb2c8a7e2c323c34aed60240a0a9647392786f4ab6708358/django-cloud-tasks-withcredentials-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:06 2020"}