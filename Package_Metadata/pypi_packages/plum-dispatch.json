{"info": {"author": "Wessel Bruinsma", "author_email": "wessel.p.bruinsma@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# [Plum: Multiple Dispatch in Python](https://github.com/wesselb/plum)\n\n[![Build](https://travis-ci.org/wesselb/plum.svg?branch=master)](https://travis-ci.org/wesselb/plum)\n[![Coverage Status](https://coveralls.io/repos/github/wesselb/plum/badge.svg?branch=master&service=github)](https://coveralls.io/github/wesselb/plum?branch=master)\n[![Latest Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://wesselb.github.io/plum)\n\nEverybody likes multiple dispatch, just like everybody likes plums.\n\n*Note:* Plum requires Python 3.6 or higher.\n\n* [Installation](#installation)\n* [Basic Usage](#basic-usage)\n* [Advanced Features by Example](#advanced-features-by-example)\n    - [Dispatch From Type Annotations](#dispatch-from-type-annotations)\n    - [Union Types](#union-types)\n    - [Parametric Types](#parametric-types)\n    - [Variable Arguments](#variable-arguments)\n    - [Return Types](#return-types)\n    - [Inheritance](#inheritance)\n    - [Conversion](#conversion)\n    - [Promotion](#promotion)\n    - [Method Precedence](#method-precedence)\n    - [Parametric Classes](#parametric-classes)\n    - [Add Multiple Methods](#add-multiple-methods)\n    - [Extend a Function From Another Package](#extend-a-function-from-another-package)\n    - [Directly Invoke a Method](#directly-invoke-a-method)\n\n## Installation\n\n```bash\npip install plum-dispatch\n```\n\n## Basic Usage\n\nMultiple dispatch allows you to implement multiple *methods* for the same \n*function*, where the methods specify the types of their arguments:\n\n```python\nfrom plum import dispatch\n\n@dispatch(str)\ndef f(x):\n    return 'This is a string!'\n    \n\n@dispatch(int)\ndef f(x):\n    return 'This is an integer!'\n```\n\n```python\n>>> f('1')\n'This is a string!'\n\n>>> f(1)\n'This is an integer!'\n```\n\nWe haven't implemented a method for `float`s, so in that case an exception \nwill be raised:\n\n```python\n>>> f(1.0)\nNotFoundLookupError: For function \"f\", signature (builtins.float) could not be resolved.\n```\n\nInstead of implementing a method for `float`s, let's implement a method for \nall numbers:\n\n```python\nfrom numbers import Number\n\n\n@dispatch(Number)\ndef f(x):\n    return 'This is a number!'\n```\n\nSince a `float` is a `Number`, `f(1.0)` will return `'This is a number!'`.\nBut an `int` is also a `Number`, so `f(1)` can either return \n`'This is an integer!'` or `'This is a number!'`.\nThe rule of multiple dispatch is that the *most specific* method is chosen:\n\n\n```python\n>>> f(1)\n'This is an integer!'\n```\n\nsince an `int` is a `Number`, but a `Number` is not necessarily an `int`.\n\nFor an excellent and way more detailed overview of multiple dispatch, see the\n[manual of the Julia Language](https://docs.julialang.org/en/).\n\n## Features by Example\n\n### Dispatch From Type Annotations\n\n`Dispatcher.annotations` is an experimental feature that can be used to \ndispatch on a function's type annotations:\n\n```python\nfrom plum import dispatch, add_conversion_method\n\nadd_conversion_method(type_from=int, type_to=str, f=str)\n\n\n@dispatch.annotations()\ndef int_to_str(x: int) -> str:\n    return x\n    \n    \n@dispatch.annotations()\ndef int_to_str(x):\n    raise ValueError('I only take integers!')\n```\n\n```python\n>>> int_to_str(1.0)\nValueError: I only take integers!\n\n>>> int_to_str(1)\n'1'\n```\n\n### Union Types\n\nSets can be used to instantiate union types:\n\n```python\nfrom plum import dispatch\n\n@dispatch(object)\ndef f(x):\n    print('fallback')\n\n\n@dispatch({int, str})\ndef f(x):\n    print('int or str')\n```\n\n```\n>>> f(1)\nint or str\n\n>>> f('1')\nint or str\n\n>>> f(1.0)\nfallback\n```\n\n### Parametric Types\n\nThe parametric types `Tuple` and `List` can be used to dispatch on tuples \nand lists with particular types of elements.\nImportantly, the type system is *covariant*, as opposed to Julia's type \nsystem, which is *invariant*.\n\n```python\nfrom plum import dispatch, Tuple, List\n\n@dispatch({tuple, list})\ndef f(x):\n    print('tuple or list')\n    \n    \n@dispatch(Tuple(int))\ndef f(x):\n    print('tuple of int')\n    \n    \n@dispatch(List(int))\ndef f(x):\n    print('list of int')\n```\n\n```python\n>>> f([1, 2])\n'list of int'\n\n>>> f([1, '2'])\n'tuple or list'\n\n>>> f((1, 2))\n'tuple of int'\n\n>>> f((1, '2'))\n'tuple or list'\n```\n\n### Variable Arguments\n\nA list can be used to specify variable arguments:\n\n```python\nfrom plum import dispatch\n\n@dispatch(int)\ndef f(x):\n    print('single argument')\n    \n\n@dispatch(int, [int])\ndef f(x, *xs):\n    print('multiple arguments')\n```\n\n```\n>>> f(1)\nsingle argument\n\n>>> f(1, 2)\nmultiple arguments\n\n>>> f(1, 2, 3)\nmultiple arguments\n```\n\n### Return Types\n\nThe keyword argument `return_type` can be set to specify return types:\n\n```python\nfrom plum import dispatch, add_conversion_method\n\n@dispatch({int, str}, return_type=int)\ndef f(x):\n    return x\n```\n\n```python\n>>> f(1)\n1\n\n>>> f('1')\nTypeError: Expected return type \"builtins.int\", but got type \"builtins.str\".\n\n>>> add_conversion_method(type_from=str, type_to=int, f=int)\n\n>>> f('1')\n1\n\n```\n\n### Inheritance\n\nSince every class in Python can be subclassed, diagonal dispatch cannot be \nimplemented.\nHowever, inheritance can be used to achieve a form of diagonal dispatch:\n\n```python\nfrom plum import Dispatcher, Referentiable, Self\n\nclass Real(metaclass=Referentiable):\n    dispatch = Dispatcher(in_class=Self)\n\n    @dispatch(Self)\n    def __add__(self, other):\n        return 'real'\n        \n\nclass Rational(Real):\n    dispatch = Dispatcher(in_class=Self)\n\n    @dispatch(Self)\n    def __add__(self, other):\n        return 'rational'\n        \n\nreal = Real()\nrational = Rational()\n```\n\n\n```\n>>> real + real\n'real'\n\n>>> real + rational\n'real'\n\n>>> rational + real\n'real'\n\n>>> rational + rational\n'rational'\n```\n\n### Conversion\n\nThe function `convert` can be used to convert objects of one type to another:\n\n```python\nfrom numbers import Number\n\nfrom plum import convert\n\n\nclass Rational:\n    def __init__(self, num, denom):\n        self.num = num\n        self.denom = denom\n```\n\n```python\n>>> convert(0.5, Number)\n0.5\n\n>>> convert(Rational(1, 2), Number)\nTypeError: Cannot convert a \"__main__.Rational\" to a \"numbers.Number\".\n```\n\nThe `TypeError` indicates that `convert` does not know how to convert a \n`Rational` to a `Number`.\nLet us implement that conversion:\n\n```python\nfrom operator import truediv\n\nfrom plum import conversion_method\n        \n\n@conversion_method(type_from=Rational, type_to=Number)\ndef rational_to_number(q):\n    return truediv(q.num, q.denom)\n```\n\n```python\n>>> convert(Rational(1, 2), Number)\n0.5\n```\n\nInstead of the decorator `conversion_method`, one can also use \n`add_conversion_method`:\n\n\n```python\nfrom plum import add_conversion_method\n\nadd_conversion_method(type_from, type_to, conversion_function)\n```\n\n### Promotion\n\nThe function `promote` can be used to promote objects to a common type:\n\n```python\nfrom plum import dispatch, promote, add_promotion_rule, add_conversion_method\n\n@dispatch(object, object)\ndef add(x, y):\n    return add(*promote(x, y))\n    \n    \n@dispatch(int, int)\ndef add(x, y):\n    return x + y\n    \n    \n@dispatch(float, float)\ndef add(x, y):\n    return x + y\n```\n\n```python\n>>> add(1, 2)\n3\n\n>>> add(1.0, 2.0)\n3.0\n\n>>> add(1, 2.0)\nTypeError: No promotion rule for \"builtins.int\" and \"builtins.float\".\n\n>>> add_promotion_rule(int, float, float)\n\n>>> add(1, 2.0)\nTypeError: Cannot convert a \"builtins.int\" to a \"builtins.float\".\n\n>>> add_conversion_method(type_from=int, type_to=float, f=float)\n\n>>> add(1, 2.0)\n3.0\n```\n\n### Method Precedence\n\nThe keyword argument `precedence` can be set to an integer value to specify \nprecedence levels of methods, which are used to break ambiguity:\n\n```python\nfrom plum import dispatch\n\nclass Element:\n    pass\n\n\nclass ZeroElement(Element):\n    pass\n\n\nclass SpecialisedElement(Element):\n    pass\n\n\n@dispatch(ZeroElement, Element)\ndef mul_no_precedence(a, b):\n    return 'zero'\n\n\n@dispatch(Element, SpecialisedElement)\ndef mul_no_precedence(a, b):\n    return 'specialised operation'\n    \n\n@dispatch(ZeroElement, Element, precedence=1)\ndef mul(a, b):\n    return 'zero'\n\n\n@dispatch(Element, SpecialisedElement)\ndef mul(a, b):\n    return 'specialised operation'\n```\n\n```python\n>>> zero = ZeroElement()\n\n>>> specialised_element = SpecialisedElement()\n\n>>> element = Element()\n\n>>> mul(zero, element)\n'zero'\n\n>>> mul(element, specialised_element)\n'specialised operation'\n\n>>> mul_no_precedence(zero, specialised_element)\nAmbiguousLookupError: For function \"mul_no_precedence\", signature (__main__.ZeroElement, __main__.SpecialisedElement) is ambiguous among the following:\n  (__main__.ZeroElement, __main__.Element) (precedence: 0)\n  (__main__.Element, __main__.SpecialisedElement) (precedence: 0)\n\n>>> mul(zero, specialised_element)\n'zero'\n```\n\n### Parametric Classes\n\nThe decorator `parametric` can be used to create parametric classes:\n\n```python\nfrom plum import dispatch, parametric\n\n@parametric\nclass A:\n    pass\n    \n    \n@dispatch(A)\ndef f(x):\n    return 'fallback'\n    \n    \n@dispatch(A(1))\ndef f(x):\n    return '1'\n    \n    \n@dispatch(A(2))\ndef f(x):\n    return '2'\n```\n\n```python\n>>> A\n__main__.A\n\n>>> A(1)\n__main__.A{1}\n\n>>> issubclass(A(1), A)\nTrue\n\n>>> A(1)()\n<__main__.A{1} at 0x10c2bab70>\n\n>>> f(A(1)())\n'1'\n\n>>> f(A(2)())\n'2'\n\n>>> f(A(3)())\n'fallback'\n```\n\n### Add Multiple Methods\n\n`Dispatcher.multi` can be used to implement multiple methods at once:\n\n```python\nfrom plum import dispatch\n\n@dispatch.multi((int, int), (float, float))\ndef add(x, y):\n    return x + y\n```\n\n```python\n>>> add(1, 1)\n2\n\n>>> add(1.0, 1.0)\n2.0\n\n>>> add(1, 1.0)\nNotFoundLookupError: For function \"add\", signature (builtins.int, builtins.float) could not be resolved.\n```\n\n### Extend a Function From Another Package\n\n`Function.extend` can be used to extend a particular function:\n\n```python\nfrom package import f\n\n@f.extend(int)\ndef f(x):\n    return 'new behaviour'\n```\n\n```python\n>>> f(1.0)\n'old behaviour'\n\n>>> f(1)\n'new behaviour'\n```\n\n### Directly Invoke a Method\n\n`Function.invoke` can be used to invoke a method given types of the arguments:\n\n```python\nfrom plum import dispatch\n\n@dispatch(int)\ndef f(x):\n    return 'int'\n    \n    \n@dispatch(str)\ndef f(x):\n    return 'str'\n```\n\n```python\n>>> f(1)\n'int'\n\n>>> f('1')\n'str'\n\n>>> f.invoke(int)('1')\n'int'\n\n>>> f.invoke(str)(1)\n'str'\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wesselb/plum", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "plum-dispatch", "package_url": "https://pypi.org/project/plum-dispatch/", "platform": "", "project_url": "https://pypi.org/project/plum-dispatch/", "project_urls": {"Homepage": "https://github.com/wesselb/plum"}, "release_url": "https://pypi.org/project/plum-dispatch/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Multiple dispatch in Python", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://github.com/wesselb/plum\" rel=\"nofollow\">Plum: Multiple Dispatch in Python</a></h1>\n<p><a href=\"https://travis-ci.org/wesselb/plum\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95fc430ff44903789ad998e5db1849182291cd68/68747470733a2f2f7472617669732d63692e6f72672f77657373656c622f706c756d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/wesselb/plum?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ea1a339699d24b3caf4afd39f3f0f992ad857d1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f77657373656c622f706c756d2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<a href=\"https://wesselb.github.io/plum\" rel=\"nofollow\"><img alt=\"Latest Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35e0b9e630dbc347bd4718399aa51fb3bb2bb889/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667\"></a></p>\n<p>Everybody likes multiple dispatch, just like everybody likes plums.</p>\n<p><em>Note:</em> Plum requires Python 3.6 or higher.</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#basic-usage\" rel=\"nofollow\">Basic Usage</a></li>\n<li><a href=\"#advanced-features-by-example\" rel=\"nofollow\">Advanced Features by Example</a>\n<ul>\n<li><a href=\"#dispatch-from-type-annotations\" rel=\"nofollow\">Dispatch From Type Annotations</a></li>\n<li><a href=\"#union-types\" rel=\"nofollow\">Union Types</a></li>\n<li><a href=\"#parametric-types\" rel=\"nofollow\">Parametric Types</a></li>\n<li><a href=\"#variable-arguments\" rel=\"nofollow\">Variable Arguments</a></li>\n<li><a href=\"#return-types\" rel=\"nofollow\">Return Types</a></li>\n<li><a href=\"#inheritance\" rel=\"nofollow\">Inheritance</a></li>\n<li><a href=\"#conversion\" rel=\"nofollow\">Conversion</a></li>\n<li><a href=\"#promotion\" rel=\"nofollow\">Promotion</a></li>\n<li><a href=\"#method-precedence\" rel=\"nofollow\">Method Precedence</a></li>\n<li><a href=\"#parametric-classes\" rel=\"nofollow\">Parametric Classes</a></li>\n<li><a href=\"#add-multiple-methods\" rel=\"nofollow\">Add Multiple Methods</a></li>\n<li><a href=\"#extend-a-function-from-another-package\" rel=\"nofollow\">Extend a Function From Another Package</a></li>\n<li><a href=\"#directly-invoke-a-method\" rel=\"nofollow\">Directly Invoke a Method</a></li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install plum-dispatch\n</pre>\n<h2>Basic Usage</h2>\n<p>Multiple dispatch allows you to implement multiple <em>methods</em> for the same\n<em>function</em>, where the methods specify the types of their arguments:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span>\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'This is a string!'</span>\n    \n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'This is an integer!'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"s1\">'This is a string!'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'This is an integer!'</span>\n</pre>\n<p>We haven't implemented a method for <code>float</code>s, so in that case an exception\nwill be raised:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">NotFoundLookupError</span><span class=\"p\">:</span> <span class=\"n\">For</span> <span class=\"n\">function</span> <span class=\"s2\">\"f\"</span><span class=\"p\">,</span> <span class=\"n\">signature</span> <span class=\"p\">(</span><span class=\"n\">builtins</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">)</span> <span class=\"n\">could</span> <span class=\"ow\">not</span> <span class=\"n\">be</span> <span class=\"n\">resolved</span><span class=\"o\">.</span>\n</pre>\n<p>Instead of implementing a method for <code>float</code>s, let's implement a method for\nall numbers:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">numbers</span> <span class=\"kn\">import</span> <span class=\"n\">Number</span>\n\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">Number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'This is a number!'</span>\n</pre>\n<p>Since a <code>float</code> is a <code>Number</code>, <code>f(1.0)</code> will return <code>'This is a number!'</code>.\nBut an <code>int</code> is also a <code>Number</code>, so <code>f(1)</code> can either return\n<code>'This is an integer!'</code> or <code>'This is a number!'</code>.\nThe rule of multiple dispatch is that the <em>most specific</em> method is chosen:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'This is an integer!'</span>\n</pre>\n<p>since an <code>int</code> is a <code>Number</code>, but a <code>Number</code> is not necessarily an <code>int</code>.</p>\n<p>For an excellent and way more detailed overview of multiple dispatch, see the\n<a href=\"https://docs.julialang.org/en/\" rel=\"nofollow\">manual of the Julia Language</a>.</p>\n<h2>Features by Example</h2>\n<h3>Dispatch From Type Annotations</h3>\n<p><code>Dispatcher.annotations</code> is an experimental feature that can be used to\ndispatch on a function's type annotations:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span><span class=\"p\">,</span> <span class=\"n\">add_conversion_method</span>\n\n<span class=\"n\">add_conversion_method</span><span class=\"p\">(</span><span class=\"n\">type_from</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">type_to</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">annotations</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">int_to_str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">annotations</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">int_to_str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'I only take integers!'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">int_to_str</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">I</span> <span class=\"n\">only</span> <span class=\"n\">take</span> <span class=\"n\">integers</span><span class=\"err\">!</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">int_to_str</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'1'</span>\n</pre>\n<h3>Union Types</h3>\n<p>Sets can be used to instantiate union types:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span>\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'fallback'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">({</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'int or str'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&gt;&gt;&gt; f(1)\nint or str\n\n&gt;&gt;&gt; f('1')\nint or str\n\n&gt;&gt;&gt; f(1.0)\nfallback\n</code></pre>\n<h3>Parametric Types</h3>\n<p>The parametric types <code>Tuple</code> and <code>List</code> can be used to dispatch on tuples\nand lists with particular types of elements.\nImportantly, the type system is <em>covariant</em>, as opposed to Julia's type\nsystem, which is <em>invariant</em>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">List</span>\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">({</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'tuple or list'</span><span class=\"p\">)</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'tuple of int'</span><span class=\"p\">)</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'list of int'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"s1\">'list of int'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">])</span>\n<span class=\"s1\">'tuple or list'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"s1\">'tuple of int'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">))</span>\n<span class=\"s1\">'tuple or list'</span>\n</pre>\n<h3>Variable Arguments</h3>\n<p>A list can be used to specify variable arguments:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span>\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'single argument'</span><span class=\"p\">)</span>\n    \n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">xs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'multiple arguments'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&gt;&gt;&gt; f(1)\nsingle argument\n\n&gt;&gt;&gt; f(1, 2)\nmultiple arguments\n\n&gt;&gt;&gt; f(1, 2, 3)\nmultiple arguments\n</code></pre>\n<h3>Return Types</h3>\n<p>The keyword argument <code>return_type</code> can be set to specify return types:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span><span class=\"p\">,</span> <span class=\"n\">add_conversion_method</span>\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">({</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">},</span> <span class=\"n\">return_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Expected</span> <span class=\"k\">return</span> <span class=\"nb\">type</span> <span class=\"s2\">\"builtins.int\"</span><span class=\"p\">,</span> <span class=\"n\">but</span> <span class=\"n\">got</span> <span class=\"nb\">type</span> <span class=\"s2\">\"builtins.str\"</span><span class=\"o\">.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add_conversion_method</span><span class=\"p\">(</span><span class=\"n\">type_from</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">type_to</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n</pre>\n<h3>Inheritance</h3>\n<p>Since every class in Python can be subclassed, diagonal dispatch cannot be\nimplemented.\nHowever, inheritance can be used to achieve a form of diagonal dispatch:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">Dispatcher</span><span class=\"p\">,</span> <span class=\"n\">Referentiable</span><span class=\"p\">,</span> <span class=\"n\">Self</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Real</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">Referentiable</span><span class=\"p\">):</span>\n    <span class=\"n\">dispatch</span> <span class=\"o\">=</span> <span class=\"n\">Dispatcher</span><span class=\"p\">(</span><span class=\"n\">in_class</span><span class=\"o\">=</span><span class=\"n\">Self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">Self</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'real'</span>\n        \n\n<span class=\"k\">class</span> <span class=\"nc\">Rational</span><span class=\"p\">(</span><span class=\"n\">Real</span><span class=\"p\">):</span>\n    <span class=\"n\">dispatch</span> <span class=\"o\">=</span> <span class=\"n\">Dispatcher</span><span class=\"p\">(</span><span class=\"n\">in_class</span><span class=\"o\">=</span><span class=\"n\">Self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">Self</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'rational'</span>\n        \n\n<span class=\"n\">real</span> <span class=\"o\">=</span> <span class=\"n\">Real</span><span class=\"p\">()</span>\n<span class=\"n\">rational</span> <span class=\"o\">=</span> <span class=\"n\">Rational</span><span class=\"p\">()</span>\n</pre>\n<pre><code>&gt;&gt;&gt; real + real\n'real'\n\n&gt;&gt;&gt; real + rational\n'real'\n\n&gt;&gt;&gt; rational + real\n'real'\n\n&gt;&gt;&gt; rational + rational\n'rational'\n</code></pre>\n<h3>Conversion</h3>\n<p>The function <code>convert</code> can be used to convert objects of one type to another:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">numbers</span> <span class=\"kn\">import</span> <span class=\"n\">Number</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">convert</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Rational</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">denom</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span> <span class=\"o\">=</span> <span class=\"n\">denom</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">Number</span><span class=\"p\">)</span>\n<span class=\"mf\">0.5</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Number</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Cannot</span> <span class=\"n\">convert</span> <span class=\"n\">a</span> <span class=\"s2\">\"__main__.Rational\"</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"s2\">\"numbers.Number\"</span><span class=\"o\">.</span>\n</pre>\n<p>The <code>TypeError</code> indicates that <code>convert</code> does not know how to convert a\n<code>Rational</code> to a <code>Number</code>.\nLet us implement that conversion:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">truediv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">conversion_method</span>\n        \n\n<span class=\"nd\">@conversion_method</span><span class=\"p\">(</span><span class=\"n\">type_from</span><span class=\"o\">=</span><span class=\"n\">Rational</span><span class=\"p\">,</span> <span class=\"n\">type_to</span><span class=\"o\">=</span><span class=\"n\">Number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">rational_to_number</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">truediv</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">denom</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Number</span><span class=\"p\">)</span>\n<span class=\"mf\">0.5</span>\n</pre>\n<p>Instead of the decorator <code>conversion_method</code>, one can also use\n<code>add_conversion_method</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">add_conversion_method</span>\n\n<span class=\"n\">add_conversion_method</span><span class=\"p\">(</span><span class=\"n\">type_from</span><span class=\"p\">,</span> <span class=\"n\">type_to</span><span class=\"p\">,</span> <span class=\"n\">conversion_function</span><span class=\"p\">)</span>\n</pre>\n<h3>Promotion</h3>\n<p>The function <code>promote</code> can be used to promote objects to a common type:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span><span class=\"p\">,</span> <span class=\"n\">promote</span><span class=\"p\">,</span> <span class=\"n\">add_promotion_rule</span><span class=\"p\">,</span> <span class=\"n\">add_conversion_method</span>\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">promote</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"mf\">3.0</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">promotion</span> <span class=\"n\">rule</span> <span class=\"k\">for</span> <span class=\"s2\">\"builtins.int\"</span> <span class=\"ow\">and</span> <span class=\"s2\">\"builtins.float\"</span><span class=\"o\">.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add_promotion_rule</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Cannot</span> <span class=\"n\">convert</span> <span class=\"n\">a</span> <span class=\"s2\">\"builtins.int\"</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"s2\">\"builtins.float\"</span><span class=\"o\">.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add_conversion_method</span><span class=\"p\">(</span><span class=\"n\">type_from</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">type_to</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"mf\">3.0</span>\n</pre>\n<h3>Method Precedence</h3>\n<p>The keyword argument <code>precedence</code> can be set to an integer value to specify\nprecedence levels of methods, which are used to break ambiguity:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Element</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ZeroElement</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SpecialisedElement</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">ZeroElement</span><span class=\"p\">,</span> <span class=\"n\">Element</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul_no_precedence</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'zero'</span>\n\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">,</span> <span class=\"n\">SpecialisedElement</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul_no_precedence</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'specialised operation'</span>\n    \n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">ZeroElement</span><span class=\"p\">,</span> <span class=\"n\">Element</span><span class=\"p\">,</span> <span class=\"n\">precedence</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'zero'</span>\n\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">,</span> <span class=\"n\">SpecialisedElement</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'specialised operation'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">zero</span> <span class=\"o\">=</span> <span class=\"n\">ZeroElement</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">specialised_element</span> <span class=\"o\">=</span> <span class=\"n\">SpecialisedElement</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">Element</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"p\">)</span>\n<span class=\"s1\">'zero'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">,</span> <span class=\"n\">specialised_element</span><span class=\"p\">)</span>\n<span class=\"s1\">'specialised operation'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mul_no_precedence</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"n\">specialised_element</span><span class=\"p\">)</span>\n<span class=\"n\">AmbiguousLookupError</span><span class=\"p\">:</span> <span class=\"n\">For</span> <span class=\"n\">function</span> <span class=\"s2\">\"mul_no_precedence\"</span><span class=\"p\">,</span> <span class=\"n\">signature</span> <span class=\"p\">(</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">ZeroElement</span><span class=\"p\">,</span> <span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">SpecialisedElement</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">ambiguous</span> <span class=\"n\">among</span> <span class=\"n\">the</span> <span class=\"n\">following</span><span class=\"p\">:</span>\n  <span class=\"p\">(</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">ZeroElement</span><span class=\"p\">,</span> <span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">Element</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">precedence</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">Element</span><span class=\"p\">,</span> <span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">SpecialisedElement</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">precedence</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"n\">specialised_element</span><span class=\"p\">)</span>\n<span class=\"s1\">'zero'</span>\n</pre>\n<h3>Parametric Classes</h3>\n<p>The decorator <code>parametric</code> can be used to create parametric classes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span><span class=\"p\">,</span> <span class=\"n\">parametric</span>\n\n<span class=\"nd\">@parametric</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'fallback'</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'1'</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'2'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">A</span>\n<span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">A</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"mh\">0x10c2bab70</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)())</span>\n<span class=\"s1\">'1'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)())</span>\n<span class=\"s1\">'2'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)())</span>\n<span class=\"s1\">'fallback'</span>\n</pre>\n<h3>Add Multiple Methods</h3>\n<p><code>Dispatcher.multi</code> can be used to implement multiple methods at once:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span>\n\n<span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">multi</span><span class=\"p\">((</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"mf\">2.0</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">NotFoundLookupError</span><span class=\"p\">:</span> <span class=\"n\">For</span> <span class=\"n\">function</span> <span class=\"s2\">\"add\"</span><span class=\"p\">,</span> <span class=\"n\">signature</span> <span class=\"p\">(</span><span class=\"n\">builtins</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">,</span> <span class=\"n\">builtins</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">)</span> <span class=\"n\">could</span> <span class=\"ow\">not</span> <span class=\"n\">be</span> <span class=\"n\">resolved</span><span class=\"o\">.</span>\n</pre>\n<h3>Extend a Function From Another Package</h3>\n<p><code>Function.extend</code> can be used to extend a particular function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">package</span> <span class=\"kn\">import</span> <span class=\"n\">f</span>\n\n<span class=\"nd\">@f</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'new behaviour'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"s1\">'old behaviour'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'new behaviour'</span>\n</pre>\n<h3>Directly Invoke a Method</h3>\n<p><code>Function.invoke</code> can be used to invoke a method given types of the arguments:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span>\n\n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'int'</span>\n    \n    \n<span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'str'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'int'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"s1\">'str'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"s1\">'int'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'str'</span>\n</pre>\n\n          </div>"}, "last_serial": 6083801, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "c2fbcf3f1a0bad3199f3523adef6f11d", "sha256": "006beaa1406ae28b54c900909f75672fd055f14d195176f640d7cb1435888587"}, "downloads": -1, "filename": "plum-dispatch-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c2fbcf3f1a0bad3199f3523adef6f11d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25642, "upload_time": "2019-06-12T19:56:21", "upload_time_iso_8601": "2019-06-12T19:56:21.957639Z", "url": "https://files.pythonhosted.org/packages/4a/de/e2760eb010135b2c463dd122eb45ce9fab79266cb61f31af65e6e93efbf9/plum-dispatch-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "0b990d541063689ee516790d9525d947", "sha256": "c7c1a0696796a559b3fe131c216d44b23b2b177460fe4be5c22debf00ab0df91"}, "downloads": -1, "filename": "plum-dispatch-0.1.5.tar.gz", "has_sig": false, "md5_digest": "0b990d541063689ee516790d9525d947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25919, "upload_time": "2019-06-13T17:09:20", "upload_time_iso_8601": "2019-06-13T17:09:20.816065Z", "url": "https://files.pythonhosted.org/packages/b2/f1/e39368ee04d0da4d82f426c4a64a90052816f1eaf93e9d74ec4bc39bc4b2/plum-dispatch-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "049774e592e952b8f76dd86a470d6315", "sha256": "5be7d122b80772d9ddf12b5b6aa1f7df4547ef09ea469f4b5d4db64be41d14c7"}, "downloads": -1, "filename": "plum-dispatch-0.1.6.tar.gz", "has_sig": false, "md5_digest": "049774e592e952b8f76dd86a470d6315", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25887, "upload_time": "2019-06-13T17:58:43", "upload_time_iso_8601": "2019-06-13T17:58:43.009851Z", "url": "https://files.pythonhosted.org/packages/9e/90/14615732b8b4e690173332e0a4484a08334a3d6a99014a35dafe97d034f9/plum-dispatch-0.1.6.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9c18f25f9ac4a382c639491eabe862a5", "sha256": "073eeda6dc3e226e5d9ac6e0cd8a9d6f164e864676ddd76111ac5319e820304c"}, "downloads": -1, "filename": "plum-dispatch-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9c18f25f9ac4a382c639491eabe862a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25919, "upload_time": "2019-11-06T00:04:17", "upload_time_iso_8601": "2019-11-06T00:04:17.495682Z", "url": "https://files.pythonhosted.org/packages/9e/ef/cc05eb5d75e0fb1dcb04b306eef244b0d1af7248be316c31cb902eb17e75/plum-dispatch-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c18f25f9ac4a382c639491eabe862a5", "sha256": "073eeda6dc3e226e5d9ac6e0cd8a9d6f164e864676ddd76111ac5319e820304c"}, "downloads": -1, "filename": "plum-dispatch-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9c18f25f9ac4a382c639491eabe862a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25919, "upload_time": "2019-11-06T00:04:17", "upload_time_iso_8601": "2019-11-06T00:04:17.495682Z", "url": "https://files.pythonhosted.org/packages/9e/ef/cc05eb5d75e0fb1dcb04b306eef244b0d1af7248be316c31cb902eb17e75/plum-dispatch-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:26 2020"}