{"info": {"author": "Square Developer Platform", "author_email": "developers@squareup.com", "bugtrack_url": null, "classifiers": [], "description": "![Square logo]\n\n# Square Python SDK\n\n[![Travis status](https://travis-ci.org/square/square-python-sdk.svg?branch=master)](https://travis-ci.org/square/square-python-sdk)\n[![PyPi version](https://badge.fury.io/py/squareup.svg?new)](https://badge.fury.io/py/squareup)\n[![Apache-2 license](https://img.shields.io/badge/license-Apache2-brightgreen.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n\nUse this Python library to manage Square resources (payments, orders, items, inventory, etc.) for your own Square account or on behalf of Square sellers.\n\n## Requirements\n\nThe SDK supports the following versions of Python:\n* Python 2 versions 2.7.9 and later\n* Python 3 versions 3.4 and later\n\n## Installation\n\nInstall the latest SDK using pip:\n\n```sh\npip install squareup\n```\n\nAlternatively, you can download or clone the sdk from [Python SDK] and then install the SDK by running Setuptools in the SDK installation directory:\n\n```sh\npython setup.py install --user\n```\n\n## API documentation\n### API Client\n* [Client]\n\n### Take Payments\n\n* [Payments]\n* [Checkout]\n\n### More Square APIs\n\n* [Catalog]\n* [Customers]\n* [Employees]\n* [Inventory]\n* [Labor]\n* [Locations]\n* [Merchants]\n* [Orders]\n* [Apple Pay]\n* [Refunds]\n* [Reporting]\n\n### Authorization APIs\n\n* [Mobile Authorization]\n* [O Auth]\n\n### Deprecated APIs\n\n* [V1 Locations]\n* [V1 Employees]\n* [V1 Transactions]\n* [V1 Items]\n* [Transactions]\n\n## Usage\n\nFirst time using Square? Here\u2019s how to get started:\n\n1. **Create a Square account.** If you don\u2019t have one already, [sign up for a developer account].\n1. **Create an application.** Go to your [Developer Dashboard] and create your first application. All you need to do is give it a name. When you\u2019re doing this for your production application, enter the name as you would want a customer to see it.\n1. **Make your first API call.** Almost all Square API calls require a location ID. You\u2019ll make your first call to list_locations, which happens to be one of the API calls that don\u2019t require a location ID. For more information about locations, see the [Locations overview].\n\nNow let\u2019s call your first Square API. Open your favorite text editor, create a new file called `locations.py`, and copy the following code into that file:\n\n```python\nfrom square.client import Client\n \n# Create an instance of the API Client \n# and initialize it with the credentials \n# for the Square account whose assets you want to manage\n \nclient = Client(\n    access_token='{{REPLACE_ACCESS_TOKEN}}',\n    environment='sandbox',\n)\n \n# Get an instance of the Square API you want call\napi_locations = client.locations\n \n# Call list_locations method to get all locations in this Square account\nresult = api_locations.list_locations()\n# Call the success method to see if the call succeeded\nif result.is_success():\n\t# The body property is a list of locations\n    locations = result.body['locations']\n\t# Iterate over the list\n    for location in locations:\n    \t# Each location is represented as a dictionary\n        for key, value in location.items():\n        \tprint(f\"{key} : {value}\")\n        print(\"\\n\")\n# Call the error method to see if the call failed\nelif result.is_error():\n    print('Error calling LocationsApi.listlocations')\n    errors = result.errors\n    # An error is returned as a list of errors\n    for error in errors:\n    \t# Each error is represented as a dictionary\n        for key, value in error.items():\n            print(f\"{key} : {value}\")\n        print(\"\\n\")\n```\n\nNext, get an access token and reference it in your code. To call the Square API, you need to get an access token and initialize the API Client class with that token. An application has two sets of credentials: production and sandbox. To get started, you\u2019ll use your sandbox token so that you can try things out in a test environment that is completely separate from production. Here\u2019s how:\n\n1. Go back to your application in the Developer Dashboard.\n1. View the details of your application.\n1. Make sure that Sandbox Settings is set in the lower left corner.\n1. In the Sandbox Token box, click Show to display the token.\n1. Copy the sandbox access token.\n1. In locations.py, replace {{REPLACE_ACCESS_TOKEN}} with that token.\n\nYou\u2019ll notice in locations.py that the Client object is initialized with the environment set to sandbox. You use the environment parameter to specify whether you want to access production or sandbox resources.\n\n**Important** When you eventually switch from trying things out on sandbox to actually working with your real production resources, you should not embed the access token in your code. Make sure you store and access your production access tokens securely.\n\nNow save `locations.py` and run it:\n\n```sh\npython locations.py\n```\n\nIf your call is successful, you\u2019ll get a response that looks like this:\n\n```\naddress : {'address_line_1': '1455 Market Street', 'administrative_district_level_1': 'CA', 'country': 'US', 'locality': 'San Francisco', 'postal_code': '94103'}\n# ...\n```\n\nYay! You successfully made your first call. If you didn\u2019t, you would see an error message that looks something like this:\n\n```\nError calling LocationsApi.listlocations\ncategory : AUTHENTICATION_ERROR\ncode : UNAUTHORIZED\ndetail : This request could not be authorized.\n```\n\nThis error was returned when an invalid token was used to call the API.\n\nAfter you\u2019ve tried out the Square APIs and tested your application using sandbox, you will want to switch to your production credentials so that you can manage real Square resources. Don't forget to switch your access token from sandbox to production for real data.\n\n## SDK patterns\nIf you know a few patterns, you\u2019ll be able to call any API in the SDK. Here are some important ones:\n\n### Get an access token\n\nTo use the Square API to manage the resources (such as payments, orders, customers, etc.) of a Square account, you need to create an application (or use an existing one) in the Developer Dashboard and get an access token for that application.\n\nWhen you call a Square API, you call it using an access token. An access token has specific permissions to resources in a specific Square account.\nUse an access token that is appropriate for your use case. There are two options:\n\n- To manage the resources for your own Square account, use the Personal Access Token for the application created in your Square account.\n- To manage resources for other Square accounts, use OAuth to ask owners of the accounts you want to manage so that you can work on their behalf. When you implement OAuth, you ask the Square account holder for permission to manage resources in their account (you can define the specific resources to access) and get an OAuth access token and refresh token for their account. For more information, see the [OAuth overview].\n\n**Important** For both use cases, make sure you store and access the tokens securely.\n\n### Import and Instantiate the Client Class\n\nTo use the Square API, you import the Client class, instantiate a Client object, and initialize it with the appropriate access token and environment. Here\u2019s how:\n\n1. Import the Client class from the Square Python SDK module so you can call the Square API:\n```python\nfrom square.client import Client\n```\n1. Instantiate a Client object and initialize it with the access token for the Square account whose resources you want to manage and the environment that you want to use.\n\nTo access sandbox resources, initialize the Client with environment set to sandbox:\n\n```python\nclient = Client(\n    access_token='{{REPLACE_ACCESS_TOKEN}}',\n    environment='sandbox',\n)\n```\n\nTo access production resources, set environment to production:\n\n```ruby\nclient = Client(\n    access_token='{{REPLACE_ACCESS_TOKEN}}',\n    environment='production',\n)\n```\n \n### Get an Instance of an API object and call its methods\n\nEach API is implemented as a class. The Client object instantiates every API class and exposes them as properties so you can easily start using any Square API. You work with an API by calling methods on an instance of an API class. Here\u2019s how:\n\n**Work with an API by calling the methods on the API object.** For example, you would call list_customers to get a list of all customers in the Square account:\n\n```python\nresult = square.customers.list_customers()\n```\nSee the SDK documentation for the list of methods for each API class.\n\n**Pass complex parameters (such as create, update, search, etc.) as a dictionary.** For example, you would pass a dictionary containing the values used to create a new customer using create_customer:\n\n```python\n# Create a unique key for this creation operation so you don't accidentally\n# create the customer multiple times if you need to retry this operation.\nimport uuid\nidempotency_key = str(uuid.uuid1())\n\n# To create a customer, you only need 1 of 5 identity values but you'll be\n# specifying two.\ngiven_name = \"Amelia\"\nfamily_name = \"Earhardt\"\nrequest_body = {'idempotency_key': idempotency_key, 'given_name': given_name, 'family_name': family_name}\n\n# Call create_customer method to create a new customer in this Square account\nresult = api_customers.create_customer(request_body)\n```\n\nIf your call succeeds, you\u2019ll see a response that looks like this:\n```\n{'customer': {'created_at': '2019-06-28T21:23:05.126Z', 'creation_source': 'THIRD_PARTY', 'family_name': 'Earhardt', 'given_name': 'Amelia', 'id': 'CBASEDwl3El91nohQ2FLEk4aBfcgAQ', 'preferences': {'email_unsubscribed': False}, 'updated_at': '2019-06-28T21:23:05.126Z'}}\n```\n\n**Use idempotency for create, update, or other calls that you want to avoid calling twice.** To make an idempotent API call, you add the idempotency_key with a unique value in the Hash for the API call\u2019s request.\n\n**Specify a location ID for APIs such as Transactions, Orders, and Checkout that deal with payments.** When a payment or order is created in Square, it is always associated with a location.\n\n### Handle the response\n\nAPI calls return an ApiResponse object that contains properties that describe both the request (headers and request) and the response (status_code, reason_phrase, text, errors, body, and cursor). Here\u2019s how to handle the response:\n\n**Check whether the response succeeded or failed.** ApiResponse has two helper methods that enable you to easily determine the success or failure of a call:\n\n```python\nif result.is_success():\n\t# Display the response as text\n    print({result.text})\n# Call the error method to see if the call failed\nelif result.is_error():\n    print(f\"Errors: {result.errors}\")\n```\n\n**Read the response payload.** The response payload is returned as text in the text property or as a dictionary in the body property. For retrieve calls, a dictionary containing a single item is returned with a key name that is the name of the object (for example, customer). For list calls, a dictionary containing a list of objects is returned with a key name that is the plural of the object name (for example, customers). If there are no objects for a list call to return, it returns an empty dictionary.\n\n**Check the cursor for list operations.** Make sure you get all items returned in a list call by checking the cursor value returned in the API response. When you call a list API the first time, you set the cursor to an empty string in the API request. If the API response contains a cursor value, you call the API again to get the next page of items and continue to call that API again until the cursor is not returned in the API response. Here\u2019s a code snippet that calls list_customers to count the total number of customers:\n\n```python\n# Initialize the customer count\ntotal_customers = 0\n# Initialize the cursor with an empty string since we are \n# calling list_customers for the first time\ncursor = \"\"\n# Count the total number of customers using the list_customers method\nwhile True:\n    # Call list_customers method to get all customers in this Square account\n    result = api_customers.list_customers(cursor)\n    if result.is_success():\n        # If any customers are returned, the body property \n        # is a list with the name customers.\n        # If there are no customers, APIResponse returns\n        # an empty dictionary.\n        if result.body:\n            customers = result.body['customers']\n            total_customers += len(customers)\n            # Get the cursor if it exists in the result else set it to None\n            cursor = result.body.get('cursor', None)\n            print(f\"cursor: {cursor}\")\n        else:\n            print(\"No customers.\")\n            break\n    # Call the error method to see if the call failed\n    elif result.is_error():\n        print(f\"Errors: {result.errors}\")\n        break\n    \n    # If there is no cursor, we are at the end of the list.\n    if cursor == None:\n        break\n\nprint(f\"Total customers: {total_customers}\")\n```\n\n## Tests\n\nFirst, clone the repo locally and `cd` into the directory.\n\n```sh\ngit clone https://github.com/square/square-python-sdk.git\ncd square-python-sdk\n```\n\nNext, install dependencies.\n\n```sh\npip install -r test-requirements.txt\n```\n\nBefore running the tests, find a sandbox token in your [Developer Dashboard] and set a `SQUARE_SANDBOX_TOKEN` environment variable.\n\n```sh\nexport SQUARE_SANDBOX_TOKEN=\"YOUR SANDBOX TOKEN HERE\"\n```\n\nAnd run the tests.\n\n```sh\nnosetests tests\n```\n\n## Learn more\n\nThe Square Platform is built on the [Square API]. Square has a number of other SDKs that enable you to securely handle credit card information on both mobile and web so that you can process payments via the Square API. \n\nYou can also use the Square API to create applications or services that work with payments, orders, inventory, etc. that have been created and managed in Square\u2019s in-person hardware products (Square Point of Sale and Square Register).\n\n[Square Logo]: https://docs.connect.squareup.com/images/github/github-square-logo.svg\n[Developer Dashboard]: https://developer.squareup.com/apps\n[Square API]: https://squareup.com/developers\n[sign up for a developer account]: https://squareup.com/signup?v=developers\n[Client]: doc/client.md\n[Payments]: doc/payments.md\n[Checkout]: doc/checkout.md\n[Catalog]: doc/catalog.md\n[Customers]: doc/customers.md\n[Employees]: doc/employees.md\n[Inventory]: doc/inventory.md\n[Labor]: doc/labor.md\n[Locations]: doc/locations.md\n[Merchants]: doc/merchants.md\n[Orders]: doc/orders.md\n[Apple Pay]: doc/apple-pay.md\n[Refunds]: doc/refunds.md\n[Reporting]: doc/reporting.md\n[Mobile Authorization]: doc/mobile-authorization.md\n[O Auth]: doc/o-auth.md\n[V1 Locations]: doc/v1-locations.md\n[V1 Employees]: doc/v1-employees.md\n[V1 Transactions]: doc/v1-transactions.md\n[V1 Items]: doc/v1-items.md\n[Transactions]: doc/transactions.md\n[Python SDK]: https://github.com/square/square-python-sdk\n[Locations overview]: https://developer.squareup.com/docs/locations-api/what-it-does\n[OAuth overview]: https://developer.squareup.com/docs/oauth-api/what-it-does", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://squareup.com/developers", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "squareup", "package_url": "https://pypi.org/project/squareup/", "platform": "", "project_url": "https://pypi.org/project/squareup/", "project_urls": {"Homepage": "https://squareup.com/developers"}, "release_url": "https://pypi.org/project/squareup/5.2.2.20200422/", "requires_dist": null, "requires_python": "", "summary": "Use Square APIs to manage and run business including payment, customer, product, inventory, and employee management.", "version": "5.2.2.20200422", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Square logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9578ff555b83603b5ac50793509f767e25a62fd/68747470733a2f2f646f63732e636f6e6e6563742e73717561726575702e636f6d2f696d616765732f6769746875622f6769746875622d7371756172652d6c6f676f2e737667\"></p>\n<h1>Square Python SDK</h1>\n<p><a href=\"https://travis-ci.org/square/square-python-sdk\" rel=\"nofollow\"><img alt=\"Travis status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac1e3a21e2ca41bb8ba2418d384f64a69b5ef420/68747470733a2f2f7472617669732d63692e6f72672f7371756172652f7371756172652d707974686f6e2d73646b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/squareup\" rel=\"nofollow\"><img alt=\"PyPi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e739140e76f7ea76d1beb5ac57ae4790b020366/68747470733a2f2f62616467652e667572792e696f2f70792f73717561726575702e7376673f6e6577\"></a>\n<a href=\"https://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\"><img alt=\"Apache-2 license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0175a81ba0a038acb4523890e41f45c48c270216/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d417061636865322d627269676874677265656e2e737667\"></a></p>\n<p>Use this Python library to manage Square resources (payments, orders, items, inventory, etc.) for your own Square account or on behalf of Square sellers.</p>\n<h2>Requirements</h2>\n<p>The SDK supports the following versions of Python:</p>\n<ul>\n<li>Python 2 versions 2.7.9 and later</li>\n<li>Python 3 versions 3.4 and later</li>\n</ul>\n<h2>Installation</h2>\n<p>Install the latest SDK using pip:</p>\n<pre>pip install squareup\n</pre>\n<p>Alternatively, you can download or clone the sdk from <a href=\"https://github.com/square/square-python-sdk\" rel=\"nofollow\">Python SDK</a> and then install the SDK by running Setuptools in the SDK installation directory:</p>\n<pre>python setup.py install --user\n</pre>\n<h2>API documentation</h2>\n<h3>API Client</h3>\n<ul>\n<li><a href=\"doc/client.md\" rel=\"nofollow\">Client</a></li>\n</ul>\n<h3>Take Payments</h3>\n<ul>\n<li><a href=\"doc/payments.md\" rel=\"nofollow\">Payments</a></li>\n<li><a href=\"doc/checkout.md\" rel=\"nofollow\">Checkout</a></li>\n</ul>\n<h3>More Square APIs</h3>\n<ul>\n<li><a href=\"doc/catalog.md\" rel=\"nofollow\">Catalog</a></li>\n<li><a href=\"doc/customers.md\" rel=\"nofollow\">Customers</a></li>\n<li><a href=\"doc/employees.md\" rel=\"nofollow\">Employees</a></li>\n<li><a href=\"doc/inventory.md\" rel=\"nofollow\">Inventory</a></li>\n<li><a href=\"doc/labor.md\" rel=\"nofollow\">Labor</a></li>\n<li><a href=\"doc/locations.md\" rel=\"nofollow\">Locations</a></li>\n<li><a href=\"doc/merchants.md\" rel=\"nofollow\">Merchants</a></li>\n<li><a href=\"doc/orders.md\" rel=\"nofollow\">Orders</a></li>\n<li><a href=\"doc/apple-pay.md\" rel=\"nofollow\">Apple Pay</a></li>\n<li><a href=\"doc/refunds.md\" rel=\"nofollow\">Refunds</a></li>\n<li><a href=\"doc/reporting.md\" rel=\"nofollow\">Reporting</a></li>\n</ul>\n<h3>Authorization APIs</h3>\n<ul>\n<li><a href=\"doc/mobile-authorization.md\" rel=\"nofollow\">Mobile Authorization</a></li>\n<li><a href=\"doc/o-auth.md\" rel=\"nofollow\">O Auth</a></li>\n</ul>\n<h3>Deprecated APIs</h3>\n<ul>\n<li><a href=\"doc/v1-locations.md\" rel=\"nofollow\">V1 Locations</a></li>\n<li><a href=\"doc/v1-employees.md\" rel=\"nofollow\">V1 Employees</a></li>\n<li><a href=\"doc/v1-transactions.md\" rel=\"nofollow\">V1 Transactions</a></li>\n<li><a href=\"doc/v1-items.md\" rel=\"nofollow\">V1 Items</a></li>\n<li><a href=\"doc/transactions.md\" rel=\"nofollow\">Transactions</a></li>\n</ul>\n<h2>Usage</h2>\n<p>First time using Square? Here\u2019s how to get started:</p>\n<ol>\n<li><strong>Create a Square account.</strong> If you don\u2019t have one already, <a href=\"https://squareup.com/signup?v=developers\" rel=\"nofollow\">sign up for a developer account</a>.</li>\n<li><strong>Create an application.</strong> Go to your <a href=\"https://developer.squareup.com/apps\" rel=\"nofollow\">Developer Dashboard</a> and create your first application. All you need to do is give it a name. When you\u2019re doing this for your production application, enter the name as you would want a customer to see it.</li>\n<li><strong>Make your first API call.</strong> Almost all Square API calls require a location ID. You\u2019ll make your first call to list_locations, which happens to be one of the API calls that don\u2019t require a location ID. For more information about locations, see the <a href=\"https://developer.squareup.com/docs/locations-api/what-it-does\" rel=\"nofollow\">Locations overview</a>.</li>\n</ol>\n<p>Now let\u2019s call your first Square API. Open your favorite text editor, create a new file called <code>locations.py</code>, and copy the following code into that file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">square.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n \n<span class=\"c1\"># Create an instance of the API Client </span>\n<span class=\"c1\"># and initialize it with the credentials </span>\n<span class=\"c1\"># for the Square account whose assets you want to manage</span>\n \n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'{{REPLACE_ACCESS_TOKEN}}'</span><span class=\"p\">,</span>\n    <span class=\"n\">environment</span><span class=\"o\">=</span><span class=\"s1\">'sandbox'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n \n<span class=\"c1\"># Get an instance of the Square API you want call</span>\n<span class=\"n\">api_locations</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">locations</span>\n \n<span class=\"c1\"># Call list_locations method to get all locations in this Square account</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">api_locations</span><span class=\"o\">.</span><span class=\"n\">list_locations</span><span class=\"p\">()</span>\n<span class=\"c1\"># Call the success method to see if the call succeeded</span>\n<span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">is_success</span><span class=\"p\">():</span>\n\t<span class=\"c1\"># The body property is a list of locations</span>\n    <span class=\"n\">locations</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"s1\">'locations'</span><span class=\"p\">]</span>\n\t<span class=\"c1\"># Iterate over the list</span>\n    <span class=\"k\">for</span> <span class=\"n\">location</span> <span class=\"ow\">in</span> <span class=\"n\">locations</span><span class=\"p\">:</span>\n    \t<span class=\"c1\"># Each location is represented as a dictionary</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        \t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\"> : </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Call the error method to see if the call failed</span>\n<span class=\"k\">elif</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">is_error</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Error calling LocationsApi.listlocations'</span><span class=\"p\">)</span>\n    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n    <span class=\"c1\"># An error is returned as a list of errors</span>\n    <span class=\"k\">for</span> <span class=\"n\">error</span> <span class=\"ow\">in</span> <span class=\"n\">errors</span><span class=\"p\">:</span>\n    \t<span class=\"c1\"># Each error is represented as a dictionary</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\"> : </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<p>Next, get an access token and reference it in your code. To call the Square API, you need to get an access token and initialize the API Client class with that token. An application has two sets of credentials: production and sandbox. To get started, you\u2019ll use your sandbox token so that you can try things out in a test environment that is completely separate from production. Here\u2019s how:</p>\n<ol>\n<li>Go back to your application in the Developer Dashboard.</li>\n<li>View the details of your application.</li>\n<li>Make sure that Sandbox Settings is set in the lower left corner.</li>\n<li>In the Sandbox Token box, click Show to display the token.</li>\n<li>Copy the sandbox access token.</li>\n<li>In locations.py, replace {{REPLACE_ACCESS_TOKEN}} with that token.</li>\n</ol>\n<p>You\u2019ll notice in locations.py that the Client object is initialized with the environment set to sandbox. You use the environment parameter to specify whether you want to access production or sandbox resources.</p>\n<p><strong>Important</strong> When you eventually switch from trying things out on sandbox to actually working with your real production resources, you should not embed the access token in your code. Make sure you store and access your production access tokens securely.</p>\n<p>Now save <code>locations.py</code> and run it:</p>\n<pre>python locations.py\n</pre>\n<p>If your call is successful, you\u2019ll get a response that looks like this:</p>\n<pre><code>address : {'address_line_1': '1455 Market Street', 'administrative_district_level_1': 'CA', 'country': 'US', 'locality': 'San Francisco', 'postal_code': '94103'}\n# ...\n</code></pre>\n<p>Yay! You successfully made your first call. If you didn\u2019t, you would see an error message that looks something like this:</p>\n<pre><code>Error calling LocationsApi.listlocations\ncategory : AUTHENTICATION_ERROR\ncode : UNAUTHORIZED\ndetail : This request could not be authorized.\n</code></pre>\n<p>This error was returned when an invalid token was used to call the API.</p>\n<p>After you\u2019ve tried out the Square APIs and tested your application using sandbox, you will want to switch to your production credentials so that you can manage real Square resources. Don't forget to switch your access token from sandbox to production for real data.</p>\n<h2>SDK patterns</h2>\n<p>If you know a few patterns, you\u2019ll be able to call any API in the SDK. Here are some important ones:</p>\n<h3>Get an access token</h3>\n<p>To use the Square API to manage the resources (such as payments, orders, customers, etc.) of a Square account, you need to create an application (or use an existing one) in the Developer Dashboard and get an access token for that application.</p>\n<p>When you call a Square API, you call it using an access token. An access token has specific permissions to resources in a specific Square account.\nUse an access token that is appropriate for your use case. There are two options:</p>\n<ul>\n<li>To manage the resources for your own Square account, use the Personal Access Token for the application created in your Square account.</li>\n<li>To manage resources for other Square accounts, use OAuth to ask owners of the accounts you want to manage so that you can work on their behalf. When you implement OAuth, you ask the Square account holder for permission to manage resources in their account (you can define the specific resources to access) and get an OAuth access token and refresh token for their account. For more information, see the <a href=\"https://developer.squareup.com/docs/oauth-api/what-it-does\" rel=\"nofollow\">OAuth overview</a>.</li>\n</ul>\n<p><strong>Important</strong> For both use cases, make sure you store and access the tokens securely.</p>\n<h3>Import and Instantiate the Client Class</h3>\n<p>To use the Square API, you import the Client class, instantiate a Client object, and initialize it with the appropriate access token and environment. Here\u2019s how:</p>\n<ol>\n<li>Import the Client class from the Square Python SDK module so you can call the Square API:</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">square.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n</pre>\n<ol>\n<li>Instantiate a Client object and initialize it with the access token for the Square account whose resources you want to manage and the environment that you want to use.</li>\n</ol>\n<p>To access sandbox resources, initialize the Client with environment set to sandbox:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'{{REPLACE_ACCESS_TOKEN}}'</span><span class=\"p\">,</span>\n    <span class=\"n\">environment</span><span class=\"o\">=</span><span class=\"s1\">'sandbox'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To access production resources, set environment to production:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"no\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'{{REPLACE_ACCESS_TOKEN}}'</span><span class=\"p\">,</span>\n    <span class=\"n\">environment</span><span class=\"o\">=</span><span class=\"s1\">'production'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Get an Instance of an API object and call its methods</h3>\n<p>Each API is implemented as a class. The Client object instantiates every API class and exposes them as properties so you can easily start using any Square API. You work with an API by calling methods on an instance of an API class. Here\u2019s how:</p>\n<p><strong>Work with an API by calling the methods on the API object.</strong> For example, you would call list_customers to get a list of all customers in the Square account:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">square</span><span class=\"o\">.</span><span class=\"n\">customers</span><span class=\"o\">.</span><span class=\"n\">list_customers</span><span class=\"p\">()</span>\n</pre>\n<p>See the SDK documentation for the list of methods for each API class.</p>\n<p><strong>Pass complex parameters (such as create, update, search, etc.) as a dictionary.</strong> For example, you would pass a dictionary containing the values used to create a new customer using create_customer:</p>\n<pre><span class=\"c1\"># Create a unique key for this creation operation so you don't accidentally</span>\n<span class=\"c1\"># create the customer multiple times if you need to retry this operation.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"n\">idempotency_key</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid1</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># To create a customer, you only need 1 of 5 identity values but you'll be</span>\n<span class=\"c1\"># specifying two.</span>\n<span class=\"n\">given_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Amelia\"</span>\n<span class=\"n\">family_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Earhardt\"</span>\n<span class=\"n\">request_body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'idempotency_key'</span><span class=\"p\">:</span> <span class=\"n\">idempotency_key</span><span class=\"p\">,</span> <span class=\"s1\">'given_name'</span><span class=\"p\">:</span> <span class=\"n\">given_name</span><span class=\"p\">,</span> <span class=\"s1\">'family_name'</span><span class=\"p\">:</span> <span class=\"n\">family_name</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Call create_customer method to create a new customer in this Square account</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">api_customers</span><span class=\"o\">.</span><span class=\"n\">create_customer</span><span class=\"p\">(</span><span class=\"n\">request_body</span><span class=\"p\">)</span>\n</pre>\n<p>If your call succeeds, you\u2019ll see a response that looks like this:</p>\n<pre><code>{'customer': {'created_at': '2019-06-28T21:23:05.126Z', 'creation_source': 'THIRD_PARTY', 'family_name': 'Earhardt', 'given_name': 'Amelia', 'id': 'CBASEDwl3El91nohQ2FLEk4aBfcgAQ', 'preferences': {'email_unsubscribed': False}, 'updated_at': '2019-06-28T21:23:05.126Z'}}\n</code></pre>\n<p><strong>Use idempotency for create, update, or other calls that you want to avoid calling twice.</strong> To make an idempotent API call, you add the idempotency_key with a unique value in the Hash for the API call\u2019s request.</p>\n<p><strong>Specify a location ID for APIs such as Transactions, Orders, and Checkout that deal with payments.</strong> When a payment or order is created in Square, it is always associated with a location.</p>\n<h3>Handle the response</h3>\n<p>API calls return an ApiResponse object that contains properties that describe both the request (headers and request) and the response (status_code, reason_phrase, text, errors, body, and cursor). Here\u2019s how to handle the response:</p>\n<p><strong>Check whether the response succeeded or failed.</strong> ApiResponse has two helper methods that enable you to easily determine the success or failure of a call:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">is_success</span><span class=\"p\">():</span>\n\t<span class=\"c1\"># Display the response as text</span>\n    <span class=\"nb\">print</span><span class=\"p\">({</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">})</span>\n<span class=\"c1\"># Call the error method to see if the call failed</span>\n<span class=\"k\">elif</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">is_error</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Errors: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Read the response payload.</strong> The response payload is returned as text in the text property or as a dictionary in the body property. For retrieve calls, a dictionary containing a single item is returned with a key name that is the name of the object (for example, customer). For list calls, a dictionary containing a list of objects is returned with a key name that is the plural of the object name (for example, customers). If there are no objects for a list call to return, it returns an empty dictionary.</p>\n<p><strong>Check the cursor for list operations.</strong> Make sure you get all items returned in a list call by checking the cursor value returned in the API response. When you call a list API the first time, you set the cursor to an empty string in the API request. If the API response contains a cursor value, you call the API again to get the next page of items and continue to call that API again until the cursor is not returned in the API response. Here\u2019s a code snippet that calls list_customers to count the total number of customers:</p>\n<pre><span class=\"c1\"># Initialize the customer count</span>\n<span class=\"n\">total_customers</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"c1\"># Initialize the cursor with an empty string since we are </span>\n<span class=\"c1\"># calling list_customers for the first time</span>\n<span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n<span class=\"c1\"># Count the total number of customers using the list_customers method</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Call list_customers method to get all customers in this Square account</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">api_customers</span><span class=\"o\">.</span><span class=\"n\">list_customers</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">is_success</span><span class=\"p\">():</span>\n        <span class=\"c1\"># If any customers are returned, the body property </span>\n        <span class=\"c1\"># is a list with the name customers.</span>\n        <span class=\"c1\"># If there are no customers, APIResponse returns</span>\n        <span class=\"c1\"># an empty dictionary.</span>\n        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">:</span>\n            <span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"s1\">'customers'</span><span class=\"p\">]</span>\n            <span class=\"n\">total_customers</span> <span class=\"o\">+=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">customers</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Get the cursor if it exists in the result else set it to None</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cursor'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"cursor: </span><span class=\"si\">{</span><span class=\"n\">cursor</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"No customers.\"</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span>\n    <span class=\"c1\"># Call the error method to see if the call failed</span>\n    <span class=\"k\">elif</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">is_error</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Errors: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n    \n    <span class=\"c1\"># If there is no cursor, we are at the end of the list.</span>\n    <span class=\"k\">if</span> <span class=\"n\">cursor</span> <span class=\"o\">==</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Total customers: </span><span class=\"si\">{</span><span class=\"n\">total_customers</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Tests</h2>\n<p>First, clone the repo locally and <code>cd</code> into the directory.</p>\n<pre>git clone https://github.com/square/square-python-sdk.git\n<span class=\"nb\">cd</span> square-python-sdk\n</pre>\n<p>Next, install dependencies.</p>\n<pre>pip install -r test-requirements.txt\n</pre>\n<p>Before running the tests, find a sandbox token in your <a href=\"https://developer.squareup.com/apps\" rel=\"nofollow\">Developer Dashboard</a> and set a <code>SQUARE_SANDBOX_TOKEN</code> environment variable.</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">SQUARE_SANDBOX_TOKEN</span><span class=\"o\">=</span><span class=\"s2\">\"YOUR SANDBOX TOKEN HERE\"</span>\n</pre>\n<p>And run the tests.</p>\n<pre>nosetests tests\n</pre>\n<h2>Learn more</h2>\n<p>The Square Platform is built on the <a href=\"https://squareup.com/developers\" rel=\"nofollow\">Square API</a>. Square has a number of other SDKs that enable you to securely handle credit card information on both mobile and web so that you can process payments via the Square API.</p>\n<p>You can also use the Square API to create applications or services that work with payments, orders, inventory, etc. that have been created and managed in Square\u2019s in-person hardware products (Square Point of Sale and Square Register).</p>\n\n          </div>"}, "last_serial": 7100676, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7e22c78521300f6fec25151020515916", "sha256": "c840bfce66b49b18b7e5676157f2d5d5e3bfb25ed9c0e5b5c7dc47a681afba53"}, "downloads": -1, "filename": "squareup-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7e22c78521300f6fec25151020515916", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1256, "upload_time": "2019-07-25T23:10:52", "upload_time_iso_8601": "2019-07-25T23:10:52.162693Z", "url": "https://files.pythonhosted.org/packages/21/64/56bd9d674906e2174ed47f43cd1a6ac134a8e85a99a83470b8e0f5e0521c/squareup-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dbf4c2961c919412d7b7aed605e8af0", "sha256": "0409039612bfe4c125bbb290ead267d2b446124accb25deff7389caab2182688"}, "downloads": -1, "filename": "squareup-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1dbf4c2961c919412d7b7aed605e8af0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 832, "upload_time": "2019-07-25T23:10:54", "upload_time_iso_8601": "2019-07-25T23:10:54.520329Z", "url": "https://files.pythonhosted.org/packages/07/02/d088a069c68742796a7b4c8171e4cb189ad3e3dcf1819c4f4ddac75e0a8b/squareup-0.0.1.tar.gz", "yanked": false}], "3.20190814.0": [{"comment_text": "", "digests": {"md5": "fc010b7b123bf678af2a7fa141f7c34a", "sha256": "f6567124e763eb49bca9d5daf73a59378d3e18c72a960ad4b4c8863f51b2f3e9"}, "downloads": -1, "filename": "squareup-3.20190814.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fc010b7b123bf678af2a7fa141f7c34a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 79173, "upload_time": "2019-08-15T14:45:17", "upload_time_iso_8601": "2019-08-15T14:45:17.411301Z", "url": "https://files.pythonhosted.org/packages/81/93/b8a9f8210922d0c406b73fe67868df7d5a8f15588a02cc38a5245d210447/squareup-3.20190814.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "545790217f1df1983ae6bed4db7de8f6", "sha256": "ab51623a5f8e7d34487019544fc981d109c882166981c1a5eb55c0c587e3323d"}, "downloads": -1, "filename": "squareup-3.20190814.0.tar.gz", "has_sig": false, "md5_digest": "545790217f1df1983ae6bed4db7de8f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51576, "upload_time": "2019-08-15T14:45:19", "upload_time_iso_8601": "2019-08-15T14:45:19.289070Z", "url": "https://files.pythonhosted.org/packages/07/61/f55e949ca368b879500060e713bee0e2c2da7ba9092e0bf327d8e02de679/squareup-3.20190814.0.tar.gz", "yanked": false}], "3.20190925.0": [{"comment_text": "", "digests": {"md5": "f4c1cb775bafd67dcd10d532d1ee8291", "sha256": "0ce193b05af6d6a02dc37d1b5a2ce03d9c6f472cce516d5eb569579cf72f2284"}, "downloads": -1, "filename": "squareup-3.20190925.0.tar.gz", "has_sig": false, "md5_digest": "f4c1cb775bafd67dcd10d532d1ee8291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48683, "upload_time": "2019-09-25T18:19:34", "upload_time_iso_8601": "2019-09-25T18:19:34.110779Z", "url": "https://files.pythonhosted.org/packages/e6/d0/170777b1a6fd711662420ec2b7e966130168da14467587f79851fac6290a/squareup-3.20190925.0.tar.gz", "yanked": false}], "3.20191023.0": [{"comment_text": "", "digests": {"md5": "22ec18c7b76c83cc8500d9bc405926d6", "sha256": "e16acac6410422ff92b11ac48027111cda97b1feb9817e42eb0c74a64d0baf41"}, "downloads": -1, "filename": "squareup-3.20191023.0.tar.gz", "has_sig": false, "md5_digest": "22ec18c7b76c83cc8500d9bc405926d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49124, "upload_time": "2019-10-24T21:46:01", "upload_time_iso_8601": "2019-10-24T21:46:01.510945Z", "url": "https://files.pythonhosted.org/packages/82/58/6b847ae02d5cad5535758e0580367a0b41b813fd2e7b54cd41015f63853f/squareup-3.20191023.0.tar.gz", "yanked": false}], "3.20191120.0": [{"comment_text": "", "digests": {"md5": "0f98bd1576c25191c287aba31ebee608", "sha256": "4f2ff8685b22feff6ffa21f068faab7665433176dc987330e629262a0a4ea566"}, "downloads": -1, "filename": "squareup-3.20191120.0.tar.gz", "has_sig": false, "md5_digest": "0f98bd1576c25191c287aba31ebee608", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50397, "upload_time": "2019-11-20T23:26:40", "upload_time_iso_8601": "2019-11-20T23:26:40.919153Z", "url": "https://files.pythonhosted.org/packages/e5/1b/8fb40ddb360679028f4e4d19a108306d4f84c1c200e804c1792771e7d7d4/squareup-3.20191120.0.tar.gz", "yanked": false}], "3.3.0.20191217": [{"comment_text": "", "digests": {"md5": "3e422c5756ec3db46fbcdb6fdfaf2b90", "sha256": "a7908c2f6c7b3b38a2240d96f7e570a9691d220368c1d325fb4eb25d700b35a9"}, "downloads": -1, "filename": "squareup-3.3.0.20191217.tar.gz", "has_sig": false, "md5_digest": "3e422c5756ec3db46fbcdb6fdfaf2b90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51015, "upload_time": "2019-12-17T18:27:17", "upload_time_iso_8601": "2019-12-17T18:27:17.338986Z", "url": "https://files.pythonhosted.org/packages/c9/0a/1940148b0381702b5c429b0c2acadaab598b87f71583eda5943ac12c6153/squareup-3.3.0.20191217.tar.gz", "yanked": false}], "4.0.0.20191217": [{"comment_text": "", "digests": {"md5": "dd3644976618afdd708e641768c31137", "sha256": "5e830b8ee4ddd2691d2282f490c83e9fb22025aea78d327864cc41584f19e37b"}, "downloads": -1, "filename": "squareup-4.0.0.20191217.tar.gz", "has_sig": false, "md5_digest": "dd3644976618afdd708e641768c31137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51006, "upload_time": "2019-12-17T19:53:15", "upload_time_iso_8601": "2019-12-17T19:53:15.670876Z", "url": "https://files.pythonhosted.org/packages/75/4c/5c3ee364d40a9ddd41db835409cf567ebe22f2e722ac19a8761388651d73/squareup-4.0.0.20191217.tar.gz", "yanked": false}], "4.1.0.20200122": [{"comment_text": "", "digests": {"md5": "c95c0e2b5a90f45f2a99316c03ac8208", "sha256": "54055d2fc250e299cee768251d8b1c925ae60ba966d88e9c0c32ad7391240b9b"}, "downloads": -1, "filename": "squareup-4.1.0.20200122.tar.gz", "has_sig": false, "md5_digest": "c95c0e2b5a90f45f2a99316c03ac8208", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51038, "upload_time": "2020-01-22T21:14:02", "upload_time_iso_8601": "2020-01-22T21:14:02.238645Z", "url": "https://files.pythonhosted.org/packages/1f/2c/dcdc497cf89e0602c4e8f8c4e8ee65650bf7b7af3bb114b603bf16d45305/squareup-4.1.0.20200122.tar.gz", "yanked": false}], "5.0.0.20200226": [{"comment_text": "", "digests": {"md5": "cf0c59c9b553547caeb028dc9f940f28", "sha256": "47f5d25a9942632f9b60e357d3c2f16650c9f7342ebea82ed6337afc939c3649"}, "downloads": -1, "filename": "squareup-5.0.0.20200226.tar.gz", "has_sig": false, "md5_digest": "cf0c59c9b553547caeb028dc9f940f28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54800, "upload_time": "2020-02-26T17:25:03", "upload_time_iso_8601": "2020-02-26T17:25:03.740593Z", "url": "https://files.pythonhosted.org/packages/4a/9f/99d6d5b18371e8fa7c4cbfcdf803db3a8e7e2491d05b92ea488b86c4828e/squareup-5.0.0.20200226.tar.gz", "yanked": false}], "5.1.0.20200325": [{"comment_text": "", "digests": {"md5": "d5c9bfd5fa6abe83a93e77615c5291b8", "sha256": "283cb9a16089b464a28b46b9390e1a000abef764d1accc9da5fe91844f00d2bd"}, "downloads": -1, "filename": "squareup-5.1.0.20200325.tar.gz", "has_sig": false, "md5_digest": "d5c9bfd5fa6abe83a93e77615c5291b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54823, "upload_time": "2020-03-25T16:12:53", "upload_time_iso_8601": "2020-03-25T16:12:53.398790Z", "url": "https://files.pythonhosted.org/packages/7c/80/c6c49e369f45499114299cb6ec8cce4b608a6b792d11c3fe09d79ac3d67c/squareup-5.1.0.20200325.tar.gz", "yanked": false}], "5.2.0.20200422": [{"comment_text": "", "digests": {"md5": "561d3efb1a9dca6f96794ee7ef13c290", "sha256": "bbacbf49f9b8a63ccf55a2e2e10eb4580a03187c01b66ae4cca188f65aca4d16"}, "downloads": -1, "filename": "squareup-5.2.0.20200422.tar.gz", "has_sig": false, "md5_digest": "561d3efb1a9dca6f96794ee7ef13c290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56750, "upload_time": "2020-04-22T16:14:59", "upload_time_iso_8601": "2020-04-22T16:14:59.244402Z", "url": "https://files.pythonhosted.org/packages/6a/44/5bc8a02e1641d4b937bbdbafa7e44c939abd1dfc8aeb9f3ee3ef7ff034dd/squareup-5.2.0.20200422.tar.gz", "yanked": false}], "5.2.1.20200422": [{"comment_text": "", "digests": {"md5": "2686e18039ab9cbac2174d33cbec0469", "sha256": "e01b36f3759b55dcf2cf414c74087a8e1f25828f2783576d3c7a5095b50a56d5"}, "downloads": -1, "filename": "squareup-5.2.1.20200422.tar.gz", "has_sig": false, "md5_digest": "2686e18039ab9cbac2174d33cbec0469", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56649, "upload_time": "2020-04-22T22:24:21", "upload_time_iso_8601": "2020-04-22T22:24:21.283675Z", "url": "https://files.pythonhosted.org/packages/ec/12/e1d69e8766be77dd66eef0c11628e9732e8912136b3bb171e64009659571/squareup-5.2.1.20200422.tar.gz", "yanked": false}], "5.2.2.20200422": [{"comment_text": "", "digests": {"md5": "0555e3b5141a19f3dd77588e629132e6", "sha256": "857f3c6454ef0e4d13e842ac9896776e68c3ee0b51925889d4e982d8bfb5a681"}, "downloads": -1, "filename": "squareup-5.2.2.20200422.tar.gz", "has_sig": false, "md5_digest": "0555e3b5141a19f3dd77588e629132e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56647, "upload_time": "2020-04-25T18:11:37", "upload_time_iso_8601": "2020-04-25T18:11:37.608479Z", "url": "https://files.pythonhosted.org/packages/19/03/67c35c38d09f43b1a78b3878b905d6c6d80ce498dc314aaa0932c953ae6e/squareup-5.2.2.20200422.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0555e3b5141a19f3dd77588e629132e6", "sha256": "857f3c6454ef0e4d13e842ac9896776e68c3ee0b51925889d4e982d8bfb5a681"}, "downloads": -1, "filename": "squareup-5.2.2.20200422.tar.gz", "has_sig": false, "md5_digest": "0555e3b5141a19f3dd77588e629132e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56647, "upload_time": "2020-04-25T18:11:37", "upload_time_iso_8601": "2020-04-25T18:11:37.608479Z", "url": "https://files.pythonhosted.org/packages/19/03/67c35c38d09f43b1a78b3878b905d6c6d80ce498dc314aaa0932c953ae6e/squareup-5.2.2.20200422.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:26 2020"}