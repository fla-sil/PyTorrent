{"info": {"author": "Abhinav Singh", "author_email": "mailsforabhinav@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: MacOS X", "Environment :: No Input/Output (Daemon)", "Environment :: Plugins", "Environment :: Web Environment", "Environment :: Win32 (MS Windows)", "Framework :: Robot Framework", "Framework :: Robot Framework :: Library", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: Android", "Operating System :: MacOS", "Operating System :: MacOS :: MacOS 9", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft", "Operating System :: Microsoft :: Windows", "Operating System :: Microsoft :: Windows :: Windows 10", "Operating System :: OS Independent", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation", "Topic :: Internet", "Topic :: Internet :: Proxy Servers", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Browsers", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Debuggers", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Monitoring", "Topic :: System :: Networking", "Topic :: System :: Networking :: Firewalls", "Topic :: System :: Networking :: Monitoring", "Topic :: Utilities", "Typing :: Typed"], "description": "[![Proxy.Py](https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/ProxyPy.png)](https://github.com/abhinavsingh/proxy.py)\n\n[![License](https://img.shields.io/github/license/abhinavsingh/proxy.py.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![PyPi Monthly](https://img.shields.io/pypi/dm/proxy.py.svg?color=green)](https://pypi.org/project/proxy.py/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/abhinavsingh/proxy.py?color=green)](https://hub.docker.com/r/abhinavsingh/proxy.py)\n[![No Dependencies](https://img.shields.io/static/v1?label=dependencies&message=none&color=green)](https://github.com/abhinavsingh/proxy.py)\n\n[![Proxy.py Library Build Status](https://github.com/abhinavsingh/proxy.py/workflows/Proxy.py%20Library/badge.svg)](https://github.com/abhinavsingh/proxy.py/actions)\n[![Proxy.py Docker Build Status](https://github.com/abhinavsingh/proxy.py/workflows/Proxy.py%20Docker/badge.svg)](https://github.com/abhinavsingh/proxy.py/actions)\n[![Proxy.py Docker Build Status](https://github.com/abhinavsingh/proxy.py/workflows/Proxy.py%20Dashboard/badge.svg)](https://github.com/abhinavsingh/proxy.py/actions)\n[![Proxy.py Docker Build Status](https://github.com/abhinavsingh/proxy.py/workflows/Proxy.py%20Brew/badge.svg)](https://github.com/abhinavsingh/proxy.py/actions)\n[![Coverage](https://codecov.io/gh/abhinavsingh/proxy.py/branch/develop/graph/badge.svg)](https://codecov.io/gh/abhinavsingh/proxy.py)\n\n[![Tested With MacOS, Ubuntu, Windows, Android, Android Emulator, iOS, iOS Simulator](https://img.shields.io/static/v1?label=tested%20with&message=mac%20OS%20%F0%9F%92%BB%20%7C%20Ubuntu%20%F0%9F%96%A5%20%7C%20Windows%20%F0%9F%92%BB&color=brightgreen)](https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/)\n[![Android, Android Emulator](https://img.shields.io/static/v1?label=tested%20with&message=Android%20%F0%9F%93%B1%20%7C%20Android%20Emulator%20%F0%9F%93%B1&color=brightgreen)](https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/)\n[![iOS, iOS Simulator](https://img.shields.io/static/v1?label=tested%20with&message=iOS%20%F0%9F%93%B1%20%7C%20iOS%20Simulator%20%F0%9F%93%B1&color=brightgreen)](https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/)\n\n[![Maintenance](https://img.shields.io/static/v1?label=maintained%3F&message=yes&color=green)](https://gitHub.com/abhinavsingh/proxy.py/graphs/commit-activity)\n[![Ask Me Anything](https://img.shields.io/static/v1?label=need%20help%3F&message=ask&color=green)](https://twitter.com/imoracle)\n[![Contributions Welcome](https://img.shields.io/static/v1?label=contributions&message=welcome%20%F0%9F%91%8D&color=green)](https://github.com/abhinavsingh/proxy.py/issues)\n[![Gitter](https://badges.gitter.im/proxy-py/community.svg)](https://gitter.im/proxy-py/community)\n\n[![Python 3.5](https://img.shields.io/static/v1?label=Python&message=3.5%20%7C%203.6%20%7C%203.7%20%7C%203.8&color=blue)](https://www.python.org/)\n[![Checked with mypy](https://img.shields.io/static/v1?label=MyPy&message=checked&color=blue)](http://mypy-lang.org/)\n\n[![Become a Backer](https://opencollective.com/proxypy/tiers/backer.svg?avatarHeight=72)](https://opencollective.com/proxypy)\n\nTable of Contents\n=================\n\n* [Features](#features)\n* [Install](#install)\n    * [Using PIP](#using-pip)\n        * [Stable version](#stable-version-with-pip)\n        * [Development version](#development-version-with-pip)\n    * [Using Docker](#using-docker)\n        * [Stable version](#stable-version-from-docker-hub)\n        * [Development version](#build-development-version-locally)\n    * [Using HomeBrew](#using-homebrew)\n        * [Stable version](#stable-version-with-homebrew)\n        * [Development version](#development-version-with-homebrew)\n* [Start proxy.py](#start-proxypy)\n    * [From command line when installed using PIP](#from-command-line-when-installed-using-pip)\n        * [Run it](#run-it)\n        * [Understanding logs](#understanding-logs)\n        * [Enable DEBUG logging](#enable-debug-logging)\n    * [From command line using repo source](#from-command-line-using-repo-source)\n    * [Docker Image](#docker-image)\n        * [Customize Startup Flags](#customize-startup-flags)\n* [Plugin Examples](#plugin-examples)\n    * [HTTP Proxy Plugins](#http-proxy-plugins)\n        * [ShortLink Plugin](#shortlinkplugin)\n        * [Modify Post Data Plugin](#modifypostdataplugin)\n        * [Mock Api Plugin](#mockrestapiplugin)\n        * [Redirect To Custom Server Plugin](#redirecttocustomserverplugin)\n        * [Filter By Upstream Host Plugin](#filterbyupstreamhostplugin)\n        * [Cache Responses Plugin](#cacheresponsesplugin)\n        * [Man-In-The-Middle Plugin](#maninthemiddleplugin)\n        * [Proxy Pool Plugin](#proxypoolplugin)\n    * [HTTP Web Server Plugins](#http-web-server-plugins)\n        * [Reverse Proxy](#reverse-proxy)\n        * [Web Server Route](#web-server-route)\n    * [Plugin Ordering](#plugin-ordering)\n* [End-to-End Encryption](#end-to-end-encryption)\n* [TLS Interception](#tls-interception)\n* [Proxy Over SSH Tunnel](#proxy-over-ssh-tunnel)\n    * [Proxy Remote Requests Locally](#proxy-remote-requests-locally)\n    * [Proxy Local Requests Remotely](#proxy-local-requests-remotely)\n* [Embed proxy.py](#embed-proxypy)\n    * [Blocking Mode](#blocking-mode)\n    * [Non-blocking Mode](#non-blocking-mode)\n* [Unit testing with proxy.py](#unit-testing-with-proxypy)\n    * [proxy.TestCase](#proxytestcase)\n    * [Override Startup Flags](#override-startup-flags)\n    * [With unittest.TestCase](#with-unittesttestcase)\n* [Plugin Developer and Contributor Guide](#plugin-developer-and-contributor-guide)\n    * [Everything is a plugin](#everything-is-a-plugin)\n    * [Internal Architecture](#internal-architecture)\n    * [Internal Documentation](#internal-documentation)\n    * [Development Guide](#development-guide)\n        * [Setup Local Environment](#setup-local-environment)\n        * [Setup pre-commit hook](#setup-pre-commit-hook)\n        * [Sending a Pull Request](#sending-a-pull-request)\n* [Utilities](#utilities)\n    * [TCP](#tcp-sockets)\n        * [new_socket_connection](#new_socket_connection)\n        * [socket_connection](#socket_connection)\n    * [Http](#http-client)\n        * [build_http_request](#build_http_request)\n        * [build_http_response](#build_http_response)\n    * [Public Key Infrastructure](#pki)\n        * [API Usage](#api-usage)\n        * [CLI Usage](#cli-usage)\n* [Frequently Asked Questions](#frequently-asked-questions)\n    * [Threads vs Threadless](#threads-vs-threadless)\n    * [SyntaxError: invalid syntax](#syntaxerror-invalid-syntax)\n    * [Unable to load plugins](#unable-to-load-plugins)\n    * [Unable to connect with proxy.py from remote host](#unable-to-connect-with-proxypy-from-remote-host)\n    * [Basic auth not working with a browser](#basic-auth-not-working-with-a-browser)\n    * [Docker image not working on MacOS](#docker-image-not-working-on-macos)\n    * [ValueError: filedescriptor out of range in select](#valueerror-filedescriptor-out-of-range-in-select)\n    * [None:None in access logs](#nonenone-in-access-logs)\n* [Flags](#flags)\n* [Changelog](#changelog)\n    * [v2.x](#v2x)\n    * [v1.x](#v1x)\n    * [v0.x](#v0x)\n\nFeatures\n========\n\n- Fast & Scalable\n    - Scales by using all available cores on the system\n    - Threadless executions using coroutine\n    - Made to handle `tens-of-thousands` connections / sec\n        ```bash\n        # On Macbook Pro 2015 / 2.8 GHz Intel Core i7\n        \u276f hey -n 10000 -c 100 http://localhost:8899/\n\n        Summary:\n          Total:\t0.6157 secs\n          Slowest:\t0.1049 secs\n          Fastest:\t0.0007 secs\n          Average:\t0.0055 secs\n          Requests/sec:\t16240.5444\n\n          Total data:\t800000 bytes\n          Size/request:\t80 bytes\n\n        Response time histogram:\n          0.001 [1]     |\n          0.011 [9565]\t|\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n          0.022 [332]\t|\u25a0\n        ```\n- Lightweight\n    - Uses only `~5-20MB` RAM\n    - No external dependency other than standard Python library\n- Programmable\n    - Optionally enable builtin Web Server\n    - Customize proxy and http routing via [plugins](https://github.com/abhinavsingh/proxy.py/tree/develop/proxy/plugin)\n    - Enable plugin using command line option e.g. `--plugins proxy.plugin.CacheResponsesPlugin`\n    - Plugin API is currently in development phase, expect breaking changes.\n- Realtime Dashboard\n    - Optionally enable bundled dashboard.\n        - Available at `http://localhost:8899/dashboard`.\n    - Inspect, Monitor, Control and Configure `proxy.py` at runtime.\n    - Extend dashboard using plugins.\n    - Dashboard is currently in development phase, expect breaking changes.\n- Secure\n    - Enable end-to-end encryption between clients and `proxy.py` using TLS\n    - See [End-to-End Encryption](#end-to-end-encryption)\n- Man-In-The-Middle\n    - Can decrypt TLS traffic between clients and upstream servers\n    - See [TLS Interception](#tls-interception)\n- Supported proxy protocols\n    - `http(s)`\n        - `http1`\n        - `http1.1` pipeline\n    - `http2`\n    - `websockets`\n- Optimized for large file uploads and downloads\n- IPv4 and IPv6 support\n- Basic authentication support\n- Can serve a [PAC (Proxy Auto-configuration)](https://en.wikipedia.org/wiki/Proxy_auto-config) file\n    - See `--pac-file` and `--pac-file-url-path` flags\n\nInstall\n=======\n\n## Using PIP\n\n### Stable Version with PIP\n\nInstall from `PyPi`\n\n```bash\n\u276f pip install --upgrade proxy.py\n```\n\nor from GitHub `master` branch\n\n```bash\n\u276f pip install git+https://github.com/abhinavsingh/proxy.py.git@master\n```\n\n### Development Version with PIP\n\n```bash\n\u276f pip install git+https://github.com/abhinavsingh/proxy.py.git@develop\n```\n\n## Using Docker\n\n#### Stable Version from Docker Hub\n\n```bash\n\u276f docker run -it -p 8899:8899 --rm abhinavsingh/proxy.py:latest\n```\n\n#### Build Development Version Locally\n\n```bash\n\u276f git clone https://github.com/abhinavsingh/proxy.py.git\n\u276f cd proxy.py\n\u276f make container\n\u276f docker run -it -p 8899:8899 --rm abhinavsingh/proxy.py:latest\n```\n\n[![WARNING](https://img.shields.io/static/v1?label=MacOS&message=warning&color=red)](https://github.com/moby/vpnkit/issues/469)\n`docker` image is currently broken on `macOS` due to incompatibility with [vpnkit](https://github.com/moby/vpnkit/issues/469).\n\n## Using HomeBrew\n\n### Stable Version with HomeBrew\n\n```bash\n\u276f brew install https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/helper/homebrew/stable/proxy.rb\n```\n\n### Development Version with HomeBrew\n\n```bash\n\u276f brew install https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/helper/homebrew/develop/proxy.rb\n```\n\nStart proxy.py\n==============\n\n## From command line when installed using PIP\n\nWhen `proxy.py` is installed using `pip`,\nan executable named `proxy` is placed under your `$PATH`.\n\n#### Run it\n\nSimply type `proxy` on command line to start it with default configuration.\n\n```bash\n\u276f proxy\n...[redacted]... - Loaded plugin proxy.http_proxy.HttpProxyPlugin\n...[redacted]... - Starting 8 workers\n...[redacted]... - Started server on ::1:8899\n```\n\n#### Understanding logs\n\nThings to notice from above logs:\n\n- `Loaded plugin` - `proxy.py` will load `proxy.http.proxy.HttpProxyPlugin` by default.\n  As name suggests, this core plugin adds `http(s)` proxy server capabilities to `proxy.py`\n\n- `Started N workers` - Use `--num-workers` flag to customize number of worker processes.\n  By default, `proxy.py` will start as many workers as there are CPU cores on the machine.\n\n- `Started server on ::1:8899` - By default, `proxy.py` listens on IPv6 `::1`, which\n  is equivalent of IPv4 `127.0.0.1`.  If you want to access `proxy.py` externally,\n  use `--hostname ::` or `--hostname 0.0.0.0` or bind to any other interface available\n  on your machine.\n\n- `Port 8899` - Use `--port` flag to customize default TCP port.\n\n#### Enable DEBUG logging\n\nAll the logs above are `INFO` level logs, default `--log-level` for `proxy.py`.\n\nLets start `proxy.py` with `DEBUG` level logging:\n\n```bash\n\u276f proxy --log-level d\n...[redacted]... - Open file descriptor soft limit set to 1024\n...[redacted]... - Loaded plugin proxy.http_proxy.HttpProxyPlugin\n...[redacted]... - Started 8 workers\n...[redacted]... - Started server on ::1:8899\n```\n\nAs we can see, before starting up:\n\n- `proxy.py` also tried to set open file limit `ulimit` on the system.\n- Default value for `--open-file-limit` used is `1024`.\n- `--open-file-limit` flag is a no-op on `Windows` operating systems.\n\nSee [flags](#flags) for full list of available configuration options.\n\n## From command line using repo source\n\nIf you are trying to run `proxy.py` from source code,\nthere is no binary file named `proxy` in the source code.\n\nTo start `proxy.py` from source code follow these instructions:\n\n- Clone repo\n\n    ```bash\n    \u276f git clone https://github.com/abhinavsingh/proxy.py.git\n    \u276f cd proxy.py\n    ```\n\n- Create a Python 3 virtual env\n\n    ```bash\n    \u276f python3 -m venv venv\n    \u276f source venv/bin/activate\n    ```\n\n- Install deps\n\n    ```bash\n    \u276f pip install -r requirements.txt\n    \u276f pip install -r requirements-testing.txt\n    ```\n\n- Run tests\n\n    ```bash\n    \u276f make\n    ```\n\n- Run proxy.py\n\n    ```bash\n    \u276f python -m proxy\n    ```\n\nAlso see [Plugin Developer and Contributor Guide](#plugin-developer-and-contributor-guide)\nif you plan to work with `proxy.py` source code.\n\n## Docker image\n\n#### Customize startup flags\n\nBy default `docker` binary is started with IPv4 networking flags:\n\n    --hostname 0.0.0.0 --port 8899\n\nTo override input flags, start docker image as follows.\nFor example, to check `proxy.py` version within Docker image:\n\n    \u276f docker run -it \\\n        -p 8899:8899 \\\n        --rm abhinavsingh/proxy.py:latest \\\n        -v\n\nPlugin Examples\n===============\n\n- See [plugin](https://github.com/abhinavsingh/proxy.py/tree/develop/proxy/plugin) module for full code.\n- All the bundled plugin examples also works with `https` traffic\n    - Require additional flags and certificate generation\n    - See [TLS Interception](#tls-interception).\n- Plugin examples are also bundled with Docker image.\n    - See [Customize startup flags](#customize-startup-flags) to try plugins with Docker image.\n\n## HTTP Proxy Plugins\n\n### ShortLinkPlugin\n\nAdd support for short links in your favorite browsers / applications.\n\n[![Shortlink Plugin](https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/shortlink.gif)](https://github.com/abhinavsingh/proxy.py#shortlinkplugin)\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.ShortLinkPlugin\n```\n\nNow you can speed up your daily browsing experience by visiting your\nfavorite website using single character domain names :).  This works\nacross all browsers.\n\nFollowing short links are enabled by default:\n\nShort Link | Destination URL\n:--------: | :---------------:\na/ | amazon.com\ni/ | instagram.com\nl/ | linkedin.com\nf/ | facebook.com\ng/ | google.com\nt/ | twitter.com\nw/ | web.whatsapp.com\ny/ | youtube.com\nproxy/ | localhost:8899\n\n### ModifyPostDataPlugin\n\nModifies POST request body before sending request to upstream server.\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.ModifyPostDataPlugin\n```\n\nBy default plugin replaces POST body content with hardcoded `b'{\"key\": \"modified\"}'`\nand enforced `Content-Type: application/json`.\n\nVerify the same using `curl -x localhost:8899 -d '{\"key\": \"value\"}' http://httpbin.org/post`\n\n```bash\n{\n  \"args\": {},\n  \"data\": \"{\\\"key\\\": \\\"modified\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Content-Length\": \"19\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\"\n  },\n  \"json\": {\n    \"key\": \"modified\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/post\"\n}\n```\n\nNote following from the response above:\n\n1. POST data was modified `\"data\": \"{\\\"key\\\": \\\"modified\\\"}\"`.\n   Original `curl` command data was `{\"key\": \"value\"}`.\n2. Our `curl` command did not add any `Content-Type` header,\n   but our plugin did add one `\"Content-Type\": \"application/json\"`.\n   Same can also be verified by looking at `json` field in the output above:\n   ```\n   \"json\": {\n    \"key\": \"modified\"\n   },\n   ```\n3. Our plugin also added a `Content-Length` header to match length\n   of modified body.\n\n### MockRestApiPlugin\n\nMock responses for your server REST API.\nUse to test and develop client side applications\nwithout need of an actual upstream REST API server.\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.ProposedRestApiPlugin\n```\n\nVerify mock API response using `curl -x localhost:8899 http://api.example.com/v1/users/`\n\n```bash\n{\"count\": 2, \"next\": null, \"previous\": null, \"results\": [{\"email\": \"you@example.com\", \"groups\": [], \"url\": \"api.example.com/v1/users/1/\", \"username\": \"admin\"}, {\"email\": \"someone@example.com\", \"groups\": [], \"url\": \"api.example.com/v1/users/2/\", \"username\": \"admin\"}]}\n```\n\nVerify the same by inspecting `proxy.py` logs:\n\n```bash\n2019-09-27 12:44:02,212 - INFO - pid:7077 - access_log:1210 - ::1:64792 - GET None:None/v1/users/ - None None - 0 byte\n```\n\nAccess log shows `None:None` as server `ip:port`.  `None` simply means that\nthe server connection was never made, since response was returned by our plugin.\n\nNow modify `ProposedRestApiPlugin` to returns REST API mock\nresponses as expected by your clients.\n\n### RedirectToCustomServerPlugin\n\nRedirects all incoming `http` requests to custom web server.\nBy default, it redirects client requests to inbuilt web server,\nalso running on `8899` port.\n\nStart `proxy.py` and enable inbuilt web server:\n\n```bash\n\u276f proxy \\\n    --enable-web-server \\\n    --plugins proxy.plugin.RedirectToCustomServerPlugin\n```\n\nVerify using `curl -v -x localhost:8899 http://google.com`\n\n```\n... [redacted] ...\n< HTTP/1.1 404 NOT FOUND\n< Server: proxy.py v1.0.0\n< Connection: Close\n<\n* Closing connection 0\n```\n\nAbove `404` response was returned from `proxy.py` web server.\n\nVerify the same by inspecting the logs for `proxy.py`.\nAlong with the proxy request log, you must also see a http web server request log.\n\n```\n2019-09-24 19:09:33,602 - INFO - pid:49996 - access_log:1241 - ::1:49525 - GET /\n2019-09-24 19:09:33,603 - INFO - pid:49995 - access_log:1157 - ::1:49524 - GET localhost:8899/ - 404 NOT FOUND - 70 bytes\n```\n\n### FilterByUpstreamHostPlugin\n\nDrops traffic by inspecting upstream host.\nBy default, plugin drops traffic for `google.com` and `www.google.com`.\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.FilterByUpstreamHostPlugin\n```\n\nVerify using `curl -v -x localhost:8899 http://google.com`:\n\n```bash\n... [redacted] ...\n< HTTP/1.1 418 I'm a tea pot\n< Proxy-agent: proxy.py v1.0.0\n* no chunk, no close, no size. Assume close to signal end\n<\n* Closing connection 0\n```\n\nAbove `418 I'm a tea pot` is sent by our plugin.\n\nVerify the same by inspecting logs for `proxy.py`:\n\n```bash\n2019-09-24 19:21:37,893 - ERROR - pid:50074 - handle_readables:1347 - HttpProtocolException type raised\nTraceback (most recent call last):\n... [redacted] ...\n2019-09-24 19:21:37,897 - INFO - pid:50074 - access_log:1157 - ::1:49911 - GET None:None/ - None None - 0 bytes\n```\n\n### CacheResponsesPlugin\n\nCaches Upstream Server Responses.\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.CacheResponsesPlugin\n```\n\nVerify using `curl -v -x localhost:8899 http://httpbin.org/get`:\n\n```bash\n... [redacted] ...\n< HTTP/1.1 200 OK\n< Access-Control-Allow-Credentials: true\n< Access-Control-Allow-Origin: *\n< Content-Type: application/json\n< Date: Wed, 25 Sep 2019 02:24:25 GMT\n< Referrer-Policy: no-referrer-when-downgrade\n< Server: nginx\n< X-Content-Type-Options: nosniff\n< X-Frame-Options: DENY\n< X-XSS-Protection: 1; mode=block\n< Content-Length: 202\n< Connection: keep-alive\n<\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n* Connection #0 to host localhost left intact\n```\n\nGet path to the cache file from `proxy.py` logs:\n\n```bash\n... [redacted] ... - GET httpbin.org:80/get - 200 OK - 556 bytes\n... [redacted] ... - Cached response at /var/folders/k9/x93q0_xn1ls9zy76m2mf2k_00000gn/T/httpbin.org-1569378301.407512.txt\n```\n\nVerify contents of the cache file `cat /path/to/your/cache/httpbin.org.txt`\n\n```bash\nHTTP/1.1 200 OK\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Origin: *\nContent-Type: application/json\nDate: Wed, 25 Sep 2019 02:24:25 GMT\nReferrer-Policy: no-referrer-when-downgrade\nServer: nginx\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\nContent-Length: 202\nConnection: keep-alive\n\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\n### ManInTheMiddlePlugin\n\nModifies upstream server responses.\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.ManInTheMiddlePlugin\n```\n\nVerify using `curl -v -x localhost:8899 http://google.com`:\n\n```bash\n... [redacted] ...\n< HTTP/1.1 200 OK\n< Content-Length: 28\n<\n* Connection #0 to host localhost left intact\nHello from man in the middle\n```\n\nResponse body `Hello from man in the middle` is sent by our plugin.\n\n### ProxyPoolPlugin\n\nForward incoming proxy requests to a set of upstream proxy servers.\n\nBy default, `ProxyPoolPlugin` is hard-coded to use\n`localhost:9000` and `localhost:9001` as upstream proxy server.\n\nLet's start upstream proxies first.\n\nStart `proxy.py` on port `9000` and `9001`\n\n```bash\n\u276f proxy --port 9000\n```\n\n```bash\n\u276f proxy --port 9001\n```\n\nNow, start `proxy.py` with `ProxyPoolPlugin` (on default `8899` port):\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.ProxyPoolPlugin\n```\n\nMake a curl request via `8899` proxy:\n\n`curl -v -x localhost:8899 http://httpbin.org/get`\n\nVerify that `8899` proxy forwards requests to upstream proxies\nby checking respective logs.\n\n## HTTP Web Server Plugins\n\n### Reverse Proxy\n\nExtend in-built Web Server to add Reverse Proxy capabilities.\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.ReverseProxyPlugin\n```\n\nWith default configuration, `ReverseProxyPlugin` plugin is equivalent to\nfollowing `Nginx` config:\n\n```bash\nlocation /get {\n    proxy_pass http://httpbin.org/get\n}\n```\n\nVerify using `curl -v localhost:8899/get`:\n\n```bash\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Host\": \"localhost\",\n    \"User-Agent\": \"curl/7.64.1\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://localhost/get\"\n}\n```\n\n### Web Server Route\n\nDemonstrates inbuilt web server routing using plugin.\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.WebServerPlugin\n```\n\nVerify using `curl -v localhost:8899/http-route-example`, should return:\n\n```bash\nHTTP route response\n```\n\n## Plugin Ordering\n\nWhen using multiple plugins, depending upon plugin functionality,\nit might be worth considering the order in which plugins are passed\non the command line.\n\nPlugins are called in the same order as they are passed. Example,\nsay we are using both `FilterByUpstreamHostPlugin` and\n`RedirectToCustomServerPlugin`. Idea is to drop all incoming `http`\nrequests for `google.com` and `www.google.com` and redirect other\n`http` requests to our inbuilt web server.\n\nHence, in this scenario it is important to use\n`FilterByUpstreamHostPlugin` before `RedirectToCustomServerPlugin`.\nIf we enable `RedirectToCustomServerPlugin` before `FilterByUpstreamHostPlugin`,\n`google` requests will also get redirected to inbuilt web server,\ninstead of being dropped.\n\nEnd-to-End Encryption\n=====================\n\nBy default, `proxy.py` uses `http` protocol for communication with clients e.g. `curl`, `browser`.\nFor enabling end-to-end encrypting using `tls` / `https` first generate certificates:\n\n```bash\nmake https-certificates\n```\n\nStart `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --cert-file https-cert.pem \\\n    --key-file https-key.pem\n```\n\nVerify using `curl -x https://localhost:8899 --proxy-cacert https-cert.pem https://httpbin.org/get`:\n\n```bash\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\nTLS Interception\n=================\n\nBy default, `proxy.py` will not decrypt `https` traffic between client and server.\nTo enable TLS interception first generate CA certificates:\n\n```\nmake ca-certificates\n```\n\nLets also enable `CacheResponsePlugin` so that we can verify decrypted\nresponse from the server. Start `proxy.py` as:\n\n```bash\n\u276f proxy \\\n    --plugins proxy.plugin.CacheResponsesPlugin \\\n    --ca-key-file ca-key.pem \\\n    --ca-cert-file ca-cert.pem \\\n    --ca-signing-key-file ca-signing-key.pem\n```\n\nVerify using `curl -v -x localhost:8899 --cacert ca-cert.pem https://httpbin.org/get`\n\n```bash\n*  issuer: C=US; ST=CA; L=SanFrancisco; O=proxy.py; OU=CA; CN=Proxy PY CA; emailAddress=proxyca@mailserver.com\n*  SSL certificate verify ok.\n> GET /get HTTP/1.1\n... [redacted] ...\n< Connection: keep-alive\n<\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\nThe `issuer` line confirms that response was intercepted.\n\nAlso verify the contents of cached response file.  Get path to the cache\nfile from `proxy.py` logs.\n\n`\u276f cat /path/to/your/tmp/directory/httpbin.org-1569452863.924174.txt`\n\n```bash\nHTTP/1.1 200 OK\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Origin: *\nContent-Type: application/json\nDate: Wed, 25 Sep 2019 23:07:05 GMT\nReferrer-Policy: no-referrer-when-downgrade\nServer: nginx\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\nContent-Length: 202\nConnection: keep-alive\n\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\nViola!!!  If you remove CA flags, encrypted data will be found in the\ncached file instead of plain text.\n\nNow use CA flags with other\n[plugin examples](#plugin-examples) to see them work with `https` traffic.\n\nProxy Over SSH Tunnel\n=====================\n\nRequires `paramiko` to work. See [requirements-tunnel.txt](https://github.com/abhinavsingh/proxy.py/blob/develop/requirements-tunnel.txt)\n\n## Proxy Remote Requests Locally\n\n                            |\n    +------------+          |            +----------+\n    |   LOCAL    |          |            |  REMOTE  |\n    |   HOST     | <== SSH ==== :8900 == |  SERVER  |\n    +------------+          |            +----------+\n    :8899 proxy.py          |\n                            |\n                         FIREWALL\n                      (allow tcp/22)\n\n## What\n\nProxy HTTP(s) requests made on a `remote` server through `proxy.py` server\nrunning on `localhost`.\n\n### How\n\n* Requested `remote` port is forwarded over the SSH connection.\n* `proxy.py` running on the `localhost` handles and responds to\n  `remote` proxy requests.\n\n### Requirements\n\n1. `localhost` MUST have SSH access to the `remote` server\n2. `remote` server MUST be configured to proxy HTTP(s) requests\n   through the forwarded port number e.g. `:8900`.\n   - `remote` and `localhost` ports CAN be same e.g. `:8899`.\n   - `:8900` is chosen in ascii art for differentiation purposes.\n\n### Try it\n\nStart `proxy.py` as:\n\n```bash\n\u276f # On localhost\n\u276f proxy --enable-tunnel \\\n    --tunnel-username username \\\n    --tunnel-hostname ip.address.or.domain.name \\\n    --tunnel-port 22 \\\n    --tunnel-remote-host 127.0.0.1\n    --tunnel-remote-port 8899\n```\n\nMake a HTTP proxy request on `remote` server and\nverify that response contains public IP address of `localhost` as origin:\n\n```bash\n\u276f # On remote\n\u276f curl -x 127.0.0.1:8899 http://httpbin.org/get\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"x.x.x.x, y.y.y.y\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\nAlso, verify that `proxy.py` logs on `localhost` contains `remote` IP as client IP.\n\n```bash\naccess_log:328 - remote:52067 - GET httpbin.org:80\n```\n\n## Proxy Local Requests Remotely\n\n                            |\n    +------------+          |     +----------+\n    |   LOCAL    |          |     |  REMOTE  |\n    |   HOST     | === SSH =====> |  SERVER  |\n    +------------+          |     +----------+\n                            |     :8899 proxy.py\n                            |\n                        FIREWALL\n                     (allow tcp/22)\n\nEmbed proxy.py\n==============\n\n## Blocking Mode\n\nStart `proxy.py` in embedded mode with default configuration\nby using `proxy.main` method. Example:\n\n```python\nimport proxy\n\nif __name__ == '__main__':\n  proxy.main()\n```\n\nCustomize startup flags by passing list of input arguments:\n\n```python\nimport proxy\n\nif __name__ == '__main__':\n  proxy.main([\n    '--hostname', '::1',\n    '--port', '8899'\n  ])\n```\n\nor, customize startup flags by passing them as kwargs:\n\n```python\nimport ipaddress\nimport proxy\n\nif __name__ == '__main__':\n  proxy.main(\n    hostname=ipaddress.IPv6Address('::1'),\n    port=8899\n  )\n```\n\nNote that:\n\n1. Calling `main` is simply equivalent to starting `proxy.py` from command line.\n2. `main` will block until `proxy.py` shuts down.\n\n## Non-blocking Mode\n\nStart `proxy.py` in non-blocking embedded mode with default configuration\nby using `start` method:  Example:\n\n```python\nimport proxy\n\nif __name__ == '__main__':\n  with proxy.start([]):\n    # ... your logic here ...\n```\n\nNote that:\n\n1. `start` is similar to `main`, except `start` won't block.\n1. `start` is a context manager.\n   It will start `proxy.py` when called and will shut it down\n   once scope ends.\n3. Just like `main`, startup flags with `start` method\n   can be customized by either passing flags as list of\n   input arguments e.g. `start(['--port', '8899'])` or\n   by using passing flags as kwargs e.g. `start(port=8899)`.\n\nUnit testing with proxy.py\n==========================\n\n## proxy.TestCase\n\nTo setup and teardown `proxy.py` for your Python unittest classes,\nsimply use `proxy.TestCase` instead of `unittest.TestCase`.\nExample:\n\n```python\nimport proxy\n\n\nclass TestProxyPyEmbedded(proxy.TestCase):\n\n    def test_my_application_with_proxy(self) -> None:\n        self.assertTrue(True)\n```\n\nNote that:\n\n1. `proxy.TestCase` overrides `unittest.TestCase.run()` method to setup and teardown `proxy.py`.\n2. `proxy.py` server will listen on a random available port on the system.\n   This random port is available as `self.PROXY_PORT` within your test cases.\n3. Only a single worker is started by default (`--num-workers 1`) for faster setup and teardown.\n4. Most importantly, `proxy.TestCase` also ensures `proxy.py` server\n   is up and running before proceeding with execution of tests. By default,\n   `proxy.TestCase` will wait for `10 seconds` for `proxy.py` server to start,\n   upon failure a `TimeoutError` exception will be raised.\n\n## Override startup flags\n\nTo override default startup flags, define a `PROXY_PY_STARTUP_FLAGS` variable in your test class.\nExample:\n\n```python\nclass TestProxyPyEmbedded(TestCase):\n\n    PROXY_PY_STARTUP_FLAGS = [\n        '--num-workers', '1',\n        '--enable-web-server',\n    ]\n\n    def test_my_application_with_proxy(self) -> None:\n        self.assertTrue(True)\n```\n\nSee [test_embed.py](https://github.com/abhinavsingh/proxy.py/blob/develop/tests/test_embed.py)\nfor full working example.\n\n## With unittest.TestCase\n\nIf for some reasons you are unable to directly use `proxy.TestCase`,\nthen simply override `unittest.TestCase.run` yourself to setup and teardown `proxy.py`.\nExample:\n\n```python\nimport unittest\nimport proxy\n\n\nclass TestProxyPyEmbedded(unittest.TestCase):\n\n    def test_my_application_with_proxy(self) -> None:\n        self.assertTrue(True)\n\n    def run(self, result: Optional[unittest.TestResult] = None) -> Any:\n        with proxy.start([\n                '--num-workers', '1',\n                '--port', '... random port ...']):\n            super().run(result)\n```\n\nor simply setup / teardown `proxy.py` within\n`setUpClass` and `teardownClass` class methods.\n\nPlugin Developer and Contributor Guide\n======================================\n\n## Everything is a plugin\n\nAs you might have guessed by now, in `proxy.py` everything is a plugin.\n\n- We enabled proxy server plugins using `--plugins` flag.\n  All the [plugin examples](#plugin-examples) were implementing\n  `HttpProxyBasePlugin`.  See documentation of\n  [HttpProxyBasePlugin](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L894-L938)\n  for available lifecycle hooks. Use `HttpProxyBasePlugin` to modify\n  behavior of http(s) proxy protocol between client and upstream server.\n  Example, [FilterByUpstreamHostPlugin](#filterbyupstreamhostplugin).\n\n- We also enabled inbuilt web server using `--enable-web-server`.\n  Inbuilt web server implements `HttpProtocolHandlerPlugin` plugin.\n  See documentation of [HttpProtocolHandlerPlugin](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L793-L850)\n  for available lifecycle hooks. Use `HttpProtocolHandlerPlugin` to add\n  new features for http(s) clients. Example,\n  [HttpWebServerPlugin](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L1185-L1260).\n\n- There also is a `--disable-http-proxy` flag. It disables inbuilt proxy server.\n  Use this flag with `--enable-web-server` flag to run `proxy.py` as a programmable\n  http(s) server. [HttpProxyPlugin](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L941-L1182)\n  also implements `HttpProtocolHandlerPlugin`.\n\n## Internal Architecture\n\n- [HttpProtocolHandler](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L1263-L1440)\nthread is started with the accepted [TcpClientConnection](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L230-L237).\n`HttpProtocolHandler` is responsible for parsing incoming client request and invoking\n`HttpProtocolHandlerPlugin` lifecycle hooks.\n\n- `HttpProxyPlugin` which implements `HttpProtocolHandlerPlugin` also has its own plugin\nmechanism. Its responsibility is to establish connection between client and\nupstream [TcpServerConnection](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L204-L227)\nand invoke `HttpProxyBasePlugin` lifecycle hooks.\n\n- `HttpProtocolHandler` threads are started by [Acceptor](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L424-L472)\n  processes.\n\n- `--num-workers` `Acceptor` processes are started by\n  [AcceptorPool](https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L368-L421)\n  on start-up.\n\n- `AcceptorPool` listens on server socket and pass the handler to `Acceptor` processes.\n  Workers are responsible for accepting new client connections and starting\n  `HttpProtocolHandler` thread.\n\n## Development Guide\n\n### Setup Local Environment\n\nContributors must start `proxy.py` from source to verify and develop new features / fixes.\n\nSee [Run proxy.py from command line using repo source](#from-command-line-using-repo-source) for details.\n\n### Setup pre-commit hook\n\nPre-commit hook ensures lint checking and tests execution.\n\n1. `cd /path/to/proxy.py`\n2. `ln -s $(PWD)/git-pre-commit .git/hooks/pre-commit`\n\n### Sending a Pull Request\n\nEvery pull request is tested using GitHub actions.\n\nSee [GitHub workflow](https://github.com/abhinavsingh/proxy.py/tree/develop/.github/workflows)\nfor list of tests.\n\nUtilities\n=========\n\n## TCP Sockets\n\n### new_socket_connection\n\nAttempts to create an IPv4 connection, then IPv6 and\nfinally a dual stack connection to provided address.\n\n```python\n>>> conn = new_socket_connection(('httpbin.org', 80))\n>>> ...[ use connection ]...\n>>> conn.close()\n```\n\n### socket_connection\n\n`socket_connection` is a convenient decorator + context manager\naround `new_socket_connection` which ensures `conn.close` is implicit.\n\nAs a context manager:\n\n```python\n>>> with socket_connection(('httpbin.org', 80)) as conn:\n>>>   ... [ use connection ] ...\n```\n\nAs a decorator:\n\n```python\n>>> @socket_connection(('httpbin.org', 80))\n>>> def my_api_call(conn, *args, **kwargs):\n>>>   ... [ use connection ] ...\n```\n\n## Http Client\n\n### build_http_request\n\n#### Generate HTTP GET request\n\n```python\n>>> build_http_request(b'GET', b'/')\nb'GET / HTTP/1.1\\r\\n\\r\\n'\n>>>\n```\n\n#### Generate HTTP GET request with headers\n\n```python\n>>> build_http_request(b'GET', b'/',\n        headers={b'Connection': b'close'})\nb'GET / HTTP/1.1\\r\\nConnection: close\\r\\n\\r\\n'\n>>>\n```\n\n#### Generate HTTP POST request with headers and body\n\n```python\n>>> import json\n>>> build_http_request(b'POST', b'/form',\n        headers={b'Content-type': b'application/json'},\n        body=proxy.bytes_(json.dumps({'email': 'hello@world.com'})))\n    b'POST /form HTTP/1.1\\r\\nContent-type: application/json\\r\\n\\r\\n{\"email\": \"hello@world.com\"}'\n```\n\n### build_http_response\n\nTODO\n\n## PKI\n\n### API Usage\n\n#### gen_private_key\n#### gen_public_key\n#### remove_passphrase\n#### gen_csr\n#### sign_csr\n\nSee [pki.py](https://github.com/abhinavsingh/proxy.py/blob/develop/proxy/common/pki.py) for\nmethod parameters and [test_pki.py](https://github.com/abhinavsingh/proxy.py/blob/develop/tests/common/test_pki.py)\nfor usage examples.\n\n### CLI Usage\n\nUse `proxy.common.pki` module for:\n\n1) Generation of public and private keys\n2) Generating CSR requests\n3) Signing CSR requests using custom CA.\n\n```bash\npython -m proxy.common.pki -h\nusage: pki.py [-h] [--password PASSWORD] [--private-key-path PRIVATE_KEY_PATH]\n              [--public-key-path PUBLIC_KEY_PATH] [--subject SUBJECT]\n              action\n\nproxy.py v2.1.0 : PKI Utility\n\npositional arguments:\n  action                Valid actions: remove_passphrase, gen_private_key,\n                        gen_public_key, gen_csr, sign_csr\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --password PASSWORD   Password to use for encryption. Default: proxy.py\n  --private-key-path PRIVATE_KEY_PATH\n                        Private key path\n  --public-key-path PUBLIC_KEY_PATH\n                        Public key path\n  --subject SUBJECT     Subject to use for public key generation. Default:\n                        /CN=example.com\n```\n\n## Internal Documentation\n\nBrowse through internal class hierarchy and documentation using `pydoc3`.\nExample:\n\n```bash\n\u276f pydoc3 proxy\n\nPACKAGE CONTENTS\n    __main__\n    common (package)\n    core (package)\n    http (package)\n    main\n\nFILE\n    /Users/abhinav/Dev/proxy.py/proxy/__init__.py\n```\n\nFrequently Asked Questions\n==========================\n\n## Threads vs Threadless\n\nPre v2.x, `proxy.py` used to spawn new threads for handling\nclient requests.\n\nStarting v2.x, `proxy.py` added support for threadless execution of\nclient requests using `asyncio`.\n\nIn future, threadless execution will be the default mode.\n\nTill then if you are interested in trying it out,\nstart `proxy.py` with `--threadless` flag.\n\n## SyntaxError: invalid syntax\n\nMake sure you are using `Python 3`. Verify the version before running `proxy.py`:\n\n`\u276f python --version`\n\n## Unable to load plugins\n\nMake sure plugin modules are discoverable by adding them to `PYTHONPATH`.  Example:\n\n`PYTHONPATH=/path/to/my/app proxy --plugins my_app.proxyPlugin`\n\n```bash\n...[redacted]... - Loaded plugin proxy.HttpProxyPlugin\n...[redacted]... - Loaded plugin my_app.proxyPlugin\n```\n\nOR, simply pass fully-qualified path as parameter, e.g.\n\n`proxy --plugins /path/to/my/app/my_app.proxyPlugin`\n\n## Unable to connect with proxy.py from remote host\n\nMake sure `proxy.py` is listening on correct network interface.\nTry following flags:\n\n- For IPv6 `--hostname ::`\n- For IPv4 `--hostname 0.0.0.0`\n\n## Basic auth not working with a browser\n\nMost likely it's a browser integration issue with system keychain.\n\n- First verify that basic auth is working using `curl`\n\n    `curl -v -x username:password@localhost:8899 https://httpbin.org/get`\n\n- See [this thread](https://github.com/abhinavsingh/proxy.py/issues/89#issuecomment-534845710)\n  for further details.\n\n## Docker image not working on macOS\n\nIt's a compatibility issue with `vpnkit`.\n\nSee [moby/vpnkit exhausts docker resources](https://github.com/abhinavsingh/proxy.py/issues/43)\nand [Connection refused: The proxy could not connect](https://github.com/moby/vpnkit/issues/469)\nfor some background.\n\n## GCE log viewer integration for proxy.py\n\nA starter [fluentd.conf](https://github.com/abhinavsingh/proxy.py/blob/develop/fluentd.conf)\ntemplate is available.\n\n1. Copy this configuration file as `proxy.py.conf` under\n   `/etc/google-fluentd/config.d/`\n\n2. Update `path` field to log file path as used with `--log-file` flag.\n   By default `/tmp/proxy.log` path is tailed.\n\n3. Reload `google-fluentd`:\n\n   `sudo service google-fluentd restart`\n\nNow `proxy.py` logs can be browsed using\n[GCE log viewer](https://console.cloud.google.com/logs/viewer).\n\n## ValueError: filedescriptor out of range in select\n\n`proxy.py` is made to handle thousands of connections per second\nwithout any socket leaks.\n\n1. Make use of `--open-file-limit` flag to customize `ulimit -n`.\n2. Make sure to adjust `--backlog` flag for higher concurrency.\n\nIf nothing helps, [open an issue](https://github.com/abhinavsingh/proxy.py/issues/new)\nwith `requests per second` sent and output of following debug script:\n\n```bash\n\u276f ./helper/monitor_open_files.sh <proxy-py-pid>\n```\n\n## None:None in access logs\n\nSometimes you may see `None:None` in access logs.  It simply means\nthat an upstream server connection was never established i.e.\n`upstream_host=None`, `upstream_port=None`.\n\nThere can be several reasons for no upstream connection,\nfew obvious ones include:\n\n1. Client established a connection but never completed the request.\n2. A plugin returned a response prematurely, avoiding connection to upstream server.\n\nFlags\n=====\n\n```bash\n\u276f proxy -h\nusage: proxy [-h] [--backlog BACKLOG] [--basic-auth BASIC_AUTH]\n             [--ca-key-file CA_KEY_FILE] [--ca-cert-dir CA_CERT_DIR]\n             [--ca-cert-file CA_CERT_FILE]\n             [--ca-signing-key-file CA_SIGNING_KEY_FILE]\n             [--cert-file CERT_FILE]\n             [--client-recvbuf-size CLIENT_RECVBUF_SIZE]\n             [--devtools-ws-path DEVTOOLS_WS_PATH]\n             [--disable-headers DISABLE_HEADERS] [--disable-http-proxy]\n             [--enable-dashboard] [--enable-devtools] [--enable-events]\n             [--enable-static-server] [--enable-web-server]\n             [--hostname HOSTNAME] [--key-file KEY_FILE]\n             [--log-level LOG_LEVEL] [--log-file LOG_FILE]\n             [--log-format LOG_FORMAT] [--num-workers NUM_WORKERS]\n             [--open-file-limit OPEN_FILE_LIMIT] [--pac-file PAC_FILE]\n             [--pac-file-url-path PAC_FILE_URL_PATH]\n             [--pid-file PID_FILE] [--plugins PLUGINS] [--port PORT]\n             [--server-recvbuf-size SERVER_RECVBUF_SIZE]\n             [--static-server-dir STATIC_SERVER_DIR] [--threadless]\n             [--timeout TIMEOUT] [--version]\n\nproxy.py v2.1.0\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --backlog BACKLOG     Default: 100. Maximum number of pending connections to\n                        proxy server\n  --basic-auth BASIC_AUTH\n                        Default: No authentication. Specify colon separated\n                        user:password to enable basic authentication.\n  --ca-key-file CA_KEY_FILE\n                        Default: None. CA key to use for signing dynamically\n                        generated HTTPS certificates. If used, must also pass\n                        --ca-cert-file and --ca-signing-key-file\n  --ca-cert-dir CA_CERT_DIR\n                        Default: ~/.proxy.py. Directory to store dynamically\n                        generated certificates. Also see --ca-key-file, --ca-\n                        cert-file and --ca-signing-key-file\n  --ca-cert-file CA_CERT_FILE\n                        Default: None. Signing certificate to use for signing\n                        dynamically generated HTTPS certificates. If used,\n                        must also pass --ca-key-file and --ca-signing-key-file\n  --ca-signing-key-file CA_SIGNING_KEY_FILE\n                        Default: None. CA signing key to use for dynamic\n                        generation of HTTPS certificates. If used, must also\n                        pass --ca-key-file and --ca-cert-file\n  --cert-file CERT_FILE\n                        Default: None. Server certificate to enable end-to-end\n                        TLS encryption with clients. If used, must also pass\n                        --key-file.\n  --client-recvbuf-size CLIENT_RECVBUF_SIZE\n                        Default: 1 MB. Maximum amount of data received from\n                        the client in a single recv() operation. Bump this\n                        value for faster uploads at the expense of increased\n                        RAM.\n  --devtools-ws-path DEVTOOLS_WS_PATH\n                        Default: /devtools. Only applicable if --enable-\n                        devtools is used.\n  --disable-headers DISABLE_HEADERS\n                        Default: None. Comma separated list of headers to\n                        remove before dispatching client request to upstream\n                        server.\n  --disable-http-proxy  Default: False. Whether to disable\n                        proxy.HttpProxyPlugin.\n  --enable-dashboard    Default: False. Enables proxy.py dashboard.\n  --enable-devtools     Default: False. Enables integration with Chrome\n                        Devtool Frontend. Also see --devtools-ws-path.\n  --enable-events       Default: False. Enables core to dispatch lifecycle\n                        events. Plugins can be used to subscribe for core\n                        events.\n  --enable-static-server\n                        Default: False. Enable inbuilt static file server.\n                        Optionally, also use --static-server-dir to serve\n                        static content from custom directory. By default,\n                        static file server serves out of installed proxy.py\n                        python module folder.\n  --enable-web-server   Default: False. Whether to enable\n                        proxy.HttpWebServerPlugin.\n  --hostname HOSTNAME   Default: ::1. Server IP address.\n  --key-file KEY_FILE   Default: None. Server key file to enable end-to-end\n                        TLS encryption with clients. If used, must also pass\n                        --cert-file.\n  --log-level LOG_LEVEL\n                        Valid options: DEBUG, INFO (default), WARNING, ERROR,\n                        CRITICAL. Both upper and lowercase values are allowed.\n                        You may also simply use the leading character e.g.\n                        --log-level d\n  --log-file LOG_FILE   Default: sys.stdout. Log file destination.\n  --log-format LOG_FORMAT\n                        Log format for Python logger.\n  --num-workers NUM_WORKERS\n                        Defaults to number of CPU cores.\n  --open-file-limit OPEN_FILE_LIMIT\n                        Default: 1024. Maximum number of files (TCP\n                        connections) that proxy.py can open concurrently.\n  --pac-file PAC_FILE   A file (Proxy Auto Configuration) or string to serve\n                        when the server receives a direct file request. Using\n                        this option enables proxy.HttpWebServerPlugin.\n  --pac-file-url-path PAC_FILE_URL_PATH\n                        Default: /. Web server path to serve the PAC file.\n  --pid-file PID_FILE   Default: None. Save parent process ID to a file.\n  --plugins PLUGINS     Comma separated plugins\n  --port PORT           Default: 8899. Server port.\n  --server-recvbuf-size SERVER_RECVBUF_SIZE\n                        Default: 1 MB. Maximum amount of data received from\n                        the server in a single recv() operation. Bump this\n                        value for faster downloads at the expense of increased\n                        RAM.\n  --static-server-dir STATIC_SERVER_DIR\n                        Default: \"public\" folder in directory where proxy.py\n                        is placed. This option is only applicable when static\n                        server is also enabled. See --enable-static-server.\n  --threadless          Default: False. When disabled a new thread is spawned\n                        to handle each client connection.\n  --timeout TIMEOUT     Default: 10. Number of seconds after which an inactive\n                        connection must be dropped. Inactivity is defined by\n                        no data sent or received by the client.\n  --version, -v         Prints proxy.py version.\n\nProxy.py not working? Report at:\nhttps://github.com/abhinavsingh/proxy.py/issues/new\n```\n\nChangelog\n=========\n\n## v2.x\n\n- No longer ~~a single file module~~.\n- Added support for threadless execution.\n- Added dashboard app.\n- Added support for unit testing.\n\n## v1.x\n\n- `Python3` only.\n    - Deprecated support for ~~Python 2.x~~.\n- Added support multi core accept.\n- Added plugin support.\n\n## v0.x\n\n- Single file.\n- Single threaded server.\n\nFor detailed changelog refer to release PRs or commit history.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/abhinavsingh/proxy.py/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abhinavsingh/proxy.py", "keywords": "http,proxy,http proxy server,proxy server,http server,http web server,proxy framework,web framework,Python3", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "proxy.py", "package_url": "https://pypi.org/project/proxy.py/", "platform": "", "project_url": "https://pypi.org/project/proxy.py/", "project_urls": {"Download": "https://github.com/abhinavsingh/proxy.py/archive/master.zip", "Homepage": "https://github.com/abhinavsingh/proxy.py"}, "release_url": "https://pypi.org/project/proxy.py/2.1.2/", "requires_dist": null, "requires_python": "!=2.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "summary": "\u26a1\u26a1\u26a1Fast, Lightweight, Pluggable, TLS interception capable proxy server focused on Network monitoring, controls & Application development, testing, debugging.", "version": "2.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/abhinavsingh/proxy.py\" rel=\"nofollow\"><img alt=\"Proxy.Py\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d4c1ab7cee2a73d05bbb616fc6cdf4cf8ed6301/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616268696e617673696e67682f70726f78792e70792f646576656c6f702f50726f787950792e706e67\"></a></p>\n<p><a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/831b182b9eadc8e5f6b9bde0b67e61825f708de9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f616268696e617673696e67682f70726f78792e70792e737667\"></a>\n<a href=\"https://pypi.org/project/proxy.py/\" rel=\"nofollow\"><img alt=\"PyPi Monthly\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9303eeae11eebbc2dcc013bd8b12b8017f627e68/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f70726f78792e70792e7376673f636f6c6f723d677265656e\"></a>\n<a href=\"https://hub.docker.com/r/abhinavsingh/proxy.py\" rel=\"nofollow\"><img alt=\"Docker Pulls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0cbe62ad24e9e0a0bb60e362ec0c94500523cab9/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f616268696e617673696e67682f70726f78792e70793f636f6c6f723d677265656e\"></a>\n<a href=\"https://github.com/abhinavsingh/proxy.py\" rel=\"nofollow\"><img alt=\"No Dependencies\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/695e64a38e4caac539bb82df2de40ab9eb39454f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d646570656e64656e63696573266d6573736167653d6e6f6e6526636f6c6f723d677265656e\"></a></p>\n<p><a href=\"https://github.com/abhinavsingh/proxy.py/actions\" rel=\"nofollow\"><img alt=\"Proxy.py Library Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b5c275ce86d145c8c3f6d5b83cc3e6f9f651052/68747470733a2f2f6769746875622e636f6d2f616268696e617673696e67682f70726f78792e70792f776f726b666c6f77732f50726f78792e70792532304c6962726172792f62616467652e737667\"></a>\n<a href=\"https://github.com/abhinavsingh/proxy.py/actions\" rel=\"nofollow\"><img alt=\"Proxy.py Docker Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf48c9e70129df8bc8779b127bb4a459f427e950/68747470733a2f2f6769746875622e636f6d2f616268696e617673696e67682f70726f78792e70792f776f726b666c6f77732f50726f78792e7079253230446f636b65722f62616467652e737667\"></a>\n<a href=\"https://github.com/abhinavsingh/proxy.py/actions\" rel=\"nofollow\"><img alt=\"Proxy.py Docker Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf5b6e38c315513ff3c394db9d7532fd09de4e50/68747470733a2f2f6769746875622e636f6d2f616268696e617673696e67682f70726f78792e70792f776f726b666c6f77732f50726f78792e707925323044617368626f6172642f62616467652e737667\"></a>\n<a href=\"https://github.com/abhinavsingh/proxy.py/actions\" rel=\"nofollow\"><img alt=\"Proxy.py Docker Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/edf437285f8a7d972eca36290cd3909989bcfea7/68747470733a2f2f6769746875622e636f6d2f616268696e617673696e67682f70726f78792e70792f776f726b666c6f77732f50726f78792e7079253230427265772f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/abhinavsingh/proxy.py\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6de5584354159f2bb5f8451354716ce11466731/68747470733a2f2f636f6465636f762e696f2f67682f616268696e617673696e67682f70726f78792e70792f6272616e63682f646576656c6f702f67726170682f62616467652e737667\"></a></p>\n<p><a href=\"https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/\" rel=\"nofollow\"><img alt=\"Tested With MacOS, Ubuntu, Windows, Android, Android Emulator, iOS, iOS Simulator\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d91ec81077dfc9a57a03f4c58b9e92993d8d6d3d/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d74657374656425323077697468266d6573736167653d6d61632532304f532532302546302539462539322542422532302537432532305562756e747525323025463025394625393625413525323025374325323057696e646f777325323025463025394625393225424226636f6c6f723d627269676874677265656e\"></a>\n<a href=\"https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/\" rel=\"nofollow\"><img alt=\"Android, Android Emulator\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e84b93bdfe99c03989b43f66db5f3b58190550c7/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d74657374656425323077697468266d6573736167653d416e64726f6964253230254630253946253933254231253230253743253230416e64726f6964253230456d756c61746f7225323025463025394625393325423126636f6c6f723d627269676874677265656e\"></a>\n<a href=\"https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/\" rel=\"nofollow\"><img alt=\"iOS, iOS Simulator\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/578e3dc3eb5dd10e0a5704a18faa20b657735d9a/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d74657374656425323077697468266d6573736167653d694f53253230254630253946253933254231253230253743253230694f5325323053696d756c61746f7225323025463025394625393325423126636f6c6f723d627269676874677265656e\"></a></p>\n<p><a href=\"https://gitHub.com/abhinavsingh/proxy.py/graphs/commit-activity\" rel=\"nofollow\"><img alt=\"Maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fa48360100528b0f270a12c1f630510a805a27e/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d6d61696e7461696e6564253346266d6573736167653d79657326636f6c6f723d677265656e\"></a>\n<a href=\"https://twitter.com/imoracle\" rel=\"nofollow\"><img alt=\"Ask Me Anything\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2d581c859102d3befb4cc0326b6f7d0831dac84/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d6e65656425323068656c70253346266d6573736167653d61736b26636f6c6f723d677265656e\"></a>\n<a href=\"https://github.com/abhinavsingh/proxy.py/issues\" rel=\"nofollow\"><img alt=\"Contributions Welcome\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f00b6a6a35294a9837af3848df479d5987caa452/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f6e747269627574696f6e73266d6573736167653d77656c636f6d6525323025463025394625393125384426636f6c6f723d677265656e\"></a>\n<a href=\"https://gitter.im/proxy-py/community\" rel=\"nofollow\"><img alt=\"Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2eee156f261d8677647c86fbda7a00de5fe8e4d6/68747470733a2f2f6261646765732e6769747465722e696d2f70726f78792d70792f636f6d6d756e6974792e737667\"></a></p>\n<p><a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"Python 3.5\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99019562c28c2cd46f9bc52a435cf18fcb5795d4/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d507974686f6e266d6573736167653d332e35253230253743253230332e36253230253743253230332e37253230253743253230332e3826636f6c6f723d626c7565\"></a>\n<a href=\"http://mypy-lang.org/\" rel=\"nofollow\"><img alt=\"Checked with mypy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eca598200b7be4a0b4c3e7df8439641f0240be21/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d4d795079266d6573736167653d636865636b656426636f6c6f723d626c7565\"></a></p>\n<p><a href=\"https://opencollective.com/proxypy\" rel=\"nofollow\"><img alt=\"Become a Backer\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e8b40d3c37c5d652249495d43a974f5357028de/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f70726f787970792f74696572732f6261636b65722e7376673f6176617461724865696768743d3732\"></a></p>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a>\n<ul>\n<li><a href=\"#using-pip\" rel=\"nofollow\">Using PIP</a>\n<ul>\n<li><a href=\"#stable-version-with-pip\" rel=\"nofollow\">Stable version</a></li>\n<li><a href=\"#development-version-with-pip\" rel=\"nofollow\">Development version</a></li>\n</ul>\n</li>\n<li><a href=\"#using-docker\" rel=\"nofollow\">Using Docker</a>\n<ul>\n<li><a href=\"#stable-version-from-docker-hub\" rel=\"nofollow\">Stable version</a></li>\n<li><a href=\"#build-development-version-locally\" rel=\"nofollow\">Development version</a></li>\n</ul>\n</li>\n<li><a href=\"#using-homebrew\" rel=\"nofollow\">Using HomeBrew</a>\n<ul>\n<li><a href=\"#stable-version-with-homebrew\" rel=\"nofollow\">Stable version</a></li>\n<li><a href=\"#development-version-with-homebrew\" rel=\"nofollow\">Development version</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#start-proxypy\" rel=\"nofollow\">Start proxy.py</a>\n<ul>\n<li><a href=\"#from-command-line-when-installed-using-pip\" rel=\"nofollow\">From command line when installed using PIP</a>\n<ul>\n<li><a href=\"#run-it\" rel=\"nofollow\">Run it</a></li>\n<li><a href=\"#understanding-logs\" rel=\"nofollow\">Understanding logs</a></li>\n<li><a href=\"#enable-debug-logging\" rel=\"nofollow\">Enable DEBUG logging</a></li>\n</ul>\n</li>\n<li><a href=\"#from-command-line-using-repo-source\" rel=\"nofollow\">From command line using repo source</a></li>\n<li><a href=\"#docker-image\" rel=\"nofollow\">Docker Image</a>\n<ul>\n<li><a href=\"#customize-startup-flags\" rel=\"nofollow\">Customize Startup Flags</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#plugin-examples\" rel=\"nofollow\">Plugin Examples</a>\n<ul>\n<li><a href=\"#http-proxy-plugins\" rel=\"nofollow\">HTTP Proxy Plugins</a>\n<ul>\n<li><a href=\"#shortlinkplugin\" rel=\"nofollow\">ShortLink Plugin</a></li>\n<li><a href=\"#modifypostdataplugin\" rel=\"nofollow\">Modify Post Data Plugin</a></li>\n<li><a href=\"#mockrestapiplugin\" rel=\"nofollow\">Mock Api Plugin</a></li>\n<li><a href=\"#redirecttocustomserverplugin\" rel=\"nofollow\">Redirect To Custom Server Plugin</a></li>\n<li><a href=\"#filterbyupstreamhostplugin\" rel=\"nofollow\">Filter By Upstream Host Plugin</a></li>\n<li><a href=\"#cacheresponsesplugin\" rel=\"nofollow\">Cache Responses Plugin</a></li>\n<li><a href=\"#maninthemiddleplugin\" rel=\"nofollow\">Man-In-The-Middle Plugin</a></li>\n<li><a href=\"#proxypoolplugin\" rel=\"nofollow\">Proxy Pool Plugin</a></li>\n</ul>\n</li>\n<li><a href=\"#http-web-server-plugins\" rel=\"nofollow\">HTTP Web Server Plugins</a>\n<ul>\n<li><a href=\"#reverse-proxy\" rel=\"nofollow\">Reverse Proxy</a></li>\n<li><a href=\"#web-server-route\" rel=\"nofollow\">Web Server Route</a></li>\n</ul>\n</li>\n<li><a href=\"#plugin-ordering\" rel=\"nofollow\">Plugin Ordering</a></li>\n</ul>\n</li>\n<li><a href=\"#end-to-end-encryption\" rel=\"nofollow\">End-to-End Encryption</a></li>\n<li><a href=\"#tls-interception\" rel=\"nofollow\">TLS Interception</a></li>\n<li><a href=\"#proxy-over-ssh-tunnel\" rel=\"nofollow\">Proxy Over SSH Tunnel</a>\n<ul>\n<li><a href=\"#proxy-remote-requests-locally\" rel=\"nofollow\">Proxy Remote Requests Locally</a></li>\n<li><a href=\"#proxy-local-requests-remotely\" rel=\"nofollow\">Proxy Local Requests Remotely</a></li>\n</ul>\n</li>\n<li><a href=\"#embed-proxypy\" rel=\"nofollow\">Embed proxy.py</a>\n<ul>\n<li><a href=\"#blocking-mode\" rel=\"nofollow\">Blocking Mode</a></li>\n<li><a href=\"#non-blocking-mode\" rel=\"nofollow\">Non-blocking Mode</a></li>\n</ul>\n</li>\n<li><a href=\"#unit-testing-with-proxypy\" rel=\"nofollow\">Unit testing with proxy.py</a>\n<ul>\n<li><a href=\"#proxytestcase\" rel=\"nofollow\">proxy.TestCase</a></li>\n<li><a href=\"#override-startup-flags\" rel=\"nofollow\">Override Startup Flags</a></li>\n<li><a href=\"#with-unittesttestcase\" rel=\"nofollow\">With unittest.TestCase</a></li>\n</ul>\n</li>\n<li><a href=\"#plugin-developer-and-contributor-guide\" rel=\"nofollow\">Plugin Developer and Contributor Guide</a>\n<ul>\n<li><a href=\"#everything-is-a-plugin\" rel=\"nofollow\">Everything is a plugin</a></li>\n<li><a href=\"#internal-architecture\" rel=\"nofollow\">Internal Architecture</a></li>\n<li><a href=\"#internal-documentation\" rel=\"nofollow\">Internal Documentation</a></li>\n<li><a href=\"#development-guide\" rel=\"nofollow\">Development Guide</a>\n<ul>\n<li><a href=\"#setup-local-environment\" rel=\"nofollow\">Setup Local Environment</a></li>\n<li><a href=\"#setup-pre-commit-hook\" rel=\"nofollow\">Setup pre-commit hook</a></li>\n<li><a href=\"#sending-a-pull-request\" rel=\"nofollow\">Sending a Pull Request</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#utilities\" rel=\"nofollow\">Utilities</a>\n<ul>\n<li><a href=\"#tcp-sockets\" rel=\"nofollow\">TCP</a>\n<ul>\n<li><a href=\"#new_socket_connection\" rel=\"nofollow\">new_socket_connection</a></li>\n<li><a href=\"#socket_connection\" rel=\"nofollow\">socket_connection</a></li>\n</ul>\n</li>\n<li><a href=\"#http-client\" rel=\"nofollow\">Http</a>\n<ul>\n<li><a href=\"#build_http_request\" rel=\"nofollow\">build_http_request</a></li>\n<li><a href=\"#build_http_response\" rel=\"nofollow\">build_http_response</a></li>\n</ul>\n</li>\n<li><a href=\"#pki\" rel=\"nofollow\">Public Key Infrastructure</a>\n<ul>\n<li><a href=\"#api-usage\" rel=\"nofollow\">API Usage</a></li>\n<li><a href=\"#cli-usage\" rel=\"nofollow\">CLI Usage</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#frequently-asked-questions\" rel=\"nofollow\">Frequently Asked Questions</a>\n<ul>\n<li><a href=\"#threads-vs-threadless\" rel=\"nofollow\">Threads vs Threadless</a></li>\n<li><a href=\"#syntaxerror-invalid-syntax\" rel=\"nofollow\">SyntaxError: invalid syntax</a></li>\n<li><a href=\"#unable-to-load-plugins\" rel=\"nofollow\">Unable to load plugins</a></li>\n<li><a href=\"#unable-to-connect-with-proxypy-from-remote-host\" rel=\"nofollow\">Unable to connect with proxy.py from remote host</a></li>\n<li><a href=\"#basic-auth-not-working-with-a-browser\" rel=\"nofollow\">Basic auth not working with a browser</a></li>\n<li><a href=\"#docker-image-not-working-on-macos\" rel=\"nofollow\">Docker image not working on MacOS</a></li>\n<li><a href=\"#valueerror-filedescriptor-out-of-range-in-select\" rel=\"nofollow\">ValueError: filedescriptor out of range in select</a></li>\n<li><a href=\"#nonenone-in-access-logs\" rel=\"nofollow\">None:None in access logs</a></li>\n</ul>\n</li>\n<li><a href=\"#flags\" rel=\"nofollow\">Flags</a></li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a>\n<ul>\n<li><a href=\"#v2x\" rel=\"nofollow\">v2.x</a></li>\n<li><a href=\"#v1x\" rel=\"nofollow\">v1.x</a></li>\n<li><a href=\"#v0x\" rel=\"nofollow\">v0.x</a></li>\n</ul>\n</li>\n</ul>\n<h1>Features</h1>\n<ul>\n<li>Fast &amp; Scalable\n<ul>\n<li>Scales by using all available cores on the system</li>\n<li>Threadless executions using coroutine</li>\n<li>Made to handle <code>tens-of-thousands</code> connections / sec\n<pre><span class=\"c1\"># On Macbook Pro 2015 / 2.8 GHz Intel Core i7</span>\n\u276f hey -n <span class=\"m\">10000</span> -c <span class=\"m\">100</span> http://localhost:8899/\n\nSummary:\n  Total:\t<span class=\"m\">0</span>.6157 secs\n  Slowest:\t<span class=\"m\">0</span>.1049 secs\n  Fastest:\t<span class=\"m\">0</span>.0007 secs\n  Average:\t<span class=\"m\">0</span>.0055 secs\n  Requests/sec:\t<span class=\"m\">16240</span>.5444\n\n  Total data:\t<span class=\"m\">800000</span> bytes\n  Size/request:\t<span class=\"m\">80</span> bytes\n\nResponse <span class=\"nb\">time</span> histogram:\n  <span class=\"m\">0</span>.001 <span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>     <span class=\"p\">|</span>\n  <span class=\"m\">0</span>.011 <span class=\"o\">[</span><span class=\"m\">9565</span><span class=\"o\">]</span>\t<span class=\"p\">|</span>\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n  <span class=\"m\">0</span>.022 <span class=\"o\">[</span><span class=\"m\">332</span><span class=\"o\">]</span>\t<span class=\"p\">|</span>\u25a0\n</pre>\n</li>\n</ul>\n</li>\n<li>Lightweight\n<ul>\n<li>Uses only <code>~5-20MB</code> RAM</li>\n<li>No external dependency other than standard Python library</li>\n</ul>\n</li>\n<li>Programmable\n<ul>\n<li>Optionally enable builtin Web Server</li>\n<li>Customize proxy and http routing via <a href=\"https://github.com/abhinavsingh/proxy.py/tree/develop/proxy/plugin\" rel=\"nofollow\">plugins</a></li>\n<li>Enable plugin using command line option e.g. <code>--plugins proxy.plugin.CacheResponsesPlugin</code></li>\n<li>Plugin API is currently in development phase, expect breaking changes.</li>\n</ul>\n</li>\n<li>Realtime Dashboard\n<ul>\n<li>Optionally enable bundled dashboard.\n<ul>\n<li>Available at <code>http://localhost:8899/dashboard</code>.</li>\n</ul>\n</li>\n<li>Inspect, Monitor, Control and Configure <code>proxy.py</code> at runtime.</li>\n<li>Extend dashboard using plugins.</li>\n<li>Dashboard is currently in development phase, expect breaking changes.</li>\n</ul>\n</li>\n<li>Secure\n<ul>\n<li>Enable end-to-end encryption between clients and <code>proxy.py</code> using TLS</li>\n<li>See <a href=\"#end-to-end-encryption\" rel=\"nofollow\">End-to-End Encryption</a></li>\n</ul>\n</li>\n<li>Man-In-The-Middle\n<ul>\n<li>Can decrypt TLS traffic between clients and upstream servers</li>\n<li>See <a href=\"#tls-interception\" rel=\"nofollow\">TLS Interception</a></li>\n</ul>\n</li>\n<li>Supported proxy protocols\n<ul>\n<li><code>http(s)</code>\n<ul>\n<li><code>http1</code></li>\n<li><code>http1.1</code> pipeline</li>\n</ul>\n</li>\n<li><code>http2</code></li>\n<li><code>websockets</code></li>\n</ul>\n</li>\n<li>Optimized for large file uploads and downloads</li>\n<li>IPv4 and IPv6 support</li>\n<li>Basic authentication support</li>\n<li>Can serve a <a href=\"https://en.wikipedia.org/wiki/Proxy_auto-config\" rel=\"nofollow\">PAC (Proxy Auto-configuration)</a> file\n<ul>\n<li>See <code>--pac-file</code> and <code>--pac-file-url-path</code> flags</li>\n</ul>\n</li>\n</ul>\n<h1>Install</h1>\n<h2>Using PIP</h2>\n<h3>Stable Version with PIP</h3>\n<p>Install from <code>PyPi</code></p>\n<pre>\u276f pip install --upgrade proxy.py\n</pre>\n<p>or from GitHub <code>master</code> branch</p>\n<pre>\u276f pip install git+https://github.com/abhinavsingh/proxy.py.git@master\n</pre>\n<h3>Development Version with PIP</h3>\n<pre>\u276f pip install git+https://github.com/abhinavsingh/proxy.py.git@develop\n</pre>\n<h2>Using Docker</h2>\n<h4>Stable Version from Docker Hub</h4>\n<pre>\u276f docker run -it -p <span class=\"m\">8899</span>:8899 --rm abhinavsingh/proxy.py:latest\n</pre>\n<h4>Build Development Version Locally</h4>\n<pre>\u276f git clone https://github.com/abhinavsingh/proxy.py.git\n\u276f <span class=\"nb\">cd</span> proxy.py\n\u276f make container\n\u276f docker run -it -p <span class=\"m\">8899</span>:8899 --rm abhinavsingh/proxy.py:latest\n</pre>\n<p><a href=\"https://github.com/moby/vpnkit/issues/469\" rel=\"nofollow\"><img alt=\"WARNING\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff9d8978d96f052fcf5a46de3fad826d41ce0a21/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d4d61634f53266d6573736167653d7761726e696e6726636f6c6f723d726564\"></a>\n<code>docker</code> image is currently broken on <code>macOS</code> due to incompatibility with <a href=\"https://github.com/moby/vpnkit/issues/469\" rel=\"nofollow\">vpnkit</a>.</p>\n<h2>Using HomeBrew</h2>\n<h3>Stable Version with HomeBrew</h3>\n<pre>\u276f brew install https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/helper/homebrew/stable/proxy.rb\n</pre>\n<h3>Development Version with HomeBrew</h3>\n<pre>\u276f brew install https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/helper/homebrew/develop/proxy.rb\n</pre>\n<h1>Start proxy.py</h1>\n<h2>From command line when installed using PIP</h2>\n<p>When <code>proxy.py</code> is installed using <code>pip</code>,\nan executable named <code>proxy</code> is placed under your <code>$PATH</code>.</p>\n<h4>Run it</h4>\n<p>Simply type <code>proxy</code> on command line to start it with default configuration.</p>\n<pre>\u276f proxy\n...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Loaded plugin proxy.http_proxy.HttpProxyPlugin\n...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Starting <span class=\"m\">8</span> workers\n...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Started server on ::1:8899\n</pre>\n<h4>Understanding logs</h4>\n<p>Things to notice from above logs:</p>\n<ul>\n<li>\n<p><code>Loaded plugin</code> - <code>proxy.py</code> will load <code>proxy.http.proxy.HttpProxyPlugin</code> by default.\nAs name suggests, this core plugin adds <code>http(s)</code> proxy server capabilities to <code>proxy.py</code></p>\n</li>\n<li>\n<p><code>Started N workers</code> - Use <code>--num-workers</code> flag to customize number of worker processes.\nBy default, <code>proxy.py</code> will start as many workers as there are CPU cores on the machine.</p>\n</li>\n<li>\n<p><code>Started server on ::1:8899</code> - By default, <code>proxy.py</code> listens on IPv6 <code>::1</code>, which\nis equivalent of IPv4 <code>127.0.0.1</code>.  If you want to access <code>proxy.py</code> externally,\nuse <code>--hostname ::</code> or <code>--hostname 0.0.0.0</code> or bind to any other interface available\non your machine.</p>\n</li>\n<li>\n<p><code>Port 8899</code> - Use <code>--port</code> flag to customize default TCP port.</p>\n</li>\n</ul>\n<h4>Enable DEBUG logging</h4>\n<p>All the logs above are <code>INFO</code> level logs, default <code>--log-level</code> for <code>proxy.py</code>.</p>\n<p>Lets start <code>proxy.py</code> with <code>DEBUG</code> level logging:</p>\n<pre>\u276f proxy --log-level d\n...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Open file descriptor soft limit <span class=\"nb\">set</span> to <span class=\"m\">1024</span>\n...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Loaded plugin proxy.http_proxy.HttpProxyPlugin\n...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Started <span class=\"m\">8</span> workers\n...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Started server on ::1:8899\n</pre>\n<p>As we can see, before starting up:</p>\n<ul>\n<li><code>proxy.py</code> also tried to set open file limit <code>ulimit</code> on the system.</li>\n<li>Default value for <code>--open-file-limit</code> used is <code>1024</code>.</li>\n<li><code>--open-file-limit</code> flag is a no-op on <code>Windows</code> operating systems.</li>\n</ul>\n<p>See <a href=\"#flags\" rel=\"nofollow\">flags</a> for full list of available configuration options.</p>\n<h2>From command line using repo source</h2>\n<p>If you are trying to run <code>proxy.py</code> from source code,\nthere is no binary file named <code>proxy</code> in the source code.</p>\n<p>To start <code>proxy.py</code> from source code follow these instructions:</p>\n<ul>\n<li>\n<p>Clone repo</p>\n<pre>\u276f git clone https://github.com/abhinavsingh/proxy.py.git\n\u276f <span class=\"nb\">cd</span> proxy.py\n</pre>\n</li>\n<li>\n<p>Create a Python 3 virtual env</p>\n<pre>\u276f python3 -m venv venv\n\u276f <span class=\"nb\">source</span> venv/bin/activate\n</pre>\n</li>\n<li>\n<p>Install deps</p>\n<pre>\u276f pip install -r requirements.txt\n\u276f pip install -r requirements-testing.txt\n</pre>\n</li>\n<li>\n<p>Run tests</p>\n<pre>\u276f make\n</pre>\n</li>\n<li>\n<p>Run proxy.py</p>\n<pre>\u276f python -m proxy\n</pre>\n</li>\n</ul>\n<p>Also see <a href=\"#plugin-developer-and-contributor-guide\" rel=\"nofollow\">Plugin Developer and Contributor Guide</a>\nif you plan to work with <code>proxy.py</code> source code.</p>\n<h2>Docker image</h2>\n<h4>Customize startup flags</h4>\n<p>By default <code>docker</code> binary is started with IPv4 networking flags:</p>\n<pre><code>--hostname 0.0.0.0 --port 8899\n</code></pre>\n<p>To override input flags, start docker image as follows.\nFor example, to check <code>proxy.py</code> version within Docker image:</p>\n<pre><code>\u276f docker run -it \\\n    -p 8899:8899 \\\n    --rm abhinavsingh/proxy.py:latest \\\n    -v\n</code></pre>\n<h1>Plugin Examples</h1>\n<ul>\n<li>See <a href=\"https://github.com/abhinavsingh/proxy.py/tree/develop/proxy/plugin\" rel=\"nofollow\">plugin</a> module for full code.</li>\n<li>All the bundled plugin examples also works with <code>https</code> traffic\n<ul>\n<li>Require additional flags and certificate generation</li>\n<li>See <a href=\"#tls-interception\" rel=\"nofollow\">TLS Interception</a>.</li>\n</ul>\n</li>\n<li>Plugin examples are also bundled with Docker image.\n<ul>\n<li>See <a href=\"#customize-startup-flags\" rel=\"nofollow\">Customize startup flags</a> to try plugins with Docker image.</li>\n</ul>\n</li>\n</ul>\n<h2>HTTP Proxy Plugins</h2>\n<h3>ShortLinkPlugin</h3>\n<p>Add support for short links in your favorite browsers / applications.</p>\n<p><a href=\"https://github.com/abhinavsingh/proxy.py#shortlinkplugin\" rel=\"nofollow\"><img alt=\"Shortlink Plugin\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/245385376025031278ea3a3eb7880939ff8c4255/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616268696e617673696e67682f70726f78792e70792f646576656c6f702f73686f72746c696e6b2e676966\"></a></p>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.ShortLinkPlugin\n</pre>\n<p>Now you can speed up your daily browsing experience by visiting your\nfavorite website using single character domain names :).  This works\nacross all browsers.</p>\n<p>Following short links are enabled by default:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Short Link</th>\n<th align=\"center\">Destination URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">a/</td>\n<td align=\"center\">amazon.com</td>\n</tr>\n<tr>\n<td align=\"center\">i/</td>\n<td align=\"center\">instagram.com</td>\n</tr>\n<tr>\n<td align=\"center\">l/</td>\n<td align=\"center\">linkedin.com</td>\n</tr>\n<tr>\n<td align=\"center\">f/</td>\n<td align=\"center\">facebook.com</td>\n</tr>\n<tr>\n<td align=\"center\">g/</td>\n<td align=\"center\">google.com</td>\n</tr>\n<tr>\n<td align=\"center\">t/</td>\n<td align=\"center\">twitter.com</td>\n</tr>\n<tr>\n<td align=\"center\">w/</td>\n<td align=\"center\">web.whatsapp.com</td>\n</tr>\n<tr>\n<td align=\"center\">y/</td>\n<td align=\"center\">youtube.com</td>\n</tr>\n<tr>\n<td align=\"center\">proxy/</td>\n<td align=\"center\">localhost:8899</td>\n</tr></tbody></table>\n<h3>ModifyPostDataPlugin</h3>\n<p>Modifies POST request body before sending request to upstream server.</p>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.ModifyPostDataPlugin\n</pre>\n<p>By default plugin replaces POST body content with hardcoded <code>b'{\"key\": \"modified\"}'</code>\nand enforced <code>Content-Type: application/json</code>.</p>\n<p>Verify the same using <code>curl -x localhost:8899 -d '{\"key\": \"value\"}' http://httpbin.org/post</code></p>\n<pre><span class=\"o\">{</span>\n  <span class=\"s2\">\"args\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"data\"</span>: <span class=\"s2\">\"{\\\"key\\\": \\\"modified\\\"}\"</span>,\n  <span class=\"s2\">\"files\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"form\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"headers\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"Accept\"</span>: <span class=\"s2\">\"*/*\"</span>,\n    <span class=\"s2\">\"Content-Length\"</span>: <span class=\"s2\">\"19\"</span>,\n    <span class=\"s2\">\"Content-Type\"</span>: <span class=\"s2\">\"application/json\"</span>,\n    <span class=\"s2\">\"Host\"</span>: <span class=\"s2\">\"httpbin.org\"</span>,\n    <span class=\"s2\">\"User-Agent\"</span>: <span class=\"s2\">\"curl/7.54.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"json\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"key\"</span>: <span class=\"s2\">\"modified\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"origin\"</span>: <span class=\"s2\">\"1.2.3.4, 5.6.7.8\"</span>,\n  <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"https://httpbin.org/post\"</span>\n<span class=\"o\">}</span>\n</pre>\n<p>Note following from the response above:</p>\n<ol>\n<li>POST data was modified <code>\"data\": \"{\\\"key\\\": \\\"modified\\\"}\"</code>.\nOriginal <code>curl</code> command data was <code>{\"key\": \"value\"}</code>.</li>\n<li>Our <code>curl</code> command did not add any <code>Content-Type</code> header,\nbut our plugin did add one <code>\"Content-Type\": \"application/json\"</code>.\nSame can also be verified by looking at <code>json</code> field in the output above:\n<pre><code>\"json\": {\n \"key\": \"modified\"\n},\n</code></pre>\n</li>\n<li>Our plugin also added a <code>Content-Length</code> header to match length\nof modified body.</li>\n</ol>\n<h3>MockRestApiPlugin</h3>\n<p>Mock responses for your server REST API.\nUse to test and develop client side applications\nwithout need of an actual upstream REST API server.</p>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.ProposedRestApiPlugin\n</pre>\n<p>Verify mock API response using <code>curl -x localhost:8899 http://api.example.com/v1/users/</code></p>\n<pre><span class=\"o\">{</span><span class=\"s2\">\"count\"</span>: <span class=\"m\">2</span>, <span class=\"s2\">\"next\"</span>: null, <span class=\"s2\">\"previous\"</span>: null, <span class=\"s2\">\"results\"</span>: <span class=\"o\">[{</span><span class=\"s2\">\"email\"</span>: <span class=\"s2\">\"you@example.com\"</span>, <span class=\"s2\">\"groups\"</span>: <span class=\"o\">[]</span>, <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"api.example.com/v1/users/1/\"</span>, <span class=\"s2\">\"username\"</span>: <span class=\"s2\">\"admin\"</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s2\">\"email\"</span>: <span class=\"s2\">\"someone@example.com\"</span>, <span class=\"s2\">\"groups\"</span>: <span class=\"o\">[]</span>, <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"api.example.com/v1/users/2/\"</span>, <span class=\"s2\">\"username\"</span>: <span class=\"s2\">\"admin\"</span><span class=\"o\">}]}</span>\n</pre>\n<p>Verify the same by inspecting <code>proxy.py</code> logs:</p>\n<pre><span class=\"m\">2019</span>-09-27 <span class=\"m\">12</span>:44:02,212 - INFO - pid:7077 - access_log:1210 - ::1:64792 - GET None:None/v1/users/ - None None - <span class=\"m\">0</span> byte\n</pre>\n<p>Access log shows <code>None:None</code> as server <code>ip:port</code>.  <code>None</code> simply means that\nthe server connection was never made, since response was returned by our plugin.</p>\n<p>Now modify <code>ProposedRestApiPlugin</code> to returns REST API mock\nresponses as expected by your clients.</p>\n<h3>RedirectToCustomServerPlugin</h3>\n<p>Redirects all incoming <code>http</code> requests to custom web server.\nBy default, it redirects client requests to inbuilt web server,\nalso running on <code>8899</code> port.</p>\n<p>Start <code>proxy.py</code> and enable inbuilt web server:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --enable-web-server <span class=\"se\">\\</span>\n    --plugins proxy.plugin.RedirectToCustomServerPlugin\n</pre>\n<p>Verify using <code>curl -v -x localhost:8899 http://google.com</code></p>\n<pre><code>... [redacted] ...\n&lt; HTTP/1.1 404 NOT FOUND\n&lt; Server: proxy.py v1.0.0\n&lt; Connection: Close\n&lt;\n* Closing connection 0\n</code></pre>\n<p>Above <code>404</code> response was returned from <code>proxy.py</code> web server.</p>\n<p>Verify the same by inspecting the logs for <code>proxy.py</code>.\nAlong with the proxy request log, you must also see a http web server request log.</p>\n<pre><code>2019-09-24 19:09:33,602 - INFO - pid:49996 - access_log:1241 - ::1:49525 - GET /\n2019-09-24 19:09:33,603 - INFO - pid:49995 - access_log:1157 - ::1:49524 - GET localhost:8899/ - 404 NOT FOUND - 70 bytes\n</code></pre>\n<h3>FilterByUpstreamHostPlugin</h3>\n<p>Drops traffic by inspecting upstream host.\nBy default, plugin drops traffic for <code>google.com</code> and <code>www.google.com</code>.</p>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.FilterByUpstreamHostPlugin\n</pre>\n<p>Verify using <code>curl -v -x localhost:8899 http://google.com</code>:</p>\n<pre>... <span class=\"o\">[</span>redacted<span class=\"o\">]</span> ...\n&lt; HTTP/1.1 <span class=\"m\">418</span> I<span class=\"err\">'</span>m a tea pot\n&lt; Proxy-agent: proxy.py v1.0.0\n* no chunk, no close, no size. Assume close to signal end\n&lt;\n* Closing connection <span class=\"m\">0</span>\n</pre>\n<p>Above <code>418 I'm a tea pot</code> is sent by our plugin.</p>\n<p>Verify the same by inspecting logs for <code>proxy.py</code>:</p>\n<pre><span class=\"m\">2019</span>-09-24 <span class=\"m\">19</span>:21:37,893 - ERROR - pid:50074 - handle_readables:1347 - HttpProtocolException <span class=\"nb\">type</span> raised\nTraceback <span class=\"o\">(</span>most recent call last<span class=\"o\">)</span>:\n... <span class=\"o\">[</span>redacted<span class=\"o\">]</span> ...\n<span class=\"m\">2019</span>-09-24 <span class=\"m\">19</span>:21:37,897 - INFO - pid:50074 - access_log:1157 - ::1:49911 - GET None:None/ - None None - <span class=\"m\">0</span> bytes\n</pre>\n<h3>CacheResponsesPlugin</h3>\n<p>Caches Upstream Server Responses.</p>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.CacheResponsesPlugin\n</pre>\n<p>Verify using <code>curl -v -x localhost:8899 http://httpbin.org/get</code>:</p>\n<pre>... <span class=\"o\">[</span>redacted<span class=\"o\">]</span> ...\n&lt; HTTP/1.1 <span class=\"m\">200</span> OK\n&lt; Access-Control-Allow-Credentials: <span class=\"nb\">true</span>\n&lt; Access-Control-Allow-Origin: *\n&lt; Content-Type: application/json\n&lt; Date: Wed, <span class=\"m\">25</span> Sep <span class=\"m\">2019</span> <span class=\"m\">02</span>:24:25 GMT\n&lt; Referrer-Policy: no-referrer-when-downgrade\n&lt; Server: nginx\n&lt; X-Content-Type-Options: nosniff\n&lt; X-Frame-Options: DENY\n&lt; X-XSS-Protection: <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"nv\">mode</span><span class=\"o\">=</span>block\n&lt; Content-Length: <span class=\"m\">202</span>\n&lt; Connection: keep-alive\n&lt;\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"args\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"headers\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"Accept\"</span>: <span class=\"s2\">\"*/*\"</span>,\n    <span class=\"s2\">\"Host\"</span>: <span class=\"s2\">\"httpbin.org\"</span>,\n    <span class=\"s2\">\"User-Agent\"</span>: <span class=\"s2\">\"curl/7.54.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"origin\"</span>: <span class=\"s2\">\"1.2.3.4, 5.6.7.8\"</span>,\n  <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"https://httpbin.org/get\"</span>\n<span class=\"o\">}</span>\n* Connection <span class=\"c1\">#0 to host localhost left intact</span>\n</pre>\n<p>Get path to the cache file from <code>proxy.py</code> logs:</p>\n<pre>... <span class=\"o\">[</span>redacted<span class=\"o\">]</span> ... - GET httpbin.org:80/get - <span class=\"m\">200</span> OK - <span class=\"m\">556</span> bytes\n... <span class=\"o\">[</span>redacted<span class=\"o\">]</span> ... - Cached response at /var/folders/k9/x93q0_xn1ls9zy76m2mf2k_00000gn/T/httpbin.org-1569378301.407512.txt\n</pre>\n<p>Verify contents of the cache file <code>cat /path/to/your/cache/httpbin.org.txt</code></p>\n<pre>HTTP/1.1 <span class=\"m\">200</span> OK\nAccess-Control-Allow-Credentials: <span class=\"nb\">true</span>\nAccess-Control-Allow-Origin: *\nContent-Type: application/json\nDate: Wed, <span class=\"m\">25</span> Sep <span class=\"m\">2019</span> <span class=\"m\">02</span>:24:25 GMT\nReferrer-Policy: no-referrer-when-downgrade\nServer: nginx\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"nv\">mode</span><span class=\"o\">=</span>block\nContent-Length: <span class=\"m\">202</span>\nConnection: keep-alive\n\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"args\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"headers\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"Accept\"</span>: <span class=\"s2\">\"*/*\"</span>,\n    <span class=\"s2\">\"Host\"</span>: <span class=\"s2\">\"httpbin.org\"</span>,\n    <span class=\"s2\">\"User-Agent\"</span>: <span class=\"s2\">\"curl/7.54.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"origin\"</span>: <span class=\"s2\">\"1.2.3.4, 5.6.7.8\"</span>,\n  <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"https://httpbin.org/get\"</span>\n<span class=\"o\">}</span>\n</pre>\n<h3>ManInTheMiddlePlugin</h3>\n<p>Modifies upstream server responses.</p>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.ManInTheMiddlePlugin\n</pre>\n<p>Verify using <code>curl -v -x localhost:8899 http://google.com</code>:</p>\n<pre>... <span class=\"o\">[</span>redacted<span class=\"o\">]</span> ...\n&lt; HTTP/1.1 <span class=\"m\">200</span> OK\n&lt; Content-Length: <span class=\"m\">28</span>\n&lt;\n* Connection <span class=\"c1\">#0 to host localhost left intact</span>\nHello from man in the middle\n</pre>\n<p>Response body <code>Hello from man in the middle</code> is sent by our plugin.</p>\n<h3>ProxyPoolPlugin</h3>\n<p>Forward incoming proxy requests to a set of upstream proxy servers.</p>\n<p>By default, <code>ProxyPoolPlugin</code> is hard-coded to use\n<code>localhost:9000</code> and <code>localhost:9001</code> as upstream proxy server.</p>\n<p>Let's start upstream proxies first.</p>\n<p>Start <code>proxy.py</code> on port <code>9000</code> and <code>9001</code></p>\n<pre>\u276f proxy --port <span class=\"m\">9000</span>\n</pre>\n<pre>\u276f proxy --port <span class=\"m\">9001</span>\n</pre>\n<p>Now, start <code>proxy.py</code> with <code>ProxyPoolPlugin</code> (on default <code>8899</code> port):</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.ProxyPoolPlugin\n</pre>\n<p>Make a curl request via <code>8899</code> proxy:</p>\n<p><code>curl -v -x localhost:8899 http://httpbin.org/get</code></p>\n<p>Verify that <code>8899</code> proxy forwards requests to upstream proxies\nby checking respective logs.</p>\n<h2>HTTP Web Server Plugins</h2>\n<h3>Reverse Proxy</h3>\n<p>Extend in-built Web Server to add Reverse Proxy capabilities.</p>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.ReverseProxyPlugin\n</pre>\n<p>With default configuration, <code>ReverseProxyPlugin</code> plugin is equivalent to\nfollowing <code>Nginx</code> config:</p>\n<pre>location /get <span class=\"o\">{</span>\n    proxy_pass http://httpbin.org/get\n<span class=\"o\">}</span>\n</pre>\n<p>Verify using <code>curl -v localhost:8899/get</code>:</p>\n<pre><span class=\"o\">{</span>\n  <span class=\"s2\">\"args\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"headers\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"Accept\"</span>: <span class=\"s2\">\"*/*\"</span>,\n    <span class=\"s2\">\"Host\"</span>: <span class=\"s2\">\"localhost\"</span>,\n    <span class=\"s2\">\"User-Agent\"</span>: <span class=\"s2\">\"curl/7.64.1\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"origin\"</span>: <span class=\"s2\">\"1.2.3.4, 5.6.7.8\"</span>,\n  <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"https://localhost/get\"</span>\n<span class=\"o\">}</span>\n</pre>\n<h3>Web Server Route</h3>\n<p>Demonstrates inbuilt web server routing using plugin.</p>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.WebServerPlugin\n</pre>\n<p>Verify using <code>curl -v localhost:8899/http-route-example</code>, should return:</p>\n<pre>HTTP route response\n</pre>\n<h2>Plugin Ordering</h2>\n<p>When using multiple plugins, depending upon plugin functionality,\nit might be worth considering the order in which plugins are passed\non the command line.</p>\n<p>Plugins are called in the same order as they are passed. Example,\nsay we are using both <code>FilterByUpstreamHostPlugin</code> and\n<code>RedirectToCustomServerPlugin</code>. Idea is to drop all incoming <code>http</code>\nrequests for <code>google.com</code> and <code>www.google.com</code> and redirect other\n<code>http</code> requests to our inbuilt web server.</p>\n<p>Hence, in this scenario it is important to use\n<code>FilterByUpstreamHostPlugin</code> before <code>RedirectToCustomServerPlugin</code>.\nIf we enable <code>RedirectToCustomServerPlugin</code> before <code>FilterByUpstreamHostPlugin</code>,\n<code>google</code> requests will also get redirected to inbuilt web server,\ninstead of being dropped.</p>\n<h1>End-to-End Encryption</h1>\n<p>By default, <code>proxy.py</code> uses <code>http</code> protocol for communication with clients e.g. <code>curl</code>, <code>browser</code>.\nFor enabling end-to-end encrypting using <code>tls</code> / <code>https</code> first generate certificates:</p>\n<pre>make https-certificates\n</pre>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --cert-file https-cert.pem <span class=\"se\">\\</span>\n    --key-file https-key.pem\n</pre>\n<p>Verify using <code>curl -x https://localhost:8899 --proxy-cacert https-cert.pem https://httpbin.org/get</code>:</p>\n<pre><span class=\"o\">{</span>\n  <span class=\"s2\">\"args\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"headers\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"Accept\"</span>: <span class=\"s2\">\"*/*\"</span>,\n    <span class=\"s2\">\"Host\"</span>: <span class=\"s2\">\"httpbin.org\"</span>,\n    <span class=\"s2\">\"User-Agent\"</span>: <span class=\"s2\">\"curl/7.54.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"origin\"</span>: <span class=\"s2\">\"1.2.3.4, 5.6.7.8\"</span>,\n  <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"https://httpbin.org/get\"</span>\n<span class=\"o\">}</span>\n</pre>\n<h1>TLS Interception</h1>\n<p>By default, <code>proxy.py</code> will not decrypt <code>https</code> traffic between client and server.\nTo enable TLS interception first generate CA certificates:</p>\n<pre><code>make ca-certificates\n</code></pre>\n<p>Lets also enable <code>CacheResponsePlugin</code> so that we can verify decrypted\nresponse from the server. Start <code>proxy.py</code> as:</p>\n<pre>\u276f proxy <span class=\"se\">\\</span>\n    --plugins proxy.plugin.CacheResponsesPlugin <span class=\"se\">\\</span>\n    --ca-key-file ca-key.pem <span class=\"se\">\\</span>\n    --ca-cert-file ca-cert.pem <span class=\"se\">\\</span>\n    --ca-signing-key-file ca-signing-key.pem\n</pre>\n<p>Verify using <code>curl -v -x localhost:8899 --cacert ca-cert.pem https://httpbin.org/get</code></p>\n<pre>*  issuer: <span class=\"nv\">C</span><span class=\"o\">=</span>US<span class=\"p\">;</span> <span class=\"nv\">ST</span><span class=\"o\">=</span>CA<span class=\"p\">;</span> <span class=\"nv\">L</span><span class=\"o\">=</span>SanFrancisco<span class=\"p\">;</span> <span class=\"nv\">O</span><span class=\"o\">=</span>proxy.py<span class=\"p\">;</span> <span class=\"nv\">OU</span><span class=\"o\">=</span>CA<span class=\"p\">;</span> <span class=\"nv\">CN</span><span class=\"o\">=</span>Proxy PY CA<span class=\"p\">;</span> <span class=\"nv\">emailAddress</span><span class=\"o\">=</span>proxyca@mailserver.com\n*  SSL certificate verify ok.\n&gt; GET /get HTTP/1.1\n... <span class=\"o\">[</span>redacted<span class=\"o\">]</span> ...\n&lt; Connection: keep-alive\n&lt;\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"args\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"headers\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"Accept\"</span>: <span class=\"s2\">\"*/*\"</span>,\n    <span class=\"s2\">\"Host\"</span>: <span class=\"s2\">\"httpbin.org\"</span>,\n    <span class=\"s2\">\"User-Agent\"</span>: <span class=\"s2\">\"curl/7.54.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"origin\"</span>: <span class=\"s2\">\"1.2.3.4, 5.6.7.8\"</span>,\n  <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"https://httpbin.org/get\"</span>\n<span class=\"o\">}</span>\n</pre>\n<p>The <code>issuer</code> line confirms that response was intercepted.</p>\n<p>Also verify the contents of cached response file.  Get path to the cache\nfile from <code>proxy.py</code> logs.</p>\n<p><code>\u276f cat /path/to/your/tmp/directory/httpbin.org-1569452863.924174.txt</code></p>\n<pre>HTTP/1.1 <span class=\"m\">200</span> OK\nAccess-Control-Allow-Credentials: <span class=\"nb\">true</span>\nAccess-Control-Allow-Origin: *\nContent-Type: application/json\nDate: Wed, <span class=\"m\">25</span> Sep <span class=\"m\">2019</span> <span class=\"m\">23</span>:07:05 GMT\nReferrer-Policy: no-referrer-when-downgrade\nServer: nginx\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"nv\">mode</span><span class=\"o\">=</span>block\nContent-Length: <span class=\"m\">202</span>\nConnection: keep-alive\n\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"args\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"headers\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"Accept\"</span>: <span class=\"s2\">\"*/*\"</span>,\n    <span class=\"s2\">\"Host\"</span>: <span class=\"s2\">\"httpbin.org\"</span>,\n    <span class=\"s2\">\"User-Agent\"</span>: <span class=\"s2\">\"curl/7.54.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"origin\"</span>: <span class=\"s2\">\"1.2.3.4, 5.6.7.8\"</span>,\n  <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"https://httpbin.org/get\"</span>\n<span class=\"o\">}</span>\n</pre>\n<p>Viola!!!  If you remove CA flags, encrypted data will be found in the\ncached file instead of plain text.</p>\n<p>Now use CA flags with other\n<a href=\"#plugin-examples\" rel=\"nofollow\">plugin examples</a> to see them work with <code>https</code> traffic.</p>\n<h1>Proxy Over SSH Tunnel</h1>\n<p>Requires <code>paramiko</code> to work. See <a href=\"https://github.com/abhinavsingh/proxy.py/blob/develop/requirements-tunnel.txt\" rel=\"nofollow\">requirements-tunnel.txt</a></p>\n<h2>Proxy Remote Requests Locally</h2>\n<pre><code>                        |\n+------------+          |            +----------+\n|   LOCAL    |          |            |  REMOTE  |\n|   HOST     | &lt;== SSH ==== :8900 == |  SERVER  |\n+------------+          |            +----------+\n:8899 proxy.py          |\n                        |\n                     FIREWALL\n                  (allow tcp/22)\n</code></pre>\n<h2>What</h2>\n<p>Proxy HTTP(s) requests made on a <code>remote</code> server through <code>proxy.py</code> server\nrunning on <code>localhost</code>.</p>\n<h3>How</h3>\n<ul>\n<li>Requested <code>remote</code> port is forwarded over the SSH connection.</li>\n<li><code>proxy.py</code> running on the <code>localhost</code> handles and responds to\n<code>remote</code> proxy requests.</li>\n</ul>\n<h3>Requirements</h3>\n<ol>\n<li><code>localhost</code> MUST have SSH access to the <code>remote</code> server</li>\n<li><code>remote</code> server MUST be configured to proxy HTTP(s) requests\nthrough the forwarded port number e.g. <code>:8900</code>.\n<ul>\n<li><code>remote</code> and <code>localhost</code> ports CAN be same e.g. <code>:8899</code>.</li>\n<li><code>:8900</code> is chosen in ascii art for differentiation purposes.</li>\n</ul>\n</li>\n</ol>\n<h3>Try it</h3>\n<p>Start <code>proxy.py</code> as:</p>\n<pre>\u276f <span class=\"c1\"># On localhost</span>\n\u276f proxy --enable-tunnel <span class=\"se\">\\</span>\n    --tunnel-username username <span class=\"se\">\\</span>\n    --tunnel-hostname ip.address.or.domain.name <span class=\"se\">\\</span>\n    --tunnel-port <span class=\"m\">22</span> <span class=\"se\">\\</span>\n    --tunnel-remote-host <span class=\"m\">127</span>.0.0.1\n    --tunnel-remote-port <span class=\"m\">8899</span>\n</pre>\n<p>Make a HTTP proxy request on <code>remote</code> server and\nverify that response contains public IP address of <code>localhost</code> as origin:</p>\n<pre>\u276f <span class=\"c1\"># On remote</span>\n\u276f curl -x <span class=\"m\">127</span>.0.0.1:8899 http://httpbin.org/get\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"args\"</span>: <span class=\"o\">{}</span>,\n  <span class=\"s2\">\"headers\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"Accept\"</span>: <span class=\"s2\">\"*/*\"</span>,\n    <span class=\"s2\">\"Host\"</span>: <span class=\"s2\">\"httpbin.org\"</span>,\n    <span class=\"s2\">\"User-Agent\"</span>: <span class=\"s2\">\"curl/7.54.0\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"origin\"</span>: <span class=\"s2\">\"x.x.x.x, y.y.y.y\"</span>,\n  <span class=\"s2\">\"url\"</span>: <span class=\"s2\">\"https://httpbin.org/get\"</span>\n<span class=\"o\">}</span>\n</pre>\n<p>Also, verify that <code>proxy.py</code> logs on <code>localhost</code> contains <code>remote</code> IP as client IP.</p>\n<pre>access_log:328 - remote:52067 - GET httpbin.org:80\n</pre>\n<h2>Proxy Local Requests Remotely</h2>\n<pre><code>                        |\n+------------+          |     +----------+\n|   LOCAL    |          |     |  REMOTE  |\n|   HOST     | === SSH =====&gt; |  SERVER  |\n+------------+          |     +----------+\n                        |     :8899 proxy.py\n                        |\n                    FIREWALL\n                 (allow tcp/22)\n</code></pre>\n<h1>Embed proxy.py</h1>\n<h2>Blocking Mode</h2>\n<p>Start <code>proxy.py</code> in embedded mode with default configuration\nby using <code>proxy.main</code> method. Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">proxy</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Customize startup flags by passing list of input arguments:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">proxy</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">([</span>\n    <span class=\"s1\">'--hostname'</span><span class=\"p\">,</span> <span class=\"s1\">'::1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--port'</span><span class=\"p\">,</span> <span class=\"s1\">'8899'</span>\n  <span class=\"p\">])</span>\n</pre>\n<p>or, customize startup flags by passing them as kwargs:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ipaddress</span>\n<span class=\"kn\">import</span> <span class=\"nn\">proxy</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span>\n    <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"n\">ipaddress</span><span class=\"o\">.</span><span class=\"n\">IPv6Address</span><span class=\"p\">(</span><span class=\"s1\">'::1'</span><span class=\"p\">),</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8899</span>\n  <span class=\"p\">)</span>\n</pre>\n<p>Note that:</p>\n<ol>\n<li>Calling <code>main</code> is simply equivalent to starting <code>proxy.py</code> from command line.</li>\n<li><code>main</code> will block until <code>proxy.py</code> shuts down.</li>\n</ol>\n<h2>Non-blocking Mode</h2>\n<p>Start <code>proxy.py</code> in non-blocking embedded mode with default configuration\nby using <code>start</code> method:  Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">proxy</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"k\">with</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">([]):</span>\n    <span class=\"c1\"># ... your logic here ...</span>\n</pre>\n<p>Note that:</p>\n<ol>\n<li><code>start</code> is similar to <code>main</code>, except <code>start</code> won't block.</li>\n<li><code>start</code> is a context manager.\nIt will start <code>proxy.py</code> when called and will shut it down\nonce scope ends.</li>\n<li>Just like <code>main</code>, startup flags with <code>start</code> method\ncan be customized by either passing flags as list of\ninput arguments e.g. <code>start(['--port', '8899'])</code> or\nby using passing flags as kwargs e.g. <code>start(port=8899)</code>.</li>\n</ol>\n<h1>Unit testing with proxy.py</h1>\n<h2>proxy.TestCase</h2>\n<p>To setup and teardown <code>proxy.py</code> for your Python unittest classes,\nsimply use <code>proxy.TestCase</code> instead of <code>unittest.TestCase</code>.\nExample:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">proxy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestProxyPyEmbedded</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_my_application_with_proxy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Note that:</p>\n<ol>\n<li><code>proxy.TestCase</code> overrides <code>unittest.TestCase.run()</code> method to setup and teardown <code>proxy.py</code>.</li>\n<li><code>proxy.py</code> server will listen on a random available port on the system.\nThis random port is available as <code>self.PROXY_PORT</code> within your test cases.</li>\n<li>Only a single worker is started by default (<code>--num-workers 1</code>) for faster setup and teardown.</li>\n<li>Most importantly, <code>proxy.TestCase</code> also ensures <code>proxy.py</code> server\nis up and running before proceeding with execution of tests. By default,\n<code>proxy.TestCase</code> will wait for <code>10 seconds</code> for <code>proxy.py</code> server to start,\nupon failure a <code>TimeoutError</code> exception will be raised.</li>\n</ol>\n<h2>Override startup flags</h2>\n<p>To override default startup flags, define a <code>PROXY_PY_STARTUP_FLAGS</code> variable in your test class.\nExample:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TestProxyPyEmbedded</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"n\">PROXY_PY_STARTUP_FLAGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'--num-workers'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'--enable-web-server'</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_my_application_with_proxy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>See <a href=\"https://github.com/abhinavsingh/proxy.py/blob/develop/tests/test_embed.py\" rel=\"nofollow\">test_embed.py</a>\nfor full working example.</p>\n<h2>With unittest.TestCase</h2>\n<p>If for some reasons you are unable to directly use <code>proxy.TestCase</code>,\nthen simply override <code>unittest.TestCase.run</code> yourself to setup and teardown <code>proxy.py</code>.\nExample:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">proxy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestProxyPyEmbedded</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_my_application_with_proxy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestResult</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">([</span>\n                <span class=\"s1\">'--num-workers'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'--port'</span><span class=\"p\">,</span> <span class=\"s1\">'... random port ...'</span><span class=\"p\">]):</span>\n            <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>or simply setup / teardown <code>proxy.py</code> within\n<code>setUpClass</code> and <code>teardownClass</code> class methods.</p>\n<h1>Plugin Developer and Contributor Guide</h1>\n<h2>Everything is a plugin</h2>\n<p>As you might have guessed by now, in <code>proxy.py</code> everything is a plugin.</p>\n<ul>\n<li>\n<p>We enabled proxy server plugins using <code>--plugins</code> flag.\nAll the <a href=\"#plugin-examples\" rel=\"nofollow\">plugin examples</a> were implementing\n<code>HttpProxyBasePlugin</code>.  See documentation of\n<a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L894-L938\" rel=\"nofollow\">HttpProxyBasePlugin</a>\nfor available lifecycle hooks. Use <code>HttpProxyBasePlugin</code> to modify\nbehavior of http(s) proxy protocol between client and upstream server.\nExample, <a href=\"#filterbyupstreamhostplugin\" rel=\"nofollow\">FilterByUpstreamHostPlugin</a>.</p>\n</li>\n<li>\n<p>We also enabled inbuilt web server using <code>--enable-web-server</code>.\nInbuilt web server implements <code>HttpProtocolHandlerPlugin</code> plugin.\nSee documentation of <a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L793-L850\" rel=\"nofollow\">HttpProtocolHandlerPlugin</a>\nfor available lifecycle hooks. Use <code>HttpProtocolHandlerPlugin</code> to add\nnew features for http(s) clients. Example,\n<a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L1185-L1260\" rel=\"nofollow\">HttpWebServerPlugin</a>.</p>\n</li>\n<li>\n<p>There also is a <code>--disable-http-proxy</code> flag. It disables inbuilt proxy server.\nUse this flag with <code>--enable-web-server</code> flag to run <code>proxy.py</code> as a programmable\nhttp(s) server. <a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L941-L1182\" rel=\"nofollow\">HttpProxyPlugin</a>\nalso implements <code>HttpProtocolHandlerPlugin</code>.</p>\n</li>\n</ul>\n<h2>Internal Architecture</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L1263-L1440\" rel=\"nofollow\">HttpProtocolHandler</a>\nthread is started with the accepted <a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L230-L237\" rel=\"nofollow\">TcpClientConnection</a>.\n<code>HttpProtocolHandler</code> is responsible for parsing incoming client request and invoking\n<code>HttpProtocolHandlerPlugin</code> lifecycle hooks.</p>\n</li>\n<li>\n<p><code>HttpProxyPlugin</code> which implements <code>HttpProtocolHandlerPlugin</code> also has its own plugin\nmechanism. Its responsibility is to establish connection between client and\nupstream <a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L204-L227\" rel=\"nofollow\">TcpServerConnection</a>\nand invoke <code>HttpProxyBasePlugin</code> lifecycle hooks.</p>\n</li>\n<li>\n<p><code>HttpProtocolHandler</code> threads are started by <a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L424-L472\" rel=\"nofollow\">Acceptor</a>\nprocesses.</p>\n</li>\n<li>\n<p><code>--num-workers</code> <code>Acceptor</code> processes are started by\n<a href=\"https://github.com/abhinavsingh/proxy.py/blob/b03629fa0df1595eb4995427bc601063be7fdca9/proxy.py#L368-L421\" rel=\"nofollow\">AcceptorPool</a>\non start-up.</p>\n</li>\n<li>\n<p><code>AcceptorPool</code> listens on server socket and pass the handler to <code>Acceptor</code> processes.\nWorkers are responsible for accepting new client connections and starting\n<code>HttpProtocolHandler</code> thread.</p>\n</li>\n</ul>\n<h2>Development Guide</h2>\n<h3>Setup Local Environment</h3>\n<p>Contributors must start <code>proxy.py</code> from source to verify and develop new features / fixes.</p>\n<p>See <a href=\"#from-command-line-using-repo-source\" rel=\"nofollow\">Run proxy.py from command line using repo source</a> for details.</p>\n<h3>Setup pre-commit hook</h3>\n<p>Pre-commit hook ensures lint checking and tests execution.</p>\n<ol>\n<li><code>cd /path/to/proxy.py</code></li>\n<li><code>ln -s $(PWD)/git-pre-commit .git/hooks/pre-commit</code></li>\n</ol>\n<h3>Sending a Pull Request</h3>\n<p>Every pull request is tested using GitHub actions.</p>\n<p>See <a href=\"https://github.com/abhinavsingh/proxy.py/tree/develop/.github/workflows\" rel=\"nofollow\">GitHub workflow</a>\nfor list of tests.</p>\n<h1>Utilities</h1>\n<h2>TCP Sockets</h2>\n<h3>new_socket_connection</h3>\n<p>Attempts to create an IPv4 connection, then IPv6 and\nfinally a dual stack connection to provided address.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">new_socket_connection</span><span class=\"p\">((</span><span class=\"s1\">'httpbin.org'</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">...</span><span class=\"p\">[</span> <span class=\"n\">use</span> <span class=\"n\">connection</span> <span class=\"p\">]</span><span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h3>socket_connection</h3>\n<p><code>socket_connection</code> is a convenient decorator + context manager\naround <code>new_socket_connection</code> which ensures <code>conn.close</code> is implicit.</p>\n<p>As a context manager:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">socket_connection</span><span class=\"p\">((</span><span class=\"s1\">'httpbin.org'</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>   <span class=\"o\">...</span> <span class=\"p\">[</span> <span class=\"n\">use</span> <span class=\"n\">connection</span> <span class=\"p\">]</span> <span class=\"o\">...</span>\n</pre>\n<p>As a decorator:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@socket_connection</span><span class=\"p\">((</span><span class=\"s1\">'httpbin.org'</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">my_api_call</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>   <span class=\"o\">...</span> <span class=\"p\">[</span> <span class=\"n\">use</span> <span class=\"n\">connection</span> <span class=\"p\">]</span> <span class=\"o\">...</span>\n</pre>\n<h2>Http Client</h2>\n<h3>build_http_request</h3>\n<h4>Generate HTTP GET request</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">build_http_request</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'GET / HTTP/1.1</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<h4>Generate HTTP GET request with headers</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">build_http_request</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'/'</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sa\">b</span><span class=\"s1\">'Connection'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'close'</span><span class=\"p\">})</span>\n<span class=\"sa\">b</span><span class=\"s1\">'GET / HTTP/1.1</span><span class=\"se\">\\r\\n</span><span class=\"s1\">Connection: close</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<h4>Generate HTTP POST request with headers and body</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">build_http_request</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'/form'</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sa\">b</span><span class=\"s1\">'Content-type'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'application/json'</span><span class=\"p\">},</span>\n        <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">bytes_</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'hello@world.com'</span><span class=\"p\">})))</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'POST /form HTTP/1.1</span><span class=\"se\">\\r\\n</span><span class=\"s1\">Content-type: application/json</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s1\">{\"email\": \"hello@world.com\"}'</span>\n</pre>\n<h3>build_http_response</h3>\n<p>TODO</p>\n<h2>PKI</h2>\n<h3>API Usage</h3>\n<h4>gen_private_key</h4>\n<h4>gen_public_key</h4>\n<h4>remove_passphrase</h4>\n<h4>gen_csr</h4>\n<h4>sign_csr</h4>\n<p>See <a href=\"https://github.com/abhinavsingh/proxy.py/blob/develop/proxy/common/pki.py\" rel=\"nofollow\">pki.py</a> for\nmethod parameters and <a href=\"https://github.com/abhinavsingh/proxy.py/blob/develop/tests/common/test_pki.py\" rel=\"nofollow\">test_pki.py</a>\nfor usage examples.</p>\n<h3>CLI Usage</h3>\n<p>Use <code>proxy.common.pki</code> module for:</p>\n<ol>\n<li>Generation of public and private keys</li>\n<li>Generating CSR requests</li>\n<li>Signing CSR requests using custom CA.</li>\n</ol>\n<pre>python -m proxy.common.pki -h\nusage: pki.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--password PASSWORD<span class=\"o\">]</span> <span class=\"o\">[</span>--private-key-path PRIVATE_KEY_PATH<span class=\"o\">]</span>\n              <span class=\"o\">[</span>--public-key-path PUBLIC_KEY_PATH<span class=\"o\">]</span> <span class=\"o\">[</span>--subject SUBJECT<span class=\"o\">]</span>\n              action\n\nproxy.py v2.1.0 : PKI Utility\n\npositional arguments:\n  action                Valid actions: remove_passphrase, gen_private_key,\n                        gen_public_key, gen_csr, sign_csr\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --password PASSWORD   Password to use <span class=\"k\">for</span> encryption. Default: proxy.py\n  --private-key-path PRIVATE_KEY_PATH\n                        Private key path\n  --public-key-path PUBLIC_KEY_PATH\n                        Public key path\n  --subject SUBJECT     Subject to use <span class=\"k\">for</span> public key generation. Default:\n                        /CN<span class=\"o\">=</span>example.com\n</pre>\n<h2>Internal Documentation</h2>\n<p>Browse through internal class hierarchy and documentation using <code>pydoc3</code>.\nExample:</p>\n<pre>\u276f pydoc3 proxy\n\nPACKAGE CONTENTS\n    __main__\n    common <span class=\"o\">(</span>package<span class=\"o\">)</span>\n    core <span class=\"o\">(</span>package<span class=\"o\">)</span>\n    http <span class=\"o\">(</span>package<span class=\"o\">)</span>\n    main\n\nFILE\n    /Users/abhinav/Dev/proxy.py/proxy/__init__.py\n</pre>\n<h1>Frequently Asked Questions</h1>\n<h2>Threads vs Threadless</h2>\n<p>Pre v2.x, <code>proxy.py</code> used to spawn new threads for handling\nclient requests.</p>\n<p>Starting v2.x, <code>proxy.py</code> added support for threadless execution of\nclient requests using <code>asyncio</code>.</p>\n<p>In future, threadless execution will be the default mode.</p>\n<p>Till then if you are interested in trying it out,\nstart <code>proxy.py</code> with <code>--threadless</code> flag.</p>\n<h2>SyntaxError: invalid syntax</h2>\n<p>Make sure you are using <code>Python 3</code>. Verify the version before running <code>proxy.py</code>:</p>\n<p><code>\u276f python --version</code></p>\n<h2>Unable to load plugins</h2>\n<p>Make sure plugin modules are discoverable by adding them to <code>PYTHONPATH</code>.  Example:</p>\n<p><code>PYTHONPATH=/path/to/my/app proxy --plugins my_app.proxyPlugin</code></p>\n<pre>...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Loaded plugin proxy.HttpProxyPlugin\n...<span class=\"o\">[</span>redacted<span class=\"o\">]</span>... - Loaded plugin my_app.proxyPlugin\n</pre>\n<p>OR, simply pass fully-qualified path as parameter, e.g.</p>\n<p><code>proxy --plugins /path/to/my/app/my_app.proxyPlugin</code></p>\n<h2>Unable to connect with proxy.py from remote host</h2>\n<p>Make sure <code>proxy.py</code> is listening on correct network interface.\nTry following flags:</p>\n<ul>\n<li>For IPv6 <code>--hostname ::</code></li>\n<li>For IPv4 <code>--hostname 0.0.0.0</code></li>\n</ul>\n<h2>Basic auth not working with a browser</h2>\n<p>Most likely it's a browser integration issue with system keychain.</p>\n<ul>\n<li>\n<p>First verify that basic auth is working using <code>curl</code></p>\n<p><code>curl -v -x username:password@localhost:8899 https://httpbin.org/get</code></p>\n</li>\n<li>\n<p>See <a href=\"https://github.com/abhinavsingh/proxy.py/issues/89#issuecomment-534845710\" rel=\"nofollow\">this thread</a>\nfor further details.</p>\n</li>\n</ul>\n<h2>Docker image not working on macOS</h2>\n<p>It's a compatibility issue with <code>vpnkit</code>.</p>\n<p>See <a href=\"https://github.com/abhinavsingh/proxy.py/issues/43\" rel=\"nofollow\">moby/vpnkit exhausts docker resources</a>\nand <a href=\"https://github.com/moby/vpnkit/issues/469\" rel=\"nofollow\">Connection refused: The proxy could not connect</a>\nfor some background.</p>\n<h2>GCE log viewer integration for proxy.py</h2>\n<p>A starter <a href=\"https://github.com/abhinavsingh/proxy.py/blob/develop/fluentd.conf\" rel=\"nofollow\">fluentd.conf</a>\ntemplate is available.</p>\n<ol>\n<li>\n<p>Copy this configuration file as <code>proxy.py.conf</code> under\n<code>/etc/google-fluentd/config.d/</code></p>\n</li>\n<li>\n<p>Update <code>path</code> field to log file path as used with <code>--log-file</code> flag.\nBy default <code>/tmp/proxy.log</code> path is tailed.</p>\n</li>\n<li>\n<p>Reload <code>google-fluentd</code>:</p>\n<p><code>sudo service google-fluentd restart</code></p>\n</li>\n</ol>\n<p>Now <code>proxy.py</code> logs can be browsed using\n<a href=\"https://console.cloud.google.com/logs/viewer\" rel=\"nofollow\">GCE log viewer</a>.</p>\n<h2>ValueError: filedescriptor out of range in select</h2>\n<p><code>proxy.py</code> is made to handle thousands of connections per second\nwithout any socket leaks.</p>\n<ol>\n<li>Make use of <code>--open-file-limit</code> flag to customize <code>ulimit -n</code>.</li>\n<li>Make sure to adjust <code>--backlog</code> flag for higher concurrency.</li>\n</ol>\n<p>If nothing helps, <a href=\"https://github.com/abhinavsingh/proxy.py/issues/new\" rel=\"nofollow\">open an issue</a>\nwith <code>requests per second</code> sent and output of following debug script:</p>\n<pre>\u276f ./helper/monitor_open_files.sh &lt;proxy-py-pid&gt;\n</pre>\n<h2>None:None in access logs</h2>\n<p>Sometimes you may see <code>None:None</code> in access logs.  It simply means\nthat an upstream server connection was never established i.e.\n<code>upstream_host=None</code>, <code>upstream_port=None</code>.</p>\n<p>There can be several reasons for no upstream connection,\nfew obvious ones include:</p>\n<ol>\n<li>Client established a connection but never completed the request.</li>\n<li>A plugin returned a response prematurely, avoiding connection to upstream server.</li>\n</ol>\n<h1>Flags</h1>\n<pre>\u276f proxy -h\nusage: proxy <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--backlog BACKLOG<span class=\"o\">]</span> <span class=\"o\">[</span>--basic-auth BASIC_AUTH<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--ca-key-file CA_KEY_FILE<span class=\"o\">]</span> <span class=\"o\">[</span>--ca-cert-dir CA_CERT_DIR<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--ca-cert-file CA_CERT_FILE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--ca-signing-key-file CA_SIGNING_KEY_FILE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--cert-file CERT_FILE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--client-recvbuf-size CLIENT_RECVBUF_SIZE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--devtools-ws-path DEVTOOLS_WS_PATH<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--disable-headers DISABLE_HEADERS<span class=\"o\">]</span> <span class=\"o\">[</span>--disable-http-proxy<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--enable-dashboard<span class=\"o\">]</span> <span class=\"o\">[</span>--enable-devtools<span class=\"o\">]</span> <span class=\"o\">[</span>--enable-events<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--enable-static-server<span class=\"o\">]</span> <span class=\"o\">[</span>--enable-web-server<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--hostname HOSTNAME<span class=\"o\">]</span> <span class=\"o\">[</span>--key-file KEY_FILE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--log-level LOG_LEVEL<span class=\"o\">]</span> <span class=\"o\">[</span>--log-file LOG_FILE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--log-format LOG_FORMAT<span class=\"o\">]</span> <span class=\"o\">[</span>--num-workers NUM_WORKERS<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--open-file-limit OPEN_FILE_LIMIT<span class=\"o\">]</span> <span class=\"o\">[</span>--pac-file PAC_FILE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--pac-file-url-path PAC_FILE_URL_PATH<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--pid-file PID_FILE<span class=\"o\">]</span> <span class=\"o\">[</span>--plugins PLUGINS<span class=\"o\">]</span> <span class=\"o\">[</span>--port PORT<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--server-recvbuf-size SERVER_RECVBUF_SIZE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--static-server-dir STATIC_SERVER_DIR<span class=\"o\">]</span> <span class=\"o\">[</span>--threadless<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--timeout TIMEOUT<span class=\"o\">]</span> <span class=\"o\">[</span>--version<span class=\"o\">]</span>\n\nproxy.py v2.1.0\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --backlog BACKLOG     Default: <span class=\"m\">100</span>. Maximum number of pending connections to\n                        proxy server\n  --basic-auth BASIC_AUTH\n                        Default: No authentication. Specify colon separated\n                        user:password to <span class=\"nb\">enable</span> basic authentication.\n  --ca-key-file CA_KEY_FILE\n                        Default: None. CA key to use <span class=\"k\">for</span> signing dynamically\n                        generated HTTPS certificates. If used, must also pass\n                        --ca-cert-file and --ca-signing-key-file\n  --ca-cert-dir CA_CERT_DIR\n                        Default: ~/.proxy.py. Directory to store dynamically\n                        generated certificates. Also see --ca-key-file, --ca-\n                        cert-file and --ca-signing-key-file\n  --ca-cert-file CA_CERT_FILE\n                        Default: None. Signing certificate to use <span class=\"k\">for</span> signing\n                        dynamically generated HTTPS certificates. If used,\n                        must also pass --ca-key-file and --ca-signing-key-file\n  --ca-signing-key-file CA_SIGNING_KEY_FILE\n                        Default: None. CA signing key to use <span class=\"k\">for</span> dynamic\n                        generation of HTTPS certificates. If used, must also\n                        pass --ca-key-file and --ca-cert-file\n  --cert-file CERT_FILE\n                        Default: None. Server certificate to <span class=\"nb\">enable</span> end-to-end\n                        TLS encryption with clients. If used, must also pass\n                        --key-file.\n  --client-recvbuf-size CLIENT_RECVBUF_SIZE\n                        Default: <span class=\"m\">1</span> MB. Maximum amount of data received from\n                        the client in a single recv<span class=\"o\">()</span> operation. Bump this\n                        value <span class=\"k\">for</span> faster uploads at the expense of increased\n                        RAM.\n  --devtools-ws-path DEVTOOLS_WS_PATH\n                        Default: /devtools. Only applicable <span class=\"k\">if</span> --enable-\n                        devtools is used.\n  --disable-headers DISABLE_HEADERS\n                        Default: None. Comma separated list of headers to\n                        remove before dispatching client request to upstream\n                        server.\n  --disable-http-proxy  Default: False. Whether to disable\n                        proxy.HttpProxyPlugin.\n  --enable-dashboard    Default: False. Enables proxy.py dashboard.\n  --enable-devtools     Default: False. Enables integration with Chrome\n                        Devtool Frontend. Also see --devtools-ws-path.\n  --enable-events       Default: False. Enables core to dispatch lifecycle\n                        events. Plugins can be used to subscribe <span class=\"k\">for</span> core\n                        events.\n  --enable-static-server\n                        Default: False. Enable inbuilt static file server.\n                        Optionally, also use --static-server-dir to serve\n                        static content from custom directory. By default,\n                        static file server serves out of installed proxy.py\n                        python module folder.\n  --enable-web-server   Default: False. Whether to <span class=\"nb\">enable</span>\n                        proxy.HttpWebServerPlugin.\n  --hostname HOSTNAME   Default: ::1. Server IP address.\n  --key-file KEY_FILE   Default: None. Server key file to <span class=\"nb\">enable</span> end-to-end\n                        TLS encryption with clients. If used, must also pass\n                        --cert-file.\n  --log-level LOG_LEVEL\n                        Valid options: DEBUG, INFO <span class=\"o\">(</span>default<span class=\"o\">)</span>, WARNING, ERROR,\n                        CRITICAL. Both upper and lowercase values are allowed.\n                        You may also simply use the leading character e.g.\n                        --log-level d\n  --log-file LOG_FILE   Default: sys.stdout. Log file destination.\n  --log-format LOG_FORMAT\n                        Log format <span class=\"k\">for</span> Python logger.\n  --num-workers NUM_WORKERS\n                        Defaults to number of CPU cores.\n  --open-file-limit OPEN_FILE_LIMIT\n                        Default: <span class=\"m\">1024</span>. Maximum number of files <span class=\"o\">(</span>TCP\n                        connections<span class=\"o\">)</span> that proxy.py can open concurrently.\n  --pac-file PAC_FILE   A file <span class=\"o\">(</span>Proxy Auto Configuration<span class=\"o\">)</span> or string to serve\n                        when the server receives a direct file request. Using\n                        this option enables proxy.HttpWebServerPlugin.\n  --pac-file-url-path PAC_FILE_URL_PATH\n                        Default: /. Web server path to serve the PAC file.\n  --pid-file PID_FILE   Default: None. Save parent process ID to a file.\n  --plugins PLUGINS     Comma separated plugins\n  --port PORT           Default: <span class=\"m\">8899</span>. Server port.\n  --server-recvbuf-size SERVER_RECVBUF_SIZE\n                        Default: <span class=\"m\">1</span> MB. Maximum amount of data received from\n                        the server in a single recv<span class=\"o\">()</span> operation. Bump this\n                        value <span class=\"k\">for</span> faster downloads at the expense of increased\n                        RAM.\n  --static-server-dir STATIC_SERVER_DIR\n                        Default: <span class=\"s2\">\"public\"</span> folder in directory where proxy.py\n                        is placed. This option is only applicable when static\n                        server is also enabled. See --enable-static-server.\n  --threadless          Default: False. When disabled a new thread is spawned\n                        to handle each client connection.\n  --timeout TIMEOUT     Default: <span class=\"m\">10</span>. Number of seconds after which an inactive\n                        connection must be dropped. Inactivity is defined by\n                        no data sent or received by the client.\n  --version, -v         Prints proxy.py version.\n\nProxy.py not working? Report at:\nhttps://github.com/abhinavsingh/proxy.py/issues/new\n</pre>\n<h1>Changelog</h1>\n<h2>v2.x</h2>\n<ul>\n<li>No longer <del>a single file module</del>.</li>\n<li>Added support for threadless execution.</li>\n<li>Added dashboard app.</li>\n<li>Added support for unit testing.</li>\n</ul>\n<h2>v1.x</h2>\n<ul>\n<li><code>Python3</code> only.\n<ul>\n<li>Deprecated support for <del>Python 2.x</del>.</li>\n</ul>\n</li>\n<li>Added support multi core accept.</li>\n<li>Added plugin support.</li>\n</ul>\n<h2>v0.x</h2>\n<ul>\n<li>Single file.</li>\n<li>Single threaded server.</li>\n</ul>\n<p>For detailed changelog refer to release PRs or commit history.</p>\n\n          </div>"}, "last_serial": 6547310, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "997f5de947c22194caf15f372f477aed", "sha256": "98360a92262d546a41a62fb6a2a033f9417603eeb03f8e9c3e80fbecd3ba089e"}, "downloads": -1, "filename": "proxy.py-0.1.tar.gz", "has_sig": false, "md5_digest": "997f5de947c22194caf15f372f477aed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7002, "upload_time": "2013-08-31T09:21:05", "upload_time_iso_8601": "2013-08-31T09:21:05.602806Z", "url": "https://files.pythonhosted.org/packages/54/1c/2d200e1daa6c3fc1e249856454a35f0226c603ea8bdd0e9a07f6326f8ad3/proxy.py-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "000506c9576e7e012eb1d6dc1fc3eab0", "sha256": "1d0048eb273c30fe3faad458c924ffdda91fc670aa559782ad6657551e0bf96c"}, "downloads": -1, "filename": "proxy.py-0.2.tar.gz", "has_sig": false, "md5_digest": "000506c9576e7e012eb1d6dc1fc3eab0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7307, "upload_time": "2015-03-17T19:34:57", "upload_time_iso_8601": "2015-03-17T19:34:57.112850Z", "url": "https://files.pythonhosted.org/packages/59/08/b3020d2eb8c5efde4b0ce833c4d8e451edbd6b7be6a1632cb299589a7a86/proxy.py-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "af7e2e2408e9f423e29da6ababe0f5f0", "sha256": "eafe063f87dd4de3cb3d680136e5f5d650628cd8b877911ed342457ea6047b8d"}, "downloads": -1, "filename": "proxy.py-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "af7e2e2408e9f423e29da6ababe0f5f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16360, "upload_time": "2019-02-09T02:59:00", "upload_time_iso_8601": "2019-02-09T02:59:00.821029Z", "url": "https://files.pythonhosted.org/packages/2b/e3/25fe95911a7efa183e7124e05a36954b7d58fca3eb74c27a3daa028d2724/proxy.py-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce6d6500ae1c67baf682fcc5bc2ef62f", "sha256": "a3f80bb49d52d0793d59b6f28a8721ed694ceb1af7dabe8493c7ecbd4487222c"}, "downloads": -1, "filename": "proxy.py-0.3.tar.gz", "has_sig": false, "md5_digest": "ce6d6500ae1c67baf682fcc5bc2ef62f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9941, "upload_time": "2019-02-09T02:59:02", "upload_time_iso_8601": "2019-02-09T02:59:02.263756Z", "url": "https://files.pythonhosted.org/packages/a9/e6/59453d8cef34a0e170df2f27a7e5c92c394ea67cef0760e963b0ef8bca71/proxy.py-0.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "afc52d4cd3727c2810f81e929b400876", "sha256": "486b83646566a18e6060f9895567886c7b882f1ad28c6dd944ff4a1c129de6db"}, "downloads": -1, "filename": "proxy.py-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "afc52d4cd3727c2810f81e929b400876", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43525, "upload_time": "2019-09-27T20:38:38", "upload_time_iso_8601": "2019-09-27T20:38:38.654245Z", "url": "https://files.pythonhosted.org/packages/43/b5/072311f2e5692bb144e79bc6e964633d2bb2be2b9308548c460a09cb8ace/proxy.py-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44f150ae5299dcac7197e581daf59185", "sha256": "45f3089bc72b56f3ac1ba68c11cae09fa147d26184cf728c7b544feedc9caad7"}, "downloads": -1, "filename": "proxy.py-1.0.0.tar.gz", "has_sig": false, "md5_digest": "44f150ae5299dcac7197e581daf59185", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97658, "upload_time": "2019-09-27T20:38:40", "upload_time_iso_8601": "2019-09-27T20:38:40.696609Z", "url": "https://files.pythonhosted.org/packages/a5/b0/830dd2ff2589bb44202ab57c4e4b48b082928cc24568e9e7774a4a858fb1/proxy.py-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c7d0a8a4f312f5a71961a70e33691b5e", "sha256": "ab839f275fd7c653a76518baf2e66ede83153208855162d1f71e5b903b84265f"}, "downloads": -1, "filename": "proxy.py-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c7d0a8a4f312f5a71961a70e33691b5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57787, "upload_time": "2019-10-10T07:02:03", "upload_time_iso_8601": "2019-10-10T07:02:03.898530Z", "url": "https://files.pythonhosted.org/packages/a7/5b/b216af12fa67be5e09f032a6124d63e06315c5b8cd3ec8f87b9060a17ccc/proxy.py-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fa1f83e53d38146bc5298f272b9efc0", "sha256": "d736576b0a176de5839fbecbc34b8c0817ab2e8f0696835b4723618c55ab0c29"}, "downloads": -1, "filename": "proxy.py-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1fa1f83e53d38146bc5298f272b9efc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54483, "upload_time": "2019-10-10T07:02:05", "upload_time_iso_8601": "2019-10-10T07:02:05.695179Z", "url": "https://files.pythonhosted.org/packages/62/1d/2b335c31b221b82b75f33c0a97434ddd9ab5f204e71c901680103bd00046/proxy.py-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "cfacf014251cfed33c1a803c4270ddd0", "sha256": "7a98fbf6e508ce928a01e51a58530332bba210c1f6396130d63e275620fd49ab"}, "downloads": -1, "filename": "proxy.py-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cfacf014251cfed33c1a803c4270ddd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58082, "upload_time": "2019-10-10T22:25:12", "upload_time_iso_8601": "2019-10-10T22:25:12.429372Z", "url": "https://files.pythonhosted.org/packages/77/44/f8af9432961324b372f741adabe736817534cb466fedc4c5223de78a4ed8/proxy.py-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b47a7b46d54009b86d9d66967644448", "sha256": "e6cb0e62a422e3021497f495b447a3f48e7275e16a9ea54b98b3799b936d7eea"}, "downloads": -1, "filename": "proxy.py-1.1.1.tar.gz", "has_sig": false, "md5_digest": "2b47a7b46d54009b86d9d66967644448", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54647, "upload_time": "2019-10-10T22:25:14", "upload_time_iso_8601": "2019-10-10T22:25:14.175022Z", "url": "https://files.pythonhosted.org/packages/36/9b/ceb280ba9b3b9c22fe677b95321566d41a6e4ce1234b4811bebaa1385c51/proxy.py-1.1.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "2ddadffe155a3186d5ab0a8103810116", "sha256": "545471ea0a41a70e5696128efd76c7726ecbc29b00f55f0bf4eef6d225296ce3"}, "downloads": -1, "filename": "proxy.py-2.0.0.tar.gz", "has_sig": false, "md5_digest": "2ddadffe155a3186d5ab0a8103810116", "packagetype": "sdist", "python_version": "source", "requires_python": "!=2.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 90987, "upload_time": "2019-12-26T00:48:39", "upload_time_iso_8601": "2019-12-26T00:48:39.800780Z", "url": "https://files.pythonhosted.org/packages/b4/be/688023beec29d75bada15fea5abb2fd888ac64a0d7f66cbdbe3a73a8ea40/proxy.py-2.0.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "4896908feed9a68153d180f5c3629acd", "sha256": "b45ca4b8ce16e0fd3438ee18e7035cbe7120dbfffffed4e77af6744d9824c00c"}, "downloads": -1, "filename": "proxy.py-2.1.1.tar.gz", "has_sig": false, "md5_digest": "4896908feed9a68153d180f5c3629acd", "packagetype": "sdist", "python_version": "source", "requires_python": "!=2.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 93528, "upload_time": "2020-01-31T05:57:08", "upload_time_iso_8601": "2020-01-31T05:57:08.533796Z", "url": "https://files.pythonhosted.org/packages/43/06/1ae39d95bd973d7d0594af0e604476189dca4c3bb7b0fb417cba15416c79/proxy.py-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "8a73299c6db93bb6c62be7c2a36a42d1", "sha256": "e60aae249fb4c1c7b1da35bdc1f82bd1bb2cd79f8c10694e5682ca336f9d9d07"}, "downloads": -1, "filename": "proxy.py-2.1.2.tar.gz", "has_sig": false, "md5_digest": "8a73299c6db93bb6c62be7c2a36a42d1", "packagetype": "sdist", "python_version": "source", "requires_python": "!=2.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 93568, "upload_time": "2020-01-31T06:34:17", "upload_time_iso_8601": "2020-01-31T06:34:17.544647Z", "url": "https://files.pythonhosted.org/packages/9d/a1/5fd125c484febacd1ae6ab3a04c83dcde5f464834b554360191b55a064a9/proxy.py-2.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a73299c6db93bb6c62be7c2a36a42d1", "sha256": "e60aae249fb4c1c7b1da35bdc1f82bd1bb2cd79f8c10694e5682ca336f9d9d07"}, "downloads": -1, "filename": "proxy.py-2.1.2.tar.gz", "has_sig": false, "md5_digest": "8a73299c6db93bb6c62be7c2a36a42d1", "packagetype": "sdist", "python_version": "source", "requires_python": "!=2.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 93568, "upload_time": "2020-01-31T06:34:17", "upload_time_iso_8601": "2020-01-31T06:34:17.544647Z", "url": "https://files.pythonhosted.org/packages/9d/a1/5fd125c484febacd1ae6ab3a04c83dcde5f464834b554360191b55a064a9/proxy.py-2.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:17 2020"}