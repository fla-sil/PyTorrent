{"info": {"author": "Tim Boring", "author_email": "tim@boring.green", "bugtrack_url": null, "classifiers": [], "description": "![Continuous integration](https://github.com/timboring/atlas_i2c/workflows/Continuous%20integration/badge.svg) ![Continous delivery](https://github.com/timboring/atlas_i2c/workflows/Continous%20delivery/badge.svg)\n\n# AtlasI2C: A Python package to communicate with Atlas Scientific devices in I2C mode.\n\nThis package provides functionality that is based on the [example code](https://github.com/AtlasScientific/Raspberry-Pi-sample-code) from Atlas Scientific. It has the following goals:\n\n1. Provide a simple and clean codebase with test coverage\n2. Reduce code duplication by making the codebase available from PyPi\n3. Provide comprehensive support for Atlas Scientific EZO sensors\n\n# Overview\nThis package provides the following modules:\n\n- [atlas_i2c](https://github.com/timboring/atlas_i2c/blob/master/src/atlas_i2c/atlas_i2c.py)\n- [commands](https://github.com/timboring/atlas_i2c/blob/master/src/atlas_i2c/commands.py)\n- [constants](https://github.com/timboring/atlas_i2c/blob/master/src/atlas_i2c/constants.py)\n- [sensors](https://github.com/timboring/atlas_i2c/blob/master/src/atlas_i2c/sensors.py)\n\n## module: atlas_i2c\nThe `atlas_i2c` module can be thought of as the client that talks to the server, similar to how an HTTP client talks to an HTTP server. The server in this scenario is the Atlas Scientfic EZO sensor. Instead of talking over TCP using HTTP, however, it talks to the server over the I2C bus, using Linux device files (e.g. `/dev/i2c-1`).\n\nThe module uses the following protocol to communicate with a sensor:\n1. Open the device file for reading and writing\n2. Send a command string (e.g. \"R\") to the device by writing it to the device file\n3. Wait for N milliseconds for the sensor to process the command\n4. Read the resulting data from the device file\n\nAt the lowest level, this module's `read()` and `write()` methods can be combined with `time.sleep()`  to communicate with a sensor:\n```py\nIn [1]: from atlas_i2c import atlas_i2c\nIn [2]: sensor_address = 102\nIn [3]: dev = atlas_i2c.AtlasI2C()\nIn [4]: dev.set_i2c_address(sensor_address)\nIn [5]: dev.write(\"R\")\nIn [6]: time.sleep(1.5)\nIn [15]: result = dev.read(\"R\")\nIn [16]: result.status_code\nOut[16]: 1\nIn [17]: result.data\nOut[17]: b'0.922'\nIn [18]: result.original_cmd\nOut[18]: 'R'\n```\n\nThe module also provides a `query()` method to conveniently wrap the above protocol into a single method:\n\n```py\nIn [19]: result = dev.query(\"R\", processing_delay=1500)\nIn [20]: result.status_code\nOut[20]: 1\nIn [21]: result.data\nOut[21]: b'0.926'\nIn [22]: result.original_cmd\nOut[22]: 'R'\n```\n\nThe result of calling the `read()` and `query()` methods in the above code snippets is a `CommandReponse` object. Here is an example of creating a `CommandResponse` object manually and populating it:\n```py\nIn [1]: from atlas_i2c import atlas_i2c\nIn [2]: response = atlas_i2c.CommandResponse()\nIn [3]: response\nOut[3]: <atlas_i2c.atlas_i2c.CommandResponse at 0x7fbd40f48370>\nIn [6]: response.sensor_address = 10\nIn [7]: response.sensor_address = 102\nIn [8]: response.original_cmd = \"R\"\nIn [9]: response.response_type = \"str\"\nIn [10]: response.status_code = raw_data[0] \n```\n\n## module: commands\nThe `commands` module provides encapsulations intended to simplify interactions with sensors. Command attributes and methods can be accessed at the class level, thus it's not necessary to instantiate a command.\n\nThe module defines constants for each command class:\n```py\nIn [19]: from atlas_i2c import commands\n# To find the arguments a command supports:\nIn [24]: commands.BAUD.arguments\nOut[24]: (300, 1200, 2400, 9600, 19200, 38400, 57600, 115200)\n# To get a formatted command string:\nIn [25]: commands.BAUD.format_command(300)\nOut[25]: 'Baud,300'\n# A command may not support any arguments:\nIn [24]: commands.READ.arguments\nIn [25]:\n```\nNot all commands have been implemented. The `format_command` method on unimplemented commands will raise a `NotImplementedError` exception.\n\n## module: sensors\nThe `sensors` module provides a higher-level encapsulation of a sensor in the form of the `Sensor` class. The intention is that the `Sensor` class is used as the primary means of communication; it uses the lower-level `AtlasI2C` class to perform all functions, such as reading data from a sensor.\n\n```py\nIn [25]: from atlas_i2c import sensors\nIn [26]: sensor = sensors.Sensor(\"Temperature\", 102)\nIn [27]: sensor.connect()\nIn [28]: response = sensor.query(commands.READ)\nIn [29]: response.status_code\nOut[29]: 1\nIn [30]: response.data\nOut[30]: b'0.923'\nIn [31]: response.original_cmd\nOut[31]: 'R'\n```\n\n# Supported Python Versions\nThis module requires Python >= 3.6.\n\n# Tests\n`atlas_i2c` uses Tox for test automation, which includes linting, formatting and static type checking. To run Tox:\n\n```sh\n> tox\n[output truncated]\npy38: commands succeeded\npy37: commands succeeded\npy36: commands succeeded\nmypy: commands succeeded\nlint: commands succeeded\nformat: commands succeeded\ncongratulations :)\n```\n\n# Installation\n## From PyPi\nInstallation can be done using Pip:\n\n```sh\n> pip install atlas-i2c\n```\n\n## From source\n```sh\n> python setup.py bdist_wheel\n> pip install dist/atlas_i2c-$version-py3-none-any.whl\n```\n\n# Atlas Scientific Sensor Datasheets\n- [pH](https://www.atlas-scientific.com/_files/_datasheets/_circuit/pH_EZO_Datasheet.pdf)\n- [temp](https://www.atlas-scientific.com/_files/_datasheets/_circuit/EZO_RTD_Datasheet.pdf)\n- [orp](https://www.atlas-scientific.com/_files/_datasheets/_circuit/ORP_EZO_datasheet.pdf)\n- [do](https://www.atlas-scientific.com/_files/_datasheets/_circuit/DO_EZO_Datasheet.pdf)\n- [ec](https://www.atlas-scientific.com/_files/_datasheets/_circuit/EC_EZO_Datasheet.pdf)\n- [co2](https://www.atlas-scientific.com/_files/_datasheets/_probe/EZO_CO2_Datasheet.pdf)\n- [flo](https://www.atlas-scientific.com/_files/_datasheets/_circuit/flow_EZO_Datasheet.pdf)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/timboring/atlas_i2c", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "atlas-i2c", "package_url": "https://pypi.org/project/atlas-i2c/", "platform": "", "project_url": "https://pypi.org/project/atlas-i2c/", "project_urls": {"Homepage": "https://github.com/timboring/atlas_i2c"}, "release_url": "https://pypi.org/project/atlas-i2c/0.2.11/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Atlas I2C", "version": "0.2.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Continuous integration\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e186c4c1f6add0e7ebef157761012f18dc30b4c4/68747470733a2f2f6769746875622e636f6d2f74696d626f72696e672f61746c61735f6932632f776f726b666c6f77732f436f6e74696e756f7573253230696e746567726174696f6e2f62616467652e737667\"> <img alt=\"Continous delivery\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee8f5837dc3cb0b569b9ff5abbdfe4792468578a/68747470733a2f2f6769746875622e636f6d2f74696d626f72696e672f61746c61735f6932632f776f726b666c6f77732f436f6e74696e6f757325323064656c69766572792f62616467652e737667\"></p>\n<h1>AtlasI2C: A Python package to communicate with Atlas Scientific devices in I2C mode.</h1>\n<p>This package provides functionality that is based on the <a href=\"https://github.com/AtlasScientific/Raspberry-Pi-sample-code\" rel=\"nofollow\">example code</a> from Atlas Scientific. It has the following goals:</p>\n<ol>\n<li>Provide a simple and clean codebase with test coverage</li>\n<li>Reduce code duplication by making the codebase available from PyPi</li>\n<li>Provide comprehensive support for Atlas Scientific EZO sensors</li>\n</ol>\n<h1>Overview</h1>\n<p>This package provides the following modules:</p>\n<ul>\n<li><a href=\"https://github.com/timboring/atlas_i2c/blob/master/src/atlas_i2c/atlas_i2c.py\" rel=\"nofollow\">atlas_i2c</a></li>\n<li><a href=\"https://github.com/timboring/atlas_i2c/blob/master/src/atlas_i2c/commands.py\" rel=\"nofollow\">commands</a></li>\n<li><a href=\"https://github.com/timboring/atlas_i2c/blob/master/src/atlas_i2c/constants.py\" rel=\"nofollow\">constants</a></li>\n<li><a href=\"https://github.com/timboring/atlas_i2c/blob/master/src/atlas_i2c/sensors.py\" rel=\"nofollow\">sensors</a></li>\n</ul>\n<h2>module: atlas_i2c</h2>\n<p>The <code>atlas_i2c</code> module can be thought of as the client that talks to the server, similar to how an HTTP client talks to an HTTP server. The server in this scenario is the Atlas Scientfic EZO sensor. Instead of talking over TCP using HTTP, however, it talks to the server over the I2C bus, using Linux device files (e.g. <code>/dev/i2c-1</code>).</p>\n<p>The module uses the following protocol to communicate with a sensor:</p>\n<ol>\n<li>Open the device file for reading and writing</li>\n<li>Send a command string (e.g. \"R\") to the device by writing it to the device file</li>\n<li>Wait for N milliseconds for the sensor to process the command</li>\n<li>Read the resulting data from the device file</li>\n</ol>\n<p>At the lowest level, this module's <code>read()</code> and <code>write()</code> methods can be combined with <code>time.sleep()</code>  to communicate with a sensor:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">atlas_i2c</span> <span class=\"kn\">import</span> <span class=\"n\">atlas_i2c</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">sensor_address</span> <span class=\"o\">=</span> <span class=\"mi\">102</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">dev</span> <span class=\"o\">=</span> <span class=\"n\">atlas_i2c</span><span class=\"o\">.</span><span class=\"n\">AtlasI2C</span><span class=\"p\">()</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">set_i2c_address</span><span class=\"p\">(</span><span class=\"n\">sensor_address</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"R\"</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.5</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]:</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"R\"</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]:</span> <span class=\"mi\">1</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">17</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">17</span><span class=\"p\">]:</span> <span class=\"sa\">b</span><span class=\"s1\">'0.922'</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">original_cmd</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">]:</span> <span class=\"s1\">'R'</span>\n</pre>\n<p>The module also provides a <code>query()</code> method to conveniently wrap the above protocol into a single method:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">]:</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"R\"</span><span class=\"p\">,</span> <span class=\"n\">processing_delay</span><span class=\"o\">=</span><span class=\"mi\">1500</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]:</span> <span class=\"mi\">1</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">21</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">21</span><span class=\"p\">]:</span> <span class=\"sa\">b</span><span class=\"s1\">'0.926'</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">original_cmd</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">]:</span> <span class=\"s1\">'R'</span>\n</pre>\n<p>The result of calling the <code>read()</code> and <code>query()</code> methods in the above code snippets is a <code>CommandReponse</code> object. Here is an example of creating a <code>CommandResponse</code> object manually and populating it:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">atlas_i2c</span> <span class=\"kn\">import</span> <span class=\"n\">atlas_i2c</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">atlas_i2c</span><span class=\"o\">.</span><span class=\"n\">CommandResponse</span><span class=\"p\">()</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">response</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"o\">&lt;</span><span class=\"n\">atlas_i2c</span><span class=\"o\">.</span><span class=\"n\">atlas_i2c</span><span class=\"o\">.</span><span class=\"n\">CommandResponse</span> <span class=\"n\">at</span> <span class=\"mh\">0x7fbd40f48370</span><span class=\"o\">&gt;</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">sensor_address</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">sensor_address</span> <span class=\"o\">=</span> <span class=\"mi\">102</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">original_cmd</span> <span class=\"o\">=</span> <span class=\"s2\">\"R\"</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">response_type</span> <span class=\"o\">=</span> <span class=\"s2\">\"str\"</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"n\">raw_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> \n</pre>\n<h2>module: commands</h2>\n<p>The <code>commands</code> module provides encapsulations intended to simplify interactions with sensors. Command attributes and methods can be accessed at the class level, thus it's not necessary to instantiate a command.</p>\n<p>The module defines constants for each command class:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">atlas_i2c</span> <span class=\"kn\">import</span> <span class=\"n\">commands</span>\n<span class=\"c1\"># To find the arguments a command supports:</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">]:</span> <span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">BAUD</span><span class=\"o\">.</span><span class=\"n\">arguments</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">]:</span> <span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"mi\">2400</span><span class=\"p\">,</span> <span class=\"mi\">9600</span><span class=\"p\">,</span> <span class=\"mi\">19200</span><span class=\"p\">,</span> <span class=\"mi\">38400</span><span class=\"p\">,</span> <span class=\"mi\">57600</span><span class=\"p\">,</span> <span class=\"mi\">115200</span><span class=\"p\">)</span>\n<span class=\"c1\"># To get a formatted command string:</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">]:</span> <span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">BAUD</span><span class=\"o\">.</span><span class=\"n\">format_command</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">]:</span> <span class=\"s1\">'Baud,300'</span>\n<span class=\"c1\"># A command may not support any arguments:</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">]:</span> <span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"o\">.</span><span class=\"n\">arguments</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">]:</span>\n</pre>\n<p>Not all commands have been implemented. The <code>format_command</code> method on unimplemented commands will raise a <code>NotImplementedError</code> exception.</p>\n<h2>module: sensors</h2>\n<p>The <code>sensors</code> module provides a higher-level encapsulation of a sensor in the form of the <code>Sensor</code> class. The intention is that the <code>Sensor</code> class is used as the primary means of communication; it uses the lower-level <code>AtlasI2C</code> class to perform all functions, such as reading data from a sensor.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">atlas_i2c</span> <span class=\"kn\">import</span> <span class=\"n\">sensors</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">]:</span> <span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">sensors</span><span class=\"o\">.</span><span class=\"n\">Sensor</span><span class=\"p\">(</span><span class=\"s2\">\"Temperature\"</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">27</span><span class=\"p\">]:</span> <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]:</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">29</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">29</span><span class=\"p\">]:</span> <span class=\"mi\">1</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]:</span> <span class=\"sa\">b</span><span class=\"s1\">'0.923'</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">original_cmd</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">]:</span> <span class=\"s1\">'R'</span>\n</pre>\n<h1>Supported Python Versions</h1>\n<p>This module requires Python &gt;= 3.6.</p>\n<h1>Tests</h1>\n<p><code>atlas_i2c</code> uses Tox for test automation, which includes linting, formatting and static type checking. To run Tox:</p>\n<pre>&gt; tox\n<span class=\"o\">[</span>output truncated<span class=\"o\">]</span>\npy38: commands succeeded\npy37: commands succeeded\npy36: commands succeeded\nmypy: commands succeeded\nlint: commands succeeded\nformat: commands succeeded\ncongratulations :<span class=\"o\">)</span>\n</pre>\n<h1>Installation</h1>\n<h2>From PyPi</h2>\n<p>Installation can be done using Pip:</p>\n<pre>&gt; pip install atlas-i2c\n</pre>\n<h2>From source</h2>\n<pre>&gt; python setup.py bdist_wheel\n&gt; pip install dist/atlas_i2c-<span class=\"nv\">$version</span>-py3-none-any.whl\n</pre>\n<h1>Atlas Scientific Sensor Datasheets</h1>\n<ul>\n<li><a href=\"https://www.atlas-scientific.com/_files/_datasheets/_circuit/pH_EZO_Datasheet.pdf\" rel=\"nofollow\">pH</a></li>\n<li><a href=\"https://www.atlas-scientific.com/_files/_datasheets/_circuit/EZO_RTD_Datasheet.pdf\" rel=\"nofollow\">temp</a></li>\n<li><a href=\"https://www.atlas-scientific.com/_files/_datasheets/_circuit/ORP_EZO_datasheet.pdf\" rel=\"nofollow\">orp</a></li>\n<li><a href=\"https://www.atlas-scientific.com/_files/_datasheets/_circuit/DO_EZO_Datasheet.pdf\" rel=\"nofollow\">do</a></li>\n<li><a href=\"https://www.atlas-scientific.com/_files/_datasheets/_circuit/EC_EZO_Datasheet.pdf\" rel=\"nofollow\">ec</a></li>\n<li><a href=\"https://www.atlas-scientific.com/_files/_datasheets/_probe/EZO_CO2_Datasheet.pdf\" rel=\"nofollow\">co2</a></li>\n<li><a href=\"https://www.atlas-scientific.com/_files/_datasheets/_circuit/flow_EZO_Datasheet.pdf\" rel=\"nofollow\">flo</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6559843, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "354173ad3e403c67c18e6808121eabef", "sha256": "b7740d65bb57758f00783cdbd3bc8291ca06106c2bd489df115c2faeaede563c"}, "downloads": -1, "filename": "atlas_i2c-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "354173ad3e403c67c18e6808121eabef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4118, "upload_time": "2020-01-13T00:38:38", "upload_time_iso_8601": "2020-01-13T00:38:38.646678Z", "url": "https://files.pythonhosted.org/packages/2f/9f/5ac601e76bfa7da9875a97ba605b8742f561b27c01e7886a88cb171c2b8b/atlas_i2c-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d881c80bf10e38372aadba07de401c8d", "sha256": "16de2cdfeaa142edd9718c9bf9ba731a744bb0294d17fa92d0b52f503067f305"}, "downloads": -1, "filename": "atlas-i2c-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d881c80bf10e38372aadba07de401c8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4108, "upload_time": "2020-01-13T00:38:40", "upload_time_iso_8601": "2020-01-13T00:38:40.358432Z", "url": "https://files.pythonhosted.org/packages/1c/a5/e6a9627974b22a6c6acb51528d774320985eb7ee65b31df4ac8d9565d537/atlas-i2c-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b94d8da874b7291ac6917919f2e73855", "sha256": "bb7d7747f66d0593b2ddc88ada712ffc1659b2ad75034449d70cf590db22f995"}, "downloads": -1, "filename": "atlas_i2c-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b94d8da874b7291ac6917919f2e73855", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8905, "upload_time": "2020-01-19T02:22:36", "upload_time_iso_8601": "2020-01-19T02:22:36.628281Z", "url": "https://files.pythonhosted.org/packages/ba/d0/3ccd54b934c7e835ab7d77cad92c2c021886979bf2bd67ee834184f37544/atlas_i2c-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "706bfb21a72669f819e27153a8571f52", "sha256": "5b1067051854815d562c00d8e2934b66eca0e681428493b358d6458fa180c411"}, "downloads": -1, "filename": "atlas-i2c-0.2.0.tar.gz", "has_sig": false, "md5_digest": "706bfb21a72669f819e27153a8571f52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7730, "upload_time": "2020-01-19T02:22:38", "upload_time_iso_8601": "2020-01-19T02:22:38.741860Z", "url": "https://files.pythonhosted.org/packages/9c/4b/0a93c2a2f4a08a8f47ca1a5c5d14ae39f319cda47407e32b433ec8aafe17/atlas-i2c-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f0edbcf413820e6e78b2f257274ba66c", "sha256": "a5eeeb3983a1a82294b00347f3cedbfcad421e7570bce80a3ce5d937f1efff76"}, "downloads": -1, "filename": "atlas_i2c-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f0edbcf413820e6e78b2f257274ba66c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8950, "upload_time": "2020-01-19T02:47:26", "upload_time_iso_8601": "2020-01-19T02:47:26.167856Z", "url": "https://files.pythonhosted.org/packages/8e/6a/d629965da58436bf03d1be899671b12717bf21201d357adb4aae840800d7/atlas_i2c-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "164adfa803fc795a92e3cae1882d83c7", "sha256": "271b4d7b08ae270a2cb095b59d33cd8bf9ebfe6b192109a547e4e86664e50094"}, "downloads": -1, "filename": "atlas-i2c-0.2.1.tar.gz", "has_sig": false, "md5_digest": "164adfa803fc795a92e3cae1882d83c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7795, "upload_time": "2020-01-19T02:47:29", "upload_time_iso_8601": "2020-01-19T02:47:29.408447Z", "url": "https://files.pythonhosted.org/packages/7c/47/a8773f19e403325bbb6c4de3b7f1afb49e117de78cc5f768d5d512f99b94/atlas-i2c-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "b10fa1a62e7160211780b605bf885928", "sha256": "b42df4fc5efe4b489bf9faffe0f0af9a218ec3e2b408b1b9f7e7331eb4fd9e34"}, "downloads": -1, "filename": "atlas_i2c-0.2.10-py3-none-any.whl", "has_sig": false, "md5_digest": "b10fa1a62e7160211780b605bf885928", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8144, "upload_time": "2020-01-29T04:08:23", "upload_time_iso_8601": "2020-01-29T04:08:23.545739Z", "url": "https://files.pythonhosted.org/packages/c5/9c/7cecf4deb005b0b44e1cedd0b5c883a6e6c35488ef0228247c1197d9be02/atlas_i2c-0.2.10-py3-none-any.whl", "yanked": false}], "0.2.11": [{"comment_text": "", "digests": {"md5": "52cb010dd80726c0c0c1706536f52bb6", "sha256": "48e69433ffc06dd32f3a4b8ea634dccd6ada75ade103ea4b6b9989374e791361"}, "downloads": -1, "filename": "atlas_i2c-0.2.11-py3-none-any.whl", "has_sig": false, "md5_digest": "52cb010dd80726c0c0c1706536f52bb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8002, "upload_time": "2020-02-02T21:13:35", "upload_time_iso_8601": "2020-02-02T21:13:35.094609Z", "url": "https://files.pythonhosted.org/packages/b6/0e/d22bfeee54ea8fa87401244dd976a3afa5f85be2dee679349424d71ac6ba/atlas_i2c-0.2.11-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "aa98b5c6fb38f85b8f84e155942510c3", "sha256": "a9b5477690d9fbfa6e20052d374c112f2adacd6282df16197ca163c30c071969"}, "downloads": -1, "filename": "atlas_i2c-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "aa98b5c6fb38f85b8f84e155942510c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9001, "upload_time": "2020-01-19T03:21:29", "upload_time_iso_8601": "2020-01-19T03:21:29.207190Z", "url": "https://files.pythonhosted.org/packages/f1/8e/4c44198f4871e37aac3f4b45103b46d30b054512bb8cef26be8f59f0e680/atlas_i2c-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51dcbd28d092e5d475513597fd2d64d3", "sha256": "44e02c0b1f074a39aaaf290590f5bf432672094f345092f112fade04bc0525c5"}, "downloads": -1, "filename": "atlas-i2c-0.2.2.tar.gz", "has_sig": false, "md5_digest": "51dcbd28d092e5d475513597fd2d64d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7817, "upload_time": "2020-01-19T03:21:33", "upload_time_iso_8601": "2020-01-19T03:21:33.636322Z", "url": "https://files.pythonhosted.org/packages/78/30/f1e6e44098df2c3fc75dc44f01b37aa5a417074a9775afaafec601aebd0c/atlas-i2c-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "5d3b2723b5fdb15a3b269b7156785a65", "sha256": "0f2800e207c5ea20eba555541256e191a92416fa019dbcda8f5c9ac932f7004a"}, "downloads": -1, "filename": "atlas_i2c-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5d3b2723b5fdb15a3b269b7156785a65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9071, "upload_time": "2020-01-19T03:40:15", "upload_time_iso_8601": "2020-01-19T03:40:15.442779Z", "url": "https://files.pythonhosted.org/packages/81/06/c60e3b440b236cbba813a0045d3788af536eb3c5201cfe9c33ffa3e7ff7e/atlas_i2c-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d95849b4e6f7ff300423d81f754b409", "sha256": "deb99fd06767ca620717d0cb908845a5fba19329528722137d9339fe6cdd1dd1"}, "downloads": -1, "filename": "atlas-i2c-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5d95849b4e6f7ff300423d81f754b409", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7870, "upload_time": "2020-01-19T03:40:19", "upload_time_iso_8601": "2020-01-19T03:40:19.512372Z", "url": "https://files.pythonhosted.org/packages/e7/65/aba22fa20d12e0d266ffac14bfc6bcde17514581c6d7fea6be1d0d8f18b1/atlas-i2c-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "ab4c3cc7549a940f7b4d50b26e6b8a93", "sha256": "92e9823603a39c55e150de34294b5c37d82dacd41692323d216887e143858564"}, "downloads": -1, "filename": "atlas_i2c-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ab4c3cc7549a940f7b4d50b26e6b8a93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9094, "upload_time": "2020-01-19T04:14:19", "upload_time_iso_8601": "2020-01-19T04:14:19.431469Z", "url": "https://files.pythonhosted.org/packages/13/a7/d4708b807f5f2805d055674286c0e6c1e845c80f99e453caae515f8ee73c/atlas_i2c-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf2280893f7c8916162e36f0fe756308", "sha256": "ba07e773b1defe040a4481ded7dc66588ca2e804b477f12a6958b8f8d26ac113"}, "downloads": -1, "filename": "atlas-i2c-0.2.4.tar.gz", "has_sig": false, "md5_digest": "cf2280893f7c8916162e36f0fe756308", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7889, "upload_time": "2020-01-19T04:14:24", "upload_time_iso_8601": "2020-01-19T04:14:24.201124Z", "url": "https://files.pythonhosted.org/packages/8e/b7/047178daf03c60e7b7f98caaa1ee7dca2422f446dfa38d19481d7d776958/atlas-i2c-0.2.4.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "826f36759d2cd6576a2be52d5f2229e4", "sha256": "69b8a329e4455e0f05a375dc717af5de380a79bc96658acda3923712c9967552"}, "downloads": -1, "filename": "atlas_i2c-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "826f36759d2cd6576a2be52d5f2229e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9192, "upload_time": "2020-01-20T02:45:57", "upload_time_iso_8601": "2020-01-20T02:45:57.140282Z", "url": "https://files.pythonhosted.org/packages/37/b8/edcb9b45b2416789d0d03433dc0f5c67090df1000cd8272f5d573241e577/atlas_i2c-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aee05b63d1ef3c2b0eef86e0b4abb7c9", "sha256": "90f47d9906bca6af583f798e55b6710e7cfbae7ce696a46ec70066f8302d7802"}, "downloads": -1, "filename": "atlas-i2c-0.2.6.tar.gz", "has_sig": false, "md5_digest": "aee05b63d1ef3c2b0eef86e0b4abb7c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8206, "upload_time": "2020-01-20T02:46:02", "upload_time_iso_8601": "2020-01-20T02:46:02.913320Z", "url": "https://files.pythonhosted.org/packages/27/79/1ac71a1cd4672dee716463f8f3c5ea64a4230162cdc70ae3af900642b076/atlas-i2c-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "52cb010dd80726c0c0c1706536f52bb6", "sha256": "48e69433ffc06dd32f3a4b8ea634dccd6ada75ade103ea4b6b9989374e791361"}, "downloads": -1, "filename": "atlas_i2c-0.2.11-py3-none-any.whl", "has_sig": false, "md5_digest": "52cb010dd80726c0c0c1706536f52bb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8002, "upload_time": "2020-02-02T21:13:35", "upload_time_iso_8601": "2020-02-02T21:13:35.094609Z", "url": "https://files.pythonhosted.org/packages/b6/0e/d22bfeee54ea8fa87401244dd976a3afa5f85be2dee679349424d71ac6ba/atlas_i2c-0.2.11-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:16:35 2020"}