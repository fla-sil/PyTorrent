{"info": {"author": "David Wolever", "author_email": "david@wolever.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "Parameterized testing with any Python test framework\n====================================================\n\n.. image:: https://img.shields.io/pypi/v/parameterized.svg\n    :alt: PyPI\n    :target: https://pypi.org/project/parameterized/\n\n.. image:: https://circleci.com/gh/wolever/parameterized.svg?style=svg\n    :alt: Circle CI\n    :target: https://circleci.com/gh/wolever/parameterized\n\n\nParameterized testing in Python sucks.\n\n``parameterized`` fixes that. For everything. Parameterized testing for nose,\nparameterized testing for py.test, parameterized testing for unittest.\n\n.. code:: python\n\n   # test_math.py\n   from nose.tools import assert_equal\n   from parameterized import parameterized, parameterized_class\n\n   import unittest\n   import math\n\n   @parameterized([\n       (2, 2, 4),\n       (2, 3, 8),\n       (1, 9, 1),\n       (0, 9, 0),\n   ])\n   def test_pow(base, exponent, expected):\n      assert_equal(math.pow(base, exponent), expected)\n\n   class TestMathUnitTest(unittest.TestCase):\n      @parameterized.expand([\n          (\"negative\", -1.5, -2.0),\n          (\"integer\", 1, 1.0),\n          (\"large fraction\", 1.6, 1),\n      ])\n      def test_floor(self, name, input, expected):\n          assert_equal(math.floor(input), expected)\n\n   @parameterized_class(('a', 'b', 'expected_sum', 'expected_product'), [\n      (1, 2, 3, 2),\n      (5, 5, 10, 25),\n   ])\n   class TestMathClass(unittest.TestCase):\n      def test_add(self):\n         assert_equal(self.a + self.b, self.expected_sum)\n\n      def test_multiply(self):\n         assert_equal(self.a * self.b, self.expected_product)\n\n   @parameterized_class([\n      { \"a\": 3, \"expected\": 2 },\n      { \"b\": 5, \"expected\": -4 },\n   ])\n   class TestMathClassDict(unittest.TestCase):\n      a = 1\n      b = 1\n\n      def test_subtract(self):\n         assert_equal(self.a - self.b, self.expected)\n\n\nWith nose (and nose2)::\n\n    $ nosetests -v test_math.py\n    test_floor_0_negative (test_math.TestMathUnitTest) ... ok\n    test_floor_1_integer (test_math.TestMathUnitTest) ... ok\n    test_floor_2_large_fraction (test_math.TestMathUnitTest) ... ok\n    test_math.test_pow(2, 2, 4, {}) ... ok\n    test_math.test_pow(2, 3, 8, {}) ... ok\n    test_math.test_pow(1, 9, 1, {}) ... ok\n    test_math.test_pow(0, 9, 0, {}) ... ok\n    test_add (test_math.TestMathClass_0) ... ok\n    test_multiply (test_math.TestMathClass_0) ... ok\n    test_add (test_math.TestMathClass_1) ... ok\n    test_multiply (test_math.TestMathClass_1) ... ok\n    test_subtract (test_math.TestMathClassDict_0) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 12 tests in 0.015s\n\n    OK\n\nAs the package name suggests, nose is best supported and will be used for all\nfurther examples.\n\n\nWith py.test (version 2.0 and above)::\n\n    $ py.test -v test_math.py\n    ============================= test session starts ==============================\n    platform darwin -- Python 3.6.1, pytest-3.1.3, py-1.4.34, pluggy-0.4.0\n    collecting ... collected 13 items\n\n    test_math.py::test_pow::[0] PASSED\n    test_math.py::test_pow::[1] PASSED\n    test_math.py::test_pow::[2] PASSED\n    test_math.py::test_pow::[3] PASSED\n    test_math.py::TestMathUnitTest::test_floor_0_negative PASSED\n    test_math.py::TestMathUnitTest::test_floor_1_integer PASSED\n    test_math.py::TestMathUnitTest::test_floor_2_large_fraction PASSED\n    test_math.py::TestMathClass_0::test_add PASSED\n    test_math.py::TestMathClass_0::test_multiply PASSED\n    test_math.py::TestMathClass_1::test_add PASSED\n    test_math.py::TestMathClass_1::test_multiply PASSED\n    test_math.py::TestMathClassDict_0::test_subtract PASSED\n    ==================== 12 passed, 4 warnings in 0.16 seconds =====================\n\nWith unittest (and unittest2)::\n\n    $ python -m unittest -v test_math\n    test_floor_0_negative (test_math.TestMathUnitTest) ... ok\n    test_floor_1_integer (test_math.TestMathUnitTest) ... ok\n    test_floor_2_large_fraction (test_math.TestMathUnitTest) ... ok\n    test_add (test_math.TestMathClass_0) ... ok\n    test_multiply (test_math.TestMathClass_0) ... ok\n    test_add (test_math.TestMathClass_1) ... ok\n    test_multiply (test_math.TestMathClass_1) ... ok\n    test_subtract (test_math.TestMathClassDict_0) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 8 tests in 0.001s\n\n    OK\n\n(note: because unittest does not support test decorators, only tests created\nwith ``@parameterized.expand`` will be executed)\n\nWith green::\n\n    $ green test_math.py -vvv\n    test_math\n      TestMathClass_1\n    .   test_method_a\n    .   test_method_b\n      TestMathClass_2\n    .   test_method_a\n    .   test_method_b\n      TestMathClass_3\n    .   test_method_a\n    .   test_method_b\n      TestMathUnitTest\n    .   test_floor_0_negative\n    .   test_floor_1_integer\n    .   test_floor_2_large_fraction\n      TestMathClass_0\n    .   test_add\n    .   test_multiply\n      TestMathClass_1\n    .   test_add\n    .   test_multiply\n      TestMathClassDict_0\n    .   test_subtract\n\n    Ran 12 tests in 0.121s\n\n    OK (passes=9)\n\n\nInstallation\n------------\n\n::\n\n    $ pip install parameterized\n\n\nCompatibility\n-------------\n\n`Yes`__ (mostly).\n\n__ https://travis-ci.org/wolever/parameterized\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * -\n     - Py2.6\n     - Py2.7\n     - Py3.4\n     - Py3.5\n     - Py3.6\n     - Py3.7\n     - Py3.8\n     - Py3.9\n     - PyPy\n     - ``@mock.patch``\n   * - nose\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n   * - nose2\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n   * - py.test 2\n     - yes\n     - yes\n     - no*\n     - no*\n     - no*\n     - no*\n     - yes\n     - yes\n     - yes\n     - yes\n   * - py.test 3\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n   * - py.test 4\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n   * - py.test fixtures\n     - no\u2020\n     - no\u2020\n     - no\u2020\n     - no\u2020\n     - no\u2020\n     - no\u2020\n     - no\u2020\n     - no\u2020\n     - no\u2020\n     - no\u2020\n   * - | unittest\n       | (``@parameterized.expand``)\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n   * - | unittest2\n       | (``@parameterized.expand``)\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n\n\\*: py.test 2 does `does not appear to work (#71)`__ under Python 3. Please comment on the related issues if you are affected.\n\n\\*\\*: py.test 4 is not yet supported (but coming!) in `issue #34`__\n\n\u2020: py.test fixture support is documented in `issue #81`__\n\n__ https://github.com/wolever/parameterized/issues/71\n__ https://github.com/wolever/parameterized/issues/34\n__ https://github.com/wolever/parameterized/issues/81\n\nDependencies\n------------\n\n(this section left intentionally blank)\n\n\nExhaustive Usage Examples\n--------------------------\n\nThe ``@parameterized`` and ``@parameterized.expand`` decorators accept a list\nor iterable of tuples or ``param(...)``, or a callable which returns a list or\niterable:\n\n.. code:: python\n\n    from parameterized import parameterized, param\n\n    # A list of tuples\n    @parameterized([\n        (2, 3, 5),\n        (3, 5, 8),\n    ])\n    def test_add(a, b, expected):\n        assert_equal(a + b, expected)\n\n    # A list of params\n    @parameterized([\n        param(\"10\", 10),\n        param(\"10\", 16, base=16),\n    ])\n    def test_int(str_val, expected, base=10):\n        assert_equal(int(str_val, base=base), expected)\n\n    # An iterable of params\n    @parameterized(\n        param.explicit(*json.loads(line))\n        for line in open(\"testcases.jsons\")\n    )\n    def test_from_json_file(...):\n        ...\n\n    # A callable which returns a list of tuples\n    def load_test_cases():\n        return [\n            (\"test1\", ),\n            (\"test2\", ),\n        ]\n    @parameterized(load_test_cases)\n    def test_from_function(name):\n        ...\n\n.. **\n\nNote that, when using an iterator or a generator, all the items will be loaded\ninto memory before the start of the test run (we do this explicitly to ensure\nthat generators are exhausted exactly once in multi-process or multi-threaded\ntesting environments).\n\nThe ``@parameterized`` decorator can be used test class methods, and standalone\nfunctions:\n\n.. code:: python\n\n    from parameterized import parameterized\n\n    class AddTest(object):\n        @parameterized([\n            (2, 3, 5),\n        ])\n        def test_add(self, a, b, expected):\n            assert_equal(a + b, expected)\n\n    @parameterized([\n        (2, 3, 5),\n    ])\n    def test_add(a, b, expected):\n        assert_equal(a + b, expected)\n\n\nAnd ``@parameterized.expand`` can be used to generate test methods in\nsituations where test generators cannot be used (for example, when the test\nclass is a subclass of ``unittest.TestCase``):\n\n.. code:: python\n\n    import unittest\n    from parameterized import parameterized\n\n    class AddTestCase(unittest.TestCase):\n        @parameterized.expand([\n            (\"2 and 3\", 2, 3, 5),\n            (\"3 and 5\", 2, 3, 5),\n        ])\n        def test_add(self, _, a, b, expected):\n            assert_equal(a + b, expected)\n\nWill create the test cases::\n\n    $ nosetests example.py\n    test_add_0_2_and_3 (example.AddTestCase) ... ok\n    test_add_1_3_and_5 (example.AddTestCase) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 2 tests in 0.001s\n\n    OK\n\nNote that ``@parameterized.expand`` works by creating new methods on the test\nclass. If the first parameter is a string, that string will be added to the end\nof the method name. For example, the test case above will generate the methods\n``test_add_0_2_and_3`` and ``test_add_1_3_and_5``.\n\nThe names of the test cases generated by ``@parameterized.expand`` can be\ncustomized using the ``name_func`` keyword argument. The value should\nbe a function which accepts three arguments: ``testcase_func``, ``param_num``,\nand ``params``, and it should return the name of the test case.\n``testcase_func`` will be the function to be tested, ``param_num`` will be the\nindex of the test case parameters in the list of parameters, and ``param``\n(an instance of ``param``) will be the parameters which will be used.\n\n.. code:: python\n\n    import unittest\n    from parameterized import parameterized\n\n    def custom_name_func(testcase_func, param_num, param):\n        return \"%s_%s\" %(\n            testcase_func.__name__,\n            parameterized.to_safe_name(\"_\".join(str(x) for x in param.args)),\n        )\n\n    class AddTestCase(unittest.TestCase):\n        @parameterized.expand([\n            (2, 3, 5),\n            (2, 3, 5),\n        ], name_func=custom_name_func)\n        def test_add(self, a, b, expected):\n            assert_equal(a + b, expected)\n\nWill create the test cases::\n\n    $ nosetests example.py\n    test_add_1_2_3 (example.AddTestCase) ... ok\n    test_add_2_3_5 (example.AddTestCase) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 2 tests in 0.001s\n\n    OK\n\n\nThe ``param(...)`` helper class stores the parameters for one specific test\ncase.  It can be used to pass keyword arguments to test cases:\n\n.. code:: python\n\n    from parameterized import parameterized, param\n\n    @parameterized([\n        param(\"10\", 10),\n        param(\"10\", 16, base=16),\n    ])\n    def test_int(str_val, expected, base=10):\n        assert_equal(int(str_val, base=base), expected)\n\n\nIf test cases have a docstring, the parameters for that test case will be\nappended to the first line of the docstring. This behavior can be controlled\nwith the ``doc_func`` argument:\n\n.. code:: python\n\n    from parameterized import parameterized\n\n    @parameterized([\n        (1, 2, 3),\n        (4, 5, 9),\n    ])\n    def test_add(a, b, expected):\n        \"\"\" Test addition. \"\"\"\n        assert_equal(a + b, expected)\n\n    def my_doc_func(func, num, param):\n        return \"%s: %s with %s\" %(num, func.__name__, param)\n\n    @parameterized([\n        (5, 4, 1),\n        (9, 6, 3),\n    ], doc_func=my_doc_func)\n    def test_subtraction(a, b, expected):\n        assert_equal(a - b, expected)\n\n::\n\n    $ nosetests example.py\n    Test addition. [with a=1, b=2, expected=3] ... ok\n    Test addition. [with a=4, b=5, expected=9] ... ok\n    0: test_subtraction with param(*(5, 4, 1)) ... ok\n    1: test_subtraction with param(*(9, 6, 3)) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 4 tests in 0.001s\n\n    OK\n\nFinally ``@parameterized_class`` parameterizes an entire class, using\neither a list of attributes, or a list of dicts that will be applied to the\nclass:\n\n.. code:: python\n\n    from yourapp.models import User\n    from parameterized import parameterized_class\n\n    @parameterized_class([\n       { \"username\": \"user_1\", \"access_level\": 1 },\n       { \"username\": \"user_2\", \"access_level\": 2, \"expected_status_code\": 404 },\n    ])\n    class TestUserAccessLevel(TestCase):\n       expected_status_code = 200\n\n       def setUp(self):\n          self.client.force_login(User.objects.get(username=self.username)[0])\n\n       def test_url_a(self):\n          response = self.client.get('/url')\n          self.assertEqual(response.status_code, self.expected_status_code)\n\n       def tearDown(self):\n          self.client.logout()\n\n\n    @parameterized_class((\"username\", \"access_level\", \"expected_status_code\"), [\n       (\"user_1\", 1, 200),\n       (\"user_2\", 2, 404)\n    ])\n    class TestUserAccessLevel(TestCase):\n       def setUp(self):\n          self.client.force_login(User.objects.get(username=self.username)[0])\n\n       def test_url_a(self):\n          response = self.client.get(\"/url\")\n          self.assertEqual(response.status_code, self.expected_status_code)\n\n       def tearDown(self):\n          self.client.logout()\n\n\nThe ``@parameterized_class`` decorator accepts a ``class_name_func`` argument,\nwhich controls the name of the parameterized classes generated by\n``@parameterized_class``:\n\n.. code:: python\n\n    from parameterized import parameterized, parameterized_class\n\n    def get_class_name(cls, num, params_dict):\n        # By default the generated class named includes either the \"name\"\n        # parameter (if present), or the first string value. This example shows\n        # multiple parameters being included in the generated class name:\n        return \"%s_%s_%s%s\" %(\n            cls.__name__,\n            num,\n            parameterized.to_safe_name(params_dict['a']),\n            parameterized.to_safe_name(params_dict['b']),\n        )\n\n    @parameterized_class([\n       { \"a\": \"hello\", \"b\": \" world!\", \"expected\": \"hello world!\" },\n       { \"a\": \"say \", \"b\": \" cheese :)\", \"expected\": \"say cheese :)\" },\n    ], class_name_func=get_class_name)\n    class TestConcatenation(TestCase):\n      def test_concat(self):\n          self.assertEqual(self.a + self.b, self.expected)\n\n::\n\n    $ nosetests -v test_math.py\n    test_concat (test_concat.TestConcatenation_0_hello_world_) ... ok\n    test_concat (test_concat.TestConcatenation_0_say_cheese__) ... ok\n\n\n\nUsing with Single Parameters\n............................\n\nIf a test function only accepts one parameter and the value is not iterable,\nthen it is possible to supply a list of values without wrapping each one in a\ntuple:\n\n.. code:: python\n\n   @parameterized([1, 2, 3])\n   def test_greater_than_zero(value):\n      assert value > 0\n\nNote, however, that if the single parameter *is* iterable (such as a list or\ntuple), then it *must* be wrapped in a tuple, list, or the ``param(...)``\nhelper:\n\n.. code:: python\n\n   @parameterized([\n      ([1, 2, 3], ),\n      ([3, 3], ),\n      ([6], ),\n   ])\n   def test_sums_to_6(numbers):\n      assert sum(numbers) == 6\n\n(note, also, that Python requires single element tuples to be defined with a\ntrailing comma: ``(foo, )``)\n\n\nUsing with ``@mock.patch``\n..........................\n\n``parameterized`` can be used with ``mock.patch``, but the argument ordering\ncan be confusing. The ``@mock.patch(...)`` decorator must come *below* the\n``@parameterized(...)``, and the mocked parameters must come *last*:\n\n.. code:: python\n\n   @mock.patch(\"os.getpid\")\n   class TestOS(object):\n      @parameterized(...)\n      @mock.patch(\"os.fdopen\")\n      @mock.patch(\"os.umask\")\n      def test_method(self, param1, param2, ..., mock_umask, mock_fdopen, mock_getpid):\n         ...\n\nNote: the same holds true when using ``@parameterized.expand``.\n\n\nMigrating from ``nose-parameterized`` to ``parameterized``\n----------------------------------------------------------\n\nTo migrate a codebase from ``nose-parameterized`` to ``parameterized``:\n\n1. Update your requirements file, replacing ``nose-parameterized`` with\n   ``parameterized``.\n\n2. Replace all references to ``nose_parameterized`` with ``parameterized``::\n\n    $ perl -pi -e 's/nose_parameterized/parameterized/g' your-codebase/\n\n3. You're done!\n\n\nFAQ\n---\n\nWhat happened to ``nose-parameterized``?\n    Originally only nose was supported. But now everything is supported, and it\n    only made sense to change the name!\n\nWhat do you mean when you say \"nose is best supported\"?\n    There are small caveates with ``py.test`` and ``unittest``: ``py.test``\n    does not show the parameter values (ex, it will show ``test_add[0]``\n    instead of ``test_add[1, 2, 3]``), and ``unittest``/``unittest2`` do not\n    support test generators so ``@parameterized.expand`` must be used.\n\nWhy not use ``@pytest.mark.parametrize``?\n    Because spelling is difficult. Also, ``parameterized`` doesn't require you\n    to repeat argument names, and (using ``param``) it supports optional\n    keyword arguments.\n\nWhy do I get an ``AttributeError: 'function' object has no attribute 'expand'`` with ``@parameterized.expand``?\n    You've likely installed the ``parametrized`` (note the missing *e*)\n    package. Use ``parameterized`` (with the *e*) instead and you'll be all\n    set.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wolever/parameterized", "keywords": "", "license": "FreeBSD", "maintainer": "", "maintainer_email": "", "name": "parameterized", "package_url": "https://pypi.org/project/parameterized/", "platform": "", "project_url": "https://pypi.org/project/parameterized/", "project_urls": {"Homepage": "https://github.com/wolever/parameterized"}, "release_url": "https://pypi.org/project/parameterized/0.7.4/", "requires_dist": null, "requires_python": "", "summary": "Parameterized testing with any Python test framework", "version": "0.7.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/parameterized/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4e93afac2967aab6eb96d8fdaa69e8e1399faf0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706172616d65746572697a65642e737667\"></a>\n<a href=\"https://circleci.com/gh/wolever/parameterized\" rel=\"nofollow\"><img alt=\"Circle CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17cee1b5e8769ed752c39205e532441d579e3773/68747470733a2f2f636972636c6563692e636f6d2f67682f776f6c657665722f706172616d65746572697a65642e7376673f7374796c653d737667\"></a>\n<p>Parameterized testing in Python sucks.</p>\n<p><tt>parameterized</tt> fixes that. For everything. Parameterized testing for nose,\nparameterized testing for py.test, parameterized testing for unittest.</p>\n<pre><span class=\"c1\"># test_math.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nose.tools</span> <span class=\"kn\">import</span> <span class=\"n\">assert_equal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized</span><span class=\"p\">,</span> <span class=\"n\">parameterized_class</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n<span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_pow</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">exponent</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n   <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">exponent</span><span class=\"p\">),</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestMathUnitTest</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n   <span class=\"nd\">@parameterized</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">([</span>\n       <span class=\"p\">(</span><span class=\"s2\">\"negative\"</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.0</span><span class=\"p\">),</span>\n       <span class=\"p\">(</span><span class=\"s2\">\"integer\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">),</span>\n       <span class=\"p\">(</span><span class=\"s2\">\"large fraction\"</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n   <span class=\"p\">])</span>\n   <span class=\"k\">def</span> <span class=\"nf\">test_floor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n       <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">),</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@parameterized_class</span><span class=\"p\">((</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'expected_sum'</span><span class=\"p\">,</span> <span class=\"s1\">'expected_product'</span><span class=\"p\">),</span> <span class=\"p\">[</span>\n   <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n   <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestMathClass</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n   <span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expected_sum</span><span class=\"p\">)</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">test_multiply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expected_product</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@parameterized_class</span><span class=\"p\">([</span>\n   <span class=\"p\">{</span> <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">\"expected\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span>\n   <span class=\"p\">{</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"expected\"</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">4</span> <span class=\"p\">},</span>\n<span class=\"p\">])</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestMathClassDict</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n   <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n   <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">test_subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expected</span><span class=\"p\">)</span>\n</pre>\n<p>With nose (and nose2):</p>\n<pre>$ nosetests -v test_math.py\ntest_floor_0_negative (test_math.TestMathUnitTest) ... ok\ntest_floor_1_integer (test_math.TestMathUnitTest) ... ok\ntest_floor_2_large_fraction (test_math.TestMathUnitTest) ... ok\ntest_math.test_pow(2, 2, 4, {}) ... ok\ntest_math.test_pow(2, 3, 8, {}) ... ok\ntest_math.test_pow(1, 9, 1, {}) ... ok\ntest_math.test_pow(0, 9, 0, {}) ... ok\ntest_add (test_math.TestMathClass_0) ... ok\ntest_multiply (test_math.TestMathClass_0) ... ok\ntest_add (test_math.TestMathClass_1) ... ok\ntest_multiply (test_math.TestMathClass_1) ... ok\ntest_subtract (test_math.TestMathClassDict_0) ... ok\n\n----------------------------------------------------------------------\nRan 12 tests in 0.015s\n\nOK\n</pre>\n<p>As the package name suggests, nose is best supported and will be used for all\nfurther examples.</p>\n<p>With py.test (version 2.0 and above):</p>\n<pre>$ py.test -v test_math.py\n============================= test session starts ==============================\nplatform darwin -- Python 3.6.1, pytest-3.1.3, py-1.4.34, pluggy-0.4.0\ncollecting ... collected 13 items\n\ntest_math.py::test_pow::[0] PASSED\ntest_math.py::test_pow::[1] PASSED\ntest_math.py::test_pow::[2] PASSED\ntest_math.py::test_pow::[3] PASSED\ntest_math.py::TestMathUnitTest::test_floor_0_negative PASSED\ntest_math.py::TestMathUnitTest::test_floor_1_integer PASSED\ntest_math.py::TestMathUnitTest::test_floor_2_large_fraction PASSED\ntest_math.py::TestMathClass_0::test_add PASSED\ntest_math.py::TestMathClass_0::test_multiply PASSED\ntest_math.py::TestMathClass_1::test_add PASSED\ntest_math.py::TestMathClass_1::test_multiply PASSED\ntest_math.py::TestMathClassDict_0::test_subtract PASSED\n==================== 12 passed, 4 warnings in 0.16 seconds =====================\n</pre>\n<p>With unittest (and unittest2):</p>\n<pre>$ python -m unittest -v test_math\ntest_floor_0_negative (test_math.TestMathUnitTest) ... ok\ntest_floor_1_integer (test_math.TestMathUnitTest) ... ok\ntest_floor_2_large_fraction (test_math.TestMathUnitTest) ... ok\ntest_add (test_math.TestMathClass_0) ... ok\ntest_multiply (test_math.TestMathClass_0) ... ok\ntest_add (test_math.TestMathClass_1) ... ok\ntest_multiply (test_math.TestMathClass_1) ... ok\ntest_subtract (test_math.TestMathClassDict_0) ... ok\n\n----------------------------------------------------------------------\nRan 8 tests in 0.001s\n\nOK\n</pre>\n<p>(note: because unittest does not support test decorators, only tests created\nwith <tt>@parameterized.expand</tt> will be executed)</p>\n<p>With green:</p>\n<pre>$ green test_math.py -vvv\ntest_math\n  TestMathClass_1\n.   test_method_a\n.   test_method_b\n  TestMathClass_2\n.   test_method_a\n.   test_method_b\n  TestMathClass_3\n.   test_method_a\n.   test_method_b\n  TestMathUnitTest\n.   test_floor_0_negative\n.   test_floor_1_integer\n.   test_floor_2_large_fraction\n  TestMathClass_0\n.   test_add\n.   test_multiply\n  TestMathClass_1\n.   test_add\n.   test_multiply\n  TestMathClassDict_0\n.   test_subtract\n\nRan 12 tests in 0.121s\n\nOK (passes=9)\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install parameterized\n</pre>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p><a href=\"https://travis-ci.org/wolever/parameterized\" rel=\"nofollow\">Yes</a> (mostly).</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>\u00a0</th>\n<th>Py2.6</th>\n<th>Py2.7</th>\n<th>Py3.4</th>\n<th>Py3.5</th>\n<th>Py3.6</th>\n<th>Py3.7</th>\n<th>Py3.8</th>\n<th>Py3.9</th>\n<th>PyPy</th>\n<th><tt>@mock.patch</tt></th>\n</tr>\n</thead>\n<tbody>\n<tr><th>nose</th>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr><th>nose2</th>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr><th>py.test 2</th>\n<td>yes</td>\n<td>yes</td>\n<td>no*</td>\n<td>no*</td>\n<td>no*</td>\n<td>no*</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr><th>py.test 3</th>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr><th>py.test 4</th>\n<td>no**</td>\n<td>no**</td>\n<td>no**</td>\n<td>no**</td>\n<td>no**</td>\n<td>no**</td>\n<td>no**</td>\n<td>no**</td>\n<td>no**</td>\n<td>no**</td>\n</tr>\n<tr><th>py.test fixtures</th>\n<td>no\u2020</td>\n<td>no\u2020</td>\n<td>no\u2020</td>\n<td>no\u2020</td>\n<td>no\u2020</td>\n<td>no\u2020</td>\n<td>no\u2020</td>\n<td>no\u2020</td>\n<td>no\u2020</td>\n<td>no\u2020</td>\n</tr>\n<tr><th><div>\n<div>unittest</div>\n<div>(<tt>@parameterized.expand</tt>)</div>\n</div>\n</th>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr><th><div>\n<div>unittest2</div>\n<div>(<tt>@parameterized.expand</tt>)</div>\n</div>\n</th>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n<p>*: py.test 2 does <a href=\"https://github.com/wolever/parameterized/issues/71\" rel=\"nofollow\">does not appear to work (#71)</a> under Python 3. Please comment on the related issues if you are affected.</p>\n<p>**: py.test 4 is not yet supported (but coming!) in <a href=\"https://github.com/wolever/parameterized/issues/34\" rel=\"nofollow\">issue #34</a></p>\n<p>\u2020: py.test fixture support is documented in <a href=\"https://github.com/wolever/parameterized/issues/81\" rel=\"nofollow\">issue #81</a></p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>(this section left intentionally blank)</p>\n</div>\n<div id=\"exhaustive-usage-examples\">\n<h2>Exhaustive Usage Examples</h2>\n<p>The <tt>@parameterized</tt> and <tt>@parameterized.expand</tt> decorators accept a list\nor iterable of tuples or <tt><span class=\"pre\">param(...)</span></tt>, or a callable which returns a list or\niterable:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized</span><span class=\"p\">,</span> <span class=\"n\">param</span>\n\n<span class=\"c1\"># A list of tuples</span>\n<span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n    <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># A list of params</span>\n<span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n    <span class=\"n\">param</span><span class=\"p\">(</span><span class=\"s2\">\"10\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n    <span class=\"n\">param</span><span class=\"p\">(</span><span class=\"s2\">\"10\"</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_int</span><span class=\"p\">(</span><span class=\"n\">str_val</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">str_val</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"n\">base</span><span class=\"p\">),</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># An iterable of params</span>\n<span class=\"nd\">@parameterized</span><span class=\"p\">(</span>\n    <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">explicit</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"testcases.jsons\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_from_json_file</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># A callable which returns a list of tuples</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_test_cases</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">\"test1\"</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">\"test2\"</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n<span class=\"nd\">@parameterized</span><span class=\"p\">(</span><span class=\"n\">load_test_cases</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_from_function</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Note that, when using an iterator or a generator, all the items will be loaded\ninto memory before the start of the test run (we do this explicitly to ensure\nthat generators are exhausted exactly once in multi-process or multi-threaded\ntesting environments).</p>\n<p>The <tt>@parameterized</tt> decorator can be used test class methods, and standalone\nfunctions:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AddTest</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n        <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n    <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n</pre>\n<p>And <tt>@parameterized.expand</tt> can be used to generate test methods in\nsituations where test generators cannot be used (for example, when the test\nclass is a subclass of <tt>unittest.TestCase</tt>):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AddTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@parameterized</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s2\">\"2 and 3\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">\"3 and 5\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n        <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n</pre>\n<p>Will create the test cases:</p>\n<pre>$ nosetests example.py\ntest_add_0_2_and_3 (example.AddTestCase) ... ok\ntest_add_1_3_and_5 (example.AddTestCase) ... ok\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nOK\n</pre>\n<p>Note that <tt>@parameterized.expand</tt> works by creating new methods on the test\nclass. If the first parameter is a string, that string will be added to the end\nof the method name. For example, the test case above will generate the methods\n<tt>test_add_0_2_and_3</tt> and <tt>test_add_1_3_and_5</tt>.</p>\n<p>The names of the test cases generated by <tt>@parameterized.expand</tt> can be\ncustomized using the <tt>name_func</tt> keyword argument. The value should\nbe a function which accepts three arguments: <tt>testcase_func</tt>, <tt>param_num</tt>,\nand <tt>params</tt>, and it should return the name of the test case.\n<tt>testcase_func</tt> will be the function to be tested, <tt>param_num</tt> will be the\nindex of the test case parameters in the list of parameters, and <tt>param</tt>\n(an instance of <tt>param</tt>) will be the parameters which will be used.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">custom_name_func</span><span class=\"p\">(</span><span class=\"n\">testcase_func</span><span class=\"p\">,</span> <span class=\"n\">param_num</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">_</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span><span class=\"p\">(</span>\n        <span class=\"n\">testcase_func</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n        <span class=\"n\">parameterized</span><span class=\"o\">.</span><span class=\"n\">to_safe_name</span><span class=\"p\">(</span><span class=\"s2\">\"_\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AddTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@parameterized</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span> <span class=\"n\">name_func</span><span class=\"o\">=</span><span class=\"n\">custom_name_func</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n        <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n</pre>\n<p>Will create the test cases:</p>\n<pre>$ nosetests example.py\ntest_add_1_2_3 (example.AddTestCase) ... ok\ntest_add_2_3_5 (example.AddTestCase) ... ok\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nOK\n</pre>\n<p>The <tt><span class=\"pre\">param(...)</span></tt> helper class stores the parameters for one specific test\ncase.  It can be used to pass keyword arguments to test cases:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized</span><span class=\"p\">,</span> <span class=\"n\">param</span>\n\n<span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n    <span class=\"n\">param</span><span class=\"p\">(</span><span class=\"s2\">\"10\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n    <span class=\"n\">param</span><span class=\"p\">(</span><span class=\"s2\">\"10\"</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_int</span><span class=\"p\">(</span><span class=\"n\">str_val</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">str_val</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"n\">base</span><span class=\"p\">),</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n</pre>\n<p>If test cases have a docstring, the parameters for that test case will be\nappended to the first line of the docstring. This behavior can be controlled\nwith the <tt>doc_func</tt> argument:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized</span>\n\n<span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Test addition. \"\"\"</span>\n    <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_doc_func</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%s</span><span class=\"s2\"> with </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n<span class=\"p\">],</span> <span class=\"n\">doc_func</span><span class=\"o\">=</span><span class=\"n\">my_doc_func</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_subtraction</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n    <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n</pre>\n<pre>$ nosetests example.py\nTest addition. [with a=1, b=2, expected=3] ... ok\nTest addition. [with a=4, b=5, expected=9] ... ok\n0: test_subtraction with param(*(5, 4, 1)) ... ok\n1: test_subtraction with param(*(9, 6, 3)) ... ok\n\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nOK\n</pre>\n<p>Finally <tt>@parameterized_class</tt> parameterizes an entire class, using\neither a list of attributes, or a list of dicts that will be applied to the\nclass:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yourapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized_class</span>\n\n<span class=\"nd\">@parameterized_class</span><span class=\"p\">([</span>\n   <span class=\"p\">{</span> <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"access_level\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n   <span class=\"p\">{</span> <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user_2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"access_level\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"expected_status_code\"</span><span class=\"p\">:</span> <span class=\"mi\">404</span> <span class=\"p\">},</span>\n<span class=\"p\">])</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestUserAccessLevel</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n   <span class=\"n\">expected_status_code</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">force_login</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">test_url_a</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/url'</span><span class=\"p\">)</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expected_status_code</span><span class=\"p\">)</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">tearDown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@parameterized_class</span><span class=\"p\">((</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"access_level\"</span><span class=\"p\">,</span> <span class=\"s2\">\"expected_status_code\"</span><span class=\"p\">),</span> <span class=\"p\">[</span>\n   <span class=\"p\">(</span><span class=\"s2\">\"user_1\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span>\n   <span class=\"p\">(</span><span class=\"s2\">\"user_2\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestUserAccessLevel</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n   <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">force_login</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">test_url_a</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/url\"</span><span class=\"p\">)</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expected_status_code</span><span class=\"p\">)</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">tearDown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">()</span>\n</pre>\n<p>The <tt>@parameterized_class</tt> decorator accepts a <tt>class_name_func</tt> argument,\nwhich controls the name of the parameterized classes generated by\n<tt>@parameterized_class</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parameterized</span> <span class=\"kn\">import</span> <span class=\"n\">parameterized</span><span class=\"p\">,</span> <span class=\"n\">parameterized_class</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_class_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">params_dict</span><span class=\"p\">):</span>\n    <span class=\"c1\"># By default the generated class named includes either the \"name\"</span>\n    <span class=\"c1\"># parameter (if present), or the first string value. This example shows</span>\n    <span class=\"c1\"># multiple parameters being included in the generated class name:</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">_</span><span class=\"si\">%s</span><span class=\"s2\">_</span><span class=\"si\">%s%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n        <span class=\"n\">num</span><span class=\"p\">,</span>\n        <span class=\"n\">parameterized</span><span class=\"o\">.</span><span class=\"n\">to_safe_name</span><span class=\"p\">(</span><span class=\"n\">params_dict</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]),</span>\n        <span class=\"n\">parameterized</span><span class=\"o\">.</span><span class=\"n\">to_safe_name</span><span class=\"p\">(</span><span class=\"n\">params_dict</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nd\">@parameterized_class</span><span class=\"p\">([</span>\n   <span class=\"p\">{</span> <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"s2\">\" world!\"</span><span class=\"p\">,</span> <span class=\"s2\">\"expected\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hello world!\"</span> <span class=\"p\">},</span>\n   <span class=\"p\">{</span> <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"say \"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"s2\">\" cheese :)\"</span><span class=\"p\">,</span> <span class=\"s2\">\"expected\"</span><span class=\"p\">:</span> <span class=\"s2\">\"say cheese :)\"</span> <span class=\"p\">},</span>\n<span class=\"p\">],</span> <span class=\"n\">class_name_func</span><span class=\"o\">=</span><span class=\"n\">get_class_name</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestConcatenation</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">test_concat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expected</span><span class=\"p\">)</span>\n</pre>\n<pre>$ nosetests -v test_math.py\ntest_concat (test_concat.TestConcatenation_0_hello_world_) ... ok\ntest_concat (test_concat.TestConcatenation_0_say_cheese__) ... ok\n</pre>\n<div id=\"using-with-single-parameters\">\n<h3>Using with Single Parameters</h3>\n<p>If a test function only accepts one parameter and the value is not iterable,\nthen it is possible to supply a list of values without wrapping each one in a\ntuple:</p>\n<pre><span class=\"nd\">@parameterized</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_greater_than_zero</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n</pre>\n<p>Note, however, that if the single parameter <em>is</em> iterable (such as a list or\ntuple), then it <em>must</em> be wrapped in a tuple, list, or the <tt><span class=\"pre\">param(...)</span></tt>\nhelper:</p>\n<pre><span class=\"nd\">@parameterized</span><span class=\"p\">([</span>\n   <span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">),</span>\n   <span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">),</span>\n   <span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_sums_to_6</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">6</span>\n</pre>\n<p>(note, also, that Python requires single element tuples to be defined with a\ntrailing comma: <tt>(foo, )</tt>)</p>\n</div>\n<div id=\"using-with-mock-patch\">\n<h3>Using with <tt>@mock.patch</tt></h3>\n<p><tt>parameterized</tt> can be used with <tt>mock.patch</tt>, but the argument ordering\ncan be confusing. The <tt><span class=\"pre\">@mock.patch(...)</span></tt> decorator must come <em>below</em> the\n<tt><span class=\"pre\">@parameterized(...)</span></tt>, and the mocked parameters must come <em>last</em>:</p>\n<pre><span class=\"nd\">@mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s2\">\"os.getpid\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestOS</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n   <span class=\"nd\">@parameterized</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n   <span class=\"nd\">@mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s2\">\"os.fdopen\"</span><span class=\"p\">)</span>\n   <span class=\"nd\">@mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s2\">\"os.umask\"</span><span class=\"p\">)</span>\n   <span class=\"k\">def</span> <span class=\"nf\">test_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">param2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">mock_umask</span><span class=\"p\">,</span> <span class=\"n\">mock_fdopen</span><span class=\"p\">,</span> <span class=\"n\">mock_getpid</span><span class=\"p\">):</span>\n      <span class=\"o\">...</span>\n</pre>\n<p>Note: the same holds true when using <tt>@parameterized.expand</tt>.</p>\n</div>\n</div>\n<div id=\"migrating-from-nose-parameterized-to-parameterized\">\n<h2>Migrating from <tt><span class=\"pre\">nose-parameterized</span></tt> to <tt>parameterized</tt></h2>\n<p>To migrate a codebase from <tt><span class=\"pre\">nose-parameterized</span></tt> to <tt>parameterized</tt>:</p>\n<ol>\n<li><p>Update your requirements file, replacing <tt><span class=\"pre\">nose-parameterized</span></tt> with\n<tt>parameterized</tt>.</p>\n</li>\n<li><p>Replace all references to <tt>nose_parameterized</tt> with <tt>parameterized</tt>:</p>\n<pre>$ perl -pi -e 's/nose_parameterized/parameterized/g' your-codebase/\n</pre>\n</li>\n<li><p>You\u2019re done!</p>\n</li>\n</ol>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<dl>\n<dt>What happened to <tt><span class=\"pre\">nose-parameterized</span></tt>?</dt>\n<dd>Originally only nose was supported. But now everything is supported, and it\nonly made sense to change the name!</dd>\n<dt>What do you mean when you say \u201cnose is best supported\u201d?</dt>\n<dd>There are small caveates with <tt>py.test</tt> and <tt>unittest</tt>: <tt>py.test</tt>\ndoes not show the parameter values (ex, it will show <tt>test_add[0]</tt>\ninstead of <tt>test_add[1, 2, 3]</tt>), and <tt>unittest</tt>/<tt>unittest2</tt> do not\nsupport test generators so <tt>@parameterized.expand</tt> must be used.</dd>\n<dt>Why not use <tt>@pytest.mark.parametrize</tt>?</dt>\n<dd>Because spelling is difficult. Also, <tt>parameterized</tt> doesn\u2019t require you\nto repeat argument names, and (using <tt>param</tt>) it supports optional\nkeyword arguments.</dd>\n<dt>Why do I get an <tt>AttributeError: 'function' object has no attribute 'expand'</tt> with <tt>@parameterized.expand</tt>?</dt>\n<dd>You\u2019ve likely installed the <tt>parametrized</tt> (note the missing <em>e</em>)\npackage. Use <tt>parameterized</tt> (with the <em>e</em>) instead and you\u2019ll be all\nset.</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 7019009, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "22576412f8c6e2f9cbea3ddf4ec61dff", "sha256": "b783401b1206f5492f23f4c84f25f802a4abdeb7feb6c0afe72c2a460803cdfd"}, "downloads": -1, "filename": "parameterized-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "22576412f8c6e2f9cbea3ddf4ec61dff", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 15243, "upload_time": "2016-08-02T16:24:10", "upload_time_iso_8601": "2016-08-02T16:24:10.569378Z", "url": "https://files.pythonhosted.org/packages/8c/83/c3634ace68dc1b49a1eb4a16513818f921019ad5cc3830f000a1553a116c/parameterized-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1c1b61c7c87650258660a094bd2ae51", "sha256": "783069d1abc199f2c1c56d4b976f4f6df8848497e5f5dba5d47ad238e5e3ae59"}, "downloads": -1, "filename": "parameterized-0.5.0.tar.gz", "has_sig": false, "md5_digest": "e1c1b61c7c87650258660a094bd2ae51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11167, "upload_time": "2016-08-02T16:24:08", "upload_time_iso_8601": "2016-08-02T16:24:08.505144Z", "url": "https://files.pythonhosted.org/packages/1b/31/7802c3fc3a8b0f62faa36190f65b3f960987c20cd09795df35762796b823/parameterized-0.5.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "6cfbd1449971a8ec5caa4a171f367815", "sha256": "cf5fa4f295dfb823cebdb27a00566113f2fbb71c7d5ca7b7a1019fd20c8a0811"}, "downloads": -1, "filename": "parameterized-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6cfbd1449971a8ec5caa4a171f367815", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23029, "upload_time": "2017-03-21T17:19:11", "upload_time_iso_8601": "2017-03-21T17:19:11.188925Z", "url": "https://files.pythonhosted.org/packages/65/d4/b0b626eb263a4c2aa3ca3cd20ea3db410db837f7f6b5d3fc4a6c4bee3631/parameterized-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9dd0c5bf470fbaf92416e9165ea196c", "sha256": "caf58e717097735de0d7e15386a46ffa5ce25bb6a13a43716a8854a8d34841e2"}, "downloads": -1, "filename": "parameterized-0.6.1.tar.gz", "has_sig": false, "md5_digest": "e9dd0c5bf470fbaf92416e9165ea196c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14053, "upload_time": "2017-03-21T17:19:09", "upload_time_iso_8601": "2017-03-21T17:19:09.342359Z", "url": "https://files.pythonhosted.org/packages/77/b6/8c481344c63b3eadeaa26f62b9d7ce4221a52bad390da5f059573d4c7ee4/parameterized-0.6.1.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "1e61d4d8251c4aa73eb301f50bd1595b", "sha256": "938a66ba54f74671aeebf7ecf48e9da006c0e9b0e9502accef27e39a18f956c2"}, "downloads": -1, "filename": "parameterized-0.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e61d4d8251c4aa73eb301f50bd1595b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23106, "upload_time": "2019-01-22T17:40:43", "upload_time_iso_8601": "2019-01-22T17:40:43.175334Z", "url": "https://files.pythonhosted.org/packages/3a/49/75f6dadb09e2f8ace3cdffe0c99a04f1b98dff41fbf9e768665d8b469e29/parameterized-0.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd3a554efa6b1166a3bc2ec7ea65a8e4", "sha256": "e0cfe0cd293d9466aa0dd75cb0ca71f5a613bfa2c572652560c602a1e23ee0da"}, "downloads": -1, "filename": "parameterized-0.6.3.tar.gz", "has_sig": false, "md5_digest": "fd3a554efa6b1166a3bc2ec7ea65a8e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20107, "upload_time": "2019-01-22T17:40:41", "upload_time_iso_8601": "2019-01-22T17:40:41.547513Z", "url": "https://files.pythonhosted.org/packages/05/4f/1a68e90b6c1e3f7fea2c7549110a220c7e79b854eb5220e50bc1b0eed3d1/parameterized-0.6.3.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "5fe68a7bc1cde15f7a73bf86c2f31c37", "sha256": "020343a281efcfe9b71b9028a91817f981202c14d72104b5a2fbe401dee25a18"}, "downloads": -1, "filename": "parameterized-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5fe68a7bc1cde15f7a73bf86c2f31c37", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23550, "upload_time": "2019-02-06T03:43:36", "upload_time_iso_8601": "2019-02-06T03:43:36.504005Z", "url": "https://files.pythonhosted.org/packages/d6/9b/5830b778f213ada36528d1c54fdc0a67178e6edd7c44ed59074851ebb2e7/parameterized-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4c7408fffd7a16c2c0695dc8d588372", "sha256": "d8c8837fb677ed2d5a93b9e2308ce0da3aeb58cf513120d501e0b7af14da78d5"}, "downloads": -1, "filename": "parameterized-0.7.0.tar.gz", "has_sig": false, "md5_digest": "a4c7408fffd7a16c2c0695dc8d588372", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20751, "upload_time": "2019-02-06T03:43:34", "upload_time_iso_8601": "2019-02-06T03:43:34.959557Z", "url": "https://files.pythonhosted.org/packages/f0/b6/f5ff739d20fca065a7632916765bb2ec02f04217de25e18982876c310b09/parameterized-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "7c3ba201720b927d5b57035a4c01ae08", "sha256": "ea0326ba5bbbe7c427329a27b75003410df07d1173ca254976f8f5a64922c322"}, "downloads": -1, "filename": "parameterized-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7c3ba201720b927d5b57035a4c01ae08", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 24442, "upload_time": "2019-11-19T22:04:24", "upload_time_iso_8601": "2019-11-19T22:04:24.998953Z", "url": "https://files.pythonhosted.org/packages/a3/bf/6ef8239028beae8298e0806b4f79c2466b1b16ca5b85dc13d631c5ea92c4/parameterized-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3416f876209d3a70950e66f40a574a06", "sha256": "6a94dbea30c6abde99fd4c2f2042c1bf7f980e48908bf92ead62394f93cf57ed"}, "downloads": -1, "filename": "parameterized-0.7.1.tar.gz", "has_sig": false, "md5_digest": "3416f876209d3a70950e66f40a574a06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22365, "upload_time": "2019-11-19T22:04:22", "upload_time_iso_8601": "2019-11-19T22:04:22.840895Z", "url": "https://files.pythonhosted.org/packages/a8/22/966615469f8e72ee5840f3dc272781736998187cefd3a4679d3872051c4f/parameterized-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "40ce035a0663883dca416f6f8ba0ec34", "sha256": "ef3afe8ca8925e9fec9be2a0d3991f56b583e472df7d115672a41b716521dedb"}, "downloads": -1, "filename": "parameterized-0.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "40ce035a0663883dca416f6f8ba0ec34", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 24857, "upload_time": "2020-04-12T19:34:56", "upload_time_iso_8601": "2020-04-12T19:34:56.398677Z", "url": "https://files.pythonhosted.org/packages/79/25/2b891c4787dc12573723084947649013928799a68ff51d9ab38b88c94279/parameterized-0.7.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dae3f24f168be0ae093abf5e39137722", "sha256": "8ab3fad90cd2fb9b5656f59d7f2b8c25265363e659e60e40f64a5171fa55a502"}, "downloads": -1, "filename": "parameterized-0.7.2.tar.gz", "has_sig": false, "md5_digest": "dae3f24f168be0ae093abf5e39137722", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22554, "upload_time": "2020-04-12T19:34:54", "upload_time_iso_8601": "2020-04-12T19:34:54.440090Z", "url": "https://files.pythonhosted.org/packages/a6/b8/5eabacf934bcbc3b2cfd603c8b3fa471e15bba0077752ed23fa3b2d2cda5/parameterized-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "292238326dcd708716b03e241c6051fe", "sha256": "627500dd48f88a8363da2bcbda778e9fa65fad3e46f351ec0a3906c7e8ddebbe"}, "downloads": -1, "filename": "parameterized-0.7.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "292238326dcd708716b03e241c6051fe", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 24860, "upload_time": "2020-04-12T21:18:37", "upload_time_iso_8601": "2020-04-12T21:18:37.093011Z", "url": "https://files.pythonhosted.org/packages/ca/26/1a96898711d4516f6101f047d20790533c9f30fdb78db3115efe3ff2791b/parameterized-0.7.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c86706ddd11976fdfd4e20bcc77d15e", "sha256": "ede6e33b9658ad019772eaa8bfe538c575439c30fccb16e2d9d2aae98e35383c"}, "downloads": -1, "filename": "parameterized-0.7.3.tar.gz", "has_sig": false, "md5_digest": "0c86706ddd11976fdfd4e20bcc77d15e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22678, "upload_time": "2020-04-12T21:18:34", "upload_time_iso_8601": "2020-04-12T21:18:34.733166Z", "url": "https://files.pythonhosted.org/packages/34/6c/ce752bdfd134c0804940a0baeca7fd84d8a56b2afbb7c881d24dbedef70e/parameterized-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "19615247725a271c4bbdb4eda8b53cf1", "sha256": "59ab908e31c01505a987a2be78854e19cb1630c047bbab7848169c371d614d56"}, "downloads": -1, "filename": "parameterized-0.7.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "19615247725a271c4bbdb4eda8b53cf1", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 25115, "upload_time": "2020-04-14T17:59:46", "upload_time_iso_8601": "2020-04-14T17:59:46.867974Z", "url": "https://files.pythonhosted.org/packages/ba/6b/73dfed0ab5299070cf98451af50130989901f50de41fe85d605437a0210f/parameterized-0.7.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d92fa26ba2db7933a99276ad018a58a", "sha256": "190f8cc7230eee0b56b30d7f074fd4d165f7c45e6077582d0813c8557e738490"}, "downloads": -1, "filename": "parameterized-0.7.4.tar.gz", "has_sig": false, "md5_digest": "3d92fa26ba2db7933a99276ad018a58a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23389, "upload_time": "2020-04-14T17:59:43", "upload_time_iso_8601": "2020-04-14T17:59:43.636721Z", "url": "https://files.pythonhosted.org/packages/bc/ef/d6c26f40a7636f43a52c9719f9d8228f08e01187081e5891702ea0754060/parameterized-0.7.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19615247725a271c4bbdb4eda8b53cf1", "sha256": "59ab908e31c01505a987a2be78854e19cb1630c047bbab7848169c371d614d56"}, "downloads": -1, "filename": "parameterized-0.7.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "19615247725a271c4bbdb4eda8b53cf1", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 25115, "upload_time": "2020-04-14T17:59:46", "upload_time_iso_8601": "2020-04-14T17:59:46.867974Z", "url": "https://files.pythonhosted.org/packages/ba/6b/73dfed0ab5299070cf98451af50130989901f50de41fe85d605437a0210f/parameterized-0.7.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d92fa26ba2db7933a99276ad018a58a", "sha256": "190f8cc7230eee0b56b30d7f074fd4d165f7c45e6077582d0813c8557e738490"}, "downloads": -1, "filename": "parameterized-0.7.4.tar.gz", "has_sig": false, "md5_digest": "3d92fa26ba2db7933a99276ad018a58a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23389, "upload_time": "2020-04-14T17:59:43", "upload_time_iso_8601": "2020-04-14T17:59:43.636721Z", "url": "https://files.pythonhosted.org/packages/bc/ef/d6c26f40a7636f43a52c9719f9d8228f08e01187081e5891702ea0754060/parameterized-0.7.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:34 2020"}