{"info": {"author": "yukisato", "author_email": "yuki@yuki-sato.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# obniz.py: sdk for python\n\n[![image](https://img.shields.io/pypi/pyversions/obniz.svg)](https://pypi.org/project/obniz/)\n\n[obniz](https://obniz.io/) sdk for python.\nYou can use [obnizBoard](https://obniz.io/doc/obniz_board_hobby_90/hw_overview) or [obnizOS](https://obniz.io/doc/obnizos/os_overview).\n\nControl obniz from python.\n\nThis sdk works with [obniz api](https://obniz.io/doc/about_obniz_api).\n\nCompatible with **Python 3.6+**.\n\n<img src=\"https://object-storage.tyo1.conoha.io/v1/nc_35a49f4e51c74e35ad3493c52d37f63e/images/obniz-python-readme.gif\" width=\"100%\" />\n\n## Usage\n```py\n    import asyncio\n\n    from obniz import Obniz\n\n\n    async def onconnect(obniz):\n        obniz.io0.drive(\"5v\")\n        obniz.io0.output(True)\n        obniz.io1.pull(\"3v\")\n        obniz.io1.drive(\"open-drain\")\n        obniz.io1.output(False)\n        obniz.io2.drive(\"3v\")\n        obniz.io2.output(True)\n\n        def callback(voltage):\n            print(\"change to {} v\".format(voltage))\n\n        obniz.ad3.start(callback)\n\n        pwm = obniz.get_free_pwm()\n        pwm.start({\"io\": 4})\n        pwm.freq(1000)\n        pwm.duty(50)\n\n        uart = obniz.getFreeUart()\n        uart.start({\"tx\": 5, \"rx\": 6, \"baud\": 9600})\n\n        def onreceive(data, text):\n            print(data)\n\n        uart.onreceive = onreceive\n\n        uart.send(\"Hello\")\n\n\n    obniz = Obniz('0000-0000')\n    obniz.onconnect = onconnect\n\n    asyncio.get_event_loop().run_forever()\n```\n\n## Installation\n\nInstall obniz via pip\n```shell\n  pip install obniz\n```\nand import it on python file.\n```python\n  from obniz import Obniz\n```\n\n## Connect\n\nDetails on [doc/connection](https://obniz.io/doc/sdk/doc/connection)\n\nTo use obniz, instantiate obniz with obniz id. and set onconnect callback function. It will be called when connected to obniz successfully.\n```python\n    import asyncio\n\n\n    async def onconnect(obniz):\n        pass\n\n\n    obniz = Obniz('0000-0000')\n    obniz.onconnect = onconnect\n\n    asyncio.get_event_loop().run_forever()\n```\n\nYou are able to use everything on obniz after connect.\n```python\n    async def onconnect(obniz):\n        obniz.io0.drive(\"5v\")\n        obniz.io0.output(True)\n        obniz.io1.pull(\"3v\")\n        obniz.io1.drive(\"open-drain\")\n        obniz.io1.output(False)\n        obniz.io2.drive(\"3v\")\n        obniz.io2.output(True)\n\n        def callback(voltage):\n            print(\"change to {} v\".format(voltage))\n\n        obniz.ad3.start(callback)\n\n        pwm = obniz.get_free_pwm()\n        pwm.start({\"io\": 4})\n        pwm.freq(1000)\n        pwm.duty(50)\n\n        uart = obniz.getFreeUart()\n        uart.start({\"tx\": 5, \"rx\": 6, \"baud\": 9600})\n\n        def onreceive(data, text):\n            print(data)\n\n        uart.onreceive = onreceive\n\n        uart.send(\"Hello\")\n```\n\n## Example\nEasy to integrate python libraries like TensorFlow.\n(need to install `tensorflow` and `opencv-python`)\n```py\n    import asyncio\n\n    from obniz import Obniz\n\n    import cv2\n    import numpy as np\n    import tensorflow as tf\n    from tensorflow import keras\n\n    class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n                'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\n    fashion_mnist = keras.datasets.fashion_mnist\n\n    (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n\n    train_images = train_images / 255.0\n\n    test_images = test_images / 255.0\n\n    model = keras.Sequential([\n        keras.layers.Flatten(input_shape=(28, 28)),\n        keras.layers.Dense(128, activation=tf.nn.relu),\n        keras.layers.Dense(10, activation=tf.nn.softmax)\n    ])\n\n    model.compile(optimizer=tf.train.AdamOptimizer(),\n                loss='sparse_categorical_crossentropy',\n                metrics=['accuracy'])\n\n    model.fit(train_images, train_labels, epochs=5)\n\n    test_loss, test_acc = model.evaluate(test_images, test_labels)\n\n    print('Test accuracy:', test_acc)\n\n    def set_angle(pwm, angle):\n        max = 2.4\n        min = 0.5\n        val = ((max - min) * angle) / 180.0 + min\n        pwm.pulse(val)\n\n\n    async def onconnect(obniz):\n        obniz.io0.output(False)\n        obniz.io1.output(True)\n\n        pwm = obniz.get_free_pwm()\n        pwm.start({\"io\": 2})\n        pwm.freq(50)\n\n        cap = cv2.VideoCapture(0)\n\n        prev = None\n\n        while True:\n            ret, frame = cap.read()\n\n            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n            ret, frame = cv2.threshold(frame, 127, 255, cv2.THRESH_BINARY_INV)\n\n            height, width = frame.shape\n            x = height if height < width else width\n            y = height if height < width else width\n            square= np.zeros((x, y), np.uint8)\n\n            x1 = int((width-x)/2)\n            x2 = int(width-(width-x)/2)\n            y1 = int((height-y)/2)\n            y2 = int(height-(height-y)/2)\n            square = frame[y1:y2, x1:x2]\n\n            cv2.imshow(\"frame\", square)\n\n            img = cv2.resize(square, (28, 28), interpolation = cv2.INTER_AREA)\n\n            img = (np.expand_dims(img / 255.0, 0))\n\n            predictions_single = model.predict(img)\n\n            answer = np.argmax(predictions_single[0])\n\n            if prev != answer:\n                print(\"answer: {}\".format(class_names[answer]))\n                set_angle(pwm, answer / 9 * 180)\n\n            prev = answer\n\n            if cv2.waitKey(1) & 0xFF == ord('q'):\n                asyncio.get_event_loop().stop()\n                break\n\n            await asyncio.sleep(0.1)\n\n        cap.release()\n        cv2.destroyAllWindows()\n\n    obniz = Obniz('0000-0000')\n    obniz.debugprint = True\n    obniz.onconnect = onconnect\n\n    asyncio.get_event_loop().run_forever()\n```\n\n## Documentation\nYou can find the documentation on [the website](https://obniz.io/doc/).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://obniz.io/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "obniz", "package_url": "https://pypi.org/project/obniz/", "platform": "", "project_url": "https://pypi.org/project/obniz/", "project_urls": {"Homepage": "https://obniz.io/"}, "release_url": "https://pypi.org/project/obniz/0.6.0/", "requires_dist": ["pyee (==6.0.0)", "websockets (==7.0)", "attrdict (==2.0.1)", "semver (==2.8.1)"], "requires_python": "", "summary": "obniz sdk for python", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>obniz.py: sdk for python</h1>\n<p><a href=\"https://pypi.org/project/obniz/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6083d42037217b787d95ff09ef9352b9697236b6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6f626e697a2e737667\"></a></p>\n<p><a href=\"https://obniz.io/\" rel=\"nofollow\">obniz</a> sdk for python.\nYou can use <a href=\"https://obniz.io/doc/obniz_board_hobby_90/hw_overview\" rel=\"nofollow\">obnizBoard</a> or <a href=\"https://obniz.io/doc/obnizos/os_overview\" rel=\"nofollow\">obnizOS</a>.</p>\n<p>Control obniz from python.</p>\n<p>This sdk works with <a href=\"https://obniz.io/doc/about_obniz_api\" rel=\"nofollow\">obniz api</a>.</p>\n<p>Compatible with <strong>Python 3.6+</strong>.</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a75d6b614436e940c73198915f1eb34eebe30983/68747470733a2f2f6f626a6563742d73746f726167652e74796f312e636f6e6f68612e696f2f76312f6e635f33356134396634653531633734653335616433343933633532643337663633652f696d616765732f6f626e697a2d707974686f6e2d726561646d652e676966\" width=\"100%\">\n<h2>Usage</h2>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">obniz</span> <span class=\"kn\">import</span> <span class=\"n\">Obniz</span>\n\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">onconnect</span><span class=\"p\">(</span><span class=\"n\">obniz</span><span class=\"p\">):</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io0</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"p\">(</span><span class=\"s2\">\"5v\"</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io0</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io1</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">(</span><span class=\"s2\">\"3v\"</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io1</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"p\">(</span><span class=\"s2\">\"open-drain\"</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io1</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io2</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"p\">(</span><span class=\"s2\">\"3v\"</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io2</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">voltage</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"change to </span><span class=\"si\">{}</span><span class=\"s2\"> v\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">voltage</span><span class=\"p\">))</span>\n\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">ad3</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pwm</span> <span class=\"o\">=</span> <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">get_free_pwm</span><span class=\"p\">()</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">({</span><span class=\"s2\">\"io\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">freq</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">duty</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n        <span class=\"n\">uart</span> <span class=\"o\">=</span> <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">getFreeUart</span><span class=\"p\">()</span>\n        <span class=\"n\">uart</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">({</span><span class=\"s2\">\"tx\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"rx\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s2\">\"baud\"</span><span class=\"p\">:</span> <span class=\"mi\">9600</span><span class=\"p\">})</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">onreceive</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"n\">uart</span><span class=\"o\">.</span><span class=\"n\">onreceive</span> <span class=\"o\">=</span> <span class=\"n\">onreceive</span>\n\n        <span class=\"n\">uart</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n\n\n    <span class=\"n\">obniz</span> <span class=\"o\">=</span> <span class=\"n\">Obniz</span><span class=\"p\">(</span><span class=\"s1\">'0000-0000'</span><span class=\"p\">)</span>\n    <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">onconnect</span> <span class=\"o\">=</span> <span class=\"n\">onconnect</span>\n\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<h2>Installation</h2>\n<p>Install obniz via pip</p>\n<pre>  pip install obniz\n</pre>\n<p>and import it on python file.</p>\n<pre>  <span class=\"kn\">from</span> <span class=\"nn\">obniz</span> <span class=\"kn\">import</span> <span class=\"n\">Obniz</span>\n</pre>\n<h2>Connect</h2>\n<p>Details on <a href=\"https://obniz.io/doc/sdk/doc/connection\" rel=\"nofollow\">doc/connection</a></p>\n<p>To use obniz, instantiate obniz with obniz id. and set onconnect callback function. It will be called when connected to obniz successfully.</p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">onconnect</span><span class=\"p\">(</span><span class=\"n\">obniz</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n    <span class=\"n\">obniz</span> <span class=\"o\">=</span> <span class=\"n\">Obniz</span><span class=\"p\">(</span><span class=\"s1\">'0000-0000'</span><span class=\"p\">)</span>\n    <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">onconnect</span> <span class=\"o\">=</span> <span class=\"n\">onconnect</span>\n\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<p>You are able to use everything on obniz after connect.</p>\n<pre>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">onconnect</span><span class=\"p\">(</span><span class=\"n\">obniz</span><span class=\"p\">):</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io0</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"p\">(</span><span class=\"s2\">\"5v\"</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io0</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io1</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">(</span><span class=\"s2\">\"3v\"</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io1</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"p\">(</span><span class=\"s2\">\"open-drain\"</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io1</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io2</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"p\">(</span><span class=\"s2\">\"3v\"</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io2</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">voltage</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"change to </span><span class=\"si\">{}</span><span class=\"s2\"> v\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">voltage</span><span class=\"p\">))</span>\n\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">ad3</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pwm</span> <span class=\"o\">=</span> <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">get_free_pwm</span><span class=\"p\">()</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">({</span><span class=\"s2\">\"io\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">freq</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">duty</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n        <span class=\"n\">uart</span> <span class=\"o\">=</span> <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">getFreeUart</span><span class=\"p\">()</span>\n        <span class=\"n\">uart</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">({</span><span class=\"s2\">\"tx\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"rx\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s2\">\"baud\"</span><span class=\"p\">:</span> <span class=\"mi\">9600</span><span class=\"p\">})</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">onreceive</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"n\">uart</span><span class=\"o\">.</span><span class=\"n\">onreceive</span> <span class=\"o\">=</span> <span class=\"n\">onreceive</span>\n\n        <span class=\"n\">uart</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Example</h2>\n<p>Easy to integrate python libraries like TensorFlow.\n(need to install <code>tensorflow</code> and <code>opencv-python</code>)</p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">obniz</span> <span class=\"kn\">import</span> <span class=\"n\">Obniz</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">keras</span>\n\n    <span class=\"n\">class_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'T-shirt/top'</span><span class=\"p\">,</span> <span class=\"s1\">'Trouser'</span><span class=\"p\">,</span> <span class=\"s1\">'Pullover'</span><span class=\"p\">,</span> <span class=\"s1\">'Dress'</span><span class=\"p\">,</span> <span class=\"s1\">'Coat'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'Sandal'</span><span class=\"p\">,</span> <span class=\"s1\">'Shirt'</span><span class=\"p\">,</span> <span class=\"s1\">'Sneaker'</span><span class=\"p\">,</span> <span class=\"s1\">'Bag'</span><span class=\"p\">,</span> <span class=\"s1\">'Ankle boot'</span><span class=\"p\">]</span>\n\n    <span class=\"n\">fashion_mnist</span> <span class=\"o\">=</span> <span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">fashion_mnist</span>\n\n    <span class=\"p\">(</span><span class=\"n\">train_images</span><span class=\"p\">,</span> <span class=\"n\">train_labels</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">test_images</span><span class=\"p\">,</span> <span class=\"n\">test_labels</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">fashion_mnist</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">()</span>\n\n    <span class=\"n\">train_images</span> <span class=\"o\">=</span> <span class=\"n\">train_images</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span>\n\n    <span class=\"n\">test_images</span> <span class=\"o\">=</span> <span class=\"n\">test_images</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">([</span>\n        <span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Flatten</span><span class=\"p\">(</span><span class=\"n\">input_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">)),</span>\n        <span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">),</span>\n        <span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">softmax</span><span class=\"p\">)</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">AdamOptimizer</span><span class=\"p\">(),</span>\n                <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'sparse_categorical_crossentropy'</span><span class=\"p\">,</span>\n                <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'accuracy'</span><span class=\"p\">])</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train_images</span><span class=\"p\">,</span> <span class=\"n\">train_labels</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"n\">test_loss</span><span class=\"p\">,</span> <span class=\"n\">test_acc</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">test_images</span><span class=\"p\">,</span> <span class=\"n\">test_labels</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Test accuracy:'</span><span class=\"p\">,</span> <span class=\"n\">test_acc</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_angle</span><span class=\"p\">(</span><span class=\"n\">pwm</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">):</span>\n        <span class=\"nb\">max</span> <span class=\"o\">=</span> <span class=\"mf\">2.4</span>\n        <span class=\"nb\">min</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"nb\">max</span> <span class=\"o\">-</span> <span class=\"nb\">min</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">angle</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">180.0</span> <span class=\"o\">+</span> <span class=\"nb\">min</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">pulse</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">onconnect</span><span class=\"p\">(</span><span class=\"n\">obniz</span><span class=\"p\">):</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io0</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">io1</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pwm</span> <span class=\"o\">=</span> <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">get_free_pwm</span><span class=\"p\">()</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">({</span><span class=\"s2\">\"io\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n        <span class=\"n\">pwm</span><span class=\"o\">.</span><span class=\"n\">freq</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cap</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">VideoCapture</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">cap</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n            <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_BGR2GRAY</span><span class=\"p\">)</span>\n\n            <span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">threshold</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"mi\">127</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">THRESH_BINARY_INV</span><span class=\"p\">)</span>\n\n            <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">height</span> <span class=\"k\">if</span> <span class=\"n\">height</span> <span class=\"o\">&lt;</span> <span class=\"n\">width</span> <span class=\"k\">else</span> <span class=\"n\">width</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">height</span> <span class=\"k\">if</span> <span class=\"n\">height</span> <span class=\"o\">&lt;</span> <span class=\"n\">width</span> <span class=\"k\">else</span> <span class=\"n\">width</span>\n            <span class=\"n\">square</span><span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n\n            <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">width</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">height</span><span class=\"o\">-</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">-</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">square</span> <span class=\"o\">=</span> <span class=\"n\">frame</span><span class=\"p\">[</span><span class=\"n\">y1</span><span class=\"p\">:</span><span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">:</span><span class=\"n\">x2</span><span class=\"p\">]</span>\n\n            <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s2\">\"frame\"</span><span class=\"p\">,</span> <span class=\"n\">square</span><span class=\"p\">)</span>\n\n            <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">square</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">),</span> <span class=\"n\">interpolation</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">INTER_AREA</span><span class=\"p\">)</span>\n\n            <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">expand_dims</span><span class=\"p\">(</span><span class=\"n\">img</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n            <span class=\"n\">predictions_single</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n\n            <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">predictions_single</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">prev</span> <span class=\"o\">!=</span> <span class=\"n\">answer</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"answer: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">class_names</span><span class=\"p\">[</span><span class=\"n\">answer</span><span class=\"p\">]))</span>\n                <span class=\"n\">set_angle</span><span class=\"p\">(</span><span class=\"n\">pwm</span><span class=\"p\">,</span> <span class=\"n\">answer</span> <span class=\"o\">/</span> <span class=\"mi\">9</span> <span class=\"o\">*</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n\n            <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">answer</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span> <span class=\"o\">==</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">'q'</span><span class=\"p\">):</span>\n                <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n                <span class=\"k\">break</span>\n\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cap</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n        <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">destroyAllWindows</span><span class=\"p\">()</span>\n\n    <span class=\"n\">obniz</span> <span class=\"o\">=</span> <span class=\"n\">Obniz</span><span class=\"p\">(</span><span class=\"s1\">'0000-0000'</span><span class=\"p\">)</span>\n    <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">debugprint</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">obniz</span><span class=\"o\">.</span><span class=\"n\">onconnect</span> <span class=\"o\">=</span> <span class=\"n\">onconnect</span>\n\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<h2>Documentation</h2>\n<p>You can find the documentation on <a href=\"https://obniz.io/doc/\" rel=\"nofollow\">the website</a>.</p>\n\n          </div>"}, "last_serial": 6863573, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "146e8a2279dd01c000a537ccc94c80d4", "sha256": "5570d04654e81bd27850c577c60cae39fcf1935021c9d7bcee14d65d8e47baeb"}, "downloads": -1, "filename": "obniz-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "146e8a2279dd01c000a537ccc94c80d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59577, "upload_time": "2018-12-27T10:49:55", "upload_time_iso_8601": "2018-12-27T10:49:55.828996Z", "url": "https://files.pythonhosted.org/packages/94/24/7ef0f58cb51121579ebf8f0fd2944ee16c3365335f521b3b5f2339ba3933/obniz-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bdc40a2272c75ba5110b0ccbf0f840d", "sha256": "abcb14f2635cb6ad83822220936fe6a10204c71172871f1bcb41420c73e2ac3a"}, "downloads": -1, "filename": "obniz-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6bdc40a2272c75ba5110b0ccbf0f840d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40344, "upload_time": "2018-12-27T10:49:58", "upload_time_iso_8601": "2018-12-27T10:49:58.265681Z", "url": "https://files.pythonhosted.org/packages/04/e1/8eb00585c806277c059eab747b1ef2ac3ad6f4dc32bfe1670ff6cc948305/obniz-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "94935f82fc4b46be4e9ebb7d48ba0aa1", "sha256": "0cd09960ab1f3ffe469d6e5031de895083c41059880a1268441610f9c7594620"}, "downloads": -1, "filename": "obniz-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "94935f82fc4b46be4e9ebb7d48ba0aa1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59671, "upload_time": "2019-01-11T03:11:19", "upload_time_iso_8601": "2019-01-11T03:11:19.574695Z", "url": "https://files.pythonhosted.org/packages/ed/e1/54ef44522c98aaecb69bd8c0d6fa47e2fa49d65ec3511c1d9ca6ac94bb40/obniz-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e017051ceffacadc387babe37cf1e51", "sha256": "bf39aef5d941d6567baa10ea36f5934b354e5d66605e36286134b290fdf88e46"}, "downloads": -1, "filename": "obniz-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7e017051ceffacadc387babe37cf1e51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40522, "upload_time": "2019-01-11T03:11:21", "upload_time_iso_8601": "2019-01-11T03:11:21.720228Z", "url": "https://files.pythonhosted.org/packages/9b/d8/5fa8966d0383821a347ca4984a6a38b9796045da4f0ebdf7a20195647a02/obniz-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f4b5b80596526d60602bfefbb59c44d8", "sha256": "939f78fd210d728fa077225eed90c6a36208a36102253496ff3556f847f5214e"}, "downloads": -1, "filename": "obniz-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f4b5b80596526d60602bfefbb59c44d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 60926, "upload_time": "2019-02-28T07:01:11", "upload_time_iso_8601": "2019-02-28T07:01:11.221446Z", "url": "https://files.pythonhosted.org/packages/d4/92/df7ef1744588f64d5b860356c68ab9b71394e15ac94f8c031800a279b4b6/obniz-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "faaf05f7dc140b8850d6b7c60cb31503", "sha256": "c22c6ec4718c8f36412b5551220c185b4d685b8ea2d23ef7737f0e03841206c5"}, "downloads": -1, "filename": "obniz-0.2.0.tar.gz", "has_sig": false, "md5_digest": "faaf05f7dc140b8850d6b7c60cb31503", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40205, "upload_time": "2019-02-28T07:01:13", "upload_time_iso_8601": "2019-02-28T07:01:13.060120Z", "url": "https://files.pythonhosted.org/packages/f1/56/20a87d5f1463bee2d55c0470475078ebd1247a9cbc61880dc74a0acab076/obniz-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5334a41d17158783d76d6e735cb4df70", "sha256": "6f8fa97444fa10873a30d1a7a474b806e3500e673f5194d593d6506dcd632382"}, "downloads": -1, "filename": "obniz-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5334a41d17158783d76d6e735cb4df70", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 64214, "upload_time": "2019-05-24T06:42:52", "upload_time_iso_8601": "2019-05-24T06:42:52.459491Z", "url": "https://files.pythonhosted.org/packages/9d/38/b2d2293aa9950f70a13ccabc4c2d9cca40deda2f18b1c2c02c2d53163bdc/obniz-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c403e0ee9d7e17449aaab32187084dfb", "sha256": "4e90f3e3d1601fec88999127435c7bb4f673c261c2ef4976e9ffcc63ea7e3ab8"}, "downloads": -1, "filename": "obniz-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c403e0ee9d7e17449aaab32187084dfb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42185, "upload_time": "2019-05-24T06:42:54", "upload_time_iso_8601": "2019-05-24T06:42:54.521338Z", "url": "https://files.pythonhosted.org/packages/91/33/540c6504add677965294db2149962c3a1a843ac0fc2346f19179b1db1b92/obniz-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "34a0a6b0cd53d86a71ab871628465e43", "sha256": "325d8f98e97b6e1e0c8fd13880c164f0afb8a2a9cd592aa1df9ece4ebe504d42"}, "downloads": -1, "filename": "obniz-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "34a0a6b0cd53d86a71ab871628465e43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 65496, "upload_time": "2019-08-30T10:02:08", "upload_time_iso_8601": "2019-08-30T10:02:08.995988Z", "url": "https://files.pythonhosted.org/packages/1d/26/5b4a09f9d05ded0558f621f0fea9def673cf58f3af654cb79733730a1af1/obniz-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20347a2116706ead877b135d39816357", "sha256": "7b2f02653f0ef9b8b84696224fdb8bfff6c34db28b1ec350ed0d95a54261d703"}, "downloads": -1, "filename": "obniz-0.4.0.tar.gz", "has_sig": false, "md5_digest": "20347a2116706ead877b135d39816357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13504785, "upload_time": "2019-08-30T10:02:17", "upload_time_iso_8601": "2019-08-30T10:02:17.157341Z", "url": "https://files.pythonhosted.org/packages/dd/3f/eaf64edaa5e945da24a0460db0af1a1613205d38908a97fc77a82a62ca44/obniz-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "31a19174e539f910bf27a44123879df1", "sha256": "a0f9ab1e435beb90d4cbfdd6ea6789c93ee4303d0d592ebc207b7ea1ba0f7376"}, "downloads": -1, "filename": "obniz-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "31a19174e539f910bf27a44123879df1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 83504, "upload_time": "2019-08-30T10:51:52", "upload_time_iso_8601": "2019-08-30T10:51:52.347308Z", "url": "https://files.pythonhosted.org/packages/bf/71/f1a979af588749613f8aa40d5b80a9d5df1a4e1ca800ce83dc8a71b4ba81/obniz-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0674e1a3d0bafbe893819df91981774e", "sha256": "946845187c777ddba67c0d69a70304a0187f6327fc84094f9a00428b0ff61f23"}, "downloads": -1, "filename": "obniz-0.4.1.tar.gz", "has_sig": false, "md5_digest": "0674e1a3d0bafbe893819df91981774e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13505122, "upload_time": "2019-08-30T10:51:57", "upload_time_iso_8601": "2019-08-30T10:51:57.961296Z", "url": "https://files.pythonhosted.org/packages/c4/50/79b15ea6f4c19317629aae5fde0943f9b4cbfd5acd960f364e72acb6b7fb/obniz-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "0317da03f475262a6e7007b6166ca0e9", "sha256": "640183f68a31a72bdb0352bd42822d060743dca861d2c30211121da1162f573c"}, "downloads": -1, "filename": "obniz-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0317da03f475262a6e7007b6166ca0e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 83856, "upload_time": "2019-09-30T01:39:07", "upload_time_iso_8601": "2019-09-30T01:39:07.806175Z", "url": "https://files.pythonhosted.org/packages/17/ea/c35c39c8b3df7de668b3aa899a2a5bcfbc9ea49ca4ed6deb58507f7a336b/obniz-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea7bbf2eb4ecdbcb2a25a5c88b8d3aea", "sha256": "b0419980fb5c21d2c33980a7f566b32548246febff3b2fce569be79b02c72435"}, "downloads": -1, "filename": "obniz-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ea7bbf2eb4ecdbcb2a25a5c88b8d3aea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13505888, "upload_time": "2019-09-30T01:39:14", "upload_time_iso_8601": "2019-09-30T01:39:14.835327Z", "url": "https://files.pythonhosted.org/packages/d5/28/63f5673dc49a0f99dd7909f39058121164dda6e387dbb4cd0d7ed7c21162/obniz-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "d5daf3ace82e1eb3edc145e319f47d90", "sha256": "4f8f9cde1f35fff7df860c8bc03c0f7a66dcd4db2dd0f64181544ccd1efc6099"}, "downloads": -1, "filename": "obniz-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d5daf3ace82e1eb3edc145e319f47d90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13542831, "upload_time": "2019-10-17T05:20:55", "upload_time_iso_8601": "2019-10-17T05:20:55.062807Z", "url": "https://files.pythonhosted.org/packages/f4/bb/4130ca30dc42d3ec1fc89807594d030be7d09fd6c6d4b36f0b0549c133ee/obniz-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96fb1d4dde8455e2a1a17684d248a6d1", "sha256": "699f156c3c54afb41c1c288d0185251de11d76326341197329e86dd045c3c4dc"}, "downloads": -1, "filename": "obniz-0.5.1.tar.gz", "has_sig": false, "md5_digest": "96fb1d4dde8455e2a1a17684d248a6d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13506697, "upload_time": "2019-10-17T05:21:07", "upload_time_iso_8601": "2019-10-17T05:21:07.056457Z", "url": "https://files.pythonhosted.org/packages/2c/74/4beac21e922a01f8a36918c81b67aa02e97e83e3a09b915109486a495515/obniz-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "baf92668686ed56dd95dbe43f1bfb49c", "sha256": "2a2be9600baaa3f291c4b211a13820c51d8f4e69d45bfff4aabc3a0b705537a8"}, "downloads": -1, "filename": "obniz-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "baf92668686ed56dd95dbe43f1bfb49c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13542848, "upload_time": "2020-01-09T05:49:05", "upload_time_iso_8601": "2020-01-09T05:49:05.365616Z", "url": "https://files.pythonhosted.org/packages/f1/a4/03639be3a97b66a2296c1a0684e85e04a7369bdfe557a91697dc948562a0/obniz-0.5.2-py3-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "75a33e3b3c5fb39045a00ea72d4b5465", "sha256": "60c9032632579a7c2d8cb1e344af5aa47e17335fd47fd09a0663a04b07def40f"}, "downloads": -1, "filename": "obniz-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "75a33e3b3c5fb39045a00ea72d4b5465", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13543302, "upload_time": "2020-03-23T07:01:38", "upload_time_iso_8601": "2020-03-23T07:01:38.000879Z", "url": "https://files.pythonhosted.org/packages/0a/48/e84080da70be4b3db10e09642886c3cf79b7c862c690d7f2ab22d73ba874/obniz-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47fff25a8be5ded868df2ac513b429aa", "sha256": "e6730aa6bcf73cc035d176dde15d45d292aa6bd1e29913baed644dc7505a72f6"}, "downloads": -1, "filename": "obniz-0.6.0.tar.gz", "has_sig": false, "md5_digest": "47fff25a8be5ded868df2ac513b429aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13507119, "upload_time": "2020-03-23T07:01:41", "upload_time_iso_8601": "2020-03-23T07:01:41.409045Z", "url": "https://files.pythonhosted.org/packages/ca/22/eaf01f4d4d5b5797e30fa23d513b97cab6b35093c72f9a2c87fbf5a9c420/obniz-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75a33e3b3c5fb39045a00ea72d4b5465", "sha256": "60c9032632579a7c2d8cb1e344af5aa47e17335fd47fd09a0663a04b07def40f"}, "downloads": -1, "filename": "obniz-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "75a33e3b3c5fb39045a00ea72d4b5465", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13543302, "upload_time": "2020-03-23T07:01:38", "upload_time_iso_8601": "2020-03-23T07:01:38.000879Z", "url": "https://files.pythonhosted.org/packages/0a/48/e84080da70be4b3db10e09642886c3cf79b7c862c690d7f2ab22d73ba874/obniz-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47fff25a8be5ded868df2ac513b429aa", "sha256": "e6730aa6bcf73cc035d176dde15d45d292aa6bd1e29913baed644dc7505a72f6"}, "downloads": -1, "filename": "obniz-0.6.0.tar.gz", "has_sig": false, "md5_digest": "47fff25a8be5ded868df2ac513b429aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13507119, "upload_time": "2020-03-23T07:01:41", "upload_time_iso_8601": "2020-03-23T07:01:41.409045Z", "url": "https://files.pythonhosted.org/packages/ca/22/eaf01f4d4d5b5797e30fa23d513b97cab6b35093c72f9a2c87fbf5a9c420/obniz-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:47 2020"}