{"info": {"author": "Studer Innotec SA", "author_email": "develop@studer-innotec.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Communications", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Package **xcom485i**\n=========================\n\nPython library to access Studer-Innotec Xcom-485i device through Modbus RTU over a serial port\n\nPrerequisites\n----------------\n\nPlease read the complete documentation available on : `Studer Innotec SA`_ *-> Support -> Download Center -> Software and Updates -> Communication protocols Xcom-CAN*\n\nGetting Started\n----------------\n\n1. Package installation\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: console\n\n    $ pip install xcom485i\n\n2. Hardware installation\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Connect your *Xcom-485i* (Studer side) to your installation using the cable provided with the device\n- Connect your *Xcom-485i* (External side) to your controller (personal computer, Raspberry Pi, etc.) using a *USB* to *RS-485* adapter\n- Please refer to the *Xcom-485i* manual for more information about commissioning the device\n\n3. Serial configuration\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis package rely on `pyserial`_ standard package, in order to use the **xcom485i** package make sure to instantiate it like :\n\n.. code-block:: python\n\n    import serial\n\n    serial_port = serial.Serial(SERIAL_PORT_NAME, SERIAL_PORT_BAUDRATE, parity=serial.PARITY_EVEN, timeout=1)\n\n- where `SERIAL_PORT_NAME` is your serial port interface, for example set it to *'COM4'* (string argument) when using *Windows* otherwise you may set it to *'/dev/ttyUSB0/'* on *Linux*\n- where `SERIAL_PORT_BAUDRATE` is the baudrate used by your serial port interface (must be set to 9600, 19200, 38400 or 115200 according to *Xcom-485i* dip-switches)\n\n**Xcom-485i Dip switches baud rate selection**\n\n=====   =====   ===========\nN\u00b0 7    N\u00b0 8    Baudrate\n=====   =====   ===========\nOFF     OFF     9600   bps\nOFF     ON      19200  bps\nON      OFF     38400  bps\nON      ON      115200 bps\n=====   =====   ===========\n\n4. Address offset\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSet the modbus offset corresponding to the internal dip-switches of your *Xcom-485i* device, it must be set to 0, 32, 64 or 128.\n\nIt is done when instantiate the *Xcom485i* class like :\n\n.. code-block:: python\n\n    xcom485i = Xcom485i(serial_port, OFFSET, debug=True)\n\n- where `serial_port` is the previously created object with *Serial*\n- where `OFFSET` is your actual modbus address offset set by the dip-switches inside your *Xcom-485i*\n- where `debug` enables you to get some useful console information for debugging purpose\n\n**Xcom-485i Dip switches address offset selection**\n\n=====   =====   ===============   ==============\nN\u00b0 1    N\u00b0 2    Address offset    Address range\n=====   =====   ===============   ==============\nOFF     OFF     0                 1 to 63\nOFF     ON      32                33 to 95\nON      OFF     64                65 to 127\nON      ON      128               129 to 192\n=====   =====   ===============   ==============\n\n5. Run an example from `/examples` folder\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGo to */examples* folder with a terminal and execute this script\n\n.. code-block:: console\n\n    $ python ex_read_info.py\n\nCheck `client file`_ to understand it.\n\n6. Open documentation\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOpen documentation from `Read The Docs`_\n\nWarnings\n----------------\n\n- **Please** check carefully the serial configuration, the *Xcom-485i* dip-switches configuration as well as the jumper for D+, D- and GND signals\n- **Use** devices addresses generated into `addresses file`_\n- It is strongly recommended **NOT** to spam the *Xcom-485i* with multiple requests. The correct way to communicate with the *Xcom-485i* is to send a request and to **wait** for the response before sending the next request. If no response comes from the *Xcom-485i* after a delay of 1 second, we can consider that the timeout is over and another request can be send. It is also how *Modbus RTU* is intended to work.\n\nAuthors\n----------------\n\n**Studer Innotec SA** - *Initial work* - `Studer Innotec SA`_\n\nLicense\n----------------\n\nThis project is licensed under the MIT License - see the `LICENSE`_ file for details\n\n.. External References:\n.. _Studer Innotec SA: https://www.studer-innotec.com\n.. _addresses file: https://xcom485i.readthedocs.io/en/latest/addresses.html\n.. _client file: https://xcom485i.readthedocs.io/en/latest/client.html\n.. _Read The Docs: https://xcom485i.readthedocs.io/en/latest/index.html\n.. _LICENSE: https://xcom485i.readthedocs.io/en/latest/license.html\n.. _pyserial: https://pyserial.readthedocs.io/en/latest/shortintro.html\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/studer-innotec/xcom485i", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "develop@studer-innotec.com", "name": "xcom485i", "package_url": "https://pypi.org/project/xcom485i/", "platform": "", "project_url": "https://pypi.org/project/xcom485i/", "project_urls": {"Documentation": "https://xcom485i.readthedocs.io/en/latest/index.html", "Homepage": "https://github.com/studer-innotec/xcom485i", "Issues tracker": "https://github.com/studer-innotec/xcom485i/issues", "Source Code": "https://github.com/studer-innotec/xcom485i"}, "release_url": "https://pypi.org/project/xcom485i/0.9.1/", "requires_dist": ["uModbus (==1.0.3)", "pyserial (>=3.4)"], "requires_python": ">=3.6.8", "summary": "Package that let easily interact with the Xcom-485i device over Modbus RTU", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python library to access Studer-Innotec Xcom-485i device through Modbus RTU over a serial port</p>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>Please read the complete documentation available on : <a href=\"https://www.studer-innotec.com\" rel=\"nofollow\">Studer Innotec SA</a> <em>-&gt; Support -&gt; Download Center -&gt; Software and Updates -&gt; Communication protocols Xcom-CAN</em></p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<div id=\"package-installation\">\n<h3>1. Package installation</h3>\n<pre><span class=\"gp\">$</span> pip install xcom485i\n</pre>\n</div>\n<div id=\"hardware-installation\">\n<h3>2. Hardware installation</h3>\n<ul>\n<li>Connect your <em>Xcom-485i</em> (Studer side) to your installation using the cable provided with the device</li>\n<li>Connect your <em>Xcom-485i</em> (External side) to your controller (personal computer, Raspberry Pi, etc.) using a <em>USB</em> to <em>RS-485</em> adapter</li>\n<li>Please refer to the <em>Xcom-485i</em> manual for more information about commissioning the device</li>\n</ul>\n</div>\n<div id=\"serial-configuration\">\n<h3>3. Serial configuration</h3>\n<p>This package rely on <a href=\"https://pyserial.readthedocs.io/en/latest/shortintro.html\" rel=\"nofollow\">pyserial</a> standard package, in order to use the <strong>xcom485i</strong> package make sure to instantiate it like :</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">serial</span>\n\n<span class=\"n\">serial_port</span> <span class=\"o\">=</span> <span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"n\">SERIAL_PORT_NAME</span><span class=\"p\">,</span> <span class=\"n\">SERIAL_PORT_BAUDRATE</span><span class=\"p\">,</span> <span class=\"n\">parity</span><span class=\"o\">=</span><span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">PARITY_EVEN</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>where <cite>SERIAL_PORT_NAME</cite> is your serial port interface, for example set it to <em>\u2018COM4\u2019</em> (string argument) when using <em>Windows</em> otherwise you may set it to <em>\u2018/dev/ttyUSB0/\u2019</em> on <em>Linux</em></li>\n<li>where <cite>SERIAL_PORT_BAUDRATE</cite> is the baudrate used by your serial port interface (must be set to 9600, 19200, 38400 or 115200 according to <em>Xcom-485i</em> dip-switches)</li>\n</ul>\n<p><strong>Xcom-485i Dip switches baud rate selection</strong></p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>N\u00b0 7</th>\n<th>N\u00b0 8</th>\n<th>Baudrate</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>OFF</td>\n<td>OFF</td>\n<td>9600   bps</td>\n</tr>\n<tr><td>OFF</td>\n<td>ON</td>\n<td>19200  bps</td>\n</tr>\n<tr><td>ON</td>\n<td>OFF</td>\n<td>38400  bps</td>\n</tr>\n<tr><td>ON</td>\n<td>ON</td>\n<td>115200 bps</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"address-offset\">\n<h3>4. Address offset</h3>\n<p>Set the modbus offset corresponding to the internal dip-switches of your <em>Xcom-485i</em> device, it must be set to 0, 32, 64 or 128.</p>\n<p>It is done when instantiate the <em>Xcom485i</em> class like :</p>\n<pre><span class=\"n\">xcom485i</span> <span class=\"o\">=</span> <span class=\"n\">Xcom485i</span><span class=\"p\">(</span><span class=\"n\">serial_port</span><span class=\"p\">,</span> <span class=\"n\">OFFSET</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>where <cite>serial_port</cite> is the previously created object with <em>Serial</em></li>\n<li>where <cite>OFFSET</cite> is your actual modbus address offset set by the dip-switches inside your <em>Xcom-485i</em></li>\n<li>where <cite>debug</cite> enables you to get some useful console information for debugging purpose</li>\n</ul>\n<p><strong>Xcom-485i Dip switches address offset selection</strong></p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>N\u00b0 1</th>\n<th>N\u00b0 2</th>\n<th>Address offset</th>\n<th>Address range</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>OFF</td>\n<td>OFF</td>\n<td>0</td>\n<td>1 to 63</td>\n</tr>\n<tr><td>OFF</td>\n<td>ON</td>\n<td>32</td>\n<td>33 to 95</td>\n</tr>\n<tr><td>ON</td>\n<td>OFF</td>\n<td>64</td>\n<td>65 to 127</td>\n</tr>\n<tr><td>ON</td>\n<td>ON</td>\n<td>128</td>\n<td>129 to 192</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"run-an-example-from-examples-folder\">\n<h3>5. Run an example from <cite>/examples</cite> folder</h3>\n<p>Go to <em>/examples</em> folder with a terminal and execute this script</p>\n<pre><span class=\"gp\">$</span> python ex_read_info.py\n</pre>\n<p>Check <a href=\"https://xcom485i.readthedocs.io/en/latest/client.html\" rel=\"nofollow\">client file</a> to understand it.</p>\n</div>\n<div id=\"open-documentation\">\n<h3>6. Open documentation</h3>\n<p>Open documentation from <a href=\"https://xcom485i.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">Read The Docs</a></p>\n</div>\n</div>\n<div id=\"warnings\">\n<h2>Warnings</h2>\n<ul>\n<li><strong>Please</strong> check carefully the serial configuration, the <em>Xcom-485i</em> dip-switches configuration as well as the jumper for D+, D- and GND signals</li>\n<li><strong>Use</strong> devices addresses generated into <a href=\"https://xcom485i.readthedocs.io/en/latest/addresses.html\" rel=\"nofollow\">addresses file</a></li>\n<li>It is strongly recommended <strong>NOT</strong> to spam the <em>Xcom-485i</em> with multiple requests. The correct way to communicate with the <em>Xcom-485i</em> is to send a request and to <strong>wait</strong> for the response before sending the next request. If no response comes from the <em>Xcom-485i</em> after a delay of 1 second, we can consider that the timeout is over and another request can be send. It is also how <em>Modbus RTU</em> is intended to work.</li>\n</ul>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p><strong>Studer Innotec SA</strong> - <em>Initial work</em> - <a href=\"https://www.studer-innotec.com\" rel=\"nofollow\">Studer Innotec SA</a></p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"https://xcom485i.readthedocs.io/en/latest/license.html\" rel=\"nofollow\">LICENSE</a> file for details</p>\n</div>\n\n          </div>"}, "last_serial": 6827544, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "a4f5a01760c5d73dd308ec31c46f82c1", "sha256": "1ebd34c7d5b56d5cafe244ec6cedbdc917ba5c3f95e5f2363898a36036c0d3d2"}, "downloads": -1, "filename": "xcom485i-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a4f5a01760c5d73dd308ec31c46f82c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.8", "size": 9063, "upload_time": "2020-03-17T10:03:55", "upload_time_iso_8601": "2020-03-17T10:03:55.266945Z", "url": "https://files.pythonhosted.org/packages/54/a2/beba763b5a69c5cec31d3076268f9cb5095f970e500a6186889a8135f4fe/xcom485i-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5146b872986e1e468b7db5d0bcff7a2", "sha256": "7c516e5b4119ce56887882946535ec6612d07940521c2f8ebe396d1a9f7c2be8"}, "downloads": -1, "filename": "xcom485i-0.9.1.tar.gz", "has_sig": false, "md5_digest": "a5146b872986e1e468b7db5d0bcff7a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8", "size": 10174, "upload_time": "2020-03-17T10:03:57", "upload_time_iso_8601": "2020-03-17T10:03:57.689823Z", "url": "https://files.pythonhosted.org/packages/91/30/3ed630c037aa4cdbfbd0591b30e35d5c57820da034895464292a81e76fdc/xcom485i-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4f5a01760c5d73dd308ec31c46f82c1", "sha256": "1ebd34c7d5b56d5cafe244ec6cedbdc917ba5c3f95e5f2363898a36036c0d3d2"}, "downloads": -1, "filename": "xcom485i-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a4f5a01760c5d73dd308ec31c46f82c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.8", "size": 9063, "upload_time": "2020-03-17T10:03:55", "upload_time_iso_8601": "2020-03-17T10:03:55.266945Z", "url": "https://files.pythonhosted.org/packages/54/a2/beba763b5a69c5cec31d3076268f9cb5095f970e500a6186889a8135f4fe/xcom485i-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5146b872986e1e468b7db5d0bcff7a2", "sha256": "7c516e5b4119ce56887882946535ec6612d07940521c2f8ebe396d1a9f7c2be8"}, "downloads": -1, "filename": "xcom485i-0.9.1.tar.gz", "has_sig": false, "md5_digest": "a5146b872986e1e468b7db5d0bcff7a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8", "size": 10174, "upload_time": "2020-03-17T10:03:57", "upload_time_iso_8601": "2020-03-17T10:03:57.689823Z", "url": "https://files.pythonhosted.org/packages/91/30/3ed630c037aa4cdbfbd0591b30e35d5c57820da034895464292a81e76fdc/xcom485i-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:26:01 2020"}