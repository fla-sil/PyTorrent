{"info": {"author": "Fabio Sangiovanni", "author_email": "sjh+github@sanjioh.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP :: HTTP Servers"], "description": "# django-header-filter\n\n[![GitHub Actions](https://github.com/sanjioh/django-header-filter/workflows/CI/badge.svg)](https://github.com/sanjioh/django-header-filter/actions)\n[![codecov](https://codecov.io/gh/sanjioh/django-header-filter/branch/master/graph/badge.svg)](https://codecov.io/gh/sanjioh/django-header-filter)\n[![version](https://img.shields.io/pypi/v/django-header-filter)](https://pypi.org/project/django-header-filter)\n[![python](https://img.shields.io/pypi/pyversions/django-header-filter)](https://pypi.org/project/django-header-filter)\n[![license](https://img.shields.io/pypi/l/django-header-filter)](https://pypi.org/project/django-header-filter)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n`django-header-filter` implements header-based filtering for Django\napplications. That is, it allows to reject requests whose headers are\nnot compliant to a user-defined set of rules.\n\n## Compatibility\n\n`django-header-filter` is compatible with:\n\n- Python 3.5, 3,6, 3.7, 3.8\n- Django 1.11, 2.0, 2.1, 2.2\n\n## Installation\n\n```shell\n$ pip install django-header-filter\n```\n\n## Quickstart\n\nImagine you need to make sure that every request routed to a specific\nview has a header named `X-Planet` with `Mars` as value.\n\nThis constraint can be implemented as follows:\n\n```python\n# views.py\nfrom django.http import HttpResponse\nfrom header_filter import Enforce, Header, header_rules\n\n\n@header_rules([Enforce(Header('HTTP_X_PLANET', 'Mars'))])\ndef do_things(request):\n    # ...\n    return HttpResponse()\n```\n\nIn short:\n\n- the `@header_rules` decorator applies a list of *rules* to the view\n- in the example that list is made up of one single rule, `Enforce`,\nwhich allows the request to be handed over to the view only if the\nrespective *matcher* holds true (otherwise a `400 Bad Request` response\nis returned to the client)\n- the `Header` matcher is responsible for checking whether a header\ncompliant to your needs belongs to the request or not\n\n## Matchers\n\nMatchers are the basic building blocks for defining header-based\nfilters. Their job is to check whether user-defined header combinations\nbelong to the request or not.\n\n`django-header-filter` provides the following matchers:\n\n### `Header`\n\nThe `Header` matcher must be instantiated with two arguments: the first\nargument is the *name* of the header; the second one is its *value*.\n\nThe header name must be a string.\n\n> **NOTE**: header names in Django are usually different from the ones\nthat a client actually sends, due to some string manipulations that\nhappen server side (refer to the [docs][2] for details). Matchers do\nnothing to guess the original names, so be sure to initialize them with\nthe right format (e.g. `X-Planet` becomes `HTTP_X_PLANET` when used for\na `Header` matcher instantiation).\n\nThe type of the header value may be one of the following:\n\n- a string\n- a compiled regular expression object (as returned by\n[`re.compile()`][3])\n- an iterable of strings\n\nThe `Header` matcher will check whether a header with the given name and\nvalue actually exists. As far as the value is concerned, the matching\nlogic depends on its type:\n\n- exact match for strings\n- regexp match for regular expression objects\n- membership for iterables\n\n```python\nimport re\n\nfrom header_filter import Header\n\n# matches X-Planet: Mars\nHeader('HTTP_X_PLANET', 'Mars')\n\n# matches X-Planet: Mars or X-Planet: Mercury\nHeader('HTTP_X_PLANET', re.compile(r'^M.*'))\n\n# matches X-Planet: Mars or X-Planet: Venus\nHeader('HTTP_X_PLANET', ['Mars', 'Venus'])\n```\n\n### `HeaderRegexp`\n\nThe `HeaderRegexp` matcher is similar to the `Header` matcher, but the\narguments it takes at instantiation may be:\n\n- compiled regular expression objects\n- regexp pattern strings\n\nboth for name and value.\n\n```python\nimport re\n\nfrom header_filter import HeaderRegexp\n\n# matches X-Planet: Mars and X-Planet: Mercury\nHeaderRegexp(r'^HTTP_X_PLANET$', re.compile(r'^M.*'))\n\n# same as above\nHeaderRegexp(re.compile(r'^HTTP_X_PLANET$'), r'^M.*')\n```\n\n## Matchers are composable\n\nMatchers can be aggregated into composite matchers by means of bitwise\noperators:\n\n- `&` (and)\n- `|` (or)\n- `^` (xor)\n- `~` (not)\n\nA composite matcher allows for checks that cannot be expressed by just\nusing the matchers described above.\n\n```python\nfrom header_filter import Header\n\n# matches if X-Planet: Mars and X-Rover: Curiosity are both present\nHeader('HTTP_X_PLANET', 'Mars') & Header('HTTP_X_ROVER', 'Curiosity')\n\n# matches if at least one of X-Planet: Mars and X-Rover: Curiosity is present\nHeader('HTTP_X_PLANET', 'Mars') | Header('HTTP_X_ROVER', 'Curiosity')\n\n# matches if exactly one of X-Planet: Mars and X-Rover: Curiosity is present\nHeader('HTTP_X_PLANET', 'Mars') ^ Header('HTTP_X_ROVER', 'Curiosity')\n\n# matches if X-Planet: Mars is not present\n~Header('HTTP_X_PLANET', 'Mars')\n```\n\nFrom the usage point of view, there's no difference between a simple\nmatcher and a composite one: both can be used in the same contexts.\nBesides, there's no limit in how much matchers can be combined: simple\nmatchers can be combined into composites, which in turn can be used as\natoms for further composition.\n\n```python\nfrom header_filter import Header\n\n# matches if X-Planet: Mars and X-Rover: Curiosity aren't both present\n~(Header('HTTP_X_PLANET', 'Mars') & Header('HTTP_X_ROVER', 'Curiosity'))\n\n# matches if\n# X-Planet: Mars is not present, and\n# exactly one of X-Rover: Curiosity and X-Aliens: false is present\n(\n    ~Header('HTTP_X_PLANET', 'Mars')\n    & (\n        Header('HTTP_X_ROVER', 'Curiosity') ^ Header('HTTP_X_ALIENS', 'false')\n    )\n)\n```\n\n## Matchers support string representation\n\nA matcher can be inspected by printing its string representation.\n\n```python\nfrom header_filter import Header\n\nmatcher1 = Header('HTTP_X_PLANET', 'Mars')\nmatcher2 = Header('HTTP_X_ROVER', 'Curiosity')\ncomposite = ~(matcher1 & matcher2)\nprint(repr(composite))\n# ~(Header('HTTP_X_PLANET', 'Mars') & Header('HTTP_X_ROVER', 'Curiosity'))\n```\n\n## Rules\n\nRules rely on matchers to implement actual header-based filtering.\n\n`django-header-filter` provides two rules: `Enforce` and `Forbid`. Both\nrequire a matcher to be instantiated, but behave differently:\n\n- `Enforce` rejects requests whose headers **do not** comply with its\nmatcher\n- `Forbid` rejects requests whose headers **do** comply with its\nmatcher\n\n```python\nfrom header_filter import Enforce, Forbid, Header\n\n# rejects requests *lacking* an X-Planet: Mars header\nEnforce(Header('HTTP_X_PLANET', 'Mars'))\n\n# rejects requests *containing* an X-Planet: Mars header\nForbid(Header('HTTP_X_PLANET', 'Mars'))\n```\n\nRules can use matchers of any type (simple or composite).\n\n## Custom reject responses\n\nBy default rules reject requests with a\n`django.http.HttpResponseBadRequest` response.\nThe default behavior can be overridden by passing an optional argument\nat rule instantiation, named `reject_response`. The argument must be an\ninstance of a Django Response, which will be returned to the client\nwhenever the rule triggers the rejection of a request.\n\n```python\nfrom django.http import HttpResponseNotFound\nfrom header_filter import Enforce, Header\n\n# rejects requests *lacking* an X-Planet: Mars header with a 404 response\nEnforce(\n    Header('HTTP_X_PLANET', 'Mars'),\n    reject_response=HttpResponseNotFound(reason='Sorry!')\n)\n```\n\n## `@header_rules` decorator\n\nThe `@header_rules` decorator binds a list of rules to a view. The\ndecorator checks the headers of every request routed to that view\nagainst each rule of the list, in order. The first rule that results in\na rejection determines the response that will be sent back to the\nclient. If no rule triggers a rejection, the request is handed over to\nthe view for regular processing.\n\n```python\nfrom django.http import HttpResponse\nfrom header_filter import Enforce, Forbid, Header, header_rules\n\n\n# requests *lacking* an X-Planet: Mars header or *containing* an\n# X-Rover: Curiosity header will be rejected\n@header_rules(\n    [\n        Enforce(Header('HTTP_X_PLANET', 'Mars')),\n        Forbid(Header('HTTP_X_ROVER', 'Curiosity')),\n    ]\n)\ndef do_things(request):\n    # ...\n    return HttpResponse()\n```\n\n`@header_rules` works fine with class-based views as well, by means of\n`@method_decorator`.\n\n```python\nfrom django.http import HttpResponse\nfrom django.utils.decorators import method_decorator\nfrom django.views import View\nfrom header_filter import Enforce, Forbid, Header, header_rules\n\n\nclass DoThings(View):\n    # requests *lacking* an X-Planet: Mars header or *containing* an\n    # X-Rover: Curiosity header will be rejected\n    @method_decorator(header_rules([\n        Enforce(Header('HTTP_X_PLANET', 'Mars')),\n        Forbid(Header('HTTP_X_ROVER', 'Curiosity')),\n    ]))\n    def get(self, request, *args, **kwargs):\n        # ...\n        return HttpResponse()\n```\n\n## `HeaderFilterMiddleware`\n\nBy using the `HeaderFilterMiddleware` middleware, a list of rules can be\napplied globally, at application level. Every request will be then\nchecked against the global rule list, independently of views.\n\nFor this to work you need to properly tweak your Django settings module,\nas follows:\n\n```python\n# settings.py\nfrom header_filter import Enforce, Header\n\nMIDDLEWARE = [\n    # ...\n    'header_filter.HeaderFilterMiddleware',\n    # ...\n]\n\nHEADER_FILTER_RULES = [\n    Enforce(Header('HTTP_X_PLANET', 'Mars')),\n    # ...additional rules...\n]\n```\n\n## License\n\nSee: [LICENSE][1]\n\n[1]: https://github.com/sanjioh/django-header-filter/blob/master/LICENSE\n[2]: https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META\n[3]: https://docs.python.org/3/library/re.html#re.compile\n\nMIT License\n\nCopyright (c) 2019 Fabio Sangiovanni\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sanjioh/django-header-filter", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-header-filter", "package_url": "https://pypi.org/project/django-header-filter/", "platform": "", "project_url": "https://pypi.org/project/django-header-filter/", "project_urls": {"Homepage": "https://github.com/sanjioh/django-header-filter"}, "release_url": "https://pypi.org/project/django-header-filter/0.1.0/", "requires_dist": ["Django (<3.0.0,>=1.11.0)"], "requires_python": "", "summary": "Header-based request filtering for Django", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-header-filter</h1>\n<p><a href=\"https://github.com/sanjioh/django-header-filter/actions\" rel=\"nofollow\"><img alt=\"GitHub Actions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef6bf6e81dc9f05a8437df28536b3975d2c6ab7a/68747470733a2f2f6769746875622e636f6d2f73616e6a696f682f646a616e676f2d6865616465722d66696c7465722f776f726b666c6f77732f43492f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/sanjioh/django-header-filter\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2df98167bcba5809f9e2def00ec23ff4408b806c/68747470733a2f2f636f6465636f762e696f2f67682f73616e6a696f682f646a616e676f2d6865616465722d66696c7465722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/django-header-filter\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e10cbf9624a96cb679d264613626c7feb7701df9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d6865616465722d66696c746572\"></a>\n<a href=\"https://pypi.org/project/django-header-filter\" rel=\"nofollow\"><img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac3082c7e1c5ae2bb930f11a9d948e33585e10bf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d6865616465722d66696c746572\"></a>\n<a href=\"https://pypi.org/project/django-header-filter\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12bc9b1a1388f4894f98270831bd7168f5da10e4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f2d6865616465722d66696c746572\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p><code>django-header-filter</code> implements header-based filtering for Django\napplications. That is, it allows to reject requests whose headers are\nnot compliant to a user-defined set of rules.</p>\n<h2>Compatibility</h2>\n<p><code>django-header-filter</code> is compatible with:</p>\n<ul>\n<li>Python 3.5, 3,6, 3.7, 3.8</li>\n<li>Django 1.11, 2.0, 2.1, 2.2</li>\n</ul>\n<h2>Installation</h2>\n<pre>$ pip install django-header-filter\n</pre>\n<h2>Quickstart</h2>\n<p>Imagine you need to make sure that every request routed to a specific\nview has a header named <code>X-Planet</code> with <code>Mars</code> as value.</p>\n<p>This constraint can be implemented as follows:</p>\n<pre><span class=\"c1\"># views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Enforce</span><span class=\"p\">,</span> <span class=\"n\">Header</span><span class=\"p\">,</span> <span class=\"n\">header_rules</span>\n\n\n<span class=\"nd\">@header_rules</span><span class=\"p\">([</span><span class=\"n\">Enforce</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">))])</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_things</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">()</span>\n</pre>\n<p>In short:</p>\n<ul>\n<li>the <code>@header_rules</code> decorator applies a list of <em>rules</em> to the view</li>\n<li>in the example that list is made up of one single rule, <code>Enforce</code>,\nwhich allows the request to be handed over to the view only if the\nrespective <em>matcher</em> holds true (otherwise a <code>400 Bad Request</code> response\nis returned to the client)</li>\n<li>the <code>Header</code> matcher is responsible for checking whether a header\ncompliant to your needs belongs to the request or not</li>\n</ul>\n<h2>Matchers</h2>\n<p>Matchers are the basic building blocks for defining header-based\nfilters. Their job is to check whether user-defined header combinations\nbelong to the request or not.</p>\n<p><code>django-header-filter</code> provides the following matchers:</p>\n<h3><code>Header</code></h3>\n<p>The <code>Header</code> matcher must be instantiated with two arguments: the first\nargument is the <em>name</em> of the header; the second one is its <em>value</em>.</p>\n<p>The header name must be a string.</p>\n<blockquote>\n<p><strong>NOTE</strong>: header names in Django are usually different from the ones\nthat a client actually sends, due to some string manipulations that\nhappen server side (refer to the <a href=\"https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META\" rel=\"nofollow\">docs</a> for details). Matchers do\nnothing to guess the original names, so be sure to initialize them with\nthe right format (e.g. <code>X-Planet</code> becomes <code>HTTP_X_PLANET</code> when used for\na <code>Header</code> matcher instantiation).</p>\n</blockquote>\n<p>The type of the header value may be one of the following:</p>\n<ul>\n<li>a string</li>\n<li>a compiled regular expression object (as returned by\n<a href=\"https://docs.python.org/3/library/re.html#re.compile\" rel=\"nofollow\"><code>re.compile()</code></a>)</li>\n<li>an iterable of strings</li>\n</ul>\n<p>The <code>Header</code> matcher will check whether a header with the given name and\nvalue actually exists. As far as the value is concerned, the matching\nlogic depends on its type:</p>\n<ul>\n<li>exact match for strings</li>\n<li>regexp match for regular expression objects</li>\n<li>membership for iterables</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Header</span>\n\n<span class=\"c1\"># matches X-Planet: Mars</span>\n<span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># matches X-Planet: Mars or X-Planet: Mercury</span>\n<span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^M.*'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># matches X-Planet: Mars or X-Planet: Venus</span>\n<span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'Mars'</span><span class=\"p\">,</span> <span class=\"s1\">'Venus'</span><span class=\"p\">])</span>\n</pre>\n<h3><code>HeaderRegexp</code></h3>\n<p>The <code>HeaderRegexp</code> matcher is similar to the <code>Header</code> matcher, but the\narguments it takes at instantiation may be:</p>\n<ul>\n<li>compiled regular expression objects</li>\n<li>regexp pattern strings</li>\n</ul>\n<p>both for name and value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">HeaderRegexp</span>\n\n<span class=\"c1\"># matches X-Planet: Mars and X-Planet: Mercury</span>\n<span class=\"n\">HeaderRegexp</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^HTTP_X_PLANET$'</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^M.*'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># same as above</span>\n<span class=\"n\">HeaderRegexp</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^HTTP_X_PLANET$'</span><span class=\"p\">),</span> <span class=\"sa\">r</span><span class=\"s1\">'^M.*'</span><span class=\"p\">)</span>\n</pre>\n<h2>Matchers are composable</h2>\n<p>Matchers can be aggregated into composite matchers by means of bitwise\noperators:</p>\n<ul>\n<li><code>&amp;</code> (and)</li>\n<li><code>|</code> (or)</li>\n<li><code>^</code> (xor)</li>\n<li><code>~</code> (not)</li>\n</ul>\n<p>A composite matcher allows for checks that cannot be expressed by just\nusing the matchers described above.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Header</span>\n\n<span class=\"c1\"># matches if X-Planet: Mars and X-Rover: Curiosity are both present</span>\n<span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ROVER'</span><span class=\"p\">,</span> <span class=\"s1\">'Curiosity'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># matches if at least one of X-Planet: Mars and X-Rover: Curiosity is present</span>\n<span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ROVER'</span><span class=\"p\">,</span> <span class=\"s1\">'Curiosity'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># matches if exactly one of X-Planet: Mars and X-Rover: Curiosity is present</span>\n<span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ROVER'</span><span class=\"p\">,</span> <span class=\"s1\">'Curiosity'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># matches if X-Planet: Mars is not present</span>\n<span class=\"o\">~</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)</span>\n</pre>\n<p>From the usage point of view, there's no difference between a simple\nmatcher and a composite one: both can be used in the same contexts.\nBesides, there's no limit in how much matchers can be combined: simple\nmatchers can be combined into composites, which in turn can be used as\natoms for further composition.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Header</span>\n\n<span class=\"c1\"># matches if X-Planet: Mars and X-Rover: Curiosity aren't both present</span>\n<span class=\"o\">~</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ROVER'</span><span class=\"p\">,</span> <span class=\"s1\">'Curiosity'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># matches if</span>\n<span class=\"c1\"># X-Planet: Mars is not present, and</span>\n<span class=\"c1\"># exactly one of X-Rover: Curiosity and X-Aliens: false is present</span>\n<span class=\"p\">(</span>\n    <span class=\"o\">~</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)</span>\n    <span class=\"o\">&amp;</span> <span class=\"p\">(</span>\n        <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ROVER'</span><span class=\"p\">,</span> <span class=\"s1\">'Curiosity'</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ALIENS'</span><span class=\"p\">,</span> <span class=\"s1\">'false'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Matchers support string representation</h2>\n<p>A matcher can be inspected by printing its string representation.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Header</span>\n\n<span class=\"n\">matcher1</span> <span class=\"o\">=</span> <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)</span>\n<span class=\"n\">matcher2</span> <span class=\"o\">=</span> <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ROVER'</span><span class=\"p\">,</span> <span class=\"s1\">'Curiosity'</span><span class=\"p\">)</span>\n<span class=\"n\">composite</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"n\">matcher1</span> <span class=\"o\">&amp;</span> <span class=\"n\">matcher2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">composite</span><span class=\"p\">))</span>\n<span class=\"c1\"># ~(Header('HTTP_X_PLANET', 'Mars') &amp; Header('HTTP_X_ROVER', 'Curiosity'))</span>\n</pre>\n<h2>Rules</h2>\n<p>Rules rely on matchers to implement actual header-based filtering.</p>\n<p><code>django-header-filter</code> provides two rules: <code>Enforce</code> and <code>Forbid</code>. Both\nrequire a matcher to be instantiated, but behave differently:</p>\n<ul>\n<li><code>Enforce</code> rejects requests whose headers <strong>do not</strong> comply with its\nmatcher</li>\n<li><code>Forbid</code> rejects requests whose headers <strong>do</strong> comply with its\nmatcher</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Enforce</span><span class=\"p\">,</span> <span class=\"n\">Forbid</span><span class=\"p\">,</span> <span class=\"n\">Header</span>\n\n<span class=\"c1\"># rejects requests *lacking* an X-Planet: Mars header</span>\n<span class=\"n\">Enforce</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># rejects requests *containing* an X-Planet: Mars header</span>\n<span class=\"n\">Forbid</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">))</span>\n</pre>\n<p>Rules can use matchers of any type (simple or composite).</p>\n<h2>Custom reject responses</h2>\n<p>By default rules reject requests with a\n<code>django.http.HttpResponseBadRequest</code> response.\nThe default behavior can be overridden by passing an optional argument\nat rule instantiation, named <code>reject_response</code>. The argument must be an\ninstance of a Django Response, which will be returned to the client\nwhenever the rule triggers the rejection of a request.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseNotFound</span>\n<span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Enforce</span><span class=\"p\">,</span> <span class=\"n\">Header</span>\n\n<span class=\"c1\"># rejects requests *lacking* an X-Planet: Mars header with a 404 response</span>\n<span class=\"n\">Enforce</span><span class=\"p\">(</span>\n    <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">),</span>\n    <span class=\"n\">reject_response</span><span class=\"o\">=</span><span class=\"n\">HttpResponseNotFound</span><span class=\"p\">(</span><span class=\"n\">reason</span><span class=\"o\">=</span><span class=\"s1\">'Sorry!'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<h2><code>@header_rules</code> decorator</h2>\n<p>The <code>@header_rules</code> decorator binds a list of rules to a view. The\ndecorator checks the headers of every request routed to that view\nagainst each rule of the list, in order. The first rule that results in\na rejection determines the response that will be sent back to the\nclient. If no rule triggers a rejection, the request is handed over to\nthe view for regular processing.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Enforce</span><span class=\"p\">,</span> <span class=\"n\">Forbid</span><span class=\"p\">,</span> <span class=\"n\">Header</span><span class=\"p\">,</span> <span class=\"n\">header_rules</span>\n\n\n<span class=\"c1\"># requests *lacking* an X-Planet: Mars header or *containing* an</span>\n<span class=\"c1\"># X-Rover: Curiosity header will be rejected</span>\n<span class=\"nd\">@header_rules</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">Enforce</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)),</span>\n        <span class=\"n\">Forbid</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ROVER'</span><span class=\"p\">,</span> <span class=\"s1\">'Curiosity'</span><span class=\"p\">)),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_things</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">()</span>\n</pre>\n<p><code>@header_rules</code> works fine with class-based views as well, by means of\n<code>@method_decorator</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">method_decorator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n<span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Enforce</span><span class=\"p\">,</span> <span class=\"n\">Forbid</span><span class=\"p\">,</span> <span class=\"n\">Header</span><span class=\"p\">,</span> <span class=\"n\">header_rules</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DoThings</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"c1\"># requests *lacking* an X-Planet: Mars header or *containing* an</span>\n    <span class=\"c1\"># X-Rover: Curiosity header will be rejected</span>\n    <span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">header_rules</span><span class=\"p\">([</span>\n        <span class=\"n\">Enforce</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)),</span>\n        <span class=\"n\">Forbid</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_ROVER'</span><span class=\"p\">,</span> <span class=\"s1\">'Curiosity'</span><span class=\"p\">)),</span>\n    <span class=\"p\">]))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">()</span>\n</pre>\n<h2><code>HeaderFilterMiddleware</code></h2>\n<p>By using the <code>HeaderFilterMiddleware</code> middleware, a list of rules can be\napplied globally, at application level. Every request will be then\nchecked against the global rule list, independently of views.</p>\n<p>For this to work you need to properly tweak your Django settings module,\nas follows:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">header_filter</span> <span class=\"kn\">import</span> <span class=\"n\">Enforce</span><span class=\"p\">,</span> <span class=\"n\">Header</span>\n\n<span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'header_filter.HeaderFilterMiddleware'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">HEADER_FILTER_RULES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Enforce</span><span class=\"p\">(</span><span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_X_PLANET'</span><span class=\"p\">,</span> <span class=\"s1\">'Mars'</span><span class=\"p\">)),</span>\n    <span class=\"c1\"># ...additional rules...</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>License</h2>\n<p>See: <a href=\"https://github.com/sanjioh/django-header-filter/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a></p>\n<p>MIT License</p>\n<p>Copyright (c) 2019 Fabio Sangiovanni</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 6122799, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "35de3cf487213d12dce8aef479c028e7", "sha256": "1c0a314746adda5737a99c8763693a75f84bd9f1534e4ea376a8e9d5c8fa8d1f"}, "downloads": -1, "filename": "django_header_filter-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "35de3cf487213d12dce8aef479c028e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9409, "upload_time": "2019-11-12T10:53:37", "upload_time_iso_8601": "2019-11-12T10:53:37.956218Z", "url": "https://files.pythonhosted.org/packages/32/5d/6c0fedf67097dd904ec3f33c59538ed00dbd2b63cc503b26bb6225111363/django_header_filter-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa821171d5b270adcf1f61b322023ab3", "sha256": "d626ad78033614def0795d27d6367e40563ca094b914bc63013cddf021d3a8ac"}, "downloads": -1, "filename": "django-header-filter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "aa821171d5b270adcf1f61b322023ab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15401, "upload_time": "2019-11-12T10:53:40", "upload_time_iso_8601": "2019-11-12T10:53:40.816420Z", "url": "https://files.pythonhosted.org/packages/99/f3/a052e94672518311b78c467c2c6f691aacd90b9ce9dc2e2b3386fa8eca5d/django-header-filter-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35de3cf487213d12dce8aef479c028e7", "sha256": "1c0a314746adda5737a99c8763693a75f84bd9f1534e4ea376a8e9d5c8fa8d1f"}, "downloads": -1, "filename": "django_header_filter-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "35de3cf487213d12dce8aef479c028e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9409, "upload_time": "2019-11-12T10:53:37", "upload_time_iso_8601": "2019-11-12T10:53:37.956218Z", "url": "https://files.pythonhosted.org/packages/32/5d/6c0fedf67097dd904ec3f33c59538ed00dbd2b63cc503b26bb6225111363/django_header_filter-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa821171d5b270adcf1f61b322023ab3", "sha256": "d626ad78033614def0795d27d6367e40563ca094b914bc63013cddf021d3a8ac"}, "downloads": -1, "filename": "django-header-filter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "aa821171d5b270adcf1f61b322023ab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15401, "upload_time": "2019-11-12T10:53:40", "upload_time_iso_8601": "2019-11-12T10:53:40.816420Z", "url": "https://files.pythonhosted.org/packages/99/f3/a052e94672518311b78c467c2c6f691aacd90b9ce9dc2e2b3386fa8eca5d/django-header-filter-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:45 2020"}