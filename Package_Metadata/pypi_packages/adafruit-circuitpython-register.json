{"info": {"author": "Adafruit Industries", "author_email": "circuitpython@adafruit.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries", "Topic :: System :: Hardware"], "description": "Introduction\n============\n\n.. image:: https://readthedocs.org/projects/adafruit-micropython-register/badge/?version=latest\n    :target: https://circuitpython.readthedocs.io/projects/register/en/latest/\n    :alt: Documentation Status\n\n.. image :: https://img.shields.io/discord/327254708534116352.svg\n    :target: https://discord.gg/nBQh6qu\n    :alt: Discord\n\n.. image:: https://github.com/adafruit/Adafruit_CircuitPython_Register/workflows/Build%20CI/badge.svg\n    :target: https://github.com/adafruit/Adafruit_CircuitPython_Register/actions/\n    :alt: Build Status\n\nThis library provides a variety of data descriptor class for `Adafruit\nCircuitPython <https://github.com/adafruit/circuitpython>`_ that makes it really\nsimple to write a device drivers for a I2C and SPI register based devices. Data\ndescriptors act like basic attributes from the outside which makes using them\nreally easy to use.\n\nDependencies\n=============\nThis driver depends on:\n\n* `Adafruit CircuitPython <https://github.com/adafruit/circuitpython>`_\n\nPlease ensure all dependencies are available on the CircuitPython filesystem.\nThis is easily achieved by downloading\n`the Adafruit library and driver bundle <https://github.com/adafruit/Adafruit_CircuitPython_Bundle>`_.\n\nInstalling from PyPI\n====================\n\nOn supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally `from\nPyPI <https://pypi.org/project/adafruit-circuitpython-register/>`_. To install for current user:\n\n.. code-block:: shell\n\n    pip3 install adafruit-circuitpython-register\n    \nTo install system-wide (this may be required in some cases):\n\n.. code-block:: shell\n\n    sudo pip3 install adafruit-circuitpython-register\n    \nTo install in a virtual environment in your current project:\n\n.. code-block:: shell\n\n    mkdir project-name && cd project-name\n    python3 -m venv .env\n    source .env/bin/activate\n    pip3 install adafruit-circuitpython-register\n    \nUsage Example\n=============\n\nCreating a driver\n-----------------\n\nCreating a driver with the register library is really easy. First, import the\nregister modules you need from the `available modules <adafruit_register/index.html>`_:\n\n.. code-block:: python\n\n    from adafruit_register import i2c_bit\n    from adafruit_bus_device import i2c_device\n\nNext, define where the bit is located in the device's memory map:\n\n.. code-block:: python\n\n    class HelloWorldDevice:\n        \"\"\"Device with two bits to control when the words 'hello' and 'world' are lit.\"\"\"\n\n        hello = i2c_bit.RWBit(0x0, 0x0)\n        \"\"\"Bit to indicate if hello is lit.\"\"\"\n\n        world = i2c_bit.RWBit(0x1, 0x0)\n        \"\"\"Bit to indicate if world is lit.\"\"\"\n\nLastly, we need to add an ``i2c_device`` member of type `I2CDevice <https://circuitpython.readthedocs.io/projects/busdevice/en/latest/api.html#adafruit_bus_device.i2c_device.I2CDevice>`_\nthat manages sharing the I2C bus for us. Make sure the name is exact, otherwise\nthe registers will not be able to find it. Also, make sure that the i2c device\nimplements the `busio.I2C` interface.\n\n.. code-block:: python\n\n        def __init__(self, i2c, device_address=0x0):\n            self.i2c_device = i2c_device.I2CDevice(i2c, device_address)\n\nThats it! Now we have a class we can use to talk to those registers:\n\n.. code-block:: python\n\n    import busio\n    from board import *\n\n    with busio.I2C(SCL, SDA) as i2c:\n        device = HelloWorldDevice(i2c)\n        device.hello = True\n        device.world = True\n\nAdding register types\n--------------------------\n\nAdding a new register type is a little more complicated because you need to be\ncareful and minimize the amount of memory the class will take. If you don't,\nthen a driver with five registers of your type could take up five times more\nextra memory.\n\nFirst, determine whether the new register class should go in an existing module\nor not. When in doubt choose a new module. The more finer grained the modules\nare, the fewer extra classes a driver needs to load in.\n\nHere is the start of the `RWBit` class:\n\n.. code-block:: python\n\n    class RWBit:\n        \"\"\"\n        Single bit register that is readable and writeable.\n\n        Values are `bool`\n\n        :param int register_address: The register address to read the bit from\n        :param type bit: The bit index within the byte at ``register_address``\n        \"\"\"\n        def __init__(self, register_address, bit):\n            self.bit_mask = 1 << bit\n            self.buffer = bytearray(2)\n            self.buffer[0] = register_address\n\nThe first thing done is writing an RST formatted class comment that explains the\nfunctionality of the register class and any requirements of the register layout.\nIt also documents the parameters passed into the constructor (``__init__``) which\nconfigure the register location in the device map. It does not include the\ndevice address or the i2c object because its shared on the device class instance\ninstead. That way if you have multiple of the same device on the same bus, the\nregister classes will be shared.\n\nIn ``__init__`` we only use two member variable because each costs 8 bytes of\nmemory plus the memory for the value. And remember this gets multiplied by the\nnumber of registers of this type in a driver! Thats why we pack both the\nregister address and data byte into one bytearray. We could use two byte arrays\nof size one but each MicroPython object is 16 bytes minimum due to the garbage\ncollector. So, by sharing a byte array we keep it to the 16 byte minimum instead\nof 32 bytes. Each `memoryview` also costs 16 bytes minimum so we avoid them too.\n\nAnother thing we could do is allocate the `bytearray` only when we need it. This\nhas the advantage of taking less memory up front but the cost of allocating it\nevery access and risking it failing. If you want to add a version of ``Foo`` that\nlazily allocates the underlying buffer call it ``FooLazy``.\n\nOk, onward. To make a `data descriptor <https://docs.python.org/3/howto/descriptor.html>`_\nwe must implement ``__get__`` and ``__set__``.\n\n.. code-block:: python\n\n    def __get__(self, obj, objtype=None):\n        with obj.i2c_device as i2c:\n            i2c.write_then_readinto(self.buffer, self.buffer, out_end=1, in_start=1)\n        return bool(self.buffer[1] & self.bit_mask)\n\n    def __set__(self, obj, value):\n        with obj.i2c_device as i2c:\n            i2c.write_then_readinto(self.buffer, self.buffer, out_end=1, in_start=1)\n            if value:\n                self.buffer[1] |= self.bit_mask\n            else:\n                self.buffer[1] &= ~self.bit_mask\n            obj.i2c_device.write(self.buffer)\n\nAs you can see, we have two places to get state from. First, ``self`` stores the\nregister class members which locate the register within the device memory map.\nSecond, ``obj`` is the driver class that uses the register class which must by\ndefinition provide a `I2CDevice <https://circuitpython.readthedocs.io/projects/busdevice/en/latest/api.html#adafruit_bus_device.i2c_device.I2CDevice>`_ compatible\nobject as ``i2c_device``. This object does two thing for us:\n\n  1. Waits for the bus to free, locks it as we use it and frees it after.\n  2. Saves the device address and other settings so we don't have to.\n\nNote that we take heavy advantage of the ``start`` and ``end`` parameters to the\ni2c functions to slice the buffer without actually allocating anything extra.\nThey function just like ``self.buffer[start:end]`` without the extra allocation.\n\nThats it! Now you can use your new register class like the example above. Just\nremember to keep the number of members to a minimum because the class may be\nused a bunch of times.\n\n\nContributing\n============\n\nContributions are welcome! Please read our `Code of Conduct\n<https://github.com/adafruit/Adafruit_CircuitPython_Register/blob/master/CODE_OF_CONDUCT.md>`_\nbefore contributing to help this project stay welcoming.\n\nDocumentation\n=============\n\nFor information on building library documentation, please check out `this guide <https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library/sharing-our-docs-on-readthedocs#sphinx-5-1>`_.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adafruit/Adafruit_CircuitPython_Register", "keywords": "adafruit register micropython circuitpython", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "adafruit-circuitpython-register", "package_url": "https://pypi.org/project/adafruit-circuitpython-register/", "platform": "", "project_url": "https://pypi.org/project/adafruit-circuitpython-register/", "project_urls": {"Homepage": "https://github.com/adafruit/Adafruit_CircuitPython_Register"}, "release_url": "https://pypi.org/project/adafruit-circuitpython-register/1.8.1/", "requires_dist": null, "requires_python": "", "summary": "CircuitPython data descriptor classes to represent hardware registers on I2C and SPI devices.", "version": "1.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<a href=\"https://circuitpython.readthedocs.io/projects/register/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d162fa12084bdb259f1ab8ab1606e45d5504904e/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61646166727569742d6d6963726f707974686f6e2d72656769737465722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://discord.gg/nBQh6qu\" rel=\"nofollow\"><img alt=\"Discord\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2973e7de9caf359680953316fa3b541f702086c/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3332373235343730383533343131363335322e737667\"></a>\n<a href=\"https://github.com/adafruit/Adafruit_CircuitPython_Register/actions/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfb5b6158ba79014cedda0c9ae0593a81334dbd0/68747470733a2f2f6769746875622e636f6d2f61646166727569742f41646166727569745f43697263756974507974686f6e5f52656769737465722f776f726b666c6f77732f4275696c6425323043492f62616467652e737667\"></a>\n<p>This library provides a variety of data descriptor class for <a href=\"https://github.com/adafruit/circuitpython\" rel=\"nofollow\">Adafruit\nCircuitPython</a> that makes it really\nsimple to write a device drivers for a I2C and SPI register based devices. Data\ndescriptors act like basic attributes from the outside which makes using them\nreally easy to use.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>This driver depends on:</p>\n<ul>\n<li><a href=\"https://github.com/adafruit/circuitpython\" rel=\"nofollow\">Adafruit CircuitPython</a></li>\n</ul>\n<p>Please ensure all dependencies are available on the CircuitPython filesystem.\nThis is easily achieved by downloading\n<a href=\"https://github.com/adafruit/Adafruit_CircuitPython_Bundle\" rel=\"nofollow\">the Adafruit library and driver bundle</a>.</p>\n</div>\n<div id=\"installing-from-pypi\">\n<h2>Installing from PyPI</h2>\n<p>On supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally <a href=\"https://pypi.org/project/adafruit-circuitpython-register/\" rel=\"nofollow\">from\nPyPI</a>. To install for current user:</p>\n<pre>pip3 install adafruit-circuitpython-register\n</pre>\n<p>To install system-wide (this may be required in some cases):</p>\n<pre>sudo pip3 install adafruit-circuitpython-register\n</pre>\n<p>To install in a virtual environment in your current project:</p>\n<pre>mkdir project-name <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> project-name\npython3 -m venv .env\n<span class=\"nb\">source</span> .env/bin/activate\npip3 install adafruit-circuitpython-register\n</pre>\n</div>\n<div id=\"usage-example\">\n<h2>Usage Example</h2>\n<div id=\"creating-a-driver\">\n<h3>Creating a driver</h3>\n<p>Creating a driver with the register library is really easy. First, import the\nregister modules you need from the <a href=\"adafruit_register/index.html\" rel=\"nofollow\">available modules</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">adafruit_register</span> <span class=\"kn\">import</span> <span class=\"n\">i2c_bit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">adafruit_bus_device</span> <span class=\"kn\">import</span> <span class=\"n\">i2c_device</span>\n</pre>\n<p>Next, define where the bit is located in the device\u2019s memory map:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">HelloWorldDevice</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Device with two bits to control when the words 'hello' and 'world' are lit.\"\"\"</span>\n\n    <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">i2c_bit</span><span class=\"o\">.</span><span class=\"n\">RWBit</span><span class=\"p\">(</span><span class=\"mh\">0x0</span><span class=\"p\">,</span> <span class=\"mh\">0x0</span><span class=\"p\">)</span>\n    <span class=\"sd\">\"\"\"Bit to indicate if hello is lit.\"\"\"</span>\n\n    <span class=\"n\">world</span> <span class=\"o\">=</span> <span class=\"n\">i2c_bit</span><span class=\"o\">.</span><span class=\"n\">RWBit</span><span class=\"p\">(</span><span class=\"mh\">0x1</span><span class=\"p\">,</span> <span class=\"mh\">0x0</span><span class=\"p\">)</span>\n    <span class=\"sd\">\"\"\"Bit to indicate if world is lit.\"\"\"</span>\n</pre>\n<p>Lastly, we need to add an <tt>i2c_device</tt> member of type <a href=\"https://circuitpython.readthedocs.io/projects/busdevice/en/latest/api.html#adafruit_bus_device.i2c_device.I2CDevice\" rel=\"nofollow\">I2CDevice</a>\nthat manages sharing the I2C bus for us. Make sure the name is exact, otherwise\nthe registers will not be able to find it. Also, make sure that the i2c device\nimplements the <cite>busio.I2C</cite> interface.</p>\n<pre><span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i2c</span><span class=\"p\">,</span> <span class=\"n\">device_address</span><span class=\"o\">=</span><span class=\"mh\">0x0</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">i2c_device</span> <span class=\"o\">=</span> <span class=\"n\">i2c_device</span><span class=\"o\">.</span><span class=\"n\">I2CDevice</span><span class=\"p\">(</span><span class=\"n\">i2c</span><span class=\"p\">,</span> <span class=\"n\">device_address</span><span class=\"p\">)</span>\n</pre>\n<p>Thats it! Now we have a class we can use to talk to those registers:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">busio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">board</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">with</span> <span class=\"n\">busio</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"p\">(</span><span class=\"n\">SCL</span><span class=\"p\">,</span> <span class=\"n\">SDA</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">i2c</span><span class=\"p\">:</span>\n    <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">HelloWorldDevice</span><span class=\"p\">(</span><span class=\"n\">i2c</span><span class=\"p\">)</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">world</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"adding-register-types\">\n<h3>Adding register types</h3>\n<p>Adding a new register type is a little more complicated because you need to be\ncareful and minimize the amount of memory the class will take. If you don\u2019t,\nthen a driver with five registers of your type could take up five times more\nextra memory.</p>\n<p>First, determine whether the new register class should go in an existing module\nor not. When in doubt choose a new module. The more finer grained the modules\nare, the fewer extra classes a driver needs to load in.</p>\n<p>Here is the start of the <cite>RWBit</cite> class:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">RWBit</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"\n    Single bit register that is readable and writeable.\n\n    Values are `bool`\n\n    :param int register_address: The register address to read the bit from\n    :param type bit: The bit index within the byte at ``register_address``\n    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">register_address</span><span class=\"p\">,</span> <span class=\"n\">bit</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bit_mask</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">bit</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">register_address</span>\n</pre>\n<p>The first thing done is writing an RST formatted class comment that explains the\nfunctionality of the register class and any requirements of the register layout.\nIt also documents the parameters passed into the constructor (<tt>__init__</tt>) which\nconfigure the register location in the device map. It does not include the\ndevice address or the i2c object because its shared on the device class instance\ninstead. That way if you have multiple of the same device on the same bus, the\nregister classes will be shared.</p>\n<p>In <tt>__init__</tt> we only use two member variable because each costs 8 bytes of\nmemory plus the memory for the value. And remember this gets multiplied by the\nnumber of registers of this type in a driver! Thats why we pack both the\nregister address and data byte into one bytearray. We could use two byte arrays\nof size one but each MicroPython object is 16 bytes minimum due to the garbage\ncollector. So, by sharing a byte array we keep it to the 16 byte minimum instead\nof 32 bytes. Each <cite>memoryview</cite> also costs 16 bytes minimum so we avoid them too.</p>\n<p>Another thing we could do is allocate the <cite>bytearray</cite> only when we need it. This\nhas the advantage of taking less memory up front but the cost of allocating it\nevery access and risking it failing. If you want to add a version of <tt>Foo</tt> that\nlazily allocates the underlying buffer call it <tt>FooLazy</tt>.</p>\n<p>Ok, onward. To make a <a href=\"https://docs.python.org/3/howto/descriptor.html\" rel=\"nofollow\">data descriptor</a>\nwe must implement <tt>__get__</tt> and <tt>__set__</tt>.</p>\n<pre><span class=\"k\">def</span> <span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">objtype</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">i2c_device</span> <span class=\"k\">as</span> <span class=\"n\">i2c</span><span class=\"p\">:</span>\n        <span class=\"n\">i2c</span><span class=\"o\">.</span><span class=\"n\">write_then_readinto</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">out_end</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">in_start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bit_mask</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"fm\">__set__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">i2c_device</span> <span class=\"k\">as</span> <span class=\"n\">i2c</span><span class=\"p\">:</span>\n        <span class=\"n\">i2c</span><span class=\"o\">.</span><span class=\"n\">write_then_readinto</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">out_end</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">in_start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">|=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bit_mask</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&amp;=</span> <span class=\"o\">~</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bit_mask</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">i2c_device</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, we have two places to get state from. First, <tt>self</tt> stores the\nregister class members which locate the register within the device memory map.\nSecond, <tt>obj</tt> is the driver class that uses the register class which must by\ndefinition provide a <a href=\"https://circuitpython.readthedocs.io/projects/busdevice/en/latest/api.html#adafruit_bus_device.i2c_device.I2CDevice\" rel=\"nofollow\">I2CDevice</a> compatible\nobject as <tt>i2c_device</tt>. This object does two thing for us:</p>\n<blockquote>\n<ol>\n<li>Waits for the bus to free, locks it as we use it and frees it after.</li>\n<li>Saves the device address and other settings so we don\u2019t have to.</li>\n</ol>\n</blockquote>\n<p>Note that we take heavy advantage of the <tt>start</tt> and <tt>end</tt> parameters to the\ni2c functions to slice the buffer without actually allocating anything extra.\nThey function just like <tt>self.buffer[start:end]</tt> without the extra allocation.</p>\n<p>Thats it! Now you can use your new register class like the example above. Just\nremember to keep the number of members to a minimum because the class may be\nused a bunch of times.</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are welcome! Please read our <a href=\"https://github.com/adafruit/Adafruit_CircuitPython_Register/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a>\nbefore contributing to help this project stay welcoming.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>For information on building library documentation, please check out <a href=\"https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library/sharing-our-docs-on-readthedocs#sphinx-5-1\" rel=\"nofollow\">this guide</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6995333, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "3017a12e0420d5d4e74436fe183dc5ea", "sha256": "49f432f2c2df6c297b33aa87e313e72cf436ce9cc3f4cef6880bbc5f57be259b"}, "downloads": -1, "filename": "adafruit-circuitpython-register-0.0.4.tar.gz", "has_sig": false, "md5_digest": "3017a12e0420d5d4e74436fe183dc5ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15214, "upload_time": "2017-01-09T23:52:00", "upload_time_iso_8601": "2017-01-09T23:52:00.585131Z", "url": "https://files.pythonhosted.org/packages/ab/d6/df12059af615c431b719ebd7a101b77b6c16e356d84ef0cb72f2e5107e24/adafruit-circuitpython-register-0.0.4.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "34c1c433b7fd2bb3faf27b6ccac261ad", "sha256": "597e2196b8da916d18d4b29b5a6e5db8ac37d5af09a2941f235b026e0bba9deb"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.3.0.tar.gz", "has_sig": false, "md5_digest": "34c1c433b7fd2bb3faf27b6ccac261ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29573, "upload_time": "2018-06-28T22:16:06", "upload_time_iso_8601": "2018-06-28T22:16:06.577651Z", "url": "https://files.pythonhosted.org/packages/7f/60/1df52e192fa3a6b721b2c8cf067e9ee41717df82d40d410f9887e3fad4cb/adafruit-circuitpython-register-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "61a86d2c70ba26da0d442d2fd29f0545", "sha256": "4d62c1751abc89d350fc0125fa14b60a0e5aa09522ba566b3caa81373d367747"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.3.1.tar.gz", "has_sig": false, "md5_digest": "61a86d2c70ba26da0d442d2fd29f0545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30614, "upload_time": "2018-08-03T20:28:57", "upload_time_iso_8601": "2018-08-03T20:28:57.630949Z", "url": "https://files.pythonhosted.org/packages/44/00/c779e4ae7f8c9facc92ffb29d05929e7730f4b5afff069c3cb15dcfaba31/adafruit-circuitpython-register-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "6dcb64d9315dce572c8a1847ab544b67", "sha256": "764d89d0a02a9fe1603a2a1530a76b8256a24b909cf22ae27518d04db5b4096a"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.3.2.tar.gz", "has_sig": false, "md5_digest": "6dcb64d9315dce572c8a1847ab544b67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30611, "upload_time": "2018-11-12T17:17:36", "upload_time_iso_8601": "2018-11-12T17:17:36.617505Z", "url": "https://files.pythonhosted.org/packages/02/85/60dd4cca7df9ac9076cac5990cc06ce506b31292583d744b9dd5c5d71003/adafruit-circuitpython-register-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "1b60bf9c5fefdd61f726bb20b25dae78", "sha256": "1fc1c52df60f5c7240c89b5d118feb25462228562976de02bdd5ca6e51faa93b"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.3.3.tar.gz", "has_sig": false, "md5_digest": "1b60bf9c5fefdd61f726bb20b25dae78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29905, "upload_time": "2019-01-15T00:20:23", "upload_time_iso_8601": "2019-01-15T00:20:23.090498Z", "url": "https://files.pythonhosted.org/packages/05/57/a807546d297f7083cba899490ef451740bb6b0ef053b7132cfa8bcaeb128/adafruit-circuitpython-register-1.3.3.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "3843bb577128cde6fcb0f4af0630b394", "sha256": "d405921e49d3be193e98e515ad9b2b53ca583f70bd188068c0ae245629c7cea5"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.4.0.tar.gz", "has_sig": false, "md5_digest": "3843bb577128cde6fcb0f4af0630b394", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29926, "upload_time": "2019-02-07T21:19:14", "upload_time_iso_8601": "2019-02-07T21:19:14.692696Z", "url": "https://files.pythonhosted.org/packages/07/47/d83d017ac6110b94827c4c004019b8a9991c1a065b517c8c3e2120b4fe31/adafruit-circuitpython-register-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "5532b79ca201108a3ed2c309b8ef2b85", "sha256": "a6d9c847b4480a7e5646604c3895f362cd2dae229d062a3b0e58a6549792fa70"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.5.0.tar.gz", "has_sig": false, "md5_digest": "5532b79ca201108a3ed2c309b8ef2b85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29988, "upload_time": "2019-02-08T22:43:43", "upload_time_iso_8601": "2019-02-08T22:43:43.931192Z", "url": "https://files.pythonhosted.org/packages/f4/26/a8f9ad5612f1f25c18f7009f6a8def862c676503ba726434ace6a162b4ec/adafruit-circuitpython-register-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "8bc89643ace9ef961d43b42f3defbdd8", "sha256": "8b5b08d88b16c872e27c2bb263b2d773874585f6880d617f994d84be99c7c485"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.5.1.tar.gz", "has_sig": false, "md5_digest": "8bc89643ace9ef961d43b42f3defbdd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30061, "upload_time": "2019-02-15T18:33:25", "upload_time_iso_8601": "2019-02-15T18:33:25.339682Z", "url": "https://files.pythonhosted.org/packages/44/2f/27d56ffda0e8197b4b315658367357eb0170a64e146026f9269a0068a5bd/adafruit-circuitpython-register-1.5.1.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "80f3d3c2afb4acbf0fc7d5ec13bc5391", "sha256": "f0fdfb9526468f77eeea708b0fdd02aec2f7235b7c16a30537d435da81d0620a"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.6.0.tar.gz", "has_sig": false, "md5_digest": "80f3d3c2afb4acbf0fc7d5ec13bc5391", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30132, "upload_time": "2019-02-21T18:55:39", "upload_time_iso_8601": "2019-02-21T18:55:39.730120Z", "url": "https://files.pythonhosted.org/packages/2a/43/fb7a53630dcec60587f7301a683f114ff336591f2045ca4f045c50dd75f7/adafruit-circuitpython-register-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "e488c57d6534179a459a5ea71ff112a0", "sha256": "d1749f54e416eaf6ef4138fa022e9a909035c0c6411df810fa7d327a582cbb6b"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.7.0.tar.gz", "has_sig": false, "md5_digest": "e488c57d6534179a459a5ea71ff112a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30264, "upload_time": "2019-03-13T18:09:13", "upload_time_iso_8601": "2019-03-13T18:09:13.700782Z", "url": "https://files.pythonhosted.org/packages/be/dc/5480b680cd107068b43f074b1467de5b8ea0816735efc56427901138a0ce/adafruit-circuitpython-register-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "7fc3900c62c802e20fe7f29cc454f85c", "sha256": "3e6e7fe409067819f69212e5f15f4967512caeb678893fd56981f0fd13ea84e2"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.7.1.tar.gz", "has_sig": false, "md5_digest": "7fc3900c62c802e20fe7f29cc454f85c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30282, "upload_time": "2019-05-11T15:21:06", "upload_time_iso_8601": "2019-05-11T15:21:06.816616Z", "url": "https://files.pythonhosted.org/packages/ce/a5/4d4df4fbe69f963a14f58d78eef0e713dd90be644a4e8d4a858e8ba880a3/adafruit-circuitpython-register-1.7.1.tar.gz", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "5ed454cf8206569a3cc824a4d10cc9a8", "sha256": "f9269e10cce67c9458448a6f595b95fdd92c5fb79fe4d0304eb32e1fef78ec82"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.7.4.tar.gz", "has_sig": false, "md5_digest": "5ed454cf8206569a3cc824a4d10cc9a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28872, "upload_time": "2020-01-24T17:36:00", "upload_time_iso_8601": "2020-01-24T17:36:00.238718Z", "url": "https://files.pythonhosted.org/packages/87/1d/993238af4cc318b8074f9e51cf447a1c260a129177c94912f15f15f92efa/adafruit-circuitpython-register-1.7.4.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "3f7d6ca9b024273abb87ea736164950e", "sha256": "a368422fc94899c5ced8e99c98e11d5dde91d818c092edf3f9a618e2a2196b29"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.8.0.tar.gz", "has_sig": false, "md5_digest": "3f7d6ca9b024273abb87ea736164950e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29111, "upload_time": "2020-03-20T15:33:06", "upload_time_iso_8601": "2020-03-20T15:33:06.374017Z", "url": "https://files.pythonhosted.org/packages/a5/ef/b592fb75513345b8fab0dd690d553690547216cd4e106b4278c784eae513/adafruit-circuitpython-register-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "604f12dd33f0d6d9befdba30b40e233c", "sha256": "ec415e5c6b68530712fad2e30eb745075d2bc66e9283b65b3d9b267c772958ee"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.8.1.tar.gz", "has_sig": false, "md5_digest": "604f12dd33f0d6d9befdba30b40e233c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29125, "upload_time": "2020-04-10T17:58:16", "upload_time_iso_8601": "2020-04-10T17:58:16.160990Z", "url": "https://files.pythonhosted.org/packages/f9/a8/5f1fba232ec45375a91e79473544c77cbeeee6a94df67bcb109100f0d81e/adafruit-circuitpython-register-1.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "604f12dd33f0d6d9befdba30b40e233c", "sha256": "ec415e5c6b68530712fad2e30eb745075d2bc66e9283b65b3d9b267c772958ee"}, "downloads": -1, "filename": "adafruit-circuitpython-register-1.8.1.tar.gz", "has_sig": false, "md5_digest": "604f12dd33f0d6d9befdba30b40e233c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29125, "upload_time": "2020-04-10T17:58:16", "upload_time_iso_8601": "2020-04-10T17:58:16.160990Z", "url": "https://files.pythonhosted.org/packages/f9/a8/5f1fba232ec45375a91e79473544c77cbeeee6a94df67bcb109100f0d81e/adafruit-circuitpython-register-1.8.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:54 2020"}