{"info": {"author": "Daniel Farr\u00e9 Manzorro", "author_email": "d.farre.m@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# BDD Coder\n[![PyPI version](https://badge.fury.io/py/bdd-coder.svg)](https://badge.fury.io/py/bdd-coder) [![PyPI downloads](https://img.shields.io/pypi/dm/bdd-coder.svg)](https://img.shields.io/pypi/dm/bdd-coder)\n\nA package devoted to agile implementation of **class-based behavioral tests**. It consists of:\n\n* [coder](https://bitbucket.org/coleopter/bdd-coder/src/master/bdd_coder/coder) package able to\n\n    - make a tester package - test suite - blueprint - see [example/tests](https://bitbucket.org/coleopter/bdd-coder/src/master/example/tests) - from user story specifications in YAML files - see [example/specs](https://bitbucket.org/coleopter/bdd-coder/src/master/example/specs),\n\n    - patch such tester package with new YAML specifications - see [example/new_specs](https://bitbucket.org/coleopter/bdd-coder/src/master/example/new_specs) and [example/new_tests](https://bitbucket.org/coleopter/bdd-coder/src/master/example/new_tests)\n\n* [tester](https://bitbucket.org/coleopter/bdd-coder/src/master/bdd_coder/tester) package employed to run such blueprint tests, which also has the ability to export their docs as YAML specifications\n\nTest with [tox](https://tox.readthedocs.io/en/latest/) - see tox.ini.\n\nSee [mastermind](https://bitbucket.org/coleopter/mastermind) for an application.\n\n## Story\nThis package was born as a study of Behavior Driven Development; and from the wish of having a handy implementation of Gherkin language in class-based tests, to be employed so that development cycles start with coding a behavioral test suite containing the scenario specifications in test case method `__doc__`s - as `bdd_coder.tester` achieves.\n\nIn conjunction with `bdd_coder.coder`, development cycles *start* with:\n\n1. A set of YAML specifications is agreed and crafted\n\n2. From these, a test suite is automatically created or patched\n\n3. New *test step methods* are crafted to efficiently achieve 100% behavioral coverage\n\n## User Story (feature) specifications\nEach test suite (tester package) has a structure\n```\n\u251c\u2500 __init__.py\n\u251c\u2500 aliases.py\n\u251c\u2500 base.py\n\u2514\u2500 test_stories.py\n```\ncorresponding to a specifications directory\n```\n\u251c\u2500 aliases.yml\n\u2514\u2500 features/\n   \u251c\u2500 some-story.yml\n   \u251c\u2500 another-story.yml\n   \u251c\u2500 ...\n   \u2514\u2500 this-story.yml\n```\nA story YAML file (the ones under features/) corresponds to a test case class declared into `test_stories.py`, consisting mainly of scenario declarations:\n```\nTitle: <Story title>  # --> class __name__\n\nStory: |-  # free text --> class __doc__\n  As a <user group>\n  I want <feature>\n  In order to/so that <goal>\n\nScenarios:\n  Scenario name:  # --> scenario __doc__\n    - Step \"1\" with \"A\" gives `x` and `y`\n      # ...\n    - Last step with \"B\" gives `result`\n  # ...\n\n# Extra class atributes - ignored in patching\nExtra name:\n  <yaml-attribute-coded-with-str(yaml.load)>\n...\n```\nSo only the keys `Title`, `Story`, `Scenarios` are reserved.\n\nScenario names are unique if `bdd_coder.tester.decorators.Steps` takes `validate=True` (the default), which also validates class hierarchy.\n\n### Step declarations\n* Start with a whole word - normally 'Given', 'When', or 'Then' - that is ignored by the tester (only order matters)\n\n* May contain:\n\n    + Input `*args` sequence of values in double-quotes - passed to the step method\n\n    + Output variable name sequence using backticks - if non-empty, the method should return the output values as a tuple, which are collected by the `bdd_coder.tester.decorators.Steps` decorator instance, by name into its `outputs` map of sequences\n\n* May refer to a scenario name, either belonging to the same class (story), or to an inherited class\n\n### Aliases\nDeclared as\n```\nAlias sentence:  # --> method to call\n  - Step sentence  # from scenario __doc__s\n  - Another step sentence\n  # ...\n# ...\n```\ncorresponding to `aliases.py`:\n```\nMAP = {\n    'step_sentence': 'alias_sentence',\n    'another_step_sentence': 'alias_sentence',\n    # ...\n}\n```\n\n## Tester\nThe core of each test suite consists of the following required class declarations in its `base.py` module:\n```\nfrom test.case.module import MyTestCase\n\nfrom bdd_coder.tester import decorators\nfrom bdd_coder.tester import tester\n\nfrom . import aliases\n\nsteps = decorators.Steps(aliases.MAP, logs_parent='example/tests')\n\n\n@steps\nclass BddTester(tester.BddTester):\n    \"\"\"\n    The decorated BddTester subclass of this suite - manages scenario runs\n    \"\"\"\n\n\nclass BaseTestCase(tester.BaseTestCase, MyTestCase):\n    \"\"\"\n    The base test case of this suite - manages test runs\n    \"\"\"\n```\nThen, story test cases are declared in `test_stories.py`, with\n```\nfrom . import base\nfrom bdd_coder.tester import decorators\n```\nas\n```\nclass StoryTitle(BddTesterSubclass, AnotherBddTesterSubclass, ...[, base.BaseTestCase]):\n```\nwith scenario declarations\n```\n  @decorators.Scenario(base.steps):\n  def [test_]scenario_name(self):\n      \"\"\"\n      Step \"1\" with \"A\" gives `x` and `y`\n      ...\n      Last step with \"B\" gives `result`\n      \"\"\"\n```\nthat will run according to their `__doc__`s, and the necessary step method definitions.\n\n\n### Test run logging\nImplemented behavioural test step runs are logged by `bdd_coder.tester` as\n```\n1 \u2705 ClearBoard.even_boards:\n  1.1 - 2019-03-18 17:30:13.071420 \u2705 i_request_a_new_game_with_an_even_number_of_boards [] \u21a6 ('Even Game',)\n  1.2 - 2019-03-18 17:30:13.071420 \u2705 a_game_is_created_with_boards_of__guesses ['12'] \u21a6 ()\n\n2 \u2705 ClearBoard.test_start_board:\n  2.1 - 2019-03-18 17:30:13.071420 \u2705 even_boards [] \u21a6 ()\n  2.2 - 2019-03-18 17:30:13.071420 \u2705 i_request_a_clear_board_in_my_new_game [] \u21a6 ('Board',)\n  2.3 - 2019-03-18 17:30:13.071420 \u2705 board__is_added_to_the_game [] \u21a6 ()\n\n3 \u274c ClearBoard.test_odd_boards:\n  3.1 - 2019-03-18 17:30:13.071420 \u274c i_request_a_new_game_with_an_odd_number_of_boards [] \u21a6 Traceback (most recent call last):\n  File \"/usr/lib/python3.6/unittest/mock.py\", line 939, in __call__\n    return _mock_self._mock_call(*args, **kwargs)\n  File \"/usr/lib/python3.6/unittest/mock.py\", line 995, in _mock_call\n    raise effect\nAssertionError: FAKE\n\nScenario runs {\n    \"1\u2705\": \"even_boards\",\n    \"2\u2705\": \"test_start_board\"\n    \"3\u274c\": \"test_odd_boards\"\n}\nPending []\n\nAll scenarios ran \u258c 2 \u2705 \u258c 1 \u274c\n```\ninto `$logs_parent/.bdd-run-logs/` (git-ignored), split by date into files `YYYY-MM-DD.log`, with the `logs_parent` value passed to `bdd_coder.tester.decorators.Steps`, which also has a `max_history_length` parameter - in days, older history is removed.\n\nIn Ubuntu I use the bash function\n```\nfunction bdd-log-tab() {\n  gnome-terminal --tab -- tail -f $(pwd)/$1/.bdd-run-logs/$(ls $(pwd)/$1/.bdd-run-logs | tail -1)\n}\n```\nto open a terminal tab that will output the log stream as tests run (if the `.bdd-run-logs` directory exists).\n\n### Commands\n#### Check if pending scenarios\nIt may happen that all steps - and so all tests - that ran succeeded, but some scenarios were not reached. Run `bdd-pending-scenarios` after `pytest` to treat this as an error (recommended)\n```\n\u274c Some scenarios did not run! Check the logs in [...]/.bdd-run-logs\n```\n```\nusage: bdd-pending-scenarios [-h] logs_parent\n\npositional arguments:\n  logs_parent  Parent directory of .bdd-run-logs/\n```\n\n#### Export test suite docs as YAML\n```\nusage: bdd-make-yaml-specs [-h] [--overwrite] [--validate]\n                           test_module specs_path\n\npositional arguments:\n  test_module      passed to importlib.import_module\n  specs_path       will try to write the YAML files in here\n\noptional arguments:\n  --overwrite, -w\n```\nAdditionally, validates code against generated specifications.\n\n## Coder commands\n### Make a test suite blueprint\n```\nusage: bdd-blueprint [-h] [--base-class BASE_CLASS]\n                     [--specs-path SPECS_PATH] [--tests-path TESTS_PATH]\n                     [--test-module-name TEST_MODULE_NAME] [--overwrite]\n\noptional arguments:\n  --base-class BASE_CLASS, -c BASE_CLASS\n                        default: unittest.TestCase\n  --specs-path SPECS_PATH, -i SPECS_PATH\n                        default: behaviour/specs\n  --tests-path TESTS_PATH, -o TESTS_PATH\n                        default: next to specs\n  --test-module-name TEST_MODULE_NAME, -n TEST_MODULE_NAME\n                        Name for test_<name>.py. default: stories\n  --overwrite\n```\nThe following:\n```\nbdd-coder$ bdd-blueprint -i example/specs -o example/tests --overwrite\n```\nwill rewrite [example/tests](https://bitbucket.org/coleopter/bdd-coder/src/master/example/tests) (with no changes if [example/specs](https://bitbucket.org/coleopter/bdd-coder/src/master/example/specs) is unmodified), and run `pytest` on the blueprint yielding the output, like\n```\n============================= test session starts ==============================\nplatform [...]\ncollecting ... collected 2 items\n\nexample/tests/test_stories.py::ClearBoard::test_odd_boards PASSED        [ 50%]\nexample/tests/test_stories.py::ClearBoard::test_start_board PASSED       [100%]\n\n=========================== 2 passed in 0.04 seconds ===========================\n```\n\n### Patch a test suite with new specifications\nUse this command in order to update a tester package with new YAML specifications - removes scenario declarations *only*, changes the scenario set, which may imply a new test class hierarchy with new stories and scenarios, adds the necessary step methods, and adds new aliases (if any).\n```\nusage: bdd-patch [-h] test_module [specs_path]\n\npositional arguments:\n  test_module  passed to importlib.import_module\n  specs_path   Directory to take new specs from. default: specs/ next to test package\n\noptional arguments:\n  --scenario-delimiter SCENARIO_DELIMITER, -d SCENARIO_DELIMITER\n                        default: @decorators.Scenario(base.steps)\n```\nThe following:\n```\nbdd-coder$ bdd-patch example.tests.test_stories example/new_specs\n```\nwill turn [example/tests](https://bitbucket.org/coleopter/bdd-coder/src/master/example/tests) into [example/new_tests](https://bitbucket.org/coleopter/bdd-coder/src/master/example/new_tests), and run `pytest` on the suite yielding something like\n```\n============================= test session starts ==============================\nplatform [...]\ncollecting ... collected 3 items\n\nexample/tests/test_stories.py::NewGame::test_even_boards PASSED          [ 33%]\nexample/tests/test_stories.py::NewGame::test_funny_boards PASSED         [ 66%]\nexample/tests/test_stories.py::NewGame::test_more_boards PASSED          [100%]\n\n=========================== 3 passed in 0.04 seconds ===========================\n```\nand a log\n```\n1 \u2705 NewGame.new_player_joins:\n  1.1 - 2019-04-01 00:30:50.164042 \u2705 a_user_signs_in [] \u21a6 ()\n  1.2 - 2019-04-01 00:30:50.164059 \u2705 a_new_player_is_added [] \u21a6 ()\n\n2 \u2705 NewGame.test_even_boards:\n  2.1 - 2019-04-01 00:30:50.164178 \u2705 new_player_joins [] \u21a6 ()\n  2.2 - 2019-04-01 00:30:50.164188 \u2705 i_request_a_new_game_with_an_even_number_of_boards [] \u21a6 ('game',)\n  2.3 - 2019-04-01 00:30:50.164193 \u2705 a_game_is_created_with_boards_of__guesses ['12'] \u21a6 ()\n\n3 \u2705 NewGame.new_player_joins:\n  3.1 - 2019-04-01 00:30:50.165339 \u2705 a_user_signs_in [] \u21a6 ()\n  3.2 - 2019-04-01 00:30:50.165348 \u2705 a_new_player_is_added [] \u21a6 ()\n\n4 \u2705 NewGame.test_funny_boards:\n  4.1 - 2019-04-01 00:30:50.165422 \u2705 new_player_joins [] \u21a6 ()\n  4.2 - 2019-04-01 00:30:50.165429 \u2705 class_hierarchy_has_changed [] \u21a6 ()\n\n5 \u2705 NewGame.new_player_joins:\n  5.1 - 2019-04-01 00:30:50.166458 \u2705 a_user_signs_in [] \u21a6 ()\n  5.2 - 2019-04-01 00:30:50.166466 \u2705 a_new_player_is_added [] \u21a6 ()\n\n6 \u2705 NewGame.test_more_boards:\n  6.1 - 2019-04-01 00:30:50.166535 \u2705 new_player_joins [] \u21a6 ()\n  6.2 - 2019-04-01 00:30:50.166541 \u2705 user_is_welcome [] \u21a6 ()\n\nScenario runs {\n    \"1\u2705-3\u2705-5\u2705\": \"new_player_joins\",\n    \"2\u2705\": \"test_even_boards\",\n    \"4\u2705\": \"test_funny_boards\",\n    \"6\u2705\": \"test_more_boards\"\n}\nPending []\n\nAll scenarios ran \u258c 6 \u2705\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/coleopter/bdd-coder", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bdd-coder", "package_url": "https://pypi.org/project/bdd-coder/", "platform": "", "project_url": "https://pypi.org/project/bdd-coder/", "project_urls": {"Homepage": "https://bitbucket.org/coleopter/bdd-coder"}, "release_url": "https://pypi.org/project/bdd-coder/1.1.0rc2/", "requires_dist": ["pyyaml", "argparse", "pytest", "flake8", "simple-cmd", "ipdb ; extra == 'dev'", "ipython ; extra == 'dev'", "pytest-cov ; extra == 'test'", "freezegun ; extra == 'test'"], "requires_python": "", "summary": "Gherkin language in class-based tests - test suite blueprinting", "version": "1.1.0rc2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BDD Coder</h1>\n<p><a href=\"https://badge.fury.io/py/bdd-coder\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96fb6e45fbbd95bb7e912c3d75da75e7cec7f318/68747470733a2f2f62616467652e667572792e696f2f70792f6264642d636f6465722e737667\"></a> <a href=\"https://img.shields.io/pypi/dm/bdd-coder\" rel=\"nofollow\"><img alt=\"PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdc107e9f5691ec5dcbe3accea70016597df42d3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6264642d636f6465722e737667\"></a></p>\n<p>A package devoted to agile implementation of <strong>class-based behavioral tests</strong>. It consists of:</p>\n<ul>\n<li>\n<p><a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/bdd_coder/coder\" rel=\"nofollow\">coder</a> package able to</p>\n<ul>\n<li>\n<p>make a tester package - test suite - blueprint - see <a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/example/tests\" rel=\"nofollow\">example/tests</a> - from user story specifications in YAML files - see <a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/example/specs\" rel=\"nofollow\">example/specs</a>,</p>\n</li>\n<li>\n<p>patch such tester package with new YAML specifications - see <a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/example/new_specs\" rel=\"nofollow\">example/new_specs</a> and <a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/example/new_tests\" rel=\"nofollow\">example/new_tests</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/bdd_coder/tester\" rel=\"nofollow\">tester</a> package employed to run such blueprint tests, which also has the ability to export their docs as YAML specifications</p>\n</li>\n</ul>\n<p>Test with <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a> - see tox.ini.</p>\n<p>See <a href=\"https://bitbucket.org/coleopter/mastermind\" rel=\"nofollow\">mastermind</a> for an application.</p>\n<h2>Story</h2>\n<p>This package was born as a study of Behavior Driven Development; and from the wish of having a handy implementation of Gherkin language in class-based tests, to be employed so that development cycles start with coding a behavioral test suite containing the scenario specifications in test case method <code>__doc__</code>s - as <code>bdd_coder.tester</code> achieves.</p>\n<p>In conjunction with <code>bdd_coder.coder</code>, development cycles <em>start</em> with:</p>\n<ol>\n<li>\n<p>A set of YAML specifications is agreed and crafted</p>\n</li>\n<li>\n<p>From these, a test suite is automatically created or patched</p>\n</li>\n<li>\n<p>New <em>test step methods</em> are crafted to efficiently achieve 100% behavioral coverage</p>\n</li>\n</ol>\n<h2>User Story (feature) specifications</h2>\n<p>Each test suite (tester package) has a structure</p>\n<pre><code>\u251c\u2500 __init__.py\n\u251c\u2500 aliases.py\n\u251c\u2500 base.py\n\u2514\u2500 test_stories.py\n</code></pre>\n<p>corresponding to a specifications directory</p>\n<pre><code>\u251c\u2500 aliases.yml\n\u2514\u2500 features/\n   \u251c\u2500 some-story.yml\n   \u251c\u2500 another-story.yml\n   \u251c\u2500 ...\n   \u2514\u2500 this-story.yml\n</code></pre>\n<p>A story YAML file (the ones under features/) corresponds to a test case class declared into <code>test_stories.py</code>, consisting mainly of scenario declarations:</p>\n<pre><code>Title: &lt;Story title&gt;  # --&gt; class __name__\n\nStory: |-  # free text --&gt; class __doc__\n  As a &lt;user group&gt;\n  I want &lt;feature&gt;\n  In order to/so that &lt;goal&gt;\n\nScenarios:\n  Scenario name:  # --&gt; scenario __doc__\n    - Step \"1\" with \"A\" gives `x` and `y`\n      # ...\n    - Last step with \"B\" gives `result`\n  # ...\n\n# Extra class atributes - ignored in patching\nExtra name:\n  &lt;yaml-attribute-coded-with-str(yaml.load)&gt;\n...\n</code></pre>\n<p>So only the keys <code>Title</code>, <code>Story</code>, <code>Scenarios</code> are reserved.</p>\n<p>Scenario names are unique if <code>bdd_coder.tester.decorators.Steps</code> takes <code>validate=True</code> (the default), which also validates class hierarchy.</p>\n<h3>Step declarations</h3>\n<ul>\n<li>\n<p>Start with a whole word - normally 'Given', 'When', or 'Then' - that is ignored by the tester (only order matters)</p>\n</li>\n<li>\n<p>May contain:</p>\n<ul>\n<li>\n<p>Input <code>*args</code> sequence of values in double-quotes - passed to the step method</p>\n</li>\n<li>\n<p>Output variable name sequence using backticks - if non-empty, the method should return the output values as a tuple, which are collected by the <code>bdd_coder.tester.decorators.Steps</code> decorator instance, by name into its <code>outputs</code> map of sequences</p>\n</li>\n</ul>\n</li>\n<li>\n<p>May refer to a scenario name, either belonging to the same class (story), or to an inherited class</p>\n</li>\n</ul>\n<h3>Aliases</h3>\n<p>Declared as</p>\n<pre><code>Alias sentence:  # --&gt; method to call\n  - Step sentence  # from scenario __doc__s\n  - Another step sentence\n  # ...\n# ...\n</code></pre>\n<p>corresponding to <code>aliases.py</code>:</p>\n<pre><code>MAP = {\n    'step_sentence': 'alias_sentence',\n    'another_step_sentence': 'alias_sentence',\n    # ...\n}\n</code></pre>\n<h2>Tester</h2>\n<p>The core of each test suite consists of the following required class declarations in its <code>base.py</code> module:</p>\n<pre><code>from test.case.module import MyTestCase\n\nfrom bdd_coder.tester import decorators\nfrom bdd_coder.tester import tester\n\nfrom . import aliases\n\nsteps = decorators.Steps(aliases.MAP, logs_parent='example/tests')\n\n\n@steps\nclass BddTester(tester.BddTester):\n    \"\"\"\n    The decorated BddTester subclass of this suite - manages scenario runs\n    \"\"\"\n\n\nclass BaseTestCase(tester.BaseTestCase, MyTestCase):\n    \"\"\"\n    The base test case of this suite - manages test runs\n    \"\"\"\n</code></pre>\n<p>Then, story test cases are declared in <code>test_stories.py</code>, with</p>\n<pre><code>from . import base\nfrom bdd_coder.tester import decorators\n</code></pre>\n<p>as</p>\n<pre><code>class StoryTitle(BddTesterSubclass, AnotherBddTesterSubclass, ...[, base.BaseTestCase]):\n</code></pre>\n<p>with scenario declarations</p>\n<pre><code>  @decorators.Scenario(base.steps):\n  def [test_]scenario_name(self):\n      \"\"\"\n      Step \"1\" with \"A\" gives `x` and `y`\n      ...\n      Last step with \"B\" gives `result`\n      \"\"\"\n</code></pre>\n<p>that will run according to their <code>__doc__</code>s, and the necessary step method definitions.</p>\n<h3>Test run logging</h3>\n<p>Implemented behavioural test step runs are logged by <code>bdd_coder.tester</code> as</p>\n<pre><code>1 \u2705 ClearBoard.even_boards:\n  1.1 - 2019-03-18 17:30:13.071420 \u2705 i_request_a_new_game_with_an_even_number_of_boards [] \u21a6 ('Even Game',)\n  1.2 - 2019-03-18 17:30:13.071420 \u2705 a_game_is_created_with_boards_of__guesses ['12'] \u21a6 ()\n\n2 \u2705 ClearBoard.test_start_board:\n  2.1 - 2019-03-18 17:30:13.071420 \u2705 even_boards [] \u21a6 ()\n  2.2 - 2019-03-18 17:30:13.071420 \u2705 i_request_a_clear_board_in_my_new_game [] \u21a6 ('Board',)\n  2.3 - 2019-03-18 17:30:13.071420 \u2705 board__is_added_to_the_game [] \u21a6 ()\n\n3 \u274c ClearBoard.test_odd_boards:\n  3.1 - 2019-03-18 17:30:13.071420 \u274c i_request_a_new_game_with_an_odd_number_of_boards [] \u21a6 Traceback (most recent call last):\n  File \"/usr/lib/python3.6/unittest/mock.py\", line 939, in __call__\n    return _mock_self._mock_call(*args, **kwargs)\n  File \"/usr/lib/python3.6/unittest/mock.py\", line 995, in _mock_call\n    raise effect\nAssertionError: FAKE\n\nScenario runs {\n    \"1\u2705\": \"even_boards\",\n    \"2\u2705\": \"test_start_board\"\n    \"3\u274c\": \"test_odd_boards\"\n}\nPending []\n\nAll scenarios ran \u258c 2 \u2705 \u258c 1 \u274c\n</code></pre>\n<p>into <code>$logs_parent/.bdd-run-logs/</code> (git-ignored), split by date into files <code>YYYY-MM-DD.log</code>, with the <code>logs_parent</code> value passed to <code>bdd_coder.tester.decorators.Steps</code>, which also has a <code>max_history_length</code> parameter - in days, older history is removed.</p>\n<p>In Ubuntu I use the bash function</p>\n<pre><code>function bdd-log-tab() {\n  gnome-terminal --tab -- tail -f $(pwd)/$1/.bdd-run-logs/$(ls $(pwd)/$1/.bdd-run-logs | tail -1)\n}\n</code></pre>\n<p>to open a terminal tab that will output the log stream as tests run (if the <code>.bdd-run-logs</code> directory exists).</p>\n<h3>Commands</h3>\n<h4>Check if pending scenarios</h4>\n<p>It may happen that all steps - and so all tests - that ran succeeded, but some scenarios were not reached. Run <code>bdd-pending-scenarios</code> after <code>pytest</code> to treat this as an error (recommended)</p>\n<pre><code>\u274c Some scenarios did not run! Check the logs in [...]/.bdd-run-logs\n</code></pre>\n<pre><code>usage: bdd-pending-scenarios [-h] logs_parent\n\npositional arguments:\n  logs_parent  Parent directory of .bdd-run-logs/\n</code></pre>\n<h4>Export test suite docs as YAML</h4>\n<pre><code>usage: bdd-make-yaml-specs [-h] [--overwrite] [--validate]\n                           test_module specs_path\n\npositional arguments:\n  test_module      passed to importlib.import_module\n  specs_path       will try to write the YAML files in here\n\noptional arguments:\n  --overwrite, -w\n</code></pre>\n<p>Additionally, validates code against generated specifications.</p>\n<h2>Coder commands</h2>\n<h3>Make a test suite blueprint</h3>\n<pre><code>usage: bdd-blueprint [-h] [--base-class BASE_CLASS]\n                     [--specs-path SPECS_PATH] [--tests-path TESTS_PATH]\n                     [--test-module-name TEST_MODULE_NAME] [--overwrite]\n\noptional arguments:\n  --base-class BASE_CLASS, -c BASE_CLASS\n                        default: unittest.TestCase\n  --specs-path SPECS_PATH, -i SPECS_PATH\n                        default: behaviour/specs\n  --tests-path TESTS_PATH, -o TESTS_PATH\n                        default: next to specs\n  --test-module-name TEST_MODULE_NAME, -n TEST_MODULE_NAME\n                        Name for test_&lt;name&gt;.py. default: stories\n  --overwrite\n</code></pre>\n<p>The following:</p>\n<pre><code>bdd-coder$ bdd-blueprint -i example/specs -o example/tests --overwrite\n</code></pre>\n<p>will rewrite <a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/example/tests\" rel=\"nofollow\">example/tests</a> (with no changes if <a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/example/specs\" rel=\"nofollow\">example/specs</a> is unmodified), and run <code>pytest</code> on the blueprint yielding the output, like</p>\n<pre><code>============================= test session starts ==============================\nplatform [...]\ncollecting ... collected 2 items\n\nexample/tests/test_stories.py::ClearBoard::test_odd_boards PASSED        [ 50%]\nexample/tests/test_stories.py::ClearBoard::test_start_board PASSED       [100%]\n\n=========================== 2 passed in 0.04 seconds ===========================\n</code></pre>\n<h3>Patch a test suite with new specifications</h3>\n<p>Use this command in order to update a tester package with new YAML specifications - removes scenario declarations <em>only</em>, changes the scenario set, which may imply a new test class hierarchy with new stories and scenarios, adds the necessary step methods, and adds new aliases (if any).</p>\n<pre><code>usage: bdd-patch [-h] test_module [specs_path]\n\npositional arguments:\n  test_module  passed to importlib.import_module\n  specs_path   Directory to take new specs from. default: specs/ next to test package\n\noptional arguments:\n  --scenario-delimiter SCENARIO_DELIMITER, -d SCENARIO_DELIMITER\n                        default: @decorators.Scenario(base.steps)\n</code></pre>\n<p>The following:</p>\n<pre><code>bdd-coder$ bdd-patch example.tests.test_stories example/new_specs\n</code></pre>\n<p>will turn <a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/example/tests\" rel=\"nofollow\">example/tests</a> into <a href=\"https://bitbucket.org/coleopter/bdd-coder/src/master/example/new_tests\" rel=\"nofollow\">example/new_tests</a>, and run <code>pytest</code> on the suite yielding something like</p>\n<pre><code>============================= test session starts ==============================\nplatform [...]\ncollecting ... collected 3 items\n\nexample/tests/test_stories.py::NewGame::test_even_boards PASSED          [ 33%]\nexample/tests/test_stories.py::NewGame::test_funny_boards PASSED         [ 66%]\nexample/tests/test_stories.py::NewGame::test_more_boards PASSED          [100%]\n\n=========================== 3 passed in 0.04 seconds ===========================\n</code></pre>\n<p>and a log</p>\n<pre><code>1 \u2705 NewGame.new_player_joins:\n  1.1 - 2019-04-01 00:30:50.164042 \u2705 a_user_signs_in [] \u21a6 ()\n  1.2 - 2019-04-01 00:30:50.164059 \u2705 a_new_player_is_added [] \u21a6 ()\n\n2 \u2705 NewGame.test_even_boards:\n  2.1 - 2019-04-01 00:30:50.164178 \u2705 new_player_joins [] \u21a6 ()\n  2.2 - 2019-04-01 00:30:50.164188 \u2705 i_request_a_new_game_with_an_even_number_of_boards [] \u21a6 ('game',)\n  2.3 - 2019-04-01 00:30:50.164193 \u2705 a_game_is_created_with_boards_of__guesses ['12'] \u21a6 ()\n\n3 \u2705 NewGame.new_player_joins:\n  3.1 - 2019-04-01 00:30:50.165339 \u2705 a_user_signs_in [] \u21a6 ()\n  3.2 - 2019-04-01 00:30:50.165348 \u2705 a_new_player_is_added [] \u21a6 ()\n\n4 \u2705 NewGame.test_funny_boards:\n  4.1 - 2019-04-01 00:30:50.165422 \u2705 new_player_joins [] \u21a6 ()\n  4.2 - 2019-04-01 00:30:50.165429 \u2705 class_hierarchy_has_changed [] \u21a6 ()\n\n5 \u2705 NewGame.new_player_joins:\n  5.1 - 2019-04-01 00:30:50.166458 \u2705 a_user_signs_in [] \u21a6 ()\n  5.2 - 2019-04-01 00:30:50.166466 \u2705 a_new_player_is_added [] \u21a6 ()\n\n6 \u2705 NewGame.test_more_boards:\n  6.1 - 2019-04-01 00:30:50.166535 \u2705 new_player_joins [] \u21a6 ()\n  6.2 - 2019-04-01 00:30:50.166541 \u2705 user_is_welcome [] \u21a6 ()\n\nScenario runs {\n    \"1\u2705-3\u2705-5\u2705\": \"new_player_joins\",\n    \"2\u2705\": \"test_even_boards\",\n    \"4\u2705\": \"test_funny_boards\",\n    \"6\u2705\": \"test_more_boards\"\n}\nPending []\n\nAll scenarios ran \u258c 6 \u2705\n</code></pre>\n\n          </div>"}, "last_serial": 6800135, "releases": {"1.1.0rc0": [{"comment_text": "", "digests": {"md5": "76e60324140d69182dd9d50ad3b54a76", "sha256": "7d29ddaaafcd0e63e018a1d41a1aebb54f7d4ec1a96a56dd1cb4de3d9bf005da"}, "downloads": -1, "filename": "bdd_coder-1.1.0rc0-py3-none-any.whl", "has_sig": false, "md5_digest": "76e60324140d69182dd9d50ad3b54a76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26289, "upload_time": "2019-04-09T00:09:26", "upload_time_iso_8601": "2019-04-09T00:09:26.927802Z", "url": "https://files.pythonhosted.org/packages/50/e9/af496cef911486757268920030dcc31c9fb72e3a28efcf0aa0b134768611/bdd_coder-1.1.0rc0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57c9c410f92bfdd18c3ca1a204ff6058", "sha256": "46d109ce58795997683465fd76d47dc3090f2f86580d68523d05de02e50bd2a1"}, "downloads": -1, "filename": "bdd-coder-1.1.0rc0.tar.gz", "has_sig": false, "md5_digest": "57c9c410f92bfdd18c3ca1a204ff6058", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22860, "upload_time": "2019-04-09T00:09:29", "upload_time_iso_8601": "2019-04-09T00:09:29.370878Z", "url": "https://files.pythonhosted.org/packages/da/d1/5403ff19c10ee2d51cbe8493b68e41b02ee3d66060e8195d7acca9277778/bdd-coder-1.1.0rc0.tar.gz", "yanked": false}], "1.1.0rc1": [{"comment_text": "", "digests": {"md5": "b66695196f23173d04821506dd75c6a4", "sha256": "cf70ed68e8115bac3e3328792a519950b05f3f7ee9295a60460882bccec28c75"}, "downloads": -1, "filename": "bdd_coder-1.1.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "b66695196f23173d04821506dd75c6a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24762, "upload_time": "2019-04-10T01:07:30", "upload_time_iso_8601": "2019-04-10T01:07:30.924744Z", "url": "https://files.pythonhosted.org/packages/06/7e/e13741e6baeba888427d1b134b0af9349d18fc19e1d63d7438281fa31563/bdd_coder-1.1.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca2b5f18512dad77c828f0d3688eb923", "sha256": "ba1b10fa270cee3504c532877d8de4637398da26ccf881fff3eac3e12ed1db9d"}, "downloads": -1, "filename": "bdd-coder-1.1.0rc1.tar.gz", "has_sig": false, "md5_digest": "ca2b5f18512dad77c828f0d3688eb923", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21593, "upload_time": "2019-04-10T01:07:32", "upload_time_iso_8601": "2019-04-10T01:07:32.550766Z", "url": "https://files.pythonhosted.org/packages/8d/ae/3b07e618ac16268a25db1096507f90f58b2d30aa0e4e4b635b7c831ff0e4/bdd-coder-1.1.0rc1.tar.gz", "yanked": false}], "1.1.0rc2": [{"comment_text": "", "digests": {"md5": "9c8a49ff5221f97424ce85ad354d3251", "sha256": "bb02beb6fd4dbc952fb9c80f982dfd2d7199ade3c280423f6f2dff52f7ff52d3"}, "downloads": -1, "filename": "bdd_coder-1.1.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "9c8a49ff5221f97424ce85ad354d3251", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26422, "upload_time": "2020-03-12T15:42:12", "upload_time_iso_8601": "2020-03-12T15:42:12.869608Z", "url": "https://files.pythonhosted.org/packages/0a/d4/962178a7ac00083bbefc6a0baec1f6c7a117394ac256bc86b75a3fc7cc95/bdd_coder-1.1.0rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "864ea1cf09ca34ec68267bb1f545b79e", "sha256": "83943b340d902ad1c26a5725d2b0997c029267870494208b226da2e9b31b846c"}, "downloads": -1, "filename": "bdd-coder-1.1.0rc2.tar.gz", "has_sig": false, "md5_digest": "864ea1cf09ca34ec68267bb1f545b79e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22588, "upload_time": "2020-03-12T15:42:14", "upload_time_iso_8601": "2020-03-12T15:42:14.180731Z", "url": "https://files.pythonhosted.org/packages/b7/6b/44a0e94af08814a87f5a4c28c49303cd42bb36cef254c83f62c14e786d1a/bdd-coder-1.1.0rc2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c8a49ff5221f97424ce85ad354d3251", "sha256": "bb02beb6fd4dbc952fb9c80f982dfd2d7199ade3c280423f6f2dff52f7ff52d3"}, "downloads": -1, "filename": "bdd_coder-1.1.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "9c8a49ff5221f97424ce85ad354d3251", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26422, "upload_time": "2020-03-12T15:42:12", "upload_time_iso_8601": "2020-03-12T15:42:12.869608Z", "url": "https://files.pythonhosted.org/packages/0a/d4/962178a7ac00083bbefc6a0baec1f6c7a117394ac256bc86b75a3fc7cc95/bdd_coder-1.1.0rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "864ea1cf09ca34ec68267bb1f545b79e", "sha256": "83943b340d902ad1c26a5725d2b0997c029267870494208b226da2e9b31b846c"}, "downloads": -1, "filename": "bdd-coder-1.1.0rc2.tar.gz", "has_sig": false, "md5_digest": "864ea1cf09ca34ec68267bb1f545b79e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22588, "upload_time": "2020-03-12T15:42:14", "upload_time_iso_8601": "2020-03-12T15:42:14.180731Z", "url": "https://files.pythonhosted.org/packages/b7/6b/44a0e94af08814a87f5a4c28c49303cd42bb36cef254c83f62c14e786d1a/bdd-coder-1.1.0rc2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:34 2020"}