{"info": {"author": "Akshowhini", "author_email": "brain@extracttable.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "[![image](https://i.imgur.com/YIHmXue.png?1)](https://extracttable.com?ref=github-CP)\n\n# CamelotPro: Pro-version of Camelot  \n[![image](https://img.shields.io/pypi/v/camelotpro.svg?maxAge=3600)](https://pypi.org/project/camelotpro/) [![image](https://img.shields.io/github/license/extracttable/camelotpro)]() [![image](https://img.shields.io/badge/python-3.5%20%7C%203.6%20%7C%203.7-blue)]()  \n\n**CamelotPro** is a layer on camelot-py library to extract tables from **Scan PDFs and Images**. \n\n\n## CamelotPro vs Camelot\n\n**CamelotPro** is no different from the original Camelot to code. It comes with extra **`flavor=\"CamelotPro\"`** in read_pdf(), along with regular \"*lattice*\" and \"*stream*\".\n\n\n## Installation  \n> \u00f0\u0178\u2019\u00a1 ***ProTip**: [ExtractTable-py](https://github.com/ExtractTable/ExtractTable-py) is the official library, which is FASTER than Camelot wrapper, has NO software dependencies.* \n\n\nAs the library itself is dependent on Camelot which has software dependencies, the developer is expected to install them *(listed below)*, to use the regular Camelot flavors *(\"stream\", \"lattice\")* along with \"CamelotPro\".  \n\nPlease follow the **OS-specific instructions** \n\n-  [Tkinter](https://camelot-py.readthedocs.io/en/master/user/install-deps.html#os-specific-instructions)\n- [GhostScript](https://camelot-py.readthedocs.io/en/master/user/install-deps.html#for-ghostscript) \n\n\n\n### Using pip  \nAfter  for Camelot, you can simply use pip to install CamelotPro:  \n\n    $ pip install -U CamelotPro  \n\n\n## Prerequisites\n\nThe developer needs an **api_key** ([free credits here](https://extracttable.com/camelotpro.html)) to use CamelotPro. Each Image file or one PDF page consumes one credit to trigger the process.\n\n**api_key** should be passed through `pro_kwargs`, a `dict` type argument that accepts *api_key*, *job_id*, *dup_check*, *wait_for_output* as keys, can be used as below\n\n    {\n        \"api_key\": str,\n        Mandatory, to trigger \"CamelotPro\" flavor, to process Scan PDFs and images, also text PDF files\n\n        \"job_id\": str,\n            optional, if processing a new file\n            Mandatory, to retrieve the result of the already submitted file\n\n        \"dup_check\": bool, default: False - to bypass the duplicate check\n            Useful to handle duplicate requests, check based on the FileName\n\n        \"max_wait_time\": int, default: 300\n            Checks for the output every 15 seconds until successfully processed or for a maximum of 300 seconds.\n    }\n\n\n\n## Let's code\n\n**Quickly validate the API key and see number of credits attached to it**\n```python\napi_key = YOUR_API_KEY_HERE\n\nfrom camelot_pro import check_usage\nprint(check_usage(api_key))\n```\n*No error from the above code snippet run implies API Key is valid*\n\n\n**Here's how you can extract tables from Image files.** \n\n\nThe example image (*foo_image.**jpg***)  used in the code below, can be found [here](https://github.com/extracttable/camelotpro/blob/master/samples/foo-image.jpg).  Notice that *foo_image.jpg* is the image version of Camelot's example, [foo.pdf](https://github.com/camelot-dev/camelot/blob/master/docs/_static/pdf/foo.pdf).\n\n```python\nfrom camelot_pro import read_pdf\npro_tables = read_pdf('foo-image.jpg', flavor=\"CamelotPro\", pro_kwargs={'api_key': api_key})  \n```  \n\n\nNow that you have triggered the process to find tables from the image, you can find the status of it from the  `JobStatus` attribute, which returns any of *Success, Failed, Processing, Incomplete*.\n\n    pro_tables.JobStatus\n    [Out]: \"Success\"\n\n    pro_tables[0].df                  # get a pandas DataFrame!  \n\n\n| Col_1 | Col_2 | Col_3 | Col_4 | Col_5 | Col_6 | Col_7 |\n|------------|-----------|---------------|----------------------|-----------------|-----------------|----------------|\n| Cycle Name | KI (1/km) | Distance (mi) | Percent Fuel Savings |                 |                 |                |\n|            |           |               | Improved Speed       | Decreased Accel | Eliminate Stops | Decreased Idle |\n| 2012_2     | 3.30      | 1.3           | 5.9%                 | 9.5%            | 29.2%           | 17.4%          |\n| 2145_1     | 0.68      | 11.2          | 2.4%                 | 0.1%            | 9.5%            | 2.7%           |\n| 4234_1     | 0.59      | 58.7          | 8.5%                 | 1.3%            | 8.5%            | 3.3%           |\n| 2032_2     | 0.17      | 57.8          | 21.7%                | 0.3%            | 2.7%            | 1.2%           |\n| 4171_1     | 0.07      | 173.9         | 58.1%                | 1.6%            | 2.1%            | 0.5%           |\n\n\nWhen the `JobStatus` status is \"Success\", just like Camelot, the output gives the gist of the process.\n\n    pro_tables\n    [Out]: <TableList n=1>                                # Will be <TableList n=0> for any other JobStatus\n    pro_tables[0].df                  # get a pandas DataFrame!\n\n... and then there are the regular Camelot functions and attributes\n\n    pro_tables.export('foo.csv', f='csv', )         # json, excel, html, sqlite  \n\n    pro_tables[0]\n    [Out]: <Table shape=(7, 7)>\n\n    pro_tables[0].parsing_report  \n    [Out]: {  \n        'accuracy': 75.12,  \n        'whitespace': 0.86,  \n        'order': 1,  \n        'page': 1  \n    }\n\n    pro_tables[0].to_csv('foo.csv')             # to_json, to_excel, to_html, to_sqlite  \n\n\n>***ProTip**: Very useful to check out all attributes of the output, when the `JobStatus` is **not \"Success\"**.\n\n    pro_tables.__dict__\n\n    [Out]: \n    {\n        '_tables': [<Table shape=(7, 7)>],        # List of tables found with their shapes\n        'Pages': 1,                                # Number of Input pages, equivalent to credits used\n        'JobStatus': 'Success'                    # Success | Failed | Processing | Incomplete\n    }\n\n\nMost of the image file processes result in an instant 'Success' job status, at times, a blurry/big/bad file may take ~15 seconds and PDF file process time depends on the page count. In these cases, the `JobStatus` is **\"Processing\"** and the `JobId` attribute of the output is used to retrieve tables as shown below.\n\n\n    pro_tables.JobStatus\n    [Out]: \"Processing\"\n\n    job_id = pro_tables.JobId\n    print(job_id)\n    [Out]: \"d93e9af0f632084394099dabeb150ead7ee2ed5250377cb4772a358abcc21cf2\"\n\n    retrieve_output = read_pdf('', flavor=\"CamelotPro\", pro_kwargs={'api_key': api_key, 'job_id': job_id})\n    print(retrieve_output.JobStatus)\n    [Out]: \"Success\"\n\n\n\n> ***ProTip**: To receive **immediate Success on image files**, use `'dup_check': False` in `pro_kwargs`*\n\n    instant_pro_tables = read_pdf('foo-image.jpg', flavor=\"CamelotPro\", pro_kwargs={'api_key': api_key, 'dup_check': False})\n\n\n## New and Re-defined Attributes of CamelotPro\n\n\n|Attribute|Explanation|\n|----|----|\n|`pro_tables.Pages` |Total number of input pages processed. Equivalent to credits used\n|`pro_tables.JobStatus` | \"**Success**\" - Check output for tables or Use \"JobId\" to retrieve tables<br> \"**Failed**\" - Process Failed, No Credits used<br> \"**Processing**\" - Still in process, use \"JobId\" to retrieve the output later<br> \"**Incomplete**\" - Process finished, but all pages are not processed. Partial output|\n|`pro_tables.Message`|Gives the reason for failure or issue,\n|`pro_tables.ProTip`|Hints on how to avoid the errors, if it can be rectified with developer input|\n|`pro_tables[0].accuracy`|Accuracy of text assignment to the cell|\n|`pro_tables[0].accuracy_character`|Accuracy of Characters recognized from the image|\n|`pro_tables[0].accuracy_layout` |Accuracy of table layout's design decision|\n|`pro_tables[0].whitespace`|Percentage of Error in Character recognition\n\n\n\n## Pull Requests & Rewards\n\nPull requests are most welcome and greatly appreciated. \n\n\n## License  \n\nThis project is licensed under the GNU-3.0 License, see the [LICENSE](https://github.com/extracttable/camelotpro/blob/master/LICENSE) file for details.\n\n\n## Credits\n\nLast but not least, we want to be thankful to the contributors of [camelot-py](https://github.com/atlanhq/camelot/)\n\n# Social Media\nFollow us on Social media for library updates and free credits.\n\n[![Image](https://cdn3.iconfinder.com/data/icons/socialnetworking/32/linkedin.png)](https://www.linkedin.com/company/extracttable)\n&nbsp;&nbsp;&nbsp;&nbsp;\n[![Image](https://abs.twimg.com/favicons/twitter.ico)](https://twitter.com/extracttable)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ExtractTable/camelotpro", "keywords": "", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "CamelotPro", "package_url": "https://pypi.org/project/CamelotPro/", "platform": "", "project_url": "https://pypi.org/project/CamelotPro/", "project_urls": {"Homepage": "https://github.com/ExtractTable/camelotpro"}, "release_url": "https://pypi.org/project/CamelotPro/1.2.1/", "requires_dist": ["ExtractTable (>=1.2.0)", "camelot-py (>=0.7.3)"], "requires_python": "", "summary": "CamelotPro is a layer on camelot-py library to extract tables from Scan PDFs and Images.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://extracttable.com?ref=github-CP\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9280812e85b59328817eb0fc474940adf54bf90/68747470733a2f2f692e696d6775722e636f6d2f5949486d5875652e706e673f31\"></a></p>\n<h1>CamelotPro: Pro-version of Camelot</h1>\n<p><a href=\"https://pypi.org/project/camelotpro/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dcd0715acfa8324201297690a7c6859e0be18f18/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63616d656c6f7470726f2e7376673f6d61784167653d33363030\"></a> <a href=\"\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4f1e79ad979f9f2a74b319a75442fdb07983317/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f657874726163747461626c652f63616d656c6f7470726f\"></a> <a href=\"\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db80a7c333ab02952105106cf6266762c5fcf5c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e35253230253743253230332e36253230253743253230332e372d626c7565\"></a></p>\n<p><strong>CamelotPro</strong> is a layer on camelot-py library to extract tables from <strong>Scan PDFs and Images</strong>.</p>\n<h2>CamelotPro vs Camelot</h2>\n<p><strong>CamelotPro</strong> is no different from the original Camelot to code. It comes with extra <strong><code>flavor=\"CamelotPro\"</code></strong> in read_pdf(), along with regular \"<em>lattice</em>\" and \"<em>stream</em>\".</p>\n<h2>Installation</h2>\n<blockquote>\n<p>\u00f0\u0178\u2019\u00a1 <em><strong>ProTip</strong>: <a href=\"https://github.com/ExtractTable/ExtractTable-py\" rel=\"nofollow\">ExtractTable-py</a> is the official library, which is FASTER than Camelot wrapper, has NO software dependencies.</em></p>\n</blockquote>\n<p>As the library itself is dependent on Camelot which has software dependencies, the developer is expected to install them <em>(listed below)</em>, to use the regular Camelot flavors <em>(\"stream\", \"lattice\")</em> along with \"CamelotPro\".</p>\n<p>Please follow the <strong>OS-specific instructions</strong></p>\n<ul>\n<li><a href=\"https://camelot-py.readthedocs.io/en/master/user/install-deps.html#os-specific-instructions\" rel=\"nofollow\">Tkinter</a></li>\n<li><a href=\"https://camelot-py.readthedocs.io/en/master/user/install-deps.html#for-ghostscript\" rel=\"nofollow\">GhostScript</a></li>\n</ul>\n<h3>Using pip</h3>\n<p>After  for Camelot, you can simply use pip to install CamelotPro:</p>\n<pre><code>$ pip install -U CamelotPro  \n</code></pre>\n<h2>Prerequisites</h2>\n<p>The developer needs an <strong>api_key</strong> (<a href=\"https://extracttable.com/camelotpro.html\" rel=\"nofollow\">free credits here</a>) to use CamelotPro. Each Image file or one PDF page consumes one credit to trigger the process.</p>\n<p><strong>api_key</strong> should be passed through <code>pro_kwargs</code>, a <code>dict</code> type argument that accepts <em>api_key</em>, <em>job_id</em>, <em>dup_check</em>, <em>wait_for_output</em> as keys, can be used as below</p>\n<pre><code>{\n    \"api_key\": str,\n    Mandatory, to trigger \"CamelotPro\" flavor, to process Scan PDFs and images, also text PDF files\n\n    \"job_id\": str,\n        optional, if processing a new file\n        Mandatory, to retrieve the result of the already submitted file\n\n    \"dup_check\": bool, default: False - to bypass the duplicate check\n        Useful to handle duplicate requests, check based on the FileName\n\n    \"max_wait_time\": int, default: 300\n        Checks for the output every 15 seconds until successfully processed or for a maximum of 300 seconds.\n}\n</code></pre>\n<h2>Let's code</h2>\n<p><strong>Quickly validate the API key and see number of credits attached to it</strong></p>\n<pre><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">YOUR_API_KEY_HERE</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">camelot_pro</span> <span class=\"kn\">import</span> <span class=\"n\">check_usage</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">check_usage</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"p\">))</span>\n</pre>\n<p><em>No error from the above code snippet run implies API Key is valid</em></p>\n<p><strong>Here's how you can extract tables from Image files.</strong></p>\n<p>The example image (<em>foo_image.<strong>jpg</strong></em>)  used in the code below, can be found <a href=\"https://github.com/extracttable/camelotpro/blob/master/samples/foo-image.jpg\" rel=\"nofollow\">here</a>.  Notice that <em>foo_image.jpg</em> is the image version of Camelot's example, <a href=\"https://github.com/camelot-dev/camelot/blob/master/docs/_static/pdf/foo.pdf\" rel=\"nofollow\">foo.pdf</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">camelot_pro</span> <span class=\"kn\">import</span> <span class=\"n\">read_pdf</span>\n<span class=\"n\">pro_tables</span> <span class=\"o\">=</span> <span class=\"n\">read_pdf</span><span class=\"p\">(</span><span class=\"s1\">'foo-image.jpg'</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"o\">=</span><span class=\"s2\">\"CamelotPro\"</span><span class=\"p\">,</span> <span class=\"n\">pro_kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'api_key'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">})</span>  \n</pre>\n<p>Now that you have triggered the process to find tables from the image, you can find the status of it from the  <code>JobStatus</code> attribute, which returns any of <em>Success, Failed, Processing, Incomplete</em>.</p>\n<pre><code>pro_tables.JobStatus\n[Out]: \"Success\"\n\npro_tables[0].df                  # get a pandas DataFrame!  \n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Col_1</th>\n<th>Col_2</th>\n<th>Col_3</th>\n<th>Col_4</th>\n<th>Col_5</th>\n<th>Col_6</th>\n<th>Col_7</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cycle Name</td>\n<td>KI (1/km)</td>\n<td>Distance (mi)</td>\n<td>Percent Fuel Savings</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>Improved Speed</td>\n<td>Decreased Accel</td>\n<td>Eliminate Stops</td>\n<td>Decreased Idle</td>\n</tr>\n<tr>\n<td>2012_2</td>\n<td>3.30</td>\n<td>1.3</td>\n<td>5.9%</td>\n<td>9.5%</td>\n<td>29.2%</td>\n<td>17.4%</td>\n</tr>\n<tr>\n<td>2145_1</td>\n<td>0.68</td>\n<td>11.2</td>\n<td>2.4%</td>\n<td>0.1%</td>\n<td>9.5%</td>\n<td>2.7%</td>\n</tr>\n<tr>\n<td>4234_1</td>\n<td>0.59</td>\n<td>58.7</td>\n<td>8.5%</td>\n<td>1.3%</td>\n<td>8.5%</td>\n<td>3.3%</td>\n</tr>\n<tr>\n<td>2032_2</td>\n<td>0.17</td>\n<td>57.8</td>\n<td>21.7%</td>\n<td>0.3%</td>\n<td>2.7%</td>\n<td>1.2%</td>\n</tr>\n<tr>\n<td>4171_1</td>\n<td>0.07</td>\n<td>173.9</td>\n<td>58.1%</td>\n<td>1.6%</td>\n<td>2.1%</td>\n<td>0.5%</td>\n</tr></tbody></table>\n<p>When the <code>JobStatus</code> status is \"Success\", just like Camelot, the output gives the gist of the process.</p>\n<pre><code>pro_tables\n[Out]: &lt;TableList n=1&gt;                                # Will be &lt;TableList n=0&gt; for any other JobStatus\npro_tables[0].df                  # get a pandas DataFrame!\n</code></pre>\n<p>... and then there are the regular Camelot functions and attributes</p>\n<pre><code>pro_tables.export('foo.csv', f='csv', )         # json, excel, html, sqlite  \n\npro_tables[0]\n[Out]: &lt;Table shape=(7, 7)&gt;\n\npro_tables[0].parsing_report  \n[Out]: {  \n    'accuracy': 75.12,  \n    'whitespace': 0.86,  \n    'order': 1,  \n    'page': 1  \n}\n\npro_tables[0].to_csv('foo.csv')             # to_json, to_excel, to_html, to_sqlite  \n</code></pre>\n<blockquote>\n<p>*<strong>ProTip</strong>: Very useful to check out all attributes of the output, when the <code>JobStatus</code> is <strong>not \"Success\"</strong>.</p>\n</blockquote>\n<pre><code>pro_tables.__dict__\n\n[Out]: \n{\n    '_tables': [&lt;Table shape=(7, 7)&gt;],        # List of tables found with their shapes\n    'Pages': 1,                                # Number of Input pages, equivalent to credits used\n    'JobStatus': 'Success'                    # Success | Failed | Processing | Incomplete\n}\n</code></pre>\n<p>Most of the image file processes result in an instant 'Success' job status, at times, a blurry/big/bad file may take ~15 seconds and PDF file process time depends on the page count. In these cases, the <code>JobStatus</code> is <strong>\"Processing\"</strong> and the <code>JobId</code> attribute of the output is used to retrieve tables as shown below.</p>\n<pre><code>pro_tables.JobStatus\n[Out]: \"Processing\"\n\njob_id = pro_tables.JobId\nprint(job_id)\n[Out]: \"d93e9af0f632084394099dabeb150ead7ee2ed5250377cb4772a358abcc21cf2\"\n\nretrieve_output = read_pdf('', flavor=\"CamelotPro\", pro_kwargs={'api_key': api_key, 'job_id': job_id})\nprint(retrieve_output.JobStatus)\n[Out]: \"Success\"\n</code></pre>\n<blockquote>\n<p><em><strong>ProTip</strong>: To receive <strong>immediate Success on image files</strong>, use <code>'dup_check': False</code> in <code>pro_kwargs</code></em></p>\n</blockquote>\n<pre><code>instant_pro_tables = read_pdf('foo-image.jpg', flavor=\"CamelotPro\", pro_kwargs={'api_key': api_key, 'dup_check': False})\n</code></pre>\n<h2>New and Re-defined Attributes of CamelotPro</h2>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Explanation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pro_tables.Pages</code></td>\n<td>Total number of input pages processed. Equivalent to credits used</td>\n</tr>\n<tr>\n<td><code>pro_tables.JobStatus</code></td>\n<td>\"<strong>Success</strong>\" - Check output for tables or Use \"JobId\" to retrieve tables<br> \"<strong>Failed</strong>\" - Process Failed, No Credits used<br> \"<strong>Processing</strong>\" - Still in process, use \"JobId\" to retrieve the output later<br> \"<strong>Incomplete</strong>\" - Process finished, but all pages are not processed. Partial output</td>\n</tr>\n<tr>\n<td><code>pro_tables.Message</code></td>\n<td>Gives the reason for failure or issue,</td>\n</tr>\n<tr>\n<td><code>pro_tables.ProTip</code></td>\n<td>Hints on how to avoid the errors, if it can be rectified with developer input</td>\n</tr>\n<tr>\n<td><code>pro_tables[0].accuracy</code></td>\n<td>Accuracy of text assignment to the cell</td>\n</tr>\n<tr>\n<td><code>pro_tables[0].accuracy_character</code></td>\n<td>Accuracy of Characters recognized from the image</td>\n</tr>\n<tr>\n<td><code>pro_tables[0].accuracy_layout</code></td>\n<td>Accuracy of table layout's design decision</td>\n</tr>\n<tr>\n<td><code>pro_tables[0].whitespace</code></td>\n<td>Percentage of Error in Character recognition</td>\n</tr></tbody></table>\n<h2>Pull Requests &amp; Rewards</h2>\n<p>Pull requests are most welcome and greatly appreciated.</p>\n<h2>License</h2>\n<p>This project is licensed under the GNU-3.0 License, see the <a href=\"https://github.com/extracttable/camelotpro/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for details.</p>\n<h2>Credits</h2>\n<p>Last but not least, we want to be thankful to the contributors of <a href=\"https://github.com/atlanhq/camelot/\" rel=\"nofollow\">camelot-py</a></p>\n<h1>Social Media</h1>\n<p>Follow us on Social media for library updates and free credits.</p>\n<p><a href=\"https://www.linkedin.com/company/extracttable\" rel=\"nofollow\"><img alt=\"Image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f004c951f40a9bd87ae7eb58d2f123055bc3dc8/68747470733a2f2f63646e332e69636f6e66696e6465722e636f6d2f646174612f69636f6e732f736f6369616c6e6574776f726b696e672f33322f6c696e6b6564696e2e706e67\"></a>\n\u00a0\u00a0\u00a0\u00a0\n<a href=\"https://twitter.com/extracttable\" rel=\"nofollow\"><img alt=\"Image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59838eb172ebd378540d4d555ab506d67820a160/68747470733a2f2f6162732e7477696d672e636f6d2f66617669636f6e732f747769747465722e69636f\"></a></p>\n\n          </div>"}, "last_serial": 6134223, "releases": {"0.7.3": [{"comment_text": "", "digests": {"md5": "99da03e0798538f4adc26d40436e1a89", "sha256": "798e6c944ea98b94b4afce940024abe2dd054582ef4cb89cf1be15245df39f21"}, "downloads": -1, "filename": "CamelotPro-0.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "99da03e0798538f4adc26d40436e1a89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23714, "upload_time": "2019-08-26T00:13:32", "upload_time_iso_8601": "2019-08-26T00:13:32.921225Z", "url": "https://files.pythonhosted.org/packages/9e/d5/e64298b00ec3d77c350ea9bc9303044c837d686f736112ac5bea2622b459/CamelotPro-0.7.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3429926c9a7f97c101c439ca65b58318", "sha256": "137c2e0b759678e5e4ef87c35d1be41d0ee8edfa8faa2c1c87d6165df6310eff"}, "downloads": -1, "filename": "CamelotPro-0.7.3.tar.gz", "has_sig": false, "md5_digest": "3429926c9a7f97c101c439ca65b58318", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9625, "upload_time": "2019-08-26T00:13:34", "upload_time_iso_8601": "2019-08-26T00:13:34.553630Z", "url": "https://files.pythonhosted.org/packages/73/2e/443372efe50ef06d6f342eb4957e9bf28d9ed81bc6502fbe44e80e376118/CamelotPro-0.7.3.tar.gz", "yanked": false}], "0.7.3.1": [{"comment_text": "", "digests": {"md5": "57809dc14818da845c01cf2b1f199df0", "sha256": "b325046be67196ef1942464579438521601f4d95d8306feeaded3307c10df60c"}, "downloads": -1, "filename": "CamelotPro-0.7.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "57809dc14818da845c01cf2b1f199df0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23780, "upload_time": "2019-08-29T01:28:18", "upload_time_iso_8601": "2019-08-29T01:28:18.243918Z", "url": "https://files.pythonhosted.org/packages/18/a3/0d31b0510143b0602fa31bba9485490bc9ee3f1bccd60461ae716594e38a/CamelotPro-0.7.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0af2265fda06870a29dfb9952d4ab094", "sha256": "d3f1d2127f0c9a3f35ccdd7127900a7fd00f9f231f5812f493b7a1c28551352b"}, "downloads": -1, "filename": "CamelotPro-0.7.3.1.tar.gz", "has_sig": false, "md5_digest": "0af2265fda06870a29dfb9952d4ab094", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9753, "upload_time": "2019-08-29T01:27:57", "upload_time_iso_8601": "2019-08-29T01:27:57.319508Z", "url": "https://files.pythonhosted.org/packages/02/50/3f58a0a1171dfe37db6d565801ad6aab4144040b8bf8ade7a44b1014066d/CamelotPro-0.7.3.1.tar.gz", "yanked": false}], "0.7.3.2": [{"comment_text": "", "digests": {"md5": "d19388076db2b0a9ed76f5c1f0f4082f", "sha256": "607d00eb34bdd9a03d98b45d4e91ad3c39385c31b1c6a67d93821458f12498d0"}, "downloads": -1, "filename": "CamelotPro-0.7.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d19388076db2b0a9ed76f5c1f0f4082f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24659, "upload_time": "2019-09-26T03:43:09", "upload_time_iso_8601": "2019-09-26T03:43:09.914294Z", "url": "https://files.pythonhosted.org/packages/bb/97/bf0c19581ee760d9b89496b156b52a0b81ba27f95d54bf126878acf59b1e/CamelotPro-0.7.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "503a09694a75d08cd868b95379edd068", "sha256": "ed4e9267a4ffce15470fcfe03e5ee93d910ff23ba47886dc32c620aefaeb2b41"}, "downloads": -1, "filename": "CamelotPro-0.7.3.2.tar.gz", "has_sig": false, "md5_digest": "503a09694a75d08cd868b95379edd068", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10285, "upload_time": "2019-09-26T03:43:11", "upload_time_iso_8601": "2019-09-26T03:43:11.568995Z", "url": "https://files.pythonhosted.org/packages/1f/7a/e837b4ab7e8de96e36d78019165998afd2498d5203710fbf4bd48d25d762/CamelotPro-0.7.3.2.tar.gz", "yanked": false}], "0.7.3a2": [{"comment_text": "", "digests": {"md5": "7fa1adc30633b029f1274c549a8c44dd", "sha256": "90815fbc8356a679d46b141686126deaae26d7dc8115f1aa88ceccc814aed206"}, "downloads": -1, "filename": "CamelotPro-0.7.3a2-py3-none-any.whl", "has_sig": false, "md5_digest": "7fa1adc30633b029f1274c549a8c44dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23735, "upload_time": "2019-08-25T19:29:46", "upload_time_iso_8601": "2019-08-25T19:29:46.654078Z", "url": "https://files.pythonhosted.org/packages/b2/d9/89d0935168f0cf0e78fdde35aa37da052d85025a575d5981a4bfa3bd4e4b/CamelotPro-0.7.3a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8d9eec38b9f85445554aa75bf524318", "sha256": "7330ce932fa8f66f508ee42df02f3a3413f586d333fb39ad0d68875ea5befdaa"}, "downloads": -1, "filename": "CamelotPro-0.7.3a2.tar.gz", "has_sig": false, "md5_digest": "e8d9eec38b9f85445554aa75bf524318", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9625, "upload_time": "2019-08-25T19:29:48", "upload_time_iso_8601": "2019-08-25T19:29:48.953576Z", "url": "https://files.pythonhosted.org/packages/74/82/aa7f7b8f3ab1ac77b05d1ede419a29b49e464c200397a33f4faec0f69bb7/CamelotPro-0.7.3a2.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "4a87d2ed8600a35bc7dea1a615506d37", "sha256": "ebde001aeed0d5952fc904faf64062413fc172ce0ffac4bc9d54157f2d1e473f"}, "downloads": -1, "filename": "CamelotPro-0.7.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4a87d2ed8600a35bc7dea1a615506d37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24692, "upload_time": "2019-10-04T03:11:19", "upload_time_iso_8601": "2019-10-04T03:11:19.166781Z", "url": "https://files.pythonhosted.org/packages/fd/c5/3d436810eb41b9e9c94d10bf74835d970acb2cab87ce145f7c5e44ff0f84/CamelotPro-0.7.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0bfa69e857c94482508af9aeed2634a", "sha256": "caf2d4f9feda9dbd4fcedf1aba69c5eb53f271e6652daac215c0c7e38a66eb43"}, "downloads": -1, "filename": "CamelotPro-0.7.4.tar.gz", "has_sig": false, "md5_digest": "a0bfa69e857c94482508af9aeed2634a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10360, "upload_time": "2019-10-04T03:11:21", "upload_time_iso_8601": "2019-10-04T03:11:21.158785Z", "url": "https://files.pythonhosted.org/packages/43/b4/eff8d46af0e2f3ac5c97133a691d065b0063edceda4a388c94fa13a26dc8/CamelotPro-0.7.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "252c5b7049e72f5105ce4a1151b97880", "sha256": "ca3f0cc0a0f1294c74f69e1ab2c1ed1d9567d8c88cc85151e497357518270594"}, "downloads": -1, "filename": "CamelotPro-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "252c5b7049e72f5105ce4a1151b97880", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24795, "upload_time": "2019-10-14T17:50:46", "upload_time_iso_8601": "2019-10-14T17:50:46.657897Z", "url": "https://files.pythonhosted.org/packages/80/d7/49345cdf0f111aaa3a4f7c486f53d9c60168b11b90cf4dc207fa9ad3e7a4/CamelotPro-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0beb0d3f31f68bd50f9b7344b885a4b", "sha256": "20c9b182281e884bfd75012c464ae6a461fa3ab8a2db7755dcf2bdee9269aef7"}, "downloads": -1, "filename": "CamelotPro-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c0beb0d3f31f68bd50f9b7344b885a4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9729, "upload_time": "2019-10-14T17:50:48", "upload_time_iso_8601": "2019-10-14T17:50:48.509609Z", "url": "https://files.pythonhosted.org/packages/88/5b/9a2005916ed89a66564c331b0d84b2810261a203d031215d07d038af52fe/CamelotPro-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "272a352d35ae215cf5cbe00fb2711fcf", "sha256": "02acd0ecac99d52ea3f27bb26a3b6161620b99c1d98ca176ebf536deb3c41a8e"}, "downloads": -1, "filename": "CamelotPro-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "272a352d35ae215cf5cbe00fb2711fcf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25520, "upload_time": "2019-10-20T18:17:40", "upload_time_iso_8601": "2019-10-20T18:17:40.835347Z", "url": "https://files.pythonhosted.org/packages/1b/2c/ddfd6406b085964c2fb837f353cfbf612f0107e15a2c18fad0d4a9574923/CamelotPro-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac34a6d788a582d9934129ce50f97ceb", "sha256": "1bfe3416d8c25382b5450d0cf2a08a4e6c52778439b1817402b84a4ea02eeb64"}, "downloads": -1, "filename": "CamelotPro-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ac34a6d788a582d9934129ce50f97ceb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10514, "upload_time": "2019-10-20T18:17:43", "upload_time_iso_8601": "2019-10-20T18:17:43.285374Z", "url": "https://files.pythonhosted.org/packages/f5/5f/60af56ca6b515fc5e9b2b18754ab28d260109c4b2b2657ed6a8fc0f205cf/CamelotPro-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "9614aefdb04985a573448b05e2178c91", "sha256": "4b5e8b491389d7cca6f22b9e29e9b058f2d8196e12501561ed3cf8c132121e9f"}, "downloads": -1, "filename": "CamelotPro-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9614aefdb04985a573448b05e2178c91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25611, "upload_time": "2019-10-20T22:41:40", "upload_time_iso_8601": "2019-10-20T22:41:40.434442Z", "url": "https://files.pythonhosted.org/packages/b9/4f/b7e88c343ec64b8656a690bb2ec9c90076c10187f7eb168d58b3ed4422c4/CamelotPro-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "662f8f2e375c43d27b3c2205f88d30d0", "sha256": "a71c46642818f473f76d6c840335dc28c1198fa92eaba36e32728aec0e283e3f"}, "downloads": -1, "filename": "CamelotPro-1.2.0.tar.gz", "has_sig": false, "md5_digest": "662f8f2e375c43d27b3c2205f88d30d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9220, "upload_time": "2019-10-20T22:41:41", "upload_time_iso_8601": "2019-10-20T22:41:41.774460Z", "url": "https://files.pythonhosted.org/packages/7f/c4/6cec877f24a2c0b5d11943f8b464a35a2a17aed695e31f009b04d26f8f4e/CamelotPro-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "1c9f268c6d05d6a4fc53a2300bb7fcf2", "sha256": "a83aa5b4aeaff6ec4cc0e85359f3e47cbbcebd51408ae573efcc42cd6f02f261"}, "downloads": -1, "filename": "CamelotPro-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c9f268c6d05d6a4fc53a2300bb7fcf2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25615, "upload_time": "2019-11-14T02:57:42", "upload_time_iso_8601": "2019-11-14T02:57:42.746451Z", "url": "https://files.pythonhosted.org/packages/14/a1/8ecd9ab671ea47fdf2f619a6d25fd166cb4aa9e2d2cfedc7b9bd16d558b6/CamelotPro-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "230fdac524d8fba21bc170ae316fc902", "sha256": "0da317307b793d571ded47be86294c87b78f87f8dc3593ead42a58159429f9f6"}, "downloads": -1, "filename": "CamelotPro-1.2.1.tar.gz", "has_sig": false, "md5_digest": "230fdac524d8fba21bc170ae316fc902", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9221, "upload_time": "2019-11-14T02:57:44", "upload_time_iso_8601": "2019-11-14T02:57:44.799750Z", "url": "https://files.pythonhosted.org/packages/83/1b/1ece35cf75ff5bd34692929c56a15433fe14aa9974fd45d62e40379c446c/CamelotPro-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c9f268c6d05d6a4fc53a2300bb7fcf2", "sha256": "a83aa5b4aeaff6ec4cc0e85359f3e47cbbcebd51408ae573efcc42cd6f02f261"}, "downloads": -1, "filename": "CamelotPro-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c9f268c6d05d6a4fc53a2300bb7fcf2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25615, "upload_time": "2019-11-14T02:57:42", "upload_time_iso_8601": "2019-11-14T02:57:42.746451Z", "url": "https://files.pythonhosted.org/packages/14/a1/8ecd9ab671ea47fdf2f619a6d25fd166cb4aa9e2d2cfedc7b9bd16d558b6/CamelotPro-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "230fdac524d8fba21bc170ae316fc902", "sha256": "0da317307b793d571ded47be86294c87b78f87f8dc3593ead42a58159429f9f6"}, "downloads": -1, "filename": "CamelotPro-1.2.1.tar.gz", "has_sig": false, "md5_digest": "230fdac524d8fba21bc170ae316fc902", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9221, "upload_time": "2019-11-14T02:57:44", "upload_time_iso_8601": "2019-11-14T02:57:44.799750Z", "url": "https://files.pythonhosted.org/packages/83/1b/1ece35cf75ff5bd34692929c56a15433fe14aa9974fd45d62e40379c446c/CamelotPro-1.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:34 2020"}