{"info": {"author": "zhaofeng-shu33", "author_email": "616545598@qq.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# ace_nn\n[![Build Status](https://travis-ci.org/zhaofeng-shu33/ace_nn.svg?branch=master)](https://travis-ci.org/zhaofeng-shu33/ace_nn)\n\n## Introduction\n\nThis repo contains experimental implementation of ace algorithm via neural network. It is shown by **xiangxiang-xu** that calculating optimal features by *Alternating Conditional Expectation* is equivalent to maximize *H-score*. \n\n## How to run\n\nThree examples are provided ( one for continuous variable and the other twos are for discrete variable) and their results are the same as `ace`. The main function is `ace_nn` and its parameters are very similar to [`ace_cream`](https://github.com/zhaofeng-shu33/ace_cream). \n\n```python\nimport numpy as np\nfrom ace_nn import ace_nn\n# discrete case, binary symmetric channel with crossover probability 0.1\nN_SIZE = 1000\nx = np.random.choice([0,1], size=N_SIZE)\nn = np.random.choice([0,1], size=N_SIZE, p=[0.9, 0.1])\ny = np.mod(x + n, 2)\n# set both x(cat=0) and y(cat=-1) as categorical type\ntx, ty = ace_nn(x, y, cat=[-1,0], epochs=100)\n\n# continuous case\nx = np.random.uniform(0, np.pi, 200)\ny = np.exp(np.sin(x)+np.random.normal(size=200)/2)\ntx, ty = ace_nn(x, y)\n```\n\nFor more detail, run `help(ace_nn)` to see the parameters and returns of this function.\n\n## Further discussion\n\nCurrently, the neural networks used to approximate optimal $f(x)$ and $g(y)$ are two-layer MLP with `tanh` as activation function. More turns of epochs are needed for large alphabet  $|\\mathcal{X}|$ and  $|\\mathcal{Y}|$ and the running time is not short.\n\nAlso, `batch_size` and `hidden_units_num` can be hypertuned, and there is no guarantee that current configuration of neural network is optimal for solving ace.\n\n## Application\nwe can use `ace_nn(x, y, return_hscore = True)` to calculate a lower bound of $\\frac{\\norm{B}_F^2}{2}$", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zhaofeng-shu33/ace_nn", "keywords": "", "license": "Apache License Version 2.0", "maintainer": "zhaofeng-shu33", "maintainer_email": "616545598@qq.com", "name": "ace-nn", "package_url": "https://pypi.org/project/ace-nn/", "platform": "", "project_url": "https://pypi.org/project/ace-nn/", "project_urls": {"Homepage": "https://github.com/zhaofeng-shu33/ace_nn"}, "release_url": "https://pypi.org/project/ace-nn/0.2/", "requires_dist": null, "requires_python": "", "summary": "Alternating Conditional Exceptation with Neural Network", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ace_nn</h1>\n<p><a href=\"https://travis-ci.org/zhaofeng-shu33/ace_nn\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e8f9ca2f56652e7b12918e2f449a6c374aaa740/68747470733a2f2f7472617669732d63692e6f72672f7a68616f66656e672d73687533332f6163655f6e6e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Introduction</h2>\n<p>This repo contains experimental implementation of ace algorithm via neural network. It is shown by <strong>xiangxiang-xu</strong> that calculating optimal features by <em>Alternating Conditional Expectation</em> is equivalent to maximize <em>H-score</em>.</p>\n<h2>How to run</h2>\n<p>Three examples are provided ( one for continuous variable and the other twos are for discrete variable) and their results are the same as <code>ace</code>. The main function is <code>ace_nn</code> and its parameters are very similar to <a href=\"https://github.com/zhaofeng-shu33/ace_cream\" rel=\"nofollow\"><code>ace_cream</code></a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ace_nn</span> <span class=\"kn\">import</span> <span class=\"n\">ace_nn</span>\n<span class=\"c1\"># discrete case, binary symmetric channel with crossover probability 0.1</span>\n<span class=\"n\">N_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">N_SIZE</span><span class=\"p\">)</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">N_SIZE</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">])</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># set both x(cat=0) and y(cat=-1) as categorical type</span>\n<span class=\"n\">tx</span><span class=\"p\">,</span> <span class=\"n\">ty</span> <span class=\"o\">=</span> <span class=\"n\">ace_nn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">cat</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># continuous case</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">tx</span><span class=\"p\">,</span> <span class=\"n\">ty</span> <span class=\"o\">=</span> <span class=\"n\">ace_nn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>For more detail, run <code>help(ace_nn)</code> to see the parameters and returns of this function.</p>\n<h2>Further discussion</h2>\n<p>Currently, the neural networks used to approximate optimal $f(x)$ and $g(y)$ are two-layer MLP with <code>tanh</code> as activation function. More turns of epochs are needed for large alphabet  $|\\mathcal{X}|$ and  $|\\mathcal{Y}|$ and the running time is not short.</p>\n<p>Also, <code>batch_size</code> and <code>hidden_units_num</code> can be hypertuned, and there is no guarantee that current configuration of neural network is optimal for solving ace.</p>\n<h2>Application</h2>\n<p>we can use <code>ace_nn(x, y, return_hscore = True)</code> to calculate a lower bound of $\\frac{\\norm{B}_F^2}{2}$</p>\n\n          </div>"}, "last_serial": 4883796, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5340b179c82ee26c5fe384289669c511", "sha256": "1ac0af77e8709d5ff5d5af905f318c471aca4ddb2826a5024f587e8def270ba9"}, "downloads": -1, "filename": "ace_nn-0.1.tar.gz", "has_sig": false, "md5_digest": "5340b179c82ee26c5fe384289669c511", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3799, "upload_time": "2019-03-01T11:28:23", "upload_time_iso_8601": "2019-03-01T11:28:23.182052Z", "url": "https://files.pythonhosted.org/packages/d7/31/2157850a793a2842f72c10fb12c6a8e4293a5280475e41c6647bb02cf18f/ace_nn-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "22d9b1bdab87e39d0f525baf9c204755", "sha256": "c51c7c2b0853c6945173def0170eb93b28275ffee8de81ee66ef6c7ea338f519"}, "downloads": -1, "filename": "ace_nn-0.2.tar.gz", "has_sig": false, "md5_digest": "22d9b1bdab87e39d0f525baf9c204755", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3793, "upload_time": "2019-03-01T11:31:13", "upload_time_iso_8601": "2019-03-01T11:31:13.786027Z", "url": "https://files.pythonhosted.org/packages/b1/cc/69418eba970547c4fed55a8e7bfdd0ec83dd5646a3a59db8e1cf35c172f8/ace_nn-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22d9b1bdab87e39d0f525baf9c204755", "sha256": "c51c7c2b0853c6945173def0170eb93b28275ffee8de81ee66ef6c7ea338f519"}, "downloads": -1, "filename": "ace_nn-0.2.tar.gz", "has_sig": false, "md5_digest": "22d9b1bdab87e39d0f525baf9c204755", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3793, "upload_time": "2019-03-01T11:31:13", "upload_time_iso_8601": "2019-03-01T11:31:13.786027Z", "url": "https://files.pythonhosted.org/packages/b1/cc/69418eba970547c4fed55a8e7bfdd0ec83dd5646a3a59db8e1cf35c172f8/ace_nn-0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:41 2020"}