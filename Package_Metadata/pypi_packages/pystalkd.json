{"info": {"author": "Gabriel", "author_email": "gabrielmenezesvi@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "pystalkd\n========\n>Beanstalk is a simple, fast work queue.\n>Its interface is generic, but was originally designed for reducing the latency of page views in high-volume web applications by running time-consuming tasks asynchronously\n\nhttp://kr.github.io/beanstalkd/\n\npystalkd is a beanstalkd bindings targeting python3.\nThis library is based on https://github.com/earl/beanstalkc and should be API compatible.\n\n[![Build Status](https://travis-ci.org/menezes-/pystalkd.svg?branch=master)](https://travis-ci.org/menezes-/pystalkd)\nInstalling\n-------\n```\npip install pystalkd\n```\nor from source:\n```\npython setup.py install\n```\n\nUsing\n------\n```python\n>>> from pystalkd.Beanstalkd import Connection\n>>> c = Connection(\"localhost\", 11300) #if no argument is given default configuration is used\n>>> c.put(\"hey!\")\n>>> job = c.reserve(0)\n>>> job.body\n\"hey!\"\n```\nOne of the goals is to be API compatible with beanstalkc, so this tutorial should be valid: https://github.com/earl/beanstalkc/blob/master/TUTORIAL.mkd\n\nThe main differences, API wise are: \n\n1) where number of seconds is expected pystalkd also accepts a timedelta object\n\n2) you can temporarily watch and use a tube using the `with` keyword\n\n```python\nprint(c.using()) # \"default\"\nwith c.temporary_use(\"test\"):\n  print(c.using()) # \"test\"\nprint(c.using()) # \"default\"\n\nprint(c.watching()) # [\"default\"]\nwith c.temporary_use(\"test\"):\n  print(c.watching()) # [\"default\", \"test\"]\nprint(c.watching()) # [\"default\"]\n```\n3) you also have access to the \"bytes\" API. \nTo maintain compatibility with beanstalkc the API worked only with strings but now\nyou can use the functions ending in \"_bytes\" (internally this is controlled using the `raw` paramater) to work directly \nwith bytes\n\n```python\nfrom os import urandom\ntest_bytes = urandom(50)\njob_id = c.put_bytes(test_bytes)\njob = c.reserve_bytes(0)\nprint(job.body) # b'i\\x91\\xdf\\xf8\\x1b?zj....'\n\njob_id2 = c.put(\"string\")\njob2 = c.reserve_bytes(0)\nprint(job2.body) # b'string'\n```\n\nNote: you can use `reserve_bytes` with `put` and get the raw string (not encoded), but the other way around might cause problems\n\n\nTests\n-------\nTo test with default host and port (localhost, 11300): \n```\npython3 test.py\n```\nTo test on a specific host (if port is not specified 11300 is used)\n```\npython3 test.py host [port]\n```\n\nLicense\n-------\n\nCopyright (C) 2008-2014 Andreas Bolka.\n\nCopyright (C) 2015-2016 Gabriel Menezes.\nLicensed under the [MIT][license].\n\n[license]: https://opensource.org/licenses/MIT\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/menezes-/pystalkd/archive/v1.3.0.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/menezes-/pystalkd", "keywords": "beanstalkd,python3,bindings", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pystalkd", "package_url": "https://pypi.org/project/pystalkd/", "platform": "", "project_url": "https://pypi.org/project/pystalkd/", "project_urls": {"Download": "https://github.com/menezes-/pystalkd/archive/v1.3.0.zip", "Homepage": "https://github.com/menezes-/pystalkd"}, "release_url": "https://pypi.org/project/pystalkd/1.3.0/", "requires_dist": ["PyYAML ; extra == 'yaml'"], "requires_python": "", "summary": "Beanstalkd bindings for python3", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pystalkd</h1>\n<blockquote>\n<p>Beanstalk is a simple, fast work queue.\nIts interface is generic, but was originally designed for reducing the latency of page views in high-volume web applications by running time-consuming tasks asynchronously</p>\n</blockquote>\n<p><a href=\"http://kr.github.io/beanstalkd/\" rel=\"nofollow\">http://kr.github.io/beanstalkd/</a></p>\n<p>pystalkd is a beanstalkd bindings targeting python3.\nThis library is based on <a href=\"https://github.com/earl/beanstalkc\" rel=\"nofollow\">https://github.com/earl/beanstalkc</a> and should be API compatible.</p>\n<h2><a href=\"https://travis-ci.org/menezes-/pystalkd\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1cffff77a9330c33376b80a9f93d5fb517b4c853/68747470733a2f2f7472617669732d63692e6f72672f6d656e657a65732d2f70797374616c6b642e7376673f6272616e63683d6d6173746572\"></a>\nInstalling</h2>\n<pre><code>pip install pystalkd\n</code></pre>\n<p>or from source:</p>\n<pre><code>python setup.py install\n</code></pre>\n<h2>Using</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pystalkd.Beanstalkd</span> <span class=\"kn\">import</span> <span class=\"n\">Connection</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"mi\">11300</span><span class=\"p\">)</span> <span class=\"c1\">#if no argument is given default configuration is used</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s2\">\"hey!\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">reserve</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">body</span>\n<span class=\"s2\">\"hey!\"</span>\n</pre>\n<p>One of the goals is to be API compatible with beanstalkc, so this tutorial should be valid: <a href=\"https://github.com/earl/beanstalkc/blob/master/TUTORIAL.mkd\" rel=\"nofollow\">https://github.com/earl/beanstalkc/blob/master/TUTORIAL.mkd</a></p>\n<p>The main differences, API wise are:</p>\n<ol>\n<li>\n<p>where number of seconds is expected pystalkd also accepts a timedelta object</p>\n</li>\n<li>\n<p>you can temporarily watch and use a tube using the <code>with</code> keyword</p>\n</li>\n</ol>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">())</span> <span class=\"c1\"># \"default\"</span>\n<span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">temporary_use</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">())</span> <span class=\"c1\"># \"test\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">())</span> <span class=\"c1\"># \"default\"</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">watching</span><span class=\"p\">())</span> <span class=\"c1\"># [\"default\"]</span>\n<span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">temporary_use</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">watching</span><span class=\"p\">())</span> <span class=\"c1\"># [\"default\", \"test\"]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">watching</span><span class=\"p\">())</span> <span class=\"c1\"># [\"default\"]</span>\n</pre>\n<ol>\n<li>you also have access to the \"bytes\" API.\nTo maintain compatibility with beanstalkc the API worked only with strings but now\nyou can use the functions ending in \"_bytes\" (internally this is controlled using the <code>raw</code> paramater) to work directly\nwith bytes</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">urandom</span>\n<span class=\"n\">test_bytes</span> <span class=\"o\">=</span> <span class=\"n\">urandom</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">job_id</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">put_bytes</span><span class=\"p\">(</span><span class=\"n\">test_bytes</span><span class=\"p\">)</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">reserve_bytes</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span> <span class=\"c1\"># b'i\\x91\\xdf\\xf8\\x1b?zj....'</span>\n\n<span class=\"n\">job_id2</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s2\">\"string\"</span><span class=\"p\">)</span>\n<span class=\"n\">job2</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">reserve_bytes</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">job2</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span> <span class=\"c1\"># b'string'</span>\n</pre>\n<p>Note: you can use <code>reserve_bytes</code> with <code>put</code> and get the raw string (not encoded), but the other way around might cause problems</p>\n<h2>Tests</h2>\n<p>To test with default host and port (localhost, 11300):</p>\n<pre><code>python3 test.py\n</code></pre>\n<p>To test on a specific host (if port is not specified 11300 is used)</p>\n<pre><code>python3 test.py host [port]\n</code></pre>\n<h2>License</h2>\n<p>Copyright (C) 2008-2014 Andreas Bolka.</p>\n<p>Copyright (C) 2015-2016 Gabriel Menezes.\nLicensed under the <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a>.</p>\n\n          </div>"}, "last_serial": 6119657, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "a6f029ae0a67912c8a7bfedaaa352653", "sha256": "71c56775349afa290ea260aedda64188140cb1c926935b31b82dd6a86f883edd"}, "downloads": -1, "filename": "pystalkd-1.0.1.zip", "has_sig": false, "md5_digest": "a6f029ae0a67912c8a7bfedaaa352653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7683, "upload_time": "2014-12-06T20:55:57", "upload_time_iso_8601": "2014-12-06T20:55:57.058776Z", "url": "https://files.pythonhosted.org/packages/ab/fe/b6621ccb8cb8c5f7b0fa65d0c0a0828f99b15278b47bdbf3ffe892ca5f5e/pystalkd-1.0.1.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "4a3d44bb3d462f9ce26747b4064f3798", "sha256": "1fdc639978530ed203da6a7ee23c3631be07b55d2359e717700d02cbc8b64e09"}, "downloads": -1, "filename": "pystalkd-1.1.zip", "has_sig": false, "md5_digest": "4a3d44bb3d462f9ce26747b4064f3798", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8788, "upload_time": "2014-12-08T12:30:27", "upload_time_iso_8601": "2014-12-08T12:30:27.399970Z", "url": "https://files.pythonhosted.org/packages/12/31/71dfba5d2e1981b227af8bc7431349fa71089e802fea5cd148a55bfea27b/pystalkd-1.1.zip", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "6a859b84a86e362bab2e733684eb16f1", "sha256": "10fe4ada79946018b55c6678d996b2dfb80b5e1158f6772bc8c344b7043bd086"}, "downloads": -1, "filename": "pystalkd-1.1.1.zip", "has_sig": false, "md5_digest": "6a859b84a86e362bab2e733684eb16f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8646, "upload_time": "2015-01-23T20:49:44", "upload_time_iso_8601": "2015-01-23T20:49:44.803123Z", "url": "https://files.pythonhosted.org/packages/90/66/63765edb161bad88b24b2657b7b6ce8f25890cf7703d749c4296a1c3de35/pystalkd-1.1.1.zip", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "b7a2f0b505624de39cacaf6f52c1d076", "sha256": "19bc37e6678059494ccdd746a1d230845caea8857936ac4078b0867f329753a0"}, "downloads": -1, "filename": "pystalkd-1.2.0.zip", "has_sig": false, "md5_digest": "b7a2f0b505624de39cacaf6f52c1d076", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9366, "upload_time": "2015-10-28T19:30:28", "upload_time_iso_8601": "2015-10-28T19:30:28.568801Z", "url": "https://files.pythonhosted.org/packages/f8/85/57f8baa72620c9a525082f17c7f3e48590d8d7661c754910b458bde59a75/pystalkd-1.2.0.zip", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "0ef79d4de497fa1252515762992bead5", "sha256": "b6cc0894ef16f838e95775b00c1f7e620bae4d290e69199fd9489277e9ad7423"}, "downloads": -1, "filename": "pystalkd-1.2.1.zip", "has_sig": false, "md5_digest": "0ef79d4de497fa1252515762992bead5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9399, "upload_time": "2015-10-29T12:24:56", "upload_time_iso_8601": "2015-10-29T12:24:56.467162Z", "url": "https://files.pythonhosted.org/packages/bc/b1/fe412e01457df9104cb524514618bc36f6789c62338d3d20c822c5f308b4/pystalkd-1.2.1.zip", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "8e303a5bd1903cb5c09214dea7518986", "sha256": "66fbf979a259a7faac45667b177ce5c1364f0b249c7414399fa231c80ad35409"}, "downloads": -1, "filename": "pystalkd-1.2.2.zip", "has_sig": false, "md5_digest": "8e303a5bd1903cb5c09214dea7518986", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16176, "upload_time": "2016-05-11T15:06:21", "upload_time_iso_8601": "2016-05-11T15:06:21.096901Z", "url": "https://files.pythonhosted.org/packages/9e/75/8ced3f6f169582742d10a95aa718c5b492ebe836a57ccfbb736d8d155e67/pystalkd-1.2.2.zip", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "3316750a4d9ce92c817ac9a5dce705f5", "sha256": "4fe631e31df6995d74ccd226020c5e67e3690f49a8efc66f17b432f21d0fe796"}, "downloads": -1, "filename": "pystalkd-1.2.3.zip", "has_sig": false, "md5_digest": "3316750a4d9ce92c817ac9a5dce705f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16217, "upload_time": "2016-05-11T18:31:18", "upload_time_iso_8601": "2016-05-11T18:31:18.847071Z", "url": "https://files.pythonhosted.org/packages/d8/f5/c15f8ecfd543af1e81b6c3413902219fbc9c9437fb3a2e931ac64281d533/pystalkd-1.2.3.zip", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "ece5e3d2853cdbc25d3e186a40bb9890", "sha256": "810bd9727f49fbd736fb560daf5525b73227eda870216881909c76b73675c814"}, "downloads": -1, "filename": "pystalkd-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ece5e3d2853cdbc25d3e186a40bb9890", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11363, "upload_time": "2019-11-11T21:30:11", "upload_time_iso_8601": "2019-11-11T21:30:11.269836Z", "url": "https://files.pythonhosted.org/packages/cf/66/98f0a84934216420b4c681a020dd9f66c66807ea641df0fb5e0258635b8e/pystalkd-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b02ec5978d2fecf3cb2c63d391e496d", "sha256": "f8ba5b7801ecd812143046fb2d76fa83d161e9fce5d6996bd32d046e22fb211b"}, "downloads": -1, "filename": "pystalkd-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7b02ec5978d2fecf3cb2c63d391e496d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11625, "upload_time": "2019-11-11T21:30:13", "upload_time_iso_8601": "2019-11-11T21:30:13.092580Z", "url": "https://files.pythonhosted.org/packages/2f/4f/3ce533d50aa6a55b105ce209c0dc14f68c66553e20cc83bcbf9d88741ff0/pystalkd-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ece5e3d2853cdbc25d3e186a40bb9890", "sha256": "810bd9727f49fbd736fb560daf5525b73227eda870216881909c76b73675c814"}, "downloads": -1, "filename": "pystalkd-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ece5e3d2853cdbc25d3e186a40bb9890", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11363, "upload_time": "2019-11-11T21:30:11", "upload_time_iso_8601": "2019-11-11T21:30:11.269836Z", "url": "https://files.pythonhosted.org/packages/cf/66/98f0a84934216420b4c681a020dd9f66c66807ea641df0fb5e0258635b8e/pystalkd-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b02ec5978d2fecf3cb2c63d391e496d", "sha256": "f8ba5b7801ecd812143046fb2d76fa83d161e9fce5d6996bd32d046e22fb211b"}, "downloads": -1, "filename": "pystalkd-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7b02ec5978d2fecf3cb2c63d391e496d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11625, "upload_time": "2019-11-11T21:30:13", "upload_time_iso_8601": "2019-11-11T21:30:13.092580Z", "url": "https://files.pythonhosted.org/packages/2f/4f/3ce533d50aa6a55b105ce209c0dc14f68c66553e20cc83bcbf9d88741ff0/pystalkd-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:02 2020"}