{"info": {"author": "Timothee Mazzucotelli", "author_email": "timothee.mazzucotelli@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: ISC License (ISCL)", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Utilities"], "description": "======\nArchan\n======\n\n\n\nA Python module that analyzes your architecture strength\nbased on `Design Structure Matrix (DSM)`_ data.\n\nArchan is a Python module that analyzes the strength of your\nproject architecture according to some criteria described in\n\"`The Protection of Information in Computer Systems`_\", written by\nJerome H. Saltzer and Michael D. Schroeder.\n\n.. _`Design Structure Matrix (DSM)`: https://en.wikipedia.org/wiki/Design_structure_matrix\n.. _The Protection of Information in Computer Systems : https://www.cs.virginia.edu/~evans/cs551/saltzer/\n\n.. note::\n\n    The following contents apply for the next version of Archan (2.0.0) which\n    has not been released yet.\n\nFeatures\n========\n\n- Usable directly on the command-line.\n- Support for plugins. See for example the `Provider plugin`_ in `dependenpy`_.\n  You can also take a look at `django-meerkat`_, a Django app using Archan.\n- Configurable through command-line or configuration file (YAML format).\n- Read DSM data on standard input.\n\n.. _dependenpy: https://github.com/Pawamoy/dependenpy\n.. _django-meerkat: https://github.com/Pawamoy/django-meerkat\n.. _`Provider plugin`: https://github.com/Pawamoy/dependenpy/blob/master/src/dependenpy/plugins.py\n\n\nInstallation\n============\n\nJust run ``pip install archan``.\n\nDocumentation\n=============\n\n`On ReadTheDocs`_\n\n.. _`On ReadTheDocs`: http://archan.readthedocs.io/\n\nArchan defines three main classes: Analyzer, Provider and Checker.\nA provider is an object that will produce data and return it in the form of\na DSM (Design Structure Matrix). The checker is an object that\nwill analyze this DSM according to some criteria, and return a status code\nsaying if the criteria are verified or not. An analyzer is just a combination\nof providers and checkers to run a analysis test suite.\n\nUsage\n=====\n\nOn the command-line\n-------------------\n\nExample:\n\n.. code:: bash\n\n    archan -h\n\nOutput:\n\n.. code:: bash\n\n    usage: archan [-c FILE] [-h] [-i FILE] [-l] [--no-color] [--no-config] [-v]\n\n    Analysis of your architecture strength based on DSM data\n\n    optional arguments:\n      -c FILE, --config FILE  Configuration file to use.\n      -h, --help              Show this help message and exit.\n      -i FILE, --input FILE   Input file containing CSV data.\n      -l, --list-plugins      Show the available plugins. Default: false.\n      --no-color              Do not use colors. Default: false.\n      --no-config             Do not load configuration from file. Default: false.\n      -v, --version           Show the current version of the program and exit.\n\nOther examples:\n\n.. code:: bash\n\n    # Load configuration file and run archan\n    # See Configuration section to know how archan finds the config file\n    archan\n\n    # No configuration, read CSV data from file\n    archan --no-config --input FILE.CSV\n\n    # No configuration, read CSV data from stdin\n    dependenpy archan --format=csv | archan --no-config\n\n    # Specify configuration file to load\n    archan --config my_config.yml\n\n    # Output the list of available plugins in the current environment\n    archan --list-plugins\n\nProgrammatically\n----------------\n\n.. code:: python\n\n    # TODO\n\nConfiguration\n=============\n\nArchan applies the following methods to find the configuration file folder:\n\n1. read the contents of the file ``.configconfig`` in the current directory\n   to get the path to the configuration directory,\n2. use ``config`` folder in the current directory if it exists,\n3. use the current directory.\n\nIt then searches for a configuration file named:\n\n1. ``archan.yml``\n2. ``archan.yaml``\n3. ``.archan.yml``\n4. ``.archan.yaml``\n\nFormat of the configuration file is as follow:\n\n.. code:: yaml\n\n    analyzers: [list of strings and/or dict]\n    - identifier: [optional string]\n      name: [string]\n      description: [string]\n      providers: [string or list]\n      - provider.Name: [as string or dict]\n          provider_arguments: as key value pairs\n      checkers: [string or list]\n      - checker.Name: [as string or dict]\n          checker_arguments: as key value pairs\n\nIt means you can write:\n\n.. code:: yaml\n\n    analyzers:\n    # a first analyzer with one provider and several checker\n    - name: My first analyzer\n      description: Optional description\n      providers: just.UseThisProvider\n      checkers:\n      - and.ThisChecker\n      - and.ThisOtherChecker:\n          which: has\n          some: arguments\n    # a second analyzer with several providers and one checker\n    - name: My second analyzer\n      providers:\n      - use.ThisProvider\n      checkers: and.ThisChecker\n    # a third analyzer, using its name directly\n    - some.Analyzer\n\nEvery checker support an ``ignore`` argument, set to True or False (default).\nIf set to True, the check will not make the test suit fail.\n\nYou can reuse the same providers and checkers in different analyzers, they\nwill be instantiated as different objects and won't interfere between each other.\n\nAs an example, see `Archan's own configuration file`_.\n\n.. _`Archan's own configuration file`: https://github.com/Pawamoy/archan/blob/master/config/archan.yml\n\nTo get the list of available plugins in your current environment,\nrun ``archan --list-plugins`` or ``archan -l``.\n\nWriting a plugin\n================\n\nPlugin discovery\n----------------\n\nYou can write three types of plugins: analyzers, providers and checkers.\nYour plugin does not need to be in an installable package. All it needs to\nbe summoned is to be available in your current Python path. However, if you want\nit to be automatically discovered by Archan, you will have to make it installable,\nthrough pip or simply ``python setup.py install`` command or equivalent.\n\nIf you decide to write a Python package for your plugin, I recommend you\nto name it ``archan-your-plugin`` for consistency. If you plan to make it live\nalong other code in an already existing package, just leave the name as it is.\n\nTo make your plugin discoverable by Archan, use the ``archan`` entry point\nin your ``setup.py``:\n\n.. code:: python\n\n    from setuptools import setup\n\n    setup(\n        ...,\n        'entry_points': {\n            'archan': [\n                'mypackage.MyPlugin = mypackage.mymodule:MyPlugin',\n            ]\n        }\n\nThe name of the entry point should by convention be composed of the name of\nyour package in lower case, a dot, and the name of the Python class, though\nyou can name it whatever you want. Remember that this name will be the one\nused in the configuration file.\n\nAlso a good thing is to make the plugin importable thanks to its name only:\n\n.. code:: python\n\n    import mypackage.MyPlugin\n\nBut again, this is just a convention.\n\nPlugin class\n------------\n\nYou can write three types of plugins: analyzers, providers and checkers.\nFor each of them, you have to inherit from its corresponding class:\n\n.. code:: python\n\n    from archan import Analyzer, Provider, Checker\n\n    class MyAnalyzer(Analyzer): ...\n    class MyProvider(Provider): ...\n    class MyChecker(Checker): ...\n\nA provider or checker plugin must have the following class attributes:\n\n- identifier: the identifier of the plugin. It must be the same name as in\n  your entry points, so that displaying its help tells how to summon it.\n- name: the verbose name of the plugin.\n- description: a description to explain what it does.\n- (optional) arguments: a tuple/list of Argument instances. This one is only\n  used to display some help for the plugin. An argument is composed of a name,\n  a type, a description and a default value.\n\n.. code:: python\n\n    from archan import Provider, Argument\n\n    class MyProvider(Provider):\n        identifier = 'mypackage.MyProvider'\n        name = 'This is my Provider'\n        description = \"\"\"\n        Don't hesitate to use multi-line strings as the lines will be de-indented,\n        concatenated again and wrapped to match the console width.\n\n        Blank lines will be kept though, so the above line will not be removed.\n        \"\"\"\n\n        arguments = (\n            Argument('my_arg', int, 'This argument is useful.', 42),\n            # don't forget the ending comma if you have just one   ^   argument\n        )\n\nAdditionally, a checker plugin should have the ``hint`` class attribute (string).\nThe hint describe what you should do if the check fails.\n\nFor now, the analyzers plugins just have the ``providers`` and ``checkers``\nclass attributes.\n\nPlugin methods\n--------------\n\nA provider must implement the ``get_dsm(self, **kwargs)`` method. This method\nmust return an instance of ``DSM``. A DSM is composed of a two-dimensions\narray, the matrix, a list of strings, the keys or names for each line/column\nof the matrix, and optionally the categories for each key (a list of same size).\n\n.. code:: python\n\n    from archan import DSM, Provider\n\n    class MyProvider(Provider):\n        name = 'mypackage.MyProvider'\n\n        def get_dsm(self, my_arg=42, **kwargs):\n            # this is where you compute your stuff\n            matrix_data = [...]\n            entities = [...]\n            categories = [...] or None\n            # and return a DSM instance\n            return DSM(matrix_data, entities, categories)\n\nA checker must implement the ``check(self, dsm, **kwargs)`` method.\n\n.. code:: python\n\n    from archan import DSM, Checker\n\n    class MyChecker(Checker):\n        name = 'mypackage.MyChecker'\n\n        def check(self, dsm, **kwargs):\n            # this is where you check your stuff\n            # with dsm.data, dsm.entities, dsm.categories, dsm.size (rows, columns)\n            ...\n            # and return True, False, or a constant from Checker: PASSED or FAILED\n            # with an optional message\n            return Checker.FAILED, 'too much issues in module XXX'\n\nLogging messages\n----------------\n\nEach plugin instance has a ``logger`` attribute available. Use it to log\nmessages with ``self.logger.debug``, ``info``, ``warning``, ``error`` or\n``critical``.\n\nAvailable plugins\n=================\n\nHere is the list of plugins available in other packages.\n\nProviders\n---------\n\n- ``dependenpy.InternalDependencies``: Provide matrix data about internal\n  dependencies in a set of packages. Install it with ``pip install dependenpy``.\n\n\nLicense\n=======\n\nSoftware licensed under `ISC`_ license.\n\n.. _ISC: https://www.isc.org/downloads/software-support-policy/isc-license/\n\nDevelopment\n===========\n\nTo run all the tests: ``tox``\n\n=========\nChangelog\n=========\n\n2.0.0 (2017-06-26)\n==================\n\n* Change license from MPL 2.0 to ISC.\n* Add command-line tool.\n* Rewrite architecture to support plugins.\n\n1.0.0 (2016-10-06)\n==================\n\n* Add documentation.\n\n0.1.0 (2016-10-06)\n==================\n\n* Alpha release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Pawamoy/archan", "keywords": "archan,architecture,analysis,security,dsm,audit", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "archan", "package_url": "https://pypi.org/project/archan/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/archan/", "project_urls": {"Homepage": "https://github.com/Pawamoy/archan"}, "release_url": "https://pypi.org/project/archan/2.0.1/", "requires_dist": ["colorama", "pyyaml"], "requires_python": "", "summary": "Analysis of your architecture strength based on DSM data.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"archan\">\n<h2>Archan</h2>\n<p>A Python module that analyzes your architecture strength\nbased on <a href=\"https://en.wikipedia.org/wiki/Design_structure_matrix\" rel=\"nofollow\">Design Structure Matrix (DSM)</a> data.</p>\n<p>Archan is a Python module that analyzes the strength of your\nproject architecture according to some criteria described in\n\u201c<a href=\"https://www.cs.virginia.edu/~evans/cs551/saltzer/\" rel=\"nofollow\">The Protection of Information in Computer Systems</a>\u201d, written by\nJerome H. Saltzer and Michael D. Schroeder.</p>\n<div>\n<p>Note</p>\n<p>The following contents apply for the next version of Archan (2.0.0) which\nhas not been released yet.</p>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Usable directly on the command-line.</li>\n<li>Support for plugins. See for example the <a href=\"https://github.com/Pawamoy/dependenpy/blob/master/src/dependenpy/plugins.py\" rel=\"nofollow\">Provider plugin</a> in <a href=\"https://github.com/Pawamoy/dependenpy\" rel=\"nofollow\">dependenpy</a>.\nYou can also take a look at <a href=\"https://github.com/Pawamoy/django-meerkat\" rel=\"nofollow\">django-meerkat</a>, a Django app using Archan.</li>\n<li>Configurable through command-line or configuration file (YAML format).</li>\n<li>Read DSM data on standard input.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Just run <tt>pip install archan</tt>.</p>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p><a href=\"http://archan.readthedocs.io/\" rel=\"nofollow\">On ReadTheDocs</a></p>\n<p>Archan defines three main classes: Analyzer, Provider and Checker.\nA provider is an object that will produce data and return it in the form of\na DSM (Design Structure Matrix). The checker is an object that\nwill analyze this DSM according to some criteria, and return a status code\nsaying if the criteria are verified or not. An analyzer is just a combination\nof providers and checkers to run a analysis test suite.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"on-the-command-line\">\n<h4>On the command-line</h4>\n<p>Example:</p>\n<pre>archan -h\n</pre>\n<p>Output:</p>\n<pre>usage: archan <span class=\"o\">[</span>-c FILE<span class=\"o\">]</span> <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-i FILE<span class=\"o\">]</span> <span class=\"o\">[</span>-l<span class=\"o\">]</span> <span class=\"o\">[</span>--no-color<span class=\"o\">]</span> <span class=\"o\">[</span>--no-config<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span>\n\nAnalysis of your architecture strength based on DSM data\n\noptional arguments:\n  -c FILE, --config FILE  Configuration file to use.\n  -h, --help              Show this <span class=\"nb\">help</span> message and exit.\n  -i FILE, --input FILE   Input file containing CSV data.\n  -l, --list-plugins      Show the available plugins. Default: false.\n  --no-color              Do not use colors. Default: false.\n  --no-config             Do not load configuration from file. Default: false.\n  -v, --version           Show the current version of the program and exit.\n</pre>\n<p>Other examples:</p>\n<pre><span class=\"c1\"># Load configuration file and run archan\n# See Configuration section to know how archan finds the config file\n</span>archan\n\n<span class=\"c1\"># No configuration, read CSV data from file\n</span>archan --no-config --input FILE.CSV\n\n<span class=\"c1\"># No configuration, read CSV data from stdin\n</span>dependenpy archan --format<span class=\"o\">=</span>csv <span class=\"p\">|</span> archan --no-config\n\n<span class=\"c1\"># Specify configuration file to load\n</span>archan --config my_config.yml\n\n<span class=\"c1\"># Output the list of available plugins in the current environment\n</span>archan --list-plugins\n</pre>\n</div>\n<div id=\"programmatically\">\n<h4>Programmatically</h4>\n<pre><span class=\"c1\"># TODO</span>\n</pre>\n</div>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Archan applies the following methods to find the configuration file folder:</p>\n<ol>\n<li>read the contents of the file <tt>.configconfig</tt> in the current directory\nto get the path to the configuration directory,</li>\n<li>use <tt>config</tt> folder in the current directory if it exists,</li>\n<li>use the current directory.</li>\n</ol>\n<p>It then searches for a configuration file named:</p>\n<ol>\n<li><tt>archan.yml</tt></li>\n<li><tt>archan.yaml</tt></li>\n<li><tt>.archan.yml</tt></li>\n<li><tt>.archan.yaml</tt></li>\n</ol>\n<p>Format of the configuration file is as follow:</p>\n<pre><span class=\"nt\">analyzers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">list of strings and/or dict</span><span class=\"p-Indicator\">]</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">identifier</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">optional string</span><span class=\"p-Indicator\">]</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">string</span><span class=\"p-Indicator\">]</span>\n  <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">string</span><span class=\"p-Indicator\">]</span>\n  <span class=\"nt\">providers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">string or list</span><span class=\"p-Indicator\">]</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">provider.Name</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">as string or dict</span><span class=\"p-Indicator\">]</span>\n      <span class=\"nt\">provider_arguments</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">as key value pairs</span>\n  <span class=\"nt\">checkers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">string or list</span><span class=\"p-Indicator\">]</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">checker.Name</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">as string or dict</span><span class=\"p-Indicator\">]</span>\n      <span class=\"nt\">checker_arguments</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">as key value pairs</span>\n</pre>\n<p>It means you can write:</p>\n<pre><span class=\"nt\">analyzers</span><span class=\"p\">:</span>\n<span class=\"c1\"># a first analyzer with one provider and several checker</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">My first analyzer</span>\n  <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Optional description</span>\n  <span class=\"nt\">providers</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">just.UseThisProvider</span>\n  <span class=\"nt\">checkers</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">and.ThisChecker</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">and.ThisOtherChecker</span><span class=\"p\">:</span>\n      <span class=\"nt\">which</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">has</span>\n      <span class=\"nt\">some</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">arguments</span>\n<span class=\"c1\"># a second analyzer with several providers and one checker</span>\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">My second analyzer</span>\n  <span class=\"nt\">providers</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">use.ThisProvider</span>\n  <span class=\"nt\">checkers</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">and.ThisChecker</span>\n<span class=\"c1\"># a third analyzer, using its name directly</span>\n<span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">some.Analyzer</span>\n</pre>\n<p>Every checker support an <tt>ignore</tt> argument, set to True or False (default).\nIf set to True, the check will not make the test suit fail.</p>\n<p>You can reuse the same providers and checkers in different analyzers, they\nwill be instantiated as different objects and won\u2019t interfere between each other.</p>\n<p>As an example, see <a href=\"https://github.com/Pawamoy/archan/blob/master/config/archan.yml\" rel=\"nofollow\">Archan\u2019s own configuration file</a>.</p>\n<p>To get the list of available plugins in your current environment,\nrun <tt>archan <span class=\"pre\">--list-plugins</span></tt> or <tt>archan <span class=\"pre\">-l</span></tt>.</p>\n</div>\n<div id=\"writing-a-plugin\">\n<h3>Writing a plugin</h3>\n<div id=\"plugin-discovery\">\n<h4>Plugin discovery</h4>\n<p>You can write three types of plugins: analyzers, providers and checkers.\nYour plugin does not need to be in an installable package. All it needs to\nbe summoned is to be available in your current Python path. However, if you want\nit to be automatically discovered by Archan, you will have to make it installable,\nthrough pip or simply <tt>python setup.py install</tt> command or equivalent.</p>\n<p>If you decide to write a Python package for your plugin, I recommend you\nto name it <tt><span class=\"pre\">archan-your-plugin</span></tt> for consistency. If you plan to make it live\nalong other code in an already existing package, just leave the name as it is.</p>\n<p>To make your plugin discoverable by Archan, use the <tt>archan</tt> entry point\nin your <tt>setup.py</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'entry_points'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'archan'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'mypackage.MyPlugin = mypackage.mymodule:MyPlugin'</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>The name of the entry point should by convention be composed of the name of\nyour package in lower case, a dot, and the name of the Python class, though\nyou can name it whatever you want. Remember that this name will be the one\nused in the configuration file.</p>\n<p>Also a good thing is to make the plugin importable thanks to its name only:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mypackage.MyPlugin</span>\n</pre>\n<p>But again, this is just a convention.</p>\n</div>\n<div id=\"plugin-class\">\n<h4>Plugin class</h4>\n<p>You can write three types of plugins: analyzers, providers and checkers.\nFor each of them, you have to inherit from its corresponding class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">archan</span> <span class=\"kn\">import</span> <span class=\"n\">Analyzer</span><span class=\"p\">,</span> <span class=\"n\">Provider</span><span class=\"p\">,</span> <span class=\"n\">Checker</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAnalyzer</span><span class=\"p\">(</span><span class=\"n\">Analyzer</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyProvider</span><span class=\"p\">(</span><span class=\"n\">Provider</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyChecker</span><span class=\"p\">(</span><span class=\"n\">Checker</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n</pre>\n<p>A provider or checker plugin must have the following class attributes:</p>\n<ul>\n<li>identifier: the identifier of the plugin. It must be the same name as in\nyour entry points, so that displaying its help tells how to summon it.</li>\n<li>name: the verbose name of the plugin.</li>\n<li>description: a description to explain what it does.</li>\n<li>(optional) arguments: a tuple/list of Argument instances. This one is only\nused to display some help for the plugin. An argument is composed of a name,\na type, a description and a default value.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">archan</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span><span class=\"p\">,</span> <span class=\"n\">Argument</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyProvider</span><span class=\"p\">(</span><span class=\"n\">Provider</span><span class=\"p\">):</span>\n    <span class=\"n\">identifier</span> <span class=\"o\">=</span> <span class=\"s1\">'mypackage.MyProvider'</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'This is my Provider'</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n    Don't hesitate to use multi-line strings as the lines will be de-indented,\n    concatenated again and wrapped to match the console width.\n\n    Blank lines will be kept though, so the above line will not be removed.\n    \"\"\"</span>\n\n    <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"s1\">'my_arg'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">'This argument is useful.'</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">),</span>\n        <span class=\"c1\"># don't forget the ending comma if you have just one   ^   argument</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Additionally, a checker plugin should have the <tt>hint</tt> class attribute (string).\nThe hint describe what you should do if the check fails.</p>\n<p>For now, the analyzers plugins just have the <tt>providers</tt> and <tt>checkers</tt>\nclass attributes.</p>\n</div>\n<div id=\"plugin-methods\">\n<h4>Plugin methods</h4>\n<p>A provider must implement the <tt>get_dsm(self, **kwargs)</tt> method. This method\nmust return an instance of <tt>DSM</tt>. A DSM is composed of a two-dimensions\narray, the matrix, a list of strings, the keys or names for each line/column\nof the matrix, and optionally the categories for each key (a list of same size).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">archan</span> <span class=\"kn\">import</span> <span class=\"n\">DSM</span><span class=\"p\">,</span> <span class=\"n\">Provider</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyProvider</span><span class=\"p\">(</span><span class=\"n\">Provider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'mypackage.MyProvider'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_dsm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">my_arg</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># this is where you compute your stuff</span>\n        <span class=\"n\">matrix_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n        <span class=\"n\">entities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n        <span class=\"n\">categories</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"kc\">None</span>\n        <span class=\"c1\"># and return a DSM instance</span>\n        <span class=\"k\">return</span> <span class=\"n\">DSM</span><span class=\"p\">(</span><span class=\"n\">matrix_data</span><span class=\"p\">,</span> <span class=\"n\">entities</span><span class=\"p\">,</span> <span class=\"n\">categories</span><span class=\"p\">)</span>\n</pre>\n<p>A checker must implement the <tt>check(self, dsm, **kwargs)</tt> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">archan</span> <span class=\"kn\">import</span> <span class=\"n\">DSM</span><span class=\"p\">,</span> <span class=\"n\">Checker</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyChecker</span><span class=\"p\">(</span><span class=\"n\">Checker</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'mypackage.MyChecker'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dsm</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># this is where you check your stuff</span>\n        <span class=\"c1\"># with dsm.data, dsm.entities, dsm.categories, dsm.size (rows, columns)</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># and return True, False, or a constant from Checker: PASSED or FAILED</span>\n        <span class=\"c1\"># with an optional message</span>\n        <span class=\"k\">return</span> <span class=\"n\">Checker</span><span class=\"o\">.</span><span class=\"n\">FAILED</span><span class=\"p\">,</span> <span class=\"s1\">'too much issues in module XXX'</span>\n</pre>\n</div>\n<div id=\"logging-messages\">\n<h4>Logging messages</h4>\n<p>Each plugin instance has a <tt>logger</tt> attribute available. Use it to log\nmessages with <tt>self.logger.debug</tt>, <tt>info</tt>, <tt>warning</tt>, <tt>error</tt> or\n<tt>critical</tt>.</p>\n</div>\n</div>\n<div id=\"available-plugins\">\n<h3>Available plugins</h3>\n<p>Here is the list of plugins available in other packages.</p>\n<div id=\"providers\">\n<h4>Providers</h4>\n<ul>\n<li><tt>dependenpy.InternalDependencies</tt>: Provide matrix data about internal\ndependencies in a set of packages. Install it with <tt>pip install dependenpy</tt>.</li>\n</ul>\n</div>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Software licensed under <a href=\"https://www.isc.org/downloads/software-support-policy/isc-license/\" rel=\"nofollow\">ISC</a> license.</p>\n</div>\n<div id=\"development\">\n<h3>Development</h3>\n<p>To run all the tests: <tt>tox</tt></p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>2.0.0 (2017-06-26)</h3>\n<ul>\n<li>Change license from MPL 2.0 to ISC.</li>\n<li>Add command-line tool.</li>\n<li>Rewrite architecture to support plugins.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.0 (2016-10-06)</h3>\n<ul>\n<li>Add documentation.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0 (2016-10-06)</h3>\n<ul>\n<li>Alpha release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2982029, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1a9a6efc452e8470f13ee22502884c34", "sha256": "1f718fbce5035805caf671dce4f4ff57ecce15be51343de715adb642110d8303"}, "downloads": -1, "filename": "archan-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1a9a6efc452e8470f13ee22502884c34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11046, "upload_time": "2015-03-25T16:29:34", "upload_time_iso_8601": "2015-03-25T16:29:34.665698Z", "url": "https://files.pythonhosted.org/packages/bc/70/9586e24ddeca5572850619c18b899780b3e2bc1c076a94dc45e9f8f47fc7/archan-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "17df8d9282ce1fb70edc5270944c7edf", "sha256": "1e796e000bcce5f1809416ea031f413c74f0cc80f167662b3b3e7f2166fabde9"}, "downloads": -1, "filename": "archan-0.0.2.tar.gz", "has_sig": false, "md5_digest": "17df8d9282ce1fb70edc5270944c7edf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11202, "upload_time": "2015-04-02T16:48:57", "upload_time_iso_8601": "2015-04-02T16:48:57.121087Z", "url": "https://files.pythonhosted.org/packages/e3/b4/72bc2cf8c2a1c5f72ed36db380d6868a5c4d46090d8cff07634e3671f488/archan-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4cbf633ce41d334f6b206c2036fed5c4", "sha256": "23eb486364e1bcf103224c7b90eb400e7a814d280925890df1afcd3057db1bdd"}, "downloads": -1, "filename": "archan-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4cbf633ce41d334f6b206c2036fed5c4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8974, "upload_time": "2015-04-07T14:25:28", "upload_time_iso_8601": "2015-04-07T14:25:28.619120Z", "url": "https://files.pythonhosted.org/packages/f6/8b/1701143954b5ef6caa99c800805703947485a3e1d540647db0cf5e54c63a/archan-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96a36d2357a544288bfc793a5cdd2e32", "sha256": "4667a34ee8a43eb73c68ef68b4298139026fdefe146a42922832df5e3dbd0bea"}, "downloads": -1, "filename": "archan-0.0.3.tar.gz", "has_sig": false, "md5_digest": "96a36d2357a544288bfc793a5cdd2e32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12469, "upload_time": "2015-04-07T14:25:25", "upload_time_iso_8601": "2015-04-07T14:25:25.498426Z", "url": "https://files.pythonhosted.org/packages/b4/93/14b3112fd854988ac3e7ad01b5d6dc698507d2755e7f7901a5c1be53dbdc/archan-0.0.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "24fe82137f63b73cb6ec8ac3d6380389", "sha256": "d8f404a93ed6dfb64ce000af9505976dab7ef0b5f79c123a44592c310d0d6d9b"}, "downloads": -1, "filename": "archan-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "24fe82137f63b73cb6ec8ac3d6380389", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14441, "upload_time": "2016-10-06T11:57:27", "upload_time_iso_8601": "2016-10-06T11:57:27.785553Z", "url": "https://files.pythonhosted.org/packages/9b/bd/d999377b145bfa0ea81666cf9fce61a71bbc7b68b64b362403ca847a612e/archan-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f79acc3b4d768e72f842b6f3a238c33f", "sha256": "7d22910f7cd8d23873068ad8d96fdf1911461c747eeb7bf6c052f0b75cbfeaff"}, "downloads": -1, "filename": "archan-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f79acc3b4d768e72f842b6f3a238c33f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21882, "upload_time": "2016-10-06T11:57:30", "upload_time_iso_8601": "2016-10-06T11:57:30.496247Z", "url": "https://files.pythonhosted.org/packages/5d/91/b6cd05baa33940cec534855498832c50d647de67898a97e3a43ba9d85089/archan-1.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "8698cccb560b2452ca19994aa5bb6819", "sha256": "149b8475cc198458caab6f6110006c5584591d61e5b23f152bf0c343dacd74da"}, "downloads": -1, "filename": "archan-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8698cccb560b2452ca19994aa5bb6819", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30417, "upload_time": "2017-06-27T13:14:54", "upload_time_iso_8601": "2017-06-27T13:14:54.692617Z", "url": "https://files.pythonhosted.org/packages/14/fc/59ccd602948a94c23a651c13eb0462bfd4a63c934f5d6359ae3d93c99830/archan-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb6cc221ddfe7b2c6612851d727475cc", "sha256": "282fcffa29475678852c562af621afd289af007abc96d328d923dbda5f4e3b9d"}, "downloads": -1, "filename": "archan-2.0.1.tar.gz", "has_sig": false, "md5_digest": "cb6cc221ddfe7b2c6612851d727475cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68851, "upload_time": "2017-06-27T13:14:56", "upload_time_iso_8601": "2017-06-27T13:14:56.636700Z", "url": "https://files.pythonhosted.org/packages/4e/7b/44f6cd6c415dcd4177974ca43067d00680d4c69a4abbc6833f309cd5ce79/archan-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8698cccb560b2452ca19994aa5bb6819", "sha256": "149b8475cc198458caab6f6110006c5584591d61e5b23f152bf0c343dacd74da"}, "downloads": -1, "filename": "archan-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8698cccb560b2452ca19994aa5bb6819", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30417, "upload_time": "2017-06-27T13:14:54", "upload_time_iso_8601": "2017-06-27T13:14:54.692617Z", "url": "https://files.pythonhosted.org/packages/14/fc/59ccd602948a94c23a651c13eb0462bfd4a63c934f5d6359ae3d93c99830/archan-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb6cc221ddfe7b2c6612851d727475cc", "sha256": "282fcffa29475678852c562af621afd289af007abc96d328d923dbda5f4e3b9d"}, "downloads": -1, "filename": "archan-2.0.1.tar.gz", "has_sig": false, "md5_digest": "cb6cc221ddfe7b2c6612851d727475cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68851, "upload_time": "2017-06-27T13:14:56", "upload_time_iso_8601": "2017-06-27T13:14:56.636700Z", "url": "https://files.pythonhosted.org/packages/4e/7b/44f6cd6c415dcd4177974ca43067d00680d4c69a4abbc6833f309cd5ce79/archan-2.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:24 2020"}