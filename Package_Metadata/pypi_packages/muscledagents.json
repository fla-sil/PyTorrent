{"info": {"author": "Ian Danforth", "author_email": "iandanforth@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# MuscledAgents\nOpenAI Gym MuJoCo environments rigged with muscles which can be used with\n[PyMuscle](http://github.com/iandanforth/pymuscle) fatigable muscle models.\n\n<img src=\"https://user-images.githubusercontent.com/446062/51863364-a7db2680-22f5-11e9-97e9-582feccf44c6.png\" width=\"50%\">\n\n## Prerequisites\n\n - MuJoCo 1.5\n - mujoco-py\n - gym\n\n## Setup\n\n```\npython setup.py develop\n```\n\n## Usage\n\n```python\nimport gym\nimport muscledagents\nimport math\n\n\ndef main():\n\n    # Load a muscled ant\n    env = gym.make(\"MuscledAnt-v0\")  # Only functional env at the moment\n    env.reset()\n\n    print(\"Observation Space Dims\", env.observation_space.shape)\n    print(\"Action Space Dims\", env.action_space.shape)\n\n    action_size = env.action_space.shape[0]\n\n    action = [0.0] * action_size\n    total_steps = 60 * 10\n    for i in range(total_steps):\n        action[1] = ((math.sin(i / 25) + 1) / 2)\n        action[5] = ((math.sin(i / 35) + 1) / 2)\n        action[9] = ((math.sin(i / 45) + 1) / 2)\n        action[13] = ((math.sin(i / 55) + 1) / 2)\n        env.step(action)\n        env.render()\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\nTo explore these environments and models further you will need to understand\nhow input values get translated into final simulated movements.\n\n### Control Signals\n\nThe action space for an ant is continuous control over 16 muscles. For\neach of four legs there are four muscles. One leg extensor, one leg flexor,\nand two hip muscles which move the leg left and right (or forward and back\ndepending on your perspective.)\n\n### Gym Environment\n\nThe `step` method takes an array of 16 values which represent the input to\nthe fatigable muscle model for each muscle. Inputs should be in the range [0-1].\n\n### PyMuscle Fatigue\n\nAfter use muscles produce less force for the same level of input. So if you\nwere to send an input signal which recruited all motor units in a muscle\nconstantly for several seconds the output the model will return will rapidly\ndecrease. A period of light or no use is required for the muscle to recover.\n\n### MuJoCo Model\n\nEach tendon actuator is control limited to the range [-1.0, 0.0]. When a\nGeneral actuator is tied to a Tendon in MuJoCo negative values are the\nequivalent of contractions. Muscles cannot produce force in extension so no\npositive non-zero values are allowed.\n\nActuators have a `gainprm` which scales this input value. This is tuned to\na value of 100 to work with the mass of the ant and the resistances of opposing\ntendons.\n\n## Altering the Models\n\nDue to frustration editing XML files the `ant` model is generated by a python\nscript that uses the [mjcf](http://github.com/iandanforth/mjcf) library which \nI wrote to wrap MuJoCo xml elements in python classes. Note: This may\nbe replaced with the mjcf library from [dm_control](https://github.com/deepmind/dm_control/tree/master/dm_control/mjcf) in the future.\n\nYou can view and modify that script in `scripts/gen_ant.py`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iandanforth/muscledagents", "keywords": "", "license": "MIT + No Military Use", "maintainer": "", "maintainer_email": "", "name": "muscledagents", "package_url": "https://pypi.org/project/muscledagents/", "platform": "", "project_url": "https://pypi.org/project/muscledagents/", "project_urls": {"Homepage": "https://github.com/iandanforth/muscledagents"}, "release_url": "https://pypi.org/project/muscledagents/0.0.2/", "requires_dist": ["gym", "pymuscle", "mujoco-py (<1.50.2,>=1.50.1)"], "requires_python": ">=3.6.0", "summary": "Muscle rigged models and environments for machine learning experiments.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MuscledAgents</h1>\n<p>OpenAI Gym MuJoCo environments rigged with muscles which can be used with\n<a href=\"http://github.com/iandanforth/pymuscle\" rel=\"nofollow\">PyMuscle</a> fatigable muscle models.</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9ab6fbf7c683b96c6a023e3e454ba4ccddc1691/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3434363036322f35313836333336342d61376462323638302d323266352d313165392d393765392d3538326665636366343463362e706e67\" width=\"50%\">\n<h2>Prerequisites</h2>\n<ul>\n<li>MuJoCo 1.5</li>\n<li>mujoco-py</li>\n<li>gym</li>\n</ul>\n<h2>Setup</h2>\n<pre><code>python setup.py develop\n</code></pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gym</span>\n<span class=\"kn\">import</span> <span class=\"nn\">muscledagents</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># Load a muscled ant</span>\n    <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"s2\">\"MuscledAnt-v0\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Only functional env at the moment</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Observation Space Dims\"</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">observation_space</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Action Space Dims\"</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">action_space</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n    <span class=\"n\">action_size</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">action_space</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">action_size</span>\n    <span class=\"n\">total_steps</span> <span class=\"o\">=</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">10</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">total_steps</span><span class=\"p\">):</span>\n        <span class=\"n\">action</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"mi\">25</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">action</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"mi\">35</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">action</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"mi\">45</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">action</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"mi\">55</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>To explore these environments and models further you will need to understand\nhow input values get translated into final simulated movements.</p>\n<h3>Control Signals</h3>\n<p>The action space for an ant is continuous control over 16 muscles. For\neach of four legs there are four muscles. One leg extensor, one leg flexor,\nand two hip muscles which move the leg left and right (or forward and back\ndepending on your perspective.)</p>\n<h3>Gym Environment</h3>\n<p>The <code>step</code> method takes an array of 16 values which represent the input to\nthe fatigable muscle model for each muscle. Inputs should be in the range [0-1].</p>\n<h3>PyMuscle Fatigue</h3>\n<p>After use muscles produce less force for the same level of input. So if you\nwere to send an input signal which recruited all motor units in a muscle\nconstantly for several seconds the output the model will return will rapidly\ndecrease. A period of light or no use is required for the muscle to recover.</p>\n<h3>MuJoCo Model</h3>\n<p>Each tendon actuator is control limited to the range [-1.0, 0.0]. When a\nGeneral actuator is tied to a Tendon in MuJoCo negative values are the\nequivalent of contractions. Muscles cannot produce force in extension so no\npositive non-zero values are allowed.</p>\n<p>Actuators have a <code>gainprm</code> which scales this input value. This is tuned to\na value of 100 to work with the mass of the ant and the resistances of opposing\ntendons.</p>\n<h2>Altering the Models</h2>\n<p>Due to frustration editing XML files the <code>ant</code> model is generated by a python\nscript that uses the <a href=\"http://github.com/iandanforth/mjcf\" rel=\"nofollow\">mjcf</a> library which\nI wrote to wrap MuJoCo xml elements in python classes. Note: This may\nbe replaced with the mjcf library from <a href=\"https://github.com/deepmind/dm_control/tree/master/dm_control/mjcf\" rel=\"nofollow\">dm_control</a> in the future.</p>\n<p>You can view and modify that script in <code>scripts/gen_ant.py</code>.</p>\n\n          </div>"}, "last_serial": 4808313, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "1035a446d7a1ebda369e0b1d3afb8113", "sha256": "fe54b7dbe8cc5b0795e1d204efb09e59e92719ded387bf6db00ce9b2ce9fb880"}, "downloads": -1, "filename": "muscledagents-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1035a446d7a1ebda369e0b1d3afb8113", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 11647, "upload_time": "2019-02-11T22:44:22", "upload_time_iso_8601": "2019-02-11T22:44:22.544471Z", "url": "https://files.pythonhosted.org/packages/20/af/06ec09e21a5f79ab4d1eedc8eff35bb508723b536472e2a7f2e88db700ed/muscledagents-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbf7306a2952b5c2c5cf0f09e4d446b2", "sha256": "751a2c761e9116851e5e41e18a4ae4874714f7eafc53daa7b0794540bacc7882"}, "downloads": -1, "filename": "muscledagents-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bbf7306a2952b5c2c5cf0f09e4d446b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9585, "upload_time": "2019-02-11T22:44:24", "upload_time_iso_8601": "2019-02-11T22:44:24.577466Z", "url": "https://files.pythonhosted.org/packages/e3/e5/9d86ab638449ed13f6d628c536095702a89a4dab6d9a30214561b75e06db/muscledagents-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1035a446d7a1ebda369e0b1d3afb8113", "sha256": "fe54b7dbe8cc5b0795e1d204efb09e59e92719ded387bf6db00ce9b2ce9fb880"}, "downloads": -1, "filename": "muscledagents-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1035a446d7a1ebda369e0b1d3afb8113", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 11647, "upload_time": "2019-02-11T22:44:22", "upload_time_iso_8601": "2019-02-11T22:44:22.544471Z", "url": "https://files.pythonhosted.org/packages/20/af/06ec09e21a5f79ab4d1eedc8eff35bb508723b536472e2a7f2e88db700ed/muscledagents-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbf7306a2952b5c2c5cf0f09e4d446b2", "sha256": "751a2c761e9116851e5e41e18a4ae4874714f7eafc53daa7b0794540bacc7882"}, "downloads": -1, "filename": "muscledagents-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bbf7306a2952b5c2c5cf0f09e4d446b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9585, "upload_time": "2019-02-11T22:44:24", "upload_time_iso_8601": "2019-02-11T22:44:24.577466Z", "url": "https://files.pythonhosted.org/packages/e3/e5/9d86ab638449ed13f6d628c536095702a89a4dab6d9a30214561b75e06db/muscledagents-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:12 2020"}