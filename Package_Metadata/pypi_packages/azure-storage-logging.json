{"info": {"author": "Michiya Takahashi", "author_email": "michiya.takahashi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: System :: Logging"], "description": "azure-storage-logging\n=====================\n\n.. image:: http://img.shields.io/pypi/v/azure-storage-logging.svg?style=flat\n    :target: https://pypi.python.org/pypi/azure-storage-logging\n\n.. image:: http://img.shields.io/pypi/l/azure-storage-logging.svg?style=flat\n    :target: http://www.apache.org/licenses/LICENSE-2.0.html\n\n*azure-storage-logging* provides functionality to send output from\nthe standard Python logging APIs to Microsoft Azure Storage.\n\nDependencies\n------------\n\n* azure-storage 0.33 or newer\n\nInstallation\n------------\n\nInstall the package via pip: ::\n\n    pip install azure-storage-logging\n\nUsage\n-----\n\nThe module **azure_storage_logging.handlers** in the package contains\nthe following logging handler classes. Each of them uses a different\ntype of Microsoft Azure Storage to send its output to. They all are subclasses\nof the standard Python logging handler classes, so you can make use of them\nin the standard ways of Python logging configuration.\n\nIn addition to\n`the standard formats for logging <http://docs.python.org/2.7/library/logging.html#logrecord-attributes>`_,\nthe special format ``%(hostname)s`` is also available in your message formatter\nfor the handlers. The format is introduced for ease of identifying the source\nof log messages which come from many computers and go to the same storage.\n\nTableStorageHandler\n~~~~~~~~~~~~~~~~~~~\nThe **TableStorageHandler** class is a subclass of **logging.Handler** class,\nand it sends log messages to Azure table storage and store them\nas entities in the specified table.\n\nThe handler puts a formatted log message from applications in the *message*\nproperty of a table entity along with some system-defined properties\n(*PartitionKey*, *RowKey*, and *Timestamp*) like this:\n\n+--------------+-----------+----------------+-------------+\n| PartitionKey | RowKey    | Timestamp      | message     |\n+==============+===========+================+=============+\n| XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | log message |\n+--------------+-----------+----------------+-------------+\n| XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | log message |\n+--------------+-----------+----------------+-------------+\n| XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | log message |\n+--------------+-----------+----------------+-------------+\n\n* *class* azure_storage_logging.handlers.TableStorageHandler(*account_name=None, account_key=None, protocol='https', table='logs', batch_size=0, extra_properties=None, partition_key_formatter=None, row_key_formatter=None, is_emulated=False*)\n\n    Returns a new instance of the **TableStorageHandler** class. \n    The instance is initialized with the name and the key of your\n    Azure Storage account and some optional parameters.\n\n    The *table* specifies the name of the table that stores log messages.\n    A new table will be created if it doesn't exist. The table name must\n    conform to the naming convention for Azure Storage table, see\n    `the naming convention for tables <http://msdn.microsoft.com/library/azure/dd179338.aspx>`_\n    for more details.\n\n    The *protocol* specifies the protocol to transfer data between\n    Azure Storage and your application, ``http`` and ``https``\n    are supported.\n\n    You can specify the *batch_size* in an integer if you want to use\n    batch transaction when creating new log entities. If the *batch_size*\n    is greater than 1, all new log entities will be transferred to the\n    table at a time when the number of new log messages reaches the\n    *batch_size*. Otherwise, a new log entity will be transferred to\n    the table every time a logging is performed. The *batch_size* must be\n    up to 100 (maximum number of entities in a batch transaction for\n    Azure Storage table).\n\n    The *extra_properties* accepts a sequence of\n    `the formats for logging <http://docs.python.org/2.7/library/logging.html#logrecord-attributes>`_.\n    The handler-specific one ``%(hostname)s`` is also acceptable.\n    The handler assigns an entity property for every format specified in\n    *extra_properties*. Here is an example of using extra properties:\n\n    ::\n        \n        import logging\n        from azure_storage_logging.handlers import TableStorageHandler\n        \n        # configure the handler and add it to the logger\n        logger = logging.getLogger('example')\n        handler = TableStorageHandler(account_name='mystorageaccountname',\n                                      account_key='mystorageaccountkey',\n                                      extra_properties=('%(hostname)s',\n                                                        '%(levelname)s'))\n        logger.addHandler(handler)\n        \n        # output log messages\n        logger.info('info message')\n        logger.warning('warning message')\n        logger.error('error message')\n\n    And it will create the log entities, that have the extra properties\n    in addition to the regular property *message*, into the table like this:\n\n    +--------------+-----------+----------------+----------+-----------+---------------+\n    | PartitionKey | RowKey    | Timestamp      | hostname | levelname | message       |\n    +==============+===========+================+==========+===========+===============+\n    | XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | myhost   | INFO      | info message  |\n    +--------------+-----------+----------------+----------+-----------+---------------+\n    | XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | myhost   | WARNING   | warn message  |\n    +--------------+-----------+----------------+----------+-----------+---------------+\n    | XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | myhost   | ERROR     | error message |\n    +--------------+-----------+----------------+----------+-----------+---------------+\n\n    You can specify an instance of your custom **logging.Formatters**\n    for the *partition_key_formatter* or the *row_key_formatter*\n    if you want to implement your own keys for the table.\n    The default formatters will be used for partition keys and row keys\n    if no custom formatter for them is given to the handler.\n    The default values for partition keys are provided by the format\n    ``%(asctime)s`` and the date format ``%Y%m%d%H%M`` (provides a unique\n    value per minute). The default values for row keys are provided by the\n    format ``%(asctime)s%(msecs)03d-%(hostname)s-%(process)d-%(rowno)02d``\n    and the date format ``%Y%m%d%H%M%S``.\n\n    Note that the format ``%(rowno)d`` is a handler-specific one only\n    available for row keys. It would be formatted to a sequential and\n    unique number in a batch that starts from 0. The format is introduced\n    to avoid collision of row keys generated in a batch, and it would\n    always be formatted to 0 if you don't use batch transaction for logging\n    to the table.\n\n* setPartitionKeyFormatter(*fmt*)\n\n    Sets the handler's formatter for partition keys to *fmt*.\n\n* setRowKeyFormatter(*fmt*)\n\n    Sets the handler's formatter for row keys to *fmt*.\n\nQueueStorageHandler\n~~~~~~~~~~~~~~~~~~~\n\nThe **QueueStorageHandler** class is a subclass of **logging.Handler** class,\nand it pushes log messages to specified Azure storage queue.\n\nYou can pop log messages from the queue in other applications\nusing Azure Storage client libraries.\n\n* *class* azure_storage_logging.handlers.QueueStorageHandler(*account_name=None, account_key=None, protocol='https', queue='logs', message_ttl=None, visibility_timeout=None, base64_encoding=False, is_emulated=False*)\n\n    Returns a new instance of the **QueueStorageHandler** class. \n    The instance is initialized with the name and the key of your\n    Azure Storage account and some optional parameters.\n\n    The *queue* specifies the name of the queue that log messages are added.\n    A new queue will be created if it doesn't exist. The queue name must\n    conform to the naming convention for Azure Storage queue, see\n    `the naming convention for queues <http://msdn.microsoft.com/library/azure/dd179349.aspx>`_\n    for more details.\n\n    The *protocol* specifies the protocol to transfer data between\n    Azure Storage and your application, ``http`` and ``https``\n    are supported.\n\n    The *message_ttl* specifies the time-to-live interval for the message,\n    in seconds. The maximum time-to-live allowed is 7 days. If this \n    parameter is omitted, the default time-to-live is 7 days.\n\n    The *visibility_timeout* specifies the visibility timeout value,\n    in seconds, relative to server time. If not specified, the default\n    value is 0 (makes the message visible immediately). The new value\n    must be larger than or equal to 0, and cannot be larger than 7 days.\n    The *visibility_timeout* cannot be set to a value later than the\n    *message_ttl*, and should be set to a value smaller than the\n    *message_ttl*. \n\n    The *base64_encoding* specifies the necessity for encoding\n    log text in Base64. If you set this to ``True``, Unicode log text\n    in a message is encoded in utf-8 first and then encoded in Base64.\n    Some of Azure Storage client libraries or tools assume that\n    text messages in Azure Storage queue are encoded in Base64,\n    so you can set this to ``True`` to receive log messages correctly\n    with those libraries or tools.\n\nBlobStorageRotatingFileHandler\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe **BlobStorageRotatingFileHandler** class is a subclass of\n**logging.handlers.RotatingFileHandler** class. It performs\nlog file rotation and stores the outdated one in Azure blob storage\ncontainer when the current file reaches a certain size.\n\n* *class* azure_storage_logging.handlers.BlobStorageRotatingFileHandler(*filename, mode='a', maxBytes=0, encoding=None, delay=False, account_name=None, account_key=None, protocol='https', container='logs', zip_compression=False, max_connections=1, max_retries=5, retry_wait=1.0*, is_emulated=False)\n\n    Returns a new instance of the **BlobStorageRotatingFileHandler**\n    class. The instance is initialized with the name and the key of your\n    Azure Storage account and some optional parameters.\n\n    See `RotatingFileHandler <http://docs.python.org/2.7/library/logging.handlers.html#rotatingfilehandler>`_\n    for its basic usage. The handler keeps the latest log file into the\n    local file system. Meanwhile, the handler sends the outdated log file\n    to the blob container immediately and then removes it from the local\n    file system.\n\n    The *container* specifies the name of the blob container that stores\n    outdated log files. A new container will be created if it doesn't exist.\n    The container name must conform to the naming convention for\n    Azure Storage blob container, see\n    `the naming convention for blob containers <http://msdn.microsoft.com/library/azure/dd135715.aspx>`_\n    for more details.\n\n    The *protocol* specifies the protocol to transfer data between\n    Azure Storage and your application, ``http`` and ``https``\n    are supported.\n\n    The *zip_compression* specifies the necessity for compressing\n    every outdated log file in zip format before putting it in\n    the container.\n\n    The *max_connections* specifies a maximum number of parallel\n    connections to use when the blob size exceeds 64MB.\n    Set to 1 to upload the blob chunks sequentially.\n    Set to 2 or more to upload the blob chunks in parallel,\n    and this uses more system resources but will upload faster.\n\n    The *max_retries* specifies a number of times to retry\n    upload of blob chunk if an error occurs.\n\n    The *retry_wait* specifies sleep time in secs between retries.\n\n    The only two formatters ``%(hostname)s`` and ``%(process)d`` are\n    acceptable as a part of the *filename* or the *container*. You can save\n    log files in a blob container dedicated to each host or process by\n    naming containers with these formatters, and also can store log files\n    from multiple hosts or processes in a blob container by naming log files\n    with them.\n\n    Be careful to use the ``%(process)d`` formatter in the *filename*\n    because inconsistent PIDs assigned to your application every time it\n    gets started are included as a part of the name of log files to search\n    for rotation. You should use the formatter in the *filename* only when\n    the log file is generated by a long-running application process.\n\n    Note that the hander class doesn't take the *backupCount* parameter,\n    unlike RotatingFileHandler does. The number of outdated log files\n    that the handler stores in the container is unlimited, and the files\n    are saved with the extension that indicates the time in UTC when\n    they are replaced with a new one. If you want to keep the amount of\n    outdated log files in the container in a certain number, you will\n    need to do that using Azure management portal or other tools.\n\nBlobStorageTimedRotatingFileHandler\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe **BlobStorageTimedRotatingFileHandler** class is a subclass of\n**logging.handlers.TimedRotatingFileHandler** class. It performs\nlog file rotation and stores the outdated one to Azure blob storage\ncontainer at certain timed intervals.\n\n* *class* azure_storage_logging.handlers.BlobStorageTimedRotatingFileHandler(*filename, when='h', interval=1, encoding=None, delay=False, utc=False, account_name=None, account_key=None, protocol='https', container='logs', zip_compression=False, max_connections=1, max_retries=5, retry_wait=1.0*, is_emulated=False)\n\n    Returns a new instance of the **BlobStorageTimedRotatingFileHandler**\n    class. The instance is initialized with the name and the key of your\n    Azure Storage account and some optional parameters.\n\n    See `TimedRotatingFileHandler <http://docs.python.org/2.7/library/logging.handlers.html#timedrotatingfilehandler>`_\n    for its basic usage. The handler keeps the latest log file into the\n    local file system. Meanwhile, the handler sends the outdated log file\n    to the blob container immediately and then removes it from the local\n    file system.\n\n    The *container* specifies the name of the blob container that stores\n    outdated log files. A new container will be created if it doesn't exist.\n    The container name must conform to the naming convention for\n    Azure Storage blob container, see\n    `the naming convention for blob containers <http://msdn.microsoft.com/library/azure/dd135715.aspx>`_\n    for more details.\n\n    The *protocol* specifies the protocol to transfer data between\n    Azure Storage and your application, ``http`` and ``https``\n    are supported.\n\n    The *zip_compression* specifies the necessity for compressing\n    every outdated log file in zip format before putting it in\n    the container.\n\n    The *max_connections* specifies a maximum number of parallel\n    connections to use when the blob size exceeds 64MB.\n    Set to 1 to upload the blob chunks sequentially.\n    Set to 2 or more to upload the blob chunks in parallel,\n    and this uses more system resources but will upload faster.\n\n    The *max_retries* specifies a number of times to retry\n    upload of blob chunk if an error occurs.\n\n    The *retry_wait* specifies sleep time in secs between retries.\n\n    The only two formatters ``%(hostname)s`` and ``%(process)d`` are\n    acceptable as a part of the *filename* or the *container*. You can save\n    log files in a blob container dedicated to each host or process by\n    naming containers with these formatters, and also can store log files\n    from multiple hosts or processes in a blob container by naming log files\n    with them.\n\n    Be careful to use the ``%(process)d`` formatter in the *filename*\n    because inconsistent PIDs assigned to your application every time it\n    gets started are included as a part of the name of log files to search\n    for rotation. You should use the formatter in the *filename* only when\n    the log file is generated by a long-running application process.\n\n    Note that the hander class doesn't take the *backupCount* parameter,\n    unlike TimedRotatingFileHandler does. The number of outdated log files\n    that the handler stores in the container is unlimited.\n    If you want to keep the amount of outdated log files in the container\n    in a certain number, you will need to do that using Azure\n    management portal or other tools.\n\nExample\n-------\n\nHere is an example of the configurations and the logging that uses\nthree different types of storage from the logger:\n\n::\n\n    LOGGING = {\n        'version': 1,\n        'formatters': {\n            'simple': {\n                'format': '%(asctime)s %(message)s',\n            },\n            'verbose': {\n                'format': '%(asctime)s %(levelname)s %(hostname)s %(process)d %(message)s',\n            },\n            # this is the same as the default, so you can skip configuring it\n            'partition_key': {\n                'format': '%(asctime)s',\n                'datefmt': '%Y%m%d%H%M',\n            },\n            # this is the same as the default, so you can skip configuring it\n            'row_key': {\n                'format': '%(asctime)s%(msecs)03d-%(hostname)s-%(process)d-%(rowno)02d',\n                'datefmt': '%Y%m%d%H%M%S',\n            },\n        },\n        'handlers': {\n            'file': {\n                'account_name': 'mystorageaccountname',\n                'account_key': 'mystorageaccountkey',\n                'protocol': 'https',\n                'level': 'DEBUG',\n                'class': 'azure_storage_logging.handlers.BlobStorageTimedRotatingFileHandler',\n                'formatter': 'verbose',\n                'filename': 'example.log',\n                'when': 'D',\n                'interval': 1,\n                'container': 'logs-%(hostname)s',\n                'zip_compression': False,\n            },\n            'queue': {\n                'account_name': 'mystorageaccountname',\n                'account_key': 'mystorageaccountkey',\n                'protocol': 'https',\n                'queue': 'logs',\n                'level': 'CRITICAL',\n                'class': 'azure_storage_logging.handlers.QueueStorageHandler',\n                'formatter': 'verbose',\n            },\n            'table': {\n                'account_name': 'mystorageaccountname',\n                'account_key': 'mystorageaccountkey',\n                'protocol': 'https',\n                'table': 'logs',\n                'level': 'INFO',\n                'class': 'azure_storage_logging.handlers.TableStorageHandler',\n                'formatter': 'simple',\n                'batch_size': 20,\n                'extra_properties': ['%(hostname)s', '%(levelname)s'],\n                'partition_key_formatter': 'cfg://formatters.partition_key',\n                'row_key_formatter': 'cfg://formatters.row_key',\n            },\n        },\n        'loggers': {\n            'example': {\n                'handlers': ['file', 'queue', 'table'],\n                'level': 'DEBUG',\n            },\n        }\n    }\n    \n    import logging\n    from logging.config import dictConfig\n\n    dictConfig(LOGGING)\n    logger = logging.getLogger('example')\n    logger.debug('debug message')\n    logger.info('info message')\n    logger.warning('warning message')\n    logger.error('error message')\n    logger.critical('critical message') \n\nNotice\n------\n\n* Set *is_emulated* to ``True`` at initialization of the logging handlers\n  if you want to use this package with Azure storage emulator.\n\nLicense\n-------\n\nApache License 2.0\n\nCredits\n-------\n\n-  `Michiya Takahashi <http://github.com/michiya/>`__", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michiya/azure-storage-logging", "keywords": "azure logging", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "azure-storage-logging", "package_url": "https://pypi.org/project/azure-storage-logging/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/azure-storage-logging/", "project_urls": {"Homepage": "https://github.com/michiya/azure-storage-logging"}, "release_url": "https://pypi.org/project/azure-storage-logging/0.5.1/", "requires_dist": null, "requires_python": "", "summary": "Logging handlers to send logs to Microsoft Azure Storage", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/azure-storage-logging\" rel=\"nofollow\"><img alt=\"http://img.shields.io/pypi/v/azure-storage-logging.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a4bb31e8bd8df6d465c26492e4443025d97bee8b/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f617a7572652d73746f726167652d6c6f6767696e672e7376673f7374796c653d666c6174\"></a>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\"><img alt=\"http://img.shields.io/pypi/l/azure-storage-logging.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8762769c1dedb6a2c9b792af0b675f33568a155/687474703a2f2f696d672e736869656c64732e696f2f707970692f6c2f617a7572652d73746f726167652d6c6f6767696e672e7376673f7374796c653d666c6174\"></a>\n<p><em>azure-storage-logging</em> provides functionality to send output from\nthe standard Python logging APIs to Microsoft Azure Storage.</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>azure-storage 0.33 or newer</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the package via pip:</p>\n<pre>pip install azure-storage-logging\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The module <strong>azure_storage_logging.handlers</strong> in the package contains\nthe following logging handler classes. Each of them uses a different\ntype of Microsoft Azure Storage to send its output to. They all are subclasses\nof the standard Python logging handler classes, so you can make use of them\nin the standard ways of Python logging configuration.</p>\n<p>In addition to\n<a href=\"http://docs.python.org/2.7/library/logging.html#logrecord-attributes\" rel=\"nofollow\">the standard formats for logging</a>,\nthe special format <tt>%(hostname)s</tt> is also available in your message formatter\nfor the handlers. The format is introduced for ease of identifying the source\nof log messages which come from many computers and go to the same storage.</p>\n<div id=\"tablestoragehandler\">\n<h3>TableStorageHandler</h3>\n<p>The <strong>TableStorageHandler</strong> class is a subclass of <strong>logging.Handler</strong> class,\nand it sends log messages to Azure table storage and store them\nas entities in the specified table.</p>\n<p>The handler puts a formatted log message from applications in the <em>message</em>\nproperty of a table entity along with some system-defined properties\n(<em>PartitionKey</em>, <em>RowKey</em>, and <em>Timestamp</em>) like this:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>PartitionKey</th>\n<th>RowKey</th>\n<th>Timestamp</th>\n<th>message</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>XXXXX</td>\n<td>XXXXXXXXX</td>\n<td>YYYY-MM-DD \u2026</td>\n<td>log message</td>\n</tr>\n<tr><td>XXXXX</td>\n<td>XXXXXXXXX</td>\n<td>YYYY-MM-DD \u2026</td>\n<td>log message</td>\n</tr>\n<tr><td>XXXXX</td>\n<td>XXXXXXXXX</td>\n<td>YYYY-MM-DD \u2026</td>\n<td>log message</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p><em>class</em> azure_storage_logging.handlers.TableStorageHandler(<em>account_name=None, account_key=None, protocol=\u2019https\u2019, table=\u2019logs\u2019, batch_size=0, extra_properties=None, partition_key_formatter=None, row_key_formatter=None, is_emulated=False</em>)</p>\n<blockquote>\n<p>Returns a new instance of the <strong>TableStorageHandler</strong> class.\nThe instance is initialized with the name and the key of your\nAzure Storage account and some optional parameters.</p>\n<p>The <em>table</em> specifies the name of the table that stores log messages.\nA new table will be created if it doesn\u2019t exist. The table name must\nconform to the naming convention for Azure Storage table, see\n<a href=\"http://msdn.microsoft.com/library/azure/dd179338.aspx\" rel=\"nofollow\">the naming convention for tables</a>\nfor more details.</p>\n<p>The <em>protocol</em> specifies the protocol to transfer data between\nAzure Storage and your application, <tt>http</tt> and <tt>https</tt>\nare supported.</p>\n<p>You can specify the <em>batch_size</em> in an integer if you want to use\nbatch transaction when creating new log entities. If the <em>batch_size</em>\nis greater than 1, all new log entities will be transferred to the\ntable at a time when the number of new log messages reaches the\n<em>batch_size</em>. Otherwise, a new log entity will be transferred to\nthe table every time a logging is performed. The <em>batch_size</em> must be\nup to 100 (maximum number of entities in a batch transaction for\nAzure Storage table).</p>\n<p>The <em>extra_properties</em> accepts a sequence of\n<a href=\"http://docs.python.org/2.7/library/logging.html#logrecord-attributes\" rel=\"nofollow\">the formats for logging</a>.\nThe handler-specific one <tt>%(hostname)s</tt> is also acceptable.\nThe handler assigns an entity property for every format specified in\n<em>extra_properties</em>. Here is an example of using extra properties:</p>\n<pre>import logging\nfrom azure_storage_logging.handlers import TableStorageHandler\n\n# configure the handler and add it to the logger\nlogger = logging.getLogger('example')\nhandler = TableStorageHandler(account_name='mystorageaccountname',\n                              account_key='mystorageaccountkey',\n                              extra_properties=('%(hostname)s',\n                                                '%(levelname)s'))\nlogger.addHandler(handler)\n\n# output log messages\nlogger.info('info message')\nlogger.warning('warning message')\nlogger.error('error message')\n</pre>\n<p>And it will create the log entities, that have the extra properties\nin addition to the regular property <em>message</em>, into the table like this:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>PartitionKey</th>\n<th>RowKey</th>\n<th>Timestamp</th>\n<th>hostname</th>\n<th>levelname</th>\n<th>message</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>XXXXX</td>\n<td>XXXXXXXXX</td>\n<td>YYYY-MM-DD \u2026</td>\n<td>myhost</td>\n<td>INFO</td>\n<td>info message</td>\n</tr>\n<tr><td>XXXXX</td>\n<td>XXXXXXXXX</td>\n<td>YYYY-MM-DD \u2026</td>\n<td>myhost</td>\n<td>WARNING</td>\n<td>warn message</td>\n</tr>\n<tr><td>XXXXX</td>\n<td>XXXXXXXXX</td>\n<td>YYYY-MM-DD \u2026</td>\n<td>myhost</td>\n<td>ERROR</td>\n<td>error message</td>\n</tr>\n</tbody>\n</table>\n<p>You can specify an instance of your custom <strong>logging.Formatters</strong>\nfor the <em>partition_key_formatter</em> or the <em>row_key_formatter</em>\nif you want to implement your own keys for the table.\nThe default formatters will be used for partition keys and row keys\nif no custom formatter for them is given to the handler.\nThe default values for partition keys are provided by the format\n<tt>%(asctime)s</tt> and the date format <tt>%Y%m%d%H%M</tt> (provides a unique\nvalue per minute). The default values for row keys are provided by the\nformat <tt><span class=\"pre\">%(asctime)s%(msecs)03d-%(hostname)s-%(process)d-%(rowno)02d</span></tt>\nand the date format <tt>%Y%m%d%H%M%S</tt>.</p>\n<p>Note that the format <tt>%(rowno)d</tt> is a handler-specific one only\navailable for row keys. It would be formatted to a sequential and\nunique number in a batch that starts from 0. The format is introduced\nto avoid collision of row keys generated in a batch, and it would\nalways be formatted to 0 if you don\u2019t use batch transaction for logging\nto the table.</p>\n</blockquote>\n</li>\n<li><p>setPartitionKeyFormatter(<em>fmt</em>)</p>\n<blockquote>\n<p>Sets the handler\u2019s formatter for partition keys to <em>fmt</em>.</p>\n</blockquote>\n</li>\n<li><p>setRowKeyFormatter(<em>fmt</em>)</p>\n<blockquote>\n<p>Sets the handler\u2019s formatter for row keys to <em>fmt</em>.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"queuestoragehandler\">\n<h3>QueueStorageHandler</h3>\n<p>The <strong>QueueStorageHandler</strong> class is a subclass of <strong>logging.Handler</strong> class,\nand it pushes log messages to specified Azure storage queue.</p>\n<p>You can pop log messages from the queue in other applications\nusing Azure Storage client libraries.</p>\n<ul>\n<li><p><em>class</em> azure_storage_logging.handlers.QueueStorageHandler(<em>account_name=None, account_key=None, protocol=\u2019https\u2019, queue=\u2019logs\u2019, message_ttl=None, visibility_timeout=None, base64_encoding=False, is_emulated=False</em>)</p>\n<blockquote>\n<p>Returns a new instance of the <strong>QueueStorageHandler</strong> class.\nThe instance is initialized with the name and the key of your\nAzure Storage account and some optional parameters.</p>\n<p>The <em>queue</em> specifies the name of the queue that log messages are added.\nA new queue will be created if it doesn\u2019t exist. The queue name must\nconform to the naming convention for Azure Storage queue, see\n<a href=\"http://msdn.microsoft.com/library/azure/dd179349.aspx\" rel=\"nofollow\">the naming convention for queues</a>\nfor more details.</p>\n<p>The <em>protocol</em> specifies the protocol to transfer data between\nAzure Storage and your application, <tt>http</tt> and <tt>https</tt>\nare supported.</p>\n<p>The <em>message_ttl</em> specifies the time-to-live interval for the message,\nin seconds. The maximum time-to-live allowed is 7 days. If this\nparameter is omitted, the default time-to-live is 7 days.</p>\n<p>The <em>visibility_timeout</em> specifies the visibility timeout value,\nin seconds, relative to server time. If not specified, the default\nvalue is 0 (makes the message visible immediately). The new value\nmust be larger than or equal to 0, and cannot be larger than 7 days.\nThe <em>visibility_timeout</em> cannot be set to a value later than the\n<em>message_ttl</em>, and should be set to a value smaller than the\n<em>message_ttl</em>.</p>\n<p>The <em>base64_encoding</em> specifies the necessity for encoding\nlog text in Base64. If you set this to <tt>True</tt>, Unicode log text\nin a message is encoded in utf-8 first and then encoded in Base64.\nSome of Azure Storage client libraries or tools assume that\ntext messages in Azure Storage queue are encoded in Base64,\nso you can set this to <tt>True</tt> to receive log messages correctly\nwith those libraries or tools.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"blobstoragerotatingfilehandler\">\n<h3>BlobStorageRotatingFileHandler</h3>\n<p>The <strong>BlobStorageRotatingFileHandler</strong> class is a subclass of\n<strong>logging.handlers.RotatingFileHandler</strong> class. It performs\nlog file rotation and stores the outdated one in Azure blob storage\ncontainer when the current file reaches a certain size.</p>\n<ul>\n<li><p><em>class</em> azure_storage_logging.handlers.BlobStorageRotatingFileHandler(<em>filename, mode=\u2019a\u2019, maxBytes=0, encoding=None, delay=False, account_name=None, account_key=None, protocol=\u2019https\u2019, container=\u2019logs\u2019, zip_compression=False, max_connections=1, max_retries=5, retry_wait=1.0</em>, is_emulated=False)</p>\n<blockquote>\n<p>Returns a new instance of the <strong>BlobStorageRotatingFileHandler</strong>\nclass. The instance is initialized with the name and the key of your\nAzure Storage account and some optional parameters.</p>\n<p>See <a href=\"http://docs.python.org/2.7/library/logging.handlers.html#rotatingfilehandler\" rel=\"nofollow\">RotatingFileHandler</a>\nfor its basic usage. The handler keeps the latest log file into the\nlocal file system. Meanwhile, the handler sends the outdated log file\nto the blob container immediately and then removes it from the local\nfile system.</p>\n<p>The <em>container</em> specifies the name of the blob container that stores\noutdated log files. A new container will be created if it doesn\u2019t exist.\nThe container name must conform to the naming convention for\nAzure Storage blob container, see\n<a href=\"http://msdn.microsoft.com/library/azure/dd135715.aspx\" rel=\"nofollow\">the naming convention for blob containers</a>\nfor more details.</p>\n<p>The <em>protocol</em> specifies the protocol to transfer data between\nAzure Storage and your application, <tt>http</tt> and <tt>https</tt>\nare supported.</p>\n<p>The <em>zip_compression</em> specifies the necessity for compressing\nevery outdated log file in zip format before putting it in\nthe container.</p>\n<p>The <em>max_connections</em> specifies a maximum number of parallel\nconnections to use when the blob size exceeds 64MB.\nSet to 1 to upload the blob chunks sequentially.\nSet to 2 or more to upload the blob chunks in parallel,\nand this uses more system resources but will upload faster.</p>\n<p>The <em>max_retries</em> specifies a number of times to retry\nupload of blob chunk if an error occurs.</p>\n<p>The <em>retry_wait</em> specifies sleep time in secs between retries.</p>\n<p>The only two formatters <tt>%(hostname)s</tt> and <tt>%(process)d</tt> are\nacceptable as a part of the <em>filename</em> or the <em>container</em>. You can save\nlog files in a blob container dedicated to each host or process by\nnaming containers with these formatters, and also can store log files\nfrom multiple hosts or processes in a blob container by naming log files\nwith them.</p>\n<p>Be careful to use the <tt>%(process)d</tt> formatter in the <em>filename</em>\nbecause inconsistent PIDs assigned to your application every time it\ngets started are included as a part of the name of log files to search\nfor rotation. You should use the formatter in the <em>filename</em> only when\nthe log file is generated by a long-running application process.</p>\n<p>Note that the hander class doesn\u2019t take the <em>backupCount</em> parameter,\nunlike RotatingFileHandler does. The number of outdated log files\nthat the handler stores in the container is unlimited, and the files\nare saved with the extension that indicates the time in UTC when\nthey are replaced with a new one. If you want to keep the amount of\noutdated log files in the container in a certain number, you will\nneed to do that using Azure management portal or other tools.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"blobstoragetimedrotatingfilehandler\">\n<h3>BlobStorageTimedRotatingFileHandler</h3>\n<p>The <strong>BlobStorageTimedRotatingFileHandler</strong> class is a subclass of\n<strong>logging.handlers.TimedRotatingFileHandler</strong> class. It performs\nlog file rotation and stores the outdated one to Azure blob storage\ncontainer at certain timed intervals.</p>\n<ul>\n<li><p><em>class</em> azure_storage_logging.handlers.BlobStorageTimedRotatingFileHandler(<em>filename, when=\u2019h\u2019, interval=1, encoding=None, delay=False, utc=False, account_name=None, account_key=None, protocol=\u2019https\u2019, container=\u2019logs\u2019, zip_compression=False, max_connections=1, max_retries=5, retry_wait=1.0</em>, is_emulated=False)</p>\n<blockquote>\n<p>Returns a new instance of the <strong>BlobStorageTimedRotatingFileHandler</strong>\nclass. The instance is initialized with the name and the key of your\nAzure Storage account and some optional parameters.</p>\n<p>See <a href=\"http://docs.python.org/2.7/library/logging.handlers.html#timedrotatingfilehandler\" rel=\"nofollow\">TimedRotatingFileHandler</a>\nfor its basic usage. The handler keeps the latest log file into the\nlocal file system. Meanwhile, the handler sends the outdated log file\nto the blob container immediately and then removes it from the local\nfile system.</p>\n<p>The <em>container</em> specifies the name of the blob container that stores\noutdated log files. A new container will be created if it doesn\u2019t exist.\nThe container name must conform to the naming convention for\nAzure Storage blob container, see\n<a href=\"http://msdn.microsoft.com/library/azure/dd135715.aspx\" rel=\"nofollow\">the naming convention for blob containers</a>\nfor more details.</p>\n<p>The <em>protocol</em> specifies the protocol to transfer data between\nAzure Storage and your application, <tt>http</tt> and <tt>https</tt>\nare supported.</p>\n<p>The <em>zip_compression</em> specifies the necessity for compressing\nevery outdated log file in zip format before putting it in\nthe container.</p>\n<p>The <em>max_connections</em> specifies a maximum number of parallel\nconnections to use when the blob size exceeds 64MB.\nSet to 1 to upload the blob chunks sequentially.\nSet to 2 or more to upload the blob chunks in parallel,\nand this uses more system resources but will upload faster.</p>\n<p>The <em>max_retries</em> specifies a number of times to retry\nupload of blob chunk if an error occurs.</p>\n<p>The <em>retry_wait</em> specifies sleep time in secs between retries.</p>\n<p>The only two formatters <tt>%(hostname)s</tt> and <tt>%(process)d</tt> are\nacceptable as a part of the <em>filename</em> or the <em>container</em>. You can save\nlog files in a blob container dedicated to each host or process by\nnaming containers with these formatters, and also can store log files\nfrom multiple hosts or processes in a blob container by naming log files\nwith them.</p>\n<p>Be careful to use the <tt>%(process)d</tt> formatter in the <em>filename</em>\nbecause inconsistent PIDs assigned to your application every time it\ngets started are included as a part of the name of log files to search\nfor rotation. You should use the formatter in the <em>filename</em> only when\nthe log file is generated by a long-running application process.</p>\n<p>Note that the hander class doesn\u2019t take the <em>backupCount</em> parameter,\nunlike TimedRotatingFileHandler does. The number of outdated log files\nthat the handler stores in the container is unlimited.\nIf you want to keep the amount of outdated log files in the container\nin a certain number, you will need to do that using Azure\nmanagement portal or other tools.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Here is an example of the configurations and the logging that uses\nthree different types of storage from the logger:</p>\n<pre>LOGGING = {\n    'version': 1,\n    'formatters': {\n        'simple': {\n            'format': '%(asctime)s %(message)s',\n        },\n        'verbose': {\n            'format': '%(asctime)s %(levelname)s %(hostname)s %(process)d %(message)s',\n        },\n        # this is the same as the default, so you can skip configuring it\n        'partition_key': {\n            'format': '%(asctime)s',\n            'datefmt': '%Y%m%d%H%M',\n        },\n        # this is the same as the default, so you can skip configuring it\n        'row_key': {\n            'format': '%(asctime)s%(msecs)03d-%(hostname)s-%(process)d-%(rowno)02d',\n            'datefmt': '%Y%m%d%H%M%S',\n        },\n    },\n    'handlers': {\n        'file': {\n            'account_name': 'mystorageaccountname',\n            'account_key': 'mystorageaccountkey',\n            'protocol': 'https',\n            'level': 'DEBUG',\n            'class': 'azure_storage_logging.handlers.BlobStorageTimedRotatingFileHandler',\n            'formatter': 'verbose',\n            'filename': 'example.log',\n            'when': 'D',\n            'interval': 1,\n            'container': 'logs-%(hostname)s',\n            'zip_compression': False,\n        },\n        'queue': {\n            'account_name': 'mystorageaccountname',\n            'account_key': 'mystorageaccountkey',\n            'protocol': 'https',\n            'queue': 'logs',\n            'level': 'CRITICAL',\n            'class': 'azure_storage_logging.handlers.QueueStorageHandler',\n            'formatter': 'verbose',\n        },\n        'table': {\n            'account_name': 'mystorageaccountname',\n            'account_key': 'mystorageaccountkey',\n            'protocol': 'https',\n            'table': 'logs',\n            'level': 'INFO',\n            'class': 'azure_storage_logging.handlers.TableStorageHandler',\n            'formatter': 'simple',\n            'batch_size': 20,\n            'extra_properties': ['%(hostname)s', '%(levelname)s'],\n            'partition_key_formatter': 'cfg://formatters.partition_key',\n            'row_key_formatter': 'cfg://formatters.row_key',\n        },\n    },\n    'loggers': {\n        'example': {\n            'handlers': ['file', 'queue', 'table'],\n            'level': 'DEBUG',\n        },\n    }\n}\n\nimport logging\nfrom logging.config import dictConfig\n\ndictConfig(LOGGING)\nlogger = logging.getLogger('example')\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warning message')\nlogger.error('error message')\nlogger.critical('critical message')\n</pre>\n</div>\n<div id=\"notice\">\n<h2>Notice</h2>\n<ul>\n<li>Set <em>is_emulated</em> to <tt>True</tt> at initialization of the logging handlers\nif you want to use this package with Azure storage emulator.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Apache License 2.0</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<ul>\n<li><a href=\"http://github.com/michiya/\" rel=\"nofollow\">Michiya Takahashi</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2389511, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "454bffec3ea6b764e5e79f765cb8e9bc", "sha256": "e83441e197be74e87e220abfdd3c9db853e05e155bf2d76b20b9e595348d2df2"}, "downloads": -1, "filename": "azure-storage-logging-0.1.0.zip", "has_sig": false, "md5_digest": "454bffec3ea6b764e5e79f765cb8e9bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22471, "upload_time": "2013-12-11T01:44:52", "upload_time_iso_8601": "2013-12-11T01:44:52.946088Z", "url": "https://files.pythonhosted.org/packages/a5/28/5e0aa83e80ce1f18e7b922f5ecd88edd11ff8fd1a919b0eed537de6e0b73/azure-storage-logging-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "60beb1816b26fd509fe535578efbfaf6", "sha256": "f0b8693b0301616bb5d4cf8ea13a6211ce5ef131baf878fb321da450697dbc0b"}, "downloads": -1, "filename": "azure-storage-logging-0.1.1.zip", "has_sig": false, "md5_digest": "60beb1816b26fd509fe535578efbfaf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22455, "upload_time": "2013-12-12T10:04:55", "upload_time_iso_8601": "2013-12-12T10:04:55.267799Z", "url": "https://files.pythonhosted.org/packages/e2/9a/85926e689f3a91875e29fd5f5fdb43142da43b02ee19ff03ced5ecce872a/azure-storage-logging-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "887d45872ba1932b33db449cde70f8d7", "sha256": "d2626528c424a237166ddae4707a8271852372ca96408482f38aab19a6963acf"}, "downloads": -1, "filename": "azure-storage-logging-0.1.2.zip", "has_sig": false, "md5_digest": "887d45872ba1932b33db449cde70f8d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22423, "upload_time": "2013-12-12T14:20:13", "upload_time_iso_8601": "2013-12-12T14:20:13.100578Z", "url": "https://files.pythonhosted.org/packages/61/a3/19a5c32f2cec99908d1fd8bd72fe95df9f70066f1153d6c32e663d112eb3/azure-storage-logging-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "327e3aaedd7abd4ad4cbf826be00772d", "sha256": "f5db5d825b6e85c2faa4549c96f8ba9cf4b746573e27965dd23dda79948a73b1"}, "downloads": -1, "filename": "azure-storage-logging-0.1.3.zip", "has_sig": false, "md5_digest": "327e3aaedd7abd4ad4cbf826be00772d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22495, "upload_time": "2013-12-18T13:20:22", "upload_time_iso_8601": "2013-12-18T13:20:22.382366Z", "url": "https://files.pythonhosted.org/packages/be/02/d9bc411c5e7a2831a5368afdf4a75cdf9f927d81095f3604bb11a009fe29/azure-storage-logging-0.1.3.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "279870fa103efeec5fa343c4cc221695", "sha256": "8322af7d42f6454606f7ee2e6b91ebdcbc35cf8c8469f5fceb0db408135404ae"}, "downloads": -1, "filename": "azure-storage-logging-0.2.0.zip", "has_sig": false, "md5_digest": "279870fa103efeec5fa343c4cc221695", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22858, "upload_time": "2014-04-01T13:03:48", "upload_time_iso_8601": "2014-04-01T13:03:48.966953Z", "url": "https://files.pythonhosted.org/packages/56/c8/28391449bd164fc35cfa4f8d72bf8845f020444e7133a2611d09873557f4/azure-storage-logging-0.2.0.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f6445fd2ba7d648061d8e3eb90817ea8", "sha256": "0f9b2b16b29eff713919da57d0192d6404ef79434bca2f76914aa26ef8bff219"}, "downloads": -1, "filename": "azure-storage-logging-0.2.1.zip", "has_sig": false, "md5_digest": "f6445fd2ba7d648061d8e3eb90817ea8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23200, "upload_time": "2014-10-16T13:49:56", "upload_time_iso_8601": "2014-10-16T13:49:56.813970Z", "url": "https://files.pythonhosted.org/packages/7e/0b/3e9d91cae050ad20964c92ce9dffa0be3c33fe430fa71b215845b2fd683c/azure-storage-logging-0.2.1.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b90ac7016dbbd1af4008876a43035106", "sha256": "fd2418929ecc3d8321c887676dd7f21e0790b6c0dad69a0971668c310bc9f7f9"}, "downloads": -1, "filename": "azure-storage-logging-0.3.0.zip", "has_sig": false, "md5_digest": "b90ac7016dbbd1af4008876a43035106", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23885, "upload_time": "2015-01-27T07:47:28", "upload_time_iso_8601": "2015-01-27T07:47:28.586552Z", "url": "https://files.pythonhosted.org/packages/8c/47/727a3d93b9f6a00c849b3ea8585c2066cce51c2fea90f584426d97e56269/azure-storage-logging-0.3.0.zip", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "664ffc163aa247590c375ddca84c723f", "sha256": "e36a44f7cef49f504885fe242a1d1ba6509902abef90ce88a46560b73808de26"}, "downloads": -1, "filename": "azure-storage-logging-0.4.0.zip", "has_sig": false, "md5_digest": "664ffc163aa247590c375ddca84c723f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25554, "upload_time": "2015-05-14T02:47:51", "upload_time_iso_8601": "2015-05-14T02:47:51.118392Z", "url": "https://files.pythonhosted.org/packages/8c/08/29fffe0b733dce29f5c7ef8219c60b3603039681cfcda68a6f8039596f23/azure-storage-logging-0.4.0.zip", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "ffa6bc0dbdf139f0e45cf59fbccba6cc", "sha256": "8eed93b12bd3430c91d159c32e162058f18047b49b5a02a3a6e01a86c600ba5e"}, "downloads": -1, "filename": "azure-storage-logging-0.5.0.zip", "has_sig": false, "md5_digest": "ffa6bc0dbdf139f0e45cf59fbccba6cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25519, "upload_time": "2015-09-02T06:04:49", "upload_time_iso_8601": "2015-09-02T06:04:49.693837Z", "url": "https://files.pythonhosted.org/packages/c4/77/d0cf60cf039fde0680664cc7f98d525286f6bd1ce33dd73023752509b0b1/azure-storage-logging-0.5.0.zip", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "4546097c9e77dd7af97191d45777e461", "sha256": "ff60ef6703725e18ae7afec42666eaf334549eb701d28d497b15b25fc21204e3"}, "downloads": -1, "filename": "azure-storage-logging-0.5.1.zip", "has_sig": false, "md5_digest": "4546097c9e77dd7af97191d45777e461", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25408, "upload_time": "2016-10-09T16:18:48", "upload_time_iso_8601": "2016-10-09T16:18:48.113515Z", "url": "https://files.pythonhosted.org/packages/37/16/3e48a98b1b1c9cdf113ccfd3c629948caaffe5c8b7a529419b7b22ec2191/azure-storage-logging-0.5.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4546097c9e77dd7af97191d45777e461", "sha256": "ff60ef6703725e18ae7afec42666eaf334549eb701d28d497b15b25fc21204e3"}, "downloads": -1, "filename": "azure-storage-logging-0.5.1.zip", "has_sig": false, "md5_digest": "4546097c9e77dd7af97191d45777e461", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25408, "upload_time": "2016-10-09T16:18:48", "upload_time_iso_8601": "2016-10-09T16:18:48.113515Z", "url": "https://files.pythonhosted.org/packages/37/16/3e48a98b1b1c9cdf113ccfd3c629948caaffe5c8b7a529419b7b22ec2191/azure-storage-logging-0.5.1.zip", "yanked": false}], "timestamp": "Thu May  7 18:15:13 2020"}