{"info": {"author": "Michael Hansen", "author_email": "hansen.mike@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# Rhasspy ASR Kaldi\n\n[![Continous Integration](https://github.com/rhasspy/rhasspy-asr-kaldi/workflows/Tests/badge.svg)](https://github.com/rhasspy/rhasspy-asr-kaldi/actions)\n[![GitHub license](https://img.shields.io/github/license/rhasspy/rhasspy-asr-kaldi.svg)](https://github.com/rhasspy/rhasspy-asr-kaldi/blob/master/LICENSE)\n\nAutomated speech recognition in [Rhasspy](https://github.com/synesthesiam/rhasspy) voice assistant with [Kaldi](http://kaldi-asr.org).\n\n## Dependencies\n\n`rhasspy-asr-pocketsphinx` requires:\n\n* Python 3.7\n* [Kaldi](https://kaldi-asr.org)\n* [Opengrm](http://www.opengrm.org/twiki/bin/view/GRM/NGramLibrary)\n* [Phonetisaurus](https://github.com/AdolfVonKleist/Phonetisaurus)\n\nYou can usually install Opengrm with `apt-get install libngram-tools`\n\nKaldi and Phonetisaurus are included in the pre-built wheel.\n\n## Transcribing\n\nUse `python3 -m rhasspyasr_kaldi transcribe <ARGS>`\n\n```\nusage: rhasspy-asr-kaldi transcribe [-h] --model-dir MODEL_DIR\n                                    [--graph-dir GRAPH_DIR]\n                                    [--model-type MODEL_TYPE]\n                                    [--frames-in-chunk FRAMES_IN_CHUNK]\n                                    [wav_file [wav_file ...]]\n\npositional arguments:\n  wav_file              WAV file(s) to transcribe\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --model-dir MODEL_DIR\n                        Path to Kaldi model directory (with conf, data)\n  --graph-dir GRAPH_DIR\n                        Path to Kaldi graph directory (with HCLG.fst)\n  --model-type MODEL_TYPE\n                        Either nnet3 or gmm (default: nnet3)\n  --frames-in-chunk FRAMES_IN_CHUNK\n                        Number of frames to process at a time\n```\n\nFor nnet3 models, the `online2-tcp-nnet3-decode-faster` program is used to handle streaming audio. For gmm models, audio buffered and packaged as a WAV file before being transcribed.\n\n## Training\n\nUse `python3 -m rhasspyasr_kaldi train <ARGS>`\n\n```\nusage: rhasspy-asr-kaldi train [-h] --model-dir MODEL_DIR\n                               [--graph-dir GRAPH_DIR]\n                               [--intent-graph INTENT_GRAPH]\n                               [--dictionary DICTIONARY]\n                               [--dictionary-casing {upper,lower,ignore}]\n                               [--language-model LANGUAGE_MODEL]\n                               --base-dictionary BASE_DICTIONARY\n                               [--g2p-model G2P_MODEL]\n                               [--g2p-casing {upper,lower,ignore}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --model-dir MODEL_DIR\n                        Path to Kaldi model directory (with conf, data)\n  --graph-dir GRAPH_DIR\n                        Path to Kaldi graph directory (with HCLG.fst)\n  --intent-graph INTENT_GRAPH\n                        Path to intent graph JSON file (default: stdin)\n  --dictionary DICTIONARY\n                        Path to write custom pronunciation dictionary\n  --dictionary-casing {upper,lower,ignore}\n                        Case transformation for dictionary words (training,\n                        default: ignore)\n  --language-model LANGUAGE_MODEL\n                        Path to write custom language model\n  --base-dictionary BASE_DICTIONARY\n                        Paths to pronunciation dictionaries\n  --g2p-model G2P_MODEL\n                        Path to Phonetisaurus grapheme-to-phoneme FST model\n  --g2p-casing {upper,lower,ignore}\n                        Case transformation for g2p words (training, default:\n                        ignore)\n```\n\nThis will generate a custom `HCLG.fst` from an intent graph created using [rhasspy-nlu](https://github.com/rhasspy/rhasspy-nlu). Your Kaldi model directory should be laid out like this:\n\n* my_model/  (`--model-dir`)\n    * conf/\n        * mfcc_hires.conf\n    * data/\n        * local/\n            * dict/\n                * lexicon.txt (copied from `--dictionary`)\n            * lang/\n                * lm.arpa.gz (copied from `--language-model`)\n    * graph/ (`--graph-dir`)\n        * HCLG.fst (generated)\n    * model/\n        * final.mdl\n    * phones/\n        * extra_questions.txt\n        * nonsilence_phones.txt\n        * optional_silence.txt\n        * silence_phones.txt\n    * online/ (nnet3 only)\n    * extractor/ (nnet3 only)\n\nWhen using the `train` command, you will need to specify the following arguments:\n\n* `--intent-graph` - path to graph json file generated using [rhasspy-nlu](https://github.com/rhasspy/rhasspy-nlu)\n* `--model-type` - either nnet3 or gmm\n* `--model-dir` - path to top-level model directory (my_model in example above)\n* `--graph-dir` - path to directory where HCLG.fst should be written (my_model/graph in example above)\n* `--base-dictionary` - pronunciation dictionary with all words from intent graph (can be used multiple times)\n* `--dictionary` - path to write custom pronunciation dictionary (optional)\n* `--language-model` - path to write custom ARPA language model (optional)\n\n## Building From Source\n\n`rhasspy-asr-kaldi` depends on the following programs that must be compiled:\n\n* [Kaldi](http://kaldi-asr.org)\n    * Speech to text engine\n* [Phonetisaurus](https://github.com/AdolfVonKleist/Phonetisaurus)\n    * Guesses pronunciations for unknown words\n\n### Kaldi\n\nMake sure you have the necessary dependencies installed:\n\n```bash\nsudo apt-get install \\\n    build-essential \\\n    libatlas-base-dev libatlas3-base gfortran \\\n    automake autoconf unzip sox libtool subversion \\\n    python3 python \\\n    git zlib1g-dev\n```\n\nDownload Kaldi and extract it:\n\n```bash\nwget -O kaldi-master.tar.gz \\\n    'https://github.com/kaldi-asr/kaldi/archive/master.tar.gz'\ntar -xvf kaldi-master.tar.gz\n```\n\nFirst, build Kaldi's tools:\n\n```bash\ncd kaldi-master/tools\nmake\n```\n\nUse `make -j 4` if you have multiple CPU cores. This will take a **long** time.\n\nNext, build Kaldi itself:\n\n```bash\ncd kaldi-master\n./configure --shared --mathlib=ATLAS\nmake depend\nmake\n```\n\nUse `make depend -j 4` and `make -j 4` if you have multiple CPU cores. This will take a **long** time.\n\nThere is no installation step. The `kaldi-master` directory contains all the libraries and programs that Rhasspy will need to access.\n\nSee [docker-kaldi](https://github.com/synesthesiam/docker-kaldi) for a Docker build script.\n\n### Phonetisaurus\n\nMake sure you have the necessary dependencies installed:\n\n```bash\nsudo apt-get install build-essential\n```\n\nFirst, download and build [OpenFST 1.6.2](http://www.openfst.org/)\n\n```bash\nwget http://www.openfst.org/twiki/pub/FST/FstDownload/openfst-1.6.2.tar.gz\ntar -xvf openfst-1.6.2.tar.gz\ncd openfst-1.6.2\n./configure \\\n    \"--prefix=$(pwd)/build\" \\\n    --enable-static --enable-shared \\\n    --enable-far --enable-ngram-fsts\nmake\nmake install\n```\n\nUse `make -j 4` if you have multiple CPU cores. This will take a **long** time.\n\nNext, download and extract Phonetisaurus:\n\n```bash\nwget -O phonetisaurus-master.tar.gz \\\n    'https://github.com/AdolfVonKleist/Phonetisaurus/archive/master.tar.gz'\ntar -xvf phonetisaurus-master.tar.gz\n```\n\nFinally, build Phonetisaurus (where `/path/to/openfst` is the `openfst-1.6.2` directory from above):\n\n```\ncd Phonetisaurus-master\n./configure \\\n    --with-openfst-includes=/path/to/openfst/build/include \\\n    --with-openfst-libs=/path/to/openfst/build/lib\nmake\nmake install\n```\n\nUse `make -j 4` if you have multiple CPU cores. This will take a **long** time.\n\nYou should now be able to run the `phonetisaurus-align` program.\n\nSee [docker-phonetisaurus](https://github.com/synesthesiam/docker-phonetisaurus) for a Docker build script.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rhasspy/rhasspy-asr-kaldi", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rhasspy-asr-kaldi", "package_url": "https://pypi.org/project/rhasspy-asr-kaldi/", "platform": "", "project_url": "https://pypi.org/project/rhasspy-asr-kaldi/", "project_urls": {"Homepage": "https://github.com/rhasspy/rhasspy-asr-kaldi"}, "release_url": "https://pypi.org/project/rhasspy-asr-kaldi/0.1.4/", "requires_dist": null, "requires_python": ">=3.7", "summary": "", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Rhasspy ASR Kaldi</h1>\n<p><a href=\"https://github.com/rhasspy/rhasspy-asr-kaldi/actions\" rel=\"nofollow\"><img alt=\"Continous Integration\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d14322c43e86bc9cbd4c19019052fdf795fd93ab/68747470733a2f2f6769746875622e636f6d2f726861737370792f726861737370792d6173722d6b616c64692f776f726b666c6f77732f54657374732f62616467652e737667\"></a>\n<a href=\"https://github.com/rhasspy/rhasspy-asr-kaldi/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b5acecfadf06d6b19c3d96994c8b7acf7b02bb6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f726861737370792f726861737370792d6173722d6b616c64692e737667\"></a></p>\n<p>Automated speech recognition in <a href=\"https://github.com/synesthesiam/rhasspy\" rel=\"nofollow\">Rhasspy</a> voice assistant with <a href=\"http://kaldi-asr.org\" rel=\"nofollow\">Kaldi</a>.</p>\n<h2>Dependencies</h2>\n<p><code>rhasspy-asr-pocketsphinx</code> requires:</p>\n<ul>\n<li>Python 3.7</li>\n<li><a href=\"https://kaldi-asr.org\" rel=\"nofollow\">Kaldi</a></li>\n<li><a href=\"http://www.opengrm.org/twiki/bin/view/GRM/NGramLibrary\" rel=\"nofollow\">Opengrm</a></li>\n<li><a href=\"https://github.com/AdolfVonKleist/Phonetisaurus\" rel=\"nofollow\">Phonetisaurus</a></li>\n</ul>\n<p>You can usually install Opengrm with <code>apt-get install libngram-tools</code></p>\n<p>Kaldi and Phonetisaurus are included in the pre-built wheel.</p>\n<h2>Transcribing</h2>\n<p>Use <code>python3 -m rhasspyasr_kaldi transcribe &lt;ARGS&gt;</code></p>\n<pre><code>usage: rhasspy-asr-kaldi transcribe [-h] --model-dir MODEL_DIR\n                                    [--graph-dir GRAPH_DIR]\n                                    [--model-type MODEL_TYPE]\n                                    [--frames-in-chunk FRAMES_IN_CHUNK]\n                                    [wav_file [wav_file ...]]\n\npositional arguments:\n  wav_file              WAV file(s) to transcribe\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --model-dir MODEL_DIR\n                        Path to Kaldi model directory (with conf, data)\n  --graph-dir GRAPH_DIR\n                        Path to Kaldi graph directory (with HCLG.fst)\n  --model-type MODEL_TYPE\n                        Either nnet3 or gmm (default: nnet3)\n  --frames-in-chunk FRAMES_IN_CHUNK\n                        Number of frames to process at a time\n</code></pre>\n<p>For nnet3 models, the <code>online2-tcp-nnet3-decode-faster</code> program is used to handle streaming audio. For gmm models, audio buffered and packaged as a WAV file before being transcribed.</p>\n<h2>Training</h2>\n<p>Use <code>python3 -m rhasspyasr_kaldi train &lt;ARGS&gt;</code></p>\n<pre><code>usage: rhasspy-asr-kaldi train [-h] --model-dir MODEL_DIR\n                               [--graph-dir GRAPH_DIR]\n                               [--intent-graph INTENT_GRAPH]\n                               [--dictionary DICTIONARY]\n                               [--dictionary-casing {upper,lower,ignore}]\n                               [--language-model LANGUAGE_MODEL]\n                               --base-dictionary BASE_DICTIONARY\n                               [--g2p-model G2P_MODEL]\n                               [--g2p-casing {upper,lower,ignore}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --model-dir MODEL_DIR\n                        Path to Kaldi model directory (with conf, data)\n  --graph-dir GRAPH_DIR\n                        Path to Kaldi graph directory (with HCLG.fst)\n  --intent-graph INTENT_GRAPH\n                        Path to intent graph JSON file (default: stdin)\n  --dictionary DICTIONARY\n                        Path to write custom pronunciation dictionary\n  --dictionary-casing {upper,lower,ignore}\n                        Case transformation for dictionary words (training,\n                        default: ignore)\n  --language-model LANGUAGE_MODEL\n                        Path to write custom language model\n  --base-dictionary BASE_DICTIONARY\n                        Paths to pronunciation dictionaries\n  --g2p-model G2P_MODEL\n                        Path to Phonetisaurus grapheme-to-phoneme FST model\n  --g2p-casing {upper,lower,ignore}\n                        Case transformation for g2p words (training, default:\n                        ignore)\n</code></pre>\n<p>This will generate a custom <code>HCLG.fst</code> from an intent graph created using <a href=\"https://github.com/rhasspy/rhasspy-nlu\" rel=\"nofollow\">rhasspy-nlu</a>. Your Kaldi model directory should be laid out like this:</p>\n<ul>\n<li>my_model/  (<code>--model-dir</code>)\n<ul>\n<li>conf/\n<ul>\n<li>mfcc_hires.conf</li>\n</ul>\n</li>\n<li>data/\n<ul>\n<li>local/\n<ul>\n<li>dict/\n<ul>\n<li>lexicon.txt (copied from <code>--dictionary</code>)</li>\n</ul>\n</li>\n<li>lang/\n<ul>\n<li>lm.arpa.gz (copied from <code>--language-model</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>graph/ (<code>--graph-dir</code>)\n<ul>\n<li>HCLG.fst (generated)</li>\n</ul>\n</li>\n<li>model/\n<ul>\n<li>final.mdl</li>\n</ul>\n</li>\n<li>phones/\n<ul>\n<li>extra_questions.txt</li>\n<li>nonsilence_phones.txt</li>\n<li>optional_silence.txt</li>\n<li>silence_phones.txt</li>\n</ul>\n</li>\n<li>online/ (nnet3 only)</li>\n<li>extractor/ (nnet3 only)</li>\n</ul>\n</li>\n</ul>\n<p>When using the <code>train</code> command, you will need to specify the following arguments:</p>\n<ul>\n<li><code>--intent-graph</code> - path to graph json file generated using <a href=\"https://github.com/rhasspy/rhasspy-nlu\" rel=\"nofollow\">rhasspy-nlu</a></li>\n<li><code>--model-type</code> - either nnet3 or gmm</li>\n<li><code>--model-dir</code> - path to top-level model directory (my_model in example above)</li>\n<li><code>--graph-dir</code> - path to directory where HCLG.fst should be written (my_model/graph in example above)</li>\n<li><code>--base-dictionary</code> - pronunciation dictionary with all words from intent graph (can be used multiple times)</li>\n<li><code>--dictionary</code> - path to write custom pronunciation dictionary (optional)</li>\n<li><code>--language-model</code> - path to write custom ARPA language model (optional)</li>\n</ul>\n<h2>Building From Source</h2>\n<p><code>rhasspy-asr-kaldi</code> depends on the following programs that must be compiled:</p>\n<ul>\n<li><a href=\"http://kaldi-asr.org\" rel=\"nofollow\">Kaldi</a>\n<ul>\n<li>Speech to text engine</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/AdolfVonKleist/Phonetisaurus\" rel=\"nofollow\">Phonetisaurus</a>\n<ul>\n<li>Guesses pronunciations for unknown words</li>\n</ul>\n</li>\n</ul>\n<h3>Kaldi</h3>\n<p>Make sure you have the necessary dependencies installed:</p>\n<pre>sudo apt-get install <span class=\"se\">\\</span>\n    build-essential <span class=\"se\">\\</span>\n    libatlas-base-dev libatlas3-base gfortran <span class=\"se\">\\</span>\n    automake autoconf unzip sox libtool subversion <span class=\"se\">\\</span>\n    python3 python <span class=\"se\">\\</span>\n    git zlib1g-dev\n</pre>\n<p>Download Kaldi and extract it:</p>\n<pre>wget -O kaldi-master.tar.gz <span class=\"se\">\\</span>\n    <span class=\"s1\">'https://github.com/kaldi-asr/kaldi/archive/master.tar.gz'</span>\ntar -xvf kaldi-master.tar.gz\n</pre>\n<p>First, build Kaldi's tools:</p>\n<pre><span class=\"nb\">cd</span> kaldi-master/tools\nmake\n</pre>\n<p>Use <code>make -j 4</code> if you have multiple CPU cores. This will take a <strong>long</strong> time.</p>\n<p>Next, build Kaldi itself:</p>\n<pre><span class=\"nb\">cd</span> kaldi-master\n./configure --shared --mathlib<span class=\"o\">=</span>ATLAS\nmake depend\nmake\n</pre>\n<p>Use <code>make depend -j 4</code> and <code>make -j 4</code> if you have multiple CPU cores. This will take a <strong>long</strong> time.</p>\n<p>There is no installation step. The <code>kaldi-master</code> directory contains all the libraries and programs that Rhasspy will need to access.</p>\n<p>See <a href=\"https://github.com/synesthesiam/docker-kaldi\" rel=\"nofollow\">docker-kaldi</a> for a Docker build script.</p>\n<h3>Phonetisaurus</h3>\n<p>Make sure you have the necessary dependencies installed:</p>\n<pre>sudo apt-get install build-essential\n</pre>\n<p>First, download and build <a href=\"http://www.openfst.org/\" rel=\"nofollow\">OpenFST 1.6.2</a></p>\n<pre>wget http://www.openfst.org/twiki/pub/FST/FstDownload/openfst-1.6.2.tar.gz\ntar -xvf openfst-1.6.2.tar.gz\n<span class=\"nb\">cd</span> openfst-1.6.2\n./configure <span class=\"se\">\\</span>\n    <span class=\"s2\">\"--prefix=</span><span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span><span class=\"s2\">/build\"</span> <span class=\"se\">\\</span>\n    --enable-static --enable-shared <span class=\"se\">\\</span>\n    --enable-far --enable-ngram-fsts\nmake\nmake install\n</pre>\n<p>Use <code>make -j 4</code> if you have multiple CPU cores. This will take a <strong>long</strong> time.</p>\n<p>Next, download and extract Phonetisaurus:</p>\n<pre>wget -O phonetisaurus-master.tar.gz <span class=\"se\">\\</span>\n    <span class=\"s1\">'https://github.com/AdolfVonKleist/Phonetisaurus/archive/master.tar.gz'</span>\ntar -xvf phonetisaurus-master.tar.gz\n</pre>\n<p>Finally, build Phonetisaurus (where <code>/path/to/openfst</code> is the <code>openfst-1.6.2</code> directory from above):</p>\n<pre><code>cd Phonetisaurus-master\n./configure \\\n    --with-openfst-includes=/path/to/openfst/build/include \\\n    --with-openfst-libs=/path/to/openfst/build/lib\nmake\nmake install\n</code></pre>\n<p>Use <code>make -j 4</code> if you have multiple CPU cores. This will take a <strong>long</strong> time.</p>\n<p>You should now be able to run the <code>phonetisaurus-align</code> program.</p>\n<p>See <a href=\"https://github.com/synesthesiam/docker-phonetisaurus\" rel=\"nofollow\">docker-phonetisaurus</a> for a Docker build script.</p>\n\n          </div>"}, "last_serial": 7093466, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "4b01822097199a32ec6b673c3818bf47", "sha256": "ffd966a4b929136275a44d10c5e2b10054a34ebb23d42c7fd648354a91489646"}, "downloads": -1, "filename": "rhasspy-asr-kaldi-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4b01822097199a32ec6b673c3818bf47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11844, "upload_time": "2020-04-24T14:28:01", "upload_time_iso_8601": "2020-04-24T14:28:01.646600Z", "url": "https://files.pythonhosted.org/packages/27/00/b8b94ebfaa0173a34ee88eb5fe04edc43cc102edad6461c9bd5869ab7211/rhasspy-asr-kaldi-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b01822097199a32ec6b673c3818bf47", "sha256": "ffd966a4b929136275a44d10c5e2b10054a34ebb23d42c7fd648354a91489646"}, "downloads": -1, "filename": "rhasspy-asr-kaldi-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4b01822097199a32ec6b673c3818bf47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11844, "upload_time": "2020-04-24T14:28:01", "upload_time_iso_8601": "2020-04-24T14:28:01.646600Z", "url": "https://files.pythonhosted.org/packages/27/00/b8b94ebfaa0173a34ee88eb5fe04edc43cc102edad6461c9bd5869ab7211/rhasspy-asr-kaldi-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:00 2020"}